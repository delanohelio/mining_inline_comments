{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4MjI4MTM1", "number": 1102, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNzoxMDozNFrODbptKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNzo1NjoxNVrODcuKPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMzIxNDQ5OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/security/provider/TestCustomSaslAuthenticationProvider.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNzoxMDozNFrOFjQg2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwNTozMjo1M1rOFkBwyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjUxNTAzMw==", "bodyText": "Why is this test forced onto the blocking rpc client? Can/Should it be parameterized over both implementations?\ncan we not use the MasterRegistry with hedged rpcs disabled? It appears this configuration is supported by the MasterRegistry constructor.", "url": "https://github.com/apache/hbase/pull/1102#discussion_r372515033", "createdAt": "2020-01-29T17:10:34Z", "author": {"login": "ndimiduk"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/security/provider/TestCustomSaslAuthenticationProvider.java", "diffHunk": "@@ -431,9 +431,13 @@ public static void setupCluster() throws Exception {\n         UTIL.getDataTestDir(\"keytab\").toUri().getPath());\n     final MiniKdc kdc = UTIL.setupMiniKdc(KEYTAB_FILE);\n \n-    // Switch back to NIO for now.\n+    // Switch to blocking RPC impl.\n     CONF.set(RpcClientFactory.CUSTOM_RPC_CLIENT_IMPL_CONF_KEY, BlockingRpcClient.class.getName());\n     CONF.set(RpcServerFactory.CUSTOM_RPC_SERVER_IMPL_CONF_KEY, SimpleRpcServer.class.getName());\n+    // Set the connection registry to ZKConnectionRegistry since hedging is not supported on\n+    // blocking rpc clients.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65aa30cf72f0829c3306a48cfbf95198bc50c4fc"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjUzMDQ1NA==", "bodyText": "Why is this test forced onto the blocking rpc client? Can/Should it be parameterized over both implementations?\n\nNot totally sure why it should only be a blocking rpc client (and a SimpleRpcServer impl). @joshelser Any idea? I see that you are the author of this test.\n\ncan we not use the MasterRegistry with hedged rpcs disabled? It appears this configuration is supported by the MasterRegistry constructor.\n\nWe can. But my comment above has nothing to do with whether hedging is enabled/disabled. HedgingRpcChannel is a non-blocking channel implementation. Using a non-blocking-channel wrapped over a blocking-rpc-connection defeats the purpose.", "url": "https://github.com/apache/hbase/pull/1102#discussion_r372530454", "createdAt": "2020-01-29T17:39:55Z", "author": {"login": "bharathv"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/security/provider/TestCustomSaslAuthenticationProvider.java", "diffHunk": "@@ -431,9 +431,13 @@ public static void setupCluster() throws Exception {\n         UTIL.getDataTestDir(\"keytab\").toUri().getPath());\n     final MiniKdc kdc = UTIL.setupMiniKdc(KEYTAB_FILE);\n \n-    // Switch back to NIO for now.\n+    // Switch to blocking RPC impl.\n     CONF.set(RpcClientFactory.CUSTOM_RPC_CLIENT_IMPL_CONF_KEY, BlockingRpcClient.class.getName());\n     CONF.set(RpcServerFactory.CUSTOM_RPC_SERVER_IMPL_CONF_KEY, SimpleRpcServer.class.getName());\n+    // Set the connection registry to ZKConnectionRegistry since hedging is not supported on\n+    // blocking rpc clients.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjUxNTAzMw=="}, "originalCommit": {"oid": "65aa30cf72f0829c3306a48cfbf95198bc50c4fc"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA2NTEwMQ==", "bodyText": "Why is this test forced onto the blocking rpc client? Can/Should it be parameterized over both implementations?\n\nOversight on my part! Like Nick says -- we should use both via parameterization. There's another test which does this .... TestSecureIPC!\nDo you want to add that parameterization as a part of this PR? Or I can open up an issue and fix this test (as the negligent author ;)). LMK!", "url": "https://github.com/apache/hbase/pull/1102#discussion_r373065101", "createdAt": "2020-01-30T16:46:09Z", "author": {"login": "joshelser"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/security/provider/TestCustomSaslAuthenticationProvider.java", "diffHunk": "@@ -431,9 +431,13 @@ public static void setupCluster() throws Exception {\n         UTIL.getDataTestDir(\"keytab\").toUri().getPath());\n     final MiniKdc kdc = UTIL.setupMiniKdc(KEYTAB_FILE);\n \n-    // Switch back to NIO for now.\n+    // Switch to blocking RPC impl.\n     CONF.set(RpcClientFactory.CUSTOM_RPC_CLIENT_IMPL_CONF_KEY, BlockingRpcClient.class.getName());\n     CONF.set(RpcServerFactory.CUSTOM_RPC_SERVER_IMPL_CONF_KEY, SimpleRpcServer.class.getName());\n+    // Set the connection registry to ZKConnectionRegistry since hedging is not supported on\n+    // blocking rpc clients.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjUxNTAzMw=="}, "originalCommit": {"oid": "65aa30cf72f0829c3306a48cfbf95198bc50c4fc"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzMyMTkzMQ==", "bodyText": "No worries, I parameterized it. Thanks for the quick response.", "url": "https://github.com/apache/hbase/pull/1102#discussion_r373321931", "createdAt": "2020-01-31T05:32:53Z", "author": {"login": "bharathv"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/security/provider/TestCustomSaslAuthenticationProvider.java", "diffHunk": "@@ -431,9 +431,13 @@ public static void setupCluster() throws Exception {\n         UTIL.getDataTestDir(\"keytab\").toUri().getPath());\n     final MiniKdc kdc = UTIL.setupMiniKdc(KEYTAB_FILE);\n \n-    // Switch back to NIO for now.\n+    // Switch to blocking RPC impl.\n     CONF.set(RpcClientFactory.CUSTOM_RPC_CLIENT_IMPL_CONF_KEY, BlockingRpcClient.class.getName());\n     CONF.set(RpcServerFactory.CUSTOM_RPC_SERVER_IMPL_CONF_KEY, SimpleRpcServer.class.getName());\n+    // Set the connection registry to ZKConnectionRegistry since hedging is not supported on\n+    // blocking rpc clients.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjUxNTAzMw=="}, "originalCommit": {"oid": "65aa30cf72f0829c3306a48cfbf95198bc50c4fc"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwOTYzMTczOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/security/provider/TestCustomSaslAuthenticationProvider.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNTowNDoxN1rOFkOK6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMDoxMjoyNVrOFkWuTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzUyNTIyNg==", "bodyText": "There's a throws Exception on run() so we need  a fail() \"close\" to the return null. Right now, an exception other than MasterRegistryFetchException and RetriesExhaustedException would not cause a unit test failure.\nYou can just move the fail from inside the try, next to this return null and change the message to be something like Expected an authentication failure.", "url": "https://github.com/apache/hbase/pull/1102#discussion_r373525226", "createdAt": "2020-01-31T15:04:17Z", "author": {"login": "joshelser"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/security/provider/TestCustomSaslAuthenticationProvider.java", "diffHunk": "@@ -527,12 +568,22 @@ public void testNegativeAuthentication() throws Exception {\n     user1.addToken(createPasswordToken(\"user1\", \"definitely not the password\", clusterId));\n     user1.doAs(new PrivilegedExceptionAction<Void>() {\n       @Override public Void run() throws Exception {\n+        // Depending on the registry in use, the following code can throw exceptions at different\n+        // places. Master registry fails at the createConnection() step because the RPC to the\n+        // master fails with sasl auth. With ZK registry, connection creation succeeds (since there\n+        // is no RPC to HBase services involved) but the subsequent get() fails. The root cause\n+        // should still be a SaslException in both the cases.\n         try (Connection conn = ConnectionFactory.createConnection(clientConf);\n             Table t = conn.getTable(tableName)) {\n           t.get(new Get(Bytes.toBytes(\"r1\")));\n           fail(\"Should not successfully authenticate with HBase\");\n-          return null;\n+        } catch (MasterRegistryFetchException mfe) {\n+          Throwable cause = mfe.getCause();\n+          assertTrue(cause.getMessage(), cause.getMessage().contains(\"SaslException\"));\n+        } catch (RetriesExhaustedException re) {\n+          assertTrue(re.getMessage(), re.getMessage().contains(\"SaslException\"));\n         }\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c371dab95388cf1bab15d88c9449e0edd46c7993"}, "originalPosition": 216}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU4MTk5NQ==", "bodyText": "Right now, an exception other than MasterRegistryFetchException and RetriesExhaustedException would not cause a unit test failure.\n\nNot sure I follow you, the exception should be propagated back to the test (since it is not caught) and it should fail, no? I tried the following it works (meaning the IAE is thrown by the unit test runner). Did I miss something?\nuser1.doAs(new PrivilegedExceptionAction<Void>() {\n     @Override public Void run() throws Exception {\n       // Depending on the registry in use, the following code can throw exceptions at different\n       // places. Master registry fails at the createConnection() step because the RPC to the\n       // master fails with sasl auth. With ZK registry, connection creation succeeds (since there\n       // is no RPC to HBase services involved) but the subsequent get() fails. The root cause\n       // should still be a SaslException in both the cases.\n       try (Connection conn = ConnectionFactory.createConnection(clientConf);\n           Table t = conn.getTable(tableName)) {\n         if (true) {\n           throw new IllegalArgumentException(\"test\");\n         }\n         t.get(new Get(Bytes.toBytes(\"r1\")));\n\njava.lang.IllegalArgumentException: test\n\n   at org.apache.hadoop.hbase.security.provider.TestCustomSaslAuthenticationProvider$3.run(TestCustomSaslAuthenticationProvider.java:579)\n   at org.apache.hadoop.hbase.security.provider.TestCustomSaslAuthenticationProvider$3.run(TestCustomSaslAuthenticationProvider.java:569)\n   at java.security.AccessController.doPrivileged(Native Method)\n   at javax.security.auth.Subject.doAs(Subject.java:422)", "url": "https://github.com/apache/hbase/pull/1102#discussion_r373581995", "createdAt": "2020-01-31T16:56:51Z", "author": {"login": "bharathv"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/security/provider/TestCustomSaslAuthenticationProvider.java", "diffHunk": "@@ -527,12 +568,22 @@ public void testNegativeAuthentication() throws Exception {\n     user1.addToken(createPasswordToken(\"user1\", \"definitely not the password\", clusterId));\n     user1.doAs(new PrivilegedExceptionAction<Void>() {\n       @Override public Void run() throws Exception {\n+        // Depending on the registry in use, the following code can throw exceptions at different\n+        // places. Master registry fails at the createConnection() step because the RPC to the\n+        // master fails with sasl auth. With ZK registry, connection creation succeeds (since there\n+        // is no RPC to HBase services involved) but the subsequent get() fails. The root cause\n+        // should still be a SaslException in both the cases.\n         try (Connection conn = ConnectionFactory.createConnection(clientConf);\n             Table t = conn.getTable(tableName)) {\n           t.get(new Get(Bytes.toBytes(\"r1\")));\n           fail(\"Should not successfully authenticate with HBase\");\n-          return null;\n+        } catch (MasterRegistryFetchException mfe) {\n+          Throwable cause = mfe.getCause();\n+          assertTrue(cause.getMessage(), cause.getMessage().contains(\"SaslException\"));\n+        } catch (RetriesExhaustedException re) {\n+          assertTrue(re.getMessage(), re.getMessage().contains(\"SaslException\"));\n         }\n+        return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzUyNTIyNg=="}, "originalCommit": {"oid": "c371dab95388cf1bab15d88c9449e0edd46c7993"}, "originalPosition": 216}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYxODk4OQ==", "bodyText": "You're right that the thrown, uncaught exception will ultimately cause the test to fail, but you're removing the nice exception stating the reason the test failed :)", "url": "https://github.com/apache/hbase/pull/1102#discussion_r373618989", "createdAt": "2020-01-31T18:24:34Z", "author": {"login": "joshelser"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/security/provider/TestCustomSaslAuthenticationProvider.java", "diffHunk": "@@ -527,12 +568,22 @@ public void testNegativeAuthentication() throws Exception {\n     user1.addToken(createPasswordToken(\"user1\", \"definitely not the password\", clusterId));\n     user1.doAs(new PrivilegedExceptionAction<Void>() {\n       @Override public Void run() throws Exception {\n+        // Depending on the registry in use, the following code can throw exceptions at different\n+        // places. Master registry fails at the createConnection() step because the RPC to the\n+        // master fails with sasl auth. With ZK registry, connection creation succeeds (since there\n+        // is no RPC to HBase services involved) but the subsequent get() fails. The root cause\n+        // should still be a SaslException in both the cases.\n         try (Connection conn = ConnectionFactory.createConnection(clientConf);\n             Table t = conn.getTable(tableName)) {\n           t.get(new Get(Bytes.toBytes(\"r1\")));\n           fail(\"Should not successfully authenticate with HBase\");\n-          return null;\n+        } catch (MasterRegistryFetchException mfe) {\n+          Throwable cause = mfe.getCause();\n+          assertTrue(cause.getMessage(), cause.getMessage().contains(\"SaslException\"));\n+        } catch (RetriesExhaustedException re) {\n+          assertTrue(re.getMessage(), re.getMessage().contains(\"SaslException\"));\n         }\n+        return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzUyNTIyNg=="}, "originalCommit": {"oid": "c371dab95388cf1bab15d88c9449e0edd46c7993"}, "originalPosition": 216}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY1ODEyNg==", "bodyText": "Okay, added back a nice exception. The issue with moving fail() towards the end is that we need sprinkle the \"return null\" statements in the catch blocks. This is more readable IMO.", "url": "https://github.com/apache/hbase/pull/1102#discussion_r373658126", "createdAt": "2020-01-31T19:54:36Z", "author": {"login": "bharathv"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/security/provider/TestCustomSaslAuthenticationProvider.java", "diffHunk": "@@ -527,12 +568,22 @@ public void testNegativeAuthentication() throws Exception {\n     user1.addToken(createPasswordToken(\"user1\", \"definitely not the password\", clusterId));\n     user1.doAs(new PrivilegedExceptionAction<Void>() {\n       @Override public Void run() throws Exception {\n+        // Depending on the registry in use, the following code can throw exceptions at different\n+        // places. Master registry fails at the createConnection() step because the RPC to the\n+        // master fails with sasl auth. With ZK registry, connection creation succeeds (since there\n+        // is no RPC to HBase services involved) but the subsequent get() fails. The root cause\n+        // should still be a SaslException in both the cases.\n         try (Connection conn = ConnectionFactory.createConnection(clientConf);\n             Table t = conn.getTable(tableName)) {\n           t.get(new Get(Bytes.toBytes(\"r1\")));\n           fail(\"Should not successfully authenticate with HBase\");\n-          return null;\n+        } catch (MasterRegistryFetchException mfe) {\n+          Throwable cause = mfe.getCause();\n+          assertTrue(cause.getMessage(), cause.getMessage().contains(\"SaslException\"));\n+        } catch (RetriesExhaustedException re) {\n+          assertTrue(re.getMessage(), re.getMessage().contains(\"SaslException\"));\n         }\n+        return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzUyNTIyNg=="}, "originalCommit": {"oid": "c371dab95388cf1bab15d88c9449e0edd46c7993"}, "originalPosition": 216}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY2NTM1Ng==", "bodyText": "Yup, what you did is fine. Thanks!", "url": "https://github.com/apache/hbase/pull/1102#discussion_r373665356", "createdAt": "2020-01-31T20:12:25Z", "author": {"login": "joshelser"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/security/provider/TestCustomSaslAuthenticationProvider.java", "diffHunk": "@@ -527,12 +568,22 @@ public void testNegativeAuthentication() throws Exception {\n     user1.addToken(createPasswordToken(\"user1\", \"definitely not the password\", clusterId));\n     user1.doAs(new PrivilegedExceptionAction<Void>() {\n       @Override public Void run() throws Exception {\n+        // Depending on the registry in use, the following code can throw exceptions at different\n+        // places. Master registry fails at the createConnection() step because the RPC to the\n+        // master fails with sasl auth. With ZK registry, connection creation succeeds (since there\n+        // is no RPC to HBase services involved) but the subsequent get() fails. The root cause\n+        // should still be a SaslException in both the cases.\n         try (Connection conn = ConnectionFactory.createConnection(clientConf);\n             Table t = conn.getTable(tableName)) {\n           t.get(new Get(Bytes.toBytes(\"r1\")));\n           fail(\"Should not successfully authenticate with HBase\");\n-          return null;\n+        } catch (MasterRegistryFetchException mfe) {\n+          Throwable cause = mfe.getCause();\n+          assertTrue(cause.getMessage(), cause.getMessage().contains(\"SaslException\"));\n+        } catch (RetriesExhaustedException re) {\n+          assertTrue(re.getMessage(), re.getMessage().contains(\"SaslException\"));\n         }\n+        return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzUyNTIyNg=="}, "originalCommit": {"oid": "c371dab95388cf1bab15d88c9449e0edd46c7993"}, "originalPosition": 216}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNDQzMDA1OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/security/provider/TestCustomSaslAuthenticationProvider.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNzo1NjoxNVrOFk6Zvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxODoxMjoxMVrOFk62oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI0OTkxOA==", "bodyText": "Sucks that we have to spin the new cluster for every test method. It is not possible to do this cluster configuration and initialization in the constructor instead?", "url": "https://github.com/apache/hbase/pull/1102#discussion_r374249918", "createdAt": "2020-02-03T17:56:15Z", "author": {"login": "ndimiduk"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/security/provider/TestCustomSaslAuthenticationProvider.java", "diffHunk": "@@ -443,9 +464,23 @@ public static void setupCluster() throws Exception {\n         InMemoryServerProvider.class.getName());\n     CONF.set(SaslClientAuthenticationProviders.SELECTOR_KEY,\n         InMemoryProviderSelector.class.getName());\n+    createBaseCluster(UTIL, KEYTAB_FILE, kdc);\n+  }\n \n-    CLUSTER = createCluster(UTIL, KEYTAB_FILE, kdc);\n+  @Before\n+  public void setUpBeforeTest() throws Exception {\n+    CONF.unset(HConstants.CLIENT_CONNECTION_REGISTRY_IMPL_CONF_KEY);\n+    CONF.set(RpcClientFactory.CUSTOM_RPC_CLIENT_IMPL_CONF_KEY, rpcClientImpl);\n+    CONF.set(RpcServerFactory.CUSTOM_RPC_SERVER_IMPL_CONF_KEY, rpcServerImpl);\n+    if (rpcClientImpl.equals(BlockingRpcClient.class.getName())) {\n+      // Set the connection registry to ZKConnectionRegistry since hedging is not supported on\n+      // blocking rpc clients.\n+      CONF.set(HConstants.CLIENT_CONNECTION_REGISTRY_IMPL_CONF_KEY,\n+          HConstants.ZK_CONNECTION_REGISTRY_CLASS);\n+    }\n+    CLUSTER = new LocalHBaseCluster(CONF, 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "298392ce8ff877a7f2a2ae509bdc355b4bfafde3"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI1NTA0OQ==", "bodyText": "Ya, unfortunately its the same problem, JUnit calls the ctor for every parameterized test invocation. So we'd need to have some logic like\nif (same instance of params) don't restart\nWe did that in TestFromClientSide but the code becomes ugly. Lucikly, there are fewer tests, so this works out ok here.", "url": "https://github.com/apache/hbase/pull/1102#discussion_r374255049", "createdAt": "2020-02-03T18:07:23Z", "author": {"login": "bharathv"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/security/provider/TestCustomSaslAuthenticationProvider.java", "diffHunk": "@@ -443,9 +464,23 @@ public static void setupCluster() throws Exception {\n         InMemoryServerProvider.class.getName());\n     CONF.set(SaslClientAuthenticationProviders.SELECTOR_KEY,\n         InMemoryProviderSelector.class.getName());\n+    createBaseCluster(UTIL, KEYTAB_FILE, kdc);\n+  }\n \n-    CLUSTER = createCluster(UTIL, KEYTAB_FILE, kdc);\n+  @Before\n+  public void setUpBeforeTest() throws Exception {\n+    CONF.unset(HConstants.CLIENT_CONNECTION_REGISTRY_IMPL_CONF_KEY);\n+    CONF.set(RpcClientFactory.CUSTOM_RPC_CLIENT_IMPL_CONF_KEY, rpcClientImpl);\n+    CONF.set(RpcServerFactory.CUSTOM_RPC_SERVER_IMPL_CONF_KEY, rpcServerImpl);\n+    if (rpcClientImpl.equals(BlockingRpcClient.class.getName())) {\n+      // Set the connection registry to ZKConnectionRegistry since hedging is not supported on\n+      // blocking rpc clients.\n+      CONF.set(HConstants.CLIENT_CONNECTION_REGISTRY_IMPL_CONF_KEY,\n+          HConstants.ZK_CONNECTION_REGISTRY_CLASS);\n+    }\n+    CLUSTER = new LocalHBaseCluster(CONF, 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI0OTkxOA=="}, "originalCommit": {"oid": "298392ce8ff877a7f2a2ae509bdc355b4bfafde3"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI1NzMxMw==", "bodyText": "Okay, makes sense. Thanks.", "url": "https://github.com/apache/hbase/pull/1102#discussion_r374257313", "createdAt": "2020-02-03T18:12:11Z", "author": {"login": "ndimiduk"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/security/provider/TestCustomSaslAuthenticationProvider.java", "diffHunk": "@@ -443,9 +464,23 @@ public static void setupCluster() throws Exception {\n         InMemoryServerProvider.class.getName());\n     CONF.set(SaslClientAuthenticationProviders.SELECTOR_KEY,\n         InMemoryProviderSelector.class.getName());\n+    createBaseCluster(UTIL, KEYTAB_FILE, kdc);\n+  }\n \n-    CLUSTER = createCluster(UTIL, KEYTAB_FILE, kdc);\n+  @Before\n+  public void setUpBeforeTest() throws Exception {\n+    CONF.unset(HConstants.CLIENT_CONNECTION_REGISTRY_IMPL_CONF_KEY);\n+    CONF.set(RpcClientFactory.CUSTOM_RPC_CLIENT_IMPL_CONF_KEY, rpcClientImpl);\n+    CONF.set(RpcServerFactory.CUSTOM_RPC_SERVER_IMPL_CONF_KEY, rpcServerImpl);\n+    if (rpcClientImpl.equals(BlockingRpcClient.class.getName())) {\n+      // Set the connection registry to ZKConnectionRegistry since hedging is not supported on\n+      // blocking rpc clients.\n+      CONF.set(HConstants.CLIENT_CONNECTION_REGISTRY_IMPL_CONF_KEY,\n+          HConstants.ZK_CONNECTION_REGISTRY_CLASS);\n+    }\n+    CLUSTER = new LocalHBaseCluster(CONF, 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI0OTkxOA=="}, "originalCommit": {"oid": "298392ce8ff877a7f2a2ae509bdc355b4bfafde3"}, "originalPosition": 157}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2191, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}