{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgzMDQyNjE5", "number": 3333, "title": "STORM-3697 add capacity metric", "bodyText": "What is the purpose of the change\nAllow users to track a capacity metric other than on UI\nHow was the change tested\nRan topology with load and validated reported capacity was in line with UI.", "createdAt": "2020-09-09T18:30:29Z", "url": "https://github.com/apache/storm/pull/3333", "merged": true, "mergeCommit": {"oid": "7bef73a6faa14558ef254efe74cbe4bfef81c2e2"}, "closed": true, "closedAt": "2020-09-30T21:24:23Z", "author": {"login": "agresch"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdHQf17AH2gAyNDgzMDQyNjE5OjgwYTQ5MzlkNzViYjdjYjNiZDdlZmRhNmY5Y2YzOGNhMjIxMWY1ZGU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdNyWMqgFqTQ5OTAyNTU3Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "80a4939d75bb7cb3bd7efda6f9cf38ca2211f5de", "author": {"user": null}, "url": "https://github.com/apache/storm/commit/80a4939d75bb7cb3bd7efda6f9cf38ca2211f5de", "committedDate": "2020-09-09T18:27:58Z", "message": "STORM-3697 add capacity metric"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyMjY2NDc0", "url": "https://github.com/apache/storm/pull/3333#pullrequestreview-492266474", "createdAt": "2020-09-21T03:48:59Z", "commit": {"oid": "80a4939d75bb7cb3bd7efda6f9cf38ca2211f5de"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2NjY4MzYz", "url": "https://github.com/apache/storm/pull/3333#pullrequestreview-496668363", "createdAt": "2020-09-25T18:32:08Z", "commit": {"oid": "80a4939d75bb7cb3bd7efda6f9cf38ca2211f5de"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5MDIzNjQ3", "url": "https://github.com/apache/storm/pull/3333#pullrequestreview-499023647", "createdAt": "2020-09-30T01:10:14Z", "commit": {"oid": "80a4939d75bb7cb3bd7efda6f9cf38ca2211f5de"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5MDI1NTc2", "url": "https://github.com/apache/storm/pull/3333#pullrequestreview-499025576", "createdAt": "2020-09-30T01:17:45Z", "commit": {"oid": "80a4939d75bb7cb3bd7efda6f9cf38ca2211f5de"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMToxNzo0NVrOHaKHsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMToxNzo0NVrOHaKHsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE5MDgzMg==", "bodyText": "TEN_MIN_IN_SECONDS_STR can be a constant in this class itself.  But this is not important.", "url": "https://github.com/apache/storm/pull/3333#discussion_r497190832", "createdAt": "2020-09-30T01:17:45Z", "author": {"login": "Ethanlm"}, "path": "storm-client/src/jvm/org/apache/storm/stats/BoltExecutorStats.java", "diffHunk": "@@ -53,10 +58,53 @@ public void cleanupStats() {\n         super.cleanupStats();\n     }\n \n-    public void boltExecuteTuple(String component, String stream, long latencyMs) {\n+    public void boltExecuteTuple(String component, String stream, long latencyMs, long workerUptimeSecs,\n+                                 Task firstExecutorTask) {\n         List key = Lists.newArrayList(component, stream);\n         this.getExecuted().incBy(key, this.rate);\n         this.getExecuteLatencies().record(key, latencyMs);\n+\n+        // Calculate capacity:  This is really for the whole executor, but we will use the executor's first task\n+        // for reporting the metric.\n+        double capacity = calculateCapacity(workerUptimeSecs);\n+        firstExecutorTask.getTaskMetrics().setCapacity(capacity);\n+    }\n+\n+    private double calculateCapacity(long workerUptimeSecs) {\n+        if (workerUptimeSecs > 0) {\n+            Map<String, Double> execAvg = valueStat(this.getExecuteLatencies()).get(MultiCountStat.TEN_MIN_IN_SECONDS_STR);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80a4939d75bb7cb3bd7efda6f9cf38ca2211f5de"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4930, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}