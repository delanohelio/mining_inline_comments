{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM5ODQzNTAx", "number": 3362, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNjozNDowOVrOFFr-yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNToxODozNFrOFGPviQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNTA3Nzg3OnYy", "diffSide": "RIGHT", "path": "storm-server/src/test/java/org/apache/storm/utils/ServerUtilsTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNjozNDowOVrOIGUiFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNzowMTozMVrOIGV7dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ5ODc3Mg==", "bodyText": "indention seems off", "url": "https://github.com/apache/storm/pull/3362#discussion_r543498772", "createdAt": "2020-12-15T16:34:09Z", "author": {"login": "Ethanlm"}, "path": "storm-server/src/test/java/org/apache/storm/utils/ServerUtilsTest.java", "diffHunk": "@@ -106,7 +116,15 @@ public void testExtractZipFileDisallowsPathTraversalWhenUsingPrefix() throws Exc\n                     continue;\n                 }\n                 try {\n-                    pids.add(Long.parseLong(line.split(\"\\\\s\")[0]));\n+                     String pidStr = line.split(\"\\\\s\")[0];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "167c51640ddbea6ff5cd17b6e3ed5531717694f2"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUyMTY1Mg==", "bodyText": "fixed", "url": "https://github.com/apache/storm/pull/3362#discussion_r543521652", "createdAt": "2020-12-15T17:01:31Z", "author": {"login": "bipinprasad"}, "path": "storm-server/src/test/java/org/apache/storm/utils/ServerUtilsTest.java", "diffHunk": "@@ -106,7 +116,15 @@ public void testExtractZipFileDisallowsPathTraversalWhenUsingPrefix() throws Exc\n                     continue;\n                 }\n                 try {\n-                    pids.add(Long.parseLong(line.split(\"\\\\s\")[0]));\n+                     String pidStr = line.split(\"\\\\s\")[0];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ5ODc3Mg=="}, "originalCommit": {"oid": "167c51640ddbea6ff5cd17b6e3ed5531717694f2"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNTEwNzYxOnYy", "diffSide": "RIGHT", "path": "storm-server/src/test/java/org/apache/storm/utils/ServerUtilsTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNjozOTo0N1rOIGUzyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNjozOTo0N1rOIGUzyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUwMzMwNw==", "bodyText": "Thanks for adding the unit test", "url": "https://github.com/apache/storm/pull/3362#discussion_r543503307", "createdAt": "2020-12-15T16:39:47Z", "author": {"login": "Ethanlm"}, "path": "storm-server/src/test/java/org/apache/storm/utils/ServerUtilsTest.java", "diffHunk": "@@ -272,18 +290,28 @@ public void testIsAnyPosixProcessPidDirAliveMockingFileOwnerUid() throws Excepti\n             LOG.info(\"Test testIsAnyPosixProcessPidDirAlive is designed to run on systems with /proc directory only, marking as success\");\n             return;\n         }\n-        Collection<Long> pids = getRunningProcessIds();\n-        assertFalse(pids.isEmpty());\n+        Collection<Long> allPids = getRunningProcessIds(null);\n+        Collection<Long> rootPids = getRunningProcessIds(\"root\");\n+        assertFalse(allPids.isEmpty());\n+        assertFalse(rootPids.isEmpty());\n \n-        for (int i = 0 ; i < 2 ; i++) {\n-            boolean mockFileOwnerToUid = (i % 2 == 0);\n+        String currentUser = System.getProperty(\"user.name\");\n+\n+        for (boolean mockFileOwnerToUid: Arrays.asList(true, false)) {\n             // at least one pid will be owned by the current user (doing the testing)\n-            String currentUser = System.getProperty(\"user.name\");\n-            boolean status = ServerUtils.isAnyPosixProcessPidDirAlive(pids, currentUser, mockFileOwnerToUid);\n+            boolean status = ServerUtils.isAnyPosixProcessPidDirAlive(allPids, currentUser, mockFileOwnerToUid);\n             String err = String.format(\"(mockFileOwnerToUid=%s) Expecting user %s to own at least one process\",\n                     mockFileOwnerToUid, currentUser);\n             assertTrue(err, status);\n         }\n+\n+        // simulate reassignment of all process id to a different user (root)\n+        for (boolean mockFileOwnerToUid: Arrays.asList(true, false)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "167c51640ddbea6ff5cd17b6e3ed5531717694f2"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNTExODQ1OnYy", "diffSide": "RIGHT", "path": "storm-server/src/test/java/org/apache/storm/utils/ServerUtilsTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNjo0MTo0NVrOIGU57A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNjo1NzoyN1rOIGVtew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUwNDg3Ng==", "bodyText": "It doesn't seem very necessary to get all pids. We just need the pids from currentUser (System.getProperty(\"user.name\"))", "url": "https://github.com/apache/storm/pull/3362#discussion_r543504876", "createdAt": "2020-12-15T16:41:45Z", "author": {"login": "Ethanlm"}, "path": "storm-server/src/test/java/org/apache/storm/utils/ServerUtilsTest.java", "diffHunk": "@@ -272,18 +290,28 @@ public void testIsAnyPosixProcessPidDirAliveMockingFileOwnerUid() throws Excepti\n             LOG.info(\"Test testIsAnyPosixProcessPidDirAlive is designed to run on systems with /proc directory only, marking as success\");\n             return;\n         }\n-        Collection<Long> pids = getRunningProcessIds();\n-        assertFalse(pids.isEmpty());\n+        Collection<Long> allPids = getRunningProcessIds(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "167c51640ddbea6ff5cd17b6e3ed5531717694f2"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUxODA3NQ==", "bodyText": "This tests the case where some (but not all) PIDs have been reassigned.", "url": "https://github.com/apache/storm/pull/3362#discussion_r543518075", "createdAt": "2020-12-15T16:57:27Z", "author": {"login": "bipinprasad"}, "path": "storm-server/src/test/java/org/apache/storm/utils/ServerUtilsTest.java", "diffHunk": "@@ -272,18 +290,28 @@ public void testIsAnyPosixProcessPidDirAliveMockingFileOwnerUid() throws Excepti\n             LOG.info(\"Test testIsAnyPosixProcessPidDirAlive is designed to run on systems with /proc directory only, marking as success\");\n             return;\n         }\n-        Collection<Long> pids = getRunningProcessIds();\n-        assertFalse(pids.isEmpty());\n+        Collection<Long> allPids = getRunningProcessIds(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUwNDg3Ng=="}, "originalCommit": {"oid": "167c51640ddbea6ff5cd17b6e3ed5531717694f2"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNTEzMTMwOnYy", "diffSide": "RIGHT", "path": "storm-server/src/main/java/org/apache/storm/utils/ServerUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNjo0Mzo1MVrOIGVBGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNzowMzoxNFrOIGWAnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUwNjcxNA==", "bodyText": "Looks like the log should be a new process for actualUser {}\"\nAnd is it possible to print out the cmdline of this processId so we know what the process really is? It seems unlikely that a processId is reused by another user (or root) so quickly. I hope to get more details when this happens. Thanks", "url": "https://github.com/apache/storm/pull/3362#discussion_r543506714", "createdAt": "2020-12-15T16:43:51Z", "author": {"login": "Ethanlm"}, "path": "storm-server/src/main/java/org/apache/storm/utils/ServerUtils.java", "diffHunk": "@@ -1309,8 +1309,6 @@ public static boolean isAnyPosixProcessPidDirAlive(Collection<Long> pids, String\n                         + \"likely pid {} was reused for a new process for expectedUser {}\",\n                         pidDir, actualUser, expectedUser, pid, actualUser);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "167c51640ddbea6ff5cd17b6e3ed5531717694f2"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUyMjk3Mw==", "bodyText": "fixed log", "url": "https://github.com/apache/storm/pull/3362#discussion_r543522973", "createdAt": "2020-12-15T17:03:14Z", "author": {"login": "bipinprasad"}, "path": "storm-server/src/main/java/org/apache/storm/utils/ServerUtils.java", "diffHunk": "@@ -1309,8 +1309,6 @@ public static boolean isAnyPosixProcessPidDirAlive(Collection<Long> pids, String\n                         + \"likely pid {} was reused for a new process for expectedUser {}\",\n                         pidDir, actualUser, expectedUser, pid, actualUser);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUwNjcxNA=="}, "originalCommit": {"oid": "167c51640ddbea6ff5cd17b6e3ed5531717694f2"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMDkzNzA1OnYy", "diffSide": "RIGHT", "path": "storm-server/src/main/java/org/apache/storm/utils/ServerUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNToxODozNFrOIHKf4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNToxODozNFrOIHKf4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM4Mjk0NA==", "bodyText": "Maybe log a warning here and below?", "url": "https://github.com/apache/storm/pull/3362#discussion_r544382944", "createdAt": "2020-12-16T15:18:34Z", "author": {"login": "Ethanlm"}, "path": "storm-server/src/main/java/org/apache/storm/utils/ServerUtils.java", "diffHunk": "@@ -1295,22 +1295,45 @@ public static boolean isAnyPosixProcessPidDirAlive(Collection<Long> pids, String\n                     LOG.debug(\"Process {} is alive and owned by expectedUser {}/{}\", pid, expectedUser, expectedUid);\n                     return true;\n                 }\n-                LOG.info(\"Prior process is dead, since directory {} owner {} is not same as expected expectedUser {}/{}, \"\n-                        + \"likely pid {} was reused for a new process for uid {}\",\n-                        pidDir, actualUser, expectedUser, expectedUid, pid, actualUid);\n+                LOG.info(\"Prior process is dead, since directory {} owner {} is not same as expectedUser {}/{}, \"\n+                        + \"likely pid {} was reused for a new process for uid {}, {}\",\n+                        pidDir, actualUser, expectedUser, expectedUid, pid, actualUid, getProcessDesc(pidDir));\n             } else {\n                 // actualUser is a string\n                 LOG.debug(\"Process directory {} owner is {}\", pidDir, actualUser);\n                 if (expectedUser.equals(actualUser)) {\n                     LOG.debug(\"Process {} is alive and owned by expectedUser {}\", pid, expectedUser);\n                     return true;\n                 }\n-                LOG.info(\"Prior process is dead, since directory {} owner {} is not same as expected expectedUser {}, \"\n-                        + \"likely pid {} was reused for a new process for expectedUser {}\",\n-                        pidDir, actualUser, expectedUser, pid, actualUser);\n+                LOG.info(\"Prior process is dead, since directory {} owner {} is not same as expectedUser {}, \"\n+                        + \"likely pid {} was reused for a new process for actualUser {}, {}}\",\n+                        pidDir, actualUser, expectedUser, pid, actualUser, getProcessDesc(pidDir));\n             }\n         }\n         LOG.info(\"None of the processes {} are alive AND owned by expectedUser {}\", pids, expectedUser);\n         return false;\n     }\n+\n+    /**\n+     * Support method to obtain additional log info for the process. Use the contents of comm and cmdline\n+     * in the process directory. Note that this method works properly only on posix systems with /proc directory.\n+     *\n+     * @param pidDir PID directory (/proc/&lt;pid&gt;)\n+     * @return process description string\n+     */\n+    private static String getProcessDesc(File pidDir) {\n+        String comm = \"\";\n+        try {\n+            comm = String.join(\", \", Files.readAllLines(pidDir.toPath().resolve(\"comm\")));\n+        } catch (IOException ex) {\n+            // ignore", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a30ef57b0af9330b0a51c4f027e7266b97f4caea"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4223, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}