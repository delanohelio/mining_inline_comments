{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzMDkwNTE4", "number": 3234, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNDo0Njo0MFrODvmKHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNDo0OToyNFrODvmPdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjM0ODQ1OnYy", "diffSide": "RIGHT", "path": "storm-core/test/jvm/org/apache/storm/SubmitterTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNDo0Njo0MFrOGCHJ4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNDo0Njo0MFrOGCHJ4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg2NzU1Mg==", "bodyText": "can we use assertEquals here and below?", "url": "https://github.com/apache/storm/pull/3234#discussion_r404867552", "createdAt": "2020-04-07T14:46:40Z", "author": {"login": "Ethanlm"}, "path": "storm-core/test/jvm/org/apache/storm/SubmitterTest.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2018 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.storm;\n+\n+import com.google.common.base.Strings;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+\n+public class SubmitterTest {\n+\n+    @Test\n+    public void testMd5DigestSecretGeneration01() {\n+        // No payload or scheme are generated when already present\n+        Map<String, Object> conf = new HashMap<>();\n+        conf.put(Config.STORM_ZOOKEEPER_TOPOLOGY_AUTH_PAYLOAD, \"foobar:12345\");\n+        conf.put(Config.STORM_ZOOKEEPER_AUTH_SCHEME, \"anything\");\n+        Map<String, Object> result = StormSubmitter.prepareZookeeperAuthentication(conf);\n+        Object actualPayload = result.get(Config.STORM_ZOOKEEPER_TOPOLOGY_AUTH_PAYLOAD);\n+        Object actualScheme = result.get(Config.STORM_ZOOKEEPER_TOPOLOGY_AUTH_SCHEME);\n+        assertThat(actualPayload, is(\"foobar:12345\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b382d351e7b82632fcd4297fc72675177668da9d"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjM2MjEzOnYy", "diffSide": "RIGHT", "path": "storm-core/test/jvm/org/apache/storm/SubmitterTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNDo0OToyNFrOGCHStw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNDo0OToyNFrOGCHStw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg2OTgxNQ==", "bodyText": "This should use StringUtils.isBlank.\nAlso can we use assertFalse (or assertTrue) here and below", "url": "https://github.com/apache/storm/pull/3234#discussion_r404869815", "createdAt": "2020-04-07T14:49:24Z", "author": {"login": "Ethanlm"}, "path": "storm-core/test/jvm/org/apache/storm/SubmitterTest.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2018 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.storm;\n+\n+import com.google.common.base.Strings;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+\n+public class SubmitterTest {\n+\n+    @Test\n+    public void testMd5DigestSecretGeneration01() {\n+        // No payload or scheme are generated when already present\n+        Map<String, Object> conf = new HashMap<>();\n+        conf.put(Config.STORM_ZOOKEEPER_TOPOLOGY_AUTH_PAYLOAD, \"foobar:12345\");\n+        conf.put(Config.STORM_ZOOKEEPER_AUTH_SCHEME, \"anything\");\n+        Map<String, Object> result = StormSubmitter.prepareZookeeperAuthentication(conf);\n+        Object actualPayload = result.get(Config.STORM_ZOOKEEPER_TOPOLOGY_AUTH_PAYLOAD);\n+        Object actualScheme = result.get(Config.STORM_ZOOKEEPER_TOPOLOGY_AUTH_SCHEME);\n+        assertThat(actualPayload, is(\"foobar:12345\"));\n+        assertThat(actualScheme, is(\"digest\"));\n+    }\n+\n+    @Test\n+    public void testMd5DigestSecretGeneration02() {\n+        // Scheme is set to digest if not already.\n+        Map<String, Object> conf = new HashMap<>();\n+        conf.put(Config.STORM_ZOOKEEPER_TOPOLOGY_AUTH_PAYLOAD, \"foobar:12345\");\n+        Map<String, Object> result = StormSubmitter.prepareZookeeperAuthentication(conf);\n+        Object actualPayload = result.get(Config.STORM_ZOOKEEPER_TOPOLOGY_AUTH_PAYLOAD);\n+        Object actualScheme = result.get(Config.STORM_ZOOKEEPER_TOPOLOGY_AUTH_SCHEME);\n+        assertThat(actualPayload, is(\"foobar:12345\"));\n+        assertThat(actualScheme, is(\"digest\"));\n+    }\n+\n+    @Test\n+    public void testMd5DigestSecretGeneration03() {\n+        // A payload is generated when no payload is present.\n+        Map<String, Object> conf = new HashMap<>();\n+        conf.put(Config.STORM_ZOOKEEPER_AUTH_SCHEME, \"anything\");\n+        Map<String, Object> result = StormSubmitter.prepareZookeeperAuthentication(conf);\n+        Object actualPayload = result.get(Config.STORM_ZOOKEEPER_TOPOLOGY_AUTH_PAYLOAD);\n+        Object actualScheme = result.get(Config.STORM_ZOOKEEPER_TOPOLOGY_AUTH_SCHEME);\n+        assertThat(Strings.isNullOrEmpty((String)actualPayload), is(false));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b382d351e7b82632fcd4297fc72675177668da9d"}, "originalPosition": 63}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4257, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}