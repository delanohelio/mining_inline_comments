{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3NDI4MTIy", "number": 3269, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNTo0NzoyM1rOD8ihQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNTo0NzoyM1rOD8ihQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODA2NzIyOnYy", "diffSide": "RIGHT", "path": "storm-webapp/src/main/java/org/apache/storm/daemon/common/FileWatcher.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNTo0NzoyM1rOGViptg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNjozMTozNFrOGVkpng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI0MTAxNA==", "bodyText": "Please provide names for Thread with prefix\nThread t = new Thread(basics, \"FileWatcher-\" + watchedFile.getName());", "url": "https://github.com/apache/storm/pull/3269#discussion_r425241014", "createdAt": "2020-05-14T15:47:23Z", "author": {"login": "kishorvpatil"}, "path": "storm-webapp/src/main/java/org/apache/storm/daemon/common/FileWatcher.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License\n+ */\n+\n+package org.apache.storm.daemon.common;\n+\n+import static java.nio.file.StandardWatchEventKinds.ENTRY_MODIFY;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.WatchEvent;\n+import java.nio.file.WatchKey;\n+import java.nio.file.WatchService;\n+import java.util.Collections;\n+import java.util.List;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class FileWatcher implements Runnable {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(FileWatcher.class);\n+\n+    private final WatchService watcher;\n+    private volatile boolean stopped = false;\n+    private final Path watchedFile;\n+    private final Callback callback;\n+    List<WatchEvent.Kind<Path>> kinds;\n+\n+    public FileWatcher(final Path watchedFile, Callback callback) throws IOException {\n+        this(watchedFile, callback, Collections.singletonList(ENTRY_MODIFY));\n+    }\n+\n+    public FileWatcher(final Path watchedFile, Callback callback, List<WatchEvent.Kind<Path>> kinds) throws IOException {\n+        this.watchedFile = watchedFile;\n+        this.callback = callback;\n+        Path parent = watchedFile.getParent();\n+        this.watcher = parent.getFileSystem().newWatchService();\n+        this.kinds = kinds;\n+        parent.register(watcher, this.kinds.toArray(new WatchEvent.Kind[0]));\n+    }\n+\n+    public void start() {\n+        Thread t = new Thread(this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3e4302bb2eeb0b1a737de68a49d16de706fdcea"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI3Mzc1OA==", "bodyText": "Good point.\nAdded the thread name.\n\"FileWatcher-stormtest.keystore\" #37 daemon prio=5 os_prio=0 tid=0x00007f6039f51000 nid=0x7295 waiting on condition [0x00007f5fa3409000]\n   java.lang.Thread.State: WAITING (parking)\n\tat sun.misc.Unsafe.park(Native Method)\n\t- parking to wait for  <0x00000000d05f7038> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)\n\tat java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)\n\tat java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2039)\n\tat java.util.concurrent.LinkedBlockingDeque.takeFirst(LinkedBlockingDeque.java:492)\n\tat java.util.concurrent.LinkedBlockingDeque.take(LinkedBlockingDeque.java:680)\n\tat sun.nio.fs.AbstractWatchService.take(AbstractWatchService.java:118)\n\tat org.apache.storm.daemon.common.FileWatcher.run(FileWatcher.java:55)\n\tat java.lang.Thread.run(Thread.java:748)\n\nI didn't add the file's canonical name since it would be too long. But I am fine with short/long name. Please let me know which one you prefer", "url": "https://github.com/apache/storm/pull/3269#discussion_r425273758", "createdAt": "2020-05-14T16:31:34Z", "author": {"login": "Ethanlm"}, "path": "storm-webapp/src/main/java/org/apache/storm/daemon/common/FileWatcher.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License\n+ */\n+\n+package org.apache.storm.daemon.common;\n+\n+import static java.nio.file.StandardWatchEventKinds.ENTRY_MODIFY;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.WatchEvent;\n+import java.nio.file.WatchKey;\n+import java.nio.file.WatchService;\n+import java.util.Collections;\n+import java.util.List;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class FileWatcher implements Runnable {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(FileWatcher.class);\n+\n+    private final WatchService watcher;\n+    private volatile boolean stopped = false;\n+    private final Path watchedFile;\n+    private final Callback callback;\n+    List<WatchEvent.Kind<Path>> kinds;\n+\n+    public FileWatcher(final Path watchedFile, Callback callback) throws IOException {\n+        this(watchedFile, callback, Collections.singletonList(ENTRY_MODIFY));\n+    }\n+\n+    public FileWatcher(final Path watchedFile, Callback callback, List<WatchEvent.Kind<Path>> kinds) throws IOException {\n+        this.watchedFile = watchedFile;\n+        this.callback = callback;\n+        Path parent = watchedFile.getParent();\n+        this.watcher = parent.getFileSystem().newWatchService();\n+        this.kinds = kinds;\n+        parent.register(watcher, this.kinds.toArray(new WatchEvent.Kind[0]));\n+    }\n+\n+    public void start() {\n+        Thread t = new Thread(this);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI0MTAxNA=="}, "originalCommit": {"oid": "d3e4302bb2eeb0b1a737de68a49d16de706fdcea"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4293, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}