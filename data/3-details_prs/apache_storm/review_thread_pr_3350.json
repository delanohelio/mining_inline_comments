{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4ODAwNDI1", "number": 3350, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMTowMTowNFrOFFOhZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QyMTo0NzowMlrOFIwr8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMDI1MTI1OnYy", "diffSide": "RIGHT", "path": "storm-client/src/jvm/org/apache/storm/metrics2/RateCounter.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMTowMTowNFrOIFotaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxOTozNDoyNFrOIJjmSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjc4MDc3Nw==", "bodyText": "Should this (mod) subtraction be from (valueAtTime - valueAtTimeMinus1), instead of (valueAtTime - valueAtTimePlus1)", "url": "https://github.com/apache/storm/pull/3350#discussion_r542780777", "createdAt": "2020-12-14T21:01:04Z", "author": {"login": "bipinprasad"}, "path": "storm-client/src/jvm/org/apache/storm/metrics2/RateCounter.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.  The ASF licenses this file to you under the Apache License, Version\n+ * 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n+ * and limitations under the License.\n+ */\n+\n+package org.apache.storm.metrics2;\n+\n+import com.codahale.metrics.Counter;\n+import com.codahale.metrics.Gauge;\n+\n+/**\n+ * A Counter metric that also implements a Gauge to report a 1 minute rate.  This class was added as a compromise to\n+ * using a Meter, which has a much larger performance impact.\n+ */\n+public class RateCounter implements Gauge<Double> {\n+    private Counter counter;\n+    private double currentRate = 0;\n+    private int time = 0;\n+    private final long[] values;\n+    private final int timeSpanInSeconds;\n+\n+    RateCounter(StormMetricRegistry metricRegistry, String metricName, String topologyId,\n+                String componentId, int taskId, int workerPort, String streamId) {\n+        counter = metricRegistry.counter(metricName, topologyId, componentId,\n+                taskId, workerPort, streamId);\n+        metricRegistry.gauge(metricName + \".m1_rate\", this, topologyId, componentId, streamId,\n+                taskId, workerPort);\n+        this.timeSpanInSeconds = Math.max(60 - (60 % metricRegistry.getRateCounterUpdateIntervalSeconds()),\n+                metricRegistry.getRateCounterUpdateIntervalSeconds());\n+        this.values = new long[this.timeSpanInSeconds / metricRegistry.getRateCounterUpdateIntervalSeconds() + 1];\n+\n+    }\n+\n+    /**\n+     * Reports the 1 minute rate for the metric.\n+     * @return the rate\n+     */\n+    @Override\n+    public Double getValue() {\n+        return currentRate;\n+    }\n+\n+    public void inc(long n) {\n+        counter.inc(n);\n+    }\n+\n+    /**\n+     * Updates the rate in a background thread by a StormMetricRegistry at a fixed frequency.\n+     */\n+    void update() {\n+        time = (time + 1) % values.length;\n+        values[time] = counter.getCount();\n+        currentRate =  ((double) (values[time] - values[(time + 1) % values.length]) / timeSpanInSeconds);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63d6d8e414758f8f667999e1b83db1323b0f3b47"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjg1Mjg4OQ==", "bodyText": "My understanding is values is a ring, and the length of this ring is the elapsed time.   (valueAtTime - valueAtTimePlus1) gives you the difference during this time frame. So the rate is (valueAtTime - valueAtTimePlus1) / elapsed time", "url": "https://github.com/apache/storm/pull/3350#discussion_r542852889", "createdAt": "2020-12-14T22:08:22Z", "author": {"login": "Ethanlm"}, "path": "storm-client/src/jvm/org/apache/storm/metrics2/RateCounter.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.  The ASF licenses this file to you under the Apache License, Version\n+ * 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n+ * and limitations under the License.\n+ */\n+\n+package org.apache.storm.metrics2;\n+\n+import com.codahale.metrics.Counter;\n+import com.codahale.metrics.Gauge;\n+\n+/**\n+ * A Counter metric that also implements a Gauge to report a 1 minute rate.  This class was added as a compromise to\n+ * using a Meter, which has a much larger performance impact.\n+ */\n+public class RateCounter implements Gauge<Double> {\n+    private Counter counter;\n+    private double currentRate = 0;\n+    private int time = 0;\n+    private final long[] values;\n+    private final int timeSpanInSeconds;\n+\n+    RateCounter(StormMetricRegistry metricRegistry, String metricName, String topologyId,\n+                String componentId, int taskId, int workerPort, String streamId) {\n+        counter = metricRegistry.counter(metricName, topologyId, componentId,\n+                taskId, workerPort, streamId);\n+        metricRegistry.gauge(metricName + \".m1_rate\", this, topologyId, componentId, streamId,\n+                taskId, workerPort);\n+        this.timeSpanInSeconds = Math.max(60 - (60 % metricRegistry.getRateCounterUpdateIntervalSeconds()),\n+                metricRegistry.getRateCounterUpdateIntervalSeconds());\n+        this.values = new long[this.timeSpanInSeconds / metricRegistry.getRateCounterUpdateIntervalSeconds() + 1];\n+\n+    }\n+\n+    /**\n+     * Reports the 1 minute rate for the metric.\n+     * @return the rate\n+     */\n+    @Override\n+    public Double getValue() {\n+        return currentRate;\n+    }\n+\n+    public void inc(long n) {\n+        counter.inc(n);\n+    }\n+\n+    /**\n+     * Updates the rate in a background thread by a StormMetricRegistry at a fixed frequency.\n+     */\n+    void update() {\n+        time = (time + 1) % values.length;\n+        values[time] = counter.getCount();\n+        currentRate =  ((double) (values[time] - values[(time + 1) % values.length]) / timeSpanInSeconds);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjc4MDc3Nw=="}, "originalCommit": {"oid": "63d6d8e414758f8f667999e1b83db1323b0f3b47"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjg5MTk1NA==", "bodyText": "It is a ring - therefore the use of time%length for index. That is fine.\nBut at each update() call, the index \"time\" is first incremented. Then the counter is placed in idx \"time\". Therefore the previos value is in index-1.\nThe increase in counter value should still be currentValue - previousValue. Otherwise the difference will be a negative number.", "url": "https://github.com/apache/storm/pull/3350#discussion_r542891954", "createdAt": "2020-12-14T22:46:36Z", "author": {"login": "bipinprasad"}, "path": "storm-client/src/jvm/org/apache/storm/metrics2/RateCounter.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.  The ASF licenses this file to you under the Apache License, Version\n+ * 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n+ * and limitations under the License.\n+ */\n+\n+package org.apache.storm.metrics2;\n+\n+import com.codahale.metrics.Counter;\n+import com.codahale.metrics.Gauge;\n+\n+/**\n+ * A Counter metric that also implements a Gauge to report a 1 minute rate.  This class was added as a compromise to\n+ * using a Meter, which has a much larger performance impact.\n+ */\n+public class RateCounter implements Gauge<Double> {\n+    private Counter counter;\n+    private double currentRate = 0;\n+    private int time = 0;\n+    private final long[] values;\n+    private final int timeSpanInSeconds;\n+\n+    RateCounter(StormMetricRegistry metricRegistry, String metricName, String topologyId,\n+                String componentId, int taskId, int workerPort, String streamId) {\n+        counter = metricRegistry.counter(metricName, topologyId, componentId,\n+                taskId, workerPort, streamId);\n+        metricRegistry.gauge(metricName + \".m1_rate\", this, topologyId, componentId, streamId,\n+                taskId, workerPort);\n+        this.timeSpanInSeconds = Math.max(60 - (60 % metricRegistry.getRateCounterUpdateIntervalSeconds()),\n+                metricRegistry.getRateCounterUpdateIntervalSeconds());\n+        this.values = new long[this.timeSpanInSeconds / metricRegistry.getRateCounterUpdateIntervalSeconds() + 1];\n+\n+    }\n+\n+    /**\n+     * Reports the 1 minute rate for the metric.\n+     * @return the rate\n+     */\n+    @Override\n+    public Double getValue() {\n+        return currentRate;\n+    }\n+\n+    public void inc(long n) {\n+        counter.inc(n);\n+    }\n+\n+    /**\n+     * Updates the rate in a background thread by a StormMetricRegistry at a fixed frequency.\n+     */\n+    void update() {\n+        time = (time + 1) % values.length;\n+        values[time] = counter.getCount();\n+        currentRate =  ((double) (values[time] - values[(time + 1) % values.length]) / timeSpanInSeconds);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjc4MDc3Nw=="}, "originalCommit": {"oid": "63d6d8e414758f8f667999e1b83db1323b0f3b47"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkwMjQzNA==", "bodyText": "Unless, the whole ring represents exact duration of timeSpanInSeconds - but them that would require some guarantee in the call frequency of update().", "url": "https://github.com/apache/storm/pull/3350#discussion_r542902434", "createdAt": "2020-12-14T22:57:00Z", "author": {"login": "bipinprasad"}, "path": "storm-client/src/jvm/org/apache/storm/metrics2/RateCounter.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.  The ASF licenses this file to you under the Apache License, Version\n+ * 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n+ * and limitations under the License.\n+ */\n+\n+package org.apache.storm.metrics2;\n+\n+import com.codahale.metrics.Counter;\n+import com.codahale.metrics.Gauge;\n+\n+/**\n+ * A Counter metric that also implements a Gauge to report a 1 minute rate.  This class was added as a compromise to\n+ * using a Meter, which has a much larger performance impact.\n+ */\n+public class RateCounter implements Gauge<Double> {\n+    private Counter counter;\n+    private double currentRate = 0;\n+    private int time = 0;\n+    private final long[] values;\n+    private final int timeSpanInSeconds;\n+\n+    RateCounter(StormMetricRegistry metricRegistry, String metricName, String topologyId,\n+                String componentId, int taskId, int workerPort, String streamId) {\n+        counter = metricRegistry.counter(metricName, topologyId, componentId,\n+                taskId, workerPort, streamId);\n+        metricRegistry.gauge(metricName + \".m1_rate\", this, topologyId, componentId, streamId,\n+                taskId, workerPort);\n+        this.timeSpanInSeconds = Math.max(60 - (60 % metricRegistry.getRateCounterUpdateIntervalSeconds()),\n+                metricRegistry.getRateCounterUpdateIntervalSeconds());\n+        this.values = new long[this.timeSpanInSeconds / metricRegistry.getRateCounterUpdateIntervalSeconds() + 1];\n+\n+    }\n+\n+    /**\n+     * Reports the 1 minute rate for the metric.\n+     * @return the rate\n+     */\n+    @Override\n+    public Double getValue() {\n+        return currentRate;\n+    }\n+\n+    public void inc(long n) {\n+        counter.inc(n);\n+    }\n+\n+    /**\n+     * Updates the rate in a background thread by a StormMetricRegistry at a fixed frequency.\n+     */\n+    void update() {\n+        time = (time + 1) % values.length;\n+        values[time] = counter.getCount();\n+        currentRate =  ((double) (values[time] - values[(time + 1) % values.length]) / timeSpanInSeconds);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjc4MDc3Nw=="}, "originalCommit": {"oid": "63d6d8e414758f8f667999e1b83db1323b0f3b47"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzAzMjI5MA==", "bodyText": "Yes the call of update happens in a separate thread", "url": "https://github.com/apache/storm/pull/3350#discussion_r543032290", "createdAt": "2020-12-15T04:13:10Z", "author": {"login": "Ethanlm"}, "path": "storm-client/src/jvm/org/apache/storm/metrics2/RateCounter.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.  The ASF licenses this file to you under the Apache License, Version\n+ * 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n+ * and limitations under the License.\n+ */\n+\n+package org.apache.storm.metrics2;\n+\n+import com.codahale.metrics.Counter;\n+import com.codahale.metrics.Gauge;\n+\n+/**\n+ * A Counter metric that also implements a Gauge to report a 1 minute rate.  This class was added as a compromise to\n+ * using a Meter, which has a much larger performance impact.\n+ */\n+public class RateCounter implements Gauge<Double> {\n+    private Counter counter;\n+    private double currentRate = 0;\n+    private int time = 0;\n+    private final long[] values;\n+    private final int timeSpanInSeconds;\n+\n+    RateCounter(StormMetricRegistry metricRegistry, String metricName, String topologyId,\n+                String componentId, int taskId, int workerPort, String streamId) {\n+        counter = metricRegistry.counter(metricName, topologyId, componentId,\n+                taskId, workerPort, streamId);\n+        metricRegistry.gauge(metricName + \".m1_rate\", this, topologyId, componentId, streamId,\n+                taskId, workerPort);\n+        this.timeSpanInSeconds = Math.max(60 - (60 % metricRegistry.getRateCounterUpdateIntervalSeconds()),\n+                metricRegistry.getRateCounterUpdateIntervalSeconds());\n+        this.values = new long[this.timeSpanInSeconds / metricRegistry.getRateCounterUpdateIntervalSeconds() + 1];\n+\n+    }\n+\n+    /**\n+     * Reports the 1 minute rate for the metric.\n+     * @return the rate\n+     */\n+    @Override\n+    public Double getValue() {\n+        return currentRate;\n+    }\n+\n+    public void inc(long n) {\n+        counter.inc(n);\n+    }\n+\n+    /**\n+     * Updates the rate in a background thread by a StormMetricRegistry at a fixed frequency.\n+     */\n+    void update() {\n+        time = (time + 1) % values.length;\n+        values[time] = counter.getCount();\n+        currentRate =  ((double) (values[time] - values[(time + 1) % values.length]) / timeSpanInSeconds);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjc4MDc3Nw=="}, "originalCommit": {"oid": "63d6d8e414758f8f667999e1b83db1323b0f3b47"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg5MTMzNw==", "bodyText": "Ethan is correct.  A separate thread updates at a fixed frequency.", "url": "https://github.com/apache/storm/pull/3350#discussion_r546891337", "createdAt": "2020-12-21T19:34:24Z", "author": {"login": "agresch"}, "path": "storm-client/src/jvm/org/apache/storm/metrics2/RateCounter.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.  The ASF licenses this file to you under the Apache License, Version\n+ * 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n+ * and limitations under the License.\n+ */\n+\n+package org.apache.storm.metrics2;\n+\n+import com.codahale.metrics.Counter;\n+import com.codahale.metrics.Gauge;\n+\n+/**\n+ * A Counter metric that also implements a Gauge to report a 1 minute rate.  This class was added as a compromise to\n+ * using a Meter, which has a much larger performance impact.\n+ */\n+public class RateCounter implements Gauge<Double> {\n+    private Counter counter;\n+    private double currentRate = 0;\n+    private int time = 0;\n+    private final long[] values;\n+    private final int timeSpanInSeconds;\n+\n+    RateCounter(StormMetricRegistry metricRegistry, String metricName, String topologyId,\n+                String componentId, int taskId, int workerPort, String streamId) {\n+        counter = metricRegistry.counter(metricName, topologyId, componentId,\n+                taskId, workerPort, streamId);\n+        metricRegistry.gauge(metricName + \".m1_rate\", this, topologyId, componentId, streamId,\n+                taskId, workerPort);\n+        this.timeSpanInSeconds = Math.max(60 - (60 % metricRegistry.getRateCounterUpdateIntervalSeconds()),\n+                metricRegistry.getRateCounterUpdateIntervalSeconds());\n+        this.values = new long[this.timeSpanInSeconds / metricRegistry.getRateCounterUpdateIntervalSeconds() + 1];\n+\n+    }\n+\n+    /**\n+     * Reports the 1 minute rate for the metric.\n+     * @return the rate\n+     */\n+    @Override\n+    public Double getValue() {\n+        return currentRate;\n+    }\n+\n+    public void inc(long n) {\n+        counter.inc(n);\n+    }\n+\n+    /**\n+     * Updates the rate in a background thread by a StormMetricRegistry at a fixed frequency.\n+     */\n+    void update() {\n+        time = (time + 1) % values.length;\n+        values[time] = counter.getCount();\n+        currentRate =  ((double) (values[time] - values[(time + 1) % values.length]) / timeSpanInSeconds);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjc4MDc3Nw=="}, "originalCommit": {"oid": "63d6d8e414758f8f667999e1b83db1323b0f3b47"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMDY3NDM2OnYy", "diffSide": "RIGHT", "path": "storm-client/src/jvm/org/apache/storm/metrics2/RateCounter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMjowNDo0N1rOIFs4HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QyMTo0OTowNVrOIK3qXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjg0OTA1Mw==", "bodyText": "I am having difficulties understanding this. Can you please elaborate?  What does timeSpanInSeconds  and this equation mean? Thanks", "url": "https://github.com/apache/storm/pull/3350#discussion_r542849053", "createdAt": "2020-12-14T22:04:47Z", "author": {"login": "Ethanlm"}, "path": "storm-client/src/jvm/org/apache/storm/metrics2/RateCounter.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.  The ASF licenses this file to you under the Apache License, Version\n+ * 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n+ * and limitations under the License.\n+ */\n+\n+package org.apache.storm.metrics2;\n+\n+import com.codahale.metrics.Counter;\n+import com.codahale.metrics.Gauge;\n+\n+/**\n+ * A Counter metric that also implements a Gauge to report a 1 minute rate.  This class was added as a compromise to\n+ * using a Meter, which has a much larger performance impact.\n+ */\n+public class RateCounter implements Gauge<Double> {\n+    private Counter counter;\n+    private double currentRate = 0;\n+    private int time = 0;\n+    private final long[] values;\n+    private final int timeSpanInSeconds;\n+\n+    RateCounter(StormMetricRegistry metricRegistry, String metricName, String topologyId,\n+                String componentId, int taskId, int workerPort, String streamId) {\n+        counter = metricRegistry.counter(metricName, topologyId, componentId,\n+                taskId, workerPort, streamId);\n+        metricRegistry.gauge(metricName + \".m1_rate\", this, topologyId, componentId, streamId,\n+                taskId, workerPort);\n+        this.timeSpanInSeconds = Math.max(60 - (60 % metricRegistry.getRateCounterUpdateIntervalSeconds()),\n+                metricRegistry.getRateCounterUpdateIntervalSeconds());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63d6d8e414758f8f667999e1b83db1323b0f3b47"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg4OTI3NQ==", "bodyText": "timeSpanInSeconds is 60 for this. The mod seems to be attempting to handle the case where the update interval is odd divisor of the desired timespan.", "url": "https://github.com/apache/storm/pull/3350#discussion_r546889275", "createdAt": "2020-12-21T19:29:22Z", "author": {"login": "agresch"}, "path": "storm-client/src/jvm/org/apache/storm/metrics2/RateCounter.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.  The ASF licenses this file to you under the Apache License, Version\n+ * 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n+ * and limitations under the License.\n+ */\n+\n+package org.apache.storm.metrics2;\n+\n+import com.codahale.metrics.Counter;\n+import com.codahale.metrics.Gauge;\n+\n+/**\n+ * A Counter metric that also implements a Gauge to report a 1 minute rate.  This class was added as a compromise to\n+ * using a Meter, which has a much larger performance impact.\n+ */\n+public class RateCounter implements Gauge<Double> {\n+    private Counter counter;\n+    private double currentRate = 0;\n+    private int time = 0;\n+    private final long[] values;\n+    private final int timeSpanInSeconds;\n+\n+    RateCounter(StormMetricRegistry metricRegistry, String metricName, String topologyId,\n+                String componentId, int taskId, int workerPort, String streamId) {\n+        counter = metricRegistry.counter(metricName, topologyId, componentId,\n+                taskId, workerPort, streamId);\n+        metricRegistry.gauge(metricName + \".m1_rate\", this, topologyId, componentId, streamId,\n+                taskId, workerPort);\n+        this.timeSpanInSeconds = Math.max(60 - (60 % metricRegistry.getRateCounterUpdateIntervalSeconds()),\n+                metricRegistry.getRateCounterUpdateIntervalSeconds());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjg0OTA1Mw=="}, "originalCommit": {"oid": "63d6d8e414758f8f667999e1b83db1323b0f3b47"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI2ODYzNw==", "bodyText": "Got it. Thanks for explaining", "url": "https://github.com/apache/storm/pull/3350#discussion_r548268637", "createdAt": "2020-12-23T21:49:05Z", "author": {"login": "Ethanlm"}, "path": "storm-client/src/jvm/org/apache/storm/metrics2/RateCounter.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.  The ASF licenses this file to you under the Apache License, Version\n+ * 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n+ * and limitations under the License.\n+ */\n+\n+package org.apache.storm.metrics2;\n+\n+import com.codahale.metrics.Counter;\n+import com.codahale.metrics.Gauge;\n+\n+/**\n+ * A Counter metric that also implements a Gauge to report a 1 minute rate.  This class was added as a compromise to\n+ * using a Meter, which has a much larger performance impact.\n+ */\n+public class RateCounter implements Gauge<Double> {\n+    private Counter counter;\n+    private double currentRate = 0;\n+    private int time = 0;\n+    private final long[] values;\n+    private final int timeSpanInSeconds;\n+\n+    RateCounter(StormMetricRegistry metricRegistry, String metricName, String topologyId,\n+                String componentId, int taskId, int workerPort, String streamId) {\n+        counter = metricRegistry.counter(metricName, topologyId, componentId,\n+                taskId, workerPort, streamId);\n+        metricRegistry.gauge(metricName + \".m1_rate\", this, topologyId, componentId, streamId,\n+                taskId, workerPort);\n+        this.timeSpanInSeconds = Math.max(60 - (60 % metricRegistry.getRateCounterUpdateIntervalSeconds()),\n+                metricRegistry.getRateCounterUpdateIntervalSeconds());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjg0OTA1Mw=="}, "originalCommit": {"oid": "63d6d8e414758f8f667999e1b83db1323b0f3b47"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMDY3OTgyOnYy", "diffSide": "RIGHT", "path": "storm-client/src/jvm/org/apache/storm/metrics2/RateCounter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMjowNTo0MFrOIFs7tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxOToyOTo1MVrOIJjfBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjg0OTk3NA==", "bodyText": "The calculation in the update() method looks to me is a per second rate, instead of 1 minute rate. Am I misunderstanding?", "url": "https://github.com/apache/storm/pull/3350#discussion_r542849974", "createdAt": "2020-12-14T22:05:40Z", "author": {"login": "Ethanlm"}, "path": "storm-client/src/jvm/org/apache/storm/metrics2/RateCounter.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.  The ASF licenses this file to you under the Apache License, Version\n+ * 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n+ * and limitations under the License.\n+ */\n+\n+package org.apache.storm.metrics2;\n+\n+import com.codahale.metrics.Counter;\n+import com.codahale.metrics.Gauge;\n+\n+/**\n+ * A Counter metric that also implements a Gauge to report a 1 minute rate.  This class was added as a compromise to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63d6d8e414758f8f667999e1b83db1323b0f3b47"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg4OTQ3Ng==", "bodyText": "You are correct, I will update.  It should be rate per second over a one minute period.", "url": "https://github.com/apache/storm/pull/3350#discussion_r546889476", "createdAt": "2020-12-21T19:29:51Z", "author": {"login": "agresch"}, "path": "storm-client/src/jvm/org/apache/storm/metrics2/RateCounter.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.  The ASF licenses this file to you under the Apache License, Version\n+ * 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n+ * and limitations under the License.\n+ */\n+\n+package org.apache.storm.metrics2;\n+\n+import com.codahale.metrics.Counter;\n+import com.codahale.metrics.Gauge;\n+\n+/**\n+ * A Counter metric that also implements a Gauge to report a 1 minute rate.  This class was added as a compromise to", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjg0OTk3NA=="}, "originalCommit": {"oid": "63d6d8e414758f8f667999e1b83db1323b0f3b47"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NzI5NTg2OnYy", "diffSide": "RIGHT", "path": "storm-client/src/jvm/org/apache/storm/metrics2/RateCounter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QyMTo0NDo0MlrOIK3efw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxNzozNToxOFrOIL-WNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI2NTU5OQ==", "bodyText": "m1_rate needs to change", "url": "https://github.com/apache/storm/pull/3350#discussion_r548265599", "createdAt": "2020-12-23T21:44:42Z", "author": {"login": "Ethanlm"}, "path": "storm-client/src/jvm/org/apache/storm/metrics2/RateCounter.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.  The ASF licenses this file to you under the Apache License, Version\n+ * 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n+ * and limitations under the License.\n+ */\n+\n+package org.apache.storm.metrics2;\n+\n+import com.codahale.metrics.Counter;\n+import com.codahale.metrics.Gauge;\n+\n+/**\n+ * A Counter metric that also implements a Gauge to report the average rate of events per second over 1 minute.  This class\n+ * was added as a compromise to using a Meter, which has a much larger performance impact.\n+ */\n+public class RateCounter implements Gauge<Double> {\n+    private Counter counter;\n+    private double currentRate = 0;\n+    private int time = 0;\n+    private final long[] values;\n+    private final int timeSpanInSeconds;\n+\n+    RateCounter(StormMetricRegistry metricRegistry, String metricName, String topologyId,\n+                String componentId, int taskId, int workerPort, String streamId) {\n+        counter = metricRegistry.counter(metricName, topologyId, componentId,\n+                taskId, workerPort, streamId);\n+        metricRegistry.gauge(metricName + \".m1_rate\", this, topologyId, componentId, streamId,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a86fe9feeb936fb48d769bf972afe6b5280984c4"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQyNjc0MQ==", "bodyText": "What would be your preferred name?", "url": "https://github.com/apache/storm/pull/3350#discussion_r549426741", "createdAt": "2020-12-28T17:35:18Z", "author": {"login": "agresch"}, "path": "storm-client/src/jvm/org/apache/storm/metrics2/RateCounter.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.  The ASF licenses this file to you under the Apache License, Version\n+ * 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n+ * and limitations under the License.\n+ */\n+\n+package org.apache.storm.metrics2;\n+\n+import com.codahale.metrics.Counter;\n+import com.codahale.metrics.Gauge;\n+\n+/**\n+ * A Counter metric that also implements a Gauge to report the average rate of events per second over 1 minute.  This class\n+ * was added as a compromise to using a Meter, which has a much larger performance impact.\n+ */\n+public class RateCounter implements Gauge<Double> {\n+    private Counter counter;\n+    private double currentRate = 0;\n+    private int time = 0;\n+    private final long[] values;\n+    private final int timeSpanInSeconds;\n+\n+    RateCounter(StormMetricRegistry metricRegistry, String metricName, String topologyId,\n+                String componentId, int taskId, int workerPort, String streamId) {\n+        counter = metricRegistry.counter(metricName, topologyId, componentId,\n+                taskId, workerPort, streamId);\n+        metricRegistry.gauge(metricName + \".m1_rate\", this, topologyId, componentId, streamId,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI2NTU5OQ=="}, "originalCommit": {"oid": "a86fe9feeb936fb48d769bf972afe6b5280984c4"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NzI5OTEwOnYy", "diffSide": "RIGHT", "path": "storm-client/src/jvm/org/apache/storm/metrics2/RateCounter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QyMTo0NToyNFrOIK3gtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMDoxNzoxOVrOIOl08w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI2NjE2NA==", "bodyText": "It is not always event per second over 1 minute. It depends on what the value of timeSpanInSeconds is", "url": "https://github.com/apache/storm/pull/3350#discussion_r548266164", "createdAt": "2020-12-23T21:45:24Z", "author": {"login": "Ethanlm"}, "path": "storm-client/src/jvm/org/apache/storm/metrics2/RateCounter.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.  The ASF licenses this file to you under the Apache License, Version\n+ * 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n+ * and limitations under the License.\n+ */\n+\n+package org.apache.storm.metrics2;\n+\n+import com.codahale.metrics.Counter;\n+import com.codahale.metrics.Gauge;\n+\n+/**\n+ * A Counter metric that also implements a Gauge to report the average rate of events per second over 1 minute.  This class", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a86fe9feeb936fb48d769bf972afe6b5280984c4"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQyNjY3MA==", "bodyText": "In our case, timeSpanInSeconds is set to 60.  I could allow passing in a value to make it more flexible if desired.", "url": "https://github.com/apache/storm/pull/3350#discussion_r549426670", "createdAt": "2020-12-28T17:35:04Z", "author": {"login": "agresch"}, "path": "storm-client/src/jvm/org/apache/storm/metrics2/RateCounter.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.  The ASF licenses this file to you under the Apache License, Version\n+ * 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n+ * and limitations under the License.\n+ */\n+\n+package org.apache.storm.metrics2;\n+\n+import com.codahale.metrics.Counter;\n+import com.codahale.metrics.Gauge;\n+\n+/**\n+ * A Counter metric that also implements a Gauge to report the average rate of events per second over 1 minute.  This class", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI2NjE2NA=="}, "originalCommit": {"oid": "a86fe9feeb936fb48d769bf972afe6b5280984c4"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjE3MDczOQ==", "bodyText": "I was thinking that since RATE_COUNTER_UPDATE_INTERVAL_SECONDS is passed from StormMetricRegistry, if it changes to some value like 21s, then\nthis.timeSpanInSeconds = Math.max(60 - (60 % metricRegistry.getRateCounterUpdateIntervalSeconds()),\n                metricRegistry.getRateCounterUpdateIntervalSeconds());\n\nwe have this.timeSpanInSeconds = 42s so the metric is the average rate of events per 42s, instead of one minute.\nBut I think it is okay for now since RATE_COUNTER_UPDATE_INTERVAL_SECONDS is not configurable and not likely to be changed to a value like 21s.\nFuture developers need to be aware of this implementation details if they want to change RATE_COUNTER_UPDATE_INTERVAL_SECONDS or make it configurable.", "url": "https://github.com/apache/storm/pull/3350#discussion_r552170739", "createdAt": "2021-01-05T20:17:19Z", "author": {"login": "Ethanlm"}, "path": "storm-client/src/jvm/org/apache/storm/metrics2/RateCounter.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.  The ASF licenses this file to you under the Apache License, Version\n+ * 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n+ * and limitations under the License.\n+ */\n+\n+package org.apache.storm.metrics2;\n+\n+import com.codahale.metrics.Counter;\n+import com.codahale.metrics.Gauge;\n+\n+/**\n+ * A Counter metric that also implements a Gauge to report the average rate of events per second over 1 minute.  This class", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI2NjE2NA=="}, "originalCommit": {"oid": "a86fe9feeb936fb48d769bf972afe6b5280984c4"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NzMwNjA4OnYy", "diffSide": "RIGHT", "path": "storm-client/src/jvm/org/apache/storm/metrics2/StormMetricRegistry.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QyMTo0NzowMlrOIK3lOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QyMTo0NzowMlrOIK3lOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI2NzMyMA==", "bodyText": "nit: this newline can be removed", "url": "https://github.com/apache/storm/pull/3350#discussion_r548267320", "createdAt": "2020-12-23T21:47:02Z", "author": {"login": "Ethanlm"}, "path": "storm-client/src/jvm/org/apache/storm/metrics2/StormMetricRegistry.java", "diffHunk": "@@ -369,6 +398,7 @@ private String dotToUnderScore(String str) {\n         return str.replace('.', '_');\n     }\n \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a86fe9feeb936fb48d769bf972afe6b5280984c4"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4220, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}