{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ0NjUzMzUy", "number": 3368, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNTo1NToyOVrOFInqrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQxNToxNjo0NFrOFI82vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NTgyODI5OnYy", "diffSide": "RIGHT", "path": "storm-client/test/jvm/org/apache/storm/utils/UtilsTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNTo1NToyOVrOIKo1cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNTo1NToyOVrOIKo1cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAyNTcxNA==", "bodyText": "nit: indention is a little off", "url": "https://github.com/apache/storm/pull/3368#discussion_r548025714", "createdAt": "2020-12-23T15:55:29Z", "author": {"login": "Ethanlm"}, "path": "storm-client/test/jvm/org/apache/storm/utils/UtilsTest.java", "diffHunk": "@@ -94,13 +94,15 @@ public void parseJvmHeapMemByChildOptsTestM() {\n         doParseJvmHeapMemByChildOptsTest(\"Xmx100M results in 100 MB\", \"Xmx100m\", 100.0);\n         doParseJvmHeapMemByChildOptsTest(\"Xmx100m results in 100 MB\", \"Xmx100M\", 100.0);\n         doParseJvmHeapMemByChildOptsTest(\"-Xmx100M results in 100 MB\", \"-Xmx100m\", 100.0);\n+\tdoParseJvmHeapMemByChildOptsTest(\"-Xmx2048M results in 2048 MB\", \"-Xmx2048m\", 2048.0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22de57beac187919a26b70810df002321fe73f33"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NTgyODc2OnYy", "diffSide": "RIGHT", "path": "storm-client/test/jvm/org/apache/storm/utils/UtilsTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNTo1NTozNFrOIKo1rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QyMDowMjowMFrOIKy5Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAyNTc3Mg==", "bodyText": "nit: indention is a little off", "url": "https://github.com/apache/storm/pull/3368#discussion_r548025772", "createdAt": "2020-12-23T15:55:34Z", "author": {"login": "Ethanlm"}, "path": "storm-client/test/jvm/org/apache/storm/utils/UtilsTest.java", "diffHunk": "@@ -94,13 +94,15 @@ public void parseJvmHeapMemByChildOptsTestM() {\n         doParseJvmHeapMemByChildOptsTest(\"Xmx100M results in 100 MB\", \"Xmx100m\", 100.0);\n         doParseJvmHeapMemByChildOptsTest(\"Xmx100m results in 100 MB\", \"Xmx100M\", 100.0);\n         doParseJvmHeapMemByChildOptsTest(\"-Xmx100M results in 100 MB\", \"-Xmx100m\", 100.0);\n+\tdoParseJvmHeapMemByChildOptsTest(\"-Xmx2048M results in 2048 MB\", \"-Xmx2048m\", 2048.0);\n     }\n \n     @Test\n     public void parseJvmHeapMemByChildOptsTestG() {\n         doParseJvmHeapMemByChildOptsTest(\"Xmx1g results in 1024 MB\", \"Xmx1g\", 1024.0);\n         doParseJvmHeapMemByChildOptsTest(\"Xmx1G results in 1024 MB\", \"Xmx1G\", 1024.0);\n         doParseJvmHeapMemByChildOptsTest(\"-Xmx1g results in 1024 MB\", \"-Xmx1g\", 1024.0);\n+\tdoParseJvmHeapMemByChildOptsTest(\"-Xmx2g results in 2048 MB\", \"-Xmx2g\", 2048.0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22de57beac187919a26b70810df002321fe73f33"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODE5MDUyNw==", "bodyText": "Another nit: Would be nice to fix the UtilsTest#80 so that parameters are in correct order - first expected, then actual. Otherwise error message is confusing.", "url": "https://github.com/apache/storm/pull/3368#discussion_r548190527", "createdAt": "2020-12-23T20:02:00Z", "author": {"login": "bipinprasad"}, "path": "storm-client/test/jvm/org/apache/storm/utils/UtilsTest.java", "diffHunk": "@@ -94,13 +94,15 @@ public void parseJvmHeapMemByChildOptsTestM() {\n         doParseJvmHeapMemByChildOptsTest(\"Xmx100M results in 100 MB\", \"Xmx100m\", 100.0);\n         doParseJvmHeapMemByChildOptsTest(\"Xmx100m results in 100 MB\", \"Xmx100M\", 100.0);\n         doParseJvmHeapMemByChildOptsTest(\"-Xmx100M results in 100 MB\", \"-Xmx100m\", 100.0);\n+\tdoParseJvmHeapMemByChildOptsTest(\"-Xmx2048M results in 2048 MB\", \"-Xmx2048m\", 2048.0);\n     }\n \n     @Test\n     public void parseJvmHeapMemByChildOptsTestG() {\n         doParseJvmHeapMemByChildOptsTest(\"Xmx1g results in 1024 MB\", \"Xmx1g\", 1024.0);\n         doParseJvmHeapMemByChildOptsTest(\"Xmx1G results in 1024 MB\", \"Xmx1G\", 1024.0);\n         doParseJvmHeapMemByChildOptsTest(\"-Xmx1g results in 1024 MB\", \"-Xmx1g\", 1024.0);\n+\tdoParseJvmHeapMemByChildOptsTest(\"-Xmx2g results in 2048 MB\", \"-Xmx2g\", 2048.0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAyNTc3Mg=="}, "originalCommit": {"oid": "22de57beac187919a26b70810df002321fe73f33"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NTg1NjE5OnYy", "diffSide": "RIGHT", "path": "storm-client/src/jvm/org/apache/storm/utils/Utils.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNjowNTowOVrOIKpGCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQxNTo0MTo0MFrOILJ3Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAyOTk2MA==", "bodyText": "Even for several gigabytes, the number is still smaller than Integer.MAX_VALUE in terms of \"m\", \"k\" or \"g\" units, right?", "url": "https://github.com/apache/storm/pull/3368#discussion_r548029960", "createdAt": "2020-12-23T16:05:09Z", "author": {"login": "bipinprasad"}, "path": "storm-client/src/jvm/org/apache/storm/utils/Utils.java", "diffHunk": "@@ -1039,7 +1039,7 @@ public static Double parseJvmHeapMemByChildOpts(List<String> options, Double def\n                 }\n                 Matcher m = optsPattern.matcher(option);\n                 while (m.find()) {\n-                    int value = Integer.parseInt(m.group(1));\n+                    long value = Long.parseLong(m.group(1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1b3a01761091cf1b181559a9e8f0738bdc6c0ad"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAzMzc1Mw==", "bodyText": "The problem is from \n  \n    \n      storm/storm-client/src/jvm/org/apache/storm/utils/Utils.java\n    \n    \n         Line 1105\n      in\n      ab6b6f6\n    \n    \n    \n    \n\n        \n          \n           Double result = value * unit / 1024.0 / 1024.0; \n        \n    \n  \n\n\n2 * 1024 * 1024 * 1024= 2^31 > (2^31-1) = Integer.MAX_VALUE", "url": "https://github.com/apache/storm/pull/3368#discussion_r548033753", "createdAt": "2020-12-23T16:13:48Z", "author": {"login": "Ethanlm"}, "path": "storm-client/src/jvm/org/apache/storm/utils/Utils.java", "diffHunk": "@@ -1039,7 +1039,7 @@ public static Double parseJvmHeapMemByChildOpts(List<String> options, Double def\n                 }\n                 Matcher m = optsPattern.matcher(option);\n                 while (m.find()) {\n-                    int value = Integer.parseInt(m.group(1));\n+                    long value = Long.parseLong(m.group(1));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAyOTk2MA=="}, "originalCommit": {"oid": "d1b3a01761091cf1b181559a9e8f0738bdc6c0ad"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAzNzY2MQ==", "bodyText": "RHS expression \"should\" be promoted to double - wonder why that is not not happening.", "url": "https://github.com/apache/storm/pull/3368#discussion_r548037661", "createdAt": "2020-12-23T16:22:24Z", "author": {"login": "bipinprasad"}, "path": "storm-client/src/jvm/org/apache/storm/utils/Utils.java", "diffHunk": "@@ -1039,7 +1039,7 @@ public static Double parseJvmHeapMemByChildOpts(List<String> options, Double def\n                 }\n                 Matcher m = optsPattern.matcher(option);\n                 while (m.find()) {\n-                    int value = Integer.parseInt(m.group(1));\n+                    long value = Long.parseLong(m.group(1));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAyOTk2MA=="}, "originalCommit": {"oid": "d1b3a01761091cf1b181559a9e8f0738bdc6c0ad"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODE2MTYzMw==", "bodyText": "value * unit has integer overflow so it equals to -2147483648.\nThen -2147483648 / 1024.0 / 1024.0 = -2048.0, this is when it is casted to double.", "url": "https://github.com/apache/storm/pull/3368#discussion_r548161633", "createdAt": "2020-12-23T19:24:22Z", "author": {"login": "Ethanlm"}, "path": "storm-client/src/jvm/org/apache/storm/utils/Utils.java", "diffHunk": "@@ -1039,7 +1039,7 @@ public static Double parseJvmHeapMemByChildOpts(List<String> options, Double def\n                 }\n                 Matcher m = optsPattern.matcher(option);\n                 while (m.find()) {\n-                    int value = Integer.parseInt(m.group(1));\n+                    long value = Long.parseLong(m.group(1));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAyOTk2MA=="}, "originalCommit": {"oid": "d1b3a01761091cf1b181559a9e8f0738bdc6c0ad"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODE2ODM3Ng==", "bodyText": "Tested this - RHS is not getting promoted to a double. But the following works with \"int value:\"\ndouble result = 1.0 * value * unit / 1024.0 / 1024.0;\n\n   (without \"1.0 *\" the new case test fails)", "url": "https://github.com/apache/storm/pull/3368#discussion_r548168376", "createdAt": "2020-12-23T19:32:36Z", "author": {"login": "bipinprasad"}, "path": "storm-client/src/jvm/org/apache/storm/utils/Utils.java", "diffHunk": "@@ -1039,7 +1039,7 @@ public static Double parseJvmHeapMemByChildOpts(List<String> options, Double def\n                 }\n                 Matcher m = optsPattern.matcher(option);\n                 while (m.find()) {\n-                    int value = Integer.parseInt(m.group(1));\n+                    long value = Long.parseLong(m.group(1));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAyOTk2MA=="}, "originalCommit": {"oid": "d1b3a01761091cf1b181559a9e8f0738bdc6c0ad"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODE3ODgwNg==", "bodyText": "@Ethanlm that is definitely what is happening - but I find this surprising, the expression should be widened to a double (set at compile time because of doubles in the expression (1024.0).Maybe there is a fine print at https://docs.oracle.com/javase/specs/jls/se8/html/jls-5.html.", "url": "https://github.com/apache/storm/pull/3368#discussion_r548178806", "createdAt": "2020-12-23T19:46:33Z", "author": {"login": "bipinprasad"}, "path": "storm-client/src/jvm/org/apache/storm/utils/Utils.java", "diffHunk": "@@ -1039,7 +1039,7 @@ public static Double parseJvmHeapMemByChildOpts(List<String> options, Double def\n                 }\n                 Matcher m = optsPattern.matcher(option);\n                 while (m.find()) {\n-                    int value = Integer.parseInt(m.group(1));\n+                    long value = Long.parseLong(m.group(1));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAyOTk2MA=="}, "originalCommit": {"oid": "d1b3a01761091cf1b181559a9e8f0738bdc6c0ad"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI0MDIyNg==", "bodyText": "https://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.7\n\nThe left-hand operand of a binary operator appears to be fully evaluated before any part of the right-hand operand is evaluated.\nThe Java programming language guarantees that every operand of an operator (except the conditional operators &&, ||, and ? :) appears to be fully evaluated before any part of the operation itself is performed.\n\nSo I would look at value * unit / 1024.0 / 1024.0;  as\nint tmp = value * unit;\ndouble tmp1 = tmp / 1024.0;\ndouble tmp2 = tmp1 / 1024.0;\n\nAnd the Widening Primitive Conversion happens at each operation. Looking at the byte code of this short example:\njava:\npublic static void main(String[] args)  {\n        int value = 2;\n        int unit = 1024 * 1024 * 1024;\n        double result = value * unit / 1024.0 / 1024.0 ;\n        System.out.println(result);\n}\n\nbytecode:\n  public static void main(java.lang.String[]);\n    Code:\n       0: iconst_2\n       1: istore_1\n       2: ldc           #2                  // int 1073741824\n       4: istore_2\n       5: iload_1\n       6: iload_2\n       7: imul\n       8: i2d\n       9: ldc2_w        #3                  // double 1024.0d\n      12: ddiv\n      13: ldc2_w        #3                  // double 1024.0d\n      16: ddiv\n      17: dstore_3\n      18: getstatic     #5                  // Field java/lang/System.out:Ljava/io/PrintStream;\n      21: dload_3\n      22: invokevirtual #6                  // Method java/io/PrintStream.println:(D)V\n      25: return\n}\n\n\nIt first calculate value * unit based on integer. Then on line8, i2d is invoked to convert integer to double.", "url": "https://github.com/apache/storm/pull/3368#discussion_r548240226", "createdAt": "2020-12-23T21:09:54Z", "author": {"login": "Ethanlm"}, "path": "storm-client/src/jvm/org/apache/storm/utils/Utils.java", "diffHunk": "@@ -1039,7 +1039,7 @@ public static Double parseJvmHeapMemByChildOpts(List<String> options, Double def\n                 }\n                 Matcher m = optsPattern.matcher(option);\n                 while (m.find()) {\n-                    int value = Integer.parseInt(m.group(1));\n+                    long value = Long.parseLong(m.group(1));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAyOTk2MA=="}, "originalCommit": {"oid": "d1b3a01761091cf1b181559a9e8f0738bdc6c0ad"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODU2NjgxMQ==", "bodyText": "@Ethanlm thanks for the detailed bytecode explanation. This behavior is the same in jdk14 and jdk16EA. I checked via jshell.", "url": "https://github.com/apache/storm/pull/3368#discussion_r548566811", "createdAt": "2020-12-24T15:41:40Z", "author": {"login": "bipinprasad"}, "path": "storm-client/src/jvm/org/apache/storm/utils/Utils.java", "diffHunk": "@@ -1039,7 +1039,7 @@ public static Double parseJvmHeapMemByChildOpts(List<String> options, Double def\n                 }\n                 Matcher m = optsPattern.matcher(option);\n                 while (m.find()) {\n-                    int value = Integer.parseInt(m.group(1));\n+                    long value = Long.parseLong(m.group(1));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAyOTk2MA=="}, "originalCommit": {"oid": "d1b3a01761091cf1b181559a9e8f0738bdc6c0ad"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0OTI5OTgzOnYy", "diffSide": "RIGHT", "path": "storm-client/test/jvm/org/apache/storm/utils/UtilsTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQxNToxNjo0NFrOILJO3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQyMzoxNDowOFrOILVvFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODU1NjUwOA==", "bodyText": "doubleValue is redundant", "url": "https://github.com/apache/storm/pull/3368#discussion_r548556508", "createdAt": "2020-12-24T15:16:44Z", "author": {"login": "Ethanlm"}, "path": "storm-client/test/jvm/org/apache/storm/utils/UtilsTest.java", "diffHunk": "@@ -89,7 +89,9 @@ private void doParseJvmHeapMemByChildOptsTest(String message, String opt, double\n     }\n \n     private void doParseJvmHeapMemByChildOptsTest(String message, List<String> opts, double expected) {\n-        Assert.assertEquals(message, Utils.parseJvmHeapMemByChildOpts(opts, 123.0), expected, 0);\n+        Assert.assertEquals(\n+            message,\n+            expected, Utils.parseJvmHeapMemByChildOpts(opts, 123.0).doubleValue(), 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fab7bf21b5e133962d1fb174f6c3f01555c67b97"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc2MTM2Nw==", "bodyText": "removed", "url": "https://github.com/apache/storm/pull/3368#discussion_r548761367", "createdAt": "2020-12-24T23:14:08Z", "author": {"login": "zeahoo"}, "path": "storm-client/test/jvm/org/apache/storm/utils/UtilsTest.java", "diffHunk": "@@ -89,7 +89,9 @@ private void doParseJvmHeapMemByChildOptsTest(String message, String opt, double\n     }\n \n     private void doParseJvmHeapMemByChildOptsTest(String message, List<String> opts, double expected) {\n-        Assert.assertEquals(message, Utils.parseJvmHeapMemByChildOpts(opts, 123.0), expected, 0);\n+        Assert.assertEquals(\n+            message,\n+            expected, Utils.parseJvmHeapMemByChildOpts(opts, 123.0).doubleValue(), 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODU1NjUwOA=="}, "originalCommit": {"oid": "fab7bf21b5e133962d1fb174f6c3f01555c67b97"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4240, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}