{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5OTI1Mzc1", "number": 3309, "title": "[STORM-3675] Check worker process death using /proc/<pid> directory", "bodyText": "What is the purpose of the change\nThis function can replace a system \"ps\" command with existence/ownership check on /proc/ directory. In additional, on loaded nodes, ps command can take a few seconds. java.io.File.exists() is expected to be much faster. Note that File watcher does not work on /proc file system and the event based approach was coded/tested and then discarded.\nHow was the change tested\nnew test methods in ServerUtilsTest. Also run storm, kill worker and observe log to ensure proper detection", "createdAt": "2020-07-16T06:17:17Z", "url": "https://github.com/apache/storm/pull/3309", "merged": true, "mergeCommit": {"oid": "c84bfc1c563662b4712785f88870dd31a056671a"}, "closed": true, "closedAt": "2020-08-31T19:31:37Z", "author": {"login": "bipinprasad"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc1Y-OCgH2gAyNDQ5OTI1Mzc1OmVlMDVjOTYyZGI0MzU2MmJiZTM1NzViMmE2ZDZlYzZhZjVjMzU4YmI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdEYAxlAFqTQ3ODg5NTAwMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ee05c962db43562bbe3575b2a6d6ec6af5c358bb", "author": {"user": null}, "url": "https://github.com/apache/storm/commit/ee05c962db43562bbe3575b2a6d6ec6af5c358bb", "committedDate": "2020-07-16T06:09:45Z", "message": "[STORM-3675] Check worker process death using /proc/<pid> directory on Linux. Add new test."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "711b739e051f6aa49b8ce52c1cfc3f4e044cb165", "author": {"user": null}, "url": "https://github.com/apache/storm/commit/711b739e051f6aa49b8ce52c1cfc3f4e044cb165", "committedDate": "2020-07-16T16:33:05Z", "message": "[STORM-3675] Change log messages and fix comment."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2ODY4NDQ1", "url": "https://github.com/apache/storm/pull/3309#pullrequestreview-476868445", "createdAt": "2020-08-27T16:02:50Z", "commit": {"oid": "711b739e051f6aa49b8ce52c1cfc3f4e044cb165"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "188913d7d8689e662d5ff56c65313b6900ba58cf", "author": {"user": null}, "url": "https://github.com/apache/storm/commit/188913d7d8689e662d5ff56c65313b6900ba58cf", "committedDate": "2020-08-27T17:59:24Z", "message": "[STORM-3675] Enahnce failure message for visibility in Travis."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dec64ced1f051b4395f69d92e18ad79054b942de", "author": {"user": null}, "url": "https://github.com/apache/storm/commit/dec64ced1f051b4395f69d92e18ad79054b942de", "committedDate": "2020-08-27T19:53:08Z", "message": "[STORM-3675] Add errors to track why PID cannot be determined under JDK11"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c547971559e1ef33750bfe085ead73f41f25520", "author": {"user": null}, "url": "https://github.com/apache/storm/commit/4c547971559e1ef33750bfe085ead73f41f25520", "committedDate": "2020-08-28T01:50:51Z", "message": "[STORM-3675] Add code to detect processid if test process on JDK-11 used in Travis."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4NzAzMTM1", "url": "https://github.com/apache/storm/pull/3309#pullrequestreview-478703135", "createdAt": "2020-08-31T15:13:18Z", "commit": {"oid": "4c547971559e1ef33750bfe085ead73f41f25520"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNToxMzoxOVrOHJ87Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNToxNzoyMFrOHJ9Fdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE5NzM5OQ==", "bodyText": "I would remove \"{\". It doesn't seem necessary", "url": "https://github.com/apache/storm/pull/3309#discussion_r480197399", "createdAt": "2020-08-31T15:13:19Z", "author": {"login": "Ethanlm"}, "path": "storm-server/src/test/java/org/apache/storm/utils/ServerUtilsTest.java", "diffHunk": "@@ -162,6 +174,163 @@ public void testGetUserId() throws Exception {\n         int uid1 = ServerUtils.getUserId(null);\n         Path p = Files.createTempFile(\"testGetUser\", \".txt\");\n         int uid2 = ServerUtils.getPathOwnerUid(p.toString());\n+        if (!p.toFile().delete()) {\n+            LOG.warn(\"Could not delete tempoary file {}\", p);\n+        }\n         assertEquals(\"User UID \" + uid1 + \" is not same as file \" + p.toString() + \" owner UID of \" + uid2, uid1, uid2);\n     }\n+\n+    @Test\n+    public void testIsAnyProcessPosixProcessPidDirAlive() throws IOException {\n+        final String testName = \"testIsAnyProcessPosixProcessPidDirAlive\";\n+        List<String> errors = new ArrayList<>();\n+        int maxPidCnt = 5;\n+        if (ServerUtils.IS_ON_WINDOWS) {\n+            LOG.info(\"{}: test cannot be run on Windows. Marked as successful\", testName);\n+            return;\n+        }\n+        final Path parentDir = Paths.get(\"/proc\");\n+        if (!parentDir.toFile().exists()) {\n+            LOG.info(\"{}: test cannot be run on system without process directory {}, os.name={}\",\n+                    testName, parentDir, System.getProperty(\"os.name\"));\n+            {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c547971559e1ef33750bfe085ead73f41f25520"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE5Nzk2OA==", "bodyText": "Can you please explain why is it \"useful on Mac\"?", "url": "https://github.com/apache/storm/pull/3309#discussion_r480197968", "createdAt": "2020-08-31T15:14:15Z", "author": {"login": "Ethanlm"}, "path": "storm-server/src/test/java/org/apache/storm/utils/ServerUtilsTest.java", "diffHunk": "@@ -162,6 +174,163 @@ public void testGetUserId() throws Exception {\n         int uid1 = ServerUtils.getUserId(null);\n         Path p = Files.createTempFile(\"testGetUser\", \".txt\");\n         int uid2 = ServerUtils.getPathOwnerUid(p.toString());\n+        if (!p.toFile().delete()) {\n+            LOG.warn(\"Could not delete tempoary file {}\", p);\n+        }\n         assertEquals(\"User UID \" + uid1 + \" is not same as file \" + p.toString() + \" owner UID of \" + uid2, uid1, uid2);\n     }\n+\n+    @Test\n+    public void testIsAnyProcessPosixProcessPidDirAlive() throws IOException {\n+        final String testName = \"testIsAnyProcessPosixProcessPidDirAlive\";\n+        List<String> errors = new ArrayList<>();\n+        int maxPidCnt = 5;\n+        if (ServerUtils.IS_ON_WINDOWS) {\n+            LOG.info(\"{}: test cannot be run on Windows. Marked as successful\", testName);\n+            return;\n+        }\n+        final Path parentDir = Paths.get(\"/proc\");\n+        if (!parentDir.toFile().exists()) {\n+            LOG.info(\"{}: test cannot be run on system without process directory {}, os.name={}\",\n+                    testName, parentDir, System.getProperty(\"os.name\"));\n+            {\n+                // check if we can get process id on this Posix system - testing test code, useful on Mac", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c547971559e1ef33750bfe085ead73f41f25520"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIwMDA1NA==", "bodyText": "nit: space before \";\" can be removed", "url": "https://github.com/apache/storm/pull/3309#discussion_r480200054", "createdAt": "2020-08-31T15:17:20Z", "author": {"login": "Ethanlm"}, "path": "storm-server/src/test/java/org/apache/storm/utils/ServerUtilsTest.java", "diffHunk": "@@ -162,6 +174,163 @@ public void testGetUserId() throws Exception {\n         int uid1 = ServerUtils.getUserId(null);\n         Path p = Files.createTempFile(\"testGetUser\", \".txt\");\n         int uid2 = ServerUtils.getPathOwnerUid(p.toString());\n+        if (!p.toFile().delete()) {\n+            LOG.warn(\"Could not delete tempoary file {}\", p);\n+        }\n         assertEquals(\"User UID \" + uid1 + \" is not same as file \" + p.toString() + \" owner UID of \" + uid2, uid1, uid2);\n     }\n+\n+    @Test\n+    public void testIsAnyProcessPosixProcessPidDirAlive() throws IOException {\n+        final String testName = \"testIsAnyProcessPosixProcessPidDirAlive\";\n+        List<String> errors = new ArrayList<>();\n+        int maxPidCnt = 5;\n+        if (ServerUtils.IS_ON_WINDOWS) {\n+            LOG.info(\"{}: test cannot be run on Windows. Marked as successful\", testName);\n+            return;\n+        }\n+        final Path parentDir = Paths.get(\"/proc\");\n+        if (!parentDir.toFile().exists()) {\n+            LOG.info(\"{}: test cannot be run on system without process directory {}, os.name={}\",\n+                    testName, parentDir, System.getProperty(\"os.name\"));\n+            {\n+                // check if we can get process id on this Posix system - testing test code, useful on Mac\n+                String cmd = \"/bin/sleep 10\";\n+                if (getPidOfPosixProcess(Runtime.getRuntime().exec(cmd), errors) < 0) {\n+                    fail(String.format(\"%s: Cannot obtain process id for executed command \\\"%s\\\"\\n%s\",\n+                            testName, cmd, String.join(\"\\n\\t\", errors)));\n+                }\n+            }\n+            return;\n+        }\n+        // Create processes and wait for their termination\n+        Set<Long> observables = new HashSet<>();\n+\n+        for (int i = 0 ; i < maxPidCnt ; i++) {\n+            String cmd = \"sleep 2000\";\n+            Process process = Runtime.getRuntime().exec(cmd);\n+            long pid = getPidOfPosixProcess(process, errors);\n+            LOG.info(\"{}: ({}) ran process \\\"{}\\\" with pid={}\", testName, i, cmd, pid);\n+            if (pid < 0) {\n+                String e = String.format(\"%s: (%d) Cannot obtain process id for executed command \\\"%s\\\"\", testName, i, cmd);\n+                errors.add(e);\n+                LOG.error(e);\n+                continue;\n+            }\n+            observables.add(pid);\n+        }\n+        String userName = System.getProperty(\"user.name\");\n+        // now kill processes one by one\n+        List<Long> pidList = new ArrayList<>(observables);\n+        final long processKillIntervalMs = 2000;\n+        for (int i = 0 ; i < pidList.size() ; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c547971559e1ef33750bfe085ead73f41f25520"}, "originalPosition": 115}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4NzMxMDI2", "url": "https://github.com/apache/storm/pull/3309#pullrequestreview-478731026", "createdAt": "2020-08-31T15:45:32Z", "commit": {"oid": "8197a6b8782f228ac95035dfd8c0fc968093b838"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9201fc8fee49b1da279d59a1127bb67758892f45", "author": {"user": null}, "url": "https://github.com/apache/storm/commit/9201fc8fee49b1da279d59a1127bb67758892f45", "committedDate": "2020-08-31T15:52:54Z", "message": "[STORM-3675] Code style fixes."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8197a6b8782f228ac95035dfd8c0fc968093b838", "author": {"user": null}, "url": "https://github.com/apache/storm/commit/8197a6b8782f228ac95035dfd8c0fc968093b838", "committedDate": "2020-08-31T15:37:48Z", "message": "[STORM-3675] Code style fixes."}, "afterCommit": {"oid": "9201fc8fee49b1da279d59a1127bb67758892f45", "author": {"user": null}, "url": "https://github.com/apache/storm/commit/9201fc8fee49b1da279d59a1127bb67758892f45", "committedDate": "2020-08-31T15:52:54Z", "message": "[STORM-3675] Code style fixes."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4ODk1MDAy", "url": "https://github.com/apache/storm/pull/3309#pullrequestreview-478895002", "createdAt": "2020-08-31T19:31:30Z", "commit": {"oid": "9201fc8fee49b1da279d59a1127bb67758892f45"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4640, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}