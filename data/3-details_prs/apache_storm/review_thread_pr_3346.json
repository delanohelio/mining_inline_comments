{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1NDY1MzAx", "number": 3346, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwNTozNDoyOVrOE5Rpwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNToyOTozOVrOFInLnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NDkzNTA2OnYy", "diffSide": "RIGHT", "path": "storm-server/src/test/java/org/apache/storm/scheduler/resource/strategies/scheduling/TestDefaultResourceAwareStrategy.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwNTozNDoyOVrOHzoy_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwNTozNDoyOVrOHzoy_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzkwNzgzNw==", "bodyText": "Should we remove this? I don't think we have DeprecatedConfigForProximity in community storm", "url": "https://github.com/apache/storm/pull/3346#discussion_r523907837", "createdAt": "2020-11-16T05:34:29Z", "author": {"login": "Ethanlm"}, "path": "storm-server/src/test/java/org/apache/storm/scheduler/resource/strategies/scheduling/TestDefaultResourceAwareStrategy.java", "diffHunk": "@@ -491,7 +653,10 @@ public void testDefaultResourceAwareStrategy() {\n     /**\n      * test if the scheduling logic for the DefaultResourceAwareStrategy (when made by network proximity needs.) is correct\n      */\n-    public void testDefaultResourceAwareStrategyInFavorOfShuffle() {\n+    @ParameterizedTest\n+    @ValueSource(booleans = {true, false})\n+    public void testDefaultResourceAwareStrategyInFavorOfShuffle(boolean useDeprecatedConfigForProximity)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bfe3825b6ef425d7642d704390aa292ed877bde"}, "originalPosition": 254}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NjY3NzI4OnYy", "diffSide": "RIGHT", "path": "storm-server/src/main/java/org/apache/storm/scheduler/resource/strategies/scheduling/BaseResourceAwareStrategy.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMTo1OToxM1rOHz55JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNzoyOTozMVrOH59jlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE4Nzk0MA==", "bodyText": "First Time should be System, as it represents clock time. Tests manipulate Time, therefore it is important to distinguish between the actual milliseconds and state.elapsedtime.", "url": "https://github.com/apache/storm/pull/3346#discussion_r524187940", "createdAt": "2020-11-16T11:59:13Z", "author": {"login": "bipinprasad"}, "path": "storm-server/src/main/java/org/apache/storm/scheduler/resource/strategies/scheduling/BaseResourceAwareStrategy.java", "diffHunk": "@@ -428,16 +465,39 @@ protected SchedulingResult scheduleExecutorsOnNodes(List<ExecutorDetails> ordere\n                     }\n                     progressIdxForExec[execIndex]++;\n \n+                    int numBoundAckerAssigned\n+                        = assignBoundAckersForNewWorkerSlot(exec, node, workerSlot);\n+                    if (numBoundAckerAssigned == -1) {\n+                        // This only happens when trying to assign bound ackers to the worker slot and failed.\n+                        // Free the entire worker slot and put those bound ackers back to unassigned list\n+                        LOG.debug(\"Failed to assign bound acker for exec: {} of topo: {} to worker: {}.  Backtracking.\",\n+                            exec, topoName, workerSlot);\n+                        searcherState.freeWorkerSlotWithBoundAckers(node, workerSlot);\n+                        continue;\n+                    }\n+\n                     if (!isExecAssignmentToWorkerValid(exec, workerSlot)) {\n+                        // This only happens when this exec can not fit in the workerSlot\n+                        // and this is not the first exec to this workerSlot.\n+                        // So just go to next workerSlot and don't free the worker.\n+                        if (numBoundAckerAssigned > 0) {\n+                            LOG.debug(\"Failed to assign exec: {} of topo: {} with bound ackers to worker: {}.  Backtracking.\",\n+                                exec, topoName, workerSlot);\n+                            searcherState.freeWorkerSlotWithBoundAckers(node, workerSlot);\n+                        }\n                         continue;\n                     }\n \n                     searcherState.incStatesSearched();\n                     searcherState.assignCurrentExecutor(execToComp, node, workerSlot);\n+                    if (numBoundAckerAssigned > 0) {\n+                        // This exec with its bounded ackers have all been successfully assigned\n+                        searcherState.getExecsWithBoundAckers().add(exec);\n+                    }\n                     if (searcherState.areAllExecsScheduled()) {\n                         //Everything is scheduled correctly, so no need to search any more.\n                         LOG.info(\"scheduleExecutorsOnNodes: Done at loopCnt={} in {}ms, state.elapsedtime={}, backtrackCnt={}, topo={}\",\n-                                loopCnt, System.currentTimeMillis() - startTimeMilli,\n+                                loopCnt, Time.currentTimeMillis() - startTimeMilli,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04483ade84654678e9913f92a664c8bcbe4d3dae"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ2MjQzNw==", "bodyText": "Time is clock time if it is not in unit test.\nI am not very clear why we need to use System here but not on the second one", "url": "https://github.com/apache/storm/pull/3346#discussion_r524462437", "createdAt": "2020-11-16T17:54:10Z", "author": {"login": "Ethanlm"}, "path": "storm-server/src/main/java/org/apache/storm/scheduler/resource/strategies/scheduling/BaseResourceAwareStrategy.java", "diffHunk": "@@ -428,16 +465,39 @@ protected SchedulingResult scheduleExecutorsOnNodes(List<ExecutorDetails> ordere\n                     }\n                     progressIdxForExec[execIndex]++;\n \n+                    int numBoundAckerAssigned\n+                        = assignBoundAckersForNewWorkerSlot(exec, node, workerSlot);\n+                    if (numBoundAckerAssigned == -1) {\n+                        // This only happens when trying to assign bound ackers to the worker slot and failed.\n+                        // Free the entire worker slot and put those bound ackers back to unassigned list\n+                        LOG.debug(\"Failed to assign bound acker for exec: {} of topo: {} to worker: {}.  Backtracking.\",\n+                            exec, topoName, workerSlot);\n+                        searcherState.freeWorkerSlotWithBoundAckers(node, workerSlot);\n+                        continue;\n+                    }\n+\n                     if (!isExecAssignmentToWorkerValid(exec, workerSlot)) {\n+                        // This only happens when this exec can not fit in the workerSlot\n+                        // and this is not the first exec to this workerSlot.\n+                        // So just go to next workerSlot and don't free the worker.\n+                        if (numBoundAckerAssigned > 0) {\n+                            LOG.debug(\"Failed to assign exec: {} of topo: {} with bound ackers to worker: {}.  Backtracking.\",\n+                                exec, topoName, workerSlot);\n+                            searcherState.freeWorkerSlotWithBoundAckers(node, workerSlot);\n+                        }\n                         continue;\n                     }\n \n                     searcherState.incStatesSearched();\n                     searcherState.assignCurrentExecutor(execToComp, node, workerSlot);\n+                    if (numBoundAckerAssigned > 0) {\n+                        // This exec with its bounded ackers have all been successfully assigned\n+                        searcherState.getExecsWithBoundAckers().add(exec);\n+                    }\n                     if (searcherState.areAllExecsScheduled()) {\n                         //Everything is scheduled correctly, so no need to search any more.\n                         LOG.info(\"scheduleExecutorsOnNodes: Done at loopCnt={} in {}ms, state.elapsedtime={}, backtrackCnt={}, topo={}\",\n-                                loopCnt, System.currentTimeMillis() - startTimeMilli,\n+                                loopCnt, Time.currentTimeMillis() - startTimeMilli,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE4Nzk0MA=="}, "originalCommit": {"oid": "04483ade84654678e9913f92a664c8bcbe4d3dae"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI4MjAxNg==", "bodyText": "When testing you need both. Because Time can be advanced in (some) test, it gives the wrong clock elapsed time - but is still useful information.", "url": "https://github.com/apache/storm/pull/3346#discussion_r525282016", "createdAt": "2020-11-17T16:05:07Z", "author": {"login": "bipinprasad"}, "path": "storm-server/src/main/java/org/apache/storm/scheduler/resource/strategies/scheduling/BaseResourceAwareStrategy.java", "diffHunk": "@@ -428,16 +465,39 @@ protected SchedulingResult scheduleExecutorsOnNodes(List<ExecutorDetails> ordere\n                     }\n                     progressIdxForExec[execIndex]++;\n \n+                    int numBoundAckerAssigned\n+                        = assignBoundAckersForNewWorkerSlot(exec, node, workerSlot);\n+                    if (numBoundAckerAssigned == -1) {\n+                        // This only happens when trying to assign bound ackers to the worker slot and failed.\n+                        // Free the entire worker slot and put those bound ackers back to unassigned list\n+                        LOG.debug(\"Failed to assign bound acker for exec: {} of topo: {} to worker: {}.  Backtracking.\",\n+                            exec, topoName, workerSlot);\n+                        searcherState.freeWorkerSlotWithBoundAckers(node, workerSlot);\n+                        continue;\n+                    }\n+\n                     if (!isExecAssignmentToWorkerValid(exec, workerSlot)) {\n+                        // This only happens when this exec can not fit in the workerSlot\n+                        // and this is not the first exec to this workerSlot.\n+                        // So just go to next workerSlot and don't free the worker.\n+                        if (numBoundAckerAssigned > 0) {\n+                            LOG.debug(\"Failed to assign exec: {} of topo: {} with bound ackers to worker: {}.  Backtracking.\",\n+                                exec, topoName, workerSlot);\n+                            searcherState.freeWorkerSlotWithBoundAckers(node, workerSlot);\n+                        }\n                         continue;\n                     }\n \n                     searcherState.incStatesSearched();\n                     searcherState.assignCurrentExecutor(execToComp, node, workerSlot);\n+                    if (numBoundAckerAssigned > 0) {\n+                        // This exec with its bounded ackers have all been successfully assigned\n+                        searcherState.getExecsWithBoundAckers().add(exec);\n+                    }\n                     if (searcherState.areAllExecsScheduled()) {\n                         //Everything is scheduled correctly, so no need to search any more.\n                         LOG.info(\"scheduleExecutorsOnNodes: Done at loopCnt={} in {}ms, state.elapsedtime={}, backtrackCnt={}, topo={}\",\n-                                loopCnt, System.currentTimeMillis() - startTimeMilli,\n+                                loopCnt, Time.currentTimeMillis() - startTimeMilli,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE4Nzk0MA=="}, "originalCommit": {"oid": "04483ade84654678e9913f92a664c8bcbe4d3dae"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUzOTQxNQ==", "bodyText": "Should we change them to be System if we don't want to use Time since it is simulated in unit test?\nI guess my question is really why only changes one not the other?\nI think we should just use one of them, either Time or System, in both places", "url": "https://github.com/apache/storm/pull/3346#discussion_r530539415", "createdAt": "2020-11-25T17:29:31Z", "author": {"login": "Ethanlm"}, "path": "storm-server/src/main/java/org/apache/storm/scheduler/resource/strategies/scheduling/BaseResourceAwareStrategy.java", "diffHunk": "@@ -428,16 +465,39 @@ protected SchedulingResult scheduleExecutorsOnNodes(List<ExecutorDetails> ordere\n                     }\n                     progressIdxForExec[execIndex]++;\n \n+                    int numBoundAckerAssigned\n+                        = assignBoundAckersForNewWorkerSlot(exec, node, workerSlot);\n+                    if (numBoundAckerAssigned == -1) {\n+                        // This only happens when trying to assign bound ackers to the worker slot and failed.\n+                        // Free the entire worker slot and put those bound ackers back to unassigned list\n+                        LOG.debug(\"Failed to assign bound acker for exec: {} of topo: {} to worker: {}.  Backtracking.\",\n+                            exec, topoName, workerSlot);\n+                        searcherState.freeWorkerSlotWithBoundAckers(node, workerSlot);\n+                        continue;\n+                    }\n+\n                     if (!isExecAssignmentToWorkerValid(exec, workerSlot)) {\n+                        // This only happens when this exec can not fit in the workerSlot\n+                        // and this is not the first exec to this workerSlot.\n+                        // So just go to next workerSlot and don't free the worker.\n+                        if (numBoundAckerAssigned > 0) {\n+                            LOG.debug(\"Failed to assign exec: {} of topo: {} with bound ackers to worker: {}.  Backtracking.\",\n+                                exec, topoName, workerSlot);\n+                            searcherState.freeWorkerSlotWithBoundAckers(node, workerSlot);\n+                        }\n                         continue;\n                     }\n \n                     searcherState.incStatesSearched();\n                     searcherState.assignCurrentExecutor(execToComp, node, workerSlot);\n+                    if (numBoundAckerAssigned > 0) {\n+                        // This exec with its bounded ackers have all been successfully assigned\n+                        searcherState.getExecsWithBoundAckers().add(exec);\n+                    }\n                     if (searcherState.areAllExecsScheduled()) {\n                         //Everything is scheduled correctly, so no need to search any more.\n                         LOG.info(\"scheduleExecutorsOnNodes: Done at loopCnt={} in {}ms, state.elapsedtime={}, backtrackCnt={}, topo={}\",\n-                                loopCnt, System.currentTimeMillis() - startTimeMilli,\n+                                loopCnt, Time.currentTimeMillis() - startTimeMilli,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE4Nzk0MA=="}, "originalCommit": {"oid": "04483ade84654678e9913f92a664c8bcbe4d3dae"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NjY4NDEyOnYy", "diffSide": "RIGHT", "path": "storm-server/src/main/java/org/apache/storm/scheduler/resource/strategies/scheduling/BaseResourceAwareStrategy.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMjowMDoxOVrOHz59rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMjowMDoxOVrOHz59rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE4OTEwMQ==", "bodyText": "First Time should be System, as it is actual clock time.", "url": "https://github.com/apache/storm/pull/3346#discussion_r524189101", "createdAt": "2020-11-16T12:00:19Z", "author": {"login": "bipinprasad"}, "path": "storm-server/src/main/java/org/apache/storm/scheduler/resource/strategies/scheduling/BaseResourceAwareStrategy.java", "diffHunk": "@@ -464,9 +524,46 @@ protected SchedulingResult scheduleExecutorsOnNodes(List<ExecutorDetails> ordere\n         }\n         boolean success = searcherState.areAllExecsScheduled();\n         LOG.info(\"scheduleExecutorsOnNodes: Scheduled={} in {} milliseconds, state.elapsedtime={}, backtrackCnt={}, topo={}\",\n-                success, System.currentTimeMillis() - startTimeMilli, Time.currentTimeMillis() - searcherState.startTimeMillis,\n+                success, Time.currentTimeMillis() - startTimeMilli, Time.currentTimeMillis() - searcherState.startTimeMillis,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04483ade84654678e9913f92a664c8bcbe4d3dae"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4Njc1ODY0OnYy", "diffSide": "RIGHT", "path": "storm-server/src/main/java/org/apache/storm/daemon/nimbus/Nimbus.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMjoxMjoyOFrOHz6ucg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMjoxMjoyOFrOHz6ucg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIwMTU4Ng==", "bodyText": "Should this be LOG.debug?", "url": "https://github.com/apache/storm/pull/3346#discussion_r524201586", "createdAt": "2020-11-16T12:12:28Z", "author": {"login": "bipinprasad"}, "path": "storm-server/src/main/java/org/apache/storm/daemon/nimbus/Nimbus.java", "diffHunk": "@@ -3240,14 +3206,15 @@ public void submitTopologyWithOpts(String topoName, String uploadedJarLocation,\n             // we might need to set the number of acker executors and eventlogger executors to be the estimated number of workers.\n             if (ServerUtils.isRas(conf)) {\n                 int estimatedNumWorker = ServerUtils.getEstimatedWorkerCountForRasTopo(totalConf, topology);\n-                int numAckerExecs = ObjectReader.getInt(totalConf.get(Config.TOPOLOGY_ACKER_EXECUTORS), estimatedNumWorker);\n-                int numEventLoggerExecs = ObjectReader.getInt(totalConf.get(Config.TOPOLOGY_EVENTLOGGER_EXECUTORS), estimatedNumWorker);\n \n-                totalConfToSave.put(Config.TOPOLOGY_ACKER_EXECUTORS, numAckerExecs);\n+                setUpAckerExecutorConfigs(topoName, totalConfToSave, totalConf, estimatedNumWorker);\n+                ServerUtils.validateTopologyAckerBundleResource(totalConfToSave, topology, topoName);\n+\n+                int numEventLoggerExecs = ObjectReader.getInt(totalConf.get(Config.TOPOLOGY_EVENTLOGGER_EXECUTORS), estimatedNumWorker);\n                 totalConfToSave.put(Config.TOPOLOGY_EVENTLOGGER_EXECUTORS, numEventLoggerExecs);\n+                LOG.info(\"Config {} set to: {} for topology: {}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04483ade84654678e9913f92a664c8bcbe4d3dae"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4Njc4NDQ3OnYy", "diffSide": "RIGHT", "path": "storm-server/src/main/java/org/apache/storm/scheduler/resource/strategies/scheduling/BaseResourceAwareStrategy.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMjoxNjozN1rOHz6_sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMjoxNjozN1rOHz6_sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIwNjAwMg==", "bodyText": "Should be System instead of Time on this line. Time on next line is fine.", "url": "https://github.com/apache/storm/pull/3346#discussion_r524206002", "createdAt": "2020-11-16T12:16:37Z", "author": {"login": "bipinprasad"}, "path": "storm-server/src/main/java/org/apache/storm/scheduler/resource/strategies/scheduling/BaseResourceAwareStrategy.java", "diffHunk": "@@ -410,6 +429,24 @@ protected SchedulingResult scheduleExecutorsOnNodes(List<ExecutorDetails> ordere\n \n             int execIndex = searcherState.getExecIndex();\n             ExecutorDetails exec = searcherState.currentExec();\n+\n+            // If current exec is found in searcherState assigned Ackers,\n+            // it means it has been assigned as a bound acker already.\n+            // So we skip to the next.\n+            if (searcherState.getBoundAckers().contains(exec)) {\n+                if (searcherState.areAllExecsScheduled()) {\n+                    //Everything is scheduled correctly, so no need to search any more.\n+                    LOG.info(\"scheduleExecutorsOnNodes: Done at loopCnt={} in {}ms, state.elapsedtime={}, backtrackCnt={}, topo={}\",\n+                        loopCnt, Time.currentTimeMillis() - startTimeMilli,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04483ade84654678e9913f92a664c8bcbe4d3dae"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4Njg0NzcxOnYy", "diffSide": "RIGHT", "path": "storm-server/src/main/java/org/apache/storm/scheduler/resource/strategies/scheduling/IStrategy.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMjoyNjozMVrOHz7pag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMjoyNjozMVrOHz7pag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIxNjY4Mg==", "bodyText": "The javadoc comment should be reverted - signature of extended classes do not have the params.", "url": "https://github.com/apache/storm/pull/3346#discussion_r524216682", "createdAt": "2020-11-16T12:26:31Z", "author": {"login": "bipinprasad"}, "path": "storm-server/src/main/java/org/apache/storm/scheduler/resource/strategies/scheduling/IStrategy.java", "diffHunk": "@@ -22,9 +23,10 @@\n  * Scheduler should call {@link #prepare(Map)} followed by {@link #schedule(Cluster, TopologyDetails)}.\n  * <p>\n  *     A fully functioning implementation is in the abstract class {@link BaseResourceAwareStrategy}.\n- *     Subclasses classes should extend {@link BaseResourceAwareStrategy#BaseResourceAwareStrategy()}\n- *     in their constructors as in {@link GenericResourceAwareStrategy}, {@link DefaultResourceAwareStrategy})\n- *     and {@link ConstraintSolverStrategy}.\n+ *     Subclasses classes should extend\n+ *     {@link BaseResourceAwareStrategy#BaseResourceAwareStrategy(boolean, BaseResourceAwareStrategy.NodeSortType)}\n+ *     in their constructors (as in {@link GenericResourceAwareStrategy}, {@link DefaultResourceAwareStrategy}\n+ *     and {@link ConstraintSolverStrategy}).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04483ade84654678e9913f92a664c8bcbe4d3dae"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4Nzc4NzI2OnYy", "diffSide": "RIGHT", "path": "storm-server/src/test/java/org/apache/storm/scheduler/resource/strategies/scheduling/TestBackwardCompatibility.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNTo0NDozMFrOH0EtyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNTo0NDozMFrOH0EtyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM2NTI1Ng==", "bodyText": "Should we remove this", "url": "https://github.com/apache/storm/pull/3346#discussion_r524365256", "createdAt": "2020-11-16T15:44:30Z", "author": {"login": "Ethanlm"}, "path": "storm-server/src/test/java/org/apache/storm/scheduler/resource/strategies/scheduling/TestBackwardCompatibility.java", "diffHunk": "@@ -362,12 +363,22 @@ public void testDefaultResourceAwareStrategySharedMemory(TestDefaultResourceAwar\n     }\n \n     @Test\n-    public void testDefaultResourceAwareStrategy() {\n-        testDefaultResourceAwareStrategy.testDefaultResourceAwareStrategy();\n+    public void testDefaultResourceAwareStrategy()\n+        throws InvalidTopologyException {\n+        testDefaultResourceAwareStrategy.testDefaultResourceAwareStrategyWithoutSettingAckerExecutors(0);\n     }\n \n     @Test\n-    public void testDefaultResourceAwareStrategyInFavorOfShuffle() {\n+    public void testDefaultResourceAwareStrategyInFavorOfShuffleWithNewProximityConfig()\n+        throws InvalidTopologyException {\n+        boolean useDeprecatedConfigForProximity = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04483ade84654678e9913f92a664c8bcbe4d3dae"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4Nzc4OTE4OnYy", "diffSide": "RIGHT", "path": "storm-server/src/test/java/org/apache/storm/scheduler/resource/strategies/scheduling/TestBackwardCompatibility.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNTo0NDo1MFrOH0Eu5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNTo0NDo1MFrOH0Eu5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM2NTU0MQ==", "bodyText": "and this ?", "url": "https://github.com/apache/storm/pull/3346#discussion_r524365541", "createdAt": "2020-11-16T15:44:50Z", "author": {"login": "Ethanlm"}, "path": "storm-server/src/test/java/org/apache/storm/scheduler/resource/strategies/scheduling/TestBackwardCompatibility.java", "diffHunk": "@@ -362,12 +363,22 @@ public void testDefaultResourceAwareStrategySharedMemory(TestDefaultResourceAwar\n     }\n \n     @Test\n-    public void testDefaultResourceAwareStrategy() {\n-        testDefaultResourceAwareStrategy.testDefaultResourceAwareStrategy();\n+    public void testDefaultResourceAwareStrategy()\n+        throws InvalidTopologyException {\n+        testDefaultResourceAwareStrategy.testDefaultResourceAwareStrategyWithoutSettingAckerExecutors(0);\n     }\n \n     @Test\n-    public void testDefaultResourceAwareStrategyInFavorOfShuffle() {\n+    public void testDefaultResourceAwareStrategyInFavorOfShuffleWithNewProximityConfig()\n+        throws InvalidTopologyException {\n+        boolean useDeprecatedConfigForProximity = false;\n+        testDefaultResourceAwareStrategy.testDefaultResourceAwareStrategyInFavorOfShuffle();\n+    }\n+\n+    @Test\n+    public void testDefaultResourceAwareStrategyInFavorOfShuffleWithDeprecatedProximityConfig()\n+        throws InvalidTopologyException {\n+        boolean useDeprecatedConfigForProximity = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04483ade84654678e9913f92a664c8bcbe4d3dae"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4Nzc4OTkxOnYy", "diffSide": "RIGHT", "path": "storm-server/src/test/java/org/apache/storm/scheduler/resource/strategies/scheduling/TestBackwardCompatibility.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNTo0NDo1OFrOH0EvUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNTo0NDo1OFrOH0EvUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM2NTY0OA==", "bodyText": "Name should be reverted back", "url": "https://github.com/apache/storm/pull/3346#discussion_r524365648", "createdAt": "2020-11-16T15:44:58Z", "author": {"login": "Ethanlm"}, "path": "storm-server/src/test/java/org/apache/storm/scheduler/resource/strategies/scheduling/TestBackwardCompatibility.java", "diffHunk": "@@ -362,12 +363,22 @@ public void testDefaultResourceAwareStrategySharedMemory(TestDefaultResourceAwar\n     }\n \n     @Test\n-    public void testDefaultResourceAwareStrategy() {\n-        testDefaultResourceAwareStrategy.testDefaultResourceAwareStrategy();\n+    public void testDefaultResourceAwareStrategy()\n+        throws InvalidTopologyException {\n+        testDefaultResourceAwareStrategy.testDefaultResourceAwareStrategyWithoutSettingAckerExecutors(0);\n     }\n \n     @Test\n-    public void testDefaultResourceAwareStrategyInFavorOfShuffle() {\n+    public void testDefaultResourceAwareStrategyInFavorOfShuffleWithNewProximityConfig()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04483ade84654678e9913f92a664c8bcbe4d3dae"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NTczMTI4OnYy", "diffSide": "RIGHT", "path": "storm-server/src/test/java/org/apache/storm/scheduler/resource/strategies/scheduling/TestBackwardCompatibility.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNToyNDowMFrOIKn7rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNToyNDowMFrOIKn7rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAxMDkyNw==", "bodyText": "This shouldn't change", "url": "https://github.com/apache/storm/pull/3346#discussion_r548010927", "createdAt": "2020-12-23T15:24:00Z", "author": {"login": "Ethanlm"}, "path": "storm-server/src/test/java/org/apache/storm/scheduler/resource/strategies/scheduling/TestBackwardCompatibility.java", "diffHunk": "@@ -131,7 +131,7 @@ protected Class getDefaultResourceAwareStrategyClass() {\n     }\n \n     /**********************************************************************************\n-     *  Tests for  testGenericResourceAwareStrategy\n+     *  Tests for  testGenericResourceAwareStrategyWithoutSettingAckerExecutors", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cc196ab6d860bfcc1b361bf16dcccd1175b0f71"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NTczMjM1OnYy", "diffSide": "RIGHT", "path": "storm-server/src/test/java/org/apache/storm/scheduler/resource/strategies/scheduling/TestGenericResourceAwareStrategy.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNToyNDoyNFrOIKn8Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNToyNDoyNFrOIKn8Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAxMTEwMg==", "bodyText": "It would be easier to understand  if we replace  \"acker executors\" with TOPOLOGY_ACKER_EXECUTORS here.", "url": "https://github.com/apache/storm/pull/3346#discussion_r548011102", "createdAt": "2020-12-23T15:24:24Z", "author": {"login": "Ethanlm"}, "path": "storm-server/src/test/java/org/apache/storm/scheduler/resource/strategies/scheduling/TestGenericResourceAwareStrategy.java", "diffHunk": "@@ -181,10 +185,15 @@ public void testGenericResourceAwareStrategySharedMemory() {\n     }\n \n     /**\n-     * test if the scheduling logic for the GenericResourceAwareStrategy is correct.\n+     * Test if the scheduling logic for the GenericResourceAwareStrategy is correct\n+     * without setting acker executors.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cc196ab6d860bfcc1b361bf16dcccd1175b0f71"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NTc0NDk4OnYy", "diffSide": "RIGHT", "path": "storm-server/src/test/java/org/apache/storm/scheduler/resource/strategies/scheduling/TestGenericResourceAwareStrategy.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNToyODoyNVrOIKoD9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNToyODoyNVrOIKoD9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAxMzA0Ng==", "bodyText": "use TOPOLOGY_ACKER_EXECUTORS looks more clear to me", "url": "https://github.com/apache/storm/pull/3346#discussion_r548013046", "createdAt": "2020-12-23T15:28:25Z", "author": {"login": "Ethanlm"}, "path": "storm-server/src/test/java/org/apache/storm/scheduler/resource/strategies/scheduling/TestGenericResourceAwareStrategy.java", "diffHunk": "@@ -223,25 +249,166 @@ public void testGenericResourceAwareStrategy() {\n         scheduler.prepare(conf, new StormMetricsRegistry());\n         scheduler.schedule(topologies, cluster);\n \n-        //We need to have 3 slots on 3 separate hosts. The topology needs 6 GPUs 3500 MB memory and 350% CPU\n+        // We need to have 3 slots on 3 separate hosts. The topology needs 6 GPUs 3500 MB memory and 350% CPU\n         // The bolt-3 instances must be on separate nodes because they each need 2 GPUs.\n         // The bolt-2 instances must be on the same node as they each need 1 GPU\n         // (this assumes that we are packing the components to avoid fragmentation).\n         // The bolt-1 and spout instances fill in the rest.\n \n+        // Ordered execs: [[6, 6], [2, 2], [4, 4], [5, 5], [1, 1], [3, 3], [0, 0]]\n+        // Ackers: [[8, 8], [7, 7]] (+ [[9, 9], [10, 10]] when numOfAckersPerWorker=2)\n+        HashSet<HashSet<ExecutorDetails>> expectedScheduling = new HashSet<>();\n+        if (numOfAckersPerWorker == -1 || numOfAckersPerWorker == 1) {\n+            expectedScheduling.add(new HashSet<>(Arrays.asList(\n+                new ExecutorDetails(3, 3)))); //bolt-3 - 500 MB, 50% CPU, 2 GPU\n+            //Total 500 MB, 50% CPU, 2 - GPU -> this node has 1500 MB, 150% cpu, 0 GPU left\n+            expectedScheduling.add(new HashSet<>(Arrays.asList(\n+                new ExecutorDetails(6, 6), //bolt-2 - 500 MB, 50% CPU, 1 GPU\n+                new ExecutorDetails(2, 2), //bolt-1 - 500 MB, 50% CPU, 0 GPU\n+                new ExecutorDetails(5, 5), //bolt-2 - 500 MB, 50% CPU, 1 GPU\n+                new ExecutorDetails(8, 8)))); //acker - 250 MB, 50% CPU, 0 GPU\n+            //Total 1750 MB, 200% CPU, 2 GPU -> this node has 250 MB, 0% CPU, 0 GPU left\n+            expectedScheduling.add(new HashSet<>(Arrays.asList(\n+                new ExecutorDetails(4, 4), //bolt-3 500 MB, 50% cpu, 2 GPU\n+                new ExecutorDetails(1, 1), //bolt-1 - 500 MB, 50% CPU, 0 GPU\n+                new ExecutorDetails(0, 0), //Spout - 500 MB, 50% CPU, 0 GPU\n+                new ExecutorDetails(7, 7) ))); //acker - 250 MB, 50% CPU, 0 GPU\n+            //Total 1750 MB, 200% CPU, 2 GPU -> this node has 250 MB, 0% CPU, 0 GPU left\n+        } else if (numOfAckersPerWorker == 0) {\n+            expectedScheduling.add(new HashSet<>(Arrays.asList(\n+                new ExecutorDetails(3, 3)))); //bolt-3 - 500 MB, 50% CPU, 2 GPU\n+            //Total 500 MB, 50% CPU, 2 - GPU -> this node has 1500 MB, 150% cpu, 0 GPU left\n+            expectedScheduling.add(new HashSet<>(Arrays.asList(\n+                new ExecutorDetails(6, 6), //bolt-2 - 500 MB, 50% CPU, 1 GPU\n+                new ExecutorDetails(2, 2), //bolt-1 - 500 MB, 50% CPU, 0 GPU\n+                new ExecutorDetails(5, 5), //bolt-2 - 500 MB, 50% CPU, 1 GPU\n+                new ExecutorDetails(1, 1))));  //bolt-1 - 500 MB, 50% CPU, 0 GPU\n+            //Total 2000 MB, 200% CPU, 2 GPU -> this node has 0 MB, 0% CPU, 0 GPU left\n+            expectedScheduling.add(new HashSet<>(Arrays.asList(\n+                new ExecutorDetails(0, 0), //Spout - 500 MB, 50% CPU, 0 GPU\n+                new ExecutorDetails(4, 4)))); //bolt-3 500 MB, 50% cpu, 2 GPU\n+            //Total 1000 MB, 100% CPU, 2 GPU -> this node has 1000 MB, 100% CPU, 0 GPU left\n+        } else if (numOfAckersPerWorker == 2) {\n+            expectedScheduling.add(new HashSet<>(Arrays.asList(\n+                new ExecutorDetails(3, 3)))); //bolt-3 - 500 MB, 50% CPU, 2 GPU\n+            //Total 500 MB, 50% CPU, 2 - GPU -> this node has 1500 MB, 150% cpu, 0 GPU left\n+            expectedScheduling.add(new HashSet<>(Arrays.asList(\n+                new ExecutorDetails(7, 7),      //acker - 250 MB, 50% CPU, 0 GPU\n+                new ExecutorDetails(8, 8),      //acker - 250 MB, 50% CPU, 0 GPU\n+                new ExecutorDetails(6, 6),      //bolt-2 - 500 MB, 50% CPU, 1 GPU\n+                new ExecutorDetails(2, 2))));   //bolt-1 - 500 MB, 50% CPU, 0 GPU\n+            //Total 1500 MB, 200% CPU, 2 GPU -> this node has 500 MB, 0% CPU, 0 GPU left\n+            expectedScheduling.add(new HashSet<>(Arrays.asList(\n+                new ExecutorDetails(9, 9),    //acker- 250 MB, 50% CPU, 0 GPU\n+                new ExecutorDetails(10, 10),  //acker- 250 MB, 50% CPU, 0 GPU\n+                new ExecutorDetails(1, 1),    //bolt-1 - 500 MB, 50% CPU, 0 GPU\n+                new ExecutorDetails(4, 4)))); //bolt-3 500 MB, 50% cpu, 2 GPU\n+            //Total 1500 MB, 200% CPU, 2 GPU -> this node has 500 MB, 0% CPU, 0 GPU left\n+            expectedScheduling.add(new HashSet<>(Arrays.asList(\n+                new ExecutorDetails(0, 0), //Spout - 500 MB, 50% CPU, 0 GPU\n+                new ExecutorDetails(5, 5)))); //bolt-2 - 500 MB, 50% CPU, 1 GPU\n+            //Total 1000 MB, 100% CPU, 2 GPU -> this node has 1000 MB, 100% CPU, 0 GPU left\n+        }\n+        HashSet<HashSet<ExecutorDetails>> foundScheduling = new HashSet<>();\n+        SchedulerAssignment assignment = cluster.getAssignmentById(\"testTopology-id\");\n+        for (Collection<ExecutorDetails> execs : assignment.getSlotToExecutors().values()) {\n+            foundScheduling.add(new HashSet<>(execs));\n+        }\n+\n+        assertEquals(expectedScheduling, foundScheduling);\n+    }\n+\n+    /**\n+     * Test if the scheduling logic for the GenericResourceAwareStrategy is correct\n+     * with setting acker executors.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cc196ab6d860bfcc1b361bf16dcccd1175b0f71"}, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NTc0ODc5OnYy", "diffSide": "LEFT", "path": "storm-server/src/test/java/org/apache/storm/scheduler/resource/strategies/scheduling/TestBackwardCompatibility.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNToyOTozOVrOIKoGPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNToyOTozOVrOIKoGPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAxMzYzMA==", "bodyText": "should we keep this?", "url": "https://github.com/apache/storm/pull/3346#discussion_r548013630", "createdAt": "2020-12-23T15:29:39Z", "author": {"login": "Ethanlm"}, "path": "storm-server/src/test/java/org/apache/storm/scheduler/resource/strategies/scheduling/TestBackwardCompatibility.java", "diffHunk": "@@ -362,13 +365,9 @@ public void testDefaultResourceAwareStrategySharedMemory(TestDefaultResourceAwar\n     }\n \n     @Test\n-    public void testDefaultResourceAwareStrategy() {\n-        testDefaultResourceAwareStrategy.testDefaultResourceAwareStrategy();\n-    }\n-\n-    @Test\n-    public void testDefaultResourceAwareStrategyInFavorOfShuffle() {\n-        testDefaultResourceAwareStrategy.testDefaultResourceAwareStrategyInFavorOfShuffle();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cc196ab6d860bfcc1b361bf16dcccd1175b0f71"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4213, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}