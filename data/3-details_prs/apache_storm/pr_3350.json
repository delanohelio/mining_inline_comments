{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4ODAwNDI1", "number": 3350, "title": "STORM-3714 add rate tracking to TaskMetrics", "bodyText": "What is the purpose of the change\nAdd RateCounter class to have a metric with a count and one minute rate without the performance impact of a Meter.  The code is based on Flink's MeterView, which updates the rate in a background thread.  Switch TaskMetrics to use this to report the rate.\nHow was the change tested\nRan word count topology and validated metric was reported and looked valid.  Ran storm-client unit tests.", "createdAt": "2020-11-10T22:24:13Z", "url": "https://github.com/apache/storm/pull/3350", "merged": true, "mergeCommit": {"oid": "7207cc883c71061a522ccaba33bf29fb5003282f"}, "closed": true, "closedAt": "2021-01-05T22:04:15Z", "author": {"login": "agresch"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdj16bFAFqTU0NjE2NjQwMQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdtQjQWgFqTU2MjA5MTAzNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2MTY2NDAx", "url": "https://github.com/apache/storm/pull/3350#pullrequestreview-546166401", "createdAt": "2020-12-07T13:53:22Z", "commit": {"oid": "63d6d8e414758f8f667999e1b83db1323b0f3b47"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxODg5MDA4", "url": "https://github.com/apache/storm/pull/3350#pullrequestreview-551889008", "createdAt": "2020-12-14T21:01:03Z", "commit": {"oid": "63d6d8e414758f8f667999e1b83db1323b0f3b47"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMTowMTowNFrOIFotaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMTowMTowNFrOIFotaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjc4MDc3Nw==", "bodyText": "Should this (mod) subtraction be from (valueAtTime - valueAtTimeMinus1), instead of (valueAtTime - valueAtTimePlus1)", "url": "https://github.com/apache/storm/pull/3350#discussion_r542780777", "createdAt": "2020-12-14T21:01:04Z", "author": {"login": "bipinprasad"}, "path": "storm-client/src/jvm/org/apache/storm/metrics2/RateCounter.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.  The ASF licenses this file to you under the Apache License, Version\n+ * 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n+ * and limitations under the License.\n+ */\n+\n+package org.apache.storm.metrics2;\n+\n+import com.codahale.metrics.Counter;\n+import com.codahale.metrics.Gauge;\n+\n+/**\n+ * A Counter metric that also implements a Gauge to report a 1 minute rate.  This class was added as a compromise to\n+ * using a Meter, which has a much larger performance impact.\n+ */\n+public class RateCounter implements Gauge<Double> {\n+    private Counter counter;\n+    private double currentRate = 0;\n+    private int time = 0;\n+    private final long[] values;\n+    private final int timeSpanInSeconds;\n+\n+    RateCounter(StormMetricRegistry metricRegistry, String metricName, String topologyId,\n+                String componentId, int taskId, int workerPort, String streamId) {\n+        counter = metricRegistry.counter(metricName, topologyId, componentId,\n+                taskId, workerPort, streamId);\n+        metricRegistry.gauge(metricName + \".m1_rate\", this, topologyId, componentId, streamId,\n+                taskId, workerPort);\n+        this.timeSpanInSeconds = Math.max(60 - (60 % metricRegistry.getRateCounterUpdateIntervalSeconds()),\n+                metricRegistry.getRateCounterUpdateIntervalSeconds());\n+        this.values = new long[this.timeSpanInSeconds / metricRegistry.getRateCounterUpdateIntervalSeconds() + 1];\n+\n+    }\n+\n+    /**\n+     * Reports the 1 minute rate for the metric.\n+     * @return the rate\n+     */\n+    @Override\n+    public Double getValue() {\n+        return currentRate;\n+    }\n+\n+    public void inc(long n) {\n+        counter.inc(n);\n+    }\n+\n+    /**\n+     * Updates the rate in a background thread by a StormMetricRegistry at a fixed frequency.\n+     */\n+    void update() {\n+        time = (time + 1) % values.length;\n+        values[time] = counter.getCount();\n+        currentRate =  ((double) (values[time] - values[(time + 1) % values.length]) / timeSpanInSeconds);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63d6d8e414758f8f667999e1b83db1323b0f3b47"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxOTMyMDE4", "url": "https://github.com/apache/storm/pull/3350#pullrequestreview-551932018", "createdAt": "2020-12-14T22:04:47Z", "commit": {"oid": "63d6d8e414758f8f667999e1b83db1323b0f3b47"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMjowNDo0N1rOIFs4HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMjowNTo0MFrOIFs7tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjg0OTA1Mw==", "bodyText": "I am having difficulties understanding this. Can you please elaborate?  What does timeSpanInSeconds  and this equation mean? Thanks", "url": "https://github.com/apache/storm/pull/3350#discussion_r542849053", "createdAt": "2020-12-14T22:04:47Z", "author": {"login": "Ethanlm"}, "path": "storm-client/src/jvm/org/apache/storm/metrics2/RateCounter.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.  The ASF licenses this file to you under the Apache License, Version\n+ * 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n+ * and limitations under the License.\n+ */\n+\n+package org.apache.storm.metrics2;\n+\n+import com.codahale.metrics.Counter;\n+import com.codahale.metrics.Gauge;\n+\n+/**\n+ * A Counter metric that also implements a Gauge to report a 1 minute rate.  This class was added as a compromise to\n+ * using a Meter, which has a much larger performance impact.\n+ */\n+public class RateCounter implements Gauge<Double> {\n+    private Counter counter;\n+    private double currentRate = 0;\n+    private int time = 0;\n+    private final long[] values;\n+    private final int timeSpanInSeconds;\n+\n+    RateCounter(StormMetricRegistry metricRegistry, String metricName, String topologyId,\n+                String componentId, int taskId, int workerPort, String streamId) {\n+        counter = metricRegistry.counter(metricName, topologyId, componentId,\n+                taskId, workerPort, streamId);\n+        metricRegistry.gauge(metricName + \".m1_rate\", this, topologyId, componentId, streamId,\n+                taskId, workerPort);\n+        this.timeSpanInSeconds = Math.max(60 - (60 % metricRegistry.getRateCounterUpdateIntervalSeconds()),\n+                metricRegistry.getRateCounterUpdateIntervalSeconds());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63d6d8e414758f8f667999e1b83db1323b0f3b47"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjg0OTk3NA==", "bodyText": "The calculation in the update() method looks to me is a per second rate, instead of 1 minute rate. Am I misunderstanding?", "url": "https://github.com/apache/storm/pull/3350#discussion_r542849974", "createdAt": "2020-12-14T22:05:40Z", "author": {"login": "Ethanlm"}, "path": "storm-client/src/jvm/org/apache/storm/metrics2/RateCounter.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.  The ASF licenses this file to you under the Apache License, Version\n+ * 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n+ * and limitations under the License.\n+ */\n+\n+package org.apache.storm.metrics2;\n+\n+import com.codahale.metrics.Counter;\n+import com.codahale.metrics.Gauge;\n+\n+/**\n+ * A Counter metric that also implements a Gauge to report a 1 minute rate.  This class was added as a compromise to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63d6d8e414758f8f667999e1b83db1323b0f3b47"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4MjQxNDg0", "url": "https://github.com/apache/storm/pull/3350#pullrequestreview-558241484", "createdAt": "2020-12-23T21:44:42Z", "commit": {"oid": "a86fe9feeb936fb48d769bf972afe6b5280984c4"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QyMTo0NDo0MlrOIK3efw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QyMTo0NzowMlrOIK3lOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI2NTU5OQ==", "bodyText": "m1_rate needs to change", "url": "https://github.com/apache/storm/pull/3350#discussion_r548265599", "createdAt": "2020-12-23T21:44:42Z", "author": {"login": "Ethanlm"}, "path": "storm-client/src/jvm/org/apache/storm/metrics2/RateCounter.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.  The ASF licenses this file to you under the Apache License, Version\n+ * 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n+ * and limitations under the License.\n+ */\n+\n+package org.apache.storm.metrics2;\n+\n+import com.codahale.metrics.Counter;\n+import com.codahale.metrics.Gauge;\n+\n+/**\n+ * A Counter metric that also implements a Gauge to report the average rate of events per second over 1 minute.  This class\n+ * was added as a compromise to using a Meter, which has a much larger performance impact.\n+ */\n+public class RateCounter implements Gauge<Double> {\n+    private Counter counter;\n+    private double currentRate = 0;\n+    private int time = 0;\n+    private final long[] values;\n+    private final int timeSpanInSeconds;\n+\n+    RateCounter(StormMetricRegistry metricRegistry, String metricName, String topologyId,\n+                String componentId, int taskId, int workerPort, String streamId) {\n+        counter = metricRegistry.counter(metricName, topologyId, componentId,\n+                taskId, workerPort, streamId);\n+        metricRegistry.gauge(metricName + \".m1_rate\", this, topologyId, componentId, streamId,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a86fe9feeb936fb48d769bf972afe6b5280984c4"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI2NjE2NA==", "bodyText": "It is not always event per second over 1 minute. It depends on what the value of timeSpanInSeconds is", "url": "https://github.com/apache/storm/pull/3350#discussion_r548266164", "createdAt": "2020-12-23T21:45:24Z", "author": {"login": "Ethanlm"}, "path": "storm-client/src/jvm/org/apache/storm/metrics2/RateCounter.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.  The ASF licenses this file to you under the Apache License, Version\n+ * 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n+ * and limitations under the License.\n+ */\n+\n+package org.apache.storm.metrics2;\n+\n+import com.codahale.metrics.Counter;\n+import com.codahale.metrics.Gauge;\n+\n+/**\n+ * A Counter metric that also implements a Gauge to report the average rate of events per second over 1 minute.  This class", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a86fe9feeb936fb48d769bf972afe6b5280984c4"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI2NzMyMA==", "bodyText": "nit: this newline can be removed", "url": "https://github.com/apache/storm/pull/3350#discussion_r548267320", "createdAt": "2020-12-23T21:47:02Z", "author": {"login": "Ethanlm"}, "path": "storm-client/src/jvm/org/apache/storm/metrics2/StormMetricRegistry.java", "diffHunk": "@@ -369,6 +398,7 @@ private String dotToUnderScore(String str) {\n         return str.replace('.', '_');\n     }\n \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a86fe9feeb936fb48d769bf972afe6b5280984c4"}, "originalPosition": 71}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYyMDEwNjg3", "url": "https://github.com/apache/storm/pull/3350#pullrequestreview-562010687", "createdAt": "2021-01-05T18:01:17Z", "commit": {"oid": "a86fe9feeb936fb48d769bf972afe6b5280984c4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a86fe9feeb936fb48d769bf972afe6b5280984c4", "author": {"user": null}, "url": "https://github.com/apache/storm/commit/a86fe9feeb936fb48d769bf972afe6b5280984c4", "committedDate": "2020-12-21T19:33:40Z", "message": "STORM-3714 update rate description"}, "afterCommit": {"oid": "ec4e2690dafd908d15dbd36cb241715fe53c2e08", "author": {"user": null}, "url": "https://github.com/apache/storm/commit/ec4e2690dafd908d15dbd36cb241715fe53c2e08", "committedDate": "2021-01-05T19:20:12Z", "message": "STORM-3714 add rate tracking to TaskMetrics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb87fde7a219a1eed93bc681da5e60b4360e42cc", "author": {"user": null}, "url": "https://github.com/apache/storm/commit/fb87fde7a219a1eed93bc681da5e60b4360e42cc", "committedDate": "2021-01-05T19:32:00Z", "message": "STORM-3714 add rate tracking to TaskMetrics"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ec4e2690dafd908d15dbd36cb241715fe53c2e08", "author": {"user": null}, "url": "https://github.com/apache/storm/commit/ec4e2690dafd908d15dbd36cb241715fe53c2e08", "committedDate": "2021-01-05T19:20:12Z", "message": "STORM-3714 add rate tracking to TaskMetrics"}, "afterCommit": {"oid": "fb87fde7a219a1eed93bc681da5e60b4360e42cc", "author": {"user": null}, "url": "https://github.com/apache/storm/commit/fb87fde7a219a1eed93bc681da5e60b4360e42cc", "committedDate": "2021-01-05T19:32:00Z", "message": "STORM-3714 add rate tracking to TaskMetrics"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYyMDkxMDM0", "url": "https://github.com/apache/storm/pull/3350#pullrequestreview-562091034", "createdAt": "2021-01-05T20:00:49Z", "commit": {"oid": "fb87fde7a219a1eed93bc681da5e60b4360e42cc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4951, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}