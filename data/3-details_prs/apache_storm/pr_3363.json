{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxOTc2Njk5", "number": 3363, "title": "STORM-3724 use blobstore modtime to prevent querying each remote file on update", "bodyText": "What is the purpose of the change\nReduce the impact of listing files on a Hadoop name node by checking a single timestamp first when updating blobstores.  The Hadoop blobstore will update the modTime on the base blobstore directory anytime a blob is updated.  Supervisors will fetch that timestamp once during AsyncLocalizer updateBlobs().  For each local blob, if the last check matches this modTime, they will not query the remote Hadoop blob.  This reduces polling on the namenode.\nHow was the change tested\nRan code with debug logs on internal dev clusters with Hadoop and ran blobstore related integration tests with topologies.  Ran storm-client/server/hdfs-blobstore unit tests.  Ran a word count topology on a local cluster setup for 15 minutes.", "createdAt": "2020-12-17T16:22:54Z", "url": "https://github.com/apache/storm/pull/3363", "merged": true, "mergeCommit": {"oid": "af0b1fd873a4c28253811d9bc27e32c4279daddf"}, "closed": true, "closedAt": "2021-01-14T15:15:13Z", "author": {"login": "agresch"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdm0zMIAH2gAyNTQxOTc2Njk5OjA0ZmE1NDJmZTkzZGU5NWFiY2Q2NzMzNmJhYTJhYWI3ODgwYjU5Yzg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdv1JkpAFqTU2NzU2MzUwOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "04fa542fe93de95abcd67336baa2aab7880b59c8", "author": {"user": null}, "url": "https://github.com/apache/storm/commit/04fa542fe93de95abcd67336baa2aab7880b59c8", "committedDate": "2020-12-16T20:17:20Z", "message": "STORM-3724 refactory LocallyCachedBlob update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a03635bfb73c1bb31fc6d7164413dd3a6a053d63", "author": {"user": null}, "url": "https://github.com/apache/storm/commit/a03635bfb73c1bb31fc6d7164413dd3a6a053d63", "committedDate": "2020-12-16T21:21:34Z", "message": "STORM-3724 use blobstore modtime to prevent querying each blob remote file on update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2545a9c4032da4b0d13956ff565df2de0523402", "author": {"user": null}, "url": "https://github.com/apache/storm/commit/c2545a9c4032da4b0d13956ff565df2de0523402", "committedDate": "2020-12-16T22:19:43Z", "message": "STORM-3724 Nimbus periodically ensures blobstore modTime is up to date"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0ODAzMzQw", "url": "https://github.com/apache/storm/pull/3363#pullrequestreview-554803340", "createdAt": "2020-12-17T17:02:10Z", "commit": {"oid": "c2545a9c4032da4b0d13956ff565df2de0523402"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2NTcyNzU4", "url": "https://github.com/apache/storm/pull/3363#pullrequestreview-556572758", "createdAt": "2020-12-21T18:14:57Z", "commit": {"oid": "c2545a9c4032da4b0d13956ff565df2de0523402"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxODoxNDo1N1rOIJhb3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxODoxNDo1N1rOIJhb3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg1NTkwMQ==", "bodyText": "For unsupported, the remoteBlobstoreModTime will be returned as -1. Does that need a special case processing here or line 337 ?", "url": "https://github.com/apache/storm/pull/3363#discussion_r546855901", "createdAt": "2020-12-21T18:14:57Z", "author": {"login": "bipinprasad"}, "path": "storm-server/src/main/java/org/apache/storm/localizer/LocallyCachedBlob.java", "diffHunk": "@@ -295,6 +301,90 @@ public String getKey() {\n \n     public abstract boolean isFullyDownloaded();\n \n+    /**\n+     * Checks to see if the local blob requires update with respect to a remote blob.\n+     *\n+     * @param blobStore the client blobstore\n+     * @param remoteBlobstoreModTime last modification time of remote blobstore\n+     * @return true of the local blob requires update, false otherwise.\n+     *\n+     * @throws KeyNotFoundException if the remote blob is missing\n+     * @throws AuthorizationException if authorization is failed\n+     */\n+    boolean requiresUpdate(ClientBlobStore blobStore, long remoteBlobstoreModTime) throws KeyNotFoundException, AuthorizationException {\n+        if (!this.isUsed()) {\n+            return false;\n+        }\n+\n+        if (!this.isFullyDownloaded()) {\n+            return true;\n+        }\n+\n+        // If we are already up to date with respect to the remote blob store, don't query\n+        // the remote blobstore for the remote file.  This reduces Hadoop namenode impact of\n+        // 100's of supervisors querying multiple blobs.\n+        if (remoteBlobstoreModTime > 0 && this.updatedModTime == remoteBlobstoreModTime) {\n+            LOG.debug(\"{} is up to date, blob updatedModTime matches remote timestamp {}\", this, remoteBlobstoreModTime);\n+            return false;\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2545a9c4032da4b0d13956ff565df2de0523402"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4OTM1NTcw", "url": "https://github.com/apache/storm/pull/3363#pullrequestreview-558935570", "createdAt": "2020-12-27T15:06:55Z", "commit": {"oid": "c2545a9c4032da4b0d13956ff565df2de0523402"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QxNTowNjo1NlrOILr3Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwNzo1NjoxMFrOILzlqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTEyMzkzNA==", "bodyText": "This looks a little weird on how it switches between integer and long. It can be just integer.\n\n  \n    \n      storm/storm-server/src/main/java/org/apache/storm/DaemonConfig.java\n    \n    \n        Lines 769 to 770\n      in\n      6e37072\n    \n    \n    \n    \n\n        \n          \n           @IsInteger \n        \n\n        \n          \n           public static final String SUPERVISOR_LOCALIZER_UPDATE_BLOB_INTERVAL_SECS = \"supervisor.localizer.update.blob.interval.secs\";", "url": "https://github.com/apache/storm/pull/3363#discussion_r549123934", "createdAt": "2020-12-27T15:06:56Z", "author": {"login": "Ethanlm"}, "path": "storm-server/src/main/java/org/apache/storm/utils/ServerConfigUtils.java", "diffHunk": "@@ -158,4 +158,9 @@ public LocalState supervisorStateImpl(Map<String, Object> conf) throws IOExcepti\n     public LocalState nimbusTopoHistoryStateImpl(Map<String, Object> conf) throws IOException {\n         return new LocalState((masterLocalDir(conf) + FILE_SEPARATOR + \"history\"), true);\n     }\n+\n+    public static long getLocalizerUpdateBlobInterval(Map<String, Object> conf) {\n+        return ObjectReader.getInt(conf.get(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2545a9c4032da4b0d13956ff565df2de0523402"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTEyODE4OA==", "bodyText": "This looks at the mod time of the bucketDir.  But the blob files can be updated.\nhttps://git.vzbuilders.com/storm/storm/blob/master/docs/distcache-blobstore.md#updating-a-cached-file\nWill this work properly in this case? Or does the code change at Nimbus.java serve the purpose?", "url": "https://github.com/apache/storm/pull/3363#discussion_r549128188", "createdAt": "2020-12-27T15:47:56Z", "author": {"login": "Ethanlm"}, "path": "external/storm-hdfs-blobstore/src/main/java/org/apache/storm/hdfs/blobstore/HdfsBlobStoreImpl.java", "diffHunk": "@@ -312,4 +313,54 @@ public void shutdown() {\n             timer.cancel();\n         }\n     }\n+\n+    /**\n+     * Get the last modification time of any blob.\n+     *\n+     * @return the last modification time of blobs within the blobstore.\n+     * @throws IOException on any error\n+     */\n+    public long getLastModTime() throws IOException {\n+        long modtime =  fileSystem.getFileStatus(fullPath).getModificationTime();\n+        return modtime;\n+    }\n+\n+    /**\n+     * Updates the modification time of the blobstore to the current time.\n+     *\n+     * @throws IOException on any error\n+     */\n+    public void updateLastModTime() throws IOException {\n+        long timestamp = Time.currentTimeMillis();\n+        fileSystem.setTimes(fullPath, timestamp, timestamp);\n+        LOG.debug(\"Updated blobstore modtime of {} to {}\", fullPath, timestamp);\n+    }\n+\n+    /**\n+     * Validates that the modification time of the blobstore is up to date with the current existing blobs.\n+     *\n+     * @throws IOException on any error\n+     */\n+    public void validateModTime() throws IOException {\n+        int currentBucket = 0;\n+        long baseModTime = 0;\n+        while (currentBucket < BUCKETS) {\n+            String name = String.valueOf(currentBucket);\n+            Path bucketDir = new Path(fullPath, name);\n+\n+            // only consider bucket dirs that exist with files in them\n+            if (fileSystem.exists(bucketDir) && fileSystem.listStatus(bucketDir).length > 0) {\n+                long modtime = fileSystem.getFileStatus(bucketDir).getModificationTime();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2545a9c4032da4b0d13956ff565df2de0523402"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI1MDM4NQ==", "bodyText": "nit: space", "url": "https://github.com/apache/storm/pull/3363#discussion_r549250385", "createdAt": "2020-12-28T07:55:56Z", "author": {"login": "Ethanlm"}, "path": "external/storm-hdfs-blobstore/src/main/java/org/apache/storm/hdfs/blobstore/HdfsBlobStoreImpl.java", "diffHunk": "@@ -312,4 +313,54 @@ public void shutdown() {\n             timer.cancel();\n         }\n     }\n+\n+    /**\n+     * Get the last modification time of any blob.\n+     *\n+     * @return the last modification time of blobs within the blobstore.\n+     * @throws IOException on any error\n+     */\n+    public long getLastModTime() throws IOException {\n+        long modtime =  fileSystem.getFileStatus(fullPath).getModificationTime();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2545a9c4032da4b0d13956ff565df2de0523402"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI1MDQ3Mg==", "bodyText": "I am not very sure if changing the mtime of the blobstore directory is a good idea. It breaks the semantics of modification time of a directory.", "url": "https://github.com/apache/storm/pull/3363#discussion_r549250472", "createdAt": "2020-12-28T07:56:10Z", "author": {"login": "Ethanlm"}, "path": "external/storm-hdfs-blobstore/src/main/java/org/apache/storm/hdfs/blobstore/HdfsBlobStoreImpl.java", "diffHunk": "@@ -312,4 +313,54 @@ public void shutdown() {\n             timer.cancel();\n         }\n     }\n+\n+    /**\n+     * Get the last modification time of any blob.\n+     *\n+     * @return the last modification time of blobs within the blobstore.\n+     * @throws IOException on any error\n+     */\n+    public long getLastModTime() throws IOException {\n+        long modtime =  fileSystem.getFileStatus(fullPath).getModificationTime();\n+        return modtime;\n+    }\n+\n+    /**\n+     * Updates the modification time of the blobstore to the current time.\n+     *\n+     * @throws IOException on any error\n+     */\n+    public void updateLastModTime() throws IOException {\n+        long timestamp = Time.currentTimeMillis();\n+        fileSystem.setTimes(fullPath, timestamp, timestamp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2545a9c4032da4b0d13956ff565df2de0523402"}, "originalPosition": 31}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bbb920cbceb7f67c67706af489541370c01eda9b", "author": {"user": null}, "url": "https://github.com/apache/storm/commit/bbb920cbceb7f67c67706af489541370c01eda9b", "committedDate": "2021-01-07T21:54:29Z", "message": "STORM-3724 use file to store blobstore modification time"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY1NDc1NTkx", "url": "https://github.com/apache/storm/pull/3363#pullrequestreview-565475591", "createdAt": "2021-01-11T15:42:10Z", "commit": {"oid": "bbb920cbceb7f67c67706af489541370c01eda9b"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxNTo0MjoxMVrOIRa2Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxNTo1MzoxNlrOIRbeNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTEzNjYxNQ==", "bodyText": "Nit: This should be getLastModTime", "url": "https://github.com/apache/storm/pull/3363#discussion_r555136615", "createdAt": "2021-01-11T15:42:11Z", "author": {"login": "Ethanlm"}, "path": "external/storm-hdfs-blobstore/src/main/java/org/apache/storm/hdfs/blobstore/HdfsBlobStore.java", "diffHunk": "@@ -404,4 +404,18 @@ public void writeMetadata(String key, SettableBlobMeta meta)\n     public void fullCleanup(long age) throws IOException {\n         hbs.fullCleanup(age);\n     }\n+\n+    public long getLastModeTime() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbb920cbceb7f67c67706af489541370c01eda9b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTE0NjgwNw==", "bodyText": "Do you mean the modification timestamp of bucketDir?\nIts modification time will not change if the content of a blob in the directory changes.  If a blob is added or deleted in the directory, the modification time of the directory (bucketDir) will change. But here we ignore any directory that has none blobs, which means the following case is not captured: \"all blobs in the directory are deleted\"", "url": "https://github.com/apache/storm/pull/3363#discussion_r555146807", "createdAt": "2021-01-11T15:53:16Z", "author": {"login": "Ethanlm"}, "path": "external/storm-hdfs-blobstore/src/main/java/org/apache/storm/hdfs/blobstore/HdfsBlobStoreImpl.java", "diffHunk": "@@ -312,4 +313,54 @@ public void shutdown() {\n             timer.cancel();\n         }\n     }\n+\n+    /**\n+     * Get the last modification time of any blob.\n+     *\n+     * @return the last modification time of blobs within the blobstore.\n+     * @throws IOException on any error\n+     */\n+    public long getLastModTime() throws IOException {\n+        long modtime =  fileSystem.getFileStatus(fullPath).getModificationTime();\n+        return modtime;\n+    }\n+\n+    /**\n+     * Updates the modification time of the blobstore to the current time.\n+     *\n+     * @throws IOException on any error\n+     */\n+    public void updateLastModTime() throws IOException {\n+        long timestamp = Time.currentTimeMillis();\n+        fileSystem.setTimes(fullPath, timestamp, timestamp);\n+        LOG.debug(\"Updated blobstore modtime of {} to {}\", fullPath, timestamp);\n+    }\n+\n+    /**\n+     * Validates that the modification time of the blobstore is up to date with the current existing blobs.\n+     *\n+     * @throws IOException on any error\n+     */\n+    public void validateModTime() throws IOException {\n+        int currentBucket = 0;\n+        long baseModTime = 0;\n+        while (currentBucket < BUCKETS) {\n+            String name = String.valueOf(currentBucket);\n+            Path bucketDir = new Path(fullPath, name);\n+\n+            // only consider bucket dirs that exist with files in them\n+            if (fileSystem.exists(bucketDir) && fileSystem.listStatus(bucketDir).length > 0) {\n+                long modtime = fileSystem.getFileStatus(bucketDir).getModificationTime();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTEyODE4OA=="}, "originalCommit": {"oid": "c2545a9c4032da4b0d13956ff565df2de0523402"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY1NjUxNDg4", "url": "https://github.com/apache/storm/pull/3363#pullrequestreview-565651488", "createdAt": "2021-01-11T19:01:13Z", "commit": {"oid": "bbb920cbceb7f67c67706af489541370c01eda9b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxOTowMToxM1rOIRjGKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxOTowMToxM1rOIRjGKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTI3MTcyMQ==", "bodyText": "What will happen if blobStore.setBlobMeta succeeds then blobStore.updateLastModTime() fails? Or nimbus crashed before blobStore.updateLastModTime() can run?\nLooks like supervisors will not be notified for this blob update. We should update the timestamp before doing the actual operation.\nAlso, do we need to update the timestamp in updateBlobReplication(String key, int replication)?", "url": "https://github.com/apache/storm/pull/3363#discussion_r555271721", "createdAt": "2021-01-11T19:01:13Z", "author": {"login": "Ethanlm"}, "path": "storm-server/src/main/java/org/apache/storm/daemon/nimbus/Nimbus.java", "diffHunk": "@@ -3815,6 +3828,7 @@ public void setBlobMeta(String key, SettableBlobMeta meta)\n         throws AuthorizationException, KeyNotFoundException, TException {\n         try {\n             blobStore.setBlobMeta(key, meta, getSubject());\n+            blobStore.updateLastModTime();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbb920cbceb7f67c67706af489541370c01eda9b"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY1NjYxMjA5", "url": "https://github.com/apache/storm/pull/3363#pullrequestreview-565661209", "createdAt": "2021-01-11T19:14:35Z", "commit": {"oid": "bbb920cbceb7f67c67706af489541370c01eda9b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxOToxNDozNVrOIRjimg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxOToxNDozNVrOIRjimg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTI3OTAwMg==", "bodyText": "What happens if this method is invoked in two threads in the same time? Do we need synchronization here?", "url": "https://github.com/apache/storm/pull/3363#discussion_r555279002", "createdAt": "2021-01-11T19:14:35Z", "author": {"login": "Ethanlm"}, "path": "external/storm-hdfs-blobstore/src/main/java/org/apache/storm/hdfs/blobstore/HdfsBlobStoreImpl.java", "diffHunk": "@@ -312,4 +321,70 @@ public void shutdown() {\n             timer.cancel();\n         }\n     }\n+\n+    /**\n+     * Get the last modification time of any blob.\n+     *\n+     * @return the last modification time of blobs within the blobstore.\n+     * @throws IOException on any error\n+     */\n+    public long getLastModTime() throws IOException {\n+        Path modTimeFile = new Path(fullPath, BLOBSTORE_MOD_TIME_FILE);\n+        if (!fileSystem.exists(modTimeFile)) {\n+            return -1L;\n+        }\n+        FSDataInputStream inputStream = fileSystem.open(modTimeFile);\n+        String timestamp = IOUtils.toString(inputStream, \"UTF-8\");\n+        inputStream.close();\n+        try {\n+            long modTime = Long.parseLong(timestamp);\n+            return modTime;\n+        } catch (NumberFormatException e) {\n+            LOG.error(\"Invalid blobstore modtime {} in file {}\", timestamp, modTimeFile);\n+            return -1L;\n+        }\n+    }\n+\n+    /**\n+     * Updates the modification time of the blobstore to the current time.\n+     *\n+     * @throws IOException on any error\n+     */\n+    public void updateLastModTime() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbb920cbceb7f67c67706af489541370c01eda9b"}, "originalPosition": 72}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0eca24e59a1e3aee1ea6ba56bd223513953c037d", "author": {"user": null}, "url": "https://github.com/apache/storm/commit/0eca24e59a1e3aee1ea6ba56bd223513953c037d", "committedDate": "2021-01-11T22:35:55Z", "message": "STORM-3724 rename methods to reflect update times to existing blobs rather than overall modification times.  Add synchronization to blob update time."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY2MzYyNDU4", "url": "https://github.com/apache/storm/pull/3363#pullrequestreview-566362458", "createdAt": "2021-01-12T15:04:48Z", "commit": {"oid": "0eca24e59a1e3aee1ea6ba56bd223513953c037d"}, "state": "COMMENTED", "comments": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxNTowNDo0OFrOISFxjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxNToxODowNlrOISGZGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTgzOTg4Ng==", "bodyText": "nit: can be changed to updateTimeFile", "url": "https://github.com/apache/storm/pull/3363#discussion_r555839886", "createdAt": "2021-01-12T15:04:48Z", "author": {"login": "Ethanlm"}, "path": "external/storm-hdfs-blobstore/src/main/java/org/apache/storm/hdfs/blobstore/HdfsBlobStoreImpl.java", "diffHunk": "@@ -312,4 +321,70 @@ public void shutdown() {\n             timer.cancel();\n         }\n     }\n+\n+    /**\n+     * Get the last update time of any blob.\n+     *\n+     * @return the last updated time of blobs within the blobstore.\n+     * @throws IOException on any error\n+     */\n+    public long getLastBlobUpdateTime() throws IOException {\n+        Path modTimeFile = new Path(fullPath, BLOBSTORE_UPDATE_TIME_FILE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0eca24e59a1e3aee1ea6ba56bd223513953c037d"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTg0MDA2Mg==", "bodyText": "nit: can be changed to updateTime", "url": "https://github.com/apache/storm/pull/3363#discussion_r555840062", "createdAt": "2021-01-12T15:05:03Z", "author": {"login": "Ethanlm"}, "path": "external/storm-hdfs-blobstore/src/main/java/org/apache/storm/hdfs/blobstore/HdfsBlobStoreImpl.java", "diffHunk": "@@ -312,4 +321,70 @@ public void shutdown() {\n             timer.cancel();\n         }\n     }\n+\n+    /**\n+     * Get the last update time of any blob.\n+     *\n+     * @return the last updated time of blobs within the blobstore.\n+     * @throws IOException on any error\n+     */\n+    public long getLastBlobUpdateTime() throws IOException {\n+        Path modTimeFile = new Path(fullPath, BLOBSTORE_UPDATE_TIME_FILE);\n+        if (!fileSystem.exists(modTimeFile)) {\n+            return -1L;\n+        }\n+        FSDataInputStream inputStream = fileSystem.open(modTimeFile);\n+        String timestamp = IOUtils.toString(inputStream, \"UTF-8\");\n+        inputStream.close();\n+        try {\n+            long modTime = Long.parseLong(timestamp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0eca24e59a1e3aee1ea6ba56bd223513953c037d"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTg0MDIzOA==", "bodyText": "nit: can be changed to update time", "url": "https://github.com/apache/storm/pull/3363#discussion_r555840238", "createdAt": "2021-01-12T15:05:16Z", "author": {"login": "Ethanlm"}, "path": "external/storm-hdfs-blobstore/src/main/java/org/apache/storm/hdfs/blobstore/HdfsBlobStoreImpl.java", "diffHunk": "@@ -312,4 +321,70 @@ public void shutdown() {\n             timer.cancel();\n         }\n     }\n+\n+    /**\n+     * Get the last update time of any blob.\n+     *\n+     * @return the last updated time of blobs within the blobstore.\n+     * @throws IOException on any error\n+     */\n+    public long getLastBlobUpdateTime() throws IOException {\n+        Path modTimeFile = new Path(fullPath, BLOBSTORE_UPDATE_TIME_FILE);\n+        if (!fileSystem.exists(modTimeFile)) {\n+            return -1L;\n+        }\n+        FSDataInputStream inputStream = fileSystem.open(modTimeFile);\n+        String timestamp = IOUtils.toString(inputStream, \"UTF-8\");\n+        inputStream.close();\n+        try {\n+            long modTime = Long.parseLong(timestamp);\n+            return modTime;\n+        } catch (NumberFormatException e) {\n+            LOG.error(\"Invalid blobstore modtime {} in file {}\", timestamp, modTimeFile);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0eca24e59a1e3aee1ea6ba56bd223513953c037d"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTg0MDM3Nw==", "bodyText": "nit: can be changed to updateTimeFile", "url": "https://github.com/apache/storm/pull/3363#discussion_r555840377", "createdAt": "2021-01-12T15:05:28Z", "author": {"login": "Ethanlm"}, "path": "external/storm-hdfs-blobstore/src/main/java/org/apache/storm/hdfs/blobstore/HdfsBlobStoreImpl.java", "diffHunk": "@@ -312,4 +321,70 @@ public void shutdown() {\n             timer.cancel();\n         }\n     }\n+\n+    /**\n+     * Get the last update time of any blob.\n+     *\n+     * @return the last updated time of blobs within the blobstore.\n+     * @throws IOException on any error\n+     */\n+    public long getLastBlobUpdateTime() throws IOException {\n+        Path modTimeFile = new Path(fullPath, BLOBSTORE_UPDATE_TIME_FILE);\n+        if (!fileSystem.exists(modTimeFile)) {\n+            return -1L;\n+        }\n+        FSDataInputStream inputStream = fileSystem.open(modTimeFile);\n+        String timestamp = IOUtils.toString(inputStream, \"UTF-8\");\n+        inputStream.close();\n+        try {\n+            long modTime = Long.parseLong(timestamp);\n+            return modTime;\n+        } catch (NumberFormatException e) {\n+            LOG.error(\"Invalid blobstore modtime {} in file {}\", timestamp, modTimeFile);\n+            return -1L;\n+        }\n+    }\n+\n+    /**\n+     * Updates the last updated time of existing blobstores to the current time.\n+     *\n+     * @throws IOException on any error\n+     */\n+    public synchronized void updateLastBlobUpdateTime() throws IOException {\n+        Long timestamp = Time.currentTimeMillis();\n+        Path modTimeFile = new Path(fullPath, BLOBSTORE_UPDATE_TIME_FILE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0eca24e59a1e3aee1ea6ba56bd223513953c037d"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTg0MTg0MA==", "bodyText": "nit: last updated", "url": "https://github.com/apache/storm/pull/3363#discussion_r555841840", "createdAt": "2021-01-12T15:07:21Z", "author": {"login": "Ethanlm"}, "path": "storm-client/src/jvm/org/apache/storm/blobstore/ClientBlobStore.java", "diffHunk": "@@ -182,5 +183,12 @@ public final void setBlobMeta(String key, SettableBlobMeta meta) throws Authoriz\n         void run(ClientBlobStore blobStore) throws Exception;\n     }\n \n-\n+    /**\n+     * Client facing API to get the last update time of existing blobs in a blobstore.  This only required for use on\n+     * supervisors.\n+     *\n+     * @return the timestamp of when the blobstore was last modified.  -1L if the blobstore", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0eca24e59a1e3aee1ea6ba56bd223513953c037d"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTg0MjI0Mw==", "bodyText": "nit: This is", "url": "https://github.com/apache/storm/pull/3363#discussion_r555842243", "createdAt": "2021-01-12T15:07:56Z", "author": {"login": "Ethanlm"}, "path": "storm-client/src/jvm/org/apache/storm/blobstore/ClientBlobStore.java", "diffHunk": "@@ -182,5 +183,12 @@ public final void setBlobMeta(String key, SettableBlobMeta meta) throws Authoriz\n         void run(ClientBlobStore blobStore) throws Exception;\n     }\n \n-\n+    /**\n+     * Client facing API to get the last update time of existing blobs in a blobstore.  This only required for use on", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0eca24e59a1e3aee1ea6ba56bd223513953c037d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTg0MzczNg==", "bodyText": "nit: modtime  can be changed to \"update time\"", "url": "https://github.com/apache/storm/pull/3363#discussion_r555843736", "createdAt": "2021-01-12T15:10:02Z", "author": {"login": "Ethanlm"}, "path": "storm-server/src/main/java/org/apache/storm/daemon/nimbus/Nimbus.java", "diffHunk": "@@ -1427,6 +1427,18 @@ public void launchServer() throws Exception {\n                     }\n                 });\n \n+            // Periodically make sure the blobstore modtime is up to date.  This could have failed if Nimbus encountered", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0eca24e59a1e3aee1ea6ba56bd223513953c037d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTg0NDIyNQ==", "bodyText": "nit: two\"mod time\" can be changed to \"update time\"", "url": "https://github.com/apache/storm/pull/3363#discussion_r555844225", "createdAt": "2021-01-12T15:10:41Z", "author": {"login": "Ethanlm"}, "path": "storm-server/src/main/java/org/apache/storm/daemon/nimbus/Nimbus.java", "diffHunk": "@@ -1427,6 +1427,18 @@ public void launchServer() throws Exception {\n                     }\n                 });\n \n+            // Periodically make sure the blobstore modtime is up to date.  This could have failed if Nimbus encountered\n+            // an exception updating the mod time, or due to bugs causing a missed update of the blobstore mod time on a blob", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0eca24e59a1e3aee1ea6ba56bd223513953c037d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTg0NDg2MA==", "bodyText": "Do we need this on updateBlobReplication method too?", "url": "https://github.com/apache/storm/pull/3363#discussion_r555844860", "createdAt": "2021-01-12T15:11:31Z", "author": {"login": "Ethanlm"}, "path": "storm-server/src/main/java/org/apache/storm/daemon/nimbus/Nimbus.java", "diffHunk": "@@ -3815,6 +3828,7 @@ public void setBlobMeta(String key, SettableBlobMeta meta)\n         throws AuthorizationException, KeyNotFoundException, TException {\n         try {\n             blobStore.setBlobMeta(key, meta, getSubject());\n+            blobStore.updateLastBlobUpdateTime();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0eca24e59a1e3aee1ea6ba56bd223513953c037d"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTg0NTM3Mg==", "bodyText": "nit: can change modtime to \"update time\"", "url": "https://github.com/apache/storm/pull/3363#discussion_r555845372", "createdAt": "2021-01-12T15:12:11Z", "author": {"login": "Ethanlm"}, "path": "storm-server/src/main/java/org/apache/storm/localizer/AsyncLocalizer.java", "diffHunk": "@@ -312,6 +289,17 @@ private LocalizedResource getUserFile(String user, String key) {\n         return CompletableFuture.allOf(all);\n     }\n \n+    private long getRemoteBlobstoreUpdateTime() {\n+        try (ClientBlobStore blobStore = getClientBlobStore()) {\n+            try {\n+                return blobStore.getRemoteBlobstoreUpdateTime();\n+            } catch (IOException e) {\n+                LOG.error(\"Failed to get remote blobstore modtime\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0eca24e59a1e3aee1ea6ba56bd223513953c037d"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTg0NjkxMQ==", "bodyText": "nit: updatedModTime can be changed to \"localUpdateTime\"", "url": "https://github.com/apache/storm/pull/3363#discussion_r555846911", "createdAt": "2021-01-12T15:14:12Z", "author": {"login": "Ethanlm"}, "path": "storm-server/src/main/java/org/apache/storm/localizer/LocallyCachedBlob.java", "diffHunk": "@@ -295,6 +301,90 @@ public String getKey() {\n \n     public abstract boolean isFullyDownloaded();\n \n+    /**\n+     * Checks to see if the local blob requires update with respect to a remote blob.\n+     *\n+     * @param blobStore the client blobstore\n+     * @param remoteBlobstoreUpdateTime last update time of remote blobstore\n+     * @return true of the local blob requires update, false otherwise.\n+     *\n+     * @throws KeyNotFoundException if the remote blob is missing\n+     * @throws AuthorizationException if authorization is failed\n+     */\n+    boolean requiresUpdate(ClientBlobStore blobStore, long remoteBlobstoreUpdateTime) throws KeyNotFoundException, AuthorizationException {\n+        if (!this.isUsed()) {\n+            return false;\n+        }\n+\n+        if (!this.isFullyDownloaded()) {\n+            return true;\n+        }\n+\n+        // If we are already up to date with respect to the remote blob store, don't query\n+        // the remote blobstore for the remote file.  This reduces Hadoop namenode impact of\n+        // 100's of supervisors querying multiple blobs.\n+        if (remoteBlobstoreUpdateTime > 0 && this.localUpdateTime == remoteBlobstoreUpdateTime) {\n+            LOG.debug(\"{} is up to date, blob updatedModTime matches remote timestamp {}\", this, remoteBlobstoreUpdateTime);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0eca24e59a1e3aee1ea6ba56bd223513953c037d"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTg0Nzc4Nw==", "bodyText": "nit: change be changed to remoteBlobstoreModTime to remoteBlobstoreUpdateTime", "url": "https://github.com/apache/storm/pull/3363#discussion_r555847787", "createdAt": "2021-01-12T15:15:18Z", "author": {"login": "Ethanlm"}, "path": "storm-server/src/main/java/org/apache/storm/localizer/AsyncLocalizer.java", "diffHunk": "@@ -261,6 +257,9 @@ private LocalizedResource getUserFile(String user, String key) {\n     }\n \n     private CompletableFuture<Void> downloadOrUpdate(Collection<? extends LocallyCachedBlob> blobs) {\n+\n+        final long remoteBlobstoreModTime = getRemoteBlobstoreUpdateTime();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0eca24e59a1e3aee1ea6ba56bd223513953c037d"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTg0ODAxMA==", "bodyText": "nit: can be changed to remoteBlobstoreUpdateTime", "url": "https://github.com/apache/storm/pull/3363#discussion_r555848010", "createdAt": "2021-01-12T15:15:35Z", "author": {"login": "Ethanlm"}, "path": "storm-server/src/main/java/org/apache/storm/localizer/AsyncLocalizer.java", "diffHunk": "@@ -271,29 +270,7 @@ private LocalizedResource getUserFile(String user, String key) {\n                     long failures = 0;\n                     while (!done) {\n                         try {\n-                            synchronized (blob) {\n-                                if (blob.isUsed()) {\n-                                    long localVersion = blob.getLocalVersion();\n-                                    long remoteVersion = blob.getRemoteVersion(blobStore);\n-                                    if (localVersion != remoteVersion || !blob.isFullyDownloaded()) {\n-                                        if (blob.isFullyDownloaded()) {\n-                                            //Avoid case of different blob version\n-                                            // when blob is not downloaded (first time download)\n-                                            numBlobUpdateVersionChanged.mark();\n-                                        }\n-                                        Timer.Context t = singleBlobLocalizationDuration.time();\n-                                        try {\n-                                            long newVersion = blob.fetchUnzipToTemp(blobStore);\n-                                            blob.informReferencesAndCommitNewVersion(newVersion);\n-                                            t.stop();\n-                                        } finally {\n-                                            blob.cleanupOrphanedData();\n-                                        }\n-                                    }\n-                                } else {\n-                                    LOG.debug(\"Skipping update of unused blob {}\", blob);\n-                                }\n-                            }\n+                            blob.update(blobStore, remoteBlobstoreModTime);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0eca24e59a1e3aee1ea6ba56bd223513953c037d"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTg0ODM4OA==", "bodyText": "nit: can be changed to remoteBlobstoreUpdateTime", "url": "https://github.com/apache/storm/pull/3363#discussion_r555848388", "createdAt": "2021-01-12T15:16:01Z", "author": {"login": "Ethanlm"}, "path": "storm-server/src/main/java/org/apache/storm/localizer/LocallyCachedBlob.java", "diffHunk": "@@ -295,6 +301,90 @@ public String getKey() {\n \n     public abstract boolean isFullyDownloaded();\n \n+    /**\n+     * Checks to see if the local blob requires update with respect to a remote blob.\n+     *\n+     * @param blobStore the client blobstore\n+     * @param remoteBlobstoreUpdateTime last update time of remote blobstore\n+     * @return true of the local blob requires update, false otherwise.\n+     *\n+     * @throws KeyNotFoundException if the remote blob is missing\n+     * @throws AuthorizationException if authorization is failed\n+     */\n+    boolean requiresUpdate(ClientBlobStore blobStore, long remoteBlobstoreUpdateTime) throws KeyNotFoundException, AuthorizationException {\n+        if (!this.isUsed()) {\n+            return false;\n+        }\n+\n+        if (!this.isFullyDownloaded()) {\n+            return true;\n+        }\n+\n+        // If we are already up to date with respect to the remote blob store, don't query\n+        // the remote blobstore for the remote file.  This reduces Hadoop namenode impact of\n+        // 100's of supervisors querying multiple blobs.\n+        if (remoteBlobstoreUpdateTime > 0 && this.localUpdateTime == remoteBlobstoreUpdateTime) {\n+            LOG.debug(\"{} is up to date, blob updatedModTime matches remote timestamp {}\", this, remoteBlobstoreUpdateTime);\n+            return false;\n+        }\n+\n+        long localVersion = this.getLocalVersion();\n+        long remoteVersion = this.getRemoteVersion(blobStore);\n+        if (localVersion != remoteVersion) {\n+            return true;\n+        } else {\n+            // track that we are now up to date with respect to last time the remote blobstore was updated\n+            this.localUpdateTime = remoteBlobstoreUpdateTime;\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Downloads a blob locally.\n+     *\n+     * @param blobStore the client blobstore\n+     * @param remoteBlobstoreModTime last modification time of remote blobstore\n+     *\n+     * @throws KeyNotFoundException if the remote blob is missing\n+     * @throws AuthorizationException if authorization is failed\n+     * @throws IOException on errors\n+     */\n+    private void download(ClientBlobStore blobStore, long remoteBlobstoreModTime)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0eca24e59a1e3aee1ea6ba56bd223513953c037d"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTg0ODY3NA==", "bodyText": "nit: can be changed to remoteBlobstoreUpdateTime", "url": "https://github.com/apache/storm/pull/3363#discussion_r555848674", "createdAt": "2021-01-12T15:16:23Z", "author": {"login": "Ethanlm"}, "path": "storm-server/src/main/java/org/apache/storm/localizer/LocallyCachedBlob.java", "diffHunk": "@@ -295,6 +301,90 @@ public String getKey() {\n \n     public abstract boolean isFullyDownloaded();\n \n+    /**\n+     * Checks to see if the local blob requires update with respect to a remote blob.\n+     *\n+     * @param blobStore the client blobstore\n+     * @param remoteBlobstoreUpdateTime last update time of remote blobstore\n+     * @return true of the local blob requires update, false otherwise.\n+     *\n+     * @throws KeyNotFoundException if the remote blob is missing\n+     * @throws AuthorizationException if authorization is failed\n+     */\n+    boolean requiresUpdate(ClientBlobStore blobStore, long remoteBlobstoreUpdateTime) throws KeyNotFoundException, AuthorizationException {\n+        if (!this.isUsed()) {\n+            return false;\n+        }\n+\n+        if (!this.isFullyDownloaded()) {\n+            return true;\n+        }\n+\n+        // If we are already up to date with respect to the remote blob store, don't query\n+        // the remote blobstore for the remote file.  This reduces Hadoop namenode impact of\n+        // 100's of supervisors querying multiple blobs.\n+        if (remoteBlobstoreUpdateTime > 0 && this.localUpdateTime == remoteBlobstoreUpdateTime) {\n+            LOG.debug(\"{} is up to date, blob updatedModTime matches remote timestamp {}\", this, remoteBlobstoreUpdateTime);\n+            return false;\n+        }\n+\n+        long localVersion = this.getLocalVersion();\n+        long remoteVersion = this.getRemoteVersion(blobStore);\n+        if (localVersion != remoteVersion) {\n+            return true;\n+        } else {\n+            // track that we are now up to date with respect to last time the remote blobstore was updated\n+            this.localUpdateTime = remoteBlobstoreUpdateTime;\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Downloads a blob locally.\n+     *\n+     * @param blobStore the client blobstore\n+     * @param remoteBlobstoreModTime last modification time of remote blobstore\n+     *\n+     * @throws KeyNotFoundException if the remote blob is missing\n+     * @throws AuthorizationException if authorization is failed\n+     * @throws IOException on errors\n+     */\n+    private void download(ClientBlobStore blobStore, long remoteBlobstoreModTime)\n+            throws AuthorizationException, IOException, KeyNotFoundException {\n+        if (this.isFullyDownloaded()) {\n+            numBlobUpdateVersionChanged.mark();\n+        }\n+        Timer.Context timer = singleBlobLocalizationDuration.time();\n+        try {\n+            long newVersion = this.fetchUnzipToTemp(blobStore);\n+            this.informReferencesAndCommitNewVersion(newVersion);\n+            this.localUpdateTime = remoteBlobstoreModTime;\n+            LOG.debug(\"local blob {} downloaded, in sync with remote blobstore to time {}\", this, remoteBlobstoreModTime);\n+        } finally {\n+            timer.stop();\n+            this.cleanupOrphanedData();\n+        }\n+    }\n+\n+    /**\n+     * Checks and downloads a blob locally as necessary.\n+     *\n+     * @param blobStore the client blobstore\n+     * @param remoteBlobstoreModTime last modification time of remote blobstore\n+     *\n+     * @throws KeyNotFoundException if the remote blob is missing\n+     * @throws AuthorizationException if authorization is failed\n+     * @throws IOException on errors\n+     */\n+    public void update(ClientBlobStore blobStore, long remoteBlobstoreModTime)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0eca24e59a1e3aee1ea6ba56bd223513953c037d"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTg0OTc1NA==", "bodyText": "nit: can change modtime to update time", "url": "https://github.com/apache/storm/pull/3363#discussion_r555849754", "createdAt": "2021-01-12T15:17:44Z", "author": {"login": "Ethanlm"}, "path": "storm-server/src/test/java/org/apache/storm/localizer/LocallyCachedBlobTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.  The ASF licenses this file to you under the Apache License, Version\n+ * 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n+ * and limitations under the License.\n+ */\n+\n+package org.apache.storm.localizer;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.storm.blobstore.ClientBlobStore;\n+import org.apache.storm.daemon.supervisor.AdvancedFSOps;\n+import org.apache.storm.daemon.supervisor.IAdvancedFSOps;\n+import org.apache.storm.generated.AuthorizationException;\n+import org.apache.storm.generated.KeyNotFoundException;\n+import org.apache.storm.generated.LocalAssignment;\n+import org.apache.storm.metric.StormMetricsRegistry;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+public class LocallyCachedBlobTest {\n+    private static ClientBlobStore blobStore = Mockito.mock(ClientBlobStore.class);\n+    private static PortAndAssignment pna = new PortAndAssignmentImpl(6077, new LocalAssignment());\n+    private static Map<String, Object> conf = new HashMap<>();\n+\n+    @Test\n+    public void testNotUsed() throws KeyNotFoundException, AuthorizationException {\n+        LocallyCachedBlob blob = new LocalizedResource(\"key\", Paths.get(\"/bogus\"), false,\n+                AdvancedFSOps.make(conf), conf, \"user1\", new StormMetricsRegistry());\n+        Assert.assertFalse(blob.isUsed());\n+        Assert.assertFalse(blob.requiresUpdate(blobStore, -1L));\n+    }\n+\n+    @Test\n+    public void testNotDownloaded() throws KeyNotFoundException, AuthorizationException {\n+        LocallyCachedBlob blob = new LocalizedResource(\"key\", Paths.get(\"/bogus\"), false,\n+                AdvancedFSOps.make(conf), conf, \"user1\", new StormMetricsRegistry());\n+        blob.addReference(pna, null);\n+        Assert.assertTrue(blob.isUsed());\n+        Assert.assertFalse(blob.isFullyDownloaded());\n+        Assert.assertTrue(blob.requiresUpdate(blobStore, -1L));\n+    }\n+\n+    @Test\n+    public void testOutOfDate() throws KeyNotFoundException, AuthorizationException {\n+        TestableBlob blob = new TestableBlob(\"key\", Paths.get(\"/bogus\"), false,\n+                AdvancedFSOps.make(conf), conf, \"user1\", new StormMetricsRegistry());\n+        blob.addReference(pna, null);\n+        Assert.assertTrue(blob.isUsed());\n+        Assert.assertTrue(blob.isFullyDownloaded());\n+\n+        // validate blob needs update due to version mismatch\n+        Assert.assertTrue(blob.requiresUpdate(blobStore, -1L));\n+\n+        // when blob update time matches remote blobstore modtime, validate blob", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0eca24e59a1e3aee1ea6ba56bd223513953c037d"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTg0OTg4NA==", "bodyText": "nit: can change mod time to update time", "url": "https://github.com/apache/storm/pull/3363#discussion_r555849884", "createdAt": "2021-01-12T15:17:56Z", "author": {"login": "Ethanlm"}, "path": "storm-server/src/test/java/org/apache/storm/localizer/LocallyCachedBlobTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.  The ASF licenses this file to you under the Apache License, Version\n+ * 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n+ * and limitations under the License.\n+ */\n+\n+package org.apache.storm.localizer;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.storm.blobstore.ClientBlobStore;\n+import org.apache.storm.daemon.supervisor.AdvancedFSOps;\n+import org.apache.storm.daemon.supervisor.IAdvancedFSOps;\n+import org.apache.storm.generated.AuthorizationException;\n+import org.apache.storm.generated.KeyNotFoundException;\n+import org.apache.storm.generated.LocalAssignment;\n+import org.apache.storm.metric.StormMetricsRegistry;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+public class LocallyCachedBlobTest {\n+    private static ClientBlobStore blobStore = Mockito.mock(ClientBlobStore.class);\n+    private static PortAndAssignment pna = new PortAndAssignmentImpl(6077, new LocalAssignment());\n+    private static Map<String, Object> conf = new HashMap<>();\n+\n+    @Test\n+    public void testNotUsed() throws KeyNotFoundException, AuthorizationException {\n+        LocallyCachedBlob blob = new LocalizedResource(\"key\", Paths.get(\"/bogus\"), false,\n+                AdvancedFSOps.make(conf), conf, \"user1\", new StormMetricsRegistry());\n+        Assert.assertFalse(blob.isUsed());\n+        Assert.assertFalse(blob.requiresUpdate(blobStore, -1L));\n+    }\n+\n+    @Test\n+    public void testNotDownloaded() throws KeyNotFoundException, AuthorizationException {\n+        LocallyCachedBlob blob = new LocalizedResource(\"key\", Paths.get(\"/bogus\"), false,\n+                AdvancedFSOps.make(conf), conf, \"user1\", new StormMetricsRegistry());\n+        blob.addReference(pna, null);\n+        Assert.assertTrue(blob.isUsed());\n+        Assert.assertFalse(blob.isFullyDownloaded());\n+        Assert.assertTrue(blob.requiresUpdate(blobStore, -1L));\n+    }\n+\n+    @Test\n+    public void testOutOfDate() throws KeyNotFoundException, AuthorizationException {\n+        TestableBlob blob = new TestableBlob(\"key\", Paths.get(\"/bogus\"), false,\n+                AdvancedFSOps.make(conf), conf, \"user1\", new StormMetricsRegistry());\n+        blob.addReference(pna, null);\n+        Assert.assertTrue(blob.isUsed());\n+        Assert.assertTrue(blob.isFullyDownloaded());\n+\n+        // validate blob needs update due to version mismatch\n+        Assert.assertTrue(blob.requiresUpdate(blobStore, -1L));\n+\n+        // when blob update time matches remote blobstore modtime, validate blob\n+        // will skip looking at remote version and assume it's up to date\n+        blob.localUpdateTime = 101L;\n+        Assert.assertFalse(blob.requiresUpdate(blobStore, 101L));\n+\n+        // now when the mod time on the remote blobstore differs, we should again see that the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0eca24e59a1e3aee1ea6ba56bd223513953c037d"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTg1MDAxMQ==", "bodyText": "nit: can change mod time to update time", "url": "https://github.com/apache/storm/pull/3363#discussion_r555850011", "createdAt": "2021-01-12T15:18:06Z", "author": {"login": "Ethanlm"}, "path": "storm-server/src/test/java/org/apache/storm/localizer/LocallyCachedBlobTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.  The ASF licenses this file to you under the Apache License, Version\n+ * 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n+ * and limitations under the License.\n+ */\n+\n+package org.apache.storm.localizer;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.storm.blobstore.ClientBlobStore;\n+import org.apache.storm.daemon.supervisor.AdvancedFSOps;\n+import org.apache.storm.daemon.supervisor.IAdvancedFSOps;\n+import org.apache.storm.generated.AuthorizationException;\n+import org.apache.storm.generated.KeyNotFoundException;\n+import org.apache.storm.generated.LocalAssignment;\n+import org.apache.storm.metric.StormMetricsRegistry;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+public class LocallyCachedBlobTest {\n+    private static ClientBlobStore blobStore = Mockito.mock(ClientBlobStore.class);\n+    private static PortAndAssignment pna = new PortAndAssignmentImpl(6077, new LocalAssignment());\n+    private static Map<String, Object> conf = new HashMap<>();\n+\n+    @Test\n+    public void testNotUsed() throws KeyNotFoundException, AuthorizationException {\n+        LocallyCachedBlob blob = new LocalizedResource(\"key\", Paths.get(\"/bogus\"), false,\n+                AdvancedFSOps.make(conf), conf, \"user1\", new StormMetricsRegistry());\n+        Assert.assertFalse(blob.isUsed());\n+        Assert.assertFalse(blob.requiresUpdate(blobStore, -1L));\n+    }\n+\n+    @Test\n+    public void testNotDownloaded() throws KeyNotFoundException, AuthorizationException {\n+        LocallyCachedBlob blob = new LocalizedResource(\"key\", Paths.get(\"/bogus\"), false,\n+                AdvancedFSOps.make(conf), conf, \"user1\", new StormMetricsRegistry());\n+        blob.addReference(pna, null);\n+        Assert.assertTrue(blob.isUsed());\n+        Assert.assertFalse(blob.isFullyDownloaded());\n+        Assert.assertTrue(blob.requiresUpdate(blobStore, -1L));\n+    }\n+\n+    @Test\n+    public void testOutOfDate() throws KeyNotFoundException, AuthorizationException {\n+        TestableBlob blob = new TestableBlob(\"key\", Paths.get(\"/bogus\"), false,\n+                AdvancedFSOps.make(conf), conf, \"user1\", new StormMetricsRegistry());\n+        blob.addReference(pna, null);\n+        Assert.assertTrue(blob.isUsed());\n+        Assert.assertTrue(blob.isFullyDownloaded());\n+\n+        // validate blob needs update due to version mismatch\n+        Assert.assertTrue(blob.requiresUpdate(blobStore, -1L));\n+\n+        // when blob update time matches remote blobstore modtime, validate blob\n+        // will skip looking at remote version and assume it's up to date\n+        blob.localUpdateTime = 101L;\n+        Assert.assertFalse(blob.requiresUpdate(blobStore, 101L));\n+\n+        // now when the mod time on the remote blobstore differs, we should again see that the\n+        // blob version differs from the remote blobstore\n+        Assert.assertTrue(blob.requiresUpdate(blobStore, 102L));\n+\n+        // now validate we don't need any update as versions match, regardless of remote blobstore mod time", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0eca24e59a1e3aee1ea6ba56bd223513953c037d"}, "originalPosition": 73}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe38f29aa506de64e9e292738915c9141e4f433f", "author": {"user": null}, "url": "https://github.com/apache/storm/commit/fe38f29aa506de64e9e292738915c9141e4f433f", "committedDate": "2021-01-13T19:00:54Z", "message": "STORM-3724 change mod time to update time, add update on setting blob replication"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY3NTYzNTA5", "url": "https://github.com/apache/storm/pull/3363#pullrequestreview-567563509", "createdAt": "2021-01-13T19:47:06Z", "commit": {"oid": "fe38f29aa506de64e9e292738915c9141e4f433f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4962, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}