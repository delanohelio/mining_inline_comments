{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3MjA0MDg2", "number": 3242, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQyMToxMDo1MFrODuHuzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMzo0ODozNFrODvkevA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5Njg3NzU3OnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQyMToxMDo1MFrOF_8p4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNDo1MTozOFrOGCHZlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU5ODM2OA==", "bodyText": "Will there be any possible conflicts since it's pulling in two different major versions of dropwizard.metrics?\nEven though they are for different artifacts, I am worried about transitive dependencies", "url": "https://github.com/apache/storm/pull/3242#discussion_r402598368", "createdAt": "2020-04-02T21:10:50Z", "author": {"login": "Ethanlm"}, "path": "pom.xml", "diffHunk": "@@ -295,6 +295,7 @@\n         <log4j.version>2.11.2</log4j.version>\n         <slf4j.version>1.7.26</slf4j.version>\n         <metrics.version>3.2.6</metrics.version>\n+        <metrics.jvm.version>4.0.7</metrics.jvm.version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aa3f3d8ef74703eb59fe132deadb69c2b44c2fc"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMxNzU0MA==", "bodyText": "I didn't see any problems when running a mvn dependency tree.\n[INFO] +- io.dropwizard.metrics:metrics-jvm:jar:4.0.7:compile\n[INFO] |  +- (io.dropwizard.metrics:metrics-core:jar:3.2.6:compile - version managed from 4.0.7; omitted for duplicate)", "url": "https://github.com/apache/storm/pull/3242#discussion_r404317540", "createdAt": "2020-04-06T18:57:02Z", "author": {"login": "agresch"}, "path": "pom.xml", "diffHunk": "@@ -295,6 +295,7 @@\n         <log4j.version>2.11.2</log4j.version>\n         <slf4j.version>1.7.26</slf4j.version>\n         <metrics.version>3.2.6</metrics.version>\n+        <metrics.jvm.version>4.0.7</metrics.jvm.version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU5ODM2OA=="}, "originalCommit": {"oid": "7aa3f3d8ef74703eb59fe132deadb69c2b44c2fc"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgxODI2Ng==", "bodyText": "So there are two metrics-core in the dependencies, one is 4.0.7 and the other one is 3.2.6. I am afraid they could conflict each other at runtime since they are different at major version level.", "url": "https://github.com/apache/storm/pull/3242#discussion_r404818266", "createdAt": "2020-04-07T13:42:13Z", "author": {"login": "Ethanlm"}, "path": "pom.xml", "diffHunk": "@@ -295,6 +295,7 @@\n         <log4j.version>2.11.2</log4j.version>\n         <slf4j.version>1.7.26</slf4j.version>\n         <metrics.version>3.2.6</metrics.version>\n+        <metrics.jvm.version>4.0.7</metrics.jvm.version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU5ODM2OA=="}, "originalCommit": {"oid": "7aa3f3d8ef74703eb59fe132deadb69c2b44c2fc"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg3MTU3NA==", "bodyText": "I'll change the version.", "url": "https://github.com/apache/storm/pull/3242#discussion_r404871574", "createdAt": "2020-04-07T14:51:38Z", "author": {"login": "agresch"}, "path": "pom.xml", "diffHunk": "@@ -295,6 +295,7 @@\n         <log4j.version>2.11.2</log4j.version>\n         <slf4j.version>1.7.26</slf4j.version>\n         <metrics.version>3.2.6</metrics.version>\n+        <metrics.jvm.version>4.0.7</metrics.jvm.version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU5ODM2OA=="}, "originalCommit": {"oid": "7aa3f3d8ef74703eb59fe132deadb69c2b44c2fc"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NjkzOTAwOnYy", "diffSide": "LEFT", "path": "storm-core/test/clj/org/apache/storm/metrics_test.clj", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQyMTozMTozMVrOF_9Pow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODo1OTowNlrOGBlqWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYwODAzNQ==", "bodyText": "Do we want to add some unit tests in java code?", "url": "https://github.com/apache/storm/pull/3242#discussion_r402608035", "createdAt": "2020-04-02T21:31:31Z", "author": {"login": "Ethanlm"}, "path": "storm-core/test/clj/org/apache/storm/metrics_test.clj", "diffHunk": "@@ -376,26 +376,5 @@\n       (assert-metric-running-sum! \"mybolt\" \"__ack-count/myspout:default\" 2 4 cluster)\n       (assert-metric-running-sum! \"mybolt\" \"__execute-count/myspout:default\" 3 4 cluster))))\n \n-(deftest test-system-bolt", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aa3f3d8ef74703eb59fe132deadb69c2b44c2fc"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMxODgxMA==", "bodyText": "I don't think it's worth the effort for getting this in.  If you feel replacing this test is important enough, I would suggest opening a new JIRA.", "url": "https://github.com/apache/storm/pull/3242#discussion_r404318810", "createdAt": "2020-04-06T18:59:06Z", "author": {"login": "agresch"}, "path": "storm-core/test/clj/org/apache/storm/metrics_test.clj", "diffHunk": "@@ -376,26 +376,5 @@\n       (assert-metric-running-sum! \"mybolt\" \"__ack-count/myspout:default\" 2 4 cluster)\n       (assert-metric-running-sum! \"mybolt\" \"__execute-count/myspout:default\" 3 4 cluster))))\n \n-(deftest test-system-bolt", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYwODAzNQ=="}, "originalCommit": {"oid": "7aa3f3d8ef74703eb59fe132deadb69c2b44c2fc"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjA3MzU2OnYy", "diffSide": "RIGHT", "path": "docs/Metrics.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMzo0ODozNFrOGCEb8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNDo1Mzo1M1rOGCHhEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgyMzAyNA==", "bodyText": "These metrics are no longer from ManagementFactory right?", "url": "https://github.com/apache/storm/pull/3242#discussion_r404823024", "createdAt": "2020-04-07T13:48:34Z", "author": {"login": "Ethanlm"}, "path": "docs/Metrics.md", "diffHunk": "@@ -299,29 +299,28 @@ The value is a map where the key is a NodeInfo class for the downstream worker i\n \n ##### JVM Memory\n \n-JVM memory usage is reported through `memory/nonHeap` for off heap memory and `memory/heap` for on heap memory.  These values come from the [MemoryUsage](https://docs.oracle.com/javase/8/docs/api/index.html?java/lang/management/MemoryUsage.html) mxbean.  Each of the metrics are reported as a map with the following keys, and values returned by the corresponding java code.\n+JVM memory usage is reported through `memory.non-heap` for off heap memory, `memory.heap` for on heap memory and `memory.total` for combined values.  These values come from the [MemoryUsage](https://docs.oracle.com/javase/8/docs/api/index.html?java/lang/management/MemoryUsage.html) mxbean.  Each of the metrics are reported as a map with the following keys, and values returned by the corresponding java code.\n \n | Key | Corresponding Code |\n |--------|--------------------|\n-| `maxBytes` | `memUsage.getMax()` |\n-| `committedBytes` | `memUsage.getCommitted()` |\n-| `initBytes` | `memUsage.getInit()` |\n-| `usedBytes` | `memUsage.getUsed()` |\n-| `virtualFreeBytes` | `memUsage.getMax() - memUsage.getUsed()` |\n-| `unusedBytes` | `memUsage.getCommitted() - memUsage.getUsed()` |\n+| `max` | `memUsage.getMax()` |\n+| `committed` | `memUsage.getCommitted()` |\n+| `init` | `memUsage.getInit()` |\n+| `used` | `memUsage.getUsed()` |\n+| `usage` | `Ratio.of(memUsage.getUsed(), memUsage.getMax())` |\n \n ##### JVM Garbage Collection\n \n-The exact GC metric name depends on the garbage collector that your worker uses.  The data is all collected from `ManagementFactory.getGarbageCollectorMXBeans()` and the name of the metrics is `\"GC/\"` followed by the name of the returned bean with white space removed.  The reported metrics are just\n+The exact GC metric name depends on the garbage collector that your worker uses.  The data is all collected from `ManagementFactory.getGarbageCollectorMXBeans()` and the name of the metrics is `\"GC\"` followed by the name of the returned bean with white space removed.  The reported metrics are just", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d8052e5f5442147716f8b6c2b783c7f58481fc8"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg3MzQ5MQ==", "bodyText": "They still do indirectly - https://github.com/infusionsoft/yammer-metrics/blob/master/metrics-jvm/src/main/java/com/codahale/metrics/jvm/GarbageCollectorMetricSet.java#L26", "url": "https://github.com/apache/storm/pull/3242#discussion_r404873491", "createdAt": "2020-04-07T14:53:53Z", "author": {"login": "agresch"}, "path": "docs/Metrics.md", "diffHunk": "@@ -299,29 +299,28 @@ The value is a map where the key is a NodeInfo class for the downstream worker i\n \n ##### JVM Memory\n \n-JVM memory usage is reported through `memory/nonHeap` for off heap memory and `memory/heap` for on heap memory.  These values come from the [MemoryUsage](https://docs.oracle.com/javase/8/docs/api/index.html?java/lang/management/MemoryUsage.html) mxbean.  Each of the metrics are reported as a map with the following keys, and values returned by the corresponding java code.\n+JVM memory usage is reported through `memory.non-heap` for off heap memory, `memory.heap` for on heap memory and `memory.total` for combined values.  These values come from the [MemoryUsage](https://docs.oracle.com/javase/8/docs/api/index.html?java/lang/management/MemoryUsage.html) mxbean.  Each of the metrics are reported as a map with the following keys, and values returned by the corresponding java code.\n \n | Key | Corresponding Code |\n |--------|--------------------|\n-| `maxBytes` | `memUsage.getMax()` |\n-| `committedBytes` | `memUsage.getCommitted()` |\n-| `initBytes` | `memUsage.getInit()` |\n-| `usedBytes` | `memUsage.getUsed()` |\n-| `virtualFreeBytes` | `memUsage.getMax() - memUsage.getUsed()` |\n-| `unusedBytes` | `memUsage.getCommitted() - memUsage.getUsed()` |\n+| `max` | `memUsage.getMax()` |\n+| `committed` | `memUsage.getCommitted()` |\n+| `init` | `memUsage.getInit()` |\n+| `used` | `memUsage.getUsed()` |\n+| `usage` | `Ratio.of(memUsage.getUsed(), memUsage.getMax())` |\n \n ##### JVM Garbage Collection\n \n-The exact GC metric name depends on the garbage collector that your worker uses.  The data is all collected from `ManagementFactory.getGarbageCollectorMXBeans()` and the name of the metrics is `\"GC/\"` followed by the name of the returned bean with white space removed.  The reported metrics are just\n+The exact GC metric name depends on the garbage collector that your worker uses.  The data is all collected from `ManagementFactory.getGarbageCollectorMXBeans()` and the name of the metrics is `\"GC\"` followed by the name of the returned bean with white space removed.  The reported metrics are just", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgyMzAyNA=="}, "originalCommit": {"oid": "6d8052e5f5442147716f8b6c2b783c7f58481fc8"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4264, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}