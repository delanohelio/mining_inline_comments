{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5OTI1Mzc1", "number": 3309, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNToxMzoxOVrOEeWWCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNToxNzoyMFrOEeWctA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMjU4ODI2OnYy", "diffSide": "RIGHT", "path": "storm-server/src/test/java/org/apache/storm/utils/ServerUtilsTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNToxMzoxOVrOHJ87Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNTozMzoxMFrOHJ9row==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE5NzM5OQ==", "bodyText": "I would remove \"{\". It doesn't seem necessary", "url": "https://github.com/apache/storm/pull/3309#discussion_r480197399", "createdAt": "2020-08-31T15:13:19Z", "author": {"login": "Ethanlm"}, "path": "storm-server/src/test/java/org/apache/storm/utils/ServerUtilsTest.java", "diffHunk": "@@ -162,6 +174,163 @@ public void testGetUserId() throws Exception {\n         int uid1 = ServerUtils.getUserId(null);\n         Path p = Files.createTempFile(\"testGetUser\", \".txt\");\n         int uid2 = ServerUtils.getPathOwnerUid(p.toString());\n+        if (!p.toFile().delete()) {\n+            LOG.warn(\"Could not delete tempoary file {}\", p);\n+        }\n         assertEquals(\"User UID \" + uid1 + \" is not same as file \" + p.toString() + \" owner UID of \" + uid2, uid1, uid2);\n     }\n+\n+    @Test\n+    public void testIsAnyProcessPosixProcessPidDirAlive() throws IOException {\n+        final String testName = \"testIsAnyProcessPosixProcessPidDirAlive\";\n+        List<String> errors = new ArrayList<>();\n+        int maxPidCnt = 5;\n+        if (ServerUtils.IS_ON_WINDOWS) {\n+            LOG.info(\"{}: test cannot be run on Windows. Marked as successful\", testName);\n+            return;\n+        }\n+        final Path parentDir = Paths.get(\"/proc\");\n+        if (!parentDir.toFile().exists()) {\n+            LOG.info(\"{}: test cannot be run on system without process directory {}, os.name={}\",\n+                    testName, parentDir, System.getProperty(\"os.name\"));\n+            {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c547971559e1ef33750bfe085ead73f41f25520"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIwOTgyNw==", "bodyText": "fixed", "url": "https://github.com/apache/storm/pull/3309#discussion_r480209827", "createdAt": "2020-08-31T15:33:10Z", "author": {"login": "bipinprasad"}, "path": "storm-server/src/test/java/org/apache/storm/utils/ServerUtilsTest.java", "diffHunk": "@@ -162,6 +174,163 @@ public void testGetUserId() throws Exception {\n         int uid1 = ServerUtils.getUserId(null);\n         Path p = Files.createTempFile(\"testGetUser\", \".txt\");\n         int uid2 = ServerUtils.getPathOwnerUid(p.toString());\n+        if (!p.toFile().delete()) {\n+            LOG.warn(\"Could not delete tempoary file {}\", p);\n+        }\n         assertEquals(\"User UID \" + uid1 + \" is not same as file \" + p.toString() + \" owner UID of \" + uid2, uid1, uid2);\n     }\n+\n+    @Test\n+    public void testIsAnyProcessPosixProcessPidDirAlive() throws IOException {\n+        final String testName = \"testIsAnyProcessPosixProcessPidDirAlive\";\n+        List<String> errors = new ArrayList<>();\n+        int maxPidCnt = 5;\n+        if (ServerUtils.IS_ON_WINDOWS) {\n+            LOG.info(\"{}: test cannot be run on Windows. Marked as successful\", testName);\n+            return;\n+        }\n+        final Path parentDir = Paths.get(\"/proc\");\n+        if (!parentDir.toFile().exists()) {\n+            LOG.info(\"{}: test cannot be run on system without process directory {}, os.name={}\",\n+                    testName, parentDir, System.getProperty(\"os.name\"));\n+            {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE5NzM5OQ=="}, "originalCommit": {"oid": "4c547971559e1ef33750bfe085ead73f41f25520"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMjU5MTgzOnYy", "diffSide": "RIGHT", "path": "storm-server/src/test/java/org/apache/storm/utils/ServerUtilsTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNToxNDoxNVrOHJ89UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNToyNzoxNlrOHJ9dYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE5Nzk2OA==", "bodyText": "Can you please explain why is it \"useful on Mac\"?", "url": "https://github.com/apache/storm/pull/3309#discussion_r480197968", "createdAt": "2020-08-31T15:14:15Z", "author": {"login": "Ethanlm"}, "path": "storm-server/src/test/java/org/apache/storm/utils/ServerUtilsTest.java", "diffHunk": "@@ -162,6 +174,163 @@ public void testGetUserId() throws Exception {\n         int uid1 = ServerUtils.getUserId(null);\n         Path p = Files.createTempFile(\"testGetUser\", \".txt\");\n         int uid2 = ServerUtils.getPathOwnerUid(p.toString());\n+        if (!p.toFile().delete()) {\n+            LOG.warn(\"Could not delete tempoary file {}\", p);\n+        }\n         assertEquals(\"User UID \" + uid1 + \" is not same as file \" + p.toString() + \" owner UID of \" + uid2, uid1, uid2);\n     }\n+\n+    @Test\n+    public void testIsAnyProcessPosixProcessPidDirAlive() throws IOException {\n+        final String testName = \"testIsAnyProcessPosixProcessPidDirAlive\";\n+        List<String> errors = new ArrayList<>();\n+        int maxPidCnt = 5;\n+        if (ServerUtils.IS_ON_WINDOWS) {\n+            LOG.info(\"{}: test cannot be run on Windows. Marked as successful\", testName);\n+            return;\n+        }\n+        final Path parentDir = Paths.get(\"/proc\");\n+        if (!parentDir.toFile().exists()) {\n+            LOG.info(\"{}: test cannot be run on system without process directory {}, os.name={}\",\n+                    testName, parentDir, System.getProperty(\"os.name\"));\n+            {\n+                // check if we can get process id on this Posix system - testing test code, useful on Mac", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c547971559e1ef33750bfe085ead73f41f25520"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIwNjE3Nw==", "bodyText": "Rest of test will not get exercised on Mac (no /proc dir), but at least the getPidOfPosixProcess() will be validated locally.", "url": "https://github.com/apache/storm/pull/3309#discussion_r480206177", "createdAt": "2020-08-31T15:27:16Z", "author": {"login": "bipinprasad"}, "path": "storm-server/src/test/java/org/apache/storm/utils/ServerUtilsTest.java", "diffHunk": "@@ -162,6 +174,163 @@ public void testGetUserId() throws Exception {\n         int uid1 = ServerUtils.getUserId(null);\n         Path p = Files.createTempFile(\"testGetUser\", \".txt\");\n         int uid2 = ServerUtils.getPathOwnerUid(p.toString());\n+        if (!p.toFile().delete()) {\n+            LOG.warn(\"Could not delete tempoary file {}\", p);\n+        }\n         assertEquals(\"User UID \" + uid1 + \" is not same as file \" + p.toString() + \" owner UID of \" + uid2, uid1, uid2);\n     }\n+\n+    @Test\n+    public void testIsAnyProcessPosixProcessPidDirAlive() throws IOException {\n+        final String testName = \"testIsAnyProcessPosixProcessPidDirAlive\";\n+        List<String> errors = new ArrayList<>();\n+        int maxPidCnt = 5;\n+        if (ServerUtils.IS_ON_WINDOWS) {\n+            LOG.info(\"{}: test cannot be run on Windows. Marked as successful\", testName);\n+            return;\n+        }\n+        final Path parentDir = Paths.get(\"/proc\");\n+        if (!parentDir.toFile().exists()) {\n+            LOG.info(\"{}: test cannot be run on system without process directory {}, os.name={}\",\n+                    testName, parentDir, System.getProperty(\"os.name\"));\n+            {\n+                // check if we can get process id on this Posix system - testing test code, useful on Mac", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE5Nzk2OA=="}, "originalCommit": {"oid": "4c547971559e1ef33750bfe085ead73f41f25520"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMjYwNTMyOnYy", "diffSide": "RIGHT", "path": "storm-server/src/test/java/org/apache/storm/utils/ServerUtilsTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNToxNzoyMFrOHJ9Fdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNTozMjoxM1rOHJ9pmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIwMDA1NA==", "bodyText": "nit: space before \";\" can be removed", "url": "https://github.com/apache/storm/pull/3309#discussion_r480200054", "createdAt": "2020-08-31T15:17:20Z", "author": {"login": "Ethanlm"}, "path": "storm-server/src/test/java/org/apache/storm/utils/ServerUtilsTest.java", "diffHunk": "@@ -162,6 +174,163 @@ public void testGetUserId() throws Exception {\n         int uid1 = ServerUtils.getUserId(null);\n         Path p = Files.createTempFile(\"testGetUser\", \".txt\");\n         int uid2 = ServerUtils.getPathOwnerUid(p.toString());\n+        if (!p.toFile().delete()) {\n+            LOG.warn(\"Could not delete tempoary file {}\", p);\n+        }\n         assertEquals(\"User UID \" + uid1 + \" is not same as file \" + p.toString() + \" owner UID of \" + uid2, uid1, uid2);\n     }\n+\n+    @Test\n+    public void testIsAnyProcessPosixProcessPidDirAlive() throws IOException {\n+        final String testName = \"testIsAnyProcessPosixProcessPidDirAlive\";\n+        List<String> errors = new ArrayList<>();\n+        int maxPidCnt = 5;\n+        if (ServerUtils.IS_ON_WINDOWS) {\n+            LOG.info(\"{}: test cannot be run on Windows. Marked as successful\", testName);\n+            return;\n+        }\n+        final Path parentDir = Paths.get(\"/proc\");\n+        if (!parentDir.toFile().exists()) {\n+            LOG.info(\"{}: test cannot be run on system without process directory {}, os.name={}\",\n+                    testName, parentDir, System.getProperty(\"os.name\"));\n+            {\n+                // check if we can get process id on this Posix system - testing test code, useful on Mac\n+                String cmd = \"/bin/sleep 10\";\n+                if (getPidOfPosixProcess(Runtime.getRuntime().exec(cmd), errors) < 0) {\n+                    fail(String.format(\"%s: Cannot obtain process id for executed command \\\"%s\\\"\\n%s\",\n+                            testName, cmd, String.join(\"\\n\\t\", errors)));\n+                }\n+            }\n+            return;\n+        }\n+        // Create processes and wait for their termination\n+        Set<Long> observables = new HashSet<>();\n+\n+        for (int i = 0 ; i < maxPidCnt ; i++) {\n+            String cmd = \"sleep 2000\";\n+            Process process = Runtime.getRuntime().exec(cmd);\n+            long pid = getPidOfPosixProcess(process, errors);\n+            LOG.info(\"{}: ({}) ran process \\\"{}\\\" with pid={}\", testName, i, cmd, pid);\n+            if (pid < 0) {\n+                String e = String.format(\"%s: (%d) Cannot obtain process id for executed command \\\"%s\\\"\", testName, i, cmd);\n+                errors.add(e);\n+                LOG.error(e);\n+                continue;\n+            }\n+            observables.add(pid);\n+        }\n+        String userName = System.getProperty(\"user.name\");\n+        // now kill processes one by one\n+        List<Long> pidList = new ArrayList<>(observables);\n+        final long processKillIntervalMs = 2000;\n+        for (int i = 0 ; i < pidList.size() ; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c547971559e1ef33750bfe085ead73f41f25520"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIwOTMwNQ==", "bodyText": "fixed", "url": "https://github.com/apache/storm/pull/3309#discussion_r480209305", "createdAt": "2020-08-31T15:32:13Z", "author": {"login": "bipinprasad"}, "path": "storm-server/src/test/java/org/apache/storm/utils/ServerUtilsTest.java", "diffHunk": "@@ -162,6 +174,163 @@ public void testGetUserId() throws Exception {\n         int uid1 = ServerUtils.getUserId(null);\n         Path p = Files.createTempFile(\"testGetUser\", \".txt\");\n         int uid2 = ServerUtils.getPathOwnerUid(p.toString());\n+        if (!p.toFile().delete()) {\n+            LOG.warn(\"Could not delete tempoary file {}\", p);\n+        }\n         assertEquals(\"User UID \" + uid1 + \" is not same as file \" + p.toString() + \" owner UID of \" + uid2, uid1, uid2);\n     }\n+\n+    @Test\n+    public void testIsAnyProcessPosixProcessPidDirAlive() throws IOException {\n+        final String testName = \"testIsAnyProcessPosixProcessPidDirAlive\";\n+        List<String> errors = new ArrayList<>();\n+        int maxPidCnt = 5;\n+        if (ServerUtils.IS_ON_WINDOWS) {\n+            LOG.info(\"{}: test cannot be run on Windows. Marked as successful\", testName);\n+            return;\n+        }\n+        final Path parentDir = Paths.get(\"/proc\");\n+        if (!parentDir.toFile().exists()) {\n+            LOG.info(\"{}: test cannot be run on system without process directory {}, os.name={}\",\n+                    testName, parentDir, System.getProperty(\"os.name\"));\n+            {\n+                // check if we can get process id on this Posix system - testing test code, useful on Mac\n+                String cmd = \"/bin/sleep 10\";\n+                if (getPidOfPosixProcess(Runtime.getRuntime().exec(cmd), errors) < 0) {\n+                    fail(String.format(\"%s: Cannot obtain process id for executed command \\\"%s\\\"\\n%s\",\n+                            testName, cmd, String.join(\"\\n\\t\", errors)));\n+                }\n+            }\n+            return;\n+        }\n+        // Create processes and wait for their termination\n+        Set<Long> observables = new HashSet<>();\n+\n+        for (int i = 0 ; i < maxPidCnt ; i++) {\n+            String cmd = \"sleep 2000\";\n+            Process process = Runtime.getRuntime().exec(cmd);\n+            long pid = getPidOfPosixProcess(process, errors);\n+            LOG.info(\"{}: ({}) ran process \\\"{}\\\" with pid={}\", testName, i, cmd, pid);\n+            if (pid < 0) {\n+                String e = String.format(\"%s: (%d) Cannot obtain process id for executed command \\\"%s\\\"\", testName, i, cmd);\n+                errors.add(e);\n+                LOG.error(e);\n+                continue;\n+            }\n+            observables.add(pid);\n+        }\n+        String userName = System.getProperty(\"user.name\");\n+        // now kill processes one by one\n+        List<Long> pidList = new ArrayList<>(observables);\n+        final long processKillIntervalMs = 2000;\n+        for (int i = 0 ; i < pidList.size() ; i++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIwMDA1NA=="}, "originalCommit": {"oid": "4c547971559e1ef33750bfe085ead73f41f25520"}, "originalPosition": 115}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4342, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}