{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4NDYyNTg2", "number": 3212, "title": "[STORM-3587] Allow Scheduler futureTask to gracefully exit before TimeoutException.", "bodyText": "ResourceAwareScheduler creates a FutureTask with timeout specified in DaemonConfig.\nConstraintSolverStrategy uses the the another configuration variable to determine when to terminate its effort. Limit this value so that it terminates at most slightly before TimeoutException. This graceful exit allows result (and its error) to be available in ResourceAwareScheduler.", "createdAt": "2020-02-21T20:36:46Z", "url": "https://github.com/apache/storm/pull/3212", "merged": true, "mergeCommit": {"oid": "46257706b41dbe085be6b884283edd9d72af2f37"}, "closed": true, "closedAt": "2020-03-13T15:26:51Z", "author": {"login": "bipinprasad"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcGllfgAH2gAyMzc4NDYyNTg2OmU1ZmY1Mzc1MzI3ZTBhNWU5ODBhMjU5MGRhZjcxMDFjOWMwNjYzOTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcKID1MgFqTM2ODI4Nzg1NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e5ff5375327e0a5e980a2590daf7101c9c066391", "author": {"user": null}, "url": "https://github.com/apache/storm/commit/e5ff5375327e0a5e980a2590daf7101c9c066391", "committedDate": "2020-02-21T20:17:04Z", "message": "[STORM-3587] Allow Scheduler futureTask to gracefully exit and register message on timeout."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyOTA3ODg3", "url": "https://github.com/apache/storm/pull/3212#pullrequestreview-362907887", "createdAt": "2020-02-21T20:49:08Z", "commit": {"oid": "e5ff5375327e0a5e980a2590daf7101c9c066391"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyOTM0MjUz", "url": "https://github.com/apache/storm/pull/3212#pullrequestreview-362934253", "createdAt": "2020-02-21T21:41:34Z", "commit": {"oid": "e5ff5375327e0a5e980a2590daf7101c9c066391"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMTo0MTozNVrOFtFa2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMTo0MTo1OFrOFtFbYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxOTAzMg==", "bodyText": "Why do we need  + 1", "url": "https://github.com/apache/storm/pull/3212#discussion_r382819032", "createdAt": "2020-02-21T21:41:35Z", "author": {"login": "Ethanlm"}, "path": "storm-server/src/main/java/org/apache/storm/scheduler/resource/ResourceAwareScheduler.java", "diffHunk": "@@ -166,7 +166,7 @@ private void scheduleTopology(TopologyDetails td, Cluster cluster, final User to\n                     Future<SchedulingResult> schedulingFuture = backgroundScheduling.submit(\n                         () -> finalRasStrategy.schedule(toSchedule, td));\n                     try {\n-                        result = schedulingFuture.get(schedulingTimeoutSeconds, TimeUnit.SECONDS);\n+                        result = schedulingFuture.get(schedulingTimeoutSeconds + 1, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5ff5375327e0a5e980a2590daf7101c9c066391"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxOTE3MA==", "bodyText": "failed to schedule does not necessarily the topology is invalid.", "url": "https://github.com/apache/storm/pull/3212#discussion_r382819170", "createdAt": "2020-02-21T21:41:58Z", "author": {"login": "Ethanlm"}, "path": "storm-server/src/main/java/org/apache/storm/scheduler/resource/User.java", "diffHunk": "@@ -79,15 +79,18 @@ public String getId() {\n         return ret;\n     }\n \n-    public void markTopoUnsuccess(TopologyDetails topo, Cluster cluster) {\n+    public void markTopoUnsuccess(TopologyDetails topo, Cluster cluster, String msg) {\n         unsuccess.add(topo);\n         if (cluster != null) {\n-            cluster.setStatus(topo.getId(), \"Scheduling Attempted but topology is invalid\");\n+            if (msg == null) {\n+                msg = \"Scheduling Attempted but topology is invalid\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5ff5375327e0a5e980a2590daf7101c9c066391"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1NzYyMjIy", "url": "https://github.com/apache/storm/pull/3212#pullrequestreview-365762222", "createdAt": "2020-02-27T15:32:32Z", "commit": {"oid": "e5ff5375327e0a5e980a2590daf7101c9c066391"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNTozMjozOFrOFvWDqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNTozMzowOVrOFvWFBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE4ODc3OQ==", "bodyText": "This can be replaced by result.toString()", "url": "https://github.com/apache/storm/pull/3212#discussion_r385188779", "createdAt": "2020-02-27T15:32:38Z", "author": {"login": "Ethanlm"}, "path": "storm-server/src/main/java/org/apache/storm/scheduler/resource/ResourceAwareScheduler.java", "diffHunk": "@@ -226,7 +226,17 @@ private void scheduleTopology(TopologyDetails td, Cluster cluster, final User to\n                         //Only place we fall though to do the loop over again...\n                     } else { //Any other failure result\n                         //The assumption is that the strategy set the status...\n-                        topologySubmitter.markTopoUnsuccess(td, cluster);\n+                        String msg = \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5ff5375327e0a5e980a2590daf7101c9c066391"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE4OTEyNA==", "bodyText": "This can be replaced by result.toString()", "url": "https://github.com/apache/storm/pull/3212#discussion_r385189124", "createdAt": "2020-02-27T15:33:09Z", "author": {"login": "Ethanlm"}, "path": "storm-server/src/main/java/org/apache/storm/scheduler/resource/ResourceAwareScheduler.java", "diffHunk": "@@ -226,7 +226,17 @@ private void scheduleTopology(TopologyDetails td, Cluster cluster, final User to\n                         //Only place we fall though to do the loop over again...\n                     } else { //Any other failure result\n                         //The assumption is that the strategy set the status...\n-                        topologySubmitter.markTopoUnsuccess(td, cluster);\n+                        String msg = \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5ff5375327e0a5e980a2590daf7101c9c066391"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f282df8be6166eb1d223c4bd553ecd5678e07118", "author": {"user": null}, "url": "https://github.com/apache/storm/commit/f282df8be6166eb1d223c4bd553ecd5678e07118", "committedDate": "2020-02-27T19:17:23Z", "message": "[STORM-3587] Use result.toString() instead of reconstructing error message."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a00cd4de20b49de085369f329ac75c67f0e223a", "author": {"user": null}, "url": "https://github.com/apache/storm/commit/3a00cd4de20b49de085369f329ac75c67f0e223a", "committedDate": "2020-03-03T19:21:37Z", "message": "[STORM-3587] Change ConstraintSolverStrategy to expect to be killed at DaemonConfig.SCHEDULING_TIMEOUT_SECONDS_PER_TOPOLOGY seconds and set it own maximum time to be at most 200 ms before."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4Mjg3ODU1", "url": "https://github.com/apache/storm/pull/3212#pullrequestreview-368287855", "createdAt": "2020-03-03T20:08:45Z", "commit": {"oid": "3a00cd4de20b49de085369f329ac75c67f0e223a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4666, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}