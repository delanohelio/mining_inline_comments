{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2MzYyMTg1", "number": 3323, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMTo1MToxOVrOEXZO_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNjozMDoxNVrOEcp32Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyOTY2MTQyOnYy", "diffSide": "RIGHT", "path": "storm-client/src/jvm/org/apache/storm/metrics2/ResettingAverageGauge.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMTo1MToxOVrOG_Ke-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMTo1MToxOVrOG_Ke-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg4NTI0MA==", "bodyText": "Does total mean the sum and samples mean the number of records?\nLine 26\n            total++;\n            samples += value;\n\ndoesn't match", "url": "https://github.com/apache/storm/pull/3323#discussion_r468885240", "createdAt": "2020-08-11T21:51:19Z", "author": {"login": "Ethanlm"}, "path": "storm-client/src/jvm/org/apache/storm/metrics2/ResettingAverageGauge.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.  The ASF licenses this file to you under the Apache License, Version\n+ * 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ * <p/>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p/>\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n+ * and limitations under the License.\n+ */\n+\n+package org.apache.storm.metrics2;\n+\n+import com.codahale.metrics.Gauge;\n+\n+public class ResettingAverageGauge implements Gauge<Long> {\n+    private long total = 0L;\n+    private long samples = 0L;\n+\n+    public ResettingAverageGauge() {\n+    }\n+\n+    public void addValue(long value) {\n+        synchronized (this) {\n+            total++;\n+            samples += value;\n+        }\n+    }\n+\n+    /**\n+     * Returns the metric's current average value.  The data stored is reset when read.\n+     *\n+     * @return the metric's average value\n+     */\n+    @Override\n+    public Long getValue() {\n+        synchronized (this) {\n+            if (samples <= 0L) {\n+                return 0L;\n+            } else {\n+                long result = total / samples;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf95f7fd492a19c8bf5784d1945f2ef22b60c6dd"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyOTY3ODg5OnYy", "diffSide": "RIGHT", "path": "storm-client/src/jvm/org/apache/storm/metric/internal/LatencyStat.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMTo1NzoyNVrOG_KpGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMTo1NzoyNVrOG_KpGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg4NzgzNA==", "bodyText": "Maybe add a comment to indicate why it is not removed, and consider adding @VisibleForTesting if it is proper", "url": "https://github.com/apache/storm/pull/3323#discussion_r468887834", "createdAt": "2020-08-11T21:57:25Z", "author": {"login": "Ethanlm"}, "path": "storm-client/src/jvm/org/apache/storm/metric/internal/LatencyStat.java", "diffHunk": "@@ -123,11 +122,6 @@ public void record(long latency) {\n         }\n     }\n \n-    @Override\n-    public synchronized Object getValueAndReset() {\n-        return getValueAndReset(System.currentTimeMillis());\n-    }\n-\n     synchronized Object getValueAndReset(long now) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf95f7fd492a19c8bf5784d1945f2ef22b60c6dd"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjQ3NDY3OnYy", "diffSide": "RIGHT", "path": "storm-client/src/jvm/org/apache/storm/metrics2/TaskMetrics.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNDo1MTowM1rOG_k6mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNDo1MTowM1rOG_k6mQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMxODI5Nw==", "bodyText": "Not directly related to this PR. But at some point, we need to update https://github.com/apache/storm/blob/master/docs/Metrics.md#__complete-latency\nhttps://github.com/apache/storm/blob/master/docs/Metrics.md#__process-latency\nThey say \" It is the average amount of time it took for ack or fail to be called\". But the latency is only calculated on ack not on fail.\nThe original code https://github.com/apache/storm/blob/0.5.0/src/clj/backtype/storm/stats.clj#L192-L210 is implemented the same. I believe this is a mistake introduced in https://issues.apache.org/jira/browse/STORM-2616", "url": "https://github.com/apache/storm/pull/3323#discussion_r469318297", "createdAt": "2020-08-12T14:51:03Z", "author": {"login": "Ethanlm"}, "path": "storm-client/src/jvm/org/apache/storm/metrics2/TaskMetrics.java", "diffHunk": "@@ -13,69 +13,151 @@\n package org.apache.storm.metrics2;\n \n import com.codahale.metrics.Counter;\n+import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n import org.apache.storm.task.WorkerTopologyContext;\n+import org.apache.storm.utils.ConfigUtils;\n \n public class TaskMetrics {\n-    private static final String METRIC_NAME_ACKED = \"acked\";\n-    private static final String METRIC_NAME_FAILED = \"failed\";\n-    private static final String METRIC_NAME_EMITTED = \"emitted\";\n-    private static final String METRIC_NAME_TRANSFERRED = \"transferred\";\n+    private static final String METRIC_NAME_ACKED = \"__ack-count\";\n+    private static final String METRIC_NAME_FAILED = \"__fail-count\";\n+    private static final String METRIC_NAME_EMITTED = \"__emit-count\";\n+    private static final String METRIC_NAME_TRANSFERRED = \"__transfer-count\";\n+    private static final String METRIC_NAME_EXECUTED = \"__execute-count\";\n+    private static final String METRIC_NAME_PROCESS_LATENCY = \"__process-latency\";\n+    private static final String METRIC_NAME_COMPLETE_LATENCY = \"__complete-latency\";\n+    private static final String METRIC_NAME_EXECUTE_LATENCY = \"__execute-latency\";\n \n-    private final ConcurrentMap<String, Counter> ackedByStream = new ConcurrentHashMap<>();\n-    private final ConcurrentMap<String, Counter> failedByStream = new ConcurrentHashMap<>();\n-    private final ConcurrentMap<String, Counter> emittedByStream = new ConcurrentHashMap<>();\n-    private final ConcurrentMap<String, Counter> transferredByStream = new ConcurrentHashMap<>();\n+    private final ConcurrentMap<String, Counter> counters = new ConcurrentHashMap<>();\n+    private final ConcurrentMap<String, ResettingAverageGauge> gauges = new ConcurrentHashMap<>();\n \n     private final String topologyId;\n     private final String componentId;\n     private final Integer taskId;\n     private final Integer workerPort;\n     private final StormMetricRegistry metricRegistry;\n+    private final int samplingRate;\n \n-    public TaskMetrics(WorkerTopologyContext context, String componentId, Integer taskid, StormMetricRegistry metricRegistry) {\n+\n+    public TaskMetrics(WorkerTopologyContext context, String componentId, Integer taskid,\n+                       StormMetricRegistry metricRegistry, Map<String, Object> topoConf) {\n         this.metricRegistry = metricRegistry;\n         this.topologyId = context.getStormId();\n         this.componentId = componentId;\n         this.taskId = taskid;\n         this.workerPort = context.getThisWorkerPort();\n+        this.samplingRate = ConfigUtils.samplingRate(topoConf);\n+    }\n+\n+    public void spoutAckedTuple(String streamId, long latencyMs) {\n+        String metricName = METRIC_NAME_ACKED + \"-\" + streamId;\n+        Counter c = this.counters.get(metricName);\n+        if (c == null) {\n+            c = metricRegistry.counter(metricName, this.topologyId, this.componentId,\n+                    this.taskId, this.workerPort, streamId);\n+            this.counters.put(metricName, c);\n+        }\n+        c.inc(this.samplingRate);\n+\n+        metricName = METRIC_NAME_COMPLETE_LATENCY + \"-\" + streamId;\n+        ResettingAverageGauge gauge = this.gauges.get(metricName);\n+        if (gauge == null) {\n+            gauge = new ResettingAverageGauge();\n+            metricRegistry.gauge(metricName, gauge, this.topologyId, this.componentId,\n+                    streamId, this.taskId, this.workerPort);\n+            this.gauges.put(metricName, gauge);\n+        }\n+        gauge.addValue(latencyMs);\n     }\n \n-    public Counter getAcked(String streamId) {\n-        Counter c = this.ackedByStream.get(streamId);\n+    public void boltAckedTuple(String sourceComponentId, String sourceStreamId, long latencyMs) {\n+        String key = sourceComponentId + \":\" + sourceStreamId;\n+        String metricName = METRIC_NAME_ACKED + \"-\" + key;\n+        Counter c = this.counters.get(metricName);\n         if (c == null) {\n-            c = metricRegistry.counter(METRIC_NAME_ACKED, this.topologyId, this.componentId, this.taskId, this.workerPort, streamId);\n-            this.ackedByStream.put(streamId, c);\n+            c = metricRegistry.counter(metricName, this.topologyId, this.componentId,\n+                    this.taskId, this.workerPort, sourceStreamId);\n+            this.counters.put(metricName, c);\n         }\n-        return c;\n+        c.inc(this.samplingRate);\n+\n+        metricName = METRIC_NAME_PROCESS_LATENCY + \"-\" + key;\n+        ResettingAverageGauge gauge = this.gauges.get(metricName);\n+        if (gauge == null) {\n+            gauge = new ResettingAverageGauge();\n+            metricRegistry.gauge(metricName, gauge, this.topologyId, this.componentId,\n+                    sourceStreamId, this.taskId, this.workerPort);\n+            this.gauges.put(metricName, gauge);\n+        }\n+        gauge.addValue(latencyMs);\n     }\n \n-    public Counter getFailed(String streamId) {\n-        Counter c = this.failedByStream.get(streamId);\n+    public void spoutFailedTuple(String streamId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf95f7fd492a19c8bf5784d1945f2ef22b60c6dd"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjUwNjY0OnYy", "diffSide": "LEFT", "path": "storm-client/src/jvm/org/apache/storm/metric/internal/MultiLatencyStat.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNDo1Nzo0M1rOG_lOVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNDo1Nzo0M1rOG_lOVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMyMzM0OA==", "bodyText": "keyToString method can be removed too", "url": "https://github.com/apache/storm/pull/3323#discussion_r469323348", "createdAt": "2020-08-12T14:57:43Z", "author": {"login": "Ethanlm"}, "path": "storm-client/src/jvm/org/apache/storm/metric/internal/MultiLatencyStat.java", "diffHunk": "@@ -68,20 +67,9 @@ protected String keyToString(T key) {\n         return key.toString();\n     }\n \n-    @Override\n-    public Object getValueAndReset() {\n-        Map<String, Double> ret = new HashMap<String, Double>();\n-        for (Map.Entry<T, LatencyStatAndMetric> entry : lat.entrySet()) {\n-            String key = keyToString(entry.getKey());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf95f7fd492a19c8bf5784d1945f2ef22b60c6dd"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjUwODMyOnYy", "diffSide": "RIGHT", "path": "storm-client/src/jvm/org/apache/storm/metric/internal/MultiLatencyStat.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNDo1ODowNFrOG_lPYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNDo1ODowNFrOG_lPYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMyMzYxOQ==", "bodyText": "nit:  approximate latency", "url": "https://github.com/apache/storm/pull/3323#discussion_r469323619", "createdAt": "2020-08-12T14:58:04Z", "author": {"login": "Ethanlm"}, "path": "storm-client/src/jvm/org/apache/storm/metric/internal/MultiLatencyStat.java", "diffHunk": "@@ -16,32 +16,31 @@\n import java.util.List;\n import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n-import org.apache.storm.metric.api.IMetric;\n \n /**\n- * Acts as a Latnecy Metric for multiple keys, but keeps track of approximate counts for the last 10 mins, 3 hours, 1 day, and all time. for\n+ * Keeps track of approximate counts for the last 10 mins, 3 hours, 1 day, and all time. for", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf95f7fd492a19c8bf5784d1945f2ef22b60c6dd"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjUyNTQ3OnYy", "diffSide": "RIGHT", "path": "storm-client/src/jvm/org/apache/storm/metrics2/ResettingAverageGauge.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNTowMTo0MFrOG_lZ_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNTowMTo0MFrOG_lZ_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMyNjMzMg==", "bodyText": "The latency value should be a double like before", "url": "https://github.com/apache/storm/pull/3323#discussion_r469326332", "createdAt": "2020-08-12T15:01:40Z", "author": {"login": "Ethanlm"}, "path": "storm-client/src/jvm/org/apache/storm/metrics2/ResettingAverageGauge.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.  The ASF licenses this file to you under the Apache License, Version\n+ * 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ * <p/>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p/>\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n+ * and limitations under the License.\n+ */\n+\n+package org.apache.storm.metrics2;\n+\n+import com.codahale.metrics.Gauge;\n+\n+public class ResettingAverageGauge implements Gauge<Long> {\n+    private long total = 0L;\n+    private long samples = 0L;\n+\n+    public ResettingAverageGauge() {\n+    }\n+\n+    public void addValue(long value) {\n+        synchronized (this) {\n+            total++;\n+            samples += value;\n+        }\n+    }\n+\n+    /**\n+     * Returns the metric's current average value.  The data stored is reset when read.\n+     *\n+     * @return the metric's average value\n+     */\n+    @Override\n+    public Long getValue() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf95f7fd492a19c8bf5784d1945f2ef22b60c6dd"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjgwMDE2OnYy", "diffSide": "RIGHT", "path": "storm-client/src/jvm/org/apache/storm/metrics2/ResettingAverageGauge.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNTo1ODoxNVrOG_n_cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNTo1ODoxNVrOG_n_cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM2ODY4OQ==", "bodyText": "Sorry I just realized resetting gauge won't work when there are multiple reporters. Because every reporter will invoke getValue, the value will be reset by the first reporter so the following reporters won't get useful metric..", "url": "https://github.com/apache/storm/pull/3323#discussion_r469368689", "createdAt": "2020-08-12T15:58:15Z", "author": {"login": "Ethanlm"}, "path": "storm-client/src/jvm/org/apache/storm/metrics2/ResettingAverageGauge.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.  The ASF licenses this file to you under the Apache License, Version\n+ * 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ * <p/>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p/>\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n+ * and limitations under the License.\n+ */\n+\n+package org.apache.storm.metrics2;\n+\n+import com.codahale.metrics.Gauge;\n+\n+public class ResettingAverageGauge implements Gauge<Long> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf95f7fd492a19c8bf5784d1945f2ef22b60c6dd"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjgwNDI2OnYy", "diffSide": "LEFT", "path": "storm-core/test/clj/org/apache/storm/metrics_test.clj", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNTo1OToxNVrOG_oCBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNjowNjoyN1rOG_oUHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM2OTM1MQ==", "bodyText": "Do we have a replacement for these tests?", "url": "https://github.com/apache/storm/pull/3323#discussion_r469369351", "createdAt": "2020-08-12T15:59:15Z", "author": {"login": "Ethanlm"}, "path": "storm-core/test/clj/org/apache/storm/metrics_test.clj", "diffHunk": "@@ -238,143 +238,4 @@\n       )))\n \n \n-(deftest test-builtin-metrics-1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf95f7fd492a19c8bf5784d1945f2ef22b60c6dd"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM3Mzk4MQ==", "bodyText": "No.  This seemed like an integration test.  I'm not sure how valuable this is.", "url": "https://github.com/apache/storm/pull/3323#discussion_r469373981", "createdAt": "2020-08-12T16:06:27Z", "author": {"login": "agresch"}, "path": "storm-core/test/clj/org/apache/storm/metrics_test.clj", "diffHunk": "@@ -238,143 +238,4 @@\n       )))\n \n \n-(deftest test-builtin-metrics-1", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM2OTM1MQ=="}, "originalCommit": {"oid": "cf95f7fd492a19c8bf5784d1945f2ef22b60c6dd"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzEyNzc2OnYy", "diffSide": "RIGHT", "path": "storm-client/src/jvm/org/apache/storm/metrics2/TaskMetrics.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNzoyNTowMVrOG_rNyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNDo1NDo1NVrOHAPWYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQyMTUxMw==", "bodyText": "Do we need synchronization here? Will the object be created multiple times?", "url": "https://github.com/apache/storm/pull/3323#discussion_r469421513", "createdAt": "2020-08-12T17:25:01Z", "author": {"login": "Ethanlm"}, "path": "storm-client/src/jvm/org/apache/storm/metrics2/TaskMetrics.java", "diffHunk": "@@ -13,69 +13,151 @@\n package org.apache.storm.metrics2;\n \n import com.codahale.metrics.Counter;\n+import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n import org.apache.storm.task.WorkerTopologyContext;\n+import org.apache.storm.utils.ConfigUtils;\n \n public class TaskMetrics {\n-    private static final String METRIC_NAME_ACKED = \"acked\";\n-    private static final String METRIC_NAME_FAILED = \"failed\";\n-    private static final String METRIC_NAME_EMITTED = \"emitted\";\n-    private static final String METRIC_NAME_TRANSFERRED = \"transferred\";\n+    private static final String METRIC_NAME_ACKED = \"__ack-count\";\n+    private static final String METRIC_NAME_FAILED = \"__fail-count\";\n+    private static final String METRIC_NAME_EMITTED = \"__emit-count\";\n+    private static final String METRIC_NAME_TRANSFERRED = \"__transfer-count\";\n+    private static final String METRIC_NAME_EXECUTED = \"__execute-count\";\n+    private static final String METRIC_NAME_PROCESS_LATENCY = \"__process-latency\";\n+    private static final String METRIC_NAME_COMPLETE_LATENCY = \"__complete-latency\";\n+    private static final String METRIC_NAME_EXECUTE_LATENCY = \"__execute-latency\";\n \n-    private final ConcurrentMap<String, Counter> ackedByStream = new ConcurrentHashMap<>();\n-    private final ConcurrentMap<String, Counter> failedByStream = new ConcurrentHashMap<>();\n-    private final ConcurrentMap<String, Counter> emittedByStream = new ConcurrentHashMap<>();\n-    private final ConcurrentMap<String, Counter> transferredByStream = new ConcurrentHashMap<>();\n+    private final ConcurrentMap<String, Counter> counters = new ConcurrentHashMap<>();\n+    private final ConcurrentMap<String, ResettingAverageGauge> gauges = new ConcurrentHashMap<>();\n \n     private final String topologyId;\n     private final String componentId;\n     private final Integer taskId;\n     private final Integer workerPort;\n     private final StormMetricRegistry metricRegistry;\n+    private final int samplingRate;\n \n-    public TaskMetrics(WorkerTopologyContext context, String componentId, Integer taskid, StormMetricRegistry metricRegistry) {\n+\n+    public TaskMetrics(WorkerTopologyContext context, String componentId, Integer taskid,\n+                       StormMetricRegistry metricRegistry, Map<String, Object> topoConf) {\n         this.metricRegistry = metricRegistry;\n         this.topologyId = context.getStormId();\n         this.componentId = componentId;\n         this.taskId = taskid;\n         this.workerPort = context.getThisWorkerPort();\n+        this.samplingRate = ConfigUtils.samplingRate(topoConf);\n+    }\n+\n+    public void spoutAckedTuple(String streamId, long latencyMs) {\n+        String metricName = METRIC_NAME_ACKED + \"-\" + streamId;\n+        Counter c = this.counters.get(metricName);\n+        if (c == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf95f7fd492a19c8bf5784d1945f2ef22b60c6dd"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQzNjEzNQ==", "bodyText": "I assumed that we were thread safe from the caller.  But my understanding could be wrong.", "url": "https://github.com/apache/storm/pull/3323#discussion_r469436135", "createdAt": "2020-08-12T17:50:09Z", "author": {"login": "agresch"}, "path": "storm-client/src/jvm/org/apache/storm/metrics2/TaskMetrics.java", "diffHunk": "@@ -13,69 +13,151 @@\n package org.apache.storm.metrics2;\n \n import com.codahale.metrics.Counter;\n+import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n import org.apache.storm.task.WorkerTopologyContext;\n+import org.apache.storm.utils.ConfigUtils;\n \n public class TaskMetrics {\n-    private static final String METRIC_NAME_ACKED = \"acked\";\n-    private static final String METRIC_NAME_FAILED = \"failed\";\n-    private static final String METRIC_NAME_EMITTED = \"emitted\";\n-    private static final String METRIC_NAME_TRANSFERRED = \"transferred\";\n+    private static final String METRIC_NAME_ACKED = \"__ack-count\";\n+    private static final String METRIC_NAME_FAILED = \"__fail-count\";\n+    private static final String METRIC_NAME_EMITTED = \"__emit-count\";\n+    private static final String METRIC_NAME_TRANSFERRED = \"__transfer-count\";\n+    private static final String METRIC_NAME_EXECUTED = \"__execute-count\";\n+    private static final String METRIC_NAME_PROCESS_LATENCY = \"__process-latency\";\n+    private static final String METRIC_NAME_COMPLETE_LATENCY = \"__complete-latency\";\n+    private static final String METRIC_NAME_EXECUTE_LATENCY = \"__execute-latency\";\n \n-    private final ConcurrentMap<String, Counter> ackedByStream = new ConcurrentHashMap<>();\n-    private final ConcurrentMap<String, Counter> failedByStream = new ConcurrentHashMap<>();\n-    private final ConcurrentMap<String, Counter> emittedByStream = new ConcurrentHashMap<>();\n-    private final ConcurrentMap<String, Counter> transferredByStream = new ConcurrentHashMap<>();\n+    private final ConcurrentMap<String, Counter> counters = new ConcurrentHashMap<>();\n+    private final ConcurrentMap<String, ResettingAverageGauge> gauges = new ConcurrentHashMap<>();\n \n     private final String topologyId;\n     private final String componentId;\n     private final Integer taskId;\n     private final Integer workerPort;\n     private final StormMetricRegistry metricRegistry;\n+    private final int samplingRate;\n \n-    public TaskMetrics(WorkerTopologyContext context, String componentId, Integer taskid, StormMetricRegistry metricRegistry) {\n+\n+    public TaskMetrics(WorkerTopologyContext context, String componentId, Integer taskid,\n+                       StormMetricRegistry metricRegistry, Map<String, Object> topoConf) {\n         this.metricRegistry = metricRegistry;\n         this.topologyId = context.getStormId();\n         this.componentId = componentId;\n         this.taskId = taskid;\n         this.workerPort = context.getThisWorkerPort();\n+        this.samplingRate = ConfigUtils.samplingRate(topoConf);\n+    }\n+\n+    public void spoutAckedTuple(String streamId, long latencyMs) {\n+        String metricName = METRIC_NAME_ACKED + \"-\" + streamId;\n+        Counter c = this.counters.get(metricName);\n+        if (c == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQyMTUxMw=="}, "originalCommit": {"oid": "cf95f7fd492a19c8bf5784d1945f2ef22b60c6dd"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY3ODM0OQ==", "bodyText": "I am not very sure about spoutAckedTuple at this moment. But methods like boltFailedTuple and boltAckedTuple might be invoked in multiple threads if the bolt is a multi-threaded bolt", "url": "https://github.com/apache/storm/pull/3323#discussion_r469678349", "createdAt": "2020-08-13T03:42:49Z", "author": {"login": "Ethanlm"}, "path": "storm-client/src/jvm/org/apache/storm/metrics2/TaskMetrics.java", "diffHunk": "@@ -13,69 +13,151 @@\n package org.apache.storm.metrics2;\n \n import com.codahale.metrics.Counter;\n+import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n import org.apache.storm.task.WorkerTopologyContext;\n+import org.apache.storm.utils.ConfigUtils;\n \n public class TaskMetrics {\n-    private static final String METRIC_NAME_ACKED = \"acked\";\n-    private static final String METRIC_NAME_FAILED = \"failed\";\n-    private static final String METRIC_NAME_EMITTED = \"emitted\";\n-    private static final String METRIC_NAME_TRANSFERRED = \"transferred\";\n+    private static final String METRIC_NAME_ACKED = \"__ack-count\";\n+    private static final String METRIC_NAME_FAILED = \"__fail-count\";\n+    private static final String METRIC_NAME_EMITTED = \"__emit-count\";\n+    private static final String METRIC_NAME_TRANSFERRED = \"__transfer-count\";\n+    private static final String METRIC_NAME_EXECUTED = \"__execute-count\";\n+    private static final String METRIC_NAME_PROCESS_LATENCY = \"__process-latency\";\n+    private static final String METRIC_NAME_COMPLETE_LATENCY = \"__complete-latency\";\n+    private static final String METRIC_NAME_EXECUTE_LATENCY = \"__execute-latency\";\n \n-    private final ConcurrentMap<String, Counter> ackedByStream = new ConcurrentHashMap<>();\n-    private final ConcurrentMap<String, Counter> failedByStream = new ConcurrentHashMap<>();\n-    private final ConcurrentMap<String, Counter> emittedByStream = new ConcurrentHashMap<>();\n-    private final ConcurrentMap<String, Counter> transferredByStream = new ConcurrentHashMap<>();\n+    private final ConcurrentMap<String, Counter> counters = new ConcurrentHashMap<>();\n+    private final ConcurrentMap<String, ResettingAverageGauge> gauges = new ConcurrentHashMap<>();\n \n     private final String topologyId;\n     private final String componentId;\n     private final Integer taskId;\n     private final Integer workerPort;\n     private final StormMetricRegistry metricRegistry;\n+    private final int samplingRate;\n \n-    public TaskMetrics(WorkerTopologyContext context, String componentId, Integer taskid, StormMetricRegistry metricRegistry) {\n+\n+    public TaskMetrics(WorkerTopologyContext context, String componentId, Integer taskid,\n+                       StormMetricRegistry metricRegistry, Map<String, Object> topoConf) {\n         this.metricRegistry = metricRegistry;\n         this.topologyId = context.getStormId();\n         this.componentId = componentId;\n         this.taskId = taskid;\n         this.workerPort = context.getThisWorkerPort();\n+        this.samplingRate = ConfigUtils.samplingRate(topoConf);\n+    }\n+\n+    public void spoutAckedTuple(String streamId, long latencyMs) {\n+        String metricName = METRIC_NAME_ACKED + \"-\" + streamId;\n+        Counter c = this.counters.get(metricName);\n+        if (c == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQyMTUxMw=="}, "originalCommit": {"oid": "cf95f7fd492a19c8bf5784d1945f2ef22b60c6dd"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAxMzUzOA==", "bodyText": "ok, will address this", "url": "https://github.com/apache/storm/pull/3323#discussion_r470013538", "createdAt": "2020-08-13T14:54:55Z", "author": {"login": "agresch"}, "path": "storm-client/src/jvm/org/apache/storm/metrics2/TaskMetrics.java", "diffHunk": "@@ -13,69 +13,151 @@\n package org.apache.storm.metrics2;\n \n import com.codahale.metrics.Counter;\n+import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n import org.apache.storm.task.WorkerTopologyContext;\n+import org.apache.storm.utils.ConfigUtils;\n \n public class TaskMetrics {\n-    private static final String METRIC_NAME_ACKED = \"acked\";\n-    private static final String METRIC_NAME_FAILED = \"failed\";\n-    private static final String METRIC_NAME_EMITTED = \"emitted\";\n-    private static final String METRIC_NAME_TRANSFERRED = \"transferred\";\n+    private static final String METRIC_NAME_ACKED = \"__ack-count\";\n+    private static final String METRIC_NAME_FAILED = \"__fail-count\";\n+    private static final String METRIC_NAME_EMITTED = \"__emit-count\";\n+    private static final String METRIC_NAME_TRANSFERRED = \"__transfer-count\";\n+    private static final String METRIC_NAME_EXECUTED = \"__execute-count\";\n+    private static final String METRIC_NAME_PROCESS_LATENCY = \"__process-latency\";\n+    private static final String METRIC_NAME_COMPLETE_LATENCY = \"__complete-latency\";\n+    private static final String METRIC_NAME_EXECUTE_LATENCY = \"__execute-latency\";\n \n-    private final ConcurrentMap<String, Counter> ackedByStream = new ConcurrentHashMap<>();\n-    private final ConcurrentMap<String, Counter> failedByStream = new ConcurrentHashMap<>();\n-    private final ConcurrentMap<String, Counter> emittedByStream = new ConcurrentHashMap<>();\n-    private final ConcurrentMap<String, Counter> transferredByStream = new ConcurrentHashMap<>();\n+    private final ConcurrentMap<String, Counter> counters = new ConcurrentHashMap<>();\n+    private final ConcurrentMap<String, ResettingAverageGauge> gauges = new ConcurrentHashMap<>();\n \n     private final String topologyId;\n     private final String componentId;\n     private final Integer taskId;\n     private final Integer workerPort;\n     private final StormMetricRegistry metricRegistry;\n+    private final int samplingRate;\n \n-    public TaskMetrics(WorkerTopologyContext context, String componentId, Integer taskid, StormMetricRegistry metricRegistry) {\n+\n+    public TaskMetrics(WorkerTopologyContext context, String componentId, Integer taskid,\n+                       StormMetricRegistry metricRegistry, Map<String, Object> topoConf) {\n         this.metricRegistry = metricRegistry;\n         this.topologyId = context.getStormId();\n         this.componentId = componentId;\n         this.taskId = taskid;\n         this.workerPort = context.getThisWorkerPort();\n+        this.samplingRate = ConfigUtils.samplingRate(topoConf);\n+    }\n+\n+    public void spoutAckedTuple(String streamId, long latencyMs) {\n+        String metricName = METRIC_NAME_ACKED + \"-\" + streamId;\n+        Counter c = this.counters.get(metricName);\n+        if (c == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQyMTUxMw=="}, "originalCommit": {"oid": "cf95f7fd492a19c8bf5784d1945f2ef22b60c6dd"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NDgxNjI1OnYy", "diffSide": "RIGHT", "path": "storm-client/src/jvm/org/apache/storm/metrics2/RollingAverageGauge.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNjozMDoxNVrOHHUJ-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNjozMDoxNVrOHHUJ-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQzMjMxNQ==", "bodyText": "At beginning, the values are all 0. So it is not accurate if there are not enough samples (less than 3).\nFor example, if there is only one value, x, the result will be x / 3.0, while the result should have been x.\nBut this is not very likely to happen since number of values will quickly increase to more than 3. I think it is acceptable.", "url": "https://github.com/apache/storm/pull/3323#discussion_r477432315", "createdAt": "2020-08-26T16:30:15Z", "author": {"login": "Ethanlm"}, "path": "storm-client/src/jvm/org/apache/storm/metrics2/RollingAverageGauge.java", "diffHunk": "@@ -14,36 +14,22 @@\n \n import com.codahale.metrics.Gauge;\n \n-public class ResettingAverageGauge implements Gauge<Long> {\n-    private long total = 0L;\n-    private long samples = 0L;\n+public class RollingAverageGauge implements Gauge<Double> {\n+    private long[] samples = new long[3];\n+    private int index = 0;\n \n-    public ResettingAverageGauge() {\n-    }\n-\n-    public void addValue(long value) {\n+    @Override\n+    public Double getValue() {\n         synchronized (this) {\n-            total++;\n-            samples += value;\n+            long total = samples[0] + samples[1] + samples[2];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c878bb797411856a12148f33210be3e875acf9f"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4187, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}