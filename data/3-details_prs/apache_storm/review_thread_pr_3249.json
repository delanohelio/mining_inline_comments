{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0MDA1NjQ1", "number": 3249, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwOToxMTozMFrODyaUQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxOTo1OToxNlrODyp3rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MTg2NTYyOnYy", "diffSide": "RIGHT", "path": "storm-server/src/main/java/org/apache/storm/scheduler/utils/SchedulerConfigRefresher.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwOToxMTozMFrOGGb-1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNDowOTo1NVrOGGnM3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQwMzA5Mw==", "bodyText": "Will this terminate the currently running process?", "url": "https://github.com/apache/storm/pull/3249#discussion_r409403093", "createdAt": "2020-04-16T09:11:30Z", "author": {"login": "bipinprasad"}, "path": "storm-server/src/main/java/org/apache/storm/scheduler/utils/SchedulerConfigRefresher.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.  The ASF licenses this file to you under the Apache License, Version\n+ * 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n+ * and limitations under the License.\n+ */\n+\n+package org.apache.storm.scheduler.utils;\n+\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicReference;\n+import org.apache.storm.DaemonConfig;\n+import org.apache.storm.StormTimer;\n+import org.apache.storm.utils.ObjectReader;\n+import org.apache.storm.utils.Utils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class SchedulerConfigRefresher<T> {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(SchedulerConfigRefresher.class);\n+\n+    private final StormTimer configRefreshTimer;\n+    private AtomicReference<T> schedulerConfigAtomicReference;\n+    private final Reloadable<T> reloader;\n+    private final Map<String, Object> conf;\n+\n+    public SchedulerConfigRefresher(Map<String, Object> conf, Reloadable<T> reloader) {\n+        configRefreshTimer = new StormTimer(\"scheduler-config-refresher\", (t, e) -> {\n+            LOG.error(\"Error while refreshing scheduler config\", e);\n+            Utils.exitProcess(20, \"Error while refreshing scheduler config\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cfe6bfa2decd26d86f66fda377c0ac50bde02f1"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU4NjkwOQ==", "bodyText": "If this thread has any errors, yes.", "url": "https://github.com/apache/storm/pull/3249#discussion_r409586909", "createdAt": "2020-04-16T14:09:55Z", "author": {"login": "Ethanlm"}, "path": "storm-server/src/main/java/org/apache/storm/scheduler/utils/SchedulerConfigRefresher.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.  The ASF licenses this file to you under the Apache License, Version\n+ * 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n+ * and limitations under the License.\n+ */\n+\n+package org.apache.storm.scheduler.utils;\n+\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicReference;\n+import org.apache.storm.DaemonConfig;\n+import org.apache.storm.StormTimer;\n+import org.apache.storm.utils.ObjectReader;\n+import org.apache.storm.utils.Utils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class SchedulerConfigRefresher<T> {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(SchedulerConfigRefresher.class);\n+\n+    private final StormTimer configRefreshTimer;\n+    private AtomicReference<T> schedulerConfigAtomicReference;\n+    private final Reloadable<T> reloader;\n+    private final Map<String, Object> conf;\n+\n+    public SchedulerConfigRefresher(Map<String, Object> conf, Reloadable<T> reloader) {\n+        configRefreshTimer = new StormTimer(\"scheduler-config-refresher\", (t, e) -> {\n+            LOG.error(\"Error while refreshing scheduler config\", e);\n+            Utils.exitProcess(20, \"Error while refreshing scheduler config\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQwMzA5Mw=="}, "originalCommit": {"oid": "4cfe6bfa2decd26d86f66fda377c0ac50bde02f1"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NDQxMzg4OnYy", "diffSide": "RIGHT", "path": "storm-server/src/main/java/org/apache/storm/scheduler/multitenant/MultitenantScheduler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxOTo1OToxNlrOGG1DmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMDowMzo1OVrOGG1Nlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgxMzkxMw==", "bodyText": "Since SchedulerConfigCache is now just a wrapper around loadConfig() method, can the class be removed and loadConfig() be called directly at the beginning of schedule?", "url": "https://github.com/apache/storm/pull/3249#discussion_r409813913", "createdAt": "2020-04-16T19:59:16Z", "author": {"login": "bipinprasad"}, "path": "storm-server/src/main/java/org/apache/storm/scheduler/multitenant/MultitenantScheduler.java", "diffHunk": "@@ -30,20 +32,22 @@\n     private static final Logger LOG = LoggerFactory.getLogger(MultitenantScheduler.class);\n     protected IConfigLoader configLoader;\n     private Map<String, Object> conf;\n+    private SchedulerConfigCache<Map<String, Number>> schedulerConfigCache;\n \n     @Override\n     public void prepare(Map<String, Object> conf, StormMetricsRegistry metricsRegistry) {\n         this.conf = conf;\n         configLoader = ConfigLoaderFactoryService.createConfigLoader(conf);\n-\n+        schedulerConfigCache = new SchedulerConfigCache<>(conf, this::loadConfig);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8d3914585d2e1a634a4006da447dcb950434089"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgxNjQ3MQ==", "bodyText": "There are currently two schedulers (ResourceAwareScheduler, MultitenantScheduler) need to have this logic (caching/refreshing). And maybe in the future a new scheduler or other existing schedulers will want to have configs too.  I keep this class to wrap the logic and to avoid repeat the code in schedulers.", "url": "https://github.com/apache/storm/pull/3249#discussion_r409816471", "createdAt": "2020-04-16T20:03:59Z", "author": {"login": "Ethanlm"}, "path": "storm-server/src/main/java/org/apache/storm/scheduler/multitenant/MultitenantScheduler.java", "diffHunk": "@@ -30,20 +32,22 @@\n     private static final Logger LOG = LoggerFactory.getLogger(MultitenantScheduler.class);\n     protected IConfigLoader configLoader;\n     private Map<String, Object> conf;\n+    private SchedulerConfigCache<Map<String, Number>> schedulerConfigCache;\n \n     @Override\n     public void prepare(Map<String, Object> conf, StormMetricsRegistry metricsRegistry) {\n         this.conf = conf;\n         configLoader = ConfigLoaderFactoryService.createConfigLoader(conf);\n-\n+        schedulerConfigCache = new SchedulerConfigCache<>(conf, this::loadConfig);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgxMzkxMw=="}, "originalCommit": {"oid": "d8d3914585d2e1a634a4006da447dcb950434089"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4275, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}