{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4ODQ4MjEw", "number": 9993, "reviewThreads": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMTowOTo1OFrOEQzAKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMTo0MTo0OVrOETAPuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDQ4Mjk3OnYy", "diffSide": "RIGHT", "path": "runtime/shared_common/CacheMap.cpp", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMTowOTo1OFrOG1J4PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNTowOTo0MlrOG1m9mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM4OTU2NQ==", "bodyText": "I guess line 5194 to line 5198 can all be moved into printAOTHeader().", "url": "https://github.com/eclipse-openj9/openj9/pull/9993#discussion_r458389565", "createdAt": "2020-07-21T21:09:58Z", "author": {"login": "hangshao0"}, "path": "runtime/shared_common/CacheMap.cpp", "diffHunk": "@@ -5191,6 +5191,14 @@ SH_CacheMap::printCacheStatsTopLayerStatsHelper(J9VMThread* currentThread, UDATA\n \t\tCACHEMAP_PRINT1(J9NLS_DO_NOT_PRINT_MESSAGE_TAG, J9NLS_SHRC_CM_PRINTSTATS_FEATURE, \"default\");\n \t}\n \n+\tj9tty_printf(_portlib, \"\\t\");\n+\tJ9SharedDataDescriptor firstDescriptor;\n+\tfirstDescriptor.address = NULL;\n+\tfindSharedData(currentThread, \"J9AOTHeader\", sizeof(\"J9AOTHeader\") - 1, J9SHR_DATA_TYPE_AOTHEADER, FALSE, &firstDescriptor, NULL);\n+\tchar buff[500];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dda8822fe54371b63eeb359d86fe5d183c2eae7a"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQyMTE5Ng==", "bodyText": "I tried to do findSharedData() in printAOTHeader() before,  get firstDescriptor.address == NULL. I'm not sure why, maybe it's because sharedClassConfig->findSharedData hasn't been initialized at this point?\n   currentThread->javaVM->sharedClassConfig->findSharedData(currentThread, \"J9AOTHeader\", sizeof(\"J9AOTHeader\") - 1, J9SHR_DATA_TYPE_AOTHEADER, FALSE, &firstDescriptor, NULL);\n   if (!firstDescriptor.address)\n      {\n      strncat(buff, \"null\", buffSize);\n      return;\n      }", "url": "https://github.com/eclipse-openj9/openj9/pull/9993#discussion_r458421196", "createdAt": "2020-07-21T22:18:05Z", "author": {"login": "harryyu1994"}, "path": "runtime/shared_common/CacheMap.cpp", "diffHunk": "@@ -5191,6 +5191,14 @@ SH_CacheMap::printCacheStatsTopLayerStatsHelper(J9VMThread* currentThread, UDATA\n \t\tCACHEMAP_PRINT1(J9NLS_DO_NOT_PRINT_MESSAGE_TAG, J9NLS_SHRC_CM_PRINTSTATS_FEATURE, \"default\");\n \t}\n \n+\tj9tty_printf(_portlib, \"\\t\");\n+\tJ9SharedDataDescriptor firstDescriptor;\n+\tfirstDescriptor.address = NULL;\n+\tfindSharedData(currentThread, \"J9AOTHeader\", sizeof(\"J9AOTHeader\") - 1, J9SHR_DATA_TYPE_AOTHEADER, FALSE, &firstDescriptor, NULL);\n+\tchar buff[500];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM4OTU2NQ=="}, "originalCommit": {"oid": "dda8822fe54371b63eeb359d86fe5d183c2eae7a"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg2NjA3NA==", "bodyText": "OK, I see. It is because of this check: https://github.com/eclipse/openj9/blob/master/runtime/shared_common/shrinit.cpp#L1860. Then I am fine with putting all the new code here inside if (NULL != currentThread->javaVM->jitConfig) {}", "url": "https://github.com/eclipse-openj9/openj9/pull/9993#discussion_r458866074", "createdAt": "2020-07-22T15:09:42Z", "author": {"login": "hangshao0"}, "path": "runtime/shared_common/CacheMap.cpp", "diffHunk": "@@ -5191,6 +5191,14 @@ SH_CacheMap::printCacheStatsTopLayerStatsHelper(J9VMThread* currentThread, UDATA\n \t\tCACHEMAP_PRINT1(J9NLS_DO_NOT_PRINT_MESSAGE_TAG, J9NLS_SHRC_CM_PRINTSTATS_FEATURE, \"default\");\n \t}\n \n+\tj9tty_printf(_portlib, \"\\t\");\n+\tJ9SharedDataDescriptor firstDescriptor;\n+\tfirstDescriptor.address = NULL;\n+\tfindSharedData(currentThread, \"J9AOTHeader\", sizeof(\"J9AOTHeader\") - 1, J9SHR_DATA_TYPE_AOTHEADER, FALSE, &firstDescriptor, NULL);\n+\tchar buff[500];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM4OTU2NQ=="}, "originalCommit": {"oid": "dda8822fe54371b63eeb359d86fe5d183c2eae7a"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDQ4NzU0OnYy", "diffSide": "RIGHT", "path": "runtime/shared_common/CacheMap.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMToxMToxOFrOG1J65A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMToxMToxOFrOG1J65A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM5MDI0NA==", "bodyText": "You may want to do a null check on currentThread->javaVM->jitConfig first.", "url": "https://github.com/eclipse-openj9/openj9/pull/9993#discussion_r458390244", "createdAt": "2020-07-21T21:11:18Z", "author": {"login": "hangshao0"}, "path": "runtime/shared_common/CacheMap.cpp", "diffHunk": "@@ -5191,6 +5191,14 @@ SH_CacheMap::printCacheStatsTopLayerStatsHelper(J9VMThread* currentThread, UDATA\n \t\tCACHEMAP_PRINT1(J9NLS_DO_NOT_PRINT_MESSAGE_TAG, J9NLS_SHRC_CM_PRINTSTATS_FEATURE, \"default\");\n \t}\n \n+\tj9tty_printf(_portlib, \"\\t\");\n+\tJ9SharedDataDescriptor firstDescriptor;\n+\tfirstDescriptor.address = NULL;\n+\tfindSharedData(currentThread, \"J9AOTHeader\", sizeof(\"J9AOTHeader\") - 1, J9SHR_DATA_TYPE_AOTHEADER, FALSE, &firstDescriptor, NULL);\n+\tchar buff[500];\n+\tcurrentThread->javaVM->jitConfig->printAOTHeader(firstDescriptor.address, buff, 500);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dda8822fe54371b63eeb359d86fe5d183c2eae7a"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDUwNzAyOnYy", "diffSide": "RIGHT", "path": "runtime/shared/shrclssup.c", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMToxNzoxMVrOG1KGkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQyMjo1Mzo1NFrOG2_wXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM5MzIzNQ==", "bodyText": "Is the JIT code that checks sharedCachePortable inside #if defined(J9X86) ? If not, you may want to put these 2 FIND_AND_CONSUME_ARG calls inside #if defined(J9X86)", "url": "https://github.com/eclipse-openj9/openj9/pull/9993#discussion_r458393235", "createdAt": "2020-07-21T21:17:11Z", "author": {"login": "hangshao0"}, "path": "runtime/shared/shrclssup.c", "diffHunk": "@@ -141,6 +141,23 @@ IDATA J9VMDllMain(J9JavaVM* vm, IDATA stage, void* reserved)\n \t\t\t\t\truntimeFlags |= J9SHR_RUNTIMEFLAG_DISABLE_BCI;\n \t\t\t\t}\n \n+\t\t\t\t/* Check for -XX:+PortableSharedCache and -XX:-PortableSharedCache; whichever comes later wins.\n+\t\t\t\t * These options should be checked before parseArgs() to allow -Xshareclasses:portable to override this option.\n+\t\t\t\t * \n+\t\t\t\t * Note: Please also change the function checkArgsConsumed() in runtime/vm/jvminit.c when adding new options,\n+\t\t\t\t * in order to quietly consume the options if it is used without -Xshareclasses\n+\t\t\t\t */\n+\t\t\t\targIndex1 = FIND_AND_CONSUME_ARG(EXACT_MATCH, VMOPT_XXPORTABLESHAREDCACHE, NULL);\n+\t\t\t\targIndex2 = FIND_AND_CONSUME_ARG(EXACT_MATCH, VMOPT_XXNOPORTABLESHAREDCACHE, NULL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dda8822fe54371b63eeb359d86fe5d183c2eae7a"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMyMDg2Mg==", "bodyText": "@hangshao0 Actually I just found out (local testing) that J9X86 is not defined here. Is there another MACRO we can use?", "url": "https://github.com/eclipse-openj9/openj9/pull/9993#discussion_r460320862", "createdAt": "2020-07-24T22:53:54Z", "author": {"login": "harryyu1994"}, "path": "runtime/shared/shrclssup.c", "diffHunk": "@@ -141,6 +141,23 @@ IDATA J9VMDllMain(J9JavaVM* vm, IDATA stage, void* reserved)\n \t\t\t\t\truntimeFlags |= J9SHR_RUNTIMEFLAG_DISABLE_BCI;\n \t\t\t\t}\n \n+\t\t\t\t/* Check for -XX:+PortableSharedCache and -XX:-PortableSharedCache; whichever comes later wins.\n+\t\t\t\t * These options should be checked before parseArgs() to allow -Xshareclasses:portable to override this option.\n+\t\t\t\t * \n+\t\t\t\t * Note: Please also change the function checkArgsConsumed() in runtime/vm/jvminit.c when adding new options,\n+\t\t\t\t * in order to quietly consume the options if it is used without -Xshareclasses\n+\t\t\t\t */\n+\t\t\t\targIndex1 = FIND_AND_CONSUME_ARG(EXACT_MATCH, VMOPT_XXPORTABLESHAREDCACHE, NULL);\n+\t\t\t\targIndex2 = FIND_AND_CONSUME_ARG(EXACT_MATCH, VMOPT_XXNOPORTABLESHAREDCACHE, NULL);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM5MzIzNQ=="}, "originalCommit": {"oid": "dda8822fe54371b63eeb359d86fe5d183c2eae7a"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MzU2ODk5OnYy", "diffSide": "RIGHT", "path": "runtime/shared/shrclssup.c", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNToxMTo0MVrOG1nDcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNToxMTo0MVrOG1nDcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg2NzU3MQ==", "bodyText": "Please add /* defined(J9X86) */ after endif.", "url": "https://github.com/eclipse-openj9/openj9/pull/9993#discussion_r458867571", "createdAt": "2020-07-22T15:11:41Z", "author": {"login": "hangshao0"}, "path": "runtime/shared/shrclssup.c", "diffHunk": "@@ -141,6 +141,25 @@ IDATA J9VMDllMain(J9JavaVM* vm, IDATA stage, void* reserved)\n \t\t\t\t\truntimeFlags |= J9SHR_RUNTIMEFLAG_DISABLE_BCI;\n \t\t\t\t}\n \n+#if defined(J9X86)\n+\t\t\t\t/* Check for -XX:+PortableSharedCache and -XX:-PortableSharedCache; whichever comes later wins.\n+\t\t\t\t * These options should be checked before parseArgs() to allow -Xshareclasses:portable to override this option.\n+\t\t\t\t * \n+\t\t\t\t * Note: Please also change the function checkArgsConsumed() in runtime/vm/jvminit.c when adding new options,\n+\t\t\t\t * in order to quietly consume the options if it is used without -Xshareclasses\n+\t\t\t\t */\n+\t\t\t\targIndex1 = FIND_AND_CONSUME_ARG(EXACT_MATCH, VMOPT_XXPORTABLESHAREDCACHE, NULL);\n+\t\t\t\targIndex2 = FIND_AND_CONSUME_ARG(EXACT_MATCH, VMOPT_XXNOPORTABLESHAREDCACHE, NULL);\n+\t\t\t\tif (argIndex2 > argIndex1) {\n+\t\t\t\t\tvm->sharedCacheAPI->sharedCachePortable = FALSE;\n+\t\t\t\t} else if (argIndex1 > argIndex2) {\n+\t\t\t\t\tvm->sharedCacheAPI->sharedCachePortable = TRUE;\n+\t\t\t\t} else {\n+\t\t\t\t\tOMRPORT_ACCESS_FROM_J9PORT(vm->portLibrary);\n+\t\t\t\t\tvm->sharedCacheAPI->sharedCachePortable = omrsysinfo_is_running_in_container();\n+\t\t\t\t}\n+#endif", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a112d3b7e5f56c58532e5f1861c4ab4043db851"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MzU3OTA5OnYy", "diffSide": "LEFT", "path": "runtime/shared_common/ByteDataManagerImpl.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNToxMzo1OFrOG1nKCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNToxMzo1OFrOG1nKCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg2OTI1Ng==", "bodyText": "I see there are only blank line and copy right date change for this file. Please remove this file from this PR.", "url": "https://github.com/eclipse-openj9/openj9/pull/9993#discussion_r458869256", "createdAt": "2020-07-22T15:13:58Z", "author": {"login": "hangshao0"}, "path": "runtime/shared_common/ByteDataManagerImpl.cpp", "diffHunk": "@@ -354,7 +354,6 @@ SH_ByteDataManagerImpl::find(J9VMThread* currentThread, const char* key, UDATA k\n \t}\t\n \n \tTrc_SHR_BDMI_find_Exit(currentThread, resultCntr);\n-\t\t", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a112d3b7e5f56c58532e5f1861c4ab4043db851"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODYxMTUxOnYy", "diffSide": "RIGHT", "path": "runtime/shared_common/CacheMap.cpp", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODo0NTowOVrOG2XJBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQxMjo0Njo0MlrOG3EsuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY1NTQyOQ==", "bodyText": "Is this going to work on platforms other than X86?", "url": "https://github.com/eclipse-openj9/openj9/pull/9993#discussion_r459655429", "createdAt": "2020-07-23T18:45:09Z", "author": {"login": "pshipton"}, "path": "runtime/shared_common/CacheMap.cpp", "diffHunk": "@@ -5191,6 +5191,16 @@ SH_CacheMap::printCacheStatsTopLayerStatsHelper(J9VMThread* currentThread, UDATA\n \t\tCACHEMAP_PRINT1(J9NLS_DO_NOT_PRINT_MESSAGE_TAG, J9NLS_SHRC_CM_PRINTSTATS_FEATURE, \"default\");\n \t}\n \n+\tif (currentThread->javaVM->jitConfig) {\n+\t\tj9tty_printf(_portlib, \"\\t\");\n+\t\tJ9SharedDataDescriptor firstDescriptor;\n+\t\tfirstDescriptor.address = NULL;\n+\t\tfindSharedData(currentThread, \"J9AOTHeader\", sizeof(\"J9AOTHeader\") - 1, J9SHR_DATA_TYPE_AOTHEADER, FALSE, &firstDescriptor, NULL);\n+\t\tchar processorFeatures[500];\n+\t\tcurrentThread->javaVM->jitConfig->printAOTHeader(firstDescriptor.address, processorFeatures, 500);\n+\t\tCACHEMAP_PRINT1(J9NLS_DO_NOT_PRINT_MESSAGE_TAG, J9NLS_SHRC_CM_PRINTSTATS_PROCESSOR_FEATURES, processorFeatures);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "469ab7c1e89ebdd9dba49cb0e4db7e1824e1215c"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY1ODMwMA==", "bodyText": "not yet on other platforms, I will guard these with J9X86 for now.", "url": "https://github.com/eclipse-openj9/openj9/pull/9993#discussion_r459658300", "createdAt": "2020-07-23T18:50:19Z", "author": {"login": "harryyu1994"}, "path": "runtime/shared_common/CacheMap.cpp", "diffHunk": "@@ -5191,6 +5191,16 @@ SH_CacheMap::printCacheStatsTopLayerStatsHelper(J9VMThread* currentThread, UDATA\n \t\tCACHEMAP_PRINT1(J9NLS_DO_NOT_PRINT_MESSAGE_TAG, J9NLS_SHRC_CM_PRINTSTATS_FEATURE, \"default\");\n \t}\n \n+\tif (currentThread->javaVM->jitConfig) {\n+\t\tj9tty_printf(_portlib, \"\\t\");\n+\t\tJ9SharedDataDescriptor firstDescriptor;\n+\t\tfirstDescriptor.address = NULL;\n+\t\tfindSharedData(currentThread, \"J9AOTHeader\", sizeof(\"J9AOTHeader\") - 1, J9SHR_DATA_TYPE_AOTHEADER, FALSE, &firstDescriptor, NULL);\n+\t\tchar processorFeatures[500];\n+\t\tcurrentThread->javaVM->jitConfig->printAOTHeader(firstDescriptor.address, processorFeatures, 500);\n+\t\tCACHEMAP_PRINT1(J9NLS_DO_NOT_PRINT_MESSAGE_TAG, J9NLS_SHRC_CM_PRINTSTATS_PROCESSOR_FEATURES, processorFeatures);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY1NTQyOQ=="}, "originalCommit": {"oid": "469ab7c1e89ebdd9dba49cb0e4db7e1824e1215c"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMyMTMwOA==", "bodyText": "@pshipton my defined(J9X86) attempt was unsuccessful, it didn't look like it was set on x86 for some reason (at least not in this file). Is there another MARCO I can use?", "url": "https://github.com/eclipse-openj9/openj9/pull/9993#discussion_r460321308", "createdAt": "2020-07-24T22:55:43Z", "author": {"login": "harryyu1994"}, "path": "runtime/shared_common/CacheMap.cpp", "diffHunk": "@@ -5191,6 +5191,16 @@ SH_CacheMap::printCacheStatsTopLayerStatsHelper(J9VMThread* currentThread, UDATA\n \t\tCACHEMAP_PRINT1(J9NLS_DO_NOT_PRINT_MESSAGE_TAG, J9NLS_SHRC_CM_PRINTSTATS_FEATURE, \"default\");\n \t}\n \n+\tif (currentThread->javaVM->jitConfig) {\n+\t\tj9tty_printf(_portlib, \"\\t\");\n+\t\tJ9SharedDataDescriptor firstDescriptor;\n+\t\tfirstDescriptor.address = NULL;\n+\t\tfindSharedData(currentThread, \"J9AOTHeader\", sizeof(\"J9AOTHeader\") - 1, J9SHR_DATA_TYPE_AOTHEADER, FALSE, &firstDescriptor, NULL);\n+\t\tchar processorFeatures[500];\n+\t\tcurrentThread->javaVM->jitConfig->printAOTHeader(firstDescriptor.address, processorFeatures, 500);\n+\t\tCACHEMAP_PRINT1(J9NLS_DO_NOT_PRINT_MESSAGE_TAG, J9NLS_SHRC_CM_PRINTSTATS_PROCESSOR_FEATURES, processorFeatures);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY1NTQyOQ=="}, "originalCommit": {"oid": "469ab7c1e89ebdd9dba49cb0e4db7e1824e1215c"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQwMTU1OA==", "bodyText": "J9VM_ARCH_X86 should work.", "url": "https://github.com/eclipse-openj9/openj9/pull/9993#discussion_r460401558", "createdAt": "2020-07-25T12:43:52Z", "author": {"login": "pshipton"}, "path": "runtime/shared_common/CacheMap.cpp", "diffHunk": "@@ -5191,6 +5191,16 @@ SH_CacheMap::printCacheStatsTopLayerStatsHelper(J9VMThread* currentThread, UDATA\n \t\tCACHEMAP_PRINT1(J9NLS_DO_NOT_PRINT_MESSAGE_TAG, J9NLS_SHRC_CM_PRINTSTATS_FEATURE, \"default\");\n \t}\n \n+\tif (currentThread->javaVM->jitConfig) {\n+\t\tj9tty_printf(_portlib, \"\\t\");\n+\t\tJ9SharedDataDescriptor firstDescriptor;\n+\t\tfirstDescriptor.address = NULL;\n+\t\tfindSharedData(currentThread, \"J9AOTHeader\", sizeof(\"J9AOTHeader\") - 1, J9SHR_DATA_TYPE_AOTHEADER, FALSE, &firstDescriptor, NULL);\n+\t\tchar processorFeatures[500];\n+\t\tcurrentThread->javaVM->jitConfig->printAOTHeader(firstDescriptor.address, processorFeatures, 500);\n+\t\tCACHEMAP_PRINT1(J9NLS_DO_NOT_PRINT_MESSAGE_TAG, J9NLS_SHRC_CM_PRINTSTATS_PROCESSOR_FEATURES, processorFeatures);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY1NTQyOQ=="}, "originalCommit": {"oid": "469ab7c1e89ebdd9dba49cb0e4db7e1824e1215c"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQwMTg0OQ==", "bodyText": "J9X86 seems specific to Linux", "url": "https://github.com/eclipse-openj9/openj9/pull/9993#discussion_r460401849", "createdAt": "2020-07-25T12:46:42Z", "author": {"login": "pshipton"}, "path": "runtime/shared_common/CacheMap.cpp", "diffHunk": "@@ -5191,6 +5191,16 @@ SH_CacheMap::printCacheStatsTopLayerStatsHelper(J9VMThread* currentThread, UDATA\n \t\tCACHEMAP_PRINT1(J9NLS_DO_NOT_PRINT_MESSAGE_TAG, J9NLS_SHRC_CM_PRINTSTATS_FEATURE, \"default\");\n \t}\n \n+\tif (currentThread->javaVM->jitConfig) {\n+\t\tj9tty_printf(_portlib, \"\\t\");\n+\t\tJ9SharedDataDescriptor firstDescriptor;\n+\t\tfirstDescriptor.address = NULL;\n+\t\tfindSharedData(currentThread, \"J9AOTHeader\", sizeof(\"J9AOTHeader\") - 1, J9SHR_DATA_TYPE_AOTHEADER, FALSE, &firstDescriptor, NULL);\n+\t\tchar processorFeatures[500];\n+\t\tcurrentThread->javaVM->jitConfig->printAOTHeader(firstDescriptor.address, processorFeatures, 500);\n+\t\tCACHEMAP_PRINT1(J9NLS_DO_NOT_PRINT_MESSAGE_TAG, J9NLS_SHRC_CM_PRINTSTATS_PROCESSOR_FEATURES, processorFeatures);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY1NTQyOQ=="}, "originalCommit": {"oid": "469ab7c1e89ebdd9dba49cb0e4db7e1824e1215c"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODgyODEzOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/runtime/RelocationRuntime.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOTo1MTowNVrOG2ZPgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOTo1MTowNVrOG2ZPgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY4OTg1OQ==", "bodyText": "nitpick, keep this next to PORT_ACCESS_FROM_PORT", "url": "https://github.com/eclipse-openj9/openj9/pull/9993#discussion_r459689859", "createdAt": "2020-07-23T19:51:05Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/runtime/RelocationRuntime.cpp", "diffHunk": "@@ -1404,3 +1404,44 @@ TR_JITServerRelocationRuntime::copyDataToCodeCache(const void *startAddress, siz\n    return coldCodeStart;\n    }\n #endif /* defined(J9VM_OPT_JITSERVER) */\n+\n+void\n+printAOTHeader(const void* aotHeaderAddress, char * buff, size_t buffSize)\n+   {\n+   if (!aotHeaderAddress)\n+      {\n+      strncat(buff, \"null\", buffSize);\n+      return;\n+      }\n+\n+   PORT_ACCESS_FROM_PORT(TR::Compiler->portLib);\n+   TR_AOTHeader * hdrInCache = (TR_AOTHeader *)aotHeaderAddress;\n+\n+   OMRProcessorDesc processorDescription = hdrInCache->processorDescription;\n+   OMRPORT_ACCESS_FROM_OMRPORT(TR::Compiler->omrPortLib);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3837db8895449801aa87fee1bde5cbb9d7ae36f"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODg2Nzc2OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/runtime/RelocationRuntime.cpp", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMDowMzoxM1rOG2ZoGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMDoyODowNFrOG2aZiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY5NjE1NQ==", "bodyText": "I think you should keep track of the return value of strncat so that you don't overrun buff.", "url": "https://github.com/eclipse-openj9/openj9/pull/9993#discussion_r459696155", "createdAt": "2020-07-23T20:03:13Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/runtime/RelocationRuntime.cpp", "diffHunk": "@@ -1404,3 +1404,44 @@ TR_JITServerRelocationRuntime::copyDataToCodeCache(const void *startAddress, siz\n    return coldCodeStart;\n    }\n #endif /* defined(J9VM_OPT_JITSERVER) */\n+\n+void\n+printAOTHeader(const void* aotHeaderAddress, char * buff, size_t buffSize)\n+   {\n+   if (!aotHeaderAddress)\n+      {\n+      strncat(buff, \"null\", buffSize);\n+      return;\n+      }\n+\n+   PORT_ACCESS_FROM_PORT(TR::Compiler->portLib);\n+   TR_AOTHeader * hdrInCache = (TR_AOTHeader *)aotHeaderAddress;\n+\n+   OMRProcessorDesc processorDescription = hdrInCache->processorDescription;\n+   OMRPORT_ACCESS_FROM_OMRPORT(TR::Compiler->omrPortLib);\n+   int length = 0;\n+   for (size_t i = 0; i < OMRPORT_SYSINFO_FEATURES_SIZE; i++)\n+      {\n+      for (int j = 0; j < 32; j++) \n+         {\n+         if (processorDescription.features[i] & (1<<j))\n+            {\n+            if (length >= 20)\n+               {\n+               strncat(buff, \"\\n\\t                                       \", buffSize);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3837db8895449801aa87fee1bde5cbb9d7ae36f"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY5ODg1OQ==", "bodyText": "Would also be better to use the size of the source string, rather than buffSize which is the size of the dest.", "url": "https://github.com/eclipse-openj9/openj9/pull/9993#discussion_r459698859", "createdAt": "2020-07-23T20:08:25Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/runtime/RelocationRuntime.cpp", "diffHunk": "@@ -1404,3 +1404,44 @@ TR_JITServerRelocationRuntime::copyDataToCodeCache(const void *startAddress, siz\n    return coldCodeStart;\n    }\n #endif /* defined(J9VM_OPT_JITSERVER) */\n+\n+void\n+printAOTHeader(const void* aotHeaderAddress, char * buff, size_t buffSize)\n+   {\n+   if (!aotHeaderAddress)\n+      {\n+      strncat(buff, \"null\", buffSize);\n+      return;\n+      }\n+\n+   PORT_ACCESS_FROM_PORT(TR::Compiler->portLib);\n+   TR_AOTHeader * hdrInCache = (TR_AOTHeader *)aotHeaderAddress;\n+\n+   OMRProcessorDesc processorDescription = hdrInCache->processorDescription;\n+   OMRPORT_ACCESS_FROM_OMRPORT(TR::Compiler->omrPortLib);\n+   int length = 0;\n+   for (size_t i = 0; i < OMRPORT_SYSINFO_FEATURES_SIZE; i++)\n+      {\n+      for (int j = 0; j < 32; j++) \n+         {\n+         if (processorDescription.features[i] & (1<<j))\n+            {\n+            if (length >= 20)\n+               {\n+               strncat(buff, \"\\n\\t                                       \", buffSize);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY5NjE1NQ=="}, "originalCommit": {"oid": "e3837db8895449801aa87fee1bde5cbb9d7ae36f"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcwODgwOA==", "bodyText": "I intended to use the third parameter to prevent overflow but I didn't do it right\nShould be something like this:\nThe third parameter gives you the maximum number of chars allowed to be written to buff.\nstrncat(buff, \"string\", BUFF_SIZE - strlen(buff) - 1);\nI don't think the return value of strncat help here.", "url": "https://github.com/eclipse-openj9/openj9/pull/9993#discussion_r459708808", "createdAt": "2020-07-23T20:28:04Z", "author": {"login": "harryyu1994"}, "path": "runtime/compiler/runtime/RelocationRuntime.cpp", "diffHunk": "@@ -1404,3 +1404,44 @@ TR_JITServerRelocationRuntime::copyDataToCodeCache(const void *startAddress, siz\n    return coldCodeStart;\n    }\n #endif /* defined(J9VM_OPT_JITSERVER) */\n+\n+void\n+printAOTHeader(const void* aotHeaderAddress, char * buff, size_t buffSize)\n+   {\n+   if (!aotHeaderAddress)\n+      {\n+      strncat(buff, \"null\", buffSize);\n+      return;\n+      }\n+\n+   PORT_ACCESS_FROM_PORT(TR::Compiler->portLib);\n+   TR_AOTHeader * hdrInCache = (TR_AOTHeader *)aotHeaderAddress;\n+\n+   OMRProcessorDesc processorDescription = hdrInCache->processorDescription;\n+   OMRPORT_ACCESS_FROM_OMRPORT(TR::Compiler->omrPortLib);\n+   int length = 0;\n+   for (size_t i = 0; i < OMRPORT_SYSINFO_FEATURES_SIZE; i++)\n+      {\n+      for (int j = 0; j < 32; j++) \n+         {\n+         if (processorDescription.features[i] & (1<<j))\n+            {\n+            if (length >= 20)\n+               {\n+               strncat(buff, \"\\n\\t                                       \", buffSize);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY5NjE1NQ=="}, "originalCommit": {"oid": "e3837db8895449801aa87fee1bde5cbb9d7ae36f"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODk5MjU1OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/runtime/RelocationRuntime.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMDo0MTo0MlrOG2a1Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMDo0MTo0MlrOG2a1Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcxNTg2Nw==", "bodyText": "Should be BUFF_SIZE", "url": "https://github.com/eclipse-openj9/openj9/pull/9993#discussion_r459715867", "createdAt": "2020-07-23T20:41:42Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/runtime/RelocationRuntime.cpp", "diffHunk": "@@ -1404,3 +1404,44 @@ TR_JITServerRelocationRuntime::copyDataToCodeCache(const void *startAddress, siz\n    return coldCodeStart;\n    }\n #endif /* defined(J9VM_OPT_JITSERVER) */\n+\n+void\n+printAOTHeader(const void* aotHeaderAddress, char * buff, const size_t BUFF_SIZE)\n+   {\n+   if (!aotHeaderAddress)\n+      {\n+      strncat(buff, \"null\", buffSize);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0f4010bb1ade7aae6bdfaabd7bdbe3f8624cff2"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTAxOTIyOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/runtime/RelocationRuntime.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMDo1MDowOVrOG2bFTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMDo1MDowOVrOG2bFTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcyMDAxMw==", "bodyText": "You should memset buff to 0 before entering the outermost for loop. Otherwise, depending on the stack, the first time you call strlen(buff) you might not get 0.", "url": "https://github.com/eclipse-openj9/openj9/pull/9993#discussion_r459720013", "createdAt": "2020-07-23T20:50:09Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/runtime/RelocationRuntime.cpp", "diffHunk": "@@ -1404,3 +1404,44 @@ TR_JITServerRelocationRuntime::copyDataToCodeCache(const void *startAddress, siz\n    return coldCodeStart;\n    }\n #endif /* defined(J9VM_OPT_JITSERVER) */\n+\n+void\n+printAOTHeader(const void* aotHeaderAddress, char * buff, const size_t BUFF_SIZE)\n+   {\n+   if (!aotHeaderAddress)\n+      {\n+      strncat(buff, \"null\", buffSize);\n+      return;\n+      }\n+\n+   PORT_ACCESS_FROM_PORT(TR::Compiler->portLib);\n+   OMRPORT_ACCESS_FROM_OMRPORT(TR::Compiler->omrPortLib);\n+   TR_AOTHeader * hdrInCache = (TR_AOTHeader *)aotHeaderAddress;\n+   OMRProcessorDesc processorDescription = hdrInCache->processorDescription;\n+\n+   int rowLength = 0;\n+   for (size_t i = 0; i < OMRPORT_SYSINFO_FEATURES_SIZE; i++)\n+      {\n+      for (int j = 0; j < 32; j++) \n+         {\n+         if (processorDescription.features[i] & (1<<j))\n+            {\n+            if (rowLength >= 20)\n+               {\n+               strncat(buff, \"\\n\\t                                       \", BUFF_SIZE - strlen(buff) - 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0f4010bb1ade7aae6bdfaabd7bdbe3f8624cff2"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDI5OTI5OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/runtime/RelocationRuntime.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwODowMzozOFrOG2mijA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwODowMzozOFrOG2mijA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkwNzcyNA==", "bodyText": "Is it possible to add some comments with the intent of this code?", "url": "https://github.com/eclipse-openj9/openj9/pull/9993#discussion_r459907724", "createdAt": "2020-07-24T08:03:38Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/runtime/RelocationRuntime.cpp", "diffHunk": "@@ -1404,3 +1404,45 @@ TR_JITServerRelocationRuntime::copyDataToCodeCache(const void *startAddress, siz\n    return coldCodeStart;\n    }\n #endif /* defined(J9VM_OPT_JITSERVER) */\n+\n+void\n+printAOTHeader(const void* aotHeaderAddress, char * buff, const size_t BUFF_SIZE)\n+   {\n+   memset(buff, 0, BUFF_SIZE*sizeof(char));\n+   if (!aotHeaderAddress)\n+      {\n+      strncat(buff, \"null\", BUFF_SIZE - strlen(buff) - 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60fb5a31926f81d591d6a5bc861db91f40205e4c"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDMwOTE5OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/runtime/RelocationRuntime.cpp", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwODowNzowNFrOG2mobQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxODozODo1NVrOG2548w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkwOTIyOQ==", "bodyText": "Is it possible do change the first parameter to TR_AOTHeader *aotHeaderAddress to avoid this cast. You would need to predeclare struct TR_AOTHeader in the file where printAOTHeader is used.", "url": "https://github.com/eclipse-openj9/openj9/pull/9993#discussion_r459909229", "createdAt": "2020-07-24T08:07:04Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/runtime/RelocationRuntime.cpp", "diffHunk": "@@ -1404,3 +1404,45 @@ TR_JITServerRelocationRuntime::copyDataToCodeCache(const void *startAddress, siz\n    return coldCodeStart;\n    }\n #endif /* defined(J9VM_OPT_JITSERVER) */\n+\n+void\n+printAOTHeader(const void* aotHeaderAddress, char * buff, const size_t BUFF_SIZE)\n+   {\n+   memset(buff, 0, BUFF_SIZE*sizeof(char));\n+   if (!aotHeaderAddress)\n+      {\n+      strncat(buff, \"null\", BUFF_SIZE - strlen(buff) - 1);\n+      return;\n+      }\n+\n+   PORT_ACCESS_FROM_PORT(TR::Compiler->portLib);\n+   OMRPORT_ACCESS_FROM_OMRPORT(TR::Compiler->omrPortLib);\n+   TR_AOTHeader * hdrInCache = (TR_AOTHeader *)aotHeaderAddress;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60fb5a31926f81d591d6a5bc861db91f40205e4c"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA5MzE3MQ==", "bodyText": "Might not be possible since printAOTHeader is called from the VM.", "url": "https://github.com/eclipse-openj9/openj9/pull/9993#discussion_r460093171", "createdAt": "2020-07-24T14:36:32Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/runtime/RelocationRuntime.cpp", "diffHunk": "@@ -1404,3 +1404,45 @@ TR_JITServerRelocationRuntime::copyDataToCodeCache(const void *startAddress, siz\n    return coldCodeStart;\n    }\n #endif /* defined(J9VM_OPT_JITSERVER) */\n+\n+void\n+printAOTHeader(const void* aotHeaderAddress, char * buff, const size_t BUFF_SIZE)\n+   {\n+   memset(buff, 0, BUFF_SIZE*sizeof(char));\n+   if (!aotHeaderAddress)\n+      {\n+      strncat(buff, \"null\", BUFF_SIZE - strlen(buff) - 1);\n+      return;\n+      }\n+\n+   PORT_ACCESS_FROM_PORT(TR::Compiler->portLib);\n+   OMRPORT_ACCESS_FROM_OMRPORT(TR::Compiler->omrPortLib);\n+   TR_AOTHeader * hdrInCache = (TR_AOTHeader *)aotHeaderAddress;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkwOTIyOQ=="}, "originalCommit": {"oid": "60fb5a31926f81d591d6a5bc861db91f40205e4c"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIyMTUxNw==", "bodyText": "I think it's possible, with forward declaration. Not sure that's cleaner than this though", "url": "https://github.com/eclipse-openj9/openj9/pull/9993#discussion_r460221517", "createdAt": "2020-07-24T18:32:00Z", "author": {"login": "harryyu1994"}, "path": "runtime/compiler/runtime/RelocationRuntime.cpp", "diffHunk": "@@ -1404,3 +1404,45 @@ TR_JITServerRelocationRuntime::copyDataToCodeCache(const void *startAddress, siz\n    return coldCodeStart;\n    }\n #endif /* defined(J9VM_OPT_JITSERVER) */\n+\n+void\n+printAOTHeader(const void* aotHeaderAddress, char * buff, const size_t BUFF_SIZE)\n+   {\n+   memset(buff, 0, BUFF_SIZE*sizeof(char));\n+   if (!aotHeaderAddress)\n+      {\n+      strncat(buff, \"null\", BUFF_SIZE - strlen(buff) - 1);\n+      return;\n+      }\n+\n+   PORT_ACCESS_FROM_PORT(TR::Compiler->portLib);\n+   OMRPORT_ACCESS_FROM_OMRPORT(TR::Compiler->omrPortLib);\n+   TR_AOTHeader * hdrInCache = (TR_AOTHeader *)aotHeaderAddress;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkwOTIyOQ=="}, "originalCommit": {"oid": "60fb5a31926f81d591d6a5bc861db91f40205e4c"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIyNDc1NQ==", "bodyText": "change added here: ddd80a3", "url": "https://github.com/eclipse-openj9/openj9/pull/9993#discussion_r460224755", "createdAt": "2020-07-24T18:38:55Z", "author": {"login": "harryyu1994"}, "path": "runtime/compiler/runtime/RelocationRuntime.cpp", "diffHunk": "@@ -1404,3 +1404,45 @@ TR_JITServerRelocationRuntime::copyDataToCodeCache(const void *startAddress, siz\n    return coldCodeStart;\n    }\n #endif /* defined(J9VM_OPT_JITSERVER) */\n+\n+void\n+printAOTHeader(const void* aotHeaderAddress, char * buff, const size_t BUFF_SIZE)\n+   {\n+   memset(buff, 0, BUFF_SIZE*sizeof(char));\n+   if (!aotHeaderAddress)\n+      {\n+      strncat(buff, \"null\", BUFF_SIZE - strlen(buff) - 1);\n+      return;\n+      }\n+\n+   PORT_ACCESS_FROM_PORT(TR::Compiler->portLib);\n+   OMRPORT_ACCESS_FROM_OMRPORT(TR::Compiler->omrPortLib);\n+   TR_AOTHeader * hdrInCache = (TR_AOTHeader *)aotHeaderAddress;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkwOTIyOQ=="}, "originalCommit": {"oid": "60fb5a31926f81d591d6a5bc861db91f40205e4c"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDM5MDc2OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/runtime/RelocationRuntime.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwODozMzoyOVrOG2nYhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNDozNjo1M1rOG2x33w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkyMTU0MA==", "bodyText": "What is the point of adding these long lines full of blanks?", "url": "https://github.com/eclipse-openj9/openj9/pull/9993#discussion_r459921540", "createdAt": "2020-07-24T08:33:29Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/runtime/RelocationRuntime.cpp", "diffHunk": "@@ -1404,3 +1404,45 @@ TR_JITServerRelocationRuntime::copyDataToCodeCache(const void *startAddress, siz\n    return coldCodeStart;\n    }\n #endif /* defined(J9VM_OPT_JITSERVER) */\n+\n+void\n+printAOTHeader(const void* aotHeaderAddress, char * buff, const size_t BUFF_SIZE)\n+   {\n+   memset(buff, 0, BUFF_SIZE*sizeof(char));\n+   if (!aotHeaderAddress)\n+      {\n+      strncat(buff, \"null\", BUFF_SIZE - strlen(buff) - 1);\n+      return;\n+      }\n+\n+   PORT_ACCESS_FROM_PORT(TR::Compiler->portLib);\n+   OMRPORT_ACCESS_FROM_OMRPORT(TR::Compiler->omrPortLib);\n+   TR_AOTHeader * hdrInCache = (TR_AOTHeader *)aotHeaderAddress;\n+   OMRProcessorDesc processorDescription = hdrInCache->processorDescription;\n+\n+   int rowLength = 0;\n+   for (size_t i = 0; i < OMRPORT_SYSINFO_FEATURES_SIZE; i++)\n+      {\n+      for (int j = 0; j < 32; j++) \n+         {\n+         if (processorDescription.features[i] & (1<<j))\n+            {\n+            if (rowLength >= 20)\n+               {\n+               strncat(buff, \"\\n\\t                                       \", BUFF_SIZE - strlen(buff) - 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60fb5a31926f81d591d6a5bc861db91f40205e4c"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA5MzQwNw==", "bodyText": "I believe for formatting (eg #9993 (comment))", "url": "https://github.com/eclipse-openj9/openj9/pull/9993#discussion_r460093407", "createdAt": "2020-07-24T14:36:53Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/runtime/RelocationRuntime.cpp", "diffHunk": "@@ -1404,3 +1404,45 @@ TR_JITServerRelocationRuntime::copyDataToCodeCache(const void *startAddress, siz\n    return coldCodeStart;\n    }\n #endif /* defined(J9VM_OPT_JITSERVER) */\n+\n+void\n+printAOTHeader(const void* aotHeaderAddress, char * buff, const size_t BUFF_SIZE)\n+   {\n+   memset(buff, 0, BUFF_SIZE*sizeof(char));\n+   if (!aotHeaderAddress)\n+      {\n+      strncat(buff, \"null\", BUFF_SIZE - strlen(buff) - 1);\n+      return;\n+      }\n+\n+   PORT_ACCESS_FROM_PORT(TR::Compiler->portLib);\n+   OMRPORT_ACCESS_FROM_OMRPORT(TR::Compiler->omrPortLib);\n+   TR_AOTHeader * hdrInCache = (TR_AOTHeader *)aotHeaderAddress;\n+   OMRProcessorDesc processorDescription = hdrInCache->processorDescription;\n+\n+   int rowLength = 0;\n+   for (size_t i = 0; i < OMRPORT_SYSINFO_FEATURES_SIZE; i++)\n+      {\n+      for (int j = 0; j < 32; j++) \n+         {\n+         if (processorDescription.features[i] & (1<<j))\n+            {\n+            if (rowLength >= 20)\n+               {\n+               strncat(buff, \"\\n\\t                                       \", BUFF_SIZE - strlen(buff) - 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkyMTU0MA=="}, "originalCommit": {"oid": "60fb5a31926f81d591d6a5bc861db91f40205e4c"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDQyNjIzOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/runtime/RelocationRuntime.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwODo0NTo0M1rOG2ntzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxODo0MzowMVrOG26ANA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkyNjk5MQ==", "bodyText": "Can we use something symbolic for this 32 value? sizeof(*processorDescription.features)", "url": "https://github.com/eclipse-openj9/openj9/pull/9993#discussion_r459926991", "createdAt": "2020-07-24T08:45:43Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/runtime/RelocationRuntime.cpp", "diffHunk": "@@ -1404,3 +1404,45 @@ TR_JITServerRelocationRuntime::copyDataToCodeCache(const void *startAddress, siz\n    return coldCodeStart;\n    }\n #endif /* defined(J9VM_OPT_JITSERVER) */\n+\n+void\n+printAOTHeader(const void* aotHeaderAddress, char * buff, const size_t BUFF_SIZE)\n+   {\n+   memset(buff, 0, BUFF_SIZE*sizeof(char));\n+   if (!aotHeaderAddress)\n+      {\n+      strncat(buff, \"null\", BUFF_SIZE - strlen(buff) - 1);\n+      return;\n+      }\n+\n+   PORT_ACCESS_FROM_PORT(TR::Compiler->portLib);\n+   OMRPORT_ACCESS_FROM_OMRPORT(TR::Compiler->omrPortLib);\n+   TR_AOTHeader * hdrInCache = (TR_AOTHeader *)aotHeaderAddress;\n+   OMRProcessorDesc processorDescription = hdrInCache->processorDescription;\n+\n+   int rowLength = 0;\n+   for (size_t i = 0; i < OMRPORT_SYSINFO_FEATURES_SIZE; i++)\n+      {\n+      for (int j = 0; j < 32; j++) ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60fb5a31926f81d591d6a5bc861db91f40205e4c"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIyNjYxMg==", "bodyText": "added CHAR_BIT*size(processorDescription.features[i])", "url": "https://github.com/eclipse-openj9/openj9/pull/9993#discussion_r460226612", "createdAt": "2020-07-24T18:43:01Z", "author": {"login": "harryyu1994"}, "path": "runtime/compiler/runtime/RelocationRuntime.cpp", "diffHunk": "@@ -1404,3 +1404,45 @@ TR_JITServerRelocationRuntime::copyDataToCodeCache(const void *startAddress, siz\n    return coldCodeStart;\n    }\n #endif /* defined(J9VM_OPT_JITSERVER) */\n+\n+void\n+printAOTHeader(const void* aotHeaderAddress, char * buff, const size_t BUFF_SIZE)\n+   {\n+   memset(buff, 0, BUFF_SIZE*sizeof(char));\n+   if (!aotHeaderAddress)\n+      {\n+      strncat(buff, \"null\", BUFF_SIZE - strlen(buff) - 1);\n+      return;\n+      }\n+\n+   PORT_ACCESS_FROM_PORT(TR::Compiler->portLib);\n+   OMRPORT_ACCESS_FROM_OMRPORT(TR::Compiler->omrPortLib);\n+   TR_AOTHeader * hdrInCache = (TR_AOTHeader *)aotHeaderAddress;\n+   OMRProcessorDesc processorDescription = hdrInCache->processorDescription;\n+\n+   int rowLength = 0;\n+   for (size_t i = 0; i < OMRPORT_SYSINFO_FEATURES_SIZE; i++)\n+      {\n+      for (int j = 0; j < 32; j++) ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkyNjk5MQ=="}, "originalCommit": {"oid": "60fb5a31926f81d591d6a5bc861db91f40205e4c"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTAxOTA1OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/control/rossa.cpp", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMToyODo1N1rOG30Qkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMTo1MTo1NFrOG306XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE4MTA3NQ==", "bodyText": "@pshipton Hi Peter, I have a question about tracepoints. When I tried ./java -Xtrace:print=j9jit.88 -XX:+PortableSharedCache -XX:-PortableSharedCache -version\nthe message doesn't get printed. Is there anything missing in my change?\n(I grepped for Trc_JIT_portableSharedCache_enabled_or_disabled to find the tracepoint number after I compiled the code. And it appears to be 88)\nI tried the same with ./java -Xtrace:print=j9jit.0 which corresponds to Trc_JIT_VMInitStages_Event1(curThread); and it's working fine.", "url": "https://github.com/eclipse-openj9/openj9/pull/9993#discussion_r461181075", "createdAt": "2020-07-27T21:28:57Z", "author": {"login": "harryyu1994"}, "path": "runtime/compiler/control/rossa.cpp", "diffHunk": "@@ -1971,6 +1974,10 @@ aboutToBootstrap(J9JavaVM * javaVM, J9JITConfig * jitConfig)\n       hwProfiler->turnBufferProcessingOffTemporarily();\n       }\n \n+   printf (\"portable shared cache called\\n\");\n+   Trc_JIT_portableSharedCache_enabled_or_disabled(curThread, javaVM->sharedCacheAPI->sharedCachePortable);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44424a10023a056657f6c417a76afcdbbd75f6c6"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE4NjU4MA==", "bodyText": "Oh i might know what's going on:\nI probably need to put it after UT_MODULE_LOADED(J9_UTINTERFACE_FROM_VM(javaVM));", "url": "https://github.com/eclipse-openj9/openj9/pull/9993#discussion_r461186580", "createdAt": "2020-07-27T21:40:23Z", "author": {"login": "harryyu1994"}, "path": "runtime/compiler/control/rossa.cpp", "diffHunk": "@@ -1971,6 +1974,10 @@ aboutToBootstrap(J9JavaVM * javaVM, J9JITConfig * jitConfig)\n       hwProfiler->turnBufferProcessingOffTemporarily();\n       }\n \n+   printf (\"portable shared cache called\\n\");\n+   Trc_JIT_portableSharedCache_enabled_or_disabled(curThread, javaVM->sharedCacheAPI->sharedCachePortable);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE4MTA3NQ=="}, "originalCommit": {"oid": "44424a10023a056657f6c417a76afcdbbd75f6c6"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE4Nzc3NA==", "bodyText": "I don't see anything obviously wrong. Is the tracepoint in the lib/J9TraceFormat.dat file?", "url": "https://github.com/eclipse-openj9/openj9/pull/9993#discussion_r461187774", "createdAt": "2020-07-27T21:43:02Z", "author": {"login": "pshipton"}, "path": "runtime/compiler/control/rossa.cpp", "diffHunk": "@@ -1971,6 +1974,10 @@ aboutToBootstrap(J9JavaVM * javaVM, J9JITConfig * jitConfig)\n       hwProfiler->turnBufferProcessingOffTemporarily();\n       }\n \n+   printf (\"portable shared cache called\\n\");\n+   Trc_JIT_portableSharedCache_enabled_or_disabled(curThread, javaVM->sharedCacheAPI->sharedCachePortable);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE4MTA3NQ=="}, "originalCommit": {"oid": "44424a10023a056657f6c417a76afcdbbd75f6c6"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE4OTIwNQ==", "bodyText": "I assume Trc_JIT_VMInitStages_Event1 gets printed before \"portable shared cache called\"?", "url": "https://github.com/eclipse-openj9/openj9/pull/9993#discussion_r461189205", "createdAt": "2020-07-27T21:46:13Z", "author": {"login": "pshipton"}, "path": "runtime/compiler/control/rossa.cpp", "diffHunk": "@@ -1971,6 +1974,10 @@ aboutToBootstrap(J9JavaVM * javaVM, J9JITConfig * jitConfig)\n       hwProfiler->turnBufferProcessingOffTemporarily();\n       }\n \n+   printf (\"portable shared cache called\\n\");\n+   Trc_JIT_portableSharedCache_enabled_or_disabled(curThread, javaVM->sharedCacheAPI->sharedCachePortable);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE4MTA3NQ=="}, "originalCommit": {"oid": "44424a10023a056657f6c417a76afcdbbd75f6c6"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE5MDQ3MA==", "bodyText": "I think you're looking at my modified version. I previously had Trc_JIT_portableSharedCache_enabled_or_disabled just above UT_MODULE_LOADED(J9_UTINTERFACE_FROM_VM(javaVM));. I just moved it down to below Trc_JIT_VMInitStages_Event1. Maybe this time it will work.", "url": "https://github.com/eclipse-openj9/openj9/pull/9993#discussion_r461190470", "createdAt": "2020-07-27T21:49:04Z", "author": {"login": "harryyu1994"}, "path": "runtime/compiler/control/rossa.cpp", "diffHunk": "@@ -1971,6 +1974,10 @@ aboutToBootstrap(J9JavaVM * javaVM, J9JITConfig * jitConfig)\n       hwProfiler->turnBufferProcessingOffTemporarily();\n       }\n \n+   printf (\"portable shared cache called\\n\");\n+   Trc_JIT_portableSharedCache_enabled_or_disabled(curThread, javaVM->sharedCacheAPI->sharedCachePortable);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE4MTA3NQ=="}, "originalCommit": {"oid": "44424a10023a056657f6c417a76afcdbbd75f6c6"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE5MDUzNw==", "bodyText": "Ah, I see. I think the tracepoint is too early, put it after the call to UT_MODULE_LOADED().", "url": "https://github.com/eclipse-openj9/openj9/pull/9993#discussion_r461190537", "createdAt": "2020-07-27T21:49:12Z", "author": {"login": "pshipton"}, "path": "runtime/compiler/control/rossa.cpp", "diffHunk": "@@ -1971,6 +1974,10 @@ aboutToBootstrap(J9JavaVM * javaVM, J9JITConfig * jitConfig)\n       hwProfiler->turnBufferProcessingOffTemporarily();\n       }\n \n+   printf (\"portable shared cache called\\n\");\n+   Trc_JIT_portableSharedCache_enabled_or_disabled(curThread, javaVM->sharedCacheAPI->sharedCachePortable);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE4MTA3NQ=="}, "originalCommit": {"oid": "44424a10023a056657f6c417a76afcdbbd75f6c6"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE5MTc3Mg==", "bodyText": "Note UT_MODULE_LOADED() registers the jit with the tracepoint engine.", "url": "https://github.com/eclipse-openj9/openj9/pull/9993#discussion_r461191772", "createdAt": "2020-07-27T21:51:54Z", "author": {"login": "pshipton"}, "path": "runtime/compiler/control/rossa.cpp", "diffHunk": "@@ -1971,6 +1974,10 @@ aboutToBootstrap(J9JavaVM * javaVM, J9JITConfig * jitConfig)\n       hwProfiler->turnBufferProcessingOffTemporarily();\n       }\n \n+   printf (\"portable shared cache called\\n\");\n+   Trc_JIT_portableSharedCache_enabled_or_disabled(curThread, javaVM->sharedCacheAPI->sharedCachePortable);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE4MTA3NQ=="}, "originalCommit": {"oid": "44424a10023a056657f6c417a76afcdbbd75f6c6"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTE1MzQ4OnYy", "diffSide": "RIGHT", "path": "test/functional/cmdLineTests/cmdLineTest_J9tests/j9tests.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMjoxNjowOVrOG31hZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMjoxNjowOVrOG31hZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIwMTc2Nw==", "bodyText": "test this with make _cmdLineTest_J9test_extended", "url": "https://github.com/eclipse-openj9/openj9/pull/9993#discussion_r461201767", "createdAt": "2020-07-27T22:16:09Z", "author": {"login": "harryyu1994"}, "path": "test/functional/cmdLineTests/cmdLineTest_J9tests/j9tests.xml", "diffHunk": "@@ -91,5 +91,17 @@ SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-excepti\n         <output type=\"failure\" caseSensitive=\"yes\" regex=\"no\">dump written to</output>\n         <output type=\"success\" caseSensitive=\"yes\" regex=\"no\">VM is shutting down. Reason: java/lang/OutOfMemoryError</output>\n     </test>\n+\n+    <!-- -XX:+PortableSharedCache -XX:-PortableSharedCache -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42365b5f285be3a84bd50162dfefd5e031d1f4cf"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTE1NzgzOnYy", "diffSide": "RIGHT", "path": "test/functional/cmdLineTests/shareClassTests/SCCMLTests/ShareClassesCMLTests-1.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMjoxNzo1MlrOG31j7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMjoxNzo1MlrOG31j7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIwMjQxMg==", "bodyText": "test this with make _testSCCMLTests1_openj9", "url": "https://github.com/eclipse-openj9/openj9/pull/9993#discussion_r461202412", "createdAt": "2020-07-27T22:17:52Z", "author": {"login": "harryyu1994"}, "path": "test/functional/cmdLineTests/shareClassTests/SCCMLTests/ShareClassesCMLTests-1.xml", "diffHunk": "@@ -1406,6 +1406,12 @@\n \t\t<output type=\"failure\" caseSensitive=\"yes\" regex=\"no\">Processing dump event</output>\n \t</test>\n \n+\t<test id=\"Test 66: Processor Features PrintStats Test : Ensure -Xshareclasses:printStats cache contains processor feature info\" timeout=\"600\" runPath=\".\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "065e4526a1d18ccf165c57e2ca3ed3122fc87226"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MjM2ODc3OnYy", "diffSide": "RIGHT", "path": "test/functional/cmdLineTests/shareClassTests/SCCMLTests/ShareClassesCMLTests-1.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNjowNzoxNlrOG4T6aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMTowNzo0MlrOG4e7Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY5OTY5MQ==", "bodyText": "These tests are only going to work on x86 platforms, they need to be restricted to these platforms. There is a way to do this, look for an example in the ShareClassesCMLTests-*.xml files", "url": "https://github.com/eclipse-openj9/openj9/pull/9993#discussion_r461699691", "createdAt": "2020-07-28T16:07:16Z", "author": {"login": "pshipton"}, "path": "test/functional/cmdLineTests/shareClassTests/SCCMLTests/ShareClassesCMLTests-1.xml", "diffHunk": "@@ -1406,6 +1406,12 @@\n \t\t<output type=\"failure\" caseSensitive=\"yes\" regex=\"no\">Processing dump event</output>\n \t</test>\n \n+\t<test id=\"Test 66: Processor Features PrintStats Test : Ensure -Xshareclasses:printStats cache contains processor feature info\" timeout=\"600\" runPath=\".\">\n+\t\t<command>$JAVA_EXE$ $currentMode$,printStats -version</command>\n+\t\t<output type=\"failure\" caseSensitive=\"yes\" regex=\"yes\" javaUtilPattern=\"yes\" showMatch=\"yes\">Processor Features[\\s]*= null</output>\n+\t\t<output type=\"success\" caseSensitive=\"yes\" regex=\"yes\" javaUtilPattern=\"yes\" showMatch=\"yes\">Processor Features[\\s]*= .*</output>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce7b0139921d822a46fe8c1b844c82ef30504f00"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg4MDEzMQ==", "bodyText": "@pshipton Ready for review.", "url": "https://github.com/eclipse-openj9/openj9/pull/9993#discussion_r461880131", "createdAt": "2020-07-28T21:07:42Z", "author": {"login": "harryyu1994"}, "path": "test/functional/cmdLineTests/shareClassTests/SCCMLTests/ShareClassesCMLTests-1.xml", "diffHunk": "@@ -1406,6 +1406,12 @@\n \t\t<output type=\"failure\" caseSensitive=\"yes\" regex=\"no\">Processing dump event</output>\n \t</test>\n \n+\t<test id=\"Test 66: Processor Features PrintStats Test : Ensure -Xshareclasses:printStats cache contains processor feature info\" timeout=\"600\" runPath=\".\">\n+\t\t<command>$JAVA_EXE$ $currentMode$,printStats -version</command>\n+\t\t<output type=\"failure\" caseSensitive=\"yes\" regex=\"yes\" javaUtilPattern=\"yes\" showMatch=\"yes\">Processor Features[\\s]*= null</output>\n+\t\t<output type=\"success\" caseSensitive=\"yes\" regex=\"yes\" javaUtilPattern=\"yes\" showMatch=\"yes\">Processor Features[\\s]*= .*</output>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY5OTY5MQ=="}, "originalCommit": {"oid": "ce7b0139921d822a46fe8c1b844c82ef30504f00"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MzYyMzM1OnYy", "diffSide": "RIGHT", "path": "test/functional/cmdLineTests/cmdLineTest_J9tests/j9tests.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMTo0MTozOVrOG4f9qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMTo0MTozOVrOG4f9qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg5NzEzMA==", "bodyText": "Pls add a newline at the end of the last line.", "url": "https://github.com/eclipse-openj9/openj9/pull/9993#discussion_r461897130", "createdAt": "2020-07-28T21:41:39Z", "author": {"login": "pshipton"}, "path": "test/functional/cmdLineTests/cmdLineTest_J9tests/j9tests.xml", "diffHunk": "@@ -91,5 +91,18 @@ SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-excepti\n         <output type=\"failure\" caseSensitive=\"yes\" regex=\"no\">dump written to</output>\n         <output type=\"success\" caseSensitive=\"yes\" regex=\"no\">VM is shutting down. Reason: java/lang/OutOfMemoryError</output>\n     </test>\n-</suite>\n \n+    <!-- -XX:+PortableSharedCache -XX:-PortableSharedCache -->\n+    <test id=\"Verify -XX:+PortableSharedCache -XX:-PortableSharedCache behaves as expected with the portable shared cache feature disabled\">\n+        <command>$EXE$ -Xshareclasses -Xtrace:print=j9jit.88 -XX:+PortableSharedCache -XX:-PortableSharedCache -version</command>\n+        <output type=\"success\" caseSensitive=\"yes\" regex=\"no\">PortableSharedCache is 0</output>\n+        <output type=\"failure\" caseSensitive=\"yes\" regex=\"no\">PortableSharedCache is 1</output>\n+    </test>\n+\n+    <!-- -XX:+PortableSharedCache -XX:-PortableSharedCache -->\n+    <test id=\"Verify -XX:-PortableSharedCache -XX:+PortableSharedCache behaves as expected with the portable shared cache feature enabled\">\n+        <command>$EXE$ -Xshareclasses -Xtrace:print=j9jit.88 -XX:-PortableSharedCache -XX:+PortableSharedCache -version</command>\n+        <output type=\"success\" caseSensitive=\"yes\" regex=\"no\">PortableSharedCache is 1</output>\n+        <output type=\"failure\" caseSensitive=\"yes\" regex=\"no\">PortableSharedCache is 0</output>\n+    </test>\n+</suite>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74439ddf5aec6db2c154be5e1c70ff1019108b64"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MzYyNDI3OnYy", "diffSide": "RIGHT", "path": "test/functional/cmdLineTests/cmdLineTest_J9tests/j9tests_exclude.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMTo0MTo0OVrOG4f-Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMTo0MTo0OVrOG4f-Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg5NzI3OQ==", "bodyText": "Pls add a newline at the end of the last line.", "url": "https://github.com/eclipse-openj9/openj9/pull/9993#discussion_r461897279", "createdAt": "2020-07-28T21:41:49Z", "author": {"login": "pshipton"}, "path": "test/functional/cmdLineTests/cmdLineTest_J9tests/j9tests_exclude.xml", "diffHunk": "@@ -68,4 +68,7 @@\n <include id=\"-Xaggressive\" platform=\"linux.*\" shouldFix=\"false\"><reason>Only available on Linux platforms</reason></include>\n <include id=\"defaultBehaviourOfCFS\" platform=\"linux.*\" shouldFix=\"false\"><reason>Only available on Linux platforms</reason></include>\n \n+<include id=\"Verify -XX:+PortableSharedCache -XX:-PortableSharedCache behaves as expected with the portable shared cache feature disabled\" platform=\".*x86.*\" shouldFix=\"false\"><reason>Only available on x86 platforms</reason></include>\n+<include id=\"Verify -XX:-PortableSharedCache -XX:+PortableSharedCache behaves as expected with the portable shared cache feature enabled\" platform=\".*x86.*\" shouldFix=\"false\"><reason>Only available on x86 platforms</reason></include>\n+\n </suite>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74439ddf5aec6db2c154be5e1c70ff1019108b64"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4963, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}