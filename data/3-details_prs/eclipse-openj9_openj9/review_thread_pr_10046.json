{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxNTgyNDAx", "number": 10046, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxOTo1ODo1N1rOET0v2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxOTo0NzoyM1rOEVJPTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MjIyNjE2OnYy", "diffSide": "RIGHT", "path": "runtime/codert_vm/cnathelp.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxOTo1ODo1N1rOG5xxxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxOTo1ODo1N1rOG5xxxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIzNzU3Mw==", "bodyText": "This is the wrong kind of frame build - please follow the other examples in this file, don't try to be too clever re-using the NPE entrypoint.", "url": "https://github.com/eclipse-openj9/openj9/pull/10046#discussion_r463237573", "createdAt": "2020-07-30T19:58:57Z", "author": {"login": "gacholio"}, "path": "runtime/codert_vm/cnathelp.cpp", "diffHunk": "@@ -682,37 +682,194 @@ old_fast_jitNewObjectNoZeroInit(J9VMThread *currentThread)\n void* J9FASTCALL\n old_slow_jitGetFlattenableField(J9VMThread *currentThread)\n {\n-\treturn NULL;\n+\tSLOW_JIT_HELPER_PROLOGUE();\n+\tJ9RAMFieldRef* cpEntry = (J9RAMFieldRef*) currentThread->floatTemp1;\n+\tj9object_t receiver = (j9object_t) currentThread->floatTemp2;\n+\tj9object_t returnObject = NULL;\n+\tvoid *rc = NULL;\n+\tvoid *oldPC = currentThread->jitReturnAddress;\n+\n+\tif (NULL == receiver) {\n+\t\tbuildJITResolveFrameForTrapHandler(currentThread);\n+\t\trc = (void*)old_slow_jitThrowNullPointerException;\n+\t\tgoto done;\n+\t}\n+\n+\tbuildJITResolveFrameWithPC(currentThread, J9_STACK_FLAGS_JIT_ALLOCATION_RESOLVE | J9_SSF_JIT_RESOLVE, parmCount, true, 0, oldPC);\n+\treturnObject = currentThread->javaVM->internalVMFunctions->getFlattenableField(currentThread, cpEntry, receiver, FALSE, FALSE);\n+\tif (NULL == returnObject) {\n+\t\trc = setHeapOutOfMemoryErrorFromJIT(currentThread);\n+\t\tgoto done;\n+\t}\n+\n+\tcurrentThread->floatTemp1 = (void*)returnObject; // in case of decompile\n+\trc = restoreJITResolveFrame(currentThread, oldPC, false, false);\n+\tif (NULL != rc) {\n+\t\tgoto done;\n+\t}\n+\n+\tJIT_RETURN_UDATA(returnObject);\n+\n+done:\n+\tSLOW_JIT_HELPER_EPILOGUE();\n+\treturn rc;\n }\n \n void* J9FASTCALL\n old_fast_jitGetFlattenableField(J9VMThread *currentThread)\n {\n-\treturn NULL;\n+\tOLD_JIT_HELPER_PROLOGUE(2);\n+\tDECLARE_JIT_PARM(J9RAMFieldRef*, cpEntry, 1);\n+\tDECLARE_JIT_PARM(j9object_t, receiver, 2);\n+\tj9object_t returnObject = NULL;\n+\tvoid *rc = NULL;\n+\n+\tif (NULL == receiver) {\n+\t\tbuildJITResolveFrameForTrapHandler(currentThread);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4f4dd332f6bc3ccd0aeabe171f31b5fc9b1ba21"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MjI0NzM2OnYy", "diffSide": "RIGHT", "path": "runtime/oti/vm_api.h", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMDowNToyNVrOG5x-zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMDowNToyNVrOG5x-zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI0MDkxMQ==", "bodyText": "Documentation?", "url": "https://github.com/eclipse-openj9/openj9/pull/10046#discussion_r463240911", "createdAt": "2020-07-30T20:05:25Z", "author": {"login": "gacholio"}, "path": "runtime/oti/vm_api.h", "diffHunk": "@@ -2455,6 +2455,15 @@ getFlattenableFieldSize(J9VMThread *currentThread, J9Class *fieldOwner, J9ROMFie\n UDATA\n arrayElementSize(J9ArrayClass* arrayClass);\n \n+j9object_t", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4f4dd332f6bc3ccd0aeabe171f31b5fc9b1ba21"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTAyMDMyOnYy", "diffSide": "RIGHT", "path": "runtime/vm/ValueTypeHelpers.hpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNToxMDo0NlrOG7k7lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNToxMDo0NlrOG7k7lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTEyNDI0NQ==", "bodyText": "These new functions also need doc.", "url": "https://github.com/eclipse-openj9/openj9/pull/10046#discussion_r465124245", "createdAt": "2020-08-04T15:10:46Z", "author": {"login": "gacholio"}, "path": "runtime/vm/ValueTypeHelpers.hpp", "diffHunk": "@@ -255,6 +256,116 @@ class VM_ValueTypeHelpers {\n \t\treturn rc;\n \t}\n \n+\tstatic VMINLINE j9object_t", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2f707e6d4f159f5d1cfcda57cb92d429241a83d"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTIzNDM1OnYy", "diffSide": "RIGHT", "path": "runtime/codert_vm/cnathelp.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNTo1OTowNlrOG7m_0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNTo1OTowNlrOG7m_0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE1ODA5OQ==", "bodyText": "This will need to be in the slow path (so all of the JIT registers are visible to the stack walker).", "url": "https://github.com/eclipse-openj9/openj9/pull/10046#discussion_r465158099", "createdAt": "2020-08-04T15:59:06Z", "author": {"login": "gacholio"}, "path": "runtime/codert_vm/cnathelp.cpp", "diffHunk": "@@ -682,37 +682,163 @@ old_fast_jitNewObjectNoZeroInit(J9VMThread *currentThread)\n void* J9FASTCALL\n old_slow_jitGetFlattenableField(J9VMThread *currentThread)\n {\n-\treturn NULL;\n+\tSLOW_JIT_HELPER_PROLOGUE();\n+\tJ9RAMFieldRef* cpEntry = (J9RAMFieldRef*) currentThread->floatTemp1;\n+\tj9object_t receiver = (j9object_t) currentThread->floatTemp2;\n+\tj9object_t returnObject = NULL;\n+\tvoid *rc = NULL;\n+\tvoid *oldPC = currentThread->jitReturnAddress;\n+\n+\tif (NULL == receiver) {\n+\t\tbuildJITResolveFrameForRuntimeHelper(currentThread, parmCount);\n+\t\trc = setCurrentExceptionFromJIT(currentThread, J9VMCONSTANTPOOL_JAVALANGNULLPOINTEREXCEPTION, NULL);\n+\t\tgoto done;\n+\t}\n+\n+\tbuildJITResolveFrameWithPC(currentThread, J9_STACK_FLAGS_JIT_ALLOCATION_RESOLVE | J9_SSF_JIT_RESOLVE, parmCount, true, 0, oldPC);\n+\treturnObject = currentThread->javaVM->internalVMFunctions->getFlattenableField(currentThread, cpEntry, receiver, FALSE, FALSE);\n+\tif (NULL == returnObject) {\n+\t\trc = setHeapOutOfMemoryErrorFromJIT(currentThread);\n+\t\tgoto done;\n+\t}\n+\n+\tcurrentThread->floatTemp1 = (void*)returnObject; // in case of decompile\n+\trc = restoreJITResolveFrame(currentThread, oldPC, false, false);\n+\tif (NULL != rc) {\n+\t\tgoto done;\n+\t}\n+\n+\tJIT_RETURN_UDATA(returnObject);\n+\n+done:\n+\tSLOW_JIT_HELPER_EPILOGUE();\n+\treturn rc;\n }\n \n void* J9FASTCALL\n old_fast_jitGetFlattenableField(J9VMThread *currentThread)\n {\n-\treturn NULL;\n+\tOLD_JIT_HELPER_PROLOGUE(2);\n+\tDECLARE_JIT_PARM(J9RAMFieldRef*, cpEntry, 1);\n+\tDECLARE_JIT_PARM(j9object_t, receiver, 2);\n+\tj9object_t returnObject = NULL;\n+\tvoid *rc = NULL;\n+\n+\tif (NULL == receiver) {\n+\t\tgoto slow;\n+\t}\n+\n+\treturnObject = currentThread->javaVM->internalVMFunctions->getFlattenableField(currentThread, cpEntry, receiver, TRUE, FALSE);\n+\tif (J9_UNEXPECTED(NULL == returnObject)) {\n+\t\tgoto slow;\n+\t}\n+\tJIT_RETURN_UDATA(returnObject);\n+\n+done:\n+\treturn rc;\n+\n+slow:\n+\tcurrentThread->floatTemp1 = (void*)cpEntry;\n+\tcurrentThread->floatTemp2 = (void*)receiver;\n+\trc = (void *) old_slow_jitGetFlattenableField;\n+\tgoto done;\n }\n \n void* J9FASTCALL\n old_slow_jitWithFlattenableField(J9VMThread *currentThread)\n {\n-\treturn NULL;\n+\tSLOW_JIT_HELPER_PROLOGUE();\n+\tJ9RAMFieldRef* cpEntry = (J9RAMFieldRef*) currentThread->floatTemp1;\n+\tj9object_t receiver = (j9object_t) currentThread->floatTemp2;\n+\tj9object_t paramObject = (j9object_t) currentThread->floatTemp3;\n+\tj9object_t returnObject = NULL;\n+\tvoid *rc = NULL;\n+\tvoid *oldPC = currentThread->jitReturnAddress;\n+\tJ9InternalVMFunctions *vmFuncs = currentThread->javaVM->internalVMFunctions;\n+\n+\tif (NULL == receiver) {\n+\t\tbuildJITResolveFrameForRuntimeHelper(currentThread, parmCount);\n+\t\trc = setCurrentExceptionFromJIT(currentThread, J9VMCONSTANTPOOL_JAVALANGNULLPOINTEREXCEPTION, NULL);\n+\t\tgoto done;\n+\t}\n+\n+\tbuildJITResolveFrameWithPC(currentThread, J9_STACK_FLAGS_JIT_ALLOCATION_RESOLVE | J9_SSF_JIT_RESOLVE, parmCount, true, 0, oldPC);\n+\treturnObject = vmFuncs->cloneValueType(currentThread, J9OBJECT_CLAZZ(currentThread, receiver), receiver, FALSE, FALSE);\n+\tif (J9_UNEXPECTED(NULL == returnObject)) {\n+\t\trc = setHeapOutOfMemoryErrorFromJIT(currentThread);\n+\t\tgoto done;\n+\t}\n+\n+\tvmFuncs->putFlattenableField(currentThread, cpEntry, receiver, paramObject);\n+\n+\tcurrentThread->floatTemp1 = (void*)returnObject; // in case of decompile\n+\trc = restoreJITResolveFrame(currentThread, oldPC, false, false);\n+\tif (NULL != rc) {\n+\t\tgoto done;\n+\t}\n+\n+\tJIT_RETURN_UDATA(returnObject);\n+\n+done:\n+\tSLOW_JIT_HELPER_EPILOGUE();\n+\treturn rc;\n+\n }\n \n void* J9FASTCALL\n old_fast_jitWithFlattenableField(J9VMThread *currentThread)\n {\n-\treturn NULL;\n-}\n+\tOLD_JIT_HELPER_PROLOGUE(3);\n+\tDECLARE_JIT_PARM(J9RAMFieldRef*, cpEntry, 1);\n+\tDECLARE_JIT_PARM(j9object_t, receiver, 2);\n+\tDECLARE_JIT_PARM(j9object_t, paramObject, 3);\n+\tj9object_t returnObject = NULL;\n+\tvoid *rc = NULL;\n+\tJ9InternalVMFunctions *vmFuncs = currentThread->javaVM->internalVMFunctions;\n \n-void* J9FASTCALL\n-old_slow_jitPutFlattenableField(J9VMThread *currentThread)\n-{\n-\treturn NULL;\n+\tif (NULL == receiver) {\n+\t\tgoto slow;\n+\t}\n+\n+\treturnObject = vmFuncs->cloneValueType(currentThread, J9OBJECT_CLAZZ(currentThread, receiver), receiver, TRUE, FALSE);\n+\tif (J9_UNEXPECTED(NULL == returnObject)) {\n+\t\tgoto slow;\n+\t}\n+\n+\tvmFuncs->putFlattenableField(currentThread, cpEntry, receiver, paramObject);\n+\n+\tJIT_RETURN_UDATA(returnObject);\n+\n+done:\n+\treturn rc;\n+\n+slow:\n+\tcurrentThread->floatTemp1 = (void*)cpEntry;\n+\tcurrentThread->floatTemp2 = (void*)receiver;\n+\tcurrentThread->floatTemp3 = (void*)paramObject;\n+\trc = (void *) old_slow_jitWithFlattenableField;\n+\tgoto done;\n }\n \n void* J9FASTCALL\n old_fast_jitPutFlattenableField(J9VMThread *currentThread)\n {\n-\treturn NULL;\n+\tOLD_JIT_HELPER_PROLOGUE(3);\n+\tDECLARE_JIT_PARM(J9RAMFieldRef*, cpEntry, 1);\n+\tDECLARE_JIT_PARM(j9object_t, receiver, 2);\n+\tDECLARE_JIT_PARM(j9object_t, paramObject, 3);\n+\tj9object_t returnObject = NULL;\n+\tvoid *rc = NULL;\n+\n+\tif (NULL == receiver) {\n+\t\tbuildJITResolveFrameForRuntimeHelper(currentThread, parmCount);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2f707e6d4f159f5d1cfcda57cb92d429241a83d"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTc2OTEyOnYy", "diffSide": "RIGHT", "path": "runtime/codert_vm/cnathelp.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxODoyMjo0NlrOG7sNIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxODoyMjo0NlrOG7sNIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI0MzQyNg==", "bodyText": "This can simply build the frame and throw the exception without the extra checks (you can only get here in the NPE case). There's no possibility of reaching the putfield.", "url": "https://github.com/eclipse-openj9/openj9/pull/10046#discussion_r465243426", "createdAt": "2020-08-04T18:22:46Z", "author": {"login": "gacholio"}, "path": "runtime/codert_vm/cnathelp.cpp", "diffHunk": "@@ -682,37 +682,193 @@ old_fast_jitNewObjectNoZeroInit(J9VMThread *currentThread)\n void* J9FASTCALL\n old_slow_jitGetFlattenableField(J9VMThread *currentThread)\n {\n-\treturn NULL;\n+\tSLOW_JIT_HELPER_PROLOGUE();\n+\tJ9RAMFieldRef* cpEntry = (J9RAMFieldRef*) currentThread->floatTemp1;\n+\tj9object_t receiver = (j9object_t) currentThread->floatTemp2;\n+\tj9object_t returnObject = NULL;\n+\tvoid *rc = NULL;\n+\tvoid *oldPC = currentThread->jitReturnAddress;\n+\n+\tif (NULL == receiver) {\n+\t\tbuildJITResolveFrameForRuntimeHelper(currentThread, parmCount);\n+\t\trc = setCurrentExceptionFromJIT(currentThread, J9VMCONSTANTPOOL_JAVALANGNULLPOINTEREXCEPTION, NULL);\n+\t\tgoto done;\n+\t}\n+\n+\tbuildJITResolveFrameWithPC(currentThread, J9_STACK_FLAGS_JIT_ALLOCATION_RESOLVE | J9_SSF_JIT_RESOLVE, parmCount, true, 0, oldPC);\n+\treturnObject = currentThread->javaVM->internalVMFunctions->getFlattenableField(currentThread, cpEntry, receiver, FALSE, FALSE);\n+\tif (NULL == returnObject) {\n+\t\trc = setHeapOutOfMemoryErrorFromJIT(currentThread);\n+\t\tgoto done;\n+\t}\n+\n+\tcurrentThread->floatTemp1 = (void*)returnObject; // in case of decompile\n+\trc = restoreJITResolveFrame(currentThread, oldPC, false, false);\n+\tif (NULL != rc) {\n+\t\tgoto done;\n+\t}\n+\n+\tJIT_RETURN_UDATA(returnObject);\n+\n+done:\n+\tSLOW_JIT_HELPER_EPILOGUE();\n+\treturn rc;\n }\n \n void* J9FASTCALL\n old_fast_jitGetFlattenableField(J9VMThread *currentThread)\n {\n-\treturn NULL;\n+\tOLD_JIT_HELPER_PROLOGUE(2);\n+\tDECLARE_JIT_PARM(J9RAMFieldRef*, cpEntry, 1);\n+\tDECLARE_JIT_PARM(j9object_t, receiver, 2);\n+\tj9object_t returnObject = NULL;\n+\tvoid *rc = NULL;\n+\n+\tif (NULL == receiver) {\n+\t\tgoto slow;\n+\t}\n+\n+\treturnObject = currentThread->javaVM->internalVMFunctions->getFlattenableField(currentThread, cpEntry, receiver, TRUE, FALSE);\n+\tif (J9_UNEXPECTED(NULL == returnObject)) {\n+\t\tgoto slow;\n+\t}\n+\tJIT_RETURN_UDATA(returnObject);\n+\n+done:\n+\treturn rc;\n+\n+slow:\n+\tcurrentThread->floatTemp1 = (void*)cpEntry;\n+\tcurrentThread->floatTemp2 = (void*)receiver;\n+\trc = (void *) old_slow_jitGetFlattenableField;\n+\tgoto done;\n }\n \n void* J9FASTCALL\n old_slow_jitWithFlattenableField(J9VMThread *currentThread)\n {\n-\treturn NULL;\n+\tSLOW_JIT_HELPER_PROLOGUE();\n+\tJ9RAMFieldRef* cpEntry = (J9RAMFieldRef*) currentThread->floatTemp1;\n+\tj9object_t receiver = (j9object_t) currentThread->floatTemp2;\n+\tj9object_t paramObject = (j9object_t) currentThread->floatTemp3;\n+\tj9object_t returnObject = NULL;\n+\tvoid *rc = NULL;\n+\tvoid *oldPC = currentThread->jitReturnAddress;\n+\tJ9InternalVMFunctions *vmFuncs = currentThread->javaVM->internalVMFunctions;\n+\n+\tif (NULL == receiver) {\n+\t\tbuildJITResolveFrameForRuntimeHelper(currentThread, parmCount);\n+\t\trc = setCurrentExceptionFromJIT(currentThread, J9VMCONSTANTPOOL_JAVALANGNULLPOINTEREXCEPTION, NULL);\n+\t\tgoto done;\n+\t}\n+\n+\tbuildJITResolveFrameWithPC(currentThread, J9_STACK_FLAGS_JIT_ALLOCATION_RESOLVE | J9_SSF_JIT_RESOLVE, parmCount, true, 0, oldPC);\n+\treturnObject = vmFuncs->cloneValueType(currentThread, J9OBJECT_CLAZZ(currentThread, receiver), receiver, FALSE, FALSE);\n+\tif (J9_UNEXPECTED(NULL == returnObject)) {\n+\t\trc = setHeapOutOfMemoryErrorFromJIT(currentThread);\n+\t\tgoto done;\n+\t}\n+\n+\tvmFuncs->putFlattenableField(currentThread, cpEntry, returnObject, paramObject);\n+\n+\tcurrentThread->floatTemp1 = (void*)returnObject; // in case of decompile\n+\trc = restoreJITResolveFrame(currentThread, oldPC, false, false);\n+\tif (NULL != rc) {\n+\t\tgoto done;\n+\t}\n+\n+\tJIT_RETURN_UDATA(returnObject);\n+\n+done:\n+\tSLOW_JIT_HELPER_EPILOGUE();\n+\treturn rc;\n+\n }\n \n void* J9FASTCALL\n old_fast_jitWithFlattenableField(J9VMThread *currentThread)\n {\n-\treturn NULL;\n+\tOLD_JIT_HELPER_PROLOGUE(3);\n+\tDECLARE_JIT_PARM(J9RAMFieldRef*, cpEntry, 1);\n+\tDECLARE_JIT_PARM(j9object_t, receiver, 2);\n+\tDECLARE_JIT_PARM(j9object_t, paramObject, 3);\n+\tj9object_t returnObject = NULL;\n+\tvoid *rc = NULL;\n+\tJ9InternalVMFunctions *vmFuncs = currentThread->javaVM->internalVMFunctions;\n+\n+\tif (NULL == receiver) {\n+\t\tgoto slow;\n+\t}\n+\n+\treturnObject = vmFuncs->cloneValueType(currentThread, J9OBJECT_CLAZZ(currentThread, receiver), receiver, TRUE, FALSE);\n+\tif (J9_UNEXPECTED(NULL == returnObject)) {\n+\t\tgoto slow;\n+\t}\n+\n+\tvmFuncs->putFlattenableField(currentThread, cpEntry, returnObject, paramObject);\n+\n+\tJIT_RETURN_UDATA(returnObject);\n+\n+done:\n+\treturn rc;\n+\n+slow:\n+\tcurrentThread->floatTemp1 = (void*)cpEntry;\n+\tcurrentThread->floatTemp2 = (void*)receiver;\n+\tcurrentThread->floatTemp3 = (void*)paramObject;\n+\trc = (void *) old_slow_jitWithFlattenableField;\n+\tgoto done;\n }\n \n void* J9FASTCALL\n old_slow_jitPutFlattenableField(J9VMThread *currentThread)\n {\n-\treturn NULL;\n+\tSLOW_JIT_HELPER_PROLOGUE();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a84320b370ec93dbcafc61d7ace1737c8a2d3cb6"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTc2OTc5OnYy", "diffSide": "RIGHT", "path": "runtime/codert_vm/cnathelp.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxODoyMzowMVrOG7sNmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxODoyMzowMVrOG7sNmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI0MzU0Ng==", "bodyText": "No need to pass the data to the slow path.", "url": "https://github.com/eclipse-openj9/openj9/pull/10046#discussion_r465243546", "createdAt": "2020-08-04T18:23:01Z", "author": {"login": "gacholio"}, "path": "runtime/codert_vm/cnathelp.cpp", "diffHunk": "@@ -682,37 +682,193 @@ old_fast_jitNewObjectNoZeroInit(J9VMThread *currentThread)\n void* J9FASTCALL\n old_slow_jitGetFlattenableField(J9VMThread *currentThread)\n {\n-\treturn NULL;\n+\tSLOW_JIT_HELPER_PROLOGUE();\n+\tJ9RAMFieldRef* cpEntry = (J9RAMFieldRef*) currentThread->floatTemp1;\n+\tj9object_t receiver = (j9object_t) currentThread->floatTemp2;\n+\tj9object_t returnObject = NULL;\n+\tvoid *rc = NULL;\n+\tvoid *oldPC = currentThread->jitReturnAddress;\n+\n+\tif (NULL == receiver) {\n+\t\tbuildJITResolveFrameForRuntimeHelper(currentThread, parmCount);\n+\t\trc = setCurrentExceptionFromJIT(currentThread, J9VMCONSTANTPOOL_JAVALANGNULLPOINTEREXCEPTION, NULL);\n+\t\tgoto done;\n+\t}\n+\n+\tbuildJITResolveFrameWithPC(currentThread, J9_STACK_FLAGS_JIT_ALLOCATION_RESOLVE | J9_SSF_JIT_RESOLVE, parmCount, true, 0, oldPC);\n+\treturnObject = currentThread->javaVM->internalVMFunctions->getFlattenableField(currentThread, cpEntry, receiver, FALSE, FALSE);\n+\tif (NULL == returnObject) {\n+\t\trc = setHeapOutOfMemoryErrorFromJIT(currentThread);\n+\t\tgoto done;\n+\t}\n+\n+\tcurrentThread->floatTemp1 = (void*)returnObject; // in case of decompile\n+\trc = restoreJITResolveFrame(currentThread, oldPC, false, false);\n+\tif (NULL != rc) {\n+\t\tgoto done;\n+\t}\n+\n+\tJIT_RETURN_UDATA(returnObject);\n+\n+done:\n+\tSLOW_JIT_HELPER_EPILOGUE();\n+\treturn rc;\n }\n \n void* J9FASTCALL\n old_fast_jitGetFlattenableField(J9VMThread *currentThread)\n {\n-\treturn NULL;\n+\tOLD_JIT_HELPER_PROLOGUE(2);\n+\tDECLARE_JIT_PARM(J9RAMFieldRef*, cpEntry, 1);\n+\tDECLARE_JIT_PARM(j9object_t, receiver, 2);\n+\tj9object_t returnObject = NULL;\n+\tvoid *rc = NULL;\n+\n+\tif (NULL == receiver) {\n+\t\tgoto slow;\n+\t}\n+\n+\treturnObject = currentThread->javaVM->internalVMFunctions->getFlattenableField(currentThread, cpEntry, receiver, TRUE, FALSE);\n+\tif (J9_UNEXPECTED(NULL == returnObject)) {\n+\t\tgoto slow;\n+\t}\n+\tJIT_RETURN_UDATA(returnObject);\n+\n+done:\n+\treturn rc;\n+\n+slow:\n+\tcurrentThread->floatTemp1 = (void*)cpEntry;\n+\tcurrentThread->floatTemp2 = (void*)receiver;\n+\trc = (void *) old_slow_jitGetFlattenableField;\n+\tgoto done;\n }\n \n void* J9FASTCALL\n old_slow_jitWithFlattenableField(J9VMThread *currentThread)\n {\n-\treturn NULL;\n+\tSLOW_JIT_HELPER_PROLOGUE();\n+\tJ9RAMFieldRef* cpEntry = (J9RAMFieldRef*) currentThread->floatTemp1;\n+\tj9object_t receiver = (j9object_t) currentThread->floatTemp2;\n+\tj9object_t paramObject = (j9object_t) currentThread->floatTemp3;\n+\tj9object_t returnObject = NULL;\n+\tvoid *rc = NULL;\n+\tvoid *oldPC = currentThread->jitReturnAddress;\n+\tJ9InternalVMFunctions *vmFuncs = currentThread->javaVM->internalVMFunctions;\n+\n+\tif (NULL == receiver) {\n+\t\tbuildJITResolveFrameForRuntimeHelper(currentThread, parmCount);\n+\t\trc = setCurrentExceptionFromJIT(currentThread, J9VMCONSTANTPOOL_JAVALANGNULLPOINTEREXCEPTION, NULL);\n+\t\tgoto done;\n+\t}\n+\n+\tbuildJITResolveFrameWithPC(currentThread, J9_STACK_FLAGS_JIT_ALLOCATION_RESOLVE | J9_SSF_JIT_RESOLVE, parmCount, true, 0, oldPC);\n+\treturnObject = vmFuncs->cloneValueType(currentThread, J9OBJECT_CLAZZ(currentThread, receiver), receiver, FALSE, FALSE);\n+\tif (J9_UNEXPECTED(NULL == returnObject)) {\n+\t\trc = setHeapOutOfMemoryErrorFromJIT(currentThread);\n+\t\tgoto done;\n+\t}\n+\n+\tvmFuncs->putFlattenableField(currentThread, cpEntry, returnObject, paramObject);\n+\n+\tcurrentThread->floatTemp1 = (void*)returnObject; // in case of decompile\n+\trc = restoreJITResolveFrame(currentThread, oldPC, false, false);\n+\tif (NULL != rc) {\n+\t\tgoto done;\n+\t}\n+\n+\tJIT_RETURN_UDATA(returnObject);\n+\n+done:\n+\tSLOW_JIT_HELPER_EPILOGUE();\n+\treturn rc;\n+\n }\n \n void* J9FASTCALL\n old_fast_jitWithFlattenableField(J9VMThread *currentThread)\n {\n-\treturn NULL;\n+\tOLD_JIT_HELPER_PROLOGUE(3);\n+\tDECLARE_JIT_PARM(J9RAMFieldRef*, cpEntry, 1);\n+\tDECLARE_JIT_PARM(j9object_t, receiver, 2);\n+\tDECLARE_JIT_PARM(j9object_t, paramObject, 3);\n+\tj9object_t returnObject = NULL;\n+\tvoid *rc = NULL;\n+\tJ9InternalVMFunctions *vmFuncs = currentThread->javaVM->internalVMFunctions;\n+\n+\tif (NULL == receiver) {\n+\t\tgoto slow;\n+\t}\n+\n+\treturnObject = vmFuncs->cloneValueType(currentThread, J9OBJECT_CLAZZ(currentThread, receiver), receiver, TRUE, FALSE);\n+\tif (J9_UNEXPECTED(NULL == returnObject)) {\n+\t\tgoto slow;\n+\t}\n+\n+\tvmFuncs->putFlattenableField(currentThread, cpEntry, returnObject, paramObject);\n+\n+\tJIT_RETURN_UDATA(returnObject);\n+\n+done:\n+\treturn rc;\n+\n+slow:\n+\tcurrentThread->floatTemp1 = (void*)cpEntry;\n+\tcurrentThread->floatTemp2 = (void*)receiver;\n+\tcurrentThread->floatTemp3 = (void*)paramObject;\n+\trc = (void *) old_slow_jitWithFlattenableField;\n+\tgoto done;\n }\n \n void* J9FASTCALL\n old_slow_jitPutFlattenableField(J9VMThread *currentThread)\n {\n-\treturn NULL;\n+\tSLOW_JIT_HELPER_PROLOGUE();\n+\tJ9RAMFieldRef* cpEntry = (J9RAMFieldRef*) currentThread->floatTemp1;\n+\tj9object_t receiver = (j9object_t) currentThread->floatTemp2;\n+\tj9object_t paramObject = (j9object_t) currentThread->floatTemp3;\n+\tj9object_t returnObject = NULL;\n+\tvoid *rc = NULL;\n+\tvoid *oldPC = currentThread->jitReturnAddress;\n+\n+\tif (NULL == receiver) {\n+\t\tbuildJITResolveFrameForRuntimeHelper(currentThread, parmCount);\n+\t\trc = setCurrentExceptionFromJIT(currentThread, J9VMCONSTANTPOOL_JAVALANGNULLPOINTEREXCEPTION, NULL);\n+\t\tgoto done;\n+\t}\n+\n+\tcurrentThread->javaVM->internalVMFunctions->putFlattenableField(currentThread, cpEntry, receiver, paramObject);\n+\n+done:\n+\tSLOW_JIT_HELPER_EPILOGUE();\n+\treturn rc;\n }\n \n void* J9FASTCALL\n old_fast_jitPutFlattenableField(J9VMThread *currentThread)\n {\n-\treturn NULL;\n+\tOLD_JIT_HELPER_PROLOGUE(3);\n+\tDECLARE_JIT_PARM(J9RAMFieldRef*, cpEntry, 1);\n+\tDECLARE_JIT_PARM(j9object_t, receiver, 2);\n+\tDECLARE_JIT_PARM(j9object_t, paramObject, 3);\n+\tj9object_t returnObject = NULL;\n+\tvoid *rc = NULL;\n+\n+\tif (NULL == receiver) {\n+\t\tgoto slow;\n+\t}\n+\n+\tcurrentThread->javaVM->internalVMFunctions->putFlattenableField(currentThread, cpEntry, receiver, paramObject);\n+\n+done:\n+\treturn rc;\n+\n+slow:\n+\tcurrentThread->floatTemp1 = (void*)cpEntry;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a84320b370ec93dbcafc61d7ace1737c8a2d3cb6"}, "originalPosition": 192}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjA2NTc3OnYy", "diffSide": "RIGHT", "path": "runtime/codert_vm/cnathelp.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxOTo0NjoyMFrOG7vCqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxOTo0NjoyMFrOG7vCqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4OTg5Nw==", "bodyText": "Never used.", "url": "https://github.com/eclipse-openj9/openj9/pull/10046#discussion_r465289897", "createdAt": "2020-08-04T19:46:20Z", "author": {"login": "gacholio"}, "path": "runtime/codert_vm/cnathelp.cpp", "diffHunk": "@@ -682,37 +682,182 @@ old_fast_jitNewObjectNoZeroInit(J9VMThread *currentThread)\n void* J9FASTCALL\n old_slow_jitGetFlattenableField(J9VMThread *currentThread)\n {\n-\treturn NULL;\n+\tSLOW_JIT_HELPER_PROLOGUE();\n+\tJ9RAMFieldRef* cpEntry = (J9RAMFieldRef*) currentThread->floatTemp1;\n+\tj9object_t receiver = (j9object_t) currentThread->floatTemp2;\n+\tj9object_t returnObject = NULL;\n+\tvoid *rc = NULL;\n+\tvoid *oldPC = currentThread->jitReturnAddress;\n+\n+\tif (NULL == receiver) {\n+\t\tbuildJITResolveFrameForRuntimeHelper(currentThread, parmCount);\n+\t\trc = setCurrentExceptionFromJIT(currentThread, J9VMCONSTANTPOOL_JAVALANGNULLPOINTEREXCEPTION, NULL);\n+\t\tgoto done;\n+\t}\n+\n+\tbuildJITResolveFrameWithPC(currentThread, J9_STACK_FLAGS_JIT_ALLOCATION_RESOLVE | J9_SSF_JIT_RESOLVE, parmCount, true, 0, oldPC);\n+\treturnObject = currentThread->javaVM->internalVMFunctions->getFlattenableField(currentThread, cpEntry, receiver, FALSE);\n+\tif (NULL == returnObject) {\n+\t\trc = setHeapOutOfMemoryErrorFromJIT(currentThread);\n+\t\tgoto done;\n+\t}\n+\n+\tcurrentThread->floatTemp1 = (void*)returnObject; // in case of decompile\n+\trc = restoreJITResolveFrame(currentThread, oldPC, false, false);\n+\tif (NULL != rc) {\n+\t\tgoto done;\n+\t}\n+\n+\tJIT_RETURN_UDATA(returnObject);\n+\n+done:\n+\tSLOW_JIT_HELPER_EPILOGUE();\n+\treturn rc;\n }\n \n void* J9FASTCALL\n old_fast_jitGetFlattenableField(J9VMThread *currentThread)\n {\n-\treturn NULL;\n+\tOLD_JIT_HELPER_PROLOGUE(2);\n+\tDECLARE_JIT_PARM(J9RAMFieldRef*, cpEntry, 1);\n+\tDECLARE_JIT_PARM(j9object_t, receiver, 2);\n+\tj9object_t returnObject = NULL;\n+\tvoid *rc = NULL;\n+\n+\tif (NULL == receiver) {\n+\t\tgoto slow;\n+\t}\n+\n+\treturnObject = currentThread->javaVM->internalVMFunctions->getFlattenableField(currentThread, cpEntry, receiver, TRUE);\n+\tif (J9_UNEXPECTED(NULL == returnObject)) {\n+\t\tgoto slow;\n+\t}\n+\tJIT_RETURN_UDATA(returnObject);\n+\n+done:\n+\treturn rc;\n+\n+slow:\n+\tcurrentThread->floatTemp1 = (void*)cpEntry;\n+\tcurrentThread->floatTemp2 = (void*)receiver;\n+\trc = (void *) old_slow_jitGetFlattenableField;\n+\tgoto done;\n }\n \n void* J9FASTCALL\n old_slow_jitWithFlattenableField(J9VMThread *currentThread)\n {\n-\treturn NULL;\n+\tSLOW_JIT_HELPER_PROLOGUE();\n+\tJ9RAMFieldRef* cpEntry = (J9RAMFieldRef*) currentThread->floatTemp1;\n+\tj9object_t receiver = (j9object_t) currentThread->floatTemp2;\n+\tj9object_t paramObject = (j9object_t) currentThread->floatTemp3;\n+\tj9object_t returnObject = NULL;\n+\tvoid *rc = NULL;\n+\tvoid *oldPC = currentThread->jitReturnAddress;\n+\tJ9InternalVMFunctions *vmFuncs = currentThread->javaVM->internalVMFunctions;\n+\n+\tif (NULL == receiver) {\n+\t\tbuildJITResolveFrameForRuntimeHelper(currentThread, parmCount);\n+\t\trc = setCurrentExceptionFromJIT(currentThread, J9VMCONSTANTPOOL_JAVALANGNULLPOINTEREXCEPTION, NULL);\n+\t\tgoto done;\n+\t}\n+\n+\tbuildJITResolveFrameWithPC(currentThread, J9_STACK_FLAGS_JIT_ALLOCATION_RESOLVE | J9_SSF_JIT_RESOLVE, parmCount, true, 0, oldPC);\n+\treturnObject = vmFuncs->cloneValueType(currentThread, J9OBJECT_CLAZZ(currentThread, receiver), receiver, FALSE);\n+\tif (J9_UNEXPECTED(NULL == returnObject)) {\n+\t\trc = setHeapOutOfMemoryErrorFromJIT(currentThread);\n+\t\tgoto done;\n+\t}\n+\n+\tvmFuncs->putFlattenableField(currentThread, cpEntry, returnObject, paramObject);\n+\n+\tcurrentThread->floatTemp1 = (void*)returnObject; // in case of decompile\n+\trc = restoreJITResolveFrame(currentThread, oldPC, false, false);\n+\tif (NULL != rc) {\n+\t\tgoto done;\n+\t}\n+\n+\tJIT_RETURN_UDATA(returnObject);\n+\n+done:\n+\tSLOW_JIT_HELPER_EPILOGUE();\n+\treturn rc;\n+\n }\n \n void* J9FASTCALL\n old_fast_jitWithFlattenableField(J9VMThread *currentThread)\n {\n-\treturn NULL;\n+\tOLD_JIT_HELPER_PROLOGUE(3);\n+\tDECLARE_JIT_PARM(J9RAMFieldRef*, cpEntry, 1);\n+\tDECLARE_JIT_PARM(j9object_t, receiver, 2);\n+\tDECLARE_JIT_PARM(j9object_t, paramObject, 3);\n+\tj9object_t returnObject = NULL;\n+\tvoid *rc = NULL;\n+\tJ9InternalVMFunctions *vmFuncs = currentThread->javaVM->internalVMFunctions;\n+\n+\tif (NULL == receiver) {\n+\t\tgoto slow;\n+\t}\n+\n+\treturnObject = vmFuncs->cloneValueType(currentThread, J9OBJECT_CLAZZ(currentThread, receiver), receiver, TRUE);\n+\tif (J9_UNEXPECTED(NULL == returnObject)) {\n+\t\tgoto slow;\n+\t}\n+\n+\tvmFuncs->putFlattenableField(currentThread, cpEntry, returnObject, paramObject);\n+\n+\tJIT_RETURN_UDATA(returnObject);\n+\n+done:\n+\treturn rc;\n+\n+slow:\n+\tcurrentThread->floatTemp1 = (void*)cpEntry;\n+\tcurrentThread->floatTemp2 = (void*)receiver;\n+\tcurrentThread->floatTemp3 = (void*)paramObject;\n+\trc = (void *) old_slow_jitWithFlattenableField;\n+\tgoto done;\n }\n \n void* J9FASTCALL\n old_slow_jitPutFlattenableField(J9VMThread *currentThread)\n {\n-\treturn NULL;\n+\t/* can only get here if we are throwing an exception */\n+\tSLOW_JIT_HELPER_PROLOGUE();\n+\tj9object_t returnObject = NULL;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e43618fc618ef35753b072cd22b082b94fafa75"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjA2NjUwOnYy", "diffSide": "RIGHT", "path": "runtime/codert_vm/cnathelp.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxOTo0NjozM1rOG7vDGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxOTo0NjozM1rOG7vDGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI5MDAxMA==", "bodyText": "Never used.", "url": "https://github.com/eclipse-openj9/openj9/pull/10046#discussion_r465290010", "createdAt": "2020-08-04T19:46:33Z", "author": {"login": "gacholio"}, "path": "runtime/codert_vm/cnathelp.cpp", "diffHunk": "@@ -682,37 +682,182 @@ old_fast_jitNewObjectNoZeroInit(J9VMThread *currentThread)\n void* J9FASTCALL\n old_slow_jitGetFlattenableField(J9VMThread *currentThread)\n {\n-\treturn NULL;\n+\tSLOW_JIT_HELPER_PROLOGUE();\n+\tJ9RAMFieldRef* cpEntry = (J9RAMFieldRef*) currentThread->floatTemp1;\n+\tj9object_t receiver = (j9object_t) currentThread->floatTemp2;\n+\tj9object_t returnObject = NULL;\n+\tvoid *rc = NULL;\n+\tvoid *oldPC = currentThread->jitReturnAddress;\n+\n+\tif (NULL == receiver) {\n+\t\tbuildJITResolveFrameForRuntimeHelper(currentThread, parmCount);\n+\t\trc = setCurrentExceptionFromJIT(currentThread, J9VMCONSTANTPOOL_JAVALANGNULLPOINTEREXCEPTION, NULL);\n+\t\tgoto done;\n+\t}\n+\n+\tbuildJITResolveFrameWithPC(currentThread, J9_STACK_FLAGS_JIT_ALLOCATION_RESOLVE | J9_SSF_JIT_RESOLVE, parmCount, true, 0, oldPC);\n+\treturnObject = currentThread->javaVM->internalVMFunctions->getFlattenableField(currentThread, cpEntry, receiver, FALSE);\n+\tif (NULL == returnObject) {\n+\t\trc = setHeapOutOfMemoryErrorFromJIT(currentThread);\n+\t\tgoto done;\n+\t}\n+\n+\tcurrentThread->floatTemp1 = (void*)returnObject; // in case of decompile\n+\trc = restoreJITResolveFrame(currentThread, oldPC, false, false);\n+\tif (NULL != rc) {\n+\t\tgoto done;\n+\t}\n+\n+\tJIT_RETURN_UDATA(returnObject);\n+\n+done:\n+\tSLOW_JIT_HELPER_EPILOGUE();\n+\treturn rc;\n }\n \n void* J9FASTCALL\n old_fast_jitGetFlattenableField(J9VMThread *currentThread)\n {\n-\treturn NULL;\n+\tOLD_JIT_HELPER_PROLOGUE(2);\n+\tDECLARE_JIT_PARM(J9RAMFieldRef*, cpEntry, 1);\n+\tDECLARE_JIT_PARM(j9object_t, receiver, 2);\n+\tj9object_t returnObject = NULL;\n+\tvoid *rc = NULL;\n+\n+\tif (NULL == receiver) {\n+\t\tgoto slow;\n+\t}\n+\n+\treturnObject = currentThread->javaVM->internalVMFunctions->getFlattenableField(currentThread, cpEntry, receiver, TRUE);\n+\tif (J9_UNEXPECTED(NULL == returnObject)) {\n+\t\tgoto slow;\n+\t}\n+\tJIT_RETURN_UDATA(returnObject);\n+\n+done:\n+\treturn rc;\n+\n+slow:\n+\tcurrentThread->floatTemp1 = (void*)cpEntry;\n+\tcurrentThread->floatTemp2 = (void*)receiver;\n+\trc = (void *) old_slow_jitGetFlattenableField;\n+\tgoto done;\n }\n \n void* J9FASTCALL\n old_slow_jitWithFlattenableField(J9VMThread *currentThread)\n {\n-\treturn NULL;\n+\tSLOW_JIT_HELPER_PROLOGUE();\n+\tJ9RAMFieldRef* cpEntry = (J9RAMFieldRef*) currentThread->floatTemp1;\n+\tj9object_t receiver = (j9object_t) currentThread->floatTemp2;\n+\tj9object_t paramObject = (j9object_t) currentThread->floatTemp3;\n+\tj9object_t returnObject = NULL;\n+\tvoid *rc = NULL;\n+\tvoid *oldPC = currentThread->jitReturnAddress;\n+\tJ9InternalVMFunctions *vmFuncs = currentThread->javaVM->internalVMFunctions;\n+\n+\tif (NULL == receiver) {\n+\t\tbuildJITResolveFrameForRuntimeHelper(currentThread, parmCount);\n+\t\trc = setCurrentExceptionFromJIT(currentThread, J9VMCONSTANTPOOL_JAVALANGNULLPOINTEREXCEPTION, NULL);\n+\t\tgoto done;\n+\t}\n+\n+\tbuildJITResolveFrameWithPC(currentThread, J9_STACK_FLAGS_JIT_ALLOCATION_RESOLVE | J9_SSF_JIT_RESOLVE, parmCount, true, 0, oldPC);\n+\treturnObject = vmFuncs->cloneValueType(currentThread, J9OBJECT_CLAZZ(currentThread, receiver), receiver, FALSE);\n+\tif (J9_UNEXPECTED(NULL == returnObject)) {\n+\t\trc = setHeapOutOfMemoryErrorFromJIT(currentThread);\n+\t\tgoto done;\n+\t}\n+\n+\tvmFuncs->putFlattenableField(currentThread, cpEntry, returnObject, paramObject);\n+\n+\tcurrentThread->floatTemp1 = (void*)returnObject; // in case of decompile\n+\trc = restoreJITResolveFrame(currentThread, oldPC, false, false);\n+\tif (NULL != rc) {\n+\t\tgoto done;\n+\t}\n+\n+\tJIT_RETURN_UDATA(returnObject);\n+\n+done:\n+\tSLOW_JIT_HELPER_EPILOGUE();\n+\treturn rc;\n+\n }\n \n void* J9FASTCALL\n old_fast_jitWithFlattenableField(J9VMThread *currentThread)\n {\n-\treturn NULL;\n+\tOLD_JIT_HELPER_PROLOGUE(3);\n+\tDECLARE_JIT_PARM(J9RAMFieldRef*, cpEntry, 1);\n+\tDECLARE_JIT_PARM(j9object_t, receiver, 2);\n+\tDECLARE_JIT_PARM(j9object_t, paramObject, 3);\n+\tj9object_t returnObject = NULL;\n+\tvoid *rc = NULL;\n+\tJ9InternalVMFunctions *vmFuncs = currentThread->javaVM->internalVMFunctions;\n+\n+\tif (NULL == receiver) {\n+\t\tgoto slow;\n+\t}\n+\n+\treturnObject = vmFuncs->cloneValueType(currentThread, J9OBJECT_CLAZZ(currentThread, receiver), receiver, TRUE);\n+\tif (J9_UNEXPECTED(NULL == returnObject)) {\n+\t\tgoto slow;\n+\t}\n+\n+\tvmFuncs->putFlattenableField(currentThread, cpEntry, returnObject, paramObject);\n+\n+\tJIT_RETURN_UDATA(returnObject);\n+\n+done:\n+\treturn rc;\n+\n+slow:\n+\tcurrentThread->floatTemp1 = (void*)cpEntry;\n+\tcurrentThread->floatTemp2 = (void*)receiver;\n+\tcurrentThread->floatTemp3 = (void*)paramObject;\n+\trc = (void *) old_slow_jitWithFlattenableField;\n+\tgoto done;\n }\n \n void* J9FASTCALL\n old_slow_jitPutFlattenableField(J9VMThread *currentThread)\n {\n-\treturn NULL;\n+\t/* can only get here if we are throwing an exception */\n+\tSLOW_JIT_HELPER_PROLOGUE();\n+\tj9object_t returnObject = NULL;\n+\tvoid *rc = NULL;\n+\tvoid *oldPC = currentThread->jitReturnAddress;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e43618fc618ef35753b072cd22b082b94fafa75"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjA2OTI3OnYy", "diffSide": "RIGHT", "path": "runtime/vm/ValueTypeHelpers.hpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxOTo0NzoyM1rOG7vExQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxOTo0NzoyM1rOG7vExQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI5MDQzNw==", "bodyText": "No longer required.", "url": "https://github.com/eclipse-openj9/openj9/pull/10046#discussion_r465290437", "createdAt": "2020-08-04T19:47:23Z", "author": {"login": "gacholio"}, "path": "runtime/vm/ValueTypeHelpers.hpp", "diffHunk": "@@ -38,6 +38,7 @@\n #include \"ut_j9vm.h\"\n \n #include \"ObjectAccessBarrierAPI.hpp\"\n+#include \"OutOfLineINL.hpp\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e43618fc618ef35753b072cd22b082b94fafa75"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4881, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}