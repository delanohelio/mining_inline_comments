{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyNjc0NDY1", "number": 11367, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxOToyMDozMFrOFA8aPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNTowMzo1N1rOFF-kpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTM0MDc5OnYy", "diffSide": "RIGHT", "path": "runtime/vm/BytecodeInterpreter.hpp", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxOToyMDozMFrOH_euzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQwNDoxOToyNFrOH_p36Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMyNTgzOQ==", "bodyText": "This fetches J9JNIMethodID* from  vmindexOffset and then tries to decode it for an interface.  Looking at the code that initializes the J9JNIMethodID:\nhttps://github.com/eclipse/openj9/blob/a7b7dbe51e2c8801b4f0a22bb98322d7dda76692/runtime/vm/jnicsup.cpp#L2097-L2122\nit explicitly states that it doesn't tag the vTableIndex for static interface methods or methods from Object as J9_JNI_MID_INTERFACE.\nIf it's one of those cases, the code below that looks up the method will be wrong:\n_sendMethod = *(J9Method **)(((UDATA)receiverClass) + vTableOffset);\n\nCan you point me at the code that ensures we won't try to run linkToInterface for private interface methods or for Object methods looked up on the interface?\nWith the OpenJ9 implementation, we handled these cases in the Java code that created the MH by returning DirectHandles or VirtualHandles wrapped with appropriate asTypes to ensure we couldn't hit them in the native code.", "url": "https://github.com/eclipse-openj9/openj9/pull/11367#discussion_r536325839", "createdAt": "2020-12-04T19:20:30Z", "author": {"login": "DanHeidinga"}, "path": "runtime/vm/BytecodeInterpreter.hpp", "diffHunk": "@@ -8396,7 +8396,15 @@ class INTERPRETER_CLASS\n \t\t\t\tif (interfaceClass == iTable->interfaceClass) {\n \t\t\t\t\treceiverClass->lastITable = iTable;\n foundITable:\n-\t\t\t\t\tvTableOffset = ((UDATA*)(iTable + 1))[iTableIndex];\n+\t\t\t\t\tif (J9_UNEXPECTED(J9_ARE_ANY_BITS_SET(iTableIndex, J9_ITABLE_OFFSET_TAG_BITS))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6a6af486632ca0705819c426a0d3e51389139d8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQxMDQwNw==", "bodyText": "[1] DirectMethodHandle that handles invokeinterface: has viewAsType; has checkReceiver, which gets called before linkToInterface.\n[2] DirectMethodHandle check for invokeinterface of Object methods.\n[3] In [2], MethodHandleNatives.resolve (native code) is used to generate MemberName.\nUnsure if I have identified the correct code. +@fengxue-IS for assist.\n@DanHeidinga can you please provide a link to the corresponding J9 code?", "url": "https://github.com/eclipse-openj9/openj9/pull/11367#discussion_r536410407", "createdAt": "2020-12-04T22:04:14Z", "author": {"login": "babsingh"}, "path": "runtime/vm/BytecodeInterpreter.hpp", "diffHunk": "@@ -8396,7 +8396,15 @@ class INTERPRETER_CLASS\n \t\t\t\tif (interfaceClass == iTable->interfaceClass) {\n \t\t\t\t\treceiverClass->lastITable = iTable;\n foundITable:\n-\t\t\t\t\tvTableOffset = ((UDATA*)(iTable + 1))[iTableIndex];\n+\t\t\t\t\tif (J9_UNEXPECTED(J9_ARE_ANY_BITS_SET(iTableIndex, J9_ITABLE_OFFSET_TAG_BITS))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMyNTgzOQ=="}, "originalCommit": {"oid": "f6a6af486632ca0705819c426a0d3e51389139d8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjUwODM5Mw==", "bodyText": "Look at\nhttps://github.com/eclipse/openj9/blob/c757b51154427a436921984a8a4cb316bb5c6cf6/jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java#L839-L855\nAnd at\nhttps://github.com/eclipse/openj9/blob/c757b51154427a436921984a8a4cb316bb5c6cf6/jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java#L1077", "url": "https://github.com/eclipse-openj9/openj9/pull/11367#discussion_r536508393", "createdAt": "2020-12-05T04:19:24Z", "author": {"login": "DanHeidinga"}, "path": "runtime/vm/BytecodeInterpreter.hpp", "diffHunk": "@@ -8396,7 +8396,15 @@ class INTERPRETER_CLASS\n \t\t\t\tif (interfaceClass == iTable->interfaceClass) {\n \t\t\t\t\treceiverClass->lastITable = iTable;\n foundITable:\n-\t\t\t\t\tvTableOffset = ((UDATA*)(iTable + 1))[iTableIndex];\n+\t\t\t\t\tif (J9_UNEXPECTED(J9_ARE_ANY_BITS_SET(iTableIndex, J9_ITABLE_OFFSET_TAG_BITS))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMyNTgzOQ=="}, "originalCommit": {"oid": "f6a6af486632ca0705819c426a0d3e51389139d8"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxODEyMzg4OnYy", "diffSide": "RIGHT", "path": "runtime/vm/BytecodeInterpreter.hpp", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNTowMzo1N1rOIGwi4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNzozODo0M1rOIJga9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzk1NzczMA==", "bodyText": "The MemberName->vmtargetOffset is directly holding onto a J9Method*.  How is that pointer updated during HCR?  I'm concerned that the loop through the iTable may fail to match the interfaceClass if HCR has replaced the class with a newer version.  (ie:  The cached J9Method * may hold onto an obsolete class pointer)", "url": "https://github.com/eclipse-openj9/openj9/pull/11367#discussion_r543957730", "createdAt": "2020-12-16T05:03:57Z", "author": {"login": "DanHeidinga"}, "path": "runtime/vm/BytecodeInterpreter.hpp", "diffHunk": "@@ -8383,28 +8383,41 @@ class INTERPRETER_CLASS\n \t\tJ9Method *method = (J9Method *)(UDATA)J9OBJECT_U64_LOAD(_currentThread, memberNameObject, _vm->vmtargetOffset);\n \t\tUDATA vTableOffset = methodID->vTableIndex;\n \n-\t\tif (J9_ARE_ANY_BITS_SET(vTableOffset, J9_JNI_MID_INTERFACE)) {\n-\t\t\tUDATA iTableIndex = vTableOffset & ~(UDATA)J9_JNI_MID_INTERFACE;\n-\t\t\tJ9Class *interfaceClass = J9_CLASS_FROM_METHOD(method);\n-\t\t\tvTableOffset = 0;\n-\t\t\tJ9ITable * iTable = receiverClass->lastITable;\n-\t\t\tif (interfaceClass == iTable->interfaceClass) {\n-\t\t\t\tgoto foundITable;\n-\t\t\t}\n-\t\t\tiTable = (J9ITable*)receiverClass->iTable;\n-\t\t\twhile (NULL != iTable) {\n+\t\t/* vmindexOffset (J9JNIMethodID) is initialized using jnicsup.cpp::initializeMethodID.\n+\t\t * initializeMethodID will set J9JNIMethodID->vTableIndex to 0 for private interface\n+\t\t * methods and j.l.Object methods. When J9JNIMethodID->vTableIndex is 0, then\n+\t\t * vmtargetOffset (J9Method) is the _sendMethod, and it will point to the private\n+\t\t * interface method or j.l.Object method. When J9JNIMethodID->vTableIndex is not 0,\n+\t\t * then it is either a vTable offset or an iTable index.\n+\t\t */\n+\t\tif (0 == vTableOffset) {\n+\t\t\t/* Private interface method or j.l.Object method. */\n+\t\t\t_sendMethod = method;\n+\t\t} else {\n+\t\t\t/* Treat as vTable offset for the method if J9_JNI_MID_INTERFACE is not set. */\n+\t\t\tif (J9_ARE_ANY_BITS_SET(vTableOffset, J9_JNI_MID_INTERFACE)) {\n+\t\t\t\t/* Treat as iTable index for the method if J9_JNI_MID_INTERFACE is set. */\n+\t\t\t\tUDATA iTableIndex = vTableOffset & ~(UDATA)J9_JNI_MID_INTERFACE;\n+\t\t\t\tJ9Class *interfaceClass = J9_CLASS_FROM_METHOD(method);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab0961ec0557f009644b23bcc7d0d77e00a4cc4e"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQyMjg3Nw==", "bodyText": "Should VM_VMHelpers::currentClass get the most current version of class after HCR?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\tJ9Class *interfaceClass = J9_CLASS_FROM_METHOD(method);\n          \n          \n            \n            \t\t\t\tJ9Class *interfaceClass = VM_VMHelpers::currentClass(J9_CLASS_FROM_METHOD(method));\n          \n      \n    \n    \n  \n\nDo we also need to update the J9Method ref stored in MemberName for HCR? Related code:\n\nhshelp.c::fixDirectHandles: Here J9Methods stored in OpenJ9 MHs are updated. We probably need to do the same for MemberNames->vmtarget (J9Method).\nhshelp.c::fixJNIRefs will need to be invoked before fixing MemberNames->vmindex (J9JNIMethodID).\njvmtiClass.c::redefineClassesCommon: invokes hshelp.c::fixJNIRefs and hshelp.c::fixDirectHandles.\nRelated question: #10690 (comment)", "url": "https://github.com/eclipse-openj9/openj9/pull/11367#discussion_r545422877", "createdAt": "2020-12-17T21:44:19Z", "author": {"login": "babsingh"}, "path": "runtime/vm/BytecodeInterpreter.hpp", "diffHunk": "@@ -8383,28 +8383,41 @@ class INTERPRETER_CLASS\n \t\tJ9Method *method = (J9Method *)(UDATA)J9OBJECT_U64_LOAD(_currentThread, memberNameObject, _vm->vmtargetOffset);\n \t\tUDATA vTableOffset = methodID->vTableIndex;\n \n-\t\tif (J9_ARE_ANY_BITS_SET(vTableOffset, J9_JNI_MID_INTERFACE)) {\n-\t\t\tUDATA iTableIndex = vTableOffset & ~(UDATA)J9_JNI_MID_INTERFACE;\n-\t\t\tJ9Class *interfaceClass = J9_CLASS_FROM_METHOD(method);\n-\t\t\tvTableOffset = 0;\n-\t\t\tJ9ITable * iTable = receiverClass->lastITable;\n-\t\t\tif (interfaceClass == iTable->interfaceClass) {\n-\t\t\t\tgoto foundITable;\n-\t\t\t}\n-\t\t\tiTable = (J9ITable*)receiverClass->iTable;\n-\t\t\twhile (NULL != iTable) {\n+\t\t/* vmindexOffset (J9JNIMethodID) is initialized using jnicsup.cpp::initializeMethodID.\n+\t\t * initializeMethodID will set J9JNIMethodID->vTableIndex to 0 for private interface\n+\t\t * methods and j.l.Object methods. When J9JNIMethodID->vTableIndex is 0, then\n+\t\t * vmtargetOffset (J9Method) is the _sendMethod, and it will point to the private\n+\t\t * interface method or j.l.Object method. When J9JNIMethodID->vTableIndex is not 0,\n+\t\t * then it is either a vTable offset or an iTable index.\n+\t\t */\n+\t\tif (0 == vTableOffset) {\n+\t\t\t/* Private interface method or j.l.Object method. */\n+\t\t\t_sendMethod = method;\n+\t\t} else {\n+\t\t\t/* Treat as vTable offset for the method if J9_JNI_MID_INTERFACE is not set. */\n+\t\t\tif (J9_ARE_ANY_BITS_SET(vTableOffset, J9_JNI_MID_INTERFACE)) {\n+\t\t\t\t/* Treat as iTable index for the method if J9_JNI_MID_INTERFACE is set. */\n+\t\t\t\tUDATA iTableIndex = vTableOffset & ~(UDATA)J9_JNI_MID_INTERFACE;\n+\t\t\t\tJ9Class *interfaceClass = J9_CLASS_FROM_METHOD(method);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzk1NzczMA=="}, "originalCommit": {"oid": "ab0961ec0557f009644b23bcc7d0d77e00a4cc4e"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTUzMTY1Ng==", "bodyText": "Should VM_VMHelpers::currentClass get the most current version of class after HCR?\n\nThis solves half the problem in that it ensures the most up-to-date version of the class is used in the itable search.  Unfortunately, the itableIndex may not point to the same method in the new version of the class if the methods have been reordered.\nIt's really two pieces of data - class version & itable index - and both need to kept consistent and up to date.\n\n\nhshelp.c::fixDirectHandles: Here J9Methods stored in OpenJ9 MHs are updated. We probably need to do the same for MemberNames->vmtarget (J9Method).\n\n\nThis is carefully set up thru cooperation between the MH creation java code & the redef code to avoid a full heap walk to find the DirectHandles.  We may be able to make the same invariants hold for MemberName but I'm less clear on how to do that without patching the OJDK java code.\nCouple of options here:\n\n\nDo a full heap walk on redefinition to fix the vmtarget & vmindex fields of the MemberName.  This will regress the use cases we fixed by adding the DirectHandle cache but it will be correct.\n\n\nChange vmindex to be an index into class->jniIDs table.  This should let the existing mechanisms fix the JNIID when the class is redefined but will require changes to the way invocation occurs.  We'll also need to figure out how to update vmtarget as well.\n\n\nSomething else?\n\n\nI'd suggest starting with option 1 as it's the easiest to get right and we can figure out how to optimize it later.", "url": "https://github.com/eclipse-openj9/openj9/pull/11367#discussion_r545531656", "createdAt": "2020-12-18T02:26:02Z", "author": {"login": "DanHeidinga"}, "path": "runtime/vm/BytecodeInterpreter.hpp", "diffHunk": "@@ -8383,28 +8383,41 @@ class INTERPRETER_CLASS\n \t\tJ9Method *method = (J9Method *)(UDATA)J9OBJECT_U64_LOAD(_currentThread, memberNameObject, _vm->vmtargetOffset);\n \t\tUDATA vTableOffset = methodID->vTableIndex;\n \n-\t\tif (J9_ARE_ANY_BITS_SET(vTableOffset, J9_JNI_MID_INTERFACE)) {\n-\t\t\tUDATA iTableIndex = vTableOffset & ~(UDATA)J9_JNI_MID_INTERFACE;\n-\t\t\tJ9Class *interfaceClass = J9_CLASS_FROM_METHOD(method);\n-\t\t\tvTableOffset = 0;\n-\t\t\tJ9ITable * iTable = receiverClass->lastITable;\n-\t\t\tif (interfaceClass == iTable->interfaceClass) {\n-\t\t\t\tgoto foundITable;\n-\t\t\t}\n-\t\t\tiTable = (J9ITable*)receiverClass->iTable;\n-\t\t\twhile (NULL != iTable) {\n+\t\t/* vmindexOffset (J9JNIMethodID) is initialized using jnicsup.cpp::initializeMethodID.\n+\t\t * initializeMethodID will set J9JNIMethodID->vTableIndex to 0 for private interface\n+\t\t * methods and j.l.Object methods. When J9JNIMethodID->vTableIndex is 0, then\n+\t\t * vmtargetOffset (J9Method) is the _sendMethod, and it will point to the private\n+\t\t * interface method or j.l.Object method. When J9JNIMethodID->vTableIndex is not 0,\n+\t\t * then it is either a vTable offset or an iTable index.\n+\t\t */\n+\t\tif (0 == vTableOffset) {\n+\t\t\t/* Private interface method or j.l.Object method. */\n+\t\t\t_sendMethod = method;\n+\t\t} else {\n+\t\t\t/* Treat as vTable offset for the method if J9_JNI_MID_INTERFACE is not set. */\n+\t\t\tif (J9_ARE_ANY_BITS_SET(vTableOffset, J9_JNI_MID_INTERFACE)) {\n+\t\t\t\t/* Treat as iTable index for the method if J9_JNI_MID_INTERFACE is set. */\n+\t\t\t\tUDATA iTableIndex = vTableOffset & ~(UDATA)J9_JNI_MID_INTERFACE;\n+\t\t\t\tJ9Class *interfaceClass = J9_CLASS_FROM_METHOD(method);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzk1NzczMA=="}, "originalCommit": {"oid": "ab0961ec0557f009644b23bcc7d0d77e00a4cc4e"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjgzOTI4NA==", "bodyText": "I have updated this PR to handle the VM_VMHelpers::currentClass change. For the bigger part, I have opened the following issue: #11528. This PR is ready to be reviewed and merged. The bigger part will be handled in a separate PR.", "url": "https://github.com/eclipse-openj9/openj9/pull/11367#discussion_r546839284", "createdAt": "2020-12-21T17:38:43Z", "author": {"login": "babsingh"}, "path": "runtime/vm/BytecodeInterpreter.hpp", "diffHunk": "@@ -8383,28 +8383,41 @@ class INTERPRETER_CLASS\n \t\tJ9Method *method = (J9Method *)(UDATA)J9OBJECT_U64_LOAD(_currentThread, memberNameObject, _vm->vmtargetOffset);\n \t\tUDATA vTableOffset = methodID->vTableIndex;\n \n-\t\tif (J9_ARE_ANY_BITS_SET(vTableOffset, J9_JNI_MID_INTERFACE)) {\n-\t\t\tUDATA iTableIndex = vTableOffset & ~(UDATA)J9_JNI_MID_INTERFACE;\n-\t\t\tJ9Class *interfaceClass = J9_CLASS_FROM_METHOD(method);\n-\t\t\tvTableOffset = 0;\n-\t\t\tJ9ITable * iTable = receiverClass->lastITable;\n-\t\t\tif (interfaceClass == iTable->interfaceClass) {\n-\t\t\t\tgoto foundITable;\n-\t\t\t}\n-\t\t\tiTable = (J9ITable*)receiverClass->iTable;\n-\t\t\twhile (NULL != iTable) {\n+\t\t/* vmindexOffset (J9JNIMethodID) is initialized using jnicsup.cpp::initializeMethodID.\n+\t\t * initializeMethodID will set J9JNIMethodID->vTableIndex to 0 for private interface\n+\t\t * methods and j.l.Object methods. When J9JNIMethodID->vTableIndex is 0, then\n+\t\t * vmtargetOffset (J9Method) is the _sendMethod, and it will point to the private\n+\t\t * interface method or j.l.Object method. When J9JNIMethodID->vTableIndex is not 0,\n+\t\t * then it is either a vTable offset or an iTable index.\n+\t\t */\n+\t\tif (0 == vTableOffset) {\n+\t\t\t/* Private interface method or j.l.Object method. */\n+\t\t\t_sendMethod = method;\n+\t\t} else {\n+\t\t\t/* Treat as vTable offset for the method if J9_JNI_MID_INTERFACE is not set. */\n+\t\t\tif (J9_ARE_ANY_BITS_SET(vTableOffset, J9_JNI_MID_INTERFACE)) {\n+\t\t\t\t/* Treat as iTable index for the method if J9_JNI_MID_INTERFACE is set. */\n+\t\t\t\tUDATA iTableIndex = vTableOffset & ~(UDATA)J9_JNI_MID_INTERFACE;\n+\t\t\t\tJ9Class *interfaceClass = J9_CLASS_FROM_METHOD(method);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzk1NzczMA=="}, "originalCommit": {"oid": "ab0961ec0557f009644b23bcc7d0d77e00a4cc4e"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 830, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}