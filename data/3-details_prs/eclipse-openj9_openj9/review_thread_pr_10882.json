{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzMDgxNTc0", "number": 10882, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMzo0NjowOFrOEtfiAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMzo0NjozMVrOEtfi8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MTM3OTg0OnYy", "diffSide": "RIGHT", "path": "jcl/src/java.base/share/classes/jdk/internal/ref/CleanerShutdown.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMzo0NjowOFrOHhT3ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNjowMjowMFrOHhaT-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY5MDYyNw==", "bodyText": "I think this should use weakRemove rather than phantomRemove.", "url": "https://github.com/eclipse-openj9/openj9/pull/10882#discussion_r504690627", "createdAt": "2020-10-14T13:46:08Z", "author": {"login": "keithc-ca"}, "path": "jcl/src/java.base/share/classes/jdk/internal/ref/CleanerShutdown.java", "diffHunk": "@@ -49,25 +49,31 @@ public static void shutdownCleaner() {\n \t\t\n \t\ttry {\n \t\t\tMethod phantomRemove = PhantomCleanable.class.getDeclaredMethod(\"remove\", (Class<?>[]) null); //$NON-NLS-1$\n+\t\t\t/*[IF !Java16]*/\n \t\t\tMethod weakRemove = WeakCleanable.class.getDeclaredMethod(\"remove\", (Class<?>[]) null); //$NON-NLS-1$\n \t\t\tMethod softRemove = SoftCleanable.class.getDeclaredMethod(\"remove\", (Class<?>[]) null); //$NON-NLS-1$\n+\t\t\t/*[ENDIF]*/\n \t\t\tAccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n \t\t\t\tphantomRemove.setAccessible(true);\n+\t\t\t\t/*[IF !Java16]*/\n \t\t\t\tweakRemove.setAccessible(true);\n \t\t\t\tsoftRemove.setAccessible(true);\n+\t\t\t\t/*[ENDIF]*/\n \t\t\t\treturn null;\n \t\t\t});\n \t\t\twhile(!commonCleanerImpl.phantomCleanableList.isListEmpty()) {\n \t\t\t\tphantomRemove.invoke(commonCleanerImpl.phantomCleanableList, (Object[]) null);\n \t\t\t}\n \n+\t\t\t/*[IF !Java16]*/\n \t\t\twhile(!commonCleanerImpl.weakCleanableList.isListEmpty()) {\n \t\t\t\tphantomRemove.invoke(commonCleanerImpl.weakCleanableList, (Object[]) null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66af842da19a9b34f3f1021d54fe98da9e8be813"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc4Mzk0OQ==", "bodyText": "I think we should just delete the weak and soft code for all versions considering it has never worked properly. Thoughts?", "url": "https://github.com/eclipse-openj9/openj9/pull/10882#discussion_r504783949", "createdAt": "2020-10-14T15:45:17Z", "author": {"login": "pshipton"}, "path": "jcl/src/java.base/share/classes/jdk/internal/ref/CleanerShutdown.java", "diffHunk": "@@ -49,25 +49,31 @@ public static void shutdownCleaner() {\n \t\t\n \t\ttry {\n \t\t\tMethod phantomRemove = PhantomCleanable.class.getDeclaredMethod(\"remove\", (Class<?>[]) null); //$NON-NLS-1$\n+\t\t\t/*[IF !Java16]*/\n \t\t\tMethod weakRemove = WeakCleanable.class.getDeclaredMethod(\"remove\", (Class<?>[]) null); //$NON-NLS-1$\n \t\t\tMethod softRemove = SoftCleanable.class.getDeclaredMethod(\"remove\", (Class<?>[]) null); //$NON-NLS-1$\n+\t\t\t/*[ENDIF]*/\n \t\t\tAccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n \t\t\t\tphantomRemove.setAccessible(true);\n+\t\t\t\t/*[IF !Java16]*/\n \t\t\t\tweakRemove.setAccessible(true);\n \t\t\t\tsoftRemove.setAccessible(true);\n+\t\t\t\t/*[ENDIF]*/\n \t\t\t\treturn null;\n \t\t\t});\n \t\t\twhile(!commonCleanerImpl.phantomCleanableList.isListEmpty()) {\n \t\t\t\tphantomRemove.invoke(commonCleanerImpl.phantomCleanableList, (Object[]) null);\n \t\t\t}\n \n+\t\t\t/*[IF !Java16]*/\n \t\t\twhile(!commonCleanerImpl.weakCleanableList.isListEmpty()) {\n \t\t\t\tphantomRemove.invoke(commonCleanerImpl.weakCleanableList, (Object[]) null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY5MDYyNw=="}, "originalCommit": {"oid": "66af842da19a9b34f3f1021d54fe98da9e8be813"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc5NjE1Mg==", "bodyText": "That seems reasonable: the broken code (if it ever executed) would throw IllegalArgumentException.", "url": "https://github.com/eclipse-openj9/openj9/pull/10882#discussion_r504796152", "createdAt": "2020-10-14T16:02:00Z", "author": {"login": "keithc-ca"}, "path": "jcl/src/java.base/share/classes/jdk/internal/ref/CleanerShutdown.java", "diffHunk": "@@ -49,25 +49,31 @@ public static void shutdownCleaner() {\n \t\t\n \t\ttry {\n \t\t\tMethod phantomRemove = PhantomCleanable.class.getDeclaredMethod(\"remove\", (Class<?>[]) null); //$NON-NLS-1$\n+\t\t\t/*[IF !Java16]*/\n \t\t\tMethod weakRemove = WeakCleanable.class.getDeclaredMethod(\"remove\", (Class<?>[]) null); //$NON-NLS-1$\n \t\t\tMethod softRemove = SoftCleanable.class.getDeclaredMethod(\"remove\", (Class<?>[]) null); //$NON-NLS-1$\n+\t\t\t/*[ENDIF]*/\n \t\t\tAccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n \t\t\t\tphantomRemove.setAccessible(true);\n+\t\t\t\t/*[IF !Java16]*/\n \t\t\t\tweakRemove.setAccessible(true);\n \t\t\t\tsoftRemove.setAccessible(true);\n+\t\t\t\t/*[ENDIF]*/\n \t\t\t\treturn null;\n \t\t\t});\n \t\t\twhile(!commonCleanerImpl.phantomCleanableList.isListEmpty()) {\n \t\t\t\tphantomRemove.invoke(commonCleanerImpl.phantomCleanableList, (Object[]) null);\n \t\t\t}\n \n+\t\t\t/*[IF !Java16]*/\n \t\t\twhile(!commonCleanerImpl.weakCleanableList.isListEmpty()) {\n \t\t\t\tphantomRemove.invoke(commonCleanerImpl.weakCleanableList, (Object[]) null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY5MDYyNw=="}, "originalCommit": {"oid": "66af842da19a9b34f3f1021d54fe98da9e8be813"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MTM4MjI2OnYy", "diffSide": "RIGHT", "path": "jcl/src/java.base/share/classes/jdk/internal/ref/CleanerShutdown.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMzo0NjozMVrOHhT5XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMzo0NjozMVrOHhT5XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY5MTAzNw==", "bodyText": "I think this should use softRemove rather than phantomRemove.", "url": "https://github.com/eclipse-openj9/openj9/pull/10882#discussion_r504691037", "createdAt": "2020-10-14T13:46:31Z", "author": {"login": "keithc-ca"}, "path": "jcl/src/java.base/share/classes/jdk/internal/ref/CleanerShutdown.java", "diffHunk": "@@ -49,25 +49,31 @@ public static void shutdownCleaner() {\n \t\t\n \t\ttry {\n \t\t\tMethod phantomRemove = PhantomCleanable.class.getDeclaredMethod(\"remove\", (Class<?>[]) null); //$NON-NLS-1$\n+\t\t\t/*[IF !Java16]*/\n \t\t\tMethod weakRemove = WeakCleanable.class.getDeclaredMethod(\"remove\", (Class<?>[]) null); //$NON-NLS-1$\n \t\t\tMethod softRemove = SoftCleanable.class.getDeclaredMethod(\"remove\", (Class<?>[]) null); //$NON-NLS-1$\n+\t\t\t/*[ENDIF]*/\n \t\t\tAccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n \t\t\t\tphantomRemove.setAccessible(true);\n+\t\t\t\t/*[IF !Java16]*/\n \t\t\t\tweakRemove.setAccessible(true);\n \t\t\t\tsoftRemove.setAccessible(true);\n+\t\t\t\t/*[ENDIF]*/\n \t\t\t\treturn null;\n \t\t\t});\n \t\t\twhile(!commonCleanerImpl.phantomCleanableList.isListEmpty()) {\n \t\t\t\tphantomRemove.invoke(commonCleanerImpl.phantomCleanableList, (Object[]) null);\n \t\t\t}\n \n+\t\t\t/*[IF !Java16]*/\n \t\t\twhile(!commonCleanerImpl.weakCleanableList.isListEmpty()) {\n \t\t\t\tphantomRemove.invoke(commonCleanerImpl.weakCleanableList, (Object[]) null);\n \t\t\t}\n \n \t\t\twhile(!commonCleanerImpl.softCleanableList.isListEmpty()) {\n \t\t\t\tphantomRemove.invoke(commonCleanerImpl.softCleanableList, (Object[]) null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66af842da19a9b34f3f1021d54fe98da9e8be813"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1140, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}