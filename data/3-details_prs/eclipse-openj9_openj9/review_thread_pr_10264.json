{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3NTEwMDAw", "number": 10264, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMTowNjoxNFrOESwwvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMjo1MDowOVrOEU0xyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MTA4NzM0OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/optimizer/EscapeAnalysis.cpp", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMTowNjoxNFrOG4HpCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMzoxMzozOVrOG4L55w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ5ODYzNQ==", "bodyText": "Can this growing list of architecture checks (here and elsewhere in this PR) be replaced with a capability query instead?  What are they really asking:  whether a code generator is capable of mapping local objects to the stack?  If so, I think it would be much cleaner to ask that question of a code generator and have each architecture answer true or false.\n@vijaysun-omr or @andrewcraik any opinion or insight on whether that's what these architecture checks are really for?", "url": "https://github.com/eclipse-openj9/openj9/pull/10264#discussion_r461498635", "createdAt": "2020-07-28T11:06:14Z", "author": {"login": "0xdaryl"}, "path": "runtime/compiler/optimizer/EscapeAnalysis.cpp", "diffHunk": "@@ -133,7 +133,7 @@ TR_EscapeAnalysis::TR_EscapeAnalysis(TR::OptimizationManager *manager)\n    _dememoizationSymRef = NULL;\n \n    _createStackAllocations   = true;\n-   _createLocalObjects       = comp()->target().cpu.isX86() || comp()->target().cpu.isPower() || comp()->target().cpu.isZ();\n+   _createLocalObjects       = comp()->target().cpu.isX86() || comp()->target().cpu.isPower() || comp()->target().cpu.isZ() || comp()->target().cpu.isARM64();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7720c4d03a1b7faa0a8a0f410ed9cc53b216d0d8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUwOTM1Mw==", "bodyText": "Yes I agree with you, though the functionality being checked for is probably the entirety of supporting stack allocations, e.g. mapping local objects to the stack, emitting a stack alloc map etc. I don't see any reason why this cannot be a codegen query.", "url": "https://github.com/eclipse-openj9/openj9/pull/10264#discussion_r461509353", "createdAt": "2020-07-28T11:27:45Z", "author": {"login": "vijaysun-omr"}, "path": "runtime/compiler/optimizer/EscapeAnalysis.cpp", "diffHunk": "@@ -133,7 +133,7 @@ TR_EscapeAnalysis::TR_EscapeAnalysis(TR::OptimizationManager *manager)\n    _dememoizationSymRef = NULL;\n \n    _createStackAllocations   = true;\n-   _createLocalObjects       = comp()->target().cpu.isX86() || comp()->target().cpu.isPower() || comp()->target().cpu.isZ();\n+   _createLocalObjects       = comp()->target().cpu.isX86() || comp()->target().cpu.isPower() || comp()->target().cpu.isZ() || comp()->target().cpu.isARM64();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ5ODYzNQ=="}, "originalCommit": {"oid": "7720c4d03a1b7faa0a8a0f410ed9cc53b216d0d8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUzOTI4Mg==", "bodyText": "Thanks.\n@Akira1Saitoh , can you introduce a supportsStackAllocations() query in the common code generator and have each architecture specialize it as necessary (basically, return true for every architecture other than ARM)?\nYou could probably do this in two commits: one to create the API, and the second to actually use it in place of the architecture checks.", "url": "https://github.com/eclipse-openj9/openj9/pull/10264#discussion_r461539282", "createdAt": "2020-07-28T12:26:43Z", "author": {"login": "0xdaryl"}, "path": "runtime/compiler/optimizer/EscapeAnalysis.cpp", "diffHunk": "@@ -133,7 +133,7 @@ TR_EscapeAnalysis::TR_EscapeAnalysis(TR::OptimizationManager *manager)\n    _dememoizationSymRef = NULL;\n \n    _createStackAllocations   = true;\n-   _createLocalObjects       = comp()->target().cpu.isX86() || comp()->target().cpu.isPower() || comp()->target().cpu.isZ();\n+   _createLocalObjects       = comp()->target().cpu.isX86() || comp()->target().cpu.isPower() || comp()->target().cpu.isZ() || comp()->target().cpu.isARM64();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ5ODYzNQ=="}, "originalCommit": {"oid": "7720c4d03a1b7faa0a8a0f410ed9cc53b216d0d8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU2ODQ4Nw==", "bodyText": "Sure, I will add the API to the common code generator and replace those architecture checks with the query.", "url": "https://github.com/eclipse-openj9/openj9/pull/10264#discussion_r461568487", "createdAt": "2020-07-28T13:13:39Z", "author": {"login": "Akira1Saitoh"}, "path": "runtime/compiler/optimizer/EscapeAnalysis.cpp", "diffHunk": "@@ -133,7 +133,7 @@ TR_EscapeAnalysis::TR_EscapeAnalysis(TR::OptimizationManager *manager)\n    _dememoizationSymRef = NULL;\n \n    _createStackAllocations   = true;\n-   _createLocalObjects       = comp()->target().cpu.isX86() || comp()->target().cpu.isPower() || comp()->target().cpu.isZ();\n+   _createLocalObjects       = comp()->target().cpu.isX86() || comp()->target().cpu.isPower() || comp()->target().cpu.isZ() || comp()->target().cpu.isARM64();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ5ODYzNQ=="}, "originalCommit": {"oid": "7720c4d03a1b7faa0a8a0f410ed9cc53b216d0d8"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjcxNjkwOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/z/codegen/J9CodeGenerator.hpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMjo1MDowOVrOG7PKTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNTowODoyMlrOG7RR3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc2NzU2Ng==", "bodyText": "This function is declared as private.", "url": "https://github.com/eclipse-openj9/openj9/pull/10264#discussion_r464767566", "createdAt": "2020-08-04T02:50:09Z", "author": {"login": "knn-k"}, "path": "runtime/compiler/z/codegen/J9CodeGenerator.hpp", "diffHunk": "@@ -336,6 +336,11 @@ class OMR_EXTENSIBLE CodeGenerator : public J9::CodeGenerator\n     *     support such by-passes.\n     */\n    bool _ignoreDecimalOverflowException;\n+\n+   /**\n+    * \\brief Determines whether the code generator supports stack allocations\n+    */\n+   bool supportsStackAllocations() { return true; }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03f90eb73b948ba976a5f9358da6026239aba569"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDgwMjI3MA==", "bodyText": "Thanks. I fixed it.", "url": "https://github.com/eclipse-openj9/openj9/pull/10264#discussion_r464802270", "createdAt": "2020-08-04T05:08:22Z", "author": {"login": "Akira1Saitoh"}, "path": "runtime/compiler/z/codegen/J9CodeGenerator.hpp", "diffHunk": "@@ -336,6 +336,11 @@ class OMR_EXTENSIBLE CodeGenerator : public J9::CodeGenerator\n     *     support such by-passes.\n     */\n    bool _ignoreDecimalOverflowException;\n+\n+   /**\n+    * \\brief Determines whether the code generator supports stack allocations\n+    */\n+   bool supportsStackAllocations() { return true; }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc2NzU2Ng=="}, "originalCommit": {"oid": "03f90eb73b948ba976a5f9358da6026239aba569"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4823, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}