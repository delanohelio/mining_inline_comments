{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwMjcyOTQ3", "number": 10653, "title": "JDK15 Load native libraries via jdk.internal.loader.NativeLibraries", "bodyText": "JDK15 bindNative() first search the nativeLibrary associated with the classloader (like pre-jdk15 levels) for systemClassLoader; if that didn't succeed or the classloader is not systemClassLoader, lookupNativeAddress() is invoked with a NULL nativeLibrary;\nWhen the incoming nativeLibrary is NULL, lookupNativeAddress() calls into java.lang.ClassLoader.findNative() to get native method functionAddress;\nAfter a successful binding, classLoaderRegisterLibrary() skips JNI_Onload() which is going to be invoked by NativeLibraries.load() instead;\nJVM_LoadLibrary() invokes registerBootstrapLibrary() for early bootstrap, and j9sl_open_shared_library for later class loading;\nChanged System.load/loadLibrary to invoke ClassLoader.loadLibrary(caller, fileName);\nAdded JVM_UnloadLibrary() implementation;\n\ncloses: #9018\ncloses: #9442\nSigned-off-by: Jason Feng fengj@ca.ibm.com", "createdAt": "2020-09-21T12:48:18Z", "url": "https://github.com/eclipse-openj9/openj9/pull/10653", "merged": true, "mergeCommit": {"oid": "7591bf3b7f96cb550c8d8eb78d3639bb6817ed2b"}, "closed": true, "closedAt": "2020-09-23T21:33:48Z", "author": {"login": "JasonFengJ9"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdLGePmAFqTQ5MjgxMjg3Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdLxFxHgFqTQ5NDk0ODc4OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyODEyODc3", "url": "https://github.com/eclipse-openj9/openj9/pull/10653#pullrequestreview-492812877", "createdAt": "2020-09-21T17:02:52Z", "commit": {"oid": "86fadf52f033e38f4eb0f569160e7b63637ec1a4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNzowMjo1MlrOHVaUgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNzowMjo1MlrOHVaUgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIxMzM3OQ==", "bodyText": "This can return NULL for unattached threads - might want to assert it here.", "url": "https://github.com/eclipse-openj9/openj9/pull/10653#discussion_r492213379", "createdAt": "2020-09-21T17:02:52Z", "author": {"login": "gacholio"}, "path": "runtime/j9vm/jvm.c", "diffHunk": "@@ -3650,25 +3650,38 @@ JVM_LoadSystemLibrary(const char *libName)\n  */\n \n void* JNICALL\n-JVM_LoadLibrary(const char* libName)\n+JVM_LoadLibrary(const char *libName)\n {\n-\tvoid* result = NULL;\n-\tJ9NativeLibrary* nativeLibrary = NULL;\n-\tJ9JavaVM* javaVM = (J9JavaVM*)BFUjavaVM;\n-\tJ9InternalVMFunctions* vmFuncs = javaVM->internalVMFunctions;\n-\tJ9VMThread* currentThread = vmFuncs->currentVMThread(javaVM);\n+\tvoid *result = NULL;\n+\tJ9JavaVM *javaVM = (J9JavaVM*)BFUjavaVM;\n \n \tTrc_SC_LoadLibrary_Entry(libName);\n-\tvmFuncs->internalEnterVMFromJNI(currentThread);\n-\t/* registerBootstrapLibrary can't have VM access */\n-\tvmFuncs->internalReleaseVMAccess(currentThread);\n-\tif (vmFuncs->registerBootstrapLibrary(currentThread, libName, &nativeLibrary, FALSE) == J9NATIVELIB_LOAD_OK) {\n-\t\tresult = (void*)nativeLibrary->handle;\n-\t}\n-\tvmFuncs->internalAcquireVMAccess(currentThread);\n-\tvmFuncs->internalExitVMToJNI(currentThread);\n+\tif (NULL == javaVM->applicationClassLoader) {\n+\t\tJ9NativeLibrary *nativeLibrary = NULL;\n+\t\tJ9InternalVMFunctions *vmFuncs = javaVM->internalVMFunctions;\n+\t\tJ9VMThread *currentThread = vmFuncs->currentVMThread(javaVM);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86fadf52f033e38f4eb0f569160e7b63637ec1a4"}, "originalPosition": 27}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "86fadf52f033e38f4eb0f569160e7b63637ec1a4", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/86fadf52f033e38f4eb0f569160e7b63637ec1a4", "committedDate": "2020-09-21T01:55:03Z", "message": "JDK15 Load native libraries via jdk.internal.loader.NativeLibraries\n\n* JDK15 bindNative() first search the nativeLibrary associated with the\nclassloader (like pre-jdk15 levels) for systemClassLoader; if that\ndidn't succeed or the classloader is not systemClassLoader,\nlookupNativeAddress() is invoked with a NULL nativeLibrary;\n* When the incoming nativeLibrary is NULL, lookupNativeAddress() call\ninto java.lang.ClassLoader.findNative() to get native method\nfunctionAddress;\n* After a successful binding, classLoaderRegisterLibrary() skips\nJNI_Onload() which is going to be invoked by NativeLibraries.load()\ninstead;\n* JVM_LoadLibrary() \tinvokes registerBootstrapLibrary() for early\nbootstrap, and j9sl_open_shared_library for later class loading;\n* Change System.load/loadLibrary to ClassLoader.loadLibrary(caller,\nfileName);\n* Added JVM_UnloadLibrary() implementation;\n\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}, "afterCommit": {"oid": "70eec2849fd2712c9068e29d9ddd687be6b81791", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/70eec2849fd2712c9068e29d9ddd687be6b81791", "committedDate": "2020-09-22T02:00:47Z", "message": "JDK15 Load native libraries via jdk.internal.loader.NativeLibraries\n\n* JDK15 bindNative() first search the nativeLibrary associated with the\nclassloader (like pre-jdk15 levels) for systemClassLoader; if that\ndidn't succeed or the classloader is not systemClassLoader,\nlookupNativeAddress() is invoked with a NULL nativeLibrary;\n* When the incoming nativeLibrary is NULL, lookupNativeAddress() call\ninto java.lang.ClassLoader.findNative() to get native method\nfunctionAddress;\n* After a successful binding, classLoaderRegisterLibrary() skips\nJNI_Onload() which is going to be invoked by NativeLibraries.load()\ninstead;\n* JVM_LoadLibrary() \tinvokes registerBootstrapLibrary() for early\nbootstrap, and j9sl_open_shared_library for later class loading;\n* Change System.load/loadLibrary to ClassLoader.loadLibrary(caller,\nfileName);\n* Added JVM_UnloadLibrary() implementation;\n\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "70eec2849fd2712c9068e29d9ddd687be6b81791", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/70eec2849fd2712c9068e29d9ddd687be6b81791", "committedDate": "2020-09-22T02:00:47Z", "message": "JDK15 Load native libraries via jdk.internal.loader.NativeLibraries\n\n* JDK15 bindNative() first search the nativeLibrary associated with the\nclassloader (like pre-jdk15 levels) for systemClassLoader; if that\ndidn't succeed or the classloader is not systemClassLoader,\nlookupNativeAddress() is invoked with a NULL nativeLibrary;\n* When the incoming nativeLibrary is NULL, lookupNativeAddress() call\ninto java.lang.ClassLoader.findNative() to get native method\nfunctionAddress;\n* After a successful binding, classLoaderRegisterLibrary() skips\nJNI_Onload() which is going to be invoked by NativeLibraries.load()\ninstead;\n* JVM_LoadLibrary() \tinvokes registerBootstrapLibrary() for early\nbootstrap, and j9sl_open_shared_library for later class loading;\n* Change System.load/loadLibrary to ClassLoader.loadLibrary(caller,\nfileName);\n* Added JVM_UnloadLibrary() implementation;\n\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}, "afterCommit": {"oid": "f450c671572065ea7d11129d11660599fa48ac1e", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/f450c671572065ea7d11129d11660599fa48ac1e", "committedDate": "2020-09-22T02:08:24Z", "message": "JDK15 Load native libraries via jdk.internal.loader.NativeLibraries\n\n* JDK15 bindNative() first search the nativeLibrary associated with the\nclassloader (like pre-jdk15 levels) for systemClassLoader; if that\ndidn't succeed or the classloader is not systemClassLoader,\nlookupNativeAddress() is invoked with a NULL nativeLibrary;\n* When the incoming nativeLibrary is NULL, lookupNativeAddress() call\ninto java.lang.ClassLoader.findNative() to get native method\nfunctionAddress;\n* After a successful binding, classLoaderRegisterLibrary() skips\nJNI_Onload() which is going to be invoked by NativeLibraries.load()\ninstead;\n* JVM_LoadLibrary() \tinvokes registerBootstrapLibrary() for early\nbootstrap, and j9sl_open_shared_library for later class loading;\n* Change System.load/loadLibrary to ClassLoader.loadLibrary(caller,\nfileName);\n* Added JVM_UnloadLibrary() implementation;\n\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f450c671572065ea7d11129d11660599fa48ac1e", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/f450c671572065ea7d11129d11660599fa48ac1e", "committedDate": "2020-09-22T02:08:24Z", "message": "JDK15 Load native libraries via jdk.internal.loader.NativeLibraries\n\n* JDK15 bindNative() first search the nativeLibrary associated with the\nclassloader (like pre-jdk15 levels) for systemClassLoader; if that\ndidn't succeed or the classloader is not systemClassLoader,\nlookupNativeAddress() is invoked with a NULL nativeLibrary;\n* When the incoming nativeLibrary is NULL, lookupNativeAddress() call\ninto java.lang.ClassLoader.findNative() to get native method\nfunctionAddress;\n* After a successful binding, classLoaderRegisterLibrary() skips\nJNI_Onload() which is going to be invoked by NativeLibraries.load()\ninstead;\n* JVM_LoadLibrary() \tinvokes registerBootstrapLibrary() for early\nbootstrap, and j9sl_open_shared_library for later class loading;\n* Change System.load/loadLibrary to ClassLoader.loadLibrary(caller,\nfileName);\n* Added JVM_UnloadLibrary() implementation;\n\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}, "afterCommit": {"oid": "5c003fd382964bd0e977b4d085c2ae4b3d61d9fa", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/5c003fd382964bd0e977b4d085c2ae4b3d61d9fa", "committedDate": "2020-09-22T12:25:24Z", "message": "JDK15 Load native libraries via jdk.internal.loader.NativeLibraries\n\n* JDK15 bindNative() first search the nativeLibrary associated with the\nclassloader (like pre-jdk15 levels) for systemClassLoader; if that\ndidn't succeed or the classloader is not systemClassLoader,\nlookupNativeAddress() is invoked with a NULL nativeLibrary;\n* When the incoming nativeLibrary is NULL, lookupNativeAddress() call\ninto java.lang.ClassLoader.findNative() to get native method\nfunctionAddress;\n* After a successful binding, classLoaderRegisterLibrary() skips\nJNI_Onload() which is going to be invoked by NativeLibraries.load()\ninstead;\n* JVM_LoadLibrary() \tinvokes registerBootstrapLibrary() for early\nbootstrap, and j9sl_open_shared_library for later class loading;\n* Change System.load/loadLibrary to ClassLoader.loadLibrary(caller,\nfileName);\n* Added JVM_UnloadLibrary() implementation;\n\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5c003fd382964bd0e977b4d085c2ae4b3d61d9fa", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/5c003fd382964bd0e977b4d085c2ae4b3d61d9fa", "committedDate": "2020-09-22T12:25:24Z", "message": "JDK15 Load native libraries via jdk.internal.loader.NativeLibraries\n\n* JDK15 bindNative() first search the nativeLibrary associated with the\nclassloader (like pre-jdk15 levels) for systemClassLoader; if that\ndidn't succeed or the classloader is not systemClassLoader,\nlookupNativeAddress() is invoked with a NULL nativeLibrary;\n* When the incoming nativeLibrary is NULL, lookupNativeAddress() call\ninto java.lang.ClassLoader.findNative() to get native method\nfunctionAddress;\n* After a successful binding, classLoaderRegisterLibrary() skips\nJNI_Onload() which is going to be invoked by NativeLibraries.load()\ninstead;\n* JVM_LoadLibrary() \tinvokes registerBootstrapLibrary() for early\nbootstrap, and j9sl_open_shared_library for later class loading;\n* Change System.load/loadLibrary to ClassLoader.loadLibrary(caller,\nfileName);\n* Added JVM_UnloadLibrary() implementation;\n\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}, "afterCommit": {"oid": "e6ea56ea642e5e1604f45d7949d1ce976bc34409", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/e6ea56ea642e5e1604f45d7949d1ce976bc34409", "committedDate": "2020-09-22T20:55:51Z", "message": "JDK15 Load native libraries via jdk.internal.loader.NativeLibraries\n\n* JDK15 bindNative() first search the nativeLibrary associated with the\nclassloader (like pre-jdk15 levels) for systemClassLoader; if that\ndidn't succeed or the classloader is not systemClassLoader,\nlookupNativeAddress() is invoked with a NULL nativeLibrary;\n* When the incoming nativeLibrary is NULL, lookupNativeAddress() call\ninto java.lang.ClassLoader.findNative() to get native method\nfunctionAddress;\n* After a successful binding, classLoaderRegisterLibrary() skips\nJNI_Onload() which is going to be invoked by NativeLibraries.load()\ninstead;\n* JVM_LoadLibrary() \tinvokes registerBootstrapLibrary() for early\nbootstrap, and j9sl_open_shared_library for later class loading;\n* Change System.load/loadLibrary to ClassLoader.loadLibrary(caller,\nfileName);\n* Added JVM_UnloadLibrary() implementation;\n* Added a few tracepoints;\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e6ea56ea642e5e1604f45d7949d1ce976bc34409", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/e6ea56ea642e5e1604f45d7949d1ce976bc34409", "committedDate": "2020-09-22T20:55:51Z", "message": "JDK15 Load native libraries via jdk.internal.loader.NativeLibraries\n\n* JDK15 bindNative() first search the nativeLibrary associated with the\nclassloader (like pre-jdk15 levels) for systemClassLoader; if that\ndidn't succeed or the classloader is not systemClassLoader,\nlookupNativeAddress() is invoked with a NULL nativeLibrary;\n* When the incoming nativeLibrary is NULL, lookupNativeAddress() call\ninto java.lang.ClassLoader.findNative() to get native method\nfunctionAddress;\n* After a successful binding, classLoaderRegisterLibrary() skips\nJNI_Onload() which is going to be invoked by NativeLibraries.load()\ninstead;\n* JVM_LoadLibrary() \tinvokes registerBootstrapLibrary() for early\nbootstrap, and j9sl_open_shared_library for later class loading;\n* Change System.load/loadLibrary to ClassLoader.loadLibrary(caller,\nfileName);\n* Added JVM_UnloadLibrary() implementation;\n* Added a few tracepoints;\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}, "afterCommit": {"oid": "5d77e725e32b07db436088b13141320eeac9b60b", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/5d77e725e32b07db436088b13141320eeac9b60b", "committedDate": "2020-09-23T15:01:08Z", "message": "JDK15 Load native libraries via jdk.internal.loader.NativeLibraries\n\n* JDK15 bindNative() first search the nativeLibrary associated with the\nclassloader (like pre-jdk15 levels) for systemClassLoader; if that\ndidn't succeed or the classloader is not systemClassLoader,\nlookupNativeAddress() is invoked with a NULL nativeLibrary;\n* When the incoming nativeLibrary is NULL, lookupNativeAddress() call\ninto java.lang.ClassLoader.findNative() to get native method\nfunctionAddress;\n* After a successful binding, classLoaderRegisterLibrary() skips\nJNI_Onload() which is going to be invoked by NativeLibraries.load()\ninstead;\n* JVM_LoadLibrary() \tinvokes registerBootstrapLibrary() for early\nbootstrap, and j9sl_open_shared_library for later class loading;\n* Change System.load/loadLibrary to ClassLoader.loadLibrary(caller,\nfileName);\n* Added JVM_UnloadLibrary() implementation;\n* Added a few tracepoints;\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0ODg4NjIx", "url": "https://github.com/eclipse-openj9/openj9/pull/10653#pullrequestreview-494888621", "createdAt": "2020-09-23T17:29:10Z", "commit": {"oid": "5d77e725e32b07db436088b13141320eeac9b60b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNzoyOToxMFrOHW5HEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNzoyOToxMFrOHW5HEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc2NjQxOQ==", "bodyText": "Does Mac define J9UNIX?", "url": "https://github.com/eclipse-openj9/openj9/pull/10653#discussion_r493766419", "createdAt": "2020-09-23T17:29:10Z", "author": {"login": "gacholio"}, "path": "runtime/j9vm/j7vmi.c", "diffHunk": "@@ -2312,12 +2312,27 @@ JVM_SuspendThread(jint arg0, jint arg1)\n }\n \n \n-\n-jobject JNICALL\n-JVM_UnloadLibrary(jint arg0)\n+/* NOTE this is required by JDK15+ jdk.internal.loader.NativeLibraries.unload().\n+ */\n+#if JAVA_SPEC_VERSION >= 15\n+void JNICALL JVM_UnloadLibrary(void *handle)\n+#else /* JAVA_SPEC_VERSION >= 15 */\n+jobject JNICALL JVM_UnloadLibrary(jint arg0)\n+#endif /* JAVA_SPEC_VERSION >= 15 */\n {\n+#if JAVA_SPEC_VERSION >= 15\n+\tTrc_SC_UnloadLibrary_Entry(handle);\n+#if defined(WIN32)\n+\tFreeLibrary((HMODULE)handle);\n+#elif defined(J9UNIX) || defined(J9ZOS390) /* defined(WIN32) */\n+\tdlclose(handle);\n+#else /* defined(WIN32) */\n+#error \"Please implement J7vmi.c:JVM_UnloadLibrary(void *handle)\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d77e725e32b07db436088b13141320eeac9b60b"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0ODkxNDQy", "url": "https://github.com/eclipse-openj9/openj9/pull/10653#pullrequestreview-494891442", "createdAt": "2020-09-23T17:32:46Z", "commit": {"oid": "5d77e725e32b07db436088b13141320eeac9b60b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNzozMjo0N1rOHW5PtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNzozMjo0N1rOHW5PtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc2ODYyOA==", "bodyText": "Please move the braces out of the ifdef (similarly below).", "url": "https://github.com/eclipse-openj9/openj9/pull/10653#discussion_r493768628", "createdAt": "2020-09-23T17:32:47Z", "author": {"login": "gacholio"}, "path": "runtime/vm/bindnatv.cpp", "diffHunk": "@@ -957,17 +963,33 @@ bindNative(J9VMThread *currentThread, J9Method *nativeMethod, char * longJNI, ch\n \t\t++argCount;\n \t}\n \n-\t/* Search each shared library in the class loader for a matching native */\n-\tnativeLibrary = classLoader->librariesHead;\n-\twhile (nativeLibrary != NULL) {\n-\t\tUDATA rc = lookupNativeAddress(currentThread, nativeMethod, nativeLibrary, longJNI, shortJNI, argCount, bindJNINative);\n-\t\tif (J9_NATIVE_METHOD_IS_BOUND(nativeMethod)) {\n-\t\t\treturn J9_NATIVE_METHOD_BIND_SUCCESS;\n-\t\t} else if (J9_NATIVE_METHOD_BIND_OUT_OF_MEMORY == rc) {\n-\t\t\treturn rc;\n+#if JAVA_SPEC_VERSION >= 15\n+\tif (classLoader == vm->systemClassLoader) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d77e725e32b07db436088b13141320eeac9b60b"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0ODkzMjc5", "url": "https://github.com/eclipse-openj9/openj9/pull/10653#pullrequestreview-494893279", "createdAt": "2020-09-23T17:35:19Z", "commit": {"oid": "5d77e725e32b07db436088b13141320eeac9b60b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNzozNToxOVrOHW5VaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNzozNToxOVrOHW5VaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc3MDA4OQ==", "bodyText": "Invalid comment format for a C file.", "url": "https://github.com/eclipse-openj9/openj9/pull/10653#discussion_r493770089", "createdAt": "2020-09-23T17:35:19Z", "author": {"login": "gacholio"}, "path": "runtime/vm/vmbootlib.c", "diffHunk": "@@ -703,15 +701,18 @@ classLoaderRegisterLibrary(void *voidVMThread, J9ClassLoader *classLoader, const\n #if defined(J9VM_INTERP_ATOMIC_FREE_JNI)\n \t\t\texitVMToJNI(vmThread);\n #endif /* J9VM_INTERP_ATOMIC_FREE_JNI */\n+#if JAVA_SPEC_VERSION < 15\n+// NativeLibraries is going to call JNI_Onload depending on JNI flag", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d77e725e32b07db436088b13141320eeac9b60b"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0ODk0NjUw", "url": "https://github.com/eclipse-openj9/openj9/pull/10653#pullrequestreview-494894650", "createdAt": "2020-09-23T17:37:03Z", "commit": {"oid": "5d77e725e32b07db436088b13141320eeac9b60b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNzozNzowM1rOHW5ZXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNzozNzowM1rOHW5ZXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc3MTEwMg==", "bodyText": "Why not NLS?", "url": "https://github.com/eclipse-openj9/openj9/pull/10653#discussion_r493771102", "createdAt": "2020-09-23T17:37:03Z", "author": {"login": "gacholio"}, "path": "jcl/src/java.base/share/classes/java/lang/ClassLoader.java", "diffHunk": "@@ -1982,10 +1999,49 @@ static void loadLibrary(Class<?> caller, String name, boolean fullPath) {\n \n /*[IF Java15]*/\n static void loadLibrary(Class<?> caller, File file) {\n-\tloadLibraryWithPath(file.getAbsolutePath(), caller.getClassLoaderImpl(), null);\n+\tClassLoader loader = (caller == null) ? null : caller.getClassLoader();\n+\tNativeLibraries nls = (loader == null) ? bootstrapClassLoader.nativelibs : loader.nativelibs;\n+\tNativeLibrary nl = nls.loadLibrary(caller, file);\n+\tif (nl == null) {\n+\t\tthrow new UnsatisfiedLinkError(\"Can't load \" + file); //$NON-NLS-1$", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d77e725e32b07db436088b13141320eeac9b60b"}, "originalPosition": 63}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6de2f9b86fcd73d0c2a77e6cff805ff61632928", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/e6de2f9b86fcd73d0c2a77e6cff805ff61632928", "committedDate": "2020-09-23T18:21:15Z", "message": "JDK15 Load native libraries via jdk.internal.loader.NativeLibraries\n\n* JDK15 bindNative() first search the nativeLibrary associated with the\nclassloader (like pre-jdk15 levels) for systemClassLoader; if that\ndidn't succeed or the classloader is not systemClassLoader,\nlookupNativeAddress() is invoked with a NULL nativeLibrary;\n* When the incoming nativeLibrary is NULL, lookupNativeAddress() call\ninto java.lang.ClassLoader.findNative() to get native method\nfunctionAddress;\n* After a successful binding, classLoaderRegisterLibrary() skips\nJNI_Onload() which is going to be invoked by NativeLibraries.load()\ninstead;\n* JVM_LoadLibrary() \tinvokes registerBootstrapLibrary() for early\nbootstrap, and j9sl_open_shared_library for later class loading;\n* Change System.load/loadLibrary to ClassLoader.loadLibrary(caller,\nfileName);\n* Added JVM_UnloadLibrary() implementation;\n* Added a few tracepoints;\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5d77e725e32b07db436088b13141320eeac9b60b", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/5d77e725e32b07db436088b13141320eeac9b60b", "committedDate": "2020-09-23T15:01:08Z", "message": "JDK15 Load native libraries via jdk.internal.loader.NativeLibraries\n\n* JDK15 bindNative() first search the nativeLibrary associated with the\nclassloader (like pre-jdk15 levels) for systemClassLoader; if that\ndidn't succeed or the classloader is not systemClassLoader,\nlookupNativeAddress() is invoked with a NULL nativeLibrary;\n* When the incoming nativeLibrary is NULL, lookupNativeAddress() call\ninto java.lang.ClassLoader.findNative() to get native method\nfunctionAddress;\n* After a successful binding, classLoaderRegisterLibrary() skips\nJNI_Onload() which is going to be invoked by NativeLibraries.load()\ninstead;\n* JVM_LoadLibrary() \tinvokes registerBootstrapLibrary() for early\nbootstrap, and j9sl_open_shared_library for later class loading;\n* Change System.load/loadLibrary to ClassLoader.loadLibrary(caller,\nfileName);\n* Added JVM_UnloadLibrary() implementation;\n* Added a few tracepoints;\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}, "afterCommit": {"oid": "e6de2f9b86fcd73d0c2a77e6cff805ff61632928", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/e6de2f9b86fcd73d0c2a77e6cff805ff61632928", "committedDate": "2020-09-23T18:21:15Z", "message": "JDK15 Load native libraries via jdk.internal.loader.NativeLibraries\n\n* JDK15 bindNative() first search the nativeLibrary associated with the\nclassloader (like pre-jdk15 levels) for systemClassLoader; if that\ndidn't succeed or the classloader is not systemClassLoader,\nlookupNativeAddress() is invoked with a NULL nativeLibrary;\n* When the incoming nativeLibrary is NULL, lookupNativeAddress() call\ninto java.lang.ClassLoader.findNative() to get native method\nfunctionAddress;\n* After a successful binding, classLoaderRegisterLibrary() skips\nJNI_Onload() which is going to be invoked by NativeLibraries.load()\ninstead;\n* JVM_LoadLibrary() \tinvokes registerBootstrapLibrary() for early\nbootstrap, and j9sl_open_shared_library for later class loading;\n* Change System.load/loadLibrary to ClassLoader.loadLibrary(caller,\nfileName);\n* Added JVM_UnloadLibrary() implementation;\n* Added a few tracepoints;\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0OTQ4Nzg4", "url": "https://github.com/eclipse-openj9/openj9/pull/10653#pullrequestreview-494948788", "createdAt": "2020-09-23T18:42:03Z", "commit": {"oid": "e6de2f9b86fcd73d0c2a77e6cff805ff61632928"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 73, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}