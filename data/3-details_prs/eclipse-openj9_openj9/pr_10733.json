{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0NDMxMDI4", "number": 10733, "title": "BytecodeInterpreter changes to adopt OpenJDK MethodHandles", "bodyText": "New INLs:\ni. invokeBasic: [Virtual] this.invokeBasic(args, ...,  mn)\nThe MH receiver is located before the arguments.\n  -- java_lang_invoke_MethodHandle::form -> LambdaForm\n  --- java_lang_invoke_LambdaForm::vmentry -> MemberName\n  ---- java_lang_invoke_MemberName::vmtarget -> J9Method*\n  ----- invoke_target(vmtarget)\n\nii. linkToStaticSpecial: [Static] MH.linkToStaticSpecial(this, args ..., mn)\nThe object at the top of the stack is a MemberName instance.\n  -- java_lang_invoke_MemberName::vmtarget -> J9Method*\n  --- invoke_target(vmtarget)\n\niii. linkToVirtual: [Static] MH.linkTo*(this, args ..., mn)\nThe object at the top of the stack is a MemberName instance.\n  -- java_lang_invoke_MemberName::vmtarget -> J9JNIMethodID*\n  --- invoke_target(receiverClass + vmtarget->vTableIndex)\n\niv. linkToInterface: [Static] MH.linkTo*(this, args ..., mn)\nThe object at the top of the stack is a MemberName instance.\n  -- java_lang_invoke_MemberName::vmtarget -> J9JNIMethodID*\n  --- iTable query to find the vTableOffset\n  ---- invoke_target(receiverClass + vTableOffset)\n\nFor INL invocations from the JIT,\n\ninvokeBasic: JIT return address is restored and j2i transition is\ninvoked.\nlinkTo*: the MemberName object is moved in front of the first\nargument before the JIT return address is restored and j2i transition is\ninvoked.\n\n\n\nRewrite invokedynamic to work with OpenJDK MethodHandles.\nThe execution bytecode has changed to GOTO_RUN_METHOD.\nThe resolution method has changed. MethodHandleNatives.linkCallSite is\ncalled for resolution. It returns two items: 1) MemberName object and 2)\nMethodHandle object.\nThe _sendMethod is derived from the MemberName object:\njava_lang_invoke_MemberName::vmtarget -> J9Method*.\nThe MethodHandle object is pushed on top of the stack since it is the\nlast argument for the _sendMethod.\nThen, the _sendMethod is invoked.\n\n\nRewrite invokehandle to work with OpenJDK MethodHandles.\nThe execution bytecode has changed to GOTO_RUN_METHOD.\nThe resolution method has changed. MethodHandleNatives.linkMethod is\ncalled for resolution. It returns two items: 1) MemberName object and 2)\nMethodHandle object.\nThe _sendMethod is derived from the MemberName object:\njava_lang_invoke_MemberName::vmtarget -> J9Method*.\nThe MethodHandle object is pushed on top of the stack since it is the\nlast argument for the _sendMethod.\nThen, the _sendMethod is invoked.\n\n\ninvokehandlegeneric is unused with OpenJDK MethodHandles\nFor OpenJDK MethodHandles (MH), MH.invoke and MH.invokeExact both share\ncommon functionality. So, they are both translated to invokehandle.\nThus, invokehandlegeneric stays unused with OpenJDK MethodHandles.\n\n\nRelated: #7352\nCo-authored-by: Jack Lu Jack.S.Lu@ibm.com\nSigned-off-by: Babneet Singh sbabneet@ca.ibm.com", "createdAt": "2020-09-28T22:11:48Z", "url": "https://github.com/eclipse-openj9/openj9/pull/10733", "merged": true, "mergeCommit": {"oid": "8f8fb28b259738880734d9f56330171b39ed311d"}, "closed": true, "closedAt": "2020-10-01T01:43:07Z", "author": {"login": "babsingh"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdNbNJjgBqjM4MTY2ODc1MzM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdOJ9nIgFqTUwMDAwNTk4NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ea65ebd15297ce96a990b8669057e279eb3a9387", "author": {"user": {"login": "babsingh", "name": "Babneet Singh"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/ea65ebd15297ce96a990b8669057e279eb3a9387", "committedDate": "2020-09-28T21:49:33Z", "message": "Note that invokehandlegeneric is unused with OpenJDK MethodHandles\n\nFor OpenJDK MethodHandles (MH), MH.invoke and MH.invokeExact both share\ncommon functionality. So, they are both translated to invokehandle.\n\nThus, invokehandlegeneric stays unused with OpenJDK MethodHandles.\n\nCo-authored-by: Jack Lu <Jack.S.Lu@ibm.com>\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>"}, "afterCommit": {"oid": "a92f85449b18a11f2aa9825a5febc503d596dea9", "author": {"user": {"login": "babsingh", "name": "Babneet Singh"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/a92f85449b18a11f2aa9825a5febc503d596dea9", "committedDate": "2020-09-28T22:19:55Z", "message": "Note that invokehandlegeneric is unused with OpenJDK MethodHandles\n\nFor OpenJDK MethodHandles (MH), MH.invoke and MH.invokeExact both share\ncommon functionality. So, they are both translated to invokehandle.\n\nThus, invokehandlegeneric stays unused with OpenJDK MethodHandles.\n\nCo-authored-by: Jack Lu <Jack.S.Lu@ibm.com>\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a92f85449b18a11f2aa9825a5febc503d596dea9", "author": {"user": {"login": "babsingh", "name": "Babneet Singh"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/a92f85449b18a11f2aa9825a5febc503d596dea9", "committedDate": "2020-09-28T22:19:55Z", "message": "Note that invokehandlegeneric is unused with OpenJDK MethodHandles\n\nFor OpenJDK MethodHandles (MH), MH.invoke and MH.invokeExact both share\ncommon functionality. So, they are both translated to invokehandle.\n\nThus, invokehandlegeneric stays unused with OpenJDK MethodHandles.\n\nCo-authored-by: Jack Lu <Jack.S.Lu@ibm.com>\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>"}, "afterCommit": {"oid": "1d0255f86b0bb0d8db2d6686e8e2cb8bcef3f50b", "author": {"user": {"login": "babsingh", "name": "Babneet Singh"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/1d0255f86b0bb0d8db2d6686e8e2cb8bcef3f50b", "committedDate": "2020-09-28T22:37:17Z", "message": "Note that invokehandlegeneric is unused with OpenJDK MethodHandles\n\nFor OpenJDK MethodHandles (MH), MH.invoke and MH.invokeExact both share\ncommon functionality. So, they are both translated to invokehandle.\n\nThus, invokehandlegeneric stays unused with OpenJDK MethodHandles.\n\nCo-authored-by: Jack Lu <Jack.S.Lu@ibm.com>\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1d0255f86b0bb0d8db2d6686e8e2cb8bcef3f50b", "author": {"user": {"login": "babsingh", "name": "Babneet Singh"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/1d0255f86b0bb0d8db2d6686e8e2cb8bcef3f50b", "committedDate": "2020-09-28T22:37:17Z", "message": "Note that invokehandlegeneric is unused with OpenJDK MethodHandles\n\nFor OpenJDK MethodHandles (MH), MH.invoke and MH.invokeExact both share\ncommon functionality. So, they are both translated to invokehandle.\n\nThus, invokehandlegeneric stays unused with OpenJDK MethodHandles.\n\nCo-authored-by: Jack Lu <Jack.S.Lu@ibm.com>\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>"}, "afterCommit": {"oid": "1ab36bbac1ffd18fdef13d6e67e6d59c99f533a9", "author": {"user": {"login": "babsingh", "name": "Babneet Singh"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/1ab36bbac1ffd18fdef13d6e67e6d59c99f533a9", "committedDate": "2020-09-28T22:41:19Z", "message": "Note that invokehandlegeneric is unused with OpenJDK MethodHandles\n\nFor OpenJDK MethodHandles (MH), MH.invoke and MH.invokeExact both share\ncommon functionality. So, they are both translated to invokehandle.\n\nThus, invokehandlegeneric stays unused with OpenJDK MethodHandles.\n\nCo-authored-by: Jack Lu <Jack.S.Lu@ibm.com>\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4ODAwODI3", "url": "https://github.com/eclipse-openj9/openj9/pull/10733#pullrequestreview-498800827", "createdAt": "2020-09-29T19:11:57Z", "commit": {"oid": "1ab36bbac1ffd18fdef13d6e67e6d59c99f533a9"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxOToxMTo1N1rOHZ8-1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxOToxMjowM1rOHZ8_Ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk3NTU3NA==", "bodyText": "I dont think we really need volatile here?", "url": "https://github.com/eclipse-openj9/openj9/pull/10733#discussion_r496975574", "createdAt": "2020-09-29T19:11:57Z", "author": {"login": "fengxue-IS"}, "path": "runtime/vm/BytecodeInterpreter.hpp", "diffHunk": "@@ -8054,26 +8109,75 @@ class INTERPRETER_CLASS\n \t\t}\n done:\n \t\treturn rc;\n-#else\n-\tAssert_VM_unreachable();\n-\treturn EXECUTE_BYTECODE;\n-#endif /* J9VM_OPT_METHOD_HANDLE */\n \t}\n+#elif defined(J9VM_OPT_OPENJDK_METHODHANDLE) /* defined(J9VM_OPT_METHOD_HANDLE) */\n+\tVMINLINE VM_BytecodeAction\n+\tinvokehandle(REGISTER_ARGS_LIST)\n+\t{\n+retry:\n+\t\tVM_BytecodeAction rc = GOTO_RUN_METHOD;\n+\t\tU_16 index = *(U_16 *)(_pc + 1);\n+\n+\t\tJ9ConstantPool *ramConstantPool = J9_CP_FROM_METHOD(_literals);\n+\t\tJ9RAMMethodRef *ramMethodRef = ((J9RAMMethodRef *)ramConstantPool) + index;\n+\n+\t\tUDATA invokeCacheIndex = ramMethodRef->methodIndexAndArgCount >> 8;\n+\t\tJ9InvokeCacheEntry *resultEntry = ((J9InvokeCacheEntry *)J9_CLASS_FROM_CP(ramConstantPool)->invokeCache) + invokeCacheIndex;\n+\n+\t\tj9object_t volatile memberNameObject = resultEntry->target;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ab36bbac1ffd18fdef13d6e67e6d59c99f533a9"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk3NTcwNw==", "bodyText": "Maybe put the casting in brackets? This help to make the pointer addition target more clear\n((J9InvokeCacheEntry *)ramConstantPool->ramClass->callSites) + index;", "url": "https://github.com/eclipse-openj9/openj9/pull/10733#discussion_r496975707", "createdAt": "2020-09-29T19:12:03Z", "author": {"login": "fengxue-IS"}, "path": "runtime/vm/BytecodeInterpreter.hpp", "diffHunk": "@@ -8004,35 +8007,87 @@ class INTERPRETER_CLASS\n \t\t\t\tgoto retry;\n \t\t\t}\n \t\t}\n+\n \t\treturn rc;\n-#else\n-\tAssert_VM_unreachable();\n-\treturn EXECUTE_BYTECODE;\n-#endif /* J9VM_OPT_METHOD_HANDLE */\n \t}\n+#elif defined(J9VM_OPT_OPENJDK_METHODHANDLE) /* defined(J9VM_OPT_METHOD_HANDLE) */\n+\tVMINLINE VM_BytecodeAction\n+\tinvokedynamic(REGISTER_ARGS_LIST)\n+\t{\n+retry:\n+\t\tVM_BytecodeAction rc = GOTO_RUN_METHOD;\n+\t\tU_16 index = *(U_16 *)(_pc + 1);\n+\n+\t\tJ9ConstantPool *ramConstantPool = J9_CP_FROM_METHOD(_literals);\n+\t\tJ9InvokeCacheEntry *invokeCache = (J9InvokeCacheEntry *)ramConstantPool->ramClass->callSites + index;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ab36bbac1ffd18fdef13d6e67e6d59c99f533a9"}, "originalPosition": 45}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1ab36bbac1ffd18fdef13d6e67e6d59c99f533a9", "author": {"user": {"login": "babsingh", "name": "Babneet Singh"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/1ab36bbac1ffd18fdef13d6e67e6d59c99f533a9", "committedDate": "2020-09-28T22:41:19Z", "message": "Note that invokehandlegeneric is unused with OpenJDK MethodHandles\n\nFor OpenJDK MethodHandles (MH), MH.invoke and MH.invokeExact both share\ncommon functionality. So, they are both translated to invokehandle.\n\nThus, invokehandlegeneric stays unused with OpenJDK MethodHandles.\n\nCo-authored-by: Jack Lu <Jack.S.Lu@ibm.com>\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>"}, "afterCommit": {"oid": "f43a6978bcb3a63dfad417ad18bf80ac0ccd6030", "author": {"user": {"login": "babsingh", "name": "Babneet Singh"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/f43a6978bcb3a63dfad417ad18bf80ac0ccd6030", "committedDate": "2020-09-30T15:14:51Z", "message": "Note that invokehandlegeneric is unused with OpenJDK MethodHandles\n\nFor OpenJDK MethodHandles (MH), MH.invoke and MH.invokeExact both share\ncommon functionality. So, they are both translated to invokehandle.\n\nThus, invokehandlegeneric stays unused with OpenJDK MethodHandles.\n\nCo-authored-by: Jack Lu <Jack.S.Lu@ibm.com>\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5NTc3Nzgw", "url": "https://github.com/eclipse-openj9/openj9/pull/10733#pullrequestreview-499577780", "createdAt": "2020-09-30T15:52:04Z", "commit": {"oid": "f43a6978bcb3a63dfad417ad18bf80ac0ccd6030"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNTo1MjowNFrOHakRZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNTo1MjowNFrOHakRZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzYxOTMwMg==", "bodyText": "Please use sp -= 1", "url": "https://github.com/eclipse-openj9/openj9/pull/10733#discussion_r497619302", "createdAt": "2020-09-30T15:52:04Z", "author": {"login": "gacholio"}, "path": "runtime/vm/BytecodeInterpreter.hpp", "diffHunk": "@@ -8119,11 +8223,186 @@ class INTERPRETER_CLASS\n \t\t}\n done:\n \t\treturn rc;\n-#else\n+#else /* defined(J9VM_OPT_METHOD_HANDLE) */\n+\t/* When J9VM_OPT_OPENJDK_METHODHANDLE is enabled, MH.invoke and MH.invokeExact are\n+\t * both translated to invokehandle. So, invokehandlegeneric is not used with OpenJDK\n+\t * MethodHandles.\n+\t */\n \tAssert_VM_unreachable();\n \treturn EXECUTE_BYTECODE;\n-#endif /* J9VM_OPT_METHOD_HANDLE */\n+#endif /* defined(J9VM_OPT_METHOD_HANDLE) */\n+\t}\n+\n+#if defined(J9VM_OPT_OPENJDK_METHODHANDLE)\n+\tVMINLINE VM_BytecodeAction\n+\tinvokeBasic(REGISTER_ARGS_LIST)\n+\t{\n+\t\tVM_BytecodeAction rc = GOTO_RUN_METHOD;\n+\t\tbool fromJIT = J9_ARE_ANY_BITS_SET(_currentThread->jitStackFrameFlags, J9_SSF_JIT_NATIVE_TRANSITION_FRAME);\n+\t\tUDATA methodArgCount = 0;\n+\n+\t\tif (fromJIT) {\n+\t\t\tmethodArgCount = _currentThread->tempSlot;\n+\t\t} else {\n+\t\t\tU_16 index = *(U_16 *)(_pc + 1);\n+\t\t\tJ9ConstantPool *ramConstantPool = J9_CP_FROM_METHOD(_literals);\n+\t\t\tJ9RAMMethodRef *ramMethodRef = ((J9RAMMethodRef *)ramConstantPool) + index;\n+\t\t\tUDATA volatile methodIndexAndArgCount = ramMethodRef->methodIndexAndArgCount;\n+\t\t\tmethodArgCount = (methodIndexAndArgCount & 0xFF);\n+\t\t}\n+\n+\t\tj9object_t mhReceiver = ((j9object_t *)_sp)[methodArgCount];\n+\t\tif (J9_UNEXPECTED(NULL == mhReceiver)) {\n+\t\t\treturn THROW_NPE;\n+\t\t}\n+\n+\t\tj9object_t lambdaForm = J9VMJAVALANGINVOKEMETHODHANDLE_FORM(_currentThread, mhReceiver);\n+\t\tj9object_t memberName = J9VMJAVALANGINVOKELAMBDAFORM_VMENTRY(_currentThread, lambdaForm);\n+\t\t_sendMethod = (J9Method *)(UDATA)J9OBJECT_U64_LOAD(_currentThread, memberName, _vm->vmtargetOffset);\n+\n+\t\tif (fromJIT) {\n+\t\t\t_currentThread->jitStackFrameFlags = 0;\n+\t\t\tVM_JITInterface::restoreJITReturnAddress(_currentThread, _sp, (void *)_literals);\n+\t\t\trc = j2iTransition(REGISTER_ARGS);\n+\t\t}\n+\n+\t\treturn rc;\n+\t}\n+\n+\tVMINLINE VM_BytecodeAction\n+\tlinkToStaticSpecial(REGISTER_ARGS_LIST)\n+\t{\n+\t\tVM_BytecodeAction rc = GOTO_RUN_METHOD;\n+\t\tbool fromJIT = J9_ARE_ANY_BITS_SET(_currentThread->jitStackFrameFlags, J9_SSF_JIT_NATIVE_TRANSITION_FRAME);\n+\n+\t\t/* Pop memberNameObject from the stack. */\n+\t\tj9object_t memberNameObject = *(j9object_t *)_sp++;\n+\t\tif (J9_UNEXPECTED(NULL == memberNameObject)) {\n+\t\t\treturn THROW_NPE;\n+\t\t}\n+\n+\t\t_sendMethod = (J9Method *)(UDATA)J9OBJECT_U64_LOAD(_currentThread, memberNameObject, _vm->vmtargetOffset);\n+\n+\t\tif (fromJIT) {\n+\t\t\tJ9ROMMethod *romMethod = J9_ROM_METHOD_FROM_RAM_METHOD(_sendMethod);\n+\t\t\tUDATA methodArgCount = romMethod->argCount;\n+\t\t\t/* Restore sp position before popping memberNameObject. */\n+\t\t\t--_sp;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f43a6978bcb3a63dfad417ad18bf80ac0ccd6030"}, "originalPosition": 298}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5NTc4MjE1", "url": "https://github.com/eclipse-openj9/openj9/pull/10733#pullrequestreview-499578215", "createdAt": "2020-09-30T15:52:32Z", "commit": {"oid": "f43a6978bcb3a63dfad417ad18bf80ac0ccd6030"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNTo1MjozMlrOHakSlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNTo1MjozMlrOHakSlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzYxOTYwNQ==", "bodyText": "Same comment as above.", "url": "https://github.com/eclipse-openj9/openj9/pull/10733#discussion_r497619605", "createdAt": "2020-09-30T15:52:32Z", "author": {"login": "gacholio"}, "path": "runtime/vm/BytecodeInterpreter.hpp", "diffHunk": "@@ -8119,11 +8223,186 @@ class INTERPRETER_CLASS\n \t\t}\n done:\n \t\treturn rc;\n-#else\n+#else /* defined(J9VM_OPT_METHOD_HANDLE) */\n+\t/* When J9VM_OPT_OPENJDK_METHODHANDLE is enabled, MH.invoke and MH.invokeExact are\n+\t * both translated to invokehandle. So, invokehandlegeneric is not used with OpenJDK\n+\t * MethodHandles.\n+\t */\n \tAssert_VM_unreachable();\n \treturn EXECUTE_BYTECODE;\n-#endif /* J9VM_OPT_METHOD_HANDLE */\n+#endif /* defined(J9VM_OPT_METHOD_HANDLE) */\n+\t}\n+\n+#if defined(J9VM_OPT_OPENJDK_METHODHANDLE)\n+\tVMINLINE VM_BytecodeAction\n+\tinvokeBasic(REGISTER_ARGS_LIST)\n+\t{\n+\t\tVM_BytecodeAction rc = GOTO_RUN_METHOD;\n+\t\tbool fromJIT = J9_ARE_ANY_BITS_SET(_currentThread->jitStackFrameFlags, J9_SSF_JIT_NATIVE_TRANSITION_FRAME);\n+\t\tUDATA methodArgCount = 0;\n+\n+\t\tif (fromJIT) {\n+\t\t\tmethodArgCount = _currentThread->tempSlot;\n+\t\t} else {\n+\t\t\tU_16 index = *(U_16 *)(_pc + 1);\n+\t\t\tJ9ConstantPool *ramConstantPool = J9_CP_FROM_METHOD(_literals);\n+\t\t\tJ9RAMMethodRef *ramMethodRef = ((J9RAMMethodRef *)ramConstantPool) + index;\n+\t\t\tUDATA volatile methodIndexAndArgCount = ramMethodRef->methodIndexAndArgCount;\n+\t\t\tmethodArgCount = (methodIndexAndArgCount & 0xFF);\n+\t\t}\n+\n+\t\tj9object_t mhReceiver = ((j9object_t *)_sp)[methodArgCount];\n+\t\tif (J9_UNEXPECTED(NULL == mhReceiver)) {\n+\t\t\treturn THROW_NPE;\n+\t\t}\n+\n+\t\tj9object_t lambdaForm = J9VMJAVALANGINVOKEMETHODHANDLE_FORM(_currentThread, mhReceiver);\n+\t\tj9object_t memberName = J9VMJAVALANGINVOKELAMBDAFORM_VMENTRY(_currentThread, lambdaForm);\n+\t\t_sendMethod = (J9Method *)(UDATA)J9OBJECT_U64_LOAD(_currentThread, memberName, _vm->vmtargetOffset);\n+\n+\t\tif (fromJIT) {\n+\t\t\t_currentThread->jitStackFrameFlags = 0;\n+\t\t\tVM_JITInterface::restoreJITReturnAddress(_currentThread, _sp, (void *)_literals);\n+\t\t\trc = j2iTransition(REGISTER_ARGS);\n+\t\t}\n+\n+\t\treturn rc;\n+\t}\n+\n+\tVMINLINE VM_BytecodeAction\n+\tlinkToStaticSpecial(REGISTER_ARGS_LIST)\n+\t{\n+\t\tVM_BytecodeAction rc = GOTO_RUN_METHOD;\n+\t\tbool fromJIT = J9_ARE_ANY_BITS_SET(_currentThread->jitStackFrameFlags, J9_SSF_JIT_NATIVE_TRANSITION_FRAME);\n+\n+\t\t/* Pop memberNameObject from the stack. */\n+\t\tj9object_t memberNameObject = *(j9object_t *)_sp++;\n+\t\tif (J9_UNEXPECTED(NULL == memberNameObject)) {\n+\t\t\treturn THROW_NPE;\n+\t\t}\n+\n+\t\t_sendMethod = (J9Method *)(UDATA)J9OBJECT_U64_LOAD(_currentThread, memberNameObject, _vm->vmtargetOffset);\n+\n+\t\tif (fromJIT) {\n+\t\t\tJ9ROMMethod *romMethod = J9_ROM_METHOD_FROM_RAM_METHOD(_sendMethod);\n+\t\t\tUDATA methodArgCount = romMethod->argCount;\n+\t\t\t/* Restore sp position before popping memberNameObject. */\n+\t\t\t--_sp;\n+\t\t\t\n+\t\t\t/* Shift arguments by 1 and place memberNameObject before the first argument. */\n+\t\t\tmemmove(_sp, _sp + 1, methodArgCount * sizeof(UDATA));\n+\t\t\t_sp[methodArgCount] = (UDATA)memberNameObject;\n+\n+\t\t\t_currentThread->jitStackFrameFlags = 0;\n+\t\t\tVM_JITInterface::restoreJITReturnAddress(_currentThread, _sp, (void *)_literals);\n+\t\t\trc = j2iTransition(REGISTER_ARGS);\n+\t\t}\n+\n+\t\treturn rc;\n+\t}\n+\n+\tVMINLINE VM_BytecodeAction\n+\tlinkToVirtual(REGISTER_ARGS_LIST)\n+\t{\n+\t\tVM_BytecodeAction rc = GOTO_RUN_METHOD;\n+\t\tbool fromJIT = J9_ARE_ANY_BITS_SET(_currentThread->jitStackFrameFlags, J9_SSF_JIT_NATIVE_TRANSITION_FRAME);\n+\n+\t\t/* Pop memberNameObject from the stack. */\n+\t\tj9object_t memberNameObject = *(j9object_t *)_sp++;\n+\t\tif (J9_UNEXPECTED(NULL == memberNameObject)) {\n+\t\t\treturn THROW_NPE;\n+\t\t}\n+\n+\t\tJ9JNIMethodID *methodID = (J9JNIMethodID *)(UDATA)J9OBJECT_U64_LOAD(_currentThread, memberNameObject, _vm->vmindexOffset);\n+\t\tJ9ROMMethod *romMethod = J9_ROM_METHOD_FROM_RAM_METHOD(methodID->method);\n+\t\tUDATA methodArgCount = romMethod->argCount;\n+\n+\t\tj9object_t receiverObject = ((j9object_t *)_sp)[methodArgCount - 1];\n+\t\tif (J9_UNEXPECTED(NULL == receiverObject)) {\n+\t\t\treturn THROW_NPE;\n+\t\t}\n+\t\tJ9Class *receiverClass = J9OBJECT_CLAZZ(currentThread, receiverObject);\n+\t\t_sendMethod = *(J9Method **)(((UDATA)receiverClass) + methodID->vTableIndex);\n+\n+\t\tif (fromJIT) {\n+\t\t\t/* Restore sp position before popping memberNameObject. */\n+\t\t\t--_sp;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f43a6978bcb3a63dfad417ad18bf80ac0ccd6030"}, "originalPosition": 337}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5NTc4NTE4", "url": "https://github.com/eclipse-openj9/openj9/pull/10733#pullrequestreview-499578518", "createdAt": "2020-09-30T15:52:50Z", "commit": {"oid": "f43a6978bcb3a63dfad417ad18bf80ac0ccd6030"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNTo1Mjo1MVrOHakTeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNTo1Mjo1MVrOHakTeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzYxOTgzMw==", "bodyText": "Extra line.", "url": "https://github.com/eclipse-openj9/openj9/pull/10733#discussion_r497619833", "createdAt": "2020-09-30T15:52:51Z", "author": {"login": "gacholio"}, "path": "runtime/vm/BytecodeInterpreter.hpp", "diffHunk": "@@ -8119,11 +8223,186 @@ class INTERPRETER_CLASS\n \t\t}\n done:\n \t\treturn rc;\n-#else\n+#else /* defined(J9VM_OPT_METHOD_HANDLE) */\n+\t/* When J9VM_OPT_OPENJDK_METHODHANDLE is enabled, MH.invoke and MH.invokeExact are\n+\t * both translated to invokehandle. So, invokehandlegeneric is not used with OpenJDK\n+\t * MethodHandles.\n+\t */\n \tAssert_VM_unreachable();\n \treturn EXECUTE_BYTECODE;\n-#endif /* J9VM_OPT_METHOD_HANDLE */\n+#endif /* defined(J9VM_OPT_METHOD_HANDLE) */\n+\t}\n+\n+#if defined(J9VM_OPT_OPENJDK_METHODHANDLE)\n+\tVMINLINE VM_BytecodeAction\n+\tinvokeBasic(REGISTER_ARGS_LIST)\n+\t{\n+\t\tVM_BytecodeAction rc = GOTO_RUN_METHOD;\n+\t\tbool fromJIT = J9_ARE_ANY_BITS_SET(_currentThread->jitStackFrameFlags, J9_SSF_JIT_NATIVE_TRANSITION_FRAME);\n+\t\tUDATA methodArgCount = 0;\n+\n+\t\tif (fromJIT) {\n+\t\t\tmethodArgCount = _currentThread->tempSlot;\n+\t\t} else {\n+\t\t\tU_16 index = *(U_16 *)(_pc + 1);\n+\t\t\tJ9ConstantPool *ramConstantPool = J9_CP_FROM_METHOD(_literals);\n+\t\t\tJ9RAMMethodRef *ramMethodRef = ((J9RAMMethodRef *)ramConstantPool) + index;\n+\t\t\tUDATA volatile methodIndexAndArgCount = ramMethodRef->methodIndexAndArgCount;\n+\t\t\tmethodArgCount = (methodIndexAndArgCount & 0xFF);\n+\t\t}\n+\n+\t\tj9object_t mhReceiver = ((j9object_t *)_sp)[methodArgCount];\n+\t\tif (J9_UNEXPECTED(NULL == mhReceiver)) {\n+\t\t\treturn THROW_NPE;\n+\t\t}\n+\n+\t\tj9object_t lambdaForm = J9VMJAVALANGINVOKEMETHODHANDLE_FORM(_currentThread, mhReceiver);\n+\t\tj9object_t memberName = J9VMJAVALANGINVOKELAMBDAFORM_VMENTRY(_currentThread, lambdaForm);\n+\t\t_sendMethod = (J9Method *)(UDATA)J9OBJECT_U64_LOAD(_currentThread, memberName, _vm->vmtargetOffset);\n+\n+\t\tif (fromJIT) {\n+\t\t\t_currentThread->jitStackFrameFlags = 0;\n+\t\t\tVM_JITInterface::restoreJITReturnAddress(_currentThread, _sp, (void *)_literals);\n+\t\t\trc = j2iTransition(REGISTER_ARGS);\n+\t\t}\n+\n+\t\treturn rc;\n+\t}\n+\n+\tVMINLINE VM_BytecodeAction\n+\tlinkToStaticSpecial(REGISTER_ARGS_LIST)\n+\t{\n+\t\tVM_BytecodeAction rc = GOTO_RUN_METHOD;\n+\t\tbool fromJIT = J9_ARE_ANY_BITS_SET(_currentThread->jitStackFrameFlags, J9_SSF_JIT_NATIVE_TRANSITION_FRAME);\n+\n+\t\t/* Pop memberNameObject from the stack. */\n+\t\tj9object_t memberNameObject = *(j9object_t *)_sp++;\n+\t\tif (J9_UNEXPECTED(NULL == memberNameObject)) {\n+\t\t\treturn THROW_NPE;\n+\t\t}\n+\n+\t\t_sendMethod = (J9Method *)(UDATA)J9OBJECT_U64_LOAD(_currentThread, memberNameObject, _vm->vmtargetOffset);\n+\n+\t\tif (fromJIT) {\n+\t\t\tJ9ROMMethod *romMethod = J9_ROM_METHOD_FROM_RAM_METHOD(_sendMethod);\n+\t\t\tUDATA methodArgCount = romMethod->argCount;\n+\t\t\t/* Restore sp position before popping memberNameObject. */\n+\t\t\t--_sp;\n+\t\t\t\n+\t\t\t/* Shift arguments by 1 and place memberNameObject before the first argument. */\n+\t\t\tmemmove(_sp, _sp + 1, methodArgCount * sizeof(UDATA));\n+\t\t\t_sp[methodArgCount] = (UDATA)memberNameObject;\n+\n+\t\t\t_currentThread->jitStackFrameFlags = 0;\n+\t\t\tVM_JITInterface::restoreJITReturnAddress(_currentThread, _sp, (void *)_literals);\n+\t\t\trc = j2iTransition(REGISTER_ARGS);\n+\t\t}\n+\n+\t\treturn rc;\n+\t}\n+\n+\tVMINLINE VM_BytecodeAction\n+\tlinkToVirtual(REGISTER_ARGS_LIST)\n+\t{\n+\t\tVM_BytecodeAction rc = GOTO_RUN_METHOD;\n+\t\tbool fromJIT = J9_ARE_ANY_BITS_SET(_currentThread->jitStackFrameFlags, J9_SSF_JIT_NATIVE_TRANSITION_FRAME);\n+\n+\t\t/* Pop memberNameObject from the stack. */\n+\t\tj9object_t memberNameObject = *(j9object_t *)_sp++;\n+\t\tif (J9_UNEXPECTED(NULL == memberNameObject)) {\n+\t\t\treturn THROW_NPE;\n+\t\t}\n+\n+\t\tJ9JNIMethodID *methodID = (J9JNIMethodID *)(UDATA)J9OBJECT_U64_LOAD(_currentThread, memberNameObject, _vm->vmindexOffset);\n+\t\tJ9ROMMethod *romMethod = J9_ROM_METHOD_FROM_RAM_METHOD(methodID->method);\n+\t\tUDATA methodArgCount = romMethod->argCount;\n+\n+\t\tj9object_t receiverObject = ((j9object_t *)_sp)[methodArgCount - 1];\n+\t\tif (J9_UNEXPECTED(NULL == receiverObject)) {\n+\t\t\treturn THROW_NPE;\n+\t\t}\n+\t\tJ9Class *receiverClass = J9OBJECT_CLAZZ(currentThread, receiverObject);\n+\t\t_sendMethod = *(J9Method **)(((UDATA)receiverClass) + methodID->vTableIndex);\n+\n+\t\tif (fromJIT) {\n+\t\t\t/* Restore sp position before popping memberNameObject. */\n+\t\t\t--_sp;\n+\t\t\t\n+\t\t\t/* Shift arguments by 1 and place memberNameObject before the first argument. */\n+\t\t\tmemmove(_sp, _sp + 1, methodArgCount * sizeof(UDATA));\n+\t\t\t_sp[methodArgCount] = (UDATA)memberNameObject;\n+\n+\t\t\t_currentThread->jitStackFrameFlags = 0;\n+\t\t\tVM_JITInterface::restoreJITReturnAddress(_currentThread, _sp, (void *)_literals);\n+\t\t\trc = j2iTransition(REGISTER_ARGS);\n+\t\t}\n+\n+\t\treturn rc;\n+\t}\n+\n+\tVMINLINE VM_BytecodeAction\n+\tlinkToInterface(REGISTER_ARGS_LIST)\n+\t{\n+\t\tVM_BytecodeAction rc = GOTO_RUN_METHOD;\n+\t\tbool fromJIT = J9_ARE_ANY_BITS_SET(_currentThread->jitStackFrameFlags, J9_SSF_JIT_NATIVE_TRANSITION_FRAME);\n+\n+\t\t/* Pop memberNameObject from the stack. */\n+\t\tj9object_t memberNameObject = *(j9object_t *)_sp++;\n+\t\tif (J9_UNEXPECTED(NULL == memberNameObject)) {\n+\t\t\treturn THROW_NPE;\n+\t\t}\n+\n+\t\tJ9JNIMethodID *methodID = (J9JNIMethodID *)(UDATA)J9OBJECT_U64_LOAD(_currentThread, memberNameObject, _vm->vmindexOffset);\n+\t\tJ9ROMMethod *romMethod = J9_ROM_METHOD_FROM_RAM_METHOD(methodID->method);\n+\t\tUDATA methodArgCount = romMethod->argCount;\n+\n+\t\tj9object_t receiverObject = ((j9object_t *)_sp)[methodArgCount - 1];\n+\t\tif (J9_UNEXPECTED(NULL == receiverObject)) {\n+\t\t\treturn THROW_NPE;\n+\t\t}\n+\t\tJ9Class *receiverClass = J9OBJECT_CLAZZ(currentThread, receiverObject);\n+\t\tJ9Method *method = (J9Method *)(UDATA)J9OBJECT_U64_LOAD(_currentThread, memberNameObject, _vm->vmtargetOffset);\n+\t\tUDATA vTableOffset = methodID->vTableIndex;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f43a6978bcb3a63dfad417ad18bf80ac0ccd6030"}, "originalPosition": 374}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5NTc5NTE2", "url": "https://github.com/eclipse-openj9/openj9/pull/10733#pullrequestreview-499579516", "createdAt": "2020-09-30T15:53:57Z", "commit": {"oid": "f43a6978bcb3a63dfad417ad18bf80ac0ccd6030"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNTo1Mzo1N1rOHakWUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNTo1Mzo1N1rOHakWUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzYyMDU2Mw==", "bodyText": "And again.", "url": "https://github.com/eclipse-openj9/openj9/pull/10733#discussion_r497620563", "createdAt": "2020-09-30T15:53:57Z", "author": {"login": "gacholio"}, "path": "runtime/vm/BytecodeInterpreter.hpp", "diffHunk": "@@ -8119,11 +8223,186 @@ class INTERPRETER_CLASS\n \t\t}\n done:\n \t\treturn rc;\n-#else\n+#else /* defined(J9VM_OPT_METHOD_HANDLE) */\n+\t/* When J9VM_OPT_OPENJDK_METHODHANDLE is enabled, MH.invoke and MH.invokeExact are\n+\t * both translated to invokehandle. So, invokehandlegeneric is not used with OpenJDK\n+\t * MethodHandles.\n+\t */\n \tAssert_VM_unreachable();\n \treturn EXECUTE_BYTECODE;\n-#endif /* J9VM_OPT_METHOD_HANDLE */\n+#endif /* defined(J9VM_OPT_METHOD_HANDLE) */\n+\t}\n+\n+#if defined(J9VM_OPT_OPENJDK_METHODHANDLE)\n+\tVMINLINE VM_BytecodeAction\n+\tinvokeBasic(REGISTER_ARGS_LIST)\n+\t{\n+\t\tVM_BytecodeAction rc = GOTO_RUN_METHOD;\n+\t\tbool fromJIT = J9_ARE_ANY_BITS_SET(_currentThread->jitStackFrameFlags, J9_SSF_JIT_NATIVE_TRANSITION_FRAME);\n+\t\tUDATA methodArgCount = 0;\n+\n+\t\tif (fromJIT) {\n+\t\t\tmethodArgCount = _currentThread->tempSlot;\n+\t\t} else {\n+\t\t\tU_16 index = *(U_16 *)(_pc + 1);\n+\t\t\tJ9ConstantPool *ramConstantPool = J9_CP_FROM_METHOD(_literals);\n+\t\t\tJ9RAMMethodRef *ramMethodRef = ((J9RAMMethodRef *)ramConstantPool) + index;\n+\t\t\tUDATA volatile methodIndexAndArgCount = ramMethodRef->methodIndexAndArgCount;\n+\t\t\tmethodArgCount = (methodIndexAndArgCount & 0xFF);\n+\t\t}\n+\n+\t\tj9object_t mhReceiver = ((j9object_t *)_sp)[methodArgCount];\n+\t\tif (J9_UNEXPECTED(NULL == mhReceiver)) {\n+\t\t\treturn THROW_NPE;\n+\t\t}\n+\n+\t\tj9object_t lambdaForm = J9VMJAVALANGINVOKEMETHODHANDLE_FORM(_currentThread, mhReceiver);\n+\t\tj9object_t memberName = J9VMJAVALANGINVOKELAMBDAFORM_VMENTRY(_currentThread, lambdaForm);\n+\t\t_sendMethod = (J9Method *)(UDATA)J9OBJECT_U64_LOAD(_currentThread, memberName, _vm->vmtargetOffset);\n+\n+\t\tif (fromJIT) {\n+\t\t\t_currentThread->jitStackFrameFlags = 0;\n+\t\t\tVM_JITInterface::restoreJITReturnAddress(_currentThread, _sp, (void *)_literals);\n+\t\t\trc = j2iTransition(REGISTER_ARGS);\n+\t\t}\n+\n+\t\treturn rc;\n+\t}\n+\n+\tVMINLINE VM_BytecodeAction\n+\tlinkToStaticSpecial(REGISTER_ARGS_LIST)\n+\t{\n+\t\tVM_BytecodeAction rc = GOTO_RUN_METHOD;\n+\t\tbool fromJIT = J9_ARE_ANY_BITS_SET(_currentThread->jitStackFrameFlags, J9_SSF_JIT_NATIVE_TRANSITION_FRAME);\n+\n+\t\t/* Pop memberNameObject from the stack. */\n+\t\tj9object_t memberNameObject = *(j9object_t *)_sp++;\n+\t\tif (J9_UNEXPECTED(NULL == memberNameObject)) {\n+\t\t\treturn THROW_NPE;\n+\t\t}\n+\n+\t\t_sendMethod = (J9Method *)(UDATA)J9OBJECT_U64_LOAD(_currentThread, memberNameObject, _vm->vmtargetOffset);\n+\n+\t\tif (fromJIT) {\n+\t\t\tJ9ROMMethod *romMethod = J9_ROM_METHOD_FROM_RAM_METHOD(_sendMethod);\n+\t\t\tUDATA methodArgCount = romMethod->argCount;\n+\t\t\t/* Restore sp position before popping memberNameObject. */\n+\t\t\t--_sp;\n+\t\t\t\n+\t\t\t/* Shift arguments by 1 and place memberNameObject before the first argument. */\n+\t\t\tmemmove(_sp, _sp + 1, methodArgCount * sizeof(UDATA));\n+\t\t\t_sp[methodArgCount] = (UDATA)memberNameObject;\n+\n+\t\t\t_currentThread->jitStackFrameFlags = 0;\n+\t\t\tVM_JITInterface::restoreJITReturnAddress(_currentThread, _sp, (void *)_literals);\n+\t\t\trc = j2iTransition(REGISTER_ARGS);\n+\t\t}\n+\n+\t\treturn rc;\n+\t}\n+\n+\tVMINLINE VM_BytecodeAction\n+\tlinkToVirtual(REGISTER_ARGS_LIST)\n+\t{\n+\t\tVM_BytecodeAction rc = GOTO_RUN_METHOD;\n+\t\tbool fromJIT = J9_ARE_ANY_BITS_SET(_currentThread->jitStackFrameFlags, J9_SSF_JIT_NATIVE_TRANSITION_FRAME);\n+\n+\t\t/* Pop memberNameObject from the stack. */\n+\t\tj9object_t memberNameObject = *(j9object_t *)_sp++;\n+\t\tif (J9_UNEXPECTED(NULL == memberNameObject)) {\n+\t\t\treturn THROW_NPE;\n+\t\t}\n+\n+\t\tJ9JNIMethodID *methodID = (J9JNIMethodID *)(UDATA)J9OBJECT_U64_LOAD(_currentThread, memberNameObject, _vm->vmindexOffset);\n+\t\tJ9ROMMethod *romMethod = J9_ROM_METHOD_FROM_RAM_METHOD(methodID->method);\n+\t\tUDATA methodArgCount = romMethod->argCount;\n+\n+\t\tj9object_t receiverObject = ((j9object_t *)_sp)[methodArgCount - 1];\n+\t\tif (J9_UNEXPECTED(NULL == receiverObject)) {\n+\t\t\treturn THROW_NPE;\n+\t\t}\n+\t\tJ9Class *receiverClass = J9OBJECT_CLAZZ(currentThread, receiverObject);\n+\t\t_sendMethod = *(J9Method **)(((UDATA)receiverClass) + methodID->vTableIndex);\n+\n+\t\tif (fromJIT) {\n+\t\t\t/* Restore sp position before popping memberNameObject. */\n+\t\t\t--_sp;\n+\t\t\t\n+\t\t\t/* Shift arguments by 1 and place memberNameObject before the first argument. */\n+\t\t\tmemmove(_sp, _sp + 1, methodArgCount * sizeof(UDATA));\n+\t\t\t_sp[methodArgCount] = (UDATA)memberNameObject;\n+\n+\t\t\t_currentThread->jitStackFrameFlags = 0;\n+\t\t\tVM_JITInterface::restoreJITReturnAddress(_currentThread, _sp, (void *)_literals);\n+\t\t\trc = j2iTransition(REGISTER_ARGS);\n+\t\t}\n+\n+\t\treturn rc;\n+\t}\n+\n+\tVMINLINE VM_BytecodeAction\n+\tlinkToInterface(REGISTER_ARGS_LIST)\n+\t{\n+\t\tVM_BytecodeAction rc = GOTO_RUN_METHOD;\n+\t\tbool fromJIT = J9_ARE_ANY_BITS_SET(_currentThread->jitStackFrameFlags, J9_SSF_JIT_NATIVE_TRANSITION_FRAME);\n+\n+\t\t/* Pop memberNameObject from the stack. */\n+\t\tj9object_t memberNameObject = *(j9object_t *)_sp++;\n+\t\tif (J9_UNEXPECTED(NULL == memberNameObject)) {\n+\t\t\treturn THROW_NPE;\n+\t\t}\n+\n+\t\tJ9JNIMethodID *methodID = (J9JNIMethodID *)(UDATA)J9OBJECT_U64_LOAD(_currentThread, memberNameObject, _vm->vmindexOffset);\n+\t\tJ9ROMMethod *romMethod = J9_ROM_METHOD_FROM_RAM_METHOD(methodID->method);\n+\t\tUDATA methodArgCount = romMethod->argCount;\n+\n+\t\tj9object_t receiverObject = ((j9object_t *)_sp)[methodArgCount - 1];\n+\t\tif (J9_UNEXPECTED(NULL == receiverObject)) {\n+\t\t\treturn THROW_NPE;\n+\t\t}\n+\t\tJ9Class *receiverClass = J9OBJECT_CLAZZ(currentThread, receiverObject);\n+\t\tJ9Method *method = (J9Method *)(UDATA)J9OBJECT_U64_LOAD(_currentThread, memberNameObject, _vm->vmtargetOffset);\n+\t\tUDATA vTableOffset = methodID->vTableIndex;\n+\n+\n+\t\tif (J9_ARE_ANY_BITS_SET(vTableOffset, J9_JNI_MID_INTERFACE)) {\n+\t\t\tUDATA iTableIndex = vTableOffset & ~(UDATA)J9_JNI_MID_INTERFACE;\n+\t\t\tJ9Class *interfaceClass = J9_CLASS_FROM_METHOD(method);\n+\t\t\tvTableOffset = 0;\n+\t\t\tJ9ITable * iTable = receiverClass->lastITable;\n+\t\t\tif (interfaceClass == iTable->interfaceClass) {\n+\t\t\t\tgoto foundITable;\n+\t\t\t}\n+\t\t\tiTable = (J9ITable*)receiverClass->iTable;\n+\t\t\twhile (NULL != iTable) {\n+\t\t\t\tif (interfaceClass == iTable->interfaceClass) {\n+\t\t\t\t\treceiverClass->lastITable = iTable;\n+foundITable:\n+\t\t\t\t\tvTableOffset = ((UDATA*)(iTable + 1))[iTableIndex];\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t\tiTable = iTable->next;\n+\t\t\t}\n+\t\t}\n+\n+\t\t_sendMethod = *(J9Method **)(((UDATA)receiverClass) + vTableOffset);\n+\n+\t\tif (fromJIT) {\n+\t\t\t/* Restore sp position before popping memberNameObject. */\n+\t\t\t--_sp;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f43a6978bcb3a63dfad417ad18bf80ac0ccd6030"}, "originalPosition": 400}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f43a6978bcb3a63dfad417ad18bf80ac0ccd6030", "author": {"user": {"login": "babsingh", "name": "Babneet Singh"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/f43a6978bcb3a63dfad417ad18bf80ac0ccd6030", "committedDate": "2020-09-30T15:14:51Z", "message": "Note that invokehandlegeneric is unused with OpenJDK MethodHandles\n\nFor OpenJDK MethodHandles (MH), MH.invoke and MH.invokeExact both share\ncommon functionality. So, they are both translated to invokehandle.\n\nThus, invokehandlegeneric stays unused with OpenJDK MethodHandles.\n\nCo-authored-by: Jack Lu <Jack.S.Lu@ibm.com>\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>"}, "afterCommit": {"oid": "d1813f49ae841492aa4dd9bb66f99271cfacdd51", "author": {"user": {"login": "babsingh", "name": "Babneet Singh"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/d1813f49ae841492aa4dd9bb66f99271cfacdd51", "committedDate": "2020-09-30T21:06:23Z", "message": "Note that invokehandlegeneric is unused with OpenJDK MethodHandles\n\nFor OpenJDK MethodHandles (MH), MH.invoke and MH.invokeExact both share\ncommon functionality. So, they are both translated to invokehandle.\n\nThus, invokehandlegeneric stays unused with OpenJDK MethodHandles.\n\nCo-authored-by: Jack Lu <Jack.S.Lu@ibm.com>\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "738098532ba7af2ebc5f8f197426a5cbcd8ede9d", "author": {"user": {"login": "babsingh", "name": "Babneet Singh"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/738098532ba7af2ebc5f8f197426a5cbcd8ede9d", "committedDate": "2020-09-30T21:14:43Z", "message": "Add INLs to support OpenJDK MethodHandles\n\nThe new INLs lead to GOTO_RUN_METHOD.\n\n1. invokeBasic: [Virtual] this.invokeBasic(args ..., mn)\nThe MH receiver is located before the arguments.\n  - java_lang_invoke_MethodHandle::form -> LambdaForm\n  -- java_lang_invoke_LambdaForm::vmentry -> MemberName\n  --- java_lang_invoke_MemberName::vmtarget -> J9Method*\n  ---- invoke_target(vmtarget)\n\n2. linkToStaticSpecial: [Static] MH.linkTo*(this, args ..., mn)\nThe object at the top of the stack is a MemberName instance.\n  - java_lang_invoke_MemberName::vmtarget -> J9Method*\n  -- invoke_target(vmtarget)\n\n3. linkToVirtual: [Static] MH.linkTo*(this, args ..., mn)\nThe object at the top of the stack is a MemberName instance.\n  - java_lang_invoke_MemberName::vmtarget -> J9JNIMethodID*\n  -- invoke_target(receiverClass + vmtarget->vTableIndex)\n\n4. linkToInterface: [Static] MH.linkTo*(this, args ..., mn)\nThe object at the top of the stack is a MemberName instance.\n  - java_lang_invoke_MemberName::vmtarget -> J9JNIMethodID*\n  -- iTable query to find the vTableOffset\n  --- invoke_target(receiverClass + vTableOffset)\n\nFor INL invocations from the JIT,\n1. invokeBasic: JIT return address is restored and j2i transition is\ninvoked.\n2. linkTo*: the MemberName object is moved in front of the first\nargument before the JIT return address is restored and j2i transition is\ninvoked.\n\nCo-authored-by: Jack Lu <Jack.S.Lu@ibm.com>\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66575d2705cd234940398540c9f0d6d9d77642cc", "author": {"user": {"login": "babsingh", "name": "Babneet Singh"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/66575d2705cd234940398540c9f0d6d9d77642cc", "committedDate": "2020-09-30T21:14:46Z", "message": "Rewrite invokedynamic to work with OpenJDK MethodHandles\n\nThe execution bytecode has changed to GOTO_RUN_METHOD.\n\nThe resolution method has changed. MethodHandleNatives.linkCallSite is\ncalled for resolution. It returns two items: 1) MemberName object and 2)\nMethodHandle object.\n\nThe _sendMethod is derived from the MemberName object:\njava_lang_invoke_MemberName::vmtarget -> J9Method*.\n\nThe MethodHandle object is pushed on top of the stack since it is the\nlast argument for the _sendMethod.\n\nThen, the _sendMethod is invoked.\n\nCo-authored-by: Jack Lu <Jack.S.Lu@ibm.com>\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a378f4877543c3464ddfda630e099130c2446915", "author": {"user": {"login": "babsingh", "name": "Babneet Singh"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/a378f4877543c3464ddfda630e099130c2446915", "committedDate": "2020-09-30T21:14:46Z", "message": "Rewrite invokehandle to work with OpenJDK MethodHandles\n\nThe execution bytecode has changed to GOTO_RUN_METHOD.\n\nThe resolution method has changed. MethodHandleNatives.linkMethod is\ncalled for resolution. It returns two items: 1) MemberName object and 2)\nMethodHandle object.\n\nThe _sendMethod is derived from the MemberName object:\njava_lang_invoke_MemberName::vmtarget -> J9Method*.\n\nThe MethodHandle object is pushed on top of the stack since it is the\nlast argument for the _sendMethod.\n\nThen, the _sendMethod is invoked.\n\nCo-authored-by: Jack Lu <Jack.S.Lu@ibm.com>\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de2822dc95c6e752972651cdca0e17109d3c67b7", "author": {"user": {"login": "babsingh", "name": "Babneet Singh"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/de2822dc95c6e752972651cdca0e17109d3c67b7", "committedDate": "2020-09-30T21:14:46Z", "message": "Note that invokehandlegeneric is unused with OpenJDK MethodHandles\n\nFor OpenJDK MethodHandles (MH), MH.invoke and MH.invokeExact both share\ncommon functionality. So, they are both translated to invokehandle.\n\nThus, invokehandlegeneric stays unused with OpenJDK MethodHandles.\n\nCo-authored-by: Jack Lu <Jack.S.Lu@ibm.com>\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d1813f49ae841492aa4dd9bb66f99271cfacdd51", "author": {"user": {"login": "babsingh", "name": "Babneet Singh"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/d1813f49ae841492aa4dd9bb66f99271cfacdd51", "committedDate": "2020-09-30T21:06:23Z", "message": "Note that invokehandlegeneric is unused with OpenJDK MethodHandles\n\nFor OpenJDK MethodHandles (MH), MH.invoke and MH.invokeExact both share\ncommon functionality. So, they are both translated to invokehandle.\n\nThus, invokehandlegeneric stays unused with OpenJDK MethodHandles.\n\nCo-authored-by: Jack Lu <Jack.S.Lu@ibm.com>\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>"}, "afterCommit": {"oid": "de2822dc95c6e752972651cdca0e17109d3c67b7", "author": {"user": {"login": "babsingh", "name": "Babneet Singh"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/de2822dc95c6e752972651cdca0e17109d3c67b7", "committedDate": "2020-09-30T21:14:46Z", "message": "Note that invokehandlegeneric is unused with OpenJDK MethodHandles\n\nFor OpenJDK MethodHandles (MH), MH.invoke and MH.invokeExact both share\ncommon functionality. So, they are both translated to invokehandle.\n\nThus, invokehandlegeneric stays unused with OpenJDK MethodHandles.\n\nCo-authored-by: Jack Lu <Jack.S.Lu@ibm.com>\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5ODM4MDg1", "url": "https://github.com/eclipse-openj9/openj9/pull/10733#pullrequestreview-499838085", "createdAt": "2020-09-30T21:50:54Z", "commit": {"oid": "de2822dc95c6e752972651cdca0e17109d3c67b7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwMDAxNDM4", "url": "https://github.com/eclipse-openj9/openj9/pull/10733#pullrequestreview-500001438", "createdAt": "2020-10-01T04:31:32Z", "commit": {"oid": "de2822dc95c6e752972651cdca0e17109d3c67b7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwNDozMTozMlrOHa6JZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwNDozMTozMlrOHa6JZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzk3NzcwMw==", "bodyText": "This doesn't handle the J9_ITABLE_OFFSET_TAG_BITS special cases.  Are they filtered somewhere else?", "url": "https://github.com/eclipse-openj9/openj9/pull/10733#discussion_r497977703", "createdAt": "2020-10-01T04:31:32Z", "author": {"login": "DanHeidinga"}, "path": "runtime/vm/BytecodeInterpreter.hpp", "diffHunk": "@@ -8119,11 +8223,186 @@ class INTERPRETER_CLASS\n \t\t}\n done:\n \t\treturn rc;\n-#else\n+#else /* defined(J9VM_OPT_METHOD_HANDLE) */\n+\t/* When J9VM_OPT_OPENJDK_METHODHANDLE is enabled, MH.invoke and MH.invokeExact are\n+\t * both translated to invokehandle. So, invokehandlegeneric is not used with OpenJDK\n+\t * MethodHandles.\n+\t */\n \tAssert_VM_unreachable();\n \treturn EXECUTE_BYTECODE;\n-#endif /* J9VM_OPT_METHOD_HANDLE */\n+#endif /* defined(J9VM_OPT_METHOD_HANDLE) */\n+\t}\n+\n+#if defined(J9VM_OPT_OPENJDK_METHODHANDLE)\n+\tVMINLINE VM_BytecodeAction\n+\tinvokeBasic(REGISTER_ARGS_LIST)\n+\t{\n+\t\tVM_BytecodeAction rc = GOTO_RUN_METHOD;\n+\t\tbool fromJIT = J9_ARE_ANY_BITS_SET(_currentThread->jitStackFrameFlags, J9_SSF_JIT_NATIVE_TRANSITION_FRAME);\n+\t\tUDATA methodArgCount = 0;\n+\n+\t\tif (fromJIT) {\n+\t\t\tmethodArgCount = _currentThread->tempSlot;\n+\t\t} else {\n+\t\t\tU_16 index = *(U_16 *)(_pc + 1);\n+\t\t\tJ9ConstantPool *ramConstantPool = J9_CP_FROM_METHOD(_literals);\n+\t\t\tJ9RAMMethodRef *ramMethodRef = ((J9RAMMethodRef *)ramConstantPool) + index;\n+\t\t\tUDATA volatile methodIndexAndArgCount = ramMethodRef->methodIndexAndArgCount;\n+\t\t\tmethodArgCount = (methodIndexAndArgCount & 0xFF);\n+\t\t}\n+\n+\t\tj9object_t mhReceiver = ((j9object_t *)_sp)[methodArgCount];\n+\t\tif (J9_UNEXPECTED(NULL == mhReceiver)) {\n+\t\t\treturn THROW_NPE;\n+\t\t}\n+\n+\t\tj9object_t lambdaForm = J9VMJAVALANGINVOKEMETHODHANDLE_FORM(_currentThread, mhReceiver);\n+\t\tj9object_t memberName = J9VMJAVALANGINVOKELAMBDAFORM_VMENTRY(_currentThread, lambdaForm);\n+\t\t_sendMethod = (J9Method *)(UDATA)J9OBJECT_U64_LOAD(_currentThread, memberName, _vm->vmtargetOffset);\n+\n+\t\tif (fromJIT) {\n+\t\t\t_currentThread->jitStackFrameFlags = 0;\n+\t\t\tVM_JITInterface::restoreJITReturnAddress(_currentThread, _sp, (void *)_literals);\n+\t\t\trc = j2iTransition(REGISTER_ARGS);\n+\t\t}\n+\n+\t\treturn rc;\n+\t}\n+\n+\tVMINLINE VM_BytecodeAction\n+\tlinkToStaticSpecial(REGISTER_ARGS_LIST)\n+\t{\n+\t\tVM_BytecodeAction rc = GOTO_RUN_METHOD;\n+\t\tbool fromJIT = J9_ARE_ANY_BITS_SET(_currentThread->jitStackFrameFlags, J9_SSF_JIT_NATIVE_TRANSITION_FRAME);\n+\n+\t\t/* Pop memberNameObject from the stack. */\n+\t\tj9object_t memberNameObject = *(j9object_t *)_sp++;\n+\t\tif (J9_UNEXPECTED(NULL == memberNameObject)) {\n+\t\t\treturn THROW_NPE;\n+\t\t}\n+\n+\t\t_sendMethod = (J9Method *)(UDATA)J9OBJECT_U64_LOAD(_currentThread, memberNameObject, _vm->vmtargetOffset);\n+\n+\t\tif (fromJIT) {\n+\t\t\tJ9ROMMethod *romMethod = J9_ROM_METHOD_FROM_RAM_METHOD(_sendMethod);\n+\t\t\tUDATA methodArgCount = romMethod->argCount;\n+\n+\t\t\t/* Restore sp position before popping memberNameObject. */\n+\t\t\t_sp -= 1;\n+\n+\t\t\t/* Shift arguments by 1 and place memberNameObject before the first argument. */\n+\t\t\tmemmove(_sp, _sp + 1, methodArgCount * sizeof(UDATA));\n+\t\t\t_sp[methodArgCount] = (UDATA)memberNameObject;\n+\n+\t\t\t_currentThread->jitStackFrameFlags = 0;\n+\t\t\tVM_JITInterface::restoreJITReturnAddress(_currentThread, _sp, (void *)_literals);\n+\t\t\trc = j2iTransition(REGISTER_ARGS);\n+\t\t}\n+\n+\t\treturn rc;\n+\t}\n+\n+\tVMINLINE VM_BytecodeAction\n+\tlinkToVirtual(REGISTER_ARGS_LIST)\n+\t{\n+\t\tVM_BytecodeAction rc = GOTO_RUN_METHOD;\n+\t\tbool fromJIT = J9_ARE_ANY_BITS_SET(_currentThread->jitStackFrameFlags, J9_SSF_JIT_NATIVE_TRANSITION_FRAME);\n+\n+\t\t/* Pop memberNameObject from the stack. */\n+\t\tj9object_t memberNameObject = *(j9object_t *)_sp++;\n+\t\tif (J9_UNEXPECTED(NULL == memberNameObject)) {\n+\t\t\treturn THROW_NPE;\n+\t\t}\n+\n+\t\tJ9JNIMethodID *methodID = (J9JNIMethodID *)(UDATA)J9OBJECT_U64_LOAD(_currentThread, memberNameObject, _vm->vmindexOffset);\n+\t\tJ9ROMMethod *romMethod = J9_ROM_METHOD_FROM_RAM_METHOD(methodID->method);\n+\t\tUDATA methodArgCount = romMethod->argCount;\n+\n+\t\tj9object_t receiverObject = ((j9object_t *)_sp)[methodArgCount - 1];\n+\t\tif (J9_UNEXPECTED(NULL == receiverObject)) {\n+\t\t\treturn THROW_NPE;\n+\t\t}\n+\t\tJ9Class *receiverClass = J9OBJECT_CLAZZ(currentThread, receiverObject);\n+\t\t_sendMethod = *(J9Method **)(((UDATA)receiverClass) + methodID->vTableIndex);\n+\n+\t\tif (fromJIT) {\n+\t\t\t/* Restore sp position before popping memberNameObject. */\n+\t\t\t_sp -= 1;\n+\n+\t\t\t/* Shift arguments by 1 and place memberNameObject before the first argument. */\n+\t\t\tmemmove(_sp, _sp + 1, methodArgCount * sizeof(UDATA));\n+\t\t\t_sp[methodArgCount] = (UDATA)memberNameObject;\n+\n+\t\t\t_currentThread->jitStackFrameFlags = 0;\n+\t\t\tVM_JITInterface::restoreJITReturnAddress(_currentThread, _sp, (void *)_literals);\n+\t\t\trc = j2iTransition(REGISTER_ARGS);\n+\t\t}\n+\n+\t\treturn rc;\n+\t}\n+\n+\tVMINLINE VM_BytecodeAction\n+\tlinkToInterface(REGISTER_ARGS_LIST)\n+\t{\n+\t\tVM_BytecodeAction rc = GOTO_RUN_METHOD;\n+\t\tbool fromJIT = J9_ARE_ANY_BITS_SET(_currentThread->jitStackFrameFlags, J9_SSF_JIT_NATIVE_TRANSITION_FRAME);\n+\n+\t\t/* Pop memberNameObject from the stack. */\n+\t\tj9object_t memberNameObject = *(j9object_t *)_sp++;\n+\t\tif (J9_UNEXPECTED(NULL == memberNameObject)) {\n+\t\t\treturn THROW_NPE;\n+\t\t}\n+\n+\t\tJ9JNIMethodID *methodID = (J9JNIMethodID *)(UDATA)J9OBJECT_U64_LOAD(_currentThread, memberNameObject, _vm->vmindexOffset);\n+\t\tJ9ROMMethod *romMethod = J9_ROM_METHOD_FROM_RAM_METHOD(methodID->method);\n+\t\tUDATA methodArgCount = romMethod->argCount;\n+\n+\t\tj9object_t receiverObject = ((j9object_t *)_sp)[methodArgCount - 1];\n+\t\tif (J9_UNEXPECTED(NULL == receiverObject)) {\n+\t\t\treturn THROW_NPE;\n+\t\t}\n+\t\tJ9Class *receiverClass = J9OBJECT_CLAZZ(currentThread, receiverObject);\n+\t\tJ9Method *method = (J9Method *)(UDATA)J9OBJECT_U64_LOAD(_currentThread, memberNameObject, _vm->vmtargetOffset);\n+\t\tUDATA vTableOffset = methodID->vTableIndex;\n+\n+\t\tif (J9_ARE_ANY_BITS_SET(vTableOffset, J9_JNI_MID_INTERFACE)) {\n+\t\t\tUDATA iTableIndex = vTableOffset & ~(UDATA)J9_JNI_MID_INTERFACE;\n+\t\t\tJ9Class *interfaceClass = J9_CLASS_FROM_METHOD(method);\n+\t\t\tvTableOffset = 0;\n+\t\t\tJ9ITable * iTable = receiverClass->lastITable;\n+\t\t\tif (interfaceClass == iTable->interfaceClass) {\n+\t\t\t\tgoto foundITable;\n+\t\t\t}\n+\t\t\tiTable = (J9ITable*)receiverClass->iTable;\n+\t\t\twhile (NULL != iTable) {\n+\t\t\t\tif (interfaceClass == iTable->interfaceClass) {\n+\t\t\t\t\treceiverClass->lastITable = iTable;\n+foundITable:\n+\t\t\t\t\tvTableOffset = ((UDATA*)(iTable + 1))[iTableIndex];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de2822dc95c6e752972651cdca0e17109d3c67b7"}, "originalPosition": 389}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwMDA1OTg1", "url": "https://github.com/eclipse-openj9/openj9/pull/10733#pullrequestreview-500005985", "createdAt": "2020-10-01T04:48:37Z", "commit": {"oid": "de2822dc95c6e752972651cdca0e17109d3c67b7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwNDo0ODozN1rOHa6Ylw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwNDo0ODozN1rOHa6Ylw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzk4MTU5MQ==", "bodyText": "I don't see the definition of J9InvokeCacheEntry in this PR or in the already committed code.  Am I missing it?\nHard to tell if the barriers are correct in this path without seeing that code and the updates to resolveInvokeDynmaic", "url": "https://github.com/eclipse-openj9/openj9/pull/10733#discussion_r497981591", "createdAt": "2020-10-01T04:48:37Z", "author": {"login": "DanHeidinga"}, "path": "runtime/vm/BytecodeInterpreter.hpp", "diffHunk": "@@ -8004,35 +8007,87 @@ class INTERPRETER_CLASS\n \t\t\t\tgoto retry;\n \t\t\t}\n \t\t}\n+\n \t\treturn rc;\n-#else\n-\tAssert_VM_unreachable();\n-\treturn EXECUTE_BYTECODE;\n-#endif /* J9VM_OPT_METHOD_HANDLE */\n \t}\n+#elif defined(J9VM_OPT_OPENJDK_METHODHANDLE) /* defined(J9VM_OPT_METHOD_HANDLE) */\n+\tVMINLINE VM_BytecodeAction\n+\tinvokedynamic(REGISTER_ARGS_LIST)\n+\t{\n+retry:\n+\t\tVM_BytecodeAction rc = GOTO_RUN_METHOD;\n+\t\tU_16 index = *(U_16 *)(_pc + 1);\n+\n+\t\tJ9ConstantPool *ramConstantPool = J9_CP_FROM_METHOD(_literals);\n+\t\tJ9InvokeCacheEntry *invokeCache = ((J9InvokeCacheEntry *)ramConstantPool->ramClass->callSites) + index;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de2822dc95c6e752972651cdca0e17109d3c67b7"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 335, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}