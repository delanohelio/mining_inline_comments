{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3NzY5NTU2", "number": 8855, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNTozMjoxNlrODn4EIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMTo0NzoyOFrODo8Zug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTM5NjE5OnYy", "diffSide": "RIGHT", "path": "jcl/src/java.base/share/classes/java/lang/ClassLoader.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNTozMjoxNlrOF2IMfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMDowMzozMVrOF3yMng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMwMTY5Mg==", "bodyText": "Perhaps this should call loadLibraryWithClassLoader(), which might fix the UnsatisfiedLinkError.", "url": "https://github.com/eclipse-openj9/openj9/pull/8855#discussion_r392301692", "createdAt": "2020-03-13T15:32:16Z", "author": {"login": "pshipton"}, "path": "jcl/src/java.base/share/classes/java/lang/ClassLoader.java", "diffHunk": "@@ -1957,6 +1957,15 @@ static void loadLibrary(Class<?> caller, String name, boolean fullPath) {\n \t\tloadLibraryWithClassLoader(name, caller.getClassLoaderImpl());\n }\n \n+/*[IF Java15]*/\n+static void loadLibrary(Class<?> caller, File file) {\n+\tloadLibraryWithPath(file.getAbsolutePath(), caller.getClassLoaderImpl(), null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "002da6266225ef76f9844b0151308668a68d5ec0"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMwMzUwNw==", "bodyText": "Will look into it, mark this PR WIP.", "url": "https://github.com/eclipse-openj9/openj9/pull/8855#discussion_r392303507", "createdAt": "2020-03-13T15:35:25Z", "author": {"login": "JasonFengJ9"}, "path": "jcl/src/java.base/share/classes/java/lang/ClassLoader.java", "diffHunk": "@@ -1957,6 +1957,15 @@ static void loadLibrary(Class<?> caller, String name, boolean fullPath) {\n \t\tloadLibraryWithClassLoader(name, caller.getClassLoaderImpl());\n }\n \n+/*[IF Java15]*/\n+static void loadLibrary(Class<?> caller, File file) {\n+\tloadLibraryWithPath(file.getAbsolutePath(), caller.getClassLoaderImpl(), null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMwMTY5Mg=="}, "originalCommit": {"oid": "002da6266225ef76f9844b0151308668a68d5ec0"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMxNDE4Mg==", "bodyText": "It doesn't appear the UnsatisfiedLinkError during the build process is related to this PR.\nThe two helper methods added were not invoked before this error.\nIn addition, the stacktrace doesn't show java.lang.ClassLoader or java.lang.Runtime which is the caller of these two new methods.", "url": "https://github.com/eclipse-openj9/openj9/pull/8855#discussion_r392314182", "createdAt": "2020-03-13T15:53:26Z", "author": {"login": "JasonFengJ9"}, "path": "jcl/src/java.base/share/classes/java/lang/ClassLoader.java", "diffHunk": "@@ -1957,6 +1957,15 @@ static void loadLibrary(Class<?> caller, String name, boolean fullPath) {\n \t\tloadLibraryWithClassLoader(name, caller.getClassLoaderImpl());\n }\n \n+/*[IF Java15]*/\n+static void loadLibrary(Class<?> caller, File file) {\n+\tloadLibraryWithPath(file.getAbsolutePath(), caller.getClassLoaderImpl(), null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMwMTY5Mg=="}, "originalCommit": {"oid": "002da6266225ef76f9844b0151308668a68d5ec0"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQwNDQ2OA==", "bodyText": "It seems there is a newly introduced jdk.internal.loader.NativeLibraries which doesn't work well with OpenJ9 ClassLoader.", "url": "https://github.com/eclipse-openj9/openj9/pull/8855#discussion_r392404468", "createdAt": "2020-03-13T18:36:05Z", "author": {"login": "JasonFengJ9"}, "path": "jcl/src/java.base/share/classes/java/lang/ClassLoader.java", "diffHunk": "@@ -1957,6 +1957,15 @@ static void loadLibrary(Class<?> caller, String name, boolean fullPath) {\n \t\tloadLibraryWithClassLoader(name, caller.getClassLoaderImpl());\n }\n \n+/*[IF Java15]*/\n+static void loadLibrary(Class<?> caller, File file) {\n+\tloadLibraryWithPath(file.getAbsolutePath(), caller.getClassLoaderImpl(), null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMwMTY5Mg=="}, "originalCommit": {"oid": "002da6266225ef76f9844b0151308668a68d5ec0"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAxOTI4NQ==", "bodyText": "Before this jdk.internal.loader.NativeLibraries JDK15 update, System.loadLibrary(library) was used which calls ClassLoader.loadLibraryWithClassLoader(), and eventually invokes BytecodeInterpreter.hpp.inlClassLoaderLoadLibraryWithPath() which calls registerNativeLibrary().\nAfter this update, internal.loader.NativeLibraries has its own private static native boolean load(NativeLibraryImpl impl, String name, boolean isBuiltin) which invokes JVM_LoadLibrary() and JVM_FindLibraryEntry(). This seems break OpenJ9 native library loading mechanism.\nRestoring System.loadLibrary(library) within jdk.internal.loader.NativeLibraries can skip its natives and use OpenJ9 inlClassLoaderLoadLibraryWithPath() which fixes the  UnsatisfiedLinkError. However this approach requires a JCL patch.\n@DanHeidinga @pshipton please comment.", "url": "https://github.com/eclipse-openj9/openj9/pull/8855#discussion_r393019285", "createdAt": "2020-03-16T13:24:36Z", "author": {"login": "JasonFengJ9"}, "path": "jcl/src/java.base/share/classes/java/lang/ClassLoader.java", "diffHunk": "@@ -1957,6 +1957,15 @@ static void loadLibrary(Class<?> caller, String name, boolean fullPath) {\n \t\tloadLibraryWithClassLoader(name, caller.getClassLoaderImpl());\n }\n \n+/*[IF Java15]*/\n+static void loadLibrary(Class<?> caller, File file) {\n+\tloadLibraryWithPath(file.getAbsolutePath(), caller.getClassLoaderImpl(), null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMwMTY5Mg=="}, "originalCommit": {"oid": "002da6266225ef76f9844b0151308668a68d5ec0"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzODQzMA==", "bodyText": "Updated the PR and its description, please review.", "url": "https://github.com/eclipse-openj9/openj9/pull/8855#discussion_r394038430", "createdAt": "2020-03-18T00:03:31Z", "author": {"login": "JasonFengJ9"}, "path": "jcl/src/java.base/share/classes/java/lang/ClassLoader.java", "diffHunk": "@@ -1957,6 +1957,15 @@ static void loadLibrary(Class<?> caller, String name, boolean fullPath) {\n \t\tloadLibraryWithClassLoader(name, caller.getClassLoaderImpl());\n }\n \n+/*[IF Java15]*/\n+static void loadLibrary(Class<?> caller, File file) {\n+\tloadLibraryWithPath(file.getAbsolutePath(), caller.getClassLoaderImpl(), null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMwMTY5Mg=="}, "originalCommit": {"oid": "002da6266225ef76f9844b0151308668a68d5ec0"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjU3NjUzOnYy", "diffSide": "RIGHT", "path": "runtime/j9vm/jvm.c", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMTozNjo0MVrOF3zjbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMjoyMDowN1rOF30NKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA2MDY1NA==", "bodyText": "This line can be removed since OpenJ9 doesn't support Java 1.4", "url": "https://github.com/eclipse-openj9/openj9/pull/8855#discussion_r394060654", "createdAt": "2020-03-18T01:36:41Z", "author": {"login": "pshipton"}, "path": "runtime/j9vm/jvm.c", "diffHunk": "@@ -3577,69 +3577,25 @@ JVM_LoadSystemLibrary(const char *libName)\n  *\tDLL: jvm\n  */\n \n-/* NOTE THIS IS NOT REQUIRED FOR 1.4 */\n+/* NOTE THIS IS NOT REQUIRED FOR 1.4", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9eb61512b390d4f225066c8f7e557c9b99e8fbf4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA3MTMzNw==", "bodyText": "Removed.", "url": "https://github.com/eclipse-openj9/openj9/pull/8855#discussion_r394071337", "createdAt": "2020-03-18T02:20:07Z", "author": {"login": "JasonFengJ9"}, "path": "runtime/j9vm/jvm.c", "diffHunk": "@@ -3577,69 +3577,25 @@ JVM_LoadSystemLibrary(const char *libName)\n  *\tDLL: jvm\n  */\n \n-/* NOTE THIS IS NOT REQUIRED FOR 1.4 */\n+/* NOTE THIS IS NOT REQUIRED FOR 1.4", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA2MDY1NA=="}, "originalCommit": {"oid": "9eb61512b390d4f225066c8f7e557c9b99e8fbf4"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjU5MjU4OnYy", "diffSide": "LEFT", "path": "runtime/j9vm/jvm.c", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMTo0NzoyOFrOF3ztoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMjoyMDoyMlrOF30NaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA2MzI2NQ==", "bodyText": "The tracepoints should remain.", "url": "https://github.com/eclipse-openj9/openj9/pull/8855#discussion_r394063265", "createdAt": "2020-03-18T01:47:28Z", "author": {"login": "pshipton"}, "path": "runtime/j9vm/jvm.c", "diffHunk": "@@ -3577,69 +3577,25 @@ JVM_LoadSystemLibrary(const char *libName)\n  *\tDLL: jvm\n  */\n \n-/* NOTE THIS IS NOT REQUIRED FOR 1.4 */\n+/* NOTE THIS IS NOT REQUIRED FOR 1.4\n+ * Additional note: this is required by JDK15+ jdk.internal.loader.NativeLibraries.load().\n+ *  it is only invoked by jdk.internal.loader.BootLoader.loadLibrary(),\n+ */\n \n void* JNICALL\n-JVM_LoadLibrary(const char *libName)\n+JVM_LoadLibrary(const char* libName)\n {\n-\tJNIEnv *env;\n-\tJavaVM *vm = (JavaVM *) BFUjavaVM;\n-\tchar errMsg[512];\n+\tvoid* result = NULL;\n+\tJ9NativeLibrary* nativeLibrary = NULL;\n+\tJ9JavaVM* javaVM = (J9JavaVM*)BFUjavaVM;\n+\tJ9InternalVMFunctions* vmFuncs = javaVM->internalVMFunctions;\n+\tJ9VMThread* currentThread = vmFuncs->currentVMThread(javaVM);\n \n-#ifdef WIN32\n-\tHINSTANCE dllHandle;\n-\tUINT prevMode;\n-\n-\tTrc_SC_LoadLibrary_Entry(libName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9eb61512b390d4f225066c8f7e557c9b99e8fbf4"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA2NDk0Mg==", "bodyText": "and the tracepoint levels can be modified to level 2", "url": "https://github.com/eclipse-openj9/openj9/pull/8855#discussion_r394064942", "createdAt": "2020-03-18T01:54:03Z", "author": {"login": "pshipton"}, "path": "runtime/j9vm/jvm.c", "diffHunk": "@@ -3577,69 +3577,25 @@ JVM_LoadSystemLibrary(const char *libName)\n  *\tDLL: jvm\n  */\n \n-/* NOTE THIS IS NOT REQUIRED FOR 1.4 */\n+/* NOTE THIS IS NOT REQUIRED FOR 1.4\n+ * Additional note: this is required by JDK15+ jdk.internal.loader.NativeLibraries.load().\n+ *  it is only invoked by jdk.internal.loader.BootLoader.loadLibrary(),\n+ */\n \n void* JNICALL\n-JVM_LoadLibrary(const char *libName)\n+JVM_LoadLibrary(const char* libName)\n {\n-\tJNIEnv *env;\n-\tJavaVM *vm = (JavaVM *) BFUjavaVM;\n-\tchar errMsg[512];\n+\tvoid* result = NULL;\n+\tJ9NativeLibrary* nativeLibrary = NULL;\n+\tJ9JavaVM* javaVM = (J9JavaVM*)BFUjavaVM;\n+\tJ9InternalVMFunctions* vmFuncs = javaVM->internalVMFunctions;\n+\tJ9VMThread* currentThread = vmFuncs->currentVMThread(javaVM);\n \n-#ifdef WIN32\n-\tHINSTANCE dllHandle;\n-\tUINT prevMode;\n-\n-\tTrc_SC_LoadLibrary_Entry(libName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA2MzI2NQ=="}, "originalCommit": {"oid": "9eb61512b390d4f225066c8f7e557c9b99e8fbf4"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA3MTQwMA==", "bodyText": "Fixed.", "url": "https://github.com/eclipse-openj9/openj9/pull/8855#discussion_r394071400", "createdAt": "2020-03-18T02:20:22Z", "author": {"login": "JasonFengJ9"}, "path": "runtime/j9vm/jvm.c", "diffHunk": "@@ -3577,69 +3577,25 @@ JVM_LoadSystemLibrary(const char *libName)\n  *\tDLL: jvm\n  */\n \n-/* NOTE THIS IS NOT REQUIRED FOR 1.4 */\n+/* NOTE THIS IS NOT REQUIRED FOR 1.4\n+ * Additional note: this is required by JDK15+ jdk.internal.loader.NativeLibraries.load().\n+ *  it is only invoked by jdk.internal.loader.BootLoader.loadLibrary(),\n+ */\n \n void* JNICALL\n-JVM_LoadLibrary(const char *libName)\n+JVM_LoadLibrary(const char* libName)\n {\n-\tJNIEnv *env;\n-\tJavaVM *vm = (JavaVM *) BFUjavaVM;\n-\tchar errMsg[512];\n+\tvoid* result = NULL;\n+\tJ9NativeLibrary* nativeLibrary = NULL;\n+\tJ9JavaVM* javaVM = (J9JavaVM*)BFUjavaVM;\n+\tJ9InternalVMFunctions* vmFuncs = javaVM->internalVMFunctions;\n+\tJ9VMThread* currentThread = vmFuncs->currentVMThread(javaVM);\n \n-#ifdef WIN32\n-\tHINSTANCE dllHandle;\n-\tUINT prevMode;\n-\n-\tTrc_SC_LoadLibrary_Entry(libName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA2MzI2NQ=="}, "originalCommit": {"oid": "9eb61512b390d4f225066c8f7e557c9b99e8fbf4"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 531, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}