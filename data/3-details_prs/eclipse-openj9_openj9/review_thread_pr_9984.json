{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4NjUyMDcw", "number": 9984, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNjoyNzowOFrOEIC18w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNjoyNzowOFrOEIC18w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODcwNjQzOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/z/codegen/S390J9CallSnippet.cpp", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNjoyNzowOFrOGnxJew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNzo0MTowMVrOGnz00g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM1Mjg5MQ==", "bodyText": "Is cg()->getCodeStart() the beginning of the code cache (thus including all of the prologue, pre-prologue and code cache header?\nOn x86 we use self()->getBinaryBufferStart()", "url": "https://github.com/eclipse-openj9/openj9/pull/9984#discussion_r444352891", "createdAt": "2020-06-23T16:27:08Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/z/codegen/S390J9CallSnippet.cpp", "diffHunk": "@@ -1460,7 +1460,18 @@ TR::S390JNICallDataSnippet::emitSnippetBody()\n       // _targetAddress/function pointer of native method\n       *(intptr_t *) cursor = (intptr_t) _targetAddress;\n       TR_OpaqueMethodBlock *method = getNode()->getSymbol()->castToResolvedMethodSymbol()->getResolvedMethod()->getPersistentIdentifier();\n-      TR_PatchJNICallSite::make(cg()->fe(), cg()->trPersistentMemory(), (uintptr_t) method, cursor, comp->getMetadataAssumptionList());\n+\n+      if (comp->isOutOfProcessCompilation())\n+         {\n+         // For JITServer we need to build a list of assumptions that will be sent to client at end of compilation\n+         intptr_t offset = cursor - cg()->getCodeStart();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d846d1f11859c3b0bbea25b928daeec433ef39f"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM5MjEzNQ==", "bodyText": "A similar thing is done inside J9::CodeGenerator::registerAssumptions() in this PR: https://github.com/eclipse/openj9/pull/7948/files.\nBut it looks like the call has since been replaced with self()->getBinaryBufferStart(). On Z we should be able to make the same call.", "url": "https://github.com/eclipse-openj9/openj9/pull/9984#discussion_r444392135", "createdAt": "2020-06-23T17:32:53Z", "author": {"login": "dchopra001"}, "path": "runtime/compiler/z/codegen/S390J9CallSnippet.cpp", "diffHunk": "@@ -1460,7 +1460,18 @@ TR::S390JNICallDataSnippet::emitSnippetBody()\n       // _targetAddress/function pointer of native method\n       *(intptr_t *) cursor = (intptr_t) _targetAddress;\n       TR_OpaqueMethodBlock *method = getNode()->getSymbol()->castToResolvedMethodSymbol()->getResolvedMethod()->getPersistentIdentifier();\n-      TR_PatchJNICallSite::make(cg()->fe(), cg()->trPersistentMemory(), (uintptr_t) method, cursor, comp->getMetadataAssumptionList());\n+\n+      if (comp->isOutOfProcessCompilation())\n+         {\n+         // For JITServer we need to build a list of assumptions that will be sent to client at end of compilation\n+         intptr_t offset = cursor - cg()->getCodeStart();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM1Mjg5MQ=="}, "originalCommit": {"oid": "4d846d1f11859c3b0bbea25b928daeec433ef39f"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM5NDU1OA==", "bodyText": "The explanation for why it was changed is provided here, and I think we should do the same on Z:\nb61f2c8", "url": "https://github.com/eclipse-openj9/openj9/pull/9984#discussion_r444394558", "createdAt": "2020-06-23T17:37:19Z", "author": {"login": "dchopra001"}, "path": "runtime/compiler/z/codegen/S390J9CallSnippet.cpp", "diffHunk": "@@ -1460,7 +1460,18 @@ TR::S390JNICallDataSnippet::emitSnippetBody()\n       // _targetAddress/function pointer of native method\n       *(intptr_t *) cursor = (intptr_t) _targetAddress;\n       TR_OpaqueMethodBlock *method = getNode()->getSymbol()->castToResolvedMethodSymbol()->getResolvedMethod()->getPersistentIdentifier();\n-      TR_PatchJNICallSite::make(cg()->fe(), cg()->trPersistentMemory(), (uintptr_t) method, cursor, comp->getMetadataAssumptionList());\n+\n+      if (comp->isOutOfProcessCompilation())\n+         {\n+         // For JITServer we need to build a list of assumptions that will be sent to client at end of compilation\n+         intptr_t offset = cursor - cg()->getCodeStart();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM1Mjg5MQ=="}, "originalCommit": {"oid": "4d846d1f11859c3b0bbea25b928daeec433ef39f"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM5Njc1NA==", "bodyText": "Fixed here: ffd80c7", "url": "https://github.com/eclipse-openj9/openj9/pull/9984#discussion_r444396754", "createdAt": "2020-06-23T17:41:01Z", "author": {"login": "dchopra001"}, "path": "runtime/compiler/z/codegen/S390J9CallSnippet.cpp", "diffHunk": "@@ -1460,7 +1460,18 @@ TR::S390JNICallDataSnippet::emitSnippetBody()\n       // _targetAddress/function pointer of native method\n       *(intptr_t *) cursor = (intptr_t) _targetAddress;\n       TR_OpaqueMethodBlock *method = getNode()->getSymbol()->castToResolvedMethodSymbol()->getResolvedMethod()->getPersistentIdentifier();\n-      TR_PatchJNICallSite::make(cg()->fe(), cg()->trPersistentMemory(), (uintptr_t) method, cursor, comp->getMetadataAssumptionList());\n+\n+      if (comp->isOutOfProcessCompilation())\n+         {\n+         // For JITServer we need to build a list of assumptions that will be sent to client at end of compilation\n+         intptr_t offset = cursor - cg()->getCodeStart();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM1Mjg5MQ=="}, "originalCommit": {"oid": "4d846d1f11859c3b0bbea25b928daeec433ef39f"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4953, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}