{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2ODk1ODA2", "number": 10594, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMDo1Mzo0NFrOEjxWlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMDo1Mzo0NFrOEjxWlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1OTQ0MjE1OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/p/env/J9CPU.cpp", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMDo1Mzo0NFrOHSUJtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMToyNDozMVrOHSVEfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk2NjU4MA==", "bodyText": "does this routine exist only temporarily?  I am imagining that these p/env/J9CPU.x files would be deleted completely once everything CPU-related is moved to OMR side.  it is less ideal that CPU-related stuffs are still split implementation.", "url": "https://github.com/eclipse-openj9/openj9/pull/10594#discussion_r488966580", "createdAt": "2020-09-15T20:53:44Z", "author": {"login": "zl-wang"}, "path": "runtime/compiler/p/env/J9CPU.cpp", "diffHunk": "@@ -135,21 +47,10 @@ J9::Power::CPU::isCompatible(const OMRProcessorDesc& processorDescription)\n    return targetProcessor == processor;\n    }\n \n-OMRProcessorDesc\n-J9::Power::CPU::getProcessorDescription()\n-   {\n-#if defined(J9VM_OPT_JITSERVER)\n-   if (auto stream = TR::CompilationInfo::getStream())\n-      {\n-      auto *vmInfo = TR::compInfoPT->getClientData()->getOrCacheVMInfo(stream);\n-      return vmInfo->_processorDescription;\n-      }\n-#endif /* defined(J9VM_OPT_JITSERVER) */\n-   return _processorDescription;\n-   }\n-\n-bool\n-J9::Power::CPU::getPPCSupportsVSX()\n-   {\n-   return self()->supportsFeature(OMR_FEATURE_PPC_HAS_VSX);\n-   }\n+void\n+J9::Power::CPU::setProcessorType(OMRProcessorArchitecture p)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e6f5e6849be129c272eb34c672b82ec16f4b780"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk3MzUwMQ==", "bodyText": "I tried to remove as much as possible but this function can't be removed due to JITServer.\nOMRProcessorDesc\nJ9::Power::CPU::getProcessorDescription()\n   {\n#if defined(J9VM_OPT_JITSERVER)\n   if (auto stream = TR::CompilationInfo::getStream())\n      {\n      auto *vmInfo = TR::compInfoPT->getClientData()->getOrCacheVMInfo(stream);\n      return vmInfo->_processorDescription;\n      }\n#endif /* defined(J9VM_OPT_JITSERVER) */\n   return _processorDescription;\n   }\nfor J9::Power::CPU::setProcessorType I would say it only exists temporarily. It's only here to make this function TR::CompilationInfo::setProcessorByDebugOption() happy for now. And eventually I will sink it down to OMRCPU. Is this function still being used? Also I have a question regarding setProcessorByDebugOption(), notice how it only changes the processor type and doesn't change the processor features, would that be a problem?", "url": "https://github.com/eclipse-openj9/openj9/pull/10594#discussion_r488973501", "createdAt": "2020-09-15T21:07:07Z", "author": {"login": "harryyu1994"}, "path": "runtime/compiler/p/env/J9CPU.cpp", "diffHunk": "@@ -135,21 +47,10 @@ J9::Power::CPU::isCompatible(const OMRProcessorDesc& processorDescription)\n    return targetProcessor == processor;\n    }\n \n-OMRProcessorDesc\n-J9::Power::CPU::getProcessorDescription()\n-   {\n-#if defined(J9VM_OPT_JITSERVER)\n-   if (auto stream = TR::CompilationInfo::getStream())\n-      {\n-      auto *vmInfo = TR::compInfoPT->getClientData()->getOrCacheVMInfo(stream);\n-      return vmInfo->_processorDescription;\n-      }\n-#endif /* defined(J9VM_OPT_JITSERVER) */\n-   return _processorDescription;\n-   }\n-\n-bool\n-J9::Power::CPU::getPPCSupportsVSX()\n-   {\n-   return self()->supportsFeature(OMR_FEATURE_PPC_HAS_VSX);\n-   }\n+void\n+J9::Power::CPU::setProcessorType(OMRProcessorArchitecture p)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk2NjU4MA=="}, "originalCommit": {"oid": "2e6f5e6849be129c272eb34c672b82ec16f4b780"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk4MTYzMA==", "bodyText": "Also I have a question regarding setProcessorByDebugOption(), notice how it only changes the processor type and doesn't change the processor features, would that be a problem?\n\nit is a problem in theory, since features can be disabled individually on running instance of OS.  But, i would say it is not a problem usually. Running instances of OS (same level) typically have the same set of features enabled. Especially for Linux (targeted containerized environment on POWER), it is not that easy to disable a hardware feature (without rebuilding the kernel).  AIX can enable/disable more dynamically through management tool, but it doesn't support Docker anytime soon.", "url": "https://github.com/eclipse-openj9/openj9/pull/10594#discussion_r488981630", "createdAt": "2020-09-15T21:24:31Z", "author": {"login": "zl-wang"}, "path": "runtime/compiler/p/env/J9CPU.cpp", "diffHunk": "@@ -135,21 +47,10 @@ J9::Power::CPU::isCompatible(const OMRProcessorDesc& processorDescription)\n    return targetProcessor == processor;\n    }\n \n-OMRProcessorDesc\n-J9::Power::CPU::getProcessorDescription()\n-   {\n-#if defined(J9VM_OPT_JITSERVER)\n-   if (auto stream = TR::CompilationInfo::getStream())\n-      {\n-      auto *vmInfo = TR::compInfoPT->getClientData()->getOrCacheVMInfo(stream);\n-      return vmInfo->_processorDescription;\n-      }\n-#endif /* defined(J9VM_OPT_JITSERVER) */\n-   return _processorDescription;\n-   }\n-\n-bool\n-J9::Power::CPU::getPPCSupportsVSX()\n-   {\n-   return self()->supportsFeature(OMR_FEATURE_PPC_HAS_VSX);\n-   }\n+void\n+J9::Power::CPU::setProcessorType(OMRProcessorArchitecture p)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk2NjU4MA=="}, "originalCommit": {"oid": "2e6f5e6849be129c272eb34c672b82ec16f4b780"}, "originalPosition": 118}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4604, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}