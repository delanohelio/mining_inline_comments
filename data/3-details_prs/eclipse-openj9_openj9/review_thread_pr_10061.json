{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyMjU2Njg0", "number": 10061, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQyMTozNDo1NFrOE9w6Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwMzowODoyMFrOE91_LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMTk5ODgyOnYy", "diffSide": "RIGHT", "path": "runtime/jcl/common/vectornatives.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQyMTozNDo1NFrOH6nvOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQyMTozNDo1NFrOH6nvOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIzMDUyMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright (c) 1998, 2020 IBM Corp. and others\n          \n          \n            \n             * Copyright (c) 2020, 2020 IBM Corp. and others", "url": "https://github.com/eclipse-openj9/openj9/pull/10061#discussion_r531230521", "createdAt": "2020-11-26T21:34:54Z", "author": {"login": "DanHeidinga"}, "path": "runtime/jcl/common/vectornatives.cpp", "diffHunk": "@@ -0,0 +1,73 @@\n+/*******************************************************************************\n+ * Copyright (c) 1998, 2020 IBM Corp. and others", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1536f340d30edeac2c603d2366ccc964ce65563b"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMjAwMjc3OnYy", "diffSide": "RIGHT", "path": "runtime/jcl/common/vectornatives.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQyMTozNzoxNlrOH6nxbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQyMTozNzoxNlrOH6nxbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIzMTA4NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tJ9Class *elementType = J9VMJAVALANGCLASS_VMREF(currentThread, classObj);\n          \n          \n            \n            \t\tJ9Class *elementType = J9VM_J9CLASS_FROM_HEAPCLASS(currentThread, classObj);", "url": "https://github.com/eclipse-openj9/openj9/pull/10061#discussion_r531231084", "createdAt": "2020-11-26T21:37:16Z", "author": {"login": "DanHeidinga"}, "path": "runtime/jcl/common/vectornatives.cpp", "diffHunk": "@@ -0,0 +1,73 @@\n+/*******************************************************************************\n+ * Copyright (c) 1998, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+#include \"j9.h\"\n+#include \"jclprots.h\"\n+#include \"j9protos.h\"\n+\n+/* TODO this will be replaced by a call that can determine\n+ * the correct size on each platform\n+ */\n+#define MAX_VECTOR_REGISTER_SIZE 128\n+\n+extern \"C\" {\n+\n+jint JNICALL\n+Java_jdk_internal_vm_vector_VectorSupport_registerNatives(JNIEnv *env, jclass clazz)\n+{\n+\treturn 0;\n+}\n+\n+jint JNICALL\n+Java_jdk_internal_vm_vector_VectorSupport_getMaxLaneCount(JNIEnv *env, jclass clazz, jclass elementType)\n+{\n+\tJ9VMThread *currentThread = (J9VMThread *) env;\n+\tJ9JavaVM *vm = currentThread->javaVM;\n+\tJ9InternalVMFunctions *vmFuncs = vm->internalVMFunctions;\n+\tjint laneCount = 0;\n+\n+\tvmFuncs->internalEnterVMFromJNI(currentThread);\n+\tj9object_t classObj = J9_JNI_UNWRAP_REFERENCE(elementType);\n+\tif (NULL == classObj) {\n+\t\tvmFuncs->setCurrentException(currentThread, J9VMCONSTANTPOOL_JAVALANGNULLPOINTEREXCEPTION, NULL);\n+\t} else {\n+\t\tJ9Class *elementType = J9VMJAVALANGCLASS_VMREF(currentThread, classObj);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1536f340d30edeac2c603d2366ccc964ce65563b"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMjAwNDEwOnYy", "diffSide": "RIGHT", "path": "runtime/jcl/common/vectornatives.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQyMTozODoxNVrOH6nyIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQyMTo0NjowNFrOH6n47w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIzMTI2Ng==", "bodyText": "Should char be supported here?", "url": "https://github.com/eclipse-openj9/openj9/pull/10061#discussion_r531231266", "createdAt": "2020-11-26T21:38:15Z", "author": {"login": "DanHeidinga"}, "path": "runtime/jcl/common/vectornatives.cpp", "diffHunk": "@@ -0,0 +1,73 @@\n+/*******************************************************************************\n+ * Copyright (c) 1998, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+#include \"j9.h\"\n+#include \"jclprots.h\"\n+#include \"j9protos.h\"\n+\n+/* TODO this will be replaced by a call that can determine\n+ * the correct size on each platform\n+ */\n+#define MAX_VECTOR_REGISTER_SIZE 128\n+\n+extern \"C\" {\n+\n+jint JNICALL\n+Java_jdk_internal_vm_vector_VectorSupport_registerNatives(JNIEnv *env, jclass clazz)\n+{\n+\treturn 0;\n+}\n+\n+jint JNICALL\n+Java_jdk_internal_vm_vector_VectorSupport_getMaxLaneCount(JNIEnv *env, jclass clazz, jclass elementType)\n+{\n+\tJ9VMThread *currentThread = (J9VMThread *) env;\n+\tJ9JavaVM *vm = currentThread->javaVM;\n+\tJ9InternalVMFunctions *vmFuncs = vm->internalVMFunctions;\n+\tjint laneCount = 0;\n+\n+\tvmFuncs->internalEnterVMFromJNI(currentThread);\n+\tj9object_t classObj = J9_JNI_UNWRAP_REFERENCE(elementType);\n+\tif (NULL == classObj) {\n+\t\tvmFuncs->setCurrentException(currentThread, J9VMCONSTANTPOOL_JAVALANGNULLPOINTEREXCEPTION, NULL);\n+\t} else {\n+\t\tJ9Class *elementType = J9VMJAVALANGCLASS_VMREF(currentThread, classObj);\n+\n+\t\tif (elementType == vm->byteReflectClass) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1536f340d30edeac2c603d2366ccc964ce65563b"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIzMzAwNw==", "bodyText": "char is not one of the supported types", "url": "https://github.com/eclipse-openj9/openj9/pull/10061#discussion_r531233007", "createdAt": "2020-11-26T21:46:04Z", "author": {"login": "tajila"}, "path": "runtime/jcl/common/vectornatives.cpp", "diffHunk": "@@ -0,0 +1,73 @@\n+/*******************************************************************************\n+ * Copyright (c) 1998, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+#include \"j9.h\"\n+#include \"jclprots.h\"\n+#include \"j9protos.h\"\n+\n+/* TODO this will be replaced by a call that can determine\n+ * the correct size on each platform\n+ */\n+#define MAX_VECTOR_REGISTER_SIZE 128\n+\n+extern \"C\" {\n+\n+jint JNICALL\n+Java_jdk_internal_vm_vector_VectorSupport_registerNatives(JNIEnv *env, jclass clazz)\n+{\n+\treturn 0;\n+}\n+\n+jint JNICALL\n+Java_jdk_internal_vm_vector_VectorSupport_getMaxLaneCount(JNIEnv *env, jclass clazz, jclass elementType)\n+{\n+\tJ9VMThread *currentThread = (J9VMThread *) env;\n+\tJ9JavaVM *vm = currentThread->javaVM;\n+\tJ9InternalVMFunctions *vmFuncs = vm->internalVMFunctions;\n+\tjint laneCount = 0;\n+\n+\tvmFuncs->internalEnterVMFromJNI(currentThread);\n+\tj9object_t classObj = J9_JNI_UNWRAP_REFERENCE(elementType);\n+\tif (NULL == classObj) {\n+\t\tvmFuncs->setCurrentException(currentThread, J9VMCONSTANTPOOL_JAVALANGNULLPOINTEREXCEPTION, NULL);\n+\t} else {\n+\t\tJ9Class *elementType = J9VMJAVALANGCLASS_VMREF(currentThread, classObj);\n+\n+\t\tif (elementType == vm->byteReflectClass) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIzMTI2Ng=="}, "originalCommit": {"oid": "1536f340d30edeac2c603d2366ccc964ce65563b"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMjgzMTE3OnYy", "diffSide": "RIGHT", "path": "runtime/jcl/CMakeLists.txt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwMzowODoyMFrOH6vr1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNjo0Nzo1NlrOH7EIRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTM2MDcyNA==", "bodyText": "Actually, this might need to be only included on jdk16+.  Maybe use similar code to the jdk9+ example below in the file:\n# We'd like to use GREATER_EQUAL here (and below), but that operator requires\n# cmake version 3.7 or better; the minimum version we require is 3.4.\t# cmake version 3.7 or better; the minimum version we require is 3.4.\nif(NOT JAVA_SPEC_VERSION LESS 16)\n\t# sources for Java 16+\n\ttarget_sources(jclse\n\t\tPRIVATE\n\t\t\t${CMAKE_CURRENT_SOURCE_DIR}/common/java_lang_invoke_VarHandle.c\n\t\t\t${CMAKE_CURRENT_SOURCE_DIR}/common/java_lang_StackWalker.cpp\n\t)\nendif()\n\n@dnakamura do you have a better suggestion for how to handle a jdk16+ only source file?", "url": "https://github.com/eclipse-openj9/openj9/pull/10061#discussion_r531360724", "createdAt": "2020-11-27T03:08:20Z", "author": {"login": "DanHeidinga"}, "path": "runtime/jcl/CMakeLists.txt", "diffHunk": "@@ -157,6 +157,7 @@ target_sources(jclse\n \t\t${CMAKE_CURRENT_SOURCE_DIR}/common/system.c\n \t\t${CMAKE_CURRENT_SOURCE_DIR}/common/thread.cpp\n \t\t${CMAKE_CURRENT_SOURCE_DIR}/common/unsafe_mem.c\n+\t\t${CMAKE_CURRENT_SOURCE_DIR}/common/vectornatives.cpp", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be3357a70aa2b60fabd6482bb2185b5838dce838"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY5NTY4Ng==", "bodyText": "no, that would be the way to do it.", "url": "https://github.com/eclipse-openj9/openj9/pull/10061#discussion_r531695686", "createdAt": "2020-11-27T16:47:56Z", "author": {"login": "dnakamura"}, "path": "runtime/jcl/CMakeLists.txt", "diffHunk": "@@ -157,6 +157,7 @@ target_sources(jclse\n \t\t${CMAKE_CURRENT_SOURCE_DIR}/common/system.c\n \t\t${CMAKE_CURRENT_SOURCE_DIR}/common/thread.cpp\n \t\t${CMAKE_CURRENT_SOURCE_DIR}/common/unsafe_mem.c\n+\t\t${CMAKE_CURRENT_SOURCE_DIR}/common/vectornatives.cpp", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTM2MDcyNA=="}, "originalCommit": {"oid": "be3357a70aa2b60fabd6482bb2185b5838dce838"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4893, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}