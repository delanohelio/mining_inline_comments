{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxMTE1MTYy", "number": 8679, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwMjo0Nzo0OVrODjrh4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwMjo1NDozNlrODjrlbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NzM5OTM4OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/control/rossa.cpp", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwMjo0Nzo0OVrOFvoAYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNjozOToxMlrOFxNm3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ4Mjg1MA==", "bodyText": "Do we actually need a TR_J9SharedCacheVM frontend? As far as I can tell we only need the frontend to ask if it asynchronous compilation is disabled.", "url": "https://github.com/eclipse-openj9/openj9/pull/8679#discussion_r385482850", "createdAt": "2020-02-28T02:47:49Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/control/rossa.cpp", "diffHunk": "@@ -1868,13 +1868,24 @@ aboutToBootstrap(J9JavaVM * javaVM, J9JITConfig * jitConfig)\n #if defined(J9VM_OPT_SHARED_CLASSES)\n    if (isSharedAOT)\n       {\n-      /* If AOT Shared Classes is turned ON, perform compatibility checks for AOT Shared Classes */\n-      if (0) //!validateSharedClassAOTHeader(javaVM, curThread, compInfo))\n+      /* If AOT Shared Classes is turned ON, perform compatibility checks for AOT Shared Classes\n+       *\n+       * This check has to be done after latePostProcessJIT so that all the necessary JIT options\n+       * can be set\n+       */\n+      TR_J9SharedCacheVM *fe = (TR_J9SharedCacheVM *) TR_J9VMBase::get(jitConfig, curThread, TR_J9VMBase::AOT_VM);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1ab0cb009edb6a2eb4f5bd6231c8a91f15d12b5"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc2NTA0MQ==", "bodyText": "Probably not, I mean given that we're calling code to validate the AOT Header, the SCC must be enabled.", "url": "https://github.com/eclipse-openj9/openj9/pull/8679#discussion_r385765041", "createdAt": "2020-02-28T15:38:38Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/control/rossa.cpp", "diffHunk": "@@ -1868,13 +1868,24 @@ aboutToBootstrap(J9JavaVM * javaVM, J9JITConfig * jitConfig)\n #if defined(J9VM_OPT_SHARED_CLASSES)\n    if (isSharedAOT)\n       {\n-      /* If AOT Shared Classes is turned ON, perform compatibility checks for AOT Shared Classes */\n-      if (0) //!validateSharedClassAOTHeader(javaVM, curThread, compInfo))\n+      /* If AOT Shared Classes is turned ON, perform compatibility checks for AOT Shared Classes\n+       *\n+       * This check has to be done after latePostProcessJIT so that all the necessary JIT options\n+       * can be set\n+       */\n+      TR_J9SharedCacheVM *fe = (TR_J9SharedCacheVM *) TR_J9VMBase::get(jitConfig, curThread, TR_J9VMBase::AOT_VM);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ4Mjg1MA=="}, "originalCommit": {"oid": "b1ab0cb009edb6a2eb4f5bd6231c8a91f15d12b5"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE0NzQ4Ng==", "bodyText": "Addressed in 0233e1d", "url": "https://github.com/eclipse-openj9/openj9/pull/8679#discussion_r387147486", "createdAt": "2020-03-03T16:39:12Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/control/rossa.cpp", "diffHunk": "@@ -1868,13 +1868,24 @@ aboutToBootstrap(J9JavaVM * javaVM, J9JITConfig * jitConfig)\n #if defined(J9VM_OPT_SHARED_CLASSES)\n    if (isSharedAOT)\n       {\n-      /* If AOT Shared Classes is turned ON, perform compatibility checks for AOT Shared Classes */\n-      if (0) //!validateSharedClassAOTHeader(javaVM, curThread, compInfo))\n+      /* If AOT Shared Classes is turned ON, perform compatibility checks for AOT Shared Classes\n+       *\n+       * This check has to be done after latePostProcessJIT so that all the necessary JIT options\n+       * can be set\n+       */\n+      TR_J9SharedCacheVM *fe = (TR_J9SharedCacheVM *) TR_J9VMBase::get(jitConfig, curThread, TR_J9VMBase::AOT_VM);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ4Mjg1MA=="}, "originalCommit": {"oid": "b1ab0cb009edb6a2eb4f5bd6231c8a91f15d12b5"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NzQwODQ3OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/control/rossa.cpp", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwMjo1NDozNlrOFvoFxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNjozOToxOVrOFxNnJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ4NDIzMQ==", "bodyText": "I wonder is there is any problem when there is no header, but the SCC has been created by another JVM, maybe because that JVM didn't have the time to generate any AOT compilations. Could IProfiler be present in such an SCC and therefore defeat the check here?", "url": "https://github.com/eclipse-openj9/openj9/pull/8679#discussion_r385484231", "createdAt": "2020-02-28T02:54:36Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/control/rossa.cpp", "diffHunk": "@@ -1868,13 +1868,24 @@ aboutToBootstrap(J9JavaVM * javaVM, J9JITConfig * jitConfig)\n #if defined(J9VM_OPT_SHARED_CLASSES)\n    if (isSharedAOT)\n       {\n-      /* If AOT Shared Classes is turned ON, perform compatibility checks for AOT Shared Classes */\n-      if (0) //!validateSharedClassAOTHeader(javaVM, curThread, compInfo))\n+      /* If AOT Shared Classes is turned ON, perform compatibility checks for AOT Shared Classes\n+       *\n+       * This check has to be done after latePostProcessJIT so that all the necessary JIT options\n+       * can be set\n+       */\n+      TR_J9SharedCacheVM *fe = (TR_J9SharedCacheVM *) TR_J9VMBase::get(jitConfig, curThread, TR_J9VMBase::AOT_VM);\n+      if (!compInfo->reloRuntime()->validateAOTHeader(fe, curThread))\n          {\n-         TR::Options::getAOTCmdLineOptions()->setOption(TR_NoLoadAOT);\n-         TR::Options::getAOTCmdLineOptions()->setOption(TR_NoStoreAOT);\n-         TR::Options::setSharedClassCache(false);\n-         TR_J9SharedCache::setSharedCacheDisabledReason(TR_J9SharedCache::AOT_DISABLED);\n+         /* This could be the first run, in which case validateAOTHeader might return false because", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1ab0cb009edb6a2eb4f5bd6231c8a91f15d12b5"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc2NDE3NA==", "bodyText": "Hm, that is definitely a possible scenario. Maybe I'd have to add code in the IProfiler to generate the header if it doesn't already exist in that case.", "url": "https://github.com/eclipse-openj9/openj9/pull/8679#discussion_r385764174", "createdAt": "2020-02-28T15:37:15Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/control/rossa.cpp", "diffHunk": "@@ -1868,13 +1868,24 @@ aboutToBootstrap(J9JavaVM * javaVM, J9JITConfig * jitConfig)\n #if defined(J9VM_OPT_SHARED_CLASSES)\n    if (isSharedAOT)\n       {\n-      /* If AOT Shared Classes is turned ON, perform compatibility checks for AOT Shared Classes */\n-      if (0) //!validateSharedClassAOTHeader(javaVM, curThread, compInfo))\n+      /* If AOT Shared Classes is turned ON, perform compatibility checks for AOT Shared Classes\n+       *\n+       * This check has to be done after latePostProcessJIT so that all the necessary JIT options\n+       * can be set\n+       */\n+      TR_J9SharedCacheVM *fe = (TR_J9SharedCacheVM *) TR_J9VMBase::get(jitConfig, curThread, TR_J9VMBase::AOT_VM);\n+      if (!compInfo->reloRuntime()->validateAOTHeader(fe, curThread))\n          {\n-         TR::Options::getAOTCmdLineOptions()->setOption(TR_NoLoadAOT);\n-         TR::Options::getAOTCmdLineOptions()->setOption(TR_NoStoreAOT);\n-         TR::Options::setSharedClassCache(false);\n-         TR_J9SharedCache::setSharedCacheDisabledReason(TR_J9SharedCache::AOT_DISABLED);\n+         /* This could be the first run, in which case validateAOTHeader might return false because", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ4NDIzMQ=="}, "originalCommit": {"oid": "b1ab0cb009edb6a2eb4f5bd6231c8a91f15d12b5"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc4Mjc2Ng==", "bodyText": "At the moment, we only ever persist the IProfiler data either in genIL (if we haven't delayed AOT loads) or when we do an AOT load (if we have delayed AOT loads).\nDo you think we should still have code to create a header in the IProfiler just in case?", "url": "https://github.com/eclipse-openj9/openj9/pull/8679#discussion_r385782766", "createdAt": "2020-02-28T16:09:15Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/control/rossa.cpp", "diffHunk": "@@ -1868,13 +1868,24 @@ aboutToBootstrap(J9JavaVM * javaVM, J9JITConfig * jitConfig)\n #if defined(J9VM_OPT_SHARED_CLASSES)\n    if (isSharedAOT)\n       {\n-      /* If AOT Shared Classes is turned ON, perform compatibility checks for AOT Shared Classes */\n-      if (0) //!validateSharedClassAOTHeader(javaVM, curThread, compInfo))\n+      /* If AOT Shared Classes is turned ON, perform compatibility checks for AOT Shared Classes\n+       *\n+       * This check has to be done after latePostProcessJIT so that all the necessary JIT options\n+       * can be set\n+       */\n+      TR_J9SharedCacheVM *fe = (TR_J9SharedCacheVM *) TR_J9VMBase::get(jitConfig, curThread, TR_J9VMBase::AOT_VM);\n+      if (!compInfo->reloRuntime()->validateAOTHeader(fe, curThread))\n          {\n-         TR::Options::getAOTCmdLineOptions()->setOption(TR_NoLoadAOT);\n-         TR::Options::getAOTCmdLineOptions()->setOption(TR_NoStoreAOT);\n-         TR::Options::setSharedClassCache(false);\n-         TR_J9SharedCache::setSharedCacheDisabledReason(TR_J9SharedCache::AOT_DISABLED);\n+         /* This could be the first run, in which case validateAOTHeader might return false because", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ4NDIzMQ=="}, "originalCommit": {"oid": "b1ab0cb009edb6a2eb4f5bd6231c8a91f15d12b5"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU3MzU5OA==", "bodyText": "@mpirvu ^", "url": "https://github.com/eclipse-openj9/openj9/pull/8679#discussion_r386573598", "createdAt": "2020-03-02T18:36:40Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/control/rossa.cpp", "diffHunk": "@@ -1868,13 +1868,24 @@ aboutToBootstrap(J9JavaVM * javaVM, J9JITConfig * jitConfig)\n #if defined(J9VM_OPT_SHARED_CLASSES)\n    if (isSharedAOT)\n       {\n-      /* If AOT Shared Classes is turned ON, perform compatibility checks for AOT Shared Classes */\n-      if (0) //!validateSharedClassAOTHeader(javaVM, curThread, compInfo))\n+      /* If AOT Shared Classes is turned ON, perform compatibility checks for AOT Shared Classes\n+       *\n+       * This check has to be done after latePostProcessJIT so that all the necessary JIT options\n+       * can be set\n+       */\n+      TR_J9SharedCacheVM *fe = (TR_J9SharedCacheVM *) TR_J9VMBase::get(jitConfig, curThread, TR_J9VMBase::AOT_VM);\n+      if (!compInfo->reloRuntime()->validateAOTHeader(fe, curThread))\n          {\n-         TR::Options::getAOTCmdLineOptions()->setOption(TR_NoLoadAOT);\n-         TR::Options::getAOTCmdLineOptions()->setOption(TR_NoStoreAOT);\n-         TR::Options::setSharedClassCache(false);\n-         TR_J9SharedCache::setSharedCacheDisabledReason(TR_J9SharedCache::AOT_DISABLED);\n+         /* This could be the first run, in which case validateAOTHeader might return false because", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ4NDIzMQ=="}, "originalCommit": {"oid": "b1ab0cb009edb6a2eb4f5bd6231c8a91f15d12b5"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY2Mzc0MA==", "bodyText": "@dsouzai Yes, we still have a problem, because an AOT compilation starts, genIL() is performed and some IP data is stored in SCC, then, while the JIT compiler is in optimizer or codegen, the JVM enters the shutdown stage, the compilation is aborted and we don't reach the point where the header is written.\nI do not see a problem if delayed AOT load feature is in place though (we must have compiled and stored an AOT body in order to reach the point where IP data is stored).", "url": "https://github.com/eclipse-openj9/openj9/pull/8679#discussion_r386663740", "createdAt": "2020-03-02T21:34:10Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/control/rossa.cpp", "diffHunk": "@@ -1868,13 +1868,24 @@ aboutToBootstrap(J9JavaVM * javaVM, J9JITConfig * jitConfig)\n #if defined(J9VM_OPT_SHARED_CLASSES)\n    if (isSharedAOT)\n       {\n-      /* If AOT Shared Classes is turned ON, perform compatibility checks for AOT Shared Classes */\n-      if (0) //!validateSharedClassAOTHeader(javaVM, curThread, compInfo))\n+      /* If AOT Shared Classes is turned ON, perform compatibility checks for AOT Shared Classes\n+       *\n+       * This check has to be done after latePostProcessJIT so that all the necessary JIT options\n+       * can be set\n+       */\n+      TR_J9SharedCacheVM *fe = (TR_J9SharedCacheVM *) TR_J9VMBase::get(jitConfig, curThread, TR_J9VMBase::AOT_VM);\n+      if (!compInfo->reloRuntime()->validateAOTHeader(fe, curThread))\n          {\n-         TR::Options::getAOTCmdLineOptions()->setOption(TR_NoLoadAOT);\n-         TR::Options::getAOTCmdLineOptions()->setOption(TR_NoStoreAOT);\n-         TR::Options::setSharedClassCache(false);\n-         TR_J9SharedCache::setSharedCacheDisabledReason(TR_J9SharedCache::AOT_DISABLED);\n+         /* This could be the first run, in which case validateAOTHeader might return false because", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ4NDIzMQ=="}, "originalCommit": {"oid": "b1ab0cb009edb6a2eb4f5bd6231c8a91f15d12b5"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE0NzU1Nw==", "bodyText": "Addressed in 0233e1d", "url": "https://github.com/eclipse-openj9/openj9/pull/8679#discussion_r387147557", "createdAt": "2020-03-03T16:39:19Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/control/rossa.cpp", "diffHunk": "@@ -1868,13 +1868,24 @@ aboutToBootstrap(J9JavaVM * javaVM, J9JITConfig * jitConfig)\n #if defined(J9VM_OPT_SHARED_CLASSES)\n    if (isSharedAOT)\n       {\n-      /* If AOT Shared Classes is turned ON, perform compatibility checks for AOT Shared Classes */\n-      if (0) //!validateSharedClassAOTHeader(javaVM, curThread, compInfo))\n+      /* If AOT Shared Classes is turned ON, perform compatibility checks for AOT Shared Classes\n+       *\n+       * This check has to be done after latePostProcessJIT so that all the necessary JIT options\n+       * can be set\n+       */\n+      TR_J9SharedCacheVM *fe = (TR_J9SharedCacheVM *) TR_J9VMBase::get(jitConfig, curThread, TR_J9VMBase::AOT_VM);\n+      if (!compInfo->reloRuntime()->validateAOTHeader(fe, curThread))\n          {\n-         TR::Options::getAOTCmdLineOptions()->setOption(TR_NoLoadAOT);\n-         TR::Options::getAOTCmdLineOptions()->setOption(TR_NoStoreAOT);\n-         TR::Options::setSharedClassCache(false);\n-         TR_J9SharedCache::setSharedCacheDisabledReason(TR_J9SharedCache::AOT_DISABLED);\n+         /* This could be the first run, in which case validateAOTHeader might return false because", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ4NDIzMQ=="}, "originalCommit": {"oid": "b1ab0cb009edb6a2eb4f5bd6231c8a91f15d12b5"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 624, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}