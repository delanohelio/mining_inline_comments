{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5NTU5MjQ4", "number": 9371, "title": "Add docker generation script", "bodyText": "Add Dockerfile generation script:\n\nadd support for Ubuntu 18.04 and 20.04\nuse api.adoptopenjdk.net/v3 to fetch boot JDKs\ninstall gcc version 7.5 on CentOS from adoptopenjdk\ninstall git version 2.5.3 from source on CentOS\ninstall make 4.2 for ppc64le on CentOS\ninstall nasm version 2.13.03 from source on CentOS for x86\n\nRemove Dockerfiles obsoleted by mkdocker.sh and relocate ARM Dockerfiles.\nUpdate references to obsolete Dockerfiles.\nSimplify ansible Dockerfile.\nFixes: #1575\nFixes: #5781\nFixes: #6767\nFixes: #9057", "createdAt": "2020-04-27T15:03:01Z", "url": "https://github.com/eclipse-openj9/openj9/pull/9371", "merged": true, "mergeCommit": {"oid": "811bd1643df604547a0a87d69ba4b4c733a457db"}, "closed": true, "closedAt": "2020-04-29T20:52:48Z", "author": {"login": "keithc-ca"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcbwtI1gBqjMyNzYyMzMzNTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcce2IDAFqTQwMzAyOTcxNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bc789161839aa5b50e3d7691f1b0bce970df20ab", "author": {"user": {"login": "keithc-ca", "name": "Keith W. Campbell"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/bc789161839aa5b50e3d7691f1b0bce970df20ab", "committedDate": "2020-04-27T14:39:41Z", "message": "Simplify ansible Dockerfile\n\nSigned-off-by: Keith W. Campbell <keithc@ca.ibm.com>"}, "afterCommit": {"oid": "ca90e819e3c73fba4aed259cecdfe25c7141a06f", "author": {"user": {"login": "keithc-ca", "name": "Keith W. Campbell"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/ca90e819e3c73fba4aed259cecdfe25c7141a06f", "committedDate": "2020-04-27T15:06:15Z", "message": "Simplify ansible Dockerfile\n\nSigned-off-by: Keith W. Campbell <keithc@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxMDg1Mjkw", "url": "https://github.com/eclipse-openj9/openj9/pull/9371#pullrequestreview-401085290", "createdAt": "2020-04-27T15:46:46Z", "commit": {"oid": "ca90e819e3c73fba4aed259cecdfe25c7141a06f"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNTo0Njo0NlrOGMqPsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNTo1NTowNFrOGMqvtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTkyODI0MA==", "bodyText": "Is this supposed to be a comment?", "url": "https://github.com/eclipse-openj9/openj9/pull/9371#discussion_r415928240", "createdAt": "2020-04-27T15:46:46Z", "author": {"login": "pshipton"}, "path": "buildenv/ansible/roles/openj9-build-environment/tasks/main.yml", "diffHunk": "@@ -22,20 +22,22 @@\n ---\n - name: Create a build folder\n   file:\n-    dest: \"{{ build_dir }}\" \n-    mode: 0755 \n+    dest: \"{{ build_dir }}\"\n+    mode: 0755\n     state: directory\n   tags:\n     - buildenv\n-- name: Get Dockerfile for the building environment\n+- name: Get script to build docker image\n   get_url:\n-    dest: \"{{ build_dir }}/Dockerfile-base\"\n-    url: \"https://raw.githubusercontent.com/eclipse/openj9/master/buildenv/docker/{{ version }}/{{ platform }}/ubuntu16/Dockerfile\"\n-    mode: 0644\n+    dest: \"{{ build_dir }}/mkdocker.sh\"\n+    url: \"https://raw.githubusercontent.com/eclipse/openj9/master/buildenv/docker/mkdocker.sh\"\n+    mode: 0755\n     validate_certs: no\n   tags:\n     - buildenv\n - name: Build the docker image for the building environment\n+  # docker/{{ version }}/{{ platform }}/ubuntu16\n+  # bash mkdocker.sh --tag=openj9-{{ version }}-build --dist=ubuntu --version=16.04 --build", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca90e819e3c73fba4aed259cecdfe25c7141a06f"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTkzMzAxNg==", "bodyText": "There should be an Issue for this.", "url": "https://github.com/eclipse-openj9/openj9/pull/9371#discussion_r415933016", "createdAt": "2020-04-27T15:51:01Z", "author": {"login": "pshipton"}, "path": "buildenv/jenkins/docker-slaves/jenkinsfile-build-container.groovy", "diffHunk": "@@ -63,17 +63,24 @@ timeout(time: 5, unit: 'HOURS') {\n                 }\n                 stage(\"Build\") {\n                     if(params.ghprbPullId) {\n-                        TAGS = \"-t ${REPOSITORY}:PR${ghprbPullId}\"\n+                        TAGS = \"--tag=${REPOSITORY}:PR${ghprbPullId}\"\n                     } else {\n-                        TAGS = \"-t ${REPOSITORY}:${BUILD_NUMBER} -t ${REPOSITORY}:latest\"\n+                        /* FIXME mkdocker.sh doesn't handle multiple --tag options */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca90e819e3c73fba4aed259cecdfe25c7141a06f"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTkzNjQzNg==", "bodyText": "We're not ready for this yet.", "url": "https://github.com/eclipse-openj9/openj9/pull/9371#discussion_r415936436", "createdAt": "2020-04-27T15:55:04Z", "author": {"login": "pshipton"}, "path": "doc/build-instructions/Build_Instructions_V8.md", "diffHunk": "@@ -159,10 +125,8 @@ bash get_source.sh\n :penguin:\n When you have all the source files that you need, run the configure script, which detects how to build in the current build environment.\n ```\n-bash configure --with-freemarker-jar=/root/freemarker.jar\n+bash configure --with-cmake", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca90e819e3c73fba4aed259cecdfe25c7141a06f"}, "originalPosition": 90}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxMTAwNjQ2", "url": "https://github.com/eclipse-openj9/openj9/pull/9371#pullrequestreview-401100646", "createdAt": "2020-04-27T16:03:36Z", "commit": {"oid": "ca90e819e3c73fba4aed259cecdfe25c7141a06f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNjowMzozNlrOGMrKgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNjowMzozNlrOGMrKgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk0MzI5OA==", "bodyText": "This isn't an IBM copyright, seems an IBM copyright needs to be added for these changes.", "url": "https://github.com/eclipse-openj9/openj9/pull/9371#discussion_r415943298", "createdAt": "2020-04-27T16:03:36Z", "author": {"login": "pshipton"}, "path": "buildenv/ansible/roles/openj9-build-environment/tasks/main.yml", "diffHunk": "@@ -1,5 +1,5 @@\n ###############################################################################\n-# Copyright (c) 2018, 2018 Pavel Samolysov\n+# Copyright (c) 2018, 2020 Pavel Samolysov", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca90e819e3c73fba4aed259cecdfe25c7141a06f"}, "originalPosition": 3}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ca90e819e3c73fba4aed259cecdfe25c7141a06f", "author": {"user": {"login": "keithc-ca", "name": "Keith W. Campbell"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/ca90e819e3c73fba4aed259cecdfe25c7141a06f", "committedDate": "2020-04-27T15:06:15Z", "message": "Simplify ansible Dockerfile\n\nSigned-off-by: Keith W. Campbell <keithc@ca.ibm.com>"}, "afterCommit": {"oid": "08f93852a1887052b9b7cf7418237d1ee1ad9cc3", "author": {"user": {"login": "keithc-ca", "name": "Keith W. Campbell"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/08f93852a1887052b9b7cf7418237d1ee1ad9cc3", "committedDate": "2020-04-27T16:34:56Z", "message": "Simplify ansible Dockerfile\n\nSigned-off-by: Keith W. Campbell <keithc@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "08f93852a1887052b9b7cf7418237d1ee1ad9cc3", "author": {"user": {"login": "keithc-ca", "name": "Keith W. Campbell"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/08f93852a1887052b9b7cf7418237d1ee1ad9cc3", "committedDate": "2020-04-27T16:34:56Z", "message": "Simplify ansible Dockerfile\n\nSigned-off-by: Keith W. Campbell <keithc@ca.ibm.com>"}, "afterCommit": {"oid": "8671b1d3d14905d5046aaa5b37082b3e24daf709", "author": {"user": {"login": "keithc-ca", "name": "Keith W. Campbell"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/8671b1d3d14905d5046aaa5b37082b3e24daf709", "committedDate": "2020-04-27T17:09:23Z", "message": "Simplify ansible Dockerfile\n\nSigned-off-by: Keith W. Campbell <keithc@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxMTU4MjAx", "url": "https://github.com/eclipse-openj9/openj9/pull/9371#pullrequestreview-401158201", "createdAt": "2020-04-27T17:12:55Z", "commit": {"oid": "8671b1d3d14905d5046aaa5b37082b3e24daf709"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNzoxMjo1NVrOGMuYOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNzoxMjo1NVrOGMuYOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk5NTk2MQ==", "bodyText": "Pls use the standard  Copyright (c) 2020, 2020 IBM Corp. and others copyright, used by most of the OpenJ9 files.", "url": "https://github.com/eclipse-openj9/openj9/pull/9371#discussion_r415995961", "createdAt": "2020-04-27T17:12:55Z", "author": {"login": "pshipton"}, "path": "buildenv/ansible/roles/openj9-build-environment/tasks/main.yml", "diffHunk": "@@ -19,40 +19,36 @@\n #\n # SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n ###############################################################################\n+# (c) Copyright IBM Corp. 2020, 2020 All Rights Reserved", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8671b1d3d14905d5046aaa5b37082b3e24daf709"}, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8671b1d3d14905d5046aaa5b37082b3e24daf709", "author": {"user": {"login": "keithc-ca", "name": "Keith W. Campbell"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/8671b1d3d14905d5046aaa5b37082b3e24daf709", "committedDate": "2020-04-27T17:09:23Z", "message": "Simplify ansible Dockerfile\n\nSigned-off-by: Keith W. Campbell <keithc@ca.ibm.com>"}, "afterCommit": {"oid": "b32bafed3186c8ca77341e8b00fe310685d61cc8", "author": {"user": {"login": "keithc-ca", "name": "Keith W. Campbell"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/b32bafed3186c8ca77341e8b00fe310685d61cc8", "committedDate": "2020-04-27T17:17:31Z", "message": "Simplify ansible Dockerfile\n\nSigned-off-by: Keith W. Campbell <keithc@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b32bafed3186c8ca77341e8b00fe310685d61cc8", "author": {"user": {"login": "keithc-ca", "name": "Keith W. Campbell"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/b32bafed3186c8ca77341e8b00fe310685d61cc8", "committedDate": "2020-04-27T17:17:31Z", "message": "Simplify ansible Dockerfile\n\nSigned-off-by: Keith W. Campbell <keithc@ca.ibm.com>"}, "afterCommit": {"oid": "547dbb1b691a8ad1b4a2af1def6ae75493f8bd15", "author": {"user": {"login": "keithc-ca", "name": "Keith W. Campbell"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/547dbb1b691a8ad1b4a2af1def6ae75493f8bd15", "committedDate": "2020-04-27T17:23:28Z", "message": "Simplify ansible Dockerfile\n\nSigned-off-by: Keith W. Campbell <keithc@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxMTg3NTY1", "url": "https://github.com/eclipse-openj9/openj9/pull/9371#pullrequestreview-401187565", "createdAt": "2020-04-27T17:50:29Z", "commit": {"oid": "547dbb1b691a8ad1b4a2af1def6ae75493f8bd15"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNzo1MDoyOVrOGMwDhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNzo1MDoyOVrOGMwDhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAyMzQzMA==", "bodyText": "This seems to download quite a few JDKs. Is the intention that the resulting Dockerfile will be able to build all versions of the JDK? If so does that mean the user is expected to explicitly initialize JAVA_HOME to point to the correct JDK before kicking off the build process?", "url": "https://github.com/eclipse-openj9/openj9/pull/9371#discussion_r416023430", "createdAt": "2020-04-27T17:50:29Z", "author": {"login": "fjeremic"}, "path": "buildenv/docker/mkdocker.sh", "diffHunk": "@@ -0,0 +1,672 @@\n+#!/bin/bash -\n+\n+print_license() {\n+cat <<- EOF\n+# Copyright (c) 2019, 2020 IBM Corp. and others\n+#\n+# This program and the accompanying materials are made available under\n+# the terms of the Eclipse Public License 2.0 which accompanies this\n+# distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+# or the Apache License, Version 2.0 which accompanies this distribution and\n+# is available at https://www.apache.org/licenses/LICENSE-2.0.\n+#\n+# This Source Code may also be made available under the following\n+# Secondary Licenses when the conditions for such availability set\n+# forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+# General Public License, version 2 with the GNU Classpath\n+# Exception [1] and GNU General Public License, version 2 with the\n+# OpenJDK Assembly Exception [2].\n+#\n+# [1] https://www.gnu.org/software/classpath/license.html\n+# [2] http://openjdk.java.net/legal/assembly-exception.html\n+#\n+# SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+EOF\n+}\n+\n+usage() {\n+  echo \"Usage: $0 [OPTION]...\"\n+  echo \"Generate a Dockerfile for building OpenJ9\"\n+  echo \"\"\n+  echo \"Options:\"\n+  echo \"  --help|-h      print this help, then exit\"\n+  echo \"  --arch=...     specify the processor architecture (default: host architecture)\"\n+  echo \"  --build        build the docker image (overrides '--print')\"\n+  echo \"  --cuda         include CUDA header files\"\n+  echo \"  --dist=...     specify the Linux distribution (e.g. centos, ubuntu)\"\n+  echo \"  --print        write the Dockerfile to stdout (default; overrides '--build')\"\n+  echo \"  --tag=...      specify a name for the docker image (may be repeated, default: none)\"\n+  echo \"  --user=...     specify the user name (default: 'jenkins')\"\n+  echo \"  --version=...  specify the distribution version (e.g. 6.9, 16.04)\"\n+  echo \"\"\n+  local arch=\"$(uname -m)\"\n+  echo \"Supported build patterns on this host ($arch):\"\n+if [ $arch = x86_64 ] ; then\n+  echo \"  bash mkdocker.sh --tag=openj9/cent69 --dist=centos --version=6.9 --build\"\n+fi\n+if [ $arch = x86_64 -o $arch = ppc64le ] ; then\n+  echo \"  bash mkdocker.sh --tag=openj9/cent7  --dist=centos --version=7   --build\"\n+fi\n+  echo \"  bash mkdocker.sh --tag=openj9/ub16   --dist=ubuntu --version=16  --build\"\n+  echo \"  bash mkdocker.sh --tag=openj9/ub18   --dist=ubuntu --version=18  --build\"\n+  echo \"  bash mkdocker.sh --tag=openj9/ub20   --dist=ubuntu --version=20  --build\"\n+  exit 1\n+}\n+\n+# Global configuration variables.\n+action=print\n+arch=\n+cuda=no\n+dist=unspecified\n+tags=()\n+user=jenkins\n+version=unspecified\n+\n+# Frequently used commands.\n+wget_O=\"wget --progress=dot:mega -O\"\n+\n+parse_options() {\n+  for arg in \"$@\" ; do\n+    case \"$arg\" in\n+      -h | --help)\n+        usage\n+        ;;\n+      --arch=*)\n+        arch=\"${arg#*=}\"\n+        ;;\n+      --build)\n+        action=build\n+        ;;\n+      --cuda)\n+        cuda=9.0\n+        ;;\n+      --dist=*)\n+        dist=\"${arg#*=}\"\n+        ;;\n+      --print)\n+        action=print\n+        ;;\n+      --tag=*)\n+        tags+=(\"${arg#*=}\")\n+        ;;\n+      --user=*)\n+        user=\"${arg#*=}\"\n+        ;;\n+      --version=*)\n+        version=\"${arg#*=}\"\n+        ;;\n+      *) # bad option\n+        echo \"Unsupported option: '$arg'\" >&2\n+        usage\n+        ;;\n+    esac\n+  done\n+}\n+\n+validate_options() {\n+  if [ \"x$arch\" = x ] ; then\n+    arch=\"$(uname -m)\"\n+  fi\n+\n+  case \"$arch\" in\n+    ppc64le | s390x | x86_64)\n+      ;;\n+    *)\n+      echo \"Unsupported architecture: '$arch'\" >&2\n+      exit 1\n+      ;;\n+  esac\n+\n+  # Validate the distribution and version.\n+  case \"$dist\" in\n+    centos)\n+      if [ $arch = s390x ] ; then\n+        echo \"CentOS is not supported on $arch\" >&2\n+        exit 1\n+      fi\n+      case $version in\n+        6.9)\n+          if [ $arch = ppc64le ] ; then\n+            echo \"CentOS version 6.9 is not supported on $arch\" >&2\n+            exit 1\n+          fi\n+          ;;\n+        7)\n+          ;;\n+        unspecified)\n+          echo \"Unspecified CentOS version: use '--version' option\" >&2\n+          exit 1\n+          ;;\n+        *)\n+          echo \"Unsupported CentOS version: '$version'\" >&2\n+          exit 1\n+          ;;\n+      esac\n+      ;;\n+    ubuntu)\n+      case $version in\n+        16 | 18 | 20)\n+          version=$version.04\n+          ;;\n+        16.04 | 18.04 | 20.04)\n+          ;;\n+        unspecified)\n+          echo \"Unspecified Ubuntu version: use '--version' option\" >&2\n+          exit 1\n+          ;;\n+        *)\n+          echo \"Unsupported Ubuntu version: '$version'\" >&2\n+          exit 1\n+          ;;\n+      esac\n+      ;;\n+    unspecified)\n+      echo \"Unspecified distribution: use '--dist' option\" >&2\n+      exit 1\n+      ;;\n+    *)\n+      echo \"Unsupported distribution: '$dist'\" >&2\n+      exit 1\n+      ;;\n+  esac\n+\n+  # If CUDA is requested, validate the architecture.\n+  if [ $cuda != no ] ; then\n+    case \"$arch\" in\n+      ppc64le | x86_64)\n+        ;;\n+      *)\n+        echo \"CUDA is not supported on architecture: '$arch'\" >&2\n+        exit 1\n+        ;;\n+    esac\n+  fi\n+}\n+\n+build_cmd() {\n+  local cmd=build\n+  local file=$1\n+  for tag in ${tags[@]} ; do\n+    cmd=\"$cmd --tag $tag\"\n+  done\n+  echo $cmd --file $file .\n+}\n+\n+preamble() {\n+  echo \"\"\n+  echo \"# Generated by: mkdocker.sh $command_line\"\n+  echo \"\"\n+  echo \"# To use this docker file:\"\n+  echo \"# First, copy your public ssh key into authorized_keys.\"\n+  echo \"# Then, in the directory containing the Dockerfile, authorized_keys\"\n+  echo \"# file, and known_hosts file, run:\"\n+  echo \"#   docker $(build_cmd Dockerfile)\"\n+  echo \"#\"\n+if [ ${#tags[@]} -lt 2 ] ; then\n+  echo \"# To start a container based on the resulting image, run this command:\"\n+else\n+  echo \"# To start a container based on the resulting image, run one of these commands:\"\n+fi\n+if [ ${#tags[@]} -eq 0 ] ; then\n+  echo \"#   docker run -it <image>\"\n+else\n+for tag in ${tags[@]} ; do\n+  echo \"#   docker run -it $tag\"\n+done\n+fi\n+  echo \"\"\n+if [ $cuda != no ] ; then\n+  echo \"FROM nvidia/cuda:${cuda}-devel-ubuntu16.04 AS cuda-dev\"\n+  echo \"\"\n+fi\n+  echo \"FROM $dist:$version\"\n+}\n+\n+install_centos_packages() {\n+  echo \"RUN yum -y update \\\\\"\n+if [ $version = 6.9 ] ; then\n+  echo \" && yum -y install https://\\$(rpm -E '%{?centos:centos}%{!?centos:rhel}%{rhel}').iuscommunity.org/ius-release.rpm \\\\\"\n+fi\n+  echo \" && yum -y install \\\\\"\n+  echo \"    alsa-lib-devel \\\\\"\n+if [ $arch = ppc64le ] ; then\n+  echo \"    automake \\\\\" # required to update make\n+fi\n+  echo \"    bind-utils \\\\\"\n+  echo \"    bison \\\\\"\n+  echo \"    bzip2 \\\\\"\n+  echo \"    ca-certificates \\\\\"\n+  echo \"    cpio \\\\\"\n+  echo \"    cups-devel \\\\\"\n+  echo \"    curl-devel \\\\\" # required by git\n+  echo \"    elfutils-libelf-devel \\\\\"\n+  echo \"    expat-devel \\\\\" # required by git and the xml parser\n+  echo \"    file-devel \\\\\"\n+  echo \"    file-libs \\\\\"\n+  echo \"    flex \\\\\"\n+  echo \"    fontconfig \\\\\"\n+  echo \"    fontconfig-devel \\\\\"\n+  echo \"    freetype-devel \\\\\"\n+  echo \"    gettext \\\\\"\n+  echo \"    gettext-devel \\\\\" # required by git\n+  echo \"    glibc \\\\\"\n+  echo \"    glibc-common \\\\\"\n+  echo \"    glibc-devel \\\\\"\n+  echo \"    gmp-devel \\\\\"\n+  echo \"    lbzip2 \\\\\"\n+  echo \"    libdwarf \\\\\"\n+  echo \"    libdwarf-devel \\\\\"\n+  echo \"    libffi-devel \\\\\"\n+  echo \"    libstdc++-static \\\\\"\n+  echo \"    libX11-devel \\\\\"\n+  echo \"    libXext-devel \\\\\"\n+  echo \"    libXi-devel \\\\\"\n+  echo \"    libXrandr-devel \\\\\"\n+  echo \"    libXrender-devel \\\\\"\n+  echo \"    libXt-devel \\\\\"\n+  echo \"    libXtst-devel \\\\\"\n+  echo \"    make \\\\\"\n+  echo \"    mesa-libGL-devel \\\\\"\n+  echo \"    mpfr-devel \\\\\"\n+  echo \"    ntp \\\\\"\n+  echo \"    numactl-devel \\\\\"\n+  echo \"    openssh-clients \\\\\"\n+  echo \"    openssh-server \\\\\"\n+  echo \"    openssl-devel \\\\\" # required by git, etc.\n+  echo \"    perl-CPAN \\\\\"\n+  echo \"    perl-DBI \\\\\"\n+  echo \"    perl-devel \\\\\"\n+  echo \"    perl-ExtUtils-MakeMaker \\\\\" # required by git\n+  echo \"    perl-GD \\\\\"\n+  echo \"    perl-libwww-perl \\\\\"\n+  echo \"    perl-Time-HiRes \\\\\"\n+if [ $arch = ppc64le ] ; then\n+  echo \"    texinfo \\\\\" # required to update make\n+fi\n+  echo \"    unzip \\\\\"\n+  echo \"    vim \\\\\"\n+  echo \"    wget \\\\\"\n+  echo \"    xorg-x11-server-Xvfb \\\\\"\n+  echo \"    xz \\\\\"\n+  echo \"    zip \\\\\"\n+  echo \"    zlib-devel \\\\\" # required by git, python\n+  echo \" && yum clean all\"\n+  echo \"\"\n+  local autoconf_version=2.69\n+  echo \"# Install autoconf.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O autoconf.tar.gz https://fossies.org/linux/misc/autoconf-$autoconf_version.tar.gz \\\\\"\n+  echo \" && tar -xzf autoconf.tar.gz \\\\\"\n+  echo \" && cd autoconf-$autoconf_version \\\\\"\n+  echo \" && ./configure --build=\\$(rpm --eval %{_host}) \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf autoconf.tar.gz autoconf-$autoconf_version\"\n+  echo \"\"\n+  echo \"# Install gcc-7.5.\"\n+  echo \"RUN cd /usr/local \\\\\"\n+  echo \" && $wget_O gcc-7.tar.xz 'https://ci.adoptopenjdk.net/userContent/gcc/gcc750+ccache.$arch.tar.xz' \\\\\"\n+  echo \" && tar -xJf gcc-7.tar.xz --strip-components=1 \\\\\"\n+  echo \" && ln -sf ../local/bin/gcc-7.5 /usr/bin/gcc \\\\\"\n+  echo \" && ln -sf ../local/bin/g++-7.5 /usr/bin/g++ \\\\\"\n+  echo \" && ln -sf gcc /usr/bin/cc \\\\\"\n+  echo \" && ln -sf g++ /usr/bin/c++ \\\\\"\n+  echo \" && rm -f gcc-7.tar.xz\"\n+  echo \"\"\n+  local git_version=2.5.3\n+  echo \"# Install git.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O git.tar.gz https://www.kernel.org/pub/software/scm/git/git-$git_version.tar.gz \\\\\"\n+  echo \" && tar -xzf git.tar.gz \\\\\"\n+  echo \" && cd git-$git_version \\\\\"\n+  echo \" && make prefix=/usr/local all \\\\\"\n+  echo \" && make prefix=/usr/local install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf git.tar.gz git-$git_version\"\n+if [ $arch = ppc64le ] ; then\n+  # make 4.2 requires automake 1.15\n+  echo \"\"\n+  local automake_version=1.15\n+  echo \"# Update automake.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O automake.tar.gz http://ftp.gnu.org/gnu/automake/automake-$automake_version.tar.gz \\\\\"\n+  echo \" && tar -xzf automake.tar.gz \\\\\"\n+  echo \" && cd automake-$automake_version \\\\\"\n+  echo \" && ./configure \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf automake.tar.gz automake-$automake_version\"\n+  echo \"\"\n+  local make_version=4.2\n+  echo \"# Update make.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O make.tar.gz https://github.com/mirror/make/archive/$make_version.tar.gz \\\\\"\n+  echo \" && tar -xzf make.tar.gz \\\\\"\n+  echo \" && cd make-$make_version \\\\\"\n+  echo \" && ACLOCAL_PATH=/usr/share/aclocal autoreconf -i \\\\\"\n+  echo \" && ./configure \\\\\"\n+  echo \" && make update \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && ln -s make /usr/local/bin/gmake \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf make.tar.gz make-$make_version\"\n+fi\n+if [ $arch = x86_64 ] ; then\n+  echo \"\"\n+  local nasm_version=2.13.03\n+  echo \"# Install nasm.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O nasm.tar.gz https://www.nasm.us/pub/nasm/releasebuilds/$nasm_version/nasm-$nasm_version.tar.gz \\\\\"\n+  echo \" && tar -xzf nasm.tar.gz \\\\\"\n+  echo \" && cd nasm-$nasm_version \\\\\"\n+  echo \" && ./configure -prefix=/usr/local \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf nasm.tar.gz nasm-$nasm_version\"\n+fi\n+}\n+\n+install_ubuntu_packages() {\n+  echo \"RUN apt-get update \\\\\"\n+  echo \" && apt-get install -qq -y --no-install-recommends \\\\\"\n+  echo \"    software-properties-common \\\\\"\n+if [ $version = 16.04 ] ; then\n+  echo \"    python-software-properties \\\\\"\n+fi\n+  echo \" && add-apt-repository ppa:ubuntu-toolchain-r/test \\\\\"\n+  echo \" && apt-get update \\\\\"\n+  echo \" && apt-get install -qq -y --no-install-recommends \\\\\"\n+  echo \"    ant \\\\\"\n+  echo \"    ant-contrib \\\\\"\n+  echo \"    autoconf \\\\\"\n+  echo \"    build-essential \\\\\"\n+  echo \"    ca-certificates \\\\\"\n+  echo \"    cmake \\\\\"\n+  echo \"    cpio \\\\\"\n+  echo \"    curl \\\\\"\n+  echo \"    file \\\\\"\n+if [ $arch != s390x ] ; then\n+  echo \"    g++-7 \\\\\"\n+  echo \"    gcc-7 \\\\\"\n+fi\n+  echo \"    gdb \\\\\"\n+  echo \"    git \\\\\"\n+  echo \"    libasound2-dev \\\\\"\n+  echo \"    libcups2-dev \\\\\"\n+  echo \"    libdwarf-dev \\\\\"\n+  echo \"    libelf-dev \\\\\"\n+  echo \"    libexpat1-dev \\\\\" # required by the xml parser\n+  echo \"    libffi-dev \\\\\"\n+  echo \"    libfontconfig \\\\\"\n+  echo \"    libfontconfig1-dev \\\\\"\n+  echo \"    libfreetype6-dev \\\\\"\n+if [ $arch != s390x ] ; then\n+  echo \"    libnuma-dev \\\\\"\n+fi\n+if [ $arch = s390x ] ; then\n+  echo \"    libmpc3 \\\\\"\n+fi\n+  echo \"    libssl-dev \\\\\"\n+  echo \"    libx11-dev \\\\\"\n+  echo \"    libxext-dev \\\\\"\n+  echo \"    libxrandr-dev \\\\\"\n+  echo \"    libxrender-dev \\\\\"\n+  echo \"    libxt-dev \\\\\"\n+  echo \"    libxtst-dev \\\\\"\n+  echo \"    make \\\\\"\n+if [ $arch = x86_64 ] ; then\n+  echo \"    nasm \\\\\"\n+fi\n+  echo \"    openssh-client \\\\\"\n+  echo \"    openssh-server \\\\\"\n+  echo \"    perl \\\\\"\n+  echo \"    pkg-config \\\\\"\n+if [ $version = 16.04 ] ; then\n+  echo \"    realpath \\\\\"\n+fi\n+  echo \"    ssh \\\\\"\n+  echo \"    unzip \\\\\"\n+  echo \"    wget \\\\\"\n+  echo \"    xvfb \\\\\"\n+  echo \"    zip \\\\\"\n+  echo \"    zlib1g-dev \\\\\"\n+  echo \" && rm -rf /var/lib/apt/lists/*\"\n+}\n+\n+install_packages() {\n+  echo \"\"\n+  echo \"# Install required OS tools.\"\n+  echo \"\"\n+if [ $dist = centos ] ; then\n+  install_centos_packages\n+else\n+  install_ubuntu_packages\n+fi\n+}\n+\n+install_compilers() {\n+if [ $arch = s390x ] ; then\n+  echo \"\"\n+  local gcc_version=7.5\n+  echo \"# Install gcc.\"\n+  echo \"RUN cd /usr/local \\\\\"\n+  echo \" && $wget_O gcc.tar.xz 'https://ci.adoptopenjdk.net/userContent/gcc/gcc750+ccache.$arch.tar.xz' \\\\\"\n+  echo \" && tar -xJf gcc.tar.xz --strip-components=1 \\\\\"\n+  echo \" && rm -f gcc.tar.xz\"\n+  echo \"\"\n+  echo \"# Create various symbolic links.\"\n+  echo \"RUN ln -s lib/$arch-linux-gnu /usr/lib64 \\\\\"\n+if [ $dist:$version = ubuntu:18.04 ] ; then\n+  # On s390x perl needs version 4 of mpfr, but we only have version 6.\n+  echo \" && ln -s libmpfr.so.6 /usr/lib64/libmpfr.so.4 \\\\\"\n+fi\n+  # /usr/local/include/c++ is a directory that already exists so we create these symbolic links in two steps.\n+  echo \" && ( cd /usr/local/include && for f in \\$(ls /usr/include/s390x-linux-gnu/c++) ; do test -e \\$f || ln -s /usr/include/s390x-linux-gnu/c++/\\$f . ; done ) \\\\\"\n+  echo \" && ln -s \\$(ls -d /usr/include/s390x-linux-gnu/* | grep -v '/c++\\$') /usr/local/include \\\\\"\n+  echo \" && ln -sf ../local/bin/g++-$gcc_version /usr/bin/g++-7 \\\\\"\n+  echo \" && ln -sf ../local/bin/gcc-$gcc_version /usr/bin/gcc-7\"\n+fi\n+if [ $dist != centos ] ; then\n+  echo \"\"\n+  echo \"ENV CC=gcc-7 CXX=g++-7\"\n+fi\n+}\n+\n+install_cmake() {\n+if [ $dist == centos ] ; then\n+  echo \"\"\n+  local cmake_version=3.11\n+  local cmake_name=cmake-$cmake_version.4\n+  echo \"# Install cmake.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O cmake.tar.gz https://cmake.org/files/v$cmake_version/$cmake_name.tar.gz \\\\\"\n+  echo \" && tar -xzf cmake.tar.gz \\\\\"\n+  echo \" && cd $cmake_name \\\\\"\n+  echo \" && export LDFLAGS='-static-libstdc++' \\\\\"\n+  echo \" && ./configure \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf cmake.tar.gz $cmake_name\"\n+fi\n+}\n+\n+prepare_user() {\n+  # Ensure authorized_keys exists.\n+  test -f authorized_keys || touch authorized_keys\n+  # Ensure github.com is a known host.\n+  ( test -f known_hosts && grep -q '^github.com ' known_hosts ) \\\n+    || ssh-keyscan github.com >> known_hosts\n+}\n+\n+create_user() {\n+  echo \"\"\n+  echo \"# Add user home and copy authorized_keys and known_hosts.\"\n+  echo \"RUN useradd -ms /bin/bash $user \\\\\"\n+  echo \" && mkdir /home/$user/.ssh \\\\\"\n+  echo \" && chmod 700 /home/$user/.ssh\"\n+  echo \"COPY authorized_keys known_hosts /home/$user/.ssh/\"\n+  echo \"RUN chown -R $user:$user /home/$user \\\\\"\n+  echo \" && chmod 600 /home/$user/.ssh/authorized_keys /home/$user/.ssh/known_hosts\"\n+}\n+\n+install_freemarker() {\n+  echo \"\"\n+  local freemarker_version=2.3.8\n+  echo \"# Download and extract freemarker.jar to /root/freemarker.jar.\"\n+  echo \"RUN mkdir -p /root \\\\\"\n+  echo \" && cd /root \\\\\"\n+  echo \" && $wget_O freemarker.tar.gz https://sourceforge.net/projects/freemarker/files/freemarker/$freemarker_version/freemarker-$freemarker_version.tar.gz/download \\\\\"\n+  echo \" && tar -xzf freemarker.tar.gz freemarker-$freemarker_version/lib/freemarker.jar --strip=2 \\\\\"\n+  echo \" && rm -f freemarker.tar.gz\"\n+}\n+\n+bootjdk_dirs() {\n+  for version in $@ ; do\n+    if [ $version = 8 ] ; then\n+      echo /usr/lib/jvm/adoptojdk-java-80\n+    else\n+      echo /usr/lib/jvm/adoptojdk-java-$version\n+    fi\n+  done\n+}\n+\n+bootjdk_url() {\n+  local version=$1\n+  if [ $arch = x86_64 ] ; then\n+    echo https://api.adoptopenjdk.net/v3/binary/latest/$version/ga/linux/x64/jdk/openj9/normal/adoptopenjdk\n+  else\n+    echo https://api.adoptopenjdk.net/v3/binary/latest/$version/ga/linux/$arch/jdk/openj9/normal/adoptopenjdk\n+  fi\n+}\n+\n+install_bootjdks() {\n+  local versions=\"8 11 13 14\"\n+  echo \"\"\n+  echo \"# Download and install boot JDKs from AdoptOpenJDK.\"\n+  echo \"RUN cd /tmp \\\\\"\n+for version in $versions ; do\n+  echo \" && $wget_O jdk$version.tar.gz $(bootjdk_url $version) \\\\\"\n+done\n+  echo \" && mkdir -p\" $(bootjdk_dirs $versions) \"\\\\\"\n+for version in $versions ; do\n+  echo \" && tar -xzf jdk$version.tar.gz --directory=$(bootjdk_dirs $version)/ --strip=1 \\\\\"\n+done\n+  echo \" && rm -f jdk*.tar.gz\"\n+}\n+\n+install_cuda() {\n+  echo \"\"\n+  echo \"# Copy header files necessary to build a VM with CUDA support.\"\n+  echo \"RUN mkdir -p /usr/local/cuda-${cuda}/nvvm\"\n+  echo \"COPY --from=cuda-dev /usr/local/cuda-${cuda}/include      /usr/local/cuda-${cuda}/include\"\n+  echo \"COPY --from=cuda-dev /usr/local/cuda-${cuda}/nvvm/include /usr/local/cuda-${cuda}/nvvm/include\"\n+  echo \"ENV CUDA_HOME=/usr/local/cuda-${cuda}\"\n+}\n+\n+install_python() {\n+  local python_version=3.7.3\n+  echo \"\"\n+  echo \"# Install python.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O python.tar.xz https://www.python.org/ftp/python/$python_version/Python-$python_version.tar.xz \\\\\"\n+  echo \" && tar -xJf python.tar.xz \\\\\"\n+  echo \" && cd Python-$python_version \\\\\"\n+  echo \" && ./configure --prefix=/usr/local \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf python.tar.xz Python-$python_version\"\n+}\n+\n+adjust_ldconfig() {\n+  echo \"\"\n+  echo \"# Run ldconfig to discover newly installed shared libraries.\"\n+  echo \"RUN for dir in lib lib64 ; do echo /usr/local/$dir ; done > /etc/ld.so.conf.d/usr-local.conf \\\\\"\n+  echo \" && ldconfig\"\n+}\n+\n+# called as: add_git_remote remote url\n+add_git_remote() {\n+  echo \" && git remote add ${1} ${2} \\\\\"\n+  # Like-named (and conflicting) tags exist in multiple repositories: don't fetch any tags.\n+  echo \" && git config remote.${1}.tagopt --no-tags \\\\\"\n+}\n+\n+create_git_cache() {\n+  # The jdk14 remote is fetched first because that repository was subjected to\n+  # 'git gc --aggressive --prune=all' before it was first published making it much\n+  # smaller than the other jdk repositories. There is a large degree of overlap\n+  # among the jdk repositories so a relatively small number of commits must be\n+  # fetched from the others.\n+  echo \"\"\n+  echo \"# Setup a reference repository cache for faster clones in containers.\"\n+  echo \"RUN mkdir /home/$user/git_cache \\\\\"\n+  echo \" && cd /home/$user/git_cache \\\\\"\n+  echo \" && git init --bare \\\\\"\n+  add_git_remote jdk8    https://github.com/ibmruntimes/openj9-openjdk-jdk8.git\n+  add_git_remote jdk11   https://github.com/ibmruntimes/openj9-openjdk-jdk11.git\n+  add_git_remote jdk14   https://github.com/ibmruntimes/openj9-openjdk-jdk14.git\n+  add_git_remote jdknext https://github.com/ibmruntimes/openj9-openjdk-jdk.git\n+  add_git_remote omr     https://github.com/eclipse/openj9-omr.git\n+  add_git_remote openj9  https://github.com/eclipse/openj9.git\n+  echo \" && echo Fetching repository cache... \\\\\"\n+  echo \" && git fetch jdk14 \\\\\"\n+  echo \" && git fetch --all \\\\\"\n+  echo \" && echo Shrinking repository cache... \\\\\"\n+  echo \" && git gc --aggressive --prune=all\"\n+}\n+\n+configure_ssh() {\n+  echo \"\"\n+  echo \"# Configure sshd.\"\n+  echo \"RUN mkdir /var/run/sshd \\\\\"\n+  echo \" && sed -i -e 's|#PermitRootLogin|PermitRootLogin|' \\\\\"\n+  echo \"           -e 's|#RSAAuthentication.*|RSAAuthentication yes|' \\\\\"\n+  echo \"           -e 's|#PubkeyAuthentication.*|PubkeyAuthentication yes|' /etc/ssh/sshd_config\"\n+  echo \"\"\n+  echo \"# SSH login fix so user is not kicked off after login.\"\n+  echo \"RUN sed -i -e 's|session\\s*required\\s*pam_loginuid.so|session optional pam_loginuid.so|' /etc/pam.d/sshd\"\n+  echo \"\"\n+  echo \"# Expose SSH port.\"\n+  echo \"EXPOSE 22\"\n+}\n+\n+print_dockerfile() {\n+  print_license\n+  preamble\n+  install_packages\n+  create_user\n+if [ $cuda != no ] ; then\n+  install_cuda\n+fi\n+  install_freemarker\n+\n+  install_compilers\n+\n+  install_cmake\n+  install_python\n+\n+  adjust_ldconfig\n+  configure_ssh\n+\n+  install_bootjdks", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "547dbb1b691a8ad1b4a2af1def6ae75493f8bd15"}, "originalPosition": 656}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "547dbb1b691a8ad1b4a2af1def6ae75493f8bd15", "author": {"user": {"login": "keithc-ca", "name": "Keith W. Campbell"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/547dbb1b691a8ad1b4a2af1def6ae75493f8bd15", "committedDate": "2020-04-27T17:23:28Z", "message": "Simplify ansible Dockerfile\n\nSigned-off-by: Keith W. Campbell <keithc@ca.ibm.com>"}, "afterCommit": {"oid": "f2ff4987ca96ad80d987b920b8bb29f43c294e63", "author": {"user": {"login": "keithc-ca", "name": "Keith W. Campbell"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/f2ff4987ca96ad80d987b920b8bb29f43c294e63", "committedDate": "2020-04-27T18:16:04Z", "message": "Simplify ansible Dockerfile\n\n[ci skip]\n\nSigned-off-by: Keith W. Campbell <keithc@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxMjEyMDg4", "url": "https://github.com/eclipse-openj9/openj9/pull/9371#pullrequestreview-401212088", "createdAt": "2020-04-27T18:21:35Z", "commit": {"oid": "f2ff4987ca96ad80d987b920b8bb29f43c294e63"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f2ff4987ca96ad80d987b920b8bb29f43c294e63", "author": {"user": {"login": "keithc-ca", "name": "Keith W. Campbell"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/f2ff4987ca96ad80d987b920b8bb29f43c294e63", "committedDate": "2020-04-27T18:16:04Z", "message": "Simplify ansible Dockerfile\n\n[ci skip]\n\nSigned-off-by: Keith W. Campbell <keithc@ca.ibm.com>"}, "afterCommit": {"oid": "cd8cf76d87ad741dc6f09408196fb89a238d9544", "author": {"user": {"login": "keithc-ca", "name": "Keith W. Campbell"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/cd8cf76d87ad741dc6f09408196fb89a238d9544", "committedDate": "2020-04-28T01:56:10Z", "message": "Simplify ansible Dockerfile\n\n[ci skip]\n\nSigned-off-by: Keith W. Campbell <keithc@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxNDY4ODYy", "url": "https://github.com/eclipse-openj9/openj9/pull/9371#pullrequestreview-401468862", "createdAt": "2020-04-28T03:14:45Z", "commit": {"oid": "cd8cf76d87ad741dc6f09408196fb89a238d9544"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwMzoxNDo0NVrOGNApRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwMzoxNDo0NVrOGNApRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI5NTIzOQ==", "bodyText": "I think something is wrong here. The image runs make 3.82 and there is no /usr/local/bin/gmake file.", "url": "https://github.com/eclipse-openj9/openj9/pull/9371#discussion_r416295239", "createdAt": "2020-04-28T03:14:45Z", "author": {"login": "pshipton"}, "path": "buildenv/docker/mkdocker.sh", "diffHunk": "@@ -0,0 +1,684 @@\n+#!/bin/bash -\n+\n+print_license() {\n+cat <<- EOF\n+# Copyright (c) 2019, 2020 IBM Corp. and others\n+#\n+# This program and the accompanying materials are made available under\n+# the terms of the Eclipse Public License 2.0 which accompanies this\n+# distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+# or the Apache License, Version 2.0 which accompanies this distribution and\n+# is available at https://www.apache.org/licenses/LICENSE-2.0.\n+#\n+# This Source Code may also be made available under the following\n+# Secondary Licenses when the conditions for such availability set\n+# forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+# General Public License, version 2 with the GNU Classpath\n+# Exception [1] and GNU General Public License, version 2 with the\n+# OpenJDK Assembly Exception [2].\n+#\n+# [1] https://www.gnu.org/software/classpath/license.html\n+# [2] http://openjdk.java.net/legal/assembly-exception.html\n+#\n+# SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+EOF\n+}\n+\n+usage() {\n+  echo \"Usage: $0 [OPTION]...\"\n+  echo \"Generate a Dockerfile for building OpenJ9\"\n+  echo \"\"\n+  echo \"Options:\"\n+  echo \"  --help|-h      print this help, then exit\"\n+  echo \"  --arch=...     specify the processor architecture (default: host architecture)\"\n+  echo \"  --build        build the docker image (overrides '--print')\"\n+  echo \"  --cuda         include CUDA header files\"\n+  echo \"  --dist=...     specify the Linux distribution (e.g. centos, ubuntu)\"\n+  echo \"  --print        write the Dockerfile to stdout (default; overrides '--build')\"\n+  echo \"  --tag=...      specify a name for the docker image (may be repeated, default: none)\"\n+  echo \"  --user=...     specify the user name (default: 'jenkins')\"\n+  echo \"  --version=...  specify the distribution version (e.g. 6.9, 16.04)\"\n+  echo \"\"\n+  local arch=\"$(uname -m)\"\n+  echo \"Supported build patterns on this host ($arch):\"\n+if [ $arch = x86_64 ] ; then\n+  echo \"  bash mkdocker.sh --tag=openj9/cent69 --dist=centos --version=6.9 --build\"\n+fi\n+if [ $arch = x86_64 -o $arch = ppc64le ] ; then\n+  echo \"  bash mkdocker.sh --tag=openj9/cent7  --dist=centos --version=7   --build\"\n+fi\n+  echo \"  bash mkdocker.sh --tag=openj9/ub16   --dist=ubuntu --version=16  --build\"\n+  echo \"  bash mkdocker.sh --tag=openj9/ub18   --dist=ubuntu --version=18  --build\"\n+  echo \"  bash mkdocker.sh --tag=openj9/ub20   --dist=ubuntu --version=20  --build\"\n+  exit 1\n+}\n+\n+# Global configuration variables.\n+action=print\n+arch=\n+cuda=no\n+dist=unspecified\n+tags=()\n+user=jenkins\n+version=unspecified\n+\n+# Frequently used commands.\n+wget_O=\"wget --progress=dot:mega -O\"\n+\n+parse_options() {\n+  for arg in \"$@\" ; do\n+    case \"$arg\" in\n+      -h | --help)\n+        usage\n+        ;;\n+      --arch=*)\n+        arch=\"${arg#*=}\"\n+        ;;\n+      --build)\n+        action=build\n+        ;;\n+      --cuda)\n+        cuda=9.0\n+        ;;\n+      --dist=*)\n+        dist=\"${arg#*=}\"\n+        ;;\n+      --print)\n+        action=print\n+        ;;\n+      --tag=*)\n+        tags+=(\"${arg#*=}\")\n+        ;;\n+      --user=*)\n+        user=\"${arg#*=}\"\n+        ;;\n+      --version=*)\n+        version=\"${arg#*=}\"\n+        ;;\n+      *) # bad option\n+        echo \"Unsupported option: '$arg'\" >&2\n+        usage\n+        ;;\n+    esac\n+  done\n+}\n+\n+validate_options() {\n+  if [ \"x$arch\" = x ] ; then\n+    arch=\"$(uname -m)\"\n+  fi\n+\n+  case \"$arch\" in\n+    ppc64le | s390x | x86_64)\n+      ;;\n+    *)\n+      echo \"Unsupported architecture: '$arch'\" >&2\n+      exit 1\n+      ;;\n+  esac\n+\n+  # Validate the distribution and version.\n+  case \"$dist\" in\n+    centos)\n+      if [ $arch = s390x ] ; then\n+        echo \"CentOS is not supported on $arch\" >&2\n+        exit 1\n+      fi\n+      case $version in\n+        6.9)\n+          if [ $arch = ppc64le ] ; then\n+            echo \"CentOS version 6.9 is not supported on $arch\" >&2\n+            exit 1\n+          fi\n+          ;;\n+        7)\n+          ;;\n+        unspecified)\n+          echo \"Unspecified CentOS version: use '--version' option\" >&2\n+          exit 1\n+          ;;\n+        *)\n+          echo \"Unsupported CentOS version: '$version'\" >&2\n+          exit 1\n+          ;;\n+      esac\n+      ;;\n+    ubuntu)\n+      case $version in\n+        16 | 18 | 20)\n+          version=$version.04\n+          ;;\n+        16.04 | 18.04 | 20.04)\n+          ;;\n+        unspecified)\n+          echo \"Unspecified Ubuntu version: use '--version' option\" >&2\n+          exit 1\n+          ;;\n+        *)\n+          echo \"Unsupported Ubuntu version: '$version'\" >&2\n+          exit 1\n+          ;;\n+      esac\n+      ;;\n+    unspecified)\n+      echo \"Unspecified distribution: use '--dist' option\" >&2\n+      exit 1\n+      ;;\n+    *)\n+      echo \"Unsupported distribution: '$dist'\" >&2\n+      exit 1\n+      ;;\n+  esac\n+\n+  # If CUDA is requested, validate the architecture.\n+  if [ $cuda != no ] ; then\n+    case \"$arch\" in\n+      ppc64le | x86_64)\n+        ;;\n+      *)\n+        echo \"CUDA is not supported on architecture: '$arch'\" >&2\n+        exit 1\n+        ;;\n+    esac\n+  fi\n+}\n+\n+build_cmd() {\n+  local cmd=build\n+  local file=$1\n+  for tag in ${tags[@]} ; do\n+    cmd=\"$cmd --tag $tag\"\n+  done\n+  echo $cmd --file $file .\n+}\n+\n+preamble() {\n+  echo \"\"\n+  echo \"# Generated by: mkdocker.sh $command_line\"\n+  echo \"\"\n+  echo \"# To use this docker file:\"\n+  echo \"# First, copy your public ssh key into authorized_keys.\"\n+  echo \"# Then, in the directory containing the Dockerfile, authorized_keys\"\n+  echo \"# file, and known_hosts file, run:\"\n+  echo \"#   docker $(build_cmd Dockerfile)\"\n+  echo \"#\"\n+if [ ${#tags[@]} -lt 2 ] ; then\n+  echo \"# To start a container based on the resulting image, run this command:\"\n+else\n+  echo \"# To start a container based on the resulting image, run one of these commands:\"\n+fi\n+if [ ${#tags[@]} -eq 0 ] ; then\n+  echo \"#   docker run -it <image>\"\n+else\n+for tag in ${tags[@]} ; do\n+  echo \"#   docker run -it $tag\"\n+done\n+fi\n+  echo \"\"\n+if [ $cuda != no ] ; then\n+  echo \"FROM nvidia/cuda:${cuda}-devel-ubuntu16.04 AS cuda-dev\"\n+  echo \"\"\n+fi\n+  echo \"FROM $dist:$version\"\n+}\n+\n+install_centos_packages() {\n+  echo \"RUN yum -y update \\\\\"\n+if [ $version = 6.9 ] ; then\n+  echo \" && yum -y install https://\\$(rpm -E '%{?centos:centos}%{!?centos:rhel}%{rhel}').iuscommunity.org/ius-release.rpm \\\\\"\n+fi\n+  echo \" && yum -y install \\\\\"\n+  echo \"    alsa-lib-devel \\\\\"\n+if [ $arch = ppc64le ] ; then\n+  echo \"    automake \\\\\" # required to update make\n+fi\n+  echo \"    bind-utils \\\\\"\n+  echo \"    bison \\\\\"\n+  echo \"    bzip2 \\\\\"\n+  echo \"    ca-certificates \\\\\"\n+  echo \"    cpio \\\\\"\n+  echo \"    cups-devel \\\\\"\n+  echo \"    curl-devel \\\\\" # required by git\n+  echo \"    elfutils-libelf-devel \\\\\"\n+  echo \"    expat-devel \\\\\" # required by git and the xml parser\n+  echo \"    file-devel \\\\\"\n+  echo \"    file-libs \\\\\"\n+  echo \"    flex \\\\\"\n+  echo \"    fontconfig \\\\\"\n+  echo \"    fontconfig-devel \\\\\"\n+  echo \"    freetype-devel \\\\\"\n+  echo \"    gettext \\\\\"\n+  echo \"    gettext-devel \\\\\" # required by git\n+  echo \"    glibc \\\\\"\n+  echo \"    glibc-common \\\\\"\n+  echo \"    glibc-devel \\\\\"\n+  echo \"    gmp-devel \\\\\"\n+  echo \"    lbzip2 \\\\\"\n+  echo \"    libdwarf \\\\\"\n+  echo \"    libdwarf-devel \\\\\"\n+  echo \"    libffi-devel \\\\\"\n+  echo \"    libstdc++-static \\\\\"\n+  echo \"    libX11-devel \\\\\"\n+  echo \"    libXext-devel \\\\\"\n+  echo \"    libXi-devel \\\\\"\n+  echo \"    libXrandr-devel \\\\\"\n+  echo \"    libXrender-devel \\\\\"\n+  echo \"    libXt-devel \\\\\"\n+  echo \"    libXtst-devel \\\\\"\n+  echo \"    make \\\\\"\n+  echo \"    mesa-libGL-devel \\\\\"\n+  echo \"    mpfr-devel \\\\\"\n+  echo \"    ntp \\\\\"\n+  echo \"    numactl-devel \\\\\"\n+  echo \"    openssh-clients \\\\\"\n+  echo \"    openssh-server \\\\\"\n+  echo \"    openssl-devel \\\\\" # required by git, etc.\n+  echo \"    perl-CPAN \\\\\"\n+  echo \"    perl-DBI \\\\\"\n+  echo \"    perl-devel \\\\\"\n+  echo \"    perl-ExtUtils-MakeMaker \\\\\" # required by git\n+  echo \"    perl-GD \\\\\"\n+  echo \"    perl-libwww-perl \\\\\"\n+  echo \"    perl-Time-HiRes \\\\\"\n+if [ $arch = ppc64le ] ; then\n+  echo \"    texinfo \\\\\" # required to update make\n+fi\n+  echo \"    unzip \\\\\"\n+  echo \"    vim \\\\\"\n+  echo \"    wget \\\\\"\n+  echo \"    xorg-x11-server-Xvfb \\\\\"\n+  echo \"    xz \\\\\"\n+  echo \"    zip \\\\\"\n+  echo \"    zlib-devel \\\\\" # required by git, python\n+  echo \" && yum clean all\"\n+  echo \"\"\n+  local autoconf_version=2.69\n+  echo \"# Install autoconf.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O autoconf.tar.gz https://fossies.org/linux/misc/autoconf-$autoconf_version.tar.gz \\\\\"\n+  echo \" && tar -xzf autoconf.tar.gz \\\\\"\n+  echo \" && cd autoconf-$autoconf_version \\\\\"\n+  echo \" && ./configure --build=\\$(rpm --eval %{_host}) \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf autoconf.tar.gz autoconf-$autoconf_version\"\n+  echo \"\"\n+  echo \"# Install gcc-7.5.\"\n+  echo \"RUN cd /usr/local \\\\\"\n+  echo \" && $wget_O gcc-7.tar.xz 'https://ci.adoptopenjdk.net/userContent/gcc/gcc750+ccache.$arch.tar.xz' \\\\\"\n+  echo \" && tar -xJf gcc-7.tar.xz --strip-components=1 \\\\\"\n+  echo \" && ln -sf ../local/bin/gcc-7.5 /usr/bin/gcc \\\\\"\n+  echo \" && ln -sf ../local/bin/g++-7.5 /usr/bin/g++ \\\\\"\n+  echo \" && ln -sf gcc /usr/bin/cc \\\\\"\n+  echo \" && ln -sf g++ /usr/bin/c++ \\\\\"\n+  echo \" && rm -f gcc-7.tar.xz\"\n+  echo \"\"\n+  local ant_version=1.10.5\n+  echo \"# Install ant.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O ant.zip https://archive.apache.org/dist/ant/binaries/apache-ant-$ant_version-bin.zip \\\\\"\n+  echo \" && unzip -q ant.zip -d /opt \\\\\"\n+  echo \" && ln -s apache-ant-$ant_version /opt/ant \\\\\"\n+  echo \" && ln -s /opt/ant/bin/ant /usr/bin/ant \\\\\"\n+  echo \" && $wget_O ant-contrib.tar.gz https://sourceforge.net/projects/ant-contrib/files/ant-contrib/1.0b3/ant-contrib-1.0b3-bin.tar.gz \\\\\"\n+  echo \" && tar -xzf ant-contrib.tar.gz \\\\\"\n+  echo \" && mv ant-contrib/ant-contrib-1.0b3.jar /opt/ant/lib \\\\\"\n+  echo \" && rm -rf ant-contrib ant.zip ant-contrib.tar.gz\"\n+  echo \"\"\n+  local git_version=2.5.3\n+  echo \"# Install git.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O git.tar.gz https://www.kernel.org/pub/software/scm/git/git-$git_version.tar.gz \\\\\"\n+  echo \" && tar -xzf git.tar.gz \\\\\"\n+  echo \" && cd git-$git_version \\\\\"\n+  echo \" && make prefix=/usr/local all \\\\\"\n+  echo \" && make prefix=/usr/local install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf git.tar.gz git-$git_version\"\n+if [ $arch = ppc64le ] ; then\n+  # make 4.2 requires automake 1.15\n+  echo \"\"\n+  local automake_version=1.15\n+  echo \"# Update automake.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O automake.tar.gz http://ftp.gnu.org/gnu/automake/automake-$automake_version.tar.gz \\\\\"\n+  echo \" && tar -xzf automake.tar.gz \\\\\"\n+  echo \" && cd automake-$automake_version \\\\\"\n+  echo \" && ./configure \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf automake.tar.gz automake-$automake_version\"\n+  echo \"\"\n+  local make_version=4.2\n+  echo \"# Update make.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O make.tar.gz https://github.com/mirror/make/archive/$make_version.tar.gz \\\\\"\n+  echo \" && tar -xzf make.tar.gz \\\\\"\n+  echo \" && cd make-$make_version \\\\\"\n+  echo \" && ACLOCAL_PATH=/usr/share/aclocal autoreconf -i \\\\\"\n+  echo \" && ./configure \\\\\"\n+  echo \" && make update \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && ln -s make /usr/local/bin/gmake \\\\\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd8cf76d87ad741dc6f09408196fb89a238d9544"}, "originalPosition": 365}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxNDY5NTQy", "url": "https://github.com/eclipse-openj9/openj9/pull/9371#pullrequestreview-401469542", "createdAt": "2020-04-28T03:17:14Z", "commit": {"oid": "cd8cf76d87ad741dc6f09408196fb89a238d9544"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwMzoxNzoxNFrOGNAsjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwMzozNTo1MVrOGNBC7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI5NjA3OQ==", "bodyText": "This job takes 2 params, ARCH and OS, and produces a \"build & test\" or a \"test only\" docker image matching the params. This change ignores the OS param and forces the image to be a build & test container matching the OS we build on. The resulting image could be tagged and uploaded incorrectly. We either need to keep supporting test only images by taking the OS param into account or change the build so it only does build & test containers and remove the OS param. The latter would also require an update to the readme.", "url": "https://github.com/eclipse-openj9/openj9/pull/9371#discussion_r416296079", "createdAt": "2020-04-28T03:17:14Z", "author": {"login": "AdamBrousseau"}, "path": "buildenv/jenkins/docker-slaves/jenkinsfile-build-container.groovy", "diffHunk": "@@ -63,17 +63,23 @@ timeout(time: 5, unit: 'HOURS') {\n                 }\n                 stage(\"Build\") {\n                     if(params.ghprbPullId) {\n-                        TAGS = \"-t ${REPOSITORY}:PR${ghprbPullId}\"\n+                        TAGS = \"--tag=${REPOSITORY}:PR${ghprbPullId}\"\n                     } else {\n-                        TAGS = \"-t ${REPOSITORY}:${BUILD_NUMBER} -t ${REPOSITORY}:latest\"\n+                        TAGS = \"--tag=${REPOSITORY}:${BUILD_NUMBER} --tag=${REPOSITORY}:latest\"\n                     }\n-                    dir(\"buildenv/jenkins/docker-slaves/${ARCH}/${OS}\") {\n+                    dir(\"buildenv/docker\") {\n                         sh \"cp ${WORKSPACE}/buildenv/jenkins/authorized_keys ./\"\n-                        sh \"touch ./known_hosts\"\n-                        if(env.KNOWN_HOSTS){\n-                            sh \"ssh-keyscan ${KNOWN_HOSTS} >> ./known_hosts\"\n+                        sh \"touch known_hosts\"\n+                        if(env.KNOWN_HOSTS) {\n+                            sh \"ssh-keyscan ${KNOWN_HOSTS} >> known_hosts\"\n+                        }\n+                        if(${ARCH} == \"ppc64le\") {\n+                            sh \"bash mkdocker.sh --build --dist=centos --version=7 ${TAGS}\"\n+                        } else if(${ARCH} == \"s390x\") {\n+                            sh \"bash mkdocker.sh --build --dist=ubuntu --version=16.04 ${TAGS}\"\n+                        } else if(${ARCH} == \"x86\") {\n+                            sh \"bash mkdocker.sh --build --dist=centos --version=6.9 ${TAGS}\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd8cf76d87ad741dc6f09408196fb89a238d9544"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjMwMTgwNg==", "bodyText": "Does this mean if we want cuda installed we have to run ub16?", "url": "https://github.com/eclipse-openj9/openj9/pull/9371#discussion_r416301806", "createdAt": "2020-04-28T03:35:51Z", "author": {"login": "AdamBrousseau"}, "path": "buildenv/docker/mkdocker.sh", "diffHunk": "@@ -0,0 +1,684 @@\n+#!/bin/bash -\n+\n+print_license() {\n+cat <<- EOF\n+# Copyright (c) 2019, 2020 IBM Corp. and others\n+#\n+# This program and the accompanying materials are made available under\n+# the terms of the Eclipse Public License 2.0 which accompanies this\n+# distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+# or the Apache License, Version 2.0 which accompanies this distribution and\n+# is available at https://www.apache.org/licenses/LICENSE-2.0.\n+#\n+# This Source Code may also be made available under the following\n+# Secondary Licenses when the conditions for such availability set\n+# forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+# General Public License, version 2 with the GNU Classpath\n+# Exception [1] and GNU General Public License, version 2 with the\n+# OpenJDK Assembly Exception [2].\n+#\n+# [1] https://www.gnu.org/software/classpath/license.html\n+# [2] http://openjdk.java.net/legal/assembly-exception.html\n+#\n+# SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+EOF\n+}\n+\n+usage() {\n+  echo \"Usage: $0 [OPTION]...\"\n+  echo \"Generate a Dockerfile for building OpenJ9\"\n+  echo \"\"\n+  echo \"Options:\"\n+  echo \"  --help|-h      print this help, then exit\"\n+  echo \"  --arch=...     specify the processor architecture (default: host architecture)\"\n+  echo \"  --build        build the docker image (overrides '--print')\"\n+  echo \"  --cuda         include CUDA header files\"\n+  echo \"  --dist=...     specify the Linux distribution (e.g. centos, ubuntu)\"\n+  echo \"  --print        write the Dockerfile to stdout (default; overrides '--build')\"\n+  echo \"  --tag=...      specify a name for the docker image (may be repeated, default: none)\"\n+  echo \"  --user=...     specify the user name (default: 'jenkins')\"\n+  echo \"  --version=...  specify the distribution version (e.g. 6.9, 16.04)\"\n+  echo \"\"\n+  local arch=\"$(uname -m)\"\n+  echo \"Supported build patterns on this host ($arch):\"\n+if [ $arch = x86_64 ] ; then\n+  echo \"  bash mkdocker.sh --tag=openj9/cent69 --dist=centos --version=6.9 --build\"\n+fi\n+if [ $arch = x86_64 -o $arch = ppc64le ] ; then\n+  echo \"  bash mkdocker.sh --tag=openj9/cent7  --dist=centos --version=7   --build\"\n+fi\n+  echo \"  bash mkdocker.sh --tag=openj9/ub16   --dist=ubuntu --version=16  --build\"\n+  echo \"  bash mkdocker.sh --tag=openj9/ub18   --dist=ubuntu --version=18  --build\"\n+  echo \"  bash mkdocker.sh --tag=openj9/ub20   --dist=ubuntu --version=20  --build\"\n+  exit 1\n+}\n+\n+# Global configuration variables.\n+action=print\n+arch=\n+cuda=no\n+dist=unspecified\n+tags=()\n+user=jenkins\n+version=unspecified\n+\n+# Frequently used commands.\n+wget_O=\"wget --progress=dot:mega -O\"\n+\n+parse_options() {\n+  for arg in \"$@\" ; do\n+    case \"$arg\" in\n+      -h | --help)\n+        usage\n+        ;;\n+      --arch=*)\n+        arch=\"${arg#*=}\"\n+        ;;\n+      --build)\n+        action=build\n+        ;;\n+      --cuda)\n+        cuda=9.0\n+        ;;\n+      --dist=*)\n+        dist=\"${arg#*=}\"\n+        ;;\n+      --print)\n+        action=print\n+        ;;\n+      --tag=*)\n+        tags+=(\"${arg#*=}\")\n+        ;;\n+      --user=*)\n+        user=\"${arg#*=}\"\n+        ;;\n+      --version=*)\n+        version=\"${arg#*=}\"\n+        ;;\n+      *) # bad option\n+        echo \"Unsupported option: '$arg'\" >&2\n+        usage\n+        ;;\n+    esac\n+  done\n+}\n+\n+validate_options() {\n+  if [ \"x$arch\" = x ] ; then\n+    arch=\"$(uname -m)\"\n+  fi\n+\n+  case \"$arch\" in\n+    ppc64le | s390x | x86_64)\n+      ;;\n+    *)\n+      echo \"Unsupported architecture: '$arch'\" >&2\n+      exit 1\n+      ;;\n+  esac\n+\n+  # Validate the distribution and version.\n+  case \"$dist\" in\n+    centos)\n+      if [ $arch = s390x ] ; then\n+        echo \"CentOS is not supported on $arch\" >&2\n+        exit 1\n+      fi\n+      case $version in\n+        6.9)\n+          if [ $arch = ppc64le ] ; then\n+            echo \"CentOS version 6.9 is not supported on $arch\" >&2\n+            exit 1\n+          fi\n+          ;;\n+        7)\n+          ;;\n+        unspecified)\n+          echo \"Unspecified CentOS version: use '--version' option\" >&2\n+          exit 1\n+          ;;\n+        *)\n+          echo \"Unsupported CentOS version: '$version'\" >&2\n+          exit 1\n+          ;;\n+      esac\n+      ;;\n+    ubuntu)\n+      case $version in\n+        16 | 18 | 20)\n+          version=$version.04\n+          ;;\n+        16.04 | 18.04 | 20.04)\n+          ;;\n+        unspecified)\n+          echo \"Unspecified Ubuntu version: use '--version' option\" >&2\n+          exit 1\n+          ;;\n+        *)\n+          echo \"Unsupported Ubuntu version: '$version'\" >&2\n+          exit 1\n+          ;;\n+      esac\n+      ;;\n+    unspecified)\n+      echo \"Unspecified distribution: use '--dist' option\" >&2\n+      exit 1\n+      ;;\n+    *)\n+      echo \"Unsupported distribution: '$dist'\" >&2\n+      exit 1\n+      ;;\n+  esac\n+\n+  # If CUDA is requested, validate the architecture.\n+  if [ $cuda != no ] ; then\n+    case \"$arch\" in\n+      ppc64le | x86_64)\n+        ;;\n+      *)\n+        echo \"CUDA is not supported on architecture: '$arch'\" >&2\n+        exit 1\n+        ;;\n+    esac\n+  fi\n+}\n+\n+build_cmd() {\n+  local cmd=build\n+  local file=$1\n+  for tag in ${tags[@]} ; do\n+    cmd=\"$cmd --tag $tag\"\n+  done\n+  echo $cmd --file $file .\n+}\n+\n+preamble() {\n+  echo \"\"\n+  echo \"# Generated by: mkdocker.sh $command_line\"\n+  echo \"\"\n+  echo \"# To use this docker file:\"\n+  echo \"# First, copy your public ssh key into authorized_keys.\"\n+  echo \"# Then, in the directory containing the Dockerfile, authorized_keys\"\n+  echo \"# file, and known_hosts file, run:\"\n+  echo \"#   docker $(build_cmd Dockerfile)\"\n+  echo \"#\"\n+if [ ${#tags[@]} -lt 2 ] ; then\n+  echo \"# To start a container based on the resulting image, run this command:\"\n+else\n+  echo \"# To start a container based on the resulting image, run one of these commands:\"\n+fi\n+if [ ${#tags[@]} -eq 0 ] ; then\n+  echo \"#   docker run -it <image>\"\n+else\n+for tag in ${tags[@]} ; do\n+  echo \"#   docker run -it $tag\"\n+done\n+fi\n+  echo \"\"\n+if [ $cuda != no ] ; then\n+  echo \"FROM nvidia/cuda:${cuda}-devel-ubuntu16.04 AS cuda-dev\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd8cf76d87ad741dc6f09408196fb89a238d9544"}, "originalPosition": 219}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cd8cf76d87ad741dc6f09408196fb89a238d9544", "author": {"user": {"login": "keithc-ca", "name": "Keith W. Campbell"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/cd8cf76d87ad741dc6f09408196fb89a238d9544", "committedDate": "2020-04-28T01:56:10Z", "message": "Simplify ansible Dockerfile\n\n[ci skip]\n\nSigned-off-by: Keith W. Campbell <keithc@ca.ibm.com>"}, "afterCommit": {"oid": "859a54bfcabc7f8b2a45b4918de379c3156b572f", "author": {"user": {"login": "keithc-ca", "name": "Keith W. Campbell"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/859a54bfcabc7f8b2a45b4918de379c3156b572f", "committedDate": "2020-04-28T14:13:51Z", "message": "Simplify ansible Dockerfile\n\n[ci skip]\n\nSigned-off-by: Keith W. Campbell <keithc@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "859a54bfcabc7f8b2a45b4918de379c3156b572f", "author": {"user": {"login": "keithc-ca", "name": "Keith W. Campbell"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/859a54bfcabc7f8b2a45b4918de379c3156b572f", "committedDate": "2020-04-28T14:13:51Z", "message": "Simplify ansible Dockerfile\n\n[ci skip]\n\nSigned-off-by: Keith W. Campbell <keithc@ca.ibm.com>"}, "afterCommit": {"oid": "63b750503ba7dfc4c622c930c06432dd5a7f747a", "author": {"user": {"login": "keithc-ca", "name": "Keith W. Campbell"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/63b750503ba7dfc4c622c930c06432dd5a7f747a", "committedDate": "2020-04-28T18:31:31Z", "message": "Simplify ansible Dockerfile\n\n[ci skip]\n\nSigned-off-by: Keith W. Campbell <keithc@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "63b750503ba7dfc4c622c930c06432dd5a7f747a", "author": {"user": {"login": "keithc-ca", "name": "Keith W. Campbell"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/63b750503ba7dfc4c622c930c06432dd5a7f747a", "committedDate": "2020-04-28T18:31:31Z", "message": "Simplify ansible Dockerfile\n\n[ci skip]\n\nSigned-off-by: Keith W. Campbell <keithc@ca.ibm.com>"}, "afterCommit": {"oid": "24771d8a3d3bf6d37d10a0ddf97a4d4b6b478c46", "author": {"user": {"login": "keithc-ca", "name": "Keith W. Campbell"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/24771d8a3d3bf6d37d10a0ddf97a4d4b6b478c46", "committedDate": "2020-04-29T01:37:59Z", "message": "Simplify ansible Dockerfile\n\n[ci skip]\n\nSigned-off-by: Keith W. Campbell <keithc@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyMzUyMzcx", "url": "https://github.com/eclipse-openj9/openj9/pull/9371#pullrequestreview-402352371", "createdAt": "2020-04-29T04:04:39Z", "commit": {"oid": "24771d8a3d3bf6d37d10a0ddf97a4d4b6b478c46"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNDowNDozOVrOGNvB1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNDo1MzowOVrOGNvrpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA1NTE5MQ==", "bodyText": "If we're using the jenkins user why are we putting freemarker in /root and not /home/jenkins?", "url": "https://github.com/eclipse-openj9/openj9/pull/9371#discussion_r417055191", "createdAt": "2020-04-29T04:04:39Z", "author": {"login": "AdamBrousseau"}, "path": "buildenv/docker/mkdocker.sh", "diffHunk": "@@ -0,0 +1,697 @@\n+#!/bin/bash -\n+\n+print_license() {\n+cat <<- EOF\n+# Copyright (c) 2019, 2020 IBM Corp. and others\n+#\n+# This program and the accompanying materials are made available under\n+# the terms of the Eclipse Public License 2.0 which accompanies this\n+# distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+# or the Apache License, Version 2.0 which accompanies this distribution and\n+# is available at https://www.apache.org/licenses/LICENSE-2.0.\n+#\n+# This Source Code may also be made available under the following\n+# Secondary Licenses when the conditions for such availability set\n+# forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+# General Public License, version 2 with the GNU Classpath\n+# Exception [1] and GNU General Public License, version 2 with the\n+# OpenJDK Assembly Exception [2].\n+#\n+# [1] https://www.gnu.org/software/classpath/license.html\n+# [2] http://openjdk.java.net/legal/assembly-exception.html\n+#\n+# SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+EOF\n+}\n+\n+usage() {\n+  echo \"Usage: $0 [OPTION]...\"\n+  echo \"Generate a Dockerfile for building OpenJ9\"\n+  echo \"\"\n+  echo \"Options:\"\n+  echo \"  --help|-h      print this help, then exit\"\n+  echo \"  --arch=...     specify the processor architecture (default: host architecture)\"\n+  echo \"  --build        build the docker image (overrides '--print')\"\n+  echo \"  --cuda         include CUDA header files\"\n+  echo \"  --dist=...     specify the Linux distribution (e.g. centos, ubuntu)\"\n+  echo \"  --print        write the Dockerfile to stdout (default; overrides '--build')\"\n+  echo \"  --tag=...      specify a name for the docker image (may be repeated, default: none)\"\n+  echo \"  --user=...     specify the user name (default: 'jenkins')\"\n+  echo \"  --version=...  specify the distribution version (e.g. 6.9, 16.04)\"\n+  echo \"\"\n+  local arch=\"$(uname -m)\"\n+  echo \"Supported build patterns on this host ($arch):\"\n+if [ $arch = x86_64 ] ; then\n+  echo \"  bash mkdocker.sh --tag=openj9/cent69 --dist=centos --version=6.9 --build\"\n+fi\n+if [ $arch = x86_64 -o $arch = ppc64le ] ; then\n+  echo \"  bash mkdocker.sh --tag=openj9/cent7  --dist=centos --version=7   --build\"\n+fi\n+  echo \"  bash mkdocker.sh --tag=openj9/ub16   --dist=ubuntu --version=16  --build\"\n+  echo \"  bash mkdocker.sh --tag=openj9/ub18   --dist=ubuntu --version=18  --build\"\n+  echo \"  bash mkdocker.sh --tag=openj9/ub20   --dist=ubuntu --version=20  --build\"\n+  exit 1\n+}\n+\n+# Global configuration variables.\n+action=print\n+arch=\n+cuda=no\n+dist=unspecified\n+tags=()\n+user=jenkins\n+version=unspecified\n+\n+# Frequently used commands.\n+wget_O=\"wget --progress=dot:mega -O\"\n+\n+parse_options() {\n+  for arg in \"$@\" ; do\n+    case \"$arg\" in\n+      -h | --help)\n+        usage\n+        ;;\n+      --arch=*)\n+        arch=\"${arg#*=}\"\n+        ;;\n+      --build)\n+        action=build\n+        ;;\n+      --cuda)\n+        cuda=9.0\n+        ;;\n+      --dist=*)\n+        dist=\"${arg#*=}\"\n+        ;;\n+      --print)\n+        action=print\n+        ;;\n+      --tag=*)\n+        tags+=(\"${arg#*=}\")\n+        ;;\n+      --user=*)\n+        user=\"${arg#*=}\"\n+        ;;\n+      --version=*)\n+        version=\"${arg#*=}\"\n+        ;;\n+      *) # bad option\n+        echo \"Unsupported option: '$arg'\" >&2\n+        usage\n+        ;;\n+    esac\n+  done\n+}\n+\n+validate_options() {\n+  if [ \"x$arch\" = x ] ; then\n+    arch=\"$(uname -m)\"\n+  fi\n+\n+  case \"$arch\" in\n+    ppc64le | s390x | x86_64)\n+      ;;\n+    *)\n+      echo \"Unsupported architecture: '$arch'\" >&2\n+      exit 1\n+      ;;\n+  esac\n+\n+  # Validate the distribution and version.\n+  case \"$dist\" in\n+    centos)\n+      if [ $arch = s390x ] ; then\n+        echo \"CentOS is not supported on $arch\" >&2\n+        exit 1\n+      fi\n+      case $version in\n+        6.9)\n+          if [ $arch = ppc64le ] ; then\n+            echo \"CentOS version 6.9 is not supported on $arch\" >&2\n+            exit 1\n+          fi\n+          ;;\n+        7)\n+          ;;\n+        unspecified)\n+          echo \"Unspecified CentOS version: use '--version' option\" >&2\n+          exit 1\n+          ;;\n+        *)\n+          echo \"Unsupported CentOS version: '$version'\" >&2\n+          exit 1\n+          ;;\n+      esac\n+      ;;\n+    ubuntu)\n+      case $version in\n+        16 | 18 | 20)\n+          version=$version.04\n+          ;;\n+        16.04 | 18.04 | 20.04)\n+          ;;\n+        unspecified)\n+          echo \"Unspecified Ubuntu version: use '--version' option\" >&2\n+          exit 1\n+          ;;\n+        *)\n+          echo \"Unsupported Ubuntu version: '$version'\" >&2\n+          exit 1\n+          ;;\n+      esac\n+      ;;\n+    unspecified)\n+      echo \"Unspecified distribution: use '--dist' option\" >&2\n+      exit 1\n+      ;;\n+    *)\n+      echo \"Unsupported distribution: '$dist'\" >&2\n+      exit 1\n+      ;;\n+  esac\n+\n+  # If CUDA is requested, validate the architecture.\n+  if [ $cuda != no ] ; then\n+    case \"$arch\" in\n+      ppc64le | x86_64)\n+        ;;\n+      *)\n+        echo \"CUDA is not supported on architecture: '$arch'\" >&2\n+        exit 1\n+        ;;\n+    esac\n+  fi\n+}\n+\n+build_cmd() {\n+  local cmd=build\n+  local file=$1\n+  for tag in ${tags[@]} ; do\n+    cmd=\"$cmd --tag $tag\"\n+  done\n+  echo $cmd --file $file .\n+}\n+\n+preamble() {\n+  echo \"\"\n+  echo \"# Generated by: mkdocker.sh $command_line\"\n+  echo \"\"\n+  echo \"# To use this docker file:\"\n+  echo \"# First, copy your public ssh key into authorized_keys.\"\n+  echo \"# Then, in the directory containing the Dockerfile, authorized_keys\"\n+  echo \"# file, and known_hosts file, run:\"\n+  echo \"#   docker $(build_cmd Dockerfile)\"\n+  echo \"#\"\n+if [ ${#tags[@]} -lt 2 ] ; then\n+  echo \"# To start a container based on the resulting image, run this command:\"\n+else\n+  echo \"# To start a container based on the resulting image, run one of these commands:\"\n+fi\n+if [ ${#tags[@]} -eq 0 ] ; then\n+  echo \"#   docker run -it <image>\"\n+else\n+for tag in ${tags[@]} ; do\n+  echo \"#   docker run -it $tag\"\n+done\n+fi\n+  echo \"\"\n+if [ $cuda != no ] ; then\n+  echo \"FROM nvidia/cuda:${cuda}-devel-ubuntu16.04 AS cuda-dev\"\n+  echo \"\"\n+fi\n+  echo \"FROM $dist:$version\"\n+}\n+\n+install_centos_packages() {\n+  echo \"RUN yum -y update \\\\\"\n+if [ $version = 6.9 ] ; then\n+  echo \" && yum -y install https://\\$(rpm -E '%{?centos:centos}%{!?centos:rhel}%{rhel}').iuscommunity.org/ius-release.rpm \\\\\"\n+fi\n+  echo \" && yum -y install \\\\\"\n+  echo \"    alsa-lib-devel \\\\\"\n+  echo \"    automake \\\\\" # required to update make\n+  echo \"    bind-utils \\\\\"\n+  echo \"    bison \\\\\"\n+  echo \"    bzip2 \\\\\"\n+  echo \"    ca-certificates \\\\\"\n+  echo \"    cpio \\\\\"\n+  echo \"    cups-devel \\\\\"\n+  echo \"    curl-devel \\\\\" # required by git\n+  echo \"    elfutils-libelf-devel \\\\\"\n+  echo \"    expat-devel \\\\\" # required by git and the xml parser\n+  echo \"    file-devel \\\\\"\n+  echo \"    file-libs \\\\\"\n+  echo \"    flex \\\\\"\n+  echo \"    fontconfig \\\\\"\n+  echo \"    fontconfig-devel \\\\\"\n+  echo \"    freetype-devel \\\\\"\n+  echo \"    gettext \\\\\"\n+  echo \"    gettext-devel \\\\\" # required by git\n+  echo \"    glibc \\\\\"\n+  echo \"    glibc-common \\\\\"\n+  echo \"    glibc-devel \\\\\"\n+  echo \"    gmp-devel \\\\\"\n+  echo \"    lbzip2 \\\\\"\n+  echo \"    libdwarf \\\\\"\n+  echo \"    libdwarf-devel \\\\\"\n+  echo \"    libffi-devel \\\\\"\n+  echo \"    libstdc++-static \\\\\"\n+  echo \"    libX11-devel \\\\\"\n+  echo \"    libXext-devel \\\\\"\n+  echo \"    libXi-devel \\\\\"\n+  echo \"    libXrandr-devel \\\\\"\n+  echo \"    libXrender-devel \\\\\"\n+  echo \"    libXt-devel \\\\\"\n+  echo \"    libXtst-devel \\\\\"\n+  echo \"    make \\\\\"\n+  echo \"    mesa-libGL-devel \\\\\"\n+  echo \"    mpfr-devel \\\\\"\n+  echo \"    ntp \\\\\"\n+  echo \"    numactl-devel \\\\\"\n+  echo \"    openssh-clients \\\\\"\n+  echo \"    openssh-server \\\\\"\n+  echo \"    openssl-devel \\\\\" # required by git, etc.\n+  echo \"    perl-CPAN \\\\\"\n+  echo \"    perl-DBI \\\\\"\n+  echo \"    perl-devel \\\\\"\n+  echo \"    perl-ExtUtils-MakeMaker \\\\\" # required by git\n+  echo \"    perl-GD \\\\\"\n+  echo \"    perl-libwww-perl \\\\\"\n+  echo \"    perl-Time-HiRes \\\\\"\n+  echo \"    texinfo \\\\\" # required to update make\n+  echo \"    unzip \\\\\"\n+  echo \"    vim \\\\\"\n+  echo \"    wget \\\\\"\n+  echo \"    xorg-x11-server-Xvfb \\\\\"\n+  echo \"    xz \\\\\"\n+  echo \"    zip \\\\\"\n+  echo \"    zlib-devel \\\\\" # required by git, python\n+  echo \" && yum clean all\"\n+  echo \"\"\n+  local autoconf_version=2.69\n+  echo \"# Install autoconf.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O autoconf.tar.gz https://fossies.org/linux/misc/autoconf-$autoconf_version.tar.gz \\\\\"\n+  echo \" && tar -xzf autoconf.tar.gz \\\\\"\n+  echo \" && cd autoconf-$autoconf_version \\\\\"\n+  echo \" && ./configure --build=\\$(rpm --eval %{_host}) \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf autoconf.tar.gz autoconf-$autoconf_version\"\n+  echo \"\"\n+  echo \"# Install gcc-7.5.\"\n+  echo \"RUN cd /usr/local \\\\\"\n+  echo \" && $wget_O gcc-7.tar.xz 'https://ci.adoptopenjdk.net/userContent/gcc/gcc750+ccache.$arch.tar.xz' \\\\\"\n+  echo \" && tar -xJf gcc-7.tar.xz --strip-components=1 \\\\\"\n+  echo \" && ln -sf ../local/bin/gcc-7.5 /usr/bin/gcc \\\\\"\n+  echo \" && ln -sf ../local/bin/g++-7.5 /usr/bin/g++ \\\\\"\n+  echo \" && ln -sf gcc /usr/bin/cc \\\\\"\n+  echo \" && ln -sf g++ /usr/bin/c++ \\\\\"\n+  echo \" && rm -f gcc-7.tar.xz\"\n+  echo \"\"\n+  local ant_version=1.10.5\n+  echo \"# Install ant.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O ant.zip https://archive.apache.org/dist/ant/binaries/apache-ant-$ant_version-bin.zip \\\\\"\n+  echo \" && unzip -q ant.zip -d /opt \\\\\"\n+  echo \" && ln -s apache-ant-$ant_version /opt/ant \\\\\"\n+  echo \" && ln -s /opt/ant/bin/ant /usr/bin/ant \\\\\"\n+  echo \" && $wget_O ant-contrib.tar.gz https://sourceforge.net/projects/ant-contrib/files/ant-contrib/1.0b3/ant-contrib-1.0b3-bin.tar.gz \\\\\"\n+  echo \" && tar -xzf ant-contrib.tar.gz \\\\\"\n+  echo \" && mv ant-contrib/ant-contrib-1.0b3.jar /opt/ant/lib \\\\\"\n+  echo \" && rm -rf ant-contrib ant.zip ant-contrib.tar.gz\"\n+  echo \"\"\n+  local git_version=2.5.3\n+  echo \"# Install git.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O git.tar.gz https://www.kernel.org/pub/software/scm/git/git-$git_version.tar.gz \\\\\"\n+  echo \" && tar -xzf git.tar.gz \\\\\"\n+  echo \" && cd git-$git_version \\\\\"\n+  echo \" && make prefix=/usr/local all \\\\\"\n+  echo \" && make prefix=/usr/local install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf git.tar.gz git-$git_version\"\n+  # updating make requires automake 1.15\n+  echo \"\"\n+  local automake_version=1.15\n+  echo \"# Update automake.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O automake.tar.gz http://ftp.gnu.org/gnu/automake/automake-$automake_version.tar.gz \\\\\"\n+  echo \" && tar -xzf automake.tar.gz \\\\\"\n+  echo \" && cd automake-$automake_version \\\\\"\n+  echo \" && ./configure \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf automake.tar.gz automake-$automake_version\"\n+if [ $arch = x86_64 ] ; then\n+  echo \"\"\n+  local gettext_version=0.20.1\n+  echo \"# Update gettext.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O gettext.tar.gz http://ftp.gnu.org/gnu/gettext/gettext-$gettext_version.tar.gz \\\\\"\n+  echo \" && tar -xzf gettext.tar.gz \\\\\"\n+  echo \" && cd gettext-$gettext_version \\\\\"\n+  echo \" && ./autogen.sh --skip-gnulib \\\\\"\n+  echo \" && ./configure --disable-nls \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf gettext.tar.gz gettext-$gettext_version\"\n+fi\n+  echo \"\"\n+if [ $arch = ppc64le ] ; then\n+  local make_version=4.2\n+else\n+  local make_version=4.1\n+fi\n+  echo \"# Update make.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O make.tar.gz https://github.com/mirror/make/archive/$make_version.tar.gz \\\\\"\n+  echo \" && tar -xzf make.tar.gz \\\\\"\n+  echo \" && cd make-$make_version \\\\\"\n+  echo \" && ACLOCAL_PATH=/usr/share/aclocal autoreconf -i \\\\\"\n+  echo \" && ./configure \\\\\"\n+  echo \" && make update \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && ln -s make /usr/local/bin/gmake \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf make.tar.gz make-$make_version\"\n+if [ $arch = x86_64 ] ; then\n+  echo \"\"\n+  local nasm_version=2.13.03\n+  echo \"# Install nasm.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O nasm.tar.gz https://www.nasm.us/pub/nasm/releasebuilds/$nasm_version/nasm-$nasm_version.tar.gz \\\\\"\n+  echo \" && tar -xzf nasm.tar.gz \\\\\"\n+  echo \" && cd nasm-$nasm_version \\\\\"\n+  echo \" && ./configure -prefix=/usr/local \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf nasm.tar.gz nasm-$nasm_version\"\n+fi\n+}\n+\n+install_ubuntu_packages() {\n+  echo \"RUN apt-get update \\\\\"\n+  echo \" && apt-get install -qq -y --no-install-recommends \\\\\"\n+  echo \"    software-properties-common \\\\\"\n+if [ $version = 16.04 ] ; then\n+  echo \"    python-software-properties \\\\\"\n+fi\n+  echo \" && add-apt-repository ppa:ubuntu-toolchain-r/test \\\\\"\n+  echo \" && apt-get update \\\\\"\n+  echo \" && apt-get install -qq -y --no-install-recommends \\\\\"\n+  echo \"    ant \\\\\"\n+  echo \"    ant-contrib \\\\\"\n+  echo \"    autoconf \\\\\"\n+  echo \"    build-essential \\\\\"\n+  echo \"    ca-certificates \\\\\"\n+  echo \"    cmake \\\\\"\n+  echo \"    cpio \\\\\"\n+  echo \"    curl \\\\\"\n+  echo \"    file \\\\\"\n+if [ $arch != s390x ] ; then\n+  echo \"    g++-7 \\\\\"\n+  echo \"    gcc-7 \\\\\"\n+fi\n+  echo \"    gdb \\\\\"\n+  echo \"    git \\\\\"\n+  echo \"    libasound2-dev \\\\\"\n+  echo \"    libcups2-dev \\\\\"\n+  echo \"    libdwarf-dev \\\\\"\n+  echo \"    libelf-dev \\\\\"\n+  echo \"    libexpat1-dev \\\\\" # required by the xml parser\n+  echo \"    libffi-dev \\\\\"\n+  echo \"    libfontconfig \\\\\"\n+  echo \"    libfontconfig1-dev \\\\\"\n+  echo \"    libfreetype6-dev \\\\\"\n+if [ $arch != s390x ] ; then\n+  echo \"    libnuma-dev \\\\\"\n+fi\n+if [ $arch = s390x ] ; then\n+  echo \"    libmpc3 \\\\\"\n+fi\n+  echo \"    libssl-dev \\\\\"\n+  echo \"    libx11-dev \\\\\"\n+  echo \"    libxext-dev \\\\\"\n+  echo \"    libxrandr-dev \\\\\"\n+  echo \"    libxrender-dev \\\\\"\n+  echo \"    libxt-dev \\\\\"\n+  echo \"    libxtst-dev \\\\\"\n+  echo \"    make \\\\\"\n+if [ $arch = x86_64 ] ; then\n+  echo \"    nasm \\\\\"\n+fi\n+  echo \"    openssh-client \\\\\"\n+  echo \"    openssh-server \\\\\"\n+  echo \"    perl \\\\\"\n+  echo \"    pkg-config \\\\\"\n+if [ $version = 16.04 ] ; then\n+  echo \"    realpath \\\\\"\n+fi\n+  echo \"    ssh \\\\\"\n+  echo \"    unzip \\\\\"\n+  echo \"    wget \\\\\"\n+  echo \"    xvfb \\\\\"\n+  echo \"    zip \\\\\"\n+  echo \"    zlib1g-dev \\\\\"\n+  echo \" && rm -rf /var/lib/apt/lists/*\"\n+}\n+\n+install_packages() {\n+  echo \"\"\n+  echo \"# Install required OS tools.\"\n+  echo \"\"\n+if [ $dist = centos ] ; then\n+  install_centos_packages\n+else\n+  install_ubuntu_packages\n+fi\n+}\n+\n+install_compilers() {\n+if [ $arch = s390x ] ; then\n+  echo \"\"\n+  local gcc_version=7.5\n+  echo \"# Install gcc.\"\n+  echo \"RUN cd /usr/local \\\\\"\n+  echo \" && $wget_O gcc.tar.xz 'https://ci.adoptopenjdk.net/userContent/gcc/gcc750+ccache.$arch.tar.xz' \\\\\"\n+  echo \" && tar -xJf gcc.tar.xz --strip-components=1 \\\\\"\n+  echo \" && rm -f gcc.tar.xz\"\n+  echo \"\"\n+  echo \"# Create various symbolic links.\"\n+  echo \"RUN ln -s lib/$arch-linux-gnu /usr/lib64 \\\\\"\n+if [ $dist:$version = ubuntu:18.04 ] ; then\n+  # On s390x perl needs version 4 of mpfr, but we only have version 6.\n+  echo \" && ln -s libmpfr.so.6 /usr/lib64/libmpfr.so.4 \\\\\"\n+fi\n+  # /usr/local/include/c++ is a directory that already exists so we create these symbolic links in two steps.\n+  echo \" && ( cd /usr/local/include && for f in \\$(ls /usr/include/s390x-linux-gnu/c++) ; do test -e \\$f || ln -s /usr/include/s390x-linux-gnu/c++/\\$f . ; done ) \\\\\"\n+  echo \" && ln -s \\$(ls -d /usr/include/s390x-linux-gnu/* | grep -v '/c++\\$') /usr/local/include \\\\\"\n+  echo \" && ln -sf ../local/bin/g++-$gcc_version /usr/bin/g++-7 \\\\\"\n+  echo \" && ln -sf ../local/bin/gcc-$gcc_version /usr/bin/gcc-7\"\n+fi\n+if [ $dist != centos ] ; then\n+  echo \"\"\n+  echo \"ENV CC=gcc-7 CXX=g++-7\"\n+fi\n+}\n+\n+install_cmake() {\n+if [ $dist == centos ] ; then\n+  echo \"\"\n+  local cmake_version=3.11\n+  local cmake_name=cmake-$cmake_version.4\n+  echo \"# Install cmake.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O cmake.tar.gz https://cmake.org/files/v$cmake_version/$cmake_name.tar.gz \\\\\"\n+  echo \" && tar -xzf cmake.tar.gz \\\\\"\n+  echo \" && cd $cmake_name \\\\\"\n+  echo \" && export LDFLAGS='-static-libstdc++' \\\\\"\n+  echo \" && ./configure \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf cmake.tar.gz $cmake_name\"\n+fi\n+}\n+\n+prepare_user() {\n+  # Ensure authorized_keys exists.\n+  test -f authorized_keys || touch authorized_keys\n+  # Ensure github.com is a known host.\n+  ( test -f known_hosts && grep -q '^github.com ' known_hosts ) \\\n+    || ssh-keyscan github.com >> known_hosts\n+}\n+\n+create_user() {\n+  echo \"\"\n+  echo \"# Add user home and copy authorized_keys and known_hosts.\"\n+  echo \"RUN useradd -ms /bin/bash $user \\\\\"\n+  echo \" && mkdir /home/$user/.ssh \\\\\"\n+  echo \" && chmod 700 /home/$user/.ssh\"\n+  echo \"COPY authorized_keys known_hosts /home/$user/.ssh/\"\n+  echo \"RUN chown -R $user:$user /home/$user \\\\\"\n+  echo \" && chmod 600 /home/$user/.ssh/authorized_keys /home/$user/.ssh/known_hosts\"\n+}\n+\n+install_freemarker() {\n+  echo \"\"\n+  local freemarker_version=2.3.8\n+  echo \"# Download and extract freemarker.jar to /root/freemarker.jar.\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24771d8a3d3bf6d37d10a0ddf97a4d4b6b478c46"}, "originalPosition": 544}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA1NTg3MA==", "bodyText": "Perhaps git_cache is a better name, but right now we're using openjdk_cache for all the Jenkins nodes (as per https://github.com/eclipse/openj9/blob/master/buildenv/jenkins/variables/defaults.yml#L151). If we switch we'd have to update all the nodes, as well as the defaults.yml and the updater job (https://github.com/eclipse/openj9/blob/master/buildenv/jenkins/jobs/infrastructure/Update-Reference-Repos.groovy#L148).\nAgain, not currently using the images so this wouldn't immediately break anything.", "url": "https://github.com/eclipse-openj9/openj9/pull/9371#discussion_r417055870", "createdAt": "2020-04-29T04:07:33Z", "author": {"login": "AdamBrousseau"}, "path": "buildenv/docker/mkdocker.sh", "diffHunk": "@@ -0,0 +1,697 @@\n+#!/bin/bash -\n+\n+print_license() {\n+cat <<- EOF\n+# Copyright (c) 2019, 2020 IBM Corp. and others\n+#\n+# This program and the accompanying materials are made available under\n+# the terms of the Eclipse Public License 2.0 which accompanies this\n+# distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+# or the Apache License, Version 2.0 which accompanies this distribution and\n+# is available at https://www.apache.org/licenses/LICENSE-2.0.\n+#\n+# This Source Code may also be made available under the following\n+# Secondary Licenses when the conditions for such availability set\n+# forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+# General Public License, version 2 with the GNU Classpath\n+# Exception [1] and GNU General Public License, version 2 with the\n+# OpenJDK Assembly Exception [2].\n+#\n+# [1] https://www.gnu.org/software/classpath/license.html\n+# [2] http://openjdk.java.net/legal/assembly-exception.html\n+#\n+# SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+EOF\n+}\n+\n+usage() {\n+  echo \"Usage: $0 [OPTION]...\"\n+  echo \"Generate a Dockerfile for building OpenJ9\"\n+  echo \"\"\n+  echo \"Options:\"\n+  echo \"  --help|-h      print this help, then exit\"\n+  echo \"  --arch=...     specify the processor architecture (default: host architecture)\"\n+  echo \"  --build        build the docker image (overrides '--print')\"\n+  echo \"  --cuda         include CUDA header files\"\n+  echo \"  --dist=...     specify the Linux distribution (e.g. centos, ubuntu)\"\n+  echo \"  --print        write the Dockerfile to stdout (default; overrides '--build')\"\n+  echo \"  --tag=...      specify a name for the docker image (may be repeated, default: none)\"\n+  echo \"  --user=...     specify the user name (default: 'jenkins')\"\n+  echo \"  --version=...  specify the distribution version (e.g. 6.9, 16.04)\"\n+  echo \"\"\n+  local arch=\"$(uname -m)\"\n+  echo \"Supported build patterns on this host ($arch):\"\n+if [ $arch = x86_64 ] ; then\n+  echo \"  bash mkdocker.sh --tag=openj9/cent69 --dist=centos --version=6.9 --build\"\n+fi\n+if [ $arch = x86_64 -o $arch = ppc64le ] ; then\n+  echo \"  bash mkdocker.sh --tag=openj9/cent7  --dist=centos --version=7   --build\"\n+fi\n+  echo \"  bash mkdocker.sh --tag=openj9/ub16   --dist=ubuntu --version=16  --build\"\n+  echo \"  bash mkdocker.sh --tag=openj9/ub18   --dist=ubuntu --version=18  --build\"\n+  echo \"  bash mkdocker.sh --tag=openj9/ub20   --dist=ubuntu --version=20  --build\"\n+  exit 1\n+}\n+\n+# Global configuration variables.\n+action=print\n+arch=\n+cuda=no\n+dist=unspecified\n+tags=()\n+user=jenkins\n+version=unspecified\n+\n+# Frequently used commands.\n+wget_O=\"wget --progress=dot:mega -O\"\n+\n+parse_options() {\n+  for arg in \"$@\" ; do\n+    case \"$arg\" in\n+      -h | --help)\n+        usage\n+        ;;\n+      --arch=*)\n+        arch=\"${arg#*=}\"\n+        ;;\n+      --build)\n+        action=build\n+        ;;\n+      --cuda)\n+        cuda=9.0\n+        ;;\n+      --dist=*)\n+        dist=\"${arg#*=}\"\n+        ;;\n+      --print)\n+        action=print\n+        ;;\n+      --tag=*)\n+        tags+=(\"${arg#*=}\")\n+        ;;\n+      --user=*)\n+        user=\"${arg#*=}\"\n+        ;;\n+      --version=*)\n+        version=\"${arg#*=}\"\n+        ;;\n+      *) # bad option\n+        echo \"Unsupported option: '$arg'\" >&2\n+        usage\n+        ;;\n+    esac\n+  done\n+}\n+\n+validate_options() {\n+  if [ \"x$arch\" = x ] ; then\n+    arch=\"$(uname -m)\"\n+  fi\n+\n+  case \"$arch\" in\n+    ppc64le | s390x | x86_64)\n+      ;;\n+    *)\n+      echo \"Unsupported architecture: '$arch'\" >&2\n+      exit 1\n+      ;;\n+  esac\n+\n+  # Validate the distribution and version.\n+  case \"$dist\" in\n+    centos)\n+      if [ $arch = s390x ] ; then\n+        echo \"CentOS is not supported on $arch\" >&2\n+        exit 1\n+      fi\n+      case $version in\n+        6.9)\n+          if [ $arch = ppc64le ] ; then\n+            echo \"CentOS version 6.9 is not supported on $arch\" >&2\n+            exit 1\n+          fi\n+          ;;\n+        7)\n+          ;;\n+        unspecified)\n+          echo \"Unspecified CentOS version: use '--version' option\" >&2\n+          exit 1\n+          ;;\n+        *)\n+          echo \"Unsupported CentOS version: '$version'\" >&2\n+          exit 1\n+          ;;\n+      esac\n+      ;;\n+    ubuntu)\n+      case $version in\n+        16 | 18 | 20)\n+          version=$version.04\n+          ;;\n+        16.04 | 18.04 | 20.04)\n+          ;;\n+        unspecified)\n+          echo \"Unspecified Ubuntu version: use '--version' option\" >&2\n+          exit 1\n+          ;;\n+        *)\n+          echo \"Unsupported Ubuntu version: '$version'\" >&2\n+          exit 1\n+          ;;\n+      esac\n+      ;;\n+    unspecified)\n+      echo \"Unspecified distribution: use '--dist' option\" >&2\n+      exit 1\n+      ;;\n+    *)\n+      echo \"Unsupported distribution: '$dist'\" >&2\n+      exit 1\n+      ;;\n+  esac\n+\n+  # If CUDA is requested, validate the architecture.\n+  if [ $cuda != no ] ; then\n+    case \"$arch\" in\n+      ppc64le | x86_64)\n+        ;;\n+      *)\n+        echo \"CUDA is not supported on architecture: '$arch'\" >&2\n+        exit 1\n+        ;;\n+    esac\n+  fi\n+}\n+\n+build_cmd() {\n+  local cmd=build\n+  local file=$1\n+  for tag in ${tags[@]} ; do\n+    cmd=\"$cmd --tag $tag\"\n+  done\n+  echo $cmd --file $file .\n+}\n+\n+preamble() {\n+  echo \"\"\n+  echo \"# Generated by: mkdocker.sh $command_line\"\n+  echo \"\"\n+  echo \"# To use this docker file:\"\n+  echo \"# First, copy your public ssh key into authorized_keys.\"\n+  echo \"# Then, in the directory containing the Dockerfile, authorized_keys\"\n+  echo \"# file, and known_hosts file, run:\"\n+  echo \"#   docker $(build_cmd Dockerfile)\"\n+  echo \"#\"\n+if [ ${#tags[@]} -lt 2 ] ; then\n+  echo \"# To start a container based on the resulting image, run this command:\"\n+else\n+  echo \"# To start a container based on the resulting image, run one of these commands:\"\n+fi\n+if [ ${#tags[@]} -eq 0 ] ; then\n+  echo \"#   docker run -it <image>\"\n+else\n+for tag in ${tags[@]} ; do\n+  echo \"#   docker run -it $tag\"\n+done\n+fi\n+  echo \"\"\n+if [ $cuda != no ] ; then\n+  echo \"FROM nvidia/cuda:${cuda}-devel-ubuntu16.04 AS cuda-dev\"\n+  echo \"\"\n+fi\n+  echo \"FROM $dist:$version\"\n+}\n+\n+install_centos_packages() {\n+  echo \"RUN yum -y update \\\\\"\n+if [ $version = 6.9 ] ; then\n+  echo \" && yum -y install https://\\$(rpm -E '%{?centos:centos}%{!?centos:rhel}%{rhel}').iuscommunity.org/ius-release.rpm \\\\\"\n+fi\n+  echo \" && yum -y install \\\\\"\n+  echo \"    alsa-lib-devel \\\\\"\n+  echo \"    automake \\\\\" # required to update make\n+  echo \"    bind-utils \\\\\"\n+  echo \"    bison \\\\\"\n+  echo \"    bzip2 \\\\\"\n+  echo \"    ca-certificates \\\\\"\n+  echo \"    cpio \\\\\"\n+  echo \"    cups-devel \\\\\"\n+  echo \"    curl-devel \\\\\" # required by git\n+  echo \"    elfutils-libelf-devel \\\\\"\n+  echo \"    expat-devel \\\\\" # required by git and the xml parser\n+  echo \"    file-devel \\\\\"\n+  echo \"    file-libs \\\\\"\n+  echo \"    flex \\\\\"\n+  echo \"    fontconfig \\\\\"\n+  echo \"    fontconfig-devel \\\\\"\n+  echo \"    freetype-devel \\\\\"\n+  echo \"    gettext \\\\\"\n+  echo \"    gettext-devel \\\\\" # required by git\n+  echo \"    glibc \\\\\"\n+  echo \"    glibc-common \\\\\"\n+  echo \"    glibc-devel \\\\\"\n+  echo \"    gmp-devel \\\\\"\n+  echo \"    lbzip2 \\\\\"\n+  echo \"    libdwarf \\\\\"\n+  echo \"    libdwarf-devel \\\\\"\n+  echo \"    libffi-devel \\\\\"\n+  echo \"    libstdc++-static \\\\\"\n+  echo \"    libX11-devel \\\\\"\n+  echo \"    libXext-devel \\\\\"\n+  echo \"    libXi-devel \\\\\"\n+  echo \"    libXrandr-devel \\\\\"\n+  echo \"    libXrender-devel \\\\\"\n+  echo \"    libXt-devel \\\\\"\n+  echo \"    libXtst-devel \\\\\"\n+  echo \"    make \\\\\"\n+  echo \"    mesa-libGL-devel \\\\\"\n+  echo \"    mpfr-devel \\\\\"\n+  echo \"    ntp \\\\\"\n+  echo \"    numactl-devel \\\\\"\n+  echo \"    openssh-clients \\\\\"\n+  echo \"    openssh-server \\\\\"\n+  echo \"    openssl-devel \\\\\" # required by git, etc.\n+  echo \"    perl-CPAN \\\\\"\n+  echo \"    perl-DBI \\\\\"\n+  echo \"    perl-devel \\\\\"\n+  echo \"    perl-ExtUtils-MakeMaker \\\\\" # required by git\n+  echo \"    perl-GD \\\\\"\n+  echo \"    perl-libwww-perl \\\\\"\n+  echo \"    perl-Time-HiRes \\\\\"\n+  echo \"    texinfo \\\\\" # required to update make\n+  echo \"    unzip \\\\\"\n+  echo \"    vim \\\\\"\n+  echo \"    wget \\\\\"\n+  echo \"    xorg-x11-server-Xvfb \\\\\"\n+  echo \"    xz \\\\\"\n+  echo \"    zip \\\\\"\n+  echo \"    zlib-devel \\\\\" # required by git, python\n+  echo \" && yum clean all\"\n+  echo \"\"\n+  local autoconf_version=2.69\n+  echo \"# Install autoconf.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O autoconf.tar.gz https://fossies.org/linux/misc/autoconf-$autoconf_version.tar.gz \\\\\"\n+  echo \" && tar -xzf autoconf.tar.gz \\\\\"\n+  echo \" && cd autoconf-$autoconf_version \\\\\"\n+  echo \" && ./configure --build=\\$(rpm --eval %{_host}) \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf autoconf.tar.gz autoconf-$autoconf_version\"\n+  echo \"\"\n+  echo \"# Install gcc-7.5.\"\n+  echo \"RUN cd /usr/local \\\\\"\n+  echo \" && $wget_O gcc-7.tar.xz 'https://ci.adoptopenjdk.net/userContent/gcc/gcc750+ccache.$arch.tar.xz' \\\\\"\n+  echo \" && tar -xJf gcc-7.tar.xz --strip-components=1 \\\\\"\n+  echo \" && ln -sf ../local/bin/gcc-7.5 /usr/bin/gcc \\\\\"\n+  echo \" && ln -sf ../local/bin/g++-7.5 /usr/bin/g++ \\\\\"\n+  echo \" && ln -sf gcc /usr/bin/cc \\\\\"\n+  echo \" && ln -sf g++ /usr/bin/c++ \\\\\"\n+  echo \" && rm -f gcc-7.tar.xz\"\n+  echo \"\"\n+  local ant_version=1.10.5\n+  echo \"# Install ant.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O ant.zip https://archive.apache.org/dist/ant/binaries/apache-ant-$ant_version-bin.zip \\\\\"\n+  echo \" && unzip -q ant.zip -d /opt \\\\\"\n+  echo \" && ln -s apache-ant-$ant_version /opt/ant \\\\\"\n+  echo \" && ln -s /opt/ant/bin/ant /usr/bin/ant \\\\\"\n+  echo \" && $wget_O ant-contrib.tar.gz https://sourceforge.net/projects/ant-contrib/files/ant-contrib/1.0b3/ant-contrib-1.0b3-bin.tar.gz \\\\\"\n+  echo \" && tar -xzf ant-contrib.tar.gz \\\\\"\n+  echo \" && mv ant-contrib/ant-contrib-1.0b3.jar /opt/ant/lib \\\\\"\n+  echo \" && rm -rf ant-contrib ant.zip ant-contrib.tar.gz\"\n+  echo \"\"\n+  local git_version=2.5.3\n+  echo \"# Install git.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O git.tar.gz https://www.kernel.org/pub/software/scm/git/git-$git_version.tar.gz \\\\\"\n+  echo \" && tar -xzf git.tar.gz \\\\\"\n+  echo \" && cd git-$git_version \\\\\"\n+  echo \" && make prefix=/usr/local all \\\\\"\n+  echo \" && make prefix=/usr/local install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf git.tar.gz git-$git_version\"\n+  # updating make requires automake 1.15\n+  echo \"\"\n+  local automake_version=1.15\n+  echo \"# Update automake.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O automake.tar.gz http://ftp.gnu.org/gnu/automake/automake-$automake_version.tar.gz \\\\\"\n+  echo \" && tar -xzf automake.tar.gz \\\\\"\n+  echo \" && cd automake-$automake_version \\\\\"\n+  echo \" && ./configure \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf automake.tar.gz automake-$automake_version\"\n+if [ $arch = x86_64 ] ; then\n+  echo \"\"\n+  local gettext_version=0.20.1\n+  echo \"# Update gettext.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O gettext.tar.gz http://ftp.gnu.org/gnu/gettext/gettext-$gettext_version.tar.gz \\\\\"\n+  echo \" && tar -xzf gettext.tar.gz \\\\\"\n+  echo \" && cd gettext-$gettext_version \\\\\"\n+  echo \" && ./autogen.sh --skip-gnulib \\\\\"\n+  echo \" && ./configure --disable-nls \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf gettext.tar.gz gettext-$gettext_version\"\n+fi\n+  echo \"\"\n+if [ $arch = ppc64le ] ; then\n+  local make_version=4.2\n+else\n+  local make_version=4.1\n+fi\n+  echo \"# Update make.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O make.tar.gz https://github.com/mirror/make/archive/$make_version.tar.gz \\\\\"\n+  echo \" && tar -xzf make.tar.gz \\\\\"\n+  echo \" && cd make-$make_version \\\\\"\n+  echo \" && ACLOCAL_PATH=/usr/share/aclocal autoreconf -i \\\\\"\n+  echo \" && ./configure \\\\\"\n+  echo \" && make update \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && ln -s make /usr/local/bin/gmake \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf make.tar.gz make-$make_version\"\n+if [ $arch = x86_64 ] ; then\n+  echo \"\"\n+  local nasm_version=2.13.03\n+  echo \"# Install nasm.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O nasm.tar.gz https://www.nasm.us/pub/nasm/releasebuilds/$nasm_version/nasm-$nasm_version.tar.gz \\\\\"\n+  echo \" && tar -xzf nasm.tar.gz \\\\\"\n+  echo \" && cd nasm-$nasm_version \\\\\"\n+  echo \" && ./configure -prefix=/usr/local \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf nasm.tar.gz nasm-$nasm_version\"\n+fi\n+}\n+\n+install_ubuntu_packages() {\n+  echo \"RUN apt-get update \\\\\"\n+  echo \" && apt-get install -qq -y --no-install-recommends \\\\\"\n+  echo \"    software-properties-common \\\\\"\n+if [ $version = 16.04 ] ; then\n+  echo \"    python-software-properties \\\\\"\n+fi\n+  echo \" && add-apt-repository ppa:ubuntu-toolchain-r/test \\\\\"\n+  echo \" && apt-get update \\\\\"\n+  echo \" && apt-get install -qq -y --no-install-recommends \\\\\"\n+  echo \"    ant \\\\\"\n+  echo \"    ant-contrib \\\\\"\n+  echo \"    autoconf \\\\\"\n+  echo \"    build-essential \\\\\"\n+  echo \"    ca-certificates \\\\\"\n+  echo \"    cmake \\\\\"\n+  echo \"    cpio \\\\\"\n+  echo \"    curl \\\\\"\n+  echo \"    file \\\\\"\n+if [ $arch != s390x ] ; then\n+  echo \"    g++-7 \\\\\"\n+  echo \"    gcc-7 \\\\\"\n+fi\n+  echo \"    gdb \\\\\"\n+  echo \"    git \\\\\"\n+  echo \"    libasound2-dev \\\\\"\n+  echo \"    libcups2-dev \\\\\"\n+  echo \"    libdwarf-dev \\\\\"\n+  echo \"    libelf-dev \\\\\"\n+  echo \"    libexpat1-dev \\\\\" # required by the xml parser\n+  echo \"    libffi-dev \\\\\"\n+  echo \"    libfontconfig \\\\\"\n+  echo \"    libfontconfig1-dev \\\\\"\n+  echo \"    libfreetype6-dev \\\\\"\n+if [ $arch != s390x ] ; then\n+  echo \"    libnuma-dev \\\\\"\n+fi\n+if [ $arch = s390x ] ; then\n+  echo \"    libmpc3 \\\\\"\n+fi\n+  echo \"    libssl-dev \\\\\"\n+  echo \"    libx11-dev \\\\\"\n+  echo \"    libxext-dev \\\\\"\n+  echo \"    libxrandr-dev \\\\\"\n+  echo \"    libxrender-dev \\\\\"\n+  echo \"    libxt-dev \\\\\"\n+  echo \"    libxtst-dev \\\\\"\n+  echo \"    make \\\\\"\n+if [ $arch = x86_64 ] ; then\n+  echo \"    nasm \\\\\"\n+fi\n+  echo \"    openssh-client \\\\\"\n+  echo \"    openssh-server \\\\\"\n+  echo \"    perl \\\\\"\n+  echo \"    pkg-config \\\\\"\n+if [ $version = 16.04 ] ; then\n+  echo \"    realpath \\\\\"\n+fi\n+  echo \"    ssh \\\\\"\n+  echo \"    unzip \\\\\"\n+  echo \"    wget \\\\\"\n+  echo \"    xvfb \\\\\"\n+  echo \"    zip \\\\\"\n+  echo \"    zlib1g-dev \\\\\"\n+  echo \" && rm -rf /var/lib/apt/lists/*\"\n+}\n+\n+install_packages() {\n+  echo \"\"\n+  echo \"# Install required OS tools.\"\n+  echo \"\"\n+if [ $dist = centos ] ; then\n+  install_centos_packages\n+else\n+  install_ubuntu_packages\n+fi\n+}\n+\n+install_compilers() {\n+if [ $arch = s390x ] ; then\n+  echo \"\"\n+  local gcc_version=7.5\n+  echo \"# Install gcc.\"\n+  echo \"RUN cd /usr/local \\\\\"\n+  echo \" && $wget_O gcc.tar.xz 'https://ci.adoptopenjdk.net/userContent/gcc/gcc750+ccache.$arch.tar.xz' \\\\\"\n+  echo \" && tar -xJf gcc.tar.xz --strip-components=1 \\\\\"\n+  echo \" && rm -f gcc.tar.xz\"\n+  echo \"\"\n+  echo \"# Create various symbolic links.\"\n+  echo \"RUN ln -s lib/$arch-linux-gnu /usr/lib64 \\\\\"\n+if [ $dist:$version = ubuntu:18.04 ] ; then\n+  # On s390x perl needs version 4 of mpfr, but we only have version 6.\n+  echo \" && ln -s libmpfr.so.6 /usr/lib64/libmpfr.so.4 \\\\\"\n+fi\n+  # /usr/local/include/c++ is a directory that already exists so we create these symbolic links in two steps.\n+  echo \" && ( cd /usr/local/include && for f in \\$(ls /usr/include/s390x-linux-gnu/c++) ; do test -e \\$f || ln -s /usr/include/s390x-linux-gnu/c++/\\$f . ; done ) \\\\\"\n+  echo \" && ln -s \\$(ls -d /usr/include/s390x-linux-gnu/* | grep -v '/c++\\$') /usr/local/include \\\\\"\n+  echo \" && ln -sf ../local/bin/g++-$gcc_version /usr/bin/g++-7 \\\\\"\n+  echo \" && ln -sf ../local/bin/gcc-$gcc_version /usr/bin/gcc-7\"\n+fi\n+if [ $dist != centos ] ; then\n+  echo \"\"\n+  echo \"ENV CC=gcc-7 CXX=g++-7\"\n+fi\n+}\n+\n+install_cmake() {\n+if [ $dist == centos ] ; then\n+  echo \"\"\n+  local cmake_version=3.11\n+  local cmake_name=cmake-$cmake_version.4\n+  echo \"# Install cmake.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O cmake.tar.gz https://cmake.org/files/v$cmake_version/$cmake_name.tar.gz \\\\\"\n+  echo \" && tar -xzf cmake.tar.gz \\\\\"\n+  echo \" && cd $cmake_name \\\\\"\n+  echo \" && export LDFLAGS='-static-libstdc++' \\\\\"\n+  echo \" && ./configure \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf cmake.tar.gz $cmake_name\"\n+fi\n+}\n+\n+prepare_user() {\n+  # Ensure authorized_keys exists.\n+  test -f authorized_keys || touch authorized_keys\n+  # Ensure github.com is a known host.\n+  ( test -f known_hosts && grep -q '^github.com ' known_hosts ) \\\n+    || ssh-keyscan github.com >> known_hosts\n+}\n+\n+create_user() {\n+  echo \"\"\n+  echo \"# Add user home and copy authorized_keys and known_hosts.\"\n+  echo \"RUN useradd -ms /bin/bash $user \\\\\"\n+  echo \" && mkdir /home/$user/.ssh \\\\\"\n+  echo \" && chmod 700 /home/$user/.ssh\"\n+  echo \"COPY authorized_keys known_hosts /home/$user/.ssh/\"\n+  echo \"RUN chown -R $user:$user /home/$user \\\\\"\n+  echo \" && chmod 600 /home/$user/.ssh/authorized_keys /home/$user/.ssh/known_hosts\"\n+}\n+\n+install_freemarker() {\n+  echo \"\"\n+  local freemarker_version=2.3.8\n+  echo \"# Download and extract freemarker.jar to /root/freemarker.jar.\"\n+  echo \"RUN mkdir -p /root \\\\\"\n+  echo \" && cd /root \\\\\"\n+  echo \" && $wget_O freemarker.tar.gz https://sourceforge.net/projects/freemarker/files/freemarker/$freemarker_version/freemarker-$freemarker_version.tar.gz/download \\\\\"\n+  echo \" && tar -xzf freemarker.tar.gz freemarker-$freemarker_version/lib/freemarker.jar --strip=2 \\\\\"\n+  echo \" && rm -f freemarker.tar.gz\"\n+}\n+\n+bootjdk_dirs() {\n+  for version in $@ ; do\n+    if [ $version = 8 ] ; then\n+      echo /usr/lib/jvm/adoptojdk-java-80\n+    else\n+      echo /usr/lib/jvm/adoptojdk-java-$version\n+    fi\n+  done\n+}\n+\n+bootjdk_url() {\n+  local version=$1\n+  if [ $arch = x86_64 ] ; then\n+    echo https://api.adoptopenjdk.net/v3/binary/latest/$version/ga/linux/x64/jdk/openj9/normal/adoptopenjdk\n+  else\n+    echo https://api.adoptopenjdk.net/v3/binary/latest/$version/ga/linux/$arch/jdk/openj9/normal/adoptopenjdk\n+  fi\n+}\n+\n+install_bootjdks() {\n+  local versions=\"8 11 13 14\"\n+  echo \"\"\n+  echo \"# Download and install boot JDKs from AdoptOpenJDK.\"\n+  echo \"RUN cd /tmp \\\\\"\n+for version in $versions ; do\n+  echo \" && $wget_O jdk$version.tar.gz $(bootjdk_url $version) \\\\\"\n+done\n+  echo \" && mkdir -p\" $(bootjdk_dirs $versions) \"\\\\\"\n+for version in $versions ; do\n+  echo \" && tar -xzf jdk$version.tar.gz --directory=$(bootjdk_dirs $version)/ --strip=1 \\\\\"\n+done\n+  echo \" && rm -f jdk*.tar.gz\"\n+}\n+\n+install_cuda() {\n+  echo \"\"\n+  echo \"# Copy header files necessary to build a VM with CUDA support.\"\n+  echo \"RUN mkdir -p /usr/local/cuda-${cuda}/nvvm\"\n+  echo \"COPY --from=cuda-dev /usr/local/cuda-${cuda}/include      /usr/local/cuda-${cuda}/include\"\n+  echo \"COPY --from=cuda-dev /usr/local/cuda-${cuda}/nvvm/include /usr/local/cuda-${cuda}/nvvm/include\"\n+  echo \"ENV CUDA_HOME=/usr/local/cuda-${cuda}\"\n+}\n+\n+install_python() {\n+  local python_version=3.7.3\n+  echo \"\"\n+  echo \"# Install python.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O python.tar.xz https://www.python.org/ftp/python/$python_version/Python-$python_version.tar.xz \\\\\"\n+  echo \" && tar -xJf python.tar.xz \\\\\"\n+  echo \" && cd Python-$python_version \\\\\"\n+  echo \" && ./configure --prefix=/usr/local \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf python.tar.xz Python-$python_version\"\n+}\n+\n+adjust_ldconfig() {\n+  echo \"\"\n+  echo \"# Run ldconfig to discover newly installed shared libraries.\"\n+  echo \"RUN for dir in lib lib64 ; do echo /usr/local/$dir ; done > /etc/ld.so.conf.d/usr-local.conf \\\\\"\n+  echo \" && ldconfig\"\n+}\n+\n+# called as: add_git_remote remote url\n+add_git_remote() {\n+  echo \" && git remote add ${1} ${2} \\\\\"\n+  # Like-named (and conflicting) tags exist in multiple repositories: don't fetch any tags.\n+  echo \" && git config remote.${1}.tagopt --no-tags \\\\\"\n+}\n+\n+create_git_cache() {\n+  # The jdk14 remote is fetched first because that repository was subjected to\n+  # 'git gc --aggressive --prune=all' before it was first published making it much\n+  # smaller than the other jdk repositories. There is a large degree of overlap\n+  # among the jdk repositories so a relatively small number of commits must be\n+  # fetched from the others.\n+  echo \"\"\n+  echo \"# Setup a reference repository cache for faster clones in containers.\"\n+  echo \"RUN mkdir /home/$user/git_cache \\\\\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24771d8a3d3bf6d37d10a0ddf97a4d4b6b478c46"}, "originalPosition": 632}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA2NTQyMQ==", "bodyText": "Does JITServer still require a newer version of openssl installed on the machine? This looks like it's currently 1.0.1e (on Cent6.9). The existing Dockerfile has 1.1.1b.", "url": "https://github.com/eclipse-openj9/openj9/pull/9371#discussion_r417065421", "createdAt": "2020-04-29T04:50:59Z", "author": {"login": "AdamBrousseau"}, "path": "buildenv/docker/mkdocker.sh", "diffHunk": "@@ -0,0 +1,697 @@\n+#!/bin/bash -\n+\n+print_license() {\n+cat <<- EOF\n+# Copyright (c) 2019, 2020 IBM Corp. and others\n+#\n+# This program and the accompanying materials are made available under\n+# the terms of the Eclipse Public License 2.0 which accompanies this\n+# distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+# or the Apache License, Version 2.0 which accompanies this distribution and\n+# is available at https://www.apache.org/licenses/LICENSE-2.0.\n+#\n+# This Source Code may also be made available under the following\n+# Secondary Licenses when the conditions for such availability set\n+# forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+# General Public License, version 2 with the GNU Classpath\n+# Exception [1] and GNU General Public License, version 2 with the\n+# OpenJDK Assembly Exception [2].\n+#\n+# [1] https://www.gnu.org/software/classpath/license.html\n+# [2] http://openjdk.java.net/legal/assembly-exception.html\n+#\n+# SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+EOF\n+}\n+\n+usage() {\n+  echo \"Usage: $0 [OPTION]...\"\n+  echo \"Generate a Dockerfile for building OpenJ9\"\n+  echo \"\"\n+  echo \"Options:\"\n+  echo \"  --help|-h      print this help, then exit\"\n+  echo \"  --arch=...     specify the processor architecture (default: host architecture)\"\n+  echo \"  --build        build the docker image (overrides '--print')\"\n+  echo \"  --cuda         include CUDA header files\"\n+  echo \"  --dist=...     specify the Linux distribution (e.g. centos, ubuntu)\"\n+  echo \"  --print        write the Dockerfile to stdout (default; overrides '--build')\"\n+  echo \"  --tag=...      specify a name for the docker image (may be repeated, default: none)\"\n+  echo \"  --user=...     specify the user name (default: 'jenkins')\"\n+  echo \"  --version=...  specify the distribution version (e.g. 6.9, 16.04)\"\n+  echo \"\"\n+  local arch=\"$(uname -m)\"\n+  echo \"Supported build patterns on this host ($arch):\"\n+if [ $arch = x86_64 ] ; then\n+  echo \"  bash mkdocker.sh --tag=openj9/cent69 --dist=centos --version=6.9 --build\"\n+fi\n+if [ $arch = x86_64 -o $arch = ppc64le ] ; then\n+  echo \"  bash mkdocker.sh --tag=openj9/cent7  --dist=centos --version=7   --build\"\n+fi\n+  echo \"  bash mkdocker.sh --tag=openj9/ub16   --dist=ubuntu --version=16  --build\"\n+  echo \"  bash mkdocker.sh --tag=openj9/ub18   --dist=ubuntu --version=18  --build\"\n+  echo \"  bash mkdocker.sh --tag=openj9/ub20   --dist=ubuntu --version=20  --build\"\n+  exit 1\n+}\n+\n+# Global configuration variables.\n+action=print\n+arch=\n+cuda=no\n+dist=unspecified\n+tags=()\n+user=jenkins\n+version=unspecified\n+\n+# Frequently used commands.\n+wget_O=\"wget --progress=dot:mega -O\"\n+\n+parse_options() {\n+  for arg in \"$@\" ; do\n+    case \"$arg\" in\n+      -h | --help)\n+        usage\n+        ;;\n+      --arch=*)\n+        arch=\"${arg#*=}\"\n+        ;;\n+      --build)\n+        action=build\n+        ;;\n+      --cuda)\n+        cuda=9.0\n+        ;;\n+      --dist=*)\n+        dist=\"${arg#*=}\"\n+        ;;\n+      --print)\n+        action=print\n+        ;;\n+      --tag=*)\n+        tags+=(\"${arg#*=}\")\n+        ;;\n+      --user=*)\n+        user=\"${arg#*=}\"\n+        ;;\n+      --version=*)\n+        version=\"${arg#*=}\"\n+        ;;\n+      *) # bad option\n+        echo \"Unsupported option: '$arg'\" >&2\n+        usage\n+        ;;\n+    esac\n+  done\n+}\n+\n+validate_options() {\n+  if [ \"x$arch\" = x ] ; then\n+    arch=\"$(uname -m)\"\n+  fi\n+\n+  case \"$arch\" in\n+    ppc64le | s390x | x86_64)\n+      ;;\n+    *)\n+      echo \"Unsupported architecture: '$arch'\" >&2\n+      exit 1\n+      ;;\n+  esac\n+\n+  # Validate the distribution and version.\n+  case \"$dist\" in\n+    centos)\n+      if [ $arch = s390x ] ; then\n+        echo \"CentOS is not supported on $arch\" >&2\n+        exit 1\n+      fi\n+      case $version in\n+        6.9)\n+          if [ $arch = ppc64le ] ; then\n+            echo \"CentOS version 6.9 is not supported on $arch\" >&2\n+            exit 1\n+          fi\n+          ;;\n+        7)\n+          ;;\n+        unspecified)\n+          echo \"Unspecified CentOS version: use '--version' option\" >&2\n+          exit 1\n+          ;;\n+        *)\n+          echo \"Unsupported CentOS version: '$version'\" >&2\n+          exit 1\n+          ;;\n+      esac\n+      ;;\n+    ubuntu)\n+      case $version in\n+        16 | 18 | 20)\n+          version=$version.04\n+          ;;\n+        16.04 | 18.04 | 20.04)\n+          ;;\n+        unspecified)\n+          echo \"Unspecified Ubuntu version: use '--version' option\" >&2\n+          exit 1\n+          ;;\n+        *)\n+          echo \"Unsupported Ubuntu version: '$version'\" >&2\n+          exit 1\n+          ;;\n+      esac\n+      ;;\n+    unspecified)\n+      echo \"Unspecified distribution: use '--dist' option\" >&2\n+      exit 1\n+      ;;\n+    *)\n+      echo \"Unsupported distribution: '$dist'\" >&2\n+      exit 1\n+      ;;\n+  esac\n+\n+  # If CUDA is requested, validate the architecture.\n+  if [ $cuda != no ] ; then\n+    case \"$arch\" in\n+      ppc64le | x86_64)\n+        ;;\n+      *)\n+        echo \"CUDA is not supported on architecture: '$arch'\" >&2\n+        exit 1\n+        ;;\n+    esac\n+  fi\n+}\n+\n+build_cmd() {\n+  local cmd=build\n+  local file=$1\n+  for tag in ${tags[@]} ; do\n+    cmd=\"$cmd --tag $tag\"\n+  done\n+  echo $cmd --file $file .\n+}\n+\n+preamble() {\n+  echo \"\"\n+  echo \"# Generated by: mkdocker.sh $command_line\"\n+  echo \"\"\n+  echo \"# To use this docker file:\"\n+  echo \"# First, copy your public ssh key into authorized_keys.\"\n+  echo \"# Then, in the directory containing the Dockerfile, authorized_keys\"\n+  echo \"# file, and known_hosts file, run:\"\n+  echo \"#   docker $(build_cmd Dockerfile)\"\n+  echo \"#\"\n+if [ ${#tags[@]} -lt 2 ] ; then\n+  echo \"# To start a container based on the resulting image, run this command:\"\n+else\n+  echo \"# To start a container based on the resulting image, run one of these commands:\"\n+fi\n+if [ ${#tags[@]} -eq 0 ] ; then\n+  echo \"#   docker run -it <image>\"\n+else\n+for tag in ${tags[@]} ; do\n+  echo \"#   docker run -it $tag\"\n+done\n+fi\n+  echo \"\"\n+if [ $cuda != no ] ; then\n+  echo \"FROM nvidia/cuda:${cuda}-devel-ubuntu16.04 AS cuda-dev\"\n+  echo \"\"\n+fi\n+  echo \"FROM $dist:$version\"\n+}\n+\n+install_centos_packages() {\n+  echo \"RUN yum -y update \\\\\"\n+if [ $version = 6.9 ] ; then\n+  echo \" && yum -y install https://\\$(rpm -E '%{?centos:centos}%{!?centos:rhel}%{rhel}').iuscommunity.org/ius-release.rpm \\\\\"\n+fi\n+  echo \" && yum -y install \\\\\"\n+  echo \"    alsa-lib-devel \\\\\"\n+  echo \"    automake \\\\\" # required to update make\n+  echo \"    bind-utils \\\\\"\n+  echo \"    bison \\\\\"\n+  echo \"    bzip2 \\\\\"\n+  echo \"    ca-certificates \\\\\"\n+  echo \"    cpio \\\\\"\n+  echo \"    cups-devel \\\\\"\n+  echo \"    curl-devel \\\\\" # required by git\n+  echo \"    elfutils-libelf-devel \\\\\"\n+  echo \"    expat-devel \\\\\" # required by git and the xml parser\n+  echo \"    file-devel \\\\\"\n+  echo \"    file-libs \\\\\"\n+  echo \"    flex \\\\\"\n+  echo \"    fontconfig \\\\\"\n+  echo \"    fontconfig-devel \\\\\"\n+  echo \"    freetype-devel \\\\\"\n+  echo \"    gettext \\\\\"\n+  echo \"    gettext-devel \\\\\" # required by git\n+  echo \"    glibc \\\\\"\n+  echo \"    glibc-common \\\\\"\n+  echo \"    glibc-devel \\\\\"\n+  echo \"    gmp-devel \\\\\"\n+  echo \"    lbzip2 \\\\\"\n+  echo \"    libdwarf \\\\\"\n+  echo \"    libdwarf-devel \\\\\"\n+  echo \"    libffi-devel \\\\\"\n+  echo \"    libstdc++-static \\\\\"\n+  echo \"    libX11-devel \\\\\"\n+  echo \"    libXext-devel \\\\\"\n+  echo \"    libXi-devel \\\\\"\n+  echo \"    libXrandr-devel \\\\\"\n+  echo \"    libXrender-devel \\\\\"\n+  echo \"    libXt-devel \\\\\"\n+  echo \"    libXtst-devel \\\\\"\n+  echo \"    make \\\\\"\n+  echo \"    mesa-libGL-devel \\\\\"\n+  echo \"    mpfr-devel \\\\\"\n+  echo \"    ntp \\\\\"\n+  echo \"    numactl-devel \\\\\"\n+  echo \"    openssh-clients \\\\\"\n+  echo \"    openssh-server \\\\\"\n+  echo \"    openssl-devel \\\\\" # required by git, etc.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24771d8a3d3bf6d37d10a0ddf97a4d4b6b478c46"}, "originalPosition": 273}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA2NTg5NA==", "bodyText": "I can't get Jenkins to connect to a cent6.9 container. The logs indicate the ssh service is not running. I see these lines in the existing file. If I recall correctly, this initiates the service so it starts when you start the container. Although I'm not sure why the stop command is also there.\nVerified. If I run the container and start the service I can ssh in from my laptop to the container.", "url": "https://github.com/eclipse-openj9/openj9/pull/9371#discussion_r417065894", "createdAt": "2020-04-29T04:53:09Z", "author": {"login": "AdamBrousseau"}, "path": "buildenv/docker/mkdocker.sh", "diffHunk": "@@ -0,0 +1,697 @@\n+#!/bin/bash -\n+\n+print_license() {\n+cat <<- EOF\n+# Copyright (c) 2019, 2020 IBM Corp. and others\n+#\n+# This program and the accompanying materials are made available under\n+# the terms of the Eclipse Public License 2.0 which accompanies this\n+# distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+# or the Apache License, Version 2.0 which accompanies this distribution and\n+# is available at https://www.apache.org/licenses/LICENSE-2.0.\n+#\n+# This Source Code may also be made available under the following\n+# Secondary Licenses when the conditions for such availability set\n+# forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+# General Public License, version 2 with the GNU Classpath\n+# Exception [1] and GNU General Public License, version 2 with the\n+# OpenJDK Assembly Exception [2].\n+#\n+# [1] https://www.gnu.org/software/classpath/license.html\n+# [2] http://openjdk.java.net/legal/assembly-exception.html\n+#\n+# SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+EOF\n+}\n+\n+usage() {\n+  echo \"Usage: $0 [OPTION]...\"\n+  echo \"Generate a Dockerfile for building OpenJ9\"\n+  echo \"\"\n+  echo \"Options:\"\n+  echo \"  --help|-h      print this help, then exit\"\n+  echo \"  --arch=...     specify the processor architecture (default: host architecture)\"\n+  echo \"  --build        build the docker image (overrides '--print')\"\n+  echo \"  --cuda         include CUDA header files\"\n+  echo \"  --dist=...     specify the Linux distribution (e.g. centos, ubuntu)\"\n+  echo \"  --print        write the Dockerfile to stdout (default; overrides '--build')\"\n+  echo \"  --tag=...      specify a name for the docker image (may be repeated, default: none)\"\n+  echo \"  --user=...     specify the user name (default: 'jenkins')\"\n+  echo \"  --version=...  specify the distribution version (e.g. 6.9, 16.04)\"\n+  echo \"\"\n+  local arch=\"$(uname -m)\"\n+  echo \"Supported build patterns on this host ($arch):\"\n+if [ $arch = x86_64 ] ; then\n+  echo \"  bash mkdocker.sh --tag=openj9/cent69 --dist=centos --version=6.9 --build\"\n+fi\n+if [ $arch = x86_64 -o $arch = ppc64le ] ; then\n+  echo \"  bash mkdocker.sh --tag=openj9/cent7  --dist=centos --version=7   --build\"\n+fi\n+  echo \"  bash mkdocker.sh --tag=openj9/ub16   --dist=ubuntu --version=16  --build\"\n+  echo \"  bash mkdocker.sh --tag=openj9/ub18   --dist=ubuntu --version=18  --build\"\n+  echo \"  bash mkdocker.sh --tag=openj9/ub20   --dist=ubuntu --version=20  --build\"\n+  exit 1\n+}\n+\n+# Global configuration variables.\n+action=print\n+arch=\n+cuda=no\n+dist=unspecified\n+tags=()\n+user=jenkins\n+version=unspecified\n+\n+# Frequently used commands.\n+wget_O=\"wget --progress=dot:mega -O\"\n+\n+parse_options() {\n+  for arg in \"$@\" ; do\n+    case \"$arg\" in\n+      -h | --help)\n+        usage\n+        ;;\n+      --arch=*)\n+        arch=\"${arg#*=}\"\n+        ;;\n+      --build)\n+        action=build\n+        ;;\n+      --cuda)\n+        cuda=9.0\n+        ;;\n+      --dist=*)\n+        dist=\"${arg#*=}\"\n+        ;;\n+      --print)\n+        action=print\n+        ;;\n+      --tag=*)\n+        tags+=(\"${arg#*=}\")\n+        ;;\n+      --user=*)\n+        user=\"${arg#*=}\"\n+        ;;\n+      --version=*)\n+        version=\"${arg#*=}\"\n+        ;;\n+      *) # bad option\n+        echo \"Unsupported option: '$arg'\" >&2\n+        usage\n+        ;;\n+    esac\n+  done\n+}\n+\n+validate_options() {\n+  if [ \"x$arch\" = x ] ; then\n+    arch=\"$(uname -m)\"\n+  fi\n+\n+  case \"$arch\" in\n+    ppc64le | s390x | x86_64)\n+      ;;\n+    *)\n+      echo \"Unsupported architecture: '$arch'\" >&2\n+      exit 1\n+      ;;\n+  esac\n+\n+  # Validate the distribution and version.\n+  case \"$dist\" in\n+    centos)\n+      if [ $arch = s390x ] ; then\n+        echo \"CentOS is not supported on $arch\" >&2\n+        exit 1\n+      fi\n+      case $version in\n+        6.9)\n+          if [ $arch = ppc64le ] ; then\n+            echo \"CentOS version 6.9 is not supported on $arch\" >&2\n+            exit 1\n+          fi\n+          ;;\n+        7)\n+          ;;\n+        unspecified)\n+          echo \"Unspecified CentOS version: use '--version' option\" >&2\n+          exit 1\n+          ;;\n+        *)\n+          echo \"Unsupported CentOS version: '$version'\" >&2\n+          exit 1\n+          ;;\n+      esac\n+      ;;\n+    ubuntu)\n+      case $version in\n+        16 | 18 | 20)\n+          version=$version.04\n+          ;;\n+        16.04 | 18.04 | 20.04)\n+          ;;\n+        unspecified)\n+          echo \"Unspecified Ubuntu version: use '--version' option\" >&2\n+          exit 1\n+          ;;\n+        *)\n+          echo \"Unsupported Ubuntu version: '$version'\" >&2\n+          exit 1\n+          ;;\n+      esac\n+      ;;\n+    unspecified)\n+      echo \"Unspecified distribution: use '--dist' option\" >&2\n+      exit 1\n+      ;;\n+    *)\n+      echo \"Unsupported distribution: '$dist'\" >&2\n+      exit 1\n+      ;;\n+  esac\n+\n+  # If CUDA is requested, validate the architecture.\n+  if [ $cuda != no ] ; then\n+    case \"$arch\" in\n+      ppc64le | x86_64)\n+        ;;\n+      *)\n+        echo \"CUDA is not supported on architecture: '$arch'\" >&2\n+        exit 1\n+        ;;\n+    esac\n+  fi\n+}\n+\n+build_cmd() {\n+  local cmd=build\n+  local file=$1\n+  for tag in ${tags[@]} ; do\n+    cmd=\"$cmd --tag $tag\"\n+  done\n+  echo $cmd --file $file .\n+}\n+\n+preamble() {\n+  echo \"\"\n+  echo \"# Generated by: mkdocker.sh $command_line\"\n+  echo \"\"\n+  echo \"# To use this docker file:\"\n+  echo \"# First, copy your public ssh key into authorized_keys.\"\n+  echo \"# Then, in the directory containing the Dockerfile, authorized_keys\"\n+  echo \"# file, and known_hosts file, run:\"\n+  echo \"#   docker $(build_cmd Dockerfile)\"\n+  echo \"#\"\n+if [ ${#tags[@]} -lt 2 ] ; then\n+  echo \"# To start a container based on the resulting image, run this command:\"\n+else\n+  echo \"# To start a container based on the resulting image, run one of these commands:\"\n+fi\n+if [ ${#tags[@]} -eq 0 ] ; then\n+  echo \"#   docker run -it <image>\"\n+else\n+for tag in ${tags[@]} ; do\n+  echo \"#   docker run -it $tag\"\n+done\n+fi\n+  echo \"\"\n+if [ $cuda != no ] ; then\n+  echo \"FROM nvidia/cuda:${cuda}-devel-ubuntu16.04 AS cuda-dev\"\n+  echo \"\"\n+fi\n+  echo \"FROM $dist:$version\"\n+}\n+\n+install_centos_packages() {\n+  echo \"RUN yum -y update \\\\\"\n+if [ $version = 6.9 ] ; then\n+  echo \" && yum -y install https://\\$(rpm -E '%{?centos:centos}%{!?centos:rhel}%{rhel}').iuscommunity.org/ius-release.rpm \\\\\"\n+fi\n+  echo \" && yum -y install \\\\\"\n+  echo \"    alsa-lib-devel \\\\\"\n+  echo \"    automake \\\\\" # required to update make\n+  echo \"    bind-utils \\\\\"\n+  echo \"    bison \\\\\"\n+  echo \"    bzip2 \\\\\"\n+  echo \"    ca-certificates \\\\\"\n+  echo \"    cpio \\\\\"\n+  echo \"    cups-devel \\\\\"\n+  echo \"    curl-devel \\\\\" # required by git\n+  echo \"    elfutils-libelf-devel \\\\\"\n+  echo \"    expat-devel \\\\\" # required by git and the xml parser\n+  echo \"    file-devel \\\\\"\n+  echo \"    file-libs \\\\\"\n+  echo \"    flex \\\\\"\n+  echo \"    fontconfig \\\\\"\n+  echo \"    fontconfig-devel \\\\\"\n+  echo \"    freetype-devel \\\\\"\n+  echo \"    gettext \\\\\"\n+  echo \"    gettext-devel \\\\\" # required by git\n+  echo \"    glibc \\\\\"\n+  echo \"    glibc-common \\\\\"\n+  echo \"    glibc-devel \\\\\"\n+  echo \"    gmp-devel \\\\\"\n+  echo \"    lbzip2 \\\\\"\n+  echo \"    libdwarf \\\\\"\n+  echo \"    libdwarf-devel \\\\\"\n+  echo \"    libffi-devel \\\\\"\n+  echo \"    libstdc++-static \\\\\"\n+  echo \"    libX11-devel \\\\\"\n+  echo \"    libXext-devel \\\\\"\n+  echo \"    libXi-devel \\\\\"\n+  echo \"    libXrandr-devel \\\\\"\n+  echo \"    libXrender-devel \\\\\"\n+  echo \"    libXt-devel \\\\\"\n+  echo \"    libXtst-devel \\\\\"\n+  echo \"    make \\\\\"\n+  echo \"    mesa-libGL-devel \\\\\"\n+  echo \"    mpfr-devel \\\\\"\n+  echo \"    ntp \\\\\"\n+  echo \"    numactl-devel \\\\\"\n+  echo \"    openssh-clients \\\\\"\n+  echo \"    openssh-server \\\\\"\n+  echo \"    openssl-devel \\\\\" # required by git, etc.\n+  echo \"    perl-CPAN \\\\\"\n+  echo \"    perl-DBI \\\\\"\n+  echo \"    perl-devel \\\\\"\n+  echo \"    perl-ExtUtils-MakeMaker \\\\\" # required by git\n+  echo \"    perl-GD \\\\\"\n+  echo \"    perl-libwww-perl \\\\\"\n+  echo \"    perl-Time-HiRes \\\\\"\n+  echo \"    texinfo \\\\\" # required to update make\n+  echo \"    unzip \\\\\"\n+  echo \"    vim \\\\\"\n+  echo \"    wget \\\\\"\n+  echo \"    xorg-x11-server-Xvfb \\\\\"\n+  echo \"    xz \\\\\"\n+  echo \"    zip \\\\\"\n+  echo \"    zlib-devel \\\\\" # required by git, python\n+  echo \" && yum clean all\"\n+  echo \"\"\n+  local autoconf_version=2.69\n+  echo \"# Install autoconf.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O autoconf.tar.gz https://fossies.org/linux/misc/autoconf-$autoconf_version.tar.gz \\\\\"\n+  echo \" && tar -xzf autoconf.tar.gz \\\\\"\n+  echo \" && cd autoconf-$autoconf_version \\\\\"\n+  echo \" && ./configure --build=\\$(rpm --eval %{_host}) \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf autoconf.tar.gz autoconf-$autoconf_version\"\n+  echo \"\"\n+  echo \"# Install gcc-7.5.\"\n+  echo \"RUN cd /usr/local \\\\\"\n+  echo \" && $wget_O gcc-7.tar.xz 'https://ci.adoptopenjdk.net/userContent/gcc/gcc750+ccache.$arch.tar.xz' \\\\\"\n+  echo \" && tar -xJf gcc-7.tar.xz --strip-components=1 \\\\\"\n+  echo \" && ln -sf ../local/bin/gcc-7.5 /usr/bin/gcc \\\\\"\n+  echo \" && ln -sf ../local/bin/g++-7.5 /usr/bin/g++ \\\\\"\n+  echo \" && ln -sf gcc /usr/bin/cc \\\\\"\n+  echo \" && ln -sf g++ /usr/bin/c++ \\\\\"\n+  echo \" && rm -f gcc-7.tar.xz\"\n+  echo \"\"\n+  local ant_version=1.10.5\n+  echo \"# Install ant.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O ant.zip https://archive.apache.org/dist/ant/binaries/apache-ant-$ant_version-bin.zip \\\\\"\n+  echo \" && unzip -q ant.zip -d /opt \\\\\"\n+  echo \" && ln -s apache-ant-$ant_version /opt/ant \\\\\"\n+  echo \" && ln -s /opt/ant/bin/ant /usr/bin/ant \\\\\"\n+  echo \" && $wget_O ant-contrib.tar.gz https://sourceforge.net/projects/ant-contrib/files/ant-contrib/1.0b3/ant-contrib-1.0b3-bin.tar.gz \\\\\"\n+  echo \" && tar -xzf ant-contrib.tar.gz \\\\\"\n+  echo \" && mv ant-contrib/ant-contrib-1.0b3.jar /opt/ant/lib \\\\\"\n+  echo \" && rm -rf ant-contrib ant.zip ant-contrib.tar.gz\"\n+  echo \"\"\n+  local git_version=2.5.3\n+  echo \"# Install git.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O git.tar.gz https://www.kernel.org/pub/software/scm/git/git-$git_version.tar.gz \\\\\"\n+  echo \" && tar -xzf git.tar.gz \\\\\"\n+  echo \" && cd git-$git_version \\\\\"\n+  echo \" && make prefix=/usr/local all \\\\\"\n+  echo \" && make prefix=/usr/local install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf git.tar.gz git-$git_version\"\n+  # updating make requires automake 1.15\n+  echo \"\"\n+  local automake_version=1.15\n+  echo \"# Update automake.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O automake.tar.gz http://ftp.gnu.org/gnu/automake/automake-$automake_version.tar.gz \\\\\"\n+  echo \" && tar -xzf automake.tar.gz \\\\\"\n+  echo \" && cd automake-$automake_version \\\\\"\n+  echo \" && ./configure \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf automake.tar.gz automake-$automake_version\"\n+if [ $arch = x86_64 ] ; then\n+  echo \"\"\n+  local gettext_version=0.20.1\n+  echo \"# Update gettext.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O gettext.tar.gz http://ftp.gnu.org/gnu/gettext/gettext-$gettext_version.tar.gz \\\\\"\n+  echo \" && tar -xzf gettext.tar.gz \\\\\"\n+  echo \" && cd gettext-$gettext_version \\\\\"\n+  echo \" && ./autogen.sh --skip-gnulib \\\\\"\n+  echo \" && ./configure --disable-nls \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf gettext.tar.gz gettext-$gettext_version\"\n+fi\n+  echo \"\"\n+if [ $arch = ppc64le ] ; then\n+  local make_version=4.2\n+else\n+  local make_version=4.1\n+fi\n+  echo \"# Update make.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O make.tar.gz https://github.com/mirror/make/archive/$make_version.tar.gz \\\\\"\n+  echo \" && tar -xzf make.tar.gz \\\\\"\n+  echo \" && cd make-$make_version \\\\\"\n+  echo \" && ACLOCAL_PATH=/usr/share/aclocal autoreconf -i \\\\\"\n+  echo \" && ./configure \\\\\"\n+  echo \" && make update \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && ln -s make /usr/local/bin/gmake \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf make.tar.gz make-$make_version\"\n+if [ $arch = x86_64 ] ; then\n+  echo \"\"\n+  local nasm_version=2.13.03\n+  echo \"# Install nasm.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O nasm.tar.gz https://www.nasm.us/pub/nasm/releasebuilds/$nasm_version/nasm-$nasm_version.tar.gz \\\\\"\n+  echo \" && tar -xzf nasm.tar.gz \\\\\"\n+  echo \" && cd nasm-$nasm_version \\\\\"\n+  echo \" && ./configure -prefix=/usr/local \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf nasm.tar.gz nasm-$nasm_version\"\n+fi\n+}\n+\n+install_ubuntu_packages() {\n+  echo \"RUN apt-get update \\\\\"\n+  echo \" && apt-get install -qq -y --no-install-recommends \\\\\"\n+  echo \"    software-properties-common \\\\\"\n+if [ $version = 16.04 ] ; then\n+  echo \"    python-software-properties \\\\\"\n+fi\n+  echo \" && add-apt-repository ppa:ubuntu-toolchain-r/test \\\\\"\n+  echo \" && apt-get update \\\\\"\n+  echo \" && apt-get install -qq -y --no-install-recommends \\\\\"\n+  echo \"    ant \\\\\"\n+  echo \"    ant-contrib \\\\\"\n+  echo \"    autoconf \\\\\"\n+  echo \"    build-essential \\\\\"\n+  echo \"    ca-certificates \\\\\"\n+  echo \"    cmake \\\\\"\n+  echo \"    cpio \\\\\"\n+  echo \"    curl \\\\\"\n+  echo \"    file \\\\\"\n+if [ $arch != s390x ] ; then\n+  echo \"    g++-7 \\\\\"\n+  echo \"    gcc-7 \\\\\"\n+fi\n+  echo \"    gdb \\\\\"\n+  echo \"    git \\\\\"\n+  echo \"    libasound2-dev \\\\\"\n+  echo \"    libcups2-dev \\\\\"\n+  echo \"    libdwarf-dev \\\\\"\n+  echo \"    libelf-dev \\\\\"\n+  echo \"    libexpat1-dev \\\\\" # required by the xml parser\n+  echo \"    libffi-dev \\\\\"\n+  echo \"    libfontconfig \\\\\"\n+  echo \"    libfontconfig1-dev \\\\\"\n+  echo \"    libfreetype6-dev \\\\\"\n+if [ $arch != s390x ] ; then\n+  echo \"    libnuma-dev \\\\\"\n+fi\n+if [ $arch = s390x ] ; then\n+  echo \"    libmpc3 \\\\\"\n+fi\n+  echo \"    libssl-dev \\\\\"\n+  echo \"    libx11-dev \\\\\"\n+  echo \"    libxext-dev \\\\\"\n+  echo \"    libxrandr-dev \\\\\"\n+  echo \"    libxrender-dev \\\\\"\n+  echo \"    libxt-dev \\\\\"\n+  echo \"    libxtst-dev \\\\\"\n+  echo \"    make \\\\\"\n+if [ $arch = x86_64 ] ; then\n+  echo \"    nasm \\\\\"\n+fi\n+  echo \"    openssh-client \\\\\"\n+  echo \"    openssh-server \\\\\"\n+  echo \"    perl \\\\\"\n+  echo \"    pkg-config \\\\\"\n+if [ $version = 16.04 ] ; then\n+  echo \"    realpath \\\\\"\n+fi\n+  echo \"    ssh \\\\\"\n+  echo \"    unzip \\\\\"\n+  echo \"    wget \\\\\"\n+  echo \"    xvfb \\\\\"\n+  echo \"    zip \\\\\"\n+  echo \"    zlib1g-dev \\\\\"\n+  echo \" && rm -rf /var/lib/apt/lists/*\"\n+}\n+\n+install_packages() {\n+  echo \"\"\n+  echo \"# Install required OS tools.\"\n+  echo \"\"\n+if [ $dist = centos ] ; then\n+  install_centos_packages\n+else\n+  install_ubuntu_packages\n+fi\n+}\n+\n+install_compilers() {\n+if [ $arch = s390x ] ; then\n+  echo \"\"\n+  local gcc_version=7.5\n+  echo \"# Install gcc.\"\n+  echo \"RUN cd /usr/local \\\\\"\n+  echo \" && $wget_O gcc.tar.xz 'https://ci.adoptopenjdk.net/userContent/gcc/gcc750+ccache.$arch.tar.xz' \\\\\"\n+  echo \" && tar -xJf gcc.tar.xz --strip-components=1 \\\\\"\n+  echo \" && rm -f gcc.tar.xz\"\n+  echo \"\"\n+  echo \"# Create various symbolic links.\"\n+  echo \"RUN ln -s lib/$arch-linux-gnu /usr/lib64 \\\\\"\n+if [ $dist:$version = ubuntu:18.04 ] ; then\n+  # On s390x perl needs version 4 of mpfr, but we only have version 6.\n+  echo \" && ln -s libmpfr.so.6 /usr/lib64/libmpfr.so.4 \\\\\"\n+fi\n+  # /usr/local/include/c++ is a directory that already exists so we create these symbolic links in two steps.\n+  echo \" && ( cd /usr/local/include && for f in \\$(ls /usr/include/s390x-linux-gnu/c++) ; do test -e \\$f || ln -s /usr/include/s390x-linux-gnu/c++/\\$f . ; done ) \\\\\"\n+  echo \" && ln -s \\$(ls -d /usr/include/s390x-linux-gnu/* | grep -v '/c++\\$') /usr/local/include \\\\\"\n+  echo \" && ln -sf ../local/bin/g++-$gcc_version /usr/bin/g++-7 \\\\\"\n+  echo \" && ln -sf ../local/bin/gcc-$gcc_version /usr/bin/gcc-7\"\n+fi\n+if [ $dist != centos ] ; then\n+  echo \"\"\n+  echo \"ENV CC=gcc-7 CXX=g++-7\"\n+fi\n+}\n+\n+install_cmake() {\n+if [ $dist == centos ] ; then\n+  echo \"\"\n+  local cmake_version=3.11\n+  local cmake_name=cmake-$cmake_version.4\n+  echo \"# Install cmake.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O cmake.tar.gz https://cmake.org/files/v$cmake_version/$cmake_name.tar.gz \\\\\"\n+  echo \" && tar -xzf cmake.tar.gz \\\\\"\n+  echo \" && cd $cmake_name \\\\\"\n+  echo \" && export LDFLAGS='-static-libstdc++' \\\\\"\n+  echo \" && ./configure \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf cmake.tar.gz $cmake_name\"\n+fi\n+}\n+\n+prepare_user() {\n+  # Ensure authorized_keys exists.\n+  test -f authorized_keys || touch authorized_keys\n+  # Ensure github.com is a known host.\n+  ( test -f known_hosts && grep -q '^github.com ' known_hosts ) \\\n+    || ssh-keyscan github.com >> known_hosts\n+}\n+\n+create_user() {\n+  echo \"\"\n+  echo \"# Add user home and copy authorized_keys and known_hosts.\"\n+  echo \"RUN useradd -ms /bin/bash $user \\\\\"\n+  echo \" && mkdir /home/$user/.ssh \\\\\"\n+  echo \" && chmod 700 /home/$user/.ssh\"\n+  echo \"COPY authorized_keys known_hosts /home/$user/.ssh/\"\n+  echo \"RUN chown -R $user:$user /home/$user \\\\\"\n+  echo \" && chmod 600 /home/$user/.ssh/authorized_keys /home/$user/.ssh/known_hosts\"\n+}\n+\n+install_freemarker() {\n+  echo \"\"\n+  local freemarker_version=2.3.8\n+  echo \"# Download and extract freemarker.jar to /root/freemarker.jar.\"\n+  echo \"RUN mkdir -p /root \\\\\"\n+  echo \" && cd /root \\\\\"\n+  echo \" && $wget_O freemarker.tar.gz https://sourceforge.net/projects/freemarker/files/freemarker/$freemarker_version/freemarker-$freemarker_version.tar.gz/download \\\\\"\n+  echo \" && tar -xzf freemarker.tar.gz freemarker-$freemarker_version/lib/freemarker.jar --strip=2 \\\\\"\n+  echo \" && rm -f freemarker.tar.gz\"\n+}\n+\n+bootjdk_dirs() {\n+  for version in $@ ; do\n+    if [ $version = 8 ] ; then\n+      echo /usr/lib/jvm/adoptojdk-java-80\n+    else\n+      echo /usr/lib/jvm/adoptojdk-java-$version\n+    fi\n+  done\n+}\n+\n+bootjdk_url() {\n+  local version=$1\n+  if [ $arch = x86_64 ] ; then\n+    echo https://api.adoptopenjdk.net/v3/binary/latest/$version/ga/linux/x64/jdk/openj9/normal/adoptopenjdk\n+  else\n+    echo https://api.adoptopenjdk.net/v3/binary/latest/$version/ga/linux/$arch/jdk/openj9/normal/adoptopenjdk\n+  fi\n+}\n+\n+install_bootjdks() {\n+  local versions=\"8 11 13 14\"\n+  echo \"\"\n+  echo \"# Download and install boot JDKs from AdoptOpenJDK.\"\n+  echo \"RUN cd /tmp \\\\\"\n+for version in $versions ; do\n+  echo \" && $wget_O jdk$version.tar.gz $(bootjdk_url $version) \\\\\"\n+done\n+  echo \" && mkdir -p\" $(bootjdk_dirs $versions) \"\\\\\"\n+for version in $versions ; do\n+  echo \" && tar -xzf jdk$version.tar.gz --directory=$(bootjdk_dirs $version)/ --strip=1 \\\\\"\n+done\n+  echo \" && rm -f jdk*.tar.gz\"\n+}\n+\n+install_cuda() {\n+  echo \"\"\n+  echo \"# Copy header files necessary to build a VM with CUDA support.\"\n+  echo \"RUN mkdir -p /usr/local/cuda-${cuda}/nvvm\"\n+  echo \"COPY --from=cuda-dev /usr/local/cuda-${cuda}/include      /usr/local/cuda-${cuda}/include\"\n+  echo \"COPY --from=cuda-dev /usr/local/cuda-${cuda}/nvvm/include /usr/local/cuda-${cuda}/nvvm/include\"\n+  echo \"ENV CUDA_HOME=/usr/local/cuda-${cuda}\"\n+}\n+\n+install_python() {\n+  local python_version=3.7.3\n+  echo \"\"\n+  echo \"# Install python.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O python.tar.xz https://www.python.org/ftp/python/$python_version/Python-$python_version.tar.xz \\\\\"\n+  echo \" && tar -xJf python.tar.xz \\\\\"\n+  echo \" && cd Python-$python_version \\\\\"\n+  echo \" && ./configure --prefix=/usr/local \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf python.tar.xz Python-$python_version\"\n+}\n+\n+adjust_ldconfig() {\n+  echo \"\"\n+  echo \"# Run ldconfig to discover newly installed shared libraries.\"\n+  echo \"RUN for dir in lib lib64 ; do echo /usr/local/$dir ; done > /etc/ld.so.conf.d/usr-local.conf \\\\\"\n+  echo \" && ldconfig\"\n+}\n+\n+# called as: add_git_remote remote url\n+add_git_remote() {\n+  echo \" && git remote add ${1} ${2} \\\\\"\n+  # Like-named (and conflicting) tags exist in multiple repositories: don't fetch any tags.\n+  echo \" && git config remote.${1}.tagopt --no-tags \\\\\"\n+}\n+\n+create_git_cache() {\n+  # The jdk14 remote is fetched first because that repository was subjected to\n+  # 'git gc --aggressive --prune=all' before it was first published making it much\n+  # smaller than the other jdk repositories. There is a large degree of overlap\n+  # among the jdk repositories so a relatively small number of commits must be\n+  # fetched from the others.\n+  echo \"\"\n+  echo \"# Setup a reference repository cache for faster clones in containers.\"\n+  echo \"RUN mkdir /home/$user/git_cache \\\\\"\n+  echo \" && cd /home/$user/git_cache \\\\\"\n+  echo \" && git init --bare \\\\\"\n+  add_git_remote jdk8    https://github.com/ibmruntimes/openj9-openjdk-jdk8.git\n+  add_git_remote jdk11   https://github.com/ibmruntimes/openj9-openjdk-jdk11.git\n+  add_git_remote jdk14   https://github.com/ibmruntimes/openj9-openjdk-jdk14.git\n+  add_git_remote jdknext https://github.com/ibmruntimes/openj9-openjdk-jdk.git\n+  add_git_remote omr     https://github.com/eclipse/openj9-omr.git\n+  add_git_remote openj9  https://github.com/eclipse/openj9.git\n+  echo \" && echo Fetching repository cache... \\\\\"\n+  echo \" && git fetch jdk14 \\\\\"\n+  echo \" && git fetch --all \\\\\"\n+  echo \" && echo Shrinking repository cache... \\\\\"\n+  echo \" && git gc --aggressive --prune=all\"\n+}\n+\n+configure_ssh() {\n+  echo \"\"\n+  echo \"# Configure sshd.\"\n+  echo \"RUN mkdir /var/run/sshd \\\\\"\n+  echo \" && sed -i -e 's|#PermitRootLogin|PermitRootLogin|' \\\\\"\n+  echo \"           -e 's|#RSAAuthentication.*|RSAAuthentication yes|' \\\\\"\n+  echo \"           -e 's|#PubkeyAuthentication.*|PubkeyAuthentication yes|' /etc/ssh/sshd_config\"\n+  echo \"\"\n+  echo \"# SSH login fix so user is not kicked off after login.\"\n+  echo \"RUN sed -i -e 's|session\\s*required\\s*pam_loginuid.so|session optional pam_loginuid.so|' /etc/pam.d/sshd\"\n+  echo \"\"\n+  echo \"# Expose SSH port.\"\n+  echo \"EXPOSE 22\"\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24771d8a3d3bf6d37d10a0ddf97a4d4b6b478c46"}, "originalPosition": 661}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "257635c1d3910753b0bc118f0a39589a52b8561b", "author": {"user": {"login": "keithc-ca", "name": "Keith W. Campbell"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/257635c1d3910753b0bc118f0a39589a52b8561b", "committedDate": "2020-04-29T20:22:37Z", "message": "Add Dockerfile generation script\n\n* add support for Ubuntu 20.04\n* use api.adoptopenjdk.net/v3 to fetch boot JDKs 8, 11, 13, 14\n* link cmake with '-static-libstdc++'\n* install gcc version 7.5 on CentOS from adoptopenjdk\n* install git version 2.5.3 from source on CentOS\n* install make on CentOS (4.1 for x86; 4.2 for ppc64le)\n* install nasm version 2.13.03 from source on CentOS for x86\n\n[ci skip]\n\nSigned-off-by: Keith W. Campbell <keithc@ca.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "739f784d6809e3b983006dc7245118df8fd54dca", "author": {"user": {"login": "keithc-ca", "name": "Keith W. Campbell"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/739f784d6809e3b983006dc7245118df8fd54dca", "committedDate": "2020-04-29T20:22:38Z", "message": "Remove Dockerfiles obsoleted by mkdocker.sh\n\n* relocate ARM Dockerfiles\n\n[ci skip]\n\nSigned-off-by: Keith W. Campbell <keithc@ca.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b51123635e66da02324e418d9758282292a6103", "author": {"user": {"login": "keithc-ca", "name": "Keith W. Campbell"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/8b51123635e66da02324e418d9758282292a6103", "committedDate": "2020-04-29T20:22:38Z", "message": "Update references to obsolete Dockerfiles\n\n[ci skip]\n\nSigned-off-by: Keith W. Campbell <keithc@ca.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28e4c7f0acfb4c3881332765173cb263dd256229", "author": {"user": {"login": "keithc-ca", "name": "Keith W. Campbell"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/28e4c7f0acfb4c3881332765173cb263dd256229", "committedDate": "2020-04-29T20:22:39Z", "message": "Simplify ansible Dockerfile\n\n[ci skip]\n\nSigned-off-by: Keith W. Campbell <keithc@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "24771d8a3d3bf6d37d10a0ddf97a4d4b6b478c46", "author": {"user": {"login": "keithc-ca", "name": "Keith W. Campbell"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/24771d8a3d3bf6d37d10a0ddf97a4d4b6b478c46", "committedDate": "2020-04-29T01:37:59Z", "message": "Simplify ansible Dockerfile\n\n[ci skip]\n\nSigned-off-by: Keith W. Campbell <keithc@ca.ibm.com>"}, "afterCommit": {"oid": "28e4c7f0acfb4c3881332765173cb263dd256229", "author": {"user": {"login": "keithc-ca", "name": "Keith W. Campbell"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/28e4c7f0acfb4c3881332765173cb263dd256229", "committedDate": "2020-04-29T20:22:39Z", "message": "Simplify ansible Dockerfile\n\n[ci skip]\n\nSigned-off-by: Keith W. Campbell <keithc@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzMDI5NzE2", "url": "https://github.com/eclipse-openj9/openj9/pull/9371#pullrequestreview-403029716", "createdAt": "2020-04-29T20:52:14Z", "commit": {"oid": "28e4c7f0acfb4c3881332765173cb263dd256229"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1088, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}