{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4ODAzNTA3", "number": 8448, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMzowMzo0OVrODcOr3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwMTo1Nzo0NFrODcgPng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwOTI3MzI2OnYy", "diffSide": "RIGHT", "path": "runtime/gc_modron_startup/mminit.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMzowMzo0OVrOFkKvBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMzowMzo0OVrOFkKvBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ2ODkzNQ==", "bodyText": "Something missing here?  If its waiting on OMR functionality there should be a comment as a reminder", "url": "https://github.com/eclipse-openj9/openj9/pull/8448#discussion_r373468935", "createdAt": "2020-01-31T13:03:49Z", "author": {"login": "DanHeidinga"}, "path": "runtime/gc_modron_startup/mminit.cpp", "diffHunk": "@@ -3060,14 +3060,39 @@ hookAcquireVMAccess(J9HookInterface** hook, UDATA eventNum, void* voidEventData,\n {\n \tJ9VMAcquireVMAccessEvent* eventData = (J9VMAcquireVMAccessEvent*)voidEventData;\n \n-\tJ9VMThread *vmThread = eventData->currentThread;\n-\tMM_EnvironmentStandard *env = MM_EnvironmentStandard::getEnvironment(vmThread->omrVMThread);\n-\tMM_GCExtensions* ext = MM_GCExtensions::getExtensions(vmThread);\n+\tJ9VMThread *currentThread = eventData->currentThread;\n+\tMM_EnvironmentStandard *env = MM_EnvironmentStandard::getEnvironment(currentThread->omrVMThread);\n+\tMM_GCExtensions* ext = MM_GCExtensions::getExtensions(currentThread);\n \n \tAssert_MM_true(ext->concurrentScavenger);\n \n \text->scavenger->switchConcurrentForThread(env);\n }\n+\n+static void\n+hookReleaseVMAccess(J9HookInterface** hook, UDATA eventNum, void* voidEventData, void* userData)\n+{\n+\tJ9VMReleaseVMAccessEvent* eventData = (J9VMReleaseVMAccessEvent*)voidEventData;\n+\n+\tJ9VMThread *currentThread = eventData->currentThread;\n+\tMM_GCExtensions* ext = MM_GCExtensions::getExtensions(currentThread);\n+\n+\tif (ext->isConcurrentScavengerInProgress()) {\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efbcd94e91c528974bf543ed266cba67f3cb518f"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwOTI3MzcwOnYy", "diffSide": "RIGHT", "path": "runtime/gc_modron_startup/mminit.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMzowNDowMVrOFkKvSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMzowNDowMVrOFkKvSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ2OTAwMw==", "bodyText": "Same here", "url": "https://github.com/eclipse-openj9/openj9/pull/8448#discussion_r373469003", "createdAt": "2020-01-31T13:04:01Z", "author": {"login": "DanHeidinga"}, "path": "runtime/gc_modron_startup/mminit.cpp", "diffHunk": "@@ -3060,14 +3060,39 @@ hookAcquireVMAccess(J9HookInterface** hook, UDATA eventNum, void* voidEventData,\n {\n \tJ9VMAcquireVMAccessEvent* eventData = (J9VMAcquireVMAccessEvent*)voidEventData;\n \n-\tJ9VMThread *vmThread = eventData->currentThread;\n-\tMM_EnvironmentStandard *env = MM_EnvironmentStandard::getEnvironment(vmThread->omrVMThread);\n-\tMM_GCExtensions* ext = MM_GCExtensions::getExtensions(vmThread);\n+\tJ9VMThread *currentThread = eventData->currentThread;\n+\tMM_EnvironmentStandard *env = MM_EnvironmentStandard::getEnvironment(currentThread->omrVMThread);\n+\tMM_GCExtensions* ext = MM_GCExtensions::getExtensions(currentThread);\n \n \tAssert_MM_true(ext->concurrentScavenger);\n \n \text->scavenger->switchConcurrentForThread(env);\n }\n+\n+static void\n+hookReleaseVMAccess(J9HookInterface** hook, UDATA eventNum, void* voidEventData, void* userData)\n+{\n+\tJ9VMReleaseVMAccessEvent* eventData = (J9VMReleaseVMAccessEvent*)voidEventData;\n+\n+\tJ9VMThread *currentThread = eventData->currentThread;\n+\tMM_GCExtensions* ext = MM_GCExtensions::getExtensions(currentThread);\n+\n+\tif (ext->isConcurrentScavengerInProgress()) {\n+\t}\n+}\n+\n+static void\n+hookAcquiringExclusiveInNative(J9HookInterface** hook, UDATA eventNum, void* voidEventData, void* userData)\n+{\n+\tJ9VMAcquringExclusiveInNativeEvent* eventData = (J9VMAcquringExclusiveInNativeEvent*)voidEventData;\n+\n+\tJ9VMThread *currentThread = eventData->currentThread;\n+\tMM_GCExtensions* ext = MM_GCExtensions::getExtensions(currentThread);\n+\n+\tif (ext->isConcurrentScavengerInProgress()) {\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efbcd94e91c528974bf543ed266cba67f3cb518f"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwOTI3OTIxOnYy", "diffSide": "RIGHT", "path": "runtime/gc_glue_java/ScavengerDelegate.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMzowNjozMlrOFkKysw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMzowNjozMlrOFkKysw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ2OTg3NQ==", "bodyText": "Is it worth fetching the J9InternalVMFunctions table into a local outside the loop?", "url": "https://github.com/eclipse-openj9/openj9/pull/8448#discussion_r373469875", "createdAt": "2020-01-31T13:06:32Z", "author": {"login": "DanHeidinga"}, "path": "runtime/gc_glue_java/ScavengerDelegate.cpp", "diffHunk": "@@ -714,6 +733,30 @@ MM_ScavengerDelegate::switchConcurrentForThread(MM_EnvironmentBase *env)\n #endif\n     }\n }\n+\n+void\n+MM_ScavengerDelegate::signalThreadsToFlushCaches(MM_EnvironmentBase *envBase)\n+{\n+\tJ9VMThread *walkThread = NULL;\n+\n+\tGC_VMThreadListIterator vmThreadListIterator(_javaVM);\n+\n+\tGC_VMInterface::lockVMThreadList(_extensions);\n+\n+\twhile((walkThread = vmThreadListIterator.nextVMThread()) != NULL) {\n+\t\t_javaVM->internalVMFunctions->J9SignalAsyncEvent(_javaVM, walkThread, _flushCachesAsyncCallbackKey);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efbcd94e91c528974bf543ed266cba67f3cb518f"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjE1MDA2OnYy", "diffSide": "RIGHT", "path": "runtime/gc_glue_java/ScavengerDelegate.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwMTo1Nzo0NVrOFkk5JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNToyNjoyNVrOFk1Slw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg5NzUwOA==", "bodyText": "This can be achieved by passing NULL as the thread to J9SignalAsyncEvent - it will do the locking and signal all threads.", "url": "https://github.com/eclipse-openj9/openj9/pull/8448#discussion_r373897508", "createdAt": "2020-02-03T01:57:45Z", "author": {"login": "gacholio"}, "path": "runtime/gc_glue_java/ScavengerDelegate.cpp", "diffHunk": "@@ -714,6 +733,31 @@ MM_ScavengerDelegate::switchConcurrentForThread(MM_EnvironmentBase *env)\n #endif\n     }\n }\n+\n+void\n+MM_ScavengerDelegate::signalThreadsToFlushCaches(MM_EnvironmentBase *envBase)\n+{\n+\tJ9InternalVMFunctions const * const vmFuncs = _javaVM->internalVMFunctions;\n+\tJ9VMThread *walkThread = NULL;\n+\n+\tGC_VMThreadListIterator vmThreadListIterator(_javaVM);\n+\n+\tGC_VMInterface::lockVMThreadList(_extensions);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3531b2bdcc99584b1d4d60bb13df6ba99a0861dc"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE2NjE2Nw==", "bodyText": "I will add more per-thread action than just signal threads in this loop, so I'd rather leave it as is. Again, with some other stub code in this PR, it's waiting for dependent OMR changes, before I can invoke it here.", "url": "https://github.com/eclipse-openj9/openj9/pull/8448#discussion_r374166167", "createdAt": "2020-02-03T15:26:25Z", "author": {"login": "amicic"}, "path": "runtime/gc_glue_java/ScavengerDelegate.cpp", "diffHunk": "@@ -714,6 +733,31 @@ MM_ScavengerDelegate::switchConcurrentForThread(MM_EnvironmentBase *env)\n #endif\n     }\n }\n+\n+void\n+MM_ScavengerDelegate::signalThreadsToFlushCaches(MM_EnvironmentBase *envBase)\n+{\n+\tJ9InternalVMFunctions const * const vmFuncs = _javaVM->internalVMFunctions;\n+\tJ9VMThread *walkThread = NULL;\n+\n+\tGC_VMThreadListIterator vmThreadListIterator(_javaVM);\n+\n+\tGC_VMInterface::lockVMThreadList(_extensions);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg5NzUwOA=="}, "originalCommit": {"oid": "3531b2bdcc99584b1d4d60bb13df6ba99a0861dc"}, "originalPosition": 53}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 673, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}