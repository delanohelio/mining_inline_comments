{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwMjc0MjIy", "number": 9613, "title": "Fixed imm value for addis and lis", "bodyText": "addis and lis accept a signed 16 bit value as an immediate. They are passed\ninto generateTrg1Src1ImmInstruction as signed 32 bit values. In some edge\ncases, the sign extension was not handled properly. In most cases this was\ndue to the value being incremented after sign extension. In other cases it\nwas due to an unnecessary mask clearing the upper 16 bits.\nOne case in genInstanceOfOrCheckCastSuperClassTest was handled incorrectly.\naddis should be used instead of lis to reconstruct the 32 bit immediate value\nto be added.\nCloses: #9612\nSigned-off-by: jimmyk jimmyk@ca.ibm.com", "createdAt": "2020-05-19T17:55:24Z", "url": "https://github.com/eclipse-openj9/openj9/pull/9613", "merged": true, "mergeCommit": {"oid": "737e381d601f58e967f547d23ad051698bdc11c8"}, "closed": true, "closedAt": "2020-06-17T14:36:20Z", "author": {"login": "IBMJimmyk"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcjN4sFgFqTQxNTYzMzA5OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcqjJ3IgFqTQyOTc1NDY3MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1NjMzMDk5", "url": "https://github.com/eclipse-openj9/openj9/pull/9613#pullrequestreview-415633099", "createdAt": "2020-05-20T19:04:07Z", "commit": {"oid": "ed418f54066327aa5afa1b1e59cb190f28177167"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2MzkxMTAy", "url": "https://github.com/eclipse-openj9/openj9/pull/9613#pullrequestreview-416391102", "createdAt": "2020-05-21T18:31:41Z", "commit": {"oid": "ed418f54066327aa5afa1b1e59cb190f28177167"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2NDIzMzM3", "url": "https://github.com/eclipse-openj9/openj9/pull/9613#pullrequestreview-416423337", "createdAt": "2020-05-21T19:20:13Z", "commit": {"oid": "ed418f54066327aa5afa1b1e59cb190f28177167"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3Njk2MjAy", "url": "https://github.com/eclipse-openj9/openj9/pull/9613#pullrequestreview-417696202", "createdAt": "2020-05-25T13:02:33Z", "commit": {"oid": "7189324aeacf873df83829ab6281a106efcc83e8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMzowMjozM1rOGaAbqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMzowMjozM1rOGaAbqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkyMzI0MA==", "bodyText": "This is wrong. It deals with legitimate offsets such as 0x80000000 wrongly, turning them into positive offsets. You need to test specifically the other situations.", "url": "https://github.com/eclipse-openj9/openj9/pull/9613#discussion_r429923240", "createdAt": "2020-05-25T13:02:33Z", "author": {"login": "zl-wang"}, "path": "runtime/compiler/p/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -1235,7 +1235,15 @@ void loadFieldWatchSnippet(TR::CodeGenerator *cg, TR::Node *node, TR::Snippet *d\n       {\n       if (beginIndex<LOWER_IMMED || beginIndex>UPPER_IMMED)\n          {\n-         generateTrg1Src1ImmInstruction(cg, TR::InstOpCode::addis, node, scratchReg, cg->getTOCBaseRegister(), HI_VALUE(beginIndex));\n+         if (0x00008000 == HI_VALUE(beginIndex))\n+            {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7189324aeacf873df83829ab6281a106efcc83e8"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3NzI0NzMz", "url": "https://github.com/eclipse-openj9/openj9/pull/9613#pullrequestreview-417724733", "createdAt": "2020-05-25T13:51:33Z", "commit": {"oid": "7189324aeacf873df83829ab6281a106efcc83e8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyNjM2MTU0", "url": "https://github.com/eclipse-openj9/openj9/pull/9613#pullrequestreview-422636154", "createdAt": "2020-06-02T12:43:34Z", "commit": {"oid": "ea26fdb552ee3a61a224614c35250321b4e57b25"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NzA2NTU0", "url": "https://github.com/eclipse-openj9/openj9/pull/9613#pullrequestreview-425706554", "createdAt": "2020-06-06T02:37:47Z", "commit": {"oid": "ea26fdb552ee3a61a224614c35250321b4e57b25"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwMjozNzo0N1rOGgBX1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwMjozNzo0N1rOGgBX1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzMDEwMQ==", "bodyText": "Could you please clarify why this instruction is needed? I thought just lis would be enough for any HI_VALUE.", "url": "https://github.com/eclipse-openj9/openj9/pull/9613#discussion_r436230101", "createdAt": "2020-06-06T02:37:47Z", "author": {"login": "gita-omr"}, "path": "runtime/compiler/p/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -6738,8 +6751,16 @@ static void genHeapAlloc(TR::Node *node, TR::Instruction *&iCursor, TR_OpaqueCla\n          iCursor = generateTrg1ImmInstruction(cg, TR::InstOpCode::li, node, zeroReg, 0, iCursor);\n          if (sizeInReg)\n             {\n-            iCursor = generateTrg1ImmInstruction(cg, TR::InstOpCode::lis, node, sizeReg, (allocSize >> 16) + ((allocSize & (1 << 15)) ? 1 : 0), iCursor);\n-            iCursor = generateTrg1Src1ImmInstruction(cg, TR::InstOpCode::addi, node, sizeReg, sizeReg, allocSize & 0x0000FFFF, iCursor);\n+            if (0x00008000 == HI_VALUE(allocSize))\n+               {\n+               iCursor = generateTrg1ImmInstruction(cg, TR::InstOpCode::lis, node, sizeReg, HI_VALUE(allocSize), iCursor);\n+               iCursor = generateTrg1Src1Imm2Instruction(cg, TR::InstOpCode::rlwinm, node, sizeReg, sizeReg, 0, 0xFFFFFFFF, iCursor);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea26fdb552ee3a61a224614c35250321b4e57b25"}, "originalPosition": 61}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "992dfa1cb78d16232c9259e55b04d79d84d3687b", "author": {"user": {"login": "IBMJimmyk", "name": "Jimmy K"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/992dfa1cb78d16232c9259e55b04d79d84d3687b", "committedDate": "2020-06-11T16:13:42Z", "message": "Fixed imm value for addis and lis\n\naddis and lis accept a signed 16 bit value as an immediate. They are passed\ninto generateTrg1Src1ImmInstruction as signed 32 bit values. In some edge\ncases, the sign extension was not handled properly. In most cases this was\ndue to the value being incremented after sign extension. In other cases it\nwas due to an unnecessary mask clearing the upper 16 bits.\n\nOne case in genInstanceOfOrCheckCastSuperClassTest was handled incorrectly.\naddis should be used instead of lis to reconstruct the 32 bit immediate value\nto be added.\n\nFor cases where the TOC offset is unusually large, I put in an assert instead\nof generating instructions. The reasoning was TOC offsets of this size should\nnever occur so those code paths would never be tested. Also TOC offsets of\nthat size are likely an indication of a problem elsewhere.\n\nCloses: #9612\nSigned-off-by: jimmyk <jimmyk@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1fc5127c6247fd3c023c4844ad1c33e8c1b15562", "author": {"user": {"login": "IBMJimmyk", "name": "Jimmy K"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/1fc5127c6247fd3c023c4844ad1c33e8c1b15562", "committedDate": "2020-06-08T13:27:07Z", "message": "Fixed incorrect instruction generation\n\nI made a mistake updating one of the locations that were changed. This fixes\nit."}, "afterCommit": {"oid": "992dfa1cb78d16232c9259e55b04d79d84d3687b", "author": {"user": {"login": "IBMJimmyk", "name": "Jimmy K"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/992dfa1cb78d16232c9259e55b04d79d84d3687b", "committedDate": "2020-06-11T16:13:42Z", "message": "Fixed imm value for addis and lis\n\naddis and lis accept a signed 16 bit value as an immediate. They are passed\ninto generateTrg1Src1ImmInstruction as signed 32 bit values. In some edge\ncases, the sign extension was not handled properly. In most cases this was\ndue to the value being incremented after sign extension. In other cases it\nwas due to an unnecessary mask clearing the upper 16 bits.\n\nOne case in genInstanceOfOrCheckCastSuperClassTest was handled incorrectly.\naddis should be used instead of lis to reconstruct the 32 bit immediate value\nto be added.\n\nFor cases where the TOC offset is unusually large, I put in an assert instead\nof generating instructions. The reasoning was TOC offsets of this size should\nnever occur so those code paths would never be tested. Also TOC offsets of\nthat size are likely an indication of a problem elsewhere.\n\nCloses: #9612\nSigned-off-by: jimmyk <jimmyk@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5NzU0Njcw", "url": "https://github.com/eclipse-openj9/openj9/pull/9613#pullrequestreview-429754670", "createdAt": "2020-06-12T13:48:21Z", "commit": {"oid": "992dfa1cb78d16232c9259e55b04d79d84d3687b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 987, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}