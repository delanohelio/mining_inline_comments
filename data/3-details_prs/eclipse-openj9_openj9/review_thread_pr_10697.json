{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyNzE4NDgz", "number": 10697, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMToxMzoyMVrOEoUBUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMjo1Nzo1NVrOEqgkBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzA2NTE0OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/env/J9CPU.hpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMToxMzoyMVrOHZU4jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMToxMzoyMVrOHZU4jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxODYwNg==", "bodyText": "I would like some comments on the meaning of the parameters and what this function is supposed to do", "url": "https://github.com/eclipse-openj9/openj9/pull/10697#discussion_r496318606", "createdAt": "2020-09-29T01:13:21Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/env/J9CPU.hpp", "diffHunk": "@@ -45,12 +45,17 @@ class OMR_EXTENSIBLE CPU : public OMR::CPUConnector\n    CPU() : OMR::CPUConnector() {}\n    CPU(const OMRProcessorDesc& processorDescription) : OMR::CPUConnector(processorDescription) {}\n \n+   static OMRProcessorDesc _featureMasks;\n+   static bool _shouldUseFeatureMasks; \n+   static void applyFeatureMasks(OMRProcessorDesc& processorDescription, const uint32_t* enabledFeatures, size_t size); ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e33cf97cd15799432c6b23ec0f86a9d5a4f6612"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzA2NTIwOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/env/J9CPU.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMToxMzoyMlrOHZU4lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMToyODowMVrOHZVILA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxODYxMw==", "bodyText": "In c++ initializing all elements wit 0 can be done with array[10] = {0} or even array[10]={}", "url": "https://github.com/eclipse-openj9/openj9/pull/10697#discussion_r496318613", "createdAt": "2020-09-29T01:13:22Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/env/J9CPU.cpp", "diffHunk": "@@ -28,8 +28,9 @@\n #include \"env/CompilerEnv.hpp\"\n #include \"env/CPU.hpp\"\n #include \"env/VMJ9.h\"\n-#include \"j9.h\"\n-#include \"j9port.h\"\n+\n+OMRProcessorDesc J9::CPU::_featureMasks = {OMR_PROCESSOR_UNDEFINED, OMR_PROCESSOR_UNDEFINED, {0, 0, 0, 0, 0}};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e33cf97cd15799432c6b23ec0f86a9d5a4f6612"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyMjYwNA==", "bodyText": "Note that statics are risky for multiple compilation threads and they usually don't work with JITServer", "url": "https://github.com/eclipse-openj9/openj9/pull/10697#discussion_r496322604", "createdAt": "2020-09-29T01:28:01Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/env/J9CPU.cpp", "diffHunk": "@@ -28,8 +28,9 @@\n #include \"env/CompilerEnv.hpp\"\n #include \"env/CPU.hpp\"\n #include \"env/VMJ9.h\"\n-#include \"j9.h\"\n-#include \"j9port.h\"\n+\n+OMRProcessorDesc J9::CPU::_featureMasks = {OMR_PROCESSOR_UNDEFINED, OMR_PROCESSOR_UNDEFINED, {0, 0, 0, 0, 0}};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxODYxMw=="}, "originalCommit": {"oid": "6e33cf97cd15799432c6b23ec0f86a9d5a4f6612"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzA4ODY0OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/env/J9CPU.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMToyNTozOFrOHZVF1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNToxMDowMFrOHZyISg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyMjAwNg==", "bodyText": "Since _featureMasks are reset and created in this routine just to be copied over to processorDescription why don't we declare the _featureMasks as a local in this function?", "url": "https://github.com/eclipse-openj9/openj9/pull/10697#discussion_r496322006", "createdAt": "2020-09-29T01:25:38Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/env/J9CPU.cpp", "diffHunk": "@@ -43,3 +44,29 @@ J9::CPU::getProcessorDescription()\n #endif /* defined(J9VM_OPT_JITSERVER) */\n    return _processorDescription;\n    }\n+\n+void\n+J9::CPU::applyFeatureMasks(OMRProcessorDesc& processorDescription, const uint32_t* enabledFeatures, size_t size)\n+   {\n+   OMRPORT_ACCESS_FROM_OMRPORT(TR::Compiler->omrPortLib);\n+   memset(_featureMasks.features, 0, OMRPORT_SYSINFO_FEATURES_SIZE*sizeof(uint32_t));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e33cf97cd15799432c6b23ec0f86a9d5a4f6612"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc5Nzc3MA==", "bodyText": "The reason we don't declare _featureMasks as a local in this function is because _featureMasks will be repeatedly used by supportsFeature() to detect query to unused features (which is an illegal action).", "url": "https://github.com/eclipse-openj9/openj9/pull/10697#discussion_r496797770", "createdAt": "2020-09-29T15:10:00Z", "author": {"login": "harryyu1994"}, "path": "runtime/compiler/env/J9CPU.cpp", "diffHunk": "@@ -43,3 +44,29 @@ J9::CPU::getProcessorDescription()\n #endif /* defined(J9VM_OPT_JITSERVER) */\n    return _processorDescription;\n    }\n+\n+void\n+J9::CPU::applyFeatureMasks(OMRProcessorDesc& processorDescription, const uint32_t* enabledFeatures, size_t size)\n+   {\n+   OMRPORT_ACCESS_FROM_OMRPORT(TR::Compiler->omrPortLib);\n+   memset(_featureMasks.features, 0, OMRPORT_SYSINFO_FEATURES_SIZE*sizeof(uint32_t));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyMjAwNg=="}, "originalCommit": {"oid": "6e33cf97cd15799432c6b23ec0f86a9d5a4f6612"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzEwOTg1OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/env/J9CPU.cpp", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMTozNzoyOFrOHZVR_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNTozNjowOFrOHZzqBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyNTExOQ==", "bodyText": "Note: if applyFeatureMasks can be executed by multiple threads, you cannot expect the features you set previously to remain set in the presence of multiple compilation threads.", "url": "https://github.com/eclipse-openj9/openj9/pull/10697#discussion_r496325119", "createdAt": "2020-09-29T01:37:28Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/env/J9CPU.cpp", "diffHunk": "@@ -43,3 +44,29 @@ J9::CPU::getProcessorDescription()\n #endif /* defined(J9VM_OPT_JITSERVER) */\n    return _processorDescription;\n    }\n+\n+void\n+J9::CPU::applyFeatureMasks(OMRProcessorDesc& processorDescription, const uint32_t* enabledFeatures, size_t size)\n+   {\n+   OMRPORT_ACCESS_FROM_OMRPORT(TR::Compiler->omrPortLib);\n+   memset(_featureMasks.features, 0, OMRPORT_SYSINFO_FEATURES_SIZE*sizeof(uint32_t));\n+   for (size_t i = 0; i < size; i++)\n+      {\n+      omrsysinfo_processor_set_feature(&_featureMasks, enabledFeatures[i], TRUE);\n+      }\n+   _shouldUseFeatureMasks = true;\n+   \n+   for (size_t i = 0; i < OMRPORT_SYSINFO_FEATURES_SIZE; i++)\n+      {\n+      processorDescription.features[i] &= _featureMasks.features[i];\n+      }\n+   }\n+\n+bool\n+J9::CPU::supportsFeature(uint32_t feature)\n+   {\n+   OMRPORT_ACCESS_FROM_OMRPORT(TR::Compiler->omrPortLib);\n+   if (_shouldUseFeatureMasks)\n+      TR_ASSERT_FATAL(TRUE == omrsysinfo_processor_has_feature(&_featureMasks, feature), \"new feature usage detected, please enable feature %d in TR::CPU::applyUserOptions()\\n\", feature);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e33cf97cd15799432c6b23ec0f86a9d5a4f6612"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjgwMzQ3Mw==", "bodyText": "applyFeatureMasks is supposed to be only executed once through applyUserOptions() on the TR::Compiler->target.cpu singleton. It's a helper function for applyUserOptions() and should not be used by the user directly.\nI don't like the design either but I have yet to come up with a better design.", "url": "https://github.com/eclipse-openj9/openj9/pull/10697#discussion_r496803473", "createdAt": "2020-09-29T15:17:25Z", "author": {"login": "harryyu1994"}, "path": "runtime/compiler/env/J9CPU.cpp", "diffHunk": "@@ -43,3 +44,29 @@ J9::CPU::getProcessorDescription()\n #endif /* defined(J9VM_OPT_JITSERVER) */\n    return _processorDescription;\n    }\n+\n+void\n+J9::CPU::applyFeatureMasks(OMRProcessorDesc& processorDescription, const uint32_t* enabledFeatures, size_t size)\n+   {\n+   OMRPORT_ACCESS_FROM_OMRPORT(TR::Compiler->omrPortLib);\n+   memset(_featureMasks.features, 0, OMRPORT_SYSINFO_FEATURES_SIZE*sizeof(uint32_t));\n+   for (size_t i = 0; i < size; i++)\n+      {\n+      omrsysinfo_processor_set_feature(&_featureMasks, enabledFeatures[i], TRUE);\n+      }\n+   _shouldUseFeatureMasks = true;\n+   \n+   for (size_t i = 0; i < OMRPORT_SYSINFO_FEATURES_SIZE; i++)\n+      {\n+      processorDescription.features[i] &= _featureMasks.features[i];\n+      }\n+   }\n+\n+bool\n+J9::CPU::supportsFeature(uint32_t feature)\n+   {\n+   OMRPORT_ACCESS_FROM_OMRPORT(TR::Compiler->omrPortLib);\n+   if (_shouldUseFeatureMasks)\n+      TR_ASSERT_FATAL(TRUE == omrsysinfo_processor_has_feature(&_featureMasks, feature), \"new feature usage detected, please enable feature %d in TR::CPU::applyUserOptions()\\n\", feature);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyNTExOQ=="}, "originalCommit": {"oid": "6e33cf97cd15799432c6b23ec0f86a9d5a4f6612"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjgxMDc3MA==", "bodyText": "Maybe I should make _featureMasks into a member field for cpu. That way each cpu has their own _featureMasks which could make more sense. applyUserOptions() is executed once for each newly created cpu object post initialization.", "url": "https://github.com/eclipse-openj9/openj9/pull/10697#discussion_r496810770", "createdAt": "2020-09-29T15:24:57Z", "author": {"login": "harryyu1994"}, "path": "runtime/compiler/env/J9CPU.cpp", "diffHunk": "@@ -43,3 +44,29 @@ J9::CPU::getProcessorDescription()\n #endif /* defined(J9VM_OPT_JITSERVER) */\n    return _processorDescription;\n    }\n+\n+void\n+J9::CPU::applyFeatureMasks(OMRProcessorDesc& processorDescription, const uint32_t* enabledFeatures, size_t size)\n+   {\n+   OMRPORT_ACCESS_FROM_OMRPORT(TR::Compiler->omrPortLib);\n+   memset(_featureMasks.features, 0, OMRPORT_SYSINFO_FEATURES_SIZE*sizeof(uint32_t));\n+   for (size_t i = 0; i < size; i++)\n+      {\n+      omrsysinfo_processor_set_feature(&_featureMasks, enabledFeatures[i], TRUE);\n+      }\n+   _shouldUseFeatureMasks = true;\n+   \n+   for (size_t i = 0; i < OMRPORT_SYSINFO_FEATURES_SIZE; i++)\n+      {\n+      processorDescription.features[i] &= _featureMasks.features[i];\n+      }\n+   }\n+\n+bool\n+J9::CPU::supportsFeature(uint32_t feature)\n+   {\n+   OMRPORT_ACCESS_FROM_OMRPORT(TR::Compiler->omrPortLib);\n+   if (_shouldUseFeatureMasks)\n+      TR_ASSERT_FATAL(TRUE == omrsysinfo_processor_has_feature(&_featureMasks, feature), \"new feature usage detected, please enable feature %d in TR::CPU::applyUserOptions()\\n\", feature);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyNTExOQ=="}, "originalCommit": {"oid": "6e33cf97cd15799432c6b23ec0f86a9d5a4f6612"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjgyMjc5MQ==", "bodyText": "actually don't think _featureMasks into a member field is a good idea. Also I should separate out the static initialization of _featureMasks from applyUserOptions(). Initialization of _featureMasks should only happen once for the entire JVM while applyUserOptions() is performed on each cpu object.", "url": "https://github.com/eclipse-openj9/openj9/pull/10697#discussion_r496822791", "createdAt": "2020-09-29T15:36:08Z", "author": {"login": "harryyu1994"}, "path": "runtime/compiler/env/J9CPU.cpp", "diffHunk": "@@ -43,3 +44,29 @@ J9::CPU::getProcessorDescription()\n #endif /* defined(J9VM_OPT_JITSERVER) */\n    return _processorDescription;\n    }\n+\n+void\n+J9::CPU::applyFeatureMasks(OMRProcessorDesc& processorDescription, const uint32_t* enabledFeatures, size_t size)\n+   {\n+   OMRPORT_ACCESS_FROM_OMRPORT(TR::Compiler->omrPortLib);\n+   memset(_featureMasks.features, 0, OMRPORT_SYSINFO_FEATURES_SIZE*sizeof(uint32_t));\n+   for (size_t i = 0; i < size; i++)\n+      {\n+      omrsysinfo_processor_set_feature(&_featureMasks, enabledFeatures[i], TRUE);\n+      }\n+   _shouldUseFeatureMasks = true;\n+   \n+   for (size_t i = 0; i < OMRPORT_SYSINFO_FEATURES_SIZE; i++)\n+      {\n+      processorDescription.features[i] &= _featureMasks.features[i];\n+      }\n+   }\n+\n+bool\n+J9::CPU::supportsFeature(uint32_t feature)\n+   {\n+   OMRPORT_ACCESS_FROM_OMRPORT(TR::Compiler->omrPortLib);\n+   if (_shouldUseFeatureMasks)\n+      TR_ASSERT_FATAL(TRUE == omrsysinfo_processor_has_feature(&_featureMasks, feature), \"new feature usage detected, please enable feature %d in TR::CPU::applyUserOptions()\\n\", feature);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyNTExOQ=="}, "originalCommit": {"oid": "6e33cf97cd15799432c6b23ec0f86a9d5a4f6612"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTE0ODE4OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/env/J9CPU.hpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzo0MzoxNVrOHcnU3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzo0MzoxNVrOHcnU3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc2NjQ5NQ==", "bodyText": "A better name for this is _supportedFeatureMasks", "url": "https://github.com/eclipse-openj9/openj9/pull/10697#discussion_r499766495", "createdAt": "2020-10-05T17:43:15Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/env/J9CPU.hpp", "diffHunk": "@@ -45,12 +45,43 @@ class OMR_EXTENSIBLE CPU : public OMR::CPUConnector\n    CPU() : OMR::CPUConnector() {}\n    CPU(const OMRProcessorDesc& processorDescription) : OMR::CPUConnector(processorDescription) {}\n \n+   /**\n+    * @brief Contain the list of processor features utlizied by the compiler, initialized via TR::CPU::initializeFeatureMasks()\n+    */\n+   static OMRProcessorDesc _featureMasks;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3da62521c64fb20d3e3e48ca3bc21d8bf278c07c"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTY2MTc1OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/control/CompilationThread.cpp", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMDoyMDoyMFrOHcsXIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMjoxNTowOVrOHcvlwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg0ODk5NA==", "bodyText": "This is not ideal. JITServer should obey exactly what the client tells it to do and not add any customization of its own.", "url": "https://github.com/eclipse-openj9/openj9/pull/10697#discussion_r499848994", "createdAt": "2020-10-05T20:20:20Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/control/CompilationThread.cpp", "diffHunk": "@@ -8514,7 +8514,7 @@ TR::CompilationInfoPerThreadBase::wrappedCompile(J9PortLibrary *portLib, void *\n          if (that->_methodBeingCompiled->isOutOfProcessCompReq())\n             {\n             OMRProcessorDesc JITClientProcessorDesc = TR::Compiler->target.cpu.getProcessorDescription();\n-            target.cpu = TR::CPU(JITClientProcessorDesc);\n+            target.cpu = TR::CPU::customize(JITClientProcessorDesc);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d90a2b1094af1e1ddd44002d720b3e78e001059d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg1MjU1OQ==", "bodyText": "All customizations are contained in the input parameter JITClientProcessorDesc. JITServer is not doing anything extra.TR::CPU::customize() is essentially just a wrapped function guarding the constructor. The _featureMasks should be the same on JITClient and JITServer. It's a codebase setting that both JITClient and JITServer must be consistent with, therefore _featureMasks is not changing anything client wants.", "url": "https://github.com/eclipse-openj9/openj9/pull/10697#discussion_r499852559", "createdAt": "2020-10-05T20:27:00Z", "author": {"login": "harryyu1994"}, "path": "runtime/compiler/control/CompilationThread.cpp", "diffHunk": "@@ -8514,7 +8514,7 @@ TR::CompilationInfoPerThreadBase::wrappedCompile(J9PortLibrary *portLib, void *\n          if (that->_methodBeingCompiled->isOutOfProcessCompReq())\n             {\n             OMRProcessorDesc JITClientProcessorDesc = TR::Compiler->target.cpu.getProcessorDescription();\n-            target.cpu = TR::CPU(JITClientProcessorDesc);\n+            target.cpu = TR::CPU::customize(JITClientProcessorDesc);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg0ODk5NA=="}, "originalCommit": {"oid": "d90a2b1094af1e1ddd44002d720b3e78e001059d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg1Njc3Nw==", "bodyText": "The intent of _featureMasks is never to modify anything, it's a mask to turn off unnecessary bits so that we can do the compatibility check.\nFor example:\n            feature:           A B C D\n   underlying feature:      0b 1 0 0 1\nfeature mask:               0b  0 0 1 1\n(our compiler only uses feature C and D)\n      after applying mask:   0b 0 0 0 1\nWiping off feature A does not equal to disabling feature A. A is never used by our compiler so wiping it off has no effect.\nMaybe I should change the function names detect() and customize to just createCPU(). They just generate TR::CPU object for you based on different input.", "url": "https://github.com/eclipse-openj9/openj9/pull/10697#discussion_r499856777", "createdAt": "2020-10-05T20:35:13Z", "author": {"login": "harryyu1994"}, "path": "runtime/compiler/control/CompilationThread.cpp", "diffHunk": "@@ -8514,7 +8514,7 @@ TR::CompilationInfoPerThreadBase::wrappedCompile(J9PortLibrary *portLib, void *\n          if (that->_methodBeingCompiled->isOutOfProcessCompReq())\n             {\n             OMRProcessorDesc JITClientProcessorDesc = TR::Compiler->target.cpu.getProcessorDescription();\n-            target.cpu = TR::CPU(JITClientProcessorDesc);\n+            target.cpu = TR::CPU::customize(JITClientProcessorDesc);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg0ODk5NA=="}, "originalCommit": {"oid": "d90a2b1094af1e1ddd44002d720b3e78e001059d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg1OTE1MQ==", "bodyText": "target.cpu = TR::CPU::customize(JITClientProcessorDesc);\nmeans target.cpu has been customized to JITClientProcessorDesc.", "url": "https://github.com/eclipse-openj9/openj9/pull/10697#discussion_r499859151", "createdAt": "2020-10-05T20:39:50Z", "author": {"login": "harryyu1994"}, "path": "runtime/compiler/control/CompilationThread.cpp", "diffHunk": "@@ -8514,7 +8514,7 @@ TR::CompilationInfoPerThreadBase::wrappedCompile(J9PortLibrary *portLib, void *\n          if (that->_methodBeingCompiled->isOutOfProcessCompReq())\n             {\n             OMRProcessorDesc JITClientProcessorDesc = TR::Compiler->target.cpu.getProcessorDescription();\n-            target.cpu = TR::CPU(JITClientProcessorDesc);\n+            target.cpu = TR::CPU::customize(JITClientProcessorDesc);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg0ODk5NA=="}, "originalCommit": {"oid": "d90a2b1094af1e1ddd44002d720b3e78e001059d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkwMTg4OA==", "bodyText": "ok. Thanks for the explanation. Maybe you should add as a comment:\n// Customize target.cpu based on the processor description fetched from the client\ntarget.cpu = TR::CPU::customize(JITClientProcessorDesc);", "url": "https://github.com/eclipse-openj9/openj9/pull/10697#discussion_r499901888", "createdAt": "2020-10-05T22:15:09Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/control/CompilationThread.cpp", "diffHunk": "@@ -8514,7 +8514,7 @@ TR::CompilationInfoPerThreadBase::wrappedCompile(J9PortLibrary *portLib, void *\n          if (that->_methodBeingCompiled->isOutOfProcessCompReq())\n             {\n             OMRProcessorDesc JITClientProcessorDesc = TR::Compiler->target.cpu.getProcessorDescription();\n-            target.cpu = TR::CPU(JITClientProcessorDesc);\n+            target.cpu = TR::CPU::customize(JITClientProcessorDesc);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg0ODk5NA=="}, "originalCommit": {"oid": "d90a2b1094af1e1ddd44002d720b3e78e001059d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMDA4MzI2OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/env/J9CPU.hpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMjo1Mzo0NlrOHcwYbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMjo1NDozN1rOHcwZaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkxNDg2Mg==", "bodyText": "Typos: \"Contain\" --> \"Contains\", \"utlizied\" --> \"utilizied\"", "url": "https://github.com/eclipse-openj9/openj9/pull/10697#discussion_r499914862", "createdAt": "2020-10-05T22:53:46Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/env/J9CPU.hpp", "diffHunk": "@@ -45,12 +45,43 @@ class OMR_EXTENSIBLE CPU : public OMR::CPUConnector\n    CPU() : OMR::CPUConnector() {}\n    CPU(const OMRProcessorDesc& processorDescription) : OMR::CPUConnector(processorDescription) {}\n \n+   /**\n+    * @brief Contain the list of processor features utlizied by the compiler, initialized via TR::CPU::initializeFeatureMasks()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb132e7bad49d320de299e9582ef5188373ba562"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkxNTExMw==", "bodyText": "Maybe replace \"utilizied\" with \"exploited\"", "url": "https://github.com/eclipse-openj9/openj9/pull/10697#discussion_r499915113", "createdAt": "2020-10-05T22:54:37Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/env/J9CPU.hpp", "diffHunk": "@@ -45,12 +45,43 @@ class OMR_EXTENSIBLE CPU : public OMR::CPUConnector\n    CPU() : OMR::CPUConnector() {}\n    CPU(const OMRProcessorDesc& processorDescription) : OMR::CPUConnector(processorDescription) {}\n \n+   /**\n+    * @brief Contain the list of processor features utlizied by the compiler, initialized via TR::CPU::initializeFeatureMasks()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkxNDg2Mg=="}, "originalCommit": {"oid": "eb132e7bad49d320de299e9582ef5188373ba562"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMDA5MTU3OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/env/J9CPU.hpp", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMjo1Nzo1NVrOHcwdkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwMTo0MzowMlrOHczMWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkxNjE3Nw==", "bodyText": "I would replace \"Disable\" with \"Sets\".\nDo we actually look at user options? I thought this was done in another part of the code which you showed it to me.", "url": "https://github.com/eclipse-openj9/openj9/pull/10697#discussion_r499916177", "createdAt": "2020-10-05T22:57:55Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/env/J9CPU.hpp", "diffHunk": "@@ -45,12 +45,43 @@ class OMR_EXTENSIBLE CPU : public OMR::CPUConnector\n    CPU() : OMR::CPUConnector() {}\n    CPU(const OMRProcessorDesc& processorDescription) : OMR::CPUConnector(processorDescription) {}\n \n+   /**\n+    * @brief Contain the list of processor features utlizied by the compiler, initialized via TR::CPU::initializeFeatureMasks()\n+    */\n+   static OMRProcessorDesc _supportedFeatureMasks;\n+\n+   /**\n+    * @brief _isSupportedFeatureMasksEnabled tells you whether _supportedFeatureMasks was used for masking out unused processor features\n+    */\n+   static bool _isSupportedFeatureMasksEnabled;\n+\n public:\n \n+   /** \n+    * @brief Returns the processor type and features that will be used by JIT and AOT compilations\n+    * @param[in] omrPortLib : the port library\n+    * @return TR::CPU\n+    */\n+   static TR::CPU detect(OMRPortLibrary * const omrPortLib);\n+\n+   /** \n+    * @brief Disable processor features based on input processor description, user options and whether they are utilized by the compiler", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb132e7bad49d320de299e9582ef5188373ba562"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk1ODY2Ng==", "bodyText": "We do not look at user options in \"TR::CPU::customize()\". And I agree that we should replace \"disable\" with \"set\".\nprocessor description contains two piece of information 1. processor type 2. processor features.\nThe only case that we disable processor features is on Z, when you downgrade your processor from say z14 to z10, there are a couple of features you need to disable. TR::CPU::customize() will automatically do it for you. a z10 cpu type with z14 feature set won't make sense to the compiler.\nThat's the only case.", "url": "https://github.com/eclipse-openj9/openj9/pull/10697#discussion_r499958666", "createdAt": "2020-10-06T01:33:38Z", "author": {"login": "harryyu1994"}, "path": "runtime/compiler/env/J9CPU.hpp", "diffHunk": "@@ -45,12 +45,43 @@ class OMR_EXTENSIBLE CPU : public OMR::CPUConnector\n    CPU() : OMR::CPUConnector() {}\n    CPU(const OMRProcessorDesc& processorDescription) : OMR::CPUConnector(processorDescription) {}\n \n+   /**\n+    * @brief Contain the list of processor features utlizied by the compiler, initialized via TR::CPU::initializeFeatureMasks()\n+    */\n+   static OMRProcessorDesc _supportedFeatureMasks;\n+\n+   /**\n+    * @brief _isSupportedFeatureMasksEnabled tells you whether _supportedFeatureMasks was used for masking out unused processor features\n+    */\n+   static bool _isSupportedFeatureMasksEnabled;\n+\n public:\n \n+   /** \n+    * @brief Returns the processor type and features that will be used by JIT and AOT compilations\n+    * @param[in] omrPortLib : the port library\n+    * @return TR::CPU\n+    */\n+   static TR::CPU detect(OMRPortLibrary * const omrPortLib);\n+\n+   /** \n+    * @brief Disable processor features based on input processor description, user options and whether they are utilized by the compiler", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkxNjE3Nw=="}, "originalCommit": {"oid": "eb132e7bad49d320de299e9582ef5188373ba562"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk2MDkyMA==", "bodyText": "Description on these two has been changed to:\n  /** \n    * @brief A factory method used to construct an CPU object based on the underlying hardware\n    * @param[in] omrPortLib : the port library\n    * @return TR::CPU\n    */\n   static TR::CPU detect(OMRPortLibrary * const omrPortLib);\n\n   /** \n    * @brief A factory method used to construct an CPU object based on user customized processorDescription\n    * @param[in] OMRProcessorDesc : the processor description\n    * @return TR::CPU\n    */\n   static TR::CPU customize(OMRProcessorDesc processorDescription);", "url": "https://github.com/eclipse-openj9/openj9/pull/10697#discussion_r499960920", "createdAt": "2020-10-06T01:43:02Z", "author": {"login": "harryyu1994"}, "path": "runtime/compiler/env/J9CPU.hpp", "diffHunk": "@@ -45,12 +45,43 @@ class OMR_EXTENSIBLE CPU : public OMR::CPUConnector\n    CPU() : OMR::CPUConnector() {}\n    CPU(const OMRProcessorDesc& processorDescription) : OMR::CPUConnector(processorDescription) {}\n \n+   /**\n+    * @brief Contain the list of processor features utlizied by the compiler, initialized via TR::CPU::initializeFeatureMasks()\n+    */\n+   static OMRProcessorDesc _supportedFeatureMasks;\n+\n+   /**\n+    * @brief _isSupportedFeatureMasksEnabled tells you whether _supportedFeatureMasks was used for masking out unused processor features\n+    */\n+   static bool _isSupportedFeatureMasksEnabled;\n+\n public:\n \n+   /** \n+    * @brief Returns the processor type and features that will be used by JIT and AOT compilations\n+    * @param[in] omrPortLib : the port library\n+    * @return TR::CPU\n+    */\n+   static TR::CPU detect(OMRPortLibrary * const omrPortLib);\n+\n+   /** \n+    * @brief Disable processor features based on input processor description, user options and whether they are utilized by the compiler", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkxNjE3Nw=="}, "originalCommit": {"oid": "eb132e7bad49d320de299e9582ef5188373ba562"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1240, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}