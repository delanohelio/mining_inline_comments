{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTExMTM0NTA0", "number": 11016, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMjoxODowMVrOEzRWvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNjoyODozOVrOEzYWpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTk3MTgwOnYy", "diffSide": "RIGHT", "path": "jcl/src/jdk.management/share/classes/openj9/lang/management/OpenJ9DiagnosticsMXBean.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMjoxODowMVrOHqZHtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNTo0Mjo0M1rOHqiI_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDIxMzgxNA==", "bodyText": "The possibility of InvalidOptionException should be documented.\nBetter, just remove it from the throws clause - it doesn't appear to be possible.", "url": "https://github.com/eclipse-openj9/openj9/pull/11016#discussion_r514213814", "createdAt": "2020-10-29T12:18:01Z", "author": {"login": "keithc-ca"}, "path": "jcl/src/jdk.management/share/classes/openj9/lang/management/OpenJ9DiagnosticsMXBean.java", "diffHunk": "@@ -68,10 +68,20 @@\n \t */\n \tpublic void resetDumpOptions() throws ConfigurationUnavailableException;\n \n+\t/**\n+\t * Returns the current dump configuration as an array of Strings.\n+\t * The syntax of the option Strings is the same as the -Xdump command-line option,\n+\t * with the initial -Xdump: omitted. See the -Xdump option section on dump agents in\n+\t * the documentation for the OpenJ9 JVM.\n+\t *\n+\t * @throws SecurityException if there is a security manager and it doesn't allow the checks required to read the dump settings\n+\t */\n+\tpublic String[] queryDumpOptions() throws InvalidOptionException, ConfigurationUnavailableException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ad56b3958fc19b352ad7cbe243047e7aeadaf54"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDIzNjMyNA==", "bodyText": "Actually, neither exception can be thrown (the implementation has no throws clause).", "url": "https://github.com/eclipse-openj9/openj9/pull/11016#discussion_r514236324", "createdAt": "2020-10-29T12:56:06Z", "author": {"login": "keithc-ca"}, "path": "jcl/src/jdk.management/share/classes/openj9/lang/management/OpenJ9DiagnosticsMXBean.java", "diffHunk": "@@ -68,10 +68,20 @@\n \t */\n \tpublic void resetDumpOptions() throws ConfigurationUnavailableException;\n \n+\t/**\n+\t * Returns the current dump configuration as an array of Strings.\n+\t * The syntax of the option Strings is the same as the -Xdump command-line option,\n+\t * with the initial -Xdump: omitted. See the -Xdump option section on dump agents in\n+\t * the documentation for the OpenJ9 JVM.\n+\t *\n+\t * @throws SecurityException if there is a security manager and it doesn't allow the checks required to read the dump settings\n+\t */\n+\tpublic String[] queryDumpOptions() throws InvalidOptionException, ConfigurationUnavailableException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDIxMzgxNA=="}, "originalCommit": {"oid": "3ad56b3958fc19b352ad7cbe243047e7aeadaf54"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM2MTU5OA==", "bodyText": "I forgot to remove these.", "url": "https://github.com/eclipse-openj9/openj9/pull/11016#discussion_r514361598", "createdAt": "2020-10-29T15:42:43Z", "author": {"login": "pshipton"}, "path": "jcl/src/jdk.management/share/classes/openj9/lang/management/OpenJ9DiagnosticsMXBean.java", "diffHunk": "@@ -68,10 +68,20 @@\n \t */\n \tpublic void resetDumpOptions() throws ConfigurationUnavailableException;\n \n+\t/**\n+\t * Returns the current dump configuration as an array of Strings.\n+\t * The syntax of the option Strings is the same as the -Xdump command-line option,\n+\t * with the initial -Xdump: omitted. See the -Xdump option section on dump agents in\n+\t * the documentation for the OpenJ9 JVM.\n+\t *\n+\t * @throws SecurityException if there is a security manager and it doesn't allow the checks required to read the dump settings\n+\t */\n+\tpublic String[] queryDumpOptions() throws InvalidOptionException, ConfigurationUnavailableException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDIxMzgxNA=="}, "originalCommit": {"oid": "3ad56b3958fc19b352ad7cbe243047e7aeadaf54"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTk5MjE5OnYy", "diffSide": "RIGHT", "path": "jcl/src/openj9.jvm/share/classes/com/ibm/jvm/Dump.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMjoyNDowN1rOHqZUXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMjoyNDowN1rOHqZUXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDIxNzA1NQ==", "bodyText": "While you're fixing inconsistencies in indentation, please fix all of them.", "url": "https://github.com/eclipse-openj9/openj9/pull/11016#discussion_r514217055", "createdAt": "2020-10-29T12:24:07Z", "author": {"login": "keithc-ca"}, "path": "jcl/src/openj9.jvm/share/classes/com/ibm/jvm/Dump.java", "diffHunk": "@@ -627,10 +627,10 @@ public static void setDumpOptions(String dumpOptions) throws InvalidDumpOptionEx\n     }\n     \n     /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ad56b3958fc19b352ad7cbe243047e7aeadaf54"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMjA2OTA5OnYy", "diffSide": "RIGHT", "path": "jcl/src/jdk.management/share/classes/openj9/lang/management/internal/OpenJ9DiagnosticsMXBeanImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMjo0NDozMFrOHqaDXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNTo0NTozMVrOHqiSCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDIyOTA4Ng==", "bodyText": "This might return null which is not documented.", "url": "https://github.com/eclipse-openj9/openj9/pull/11016#discussion_r514229086", "createdAt": "2020-10-29T12:44:30Z", "author": {"login": "keithc-ca"}, "path": "jcl/src/jdk.management/share/classes/openj9/lang/management/internal/OpenJ9DiagnosticsMXBeanImpl.java", "diffHunk": "@@ -111,6 +112,23 @@ public void resetDumpOptions() throws ConfigurationUnavailableException {\n \t\t}\n \t}\n \n+\t/**\n+\t * {@inheritDoc}\n+\t */\n+\t@Override\n+\tpublic String[] queryDumpOptions() {\n+\t\tcheckManagementSecurityPermission();\n+\t\ttry {\n+\t\t\t/*[IF Sidecar19-SE]*/ if (2 > 1) {\n+\t\t\treturn (String[])dump_queryDumpOptions.invoke(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ad56b3958fc19b352ad7cbe243047e7aeadaf54"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM2MzkxMg==", "bodyText": "It shouldn't ever return null, I think that only occurs if there is a programming error. Added , or null if an internal error occurs. to cover that case.", "url": "https://github.com/eclipse-openj9/openj9/pull/11016#discussion_r514363912", "createdAt": "2020-10-29T15:45:31Z", "author": {"login": "pshipton"}, "path": "jcl/src/jdk.management/share/classes/openj9/lang/management/internal/OpenJ9DiagnosticsMXBeanImpl.java", "diffHunk": "@@ -111,6 +112,23 @@ public void resetDumpOptions() throws ConfigurationUnavailableException {\n \t\t}\n \t}\n \n+\t/**\n+\t * {@inheritDoc}\n+\t */\n+\t@Override\n+\tpublic String[] queryDumpOptions() {\n+\t\tcheckManagementSecurityPermission();\n+\t\ttry {\n+\t\t\t/*[IF Sidecar19-SE]*/ if (2 > 1) {\n+\t\t\treturn (String[])dump_queryDumpOptions.invoke(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDIyOTA4Ng=="}, "originalCommit": {"oid": "3ad56b3958fc19b352ad7cbe243047e7aeadaf54"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMjEyOTY1OnYy", "diffSide": "RIGHT", "path": "test/functional/JLM_Tests/src/org/openj9/test/java/lang/management/TestOpenJ9DiagnosticsMXBean.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMjo1OTo0MVrOHqaoow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMjo1OTo0MVrOHqaoow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDIzODYyNw==", "bodyText": "No trailing whitespace, please (lines 264 & 270).", "url": "https://github.com/eclipse-openj9/openj9/pull/11016#discussion_r514238627", "createdAt": "2020-10-29T12:59:41Z", "author": {"login": "keithc-ca"}, "path": "test/functional/JLM_Tests/src/org/openj9/test/java/lang/management/TestOpenJ9DiagnosticsMXBean.java", "diffHunk": "@@ -252,8 +252,38 @@ private void testLocal_setDumpOptions() throws InvalidOptionException, Configura\n \t\tString dir = \".\" + File.separator + \"local\";\n \t\tString dumpFileName = \"javacore_alloc.txt\";\n \t\tString dumpFilePath = dir + File.separator + dumpFileName;\n+\n \t\tdiagBean.resetDumpOptions();\n+\n+\t\tString[] resetOptions = diagBean.queryDumpOptions();\n+\t\tfor (String option : resetOptions) {\n+\t\t\tif (option.startsWith(\"java:events=allocation\")) {\n+\t\t\t\tAssert.fail(\"Found unexpected dump option: \" + option);\n+\t\t\t}\n+\t\t}\n+\t\t\n \t\tdiagBean.setDumpOptions(\"java:events=allocation,filter=#1k,range=1..1,file=\" + dumpFilePath);\n+\n+\t\tboolean optionFound = false;\n+\t\tString[] options = diagBean.queryDumpOptions();\n+\t\tfor (String option : options) {\n+\t\t\t// The options get reordered and defaults added, check parts separately ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ad56b3958fc19b352ad7cbe243047e7aeadaf54"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMjE1OTE4OnYy", "diffSide": "RIGHT", "path": "test/functional/JLM_Tests/src/org/openj9/test/java/lang/management/TestOpenJ9DiagnosticsMXBean.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMzowNjo1N1rOHqa6hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMzowNjo1N1rOHqa6hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI0MzIwNA==", "bodyText": "nit: space after :", "url": "https://github.com/eclipse-openj9/openj9/pull/11016#discussion_r514243204", "createdAt": "2020-10-29T13:06:57Z", "author": {"login": "keithc-ca"}, "path": "test/functional/JLM_Tests/src/org/openj9/test/java/lang/management/TestOpenJ9DiagnosticsMXBean.java", "diffHunk": "@@ -339,11 +369,50 @@ private void testRemote_setDumpOptions() throws InvalidOptionException, Configur\n \t\tString dir = \".\" + File.separator + \"remote\";\n \t\tString dumpFileName = \"javacore_alloc.txt\";\n \t\tString dumpFilePath = dir + File.separator + dumpFileName;\n+\n \t\tdiagBeanRemote.resetDumpOptions();\n+\n+\t\tString[] resetOptions = diagBeanRemote.queryDumpOptions();\n+\t\tfor (String option : resetOptions) {\n+\t\t\tif (option.startsWith(\"java:events=allocation\") || option.startsWith(\"java:events=catch\")) {\n+\t\t\t\tAssert.fail(\"Found unexpected dump option:\" + option);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ad56b3958fc19b352ad7cbe243047e7aeadaf54"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMjE2MzY5OnYy", "diffSide": "RIGHT", "path": "test/functional/JLM_Tests/src/org/openj9/test/java/lang/management/TestOpenJ9DiagnosticsMXBean.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMzowODoxMFrOHqa9eQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMzowODoxMFrOHqa9eQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI0Mzk2MQ==", "bodyText": "trailing whitespace", "url": "https://github.com/eclipse-openj9/openj9/pull/11016#discussion_r514243961", "createdAt": "2020-10-29T13:08:10Z", "author": {"login": "keithc-ca"}, "path": "test/functional/JLM_Tests/src/org/openj9/test/java/lang/management/TestOpenJ9DiagnosticsMXBean.java", "diffHunk": "@@ -339,11 +369,50 @@ private void testRemote_setDumpOptions() throws InvalidOptionException, Configur\n \t\tString dir = \".\" + File.separator + \"remote\";\n \t\tString dumpFileName = \"javacore_alloc.txt\";\n \t\tString dumpFilePath = dir + File.separator + dumpFileName;\n+\n \t\tdiagBeanRemote.resetDumpOptions();\n+\n+\t\tString[] resetOptions = diagBeanRemote.queryDumpOptions();\n+\t\tfor (String option : resetOptions) {\n+\t\t\tif (option.startsWith(\"java:events=allocation\") || option.startsWith(\"java:events=catch\")) {\n+\t\t\t\tAssert.fail(\"Found unexpected dump option:\" + option);\n+\t\t\t}\n+\t\t}\n+\n \t\tdiagBeanRemote.setDumpOptions(\"java:events=allocation,filter=#1k,range=1..1,file=\" + dumpFilePath);\n \t\tdumpFileName = \"javacore_unsupported.txt\";\n-\t\tdumpFilePath = dir + File.separator + dumpFileName;\n-\t\tdiagBeanRemote.setDumpOptions(\"java:events=catch,filter=java/io/UnsupportedEncodingException,range=1..1,file=\" + dumpFilePath);\n+\t\tString catchDumpFilePath = dir + File.separator + dumpFileName;\n+\t\tdiagBeanRemote.setDumpOptions(\"java:events=catch,filter=java/io/UnsupportedEncodingException,range=1..1,file=\" + catchDumpFilePath);\n+\n+\t\tString[] options = diagBeanRemote.queryDumpOptions();\n+\t\tboolean allocOptionFound = false;\n+\t\tboolean catchOptionFound = false;\n+\t\tfor (String option : options) {\n+\t\t\t// The options get reordered and defaults added, check parts separately ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ad56b3958fc19b352ad7cbe243047e7aeadaf54"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMjE2Njk2OnYy", "diffSide": "RIGHT", "path": "test/functional/JLM_Tests/src/org/openj9/test/java/lang/management/TestOpenJ9DiagnosticsMXBean.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMzowOTowNVrOHqa_pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMzowOTowNVrOHqa_pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI0NDUxNg==", "bodyText": "Please indent consistently (like 392-399, above).", "url": "https://github.com/eclipse-openj9/openj9/pull/11016#discussion_r514244516", "createdAt": "2020-10-29T13:09:05Z", "author": {"login": "keithc-ca"}, "path": "test/functional/JLM_Tests/src/org/openj9/test/java/lang/management/TestOpenJ9DiagnosticsMXBean.java", "diffHunk": "@@ -339,11 +369,50 @@ private void testRemote_setDumpOptions() throws InvalidOptionException, Configur\n \t\tString dir = \".\" + File.separator + \"remote\";\n \t\tString dumpFileName = \"javacore_alloc.txt\";\n \t\tString dumpFilePath = dir + File.separator + dumpFileName;\n+\n \t\tdiagBeanRemote.resetDumpOptions();\n+\n+\t\tString[] resetOptions = diagBeanRemote.queryDumpOptions();\n+\t\tfor (String option : resetOptions) {\n+\t\t\tif (option.startsWith(\"java:events=allocation\") || option.startsWith(\"java:events=catch\")) {\n+\t\t\t\tAssert.fail(\"Found unexpected dump option:\" + option);\n+\t\t\t}\n+\t\t}\n+\n \t\tdiagBeanRemote.setDumpOptions(\"java:events=allocation,filter=#1k,range=1..1,file=\" + dumpFilePath);\n \t\tdumpFileName = \"javacore_unsupported.txt\";\n-\t\tdumpFilePath = dir + File.separator + dumpFileName;\n-\t\tdiagBeanRemote.setDumpOptions(\"java:events=catch,filter=java/io/UnsupportedEncodingException,range=1..1,file=\" + dumpFilePath);\n+\t\tString catchDumpFilePath = dir + File.separator + dumpFileName;\n+\t\tdiagBeanRemote.setDumpOptions(\"java:events=catch,filter=java/io/UnsupportedEncodingException,range=1..1,file=\" + catchDumpFilePath);\n+\n+\t\tString[] options = diagBeanRemote.queryDumpOptions();\n+\t\tboolean allocOptionFound = false;\n+\t\tboolean catchOptionFound = false;\n+\t\tfor (String option : options) {\n+\t\t\t// The options get reordered and defaults added, check parts separately \n+\t\t\tif (option.startsWith(\"java:events=allocation,\") &&\n+\t\t\t\toption.contains(\",filter=#1k\") &&\n+\t\t\t\toption.contains(\",range=1..1\") &&\n+\t\t\t\toption.contains(dumpFilePath)\n+\t\t\t) {\n+\t\t\t\tallocOptionFound = true;\n+\t\t\t\tif (catchOptionFound) break;\n+\t\t\t}\n+\t\t\tif (option.startsWith(\"java:events=catch,\") &&\n+\t\t\t\t\toption.contains(\",filter=java/io/UnsupportedEncodingException\") &&\n+\t\t\t\t\toption.contains(\",range=1..1\") &&\n+\t\t\t\t\toption.contains(catchDumpFilePath)\n+\t\t\t\t) {\n+\t\t\t\t\tcatchOptionFound = true;\n+\t\t\t\t\tif (allocOptionFound) break;\n+\t\t\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ad56b3958fc19b352ad7cbe243047e7aeadaf54"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMjE2Nzg2OnYy", "diffSide": "RIGHT", "path": "test/functional/JLM_Tests/src/org/openj9/test/java/lang/management/TestOpenJ9DiagnosticsMXBean.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMzowOToxOFrOHqbAMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMzowOToxOFrOHqbAMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI0NDY1OQ==", "bodyText": "trailing whitespace", "url": "https://github.com/eclipse-openj9/openj9/pull/11016#discussion_r514244659", "createdAt": "2020-10-29T13:09:18Z", "author": {"login": "keithc-ca"}, "path": "test/functional/JLM_Tests/src/org/openj9/test/java/lang/management/TestOpenJ9DiagnosticsMXBean.java", "diffHunk": "@@ -339,11 +369,50 @@ private void testRemote_setDumpOptions() throws InvalidOptionException, Configur\n \t\tString dir = \".\" + File.separator + \"remote\";\n \t\tString dumpFileName = \"javacore_alloc.txt\";\n \t\tString dumpFilePath = dir + File.separator + dumpFileName;\n+\n \t\tdiagBeanRemote.resetDumpOptions();\n+\n+\t\tString[] resetOptions = diagBeanRemote.queryDumpOptions();\n+\t\tfor (String option : resetOptions) {\n+\t\t\tif (option.startsWith(\"java:events=allocation\") || option.startsWith(\"java:events=catch\")) {\n+\t\t\t\tAssert.fail(\"Found unexpected dump option:\" + option);\n+\t\t\t}\n+\t\t}\n+\n \t\tdiagBeanRemote.setDumpOptions(\"java:events=allocation,filter=#1k,range=1..1,file=\" + dumpFilePath);\n \t\tdumpFileName = \"javacore_unsupported.txt\";\n-\t\tdumpFilePath = dir + File.separator + dumpFileName;\n-\t\tdiagBeanRemote.setDumpOptions(\"java:events=catch,filter=java/io/UnsupportedEncodingException,range=1..1,file=\" + dumpFilePath);\n+\t\tString catchDumpFilePath = dir + File.separator + dumpFileName;\n+\t\tdiagBeanRemote.setDumpOptions(\"java:events=catch,filter=java/io/UnsupportedEncodingException,range=1..1,file=\" + catchDumpFilePath);\n+\n+\t\tString[] options = diagBeanRemote.queryDumpOptions();\n+\t\tboolean allocOptionFound = false;\n+\t\tboolean catchOptionFound = false;\n+\t\tfor (String option : options) {\n+\t\t\t// The options get reordered and defaults added, check parts separately \n+\t\t\tif (option.startsWith(\"java:events=allocation,\") &&\n+\t\t\t\toption.contains(\",filter=#1k\") &&\n+\t\t\t\toption.contains(\",range=1..1\") &&\n+\t\t\t\toption.contains(dumpFilePath)\n+\t\t\t) {\n+\t\t\t\tallocOptionFound = true;\n+\t\t\t\tif (catchOptionFound) break;\n+\t\t\t}\n+\t\t\tif (option.startsWith(\"java:events=catch,\") &&\n+\t\t\t\t\toption.contains(\",filter=java/io/UnsupportedEncodingException\") &&\n+\t\t\t\t\toption.contains(\",range=1..1\") &&\n+\t\t\t\t\toption.contains(catchDumpFilePath)\n+\t\t\t\t) {\n+\t\t\t\t\tcatchOptionFound = true;\n+\t\t\t\t\tif (allocOptionFound) break;\n+\t\t\t\t}\n+\t\t}\n+\t\tif (!allocOptionFound || !catchOptionFound) {\n+\t\t\tfor (String option : options) {\n+\t\t\t\tSystem.out.println(option);\n+\t\t\t}\n+\t\t\tAssert.fail(\"Failed to find expected dump options\");\n+\t\t}\n+\t\t", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ad56b3958fc19b352ad7cbe243047e7aeadaf54"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMzExNTkxOnYy", "diffSide": "RIGHT", "path": "jcl/src/openj9.jvm/share/classes/com/ibm/jvm/Dump.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNjoyODowNlrOHqkRLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNzowMTozM1rOHqlvww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM5NjQ2Mw==", "bodyText": "I'm not sure why you modified these two lines, but there's a strange mix of indentation styles:\n\n384 starts with 4 spaces and a tab\n385 & 386 start with a tab, a space and a tab\n\nMaybe we should defer cleaning up that mess?", "url": "https://github.com/eclipse-openj9/openj9/pull/11016#discussion_r514396463", "createdAt": "2020-10-29T16:28:06Z", "author": {"login": "keithc-ca"}, "path": "jcl/src/openj9.jvm/share/classes/com/ibm/jvm/Dump.java", "diffHunk": "@@ -382,8 +382,8 @@ public static String systemDumpToFile(String fileNamePattern) throws InvalidDump\n     \t\trequest = \"system\"; //$NON-NLS-1$\n     \t}\n     \tString dump = null;\n-       \tdump = triggerDump(request, \"systemDumpToFile\"); //$NON-NLS-1$\n-       \treturn dump;\n+\t \tdump = triggerDump(request, \"systemDumpToFile\"); //$NON-NLS-1$\n+\t \treturn dump;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f5615bb77f7b59f34dda8c092cfec5ec8251183"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQyMDY3NQ==", "bodyText": "Tried again, please see the latest update.", "url": "https://github.com/eclipse-openj9/openj9/pull/11016#discussion_r514420675", "createdAt": "2020-10-29T17:01:33Z", "author": {"login": "pshipton"}, "path": "jcl/src/openj9.jvm/share/classes/com/ibm/jvm/Dump.java", "diffHunk": "@@ -382,8 +382,8 @@ public static String systemDumpToFile(String fileNamePattern) throws InvalidDump\n     \t\trequest = \"system\"; //$NON-NLS-1$\n     \t}\n     \tString dump = null;\n-       \tdump = triggerDump(request, \"systemDumpToFile\"); //$NON-NLS-1$\n-       \treturn dump;\n+\t \tdump = triggerDump(request, \"systemDumpToFile\"); //$NON-NLS-1$\n+\t \treturn dump;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM5NjQ2Mw=="}, "originalCommit": {"oid": "1f5615bb77f7b59f34dda8c092cfec5ec8251183"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMzExODQ3OnYy", "diffSide": "RIGHT", "path": "jcl/src/openj9.jvm/share/classes/com/ibm/jvm/Dump.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNjoyODozOVrOHqkS2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNzowMTo0MFrOHqlwBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM5Njg5MQ==", "bodyText": "nit: double space before 'the'", "url": "https://github.com/eclipse-openj9/openj9/pull/11016#discussion_r514396891", "createdAt": "2020-10-29T16:28:39Z", "author": {"login": "keithc-ca"}, "path": "jcl/src/openj9.jvm/share/classes/com/ibm/jvm/Dump.java", "diffHunk": "@@ -575,10 +575,10 @@ private static String triggerDump(String dumpSettings, String event) throws Inva\n \t}\n \n \t/**\n-     * Sets options for the dump subsystem.\n-     * The dump option is passed in as an String.\n-     * Use the same syntax as the -Xdump command-line option, with the initial -Xdump: omitted.\n-     * See Using the -Xdump option as described in the section on dump agents\n+\t * Sets options for the dump subsystem.\n+\t * The dump option is passed in as an String.\n+\t * Use the same syntax as the -Xdump command-line option, with the initial -Xdump: omitted.\n+\t * See  the -Xdump option section on dump agents", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f5615bb77f7b59f34dda8c092cfec5ec8251183"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQyMDc0Mg==", "bodyText": "Fixed.", "url": "https://github.com/eclipse-openj9/openj9/pull/11016#discussion_r514420742", "createdAt": "2020-10-29T17:01:40Z", "author": {"login": "pshipton"}, "path": "jcl/src/openj9.jvm/share/classes/com/ibm/jvm/Dump.java", "diffHunk": "@@ -575,10 +575,10 @@ private static String triggerDump(String dumpSettings, String event) throws Inva\n \t}\n \n \t/**\n-     * Sets options for the dump subsystem.\n-     * The dump option is passed in as an String.\n-     * Use the same syntax as the -Xdump command-line option, with the initial -Xdump: omitted.\n-     * See Using the -Xdump option as described in the section on dump agents\n+\t * Sets options for the dump subsystem.\n+\t * The dump option is passed in as an String.\n+\t * Use the same syntax as the -Xdump command-line option, with the initial -Xdump: omitted.\n+\t * See  the -Xdump option section on dump agents", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM5Njg5MQ=="}, "originalCommit": {"oid": "1f5615bb77f7b59f34dda8c092cfec5ec8251183"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1026, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}