{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1NDk5MjAy", "number": 8365, "reviewThreads": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNzoyNjo1NlrODcTgHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNjoxODoyNFrODdCg7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDA2MjM2OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/control/CompilationThread.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNzoyNjo1NlrOFkSa_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNzoyNjo1NlrOFkSa_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU5NDg3OQ==", "bodyText": "Maybe add another test in front: if (_compiler->isOutOfProcessCompilation())", "url": "https://github.com/eclipse-openj9/openj9/pull/8365#discussion_r373594879", "createdAt": "2020-01-31T17:26:56Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/control/CompilationThread.cpp", "diffHunk": "@@ -8787,13 +8787,20 @@ TR::CompilationInfoPerThreadBase::compile(\n                {\n                TR_ASSERT(_compiler.getHotnessName(_compiler.getMethodHotness()), \"expected to have a hotness string\");\n                if (_compiler.getOutFile() != NULL && _compiler.getOption(TR_TraceAll))\n-                  traceMsg(&_compiler, \"<compile\\n\"\n-                          \"\\tmethod=\\\"%s\\\"\\n\"\n-                          \"\\thotness=\\\"%s\\\"\\n\"\n-                          \"\\tisProfilingCompile=%d>\\n\",\n-                          _compiler.signature(),\n-                          _compiler.getHotnessName(_compiler.getMethodHotness()),\n-                          _compiler.isProfilingCompilation());\n+                  {\n+                  traceMsg(&_compiler, \"<compile\\n\");\n+                  traceMsg(&_compiler, \"\\tmethod=\\\"%s\\\"\\n\", _compiler.signature());\n+                  traceMsg(&_compiler, \"\\thotness=\\\"%s\\\"\\n\", _compiler.getHotnessName(_compiler.getMethodHotness()));\n+                  traceMsg(&_compiler, \"\\tisProfilingCompile=%d\", _compiler.isProfilingCompilation());\n+#if defined(JITSERVER_SUPPORT)\n+                  if (TR::compInfoPT->getClientData()) // not NULL", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee2d0578ce980c1b35c019145aeeda5e47a63846"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDA2NDY1OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/control/CompilationThread.cpp", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNzoyNzo1MVrOFkScfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxOToxNzo0NVrOFkVTdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU5NTI2MQ==", "bodyText": "What is printed if we don't have TR_TraceAll but have another type of tracing (like traceCG)", "url": "https://github.com/eclipse-openj9/openj9/pull/8365#discussion_r373595261", "createdAt": "2020-01-31T17:27:51Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/control/CompilationThread.cpp", "diffHunk": "@@ -8787,13 +8787,20 @@ TR::CompilationInfoPerThreadBase::compile(\n                {\n                TR_ASSERT(_compiler.getHotnessName(_compiler.getMethodHotness()), \"expected to have a hotness string\");\n                if (_compiler.getOutFile() != NULL && _compiler.getOption(TR_TraceAll))\n-                  traceMsg(&_compiler, \"<compile\\n\"\n-                          \"\\tmethod=\\\"%s\\\"\\n\"\n-                          \"\\thotness=\\\"%s\\\"\\n\"\n-                          \"\\tisProfilingCompile=%d>\\n\",\n-                          _compiler.signature(),\n-                          _compiler.getHotnessName(_compiler.getMethodHotness()),\n-                          _compiler.isProfilingCompilation());\n+                  {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee2d0578ce980c1b35c019145aeeda5e47a63846"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYxOTMzNQ==", "bodyText": "Currently if we don't have -Xjit:'{*}(traceFull),log=log in option, client UID is still printed in compilation log.\nCompilation log from -Xjit:'{*}(traceCG),log=log option\n<compile\n        method=\"sun/reflect/Reflection.getCallerClass()Ljava/lang/Class;\"\n        hotness=\"cold\"\n        isProfilingCompile=0\n        clientID=7954624449399674535>\n</compile>\n\nIs that what we wanted? Or shall we only print client UID when traceFull is present?", "url": "https://github.com/eclipse-openj9/openj9/pull/8365#discussion_r373619335", "createdAt": "2020-01-31T18:25:20Z", "author": {"login": "chrisc66"}, "path": "runtime/compiler/control/CompilationThread.cpp", "diffHunk": "@@ -8787,13 +8787,20 @@ TR::CompilationInfoPerThreadBase::compile(\n                {\n                TR_ASSERT(_compiler.getHotnessName(_compiler.getMethodHotness()), \"expected to have a hotness string\");\n                if (_compiler.getOutFile() != NULL && _compiler.getOption(TR_TraceAll))\n-                  traceMsg(&_compiler, \"<compile\\n\"\n-                          \"\\tmethod=\\\"%s\\\"\\n\"\n-                          \"\\thotness=\\\"%s\\\"\\n\"\n-                          \"\\tisProfilingCompile=%d>\\n\",\n-                          _compiler.signature(),\n-                          _compiler.getHotnessName(_compiler.getMethodHotness()),\n-                          _compiler.isProfilingCompilation());\n+                  {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU5NTI2MQ=="}, "originalCommit": {"oid": "ee2d0578ce980c1b35c019145aeeda5e47a63846"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYyMzA3NA==", "bodyText": "Yes, we want the clientID even when traceFull is not specified.\nIs there an extra > after the UID?\nIt would help to give an example on how the output looks before your changes and after your changes", "url": "https://github.com/eclipse-openj9/openj9/pull/8365#discussion_r373623074", "createdAt": "2020-01-31T18:33:55Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/control/CompilationThread.cpp", "diffHunk": "@@ -8787,13 +8787,20 @@ TR::CompilationInfoPerThreadBase::compile(\n                {\n                TR_ASSERT(_compiler.getHotnessName(_compiler.getMethodHotness()), \"expected to have a hotness string\");\n                if (_compiler.getOutFile() != NULL && _compiler.getOption(TR_TraceAll))\n-                  traceMsg(&_compiler, \"<compile\\n\"\n-                          \"\\tmethod=\\\"%s\\\"\\n\"\n-                          \"\\thotness=\\\"%s\\\"\\n\"\n-                          \"\\tisProfilingCompile=%d>\\n\",\n-                          _compiler.signature(),\n-                          _compiler.getHotnessName(_compiler.getMethodHotness()),\n-                          _compiler.isProfilingCompilation());\n+                  {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU5NTI2MQ=="}, "originalCommit": {"oid": "ee2d0578ce980c1b35c019145aeeda5e47a63846"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYzNTU3Nw==", "bodyText": "I think this > is part of the xml syntax\n<compile\n    XXX\n    XXX>\n</compile>\n\nHere is a comparison before & after change running the following command\n./java -XX:+UseJITServer -Xjit:'{*}(traceFull),log=log' -version\nBefore change\n<compile\n\tmethod=\"sun/reflect/Reflection.getCallerClass()Ljava/lang/Class;\"\n\thotness=\"cold\"\n\tisProfilingCompile=0>\n</compile>\n\nAfter change\n<compile\n        method=\"sun/reflect/Reflection.getCallerClass()Ljava/lang/Class;\"\n        hotness=\"cold\"\n        isProfilingCompile=0\n        clientID=9710225490534608421>\n</compile>", "url": "https://github.com/eclipse-openj9/openj9/pull/8365#discussion_r373635577", "createdAt": "2020-01-31T19:02:18Z", "author": {"login": "chrisc66"}, "path": "runtime/compiler/control/CompilationThread.cpp", "diffHunk": "@@ -8787,13 +8787,20 @@ TR::CompilationInfoPerThreadBase::compile(\n                {\n                TR_ASSERT(_compiler.getHotnessName(_compiler.getMethodHotness()), \"expected to have a hotness string\");\n                if (_compiler.getOutFile() != NULL && _compiler.getOption(TR_TraceAll))\n-                  traceMsg(&_compiler, \"<compile\\n\"\n-                          \"\\tmethod=\\\"%s\\\"\\n\"\n-                          \"\\thotness=\\\"%s\\\"\\n\"\n-                          \"\\tisProfilingCompile=%d>\\n\",\n-                          _compiler.signature(),\n-                          _compiler.getHotnessName(_compiler.getMethodHotness()),\n-                          _compiler.isProfilingCompilation());\n+                  {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU5NTI2MQ=="}, "originalCommit": {"oid": "ee2d0578ce980c1b35c019145aeeda5e47a63846"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY0MjEwMg==", "bodyText": "ok", "url": "https://github.com/eclipse-openj9/openj9/pull/8365#discussion_r373642102", "createdAt": "2020-01-31T19:17:45Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/control/CompilationThread.cpp", "diffHunk": "@@ -8787,13 +8787,20 @@ TR::CompilationInfoPerThreadBase::compile(\n                {\n                TR_ASSERT(_compiler.getHotnessName(_compiler.getMethodHotness()), \"expected to have a hotness string\");\n                if (_compiler.getOutFile() != NULL && _compiler.getOption(TR_TraceAll))\n-                  traceMsg(&_compiler, \"<compile\\n\"\n-                          \"\\tmethod=\\\"%s\\\"\\n\"\n-                          \"\\thotness=\\\"%s\\\"\\n\"\n-                          \"\\tisProfilingCompile=%d>\\n\",\n-                          _compiler.signature(),\n-                          _compiler.getHotnessName(_compiler.getMethodHotness()),\n-                          _compiler.isProfilingCompilation());\n+                  {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU5NTI2MQ=="}, "originalCommit": {"oid": "ee2d0578ce980c1b35c019145aeeda5e47a63846"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDA3MDAwOnYy", "diffSide": "RIGHT", "path": "runtime/oti/j9nonbuilder.h", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNzoyOTo1NlrOFkSfzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNzoyOTo1NlrOFkSfzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU5NjEwOA==", "bodyText": "Please eliminate isClient", "url": "https://github.com/eclipse-openj9/openj9/pull/8365#discussion_r373596108", "createdAt": "2020-01-31T17:29:56Z", "author": {"login": "mpirvu"}, "path": "runtime/oti/j9nonbuilder.h", "diffHunk": "@@ -3763,6 +3763,8 @@ typedef struct J9JITConfig {\n #if defined(JITSERVER_SUPPORT)\n \tint32_t (*startJITServer)(struct J9JITConfig *jitConfig);\n \tint32_t (*waitJITServerTermination)(struct J9JITConfig *jitConfig);\n+\tint32_t isClient;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee2d0578ce980c1b35c019145aeeda5e47a63846"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDA3NjA1OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/control/J9Options.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNzozMjozNVrOFkSjwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNzozMjozNVrOFkSjwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU5NzEyMA==", "bodyText": "We can eliminate jitConfig->isClient if we use the convention that a client can never have UID==0. Thus in here we need another check when generating the clientUID. If the random number generator returned 0, we have to call it again.\nThis also means that we need to initialize jitConfig->clientUID with 0 somewhere very early.", "url": "https://github.com/eclipse-openj9/openj9/pull/8365#discussion_r373597120", "createdAt": "2020-01-31T17:32:35Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/control/J9Options.cpp", "diffHunk": "@@ -1989,11 +1989,15 @@ J9::Options::fePreProcess(void * base)\n          std::random_device rd;\n          std::mt19937_64 rng(rd());\n          std::uniform_int_distribution<uint64_t> dist;\n-         compInfo->getPersistentInfo()->setClientUID(dist(rng));\n+         uint64_t clientUID = dist(rng);\n+         compInfo->getPersistentInfo()->setClientUID(clientUID);\n+         jitConfig->clientUID = clientUID;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee2d0578ce980c1b35c019145aeeda5e47a63846"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDA4NjczOnYy", "diffSide": "RIGHT", "path": "runtime/rasdump/javadump.cpp", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNzozNjo0NFrOFkSqeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxOTozNDowNFrOFkVvbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU5ODg0Mg==", "bodyText": "Note that we could have JITSERVER_SUPPORT enabled and still be running as a regular JVM (when we don't specify options to run as a client or server)", "url": "https://github.com/eclipse-openj9/openj9/pull/8365#discussion_r373598842", "createdAt": "2020-01-31T17:36:44Z", "author": {"login": "mpirvu"}, "path": "runtime/rasdump/javadump.cpp", "diffHunk": "@@ -1052,14 +1052,31 @@ JavaCoreDumpWriter::writeEnvironmentSection(void)\n \t/* Write the running mode data */\n \t_OutputStream.writeCharacters(\"1CIRUNNINGAS   Running as \");\n \n+\t/* If JITServer enabled, print running mode as JITServer and client UID*/\n+#ifdef JITSERVER_SUPPORT", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee2d0578ce980c1b35c019145aeeda5e47a63846"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY0MTU3Mw==", "bodyText": "How should we use clientUID to differentiate each case? There are three conditions here:\n\nJITSERVER_SUPPORT enabled, running as server -> clientUID = 0\nJITSERVER_SUPPORT enabled, running as client -> clientUID = non-zero random number\nJITSERVER_SUPPORT enabled, running as regular JVM\n\nI propose to set clientUID to 1 as a flag of regular JVM. So 0 means jitserver, 1 means regular JVM, other means client.", "url": "https://github.com/eclipse-openj9/openj9/pull/8365#discussion_r373641573", "createdAt": "2020-01-31T19:16:27Z", "author": {"login": "chrisc66"}, "path": "runtime/rasdump/javadump.cpp", "diffHunk": "@@ -1052,14 +1052,31 @@ JavaCoreDumpWriter::writeEnvironmentSection(void)\n \t/* Write the running mode data */\n \t_OutputStream.writeCharacters(\"1CIRUNNINGAS   Running as \");\n \n+\t/* If JITServer enabled, print running mode as JITServer and client UID*/\n+#ifdef JITSERVER_SUPPORT", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU5ODg0Mg=="}, "originalCommit": {"oid": "ee2d0578ce980c1b35c019145aeeda5e47a63846"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY0OTI2MA==", "bodyText": "if (vm->internalVMFunctions->isJITServerEnabled(vm))  will tell you if the JVM is a server. If it's not, then check jitConfig->clientUID. If 0, it's a regular JVM, othwerwise it's a client", "url": "https://github.com/eclipse-openj9/openj9/pull/8365#discussion_r373649260", "createdAt": "2020-01-31T19:34:04Z", "author": {"login": "mpirvu"}, "path": "runtime/rasdump/javadump.cpp", "diffHunk": "@@ -1052,14 +1052,31 @@ JavaCoreDumpWriter::writeEnvironmentSection(void)\n \t/* Write the running mode data */\n \t_OutputStream.writeCharacters(\"1CIRUNNINGAS   Running as \");\n \n+\t/* If JITServer enabled, print running mode as JITServer and client UID*/\n+#ifdef JITSERVER_SUPPORT", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU5ODg0Mg=="}, "originalCommit": {"oid": "ee2d0578ce980c1b35c019145aeeda5e47a63846"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDA4OTkxOnYy", "diffSide": "RIGHT", "path": "runtime/rasdump/javadump.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNzozODowNlrOFkSsjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNzozODowNlrOFkSsjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU5OTM3NQ==", "bodyText": "Here we could test if (0 != jitConfig->clientUID)", "url": "https://github.com/eclipse-openj9/openj9/pull/8365#discussion_r373599375", "createdAt": "2020-01-31T17:38:06Z", "author": {"login": "mpirvu"}, "path": "runtime/rasdump/javadump.cpp", "diffHunk": "@@ -1052,14 +1052,31 @@ JavaCoreDumpWriter::writeEnvironmentSection(void)\n \t/* Write the running mode data */\n \t_OutputStream.writeCharacters(\"1CIRUNNINGAS   Running as \");\n \n+\t/* If JITServer enabled, print running mode as JITServer and client UID*/\n+#ifdef JITSERVER_SUPPORT\n+\tif (jitConfig->isClient == 1) {\n+\t\t_OutputStream.writeCharacters(\"a JITServer Client\");\n+\t} else {\n+\t\t_OutputStream.writeCharacters(\"a JITServer Server\");\n+\t}\n \t/* NB : I can't find any code for making this decision in the existing implementation */\n-#ifdef J9VM_BUILD_J2SE\n+#elif J9VM_BUILD_J2SE\n \t_OutputStream.writeCharacters(\"a standalone\");\n #else\n \t_OutputStream.writeCharacters(\"an embedded\");\n #endif\n \t_OutputStream.writeCharacters(\" JVM\\n\");\n \n+#ifdef JITSERVER_SUPPORT\n+\tif (jitConfig->isClient == 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee2d0578ce980c1b35c019145aeeda5e47a63846"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDExMzQyOnYy", "diffSide": "RIGHT", "path": "runtime/rasdump/javadump.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNzo0NjowNVrOFkS6Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNzo0NjowNVrOFkS6Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYwMjg4Nw==", "bodyText": "I looked at some other examples and this is how we write a 64-bit unsigned value:\n_OutputStream.writeInteger64(j9time_nano_time(), \"%llu\");", "url": "https://github.com/eclipse-openj9/openj9/pull/8365#discussion_r373602887", "createdAt": "2020-01-31T17:46:05Z", "author": {"login": "mpirvu"}, "path": "runtime/rasdump/javadump.cpp", "diffHunk": "@@ -1052,14 +1052,31 @@ JavaCoreDumpWriter::writeEnvironmentSection(void)\n \t/* Write the running mode data */\n \t_OutputStream.writeCharacters(\"1CIRUNNINGAS   Running as \");\n \n+\t/* If JITServer enabled, print running mode as JITServer and client UID*/\n+#ifdef JITSERVER_SUPPORT\n+\tif (jitConfig->isClient == 1) {\n+\t\t_OutputStream.writeCharacters(\"a JITServer Client\");\n+\t} else {\n+\t\t_OutputStream.writeCharacters(\"a JITServer Server\");\n+\t}\n \t/* NB : I can't find any code for making this decision in the existing implementation */\n-#ifdef J9VM_BUILD_J2SE\n+#elif J9VM_BUILD_J2SE\n \t_OutputStream.writeCharacters(\"a standalone\");\n #else\n \t_OutputStream.writeCharacters(\"an embedded\");\n #endif\n \t_OutputStream.writeCharacters(\" JVM\\n\");\n \n+#ifdef JITSERVER_SUPPORT\n+\tif (jitConfig->isClient == 1) {\n+\t\tchar valueString[_MaximumGPValueLength]; \n+\t\tsprintf(valueString, \"%llu\", (unsigned long long) jitConfig->clientUID);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee2d0578ce980c1b35c019145aeeda5e47a63846"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDY0MDExOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/control/J9Options.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMToxNToxNVrOFkYJWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMToxNToxNVrOFkYJWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY4ODY2Nw==", "bodyText": "If jitserver jvm is running in server mode, this section ensures client UID is non-zero and stores it to persistent info.\nUnder below else block, client UID is set to zero if running as server mode.", "url": "https://github.com/eclipse-openj9/openj9/pull/8365#discussion_r373688667", "createdAt": "2020-01-31T21:15:15Z", "author": {"login": "chrisc66"}, "path": "runtime/compiler/control/J9Options.cpp", "diffHunk": "@@ -1989,15 +1989,23 @@ J9::Options::fePreProcess(void * base)\n          std::random_device rd;\n          std::mt19937_64 rng(rd());\n          std::uniform_int_distribution<uint64_t> dist;\n+         // We want to generate a non-zero client UID for client mode", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1aec2eaa764d8dba155932f180a6bd13a9a7c289"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDY5OTIyOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/control/J9Options.cpp", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMTo0MTowM1rOFkYuWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQyMTowMTo0OVrOFkfEuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY5ODEzNg==", "bodyText": "We will need something similar for a JVM that has JITServer code compiled-in, but it's acting like a regular JVM (not server, not client)", "url": "https://github.com/eclipse-openj9/openj9/pull/8365#discussion_r373698136", "createdAt": "2020-01-31T21:41:03Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/control/J9Options.cpp", "diffHunk": "@@ -1989,11 +1989,23 @@ J9::Options::fePreProcess(void * base)\n          std::random_device rd;\n          std::mt19937_64 rng(rd());\n          std::uniform_int_distribution<uint64_t> dist;\n-         compInfo->getPersistentInfo()->setClientUID(dist(rng));\n+         // We want to generate a non-zero client UID for client mode\n+         uint64_t clientUID = dist(rng);\n+         while (0 == clientUID)\n+            clientUID = dist(rng);\n+         compInfo->getPersistentInfo()->setClientUID(clientUID);\n+         jitConfig->clientUID = clientUID;\n+\n          // _safeReservePhysicalMemoryValue is set as 0 for the JITClient because compilations\n          // are done remotely. The user can still override it with a command line option\n          J9::Options::_safeReservePhysicalMemoryValue = 0;\n          }\n+      else\n+         {\n+         // Client UID is zero in jitserver mode", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1aec2eaa764d8dba155932f180a6bd13a9a7c289"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcxNzgzMQ==", "bodyText": "Shall we set clientUID to 1 if running as a regular JVM? By doing that we will have server mode clientUID = 0, regular JVM clientUID = 1, client mode clientUID = others.", "url": "https://github.com/eclipse-openj9/openj9/pull/8365#discussion_r373717831", "createdAt": "2020-01-31T22:43:28Z", "author": {"login": "chrisc66"}, "path": "runtime/compiler/control/J9Options.cpp", "diffHunk": "@@ -1989,11 +1989,23 @@ J9::Options::fePreProcess(void * base)\n          std::random_device rd;\n          std::mt19937_64 rng(rd());\n          std::uniform_int_distribution<uint64_t> dist;\n-         compInfo->getPersistentInfo()->setClientUID(dist(rng));\n+         // We want to generate a non-zero client UID for client mode\n+         uint64_t clientUID = dist(rng);\n+         while (0 == clientUID)\n+            clientUID = dist(rng);\n+         compInfo->getPersistentInfo()->setClientUID(clientUID);\n+         jitConfig->clientUID = clientUID;\n+\n          // _safeReservePhysicalMemoryValue is set as 0 for the JITClient because compilations\n          // are done remotely. The user can still override it with a command line option\n          J9::Options::_safeReservePhysicalMemoryValue = 0;\n          }\n+      else\n+         {\n+         // Client UID is zero in jitserver mode", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY5ODEzNg=="}, "originalCommit": {"oid": "1aec2eaa764d8dba155932f180a6bd13a9a7c289"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgwMjE2OQ==", "bodyText": "Why not clientUIT==0 for regular JVM and for server. Some value just for client.", "url": "https://github.com/eclipse-openj9/openj9/pull/8365#discussion_r373802169", "createdAt": "2020-02-01T21:01:49Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/control/J9Options.cpp", "diffHunk": "@@ -1989,11 +1989,23 @@ J9::Options::fePreProcess(void * base)\n          std::random_device rd;\n          std::mt19937_64 rng(rd());\n          std::uniform_int_distribution<uint64_t> dist;\n-         compInfo->getPersistentInfo()->setClientUID(dist(rng));\n+         // We want to generate a non-zero client UID for client mode\n+         uint64_t clientUID = dist(rng);\n+         while (0 == clientUID)\n+            clientUID = dist(rng);\n+         compInfo->getPersistentInfo()->setClientUID(clientUID);\n+         jitConfig->clientUID = clientUID;\n+\n          // _safeReservePhysicalMemoryValue is set as 0 for the JITClient because compilations\n          // are done remotely. The user can still override it with a command line option\n          J9::Options::_safeReservePhysicalMemoryValue = 0;\n          }\n+      else\n+         {\n+         // Client UID is zero in jitserver mode", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY5ODEzNg=="}, "originalCommit": {"oid": "1aec2eaa764d8dba155932f180a6bd13a9a7c289"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDcwMjkwOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/control/J9Options.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMTo0Mjo1OVrOFkYwqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMTo0Mjo1OVrOFkYwqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY5ODczMQ==", "bodyText": "If you added curly brackets for the else part you need to add them for the if part as well. That's our coding convention.", "url": "https://github.com/eclipse-openj9/openj9/pull/8365#discussion_r373698731", "createdAt": "2020-01-31T21:42:59Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/control/J9Options.cpp", "diffHunk": "@@ -2075,9 +2087,13 @@ J9::Options::setupJITServerOptions()\n          TR_VerboseLog::writeLineLocked(TR_Vlog_JITServer, \"JITServer Server Mode. Port: %d. Connection Timeout %ums\",\n                persistentInfo->getJITServerPort(), persistentInfo->getSocketTimeout());\n       else if (persistentInfo->getRemoteCompilationMode() == JITServer::CLIENT)\n+         {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1aec2eaa764d8dba155932f180a6bd13a9a7c289"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDcxMDA3OnYy", "diffSide": "RIGHT", "path": "runtime/rasdump/javadump.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMTo0NjozM1rOFkY1PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMTo0NjozM1rOFkY1PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY5OTkwMQ==", "bodyText": "Note that the JVM could be built with JITSERVER_SUPPORT, but still used in regular JVM mode. Your code does not allow for that andf it will print \"Running as  JVM\"", "url": "https://github.com/eclipse-openj9/openj9/pull/8365#discussion_r373699901", "createdAt": "2020-01-31T21:46:33Z", "author": {"login": "mpirvu"}, "path": "runtime/rasdump/javadump.cpp", "diffHunk": "@@ -1052,14 +1052,31 @@ JavaCoreDumpWriter::writeEnvironmentSection(void)\n \t/* Write the running mode data */\n \t_OutputStream.writeCharacters(\"1CIRUNNINGAS   Running as \");\n \n+\t/* If JITServer enabled, print running mode as JITServer and client UID*/\n+#ifdef JITSERVER_SUPPORT\n+\tif (_VirtualMachine->internalVMFunctions->isJITServerEnabled(_VirtualMachine))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1aec2eaa764d8dba155932f180a6bd13a9a7c289"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzk1MzcyOnYy", "diffSide": "RIGHT", "path": "runtime/rasdump/javadump.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNTozOToxNVrOFk1w1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNTozOToxNVrOFk1w1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE3MzkxMQ==", "bodyText": "Does this print anything in your tests? I thought that _VirtualMachine->internalVMFunctions->isJITServerEnabled(_VirtualMachine) returns true only for the server?", "url": "https://github.com/eclipse-openj9/openj9/pull/8365#discussion_r374173911", "createdAt": "2020-02-03T15:39:15Z", "author": {"login": "mpirvu"}, "path": "runtime/rasdump/javadump.cpp", "diffHunk": "@@ -1052,14 +1052,30 @@ JavaCoreDumpWriter::writeEnvironmentSection(void)\n \t/* Write the running mode data */\n \t_OutputStream.writeCharacters(\"1CIRUNNINGAS   Running as \");\n \n+\t/* If JITServer enabled, print running mode as JITServer and client UID*/\n+#ifdef JITSERVER_SUPPORT\n+\tif (_VirtualMachine->internalVMFunctions->isJITServerEnabled(_VirtualMachine)) // server\n+\t\t_OutputStream.writeCharacters(\"a JITServer Server\");\n+\telse if (0 == jitConfig->clientUID) // regular jvm\n+\t\t_OutputStream.writeCharacters(\"a standalone\");\n+\telse // client\n+\t\t_OutputStream.writeCharacters(\"a JITServer Client\");\n \t/* NB : I can't find any code for making this decision in the existing implementation */\n-#ifdef J9VM_BUILD_J2SE\n+#elif J9VM_BUILD_J2SE\n \t_OutputStream.writeCharacters(\"a standalone\");\n #else\n \t_OutputStream.writeCharacters(\"an embedded\");\n #endif\n \t_OutputStream.writeCharacters(\" JVM\\n\");\n \n+#ifdef JITSERVER_SUPPORT\n+\tif (_VirtualMachine->internalVMFunctions->isJITServerEnabled(_VirtualMachine) && 0 != jitConfig->clientUID) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1f25645fc6f087d2fd2dc919664a1eda82e03de"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNDAxNjA3OnYy", "diffSide": "RIGHT", "path": "runtime/rasdump/javadump.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNTo1NToyM1rOFk2X1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMDowMzoxNlrOFk-MWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE4Mzg5Mw==", "bodyText": "The way the code is structured right now, you cannot have an embedded JVM if we ever compile JITServer code in (i.e. if JITSSERVER_SUPPORT is enabled.\nI am thinking that we don't want to run the client in the embedded mode, but only as a standalone JVM. Thus, maybe it's better to do:\n#ifdef J9VM_BUILD_J2SE\n#ifdef JITSERVER_SUPPORT\n...\n#else /* !JITSERVER_SUPPORT */\n\t_OutputStream.writeCharacters(\"a standalone\");\n#endif \n#else /* !J9VM_BUILD_J2SE */\n       _OutputStream.writeCharacters(\"an embedded\");\n#endif", "url": "https://github.com/eclipse-openj9/openj9/pull/8365#discussion_r374183893", "createdAt": "2020-02-03T15:55:23Z", "author": {"login": "mpirvu"}, "path": "runtime/rasdump/javadump.cpp", "diffHunk": "@@ -1052,14 +1052,30 @@ JavaCoreDumpWriter::writeEnvironmentSection(void)\n \t/* Write the running mode data */\n \t_OutputStream.writeCharacters(\"1CIRUNNINGAS   Running as \");\n \n+\t/* If JITServer enabled, print running mode as JITServer and client UID*/\n+#ifdef JITSERVER_SUPPORT", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1f25645fc6f087d2fd2dc919664a1eda82e03de"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMxMjAyNQ==", "bodyText": "Thanks, this has been fixed. When both J9VM_BUILD_J2SE and JITSERVER_SUPPORT are defined, the program will print JITServer mode.", "url": "https://github.com/eclipse-openj9/openj9/pull/8365#discussion_r374312025", "createdAt": "2020-02-03T20:03:16Z", "author": {"login": "chrisc66"}, "path": "runtime/rasdump/javadump.cpp", "diffHunk": "@@ -1052,14 +1052,30 @@ JavaCoreDumpWriter::writeEnvironmentSection(void)\n \t/* Write the running mode data */\n \t_OutputStream.writeCharacters(\"1CIRUNNINGAS   Running as \");\n \n+\t/* If JITServer enabled, print running mode as JITServer and client UID*/\n+#ifdef JITSERVER_SUPPORT", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE4Mzg5Mw=="}, "originalCommit": {"oid": "b1f25645fc6f087d2fd2dc919664a1eda82e03de"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNDkxMTUzOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/control/J9Options.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMDozNToxNFrOFk_FJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMDozNToxNFrOFk_FJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMyNjU2Nw==", "bodyText": "We really ought to be using PRIu64 from <inttypes.h> instead of llu in places like this.", "url": "https://github.com/eclipse-openj9/openj9/pull/8365#discussion_r374326567", "createdAt": "2020-02-03T20:35:14Z", "author": {"login": "keithc-ca"}, "path": "runtime/compiler/control/J9Options.cpp", "diffHunk": "@@ -2072,12 +2084,18 @@ J9::Options::setupJITServerOptions()\n       {\n       TR::PersistentInfo *persistentInfo = compInfo->getPersistentInfo();\n       if (persistentInfo->getRemoteCompilationMode() == JITServer::SERVER)\n+         {\n          TR_VerboseLog::writeLineLocked(TR_Vlog_JITServer, \"JITServer Server Mode. Port: %d. Connection Timeout %ums\",\n                persistentInfo->getJITServerPort(), persistentInfo->getSocketTimeout());\n+         }\n       else if (persistentInfo->getRemoteCompilationMode() == JITServer::CLIENT)\n+         {\n          TR_VerboseLog::writeLineLocked(TR_Vlog_JITServer, \"JITServer Client Mode. Server address: %s port: %d. Connection Timeout %ums\",\n                persistentInfo->getJITServerAddress().c_str(), persistentInfo->getJITServerPort(),\n                persistentInfo->getSocketTimeout());\n+         TR_VerboseLog::writeLineLocked(TR_Vlog_JITServer,\"Identifier for current client JVM: %llu\\n\", ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c5e92da16e5c36209cdec559080273165bbcbf0"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNDkxNjA5OnYy", "diffSide": "RIGHT", "path": "runtime/oti/j9nonbuilder.h", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMDozNzowOVrOFk_IKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMDozNzowOVrOFk_IKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMyNzMzOQ==", "bodyText": "The type here should match how it's used (i.e. uint64_t).", "url": "https://github.com/eclipse-openj9/openj9/pull/8365#discussion_r374327339", "createdAt": "2020-02-03T20:37:09Z", "author": {"login": "keithc-ca"}, "path": "runtime/oti/j9nonbuilder.h", "diffHunk": "@@ -3763,6 +3763,7 @@ typedef struct J9JITConfig {\n #if defined(JITSERVER_SUPPORT)\n \tint32_t (*startJITServer)(struct J9JITConfig *jitConfig);\n \tint32_t (*waitJITServerTermination)(struct J9JITConfig *jitConfig);\n+\tint64_t clientUID;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c5e92da16e5c36209cdec559080273165bbcbf0"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNDkyMTAzOnYy", "diffSide": "RIGHT", "path": "runtime/rasdump/javadump.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMDozODo1MFrOFk_LNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMDozODo1MFrOFk_LNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMyODExNw==", "bodyText": "Please indent with a tab consistent with the rest of this file.", "url": "https://github.com/eclipse-openj9/openj9/pull/8365#discussion_r374328117", "createdAt": "2020-02-03T20:38:50Z", "author": {"login": "keithc-ca"}, "path": "runtime/rasdump/javadump.cpp", "diffHunk": "@@ -1054,12 +1054,30 @@ JavaCoreDumpWriter::writeEnvironmentSection(void)\n \n \t/* NB : I can't find any code for making this decision in the existing implementation */\n #ifdef J9VM_BUILD_J2SE\n+\t/* If JITServer enabled, print running mode as JITServer and client UID*/\n+#ifdef JITSERVER_SUPPORT\n+\tif (_VirtualMachine->internalVMFunctions->isJITServerEnabled(_VirtualMachine))\n+\t\t_OutputStream.writeCharacters(\"a JITServer Server\");\n+\telse if (0 != jitConfig->clientUID)\n+\t\t_OutputStream.writeCharacters(\"a JITServer Client\");\n+\telse\n+\t\t_OutputStream.writeCharacters(\"a standalone\");\n+#else /* !JITSERVER_SUPPORT */\n \t_OutputStream.writeCharacters(\"a standalone\");\n-#else\n-\t_OutputStream.writeCharacters(\"an embedded\");\n+#endif \n+#else /* !J9VM_BUILD_J2SE */\n+    _OutputStream.writeCharacters(\"an embedded\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c5e92da16e5c36209cdec559080273165bbcbf0"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNDkyMzAyOnYy", "diffSide": "RIGHT", "path": "runtime/rasdump/javadump.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMDozOTozMVrOFk_MVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMDozOTozMVrOFk_MVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMyODQwNw==", "bodyText": "Please use #if defined(JITSERVER_SUPPORT) instead of #ifdef.", "url": "https://github.com/eclipse-openj9/openj9/pull/8365#discussion_r374328407", "createdAt": "2020-02-03T20:39:31Z", "author": {"login": "keithc-ca"}, "path": "runtime/rasdump/javadump.cpp", "diffHunk": "@@ -1054,12 +1054,30 @@ JavaCoreDumpWriter::writeEnvironmentSection(void)\n \n \t/* NB : I can't find any code for making this decision in the existing implementation */\n #ifdef J9VM_BUILD_J2SE\n+\t/* If JITServer enabled, print running mode as JITServer and client UID*/\n+#ifdef JITSERVER_SUPPORT\n+\tif (_VirtualMachine->internalVMFunctions->isJITServerEnabled(_VirtualMachine))\n+\t\t_OutputStream.writeCharacters(\"a JITServer Server\");\n+\telse if (0 != jitConfig->clientUID)\n+\t\t_OutputStream.writeCharacters(\"a JITServer Client\");\n+\telse\n+\t\t_OutputStream.writeCharacters(\"a standalone\");\n+#else /* !JITSERVER_SUPPORT */\n \t_OutputStream.writeCharacters(\"a standalone\");\n-#else\n-\t_OutputStream.writeCharacters(\"an embedded\");\n+#endif \n+#else /* !J9VM_BUILD_J2SE */\n+    _OutputStream.writeCharacters(\"an embedded\");\n #endif\n \t_OutputStream.writeCharacters(\" JVM\\n\");\n \n+#ifdef JITSERVER_SUPPORT", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c5e92da16e5c36209cdec559080273165bbcbf0"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNDkyNDg1OnYy", "diffSide": "RIGHT", "path": "runtime/rasdump/javadump.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMDo0MDowOFrOFk_NbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMDo0MDowOFrOFk_NbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMyODY4NA==", "bodyText": "This should have a comment indicating the matching #if (i.e. /* JITSERVER_SUPPORT */).", "url": "https://github.com/eclipse-openj9/openj9/pull/8365#discussion_r374328684", "createdAt": "2020-02-03T20:40:08Z", "author": {"login": "keithc-ca"}, "path": "runtime/rasdump/javadump.cpp", "diffHunk": "@@ -1054,12 +1054,30 @@ JavaCoreDumpWriter::writeEnvironmentSection(void)\n \n \t/* NB : I can't find any code for making this decision in the existing implementation */\n #ifdef J9VM_BUILD_J2SE\n+\t/* If JITServer enabled, print running mode as JITServer and client UID*/\n+#ifdef JITSERVER_SUPPORT\n+\tif (_VirtualMachine->internalVMFunctions->isJITServerEnabled(_VirtualMachine))\n+\t\t_OutputStream.writeCharacters(\"a JITServer Server\");\n+\telse if (0 != jitConfig->clientUID)\n+\t\t_OutputStream.writeCharacters(\"a JITServer Client\");\n+\telse\n+\t\t_OutputStream.writeCharacters(\"a standalone\");\n+#else /* !JITSERVER_SUPPORT */\n \t_OutputStream.writeCharacters(\"a standalone\");\n-#else\n-\t_OutputStream.writeCharacters(\"an embedded\");\n+#endif \n+#else /* !J9VM_BUILD_J2SE */\n+    _OutputStream.writeCharacters(\"an embedded\");\n #endif\n \t_OutputStream.writeCharacters(\" JVM\\n\");\n \n+#ifdef JITSERVER_SUPPORT\n+\tif (0 != jitConfig->clientUID) {\n+\t\t_OutputStream.writeCharacters(\"1CICLIENTID    Client UID \"); \n+\t\t_OutputStream.writeInteger64(jitConfig->clientUID, \"%llu\");\n+\t\t_OutputStream.writeCharacters(\"\\n\");\n+\t}\n+#endif", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c5e92da16e5c36209cdec559080273165bbcbf0"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNTE2MzkwOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/control/J9Options.cpp", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMjowMzoxMFrOFlBiqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMjoxODozNVrOFlB87g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM2Njg4OQ==", "bodyText": "No, that's not how PRIu64 is intended to be used; the format string should be expressed as:\n  \"Identifier for current client JVM: %\" PRIu64 \"\\n\"\n\nPRIu64 might expand to \"llu\" yielding a (more portable expression) version of what you had before.\nTake note of the (required) spaces either side of PRIu64.\nThis pattern should be applied to all printf format strings you're adding or changing in this PR.", "url": "https://github.com/eclipse-openj9/openj9/pull/8365#discussion_r374366889", "createdAt": "2020-02-03T22:03:10Z", "author": {"login": "keithc-ca"}, "path": "runtime/compiler/control/J9Options.cpp", "diffHunk": "@@ -2072,12 +2084,18 @@ J9::Options::setupJITServerOptions()\n       {\n       TR::PersistentInfo *persistentInfo = compInfo->getPersistentInfo();\n       if (persistentInfo->getRemoteCompilationMode() == JITServer::SERVER)\n+         {\n          TR_VerboseLog::writeLineLocked(TR_Vlog_JITServer, \"JITServer Server Mode. Port: %d. Connection Timeout %ums\",\n                persistentInfo->getJITServerPort(), persistentInfo->getSocketTimeout());\n+         }\n       else if (persistentInfo->getRemoteCompilationMode() == JITServer::CLIENT)\n+         {\n          TR_VerboseLog::writeLineLocked(TR_Vlog_JITServer, \"JITServer Client Mode. Server address: %s port: %d. Connection Timeout %ums\",\n                persistentInfo->getJITServerAddress().c_str(), persistentInfo->getJITServerPort(),\n                persistentInfo->getSocketTimeout());\n+         TR_VerboseLog::writeLineLocked(TR_Vlog_JITServer,\"Identifier for current client JVM: %PRIu64\\n\", ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27873b761a5e5857ec4205cca78567088dc335ae"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM3MzYxNA==", "bodyText": "Ohh thanks. There are three llu in this PR, let me fix those.", "url": "https://github.com/eclipse-openj9/openj9/pull/8365#discussion_r374373614", "createdAt": "2020-02-03T22:18:35Z", "author": {"login": "chrisc66"}, "path": "runtime/compiler/control/J9Options.cpp", "diffHunk": "@@ -2072,12 +2084,18 @@ J9::Options::setupJITServerOptions()\n       {\n       TR::PersistentInfo *persistentInfo = compInfo->getPersistentInfo();\n       if (persistentInfo->getRemoteCompilationMode() == JITServer::SERVER)\n+         {\n          TR_VerboseLog::writeLineLocked(TR_Vlog_JITServer, \"JITServer Server Mode. Port: %d. Connection Timeout %ums\",\n                persistentInfo->getJITServerPort(), persistentInfo->getSocketTimeout());\n+         }\n       else if (persistentInfo->getRemoteCompilationMode() == JITServer::CLIENT)\n+         {\n          TR_VerboseLog::writeLineLocked(TR_Vlog_JITServer, \"JITServer Client Mode. Server address: %s port: %d. Connection Timeout %ums\",\n                persistentInfo->getJITServerAddress().c_str(), persistentInfo->getJITServerPort(),\n                persistentInfo->getSocketTimeout());\n+         TR_VerboseLog::writeLineLocked(TR_Vlog_JITServer,\"Identifier for current client JVM: %PRIu64\\n\", ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM2Njg4OQ=="}, "originalCommit": {"oid": "27873b761a5e5857ec4205cca78567088dc335ae"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNTUwMTgxOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/control/CompilationThread.cpp", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwMDozNjo0NVrOFlEwvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNDo0NjoxMFrOFl6XvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQxOTY0Nw==", "bodyText": "Concatenating the empty string isn't helpful; the format string should be just \"\\tclientID=\" PRIu64 (likewise in javadump.cpp).", "url": "https://github.com/eclipse-openj9/openj9/pull/8365#discussion_r374419647", "createdAt": "2020-02-04T00:36:45Z", "author": {"login": "keithc-ca"}, "path": "runtime/compiler/control/CompilationThread.cpp", "diffHunk": "@@ -8787,13 +8788,20 @@ TR::CompilationInfoPerThreadBase::compile(\n                {\n                TR_ASSERT(_compiler.getHotnessName(_compiler.getMethodHotness()), \"expected to have a hotness string\");\n                if (_compiler.getOutFile() != NULL && _compiler.getOption(TR_TraceAll))\n-                  traceMsg(&_compiler, \"<compile\\n\"\n-                          \"\\tmethod=\\\"%s\\\"\\n\"\n-                          \"\\thotness=\\\"%s\\\"\\n\"\n-                          \"\\tisProfilingCompile=%d>\\n\",\n-                          _compiler.signature(),\n-                          _compiler.getHotnessName(_compiler.getMethodHotness()),\n-                          _compiler.isProfilingCompilation());\n+                  {\n+                  traceMsg(&_compiler, \"<compile\\n\");\n+                  traceMsg(&_compiler, \"\\tmethod=\\\"%s\\\"\\n\", _compiler.signature());\n+                  traceMsg(&_compiler, \"\\thotness=\\\"%s\\\"\\n\", _compiler.getHotnessName(_compiler.getMethodHotness()));\n+                  traceMsg(&_compiler, \"\\tisProfilingCompile=%d\", _compiler.isProfilingCompilation());\n+#if defined(JITSERVER_SUPPORT)\n+                  if (_compiler.isOutOfProcessCompilation() && TR::compInfoPT->getClientData()) // using jitserver && client JVM\n+                     {\n+                     traceMsg(&_compiler, \"\\n\");\n+                     traceMsg(&_compiler, \"\\tclientID=\" PRIu64 \"\", TR::compInfoPT->getClientData()->getClientUID());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b7b8be688fe42afa0c8b444e475ab16cab6922f"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDcyNjc4NQ==", "bodyText": "I was confused by the usage of PRIu64 earlier. The intension of this piece of code is to print the value of clientUID instead of the string literal PRlu64 (unsigned long long).\nI tried \"\\tclientID=\" PRIu64 to write format string in CompilationThread.cpp\ntraceMsg(&_compiler, \"\\tclientID=\" PRIu64, TR::compInfoPT->getClientData()->getClientUID());\nand got below compilation trace\nclientID=lu\n\nHowever if I use \"\\tclientID=%\" PRIu64 \"\"\ntraceMsg(&_compiler, \"\\tclientID=%\" PRIu64 \"\", TR::compInfoPT->getClientData()->getClientUID());\ncompilation trace would be\nclientID=2145050389>", "url": "https://github.com/eclipse-openj9/openj9/pull/8365#discussion_r374726785", "createdAt": "2020-02-04T15:08:16Z", "author": {"login": "chrisc66"}, "path": "runtime/compiler/control/CompilationThread.cpp", "diffHunk": "@@ -8787,13 +8788,20 @@ TR::CompilationInfoPerThreadBase::compile(\n                {\n                TR_ASSERT(_compiler.getHotnessName(_compiler.getMethodHotness()), \"expected to have a hotness string\");\n                if (_compiler.getOutFile() != NULL && _compiler.getOption(TR_TraceAll))\n-                  traceMsg(&_compiler, \"<compile\\n\"\n-                          \"\\tmethod=\\\"%s\\\"\\n\"\n-                          \"\\thotness=\\\"%s\\\"\\n\"\n-                          \"\\tisProfilingCompile=%d>\\n\",\n-                          _compiler.signature(),\n-                          _compiler.getHotnessName(_compiler.getMethodHotness()),\n-                          _compiler.isProfilingCompilation());\n+                  {\n+                  traceMsg(&_compiler, \"<compile\\n\");\n+                  traceMsg(&_compiler, \"\\tmethod=\\\"%s\\\"\\n\", _compiler.signature());\n+                  traceMsg(&_compiler, \"\\thotness=\\\"%s\\\"\\n\", _compiler.getHotnessName(_compiler.getMethodHotness()));\n+                  traceMsg(&_compiler, \"\\tisProfilingCompile=%d\", _compiler.isProfilingCompilation());\n+#if defined(JITSERVER_SUPPORT)\n+                  if (_compiler.isOutOfProcessCompilation() && TR::compInfoPT->getClientData()) // using jitserver && client JVM\n+                     {\n+                     traceMsg(&_compiler, \"\\n\");\n+                     traceMsg(&_compiler, \"\\tclientID=\" PRIu64 \"\", TR::compInfoPT->getClientData()->getClientUID());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQxOTY0Nw=="}, "originalCommit": {"oid": "3b7b8be688fe42afa0c8b444e475ab16cab6922f"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDcyODEwMw==", "bodyText": "Similar in javadump.cpp, I am using the following line to generate javacore file\n_OutputStream.writeInteger64(jitConfig->clientUID, PRIu64);\nJavacore\n1CICLIENTID    Client UID lu\n\nIf I use the following\n_OutputStream.writeInteger64(jitConfig->clientUID, \"%\" PRIu64 \"\");\nJavacore\n1CICLIENTID    Client UID 3068314397", "url": "https://github.com/eclipse-openj9/openj9/pull/8365#discussion_r374728103", "createdAt": "2020-02-04T15:10:12Z", "author": {"login": "chrisc66"}, "path": "runtime/compiler/control/CompilationThread.cpp", "diffHunk": "@@ -8787,13 +8788,20 @@ TR::CompilationInfoPerThreadBase::compile(\n                {\n                TR_ASSERT(_compiler.getHotnessName(_compiler.getMethodHotness()), \"expected to have a hotness string\");\n                if (_compiler.getOutFile() != NULL && _compiler.getOption(TR_TraceAll))\n-                  traceMsg(&_compiler, \"<compile\\n\"\n-                          \"\\tmethod=\\\"%s\\\"\\n\"\n-                          \"\\thotness=\\\"%s\\\"\\n\"\n-                          \"\\tisProfilingCompile=%d>\\n\",\n-                          _compiler.signature(),\n-                          _compiler.getHotnessName(_compiler.getMethodHotness()),\n-                          _compiler.isProfilingCompilation());\n+                  {\n+                  traceMsg(&_compiler, \"<compile\\n\");\n+                  traceMsg(&_compiler, \"\\tmethod=\\\"%s\\\"\\n\", _compiler.signature());\n+                  traceMsg(&_compiler, \"\\thotness=\\\"%s\\\"\\n\", _compiler.getHotnessName(_compiler.getMethodHotness()));\n+                  traceMsg(&_compiler, \"\\tisProfilingCompile=%d\", _compiler.isProfilingCompilation());\n+#if defined(JITSERVER_SUPPORT)\n+                  if (_compiler.isOutOfProcessCompilation() && TR::compInfoPT->getClientData()) // using jitserver && client JVM\n+                     {\n+                     traceMsg(&_compiler, \"\\n\");\n+                     traceMsg(&_compiler, \"\\tclientID=\" PRIu64 \"\", TR::compInfoPT->getClientData()->getClientUID());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQxOTY0Nw=="}, "originalCommit": {"oid": "3b7b8be688fe42afa0c8b444e475ab16cab6922f"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDczMjM2OQ==", "bodyText": "How about:\n_OutputStream.writeInteger64(jitConfig->clientUID, \"%\" PRIu64);", "url": "https://github.com/eclipse-openj9/openj9/pull/8365#discussion_r374732369", "createdAt": "2020-02-04T15:16:35Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/control/CompilationThread.cpp", "diffHunk": "@@ -8787,13 +8788,20 @@ TR::CompilationInfoPerThreadBase::compile(\n                {\n                TR_ASSERT(_compiler.getHotnessName(_compiler.getMethodHotness()), \"expected to have a hotness string\");\n                if (_compiler.getOutFile() != NULL && _compiler.getOption(TR_TraceAll))\n-                  traceMsg(&_compiler, \"<compile\\n\"\n-                          \"\\tmethod=\\\"%s\\\"\\n\"\n-                          \"\\thotness=\\\"%s\\\"\\n\"\n-                          \"\\tisProfilingCompile=%d>\\n\",\n-                          _compiler.signature(),\n-                          _compiler.getHotnessName(_compiler.getMethodHotness()),\n-                          _compiler.isProfilingCompilation());\n+                  {\n+                  traceMsg(&_compiler, \"<compile\\n\");\n+                  traceMsg(&_compiler, \"\\tmethod=\\\"%s\\\"\\n\", _compiler.signature());\n+                  traceMsg(&_compiler, \"\\thotness=\\\"%s\\\"\\n\", _compiler.getHotnessName(_compiler.getMethodHotness()));\n+                  traceMsg(&_compiler, \"\\tisProfilingCompile=%d\", _compiler.isProfilingCompilation());\n+#if defined(JITSERVER_SUPPORT)\n+                  if (_compiler.isOutOfProcessCompilation() && TR::compInfoPT->getClientData()) // using jitserver && client JVM\n+                     {\n+                     traceMsg(&_compiler, \"\\n\");\n+                     traceMsg(&_compiler, \"\\tclientID=\" PRIu64 \"\", TR::compInfoPT->getClientData()->getClientUID());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQxOTY0Nw=="}, "originalCommit": {"oid": "3b7b8be688fe42afa0c8b444e475ab16cab6922f"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc1OTg4Nw==", "bodyText": "Confirmed. Pushed the latest change into this PR.", "url": "https://github.com/eclipse-openj9/openj9/pull/8365#discussion_r374759887", "createdAt": "2020-02-04T15:57:47Z", "author": {"login": "chrisc66"}, "path": "runtime/compiler/control/CompilationThread.cpp", "diffHunk": "@@ -8787,13 +8788,20 @@ TR::CompilationInfoPerThreadBase::compile(\n                {\n                TR_ASSERT(_compiler.getHotnessName(_compiler.getMethodHotness()), \"expected to have a hotness string\");\n                if (_compiler.getOutFile() != NULL && _compiler.getOption(TR_TraceAll))\n-                  traceMsg(&_compiler, \"<compile\\n\"\n-                          \"\\tmethod=\\\"%s\\\"\\n\"\n-                          \"\\thotness=\\\"%s\\\"\\n\"\n-                          \"\\tisProfilingCompile=%d>\\n\",\n-                          _compiler.signature(),\n-                          _compiler.getHotnessName(_compiler.getMethodHotness()),\n-                          _compiler.isProfilingCompilation());\n+                  {\n+                  traceMsg(&_compiler, \"<compile\\n\");\n+                  traceMsg(&_compiler, \"\\tmethod=\\\"%s\\\"\\n\", _compiler.signature());\n+                  traceMsg(&_compiler, \"\\thotness=\\\"%s\\\"\\n\", _compiler.getHotnessName(_compiler.getMethodHotness()));\n+                  traceMsg(&_compiler, \"\\tisProfilingCompile=%d\", _compiler.isProfilingCompilation());\n+#if defined(JITSERVER_SUPPORT)\n+                  if (_compiler.isOutOfProcessCompilation() && TR::compInfoPT->getClientData()) // using jitserver && client JVM\n+                     {\n+                     traceMsg(&_compiler, \"\\n\");\n+                     traceMsg(&_compiler, \"\\tclientID=\" PRIu64 \"\", TR::compInfoPT->getClientData()->getClientUID());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQxOTY0Nw=="}, "originalCommit": {"oid": "3b7b8be688fe42afa0c8b444e475ab16cab6922f"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgwMjMxMQ==", "bodyText": "Sorry, I omitted the % in my suggestion: it should have been:\n\"\\tclientID=%\" PRIu64", "url": "https://github.com/eclipse-openj9/openj9/pull/8365#discussion_r374802311", "createdAt": "2020-02-04T17:05:53Z", "author": {"login": "keithc-ca"}, "path": "runtime/compiler/control/CompilationThread.cpp", "diffHunk": "@@ -8787,13 +8788,20 @@ TR::CompilationInfoPerThreadBase::compile(\n                {\n                TR_ASSERT(_compiler.getHotnessName(_compiler.getMethodHotness()), \"expected to have a hotness string\");\n                if (_compiler.getOutFile() != NULL && _compiler.getOption(TR_TraceAll))\n-                  traceMsg(&_compiler, \"<compile\\n\"\n-                          \"\\tmethod=\\\"%s\\\"\\n\"\n-                          \"\\thotness=\\\"%s\\\"\\n\"\n-                          \"\\tisProfilingCompile=%d>\\n\",\n-                          _compiler.signature(),\n-                          _compiler.getHotnessName(_compiler.getMethodHotness()),\n-                          _compiler.isProfilingCompilation());\n+                  {\n+                  traceMsg(&_compiler, \"<compile\\n\");\n+                  traceMsg(&_compiler, \"\\tmethod=\\\"%s\\\"\\n\", _compiler.signature());\n+                  traceMsg(&_compiler, \"\\thotness=\\\"%s\\\"\\n\", _compiler.getHotnessName(_compiler.getMethodHotness()));\n+                  traceMsg(&_compiler, \"\\tisProfilingCompile=%d\", _compiler.isProfilingCompilation());\n+#if defined(JITSERVER_SUPPORT)\n+                  if (_compiler.isOutOfProcessCompilation() && TR::compInfoPT->getClientData()) // using jitserver && client JVM\n+                     {\n+                     traceMsg(&_compiler, \"\\n\");\n+                     traceMsg(&_compiler, \"\\tclientID=\" PRIu64 \"\", TR::compInfoPT->getClientData()->getClientUID());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQxOTY0Nw=="}, "originalCommit": {"oid": "3b7b8be688fe42afa0c8b444e475ab16cab6922f"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI5Nzk4MA==", "bodyText": "@keithc-ca Thank you, this has been fixed in the latest change. Please take a look.", "url": "https://github.com/eclipse-openj9/openj9/pull/8365#discussion_r375297980", "createdAt": "2020-02-05T14:46:10Z", "author": {"login": "chrisc66"}, "path": "runtime/compiler/control/CompilationThread.cpp", "diffHunk": "@@ -8787,13 +8788,20 @@ TR::CompilationInfoPerThreadBase::compile(\n                {\n                TR_ASSERT(_compiler.getHotnessName(_compiler.getMethodHotness()), \"expected to have a hotness string\");\n                if (_compiler.getOutFile() != NULL && _compiler.getOption(TR_TraceAll))\n-                  traceMsg(&_compiler, \"<compile\\n\"\n-                          \"\\tmethod=\\\"%s\\\"\\n\"\n-                          \"\\thotness=\\\"%s\\\"\\n\"\n-                          \"\\tisProfilingCompile=%d>\\n\",\n-                          _compiler.signature(),\n-                          _compiler.getHotnessName(_compiler.getMethodHotness()),\n-                          _compiler.isProfilingCompilation());\n+                  {\n+                  traceMsg(&_compiler, \"<compile\\n\");\n+                  traceMsg(&_compiler, \"\\tmethod=\\\"%s\\\"\\n\", _compiler.signature());\n+                  traceMsg(&_compiler, \"\\thotness=\\\"%s\\\"\\n\", _compiler.getHotnessName(_compiler.getMethodHotness()));\n+                  traceMsg(&_compiler, \"\\tisProfilingCompile=%d\", _compiler.isProfilingCompilation());\n+#if defined(JITSERVER_SUPPORT)\n+                  if (_compiler.isOutOfProcessCompilation() && TR::compInfoPT->getClientData()) // using jitserver && client JVM\n+                     {\n+                     traceMsg(&_compiler, \"\\n\");\n+                     traceMsg(&_compiler, \"\\tclientID=\" PRIu64 \"\", TR::compInfoPT->getClientData()->getClientUID());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQxOTY0Nw=="}, "originalCommit": {"oid": "3b7b8be688fe42afa0c8b444e475ab16cab6922f"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNzc2NDkzOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/control/CompilationThread.cpp", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNjoxODoyNFrOFlaVcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNjo0MDo0OFrOFlbMPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc3MzEwNg==", "bodyText": "This line has the same issue: extra \"\" which can be removed", "url": "https://github.com/eclipse-openj9/openj9/pull/8365#discussion_r374773106", "createdAt": "2020-02-04T16:18:24Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/control/CompilationThread.cpp", "diffHunk": "@@ -8787,13 +8788,20 @@ TR::CompilationInfoPerThreadBase::compile(\n                {\n                TR_ASSERT(_compiler.getHotnessName(_compiler.getMethodHotness()), \"expected to have a hotness string\");\n                if (_compiler.getOutFile() != NULL && _compiler.getOption(TR_TraceAll))\n-                  traceMsg(&_compiler, \"<compile\\n\"\n-                          \"\\tmethod=\\\"%s\\\"\\n\"\n-                          \"\\thotness=\\\"%s\\\"\\n\"\n-                          \"\\tisProfilingCompile=%d>\\n\",\n-                          _compiler.signature(),\n-                          _compiler.getHotnessName(_compiler.getMethodHotness()),\n-                          _compiler.isProfilingCompilation());\n+                  {\n+                  traceMsg(&_compiler, \"<compile\\n\");\n+                  traceMsg(&_compiler, \"\\tmethod=\\\"%s\\\"\\n\", _compiler.signature());\n+                  traceMsg(&_compiler, \"\\thotness=\\\"%s\\\"\\n\", _compiler.getHotnessName(_compiler.getMethodHotness()));\n+                  traceMsg(&_compiler, \"\\tisProfilingCompile=%d\", _compiler.isProfilingCompilation());\n+#if defined(JITSERVER_SUPPORT)\n+                  if (_compiler.isOutOfProcessCompilation() && TR::compInfoPT->getClientData()) // using jitserver && client JVM\n+                     {\n+                     traceMsg(&_compiler, \"\\n\");\n+                     traceMsg(&_compiler, \"\\tclientID=%\" PRIu64 \"\", TR::compInfoPT->getClientData()->getClientUID());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17c2d1996b7af3eccc92552ab44238255bd19b61"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc4NzEzNA==", "bodyText": "Thanks, I also edited this.", "url": "https://github.com/eclipse-openj9/openj9/pull/8365#discussion_r374787134", "createdAt": "2020-02-04T16:40:48Z", "author": {"login": "chrisc66"}, "path": "runtime/compiler/control/CompilationThread.cpp", "diffHunk": "@@ -8787,13 +8788,20 @@ TR::CompilationInfoPerThreadBase::compile(\n                {\n                TR_ASSERT(_compiler.getHotnessName(_compiler.getMethodHotness()), \"expected to have a hotness string\");\n                if (_compiler.getOutFile() != NULL && _compiler.getOption(TR_TraceAll))\n-                  traceMsg(&_compiler, \"<compile\\n\"\n-                          \"\\tmethod=\\\"%s\\\"\\n\"\n-                          \"\\thotness=\\\"%s\\\"\\n\"\n-                          \"\\tisProfilingCompile=%d>\\n\",\n-                          _compiler.signature(),\n-                          _compiler.getHotnessName(_compiler.getMethodHotness()),\n-                          _compiler.isProfilingCompilation());\n+                  {\n+                  traceMsg(&_compiler, \"<compile\\n\");\n+                  traceMsg(&_compiler, \"\\tmethod=\\\"%s\\\"\\n\", _compiler.signature());\n+                  traceMsg(&_compiler, \"\\thotness=\\\"%s\\\"\\n\", _compiler.getHotnessName(_compiler.getMethodHotness()));\n+                  traceMsg(&_compiler, \"\\tisProfilingCompile=%d\", _compiler.isProfilingCompilation());\n+#if defined(JITSERVER_SUPPORT)\n+                  if (_compiler.isOutOfProcessCompilation() && TR::compInfoPT->getClientData()) // using jitserver && client JVM\n+                     {\n+                     traceMsg(&_compiler, \"\\n\");\n+                     traceMsg(&_compiler, \"\\tclientID=%\" PRIu64 \"\", TR::compInfoPT->getClientData()->getClientUID());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc3MzEwNg=="}, "originalCommit": {"oid": "17c2d1996b7af3eccc92552ab44238255bd19b61"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 783, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}