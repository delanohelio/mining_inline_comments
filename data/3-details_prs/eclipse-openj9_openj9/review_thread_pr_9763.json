{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2MjU4ODgw", "number": 9763, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNToyNTowOFrOECNDHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNTozMzozNFrOECNSpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNzQ2Mzk5OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/control/JITServerCompilationThread.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNToyNTowOFrOGehGjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNjowMjo1M1rOGei1PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY1MjgxNA==", "bodyText": "Isn't this too early to increase the number of active threads? A thread that has to wait for its turn will see itself as an active thread and never clear the caches. In my mind the increment should be done after the thread has cleared the waitForMyTurn() routine.", "url": "https://github.com/eclipse-openj9/openj9/pull/9763#discussion_r434652814", "createdAt": "2020-06-03T15:25:08Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/control/JITServerCompilationThread.cpp", "diffHunk": "@@ -384,6 +384,8 @@ TR::CompilationInfoPerThreadRemote::processEntry(TR_MethodToBeCompiled &entry, J\n       //\n       clientSession->getSequencingMonitor()->enter();\n       clientSession->updateMaxReceivedSeqNo(seqNo);\n+      clientSession->incNumActiveThreads();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c77a963f149aea39fda8e8df6e84ee496d311f8"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY4MTE0OA==", "bodyText": "Yes, you're right. It is too early. It should've been done right before the thread starts to do the class unloading etc as below.\n      clientSession->getSequencingMonitor()->enter();\n      clientSession->updateMaxReceivedSeqNo(seqNo);\n\n      if (seqNo > clientSession->getExpectedSeqNo()) // Out of order messages\n         {\n         ...\n         waitForMyTurn(clientSession, entry);\n         }\n      else if (seqNo < clientSession->getExpectedSeqNo())\n         {\n         ...\n         clientSession->getSequencingMonitor()->exit();\n         throw JITServer::StreamOOO();\n         }\n\n      clientSession->incNumActiveThreads(); <= Should be here \n\n      // We can release the sequencing monitor now because nobody with a\n      // larger sequence number can pass until I increment expectedSeqNo\n      clientSession->getSequencingMonitor()->exit();\n\n      // At this point I know that all preceeding requests have been processed\n      // and only one thread can ever be present in this section\n      if (!clientSession->cachesAreCleared())", "url": "https://github.com/eclipse-openj9/openj9/pull/9763#discussion_r434681148", "createdAt": "2020-06-03T16:02:53Z", "author": {"login": "a7ehuo"}, "path": "runtime/compiler/control/JITServerCompilationThread.cpp", "diffHunk": "@@ -384,6 +384,8 @@ TR::CompilationInfoPerThreadRemote::processEntry(TR_MethodToBeCompiled &entry, J\n       //\n       clientSession->getSequencingMonitor()->enter();\n       clientSession->updateMaxReceivedSeqNo(seqNo);\n+      clientSession->incNumActiveThreads();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY1MjgxNA=="}, "originalCommit": {"oid": "7c77a963f149aea39fda8e8df6e84ee496d311f8"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNzUwMzcyOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/control/JITServerCompilationThread.cpp", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNTozMzozNFrOGehfmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxOTo1MzoxMFrOGerG-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY1OTIyNQ==", "bodyText": "This acts like a correction, but it's never executed because of the fatal assert above. Is the intent to transform the fatal assert into an simple assert?", "url": "https://github.com/eclipse-openj9/openj9/pull/9763#discussion_r434659225", "createdAt": "2020-06-03T15:33:34Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/control/JITServerCompilationThread.cpp", "diffHunk": "@@ -473,18 +477,23 @@ TR::CompilationInfoPerThreadRemote::processEntry(TR_MethodToBeCompiled &entry, J\n          }\n \n       clientSession->getSequencingMonitor()->enter();\n-      // Update the expecting sequence number. This will allow subsequent\n-      // threads to pass through once we've released the sequencing monitor.\n-      TR_ASSERT(seqNo == clientSession->getExpectedSeqNo(), \"Unexpected seqNo=%u expected=%u\\n\", seqNo, clientSession->getExpectedSeqNo());\n \n-      //TODO: Might need to set the expectedSeqNo as (seqNo+1) instead of (expectedSeqNo+1)\n       if (seqNo != clientSession->getExpectedSeqNo())\n+         {\n          Trc_JITServerUnexpectedSeqNo(compThread, getCompThreadId(), clientSession,\n                (unsigned long long)clientId, seqNo, clientSession->getExpectedSeqNo(), clientSession->getNumActiveThreads());\n \n+         TR_ASSERT_FATAL(false, \"compThreadID=%d clientSessionData=%p clientUID=%llu (seqNo=%u, expectedSeqNo=%u, numActiveThreads=%d) unexpected seqNo\",\n+               getCompThreadId(), clientSession, (unsigned long long)clientId,\n+               seqNo, clientSession->getExpectedSeqNo(), clientSession->getNumActiveThreads());\n+\n+         clientSession->setExpectedSeqNo(seqNo);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c77a963f149aea39fda8e8df6e84ee496d311f8"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY4NTM3MQ==", "bodyText": "I'm not sure if we should have a FATAL assert here to catch the issue in a release build, or make it a simple assert which means if the sequence of messages are not handled properly we might not catch it right away. But a simple assert is also less intrusive.", "url": "https://github.com/eclipse-openj9/openj9/pull/9763#discussion_r434685371", "createdAt": "2020-06-03T16:07:40Z", "author": {"login": "a7ehuo"}, "path": "runtime/compiler/control/JITServerCompilationThread.cpp", "diffHunk": "@@ -473,18 +477,23 @@ TR::CompilationInfoPerThreadRemote::processEntry(TR_MethodToBeCompiled &entry, J\n          }\n \n       clientSession->getSequencingMonitor()->enter();\n-      // Update the expecting sequence number. This will allow subsequent\n-      // threads to pass through once we've released the sequencing monitor.\n-      TR_ASSERT(seqNo == clientSession->getExpectedSeqNo(), \"Unexpected seqNo=%u expected=%u\\n\", seqNo, clientSession->getExpectedSeqNo());\n \n-      //TODO: Might need to set the expectedSeqNo as (seqNo+1) instead of (expectedSeqNo+1)\n       if (seqNo != clientSession->getExpectedSeqNo())\n+         {\n          Trc_JITServerUnexpectedSeqNo(compThread, getCompThreadId(), clientSession,\n                (unsigned long long)clientId, seqNo, clientSession->getExpectedSeqNo(), clientSession->getNumActiveThreads());\n \n+         TR_ASSERT_FATAL(false, \"compThreadID=%d clientSessionData=%p clientUID=%llu (seqNo=%u, expectedSeqNo=%u, numActiveThreads=%d) unexpected seqNo\",\n+               getCompThreadId(), clientSession, (unsigned long long)clientId,\n+               seqNo, clientSession->getExpectedSeqNo(), clientSession->getNumActiveThreads());\n+\n+         clientSession->setExpectedSeqNo(seqNo);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY1OTIyNQ=="}, "originalCommit": {"oid": "7c77a963f149aea39fda8e8df6e84ee496d311f8"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgxNjc2Mw==", "bodyText": "If we can safely recover from a bug I prefer to have the soft assert.", "url": "https://github.com/eclipse-openj9/openj9/pull/9763#discussion_r434816763", "createdAt": "2020-06-03T19:53:10Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/control/JITServerCompilationThread.cpp", "diffHunk": "@@ -473,18 +477,23 @@ TR::CompilationInfoPerThreadRemote::processEntry(TR_MethodToBeCompiled &entry, J\n          }\n \n       clientSession->getSequencingMonitor()->enter();\n-      // Update the expecting sequence number. This will allow subsequent\n-      // threads to pass through once we've released the sequencing monitor.\n-      TR_ASSERT(seqNo == clientSession->getExpectedSeqNo(), \"Unexpected seqNo=%u expected=%u\\n\", seqNo, clientSession->getExpectedSeqNo());\n \n-      //TODO: Might need to set the expectedSeqNo as (seqNo+1) instead of (expectedSeqNo+1)\n       if (seqNo != clientSession->getExpectedSeqNo())\n+         {\n          Trc_JITServerUnexpectedSeqNo(compThread, getCompThreadId(), clientSession,\n                (unsigned long long)clientId, seqNo, clientSession->getExpectedSeqNo(), clientSession->getNumActiveThreads());\n \n+         TR_ASSERT_FATAL(false, \"compThreadID=%d clientSessionData=%p clientUID=%llu (seqNo=%u, expectedSeqNo=%u, numActiveThreads=%d) unexpected seqNo\",\n+               getCompThreadId(), clientSession, (unsigned long long)clientId,\n+               seqNo, clientSession->getExpectedSeqNo(), clientSession->getNumActiveThreads());\n+\n+         clientSession->setExpectedSeqNo(seqNo);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY1OTIyNQ=="}, "originalCommit": {"oid": "7c77a963f149aea39fda8e8df6e84ee496d311f8"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 101, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}