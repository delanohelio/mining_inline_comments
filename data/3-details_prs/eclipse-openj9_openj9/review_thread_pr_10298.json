{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU5MjgxNjI5", "number": 10298, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNjoxNDozOFrOEZHOgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNjoxODo1NVrOEZHUdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NzY4MjU5OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/codegen/J9AheadOfTimeCompile.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNjoxNDozOFrOHBvd6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxOTo1OToxNFrOHB44Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU4ODMzMA==", "bodyText": "should this be setIsStatic ?", "url": "https://github.com/eclipse-openj9/openj9/pull/10298#discussion_r471588330", "createdAt": "2020-08-17T16:14:38Z", "author": {"login": "mstoodle"}, "path": "runtime/compiler/codegen/J9AheadOfTimeCompile.cpp", "diffHunk": "@@ -611,6 +611,19 @@ J9::AheadOfTimeCompile::initializeCommonAOTRelocationHeader(TR::IteratedExternal\n          }\n          break;\n \n+      case TR_ValidateDefiningClassFromCP:\n+         {\n+         TR_RelocationRecordValidateDefiningClassFromCP *dcpRecord = reinterpret_cast<TR_RelocationRecordValidateDefiningClassFromCP *>(reloRecord);\n+\n+         TR::DefiningClassFromCPRecord *svmRecord = reinterpret_cast<TR::DefiningClassFromCPRecord *>(relocation->getTargetAddress());\n+\n+         dcpRecord->setiSStatic(reloTarget, svmRecord->_isStatic);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4971085e43b142335d3a88c5667d9c157b6ed05f"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc0MjQ5NA==", "bodyText": "Heh yeah it should; good catch. Fixed in 10a0d9d.", "url": "https://github.com/eclipse-openj9/openj9/pull/10298#discussion_r471742494", "createdAt": "2020-08-17T19:59:14Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/codegen/J9AheadOfTimeCompile.cpp", "diffHunk": "@@ -611,6 +611,19 @@ J9::AheadOfTimeCompile::initializeCommonAOTRelocationHeader(TR::IteratedExternal\n          }\n          break;\n \n+      case TR_ValidateDefiningClassFromCP:\n+         {\n+         TR_RelocationRecordValidateDefiningClassFromCP *dcpRecord = reinterpret_cast<TR_RelocationRecordValidateDefiningClassFromCP *>(reloRecord);\n+\n+         TR::DefiningClassFromCPRecord *svmRecord = reinterpret_cast<TR::DefiningClassFromCPRecord *>(relocation->getTargetAddress());\n+\n+         dcpRecord->setiSStatic(reloTarget, svmRecord->_isStatic);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU4ODMzMA=="}, "originalCommit": {"oid": "4971085e43b142335d3a88c5667d9c157b6ed05f"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NzY4NTU3OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/runtime/RelocationRecord.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNjoxNToyMVrOHBvfng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxOTo1OToyMFrOHB44Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU4ODc2Ng==", "bodyText": "similarly here setIsStatic ?", "url": "https://github.com/eclipse-openj9/openj9/pull/10298#discussion_r471588766", "createdAt": "2020-08-17T16:15:21Z", "author": {"login": "mstoodle"}, "path": "runtime/compiler/runtime/RelocationRecord.cpp", "diffHunk": "@@ -3520,26 +3520,77 @@ TR_RelocationRecordValidateClassFromCP::cpIndex(TR_RelocationTarget *reloTarget)\n int32_t\n TR_RelocationRecordValidateDefiningClassFromCP::applyRelocation(TR_RelocationRuntime *reloRuntime, TR_RelocationTarget *reloTarget, uint8_t *reloLocation)\n    {\n-   uint16_t classID = reloTarget->loadUnsigned16b((uint8_t *) &((TR_RelocationRecordValidateDefiningClassFromCPBinaryTemplate *)_record)->_classID);\n-   uint16_t beholderID = reloTarget->loadUnsigned16b((uint8_t *) &((TR_RelocationRecordValidateDefiningClassFromCPBinaryTemplate *)_record)->_beholderID);\n-   uint32_t cpIndex = reloTarget->loadUnsigned32b((uint8_t *) &((TR_RelocationRecordValidateDefiningClassFromCPBinaryTemplate *)_record)->_cpIndex);\n-   bool isStatic = (bool)reloTarget->loadUnsigned8b((uint8_t *) &((TR_RelocationRecordValidateDefiningClassFromCPBinaryTemplate *)_record)->_isStatic);\n-\n-   if (reloRuntime->reloLogger()->logEnabled())\n-      {\n-      reloRuntime->reloLogger()->printf(\"%s\\n\", name());\n-      reloRuntime->reloLogger()->printf(\"\\tapplyRelocation: classID %d\\n\", classID);\n-      reloRuntime->reloLogger()->printf(\"\\tapplyRelocation: beholderID %d\\n\", beholderID);\n-      reloRuntime->reloLogger()->printf(\"\\tapplyRelocation: cpIndex %d\\n\", cpIndex);\n-      reloRuntime->reloLogger()->printf(\"\\tapplyRelocation: isStatic %s\\n\", isStatic ? \"true\" : \"false\");\n-      }\n+   uint16_t classID = this->classID(reloTarget);\n+   uint16_t beholderID = this->beholderID(reloTarget);\n+   uint32_t cpIndex = this->cpIndex(reloTarget);\n+   bool isStatic = this->isStatic(reloTarget);\n \n    if (reloRuntime->comp()->getSymbolValidationManager()->validateDefiningClassFromCPRecord(classID, beholderID, cpIndex, isStatic))\n       return 0;\n    else\n       return compilationAotClassReloFailure;\n    }\n \n+void\n+TR_RelocationRecordValidateDefiningClassFromCP::print(TR_RelocationRuntime *reloRuntime)\n+   {\n+   TR_RelocationTarget *reloTarget = reloRuntime->reloTarget();\n+   TR_RelocationRuntimeLogger *reloLogger = reloRuntime->reloLogger();\n+   TR_RelocationRecord::print(reloRuntime);\n+   reloLogger->printf(\"\\tisStatic %s\\n\", isStatic(reloTarget) ? \"true\" : \"false\");\n+   reloLogger->printf(\"\\tclassID %d\\n\", classID(reloTarget));\n+   reloLogger->printf(\"\\tbeholderID %d\\n\", beholderID(reloTarget));\n+   reloLogger->printf(\"\\tcpindex %d\\n\", cpIndex(reloTarget));\n+   }\n+\n+void\n+TR_RelocationRecordValidateDefiningClassFromCP::setiSStatic(TR_RelocationTarget *reloTarget, bool isStatic)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4971085e43b142335d3a88c5667d9c157b6ed05f"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc0MjU0Mg==", "bodyText": "Fixed in 10a0d9d.", "url": "https://github.com/eclipse-openj9/openj9/pull/10298#discussion_r471742542", "createdAt": "2020-08-17T19:59:20Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/runtime/RelocationRecord.cpp", "diffHunk": "@@ -3520,26 +3520,77 @@ TR_RelocationRecordValidateClassFromCP::cpIndex(TR_RelocationTarget *reloTarget)\n int32_t\n TR_RelocationRecordValidateDefiningClassFromCP::applyRelocation(TR_RelocationRuntime *reloRuntime, TR_RelocationTarget *reloTarget, uint8_t *reloLocation)\n    {\n-   uint16_t classID = reloTarget->loadUnsigned16b((uint8_t *) &((TR_RelocationRecordValidateDefiningClassFromCPBinaryTemplate *)_record)->_classID);\n-   uint16_t beholderID = reloTarget->loadUnsigned16b((uint8_t *) &((TR_RelocationRecordValidateDefiningClassFromCPBinaryTemplate *)_record)->_beholderID);\n-   uint32_t cpIndex = reloTarget->loadUnsigned32b((uint8_t *) &((TR_RelocationRecordValidateDefiningClassFromCPBinaryTemplate *)_record)->_cpIndex);\n-   bool isStatic = (bool)reloTarget->loadUnsigned8b((uint8_t *) &((TR_RelocationRecordValidateDefiningClassFromCPBinaryTemplate *)_record)->_isStatic);\n-\n-   if (reloRuntime->reloLogger()->logEnabled())\n-      {\n-      reloRuntime->reloLogger()->printf(\"%s\\n\", name());\n-      reloRuntime->reloLogger()->printf(\"\\tapplyRelocation: classID %d\\n\", classID);\n-      reloRuntime->reloLogger()->printf(\"\\tapplyRelocation: beholderID %d\\n\", beholderID);\n-      reloRuntime->reloLogger()->printf(\"\\tapplyRelocation: cpIndex %d\\n\", cpIndex);\n-      reloRuntime->reloLogger()->printf(\"\\tapplyRelocation: isStatic %s\\n\", isStatic ? \"true\" : \"false\");\n-      }\n+   uint16_t classID = this->classID(reloTarget);\n+   uint16_t beholderID = this->beholderID(reloTarget);\n+   uint32_t cpIndex = this->cpIndex(reloTarget);\n+   bool isStatic = this->isStatic(reloTarget);\n \n    if (reloRuntime->comp()->getSymbolValidationManager()->validateDefiningClassFromCPRecord(classID, beholderID, cpIndex, isStatic))\n       return 0;\n    else\n       return compilationAotClassReloFailure;\n    }\n \n+void\n+TR_RelocationRecordValidateDefiningClassFromCP::print(TR_RelocationRuntime *reloRuntime)\n+   {\n+   TR_RelocationTarget *reloTarget = reloRuntime->reloTarget();\n+   TR_RelocationRuntimeLogger *reloLogger = reloRuntime->reloLogger();\n+   TR_RelocationRecord::print(reloRuntime);\n+   reloLogger->printf(\"\\tisStatic %s\\n\", isStatic(reloTarget) ? \"true\" : \"false\");\n+   reloLogger->printf(\"\\tclassID %d\\n\", classID(reloTarget));\n+   reloLogger->printf(\"\\tbeholderID %d\\n\", beholderID(reloTarget));\n+   reloLogger->printf(\"\\tcpindex %d\\n\", cpIndex(reloTarget));\n+   }\n+\n+void\n+TR_RelocationRecordValidateDefiningClassFromCP::setiSStatic(TR_RelocationTarget *reloTarget, bool isStatic)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU4ODc2Ng=="}, "originalCommit": {"oid": "4971085e43b142335d3a88c5667d9c157b6ed05f"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NzY4NjkxOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/runtime/RelocationRecord.hpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNjoxNTo0NVrOHBvgdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxOTo1OToyNlrOHB44dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU4ODk4Mw==", "bodyText": "last one :) . setIsStatic()", "url": "https://github.com/eclipse-openj9/openj9/pull/10298#discussion_r471588983", "createdAt": "2020-08-17T16:15:45Z", "author": {"login": "mstoodle"}, "path": "runtime/compiler/runtime/RelocationRecord.hpp", "diffHunk": "@@ -1491,6 +1491,20 @@ class TR_RelocationRecordValidateDefiningClassFromCP : public TR_RelocationRecor\n       virtual int32_t bytesInHeaderAndPayload() { return sizeof(TR_RelocationRecordValidateDefiningClassFromCPBinaryTemplate); }\n       virtual void preparePrivateData(TR_RelocationRuntime *reloRuntime, TR_RelocationTarget *reloTarget) {}\n       virtual int32_t applyRelocation(TR_RelocationRuntime *reloRuntime, TR_RelocationTarget *reloTarget, uint8_t *reloLocation);\n+\n+      virtual void print(TR_RelocationRuntime *reloRuntime);\n+\n+      void setiSStatic(TR_RelocationTarget *reloTarget, bool isStatic);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4971085e43b142335d3a88c5667d9c157b6ed05f"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc0MjU4Mw==", "bodyText": "Fixed in 10a0d9d.", "url": "https://github.com/eclipse-openj9/openj9/pull/10298#discussion_r471742583", "createdAt": "2020-08-17T19:59:26Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/runtime/RelocationRecord.hpp", "diffHunk": "@@ -1491,6 +1491,20 @@ class TR_RelocationRecordValidateDefiningClassFromCP : public TR_RelocationRecor\n       virtual int32_t bytesInHeaderAndPayload() { return sizeof(TR_RelocationRecordValidateDefiningClassFromCPBinaryTemplate); }\n       virtual void preparePrivateData(TR_RelocationRuntime *reloRuntime, TR_RelocationTarget *reloTarget) {}\n       virtual int32_t applyRelocation(TR_RelocationRuntime *reloRuntime, TR_RelocationTarget *reloTarget, uint8_t *reloLocation);\n+\n+      virtual void print(TR_RelocationRuntime *reloRuntime);\n+\n+      void setiSStatic(TR_RelocationTarget *reloTarget, bool isStatic);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU4ODk4Mw=="}, "originalCommit": {"oid": "4971085e43b142335d3a88c5667d9c157b6ed05f"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NzY5NzgzOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/runtime/RelocationRecord.hpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNjoxODo1NVrOHBvncQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxOTo1ODozNVrOHB425g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU5MDc2OQ==", "bodyText": "Given the number of places these two are called, I would probably have just spelled out ClassLoader so others don't have to think about what \"CL\" should stand for.", "url": "https://github.com/eclipse-openj9/openj9/pull/10298#discussion_r471590769", "createdAt": "2020-08-17T16:18:55Z", "author": {"login": "mstoodle"}, "path": "runtime/compiler/runtime/RelocationRecord.hpp", "diffHunk": "@@ -1445,6 +1445,17 @@ class TR_RelocationRecordValidateProfiledClass : public TR_RelocationRecord\n       virtual int32_t bytesInHeaderAndPayload() { return sizeof(TR_RelocationRecordValidateProfiledClassBinaryTemplate); }\n       virtual void preparePrivateData(TR_RelocationRuntime *reloRuntime, TR_RelocationTarget *reloTarget) {}\n       virtual int32_t applyRelocation(TR_RelocationRuntime *reloRuntime, TR_RelocationTarget *reloTarget, uint8_t *reloLocation);\n+\n+      virtual void print(TR_RelocationRuntime *reloRuntime);\n+\n+      void setClassID(TR_RelocationTarget *reloTarget, uint16_t classID);\n+      uint16_t classID(TR_RelocationTarget *reloTarget);\n+\n+      void setClassChainOffset(TR_RelocationTarget *reloTarget, uintptr_t classChainOffset);\n+      uintptr_t classChainOffset(TR_RelocationTarget *reloTarget);\n+\n+      void setClassChainOffsetForCL(TR_RelocationTarget *reloTarget, uintptr_t classChainOffsetForCL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2b04448449ebc25b953e3b57e60a002d86c67b1"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc0MjE4Mg==", "bodyText": "I added the full form of CL in 4fef701 since it's probably better to be explicit.", "url": "https://github.com/eclipse-openj9/openj9/pull/10298#discussion_r471742182", "createdAt": "2020-08-17T19:58:35Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/runtime/RelocationRecord.hpp", "diffHunk": "@@ -1445,6 +1445,17 @@ class TR_RelocationRecordValidateProfiledClass : public TR_RelocationRecord\n       virtual int32_t bytesInHeaderAndPayload() { return sizeof(TR_RelocationRecordValidateProfiledClassBinaryTemplate); }\n       virtual void preparePrivateData(TR_RelocationRuntime *reloRuntime, TR_RelocationTarget *reloTarget) {}\n       virtual int32_t applyRelocation(TR_RelocationRuntime *reloRuntime, TR_RelocationTarget *reloTarget, uint8_t *reloLocation);\n+\n+      virtual void print(TR_RelocationRuntime *reloRuntime);\n+\n+      void setClassID(TR_RelocationTarget *reloTarget, uint16_t classID);\n+      uint16_t classID(TR_RelocationTarget *reloTarget);\n+\n+      void setClassChainOffset(TR_RelocationTarget *reloTarget, uintptr_t classChainOffset);\n+      uintptr_t classChainOffset(TR_RelocationTarget *reloTarget);\n+\n+      void setClassChainOffsetForCL(TR_RelocationTarget *reloTarget, uintptr_t classChainOffsetForCL);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU5MDc2OQ=="}, "originalCommit": {"oid": "e2b04448449ebc25b953e3b57e60a002d86c67b1"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4848, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}