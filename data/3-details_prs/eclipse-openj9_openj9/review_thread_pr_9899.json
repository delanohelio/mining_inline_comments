{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1MjcyODY1", "number": 9899, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMDoxMTo1NlrOEGF4QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwMjo0MjowNlrOEGlEJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODIzMjMzOnYy", "diffSide": "RIGHT", "path": "test/functional/cmdline_options_tester/src/Test.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMDoxMTo1NlrOGkrcBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMDo0NjoyOVrOGksjgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTExMzYwNg==", "bodyText": "This is going to break Linux.", "url": "https://github.com/eclipse-openj9/openj9/pull/9899#discussion_r441113606", "createdAt": "2020-06-16T20:11:56Z", "author": {"login": "pshipton"}, "path": "test/functional/cmdline_options_tester/src/Test.java", "diffHunk": "@@ -409,7 +409,9 @@ public void dumpVerboseOutput(boolean result) {\n \n \tpublic static int getUnixPID(Process process) throws Exception {\n \t\tClass<?> cl = process.getClass();\n-\t\tif (!cl.getName().equals(\"java.lang.UNIXProcess\")) {\n+\t\tif (!cl.getName().equals(\"java.lang.UNIXProcess\") \n+\t\t|| !cl.getName().equals(\"java.lang.ProcessImpl\")  /* intended for Fedora_Linux/RISC-V */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b2da262f1fe15edd90c590a8c3ebef94d08b272"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTExNjI2MA==", "bodyText": "Nope, the change was verified on personal builds (including all platforms)", "url": "https://github.com/eclipse-openj9/openj9/pull/9899#discussion_r441116260", "createdAt": "2020-06-16T20:17:20Z", "author": {"login": "ChengJin01"}, "path": "test/functional/cmdline_options_tester/src/Test.java", "diffHunk": "@@ -409,7 +409,9 @@ public void dumpVerboseOutput(boolean result) {\n \n \tpublic static int getUnixPID(Process process) throws Exception {\n \t\tClass<?> cl = process.getClass();\n-\t\tif (!cl.getName().equals(\"java.lang.UNIXProcess\")) {\n+\t\tif (!cl.getName().equals(\"java.lang.UNIXProcess\") \n+\t\t|| !cl.getName().equals(\"java.lang.ProcessImpl\")  /* intended for Fedora_Linux/RISC-V */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTExMzYwNg=="}, "originalCommit": {"oid": "5b2da262f1fe15edd90c590a8c3ebef94d08b272"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTExNjg3OQ==", "bodyText": "If you are concerned with the potential issue,  we can add the check to ensure it only exists on RISC-V.", "url": "https://github.com/eclipse-openj9/openj9/pull/9899#discussion_r441116879", "createdAt": "2020-06-16T20:18:32Z", "author": {"login": "ChengJin01"}, "path": "test/functional/cmdline_options_tester/src/Test.java", "diffHunk": "@@ -409,7 +409,9 @@ public void dumpVerboseOutput(boolean result) {\n \n \tpublic static int getUnixPID(Process process) throws Exception {\n \t\tClass<?> cl = process.getClass();\n-\t\tif (!cl.getName().equals(\"java.lang.UNIXProcess\")) {\n+\t\tif (!cl.getName().equals(\"java.lang.UNIXProcess\") \n+\t\t|| !cl.getName().equals(\"java.lang.ProcessImpl\")  /* intended for Fedora_Linux/RISC-V */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTExMzYwNg=="}, "originalCommit": {"oid": "5b2da262f1fe15edd90c590a8c3ebef94d08b272"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEyNjgwOA==", "bodyText": "When cl is UNIXProcess, if (!(true) || !(false)) or if (false || true) is always true, so on Linux it will return 0. This code is only used when a timeout occurs, so a test would have to hang in order to see it no longer works on Unix.\n\nwe can add the check to ensure it only exists on RISC-V.\n\nthis would be better", "url": "https://github.com/eclipse-openj9/openj9/pull/9899#discussion_r441126808", "createdAt": "2020-06-16T20:36:50Z", "author": {"login": "pshipton"}, "path": "test/functional/cmdline_options_tester/src/Test.java", "diffHunk": "@@ -409,7 +409,9 @@ public void dumpVerboseOutput(boolean result) {\n \n \tpublic static int getUnixPID(Process process) throws Exception {\n \t\tClass<?> cl = process.getClass();\n-\t\tif (!cl.getName().equals(\"java.lang.UNIXProcess\")) {\n+\t\tif (!cl.getName().equals(\"java.lang.UNIXProcess\") \n+\t\t|| !cl.getName().equals(\"java.lang.ProcessImpl\")  /* intended for Fedora_Linux/RISC-V */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTExMzYwNg=="}, "originalCommit": {"oid": "5b2da262f1fe15edd90c590a8c3ebef94d08b272"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEzMTkwNQ==", "bodyText": "Added as suggested above.", "url": "https://github.com/eclipse-openj9/openj9/pull/9899#discussion_r441131905", "createdAt": "2020-06-16T20:46:29Z", "author": {"login": "ChengJin01"}, "path": "test/functional/cmdline_options_tester/src/Test.java", "diffHunk": "@@ -409,7 +409,9 @@ public void dumpVerboseOutput(boolean result) {\n \n \tpublic static int getUnixPID(Process process) throws Exception {\n \t\tClass<?> cl = process.getClass();\n-\t\tif (!cl.getName().equals(\"java.lang.UNIXProcess\")) {\n+\t\tif (!cl.getName().equals(\"java.lang.UNIXProcess\") \n+\t\t|| !cl.getName().equals(\"java.lang.ProcessImpl\")  /* intended for Fedora_Linux/RISC-V */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTExMzYwNg=="}, "originalCommit": {"oid": "5b2da262f1fe15edd90c590a8c3ebef94d08b272"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODQxODkwOnYy", "diffSide": "RIGHT", "path": "test/functional/cmdline_options_tester/src/Test.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMTowOTo0M1rOGktRUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMTozNjoyMlrOGkuC1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE0MzYzNQ==", "bodyText": "The check against ProcessImpl is not needed and is confusing, pls use if (!cl.getName().equals(\"java.lang.UNIXProcess\") || isRiscv)", "url": "https://github.com/eclipse-openj9/openj9/pull/9899#discussion_r441143635", "createdAt": "2020-06-16T21:09:43Z", "author": {"login": "pshipton"}, "path": "test/functional/cmdline_options_tester/src/Test.java", "diffHunk": "@@ -409,7 +412,9 @@ public void dumpVerboseOutput(boolean result) {\n \n \tpublic static int getUnixPID(Process process) throws Exception {\n \t\tClass<?> cl = process.getClass();\n-\t\tif (!cl.getName().equals(\"java.lang.UNIXProcess\")) {\n+\t\tif (!cl.getName().equals(\"java.lang.UNIXProcess\") \n+\t\t|| (!cl.getName().equals(\"java.lang.ProcessImpl\") && isRiscv)  /* intended for Fedora_Linux/RISC-V */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "906724f52764099452146c022619d9b0595242a2"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE1NjMxMQ==", "bodyText": "Agree and fixed in this way.", "url": "https://github.com/eclipse-openj9/openj9/pull/9899#discussion_r441156311", "createdAt": "2020-06-16T21:36:22Z", "author": {"login": "ChengJin01"}, "path": "test/functional/cmdline_options_tester/src/Test.java", "diffHunk": "@@ -409,7 +412,9 @@ public void dumpVerboseOutput(boolean result) {\n \n \tpublic static int getUnixPID(Process process) throws Exception {\n \t\tClass<?> cl = process.getClass();\n-\t\tif (!cl.getName().equals(\"java.lang.UNIXProcess\")) {\n+\t\tif (!cl.getName().equals(\"java.lang.UNIXProcess\") \n+\t\t|| (!cl.getName().equals(\"java.lang.ProcessImpl\") && isRiscv)  /* intended for Fedora_Linux/RISC-V */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE0MzYzNQ=="}, "originalCommit": {"oid": "906724f52764099452146c022619d9b0595242a2"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjM2MDQ1OnYy", "diffSide": "RIGHT", "path": "test/functional/cmdline_options_tester/src/Test.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxOToyMTo0N1rOGlUFsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMDoxOTowMlrOGlV4aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc3OTYzNQ==", "bodyText": "Is it better to change the default timeout when testing on riscv rather than modifying the test framework?", "url": "https://github.com/eclipse-openj9/openj9/pull/9899#discussion_r441779635", "createdAt": "2020-06-17T19:21:47Z", "author": {"login": "pshipton"}, "path": "test/functional/cmdline_options_tester/src/Test.java", "diffHunk": "@@ -546,7 +549,10 @@ public ProcessKiller(Process proc, long timeout, String exeToDebug) {\n \t\tpublic synchronized void run() {\n \t\t\tfinal long endTime = System.currentTimeMillis() + _procTimeout;\n \t\t\twhile (_proc.isAlive()) {\n-\t\t\t\tlong currTimeout = endTime - System.currentTimeMillis();\n+\t\t\t\t/* Set up a fixed timer without timeout for test on RISC-V\n+\t\t\t\t * as it is pretty slow without JIT support for now.\n+\t\t\t\t */\n+\t\t\t\tlong currTimeout = (isRiscv) ? _procTimeout : (endTime - System.currentTimeMillis());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cb219337b7be53bb20b2484444152bbf1a07fd8"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc4NjE1Nw==", "bodyText": "Currently the idea of the code is looping out there by setting up the fixed time (which is always > 0) to get the test involved to complete.  I am not sure what the default timeout is gonna be as it is hard to anticipate how long it takes to finish.", "url": "https://github.com/eclipse-openj9/openj9/pull/9899#discussion_r441786157", "createdAt": "2020-06-17T19:34:21Z", "author": {"login": "ChengJin01"}, "path": "test/functional/cmdline_options_tester/src/Test.java", "diffHunk": "@@ -546,7 +549,10 @@ public ProcessKiller(Process proc, long timeout, String exeToDebug) {\n \t\tpublic synchronized void run() {\n \t\t\tfinal long endTime = System.currentTimeMillis() + _procTimeout;\n \t\t\twhile (_proc.isAlive()) {\n-\t\t\t\tlong currTimeout = endTime - System.currentTimeMillis();\n+\t\t\t\t/* Set up a fixed timer without timeout for test on RISC-V\n+\t\t\t\t * as it is pretty slow without JIT support for now.\n+\t\t\t\t */\n+\t\t\t\tlong currTimeout = (isRiscv) ? _procTimeout : (endTime - System.currentTimeMillis());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc3OTYzNQ=="}, "originalCommit": {"oid": "5cb219337b7be53bb20b2484444152bbf1a07fd8"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc5NzU0OQ==", "bodyText": "The default could be set arbitrarily large, such as 24 hours or anything that makes sense.", "url": "https://github.com/eclipse-openj9/openj9/pull/9899#discussion_r441797549", "createdAt": "2020-06-17T19:56:09Z", "author": {"login": "pshipton"}, "path": "test/functional/cmdline_options_tester/src/Test.java", "diffHunk": "@@ -546,7 +549,10 @@ public ProcessKiller(Process proc, long timeout, String exeToDebug) {\n \t\tpublic synchronized void run() {\n \t\t\tfinal long endTime = System.currentTimeMillis() + _procTimeout;\n \t\t\twhile (_proc.isAlive()) {\n-\t\t\t\tlong currTimeout = endTime - System.currentTimeMillis();\n+\t\t\t\t/* Set up a fixed timer without timeout for test on RISC-V\n+\t\t\t\t * as it is pretty slow without JIT support for now.\n+\t\t\t\t */\n+\t\t\t\tlong currTimeout = (isRiscv) ? _procTimeout : (endTime - System.currentTimeMillis());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc3OTYzNQ=="}, "originalCommit": {"oid": "5cb219337b7be53bb20b2484444152bbf1a07fd8"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgwOTAwMA==", "bodyText": "Will try to change the code  at /test/functional/cmdline_options_tester/src/TestConfigParser.java\nString timeout = (String)attributes.get(\"timeout\");\n_currentTest = new Test( id, timeout, _debugCmdOnTimeout ); <--- change it for risc-v\n\nto see how it goes this way.", "url": "https://github.com/eclipse-openj9/openj9/pull/9899#discussion_r441809000", "createdAt": "2020-06-17T20:19:02Z", "author": {"login": "ChengJin01"}, "path": "test/functional/cmdline_options_tester/src/Test.java", "diffHunk": "@@ -546,7 +549,10 @@ public ProcessKiller(Process proc, long timeout, String exeToDebug) {\n \t\tpublic synchronized void run() {\n \t\t\tfinal long endTime = System.currentTimeMillis() + _procTimeout;\n \t\t\twhile (_proc.isAlive()) {\n-\t\t\t\tlong currTimeout = endTime - System.currentTimeMillis();\n+\t\t\t\t/* Set up a fixed timer without timeout for test on RISC-V\n+\t\t\t\t * as it is pretty slow without JIT support for now.\n+\t\t\t\t */\n+\t\t\t\tlong currTimeout = (isRiscv) ? _procTimeout : (endTime - System.currentTimeMillis());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc3OTYzNQ=="}, "originalCommit": {"oid": "5cb219337b7be53bb20b2484444152bbf1a07fd8"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MzM0MTgwOnYy", "diffSide": "RIGHT", "path": "test/functional/cmdline_options_tester/src/TestConfigParser.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwMjo0MjowNlrOGldqkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNDowMDo1OVrOGle0GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkzNjUzMA==", "bodyText": "Seems a little excessive for a single test to run for 10 days.", "url": "https://github.com/eclipse-openj9/openj9/pull/9899#discussion_r441936530", "createdAt": "2020-06-18T02:42:06Z", "author": {"login": "pshipton"}, "path": "test/functional/cmdline_options_tester/src/TestConfigParser.java", "diffHunk": "@@ -156,6 +159,10 @@ public void xmlStartElement(String elementName, Hashtable attributes) {\n \t\t\t\t\tString modeHints = (String)attributes.get(\"modeHints\");\n \t\t\t\t\tif (hasAllowedHints(modeHints)) {\n \t\t\t\t\t\tString timeout = (String)attributes.get(\"timeout\");\n+\t\t\t\t\t\t\n+\t\t\t\t\t\t/* Set 10 days (864000 secs) for timeout on RISC-V due to the lack of JIT */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b87d806a30144707bfc729ac078ecdb9eee38ae"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkzOTE1Mw==", "bodyText": "It won't be necessary in most of cases. The idea is to simply disable the timer to some extent to ensure we cover all test cases in /test/functional/cmdLineTests. (e.g. DDR related test which runs extremely slow on the hardware and even worse on the emulator).", "url": "https://github.com/eclipse-openj9/openj9/pull/9899#discussion_r441939153", "createdAt": "2020-06-18T02:52:13Z", "author": {"login": "ChengJin01"}, "path": "test/functional/cmdline_options_tester/src/TestConfigParser.java", "diffHunk": "@@ -156,6 +159,10 @@ public void xmlStartElement(String elementName, Hashtable attributes) {\n \t\t\t\t\tString modeHints = (String)attributes.get(\"modeHints\");\n \t\t\t\t\tif (hasAllowedHints(modeHints)) {\n \t\t\t\t\t\tString timeout = (String)attributes.get(\"timeout\");\n+\t\t\t\t\t\t\n+\t\t\t\t\t\t/* Set 10 days (864000 secs) for timeout on RISC-V due to the lack of JIT */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkzNjUzMA=="}, "originalCommit": {"oid": "7b87d806a30144707bfc729ac078ecdb9eee38ae"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk0Mzc2NQ==", "bodyText": "Ok, but the timeout is for an individual command line test, not a suite of tests. How long does the DDR test take?", "url": "https://github.com/eclipse-openj9/openj9/pull/9899#discussion_r441943765", "createdAt": "2020-06-18T03:11:34Z", "author": {"login": "pshipton"}, "path": "test/functional/cmdline_options_tester/src/TestConfigParser.java", "diffHunk": "@@ -156,6 +159,10 @@ public void xmlStartElement(String elementName, Hashtable attributes) {\n \t\t\t\t\tString modeHints = (String)attributes.get(\"modeHints\");\n \t\t\t\t\tif (hasAllowedHints(modeHints)) {\n \t\t\t\t\t\tString timeout = (String)attributes.get(\"timeout\");\n+\t\t\t\t\t\t\n+\t\t\t\t\t\t/* Set 10 days (864000 secs) for timeout on RISC-V due to the lack of JIT */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkzNjUzMA=="}, "originalCommit": {"oid": "7b87d806a30144707bfc729ac078ecdb9eee38ae"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk0NjcxMw==", "bodyText": "Yes, that's we expect to do for individual tests.  According to my previous experience, it took from a couple of hours to half of a day to finish, depending on the size of the generated core dumps.", "url": "https://github.com/eclipse-openj9/openj9/pull/9899#discussion_r441946713", "createdAt": "2020-06-18T03:23:41Z", "author": {"login": "ChengJin01"}, "path": "test/functional/cmdline_options_tester/src/TestConfigParser.java", "diffHunk": "@@ -156,6 +159,10 @@ public void xmlStartElement(String elementName, Hashtable attributes) {\n \t\t\t\t\tString modeHints = (String)attributes.get(\"modeHints\");\n \t\t\t\t\tif (hasAllowedHints(modeHints)) {\n \t\t\t\t\t\tString timeout = (String)attributes.get(\"timeout\");\n+\t\t\t\t\t\t\n+\t\t\t\t\t\t/* Set 10 days (864000 secs) for timeout on RISC-V due to the lack of JIT */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkzNjUzMA=="}, "originalCommit": {"oid": "7b87d806a30144707bfc729ac078ecdb9eee38ae"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk1MzE0MA==", "bodyText": "Then you can use something like 16 hours for the timeout, rather than 10 days.", "url": "https://github.com/eclipse-openj9/openj9/pull/9899#discussion_r441953140", "createdAt": "2020-06-18T03:51:11Z", "author": {"login": "pshipton"}, "path": "test/functional/cmdline_options_tester/src/TestConfigParser.java", "diffHunk": "@@ -156,6 +159,10 @@ public void xmlStartElement(String elementName, Hashtable attributes) {\n \t\t\t\t\tString modeHints = (String)attributes.get(\"modeHints\");\n \t\t\t\t\tif (hasAllowedHints(modeHints)) {\n \t\t\t\t\t\tString timeout = (String)attributes.get(\"timeout\");\n+\t\t\t\t\t\t\n+\t\t\t\t\t\t/* Set 10 days (864000 secs) for timeout on RISC-V due to the lack of JIT */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkzNjUzMA=="}, "originalCommit": {"oid": "7b87d806a30144707bfc729ac078ecdb9eee38ae"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk1NTM1Mg==", "bodyText": "Updated to 16 hours as suggested. We still have a chance to adjust in the future if any issue with timeout is detected in there.", "url": "https://github.com/eclipse-openj9/openj9/pull/9899#discussion_r441955352", "createdAt": "2020-06-18T04:00:59Z", "author": {"login": "ChengJin01"}, "path": "test/functional/cmdline_options_tester/src/TestConfigParser.java", "diffHunk": "@@ -156,6 +159,10 @@ public void xmlStartElement(String elementName, Hashtable attributes) {\n \t\t\t\t\tString modeHints = (String)attributes.get(\"modeHints\");\n \t\t\t\t\tif (hasAllowedHints(modeHints)) {\n \t\t\t\t\t\tString timeout = (String)attributes.get(\"timeout\");\n+\t\t\t\t\t\t\n+\t\t\t\t\t\t/* Set 10 days (864000 secs) for timeout on RISC-V due to the lack of JIT */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkzNjUzMA=="}, "originalCommit": {"oid": "7b87d806a30144707bfc729ac078ecdb9eee38ae"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 20, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}