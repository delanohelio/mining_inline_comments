{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1MDQ1MTk0", "number": 9014, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTo0MjozNlrODsvASw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNzoyMzoxMlrOER58MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjM0MDU5OnYy", "diffSide": "RIGHT", "path": "runtime/runtimetools/perfscripts/perf-hottest", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTo0MjozNlrOF9wDXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMDowODoyMlrOF96RgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI5NDc1MA==", "bodyText": "This script should have a copyright header.", "url": "https://github.com/eclipse-openj9/openj9/pull/9014#discussion_r400294750", "createdAt": "2020-03-30T15:42:36Z", "author": {"login": "0xdaryl"}, "path": "runtime/runtimetools/perfscripts/perf-hottest", "diffHunk": "@@ -0,0 +1,151 @@\n+#!/usr/bin/env python", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0851703b3179358c31a3f83644ea5eb441940dae"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ2MjIwOA==", "bodyText": "Added", "url": "https://github.com/eclipse-openj9/openj9/pull/9014#discussion_r400462208", "createdAt": "2020-03-30T20:08:22Z", "author": {"login": "BeverlyXu"}, "path": "runtime/runtimetools/perfscripts/perf-hottest", "diffHunk": "@@ -0,0 +1,151 @@\n+#!/usr/bin/env python", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI5NDc1MA=="}, "originalCommit": {"oid": "0851703b3179358c31a3f83644ea5eb441940dae"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NzgxNDk5OnYy", "diffSide": "RIGHT", "path": "runtime/runtimetools/perfscripts/perf-hottest", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOTozMDozOVrOF-k_iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOTozMDozOVrOF-k_iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE2MjEyMw==", "bodyText": "This comment is not the right format for Python", "url": "https://github.com/eclipse-openj9/openj9/pull/9014#discussion_r401162123", "createdAt": "2020-03-31T19:30:39Z", "author": {"login": "andrewcraik"}, "path": "runtime/runtimetools/perfscripts/perf-hottest", "diffHunk": "@@ -0,0 +1,173 @@\n+/*******************************************************************************", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c3c70915222d24f3c193861884c09851d094215"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NzgxNjc2OnYy", "diffSide": "RIGHT", "path": "runtime/runtimetools/perfscripts/perf-hottest", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOTozMTowN1rOF-lAnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDoxNDoxNVrOF-mdsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE2MjM5Ng==", "bodyText": "Can this usage be expanded with examples - I tried using this and it was not possible to figure it out from this terse instruction.", "url": "https://github.com/eclipse-openj9/openj9/pull/9014#discussion_r401162396", "createdAt": "2020-03-31T19:31:07Z", "author": {"login": "andrewcraik"}, "path": "runtime/runtimetools/perfscripts/perf-hottest", "diffHunk": "@@ -0,0 +1,173 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+\n+#!/usr/bin/env python\n+# This script assumes the perf.data is in the folder where the script is;\n+# This script also assumes perf-$pid.map files exist in /tmp\n+# Depending on if you are running on Windows or Linux, you might need to add flags like \"-G -F comm,ip,sym,symoff,dso\" after \"perf script\"\n+from __future__ import print_function\n+from collections import defaultdict, namedtuple\n+import re, sys, textwrap\n+\n+try:\n+    from builtins import hex as _builtin_hex\n+except ImportError:\n+    from __builtin__ import hex as _builtin_hex\n+\n+Sample = namedtuple('Sample', 'pc sym offs so thread')\n+\n+def main(args):\n+    if len(args) == 0:\n+        cmdline_error()\n+\n+    if args[0] in ('-h', '--help'):\n+        if len(args) == 1:\n+            usage(out=sys.stdout, status=0)\n+        else:\n+            cmdline_error()\n+\n+    attrs = set('pc sym offs so thread'.split())\n+    group_by_attr = args[0]\n+    if group_by_attr not in attrs:\n+        cmdline_error()\n+\n+    pred = lambda s: True\n+    def pred_compose(prev, attr, attr_re):\n+        return lambda s: (prev(s) and attr_re.search(str(getattr(s, attr))))\n+\n+    for arg in args[1:]:\n+        if '=' not in arg:\n+            printerr('error: filter argument not of the form <attr>=<regex>:', arg)\n+            cmdline_error()\n+\n+        cur_filter_attr, cur_filter_re_src = arg.split('=', 1)\n+        try:\n+            cur_filter_re = re.compile(cur_filter_re_src)\n+        except re.error:\n+            printerr('error: invalid regular expression:', cur_filter_re_src)\n+            cmdline_error()\n+\n+        pred = pred_compose(pred, cur_filter_attr, cur_filter_re)\n+\n+    samples = (s for s in read_samples(sys.stdin) if pred(s))\n+    counts = counts_by(group_by_attr, samples)\n+    total_count = sum(n for key, n in counts.iteritems())\n+    assert (total_count == 0) == (len(counts) == 0)\n+\n+    if len(counts) > 0:\n+        table = []\n+        for key, n in sorted(counts.iteritems(), key=lambda pair: pair[1]):\n+            pct = 100.0 * float(n) / float(total_count)\n+            table.append((n, '{0:6.2f}%'.format(pct), key))\n+\n+        hex_key_fmt = '-0{width}x'\n+        key_fmt = ''\n+        if group_by_attr == 'pc':\n+            key_fmt = hex_key_fmt\n+        elif group_by_attr == 'offs' and '?' not in counts:\n+            key_fmt = hex_key_fmt\n+        format_table(('-{width}', '', key_fmt), table)\n+\n+    print('', total_count, '        --total--')\n+\n+def cmdline_error():\n+    usage(out=sys.stderr, status=1)\n+\n+def printerr(*args):\n+    print('error:', *args, out=sys.stderr)\n+\n+def usage(out, status):\n+    msg = textwrap.dedent('''\\\n+        usage: perf script | perf-hottest <attr> [<attr>=<regex>...]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c3c70915222d24f3c193861884c09851d094215"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4NjIyNg==", "bodyText": "Let me add some examples.", "url": "https://github.com/eclipse-openj9/openj9/pull/9014#discussion_r401186226", "createdAt": "2020-03-31T20:14:15Z", "author": {"login": "BeverlyXu"}, "path": "runtime/runtimetools/perfscripts/perf-hottest", "diffHunk": "@@ -0,0 +1,173 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+\n+#!/usr/bin/env python\n+# This script assumes the perf.data is in the folder where the script is;\n+# This script also assumes perf-$pid.map files exist in /tmp\n+# Depending on if you are running on Windows or Linux, you might need to add flags like \"-G -F comm,ip,sym,symoff,dso\" after \"perf script\"\n+from __future__ import print_function\n+from collections import defaultdict, namedtuple\n+import re, sys, textwrap\n+\n+try:\n+    from builtins import hex as _builtin_hex\n+except ImportError:\n+    from __builtin__ import hex as _builtin_hex\n+\n+Sample = namedtuple('Sample', 'pc sym offs so thread')\n+\n+def main(args):\n+    if len(args) == 0:\n+        cmdline_error()\n+\n+    if args[0] in ('-h', '--help'):\n+        if len(args) == 1:\n+            usage(out=sys.stdout, status=0)\n+        else:\n+            cmdline_error()\n+\n+    attrs = set('pc sym offs so thread'.split())\n+    group_by_attr = args[0]\n+    if group_by_attr not in attrs:\n+        cmdline_error()\n+\n+    pred = lambda s: True\n+    def pred_compose(prev, attr, attr_re):\n+        return lambda s: (prev(s) and attr_re.search(str(getattr(s, attr))))\n+\n+    for arg in args[1:]:\n+        if '=' not in arg:\n+            printerr('error: filter argument not of the form <attr>=<regex>:', arg)\n+            cmdline_error()\n+\n+        cur_filter_attr, cur_filter_re_src = arg.split('=', 1)\n+        try:\n+            cur_filter_re = re.compile(cur_filter_re_src)\n+        except re.error:\n+            printerr('error: invalid regular expression:', cur_filter_re_src)\n+            cmdline_error()\n+\n+        pred = pred_compose(pred, cur_filter_attr, cur_filter_re)\n+\n+    samples = (s for s in read_samples(sys.stdin) if pred(s))\n+    counts = counts_by(group_by_attr, samples)\n+    total_count = sum(n for key, n in counts.iteritems())\n+    assert (total_count == 0) == (len(counts) == 0)\n+\n+    if len(counts) > 0:\n+        table = []\n+        for key, n in sorted(counts.iteritems(), key=lambda pair: pair[1]):\n+            pct = 100.0 * float(n) / float(total_count)\n+            table.append((n, '{0:6.2f}%'.format(pct), key))\n+\n+        hex_key_fmt = '-0{width}x'\n+        key_fmt = ''\n+        if group_by_attr == 'pc':\n+            key_fmt = hex_key_fmt\n+        elif group_by_attr == 'offs' and '?' not in counts:\n+            key_fmt = hex_key_fmt\n+        format_table(('-{width}', '', key_fmt), table)\n+\n+    print('', total_count, '        --total--')\n+\n+def cmdline_error():\n+    usage(out=sys.stderr, status=1)\n+\n+def printerr(*args):\n+    print('error:', *args, out=sys.stderr)\n+\n+def usage(out, status):\n+    msg = textwrap.dedent('''\\\n+        usage: perf script | perf-hottest <attr> [<attr>=<regex>...]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE2MjM5Ng=="}, "originalCommit": {"oid": "2c3c70915222d24f3c193861884c09851d094215"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5OTQ0ODYxOnYy", "diffSide": "RIGHT", "path": "runtime/runtimetools/perfscripts/perf-hottest", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMjo1Nzo0N1rOGAUULQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMDo0MDo0OVrOGAoniA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk4NjAyOQ==", "bodyText": "Can this also list what these attributes mean?", "url": "https://github.com/eclipse-openj9/openj9/pull/9014#discussion_r402986029", "createdAt": "2020-04-03T12:57:47Z", "author": {"login": "andrewcraik"}, "path": "runtime/runtimetools/perfscripts/perf-hottest", "diffHunk": "@@ -0,0 +1,177 @@\n+#!/usr/bin/env python\n+\n+# ------------------------------------------------------------------------\n+ # Copyright (c) 2020, 2020 IBM Corp. and others\n+ #\n+ # This program and the accompanying materials are made available under\n+ # the terms of the Eclipse Public License 2.0 which accompanies this\n+ # distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ # or the Apache License, Version 2.0 which accompanies this distribution and\n+ # is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ #\n+ # This Source Code may also be made available under the following\n+ # Secondary Licenses when the conditions for such availability set\n+ # forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ # General Public License, version 2 with the GNU Classpath\n+ # Exception [1] and GNU General Public License, version 2 with the\n+ # OpenJDK Assembly Exception [2].\n+ #\n+ # [1] https://www.gnu.org/software/classpath/license.html\n+ # [2] http://openjdk.java.net/legal/assembly-exception.html\n+ #\n+ # SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+# ---------------------------------------------------------------------------\n+\n+# This script assumes the perf.data is in the folder where the script is;\n+# This script also assumes perf-$pid.map files exist in /tmp\n+# There is a known bug with the perf tool that make this script not usable. Details: https://bugzilla.kernel.org/show_bug.cgi?id=203811\n+\n+from __future__ import print_function\n+from collections import defaultdict, namedtuple\n+import re, sys, textwrap\n+\n+try:\n+    from builtins import hex as _builtin_hex\n+except ImportError:\n+    from __builtin__ import hex as _builtin_hex\n+\n+Sample = namedtuple('Sample', 'pc sym offs so thread')\n+\n+def main(args):\n+    if len(args) == 0:\n+        cmdline_error()\n+\n+    if args[0] in ('-h', '--help'):\n+        if len(args) == 1:\n+            usage(out=sys.stdout, status=0)\n+        else:\n+            cmdline_error()\n+\n+    attrs = set('pc sym offs so thread'.split())\n+    group_by_attr = args[0]\n+    if group_by_attr not in attrs:\n+        cmdline_error()\n+\n+    pred = lambda s: True\n+    def pred_compose(prev, attr, attr_re):\n+        return lambda s: (prev(s) and attr_re.search(str(getattr(s, attr))))\n+\n+    for arg in args[1:]:\n+        if '=' not in arg:\n+            printerr('error: filter argument not of the form <attr>=<regex>:', arg)\n+            cmdline_error()\n+\n+        cur_filter_attr, cur_filter_re_src = arg.split('=', 1)\n+        try:\n+            cur_filter_re = re.compile(cur_filter_re_src)\n+        except re.error:\n+            printerr('error: invalid regular expression:', cur_filter_re_src)\n+            cmdline_error()\n+\n+        pred = pred_compose(pred, cur_filter_attr, cur_filter_re)\n+\n+    samples = (s for s in read_samples(sys.stdin) if pred(s))\n+    counts = counts_by(group_by_attr, samples)\n+    total_count = sum(n for key, n in counts.iteritems())\n+    assert (total_count == 0) == (len(counts) == 0)\n+\n+    if len(counts) > 0:\n+        table = []\n+        for key, n in sorted(counts.iteritems(), key=lambda pair: pair[1]):\n+            pct = 100.0 * float(n) / float(total_count)\n+            table.append((n, '{0:6.2f}%'.format(pct), key))\n+\n+        hex_key_fmt = '-0{width}x'\n+        key_fmt = ''\n+        if group_by_attr == 'pc':\n+            key_fmt = hex_key_fmt\n+        elif group_by_attr == 'offs' and '?' not in counts:\n+            key_fmt = hex_key_fmt\n+        format_table(('-{width}', '', key_fmt), table)\n+\n+    print('', total_count, '        --total--')\n+\n+def cmdline_error():\n+    usage(out=sys.stderr, status=1)\n+\n+def printerr(*args):\n+    print('error:', *args, out=sys.stderr)\n+\n+def usage(out, status):\n+    msg = textwrap.dedent('''\\\n+        usage: perf script | perf-hottest <attr> [<attr>=<regex>...]\n+        Attributes: pc, sym, offs, so, thread", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74a55a611b226015af89c303f27b9be558e50b2a"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMxODY2NA==", "bodyText": "Will add more details", "url": "https://github.com/eclipse-openj9/openj9/pull/9014#discussion_r403318664", "createdAt": "2020-04-03T20:40:49Z", "author": {"login": "BeverlyXu"}, "path": "runtime/runtimetools/perfscripts/perf-hottest", "diffHunk": "@@ -0,0 +1,177 @@\n+#!/usr/bin/env python\n+\n+# ------------------------------------------------------------------------\n+ # Copyright (c) 2020, 2020 IBM Corp. and others\n+ #\n+ # This program and the accompanying materials are made available under\n+ # the terms of the Eclipse Public License 2.0 which accompanies this\n+ # distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ # or the Apache License, Version 2.0 which accompanies this distribution and\n+ # is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ #\n+ # This Source Code may also be made available under the following\n+ # Secondary Licenses when the conditions for such availability set\n+ # forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ # General Public License, version 2 with the GNU Classpath\n+ # Exception [1] and GNU General Public License, version 2 with the\n+ # OpenJDK Assembly Exception [2].\n+ #\n+ # [1] https://www.gnu.org/software/classpath/license.html\n+ # [2] http://openjdk.java.net/legal/assembly-exception.html\n+ #\n+ # SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+# ---------------------------------------------------------------------------\n+\n+# This script assumes the perf.data is in the folder where the script is;\n+# This script also assumes perf-$pid.map files exist in /tmp\n+# There is a known bug with the perf tool that make this script not usable. Details: https://bugzilla.kernel.org/show_bug.cgi?id=203811\n+\n+from __future__ import print_function\n+from collections import defaultdict, namedtuple\n+import re, sys, textwrap\n+\n+try:\n+    from builtins import hex as _builtin_hex\n+except ImportError:\n+    from __builtin__ import hex as _builtin_hex\n+\n+Sample = namedtuple('Sample', 'pc sym offs so thread')\n+\n+def main(args):\n+    if len(args) == 0:\n+        cmdline_error()\n+\n+    if args[0] in ('-h', '--help'):\n+        if len(args) == 1:\n+            usage(out=sys.stdout, status=0)\n+        else:\n+            cmdline_error()\n+\n+    attrs = set('pc sym offs so thread'.split())\n+    group_by_attr = args[0]\n+    if group_by_attr not in attrs:\n+        cmdline_error()\n+\n+    pred = lambda s: True\n+    def pred_compose(prev, attr, attr_re):\n+        return lambda s: (prev(s) and attr_re.search(str(getattr(s, attr))))\n+\n+    for arg in args[1:]:\n+        if '=' not in arg:\n+            printerr('error: filter argument not of the form <attr>=<regex>:', arg)\n+            cmdline_error()\n+\n+        cur_filter_attr, cur_filter_re_src = arg.split('=', 1)\n+        try:\n+            cur_filter_re = re.compile(cur_filter_re_src)\n+        except re.error:\n+            printerr('error: invalid regular expression:', cur_filter_re_src)\n+            cmdline_error()\n+\n+        pred = pred_compose(pred, cur_filter_attr, cur_filter_re)\n+\n+    samples = (s for s in read_samples(sys.stdin) if pred(s))\n+    counts = counts_by(group_by_attr, samples)\n+    total_count = sum(n for key, n in counts.iteritems())\n+    assert (total_count == 0) == (len(counts) == 0)\n+\n+    if len(counts) > 0:\n+        table = []\n+        for key, n in sorted(counts.iteritems(), key=lambda pair: pair[1]):\n+            pct = 100.0 * float(n) / float(total_count)\n+            table.append((n, '{0:6.2f}%'.format(pct), key))\n+\n+        hex_key_fmt = '-0{width}x'\n+        key_fmt = ''\n+        if group_by_attr == 'pc':\n+            key_fmt = hex_key_fmt\n+        elif group_by_attr == 'offs' and '?' not in counts:\n+            key_fmt = hex_key_fmt\n+        format_table(('-{width}', '', key_fmt), table)\n+\n+    print('', total_count, '        --total--')\n+\n+def cmdline_error():\n+    usage(out=sys.stderr, status=1)\n+\n+def printerr(*args):\n+    print('error:', *args, out=sys.stderr)\n+\n+def usage(out, status):\n+    msg = textwrap.dedent('''\\\n+        usage: perf script | perf-hottest <attr> [<attr>=<regex>...]\n+        Attributes: pc, sym, offs, so, thread", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk4NjAyOQ=="}, "originalCommit": {"oid": "74a55a611b226015af89c303f27b9be558e50b2a"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5OTQ1NDYxOnYy", "diffSide": "RIGHT", "path": "runtime/runtimetools/perfscripts/perf-hottest", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMjo1OTowOVrOGAUXjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMDozOToyMVrOGAojOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk4Njg5NA==", "bodyText": "Is there any way to check the perf.data or perf --version or something to see if it is affected by this bug and report it to the user rather than leaving it as a comment in the script - this has a real potential to cause a lot of confusion in the field.", "url": "https://github.com/eclipse-openj9/openj9/pull/9014#discussion_r402986894", "createdAt": "2020-04-03T12:59:09Z", "author": {"login": "andrewcraik"}, "path": "runtime/runtimetools/perfscripts/perf-hottest", "diffHunk": "@@ -0,0 +1,177 @@\n+#!/usr/bin/env python\n+\n+# ------------------------------------------------------------------------\n+ # Copyright (c) 2020, 2020 IBM Corp. and others\n+ #\n+ # This program and the accompanying materials are made available under\n+ # the terms of the Eclipse Public License 2.0 which accompanies this\n+ # distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ # or the Apache License, Version 2.0 which accompanies this distribution and\n+ # is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ #\n+ # This Source Code may also be made available under the following\n+ # Secondary Licenses when the conditions for such availability set\n+ # forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ # General Public License, version 2 with the GNU Classpath\n+ # Exception [1] and GNU General Public License, version 2 with the\n+ # OpenJDK Assembly Exception [2].\n+ #\n+ # [1] https://www.gnu.org/software/classpath/license.html\n+ # [2] http://openjdk.java.net/legal/assembly-exception.html\n+ #\n+ # SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+# ---------------------------------------------------------------------------\n+\n+# This script assumes the perf.data is in the folder where the script is;\n+# This script also assumes perf-$pid.map files exist in /tmp\n+# There is a known bug with the perf tool that make this script not usable. Details: https://bugzilla.kernel.org/show_bug.cgi?id=203811", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74a55a611b226015af89c303f27b9be558e50b2a"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMxNzU2Mw==", "bodyText": "With this bug, perf record will fail. Therefore the perf.data generate is not usable -- not only to this script, but other parsers as well. I'll update the comment to add more details", "url": "https://github.com/eclipse-openj9/openj9/pull/9014#discussion_r403317563", "createdAt": "2020-04-03T20:39:21Z", "author": {"login": "BeverlyXu"}, "path": "runtime/runtimetools/perfscripts/perf-hottest", "diffHunk": "@@ -0,0 +1,177 @@\n+#!/usr/bin/env python\n+\n+# ------------------------------------------------------------------------\n+ # Copyright (c) 2020, 2020 IBM Corp. and others\n+ #\n+ # This program and the accompanying materials are made available under\n+ # the terms of the Eclipse Public License 2.0 which accompanies this\n+ # distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ # or the Apache License, Version 2.0 which accompanies this distribution and\n+ # is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ #\n+ # This Source Code may also be made available under the following\n+ # Secondary Licenses when the conditions for such availability set\n+ # forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ # General Public License, version 2 with the GNU Classpath\n+ # Exception [1] and GNU General Public License, version 2 with the\n+ # OpenJDK Assembly Exception [2].\n+ #\n+ # [1] https://www.gnu.org/software/classpath/license.html\n+ # [2] http://openjdk.java.net/legal/assembly-exception.html\n+ #\n+ # SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+# ---------------------------------------------------------------------------\n+\n+# This script assumes the perf.data is in the folder where the script is;\n+# This script also assumes perf-$pid.map files exist in /tmp\n+# There is a known bug with the perf tool that make this script not usable. Details: https://bugzilla.kernel.org/show_bug.cgi?id=203811", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk4Njg5NA=="}, "originalCommit": {"oid": "74a55a611b226015af89c303f27b9be558e50b2a"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MjEwNTQ1OnYy", "diffSide": "RIGHT", "path": "runtime/runtimetools/perfscripts/perf-hottest", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNzoyMzoxMlrOG23qCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMzo0NToyMFrOG-4frQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE4ODE2OA==", "bodyText": "Code looks fine - could you just add some comment documentation on what this tool does and what the different modes are? With that I think this should be good to go.", "url": "https://github.com/eclipse-openj9/openj9/pull/9014#discussion_r460188168", "createdAt": "2020-07-24T17:23:12Z", "author": {"login": "andrewcraik"}, "path": "runtime/runtimetools/perfscripts/perf-hottest", "diffHunk": "@@ -0,0 +1,210 @@\n+#!/usr/bin/env python\n+\n+# ------------------------------------------------------------------------\n+ # Copyright (c) 2020, 2020 IBM Corp. and others\n+ #\n+ # This program and the accompanying materials are made available under\n+ # the terms of the Eclipse Public License 2.0 which accompanies this\n+ # distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ # or the Apache License, Version 2.0 which accompanies this distribution and\n+ # is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ #\n+ # This Source Code may also be made available under the following\n+ # Secondary Licenses when the conditions for such availability set\n+ # forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ # General Public License, version 2 with the GNU Classpath\n+ # Exception [1] and GNU General Public License, version 2 with the\n+ # OpenJDK Assembly Exception [2].\n+ #\n+ # [1] https://www.gnu.org/software/classpath/license.html\n+ # [2] http://openjdk.java.net/legal/assembly-exception.html\n+ #\n+ # SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+# ---------------------------------------------------------------------------\n+\n+# This script checks to make sure the following conditions:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a9e43f10806ae5526e24b0ea32560f8c173f8bd"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODMxOTY3MA==", "bodyText": "Added the comments after the legal paragraph.  @andrewcraik", "url": "https://github.com/eclipse-openj9/openj9/pull/9014#discussion_r468319670", "createdAt": "2020-08-11T04:29:42Z", "author": {"login": "BeverlyXu"}, "path": "runtime/runtimetools/perfscripts/perf-hottest", "diffHunk": "@@ -0,0 +1,210 @@\n+#!/usr/bin/env python\n+\n+# ------------------------------------------------------------------------\n+ # Copyright (c) 2020, 2020 IBM Corp. and others\n+ #\n+ # This program and the accompanying materials are made available under\n+ # the terms of the Eclipse Public License 2.0 which accompanies this\n+ # distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ # or the Apache License, Version 2.0 which accompanies this distribution and\n+ # is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ #\n+ # This Source Code may also be made available under the following\n+ # Secondary Licenses when the conditions for such availability set\n+ # forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ # General Public License, version 2 with the GNU Classpath\n+ # Exception [1] and GNU General Public License, version 2 with the\n+ # OpenJDK Assembly Exception [2].\n+ #\n+ # [1] https://www.gnu.org/software/classpath/license.html\n+ # [2] http://openjdk.java.net/legal/assembly-exception.html\n+ #\n+ # SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+# ---------------------------------------------------------------------------\n+\n+# This script checks to make sure the following conditions:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE4ODE2OA=="}, "originalCommit": {"oid": "6a9e43f10806ae5526e24b0ea32560f8c173f8bd"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU5MDUwOQ==", "bodyText": "@BeverlyXu could you please wrap the inlines at some convenient width so it can be read without scrolling - 120 chars is common, but just to make this easier to read.", "url": "https://github.com/eclipse-openj9/openj9/pull/9014#discussion_r468590509", "createdAt": "2020-08-11T13:45:20Z", "author": {"login": "andrewcraik"}, "path": "runtime/runtimetools/perfscripts/perf-hottest", "diffHunk": "@@ -0,0 +1,210 @@\n+#!/usr/bin/env python\n+\n+# ------------------------------------------------------------------------\n+ # Copyright (c) 2020, 2020 IBM Corp. and others\n+ #\n+ # This program and the accompanying materials are made available under\n+ # the terms of the Eclipse Public License 2.0 which accompanies this\n+ # distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ # or the Apache License, Version 2.0 which accompanies this distribution and\n+ # is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ #\n+ # This Source Code may also be made available under the following\n+ # Secondary Licenses when the conditions for such availability set\n+ # forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ # General Public License, version 2 with the GNU Classpath\n+ # Exception [1] and GNU General Public License, version 2 with the\n+ # OpenJDK Assembly Exception [2].\n+ #\n+ # [1] https://www.gnu.org/software/classpath/license.html\n+ # [2] http://openjdk.java.net/legal/assembly-exception.html\n+ #\n+ # SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+# ---------------------------------------------------------------------------\n+\n+# This script checks to make sure the following conditions:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE4ODE2OA=="}, "originalCommit": {"oid": "6a9e43f10806ae5526e24b0ea32560f8c173f8bd"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 443, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}