{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0MzM4OTY0", "number": 11082, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMjo0NDozNlrOE0lH2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMDoxMTozN1rOE272NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNTY5NjI2OnYy", "diffSide": "RIGHT", "path": "runtime/vm/jvminit.c", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMjo0NDozNlrOHsYnyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMjo0NDozNlrOHsYnyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjMwMjc5Mw==", "bodyText": "+ 1 for trailing NUL?", "url": "https://github.com/eclipse-openj9/openj9/pull/11082#discussion_r516302793", "createdAt": "2020-11-02T22:44:36Z", "author": {"login": "keithc-ca"}, "path": "runtime/vm/jvminit.c", "diffHunk": "@@ -6000,6 +6000,268 @@ processCompressionOptions(J9JavaVM *vm){\n \t}\n }\n \n+/**\n+ * Parse -Xlog:gc options and add mappings, for compatibility when -XX:-LegacyXlogOption is not set.\n+ * Anything besides -Xlog:gc, -Xlog:gc:stderr[:], \n+ */\n+static IDATA\n+parseXlogForCompatibility(J9JavaVM* vm)\n+{\n+\tPORT_ACCESS_FROM_JAVAVM(vm);\n+\tIDATA rc = JNI_OK;\n+\tJ9VMInitArgs* j9vm_args = vm->vmArgsArray;\n+\tIDATA xlogindex = FIND_ARG_IN_VMARGS_FORWARD(OPTIONAL_LIST_MATCH, MAPOPT_XLOG_OPT, NULL);\n+\twhile (xlogindex >= 0) {\n+\t\tBOOLEAN unrecognizedOption = FALSE;\n+\t\tBOOLEAN setgclog = FALSE;\n+\t\tBOOLEAN gclog = FALSE;\n+\t\tchar *gclogfile = NULL;\n+\t\tchar xlogoptionsbuf[LARGE_STRING_BUF_SIZE];\n+\t\tchar *xlogoptions = xlogoptionsbuf;\n+\t\tUDATA optionLen = strlen(j9vm_args->actualVMArgs->options[xlogindex].optionString);\n+\n+\t\tif (optionLen > sizeof(xlogoptionsbuf)) {\n+\t\t\txlogoptions = j9mem_allocate_memory(optionLen, OMRMEM_CATEGORY_VM);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2168fc95c67cad3ec9cf9823682179b5f5a8163c"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNTcwMjk3OnYy", "diffSide": "RIGHT", "path": "runtime/vm/jvminit.c", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMjo0NjoyNFrOHsYsHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwMzowMzoxMFrOHse3AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjMwMzkwMg==", "bodyText": "Please format types consistently (J9JavaVM *vm rather than J9JavaVM* vm - syntactically, the asterisk binds more tightly to the parameter name than the target type).", "url": "https://github.com/eclipse-openj9/openj9/pull/11082#discussion_r516303902", "createdAt": "2020-11-02T22:46:24Z", "author": {"login": "keithc-ca"}, "path": "runtime/vm/jvminit.c", "diffHunk": "@@ -6000,6 +6000,268 @@ processCompressionOptions(J9JavaVM *vm){\n \t}\n }\n \n+/**\n+ * Parse -Xlog:gc options and add mappings, for compatibility when -XX:-LegacyXlogOption is not set.\n+ * Anything besides -Xlog:gc, -Xlog:gc:stderr[:], \n+ */\n+static IDATA\n+parseXlogForCompatibility(J9JavaVM* vm)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2168fc95c67cad3ec9cf9823682179b5f5a8163c"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQwNDk5Mg==", "bodyText": "Darn copied code.", "url": "https://github.com/eclipse-openj9/openj9/pull/11082#discussion_r516404992", "createdAt": "2020-11-03T03:03:10Z", "author": {"login": "pshipton"}, "path": "runtime/vm/jvminit.c", "diffHunk": "@@ -6000,6 +6000,268 @@ processCompressionOptions(J9JavaVM *vm){\n \t}\n }\n \n+/**\n+ * Parse -Xlog:gc options and add mappings, for compatibility when -XX:-LegacyXlogOption is not set.\n+ * Anything besides -Xlog:gc, -Xlog:gc:stderr[:], \n+ */\n+static IDATA\n+parseXlogForCompatibility(J9JavaVM* vm)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjMwMzkwMg=="}, "originalCommit": {"oid": "2168fc95c67cad3ec9cf9823682179b5f5a8163c"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNTcwNjI5OnYy", "diffSide": "RIGHT", "path": "runtime/vm/jvminit.c", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMjo0NzoyMlrOHsYuMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMjo0NzoyMlrOHsYuMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjMwNDQzMg==", "bodyText": "Please put constants on the left of ==.", "url": "https://github.com/eclipse-openj9/openj9/pull/11082#discussion_r516304432", "createdAt": "2020-11-02T22:47:22Z", "author": {"login": "keithc-ca"}, "path": "runtime/vm/jvminit.c", "diffHunk": "@@ -6000,6 +6000,268 @@ processCompressionOptions(J9JavaVM *vm){\n \t}\n }\n \n+/**\n+ * Parse -Xlog:gc options and add mappings, for compatibility when -XX:-LegacyXlogOption is not set.\n+ * Anything besides -Xlog:gc, -Xlog:gc:stderr[:], \n+ */\n+static IDATA\n+parseXlogForCompatibility(J9JavaVM* vm)\n+{\n+\tPORT_ACCESS_FROM_JAVAVM(vm);\n+\tIDATA rc = JNI_OK;\n+\tJ9VMInitArgs* j9vm_args = vm->vmArgsArray;\n+\tIDATA xlogindex = FIND_ARG_IN_VMARGS_FORWARD(OPTIONAL_LIST_MATCH, MAPOPT_XLOG_OPT, NULL);\n+\twhile (xlogindex >= 0) {\n+\t\tBOOLEAN unrecognizedOption = FALSE;\n+\t\tBOOLEAN setgclog = FALSE;\n+\t\tBOOLEAN gclog = FALSE;\n+\t\tchar *gclogfile = NULL;\n+\t\tchar xlogoptionsbuf[LARGE_STRING_BUF_SIZE];\n+\t\tchar *xlogoptions = xlogoptionsbuf;\n+\t\tUDATA optionLen = strlen(j9vm_args->actualVMArgs->options[xlogindex].optionString);\n+\n+\t\tif (optionLen > sizeof(xlogoptionsbuf)) {\n+\t\t\txlogoptions = j9mem_allocate_memory(optionLen, OMRMEM_CATEGORY_VM);\n+\t\t\tif (NULL == xlogoptions) {\n+\t\t\t\tgoto xlogret;\n+\t\t\t}\n+\t\t}\n+\n+\t\tif (OPTION_OK != COPY_OPTION_VALUE(xlogindex, ':', &xlogoptions, optionLen)) {\n+\t\t\trc = JNI_ERR;\n+\t\t\tgoto xlogret;\n+\t\t}\n+\n+\t\tif (xlogoptions == NULL) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2168fc95c67cad3ec9cf9823682179b5f5a8163c"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzODY4NDM5OnYy", "diffSide": "RIGHT", "path": "runtime/vm/jvminit.c", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNTo0MTo0MlrOHs0t-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNTo0MTo0MlrOHs0t-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjc2MzEyOA==", "bodyText": "I think this should set rc to signal failure.", "url": "https://github.com/eclipse-openj9/openj9/pull/11082#discussion_r516763128", "createdAt": "2020-11-03T15:41:42Z", "author": {"login": "keithc-ca"}, "path": "runtime/vm/jvminit.c", "diffHunk": "@@ -6000,6 +6000,270 @@ processCompressionOptions(J9JavaVM *vm){\n \t}\n }\n \n+/**\n+ * For compatibility when -XX:-LegacyXlogOption is not set, parse -Xlog:gc options and add mappings.\n+ * Anything besides -Xlog:gc, -Xlog:gc:stderr|<file>|file=<file>[:[:]] gives an unrecognized warning,\n+ * although any superset such as -Xlog, -Xlog:all, -Xlog:something,gc, etc. enables gc logging as well. \n+ */\n+static IDATA\n+parseXlogForCompatibility(J9JavaVM *vm)\n+{\n+\tPORT_ACCESS_FROM_JAVAVM(vm);\n+\tIDATA rc = JNI_OK;\n+\tJ9VMInitArgs *j9vm_args = vm->vmArgsArray;\n+\tIDATA xlogindex = FIND_ARG_IN_VMARGS_FORWARD(OPTIONAL_LIST_MATCH, MAPOPT_XLOG_OPT, NULL);\n+\twhile (xlogindex >= 0) {\n+\t\tBOOLEAN unrecognizedOption = FALSE;\n+\t\tBOOLEAN setgclog = FALSE;\n+\t\tBOOLEAN gclog = FALSE;\n+\t\tchar *gclogfile = NULL;\n+\t\tchar xlogoptionsbuf[LARGE_STRING_BUF_SIZE];\n+\t\tchar *xlogoptions = xlogoptionsbuf;\n+\t\t/* Include room for the trailing NULL */\n+\t\tUDATA optionLen = strlen(j9vm_args->actualVMArgs->options[xlogindex].optionString) + 1;\n+\n+\t\tif (optionLen > sizeof(xlogoptionsbuf)) {\n+\t\t\txlogoptions = j9mem_allocate_memory(optionLen, OMRMEM_CATEGORY_VM);\n+\t\t\tif (NULL == xlogoptions) {\n+\t\t\t\tgoto xlogret;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e51662a18dd8a70475586ede46fcdadbe0e38bb"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTExNTAxOnYy", "diffSide": "RIGHT", "path": "runtime/vm/jvminit.c", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNzoyMDo0NVrOHs4-CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNzoyMDo0NVrOHs4-CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjgzMjc3Ng==", "bodyText": "I had not heard of strsep before; https://linux.die.net/man/3/strsep cautions about portability - have you verified its availability on all platforms we support?", "url": "https://github.com/eclipse-openj9/openj9/pull/11082#discussion_r516832776", "createdAt": "2020-11-03T17:20:45Z", "author": {"login": "keithc-ca"}, "path": "runtime/vm/jvminit.c", "diffHunk": "@@ -6000,6 +6000,270 @@ processCompressionOptions(J9JavaVM *vm){\n \t}\n }\n \n+/**\n+ * For compatibility when -XX:-LegacyXlogOption is not set, parse -Xlog:gc options and add mappings.\n+ * Anything besides -Xlog:gc, -Xlog:gc:stderr|<file>|file=<file>[:[:]] gives an unrecognized warning,\n+ * although any superset such as -Xlog, -Xlog:all, -Xlog:something,gc, etc. enables gc logging as well. \n+ */\n+static IDATA\n+parseXlogForCompatibility(J9JavaVM *vm)\n+{\n+\tPORT_ACCESS_FROM_JAVAVM(vm);\n+\tIDATA rc = JNI_OK;\n+\tJ9VMInitArgs *j9vm_args = vm->vmArgsArray;\n+\tIDATA xlogindex = FIND_ARG_IN_VMARGS_FORWARD(OPTIONAL_LIST_MATCH, MAPOPT_XLOG_OPT, NULL);\n+\twhile (xlogindex >= 0) {\n+\t\tBOOLEAN unrecognizedOption = FALSE;\n+\t\tBOOLEAN setgclog = FALSE;\n+\t\tBOOLEAN gclog = FALSE;\n+\t\tchar *gclogfile = NULL;\n+\t\tchar xlogoptionsbuf[LARGE_STRING_BUF_SIZE];\n+\t\tchar *xlogoptions = xlogoptionsbuf;\n+\t\t/* Include room for the trailing NULL */\n+\t\tUDATA optionLen = strlen(j9vm_args->actualVMArgs->options[xlogindex].optionString) + 1;\n+\n+\t\tif (optionLen > sizeof(xlogoptionsbuf)) {\n+\t\t\txlogoptions = j9mem_allocate_memory(optionLen, OMRMEM_CATEGORY_VM);\n+\t\t\tif (NULL == xlogoptions) {\n+\t\t\t\tgoto xlogret;\n+\t\t\t}\n+\t\t}\n+\n+\t\tif (OPTION_OK != COPY_OPTION_VALUE(xlogindex, ':', &xlogoptions, optionLen)) {\n+\t\t\trc = JNI_ERR;\n+\t\t\tgoto xlogret;\n+\t\t}\n+\n+\t\tif (NULL == xlogoptions) {\n+\t\t\t/* Reached if just -Xlog is specified */\n+\t\t\tsetgclog = TRUE;\n+\t\t\tgclog = TRUE;\n+\t\t\tunrecognizedOption = TRUE;\n+\t\t} else {\n+\t\t\t/* -Xlog:gc+other=off,a+b=c:file=abc:dec:options */\n+\t\t\tchar *fullOptions = xlogoptions;\n+\t\t\tchar *upToColon = strsep(&fullOptions, \":\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e51662a18dd8a70475586ede46fcdadbe0e38bb"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTEzMzQ4OnYy", "diffSide": "RIGHT", "path": "runtime/vm/jvminit.c", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNzoyNToxNVrOHs5Jqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNzoyNToxNVrOHs5Jqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjgzNTc1NA==", "bodyText": "Please move each || to the beginning of the next line; see https://github.com/eclipse/omr/blob/master/doc/CodingStandard.md.", "url": "https://github.com/eclipse-openj9/openj9/pull/11082#discussion_r516835754", "createdAt": "2020-11-03T17:25:15Z", "author": {"login": "keithc-ca"}, "path": "runtime/vm/jvminit.c", "diffHunk": "@@ -6000,6 +6000,270 @@ processCompressionOptions(J9JavaVM *vm){\n \t}\n }\n \n+/**\n+ * For compatibility when -XX:-LegacyXlogOption is not set, parse -Xlog:gc options and add mappings.\n+ * Anything besides -Xlog:gc, -Xlog:gc:stderr|<file>|file=<file>[:[:]] gives an unrecognized warning,\n+ * although any superset such as -Xlog, -Xlog:all, -Xlog:something,gc, etc. enables gc logging as well. \n+ */\n+static IDATA\n+parseXlogForCompatibility(J9JavaVM *vm)\n+{\n+\tPORT_ACCESS_FROM_JAVAVM(vm);\n+\tIDATA rc = JNI_OK;\n+\tJ9VMInitArgs *j9vm_args = vm->vmArgsArray;\n+\tIDATA xlogindex = FIND_ARG_IN_VMARGS_FORWARD(OPTIONAL_LIST_MATCH, MAPOPT_XLOG_OPT, NULL);\n+\twhile (xlogindex >= 0) {\n+\t\tBOOLEAN unrecognizedOption = FALSE;\n+\t\tBOOLEAN setgclog = FALSE;\n+\t\tBOOLEAN gclog = FALSE;\n+\t\tchar *gclogfile = NULL;\n+\t\tchar xlogoptionsbuf[LARGE_STRING_BUF_SIZE];\n+\t\tchar *xlogoptions = xlogoptionsbuf;\n+\t\t/* Include room for the trailing NULL */\n+\t\tUDATA optionLen = strlen(j9vm_args->actualVMArgs->options[xlogindex].optionString) + 1;\n+\n+\t\tif (optionLen > sizeof(xlogoptionsbuf)) {\n+\t\t\txlogoptions = j9mem_allocate_memory(optionLen, OMRMEM_CATEGORY_VM);\n+\t\t\tif (NULL == xlogoptions) {\n+\t\t\t\tgoto xlogret;\n+\t\t\t}\n+\t\t}\n+\n+\t\tif (OPTION_OK != COPY_OPTION_VALUE(xlogindex, ':', &xlogoptions, optionLen)) {\n+\t\t\trc = JNI_ERR;\n+\t\t\tgoto xlogret;\n+\t\t}\n+\n+\t\tif (NULL == xlogoptions) {\n+\t\t\t/* Reached if just -Xlog is specified */\n+\t\t\tsetgclog = TRUE;\n+\t\t\tgclog = TRUE;\n+\t\t\tunrecognizedOption = TRUE;\n+\t\t} else {\n+\t\t\t/* -Xlog:gc+other=off,a+b=c:file=abc:dec:options */\n+\t\t\tchar *fullOptions = xlogoptions;\n+\t\t\tchar *upToColon = strsep(&fullOptions, \":\");\n+#if defined(DEBUG_XLOG)\n+\t\t\tj9tty_printf(PORTLIB, \"upToColon %s fullOptions %s\\n\", upToColon, fullOptions);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\tif ('\\0' == *upToColon) {\n+\t\t\t\t/* Nothing specified means all are enabled */\n+\t\t\t\tsetgclog = TRUE;\n+\t\t\t\tgclog = TRUE;\n+\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t} else {\n+\t\t\t\tchar *upToComma = strsep(&upToColon, \",\");\n+#if defined(DEBUG_XLOG)\n+\t\t\t\tj9tty_printf(PORTLIB, \"upToComma %s upToColon %s\\n\", upToComma, upToColon);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\twhile (TRUE) {\n+\t\t\t\t\tif ('\\0' == *upToComma) {\n+\t\t\t\t\t\t/* Missing tag */\n+xlogerr:\n+\t\t\t\t\t\tCONSUME_ARG(j9vm_args, xlogindex);\n+\t\t\t\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_VM_OPTION_MALFORMED, j9vm_args->actualVMArgs->options[xlogindex].optionString);\n+\t\t\t\t\t\trc = JNI_ERR;\n+\t\t\t\t\t\tgoto xlogret;\n+\t\t\t\t\t}\n+\t\t\t\t\tBOOLEAN checkTagLevel = FALSE;\n+\t\t\t\t\tchar *upToEquals = strsep(&upToComma, \"=\");\n+#if defined(DEBUG_XLOG)\n+\t\t\t\t\tj9tty_printf(PORTLIB, \"upToEquals %s upToComma %s\\n\", upToEquals, upToComma);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\t\tif ('\\0' == *upToEquals) {\n+\t\t\t\t\t\t/* Missing tag */\n+\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tUDATA numtags = 0;\n+\t\t\t\t\t\tchar *tag = strsep(&upToEquals, \"+\");\n+#if defined(DEBUG_XLOG)\n+\t\t\t\t\t\tj9tty_printf(PORTLIB, \"tag %s upToEquals %s\\n\", tag, upToEquals);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\t\t\twhile (TRUE) {\n+\t\t\t\t\t\t\tif ('\\0' == *tag) {\n+\t\t\t\t\t\t\t\t/* Missing tag */\n+\t\t\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tif (0 == j9_cmdla_stricmp(\"all\", tag)) {\n+\t\t\t\t\t\t\t\tif ((numtags > 0) || (NULL != upToEquals)) {\n+\t\t\t\t\t\t\t\t\t/* Invalid use of keyword all */\n+\t\t\t\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\t\tcheckTagLevel = TRUE;\n+\t\t\t\t\t\t\t\t\t/* only gc is recognized from all */\n+\t\t\t\t\t\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t} else if (0 == j9_cmdla_stricmp(\"disable\", tag)) {\n+\t\t\t\t\t\t\t\tif ((numtags > 0) ||\n+\t\t\t\t\t\t\t\t\t(NULL != upToEquals) ||\n+\t\t\t\t\t\t\t\t\t(NULL != upToComma) ||\n+\t\t\t\t\t\t\t\t\t(NULL != upToColon) ||\n+\t\t\t\t\t\t\t\t\t(NULL != fullOptions)\n+\t\t\t\t\t\t\t\t) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e51662a18dd8a70475586ede46fcdadbe0e38bb"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTE0Nzc3OnYy", "diffSide": "RIGHT", "path": "runtime/vm/jvminit.c", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNzoyOTowM1rOHs5Sqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNzoyOTowM1rOHs5Sqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjgzODA1OQ==", "bodyText": "This duplicate code can be removed by moving the copy above to the top of the loop.", "url": "https://github.com/eclipse-openj9/openj9/pull/11082#discussion_r516838059", "createdAt": "2020-11-03T17:29:03Z", "author": {"login": "keithc-ca"}, "path": "runtime/vm/jvminit.c", "diffHunk": "@@ -6000,6 +6000,270 @@ processCompressionOptions(J9JavaVM *vm){\n \t}\n }\n \n+/**\n+ * For compatibility when -XX:-LegacyXlogOption is not set, parse -Xlog:gc options and add mappings.\n+ * Anything besides -Xlog:gc, -Xlog:gc:stderr|<file>|file=<file>[:[:]] gives an unrecognized warning,\n+ * although any superset such as -Xlog, -Xlog:all, -Xlog:something,gc, etc. enables gc logging as well. \n+ */\n+static IDATA\n+parseXlogForCompatibility(J9JavaVM *vm)\n+{\n+\tPORT_ACCESS_FROM_JAVAVM(vm);\n+\tIDATA rc = JNI_OK;\n+\tJ9VMInitArgs *j9vm_args = vm->vmArgsArray;\n+\tIDATA xlogindex = FIND_ARG_IN_VMARGS_FORWARD(OPTIONAL_LIST_MATCH, MAPOPT_XLOG_OPT, NULL);\n+\twhile (xlogindex >= 0) {\n+\t\tBOOLEAN unrecognizedOption = FALSE;\n+\t\tBOOLEAN setgclog = FALSE;\n+\t\tBOOLEAN gclog = FALSE;\n+\t\tchar *gclogfile = NULL;\n+\t\tchar xlogoptionsbuf[LARGE_STRING_BUF_SIZE];\n+\t\tchar *xlogoptions = xlogoptionsbuf;\n+\t\t/* Include room for the trailing NULL */\n+\t\tUDATA optionLen = strlen(j9vm_args->actualVMArgs->options[xlogindex].optionString) + 1;\n+\n+\t\tif (optionLen > sizeof(xlogoptionsbuf)) {\n+\t\t\txlogoptions = j9mem_allocate_memory(optionLen, OMRMEM_CATEGORY_VM);\n+\t\t\tif (NULL == xlogoptions) {\n+\t\t\t\tgoto xlogret;\n+\t\t\t}\n+\t\t}\n+\n+\t\tif (OPTION_OK != COPY_OPTION_VALUE(xlogindex, ':', &xlogoptions, optionLen)) {\n+\t\t\trc = JNI_ERR;\n+\t\t\tgoto xlogret;\n+\t\t}\n+\n+\t\tif (NULL == xlogoptions) {\n+\t\t\t/* Reached if just -Xlog is specified */\n+\t\t\tsetgclog = TRUE;\n+\t\t\tgclog = TRUE;\n+\t\t\tunrecognizedOption = TRUE;\n+\t\t} else {\n+\t\t\t/* -Xlog:gc+other=off,a+b=c:file=abc:dec:options */\n+\t\t\tchar *fullOptions = xlogoptions;\n+\t\t\tchar *upToColon = strsep(&fullOptions, \":\");\n+#if defined(DEBUG_XLOG)\n+\t\t\tj9tty_printf(PORTLIB, \"upToColon %s fullOptions %s\\n\", upToColon, fullOptions);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\tif ('\\0' == *upToColon) {\n+\t\t\t\t/* Nothing specified means all are enabled */\n+\t\t\t\tsetgclog = TRUE;\n+\t\t\t\tgclog = TRUE;\n+\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t} else {\n+\t\t\t\tchar *upToComma = strsep(&upToColon, \",\");\n+#if defined(DEBUG_XLOG)\n+\t\t\t\tj9tty_printf(PORTLIB, \"upToComma %s upToColon %s\\n\", upToComma, upToColon);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\twhile (TRUE) {\n+\t\t\t\t\tif ('\\0' == *upToComma) {\n+\t\t\t\t\t\t/* Missing tag */\n+xlogerr:\n+\t\t\t\t\t\tCONSUME_ARG(j9vm_args, xlogindex);\n+\t\t\t\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_VM_OPTION_MALFORMED, j9vm_args->actualVMArgs->options[xlogindex].optionString);\n+\t\t\t\t\t\trc = JNI_ERR;\n+\t\t\t\t\t\tgoto xlogret;\n+\t\t\t\t\t}\n+\t\t\t\t\tBOOLEAN checkTagLevel = FALSE;\n+\t\t\t\t\tchar *upToEquals = strsep(&upToComma, \"=\");\n+#if defined(DEBUG_XLOG)\n+\t\t\t\t\tj9tty_printf(PORTLIB, \"upToEquals %s upToComma %s\\n\", upToEquals, upToComma);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\t\tif ('\\0' == *upToEquals) {\n+\t\t\t\t\t\t/* Missing tag */\n+\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tUDATA numtags = 0;\n+\t\t\t\t\t\tchar *tag = strsep(&upToEquals, \"+\");\n+#if defined(DEBUG_XLOG)\n+\t\t\t\t\t\tj9tty_printf(PORTLIB, \"tag %s upToEquals %s\\n\", tag, upToEquals);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\t\t\twhile (TRUE) {\n+\t\t\t\t\t\t\tif ('\\0' == *tag) {\n+\t\t\t\t\t\t\t\t/* Missing tag */\n+\t\t\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tif (0 == j9_cmdla_stricmp(\"all\", tag)) {\n+\t\t\t\t\t\t\t\tif ((numtags > 0) || (NULL != upToEquals)) {\n+\t\t\t\t\t\t\t\t\t/* Invalid use of keyword all */\n+\t\t\t\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\t\tcheckTagLevel = TRUE;\n+\t\t\t\t\t\t\t\t\t/* only gc is recognized from all */\n+\t\t\t\t\t\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t} else if (0 == j9_cmdla_stricmp(\"disable\", tag)) {\n+\t\t\t\t\t\t\t\tif ((numtags > 0) ||\n+\t\t\t\t\t\t\t\t\t(NULL != upToEquals) ||\n+\t\t\t\t\t\t\t\t\t(NULL != upToComma) ||\n+\t\t\t\t\t\t\t\t\t(NULL != upToColon) ||\n+\t\t\t\t\t\t\t\t\t(NULL != fullOptions)\n+\t\t\t\t\t\t\t\t) {\n+\t\t\t\t\t\t\t\t\t/* Invalid use of keyword disable */\n+\t\t\t\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\t\tsetgclog = TRUE;\n+\t\t\t\t\t\t\t\t\tgclog = FALSE;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t} else if ((0 == j9_cmdla_stricmp(\"gc\", tag)) || (0 == j9_cmdla_stricmp(\"gc*\", tag))) {\n+\t\t\t\t\t\t\t\tcheckTagLevel = TRUE;\n+\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tnumtags += 1;\n+\t\t\t\t\t\t\tif (NULL == upToEquals) {\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\ttag = strsep(&upToEquals, \"+\");\n+#if defined(DEBUG_XLOG)\n+\t\t\t\t\t\t\tj9tty_printf(PORTLIB, \"tag %s upToEquals %s\\n\", tag, upToEquals);\n+#endif /* defined(DEBUG_XLOG) */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e51662a18dd8a70475586ede46fcdadbe0e38bb"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTE1NTUxOnYy", "diffSide": "RIGHT", "path": "runtime/vm/jvminit.c", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNzozMDo1OFrOHs5XYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNzozMDo1OFrOHs5XYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjgzOTI2Ng==", "bodyText": "Please remove trailing whitespace.", "url": "https://github.com/eclipse-openj9/openj9/pull/11082#discussion_r516839266", "createdAt": "2020-11-03T17:30:58Z", "author": {"login": "keithc-ca"}, "path": "runtime/vm/jvminit.c", "diffHunk": "@@ -6000,6 +6000,270 @@ processCompressionOptions(J9JavaVM *vm){\n \t}\n }\n \n+/**\n+ * For compatibility when -XX:-LegacyXlogOption is not set, parse -Xlog:gc options and add mappings.\n+ * Anything besides -Xlog:gc, -Xlog:gc:stderr|<file>|file=<file>[:[:]] gives an unrecognized warning,\n+ * although any superset such as -Xlog, -Xlog:all, -Xlog:something,gc, etc. enables gc logging as well. \n+ */\n+static IDATA\n+parseXlogForCompatibility(J9JavaVM *vm)\n+{\n+\tPORT_ACCESS_FROM_JAVAVM(vm);\n+\tIDATA rc = JNI_OK;\n+\tJ9VMInitArgs *j9vm_args = vm->vmArgsArray;\n+\tIDATA xlogindex = FIND_ARG_IN_VMARGS_FORWARD(OPTIONAL_LIST_MATCH, MAPOPT_XLOG_OPT, NULL);\n+\twhile (xlogindex >= 0) {\n+\t\tBOOLEAN unrecognizedOption = FALSE;\n+\t\tBOOLEAN setgclog = FALSE;\n+\t\tBOOLEAN gclog = FALSE;\n+\t\tchar *gclogfile = NULL;\n+\t\tchar xlogoptionsbuf[LARGE_STRING_BUF_SIZE];\n+\t\tchar *xlogoptions = xlogoptionsbuf;\n+\t\t/* Include room for the trailing NULL */\n+\t\tUDATA optionLen = strlen(j9vm_args->actualVMArgs->options[xlogindex].optionString) + 1;\n+\n+\t\tif (optionLen > sizeof(xlogoptionsbuf)) {\n+\t\t\txlogoptions = j9mem_allocate_memory(optionLen, OMRMEM_CATEGORY_VM);\n+\t\t\tif (NULL == xlogoptions) {\n+\t\t\t\tgoto xlogret;\n+\t\t\t}\n+\t\t}\n+\n+\t\tif (OPTION_OK != COPY_OPTION_VALUE(xlogindex, ':', &xlogoptions, optionLen)) {\n+\t\t\trc = JNI_ERR;\n+\t\t\tgoto xlogret;\n+\t\t}\n+\n+\t\tif (NULL == xlogoptions) {\n+\t\t\t/* Reached if just -Xlog is specified */\n+\t\t\tsetgclog = TRUE;\n+\t\t\tgclog = TRUE;\n+\t\t\tunrecognizedOption = TRUE;\n+\t\t} else {\n+\t\t\t/* -Xlog:gc+other=off,a+b=c:file=abc:dec:options */\n+\t\t\tchar *fullOptions = xlogoptions;\n+\t\t\tchar *upToColon = strsep(&fullOptions, \":\");\n+#if defined(DEBUG_XLOG)\n+\t\t\tj9tty_printf(PORTLIB, \"upToColon %s fullOptions %s\\n\", upToColon, fullOptions);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\tif ('\\0' == *upToColon) {\n+\t\t\t\t/* Nothing specified means all are enabled */\n+\t\t\t\tsetgclog = TRUE;\n+\t\t\t\tgclog = TRUE;\n+\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t} else {\n+\t\t\t\tchar *upToComma = strsep(&upToColon, \",\");\n+#if defined(DEBUG_XLOG)\n+\t\t\t\tj9tty_printf(PORTLIB, \"upToComma %s upToColon %s\\n\", upToComma, upToColon);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\twhile (TRUE) {\n+\t\t\t\t\tif ('\\0' == *upToComma) {\n+\t\t\t\t\t\t/* Missing tag */\n+xlogerr:\n+\t\t\t\t\t\tCONSUME_ARG(j9vm_args, xlogindex);\n+\t\t\t\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_VM_OPTION_MALFORMED, j9vm_args->actualVMArgs->options[xlogindex].optionString);\n+\t\t\t\t\t\trc = JNI_ERR;\n+\t\t\t\t\t\tgoto xlogret;\n+\t\t\t\t\t}\n+\t\t\t\t\tBOOLEAN checkTagLevel = FALSE;\n+\t\t\t\t\tchar *upToEquals = strsep(&upToComma, \"=\");\n+#if defined(DEBUG_XLOG)\n+\t\t\t\t\tj9tty_printf(PORTLIB, \"upToEquals %s upToComma %s\\n\", upToEquals, upToComma);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\t\tif ('\\0' == *upToEquals) {\n+\t\t\t\t\t\t/* Missing tag */\n+\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tUDATA numtags = 0;\n+\t\t\t\t\t\tchar *tag = strsep(&upToEquals, \"+\");\n+#if defined(DEBUG_XLOG)\n+\t\t\t\t\t\tj9tty_printf(PORTLIB, \"tag %s upToEquals %s\\n\", tag, upToEquals);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\t\t\twhile (TRUE) {\n+\t\t\t\t\t\t\tif ('\\0' == *tag) {\n+\t\t\t\t\t\t\t\t/* Missing tag */\n+\t\t\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tif (0 == j9_cmdla_stricmp(\"all\", tag)) {\n+\t\t\t\t\t\t\t\tif ((numtags > 0) || (NULL != upToEquals)) {\n+\t\t\t\t\t\t\t\t\t/* Invalid use of keyword all */\n+\t\t\t\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\t\tcheckTagLevel = TRUE;\n+\t\t\t\t\t\t\t\t\t/* only gc is recognized from all */\n+\t\t\t\t\t\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t} else if (0 == j9_cmdla_stricmp(\"disable\", tag)) {\n+\t\t\t\t\t\t\t\tif ((numtags > 0) ||\n+\t\t\t\t\t\t\t\t\t(NULL != upToEquals) ||\n+\t\t\t\t\t\t\t\t\t(NULL != upToComma) ||\n+\t\t\t\t\t\t\t\t\t(NULL != upToColon) ||\n+\t\t\t\t\t\t\t\t\t(NULL != fullOptions)\n+\t\t\t\t\t\t\t\t) {\n+\t\t\t\t\t\t\t\t\t/* Invalid use of keyword disable */\n+\t\t\t\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\t\tsetgclog = TRUE;\n+\t\t\t\t\t\t\t\t\tgclog = FALSE;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t} else if ((0 == j9_cmdla_stricmp(\"gc\", tag)) || (0 == j9_cmdla_stricmp(\"gc*\", tag))) {\n+\t\t\t\t\t\t\t\tcheckTagLevel = TRUE;\n+\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tnumtags += 1;\n+\t\t\t\t\t\t\tif (NULL == upToEquals) {\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\ttag = strsep(&upToEquals, \"+\");\n+#if defined(DEBUG_XLOG)\n+\t\t\t\t\t\t\tj9tty_printf(PORTLIB, \"tag %s upToEquals %s\\n\", tag, upToEquals);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tif (checkTagLevel) {\n+\t\t\t\t\t\t/* look for a level after the '=' */\n+\t\t\t\t\t\tsetgclog = TRUE;\n+\t\t\t\t\t\tif (NULL == upToComma) {\n+\t\t\t\t\t\t\tgclog = TRUE;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tif ('\\0' == *upToComma) {\n+\t\t\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tgclog = 0 != j9_cmdla_stricmp(\"off\", upToComma);\n+\t\t\t\t\t\t\tif (gclog) {\n+\t\t\t\t\t\t\t\t/* OpenJ9 doesn't understand log levels */\n+\t\t\t\t\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tif (NULL == upToColon) {\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n+\t\t\t\t\tupToComma = strsep(&upToColon, \",\");\n+#if defined(DEBUG_XLOG)\n+\t\t\t\t\tj9tty_printf(PORTLIB, \"upToComma %s upToColon %s\\n\", upToComma, upToColon);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif (NULL != fullOptions) {\n+\t\t\t\t/* look at the output method */\n+\t\t\t\tupToColon = strsep(&fullOptions, \":\");\n+#if defined(DEBUG_XLOG)\n+\t\t\t\tj9tty_printf(PORTLIB, \"upToColon %s fullOptions %s\\n\", upToColon, fullOptions);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\tchar *output = strsep(&upToColon, \"=\");\n+#if defined(DEBUG_XLOG)\n+\t\t\t\tj9tty_printf(PORTLIB, \"output %s upToColon %s\\n\", output, upToColon);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\t/* stderr | stdout | file=<filename> | <filename> */\n+\t\t\t\tif (0 == j9_cmdla_stricmp(\"stderr\", output)) {\n+\t\t\t\t\tif (NULL != upToColon) {\n+\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t}\n+\t\t\t\t} else if (0 == j9_cmdla_stricmp(\"stdout\", output)) {\n+\t\t\t\t\tif (NULL != upToColon) {\n+\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t}\n+\t\t\t\t\t/* Can't log to stdout yet */\n+\t\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t\t} else if (NULL == upToColon) {\n+\t\t\t\t\tif ('\\0' != *output) {\n+\t\t\t\t\t\t/* Without `=` anything non-empty is a filename */\n+\t\t\t\t\t\tgclogfile = output;\n+\t\t\t\t\t}\n+\t\t\t\t} else if (0 == j9_cmdla_stricmp(\"file\", output)) {\n+\t\t\t\t\tif (NULL == upToColon) {\n+\t\t\t\t\t\t/* `file=` with no filename specified */\n+\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t}\n+\t\t\t\t\tgclogfile = upToColon;\n+\t\t\t\t} else {\n+\t\t\t\t\t/* Anything else such as `<something>=<something>` is an error */\n+\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t}\n+\t\t\t\t", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e51662a18dd8a70475586ede46fcdadbe0e38bb"}, "originalPosition": 186}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTE4MDI5OnYy", "diffSide": "RIGHT", "path": "runtime/vm/jvminit.c", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNzozNzo0MVrOHs5nEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNzozNzo0MVrOHs5nEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg0MzI4Mg==", "bodyText": "buf should always be freed.", "url": "https://github.com/eclipse-openj9/openj9/pull/11082#discussion_r516843282", "createdAt": "2020-11-03T17:37:41Z", "author": {"login": "keithc-ca"}, "path": "runtime/vm/jvminit.c", "diffHunk": "@@ -6000,6 +6000,270 @@ processCompressionOptions(J9JavaVM *vm){\n \t}\n }\n \n+/**\n+ * For compatibility when -XX:-LegacyXlogOption is not set, parse -Xlog:gc options and add mappings.\n+ * Anything besides -Xlog:gc, -Xlog:gc:stderr|<file>|file=<file>[:[:]] gives an unrecognized warning,\n+ * although any superset such as -Xlog, -Xlog:all, -Xlog:something,gc, etc. enables gc logging as well. \n+ */\n+static IDATA\n+parseXlogForCompatibility(J9JavaVM *vm)\n+{\n+\tPORT_ACCESS_FROM_JAVAVM(vm);\n+\tIDATA rc = JNI_OK;\n+\tJ9VMInitArgs *j9vm_args = vm->vmArgsArray;\n+\tIDATA xlogindex = FIND_ARG_IN_VMARGS_FORWARD(OPTIONAL_LIST_MATCH, MAPOPT_XLOG_OPT, NULL);\n+\twhile (xlogindex >= 0) {\n+\t\tBOOLEAN unrecognizedOption = FALSE;\n+\t\tBOOLEAN setgclog = FALSE;\n+\t\tBOOLEAN gclog = FALSE;\n+\t\tchar *gclogfile = NULL;\n+\t\tchar xlogoptionsbuf[LARGE_STRING_BUF_SIZE];\n+\t\tchar *xlogoptions = xlogoptionsbuf;\n+\t\t/* Include room for the trailing NULL */\n+\t\tUDATA optionLen = strlen(j9vm_args->actualVMArgs->options[xlogindex].optionString) + 1;\n+\n+\t\tif (optionLen > sizeof(xlogoptionsbuf)) {\n+\t\t\txlogoptions = j9mem_allocate_memory(optionLen, OMRMEM_CATEGORY_VM);\n+\t\t\tif (NULL == xlogoptions) {\n+\t\t\t\tgoto xlogret;\n+\t\t\t}\n+\t\t}\n+\n+\t\tif (OPTION_OK != COPY_OPTION_VALUE(xlogindex, ':', &xlogoptions, optionLen)) {\n+\t\t\trc = JNI_ERR;\n+\t\t\tgoto xlogret;\n+\t\t}\n+\n+\t\tif (NULL == xlogoptions) {\n+\t\t\t/* Reached if just -Xlog is specified */\n+\t\t\tsetgclog = TRUE;\n+\t\t\tgclog = TRUE;\n+\t\t\tunrecognizedOption = TRUE;\n+\t\t} else {\n+\t\t\t/* -Xlog:gc+other=off,a+b=c:file=abc:dec:options */\n+\t\t\tchar *fullOptions = xlogoptions;\n+\t\t\tchar *upToColon = strsep(&fullOptions, \":\");\n+#if defined(DEBUG_XLOG)\n+\t\t\tj9tty_printf(PORTLIB, \"upToColon %s fullOptions %s\\n\", upToColon, fullOptions);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\tif ('\\0' == *upToColon) {\n+\t\t\t\t/* Nothing specified means all are enabled */\n+\t\t\t\tsetgclog = TRUE;\n+\t\t\t\tgclog = TRUE;\n+\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t} else {\n+\t\t\t\tchar *upToComma = strsep(&upToColon, \",\");\n+#if defined(DEBUG_XLOG)\n+\t\t\t\tj9tty_printf(PORTLIB, \"upToComma %s upToColon %s\\n\", upToComma, upToColon);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\twhile (TRUE) {\n+\t\t\t\t\tif ('\\0' == *upToComma) {\n+\t\t\t\t\t\t/* Missing tag */\n+xlogerr:\n+\t\t\t\t\t\tCONSUME_ARG(j9vm_args, xlogindex);\n+\t\t\t\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_VM_OPTION_MALFORMED, j9vm_args->actualVMArgs->options[xlogindex].optionString);\n+\t\t\t\t\t\trc = JNI_ERR;\n+\t\t\t\t\t\tgoto xlogret;\n+\t\t\t\t\t}\n+\t\t\t\t\tBOOLEAN checkTagLevel = FALSE;\n+\t\t\t\t\tchar *upToEquals = strsep(&upToComma, \"=\");\n+#if defined(DEBUG_XLOG)\n+\t\t\t\t\tj9tty_printf(PORTLIB, \"upToEquals %s upToComma %s\\n\", upToEquals, upToComma);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\t\tif ('\\0' == *upToEquals) {\n+\t\t\t\t\t\t/* Missing tag */\n+\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tUDATA numtags = 0;\n+\t\t\t\t\t\tchar *tag = strsep(&upToEquals, \"+\");\n+#if defined(DEBUG_XLOG)\n+\t\t\t\t\t\tj9tty_printf(PORTLIB, \"tag %s upToEquals %s\\n\", tag, upToEquals);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\t\t\twhile (TRUE) {\n+\t\t\t\t\t\t\tif ('\\0' == *tag) {\n+\t\t\t\t\t\t\t\t/* Missing tag */\n+\t\t\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tif (0 == j9_cmdla_stricmp(\"all\", tag)) {\n+\t\t\t\t\t\t\t\tif ((numtags > 0) || (NULL != upToEquals)) {\n+\t\t\t\t\t\t\t\t\t/* Invalid use of keyword all */\n+\t\t\t\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\t\tcheckTagLevel = TRUE;\n+\t\t\t\t\t\t\t\t\t/* only gc is recognized from all */\n+\t\t\t\t\t\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t} else if (0 == j9_cmdla_stricmp(\"disable\", tag)) {\n+\t\t\t\t\t\t\t\tif ((numtags > 0) ||\n+\t\t\t\t\t\t\t\t\t(NULL != upToEquals) ||\n+\t\t\t\t\t\t\t\t\t(NULL != upToComma) ||\n+\t\t\t\t\t\t\t\t\t(NULL != upToColon) ||\n+\t\t\t\t\t\t\t\t\t(NULL != fullOptions)\n+\t\t\t\t\t\t\t\t) {\n+\t\t\t\t\t\t\t\t\t/* Invalid use of keyword disable */\n+\t\t\t\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\t\tsetgclog = TRUE;\n+\t\t\t\t\t\t\t\t\tgclog = FALSE;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t} else if ((0 == j9_cmdla_stricmp(\"gc\", tag)) || (0 == j9_cmdla_stricmp(\"gc*\", tag))) {\n+\t\t\t\t\t\t\t\tcheckTagLevel = TRUE;\n+\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tnumtags += 1;\n+\t\t\t\t\t\t\tif (NULL == upToEquals) {\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\ttag = strsep(&upToEquals, \"+\");\n+#if defined(DEBUG_XLOG)\n+\t\t\t\t\t\t\tj9tty_printf(PORTLIB, \"tag %s upToEquals %s\\n\", tag, upToEquals);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tif (checkTagLevel) {\n+\t\t\t\t\t\t/* look for a level after the '=' */\n+\t\t\t\t\t\tsetgclog = TRUE;\n+\t\t\t\t\t\tif (NULL == upToComma) {\n+\t\t\t\t\t\t\tgclog = TRUE;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tif ('\\0' == *upToComma) {\n+\t\t\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tgclog = 0 != j9_cmdla_stricmp(\"off\", upToComma);\n+\t\t\t\t\t\t\tif (gclog) {\n+\t\t\t\t\t\t\t\t/* OpenJ9 doesn't understand log levels */\n+\t\t\t\t\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tif (NULL == upToColon) {\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n+\t\t\t\t\tupToComma = strsep(&upToColon, \",\");\n+#if defined(DEBUG_XLOG)\n+\t\t\t\t\tj9tty_printf(PORTLIB, \"upToComma %s upToColon %s\\n\", upToComma, upToColon);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif (NULL != fullOptions) {\n+\t\t\t\t/* look at the output method */\n+\t\t\t\tupToColon = strsep(&fullOptions, \":\");\n+#if defined(DEBUG_XLOG)\n+\t\t\t\tj9tty_printf(PORTLIB, \"upToColon %s fullOptions %s\\n\", upToColon, fullOptions);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\tchar *output = strsep(&upToColon, \"=\");\n+#if defined(DEBUG_XLOG)\n+\t\t\t\tj9tty_printf(PORTLIB, \"output %s upToColon %s\\n\", output, upToColon);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\t/* stderr | stdout | file=<filename> | <filename> */\n+\t\t\t\tif (0 == j9_cmdla_stricmp(\"stderr\", output)) {\n+\t\t\t\t\tif (NULL != upToColon) {\n+\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t}\n+\t\t\t\t} else if (0 == j9_cmdla_stricmp(\"stdout\", output)) {\n+\t\t\t\t\tif (NULL != upToColon) {\n+\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t}\n+\t\t\t\t\t/* Can't log to stdout yet */\n+\t\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t\t} else if (NULL == upToColon) {\n+\t\t\t\t\tif ('\\0' != *output) {\n+\t\t\t\t\t\t/* Without `=` anything non-empty is a filename */\n+\t\t\t\t\t\tgclogfile = output;\n+\t\t\t\t\t}\n+\t\t\t\t} else if (0 == j9_cmdla_stricmp(\"file\", output)) {\n+\t\t\t\t\tif (NULL == upToColon) {\n+\t\t\t\t\t\t/* `file=` with no filename specified */\n+\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t}\n+\t\t\t\t\tgclogfile = upToColon;\n+\t\t\t\t} else {\n+\t\t\t\t\t/* Anything else such as `<something>=<something>` is an error */\n+\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\tif (NULL != fullOptions) {\n+\t\t\t\t\t/* Anything besides trailing ':'s is unrecognized */\n+\t\t\t\t\tif (('\\0' != *fullOptions) && (':' != *fullOptions)) {\n+\t\t\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tstrsep(&fullOptions, \":\");\n+\t\t\t\t\t\tif ((NULL != fullOptions) && ('\\0' != *fullOptions)) {\n+\t\t\t\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+#if defined(DEBUG_XLOG)\n+\t\tj9tty_printf(PORTLIB, \"setgclog %d gclog %d file %s\\n\", setgclog, gclog, gclogfile);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\tif (setgclog && gclog) {\n+\t\t \tif (NULL != gclogfile) {\n+\t\t\t\tchar *buf = NULL;\n+\t\t\t\tchar timeBuf[20];\n+\t\t\t\tUDATA sizeRequired = 0;\n+\t\t\t\tstruct J9StringTokens *stringTokens = j9str_create_tokens(j9time_current_time_millis());\n+\t\t\t\tif (NULL == stringTokens) {\n+\t\t\t\t\trc = JNI_ERR;\n+\t\t\t\t\tgoto xlogret;\n+\t\t\t\t}\n+\t\t\t\tj9str_subst_tokens(timeBuf, sizeof(timeBuf), \"%Y-%m-%d_%H-%M-%S\", stringTokens);\n+\n+\t\t\t\tif (j9str_set_token(PORTLIB, stringTokens, \"p\", \"%lld\", j9sysinfo_get_pid()) ||\n+\t\t\t\t\tj9str_set_token(PORTLIB, stringTokens, \"t\", \"%s\", timeBuf)\n+\t\t\t\t) {\n+\t\t\t\t\tj9str_free_tokens(stringTokens);\n+\t\t\t\t\trc = JNI_ERR;\n+\t\t\t\t\tgoto xlogret;\n+\t\t\t\t}\n+\t\t\t\tsizeRequired = j9str_subst_tokens(NULL, 0, gclogfile, stringTokens);\n+\t\t\t\t/* sizeRequired already includes space for the NULL */\n+\t\t\t\tbuf = j9mem_allocate_memory(sizeof(MAPOPT_XVERBOSEGCLOG) - 1 + sizeRequired, OMRMEM_CATEGORY_VM);\n+\t\t\t\tif (NULL == buf) {\n+\t\t\t\t\tj9str_free_tokens(stringTokens);\n+\t\t\t\t\trc = JNI_ERR;\n+\t\t\t\t\tgoto xlogret;\n+\t\t\t\t}\n+\t\t\t\tstrcpy(buf, MAPOPT_XVERBOSEGCLOG);\n+\t\t\t\tj9str_subst_tokens(buf + sizeof(MAPOPT_XVERBOSEGCLOG) - 1, sizeRequired, gclogfile, stringTokens);\n+\t\t\t\tj9str_free_tokens(stringTokens);\n+\t\t\t\tj9tty_printf(PORTLIB, \"mapping %s to %s\\n\", j9vm_args->actualVMArgs->options[xlogindex].optionString, buf);\n+\t\t\t\tif (RC_FAILED == registerCmdLineMapping(vm, j9vm_args->actualVMArgs->options[xlogindex].optionString, buf, EXACT_MAP_NO_OPTIONS)) {\n+\t\t\t\t\tj9mem_free_memory(buf);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e51662a18dd8a70475586ede46fcdadbe0e38bb"}, "originalPosition": 235}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTU0MjcyOnYy", "diffSide": "RIGHT", "path": "runtime/vm/jvminit.c", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOToxOTowNFrOHs9GVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOToxOTowNFrOHs9GVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkwMDQzNw==", "bodyText": "nit: indented one extra space", "url": "https://github.com/eclipse-openj9/openj9/pull/11082#discussion_r516900437", "createdAt": "2020-11-03T19:19:04Z", "author": {"login": "keithc-ca"}, "path": "runtime/vm/jvminit.c", "diffHunk": "@@ -6000,6 +6000,291 @@ processCompressionOptions(J9JavaVM *vm){\n \t}\n }\n \n+/**\n+ * Returns the original *source.\n+ * Find the next delimiter and replace it with NULL. Set *source to the character\n+ * after the delimiter. If no delimiter is found, set *source to NULL.\n+ */\n+static char *\n+strUpToDelimiter(char **source, char delimiter)\n+{\n+\tchar ch = '\\0';\n+\tchar *result = *source;\n+\twhile ('\\0' != (ch = **source)) {\n+\t\tif (ch == delimiter) {\n+\t\t\t**source = '\\0';\n+\t\t\t*source += 1;\n+\t\t\t return result;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fe44cb2851f2f6f217817c5a619bae60641040a"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MjY2MzM3OnYy", "diffSide": "RIGHT", "path": "runtime/vm/jvminit.c", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDoxOToxN1rOHtaJgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDo1NDo1NlrOHtbwRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM3NjM4NA==", "bodyText": "The l-value (constant) xlogoptionsbuf should be on the left.", "url": "https://github.com/eclipse-openj9/openj9/pull/11082#discussion_r517376384", "createdAt": "2020-11-04T14:19:17Z", "author": {"login": "keithc-ca"}, "path": "runtime/vm/jvminit.c", "diffHunk": "@@ -6000,6 +6002,291 @@ processCompressionOptions(J9JavaVM *vm){\n \t}\n }\n \n+/**\n+ * Returns the original *source.\n+ * Find the next delimiter and replace it with NULL. Set *source to the character\n+ * after the delimiter. If no delimiter is found, set *source to NULL.\n+ */\n+static char *\n+strUpToDelimiter(char **source, char delimiter)\n+{\n+\tchar ch = '\\0';\n+\tchar *result = *source;\n+\twhile ('\\0' != (ch = **source)) {\n+\t\tif (ch == delimiter) {\n+\t\t\t**source = '\\0';\n+\t\t\t*source += 1;\n+\t\t\treturn result;\n+\t\t}\n+\t\t*source += 1;\n+\t}\n+\t*source = NULL;\n+\treturn result;\n+}\n+\n+/**\n+ * For compatibility when -XX:-LegacyXlogOption is not set, parse -Xlog:gc options and add mappings.\n+ * Anything besides -Xlog:gc, -Xlog:gc:stderr|<file>|file=<file>[:[:]] gives an unrecognized warning,\n+ * although any superset such as -Xlog, -Xlog:all, -Xlog:something,gc, etc. enables gc logging as well.\n+ */\n+static IDATA\n+parseXlogForCompatibility(J9JavaVM *vm)\n+{\n+\tPORT_ACCESS_FROM_JAVAVM(vm);\n+\tIDATA rc = JNI_OK;\n+\tJ9VMInitArgs *j9vm_args = vm->vmArgsArray;\n+\tIDATA xlogindex = FIND_ARG_IN_VMARGS_FORWARD(OPTIONAL_LIST_MATCH, MAPOPT_XLOG_OPT, NULL);\n+\twhile (xlogindex >= 0) {\n+\t\tBOOLEAN unrecognizedOption = FALSE;\n+\t\tBOOLEAN setgclog = FALSE;\n+\t\tBOOLEAN gclog = FALSE;\n+\t\tchar *gclogfile = NULL;\n+\t\tchar xlogoptionsbuf[LARGE_STRING_BUF_SIZE];\n+\t\tchar *xlogoptions = xlogoptionsbuf;\n+\t\t/* Include room for the trailing NULL */\n+\t\tUDATA optionLen = strlen(j9vm_args->actualVMArgs->options[xlogindex].optionString) + 1;\n+\n+\t\tif (optionLen > sizeof(xlogoptionsbuf)) {\n+\t\t\txlogoptions = j9mem_allocate_memory(optionLen, OMRMEM_CATEGORY_VM);\n+\t\t\tif (NULL == xlogoptions) {\n+\t\t\t\trc = JNI_ERR;\n+\t\t\t\tgoto xlogret;\n+\t\t\t}\n+\t\t}\n+\n+\t\tif (OPTION_OK != COPY_OPTION_VALUE(xlogindex, ':', &xlogoptions, optionLen)) {\n+\t\t\trc = JNI_ERR;\n+\t\t\tgoto xlogret;\n+\t\t}\n+\n+\t\tif (NULL == xlogoptions) {\n+\t\t\t/* Reached if just -Xlog is specified */\n+\t\t\tsetgclog = TRUE;\n+\t\t\tgclog = TRUE;\n+\t\t\tunrecognizedOption = TRUE;\n+\t\t} else {\n+\t\t\t/* -Xlog:gc+other=off,a+b=c:file=abc:dec:options */\n+\t\t\tchar *fullOptions = xlogoptions;\n+\t\t\tchar *upToColon = strUpToDelimiter(&fullOptions, ':');\n+#if defined(DEBUG_XLOG)\n+\t\t\tj9tty_printf(PORTLIB, \"upToColon %s fullOptions %s\\n\", upToColon, fullOptions);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\tif ('\\0' == *upToColon) {\n+\t\t\t\t/* Nothing specified means all are enabled */\n+\t\t\t\tsetgclog = TRUE;\n+\t\t\t\tgclog = TRUE;\n+\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t} else {\n+\t\t\t\tchar *upToComma = strUpToDelimiter(&upToColon, ',');\n+\t\t\t\twhile (TRUE) {\n+\t\t\t\t\tBOOLEAN checkTagLevel = FALSE;\n+\t\t\t\t\tchar *upToEquals = NULL;\n+#if defined(DEBUG_XLOG)\n+\t\t\t\t\tj9tty_printf(PORTLIB, \"upToComma %s upToColon %s\\n\", upToComma, upToColon);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\t\tif ('\\0' == *upToComma) {\n+\t\t\t\t\t\t/* Missing tag */\n+xlogerr:\n+\t\t\t\t\t\tCONSUME_ARG(j9vm_args, xlogindex);\n+\t\t\t\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_VM_OPTION_MALFORMED, j9vm_args->actualVMArgs->options[xlogindex].optionString);\n+\t\t\t\t\t\trc = JNI_ERR;\n+\t\t\t\t\t\tgoto xlogret;\n+\t\t\t\t\t}\n+\t\t\t\t\tupToEquals = strUpToDelimiter(&upToComma, '=');\n+#if defined(DEBUG_XLOG)\n+\t\t\t\t\tj9tty_printf(PORTLIB, \"upToEquals %s upToComma %s\\n\", upToEquals, upToComma);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\t\tif ('\\0' == *upToEquals) {\n+\t\t\t\t\t\t/* Missing tag */\n+\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tUDATA numtags = 0;\n+\t\t\t\t\t\tconst char *tag = strUpToDelimiter(&upToEquals, '+');\n+\t\t\t\t\t\twhile (TRUE) {\n+#if defined(DEBUG_XLOG)\n+\t\t\t\t\t\t\tj9tty_printf(PORTLIB, \"tag %s upToEquals %s\\n\", tag, upToEquals);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\t\t\t\tif ('\\0' == *tag) {\n+\t\t\t\t\t\t\t\t/* Missing tag */\n+\t\t\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tif (0 == j9_cmdla_stricmp(\"all\", tag)) {\n+\t\t\t\t\t\t\t\tif ((numtags > 0) || (NULL != upToEquals)) {\n+\t\t\t\t\t\t\t\t\t/* Invalid use of keyword all */\n+\t\t\t\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\t\tcheckTagLevel = TRUE;\n+\t\t\t\t\t\t\t\t\t/* only gc is recognized from all */\n+\t\t\t\t\t\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t} else if (0 == j9_cmdla_stricmp(\"disable\", tag)) {\n+\t\t\t\t\t\t\t\tif ((numtags > 0)\n+\t\t\t\t\t\t\t\t\t|| (NULL != upToEquals)\n+\t\t\t\t\t\t\t\t\t|| (NULL != upToComma)\n+\t\t\t\t\t\t\t\t\t|| (NULL != upToColon)\n+\t\t\t\t\t\t\t\t\t|| (NULL != fullOptions)\n+\t\t\t\t\t\t\t\t) {\n+\t\t\t\t\t\t\t\t\t/* Invalid use of keyword disable */\n+\t\t\t\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\t\tsetgclog = TRUE;\n+\t\t\t\t\t\t\t\t\tgclog = FALSE;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t} else if ((0 == j9_cmdla_stricmp(\"gc\", tag)) || (0 == j9_cmdla_stricmp(\"gc*\", tag))) {\n+\t\t\t\t\t\t\t\tcheckTagLevel = TRUE;\n+\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tnumtags += 1;\n+\t\t\t\t\t\t\tif (NULL == upToEquals) {\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\ttag = strUpToDelimiter(&upToEquals, '+');\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tif (checkTagLevel) {\n+\t\t\t\t\t\t/* look for a level after the '=' */\n+\t\t\t\t\t\tsetgclog = TRUE;\n+\t\t\t\t\t\tif (NULL == upToComma) {\n+\t\t\t\t\t\t\tgclog = TRUE;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tif ('\\0' == *upToComma) {\n+\t\t\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tgclog = 0 != j9_cmdla_stricmp(\"off\", upToComma);\n+\t\t\t\t\t\t\tif (gclog) {\n+\t\t\t\t\t\t\t\t/* OpenJ9 doesn't understand log levels */\n+\t\t\t\t\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tif (NULL == upToColon) {\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n+\t\t\t\t\tupToComma = strUpToDelimiter(&upToColon, ',');\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif (NULL != fullOptions) {\n+\t\t\t\t/* look at the output method */\n+\t\t\t\tchar *output = NULL;\n+\t\t\t\tupToColon = strUpToDelimiter(&fullOptions, ':');\n+#if defined(DEBUG_XLOG)\n+\t\t\t\tj9tty_printf(PORTLIB, \"upToColon %s fullOptions %s\\n\", upToColon, fullOptions);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\toutput = strUpToDelimiter(&upToColon, '=');\n+#if defined(DEBUG_XLOG)\n+\t\t\t\tj9tty_printf(PORTLIB, \"output %s upToColon %s\\n\", output, upToColon);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\t/* stderr | stdout | file=<filename> | <filename> */\n+\t\t\t\tif (0 == j9_cmdla_stricmp(\"stderr\", output)) {\n+\t\t\t\t\tif (NULL != upToColon) {\n+\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t}\n+\t\t\t\t} else if (0 == j9_cmdla_stricmp(\"stdout\", output)) {\n+\t\t\t\t\tif (NULL != upToColon) {\n+\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t}\n+\t\t\t\t\t/* Can't log to stdout yet */\n+\t\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t\t} else if (NULL == upToColon) {\n+\t\t\t\t\tif ('\\0' != *output) {\n+\t\t\t\t\t\t/* Without `=` anything non-empty is a filename */\n+\t\t\t\t\t\tgclogfile = output;\n+\t\t\t\t\t}\n+\t\t\t\t} else if (0 == j9_cmdla_stricmp(\"file\", output)) {\n+\t\t\t\t\tif (NULL == upToColon) {\n+\t\t\t\t\t\t/* `file=` with no filename specified */\n+\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t}\n+\t\t\t\t\tgclogfile = upToColon;\n+\t\t\t\t} else {\n+\t\t\t\t\t/* Anything else such as `<something>=<something>` is an error */\n+\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t}\n+\n+\t\t\t\tif (NULL != fullOptions) {\n+\t\t\t\t\t/* Anything besides trailing ':'s is unrecognized */\n+\t\t\t\t\tif (('\\0' != *fullOptions) && (':' != *fullOptions)) {\n+\t\t\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tstrUpToDelimiter(&fullOptions, ':');\n+\t\t\t\t\t\tif ((NULL != fullOptions) && ('\\0' != *fullOptions)) {\n+\t\t\t\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+#if defined(DEBUG_XLOG)\n+\t\tj9tty_printf(PORTLIB, \"setgclog %d gclog %d file %s\\n\", setgclog, gclog, gclogfile);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\tif (setgclog && gclog) {\n+\t\t \tif (NULL != gclogfile) {\n+\t\t\t\tIDATA mapRc = 0;\n+\t\t\t\tchar *buf = NULL;\n+\t\t\t\tchar timeBuf[20];\n+\t\t\t\tUDATA sizeRequired = 0;\n+\t\t\t\tstruct J9StringTokens *stringTokens = j9str_create_tokens(j9time_current_time_millis());\n+\t\t\t\tif (NULL == stringTokens) {\n+\t\t\t\t\trc = JNI_ERR;\n+\t\t\t\t\tgoto xlogret;\n+\t\t\t\t}\n+\t\t\t\tj9str_subst_tokens(timeBuf, sizeof(timeBuf), \"%Y-%m-%d_%H-%M-%S\", stringTokens);\n+\n+\t\t\t\tif (j9str_set_token(PORTLIB, stringTokens, \"p\", \"%lld\", j9sysinfo_get_pid())\n+\t\t\t\t\t|| j9str_set_token(PORTLIB, stringTokens, \"t\", \"%s\", timeBuf)\n+\t\t\t\t) {\n+\t\t\t\t\tj9str_free_tokens(stringTokens);\n+\t\t\t\t\trc = JNI_ERR;\n+\t\t\t\t\tgoto xlogret;\n+\t\t\t\t}\n+\t\t\t\tsizeRequired = j9str_subst_tokens(NULL, 0, gclogfile, stringTokens);\n+\t\t\t\t/* sizeRequired already includes space for the NULL */\n+\t\t\t\tbuf = j9mem_allocate_memory(sizeof(MAPOPT_XVERBOSEGCLOG) - 1 + sizeRequired, OMRMEM_CATEGORY_VM);\n+\t\t\t\tif (NULL == buf) {\n+\t\t\t\t\tj9str_free_tokens(stringTokens);\n+\t\t\t\t\trc = JNI_ERR;\n+\t\t\t\t\tgoto xlogret;\n+\t\t\t\t}\n+\t\t\t\tstrcpy(buf, MAPOPT_XVERBOSEGCLOG);\n+\t\t\t\tj9str_subst_tokens(buf + sizeof(MAPOPT_XVERBOSEGCLOG) - 1, sizeRequired, gclogfile, stringTokens);\n+\t\t\t\tj9str_free_tokens(stringTokens);\n+\t\t\t\tj9tty_printf(PORTLIB, \"mapping %s to %s\\n\", j9vm_args->actualVMArgs->options[xlogindex].optionString, buf);\n+\t\t\t\tmapRc = registerCmdLineMapping(vm, j9vm_args->actualVMArgs->options[xlogindex].optionString, buf, EXACT_MAP_NO_OPTIONS);\n+\t\t\t\tj9mem_free_memory(buf);\n+\t\t\t\tif (RC_FAILED == mapRc) {\n+\t\t\t\t\trc = JNI_ERR;\n+\t\t\t\t\tgoto xlogret;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tif (RC_FAILED == registerCmdLineMapping(vm, j9vm_args->actualVMArgs->options[xlogindex].optionString, MAPOPT_VERBOSE_GC, EXACT_MAP_NO_OPTIONS)) {\n+\t\t\t\t\trc = JNI_ERR;\n+\t\t\t\t\tgoto xlogret;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} else if (setgclog) {\n+\t\t\t/* ATM there is no OpenJ9 option to disable gc logging */\n+\t\t\tunrecognizedOption = TRUE;\n+\t\t} else {\n+\t\t\tunrecognizedOption = TRUE;\n+\t\t}\n+\t\tif (unrecognizedOption) {\n+\t\t\tCONSUME_ARG(j9vm_args, xlogindex);\n+\t\t\tj9nls_printf(PORTLIB, J9NLS_WARNING, J9NLS_VM_UNRECOGNISED_CMD_LINE_OPT, j9vm_args->actualVMArgs->options[xlogindex].optionString);\n+\t\t}\n+\n+xlogret:\n+\t\tif (xlogoptions != xlogoptionsbuf) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e39dc3f97d6b8388fc5e1a5cc222dea074452b81"}, "originalPosition": 309}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQwMjY5Mw==", "bodyText": "Fixed", "url": "https://github.com/eclipse-openj9/openj9/pull/11082#discussion_r517402693", "createdAt": "2020-11-04T14:54:56Z", "author": {"login": "pshipton"}, "path": "runtime/vm/jvminit.c", "diffHunk": "@@ -6000,6 +6002,291 @@ processCompressionOptions(J9JavaVM *vm){\n \t}\n }\n \n+/**\n+ * Returns the original *source.\n+ * Find the next delimiter and replace it with NULL. Set *source to the character\n+ * after the delimiter. If no delimiter is found, set *source to NULL.\n+ */\n+static char *\n+strUpToDelimiter(char **source, char delimiter)\n+{\n+\tchar ch = '\\0';\n+\tchar *result = *source;\n+\twhile ('\\0' != (ch = **source)) {\n+\t\tif (ch == delimiter) {\n+\t\t\t**source = '\\0';\n+\t\t\t*source += 1;\n+\t\t\treturn result;\n+\t\t}\n+\t\t*source += 1;\n+\t}\n+\t*source = NULL;\n+\treturn result;\n+}\n+\n+/**\n+ * For compatibility when -XX:-LegacyXlogOption is not set, parse -Xlog:gc options and add mappings.\n+ * Anything besides -Xlog:gc, -Xlog:gc:stderr|<file>|file=<file>[:[:]] gives an unrecognized warning,\n+ * although any superset such as -Xlog, -Xlog:all, -Xlog:something,gc, etc. enables gc logging as well.\n+ */\n+static IDATA\n+parseXlogForCompatibility(J9JavaVM *vm)\n+{\n+\tPORT_ACCESS_FROM_JAVAVM(vm);\n+\tIDATA rc = JNI_OK;\n+\tJ9VMInitArgs *j9vm_args = vm->vmArgsArray;\n+\tIDATA xlogindex = FIND_ARG_IN_VMARGS_FORWARD(OPTIONAL_LIST_MATCH, MAPOPT_XLOG_OPT, NULL);\n+\twhile (xlogindex >= 0) {\n+\t\tBOOLEAN unrecognizedOption = FALSE;\n+\t\tBOOLEAN setgclog = FALSE;\n+\t\tBOOLEAN gclog = FALSE;\n+\t\tchar *gclogfile = NULL;\n+\t\tchar xlogoptionsbuf[LARGE_STRING_BUF_SIZE];\n+\t\tchar *xlogoptions = xlogoptionsbuf;\n+\t\t/* Include room for the trailing NULL */\n+\t\tUDATA optionLen = strlen(j9vm_args->actualVMArgs->options[xlogindex].optionString) + 1;\n+\n+\t\tif (optionLen > sizeof(xlogoptionsbuf)) {\n+\t\t\txlogoptions = j9mem_allocate_memory(optionLen, OMRMEM_CATEGORY_VM);\n+\t\t\tif (NULL == xlogoptions) {\n+\t\t\t\trc = JNI_ERR;\n+\t\t\t\tgoto xlogret;\n+\t\t\t}\n+\t\t}\n+\n+\t\tif (OPTION_OK != COPY_OPTION_VALUE(xlogindex, ':', &xlogoptions, optionLen)) {\n+\t\t\trc = JNI_ERR;\n+\t\t\tgoto xlogret;\n+\t\t}\n+\n+\t\tif (NULL == xlogoptions) {\n+\t\t\t/* Reached if just -Xlog is specified */\n+\t\t\tsetgclog = TRUE;\n+\t\t\tgclog = TRUE;\n+\t\t\tunrecognizedOption = TRUE;\n+\t\t} else {\n+\t\t\t/* -Xlog:gc+other=off,a+b=c:file=abc:dec:options */\n+\t\t\tchar *fullOptions = xlogoptions;\n+\t\t\tchar *upToColon = strUpToDelimiter(&fullOptions, ':');\n+#if defined(DEBUG_XLOG)\n+\t\t\tj9tty_printf(PORTLIB, \"upToColon %s fullOptions %s\\n\", upToColon, fullOptions);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\tif ('\\0' == *upToColon) {\n+\t\t\t\t/* Nothing specified means all are enabled */\n+\t\t\t\tsetgclog = TRUE;\n+\t\t\t\tgclog = TRUE;\n+\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t} else {\n+\t\t\t\tchar *upToComma = strUpToDelimiter(&upToColon, ',');\n+\t\t\t\twhile (TRUE) {\n+\t\t\t\t\tBOOLEAN checkTagLevel = FALSE;\n+\t\t\t\t\tchar *upToEquals = NULL;\n+#if defined(DEBUG_XLOG)\n+\t\t\t\t\tj9tty_printf(PORTLIB, \"upToComma %s upToColon %s\\n\", upToComma, upToColon);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\t\tif ('\\0' == *upToComma) {\n+\t\t\t\t\t\t/* Missing tag */\n+xlogerr:\n+\t\t\t\t\t\tCONSUME_ARG(j9vm_args, xlogindex);\n+\t\t\t\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_VM_OPTION_MALFORMED, j9vm_args->actualVMArgs->options[xlogindex].optionString);\n+\t\t\t\t\t\trc = JNI_ERR;\n+\t\t\t\t\t\tgoto xlogret;\n+\t\t\t\t\t}\n+\t\t\t\t\tupToEquals = strUpToDelimiter(&upToComma, '=');\n+#if defined(DEBUG_XLOG)\n+\t\t\t\t\tj9tty_printf(PORTLIB, \"upToEquals %s upToComma %s\\n\", upToEquals, upToComma);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\t\tif ('\\0' == *upToEquals) {\n+\t\t\t\t\t\t/* Missing tag */\n+\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tUDATA numtags = 0;\n+\t\t\t\t\t\tconst char *tag = strUpToDelimiter(&upToEquals, '+');\n+\t\t\t\t\t\twhile (TRUE) {\n+#if defined(DEBUG_XLOG)\n+\t\t\t\t\t\t\tj9tty_printf(PORTLIB, \"tag %s upToEquals %s\\n\", tag, upToEquals);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\t\t\t\tif ('\\0' == *tag) {\n+\t\t\t\t\t\t\t\t/* Missing tag */\n+\t\t\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tif (0 == j9_cmdla_stricmp(\"all\", tag)) {\n+\t\t\t\t\t\t\t\tif ((numtags > 0) || (NULL != upToEquals)) {\n+\t\t\t\t\t\t\t\t\t/* Invalid use of keyword all */\n+\t\t\t\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\t\tcheckTagLevel = TRUE;\n+\t\t\t\t\t\t\t\t\t/* only gc is recognized from all */\n+\t\t\t\t\t\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t} else if (0 == j9_cmdla_stricmp(\"disable\", tag)) {\n+\t\t\t\t\t\t\t\tif ((numtags > 0)\n+\t\t\t\t\t\t\t\t\t|| (NULL != upToEquals)\n+\t\t\t\t\t\t\t\t\t|| (NULL != upToComma)\n+\t\t\t\t\t\t\t\t\t|| (NULL != upToColon)\n+\t\t\t\t\t\t\t\t\t|| (NULL != fullOptions)\n+\t\t\t\t\t\t\t\t) {\n+\t\t\t\t\t\t\t\t\t/* Invalid use of keyword disable */\n+\t\t\t\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\t\tsetgclog = TRUE;\n+\t\t\t\t\t\t\t\t\tgclog = FALSE;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t} else if ((0 == j9_cmdla_stricmp(\"gc\", tag)) || (0 == j9_cmdla_stricmp(\"gc*\", tag))) {\n+\t\t\t\t\t\t\t\tcheckTagLevel = TRUE;\n+\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tnumtags += 1;\n+\t\t\t\t\t\t\tif (NULL == upToEquals) {\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\ttag = strUpToDelimiter(&upToEquals, '+');\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tif (checkTagLevel) {\n+\t\t\t\t\t\t/* look for a level after the '=' */\n+\t\t\t\t\t\tsetgclog = TRUE;\n+\t\t\t\t\t\tif (NULL == upToComma) {\n+\t\t\t\t\t\t\tgclog = TRUE;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tif ('\\0' == *upToComma) {\n+\t\t\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tgclog = 0 != j9_cmdla_stricmp(\"off\", upToComma);\n+\t\t\t\t\t\t\tif (gclog) {\n+\t\t\t\t\t\t\t\t/* OpenJ9 doesn't understand log levels */\n+\t\t\t\t\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tif (NULL == upToColon) {\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n+\t\t\t\t\tupToComma = strUpToDelimiter(&upToColon, ',');\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif (NULL != fullOptions) {\n+\t\t\t\t/* look at the output method */\n+\t\t\t\tchar *output = NULL;\n+\t\t\t\tupToColon = strUpToDelimiter(&fullOptions, ':');\n+#if defined(DEBUG_XLOG)\n+\t\t\t\tj9tty_printf(PORTLIB, \"upToColon %s fullOptions %s\\n\", upToColon, fullOptions);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\toutput = strUpToDelimiter(&upToColon, '=');\n+#if defined(DEBUG_XLOG)\n+\t\t\t\tj9tty_printf(PORTLIB, \"output %s upToColon %s\\n\", output, upToColon);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\t/* stderr | stdout | file=<filename> | <filename> */\n+\t\t\t\tif (0 == j9_cmdla_stricmp(\"stderr\", output)) {\n+\t\t\t\t\tif (NULL != upToColon) {\n+\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t}\n+\t\t\t\t} else if (0 == j9_cmdla_stricmp(\"stdout\", output)) {\n+\t\t\t\t\tif (NULL != upToColon) {\n+\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t}\n+\t\t\t\t\t/* Can't log to stdout yet */\n+\t\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t\t} else if (NULL == upToColon) {\n+\t\t\t\t\tif ('\\0' != *output) {\n+\t\t\t\t\t\t/* Without `=` anything non-empty is a filename */\n+\t\t\t\t\t\tgclogfile = output;\n+\t\t\t\t\t}\n+\t\t\t\t} else if (0 == j9_cmdla_stricmp(\"file\", output)) {\n+\t\t\t\t\tif (NULL == upToColon) {\n+\t\t\t\t\t\t/* `file=` with no filename specified */\n+\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t}\n+\t\t\t\t\tgclogfile = upToColon;\n+\t\t\t\t} else {\n+\t\t\t\t\t/* Anything else such as `<something>=<something>` is an error */\n+\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t}\n+\n+\t\t\t\tif (NULL != fullOptions) {\n+\t\t\t\t\t/* Anything besides trailing ':'s is unrecognized */\n+\t\t\t\t\tif (('\\0' != *fullOptions) && (':' != *fullOptions)) {\n+\t\t\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tstrUpToDelimiter(&fullOptions, ':');\n+\t\t\t\t\t\tif ((NULL != fullOptions) && ('\\0' != *fullOptions)) {\n+\t\t\t\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+#if defined(DEBUG_XLOG)\n+\t\tj9tty_printf(PORTLIB, \"setgclog %d gclog %d file %s\\n\", setgclog, gclog, gclogfile);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\tif (setgclog && gclog) {\n+\t\t \tif (NULL != gclogfile) {\n+\t\t\t\tIDATA mapRc = 0;\n+\t\t\t\tchar *buf = NULL;\n+\t\t\t\tchar timeBuf[20];\n+\t\t\t\tUDATA sizeRequired = 0;\n+\t\t\t\tstruct J9StringTokens *stringTokens = j9str_create_tokens(j9time_current_time_millis());\n+\t\t\t\tif (NULL == stringTokens) {\n+\t\t\t\t\trc = JNI_ERR;\n+\t\t\t\t\tgoto xlogret;\n+\t\t\t\t}\n+\t\t\t\tj9str_subst_tokens(timeBuf, sizeof(timeBuf), \"%Y-%m-%d_%H-%M-%S\", stringTokens);\n+\n+\t\t\t\tif (j9str_set_token(PORTLIB, stringTokens, \"p\", \"%lld\", j9sysinfo_get_pid())\n+\t\t\t\t\t|| j9str_set_token(PORTLIB, stringTokens, \"t\", \"%s\", timeBuf)\n+\t\t\t\t) {\n+\t\t\t\t\tj9str_free_tokens(stringTokens);\n+\t\t\t\t\trc = JNI_ERR;\n+\t\t\t\t\tgoto xlogret;\n+\t\t\t\t}\n+\t\t\t\tsizeRequired = j9str_subst_tokens(NULL, 0, gclogfile, stringTokens);\n+\t\t\t\t/* sizeRequired already includes space for the NULL */\n+\t\t\t\tbuf = j9mem_allocate_memory(sizeof(MAPOPT_XVERBOSEGCLOG) - 1 + sizeRequired, OMRMEM_CATEGORY_VM);\n+\t\t\t\tif (NULL == buf) {\n+\t\t\t\t\tj9str_free_tokens(stringTokens);\n+\t\t\t\t\trc = JNI_ERR;\n+\t\t\t\t\tgoto xlogret;\n+\t\t\t\t}\n+\t\t\t\tstrcpy(buf, MAPOPT_XVERBOSEGCLOG);\n+\t\t\t\tj9str_subst_tokens(buf + sizeof(MAPOPT_XVERBOSEGCLOG) - 1, sizeRequired, gclogfile, stringTokens);\n+\t\t\t\tj9str_free_tokens(stringTokens);\n+\t\t\t\tj9tty_printf(PORTLIB, \"mapping %s to %s\\n\", j9vm_args->actualVMArgs->options[xlogindex].optionString, buf);\n+\t\t\t\tmapRc = registerCmdLineMapping(vm, j9vm_args->actualVMArgs->options[xlogindex].optionString, buf, EXACT_MAP_NO_OPTIONS);\n+\t\t\t\tj9mem_free_memory(buf);\n+\t\t\t\tif (RC_FAILED == mapRc) {\n+\t\t\t\t\trc = JNI_ERR;\n+\t\t\t\t\tgoto xlogret;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tif (RC_FAILED == registerCmdLineMapping(vm, j9vm_args->actualVMArgs->options[xlogindex].optionString, MAPOPT_VERBOSE_GC, EXACT_MAP_NO_OPTIONS)) {\n+\t\t\t\t\trc = JNI_ERR;\n+\t\t\t\t\tgoto xlogret;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} else if (setgclog) {\n+\t\t\t/* ATM there is no OpenJ9 option to disable gc logging */\n+\t\t\tunrecognizedOption = TRUE;\n+\t\t} else {\n+\t\t\tunrecognizedOption = TRUE;\n+\t\t}\n+\t\tif (unrecognizedOption) {\n+\t\t\tCONSUME_ARG(j9vm_args, xlogindex);\n+\t\t\tj9nls_printf(PORTLIB, J9NLS_WARNING, J9NLS_VM_UNRECOGNISED_CMD_LINE_OPT, j9vm_args->actualVMArgs->options[xlogindex].optionString);\n+\t\t}\n+\n+xlogret:\n+\t\tif (xlogoptions != xlogoptionsbuf) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM3NjM4NA=="}, "originalCommit": {"oid": "e39dc3f97d6b8388fc5e1a5cc222dea074452b81"}, "originalPosition": 309}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MzAxNjE5OnYy", "diffSide": "RIGHT", "path": "runtime/vm/jvminit.c", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNTozNTozNlrOHtdlFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNzo1Mjo1NlrOHtjUTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQzMjU5Nw==", "bodyText": "nit: strange indentation (space between tabs)", "url": "https://github.com/eclipse-openj9/openj9/pull/11082#discussion_r517432597", "createdAt": "2020-11-04T15:35:36Z", "author": {"login": "keithc-ca"}, "path": "runtime/vm/jvminit.c", "diffHunk": "@@ -6000,6 +6002,291 @@ processCompressionOptions(J9JavaVM *vm){\n \t}\n }\n \n+/**\n+ * Returns the original *source.\n+ * Find the next delimiter and replace it with NULL. Set *source to the character\n+ * after the delimiter. If no delimiter is found, set *source to NULL.\n+ */\n+static char *\n+strUpToDelimiter(char **source, char delimiter)\n+{\n+\tchar ch = '\\0';\n+\tchar *result = *source;\n+\twhile ('\\0' != (ch = **source)) {\n+\t\tif (ch == delimiter) {\n+\t\t\t**source = '\\0';\n+\t\t\t*source += 1;\n+\t\t\treturn result;\n+\t\t}\n+\t\t*source += 1;\n+\t}\n+\t*source = NULL;\n+\treturn result;\n+}\n+\n+/**\n+ * For compatibility when -XX:-LegacyXlogOption is not set, parse -Xlog:gc options and add mappings.\n+ * Anything besides -Xlog:gc, -Xlog:gc:stderr|<file>|file=<file>[:[:]] gives an unrecognized warning,\n+ * although any superset such as -Xlog, -Xlog:all, -Xlog:something,gc, etc. enables gc logging as well.\n+ */\n+static IDATA\n+parseXlogForCompatibility(J9JavaVM *vm)\n+{\n+\tPORT_ACCESS_FROM_JAVAVM(vm);\n+\tIDATA rc = JNI_OK;\n+\tJ9VMInitArgs *j9vm_args = vm->vmArgsArray;\n+\tIDATA xlogindex = FIND_ARG_IN_VMARGS_FORWARD(OPTIONAL_LIST_MATCH, MAPOPT_XLOG_OPT, NULL);\n+\twhile (xlogindex >= 0) {\n+\t\tBOOLEAN unrecognizedOption = FALSE;\n+\t\tBOOLEAN setgclog = FALSE;\n+\t\tBOOLEAN gclog = FALSE;\n+\t\tchar *gclogfile = NULL;\n+\t\tchar xlogoptionsbuf[LARGE_STRING_BUF_SIZE];\n+\t\tchar *xlogoptions = xlogoptionsbuf;\n+\t\t/* Include room for the trailing NULL */\n+\t\tUDATA optionLen = strlen(j9vm_args->actualVMArgs->options[xlogindex].optionString) + 1;\n+\n+\t\tif (optionLen > sizeof(xlogoptionsbuf)) {\n+\t\t\txlogoptions = j9mem_allocate_memory(optionLen, OMRMEM_CATEGORY_VM);\n+\t\t\tif (NULL == xlogoptions) {\n+\t\t\t\trc = JNI_ERR;\n+\t\t\t\tgoto xlogret;\n+\t\t\t}\n+\t\t}\n+\n+\t\tif (OPTION_OK != COPY_OPTION_VALUE(xlogindex, ':', &xlogoptions, optionLen)) {\n+\t\t\trc = JNI_ERR;\n+\t\t\tgoto xlogret;\n+\t\t}\n+\n+\t\tif (NULL == xlogoptions) {\n+\t\t\t/* Reached if just -Xlog is specified */\n+\t\t\tsetgclog = TRUE;\n+\t\t\tgclog = TRUE;\n+\t\t\tunrecognizedOption = TRUE;\n+\t\t} else {\n+\t\t\t/* -Xlog:gc+other=off,a+b=c:file=abc:dec:options */\n+\t\t\tchar *fullOptions = xlogoptions;\n+\t\t\tchar *upToColon = strUpToDelimiter(&fullOptions, ':');\n+#if defined(DEBUG_XLOG)\n+\t\t\tj9tty_printf(PORTLIB, \"upToColon %s fullOptions %s\\n\", upToColon, fullOptions);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\tif ('\\0' == *upToColon) {\n+\t\t\t\t/* Nothing specified means all are enabled */\n+\t\t\t\tsetgclog = TRUE;\n+\t\t\t\tgclog = TRUE;\n+\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t} else {\n+\t\t\t\tchar *upToComma = strUpToDelimiter(&upToColon, ',');\n+\t\t\t\twhile (TRUE) {\n+\t\t\t\t\tBOOLEAN checkTagLevel = FALSE;\n+\t\t\t\t\tchar *upToEquals = NULL;\n+#if defined(DEBUG_XLOG)\n+\t\t\t\t\tj9tty_printf(PORTLIB, \"upToComma %s upToColon %s\\n\", upToComma, upToColon);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\t\tif ('\\0' == *upToComma) {\n+\t\t\t\t\t\t/* Missing tag */\n+xlogerr:\n+\t\t\t\t\t\tCONSUME_ARG(j9vm_args, xlogindex);\n+\t\t\t\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_VM_OPTION_MALFORMED, j9vm_args->actualVMArgs->options[xlogindex].optionString);\n+\t\t\t\t\t\trc = JNI_ERR;\n+\t\t\t\t\t\tgoto xlogret;\n+\t\t\t\t\t}\n+\t\t\t\t\tupToEquals = strUpToDelimiter(&upToComma, '=');\n+#if defined(DEBUG_XLOG)\n+\t\t\t\t\tj9tty_printf(PORTLIB, \"upToEquals %s upToComma %s\\n\", upToEquals, upToComma);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\t\tif ('\\0' == *upToEquals) {\n+\t\t\t\t\t\t/* Missing tag */\n+\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tUDATA numtags = 0;\n+\t\t\t\t\t\tconst char *tag = strUpToDelimiter(&upToEquals, '+');\n+\t\t\t\t\t\twhile (TRUE) {\n+#if defined(DEBUG_XLOG)\n+\t\t\t\t\t\t\tj9tty_printf(PORTLIB, \"tag %s upToEquals %s\\n\", tag, upToEquals);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\t\t\t\tif ('\\0' == *tag) {\n+\t\t\t\t\t\t\t\t/* Missing tag */\n+\t\t\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tif (0 == j9_cmdla_stricmp(\"all\", tag)) {\n+\t\t\t\t\t\t\t\tif ((numtags > 0) || (NULL != upToEquals)) {\n+\t\t\t\t\t\t\t\t\t/* Invalid use of keyword all */\n+\t\t\t\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\t\tcheckTagLevel = TRUE;\n+\t\t\t\t\t\t\t\t\t/* only gc is recognized from all */\n+\t\t\t\t\t\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t} else if (0 == j9_cmdla_stricmp(\"disable\", tag)) {\n+\t\t\t\t\t\t\t\tif ((numtags > 0)\n+\t\t\t\t\t\t\t\t\t|| (NULL != upToEquals)\n+\t\t\t\t\t\t\t\t\t|| (NULL != upToComma)\n+\t\t\t\t\t\t\t\t\t|| (NULL != upToColon)\n+\t\t\t\t\t\t\t\t\t|| (NULL != fullOptions)\n+\t\t\t\t\t\t\t\t) {\n+\t\t\t\t\t\t\t\t\t/* Invalid use of keyword disable */\n+\t\t\t\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\t\tsetgclog = TRUE;\n+\t\t\t\t\t\t\t\t\tgclog = FALSE;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t} else if ((0 == j9_cmdla_stricmp(\"gc\", tag)) || (0 == j9_cmdla_stricmp(\"gc*\", tag))) {\n+\t\t\t\t\t\t\t\tcheckTagLevel = TRUE;\n+\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tnumtags += 1;\n+\t\t\t\t\t\t\tif (NULL == upToEquals) {\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\ttag = strUpToDelimiter(&upToEquals, '+');\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tif (checkTagLevel) {\n+\t\t\t\t\t\t/* look for a level after the '=' */\n+\t\t\t\t\t\tsetgclog = TRUE;\n+\t\t\t\t\t\tif (NULL == upToComma) {\n+\t\t\t\t\t\t\tgclog = TRUE;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tif ('\\0' == *upToComma) {\n+\t\t\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tgclog = 0 != j9_cmdla_stricmp(\"off\", upToComma);\n+\t\t\t\t\t\t\tif (gclog) {\n+\t\t\t\t\t\t\t\t/* OpenJ9 doesn't understand log levels */\n+\t\t\t\t\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tif (NULL == upToColon) {\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n+\t\t\t\t\tupToComma = strUpToDelimiter(&upToColon, ',');\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif (NULL != fullOptions) {\n+\t\t\t\t/* look at the output method */\n+\t\t\t\tchar *output = NULL;\n+\t\t\t\tupToColon = strUpToDelimiter(&fullOptions, ':');\n+#if defined(DEBUG_XLOG)\n+\t\t\t\tj9tty_printf(PORTLIB, \"upToColon %s fullOptions %s\\n\", upToColon, fullOptions);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\toutput = strUpToDelimiter(&upToColon, '=');\n+#if defined(DEBUG_XLOG)\n+\t\t\t\tj9tty_printf(PORTLIB, \"output %s upToColon %s\\n\", output, upToColon);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\t/* stderr | stdout | file=<filename> | <filename> */\n+\t\t\t\tif (0 == j9_cmdla_stricmp(\"stderr\", output)) {\n+\t\t\t\t\tif (NULL != upToColon) {\n+\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t}\n+\t\t\t\t} else if (0 == j9_cmdla_stricmp(\"stdout\", output)) {\n+\t\t\t\t\tif (NULL != upToColon) {\n+\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t}\n+\t\t\t\t\t/* Can't log to stdout yet */\n+\t\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t\t} else if (NULL == upToColon) {\n+\t\t\t\t\tif ('\\0' != *output) {\n+\t\t\t\t\t\t/* Without `=` anything non-empty is a filename */\n+\t\t\t\t\t\tgclogfile = output;\n+\t\t\t\t\t}\n+\t\t\t\t} else if (0 == j9_cmdla_stricmp(\"file\", output)) {\n+\t\t\t\t\tif (NULL == upToColon) {\n+\t\t\t\t\t\t/* `file=` with no filename specified */\n+\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t}\n+\t\t\t\t\tgclogfile = upToColon;\n+\t\t\t\t} else {\n+\t\t\t\t\t/* Anything else such as `<something>=<something>` is an error */\n+\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t}\n+\n+\t\t\t\tif (NULL != fullOptions) {\n+\t\t\t\t\t/* Anything besides trailing ':'s is unrecognized */\n+\t\t\t\t\tif (('\\0' != *fullOptions) && (':' != *fullOptions)) {\n+\t\t\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tstrUpToDelimiter(&fullOptions, ':');\n+\t\t\t\t\t\tif ((NULL != fullOptions) && ('\\0' != *fullOptions)) {\n+\t\t\t\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+#if defined(DEBUG_XLOG)\n+\t\tj9tty_printf(PORTLIB, \"setgclog %d gclog %d file %s\\n\", setgclog, gclog, gclogfile);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\tif (setgclog && gclog) {\n+\t\t \tif (NULL != gclogfile) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90f95e4fa448be1745c6820a1f035aafb8a0fe12"}, "originalPosition": 254}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzUyNjYwNg==", "bodyText": "Fixed (and squashed and rebased).", "url": "https://github.com/eclipse-openj9/openj9/pull/11082#discussion_r517526606", "createdAt": "2020-11-04T17:52:56Z", "author": {"login": "pshipton"}, "path": "runtime/vm/jvminit.c", "diffHunk": "@@ -6000,6 +6002,291 @@ processCompressionOptions(J9JavaVM *vm){\n \t}\n }\n \n+/**\n+ * Returns the original *source.\n+ * Find the next delimiter and replace it with NULL. Set *source to the character\n+ * after the delimiter. If no delimiter is found, set *source to NULL.\n+ */\n+static char *\n+strUpToDelimiter(char **source, char delimiter)\n+{\n+\tchar ch = '\\0';\n+\tchar *result = *source;\n+\twhile ('\\0' != (ch = **source)) {\n+\t\tif (ch == delimiter) {\n+\t\t\t**source = '\\0';\n+\t\t\t*source += 1;\n+\t\t\treturn result;\n+\t\t}\n+\t\t*source += 1;\n+\t}\n+\t*source = NULL;\n+\treturn result;\n+}\n+\n+/**\n+ * For compatibility when -XX:-LegacyXlogOption is not set, parse -Xlog:gc options and add mappings.\n+ * Anything besides -Xlog:gc, -Xlog:gc:stderr|<file>|file=<file>[:[:]] gives an unrecognized warning,\n+ * although any superset such as -Xlog, -Xlog:all, -Xlog:something,gc, etc. enables gc logging as well.\n+ */\n+static IDATA\n+parseXlogForCompatibility(J9JavaVM *vm)\n+{\n+\tPORT_ACCESS_FROM_JAVAVM(vm);\n+\tIDATA rc = JNI_OK;\n+\tJ9VMInitArgs *j9vm_args = vm->vmArgsArray;\n+\tIDATA xlogindex = FIND_ARG_IN_VMARGS_FORWARD(OPTIONAL_LIST_MATCH, MAPOPT_XLOG_OPT, NULL);\n+\twhile (xlogindex >= 0) {\n+\t\tBOOLEAN unrecognizedOption = FALSE;\n+\t\tBOOLEAN setgclog = FALSE;\n+\t\tBOOLEAN gclog = FALSE;\n+\t\tchar *gclogfile = NULL;\n+\t\tchar xlogoptionsbuf[LARGE_STRING_BUF_SIZE];\n+\t\tchar *xlogoptions = xlogoptionsbuf;\n+\t\t/* Include room for the trailing NULL */\n+\t\tUDATA optionLen = strlen(j9vm_args->actualVMArgs->options[xlogindex].optionString) + 1;\n+\n+\t\tif (optionLen > sizeof(xlogoptionsbuf)) {\n+\t\t\txlogoptions = j9mem_allocate_memory(optionLen, OMRMEM_CATEGORY_VM);\n+\t\t\tif (NULL == xlogoptions) {\n+\t\t\t\trc = JNI_ERR;\n+\t\t\t\tgoto xlogret;\n+\t\t\t}\n+\t\t}\n+\n+\t\tif (OPTION_OK != COPY_OPTION_VALUE(xlogindex, ':', &xlogoptions, optionLen)) {\n+\t\t\trc = JNI_ERR;\n+\t\t\tgoto xlogret;\n+\t\t}\n+\n+\t\tif (NULL == xlogoptions) {\n+\t\t\t/* Reached if just -Xlog is specified */\n+\t\t\tsetgclog = TRUE;\n+\t\t\tgclog = TRUE;\n+\t\t\tunrecognizedOption = TRUE;\n+\t\t} else {\n+\t\t\t/* -Xlog:gc+other=off,a+b=c:file=abc:dec:options */\n+\t\t\tchar *fullOptions = xlogoptions;\n+\t\t\tchar *upToColon = strUpToDelimiter(&fullOptions, ':');\n+#if defined(DEBUG_XLOG)\n+\t\t\tj9tty_printf(PORTLIB, \"upToColon %s fullOptions %s\\n\", upToColon, fullOptions);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\tif ('\\0' == *upToColon) {\n+\t\t\t\t/* Nothing specified means all are enabled */\n+\t\t\t\tsetgclog = TRUE;\n+\t\t\t\tgclog = TRUE;\n+\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t} else {\n+\t\t\t\tchar *upToComma = strUpToDelimiter(&upToColon, ',');\n+\t\t\t\twhile (TRUE) {\n+\t\t\t\t\tBOOLEAN checkTagLevel = FALSE;\n+\t\t\t\t\tchar *upToEquals = NULL;\n+#if defined(DEBUG_XLOG)\n+\t\t\t\t\tj9tty_printf(PORTLIB, \"upToComma %s upToColon %s\\n\", upToComma, upToColon);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\t\tif ('\\0' == *upToComma) {\n+\t\t\t\t\t\t/* Missing tag */\n+xlogerr:\n+\t\t\t\t\t\tCONSUME_ARG(j9vm_args, xlogindex);\n+\t\t\t\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_VM_OPTION_MALFORMED, j9vm_args->actualVMArgs->options[xlogindex].optionString);\n+\t\t\t\t\t\trc = JNI_ERR;\n+\t\t\t\t\t\tgoto xlogret;\n+\t\t\t\t\t}\n+\t\t\t\t\tupToEquals = strUpToDelimiter(&upToComma, '=');\n+#if defined(DEBUG_XLOG)\n+\t\t\t\t\tj9tty_printf(PORTLIB, \"upToEquals %s upToComma %s\\n\", upToEquals, upToComma);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\t\tif ('\\0' == *upToEquals) {\n+\t\t\t\t\t\t/* Missing tag */\n+\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tUDATA numtags = 0;\n+\t\t\t\t\t\tconst char *tag = strUpToDelimiter(&upToEquals, '+');\n+\t\t\t\t\t\twhile (TRUE) {\n+#if defined(DEBUG_XLOG)\n+\t\t\t\t\t\t\tj9tty_printf(PORTLIB, \"tag %s upToEquals %s\\n\", tag, upToEquals);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\t\t\t\tif ('\\0' == *tag) {\n+\t\t\t\t\t\t\t\t/* Missing tag */\n+\t\t\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tif (0 == j9_cmdla_stricmp(\"all\", tag)) {\n+\t\t\t\t\t\t\t\tif ((numtags > 0) || (NULL != upToEquals)) {\n+\t\t\t\t\t\t\t\t\t/* Invalid use of keyword all */\n+\t\t\t\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\t\tcheckTagLevel = TRUE;\n+\t\t\t\t\t\t\t\t\t/* only gc is recognized from all */\n+\t\t\t\t\t\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t} else if (0 == j9_cmdla_stricmp(\"disable\", tag)) {\n+\t\t\t\t\t\t\t\tif ((numtags > 0)\n+\t\t\t\t\t\t\t\t\t|| (NULL != upToEquals)\n+\t\t\t\t\t\t\t\t\t|| (NULL != upToComma)\n+\t\t\t\t\t\t\t\t\t|| (NULL != upToColon)\n+\t\t\t\t\t\t\t\t\t|| (NULL != fullOptions)\n+\t\t\t\t\t\t\t\t) {\n+\t\t\t\t\t\t\t\t\t/* Invalid use of keyword disable */\n+\t\t\t\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\t\tsetgclog = TRUE;\n+\t\t\t\t\t\t\t\t\tgclog = FALSE;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t} else if ((0 == j9_cmdla_stricmp(\"gc\", tag)) || (0 == j9_cmdla_stricmp(\"gc*\", tag))) {\n+\t\t\t\t\t\t\t\tcheckTagLevel = TRUE;\n+\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tnumtags += 1;\n+\t\t\t\t\t\t\tif (NULL == upToEquals) {\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\ttag = strUpToDelimiter(&upToEquals, '+');\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tif (checkTagLevel) {\n+\t\t\t\t\t\t/* look for a level after the '=' */\n+\t\t\t\t\t\tsetgclog = TRUE;\n+\t\t\t\t\t\tif (NULL == upToComma) {\n+\t\t\t\t\t\t\tgclog = TRUE;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tif ('\\0' == *upToComma) {\n+\t\t\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tgclog = 0 != j9_cmdla_stricmp(\"off\", upToComma);\n+\t\t\t\t\t\t\tif (gclog) {\n+\t\t\t\t\t\t\t\t/* OpenJ9 doesn't understand log levels */\n+\t\t\t\t\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tif (NULL == upToColon) {\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n+\t\t\t\t\tupToComma = strUpToDelimiter(&upToColon, ',');\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif (NULL != fullOptions) {\n+\t\t\t\t/* look at the output method */\n+\t\t\t\tchar *output = NULL;\n+\t\t\t\tupToColon = strUpToDelimiter(&fullOptions, ':');\n+#if defined(DEBUG_XLOG)\n+\t\t\t\tj9tty_printf(PORTLIB, \"upToColon %s fullOptions %s\\n\", upToColon, fullOptions);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\toutput = strUpToDelimiter(&upToColon, '=');\n+#if defined(DEBUG_XLOG)\n+\t\t\t\tj9tty_printf(PORTLIB, \"output %s upToColon %s\\n\", output, upToColon);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\t/* stderr | stdout | file=<filename> | <filename> */\n+\t\t\t\tif (0 == j9_cmdla_stricmp(\"stderr\", output)) {\n+\t\t\t\t\tif (NULL != upToColon) {\n+\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t}\n+\t\t\t\t} else if (0 == j9_cmdla_stricmp(\"stdout\", output)) {\n+\t\t\t\t\tif (NULL != upToColon) {\n+\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t}\n+\t\t\t\t\t/* Can't log to stdout yet */\n+\t\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t\t} else if (NULL == upToColon) {\n+\t\t\t\t\tif ('\\0' != *output) {\n+\t\t\t\t\t\t/* Without `=` anything non-empty is a filename */\n+\t\t\t\t\t\tgclogfile = output;\n+\t\t\t\t\t}\n+\t\t\t\t} else if (0 == j9_cmdla_stricmp(\"file\", output)) {\n+\t\t\t\t\tif (NULL == upToColon) {\n+\t\t\t\t\t\t/* `file=` with no filename specified */\n+\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t}\n+\t\t\t\t\tgclogfile = upToColon;\n+\t\t\t\t} else {\n+\t\t\t\t\t/* Anything else such as `<something>=<something>` is an error */\n+\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t}\n+\n+\t\t\t\tif (NULL != fullOptions) {\n+\t\t\t\t\t/* Anything besides trailing ':'s is unrecognized */\n+\t\t\t\t\tif (('\\0' != *fullOptions) && (':' != *fullOptions)) {\n+\t\t\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tstrUpToDelimiter(&fullOptions, ':');\n+\t\t\t\t\t\tif ((NULL != fullOptions) && ('\\0' != *fullOptions)) {\n+\t\t\t\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+#if defined(DEBUG_XLOG)\n+\t\tj9tty_printf(PORTLIB, \"setgclog %d gclog %d file %s\\n\", setgclog, gclog, gclogfile);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\tif (setgclog && gclog) {\n+\t\t \tif (NULL != gclogfile) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQzMjU5Nw=="}, "originalCommit": {"oid": "90f95e4fa448be1745c6820a1f035aafb8a0fe12"}, "originalPosition": 254}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1OTUzOTY0OnYy", "diffSide": "RIGHT", "path": "test/functional/cmdLineTests/xlogTests/build.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNjo0NTo0OFrOHv3rJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNjo0NTo0OFrOHv3rJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk1NzI4Nw==", "bodyText": "Please remove the unnecessary indentation of the copyright notices (in all .xml files).", "url": "https://github.com/eclipse-openj9/openj9/pull/11082#discussion_r519957287", "createdAt": "2020-11-09T16:45:48Z", "author": {"login": "keithc-ca"}, "path": "test/functional/cmdLineTests/xlogTests/build.xml", "diffHunk": "@@ -0,0 +1,44 @@\n+<?xml version=\"1.0\"?>\n+\n+<!--\n+  Copyright (c) 2020, 2020 IBM Corp. and others\n+\n+  This program and the accompanying materials are made available under\n+  the terms of the Eclipse Public License 2.0 which accompanies this\n+  distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+  or the Apache License, Version 2.0 which accompanies this distribution and\n+  is available at https://www.apache.org/licenses/LICENSE-2.0.\n+\n+  This Source Code may also be made available under the following\n+  Secondary Licenses when the conditions for such availability set\n+  forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+  General Public License, version 2 with the GNU Classpath\n+  Exception [1] and GNU General Public License, version 2 with the\n+  OpenJDK Assembly Exception [2].\n+\n+  [1] https://www.gnu.org/software/classpath/license.html\n+  [2] http://openjdk.java.net/legal/assembly-exception.html\n+\n+  SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28930fa064b4120ea4bcdbdf28f1ed60c246b7e2"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1OTU1NDY2OnYy", "diffSide": "RIGHT", "path": "test/functional/cmdLineTests/xlogTests/playlist.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNjo0ODowMlrOHv30kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNjo0ODowMlrOHv30kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk1OTY5OA==", "bodyText": "Please remove trailing whitespace.", "url": "https://github.com/eclipse-openj9/openj9/pull/11082#discussion_r519959698", "createdAt": "2020-11-09T16:48:02Z", "author": {"login": "keithc-ca"}, "path": "test/functional/cmdLineTests/xlogTests/playlist.xml", "diffHunk": "@@ -0,0 +1,47 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+\n+<!--\n+  Copyright (c) 2020, 2020 IBM Corp. and others\n+\n+  This program and the accompanying materials are made available under\n+  the terms of the Eclipse Public License 2.0 which accompanies this\n+  distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+  or the Apache License, Version 2.0 which accompanies this distribution and\n+  is available at https://www.apache.org/licenses/LICENSE-2.0.\n+\n+  This Source Code may also be made available under the following\n+  Secondary Licenses when the conditions for such availability set\n+  forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+  General Public License, version 2 with the GNU Classpath\n+  Exception [1] and GNU General Public License, version 2 with the\n+  OpenJDK Assembly Exception [2].\n+\n+  [1] https://www.gnu.org/software/classpath/license.html\n+  [2] http://openjdk.java.net/legal/assembly-exception.html\n+\n+  SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+-->\n+\n+<playlist xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"../../../TKG/playlist.xsd\">\n+\t<test>\n+\t\t<testCaseName>cmdLineTester_xlogTests</testCaseName>\n+\t\t<variations>\n+\t\t\t<variation>NoOptions</variation>\n+\t\t</variations>\n+\t\t<command>$(JAVA_COMMAND) $(JVM_OPTIONS) \\\n+\t-DEXE=$(SQ)$(JAVA_COMMAND) $(JVM_OPTIONS)$(SQ) -jar $(CMDLINETESTER_JAR) \\\n+\t-config $(Q)$(TEST_RESROOT)$(D)xlog.xml$(Q) \\\n+\t-xids all,$(PLATFORM) -explainExcludes -nonZeroExitWhenError; \\\n+\t$(TEST_STATUS)</command>\n+\t\t<levels>\n+\t\t\t<level>extended</level>\n+\t\t</levels>\n+\t\t<groups>\n+\t\t\t<group>functional</group>\n+\t\t</groups>\n+\t\t<impls>\n+\t\t\t<impl>openj9</impl>\n+\t\t\t<impl>ibm</impl>\t\t\t", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28930fa064b4120ea4bcdbdf28f1ed60c246b7e2"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1OTU2NjAxOnYy", "diffSide": "RIGHT", "path": "test/functional/cmdLineTests/xlogTests/xlog.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNjo0OTo1MFrOHv373w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNjo0OTo1MFrOHv373w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk2MTU2Nw==", "bodyText": "Please fix (throughout):\n\nindentation (space, tab -> tab)\ntrailing whitespace", "url": "https://github.com/eclipse-openj9/openj9/pull/11082#discussion_r519961567", "createdAt": "2020-11-09T16:49:50Z", "author": {"login": "keithc-ca"}, "path": "test/functional/cmdLineTests/xlogTests/xlog.xml", "diffHunk": "@@ -0,0 +1,251 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\" ?>\n+\n+<!--\n+  Copyright (c) 2020, 2020 IBM Corp. and others\n+\n+  This program and the accompanying materials are made available under\n+  the terms of the Eclipse Public License 2.0 which accompanies this\n+  distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+  or the Apache License, Version 2.0 which accompanies this distribution and\n+  is available at https://www.apache.org/licenses/LICENSE-2.0.\n+\n+  This Source Code may also be made available under the following\n+  Secondary Licenses when the conditions for such availability set\n+  forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+  General Public License, version 2 with the GNU Classpath\n+  Exception [1] and GNU General Public License, version 2 with the\n+  OpenJDK Assembly Exception [2].\n+\n+  [1] https://www.gnu.org/software/classpath/license.html\n+  [2] http://openjdk.java.net/legal/assembly-exception.html\n+\n+  SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+-->\n+\n+<!DOCTYPE suite SYSTEM \"cmdlinetester.dtd\">\n+\n+<suite id=\"-Xlog Tests\" timeout=\"60\">\n+<variable name=\"ENABLEXLOG\" value=\"-XX:-LegacyXlogOption\" />\n+\n+\t<test id=\"-Xlog\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+ \t</test>\n+\n+\t<test id=\"-Xlog:\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog: -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+ \t</test>\n+\n+\t<test id=\"-Xlog:all\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:all -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+ \t</test>\n+\n+\t<test id=\"-Xlog:all=off\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:all=off -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"failure\">verbosegc</output>\n+ \t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:any,gc\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:any,gc -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+ \t</test>\n+\n+\t<test id=\"-Xlog:gc,any\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc,any -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+ \t</test>\n+\n+\t<test id=\"-Xlog:gc,any=off\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc,any=off -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+ \t</test>\n+\n+\t<test id=\"-Xlog:gc\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM007</output>\n+ \t</test>\n+\n+\t<test id=\"-Xlog:gc:\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc: -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM007</output>\n+ \t</test>\n+\n+\t<test id=\"-Xlog:gc:stderr\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc:stderr -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM007</output>\n+ \t</test>\n+\n+\t<test id=\"-Xlog:gc:stderr\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc:stderr: -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM007</output>\n+ \t</test>\n+\n+\t<test id=\"-Xlog:gc:stderr:any\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc:stderr:any -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+ \t</test>\n+\n+\t<test id=\"-Xlog:gc:stdout\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc:stdout -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+ \t</test>\n+\n+\t<test id=\"-Xlog:gc:gclog\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc:gclog -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"failure\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM007</output>\n+ \t</test>\n+ \t\n+\t<test id=\"-Xlog:gc:gclog check file\">\n+\t\t<command>cat gclog</command>\n+\t\t<output regex=\"no\" type=\"success\">verbosegc</output>\n+ \t</test>\n+ \t", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28930fa064b4120ea4bcdbdf28f1ed60c246b7e2"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MDE1MzU0OnYy", "diffSide": "RIGHT", "path": "test/functional/cmdLineTests/xlogTests/playlist.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxOTowOTowNFrOHv9jYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxOToyMDo0M1rOHv-C-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA1MzYwMw==", "bodyText": "nit: Extra, unwanted leading space.", "url": "https://github.com/eclipse-openj9/openj9/pull/11082#discussion_r520053603", "createdAt": "2020-11-09T19:09:04Z", "author": {"login": "keithc-ca"}, "path": "test/functional/cmdLineTests/xlogTests/playlist.xml", "diffHunk": "@@ -0,0 +1,47 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+\n+<!--\n+Copyright (c) 2020, 2020 IBM Corp. and others\n+\n+This program and the accompanying materials are made available under\n+the terms of the Eclipse Public License 2.0 which accompanies this\n+ distribution and is available at https://www.eclipse.org/legal/epl-2.0/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae5876f4ffa28d66e916b6ce949f7f2b51eff5d3"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA2MTY5MA==", "bodyText": "Fixed.", "url": "https://github.com/eclipse-openj9/openj9/pull/11082#discussion_r520061690", "createdAt": "2020-11-09T19:20:43Z", "author": {"login": "pshipton"}, "path": "test/functional/cmdLineTests/xlogTests/playlist.xml", "diffHunk": "@@ -0,0 +1,47 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+\n+<!--\n+Copyright (c) 2020, 2020 IBM Corp. and others\n+\n+This program and the accompanying materials are made available under\n+the terms of the Eclipse Public License 2.0 which accompanies this\n+ distribution and is available at https://www.eclipse.org/legal/epl-2.0/", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA1MzYwMw=="}, "originalCommit": {"oid": "ae5876f4ffa28d66e916b6ce949f7f2b51eff5d3"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MDM4Njg4OnYy", "diffSide": "RIGHT", "path": "test/functional/cmdLineTests/xlogTests/xlog.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMDoxMDozMFrOHv_yLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMToyMzo1NlrOHwCJ_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA5MDE1OA==", "bodyText": "Are these tests guaranteed to be run sequentially (not in parallel)?", "url": "https://github.com/eclipse-openj9/openj9/pull/11082#discussion_r520090158", "createdAt": "2020-11-09T20:10:30Z", "author": {"login": "keithc-ca"}, "path": "test/functional/cmdLineTests/xlogTests/xlog.xml", "diffHunk": "@@ -0,0 +1,251 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\" ?>\n+\n+<!--\n+Copyright (c) 2020, 2020 IBM Corp. and others\n+\n+This program and the accompanying materials are made available under\n+the terms of the Eclipse Public License 2.0 which accompanies this\n+distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+or the Apache License, Version 2.0 which accompanies this distribution and\n+is available at https://www.apache.org/licenses/LICENSE-2.0.\n+\n+This Source Code may also be made available under the following\n+Secondary Licenses when the conditions for such availability set\n+forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+General Public License, version 2 with the GNU Classpath\n+Exception [1] and GNU General Public License, version 2 with the\n+OpenJDK Assembly Exception [2].\n+\n+[1] https://www.gnu.org/software/classpath/license.html\n+[2] http://openjdk.java.net/legal/assembly-exception.html\n+\n+SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+-->\n+\n+<!DOCTYPE suite SYSTEM \"cmdlinetester.dtd\">\n+\n+<suite id=\"-Xlog Tests\" timeout=\"60\">\n+<variable name=\"ENABLEXLOG\" value=\"-XX:-LegacyXlogOption\" />\n+\n+\t<test id=\"-Xlog\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog: -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:all\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:all -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:all=off\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:all=off -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"failure\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:any,gc\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:any,gc -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc,any\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc,any -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc,any=off\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc,any=off -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM007</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc:\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc: -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM007</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc:stderr\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc:stderr -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM007</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc:stderr\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc:stderr: -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM007</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc:stderr:any\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc:stderr:any -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc:stdout\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc:stdout -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc:gclog\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc:gclog -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"failure\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM007</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc:gclog check file\">\n+\t\t<command>cat gclog</command>\n+\t\t<output regex=\"no\" type=\"success\">verbosegc</output>\n+\t</test>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e7a239d84699a94f9074a7e2905563b8d7242d5"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDEyOTAyMA==", "bodyText": "Yes they run sequentially and test are written to take advantage of that, otherwise many of the suites would have problems.", "url": "https://github.com/eclipse-openj9/openj9/pull/11082#discussion_r520129020", "createdAt": "2020-11-09T21:23:56Z", "author": {"login": "pshipton"}, "path": "test/functional/cmdLineTests/xlogTests/xlog.xml", "diffHunk": "@@ -0,0 +1,251 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\" ?>\n+\n+<!--\n+Copyright (c) 2020, 2020 IBM Corp. and others\n+\n+This program and the accompanying materials are made available under\n+the terms of the Eclipse Public License 2.0 which accompanies this\n+distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+or the Apache License, Version 2.0 which accompanies this distribution and\n+is available at https://www.apache.org/licenses/LICENSE-2.0.\n+\n+This Source Code may also be made available under the following\n+Secondary Licenses when the conditions for such availability set\n+forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+General Public License, version 2 with the GNU Classpath\n+Exception [1] and GNU General Public License, version 2 with the\n+OpenJDK Assembly Exception [2].\n+\n+[1] https://www.gnu.org/software/classpath/license.html\n+[2] http://openjdk.java.net/legal/assembly-exception.html\n+\n+SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+-->\n+\n+<!DOCTYPE suite SYSTEM \"cmdlinetester.dtd\">\n+\n+<suite id=\"-Xlog Tests\" timeout=\"60\">\n+<variable name=\"ENABLEXLOG\" value=\"-XX:-LegacyXlogOption\" />\n+\n+\t<test id=\"-Xlog\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog: -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:all\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:all -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:all=off\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:all=off -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"failure\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:any,gc\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:any,gc -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc,any\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc,any -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc,any=off\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc,any=off -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM007</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc:\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc: -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM007</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc:stderr\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc:stderr -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM007</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc:stderr\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc:stderr: -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM007</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc:stderr:any\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc:stderr:any -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc:stdout\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc:stdout -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc:gclog\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc:gclog -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"failure\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM007</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc:gclog check file\">\n+\t\t<command>cat gclog</command>\n+\t\t<output regex=\"no\" type=\"success\">verbosegc</output>\n+\t</test>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA5MDE1OA=="}, "originalCommit": {"oid": "7e7a239d84699a94f9074a7e2905563b8d7242d5"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MDM5MDkyOnYy", "diffSide": "RIGHT", "path": "test/functional/cmdLineTests/xlogTests/xlog.xml", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMDoxMTozN1rOHv_0og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMTozMTo1NlrOHwCa7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA5MDc4Ng==", "bodyText": "I don't understand this: how can 'openjdk version' be both a success and a failure condition?", "url": "https://github.com/eclipse-openj9/openj9/pull/11082#discussion_r520090786", "createdAt": "2020-11-09T20:11:37Z", "author": {"login": "keithc-ca"}, "path": "test/functional/cmdLineTests/xlogTests/xlog.xml", "diffHunk": "@@ -0,0 +1,251 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\" ?>\n+\n+<!--\n+Copyright (c) 2020, 2020 IBM Corp. and others\n+\n+This program and the accompanying materials are made available under\n+the terms of the Eclipse Public License 2.0 which accompanies this\n+distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+or the Apache License, Version 2.0 which accompanies this distribution and\n+is available at https://www.apache.org/licenses/LICENSE-2.0.\n+\n+This Source Code may also be made available under the following\n+Secondary Licenses when the conditions for such availability set\n+forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+General Public License, version 2 with the GNU Classpath\n+Exception [1] and GNU General Public License, version 2 with the\n+OpenJDK Assembly Exception [2].\n+\n+[1] https://www.gnu.org/software/classpath/license.html\n+[2] http://openjdk.java.net/legal/assembly-exception.html\n+\n+SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+-->\n+\n+<!DOCTYPE suite SYSTEM \"cmdlinetester.dtd\">\n+\n+<suite id=\"-Xlog Tests\" timeout=\"60\">\n+<variable name=\"ENABLEXLOG\" value=\"-XX:-LegacyXlogOption\" />\n+\n+\t<test id=\"-Xlog\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog: -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:all\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:all -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:all=off\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:all=off -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"failure\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:any,gc\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:any,gc -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc,any\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc,any -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc,any=off\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc,any=off -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM007</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc:\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc: -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM007</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc:stderr\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc:stderr -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM007</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc:stderr\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc:stderr: -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM007</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc:stderr:any\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc:stderr:any -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc:stdout\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc:stdout -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc:gclog\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc:gclog -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"failure\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM007</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc:gclog check file\">\n+\t\t<command>cat gclog</command>\n+\t\t<output regex=\"no\" type=\"success\">verbosegc</output>\n+\t</test>\n+\n+\t<exec command=\"rm -f gclog\" />\n+\n+\t<test id=\"-Xlog:gc:gclog:\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc:gclog: -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"failure\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM007</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc:gclog: check file\">\n+\t\t<command>cat gclog</command>\n+\t\t<output regex=\"no\" type=\"success\">verbosegc</output>\n+\t</test>\n+\n+\t<exec command=\"rm -f gclog\" />\n+\n+\t<test id=\"-Xlog:gc:file=gclog\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc:file=gclog -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"failure\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM007</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc:file=gclog check file\">\n+\t\t<command>cat gclog</command>\n+\t\t<output regex=\"no\" type=\"success\">verbosegc</output>\n+\t</test>\n+\n+\t<exec command=\"rm -f gclog\" />\n+\n+\t<test id=\"-Xlog:gc=off\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc=off -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"failure\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:any+gc=off\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:any+gc=off -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"failure\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc+any=off\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc+any=off -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"failure\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc=off,any\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc=off,any -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"failure\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:any,gc=off\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:any,gc=off -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"failure\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:disable\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:disable -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"failure\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:disable:\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:disable: -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"success\">JVMJ9VM085E</output>\n+\t\t<output regex=\"no\" type=\"failure\">openjdk version</output>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e7a239d84699a94f9074a7e2905563b8d7242d5"}, "originalPosition": 231}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDEyOTMzNw==", "bodyText": "It's not, it is a mistake. :)", "url": "https://github.com/eclipse-openj9/openj9/pull/11082#discussion_r520129337", "createdAt": "2020-11-09T21:24:26Z", "author": {"login": "pshipton"}, "path": "test/functional/cmdLineTests/xlogTests/xlog.xml", "diffHunk": "@@ -0,0 +1,251 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\" ?>\n+\n+<!--\n+Copyright (c) 2020, 2020 IBM Corp. and others\n+\n+This program and the accompanying materials are made available under\n+the terms of the Eclipse Public License 2.0 which accompanies this\n+distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+or the Apache License, Version 2.0 which accompanies this distribution and\n+is available at https://www.apache.org/licenses/LICENSE-2.0.\n+\n+This Source Code may also be made available under the following\n+Secondary Licenses when the conditions for such availability set\n+forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+General Public License, version 2 with the GNU Classpath\n+Exception [1] and GNU General Public License, version 2 with the\n+OpenJDK Assembly Exception [2].\n+\n+[1] https://www.gnu.org/software/classpath/license.html\n+[2] http://openjdk.java.net/legal/assembly-exception.html\n+\n+SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+-->\n+\n+<!DOCTYPE suite SYSTEM \"cmdlinetester.dtd\">\n+\n+<suite id=\"-Xlog Tests\" timeout=\"60\">\n+<variable name=\"ENABLEXLOG\" value=\"-XX:-LegacyXlogOption\" />\n+\n+\t<test id=\"-Xlog\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog: -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:all\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:all -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:all=off\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:all=off -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"failure\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:any,gc\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:any,gc -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc,any\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc,any -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc,any=off\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc,any=off -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM007</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc:\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc: -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM007</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc:stderr\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc:stderr -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM007</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc:stderr\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc:stderr: -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM007</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc:stderr:any\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc:stderr:any -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc:stdout\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc:stdout -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc:gclog\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc:gclog -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"failure\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM007</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc:gclog check file\">\n+\t\t<command>cat gclog</command>\n+\t\t<output regex=\"no\" type=\"success\">verbosegc</output>\n+\t</test>\n+\n+\t<exec command=\"rm -f gclog\" />\n+\n+\t<test id=\"-Xlog:gc:gclog:\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc:gclog: -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"failure\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM007</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc:gclog: check file\">\n+\t\t<command>cat gclog</command>\n+\t\t<output regex=\"no\" type=\"success\">verbosegc</output>\n+\t</test>\n+\n+\t<exec command=\"rm -f gclog\" />\n+\n+\t<test id=\"-Xlog:gc:file=gclog\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc:file=gclog -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"failure\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM007</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc:file=gclog check file\">\n+\t\t<command>cat gclog</command>\n+\t\t<output regex=\"no\" type=\"success\">verbosegc</output>\n+\t</test>\n+\n+\t<exec command=\"rm -f gclog\" />\n+\n+\t<test id=\"-Xlog:gc=off\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc=off -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"failure\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:any+gc=off\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:any+gc=off -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"failure\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc+any=off\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc+any=off -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"failure\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc=off,any\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc=off,any -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"failure\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:any,gc=off\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:any,gc=off -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"failure\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:disable\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:disable -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"failure\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:disable:\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:disable: -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"success\">JVMJ9VM085E</output>\n+\t\t<output regex=\"no\" type=\"failure\">openjdk version</output>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA5MDc4Ng=="}, "originalCommit": {"oid": "7e7a239d84699a94f9074a7e2905563b8d7242d5"}, "originalPosition": 231}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDEzMjY3NQ==", "bodyText": "The way the cmdline tester works, it passes if any success condition occurs, and all required conditions occur, and fails if any failure condition occurs. Since \"openjdk version\" doesn't occur in this test, the mistake didn't cause any problem when running it.", "url": "https://github.com/eclipse-openj9/openj9/pull/11082#discussion_r520132675", "createdAt": "2020-11-09T21:30:39Z", "author": {"login": "pshipton"}, "path": "test/functional/cmdLineTests/xlogTests/xlog.xml", "diffHunk": "@@ -0,0 +1,251 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\" ?>\n+\n+<!--\n+Copyright (c) 2020, 2020 IBM Corp. and others\n+\n+This program and the accompanying materials are made available under\n+the terms of the Eclipse Public License 2.0 which accompanies this\n+distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+or the Apache License, Version 2.0 which accompanies this distribution and\n+is available at https://www.apache.org/licenses/LICENSE-2.0.\n+\n+This Source Code may also be made available under the following\n+Secondary Licenses when the conditions for such availability set\n+forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+General Public License, version 2 with the GNU Classpath\n+Exception [1] and GNU General Public License, version 2 with the\n+OpenJDK Assembly Exception [2].\n+\n+[1] https://www.gnu.org/software/classpath/license.html\n+[2] http://openjdk.java.net/legal/assembly-exception.html\n+\n+SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+-->\n+\n+<!DOCTYPE suite SYSTEM \"cmdlinetester.dtd\">\n+\n+<suite id=\"-Xlog Tests\" timeout=\"60\">\n+<variable name=\"ENABLEXLOG\" value=\"-XX:-LegacyXlogOption\" />\n+\n+\t<test id=\"-Xlog\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog: -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:all\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:all -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:all=off\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:all=off -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"failure\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:any,gc\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:any,gc -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc,any\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc,any -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc,any=off\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc,any=off -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM007</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc:\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc: -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM007</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc:stderr\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc:stderr -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM007</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc:stderr\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc:stderr: -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM007</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc:stderr:any\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc:stderr:any -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc:stdout\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc:stdout -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc:gclog\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc:gclog -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"failure\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM007</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc:gclog check file\">\n+\t\t<command>cat gclog</command>\n+\t\t<output regex=\"no\" type=\"success\">verbosegc</output>\n+\t</test>\n+\n+\t<exec command=\"rm -f gclog\" />\n+\n+\t<test id=\"-Xlog:gc:gclog:\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc:gclog: -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"failure\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM007</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc:gclog: check file\">\n+\t\t<command>cat gclog</command>\n+\t\t<output regex=\"no\" type=\"success\">verbosegc</output>\n+\t</test>\n+\n+\t<exec command=\"rm -f gclog\" />\n+\n+\t<test id=\"-Xlog:gc:file=gclog\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc:file=gclog -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"failure\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM007</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc:file=gclog check file\">\n+\t\t<command>cat gclog</command>\n+\t\t<output regex=\"no\" type=\"success\">verbosegc</output>\n+\t</test>\n+\n+\t<exec command=\"rm -f gclog\" />\n+\n+\t<test id=\"-Xlog:gc=off\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc=off -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"failure\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:any+gc=off\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:any+gc=off -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"failure\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc+any=off\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc+any=off -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"failure\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc=off,any\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc=off,any -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"failure\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:any,gc=off\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:any,gc=off -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"failure\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:disable\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:disable -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"failure\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:disable:\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:disable: -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"success\">JVMJ9VM085E</output>\n+\t\t<output regex=\"no\" type=\"failure\">openjdk version</output>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA5MDc4Ng=="}, "originalCommit": {"oid": "7e7a239d84699a94f9074a7e2905563b8d7242d5"}, "originalPosition": 231}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDEzMzM1OQ==", "bodyText": "Pushed the fix.", "url": "https://github.com/eclipse-openj9/openj9/pull/11082#discussion_r520133359", "createdAt": "2020-11-09T21:31:56Z", "author": {"login": "pshipton"}, "path": "test/functional/cmdLineTests/xlogTests/xlog.xml", "diffHunk": "@@ -0,0 +1,251 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\" ?>\n+\n+<!--\n+Copyright (c) 2020, 2020 IBM Corp. and others\n+\n+This program and the accompanying materials are made available under\n+the terms of the Eclipse Public License 2.0 which accompanies this\n+distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+or the Apache License, Version 2.0 which accompanies this distribution and\n+is available at https://www.apache.org/licenses/LICENSE-2.0.\n+\n+This Source Code may also be made available under the following\n+Secondary Licenses when the conditions for such availability set\n+forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+General Public License, version 2 with the GNU Classpath\n+Exception [1] and GNU General Public License, version 2 with the\n+OpenJDK Assembly Exception [2].\n+\n+[1] https://www.gnu.org/software/classpath/license.html\n+[2] http://openjdk.java.net/legal/assembly-exception.html\n+\n+SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+-->\n+\n+<!DOCTYPE suite SYSTEM \"cmdlinetester.dtd\">\n+\n+<suite id=\"-Xlog Tests\" timeout=\"60\">\n+<variable name=\"ENABLEXLOG\" value=\"-XX:-LegacyXlogOption\" />\n+\n+\t<test id=\"-Xlog\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog: -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:all\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:all -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:all=off\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:all=off -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"failure\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:any,gc\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:any,gc -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc,any\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc,any -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc,any=off\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc,any=off -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM007</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc:\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc: -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM007</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc:stderr\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc:stderr -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM007</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc:stderr\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc:stderr: -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM007</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc:stderr:any\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc:stderr:any -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc:stdout\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc:stdout -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc:gclog\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc:gclog -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"failure\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM007</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc:gclog check file\">\n+\t\t<command>cat gclog</command>\n+\t\t<output regex=\"no\" type=\"success\">verbosegc</output>\n+\t</test>\n+\n+\t<exec command=\"rm -f gclog\" />\n+\n+\t<test id=\"-Xlog:gc:gclog:\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc:gclog: -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"failure\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM007</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc:gclog: check file\">\n+\t\t<command>cat gclog</command>\n+\t\t<output regex=\"no\" type=\"success\">verbosegc</output>\n+\t</test>\n+\n+\t<exec command=\"rm -f gclog\" />\n+\n+\t<test id=\"-Xlog:gc:file=gclog\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc:file=gclog -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"failure\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM007</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc:file=gclog check file\">\n+\t\t<command>cat gclog</command>\n+\t\t<output regex=\"no\" type=\"success\">verbosegc</output>\n+\t</test>\n+\n+\t<exec command=\"rm -f gclog\" />\n+\n+\t<test id=\"-Xlog:gc=off\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc=off -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"failure\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:any+gc=off\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:any+gc=off -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"failure\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc+any=off\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc+any=off -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"failure\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc=off,any\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc=off,any -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"failure\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:any,gc=off\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:any,gc=off -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"failure\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:disable\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:disable -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"failure\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:disable:\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:disable: -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"success\">JVMJ9VM085E</output>\n+\t\t<output regex=\"no\" type=\"failure\">openjdk version</output>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA5MDc4Ng=="}, "originalCommit": {"oid": "7e7a239d84699a94f9074a7e2905563b8d7242d5"}, "originalPosition": 231}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1065, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}