{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzMTY3MzE5", "number": 9853, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNTo0NDoxMVrOEIbIfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxOToyNjozN1rOEJzIXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MjY4NjA3OnYy", "diffSide": "RIGHT", "path": "runtime/oti/j9nonbuilder.h", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNTo0NDoxMVrOGoYJ0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNTo0NDoxMVrOGoYJ0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk5MTk1Mg==", "bodyText": "I'd prefer the sides of the & to be inverted here.", "url": "https://github.com/eclipse-openj9/openj9/pull/9853#discussion_r444991952", "createdAt": "2020-06-24T15:44:11Z", "author": {"login": "gacholio"}, "path": "runtime/oti/j9nonbuilder.h", "diffHunk": "@@ -1708,6 +1713,8 @@ typedef struct J9FlattenedClassCache {\n \n #define J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, index) (((J9FlattenedClassCacheEntry *)((flattenedClassCache) + 1)) + (index))\n #define J9_VM_FCC_ENTRY_FROM_CLASS(clazz, index) J9_VM_FCC_ENTRY_FROM_FCC((clazz)->flattenedClassCache, index)\n+#define J9_VM_FCC_CLASS_FROM_ENTRY(entry) ((J9Class *)(~J9_VM_FCC_CLASS_FLAGS_MASK & (UDATA)(entry)->clazz))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d7b53065bea8fe5196482d1812daa3c3b290294"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MjY4OTQxOnYy", "diffSide": "RIGHT", "path": "runtime/oti/j9nonbuilder.h", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNTo0NDo1OVrOGoYL9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNTo0NDo1OVrOGoYL9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk5MjUwMA==", "bodyText": "This could use the any/all bittest macros, and the inner mask is unnecessary (the static bit is necessarily a subset of all of the flag bits).", "url": "https://github.com/eclipse-openj9/openj9/pull/9853#discussion_r444992500", "createdAt": "2020-06-24T15:44:59Z", "author": {"login": "gacholio"}, "path": "runtime/oti/j9nonbuilder.h", "diffHunk": "@@ -1708,6 +1713,8 @@ typedef struct J9FlattenedClassCache {\n \n #define J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, index) (((J9FlattenedClassCacheEntry *)((flattenedClassCache) + 1)) + (index))\n #define J9_VM_FCC_ENTRY_FROM_CLASS(clazz, index) J9_VM_FCC_ENTRY_FROM_FCC((clazz)->flattenedClassCache, index)\n+#define J9_VM_FCC_CLASS_FROM_ENTRY(entry) ((J9Class *)(~J9_VM_FCC_CLASS_FLAGS_MASK & (UDATA)(entry)->clazz))\n+#define J9_VM_FCC_ENTRY_IS_STATIC_FIELD(entry) (J9_VM_FCC_CLASS_FLAGS_STATIC_FIELD == ((J9_VM_FCC_CLASS_FLAGS_MASK & ((UDATA)(entry)->clazz)) & J9_VM_FCC_CLASS_FLAGS_STATIC_FIELD))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d7b53065bea8fe5196482d1812daa3c3b290294"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MjY4OTk1OnYy", "diffSide": "RIGHT", "path": "runtime/oti/j9nonbuilder.h", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNTo0NTowOFrOGoYMUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNTo0NTowOFrOGoYMUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk5MjU5NA==", "bodyText": "Extra blank line", "url": "https://github.com/eclipse-openj9/openj9/pull/9853#discussion_r444992594", "createdAt": "2020-06-24T15:45:08Z", "author": {"login": "gacholio"}, "path": "runtime/oti/j9nonbuilder.h", "diffHunk": "@@ -1695,6 +1695,11 @@ typedef struct J9ModuleExtraInfo {\n  *                    |                       |                *\n  *      clazz N       |   Name & Signature N  |     offset N   *\n  ***************************************************************/\n+\n+#define J9_VM_FCC_CLASS_FLAGS_MASK ((UDATA) 0xFF)\n+#define J9_VM_FCC_CLASS_FLAGS_STATIC_FIELD ((UDATA)0x1)\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d7b53065bea8fe5196482d1812daa3c3b290294"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MjcwMDU1OnYy", "diffSide": "RIGHT", "path": "runtime/oti/vm_api.h", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNTo0NzozNVrOGoYS9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxOTozMjoyOVrOGqfMCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk5NDI5Mg==", "bodyText": "Extra line", "url": "https://github.com/eclipse-openj9/openj9/pull/9853#discussion_r444994292", "createdAt": "2020-06-24T15:47:35Z", "author": {"login": "gacholio"}, "path": "runtime/oti/vm_api.h", "diffHunk": "@@ -2251,6 +2280,18 @@ fieldOffsetsStartDo(J9JavaVM *vm, J9ROMClass *romClass, J9Class *superClazz, J9R\n fieldOffsetsStartDo(J9JavaVM *vm, J9ROMClass *romClass, J9Class *superClazz, J9ROMFieldOffsetWalkState *state, U_32 flags);\n #endif\n \n+/**\n+ * Initialize fields offsets into FCC\n+ *\n+ *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d7b53065bea8fe5196482d1812daa3c3b290294"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIwNDM2Mw==", "bodyText": "This still needs to be addressed.", "url": "https://github.com/eclipse-openj9/openj9/pull/9853#discussion_r447204363", "createdAt": "2020-06-29T19:32:29Z", "author": {"login": "gacholio"}, "path": "runtime/oti/vm_api.h", "diffHunk": "@@ -2251,6 +2280,18 @@ fieldOffsetsStartDo(J9JavaVM *vm, J9ROMClass *romClass, J9Class *superClazz, J9R\n fieldOffsetsStartDo(J9JavaVM *vm, J9ROMClass *romClass, J9Class *superClazz, J9ROMFieldOffsetWalkState *state, U_32 flags);\n #endif\n \n+/**\n+ * Initialize fields offsets into FCC\n+ *\n+ *", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk5NDI5Mg=="}, "originalCommit": {"oid": "9d7b53065bea8fe5196482d1812daa3c3b290294"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MjcwMzY1OnYy", "diffSide": "RIGHT", "path": "runtime/oti/vm_api.h", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNTo0ODoyMFrOGoYU8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNTo0ODoyMFrOGoYU8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk5NDgwMQ==", "bodyText": "non -> none", "url": "https://github.com/eclipse-openj9/openj9/pull/9853#discussion_r444994801", "createdAt": "2020-06-24T15:48:20Z", "author": {"login": "gacholio"}, "path": "runtime/oti/vm_api.h", "diffHunk": "@@ -2264,6 +2305,19 @@ fieldOffsetsStartDo(J9JavaVM *vm, J9ROMClass *romClass, J9Class *superClazz, J9R\n void\n defaultValueWithUnflattenedFlattenables(J9VMThread *currentThread, J9Class *clazz, j9object_t instance);\n \n+/**\n+ * Initialize static fields to default values when the class\n+ * contains flattenable statics. Currently non of the static fields are flattened.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d7b53065bea8fe5196482d1812daa3c3b290294"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MjcxNDE4OnYy", "diffSide": "RIGHT", "path": "runtime/vm/ClassInitialization.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNTo1MDo1M1rOGoYbyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNTo1MDo1M1rOGoYbyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk5NjU1Mw==", "bodyText": "If the types here are both void*, there's no need for the casting. Function could be a single line (if TRUE and FALSE aren't identical to the C comparison results, we're in trouble).", "url": "https://github.com/eclipse-openj9/openj9/pull/9853#discussion_r444996553", "createdAt": "2020-06-24T15:50:53Z", "author": {"login": "gacholio"}, "path": "runtime/vm/ClassInitialization.cpp", "diffHunk": "@@ -62,6 +62,33 @@ static char const *statusNames[] = {\n static j9object_t setInitStatus(J9VMThread *currentThread, J9Class *clazz, UDATA status, j9object_t initializationLock);\n static void classInitStateMachine(J9VMThread *currentThread, J9Class *clazz, J9ClassInitState desiredState);\n \n+#if defined(J9VM_OPT_VALHALLA_VALUE_TYPES)\n+static BOOLEAN\n+compareRAMClasses(void *item, J9StackElement *currentElement)\n+{\n+\tBOOLEAN rc = FALSE;\n+\n+\tif ((J9Class *)currentElement->element == (J9Class *)item) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d7b53065bea8fe5196482d1812daa3c3b290294"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MjgwNDg2OnYy", "diffSide": "RIGHT", "path": "runtime/vm/createramclass.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjoxMzoyMVrOGoZVhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjoxMzoyMVrOGoZVhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAxMTMzMg==", "bodyText": "0 ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9853#discussion_r445011332", "createdAt": "2020-06-24T16:13:21Z", "author": {"login": "gacholio"}, "path": "runtime/vm/createramclass.cpp", "diffHunk": "@@ -1464,6 +1464,22 @@ setCurrentExceptionForBadClass(J9VMThread *vmThread, J9UTF8 *badClassName, UDATA\n \tsetCurrentExceptionUTF(vmThread, exceptionIndex, errorMsg);\n \tj9mem_free_memory(errorMsg);\n }\n+static BOOLEAN\n+compareRomClassName(void *item, J9StackElement *currentElement)\n+{\n+\tJ9UTF8 *currentRomName;\n+\tBOOLEAN rc = FALSE;\n+\tJ9UTF8 *className = J9ROMCLASS_CLASSNAME((J9ROMClass *) item);\n+\n+\tcurrentRomName = J9ROMCLASS_CLASSNAME((J9ROMClass *) currentElement->element);\n+\tif (compareUTF8Length(J9UTF8_DATA(currentRomName), J9UTF8_LENGTH(currentRomName),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d7b53065bea8fe5196482d1812daa3c3b290294"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3Mjg4NTQzOnYy", "diffSide": "RIGHT", "path": "runtime/vm/ValueTypeHelpers.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjozNDo0NlrOGoaJDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjozNDo0NlrOGoaJDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAyNDUyNw==", "bodyText": "This code looks over-indented.", "url": "https://github.com/eclipse-openj9/openj9/pull/9853#discussion_r445024527", "createdAt": "2020-06-24T16:34:46Z", "author": {"login": "gacholio"}, "path": "runtime/vm/ValueTypeHelpers.cpp", "diffHunk": "@@ -28,34 +28,55 @@\n #include \"vm_api.h\"\n \n extern \"C\" {\n+\n+void\n+calculateFlattenedFieldAddresses(J9VMThread *currentThread, J9Class *clazz)\n+{\n+\tUDATA length = clazz->flattenedClassCache->numberOfEntries;\n+\n+\tfor (UDATA index = 0; index < length; index++) {\n+\t\tJ9FlattenedClassCacheEntry *entry = J9_VM_FCC_ENTRY_FROM_CLASS(clazz, index);\n+\t\tJ9Class *definingClass = NULL;\n+\t\tJ9ROMFieldShape *field = NULL;\n+\t\tJ9ROMFieldShape *entryField = entry->field;\n+\t\tJ9UTF8 *name = J9ROMFIELDSHAPE_NAME(entryField);\n+\t\tJ9UTF8 *signature = J9ROMFIELDSHAPE_SIGNATURE(entryField);\n+\n+\t\tif (J9_VM_FCC_ENTRY_IS_STATIC_FIELD(entry)) {\n+\t\t\tentry->offset = (UDATA) staticFieldAddress(currentThread, clazz, J9UTF8_DATA(name), J9UTF8_LENGTH(name), J9UTF8_DATA(signature), J9UTF8_LENGTH(signature), &definingClass, (UDATA *)&field, 0, clazz);\n+\t\t} else {\n+\t\t\tentry->offset = instanceFieldOffset(currentThread, clazz, J9UTF8_DATA(name), J9UTF8_LENGTH(name), J9UTF8_DATA(signature), J9UTF8_LENGTH(signature), &definingClass, (UDATA *)&field, 0);\n+\t\t}\n+\t\tAssert_VM_unequal(UDATA_MAX, entry->offset);\n+\t}\n+}\n+\n void\n defaultValueWithUnflattenedFlattenables(J9VMThread *currentThread, J9Class *clazz, j9object_t instance)\n {\n-        J9FlattenedClassCacheEntry * entry = NULL;\n-        J9Class * entryClazz = NULL;\n-        UDATA length = clazz->flattenedClassCache->numberOfEntries;\n-        UDATA const objectHeaderSize = J9VMTHREAD_OBJECT_HEADER_SIZE(currentThread);\n-        for (UDATA index = 0; index < length; index++) {\n-                entry = J9_VM_FCC_ENTRY_FROM_CLASS(clazz, index);\n-                entryClazz = entry->clazz;\n-                if (J9_ARE_NO_BITS_SET(J9ClassIsFlattened, entryClazz->classFlags)) {\n-                        if (entry->offset == UDATA_MAX) {\n-                                J9Class *definingClass = NULL;\n-                                J9ROMFieldShape *field = NULL;\n-                                J9ROMFieldShape *entryField = entry->field;\n-                                J9UTF8 *name = J9ROMFIELDSHAPE_NAME(entryField);\n-                                J9UTF8 *signature = J9ROMFIELDSHAPE_SIGNATURE(entryField);\n-                                entry->offset = instanceFieldOffset(currentThread, clazz, J9UTF8_DATA(name), J9UTF8_LENGTH(name), J9UTF8_DATA(signature), J9UTF8_LENGTH(signature), &definingClass, (UDATA *)&field, 0);\n-                                Assert_VM_notNull(field);\n-                        }\n-                        MM_ObjectAccessBarrierAPI objectAccessBarrier(currentThread);\n-                        objectAccessBarrier.inlineMixedObjectStoreObject(currentThread, \n-                                                                                instance, \n-                                                                                entry->offset + objectHeaderSize, \n-                                                                                entryClazz->flattenedClassCache->defaultValue, \n-                                                                                false);\n-                }\n-        }\n+\tJ9FlattenedClassCacheEntry * entry = NULL;\n+\tJ9Class * entryClazz = NULL;\n+\tUDATA length = clazz->flattenedClassCache->numberOfEntries;\n+\tUDATA const objectHeaderSize = J9VMTHREAD_OBJECT_HEADER_SIZE(currentThread);\n+\tfor (UDATA index = 0; index < length; index++) {\n+\t\t\tentry = J9_VM_FCC_ENTRY_FROM_CLASS(clazz, index);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d7b53065bea8fe5196482d1812daa3c3b290294"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3Mjg4NzQxOnYy", "diffSide": "RIGHT", "path": "runtime/vm/ValueTypeHelpers.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjozNToxOVrOGoaKUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjozNToxOVrOGoaKUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAyNDg1MQ==", "bodyText": "If you think there will be multiple static fields, might be worth moving this out of the loop.", "url": "https://github.com/eclipse-openj9/openj9/pull/9853#discussion_r445024851", "createdAt": "2020-06-24T16:35:19Z", "author": {"login": "gacholio"}, "path": "runtime/vm/ValueTypeHelpers.cpp", "diffHunk": "@@ -28,34 +28,55 @@\n #include \"vm_api.h\"\n \n extern \"C\" {\n+\n+void\n+calculateFlattenedFieldAddresses(J9VMThread *currentThread, J9Class *clazz)\n+{\n+\tUDATA length = clazz->flattenedClassCache->numberOfEntries;\n+\n+\tfor (UDATA index = 0; index < length; index++) {\n+\t\tJ9FlattenedClassCacheEntry *entry = J9_VM_FCC_ENTRY_FROM_CLASS(clazz, index);\n+\t\tJ9Class *definingClass = NULL;\n+\t\tJ9ROMFieldShape *field = NULL;\n+\t\tJ9ROMFieldShape *entryField = entry->field;\n+\t\tJ9UTF8 *name = J9ROMFIELDSHAPE_NAME(entryField);\n+\t\tJ9UTF8 *signature = J9ROMFIELDSHAPE_SIGNATURE(entryField);\n+\n+\t\tif (J9_VM_FCC_ENTRY_IS_STATIC_FIELD(entry)) {\n+\t\t\tentry->offset = (UDATA) staticFieldAddress(currentThread, clazz, J9UTF8_DATA(name), J9UTF8_LENGTH(name), J9UTF8_DATA(signature), J9UTF8_LENGTH(signature), &definingClass, (UDATA *)&field, 0, clazz);\n+\t\t} else {\n+\t\t\tentry->offset = instanceFieldOffset(currentThread, clazz, J9UTF8_DATA(name), J9UTF8_LENGTH(name), J9UTF8_DATA(signature), J9UTF8_LENGTH(signature), &definingClass, (UDATA *)&field, 0);\n+\t\t}\n+\t\tAssert_VM_unequal(UDATA_MAX, entry->offset);\n+\t}\n+}\n+\n void\n defaultValueWithUnflattenedFlattenables(J9VMThread *currentThread, J9Class *clazz, j9object_t instance)\n {\n-        J9FlattenedClassCacheEntry * entry = NULL;\n-        J9Class * entryClazz = NULL;\n-        UDATA length = clazz->flattenedClassCache->numberOfEntries;\n-        UDATA const objectHeaderSize = J9VMTHREAD_OBJECT_HEADER_SIZE(currentThread);\n-        for (UDATA index = 0; index < length; index++) {\n-                entry = J9_VM_FCC_ENTRY_FROM_CLASS(clazz, index);\n-                entryClazz = entry->clazz;\n-                if (J9_ARE_NO_BITS_SET(J9ClassIsFlattened, entryClazz->classFlags)) {\n-                        if (entry->offset == UDATA_MAX) {\n-                                J9Class *definingClass = NULL;\n-                                J9ROMFieldShape *field = NULL;\n-                                J9ROMFieldShape *entryField = entry->field;\n-                                J9UTF8 *name = J9ROMFIELDSHAPE_NAME(entryField);\n-                                J9UTF8 *signature = J9ROMFIELDSHAPE_SIGNATURE(entryField);\n-                                entry->offset = instanceFieldOffset(currentThread, clazz, J9UTF8_DATA(name), J9UTF8_LENGTH(name), J9UTF8_DATA(signature), J9UTF8_LENGTH(signature), &definingClass, (UDATA *)&field, 0);\n-                                Assert_VM_notNull(field);\n-                        }\n-                        MM_ObjectAccessBarrierAPI objectAccessBarrier(currentThread);\n-                        objectAccessBarrier.inlineMixedObjectStoreObject(currentThread, \n-                                                                                instance, \n-                                                                                entry->offset + objectHeaderSize, \n-                                                                                entryClazz->flattenedClassCache->defaultValue, \n-                                                                                false);\n-                }\n-        }\n+\tJ9FlattenedClassCacheEntry * entry = NULL;\n+\tJ9Class * entryClazz = NULL;\n+\tUDATA length = clazz->flattenedClassCache->numberOfEntries;\n+\tUDATA const objectHeaderSize = J9VMTHREAD_OBJECT_HEADER_SIZE(currentThread);\n+\tfor (UDATA index = 0; index < length; index++) {\n+\t\t\tentry = J9_VM_FCC_ENTRY_FROM_CLASS(clazz, index);\n+\t\t\tentryClazz = J9_VM_FCC_CLASS_FROM_ENTRY(entry);\n+\t\t\tif (!J9_VM_FCC_ENTRY_IS_STATIC_FIELD(entry) && J9_ARE_NO_BITS_SET(J9ClassIsFlattened, entryClazz->classFlags)) {\n+\t\t\t\tMM_ObjectAccessBarrierAPI objectAccessBarrier(currentThread);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d7b53065bea8fe5196482d1812daa3c3b290294"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3Mjg5ODg3OnYy", "diffSide": "RIGHT", "path": "runtime/vm/createramclass.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjozODozNVrOGoaR2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjozODozNVrOGoaR2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAyNjc3OA==", "bodyText": "classTableMutex isn't a good name for a boolean.", "url": "https://github.com/eclipse-openj9/openj9/pull/9853#discussion_r445026778", "createdAt": "2020-06-24T16:38:35Z", "author": {"login": "gacholio"}, "path": "runtime/vm/createramclass.cpp", "diffHunk": "@@ -1479,54 +1495,63 @@ static BOOLEAN\n verifyClassLoadingStack(J9VMThread *vmThread, J9ClassLoader *classLoader, J9ROMClass *romClass)\n {\n \tJ9JavaVM *javaVM = vmThread->javaVM;\n-\tJ9ClassLoadingStackElement *currentElement;\n-\tJ9ClassLoadingStackElement *newTopOfStack;\n-\tJ9UTF8 *className = J9ROMCLASS_CLASSNAME(romClass);\n+\treturn verifyLoadingOrLinkingStack(vmThread, classLoader, romClass, &vmThread->classLoadingStack, &compareRomClassName, javaVM->classLoadingMaxStack, javaVM->classLoadingStackPool, TRUE, TRUE);\n+}\n+\n+BOOLEAN\n+verifyLoadingOrLinkingStack(J9VMThread *vmThread, J9ClassLoader *classLoader, void *clazz, J9StackElement **stack, BOOLEAN (*comparator)(void *, J9StackElement *), UDATA maxStack, J9Pool *stackpool, BOOLEAN throwException, BOOLEAN classTableMutex)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d7b53065bea8fe5196482d1812daa3c3b290294"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MjkxNTc0OnYy", "diffSide": "RIGHT", "path": "runtime/vm/ClassInitialization.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo0MzowOVrOGoacqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo0MzowOVrOGoacqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAyOTU0NA==", "bodyText": "This can't GC, so it doesn't need to push/pop/currentclass code.", "url": "https://github.com/eclipse-openj9/openj9/pull/9853#discussion_r445029544", "createdAt": "2020-06-24T16:43:09Z", "author": {"login": "gacholio"}, "path": "runtime/vm/ClassInitialization.cpp", "diffHunk": "@@ -373,18 +400,80 @@ classInitStateMachine(J9VMThread *currentThread, J9Class *clazz, J9ClassInitStat\n \t\t\t\t}\n \n #if defined(J9VM_OPT_VALHALLA_VALUE_TYPES)\n-\t\t\t\t/* verify flattened fields */\n+\t\t\t\t/* verify flattenable fields */\n \t\t\t\tif (NULL != clazz->flattenedClassCache) {\n \t\t\t\t\tUDATA numberOfFlattenedFields = clazz->flattenedClassCache->numberOfEntries;\n \n+\t\t\t\t\tcalculateFlattenedFieldAddresses(currentThread, clazz);\n+\n \t\t\t\t\tfor (UDATA i = 0; i < numberOfFlattenedFields; i++) {\n \t\t\t\t\t\tJ9FlattenedClassCacheEntry *entry = J9_VM_FCC_ENTRY_FROM_CLASS(clazz, i);\n-\t\t\t\t\t\tTrc_VM_classInitStateMachine_verifyFlattenableField(currentThread, entry->clazz);\n+\t\t\t\t\t\tJ9Class *entryClazz = NULL;\n+\t\t\t\t\t\tbool isStatic = J9_VM_FCC_ENTRY_IS_STATIC_FIELD(entry);\n+\n+\t\t\t\t\t\tif (isStatic) {\n+\t\t\t\t\t\t\tJ9UTF8 *signature = J9ROMFIELDSHAPE_SIGNATURE(entry->field);\n+\t\t\t\t\t\t\tU_8 *signatureChars = J9UTF8_DATA(signature);\n+\n+\t\t\t\t\t\t\tPUSH_OBJECT_IN_SPECIAL_FRAME(currentThread, initializationLock);\n+\t\t\t\t\t\t\tJ9Class *valueClass = internalFindClassUTF8(currentThread, signatureChars + 1, J9UTF8_LENGTH(signature) - 2, clazz->classLoader, J9_FINDCLASS_FLAG_THROW_ON_FAIL);\n+\t\t\t\t\t\t\tinitializationLock = POP_OBJECT_IN_SPECIAL_FRAME(currentThread);\n+\t\t\t\t\t\t\tclazz = VM_VMHelpers::currentClass(clazz);\n+\t\t\t\t\t\t\tif (NULL == valueClass) {\n+\t\t\t\t\t\t\t\tinitializationLock = setInitStatus(currentThread, clazz, J9ClassInitUnverified, initializationLock);\n+\t\t\t\t\t\t\t\tclazz = VM_VMHelpers::currentClass(clazz);\n+\t\t\t\t\t\t\t\tgoto done;\n+\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\t/* need to check if it has access */\n+\t\t\t\t\t\t\tJ9ROMClass *valueROMClass = valueClass->romClass;\n+\t\t\t\t\t\t\tbool classIsPublic = J9_ARE_ALL_BITS_SET(valueROMClass->modifiers, J9AccPublic);\n+\n+\t\t\t\t\t\t\tif ((!classIsPublic && (clazz->packageID != valueClass->packageID))\n+\t\t\t\t\t\t\t\t|| (classIsPublic && (J9_VISIBILITY_ALLOWED != checkModuleAccess(currentThread, vm, clazz->romClass, clazz->module, valueROMClass, valueClass->module, valueClass->packageID, 0)))\n+\t\t\t\t\t\t\t) {\n+\t\t\t\t\t\t\t\tJ9UTF8 *romClassName = J9ROMCLASS_CLASSNAME(valueROMClass);\n+\t\t\t\t\t\t\t\tPUSH_OBJECT_IN_SPECIAL_FRAME(currentThread, initializationLock);\n+\t\t\t\t\t\t\t\tsetCurrentExceptionNLSWithArgs(currentThread, J9NLS_VM_CLASS_LOADING_ERROR_INVISIBLE_CLASS_OR_INTERFACE, J9VMCONSTANTPOOL_JAVALANGILLEGALACCESSERROR, J9UTF8_LENGTH(romClassName), J9UTF8_DATA(romClassName));\n+\t\t\t\t\t\t\t\tinitializationLock = POP_OBJECT_IN_SPECIAL_FRAME(currentThread);\n+\t\t\t\t\t\t\t\tclazz = VM_VMHelpers::currentClass(clazz);\n+\t\t\t\t\t\t\t\tinitializationLock = setInitStatus(currentThread, clazz, J9ClassInitUnverified, initializationLock);\n+\t\t\t\t\t\t\t\tclazz = VM_VMHelpers::currentClass(clazz);\n+\t\t\t\t\t\t\t\tgoto done;\n+\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\tentry->clazz = (J9Class *)((UDATA)valueClass | (UDATA)entry->clazz);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tentryClazz = J9_VM_FCC_CLASS_FROM_ENTRY(entry);\n+\n+\t\t\t\t\t\tif (isStatic) {\n+\t\t\t\t\t\t\tPUSH_OBJECT_IN_SPECIAL_FRAME(currentThread, initializationLock);\n+\t\t\t\t\t\t\tomrthread_monitor_enter(vm->valueTypeVerificationMutex);\n+\t\t\t\t\t\t\tBOOLEAN cycleDetected = checkForCyclicalVerification(currentThread, entryClazz->classLoader, entryClazz);\n+\t\t\t\t\t\t\tomrthread_monitor_enter(vm->valueTypeVerificationMutex);\n+\t\t\t\t\t\t\tinitializationLock = POP_OBJECT_IN_SPECIAL_FRAME(currentThread);\n+\t\t\t\t\t\t\tclazz = VM_VMHelpers::currentClass(clazz);\n+\t\t\t\t\t\t\tif (cycleDetected) {\n+\t\t\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tentryClazz = VM_VMHelpers::currentClass(entryClazz);\n+\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\tTrc_VM_classInitStateMachine_verifyFlattenableField(currentThread, entryClazz);\n \t\t\t\t\t\tPUSH_OBJECT_IN_SPECIAL_FRAME(currentThread, initializationLock);\n-\t\t\t\t\t\tclassInitStateMachine(currentThread, entry->clazz, J9_CLASS_INIT_VERIFIED);\n+\t\t\t\t\t\tclassInitStateMachine(currentThread, entryClazz, J9_CLASS_INIT_VERIFIED);\n \t\t\t\t\t\tinitializationLock = POP_OBJECT_IN_SPECIAL_FRAME(currentThread);\n \t\t\t\t\t\tclazz = VM_VMHelpers::currentClass(clazz);\n \n+\t\t\t\t\t\tif (isStatic) {\n+\t\t\t\t\t\t\tPUSH_OBJECT_IN_SPECIAL_FRAME(currentThread, initializationLock);\n+\t\t\t\t\t\t\tomrthread_monitor_enter(vm->valueTypeVerificationMutex);\n+\t\t\t\t\t\t\tpopFromVerificationStack(currentThread);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d7b53065bea8fe5196482d1812daa3c3b290294"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MjkyMDc5OnYy", "diffSide": "RIGHT", "path": "runtime/vm/ClassInitialization.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo0NDozMFrOGoaf0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo0NDozMFrOGoaf0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAzMDM1Mg==", "bodyText": "This can't GC, so doesn't need the push/pop/current protections.", "url": "https://github.com/eclipse-openj9/openj9/pull/9853#discussion_r445030352", "createdAt": "2020-06-24T16:44:30Z", "author": {"login": "gacholio"}, "path": "runtime/vm/ClassInitialization.cpp", "diffHunk": "@@ -373,18 +400,80 @@ classInitStateMachine(J9VMThread *currentThread, J9Class *clazz, J9ClassInitStat\n \t\t\t\t}\n \n #if defined(J9VM_OPT_VALHALLA_VALUE_TYPES)\n-\t\t\t\t/* verify flattened fields */\n+\t\t\t\t/* verify flattenable fields */\n \t\t\t\tif (NULL != clazz->flattenedClassCache) {\n \t\t\t\t\tUDATA numberOfFlattenedFields = clazz->flattenedClassCache->numberOfEntries;\n \n+\t\t\t\t\tcalculateFlattenedFieldAddresses(currentThread, clazz);\n+\n \t\t\t\t\tfor (UDATA i = 0; i < numberOfFlattenedFields; i++) {\n \t\t\t\t\t\tJ9FlattenedClassCacheEntry *entry = J9_VM_FCC_ENTRY_FROM_CLASS(clazz, i);\n-\t\t\t\t\t\tTrc_VM_classInitStateMachine_verifyFlattenableField(currentThread, entry->clazz);\n+\t\t\t\t\t\tJ9Class *entryClazz = NULL;\n+\t\t\t\t\t\tbool isStatic = J9_VM_FCC_ENTRY_IS_STATIC_FIELD(entry);\n+\n+\t\t\t\t\t\tif (isStatic) {\n+\t\t\t\t\t\t\tJ9UTF8 *signature = J9ROMFIELDSHAPE_SIGNATURE(entry->field);\n+\t\t\t\t\t\t\tU_8 *signatureChars = J9UTF8_DATA(signature);\n+\n+\t\t\t\t\t\t\tPUSH_OBJECT_IN_SPECIAL_FRAME(currentThread, initializationLock);\n+\t\t\t\t\t\t\tJ9Class *valueClass = internalFindClassUTF8(currentThread, signatureChars + 1, J9UTF8_LENGTH(signature) - 2, clazz->classLoader, J9_FINDCLASS_FLAG_THROW_ON_FAIL);\n+\t\t\t\t\t\t\tinitializationLock = POP_OBJECT_IN_SPECIAL_FRAME(currentThread);\n+\t\t\t\t\t\t\tclazz = VM_VMHelpers::currentClass(clazz);\n+\t\t\t\t\t\t\tif (NULL == valueClass) {\n+\t\t\t\t\t\t\t\tinitializationLock = setInitStatus(currentThread, clazz, J9ClassInitUnverified, initializationLock);\n+\t\t\t\t\t\t\t\tclazz = VM_VMHelpers::currentClass(clazz);\n+\t\t\t\t\t\t\t\tgoto done;\n+\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\t/* need to check if it has access */\n+\t\t\t\t\t\t\tJ9ROMClass *valueROMClass = valueClass->romClass;\n+\t\t\t\t\t\t\tbool classIsPublic = J9_ARE_ALL_BITS_SET(valueROMClass->modifiers, J9AccPublic);\n+\n+\t\t\t\t\t\t\tif ((!classIsPublic && (clazz->packageID != valueClass->packageID))\n+\t\t\t\t\t\t\t\t|| (classIsPublic && (J9_VISIBILITY_ALLOWED != checkModuleAccess(currentThread, vm, clazz->romClass, clazz->module, valueROMClass, valueClass->module, valueClass->packageID, 0)))\n+\t\t\t\t\t\t\t) {\n+\t\t\t\t\t\t\t\tJ9UTF8 *romClassName = J9ROMCLASS_CLASSNAME(valueROMClass);\n+\t\t\t\t\t\t\t\tPUSH_OBJECT_IN_SPECIAL_FRAME(currentThread, initializationLock);\n+\t\t\t\t\t\t\t\tsetCurrentExceptionNLSWithArgs(currentThread, J9NLS_VM_CLASS_LOADING_ERROR_INVISIBLE_CLASS_OR_INTERFACE, J9VMCONSTANTPOOL_JAVALANGILLEGALACCESSERROR, J9UTF8_LENGTH(romClassName), J9UTF8_DATA(romClassName));\n+\t\t\t\t\t\t\t\tinitializationLock = POP_OBJECT_IN_SPECIAL_FRAME(currentThread);\n+\t\t\t\t\t\t\t\tclazz = VM_VMHelpers::currentClass(clazz);\n+\t\t\t\t\t\t\t\tinitializationLock = setInitStatus(currentThread, clazz, J9ClassInitUnverified, initializationLock);\n+\t\t\t\t\t\t\t\tclazz = VM_VMHelpers::currentClass(clazz);\n+\t\t\t\t\t\t\t\tgoto done;\n+\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\tentry->clazz = (J9Class *)((UDATA)valueClass | (UDATA)entry->clazz);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tentryClazz = J9_VM_FCC_CLASS_FROM_ENTRY(entry);\n+\n+\t\t\t\t\t\tif (isStatic) {\n+\t\t\t\t\t\t\tPUSH_OBJECT_IN_SPECIAL_FRAME(currentThread, initializationLock);\n+\t\t\t\t\t\t\tomrthread_monitor_enter(vm->valueTypeVerificationMutex);\n+\t\t\t\t\t\t\tBOOLEAN cycleDetected = checkForCyclicalVerification(currentThread, entryClazz->classLoader, entryClazz);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d7b53065bea8fe5196482d1812daa3c3b290294"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MjkyMzE2OnYy", "diffSide": "RIGHT", "path": "runtime/vm/ClassInitialization.cpp", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo0NTowMlrOGoahLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxOToyODoxOFrOGqfDWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAzMDcwMg==", "bodyText": "Why is this not an error?", "url": "https://github.com/eclipse-openj9/openj9/pull/9853#discussion_r445030702", "createdAt": "2020-06-24T16:45:02Z", "author": {"login": "gacholio"}, "path": "runtime/vm/ClassInitialization.cpp", "diffHunk": "@@ -373,18 +400,80 @@ classInitStateMachine(J9VMThread *currentThread, J9Class *clazz, J9ClassInitStat\n \t\t\t\t}\n \n #if defined(J9VM_OPT_VALHALLA_VALUE_TYPES)\n-\t\t\t\t/* verify flattened fields */\n+\t\t\t\t/* verify flattenable fields */\n \t\t\t\tif (NULL != clazz->flattenedClassCache) {\n \t\t\t\t\tUDATA numberOfFlattenedFields = clazz->flattenedClassCache->numberOfEntries;\n \n+\t\t\t\t\tcalculateFlattenedFieldAddresses(currentThread, clazz);\n+\n \t\t\t\t\tfor (UDATA i = 0; i < numberOfFlattenedFields; i++) {\n \t\t\t\t\t\tJ9FlattenedClassCacheEntry *entry = J9_VM_FCC_ENTRY_FROM_CLASS(clazz, i);\n-\t\t\t\t\t\tTrc_VM_classInitStateMachine_verifyFlattenableField(currentThread, entry->clazz);\n+\t\t\t\t\t\tJ9Class *entryClazz = NULL;\n+\t\t\t\t\t\tbool isStatic = J9_VM_FCC_ENTRY_IS_STATIC_FIELD(entry);\n+\n+\t\t\t\t\t\tif (isStatic) {\n+\t\t\t\t\t\t\tJ9UTF8 *signature = J9ROMFIELDSHAPE_SIGNATURE(entry->field);\n+\t\t\t\t\t\t\tU_8 *signatureChars = J9UTF8_DATA(signature);\n+\n+\t\t\t\t\t\t\tPUSH_OBJECT_IN_SPECIAL_FRAME(currentThread, initializationLock);\n+\t\t\t\t\t\t\tJ9Class *valueClass = internalFindClassUTF8(currentThread, signatureChars + 1, J9UTF8_LENGTH(signature) - 2, clazz->classLoader, J9_FINDCLASS_FLAG_THROW_ON_FAIL);\n+\t\t\t\t\t\t\tinitializationLock = POP_OBJECT_IN_SPECIAL_FRAME(currentThread);\n+\t\t\t\t\t\t\tclazz = VM_VMHelpers::currentClass(clazz);\n+\t\t\t\t\t\t\tif (NULL == valueClass) {\n+\t\t\t\t\t\t\t\tinitializationLock = setInitStatus(currentThread, clazz, J9ClassInitUnverified, initializationLock);\n+\t\t\t\t\t\t\t\tclazz = VM_VMHelpers::currentClass(clazz);\n+\t\t\t\t\t\t\t\tgoto done;\n+\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\t/* need to check if it has access */\n+\t\t\t\t\t\t\tJ9ROMClass *valueROMClass = valueClass->romClass;\n+\t\t\t\t\t\t\tbool classIsPublic = J9_ARE_ALL_BITS_SET(valueROMClass->modifiers, J9AccPublic);\n+\n+\t\t\t\t\t\t\tif ((!classIsPublic && (clazz->packageID != valueClass->packageID))\n+\t\t\t\t\t\t\t\t|| (classIsPublic && (J9_VISIBILITY_ALLOWED != checkModuleAccess(currentThread, vm, clazz->romClass, clazz->module, valueROMClass, valueClass->module, valueClass->packageID, 0)))\n+\t\t\t\t\t\t\t) {\n+\t\t\t\t\t\t\t\tJ9UTF8 *romClassName = J9ROMCLASS_CLASSNAME(valueROMClass);\n+\t\t\t\t\t\t\t\tPUSH_OBJECT_IN_SPECIAL_FRAME(currentThread, initializationLock);\n+\t\t\t\t\t\t\t\tsetCurrentExceptionNLSWithArgs(currentThread, J9NLS_VM_CLASS_LOADING_ERROR_INVISIBLE_CLASS_OR_INTERFACE, J9VMCONSTANTPOOL_JAVALANGILLEGALACCESSERROR, J9UTF8_LENGTH(romClassName), J9UTF8_DATA(romClassName));\n+\t\t\t\t\t\t\t\tinitializationLock = POP_OBJECT_IN_SPECIAL_FRAME(currentThread);\n+\t\t\t\t\t\t\t\tclazz = VM_VMHelpers::currentClass(clazz);\n+\t\t\t\t\t\t\t\tinitializationLock = setInitStatus(currentThread, clazz, J9ClassInitUnverified, initializationLock);\n+\t\t\t\t\t\t\t\tclazz = VM_VMHelpers::currentClass(clazz);\n+\t\t\t\t\t\t\t\tgoto done;\n+\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\tentry->clazz = (J9Class *)((UDATA)valueClass | (UDATA)entry->clazz);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tentryClazz = J9_VM_FCC_CLASS_FROM_ENTRY(entry);\n+\n+\t\t\t\t\t\tif (isStatic) {\n+\t\t\t\t\t\t\tPUSH_OBJECT_IN_SPECIAL_FRAME(currentThread, initializationLock);\n+\t\t\t\t\t\t\tomrthread_monitor_enter(vm->valueTypeVerificationMutex);\n+\t\t\t\t\t\t\tBOOLEAN cycleDetected = checkForCyclicalVerification(currentThread, entryClazz->classLoader, entryClazz);\n+\t\t\t\t\t\t\tomrthread_monitor_enter(vm->valueTypeVerificationMutex);\n+\t\t\t\t\t\t\tinitializationLock = POP_OBJECT_IN_SPECIAL_FRAME(currentThread);\n+\t\t\t\t\t\t\tclazz = VM_VMHelpers::currentClass(clazz);\n+\t\t\t\t\t\t\tif (cycleDetected) {\n+\t\t\t\t\t\t\t\tcontinue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d7b53065bea8fe5196482d1812daa3c3b290294"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE4ODA5NA==", "bodyText": "Verification cycles are legal we are verifying static fields. We need to continue to make progress while avoiding the stack overflow", "url": "https://github.com/eclipse-openj9/openj9/pull/9853#discussion_r447188094", "createdAt": "2020-06-29T19:01:50Z", "author": {"login": "tajila"}, "path": "runtime/vm/ClassInitialization.cpp", "diffHunk": "@@ -373,18 +400,80 @@ classInitStateMachine(J9VMThread *currentThread, J9Class *clazz, J9ClassInitStat\n \t\t\t\t}\n \n #if defined(J9VM_OPT_VALHALLA_VALUE_TYPES)\n-\t\t\t\t/* verify flattened fields */\n+\t\t\t\t/* verify flattenable fields */\n \t\t\t\tif (NULL != clazz->flattenedClassCache) {\n \t\t\t\t\tUDATA numberOfFlattenedFields = clazz->flattenedClassCache->numberOfEntries;\n \n+\t\t\t\t\tcalculateFlattenedFieldAddresses(currentThread, clazz);\n+\n \t\t\t\t\tfor (UDATA i = 0; i < numberOfFlattenedFields; i++) {\n \t\t\t\t\t\tJ9FlattenedClassCacheEntry *entry = J9_VM_FCC_ENTRY_FROM_CLASS(clazz, i);\n-\t\t\t\t\t\tTrc_VM_classInitStateMachine_verifyFlattenableField(currentThread, entry->clazz);\n+\t\t\t\t\t\tJ9Class *entryClazz = NULL;\n+\t\t\t\t\t\tbool isStatic = J9_VM_FCC_ENTRY_IS_STATIC_FIELD(entry);\n+\n+\t\t\t\t\t\tif (isStatic) {\n+\t\t\t\t\t\t\tJ9UTF8 *signature = J9ROMFIELDSHAPE_SIGNATURE(entry->field);\n+\t\t\t\t\t\t\tU_8 *signatureChars = J9UTF8_DATA(signature);\n+\n+\t\t\t\t\t\t\tPUSH_OBJECT_IN_SPECIAL_FRAME(currentThread, initializationLock);\n+\t\t\t\t\t\t\tJ9Class *valueClass = internalFindClassUTF8(currentThread, signatureChars + 1, J9UTF8_LENGTH(signature) - 2, clazz->classLoader, J9_FINDCLASS_FLAG_THROW_ON_FAIL);\n+\t\t\t\t\t\t\tinitializationLock = POP_OBJECT_IN_SPECIAL_FRAME(currentThread);\n+\t\t\t\t\t\t\tclazz = VM_VMHelpers::currentClass(clazz);\n+\t\t\t\t\t\t\tif (NULL == valueClass) {\n+\t\t\t\t\t\t\t\tinitializationLock = setInitStatus(currentThread, clazz, J9ClassInitUnverified, initializationLock);\n+\t\t\t\t\t\t\t\tclazz = VM_VMHelpers::currentClass(clazz);\n+\t\t\t\t\t\t\t\tgoto done;\n+\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\t/* need to check if it has access */\n+\t\t\t\t\t\t\tJ9ROMClass *valueROMClass = valueClass->romClass;\n+\t\t\t\t\t\t\tbool classIsPublic = J9_ARE_ALL_BITS_SET(valueROMClass->modifiers, J9AccPublic);\n+\n+\t\t\t\t\t\t\tif ((!classIsPublic && (clazz->packageID != valueClass->packageID))\n+\t\t\t\t\t\t\t\t|| (classIsPublic && (J9_VISIBILITY_ALLOWED != checkModuleAccess(currentThread, vm, clazz->romClass, clazz->module, valueROMClass, valueClass->module, valueClass->packageID, 0)))\n+\t\t\t\t\t\t\t) {\n+\t\t\t\t\t\t\t\tJ9UTF8 *romClassName = J9ROMCLASS_CLASSNAME(valueROMClass);\n+\t\t\t\t\t\t\t\tPUSH_OBJECT_IN_SPECIAL_FRAME(currentThread, initializationLock);\n+\t\t\t\t\t\t\t\tsetCurrentExceptionNLSWithArgs(currentThread, J9NLS_VM_CLASS_LOADING_ERROR_INVISIBLE_CLASS_OR_INTERFACE, J9VMCONSTANTPOOL_JAVALANGILLEGALACCESSERROR, J9UTF8_LENGTH(romClassName), J9UTF8_DATA(romClassName));\n+\t\t\t\t\t\t\t\tinitializationLock = POP_OBJECT_IN_SPECIAL_FRAME(currentThread);\n+\t\t\t\t\t\t\t\tclazz = VM_VMHelpers::currentClass(clazz);\n+\t\t\t\t\t\t\t\tinitializationLock = setInitStatus(currentThread, clazz, J9ClassInitUnverified, initializationLock);\n+\t\t\t\t\t\t\t\tclazz = VM_VMHelpers::currentClass(clazz);\n+\t\t\t\t\t\t\t\tgoto done;\n+\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\tentry->clazz = (J9Class *)((UDATA)valueClass | (UDATA)entry->clazz);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tentryClazz = J9_VM_FCC_CLASS_FROM_ENTRY(entry);\n+\n+\t\t\t\t\t\tif (isStatic) {\n+\t\t\t\t\t\t\tPUSH_OBJECT_IN_SPECIAL_FRAME(currentThread, initializationLock);\n+\t\t\t\t\t\t\tomrthread_monitor_enter(vm->valueTypeVerificationMutex);\n+\t\t\t\t\t\t\tBOOLEAN cycleDetected = checkForCyclicalVerification(currentThread, entryClazz->classLoader, entryClazz);\n+\t\t\t\t\t\t\tomrthread_monitor_enter(vm->valueTypeVerificationMutex);\n+\t\t\t\t\t\t\tinitializationLock = POP_OBJECT_IN_SPECIAL_FRAME(currentThread);\n+\t\t\t\t\t\t\tclazz = VM_VMHelpers::currentClass(clazz);\n+\t\t\t\t\t\t\tif (cycleDetected) {\n+\t\t\t\t\t\t\t\tcontinue;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAzMDcwMg=="}, "originalCommit": {"oid": "9d7b53065bea8fe5196482d1812daa3c3b290294"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE4ODQ2Nw==", "bodyText": "ie\ninline class A { static B b;}\ninline class B {static A a;}", "url": "https://github.com/eclipse-openj9/openj9/pull/9853#discussion_r447188467", "createdAt": "2020-06-29T19:02:34Z", "author": {"login": "tajila"}, "path": "runtime/vm/ClassInitialization.cpp", "diffHunk": "@@ -373,18 +400,80 @@ classInitStateMachine(J9VMThread *currentThread, J9Class *clazz, J9ClassInitStat\n \t\t\t\t}\n \n #if defined(J9VM_OPT_VALHALLA_VALUE_TYPES)\n-\t\t\t\t/* verify flattened fields */\n+\t\t\t\t/* verify flattenable fields */\n \t\t\t\tif (NULL != clazz->flattenedClassCache) {\n \t\t\t\t\tUDATA numberOfFlattenedFields = clazz->flattenedClassCache->numberOfEntries;\n \n+\t\t\t\t\tcalculateFlattenedFieldAddresses(currentThread, clazz);\n+\n \t\t\t\t\tfor (UDATA i = 0; i < numberOfFlattenedFields; i++) {\n \t\t\t\t\t\tJ9FlattenedClassCacheEntry *entry = J9_VM_FCC_ENTRY_FROM_CLASS(clazz, i);\n-\t\t\t\t\t\tTrc_VM_classInitStateMachine_verifyFlattenableField(currentThread, entry->clazz);\n+\t\t\t\t\t\tJ9Class *entryClazz = NULL;\n+\t\t\t\t\t\tbool isStatic = J9_VM_FCC_ENTRY_IS_STATIC_FIELD(entry);\n+\n+\t\t\t\t\t\tif (isStatic) {\n+\t\t\t\t\t\t\tJ9UTF8 *signature = J9ROMFIELDSHAPE_SIGNATURE(entry->field);\n+\t\t\t\t\t\t\tU_8 *signatureChars = J9UTF8_DATA(signature);\n+\n+\t\t\t\t\t\t\tPUSH_OBJECT_IN_SPECIAL_FRAME(currentThread, initializationLock);\n+\t\t\t\t\t\t\tJ9Class *valueClass = internalFindClassUTF8(currentThread, signatureChars + 1, J9UTF8_LENGTH(signature) - 2, clazz->classLoader, J9_FINDCLASS_FLAG_THROW_ON_FAIL);\n+\t\t\t\t\t\t\tinitializationLock = POP_OBJECT_IN_SPECIAL_FRAME(currentThread);\n+\t\t\t\t\t\t\tclazz = VM_VMHelpers::currentClass(clazz);\n+\t\t\t\t\t\t\tif (NULL == valueClass) {\n+\t\t\t\t\t\t\t\tinitializationLock = setInitStatus(currentThread, clazz, J9ClassInitUnverified, initializationLock);\n+\t\t\t\t\t\t\t\tclazz = VM_VMHelpers::currentClass(clazz);\n+\t\t\t\t\t\t\t\tgoto done;\n+\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\t/* need to check if it has access */\n+\t\t\t\t\t\t\tJ9ROMClass *valueROMClass = valueClass->romClass;\n+\t\t\t\t\t\t\tbool classIsPublic = J9_ARE_ALL_BITS_SET(valueROMClass->modifiers, J9AccPublic);\n+\n+\t\t\t\t\t\t\tif ((!classIsPublic && (clazz->packageID != valueClass->packageID))\n+\t\t\t\t\t\t\t\t|| (classIsPublic && (J9_VISIBILITY_ALLOWED != checkModuleAccess(currentThread, vm, clazz->romClass, clazz->module, valueROMClass, valueClass->module, valueClass->packageID, 0)))\n+\t\t\t\t\t\t\t) {\n+\t\t\t\t\t\t\t\tJ9UTF8 *romClassName = J9ROMCLASS_CLASSNAME(valueROMClass);\n+\t\t\t\t\t\t\t\tPUSH_OBJECT_IN_SPECIAL_FRAME(currentThread, initializationLock);\n+\t\t\t\t\t\t\t\tsetCurrentExceptionNLSWithArgs(currentThread, J9NLS_VM_CLASS_LOADING_ERROR_INVISIBLE_CLASS_OR_INTERFACE, J9VMCONSTANTPOOL_JAVALANGILLEGALACCESSERROR, J9UTF8_LENGTH(romClassName), J9UTF8_DATA(romClassName));\n+\t\t\t\t\t\t\t\tinitializationLock = POP_OBJECT_IN_SPECIAL_FRAME(currentThread);\n+\t\t\t\t\t\t\t\tclazz = VM_VMHelpers::currentClass(clazz);\n+\t\t\t\t\t\t\t\tinitializationLock = setInitStatus(currentThread, clazz, J9ClassInitUnverified, initializationLock);\n+\t\t\t\t\t\t\t\tclazz = VM_VMHelpers::currentClass(clazz);\n+\t\t\t\t\t\t\t\tgoto done;\n+\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\tentry->clazz = (J9Class *)((UDATA)valueClass | (UDATA)entry->clazz);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tentryClazz = J9_VM_FCC_CLASS_FROM_ENTRY(entry);\n+\n+\t\t\t\t\t\tif (isStatic) {\n+\t\t\t\t\t\t\tPUSH_OBJECT_IN_SPECIAL_FRAME(currentThread, initializationLock);\n+\t\t\t\t\t\t\tomrthread_monitor_enter(vm->valueTypeVerificationMutex);\n+\t\t\t\t\t\t\tBOOLEAN cycleDetected = checkForCyclicalVerification(currentThread, entryClazz->classLoader, entryClazz);\n+\t\t\t\t\t\t\tomrthread_monitor_enter(vm->valueTypeVerificationMutex);\n+\t\t\t\t\t\t\tinitializationLock = POP_OBJECT_IN_SPECIAL_FRAME(currentThread);\n+\t\t\t\t\t\t\tclazz = VM_VMHelpers::currentClass(clazz);\n+\t\t\t\t\t\t\tif (cycleDetected) {\n+\t\t\t\t\t\t\t\tcontinue;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAzMDcwMg=="}, "originalCommit": {"oid": "9d7b53065bea8fe5196482d1812daa3c3b290294"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE5MjQwNQ==", "bodyText": "Right, I remember now.", "url": "https://github.com/eclipse-openj9/openj9/pull/9853#discussion_r447192405", "createdAt": "2020-06-29T19:09:58Z", "author": {"login": "gacholio"}, "path": "runtime/vm/ClassInitialization.cpp", "diffHunk": "@@ -373,18 +400,80 @@ classInitStateMachine(J9VMThread *currentThread, J9Class *clazz, J9ClassInitStat\n \t\t\t\t}\n \n #if defined(J9VM_OPT_VALHALLA_VALUE_TYPES)\n-\t\t\t\t/* verify flattened fields */\n+\t\t\t\t/* verify flattenable fields */\n \t\t\t\tif (NULL != clazz->flattenedClassCache) {\n \t\t\t\t\tUDATA numberOfFlattenedFields = clazz->flattenedClassCache->numberOfEntries;\n \n+\t\t\t\t\tcalculateFlattenedFieldAddresses(currentThread, clazz);\n+\n \t\t\t\t\tfor (UDATA i = 0; i < numberOfFlattenedFields; i++) {\n \t\t\t\t\t\tJ9FlattenedClassCacheEntry *entry = J9_VM_FCC_ENTRY_FROM_CLASS(clazz, i);\n-\t\t\t\t\t\tTrc_VM_classInitStateMachine_verifyFlattenableField(currentThread, entry->clazz);\n+\t\t\t\t\t\tJ9Class *entryClazz = NULL;\n+\t\t\t\t\t\tbool isStatic = J9_VM_FCC_ENTRY_IS_STATIC_FIELD(entry);\n+\n+\t\t\t\t\t\tif (isStatic) {\n+\t\t\t\t\t\t\tJ9UTF8 *signature = J9ROMFIELDSHAPE_SIGNATURE(entry->field);\n+\t\t\t\t\t\t\tU_8 *signatureChars = J9UTF8_DATA(signature);\n+\n+\t\t\t\t\t\t\tPUSH_OBJECT_IN_SPECIAL_FRAME(currentThread, initializationLock);\n+\t\t\t\t\t\t\tJ9Class *valueClass = internalFindClassUTF8(currentThread, signatureChars + 1, J9UTF8_LENGTH(signature) - 2, clazz->classLoader, J9_FINDCLASS_FLAG_THROW_ON_FAIL);\n+\t\t\t\t\t\t\tinitializationLock = POP_OBJECT_IN_SPECIAL_FRAME(currentThread);\n+\t\t\t\t\t\t\tclazz = VM_VMHelpers::currentClass(clazz);\n+\t\t\t\t\t\t\tif (NULL == valueClass) {\n+\t\t\t\t\t\t\t\tinitializationLock = setInitStatus(currentThread, clazz, J9ClassInitUnverified, initializationLock);\n+\t\t\t\t\t\t\t\tclazz = VM_VMHelpers::currentClass(clazz);\n+\t\t\t\t\t\t\t\tgoto done;\n+\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\t/* need to check if it has access */\n+\t\t\t\t\t\t\tJ9ROMClass *valueROMClass = valueClass->romClass;\n+\t\t\t\t\t\t\tbool classIsPublic = J9_ARE_ALL_BITS_SET(valueROMClass->modifiers, J9AccPublic);\n+\n+\t\t\t\t\t\t\tif ((!classIsPublic && (clazz->packageID != valueClass->packageID))\n+\t\t\t\t\t\t\t\t|| (classIsPublic && (J9_VISIBILITY_ALLOWED != checkModuleAccess(currentThread, vm, clazz->romClass, clazz->module, valueROMClass, valueClass->module, valueClass->packageID, 0)))\n+\t\t\t\t\t\t\t) {\n+\t\t\t\t\t\t\t\tJ9UTF8 *romClassName = J9ROMCLASS_CLASSNAME(valueROMClass);\n+\t\t\t\t\t\t\t\tPUSH_OBJECT_IN_SPECIAL_FRAME(currentThread, initializationLock);\n+\t\t\t\t\t\t\t\tsetCurrentExceptionNLSWithArgs(currentThread, J9NLS_VM_CLASS_LOADING_ERROR_INVISIBLE_CLASS_OR_INTERFACE, J9VMCONSTANTPOOL_JAVALANGILLEGALACCESSERROR, J9UTF8_LENGTH(romClassName), J9UTF8_DATA(romClassName));\n+\t\t\t\t\t\t\t\tinitializationLock = POP_OBJECT_IN_SPECIAL_FRAME(currentThread);\n+\t\t\t\t\t\t\t\tclazz = VM_VMHelpers::currentClass(clazz);\n+\t\t\t\t\t\t\t\tinitializationLock = setInitStatus(currentThread, clazz, J9ClassInitUnverified, initializationLock);\n+\t\t\t\t\t\t\t\tclazz = VM_VMHelpers::currentClass(clazz);\n+\t\t\t\t\t\t\t\tgoto done;\n+\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\tentry->clazz = (J9Class *)((UDATA)valueClass | (UDATA)entry->clazz);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tentryClazz = J9_VM_FCC_CLASS_FROM_ENTRY(entry);\n+\n+\t\t\t\t\t\tif (isStatic) {\n+\t\t\t\t\t\t\tPUSH_OBJECT_IN_SPECIAL_FRAME(currentThread, initializationLock);\n+\t\t\t\t\t\t\tomrthread_monitor_enter(vm->valueTypeVerificationMutex);\n+\t\t\t\t\t\t\tBOOLEAN cycleDetected = checkForCyclicalVerification(currentThread, entryClazz->classLoader, entryClazz);\n+\t\t\t\t\t\t\tomrthread_monitor_enter(vm->valueTypeVerificationMutex);\n+\t\t\t\t\t\t\tinitializationLock = POP_OBJECT_IN_SPECIAL_FRAME(currentThread);\n+\t\t\t\t\t\t\tclazz = VM_VMHelpers::currentClass(clazz);\n+\t\t\t\t\t\t\tif (cycleDetected) {\n+\t\t\t\t\t\t\t\tcontinue;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAzMDcwMg=="}, "originalCommit": {"oid": "9d7b53065bea8fe5196482d1812daa3c3b290294"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE5MzI3NQ==", "bodyText": "Please update the commit/PR comment with some of this detail.", "url": "https://github.com/eclipse-openj9/openj9/pull/9853#discussion_r447193275", "createdAt": "2020-06-29T19:11:43Z", "author": {"login": "gacholio"}, "path": "runtime/vm/ClassInitialization.cpp", "diffHunk": "@@ -373,18 +400,80 @@ classInitStateMachine(J9VMThread *currentThread, J9Class *clazz, J9ClassInitStat\n \t\t\t\t}\n \n #if defined(J9VM_OPT_VALHALLA_VALUE_TYPES)\n-\t\t\t\t/* verify flattened fields */\n+\t\t\t\t/* verify flattenable fields */\n \t\t\t\tif (NULL != clazz->flattenedClassCache) {\n \t\t\t\t\tUDATA numberOfFlattenedFields = clazz->flattenedClassCache->numberOfEntries;\n \n+\t\t\t\t\tcalculateFlattenedFieldAddresses(currentThread, clazz);\n+\n \t\t\t\t\tfor (UDATA i = 0; i < numberOfFlattenedFields; i++) {\n \t\t\t\t\t\tJ9FlattenedClassCacheEntry *entry = J9_VM_FCC_ENTRY_FROM_CLASS(clazz, i);\n-\t\t\t\t\t\tTrc_VM_classInitStateMachine_verifyFlattenableField(currentThread, entry->clazz);\n+\t\t\t\t\t\tJ9Class *entryClazz = NULL;\n+\t\t\t\t\t\tbool isStatic = J9_VM_FCC_ENTRY_IS_STATIC_FIELD(entry);\n+\n+\t\t\t\t\t\tif (isStatic) {\n+\t\t\t\t\t\t\tJ9UTF8 *signature = J9ROMFIELDSHAPE_SIGNATURE(entry->field);\n+\t\t\t\t\t\t\tU_8 *signatureChars = J9UTF8_DATA(signature);\n+\n+\t\t\t\t\t\t\tPUSH_OBJECT_IN_SPECIAL_FRAME(currentThread, initializationLock);\n+\t\t\t\t\t\t\tJ9Class *valueClass = internalFindClassUTF8(currentThread, signatureChars + 1, J9UTF8_LENGTH(signature) - 2, clazz->classLoader, J9_FINDCLASS_FLAG_THROW_ON_FAIL);\n+\t\t\t\t\t\t\tinitializationLock = POP_OBJECT_IN_SPECIAL_FRAME(currentThread);\n+\t\t\t\t\t\t\tclazz = VM_VMHelpers::currentClass(clazz);\n+\t\t\t\t\t\t\tif (NULL == valueClass) {\n+\t\t\t\t\t\t\t\tinitializationLock = setInitStatus(currentThread, clazz, J9ClassInitUnverified, initializationLock);\n+\t\t\t\t\t\t\t\tclazz = VM_VMHelpers::currentClass(clazz);\n+\t\t\t\t\t\t\t\tgoto done;\n+\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\t/* need to check if it has access */\n+\t\t\t\t\t\t\tJ9ROMClass *valueROMClass = valueClass->romClass;\n+\t\t\t\t\t\t\tbool classIsPublic = J9_ARE_ALL_BITS_SET(valueROMClass->modifiers, J9AccPublic);\n+\n+\t\t\t\t\t\t\tif ((!classIsPublic && (clazz->packageID != valueClass->packageID))\n+\t\t\t\t\t\t\t\t|| (classIsPublic && (J9_VISIBILITY_ALLOWED != checkModuleAccess(currentThread, vm, clazz->romClass, clazz->module, valueROMClass, valueClass->module, valueClass->packageID, 0)))\n+\t\t\t\t\t\t\t) {\n+\t\t\t\t\t\t\t\tJ9UTF8 *romClassName = J9ROMCLASS_CLASSNAME(valueROMClass);\n+\t\t\t\t\t\t\t\tPUSH_OBJECT_IN_SPECIAL_FRAME(currentThread, initializationLock);\n+\t\t\t\t\t\t\t\tsetCurrentExceptionNLSWithArgs(currentThread, J9NLS_VM_CLASS_LOADING_ERROR_INVISIBLE_CLASS_OR_INTERFACE, J9VMCONSTANTPOOL_JAVALANGILLEGALACCESSERROR, J9UTF8_LENGTH(romClassName), J9UTF8_DATA(romClassName));\n+\t\t\t\t\t\t\t\tinitializationLock = POP_OBJECT_IN_SPECIAL_FRAME(currentThread);\n+\t\t\t\t\t\t\t\tclazz = VM_VMHelpers::currentClass(clazz);\n+\t\t\t\t\t\t\t\tinitializationLock = setInitStatus(currentThread, clazz, J9ClassInitUnverified, initializationLock);\n+\t\t\t\t\t\t\t\tclazz = VM_VMHelpers::currentClass(clazz);\n+\t\t\t\t\t\t\t\tgoto done;\n+\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\tentry->clazz = (J9Class *)((UDATA)valueClass | (UDATA)entry->clazz);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tentryClazz = J9_VM_FCC_CLASS_FROM_ENTRY(entry);\n+\n+\t\t\t\t\t\tif (isStatic) {\n+\t\t\t\t\t\t\tPUSH_OBJECT_IN_SPECIAL_FRAME(currentThread, initializationLock);\n+\t\t\t\t\t\t\tomrthread_monitor_enter(vm->valueTypeVerificationMutex);\n+\t\t\t\t\t\t\tBOOLEAN cycleDetected = checkForCyclicalVerification(currentThread, entryClazz->classLoader, entryClazz);\n+\t\t\t\t\t\t\tomrthread_monitor_enter(vm->valueTypeVerificationMutex);\n+\t\t\t\t\t\t\tinitializationLock = POP_OBJECT_IN_SPECIAL_FRAME(currentThread);\n+\t\t\t\t\t\t\tclazz = VM_VMHelpers::currentClass(clazz);\n+\t\t\t\t\t\t\tif (cycleDetected) {\n+\t\t\t\t\t\t\t\tcontinue;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAzMDcwMg=="}, "originalCommit": {"oid": "9d7b53065bea8fe5196482d1812daa3c3b290294"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIwMjEzOA==", "bodyText": "And please add a simple comment  in the code to that effect.", "url": "https://github.com/eclipse-openj9/openj9/pull/9853#discussion_r447202138", "createdAt": "2020-06-29T19:28:18Z", "author": {"login": "gacholio"}, "path": "runtime/vm/ClassInitialization.cpp", "diffHunk": "@@ -373,18 +400,80 @@ classInitStateMachine(J9VMThread *currentThread, J9Class *clazz, J9ClassInitStat\n \t\t\t\t}\n \n #if defined(J9VM_OPT_VALHALLA_VALUE_TYPES)\n-\t\t\t\t/* verify flattened fields */\n+\t\t\t\t/* verify flattenable fields */\n \t\t\t\tif (NULL != clazz->flattenedClassCache) {\n \t\t\t\t\tUDATA numberOfFlattenedFields = clazz->flattenedClassCache->numberOfEntries;\n \n+\t\t\t\t\tcalculateFlattenedFieldAddresses(currentThread, clazz);\n+\n \t\t\t\t\tfor (UDATA i = 0; i < numberOfFlattenedFields; i++) {\n \t\t\t\t\t\tJ9FlattenedClassCacheEntry *entry = J9_VM_FCC_ENTRY_FROM_CLASS(clazz, i);\n-\t\t\t\t\t\tTrc_VM_classInitStateMachine_verifyFlattenableField(currentThread, entry->clazz);\n+\t\t\t\t\t\tJ9Class *entryClazz = NULL;\n+\t\t\t\t\t\tbool isStatic = J9_VM_FCC_ENTRY_IS_STATIC_FIELD(entry);\n+\n+\t\t\t\t\t\tif (isStatic) {\n+\t\t\t\t\t\t\tJ9UTF8 *signature = J9ROMFIELDSHAPE_SIGNATURE(entry->field);\n+\t\t\t\t\t\t\tU_8 *signatureChars = J9UTF8_DATA(signature);\n+\n+\t\t\t\t\t\t\tPUSH_OBJECT_IN_SPECIAL_FRAME(currentThread, initializationLock);\n+\t\t\t\t\t\t\tJ9Class *valueClass = internalFindClassUTF8(currentThread, signatureChars + 1, J9UTF8_LENGTH(signature) - 2, clazz->classLoader, J9_FINDCLASS_FLAG_THROW_ON_FAIL);\n+\t\t\t\t\t\t\tinitializationLock = POP_OBJECT_IN_SPECIAL_FRAME(currentThread);\n+\t\t\t\t\t\t\tclazz = VM_VMHelpers::currentClass(clazz);\n+\t\t\t\t\t\t\tif (NULL == valueClass) {\n+\t\t\t\t\t\t\t\tinitializationLock = setInitStatus(currentThread, clazz, J9ClassInitUnverified, initializationLock);\n+\t\t\t\t\t\t\t\tclazz = VM_VMHelpers::currentClass(clazz);\n+\t\t\t\t\t\t\t\tgoto done;\n+\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\t/* need to check if it has access */\n+\t\t\t\t\t\t\tJ9ROMClass *valueROMClass = valueClass->romClass;\n+\t\t\t\t\t\t\tbool classIsPublic = J9_ARE_ALL_BITS_SET(valueROMClass->modifiers, J9AccPublic);\n+\n+\t\t\t\t\t\t\tif ((!classIsPublic && (clazz->packageID != valueClass->packageID))\n+\t\t\t\t\t\t\t\t|| (classIsPublic && (J9_VISIBILITY_ALLOWED != checkModuleAccess(currentThread, vm, clazz->romClass, clazz->module, valueROMClass, valueClass->module, valueClass->packageID, 0)))\n+\t\t\t\t\t\t\t) {\n+\t\t\t\t\t\t\t\tJ9UTF8 *romClassName = J9ROMCLASS_CLASSNAME(valueROMClass);\n+\t\t\t\t\t\t\t\tPUSH_OBJECT_IN_SPECIAL_FRAME(currentThread, initializationLock);\n+\t\t\t\t\t\t\t\tsetCurrentExceptionNLSWithArgs(currentThread, J9NLS_VM_CLASS_LOADING_ERROR_INVISIBLE_CLASS_OR_INTERFACE, J9VMCONSTANTPOOL_JAVALANGILLEGALACCESSERROR, J9UTF8_LENGTH(romClassName), J9UTF8_DATA(romClassName));\n+\t\t\t\t\t\t\t\tinitializationLock = POP_OBJECT_IN_SPECIAL_FRAME(currentThread);\n+\t\t\t\t\t\t\t\tclazz = VM_VMHelpers::currentClass(clazz);\n+\t\t\t\t\t\t\t\tinitializationLock = setInitStatus(currentThread, clazz, J9ClassInitUnverified, initializationLock);\n+\t\t\t\t\t\t\t\tclazz = VM_VMHelpers::currentClass(clazz);\n+\t\t\t\t\t\t\t\tgoto done;\n+\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\tentry->clazz = (J9Class *)((UDATA)valueClass | (UDATA)entry->clazz);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tentryClazz = J9_VM_FCC_CLASS_FROM_ENTRY(entry);\n+\n+\t\t\t\t\t\tif (isStatic) {\n+\t\t\t\t\t\t\tPUSH_OBJECT_IN_SPECIAL_FRAME(currentThread, initializationLock);\n+\t\t\t\t\t\t\tomrthread_monitor_enter(vm->valueTypeVerificationMutex);\n+\t\t\t\t\t\t\tBOOLEAN cycleDetected = checkForCyclicalVerification(currentThread, entryClazz->classLoader, entryClazz);\n+\t\t\t\t\t\t\tomrthread_monitor_enter(vm->valueTypeVerificationMutex);\n+\t\t\t\t\t\t\tinitializationLock = POP_OBJECT_IN_SPECIAL_FRAME(currentThread);\n+\t\t\t\t\t\t\tclazz = VM_VMHelpers::currentClass(clazz);\n+\t\t\t\t\t\t\tif (cycleDetected) {\n+\t\t\t\t\t\t\t\tcontinue;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAzMDcwMg=="}, "originalCommit": {"oid": "9d7b53065bea8fe5196482d1812daa3c3b290294"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NzEwMzY0OnYy", "diffSide": "RIGHT", "path": "runtime/oti/vm_api.h", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxOToyNjozN1rOGqe_3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxOToyNjozN1rOGqe_3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIwMTI0Nw==", "bodyText": "Please update name to match the code.", "url": "https://github.com/eclipse-openj9/openj9/pull/9853#discussion_r447201247", "createdAt": "2020-06-29T19:26:37Z", "author": {"login": "gacholio"}, "path": "runtime/oti/vm_api.h", "diffHunk": "@@ -431,6 +431,35 @@ contendedLoadTableFree(J9JavaVM* vm);\n  */\n #define J9_CP_INDEX_NONE -1\n \n+/**\n+ * Checks stack to see if element exists, if not adds the new element and returns TRUE. Otherwise, returns FALSE\n+ *\n+ * @param vmThread vmthread token\n+ * @param classloader loader associated with current element\n+ * @param clazz either romclass or ramclass\n+ * @param stack the loading or linking stack\n+ * @param comparator handle to function that will compare elements\n+ * @param maxStack maximum concurrent classloads or class linkage\n+ * @param stackpool pool for stack elements\n+ * @param throwException flag to indicate if exception should be thrown in the case of cirularity\n+ * @param classTableMutex flag to indicate if class table mutex is being held", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b4a95570a6d0b4f71a9d6a4cf27b0a3e0b81977"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4998, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}