{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc0MzY0OTgy", "number": 10464, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMjo1MjozNlrOEc-Crg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMTowNjo0OVrOEdcENQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4ODEyMDc4OnYy", "diffSide": "RIGHT", "path": "jcl/src/java.base/share/classes/java/lang/Thread.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMjo1MjozNlrOHH2AWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMjo0NDozOVrOHIOmjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzk4NjkwNA==", "bodyText": "Please indent this line properly with this change.", "url": "https://github.com/eclipse-openj9/openj9/pull/10464#discussion_r477986904", "createdAt": "2020-08-27T02:52:36Z", "author": {"login": "gacholio"}, "path": "jcl/src/java.base/share/classes/java/lang/Thread.java", "diffHunk": "@@ -712,12 +712,12 @@ public void interrupt() {\n \t\tsun.nio.ch.Interruptible localBlockOn = blockOn;\n \t\tif (localBlockOn != null) {\n \t\t\tlocalBlockOn.interrupt(this);\n-        }\n-        /*[IF Java14]*/\n-        if (!isAlive()) {\n+\t\t}\n+\t\t/*[IF Java14]*/\n+\t\tif (threadRef == NO_REF) {\n \t\tdeadInterrupt = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d684bcc1a233e55070f93527913e02986b1c95ba"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzk5MTkxMA==", "bodyText": "I'm also still not convinced this is correct on 32-bit platforms - if there's no lock or volatile on the threadRef access, there is the possibility of tearing (may not actually be possible, depending how the macros work).", "url": "https://github.com/eclipse-openj9/openj9/pull/10464#discussion_r477991910", "createdAt": "2020-08-27T02:56:16Z", "author": {"login": "gacholio"}, "path": "jcl/src/java.base/share/classes/java/lang/Thread.java", "diffHunk": "@@ -712,12 +712,12 @@ public void interrupt() {\n \t\tsun.nio.ch.Interruptible localBlockOn = blockOn;\n \t\tif (localBlockOn != null) {\n \t\t\tlocalBlockOn.interrupt(this);\n-        }\n-        /*[IF Java14]*/\n-        if (!isAlive()) {\n+\t\t}\n+\t\t/*[IF Java14]*/\n+\t\tif (threadRef == NO_REF) {\n \t\tdeadInterrupt = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzk4NjkwNA=="}, "originalCommit": {"oid": "d684bcc1a233e55070f93527913e02986b1c95ba"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODEyMTUzMQ==", "bodyText": "Updated for the indentation.\n@pshipton,   do we still need to add volatile to threadRef to ensure the safety when accessing threadRef?", "url": "https://github.com/eclipse-openj9/openj9/pull/10464#discussion_r478121531", "createdAt": "2020-08-27T05:02:13Z", "author": {"login": "ChengJin01"}, "path": "jcl/src/java.base/share/classes/java/lang/Thread.java", "diffHunk": "@@ -712,12 +712,12 @@ public void interrupt() {\n \t\tsun.nio.ch.Interruptible localBlockOn = blockOn;\n \t\tif (localBlockOn != null) {\n \t\t\tlocalBlockOn.interrupt(this);\n-        }\n-        /*[IF Java14]*/\n-        if (!isAlive()) {\n+\t\t}\n+\t\t/*[IF Java14]*/\n+\t\tif (threadRef == NO_REF) {\n \t\tdeadInterrupt = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzk4NjkwNA=="}, "originalCommit": {"oid": "d684bcc1a233e55070f93527913e02986b1c95ba"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM4NjY3Ng==", "bodyText": "The code is inside synchronized(lock) which protects threadRef, this change doesn't require adding volatile.", "url": "https://github.com/eclipse-openj9/openj9/pull/10464#discussion_r478386676", "createdAt": "2020-08-27T12:39:27Z", "author": {"login": "pshipton"}, "path": "jcl/src/java.base/share/classes/java/lang/Thread.java", "diffHunk": "@@ -712,12 +712,12 @@ public void interrupt() {\n \t\tsun.nio.ch.Interruptible localBlockOn = blockOn;\n \t\tif (localBlockOn != null) {\n \t\t\tlocalBlockOn.interrupt(this);\n-        }\n-        /*[IF Java14]*/\n-        if (!isAlive()) {\n+\t\t}\n+\t\t/*[IF Java14]*/\n+\t\tif (threadRef == NO_REF) {\n \t\tdeadInterrupt = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzk4NjkwNA=="}, "originalCommit": {"oid": "d684bcc1a233e55070f93527913e02986b1c95ba"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM4NzMxNw==", "bodyText": "The original incorrect indentation made it look like the code wasn't inside the synchronized(lock), but it is.", "url": "https://github.com/eclipse-openj9/openj9/pull/10464#discussion_r478387317", "createdAt": "2020-08-27T12:40:31Z", "author": {"login": "pshipton"}, "path": "jcl/src/java.base/share/classes/java/lang/Thread.java", "diffHunk": "@@ -712,12 +712,12 @@ public void interrupt() {\n \t\tsun.nio.ch.Interruptible localBlockOn = blockOn;\n \t\tif (localBlockOn != null) {\n \t\t\tlocalBlockOn.interrupt(this);\n-        }\n-        /*[IF Java14]*/\n-        if (!isAlive()) {\n+\t\t}\n+\t\t/*[IF Java14]*/\n+\t\tif (threadRef == NO_REF) {\n \t\tdeadInterrupt = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzk4NjkwNA=="}, "originalCommit": {"oid": "d684bcc1a233e55070f93527913e02986b1c95ba"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM4OTkwMA==", "bodyText": "Similarly to the other change to check isAlive, there should be a comment that a method call is being avoided.", "url": "https://github.com/eclipse-openj9/openj9/pull/10464#discussion_r478389900", "createdAt": "2020-08-27T12:44:39Z", "author": {"login": "pshipton"}, "path": "jcl/src/java.base/share/classes/java/lang/Thread.java", "diffHunk": "@@ -712,12 +712,12 @@ public void interrupt() {\n \t\tsun.nio.ch.Interruptible localBlockOn = blockOn;\n \t\tif (localBlockOn != null) {\n \t\t\tlocalBlockOn.interrupt(this);\n-        }\n-        /*[IF Java14]*/\n-        if (!isAlive()) {\n+\t\t}\n+\t\t/*[IF Java14]*/\n+\t\tif (threadRef == NO_REF) {\n \t\tdeadInterrupt = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzk4NjkwNA=="}, "originalCommit": {"oid": "d684bcc1a233e55070f93527913e02986b1c95ba"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4ODEyNzA1OnYy", "diffSide": "RIGHT", "path": "jcl/src/java.base/share/classes/java/lang/Thread.java", "isResolved": true, "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMjo1MzoyNlrOHH2E1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNjo1MDoyOFrOHIY8YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzk4ODA1Mg==", "bodyText": "I don't think this does anything - since you already own the lock, calling isAlive is identical to this code, which might make this solution incorrect.", "url": "https://github.com/eclipse-openj9/openj9/pull/10464#discussion_r477988052", "createdAt": "2020-08-27T02:53:26Z", "author": {"login": "gacholio"}, "path": "jcl/src/java.base/share/classes/java/lang/Thread.java", "diffHunk": "@@ -810,7 +810,7 @@ public final boolean isDaemon() {\n public boolean isInterrupted() {\n \tsynchronized(lock) {\n \t\t/*[IF Java14]*/\n-\t\tif (!isAlive()) {\n+\t\tif (threadRef == NO_REF) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d684bcc1a233e55070f93527913e02986b1c95ba"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzk5ODEzNQ==", "bodyText": "I suspect this will work by chance - the fact that we only release VM access on certain operations (like method enter) might save us.", "url": "https://github.com/eclipse-openj9/openj9/pull/10464#discussion_r477998135", "createdAt": "2020-08-27T03:00:57Z", "author": {"login": "gacholio"}, "path": "jcl/src/java.base/share/classes/java/lang/Thread.java", "diffHunk": "@@ -810,7 +810,7 @@ public final boolean isDaemon() {\n public boolean isInterrupted() {\n \tsynchronized(lock) {\n \t\t/*[IF Java14]*/\n-\t\tif (!isAlive()) {\n+\t\tif (threadRef == NO_REF) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzk4ODA1Mg=="}, "originalCommit": {"oid": "d684bcc1a233e55070f93527913e02986b1c95ba"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM4NDY0OQ==", "bodyText": "We should add a comment that we are testing for isAlive without calling the method.", "url": "https://github.com/eclipse-openj9/openj9/pull/10464#discussion_r478384649", "createdAt": "2020-08-27T12:35:51Z", "author": {"login": "pshipton"}, "path": "jcl/src/java.base/share/classes/java/lang/Thread.java", "diffHunk": "@@ -810,7 +810,7 @@ public final boolean isDaemon() {\n public boolean isInterrupted() {\n \tsynchronized(lock) {\n \t\t/*[IF Java14]*/\n-\t\tif (!isAlive()) {\n+\t\tif (threadRef == NO_REF) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzk4ODA1Mg=="}, "originalCommit": {"oid": "d684bcc1a233e55070f93527913e02986b1c95ba"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM5MTU5Mw==", "bodyText": "If @gacholio isn't willing to accept this change with the addition of the comments, then the natives need to be modified to return and set deadInterrupt instead.", "url": "https://github.com/eclipse-openj9/openj9/pull/10464#discussion_r478391593", "createdAt": "2020-08-27T12:47:01Z", "author": {"login": "pshipton"}, "path": "jcl/src/java.base/share/classes/java/lang/Thread.java", "diffHunk": "@@ -810,7 +810,7 @@ public final boolean isDaemon() {\n public boolean isInterrupted() {\n \tsynchronized(lock) {\n \t\t/*[IF Java14]*/\n-\t\tif (!isAlive()) {\n+\t\tif (threadRef == NO_REF) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzk4ODA1Mg=="}, "originalCommit": {"oid": "d684bcc1a233e55070f93527913e02986b1c95ba"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM5MTc0MQ==", "bodyText": "Manually inlining the isAlive call here is very brittle.  There should be a detailed comment referencing isAlive & describing why we've manually inlined it here - namely to avoid anything that might check vmaccess", "url": "https://github.com/eclipse-openj9/openj9/pull/10464#discussion_r478391741", "createdAt": "2020-08-27T12:47:18Z", "author": {"login": "DanHeidinga"}, "path": "jcl/src/java.base/share/classes/java/lang/Thread.java", "diffHunk": "@@ -810,7 +810,7 @@ public final boolean isDaemon() {\n public boolean isInterrupted() {\n \tsynchronized(lock) {\n \t\t/*[IF Java14]*/\n-\t\tif (!isAlive()) {\n+\t\tif (threadRef == NO_REF) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzk4ODA1Mg=="}, "originalCommit": {"oid": "d684bcc1a233e55070f93527913e02986b1c95ba"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQyMzg4NQ==", "bodyText": "I'm not familiar with this code at all so forgive me if not a relevant suggestion, but wouldn't you also want a comment at isAlive to point at this code location, in case isAlive is ever updated with new semantics that would be also needed at this code location?", "url": "https://github.com/eclipse-openj9/openj9/pull/10464#discussion_r478423885", "createdAt": "2020-08-27T13:35:49Z", "author": {"login": "mstoodle"}, "path": "jcl/src/java.base/share/classes/java/lang/Thread.java", "diffHunk": "@@ -810,7 +810,7 @@ public final boolean isDaemon() {\n public boolean isInterrupted() {\n \tsynchronized(lock) {\n \t\t/*[IF Java14]*/\n-\t\tif (!isAlive()) {\n+\t\tif (threadRef == NO_REF) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzk4ODA1Mg=="}, "originalCommit": {"oid": "d684bcc1a233e55070f93527913e02986b1c95ba"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQ4MzA2NQ==", "bodyText": "@pshipton It's not a matter of me \"not accepting\" the change - it obviously does nothing other than avoiding a method enter/async check.", "url": "https://github.com/eclipse-openj9/openj9/pull/10464#discussion_r478483065", "createdAt": "2020-08-27T14:56:32Z", "author": {"login": "gacholio"}, "path": "jcl/src/java.base/share/classes/java/lang/Thread.java", "diffHunk": "@@ -810,7 +810,7 @@ public final boolean isDaemon() {\n public boolean isInterrupted() {\n \tsynchronized(lock) {\n \t\t/*[IF Java14]*/\n-\t\tif (!isAlive()) {\n+\t\tif (threadRef == NO_REF) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzk4ODA1Mg=="}, "originalCommit": {"oid": "d684bcc1a233e55070f93527913e02986b1c95ba"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQ5MjQwOQ==", "bodyText": "The VM will async check on any taken branch, which in this case means the check will occur if the thread is alive (the expected case). Even if this weren't the case, building this kind of knowledge into the java code is a terrible idea.", "url": "https://github.com/eclipse-openj9/openj9/pull/10464#discussion_r478492409", "createdAt": "2020-08-27T15:09:16Z", "author": {"login": "gacholio"}, "path": "jcl/src/java.base/share/classes/java/lang/Thread.java", "diffHunk": "@@ -810,7 +810,7 @@ public final boolean isDaemon() {\n public boolean isInterrupted() {\n \tsynchronized(lock) {\n \t\t/*[IF Java14]*/\n-\t\tif (!isAlive()) {\n+\t\tif (threadRef == NO_REF) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzk4ODA1Mg=="}, "originalCommit": {"oid": "d684bcc1a233e55070f93527913e02986b1c95ba"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU0MTU1NQ==", "bodyText": "ok, while the current code works and avoids the problems, it seems the consensus is to put the deadInterrupt code into the natives instead @ChengJin01", "url": "https://github.com/eclipse-openj9/openj9/pull/10464#discussion_r478541555", "createdAt": "2020-08-27T16:21:15Z", "author": {"login": "pshipton"}, "path": "jcl/src/java.base/share/classes/java/lang/Thread.java", "diffHunk": "@@ -810,7 +810,7 @@ public final boolean isDaemon() {\n public boolean isInterrupted() {\n \tsynchronized(lock) {\n \t\t/*[IF Java14]*/\n-\t\tif (!isAlive()) {\n+\t\tif (threadRef == NO_REF) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzk4ODA1Mg=="}, "originalCommit": {"oid": "d684bcc1a233e55070f93527913e02986b1c95ba"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU1MDU3MA==", "bodyText": "If you really believe this fixes anything, go ahead and commit it as-is. The issue of suspending a thread while it holds any thread lock is general - it will show up in an number of other methods. This essentially can't be fixed without moving all the locking code into the natives, which is a large amount of work.", "url": "https://github.com/eclipse-openj9/openj9/pull/10464#discussion_r478550570", "createdAt": "2020-08-27T16:35:55Z", "author": {"login": "gacholio"}, "path": "jcl/src/java.base/share/classes/java/lang/Thread.java", "diffHunk": "@@ -810,7 +810,7 @@ public final boolean isDaemon() {\n public boolean isInterrupted() {\n \tsynchronized(lock) {\n \t\t/*[IF Java14]*/\n-\t\tif (!isAlive()) {\n+\t\tif (threadRef == NO_REF) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzk4ODA1Mg=="}, "originalCommit": {"oid": "d684bcc1a233e55070f93527913e02986b1c95ba"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU1OTMyOQ==", "bodyText": "Getting rid of the async check from calling isAlive() does appear to fix the issues caused by #9341. This PR also removes #9907 which introduced another problem. However as you say, it's fragile to do this in the java code. It won't be hard to move the deadInterrupt boolean logic into the natives so it's not so fragile. We can defer moving all the locking code, as this is a long standing problem that nobody is requesting be fixed atm.", "url": "https://github.com/eclipse-openj9/openj9/pull/10464#discussion_r478559329", "createdAt": "2020-08-27T16:50:28Z", "author": {"login": "pshipton"}, "path": "jcl/src/java.base/share/classes/java/lang/Thread.java", "diffHunk": "@@ -810,7 +810,7 @@ public final boolean isDaemon() {\n public boolean isInterrupted() {\n \tsynchronized(lock) {\n \t\t/*[IF Java14]*/\n-\t\tif (!isAlive()) {\n+\t\tif (threadRef == NO_REF) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzk4ODA1Mg=="}, "originalCommit": {"oid": "d684bcc1a233e55070f93527913e02986b1c95ba"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5Mjc2OTUzOnYy", "diffSide": "RIGHT", "path": "runtime/jcl/common/thread.cpp", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMjo0MzoxMFrOHIjrkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMzoyNTo1MFrOHIkhoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODczNTI1MQ==", "bodyText": "We don't use static variables for this, there is a structure, however you can use the macro J9VMJAVALANGTHREAD_DEADINTERRUPT rather than using JNI, so the global ref/field id isn't required anyway.", "url": "https://github.com/eclipse-openj9/openj9/pull/10464#discussion_r478735251", "createdAt": "2020-08-27T22:43:10Z", "author": {"login": "pshipton"}, "path": "runtime/jcl/common/thread.cpp", "diffHunk": "@@ -280,15 +280,25 @@ Java_java_lang_Thread_interruptImpl(JNIEnv *env, jobject rcv)\n \tvmFuncs->internalEnterVMFromJNI(currentThread);\n \tj9object_t receiverObject = J9_JNI_UNWRAP_REFERENCE(rcv);\n \tJ9VMThread *targetThread = J9VMJAVALANGTHREAD_THREADREF(currentThread, receiverObject);\n-\tif (J9VMJAVALANGTHREAD_STARTED(currentThread, receiverObject)) {\n-\t\tif (NULL != targetThread) {\n+\tif (NULL != targetThread) {\n+\t\tif (J9VMJAVALANGTHREAD_STARTED(currentThread, receiverObject)) {\n \t\t\tvoid (*sidecarInterruptFunction)(J9VMThread*) = vm->sidecarInterruptFunction;\n \t\t\tif (NULL != sidecarInterruptFunction) {\n \t\t\t\tsidecarInterruptFunction(targetThread);\n \t\t\t}\n \t\t\tomrthread_interrupt(targetThread->osThread);\n \t\t}\n+\t} else if (J2SE_VERSION(vm) >= J2SE_V14) {\n+\t\tstatic jclass globalClassRef = (*env)->NewGlobalRef(env, (*env)->GetObjectClass(env, rcv));\n+\t\tstatic jfieldID fid = (*env)->GetFieldID(env, globalClassRef, \"deadInterrupt\", \"Z\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b2dad7b702158c330958fd49c67c58795ef3726"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODczNjIzMw==", "bodyText": "J9VMJAVALANGTHREAD_SET_DEADINTERRUPT I meant.", "url": "https://github.com/eclipse-openj9/openj9/pull/10464#discussion_r478736233", "createdAt": "2020-08-27T22:45:55Z", "author": {"login": "pshipton"}, "path": "runtime/jcl/common/thread.cpp", "diffHunk": "@@ -280,15 +280,25 @@ Java_java_lang_Thread_interruptImpl(JNIEnv *env, jobject rcv)\n \tvmFuncs->internalEnterVMFromJNI(currentThread);\n \tj9object_t receiverObject = J9_JNI_UNWRAP_REFERENCE(rcv);\n \tJ9VMThread *targetThread = J9VMJAVALANGTHREAD_THREADREF(currentThread, receiverObject);\n-\tif (J9VMJAVALANGTHREAD_STARTED(currentThread, receiverObject)) {\n-\t\tif (NULL != targetThread) {\n+\tif (NULL != targetThread) {\n+\t\tif (J9VMJAVALANGTHREAD_STARTED(currentThread, receiverObject)) {\n \t\t\tvoid (*sidecarInterruptFunction)(J9VMThread*) = vm->sidecarInterruptFunction;\n \t\t\tif (NULL != sidecarInterruptFunction) {\n \t\t\t\tsidecarInterruptFunction(targetThread);\n \t\t\t}\n \t\t\tomrthread_interrupt(targetThread->osThread);\n \t\t}\n+\t} else if (J2SE_VERSION(vm) >= J2SE_V14) {\n+\t\tstatic jclass globalClassRef = (*env)->NewGlobalRef(env, (*env)->GetObjectClass(env, rcv));\n+\t\tstatic jfieldID fid = (*env)->GetFieldID(env, globalClassRef, \"deadInterrupt\", \"Z\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODczNTI1MQ=="}, "originalCommit": {"oid": "1b2dad7b702158c330958fd49c67c58795ef3726"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc0OTA4OQ==", "bodyText": "Agreed and replaced with J9VMJAVALANGTHREAD_SET_DEADINTERRUPT.", "url": "https://github.com/eclipse-openj9/openj9/pull/10464#discussion_r478749089", "createdAt": "2020-08-27T23:25:50Z", "author": {"login": "ChengJin01"}, "path": "runtime/jcl/common/thread.cpp", "diffHunk": "@@ -280,15 +280,25 @@ Java_java_lang_Thread_interruptImpl(JNIEnv *env, jobject rcv)\n \tvmFuncs->internalEnterVMFromJNI(currentThread);\n \tj9object_t receiverObject = J9_JNI_UNWRAP_REFERENCE(rcv);\n \tJ9VMThread *targetThread = J9VMJAVALANGTHREAD_THREADREF(currentThread, receiverObject);\n-\tif (J9VMJAVALANGTHREAD_STARTED(currentThread, receiverObject)) {\n-\t\tif (NULL != targetThread) {\n+\tif (NULL != targetThread) {\n+\t\tif (J9VMJAVALANGTHREAD_STARTED(currentThread, receiverObject)) {\n \t\t\tvoid (*sidecarInterruptFunction)(J9VMThread*) = vm->sidecarInterruptFunction;\n \t\t\tif (NULL != sidecarInterruptFunction) {\n \t\t\t\tsidecarInterruptFunction(targetThread);\n \t\t\t}\n \t\t\tomrthread_interrupt(targetThread->osThread);\n \t\t}\n+\t} else if (J2SE_VERSION(vm) >= J2SE_V14) {\n+\t\tstatic jclass globalClassRef = (*env)->NewGlobalRef(env, (*env)->GetObjectClass(env, rcv));\n+\t\tstatic jfieldID fid = (*env)->GetFieldID(env, globalClassRef, \"deadInterrupt\", \"Z\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODczNTI1MQ=="}, "originalCommit": {"oid": "1b2dad7b702158c330958fd49c67c58795ef3726"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5Mjc3MzI5OnYy", "diffSide": "RIGHT", "path": "runtime/jcl/common/thread.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMjo0NDo0MVrOHIjtsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMzoyNjowOFrOHIkiAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODczNTc5NQ==", "bodyText": "This also needs to occur when J9VMJAVALANGTHREAD_STARTED is false.", "url": "https://github.com/eclipse-openj9/openj9/pull/10464#discussion_r478735795", "createdAt": "2020-08-27T22:44:41Z", "author": {"login": "pshipton"}, "path": "runtime/jcl/common/thread.cpp", "diffHunk": "@@ -280,15 +280,25 @@ Java_java_lang_Thread_interruptImpl(JNIEnv *env, jobject rcv)\n \tvmFuncs->internalEnterVMFromJNI(currentThread);\n \tj9object_t receiverObject = J9_JNI_UNWRAP_REFERENCE(rcv);\n \tJ9VMThread *targetThread = J9VMJAVALANGTHREAD_THREADREF(currentThread, receiverObject);\n-\tif (J9VMJAVALANGTHREAD_STARTED(currentThread, receiverObject)) {\n-\t\tif (NULL != targetThread) {\n+\tif (NULL != targetThread) {\n+\t\tif (J9VMJAVALANGTHREAD_STARTED(currentThread, receiverObject)) {\n \t\t\tvoid (*sidecarInterruptFunction)(J9VMThread*) = vm->sidecarInterruptFunction;\n \t\t\tif (NULL != sidecarInterruptFunction) {\n \t\t\t\tsidecarInterruptFunction(targetThread);\n \t\t\t}\n \t\t\tomrthread_interrupt(targetThread->osThread);\n \t\t}\n+\t} else if (J2SE_VERSION(vm) >= J2SE_V14) {\n+\t\tstatic jclass globalClassRef = (*env)->NewGlobalRef(env, (*env)->GetObjectClass(env, rcv));\n+\t\tstatic jfieldID fid = (*env)->GetFieldID(env, globalClassRef, \"deadInterrupt\", \"Z\");\n+\n+\t\tif (fid == NULL) {\n+\t\t\t(*env)->FatalError(env, \"Missing field\");\n+\t\t}\n+\t\t(*env)->SetBooleanField(env, rcv, fid, JNI_TRUE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b2dad7b702158c330958fd49c67c58795ef3726"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc0OTE4NQ==", "bodyText": "Fixed as suggested above.", "url": "https://github.com/eclipse-openj9/openj9/pull/10464#discussion_r478749185", "createdAt": "2020-08-27T23:26:08Z", "author": {"login": "ChengJin01"}, "path": "runtime/jcl/common/thread.cpp", "diffHunk": "@@ -280,15 +280,25 @@ Java_java_lang_Thread_interruptImpl(JNIEnv *env, jobject rcv)\n \tvmFuncs->internalEnterVMFromJNI(currentThread);\n \tj9object_t receiverObject = J9_JNI_UNWRAP_REFERENCE(rcv);\n \tJ9VMThread *targetThread = J9VMJAVALANGTHREAD_THREADREF(currentThread, receiverObject);\n-\tif (J9VMJAVALANGTHREAD_STARTED(currentThread, receiverObject)) {\n-\t\tif (NULL != targetThread) {\n+\tif (NULL != targetThread) {\n+\t\tif (J9VMJAVALANGTHREAD_STARTED(currentThread, receiverObject)) {\n \t\t\tvoid (*sidecarInterruptFunction)(J9VMThread*) = vm->sidecarInterruptFunction;\n \t\t\tif (NULL != sidecarInterruptFunction) {\n \t\t\t\tsidecarInterruptFunction(targetThread);\n \t\t\t}\n \t\t\tomrthread_interrupt(targetThread->osThread);\n \t\t}\n+\t} else if (J2SE_VERSION(vm) >= J2SE_V14) {\n+\t\tstatic jclass globalClassRef = (*env)->NewGlobalRef(env, (*env)->GetObjectClass(env, rcv));\n+\t\tstatic jfieldID fid = (*env)->GetFieldID(env, globalClassRef, \"deadInterrupt\", \"Z\");\n+\n+\t\tif (fid == NULL) {\n+\t\t\t(*env)->FatalError(env, \"Missing field\");\n+\t\t}\n+\t\t(*env)->SetBooleanField(env, rcv, fid, JNI_TRUE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODczNTc5NQ=="}, "originalCommit": {"oid": "1b2dad7b702158c330958fd49c67c58795ef3726"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5Mjc3NDE3OnYy", "diffSide": "RIGHT", "path": "runtime/oti/VMHelpers.hpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMjo0NTowMlrOHIjuNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMzoyNjoxMlrOHIkiDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODczNTkyNw==", "bodyText": "This also needs to occur when J9VMJAVALANGTHREAD_STARTED is false.", "url": "https://github.com/eclipse-openj9/openj9/pull/10464#discussion_r478735927", "createdAt": "2020-08-27T22:45:02Z", "author": {"login": "pshipton"}, "path": "runtime/oti/VMHelpers.hpp", "diffHunk": "@@ -1402,16 +1402,20 @@ class VM_VMHelpers\n \tstatic VMINLINE bool\n \tthreadIsInterruptedImpl(J9VMThread *currentThread, j9object_t threadObject)\n \t{\n+\t\tJ9VMThread *targetThread = J9VMJAVALANGTHREAD_THREADREF(currentThread, threadObject);\n \t\tbool result = false;\n+\t\t\n \t\t/* If the thread is alive, ask the OS thread.  Otherwise, answer false. */\n-\t\tif (J9VMJAVALANGTHREAD_STARTED(currentThread, threadObject)) {\n-\t\t\tJ9VMThread *targetThread = J9VMJAVALANGTHREAD_THREADREF(currentThread, threadObject);\n-\t\t\tif (NULL != targetThread) {\n-\t\t\t\tif (omrthread_interrupted(targetThread->osThread)) {\n-\t\t\t\t\tresult = true;\n-\t\t\t\t}\n+\t\tif (NULL != targetThread) {\n+\t\t\tif (J9VMJAVALANGTHREAD_STARTED(currentThread, threadObject)\n+\t\t\t&& omrthread_interrupted(targetThread->osThread)\n+\t\t\t) {\n+\t\t\t\tresult = true;\n \t\t\t}\n+\t\t} else {\n+\t\t\tresult = J9VMJAVALANGTHREAD_DEADINTERRUPT(currentThread, threadObject);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b2dad7b702158c330958fd49c67c58795ef3726"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc0OTE5Ng==", "bodyText": "Fixed as suggested above.", "url": "https://github.com/eclipse-openj9/openj9/pull/10464#discussion_r478749196", "createdAt": "2020-08-27T23:26:12Z", "author": {"login": "ChengJin01"}, "path": "runtime/oti/VMHelpers.hpp", "diffHunk": "@@ -1402,16 +1402,20 @@ class VM_VMHelpers\n \tstatic VMINLINE bool\n \tthreadIsInterruptedImpl(J9VMThread *currentThread, j9object_t threadObject)\n \t{\n+\t\tJ9VMThread *targetThread = J9VMJAVALANGTHREAD_THREADREF(currentThread, threadObject);\n \t\tbool result = false;\n+\t\t\n \t\t/* If the thread is alive, ask the OS thread.  Otherwise, answer false. */\n-\t\tif (J9VMJAVALANGTHREAD_STARTED(currentThread, threadObject)) {\n-\t\t\tJ9VMThread *targetThread = J9VMJAVALANGTHREAD_THREADREF(currentThread, threadObject);\n-\t\t\tif (NULL != targetThread) {\n-\t\t\t\tif (omrthread_interrupted(targetThread->osThread)) {\n-\t\t\t\t\tresult = true;\n-\t\t\t\t}\n+\t\tif (NULL != targetThread) {\n+\t\t\tif (J9VMJAVALANGTHREAD_STARTED(currentThread, threadObject)\n+\t\t\t&& omrthread_interrupted(targetThread->osThread)\n+\t\t\t) {\n+\t\t\t\tresult = true;\n \t\t\t}\n+\t\t} else {\n+\t\t\tresult = J9VMJAVALANGTHREAD_DEADINTERRUPT(currentThread, threadObject);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODczNTkyNw=="}, "originalCommit": {"oid": "1b2dad7b702158c330958fd49c67c58795ef3726"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MzAzMzgwOnYy", "diffSide": "RIGHT", "path": "runtime/jcl/common/thread.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMTowMzowNlrOHImGWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMTozMjoyOVrOHImjEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc3NDg3NQ==", "bodyText": "If && is used here, the code below doesn't need to be duplicated.", "url": "https://github.com/eclipse-openj9/openj9/pull/10464#discussion_r478774875", "createdAt": "2020-08-28T01:03:06Z", "author": {"login": "pshipton"}, "path": "runtime/jcl/common/thread.cpp", "diffHunk": "@@ -280,15 +280,20 @@ Java_java_lang_Thread_interruptImpl(JNIEnv *env, jobject rcv)\n \tvmFuncs->internalEnterVMFromJNI(currentThread);\n \tj9object_t receiverObject = J9_JNI_UNWRAP_REFERENCE(rcv);\n \tJ9VMThread *targetThread = J9VMJAVALANGTHREAD_THREADREF(currentThread, receiverObject);\n-\tif (J9VMJAVALANGTHREAD_STARTED(currentThread, receiverObject)) {\n-\t\tif (NULL != targetThread) {\n+\tif (NULL != targetThread) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71dc2a65385fb75d3bc26b70ef5dce56217ab03c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc4MjIyNw==", "bodyText": "Agreed and replaced with && (duplicated code removed).", "url": "https://github.com/eclipse-openj9/openj9/pull/10464#discussion_r478782227", "createdAt": "2020-08-28T01:32:29Z", "author": {"login": "ChengJin01"}, "path": "runtime/jcl/common/thread.cpp", "diffHunk": "@@ -280,15 +280,20 @@ Java_java_lang_Thread_interruptImpl(JNIEnv *env, jobject rcv)\n \tvmFuncs->internalEnterVMFromJNI(currentThread);\n \tj9object_t receiverObject = J9_JNI_UNWRAP_REFERENCE(rcv);\n \tJ9VMThread *targetThread = J9VMJAVALANGTHREAD_THREADREF(currentThread, receiverObject);\n-\tif (J9VMJAVALANGTHREAD_STARTED(currentThread, receiverObject)) {\n-\t\tif (NULL != targetThread) {\n+\tif (NULL != targetThread) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc3NDg3NQ=="}, "originalCommit": {"oid": "71dc2a65385fb75d3bc26b70ef5dce56217ab03c"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MzAzNjU1OnYy", "diffSide": "RIGHT", "path": "runtime/oti/VMHelpers.hpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMTowNDo1N1rOHImH9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMTozMzowOFrOHImj0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc3NTI4NQ==", "bodyText": "the jdk14 check is missing", "url": "https://github.com/eclipse-openj9/openj9/pull/10464#discussion_r478775285", "createdAt": "2020-08-28T01:04:57Z", "author": {"login": "pshipton"}, "path": "runtime/oti/VMHelpers.hpp", "diffHunk": "@@ -1402,16 +1402,22 @@ class VM_VMHelpers\n \tstatic VMINLINE bool\n \tthreadIsInterruptedImpl(J9VMThread *currentThread, j9object_t threadObject)\n \t{\n+\t\tJ9VMThread *targetThread = J9VMJAVALANGTHREAD_THREADREF(currentThread, threadObject);\n \t\tbool result = false;\n+\t\t\n \t\t/* If the thread is alive, ask the OS thread.  Otherwise, answer false. */\n-\t\tif (J9VMJAVALANGTHREAD_STARTED(currentThread, threadObject)) {\n-\t\t\tJ9VMThread *targetThread = J9VMJAVALANGTHREAD_THREADREF(currentThread, threadObject);\n-\t\t\tif (NULL != targetThread) {\n+\t\tif (NULL != targetThread) {\n+\t\t\tif (J9VMJAVALANGTHREAD_STARTED(currentThread, threadObject)) {\n \t\t\t\tif (omrthread_interrupted(targetThread->osThread)) {\n \t\t\t\t\tresult = true;\n \t\t\t\t}\n+\t\t\t} else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71dc2a65385fb75d3bc26b70ef5dce56217ab03c"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc4MjQxNw==", "bodyText": "Added #if JAVA_SPEC_VERSION >= 14.", "url": "https://github.com/eclipse-openj9/openj9/pull/10464#discussion_r478782417", "createdAt": "2020-08-28T01:33:08Z", "author": {"login": "ChengJin01"}, "path": "runtime/oti/VMHelpers.hpp", "diffHunk": "@@ -1402,16 +1402,22 @@ class VM_VMHelpers\n \tstatic VMINLINE bool\n \tthreadIsInterruptedImpl(J9VMThread *currentThread, j9object_t threadObject)\n \t{\n+\t\tJ9VMThread *targetThread = J9VMJAVALANGTHREAD_THREADREF(currentThread, threadObject);\n \t\tbool result = false;\n+\t\t\n \t\t/* If the thread is alive, ask the OS thread.  Otherwise, answer false. */\n-\t\tif (J9VMJAVALANGTHREAD_STARTED(currentThread, threadObject)) {\n-\t\t\tJ9VMThread *targetThread = J9VMJAVALANGTHREAD_THREADREF(currentThread, threadObject);\n-\t\t\tif (NULL != targetThread) {\n+\t\tif (NULL != targetThread) {\n+\t\t\tif (J9VMJAVALANGTHREAD_STARTED(currentThread, threadObject)) {\n \t\t\t\tif (omrthread_interrupted(targetThread->osThread)) {\n \t\t\t\t\tresult = true;\n \t\t\t\t}\n+\t\t\t} else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc3NTI4NQ=="}, "originalCommit": {"oid": "71dc2a65385fb75d3bc26b70ef5dce56217ab03c"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MzAzOTg5OnYy", "diffSide": "RIGHT", "path": "runtime/jcl/common/thread.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMTowNjo0OVrOHImJyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMTozMzozMFrOHImkOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc3NTc1NA==", "bodyText": "#if JAVA_SPEC_VERSION >= 14 can be used instead of a runtime check.", "url": "https://github.com/eclipse-openj9/openj9/pull/10464#discussion_r478775754", "createdAt": "2020-08-28T01:06:49Z", "author": {"login": "pshipton"}, "path": "runtime/jcl/common/thread.cpp", "diffHunk": "@@ -280,15 +280,20 @@ Java_java_lang_Thread_interruptImpl(JNIEnv *env, jobject rcv)\n \tvmFuncs->internalEnterVMFromJNI(currentThread);\n \tj9object_t receiverObject = J9_JNI_UNWRAP_REFERENCE(rcv);\n \tJ9VMThread *targetThread = J9VMJAVALANGTHREAD_THREADREF(currentThread, receiverObject);\n-\tif (J9VMJAVALANGTHREAD_STARTED(currentThread, receiverObject)) {\n-\t\tif (NULL != targetThread) {\n+\tif (NULL != targetThread) {\n+\t\tif (J9VMJAVALANGTHREAD_STARTED(currentThread, receiverObject)) {\n \t\t\tvoid (*sidecarInterruptFunction)(J9VMThread*) = vm->sidecarInterruptFunction;\n \t\t\tif (NULL != sidecarInterruptFunction) {\n \t\t\t\tsidecarInterruptFunction(targetThread);\n \t\t\t}\n \t\t\tomrthread_interrupt(targetThread->osThread);\n+\t\t} else if (J2SE_VERSION(vm) >= J2SE_V14) {\n+\t\t\tJ9VMJAVALANGTHREAD_SET_DEADINTERRUPT(currentThread, receiverObject, JNI_TRUE);\n \t\t}\n+\t} else if (J2SE_VERSION(vm) >= J2SE_V14) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71dc2a65385fb75d3bc26b70ef5dce56217ab03c"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc4MjUyMA==", "bodyText": "Replaced with #if JAVA_SPEC_VERSION >= 14 as suggested above.", "url": "https://github.com/eclipse-openj9/openj9/pull/10464#discussion_r478782520", "createdAt": "2020-08-28T01:33:30Z", "author": {"login": "ChengJin01"}, "path": "runtime/jcl/common/thread.cpp", "diffHunk": "@@ -280,15 +280,20 @@ Java_java_lang_Thread_interruptImpl(JNIEnv *env, jobject rcv)\n \tvmFuncs->internalEnterVMFromJNI(currentThread);\n \tj9object_t receiverObject = J9_JNI_UNWRAP_REFERENCE(rcv);\n \tJ9VMThread *targetThread = J9VMJAVALANGTHREAD_THREADREF(currentThread, receiverObject);\n-\tif (J9VMJAVALANGTHREAD_STARTED(currentThread, receiverObject)) {\n-\t\tif (NULL != targetThread) {\n+\tif (NULL != targetThread) {\n+\t\tif (J9VMJAVALANGTHREAD_STARTED(currentThread, receiverObject)) {\n \t\t\tvoid (*sidecarInterruptFunction)(J9VMThread*) = vm->sidecarInterruptFunction;\n \t\t\tif (NULL != sidecarInterruptFunction) {\n \t\t\t\tsidecarInterruptFunction(targetThread);\n \t\t\t}\n \t\t\tomrthread_interrupt(targetThread->osThread);\n+\t\t} else if (J2SE_VERSION(vm) >= J2SE_V14) {\n+\t\t\tJ9VMJAVALANGTHREAD_SET_DEADINTERRUPT(currentThread, receiverObject, JNI_TRUE);\n \t\t}\n+\t} else if (J2SE_VERSION(vm) >= J2SE_V14) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc3NTc1NA=="}, "originalCommit": {"oid": "71dc2a65385fb75d3bc26b70ef5dce56217ab03c"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4745, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}