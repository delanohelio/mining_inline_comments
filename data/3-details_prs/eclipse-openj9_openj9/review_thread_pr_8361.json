{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1NDc3NTEx", "number": 8361, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxODo1OTo1NVrODdF3lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxODo1OTo1NVrODdF3lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxODMxNDQ2OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/env/j9method.cpp", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxODo1OTo1NVrOFlfvgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNzozMToxOVrOFoSSsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg2MTY5Nw==", "bodyText": "Will this change work for JDK11 which has a third array which is of type IntHashSet[]? In the reset() method we call the clear() API if the array index is non-null [2]. This means if we are not zero initializing the array, then it could have garbage data in there and we would try to call the clear() method on a garbage object.\n[1] https://github.com/ibmruntimes/openj9-openjdk-jdk11/blob/c9bd6c8ae0bee2fb301c6af09cb7a23099f4cd16/src/java.base/share/classes/java/util/regex/Matcher.java#L250\n[2] https://github.com/ibmruntimes/openj9-openjdk-jdk11/blob/c9bd6c8ae0bee2fb301c6af09cb7a23099f4cd16/src/java.base/share/classes/java/util/regex/Matcher.java#L410-L413", "url": "https://github.com/eclipse-openj9/openj9/pull/8361#discussion_r374861697", "createdAt": "2020-02-04T18:59:55Z", "author": {"login": "fjeremic"}, "path": "runtime/compiler/env/j9method.cpp", "diffHunk": "@@ -4166,6 +4166,13 @@ void TR_ResolvedJ9Method::construct()\n       {  TR::unknownMethod},\n       };\n \n+   static X JavaUtilRegexMatcherMethods [] =\n+      {\n+      {x(TR::java_util_regex_Matcher_init, \"<init>\", \"(Ljava/util/regex/Pattern;Ljava/lang/CharSequence;)V\")},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "107bac52ba6268d99aebf84f8dc85ec716c7eb8a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg2NjEzNA==", "bodyText": "More generally, how do ensure that future changes to JCL methods will not break us? What happens when for example in JDK22 a new array gets introduced in this type and the author expects it to be zero initialized?\nThis seems like something that the JIT should be deducing, at least for non-OpenJ9 JCL methods, otherwise we are just waiting for silent bugs to be introduced.", "url": "https://github.com/eclipse-openj9/openj9/pull/8361#discussion_r374866134", "createdAt": "2020-02-04T19:08:54Z", "author": {"login": "fjeremic"}, "path": "runtime/compiler/env/j9method.cpp", "diffHunk": "@@ -4166,6 +4166,13 @@ void TR_ResolvedJ9Method::construct()\n       {  TR::unknownMethod},\n       };\n \n+   static X JavaUtilRegexMatcherMethods [] =\n+      {\n+      {x(TR::java_util_regex_Matcher_init, \"<init>\", \"(Ljava/util/regex/Pattern;Ljava/lang/CharSequence;)V\")},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg2MTY5Nw=="}, "originalCommit": {"oid": "107bac52ba6268d99aebf84f8dc85ec716c7eb8a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQxNDgxOA==", "bodyText": "It isn't possible to deduce this programattically when values are in fields and potentially accessed on multiple threads using a local anlaysis - whitelisting is the only option. There is a risk form future JCL change, but this method is not unlike many other core JCL methods that need special handling.\nThanks for pointing out the extra array in JDK11 - given that it is a reference array - those do not support zero init skipping -the option only affects primitives which is why the testing works and the optimization works in general. I believe there are also other methods relying on this behavior.", "url": "https://github.com/eclipse-openj9/openj9/pull/8361#discussion_r376414818", "createdAt": "2020-02-07T14:22:36Z", "author": {"login": "andrewcraik"}, "path": "runtime/compiler/env/j9method.cpp", "diffHunk": "@@ -4166,6 +4166,13 @@ void TR_ResolvedJ9Method::construct()\n       {  TR::unknownMethod},\n       };\n \n+   static X JavaUtilRegexMatcherMethods [] =\n+      {\n+      {x(TR::java_util_regex_Matcher_init, \"<init>\", \"(Ljava/util/regex/Pattern;Ljava/lang/CharSequence;)V\")},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg2MTY5Nw=="}, "originalCommit": {"oid": "107bac52ba6268d99aebf84f8dc85ec716c7eb8a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUxMDI1Mg==", "bodyText": "Thanks for pointing out the extra array in JDK11 - given that it is a reference array - those do not support zero init skipping -the option only affects primitives which is why the testing works and the optimization works in general.\n\nJust to clarify explicitly, we only allow skip zero initialization on primitive arrays? Could you point to the code where this check happens for future reference? I did not know we had this restriction, but happy that we do.", "url": "https://github.com/eclipse-openj9/openj9/pull/8361#discussion_r376510252", "createdAt": "2020-02-07T17:21:09Z", "author": {"login": "fjeremic"}, "path": "runtime/compiler/env/j9method.cpp", "diffHunk": "@@ -4166,6 +4166,13 @@ void TR_ResolvedJ9Method::construct()\n       {  TR::unknownMethod},\n       };\n \n+   static X JavaUtilRegexMatcherMethods [] =\n+      {\n+      {x(TR::java_util_regex_Matcher_init, \"<init>\", \"(Ljava/util/regex/Pattern;Ljava/lang/CharSequence;)V\")},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg2MTY5Nw=="}, "originalCommit": {"oid": "107bac52ba6268d99aebf84f8dc85ec716c7eb8a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc4NzA1OA==", "bodyText": "Dug it up:\nhttps://github.com/eclipse/openj9/blob/c0ec632cad6b4408118467b2542e762efd7fa5e0/runtime/compiler/ilgen/Walker.cpp#L5980-L5981\nThis is where we check if the method symbol has been marked for the JIT to allow skipping zero initialization. It is used when new (primitive) arrays are created during ILGen. The above concern is no longer valid.", "url": "https://github.com/eclipse-openj9/openj9/pull/8361#discussion_r377787058", "createdAt": "2020-02-11T17:31:19Z", "author": {"login": "fjeremic"}, "path": "runtime/compiler/env/j9method.cpp", "diffHunk": "@@ -4166,6 +4166,13 @@ void TR_ResolvedJ9Method::construct()\n       {  TR::unknownMethod},\n       };\n \n+   static X JavaUtilRegexMatcherMethods [] =\n+      {\n+      {x(TR::java_util_regex_Matcher_init, \"<init>\", \"(Ljava/util/regex/Pattern;Ljava/lang/CharSequence;)V\")},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg2MTY5Nw=="}, "originalCommit": {"oid": "107bac52ba6268d99aebf84f8dc85ec716c7eb8a"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 777, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}