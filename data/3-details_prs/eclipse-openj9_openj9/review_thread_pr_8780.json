{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1MDA2NjU3", "number": 8780, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMjo0MzoxNlrOD0eFfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMjo0MzoxNlrOD0eFfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MzQ1NDY5OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/optimizer/J9ValuePropagation.cpp", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMjo0MzoxNlrOGJbiBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNDo0NjozM1rOGJ6bsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU0MTQ0NA==", "bodyText": "Can we get here since we are presumably dealing with a char ? If so, maybe targetChar should be declared as 32-bit ?", "url": "https://github.com/eclipse-openj9/openj9/pull/8780#discussion_r412541444", "createdAt": "2020-04-21T22:43:16Z", "author": {"login": "vijaysun-omr"}, "path": "runtime/compiler/optimizer/J9ValuePropagation.cpp", "diffHunk": "@@ -250,6 +261,228 @@ J9::ValuePropagation::isKnownStringObject(TR::VPConstraint *constraint)\n           && (constraint->isConstString() || constraint->getKnownObject());\n    }\n \n+bool J9::ValuePropagation::transformIndexOfKnownString(\n+   TR::Node *indexOfNode,\n+   TR::Node *sourceStringNode,\n+   TR::Node *targetCharNode,\n+   TR::Node *startNode,\n+   TR::Node *lengthNode,\n+   bool is16Bit)\n+   {\n+   // Keep track of whether or not all constraints are global.\n+   bool isGlobal = true;\n+   bool isGlobalQuery;\n+\n+   TR::VPConstraint *sourceConstraint = getConstraint(sourceStringNode, isGlobalQuery);\n+   isGlobal &= isGlobalQuery;\n+   if (!sourceConstraint)\n+      return false;\n+   TR::VPKnownObject *knownObject = sourceConstraint->getKnownObject();\n+   // The source string must either be a KnownObject or a ConstString.\n+   // Otherwise, do not attempt transformations.\n+   if (!knownObject && !sourceConstraint->isConstString())\n+      return false;\n+   TR::KnownObjectTable *knot;\n+   if (knownObject)\n+      {\n+      knot = comp()->getOrCreateKnownObjectTable();\n+      if (!knot)\n+         return false;\n+      TR_OpaqueClassBlock *klazz = knownObject->getClass();\n+      if (!comp()->fej9()->isPrimitiveArray(klazz))\n+         return false;\n+      }\n+\n+   TR::VPConstraint *targetConstraint = getConstraint(targetCharNode, isGlobal) ;\n+   bool targetIsConstChar = false;\n+   uint16_t targetChar = -1;\n+   if (!targetConstraint)\n+      {\n+      targetIsConstChar = false;\n+      }\n+   else if (targetConstraint->asIntConst())\n+      {\n+      targetIsConstChar = true;\n+      targetChar = targetConstraint->asIntConst()->getInt();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b8aab7f5aaeaedeab5aa959f4420c150043bcdc"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA0NzczMA==", "bodyText": "I tried adding some logging and it looks like we are getting there.\nFor a call like \"abcde\".indexOf('a'), the trees look like this:\nn5n         icall  java/lang/String.indexOf(I)I[#361  final virtual Method -200] [flags 0x20500 0x0 ]  [0x7f0d05419490] bci=[-1,4,92] rc=2 vc=9 vn=- li=- udi=- nc=2\nn3n           aload  <string \"abcde\">[#358  Static] (obj1) [flags 0x80000307 0x0 ]            [0x7f0d054193f0] bci=[-1,0,92] rc=1 vc=8 vn=- li=- udi=- nc=0\nn4n           iconst 97                                                                       [0x7f0d05419440] bci=[-1,2,92] rc=1 vc=8 vn=- li=- udi=- nc=0\n\nI think because the 'a' becomes an iconst, the constraint is an integer type.\nI will change targetChar to 32-bit.", "url": "https://github.com/eclipse-openj9/openj9/pull/8780#discussion_r413047730", "createdAt": "2020-04-22T14:46:33Z", "author": {"login": "rpshukla"}, "path": "runtime/compiler/optimizer/J9ValuePropagation.cpp", "diffHunk": "@@ -250,6 +261,228 @@ J9::ValuePropagation::isKnownStringObject(TR::VPConstraint *constraint)\n           && (constraint->isConstString() || constraint->getKnownObject());\n    }\n \n+bool J9::ValuePropagation::transformIndexOfKnownString(\n+   TR::Node *indexOfNode,\n+   TR::Node *sourceStringNode,\n+   TR::Node *targetCharNode,\n+   TR::Node *startNode,\n+   TR::Node *lengthNode,\n+   bool is16Bit)\n+   {\n+   // Keep track of whether or not all constraints are global.\n+   bool isGlobal = true;\n+   bool isGlobalQuery;\n+\n+   TR::VPConstraint *sourceConstraint = getConstraint(sourceStringNode, isGlobalQuery);\n+   isGlobal &= isGlobalQuery;\n+   if (!sourceConstraint)\n+      return false;\n+   TR::VPKnownObject *knownObject = sourceConstraint->getKnownObject();\n+   // The source string must either be a KnownObject or a ConstString.\n+   // Otherwise, do not attempt transformations.\n+   if (!knownObject && !sourceConstraint->isConstString())\n+      return false;\n+   TR::KnownObjectTable *knot;\n+   if (knownObject)\n+      {\n+      knot = comp()->getOrCreateKnownObjectTable();\n+      if (!knot)\n+         return false;\n+      TR_OpaqueClassBlock *klazz = knownObject->getClass();\n+      if (!comp()->fej9()->isPrimitiveArray(klazz))\n+         return false;\n+      }\n+\n+   TR::VPConstraint *targetConstraint = getConstraint(targetCharNode, isGlobal) ;\n+   bool targetIsConstChar = false;\n+   uint16_t targetChar = -1;\n+   if (!targetConstraint)\n+      {\n+      targetIsConstChar = false;\n+      }\n+   else if (targetConstraint->asIntConst())\n+      {\n+      targetIsConstChar = true;\n+      targetChar = targetConstraint->asIntConst()->getInt();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU0MTQ0NA=="}, "originalCommit": {"oid": "8b8aab7f5aaeaedeab5aa959f4420c150043bcdc"}, "originalPosition": 113}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 492, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}