{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwNzI2MjY4", "number": 9623, "title": "NPE extended message returns fully qualified names", "bodyText": "NPE extended message returns fully qualified names\nAdded convertToJavaFullyQualifiedName(vmThread, fullyQualifiedNameUTF) to replace / with .;\nAdded convertMethodSignature(vmThread, methodSig) to convert a signature string, for example ([[[Ljava/lang/String;Ljava/lang/Void;BLjava/lang/String;ICDFJLjava/lang/Object;SZ)Ljava/lang/String; is converted to (java.lang.String[][][], java.lang.Void, byte, java.lang.String, int, char, double, float, long, java.lang.Object, short, boolean);\nAdded tests;\nMinor refactoring.\nReviewer: @DanHeidinga\nSigned-off-by: Jason Feng fengj@ca.ibm.com", "createdAt": "2020-05-20T12:43:41Z", "url": "https://github.com/eclipse-openj9/openj9/pull/9623", "merged": true, "mergeCommit": {"oid": "fc8ba5fb43f7c7996eb9cb2ae5b1b698ff94d27f"}, "closed": true, "closedAt": "2020-10-01T01:42:55Z", "author": {"login": "JasonFengJ9"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcjnpejABqjMzNjI4NTM1NDQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdOETkPAFqTQ5OTg0OTA4NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e19873fe9d581dad64fe8157e520ae78d49ed33d", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/e19873fe9d581dad64fe8157e520ae78d49ed33d", "committedDate": "2020-05-20T11:16:52Z", "message": "NPE extended message - remove package names\n\nAdded findClassNameInFullQualifiedName(vmThread, fullQualifiedUTF,\nclassNameLength);\nAdded convertMethodSignature(vmThread, methodSig, resultLength);\nRemoved package names from the NPE messages;\nAdded tests;\nMinor refactoring.\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}, "afterCommit": {"oid": "3b9314716a97e2a21f507dc91b46e48e16c09c2a", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/3b9314716a97e2a21f507dc91b46e48e16c09c2a", "committedDate": "2020-05-21T23:22:39Z", "message": "NPE extended message returns fully qualified names\n\nAdded convertToJavaFullyQualifiedName(vmThread, fullyQualifiedNameUTF)\nto replace '/' with '.';\nAdded convertMethodSignature(vmThread, methodSig) to convert a signature\nstring from an example\n([[[Ljava/lang/String;Ljava/lang/Void;BLjava/lang/String;ICDFJLjava/lang/Object;SZ)Ljava/lang/String;\nto (java.lang.String[][][], java.lang.Void, byte, java.lang.String, int,\nchar, double, float, long, java.lang.Object, short, boolean)\nAdded tests;\nMinor refactoring.\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3Njk0MTMx", "url": "https://github.com/eclipse-openj9/openj9/pull/9623#pullrequestreview-417694131", "createdAt": "2020-05-25T12:58:53Z", "commit": {"oid": "3b9314716a97e2a21f507dc91b46e48e16c09c2a"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMjo1ODo1M1rOGaAVaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMzowODowN1rOGaAlFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkyMTY0Mw==", "bodyText": "The contract for this method is:\n* Assuming the method signature is well formed.\n\nso you don't need both the ) and the length check.  Same for the while loop below", "url": "https://github.com/eclipse-openj9/openj9/pull/9623#discussion_r429921643", "createdAt": "2020-05-25T12:58:53Z", "author": {"login": "DanHeidinga"}, "path": "runtime/vm/extendedMessageNPE.cpp", "diffHunk": "@@ -22,10 +22,227 @@\n \n #include \"cfreader.h\"\n #include \"stackwalk.h\"\n+#include \"util_api.h\"\n #include \"ut_j9vm.h\"\n \n extern \"C\" {\n \n+static char* convertToJavaFullyQualifiedName(J9VMThread *vmThread, J9UTF8 *fullyQualifiedNameUTF);\n+static char* convertMethodSignature(J9VMThread *vmThread, J9UTF8 *methodSig);\n+\n+\n+/**\n+ * Replace '/' with '.' for an internal fully qualified name\n+ *\n+ * The caller is responsible for freeing the returned string.\n+ *\n+ * @param[in] vmThread current J9VMThread\n+ * @param[in] fullyQualifiedNameUTF pointer to J9UTF8 containing the fully qualified name\n+ *\n+ * @return a char pointer to the fully qualified name,\n+ *         NULL if not successful, but keep application exception instead of throwing OOM.\n+ */\n+static char*\n+convertToJavaFullyQualifiedName(J9VMThread *vmThread, J9UTF8 *fullyQualifiedNameUTF)\n+{\n+\tPORT_ACCESS_FROM_VMC(vmThread);\n+\tUDATA length = J9UTF8_LENGTH(fullyQualifiedNameUTF);\n+\tchar *result =  (char *)j9mem_allocate_memory(length + 1, OMRMEM_CATEGORY_VM);\n+\n+\tif (NULL != result) {\n+\t\tchar *cursor = result;\n+\t\tchar *end = result + length;\n+\n+\t\tmemcpy(result, J9UTF8_DATA(fullyQualifiedNameUTF), length);\n+\t\twhile (cursor < end) {\n+\t\t\tif ('/' == *cursor) {\n+\t\t\t\t*cursor = '.';\n+\t\t\t}\n+\t\t\tcursor += 1;\n+\t\t}\n+\t\t*end = '\\0';\n+\t}\n+\n+\tTrc_VM_ConvertToJavaFullyQualifiedName_Get_ClassName(vmThread, result, length, fullyQualifiedNameUTF);\n+\n+\treturn result;\n+}\n+\n+/**\n+ * Convert a signature string\n+ * from\n+ *  ([[[Ljava/lang/String;Ljava/lang/Void;BLjava/lang/String;ICDFJLjava/lang/Object;SZ)Ljava/lang/String;\n+ * to\n+ * (java.lang.String[][][], java.lang.Void, byte, java.lang.String, int, char, double, float, long, java.lang.Object, short, boolean)\n+ *\n+ * Note:\n+ * The return type is ignored.\n+ * Assuming the method signature is well formed.\n+ * The caller is responsible for freeing the returned string.\n+ *\n+ * @param[in] vmThread current J9VMThread\n+ * @param[in] methodSig pointer to J9UTF8 containing the method signature\n+ *\n+ * @return a char pointer to the class name within fullQualifiedUTF,\n+ *         NULL if not successful, but keep application exception instead of OOM.\n+ */\n+static char*\n+convertMethodSignature(J9VMThread *vmThread, J9UTF8 *methodSig)\n+{\n+\tUDATA i = 0;\n+\tUDATA j = 0;\n+\tUDATA arity = 0;\n+\tU_8 *string = J9UTF8_DATA(methodSig);\n+\tUDATA stringLength = J9UTF8_LENGTH(methodSig);\n+\tUDATA bufferSize = 0;\n+\tchar *result = NULL;\n+\n+\tPORT_ACCESS_FROM_VMC(vmThread);\n+\n+\t/* first scan to calculate the buffer size required */\n+\t/* first character is '(' */\n+\tbufferSize += 1;\n+\tfor (i = 1; ((')' != string[i]) && (i < stringLength)); i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b9314716a97e2a21f507dc91b46e48e16c09c2a"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkyMjAwNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\ti++;\n          \n          \n            \n            \t\t\ti += 1;", "url": "https://github.com/eclipse-openj9/openj9/pull/9623#discussion_r429922005", "createdAt": "2020-05-25T12:59:45Z", "author": {"login": "DanHeidinga"}, "path": "runtime/vm/extendedMessageNPE.cpp", "diffHunk": "@@ -22,10 +22,227 @@\n \n #include \"cfreader.h\"\n #include \"stackwalk.h\"\n+#include \"util_api.h\"\n #include \"ut_j9vm.h\"\n \n extern \"C\" {\n \n+static char* convertToJavaFullyQualifiedName(J9VMThread *vmThread, J9UTF8 *fullyQualifiedNameUTF);\n+static char* convertMethodSignature(J9VMThread *vmThread, J9UTF8 *methodSig);\n+\n+\n+/**\n+ * Replace '/' with '.' for an internal fully qualified name\n+ *\n+ * The caller is responsible for freeing the returned string.\n+ *\n+ * @param[in] vmThread current J9VMThread\n+ * @param[in] fullyQualifiedNameUTF pointer to J9UTF8 containing the fully qualified name\n+ *\n+ * @return a char pointer to the fully qualified name,\n+ *         NULL if not successful, but keep application exception instead of throwing OOM.\n+ */\n+static char*\n+convertToJavaFullyQualifiedName(J9VMThread *vmThread, J9UTF8 *fullyQualifiedNameUTF)\n+{\n+\tPORT_ACCESS_FROM_VMC(vmThread);\n+\tUDATA length = J9UTF8_LENGTH(fullyQualifiedNameUTF);\n+\tchar *result =  (char *)j9mem_allocate_memory(length + 1, OMRMEM_CATEGORY_VM);\n+\n+\tif (NULL != result) {\n+\t\tchar *cursor = result;\n+\t\tchar *end = result + length;\n+\n+\t\tmemcpy(result, J9UTF8_DATA(fullyQualifiedNameUTF), length);\n+\t\twhile (cursor < end) {\n+\t\t\tif ('/' == *cursor) {\n+\t\t\t\t*cursor = '.';\n+\t\t\t}\n+\t\t\tcursor += 1;\n+\t\t}\n+\t\t*end = '\\0';\n+\t}\n+\n+\tTrc_VM_ConvertToJavaFullyQualifiedName_Get_ClassName(vmThread, result, length, fullyQualifiedNameUTF);\n+\n+\treturn result;\n+}\n+\n+/**\n+ * Convert a signature string\n+ * from\n+ *  ([[[Ljava/lang/String;Ljava/lang/Void;BLjava/lang/String;ICDFJLjava/lang/Object;SZ)Ljava/lang/String;\n+ * to\n+ * (java.lang.String[][][], java.lang.Void, byte, java.lang.String, int, char, double, float, long, java.lang.Object, short, boolean)\n+ *\n+ * Note:\n+ * The return type is ignored.\n+ * Assuming the method signature is well formed.\n+ * The caller is responsible for freeing the returned string.\n+ *\n+ * @param[in] vmThread current J9VMThread\n+ * @param[in] methodSig pointer to J9UTF8 containing the method signature\n+ *\n+ * @return a char pointer to the class name within fullQualifiedUTF,\n+ *         NULL if not successful, but keep application exception instead of OOM.\n+ */\n+static char*\n+convertMethodSignature(J9VMThread *vmThread, J9UTF8 *methodSig)\n+{\n+\tUDATA i = 0;\n+\tUDATA j = 0;\n+\tUDATA arity = 0;\n+\tU_8 *string = J9UTF8_DATA(methodSig);\n+\tUDATA stringLength = J9UTF8_LENGTH(methodSig);\n+\tUDATA bufferSize = 0;\n+\tchar *result = NULL;\n+\n+\tPORT_ACCESS_FROM_VMC(vmThread);\n+\n+\t/* first scan to calculate the buffer size required */\n+\t/* first character is '(' */\n+\tbufferSize += 1;\n+\tfor (i = 1; ((')' != string[i]) && (i < stringLength)); i++) {\n+\t\tarity = 0;\n+\t\twhile (('[' == string[i]) && (i < stringLength)) {\n+\t\t\tarity += 1;\n+\t\t\ti += 1;\n+\t\t}\n+\t\tswitch (string[i]) {\n+\t\tcase 'B': /* FALLTHROUGH */\n+\t\tcase 'C': /* FALLTHROUGH */\n+\t\tcase 'J':\n+\t\t\t/* byte, char, long */\n+\t\t\tbufferSize += 4;\n+\t\t\tbreak;\n+\t\tcase 'D':\n+\t\t\t/* double */\n+\t\t\tbufferSize += 6;\n+\t\t\tbreak;\n+\t\tcase 'F': /* FALLTHROUGH */\n+\t\tcase 'S':\n+\t\t\t/* float, short */\n+\t\t\tbufferSize += 5;\n+\t\t\tbreak;\n+\t\tcase 'I':\n+\t\t\t/* int */\n+\t\t\tbufferSize += 3;\n+\t\t\tbreak;\n+\t\tcase 'L': {\n+\t\t\ti++;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b9314716a97e2a21f507dc91b46e48e16c09c2a"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkyMjM2NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\tobjSize++;\n          \n          \n            \n            \t\t\t\ti++;\n          \n          \n            \n            \t\t\t\tobjSize += 1;\n          \n          \n            \n            \t\t\t\ti += 1;", "url": "https://github.com/eclipse-openj9/openj9/pull/9623#discussion_r429922364", "createdAt": "2020-05-25T13:00:33Z", "author": {"login": "DanHeidinga"}, "path": "runtime/vm/extendedMessageNPE.cpp", "diffHunk": "@@ -22,10 +22,227 @@\n \n #include \"cfreader.h\"\n #include \"stackwalk.h\"\n+#include \"util_api.h\"\n #include \"ut_j9vm.h\"\n \n extern \"C\" {\n \n+static char* convertToJavaFullyQualifiedName(J9VMThread *vmThread, J9UTF8 *fullyQualifiedNameUTF);\n+static char* convertMethodSignature(J9VMThread *vmThread, J9UTF8 *methodSig);\n+\n+\n+/**\n+ * Replace '/' with '.' for an internal fully qualified name\n+ *\n+ * The caller is responsible for freeing the returned string.\n+ *\n+ * @param[in] vmThread current J9VMThread\n+ * @param[in] fullyQualifiedNameUTF pointer to J9UTF8 containing the fully qualified name\n+ *\n+ * @return a char pointer to the fully qualified name,\n+ *         NULL if not successful, but keep application exception instead of throwing OOM.\n+ */\n+static char*\n+convertToJavaFullyQualifiedName(J9VMThread *vmThread, J9UTF8 *fullyQualifiedNameUTF)\n+{\n+\tPORT_ACCESS_FROM_VMC(vmThread);\n+\tUDATA length = J9UTF8_LENGTH(fullyQualifiedNameUTF);\n+\tchar *result =  (char *)j9mem_allocate_memory(length + 1, OMRMEM_CATEGORY_VM);\n+\n+\tif (NULL != result) {\n+\t\tchar *cursor = result;\n+\t\tchar *end = result + length;\n+\n+\t\tmemcpy(result, J9UTF8_DATA(fullyQualifiedNameUTF), length);\n+\t\twhile (cursor < end) {\n+\t\t\tif ('/' == *cursor) {\n+\t\t\t\t*cursor = '.';\n+\t\t\t}\n+\t\t\tcursor += 1;\n+\t\t}\n+\t\t*end = '\\0';\n+\t}\n+\n+\tTrc_VM_ConvertToJavaFullyQualifiedName_Get_ClassName(vmThread, result, length, fullyQualifiedNameUTF);\n+\n+\treturn result;\n+}\n+\n+/**\n+ * Convert a signature string\n+ * from\n+ *  ([[[Ljava/lang/String;Ljava/lang/Void;BLjava/lang/String;ICDFJLjava/lang/Object;SZ)Ljava/lang/String;\n+ * to\n+ * (java.lang.String[][][], java.lang.Void, byte, java.lang.String, int, char, double, float, long, java.lang.Object, short, boolean)\n+ *\n+ * Note:\n+ * The return type is ignored.\n+ * Assuming the method signature is well formed.\n+ * The caller is responsible for freeing the returned string.\n+ *\n+ * @param[in] vmThread current J9VMThread\n+ * @param[in] methodSig pointer to J9UTF8 containing the method signature\n+ *\n+ * @return a char pointer to the class name within fullQualifiedUTF,\n+ *         NULL if not successful, but keep application exception instead of OOM.\n+ */\n+static char*\n+convertMethodSignature(J9VMThread *vmThread, J9UTF8 *methodSig)\n+{\n+\tUDATA i = 0;\n+\tUDATA j = 0;\n+\tUDATA arity = 0;\n+\tU_8 *string = J9UTF8_DATA(methodSig);\n+\tUDATA stringLength = J9UTF8_LENGTH(methodSig);\n+\tUDATA bufferSize = 0;\n+\tchar *result = NULL;\n+\n+\tPORT_ACCESS_FROM_VMC(vmThread);\n+\n+\t/* first scan to calculate the buffer size required */\n+\t/* first character is '(' */\n+\tbufferSize += 1;\n+\tfor (i = 1; ((')' != string[i]) && (i < stringLength)); i++) {\n+\t\tarity = 0;\n+\t\twhile (('[' == string[i]) && (i < stringLength)) {\n+\t\t\tarity += 1;\n+\t\t\ti += 1;\n+\t\t}\n+\t\tswitch (string[i]) {\n+\t\tcase 'B': /* FALLTHROUGH */\n+\t\tcase 'C': /* FALLTHROUGH */\n+\t\tcase 'J':\n+\t\t\t/* byte, char, long */\n+\t\t\tbufferSize += 4;\n+\t\t\tbreak;\n+\t\tcase 'D':\n+\t\t\t/* double */\n+\t\t\tbufferSize += 6;\n+\t\t\tbreak;\n+\t\tcase 'F': /* FALLTHROUGH */\n+\t\tcase 'S':\n+\t\t\t/* float, short */\n+\t\t\tbufferSize += 5;\n+\t\t\tbreak;\n+\t\tcase 'I':\n+\t\t\t/* int */\n+\t\t\tbufferSize += 3;\n+\t\t\tbreak;\n+\t\tcase 'L': {\n+\t\t\ti++;\n+\t\t\tUDATA objSize = 0;\n+\t\t\twhile ((';' != string[i]) && (i < stringLength)) {\n+\t\t\t\tobjSize++;\n+\t\t\t\ti++;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b9314716a97e2a21f507dc91b46e48e16c09c2a"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkyMzMxOQ==", "bodyText": "This will be hot in cache, unconditionally copy it (common case), then overwrite with . in the uncommon case\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\twhile ((';' != string[i]) && (i < stringLength)) {\n          \n          \n            \n            \t\t\t\t\tif ('/' == string[i]) {\n          \n          \n            \n            \t\t\t\t\t\t*cursor = '.';\n          \n          \n            \n            \t\t\t\t\t} else {\n          \n          \n            \n            \t\t\t\t\t\t*cursor = string[i];\n          \n          \n            \n            \t\t\t\t\t}\n          \n          \n            \n            \t\t\t\twhile ((';' != string[i]) && (i < stringLength)) {\n          \n          \n            \n            \t\t\t\t\t*cursor = string[i];\n          \n          \n            \n            \t\t\t\t\tif ('/' == string[i]) {\n          \n          \n            \n            \t\t\t\t\t\t*cursor = '.';\n          \n          \n            \n            \t\t\t\t\t}", "url": "https://github.com/eclipse-openj9/openj9/pull/9623#discussion_r429923319", "createdAt": "2020-05-25T13:02:42Z", "author": {"login": "DanHeidinga"}, "path": "runtime/vm/extendedMessageNPE.cpp", "diffHunk": "@@ -22,10 +22,227 @@\n \n #include \"cfreader.h\"\n #include \"stackwalk.h\"\n+#include \"util_api.h\"\n #include \"ut_j9vm.h\"\n \n extern \"C\" {\n \n+static char* convertToJavaFullyQualifiedName(J9VMThread *vmThread, J9UTF8 *fullyQualifiedNameUTF);\n+static char* convertMethodSignature(J9VMThread *vmThread, J9UTF8 *methodSig);\n+\n+\n+/**\n+ * Replace '/' with '.' for an internal fully qualified name\n+ *\n+ * The caller is responsible for freeing the returned string.\n+ *\n+ * @param[in] vmThread current J9VMThread\n+ * @param[in] fullyQualifiedNameUTF pointer to J9UTF8 containing the fully qualified name\n+ *\n+ * @return a char pointer to the fully qualified name,\n+ *         NULL if not successful, but keep application exception instead of throwing OOM.\n+ */\n+static char*\n+convertToJavaFullyQualifiedName(J9VMThread *vmThread, J9UTF8 *fullyQualifiedNameUTF)\n+{\n+\tPORT_ACCESS_FROM_VMC(vmThread);\n+\tUDATA length = J9UTF8_LENGTH(fullyQualifiedNameUTF);\n+\tchar *result =  (char *)j9mem_allocate_memory(length + 1, OMRMEM_CATEGORY_VM);\n+\n+\tif (NULL != result) {\n+\t\tchar *cursor = result;\n+\t\tchar *end = result + length;\n+\n+\t\tmemcpy(result, J9UTF8_DATA(fullyQualifiedNameUTF), length);\n+\t\twhile (cursor < end) {\n+\t\t\tif ('/' == *cursor) {\n+\t\t\t\t*cursor = '.';\n+\t\t\t}\n+\t\t\tcursor += 1;\n+\t\t}\n+\t\t*end = '\\0';\n+\t}\n+\n+\tTrc_VM_ConvertToJavaFullyQualifiedName_Get_ClassName(vmThread, result, length, fullyQualifiedNameUTF);\n+\n+\treturn result;\n+}\n+\n+/**\n+ * Convert a signature string\n+ * from\n+ *  ([[[Ljava/lang/String;Ljava/lang/Void;BLjava/lang/String;ICDFJLjava/lang/Object;SZ)Ljava/lang/String;\n+ * to\n+ * (java.lang.String[][][], java.lang.Void, byte, java.lang.String, int, char, double, float, long, java.lang.Object, short, boolean)\n+ *\n+ * Note:\n+ * The return type is ignored.\n+ * Assuming the method signature is well formed.\n+ * The caller is responsible for freeing the returned string.\n+ *\n+ * @param[in] vmThread current J9VMThread\n+ * @param[in] methodSig pointer to J9UTF8 containing the method signature\n+ *\n+ * @return a char pointer to the class name within fullQualifiedUTF,\n+ *         NULL if not successful, but keep application exception instead of OOM.\n+ */\n+static char*\n+convertMethodSignature(J9VMThread *vmThread, J9UTF8 *methodSig)\n+{\n+\tUDATA i = 0;\n+\tUDATA j = 0;\n+\tUDATA arity = 0;\n+\tU_8 *string = J9UTF8_DATA(methodSig);\n+\tUDATA stringLength = J9UTF8_LENGTH(methodSig);\n+\tUDATA bufferSize = 0;\n+\tchar *result = NULL;\n+\n+\tPORT_ACCESS_FROM_VMC(vmThread);\n+\n+\t/* first scan to calculate the buffer size required */\n+\t/* first character is '(' */\n+\tbufferSize += 1;\n+\tfor (i = 1; ((')' != string[i]) && (i < stringLength)); i++) {\n+\t\tarity = 0;\n+\t\twhile (('[' == string[i]) && (i < stringLength)) {\n+\t\t\tarity += 1;\n+\t\t\ti += 1;\n+\t\t}\n+\t\tswitch (string[i]) {\n+\t\tcase 'B': /* FALLTHROUGH */\n+\t\tcase 'C': /* FALLTHROUGH */\n+\t\tcase 'J':\n+\t\t\t/* byte, char, long */\n+\t\t\tbufferSize += 4;\n+\t\t\tbreak;\n+\t\tcase 'D':\n+\t\t\t/* double */\n+\t\t\tbufferSize += 6;\n+\t\t\tbreak;\n+\t\tcase 'F': /* FALLTHROUGH */\n+\t\tcase 'S':\n+\t\t\t/* float, short */\n+\t\t\tbufferSize += 5;\n+\t\t\tbreak;\n+\t\tcase 'I':\n+\t\t\t/* int */\n+\t\t\tbufferSize += 3;\n+\t\t\tbreak;\n+\t\tcase 'L': {\n+\t\t\ti++;\n+\t\t\tUDATA objSize = 0;\n+\t\t\twhile ((';' != string[i]) && (i < stringLength)) {\n+\t\t\t\tobjSize++;\n+\t\t\t\ti++;\n+\t\t\t}\n+\t\t\tbufferSize += objSize;\n+\t\t\tbreak;\n+\t\t}\n+\t\tcase 'Z':\n+\t\t\t/* boolean */\n+\t\t\tbufferSize += 7;\n+\t\t\tbreak;\n+\t\tdefault:\n+\t\t\tTrc_VM_ConvertMethodSignature_Malformed_Signature(vmThread, stringLength, string, i);\n+\t\t\tbreak;\n+\t\t}\n+\t\tbufferSize += (2 * arity);\n+\t\tif (')' != string[i + 1]) {\n+\t\t\t/* \", \" */\n+\t\t\tbufferSize += 2;\n+\t\t}\n+\t}\n+\t/* ')' and the extra byte for '\\0' */\n+\tbufferSize += 2;\n+\tTrc_VM_ConvertMethodSignature_Signature_BufferSize(vmThread, stringLength, string, bufferSize);\n+\tresult = (char *)j9mem_allocate_memory(bufferSize, OMRMEM_CATEGORY_VM);\n+\tif (NULL != result) {\n+\t\tchar *cursor = result;\n+\t\tUDATA availableSize = bufferSize;\n+\n+\t\tmemset(result, 0, bufferSize);\n+\t\t/* first character is '(' */\n+\t\tj9str_printf(PORTLIB, cursor, availableSize, \"(\");\n+\t\tcursor += 1;\n+\t\tavailableSize -= 1;\n+\t\tfor (i = 1; ((')' != string[i]) && (i < stringLength)); i++) {\n+\t\t\tarity = 0;\n+\t\t\twhile (('[' == string[i]) && (i < stringLength)) {\n+\t\t\t\tarity += 1;\n+\t\t\t\ti += 1;\n+\t\t\t}\n+\t\t\tconst char *elementType = NULL;\n+\t\t\tif ('L' == string[i]) {\n+\t\t\t\ti += 1;\n+\n+\t\t\t\tUDATA objSize = 0;\n+\t\t\t\twhile ((';' != string[i]) && (i < stringLength)) {\n+\t\t\t\t\tif ('/' == string[i]) {\n+\t\t\t\t\t\t*cursor = '.';\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\t*cursor = string[i];\n+\t\t\t\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b9314716a97e2a21f507dc91b46e48e16c09c2a"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkyMzc4Ng==", "bodyText": "can you avoid the additional strlen?", "url": "https://github.com/eclipse-openj9/openj9/pull/9623#discussion_r429923786", "createdAt": "2020-05-25T13:03:49Z", "author": {"login": "DanHeidinga"}, "path": "runtime/vm/extendedMessageNPE.cpp", "diffHunk": "@@ -22,10 +22,227 @@\n \n #include \"cfreader.h\"\n #include \"stackwalk.h\"\n+#include \"util_api.h\"\n #include \"ut_j9vm.h\"\n \n extern \"C\" {\n \n+static char* convertToJavaFullyQualifiedName(J9VMThread *vmThread, J9UTF8 *fullyQualifiedNameUTF);\n+static char* convertMethodSignature(J9VMThread *vmThread, J9UTF8 *methodSig);\n+\n+\n+/**\n+ * Replace '/' with '.' for an internal fully qualified name\n+ *\n+ * The caller is responsible for freeing the returned string.\n+ *\n+ * @param[in] vmThread current J9VMThread\n+ * @param[in] fullyQualifiedNameUTF pointer to J9UTF8 containing the fully qualified name\n+ *\n+ * @return a char pointer to the fully qualified name,\n+ *         NULL if not successful, but keep application exception instead of throwing OOM.\n+ */\n+static char*\n+convertToJavaFullyQualifiedName(J9VMThread *vmThread, J9UTF8 *fullyQualifiedNameUTF)\n+{\n+\tPORT_ACCESS_FROM_VMC(vmThread);\n+\tUDATA length = J9UTF8_LENGTH(fullyQualifiedNameUTF);\n+\tchar *result =  (char *)j9mem_allocate_memory(length + 1, OMRMEM_CATEGORY_VM);\n+\n+\tif (NULL != result) {\n+\t\tchar *cursor = result;\n+\t\tchar *end = result + length;\n+\n+\t\tmemcpy(result, J9UTF8_DATA(fullyQualifiedNameUTF), length);\n+\t\twhile (cursor < end) {\n+\t\t\tif ('/' == *cursor) {\n+\t\t\t\t*cursor = '.';\n+\t\t\t}\n+\t\t\tcursor += 1;\n+\t\t}\n+\t\t*end = '\\0';\n+\t}\n+\n+\tTrc_VM_ConvertToJavaFullyQualifiedName_Get_ClassName(vmThread, result, length, fullyQualifiedNameUTF);\n+\n+\treturn result;\n+}\n+\n+/**\n+ * Convert a signature string\n+ * from\n+ *  ([[[Ljava/lang/String;Ljava/lang/Void;BLjava/lang/String;ICDFJLjava/lang/Object;SZ)Ljava/lang/String;\n+ * to\n+ * (java.lang.String[][][], java.lang.Void, byte, java.lang.String, int, char, double, float, long, java.lang.Object, short, boolean)\n+ *\n+ * Note:\n+ * The return type is ignored.\n+ * Assuming the method signature is well formed.\n+ * The caller is responsible for freeing the returned string.\n+ *\n+ * @param[in] vmThread current J9VMThread\n+ * @param[in] methodSig pointer to J9UTF8 containing the method signature\n+ *\n+ * @return a char pointer to the class name within fullQualifiedUTF,\n+ *         NULL if not successful, but keep application exception instead of OOM.\n+ */\n+static char*\n+convertMethodSignature(J9VMThread *vmThread, J9UTF8 *methodSig)\n+{\n+\tUDATA i = 0;\n+\tUDATA j = 0;\n+\tUDATA arity = 0;\n+\tU_8 *string = J9UTF8_DATA(methodSig);\n+\tUDATA stringLength = J9UTF8_LENGTH(methodSig);\n+\tUDATA bufferSize = 0;\n+\tchar *result = NULL;\n+\n+\tPORT_ACCESS_FROM_VMC(vmThread);\n+\n+\t/* first scan to calculate the buffer size required */\n+\t/* first character is '(' */\n+\tbufferSize += 1;\n+\tfor (i = 1; ((')' != string[i]) && (i < stringLength)); i++) {\n+\t\tarity = 0;\n+\t\twhile (('[' == string[i]) && (i < stringLength)) {\n+\t\t\tarity += 1;\n+\t\t\ti += 1;\n+\t\t}\n+\t\tswitch (string[i]) {\n+\t\tcase 'B': /* FALLTHROUGH */\n+\t\tcase 'C': /* FALLTHROUGH */\n+\t\tcase 'J':\n+\t\t\t/* byte, char, long */\n+\t\t\tbufferSize += 4;\n+\t\t\tbreak;\n+\t\tcase 'D':\n+\t\t\t/* double */\n+\t\t\tbufferSize += 6;\n+\t\t\tbreak;\n+\t\tcase 'F': /* FALLTHROUGH */\n+\t\tcase 'S':\n+\t\t\t/* float, short */\n+\t\t\tbufferSize += 5;\n+\t\t\tbreak;\n+\t\tcase 'I':\n+\t\t\t/* int */\n+\t\t\tbufferSize += 3;\n+\t\t\tbreak;\n+\t\tcase 'L': {\n+\t\t\ti++;\n+\t\t\tUDATA objSize = 0;\n+\t\t\twhile ((';' != string[i]) && (i < stringLength)) {\n+\t\t\t\tobjSize++;\n+\t\t\t\ti++;\n+\t\t\t}\n+\t\t\tbufferSize += objSize;\n+\t\t\tbreak;\n+\t\t}\n+\t\tcase 'Z':\n+\t\t\t/* boolean */\n+\t\t\tbufferSize += 7;\n+\t\t\tbreak;\n+\t\tdefault:\n+\t\t\tTrc_VM_ConvertMethodSignature_Malformed_Signature(vmThread, stringLength, string, i);\n+\t\t\tbreak;\n+\t\t}\n+\t\tbufferSize += (2 * arity);\n+\t\tif (')' != string[i + 1]) {\n+\t\t\t/* \", \" */\n+\t\t\tbufferSize += 2;\n+\t\t}\n+\t}\n+\t/* ')' and the extra byte for '\\0' */\n+\tbufferSize += 2;\n+\tTrc_VM_ConvertMethodSignature_Signature_BufferSize(vmThread, stringLength, string, bufferSize);\n+\tresult = (char *)j9mem_allocate_memory(bufferSize, OMRMEM_CATEGORY_VM);\n+\tif (NULL != result) {\n+\t\tchar *cursor = result;\n+\t\tUDATA availableSize = bufferSize;\n+\n+\t\tmemset(result, 0, bufferSize);\n+\t\t/* first character is '(' */\n+\t\tj9str_printf(PORTLIB, cursor, availableSize, \"(\");\n+\t\tcursor += 1;\n+\t\tavailableSize -= 1;\n+\t\tfor (i = 1; ((')' != string[i]) && (i < stringLength)); i++) {\n+\t\t\tarity = 0;\n+\t\t\twhile (('[' == string[i]) && (i < stringLength)) {\n+\t\t\t\tarity += 1;\n+\t\t\t\ti += 1;\n+\t\t\t}\n+\t\t\tconst char *elementType = NULL;\n+\t\t\tif ('L' == string[i]) {\n+\t\t\t\ti += 1;\n+\n+\t\t\t\tUDATA objSize = 0;\n+\t\t\t\twhile ((';' != string[i]) && (i < stringLength)) {\n+\t\t\t\t\tif ('/' == string[i]) {\n+\t\t\t\t\t\t*cursor = '.';\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\t*cursor = string[i];\n+\t\t\t\t\t}\n+\t\t\t\t\tobjSize += 1;\n+\t\t\t\t\tcursor += 1;\n+\t\t\t\t\ti += 1;\n+\t\t\t\t}\n+\t\t\t\tavailableSize -= objSize;\n+\t\t\t} else {\n+\t\t\t\tswitch (string[i]) {\n+\t\t\t\tcase 'B':\n+\t\t\t\t\telementType = \"byte\";\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase 'C':\n+\t\t\t\t\telementType = \"char\";\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase 'D':\n+\t\t\t\t\telementType = \"double\";\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase 'F':\n+\t\t\t\t\telementType = \"float\";\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase 'I':\n+\t\t\t\t\telementType = \"int\";\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase 'J':\n+\t\t\t\t\telementType = \"long\";\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase 'S':\n+\t\t\t\t\telementType = \"short\";\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase 'Z':\n+\t\t\t\t\telementType = \"boolean\";\n+\t\t\t\t\tbreak;\n+\t\t\t\tdefault:\n+\t\t\t\t\tTrc_VM_ConvertMethodSignature_Malformed_Signature(vmThread, stringLength, string, i);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t\tUDATA elementLength = strlen(elementType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b9314716a97e2a21f507dc91b46e48e16c09c2a"}, "originalPosition": 199}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkyNDUyNw==", "bodyText": "Can arity be defined here in the loop?  And a new variable introduced in the other variable?  Neither lives past the end of the loop so better to encapsulate them in their own loops", "url": "https://github.com/eclipse-openj9/openj9/pull/9623#discussion_r429924527", "createdAt": "2020-05-25T13:05:35Z", "author": {"login": "DanHeidinga"}, "path": "runtime/vm/extendedMessageNPE.cpp", "diffHunk": "@@ -22,10 +22,227 @@\n \n #include \"cfreader.h\"\n #include \"stackwalk.h\"\n+#include \"util_api.h\"\n #include \"ut_j9vm.h\"\n \n extern \"C\" {\n \n+static char* convertToJavaFullyQualifiedName(J9VMThread *vmThread, J9UTF8 *fullyQualifiedNameUTF);\n+static char* convertMethodSignature(J9VMThread *vmThread, J9UTF8 *methodSig);\n+\n+\n+/**\n+ * Replace '/' with '.' for an internal fully qualified name\n+ *\n+ * The caller is responsible for freeing the returned string.\n+ *\n+ * @param[in] vmThread current J9VMThread\n+ * @param[in] fullyQualifiedNameUTF pointer to J9UTF8 containing the fully qualified name\n+ *\n+ * @return a char pointer to the fully qualified name,\n+ *         NULL if not successful, but keep application exception instead of throwing OOM.\n+ */\n+static char*\n+convertToJavaFullyQualifiedName(J9VMThread *vmThread, J9UTF8 *fullyQualifiedNameUTF)\n+{\n+\tPORT_ACCESS_FROM_VMC(vmThread);\n+\tUDATA length = J9UTF8_LENGTH(fullyQualifiedNameUTF);\n+\tchar *result =  (char *)j9mem_allocate_memory(length + 1, OMRMEM_CATEGORY_VM);\n+\n+\tif (NULL != result) {\n+\t\tchar *cursor = result;\n+\t\tchar *end = result + length;\n+\n+\t\tmemcpy(result, J9UTF8_DATA(fullyQualifiedNameUTF), length);\n+\t\twhile (cursor < end) {\n+\t\t\tif ('/' == *cursor) {\n+\t\t\t\t*cursor = '.';\n+\t\t\t}\n+\t\t\tcursor += 1;\n+\t\t}\n+\t\t*end = '\\0';\n+\t}\n+\n+\tTrc_VM_ConvertToJavaFullyQualifiedName_Get_ClassName(vmThread, result, length, fullyQualifiedNameUTF);\n+\n+\treturn result;\n+}\n+\n+/**\n+ * Convert a signature string\n+ * from\n+ *  ([[[Ljava/lang/String;Ljava/lang/Void;BLjava/lang/String;ICDFJLjava/lang/Object;SZ)Ljava/lang/String;\n+ * to\n+ * (java.lang.String[][][], java.lang.Void, byte, java.lang.String, int, char, double, float, long, java.lang.Object, short, boolean)\n+ *\n+ * Note:\n+ * The return type is ignored.\n+ * Assuming the method signature is well formed.\n+ * The caller is responsible for freeing the returned string.\n+ *\n+ * @param[in] vmThread current J9VMThread\n+ * @param[in] methodSig pointer to J9UTF8 containing the method signature\n+ *\n+ * @return a char pointer to the class name within fullQualifiedUTF,\n+ *         NULL if not successful, but keep application exception instead of OOM.\n+ */\n+static char*\n+convertMethodSignature(J9VMThread *vmThread, J9UTF8 *methodSig)\n+{\n+\tUDATA i = 0;\n+\tUDATA j = 0;\n+\tUDATA arity = 0;\n+\tU_8 *string = J9UTF8_DATA(methodSig);\n+\tUDATA stringLength = J9UTF8_LENGTH(methodSig);\n+\tUDATA bufferSize = 0;\n+\tchar *result = NULL;\n+\n+\tPORT_ACCESS_FROM_VMC(vmThread);\n+\n+\t/* first scan to calculate the buffer size required */\n+\t/* first character is '(' */\n+\tbufferSize += 1;\n+\tfor (i = 1; ((')' != string[i]) && (i < stringLength)); i++) {\n+\t\tarity = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b9314716a97e2a21f507dc91b46e48e16c09c2a"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkyNTY1NA==", "bodyText": "what if one of these allocations fails?", "url": "https://github.com/eclipse-openj9/openj9/pull/9623#discussion_r429925654", "createdAt": "2020-05-25T13:08:07Z", "author": {"login": "DanHeidinga"}, "path": "runtime/vm/extendedMessageNPE.cpp", "diffHunk": "@@ -159,19 +374,24 @@ getCompleteNPEMessage(J9VMThread *vmThread, U_8 *bcCurrentPtr, J9ROMClass *romCl\n \t\t\tTrc_VM_GetCompleteNPEMessage_Invoke_Index(vmThread, index);\n \n \t\t\tJ9ROMMethodRef *romMethodRef = (J9ROMMethodRef *)&constantPool[index];\n-\t\t\tJ9ROMNameAndSignature *nameAndSig = J9ROMMETHODREF_NAMEANDSIGNATURE(romMethodRef);\n-\t\t\tJ9UTF8 *sig = J9ROMNAMEANDSIGNATURE_SIGNATURE(nameAndSig);\n-\t\t\tJ9UTF8 *name = J9ROMNAMEANDSIGNATURE_NAME(nameAndSig);\n-\t\t\tconst char *VM_NPE_INVOKEMETHOD = \"Cannot invoke \\\"%2$.*1$s.%4$.*3$s%6$.*5$s\\\"\";\n-\t\t\tJ9UTF8 *definingUTF = J9ROMSTRINGREF_UTF8DATA((J9ROMStringRef *)&constantPool[romMethodRef->classRefCPIndex]);\n+\t\t\tJ9ROMNameAndSignature *methodNameAndSig = J9ROMMETHODREF_NAMEANDSIGNATURE(romMethodRef);\n+\t\t\tJ9UTF8 *methodName = J9ROMNAMEANDSIGNATURE_NAME(methodNameAndSig);\n+\t\t\tconst char *VM_NPE_INVOKEMETHOD = \"Cannot invoke \\\"%s.%.*s%s\\\"\";\n+\n+\t\t\tJ9UTF8 *definingClassFullQualifiedName = J9ROMSTRINGREF_UTF8DATA((J9ROMStringRef *)&constantPool[romMethodRef->classRefCPIndex]);\n+\t\t\tchar *fullyQualifiedDefiningClassName = convertToJavaFullyQualifiedName(vmThread, definingClassFullQualifiedName);\n+\t\t\tchar *methodSigParameters = convertMethodSignature(vmThread, J9ROMNAMEANDSIGNATURE_SIGNATURE(methodNameAndSig));\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b9314716a97e2a21f507dc91b46e48e16c09c2a"}, "originalPosition": 279}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3NzAzNzYw", "url": "https://github.com/eclipse-openj9/openj9/pull/9623#pullrequestreview-417703760", "createdAt": "2020-05-25T13:15:56Z", "commit": {"oid": "3b9314716a97e2a21f507dc91b46e48e16c09c2a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMzoxNTo1NlrOGaAzBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMzoxNTo1NlrOGaAzBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkyOTIyMQ==", "bodyText": "dist_functional  should not be removed. This target is defined in the upper level. And it is used when the BUILD_LIST is specifically set to subdir.", "url": "https://github.com/eclipse-openj9/openj9/pull/9623#discussion_r429929221", "createdAt": "2020-05-25T13:15:56Z", "author": {"login": "llxia"}, "path": "test/functional/Java14andUp/build.xml", "diffHunk": "@@ -61,7 +61,7 @@\n \t\t</javac>\n \t</target>\n \n-\t<target name=\"dist\" depends=\"compile,dist_functional\" description=\"generate the distribution\" >\n+\t<target name=\"dist\" depends=\"compile\" description=\"generate the distribution\" >", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b9314716a97e2a21f507dc91b46e48e16c09c2a"}, "originalPosition": 14}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3b9314716a97e2a21f507dc91b46e48e16c09c2a", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/3b9314716a97e2a21f507dc91b46e48e16c09c2a", "committedDate": "2020-05-21T23:22:39Z", "message": "NPE extended message returns fully qualified names\n\nAdded convertToJavaFullyQualifiedName(vmThread, fullyQualifiedNameUTF)\nto replace '/' with '.';\nAdded convertMethodSignature(vmThread, methodSig) to convert a signature\nstring from an example\n([[[Ljava/lang/String;Ljava/lang/Void;BLjava/lang/String;ICDFJLjava/lang/Object;SZ)Ljava/lang/String;\nto (java.lang.String[][][], java.lang.Void, byte, java.lang.String, int,\nchar, double, float, long, java.lang.Object, short, boolean)\nAdded tests;\nMinor refactoring.\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}, "afterCommit": {"oid": "53f454f6bbe5b9862635a32d61f326d597f32ae3", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/53f454f6bbe5b9862635a32d61f326d597f32ae3", "committedDate": "2020-05-25T15:22:40Z", "message": "NPE extended message returns fully qualified names\n\nAdded convertToJavaFullyQualifiedName(vmThread, fullyQualifiedNameUTF)\nto replace '/' with '.';\nAdded convertMethodSignature(vmThread, methodSig) to convert a signature\nstring from an example\n([[[Ljava/lang/String;Ljava/lang/Void;BLjava/lang/String;ICDFJLjava/lang/Object;SZ)Ljava/lang/String;\nto (java.lang.String[][][], java.lang.Void, byte, java.lang.String, int,\nchar, double, float, long, java.lang.Object, short, boolean)\nAdded tests;\nMinor refactoring.\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3NzgyODMx", "url": "https://github.com/eclipse-openj9/openj9/pull/9623#pullrequestreview-417782831", "createdAt": "2020-05-25T15:36:43Z", "commit": {"oid": "53f454f6bbe5b9862635a32d61f326d597f32ae3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "53f454f6bbe5b9862635a32d61f326d597f32ae3", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/53f454f6bbe5b9862635a32d61f326d597f32ae3", "committedDate": "2020-05-25T15:22:40Z", "message": "NPE extended message returns fully qualified names\n\nAdded convertToJavaFullyQualifiedName(vmThread, fullyQualifiedNameUTF)\nto replace '/' with '.';\nAdded convertMethodSignature(vmThread, methodSig) to convert a signature\nstring from an example\n([[[Ljava/lang/String;Ljava/lang/Void;BLjava/lang/String;ICDFJLjava/lang/Object;SZ)Ljava/lang/String;\nto (java.lang.String[][][], java.lang.Void, byte, java.lang.String, int,\nchar, double, float, long, java.lang.Object, short, boolean)\nAdded tests;\nMinor refactoring.\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}, "afterCommit": {"oid": "2909601d5912e50a4c48300bcfa499555c65c68e", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/2909601d5912e50a4c48300bcfa499555c65c68e", "committedDate": "2020-08-29T12:44:07Z", "message": "NPE extended message returns fully qualified names\n\nAdded convertToJavaFullyQualifiedName(vmThread, fullyQualifiedNameUTF)\nto replace '/' with '.';\nAdded convertMethodSignature(vmThread, methodSig) to convert a signature\nstring from an example\n([[[Ljava/lang/String;Ljava/lang/Void;BLjava/lang/String;ICDFJLjava/lang/Object;SZ)Ljava/lang/String;\nto (java.lang.String[][][], java.lang.Void, byte, java.lang.String, int,\nchar, double, float, long, java.lang.Object, short, boolean)\nAdded tests;\nMinor refactoring.\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3098549ae6441da8e122bd8aafa5a3a51358bee", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/a3098549ae6441da8e122bd8aafa5a3a51358bee", "committedDate": "2020-09-30T18:30:29Z", "message": "NPE extended message returns fully qualified names\n\nAdded convertToJavaFullyQualifiedName(vmThread, fullyQualifiedNameUTF)\nto replace '/' with '.';\nAdded convertMethodSignature(vmThread, methodSig) to convert a signature\nstring from an example\n([[[Ljava/lang/String;Ljava/lang/Void;BLjava/lang/String;ICDFJLjava/lang/Object;SZ)Ljava/lang/String;\nto (java.lang.String[][][], java.lang.Void, byte, java.lang.String, int,\nchar, double, float, long, java.lang.Object, short, boolean)\nAdded tests;\nMinor refactoring.\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2909601d5912e50a4c48300bcfa499555c65c68e", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/2909601d5912e50a4c48300bcfa499555c65c68e", "committedDate": "2020-08-29T12:44:07Z", "message": "NPE extended message returns fully qualified names\n\nAdded convertToJavaFullyQualifiedName(vmThread, fullyQualifiedNameUTF)\nto replace '/' with '.';\nAdded convertMethodSignature(vmThread, methodSig) to convert a signature\nstring from an example\n([[[Ljava/lang/String;Ljava/lang/Void;BLjava/lang/String;ICDFJLjava/lang/Object;SZ)Ljava/lang/String;\nto (java.lang.String[][][], java.lang.Void, byte, java.lang.String, int,\nchar, double, float, long, java.lang.Object, short, boolean)\nAdded tests;\nMinor refactoring.\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}, "afterCommit": {"oid": "a3098549ae6441da8e122bd8aafa5a3a51358bee", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/a3098549ae6441da8e122bd8aafa5a3a51358bee", "committedDate": "2020-09-30T18:30:29Z", "message": "NPE extended message returns fully qualified names\n\nAdded convertToJavaFullyQualifiedName(vmThread, fullyQualifiedNameUTF)\nto replace '/' with '.';\nAdded convertMethodSignature(vmThread, methodSig) to convert a signature\nstring from an example\n([[[Ljava/lang/String;Ljava/lang/Void;BLjava/lang/String;ICDFJLjava/lang/Object;SZ)Ljava/lang/String;\nto (java.lang.String[][][], java.lang.Void, byte, java.lang.String, int,\nchar, double, float, long, java.lang.Object, short, boolean)\nAdded tests;\nMinor refactoring.\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5NzgzMjIz", "url": "https://github.com/eclipse-openj9/openj9/pull/9623#pullrequestreview-499783223", "createdAt": "2020-09-30T20:24:10Z", "commit": {"oid": "a3098549ae6441da8e122bd8aafa5a3a51358bee"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMDoyNDoxMFrOHat_Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMDoyNDoxMFrOHat_Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc3ODQ5NQ==", "bodyText": "Missing NULL check.", "url": "https://github.com/eclipse-openj9/openj9/pull/9623#discussion_r497778495", "createdAt": "2020-09-30T20:24:10Z", "author": {"login": "gacholio"}, "path": "runtime/vm/extendedMessageNPE.cpp", "diffHunk": "@@ -159,19 +372,23 @@ getCompleteNPEMessage(J9VMThread *vmThread, U_8 *bcCurrentPtr, J9ROMClass *romCl\n \t\t\tTrc_VM_GetCompleteNPEMessage_Invoke_Index(vmThread, index);\n \n \t\t\tJ9ROMMethodRef *romMethodRef = (J9ROMMethodRef *)&constantPool[index];\n-\t\t\tJ9ROMNameAndSignature *nameAndSig = J9ROMMETHODREF_NAMEANDSIGNATURE(romMethodRef);\n-\t\t\tJ9UTF8 *sig = J9ROMNAMEANDSIGNATURE_SIGNATURE(nameAndSig);\n-\t\t\tJ9UTF8 *name = J9ROMNAMEANDSIGNATURE_NAME(nameAndSig);\n-\t\t\tconst char *VM_NPE_INVOKEMETHOD = \"Cannot invoke \\\"%2$.*1$s.%4$.*3$s%6$.*5$s\\\"\";\n-\t\t\tJ9UTF8 *definingUTF = J9ROMSTRINGREF_UTF8DATA((J9ROMStringRef *)&constantPool[romMethodRef->classRefCPIndex]);\n-\n-\t\t\tmsgLen = j9str_printf(PORTLIB, NULL, 0, VM_NPE_INVOKEMETHOD,\n-\t\t\t\tJ9UTF8_LENGTH(definingUTF), J9UTF8_DATA(definingUTF),\n-\t\t\t\tJ9UTF8_LENGTH(name), J9UTF8_DATA(name), J9UTF8_LENGTH(sig), J9UTF8_DATA(sig));\n-\t\t\tnpeMsg = (char *)j9mem_allocate_memory(msgLen + 1, OMRMEM_CATEGORY_VM);\n-\t\t\tj9str_printf(PORTLIB, npeMsg, msgLen, VM_NPE_INVOKEMETHOD,\n-\t\t\t\tJ9UTF8_LENGTH(definingUTF), J9UTF8_DATA(definingUTF),\n-\t\t\t\tJ9UTF8_LENGTH(name), J9UTF8_DATA(name), J9UTF8_LENGTH(sig), J9UTF8_DATA(sig));\n+\t\t\tJ9ROMNameAndSignature *methodNameAndSig = J9ROMMETHODREF_NAMEANDSIGNATURE(romMethodRef);\n+\t\t\tJ9UTF8 *methodName = J9ROMNAMEANDSIGNATURE_NAME(methodNameAndSig);\n+\t\t\tconst char *VM_NPE_INVOKEMETHOD = \"Cannot invoke \\\"%s.%.*s%s\\\"\";\n+\n+\t\t\tJ9UTF8 *definingClassFullQualifiedName = J9ROMSTRINGREF_UTF8DATA((J9ROMStringRef *)&constantPool[romMethodRef->classRefCPIndex]);\n+\t\t\tchar *fullyQualifiedDefiningClassName = convertToJavaFullyQualifiedName(vmThread, definingClassFullQualifiedName);\n+\t\t\tchar *methodSigParameters = convertMethodSignature(vmThread, J9ROMNAMEANDSIGNATURE_SIGNATURE(methodNameAndSig));\n+\n+\t\t\tif ((NULL != definingClassFullQualifiedName) && (NULL != methodSigParameters)) {\n+\t\t\t\tmsgLen = j9str_printf(PORTLIB, NULL, 0, VM_NPE_INVOKEMETHOD,\n+\t\t\t\t\tfullyQualifiedDefiningClassName, J9UTF8_LENGTH(methodName), J9UTF8_DATA(methodName), methodSigParameters);\n+\t\t\t\tnpeMsg = (char *)j9mem_allocate_memory(msgLen + 1, OMRMEM_CATEGORY_VM);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3098549ae6441da8e122bd8aafa5a3a51358bee"}, "originalPosition": 289}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5Nzg0MjU1", "url": "https://github.com/eclipse-openj9/openj9/pull/9623#pullrequestreview-499784255", "createdAt": "2020-09-30T20:25:45Z", "commit": {"oid": "a3098549ae6441da8e122bd8aafa5a3a51358bee"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMDoyNTo0NVrOHauCiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMDoyNTo0NVrOHauCiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc3OTMzOQ==", "bodyText": "Missing NULL check.", "url": "https://github.com/eclipse-openj9/openj9/pull/9623#discussion_r497779339", "createdAt": "2020-09-30T20:25:45Z", "author": {"login": "gacholio"}, "path": "runtime/vm/extendedMessageNPE.cpp", "diffHunk": "@@ -124,17 +339,17 @@ getCompleteNPEMessage(J9VMThread *vmThread, U_8 *bcCurrentPtr, J9ROMClass *romCl\n \t\t\tif (J9CPTYPE_FIELD == cpType) {\n \t\t\t\tJ9ROMConstantPoolItem *constantPool = J9_ROM_CP_FROM_ROM_CLASS(romClass);\n \t\t\t\tJ9ROMConstantPoolItem *cpItem = constantPool + index;\n-\t\t\t\tJ9ROMNameAndSignature *nameAndSig = J9ROMFIELDREF_NAMEANDSIGNATURE((J9ROMFieldRef *) cpItem);\n-\t\t\t\tJ9UTF8 *name = J9ROMNAMEANDSIGNATURE_NAME(nameAndSig);\n+\t\t\t\tJ9ROMNameAndSignature *fieldNameAndSig = J9ROMFIELDREF_NAMEANDSIGNATURE((J9ROMFieldRef *)cpItem);\n+\t\t\t\tJ9UTF8 *fieldName = J9ROMNAMEANDSIGNATURE_NAME(fieldNameAndSig);\n \n \t\t\t\tif (JBputfield == bcCurrent) {\n-\t\t\t\t\tmsgTemplate = \"Cannot assign field \\\"%2$.*1$s\\\"\";\n+\t\t\t\t\tmsgTemplate = \"Cannot assign field \\\"%.*s\\\"\";\n \t\t\t\t} else {\n-\t\t\t\t\tmsgTemplate = \"Cannot read field \\\"%2$.*1$s\\\"\";\n+\t\t\t\t\tmsgTemplate = \"Cannot read field \\\"%.*s\\\"\";\n \t\t\t\t}\n-\t\t\t\tmsgLen = j9str_printf(PORTLIB, NULL, 0, msgTemplate, J9UTF8_LENGTH(name), J9UTF8_DATA(name));\n+\t\t\t\tmsgLen = j9str_printf(PORTLIB, NULL, 0, msgTemplate, J9UTF8_LENGTH(fieldName), J9UTF8_DATA(fieldName));\n \t\t\t\tnpeMsg = (char *)j9mem_allocate_memory(msgLen + 1, OMRMEM_CATEGORY_VM);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3098549ae6441da8e122bd8aafa5a3a51358bee"}, "originalPosition": 244}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5ODQ5MDg1", "url": "https://github.com/eclipse-openj9/openj9/pull/9623#pullrequestreview-499849085", "createdAt": "2020-09-30T22:13:10Z", "commit": {"oid": "a3098549ae6441da8e122bd8aafa5a3a51358bee"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 996, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}