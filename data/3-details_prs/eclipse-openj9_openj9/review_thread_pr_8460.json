{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5MjA3MzU0", "number": 8460, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxOTowNzowNlrODcBuvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwNTozMTowOFrODdkVEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzE1MDY5OnYy", "diffSide": "RIGHT", "path": "runtime/oti/j9nonbuilder.h", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxOTowNzowNlrOFj2gUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxOTowNzowNlrOFj2gUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzEzNzQ4OA==", "bodyText": "compilation error:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            }\n          \n          \n            \n            } J9ClassPatchMap;", "url": "https://github.com/eclipse-openj9/openj9/pull/8460#discussion_r373137488", "createdAt": "2020-01-30T19:07:06Z", "author": {"login": "babsingh"}, "path": "runtime/oti/j9nonbuilder.h", "diffHunk": "@@ -1957,6 +1958,11 @@ typedef struct J9ClassPathEntry {\n #endif\n } J9ClassPathEntry;\n \n+typedef struct J9ClassPatchMap {\n+\tU_16 size;\n+\tU_16* indexMap;\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dad92bb98e2554102d78fc4d8e7b430635a1553a"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzQ2NzIyOnYy", "diffSide": "RIGHT", "path": "runtime/bcutil/defineclass.c", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMDo1NDo1N1rOFj5m5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMDo1NDo1N1rOFj5m5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE4ODMyNw==", "bodyText": "copyright update not required; file hasn't been edited.", "url": "https://github.com/eclipse-openj9/openj9/pull/8460#discussion_r373188327", "createdAt": "2020-01-30T20:54:57Z", "author": {"login": "babsingh"}, "path": "runtime/bcutil/defineclass.c", "diffHunk": "@@ -1,5 +1,5 @@\n /*******************************************************************************\n- * Copyright (c) 1991, 2019 IBM Corp. and others\n+ * Copyright (c) 1991, 2020 IBM Corp. and others", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e4f06080dbc668570b8a4380fb557dadbb51f30"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzQ2OTQ1OnYy", "diffSide": "RIGHT", "path": "runtime/jcl/common/jcldefine.c", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMDo1NTo0N1rOFj5oWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMDo1NTo0N1rOFj5oWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE4ODY5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tif (patchMap != NULL && patchMap->size != 0) {\n          \n          \n            \n            \tif ((patchMap != NULL) && (patchMap->size != 0)) {", "url": "https://github.com/eclipse-openj9/openj9/pull/8460#discussion_r373188697", "createdAt": "2020-01-30T20:55:47Z", "author": {"login": "babsingh"}, "path": "runtime/jcl/common/jcldefine.c", "diffHunk": "@@ -70,6 +70,10 @@ defineClassCommon(JNIEnv *env, jobject classLoaderObject,\n \t\tgoto done;\n \t}\n \n+\tif (patchMap != NULL && patchMap->size != 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e4f06080dbc668570b8a4380fb557dadbb51f30"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzQ3MDkxOnYy", "diffSide": "RIGHT", "path": "runtime/jcl/common/sun_misc_Unsafe.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMDo1NjoyMFrOFj5pUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMDo1NjoyMFrOFj5pUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE4ODk0Nw==", "bodyText": "may be use a macro for constant 128.", "url": "https://github.com/eclipse-openj9/openj9/pull/8460#discussion_r373188947", "createdAt": "2020-01-30T20:56:20Z", "author": {"login": "babsingh"}, "path": "runtime/jcl/common/sun_misc_Unsafe.cpp", "diffHunk": "@@ -96,19 +93,57 @@ Java_sun_misc_Unsafe_defineAnonymousClass(JNIEnv *env, jobject receiver, jclass\n \t\thostClassLoader = vm->systemClassLoader->classLoaderObject;\n \t}\n \tjobject hostClassLoaderLocalRef = vmFuncs->j9jni_createLocalRef(env, hostClassLoader);\n+\n+\tJ9ClassPatchMap cpPatchMap = {0, NULL};\n+\tj9array_t patchArray = NULL;\n+\tPORT_ACCESS_FROM_ENV(env);\n+\n+\tU_16 indexMap[128];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e4f06080dbc668570b8a4380fb557dadbb51f30"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzQ3Mjk3OnYy", "diffSide": "RIGHT", "path": "runtime/jcl/common/sun_misc_Unsafe.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMDo1Njo0N1rOFj5qbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMDo1Njo0N1rOFj5qbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE4OTIzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tcpPatchMap.indexMap = (U_16*)j9mem_allocate_memory(cpPatchMap.size * sizeof(U_16), J9MEM_CATEGORY_VM);\n          \n          \n            \n            \t\t\tcpPatchMap.indexMap = (U_16 *)j9mem_allocate_memory(cpPatchMap.size * sizeof(U_16), J9MEM_CATEGORY_VM);", "url": "https://github.com/eclipse-openj9/openj9/pull/8460#discussion_r373189230", "createdAt": "2020-01-30T20:56:47Z", "author": {"login": "babsingh"}, "path": "runtime/jcl/common/sun_misc_Unsafe.cpp", "diffHunk": "@@ -96,19 +93,57 @@ Java_sun_misc_Unsafe_defineAnonymousClass(JNIEnv *env, jobject receiver, jclass\n \t\thostClassLoader = vm->systemClassLoader->classLoaderObject;\n \t}\n \tjobject hostClassLoaderLocalRef = vmFuncs->j9jni_createLocalRef(env, hostClassLoader);\n+\n+\tJ9ClassPatchMap cpPatchMap = {0, NULL};\n+\tj9array_t patchArray = NULL;\n+\tPORT_ACCESS_FROM_ENV(env);\n+\n+\tU_16 indexMap[128];\n+\tif (constPatches != NULL) {\n+\t\tpatchArray = (j9array_t)J9_JNI_UNWRAP_REFERENCE(constPatches);\n+\t\tcpPatchMap.size = (U_16)J9INDEXABLEOBJECT_SIZE(currentThread, patchArray);\n+\t\tif (cpPatchMap.size <= 128) {\n+\t\t\tcpPatchMap.indexMap = indexMap;\n+\t\t} else {\n+\t\t\tcpPatchMap.indexMap = (U_16*)j9mem_allocate_memory(cpPatchMap.size * sizeof(U_16), J9MEM_CATEGORY_VM);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e4f06080dbc668570b8a4380fb557dadbb51f30"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzQ3NDAxOnYy", "diffSide": "RIGHT", "path": "runtime/jcl/common/sun_misc_Unsafe.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMDo1NzowMlrOFj5rCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMDo1NzowMlrOFj5rCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE4OTM4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tJ9Class * clazz = J9VM_J9CLASS_FROM_HEAPCLASS(currentThread, J9_JNI_UNWRAP_REFERENCE(anonClass));\n          \n          \n            \n            \t\tJ9Class *clazz = J9VM_J9CLASS_FROM_HEAPCLASS(currentThread, J9_JNI_UNWRAP_REFERENCE(anonClass));", "url": "https://github.com/eclipse-openj9/openj9/pull/8460#discussion_r373189385", "createdAt": "2020-01-30T20:57:02Z", "author": {"login": "babsingh"}, "path": "runtime/jcl/common/sun_misc_Unsafe.cpp", "diffHunk": "@@ -96,19 +93,57 @@ Java_sun_misc_Unsafe_defineAnonymousClass(JNIEnv *env, jobject receiver, jclass\n \t\thostClassLoader = vm->systemClassLoader->classLoaderObject;\n \t}\n \tjobject hostClassLoaderLocalRef = vmFuncs->j9jni_createLocalRef(env, hostClassLoader);\n+\n+\tJ9ClassPatchMap cpPatchMap = {0, NULL};\n+\tj9array_t patchArray = NULL;\n+\tPORT_ACCESS_FROM_ENV(env);\n+\n+\tU_16 indexMap[128];\n+\tif (constPatches != NULL) {\n+\t\tpatchArray = (j9array_t)J9_JNI_UNWRAP_REFERENCE(constPatches);\n+\t\tcpPatchMap.size = (U_16)J9INDEXABLEOBJECT_SIZE(currentThread, patchArray);\n+\t\tif (cpPatchMap.size <= 128) {\n+\t\t\tcpPatchMap.indexMap = indexMap;\n+\t\t} else {\n+\t\t\tcpPatchMap.indexMap = (U_16*)j9mem_allocate_memory(cpPatchMap.size * sizeof(U_16), J9MEM_CATEGORY_VM);\n+\t\t}\n+\t}\n+\n \tvmFuncs->internalExitVMToJNI(currentThread);\n \n \tjsize length = env->GetArrayLength(bytecodes);\n \n \t/* acquires access internally */\n-\tjclass anonClass = defineClassCommon(env, hostClassLoaderLocalRef, NULL,bytecodes, 0, length, protectionDomainLocalRef, J9_FINDCLASS_FLAG_UNSAFE | J9_FINDCLASS_FLAG_ANON, hostClazz);\n+\tjclass anonClass = defineClassCommon(env, hostClassLoaderLocalRef, NULL,bytecodes, 0, length, protectionDomainLocalRef, J9_FINDCLASS_FLAG_UNSAFE | J9_FINDCLASS_FLAG_ANON, hostClazz, &cpPatchMap);\n \tif (env->ExceptionCheck()) {\n \t\treturn NULL;\n \t} else if (NULL == anonClass) {\n \t\tthrowNewInternalError(env, NULL);\n \t\treturn NULL;\n \t}\n \n+\tif (constPatches != NULL) {\n+\t\tvmFuncs->internalEnterVMFromJNI(currentThread);\n+\t\tJ9Class * clazz = J9VM_J9CLASS_FROM_HEAPCLASS(currentThread, J9_JNI_UNWRAP_REFERENCE(anonClass));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e4f06080dbc668570b8a4380fb557dadbb51f30"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzQ3NDQxOnYy", "diffSide": "RIGHT", "path": "runtime/jcl/common/sun_misc_Unsafe.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMDo1NzoxMlrOFj5rTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMDo1NzoxMlrOFj5rTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE4OTQ1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tU_32 * cpShapeDescription = J9ROMCLASS_CPSHAPEDESCRIPTION(clazz->romClass);\n          \n          \n            \n            \t\tU_32 *cpShapeDescription = J9ROMCLASS_CPSHAPEDESCRIPTION(clazz->romClass);", "url": "https://github.com/eclipse-openj9/openj9/pull/8460#discussion_r373189454", "createdAt": "2020-01-30T20:57:12Z", "author": {"login": "babsingh"}, "path": "runtime/jcl/common/sun_misc_Unsafe.cpp", "diffHunk": "@@ -96,19 +93,57 @@ Java_sun_misc_Unsafe_defineAnonymousClass(JNIEnv *env, jobject receiver, jclass\n \t\thostClassLoader = vm->systemClassLoader->classLoaderObject;\n \t}\n \tjobject hostClassLoaderLocalRef = vmFuncs->j9jni_createLocalRef(env, hostClassLoader);\n+\n+\tJ9ClassPatchMap cpPatchMap = {0, NULL};\n+\tj9array_t patchArray = NULL;\n+\tPORT_ACCESS_FROM_ENV(env);\n+\n+\tU_16 indexMap[128];\n+\tif (constPatches != NULL) {\n+\t\tpatchArray = (j9array_t)J9_JNI_UNWRAP_REFERENCE(constPatches);\n+\t\tcpPatchMap.size = (U_16)J9INDEXABLEOBJECT_SIZE(currentThread, patchArray);\n+\t\tif (cpPatchMap.size <= 128) {\n+\t\t\tcpPatchMap.indexMap = indexMap;\n+\t\t} else {\n+\t\t\tcpPatchMap.indexMap = (U_16*)j9mem_allocate_memory(cpPatchMap.size * sizeof(U_16), J9MEM_CATEGORY_VM);\n+\t\t}\n+\t}\n+\n \tvmFuncs->internalExitVMToJNI(currentThread);\n \n \tjsize length = env->GetArrayLength(bytecodes);\n \n \t/* acquires access internally */\n-\tjclass anonClass = defineClassCommon(env, hostClassLoaderLocalRef, NULL,bytecodes, 0, length, protectionDomainLocalRef, J9_FINDCLASS_FLAG_UNSAFE | J9_FINDCLASS_FLAG_ANON, hostClazz);\n+\tjclass anonClass = defineClassCommon(env, hostClassLoaderLocalRef, NULL,bytecodes, 0, length, protectionDomainLocalRef, J9_FINDCLASS_FLAG_UNSAFE | J9_FINDCLASS_FLAG_ANON, hostClazz, &cpPatchMap);\n \tif (env->ExceptionCheck()) {\n \t\treturn NULL;\n \t} else if (NULL == anonClass) {\n \t\tthrowNewInternalError(env, NULL);\n \t\treturn NULL;\n \t}\n \n+\tif (constPatches != NULL) {\n+\t\tvmFuncs->internalEnterVMFromJNI(currentThread);\n+\t\tJ9Class * clazz = J9VM_J9CLASS_FROM_HEAPCLASS(currentThread, J9_JNI_UNWRAP_REFERENCE(anonClass));\n+\n+\t\tj9object_t item = NULL;\n+\t\tU_32 * cpShapeDescription = J9ROMCLASS_CPSHAPEDESCRIPTION(clazz->romClass);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e4f06080dbc668570b8a4380fb557dadbb51f30"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzQ3NDk1OnYy", "diffSide": "RIGHT", "path": "runtime/jcl/common/sun_misc_Unsafe.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMDo1NzoyMlrOFj5rqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMDo1NzoyMlrOFj5rqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE4OTU0NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tJ9ConstantPool * ramCP = J9_CP_FROM_CLASS(clazz);\n          \n          \n            \n            \t\tJ9ConstantPool *ramCP = J9_CP_FROM_CLASS(clazz);", "url": "https://github.com/eclipse-openj9/openj9/pull/8460#discussion_r373189545", "createdAt": "2020-01-30T20:57:22Z", "author": {"login": "babsingh"}, "path": "runtime/jcl/common/sun_misc_Unsafe.cpp", "diffHunk": "@@ -96,19 +93,57 @@ Java_sun_misc_Unsafe_defineAnonymousClass(JNIEnv *env, jobject receiver, jclass\n \t\thostClassLoader = vm->systemClassLoader->classLoaderObject;\n \t}\n \tjobject hostClassLoaderLocalRef = vmFuncs->j9jni_createLocalRef(env, hostClassLoader);\n+\n+\tJ9ClassPatchMap cpPatchMap = {0, NULL};\n+\tj9array_t patchArray = NULL;\n+\tPORT_ACCESS_FROM_ENV(env);\n+\n+\tU_16 indexMap[128];\n+\tif (constPatches != NULL) {\n+\t\tpatchArray = (j9array_t)J9_JNI_UNWRAP_REFERENCE(constPatches);\n+\t\tcpPatchMap.size = (U_16)J9INDEXABLEOBJECT_SIZE(currentThread, patchArray);\n+\t\tif (cpPatchMap.size <= 128) {\n+\t\t\tcpPatchMap.indexMap = indexMap;\n+\t\t} else {\n+\t\t\tcpPatchMap.indexMap = (U_16*)j9mem_allocate_memory(cpPatchMap.size * sizeof(U_16), J9MEM_CATEGORY_VM);\n+\t\t}\n+\t}\n+\n \tvmFuncs->internalExitVMToJNI(currentThread);\n \n \tjsize length = env->GetArrayLength(bytecodes);\n \n \t/* acquires access internally */\n-\tjclass anonClass = defineClassCommon(env, hostClassLoaderLocalRef, NULL,bytecodes, 0, length, protectionDomainLocalRef, J9_FINDCLASS_FLAG_UNSAFE | J9_FINDCLASS_FLAG_ANON, hostClazz);\n+\tjclass anonClass = defineClassCommon(env, hostClassLoaderLocalRef, NULL,bytecodes, 0, length, protectionDomainLocalRef, J9_FINDCLASS_FLAG_UNSAFE | J9_FINDCLASS_FLAG_ANON, hostClazz, &cpPatchMap);\n \tif (env->ExceptionCheck()) {\n \t\treturn NULL;\n \t} else if (NULL == anonClass) {\n \t\tthrowNewInternalError(env, NULL);\n \t\treturn NULL;\n \t}\n \n+\tif (constPatches != NULL) {\n+\t\tvmFuncs->internalEnterVMFromJNI(currentThread);\n+\t\tJ9Class * clazz = J9VM_J9CLASS_FROM_HEAPCLASS(currentThread, J9_JNI_UNWRAP_REFERENCE(anonClass));\n+\n+\t\tj9object_t item = NULL;\n+\t\tU_32 * cpShapeDescription = J9ROMCLASS_CPSHAPEDESCRIPTION(clazz->romClass);\n+\t\tJ9ConstantPool * ramCP = J9_CP_FROM_CLASS(clazz);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e4f06080dbc668570b8a4380fb557dadbb51f30"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNTAwMjQyOnYy", "diffSide": "RIGHT", "path": "runtime/jcl/common/sun_misc_Unsafe.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMTowNjo0NVrOFk_9jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMzo1MDoxNVrOFlD90A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM0MTAwNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t\t&& (J9UTF8_EQUALS(romString, J9ROMSTRINGREF_UTF8DATA((J9ROMStringRef *)&romCP[j])))) {\n          \n          \n            \n            \t\t\t\t\tif ((J9_CP_TYPE(cpShapeDescription, j) == J9CPTYPE_STRING)\n          \n          \n            \n            \t\t\t\t\t\t&& J9UTF8_EQUALS(romString, J9ROMSTRINGREF_UTF8DATA((J9ROMStringRef *)&romCP[j]))\n          \n          \n            \n            \t\t\t\t\t) {", "url": "https://github.com/eclipse-openj9/openj9/pull/8460#discussion_r374341006", "createdAt": "2020-02-03T21:06:45Z", "author": {"login": "babsingh"}, "path": "runtime/jcl/common/sun_misc_Unsafe.cpp", "diffHunk": "@@ -96,19 +95,65 @@ Java_sun_misc_Unsafe_defineAnonymousClass(JNIEnv *env, jobject receiver, jclass\n \t\thostClassLoader = vm->systemClassLoader->classLoaderObject;\n \t}\n \tjobject hostClassLoaderLocalRef = vmFuncs->j9jni_createLocalRef(env, hostClassLoader);\n+\n+\tJ9ClassPatchMap cpPatchMap = {0, NULL};\n+\tj9array_t patchArray = NULL;\n+\tPORT_ACCESS_FROM_ENV(env);\n+\n+\tU_16 indexMap[BUFFER_SIZE];\n+\tif (constPatches != NULL) {\n+\t\tpatchArray = (j9array_t)J9_JNI_UNWRAP_REFERENCE(constPatches);\n+\t\tcpPatchMap.size = (U_16)J9INDEXABLEOBJECT_SIZE(currentThread, patchArray);\n+\t\tif (cpPatchMap.size <= BUFFER_SIZE) {\n+\t\t\tcpPatchMap.indexMap = indexMap;\n+\t\t} else {\n+\t\t\tcpPatchMap.indexMap = (U_16 *)j9mem_allocate_memory(cpPatchMap.size * sizeof(U_16), J9MEM_CATEGORY_VM);\n+\t\t}\n+\t}\n+\n \tvmFuncs->internalExitVMToJNI(currentThread);\n \n \tjsize length = env->GetArrayLength(bytecodes);\n \n \t/* acquires access internally */\n-\tjclass anonClass = defineClassCommon(env, hostClassLoaderLocalRef, NULL,bytecodes, 0, length, protectionDomainLocalRef, J9_FINDCLASS_FLAG_UNSAFE | J9_FINDCLASS_FLAG_ANON, hostClazz);\n+\tjclass anonClass = defineClassCommon(env, hostClassLoaderLocalRef, NULL,bytecodes, 0, length, protectionDomainLocalRef, J9_FINDCLASS_FLAG_UNSAFE | J9_FINDCLASS_FLAG_ANON, hostClazz, &cpPatchMap);\n \tif (env->ExceptionCheck()) {\n \t\treturn NULL;\n \t} else if (NULL == anonClass) {\n \t\tthrowNewInternalError(env, NULL);\n \t\treturn NULL;\n \t}\n \n+\tif (constPatches != NULL) {\n+\t\tvmFuncs->internalEnterVMFromJNI(currentThread);\n+\t\tJ9Class *clazz = J9VM_J9CLASS_FROM_HEAPCLASS(currentThread, J9_JNI_UNWRAP_REFERENCE(anonClass));\n+\n+\t\tj9object_t item = NULL;\n+\t\tU_32 *cpShapeDescription = J9ROMCLASS_CPSHAPEDESCRIPTION(clazz->romClass);\n+\t\tJ9ConstantPool *ramCP = J9_CP_FROM_CLASS(clazz);\n+\t\tJ9ROMConstantPoolItem *romCP = ramCP->romConstantPool;\n+\n+\t\tfor (U_16 i = 0; i < cpPatchMap.size; i++) {\n+\t\t\titem = J9JAVAARRAYOFOBJECT_LOAD(currentThread, patchArray, i);\n+\t\t\tif ((item != NULL) && (J9_CP_TYPE(cpShapeDescription, cpPatchMap.indexMap[i]) == J9CPTYPE_STRING)) {\n+\t\t\t\tJ9UTF8 *romString = J9ROMSTRINGREF_UTF8DATA((J9ROMStringRef *)&romCP[cpPatchMap.indexMap[i]]);\n+\n+\t\t\t\tfor (U_16 j = 1; j < clazz->romClass->ramConstantPoolCount; j++) {\n+\t\t\t\t\tif ((J9_CP_TYPE(cpShapeDescription, j) == J9CPTYPE_STRING)\n+\t\t\t\t\t&& (J9UTF8_EQUALS(romString, J9ROMSTRINGREF_UTF8DATA((J9ROMStringRef *)&romCP[j])))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a97a1e1ceb3a1eb95f734ea40332f7bd5609f08f"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQwNjYwOA==", "bodyText": "fixed as per suggested", "url": "https://github.com/eclipse-openj9/openj9/pull/8460#discussion_r374406608", "createdAt": "2020-02-03T23:50:15Z", "author": {"login": "fengxue-IS"}, "path": "runtime/jcl/common/sun_misc_Unsafe.cpp", "diffHunk": "@@ -96,19 +95,65 @@ Java_sun_misc_Unsafe_defineAnonymousClass(JNIEnv *env, jobject receiver, jclass\n \t\thostClassLoader = vm->systemClassLoader->classLoaderObject;\n \t}\n \tjobject hostClassLoaderLocalRef = vmFuncs->j9jni_createLocalRef(env, hostClassLoader);\n+\n+\tJ9ClassPatchMap cpPatchMap = {0, NULL};\n+\tj9array_t patchArray = NULL;\n+\tPORT_ACCESS_FROM_ENV(env);\n+\n+\tU_16 indexMap[BUFFER_SIZE];\n+\tif (constPatches != NULL) {\n+\t\tpatchArray = (j9array_t)J9_JNI_UNWRAP_REFERENCE(constPatches);\n+\t\tcpPatchMap.size = (U_16)J9INDEXABLEOBJECT_SIZE(currentThread, patchArray);\n+\t\tif (cpPatchMap.size <= BUFFER_SIZE) {\n+\t\t\tcpPatchMap.indexMap = indexMap;\n+\t\t} else {\n+\t\t\tcpPatchMap.indexMap = (U_16 *)j9mem_allocate_memory(cpPatchMap.size * sizeof(U_16), J9MEM_CATEGORY_VM);\n+\t\t}\n+\t}\n+\n \tvmFuncs->internalExitVMToJNI(currentThread);\n \n \tjsize length = env->GetArrayLength(bytecodes);\n \n \t/* acquires access internally */\n-\tjclass anonClass = defineClassCommon(env, hostClassLoaderLocalRef, NULL,bytecodes, 0, length, protectionDomainLocalRef, J9_FINDCLASS_FLAG_UNSAFE | J9_FINDCLASS_FLAG_ANON, hostClazz);\n+\tjclass anonClass = defineClassCommon(env, hostClassLoaderLocalRef, NULL,bytecodes, 0, length, protectionDomainLocalRef, J9_FINDCLASS_FLAG_UNSAFE | J9_FINDCLASS_FLAG_ANON, hostClazz, &cpPatchMap);\n \tif (env->ExceptionCheck()) {\n \t\treturn NULL;\n \t} else if (NULL == anonClass) {\n \t\tthrowNewInternalError(env, NULL);\n \t\treturn NULL;\n \t}\n \n+\tif (constPatches != NULL) {\n+\t\tvmFuncs->internalEnterVMFromJNI(currentThread);\n+\t\tJ9Class *clazz = J9VM_J9CLASS_FROM_HEAPCLASS(currentThread, J9_JNI_UNWRAP_REFERENCE(anonClass));\n+\n+\t\tj9object_t item = NULL;\n+\t\tU_32 *cpShapeDescription = J9ROMCLASS_CPSHAPEDESCRIPTION(clazz->romClass);\n+\t\tJ9ConstantPool *ramCP = J9_CP_FROM_CLASS(clazz);\n+\t\tJ9ROMConstantPoolItem *romCP = ramCP->romConstantPool;\n+\n+\t\tfor (U_16 i = 0; i < cpPatchMap.size; i++) {\n+\t\t\titem = J9JAVAARRAYOFOBJECT_LOAD(currentThread, patchArray, i);\n+\t\t\tif ((item != NULL) && (J9_CP_TYPE(cpShapeDescription, cpPatchMap.indexMap[i]) == J9CPTYPE_STRING)) {\n+\t\t\t\tJ9UTF8 *romString = J9ROMSTRINGREF_UTF8DATA((J9ROMStringRef *)&romCP[cpPatchMap.indexMap[i]]);\n+\n+\t\t\t\tfor (U_16 j = 1; j < clazz->romClass->ramConstantPoolCount; j++) {\n+\t\t\t\t\tif ((J9_CP_TYPE(cpShapeDescription, j) == J9CPTYPE_STRING)\n+\t\t\t\t\t&& (J9UTF8_EQUALS(romString, J9ROMSTRINGREF_UTF8DATA((J9ROMStringRef *)&romCP[j])))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM0MTAwNg=="}, "originalCommit": {"oid": "a97a1e1ceb3a1eb95f734ea40332f7bd5609f08f"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMzI5NTExOnYy", "diffSide": "RIGHT", "path": "runtime/bcutil/ConstantPoolMap.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwNToyMzo0NlrOFmPl6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwNToyMzo0NlrOFmPl6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY0NTY3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * If valid patchMap structure passed, class require ConstantPool patching,\n          \n          \n            \n            \t * If a valid patchMap structure is passed, this class requirse ConstantPool patching.", "url": "https://github.com/eclipse-openj9/openj9/pull/8460#discussion_r375645672", "createdAt": "2020-02-06T05:23:46Z", "author": {"login": "DanHeidinga"}, "path": "runtime/bcutil/ConstantPoolMap.cpp", "diffHunk": "@@ -302,6 +302,20 @@ ConstantPoolMap::computeConstantPoolMapAndSizes()\n \t\t\t}\n \t\t}\n \t}\n+\n+\tJ9ClassPatchMap *map = _context->patchMap();\n+\n+\t/**\n+\t * If valid patchMap structure passed, class require ConstantPool patching,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23f72fb73c321a814b91527326568e2f89dc6f73"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMzI5NjAyOnYy", "diffSide": "RIGHT", "path": "runtime/bcutil/ConstantPoolMap.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwNToyNDoyOFrOFmPmcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwNToyNDoyOFrOFmPmcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY0NTgxMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * record Classfile to J9Class constantpool index mapping to patch RAM Class\n          \n          \n            \n            \t * Record the index mapping from Classfile to J9Class constantpool to allow patching the RAM CP", "url": "https://github.com/eclipse-openj9/openj9/pull/8460#discussion_r375645810", "createdAt": "2020-02-06T05:24:28Z", "author": {"login": "DanHeidinga"}, "path": "runtime/bcutil/ConstantPoolMap.cpp", "diffHunk": "@@ -302,6 +302,20 @@ ConstantPoolMap::computeConstantPoolMapAndSizes()\n \t\t\t}\n \t\t}\n \t}\n+\n+\tJ9ClassPatchMap *map = _context->patchMap();\n+\n+\t/**\n+\t * If valid patchMap structure passed, class require ConstantPool patching,\n+\t * record Classfile to J9Class constantpool index mapping to patch RAM Class", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23f72fb73c321a814b91527326568e2f89dc6f73"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMzMwMjA0OnYy", "diffSide": "RIGHT", "path": "runtime/jcl/common/sun_misc_Unsafe.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwNToyODo1N1rOFmPp3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwNToyODo1N1rOFmPp3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY0NjY4Ng==", "bodyText": "This function gets VMAccess so it can't be called with it.  Need to swap these two lines", "url": "https://github.com/eclipse-openj9/openj9/pull/8460#discussion_r375646686", "createdAt": "2020-02-06T05:28:57Z", "author": {"login": "DanHeidinga"}, "path": "runtime/jcl/common/sun_misc_Unsafe.cpp", "diffHunk": "@@ -96,19 +95,72 @@ Java_sun_misc_Unsafe_defineAnonymousClass(JNIEnv *env, jobject receiver, jclass\n \t\thostClassLoader = vm->systemClassLoader->classLoaderObject;\n \t}\n \tjobject hostClassLoaderLocalRef = vmFuncs->j9jni_createLocalRef(env, hostClassLoader);\n+\n+\tJ9ClassPatchMap cpPatchMap = {0, NULL};\n+\tj9array_t patchArray = NULL;\n+\tPORT_ACCESS_FROM_ENV(env);\n+\n+\tU_16 indexMap[BUFFER_SIZE];\n+\tif (constPatches != NULL) {\n+\t\tpatchArray = (j9array_t)J9_JNI_UNWRAP_REFERENCE(constPatches);\n+\t\tcpPatchMap.size = (U_16)J9INDEXABLEOBJECT_SIZE(currentThread, patchArray);\n+\t\tif (cpPatchMap.size <= BUFFER_SIZE) {\n+\t\t\tcpPatchMap.indexMap = indexMap;\n+\t\t} else {\n+\t\t\tcpPatchMap.indexMap = (U_16 *)j9mem_allocate_memory(cpPatchMap.size * sizeof(U_16), J9MEM_CATEGORY_VM);\n+\n+\t\t\tif (cpPatchMap.indexMap == NULL) {\n+\t\t\t\tvmFuncs->throwNativeOOMError(env, 0, 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23f72fb73c321a814b91527326568e2f89dc6f73"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMzMwNTEzOnYy", "diffSide": "RIGHT", "path": "runtime/jcl/common/sun_misc_Unsafe.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwNTozMTowOFrOFmPrrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwNTozMTowOFrOFmPrrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY0NzE0OA==", "bodyText": "It's a good practice to null out fields that have been released even when the end of the function is so close.  Future changes to the file may accidentally reuse the freed mem if we don't null it now.", "url": "https://github.com/eclipse-openj9/openj9/pull/8460#discussion_r375647148", "createdAt": "2020-02-06T05:31:08Z", "author": {"login": "DanHeidinga"}, "path": "runtime/jcl/common/sun_misc_Unsafe.cpp", "diffHunk": "@@ -96,19 +95,72 @@ Java_sun_misc_Unsafe_defineAnonymousClass(JNIEnv *env, jobject receiver, jclass\n \t\thostClassLoader = vm->systemClassLoader->classLoaderObject;\n \t}\n \tjobject hostClassLoaderLocalRef = vmFuncs->j9jni_createLocalRef(env, hostClassLoader);\n+\n+\tJ9ClassPatchMap cpPatchMap = {0, NULL};\n+\tj9array_t patchArray = NULL;\n+\tPORT_ACCESS_FROM_ENV(env);\n+\n+\tU_16 indexMap[BUFFER_SIZE];\n+\tif (constPatches != NULL) {\n+\t\tpatchArray = (j9array_t)J9_JNI_UNWRAP_REFERENCE(constPatches);\n+\t\tcpPatchMap.size = (U_16)J9INDEXABLEOBJECT_SIZE(currentThread, patchArray);\n+\t\tif (cpPatchMap.size <= BUFFER_SIZE) {\n+\t\t\tcpPatchMap.indexMap = indexMap;\n+\t\t} else {\n+\t\t\tcpPatchMap.indexMap = (U_16 *)j9mem_allocate_memory(cpPatchMap.size * sizeof(U_16), J9MEM_CATEGORY_VM);\n+\n+\t\t\tif (cpPatchMap.indexMap == NULL) {\n+\t\t\t\tvmFuncs->throwNativeOOMError(env, 0, 0);\n+\t\t\t\tvmFuncs->internalExitVMToJNI(currentThread);\n+\t\t\t\treturn NULL;\n+\t\t\t}\n+\t\t}\n+\t}\n+\n \tvmFuncs->internalExitVMToJNI(currentThread);\n \n \tjsize length = env->GetArrayLength(bytecodes);\n \n \t/* acquires access internally */\n-\tjclass anonClass = defineClassCommon(env, hostClassLoaderLocalRef, NULL,bytecodes, 0, length, protectionDomainLocalRef, J9_FINDCLASS_FLAG_UNSAFE | J9_FINDCLASS_FLAG_ANON, hostClazz);\n+\tjclass anonClass = defineClassCommon(env, hostClassLoaderLocalRef, NULL,bytecodes, 0, length, protectionDomainLocalRef, J9_FINDCLASS_FLAG_UNSAFE | J9_FINDCLASS_FLAG_ANON, hostClazz, &cpPatchMap);\n \tif (env->ExceptionCheck()) {\n \t\treturn NULL;\n \t} else if (NULL == anonClass) {\n \t\tthrowNewInternalError(env, NULL);\n \t\treturn NULL;\n \t}\n \n+\tif (constPatches != NULL) {\n+\t\tvmFuncs->internalEnterVMFromJNI(currentThread);\n+\t\tJ9Class *clazz = J9VM_J9CLASS_FROM_HEAPCLASS(currentThread, J9_JNI_UNWRAP_REFERENCE(anonClass));\n+\t\tU_32 *cpShapeDescription = J9ROMCLASS_CPSHAPEDESCRIPTION(clazz->romClass);\n+\t\tJ9ConstantPool *ramCP = J9_CP_FROM_CLASS(clazz);\n+\t\tJ9ROMConstantPoolItem *romCP = ramCP->romConstantPool;\n+\n+\t\t/* Get J9 constantpool mapped item for patch item, only support patching STRING entries has been added */\n+\t\tfor (U_16 i = 0; i < cpPatchMap.size; i++) {\n+\t\t\tj9object_t item = J9JAVAARRAYOFOBJECT_LOAD(currentThread, patchArray, i);\n+\t\t\tif ((item != NULL) && (J9_CP_TYPE(cpShapeDescription, cpPatchMap.indexMap[i]) == J9CPTYPE_STRING)) {\n+\t\t\t\tJ9UTF8 *romString = J9ROMSTRINGREF_UTF8DATA((J9ROMStringRef *)&romCP[cpPatchMap.indexMap[i]]);\n+\n+\t\t\t\t/* For each patch object, search the RAM constantpool for identical string entries */\n+\t\t\t\tfor (U_16 j = 1; j < clazz->romClass->ramConstantPoolCount; j++) {\n+\t\t\t\t\tif ((J9_CP_TYPE(cpShapeDescription, j) == J9CPTYPE_STRING)\n+\t\t\t\t\t\t&& J9UTF8_EQUALS(romString, J9ROMSTRINGREF_UTF8DATA((J9ROMStringRef *)&romCP[j]))\n+\t\t\t\t\t) {\n+\t\t\t\t\t\tJ9RAMStringRef *ramStringRef = ((J9RAMStringRef *)ramCP) + j;\n+\t\t\t\t\t\tJ9STATIC_OBJECT_STORE(currentThread, clazz, &ramStringRef->stringObject, item);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\n+\t\tif (cpPatchMap.size > BUFFER_SIZE) {\n+\t\t\tj9mem_free_memory(cpPatchMap.indexMap);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23f72fb73c321a814b91527326568e2f89dc6f73"}, "originalPosition": 101}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 677, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}