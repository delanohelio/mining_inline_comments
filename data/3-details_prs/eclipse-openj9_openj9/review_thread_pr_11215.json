{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIyNzYzMzM3", "number": 11215, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMjo1MzowMlrOE_2A-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNjo1NzoyMlrOFAW5kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MzgwNzI4OnYy", "diffSide": "RIGHT", "path": "runtime/rasdump/javadump.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMjo1MzowMlrOH9xhCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMjo1NjowOVrOH9xm7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDUzNjQ1OQ==", "bodyText": "If the buffer isn't big enough and the string is cut off, it won't have a \\n at the end.", "url": "https://github.com/eclipse-openj9/openj9/pull/11215#discussion_r534536459", "createdAt": "2020-12-02T22:53:02Z", "author": {"login": "pshipton"}, "path": "runtime/rasdump/javadump.cpp", "diffHunk": "@@ -5291,7 +5292,29 @@ JavaCoreDumpWriter::writeCPUinfo(void)\n \t_OutputStream.writeCharacters(\n \t\t\t\"2CITARGETCPU   Target CPUs: \");\n \t_OutputStream.writeInteger(target, \"%i\\n\");\n+\t\n+\tint BUFF_SIZE = 400;\n+\tchar buff[BUFF_SIZE];\n+\tif (_VirtualMachine->jitConfig) {\n+\t\t_OutputStream.writeCharacters(\n+\t\t\t\t\"2CIJITFEATURE  CPU features (JIT): \");\n+\t\tomrsysinfo_get_processor_feature_string(&_VirtualMachine->jitConfig->targetProcessor, buff, BUFF_SIZE);\n+\t\t_OutputStream.writeCharacters(buff);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e02ea584e7691d15ee127e802277a470fed8d612"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDUzNzk2Ng==", "bodyText": "I think it would be better, more flexible, if omrsysinfo_get_processor_feature_string() didn't include the \\n and that was handled here. Not every use of omrsysinfo_get_processor_feature_string() may want \\n at the end. Ideally there would also be a return value to indicate if the buffer was big enough or not.", "url": "https://github.com/eclipse-openj9/openj9/pull/11215#discussion_r534537966", "createdAt": "2020-12-02T22:56:09Z", "author": {"login": "pshipton"}, "path": "runtime/rasdump/javadump.cpp", "diffHunk": "@@ -5291,7 +5292,29 @@ JavaCoreDumpWriter::writeCPUinfo(void)\n \t_OutputStream.writeCharacters(\n \t\t\t\"2CITARGETCPU   Target CPUs: \");\n \t_OutputStream.writeInteger(target, \"%i\\n\");\n+\t\n+\tint BUFF_SIZE = 400;\n+\tchar buff[BUFF_SIZE];\n+\tif (_VirtualMachine->jitConfig) {\n+\t\t_OutputStream.writeCharacters(\n+\t\t\t\t\"2CIJITFEATURE  CPU features (JIT): \");\n+\t\tomrsysinfo_get_processor_feature_string(&_VirtualMachine->jitConfig->targetProcessor, buff, BUFF_SIZE);\n+\t\t_OutputStream.writeCharacters(buff);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDUzNjQ1OQ=="}, "originalCommit": {"oid": "e02ea584e7691d15ee127e802277a470fed8d612"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1OTE4NTMyOnYy", "diffSide": "RIGHT", "path": "runtime/rasdump/javadump.cpp", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNjo1NTo0NlrOH-m0BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxOTo0MToxMVrOH-uVeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQwOTY2OQ==", "bodyText": "Why do we need both of these? Which one is used for what?", "url": "https://github.com/eclipse-openj9/openj9/pull/11215#discussion_r535409669", "createdAt": "2020-12-03T16:55:46Z", "author": {"login": "fjeremic"}, "path": "runtime/rasdump/javadump.cpp", "diffHunk": "@@ -5263,6 +5263,7 @@ void\n JavaCoreDumpWriter::writeCPUinfo(void)\n {\n \tPORT_ACCESS_FROM_PORT(_PortLibrary);\n+\tOMRPORT_ACCESS_FROM_J9PORT(_PortLibrary);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a457992637fdadeafcf8d3b6a5c453354af0ef81"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQyNDE1Mg==", "bodyText": "j9sysinfo_get_number_CPUs_by_type uses PORT_ACCESS_FROM_PORT(_PortLibrary);\nomrsysinfo_get_processor_feature_string uses OMRPORT_ACCESS_FROM_J9PORT(_PortLibrary);", "url": "https://github.com/eclipse-openj9/openj9/pull/11215#discussion_r535424152", "createdAt": "2020-12-03T17:10:41Z", "author": {"login": "harryyu1994"}, "path": "runtime/rasdump/javadump.cpp", "diffHunk": "@@ -5263,6 +5263,7 @@ void\n JavaCoreDumpWriter::writeCPUinfo(void)\n {\n \tPORT_ACCESS_FROM_PORT(_PortLibrary);\n+\tOMRPORT_ACCESS_FROM_J9PORT(_PortLibrary);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQwOTY2OQ=="}, "originalCommit": {"oid": "a457992637fdadeafcf8d3b6a5c453354af0ef81"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ1Mjc0MQ==", "bodyText": "Are we able to just use omrsysinfo_get_number_CPUs_by_type? Not sure what the J9 version provides here.", "url": "https://github.com/eclipse-openj9/openj9/pull/11215#discussion_r535452741", "createdAt": "2020-12-03T17:51:50Z", "author": {"login": "fjeremic"}, "path": "runtime/rasdump/javadump.cpp", "diffHunk": "@@ -5263,6 +5263,7 @@ void\n JavaCoreDumpWriter::writeCPUinfo(void)\n {\n \tPORT_ACCESS_FROM_PORT(_PortLibrary);\n+\tOMRPORT_ACCESS_FROM_J9PORT(_PortLibrary);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQwOTY2OQ=="}, "originalCommit": {"oid": "a457992637fdadeafcf8d3b6a5c453354af0ef81"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTUxNjE0MA==", "bodyText": "yea i think we can.\n#define j9sysinfo_get_number_CPUs_by_type(param1) OMRPORT_FROM_J9PORT(privatePortLibrary)->sysinfo_get_number_CPUs_by_type(OMRPORT_FROM_J9PORT(privatePortLibrary),param1)\n\nthey are equivalent", "url": "https://github.com/eclipse-openj9/openj9/pull/11215#discussion_r535516140", "createdAt": "2020-12-03T19:22:41Z", "author": {"login": "harryyu1994"}, "path": "runtime/rasdump/javadump.cpp", "diffHunk": "@@ -5263,6 +5263,7 @@ void\n JavaCoreDumpWriter::writeCPUinfo(void)\n {\n \tPORT_ACCESS_FROM_PORT(_PortLibrary);\n+\tOMRPORT_ACCESS_FROM_J9PORT(_PortLibrary);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQwOTY2OQ=="}, "originalCommit": {"oid": "a457992637fdadeafcf8d3b6a5c453354af0ef81"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTUzMjkyMQ==", "bodyText": "Everything in the OMR port library at the time OMR was created got j9 macros so the code didn't all need to be modified. No issues with using the omr variants directly.", "url": "https://github.com/eclipse-openj9/openj9/pull/11215#discussion_r535532921", "createdAt": "2020-12-03T19:41:11Z", "author": {"login": "pshipton"}, "path": "runtime/rasdump/javadump.cpp", "diffHunk": "@@ -5263,6 +5263,7 @@ void\n JavaCoreDumpWriter::writeCPUinfo(void)\n {\n \tPORT_ACCESS_FROM_PORT(_PortLibrary);\n+\tOMRPORT_ACCESS_FROM_J9PORT(_PortLibrary);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQwOTY2OQ=="}, "originalCommit": {"oid": "a457992637fdadeafcf8d3b6a5c453354af0ef81"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1OTE5NTA1OnYy", "diffSide": "RIGHT", "path": "runtime/rasdump/javadump.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNjo1NzoyMlrOH-m6XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNjo1NzoyMlrOH-m6XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQxMTI5Mw==", "bodyText": "Are we able to fold BUFF_SIZE into buff and replace uses of BUFF_SIZE with sizeof(buff)?", "url": "https://github.com/eclipse-openj9/openj9/pull/11215#discussion_r535411293", "createdAt": "2020-12-03T16:57:22Z", "author": {"login": "fjeremic"}, "path": "runtime/rasdump/javadump.cpp", "diffHunk": "@@ -5291,7 +5292,38 @@ JavaCoreDumpWriter::writeCPUinfo(void)\n \t_OutputStream.writeCharacters(\n \t\t\t\"2CITARGETCPU   Target CPUs: \");\n \t_OutputStream.writeInteger(target, \"%i\\n\");\n+\t\n+\tint BUFF_SIZE = 400;\n+\tchar buff[BUFF_SIZE];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a457992637fdadeafcf8d3b6a5c453354af0ef81"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 942, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}