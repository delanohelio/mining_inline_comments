{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxNTAyMDU4", "number": 10670, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMzo1NDo1NVrOEmnRcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMzo1NDo1NVrOEmnRcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTI0Nzg3OnYy", "diffSide": "RIGHT", "path": "jcl/src/java.base/share/classes/java/lang/J9VMInternals.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMzo1NDo1NVrOHWvs6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNjo1NTo0MFrOHW32nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzYxMjI2NQ==", "bodyText": "Would it be better to individually null check each of these items and avoid the exception on this path?  I know this only called for formatting a NoSuchMethod exception message but it seems wasteful to throw an NPE when we could avoid it", "url": "https://github.com/eclipse-openj9/openj9/pull/10670#discussion_r493612265", "createdAt": "2020-09-23T13:54:55Z", "author": {"login": "DanHeidinga"}, "path": "jcl/src/java.base/share/classes/java/lang/J9VMInternals.java", "diffHunk": "@@ -492,25 +492,30 @@ static int fastIdentityHashCode(Object anObject) {\n \t\n \t\n \tprivate static String[] getClassInfoStrings(final Class<?> clazz, String classPath){\n-\t\tString classLoader;\n+\t\tString classLoaderStr = \"<Bootstrap Loader>\"; //$NON-NLS-1$\n+\t\tString cpResult = \"<Unknown>\"; //$NON-NLS-1$\n \t\t\n-\t\tif (classPath != null) {\n-\t\t\tclassLoader = \"<Bootstrap Loader>\";\n-\t\t} else {\n-\t\t\tclassLoader = clazz.getClassLoader().toString();\n-\t\t\tclassPath = (String)AccessController.doPrivileged(new PrivilegedAction() {\n-\t\t\t\tpublic Object run() {\n-\t\t\t\t\tString path = null;\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tpath = clazz.getProtectionDomain().getCodeSource().getLocation().toString();\n-\t\t\t\t\t} catch (Exception e) {\n-\t\t\t\t\t\tpath = \"<Unknown>\";\n+\t\tif (classPath == null) {\n+\t\t\tClassLoader classLoader = clazz.getClassLoader();\n+\t\t\tif (classLoader != null) {\n+\t\t\t\tclassLoaderStr = classLoader.toString();\n+\t\t\t\tclassPath = AccessController.doPrivileged(new PrivilegedAction<String>() {\n+\t\t\t\t\t@Override\n+\t\t\t\t\tpublic String run() {\n+\t\t\t\t\t\tString path = null;\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\tpath = clazz.getProtectionDomain().getCodeSource().getLocation().toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "470fccc8aa618a71e00e551be8fe532242fac289"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzYxODMwNg==", "bodyText": "The waste is in proportion to the frequency with which it occurs. If it happens only vary rarely, then I'm fine with this the way it is.", "url": "https://github.com/eclipse-openj9/openj9/pull/10670#discussion_r493618306", "createdAt": "2020-09-23T14:02:14Z", "author": {"login": "keithc-ca"}, "path": "jcl/src/java.base/share/classes/java/lang/J9VMInternals.java", "diffHunk": "@@ -492,25 +492,30 @@ static int fastIdentityHashCode(Object anObject) {\n \t\n \t\n \tprivate static String[] getClassInfoStrings(final Class<?> clazz, String classPath){\n-\t\tString classLoader;\n+\t\tString classLoaderStr = \"<Bootstrap Loader>\"; //$NON-NLS-1$\n+\t\tString cpResult = \"<Unknown>\"; //$NON-NLS-1$\n \t\t\n-\t\tif (classPath != null) {\n-\t\t\tclassLoader = \"<Bootstrap Loader>\";\n-\t\t} else {\n-\t\t\tclassLoader = clazz.getClassLoader().toString();\n-\t\t\tclassPath = (String)AccessController.doPrivileged(new PrivilegedAction() {\n-\t\t\t\tpublic Object run() {\n-\t\t\t\t\tString path = null;\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tpath = clazz.getProtectionDomain().getCodeSource().getLocation().toString();\n-\t\t\t\t\t} catch (Exception e) {\n-\t\t\t\t\t\tpath = \"<Unknown>\";\n+\t\tif (classPath == null) {\n+\t\t\tClassLoader classLoader = clazz.getClassLoader();\n+\t\t\tif (classLoader != null) {\n+\t\t\t\tclassLoaderStr = classLoader.toString();\n+\t\t\t\tclassPath = AccessController.doPrivileged(new PrivilegedAction<String>() {\n+\t\t\t\t\t@Override\n+\t\t\t\t\tpublic String run() {\n+\t\t\t\t\t\tString path = null;\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\tpath = clazz.getProtectionDomain().getCodeSource().getLocation().toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzYxMjI2NQ=="}, "originalCommit": {"oid": "470fccc8aa618a71e00e551be8fe532242fac289"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzczNzcwMw==", "bodyText": "With the fix I've made to check for the bootstrap loader, this shouldn't normally throw any exception. It would only occur for a custom classloader that doesn't bother to implement protection domains or code source.", "url": "https://github.com/eclipse-openj9/openj9/pull/10670#discussion_r493737703", "createdAt": "2020-09-23T16:42:22Z", "author": {"login": "pshipton"}, "path": "jcl/src/java.base/share/classes/java/lang/J9VMInternals.java", "diffHunk": "@@ -492,25 +492,30 @@ static int fastIdentityHashCode(Object anObject) {\n \t\n \t\n \tprivate static String[] getClassInfoStrings(final Class<?> clazz, String classPath){\n-\t\tString classLoader;\n+\t\tString classLoaderStr = \"<Bootstrap Loader>\"; //$NON-NLS-1$\n+\t\tString cpResult = \"<Unknown>\"; //$NON-NLS-1$\n \t\t\n-\t\tif (classPath != null) {\n-\t\t\tclassLoader = \"<Bootstrap Loader>\";\n-\t\t} else {\n-\t\t\tclassLoader = clazz.getClassLoader().toString();\n-\t\t\tclassPath = (String)AccessController.doPrivileged(new PrivilegedAction() {\n-\t\t\t\tpublic Object run() {\n-\t\t\t\t\tString path = null;\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tpath = clazz.getProtectionDomain().getCodeSource().getLocation().toString();\n-\t\t\t\t\t} catch (Exception e) {\n-\t\t\t\t\t\tpath = \"<Unknown>\";\n+\t\tif (classPath == null) {\n+\t\t\tClassLoader classLoader = clazz.getClassLoader();\n+\t\t\tif (classLoader != null) {\n+\t\t\t\tclassLoaderStr = classLoader.toString();\n+\t\t\t\tclassPath = AccessController.doPrivileged(new PrivilegedAction<String>() {\n+\t\t\t\t\t@Override\n+\t\t\t\t\tpublic String run() {\n+\t\t\t\t\t\tString path = null;\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\tpath = clazz.getProtectionDomain().getCodeSource().getLocation().toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzYxMjI2NQ=="}, "originalCommit": {"oid": "470fccc8aa618a71e00e551be8fe532242fac289"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzczODczNQ==", "bodyText": "In terms of frequency, as Dan mentioned this is only used for throwing a NoSuchMethodException, which ideally would never occur.", "url": "https://github.com/eclipse-openj9/openj9/pull/10670#discussion_r493738735", "createdAt": "2020-09-23T16:44:13Z", "author": {"login": "pshipton"}, "path": "jcl/src/java.base/share/classes/java/lang/J9VMInternals.java", "diffHunk": "@@ -492,25 +492,30 @@ static int fastIdentityHashCode(Object anObject) {\n \t\n \t\n \tprivate static String[] getClassInfoStrings(final Class<?> clazz, String classPath){\n-\t\tString classLoader;\n+\t\tString classLoaderStr = \"<Bootstrap Loader>\"; //$NON-NLS-1$\n+\t\tString cpResult = \"<Unknown>\"; //$NON-NLS-1$\n \t\t\n-\t\tif (classPath != null) {\n-\t\t\tclassLoader = \"<Bootstrap Loader>\";\n-\t\t} else {\n-\t\t\tclassLoader = clazz.getClassLoader().toString();\n-\t\t\tclassPath = (String)AccessController.doPrivileged(new PrivilegedAction() {\n-\t\t\t\tpublic Object run() {\n-\t\t\t\t\tString path = null;\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tpath = clazz.getProtectionDomain().getCodeSource().getLocation().toString();\n-\t\t\t\t\t} catch (Exception e) {\n-\t\t\t\t\t\tpath = \"<Unknown>\";\n+\t\tif (classPath == null) {\n+\t\t\tClassLoader classLoader = clazz.getClassLoader();\n+\t\t\tif (classLoader != null) {\n+\t\t\t\tclassLoaderStr = classLoader.toString();\n+\t\t\t\tclassPath = AccessController.doPrivileged(new PrivilegedAction<String>() {\n+\t\t\t\t\t@Override\n+\t\t\t\t\tpublic String run() {\n+\t\t\t\t\t\tString path = null;\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\tpath = clazz.getProtectionDomain().getCodeSource().getLocation().toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzYxMjI2NQ=="}, "originalCommit": {"oid": "470fccc8aa618a71e00e551be8fe532242fac289"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc0MDI1Mg==", "bodyText": "Although given the issue, apparently the DDR tooling throws it a number of times.", "url": "https://github.com/eclipse-openj9/openj9/pull/10670#discussion_r493740252", "createdAt": "2020-09-23T16:46:33Z", "author": {"login": "pshipton"}, "path": "jcl/src/java.base/share/classes/java/lang/J9VMInternals.java", "diffHunk": "@@ -492,25 +492,30 @@ static int fastIdentityHashCode(Object anObject) {\n \t\n \t\n \tprivate static String[] getClassInfoStrings(final Class<?> clazz, String classPath){\n-\t\tString classLoader;\n+\t\tString classLoaderStr = \"<Bootstrap Loader>\"; //$NON-NLS-1$\n+\t\tString cpResult = \"<Unknown>\"; //$NON-NLS-1$\n \t\t\n-\t\tif (classPath != null) {\n-\t\t\tclassLoader = \"<Bootstrap Loader>\";\n-\t\t} else {\n-\t\t\tclassLoader = clazz.getClassLoader().toString();\n-\t\t\tclassPath = (String)AccessController.doPrivileged(new PrivilegedAction() {\n-\t\t\t\tpublic Object run() {\n-\t\t\t\t\tString path = null;\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tpath = clazz.getProtectionDomain().getCodeSource().getLocation().toString();\n-\t\t\t\t\t} catch (Exception e) {\n-\t\t\t\t\t\tpath = \"<Unknown>\";\n+\t\tif (classPath == null) {\n+\t\t\tClassLoader classLoader = clazz.getClassLoader();\n+\t\t\tif (classLoader != null) {\n+\t\t\t\tclassLoaderStr = classLoader.toString();\n+\t\t\t\tclassPath = AccessController.doPrivileged(new PrivilegedAction<String>() {\n+\t\t\t\t\t@Override\n+\t\t\t\t\tpublic String run() {\n+\t\t\t\t\t\tString path = null;\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\tpath = clazz.getProtectionDomain().getCodeSource().getLocation().toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzYxMjI2NQ=="}, "originalCommit": {"oid": "470fccc8aa618a71e00e551be8fe532242fac289"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc0NTgyMQ==", "bodyText": "Since some things like DDR could throw NoSuchMethodException a number of times, and we don't know if a custom classloader will implement class locations, I've made the suggested change.", "url": "https://github.com/eclipse-openj9/openj9/pull/10670#discussion_r493745821", "createdAt": "2020-09-23T16:55:40Z", "author": {"login": "pshipton"}, "path": "jcl/src/java.base/share/classes/java/lang/J9VMInternals.java", "diffHunk": "@@ -492,25 +492,30 @@ static int fastIdentityHashCode(Object anObject) {\n \t\n \t\n \tprivate static String[] getClassInfoStrings(final Class<?> clazz, String classPath){\n-\t\tString classLoader;\n+\t\tString classLoaderStr = \"<Bootstrap Loader>\"; //$NON-NLS-1$\n+\t\tString cpResult = \"<Unknown>\"; //$NON-NLS-1$\n \t\t\n-\t\tif (classPath != null) {\n-\t\t\tclassLoader = \"<Bootstrap Loader>\";\n-\t\t} else {\n-\t\t\tclassLoader = clazz.getClassLoader().toString();\n-\t\t\tclassPath = (String)AccessController.doPrivileged(new PrivilegedAction() {\n-\t\t\t\tpublic Object run() {\n-\t\t\t\t\tString path = null;\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tpath = clazz.getProtectionDomain().getCodeSource().getLocation().toString();\n-\t\t\t\t\t} catch (Exception e) {\n-\t\t\t\t\t\tpath = \"<Unknown>\";\n+\t\tif (classPath == null) {\n+\t\t\tClassLoader classLoader = clazz.getClassLoader();\n+\t\t\tif (classLoader != null) {\n+\t\t\t\tclassLoaderStr = classLoader.toString();\n+\t\t\t\tclassPath = AccessController.doPrivileged(new PrivilegedAction<String>() {\n+\t\t\t\t\t@Override\n+\t\t\t\t\tpublic String run() {\n+\t\t\t\t\t\tString path = null;\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\tpath = clazz.getProtectionDomain().getCodeSource().getLocation().toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzYxMjI2NQ=="}, "originalCommit": {"oid": "470fccc8aa618a71e00e551be8fe532242fac289"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1206, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}