{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzNzg1MDIy", "number": 8324, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQyMDozMTo0M1rODYofxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMzozOTowOFrODdKpIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MTU1OTEwOnYy", "diffSide": "RIGHT", "path": "runtime/gc_glue_java/PointerArrayObjectScanner.hpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQyMDozMTo0M1rOFemoow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQyMDozOToyMFrOFem3BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYzNDU5NQ==", "bodyText": "Should operations with (endPtr - scanPtr) be changed as well? This is pointer math related to size of fomrobject_t *", "url": "https://github.com/eclipse-openj9/openj9/pull/8324#discussion_r367634595", "createdAt": "2020-01-16T20:31:43Z", "author": {"login": "dmitripivkine"}, "path": "runtime/gc_glue_java/PointerArrayObjectScanner.hpp", "diffHunk": "@@ -58,7 +58,7 @@ class GC_PointerArrayObjectScanner : public GC_IndexableObjectScanner\n \t * @param[in] flags Scanning context flags\n \t */\n \tMMINLINE GC_PointerArrayObjectScanner(MM_EnvironmentBase *env, omrobjectptr_t arrayPtr, fomrobject_t *basePtr, fomrobject_t *limitPtr, fomrobject_t *scanPtr, fomrobject_t *endPtr, uintptr_t flags)\n-\t\t: GC_IndexableObjectScanner(env, arrayPtr, basePtr, limitPtr, scanPtr, endPtr, ((endPtr - scanPtr) < _bitsPerScanMap) ? (((uintptr_t)1 << (endPtr - scanPtr)) - 1) : UDATA_MAX, sizeof(fomrobject_t), flags)\n+\t\t: GC_IndexableObjectScanner(env, arrayPtr, basePtr, limitPtr, scanPtr, endPtr, ((endPtr - scanPtr) < _bitsPerScanMap) ? (((uintptr_t)1 << (endPtr - scanPtr)) - 1) : UDATA_MAX, env->compressObjectReferences() ? sizeof(uint32_t) : sizeof(uintptr_t), flags)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97000a7d9f3cb56fb4cebfbfdda9dd72aa84e7de"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYzODI3Nw==", "bodyText": "That looks like a good candidate for what's causing my issue - will fix.", "url": "https://github.com/eclipse-openj9/openj9/pull/8324#discussion_r367638277", "createdAt": "2020-01-16T20:39:20Z", "author": {"login": "gacholio"}, "path": "runtime/gc_glue_java/PointerArrayObjectScanner.hpp", "diffHunk": "@@ -58,7 +58,7 @@ class GC_PointerArrayObjectScanner : public GC_IndexableObjectScanner\n \t * @param[in] flags Scanning context flags\n \t */\n \tMMINLINE GC_PointerArrayObjectScanner(MM_EnvironmentBase *env, omrobjectptr_t arrayPtr, fomrobject_t *basePtr, fomrobject_t *limitPtr, fomrobject_t *scanPtr, fomrobject_t *endPtr, uintptr_t flags)\n-\t\t: GC_IndexableObjectScanner(env, arrayPtr, basePtr, limitPtr, scanPtr, endPtr, ((endPtr - scanPtr) < _bitsPerScanMap) ? (((uintptr_t)1 << (endPtr - scanPtr)) - 1) : UDATA_MAX, sizeof(fomrobject_t), flags)\n+\t\t: GC_IndexableObjectScanner(env, arrayPtr, basePtr, limitPtr, scanPtr, endPtr, ((endPtr - scanPtr) < _bitsPerScanMap) ? (((uintptr_t)1 << (endPtr - scanPtr)) - 1) : UDATA_MAX, env->compressObjectReferences() ? sizeof(uint32_t) : sizeof(uintptr_t), flags)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYzNDU5NQ=="}, "originalCommit": {"oid": "97000a7d9f3cb56fb4cebfbfdda9dd72aa84e7de"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MTU2MzU0OnYy", "diffSide": "RIGHT", "path": "runtime/gc_glue_java/PointerArrayObjectScanner.hpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQyMDozMzoxNlrOFemrMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQyMDozOTo1N1rOFem4IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYzNTI0OQ==", "bodyText": "extra tab after text", "url": "https://github.com/eclipse-openj9/openj9/pull/8324#discussion_r367635249", "createdAt": "2020-01-16T20:33:16Z", "author": {"login": "dmitripivkine"}, "path": "runtime/gc_glue_java/PointerArrayObjectScanner.hpp", "diffHunk": "@@ -74,7 +74,7 @@ class GC_PointerArrayObjectScanner : public GC_IndexableObjectScanner\n \t\tGC_IndexableObjectScanner::initialize(env);\n \t}\n \n-public:\n+public:\t", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97000a7d9f3cb56fb4cebfbfdda9dd72aa84e7de"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYzODU2MQ==", "bodyText": "Fixed.", "url": "https://github.com/eclipse-openj9/openj9/pull/8324#discussion_r367638561", "createdAt": "2020-01-16T20:39:57Z", "author": {"login": "gacholio"}, "path": "runtime/gc_glue_java/PointerArrayObjectScanner.hpp", "diffHunk": "@@ -74,7 +74,7 @@ class GC_PointerArrayObjectScanner : public GC_IndexableObjectScanner\n \t\tGC_IndexableObjectScanner::initialize(env);\n \t}\n \n-public:\n+public:\t", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYzNTI0OQ=="}, "originalCommit": {"oid": "97000a7d9f3cb56fb4cebfbfdda9dd72aa84e7de"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MTYyMzM4OnYy", "diffSide": "RIGHT", "path": "runtime/gc_glue_java/PointerArrayObjectScanner.hpp", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQyMDo1NDo0M1rOFenP0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxOTo1OTowMFrOFfDxdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY0NDYyNA==", "bodyText": "This change is correct but would it be cleaner just do ((uintptr_t)_endPtr - (uintptr_t)_scanPtr) ?", "url": "https://github.com/eclipse-openj9/openj9/pull/8324#discussion_r367644624", "createdAt": "2020-01-16T20:54:43Z", "author": {"login": "dmitripivkine"}, "path": "runtime/gc_glue_java/PointerArrayObjectScanner.hpp", "diffHunk": "@@ -112,7 +113,7 @@ class GC_PointerArrayObjectScanner : public GC_IndexableObjectScanner\n \t\treturn objectScanner;\n \t}\n \n-\tMMINLINE uintptr_t getBytesRemaining() { return sizeof(fomrobject_t) * (_endPtr - _scanPtr); }\n+\tMMINLINE uintptr_t getBytesRemaining() { return _elementSize * (_endPtr - _scanPtr); }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97000a7d9f3cb56fb4cebfbfdda9dd72aa84e7de"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY0NzM1OQ==", "bodyText": "Obviously current implementation returns value aligned to _elementSize and suggested does not necessarily. I am not sure do we use this fact anywhere (pass unaligned addresses). So would be safer to keep current implementation", "url": "https://github.com/eclipse-openj9/openj9/pull/8324#discussion_r367647359", "createdAt": "2020-01-16T21:01:04Z", "author": {"login": "dmitripivkine"}, "path": "runtime/gc_glue_java/PointerArrayObjectScanner.hpp", "diffHunk": "@@ -112,7 +113,7 @@ class GC_PointerArrayObjectScanner : public GC_IndexableObjectScanner\n \t\treturn objectScanner;\n \t}\n \n-\tMMINLINE uintptr_t getBytesRemaining() { return sizeof(fomrobject_t) * (_endPtr - _scanPtr); }\n+\tMMINLINE uintptr_t getBytesRemaining() { return _elementSize * (_endPtr - _scanPtr); }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY0NDYyNA=="}, "originalCommit": {"oid": "97000a7d9f3cb56fb4cebfbfdda9dd72aa84e7de"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA4MDQ1NQ==", "bodyText": "I'm still tempted to do the fast thing here (I did it elsewhere already). If the pointers aren't aligned to _elementSize, then the pointer math is going to be undefined anyway.", "url": "https://github.com/eclipse-openj9/openj9/pull/8324#discussion_r368080455", "createdAt": "2020-01-17T18:42:17Z", "author": {"login": "gacholio"}, "path": "runtime/gc_glue_java/PointerArrayObjectScanner.hpp", "diffHunk": "@@ -112,7 +113,7 @@ class GC_PointerArrayObjectScanner : public GC_IndexableObjectScanner\n \t\treturn objectScanner;\n \t}\n \n-\tMMINLINE uintptr_t getBytesRemaining() { return sizeof(fomrobject_t) * (_endPtr - _scanPtr); }\n+\tMMINLINE uintptr_t getBytesRemaining() { return _elementSize * (_endPtr - _scanPtr); }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY0NDYyNA=="}, "originalCommit": {"oid": "97000a7d9f3cb56fb4cebfbfdda9dd72aa84e7de"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODExMTk4OA==", "bodyText": "this is correct", "url": "https://github.com/eclipse-openj9/openj9/pull/8324#discussion_r368111988", "createdAt": "2020-01-17T19:59:00Z", "author": {"login": "dmitripivkine"}, "path": "runtime/gc_glue_java/PointerArrayObjectScanner.hpp", "diffHunk": "@@ -112,7 +113,7 @@ class GC_PointerArrayObjectScanner : public GC_IndexableObjectScanner\n \t\treturn objectScanner;\n \t}\n \n-\tMMINLINE uintptr_t getBytesRemaining() { return sizeof(fomrobject_t) * (_endPtr - _scanPtr); }\n+\tMMINLINE uintptr_t getBytesRemaining() { return _elementSize * (_endPtr - _scanPtr); }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY0NDYyNA=="}, "originalCommit": {"oid": "97000a7d9f3cb56fb4cebfbfdda9dd72aa84e7de"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MTc5NjA1OnYy", "diffSide": "RIGHT", "path": "runtime/gc_base/IndexableObjectAllocationModel.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxOToyNDo1MVrOFgF-AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxOToyNDo1MVrOFgF-AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE5NjU0NA==", "bodyText": "We could have a non-static variant of this method and call for each iteration slotObject.addToSlotAddress(1, compressed);  while constructing slotObject only once before entering the loop. It would be slightly more readable to me, but I'm not pushing for it.", "url": "https://github.com/eclipse-openj9/openj9/pull/8324#discussion_r369196544", "createdAt": "2020-01-21T19:24:51Z", "author": {"login": "amicic"}, "path": "runtime/gc_base/IndexableObjectAllocationModel.cpp", "diffHunk": "@@ -195,7 +195,7 @@ MM_IndexableObjectAllocationModel::layoutContiguousArraylet(MM_EnvironmentBase *\n \t\tGC_SlotObject slotObject(env->getOmrVM(), arrayoidPtr);\n \t\tslotObject.writeReferenceToSlot((omrobjectptr_t)leafOffset);\n \t\tleafOffset += arrayletLeafSize;\n-\t\tarrayoidPtr += 1;\n+\t\tarrayoidPtr = GC_SlotObject::addToSlotAddress(arrayoidPtr, 1, compressed);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a57c1fcbbb52e37e5576c7eff471cd7f3ccf8968"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MTgzMzc5OnYy", "diffSide": "RIGHT", "path": "runtime/gc_base/ObjectAccessBarrier.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxOTozNzozNFrOFgGVyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxOTozNzozNFrOFgGVyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIwMjYzMg==", "bodyText": "hm... convertPointerFromToken itself has already a runtime 'if CR' check.", "url": "https://github.com/eclipse-openj9/openj9/pull/8324#discussion_r369202632", "createdAt": "2020-01-21T19:37:34Z", "author": {"login": "amicic"}, "path": "runtime/gc_base/ObjectAccessBarrier.cpp", "diffHunk": "@@ -116,7 +116,13 @@ MM_ObjectAccessBarrier::tearDown(MM_EnvironmentBase *env)\n mm_j9object_t\n MM_ObjectAccessBarrier::readObjectImpl(J9VMThread *vmThread, mm_j9object_t srcObject, fj9object_t *srcAddress, bool isVolatile)\n {\n-\treturn convertPointerFromToken(*srcAddress);\n+\tmm_j9object_t result = NULL;\n+\tif (compressObjectReferences()) {\n+\t\tresult = convertPointerFromToken(*(uint32_t*)srcAddress);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a57c1fcbbb52e37e5576c7eff471cd7f3ccf8968"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MTg0MjE1OnYy", "diffSide": "RIGHT", "path": "runtime/gc_base/ObjectAccessBarrier.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxOTo0MDo0NVrOFgGbWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNzo0Njo1NlrOFhHGiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIwNDA1Nw==", "bodyText": "For better readablily, I'd store '(UDATA)lhsObject + startOffset + offset' into a local like lhsAddress.", "url": "https://github.com/eclipse-openj9/openj9/pull/8324#discussion_r369204057", "createdAt": "2020-01-21T19:40:45Z", "author": {"login": "amicic"}, "path": "runtime/gc_base/ObjectAccessBarrier.cpp", "diffHunk": "@@ -1413,17 +1426,24 @@ MM_ObjectAccessBarrier::structuralCompareFlattenedObjects(J9VMThread *vmThread,\n \t\t\t}\n \n \t\t} else {\n-\t\t\tif (*(fj9object_t *)((UDATA)lhsObject + startOffset + offset) != *(fj9object_t *)((UDATA)rhsObject + startOffset + offset)) {\n-\t\t\t\tresult = false;\n-\t\t\t\tbreak;\n+\t\t\tif (sizeof(uint32_t) == referenceSize) {\n+\t\t\t\tif (*(uint32_t *)((UDATA)lhsObject + startOffset + offset) != *(uint32_t *)((UDATA)rhsObject + startOffset + offset)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a57c1fcbbb52e37e5576c7eff471cd7f3ccf8968"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI2MzY4OA==", "bodyText": "Done.", "url": "https://github.com/eclipse-openj9/openj9/pull/8324#discussion_r370263688", "createdAt": "2020-01-23T17:46:56Z", "author": {"login": "gacholio"}, "path": "runtime/gc_base/ObjectAccessBarrier.cpp", "diffHunk": "@@ -1413,17 +1426,24 @@ MM_ObjectAccessBarrier::structuralCompareFlattenedObjects(J9VMThread *vmThread,\n \t\t\t}\n \n \t\t} else {\n-\t\t\tif (*(fj9object_t *)((UDATA)lhsObject + startOffset + offset) != *(fj9object_t *)((UDATA)rhsObject + startOffset + offset)) {\n-\t\t\t\tresult = false;\n-\t\t\t\tbreak;\n+\t\t\tif (sizeof(uint32_t) == referenceSize) {\n+\t\t\t\tif (*(uint32_t *)((UDATA)lhsObject + startOffset + offset) != *(uint32_t *)((UDATA)rhsObject + startOffset + offset)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIwNDA1Nw=="}, "originalCommit": {"oid": "a57c1fcbbb52e37e5576c7eff471cd7f3ccf8968"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MTg4NDE4OnYy", "diffSide": "RIGHT", "path": "runtime/gc_base/ObjectAccessBarrier.hpp", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxOTo1NDoyNFrOFgG1fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxOTo1NjowM1rOFgG5Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIxMDc1MA==", "bodyText": "We have up to 3 'if CR' runtime checks, while it's probably doable with only one :(", "url": "https://github.com/eclipse-openj9/openj9/pull/8324#discussion_r369210750", "createdAt": "2020-01-21T19:54:24Z", "author": {"login": "amicic"}, "path": "runtime/gc_base/ObjectAccessBarrier.hpp", "diffHunk": "@@ -119,7 +119,13 @@ class MM_ObjectAccessBarrier : public MM_BaseVirtual\n \t\tU_32 slotsPerArrayletLeaf = (U_32)(J9VMTHREAD_JAVAVM(vmThread)->arrayletLeafSize / elementSize);\n \t\tU_32 arrayletIndex = (U_32)index / slotsPerArrayletLeaf;\n \t\tU_32 arrayletOffset = (U_32)index % slotsPerArrayletLeaf;\n-\t\tUDATA arrayletLeafBase = (UDATA)convertPointerFromToken(arrayoidPointer[arrayletIndex]);\n+\t\tUDATA arrayletLeafBase = 0;\n+\t\tfj9object_t *arrayletLeafSlot = GC_SlotObject::addToSlotAddress(arrayoidPointer, arrayletIndex, compressObjectReferences());\n+\t\tif (compressObjectReferences()) {\n+\t\t\tarrayletLeafBase = (UDATA)convertPointerFromToken(*(U_32*)arrayletLeafSlot);\n+\t\t} else {\n+\t\t\tarrayletLeafBase = *(UDATA*)arrayletLeafSlot;\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a57c1fcbbb52e37e5576c7eff471cd7f3ccf8968"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIxMTY2Nw==", "bodyText": "Something like this?\n\t\tif (compressObjectReferences()) {\n\t\t\tarrayletLeafBase = (UDATA)convertCompressedPointerFromToken(*((U_32*)arrayoidPointer) + arrayletIndex);\n\t\t} else {\n\t\t\tarrayletLeafBase = *(((UDATA*)arrayoidPointer) + arrayletIndex);\n\t\t}\n\nwhere convertCompressedPointerFromToken() does just shifting and no 'if CR' check. This helper could be used elsewhere (in readImpl() )", "url": "https://github.com/eclipse-openj9/openj9/pull/8324#discussion_r369211667", "createdAt": "2020-01-21T19:56:03Z", "author": {"login": "amicic"}, "path": "runtime/gc_base/ObjectAccessBarrier.hpp", "diffHunk": "@@ -119,7 +119,13 @@ class MM_ObjectAccessBarrier : public MM_BaseVirtual\n \t\tU_32 slotsPerArrayletLeaf = (U_32)(J9VMTHREAD_JAVAVM(vmThread)->arrayletLeafSize / elementSize);\n \t\tU_32 arrayletIndex = (U_32)index / slotsPerArrayletLeaf;\n \t\tU_32 arrayletOffset = (U_32)index % slotsPerArrayletLeaf;\n-\t\tUDATA arrayletLeafBase = (UDATA)convertPointerFromToken(arrayoidPointer[arrayletIndex]);\n+\t\tUDATA arrayletLeafBase = 0;\n+\t\tfj9object_t *arrayletLeafSlot = GC_SlotObject::addToSlotAddress(arrayoidPointer, arrayletIndex, compressObjectReferences());\n+\t\tif (compressObjectReferences()) {\n+\t\t\tarrayletLeafBase = (UDATA)convertPointerFromToken(*(U_32*)arrayletLeafSlot);\n+\t\t} else {\n+\t\t\tarrayletLeafBase = *(UDATA*)arrayletLeafSlot;\n+\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIxMDc1MA=="}, "originalCommit": {"oid": "a57c1fcbbb52e37e5576c7eff471cd7f3ccf8968"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MTkzOTQ2OnYy", "diffSide": "RIGHT", "path": "runtime/gc_glue_java/MetronomeDelegate.hpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMDoxMzoxNFrOFgHYKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMDoxMzoxNFrOFgHYKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIxOTYyNQ==", "bodyText": "this pattern repeats often. we should just have something like env->getObjectReferenceSize()", "url": "https://github.com/eclipse-openj9/openj9/pull/8324#discussion_r369219625", "createdAt": "2020-01-21T20:13:14Z", "author": {"login": "amicic"}, "path": "runtime/gc_glue_java/MetronomeDelegate.hpp", "diffHunk": "@@ -200,8 +200,9 @@ class MM_MetronomeDelegate : public MM_BaseNonVirtual\n \tMMINLINE uintptr_t\n \tscanPointerArraylet(MM_EnvironmentRealtime *env, fomrobject_t *arraylet)\n \t{\n+\t\tUDATA const referenceSize = env->compressObjectReferences() ? sizeof(uint32_t) : sizeof(uintptr_t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a57c1fcbbb52e37e5576c7eff471cd7f3ccf8968"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MTk1NzE2OnYy", "diffSide": "RIGHT", "path": "runtime/gc_glue_java/MetronomeDelegate.hpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMDoxOTo0NlrOFgHjGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMDoxOTo0NlrOFgHjGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIyMjQyNg==", "bodyText": "This pass is somewhat perf critical and extra runtime checks in readReferenceFromSlot() could be tangible (sparsly populated arrays). Would it make sense to have specialized GC_SlotObject::readCRReferenceFromSlot/readNonCRReferenceFromSlot APIs?", "url": "https://github.com/eclipse-openj9/openj9/pull/8324#discussion_r369222426", "createdAt": "2020-01-21T20:19:46Z", "author": {"login": "amicic"}, "path": "runtime/gc_glue_java/MetronomeDelegate.hpp", "diffHunk": "@@ -237,13 +238,29 @@ class MM_MetronomeDelegate : public MM_BaseNonVirtual\n \tMMINLINE UDATA\n \tscanPointerRange(MM_EnvironmentRealtime *env, fj9object_t *startScanPtr, fj9object_t *endScanPtr)\n \t{\n-\t\tfj9object_t *scanPtr = startScanPtr;\n-\t\tUDATA pointerFieldBytes = (UDATA)(endScanPtr - scanPtr);\n-\t\tUDATA pointerField = pointerFieldBytes / sizeof(fj9object_t);\n-\t\twhile(scanPtr < endScanPtr) {\n-\t\t\tGC_SlotObject slotObject(_javaVM->omrVM, scanPtr);\n-\t\t\t_markingScheme->markObject(env, slotObject.readReferenceFromSlot());\n-\t\t\tscanPtr++;\n+\t\tUDATA pointerFieldBytes = 0;\n+\t\tUDATA pointerField = 0;\n+\t\n+\t\tif (env->compressObjectReferences()) {\n+\t\t\tuint32_t *scanPtr = (uint32_t*)startScanPtr;\n+\t\t\tuint32_t *endPtr = (uint32_t*)endScanPtr;\n+\t\t\tpointerFieldBytes = (UDATA)(endPtr - scanPtr);\n+\t\t\tpointerField = pointerFieldBytes / sizeof(uint32_t);\n+\t\t\twhile(scanPtr < endPtr) {\n+\t\t\t\tGC_SlotObject slotObject(_javaVM->omrVM, (fj9object_t*)scanPtr);\n+\t\t\t\t_markingScheme->markObject(env, slotObject.readReferenceFromSlot());\n+\t\t\t\tscanPtr++;\n+\t\t\t}\n+\t\t} else {\n+\t\t\tuintptr_t *scanPtr = (uintptr_t*)startScanPtr;\n+\t\t\tuintptr_t *endPtr = (uintptr_t*)endScanPtr;\n+\t\t\tpointerFieldBytes = (UDATA)(endPtr - scanPtr);\n+\t\t\tpointerField = pointerFieldBytes / sizeof(uintptr_t);\n+\t\t\twhile(scanPtr < endPtr) {\n+\t\t\t\tGC_SlotObject slotObject(_javaVM->omrVM, (fj9object_t*)scanPtr);\n+\t\t\t\t_markingScheme->markObject(env, slotObject.readReferenceFromSlot());\n+\t\t\t\tscanPtr++;\n+\t\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a57c1fcbbb52e37e5576c7eff471cd7f3ccf8968"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjA5MDk3OnYy", "diffSide": "RIGHT", "path": "runtime/gc_include/ObjectAccessBarrierAPI.hpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMTowODoyNFrOFgI2Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMTowODoyNFrOFgI2Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI0MzY3NQ==", "bodyText": "This itself is good, but similarly to slow barrier code, this is invoked from a site where there is already a runtime CR check (see readObjectImpl).\nAs mentioned before, we could specialize this method further into two methods for CR and nonCR, and use proper one from the call site that already knows if it's CR or not.\nWe could keep this one too, for sites where we don't know if it's CR.", "url": "https://github.com/eclipse-openj9/openj9/pull/8324#discussion_r369243675", "createdAt": "2020-01-21T21:08:24Z", "author": {"login": "amicic"}, "path": "runtime/gc_include/ObjectAccessBarrierAPI.hpp", "diffHunk": "@@ -2675,10 +2643,13 @@ class MM_ObjectAccessBarrierAPI\n \tinternalConvertTokenFromPointer(j9object_t pointer)\n \t{\n #if defined (OMR_GC_COMPRESSED_POINTERS)\n-\t\treturn convertTokenFromPointer(pointer, _compressedPointersShift);\n-#else /* OMR_GC_COMPRESSED_POINTERS */\n-\t\treturn (fj9object_t)pointer;\n+\t\tif (compressObjectReferences()) {\n+\t\t\treturn (fj9object_t)((UDATA)pointer >> _compressedPointersShift);\n+\t\t} else\n #endif /* OMR_GC_COMPRESSED_POINTERS */\n+\t\t{\n+\t\t\treturn (fj9object_t)(UDATA)pointer;\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a57c1fcbbb52e37e5576c7eff471cd7f3ccf8968"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjA5OTI5OnYy", "diffSide": "RIGHT", "path": "runtime/gc_structs/ArrayletLeafIterator.hpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMToxMTozOFrOFgI7eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMToxMTozOFrOFgI7eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI0NTA1MA==", "bodyText": "as proposed before we could use a non-static addToSlotAddress", "url": "https://github.com/eclipse-openj9/openj9/pull/8324#discussion_r369245050", "createdAt": "2020-01-21T21:11:38Z", "author": {"login": "amicic"}, "path": "runtime/gc_structs/ArrayletLeafIterator.hpp", "diffHunk": "@@ -56,14 +58,30 @@ class GC_ArrayletLeafIterator\n \tvoid *_endOfSpine; /**< Pointer to the first slot AFTER the arraylet spine */\n \n public:\n+\t/**\n+\t * Return back true if object references are compressed\n+\t * @return true, if object references are compressed\n+\t */\n+\tMMINLINE bool compressObjectReferences() {\n+#if defined(OMR_GC_COMPRESSED_POINTERS)\n+#if defined(OMR_GC_FULL_POINTERS)\n+\t\treturn _compressObjectReferences;\n+#else /* defined(OMR_GC_FULL_POINTERS) */\n+\t\treturn true;\n+#endif /* defined(OMR_GC_FULL_POINTERS) */\n+#else /* defined(OMR_GC_COMPRESSED_POINTERS) */\n+\t\treturn false;\n+#endif /* defined(OMR_GC_COMPRESSED_POINTERS) */\n+\t}\n+\n \t/**\n \t * @return the next leaf reference slot in the arraylet\n \t * @return NULL if there are no more reference slots in the object\n \t */\n \tMMINLINE GC_SlotObject *nextLeafPointer()\n \t{\n \t\tif (_numLeafsCounted < _numLeafs) {\n-\t\t\t_slotObject.writeAddressToSlot(&_arrayoid[_numLeafsCounted]);\n+\t\t\t_slotObject.writeAddressToSlot(GC_SlotObject::addToSlotAddress(_arrayoid, _numLeafsCounted, compressObjectReferences()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a57c1fcbbb52e37e5576c7eff471cd7f3ccf8968"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTA5NjY1OnYy", "diffSide": "RIGHT", "path": "runtime/gc_glue_java/PointerArrayObjectScanner.hpp", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMzozOTowOFrOFlnUjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMTo1ODozMVrOFlpnhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk4NTg3MA==", "bodyText": "This line is too long now... Can it be split somehow to be more read friendly?", "url": "https://github.com/eclipse-openj9/openj9/pull/8324#discussion_r374985870", "createdAt": "2020-02-04T23:39:08Z", "author": {"login": "dmitripivkine"}, "path": "runtime/gc_glue_java/PointerArrayObjectScanner.hpp", "diffHunk": "@@ -58,7 +58,7 @@ class GC_PointerArrayObjectScanner : public GC_IndexableObjectScanner\n \t * @param[in] flags Scanning context flags\n \t */\n \tMMINLINE GC_PointerArrayObjectScanner(MM_EnvironmentBase *env, omrobjectptr_t arrayPtr, fomrobject_t *basePtr, fomrobject_t *limitPtr, fomrobject_t *scanPtr, fomrobject_t *endPtr, uintptr_t flags)\n-\t\t: GC_IndexableObjectScanner(env, arrayPtr, basePtr, limitPtr, scanPtr, endPtr, ((endPtr - scanPtr) < _bitsPerScanMap) ? (((uintptr_t)1 << (endPtr - scanPtr)) - 1) : UDATA_MAX, sizeof(fomrobject_t), flags)\n+\t\t: GC_IndexableObjectScanner(env, arrayPtr, basePtr, limitPtr, scanPtr, endPtr, (GC_SlotObject::subtractSlotAddresses(endPtr, scanPtr, env->compressObjectReferences()) < _bitsPerScanMap) ? ((uintptr_t)1 << GC_SlotObject::subtractSlotAddresses(endPtr, scanPtr, env->compressObjectReferences())) - 1 : UDATA_MAX, env->compressObjectReferences() ? sizeof(uint32_t) : sizeof(uintptr_t), flags)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f169d39342a517ef3eeadf96bb16a283f28b720"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAyMDUzMQ==", "bodyText": "Will do.", "url": "https://github.com/eclipse-openj9/openj9/pull/8324#discussion_r375020531", "createdAt": "2020-02-05T01:46:16Z", "author": {"login": "gacholio"}, "path": "runtime/gc_glue_java/PointerArrayObjectScanner.hpp", "diffHunk": "@@ -58,7 +58,7 @@ class GC_PointerArrayObjectScanner : public GC_IndexableObjectScanner\n \t * @param[in] flags Scanning context flags\n \t */\n \tMMINLINE GC_PointerArrayObjectScanner(MM_EnvironmentBase *env, omrobjectptr_t arrayPtr, fomrobject_t *basePtr, fomrobject_t *limitPtr, fomrobject_t *scanPtr, fomrobject_t *endPtr, uintptr_t flags)\n-\t\t: GC_IndexableObjectScanner(env, arrayPtr, basePtr, limitPtr, scanPtr, endPtr, ((endPtr - scanPtr) < _bitsPerScanMap) ? (((uintptr_t)1 << (endPtr - scanPtr)) - 1) : UDATA_MAX, sizeof(fomrobject_t), flags)\n+\t\t: GC_IndexableObjectScanner(env, arrayPtr, basePtr, limitPtr, scanPtr, endPtr, (GC_SlotObject::subtractSlotAddresses(endPtr, scanPtr, env->compressObjectReferences()) < _bitsPerScanMap) ? ((uintptr_t)1 << GC_SlotObject::subtractSlotAddresses(endPtr, scanPtr, env->compressObjectReferences())) - 1 : UDATA_MAX, env->compressObjectReferences() ? sizeof(uint32_t) : sizeof(uintptr_t), flags)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk4NTg3MA=="}, "originalCommit": {"oid": "5f169d39342a517ef3eeadf96bb16a283f28b720"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAyMzQ5NQ==", "bodyText": "See if it's better now...", "url": "https://github.com/eclipse-openj9/openj9/pull/8324#discussion_r375023495", "createdAt": "2020-02-05T01:58:31Z", "author": {"login": "gacholio"}, "path": "runtime/gc_glue_java/PointerArrayObjectScanner.hpp", "diffHunk": "@@ -58,7 +58,7 @@ class GC_PointerArrayObjectScanner : public GC_IndexableObjectScanner\n \t * @param[in] flags Scanning context flags\n \t */\n \tMMINLINE GC_PointerArrayObjectScanner(MM_EnvironmentBase *env, omrobjectptr_t arrayPtr, fomrobject_t *basePtr, fomrobject_t *limitPtr, fomrobject_t *scanPtr, fomrobject_t *endPtr, uintptr_t flags)\n-\t\t: GC_IndexableObjectScanner(env, arrayPtr, basePtr, limitPtr, scanPtr, endPtr, ((endPtr - scanPtr) < _bitsPerScanMap) ? (((uintptr_t)1 << (endPtr - scanPtr)) - 1) : UDATA_MAX, sizeof(fomrobject_t), flags)\n+\t\t: GC_IndexableObjectScanner(env, arrayPtr, basePtr, limitPtr, scanPtr, endPtr, (GC_SlotObject::subtractSlotAddresses(endPtr, scanPtr, env->compressObjectReferences()) < _bitsPerScanMap) ? ((uintptr_t)1 << GC_SlotObject::subtractSlotAddresses(endPtr, scanPtr, env->compressObjectReferences())) - 1 : UDATA_MAX, env->compressObjectReferences() ? sizeof(uint32_t) : sizeof(uintptr_t), flags)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk4NTg3MA=="}, "originalCommit": {"oid": "5f169d39342a517ef3eeadf96bb16a283f28b720"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 756, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}