{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyMzYxNDcy", "number": 8294, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxODozODowNlrODZ70yQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxODozODowNlrODZ70yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTIxMTYxOnYy", "diffSide": "RIGHT", "path": "jcl/src/java.base/share/classes/com/ibm/jit/JITHelpers.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxODozODowNlrOFgmuew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNDoyNDo1NVrOFg_9Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTczMzI0Mw==", "bodyText": "why is this better? having a static final with no depenencies in the JCL should be more predictable. The static final here is also a primitive type so can be constant folded unlike nativeOrder() which returns an object so we can only get a known object constraint. This doesn't seem like an improvement...", "url": "https://github.com/eclipse-openj9/openj9/pull/8294#discussion_r369733243", "createdAt": "2020-01-22T18:38:06Z", "author": {"login": "andrewcraik"}, "path": "jcl/src/java.base/share/classes/com/ibm/jit/JITHelpers.java", "diffHunk": "@@ -462,7 +462,7 @@ public char byteToCharUnsigned(byte b) {\n \tpublic native boolean acmplt(Object lhs, Object rhs);\n \n \tprivate static long storeBits(long dest, int width, long value, int vwidth, int offset) {\n-\t\tint offsetToModify = IS_PLATFORM_LITTLE_ENDIAN ? ((offset * vwidth) % width) : ((width - 1) - ((offset * vwidth) % width));\n+\t\tint offsetToModify = (ByteOrder.nativeOrder() == ByteOrder.LITTLE_ENDIAN) ? ((offset * vwidth) % width) : ((width - 1) - ((offset * vwidth) % width));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4392cee695a6ea4b9bf8a4a5ec74f556be39875"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc0MzAyNA==", "bodyText": "This is simply avoiding duplication of logic. Referencing #4741 for the background. ByteOrder.nativeOrder() is a user land API, and we want such calls folded away as the typical (and only) use case is to compare against ByteOrder.LITTLE_ENDIAN and ByteOrder.BIG_ENDIAN. We already more or less did this with JITHelpers.IS_PLATFORM_LITTLE_ENDIAN, but in a different way.\nThere is no reason why we should have two nearly identical ways of determining endianness. This PR consolidates everything to add support for folding away the userland API (which will benefit all code; JCL or not), and as such we eat our own dogfood and use the same API in the JCL.\nIt is no different than the rest of the fields in classes found in foldFinalFieldsIn. StringCompressionFlag is another such example.", "url": "https://github.com/eclipse-openj9/openj9/pull/8294#discussion_r369743024", "createdAt": "2020-01-22T18:57:51Z", "author": {"login": "fjeremic"}, "path": "jcl/src/java.base/share/classes/com/ibm/jit/JITHelpers.java", "diffHunk": "@@ -462,7 +462,7 @@ public char byteToCharUnsigned(byte b) {\n \tpublic native boolean acmplt(Object lhs, Object rhs);\n \n \tprivate static long storeBits(long dest, int width, long value, int vwidth, int offset) {\n-\t\tint offsetToModify = IS_PLATFORM_LITTLE_ENDIAN ? ((offset * vwidth) % width) : ((width - 1) - ((offset * vwidth) % width));\n+\t\tint offsetToModify = (ByteOrder.nativeOrder() == ByteOrder.LITTLE_ENDIAN) ? ((offset * vwidth) % width) : ((width - 1) - ((offset * vwidth) % width));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTczMzI0Mw=="}, "originalCommit": {"oid": "d4392cee695a6ea4b9bf8a4a5ec74f556be39875"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgyNzE0NQ==", "bodyText": "There are two good reasons for keeping the code 1) it means we do not add a dependency from an OpenJ9 class onto the JCL (in a seemingly unrelated package and 2) the fact the field is a primitive allows the filed to become a constant rather than just an object constraint - this can simplify eliminating tests at low optimization levels.", "url": "https://github.com/eclipse-openj9/openj9/pull/8294#discussion_r369827145", "createdAt": "2020-01-22T21:59:32Z", "author": {"login": "andrewcraik"}, "path": "jcl/src/java.base/share/classes/com/ibm/jit/JITHelpers.java", "diffHunk": "@@ -462,7 +462,7 @@ public char byteToCharUnsigned(byte b) {\n \tpublic native boolean acmplt(Object lhs, Object rhs);\n \n \tprivate static long storeBits(long dest, int width, long value, int vwidth, int offset) {\n-\t\tint offsetToModify = IS_PLATFORM_LITTLE_ENDIAN ? ((offset * vwidth) % width) : ((width - 1) - ((offset * vwidth) % width));\n+\t\tint offsetToModify = (ByteOrder.nativeOrder() == ByteOrder.LITTLE_ENDIAN) ? ((offset * vwidth) % width) : ((width - 1) - ((offset * vwidth) % width));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTczMzI0Mw=="}, "originalCommit": {"oid": "d4392cee695a6ea4b9bf8a4a5ec74f556be39875"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgyODE2Nw==", "bodyText": "we don't have to respect modification of the JITHelper internal final field while we do have to do the same for ByteOrder (at least notionally) - basically it simplifies handling eliminating the field load.", "url": "https://github.com/eclipse-openj9/openj9/pull/8294#discussion_r369828167", "createdAt": "2020-01-22T22:01:46Z", "author": {"login": "andrewcraik"}, "path": "jcl/src/java.base/share/classes/com/ibm/jit/JITHelpers.java", "diffHunk": "@@ -462,7 +462,7 @@ public char byteToCharUnsigned(byte b) {\n \tpublic native boolean acmplt(Object lhs, Object rhs);\n \n \tprivate static long storeBits(long dest, int width, long value, int vwidth, int offset) {\n-\t\tint offsetToModify = IS_PLATFORM_LITTLE_ENDIAN ? ((offset * vwidth) % width) : ((width - 1) - ((offset * vwidth) % width));\n+\t\tint offsetToModify = (ByteOrder.nativeOrder() == ByteOrder.LITTLE_ENDIAN) ? ((offset * vwidth) % width) : ((width - 1) - ((offset * vwidth) % width));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTczMzI0Mw=="}, "originalCommit": {"oid": "d4392cee695a6ea4b9bf8a4a5ec74f556be39875"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg0NDM1Mg==", "bodyText": "I see your point. It certainly is more complex under the hood if ByteOrder.nativeOrder() is used instead of IS_PLATFORM_LITTLE_ENDIAN in JITHelpers. I don't think reverting back is a deal breaker. What I would like to see is removal of the isPlatformLittleEndian() native method though. This logic is already duplicated for nativeOrder [1]. We can just reuse [1] instead (Unsafe.isBigEndian()).\n@simonameng can you make the appropriate changes?\n[1] https://github.com/eclipse/openj9/blob/83f3cbdb4c413343da35f449bb97174c618df478/runtime/jcl/common/sun_misc_Unsafe.cpp#L704-L712", "url": "https://github.com/eclipse-openj9/openj9/pull/8294#discussion_r369844352", "createdAt": "2020-01-22T22:38:51Z", "author": {"login": "fjeremic"}, "path": "jcl/src/java.base/share/classes/com/ibm/jit/JITHelpers.java", "diffHunk": "@@ -462,7 +462,7 @@ public char byteToCharUnsigned(byte b) {\n \tpublic native boolean acmplt(Object lhs, Object rhs);\n \n \tprivate static long storeBits(long dest, int width, long value, int vwidth, int offset) {\n-\t\tint offsetToModify = IS_PLATFORM_LITTLE_ENDIAN ? ((offset * vwidth) % width) : ((width - 1) - ((offset * vwidth) % width));\n+\t\tint offsetToModify = (ByteOrder.nativeOrder() == ByteOrder.LITTLE_ENDIAN) ? ((offset * vwidth) % width) : ((width - 1) - ((offset * vwidth) % width));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTczMzI0Mw=="}, "originalCommit": {"oid": "d4392cee695a6ea4b9bf8a4a5ec74f556be39875"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkyMzEwMg==", "bodyText": "@fjeremic Sure. I'll reuse Java_sun_misc_Unsafe_isBigEndian0 in the JITHelpers instead of ByteOrder.nativeOrder()", "url": "https://github.com/eclipse-openj9/openj9/pull/8294#discussion_r369923102", "createdAt": "2020-01-23T04:03:54Z", "author": {"login": "simonameng"}, "path": "jcl/src/java.base/share/classes/com/ibm/jit/JITHelpers.java", "diffHunk": "@@ -462,7 +462,7 @@ public char byteToCharUnsigned(byte b) {\n \tpublic native boolean acmplt(Object lhs, Object rhs);\n \n \tprivate static long storeBits(long dest, int width, long value, int vwidth, int offset) {\n-\t\tint offsetToModify = IS_PLATFORM_LITTLE_ENDIAN ? ((offset * vwidth) % width) : ((width - 1) - ((offset * vwidth) % width));\n+\t\tint offsetToModify = (ByteOrder.nativeOrder() == ByteOrder.LITTLE_ENDIAN) ? ((offset * vwidth) % width) : ((width - 1) - ((offset * vwidth) % width));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTczMzI0Mw=="}, "originalCommit": {"oid": "d4392cee695a6ea4b9bf8a4a5ec74f556be39875"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE0NjU5OA==", "bodyText": "That sounds like a reasonable compromise - use Unsafe to init the field and use the field in the JITHelpers where needed sounds like a good plan.", "url": "https://github.com/eclipse-openj9/openj9/pull/8294#discussion_r370146598", "createdAt": "2020-01-23T14:24:55Z", "author": {"login": "andrewcraik"}, "path": "jcl/src/java.base/share/classes/com/ibm/jit/JITHelpers.java", "diffHunk": "@@ -462,7 +462,7 @@ public char byteToCharUnsigned(byte b) {\n \tpublic native boolean acmplt(Object lhs, Object rhs);\n \n \tprivate static long storeBits(long dest, int width, long value, int vwidth, int offset) {\n-\t\tint offsetToModify = IS_PLATFORM_LITTLE_ENDIAN ? ((offset * vwidth) % width) : ((width - 1) - ((offset * vwidth) % width));\n+\t\tint offsetToModify = (ByteOrder.nativeOrder() == ByteOrder.LITTLE_ENDIAN) ? ((offset * vwidth) % width) : ((width - 1) - ((offset * vwidth) % width));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTczMzI0Mw=="}, "originalCommit": {"oid": "d4392cee695a6ea4b9bf8a4a5ec74f556be39875"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 746, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}