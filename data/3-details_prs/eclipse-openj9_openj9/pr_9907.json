{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1NDA3MzYy", "number": 9907, "title": "Acquire Thread.lock while calling jvmti suspendThread", "bodyText": "Match Thread.suspend() synchronization by acquiring the target thread's Thread.lock before suspending. This will prevent deadlocks in the JCL library that could occur if a thread is suspended while holding Thread.lock.\nFor example if thread1 is suspended while in the middle of running Thread.isAlive which is synchronized, thread2 calling thread1.interrupt will hang forever since the lock belonging to thread1 will never be released.\nSigned-off-by: Theresa Mammarella Theresa.T.Mammarella@ibm.com", "createdAt": "2020-06-16T18:54:54Z", "url": "https://github.com/eclipse-openj9/openj9/pull/9907", "merged": true, "mergeCommit": {"oid": "039822d5a29aaa688d00d4dfe3677733d82bf319"}, "closed": true, "closedAt": "2020-07-22T03:09:08Z", "author": {"login": "theresa-m"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABctzbd3ABqjM0NjkyMjM0MzQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc3KKmqgFqTQ1MjcwMzcwOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "268d787f4308b934d2068f3b9c3121affea50277", "author": {"user": {"login": "theresa-m", "name": "Theresa Mammarella"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/268d787f4308b934d2068f3b9c3121affea50277", "committedDate": "2020-06-16T18:53:59Z", "message": "Free Thread.lock while calling jvmti suspendThread\n\nIt is a well known problem that suspending a Java thread may cause deadlocks in the application if a resource is held while suspended. To prevent this happening in the Thread JCL library, check that the Object java.lang.Thread.lock has been released before suspending. To make sure of this, acquire the lock while halt is in progress.\n\nSigned-off-by: Theresa Mammarella <Theresa.T.Mammarella@ibm.com>"}, "afterCommit": {"oid": "a42ef49f4ed3d52082264d33aa08c43d42017aad", "author": {"user": {"login": "theresa-m", "name": "Theresa Mammarella"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/a42ef49f4ed3d52082264d33aa08c43d42017aad", "committedDate": "2020-06-22T16:27:39Z", "message": "Free Thread.lock while calling jvmti suspendThread\n\nIt is a well known problem that suspending a Java thread may cause deadlocks in the application if a resource is held while suspended. To prevent this happening in the Thread JCL library, check that the Object java.lang.Thread.lock has been released before suspending. To make sure of this, acquire the lock while halt is in progress.\n\nSigned-off-by: Theresa Mammarella <Theresa.T.Mammarella@ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a42ef49f4ed3d52082264d33aa08c43d42017aad", "author": {"user": {"login": "theresa-m", "name": "Theresa Mammarella"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/a42ef49f4ed3d52082264d33aa08c43d42017aad", "committedDate": "2020-06-22T16:27:39Z", "message": "Free Thread.lock while calling jvmti suspendThread\n\nIt is a well known problem that suspending a Java thread may cause deadlocks in the application if a resource is held while suspended. To prevent this happening in the Thread JCL library, check that the Object java.lang.Thread.lock has been released before suspending. To make sure of this, acquire the lock while halt is in progress.\n\nSigned-off-by: Theresa Mammarella <Theresa.T.Mammarella@ibm.com>"}, "afterCommit": {"oid": "043ed1a4a0523fe97b874c0cef71c364772a8d0b", "author": {"user": {"login": "theresa-m", "name": "Theresa Mammarella"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/043ed1a4a0523fe97b874c0cef71c364772a8d0b", "committedDate": "2020-07-03T18:28:32Z", "message": "Free Thread.lock while calling jvmti suspendThread\n\nIt is a well known problem that suspending a Java thread may cause deadlocks in the application if a resource is held while suspended. To prevent this happening in the Thread JCL library, check that the Object java.lang.Thread.lock has been released before suspending. To make sure of this, acquire the lock while halt is in progress.\n\nSigned-off-by: Theresa Mammarella <Theresa.T.Mammarella@ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzMzk5NDQz", "url": "https://github.com/eclipse-openj9/openj9/pull/9907#pullrequestreview-443399443", "createdAt": "2020-07-06T20:52:01Z", "commit": {"oid": "043ed1a4a0523fe97b874c0cef71c364772a8d0b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMDo1MjowMVrOGtmtog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMDo1MjowMVrOGtmtog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ3MzM3OA==", "bodyText": "The local can't be re-used as the object may move while the thread is suspended.", "url": "https://github.com/eclipse-openj9/openj9/pull/9907#discussion_r450473378", "createdAt": "2020-07-06T20:52:01Z", "author": {"login": "gacholio"}, "path": "runtime/jvmti/suspendhelper.cpp", "diffHunk": "@@ -54,7 +62,11 @@ suspendThread(J9VMThread *currentThread, jthread thread, UDATA allowNull, UDATA\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t\tomrthread_monitor_exit(targetThread->publicFlagsMutex);\n+\n \t\t\t\t\tcurrentThread->javaVM->internalVMFunctions->internalEnterVMFromJNI(currentThread);\n+\n+\t\t\t\t\t/* Release java.lang.Thread.lock */\n+\t\t\t\t\tobjectMonitorExit(currentThread, threadLock);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "043ed1a4a0523fe97b874c0cef71c364772a8d0b"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0MTQxNDQ2", "url": "https://github.com/eclipse-openj9/openj9/pull/9907#pullrequestreview-444141446", "createdAt": "2020-07-07T18:20:53Z", "commit": {"oid": "043ed1a4a0523fe97b874c0cef71c364772a8d0b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxODoyMDo1M1rOGuKY-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxODoyMDo1M1rOGuKY-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA1NzkxMg==", "bodyText": "Is the intention to match the java implementation of the Thread.suspend method by acquiring the lock for other threads before suspending?\nhttps://github.com/eclipse/openj9/blob/ea7b2e9783f21f186eb7ac087af77d74dc5a78ad/jcl/src/java.base/share/classes/java/lang/Thread.java#L1280-L1284\nMaking this match the Java implementation makes sense to me but I don't understand the comment above", "url": "https://github.com/eclipse-openj9/openj9/pull/9907#discussion_r451057912", "createdAt": "2020-07-07T18:20:53Z", "author": {"login": "DanHeidinga"}, "path": "runtime/jvmti/suspendhelper.cpp", "diffHunk": "@@ -45,7 +45,15 @@ suspendThread(J9VMThread *currentThread, jthread thread, UDATA allowNull, UDATA\n \t\t\t\tif (currentThread == targetThread) {\n \t\t\t\t\t*currentThreadSuspended = TRUE;\n \t\t\t\t} else {\n+\t\t\t\t\t/* It is a well known problem that suspending a Java thread may cause deadlocks in the application if a resource is \n+\t\t\t\t\t * held while suspended. To prevent this happening in the Thread JCL library, check that the Object java.lang.Thread.lock \n+\t\t\t\t\t * has been released before suspending. To make sure of this, acquire the lock while halt is in progress.\n+\t\t\t\t\t */\n+\t\t\t\t\tj9object_t threadLock = J9VMJAVALANGTHREAD_LOCK(targetThread, targetThread->threadObject);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "043ed1a4a0523fe97b874c0cef71c364772a8d0b"}, "originalPosition": 15}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "043ed1a4a0523fe97b874c0cef71c364772a8d0b", "author": {"user": {"login": "theresa-m", "name": "Theresa Mammarella"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/043ed1a4a0523fe97b874c0cef71c364772a8d0b", "committedDate": "2020-07-03T18:28:32Z", "message": "Free Thread.lock while calling jvmti suspendThread\n\nIt is a well known problem that suspending a Java thread may cause deadlocks in the application if a resource is held while suspended. To prevent this happening in the Thread JCL library, check that the Object java.lang.Thread.lock has been released before suspending. To make sure of this, acquire the lock while halt is in progress.\n\nSigned-off-by: Theresa Mammarella <Theresa.T.Mammarella@ibm.com>"}, "afterCommit": {"oid": "7c5874765c7e6c6856e273e92b62b594027d083b", "author": {"user": {"login": "theresa-m", "name": "Theresa Mammarella"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/7c5874765c7e6c6856e273e92b62b594027d083b", "committedDate": "2020-07-08T18:56:17Z", "message": "Free Thread.lock while calling jvmti suspendThread\n\nIt is a well known problem that suspending a Java thread may cause deadlocks in the application if a resource is held while suspended. To prevent this happening in the Thread JCL library, check that the Object java.lang.Thread.lock has been released before suspending. To make sure of this, acquire the lock while halt is in progress.\n\nSigned-off-by: Theresa Mammarella <Theresa.T.Mammarella@ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1MDUyNTM3", "url": "https://github.com/eclipse-openj9/openj9/pull/9907#pullrequestreview-445052537", "createdAt": "2020-07-08T19:07:23Z", "commit": {"oid": "7c5874765c7e6c6856e273e92b62b594027d083b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxOTowNzoyM1rOGu1l2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxOTowNzoyM1rOGu1l2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc2NTcyMQ==", "bodyText": "VM can always be fetched from the current thread - there's no need to add the parameter.", "url": "https://github.com/eclipse-openj9/openj9/pull/9907#discussion_r451765721", "createdAt": "2020-07-08T19:07:23Z", "author": {"login": "gacholio"}, "path": "runtime/jvmti/suspendhelper.cpp", "diffHunk": "@@ -27,7 +27,7 @@\n extern \"C\" {\n \n jvmtiError\n-suspendThread(J9VMThread *currentThread, jthread thread, UDATA allowNull, UDATA *currentThreadSuspended)\n+suspendThread(J9JavaVM *vm, J9VMThread *currentThread, jthread thread, UDATA allowNull, UDATA *currentThreadSuspended)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c5874765c7e6c6856e273e92b62b594027d083b"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1MDU0NzY1", "url": "https://github.com/eclipse-openj9/openj9/pull/9907#pullrequestreview-445054765", "createdAt": "2020-07-08T19:10:41Z", "commit": {"oid": "7c5874765c7e6c6856e273e92b62b594027d083b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxOToxMDo0MlrOGu1sew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxOToxMDo0MlrOGu1sew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc2NzQxOQ==", "bodyText": "Please cache the internal function table in a local (and change the other uses in this function to use the local).\nhttps://github.com/eclipse/openj9/blob/566007db997abe3f47f25565506c0f5a0a2f1b00/runtime/j9vm/java11vmi.c#L319", "url": "https://github.com/eclipse-openj9/openj9/pull/9907#discussion_r451767419", "createdAt": "2020-07-08T19:10:42Z", "author": {"login": "gacholio"}, "path": "runtime/jvmti/suspendhelper.cpp", "diffHunk": "@@ -45,7 +45,14 @@ suspendThread(J9VMThread *currentThread, jthread thread, UDATA allowNull, UDATA\n \t\t\t\tif (currentThread == targetThread) {\n \t\t\t\t\t*currentThreadSuspended = TRUE;\n \t\t\t\t} else {\n+\t\t\t\t\t/* It is a well known problem that suspending a Java thread may cause deadlocks in the application if a resource is \n+\t\t\t\t\t * held while suspended. To prevent this happening in the Thread JCL library, check that the Object java.lang.Thread.lock \n+\t\t\t\t\t * has been released before suspending. To make sure of this, acquire the lock while halt is in progress.\n+\t\t\t\t\t */\n+\t\t\t\t\tvm->internalVMFunctions->objectMonitorEnter(currentThread, J9VMJAVALANGTHREAD_LOCK(targetThread, targetThread->threadObject));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c5874765c7e6c6856e273e92b62b594027d083b"}, "originalPosition": 24}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7c5874765c7e6c6856e273e92b62b594027d083b", "author": {"user": {"login": "theresa-m", "name": "Theresa Mammarella"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/7c5874765c7e6c6856e273e92b62b594027d083b", "committedDate": "2020-07-08T18:56:17Z", "message": "Free Thread.lock while calling jvmti suspendThread\n\nIt is a well known problem that suspending a Java thread may cause deadlocks in the application if a resource is held while suspended. To prevent this happening in the Thread JCL library, check that the Object java.lang.Thread.lock has been released before suspending. To make sure of this, acquire the lock while halt is in progress.\n\nSigned-off-by: Theresa Mammarella <Theresa.T.Mammarella@ibm.com>"}, "afterCommit": {"oid": "4b4f9208eb6e33e18151ff602614d9852d76eb20", "author": {"user": {"login": "theresa-m", "name": "Theresa Mammarella"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/4b4f9208eb6e33e18151ff602614d9852d76eb20", "committedDate": "2020-07-08T22:24:30Z", "message": "Free Thread.lock while calling jvmti suspendThread\n\nIt is a well known problem that suspending a Java thread may cause deadlocks in the application if a resource is held while suspended. To prevent this happening in the Thread JCL library, check that the Object java.lang.Thread.lock has been released before suspending. To make sure of this, acquire the lock while halt is in progress.\n\nSigned-off-by: Theresa Mammarella <Theresa.T.Mammarella@ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1MTgzNzYz", "url": "https://github.com/eclipse-openj9/openj9/pull/9907#pullrequestreview-445183763", "createdAt": "2020-07-08T22:59:00Z", "commit": {"oid": "4b4f9208eb6e33e18151ff602614d9852d76eb20"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMjo1OTowMFrOGu7-ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMjo1OTowMFrOGu7-ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg3MDMzMQ==", "bodyText": "One final thing - the object field access macros should take currentThread not targetThread.", "url": "https://github.com/eclipse-openj9/openj9/pull/9907#discussion_r451870331", "createdAt": "2020-07-08T22:59:00Z", "author": {"login": "gacholio"}, "path": "runtime/jvmti/suspendhelper.cpp", "diffHunk": "@@ -45,7 +45,15 @@ suspendThread(J9VMThread *currentThread, jthread thread, UDATA allowNull, UDATA\n \t\t\t\tif (currentThread == targetThread) {\n \t\t\t\t\t*currentThreadSuspended = TRUE;\n \t\t\t\t} else {\n-\t\t\t\t\tcurrentThread->javaVM->internalVMFunctions->internalExitVMToJNI(currentThread);\n+\t\t\t\t\tJ9InternalVMFunctions *vmFuncs = currentThread->javaVM->internalVMFunctions;\n+\t\t\t\t\t/* It is a well known problem that suspending a Java thread may cause deadlocks in the application if a resource is \n+\t\t\t\t\t * held while suspended. To prevent this happening in the Thread JCL library, check that the Object java.lang.Thread.lock \n+\t\t\t\t\t * has been released before suspending. To make sure of this, acquire the lock while halt is in progress.\n+\t\t\t\t\t */\n+\t\t\t\t\tvmFuncs->objectMonitorEnter(currentThread, J9VMJAVALANGTHREAD_LOCK(targetThread, targetThread->threadObject));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b4f9208eb6e33e18151ff602614d9852d76eb20"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1MjU3MzEx", "url": "https://github.com/eclipse-openj9/openj9/pull/9907#pullrequestreview-445257311", "createdAt": "2020-07-09T02:57:23Z", "commit": {"oid": "4b4f9208eb6e33e18151ff602614d9852d76eb20"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwMjo1NzoyM1rOGu_92g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwMjo1NzoyM1rOGu_92g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkzNTcwNg==", "bodyText": "Can this comment point to the Thread.suspend java implementation?  And clarify that the other Thread state calls like isAlive, etc will block forever if we suspend while the thread is holding the Thead.lock?", "url": "https://github.com/eclipse-openj9/openj9/pull/9907#discussion_r451935706", "createdAt": "2020-07-09T02:57:23Z", "author": {"login": "DanHeidinga"}, "path": "runtime/jvmti/suspendhelper.cpp", "diffHunk": "@@ -45,7 +45,15 @@ suspendThread(J9VMThread *currentThread, jthread thread, UDATA allowNull, UDATA\n \t\t\t\tif (currentThread == targetThread) {\n \t\t\t\t\t*currentThreadSuspended = TRUE;\n \t\t\t\t} else {\n-\t\t\t\t\tcurrentThread->javaVM->internalVMFunctions->internalExitVMToJNI(currentThread);\n+\t\t\t\t\tJ9InternalVMFunctions *vmFuncs = currentThread->javaVM->internalVMFunctions;\n+\t\t\t\t\t/* It is a well known problem that suspending a Java thread may cause deadlocks in the application if a resource is \n+\t\t\t\t\t * held while suspended. To prevent this happening in the Thread JCL library, check that the Object java.lang.Thread.lock \n+\t\t\t\t\t * has been released before suspending. To make sure of this, acquire the lock while halt is in progress.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b4f9208eb6e33e18151ff602614d9852d76eb20"}, "originalPosition": 15}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4b4f9208eb6e33e18151ff602614d9852d76eb20", "author": {"user": {"login": "theresa-m", "name": "Theresa Mammarella"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/4b4f9208eb6e33e18151ff602614d9852d76eb20", "committedDate": "2020-07-08T22:24:30Z", "message": "Free Thread.lock while calling jvmti suspendThread\n\nIt is a well known problem that suspending a Java thread may cause deadlocks in the application if a resource is held while suspended. To prevent this happening in the Thread JCL library, check that the Object java.lang.Thread.lock has been released before suspending. To make sure of this, acquire the lock while halt is in progress.\n\nSigned-off-by: Theresa Mammarella <Theresa.T.Mammarella@ibm.com>"}, "afterCommit": {"oid": "2caf6f20babeb1c9ecc799c3e4807f891b2c4723", "author": {"user": {"login": "theresa-m", "name": "Theresa Mammarella"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/2caf6f20babeb1c9ecc799c3e4807f891b2c4723", "committedDate": "2020-07-09T15:59:03Z", "message": "Acquire Thread.lock while calling jvmti suspendThread\n\nMatch Thread.suspend() synchronization by acquiring the target thread's Thread.lock before suspending. This will prevent deadlocks in the JCL library that could occur if a thread is suspended while holding Thread.lock.\n\nSigned-off-by: Theresa Mammarella <Theresa.T.Mammarella@ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2caf6f20babeb1c9ecc799c3e4807f891b2c4723", "author": {"user": {"login": "theresa-m", "name": "Theresa Mammarella"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/2caf6f20babeb1c9ecc799c3e4807f891b2c4723", "committedDate": "2020-07-09T15:59:03Z", "message": "Acquire Thread.lock while calling jvmti suspendThread\n\nMatch Thread.suspend() synchronization by acquiring the target thread's Thread.lock before suspending. This will prevent deadlocks in the JCL library that could occur if a thread is suspended while holding Thread.lock.\n\nSigned-off-by: Theresa Mammarella <Theresa.T.Mammarella@ibm.com>"}, "afterCommit": {"oid": "f1c941733205652c550de205b1a47199ee09a15b", "author": {"user": {"login": "theresa-m", "name": "Theresa Mammarella"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/f1c941733205652c550de205b1a47199ee09a15b", "committedDate": "2020-07-09T16:04:28Z", "message": "Acquire Thread.lock while calling jvmti suspendThread\n\nMatch Thread.suspend() synchronization by acquiring the target thread's Thread.lock before suspending. This will prevent deadlocks in the JCL library that could occur if a thread is suspended while holding Thread.lock.\n\nFor example if thread1 is suspended while in the middle of running Thread.isAlive which is synchronized, thread2 calling thread1.interrupt will hang forever since the lock belonging to thread1 will never be released.\n\nSigned-off-by: Theresa Mammarella <Theresa.T.Mammarella@ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f1c941733205652c550de205b1a47199ee09a15b", "author": {"user": {"login": "theresa-m", "name": "Theresa Mammarella"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/f1c941733205652c550de205b1a47199ee09a15b", "committedDate": "2020-07-09T16:04:28Z", "message": "Acquire Thread.lock while calling jvmti suspendThread\n\nMatch Thread.suspend() synchronization by acquiring the target thread's Thread.lock before suspending. This will prevent deadlocks in the JCL library that could occur if a thread is suspended while holding Thread.lock.\n\nFor example if thread1 is suspended while in the middle of running Thread.isAlive which is synchronized, thread2 calling thread1.interrupt will hang forever since the lock belonging to thread1 will never be released.\n\nSigned-off-by: Theresa Mammarella <Theresa.T.Mammarella@ibm.com>"}, "afterCommit": {"oid": "49a7043f52c3a1f66a3c2f4421bd34ee9778fdd5", "author": {"user": {"login": "theresa-m", "name": "Theresa Mammarella"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/49a7043f52c3a1f66a3c2f4421bd34ee9778fdd5", "committedDate": "2020-07-21T17:31:01Z", "message": "Review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82841a333f074fdd732c5e03751684371408dad4", "author": {"user": {"login": "theresa-m", "name": "Theresa Mammarella"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/82841a333f074fdd732c5e03751684371408dad4", "committedDate": "2020-07-21T18:00:28Z", "message": "Acquire Thread.lock while calling jvmti suspendThread\n\nMatch Thread.suspend() synchronization by acquiring the target thread's Thread.lock before suspending. This will prevent deadlocks in the JCL library that could occur if a thread is suspended while holding Thread.lock.\n\nFor example if thread1 is suspended while in the middle of running Thread.isAlive which is synchronized, thread2 calling thread1.interrupt will hang forever since the lock belonging to thread1 will never be released.\n\nSigned-off-by: Theresa Mammarella <Theresa.T.Mammarella@ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "49a7043f52c3a1f66a3c2f4421bd34ee9778fdd5", "author": {"user": {"login": "theresa-m", "name": "Theresa Mammarella"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/49a7043f52c3a1f66a3c2f4421bd34ee9778fdd5", "committedDate": "2020-07-21T17:31:01Z", "message": "Review"}, "afterCommit": {"oid": "82841a333f074fdd732c5e03751684371408dad4", "author": {"user": {"login": "theresa-m", "name": "Theresa Mammarella"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/82841a333f074fdd732c5e03751684371408dad4", "committedDate": "2020-07-21T18:00:28Z", "message": "Acquire Thread.lock while calling jvmti suspendThread\n\nMatch Thread.suspend() synchronization by acquiring the target thread's Thread.lock before suspending. This will prevent deadlocks in the JCL library that could occur if a thread is suspended while holding Thread.lock.\n\nFor example if thread1 is suspended while in the middle of running Thread.isAlive which is synchronized, thread2 calling thread1.interrupt will hang forever since the lock belonging to thread1 will never be released.\n\nSigned-off-by: Theresa Mammarella <Theresa.T.Mammarella@ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyNzAzNzA5", "url": "https://github.com/eclipse-openj9/openj9/pull/9907#pullrequestreview-452703709", "createdAt": "2020-07-21T18:02:33Z", "commit": {"oid": "82841a333f074fdd732c5e03751684371408dad4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 712, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}