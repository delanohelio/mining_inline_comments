{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExNzIwNjM3", "number": 9419, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODo1NDowNFrOEG35Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwMTo1OToxMVrOEG92tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NjQyNjM4OnYy", "diffSide": "RIGHT", "path": "runtime/bcverify/bcverify.c", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODo1NDowNFrOGl8G6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMTozMDo0NlrOGmA5rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzNTMwNw==", "bodyText": "Isn't the local targetItem already initialized to be *targetStackPtr?  Can the local be used here?\nAlso, please use explicit boolean conditions\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t\t\tif ((*targetStackPtr != (UDATA) (BCV_BASE_TYPE_TOP))\n          \n          \n            \n            \t\t\t\t\t\t&& !(*targetStackPtr & BCV_SPECIAL)\n          \n          \n            \n            \t\t\t\t\t\tif ((targetItem != (UDATA) (BCV_BASE_TYPE_TOP))\n          \n          \n            \n            \t\t\t\t\t\t&& ((targetItem & BCV_SPECIAL) == 0)", "url": "https://github.com/eclipse-openj9/openj9/pull/9419#discussion_r442435307", "createdAt": "2020-06-18T18:54:04Z", "author": {"login": "DanHeidinga"}, "path": "runtime/bcverify/bcverify.c", "diffHunk": "@@ -954,8 +954,14 @@ mergeStacks (J9BytecodeVerificationData * verifyData, UDATA target)\n \t\t\t\t\t/* Merge when either the source or target not an object */\n \t\t\t\t\tif ((sourceItem | targetItem) & (BCV_BASE_OR_SPECIAL)) {\n \n-\t\t\t\t\t\t/* Mismatch results in undefined local - rewalk if modified stack */\n-\t\t\t\t\t\tif (*targetStackPtr != (UDATA) (BCV_BASE_TYPE_TOP)) {\n+\t\t\t\t\t\t/* Mismatch results in undefined local - rewalk if modified stack\n+\t\t\t\t\t\t * Note: BCV_SPECIAL (specifically BCV_SPECIAL_INIT) must be reserved to flag the uninitialized_this object\n+\t\t\t\t\t\t * existing in the stackmap frame when invoking setInitializedThisStatus()\n+\t\t\t\t\t\t * after the stackmaps is successfully built.\n+\t\t\t\t\t\t */\n+\t\t\t\t\t\tif ((*targetStackPtr != (UDATA) (BCV_BASE_TYPE_TOP))\n+\t\t\t\t\t\t&& !(*targetStackPtr & BCV_SPECIAL)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "657b969f7841e5c0ff4ac6bdfb6bfbd6f87406d0"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzNjA5MA==", "bodyText": "Is this really checking for (targetItem & BCV_SPECIAL_INIT) != 0 to avoid changing to BCV_BASE_TYPE_TOP in that case?", "url": "https://github.com/eclipse-openj9/openj9/pull/9419#discussion_r442436090", "createdAt": "2020-06-18T18:55:25Z", "author": {"login": "DanHeidinga"}, "path": "runtime/bcverify/bcverify.c", "diffHunk": "@@ -954,8 +954,14 @@ mergeStacks (J9BytecodeVerificationData * verifyData, UDATA target)\n \t\t\t\t\t/* Merge when either the source or target not an object */\n \t\t\t\t\tif ((sourceItem | targetItem) & (BCV_BASE_OR_SPECIAL)) {\n \n-\t\t\t\t\t\t/* Mismatch results in undefined local - rewalk if modified stack */\n-\t\t\t\t\t\tif (*targetStackPtr != (UDATA) (BCV_BASE_TYPE_TOP)) {\n+\t\t\t\t\t\t/* Mismatch results in undefined local - rewalk if modified stack\n+\t\t\t\t\t\t * Note: BCV_SPECIAL (specifically BCV_SPECIAL_INIT) must be reserved to flag the uninitialized_this object\n+\t\t\t\t\t\t * existing in the stackmap frame when invoking setInitializedThisStatus()\n+\t\t\t\t\t\t * after the stackmaps is successfully built.\n+\t\t\t\t\t\t */\n+\t\t\t\t\t\tif ((*targetStackPtr != (UDATA) (BCV_BASE_TYPE_TOP))\n+\t\t\t\t\t\t&& !(*targetStackPtr & BCV_SPECIAL)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzNTMwNw=="}, "originalCommit": {"oid": "657b969f7841e5c0ff4ac6bdfb6bfbd6f87406d0"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUwMzYxMg==", "bodyText": "Isn't the local targetItem already initialized to be *targetStackPtr? Can the local be used here? Also, please use explicit boolean conditions\n\nYes, we should use targetItem instead of *targetStackPtr in this case. Updated as suggested.", "url": "https://github.com/eclipse-openj9/openj9/pull/9419#discussion_r442503612", "createdAt": "2020-06-18T21:08:39Z", "author": {"login": "ChengJin01"}, "path": "runtime/bcverify/bcverify.c", "diffHunk": "@@ -954,8 +954,14 @@ mergeStacks (J9BytecodeVerificationData * verifyData, UDATA target)\n \t\t\t\t\t/* Merge when either the source or target not an object */\n \t\t\t\t\tif ((sourceItem | targetItem) & (BCV_BASE_OR_SPECIAL)) {\n \n-\t\t\t\t\t\t/* Mismatch results in undefined local - rewalk if modified stack */\n-\t\t\t\t\t\tif (*targetStackPtr != (UDATA) (BCV_BASE_TYPE_TOP)) {\n+\t\t\t\t\t\t/* Mismatch results in undefined local - rewalk if modified stack\n+\t\t\t\t\t\t * Note: BCV_SPECIAL (specifically BCV_SPECIAL_INIT) must be reserved to flag the uninitialized_this object\n+\t\t\t\t\t\t * existing in the stackmap frame when invoking setInitializedThisStatus()\n+\t\t\t\t\t\t * after the stackmaps is successfully built.\n+\t\t\t\t\t\t */\n+\t\t\t\t\t\tif ((*targetStackPtr != (UDATA) (BCV_BASE_TYPE_TOP))\n+\t\t\t\t\t\t&& !(*targetStackPtr & BCV_SPECIAL)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzNTMwNw=="}, "originalCommit": {"oid": "657b969f7841e5c0ff4ac6bdfb6bfbd6f87406d0"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUxMzgzNw==", "bodyText": "Is this really checking for (targetItem & BCV_SPECIAL_INIT) != 0 to avoid changing to BCV_BASE_TYPE_TOP in that case?\n\nYes, it was based on the thorough debugging with the class files in question.  It is obvious that the intention of the original implementation was to reserve the BCV_SPECIAL bits so as to set up uninitializedThis  in setInitializedThisStatus but somehow the bits were wipe out here accidentally to deal with other situations. The  BCV_SPECIAL bits can't be restored back or reset up later in simulateStack once they are removed here. That's why we need to handle the case on both mergeStack()  and  matchStack() to ensure the BCV_SPECIAL bits from the generated stackmaps are correctly addressed.", "url": "https://github.com/eclipse-openj9/openj9/pull/9419#discussion_r442513837", "createdAt": "2020-06-18T21:30:46Z", "author": {"login": "ChengJin01"}, "path": "runtime/bcverify/bcverify.c", "diffHunk": "@@ -954,8 +954,14 @@ mergeStacks (J9BytecodeVerificationData * verifyData, UDATA target)\n \t\t\t\t\t/* Merge when either the source or target not an object */\n \t\t\t\t\tif ((sourceItem | targetItem) & (BCV_BASE_OR_SPECIAL)) {\n \n-\t\t\t\t\t\t/* Mismatch results in undefined local - rewalk if modified stack */\n-\t\t\t\t\t\tif (*targetStackPtr != (UDATA) (BCV_BASE_TYPE_TOP)) {\n+\t\t\t\t\t\t/* Mismatch results in undefined local - rewalk if modified stack\n+\t\t\t\t\t\t * Note: BCV_SPECIAL (specifically BCV_SPECIAL_INIT) must be reserved to flag the uninitialized_this object\n+\t\t\t\t\t\t * existing in the stackmap frame when invoking setInitializedThisStatus()\n+\t\t\t\t\t\t * after the stackmaps is successfully built.\n+\t\t\t\t\t\t */\n+\t\t\t\t\t\tif ((*targetStackPtr != (UDATA) (BCV_BASE_TYPE_TOP))\n+\t\t\t\t\t\t&& !(*targetStackPtr & BCV_SPECIAL)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzNTMwNw=="}, "originalCommit": {"oid": "657b969f7841e5c0ff4ac6bdfb6bfbd6f87406d0"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NjQzNDc4OnYy", "diffSide": "RIGHT", "path": "runtime/bcverify/j9bcverify.tdf", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODo1NjoyMFrOGl8MIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMTowNjowMlrOGmANCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzNjY0MQ==", "bodyText": "Tracepoints aren't changed.  If necessary, the current one is obsoleted and a new one is introduced at the end of the file so the index & format never change", "url": "https://github.com/eclipse-openj9/openj9/pull/9419#discussion_r442436641", "createdAt": "2020-06-18T18:56:20Z", "author": {"login": "DanHeidinga"}, "path": "runtime/bcverify/j9bcverify.tdf", "diffHunk": "@@ -114,7 +114,7 @@ TraceExit=Trc_RTV_findAndMatchStack_Exit Overhead=1 Level=3 Template=\"findAndMat\n TraceEntry=Trc_RTV_matchStack_Entry Overhead=1 Level=3 Template=\"matchStack - inlineMatch is %i\"\n TraceException=Trc_RTV_matchStack_DepthMismatchException Overhead=1 Level=1 Template=\"matchStack - %.*s %.*s%.*s mismatched stack depths, live = %i, target = %i\"\n TraceException=Trc_RTV_matchStack_IncompatibleClassException Overhead=1 Level=1 Template=\"matchStack - %.*s %.*s%.*s incompatible objects at offset %i, live = 0x%X, target = 0x%X\"\n-TraceException=Trc_RTV_matchStack_PrimitiveMismatchException Overhead=1 Level=1 Template=\"matchStack - %.*s %.*s%.*s incompatible primitives at offset %i, live = 0x%X, target = 0x%X\"\n+TraceException=Trc_RTV_matchStack_PrimitiveOrSpecialMismatchException Overhead=1 Level=1 Template=\"matchStack - %.*s %.*s%.*s incompatible primitives or special at offset %i, live = 0x%X, target = 0x%X\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "657b969f7841e5c0ff4ac6bdfb6bfbd6f87406d0"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUwMjQxMA==", "bodyText": "Agree and moved the new tracepoint to the end of the file.", "url": "https://github.com/eclipse-openj9/openj9/pull/9419#discussion_r442502410", "createdAt": "2020-06-18T21:06:02Z", "author": {"login": "ChengJin01"}, "path": "runtime/bcverify/j9bcverify.tdf", "diffHunk": "@@ -114,7 +114,7 @@ TraceExit=Trc_RTV_findAndMatchStack_Exit Overhead=1 Level=3 Template=\"findAndMat\n TraceEntry=Trc_RTV_matchStack_Entry Overhead=1 Level=3 Template=\"matchStack - inlineMatch is %i\"\n TraceException=Trc_RTV_matchStack_DepthMismatchException Overhead=1 Level=1 Template=\"matchStack - %.*s %.*s%.*s mismatched stack depths, live = %i, target = %i\"\n TraceException=Trc_RTV_matchStack_IncompatibleClassException Overhead=1 Level=1 Template=\"matchStack - %.*s %.*s%.*s incompatible objects at offset %i, live = 0x%X, target = 0x%X\"\n-TraceException=Trc_RTV_matchStack_PrimitiveMismatchException Overhead=1 Level=1 Template=\"matchStack - %.*s %.*s%.*s incompatible primitives at offset %i, live = 0x%X, target = 0x%X\"\n+TraceException=Trc_RTV_matchStack_PrimitiveOrSpecialMismatchException Overhead=1 Level=1 Template=\"matchStack - %.*s %.*s%.*s incompatible primitives or special at offset %i, live = 0x%X, target = 0x%X\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzNjY0MQ=="}, "originalCommit": {"oid": "657b969f7841e5c0ff4ac6bdfb6bfbd6f87406d0"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NjY3NjA1OnYy", "diffSide": "RIGHT", "path": "runtime/bcverify/rtverify.c", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMDowOTo1MlrOGl-jvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMTowNDo1OVrOGmAK-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ3NTQ1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t/* Only skip the check on the target slot with BCV_SPECIAL for the generated stackmaps\n          \n          \n            \n            \t\t\t * as this slot is set up based on the bytecode itself rather than decompressed stackmaps.\n          \n          \n            \n            \t\t\t */\n          \n          \n            \n            \t\t\t} else if ((*targetPtr != BCV_BASE_TYPE_TOP) && !((*targetPtr & BCV_SPECIAL) && verifyData->createdStackMap)) {\n          \n          \n            \n            \t\t\t\tTrc_RTV_matchStack_PrimitiveOrSpecialMismatchException(verifyData->vmStruct,\n          \n          \n            \n            \t\t\t} else if (*targetPtr != BCV_BASE_TYPE_TOP) {\n          \n          \n            \n            \t\t\t\tif (((*targetPtr & BCV_SPECIAL) != 0) && verifyData->createdStackMap) {\n          \n          \n            \n            \t\t\t\t\t/* Generated stackmaps can skip the check on the target slot with BCV_SPECIAL\n          \n          \n            \n            \t\t\t \t\t* as this slot is set up based on the bytecode itself rather than decompressed stackmaps.\n          \n          \n            \n            \t\t\t\t\t*/\n          \n          \n            \n            \t\t\t\t} else {\n          \n          \n            \n            \t\t\t\t\tTrc_RTV_matchStack_PrimitiveOrSpecialMismatchException(verifyData->vmStruct,\n          \n          \n            \n            \t\t\t\t\t.....\n          \n          \n            \n            \t\t\t\t\trc = BCV_FAIL; /* fail - primitive or special mismatch */\n          \n          \n            \n            \t\t\t\t\tgoto _incompatibleType;\n          \n          \n            \n            \t\t\t\t}\n          \n          \n            \n            \t\t\t}\n          \n      \n    \n    \n  \n\nReorganizing this may be clearer about when the check is being skipped vs not.", "url": "https://github.com/eclipse-openj9/openj9/pull/9419#discussion_r442475455", "createdAt": "2020-06-18T20:09:52Z", "author": {"login": "DanHeidinga"}, "path": "runtime/bcverify/rtverify.c", "diffHunk": "@@ -353,8 +345,11 @@ matchStack(J9BytecodeVerificationData * verifyData, J9BranchTargetStack *liveSta\n \t\t\t\t\t\tgoto _incompatibleType;\n \t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t} else if (*targetPtr != BCV_BASE_TYPE_TOP) {\n-\t\t\t\tTrc_RTV_matchStack_PrimitiveMismatchException(verifyData->vmStruct,\n+\t\t\t/* Only skip the check on the target slot with BCV_SPECIAL for the generated stackmaps\n+\t\t\t * as this slot is set up based on the bytecode itself rather than decompressed stackmaps.\n+\t\t\t */\n+\t\t\t} else if ((*targetPtr != BCV_BASE_TYPE_TOP) && !((*targetPtr & BCV_SPECIAL) && verifyData->createdStackMap)) {\n+\t\t\t\tTrc_RTV_matchStack_PrimitiveOrSpecialMismatchException(verifyData->vmStruct,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "657b969f7841e5c0ff4ac6bdfb6bfbd6f87406d0"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUwMTg4Mg==", "bodyText": "Agree and updated against the suggestion above.", "url": "https://github.com/eclipse-openj9/openj9/pull/9419#discussion_r442501882", "createdAt": "2020-06-18T21:04:59Z", "author": {"login": "ChengJin01"}, "path": "runtime/bcverify/rtverify.c", "diffHunk": "@@ -353,8 +345,11 @@ matchStack(J9BytecodeVerificationData * verifyData, J9BranchTargetStack *liveSta\n \t\t\t\t\t\tgoto _incompatibleType;\n \t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t} else if (*targetPtr != BCV_BASE_TYPE_TOP) {\n-\t\t\t\tTrc_RTV_matchStack_PrimitiveMismatchException(verifyData->vmStruct,\n+\t\t\t/* Only skip the check on the target slot with BCV_SPECIAL for the generated stackmaps\n+\t\t\t * as this slot is set up based on the bytecode itself rather than decompressed stackmaps.\n+\t\t\t */\n+\t\t\t} else if ((*targetPtr != BCV_BASE_TYPE_TOP) && !((*targetPtr & BCV_SPECIAL) && verifyData->createdStackMap)) {\n+\t\t\t\tTrc_RTV_matchStack_PrimitiveOrSpecialMismatchException(verifyData->vmStruct,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ3NTQ1NQ=="}, "originalCommit": {"oid": "657b969f7841e5c0ff4ac6bdfb6bfbd6f87406d0"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NzQwMzQyOnYy", "diffSide": "LEFT", "path": "runtime/bcverify/j9bcverify.tdf", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwMTo1OToxMVrOGmFnsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwMjo1NTozMVrOGmGbeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU5MTE1Mw==", "bodyText": "The old tracepoint has to stay here", "url": "https://github.com/eclipse-openj9/openj9/pull/9419#discussion_r442591153", "createdAt": "2020-06-19T01:59:11Z", "author": {"login": "DanHeidinga"}, "path": "runtime/bcverify/j9bcverify.tdf", "diffHunk": "@@ -114,7 +114,6 @@ TraceExit=Trc_RTV_findAndMatchStack_Exit Overhead=1 Level=3 Template=\"findAndMat\n TraceEntry=Trc_RTV_matchStack_Entry Overhead=1 Level=3 Template=\"matchStack - inlineMatch is %i\"\n TraceException=Trc_RTV_matchStack_DepthMismatchException Overhead=1 Level=1 Template=\"matchStack - %.*s %.*s%.*s mismatched stack depths, live = %i, target = %i\"\n TraceException=Trc_RTV_matchStack_IncompatibleClassException Overhead=1 Level=1 Template=\"matchStack - %.*s %.*s%.*s incompatible objects at offset %i, live = 0x%X, target = 0x%X\"\n-TraceException=Trc_RTV_matchStack_PrimitiveMismatchException Overhead=1 Level=1 Template=\"matchStack - %.*s %.*s%.*s incompatible primitives at offset %i, live = 0x%X, target = 0x%X\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2335ae497132851dade07176169b9b6aa3c863a"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYwNDQwOA==", "bodyText": "Fixed.", "url": "https://github.com/eclipse-openj9/openj9/pull/9419#discussion_r442604408", "createdAt": "2020-06-19T02:55:31Z", "author": {"login": "ChengJin01"}, "path": "runtime/bcverify/j9bcverify.tdf", "diffHunk": "@@ -114,7 +114,6 @@ TraceExit=Trc_RTV_findAndMatchStack_Exit Overhead=1 Level=3 Template=\"findAndMat\n TraceEntry=Trc_RTV_matchStack_Entry Overhead=1 Level=3 Template=\"matchStack - inlineMatch is %i\"\n TraceException=Trc_RTV_matchStack_DepthMismatchException Overhead=1 Level=1 Template=\"matchStack - %.*s %.*s%.*s mismatched stack depths, live = %i, target = %i\"\n TraceException=Trc_RTV_matchStack_IncompatibleClassException Overhead=1 Level=1 Template=\"matchStack - %.*s %.*s%.*s incompatible objects at offset %i, live = 0x%X, target = 0x%X\"\n-TraceException=Trc_RTV_matchStack_PrimitiveMismatchException Overhead=1 Level=1 Template=\"matchStack - %.*s %.*s%.*s incompatible primitives at offset %i, live = 0x%X, target = 0x%X\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU5MTE1Mw=="}, "originalCommit": {"oid": "f2335ae497132851dade07176169b9b6aa3c863a"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 302, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}