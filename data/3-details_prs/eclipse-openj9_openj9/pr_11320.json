{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwMzg0MDAz", "number": 11320, "title": "Perform cleanup in x86 and Z's multianewarrayEvaluator", "bodyText": "This commit does the following in the above evaluator:\n\nRemove unreachable code\nUses the OMR::align API to calculate alignment compensation\nFix an RA bug where multiple jump instructions to OOL code are\ncreated. This is incorrect as the RA will only account for the\nlast jump point to the OOL code when doing assignment.\nAdd C++ casts\nSimplify calculation of elementSize\nSimplify instructions comparing firstDimLenReg and\nmaxObjectSizeInElements\n\nSigned-off-by: Dhruv Chopra Dhruv.C.Chopra@ibm.com", "createdAt": "2020-12-01T15:27:00Z", "url": "https://github.com/eclipse-openj9/openj9/pull/11320", "merged": true, "mergeCommit": {"oid": "ce8ff9a16a3cb33e953bd6d584ce8d72c0ed9315"}, "closed": true, "closedAt": "2020-12-19T13:40:26Z", "author": {"login": "dchopra001"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdiCscggFqTU0MjM4NjMyNQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdns6HdgFqTU1NTk0MjI1OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyMzg2MzI1", "url": "https://github.com/eclipse-openj9/openj9/pull/11320#pullrequestreview-542386325", "createdAt": "2020-12-01T23:37:11Z", "commit": {"oid": "1a884c808a3bdd62c434751190a314e807d75b16"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMzozNzoxMVrOH9EP2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMzozODo1M1rOH9ESUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc5NDc3OA==", "bodyText": "This should use static_cast. Similarly in other places where we fixed the casts on the Z PR.", "url": "https://github.com/eclipse-openj9/openj9/pull/11320#discussion_r533794778", "createdAt": "2020-12-01T23:37:11Z", "author": {"login": "fjeremic"}, "path": "runtime/compiler/x/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -1245,15 +1246,10 @@ TR::Register *J9::X86::TreeEvaluator::newEvaluator(TR::Node *node, TR::CodeGener\n \n TR::Register *J9::X86::TreeEvaluator::multianewArrayEvaluator(TR::Node *node, TR::CodeGenerator *cg)\n    {\n-   static char *useDirectHelperCall = feGetEnv(\"TR_MultiANewArrayEvaluatorUseDirectCall\");\n-\n    TR::Node *firstChild = node->getFirstChild();\n    TR::Node *secondChild = node->getSecondChild();\n    TR::Node *thirdChild = node->getThirdChild();\n \n-   if (useDirectHelperCall || !secondChild->getOpCode().isLoadConst() || secondChild->getInt()!=2)\n-      return TR::TreeEvaluator::performHelperCall(node, NULL, TR::acall, true, cg);\n-\n    // 2-dimensional MultiANewArray\n    TR::Compilation *comp = cg->comp();\n    TR_J9VMBase *fej9 = (TR_J9VMBase *)(comp->fe());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a884c808a3bdd62c434751190a314e807d75b16"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc5NTIyMg==", "bodyText": "elementSize computation should be similar to Z.", "url": "https://github.com/eclipse-openj9/openj9/pull/11320#discussion_r533795222", "createdAt": "2020-12-01T23:38:27Z", "author": {"login": "fjeremic"}, "path": "runtime/compiler/x/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -1317,7 +1314,7 @@ TR::Register *J9::X86::TreeEvaluator::multianewArrayEvaluator(TR::Node *node, TR\n    generateRegMemInstruction(LRegMem(), node, targetReg, generateX86MemoryReference(vmThreadReg, offsetof(J9VMThread, heapAlloc), cg), cg);\n    generateRegMemInstruction(LEARegMem(), node, temp1Reg, generateX86MemoryReference(targetReg, zeroArraySize, cg), cg);\n    generateRegMemInstruction(CMPRegMem(), node, temp1Reg, generateX86MemoryReference(vmThreadReg, offsetof(J9VMThread, heapTop), cg), cg);\n-   generateLabelInstruction(JA4, node, failLabel, cg);\n+   generateLabelInstruction(JA4, node, oolJumpPoint, cg);\n    generateMemRegInstruction(SMemReg(), node, generateX86MemoryReference(vmThreadReg, offsetof(J9VMThread, heapAlloc), cg), temp1Reg, cg);\n \n    // Init class", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a884c808a3bdd62c434751190a314e807d75b16"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc5NTQwOA==", "bodyText": "The if (comp->target().is64Bit() && !(maxObjectSizeInElements > 0 && maxObjectSizeInElements <= (uintptr_t)INT_MAX)) needs to be fixed the same way as Z.", "url": "https://github.com/eclipse-openj9/openj9/pull/11320#discussion_r533795408", "createdAt": "2020-12-01T23:38:53Z", "author": {"login": "fjeremic"}, "path": "runtime/compiler/x/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -1317,7 +1314,7 @@ TR::Register *J9::X86::TreeEvaluator::multianewArrayEvaluator(TR::Node *node, TR\n    generateRegMemInstruction(LRegMem(), node, targetReg, generateX86MemoryReference(vmThreadReg, offsetof(J9VMThread, heapAlloc), cg), cg);\n    generateRegMemInstruction(LEARegMem(), node, temp1Reg, generateX86MemoryReference(targetReg, zeroArraySize, cg), cg);\n    generateRegMemInstruction(CMPRegMem(), node, temp1Reg, generateX86MemoryReference(vmThreadReg, offsetof(J9VMThread, heapTop), cg), cg);\n-   generateLabelInstruction(JA4, node, failLabel, cg);\n+   generateLabelInstruction(JA4, node, oolJumpPoint, cg);\n    generateMemRegInstruction(SMemReg(), node, generateX86MemoryReference(vmThreadReg, offsetof(J9VMThread, heapAlloc), cg), temp1Reg, cg);\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a884c808a3bdd62c434751190a314e807d75b16"}, "originalPosition": 71}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1a884c808a3bdd62c434751190a314e807d75b16", "author": {"user": {"login": "dchopra001", "name": "Dhruv Chopra"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/1a884c808a3bdd62c434751190a314e807d75b16", "committedDate": "2020-12-01T15:24:00Z", "message": "Perform cleanup in x86 multianewarrayEvaluator\n\nThis commit does the following in the above evaluator:\n- Remove unreachable code\n- Uses the OMR::align API to calculate alignment compensation\n- Fix an RA bug where multiple jump instructions to OOL code are\n  created. This is incorrect as the RA will only account for the\n  last jump point to the OOL code when doing assignment.\n\nSigned-off-by: Dhruv Chopra <Dhruv.C.Chopra@ibm.com>"}, "afterCommit": {"oid": "997900e195cb6aa8469deec54cdf947e8622d2f4", "author": {"user": {"login": "dchopra001", "name": "Dhruv Chopra"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/997900e195cb6aa8469deec54cdf947e8622d2f4", "committedDate": "2020-12-14T16:47:01Z", "message": "Perform cleanup in x86 multianewarrayEvaluator\n\nThis commit does the following in the above evaluator:\n- Remove unreachable code\n- Uses the OMR::align API to calculate alignment compensation\n- Fix an RA bug where multiple jump instructions to OOL code are\n  created. This is incorrect as the RA will only account for the\n  last jump point to the OOL code when doing assignment.\n- Add C++ casts\n- Simplify calculation of elementSize\n- Simplify instructions comparing firstDimLenReg and\n  maxObjectSizeInElements\n\nSigned-off-by: Dhruv Chopra <Dhruv.C.Chopra@ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxNjk3MTgz", "url": "https://github.com/eclipse-openj9/openj9/pull/11320#pullrequestreview-551697183", "createdAt": "2020-12-14T17:40:00Z", "commit": {"oid": "997900e195cb6aa8469deec54cdf947e8622d2f4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0MDQzNTg0", "url": "https://github.com/eclipse-openj9/openj9/pull/11320#pullrequestreview-554043584", "createdAt": "2020-12-16T20:07:31Z", "commit": {"oid": "997900e195cb6aa8469deec54cdf947e8622d2f4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQyMDowNzozMVrOIHXEfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQyMDowNzozMVrOIHXEfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU4ODkyNg==", "bodyText": "Am I reading the code wrong, or does the loop exit on L1413 (generateLabelInstruction(JA4, node, loopLabel, cg);) fall into this code if the backedge isn't taken, which will always take you to the OOL instructions?  Is this the behaviour you expect because I don't think that's how it originally behaved.  You might need a branch around this if not.", "url": "https://github.com/eclipse-openj9/openj9/pull/11320#discussion_r544588926", "createdAt": "2020-12-16T20:07:31Z", "author": {"login": "0xdaryl"}, "path": "runtime/compiler/x/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -1480,6 +1445,9 @@ TR::Register *J9::X86::TreeEvaluator::multianewArrayEvaluator(TR::Node *node, TR\n \n    deps->stopAddingConditions();\n \n+   generateLabelInstruction(LABEL, node, oolJumpPoint, cg);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "997900e195cb6aa8469deec54cdf947e8622d2f4"}, "originalPosition": 174}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ba3b081283c58b579c53bcf3980fb0476cbc059", "author": {"user": {"login": "dchopra001", "name": "Dhruv Chopra"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/0ba3b081283c58b579c53bcf3980fb0476cbc059", "committedDate": "2020-12-17T00:31:05Z", "message": "Perform cleanup in x86 multianewarrayEvaluator\n\nThis commit does the following in the above evaluator:\n- Remove unreachable code\n- Uses the OMR::align API to calculate alignment compensation\n- Fix an RA bug where multiple jump instructions to OOL code are\n  created. This is incorrect as the RA will only account for the\n  last jump point to the OOL code when doing assignment.\n- Add C++ casts\n- Simplify calculation of elementSize\n- Simplify instructions comparing firstDimLenReg and\n  maxObjectSizeInElements\n\nSigned-off-by: Dhruv Chopra <Dhruv.C.Chopra@ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf27d05f8d158d56ee81266fc3ebf88aba10ddd0", "author": {"user": {"login": "dchopra001", "name": "Dhruv Chopra"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/cf27d05f8d158d56ee81266fc3ebf88aba10ddd0", "committedDate": "2020-12-17T00:31:05Z", "message": "Add jump to fallThru label\n\nSigned-off-by: Dhruv Chopra <Dhruv.C.Chopra@ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "211e6046b9e4b6f78721c054d259cc51f8e1d173", "author": {"user": {"login": "dchopra001", "name": "Dhruv Chopra"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/211e6046b9e4b6f78721c054d259cc51f8e1d173", "committedDate": "2020-12-18T14:36:50Z", "message": "Replace shift with mul instruction on X and Z\n\nSigned-off-by: Dhruv Chopra <Dhruv.C.Chopra@ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dde60a640806f26a526ddb599209c46d71e41250", "author": {"user": {"login": "dchopra001", "name": "Dhruv Chopra"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/dde60a640806f26a526ddb599209c46d71e41250", "committedDate": "2020-12-16T20:44:48Z", "message": "Add jump to fallThru label\n\nSigned-off-by: Dhruv Chopra <Dhruv.C.Chopra@ibm.com>"}, "afterCommit": {"oid": "211e6046b9e4b6f78721c054d259cc51f8e1d173", "author": {"user": {"login": "dchopra001", "name": "Dhruv Chopra"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/211e6046b9e4b6f78721c054d259cc51f8e1d173", "committedDate": "2020-12-18T14:36:50Z", "message": "Replace shift with mul instruction on X and Z\n\nSigned-off-by: Dhruv Chopra <Dhruv.C.Chopra@ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b04685cd31f52361130208da2c815e94a8fdeea5", "author": {"user": {"login": "dchopra001", "name": "Dhruv Chopra"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/b04685cd31f52361130208da2c815e94a8fdeea5", "committedDate": "2020-12-18T15:24:16Z", "message": "Z evaluator cleanup for multianewarrayEvaluator\n\nExplicitly specify 64-bit instruction instead of using APIs\nsince the evaluator only supports 64-bit JVMs.\n\nRemove unreachable code related to heapBase (since it's\nalways 0).\n\nSigned-off-by: Dhruv Chopra <Dhruv.C.Chopra@ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cbe7eb9d34e5cc61dfad14cf1f55adc21f134724", "author": {"user": {"login": "dchopra001", "name": "Dhruv Chopra"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/cbe7eb9d34e5cc61dfad14cf1f55adc21f134724", "committedDate": "2020-12-18T15:27:45Z", "message": "Assert use of multianewarrayEvaluator on 64-bit\n\nSigned-off-by: Dhruv Chopra <Dhruv.C.Chopra@ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1NTk4MDMy", "url": "https://github.com/eclipse-openj9/openj9/pull/11320#pullrequestreview-555598032", "createdAt": "2020-12-18T15:41:35Z", "commit": {"oid": "cbe7eb9d34e5cc61dfad14cf1f55adc21f134724"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1OTQyMjU5", "url": "https://github.com/eclipse-openj9/openj9/pull/11320#pullrequestreview-555942259", "createdAt": "2020-12-19T13:39:35Z", "commit": {"oid": "cbe7eb9d34e5cc61dfad14cf1f55adc21f134724"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1683, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}