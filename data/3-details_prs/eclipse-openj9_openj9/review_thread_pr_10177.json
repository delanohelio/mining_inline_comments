{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5NjU1Mzgz", "number": 10177, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMDo1NzowMlrOEPFDig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNzoyNzoxNFrOEPOrGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MjQ2OTIyOnYy", "diffSide": "RIGHT", "path": "runtime/vm/createramclass.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMDo1NzowMlrOGyl0mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMDo1NzowMlrOGyl0mQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTcwMTY1Nw==", "bodyText": "Please use this macro instead (UTFs are not null terminated):\nhttps://github.com/eclipse/openj9/blob/ee1f3d1ae159643f5cf8d3b3554224ee6282f082/runtime/oti/j9.h#L171", "url": "https://github.com/eclipse-openj9/openj9/pull/10177#discussion_r455701657", "createdAt": "2020-07-16T10:57:02Z", "author": {"login": "gacholio"}, "path": "runtime/vm/createramclass.cpp", "diffHunk": "@@ -1577,6 +1577,42 @@ popLoadingOrLinkingStack(J9VMThread *vmThread, J9StackElement **stack, J9Pool *s\n \tpool_removeElement(stackpool, topOfStack);\n }\n \n+\n+/**\n+ * JEP 360: if super class/interface is sealed the inheriting subclass must be listed in the\n+ * super's PermittedSubclasses attribute to be a legal subclass.\n+ * @param superRomClass ROM class of super class or interface\n+ * @param className name of subclass\n+ * @param classNameLength length of subclass name\n+ * @return TRUE if subclass can legally inherit the super, FALSE otherwise.\n+ */\n+static VMINLINE BOOLEAN\n+isClassPermittedBySealedSuper(J9ROMClass *superRomClass, U_8* className, U_16 classNameLength)\n+{\n+\tif (! J9ROMCLASS_IS_SEALED(superRomClass)) {\n+\t\t/* for non-sealed classes all subclasses are permitted (the final case is handled elsewhere). */\n+\t\treturn TRUE;\n+\t}\n+\n+\tBOOLEAN result = FALSE;\n+\tU_32 *permittedSubclassesCountPtr = getNumberOfPermittedSubclassesPtr(superRomClass);\n+\n+\t/* find matching subclass name */\n+\tfor (U_32 index = 0; index < *permittedSubclassesCountPtr; index++) {\n+\t\tJ9UTF8* permittedSubclassNameUtf8 = permittedSubclassesNameAtIndex(permittedSubclassesCountPtr, index);\n+\t\tU_8 *permittedSubclassName = J9UTF8_DATA(permittedSubclassNameUtf8);\n+\t\tU_16 permittedSubclassLength = J9UTF8_LENGTH(permittedSubclassNameUtf8);\n+\n+\t\tif ((permittedSubclassLength == classNameLength)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5b1ceaf3e2ce2e4f51e2da4666a5824f7c6b8ea"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MjQ3MTM4OnYy", "diffSide": "RIGHT", "path": "runtime/vm/createramclass.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMDo1Nzo1M1rOGyl2Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNjoxOTozMFrOGyyjOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTcwMjA0Mw==", "bodyText": "Please avoid the use of multiple returns.", "url": "https://github.com/eclipse-openj9/openj9/pull/10177#discussion_r455702043", "createdAt": "2020-07-16T10:57:53Z", "author": {"login": "gacholio"}, "path": "runtime/vm/createramclass.cpp", "diffHunk": "@@ -1577,6 +1577,42 @@ popLoadingOrLinkingStack(J9VMThread *vmThread, J9StackElement **stack, J9Pool *s\n \tpool_removeElement(stackpool, topOfStack);\n }\n \n+\n+/**\n+ * JEP 360: if super class/interface is sealed the inheriting subclass must be listed in the\n+ * super's PermittedSubclasses attribute to be a legal subclass.\n+ * @param superRomClass ROM class of super class or interface\n+ * @param className name of subclass\n+ * @param classNameLength length of subclass name\n+ * @return TRUE if subclass can legally inherit the super, FALSE otherwise.\n+ */\n+static VMINLINE BOOLEAN\n+isClassPermittedBySealedSuper(J9ROMClass *superRomClass, U_8* className, U_16 classNameLength)\n+{\n+\tif (! J9ROMCLASS_IS_SEALED(superRomClass)) {\n+\t\t/* for non-sealed classes all subclasses are permitted (the final case is handled elsewhere). */\n+\t\treturn TRUE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5b1ceaf3e2ce2e4f51e2da4666a5824f7c6b8ea"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkxMDIwMA==", "bodyText": "updated.", "url": "https://github.com/eclipse-openj9/openj9/pull/10177#discussion_r455910200", "createdAt": "2020-07-16T16:19:30Z", "author": {"login": "theresa-m"}, "path": "runtime/vm/createramclass.cpp", "diffHunk": "@@ -1577,6 +1577,42 @@ popLoadingOrLinkingStack(J9VMThread *vmThread, J9StackElement **stack, J9Pool *s\n \tpool_removeElement(stackpool, topOfStack);\n }\n \n+\n+/**\n+ * JEP 360: if super class/interface is sealed the inheriting subclass must be listed in the\n+ * super's PermittedSubclasses attribute to be a legal subclass.\n+ * @param superRomClass ROM class of super class or interface\n+ * @param className name of subclass\n+ * @param classNameLength length of subclass name\n+ * @return TRUE if subclass can legally inherit the super, FALSE otherwise.\n+ */\n+static VMINLINE BOOLEAN\n+isClassPermittedBySealedSuper(J9ROMClass *superRomClass, U_8* className, U_16 classNameLength)\n+{\n+\tif (! J9ROMCLASS_IS_SEALED(superRomClass)) {\n+\t\t/* for non-sealed classes all subclasses are permitted (the final case is handled elsewhere). */\n+\t\treturn TRUE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTcwMjA0Mw=="}, "originalCommit": {"oid": "f5b1ceaf3e2ce2e4f51e2da4666a5824f7c6b8ea"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NDA0NTA0OnYy", "diffSide": "RIGHT", "path": "runtime/vm/createramclass.cpp", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNzoyNzoxNFrOGy1E_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMjowMjoyOFrOGy-YFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk1MTYxMg==", "bodyText": "Once testing is complete, please remove the extra blank here and I'll merge.", "url": "https://github.com/eclipse-openj9/openj9/pull/10177#discussion_r455951612", "createdAt": "2020-07-16T17:27:14Z", "author": {"login": "gacholio"}, "path": "runtime/vm/createramclass.cpp", "diffHunk": "@@ -1577,6 +1577,41 @@ popLoadingOrLinkingStack(J9VMThread *vmThread, J9StackElement **stack, J9Pool *s\n \tpool_removeElement(stackpool, topOfStack);\n }\n \n+\n+/**\n+ * JEP 360: if super class/interface is sealed the inheriting subclass must be listed in the\n+ * super's PermittedSubclasses attribute to be a legal subclass.\n+ * @param superRomClass ROM class of super class or interface\n+ * @param className name of subclass\n+ * @param classNameLength length of subclass name\n+ * @return TRUE if subclass can legally inherit the super, FALSE otherwise.\n+ */\n+static VMINLINE BOOLEAN\n+isClassPermittedBySealedSuper(J9ROMClass *superRomClass, U_8* className, U_16 classNameLength)\n+{\n+\tBOOLEAN result = FALSE;\n+\n+\tif (! J9ROMCLASS_IS_SEALED(superRomClass)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "753f40817360c92e7f8ab1ba9a4e591f37f8bb9b"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjEwMDQzMg==", "bodyText": "I have removed the space. The tests will not pass until adoptium/TKG#94 is merged.", "url": "https://github.com/eclipse-openj9/openj9/pull/10177#discussion_r456100432", "createdAt": "2020-07-16T21:54:49Z", "author": {"login": "theresa-m"}, "path": "runtime/vm/createramclass.cpp", "diffHunk": "@@ -1577,6 +1577,41 @@ popLoadingOrLinkingStack(J9VMThread *vmThread, J9StackElement **stack, J9Pool *s\n \tpool_removeElement(stackpool, topOfStack);\n }\n \n+\n+/**\n+ * JEP 360: if super class/interface is sealed the inheriting subclass must be listed in the\n+ * super's PermittedSubclasses attribute to be a legal subclass.\n+ * @param superRomClass ROM class of super class or interface\n+ * @param className name of subclass\n+ * @param classNameLength length of subclass name\n+ * @return TRUE if subclass can legally inherit the super, FALSE otherwise.\n+ */\n+static VMINLINE BOOLEAN\n+isClassPermittedBySealedSuper(J9ROMClass *superRomClass, U_8* className, U_16 classNameLength)\n+{\n+\tBOOLEAN result = FALSE;\n+\n+\tif (! J9ROMCLASS_IS_SEALED(superRomClass)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk1MTYxMg=="}, "originalCommit": {"oid": "753f40817360c92e7f8ab1ba9a4e591f37f8bb9b"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjEwMzk1OQ==", "bodyText": "OK let me know when it's ready.", "url": "https://github.com/eclipse-openj9/openj9/pull/10177#discussion_r456103959", "createdAt": "2020-07-16T22:02:28Z", "author": {"login": "gacholio"}, "path": "runtime/vm/createramclass.cpp", "diffHunk": "@@ -1577,6 +1577,41 @@ popLoadingOrLinkingStack(J9VMThread *vmThread, J9StackElement **stack, J9Pool *s\n \tpool_removeElement(stackpool, topOfStack);\n }\n \n+\n+/**\n+ * JEP 360: if super class/interface is sealed the inheriting subclass must be listed in the\n+ * super's PermittedSubclasses attribute to be a legal subclass.\n+ * @param superRomClass ROM class of super class or interface\n+ * @param className name of subclass\n+ * @param classNameLength length of subclass name\n+ * @return TRUE if subclass can legally inherit the super, FALSE otherwise.\n+ */\n+static VMINLINE BOOLEAN\n+isClassPermittedBySealedSuper(J9ROMClass *superRomClass, U_8* className, U_16 classNameLength)\n+{\n+\tBOOLEAN result = FALSE;\n+\n+\tif (! J9ROMCLASS_IS_SEALED(superRomClass)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk1MTYxMg=="}, "originalCommit": {"oid": "753f40817360c92e7f8ab1ba9a4e591f37f8bb9b"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4775, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}