{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1NDk5NjQz", "number": 9507, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMjozNDowM1rOD601Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMDoxOTozMVrOD7z5bQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDA5NTg2OnYy", "diffSide": "RIGHT", "path": "runtime/util/hshelp.c", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMjozNDowM1rOGS36Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMjozNDowM1rOGS36Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ0MzU2Ng==", "bodyText": "Missing #endif comment here and the next one.", "url": "https://github.com/eclipse-openj9/openj9/pull/9507#discussion_r422443566", "createdAt": "2020-05-09T02:34:03Z", "author": {"login": "pshipton"}, "path": "runtime/util/hshelp.c", "diffHunk": "@@ -3171,6 +3171,48 @@ verifyMethodsAreSame(J9VMThread * currentThread, J9JVMTIClassPair * classPair, U\n \n }\n \n+#if (JAVA_SPEC_VERSION >= 14)\n+static jvmtiError\n+verifyRecordAttributesAreSame(J9ROMClass *originalROMClass, J9ROMClass *replacementROMClass)\n+{\n+\tjvmtiError rc = JVMTI_ERROR_NONE;\n+\n+\t/* Since retranformation is not allowed to change inheritance there's no need to consider \n+\t * one class being a record and one not. */\n+\tif (J9ROMCLASS_IS_RECORD(originalROMClass) && J9ROMCLASS_IS_RECORD(replacementROMClass)) {\n+\t\tU_32 originalNumberOfRecords = getNumberOfRecordComponents(originalROMClass);\n+\t\tU_32 replacementNumberOfRecords = getNumberOfRecordComponents(replacementROMClass);\n+\n+\t\tif (originalNumberOfRecords == replacementNumberOfRecords) {\n+\t\t\tif (originalNumberOfRecords > 0) {\n+\t\t\t\tJ9ROMRecordComponentShape* originalRecordComponent = NULL;\n+\t\t\t\tJ9ROMRecordComponentShape* replacementRecordComponent = NULL;\n+\t\t\t\tU_32 i = 0;\n+\n+\t\t\t\toriginalRecordComponent = recordComponentStartDo(originalROMClass);\n+\t\t\t\treplacementRecordComponent = recordComponentStartDo(replacementROMClass);\n+\t\t\t\tfor (; i < originalNumberOfRecords; i++) {\n+\t\t\t\t\t/* verify name and signature */\n+\t\t\t\t\tif (!NAME_AND_SIG_IDENTICAL(originalRecordComponent, replacementRecordComponent, \n+\t\t\t\t\t\tJ9ROMRECORDCOMPONENTSHAPE_NAME, J9ROMRECORDCOMPONENTSHAPE_SIGNATURE)) \n+\t\t\t\t\t{\n+\t\t\t\t\t\trc = JVMTI_ERROR_UNSUPPORTED_REDEFINITION_CLASS_ATTRIBUTE_CHANGED;\n+\t\t\t\t\t\tgoto done;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\n+\t\t\t}\n+\t\t} else {\n+\t\t\trc = JVMTI_ERROR_UNSUPPORTED_REDEFINITION_CLASS_ATTRIBUTE_CHANGED;\n+\t\t}\n+\t}\n+\n+done:\n+\treturn rc;\n+}\n+#endif", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6147b41ef3dce1b5b129fa7a266e11dc7a40566"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNTUyOTUxOnYy", "diffSide": "RIGHT", "path": "runtime/include/jvmti.h.m4", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNzo1NDoxNlrOGTnESQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNzo1NDoxNlrOGTnESQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIxNjIwMQ==", "bodyText": "This is commented - delete don't update :)", "url": "https://github.com/eclipse-openj9/openj9/pull/9507#discussion_r423216201", "createdAt": "2020-05-11T17:54:16Z", "author": {"login": "DanHeidinga"}, "path": "runtime/include/jvmti.h.m4", "diffHunk": "@@ -341,9 +341,9 @@ typedef enum jvmtiError {\n \tJVMTI_ERROR_NAMES_DONT_MATCH = 69,\n \tJVMTI_ERROR_UNSUPPORTED_REDEFINITION_CLASS_MODIFIERS_CHANGED = 70,\n \tJVMTI_ERROR_UNSUPPORTED_REDEFINITION_METHOD_MODIFIERS_CHANGED = 71,\n-/* #if defined(J9VM_OPT_VALHALLA_NESTMATES) */\n+/* #if defined(J9VM_OPT_VALHALLA_NESTMATES) || (JAVA_SPEC_VERSION >= 14) */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19907b298aeb902beb69e59c86038c95aacd5cd4"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNTUzODc4OnYy", "diffSide": "RIGHT", "path": "runtime/jvmti/jvmtiGeneral.c", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNzo1Njo1MVrOGTnKQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNzo1Njo1MVrOGTnKQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIxNzcyOA==", "bodyText": "This should be updated to match the JDK version that brought this error in.  NESTMATES should be subsumed by the JDK release that added it", "url": "https://github.com/eclipse-openj9/openj9/pull/9507#discussion_r423217728", "createdAt": "2020-05-11T17:56:51Z", "author": {"login": "DanHeidinga"}, "path": "runtime/jvmti/jvmtiGeneral.c", "diffHunk": "@@ -65,9 +65,9 @@ static const J9JvmtiErrorMapping errorMap[] = {\n \t{ \"JVMTI_ERROR_NAMES_DONT_MATCH\" , 69 },\n \t{ \"JVMTI_ERROR_UNSUPPORTED_REDEFINITION_CLASS_MODIFIERS_CHANGED\" , 70 },\n \t{ \"JVMTI_ERROR_UNSUPPORTED_REDEFINITION_METHOD_MODIFIERS_CHANGED\" , 71 },\n-#if defined(J9VM_OPT_VALHALLA_NESTMATES)\n+#if defined(J9VM_OPT_VALHALLA_NESTMATES) || (JAVA_SPEC_VERSION >= 14)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19907b298aeb902beb69e59c86038c95aacd5cd4"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzOTExODIwOnYy", "diffSide": "RIGHT", "path": "runtime/util/hshelp.c", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNDo0NTo0MVrOGUKRFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMDozOTowM1rOGUYEMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc5MjkxOA==", "bodyText": "This assumes that record components can't be reordered.  Is there a connonical order defined in the spec?  If not, how does the RI handle this?  Does it require that the order of the components is stable?", "url": "https://github.com/eclipse-openj9/openj9/pull/9507#discussion_r423792918", "createdAt": "2020-05-12T14:45:41Z", "author": {"login": "DanHeidinga"}, "path": "runtime/util/hshelp.c", "diffHunk": "@@ -3171,6 +3171,48 @@ verifyMethodsAreSame(J9VMThread * currentThread, J9JVMTIClassPair * classPair, U\n \n }\n \n+#if (JAVA_SPEC_VERSION >= 14)\n+static jvmtiError\n+verifyRecordAttributesAreSame(J9ROMClass *originalROMClass, J9ROMClass *replacementROMClass)\n+{\n+\tjvmtiError rc = JVMTI_ERROR_NONE;\n+\n+\t/* Since retranformation is not allowed to change inheritance there's no need to consider \n+\t * one class being a record and one not. */\n+\tif (J9ROMCLASS_IS_RECORD(originalROMClass) && J9ROMCLASS_IS_RECORD(replacementROMClass)) {\n+\t\tU_32 originalNumberOfRecords = getNumberOfRecordComponents(originalROMClass);\n+\t\tU_32 replacementNumberOfRecords = getNumberOfRecordComponents(replacementROMClass);\n+\n+\t\tif (originalNumberOfRecords == replacementNumberOfRecords) {\n+\t\t\tif (originalNumberOfRecords > 0) {\n+\t\t\t\tJ9ROMRecordComponentShape* originalRecordComponent = NULL;\n+\t\t\t\tJ9ROMRecordComponentShape* replacementRecordComponent = NULL;\n+\t\t\t\tU_32 i = 0;\n+\n+\t\t\t\toriginalRecordComponent = recordComponentStartDo(originalROMClass);\n+\t\t\t\treplacementRecordComponent = recordComponentStartDo(replacementROMClass);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19907b298aeb902beb69e59c86038c95aacd5cd4"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk0MzUxMg==", "bodyText": "The spec requires that the order of record components be the same as the order in which they are declared. Since retransformation is not allowed to change fields the record components should be expected to maintain the same order.", "url": "https://github.com/eclipse-openj9/openj9/pull/9507#discussion_r423943512", "createdAt": "2020-05-12T18:24:59Z", "author": {"login": "theresa-m"}, "path": "runtime/util/hshelp.c", "diffHunk": "@@ -3171,6 +3171,48 @@ verifyMethodsAreSame(J9VMThread * currentThread, J9JVMTIClassPair * classPair, U\n \n }\n \n+#if (JAVA_SPEC_VERSION >= 14)\n+static jvmtiError\n+verifyRecordAttributesAreSame(J9ROMClass *originalROMClass, J9ROMClass *replacementROMClass)\n+{\n+\tjvmtiError rc = JVMTI_ERROR_NONE;\n+\n+\t/* Since retranformation is not allowed to change inheritance there's no need to consider \n+\t * one class being a record and one not. */\n+\tif (J9ROMCLASS_IS_RECORD(originalROMClass) && J9ROMCLASS_IS_RECORD(replacementROMClass)) {\n+\t\tU_32 originalNumberOfRecords = getNumberOfRecordComponents(originalROMClass);\n+\t\tU_32 replacementNumberOfRecords = getNumberOfRecordComponents(replacementROMClass);\n+\n+\t\tif (originalNumberOfRecords == replacementNumberOfRecords) {\n+\t\t\tif (originalNumberOfRecords > 0) {\n+\t\t\t\tJ9ROMRecordComponentShape* originalRecordComponent = NULL;\n+\t\t\t\tJ9ROMRecordComponentShape* replacementRecordComponent = NULL;\n+\t\t\t\tU_32 i = 0;\n+\n+\t\t\t\toriginalRecordComponent = recordComponentStartDo(originalROMClass);\n+\t\t\t\treplacementRecordComponent = recordComponentStartDo(replacementROMClass);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc5MjkxOA=="}, "originalCommit": {"oid": "19907b298aeb902beb69e59c86038c95aacd5cd4"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAwOTEzMA==", "bodyText": "Sorry to unresolve this.  Can you add a comment to that effect into the code?  It'll save rediscovering that in the future", "url": "https://github.com/eclipse-openj9/openj9/pull/9507#discussion_r424009130", "createdAt": "2020-05-12T20:20:24Z", "author": {"login": "DanHeidinga"}, "path": "runtime/util/hshelp.c", "diffHunk": "@@ -3171,6 +3171,48 @@ verifyMethodsAreSame(J9VMThread * currentThread, J9JVMTIClassPair * classPair, U\n \n }\n \n+#if (JAVA_SPEC_VERSION >= 14)\n+static jvmtiError\n+verifyRecordAttributesAreSame(J9ROMClass *originalROMClass, J9ROMClass *replacementROMClass)\n+{\n+\tjvmtiError rc = JVMTI_ERROR_NONE;\n+\n+\t/* Since retranformation is not allowed to change inheritance there's no need to consider \n+\t * one class being a record and one not. */\n+\tif (J9ROMCLASS_IS_RECORD(originalROMClass) && J9ROMCLASS_IS_RECORD(replacementROMClass)) {\n+\t\tU_32 originalNumberOfRecords = getNumberOfRecordComponents(originalROMClass);\n+\t\tU_32 replacementNumberOfRecords = getNumberOfRecordComponents(replacementROMClass);\n+\n+\t\tif (originalNumberOfRecords == replacementNumberOfRecords) {\n+\t\t\tif (originalNumberOfRecords > 0) {\n+\t\t\t\tJ9ROMRecordComponentShape* originalRecordComponent = NULL;\n+\t\t\t\tJ9ROMRecordComponentShape* replacementRecordComponent = NULL;\n+\t\t\t\tU_32 i = 0;\n+\n+\t\t\t\toriginalRecordComponent = recordComponentStartDo(originalROMClass);\n+\t\t\t\treplacementRecordComponent = recordComponentStartDo(replacementROMClass);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc5MjkxOA=="}, "originalCommit": {"oid": "19907b298aeb902beb69e59c86038c95aacd5cd4"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAxODk5NQ==", "bodyText": "yes. good idea.", "url": "https://github.com/eclipse-openj9/openj9/pull/9507#discussion_r424018995", "createdAt": "2020-05-12T20:39:03Z", "author": {"login": "theresa-m"}, "path": "runtime/util/hshelp.c", "diffHunk": "@@ -3171,6 +3171,48 @@ verifyMethodsAreSame(J9VMThread * currentThread, J9JVMTIClassPair * classPair, U\n \n }\n \n+#if (JAVA_SPEC_VERSION >= 14)\n+static jvmtiError\n+verifyRecordAttributesAreSame(J9ROMClass *originalROMClass, J9ROMClass *replacementROMClass)\n+{\n+\tjvmtiError rc = JVMTI_ERROR_NONE;\n+\n+\t/* Since retranformation is not allowed to change inheritance there's no need to consider \n+\t * one class being a record and one not. */\n+\tif (J9ROMCLASS_IS_RECORD(originalROMClass) && J9ROMCLASS_IS_RECORD(replacementROMClass)) {\n+\t\tU_32 originalNumberOfRecords = getNumberOfRecordComponents(originalROMClass);\n+\t\tU_32 replacementNumberOfRecords = getNumberOfRecordComponents(replacementROMClass);\n+\n+\t\tif (originalNumberOfRecords == replacementNumberOfRecords) {\n+\t\t\tif (originalNumberOfRecords > 0) {\n+\t\t\t\tJ9ROMRecordComponentShape* originalRecordComponent = NULL;\n+\t\t\t\tJ9ROMRecordComponentShape* replacementRecordComponent = NULL;\n+\t\t\t\tU_32 i = 0;\n+\n+\t\t\t\toriginalRecordComponent = recordComponentStartDo(originalROMClass);\n+\t\t\t\treplacementRecordComponent = recordComponentStartDo(replacementROMClass);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc5MjkxOA=="}, "originalCommit": {"oid": "19907b298aeb902beb69e59c86038c95aacd5cd4"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzOTEyMTAxOnYy", "diffSide": "RIGHT", "path": "runtime/util/hshelp.c", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNDo0NjoxNFrOGUKS0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNDo0NjoxNFrOGUKS0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc5MzM2Mg==", "bodyText": "Nitpick:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t\tif (!NAME_AND_SIG_IDENTICAL(originalRecordComponent, replacementRecordComponent, \n          \n          \n            \n            \t\t\t\t\t\tJ9ROMRECORDCOMPONENTSHAPE_NAME, J9ROMRECORDCOMPONENTSHAPE_SIGNATURE)) \n          \n          \n            \n            \t\t\t\t\t{\n          \n          \n            \n            \t\t\t\t\tif (!NAME_AND_SIG_IDENTICAL(originalRecordComponent, replacementRecordComponent, \n          \n          \n            \n            \t\t\t\t\t\tJ9ROMRECORDCOMPONENTSHAPE_NAME, J9ROMRECORDCOMPONENTSHAPE_SIGNATURE)\n          \n          \n            \n            \t\t\t\t\t) {", "url": "https://github.com/eclipse-openj9/openj9/pull/9507#discussion_r423793362", "createdAt": "2020-05-12T14:46:14Z", "author": {"login": "DanHeidinga"}, "path": "runtime/util/hshelp.c", "diffHunk": "@@ -3171,6 +3171,48 @@ verifyMethodsAreSame(J9VMThread * currentThread, J9JVMTIClassPair * classPair, U\n \n }\n \n+#if (JAVA_SPEC_VERSION >= 14)\n+static jvmtiError\n+verifyRecordAttributesAreSame(J9ROMClass *originalROMClass, J9ROMClass *replacementROMClass)\n+{\n+\tjvmtiError rc = JVMTI_ERROR_NONE;\n+\n+\t/* Since retranformation is not allowed to change inheritance there's no need to consider \n+\t * one class being a record and one not. */\n+\tif (J9ROMCLASS_IS_RECORD(originalROMClass) && J9ROMCLASS_IS_RECORD(replacementROMClass)) {\n+\t\tU_32 originalNumberOfRecords = getNumberOfRecordComponents(originalROMClass);\n+\t\tU_32 replacementNumberOfRecords = getNumberOfRecordComponents(replacementROMClass);\n+\n+\t\tif (originalNumberOfRecords == replacementNumberOfRecords) {\n+\t\t\tif (originalNumberOfRecords > 0) {\n+\t\t\t\tJ9ROMRecordComponentShape* originalRecordComponent = NULL;\n+\t\t\t\tJ9ROMRecordComponentShape* replacementRecordComponent = NULL;\n+\t\t\t\tU_32 i = 0;\n+\n+\t\t\t\toriginalRecordComponent = recordComponentStartDo(originalROMClass);\n+\t\t\t\treplacementRecordComponent = recordComponentStartDo(replacementROMClass);\n+\t\t\t\tfor (; i < originalNumberOfRecords; i++) {\n+\t\t\t\t\t/* verify name and signature */\n+\t\t\t\t\tif (!NAME_AND_SIG_IDENTICAL(originalRecordComponent, replacementRecordComponent, \n+\t\t\t\t\t\tJ9ROMRECORDCOMPONENTSHAPE_NAME, J9ROMRECORDCOMPONENTSHAPE_SIGNATURE)) \n+\t\t\t\t\t{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19907b298aeb902beb69e59c86038c95aacd5cd4"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzOTEyNzQwOnYy", "diffSide": "RIGHT", "path": "runtime/util/hshelp.c", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNDo0NzoyOVrOGUKWzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNDo0NzoyOVrOGUKWzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc5NDM4MQ==", "bodyText": "nitpick - is there extra blank lines here?", "url": "https://github.com/eclipse-openj9/openj9/pull/9507#discussion_r423794381", "createdAt": "2020-05-12T14:47:29Z", "author": {"login": "DanHeidinga"}, "path": "runtime/util/hshelp.c", "diffHunk": "@@ -3171,6 +3171,48 @@ verifyMethodsAreSame(J9VMThread * currentThread, J9JVMTIClassPair * classPair, U\n \n }\n \n+#if (JAVA_SPEC_VERSION >= 14)\n+static jvmtiError\n+verifyRecordAttributesAreSame(J9ROMClass *originalROMClass, J9ROMClass *replacementROMClass)\n+{\n+\tjvmtiError rc = JVMTI_ERROR_NONE;\n+\n+\t/* Since retranformation is not allowed to change inheritance there's no need to consider \n+\t * one class being a record and one not. */\n+\tif (J9ROMCLASS_IS_RECORD(originalROMClass) && J9ROMCLASS_IS_RECORD(replacementROMClass)) {\n+\t\tU_32 originalNumberOfRecords = getNumberOfRecordComponents(originalROMClass);\n+\t\tU_32 replacementNumberOfRecords = getNumberOfRecordComponents(replacementROMClass);\n+\n+\t\tif (originalNumberOfRecords == replacementNumberOfRecords) {\n+\t\t\tif (originalNumberOfRecords > 0) {\n+\t\t\t\tJ9ROMRecordComponentShape* originalRecordComponent = NULL;\n+\t\t\t\tJ9ROMRecordComponentShape* replacementRecordComponent = NULL;\n+\t\t\t\tU_32 i = 0;\n+\n+\t\t\t\toriginalRecordComponent = recordComponentStartDo(originalROMClass);\n+\t\t\t\treplacementRecordComponent = recordComponentStartDo(replacementROMClass);\n+\t\t\t\tfor (; i < originalNumberOfRecords; i++) {\n+\t\t\t\t\t/* verify name and signature */\n+\t\t\t\t\tif (!NAME_AND_SIG_IDENTICAL(originalRecordComponent, replacementRecordComponent, \n+\t\t\t\t\t\tJ9ROMRECORDCOMPONENTSHAPE_NAME, J9ROMRECORDCOMPONENTSHAPE_SIGNATURE)) \n+\t\t\t\t\t{\n+\t\t\t\t\t\trc = JVMTI_ERROR_UNSUPPORTED_REDEFINITION_CLASS_ATTRIBUTE_CHANGED;\n+\t\t\t\t\t\tgoto done;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19907b298aeb902beb69e59c86038c95aacd5cd4"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDQyODYxOnYy", "diffSide": "RIGHT", "path": "runtime/jvmti/jvmtiGeneral.c", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMDoxOTozMVrOGUXb4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMDoxOTozMVrOGUXb4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAwODY3Mg==", "bodyText": "nestmates was added in java 11.  This can be #ifdef'd on that version\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #if defined(J9VM_OPT_VALHALLA_NESTMATES) || (JAVA_SPEC_VERSION >= 15)\n          \n          \n            \n            #if (JAVA_SPEC_VERSION >= 11)", "url": "https://github.com/eclipse-openj9/openj9/pull/9507#discussion_r424008672", "createdAt": "2020-05-12T20:19:31Z", "author": {"login": "DanHeidinga"}, "path": "runtime/jvmti/jvmtiGeneral.c", "diffHunk": "@@ -65,9 +65,9 @@ static const J9JvmtiErrorMapping errorMap[] = {\n \t{ \"JVMTI_ERROR_NAMES_DONT_MATCH\" , 69 },\n \t{ \"JVMTI_ERROR_UNSUPPORTED_REDEFINITION_CLASS_MODIFIERS_CHANGED\" , 70 },\n \t{ \"JVMTI_ERROR_UNSUPPORTED_REDEFINITION_METHOD_MODIFIERS_CHANGED\" , 71 },\n-#if defined(J9VM_OPT_VALHALLA_NESTMATES)\n+#if defined(J9VM_OPT_VALHALLA_NESTMATES) || (JAVA_SPEC_VERSION >= 15)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5f45697339c3281516a72a7dc06e11c50d68411"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 141, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}