{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5NTQ2Nzkx", "number": 11160, "title": "JDK15 getCurrentClassLoader() for jdk.internal.loader.NativeLibraries.load()", "bodyText": "getCurrentClassLoader() might be called while invoking native method jdk.internal.loader.NativeLibraries.load(NativeLibraryImpl impl, String name, boolean isBuiltin, boolean isJNI), the classloader of NativeLibraryImpl.fromClass should be returned. To retrieve the method argument, the native method can't be jitted;\nAdded the native method above to JIT excludeArray;\nAlso added the native method to the recognized method collection and exclude it from direct JNI call.\nfixes #11013\nSigned-off-by: Jason Feng fengj@ca.ibm.com", "createdAt": "2020-11-12T01:05:50Z", "url": "https://github.com/eclipse-openj9/openj9/pull/11160", "merged": true, "mergeCommit": {"oid": "f3ea46b28654a10c33525db888a7d972fdb58bb7"}, "closed": true, "closedAt": "2020-11-12T22:31:54Z", "author": {"login": "JasonFengJ9"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdbz3wbgFqTUyOTE3MTg3OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdb4iBTAFqTUyOTQ2OTU0OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5MTcxODc5", "url": "https://github.com/eclipse-openj9/openj9/pull/11160#pullrequestreview-529171879", "createdAt": "2020-11-12T14:59:14Z", "commit": {"oid": "804ad6af72fe83b0fd1d31ecc8c365d18a67c476"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNDo1OToxNFrOHx-xGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNDo1OToxNFrOHx-xGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE3MDY0OQ==", "bodyText": "I think the parameter should be %p (jmethodID is a pointer).", "url": "https://github.com/eclipse-openj9/openj9/pull/11160#discussion_r522170649", "createdAt": "2020-11-12T14:59:14Z", "author": {"login": "keithc-ca"}, "path": "runtime/jcl/j9jcl.tdf", "diffHunk": "@@ -642,3 +642,5 @@ TraceExit=Trc_JCL_com_ibm_oti_shared_SharedClassURLClasspathHelperImpl_notifyCla\n TraceEntry=Trc_JCL_attach_waitSemaphoreEntry2 Overhead=1 Level=1 Template=\"Java_com_ibm_tools_attach_javaSE_IPC_waitSemaphoreImpl waiting on semaphore (%p)\"\n TraceEntry=Trc_JCL_attach_closeSemaphoreEntry Overhead=1 Level=1 Template=\"Java_com_ibm_tools_attach_javaSE_IPC_closeSemaphoreImpl closing semaphore (%p)\"\n TraceEntry=Trc_JCL_attach_destroySemaphoreEntry Overhead=1 Level=1 Template=\"Java_com_ibm_tools_attach_javaSE_IPC_destroySemaphoreImpl destroying semaphore (%p)\"\n+\n+TraceEvent=Trc_JCL_init_nativeLibrariesLoadMethodID Overhead=1 Level=3 Template=\"init nativeLibrariesLoadMethodID (0x%llx)\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "804ad6af72fe83b0fd1d31ecc8c365d18a67c476"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5MjA3NzU3", "url": "https://github.com/eclipse-openj9/openj9/pull/11160#pullrequestreview-529207757", "createdAt": "2020-11-12T15:33:01Z", "commit": {"oid": "804ad6af72fe83b0fd1d31ecc8c365d18a67c476"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNTozMzowMVrOHyAWvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNTozMzowMVrOHyAWvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE5NjY3MA==", "bodyText": "This isn't ifdeffed, but everything else seems to be.", "url": "https://github.com/eclipse-openj9/openj9/pull/11160#discussion_r522196670", "createdAt": "2020-11-12T15:33:01Z", "author": {"login": "gacholio"}, "path": "runtime/compiler/codegen/J9RecognizedMethodsEnum.hpp", "diffHunk": "@@ -426,6 +426,8 @@\n \n    jdk_internal_misc_Unsafe_copyMemory0,\n \n+   jdk_internal_loader_NativeLibraries_load,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "804ad6af72fe83b0fd1d31ecc8c365d18a67c476"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5MjEzNzUy", "url": "https://github.com/eclipse-openj9/openj9/pull/11160#pullrequestreview-529213752", "createdAt": "2020-11-12T15:38:44Z", "commit": {"oid": "804ad6af72fe83b0fd1d31ecc8c365d18a67c476"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNTozODo0NVrOHyAomg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNTozODo0NVrOHyAomg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjIwMTI0Mg==", "bodyText": "This shouldn't fall through on failure (there's an exception pending). Same for GetStaticMethodID below. Should probably goto _fail; in those cases.", "url": "https://github.com/eclipse-openj9/openj9/pull/11160#discussion_r522201242", "createdAt": "2020-11-12T15:38:45Z", "author": {"login": "gacholio"}, "path": "runtime/jcl/common/stdinit.c", "diffHunk": "@@ -187,6 +187,18 @@ standardInit( J9JavaVM *vm, char *dllName)\n \t\t\tresult = (jint)initializeSystemThreadGroup(vm, (JNIEnv *)vmThread);\n \t\t\tif (JNI_OK != result) {\n \t\t\t\tgoto _fail;\n+\t\t\t} else {\n+#if JAVA_SPEC_VERSION >= 15\n+\t\t\t\tJNIEnv *env = (JNIEnv *)vmThread;\n+\t\t\t\tjclass clz = (*env)->FindClass(env, \"jdk/internal/loader/NativeLibraries\");\n+\t\t\t\tif (NULL != clz) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "804ad6af72fe83b0fd1d31ecc8c365d18a67c476"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5MjIwOTky", "url": "https://github.com/eclipse-openj9/openj9/pull/11160#pullrequestreview-529220992", "createdAt": "2020-11-12T15:45:48Z", "commit": {"oid": "804ad6af72fe83b0fd1d31ecc8c365d18a67c476"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNTo0NTo0OFrOHyA-xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNTo0NTo0OFrOHyA-xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjIwNjkxOQ==", "bodyText": "Can this every really be null?", "url": "https://github.com/eclipse-openj9/openj9/pull/11160#discussion_r522206919", "createdAt": "2020-11-12T15:45:48Z", "author": {"login": "gacholio"}, "path": "runtime/vm/jnimisc.cpp", "diffHunk": "@@ -168,6 +168,37 @@ getCurrentClassLoader(J9VMThread *currentThread)\n \t\t} else {\n \t\t\t/* use the sender (native method) classloader */\n \t\t\tclassLoader = J9_CLASS_FROM_METHOD(nativeMethod)->classLoader;\n+#if JAVA_SPEC_VERSION >= 15\n+\t\t\t/* special case - if jdk/internal/loader/NativeLibraries.load(NativeLibraryImpl impl, String name, boolean isBuiltin, boolean isJNI)\n+\t\t\t * is the current native method, use the class loader of \"impl.fromClass\".\n+\t\t\t * This nativeMethod can't be cached cause HCR might make it invalid.\n+\t\t\t */\n+\t\t\tif (J9VMJDKINTERNALLOADERNATIVELIBRARIES_LOAD_METHOD(currentThread->javaVM) == nativeMethod) {\n+\t\t\t\tJ9InternalVMFunctions *vmFuncs = vm->internalVMFunctions;\n+\t\t\t\tvmFuncs->internalEnterVMFromJNI(currentThread);\n+\t\t\t\t/* The current native method has a NativeLibraryImpl instance as its first argument */\n+\t\t\t\tj9object_t nativeLibraryImplObject = (j9object_t)(currentThread->arg0EA[0]);\n+\t\t\t\tTrc_VM_findNativeLibrariesLoad_nativeMethod(currentThread, nativeMethod, nativeLibraryImplObject, classLoader);\n+\t\t\t\t/* Handle the object reference being redirected by the stack grower */\n+\t\t\t\tif (J9_ARE_ANY_BITS_SET((UDATA)nativeLibraryImplObject, 1)) {\n+\t\t\t\t\tnativeLibraryImplObject = *(j9object_t*)((UDATA)nativeLibraryImplObject - 1);\n+\t\t\t\t}\n+\t\t\t\tif (NULL != nativeLibraryImplObject) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "804ad6af72fe83b0fd1d31ecc8c365d18a67c476"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5MjIyMDAx", "url": "https://github.com/eclipse-openj9/openj9/pull/11160#pullrequestreview-529222001", "createdAt": "2020-11-12T15:46:45Z", "commit": {"oid": "804ad6af72fe83b0fd1d31ecc8c365d18a67c476"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNTo0Njo0NVrOHyBB0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNTo0Njo0NVrOHyBB0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjIwNzY5OA==", "bodyText": "Given the overabundance of tracepoints in this code, how is there not one here?", "url": "https://github.com/eclipse-openj9/openj9/pull/11160#discussion_r522207698", "createdAt": "2020-11-12T15:46:45Z", "author": {"login": "gacholio"}, "path": "runtime/vm/jnimisc.cpp", "diffHunk": "@@ -168,6 +168,37 @@ getCurrentClassLoader(J9VMThread *currentThread)\n \t\t} else {\n \t\t\t/* use the sender (native method) classloader */\n \t\t\tclassLoader = J9_CLASS_FROM_METHOD(nativeMethod)->classLoader;\n+#if JAVA_SPEC_VERSION >= 15\n+\t\t\t/* special case - if jdk/internal/loader/NativeLibraries.load(NativeLibraryImpl impl, String name, boolean isBuiltin, boolean isJNI)\n+\t\t\t * is the current native method, use the class loader of \"impl.fromClass\".\n+\t\t\t * This nativeMethod can't be cached cause HCR might make it invalid.\n+\t\t\t */\n+\t\t\tif (J9VMJDKINTERNALLOADERNATIVELIBRARIES_LOAD_METHOD(currentThread->javaVM) == nativeMethod) {\n+\t\t\t\tJ9InternalVMFunctions *vmFuncs = vm->internalVMFunctions;\n+\t\t\t\tvmFuncs->internalEnterVMFromJNI(currentThread);\n+\t\t\t\t/* The current native method has a NativeLibraryImpl instance as its first argument */\n+\t\t\t\tj9object_t nativeLibraryImplObject = (j9object_t)(currentThread->arg0EA[0]);\n+\t\t\t\tTrc_VM_findNativeLibrariesLoad_nativeMethod(currentThread, nativeMethod, nativeLibraryImplObject, classLoader);\n+\t\t\t\t/* Handle the object reference being redirected by the stack grower */\n+\t\t\t\tif (J9_ARE_ANY_BITS_SET((UDATA)nativeLibraryImplObject, 1)) {\n+\t\t\t\t\tnativeLibraryImplObject = *(j9object_t*)((UDATA)nativeLibraryImplObject - 1);\n+\t\t\t\t}\n+\t\t\t\tif (NULL != nativeLibraryImplObject) {\n+\t\t\t\t\tTrc_VM_findNativeLibrariesLoad_nativeLibraryImplObject(currentThread, nativeLibraryImplObject);\n+\t\t\t\t\tj9object_t fromClassObj = J9VMJDKINTERNALLOADERNATIVELIBRARIESNATIVELIBRARYIMPL_FROMCLASS(currentThread, nativeLibraryImplObject);\n+\t\t\t\t\tif (NULL != fromClassObj) {\n+\t\t\t\t\t\tTrc_VM_findNativeLibrariesLoad_fromClassObj(currentThread, fromClassObj);\n+\t\t\t\t\t\tJ9Class *fromClass = J9VM_J9CLASS_FROM_HEAPCLASS(currentThread, fromClassObj);\n+\t\t\t\t\t\tTrc_VM_findNativeLibrariesLoad_fromClass(currentThread, fromClass);\n+\t\t\t\t\t\tif ((NULL != fromClass) && (NULL != fromClass->classLoader)) {\n+\t\t\t\t\t\t\tclassLoader = fromClass->classLoader;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "804ad6af72fe83b0fd1d31ecc8c365d18a67c476"}, "originalPosition": 27}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "804ad6af72fe83b0fd1d31ecc8c365d18a67c476", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/804ad6af72fe83b0fd1d31ecc8c365d18a67c476", "committedDate": "2020-11-12T01:02:45Z", "message": "JDK15 getCurrentClassLoader() for j.i.l.NativeLibraries.load()\n\ngetCurrentClassLoader() might be called while invoking native method\njdk.internal.loader.NativeLibraries.load(NativeLibraryImpl\nimpl, String name, boolean isBuiltin, boolean isJNI), the classloader of\nNativeLibraryImpl.fromClass should be returned. To retrieve the method\nargument, the native method can't be jitted;\nAdded the native method above to JIT excludeArray;\nAlso added the native method to the recognized method collection and\nexclude it from direct JNI call;\n\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}, "afterCommit": {"oid": "265cf7577e2e05efaa309eb0dec1b9a011d5602e", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/265cf7577e2e05efaa309eb0dec1b9a011d5602e", "committedDate": "2020-11-12T17:35:41Z", "message": "JDK15 getCurrentClassLoader() for j.i.l.NativeLibraries.load()\n\ngetCurrentClassLoader() might be called while invoking native method\njdk.internal.loader.NativeLibraries.load(NativeLibraryImpl\nimpl, String name, boolean isBuiltin, boolean isJNI), the classloader of\nNativeLibraryImpl.fromClass should be returned. To retrieve the method\nargument, the native method can't be jitted;\nAdded the native method above to JIT excludeArray;\nAlso added the native method to the recognized method collection and\nexclude it from direct JNI call;\n\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5MzQ3NjU4", "url": "https://github.com/eclipse-openj9/openj9/pull/11160#pullrequestreview-529347658", "createdAt": "2020-11-12T17:57:35Z", "commit": {"oid": "265cf7577e2e05efaa309eb0dec1b9a011d5602e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNzo1NzozNVrOHyG80w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNzo1NzozNVrOHyG80w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMwNDcyMw==", "bodyText": "Illegal declaration in a C file.", "url": "https://github.com/eclipse-openj9/openj9/pull/11160#discussion_r522304723", "createdAt": "2020-11-12T17:57:35Z", "author": {"login": "gacholio"}, "path": "runtime/jcl/common/stdinit.c", "diffHunk": "@@ -187,6 +187,20 @@ standardInit( J9JavaVM *vm, char *dllName)\n \t\t\tresult = (jint)initializeSystemThreadGroup(vm, (JNIEnv *)vmThread);\n \t\t\tif (JNI_OK != result) {\n \t\t\t\tgoto _fail;\n+\t\t\t} else {\n+#if JAVA_SPEC_VERSION >= 15\n+\t\t\t\tJNIEnv *env = (JNIEnv *)vmThread;\n+\t\t\t\tjclass clz = (*env)->FindClass(env, \"jdk/internal/loader/NativeLibraries\");\n+\t\t\t\tif (NULL == clz) {\n+\t\t\t\t\tgoto _fail;\n+\t\t\t\t}\n+\t\t\t\tjmethodID mid = (*env)->GetStaticMethodID(env, clz, \"load\", \"(Ljdk/internal/loader/NativeLibraries$NativeLibraryImpl;Ljava/lang/String;ZZ)Z\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "265cf7577e2e05efaa309eb0dec1b9a011d5602e"}, "originalPosition": 11}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "265cf7577e2e05efaa309eb0dec1b9a011d5602e", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/265cf7577e2e05efaa309eb0dec1b9a011d5602e", "committedDate": "2020-11-12T17:35:41Z", "message": "JDK15 getCurrentClassLoader() for j.i.l.NativeLibraries.load()\n\ngetCurrentClassLoader() might be called while invoking native method\njdk.internal.loader.NativeLibraries.load(NativeLibraryImpl\nimpl, String name, boolean isBuiltin, boolean isJNI), the classloader of\nNativeLibraryImpl.fromClass should be returned. To retrieve the method\nargument, the native method can't be jitted;\nAdded the native method above to JIT excludeArray;\nAlso added the native method to the recognized method collection and\nexclude it from direct JNI call;\n\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}, "afterCommit": {"oid": "4d6b5af9c051c57d4ea84876b9aaaf325461fa2f", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/4d6b5af9c051c57d4ea84876b9aaaf325461fa2f", "committedDate": "2020-11-12T18:10:09Z", "message": "JDK15 getCurrentClassLoader() for j.i.l.NativeLibraries.load()\n\ngetCurrentClassLoader() might be called while invoking native method\njdk.internal.loader.NativeLibraries.load(NativeLibraryImpl\nimpl, String name, boolean isBuiltin, boolean isJNI), the classloader of\nNativeLibraryImpl.fromClass should be returned. To retrieve the method\nargument, the native method can't be jitted;\nAdded the native method above to JIT excludeArray;\nAlso added the native method to the recognized method collection and\nexclude it from direct JNI call;\n\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5MzU5Nzgx", "url": "https://github.com/eclipse-openj9/openj9/pull/11160#pullrequestreview-529359781", "createdAt": "2020-11-12T18:12:26Z", "commit": {"oid": "4d6b5af9c051c57d4ea84876b9aaaf325461fa2f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxODoxMjoyN1rOHyHhuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxODoxMjoyN1rOHyHhuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMxNDE3MQ==", "bodyText": "Does not need an ifdef if it doesn't exist in older JDKs - we prefer to avoid the ifdefs", "url": "https://github.com/eclipse-openj9/openj9/pull/11160#discussion_r522314171", "createdAt": "2020-11-12T18:12:27Z", "author": {"login": "andrewcraik"}, "path": "runtime/compiler/env/j9method.cpp", "diffHunk": "@@ -1079,7 +1079,10 @@ static const char * const excludeArray[] = {\n    \"java/security/AccessController.doPrivileged(Ljava/security/PrivilegedAction;Ljava/security/AccessControlContext;)Ljava/lang/Object;\",\n    \"java/security/AccessController.doPrivileged(Ljava/security/PrivilegedExceptionAction;Ljava/security/AccessControlContext;)Ljava/lang/Object;\",\n    \"java/security/AccessController.doPrivileged(Ljava/security/PrivilegedAction;Ljava/security/AccessControlContext;[Ljava/security/Permission;)Ljava/lang/Object;\",\n-   \"java/security/AccessController.doPrivileged(Ljava/security/PrivilegedExceptionAction;Ljava/security/AccessControlContext;[Ljava/security/Permission;)Ljava/lang/Object;\"\n+   \"java/security/AccessController.doPrivileged(Ljava/security/PrivilegedExceptionAction;Ljava/security/AccessControlContext;[Ljava/security/Permission;)Ljava/lang/Object;\",\n+#if JAVA_SPEC_VERSION >= 15", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d6b5af9c051c57d4ea84876b9aaaf325461fa2f"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5MzU5OTU0", "url": "https://github.com/eclipse-openj9/openj9/pull/11160#pullrequestreview-529359954", "createdAt": "2020-11-12T18:12:41Z", "commit": {"oid": "4d6b5af9c051c57d4ea84876b9aaaf325461fa2f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxODoxMjo0MVrOHyHibA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxODoxMjo0MVrOHyHibA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMxNDM0OA==", "bodyText": "this should be unconditional I think", "url": "https://github.com/eclipse-openj9/openj9/pull/11160#discussion_r522314348", "createdAt": "2020-11-12T18:12:41Z", "author": {"login": "andrewcraik"}, "path": "runtime/compiler/env/j9method.cpp", "diffHunk": "@@ -3379,6 +3382,14 @@ void TR_ResolvedJ9Method::construct()\n       {  TR::unknownMethod}\n       };\n \n+#if JAVA_SPEC_VERSION >= 15", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d6b5af9c051c57d4ea84876b9aaaf325461fa2f"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5MzYwMzUy", "url": "https://github.com/eclipse-openj9/openj9/pull/11160#pullrequestreview-529360352", "createdAt": "2020-11-12T18:13:14Z", "commit": {"oid": "4d6b5af9c051c57d4ea84876b9aaaf325461fa2f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxODoxMzoxNFrOHyHjgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxODoxMzoxNFrOHyHjgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMxNDYyNA==", "bodyText": "This should also be unconditional", "url": "https://github.com/eclipse-openj9/openj9/pull/11160#discussion_r522314624", "createdAt": "2020-11-12T18:13:14Z", "author": {"login": "andrewcraik"}, "path": "runtime/compiler/env/j9method.cpp", "diffHunk": "@@ -4431,6 +4442,9 @@ void TR_ResolvedJ9Method::construct()\n    static Y class35[] =\n       {\n       { \"java/lang/invoke/ExplicitCastHandle\", ExplicitCastHandleMethods },\n+#if JAVA_SPEC_VERSION >= 15", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d6b5af9c051c57d4ea84876b9aaaf325461fa2f"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5MzYwNjAw", "url": "https://github.com/eclipse-openj9/openj9/pull/11160#pullrequestreview-529360600", "createdAt": "2020-11-12T18:13:34Z", "commit": {"oid": "4d6b5af9c051c57d4ea84876b9aaaf325461fa2f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxODoxMzozNVrOHyHkQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxODoxMzozNVrOHyHkQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMxNDgxNw==", "bodyText": "should be unconditional", "url": "https://github.com/eclipse-openj9/openj9/pull/11160#discussion_r522314817", "createdAt": "2020-11-12T18:13:35Z", "author": {"login": "andrewcraik"}, "path": "runtime/compiler/il/J9Node.cpp", "diffHunk": "@@ -314,6 +314,12 @@ J9::Node::processJNICall(TR::TreeTop * callNodeTreeTop, TR::ResolvedMethodSymbol\n       return self();\n       }\n \n+#if JAVA_SPEC_VERSION >= 15", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d6b5af9c051c57d4ea84876b9aaaf325461fa2f"}, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4d6b5af9c051c57d4ea84876b9aaaf325461fa2f", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/4d6b5af9c051c57d4ea84876b9aaaf325461fa2f", "committedDate": "2020-11-12T18:10:09Z", "message": "JDK15 getCurrentClassLoader() for j.i.l.NativeLibraries.load()\n\ngetCurrentClassLoader() might be called while invoking native method\njdk.internal.loader.NativeLibraries.load(NativeLibraryImpl\nimpl, String name, boolean isBuiltin, boolean isJNI), the classloader of\nNativeLibraryImpl.fromClass should be returned. To retrieve the method\nargument, the native method can't be jitted;\nAdded the native method above to JIT excludeArray;\nAlso added the native method to the recognized method collection and\nexclude it from direct JNI call;\n\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}, "afterCommit": {"oid": "6cd4b353d4fa22ab3fa209ce9f21500f561f4e75", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/6cd4b353d4fa22ab3fa209ce9f21500f561f4e75", "committedDate": "2020-11-12T18:23:39Z", "message": "JDK15 getCurrentClassLoader() for j.i.l.NativeLibraries.load()\n\ngetCurrentClassLoader() might be called while invoking native method\njdk.internal.loader.NativeLibraries.load(NativeLibraryImpl\nimpl, String name, boolean isBuiltin, boolean isJNI), the classloader of\nNativeLibraryImpl.fromClass should be returned. To retrieve the method\nargument, the native method can't be jitted;\nAdded the native method above to JIT excludeArray;\nAlso added the native method to the recognized method collection and\nexclude it from direct JNI call;\n\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5Mzc2Mjkz", "url": "https://github.com/eclipse-openj9/openj9/pull/11160#pullrequestreview-529376293", "createdAt": "2020-11-12T18:33:41Z", "commit": {"oid": "6cd4b353d4fa22ab3fa209ce9f21500f561f4e75"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxODozMzo0MVrOHyIVQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxODozMzo0MVrOHyIVQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMyNzM2Mw==", "bodyText": "This appears to be an argument, not a receiver, so the NULL check is probably more appropriate. If it could be removed entirely, that would be nice, but the check is better than the assert, since we will at least function predictably in that case.", "url": "https://github.com/eclipse-openj9/openj9/pull/11160#discussion_r522327363", "createdAt": "2020-11-12T18:33:41Z", "author": {"login": "gacholio"}, "path": "runtime/vm/jnimisc.cpp", "diffHunk": "@@ -168,6 +168,36 @@ getCurrentClassLoader(J9VMThread *currentThread)\n \t\t} else {\n \t\t\t/* use the sender (native method) classloader */\n \t\t\tclassLoader = J9_CLASS_FROM_METHOD(nativeMethod)->classLoader;\n+#if JAVA_SPEC_VERSION >= 15\n+\t\t\t/* special case - if jdk/internal/loader/NativeLibraries.load(NativeLibraryImpl impl, String name, boolean isBuiltin, boolean isJNI)\n+\t\t\t * is the current native method, use the class loader of \"impl.fromClass\".\n+\t\t\t * This nativeMethod can't be cached cause HCR might make it invalid.\n+\t\t\t */\n+\t\t\tif (J9VMJDKINTERNALLOADERNATIVELIBRARIES_LOAD_METHOD(currentThread->javaVM) == nativeMethod) {\n+\t\t\t\tJ9InternalVMFunctions *vmFuncs = vm->internalVMFunctions;\n+\t\t\t\tvmFuncs->internalEnterVMFromJNI(currentThread);\n+\t\t\t\t/* The current native method has a NativeLibraryImpl instance as its first argument */\n+\t\t\t\tj9object_t nativeLibraryImplObject = (j9object_t)(currentThread->arg0EA[0]);\n+\t\t\t\tTrc_VM_findNativeLibrariesLoad_nativeMethod(currentThread, nativeMethod, nativeLibraryImplObject, classLoader);\n+\t\t\t\t/* Handle the object reference being redirected by the stack grower */\n+\t\t\t\tif (J9_ARE_ANY_BITS_SET((UDATA)nativeLibraryImplObject, 1)) {\n+\t\t\t\t\tnativeLibraryImplObject = *(j9object_t*)((UDATA)nativeLibraryImplObject - 1);\n+\t\t\t\t}\n+\t\t\t\tAssert_VM_notNull(nativeLibraryImplObject);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cd4b353d4fa22ab3fa209ce9f21500f561f4e75"}, "originalPosition": 19}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6cd4b353d4fa22ab3fa209ce9f21500f561f4e75", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/6cd4b353d4fa22ab3fa209ce9f21500f561f4e75", "committedDate": "2020-11-12T18:23:39Z", "message": "JDK15 getCurrentClassLoader() for j.i.l.NativeLibraries.load()\n\ngetCurrentClassLoader() might be called while invoking native method\njdk.internal.loader.NativeLibraries.load(NativeLibraryImpl\nimpl, String name, boolean isBuiltin, boolean isJNI), the classloader of\nNativeLibraryImpl.fromClass should be returned. To retrieve the method\nargument, the native method can't be jitted;\nAdded the native method above to JIT excludeArray;\nAlso added the native method to the recognized method collection and\nexclude it from direct JNI call;\n\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}, "afterCommit": {"oid": "839861d273d0aa01c40ecfab254a0402b46b32de", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/839861d273d0aa01c40ecfab254a0402b46b32de", "committedDate": "2020-11-12T18:38:10Z", "message": "JDK15 getCurrentClassLoader() for j.i.l.NativeLibraries.load()\n\ngetCurrentClassLoader() might be called while invoking native method\njdk.internal.loader.NativeLibraries.load(NativeLibraryImpl\nimpl, String name, boolean isBuiltin, boolean isJNI), the classloader of\nNativeLibraryImpl.fromClass should be returned. To retrieve the method\nargument, the native method can't be jitted;\nAdded the native method above to JIT excludeArray;\nAlso added the native method to the recognized method collection and\nexclude it from direct JNI call;\n\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5Mzg0MTg3", "url": "https://github.com/eclipse-openj9/openj9/pull/11160#pullrequestreview-529384187", "createdAt": "2020-11-12T18:44:12Z", "commit": {"oid": "839861d273d0aa01c40ecfab254a0402b46b32de"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxODo0NDoxMlrOHyIuEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxODo0NDoxMlrOHyIuEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMzMzcxNA==", "bodyText": "This needs to be unifdeffed as it is used unconditionally in the JIT code.", "url": "https://github.com/eclipse-openj9/openj9/pull/11160#discussion_r522333714", "createdAt": "2020-11-12T18:44:12Z", "author": {"login": "gacholio"}, "path": "runtime/oti/j9nonbuilder.h", "diffHunk": "@@ -5286,6 +5286,9 @@ typedef struct J9JavaVM {\n \tstruct J9ClassLoader* anonClassLoader;\n \tUDATA doPrivilegedWithContextPermissionMethodID1;\n \tUDATA doPrivilegedWithContextPermissionMethodID2;\n+#if JAVA_SPEC_VERSION >= 15", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "839861d273d0aa01c40ecfab254a0402b46b32de"}, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "839861d273d0aa01c40ecfab254a0402b46b32de", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/839861d273d0aa01c40ecfab254a0402b46b32de", "committedDate": "2020-11-12T18:38:10Z", "message": "JDK15 getCurrentClassLoader() for j.i.l.NativeLibraries.load()\n\ngetCurrentClassLoader() might be called while invoking native method\njdk.internal.loader.NativeLibraries.load(NativeLibraryImpl\nimpl, String name, boolean isBuiltin, boolean isJNI), the classloader of\nNativeLibraryImpl.fromClass should be returned. To retrieve the method\nargument, the native method can't be jitted;\nAdded the native method above to JIT excludeArray;\nAlso added the native method to the recognized method collection and\nexclude it from direct JNI call;\n\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}, "afterCommit": {"oid": "38b53572bd0eabd85c35cb1d150edc8a5adc89c0", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/38b53572bd0eabd85c35cb1d150edc8a5adc89c0", "committedDate": "2020-11-12T19:00:15Z", "message": "JDK15 getCurrentClassLoader() for j.i.l.NativeLibraries.load()\n\ngetCurrentClassLoader() might be called while invoking native method\njdk.internal.loader.NativeLibraries.load(NativeLibraryImpl\nimpl, String name, boolean isBuiltin, boolean isJNI), the classloader of\nNativeLibraryImpl.fromClass should be returned. To retrieve the method\nargument, the native method can't be jitted;\nAdded the native method above to JIT excludeArray;\nAlso added the native method to the recognized method collection and\nexclude it from direct JNI call;\n\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5NDA0MDc0", "url": "https://github.com/eclipse-openj9/openj9/pull/11160#pullrequestreview-529404074", "createdAt": "2020-11-12T19:06:17Z", "commit": {"oid": "38b53572bd0eabd85c35cb1d150edc8a5adc89c0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxOTowNjoxN1rOHyJjOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxOTowNjoxN1rOHyJjOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM0NzMyMw==", "bodyText": "Not strictly necessary - it will already be 0.", "url": "https://github.com/eclipse-openj9/openj9/pull/11160#discussion_r522347323", "createdAt": "2020-11-12T19:06:17Z", "author": {"login": "gacholio"}, "path": "runtime/jcl/common/stdinit.c", "diffHunk": "@@ -187,6 +187,23 @@ standardInit( J9JavaVM *vm, char *dllName)\n \t\t\tresult = (jint)initializeSystemThreadGroup(vm, (JNIEnv *)vmThread);\n \t\t\tif (JNI_OK != result) {\n \t\t\t\tgoto _fail;\n+\t\t\t} else {\n+#if JAVA_SPEC_VERSION >= 15\n+\t\t\t\tJNIEnv *env = (JNIEnv *)vmThread;\n+\t\t\t\tjclass clz = (*env)->FindClass(env, \"jdk/internal/loader/NativeLibraries\");\n+\t\t\t\tjmethodID mid = NULL;\n+\t\t\t\tif (NULL == clz) {\n+\t\t\t\t\tgoto _fail;\n+\t\t\t\t}\n+\t\t\t\tmid = (*env)->GetStaticMethodID(env, clz, \"load\", \"(Ljdk/internal/loader/NativeLibraries$NativeLibraryImpl;Ljava/lang/String;ZZ)Z\");\n+\t\t\t\tif (NULL == mid) {\n+\t\t\t\t\tgoto _fail;\n+\t\t\t\t}\n+\t\t\t\tvm->nativeLibrariesLoadMethodID = (UDATA) mid;\n+\t\t\t\tTrc_JCL_init_nativeLibrariesLoadMethodID(vmThread, vm->nativeLibrariesLoadMethodID);\n+#else /* JAVA_SPEC_VERSION >= 15 */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38b53572bd0eabd85c35cb1d150edc8a5adc89c0"}, "originalPosition": 18}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5f303d61102e2c16b0477aeec5a2b21635312dd", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/d5f303d61102e2c16b0477aeec5a2b21635312dd", "committedDate": "2020-11-12T19:23:40Z", "message": "JDK15 getCurrentClassLoader() for j.i.l.NativeLibraries.load()\n\ngetCurrentClassLoader() might be called while invoking native method\njdk.internal.loader.NativeLibraries.load(NativeLibraryImpl\nimpl, String name, boolean isBuiltin, boolean isJNI), the classloader of\nNativeLibraryImpl.fromClass should be returned. To retrieve the method\nargument, the native method can't be jitted;\nAdded the native method above to JIT excludeArray;\nAlso added the native method to the recognized method collection and\nexclude it from direct JNI call;\n\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "38b53572bd0eabd85c35cb1d150edc8a5adc89c0", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/38b53572bd0eabd85c35cb1d150edc8a5adc89c0", "committedDate": "2020-11-12T19:00:15Z", "message": "JDK15 getCurrentClassLoader() for j.i.l.NativeLibraries.load()\n\ngetCurrentClassLoader() might be called while invoking native method\njdk.internal.loader.NativeLibraries.load(NativeLibraryImpl\nimpl, String name, boolean isBuiltin, boolean isJNI), the classloader of\nNativeLibraryImpl.fromClass should be returned. To retrieve the method\nargument, the native method can't be jitted;\nAdded the native method above to JIT excludeArray;\nAlso added the native method to the recognized method collection and\nexclude it from direct JNI call;\n\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}, "afterCommit": {"oid": "d5f303d61102e2c16b0477aeec5a2b21635312dd", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/d5f303d61102e2c16b0477aeec5a2b21635312dd", "committedDate": "2020-11-12T19:23:40Z", "message": "JDK15 getCurrentClassLoader() for j.i.l.NativeLibraries.load()\n\ngetCurrentClassLoader() might be called while invoking native method\njdk.internal.loader.NativeLibraries.load(NativeLibraryImpl\nimpl, String name, boolean isBuiltin, boolean isJNI), the classloader of\nNativeLibraryImpl.fromClass should be returned. To retrieve the method\nargument, the native method can't be jitted;\nAdded the native method above to JIT excludeArray;\nAlso added the native method to the recognized method collection and\nexclude it from direct JNI call;\n\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5NDMxNzg2", "url": "https://github.com/eclipse-openj9/openj9/pull/11160#pullrequestreview-529431786", "createdAt": "2020-11-12T19:38:05Z", "commit": {"oid": "d5f303d61102e2c16b0477aeec5a2b21635312dd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5NDY5NTQ5", "url": "https://github.com/eclipse-openj9/openj9/pull/11160#pullrequestreview-529469549", "createdAt": "2020-11-12T20:25:02Z", "commit": {"oid": "d5f303d61102e2c16b0477aeec5a2b21635312dd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1549, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}