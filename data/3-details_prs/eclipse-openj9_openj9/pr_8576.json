{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1MDU0NDY1", "number": 8576, "title": "Include Xlp Tests on Sanity Functional", "bodyText": "Enabling both the xlpcodecache and xlp(objectheap) tests.\nFixes: #8554\nSigned-off-by: AlenBadel Alen.Badel@ibm.com", "createdAt": "2020-02-13T19:44:37Z", "url": "https://github.com/eclipse-openj9/openj9/pull/8576", "merged": true, "mergeCommit": {"oid": "932c6a74aa8312491f11293fa2b792c6b3d184db"}, "closed": true, "closedAt": "2020-02-16T15:12:02Z", "author": {"login": "AlenBadel"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcEAXxugBqjMwMzYyODkyMjY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcE6OK2gFqTM1OTQwOTk1Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "76c05c90493484bef1db39b4b9d2458d8cdd5ad7", "author": {"user": null}, "url": "https://github.com/eclipse-openj9/openj9/commit/76c05c90493484bef1db39b4b9d2458d8cdd5ad7", "committedDate": "2020-02-13T19:46:06Z", "message": "Copyright"}, "afterCommit": {"oid": "30a5f9913d7475031ab4dd293caf28eed99d4071", "author": {"user": null}, "url": "https://github.com/eclipse-openj9/openj9/commit/30a5f9913d7475031ab4dd293caf28eed99d4071", "committedDate": "2020-02-13T19:47:32Z", "message": "Include Xlp Tests on Sanity Functional\n\nEnabling both the xlpcodecache and xlp(objectheap) tests.\n\nSigned-off-by: AlenBadel <Alen.Badel@ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4NTc2ODkz", "url": "https://github.com/eclipse-openj9/openj9/pull/8576#pullrequestreview-358576893", "createdAt": "2020-02-13T21:50:12Z", "commit": {"oid": "30a5f9913d7475031ab4dd293caf28eed99d4071"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMTo1MDoxMlrOFpkxjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMTo1MDoxMlrOFpkxjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEzODQ0NQ==", "bodyText": "Why the check for \"s390\"?", "url": "https://github.com/eclipse-openj9/openj9/pull/8576#discussion_r379138445", "createdAt": "2020-02-13T21:50:12Z", "author": {"login": "pshipton"}, "path": "test/functional/VM_Test/src/j9vm/runner/Runner.java", "diffHunk": "@@ -67,40 +67,45 @@\n \n \tprivate void setPlatform() {\n \t\t\n-\t\tString spec = System.getProperty(\"platform\");\n-\t\tif (spec != null) {\n+\t\tString OSSpec = System.getProperty(\"os.name\").toLowerCase();\n+\t\tif (OSSpec != null) {\n \t\t\t/* Get OS from the spec string */\n-\t\t\tif (spec.indexOf(\"aix\") != -1) {\n+\t\t\tif (OSSpec.contains(\"aix\")) {\n \t\t\t\tosName = OSName.AIX;\n-\t\t\t} else if (spec.indexOf(\"linux\") != -1){\n+\t\t\t} else if (OSSpec.contains(\"linux\")) {\n \t\t\t\tosName = OSName.LINUX;\n-\t\t\t} else if (spec.indexOf(\"win\") != -1) {\n+\t\t\t} else if (OSSpec.contains(\"windows\")) {\n \t\t\t\tosName = OSName.WINDOWS;\n-\t\t\t} else if (spec.indexOf(\"zos\") != -1) {\n+\t\t\t} else if (OSSpec.contains(\"z/os\")) {\n \t\t\t\tosName = OSName.ZOS;\n \t\t\t} else {\n+\t\t\t\tSystem.out.println(\"Runner couldn't determine underlying OS. Got OS Name:\" + OSSpec);\n \t\t\t\tosName = OSName.UNKNOWN;\n \t\t\t}\n-\t\t\t\n+\t\t}\n+\t\tString archSpec = System.getProperty(\"os.arch\").toLowerCase();\n+\t\tif (archSpec != null) {\n \t\t\t/* Get arch from spec string */\n-\t\t\tif (spec.indexOf(\"ppc\") != -1) {\n+\t\t\tif (archSpec.contains(\"ppc\")) {\n \t\t\t\tosArch = OSArch.PPC;\n-\t\t\t} else if (spec.indexOf(\"390\") != -1) {\n+\t\t\t} else if (archSpec.contains(\"s390\")) {\n \t\t\t\tosArch = OSArch.S390X;\n-\t\t\t} else if (spec.indexOf(\"x86\") != -1) {\n+\t\t\t} else if (archSpec.contains(\"amd64\") || archSpec.contains(\"x86\")) {\n \t\t\t\tosArch = OSArch.X86;\n \t\t\t} else {\n+\t\t\t\tSystem.out.println(\"Runner couldn't determine underlying architecture. Got OS Arch:\" + archSpec);\n \t\t\t\tosArch = OSArch.UNKNOWN;\n \t\t\t}\n \t\t\t\n \t\t\t/* Get address mode */\n-\t\t\tif (spec.indexOf(\"31\") != -1) {\n+\t\t\tif (archSpec.contains(\"31\")) {\n \t\t\t\taddrMode = AddrMode.BIT31;\n-\t\t\t} else if (spec.indexOf(\"32\") != -1) {\n+\t\t\t} else if (archSpec.contains(\"32\")) {\n \t\t\t\taddrMode = AddrMode.BIT32;\n-\t\t\t} else if (spec.indexOf(\"64\") != -1) {\n+\t\t\t} else if (archSpec.contains(\"64\") || archSpec.contains(\"s390\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30a5f9913d7475031ab4dd293caf28eed99d4071"}, "originalPosition": 59}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c1a132c43a74c53cb10225c17aae75505e98a1c8", "author": {"user": null}, "url": "https://github.com/eclipse-openj9/openj9/commit/c1a132c43a74c53cb10225c17aae75505e98a1c8", "committedDate": "2020-02-14T18:07:28Z", "message": "Add Comment"}, "afterCommit": {"oid": "0aa32c29ca66c64138f05d80db74ce3836e0cbc5", "author": {"user": null}, "url": "https://github.com/eclipse-openj9/openj9/commit/0aa32c29ca66c64138f05d80db74ce3836e0cbc5", "committedDate": "2020-02-14T18:08:35Z", "message": "Include Xlp Tests on Sanity Functional\n\nEnabling both the xlpcodecache and xlp(objectheap) tests.\n\nSigned-off-by: AlenBadel <Alen.Badel@ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0aa32c29ca66c64138f05d80db74ce3836e0cbc5", "author": {"user": null}, "url": "https://github.com/eclipse-openj9/openj9/commit/0aa32c29ca66c64138f05d80db74ce3836e0cbc5", "committedDate": "2020-02-14T18:08:35Z", "message": "Include Xlp Tests on Sanity Functional\n\nEnabling both the xlpcodecache and xlp(objectheap) tests.\n\nSigned-off-by: AlenBadel <Alen.Badel@ibm.com>"}, "afterCommit": {"oid": "6a672f9e73cd5db54d843f554960c521df172d31", "author": {"user": null}, "url": "https://github.com/eclipse-openj9/openj9/commit/6a672f9e73cd5db54d843f554960c521df172d31", "committedDate": "2020-02-14T18:24:09Z", "message": "Include Xlp Tests on Sanity Functional\n\nEnabling both the xlpcodecache and xlp(objectheap) tests.\n\nSigned-off-by: AlenBadel <Alen.Badel@ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MTY3MDU0", "url": "https://github.com/eclipse-openj9/openj9/pull/8576#pullrequestreview-359167054", "createdAt": "2020-02-14T19:24:55Z", "commit": {"oid": "6a672f9e73cd5db54d843f554960c521df172d31"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxOToyNDo1NVrOFqBMPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxOToyNDo1NVrOFqBMPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYwNDAyOA==", "bodyText": "It should be z/OS does.\nI don't see how z/OS 31-bit can be detected property. Not sure why the test uses os.arch to get the address mode, there is a better property that works across all platforms.\nz/OS 31-bit sun.arch.data.model = 32\nz/OS 64-bit sun.arch.data.model = 64", "url": "https://github.com/eclipse-openj9/openj9/pull/8576#discussion_r379604028", "createdAt": "2020-02-14T19:24:55Z", "author": {"login": "pshipton"}, "path": "test/functional/VM_Test/src/j9vm/runner/Runner.java", "diffHunk": "@@ -67,40 +67,46 @@\n \n \tprivate void setPlatform() {\n \t\t\n-\t\tString spec = System.getProperty(\"platform\");\n-\t\tif (spec != null) {\n+\t\tString OSSpec = System.getProperty(\"os.name\").toLowerCase();\n+\t\tif (OSSpec != null) {\n \t\t\t/* Get OS from the spec string */\n-\t\t\tif (spec.indexOf(\"aix\") != -1) {\n+\t\t\tif (OSSpec.contains(\"aix\")) {\n \t\t\t\tosName = OSName.AIX;\n-\t\t\t} else if (spec.indexOf(\"linux\") != -1){\n+\t\t\t} else if (OSSpec.contains(\"linux\")) {\n \t\t\t\tosName = OSName.LINUX;\n-\t\t\t} else if (spec.indexOf(\"win\") != -1) {\n+\t\t\t} else if (OSSpec.contains(\"windows\")) {\n \t\t\t\tosName = OSName.WINDOWS;\n-\t\t\t} else if (spec.indexOf(\"zos\") != -1) {\n+\t\t\t} else if (OSSpec.contains(\"z/os\")) {\n \t\t\t\tosName = OSName.ZOS;\n \t\t\t} else {\n+\t\t\t\tSystem.out.println(\"Runner couldn't determine underlying OS. Got OS Name:\" + OSSpec);\n \t\t\t\tosName = OSName.UNKNOWN;\n \t\t\t}\n-\t\t\t\n+\t\t}\n+\t\tString archSpec = System.getProperty(\"os.arch\").toLowerCase();\n+\t\tif (archSpec != null) {\n \t\t\t/* Get arch from spec string */\n-\t\t\tif (spec.indexOf(\"ppc\") != -1) {\n+\t\t\tif (archSpec.contains(\"ppc\")) {\n \t\t\t\tosArch = OSArch.PPC;\n-\t\t\t} else if (spec.indexOf(\"390\") != -1) {\n+\t\t\t} else if (archSpec.contains(\"s390\")) {\n \t\t\t\tosArch = OSArch.S390X;\n-\t\t\t} else if (spec.indexOf(\"x86\") != -1) {\n+\t\t\t} else if (archSpec.contains(\"amd64\") || archSpec.contains(\"x86\")) {\n \t\t\t\tosArch = OSArch.X86;\n \t\t\t} else {\n+\t\t\t\tSystem.out.println(\"Runner couldn't determine underlying architecture. Got OS Arch:\" + archSpec);\n \t\t\t\tosArch = OSArch.UNKNOWN;\n \t\t\t}\n \t\t\t\n \t\t\t/* Get address mode */\n-\t\t\tif (spec.indexOf(\"31\") != -1) {\n+\t\t\tif (archSpec.contains(\"31\")) {\n \t\t\t\taddrMode = AddrMode.BIT31;\n-\t\t\t} else if (spec.indexOf(\"32\") != -1) {\n+\t\t\t} else if (archSpec.contains(\"32\")) {\n \t\t\t\taddrMode = AddrMode.BIT32;\n-\t\t\t} else if (spec.indexOf(\"64\") != -1) {\n+\t\t\t/* os.arch on Z/OS Does not include the architecture. To support 64 bit addressing mode look for s390. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a672f9e73cd5db54d843f554960c521df172d31"}, "originalPosition": 59}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c4a1c85c43366ad37bd0de94804985f64f0c44fe", "author": {"user": null}, "url": "https://github.com/eclipse-openj9/openj9/commit/c4a1c85c43366ad37bd0de94804985f64f0c44fe", "committedDate": "2020-02-14T21:02:19Z", "message": "Reformat"}, "afterCommit": {"oid": "51580491fec4cf0e2cb287ee3f74dc56c00293e4", "author": {"user": null}, "url": "https://github.com/eclipse-openj9/openj9/commit/51580491fec4cf0e2cb287ee3f74dc56c00293e4", "committedDate": "2020-02-14T21:02:55Z", "message": "Use sun.arch.data.model to determine addressing mode"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f75bc8b9d53b2b7bb393c8d63face162da0444f1", "author": {"user": null}, "url": "https://github.com/eclipse-openj9/openj9/commit/f75bc8b9d53b2b7bb393c8d63face162da0444f1", "committedDate": "2020-02-14T21:05:14Z", "message": "Add Comment"}, "afterCommit": {"oid": "3187061c91b1751e1dbd85d0df02e9ed461ceef8", "author": {"user": null}, "url": "https://github.com/eclipse-openj9/openj9/commit/3187061c91b1751e1dbd85d0df02e9ed461ceef8", "committedDate": "2020-02-14T21:08:34Z", "message": "Use sun.arch.data.model to determine addressing mode"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3187061c91b1751e1dbd85d0df02e9ed461ceef8", "author": {"user": null}, "url": "https://github.com/eclipse-openj9/openj9/commit/3187061c91b1751e1dbd85d0df02e9ed461ceef8", "committedDate": "2020-02-14T21:08:34Z", "message": "Use sun.arch.data.model to determine addressing mode"}, "afterCommit": {"oid": "2edc870141963185aff600e822f201e76975fa37", "author": {"user": null}, "url": "https://github.com/eclipse-openj9/openj9/commit/2edc870141963185aff600e822f201e76975fa37", "committedDate": "2020-02-15T00:44:14Z", "message": "Include Xlp Tests on Sanity Functional\n\nEnabling both the xlpcodecache and xlp(objectheap) tests.\n\nSigned-off-by: AlenBadel <Alen.Badel@ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "155b25ae874122339b396caaedfa40d61d1943cd", "author": {"user": null}, "url": "https://github.com/eclipse-openj9/openj9/commit/155b25ae874122339b396caaedfa40d61d1943cd", "committedDate": "2020-02-15T00:47:39Z", "message": "Include Xlp Tests on Sanity Functional\n\nEnabling both the xlpcodecache and xlp(objectheap) tests.\n\nSigned-off-by: AlenBadel <Alen.Badel@ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2edc870141963185aff600e822f201e76975fa37", "author": {"user": null}, "url": "https://github.com/eclipse-openj9/openj9/commit/2edc870141963185aff600e822f201e76975fa37", "committedDate": "2020-02-15T00:44:14Z", "message": "Include Xlp Tests on Sanity Functional\n\nEnabling both the xlpcodecache and xlp(objectheap) tests.\n\nSigned-off-by: AlenBadel <Alen.Badel@ibm.com>"}, "afterCommit": {"oid": "155b25ae874122339b396caaedfa40d61d1943cd", "author": {"user": null}, "url": "https://github.com/eclipse-openj9/openj9/commit/155b25ae874122339b396caaedfa40d61d1943cd", "committedDate": "2020-02-15T00:47:39Z", "message": "Include Xlp Tests on Sanity Functional\n\nEnabling both the xlpcodecache and xlp(objectheap) tests.\n\nSigned-off-by: AlenBadel <Alen.Badel@ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5NDA5OTUz", "url": "https://github.com/eclipse-openj9/openj9/pull/8576#pullrequestreview-359409953", "createdAt": "2020-02-16T15:11:45Z", "commit": {"oid": "155b25ae874122339b396caaedfa40d61d1943cd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 802, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}