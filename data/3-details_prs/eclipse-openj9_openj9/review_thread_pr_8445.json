{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4NzEwMDQx", "number": 8445, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNDoyMjo0MFrODc_osA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxODo1OTozNVrODe7FMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNzI5MzI4OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/z/codegen/J9CodeGenerator.cpp", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNDoyMjo0MFrOFlVwuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMDo1ODoxOFrOFljOKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY5ODE3MQ==", "bodyText": "Is this what we want here since it would stop it being recognized later? Would it make more sense to follow the convention an inner if with another switch for these two methods where the resultReg would be set and return true would happen so that if it does not match or the capability is not enabled evaluation will continue like for most other matchers?", "url": "https://github.com/eclipse-openj9/openj9/pull/8445#discussion_r374698171", "createdAt": "2020-02-04T14:22:40Z", "author": {"login": "andrewcraik"}, "path": "runtime/compiler/z/codegen/J9CodeGenerator.cpp", "diffHunk": "@@ -4107,6 +4123,32 @@ J9::Z::CodeGenerator::inlineDirectCall(\n                break;\n             }\n          }\n+      if (cg->getSupportsVectorRegisters())\n+         {\n+         switch (methodSymbol->getRecognizedMethod())\n+            {\n+            case TR::java_lang_Math_fma_D:\n+            case TR::java_lang_StrictMath_fma_D:\n+               resultReg = inlineMathFma(node, cg);\n+               return true;\n+\n+            case TR::java_lang_Math_fma_F:\n+            case TR::java_lang_StrictMath_fma_F:\n+               if (comp->target().cpu.getSupportsVectorFacilityEnhancement1())\n+                  {\n+                  resultReg = inlineMathFma(node, cg);\n+                  return true;\n+                  }\n+               else ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2170387b6af9c2873949fc7ae06d8d72bbb6a1df"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc2NzIwMA==", "bodyText": "My intention for having an else to return false here is to save time from checking any other recognized methods. Because if the method falls into the above cases but does not pass the cpu capability check, it shouldn't be matched to any other recognized method.", "url": "https://github.com/eclipse-openj9/openj9/pull/8445#discussion_r374767200", "createdAt": "2020-02-04T16:09:07Z", "author": {"login": "wbh123456"}, "path": "runtime/compiler/z/codegen/J9CodeGenerator.cpp", "diffHunk": "@@ -4107,6 +4123,32 @@ J9::Z::CodeGenerator::inlineDirectCall(\n                break;\n             }\n          }\n+      if (cg->getSupportsVectorRegisters())\n+         {\n+         switch (methodSymbol->getRecognizedMethod())\n+            {\n+            case TR::java_lang_Math_fma_D:\n+            case TR::java_lang_StrictMath_fma_D:\n+               resultReg = inlineMathFma(node, cg);\n+               return true;\n+\n+            case TR::java_lang_Math_fma_F:\n+            case TR::java_lang_StrictMath_fma_F:\n+               if (comp->target().cpu.getSupportsVectorFacilityEnhancement1())\n+                  {\n+                  resultReg = inlineMathFma(node, cg);\n+                  return true;\n+                  }\n+               else ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY5ODE3MQ=="}, "originalCommit": {"oid": "2170387b6af9c2873949fc7ae06d8d72bbb6a1df"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg5NTg2Ng==", "bodyText": "@fjeremic Are you happy with the return false coding style here? Replacing the else statement by a simple break might also be a good practice as there might be related recognized method checks afterwards (especially in this extensible classes hierarchy).", "url": "https://github.com/eclipse-openj9/openj9/pull/8445#discussion_r374895866", "createdAt": "2020-02-04T20:08:54Z", "author": {"login": "wbh123456"}, "path": "runtime/compiler/z/codegen/J9CodeGenerator.cpp", "diffHunk": "@@ -4107,6 +4123,32 @@ J9::Z::CodeGenerator::inlineDirectCall(\n                break;\n             }\n          }\n+      if (cg->getSupportsVectorRegisters())\n+         {\n+         switch (methodSymbol->getRecognizedMethod())\n+            {\n+            case TR::java_lang_Math_fma_D:\n+            case TR::java_lang_StrictMath_fma_D:\n+               resultReg = inlineMathFma(node, cg);\n+               return true;\n+\n+            case TR::java_lang_Math_fma_F:\n+            case TR::java_lang_StrictMath_fma_F:\n+               if (comp->target().cpu.getSupportsVectorFacilityEnhancement1())\n+                  {\n+                  resultReg = inlineMathFma(node, cg);\n+                  return true;\n+                  }\n+               else ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY5ODE3MQ=="}, "originalCommit": {"oid": "2170387b6af9c2873949fc7ae06d8d72bbb6a1df"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkxMzQ3MA==", "bodyText": "Because if the method falls into the above cases but does not pass the cpu capability check, it shouldn't be matched to any other recognized method.\n\nLet's not assume this. This class is extensible, and there could be other checks further down. I'd remove the else block entirely.", "url": "https://github.com/eclipse-openj9/openj9/pull/8445#discussion_r374913470", "createdAt": "2020-02-04T20:47:06Z", "author": {"login": "fjeremic"}, "path": "runtime/compiler/z/codegen/J9CodeGenerator.cpp", "diffHunk": "@@ -4107,6 +4123,32 @@ J9::Z::CodeGenerator::inlineDirectCall(\n                break;\n             }\n          }\n+      if (cg->getSupportsVectorRegisters())\n+         {\n+         switch (methodSymbol->getRecognizedMethod())\n+            {\n+            case TR::java_lang_Math_fma_D:\n+            case TR::java_lang_StrictMath_fma_D:\n+               resultReg = inlineMathFma(node, cg);\n+               return true;\n+\n+            case TR::java_lang_Math_fma_F:\n+            case TR::java_lang_StrictMath_fma_F:\n+               if (comp->target().cpu.getSupportsVectorFacilityEnhancement1())\n+                  {\n+                  resultReg = inlineMathFma(node, cg);\n+                  return true;\n+                  }\n+               else ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY5ODE3MQ=="}, "originalCommit": {"oid": "2170387b6af9c2873949fc7ae06d8d72bbb6a1df"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkxODY5OQ==", "bodyText": "Fixed in 1b9aa33. I have removed the else  block.", "url": "https://github.com/eclipse-openj9/openj9/pull/8445#discussion_r374918699", "createdAt": "2020-02-04T20:58:18Z", "author": {"login": "wbh123456"}, "path": "runtime/compiler/z/codegen/J9CodeGenerator.cpp", "diffHunk": "@@ -4107,6 +4123,32 @@ J9::Z::CodeGenerator::inlineDirectCall(\n                break;\n             }\n          }\n+      if (cg->getSupportsVectorRegisters())\n+         {\n+         switch (methodSymbol->getRecognizedMethod())\n+            {\n+            case TR::java_lang_Math_fma_D:\n+            case TR::java_lang_StrictMath_fma_D:\n+               resultReg = inlineMathFma(node, cg);\n+               return true;\n+\n+            case TR::java_lang_Math_fma_F:\n+            case TR::java_lang_StrictMath_fma_F:\n+               if (comp->target().cpu.getSupportsVectorFacilityEnhancement1())\n+                  {\n+                  resultReg = inlineMathFma(node, cg);\n+                  return true;\n+                  }\n+               else ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY5ODE3MQ=="}, "originalCommit": {"oid": "2170387b6af9c2873949fc7ae06d8d72bbb6a1df"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxODY3NzYwOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/z/codegen/J9TreeEvaluator.cpp", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMTowMDozOVrOFljSzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMTozODowM1rOFlkWcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkxOTg4Nw==", "bodyText": "This is a bug. It will prematurely kill the registers associated with the node. If the children of the call are commoned somewhere then this could result in a garbage value being held in the corresponding register at runtime. We need to remove these three lines. In general we only call stopUsingRegister on registers which were allocated within the evaluator or helper (i.e. registers created via allocateRegister API).\nCan we add some unit tests for this API? I'd like to see a commoning test in there which would have caught this bug.", "url": "https://github.com/eclipse-openj9/openj9/pull/8445#discussion_r374919887", "createdAt": "2020-02-04T21:00:39Z", "author": {"login": "fjeremic"}, "path": "runtime/compiler/z/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -1101,6 +1101,33 @@ inlineDoubleMin(TR::Node *node, TR::CodeGenerator *cg)\n    return doubleMaxMinHelper(node, cg, false);\n    }\n \n+extern TR::Register * \n+inlineMathFma(TR::Node *node, TR::CodeGenerator *cg)\n+   {\n+   TR_ASSERT_FATAL(node->getNumChildren() == 3, \n+   \"In function inlineMathFma, the node at address %p should have exactly 3 children, but got %u instead\", node, node->getNumChildren());\n+\n+   TR::Register      * targetRegister      = cg->allocateRegister(TR_VRF);  \n+\n+   TR::Register      * v1      = cg->evaluate(node->getFirstChild());\n+   TR::Register      * v2      = cg->evaluate(node->getSecondChild());\n+   TR::Register      * v3      = cg->evaluate(node->getThirdChild());\n+\n+   uint8_t mask6 = getVectorElementSizeMask(TR::DataType::getSize(node->getDataType()));\n+   generateVRReInstruction(cg, TR::InstOpCode::VFMA, node, targetRegister, v1, v2, v3, mask6, 0);\n+\n+   cg->stopUsingRegister(v1);\n+   cg->stopUsingRegister(v2);\n+   cg->stopUsingRegister(v3);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b9aa33c254f815b5ddb0b429ef0f118970368b3"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkyNjg5MA==", "bodyText": "I will remove these lines.\nI will look at how we can add unit tests to prevent this kind of bug.", "url": "https://github.com/eclipse-openj9/openj9/pull/8445#discussion_r374926890", "createdAt": "2020-02-04T21:15:41Z", "author": {"login": "wbh123456"}, "path": "runtime/compiler/z/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -1101,6 +1101,33 @@ inlineDoubleMin(TR::Node *node, TR::CodeGenerator *cg)\n    return doubleMaxMinHelper(node, cg, false);\n    }\n \n+extern TR::Register * \n+inlineMathFma(TR::Node *node, TR::CodeGenerator *cg)\n+   {\n+   TR_ASSERT_FATAL(node->getNumChildren() == 3, \n+   \"In function inlineMathFma, the node at address %p should have exactly 3 children, but got %u instead\", node, node->getNumChildren());\n+\n+   TR::Register      * targetRegister      = cg->allocateRegister(TR_VRF);  \n+\n+   TR::Register      * v1      = cg->evaluate(node->getFirstChild());\n+   TR::Register      * v2      = cg->evaluate(node->getSecondChild());\n+   TR::Register      * v3      = cg->evaluate(node->getThirdChild());\n+\n+   uint8_t mask6 = getVectorElementSizeMask(TR::DataType::getSize(node->getDataType()));\n+   generateVRReInstruction(cg, TR::InstOpCode::VFMA, node, targetRegister, v1, v2, v3, mask6, 0);\n+\n+   cg->stopUsingRegister(v1);\n+   cg->stopUsingRegister(v2);\n+   cg->stopUsingRegister(v3);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkxOTg4Nw=="}, "originalCommit": {"oid": "1b9aa33c254f815b5ddb0b429ef0f118970368b3"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkzNzIwMQ==", "bodyText": "Here is an example for some math methods that the JIT recognizes:\nhttps://github.com/eclipse/openj9/blob/master/test/functional/JIT_Test/src/jit/test/recognizedMethod/TestJavaLangMath.java\nYou can likely create a similar test class and write some unit tests there.", "url": "https://github.com/eclipse-openj9/openj9/pull/8445#discussion_r374937201", "createdAt": "2020-02-04T21:38:03Z", "author": {"login": "fjeremic"}, "path": "runtime/compiler/z/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -1101,6 +1101,33 @@ inlineDoubleMin(TR::Node *node, TR::CodeGenerator *cg)\n    return doubleMaxMinHelper(node, cg, false);\n    }\n \n+extern TR::Register * \n+inlineMathFma(TR::Node *node, TR::CodeGenerator *cg)\n+   {\n+   TR_ASSERT_FATAL(node->getNumChildren() == 3, \n+   \"In function inlineMathFma, the node at address %p should have exactly 3 children, but got %u instead\", node, node->getNumChildren());\n+\n+   TR::Register      * targetRegister      = cg->allocateRegister(TR_VRF);  \n+\n+   TR::Register      * v1      = cg->evaluate(node->getFirstChild());\n+   TR::Register      * v2      = cg->evaluate(node->getSecondChild());\n+   TR::Register      * v3      = cg->evaluate(node->getThirdChild());\n+\n+   uint8_t mask6 = getVectorElementSizeMask(TR::DataType::getSize(node->getDataType()));\n+   generateVRReInstruction(cg, TR::InstOpCode::VFMA, node, targetRegister, v1, v2, v3, mask6, 0);\n+\n+   cg->stopUsingRegister(v1);\n+   cg->stopUsingRegister(v2);\n+   cg->stopUsingRegister(v3);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkxOTg4Nw=="}, "originalCommit": {"oid": "1b9aa33c254f815b5ddb0b429ef0f118970368b3"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNzUxODU5OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/z/codegen/J9TreeEvaluator.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxODo1OTozNVrOFoVLPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMToxODo0NFrOFoZd5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgzNDMwMw==", "bodyText": "I don't think the result should be stored in a vector register. The data type of node is a double or a float, so the result should live in an FPR. I think we could run into a scenario here where the register allocator chooses to allocate VRF26 for example, then if the result of the FMA call gets used again for example to feed into an argument to another call we would fail.\nI think you should be able to construct a test case for this as well. What happens if the result of one FMA call is used as an argument to another method?", "url": "https://github.com/eclipse-openj9/openj9/pull/8445#discussion_r377834303", "createdAt": "2020-02-11T18:59:35Z", "author": {"login": "fjeremic"}, "path": "runtime/compiler/z/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -1101,6 +1101,29 @@ inlineDoubleMin(TR::Node *node, TR::CodeGenerator *cg)\n    return doubleMaxMinHelper(node, cg, false);\n    }\n \n+extern TR::Register * \n+inlineMathFma(TR::Node *node, TR::CodeGenerator *cg)\n+   {\n+   TR_ASSERT_FATAL(node->getNumChildren() == 3, \n+   \"In function inlineMathFma, the node at address %p should have exactly 3 children, but got %u instead\", node, node->getNumChildren());\n+\n+   TR::Register      * targetRegister      = cg->allocateRegister(TR_VRF);  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c57c0597e2b42e02fb1fccac0da61f3cfb532a74"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkwNDYxMw==", "bodyText": "I tested the situation where the result of FMA call is used as an argument to 1. another FMA call 2. math.sqrt(). Both cases compiles and runs with no problem. Should I still write a test case for this?\nI have change the targetRegister to be a TR_FPR in ebcff19.", "url": "https://github.com/eclipse-openj9/openj9/pull/8445#discussion_r377904613", "createdAt": "2020-02-11T21:18:44Z", "author": {"login": "wbh123456"}, "path": "runtime/compiler/z/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -1101,6 +1101,29 @@ inlineDoubleMin(TR::Node *node, TR::CodeGenerator *cg)\n    return doubleMaxMinHelper(node, cg, false);\n    }\n \n+extern TR::Register * \n+inlineMathFma(TR::Node *node, TR::CodeGenerator *cg)\n+   {\n+   TR_ASSERT_FATAL(node->getNumChildren() == 3, \n+   \"In function inlineMathFma, the node at address %p should have exactly 3 children, but got %u instead\", node, node->getNumChildren());\n+\n+   TR::Register      * targetRegister      = cg->allocateRegister(TR_VRF);  ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgzNDMwMw=="}, "originalCommit": {"oid": "c57c0597e2b42e02fb1fccac0da61f3cfb532a74"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 668, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}