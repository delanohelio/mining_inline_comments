{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwMjcyOTQ3", "number": 10653, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNzowMjo1MlrOElwjlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNzozNzowM1rOEmtTPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MDI4MzEwOnYy", "diffSide": "RIGHT", "path": "runtime/j9vm/jvm.c", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNzowMjo1MlrOHVaUgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNToyNToxMVrOHW0FlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIxMzM3OQ==", "bodyText": "This can return NULL for unattached threads - might want to assert it here.", "url": "https://github.com/eclipse-openj9/openj9/pull/10653#discussion_r492213379", "createdAt": "2020-09-21T17:02:52Z", "author": {"login": "gacholio"}, "path": "runtime/j9vm/jvm.c", "diffHunk": "@@ -3650,25 +3650,38 @@ JVM_LoadSystemLibrary(const char *libName)\n  */\n \n void* JNICALL\n-JVM_LoadLibrary(const char* libName)\n+JVM_LoadLibrary(const char *libName)\n {\n-\tvoid* result = NULL;\n-\tJ9NativeLibrary* nativeLibrary = NULL;\n-\tJ9JavaVM* javaVM = (J9JavaVM*)BFUjavaVM;\n-\tJ9InternalVMFunctions* vmFuncs = javaVM->internalVMFunctions;\n-\tJ9VMThread* currentThread = vmFuncs->currentVMThread(javaVM);\n+\tvoid *result = NULL;\n+\tJ9JavaVM *javaVM = (J9JavaVM*)BFUjavaVM;\n \n \tTrc_SC_LoadLibrary_Entry(libName);\n-\tvmFuncs->internalEnterVMFromJNI(currentThread);\n-\t/* registerBootstrapLibrary can't have VM access */\n-\tvmFuncs->internalReleaseVMAccess(currentThread);\n-\tif (vmFuncs->registerBootstrapLibrary(currentThread, libName, &nativeLibrary, FALSE) == J9NATIVELIB_LOAD_OK) {\n-\t\tresult = (void*)nativeLibrary->handle;\n-\t}\n-\tvmFuncs->internalAcquireVMAccess(currentThread);\n-\tvmFuncs->internalExitVMToJNI(currentThread);\n+\tif (NULL == javaVM->applicationClassLoader) {\n+\t\tJ9NativeLibrary *nativeLibrary = NULL;\n+\t\tJ9InternalVMFunctions *vmFuncs = javaVM->internalVMFunctions;\n+\t\tJ9VMThread *currentThread = vmFuncs->currentVMThread(javaVM);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86fadf52f033e38f4eb0f569160e7b63637ec1a4"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIyMDI1NA==", "bodyText": "Sure, will add assert.", "url": "https://github.com/eclipse-openj9/openj9/pull/10653#discussion_r492220254", "createdAt": "2020-09-21T17:14:55Z", "author": {"login": "JasonFengJ9"}, "path": "runtime/j9vm/jvm.c", "diffHunk": "@@ -3650,25 +3650,38 @@ JVM_LoadSystemLibrary(const char *libName)\n  */\n \n void* JNICALL\n-JVM_LoadLibrary(const char* libName)\n+JVM_LoadLibrary(const char *libName)\n {\n-\tvoid* result = NULL;\n-\tJ9NativeLibrary* nativeLibrary = NULL;\n-\tJ9JavaVM* javaVM = (J9JavaVM*)BFUjavaVM;\n-\tJ9InternalVMFunctions* vmFuncs = javaVM->internalVMFunctions;\n-\tJ9VMThread* currentThread = vmFuncs->currentVMThread(javaVM);\n+\tvoid *result = NULL;\n+\tJ9JavaVM *javaVM = (J9JavaVM*)BFUjavaVM;\n \n \tTrc_SC_LoadLibrary_Entry(libName);\n-\tvmFuncs->internalEnterVMFromJNI(currentThread);\n-\t/* registerBootstrapLibrary can't have VM access */\n-\tvmFuncs->internalReleaseVMAccess(currentThread);\n-\tif (vmFuncs->registerBootstrapLibrary(currentThread, libName, &nativeLibrary, FALSE) == J9NATIVELIB_LOAD_OK) {\n-\t\tresult = (void*)nativeLibrary->handle;\n-\t}\n-\tvmFuncs->internalAcquireVMAccess(currentThread);\n-\tvmFuncs->internalExitVMToJNI(currentThread);\n+\tif (NULL == javaVM->applicationClassLoader) {\n+\t\tJ9NativeLibrary *nativeLibrary = NULL;\n+\t\tJ9InternalVMFunctions *vmFuncs = javaVM->internalVMFunctions;\n+\t\tJ9VMThread *currentThread = vmFuncs->currentVMThread(javaVM);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIxMzM3OQ=="}, "originalCommit": {"oid": "86fadf52f033e38f4eb0f569160e7b63637ec1a4"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY4NDExNw==", "bodyText": "This PR is updated & passed sanity.functional & extended.functional at AIX/zLinux/Linux AMD.\n@gacholio could you please review?", "url": "https://github.com/eclipse-openj9/openj9/pull/10653#discussion_r493684117", "createdAt": "2020-09-23T15:25:11Z", "author": {"login": "JasonFengJ9"}, "path": "runtime/j9vm/jvm.c", "diffHunk": "@@ -3650,25 +3650,38 @@ JVM_LoadSystemLibrary(const char *libName)\n  */\n \n void* JNICALL\n-JVM_LoadLibrary(const char* libName)\n+JVM_LoadLibrary(const char *libName)\n {\n-\tvoid* result = NULL;\n-\tJ9NativeLibrary* nativeLibrary = NULL;\n-\tJ9JavaVM* javaVM = (J9JavaVM*)BFUjavaVM;\n-\tJ9InternalVMFunctions* vmFuncs = javaVM->internalVMFunctions;\n-\tJ9VMThread* currentThread = vmFuncs->currentVMThread(javaVM);\n+\tvoid *result = NULL;\n+\tJ9JavaVM *javaVM = (J9JavaVM*)BFUjavaVM;\n \n \tTrc_SC_LoadLibrary_Entry(libName);\n-\tvmFuncs->internalEnterVMFromJNI(currentThread);\n-\t/* registerBootstrapLibrary can't have VM access */\n-\tvmFuncs->internalReleaseVMAccess(currentThread);\n-\tif (vmFuncs->registerBootstrapLibrary(currentThread, libName, &nativeLibrary, FALSE) == J9NATIVELIB_LOAD_OK) {\n-\t\tresult = (void*)nativeLibrary->handle;\n-\t}\n-\tvmFuncs->internalAcquireVMAccess(currentThread);\n-\tvmFuncs->internalExitVMToJNI(currentThread);\n+\tif (NULL == javaVM->applicationClassLoader) {\n+\t\tJ9NativeLibrary *nativeLibrary = NULL;\n+\t\tJ9InternalVMFunctions *vmFuncs = javaVM->internalVMFunctions;\n+\t\tJ9VMThread *currentThread = vmFuncs->currentVMThread(javaVM);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIxMzM3OQ=="}, "originalCommit": {"oid": "86fadf52f033e38f4eb0f569160e7b63637ec1a4"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDIwNjcyOnYy", "diffSide": "RIGHT", "path": "runtime/j9vm/j7vmi.c", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNzoyOToxMFrOHW5HEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxODoyMzo1OFrOHW7GLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc2NjQxOQ==", "bodyText": "Does Mac define J9UNIX?", "url": "https://github.com/eclipse-openj9/openj9/pull/10653#discussion_r493766419", "createdAt": "2020-09-23T17:29:10Z", "author": {"login": "gacholio"}, "path": "runtime/j9vm/j7vmi.c", "diffHunk": "@@ -2312,12 +2312,27 @@ JVM_SuspendThread(jint arg0, jint arg1)\n }\n \n \n-\n-jobject JNICALL\n-JVM_UnloadLibrary(jint arg0)\n+/* NOTE this is required by JDK15+ jdk.internal.loader.NativeLibraries.unload().\n+ */\n+#if JAVA_SPEC_VERSION >= 15\n+void JNICALL JVM_UnloadLibrary(void *handle)\n+#else /* JAVA_SPEC_VERSION >= 15 */\n+jobject JNICALL JVM_UnloadLibrary(jint arg0)\n+#endif /* JAVA_SPEC_VERSION >= 15 */\n {\n+#if JAVA_SPEC_VERSION >= 15\n+\tTrc_SC_UnloadLibrary_Entry(handle);\n+#if defined(WIN32)\n+\tFreeLibrary((HMODULE)handle);\n+#elif defined(J9UNIX) || defined(J9ZOS390) /* defined(WIN32) */\n+\tdlclose(handle);\n+#else /* defined(WIN32) */\n+#error \"Please implement J7vmi.c:JVM_UnloadLibrary(void *handle)\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d77e725e32b07db436088b13141320eeac9b60b"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc5ODk1Ng==", "bodyText": "Yes, it does as following https://github.com/eclipse/openj9/blob/f49490ab44a652e72d6d8f96b38b6095ce0cc97d/runtime/oti/j9comp.h#L33-L35\nOSX is my primary test platform.", "url": "https://github.com/eclipse-openj9/openj9/pull/10653#discussion_r493798956", "createdAt": "2020-09-23T18:23:58Z", "author": {"login": "JasonFengJ9"}, "path": "runtime/j9vm/j7vmi.c", "diffHunk": "@@ -2312,12 +2312,27 @@ JVM_SuspendThread(jint arg0, jint arg1)\n }\n \n \n-\n-jobject JNICALL\n-JVM_UnloadLibrary(jint arg0)\n+/* NOTE this is required by JDK15+ jdk.internal.loader.NativeLibraries.unload().\n+ */\n+#if JAVA_SPEC_VERSION >= 15\n+void JNICALL JVM_UnloadLibrary(void *handle)\n+#else /* JAVA_SPEC_VERSION >= 15 */\n+jobject JNICALL JVM_UnloadLibrary(jint arg0)\n+#endif /* JAVA_SPEC_VERSION >= 15 */\n {\n+#if JAVA_SPEC_VERSION >= 15\n+\tTrc_SC_UnloadLibrary_Entry(handle);\n+#if defined(WIN32)\n+\tFreeLibrary((HMODULE)handle);\n+#elif defined(J9UNIX) || defined(J9ZOS390) /* defined(WIN32) */\n+\tdlclose(handle);\n+#else /* defined(WIN32) */\n+#error \"Please implement J7vmi.c:JVM_UnloadLibrary(void *handle)\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc2NjQxOQ=="}, "originalCommit": {"oid": "5d77e725e32b07db436088b13141320eeac9b60b"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDIyMDUxOnYy", "diffSide": "RIGHT", "path": "runtime/vm/bindnatv.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNzozMjo0N1rOHW5PtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxODoyNDowN1rOHW7GgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc2ODYyOA==", "bodyText": "Please move the braces out of the ifdef (similarly below).", "url": "https://github.com/eclipse-openj9/openj9/pull/10653#discussion_r493768628", "createdAt": "2020-09-23T17:32:47Z", "author": {"login": "gacholio"}, "path": "runtime/vm/bindnatv.cpp", "diffHunk": "@@ -957,17 +963,33 @@ bindNative(J9VMThread *currentThread, J9Method *nativeMethod, char * longJNI, ch\n \t\t++argCount;\n \t}\n \n-\t/* Search each shared library in the class loader for a matching native */\n-\tnativeLibrary = classLoader->librariesHead;\n-\twhile (nativeLibrary != NULL) {\n-\t\tUDATA rc = lookupNativeAddress(currentThread, nativeMethod, nativeLibrary, longJNI, shortJNI, argCount, bindJNINative);\n-\t\tif (J9_NATIVE_METHOD_IS_BOUND(nativeMethod)) {\n-\t\t\treturn J9_NATIVE_METHOD_BIND_SUCCESS;\n-\t\t} else if (J9_NATIVE_METHOD_BIND_OUT_OF_MEMORY == rc) {\n-\t\t\treturn rc;\n+#if JAVA_SPEC_VERSION >= 15\n+\tif (classLoader == vm->systemClassLoader) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d77e725e32b07db436088b13141320eeac9b60b"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc5OTA0MQ==", "bodyText": "Fixed.", "url": "https://github.com/eclipse-openj9/openj9/pull/10653#discussion_r493799041", "createdAt": "2020-09-23T18:24:07Z", "author": {"login": "JasonFengJ9"}, "path": "runtime/vm/bindnatv.cpp", "diffHunk": "@@ -957,17 +963,33 @@ bindNative(J9VMThread *currentThread, J9Method *nativeMethod, char * longJNI, ch\n \t\t++argCount;\n \t}\n \n-\t/* Search each shared library in the class loader for a matching native */\n-\tnativeLibrary = classLoader->librariesHead;\n-\twhile (nativeLibrary != NULL) {\n-\t\tUDATA rc = lookupNativeAddress(currentThread, nativeMethod, nativeLibrary, longJNI, shortJNI, argCount, bindJNINative);\n-\t\tif (J9_NATIVE_METHOD_IS_BOUND(nativeMethod)) {\n-\t\t\treturn J9_NATIVE_METHOD_BIND_SUCCESS;\n-\t\t} else if (J9_NATIVE_METHOD_BIND_OUT_OF_MEMORY == rc) {\n-\t\t\treturn rc;\n+#if JAVA_SPEC_VERSION >= 15\n+\tif (classLoader == vm->systemClassLoader) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc2ODYyOA=="}, "originalCommit": {"oid": "5d77e725e32b07db436088b13141320eeac9b60b"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDIyOTA3OnYy", "diffSide": "RIGHT", "path": "runtime/vm/vmbootlib.c", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNzozNToxOVrOHW5VaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxODoyNDoxOFrOHW7G4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc3MDA4OQ==", "bodyText": "Invalid comment format for a C file.", "url": "https://github.com/eclipse-openj9/openj9/pull/10653#discussion_r493770089", "createdAt": "2020-09-23T17:35:19Z", "author": {"login": "gacholio"}, "path": "runtime/vm/vmbootlib.c", "diffHunk": "@@ -703,15 +701,18 @@ classLoaderRegisterLibrary(void *voidVMThread, J9ClassLoader *classLoader, const\n #if defined(J9VM_INTERP_ATOMIC_FREE_JNI)\n \t\t\texitVMToJNI(vmThread);\n #endif /* J9VM_INTERP_ATOMIC_FREE_JNI */\n+#if JAVA_SPEC_VERSION < 15\n+// NativeLibraries is going to call JNI_Onload depending on JNI flag", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d77e725e32b07db436088b13141320eeac9b60b"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc5OTEzNw==", "bodyText": "Fixed.", "url": "https://github.com/eclipse-openj9/openj9/pull/10653#discussion_r493799137", "createdAt": "2020-09-23T18:24:18Z", "author": {"login": "JasonFengJ9"}, "path": "runtime/vm/vmbootlib.c", "diffHunk": "@@ -703,15 +701,18 @@ classLoaderRegisterLibrary(void *voidVMThread, J9ClassLoader *classLoader, const\n #if defined(J9VM_INTERP_ATOMIC_FREE_JNI)\n \t\t\texitVMToJNI(vmThread);\n #endif /* J9VM_INTERP_ATOMIC_FREE_JNI */\n+#if JAVA_SPEC_VERSION < 15\n+// NativeLibraries is going to call JNI_Onload depending on JNI flag", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc3MDA4OQ=="}, "originalCommit": {"oid": "5d77e725e32b07db436088b13141320eeac9b60b"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDIzNTQ5OnYy", "diffSide": "RIGHT", "path": "jcl/src/java.base/share/classes/java/lang/ClassLoader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNzozNzowM1rOHW5ZXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxODoyNDo0M1rOHW7H1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc3MTEwMg==", "bodyText": "Why not NLS?", "url": "https://github.com/eclipse-openj9/openj9/pull/10653#discussion_r493771102", "createdAt": "2020-09-23T17:37:03Z", "author": {"login": "gacholio"}, "path": "jcl/src/java.base/share/classes/java/lang/ClassLoader.java", "diffHunk": "@@ -1982,10 +1999,49 @@ static void loadLibrary(Class<?> caller, String name, boolean fullPath) {\n \n /*[IF Java15]*/\n static void loadLibrary(Class<?> caller, File file) {\n-\tloadLibraryWithPath(file.getAbsolutePath(), caller.getClassLoaderImpl(), null);\n+\tClassLoader loader = (caller == null) ? null : caller.getClassLoader();\n+\tNativeLibraries nls = (loader == null) ? bootstrapClassLoader.nativelibs : loader.nativelibs;\n+\tNativeLibrary nl = nls.loadLibrary(caller, file);\n+\tif (nl == null) {\n+\t\tthrow new UnsatisfiedLinkError(\"Can't load \" + file); //$NON-NLS-1$", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d77e725e32b07db436088b13141320eeac9b60b"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc5OTM4Mg==", "bodyText": "Was lured away by https://github.com/eclipse/openj9/blob/f49490ab44a652e72d6d8f96b38b6095ce0cc97d/jcl/src/java.base/share/classes/java/lang/ClassLoader.java#L1970\nFixed it as well.\nPlease have another look.", "url": "https://github.com/eclipse-openj9/openj9/pull/10653#discussion_r493799382", "createdAt": "2020-09-23T18:24:43Z", "author": {"login": "JasonFengJ9"}, "path": "jcl/src/java.base/share/classes/java/lang/ClassLoader.java", "diffHunk": "@@ -1982,10 +1999,49 @@ static void loadLibrary(Class<?> caller, String name, boolean fullPath) {\n \n /*[IF Java15]*/\n static void loadLibrary(Class<?> caller, File file) {\n-\tloadLibraryWithPath(file.getAbsolutePath(), caller.getClassLoaderImpl(), null);\n+\tClassLoader loader = (caller == null) ? null : caller.getClassLoader();\n+\tNativeLibraries nls = (loader == null) ? bootstrapClassLoader.nativelibs : loader.nativelibs;\n+\tNativeLibrary nl = nls.loadLibrary(caller, file);\n+\tif (nl == null) {\n+\t\tthrow new UnsatisfiedLinkError(\"Can't load \" + file); //$NON-NLS-1$", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc3MTEwMg=="}, "originalCommit": {"oid": "5d77e725e32b07db436088b13141320eeac9b60b"}, "originalPosition": 63}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4640, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}