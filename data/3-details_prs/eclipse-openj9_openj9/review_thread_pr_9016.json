{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1MTQ5NDU0", "number": 9016, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNDo0NTo1NFrODxQ-Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNDo0NTo1NFrODxQ-Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyOTg0ODQ2OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/runtime/MethodMetaData.c", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNDo0NTo1NFrOGEoyPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNToxODozMlrOGEp21g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUxNTcxMQ==", "bodyText": "Does JITINLINE == VMINLINE? If so I don't see the value of having this duplicate value. We should just use VMINLINE to be consistent.", "url": "https://github.com/eclipse-openj9/openj9/pull/9016#discussion_r407515711", "createdAt": "2020-04-13T14:45:54Z", "author": {"login": "fjeremic"}, "path": "runtime/compiler/runtime/MethodMetaData.c", "diffHunk": "@@ -30,10 +30,62 @@\n #include \"rommeth.h\"\n #include \"env/jittypes.h\"\n \n+#if defined(DEBUG)\n+#define JITINLINE\n+#else\n+#if defined(_MSC_VER)\n+#define JITINLINE __forceinline\n+#elif (((__GNUC__ > 3) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 1)) || defined(__clang__)) && !defined(J9VM_GC_REALTIME)\n+#define JITINLINE inline __attribute((always_inline))\n+#else\n+#define JITINLINE __inline\n+#endif\n+#endif", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b53ef5ddc63b9766f2b4c604df6308a73a09383"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUzMTczOQ==", "bodyText": "Does JITINLINE == VMINLINE?\n\nThey are close but not identical.\n\nWe should just use VMINLINE to be consistent.\n\nYep, I was going for a more minimal PR, but am more than happy to tidy up. Before we switch to VMINLINE, there is one strange detail here that I would like to understand. In this condition:\n#elif (((__GNUC__ > 3) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 1)) || defined(__clang__)) && !defined(J9VM_GC_REALTIME)\nWhy would it say && !defined(J9VM_GC_REALTIME)? It seems important, but I don't see why it's here. J9VM_GC_REALTIME is always defined--so effectively, JITINLINE will always be __inline. Meanwhile, VMINLINE does something which makes more sense.\nI'm going to try switching to VMINLINE and see if it everything works (I expect it will).", "url": "https://github.com/eclipse-openj9/openj9/pull/9016#discussion_r407531739", "createdAt": "2020-04-13T15:15:48Z", "author": {"login": "rwy0717"}, "path": "runtime/compiler/runtime/MethodMetaData.c", "diffHunk": "@@ -30,10 +30,62 @@\n #include \"rommeth.h\"\n #include \"env/jittypes.h\"\n \n+#if defined(DEBUG)\n+#define JITINLINE\n+#else\n+#if defined(_MSC_VER)\n+#define JITINLINE __forceinline\n+#elif (((__GNUC__ > 3) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 1)) || defined(__clang__)) && !defined(J9VM_GC_REALTIME)\n+#define JITINLINE inline __attribute((always_inline))\n+#else\n+#define JITINLINE __inline\n+#endif\n+#endif", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUxNTcxMQ=="}, "originalCommit": {"oid": "0b53ef5ddc63b9766f2b4c604df6308a73a09383"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUzMzI3MA==", "bodyText": "Probably some historical artifact. Yeah I'd say if VMINLINE works after your tests we just switch to that and keep things simple. Thanks!", "url": "https://github.com/eclipse-openj9/openj9/pull/9016#discussion_r407533270", "createdAt": "2020-04-13T15:18:32Z", "author": {"login": "fjeremic"}, "path": "runtime/compiler/runtime/MethodMetaData.c", "diffHunk": "@@ -30,10 +30,62 @@\n #include \"rommeth.h\"\n #include \"env/jittypes.h\"\n \n+#if defined(DEBUG)\n+#define JITINLINE\n+#else\n+#if defined(_MSC_VER)\n+#define JITINLINE __forceinline\n+#elif (((__GNUC__ > 3) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 1)) || defined(__clang__)) && !defined(J9VM_GC_REALTIME)\n+#define JITINLINE inline __attribute((always_inline))\n+#else\n+#define JITINLINE __inline\n+#endif\n+#endif", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUxNTcxMQ=="}, "originalCommit": {"oid": "0b53ef5ddc63b9766f2b4c604df6308a73a09383"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 445, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}