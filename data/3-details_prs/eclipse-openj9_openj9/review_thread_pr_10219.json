{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU0OTMwNjIy", "number": 10219, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMzoxNDozMFrOETE-XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMzoyMDoyNVrOETFCYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NDM5OTAxOnYy", "diffSide": "LEFT", "path": "runtime/compiler/aarch64/codegen/J9TreeEvaluator.cpp", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMzoxNDozMFrOG4nBFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMzoyMDo1MlrOG4nHhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAxMjY5Mw==", "bodyText": "Is ARM64HeapAllocSnippet used anywhere else?\nIf not, please remove its code from J9ARM64Snippet.hpp/cpp.  You can do it in a separate PR.", "url": "https://github.com/eclipse-openj9/openj9/pull/10219#discussion_r462012693", "createdAt": "2020-07-29T03:14:30Z", "author": {"login": "knn-k"}, "path": "runtime/compiler/aarch64/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -1368,9 +1369,10 @@ J9::ARM64::TreeEvaluator::VMnewEvaluator(TR::Node *node, TR::CodeGenerator *cg)\n    // 5. Allocate object/array on heap\n    genHeapAlloc(node, cg, isVariableLength, allocateSize, elementSize, resultReg, lengthReg, tempReg1, tempReg2, tempReg3, conditions, callLabel);\n \n-   // 6. Setup HeapAllocSnippet for slowpath\n-   TR::Snippet *snippet = new (cg->trHeapMemory()) TR::ARM64HeapAllocSnippet(cg, node, callLabel, node->getSymbolReference(), doneLabel);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e812f8e0f86a4dca963a1632e83468cf4cfdb0f"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAxNDM0Mw==", "bodyText": "The heap alloc snippet is not used anywhere. I will remove it in a separate PR.", "url": "https://github.com/eclipse-openj9/openj9/pull/10219#discussion_r462014343", "createdAt": "2020-07-29T03:20:52Z", "author": {"login": "Akira1Saitoh"}, "path": "runtime/compiler/aarch64/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -1368,9 +1369,10 @@ J9::ARM64::TreeEvaluator::VMnewEvaluator(TR::Node *node, TR::CodeGenerator *cg)\n    // 5. Allocate object/array on heap\n    genHeapAlloc(node, cg, isVariableLength, allocateSize, elementSize, resultReg, lengthReg, tempReg1, tempReg2, tempReg3, conditions, callLabel);\n \n-   // 6. Setup HeapAllocSnippet for slowpath\n-   TR::Snippet *snippet = new (cg->trHeapMemory()) TR::ARM64HeapAllocSnippet(cg, node, callLabel, node->getSymbolReference(), doneLabel);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAxMjY5Mw=="}, "originalCommit": {"oid": "6e812f8e0f86a4dca963a1632e83468cf4cfdb0f"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NDQwOTI5OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/aarch64/codegen/J9TreeEvaluator.cpp", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMzoyMDoyNVrOG4nHCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNjoxMTowN1rOG4p7jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAxNDIxNg==", "bodyText": "You use objReg as the target register of the OOL section here.\nWhat is the reason of calling generateMovInstruction(cg, node, objReg, resultReg, true); later?", "url": "https://github.com/eclipse-openj9/openj9/pull/10219#discussion_r462014216", "createdAt": "2020-07-29T03:20:25Z", "author": {"login": "knn-k"}, "path": "runtime/compiler/aarch64/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -1368,9 +1369,10 @@ J9::ARM64::TreeEvaluator::VMnewEvaluator(TR::Node *node, TR::CodeGenerator *cg)\n    // 5. Allocate object/array on heap\n    genHeapAlloc(node, cg, isVariableLength, allocateSize, elementSize, resultReg, lengthReg, tempReg1, tempReg2, tempReg3, conditions, callLabel);\n \n-   // 6. Setup HeapAllocSnippet for slowpath\n-   TR::Snippet *snippet = new (cg->trHeapMemory()) TR::ARM64HeapAllocSnippet(cg, node, callLabel, node->getSymbolReference(), doneLabel);\n-   cg->addSnippet(snippet);\n+   // 6. Setup OOL Section for slowpath\n+   TR::Register *objReg = cg->allocateCollectedReferenceRegister();\n+   TR_ARM64OutOfLineCodeSection *outlinedHelperCall = new (cg->trHeapMemory()) TR_ARM64OutOfLineCodeSection(node, TR::acall, objReg, callLabel, callReturnLabel, cg);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e812f8e0f86a4dca963a1632e83468cf4cfdb0f"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAyOTQ4Nw==", "bodyText": "The allocated object is stored in objReg, so objReg is a collected reference register. resultReg is a temporary register that holds the address of the object, but it must not be a collected reference register. In our instruction stream, resultReg is already used before branching into the OOL section. If it is a collected reference register, it will be added to the GC map at the branch instruction to the helper in the OOL section. At this point, the value in resultReg is not a valid object, so resultReg must not be added to the GC map.\nresultReg is copied to objReg after all checks whether the slow path is taken are done.", "url": "https://github.com/eclipse-openj9/openj9/pull/10219#discussion_r462029487", "createdAt": "2020-07-29T04:23:03Z", "author": {"login": "Akira1Saitoh"}, "path": "runtime/compiler/aarch64/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -1368,9 +1369,10 @@ J9::ARM64::TreeEvaluator::VMnewEvaluator(TR::Node *node, TR::CodeGenerator *cg)\n    // 5. Allocate object/array on heap\n    genHeapAlloc(node, cg, isVariableLength, allocateSize, elementSize, resultReg, lengthReg, tempReg1, tempReg2, tempReg3, conditions, callLabel);\n \n-   // 6. Setup HeapAllocSnippet for slowpath\n-   TR::Snippet *snippet = new (cg->trHeapMemory()) TR::ARM64HeapAllocSnippet(cg, node, callLabel, node->getSymbolReference(), doneLabel);\n-   cg->addSnippet(snippet);\n+   // 6. Setup OOL Section for slowpath\n+   TR::Register *objReg = cg->allocateCollectedReferenceRegister();\n+   TR_ARM64OutOfLineCodeSection *outlinedHelperCall = new (cg->trHeapMemory()) TR_ARM64OutOfLineCodeSection(node, TR::acall, objReg, callLabel, callReturnLabel, cg);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAxNDIxNg=="}, "originalCommit": {"oid": "6e812f8e0f86a4dca963a1632e83468cf4cfdb0f"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA2MDQyOA==", "bodyText": "Thank you for explaining.  I understand.", "url": "https://github.com/eclipse-openj9/openj9/pull/10219#discussion_r462060428", "createdAt": "2020-07-29T06:11:07Z", "author": {"login": "knn-k"}, "path": "runtime/compiler/aarch64/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -1368,9 +1369,10 @@ J9::ARM64::TreeEvaluator::VMnewEvaluator(TR::Node *node, TR::CodeGenerator *cg)\n    // 5. Allocate object/array on heap\n    genHeapAlloc(node, cg, isVariableLength, allocateSize, elementSize, resultReg, lengthReg, tempReg1, tempReg2, tempReg3, conditions, callLabel);\n \n-   // 6. Setup HeapAllocSnippet for slowpath\n-   TR::Snippet *snippet = new (cg->trHeapMemory()) TR::ARM64HeapAllocSnippet(cg, node, callLabel, node->getSymbolReference(), doneLabel);\n-   cg->addSnippet(snippet);\n+   // 6. Setup OOL Section for slowpath\n+   TR::Register *objReg = cg->allocateCollectedReferenceRegister();\n+   TR_ARM64OutOfLineCodeSection *outlinedHelperCall = new (cg->trHeapMemory()) TR_ARM64OutOfLineCodeSection(node, TR::acall, objReg, callLabel, callReturnLabel, cg);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAxNDIxNg=="}, "originalCommit": {"oid": "6e812f8e0f86a4dca963a1632e83468cf4cfdb0f"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4794, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}