{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyNTA5MDYz", "number": 10688, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNToxOTozMFrOEnGJiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxODo0MTo1M1rOEnLGNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDMwNjY1OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/z/codegen/J9TreeEvaluator.cpp", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNToxOTozMFrOHXgErw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMTozMzoyNVrOHXtZqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQwNDc4Mw==", "bodyText": "Why are we hitting this path for JITServer at all? Shouldn't needClassAndMethodPointerRelocations return true for JITServer?", "url": "https://github.com/eclipse-openj9/openj9/pull/10688#discussion_r494404783", "createdAt": "2020-09-24T15:19:30Z", "author": {"login": "fjeremic"}, "path": "runtime/compiler/z/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -4002,7 +4002,7 @@ J9::Z::TreeEvaluator::generateTestAndReportFieldWatchInstructions(TR::CodeGenera\n       if (isResolved)\n          {\n          fieldClassReg = cg->allocateRegister();\n-         if (!(cg->needClassAndMethodPointerRelocations()))\n+         if (!(cg->needClassAndMethodPointerRelocations()) && cg->canUseRelativeLongInstructions(reinterpret_cast<int64_t>((static_cast<TR::J9WatchedStaticFieldSnippet *>(dataSnippet)->getFieldClass()))))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14bb95fb8c599ff244ffcfc30884fcc0d5853b05"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQxMzUxNg==", "bodyText": "It returns false for regular remote compilations (i.e. when we have a TR_J9ServerVM). We usually have that information from the client. We just can't use the relative path here. I figured taking the AOT path here for JITServer also made sense since this likely won't have much impact on field watch performance. I think these queries sufficiently describe why we can't take the forward path of this branch for regular remote compilations (Also, I didn't want to add another front-end query).", "url": "https://github.com/eclipse-openj9/openj9/pull/10688#discussion_r494413516", "createdAt": "2020-09-24T15:30:56Z", "author": {"login": "dchopra001"}, "path": "runtime/compiler/z/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -4002,7 +4002,7 @@ J9::Z::TreeEvaluator::generateTestAndReportFieldWatchInstructions(TR::CodeGenera\n       if (isResolved)\n          {\n          fieldClassReg = cg->allocateRegister();\n-         if (!(cg->needClassAndMethodPointerRelocations()))\n+         if (!(cg->needClassAndMethodPointerRelocations()) && cg->canUseRelativeLongInstructions(reinterpret_cast<int64_t>((static_cast<TR::J9WatchedStaticFieldSnippet *>(dataSnippet)->getFieldClass()))))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQwNDc4Mw=="}, "originalCommit": {"oid": "14bb95fb8c599ff244ffcfc30884fcc0d5853b05"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDYxNTMwMQ==", "bodyText": "Ok, thanks for explaining. Could we make a small cleanup change while in the area?\n         fieldClassReg = cg->allocateRegister();\n         J9Class *fieldClass = static_cast<TR::J9WatchedStaticFieldSnippet *>(dataSnippet)->getFieldClass();\n         if (!cg->needClassAndMethodPointerRelocations() && cg->canUseRelativeLongInstructions(reinterpret_cast<int64_t>(fieldClass)))\n            {\n            // For non-AOT (JIT and JITServer) compiles ...\n            TR_ASSERT_FATAL(...\n            }", "url": "https://github.com/eclipse-openj9/openj9/pull/10688#discussion_r494615301", "createdAt": "2020-09-24T21:16:14Z", "author": {"login": "fjeremic"}, "path": "runtime/compiler/z/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -4002,7 +4002,7 @@ J9::Z::TreeEvaluator::generateTestAndReportFieldWatchInstructions(TR::CodeGenera\n       if (isResolved)\n          {\n          fieldClassReg = cg->allocateRegister();\n-         if (!(cg->needClassAndMethodPointerRelocations()))\n+         if (!(cg->needClassAndMethodPointerRelocations()) && cg->canUseRelativeLongInstructions(reinterpret_cast<int64_t>((static_cast<TR::J9WatchedStaticFieldSnippet *>(dataSnippet)->getFieldClass()))))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQwNDc4Mw=="}, "originalCommit": {"oid": "14bb95fb8c599ff244ffcfc30884fcc0d5853b05"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDYyMzE0Ng==", "bodyText": "Done here: 27f02c3", "url": "https://github.com/eclipse-openj9/openj9/pull/10688#discussion_r494623146", "createdAt": "2020-09-24T21:33:25Z", "author": {"login": "dchopra001"}, "path": "runtime/compiler/z/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -4002,7 +4002,7 @@ J9::Z::TreeEvaluator::generateTestAndReportFieldWatchInstructions(TR::CodeGenera\n       if (isResolved)\n          {\n          fieldClassReg = cg->allocateRegister();\n-         if (!(cg->needClassAndMethodPointerRelocations()))\n+         if (!(cg->needClassAndMethodPointerRelocations()) && cg->canUseRelativeLongInstructions(reinterpret_cast<int64_t>((static_cast<TR::J9WatchedStaticFieldSnippet *>(dataSnippet)->getFieldClass()))))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQwNDc4Mw=="}, "originalCommit": {"oid": "14bb95fb8c599ff244ffcfc30884fcc0d5853b05"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NTExNzMyOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/env/VMJ9Server.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxODo0MTo1M1rOHXoCYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMDozOTowNFrOHXrzCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUzNTI2NQ==", "bodyText": "Looking at the code I see that in the TR_J9SharedCacheVM implementation of getSystemClassFromClassName() we call TR_J9VM::getSystemClassFromClassName() with the default value of the isVettedForAOT which is false, but actually it doesn't matter because TR_J9VM::getSystemClassFromClassName() doesn't even look at isVettedForAOT.\nIn contrast the TR_J9Server implementation sends a message to the client with isVettedForAOT and the client executes the corresponding query using an AOT frontend for which isVettedForAOT may matter.\nSo the problem is that JITServer executes a TR_J9VM query which is replied by the client with an answer from a TR_J9SharedCacheVM frontend. Since the MessageType::VM_getSystemClassFromClassName is only sent by the JITServer from TR_J9ServerVM::getSystemClassFromClassName (i.e. the non-AOT frontend) I think the right solution is for the client to create a non-AOT frontend (TR_J9VM) to find the answer to the query.\nHere:\n      case MessageType::VM_getSystemClassFromClassName:\n         {\n         auto recv = client->getRecvData<std::string, bool>();\n         const std::string name = std::get<0>(recv);\n         bool isVettedForAOT = std::get<1>(recv);\n         client->write(response, fe->getSystemClassFromClassName(name.c_str(), name.length(), isVettedForAOT));\n         }\n         break;", "url": "https://github.com/eclipse-openj9/openj9/pull/10688#discussion_r494535265", "createdAt": "2020-09-24T18:41:53Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/env/VMJ9Server.cpp", "diffHunk": "@@ -2043,7 +2043,7 @@ TR_OpaqueClassBlock *\n TR_J9SharedCacheServerVM::getSystemClassFromClassName(const char * name, int32_t length, bool isVettedForAOT)\n    {\n    TR::Compilation *comp = _compInfoPT->getCompilation();\n-   TR_OpaqueClassBlock *classPointer = TR_J9ServerVM::getSystemClassFromClassName(name, length);\n+   TR_OpaqueClassBlock *classPointer = TR_J9ServerVM::getSystemClassFromClassName(name, length, isVettedForAOT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14bb95fb8c599ff244ffcfc30884fcc0d5853b05"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU5Njg3Mw==", "bodyText": "Changed this to call non-AOT front end now: 5608aa7", "url": "https://github.com/eclipse-openj9/openj9/pull/10688#discussion_r494596873", "createdAt": "2020-09-24T20:39:04Z", "author": {"login": "dchopra001"}, "path": "runtime/compiler/env/VMJ9Server.cpp", "diffHunk": "@@ -2043,7 +2043,7 @@ TR_OpaqueClassBlock *\n TR_J9SharedCacheServerVM::getSystemClassFromClassName(const char * name, int32_t length, bool isVettedForAOT)\n    {\n    TR::Compilation *comp = _compInfoPT->getCompilation();\n-   TR_OpaqueClassBlock *classPointer = TR_J9ServerVM::getSystemClassFromClassName(name, length);\n+   TR_OpaqueClassBlock *classPointer = TR_J9ServerVM::getSystemClassFromClassName(name, length, isVettedForAOT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUzNTI2NQ=="}, "originalCommit": {"oid": "14bb95fb8c599ff244ffcfc30884fcc0d5853b05"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1220, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}