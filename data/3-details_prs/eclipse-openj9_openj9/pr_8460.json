{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5MjA3MzU0", "number": 8460, "title": "Support for CP String patching", "bodyText": "New J9ClassPatchMap structure to store patching info\nUpdate defineClassCommon code to accept J9ClassPatchMap\nPatch RAM constantpool before returing class object\n\nSigned-off-by: Jack Lu Jack.S.Lu@ibm.com", "createdAt": "2020-01-30T17:51:20Z", "url": "https://github.com/eclipse-openj9/openj9/pull/8460", "merged": true, "mergeCommit": {"oid": "71b7b69d2d68d6a56644a59eacc2ef836c668858"}, "closed": true, "closedAt": "2020-02-08T18:47:40Z", "author": {"login": "fengxue-IS"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb_fZmxgFqTM1MTA2OTc4NQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcCFsrBgBqjMwMTkwNTk3OTc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxMDY5Nzg1", "url": "https://github.com/eclipse-openj9/openj9/pull/8460#pullrequestreview-351069785", "createdAt": "2020-01-30T19:07:05Z", "commit": {"oid": "dad92bb98e2554102d78fc4d8e7b430635a1553a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxOTowNzowNlrOFj2gUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxOTowNzowNlrOFj2gUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzEzNzQ4OA==", "bodyText": "compilation error:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            }\n          \n          \n            \n            } J9ClassPatchMap;", "url": "https://github.com/eclipse-openj9/openj9/pull/8460#discussion_r373137488", "createdAt": "2020-01-30T19:07:06Z", "author": {"login": "babsingh"}, "path": "runtime/oti/j9nonbuilder.h", "diffHunk": "@@ -1957,6 +1958,11 @@ typedef struct J9ClassPathEntry {\n #endif\n } J9ClassPathEntry;\n \n+typedef struct J9ClassPatchMap {\n+\tU_16 size;\n+\tU_16* indexMap;\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dad92bb98e2554102d78fc4d8e7b430635a1553a"}, "originalPosition": 15}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "863ad68c4de77936139883677bf0d3d079660776", "author": {"user": {"login": "fengxue-IS", "name": "Jack Lu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/863ad68c4de77936139883677bf0d3d079660776", "committedDate": "2020-01-30T20:10:13Z", "message": "fix 2\n\nSigned-off-by: Jack Lu <Jack.S.Lu@ibm.com>"}, "afterCommit": {"oid": "1e4f06080dbc668570b8a4380fb557dadbb51f30", "author": {"user": {"login": "fengxue-IS", "name": "Jack Lu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/1e4f06080dbc668570b8a4380fb557dadbb51f30", "committedDate": "2020-01-30T20:17:38Z", "message": "Initial commit for CP String patching\n\nSigned-off-by: Jack Lu <Jack.S.Lu@ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxMTM0NzY0", "url": "https://github.com/eclipse-openj9/openj9/pull/8460#pullrequestreview-351134764", "createdAt": "2020-01-30T20:54:57Z", "commit": {"oid": "1e4f06080dbc668570b8a4380fb557dadbb51f30"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMDo1NDo1N1rOFj5m5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMDo1NzoyMlrOFj5rqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE4ODMyNw==", "bodyText": "copyright update not required; file hasn't been edited.", "url": "https://github.com/eclipse-openj9/openj9/pull/8460#discussion_r373188327", "createdAt": "2020-01-30T20:54:57Z", "author": {"login": "babsingh"}, "path": "runtime/bcutil/defineclass.c", "diffHunk": "@@ -1,5 +1,5 @@\n /*******************************************************************************\n- * Copyright (c) 1991, 2019 IBM Corp. and others\n+ * Copyright (c) 1991, 2020 IBM Corp. and others", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e4f06080dbc668570b8a4380fb557dadbb51f30"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE4ODY5Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tif (patchMap != NULL && patchMap->size != 0) {\n          \n          \n            \n            \tif ((patchMap != NULL) && (patchMap->size != 0)) {", "url": "https://github.com/eclipse-openj9/openj9/pull/8460#discussion_r373188697", "createdAt": "2020-01-30T20:55:47Z", "author": {"login": "babsingh"}, "path": "runtime/jcl/common/jcldefine.c", "diffHunk": "@@ -70,6 +70,10 @@ defineClassCommon(JNIEnv *env, jobject classLoaderObject,\n \t\tgoto done;\n \t}\n \n+\tif (patchMap != NULL && patchMap->size != 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e4f06080dbc668570b8a4380fb557dadbb51f30"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE4ODk0Nw==", "bodyText": "may be use a macro for constant 128.", "url": "https://github.com/eclipse-openj9/openj9/pull/8460#discussion_r373188947", "createdAt": "2020-01-30T20:56:20Z", "author": {"login": "babsingh"}, "path": "runtime/jcl/common/sun_misc_Unsafe.cpp", "diffHunk": "@@ -96,19 +93,57 @@ Java_sun_misc_Unsafe_defineAnonymousClass(JNIEnv *env, jobject receiver, jclass\n \t\thostClassLoader = vm->systemClassLoader->classLoaderObject;\n \t}\n \tjobject hostClassLoaderLocalRef = vmFuncs->j9jni_createLocalRef(env, hostClassLoader);\n+\n+\tJ9ClassPatchMap cpPatchMap = {0, NULL};\n+\tj9array_t patchArray = NULL;\n+\tPORT_ACCESS_FROM_ENV(env);\n+\n+\tU_16 indexMap[128];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e4f06080dbc668570b8a4380fb557dadbb51f30"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE4OTIzMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tcpPatchMap.indexMap = (U_16*)j9mem_allocate_memory(cpPatchMap.size * sizeof(U_16), J9MEM_CATEGORY_VM);\n          \n          \n            \n            \t\t\tcpPatchMap.indexMap = (U_16 *)j9mem_allocate_memory(cpPatchMap.size * sizeof(U_16), J9MEM_CATEGORY_VM);", "url": "https://github.com/eclipse-openj9/openj9/pull/8460#discussion_r373189230", "createdAt": "2020-01-30T20:56:47Z", "author": {"login": "babsingh"}, "path": "runtime/jcl/common/sun_misc_Unsafe.cpp", "diffHunk": "@@ -96,19 +93,57 @@ Java_sun_misc_Unsafe_defineAnonymousClass(JNIEnv *env, jobject receiver, jclass\n \t\thostClassLoader = vm->systemClassLoader->classLoaderObject;\n \t}\n \tjobject hostClassLoaderLocalRef = vmFuncs->j9jni_createLocalRef(env, hostClassLoader);\n+\n+\tJ9ClassPatchMap cpPatchMap = {0, NULL};\n+\tj9array_t patchArray = NULL;\n+\tPORT_ACCESS_FROM_ENV(env);\n+\n+\tU_16 indexMap[128];\n+\tif (constPatches != NULL) {\n+\t\tpatchArray = (j9array_t)J9_JNI_UNWRAP_REFERENCE(constPatches);\n+\t\tcpPatchMap.size = (U_16)J9INDEXABLEOBJECT_SIZE(currentThread, patchArray);\n+\t\tif (cpPatchMap.size <= 128) {\n+\t\t\tcpPatchMap.indexMap = indexMap;\n+\t\t} else {\n+\t\t\tcpPatchMap.indexMap = (U_16*)j9mem_allocate_memory(cpPatchMap.size * sizeof(U_16), J9MEM_CATEGORY_VM);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e4f06080dbc668570b8a4380fb557dadbb51f30"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE4OTM4NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tJ9Class * clazz = J9VM_J9CLASS_FROM_HEAPCLASS(currentThread, J9_JNI_UNWRAP_REFERENCE(anonClass));\n          \n          \n            \n            \t\tJ9Class *clazz = J9VM_J9CLASS_FROM_HEAPCLASS(currentThread, J9_JNI_UNWRAP_REFERENCE(anonClass));", "url": "https://github.com/eclipse-openj9/openj9/pull/8460#discussion_r373189385", "createdAt": "2020-01-30T20:57:02Z", "author": {"login": "babsingh"}, "path": "runtime/jcl/common/sun_misc_Unsafe.cpp", "diffHunk": "@@ -96,19 +93,57 @@ Java_sun_misc_Unsafe_defineAnonymousClass(JNIEnv *env, jobject receiver, jclass\n \t\thostClassLoader = vm->systemClassLoader->classLoaderObject;\n \t}\n \tjobject hostClassLoaderLocalRef = vmFuncs->j9jni_createLocalRef(env, hostClassLoader);\n+\n+\tJ9ClassPatchMap cpPatchMap = {0, NULL};\n+\tj9array_t patchArray = NULL;\n+\tPORT_ACCESS_FROM_ENV(env);\n+\n+\tU_16 indexMap[128];\n+\tif (constPatches != NULL) {\n+\t\tpatchArray = (j9array_t)J9_JNI_UNWRAP_REFERENCE(constPatches);\n+\t\tcpPatchMap.size = (U_16)J9INDEXABLEOBJECT_SIZE(currentThread, patchArray);\n+\t\tif (cpPatchMap.size <= 128) {\n+\t\t\tcpPatchMap.indexMap = indexMap;\n+\t\t} else {\n+\t\t\tcpPatchMap.indexMap = (U_16*)j9mem_allocate_memory(cpPatchMap.size * sizeof(U_16), J9MEM_CATEGORY_VM);\n+\t\t}\n+\t}\n+\n \tvmFuncs->internalExitVMToJNI(currentThread);\n \n \tjsize length = env->GetArrayLength(bytecodes);\n \n \t/* acquires access internally */\n-\tjclass anonClass = defineClassCommon(env, hostClassLoaderLocalRef, NULL,bytecodes, 0, length, protectionDomainLocalRef, J9_FINDCLASS_FLAG_UNSAFE | J9_FINDCLASS_FLAG_ANON, hostClazz);\n+\tjclass anonClass = defineClassCommon(env, hostClassLoaderLocalRef, NULL,bytecodes, 0, length, protectionDomainLocalRef, J9_FINDCLASS_FLAG_UNSAFE | J9_FINDCLASS_FLAG_ANON, hostClazz, &cpPatchMap);\n \tif (env->ExceptionCheck()) {\n \t\treturn NULL;\n \t} else if (NULL == anonClass) {\n \t\tthrowNewInternalError(env, NULL);\n \t\treturn NULL;\n \t}\n \n+\tif (constPatches != NULL) {\n+\t\tvmFuncs->internalEnterVMFromJNI(currentThread);\n+\t\tJ9Class * clazz = J9VM_J9CLASS_FROM_HEAPCLASS(currentThread, J9_JNI_UNWRAP_REFERENCE(anonClass));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e4f06080dbc668570b8a4380fb557dadbb51f30"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE4OTQ1NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tU_32 * cpShapeDescription = J9ROMCLASS_CPSHAPEDESCRIPTION(clazz->romClass);\n          \n          \n            \n            \t\tU_32 *cpShapeDescription = J9ROMCLASS_CPSHAPEDESCRIPTION(clazz->romClass);", "url": "https://github.com/eclipse-openj9/openj9/pull/8460#discussion_r373189454", "createdAt": "2020-01-30T20:57:12Z", "author": {"login": "babsingh"}, "path": "runtime/jcl/common/sun_misc_Unsafe.cpp", "diffHunk": "@@ -96,19 +93,57 @@ Java_sun_misc_Unsafe_defineAnonymousClass(JNIEnv *env, jobject receiver, jclass\n \t\thostClassLoader = vm->systemClassLoader->classLoaderObject;\n \t}\n \tjobject hostClassLoaderLocalRef = vmFuncs->j9jni_createLocalRef(env, hostClassLoader);\n+\n+\tJ9ClassPatchMap cpPatchMap = {0, NULL};\n+\tj9array_t patchArray = NULL;\n+\tPORT_ACCESS_FROM_ENV(env);\n+\n+\tU_16 indexMap[128];\n+\tif (constPatches != NULL) {\n+\t\tpatchArray = (j9array_t)J9_JNI_UNWRAP_REFERENCE(constPatches);\n+\t\tcpPatchMap.size = (U_16)J9INDEXABLEOBJECT_SIZE(currentThread, patchArray);\n+\t\tif (cpPatchMap.size <= 128) {\n+\t\t\tcpPatchMap.indexMap = indexMap;\n+\t\t} else {\n+\t\t\tcpPatchMap.indexMap = (U_16*)j9mem_allocate_memory(cpPatchMap.size * sizeof(U_16), J9MEM_CATEGORY_VM);\n+\t\t}\n+\t}\n+\n \tvmFuncs->internalExitVMToJNI(currentThread);\n \n \tjsize length = env->GetArrayLength(bytecodes);\n \n \t/* acquires access internally */\n-\tjclass anonClass = defineClassCommon(env, hostClassLoaderLocalRef, NULL,bytecodes, 0, length, protectionDomainLocalRef, J9_FINDCLASS_FLAG_UNSAFE | J9_FINDCLASS_FLAG_ANON, hostClazz);\n+\tjclass anonClass = defineClassCommon(env, hostClassLoaderLocalRef, NULL,bytecodes, 0, length, protectionDomainLocalRef, J9_FINDCLASS_FLAG_UNSAFE | J9_FINDCLASS_FLAG_ANON, hostClazz, &cpPatchMap);\n \tif (env->ExceptionCheck()) {\n \t\treturn NULL;\n \t} else if (NULL == anonClass) {\n \t\tthrowNewInternalError(env, NULL);\n \t\treturn NULL;\n \t}\n \n+\tif (constPatches != NULL) {\n+\t\tvmFuncs->internalEnterVMFromJNI(currentThread);\n+\t\tJ9Class * clazz = J9VM_J9CLASS_FROM_HEAPCLASS(currentThread, J9_JNI_UNWRAP_REFERENCE(anonClass));\n+\n+\t\tj9object_t item = NULL;\n+\t\tU_32 * cpShapeDescription = J9ROMCLASS_CPSHAPEDESCRIPTION(clazz->romClass);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e4f06080dbc668570b8a4380fb557dadbb51f30"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE4OTU0NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tJ9ConstantPool * ramCP = J9_CP_FROM_CLASS(clazz);\n          \n          \n            \n            \t\tJ9ConstantPool *ramCP = J9_CP_FROM_CLASS(clazz);", "url": "https://github.com/eclipse-openj9/openj9/pull/8460#discussion_r373189545", "createdAt": "2020-01-30T20:57:22Z", "author": {"login": "babsingh"}, "path": "runtime/jcl/common/sun_misc_Unsafe.cpp", "diffHunk": "@@ -96,19 +93,57 @@ Java_sun_misc_Unsafe_defineAnonymousClass(JNIEnv *env, jobject receiver, jclass\n \t\thostClassLoader = vm->systemClassLoader->classLoaderObject;\n \t}\n \tjobject hostClassLoaderLocalRef = vmFuncs->j9jni_createLocalRef(env, hostClassLoader);\n+\n+\tJ9ClassPatchMap cpPatchMap = {0, NULL};\n+\tj9array_t patchArray = NULL;\n+\tPORT_ACCESS_FROM_ENV(env);\n+\n+\tU_16 indexMap[128];\n+\tif (constPatches != NULL) {\n+\t\tpatchArray = (j9array_t)J9_JNI_UNWRAP_REFERENCE(constPatches);\n+\t\tcpPatchMap.size = (U_16)J9INDEXABLEOBJECT_SIZE(currentThread, patchArray);\n+\t\tif (cpPatchMap.size <= 128) {\n+\t\t\tcpPatchMap.indexMap = indexMap;\n+\t\t} else {\n+\t\t\tcpPatchMap.indexMap = (U_16*)j9mem_allocate_memory(cpPatchMap.size * sizeof(U_16), J9MEM_CATEGORY_VM);\n+\t\t}\n+\t}\n+\n \tvmFuncs->internalExitVMToJNI(currentThread);\n \n \tjsize length = env->GetArrayLength(bytecodes);\n \n \t/* acquires access internally */\n-\tjclass anonClass = defineClassCommon(env, hostClassLoaderLocalRef, NULL,bytecodes, 0, length, protectionDomainLocalRef, J9_FINDCLASS_FLAG_UNSAFE | J9_FINDCLASS_FLAG_ANON, hostClazz);\n+\tjclass anonClass = defineClassCommon(env, hostClassLoaderLocalRef, NULL,bytecodes, 0, length, protectionDomainLocalRef, J9_FINDCLASS_FLAG_UNSAFE | J9_FINDCLASS_FLAG_ANON, hostClazz, &cpPatchMap);\n \tif (env->ExceptionCheck()) {\n \t\treturn NULL;\n \t} else if (NULL == anonClass) {\n \t\tthrowNewInternalError(env, NULL);\n \t\treturn NULL;\n \t}\n \n+\tif (constPatches != NULL) {\n+\t\tvmFuncs->internalEnterVMFromJNI(currentThread);\n+\t\tJ9Class * clazz = J9VM_J9CLASS_FROM_HEAPCLASS(currentThread, J9_JNI_UNWRAP_REFERENCE(anonClass));\n+\n+\t\tj9object_t item = NULL;\n+\t\tU_32 * cpShapeDescription = J9ROMCLASS_CPSHAPEDESCRIPTION(clazz->romClass);\n+\t\tJ9ConstantPool * ramCP = J9_CP_FROM_CLASS(clazz);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e4f06080dbc668570b8a4380fb557dadbb51f30"}, "originalPosition": 66}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "78a62b875f92d8aef432be40f73728e7b63ffe9a", "author": {"user": {"login": "fengxue-IS", "name": "Jack Lu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/78a62b875f92d8aef432be40f73728e7b63ffe9a", "committedDate": "2020-01-30T21:12:30Z", "message": "add missing staged changes...\n\nSigned-off-by: Jack Lu <Jack.S.Lu@ibm.com>"}, "afterCommit": {"oid": "bb94c806d202160c2fa0de3e6026cb5f5a3ddae8", "author": {"user": {"login": "fengxue-IS", "name": "Jack Lu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/bb94c806d202160c2fa0de3e6026cb5f5a3ddae8", "committedDate": "2020-01-30T21:30:36Z", "message": "Initial commit for CP String patching\n\nSigned-off-by: Jack Lu <Jack.S.Lu@ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNTYyNTE4", "url": "https://github.com/eclipse-openj9/openj9/pull/8460#pullrequestreview-352562518", "createdAt": "2020-02-03T21:06:45Z", "commit": {"oid": "a97a1e1ceb3a1eb95f734ea40332f7bd5609f08f"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMTowNjo0NVrOFk_9jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMTowNjo0NVrOFk_9jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM0MTAwNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t\t&& (J9UTF8_EQUALS(romString, J9ROMSTRINGREF_UTF8DATA((J9ROMStringRef *)&romCP[j])))) {\n          \n          \n            \n            \t\t\t\t\tif ((J9_CP_TYPE(cpShapeDescription, j) == J9CPTYPE_STRING)\n          \n          \n            \n            \t\t\t\t\t\t&& J9UTF8_EQUALS(romString, J9ROMSTRINGREF_UTF8DATA((J9ROMStringRef *)&romCP[j]))\n          \n          \n            \n            \t\t\t\t\t) {", "url": "https://github.com/eclipse-openj9/openj9/pull/8460#discussion_r374341006", "createdAt": "2020-02-03T21:06:45Z", "author": {"login": "babsingh"}, "path": "runtime/jcl/common/sun_misc_Unsafe.cpp", "diffHunk": "@@ -96,19 +95,65 @@ Java_sun_misc_Unsafe_defineAnonymousClass(JNIEnv *env, jobject receiver, jclass\n \t\thostClassLoader = vm->systemClassLoader->classLoaderObject;\n \t}\n \tjobject hostClassLoaderLocalRef = vmFuncs->j9jni_createLocalRef(env, hostClassLoader);\n+\n+\tJ9ClassPatchMap cpPatchMap = {0, NULL};\n+\tj9array_t patchArray = NULL;\n+\tPORT_ACCESS_FROM_ENV(env);\n+\n+\tU_16 indexMap[BUFFER_SIZE];\n+\tif (constPatches != NULL) {\n+\t\tpatchArray = (j9array_t)J9_JNI_UNWRAP_REFERENCE(constPatches);\n+\t\tcpPatchMap.size = (U_16)J9INDEXABLEOBJECT_SIZE(currentThread, patchArray);\n+\t\tif (cpPatchMap.size <= BUFFER_SIZE) {\n+\t\t\tcpPatchMap.indexMap = indexMap;\n+\t\t} else {\n+\t\t\tcpPatchMap.indexMap = (U_16 *)j9mem_allocate_memory(cpPatchMap.size * sizeof(U_16), J9MEM_CATEGORY_VM);\n+\t\t}\n+\t}\n+\n \tvmFuncs->internalExitVMToJNI(currentThread);\n \n \tjsize length = env->GetArrayLength(bytecodes);\n \n \t/* acquires access internally */\n-\tjclass anonClass = defineClassCommon(env, hostClassLoaderLocalRef, NULL,bytecodes, 0, length, protectionDomainLocalRef, J9_FINDCLASS_FLAG_UNSAFE | J9_FINDCLASS_FLAG_ANON, hostClazz);\n+\tjclass anonClass = defineClassCommon(env, hostClassLoaderLocalRef, NULL,bytecodes, 0, length, protectionDomainLocalRef, J9_FINDCLASS_FLAG_UNSAFE | J9_FINDCLASS_FLAG_ANON, hostClazz, &cpPatchMap);\n \tif (env->ExceptionCheck()) {\n \t\treturn NULL;\n \t} else if (NULL == anonClass) {\n \t\tthrowNewInternalError(env, NULL);\n \t\treturn NULL;\n \t}\n \n+\tif (constPatches != NULL) {\n+\t\tvmFuncs->internalEnterVMFromJNI(currentThread);\n+\t\tJ9Class *clazz = J9VM_J9CLASS_FROM_HEAPCLASS(currentThread, J9_JNI_UNWRAP_REFERENCE(anonClass));\n+\n+\t\tj9object_t item = NULL;\n+\t\tU_32 *cpShapeDescription = J9ROMCLASS_CPSHAPEDESCRIPTION(clazz->romClass);\n+\t\tJ9ConstantPool *ramCP = J9_CP_FROM_CLASS(clazz);\n+\t\tJ9ROMConstantPoolItem *romCP = ramCP->romConstantPool;\n+\n+\t\tfor (U_16 i = 0; i < cpPatchMap.size; i++) {\n+\t\t\titem = J9JAVAARRAYOFOBJECT_LOAD(currentThread, patchArray, i);\n+\t\t\tif ((item != NULL) && (J9_CP_TYPE(cpShapeDescription, cpPatchMap.indexMap[i]) == J9CPTYPE_STRING)) {\n+\t\t\t\tJ9UTF8 *romString = J9ROMSTRINGREF_UTF8DATA((J9ROMStringRef *)&romCP[cpPatchMap.indexMap[i]]);\n+\n+\t\t\t\tfor (U_16 j = 1; j < clazz->romClass->ramConstantPoolCount; j++) {\n+\t\t\t\t\tif ((J9_CP_TYPE(cpShapeDescription, j) == J9CPTYPE_STRING)\n+\t\t\t\t\t&& (J9UTF8_EQUALS(romString, J9ROMSTRINGREF_UTF8DATA((J9ROMStringRef *)&romCP[j])))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a97a1e1ceb3a1eb95f734ea40332f7bd5609f08f"}, "originalPosition": 85}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a97a1e1ceb3a1eb95f734ea40332f7bd5609f08f", "author": {"user": {"login": "fengxue-IS", "name": "Jack Lu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/a97a1e1ceb3a1eb95f734ea40332f7bd5609f08f", "committedDate": "2020-02-03T20:07:54Z", "message": "prototype for cp string comparsion during patching\n\nSigned-off-by: Jack Lu <Jack.S.Lu@ibm.com>"}, "afterCommit": {"oid": "7f3089712584b9d3e92bf5702e79bc2686f6a5ec", "author": {"user": {"login": "fengxue-IS", "name": "Jack Lu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/7f3089712584b9d3e92bf5702e79bc2686f6a5ec", "committedDate": "2020-02-03T23:49:57Z", "message": "prototype for cp string comparsion during patching\n\nSigned-off-by: Jack Lu <Jack.S.Lu@ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7f3089712584b9d3e92bf5702e79bc2686f6a5ec", "author": {"user": {"login": "fengxue-IS", "name": "Jack Lu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/7f3089712584b9d3e92bf5702e79bc2686f6a5ec", "committedDate": "2020-02-03T23:49:57Z", "message": "prototype for cp string comparsion during patching\n\nSigned-off-by: Jack Lu <Jack.S.Lu@ibm.com>"}, "afterCommit": {"oid": "23f72fb73c321a814b91527326568e2f89dc6f73", "author": {"user": {"login": "fengxue-IS", "name": "Jack Lu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/23f72fb73c321a814b91527326568e2f89dc6f73", "committedDate": "2020-02-05T17:53:33Z", "message": "Search RAM CP for identical String entries to patch\n\nFor each patch object, apply to all matching String entries in the constantpool\n\nSigned-off-by: Jack Lu <Jack.S.Lu@ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0MjA2NjY1", "url": "https://github.com/eclipse-openj9/openj9/pull/8460#pullrequestreview-354206665", "createdAt": "2020-02-06T05:23:46Z", "commit": {"oid": "23f72fb73c321a814b91527326568e2f89dc6f73"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwNToyMzo0NlrOFmPl6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwNTozMTowOFrOFmPrrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY0NTY3Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * If valid patchMap structure passed, class require ConstantPool patching,\n          \n          \n            \n            \t * If a valid patchMap structure is passed, this class requirse ConstantPool patching.", "url": "https://github.com/eclipse-openj9/openj9/pull/8460#discussion_r375645672", "createdAt": "2020-02-06T05:23:46Z", "author": {"login": "DanHeidinga"}, "path": "runtime/bcutil/ConstantPoolMap.cpp", "diffHunk": "@@ -302,6 +302,20 @@ ConstantPoolMap::computeConstantPoolMapAndSizes()\n \t\t\t}\n \t\t}\n \t}\n+\n+\tJ9ClassPatchMap *map = _context->patchMap();\n+\n+\t/**\n+\t * If valid patchMap structure passed, class require ConstantPool patching,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23f72fb73c321a814b91527326568e2f89dc6f73"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY0NTgxMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * record Classfile to J9Class constantpool index mapping to patch RAM Class\n          \n          \n            \n            \t * Record the index mapping from Classfile to J9Class constantpool to allow patching the RAM CP", "url": "https://github.com/eclipse-openj9/openj9/pull/8460#discussion_r375645810", "createdAt": "2020-02-06T05:24:28Z", "author": {"login": "DanHeidinga"}, "path": "runtime/bcutil/ConstantPoolMap.cpp", "diffHunk": "@@ -302,6 +302,20 @@ ConstantPoolMap::computeConstantPoolMapAndSizes()\n \t\t\t}\n \t\t}\n \t}\n+\n+\tJ9ClassPatchMap *map = _context->patchMap();\n+\n+\t/**\n+\t * If valid patchMap structure passed, class require ConstantPool patching,\n+\t * record Classfile to J9Class constantpool index mapping to patch RAM Class", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23f72fb73c321a814b91527326568e2f89dc6f73"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY0NjY4Ng==", "bodyText": "This function gets VMAccess so it can't be called with it.  Need to swap these two lines", "url": "https://github.com/eclipse-openj9/openj9/pull/8460#discussion_r375646686", "createdAt": "2020-02-06T05:28:57Z", "author": {"login": "DanHeidinga"}, "path": "runtime/jcl/common/sun_misc_Unsafe.cpp", "diffHunk": "@@ -96,19 +95,72 @@ Java_sun_misc_Unsafe_defineAnonymousClass(JNIEnv *env, jobject receiver, jclass\n \t\thostClassLoader = vm->systemClassLoader->classLoaderObject;\n \t}\n \tjobject hostClassLoaderLocalRef = vmFuncs->j9jni_createLocalRef(env, hostClassLoader);\n+\n+\tJ9ClassPatchMap cpPatchMap = {0, NULL};\n+\tj9array_t patchArray = NULL;\n+\tPORT_ACCESS_FROM_ENV(env);\n+\n+\tU_16 indexMap[BUFFER_SIZE];\n+\tif (constPatches != NULL) {\n+\t\tpatchArray = (j9array_t)J9_JNI_UNWRAP_REFERENCE(constPatches);\n+\t\tcpPatchMap.size = (U_16)J9INDEXABLEOBJECT_SIZE(currentThread, patchArray);\n+\t\tif (cpPatchMap.size <= BUFFER_SIZE) {\n+\t\t\tcpPatchMap.indexMap = indexMap;\n+\t\t} else {\n+\t\t\tcpPatchMap.indexMap = (U_16 *)j9mem_allocate_memory(cpPatchMap.size * sizeof(U_16), J9MEM_CATEGORY_VM);\n+\n+\t\t\tif (cpPatchMap.indexMap == NULL) {\n+\t\t\t\tvmFuncs->throwNativeOOMError(env, 0, 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23f72fb73c321a814b91527326568e2f89dc6f73"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY0NzE0OA==", "bodyText": "It's a good practice to null out fields that have been released even when the end of the function is so close.  Future changes to the file may accidentally reuse the freed mem if we don't null it now.", "url": "https://github.com/eclipse-openj9/openj9/pull/8460#discussion_r375647148", "createdAt": "2020-02-06T05:31:08Z", "author": {"login": "DanHeidinga"}, "path": "runtime/jcl/common/sun_misc_Unsafe.cpp", "diffHunk": "@@ -96,19 +95,72 @@ Java_sun_misc_Unsafe_defineAnonymousClass(JNIEnv *env, jobject receiver, jclass\n \t\thostClassLoader = vm->systemClassLoader->classLoaderObject;\n \t}\n \tjobject hostClassLoaderLocalRef = vmFuncs->j9jni_createLocalRef(env, hostClassLoader);\n+\n+\tJ9ClassPatchMap cpPatchMap = {0, NULL};\n+\tj9array_t patchArray = NULL;\n+\tPORT_ACCESS_FROM_ENV(env);\n+\n+\tU_16 indexMap[BUFFER_SIZE];\n+\tif (constPatches != NULL) {\n+\t\tpatchArray = (j9array_t)J9_JNI_UNWRAP_REFERENCE(constPatches);\n+\t\tcpPatchMap.size = (U_16)J9INDEXABLEOBJECT_SIZE(currentThread, patchArray);\n+\t\tif (cpPatchMap.size <= BUFFER_SIZE) {\n+\t\t\tcpPatchMap.indexMap = indexMap;\n+\t\t} else {\n+\t\t\tcpPatchMap.indexMap = (U_16 *)j9mem_allocate_memory(cpPatchMap.size * sizeof(U_16), J9MEM_CATEGORY_VM);\n+\n+\t\t\tif (cpPatchMap.indexMap == NULL) {\n+\t\t\t\tvmFuncs->throwNativeOOMError(env, 0, 0);\n+\t\t\t\tvmFuncs->internalExitVMToJNI(currentThread);\n+\t\t\t\treturn NULL;\n+\t\t\t}\n+\t\t}\n+\t}\n+\n \tvmFuncs->internalExitVMToJNI(currentThread);\n \n \tjsize length = env->GetArrayLength(bytecodes);\n \n \t/* acquires access internally */\n-\tjclass anonClass = defineClassCommon(env, hostClassLoaderLocalRef, NULL,bytecodes, 0, length, protectionDomainLocalRef, J9_FINDCLASS_FLAG_UNSAFE | J9_FINDCLASS_FLAG_ANON, hostClazz);\n+\tjclass anonClass = defineClassCommon(env, hostClassLoaderLocalRef, NULL,bytecodes, 0, length, protectionDomainLocalRef, J9_FINDCLASS_FLAG_UNSAFE | J9_FINDCLASS_FLAG_ANON, hostClazz, &cpPatchMap);\n \tif (env->ExceptionCheck()) {\n \t\treturn NULL;\n \t} else if (NULL == anonClass) {\n \t\tthrowNewInternalError(env, NULL);\n \t\treturn NULL;\n \t}\n \n+\tif (constPatches != NULL) {\n+\t\tvmFuncs->internalEnterVMFromJNI(currentThread);\n+\t\tJ9Class *clazz = J9VM_J9CLASS_FROM_HEAPCLASS(currentThread, J9_JNI_UNWRAP_REFERENCE(anonClass));\n+\t\tU_32 *cpShapeDescription = J9ROMCLASS_CPSHAPEDESCRIPTION(clazz->romClass);\n+\t\tJ9ConstantPool *ramCP = J9_CP_FROM_CLASS(clazz);\n+\t\tJ9ROMConstantPoolItem *romCP = ramCP->romConstantPool;\n+\n+\t\t/* Get J9 constantpool mapped item for patch item, only support patching STRING entries has been added */\n+\t\tfor (U_16 i = 0; i < cpPatchMap.size; i++) {\n+\t\t\tj9object_t item = J9JAVAARRAYOFOBJECT_LOAD(currentThread, patchArray, i);\n+\t\t\tif ((item != NULL) && (J9_CP_TYPE(cpShapeDescription, cpPatchMap.indexMap[i]) == J9CPTYPE_STRING)) {\n+\t\t\t\tJ9UTF8 *romString = J9ROMSTRINGREF_UTF8DATA((J9ROMStringRef *)&romCP[cpPatchMap.indexMap[i]]);\n+\n+\t\t\t\t/* For each patch object, search the RAM constantpool for identical string entries */\n+\t\t\t\tfor (U_16 j = 1; j < clazz->romClass->ramConstantPoolCount; j++) {\n+\t\t\t\t\tif ((J9_CP_TYPE(cpShapeDescription, j) == J9CPTYPE_STRING)\n+\t\t\t\t\t\t&& J9UTF8_EQUALS(romString, J9ROMSTRINGREF_UTF8DATA((J9ROMStringRef *)&romCP[j]))\n+\t\t\t\t\t) {\n+\t\t\t\t\t\tJ9RAMStringRef *ramStringRef = ((J9RAMStringRef *)ramCP) + j;\n+\t\t\t\t\t\tJ9STATIC_OBJECT_STORE(currentThread, clazz, &ramStringRef->stringObject, item);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\n+\t\tif (cpPatchMap.size > BUFFER_SIZE) {\n+\t\t\tj9mem_free_memory(cpPatchMap.indexMap);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23f72fb73c321a814b91527326568e2f89dc6f73"}, "originalPosition": 101}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "573628ba41b9e0e2aece9f3da050a93a3d4f9d87", "author": {"user": {"login": "fengxue-IS", "name": "Jack Lu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/573628ba41b9e0e2aece9f3da050a93a3d4f9d87", "committedDate": "2020-02-06T17:55:04Z", "message": "Support CP String patching\n\n- New J9ClassPatchMap structure to store patching info\n- Update defineClassCommon code to accept J9ClassPatchMap\n- Patch RAM constantpool before returing class object\n\nSigned-off-by: Jack Lu <Jack.S.Lu@ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd8147267f71d0a11e72b44662e71da94b57035b", "author": {"user": {"login": "fengxue-IS", "name": "Jack Lu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/cd8147267f71d0a11e72b44662e71da94b57035b", "committedDate": "2020-02-06T17:55:14Z", "message": "Search RAM CP for identical String entries to patch\n\nFor each patch object, apply to all matching String entries in the constantpool\n\nSigned-off-by: Jack Lu <Jack.S.Lu@ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "23f72fb73c321a814b91527326568e2f89dc6f73", "author": {"user": {"login": "fengxue-IS", "name": "Jack Lu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/23f72fb73c321a814b91527326568e2f89dc6f73", "committedDate": "2020-02-05T17:53:33Z", "message": "Search RAM CP for identical String entries to patch\n\nFor each patch object, apply to all matching String entries in the constantpool\n\nSigned-off-by: Jack Lu <Jack.S.Lu@ibm.com>"}, "afterCommit": {"oid": "cd8147267f71d0a11e72b44662e71da94b57035b", "author": {"user": {"login": "fengxue-IS", "name": "Jack Lu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/cd8147267f71d0a11e72b44662e71da94b57035b", "committedDate": "2020-02-06T17:55:14Z", "message": "Search RAM CP for identical String entries to patch\n\nFor each patch object, apply to all matching String entries in the constantpool\n\nSigned-off-by: Jack Lu <Jack.S.Lu@ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1NDI2Njg5", "url": "https://github.com/eclipse-openj9/openj9/pull/8460#pullrequestreview-355426689", "createdAt": "2020-02-07T20:46:32Z", "commit": {"oid": "088105976acef36e7d344b4c931fb50502548203"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99754a9f2d53f3252820c5385d0a94a21ab85ab1", "author": {"user": {"login": "fengxue-IS", "name": "Jack Lu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/99754a9f2d53f3252820c5385d0a94a21ab85ab1", "committedDate": "2020-02-07T20:50:29Z", "message": "Add assert on CP patch type check\n\n- Only allow String CP entries to be patched\n- Remove redundant VMAccess call when setting OOM exception\n\nSigned-off-by: Jack Lu <Jack.S.Lu@ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "088105976acef36e7d344b4c931fb50502548203", "author": {"user": {"login": "fengxue-IS", "name": "Jack Lu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/088105976acef36e7d344b4c931fb50502548203", "committedDate": "2020-02-07T20:18:49Z", "message": "Use Assert to check CP patch type\n\n- Only allow String CP entries to be patched\n- Remove redundant VMAccess call when setting OOM exception\n\nSigned-off-by: Jack Lu <Jack.S.Lu@ibm.com>"}, "afterCommit": {"oid": "99754a9f2d53f3252820c5385d0a94a21ab85ab1", "author": {"user": {"login": "fengxue-IS", "name": "Jack Lu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/99754a9f2d53f3252820c5385d0a94a21ab85ab1", "committedDate": "2020-02-07T20:50:29Z", "message": "Add assert on CP patch type check\n\n- Only allow String CP entries to be patched\n- Remove redundant VMAccess call when setting OOM exception\n\nSigned-off-by: Jack Lu <Jack.S.Lu@ibm.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 713, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}