{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA4NTAxNjMy", "number": 10970, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxOToyMTo0N1rOEw6P2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxOToyMTo0N1rOEw6P2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzIxNDMyOnYy", "diffSide": "RIGHT", "path": "doc/diagnostics/AddingTracepoints.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxOToyMTo0N1rOHmwbYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxOTozOToyMVrOHmw_SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQwMTM3Nw==", "bodyText": "These points should end with a period (like the others).", "url": "https://github.com/eclipse-openj9/openj9/pull/10970#discussion_r510401377", "createdAt": "2020-10-22T19:21:47Z", "author": {"login": "keithc-ca"}, "path": "doc/diagnostics/AddingTracepoints.md", "diffHunk": "@@ -67,7 +67,20 @@ For example:\n \n This breaks down as follows:\n \n-`TraceEvent=Trc_VM_getMethodOrFieldID_dereferencedClass`  This specifies the type and the name of the tracepoint. `Trc_VM_getMethodOrFieldID_dereferencedClass` is the name of the generated macro to use in your code. The `TraceEvent=` denotes this is an event trace point. Other tracepoint types are:  `TraceEntry` `TraceExit` `TraceException` `TraceExit-Exception` `TraceAssert` `TraceDebug`.\n+`TraceEvent=Trc_VM_getMethodOrFieldID_dereferencedClass`  This specifies the type and the name of the tracepoint. `Trc_VM_getMethodOrFieldID_dereferencedClass` is the name of the generated macro to use in your code. The `TraceEvent=` denotes this is an event trace point. Other tracepoint types are:\n+\n+- `TraceEntry`, `TraceEntry-Exception`:\n+  Tracepoint to be placed at the entry point of a non-trivial function.\n+- `TraceExit`, `TraceExit-Exception`:\n+  Tracepoint for the exit points of a non-trivial function that has a `TraceEntry` tracepoint. Entry and Exit tracepoints facilitate indented formatting. If Entry and Exit tracepoints are unbalanced, the formatted trace may be indented incorrectly.\n+- `TraceEvent`:\n+  A generic tracepoint\n+- `TraceException`:\n+  Tracepoint is for out-of-line/error situations (not just Java exceptions)\n+- `TraceAssert`:\n+  An assertion tracepoint", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f87772aa6d06491fcc19656f74d5d6a9a49d937"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQxMDU2OQ==", "bodyText": "Added the period", "url": "https://github.com/eclipse-openj9/openj9/pull/10970#discussion_r510410569", "createdAt": "2020-10-22T19:39:21Z", "author": {"login": "VermaSh"}, "path": "doc/diagnostics/AddingTracepoints.md", "diffHunk": "@@ -67,7 +67,20 @@ For example:\n \n This breaks down as follows:\n \n-`TraceEvent=Trc_VM_getMethodOrFieldID_dereferencedClass`  This specifies the type and the name of the tracepoint. `Trc_VM_getMethodOrFieldID_dereferencedClass` is the name of the generated macro to use in your code. The `TraceEvent=` denotes this is an event trace point. Other tracepoint types are:  `TraceEntry` `TraceExit` `TraceException` `TraceExit-Exception` `TraceAssert` `TraceDebug`.\n+`TraceEvent=Trc_VM_getMethodOrFieldID_dereferencedClass`  This specifies the type and the name of the tracepoint. `Trc_VM_getMethodOrFieldID_dereferencedClass` is the name of the generated macro to use in your code. The `TraceEvent=` denotes this is an event trace point. Other tracepoint types are:\n+\n+- `TraceEntry`, `TraceEntry-Exception`:\n+  Tracepoint to be placed at the entry point of a non-trivial function.\n+- `TraceExit`, `TraceExit-Exception`:\n+  Tracepoint for the exit points of a non-trivial function that has a `TraceEntry` tracepoint. Entry and Exit tracepoints facilitate indented formatting. If Entry and Exit tracepoints are unbalanced, the formatted trace may be indented incorrectly.\n+- `TraceEvent`:\n+  A generic tracepoint\n+- `TraceException`:\n+  Tracepoint is for out-of-line/error situations (not just Java exceptions)\n+- `TraceAssert`:\n+  An assertion tracepoint", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQwMTM3Nw=="}, "originalCommit": {"oid": "4f87772aa6d06491fcc19656f74d5d6a9a49d937"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1200, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}