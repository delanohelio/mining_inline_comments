{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4NTE0ODA0", "number": 11141, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNjozODo1M1rOE6HAzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNzoxMjozOFrOE6IGUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MzY3NzU5OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/z/codegen/S390PrivateLinkage.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNjozODo1M1rOH0-Uag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNjo1MTo1MVrOH13akg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMwOTAzNA==", "bodyText": "I think we need to place the RI on/off sequence for both RX and RWX dispatches. We need to move this outside the if / else.", "url": "https://github.com/eclipse-openj9/openj9/pull/11141#discussion_r525309034", "createdAt": "2020-11-17T16:38:53Z", "author": {"login": "fjeremic"}, "path": "runtime/compiler/z/codegen/S390PrivateLinkage.cpp", "diffHunk": "@@ -2631,29 +2740,36 @@ J9::Z::PrivateLinkage::buildDirectCall(TR::Node * callNode, TR::SymbolReference\n       }\n    else\n       {\n-      if (cg()->getSupportsRuntimeInstrumentation())\n-         TR::TreeEvaluator::generateRuntimeInstrumentationOnOffSequence(cg(), TR::InstOpCode::RIOFF, callNode);\n-\n-      // call through snippet if the method is not resolved or not jitted yet\n-      TR::LabelSymbol * label = generateLabelSymbol(cg());\n-      TR::Snippet * snippet;\n-\n-      if (callSymRef->isUnresolved() || (comp()->compileRelocatableCode() && !comp()->getOption(TR_UseSymbolValidationManager)))\n+      if (comp()->getGenerateReadOnlyCode())\n          {\n-         snippet = new (trHeapMemory()) TR::S390UnresolvedCallSnippet(cg(), callNode, label, argSize);\n+         gcPoint = buildNoPatchingStaticOrSpecialCall(callNode, callSymRef, dependencies, argSize);\n          }\n       else\n-         {\n-         snippet = new (trHeapMemory()) TR::S390J9CallSnippet(cg(), callNode, label, callSymRef, argSize);\n-         }\n+         { \n+         if (cg()->getSupportsRuntimeInstrumentation())\n+            TR::TreeEvaluator::generateRuntimeInstrumentationOnOffSequence(cg(), TR::InstOpCode::RIOFF, callNode);\n \n-      cg()->addSnippet(snippet);\n+         // call through snippet if the method is not resolved or not jitted yet\n+         TR::LabelSymbol * label = generateLabelSymbol(cg());\n+         TR::Snippet * snippet;\n+\n+         if (callSymRef->isUnresolved() || (comp()->compileRelocatableCode() && !comp()->getOption(TR_UseSymbolValidationManager)))\n+            {\n+            snippet = new (trHeapMemory()) TR::S390UnresolvedCallSnippet(cg(), callNode, label, argSize);\n+            }\n+         else\n+            {\n+            snippet = new (trHeapMemory()) TR::S390J9CallSnippet(cg(), callNode, label, callSymRef, argSize);\n+            }\n \n+         cg()->addSnippet(snippet);\n \n-      gcPoint = generateSnippetCall(cg(), callNode, snippet, dependencies, callSymRef);\n \n-      if (cg()->getSupportsRuntimeInstrumentation())\n-         TR::TreeEvaluator::generateRuntimeInstrumentationOnOffSequence(cg(), TR::InstOpCode::RION, callNode);\n+         gcPoint = generateSnippetCall(cg(), callNode, snippet, dependencies, callSymRef);\n+\n+         if (cg()->getSupportsRuntimeInstrumentation())\n+            TR::TreeEvaluator::generateRuntimeInstrumentationOnOffSequence(cg(), TR::InstOpCode::RION, callNode);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a9d9b37daeb983c8d4e295fcc785afeecde5d78"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI0NDQ5OA==", "bodyText": "Moved the RION generation outside of the if/else , reason I kept that limited to RWX because, I am not sure how RI is going to work out for RX code.", "url": "https://github.com/eclipse-openj9/openj9/pull/11141#discussion_r526244498", "createdAt": "2020-11-18T16:51:51Z", "author": {"login": "r30shah"}, "path": "runtime/compiler/z/codegen/S390PrivateLinkage.cpp", "diffHunk": "@@ -2631,29 +2740,36 @@ J9::Z::PrivateLinkage::buildDirectCall(TR::Node * callNode, TR::SymbolReference\n       }\n    else\n       {\n-      if (cg()->getSupportsRuntimeInstrumentation())\n-         TR::TreeEvaluator::generateRuntimeInstrumentationOnOffSequence(cg(), TR::InstOpCode::RIOFF, callNode);\n-\n-      // call through snippet if the method is not resolved or not jitted yet\n-      TR::LabelSymbol * label = generateLabelSymbol(cg());\n-      TR::Snippet * snippet;\n-\n-      if (callSymRef->isUnresolved() || (comp()->compileRelocatableCode() && !comp()->getOption(TR_UseSymbolValidationManager)))\n+      if (comp()->getGenerateReadOnlyCode())\n          {\n-         snippet = new (trHeapMemory()) TR::S390UnresolvedCallSnippet(cg(), callNode, label, argSize);\n+         gcPoint = buildNoPatchingStaticOrSpecialCall(callNode, callSymRef, dependencies, argSize);\n          }\n       else\n-         {\n-         snippet = new (trHeapMemory()) TR::S390J9CallSnippet(cg(), callNode, label, callSymRef, argSize);\n-         }\n+         { \n+         if (cg()->getSupportsRuntimeInstrumentation())\n+            TR::TreeEvaluator::generateRuntimeInstrumentationOnOffSequence(cg(), TR::InstOpCode::RIOFF, callNode);\n \n-      cg()->addSnippet(snippet);\n+         // call through snippet if the method is not resolved or not jitted yet\n+         TR::LabelSymbol * label = generateLabelSymbol(cg());\n+         TR::Snippet * snippet;\n+\n+         if (callSymRef->isUnresolved() || (comp()->compileRelocatableCode() && !comp()->getOption(TR_UseSymbolValidationManager)))\n+            {\n+            snippet = new (trHeapMemory()) TR::S390UnresolvedCallSnippet(cg(), callNode, label, argSize);\n+            }\n+         else\n+            {\n+            snippet = new (trHeapMemory()) TR::S390J9CallSnippet(cg(), callNode, label, callSymRef, argSize);\n+            }\n \n+         cg()->addSnippet(snippet);\n \n-      gcPoint = generateSnippetCall(cg(), callNode, snippet, dependencies, callSymRef);\n \n-      if (cg()->getSupportsRuntimeInstrumentation())\n-         TR::TreeEvaluator::generateRuntimeInstrumentationOnOffSequence(cg(), TR::InstOpCode::RION, callNode);\n+         gcPoint = generateSnippetCall(cg(), callNode, snippet, dependencies, callSymRef);\n+\n+         if (cg()->getSupportsRuntimeInstrumentation())\n+            TR::TreeEvaluator::generateRuntimeInstrumentationOnOffSequence(cg(), TR::InstOpCode::RION, callNode);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMwOTAzNA=="}, "originalCommit": {"oid": "9a9d9b37daeb983c8d4e295fcc785afeecde5d78"}, "originalPosition": 187}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MzY5ODY0OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/z/runtime/PicBuilder.m4", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNjo0MjoxNlrOH0-g4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNjo0MjoxNlrOH0-g4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMxMjIyNQ==", "bodyText": "We should keep the name of this the same as the field for searchability.", "url": "https://github.com/eclipse-openj9/openj9/pull/11141#discussion_r525312225", "createdAt": "2020-11-17T16:42:16Z", "author": {"login": "fjeremic"}, "path": "runtime/compiler/z/runtime/PicBuilder.m4", "diffHunk": "@@ -167,6 +167,16 @@ SETVAL(eq_InterfaceCallHelperReadOnly_RA,4)\n SETVAL(eq_offsetOfMethodAddrInPICSlot,8)\n SETVAL(eq_sizeOfPICSlotForInterfaceCall,16)\n \n+ZZ Unresolved/Resolved Static and Special Calls Glue\n+SETVAL(eq_ccUnresolvedStaticSpecialCall_methodAddress,0)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a9d9b37daeb983c8d4e295fcc785afeecde5d78"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MzcwMzYxOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/z/runtime/PicBuilder.m4", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNjo0MzoyNFrOH0-kTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNjo1MDozOVrOH13XLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMxMzEwMA==", "bodyText": "These seem to have different names. The struct is named ccStaticSpecialData. Should we use the same name here?", "url": "https://github.com/eclipse-openj9/openj9/pull/11141#discussion_r525313100", "createdAt": "2020-11-17T16:43:24Z", "author": {"login": "fjeremic"}, "path": "runtime/compiler/z/runtime/PicBuilder.m4", "diffHunk": "@@ -167,6 +167,16 @@ SETVAL(eq_InterfaceCallHelperReadOnly_RA,4)\n SETVAL(eq_offsetOfMethodAddrInPICSlot,8)\n SETVAL(eq_sizeOfPICSlotForInterfaceCall,16)\n \n+ZZ Unresolved/Resolved Static and Special Calls Glue\n+SETVAL(eq_ccUnresolvedStaticSpecialCall_methodAddress,0)\n+SETVAL(eq_ccUnresolvedStaticSpecialCall_ramMethod,8)\n+SETVAL(eq_ccUnresolvedStaticSpecialCall_cpAddress,16)\n+SETVAL(eq_ccUnresolvedStaticSpecialCall_cpIndex,24)\n+SETVAL(eq_ccStaticOrSpecialCalls_methodAddress,0)\n+SETVAL(eq_ccResolvedStaticSpecialCall_ramMethod,8)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a9d9b37daeb983c8d4e295fcc785afeecde5d78"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI0MzYzMQ==", "bodyText": "Some of the offset for both unresolved and resolved are same (for example ramMethod, snippetOrCompiledMethod) and in the PIC Builder I have tried put the common block of code together (For example for unresoved static or special call, it calls different JIT helper but updating the CCData with ramMethod and dispatching for the j2itransition shared same code even with resolved ones) so for such fields I have used StaticOrSpecialCalls and removed resolved or unresolved from it.\nThere were some un-needed offset I forgot to cleanup , Removed them in https://github.com/eclipse/openj9/compare/9a9d9b37daeb983c8d4e295fcc785afeecde5d78..de725983cd06ff96468a76b30321d3f8bb48caea", "url": "https://github.com/eclipse-openj9/openj9/pull/11141#discussion_r526243631", "createdAt": "2020-11-18T16:50:39Z", "author": {"login": "r30shah"}, "path": "runtime/compiler/z/runtime/PicBuilder.m4", "diffHunk": "@@ -167,6 +167,16 @@ SETVAL(eq_InterfaceCallHelperReadOnly_RA,4)\n SETVAL(eq_offsetOfMethodAddrInPICSlot,8)\n SETVAL(eq_sizeOfPICSlotForInterfaceCall,16)\n \n+ZZ Unresolved/Resolved Static and Special Calls Glue\n+SETVAL(eq_ccUnresolvedStaticSpecialCall_methodAddress,0)\n+SETVAL(eq_ccUnresolvedStaticSpecialCall_ramMethod,8)\n+SETVAL(eq_ccUnresolvedStaticSpecialCall_cpAddress,16)\n+SETVAL(eq_ccUnresolvedStaticSpecialCall_cpIndex,24)\n+SETVAL(eq_ccStaticOrSpecialCalls_methodAddress,0)\n+SETVAL(eq_ccResolvedStaticSpecialCall_ramMethod,8)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMxMzEwMA=="}, "originalCommit": {"oid": "9a9d9b37daeb983c8d4e295fcc785afeecde5d78"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MzcxNTcyOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/z/codegen/S390PrivateLinkage.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNjo0NTo1MVrOH0-rrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNjo0Njo1NlrOH13Llg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMxNDk4OA==", "bodyText": "Is OSR currently allowed with read only code? Wondering if this should be a fatal assert under read-only mode.", "url": "https://github.com/eclipse-openj9/openj9/pull/11141#discussion_r525314988", "createdAt": "2020-11-17T16:45:51Z", "author": {"login": "fjeremic"}, "path": "runtime/compiler/z/codegen/S390PrivateLinkage.cpp", "diffHunk": "@@ -2592,7 +2699,9 @@ J9::Z::PrivateLinkage::buildDirectCall(TR::Node * callNode, TR::SymbolReference\n \n    if (comp()->getOption(TR_TraceCG))\n       traceMsg(comp(), \"Build Direct Call\\n\");\n-\n+   // TODO: For read only code cache, we will need to change the jitInduceOSR\n+   // call below to use the sequence that is works for RXi, Probably a new\n+   // buildDirectCall makes sense here to handle all the cases more cleanly\n    // generate call", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a9d9b37daeb983c8d4e295fcc785afeecde5d78"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI0MDY2Mg==", "bodyText": "I have added a FATAL assert with Node in case generateReadOnlyCode is enabled and we encounter jitInduceOSR call. I do not think so we have OSR support currently for RX code\nhttps://github.com/eclipse/openj9/compare/9a9d9b37daeb983c8d4e295fcc785afeecde5d78..de725983cd06ff96468a76b30321d3f8bb48caea", "url": "https://github.com/eclipse-openj9/openj9/pull/11141#discussion_r526240662", "createdAt": "2020-11-18T16:46:56Z", "author": {"login": "r30shah"}, "path": "runtime/compiler/z/codegen/S390PrivateLinkage.cpp", "diffHunk": "@@ -2592,7 +2699,9 @@ J9::Z::PrivateLinkage::buildDirectCall(TR::Node * callNode, TR::SymbolReference\n \n    if (comp()->getOption(TR_TraceCG))\n       traceMsg(comp(), \"Build Direct Call\\n\");\n-\n+   // TODO: For read only code cache, we will need to change the jitInduceOSR\n+   // call below to use the sequence that is works for RXi, Probably a new\n+   // buildDirectCall makes sense here to handle all the cases more cleanly\n    // generate call", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMxNDk4OA=="}, "originalCommit": {"oid": "9a9d9b37daeb983c8d4e295fcc785afeecde5d78"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5Mzc1NTMyOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/z/codegen/S390PrivateLinkage.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNjo1NDoyN1rOH0_EVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNjo0NjoxNVrOH13JYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMyMTMwMQ==", "bodyText": "This comment is not very useful. It does not say anything more than the code already does.", "url": "https://github.com/eclipse-openj9/openj9/pull/11141#discussion_r525321301", "createdAt": "2020-11-17T16:54:27Z", "author": {"login": "fjeremic"}, "path": "runtime/compiler/z/codegen/S390PrivateLinkage.cpp", "diffHunk": "@@ -2562,6 +2564,111 @@ J9::Z::PrivateLinkage::buildVirtualDispatch(TR::Node * callNode, TR::RegisterDep\n    gcPoint->setNeedsGCMap(getPreservedRegisterMapForGC());\n    }\n \n+TR::Instruction *\n+J9::Z::PrivateLinkage::buildNoPatchingStaticOrSpecialCall(TR::Node *callNode, TR::SymbolReference *callSymRef,\n+   TR::RegisterDependencyConditions *dependencies, int32_t argSize)\n+   {\n+   OMR::CCData *codeCacheData = cg()->getCodeCache()->manager()->getCodeCacheData();\n+   OMR::CCData::index_t index;\n+   intptr_t callSnippetCCDataAddress = NULL;\n+   int32_t  offsetOfSnippetOrCompiledMethod = 0;\n+   if (callSymRef->isUnresolved() || (comp()->compileRelocatableCode() && !comp()->getOption(TR_UseSymbolValidationManager)))\n+      {\n+      // Call Is unresolved. Allocate a CCData.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a9d9b37daeb983c8d4e295fcc785afeecde5d78"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI0MDA5Ng==", "bodyText": "Removed comment in https://github.com/eclipse/openj9/compare/9a9d9b37daeb983c8d4e295fcc785afeecde5d78..de725983cd06ff96468a76b30321d3f8bb48caea", "url": "https://github.com/eclipse-openj9/openj9/pull/11141#discussion_r526240096", "createdAt": "2020-11-18T16:46:15Z", "author": {"login": "r30shah"}, "path": "runtime/compiler/z/codegen/S390PrivateLinkage.cpp", "diffHunk": "@@ -2562,6 +2564,111 @@ J9::Z::PrivateLinkage::buildVirtualDispatch(TR::Node * callNode, TR::RegisterDep\n    gcPoint->setNeedsGCMap(getPreservedRegisterMapForGC());\n    }\n \n+TR::Instruction *\n+J9::Z::PrivateLinkage::buildNoPatchingStaticOrSpecialCall(TR::Node *callNode, TR::SymbolReference *callSymRef,\n+   TR::RegisterDependencyConditions *dependencies, int32_t argSize)\n+   {\n+   OMR::CCData *codeCacheData = cg()->getCodeCache()->manager()->getCodeCacheData();\n+   OMR::CCData::index_t index;\n+   intptr_t callSnippetCCDataAddress = NULL;\n+   int32_t  offsetOfSnippetOrCompiledMethod = 0;\n+   if (callSymRef->isUnresolved() || (comp()->compileRelocatableCode() && !comp()->getOption(TR_UseSymbolValidationManager)))\n+      {\n+      // Call Is unresolved. Allocate a CCData.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMyMTMwMQ=="}, "originalCommit": {"oid": "9a9d9b37daeb983c8d4e295fcc785afeecde5d78"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5Mzc2MzQzOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/z/codegen/S390PrivateLinkage.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNjo1NTo1NVrOH0_JJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNjo0NjowN1rOH13JEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMyMjUzNA==", "bodyText": "We should initialize this.", "url": "https://github.com/eclipse-openj9/openj9/pull/11141#discussion_r525322534", "createdAt": "2020-11-17T16:55:55Z", "author": {"login": "fjeremic"}, "path": "runtime/compiler/z/codegen/S390PrivateLinkage.cpp", "diffHunk": "@@ -2562,6 +2564,111 @@ J9::Z::PrivateLinkage::buildVirtualDispatch(TR::Node * callNode, TR::RegisterDep\n    gcPoint->setNeedsGCMap(getPreservedRegisterMapForGC());\n    }\n \n+TR::Instruction *\n+J9::Z::PrivateLinkage::buildNoPatchingStaticOrSpecialCall(TR::Node *callNode, TR::SymbolReference *callSymRef,\n+   TR::RegisterDependencyConditions *dependencies, int32_t argSize)\n+   {\n+   OMR::CCData *codeCacheData = cg()->getCodeCache()->manager()->getCodeCacheData();\n+   OMR::CCData::index_t index;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a9d9b37daeb983c8d4e295fcc785afeecde5d78"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI0MDAxNg==", "bodyText": "Changed in https://github.com/eclipse/openj9/compare/9a9d9b37daeb983c8d4e295fcc785afeecde5d78..de725983cd06ff96468a76b30321d3f8bb48caea", "url": "https://github.com/eclipse-openj9/openj9/pull/11141#discussion_r526240016", "createdAt": "2020-11-18T16:46:07Z", "author": {"login": "r30shah"}, "path": "runtime/compiler/z/codegen/S390PrivateLinkage.cpp", "diffHunk": "@@ -2562,6 +2564,111 @@ J9::Z::PrivateLinkage::buildVirtualDispatch(TR::Node * callNode, TR::RegisterDep\n    gcPoint->setNeedsGCMap(getPreservedRegisterMapForGC());\n    }\n \n+TR::Instruction *\n+J9::Z::PrivateLinkage::buildNoPatchingStaticOrSpecialCall(TR::Node *callNode, TR::SymbolReference *callSymRef,\n+   TR::RegisterDependencyConditions *dependencies, int32_t argSize)\n+   {\n+   OMR::CCData *codeCacheData = cg()->getCodeCache()->manager()->getCodeCacheData();\n+   OMR::CCData::index_t index;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMyMjUzNA=="}, "originalCommit": {"oid": "9a9d9b37daeb983c8d4e295fcc785afeecde5d78"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5Mzc3MTUwOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/z/codegen/S390PrivateLinkage.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNjo1Nzo0MFrOH0_OEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNjo0NTo1NlrOH13IhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMyMzc5NA==", "bodyText": "Shouldn't this be an offsetof(ccStaticSpecialData, ...)? Perhaps a copy/paste error.", "url": "https://github.com/eclipse-openj9/openj9/pull/11141#discussion_r525323794", "createdAt": "2020-11-17T16:57:40Z", "author": {"login": "fjeremic"}, "path": "runtime/compiler/z/codegen/S390PrivateLinkage.cpp", "diffHunk": "@@ -2562,6 +2564,111 @@ J9::Z::PrivateLinkage::buildVirtualDispatch(TR::Node * callNode, TR::RegisterDep\n    gcPoint->setNeedsGCMap(getPreservedRegisterMapForGC());\n    }\n \n+TR::Instruction *\n+J9::Z::PrivateLinkage::buildNoPatchingStaticOrSpecialCall(TR::Node *callNode, TR::SymbolReference *callSymRef,\n+   TR::RegisterDependencyConditions *dependencies, int32_t argSize)\n+   {\n+   OMR::CCData *codeCacheData = cg()->getCodeCache()->manager()->getCodeCacheData();\n+   OMR::CCData::index_t index;\n+   intptr_t callSnippetCCDataAddress = NULL;\n+   int32_t  offsetOfSnippetOrCompiledMethod = 0;\n+   if (callSymRef->isUnresolved() || (comp()->compileRelocatableCode() && !comp()->getOption(TR_UseSymbolValidationManager)))\n+      {\n+      // Call Is unresolved. Allocate a CCData.\n+      if (!(codeCacheData->put(NULL, sizeof(ccUnresolvedStaticSpecialData), alignof(ccUnresolvedStaticSpecialData), NULL, index)))\n+         {\n+         cg()->comp()->failCompilation<TR::CompilationException>(\"Could not allocate metadata for static or special call\");\n+         }\n+\n+      ccUnresolvedStaticSpecialData *ccUnresolvedStaticSpecialDataAddress = codeCacheData->get<ccUnresolvedStaticSpecialData>(index);\n+\n+      // Shape of the ccData\n+      // snippetOrCompiledMethod -> to be updated in binary encoding while emitting snippet body\n+      // ramMethod -> Should be NULL for Unresolved\n+      // cpAddress -> Filled here\n+      // cpIndex   -> Filled here\n+\n+      ccUnresolvedStaticSpecialDataAddress->cpAddress = reinterpret_cast<intptr_t>(callNode->getSymbolReference()->getOwningMethod(cg()->comp())->constantPool());\n+      ccUnresolvedStaticSpecialDataAddress->ramMethod = 0;\n+      ccUnresolvedStaticSpecialDataAddress->cpIndex   = static_cast<intptr_t>(callNode->getSymbolReference()->getCPIndexForVM());\n+      callSnippetCCDataAddress = reinterpret_cast<intptr_t>(ccUnresolvedStaticSpecialDataAddress);\n+      offsetOfSnippetOrCompiledMethod = static_cast<int32_t>(offsetof(ccUnresolvedStaticSpecialData, snippetOrCompiledMethod));\n+      }\n+   else\n+      {\n+      if (!(codeCacheData->put(NULL, sizeof(ccStaticSpecialData), alignof(ccStaticSpecialData), NULL, index)))\n+         {\n+         cg()->comp()->failCompilation<TR::CompilationException>(\"Could not allocate metadata for static or special call\");\n+         }\n+\n+      ccStaticSpecialData *ccStaticSpecialDataAddress = codeCacheData->get<ccStaticSpecialData>(index);\n+\n+      // Shape of the ccData\n+      // snippetOrCompiledMethod -> to be updated in binary encoding while emitting snippet body\n+      // ramMethod -> Filled Here\n+      TR::MethodSymbol *methodSymbol = callSymRef->getSymbol()->castToMethodSymbol();\n+      intptr_t ramMethod;\n+#if defined(J9VM_OPT_JITSERVER)\n+      ramMethod = comp()->isOutOfProcessCompilation() && methodSymbol->isInterpreted() ?\n+                     static_cast<intptr_t>(callSymRef->getSymbol()->castToResolvedMethodSymbol()->getResolvedMethod()->getPersistentIdentifier()) :\n+                     static_cast<intptr_t>(methodSymbol->getMethodAddress());\n+#else\n+      ramMethod = reinterpret_cast<intptr_t>(methodSymbol->getMethodAddress());\n+#endif\n+      ccStaticSpecialDataAddress->ramMethod = ramMethod;\n+      callSnippetCCDataAddress = reinterpret_cast<intptr_t>(ccStaticSpecialDataAddress);\n+      offsetOfSnippetOrCompiledMethod = static_cast<int32_t>(offsetof(ccUnresolvedStaticSpecialData, snippetOrCompiledMethod));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a9d9b37daeb983c8d4e295fcc785afeecde5d78"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjIzOTg3Nw==", "bodyText": "Yeah, it was copy/paste error, both CCData has same offset for snippetOrCompiledMethod so did not cause functional issue but fixed it in https://github.com/eclipse/openj9/compare/9a9d9b37daeb983c8d4e295fcc785afeecde5d78..de725983cd06ff96468a76b30321d3f8bb48caea", "url": "https://github.com/eclipse-openj9/openj9/pull/11141#discussion_r526239877", "createdAt": "2020-11-18T16:45:56Z", "author": {"login": "r30shah"}, "path": "runtime/compiler/z/codegen/S390PrivateLinkage.cpp", "diffHunk": "@@ -2562,6 +2564,111 @@ J9::Z::PrivateLinkage::buildVirtualDispatch(TR::Node * callNode, TR::RegisterDep\n    gcPoint->setNeedsGCMap(getPreservedRegisterMapForGC());\n    }\n \n+TR::Instruction *\n+J9::Z::PrivateLinkage::buildNoPatchingStaticOrSpecialCall(TR::Node *callNode, TR::SymbolReference *callSymRef,\n+   TR::RegisterDependencyConditions *dependencies, int32_t argSize)\n+   {\n+   OMR::CCData *codeCacheData = cg()->getCodeCache()->manager()->getCodeCacheData();\n+   OMR::CCData::index_t index;\n+   intptr_t callSnippetCCDataAddress = NULL;\n+   int32_t  offsetOfSnippetOrCompiledMethod = 0;\n+   if (callSymRef->isUnresolved() || (comp()->compileRelocatableCode() && !comp()->getOption(TR_UseSymbolValidationManager)))\n+      {\n+      // Call Is unresolved. Allocate a CCData.\n+      if (!(codeCacheData->put(NULL, sizeof(ccUnresolvedStaticSpecialData), alignof(ccUnresolvedStaticSpecialData), NULL, index)))\n+         {\n+         cg()->comp()->failCompilation<TR::CompilationException>(\"Could not allocate metadata for static or special call\");\n+         }\n+\n+      ccUnresolvedStaticSpecialData *ccUnresolvedStaticSpecialDataAddress = codeCacheData->get<ccUnresolvedStaticSpecialData>(index);\n+\n+      // Shape of the ccData\n+      // snippetOrCompiledMethod -> to be updated in binary encoding while emitting snippet body\n+      // ramMethod -> Should be NULL for Unresolved\n+      // cpAddress -> Filled here\n+      // cpIndex   -> Filled here\n+\n+      ccUnresolvedStaticSpecialDataAddress->cpAddress = reinterpret_cast<intptr_t>(callNode->getSymbolReference()->getOwningMethod(cg()->comp())->constantPool());\n+      ccUnresolvedStaticSpecialDataAddress->ramMethod = 0;\n+      ccUnresolvedStaticSpecialDataAddress->cpIndex   = static_cast<intptr_t>(callNode->getSymbolReference()->getCPIndexForVM());\n+      callSnippetCCDataAddress = reinterpret_cast<intptr_t>(ccUnresolvedStaticSpecialDataAddress);\n+      offsetOfSnippetOrCompiledMethod = static_cast<int32_t>(offsetof(ccUnresolvedStaticSpecialData, snippetOrCompiledMethod));\n+      }\n+   else\n+      {\n+      if (!(codeCacheData->put(NULL, sizeof(ccStaticSpecialData), alignof(ccStaticSpecialData), NULL, index)))\n+         {\n+         cg()->comp()->failCompilation<TR::CompilationException>(\"Could not allocate metadata for static or special call\");\n+         }\n+\n+      ccStaticSpecialData *ccStaticSpecialDataAddress = codeCacheData->get<ccStaticSpecialData>(index);\n+\n+      // Shape of the ccData\n+      // snippetOrCompiledMethod -> to be updated in binary encoding while emitting snippet body\n+      // ramMethod -> Filled Here\n+      TR::MethodSymbol *methodSymbol = callSymRef->getSymbol()->castToMethodSymbol();\n+      intptr_t ramMethod;\n+#if defined(J9VM_OPT_JITSERVER)\n+      ramMethod = comp()->isOutOfProcessCompilation() && methodSymbol->isInterpreted() ?\n+                     static_cast<intptr_t>(callSymRef->getSymbol()->castToResolvedMethodSymbol()->getResolvedMethod()->getPersistentIdentifier()) :\n+                     static_cast<intptr_t>(methodSymbol->getMethodAddress());\n+#else\n+      ramMethod = reinterpret_cast<intptr_t>(methodSymbol->getMethodAddress());\n+#endif\n+      ccStaticSpecialDataAddress->ramMethod = ramMethod;\n+      callSnippetCCDataAddress = reinterpret_cast<intptr_t>(ccStaticSpecialDataAddress);\n+      offsetOfSnippetOrCompiledMethod = static_cast<int32_t>(offsetof(ccUnresolvedStaticSpecialData, snippetOrCompiledMethod));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMyMzc5NA=="}, "originalCommit": {"oid": "9a9d9b37daeb983c8d4e295fcc785afeecde5d78"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MzgxMjE0OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/z/codegen/S390PrivateLinkage.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNzowNDo1M1rOH0_nYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNjo0NDo0OFrOH13FKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMzMDI3NQ==", "bodyText": "Spaces around operators.", "url": "https://github.com/eclipse-openj9/openj9/pull/11141#discussion_r525330275", "createdAt": "2020-11-17T17:04:53Z", "author": {"login": "fjeremic"}, "path": "runtime/compiler/z/codegen/S390PrivateLinkage.cpp", "diffHunk": "@@ -2562,6 +2564,111 @@ J9::Z::PrivateLinkage::buildVirtualDispatch(TR::Node * callNode, TR::RegisterDep\n    gcPoint->setNeedsGCMap(getPreservedRegisterMapForGC());\n    }\n \n+TR::Instruction *\n+J9::Z::PrivateLinkage::buildNoPatchingStaticOrSpecialCall(TR::Node *callNode, TR::SymbolReference *callSymRef,\n+   TR::RegisterDependencyConditions *dependencies, int32_t argSize)\n+   {\n+   OMR::CCData *codeCacheData = cg()->getCodeCache()->manager()->getCodeCacheData();\n+   OMR::CCData::index_t index;\n+   intptr_t callSnippetCCDataAddress = NULL;\n+   int32_t  offsetOfSnippetOrCompiledMethod = 0;\n+   if (callSymRef->isUnresolved() || (comp()->compileRelocatableCode() && !comp()->getOption(TR_UseSymbolValidationManager)))\n+      {\n+      // Call Is unresolved. Allocate a CCData.\n+      if (!(codeCacheData->put(NULL, sizeof(ccUnresolvedStaticSpecialData), alignof(ccUnresolvedStaticSpecialData), NULL, index)))\n+         {\n+         cg()->comp()->failCompilation<TR::CompilationException>(\"Could not allocate metadata for static or special call\");\n+         }\n+\n+      ccUnresolvedStaticSpecialData *ccUnresolvedStaticSpecialDataAddress = codeCacheData->get<ccUnresolvedStaticSpecialData>(index);\n+\n+      // Shape of the ccData\n+      // snippetOrCompiledMethod -> to be updated in binary encoding while emitting snippet body\n+      // ramMethod -> Should be NULL for Unresolved\n+      // cpAddress -> Filled here\n+      // cpIndex   -> Filled here\n+\n+      ccUnresolvedStaticSpecialDataAddress->cpAddress = reinterpret_cast<intptr_t>(callNode->getSymbolReference()->getOwningMethod(cg()->comp())->constantPool());\n+      ccUnresolvedStaticSpecialDataAddress->ramMethod = 0;\n+      ccUnresolvedStaticSpecialDataAddress->cpIndex   = static_cast<intptr_t>(callNode->getSymbolReference()->getCPIndexForVM());\n+      callSnippetCCDataAddress = reinterpret_cast<intptr_t>(ccUnresolvedStaticSpecialDataAddress);\n+      offsetOfSnippetOrCompiledMethod = static_cast<int32_t>(offsetof(ccUnresolvedStaticSpecialData, snippetOrCompiledMethod));\n+      }\n+   else\n+      {\n+      if (!(codeCacheData->put(NULL, sizeof(ccStaticSpecialData), alignof(ccStaticSpecialData), NULL, index)))\n+         {\n+         cg()->comp()->failCompilation<TR::CompilationException>(\"Could not allocate metadata for static or special call\");\n+         }\n+\n+      ccStaticSpecialData *ccStaticSpecialDataAddress = codeCacheData->get<ccStaticSpecialData>(index);\n+\n+      // Shape of the ccData\n+      // snippetOrCompiledMethod -> to be updated in binary encoding while emitting snippet body\n+      // ramMethod -> Filled Here\n+      TR::MethodSymbol *methodSymbol = callSymRef->getSymbol()->castToMethodSymbol();\n+      intptr_t ramMethod;\n+#if defined(J9VM_OPT_JITSERVER)\n+      ramMethod = comp()->isOutOfProcessCompilation() && methodSymbol->isInterpreted() ?\n+                     static_cast<intptr_t>(callSymRef->getSymbol()->castToResolvedMethodSymbol()->getResolvedMethod()->getPersistentIdentifier()) :\n+                     static_cast<intptr_t>(methodSymbol->getMethodAddress());\n+#else\n+      ramMethod = reinterpret_cast<intptr_t>(methodSymbol->getMethodAddress());\n+#endif\n+      ccStaticSpecialDataAddress->ramMethod = ramMethod;\n+      callSnippetCCDataAddress = reinterpret_cast<intptr_t>(ccStaticSpecialDataAddress);\n+      offsetOfSnippetOrCompiledMethod = static_cast<int32_t>(offsetof(ccUnresolvedStaticSpecialData, snippetOrCompiledMethod));\n+      }\n+\n+   TR::LabelSymbol *snippetLabel = generateLabelSymbol(cg());\n+   TR::LabelSymbol *doneLabel = generateLabelSymbol(cg());\n+   TR::Snippet *callSnippet = new (trHeapMemory()) TR::S390J9CallSnippetRX(cg(),\n+                                                                           callNode,\n+                                                                           snippetLabel,\n+                                                                           doneLabel,\n+                                                                           callSymRef,\n+                                                                           argSize,\n+                                                                           callSnippetCCDataAddress);\n+   void *targetAddress = reinterpret_cast<void *>(callSnippetCCDataAddress + static_cast<intptr_t>(offsetOfSnippetOrCompiledMethod));\n+   TR::StaticSymbol *snippetOrCompiledSlotSymbol = TR::StaticSymbol::createWithAddress(comp()->trHeapMemory(), TR::Address, targetAddress);\n+   TR::SymbolReference *snippetOrCompiledSlotSymRef = new (comp()->trHeapMemory()) TR::SymbolReference(comp()->getSymRefTab(), snippetOrCompiledSlotSymbol, 0);\n+   snippetOrCompiledSlotSymbol->setNotDataAddress();\n+\n+   TR::RegisterDependencyConditions *preDeps = new (trHeapMemory()) TR::RegisterDependencyConditions(dependencies->getPreConditions(), NULL,\n+                                                                                                      dependencies->getAddCursorForPre(), 0, cg());\n+\n+   int32_t numOfAdditionalPostDeps = 0;\n+   TR::Register *regRA = dependencies->searchPostConditionRegister(getReturnAddressRegister());\n+   if (regRA == NULL)\n+      {\n+      regRA = cg()->allocateRegister();\n+      numOfAdditionalPostDeps+=1;\n+      }\n+\n+   TR::Register *regEP = dependencies->searchPostConditionRegister(getEntryPointRegister());\n+   if (regEP == NULL)\n+      {\n+      regEP = cg()->allocateRegister();\n+      numOfAdditionalPostDeps+=1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a9d9b37daeb983c8d4e295fcc785afeecde5d78"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjIzOTAxNg==", "bodyText": "Changed in https://github.com/eclipse/openj9/compare/9a9d9b37daeb983c8d4e295fcc785afeecde5d78..de725983cd06ff96468a76b30321d3f8bb48caea", "url": "https://github.com/eclipse-openj9/openj9/pull/11141#discussion_r526239016", "createdAt": "2020-11-18T16:44:48Z", "author": {"login": "r30shah"}, "path": "runtime/compiler/z/codegen/S390PrivateLinkage.cpp", "diffHunk": "@@ -2562,6 +2564,111 @@ J9::Z::PrivateLinkage::buildVirtualDispatch(TR::Node * callNode, TR::RegisterDep\n    gcPoint->setNeedsGCMap(getPreservedRegisterMapForGC());\n    }\n \n+TR::Instruction *\n+J9::Z::PrivateLinkage::buildNoPatchingStaticOrSpecialCall(TR::Node *callNode, TR::SymbolReference *callSymRef,\n+   TR::RegisterDependencyConditions *dependencies, int32_t argSize)\n+   {\n+   OMR::CCData *codeCacheData = cg()->getCodeCache()->manager()->getCodeCacheData();\n+   OMR::CCData::index_t index;\n+   intptr_t callSnippetCCDataAddress = NULL;\n+   int32_t  offsetOfSnippetOrCompiledMethod = 0;\n+   if (callSymRef->isUnresolved() || (comp()->compileRelocatableCode() && !comp()->getOption(TR_UseSymbolValidationManager)))\n+      {\n+      // Call Is unresolved. Allocate a CCData.\n+      if (!(codeCacheData->put(NULL, sizeof(ccUnresolvedStaticSpecialData), alignof(ccUnresolvedStaticSpecialData), NULL, index)))\n+         {\n+         cg()->comp()->failCompilation<TR::CompilationException>(\"Could not allocate metadata for static or special call\");\n+         }\n+\n+      ccUnresolvedStaticSpecialData *ccUnresolvedStaticSpecialDataAddress = codeCacheData->get<ccUnresolvedStaticSpecialData>(index);\n+\n+      // Shape of the ccData\n+      // snippetOrCompiledMethod -> to be updated in binary encoding while emitting snippet body\n+      // ramMethod -> Should be NULL for Unresolved\n+      // cpAddress -> Filled here\n+      // cpIndex   -> Filled here\n+\n+      ccUnresolvedStaticSpecialDataAddress->cpAddress = reinterpret_cast<intptr_t>(callNode->getSymbolReference()->getOwningMethod(cg()->comp())->constantPool());\n+      ccUnresolvedStaticSpecialDataAddress->ramMethod = 0;\n+      ccUnresolvedStaticSpecialDataAddress->cpIndex   = static_cast<intptr_t>(callNode->getSymbolReference()->getCPIndexForVM());\n+      callSnippetCCDataAddress = reinterpret_cast<intptr_t>(ccUnresolvedStaticSpecialDataAddress);\n+      offsetOfSnippetOrCompiledMethod = static_cast<int32_t>(offsetof(ccUnresolvedStaticSpecialData, snippetOrCompiledMethod));\n+      }\n+   else\n+      {\n+      if (!(codeCacheData->put(NULL, sizeof(ccStaticSpecialData), alignof(ccStaticSpecialData), NULL, index)))\n+         {\n+         cg()->comp()->failCompilation<TR::CompilationException>(\"Could not allocate metadata for static or special call\");\n+         }\n+\n+      ccStaticSpecialData *ccStaticSpecialDataAddress = codeCacheData->get<ccStaticSpecialData>(index);\n+\n+      // Shape of the ccData\n+      // snippetOrCompiledMethod -> to be updated in binary encoding while emitting snippet body\n+      // ramMethod -> Filled Here\n+      TR::MethodSymbol *methodSymbol = callSymRef->getSymbol()->castToMethodSymbol();\n+      intptr_t ramMethod;\n+#if defined(J9VM_OPT_JITSERVER)\n+      ramMethod = comp()->isOutOfProcessCompilation() && methodSymbol->isInterpreted() ?\n+                     static_cast<intptr_t>(callSymRef->getSymbol()->castToResolvedMethodSymbol()->getResolvedMethod()->getPersistentIdentifier()) :\n+                     static_cast<intptr_t>(methodSymbol->getMethodAddress());\n+#else\n+      ramMethod = reinterpret_cast<intptr_t>(methodSymbol->getMethodAddress());\n+#endif\n+      ccStaticSpecialDataAddress->ramMethod = ramMethod;\n+      callSnippetCCDataAddress = reinterpret_cast<intptr_t>(ccStaticSpecialDataAddress);\n+      offsetOfSnippetOrCompiledMethod = static_cast<int32_t>(offsetof(ccUnresolvedStaticSpecialData, snippetOrCompiledMethod));\n+      }\n+\n+   TR::LabelSymbol *snippetLabel = generateLabelSymbol(cg());\n+   TR::LabelSymbol *doneLabel = generateLabelSymbol(cg());\n+   TR::Snippet *callSnippet = new (trHeapMemory()) TR::S390J9CallSnippetRX(cg(),\n+                                                                           callNode,\n+                                                                           snippetLabel,\n+                                                                           doneLabel,\n+                                                                           callSymRef,\n+                                                                           argSize,\n+                                                                           callSnippetCCDataAddress);\n+   void *targetAddress = reinterpret_cast<void *>(callSnippetCCDataAddress + static_cast<intptr_t>(offsetOfSnippetOrCompiledMethod));\n+   TR::StaticSymbol *snippetOrCompiledSlotSymbol = TR::StaticSymbol::createWithAddress(comp()->trHeapMemory(), TR::Address, targetAddress);\n+   TR::SymbolReference *snippetOrCompiledSlotSymRef = new (comp()->trHeapMemory()) TR::SymbolReference(comp()->getSymRefTab(), snippetOrCompiledSlotSymbol, 0);\n+   snippetOrCompiledSlotSymbol->setNotDataAddress();\n+\n+   TR::RegisterDependencyConditions *preDeps = new (trHeapMemory()) TR::RegisterDependencyConditions(dependencies->getPreConditions(), NULL,\n+                                                                                                      dependencies->getAddCursorForPre(), 0, cg());\n+\n+   int32_t numOfAdditionalPostDeps = 0;\n+   TR::Register *regRA = dependencies->searchPostConditionRegister(getReturnAddressRegister());\n+   if (regRA == NULL)\n+      {\n+      regRA = cg()->allocateRegister();\n+      numOfAdditionalPostDeps+=1;\n+      }\n+\n+   TR::Register *regEP = dependencies->searchPostConditionRegister(getEntryPointRegister());\n+   if (regEP == NULL)\n+      {\n+      regEP = cg()->allocateRegister();\n+      numOfAdditionalPostDeps+=1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMzMDI3NQ=="}, "originalCommit": {"oid": "9a9d9b37daeb983c8d4e295fcc785afeecde5d78"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MzgxNzExOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/z/codegen/S390PrivateLinkage.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNzowNTozMFrOH0_qkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNjo0NDozOVrOH13Eow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMzMTA4OA==", "bodyText": "Why do we need to do this if we already specified 0 preconditions when we allocated the register dependency?", "url": "https://github.com/eclipse-openj9/openj9/pull/11141#discussion_r525331088", "createdAt": "2020-11-17T17:05:30Z", "author": {"login": "fjeremic"}, "path": "runtime/compiler/z/codegen/S390PrivateLinkage.cpp", "diffHunk": "@@ -2562,6 +2564,111 @@ J9::Z::PrivateLinkage::buildVirtualDispatch(TR::Node * callNode, TR::RegisterDep\n    gcPoint->setNeedsGCMap(getPreservedRegisterMapForGC());\n    }\n \n+TR::Instruction *\n+J9::Z::PrivateLinkage::buildNoPatchingStaticOrSpecialCall(TR::Node *callNode, TR::SymbolReference *callSymRef,\n+   TR::RegisterDependencyConditions *dependencies, int32_t argSize)\n+   {\n+   OMR::CCData *codeCacheData = cg()->getCodeCache()->manager()->getCodeCacheData();\n+   OMR::CCData::index_t index;\n+   intptr_t callSnippetCCDataAddress = NULL;\n+   int32_t  offsetOfSnippetOrCompiledMethod = 0;\n+   if (callSymRef->isUnresolved() || (comp()->compileRelocatableCode() && !comp()->getOption(TR_UseSymbolValidationManager)))\n+      {\n+      // Call Is unresolved. Allocate a CCData.\n+      if (!(codeCacheData->put(NULL, sizeof(ccUnresolvedStaticSpecialData), alignof(ccUnresolvedStaticSpecialData), NULL, index)))\n+         {\n+         cg()->comp()->failCompilation<TR::CompilationException>(\"Could not allocate metadata for static or special call\");\n+         }\n+\n+      ccUnresolvedStaticSpecialData *ccUnresolvedStaticSpecialDataAddress = codeCacheData->get<ccUnresolvedStaticSpecialData>(index);\n+\n+      // Shape of the ccData\n+      // snippetOrCompiledMethod -> to be updated in binary encoding while emitting snippet body\n+      // ramMethod -> Should be NULL for Unresolved\n+      // cpAddress -> Filled here\n+      // cpIndex   -> Filled here\n+\n+      ccUnresolvedStaticSpecialDataAddress->cpAddress = reinterpret_cast<intptr_t>(callNode->getSymbolReference()->getOwningMethod(cg()->comp())->constantPool());\n+      ccUnresolvedStaticSpecialDataAddress->ramMethod = 0;\n+      ccUnresolvedStaticSpecialDataAddress->cpIndex   = static_cast<intptr_t>(callNode->getSymbolReference()->getCPIndexForVM());\n+      callSnippetCCDataAddress = reinterpret_cast<intptr_t>(ccUnresolvedStaticSpecialDataAddress);\n+      offsetOfSnippetOrCompiledMethod = static_cast<int32_t>(offsetof(ccUnresolvedStaticSpecialData, snippetOrCompiledMethod));\n+      }\n+   else\n+      {\n+      if (!(codeCacheData->put(NULL, sizeof(ccStaticSpecialData), alignof(ccStaticSpecialData), NULL, index)))\n+         {\n+         cg()->comp()->failCompilation<TR::CompilationException>(\"Could not allocate metadata for static or special call\");\n+         }\n+\n+      ccStaticSpecialData *ccStaticSpecialDataAddress = codeCacheData->get<ccStaticSpecialData>(index);\n+\n+      // Shape of the ccData\n+      // snippetOrCompiledMethod -> to be updated in binary encoding while emitting snippet body\n+      // ramMethod -> Filled Here\n+      TR::MethodSymbol *methodSymbol = callSymRef->getSymbol()->castToMethodSymbol();\n+      intptr_t ramMethod;\n+#if defined(J9VM_OPT_JITSERVER)\n+      ramMethod = comp()->isOutOfProcessCompilation() && methodSymbol->isInterpreted() ?\n+                     static_cast<intptr_t>(callSymRef->getSymbol()->castToResolvedMethodSymbol()->getResolvedMethod()->getPersistentIdentifier()) :\n+                     static_cast<intptr_t>(methodSymbol->getMethodAddress());\n+#else\n+      ramMethod = reinterpret_cast<intptr_t>(methodSymbol->getMethodAddress());\n+#endif\n+      ccStaticSpecialDataAddress->ramMethod = ramMethod;\n+      callSnippetCCDataAddress = reinterpret_cast<intptr_t>(ccStaticSpecialDataAddress);\n+      offsetOfSnippetOrCompiledMethod = static_cast<int32_t>(offsetof(ccUnresolvedStaticSpecialData, snippetOrCompiledMethod));\n+      }\n+\n+   TR::LabelSymbol *snippetLabel = generateLabelSymbol(cg());\n+   TR::LabelSymbol *doneLabel = generateLabelSymbol(cg());\n+   TR::Snippet *callSnippet = new (trHeapMemory()) TR::S390J9CallSnippetRX(cg(),\n+                                                                           callNode,\n+                                                                           snippetLabel,\n+                                                                           doneLabel,\n+                                                                           callSymRef,\n+                                                                           argSize,\n+                                                                           callSnippetCCDataAddress);\n+   void *targetAddress = reinterpret_cast<void *>(callSnippetCCDataAddress + static_cast<intptr_t>(offsetOfSnippetOrCompiledMethod));\n+   TR::StaticSymbol *snippetOrCompiledSlotSymbol = TR::StaticSymbol::createWithAddress(comp()->trHeapMemory(), TR::Address, targetAddress);\n+   TR::SymbolReference *snippetOrCompiledSlotSymRef = new (comp()->trHeapMemory()) TR::SymbolReference(comp()->getSymRefTab(), snippetOrCompiledSlotSymbol, 0);\n+   snippetOrCompiledSlotSymbol->setNotDataAddress();\n+\n+   TR::RegisterDependencyConditions *preDeps = new (trHeapMemory()) TR::RegisterDependencyConditions(dependencies->getPreConditions(), NULL,\n+                                                                                                      dependencies->getAddCursorForPre(), 0, cg());\n+\n+   int32_t numOfAdditionalPostDeps = 0;\n+   TR::Register *regRA = dependencies->searchPostConditionRegister(getReturnAddressRegister());\n+   if (regRA == NULL)\n+      {\n+      regRA = cg()->allocateRegister();\n+      numOfAdditionalPostDeps+=1;\n+      }\n+\n+   TR::Register *regEP = dependencies->searchPostConditionRegister(getEntryPointRegister());\n+   if (regEP == NULL)\n+      {\n+      regEP = cg()->allocateRegister();\n+      numOfAdditionalPostDeps+=1;\n+      }\n+\n+   TR::RegisterDependencyConditions *postDeps = new (trHeapMemory()) TR::RegisterDependencyConditions(dependencies, 0, numOfAdditionalPostDeps, cg());\n+   postDeps->setAddCursorForPre(0);\n+   postDeps->setNumPreConditions(0, trMemory());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a9d9b37daeb983c8d4e295fcc785afeecde5d78"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjIzODg4Mw==", "bodyText": "The overload of the constructor does not set the pre conditions to 0 but just adds that count to existing pre conditions. I have changed the way I am extracting the post deps from dependencies in https://github.com/eclipse/openj9/compare/9a9d9b37daeb983c8d4e295fcc785afeecde5d78..de725983cd06ff96468a76b30321d3f8bb48caea", "url": "https://github.com/eclipse-openj9/openj9/pull/11141#discussion_r526238883", "createdAt": "2020-11-18T16:44:39Z", "author": {"login": "r30shah"}, "path": "runtime/compiler/z/codegen/S390PrivateLinkage.cpp", "diffHunk": "@@ -2562,6 +2564,111 @@ J9::Z::PrivateLinkage::buildVirtualDispatch(TR::Node * callNode, TR::RegisterDep\n    gcPoint->setNeedsGCMap(getPreservedRegisterMapForGC());\n    }\n \n+TR::Instruction *\n+J9::Z::PrivateLinkage::buildNoPatchingStaticOrSpecialCall(TR::Node *callNode, TR::SymbolReference *callSymRef,\n+   TR::RegisterDependencyConditions *dependencies, int32_t argSize)\n+   {\n+   OMR::CCData *codeCacheData = cg()->getCodeCache()->manager()->getCodeCacheData();\n+   OMR::CCData::index_t index;\n+   intptr_t callSnippetCCDataAddress = NULL;\n+   int32_t  offsetOfSnippetOrCompiledMethod = 0;\n+   if (callSymRef->isUnresolved() || (comp()->compileRelocatableCode() && !comp()->getOption(TR_UseSymbolValidationManager)))\n+      {\n+      // Call Is unresolved. Allocate a CCData.\n+      if (!(codeCacheData->put(NULL, sizeof(ccUnresolvedStaticSpecialData), alignof(ccUnresolvedStaticSpecialData), NULL, index)))\n+         {\n+         cg()->comp()->failCompilation<TR::CompilationException>(\"Could not allocate metadata for static or special call\");\n+         }\n+\n+      ccUnresolvedStaticSpecialData *ccUnresolvedStaticSpecialDataAddress = codeCacheData->get<ccUnresolvedStaticSpecialData>(index);\n+\n+      // Shape of the ccData\n+      // snippetOrCompiledMethod -> to be updated in binary encoding while emitting snippet body\n+      // ramMethod -> Should be NULL for Unresolved\n+      // cpAddress -> Filled here\n+      // cpIndex   -> Filled here\n+\n+      ccUnresolvedStaticSpecialDataAddress->cpAddress = reinterpret_cast<intptr_t>(callNode->getSymbolReference()->getOwningMethod(cg()->comp())->constantPool());\n+      ccUnresolvedStaticSpecialDataAddress->ramMethod = 0;\n+      ccUnresolvedStaticSpecialDataAddress->cpIndex   = static_cast<intptr_t>(callNode->getSymbolReference()->getCPIndexForVM());\n+      callSnippetCCDataAddress = reinterpret_cast<intptr_t>(ccUnresolvedStaticSpecialDataAddress);\n+      offsetOfSnippetOrCompiledMethod = static_cast<int32_t>(offsetof(ccUnresolvedStaticSpecialData, snippetOrCompiledMethod));\n+      }\n+   else\n+      {\n+      if (!(codeCacheData->put(NULL, sizeof(ccStaticSpecialData), alignof(ccStaticSpecialData), NULL, index)))\n+         {\n+         cg()->comp()->failCompilation<TR::CompilationException>(\"Could not allocate metadata for static or special call\");\n+         }\n+\n+      ccStaticSpecialData *ccStaticSpecialDataAddress = codeCacheData->get<ccStaticSpecialData>(index);\n+\n+      // Shape of the ccData\n+      // snippetOrCompiledMethod -> to be updated in binary encoding while emitting snippet body\n+      // ramMethod -> Filled Here\n+      TR::MethodSymbol *methodSymbol = callSymRef->getSymbol()->castToMethodSymbol();\n+      intptr_t ramMethod;\n+#if defined(J9VM_OPT_JITSERVER)\n+      ramMethod = comp()->isOutOfProcessCompilation() && methodSymbol->isInterpreted() ?\n+                     static_cast<intptr_t>(callSymRef->getSymbol()->castToResolvedMethodSymbol()->getResolvedMethod()->getPersistentIdentifier()) :\n+                     static_cast<intptr_t>(methodSymbol->getMethodAddress());\n+#else\n+      ramMethod = reinterpret_cast<intptr_t>(methodSymbol->getMethodAddress());\n+#endif\n+      ccStaticSpecialDataAddress->ramMethod = ramMethod;\n+      callSnippetCCDataAddress = reinterpret_cast<intptr_t>(ccStaticSpecialDataAddress);\n+      offsetOfSnippetOrCompiledMethod = static_cast<int32_t>(offsetof(ccUnresolvedStaticSpecialData, snippetOrCompiledMethod));\n+      }\n+\n+   TR::LabelSymbol *snippetLabel = generateLabelSymbol(cg());\n+   TR::LabelSymbol *doneLabel = generateLabelSymbol(cg());\n+   TR::Snippet *callSnippet = new (trHeapMemory()) TR::S390J9CallSnippetRX(cg(),\n+                                                                           callNode,\n+                                                                           snippetLabel,\n+                                                                           doneLabel,\n+                                                                           callSymRef,\n+                                                                           argSize,\n+                                                                           callSnippetCCDataAddress);\n+   void *targetAddress = reinterpret_cast<void *>(callSnippetCCDataAddress + static_cast<intptr_t>(offsetOfSnippetOrCompiledMethod));\n+   TR::StaticSymbol *snippetOrCompiledSlotSymbol = TR::StaticSymbol::createWithAddress(comp()->trHeapMemory(), TR::Address, targetAddress);\n+   TR::SymbolReference *snippetOrCompiledSlotSymRef = new (comp()->trHeapMemory()) TR::SymbolReference(comp()->getSymRefTab(), snippetOrCompiledSlotSymbol, 0);\n+   snippetOrCompiledSlotSymbol->setNotDataAddress();\n+\n+   TR::RegisterDependencyConditions *preDeps = new (trHeapMemory()) TR::RegisterDependencyConditions(dependencies->getPreConditions(), NULL,\n+                                                                                                      dependencies->getAddCursorForPre(), 0, cg());\n+\n+   int32_t numOfAdditionalPostDeps = 0;\n+   TR::Register *regRA = dependencies->searchPostConditionRegister(getReturnAddressRegister());\n+   if (regRA == NULL)\n+      {\n+      regRA = cg()->allocateRegister();\n+      numOfAdditionalPostDeps+=1;\n+      }\n+\n+   TR::Register *regEP = dependencies->searchPostConditionRegister(getEntryPointRegister());\n+   if (regEP == NULL)\n+      {\n+      regEP = cg()->allocateRegister();\n+      numOfAdditionalPostDeps+=1;\n+      }\n+\n+   TR::RegisterDependencyConditions *postDeps = new (trHeapMemory()) TR::RegisterDependencyConditions(dependencies, 0, numOfAdditionalPostDeps, cg());\n+   postDeps->setAddCursorForPre(0);\n+   postDeps->setNumPreConditions(0, trMemory());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMzMTA4OA=="}, "originalCommit": {"oid": "9a9d9b37daeb983c8d4e295fcc785afeecde5d78"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MzgzNDM1OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/z/codegen/S390PrivateLinkage.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNzowNzo0NVrOH0_12A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNjo0Mjo0OFrOH12-wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMzMzk3Ng==", "bodyText": "Why not change the type of callSnippet to be TR::S390J9CallSnippetRX* at the declaration point so we can avoid this cast here?", "url": "https://github.com/eclipse-openj9/openj9/pull/11141#discussion_r525333976", "createdAt": "2020-11-17T17:07:45Z", "author": {"login": "fjeremic"}, "path": "runtime/compiler/z/codegen/S390PrivateLinkage.cpp", "diffHunk": "@@ -2562,6 +2564,111 @@ J9::Z::PrivateLinkage::buildVirtualDispatch(TR::Node * callNode, TR::RegisterDep\n    gcPoint->setNeedsGCMap(getPreservedRegisterMapForGC());\n    }\n \n+TR::Instruction *\n+J9::Z::PrivateLinkage::buildNoPatchingStaticOrSpecialCall(TR::Node *callNode, TR::SymbolReference *callSymRef,\n+   TR::RegisterDependencyConditions *dependencies, int32_t argSize)\n+   {\n+   OMR::CCData *codeCacheData = cg()->getCodeCache()->manager()->getCodeCacheData();\n+   OMR::CCData::index_t index;\n+   intptr_t callSnippetCCDataAddress = NULL;\n+   int32_t  offsetOfSnippetOrCompiledMethod = 0;\n+   if (callSymRef->isUnresolved() || (comp()->compileRelocatableCode() && !comp()->getOption(TR_UseSymbolValidationManager)))\n+      {\n+      // Call Is unresolved. Allocate a CCData.\n+      if (!(codeCacheData->put(NULL, sizeof(ccUnresolvedStaticSpecialData), alignof(ccUnresolvedStaticSpecialData), NULL, index)))\n+         {\n+         cg()->comp()->failCompilation<TR::CompilationException>(\"Could not allocate metadata for static or special call\");\n+         }\n+\n+      ccUnresolvedStaticSpecialData *ccUnresolvedStaticSpecialDataAddress = codeCacheData->get<ccUnresolvedStaticSpecialData>(index);\n+\n+      // Shape of the ccData\n+      // snippetOrCompiledMethod -> to be updated in binary encoding while emitting snippet body\n+      // ramMethod -> Should be NULL for Unresolved\n+      // cpAddress -> Filled here\n+      // cpIndex   -> Filled here\n+\n+      ccUnresolvedStaticSpecialDataAddress->cpAddress = reinterpret_cast<intptr_t>(callNode->getSymbolReference()->getOwningMethod(cg()->comp())->constantPool());\n+      ccUnresolvedStaticSpecialDataAddress->ramMethod = 0;\n+      ccUnresolvedStaticSpecialDataAddress->cpIndex   = static_cast<intptr_t>(callNode->getSymbolReference()->getCPIndexForVM());\n+      callSnippetCCDataAddress = reinterpret_cast<intptr_t>(ccUnresolvedStaticSpecialDataAddress);\n+      offsetOfSnippetOrCompiledMethod = static_cast<int32_t>(offsetof(ccUnresolvedStaticSpecialData, snippetOrCompiledMethod));\n+      }\n+   else\n+      {\n+      if (!(codeCacheData->put(NULL, sizeof(ccStaticSpecialData), alignof(ccStaticSpecialData), NULL, index)))\n+         {\n+         cg()->comp()->failCompilation<TR::CompilationException>(\"Could not allocate metadata for static or special call\");\n+         }\n+\n+      ccStaticSpecialData *ccStaticSpecialDataAddress = codeCacheData->get<ccStaticSpecialData>(index);\n+\n+      // Shape of the ccData\n+      // snippetOrCompiledMethod -> to be updated in binary encoding while emitting snippet body\n+      // ramMethod -> Filled Here\n+      TR::MethodSymbol *methodSymbol = callSymRef->getSymbol()->castToMethodSymbol();\n+      intptr_t ramMethod;\n+#if defined(J9VM_OPT_JITSERVER)\n+      ramMethod = comp()->isOutOfProcessCompilation() && methodSymbol->isInterpreted() ?\n+                     static_cast<intptr_t>(callSymRef->getSymbol()->castToResolvedMethodSymbol()->getResolvedMethod()->getPersistentIdentifier()) :\n+                     static_cast<intptr_t>(methodSymbol->getMethodAddress());\n+#else\n+      ramMethod = reinterpret_cast<intptr_t>(methodSymbol->getMethodAddress());\n+#endif\n+      ccStaticSpecialDataAddress->ramMethod = ramMethod;\n+      callSnippetCCDataAddress = reinterpret_cast<intptr_t>(ccStaticSpecialDataAddress);\n+      offsetOfSnippetOrCompiledMethod = static_cast<int32_t>(offsetof(ccUnresolvedStaticSpecialData, snippetOrCompiledMethod));\n+      }\n+\n+   TR::LabelSymbol *snippetLabel = generateLabelSymbol(cg());\n+   TR::LabelSymbol *doneLabel = generateLabelSymbol(cg());\n+   TR::Snippet *callSnippet = new (trHeapMemory()) TR::S390J9CallSnippetRX(cg(),\n+                                                                           callNode,\n+                                                                           snippetLabel,\n+                                                                           doneLabel,\n+                                                                           callSymRef,\n+                                                                           argSize,\n+                                                                           callSnippetCCDataAddress);\n+   void *targetAddress = reinterpret_cast<void *>(callSnippetCCDataAddress + static_cast<intptr_t>(offsetOfSnippetOrCompiledMethod));\n+   TR::StaticSymbol *snippetOrCompiledSlotSymbol = TR::StaticSymbol::createWithAddress(comp()->trHeapMemory(), TR::Address, targetAddress);\n+   TR::SymbolReference *snippetOrCompiledSlotSymRef = new (comp()->trHeapMemory()) TR::SymbolReference(comp()->getSymRefTab(), snippetOrCompiledSlotSymbol, 0);\n+   snippetOrCompiledSlotSymbol->setNotDataAddress();\n+\n+   TR::RegisterDependencyConditions *preDeps = new (trHeapMemory()) TR::RegisterDependencyConditions(dependencies->getPreConditions(), NULL,\n+                                                                                                      dependencies->getAddCursorForPre(), 0, cg());\n+\n+   int32_t numOfAdditionalPostDeps = 0;\n+   TR::Register *regRA = dependencies->searchPostConditionRegister(getReturnAddressRegister());\n+   if (regRA == NULL)\n+      {\n+      regRA = cg()->allocateRegister();\n+      numOfAdditionalPostDeps+=1;\n+      }\n+\n+   TR::Register *regEP = dependencies->searchPostConditionRegister(getEntryPointRegister());\n+   if (regEP == NULL)\n+      {\n+      regEP = cg()->allocateRegister();\n+      numOfAdditionalPostDeps+=1;\n+      }\n+\n+   TR::RegisterDependencyConditions *postDeps = new (trHeapMemory()) TR::RegisterDependencyConditions(dependencies, 0, numOfAdditionalPostDeps, cg());\n+   postDeps->setAddCursorForPre(0);\n+   postDeps->setNumPreConditions(0, trMemory());\n+   postDeps->addPostConditionIfNotAlreadyInserted(regRA, getReturnAddressRegister());\n+   postDeps->addPostConditionIfNotAlreadyInserted(regEP, getEntryPointRegister());\n+\n+   TR::Instruction *cursor = generateS390LabelInstruction(cg(), TR::InstOpCode::LABEL, callNode, generateLabelSymbol(cg()), preDeps);\n+   cursor = generateRILInstruction(cg(), TR::InstOpCode::LGRL, callNode, regRA, snippetOrCompiledSlotSymRef, targetAddress, cursor);\n+   cursor = generateRRInstruction(cg(), TR::InstOpCode::BASR, callNode, regRA, regRA, postDeps, cursor);\n+   ((TR::S390J9CallSnippetRX *)callSnippet)->setBranchInstruction(cursor);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a9d9b37daeb983c8d4e295fcc785afeecde5d78"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjIzNzM3OA==", "bodyText": "set branch instruction was added later so forgot to change the type. Fixed this in https://github.com/eclipse/openj9/compare/9a9d9b37daeb983c8d4e295fcc785afeecde5d78..de725983cd06ff96468a76b30321d3f8bb48caea", "url": "https://github.com/eclipse-openj9/openj9/pull/11141#discussion_r526237378", "createdAt": "2020-11-18T16:42:48Z", "author": {"login": "r30shah"}, "path": "runtime/compiler/z/codegen/S390PrivateLinkage.cpp", "diffHunk": "@@ -2562,6 +2564,111 @@ J9::Z::PrivateLinkage::buildVirtualDispatch(TR::Node * callNode, TR::RegisterDep\n    gcPoint->setNeedsGCMap(getPreservedRegisterMapForGC());\n    }\n \n+TR::Instruction *\n+J9::Z::PrivateLinkage::buildNoPatchingStaticOrSpecialCall(TR::Node *callNode, TR::SymbolReference *callSymRef,\n+   TR::RegisterDependencyConditions *dependencies, int32_t argSize)\n+   {\n+   OMR::CCData *codeCacheData = cg()->getCodeCache()->manager()->getCodeCacheData();\n+   OMR::CCData::index_t index;\n+   intptr_t callSnippetCCDataAddress = NULL;\n+   int32_t  offsetOfSnippetOrCompiledMethod = 0;\n+   if (callSymRef->isUnresolved() || (comp()->compileRelocatableCode() && !comp()->getOption(TR_UseSymbolValidationManager)))\n+      {\n+      // Call Is unresolved. Allocate a CCData.\n+      if (!(codeCacheData->put(NULL, sizeof(ccUnresolvedStaticSpecialData), alignof(ccUnresolvedStaticSpecialData), NULL, index)))\n+         {\n+         cg()->comp()->failCompilation<TR::CompilationException>(\"Could not allocate metadata for static or special call\");\n+         }\n+\n+      ccUnresolvedStaticSpecialData *ccUnresolvedStaticSpecialDataAddress = codeCacheData->get<ccUnresolvedStaticSpecialData>(index);\n+\n+      // Shape of the ccData\n+      // snippetOrCompiledMethod -> to be updated in binary encoding while emitting snippet body\n+      // ramMethod -> Should be NULL for Unresolved\n+      // cpAddress -> Filled here\n+      // cpIndex   -> Filled here\n+\n+      ccUnresolvedStaticSpecialDataAddress->cpAddress = reinterpret_cast<intptr_t>(callNode->getSymbolReference()->getOwningMethod(cg()->comp())->constantPool());\n+      ccUnresolvedStaticSpecialDataAddress->ramMethod = 0;\n+      ccUnresolvedStaticSpecialDataAddress->cpIndex   = static_cast<intptr_t>(callNode->getSymbolReference()->getCPIndexForVM());\n+      callSnippetCCDataAddress = reinterpret_cast<intptr_t>(ccUnresolvedStaticSpecialDataAddress);\n+      offsetOfSnippetOrCompiledMethod = static_cast<int32_t>(offsetof(ccUnresolvedStaticSpecialData, snippetOrCompiledMethod));\n+      }\n+   else\n+      {\n+      if (!(codeCacheData->put(NULL, sizeof(ccStaticSpecialData), alignof(ccStaticSpecialData), NULL, index)))\n+         {\n+         cg()->comp()->failCompilation<TR::CompilationException>(\"Could not allocate metadata for static or special call\");\n+         }\n+\n+      ccStaticSpecialData *ccStaticSpecialDataAddress = codeCacheData->get<ccStaticSpecialData>(index);\n+\n+      // Shape of the ccData\n+      // snippetOrCompiledMethod -> to be updated in binary encoding while emitting snippet body\n+      // ramMethod -> Filled Here\n+      TR::MethodSymbol *methodSymbol = callSymRef->getSymbol()->castToMethodSymbol();\n+      intptr_t ramMethod;\n+#if defined(J9VM_OPT_JITSERVER)\n+      ramMethod = comp()->isOutOfProcessCompilation() && methodSymbol->isInterpreted() ?\n+                     static_cast<intptr_t>(callSymRef->getSymbol()->castToResolvedMethodSymbol()->getResolvedMethod()->getPersistentIdentifier()) :\n+                     static_cast<intptr_t>(methodSymbol->getMethodAddress());\n+#else\n+      ramMethod = reinterpret_cast<intptr_t>(methodSymbol->getMethodAddress());\n+#endif\n+      ccStaticSpecialDataAddress->ramMethod = ramMethod;\n+      callSnippetCCDataAddress = reinterpret_cast<intptr_t>(ccStaticSpecialDataAddress);\n+      offsetOfSnippetOrCompiledMethod = static_cast<int32_t>(offsetof(ccUnresolvedStaticSpecialData, snippetOrCompiledMethod));\n+      }\n+\n+   TR::LabelSymbol *snippetLabel = generateLabelSymbol(cg());\n+   TR::LabelSymbol *doneLabel = generateLabelSymbol(cg());\n+   TR::Snippet *callSnippet = new (trHeapMemory()) TR::S390J9CallSnippetRX(cg(),\n+                                                                           callNode,\n+                                                                           snippetLabel,\n+                                                                           doneLabel,\n+                                                                           callSymRef,\n+                                                                           argSize,\n+                                                                           callSnippetCCDataAddress);\n+   void *targetAddress = reinterpret_cast<void *>(callSnippetCCDataAddress + static_cast<intptr_t>(offsetOfSnippetOrCompiledMethod));\n+   TR::StaticSymbol *snippetOrCompiledSlotSymbol = TR::StaticSymbol::createWithAddress(comp()->trHeapMemory(), TR::Address, targetAddress);\n+   TR::SymbolReference *snippetOrCompiledSlotSymRef = new (comp()->trHeapMemory()) TR::SymbolReference(comp()->getSymRefTab(), snippetOrCompiledSlotSymbol, 0);\n+   snippetOrCompiledSlotSymbol->setNotDataAddress();\n+\n+   TR::RegisterDependencyConditions *preDeps = new (trHeapMemory()) TR::RegisterDependencyConditions(dependencies->getPreConditions(), NULL,\n+                                                                                                      dependencies->getAddCursorForPre(), 0, cg());\n+\n+   int32_t numOfAdditionalPostDeps = 0;\n+   TR::Register *regRA = dependencies->searchPostConditionRegister(getReturnAddressRegister());\n+   if (regRA == NULL)\n+      {\n+      regRA = cg()->allocateRegister();\n+      numOfAdditionalPostDeps+=1;\n+      }\n+\n+   TR::Register *regEP = dependencies->searchPostConditionRegister(getEntryPointRegister());\n+   if (regEP == NULL)\n+      {\n+      regEP = cg()->allocateRegister();\n+      numOfAdditionalPostDeps+=1;\n+      }\n+\n+   TR::RegisterDependencyConditions *postDeps = new (trHeapMemory()) TR::RegisterDependencyConditions(dependencies, 0, numOfAdditionalPostDeps, cg());\n+   postDeps->setAddCursorForPre(0);\n+   postDeps->setNumPreConditions(0, trMemory());\n+   postDeps->addPostConditionIfNotAlreadyInserted(regRA, getReturnAddressRegister());\n+   postDeps->addPostConditionIfNotAlreadyInserted(regEP, getEntryPointRegister());\n+\n+   TR::Instruction *cursor = generateS390LabelInstruction(cg(), TR::InstOpCode::LABEL, callNode, generateLabelSymbol(cg()), preDeps);\n+   cursor = generateRILInstruction(cg(), TR::InstOpCode::LGRL, callNode, regRA, snippetOrCompiledSlotSymRef, targetAddress, cursor);\n+   cursor = generateRRInstruction(cg(), TR::InstOpCode::BASR, callNode, regRA, regRA, postDeps, cursor);\n+   ((TR::S390J9CallSnippetRX *)callSnippet)->setBranchInstruction(cursor);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMzMzk3Ng=="}, "originalCommit": {"oid": "9a9d9b37daeb983c8d4e295fcc785afeecde5d78"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5Mzg0Mjk4OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/z/codegen/S390J9CallSnippet.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNzowOTo0N1rOH0_7Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNjo0MTo0N1rOH127lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMzNTM0Mg==", "bodyText": "This comment is not very useful. It does not say anything more than the code already does.", "url": "https://github.com/eclipse-openj9/openj9/pull/11141#discussion_r525335342", "createdAt": "2020-11-17T17:09:47Z", "author": {"login": "fjeremic"}, "path": "runtime/compiler/z/codegen/S390J9CallSnippet.cpp", "diffHunk": "@@ -1718,3 +1720,183 @@ TR::S390InterfaceCallReadOnlySnippet::getLength(int32_t estimatedSnippetStart)\n            + sizeof(int32_t)  /*RIP offset to PICSlot data address*/\n            + sizeof(int32_t);  /*RIP offset to instruction in mainline*/\n    }\n+ \n+uint8_t *\n+TR::S390J9CallSnippetRX::emitSnippetBody()\n+   {\n+   uint8_t *cursor = cg()->getBinaryBufferCursor();\n+   TR::SymbolReference *callSymRef = getRealMethodSymbolReference();\n+   TR::Node *callNode = getNode();\n+   getSnippetLabel()->setCodeLocation(cursor);\n+   cursor = S390flushArgumentsToStack(cursor, getNode(), getSizeOfArguments(), cg());\n+\n+   //Check if the call is unresolved", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a9d9b37daeb983c8d4e295fcc785afeecde5d78"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjIzNjU2NA==", "bodyText": "Removed in https://github.com/eclipse/openj9/compare/9a9d9b37daeb983c8d4e295fcc785afeecde5d78..de725983cd06ff96468a76b30321d3f8bb48caea", "url": "https://github.com/eclipse-openj9/openj9/pull/11141#discussion_r526236564", "createdAt": "2020-11-18T16:41:47Z", "author": {"login": "r30shah"}, "path": "runtime/compiler/z/codegen/S390J9CallSnippet.cpp", "diffHunk": "@@ -1718,3 +1720,183 @@ TR::S390InterfaceCallReadOnlySnippet::getLength(int32_t estimatedSnippetStart)\n            + sizeof(int32_t)  /*RIP offset to PICSlot data address*/\n            + sizeof(int32_t);  /*RIP offset to instruction in mainline*/\n    }\n+ \n+uint8_t *\n+TR::S390J9CallSnippetRX::emitSnippetBody()\n+   {\n+   uint8_t *cursor = cg()->getBinaryBufferCursor();\n+   TR::SymbolReference *callSymRef = getRealMethodSymbolReference();\n+   TR::Node *callNode = getNode();\n+   getSnippetLabel()->setCodeLocation(cursor);\n+   cursor = S390flushArgumentsToStack(cursor, getNode(), getSizeOfArguments(), cg());\n+\n+   //Check if the call is unresolved", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMzNTM0Mg=="}, "originalCommit": {"oid": "9a9d9b37daeb983c8d4e295fcc785afeecde5d78"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5Mzg1MjM1OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/z/codegen/S390J9CallSnippet.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNzoxMTo0OVrOH1ABFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNjo0MTozOFrOH127OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMzNjg1NA==", "bodyText": "Adding a new line right before a comment can go a long way to improve readability and emphasize a logical block of code. Otherwise it just looks like one giant blob of code.", "url": "https://github.com/eclipse-openj9/openj9/pull/11141#discussion_r525336854", "createdAt": "2020-11-17T17:11:49Z", "author": {"login": "fjeremic"}, "path": "runtime/compiler/z/codegen/S390J9CallSnippet.cpp", "diffHunk": "@@ -1718,3 +1720,183 @@ TR::S390InterfaceCallReadOnlySnippet::getLength(int32_t estimatedSnippetStart)\n            + sizeof(int32_t)  /*RIP offset to PICSlot data address*/\n            + sizeof(int32_t);  /*RIP offset to instruction in mainline*/\n    }\n+ \n+uint8_t *\n+TR::S390J9CallSnippetRX::emitSnippetBody()\n+   {\n+   uint8_t *cursor = cg()->getBinaryBufferCursor();\n+   TR::SymbolReference *callSymRef = getRealMethodSymbolReference();\n+   TR::Node *callNode = getNode();\n+   getSnippetLabel()->setCodeLocation(cursor);\n+   cursor = S390flushArgumentsToStack(cursor, getNode(), getSizeOfArguments(), cg());\n+\n+   //Check if the call is unresolved\n+   if (callSymRef->isUnresolved() || (cg()->comp()->compileRelocatableCode() && !cg()->comp()->getOption(TR_UseSymbolValidationManager)))\n+      {\n+      typedef J9::Z::PrivateLinkage::ccUnresolvedStaticSpecialData ccUnresolvedStaticSpecialData;\n+      ccUnresolvedStaticSpecialData *ccDataAddress = reinterpret_cast<ccUnresolvedStaticSpecialData *>(callSnippetCCDataAddress);\n+      ccDataAddress->snippetOrCompiledMethod = reinterpret_cast<intptr_t>(getSnippetLabel()->getCodeLocation());\n+      // LGRL  rEP, @(CCUnresolvedStaticOrSpecialData + ramMethod)\n+      intptr_t instrAddr = reinterpret_cast<intptr_t>(cursor);\n+      *cursor = static_cast<uint8_t>(0xC4);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a9d9b37daeb983c8d4e295fcc785afeecde5d78"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjIzNjQ3Mg==", "bodyText": "That makes sense, sorry for the mess. Tried to add more new lines to make call more readable in https://github.com/eclipse/openj9/compare/9a9d9b37daeb983c8d4e295fcc785afeecde5d78..de725983cd06ff96468a76b30321d3f8bb48caea", "url": "https://github.com/eclipse-openj9/openj9/pull/11141#discussion_r526236472", "createdAt": "2020-11-18T16:41:38Z", "author": {"login": "r30shah"}, "path": "runtime/compiler/z/codegen/S390J9CallSnippet.cpp", "diffHunk": "@@ -1718,3 +1720,183 @@ TR::S390InterfaceCallReadOnlySnippet::getLength(int32_t estimatedSnippetStart)\n            + sizeof(int32_t)  /*RIP offset to PICSlot data address*/\n            + sizeof(int32_t);  /*RIP offset to instruction in mainline*/\n    }\n+ \n+uint8_t *\n+TR::S390J9CallSnippetRX::emitSnippetBody()\n+   {\n+   uint8_t *cursor = cg()->getBinaryBufferCursor();\n+   TR::SymbolReference *callSymRef = getRealMethodSymbolReference();\n+   TR::Node *callNode = getNode();\n+   getSnippetLabel()->setCodeLocation(cursor);\n+   cursor = S390flushArgumentsToStack(cursor, getNode(), getSizeOfArguments(), cg());\n+\n+   //Check if the call is unresolved\n+   if (callSymRef->isUnresolved() || (cg()->comp()->compileRelocatableCode() && !cg()->comp()->getOption(TR_UseSymbolValidationManager)))\n+      {\n+      typedef J9::Z::PrivateLinkage::ccUnresolvedStaticSpecialData ccUnresolvedStaticSpecialData;\n+      ccUnresolvedStaticSpecialData *ccDataAddress = reinterpret_cast<ccUnresolvedStaticSpecialData *>(callSnippetCCDataAddress);\n+      ccDataAddress->snippetOrCompiledMethod = reinterpret_cast<intptr_t>(getSnippetLabel()->getCodeLocation());\n+      // LGRL  rEP, @(CCUnresolvedStaticOrSpecialData + ramMethod)\n+      intptr_t instrAddr = reinterpret_cast<intptr_t>(cursor);\n+      *cursor = static_cast<uint8_t>(0xC4);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMzNjg1NA=="}, "originalCommit": {"oid": "9a9d9b37daeb983c8d4e295fcc785afeecde5d78"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5Mzg1NTU0OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/z/codegen/S390J9CallSnippet.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNzoxMjozOFrOH1ADJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNjo0MToxNFrOH126Cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMzNzM4MQ==", "bodyText": "This comment looks incomplete.", "url": "https://github.com/eclipse-openj9/openj9/pull/11141#discussion_r525337381", "createdAt": "2020-11-17T17:12:38Z", "author": {"login": "fjeremic"}, "path": "runtime/compiler/z/codegen/S390J9CallSnippet.cpp", "diffHunk": "@@ -1718,3 +1720,183 @@ TR::S390InterfaceCallReadOnlySnippet::getLength(int32_t estimatedSnippetStart)\n            + sizeof(int32_t)  /*RIP offset to PICSlot data address*/\n            + sizeof(int32_t);  /*RIP offset to instruction in mainline*/\n    }\n+ \n+uint8_t *\n+TR::S390J9CallSnippetRX::emitSnippetBody()\n+   {\n+   uint8_t *cursor = cg()->getBinaryBufferCursor();\n+   TR::SymbolReference *callSymRef = getRealMethodSymbolReference();\n+   TR::Node *callNode = getNode();\n+   getSnippetLabel()->setCodeLocation(cursor);\n+   cursor = S390flushArgumentsToStack(cursor, getNode(), getSizeOfArguments(), cg());\n+\n+   //Check if the call is unresolved\n+   if (callSymRef->isUnresolved() || (cg()->comp()->compileRelocatableCode() && !cg()->comp()->getOption(TR_UseSymbolValidationManager)))\n+      {\n+      typedef J9::Z::PrivateLinkage::ccUnresolvedStaticSpecialData ccUnresolvedStaticSpecialData;\n+      ccUnresolvedStaticSpecialData *ccDataAddress = reinterpret_cast<ccUnresolvedStaticSpecialData *>(callSnippetCCDataAddress);\n+      ccDataAddress->snippetOrCompiledMethod = reinterpret_cast<intptr_t>(getSnippetLabel()->getCodeLocation());\n+      // LGRL  rEP, @(CCUnresolvedStaticOrSpecialData + ramMethod)\n+      intptr_t instrAddr = reinterpret_cast<intptr_t>(cursor);\n+      *cursor = static_cast<uint8_t>(0xC4);\n+      cursor += sizeof(uint8_t);\n+      *reinterpret_cast<int8_t *>(cursor) = static_cast<int8_t>(((cg()->getEntryPointRegister() - 1) << 4 ) + 0x8 );\n+      cursor += sizeof(int8_t);\n+      *reinterpret_cast<int32_t *>(cursor) = static_cast<int32_t>((callSnippetCCDataAddress + offsetof(ccUnresolvedStaticSpecialData, ramMethod) - instrAddr) / 2 );\n+      cursor += sizeof(int32_t);\n+\n+      // CGIJ rEP,0,Label\n+      instrAddr = reinterpret_cast<intptr_t>(cursor);\n+      *reinterpret_cast<int8_t *>(cursor) = static_cast<int8_t>(0xEC);\n+      cursor += sizeof(int8_t);\n+      *reinterpret_cast<int8_t *>(cursor) = static_cast<int16_t>(((cg()->getEntryPointRegister() - 1) << 4 ) + 0x6 );\n+      cursor += sizeof(int8_t);\n+\n+      // Now we need to calculate the instruction address for the resolved case, for now Just Skipping the 4 bytes\n+      cursor += sizeof(int32_t);\n+\n+      TR::SymbolReference *helperGlueSymRef = cg()->symRefTab()->findOrCreateRuntimeHelper(callSymRef->getSymbol()->castToMethodSymbol()->isStatic() ? TR_S390interpretedUnresolvedStaticCallGlueRX : TR_S390interpretedUnresolvedSpecialCallGlueRX,\n+                                                                                             false, false, false);\n+      TR::GlobalFunctionCallData dataDestination(helperGlueSymRef, callNode, cursor, cg(), self());\n+\n+      cursor = cg()->getObjFmt()->encodeGlobalFunctionCall(dataDestination);\n+      // Calling the Encode Global FunctionCall and now update the \n+      ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a9d9b37daeb983c8d4e295fcc785afeecde5d78"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjIzNjE3MA==", "bodyText": "Comment was not needed, removed it in https://github.com/eclipse/openj9/compare/9a9d9b37daeb983c8d4e295fcc785afeecde5d78..de725983cd06ff96468a76b30321d3f8bb48caea", "url": "https://github.com/eclipse-openj9/openj9/pull/11141#discussion_r526236170", "createdAt": "2020-11-18T16:41:14Z", "author": {"login": "r30shah"}, "path": "runtime/compiler/z/codegen/S390J9CallSnippet.cpp", "diffHunk": "@@ -1718,3 +1720,183 @@ TR::S390InterfaceCallReadOnlySnippet::getLength(int32_t estimatedSnippetStart)\n            + sizeof(int32_t)  /*RIP offset to PICSlot data address*/\n            + sizeof(int32_t);  /*RIP offset to instruction in mainline*/\n    }\n+ \n+uint8_t *\n+TR::S390J9CallSnippetRX::emitSnippetBody()\n+   {\n+   uint8_t *cursor = cg()->getBinaryBufferCursor();\n+   TR::SymbolReference *callSymRef = getRealMethodSymbolReference();\n+   TR::Node *callNode = getNode();\n+   getSnippetLabel()->setCodeLocation(cursor);\n+   cursor = S390flushArgumentsToStack(cursor, getNode(), getSizeOfArguments(), cg());\n+\n+   //Check if the call is unresolved\n+   if (callSymRef->isUnresolved() || (cg()->comp()->compileRelocatableCode() && !cg()->comp()->getOption(TR_UseSymbolValidationManager)))\n+      {\n+      typedef J9::Z::PrivateLinkage::ccUnresolvedStaticSpecialData ccUnresolvedStaticSpecialData;\n+      ccUnresolvedStaticSpecialData *ccDataAddress = reinterpret_cast<ccUnresolvedStaticSpecialData *>(callSnippetCCDataAddress);\n+      ccDataAddress->snippetOrCompiledMethod = reinterpret_cast<intptr_t>(getSnippetLabel()->getCodeLocation());\n+      // LGRL  rEP, @(CCUnresolvedStaticOrSpecialData + ramMethod)\n+      intptr_t instrAddr = reinterpret_cast<intptr_t>(cursor);\n+      *cursor = static_cast<uint8_t>(0xC4);\n+      cursor += sizeof(uint8_t);\n+      *reinterpret_cast<int8_t *>(cursor) = static_cast<int8_t>(((cg()->getEntryPointRegister() - 1) << 4 ) + 0x8 );\n+      cursor += sizeof(int8_t);\n+      *reinterpret_cast<int32_t *>(cursor) = static_cast<int32_t>((callSnippetCCDataAddress + offsetof(ccUnresolvedStaticSpecialData, ramMethod) - instrAddr) / 2 );\n+      cursor += sizeof(int32_t);\n+\n+      // CGIJ rEP,0,Label\n+      instrAddr = reinterpret_cast<intptr_t>(cursor);\n+      *reinterpret_cast<int8_t *>(cursor) = static_cast<int8_t>(0xEC);\n+      cursor += sizeof(int8_t);\n+      *reinterpret_cast<int8_t *>(cursor) = static_cast<int16_t>(((cg()->getEntryPointRegister() - 1) << 4 ) + 0x6 );\n+      cursor += sizeof(int8_t);\n+\n+      // Now we need to calculate the instruction address for the resolved case, for now Just Skipping the 4 bytes\n+      cursor += sizeof(int32_t);\n+\n+      TR::SymbolReference *helperGlueSymRef = cg()->symRefTab()->findOrCreateRuntimeHelper(callSymRef->getSymbol()->castToMethodSymbol()->isStatic() ? TR_S390interpretedUnresolvedStaticCallGlueRX : TR_S390interpretedUnresolvedSpecialCallGlueRX,\n+                                                                                             false, false, false);\n+      TR::GlobalFunctionCallData dataDestination(helperGlueSymRef, callNode, cursor, cg(), self());\n+\n+      cursor = cg()->getObjFmt()->encodeGlobalFunctionCall(dataDestination);\n+      // Calling the Encode Global FunctionCall and now update the \n+      ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMzNzM4MQ=="}, "originalCommit": {"oid": "9a9d9b37daeb983c8d4e295fcc785afeecde5d78"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1104, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}