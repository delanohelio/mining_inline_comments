{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwMDkyNTk0", "number": 11166, "title": "Add support for mixed references mode in CMake builds", "bodyText": "Mixed references mode is enabled by specifying --with-mixedrefs=[static|dynamic] in the configure options. If --with-mixedrefs is provided without indicating static or dynamic, static is assumed by default.\nIn static mixed references mode, OMR_MIXED_REFERENCES_MODE_STATIC is enabled in OMR. When this is enabled, two GC libraries will be built:\n\nj9gc/omrgc, where OMR_OVERRIDE_COMPRESS_OBJECT_REFERENCES=1 , and\nj9gc_full/omrgc_full, where OMR_OVERRIDE_COMPRESS_OBJECT_REFERENCES=0\n\nThe other GC libraries are also split into regular and _full in static mode.\nIn full, compressed or mixed dynamic mode, the original \"unsplit\" libraries will continue to be built (i.e. j9gc/omrgc and related GC libraries).\nSummary of Changes\n\nNew CMake SPEC files have been created for each platform/OS to support mixed references mode\nExisting GC library CMakeLists files have been updated for mixed references static mode (build separate _full GC libraries)\nGC library selection has been updated to support the new _full GC libraries when in mixed references static mode\nDocumentation has been added to note --with-mixedrefs=[static|dynamic] is now available (only with CMake)\nJenkins pipeline changes have been added to support building CMake Mixed References mode\n\nNote: GC libraries related to Verbose have not been updated. Investigation is ongoing by the GC team (cc @dmitripivkine). This means that verbose is not supported for the full references GC library in mixed references static mode.\nThese changes only enable mixed references mode with CMake. Once this work is all merged, the equivalent UMA changes will be made.\n\nWhen using a mixedrefs build, you can specify JVM options -Xcompressedrefs or -Xnocompressedrefs to choose between compressed and full pointers.\n\nHere's a list of all the jenkins shortnames to run mixed refs CMake builds. These will run builds with extra configure options --with-mixedrefs and --with-cmake. (This list is up to date with changes from #11459)\naixmxd: ppc64_aix_mixed\nzlinuxmxd: s390x_linux_mixed\nplinuxmxd: ppc64le_linux_mixed\nxlinuxmxd: x86-64_linux_mixed\nwinmxd: x86-64_windows_mixed\nosxmxd: x86-64_mac_mixed\nalinux64mxd: aarch64_linux_mixed\nzosmxd: s390x_zos_mixed // CMake is not currently available for ZOS\n\nIssue Discussion: #8878\nRelated Issue \"Merge compressedrefs and non-compressedrefs tests builds into one\": #9231\nOMR Changes\n\n eclipse/omr#5657\n\nExtensions Changes\n\n JDK8: ibmruntimes/openj9-openjdk-jdk8#458\n JDK11: ibmruntimes/openj9-openjdk-jdk11#359\n JDK15: ibmruntimes/openj9-openjdk-jdk15#43\n JDKNext: ibmruntimes/openj9-openjdk-jdk#250", "createdAt": "2020-11-12T19:00:56Z", "url": "https://github.com/eclipse-openj9/openj9/pull/11166", "merged": true, "mergeCommit": {"oid": "602113a93a87cbb110dcece1c5f017d99e429a9b"}, "closed": true, "closedAt": "2020-12-04T17:42:08Z", "author": {"login": "sharon-wang"}, "timelineItems": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdb3c-WgBqjM5OTAyNDQ4MDk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdgYMCggFqTUzOTUyNDU1Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "245b43abe98680793f0c649f4de90dd87660f4e5", "author": {"user": {"login": "sharon-wang", "name": "Sharon Wang"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/245b43abe98680793f0c649f4de90dd87660f4e5", "committedDate": "2020-11-12T18:38:15Z", "message": "Add pipeline changes to build CMake mixed references mode\n\nSigned-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>"}, "afterCommit": {"oid": "05e6d8f3fb20bb8278b146764bf88fd8de7f3f2a", "author": {"user": {"login": "sharon-wang", "name": "Sharon Wang"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/05e6d8f3fb20bb8278b146764bf88fd8de7f3f2a", "committedDate": "2020-11-12T19:09:29Z", "message": "Add pipeline changes to build CMake mixed references mode\n\nSigned-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5NDM0ODY3", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#pullrequestreview-529434867", "createdAt": "2020-11-12T19:42:24Z", "commit": {"oid": "05e6d8f3fb20bb8278b146764bf88fd8de7f3f2a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxOTo0MjoyNVrOHyLOww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxOTo0MjoyNVrOHyLOww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM3NDg1MQ==", "bodyText": "This pattern repeats multiple places. Does it make sense to create function for it?", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r522374851", "createdAt": "2020-11-12T19:42:25Z", "author": {"login": "dmitripivkine"}, "path": "runtime/gc_modron_startup/mminit.cpp", "diffHunk": "@@ -218,16 +218,26 @@ initializeMutatorModelJava(J9VMThread* vmThread)\n void\n cleanupMutatorModelJava(J9VMThread* vmThread)\n {\n-\tJ9VMDllLoadInfo* loadInfo;\n-\tJ9JavaVM* vm = vmThread->javaVM;\n \tMM_EnvironmentBase *env = MM_EnvironmentBase::getEnvironment(vmThread->omrVMThread);\n \n \tif (NULL != env) {\n+\t\tJ9VMDllLoadInfo *loadInfo = NULL;\n+\t\tJ9JavaVM *vm = vmThread->javaVM;\n+\n+#if defined(OMR_MIXED_REFERENCES_MODE_STATIC)\n+\t\tif (J9JAVAVM_COMPRESS_OBJECT_REFERENCES(vm)) {\n+\t\t\tloadInfo = FIND_DLL_TABLE_ENTRY(J9_GC_DLL_NAME);\n+\t\t} else {\n+\t\t\tloadInfo = FIND_DLL_TABLE_ENTRY(J9_GC_FULL_DLL_NAME);\n+\t\t}\n+#else\n+\t\tloadInfo = FIND_DLL_TABLE_ENTRY(J9_GC_DLL_NAME);\n+#endif /* defined(OMR_MIXED_REFERENCES_MODE_STATIC) */\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05e6d8f3fb20bb8278b146764bf88fd8de7f3f2a"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5NDI1Mjgx", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#pullrequestreview-529425281", "createdAt": "2020-11-12T19:29:12Z", "commit": {"oid": "05e6d8f3fb20bb8278b146764bf88fd8de7f3f2a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxOToyOToxM1rOHyKoBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxOTo1MjowNFrOHyLlug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM2NDkzMg==", "bodyText": "Why are some tests excluded?\nWhy more for this platform than others?\nPlease indent consistently (two spaces per level like the rest of the file).", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r522364932", "createdAt": "2020-11-12T19:29:13Z", "author": {"login": "keithc-ca"}, "path": "buildenv/jenkins/variables/defaults.yml", "diffHunk": "@@ -432,6 +475,21 @@ x86-64_linux_xl:\n     8:\n       - special.system\n #========================================#\n+# Linux x86 64bits Mixed References\n+#========================================#\n+x86-64_linux_mixed:\n+  extends: ['x86-64_linux', 'mixedrefs']\n+  excluded_tests:\n+      - extended.functional\n+      - sanity.system\n+      - extended.system\n+      - special.system", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05e6d8f3fb20bb8278b146764bf88fd8de7f3f2a"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM3NTY2Mg==", "bodyText": "The last line of every text file should have a newline.", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r522375662", "createdAt": "2020-11-12T19:43:45Z", "author": {"login": "keithc-ca"}, "path": "runtime/gc_modron_startup/CMakeLists.txt", "diffHunk": "@@ -52,3 +58,31 @@ target_link_libraries(j9modronstartup\n \t\tj9gcbase\n \t\tj9utilcore\n )\n+\n+if(OMR_MIXED_REFERENCES_MODE_STATIC)\n+\tj9vm_add_library(j9modronstartup_full STATIC\n+\t\t${gc_modron_startup_sources}\n+\t)\n+\n+\ttarget_include_directories(j9modronstartup_full\n+\t\tPUBLIC\n+\t\t\t.\n+\t)\n+\n+\tif(OMR_OS_ZOS)\n+\t\ttarget_include_directories(j9modronstartup_full\n+\t\t\tPRIVATE\n+\t\t\t\t\"${omr_SOURCE_DIR}/port/zos390\"\n+\t\t)\n+\tendif()\n+\n+\ttarget_link_libraries(j9modronstartup_full\n+\t\tPRIVATE\n+\t\t\tj9vm_interface\n+\n+\t\t\tomrgc_full\n+\t\t\tj9gcstats_full\n+\t\t\tj9gcbase_full\n+\t\t\tj9utilcore\n+\t)\n+endif()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05e6d8f3fb20bb8278b146764bf88fd8de7f3f2a"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM3NjcxNg==", "bodyText": "Why the different pattern here (relative to DLLMain.cpp)?", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r522376716", "createdAt": "2020-11-12T19:45:22Z", "author": {"login": "keithc-ca"}, "path": "runtime/gc_modron_startup/mminit.cpp", "diffHunk": "@@ -218,16 +218,26 @@ initializeMutatorModelJava(J9VMThread* vmThread)\n void\n cleanupMutatorModelJava(J9VMThread* vmThread)\n {\n-\tJ9VMDllLoadInfo* loadInfo;\n-\tJ9JavaVM* vm = vmThread->javaVM;\n \tMM_EnvironmentBase *env = MM_EnvironmentBase::getEnvironment(vmThread->omrVMThread);\n \n \tif (NULL != env) {\n+\t\tJ9VMDllLoadInfo *loadInfo = NULL;\n+\t\tJ9JavaVM *vm = vmThread->javaVM;\n+\n+#if defined(OMR_MIXED_REFERENCES_MODE_STATIC)\n+\t\tif (J9JAVAVM_COMPRESS_OBJECT_REFERENCES(vm)) {\n+\t\t\tloadInfo = FIND_DLL_TABLE_ENTRY(J9_GC_DLL_NAME);\n+\t\t} else {\n+\t\t\tloadInfo = FIND_DLL_TABLE_ENTRY(J9_GC_FULL_DLL_NAME);\n+\t\t}\n+#else\n+\t\tloadInfo = FIND_DLL_TABLE_ENTRY(J9_GC_DLL_NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05e6d8f3fb20bb8278b146764bf88fd8de7f3f2a"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM3NjkzNA==", "bodyText": "Same comment as above, here and similar places below.", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r522376934", "createdAt": "2020-11-12T19:45:45Z", "author": {"login": "keithc-ca"}, "path": "runtime/gc_modron_startup/mminit.cpp", "diffHunk": "@@ -311,7 +321,17 @@ j9gc_initialize_heap(J9JavaVM *vm, IDATA *memoryParameterTable, UDATA heapBytesR\n \tMM_EnvironmentBase env(vm->omrVM);\n \tMM_GlobalCollector *globalCollector;\n \tPORT_ACCESS_FROM_JAVAVM(vm);\n-\tJ9VMDllLoadInfo *loadInfo = FIND_DLL_TABLE_ENTRY(THIS_DLL_NAME);\n+\tJ9VMDllLoadInfo *loadInfo = NULL;\n+\n+#if defined(OMR_MIXED_REFERENCES_MODE_STATIC)\n+\tif (J9JAVAVM_COMPRESS_OBJECT_REFERENCES(vm)) {\n+\t\tloadInfo = FIND_DLL_TABLE_ENTRY(J9_GC_DLL_NAME);\n+\t} else {\n+\t\tloadInfo = FIND_DLL_TABLE_ENTRY(J9_GC_FULL_DLL_NAME);\n+\t}\n+#else\n+\tloadInfo = FIND_DLL_TABLE_ENTRY(J9_GC_DLL_NAME);\n+#endif /* defined(OMR_MIXED_REFERENCES_MODE_STATIC) */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05e6d8f3fb20bb8278b146764bf88fd8de7f3f2a"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM4MDczMA==", "bodyText": "This serves no purpose: J9_GC_DLL_NAME and J9_GC_FULL_DLL_NAME are both defined above.", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r522380730", "createdAt": "2020-11-12T19:52:04Z", "author": {"login": "keithc-ca"}, "path": "runtime/include/j9lib.h.in", "diffHunk": "@@ -88,6 +90,9 @@ extern\"C\"{\n #ifndef J9_GC_DLL_NAME\n #define J9_GC_DLL_NAME \"j9gc29\"\n #endif\n+#ifndef J9_GC_FULL_DLL_NAME\n+#define J9_GC_FULL_DLL_NAME \"j9gc_full29\"\n+#endif", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05e6d8f3fb20bb8278b146764bf88fd8de7f3f2a"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwMjcxNzY0", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#pullrequestreview-530271764", "createdAt": "2020-11-13T17:37:55Z", "commit": {"oid": "05e6d8f3fb20bb8278b146764bf88fd8de7f3f2a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNzozNzo1NVrOHy4iNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNzozNzo1NVrOHy4iNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzExNzExMA==", "bodyText": "Please use ! rather than FALSE ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r523117110", "createdAt": "2020-11-13T17:37:55Z", "author": {"login": "gacholio"}, "path": "runtime/compiler/control/DLLMain.cpp", "diffHunk": "@@ -221,7 +221,16 @@ IDATA J9VMDllMain(J9JavaVM* vm, IDATA stage, void * reserved)\n #endif//TR_HOST_X86\n             )\n                {\n-               J9VMDllLoadInfo* gcLoadInfo = FIND_DLL_TABLE_ENTRY( J9_GC_DLL_NAME );\n+               J9VMDllLoadInfo* gcLoadInfo = NULL;\n+               char *gcDLLName = J9_GC_DLL_NAME;\n+\n+#if defined(OMR_MIXED_REFERENCES_MODE_STATIC)\n+               if (FALSE == J9JAVAVM_COMPRESS_OBJECT_REFERENCES(vm)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05e6d8f3fb20bb8278b146764bf88fd8de7f3f2a"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwMjcyMTM2", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#pullrequestreview-530272136", "createdAt": "2020-11-13T17:38:30Z", "commit": {"oid": "05e6d8f3fb20bb8278b146764bf88fd8de7f3f2a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNzozODozMFrOHy4jaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNzozODozMFrOHy4jaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzExNzQxNg==", "bodyText": "Same comment about !", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r523117416", "createdAt": "2020-11-13T17:38:30Z", "author": {"login": "gacholio"}, "path": "runtime/gc/dllinit.c", "diffHunk": "@@ -52,9 +52,17 @@ JVM_OnLoad( JavaVM *jvm, char* commandLineOptions, void *reserved )\n IDATA \n J9VMDllMain(J9JavaVM* vm, IDATA stage, void* reserved) \n {\n-\tJ9VMDllLoadInfo* loadInfo = FIND_DLL_TABLE_ENTRY( THIS_DLL_NAME );\n+\tJ9VMDllLoadInfo *loadInfo = NULL;\n \tIDATA rc = J9VMDLLMAIN_OK;\n-\t\n+\tchar *gcDLLName = J9_GC_DLL_NAME;\n+\n+#if defined(OMR_MIXED_REFERENCES_MODE_STATIC)\n+\tif (FALSE == J9JAVAVM_COMPRESS_OBJECT_REFERENCES(vm)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05e6d8f3fb20bb8278b146764bf88fd8de7f3f2a"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwMjc0MTM5", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#pullrequestreview-530274139", "createdAt": "2020-11-13T17:41:23Z", "commit": {"oid": "05e6d8f3fb20bb8278b146764bf88fd8de7f3f2a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNzo0MToyM1rOHy4pdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNzo0MToyM1rOHy4pdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzExODk2Nw==", "bodyText": "This could be done without the #else. The pattern used for most of the rest of the code is:\n#if static\nif (!compressed) {\n  info = gc_full\n} else\n#endif \n{\n  info = gc\n}", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r523118967", "createdAt": "2020-11-13T17:41:23Z", "author": {"login": "gacholio"}, "path": "runtime/gc_modron_startup/mminit.cpp", "diffHunk": "@@ -218,16 +218,26 @@ initializeMutatorModelJava(J9VMThread* vmThread)\n void\n cleanupMutatorModelJava(J9VMThread* vmThread)\n {\n-\tJ9VMDllLoadInfo* loadInfo;\n-\tJ9JavaVM* vm = vmThread->javaVM;\n \tMM_EnvironmentBase *env = MM_EnvironmentBase::getEnvironment(vmThread->omrVMThread);\n \n \tif (NULL != env) {\n+\t\tJ9VMDllLoadInfo *loadInfo = NULL;\n+\t\tJ9JavaVM *vm = vmThread->javaVM;\n+\n+#if defined(OMR_MIXED_REFERENCES_MODE_STATIC)\n+\t\tif (J9JAVAVM_COMPRESS_OBJECT_REFERENCES(vm)) {\n+\t\t\tloadInfo = FIND_DLL_TABLE_ENTRY(J9_GC_DLL_NAME);\n+\t\t} else {\n+\t\t\tloadInfo = FIND_DLL_TABLE_ENTRY(J9_GC_FULL_DLL_NAME);\n+\t\t}\n+#else\n+\t\tloadInfo = FIND_DLL_TABLE_ENTRY(J9_GC_DLL_NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05e6d8f3fb20bb8278b146764bf88fd8de7f3f2a"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwMjc0NTgy", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#pullrequestreview-530274582", "createdAt": "2020-11-13T17:42:03Z", "commit": {"oid": "05e6d8f3fb20bb8278b146764bf88fd8de7f3f2a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNzo0MjowM1rOHy4qxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNzo0MjowM1rOHy4qxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzExOTMwMw==", "bodyText": "Same comment as above - isn't this moving into a function?", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r523119303", "createdAt": "2020-11-13T17:42:03Z", "author": {"login": "gacholio"}, "path": "runtime/gc_modron_startup/mminit.cpp", "diffHunk": "@@ -311,7 +321,17 @@ j9gc_initialize_heap(J9JavaVM *vm, IDATA *memoryParameterTable, UDATA heapBytesR\n \tMM_EnvironmentBase env(vm->omrVM);\n \tMM_GlobalCollector *globalCollector;\n \tPORT_ACCESS_FROM_JAVAVM(vm);\n-\tJ9VMDllLoadInfo *loadInfo = FIND_DLL_TABLE_ENTRY(THIS_DLL_NAME);\n+\tJ9VMDllLoadInfo *loadInfo = NULL;\n+\n+#if defined(OMR_MIXED_REFERENCES_MODE_STATIC)\n+\tif (J9JAVAVM_COMPRESS_OBJECT_REFERENCES(vm)) {\n+\t\tloadInfo = FIND_DLL_TABLE_ENTRY(J9_GC_DLL_NAME);\n+\t} else {\n+\t\tloadInfo = FIND_DLL_TABLE_ENTRY(J9_GC_FULL_DLL_NAME);\n+\t}\n+#else", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05e6d8f3fb20bb8278b146764bf88fd8de7f3f2a"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwMjc0Njcw", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#pullrequestreview-530274670", "createdAt": "2020-11-13T17:42:11Z", "commit": {"oid": "05e6d8f3fb20bb8278b146764bf88fd8de7f3f2a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNzo0MjoxMVrOHy4rGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNzo0MjoxMVrOHy4rGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzExOTM4NA==", "bodyText": "Same comment as above - isn't this moving into a function?", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r523119384", "createdAt": "2020-11-13T17:42:11Z", "author": {"login": "gacholio"}, "path": "runtime/gc_modron_startup/mminit.cpp", "diffHunk": "@@ -515,7 +535,17 @@ gcInitializeHeapStructures(J9JavaVM *vm)\n \n \tMM_MemorySpace *defaultMemorySpace;\n \tMM_GCExtensions *extensions = MM_GCExtensions::getExtensions(vm);\n-\tJ9VMDllLoadInfo *loadInfo = FIND_DLL_TABLE_ENTRY(THIS_DLL_NAME);\n+\tJ9VMDllLoadInfo *loadInfo = NULL;\n+\n+#if defined(OMR_MIXED_REFERENCES_MODE_STATIC)\n+\tif (J9JAVAVM_COMPRESS_OBJECT_REFERENCES(vm)) {\n+\t\tloadInfo = FIND_DLL_TABLE_ENTRY(J9_GC_DLL_NAME);\n+\t} else {\n+\t\tloadInfo = FIND_DLL_TABLE_ENTRY(J9_GC_FULL_DLL_NAME);\n+\t}\n+#else", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05e6d8f3fb20bb8278b146764bf88fd8de7f3f2a"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwMjc0Nzc4", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#pullrequestreview-530274778", "createdAt": "2020-11-13T17:42:19Z", "commit": {"oid": "05e6d8f3fb20bb8278b146764bf88fd8de7f3f2a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNzo0MjoxOVrOHy4rZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNzo0MjoxOVrOHy4rZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzExOTQ2MA==", "bodyText": "Same comment as above - isn't this moving into a function?", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r523119460", "createdAt": "2020-11-13T17:42:19Z", "author": {"login": "gacholio"}, "path": "runtime/gc_modron_startup/mminit.cpp", "diffHunk": "@@ -2831,7 +2861,17 @@ configurateGCWithPolicyAndOptions(OMR_VM* omrVM)\n jint\n gcInitializeDefaults(J9JavaVM* vm)\n {\n-\tJ9VMDllLoadInfo *loadInfo = FIND_DLL_TABLE_ENTRY(THIS_DLL_NAME);\n+\tJ9VMDllLoadInfo *loadInfo = NULL;\n+\n+#if defined(OMR_MIXED_REFERENCES_MODE_STATIC)\n+\tif (J9JAVAVM_COMPRESS_OBJECT_REFERENCES(vm)) {\n+\t\tloadInfo = FIND_DLL_TABLE_ENTRY(J9_GC_DLL_NAME);\n+\t} else {\n+\t\tloadInfo = FIND_DLL_TABLE_ENTRY(J9_GC_FULL_DLL_NAME);\n+\t}\n+#else", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05e6d8f3fb20bb8278b146764bf88fd8de7f3f2a"}, "originalPosition": 81}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "05e6d8f3fb20bb8278b146764bf88fd8de7f3f2a", "author": {"user": {"login": "sharon-wang", "name": "Sharon Wang"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/05e6d8f3fb20bb8278b146764bf88fd8de7f3f2a", "committedDate": "2020-11-12T19:09:29Z", "message": "Add pipeline changes to build CMake mixed references mode\n\nSigned-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>"}, "afterCommit": {"oid": "f1507cdf7fcf2acd9090c0d32e39cd56ee3ae888", "author": {"user": {"login": "sharon-wang", "name": "Sharon Wang"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/f1507cdf7fcf2acd9090c0d32e39cd56ee3ae888", "committedDate": "2020-11-13T18:38:56Z", "message": "Add pipeline changes to build CMake mixed references mode\n\nSigned-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwMzE3MDI0", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#pullrequestreview-530317024", "createdAt": "2020-11-13T18:41:56Z", "commit": {"oid": "f1507cdf7fcf2acd9090c0d32e39cd56ee3ae888"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxODo0MzoyN1rOHy601w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxODo0MzoyN1rOHy601w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE1NDY0Nw==", "bodyText": "@gacholio this is the new helper function", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r523154647", "createdAt": "2020-11-13T18:43:27Z", "author": {"login": "sharon-wang"}, "path": "runtime/gc_modron_startup/mminit.cpp", "diffHunk": "@@ -3217,4 +3216,20 @@ gcCleanupVMHooks(MM_GCExtensionsBase *extensions)\n \t}\n }\n \n+J9VMDllLoadInfo *\n+getGCDllLoadInfo(J9JavaVM *vm)\n+{\n+\tJ9VMDllLoadInfo *loadInfo = NULL;\n+\tconst char *gcDLLName = J9_GC_DLL_NAME;\n+\n+#if defined(OMR_MIXED_REFERENCES_MODE_STATIC)\n+\tif (!J9JAVAVM_COMPRESS_OBJECT_REFERENCES(vm)) {\n+\t\tgcDLLName = J9_GC_FULL_DLL_NAME;\n+\t}\n+#endif /* defined(OMR_MIXED_REFERENCES_MODE_STATIC) */\n+\tloadInfo = FIND_DLL_TABLE_ENTRY(gcDLLName);\n+\n+\treturn loadInfo;\n+}\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1507cdf7fcf2acd9090c0d32e39cd56ee3ae888"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwMzIwNDE1", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#pullrequestreview-530320415", "createdAt": "2020-11-13T18:47:13Z", "commit": {"oid": "f1507cdf7fcf2acd9090c0d32e39cd56ee3ae888"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxODo0NzoxM1rOHy68Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxODo0NzoxM1rOHy68Ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE1NjUxNA==", "bodyText": "Please use the new helper here as it is retrieving the loadInfo.", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r523156514", "createdAt": "2020-11-13T18:47:13Z", "author": {"login": "gacholio"}, "path": "runtime/compiler/control/DLLMain.cpp", "diffHunk": "@@ -221,7 +221,16 @@ IDATA J9VMDllMain(J9JavaVM* vm, IDATA stage, void * reserved)\n #endif//TR_HOST_X86\n             )\n                {\n-               J9VMDllLoadInfo* gcLoadInfo = FIND_DLL_TABLE_ENTRY( J9_GC_DLL_NAME );\n+               J9VMDllLoadInfo* gcLoadInfo = NULL;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1507cdf7fcf2acd9090c0d32e39cd56ee3ae888"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwMzIwNTQ1", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#pullrequestreview-530320545", "createdAt": "2020-11-13T18:47:25Z", "commit": {"oid": "f1507cdf7fcf2acd9090c0d32e39cd56ee3ae888"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxODo0NzoyNVrOHy68hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxODo0NzoyNVrOHy68hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE1NjYxNQ==", "bodyText": "Please use the new helper here as it is retrieving the loadInfo.", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r523156615", "createdAt": "2020-11-13T18:47:25Z", "author": {"login": "gacholio"}, "path": "runtime/gc/dllinit.c", "diffHunk": "@@ -52,9 +52,17 @@ JVM_OnLoad( JavaVM *jvm, char* commandLineOptions, void *reserved )\n IDATA \n J9VMDllMain(J9JavaVM* vm, IDATA stage, void* reserved) \n {\n-\tJ9VMDllLoadInfo* loadInfo = FIND_DLL_TABLE_ENTRY( THIS_DLL_NAME );\n+\tJ9VMDllLoadInfo *loadInfo = NULL;\n \tIDATA rc = J9VMDLLMAIN_OK;\n-\t\n+\tchar *gcDLLName = J9_GC_DLL_NAME;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1507cdf7fcf2acd9090c0d32e39cd56ee3ae888"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyNjMxNTUw", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#pullrequestreview-532631550", "createdAt": "2020-11-17T17:46:08Z", "commit": {"oid": "f1507cdf7fcf2acd9090c0d32e39cd56ee3ae888"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNzo0NjowOVrOH1BdlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNzo1MzoxNFrOH1B5HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM2MDUzMg==", "bodyText": "Why define configurations *_mixed and *_mixed_cm when only *_mixed_cm is supported?", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r525360532", "createdAt": "2020-11-17T17:46:09Z", "author": {"login": "keithc-ca"}, "path": "buildenv/jenkins/variables/defaults.yml", "diffHunk": "@@ -250,6 +255,21 @@ ppc64le_linux_xl_cm:\n ppc64le_linux_xl_uma:\n   extends: ['ppc64le_linux_xl', 'uma']\n #========================================#\n+# Linux PPCLE 64bits Mixed References\n+#========================================#\n+ppc64le_linux_mixed:\n+  extends: ['ppc64le_linux', 'mixedrefs']\n+  excluded_tests:\n+    8:\n+      - special.system\n+    11:\n+      - special.system", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1507cdf7fcf2acd9090c0d32e39cd56ee3ae888"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM2NDc5Nw==", "bodyText": "The type needs to be const char *, else compiles will fail with a warning.", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r525364797", "createdAt": "2020-11-17T17:50:17Z", "author": {"login": "keithc-ca"}, "path": "runtime/compiler/control/DLLMain.cpp", "diffHunk": "@@ -221,7 +221,16 @@ IDATA J9VMDllMain(J9JavaVM* vm, IDATA stage, void * reserved)\n #endif//TR_HOST_X86\n             )\n                {\n-               J9VMDllLoadInfo* gcLoadInfo = FIND_DLL_TABLE_ENTRY( J9_GC_DLL_NAME );\n+               J9VMDllLoadInfo* gcLoadInfo = NULL;\n+               char *gcDLLName = J9_GC_DLL_NAME;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1507cdf7fcf2acd9090c0d32e39cd56ee3ae888"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM2NTg2NA==", "bodyText": "The type needs to be const char *.", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r525365864", "createdAt": "2020-11-17T17:51:02Z", "author": {"login": "keithc-ca"}, "path": "runtime/gc/dllinit.c", "diffHunk": "@@ -52,9 +52,17 @@ JVM_OnLoad( JavaVM *jvm, char* commandLineOptions, void *reserved )\n IDATA \n J9VMDllMain(J9JavaVM* vm, IDATA stage, void* reserved) \n {\n-\tJ9VMDllLoadInfo* loadInfo = FIND_DLL_TABLE_ENTRY( THIS_DLL_NAME );\n+\tJ9VMDllLoadInfo *loadInfo = NULL;\n \tIDATA rc = J9VMDLLMAIN_OK;\n-\t\n+\tchar *gcDLLName = J9_GC_DLL_NAME;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1507cdf7fcf2acd9090c0d32e39cd56ee3ae888"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM2NzQwNA==", "bodyText": "The types need to be const char *.", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r525367404", "createdAt": "2020-11-17T17:52:57Z", "author": {"login": "keithc-ca"}, "path": "runtime/vm/jvminit.c", "diffHunk": "@@ -1192,19 +1192,28 @@ static void loadDLL(void* dllLoadInfo, void* userDataTemp) {\n  *  Every library used by the VM should have an entry here, except for any user Xruns.\n  */\n static J9Pool *\n-initializeDllLoadTable(J9PortLibrary *portLibrary, J9VMInitArgs* j9vm_args, UDATA verboseFlags)\n+initializeDllLoadTable(J9PortLibrary *portLibrary, J9VMInitArgs* j9vm_args, UDATA verboseFlags, J9JavaVM *vm)\n {\n \tJ9Pool *returnVal = pool_new(sizeof(J9VMDllLoadInfo),  0, 0, 0, J9_GET_CALLSITE(), OMRMEM_CATEGORY_VM, POOL_FOR_PORT(portLibrary));\n \tIDATA i;\n \tchar* testString, *options;\n \tJ9VMDllLoadInfo* newEntry;\n \tchar dllNameBuffer[SMALL_STRING_BUF_SIZE];\t\t\t/* Plenty big enough - needs to be at least DLLNAME_LEN */\n+\tchar *gcDLLName = J9_GC_DLL_NAME;\n+\tchar *gccheckDLLName = J9_CHECK_GC_DLL_NAME;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1507cdf7fcf2acd9090c0d32e39cd56ee3ae888"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM2NzU4MQ==", "bodyText": "The type needs to be const char *.", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r525367581", "createdAt": "2020-11-17T17:53:14Z", "author": {"login": "keithc-ca"}, "path": "runtime/vm/xcheck.c", "diffHunk": "@@ -99,8 +99,16 @@ processXCheckOptions(J9JavaVM * vm, J9Pool* loadTable, J9VMInitArgs* j9vm_args)\n \tnoGCIndex = OMR_MAX(noGCIndex, noneIndex);\n \n \tif (gcIndex > noGCIndex) {\n+\t\tchar *gccheckDLLName = J9_CHECK_GC_DLL_NAME;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1507cdf7fcf2acd9090c0d32e39cd56ee3ae888"}, "originalPosition": 11}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f1507cdf7fcf2acd9090c0d32e39cd56ee3ae888", "author": {"user": {"login": "sharon-wang", "name": "Sharon Wang"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/f1507cdf7fcf2acd9090c0d32e39cd56ee3ae888", "committedDate": "2020-11-13T18:38:56Z", "message": "Add pipeline changes to build CMake mixed references mode\n\nSigned-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>"}, "afterCommit": {"oid": "f2fc1ad75c5e3558b55fc8dfdcf6434047d8d005", "author": {"user": {"login": "sharon-wang", "name": "Sharon Wang"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/f2fc1ad75c5e3558b55fc8dfdcf6434047d8d005", "committedDate": "2020-11-18T02:02:18Z", "message": "Add pipeline changes to build CMake mixed references mode\n\nSigned-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f2fc1ad75c5e3558b55fc8dfdcf6434047d8d005", "author": {"user": {"login": "sharon-wang", "name": "Sharon Wang"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/f2fc1ad75c5e3558b55fc8dfdcf6434047d8d005", "committedDate": "2020-11-18T02:02:18Z", "message": "Add pipeline changes to build CMake mixed references mode\n\nSigned-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>"}, "afterCommit": {"oid": "12d56d5cc6803eb492f7795303f23fc74e2886f4", "author": {"user": {"login": "sharon-wang", "name": "Sharon Wang"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/12d56d5cc6803eb492f7795303f23fc74e2886f4", "committedDate": "2020-11-18T02:44:28Z", "message": "Add pipeline changes to build CMake mixed references mode\n\nSigned-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzNTI2MTMx", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#pullrequestreview-533526131", "createdAt": "2020-11-18T14:53:42Z", "commit": {"oid": "12d56d5cc6803eb492f7795303f23fc74e2886f4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzNjI1MDQ3", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#pullrequestreview-533625047", "createdAt": "2020-11-18T16:25:29Z", "commit": {"oid": "12d56d5cc6803eb492f7795303f23fc74e2886f4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNjoyNTozMFrOH12KMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNjoyNTozMFrOH12KMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjIyMzkyMw==", "bodyText": "Putting the prototype in util_api.h would mean not having another include file.", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r526223923", "createdAt": "2020-11-18T16:25:30Z", "author": {"login": "gacholio"}, "path": "runtime/compiler/control/DLLMain.cpp", "diffHunk": "@@ -37,6 +37,7 @@\n #include \"runtime/codertinit.hpp\"\n #include \"rossa.h\"\n \n+#include \"gcloadinfo.h\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12d56d5cc6803eb492f7795303f23fc74e2886f4"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzNjI3NDcy", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#pullrequestreview-533627472", "createdAt": "2020-11-18T16:27:53Z", "commit": {"oid": "12d56d5cc6803eb492f7795303f23fc74e2886f4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNjoyNzo1M1rOH12RdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNjoyNzo1M1rOH12RdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjIyNTc4MQ==", "bodyText": "This help text is questionable - we won't neccessarily be using configure.", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r526225781", "createdAt": "2020-11-18T16:27:53Z", "author": {"login": "gacholio"}, "path": "runtime/redirector/redirector.c", "diffHunk": "@@ -693,22 +699,32 @@ chooseJVM(JavaVMInitArgs *args, char *retBuffer, size_t bufferLength)\n \t\t}\n \t\tfprintf(stdout, \"does not exist.\\n\");\n \n+#if defined(OMR_GC_COMPRESSED_POINTERS) && defined(OMR_GC_FULL_POINTERS)\n+\t\tfprintf(stdout,\n+\t\t\t\t\"This JVM package includes both the '-Xcompressedrefs' and the '-Xnocompressedrefs' \"\n+\t\t\t\t\"configurations, however the VM directory could not be found. Please download the latest \"\n+\t\t\t\t\"JVM package or build with the most recent changes and run the JVM again.\\n\"\n+\t\t);\n+#else\n \t\t/* direct user to OpenJ9 build configurations to properly generate the requested build. */\n \t\tif (0 == strcmp(OPENJ9_NOCR_JVM_DIR, basePointer)) {\n \t\t\tfprintf(stdout,\n \t\t\t\t\t\"This JVM package only includes the '-Xcompressedrefs' configuration. Please run \"\n \t\t\t\t\t\"the VM without specifying the '-Xnocompressedrefs' option or by specifying the \"\n \t\t\t\t\t\"'-Xcompressedrefs' option.\\nTo compile the other configuration, please run configure \"\n-\t\t\t\t\t\"with '--with-noncompressedrefs.\\n\"\n+\t\t\t\t\t\"with '--with-noncompressedrefs', or run configure with '--with-mixedrefs=static' or \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12d56d5cc6803eb492f7795303f23fc74e2886f4"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzNjYyNTAy", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#pullrequestreview-533662502", "createdAt": "2020-11-18T17:01:52Z", "commit": {"oid": "4075a1d94d20d980760e61d8eb2644a13060a6f7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNzowMTo1M1rOH136fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNzowMTo1M1rOH136fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI1MjY3MA==", "bodyText": "@gacholio I think there's something wrong here. This should be the pattern instead?\n#if defined(compressed_pointers) && defined(full_pointers) // in mixed mode\n#if defined(mixed_mode_static)\n\tif (-Xnocompressedrefs was specified)\n                gcDLLName = GC_FULL;\n#else // dynamic mode\n\tif (!compressed_macro_check()) {\n\t\tgcDLLName = GC_FULL;\n\t}\n#endif /* defined(mixed_mode_static) */\n#endif /* defined(compressed_pointers) && defined(full_pointers) */", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r526252670", "createdAt": "2020-11-18T17:01:53Z", "author": {"login": "sharon-wang"}, "path": "runtime/util/gcloadinfo.c", "diffHunk": "@@ -0,0 +1,45 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+\n+#include \"gcloadinfo.h\"\n+\n+/**\n+ * Retrieves the load info for the appropriate GC DLL based on reference mode.\n+ *\n+ * @param vm The Java VM\n+ * @returns J9VMDllLoadInfo for the GC DLL selected\n+ */\n+J9VMDllLoadInfo *\n+getGCDllLoadInfo(J9JavaVM *vm)\n+{\n+\tJ9VMDllLoadInfo *loadInfo = NULL;\n+\tconst char *gcDLLName = J9_GC_DLL_NAME;\n+\n+#if defined(OMR_MIXED_REFERENCES_MODE_STATIC)\n+\tif (!J9JAVAVM_COMPRESS_OBJECT_REFERENCES(vm)) {\n+\t\tgcDLLName = J9_GC_FULL_DLL_NAME;\n+\t}\n+#endif /* defined(OMR_MIXED_REFERENCES_MODE_STATIC) */\n+\tloadInfo = FIND_DLL_TABLE_ENTRY(gcDLLName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4075a1d94d20d980760e61d8eb2644a13060a6f7"}, "originalPosition": 42}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "12d56d5cc6803eb492f7795303f23fc74e2886f4", "author": {"user": {"login": "sharon-wang", "name": "Sharon Wang"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/12d56d5cc6803eb492f7795303f23fc74e2886f4", "committedDate": "2020-11-18T02:44:28Z", "message": "Add pipeline changes to build CMake mixed references mode\n\nSigned-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>"}, "afterCommit": {"oid": "c5ebf9533d87aef25d08caa012bb880bf795ee84", "author": {"user": {"login": "sharon-wang", "name": "Sharon Wang"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/c5ebf9533d87aef25d08caa012bb880bf795ee84", "committedDate": "2020-11-18T20:30:12Z", "message": "Add pipeline changes to build CMake mixed references mode\n\nSigned-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzODU5NzU2", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#pullrequestreview-533859756", "createdAt": "2020-11-18T20:43:46Z", "commit": {"oid": "c5ebf9533d87aef25d08caa012bb880bf795ee84"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzOTIxODU5", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#pullrequestreview-533921859", "createdAt": "2020-11-18T22:09:12Z", "commit": {"oid": "c5ebf9533d87aef25d08caa012bb880bf795ee84"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzOTMxMTE4", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#pullrequestreview-533931118", "createdAt": "2020-11-18T22:23:50Z", "commit": {"oid": "abf56a09f6b20a01f44cbb7f04ba771d87787fa6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMjoyMzo1MVrOH2ExYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMjoyMzo1MVrOH2ExYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ2MzMzMQ==", "bodyText": "This duplicates the setting in https://github.com/eclipse/omr/pull/5657/files, since OMR_MIXED_REFERENCES_MODE_STATIC needs to be set early enough that it is available when building j9vm_gc_glue_full.\nDoes this seem reasonable?", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r526463331", "createdAt": "2020-11-18T22:23:51Z", "author": {"login": "sharon-wang"}, "path": "runtime/cmake/caches/mxdptrs.cmake", "diffHunk": "@@ -0,0 +1,34 @@\n+################################################################################\n+# Copyright (c) 2020, 2020 IBM Corp. and others\n+#\n+# This program and the accompanying materials are made available under\n+# the terms of the Eclipse Public License 2.0 which accompanies this\n+# distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+# or the Apache License, Version 2.0 which accompanies this distribution and\n+# is available at https://www.apache.org/licenses/LICENSE-2.0.\n+#\n+# This Source Code may also be made available under the following\n+# Secondary Licenses when the conditions for such availability set\n+# forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+# General Public License, version 2 with the GNU Classpath\n+# Exception [1] and GNU General Public License, version 2 with the\n+# OpenJDK Assembly Exception [2].\n+#\n+# [1] https://www.gnu.org/software/classpath/license.html\n+# [2] http://openjdk.java.net/legal/assembly-exception.html\n+#\n+# SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+################################################################################\n+\n+set(OMR_GC_POINTER_MODE \"mixed\" CACHE STRING \"\")\n+\n+# OMR_MIXED_REFERENCES_MODE is set to 'static' or 'dynamic' in the extensions CMAKE_ARGS, but a default value is provided here just in case\n+set(OMR_MIXED_REFERENCES_MODE \"static\" CACHE STRING \"\")\n+\n+if(OMR_MIXED_REFERENCES_MODE STREQUAL \"static\")\n+\tset(OMR_MIXED_REFERENCES_MODE_STATIC ON CACHE INTERNAL \"\")\n+else()\n+\tset(OMR_MIXED_REFERENCES_MODE_STATIC OFF CACHE INTERNAL \"\")\n+endif()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abf56a09f6b20a01f44cbb7f04ba771d87787fa6"}, "originalPosition": 32}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae0f27d3e1c52cc66172bfa6a5a21186ace8057d", "author": {"user": {"login": "sharon-wang", "name": "Sharon Wang"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/ae0f27d3e1c52cc66172bfa6a5a21186ace8057d", "committedDate": "2020-11-19T20:14:47Z", "message": "Add support for mixed references mode in CMake builds\n\nCreate new CMake spec files for mixed references mode\n\nUpdate CMakeLists.txt for GC libs to support mixed refs mode\n\nUpdate GC library selection to support mixed references static\n\nAdd configure documentation for --with-mixedrefs=[static|dynamic]\n\nAdd pipeline changes to build CMake mixed references mode\n\nSet OMR_MIXED_REFERENCES_MODE_STATIC in mxdptrs.cmake\n\nDeclare the two glue interface libraries before adding omr\n\nSigned-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "46848fcbf6eede6eb3c40a5ec58272431b3682d9", "author": {"user": {"login": "sharon-wang", "name": "Sharon Wang"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/46848fcbf6eede6eb3c40a5ec58272431b3682d9", "committedDate": "2020-11-19T19:07:14Z", "message": "Declare the two glue interface libraries before adding omr\n\nSigned-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>"}, "afterCommit": {"oid": "ae0f27d3e1c52cc66172bfa6a5a21186ace8057d", "author": {"user": {"login": "sharon-wang", "name": "Sharon Wang"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/ae0f27d3e1c52cc66172bfa6a5a21186ace8057d", "committedDate": "2020-11-19T20:14:47Z", "message": "Add support for mixed references mode in CMake builds\n\nCreate new CMake spec files for mixed references mode\n\nUpdate CMakeLists.txt for GC libs to support mixed refs mode\n\nUpdate GC library selection to support mixed references static\n\nAdd configure documentation for --with-mixedrefs=[static|dynamic]\n\nAdd pipeline changes to build CMake mixed references mode\n\nSet OMR_MIXED_REFERENCES_MODE_STATIC in mxdptrs.cmake\n\nDeclare the two glue interface libraries before adding omr\n\nSigned-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5NTIyNTE4", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#pullrequestreview-539522518", "createdAt": "2020-11-26T19:26:44Z", "commit": {"oid": "ae0f27d3e1c52cc66172bfa6a5a21186ace8057d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxOToyNjo0NFrOH6l0xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxOToyNjo0NFrOH6l0xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE5OTE3Mw==", "bodyText": "copyright bumped here but no changes made to file", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r531199173", "createdAt": "2020-11-26T19:26:44Z", "author": {"login": "dnakamura"}, "path": "runtime/cmake/caches/osx_x86-64_cmprssptrs.cmake", "diffHunk": "@@ -1,5 +1,5 @@\n ################################################################################\n-# Copyright (c) 2018, 2019, 2019 IBM Corp. and others\n+# Copyright (c) 2018, 2020 IBM Corp. and others", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae0f27d3e1c52cc66172bfa6a5a21186ace8057d"}, "originalPosition": 3}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5NTI0NTU2", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#pullrequestreview-539524556", "createdAt": "2020-11-26T19:33:40Z", "commit": {"oid": "ae0f27d3e1c52cc66172bfa6a5a21186ace8057d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxOTozMzo0MVrOH6l8IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxOTozMzo0MVrOH6l8IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIwMTA1Nw==", "bodyText": "is there a reason to use a forward declaration instead of just including gc_glue_java ?", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r531201057", "createdAt": "2020-11-26T19:33:41Z", "author": {"login": "dnakamura"}, "path": "runtime/CMakeLists.txt", "diffHunk": "@@ -299,25 +299,34 @@ target_link_libraries(j9vm_main_wrapper\n # set up glue library target names\n # See https://github.com/eclipse/omr/blob/master/doc/BuildingWithCMake.md\n set(OMR_GC_GLUE_TARGET \"j9vm_gc_glue\" CACHE INTERNAL \"\")\n+set(OMR_GC_GLUE_FULL_TARGET \"j9vm_gc_glue_full\" CACHE INTERNAL \"\")\n set(OMR_RAS_GLUE_TARGET \"j9vm_ras_glue\" CACHE INTERNAL \"\")\n set(OMR_CORE_GLUE_TARGET \"j9vm_core_glue\" CACHE INTERNAL \"\")\n set(OMR_UTIL_GLUE_TARGET \"j9vm_util_glue\" CACHE INTERNAL \"\")\n \n # setup OMR library overrides\n set(OMR_GC_LIB \"j9gc\" CACHE INTERNAL \"\")\n+set(OMR_GC_FULL_LIB \"j9gc_full\" CACHE INTERNAL \"\")\n set(OMR_HOOK_LIB \"j9hookable\" CACHE INTERNAL \"\")\n set(OMR_PORT_LIB \"j9prt\" CACHE INTERNAL \"\")\n set(OMR_THREAD_LIB \"j9thr\" CACHE INTERNAL \"\")\n set(OMR_TRACE_LIB \"j9trc\" CACHE INTERNAL \"\")\n \n set(OMR_DDR_SET \"j9ddr\" CACHE INTERNAL \"\")\n \n-add_subdirectory(gc_glue_java)\n+# Declare the GC glue interface libraries that omr might reference,\n+# including the 'full' version. We'll only add sources to the 'full'\n+# version in gc_glue_java, below, when appropriate.\n+j9vm_add_library(${OMR_GC_GLUE_TARGET} INTERFACE)\n+j9vm_add_library(${OMR_GC_GLUE_FULL_TARGET} INTERFACE)\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae0f27d3e1c52cc66172bfa6a5a21186ace8057d"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1554, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}