{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwOTk1NDUz", "number": 10034, "title": "Check for assignment of NULL to array of value type", "bodyText": "In the prototype implementation of value types, if the component type of an array is a value type, a NullPointerException must be thrown when a null reference is assigned to an element of the array.  If the array's component type might be a value type, add a run-time test of whether the array actually is a value type guarding a NULLCHK of the value that is being assigned to the array element.\nSigned-off-by:  Henry Zongaro zongaro@ca.ibm.com", "createdAt": "2020-06-28T03:37:25Z", "url": "https://github.com/eclipse-openj9/openj9/pull/10034", "merged": true, "mergeCommit": {"oid": "f88d2311069f388ab67f85cb6d8308afae9a50a5"}, "closed": true, "closedAt": "2020-07-13T21:06:31Z", "author": {"login": "hzongaro"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcwB0s7gFqTQzOTE5NDQ3Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc0oABLAFqTQ0NzYwMTcwOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5MTk0NDcy", "url": "https://github.com/eclipse-openj9/openj9/pull/10034#pullrequestreview-439194472", "createdAt": "2020-06-29T14:21:55Z", "commit": {"oid": "296416a8399ba933c0bd630fb76e348a6a891549"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNDoyMTo1NVrOGqTSzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNDoyMTo1NVrOGqTSzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAwOTQ4Nw==", "bodyText": "is it only awrtbari or does it also handle astorei?", "url": "https://github.com/eclipse-openj9/openj9/pull/10034#discussion_r447009487", "createdAt": "2020-06-29T14:21:55Z", "author": {"login": "andrewcraik"}, "path": "runtime/compiler/codegen/J9CodeGenerator.cpp", "diffHunk": "@@ -1493,6 +1500,201 @@ J9::CodeGenerator::lowerTreeIfNeeded(\n    }\n \n \n+/*\n+ * If value types are enabled, and the value that is being assigned to the array\n+ * element might be a null reference, lower the ArrayStoreCHK by splitting the\n+ * block before the ArrayStoreCHK, and inserting a NULLCHK guarded by a check\n+ * of whether the array's component type is a value type.\n+ */\n+void\n+J9::CodeGenerator::lowerArrayStoreCHK(TR::Node *node, TR::TreeTop *tt)\n+   {\n+   TR::Node *destChild;\n+   TR::Node *sourceChild;\n+\n+   // Pattern match the ArrayStoreCHK operands to get the source of the assignment\n+   // (sourceChild) and the array to which an element will have a value assigned (destChild)\n+   findArrayStoreCHKOperands(node, destChild, sourceChild);\n+\n+   // Only need to lower if it is possible that the value is a null reference\n+   if (!sourceChild->isNonNull())\n+      {\n+      TR::CFG * cfg = self()->comp()->getFlowGraph();\n+      cfg->invalidateStructure();\n+\n+      TR::Block *prevBlock = tt->getEnclosingBlock();\n+\n+      performTransformation(self()->comp(), \"%sTransforming ArrayStoreCHK n%dn [%p] by splitting block block_%d, and inserting a NULLCHK guarded with a check of whether the component type of the array is a value type\\n\", OPT_DETAILS, node->getGlobalIndex(), node, prevBlock->getNumber());\n+\n+      // Anchor the node that contains the destination array and the node\n+      // containing the source of the array element assignment to ensure\n+      // they are available in the ificmpeq and NULLCHK\n+      TR::TreeTop *anchoredArrayTT = TR::TreeTop::create(self()->comp(), tt->getPrevTreeTop(), TR::Node::create(TR::treetop, 1, destChild));\n+      TR::TreeTop *anchoredSourceTT = TR::TreeTop::create(self()->comp(), anchoredArrayTT, TR::Node::create(TR::treetop, 1, sourceChild));\n+\n+      // Transform\n+      //   +--------------------------------+\n+      //   | ttprev                         |\n+      //   | ArrayStoreCHK                  |\n+      //   |   awrtbari                     |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "296416a8399ba933c0bd630fb76e348a6a891549"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5MTk1MjM5", "url": "https://github.com/eclipse-openj9/openj9/pull/10034#pullrequestreview-439195239", "createdAt": "2020-06-29T14:22:39Z", "commit": {"oid": "296416a8399ba933c0bd630fb76e348a6a891549"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNDoyMjozOVrOGqTU5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNDoyMjozOVrOGqTU5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAxMDAyMg==", "bodyText": "The array reference needs to be evaluated before the value reference since the array-reference is deeper.", "url": "https://github.com/eclipse-openj9/openj9/pull/10034#discussion_r447010022", "createdAt": "2020-06-29T14:22:39Z", "author": {"login": "andrewcraik"}, "path": "runtime/compiler/codegen/J9CodeGenerator.cpp", "diffHunk": "@@ -1493,6 +1500,201 @@ J9::CodeGenerator::lowerTreeIfNeeded(\n    }\n \n \n+/*\n+ * If value types are enabled, and the value that is being assigned to the array\n+ * element might be a null reference, lower the ArrayStoreCHK by splitting the\n+ * block before the ArrayStoreCHK, and inserting a NULLCHK guarded by a check\n+ * of whether the array's component type is a value type.\n+ */\n+void\n+J9::CodeGenerator::lowerArrayStoreCHK(TR::Node *node, TR::TreeTop *tt)\n+   {\n+   TR::Node *destChild;\n+   TR::Node *sourceChild;\n+\n+   // Pattern match the ArrayStoreCHK operands to get the source of the assignment\n+   // (sourceChild) and the array to which an element will have a value assigned (destChild)\n+   findArrayStoreCHKOperands(node, destChild, sourceChild);\n+\n+   // Only need to lower if it is possible that the value is a null reference\n+   if (!sourceChild->isNonNull())\n+      {\n+      TR::CFG * cfg = self()->comp()->getFlowGraph();\n+      cfg->invalidateStructure();\n+\n+      TR::Block *prevBlock = tt->getEnclosingBlock();\n+\n+      performTransformation(self()->comp(), \"%sTransforming ArrayStoreCHK n%dn [%p] by splitting block block_%d, and inserting a NULLCHK guarded with a check of whether the component type of the array is a value type\\n\", OPT_DETAILS, node->getGlobalIndex(), node, prevBlock->getNumber());\n+\n+      // Anchor the node that contains the destination array and the node\n+      // containing the source of the array element assignment to ensure\n+      // they are available in the ificmpeq and NULLCHK\n+      TR::TreeTop *anchoredArrayTT = TR::TreeTop::create(self()->comp(), tt->getPrevTreeTop(), TR::Node::create(TR::treetop, 1, destChild));\n+      TR::TreeTop *anchoredSourceTT = TR::TreeTop::create(self()->comp(), anchoredArrayTT, TR::Node::create(TR::treetop, 1, sourceChild));\n+\n+      // Transform\n+      //   +--------------------------------+\n+      //   | ttprev                         |\n+      //   | ArrayStoreCHK                  |\n+      //   |   awrtbari                     |\n+      //   |     aladd                      |\n+      //   |       <array-reference>        |\n+      //   |       index-offset-calculation |\n+      //   |     <value-reference>          |\n+      //   +--------------------------------+\n+      //\n+      // into\n+      //   +--------------------------------+\n+      //   | treetop                        |\n+      //   |   <value-reference>            |\n+      //   | treetop                        |\n+      //   |   <array-reference>            |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "296416a8399ba933c0bd630fb76e348a6a891549"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5MjU5NDc0", "url": "https://github.com/eclipse-openj9/openj9/pull/10034#pullrequestreview-439259474", "createdAt": "2020-06-29T15:28:14Z", "commit": {"oid": "296416a8399ba933c0bd630fb76e348a6a891549"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNToyODoxNFrOGqWR0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNToyODoxNFrOGqWR0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA1ODM4NQ==", "bodyText": "@hzongaro  Looking at the control flow described in the comment, I think you are using wrong API here. Block that contains ArrayStoreCHK tree is the merge block, so when creating arrayStoreCheckBlock I would use splitPostGRA. This way we have done uncommoning of the nodes that are live in the merge block. While for creating block containing NULLCHK which seems like the extension of previous block, I would use regular split API with doCommoning boolean set to false.\nFor reference on copying GlRegDeps you can take a look at  https://github.com/eclipse/openj9/blob/a7bf6c09925da0a4e352114e63b3c2cb3f59b355/runtime/compiler/optimizer/JProfilingValue.cpp#L764-L781.", "url": "https://github.com/eclipse-openj9/openj9/pull/10034#discussion_r447058385", "createdAt": "2020-06-29T15:28:14Z", "author": {"login": "r30shah"}, "path": "runtime/compiler/codegen/J9CodeGenerator.cpp", "diffHunk": "@@ -1493,6 +1500,201 @@ J9::CodeGenerator::lowerTreeIfNeeded(\n    }\n \n \n+/*\n+ * If value types are enabled, and the value that is being assigned to the array\n+ * element might be a null reference, lower the ArrayStoreCHK by splitting the\n+ * block before the ArrayStoreCHK, and inserting a NULLCHK guarded by a check\n+ * of whether the array's component type is a value type.\n+ */\n+void\n+J9::CodeGenerator::lowerArrayStoreCHK(TR::Node *node, TR::TreeTop *tt)\n+   {\n+   TR::Node *destChild;\n+   TR::Node *sourceChild;\n+\n+   // Pattern match the ArrayStoreCHK operands to get the source of the assignment\n+   // (sourceChild) and the array to which an element will have a value assigned (destChild)\n+   findArrayStoreCHKOperands(node, destChild, sourceChild);\n+\n+   // Only need to lower if it is possible that the value is a null reference\n+   if (!sourceChild->isNonNull())\n+      {\n+      TR::CFG * cfg = self()->comp()->getFlowGraph();\n+      cfg->invalidateStructure();\n+\n+      TR::Block *prevBlock = tt->getEnclosingBlock();\n+\n+      performTransformation(self()->comp(), \"%sTransforming ArrayStoreCHK n%dn [%p] by splitting block block_%d, and inserting a NULLCHK guarded with a check of whether the component type of the array is a value type\\n\", OPT_DETAILS, node->getGlobalIndex(), node, prevBlock->getNumber());\n+\n+      // Anchor the node that contains the destination array and the node\n+      // containing the source of the array element assignment to ensure\n+      // they are available in the ificmpeq and NULLCHK\n+      TR::TreeTop *anchoredArrayTT = TR::TreeTop::create(self()->comp(), tt->getPrevTreeTop(), TR::Node::create(TR::treetop, 1, destChild));\n+      TR::TreeTop *anchoredSourceTT = TR::TreeTop::create(self()->comp(), anchoredArrayTT, TR::Node::create(TR::treetop, 1, sourceChild));\n+\n+      // Transform\n+      //   +--------------------------------+\n+      //   | ttprev                         |\n+      //   | ArrayStoreCHK                  |\n+      //   |   awrtbari                     |\n+      //   |     aladd                      |\n+      //   |       <array-reference>        |\n+      //   |       index-offset-calculation |\n+      //   |     <value-reference>          |\n+      //   +--------------------------------+\n+      //\n+      // into\n+      //   +--------------------------------+\n+      //   | treetop                        |\n+      //   |   <value-reference>            |\n+      //   | treetop                        |\n+      //   |   <array-reference>            |\n+      //   | ificmpeq  -->------------------*---------+\n+      //   |   iand                         |         |\n+      //   |     iloadi <isClassFlags>      |         |\n+      //   |       aloadi <componentClass>  |         |\n+      //   |         aloadi <vft-symbol>    |         |\n+      //   |           <array-reference>    |         |\n+      //   |     iconst J9ClassIsValueType  |         |\n+      //   |   iconst 0                     |         |\n+      //   | BBEnd                          |         |\n+      //   +--------------------------------+         |\n+      //   | BBStart (Extension)            |         |\n+      //   | NULLCHK                        |         |\n+      //   |   Passthrough                  |         |\n+      //   |     <value-reference>          |         |\n+      //   | BBEnd                          |         |\n+      //   +--------------------------------+         |\n+      //                   |                          |\n+      //                   +--------------------------+\n+      //                   |\n+      //                   v\n+      //   +--------------------------------+\n+      //   | BBStart                        |\n+      //   | ArrayStoreCHK                  |\n+      //   |   awrtbari                     |\n+      //   |     aladd                      |\n+      //   |       aload <array>            |\n+      //   |       index-offset-calculation |\n+      //   |     aload <value>              |\n+      //   +--------------------------------+\n+      //\n+      TR::SymbolReference *vftSymRef = self()->comp()->getSymRefTab()->findOrCreateVftSymbolRef();\n+      TR::SymbolReference *arrayCompSymRef = self()->comp()->getSymRefTab()->findOrCreateArrayComponentTypeSymbolRef();\n+      TR::SymbolReference *classFlagsSymRef = self()->comp()->getSymRefTab()->findOrCreateClassFlagsSymbolRef();\n+\n+      TR::Node *vft = TR::Node::createWithSymRef(node, TR::aloadi, 1, anchoredArrayTT->getNode()->getFirstChild(), vftSymRef);\n+      TR::Node *arrayCompClass = TR::Node::createWithSymRef(node, TR::aloadi, 1, vft, arrayCompSymRef);\n+      TR::Node *loadClassFlags = TR::Node::createWithSymRef(node, TR::iloadi, 1, arrayCompClass, classFlagsSymRef);\n+      TR::Node *isValueTypeNode = TR::Node::create(node, TR::iand, 2, loadClassFlags, TR::Node::iconst(node, J9ClassIsValueType));\n+\n+      TR::Node *ifNode = TR::Node::createif(TR::ificmpeq, isValueTypeNode, TR::Node::iconst(node, 0));\n+      ifNode->copyByteCodeInfo(node);\n+\n+\n+      TR::Node *passThru  = TR::Node::create(node, TR::PassThrough, 1, sourceChild);\n+      TR::ResolvedMethodSymbol *currentMethod = self()->comp()->getMethodSymbol();\n+      TR::Node *nullCheck = TR::Node::createWithSymRef(node, TR::NULLCHK, 1, passThru,\n+                               symRefTab()->findOrCreateNullCheckSymbolRef(currentMethod));\n+\n+      TR::Block *nullCheckBlock = prevBlock->splitPostGRA(tt, cfg);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "296416a8399ba933c0bd630fb76e348a6a891549"}, "originalPosition": 115}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "296416a8399ba933c0bd630fb76e348a6a891549", "author": {"user": {"login": "hzongaro", "name": "Henry Zongaro"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/296416a8399ba933c0bd630fb76e348a6a891549", "committedDate": "2020-06-28T02:55:15Z", "message": "Check for assignment of NULL to array of value type\n\nIn the prototype implementation of vlaue types, if the component type of\nan array is a value type, a NullPointerException must be thrown when a\nnull reference is assigned to an element of the array.  If the array's\ncomponent type might be a value type, add a run-time test of whether\nthe array actually is a value type guarding a NULLCHK of the value that\nis being assigned to the array element.\n\nSigned-off-by:  Henry Zongaro <zongaro@ca.ibm.com>"}, "afterCommit": {"oid": "33c4ed812005bc98d94f4fe9282a75b0aaf0a6f6", "author": {"user": {"login": "hzongaro", "name": "Henry Zongaro"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/33c4ed812005bc98d94f4fe9282a75b0aaf0a6f6", "committedDate": "2020-06-30T03:00:06Z", "message": "Check for assignment of NULL to array of value type\n\nIn the prototype implementation of vlaue types, if the component type of\nan array is a value type, a NullPointerException must be thrown when a\nnull reference is assigned to an element of the array.  If the array's\ncomponent type might be a value type, add a run-time test of whether\nthe array actually is a value type guarding a NULLCHK of the value that\nis being assigned to the array element.\n\nSigned-off-by:  Henry Zongaro <zongaro@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "33c4ed812005bc98d94f4fe9282a75b0aaf0a6f6", "author": {"user": {"login": "hzongaro", "name": "Henry Zongaro"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/33c4ed812005bc98d94f4fe9282a75b0aaf0a6f6", "committedDate": "2020-06-30T03:00:06Z", "message": "Check for assignment of NULL to array of value type\n\nIn the prototype implementation of vlaue types, if the component type of\nan array is a value type, a NullPointerException must be thrown when a\nnull reference is assigned to an element of the array.  If the array's\ncomponent type might be a value type, add a run-time test of whether\nthe array actually is a value type guarding a NULLCHK of the value that\nis being assigned to the array element.\n\nSigned-off-by:  Henry Zongaro <zongaro@ca.ibm.com>"}, "afterCommit": {"oid": "58ab83bcf1cf130105931a3c27f9fa299cc3acd4", "author": {"user": {"login": "hzongaro", "name": "Henry Zongaro"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/58ab83bcf1cf130105931a3c27f9fa299cc3acd4", "committedDate": "2020-06-30T16:10:54Z", "message": "Check for assignment of NULL to array of value type\n\nIn the prototype implementation of vlaue types, if the component type of\nan array is a value type, a NullPointerException must be thrown when a\nnull reference is assigned to an element of the array.  If the array's\ncomponent type might be a value type, add a run-time test of whether\nthe array actually is a value type guarding a NULLCHK of the value that\nis being assigned to the array element.\n\nSigned-off-by:  Henry Zongaro <zongaro@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1MDkxNTM3", "url": "https://github.com/eclipse-openj9/openj9/pull/10034#pullrequestreview-445091537", "createdAt": "2020-07-08T20:07:17Z", "commit": {"oid": "58ab83bcf1cf130105931a3c27f9fa299cc3acd4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMDowNzoxOFrOGu3dCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMDowNzoxOFrOGu3dCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc5NjIzNA==", "bodyText": "@hzongaro  Changes looks good to me, one small thing I noticed is that you are calling splitPostGRA before creating treetops for NULLCHK and isValueTypeNode test, but nodes for the trees are created. For the purpose of this change it is fine as those new trees would not introduce any node that needs un-commoning, but if there were, you will introduce a bug where a node is live outside of its extended basic block, as block splitter walks treetops to identify nodes which would need uncommoning.", "url": "https://github.com/eclipse-openj9/openj9/pull/10034#discussion_r451796234", "createdAt": "2020-07-08T20:07:18Z", "author": {"login": "r30shah"}, "path": "runtime/compiler/codegen/J9CodeGenerator.cpp", "diffHunk": "@@ -1493,6 +1500,196 @@ J9::CodeGenerator::lowerTreeIfNeeded(\n    }\n \n \n+/*\n+ * If value types are enabled, and the value that is being assigned to the array\n+ * element might be a null reference, lower the ArrayStoreCHK by splitting the\n+ * block before the ArrayStoreCHK, and inserting a NULLCHK guarded by a check\n+ * of whether the array's component type is a value type.\n+ */\n+void\n+J9::CodeGenerator::lowerArrayStoreCHK(TR::Node *node, TR::TreeTop *tt)\n+   {\n+   TR::Node *destChild;\n+   TR::Node *sourceChild;\n+\n+   // Pattern match the ArrayStoreCHK operands to get the source of the assignment\n+   // (sourceChild) and the array to which an element will have a value assigned (destChild)\n+   findArrayStoreCHKOperands(node, destChild, sourceChild);\n+\n+   // Only need to lower if it is possible that the value is a null reference\n+   if (!sourceChild->isNonNull())\n+      {\n+      TR::CFG * cfg = self()->comp()->getFlowGraph();\n+      cfg->invalidateStructure();\n+\n+      TR::Block *prevBlock = tt->getEnclosingBlock();\n+\n+      performTransformation(self()->comp(), \"%sTransforming ArrayStoreCHK n%dn [%p] by splitting block block_%d, and inserting a NULLCHK guarded with a check of whether the component type of the array is a value type\\n\", OPT_DETAILS, node->getGlobalIndex(), node, prevBlock->getNumber());\n+\n+      // Anchor the node containing the source of the array element\n+      // assignment and the node that contains the destination array\n+      // to ensure they are available for the ificmpeq and NULLCHK\n+      TR::TreeTop *anchoredArrayTT = TR::TreeTop::create(self()->comp(), tt->getPrevTreeTop(), TR::Node::create(TR::treetop, 1, destChild));\n+      TR::TreeTop *anchoredSourceTT = TR::TreeTop::create(self()->comp(), anchoredArrayTT, TR::Node::create(TR::treetop, 1, sourceChild));\n+\n+      // Transform\n+      //   +--------------------------------+\n+      //   | ttprev                         |\n+      //   | ArrayStoreCHK                  |\n+      //   |   astorei/awrtbari             |\n+      //   |     aladd                      |\n+      //   |       <array-reference>        |\n+      //   |       index-offset-calculation |\n+      //   |     <value-reference>          |\n+      //   +--------------------------------+\n+      //\n+      // into\n+      //   +--------------------------------+\n+      //   | treetop                        |\n+      //   |   <array-reference>            |\n+      //   | treetop                        |\n+      //   |   <value-reference>            |\n+      //   | ificmpeq  -->------------------*---------+\n+      //   |   iand                         |         |\n+      //   |     iloadi <isClassFlags>      |         |\n+      //   |       aloadi <componentClass>  |         |\n+      //   |         aloadi <vft-symbol>    |         |\n+      //   |           <array-reference>    |         |\n+      //   |     iconst J9ClassIsValueType  |         |\n+      //   |   iconst 0                     |         |\n+      //   | BBEnd                          |         |\n+      //   +--------------------------------+         |\n+      //   | BBStart (Extension)            |         |\n+      //   | NULLCHK                        |         |\n+      //   |   Passthrough                  |         |\n+      //   |     <value-reference>          |         |\n+      //   | BBEnd                          |         |\n+      //   +--------------------------------+         |\n+      //                   |                          |\n+      //                   +--------------------------+\n+      //                   |\n+      //                   v\n+      //   +--------------------------------+\n+      //   | BBStart                        |\n+      //   | ArrayStoreCHK                  |\n+      //   |   astorei/awrtbari             |\n+      //   |     aladd                      |\n+      //   |       aload <array>            |\n+      //   |       index-offset-calculation |\n+      //   |     aload <value>              |\n+      //   +--------------------------------+\n+      //\n+      TR::SymbolReference *vftSymRef = self()->comp()->getSymRefTab()->findOrCreateVftSymbolRef();\n+      TR::SymbolReference *arrayCompSymRef = self()->comp()->getSymRefTab()->findOrCreateArrayComponentTypeSymbolRef();\n+      TR::SymbolReference *classFlagsSymRef = self()->comp()->getSymRefTab()->findOrCreateClassFlagsSymbolRef();\n+\n+      TR::Node *vft = TR::Node::createWithSymRef(node, TR::aloadi, 1, anchoredArrayTT->getNode()->getFirstChild(), vftSymRef);\n+      TR::Node *arrayCompClass = TR::Node::createWithSymRef(node, TR::aloadi, 1, vft, arrayCompSymRef);\n+      TR::Node *loadClassFlags = TR::Node::createWithSymRef(node, TR::iloadi, 1, arrayCompClass, classFlagsSymRef);\n+      TR::Node *isValueTypeNode = TR::Node::create(node, TR::iand, 2, loadClassFlags, TR::Node::iconst(node, J9ClassIsValueType));\n+\n+      TR::Node *ifNode = TR::Node::createif(TR::ificmpeq, isValueTypeNode, TR::Node::iconst(node, 0));\n+      ifNode->copyByteCodeInfo(node);\n+\n+      TR::Node *passThru  = TR::Node::create(node, TR::PassThrough, 1, sourceChild);\n+      TR::ResolvedMethodSymbol *currentMethod = self()->comp()->getMethodSymbol();\n+\n+      TR::Block *arrayStoreCheckBlock = prevBlock->splitPostGRA(tt, cfg);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58ab83bcf1cf130105931a3c27f9fa299cc3acd4"}, "originalPosition": 112}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1MDkxNTk3", "url": "https://github.com/eclipse-openj9/openj9/pull/10034#pullrequestreview-445091597", "createdAt": "2020-07-08T20:07:23Z", "commit": {"oid": "58ab83bcf1cf130105931a3c27f9fa299cc3acd4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cadf8899ccfe73c5e012750acef59b9597d1ca75", "author": {"user": {"login": "hzongaro", "name": "Henry Zongaro"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/cadf8899ccfe73c5e012750acef59b9597d1ca75", "committedDate": "2020-07-10T20:05:37Z", "message": "Check for assignment of NULL to array of value type\n\nIn the prototype implementation of vlaue types, if the component type of\nan array is a value type, a NullPointerException must be thrown when a\nnull reference is assigned to an element of the array.  If the array's\ncomponent type might be a value type, add a run-time test of whether\nthe array actually is a value type guarding a NULLCHK of the value that\nis being assigned to the array element.\n\nSigned-off-by:  Henry Zongaro <zongaro@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "58ab83bcf1cf130105931a3c27f9fa299cc3acd4", "author": {"user": {"login": "hzongaro", "name": "Henry Zongaro"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/58ab83bcf1cf130105931a3c27f9fa299cc3acd4", "committedDate": "2020-06-30T16:10:54Z", "message": "Check for assignment of NULL to array of value type\n\nIn the prototype implementation of vlaue types, if the component type of\nan array is a value type, a NullPointerException must be thrown when a\nnull reference is assigned to an element of the array.  If the array's\ncomponent type might be a value type, add a run-time test of whether\nthe array actually is a value type guarding a NULLCHK of the value that\nis being assigned to the array element.\n\nSigned-off-by:  Henry Zongaro <zongaro@ca.ibm.com>"}, "afterCommit": {"oid": "cadf8899ccfe73c5e012750acef59b9597d1ca75", "author": {"user": {"login": "hzongaro", "name": "Henry Zongaro"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/cadf8899ccfe73c5e012750acef59b9597d1ca75", "committedDate": "2020-07-10T20:05:37Z", "message": "Check for assignment of NULL to array of value type\n\nIn the prototype implementation of vlaue types, if the component type of\nan array is a value type, a NullPointerException must be thrown when a\nnull reference is assigned to an element of the array.  If the array's\ncomponent type might be a value type, add a run-time test of whether\nthe array actually is a value type guarding a NULLCHK of the value that\nis being assigned to the array element.\n\nSigned-off-by:  Henry Zongaro <zongaro@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3NjAxNzA4", "url": "https://github.com/eclipse-openj9/openj9/pull/10034#pullrequestreview-447601708", "createdAt": "2020-07-13T21:06:22Z", "commit": {"oid": "cadf8899ccfe73c5e012750acef59b9597d1ca75"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 459, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}