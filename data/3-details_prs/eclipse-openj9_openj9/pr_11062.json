{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzMjE1MTcz", "number": 11062, "title": "Ensure correct vTables when interface class is redefined", "bodyText": "Ensure that all classes that implement a redefined interface have their\nvTable methods updated to the new methods. Add a test to verify.\n[ci skip]\nSigned-off-by: Graham Chapman graham_chapman@ca.ibm.com", "createdAt": "2020-10-30T18:47:25Z", "url": "https://github.com/eclipse-openj9/openj9/pull/11062", "merged": true, "mergeCommit": {"oid": "00c068eb1236b22e44ce253fc31ff2eb2131eada"}, "closed": true, "closedAt": "2020-11-03T14:05:15Z", "author": {"login": "gacholio"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdXsUcngFqTUyMDk5MDMzNQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdYmhMaAFqTUyMTc0ODMzMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwOTkwMzM1", "url": "https://github.com/eclipse-openj9/openj9/pull/11062#pullrequestreview-520990335", "createdAt": "2020-10-30T19:51:25Z", "commit": {"oid": "9477e2b476e31f9de5324dfc9221da5ba8cef22a"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxOTo1MToyNVrOHreFXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxOTo1Mzo1OVrOHreJzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM0MzcxMQ==", "bodyText": "Is this comment still accurate?  Maybe it needs to move up and into the if (!fastHCR) { block?", "url": "https://github.com/eclipse-openj9/openj9/pull/11062#discussion_r515343711", "createdAt": "2020-10-30T19:51:25Z", "author": {"login": "DanHeidinga"}, "path": "runtime/util/hshelp.c", "diffHunk": "@@ -2701,59 +2701,62 @@ addClassesRequiringNewITables(J9JavaVM *vm, J9HashTable *classHashTable, UDATA *\n \t\t\t\tresult = hashTableFind(classHashTable, &exemplar);\n \n \t\t\t\tif (NULL != result) {\n-\t\t\t\t\tBOOLEAN extensionsUsed = (0 != (result->flags & J9JVMTI_CLASS_PAIR_FLAG_USES_EXTENSIONS));\n-\n-\t\t\t\t\t/* If methods were added or removed (extensionsUsed) or re-ordered in the interface, the class should be redefined. */\n-\t\t\t\t\tif (extensionsUsed || (NULL != result->methodRemap)) {\n-\t\t\t\t\t\tU_32 nodeCount = hashTableGetCount(classHashTable);\n-\n-\t\t\t\t\t\tmemset(&exemplar, 0, sizeof(J9JVMTIClassPair));\n-\t\t\t\t\t\texemplar.originalRAMClass = clazz;\n-\t\t\t\t\t\texemplar.replacementClass.romClass = clazz->romClass;\n-\t\t\t\t\t\texemplar.flags = J9JVMTI_CLASS_PAIR_FLAG_REDEFINED;\n-\n-\t\t\t\t\t\t/* An interface of this class is being updated with extensions - this class will require new iTables. */\n-\t\t\t\t\t\tif (NULL == hashTableAdd(classHashTable, &exemplar)) {\n-\t\t\t\t\t\t\tvmFuncs->allClassesEndDo(&classWalkState);\n-\t\t\t\t\t\t\treturn JVMTI_ERROR_OUT_OF_MEMORY;\n+\t\t\t\t\tUDATA flags = 0;\n+\t\t\t\t\tU_32 nodeCount = hashTableGetCount(classHashTable);\n+\n+\t\t\t\t\tif (!fastHCR) {\n+\t\t\t\t\t\tBOOLEAN extensionsUsed = (0 != (result->flags & J9JVMTI_CLASS_PAIR_FLAG_USES_EXTENSIONS));\n+\t\t\t\t\t\t/* If methods were added or removed (extensionsUsed) or re-ordered in the interface, the class should be redefined. */\n+\t\t\t\t\t\tif (extensionsUsed || (NULL != result->methodRemap)) {\n+\t\t\t\t\t\t\tflags = J9JVMTI_CLASS_PAIR_FLAG_REDEFINED;\n \t\t\t\t\t\t}\n+\t\t\t\t\t}\n \n-\t\t\t\t\t\t/* Increment counts if the class was really added (i.e. did not exist before). */\n-\t\t\t\t\t\tif (hashTableGetCount(classHashTable) == (nodeCount + 1)) {\n-\t\t\t\t\t\t\tJ9SubclassWalkState subclassState;\n-\t\t\t\t\t\t\tJ9Class * subclass;\n+\t\t\t\t\tmemset(&exemplar, 0, sizeof(J9JVMTIClassPair));\n+\t\t\t\t\texemplar.originalRAMClass = clazz;\n+\t\t\t\t\texemplar.replacementClass.romClass = clazz->romClass;\n+\t\t\t\t\texemplar.flags = flags;\n \n-\t\t\t\t\t\t\taddedMethodCount += clazz->romClass->romMethodCount;\n-\t\t\t\t\t\t\taddedClassCount += 1;\n-\t\n-\t\t\t\t\t\t\t/* Now add all of the subclasses of the affected class to the table */\n-\t\t\t\t\t\t\tsubclass = allSubclassesStartDo(clazz, &subclassState, TRUE);\n-\t\t\t\t\t\t\twhile (subclass != NULL) {\n-\t\t\t\t\t\t\t\tU_32 nodeCount = hashTableGetCount(classHashTable);\n-\n-\t\t\t\t\t\t\t\tmemset(&exemplar, 0x00, sizeof(J9JVMTIClassPair));\n-\t\t\t\t\t\t\t\texemplar.originalRAMClass = subclass;\n-\t\t\t\t\t\t\t\texemplar.replacementClass.romClass = subclass->romClass;\n-\t\t\t\t\t\t\t\texemplar.flags = J9JVMTI_CLASS_PAIR_FLAG_REDEFINED;\n-\n-\t\t\t\t\t\t\t\t/* If this class is already in the table this add will have no effect */\n-\t\t\t\t\t\t\t\tresult = hashTableAdd(classHashTable, &exemplar);\n-\t\t\t\t\t\t\t\tif (NULL == result) {\n-\t\t\t\t\t\t\t\t\tvmFuncs->allClassesEndDo(&classWalkState);\n-\t\t\t\t\t\t\t\t\treturn JVMTI_ERROR_OUT_OF_MEMORY;\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t\t/* Ensure that classes already in the table get redefined */\n-\t\t\t\t\t\t\t\tresult->flags |= J9JVMTI_CLASS_PAIR_FLAG_REDEFINED;\n+\t\t\t\t\t/* An interface of this class is being updated with extensions - this class will require new iTables. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9477e2b476e31f9de5324dfc9221da5ba8cef22a"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM0NDA5Mw==", "bodyText": "Comment still apply?", "url": "https://github.com/eclipse-openj9/openj9/pull/11062#discussion_r515344093", "createdAt": "2020-10-30T19:52:16Z", "author": {"login": "DanHeidinga"}, "path": "runtime/util/hshelp.c", "diffHunk": "@@ -2864,20 +2869,16 @@ determineClassesToRecreate(J9VMThread * currentThread, jint classCount,\n \t}\n \tclassCount += redefinedSubclassCount;\n \n-\tif (!fastHCR) {\n-\t\tUDATA addedClassCount, addedMethodCount;\n-\n-\t\t/* Add any classes implementing interfaces that are being updated with extensions or re-ordered methods. */\n-\t\tjvmtiResult = addClassesRequiringNewITables(currentThread->javaVM, classHashTable, &addedClassCount, &addedMethodCount);\n-\t\tif (JVMTI_ERROR_NONE != jvmtiResult) {\n-\t\t\thashTableFree(classHashTable);\n-\t\t\treturn jvmtiResult;\n-\t\t}\n-\n-\t\tredefinedMethodCount += addedMethodCount;\n-\t\tclassCount += (jint) addedClassCount;\n+\t/* Add any classes implementing interfaces that are being updated with extensions or re-ordered methods. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9477e2b476e31f9de5324dfc9221da5ba8cef22a"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM0NDg0NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t{ \"rc021\", rc021, \"com.ibm.jvmti.tests.redefineClasses.rc021\", \"RedefineClasses\" },\n          \n          \n            \n            \t{ \"rc021\", rc021, \"com.ibm.jvmti.tests.redefineClasses.rc021\", \"RetransformClasses\" },", "url": "https://github.com/eclipse-openj9/openj9/pull/11062#discussion_r515344844", "createdAt": "2020-10-30T19:53:59Z", "author": {"login": "DanHeidinga"}, "path": "runtime/tests/jvmtitests/agent/tests.c", "diffHunk": "@@ -95,6 +95,7 @@ static jvmtiTest jvmtiTestList[] =\n \t{ \"rc019a\", rc019a, \"com.ibm.jvmti.tests.redefineClasses.rc019a\", \"RedefineClasses\" },\n \t{ \"rc019b\", rc019b, \"com.ibm.jvmti.tests.redefineClasses.rc019b\", \"RedefineClasses\" },\n \t{ \"rc020\", rc020, \"com.ibm.jvmti.tests.redefineClasses.rc020\", \"RedefineClasses\" },\n+\t{ \"rc021\", rc021, \"com.ibm.jvmti.tests.redefineClasses.rc021\", \"RedefineClasses\" },", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9477e2b476e31f9de5324dfc9221da5ba8cef22a"}, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "25b07fe3e298d18787987a2b566aac87472266ea", "author": {"user": {"login": "gacholio", "name": "Graham Chapman"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/25b07fe3e298d18787987a2b566aac87472266ea", "committedDate": "2020-11-01T18:46:34Z", "message": "refactor\n\nSigned-off-by: Graham Chapman <graham_chapman@ca.ibm.com>"}, "afterCommit": {"oid": "75aac2741bace1848755e5400584affb6bbe6e75", "author": {"user": {"login": "gacholio", "name": "Graham Chapman"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/75aac2741bace1848755e5400584affb6bbe6e75", "committedDate": "2020-11-02T02:17:41Z", "message": "Ensure correct vTables when interface class is redefined\n\nEnsure that all classes that implement a redefined interface have their\nvTable methods updated to the new methods. Add a test to verify.\n\n[ci skip]\n\nSigned-off-by: Graham Chapman <graham_chapman@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "75aac2741bace1848755e5400584affb6bbe6e75", "author": {"user": {"login": "gacholio", "name": "Graham Chapman"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/75aac2741bace1848755e5400584affb6bbe6e75", "committedDate": "2020-11-02T02:17:41Z", "message": "Ensure correct vTables when interface class is redefined\n\nEnsure that all classes that implement a redefined interface have their\nvTable methods updated to the new methods. Add a test to verify.\n\n[ci skip]\n\nSigned-off-by: Graham Chapman <graham_chapman@ca.ibm.com>"}, "afterCommit": {"oid": "3f5ea69e129618c456d6574d3e556f454826b91b", "author": {"user": {"login": "gacholio", "name": "Graham Chapman"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/3f5ea69e129618c456d6574d3e556f454826b91b", "committedDate": "2020-11-02T13:49:33Z", "message": "Ensure correct vTables when interface class is redefined\n\nEnsure that all classes that implement a redefined interface have their\nvTable methods updated to the new methods. Add a test to verify.\n\n[ci skip]\n\nSigned-off-by: Graham Chapman <graham_chapman@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxNjQ1MTI4", "url": "https://github.com/eclipse-openj9/openj9/pull/11062#pullrequestreview-521645128", "createdAt": "2020-11-02T13:52:31Z", "commit": {"oid": "75aac2741bace1848755e5400584affb6bbe6e75"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd6d81ce78f5841c40ab2e355512c347d9d5cef0", "author": {"user": {"login": "gacholio", "name": "Graham Chapman"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/fd6d81ce78f5841c40ab2e355512c347d9d5cef0", "committedDate": "2020-11-02T13:52:32Z", "message": "Ensure correct vTables when interface class is redefined\n\nEnsure that all classes that implement a redefined interface have their\nvTable methods updated to the new methods. Add a test to verify.\n\n[ci skip]\n\nSigned-off-by: Graham Chapman <graham_chapman@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3f5ea69e129618c456d6574d3e556f454826b91b", "author": {"user": {"login": "gacholio", "name": "Graham Chapman"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/3f5ea69e129618c456d6574d3e556f454826b91b", "committedDate": "2020-11-02T13:49:33Z", "message": "Ensure correct vTables when interface class is redefined\n\nEnsure that all classes that implement a redefined interface have their\nvTable methods updated to the new methods. Add a test to verify.\n\n[ci skip]\n\nSigned-off-by: Graham Chapman <graham_chapman@ca.ibm.com>"}, "afterCommit": {"oid": "fd6d81ce78f5841c40ab2e355512c347d9d5cef0", "author": {"user": {"login": "gacholio", "name": "Graham Chapman"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/fd6d81ce78f5841c40ab2e355512c347d9d5cef0", "committedDate": "2020-11-02T13:52:32Z", "message": "Ensure correct vTables when interface class is redefined\n\nEnsure that all classes that implement a redefined interface have their\nvTable methods updated to the new methods. Add a test to verify.\n\n[ci skip]\n\nSigned-off-by: Graham Chapman <graham_chapman@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxNzQ4MzMx", "url": "https://github.com/eclipse-openj9/openj9/pull/11062#pullrequestreview-521748331", "createdAt": "2020-11-02T15:44:04Z", "commit": {"oid": "fd6d81ce78f5841c40ab2e355512c347d9d5cef0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 69, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}