{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2NTkzMjI1", "number": 8391, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNTowNzoxM1rODflLRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxODoyNTo0NFrODfpssA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDQxNTQzOnYy", "diffSide": "RIGHT", "path": "runtime/bcutil/ClassFileWriter.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNTowNzoxM1rOFpXXCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNToxNDoxN1rOFpXoxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkxODY2NQ==", "bodyText": "Do the typeAnnotations need to be analyzed here as well?  Same for the component annotations?   Otherwise I'm not sure how their UTF8s get added", "url": "https://github.com/eclipse-openj9/openj9/pull/8391#discussion_r378918665", "createdAt": "2020-02-13T15:07:13Z", "author": {"login": "DanHeidinga"}, "path": "runtime/bcutil/ClassFileWriter.cpp", "diffHunk": "@@ -493,6 +498,37 @@ ClassFileWriter::analyzeMethods()\n \t}\n }\n \n+void\n+ClassFileWriter::analyzeRecordAttribute()\n+{\n+\taddEntry((void *) &RECORD, 0, CFR_CONSTANT_Utf8);\n+\n+\t/* first 4 bytes contains number of record components */\n+\tU_32 numberOfRecords = getNumberOfRecordComponents(_romClass);\n+\tJ9ROMRecordComponentShape* recordComponent = recordComponentStartDo(_romClass);\n+\tfor (U_32 i = 0; i < numberOfRecords; i++) {\n+\n+\t\t/* record component name and signature */\n+\t\taddEntry(J9ROMRECORDCOMPONENTSHAPE_NAME(recordComponent), 0, CFR_CONSTANT_Utf8);\n+\t\taddEntry(J9ROMRECORDCOMPONENTSHAPE_SIGNATURE(recordComponent), 0, CFR_CONSTANT_Utf8);\n+\n+\t\t/* analyze attributes */\n+\t\tif (recordComponentHasSignature(recordComponent)) {\n+\t\t\tJ9UTF8* genericSignature = getRecordComponentGenericSignature(recordComponent);\n+\t\t\taddEntry((void *) &SIGNATURE, 0, CFR_CONSTANT_Utf8);\n+\t\t\taddEntry(genericSignature, 0, CFR_CONSTANT_Utf8);\n+\t\t}\n+\t\tif (recordComponentHasAnnotations(recordComponent)) {\n+\t\t\taddEntry((void *) &RUNTIME_VISIBLE_ANNOTATIONS, 0, CFR_CONSTANT_Utf8);\n+\t\t}\n+\t\tif (recordComponentHasTypeAnnotations(recordComponent)) {\n+\t\t\taddEntry((void *) &RUNTIME_VISIBLE_TYPE_ANNOTATIONS, 0, CFR_CONSTANT_Utf8);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d14d8d1c9ba094259e2cfa3581b92a945bac5bf4"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkyMzIwNw==", "bodyText": "Looking deeper into the code, you've matched the existing pattern and I think I understand how this works now.", "url": "https://github.com/eclipse-openj9/openj9/pull/8391#discussion_r378923207", "createdAt": "2020-02-13T15:14:17Z", "author": {"login": "DanHeidinga"}, "path": "runtime/bcutil/ClassFileWriter.cpp", "diffHunk": "@@ -493,6 +498,37 @@ ClassFileWriter::analyzeMethods()\n \t}\n }\n \n+void\n+ClassFileWriter::analyzeRecordAttribute()\n+{\n+\taddEntry((void *) &RECORD, 0, CFR_CONSTANT_Utf8);\n+\n+\t/* first 4 bytes contains number of record components */\n+\tU_32 numberOfRecords = getNumberOfRecordComponents(_romClass);\n+\tJ9ROMRecordComponentShape* recordComponent = recordComponentStartDo(_romClass);\n+\tfor (U_32 i = 0; i < numberOfRecords; i++) {\n+\n+\t\t/* record component name and signature */\n+\t\taddEntry(J9ROMRECORDCOMPONENTSHAPE_NAME(recordComponent), 0, CFR_CONSTANT_Utf8);\n+\t\taddEntry(J9ROMRECORDCOMPONENTSHAPE_SIGNATURE(recordComponent), 0, CFR_CONSTANT_Utf8);\n+\n+\t\t/* analyze attributes */\n+\t\tif (recordComponentHasSignature(recordComponent)) {\n+\t\t\tJ9UTF8* genericSignature = getRecordComponentGenericSignature(recordComponent);\n+\t\t\taddEntry((void *) &SIGNATURE, 0, CFR_CONSTANT_Utf8);\n+\t\t\taddEntry(genericSignature, 0, CFR_CONSTANT_Utf8);\n+\t\t}\n+\t\tif (recordComponentHasAnnotations(recordComponent)) {\n+\t\t\taddEntry((void *) &RUNTIME_VISIBLE_ANNOTATIONS, 0, CFR_CONSTANT_Utf8);\n+\t\t}\n+\t\tif (recordComponentHasTypeAnnotations(recordComponent)) {\n+\t\t\taddEntry((void *) &RUNTIME_VISIBLE_TYPE_ANNOTATIONS, 0, CFR_CONSTANT_Utf8);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkxODY2NQ=="}, "originalCommit": {"oid": "d14d8d1c9ba094259e2cfa3581b92a945bac5bf4"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDQzMTQwOnYy", "diffSide": "RIGHT", "path": "runtime/bcutil/ClassFileWriter.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNToxMTozM1rOFpXhYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNToxMTozM1rOFpXhYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkyMTMxNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * Write zero as a placeholder for length. */\n          \n          \n            \n            \t * Write zero as a placeholder for length. \n          \n          \n            \n            \t */", "url": "https://github.com/eclipse-openj9/openj9/pull/8391#discussion_r378921315", "createdAt": "2020-02-13T15:11:33Z", "author": {"login": "DanHeidinga"}, "path": "runtime/bcutil/ClassFileWriter.cpp", "diffHunk": "@@ -1041,6 +1080,67 @@ ClassFileWriter::writeAttributes()\n \t\t\t}\n \t\t}\n \t}\n+\n+\t/* record attribute */\n+\tif (J9_ARE_ANY_BITS_SET(_romClass->extraModifiers, J9AccRecord)) {\n+\t\twriteRecordAttribute();\n+\t}\n+}\n+\n+void ClassFileWriter::writeRecordAttribute()\n+{\n+\t/* Write header - size calculation will be written specially at the end.\n+\t * Write zero as a placeholder for length. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d14d8d1c9ba094259e2cfa3581b92a945bac5bf4"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDQzNzI4OnYy", "diffSide": "RIGHT", "path": "runtime/util/romclasswalk.c", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNToxMzowMFrOFpXlIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNToxMzowMFrOFpXlIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkyMjI3Mw==", "bodyText": "please assign initial values", "url": "https://github.com/eclipse-openj9/openj9/pull/8391#discussion_r378922273", "createdAt": "2020-02-13T15:13:00Z", "author": {"login": "DanHeidinga"}, "path": "runtime/util/romclasswalk.c", "diffHunk": "@@ -701,6 +701,68 @@ static void allSlotsInConstantPoolDo(J9ROMClass* romClass, J9ROMClassWalkCallbac\n \t}\n }\n \n+static UDATA\n+allSlotsInRecordComponentDo(J9ROMClass* romClass, J9ROMRecordComponentShape* recordComponent, J9ROMClassWalkCallbacks* callbacks, void* userData) {\n+\tBOOLEAN rangeValid;\n+\tU_32 attributeFlags;\n+\tJ9ROMNameAndSignature *recordComponentNAS;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d14d8d1c9ba094259e2cfa3581b92a945bac5bf4"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NTE1NjMyOnYy", "diffSide": "RIGHT", "path": "runtime/bcutil/ClassFileWriter.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxODoyNTo0NFrOFpesnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxODoyNjo1NFrOFpevHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAzODg3OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * Stored as U32 in the ROM class, U16 in class file. */\n          \n          \n            \n            \t * Stored as U32 in the ROM class, U16 in class file.\n          \n          \n            \n            \t */", "url": "https://github.com/eclipse-openj9/openj9/pull/8391#discussion_r379038879", "createdAt": "2020-02-13T18:25:44Z", "author": {"login": "DanHeidinga"}, "path": "runtime/bcutil/ClassFileWriter.cpp", "diffHunk": "@@ -1041,6 +1080,68 @@ ClassFileWriter::writeAttributes()\n \t\t\t}\n \t\t}\n \t}\n+\n+\t/* record attribute */\n+\tif (J9_ARE_ANY_BITS_SET(_romClass->extraModifiers, J9AccRecord)) {\n+\t\twriteRecordAttribute();\n+\t}\n+}\n+\n+void ClassFileWriter::writeRecordAttribute()\n+{\n+\t/* Write header - size calculation will be written specially at the end.\n+\t * Write zero as a placeholder for length.\n+\t */\n+\twriteU16(indexForUTF8((J9UTF8 *) &RECORD));\n+\tU_8* recordAttributeLengthAddr = _classFileCursor;\n+\twriteU32(0);\n+\tU_8* startLengthCalculationAddr = _classFileCursor;\n+\t\n+\t/* write number of record components (components_count).\n+\t * Stored as U32 in the ROM class, U16 in class file. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b41b7148492ce6f8c73fb35b3719b5632e125616"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAzOTUxOQ==", "bodyText": "Sorry, I missed one other minor nitpick previously", "url": "https://github.com/eclipse-openj9/openj9/pull/8391#discussion_r379039519", "createdAt": "2020-02-13T18:26:54Z", "author": {"login": "DanHeidinga"}, "path": "runtime/bcutil/ClassFileWriter.cpp", "diffHunk": "@@ -1041,6 +1080,68 @@ ClassFileWriter::writeAttributes()\n \t\t\t}\n \t\t}\n \t}\n+\n+\t/* record attribute */\n+\tif (J9_ARE_ANY_BITS_SET(_romClass->extraModifiers, J9AccRecord)) {\n+\t\twriteRecordAttribute();\n+\t}\n+}\n+\n+void ClassFileWriter::writeRecordAttribute()\n+{\n+\t/* Write header - size calculation will be written specially at the end.\n+\t * Write zero as a placeholder for length.\n+\t */\n+\twriteU16(indexForUTF8((J9UTF8 *) &RECORD));\n+\tU_8* recordAttributeLengthAddr = _classFileCursor;\n+\twriteU32(0);\n+\tU_8* startLengthCalculationAddr = _classFileCursor;\n+\t\n+\t/* write number of record components (components_count).\n+\t * Stored as U32 in the ROM class, U16 in class file. */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAzODg3OQ=="}, "originalCommit": {"oid": "b41b7148492ce6f8c73fb35b3719b5632e125616"}, "originalPosition": 96}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 785, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}