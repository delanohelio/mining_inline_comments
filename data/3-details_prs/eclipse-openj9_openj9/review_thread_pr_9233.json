{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyODg0ODIz", "number": 9233, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMzoxNDowNFrODz9qJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMzoxNDo1NlrODz9rDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1ODE0MTgyOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/runtime/codertinit.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMzoxNDowNFrOGIrbZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMzoxNDowNFrOGIrbZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc1MzMxOQ==", "bodyText": "If these lines are not needed let's remove them", "url": "https://github.com/eclipse-openj9/openj9/pull/9233#discussion_r411753319", "createdAt": "2020-04-20T23:14:04Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/runtime/codertinit.cpp", "diffHunk": "@@ -451,52 +452,62 @@ void codert_init_helpers_and_targets(J9JITConfig * jitConfig, char isSMP)\n    }\n #endif\n \n-   jitConfig->jitGetExceptionTableFromPC = jitGetExceptionTableFromPC;\n-   jitConfig->jitGetStackMapFromPC = getStackMapFromJitPC;\n-   jitConfig->jitGetInlinerMapFromPC = jitGetInlinerMapFromPC;\n-   jitConfig->getJitInlineDepthFromCallSite = getJitInlineDepthFromCallSite;\n-   jitConfig->getJitInlinedCallInfo = getJitInlinedCallInfo;\n-   jitConfig->getStackMapFromJitPC = getStackMapFromJitPC;\n-   jitConfig->getFirstInlinedCallSite = getFirstInlinedCallSite;\n-   jitConfig->getNextInlinedCallSite = getNextInlinedCallSite;\n-   jitConfig->hasMoreInlinedMethods = hasMoreInlinedMethods;\n-   jitConfig->getInlinedMethod = getInlinedMethod;\n-   jitConfig->getByteCodeIndex = getByteCodeIndex;\n-   jitConfig->getByteCodeIndexFromStackMap = getByteCodeIndexFromStackMap;\n-   jitConfig->getCurrentByteCodeIndexAndIsSameReceiver = getCurrentByteCodeIndexAndIsSameReceiver;\n-   jitConfig->getJitRegisterMap = getJitRegisterMap;\n-   jitConfig->jitReportDynamicCodeLoadEvents = jitReportDynamicCodeLoadEvents;\n+   TR::CompilationInfo * compInfo = TR::CompilationInfo::get(jitConfig);\n+\n+#if defined(J9VM_OPT_JITSERVER)\n+   if (compInfo->getPersistentInfo()->getRemoteCompilationMode() != JITServer::SERVER)\n+#endif\n+      {\n+      jitConfig->jitGetExceptionTableFromPC = jitGetExceptionTableFromPC;\n+      jitConfig->jitGetStackMapFromPC = getStackMapFromJitPC;\n+      jitConfig->jitGetInlinerMapFromPC = jitGetInlinerMapFromPC;\n+      jitConfig->getJitInlineDepthFromCallSite = getJitInlineDepthFromCallSite;\n+      jitConfig->getJitInlinedCallInfo = getJitInlinedCallInfo;\n+      jitConfig->getStackMapFromJitPC = getStackMapFromJitPC;\n+      jitConfig->getFirstInlinedCallSite = getFirstInlinedCallSite;\n+      jitConfig->getNextInlinedCallSite = getNextInlinedCallSite;\n+      jitConfig->hasMoreInlinedMethods = hasMoreInlinedMethods;\n+      jitConfig->getInlinedMethod = getInlinedMethod;\n+      jitConfig->getByteCodeIndex = getByteCodeIndex;\n+      jitConfig->getByteCodeIndexFromStackMap = getByteCodeIndexFromStackMap;\n+      jitConfig->getCurrentByteCodeIndexAndIsSameReceiver = getCurrentByteCodeIndexAndIsSameReceiver;\n+      jitConfig->getJitRegisterMap = getJitRegisterMap;\n+      jitConfig->jitReportDynamicCodeLoadEvents = jitReportDynamicCodeLoadEvents;\n #if (defined(TR_HOST_X86) || defined(TR_HOST_POWER) || defined(TR_HOST_S390) || defined(TR_HOST_ARM) || defined(TR_HOST_ARM64))\n-   jitConfig->jitClassesRedefined = jitClassesRedefined;\n-   jitConfig->jitFlushCompilationQueue = jitFlushCompilationQueue;\n+      jitConfig->jitClassesRedefined = jitClassesRedefined;\n+      jitConfig->jitFlushCompilationQueue = jitFlushCompilationQueue;\n #endif\n-   jitConfig->jitDiscardPendingCompilationsOfNatives = jitDiscardPendingCompilationsOfNatives;\n-   jitConfig->jitMethodBreakpointed = jitMethodBreakpointed;\n+      jitConfig->jitDiscardPendingCompilationsOfNatives = jitDiscardPendingCompilationsOfNatives;\n+      jitConfig->jitMethodBreakpointed = jitMethodBreakpointed;\n+      }\n    jitConfig->jitIllegalFinalFieldModification = jitIllegalFinalFieldModification;\n \n-   initializeCodertFunctionTable(javaVM);\n+// #if defined(J9VM_OPT_JITSERVER)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe46faff4c71f75192a2f8d6a53e51a664497b7d"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1ODE0MjgxOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/runtime/codertinit.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMzoxNDoyM1rOGIrb8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMzoxNDoyM1rOGIrb8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc1MzQ1OA==", "bodyText": "Extra line is not needed", "url": "https://github.com/eclipse-openj9/openj9/pull/9233#discussion_r411753458", "createdAt": "2020-04-20T23:14:23Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/runtime/codertinit.cpp", "diffHunk": "@@ -451,52 +452,62 @@ void codert_init_helpers_and_targets(J9JITConfig * jitConfig, char isSMP)\n    }\n #endif\n \n-   jitConfig->jitGetExceptionTableFromPC = jitGetExceptionTableFromPC;\n-   jitConfig->jitGetStackMapFromPC = getStackMapFromJitPC;\n-   jitConfig->jitGetInlinerMapFromPC = jitGetInlinerMapFromPC;\n-   jitConfig->getJitInlineDepthFromCallSite = getJitInlineDepthFromCallSite;\n-   jitConfig->getJitInlinedCallInfo = getJitInlinedCallInfo;\n-   jitConfig->getStackMapFromJitPC = getStackMapFromJitPC;\n-   jitConfig->getFirstInlinedCallSite = getFirstInlinedCallSite;\n-   jitConfig->getNextInlinedCallSite = getNextInlinedCallSite;\n-   jitConfig->hasMoreInlinedMethods = hasMoreInlinedMethods;\n-   jitConfig->getInlinedMethod = getInlinedMethod;\n-   jitConfig->getByteCodeIndex = getByteCodeIndex;\n-   jitConfig->getByteCodeIndexFromStackMap = getByteCodeIndexFromStackMap;\n-   jitConfig->getCurrentByteCodeIndexAndIsSameReceiver = getCurrentByteCodeIndexAndIsSameReceiver;\n-   jitConfig->getJitRegisterMap = getJitRegisterMap;\n-   jitConfig->jitReportDynamicCodeLoadEvents = jitReportDynamicCodeLoadEvents;\n+   TR::CompilationInfo * compInfo = TR::CompilationInfo::get(jitConfig);\n+\n+#if defined(J9VM_OPT_JITSERVER)\n+   if (compInfo->getPersistentInfo()->getRemoteCompilationMode() != JITServer::SERVER)\n+#endif\n+      {\n+      jitConfig->jitGetExceptionTableFromPC = jitGetExceptionTableFromPC;\n+      jitConfig->jitGetStackMapFromPC = getStackMapFromJitPC;\n+      jitConfig->jitGetInlinerMapFromPC = jitGetInlinerMapFromPC;\n+      jitConfig->getJitInlineDepthFromCallSite = getJitInlineDepthFromCallSite;\n+      jitConfig->getJitInlinedCallInfo = getJitInlinedCallInfo;\n+      jitConfig->getStackMapFromJitPC = getStackMapFromJitPC;\n+      jitConfig->getFirstInlinedCallSite = getFirstInlinedCallSite;\n+      jitConfig->getNextInlinedCallSite = getNextInlinedCallSite;\n+      jitConfig->hasMoreInlinedMethods = hasMoreInlinedMethods;\n+      jitConfig->getInlinedMethod = getInlinedMethod;\n+      jitConfig->getByteCodeIndex = getByteCodeIndex;\n+      jitConfig->getByteCodeIndexFromStackMap = getByteCodeIndexFromStackMap;\n+      jitConfig->getCurrentByteCodeIndexAndIsSameReceiver = getCurrentByteCodeIndexAndIsSameReceiver;\n+      jitConfig->getJitRegisterMap = getJitRegisterMap;\n+      jitConfig->jitReportDynamicCodeLoadEvents = jitReportDynamicCodeLoadEvents;\n #if (defined(TR_HOST_X86) || defined(TR_HOST_POWER) || defined(TR_HOST_S390) || defined(TR_HOST_ARM) || defined(TR_HOST_ARM64))\n-   jitConfig->jitClassesRedefined = jitClassesRedefined;\n-   jitConfig->jitFlushCompilationQueue = jitFlushCompilationQueue;\n+      jitConfig->jitClassesRedefined = jitClassesRedefined;\n+      jitConfig->jitFlushCompilationQueue = jitFlushCompilationQueue;\n #endif\n-   jitConfig->jitDiscardPendingCompilationsOfNatives = jitDiscardPendingCompilationsOfNatives;\n-   jitConfig->jitMethodBreakpointed = jitMethodBreakpointed;\n+      jitConfig->jitDiscardPendingCompilationsOfNatives = jitDiscardPendingCompilationsOfNatives;\n+      jitConfig->jitMethodBreakpointed = jitMethodBreakpointed;\n+      }\n    jitConfig->jitIllegalFinalFieldModification = jitIllegalFinalFieldModification;\n \n-   initializeCodertFunctionTable(javaVM);\n+// #if defined(J9VM_OPT_JITSERVER)\n+//    if (compInfo->getPersistentInfo()->getRemoteCompilationMode() != JITServer::SERVER)\n+// #endif\n+//       {\n+      initializeCodertFunctionTable(javaVM);\n \n-   #ifndef J9SW_NEEDS_JIT_2_INTERP_THUNKS\n-      jitConfig->jitSendTargetTable = &jit2InterpreterSendTargetTable;\n-   #endif\n-\n-   #if defined(J9VM_PORT_SIGNAL_SUPPORT) && defined(J9VM_INTERP_NATIVE_SUPPORT)\n-      #if defined(TR_HOST_X86) && defined(TR_TARGET_X86) && !defined(TR_TARGET_64BIT)\n-         jitConfig->jitSignalHandler = jitX86Handler;\n-      #elif defined(TR_HOST_POWER) && defined(TR_TARGET_POWER)\n-         jitConfig->jitSignalHandler = jitPPCHandler;\n-      #elif defined(TR_HOST_S390) && defined(TR_TARGET_S390)\n-         jitConfig->jitSignalHandler = jit390Handler;\n-      #elif defined(TR_HOST_X86) && defined(TR_TARGET_X86) && defined(TR_TARGET_64BIT)\n-         jitConfig->jitSignalHandler = jitAMD64Handler;\n-      #endif\n-   #endif\n+#ifndef J9SW_NEEDS_JIT_2_INTERP_THUNKS\n+   jitConfig->jitSendTargetTable = &jit2InterpreterSendTargetTable;\n+#endif\n \n+#if defined(J9VM_PORT_SIGNAL_SUPPORT) && defined(J9VM_INTERP_NATIVE_SUPPORT)\n+#if defined(TR_HOST_X86) && defined(TR_TARGET_X86) && !defined(TR_TARGET_64BIT)\n+   jitConfig->jitSignalHandler = jitX86Handler;\n+#elif defined(TR_HOST_POWER) && defined(TR_TARGET_POWER)\n+   jitConfig->jitSignalHandler = jitPPCHandler;\n+#elif defined(TR_HOST_S390) && defined(TR_TARGET_S390)\n+   jitConfig->jitSignalHandler = jit390Handler;\n+#elif defined(TR_HOST_X86) && defined(TR_TARGET_X86) && defined(TR_TARGET_64BIT)\n+   jitConfig->jitSignalHandler = jitAMD64Handler;\n+#endif\n+#endif\n \n #if defined(J9VM_JIT_DYNAMIC_LOOP_TRANSFER)\n    jitConfig->isDLTReady = jitLookupDLT;\n #endif\n-\n+   ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe46faff4c71f75192a2f8d6a53e51a664497b7d"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1ODE0NDEzOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/runtime/codertinit.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMzoxNDo1NlrOGIrcrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMzoxNDo1NlrOGIrcrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc1MzY0Nw==", "bodyText": "Extra spaces after the curly bracket that are not needed", "url": "https://github.com/eclipse-openj9/openj9/pull/9233#discussion_r411753647", "createdAt": "2020-04-20T23:14:56Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/runtime/codertinit.cpp", "diffHunk": "@@ -407,7 +408,7 @@ initJitTOCForAllThreads(J9JavaVM* javaVM, UDATA jitTOC)\n \n \n void codert_init_helpers_and_targets(J9JITConfig * jitConfig, char isSMP)\n-   {\n+   {   ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe46faff4c71f75192a2f8d6a53e51a664497b7d"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 390, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}