{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1NzUxNTYw", "number": 9282, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMDozMzoxNlrOD0bJLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMDozNToxM1rOD0bMJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2Mjk3MjYzOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/aarch64/codegen/CallSnippet.cpp", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMDozMzoxNlrOGJXRwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwMDowMzoyOFrOGJdgHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ3MTc0Ng==", "bodyText": "If your concern is about the size of intptr_t data, why not just use sizeof(intptr_t) here instead of the call to sizeofReferenceAddress() ?", "url": "https://github.com/eclipse-openj9/openj9/pull/9282#discussion_r412471746", "createdAt": "2020-04-21T20:33:16Z", "author": {"login": "0xdaryl"}, "path": "runtime/compiler/aarch64/codegen/CallSnippet.cpp", "diffHunk": "@@ -410,11 +410,18 @@ uint8_t *TR::ARM64VirtualUnresolvedSnippet::emitSnippetBody()\n    TR_J9VMBase *fej9 = (TR_J9VMBase *)(comp->fe());\n    void *thunk = fej9->getJ2IThunk(callNode->getSymbolReference()->getSymbol()->castToMethodSymbol()->getMethod(), comp);\n \n+   // for alignment of intptr_t data\n+   if (((uint64_t)cursor % TR::Compiler->om.sizeofReferenceAddress()) == 0)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93df4623e551c63c5aee0fa331b84c016e5f1b3e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU3MzcyNw==", "bodyText": "I agree it can be simply sizeof(intptr_t).\nsizeofReferenceAddress() came from the power version.", "url": "https://github.com/eclipse-openj9/openj9/pull/9282#discussion_r412573727", "createdAt": "2020-04-22T00:03:28Z", "author": {"login": "knn-k"}, "path": "runtime/compiler/aarch64/codegen/CallSnippet.cpp", "diffHunk": "@@ -410,11 +410,18 @@ uint8_t *TR::ARM64VirtualUnresolvedSnippet::emitSnippetBody()\n    TR_J9VMBase *fej9 = (TR_J9VMBase *)(comp->fe());\n    void *thunk = fej9->getJ2IThunk(callNode->getSymbolReference()->getSymbol()->castToMethodSymbol()->getMethod(), comp);\n \n+   // for alignment of intptr_t data\n+   if (((uint64_t)cursor % TR::Compiler->om.sizeofReferenceAddress()) == 0)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ3MTc0Ng=="}, "originalCommit": {"oid": "93df4623e551c63c5aee0fa331b84c016e5f1b3e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2Mjk4MDIyOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/aarch64/codegen/CallSnippet.cpp", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMDozNToxM1rOGJXWTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwMDowNTowN1rOGJdiVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ3MjkxMQ==", "bodyText": "Since this code is here to align the data after the call instruction, perhaps adding an assert that sizeof(int32_t) == ARM64_INSTRUCTION_LENGTH is warranted just to make it clear of the assumption you're making.", "url": "https://github.com/eclipse-openj9/openj9/pull/9282#discussion_r412472911", "createdAt": "2020-04-21T20:35:13Z", "author": {"login": "0xdaryl"}, "path": "runtime/compiler/aarch64/codegen/CallSnippet.cpp", "diffHunk": "@@ -410,11 +410,18 @@ uint8_t *TR::ARM64VirtualUnresolvedSnippet::emitSnippetBody()\n    TR_J9VMBase *fej9 = (TR_J9VMBase *)(comp->fe());\n    void *thunk = fej9->getJ2IThunk(callNode->getSymbolReference()->getSymbol()->castToMethodSymbol()->getMethod(), comp);\n \n+   // for alignment of intptr_t data\n+   if (((uint64_t)cursor % TR::Compiler->om.sizeofReferenceAddress()) == 0)\n+      {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93df4623e551c63c5aee0fa331b84c016e5f1b3e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU3NDI5NQ==", "bodyText": "I added TR_ASSERT() after cursor += ARM64_INSTRUCTION_LENGTH; in both ARM64VirtualUnresolvedSnippet and ARM64InterfaceCallSnippet.", "url": "https://github.com/eclipse-openj9/openj9/pull/9282#discussion_r412574295", "createdAt": "2020-04-22T00:05:07Z", "author": {"login": "knn-k"}, "path": "runtime/compiler/aarch64/codegen/CallSnippet.cpp", "diffHunk": "@@ -410,11 +410,18 @@ uint8_t *TR::ARM64VirtualUnresolvedSnippet::emitSnippetBody()\n    TR_J9VMBase *fej9 = (TR_J9VMBase *)(comp->fe());\n    void *thunk = fej9->getJ2IThunk(callNode->getSymbolReference()->getSymbol()->castToMethodSymbol()->getMethod(), comp);\n \n+   // for alignment of intptr_t data\n+   if (((uint64_t)cursor % TR::Compiler->om.sizeofReferenceAddress()) == 0)\n+      {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ3MjkxMQ=="}, "originalCommit": {"oid": "93df4623e551c63c5aee0fa331b84c016e5f1b3e"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 214, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}