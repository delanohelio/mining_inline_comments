{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5Nzk2ODcz", "number": 8477, "title": "Common getOffsetToFirstParm and mapIncomingParms in the linkage class across codegens", "bodyText": "The getOffsetToFirstParm API currently belongs to linkage properties\nclass in each codegen, with the Z codegen being the exception having it\ninside of the Z specific OMRLinkage. This API is however used\nthroughout all codegens and can belong to the common code OMRLinkage\nclass. We migrate the API there for use in downstream projects.\nThe mapIncomingParms API has a semantically equivalent implementation\non all codegens. Given private linkage is platform agnostic it makes sense\nof this API to live in the common private linkage class. We also take this\nopportunity to document why we double the stack slot size in certain\nscenarios.\nCloses: #8360\nSigned-off-by: Filip Jeremic fjeremic@ca.ibm.com", "createdAt": "2020-01-31T22:26:01Z", "url": "https://github.com/eclipse-openj9/openj9/pull/8477", "merged": true, "mergeCommit": {"oid": "e34469b63753fc70f7a117ea83f3eb32fa58fe88"}, "closed": true, "closedAt": "2020-06-01T15:13:02Z", "author": {"login": "fjeremic"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb_28yvAFqTM1MTgxNTM4NQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcfUjeXgBqjMzMTc2MDk2ODI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxODE1Mzg1", "url": "https://github.com/eclipse-openj9/openj9/pull/8477#pullrequestreview-351815385", "createdAt": "2020-01-31T22:31:23Z", "commit": {"oid": "f07ba348ce644917e39a86b5b222712cb1b14f9b"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMjozMToyM1rOFkZttg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMjozMzoxOFrOFkZv4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcxNDM1OA==", "bodyText": "This is a little bit of a silly way to do it, but I just did the same thing we do today to make this easier to common up. We should consider changing this to simply checking for long and double and making sure each parameter offset is aligned to the size of a reference.\nIf you note this code will use \"double slots\" for int parameters as well, then on 64-bit we'll scale the int to live inside of an 8-byte slot. This works for Java because each slot is of at least 4-bytes in width.", "url": "https://github.com/eclipse-openj9/openj9/pull/8477#discussion_r373714358", "createdAt": "2020-01-31T22:31:23Z", "author": {"login": "fjeremic"}, "path": "runtime/compiler/codegen/PrivateLinkage.cpp", "diffHunk": "@@ -0,0 +1,49 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+\n+#include \"PrivateLinkage.hpp\"\n+\n+#include \"codegen/CodeGenerator.hpp\"\n+#include \"codegen/Linkage_inlines.hpp\"\n+#include \"compile/ResolvedMethod.hpp\"\n+#include \"env/CompilerEnv.hpp\"\n+#include \"il/ParameterSymbol.hpp\"\n+\n+void\n+J9::PrivateLinkage::mapIncomingParms(TR::ResolvedMethodSymbol *method)\n+   {\n+   int32_t offsetToFirstArg = method->getNumParameterSlots() * TR::Compiler->om.sizeofReferenceAddress() + self()->getOffsetToFirstParm();\n+\n+   ListIterator<TR::ParameterSymbol> paramIterator(&method->getParameterList());\n+   for (TR::ParameterSymbol* paramCursor = paramIterator.getFirst(); paramCursor != NULL; paramCursor = paramIterator.getNext())\n+      {\n+      // This is a slightly convoluted way of enforcing the JVM specification which states that long and double \n+      // variables take up two stack slots. A stack slot in OpenJ9 is a `uintptr_t`, so on 64-bit int variables\n+      // are still placed in 64-bit stack slots, hence the need to check for 64-bit in the query below. For more\n+      // details please see eclipse/openj9#8360.\n+      int32_t slotMultiplier = cg()->comp()->target().is64Bit() && paramCursor->getDataType() != TR::Address ? 2 : 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f07ba348ce644917e39a86b5b222712cb1b14f9b"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcxNDY2MA==", "bodyText": "Noting this for myself to fix. I'll need to open up an issue and correct this reference above. This is a particularly tricky thing we do on Power due to the way linkage properties work and the fact that JNI linkage inherits from Private linkage.", "url": "https://github.com/eclipse-openj9/openj9/pull/8477#discussion_r373714660", "createdAt": "2020-01-31T22:32:23Z", "author": {"login": "fjeremic"}, "path": "runtime/compiler/p/codegen/PPCJNILinkage.cpp", "diffHunk": "@@ -63,6 +63,8 @@ J9::Power::JNILinkage::JNILinkage(TR::CodeGenerator *cg)\n \n    _properties._preservedRegisterMapForGC = privateLinkageProperties.getPreservedRegisterMapForGC();\n \n+   // TODO (#9999): JNI linkage should inherit from system linkage to avoid having to do this copying\n+   self()->setOffsetToFirstParm(sysLinkage->getOffsetToFirstParm());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f07ba348ce644917e39a86b5b222712cb1b14f9b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcxNDkxNA==", "bodyText": "Semantically this does the same thing as the new mapIncomingParms which is now common.", "url": "https://github.com/eclipse-openj9/openj9/pull/8477#discussion_r373714914", "createdAt": "2020-01-31T22:33:18Z", "author": {"login": "fjeremic"}, "path": "runtime/compiler/x/amd64/codegen/AMD64PrivateLinkage.cpp", "diffHunk": "@@ -692,40 +692,6 @@ TR_J2IThunk *J9::X86::AMD64::PrivateLinkage::generateInvokeExactJ2IThunk(TR::Nod\n    return thunk;\n    }\n \n-\n-////////////////////////////////////////////////\n-//\n-// Prologue and Epilogue\n-//\n-\n-void J9::X86::AMD64::PrivateLinkage::mapIncomingParms(TR::ResolvedMethodSymbol *method)\n-   {\n-   TR_ASSERT(!getProperties().passArgsRightToLeft(), \"Right-to-left not yet implemented on AMD64\");\n-\n-   ListIterator<TR::ParameterSymbol> parameterIterator(&method->getParameterList());\n-   TR::ParameterSymbol              *parmCursor   = parameterIterator.getFirst();\n-\n-   // Adjust the offsets to the right relative positions\n-   //\n-   int32_t offset = 0;\n-   for (parmCursor = parameterIterator.getFirst(); parmCursor; parmCursor = parameterIterator.getNext())\n-      {\n-      offset -= parmCursor->getRoundedSize() * ((DOUBLE_SIZED_ARGS && parmCursor->getDataType() != TR::Address) ? 2 : 1);\n-      parmCursor->setParameterOffset(offset);\n-      }\n-\n-   // Now that we know the total size of the parameters, we know where they all go.\n-   // Bump the offsets to the right absolute positions.\n-   // TODO:AMD64: Isn't there a way to run through the parms backward, and avoid this second pass?\n-   //\n-   const int32_t bump = getProperties().getOffsetToFirstParm() - offset;\n-   for (parmCursor = parameterIterator.getFirst(); parmCursor; parmCursor = parameterIterator.getNext())\n-      {\n-      parmCursor->setParameterOffset(bump + parmCursor->getParameterOffset());\n-      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f07ba348ce644917e39a86b5b222712cb1b14f9b"}, "originalPosition": 50}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f07ba348ce644917e39a86b5b222712cb1b14f9b", "author": {"user": {"login": "fjeremic", "name": "Filip Jeremic"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/f07ba348ce644917e39a86b5b222712cb1b14f9b", "committedDate": "2020-01-31T22:23:20Z", "message": "Common getOffsetToFirstParm in the linkage class across codegens\n\nThe `getOffsetToFirstParm` API currently belongs to linkage properties\nclass in each codegen, with the Z codegen being the exception having it\ninside of the Z specific `OMRLinkage`. This API is however used\nthroughout all codegens and can belong to the common code `OMRLinkage`\nclass. We migrate the API there for use in downstream projects.\n\nSigned-off-by: Filip Jeremic <fjeremic@ca.ibm.com>"}, "afterCommit": {"oid": "dcbc29ec0f057f0c157bef35d65752b2680ccd8e", "author": {"user": {"login": "fjeremic", "name": "Filip Jeremic"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/dcbc29ec0f057f0c157bef35d65752b2680ccd8e", "committedDate": "2020-02-03T21:14:27Z", "message": "Common getOffsetToFirstParm in the linkage class across codegens\n\nThe `getOffsetToFirstParm` API currently belongs to linkage properties\nclass in each codegen, with the Z codegen being the exception having it\ninside of the Z specific `OMRLinkage`. This API is however used\nthroughout all codegens and can belong to the common code `OMRLinkage`\nclass. We migrate the API there for use in downstream projects.\n\nSigned-off-by: Filip Jeremic <fjeremic@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dcbc29ec0f057f0c157bef35d65752b2680ccd8e", "author": {"user": {"login": "fjeremic", "name": "Filip Jeremic"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/dcbc29ec0f057f0c157bef35d65752b2680ccd8e", "committedDate": "2020-02-03T21:14:27Z", "message": "Common getOffsetToFirstParm in the linkage class across codegens\n\nThe `getOffsetToFirstParm` API currently belongs to linkage properties\nclass in each codegen, with the Z codegen being the exception having it\ninside of the Z specific `OMRLinkage`. This API is however used\nthroughout all codegens and can belong to the common code `OMRLinkage`\nclass. We migrate the API there for use in downstream projects.\n\nSigned-off-by: Filip Jeremic <fjeremic@ca.ibm.com>"}, "afterCommit": {"oid": "118eebd42cfd0daee3b8e0183a1c02ddd930d7c3", "author": {"user": {"login": "fjeremic", "name": "Filip Jeremic"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/118eebd42cfd0daee3b8e0183a1c02ddd930d7c3", "committedDate": "2020-02-04T19:59:17Z", "message": "Common getOffsetToFirstParm in the linkage class across codegens\n\nThe `getOffsetToFirstParm` API currently belongs to linkage properties\nclass in each codegen, with the Z codegen being the exception having it\ninside of the Z specific `OMRLinkage`. This API is however used\nthroughout all codegens and can belong to the common code `OMRLinkage`\nclass. We migrate the API there for use in downstream projects.\n\nSigned-off-by: Filip Jeremic <fjeremic@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1NDM3NzA0", "url": "https://github.com/eclipse-openj9/openj9/pull/8477#pullrequestreview-405437704", "createdAt": "2020-05-05T00:42:23Z", "commit": {"oid": "d4fe38195931bc31153c6794ce9f89420b43a750"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwMDo0MjoyM1rOGQXENw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwMDo0ODoxMVrOGQXKAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgwODMxMQ==", "bodyText": "I don't believe self() calls are required for the PrivateLinkage classes as they are not extensible classes themselves.  I think functionally it will work, but to make the code more readable we shouldn't use them unless we have to.  This comment applies throughout this PR, not just this one location.", "url": "https://github.com/eclipse-openj9/openj9/pull/8477#discussion_r419808311", "createdAt": "2020-05-05T00:42:23Z", "author": {"login": "0xdaryl"}, "path": "runtime/compiler/aarch64/codegen/ARM64PrivateLinkage.cpp", "diffHunk": "@@ -258,7 +258,7 @@ void J9::ARM64::PrivateLinkage::mapStack(TR::ResolvedMethodSymbol *method)\n    ListIterator<TR::ParameterSymbol> parameterIterator(&method->getParameterList());\n    TR::ParameterSymbol *parmCursor = parameterIterator.getFirst();\n \n-   int32_t offsetToFirstParm = linkageProperties.getOffsetToFirstParm();\n+   int32_t offsetToFirstParm = self()->getOffsetToFirstParm();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4fe38195931bc31153c6794ce9f89420b43a750"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgwOTc5Mg==", "bodyText": "Minor nit:  I'm not sure how efficient the build compiler is seeing through cg()->comp()->target().is64Bit() and is able to common it across iterations of the loop, but considering that it is checked for each parameter I wonder if it would be more efficient to pull this into an auto (e.g. bool is64Bit) outside of the loop.", "url": "https://github.com/eclipse-openj9/openj9/pull/8477#discussion_r419809792", "createdAt": "2020-05-05T00:48:11Z", "author": {"login": "0xdaryl"}, "path": "runtime/compiler/codegen/PrivateLinkage.cpp", "diffHunk": "@@ -0,0 +1,49 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+\n+#include \"PrivateLinkage.hpp\"\n+\n+#include \"codegen/CodeGenerator.hpp\"\n+#include \"codegen/Linkage_inlines.hpp\"\n+#include \"compile/ResolvedMethod.hpp\"\n+#include \"env/CompilerEnv.hpp\"\n+#include \"il/ParameterSymbol.hpp\"\n+\n+void\n+J9::PrivateLinkage::mapIncomingParms(TR::ResolvedMethodSymbol *method)\n+   {\n+   int32_t offsetToFirstArg = method->getNumParameterSlots() * TR::Compiler->om.sizeofReferenceAddress() + self()->getOffsetToFirstParm();\n+\n+   ListIterator<TR::ParameterSymbol> paramIterator(&method->getParameterList());\n+   for (TR::ParameterSymbol* paramCursor = paramIterator.getFirst(); paramCursor != NULL; paramCursor = paramIterator.getNext())\n+      {\n+      // This is a slightly convoluted way of enforcing the JVM specification which states that long and double \n+      // variables take up two stack slots. A stack slot in OpenJ9 is a `uintptr_t`, so on 64-bit int variables\n+      // are still placed in 64-bit stack slots, hence the need to check for 64-bit in the query below. For more\n+      // details please see eclipse/openj9#8360.\n+      int32_t slotMultiplier = cg()->comp()->target().is64Bit() && paramCursor->getDataType() != TR::Address ? 2 : 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcxNDM1OA=="}, "originalCommit": {"oid": "f07ba348ce644917e39a86b5b222712cb1b14f9b"}, "originalPosition": 43}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d4fe38195931bc31153c6794ce9f89420b43a750", "author": {"user": {"login": "fjeremic", "name": "Filip Jeremic"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/d4fe38195931bc31153c6794ce9f89420b43a750", "committedDate": "2020-02-28T18:12:12Z", "message": "Avoid using `self()` in constructors\n\nUsing `self()` within constructors relies on undefined behaviour and\nshould be avoided.\n\nSigned-off-by: Filip Jeremic <fjeremic@ca.ibm.com>"}, "afterCommit": {"oid": "ddb436d34c385a6ef4f70df080caee8684339629", "author": {"user": {"login": "fjeremic", "name": "Filip Jeremic"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/ddb436d34c385a6ef4f70df080caee8684339629", "committedDate": "2020-05-06T16:16:14Z", "message": "Remove self() calls from private linkage\n\nCalls to `self()` in private linkage classes are not needed because\nthese classes are not extensible. We also take this opportunity to\nversion a check for 64-bit in the `mapIncomingParms` function.\n\nSigned-off-by: Filip Jeremic <fjeremic@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3NDg4ODM2", "url": "https://github.com/eclipse-openj9/openj9/pull/8477#pullrequestreview-407488836", "createdAt": "2020-05-07T13:48:01Z", "commit": {"oid": "ddb436d34c385a6ef4f70df080caee8684339629"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9adb1eb2b58dc872347d9b78731b1b66129fa4ef", "author": {"user": {"login": "fjeremic", "name": "Filip Jeremic"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/9adb1eb2b58dc872347d9b78731b1b66129fa4ef", "committedDate": "2020-05-08T16:33:00Z", "message": "Common mapIncomingParms across codegens\n\nThis API has a semantically equivalent implementation on all codegens.\nGiven private linkage is platform agnostic it makes sense of this API\nto live in the common private linkage class. We also take this\nopportunity to document why we double the stack slot size in certain\nscenarios.\n\nSigned-off-by: Filip Jeremic <fjeremic@ca.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90e377c2ffae9160bee4402a805788d5e37f6b4f", "author": {"user": {"login": "fjeremic", "name": "Filip Jeremic"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/90e377c2ffae9160bee4402a805788d5e37f6b4f", "committedDate": "2020-05-08T16:33:01Z", "message": "Common getOffsetToFirstParm in the linkage class across codegens\n\nThe `getOffsetToFirstParm` API currently belongs to linkage properties\nclass in each codegen, with the Z codegen being the exception having it\ninside of the Z specific `OMRLinkage`. This API is however used\nthroughout all codegens and can belong to the common code `OMRLinkage`\nclass. We migrate the API there for use in downstream projects.\n\nSigned-off-by: Filip Jeremic <fjeremic@ca.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f51b24374975665b715c2937a38de7278b45799", "author": {"user": {"login": "fjeremic", "name": "Filip Jeremic"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/6f51b24374975665b715c2937a38de7278b45799", "committedDate": "2020-05-08T16:33:01Z", "message": "Avoid using `self()` in constructors\n\nUsing `self()` within constructors relies on undefined behaviour and\nshould be avoided.\n\nSigned-off-by: Filip Jeremic <fjeremic@ca.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f09870054f9e42408dceae28b8a5455e50d4904", "author": {"user": {"login": "fjeremic", "name": "Filip Jeremic"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/6f09870054f9e42408dceae28b8a5455e50d4904", "committedDate": "2020-05-08T16:33:01Z", "message": "Remove self() calls from private linkage\n\nCalls to `self()` in private linkage classes are not needed because\nthese classes are not extensible. We also take this opportunity to\nversion a check for 64-bit in the `mapIncomingParms` function.\n\nSigned-off-by: Filip Jeremic <fjeremic@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ddb436d34c385a6ef4f70df080caee8684339629", "author": {"user": {"login": "fjeremic", "name": "Filip Jeremic"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/ddb436d34c385a6ef4f70df080caee8684339629", "committedDate": "2020-05-06T16:16:14Z", "message": "Remove self() calls from private linkage\n\nCalls to `self()` in private linkage classes are not needed because\nthese classes are not extensible. We also take this opportunity to\nversion a check for 64-bit in the `mapIncomingParms` function.\n\nSigned-off-by: Filip Jeremic <fjeremic@ca.ibm.com>"}, "afterCommit": {"oid": "6f09870054f9e42408dceae28b8a5455e50d4904", "author": {"user": {"login": "fjeremic", "name": "Filip Jeremic"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/6f09870054f9e42408dceae28b8a5455e50d4904", "committedDate": "2020-05-08T16:33:01Z", "message": "Remove self() calls from private linkage\n\nCalls to `self()` in private linkage classes are not needed because\nthese classes are not extensible. We also take this opportunity to\nversion a check for 64-bit in the `mapIncomingParms` function.\n\nSigned-off-by: Filip Jeremic <fjeremic@ca.ibm.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 728, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}