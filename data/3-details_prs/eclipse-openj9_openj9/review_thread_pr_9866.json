{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzODUxMzk5", "number": 9866, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMDoxMDowNVrOEGJj9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMDoxMDowNVrOEGJj9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODgzNTcyOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/p/codegen/PPCJNILinkage.cpp", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMDoxMDowNVrOGkxQew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNDozNTowMFrOGlyTpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIwODk1NQ==", "bodyText": "I am not sure the ASSERT above guaranties there is nothing in the upper 32-bits of aValue (intptr_t). I would cast to int16_t to be on a safe side and to reproduce the old behaviour precisely. Or make the ASSERT more clear.", "url": "https://github.com/eclipse-openj9/openj9/pull/9866#discussion_r441208955", "createdAt": "2020-06-17T00:10:05Z", "author": {"login": "gita-omr"}, "path": "runtime/compiler/p/codegen/PPCJNILinkage.cpp", "diffHunk": "@@ -433,8 +433,8 @@ TR::Register *J9::Power::JNILinkage::buildDirectDispatch(TR::Node *callNode)\n \n       // push flags: use lis instead of lis/ori pair since this is a constant. Save one instr\n       aValue = fej9->constJNICallOutFrameFlags();\n-      TR_ASSERT((aValue & ~0x7FFF0000) == 0, \"Length assumption broken.\");\n-      generateTrg1ImmInstruction(cg(), TR::InstOpCode::lis, callNode, gr11Reg, (aValue>>16)&0x0000FFFF);\n+      TR_ASSERT_FATAL((aValue & ~0x7FFF0000) == 0, \"Length assumption broken.\");\n+      generateTrg1ImmInstruction(cg(), TR::InstOpCode::lis, callNode, gr11Reg, aValue>>16);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1eae47c09f8f44464d7f6f9ae21d9f7b3a3fb61"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU4NDc4OA==", "bodyText": "This assert does guarantee that the upper bits are unset, but thinking about it, I do agree that the type conversions involved can be a bit unintuitive. This works based on sign-extension to intptr_t after negation, so it only works because the upper bit of that mask is set after negating it. Perhaps using (aValue & ~static_cast<uintptr_t>(0x7FFF0000)) instead would make this more clear?", "url": "https://github.com/eclipse-openj9/openj9/pull/9866#discussion_r441584788", "createdAt": "2020-06-17T14:23:00Z", "author": {"login": "aviansie-ben"}, "path": "runtime/compiler/p/codegen/PPCJNILinkage.cpp", "diffHunk": "@@ -433,8 +433,8 @@ TR::Register *J9::Power::JNILinkage::buildDirectDispatch(TR::Node *callNode)\n \n       // push flags: use lis instead of lis/ori pair since this is a constant. Save one instr\n       aValue = fej9->constJNICallOutFrameFlags();\n-      TR_ASSERT((aValue & ~0x7FFF0000) == 0, \"Length assumption broken.\");\n-      generateTrg1ImmInstruction(cg(), TR::InstOpCode::lis, callNode, gr11Reg, (aValue>>16)&0x0000FFFF);\n+      TR_ASSERT_FATAL((aValue & ~0x7FFF0000) == 0, \"Length assumption broken.\");\n+      generateTrg1ImmInstruction(cg(), TR::InstOpCode::lis, callNode, gr11Reg, aValue>>16);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIwODk1NQ=="}, "originalCommit": {"oid": "f1eae47c09f8f44464d7f6f9ae21d9f7b3a3fb61"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI3NDcyNg==", "bodyText": "Opened #9930", "url": "https://github.com/eclipse-openj9/openj9/pull/9866#discussion_r442274726", "createdAt": "2020-06-18T14:35:00Z", "author": {"login": "gita-omr"}, "path": "runtime/compiler/p/codegen/PPCJNILinkage.cpp", "diffHunk": "@@ -433,8 +433,8 @@ TR::Register *J9::Power::JNILinkage::buildDirectDispatch(TR::Node *callNode)\n \n       // push flags: use lis instead of lis/ori pair since this is a constant. Save one instr\n       aValue = fej9->constJNICallOutFrameFlags();\n-      TR_ASSERT((aValue & ~0x7FFF0000) == 0, \"Length assumption broken.\");\n-      generateTrg1ImmInstruction(cg(), TR::InstOpCode::lis, callNode, gr11Reg, (aValue>>16)&0x0000FFFF);\n+      TR_ASSERT_FATAL((aValue & ~0x7FFF0000) == 0, \"Length assumption broken.\");\n+      generateTrg1ImmInstruction(cg(), TR::InstOpCode::lis, callNode, gr11Reg, aValue>>16);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIwODk1NQ=="}, "originalCommit": {"oid": "f1eae47c09f8f44464d7f6f9ae21d9f7b3a3fb61"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 6, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}