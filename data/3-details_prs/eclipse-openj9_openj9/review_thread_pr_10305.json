{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU5NjI4NTcy", "number": 10305, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNzo1NzozOVrOEVG4gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMDozNzowMFrOEdYRLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTY4MzIwOnYy", "diffSide": "RIGHT", "path": "runtime/gc_modron_startup/mmparse.cpp", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNzo1NzozOVrOG7rXjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMDoxNToxMVrOG7v7fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIyOTcxMA==", "bodyText": "I don't like style portableSharedCacheIndex == noportableSharedCacheIndex means both not found.\nIt is hard to read. Please be explicit.\nAlso this change means we always will run with shift 3 in any container run by default.\n@DanHeidinga @vijaysun-omr Most of container runs uses small heap so use bit shift 0. Do we want to change this behaviour for all runs in container? 0-shift has better performance\nAlso please change formatting. Should be\n    if (....) {\n        ....\n    } else if () {\n        ....\n    } else if () {\n        ....\n    } else {\n        ....\n    }", "url": "https://github.com/eclipse-openj9/openj9/pull/10305#discussion_r465229710", "createdAt": "2020-08-04T17:57:39Z", "author": {"login": "dmitripivkine"}, "path": "runtime/gc_modron_startup/mmparse.cpp", "diffHunk": "@@ -1247,6 +1247,25 @@ gcParseXXArguments(J9JavaVM *vm)\n \t\t}\n \t}\n \n+\t{\n+\t\tIDATA portableSharedCacheIndex = FIND_ARG_IN_VMARGS(EXACT_MATCH, VMOPT_XXPORTABLESHAREDCACHE, NULL);\n+\t\tIDATA noportableSharedCacheIndex = FIND_ARG_IN_VMARGS(EXACT_MATCH, VMOPT_XXNOPORTABLESHAREDCACHE, NULL);\n+\t\tif (portableSharedCacheIndex > noportableSharedCacheIndex) {\n+\t\t\textensions->shouldForceToLowMemoryHeapCeilingShiftIfPossible = true;\n+\t\t}\n+\t\telse if (portableSharedCacheIndex < noportableSharedCacheIndex) {\n+\t\t\textensions->shouldForceToLowMemoryHeapCeilingShiftIfPossible = false;\n+\t\t}\n+\t\telse {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd33010ab81c3a083c106ca0e31959a1bbe6f3ff"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIzNTY3Nw==", "bodyText": "Also if we want this behaviour for containers I believe this is wrong place to set it. It should be set explicitly in MM_Configuration::initializeRunTimeObjectAlignmentAndCRShift(). Parser should not make such decisions.\nI understand it is require to pass more information to recognize case VMOPT_XXNOPORTABLESHAREDCACHE is requested.", "url": "https://github.com/eclipse-openj9/openj9/pull/10305#discussion_r465235677", "createdAt": "2020-08-04T18:08:48Z", "author": {"login": "dmitripivkine"}, "path": "runtime/gc_modron_startup/mmparse.cpp", "diffHunk": "@@ -1247,6 +1247,25 @@ gcParseXXArguments(J9JavaVM *vm)\n \t\t}\n \t}\n \n+\t{\n+\t\tIDATA portableSharedCacheIndex = FIND_ARG_IN_VMARGS(EXACT_MATCH, VMOPT_XXPORTABLESHAREDCACHE, NULL);\n+\t\tIDATA noportableSharedCacheIndex = FIND_ARG_IN_VMARGS(EXACT_MATCH, VMOPT_XXNOPORTABLESHAREDCACHE, NULL);\n+\t\tif (portableSharedCacheIndex > noportableSharedCacheIndex) {\n+\t\t\textensions->shouldForceToLowMemoryHeapCeilingShiftIfPossible = true;\n+\t\t}\n+\t\telse if (portableSharedCacheIndex < noportableSharedCacheIndex) {\n+\t\t\textensions->shouldForceToLowMemoryHeapCeilingShiftIfPossible = false;\n+\t\t}\n+\t\telse {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIyOTcxMA=="}, "originalCommit": {"oid": "fd33010ab81c3a083c106ca0e31959a1bbe6f3ff"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI2ODUwOA==", "bodyText": "Also if we want this behaviour for containers I believe this is wrong place to set it. It should be set explicitly in MM_Configuration::initializeRunTimeObjectAlignmentAndCRShift(). Parser should not make such decisions.\nI understand it is require to pass more information to recognize case VMOPT_XXNOPORTABLESHAREDCACHE is requested.\n\nOkay I will move the decision to initializeRunTimeObjectAlignmentAndCRShift().\n\t\tif (portableSharedCacheIndex != noportableSharedCacheIndex) {\n\t\t\t/* At least one option is set. Find the right most one. */\n\t\t\tif (portableSharedCacheIndex > noportableSharedCacheIndex) {\n\t\t\t\textensions->portableSharedCacheEnabled = true;\n\t\t\t} else {\n\t\t\t\textensions->portableSharedCacheEnabled = false;\n\t\t\t}\n\t\t\textensions->portableSharedCacheExplicitlySet = true;\n\t\t} else {\n\t\t\textensions->portableSharedCacheExplicitlySet = false;\n\t\t}\n\nThough with that, one boolean variable won't be enough. The container decision is made if user has not explicitly set the option.", "url": "https://github.com/eclipse-openj9/openj9/pull/10305#discussion_r465268508", "createdAt": "2020-08-04T19:09:16Z", "author": {"login": "harryyu1994"}, "path": "runtime/gc_modron_startup/mmparse.cpp", "diffHunk": "@@ -1247,6 +1247,25 @@ gcParseXXArguments(J9JavaVM *vm)\n \t\t}\n \t}\n \n+\t{\n+\t\tIDATA portableSharedCacheIndex = FIND_ARG_IN_VMARGS(EXACT_MATCH, VMOPT_XXPORTABLESHAREDCACHE, NULL);\n+\t\tIDATA noportableSharedCacheIndex = FIND_ARG_IN_VMARGS(EXACT_MATCH, VMOPT_XXNOPORTABLESHAREDCACHE, NULL);\n+\t\tif (portableSharedCacheIndex > noportableSharedCacheIndex) {\n+\t\t\textensions->shouldForceToLowMemoryHeapCeilingShiftIfPossible = true;\n+\t\t}\n+\t\telse if (portableSharedCacheIndex < noportableSharedCacheIndex) {\n+\t\t\textensions->shouldForceToLowMemoryHeapCeilingShiftIfPossible = false;\n+\t\t}\n+\t\telse {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIyOTcxMA=="}, "originalCommit": {"oid": "fd33010ab81c3a083c106ca0e31959a1bbe6f3ff"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMwNDQ0Nw==", "bodyText": "Also this change means we always will run with shift 3 in any container run by default.\n\nI think shift 3 should be used when the JVM is run in container AND uses AOT (for portability reasons)", "url": "https://github.com/eclipse-openj9/openj9/pull/10305#discussion_r465304447", "createdAt": "2020-08-04T20:15:11Z", "author": {"login": "mpirvu"}, "path": "runtime/gc_modron_startup/mmparse.cpp", "diffHunk": "@@ -1247,6 +1247,25 @@ gcParseXXArguments(J9JavaVM *vm)\n \t\t}\n \t}\n \n+\t{\n+\t\tIDATA portableSharedCacheIndex = FIND_ARG_IN_VMARGS(EXACT_MATCH, VMOPT_XXPORTABLESHAREDCACHE, NULL);\n+\t\tIDATA noportableSharedCacheIndex = FIND_ARG_IN_VMARGS(EXACT_MATCH, VMOPT_XXNOPORTABLESHAREDCACHE, NULL);\n+\t\tif (portableSharedCacheIndex > noportableSharedCacheIndex) {\n+\t\t\textensions->shouldForceToLowMemoryHeapCeilingShiftIfPossible = true;\n+\t\t}\n+\t\telse if (portableSharedCacheIndex < noportableSharedCacheIndex) {\n+\t\t\textensions->shouldForceToLowMemoryHeapCeilingShiftIfPossible = false;\n+\t\t}\n+\t\telse {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIyOTcxMA=="}, "originalCommit": {"oid": "fd33010ab81c3a083c106ca0e31959a1bbe6f3ff"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTkwOTc3OnYy", "diffSide": "RIGHT", "path": "runtime/gc_modron_startup/mmparse.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxOTowMzo1NFrOG7tj0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxOTowNjowOFrOG7to4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI2NTYxNw==", "bodyText": "please join two lines to one:\n    } else {", "url": "https://github.com/eclipse-openj9/openj9/pull/10305#discussion_r465265617", "createdAt": "2020-08-04T19:03:54Z", "author": {"login": "dmitripivkine"}, "path": "runtime/gc_modron_startup/mmparse.cpp", "diffHunk": "@@ -1247,6 +1247,19 @@ gcParseXXArguments(J9JavaVM *vm)\n \t\t}\n \t}\n \n+\t{\n+\t\tIDATA portableSharedCacheIndex = FIND_ARG_IN_VMARGS(EXACT_MATCH, VMOPT_XXPORTABLESHAREDCACHE, NULL);\n+\t\tIDATA noportableSharedCacheIndex = FIND_ARG_IN_VMARGS(EXACT_MATCH, VMOPT_XXNOPORTABLESHAREDCACHE, NULL);\n+\t\tif (portableSharedCacheIndex != noportableSharedCacheIndex) {\n+\t\t\t/* At least one option is set. Find the right most one. */\n+\t\t\tif (portableSharedCacheIndex > noportableSharedCacheIndex) {\n+\t\t\t\textensions->portableSharedCacheEnabled = true;\n+\t\t\t}\n+\t\t\telse {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "876a329510aba7792439a9109ca5fbf700cbf8e6"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI2NjkxMw==", "bodyText": "oops, didn't realize this was the format problem you were talking about, now i get it, thanks!", "url": "https://github.com/eclipse-openj9/openj9/pull/10305#discussion_r465266913", "createdAt": "2020-08-04T19:06:08Z", "author": {"login": "harryyu1994"}, "path": "runtime/gc_modron_startup/mmparse.cpp", "diffHunk": "@@ -1247,6 +1247,19 @@ gcParseXXArguments(J9JavaVM *vm)\n \t\t}\n \t}\n \n+\t{\n+\t\tIDATA portableSharedCacheIndex = FIND_ARG_IN_VMARGS(EXACT_MATCH, VMOPT_XXPORTABLESHAREDCACHE, NULL);\n+\t\tIDATA noportableSharedCacheIndex = FIND_ARG_IN_VMARGS(EXACT_MATCH, VMOPT_XXNOPORTABLESHAREDCACHE, NULL);\n+\t\tif (portableSharedCacheIndex != noportableSharedCacheIndex) {\n+\t\t\t/* At least one option is set. Find the right most one. */\n+\t\t\tif (portableSharedCacheIndex > noportableSharedCacheIndex) {\n+\t\t\t\textensions->portableSharedCacheEnabled = true;\n+\t\t\t}\n+\t\t\telse {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI2NTYxNw=="}, "originalCommit": {"oid": "876a329510aba7792439a9109ca5fbf700cbf8e6"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDI2ODE1OnYy", "diffSide": "RIGHT", "path": "runtime/gc_modron_startup/mmparse.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNzozNDoyOFrOG89iHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNzozNDoyOFrOG89iHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU3NTkwMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tchar optionsBuffer[2*EsMaxPath];\n          \n          \n            \n            \t\t\tchar optionsBuffer[2 * EsMaxPath];", "url": "https://github.com/eclipse-openj9/openj9/pull/10305#discussion_r466575900", "createdAt": "2020-08-06T17:34:28Z", "author": {"login": "dmitripivkine"}, "path": "runtime/gc_modron_startup/mmparse.cpp", "diffHunk": "@@ -1247,6 +1247,42 @@ gcParseXXArguments(J9JavaVM *vm)\n \t\t}\n \t}\n \n+\t{\n+#if defined(J9VM_ARCH_X86)\n+\t\tIDATA portableSharedCacheIndex = FIND_ARG_IN_VMARGS(EXACT_MATCH, VMOPT_XXPORTABLESHAREDCACHE, NULL);\n+\t\tIDATA noportableSharedCacheIndex = FIND_ARG_IN_VMARGS(EXACT_MATCH, VMOPT_XXNOPORTABLESHAREDCACHE, NULL);\n+\t\tif (portableSharedCacheIndex != noportableSharedCacheIndex) {\n+\t\t\t/* At least one option is set. Find the right most one. */\n+\t\t\tif (portableSharedCacheIndex > noportableSharedCacheIndex) {\n+\t\t\t\textensions->portableSharedCacheEnabled = true;\n+\t\t\t} else {\n+\t\t\t\textensions->portableSharedCacheEnabled = false;\n+\t\t\t}\n+\t\t} else {\n+\t\t\textensions->shouldForceCeilingShiftForContainers = true;\n+\t\t}\n+\n+\t\tIDATA shareClassesIndex = FIND_ARG_IN_VMARGS(OPTIONAL_LIST_MATCH, \"-Xshareclasses\", NULL);\n+\t\tif (shareClassesIndex >= 0) {\n+\t\t\tchar optionsBuffer[2*EsMaxPath];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eebf4e5f3f35329d4293d7d45ca7aaf265dae4e9"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDI2OTM3OnYy", "diffSide": "RIGHT", "path": "runtime/gc_modron_startup/mmparse.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNzozNDo0OFrOG89i3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNzozNDo0OFrOG89i3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU3NjA5Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tif (GET_OPTION_VALUES(shareClassesIndex, ':', ',', &optionsBufferPtr, 2*EsMaxPath) == OPTION_OK) {\n          \n          \n            \n            \t\t\tif (GET_OPTION_VALUES(shareClassesIndex, ':', ',', &optionsBufferPtr, 2 * EsMaxPath) == OPTION_OK) {", "url": "https://github.com/eclipse-openj9/openj9/pull/10305#discussion_r466576092", "createdAt": "2020-08-06T17:34:48Z", "author": {"login": "dmitripivkine"}, "path": "runtime/gc_modron_startup/mmparse.cpp", "diffHunk": "@@ -1247,6 +1247,42 @@ gcParseXXArguments(J9JavaVM *vm)\n \t\t}\n \t}\n \n+\t{\n+#if defined(J9VM_ARCH_X86)\n+\t\tIDATA portableSharedCacheIndex = FIND_ARG_IN_VMARGS(EXACT_MATCH, VMOPT_XXPORTABLESHAREDCACHE, NULL);\n+\t\tIDATA noportableSharedCacheIndex = FIND_ARG_IN_VMARGS(EXACT_MATCH, VMOPT_XXNOPORTABLESHAREDCACHE, NULL);\n+\t\tif (portableSharedCacheIndex != noportableSharedCacheIndex) {\n+\t\t\t/* At least one option is set. Find the right most one. */\n+\t\t\tif (portableSharedCacheIndex > noportableSharedCacheIndex) {\n+\t\t\t\textensions->portableSharedCacheEnabled = true;\n+\t\t\t} else {\n+\t\t\t\textensions->portableSharedCacheEnabled = false;\n+\t\t\t}\n+\t\t} else {\n+\t\t\textensions->shouldForceCeilingShiftForContainers = true;\n+\t\t}\n+\n+\t\tIDATA shareClassesIndex = FIND_ARG_IN_VMARGS(OPTIONAL_LIST_MATCH, \"-Xshareclasses\", NULL);\n+\t\tif (shareClassesIndex >= 0) {\n+\t\t\tchar optionsBuffer[2*EsMaxPath];\n+\t\t\tchar* optionsBufferPtr = (char*)optionsBuffer;\n+\n+\t\t\tif (GET_OPTION_VALUES(shareClassesIndex, ':', ',', &optionsBufferPtr, 2*EsMaxPath) == OPTION_OK) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eebf4e5f3f35329d4293d7d45ca7aaf265dae4e9"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDkxMDcwOnYy", "diffSide": "RIGHT", "path": "runtime/gc_modron_startup/mmparse.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDo0ODoyMFrOG9DvRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDo0ODoyMFrOG9DvRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY3NzU3NQ==", "bodyText": "we can skip code below if extensions->shouldForceCeilingShiftForContainers is not set to true", "url": "https://github.com/eclipse-openj9/openj9/pull/10305#discussion_r466677575", "createdAt": "2020-08-06T20:48:20Z", "author": {"login": "dmitripivkine"}, "path": "runtime/gc_modron_startup/mmparse.cpp", "diffHunk": "@@ -1247,6 +1247,42 @@ gcParseXXArguments(J9JavaVM *vm)\n \t\t}\n \t}\n \n+\t{\n+#if defined(J9VM_ARCH_X86)\n+\t\tIDATA portableSharedCacheIndex = FIND_ARG_IN_VMARGS(EXACT_MATCH, VMOPT_XXPORTABLESHAREDCACHE, NULL);\n+\t\tIDATA noportableSharedCacheIndex = FIND_ARG_IN_VMARGS(EXACT_MATCH, VMOPT_XXNOPORTABLESHAREDCACHE, NULL);\n+\t\tif (portableSharedCacheIndex != noportableSharedCacheIndex) {\n+\t\t\t/* At least one option is set. Find the right most one. */\n+\t\t\tif (portableSharedCacheIndex > noportableSharedCacheIndex) {\n+\t\t\t\textensions->portableSharedCacheEnabled = true;\n+\t\t\t} else {\n+\t\t\t\textensions->portableSharedCacheEnabled = false;\n+\t\t\t}\n+\t\t} else {\n+\t\t\textensions->shouldForceCeilingShiftForContainers = true;\n+\t\t}\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eebf4e5f3f35329d4293d7d45ca7aaf265dae4e9"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NDA1MTE0OnYy", "diffSide": "RIGHT", "path": "runtime/gc_modron_startup/mmparse.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMzo0MzozMFrOHHMvFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMzo0MzozMFrOHHMvFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMxMDc0MQ==", "bodyText": "There are a few things I have problem with:\n\nIf we want to enable feature for x86 platforms only we should have boolean responsible to enable/disable feature.\nAn initialization of this variable should be only place where #if defined(J9VM_ARCH_X86) is used. All other related code should be platform independent (should exist for all platforms and not for x86 only). This helps in future to expand feature to other platforms.\nThere is a parsing of options parsed earlier. Would be better to reuse result of previous parsing (and maybe even deeper - results of logical analysis made based on previous parsing)\nParsing of options under logical condition might lead to potential existence of cases with unconsumed arguments. Parsing of provided options should be done regardless of applicability of them. I understand this is second parsing, so see previous bullet\nLast but not least this is absolutely wrong place to set extensions->shouldForceCeilingShiftForContainers in case if none of the options are discovered. This new value for variable must be initialized as default before this parsing in a proper place.\n\nI believe this is wrong place for this code. I suggest:\n\ncreate required booleans somewhere in VM substructure (find a right place)\ninitialize them properly at the time of first options parsing in jvminit.c\nif it is possible to add such booleans visible from OMR code you don't need these booleans in GCExtensionsBase. Use OMR VM variables instead directly.\nif such booleans are visible from OpenJ9 only you still need new variables in GCExtensionsBase. These variables should be initialized properly for standalone OMR and be set at OpenJ9 side accordinly (somewhere in mminit.cpp I guess)\n\nSo I believe we don't need any change in this file at all. This is wrong place to do it. There is a much better way to do it.", "url": "https://github.com/eclipse-openj9/openj9/pull/10305#discussion_r477310741", "createdAt": "2020-08-26T13:43:30Z", "author": {"login": "dmitripivkine"}, "path": "runtime/gc_modron_startup/mmparse.cpp", "diffHunk": "@@ -1260,6 +1260,29 @@ gcParseXXArguments(J9JavaVM *vm)\n \t\t}\n \t}\n \n+#if defined(J9VM_ARCH_X86)\n+\t{\n+\t\tif (NULL != vm->sharedClassPreinitConfig) {\n+\t\t\tIDATA argIndexXaot = FIND_ARG_IN_VMARGS(OPTIONAL_LIST_MATCH, \"-Xaot\", 0);\n+\t\t\tIDATA argIndexXnoaot = FIND_ARG_IN_VMARGS(OPTIONAL_LIST_MATCH, \"-Xnoaot\", 0);\n+\t\t\tif (argIndexXaot >= argIndexXnoaot) { \n+\t\t\t\tIDATA portableSharedCacheIndex = FIND_ARG_IN_VMARGS(EXACT_MATCH, VMOPT_XXPORTABLESHAREDCACHE, NULL);\n+\t\t\t\tIDATA noportableSharedCacheIndex = FIND_ARG_IN_VMARGS(EXACT_MATCH, VMOPT_XXNOPORTABLESHAREDCACHE, NULL);\n+\t\t\t\tif (portableSharedCacheIndex != noportableSharedCacheIndex) {\n+\t\t\t\t\t/* At least one option is set. Find the right most one. */\n+\t\t\t\t\tif (portableSharedCacheIndex > noportableSharedCacheIndex) {\n+\t\t\t\t\t\textensions->portableSharedCacheEnabled = true;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\textensions->portableSharedCacheEnabled = false;\n+\t\t\t\t\t}\n+\t\t\t\t} else {\n+\t\t\t\t\textensions->shouldForceCeilingShiftForContainers = true;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+#endif /* defined(J9VM_ARCH_X86) */\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b2f5f0082da4189dfe9d1a777efb7ea060393a3"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTkxNzIxOnYy", "diffSide": "RIGHT", "path": "runtime/gc_modron_startup/mminit.cpp", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMTo0NToxM1rOHHe1rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMjoyOToxOVrOHHf5Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYwNzM0Mg==", "bodyText": "it is much better but I still don't like #if defined(J9VM_ARCH_X86) here. This is not clear connection why shift should be forced for x86 only (something else hidden here happen somewhere, right?) I believe would be better to have global feature control boolean and use it here instead of true. Or you can just set bit for x86 only if it is fits better to your logic.", "url": "https://github.com/eclipse-openj9/openj9/pull/10305#discussion_r477607342", "createdAt": "2020-08-26T21:45:13Z", "author": {"login": "dmitripivkine"}, "path": "runtime/gc_modron_startup/mminit.cpp", "diffHunk": "@@ -492,6 +492,12 @@ j9gc_initialize_heap(J9JavaVM *vm, IDATA *memoryParameterTable, UDATA heapBytesR\n \t}\n #endif\n \n+#if defined(J9VM_ARCH_X86)\n+\tif (J9_ARE_ANY_BITS_SET(vm->extendedRuntimeFlags2, J9_EXTENDED_RUNTIME2_ENABLE_PORTABLE_SHARED_CACHE)) {\n+\t\textensions->shouldForceLowMemoryHeapCeilingShiftIfPossible = true;\n+\t}\n+#endif /* defined(J9VM_ARCH_X86) */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03606c73d02e506509960a5c7e23265835ddbccf"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYwOTg0Mw==", "bodyText": "the rational for this when you need to expand the feature to another platform would be no need to modify this code again... Ideally should be a single place single boolean to control enabled/disabled platforms", "url": "https://github.com/eclipse-openj9/openj9/pull/10305#discussion_r477609843", "createdAt": "2020-08-26T21:51:12Z", "author": {"login": "dmitripivkine"}, "path": "runtime/gc_modron_startup/mminit.cpp", "diffHunk": "@@ -492,6 +492,12 @@ j9gc_initialize_heap(J9JavaVM *vm, IDATA *memoryParameterTable, UDATA heapBytesR\n \t}\n #endif\n \n+#if defined(J9VM_ARCH_X86)\n+\tif (J9_ARE_ANY_BITS_SET(vm->extendedRuntimeFlags2, J9_EXTENDED_RUNTIME2_ENABLE_PORTABLE_SHARED_CACHE)) {\n+\t\textensions->shouldForceLowMemoryHeapCeilingShiftIfPossible = true;\n+\t}\n+#endif /* defined(J9VM_ARCH_X86) */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYwNzM0Mg=="}, "originalCommit": {"oid": "03606c73d02e506509960a5c7e23265835ddbccf"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYxNzQzNg==", "bodyText": "Also is it correct place to set variable? Looks like it is too late... Should be set at the beginning of this function before line 321:\n    extensions->heap = extensions->configuration->createHeap(&env, heapBytesRequested);", "url": "https://github.com/eclipse-openj9/openj9/pull/10305#discussion_r477617436", "createdAt": "2020-08-26T22:10:05Z", "author": {"login": "dmitripivkine"}, "path": "runtime/gc_modron_startup/mminit.cpp", "diffHunk": "@@ -492,6 +492,12 @@ j9gc_initialize_heap(J9JavaVM *vm, IDATA *memoryParameterTable, UDATA heapBytesR\n \t}\n #endif\n \n+#if defined(J9VM_ARCH_X86)\n+\tif (J9_ARE_ANY_BITS_SET(vm->extendedRuntimeFlags2, J9_EXTENDED_RUNTIME2_ENABLE_PORTABLE_SHARED_CACHE)) {\n+\t\textensions->shouldForceLowMemoryHeapCeilingShiftIfPossible = true;\n+\t}\n+#endif /* defined(J9VM_ARCH_X86) */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYwNzM0Mg=="}, "originalCommit": {"oid": "03606c73d02e506509960a5c7e23265835ddbccf"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYyNDU5OQ==", "bodyText": "Okay I agree, it makes more sense to set J9_EXTENDED_RUNTIME2_ENABLE_PORTABLE_SHARED_CACHE for x86 only.", "url": "https://github.com/eclipse-openj9/openj9/pull/10305#discussion_r477624599", "createdAt": "2020-08-26T22:29:19Z", "author": {"login": "harryyu1994"}, "path": "runtime/gc_modron_startup/mminit.cpp", "diffHunk": "@@ -492,6 +492,12 @@ j9gc_initialize_heap(J9JavaVM *vm, IDATA *memoryParameterTable, UDATA heapBytesR\n \t}\n #endif\n \n+#if defined(J9VM_ARCH_X86)\n+\tif (J9_ARE_ANY_BITS_SET(vm->extendedRuntimeFlags2, J9_EXTENDED_RUNTIME2_ENABLE_PORTABLE_SHARED_CACHE)) {\n+\t\textensions->shouldForceLowMemoryHeapCeilingShiftIfPossible = true;\n+\t}\n+#endif /* defined(J9VM_ARCH_X86) */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYwNzM0Mg=="}, "originalCommit": {"oid": "03606c73d02e506509960a5c7e23265835ddbccf"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NjE4NjQyOnYy", "diffSide": "RIGHT", "path": "runtime/vm/jvminit.c", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMzowODoxMlrOHHhakg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMzowODoxMlrOHHhakg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzY0OTU1NA==", "bodyText": "J9_EXTENDED_RUNTIME2_ENABLE_PORTABLE_SHARED_CACHE may set even if AOT is off. I would put this code in the same block that sets vm->extendedRuntimeFlags2 |= J9_EXTENDED_RUNTIME2_ENABLE_AOT; because only if AOT is enabled make sense to generate portable code.", "url": "https://github.com/eclipse-openj9/openj9/pull/10305#discussion_r477649554", "createdAt": "2020-08-26T23:08:12Z", "author": {"login": "mpirvu"}, "path": "runtime/vm/jvminit.c", "diffHunk": "@@ -1766,7 +1788,22 @@ IDATA VMInitStages(J9JavaVM *vm, IDATA stage, void* reserved) {\n \t\t\t\t\t}\n \t\t\t\t\tpiConfig->sharedClassReadWriteBytes = -1;\t\t\t\t\t/* -1 == proportion of cache size */\n \t\t\t\t\tvm->sharedClassPreinitConfig = piConfig;\n-\t\t\t\t}\n+\n+\t\t\t\t\tif (argIndexXaot >= argIndexXnoaot) {\n+\t\t\t\t\t\tvm->extendedRuntimeFlags2 |= J9_EXTENDED_RUNTIME2_ENABLE_AOT;\n+\t\t\t\t\t}\n+\n+#if defined(J9VM_ARCH_X86)\n+\t\t\t\t\tif (argIndexXXPortableSharedCache > argIndexXXNoPortableSharedCache) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6a41e9de079f5a76f0adb1e6df1020cb992ae57"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NjIwNzA0OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/control/rossa.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMzoxMToxN1rOHHhoEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMDoxNjo1MVrOHHniaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzY1MzAwOQ==", "bodyText": "Just curious: what does this do? Emits a trace point that specifies the enablement of the portable AOT?", "url": "https://github.com/eclipse-openj9/openj9/pull/10305#discussion_r477653009", "createdAt": "2020-08-26T23:11:17Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/control/rossa.cpp", "diffHunk": "@@ -1976,7 +1976,7 @@ aboutToBootstrap(J9JavaVM * javaVM, J9JITConfig * jitConfig)\n \n    UT_MODULE_LOADED(J9_UTINTERFACE_FROM_VM(javaVM));\n    Trc_JIT_VMInitStages_Event1(curThread);\n-   Trc_JIT_portableSharedCache_enabled_or_disabled(curThread, TRUE == javaVM->sharedCacheAPI->sharedCachePortable ? 1 : 0);\n+   Trc_JIT_portableSharedCache_enabled_or_disabled(curThread, J9_ARE_ANY_BITS_SET(javaVM->extendedRuntimeFlags2, J9_EXTENDED_RUNTIME2_ENABLE_PORTABLE_SHARED_CACHE) ? 1 : 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6a41e9de079f5a76f0adb1e6df1020cb992ae57"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzc0OTg2Nw==", "bodyText": "Yes. And it is used by testing.", "url": "https://github.com/eclipse-openj9/openj9/pull/10305#discussion_r477749867", "createdAt": "2020-08-27T00:16:51Z", "author": {"login": "harryyu1994"}, "path": "runtime/compiler/control/rossa.cpp", "diffHunk": "@@ -1976,7 +1976,7 @@ aboutToBootstrap(J9JavaVM * javaVM, J9JITConfig * jitConfig)\n \n    UT_MODULE_LOADED(J9_UTINTERFACE_FROM_VM(javaVM));\n    Trc_JIT_VMInitStages_Event1(curThread);\n-   Trc_JIT_portableSharedCache_enabled_or_disabled(curThread, TRUE == javaVM->sharedCacheAPI->sharedCachePortable ? 1 : 0);\n+   Trc_JIT_portableSharedCache_enabled_or_disabled(curThread, J9_ARE_ANY_BITS_SET(javaVM->extendedRuntimeFlags2, J9_EXTENDED_RUNTIME2_ENABLE_PORTABLE_SHARED_CACHE) ? 1 : 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzY1MzAwOQ=="}, "originalCommit": {"oid": "e6a41e9de079f5a76f0adb1e6df1020cb992ae57"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MjMyMzU5OnYy", "diffSide": "RIGHT", "path": "runtime/vm/jvminit.c", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMDowNzozNlrOHIfeFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMDowNzozNlrOHIfeFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY2NjI2Mg==", "bodyText": "Please define one variable each line and initialize them to 0.", "url": "https://github.com/eclipse-openj9/openj9/pull/10305#discussion_r478666262", "createdAt": "2020-08-27T20:07:36Z", "author": {"login": "hangshao0"}, "path": "runtime/vm/jvminit.c", "diffHunk": "@@ -1675,10 +1675,27 @@ IDATA VMInitStages(J9JavaVM *vm, IDATA stage, void* reserved) {\n \t\t\t{\n \t\t\t\tIDATA argIndex3, argIndex4, argIndex5, argIndex6, argIndex7, argIndex8;\n \t\t\t\tIDATA argIndex9 = 0;\n+\t\t\t\tBOOLEAN sharedClassDisabled = FALSE;\n+\t\t\t\tIDATA argIndexXXPortableSharedCache, argIndexXXNoPortableSharedCache, argIndexXaot, argIndexXnoaot;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2b6c37c973899a98e425c57fd84d29063b80003"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MjMyNzMxOnYy", "diffSide": "RIGHT", "path": "runtime/vm/jvminit.c", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMDowODozNVrOHIfgUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMDowODozNVrOHIfgUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY2NjgzMw==", "bodyText": "Missing spaces before and after \"+\".", "url": "https://github.com/eclipse-openj9/openj9/pull/10305#discussion_r478666833", "createdAt": "2020-08-27T20:08:35Z", "author": {"login": "hangshao0"}, "path": "runtime/vm/jvminit.c", "diffHunk": "@@ -1675,10 +1675,27 @@ IDATA VMInitStages(J9JavaVM *vm, IDATA stage, void* reserved) {\n \t\t\t{\n \t\t\t\tIDATA argIndex3, argIndex4, argIndex5, argIndex6, argIndex7, argIndex8;\n \t\t\t\tIDATA argIndex9 = 0;\n+\t\t\t\tBOOLEAN sharedClassDisabled = FALSE;\n+\t\t\t\tIDATA argIndexXXPortableSharedCache, argIndexXXNoPortableSharedCache, argIndexXaot, argIndexXnoaot;\n \n \t\t\t\tvm->sharedClassPreinitConfig = NULL;\n \n \t\t\t\targIndex = FIND_ARG_IN_VMARGS(OPTIONAL_LIST_MATCH, VMOPT_XSHARECLASSES, NULL);\n+\t\t\t\tif (argIndex >= 0) {\n+\t\t\t\t\tchar optionsBuffer[2 * J9SH_MAXPATH];\n+\t\t\t\t\tchar* optionsBufferPtr = (char*)optionsBuffer;\n+\n+\t\t\t\t\tif (GET_OPTION_VALUES(argIndex, ':', ',', &optionsBufferPtr, 2 * J9SH_MAXPATH) == OPTION_OK) {\n+\t\t\t\t\t\twhile (*optionsBufferPtr) {\n+\t\t\t\t\t\t\tif (try_scan(&optionsBufferPtr, OPT_NONE)) {\n+\t\t\t\t\t\t\t\tsharedClassDisabled = TRUE;\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\toptionsBufferPtr += strlen(optionsBufferPtr)+1;\n+\t\t\t\t\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2b6c37c973899a98e425c57fd84d29063b80003"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MjM2NzMzOnYy", "diffSide": "RIGHT", "path": "runtime/vm/jvminit.c", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMDoyMDo1OFrOHIf48g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMDozOTozMFrOHIgclQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY3MzEzOA==", "bodyText": "Does this == case mean that these options are not found in the command line ?", "url": "https://github.com/eclipse-openj9/openj9/pull/10305#discussion_r478673138", "createdAt": "2020-08-27T20:20:58Z", "author": {"login": "hangshao0"}, "path": "runtime/vm/jvminit.c", "diffHunk": "@@ -1766,7 +1788,24 @@ IDATA VMInitStages(J9JavaVM *vm, IDATA stage, void* reserved) {\n \t\t\t\t\t}\n \t\t\t\t\tpiConfig->sharedClassReadWriteBytes = -1;\t\t\t\t\t/* -1 == proportion of cache size */\n \t\t\t\t\tvm->sharedClassPreinitConfig = piConfig;\n+\n+\t\t\t\t\tif (argIndexXaot >= argIndexXnoaot) {\n+\t\t\t\t\t\tvm->extendedRuntimeFlags2 |= J9_EXTENDED_RUNTIME2_ENABLE_AOT;\n+#if defined(J9VM_ARCH_X86)\n+\t\t\t\t\t\tif (argIndexXXPortableSharedCache > argIndexXXNoPortableSharedCache) {\n+\t\t\t\t\t\t\tvm->extendedRuntimeFlags2 |= J9_EXTENDED_RUNTIME2_ENABLE_PORTABLE_SHARED_CACHE;\n+\t\t\t\t\t\t} else if (argIndexXXPortableSharedCache == argIndexXXNoPortableSharedCache) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2b6c37c973899a98e425c57fd84d29063b80003"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY3NzE1OA==", "bodyText": "Yes, == means not found so we follow the default behavior which is enabled by default in containers and disabled by default otherwise.", "url": "https://github.com/eclipse-openj9/openj9/pull/10305#discussion_r478677158", "createdAt": "2020-08-27T20:29:04Z", "author": {"login": "harryyu1994"}, "path": "runtime/vm/jvminit.c", "diffHunk": "@@ -1766,7 +1788,24 @@ IDATA VMInitStages(J9JavaVM *vm, IDATA stage, void* reserved) {\n \t\t\t\t\t}\n \t\t\t\t\tpiConfig->sharedClassReadWriteBytes = -1;\t\t\t\t\t/* -1 == proportion of cache size */\n \t\t\t\t\tvm->sharedClassPreinitConfig = piConfig;\n+\n+\t\t\t\t\tif (argIndexXaot >= argIndexXnoaot) {\n+\t\t\t\t\t\tvm->extendedRuntimeFlags2 |= J9_EXTENDED_RUNTIME2_ENABLE_AOT;\n+#if defined(J9VM_ARCH_X86)\n+\t\t\t\t\t\tif (argIndexXXPortableSharedCache > argIndexXXNoPortableSharedCache) {\n+\t\t\t\t\t\t\tvm->extendedRuntimeFlags2 |= J9_EXTENDED_RUNTIME2_ENABLE_PORTABLE_SHARED_CACHE;\n+\t\t\t\t\t\t} else if (argIndexXXPortableSharedCache == argIndexXXNoPortableSharedCache) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY3MzEzOA=="}, "originalCommit": {"oid": "f2b6c37c973899a98e425c57fd84d29063b80003"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY4MjI2MQ==", "bodyText": "OK. Then please add a comment saying that none of these options are used in this case.", "url": "https://github.com/eclipse-openj9/openj9/pull/10305#discussion_r478682261", "createdAt": "2020-08-27T20:39:30Z", "author": {"login": "hangshao0"}, "path": "runtime/vm/jvminit.c", "diffHunk": "@@ -1766,7 +1788,24 @@ IDATA VMInitStages(J9JavaVM *vm, IDATA stage, void* reserved) {\n \t\t\t\t\t}\n \t\t\t\t\tpiConfig->sharedClassReadWriteBytes = -1;\t\t\t\t\t/* -1 == proportion of cache size */\n \t\t\t\t\tvm->sharedClassPreinitConfig = piConfig;\n+\n+\t\t\t\t\tif (argIndexXaot >= argIndexXnoaot) {\n+\t\t\t\t\t\tvm->extendedRuntimeFlags2 |= J9_EXTENDED_RUNTIME2_ENABLE_AOT;\n+#if defined(J9VM_ARCH_X86)\n+\t\t\t\t\t\tif (argIndexXXPortableSharedCache > argIndexXXNoPortableSharedCache) {\n+\t\t\t\t\t\t\tvm->extendedRuntimeFlags2 |= J9_EXTENDED_RUNTIME2_ENABLE_PORTABLE_SHARED_CACHE;\n+\t\t\t\t\t\t} else if (argIndexXXPortableSharedCache == argIndexXXNoPortableSharedCache) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY3MzEzOA=="}, "originalCommit": {"oid": "f2b6c37c973899a98e425c57fd84d29063b80003"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MjQxNzc0OnYy", "diffSide": "RIGHT", "path": "runtime/vm/jvminit.c", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMDozNzowMFrOHIgX9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMDozOToxMlrOHIgcDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY4MTA3OA==", "bodyText": "Is this correct ? setting J9_EXTENDED_RUNTIME2_ENABLE_AOT when xnoaot is found.", "url": "https://github.com/eclipse-openj9/openj9/pull/10305#discussion_r478681078", "createdAt": "2020-08-27T20:37:00Z", "author": {"login": "hangshao0"}, "path": "runtime/vm/jvminit.c", "diffHunk": "@@ -2866,6 +2906,7 @@ modifyDllLoadTable(J9JavaVM * vm, J9Pool* loadTable, J9VMInitArgs* j9vm_args)\n \t\tJVMINIT_VERBOSE_INIT_VM_TRACE(vm, \"-Xint set\\n\");\n \t}\n \tif (xnoaot) {\n+\t\tvm->extendedRuntimeFlags2 |= J9_EXTENDED_RUNTIME2_ENABLE_AOT;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cb1b442d1acb220c2038a10bc34cb2a9c3319cd"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY4MTg2MQ==", "bodyText": "Sorry I just fixed this. Should be under xaot.", "url": "https://github.com/eclipse-openj9/openj9/pull/10305#discussion_r478681861", "createdAt": "2020-08-27T20:38:41Z", "author": {"login": "harryyu1994"}, "path": "runtime/vm/jvminit.c", "diffHunk": "@@ -2866,6 +2906,7 @@ modifyDllLoadTable(J9JavaVM * vm, J9Pool* loadTable, J9VMInitArgs* j9vm_args)\n \t\tJVMINIT_VERBOSE_INIT_VM_TRACE(vm, \"-Xint set\\n\");\n \t}\n \tif (xnoaot) {\n+\t\tvm->extendedRuntimeFlags2 |= J9_EXTENDED_RUNTIME2_ENABLE_AOT;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY4MTA3OA=="}, "originalCommit": {"oid": "2cb1b442d1acb220c2038a10bc34cb2a9c3319cd"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY4MjEyNw==", "bodyText": "I'm going to double check the logic here again", "url": "https://github.com/eclipse-openj9/openj9/pull/10305#discussion_r478682127", "createdAt": "2020-08-27T20:39:12Z", "author": {"login": "harryyu1994"}, "path": "runtime/vm/jvminit.c", "diffHunk": "@@ -2866,6 +2906,7 @@ modifyDllLoadTable(J9JavaVM * vm, J9Pool* loadTable, J9VMInitArgs* j9vm_args)\n \t\tJVMINIT_VERBOSE_INIT_VM_TRACE(vm, \"-Xint set\\n\");\n \t}\n \tif (xnoaot) {\n+\t\tvm->extendedRuntimeFlags2 |= J9_EXTENDED_RUNTIME2_ENABLE_AOT;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY4MTA3OA=="}, "originalCommit": {"oid": "2cb1b442d1acb220c2038a10bc34cb2a9c3319cd"}, "originalPosition": 92}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4858, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}