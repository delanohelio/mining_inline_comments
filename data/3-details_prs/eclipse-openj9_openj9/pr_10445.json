{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyODI3OTE5", "number": 10445, "title": "Move argument memory size parsing to j9argscan", "bodyText": "Previously, parsing methods were only accessible within the GC. Moving these methods into j9argscan enables them to be used generally by VM, and JIT.\nSigned-off-by: AlenBadel Alen.Badel@ibm.com", "createdAt": "2020-08-24T22:54:46Z", "url": "https://github.com/eclipse-openj9/openj9/pull/10445", "merged": true, "mergeCommit": {"oid": "99ef7aa505ce283c91501b187624ba14fdc9f0cf"}, "closed": true, "closedAt": "2020-08-27T19:55:59Z", "author": {"login": "AlenBadel"}, "timelineItems": {"totalCount": 37, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdCKvHkABqjM2ODc1MTY2MDM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdDCMb0AFqTQ3Njg0MTU1MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "64f4ddef48a8e9c63fff8e8cada9fb410de24db0", "author": {"user": null}, "url": "https://github.com/eclipse-openj9/openj9/commit/64f4ddef48a8e9c63fff8e8cada9fb410de24db0", "committedDate": "2020-08-24T22:49:25Z", "message": "Move argument memory size parsing to a common module\n\nPreviously, parsing methods were only accessible within the GC. Moving these methods into j9argscan enables them to be used generally by VM, and JIT.\n\nSigned-off-by: AlenBadel <Alen.Badel@ibm.com>"}, "afterCommit": {"oid": "956dbc374b99f4e427f35dfed2632dd810c684e9", "author": {"user": null}, "url": "https://github.com/eclipse-openj9/openj9/commit/956dbc374b99f4e427f35dfed2632dd810c684e9", "committedDate": "2020-08-24T22:55:10Z", "message": "Move argument memory size parsing into j9argscan\n\nPreviously, parsing methods were only accessible within the GC. Moving these methods into j9argscan enables them to be used generally by VM, and JIT.\n\nSigned-off-by: AlenBadel <Alen.Badel@ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "da40c641664aa8959b0723bd56a580cb28eb0eb8", "author": {"user": null}, "url": "https://github.com/eclipse-openj9/openj9/commit/da40c641664aa8959b0723bd56a580cb28eb0eb8", "committedDate": "2020-08-24T22:58:00Z", "message": "Copyright"}, "afterCommit": {"oid": "7b5d4560ecae81bea1872583ca3eeddfa12ed66f", "author": {"user": null}, "url": "https://github.com/eclipse-openj9/openj9/commit/7b5d4560ecae81bea1872583ca3eeddfa12ed66f", "committedDate": "2020-08-24T22:58:13Z", "message": "Move argument memory size parsing into j9argscan\n\nPreviously, parsing methods were only accessible within the GC. Moving these methods into j9argscan enables them to be used generally by VM, and JIT.\n\nSigned-off-by: AlenBadel <Alen.Badel@ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0NjMwMzY3", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#pullrequestreview-474630367", "createdAt": "2020-08-25T16:03:32Z", "commit": {"oid": "41b250ce26566e197042983d34130d6db9cd8f7a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjowMzozMlrOHGfGJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjowMzozMlrOHGfGJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU2Mjk4Mw==", "bodyText": "type of result should be uintptr_t (UDATA equivalent)", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r476562983", "createdAt": "2020-08-25T16:03:32Z", "author": {"login": "dmitripivkine"}, "path": "runtime/gc_modron_startup/mmparse.cpp", "diffHunk": "@@ -1355,95 +1355,58 @@ scan_hex_helper(J9JavaVM *javaVM, char **cursor, UDATA *value, const char *argNa\n }\n \n /**\n- * Wrapper for scan_udata_helper, that provides parsing for memory sizes.\n- * User should be able to specify the size in GiBs, MiBs, or KiBs (with G,g,M,m,K,k suffixes) or\n- * in bytes (no suffix)\n+ * Wrapper for scan_udata_memory_size, that provides readable error messages.\n+ * @param cursor address of the pointer to the string to parse for the udata.\n+ * @param value address of the storage for the udata to be read.\n+ * @param argName string containing the argument name to be used in error reporting.\n  * @return true if parsing was successful, false otherwise.\n  */\n bool\n scan_udata_memory_size_helper(J9JavaVM *javaVM, char **cursor, UDATA *value, const char *argName)\n {\n \tPORT_ACCESS_FROM_JAVAVM(javaVM);\n+\tU_64 result = scan_udata_memory_size(cursor, value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41b250ce26566e197042983d34130d6db9cd8f7a"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0NjMxNzMz", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#pullrequestreview-474631733", "createdAt": "2020-08-25T16:05:04Z", "commit": {"oid": "41b250ce26566e197042983d34130d6db9cd8f7a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjowNTowNFrOHGfKIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjowNTowNFrOHGfKIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU2NDAwMA==", "bodyText": "this helper should be updated to handle T and t as well", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r476564000", "createdAt": "2020-08-25T16:05:04Z", "author": {"login": "dmitripivkine"}, "path": "runtime/util_core/j9argscan.c", "diffHunk": "@@ -385,6 +385,97 @@ scan_hex_caseflag_u64(char **scan_start, BOOLEAN uppercaseAllowed, uint64_t* res\n \treturn bits;\n }\n \n+/**\n+ * Scan the next unsigned number off of the argument string, and parses for memory sizes.\n+ * Specify the size in GiBs, MiBs, or KiBs (with G,g,M,m,K,k suffixes) or in bytes (no suffix).\n+ * @param[in] scan_start The string to be scanned\n+ * @param[out] result The result\n+ * @return returns 0 on success, 1 if the argument string is not a number, or 2 if overflow occurs.\n+ */\n+uintptr_t\n+scan_u64_memory_size(char **scan_start, uint64_t* result)\n+{\n+\tuintptr_t rc = scan_u64(scan_start, result);\n+\n+\t/* Report any errors from scan */\n+\tif(0 != rc) {\n+\t\treturn rc;\n+\t}\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41b250ce26566e197042983d34130d6db9cd8f7a"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0NjQ4NDMx", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#pullrequestreview-474648431", "createdAt": "2020-08-25T16:24:23Z", "commit": {"oid": "028385db85dd05db7cebad0056f373aed8aeaaf2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjoyNDoyM1rOHGf8Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjoyNDoyM1rOHGf8Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3NjgxMA==", "bodyText": "Would you please change code to have single return function:\n\nremove return 0 == result\nadd explicit check for 2 == result\nuse return 0 == result; at the end", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r476576810", "createdAt": "2020-08-25T16:24:23Z", "author": {"login": "dmitripivkine"}, "path": "runtime/gc_modron_startup/mmparse.cpp", "diffHunk": "@@ -1355,95 +1355,58 @@ scan_hex_helper(J9JavaVM *javaVM, char **cursor, UDATA *value, const char *argNa\n }\n \n /**\n- * Wrapper for scan_udata_helper, that provides parsing for memory sizes.\n- * User should be able to specify the size in GiBs, MiBs, or KiBs (with G,g,M,m,K,k suffixes) or\n- * in bytes (no suffix)\n+ * Wrapper for scan_udata_memory_size, that provides readable error messages.\n+ * @param cursor address of the pointer to the string to parse for the udata.\n+ * @param value address of the storage for the udata to be read.\n+ * @param argName string containing the argument name to be used in error reporting.\n  * @return true if parsing was successful, false otherwise.\n  */\n bool\n scan_udata_memory_size_helper(J9JavaVM *javaVM, char **cursor, UDATA *value, const char *argName)\n {\n \tPORT_ACCESS_FROM_JAVAVM(javaVM);\n+\tU_64 result = scan_udata_memory_size(cursor, value);\n \n-\tif(!scan_udata_helper(javaVM, cursor, value, argName)) {\n-\t\treturn false;\n+\t/* Report Success */\n+\tif(0 == result) {\n+\t\treturn true;\n \t}\n-\t\n-\tif(try_scan(cursor, \"T\") || try_scan(cursor, \"t\")) {\n-\t\tif (0 != *value) {\n-#if defined(J9VM_ENV_DATA64)\n-\t\t\tif (*value <= (((UDATA)-1) >> 40)) {\n-\t\t\t\t*value <<= 40;\n-\t\t\t} else\n-#endif /* defined(J9VM_ENV_DATA64) */\n-\t\t\t{\n-\t\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n-\t\t\t\treturn false;\n-\t\t\t}\n-\t\t}\n-\t} else if(try_scan(cursor, \"G\") || try_scan(cursor, \"g\")) {\n-\t\tif (*value <= (((UDATA)-1) >> 30)) {\n-\t\t\t*value <<= 30;\n-\t\t} else {\n-\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n-\t\t\treturn false;\n-\t\t}\n-\t} else if(try_scan(cursor, \"M\") || try_scan(cursor, \"m\")) {\n-\t\tif (*value <= (((UDATA)-1) >> 20)) {\n-\t\t\t*value <<= 20;\n-\t\t} else {\n-\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n-\t\t\treturn false;\n-\t\t}\n-\t} else if(try_scan(cursor, \"K\") || try_scan(cursor, \"k\")) {\n-\t\tif (*value <= (((UDATA)-1) >> 10)) {\n-\t\t\t*value <<= 10;\n-\t\t} else {\n-\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n-\t\t\treturn false;\n-\t\t}\n+\n+\t/* Report Errors */\n+\tif (1 == result) {\n+\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_MUST_BE_NUMBER, argName);\n+\t} else {\n+\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n \t}\n-\treturn true;\n+\n+\treturn false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "028385db85dd05db7cebad0056f373aed8aeaaf2"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0NjQ5MzM1", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#pullrequestreview-474649335", "createdAt": "2020-08-25T16:25:29Z", "commit": {"oid": "028385db85dd05db7cebad0056f373aed8aeaaf2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjoyNToyOVrOHGf_Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjoyNToyOVrOHGf_Ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3NzU3MA==", "bodyText": "same as above: would you please make this single return function?", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r476577570", "createdAt": "2020-08-25T16:25:29Z", "author": {"login": "dmitripivkine"}, "path": "runtime/gc_modron_startup/mmparse.cpp", "diffHunk": "@@ -1355,95 +1355,58 @@ scan_hex_helper(J9JavaVM *javaVM, char **cursor, UDATA *value, const char *argNa\n }\n \n /**\n- * Wrapper for scan_udata_helper, that provides parsing for memory sizes.\n- * User should be able to specify the size in GiBs, MiBs, or KiBs (with G,g,M,m,K,k suffixes) or\n- * in bytes (no suffix)\n+ * Wrapper for scan_udata_memory_size, that provides readable error messages.\n+ * @param cursor address of the pointer to the string to parse for the udata.\n+ * @param value address of the storage for the udata to be read.\n+ * @param argName string containing the argument name to be used in error reporting.\n  * @return true if parsing was successful, false otherwise.\n  */\n bool\n scan_udata_memory_size_helper(J9JavaVM *javaVM, char **cursor, UDATA *value, const char *argName)\n {\n \tPORT_ACCESS_FROM_JAVAVM(javaVM);\n+\tU_64 result = scan_udata_memory_size(cursor, value);\n \n-\tif(!scan_udata_helper(javaVM, cursor, value, argName)) {\n-\t\treturn false;\n+\t/* Report Success */\n+\tif(0 == result) {\n+\t\treturn true;\n \t}\n-\t\n-\tif(try_scan(cursor, \"T\") || try_scan(cursor, \"t\")) {\n-\t\tif (0 != *value) {\n-#if defined(J9VM_ENV_DATA64)\n-\t\t\tif (*value <= (((UDATA)-1) >> 40)) {\n-\t\t\t\t*value <<= 40;\n-\t\t\t} else\n-#endif /* defined(J9VM_ENV_DATA64) */\n-\t\t\t{\n-\t\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n-\t\t\t\treturn false;\n-\t\t\t}\n-\t\t}\n-\t} else if(try_scan(cursor, \"G\") || try_scan(cursor, \"g\")) {\n-\t\tif (*value <= (((UDATA)-1) >> 30)) {\n-\t\t\t*value <<= 30;\n-\t\t} else {\n-\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n-\t\t\treturn false;\n-\t\t}\n-\t} else if(try_scan(cursor, \"M\") || try_scan(cursor, \"m\")) {\n-\t\tif (*value <= (((UDATA)-1) >> 20)) {\n-\t\t\t*value <<= 20;\n-\t\t} else {\n-\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n-\t\t\treturn false;\n-\t\t}\n-\t} else if(try_scan(cursor, \"K\") || try_scan(cursor, \"k\")) {\n-\t\tif (*value <= (((UDATA)-1) >> 10)) {\n-\t\t\t*value <<= 10;\n-\t\t} else {\n-\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n-\t\t\treturn false;\n-\t\t}\n+\n+\t/* Report Errors */\n+\tif (1 == result) {\n+\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_MUST_BE_NUMBER, argName);\n+\t} else {\n+\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n \t}\n-\treturn true;\n+\n+\treturn false;\n }\n \n /**\n- * Wrapper for scan_u64_helper, that provides parsing for memory sizes.\n- * User should be able to specify the size in GiBs, MiBs, or KiBs (with G,g,M,m,K,k suffixes) or\n- * in bytes (no suffix)\n+ * Wrapper for scan_u64_helper, that provides readable error messages.\n+ * @param cursor address of the pointer to the string to parse for the udata.\n+ * @param value address of the storage for the udata to be read.\n+ * @param argName string containing the argument name to be used in error reporting.\n  * @return true if parsing was successful, false otherwise.\n  */\n bool\n scan_u64_memory_size_helper(J9JavaVM *javaVM, char **cursor, U_64 *value, const char *argName)\n {\n \tPORT_ACCESS_FROM_JAVAVM(javaVM);\n+\tU_64 result = scan_u64_memory_size(cursor, value);\n \n-\tif(!scan_u64_helper(javaVM, cursor, value, argName)) {\n-\t\treturn false;\n-\t}\n+\t/* Report Success */\n+\tif (0 == result)\n+\t\treturn true;\n \n-\tif(try_scan(cursor, \"G\") || try_scan(cursor, \"g\")) {\n-\t\tif (*value <= (((U_64)-1) >> 30)) {\n-\t\t\t*value <<= 30;\n-\t\t} else {\n-\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n-\t\t\treturn false;\n-\t\t}\n-\t} else if(try_scan(cursor, \"M\") || try_scan(cursor, \"m\")) {\n-\t\tif (*value <= (((U_64)-1) >> 20)) {\n-\t\t\t*value <<= 20;\n-\t\t} else {\n-\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n-\t\t\treturn false;\n-\t\t}\n-\t} else if(try_scan(cursor, \"K\") || try_scan(cursor, \"k\")) {\n-\t\tif (*value <= (((U_64)-1) >> 10)) {\n-\t\t\t*value <<= 10;\n-\t\t} else {\n-\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n-\t\t\treturn false;\n-\t\t}\n+\t/* Report Errors */\n+\tif (1 == result) {\n+\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_MUST_BE_NUMBER, argName);\n+\t} else {\n+\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n \t}\n-\treturn true;\n+\n+\treturn false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "028385db85dd05db7cebad0056f373aed8aeaaf2"}, "originalPosition": 123}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0NzgxNjUx", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#pullrequestreview-474781651", "createdAt": "2020-08-25T19:20:15Z", "commit": {"oid": "644d928c0cfd7557b0a2b6627e644d3948abacfe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxOToyMDoxNlrOHGmXmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxOToyMDoxNlrOHGmXmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY4MjEzNg==", "bodyText": "please put constant first", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r476682136", "createdAt": "2020-08-25T19:20:16Z", "author": {"login": "dmitripivkine"}, "path": "runtime/gc_modron_startup/mmparse.cpp", "diffHunk": "@@ -1355,95 +1356,49 @@ scan_hex_helper(J9JavaVM *javaVM, char **cursor, UDATA *value, const char *argNa\n }\n \n /**\n- * Wrapper for scan_udata_helper, that provides parsing for memory sizes.\n- * User should be able to specify the size in GiBs, MiBs, or KiBs (with G,g,M,m,K,k suffixes) or\n- * in bytes (no suffix)\n+ * Wrapper for scan_udata_memory_size, that provides readable error messages.\n+ * @param cursor address of the pointer to the string to parse for the udata.\n+ * @param value address of the storage for the udata to be read.\n+ * @param argName string containing the argument name to be used in error reporting.\n  * @return true if parsing was successful, false otherwise.\n  */\n bool\n scan_udata_memory_size_helper(J9JavaVM *javaVM, char **cursor, UDATA *value, const char *argName)\n {\n \tPORT_ACCESS_FROM_JAVAVM(javaVM);\n+\tUDATA result = scan_udata_memory_size(cursor, value);\n \n-\tif(!scan_udata_helper(javaVM, cursor, value, argName)) {\n-\t\treturn false;\n-\t}\n-\t\n-\tif(try_scan(cursor, \"T\") || try_scan(cursor, \"t\")) {\n-\t\tif (0 != *value) {\n-#if defined(J9VM_ENV_DATA64)\n-\t\t\tif (*value <= (((UDATA)-1) >> 40)) {\n-\t\t\t\t*value <<= 40;\n-\t\t\t} else\n-#endif /* defined(J9VM_ENV_DATA64) */\n-\t\t\t{\n-\t\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n-\t\t\t\treturn false;\n-\t\t\t}\n-\t\t}\n-\t} else if(try_scan(cursor, \"G\") || try_scan(cursor, \"g\")) {\n-\t\tif (*value <= (((UDATA)-1) >> 30)) {\n-\t\t\t*value <<= 30;\n-\t\t} else {\n-\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n-\t\t\treturn false;\n-\t\t}\n-\t} else if(try_scan(cursor, \"M\") || try_scan(cursor, \"m\")) {\n-\t\tif (*value <= (((UDATA)-1) >> 20)) {\n-\t\t\t*value <<= 20;\n-\t\t} else {\n-\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n-\t\t\treturn false;\n-\t\t}\n-\t} else if(try_scan(cursor, \"K\") || try_scan(cursor, \"k\")) {\n-\t\tif (*value <= (((UDATA)-1) >> 10)) {\n-\t\t\t*value <<= 10;\n-\t\t} else {\n-\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n-\t\t\treturn false;\n-\t\t}\n+\t/* Report Errors */\n+\tif (1 == result) {\n+\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_MUST_BE_NUMBER, argName);\n+\t} else if (2 == result) {\n+\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n \t}\n-\treturn true;\n+\n+\treturn result == 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "644d928c0cfd7557b0a2b6627e644d3948abacfe"}, "originalPosition": 72}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0NzgxODY4", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#pullrequestreview-474781868", "createdAt": "2020-08-25T19:20:36Z", "commit": {"oid": "644d928c0cfd7557b0a2b6627e644d3948abacfe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxOToyMDozNlrOHGmYRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxOToyMDozNlrOHGmYRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY4MjMwOA==", "bodyText": "please put constant first", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r476682308", "createdAt": "2020-08-25T19:20:36Z", "author": {"login": "dmitripivkine"}, "path": "runtime/gc_modron_startup/mmparse.cpp", "diffHunk": "@@ -1355,95 +1356,49 @@ scan_hex_helper(J9JavaVM *javaVM, char **cursor, UDATA *value, const char *argNa\n }\n \n /**\n- * Wrapper for scan_udata_helper, that provides parsing for memory sizes.\n- * User should be able to specify the size in GiBs, MiBs, or KiBs (with G,g,M,m,K,k suffixes) or\n- * in bytes (no suffix)\n+ * Wrapper for scan_udata_memory_size, that provides readable error messages.\n+ * @param cursor address of the pointer to the string to parse for the udata.\n+ * @param value address of the storage for the udata to be read.\n+ * @param argName string containing the argument name to be used in error reporting.\n  * @return true if parsing was successful, false otherwise.\n  */\n bool\n scan_udata_memory_size_helper(J9JavaVM *javaVM, char **cursor, UDATA *value, const char *argName)\n {\n \tPORT_ACCESS_FROM_JAVAVM(javaVM);\n+\tUDATA result = scan_udata_memory_size(cursor, value);\n \n-\tif(!scan_udata_helper(javaVM, cursor, value, argName)) {\n-\t\treturn false;\n-\t}\n-\t\n-\tif(try_scan(cursor, \"T\") || try_scan(cursor, \"t\")) {\n-\t\tif (0 != *value) {\n-#if defined(J9VM_ENV_DATA64)\n-\t\t\tif (*value <= (((UDATA)-1) >> 40)) {\n-\t\t\t\t*value <<= 40;\n-\t\t\t} else\n-#endif /* defined(J9VM_ENV_DATA64) */\n-\t\t\t{\n-\t\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n-\t\t\t\treturn false;\n-\t\t\t}\n-\t\t}\n-\t} else if(try_scan(cursor, \"G\") || try_scan(cursor, \"g\")) {\n-\t\tif (*value <= (((UDATA)-1) >> 30)) {\n-\t\t\t*value <<= 30;\n-\t\t} else {\n-\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n-\t\t\treturn false;\n-\t\t}\n-\t} else if(try_scan(cursor, \"M\") || try_scan(cursor, \"m\")) {\n-\t\tif (*value <= (((UDATA)-1) >> 20)) {\n-\t\t\t*value <<= 20;\n-\t\t} else {\n-\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n-\t\t\treturn false;\n-\t\t}\n-\t} else if(try_scan(cursor, \"K\") || try_scan(cursor, \"k\")) {\n-\t\tif (*value <= (((UDATA)-1) >> 10)) {\n-\t\t\t*value <<= 10;\n-\t\t} else {\n-\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n-\t\t\treturn false;\n-\t\t}\n+\t/* Report Errors */\n+\tif (1 == result) {\n+\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_MUST_BE_NUMBER, argName);\n+\t} else if (2 == result) {\n+\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n \t}\n-\treturn true;\n+\n+\treturn result == 0;\n }\n \n /**\n- * Wrapper for scan_u64_helper, that provides parsing for memory sizes.\n- * User should be able to specify the size in GiBs, MiBs, or KiBs (with G,g,M,m,K,k suffixes) or\n- * in bytes (no suffix)\n+ * Wrapper for scan_u64_helper, that provides readable error messages.\n+ * @param cursor address of the pointer to the string to parse for the udata.\n+ * @param value address of the storage for the udata to be read.\n+ * @param argName string containing the argument name to be used in error reporting.\n  * @return true if parsing was successful, false otherwise.\n  */\n bool\n scan_u64_memory_size_helper(J9JavaVM *javaVM, char **cursor, U_64 *value, const char *argName)\n {\n \tPORT_ACCESS_FROM_JAVAVM(javaVM);\n+\tU_64 result = scan_u64_memory_size(cursor, value);\n \n-\tif(!scan_u64_helper(javaVM, cursor, value, argName)) {\n-\t\treturn false;\n+\t/* Report Errors */\n+\tif (1 == result) {\n+\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_MUST_BE_NUMBER, argName);\n+\t} else if (2 == result) {\n+\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n \t}\n \n-\tif(try_scan(cursor, \"G\") || try_scan(cursor, \"g\")) {\n-\t\tif (*value <= (((U_64)-1) >> 30)) {\n-\t\t\t*value <<= 30;\n-\t\t} else {\n-\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n-\t\t\treturn false;\n-\t\t}\n-\t} else if(try_scan(cursor, \"M\") || try_scan(cursor, \"m\")) {\n-\t\tif (*value <= (((U_64)-1) >> 20)) {\n-\t\t\t*value <<= 20;\n-\t\t} else {\n-\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n-\t\t\treturn false;\n-\t\t}\n-\t} else if(try_scan(cursor, \"K\") || try_scan(cursor, \"k\")) {\n-\t\tif (*value <= (((U_64)-1) >> 10)) {\n-\t\t\t*value <<= 10;\n-\t\t} else {\n-\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n-\t\t\treturn false;\n-\t\t}\n-\t}\n-\treturn true;\n+\treturn result == 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "644d928c0cfd7557b0a2b6627e644d3948abacfe"}, "originalPosition": 123}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0Nzg2NTYy", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#pullrequestreview-474786562", "createdAt": "2020-08-25T19:27:18Z", "commit": {"oid": "f22d71783399b2a2174d852957173d95b2b149c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxOToyNzoxOFrOHGmmxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxOToyNzoxOFrOHGmmxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY4NjAyMw==", "bodyText": "As far as you move functions it is make sense to replace return codes 1 and 2 to defined values at the same time", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r476686023", "createdAt": "2020-08-25T19:27:18Z", "author": {"login": "dmitripivkine"}, "path": "runtime/gc_modron_startup/mmparse.cpp", "diffHunk": "@@ -1355,95 +1356,49 @@ scan_hex_helper(J9JavaVM *javaVM, char **cursor, UDATA *value, const char *argNa\n }\n \n /**\n- * Wrapper for scan_udata_helper, that provides parsing for memory sizes.\n- * User should be able to specify the size in GiBs, MiBs, or KiBs (with G,g,M,m,K,k suffixes) or\n- * in bytes (no suffix)\n+ * Wrapper for scan_udata_memory_size, that provides readable error messages.\n+ * @param cursor address of the pointer to the string to parse for the udata.\n+ * @param value address of the storage for the udata to be read.\n+ * @param argName string containing the argument name to be used in error reporting.\n  * @return true if parsing was successful, false otherwise.\n  */\n bool\n scan_udata_memory_size_helper(J9JavaVM *javaVM, char **cursor, UDATA *value, const char *argName)\n {\n \tPORT_ACCESS_FROM_JAVAVM(javaVM);\n+\tUDATA result = scan_udata_memory_size(cursor, value);\n \n-\tif(!scan_udata_helper(javaVM, cursor, value, argName)) {\n-\t\treturn false;\n-\t}\n-\t\n-\tif(try_scan(cursor, \"T\") || try_scan(cursor, \"t\")) {\n-\t\tif (0 != *value) {\n-#if defined(J9VM_ENV_DATA64)\n-\t\t\tif (*value <= (((UDATA)-1) >> 40)) {\n-\t\t\t\t*value <<= 40;\n-\t\t\t} else\n-#endif /* defined(J9VM_ENV_DATA64) */\n-\t\t\t{\n-\t\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n-\t\t\t\treturn false;\n-\t\t\t}\n-\t\t}\n-\t} else if(try_scan(cursor, \"G\") || try_scan(cursor, \"g\")) {\n-\t\tif (*value <= (((UDATA)-1) >> 30)) {\n-\t\t\t*value <<= 30;\n-\t\t} else {\n-\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n-\t\t\treturn false;\n-\t\t}\n-\t} else if(try_scan(cursor, \"M\") || try_scan(cursor, \"m\")) {\n-\t\tif (*value <= (((UDATA)-1) >> 20)) {\n-\t\t\t*value <<= 20;\n-\t\t} else {\n-\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n-\t\t\treturn false;\n-\t\t}\n-\t} else if(try_scan(cursor, \"K\") || try_scan(cursor, \"k\")) {\n-\t\tif (*value <= (((UDATA)-1) >> 10)) {\n-\t\t\t*value <<= 10;\n-\t\t} else {\n-\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n-\t\t\treturn false;\n-\t\t}\n+\t/* Report Errors */\n+\tif (1 == result) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f22d71783399b2a2174d852957173d95b2b149c9"}, "originalPosition": 65}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0Nzg3NDc4", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#pullrequestreview-474787478", "createdAt": "2020-08-25T19:28:43Z", "commit": {"oid": "f22d71783399b2a2174d852957173d95b2b149c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxOToyODo0M1rOHGmpgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxOToyODo0M1rOHGmpgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY4NjcyMw==", "bodyText": "please put a space between if and bracket - here and everywhere", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r476686723", "createdAt": "2020-08-25T19:28:43Z", "author": {"login": "dmitripivkine"}, "path": "runtime/util_core/j9argscan.c", "diffHunk": "@@ -385,6 +385,104 @@ scan_hex_caseflag_u64(char **scan_start, BOOLEAN uppercaseAllowed, uint64_t* res\n \treturn bits;\n }\n \n+/**\n+ * Scan the next unsigned number off of the argument string, and parses for memory sizes.\n+ * Specify the size in GiBs, MiBs, or KiBs (with G,g,M,m,K,k suffixes) or in bytes (no suffix).\n+ * @param[in] scan_start The string to be scanned\n+ * @param[out] result The result\n+ * @return returns 0 on success, 1 if the argument string is not a number, or 2 if overflow occurs.\n+ */\n+uintptr_t\n+scan_u64_memory_size(char **scan_start, uint64_t* result)\n+{\n+\tuintptr_t rc = scan_u64(scan_start, result);\n+\n+\t/* Report any errors from scan */\n+\tif(0 != rc) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f22d71783399b2a2174d852957173d95b2b149c9"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0Nzg5NzMz", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#pullrequestreview-474789733", "createdAt": "2020-08-25T19:32:00Z", "commit": {"oid": "f22d71783399b2a2174d852957173d95b2b149c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxOTozMjowMVrOHGmwXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxOTozMjowMVrOHGmwXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY4ODQ3Ng==", "bodyText": "please leave one empty line at the end of file", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r476688476", "createdAt": "2020-08-25T19:32:01Z", "author": {"login": "dmitripivkine"}, "path": "runtime/util_core/j9argscan.c", "diffHunk": "@@ -404,6 +502,3 @@ void scan_failed_unsupported(J9PortLibrary * portLibrary, char* module, char *sc\n \tPORT_ACCESS_FROM_PORT(portLibrary);\n \tj9tty_printf(PORTLIB, \"<%s: system configuration does not support option --> '%s'>\\n\", module, scan_start);\n }\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f22d71783399b2a2174d852957173d95b2b149c9"}, "originalPosition": 116}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fcf748c0a8046dba025899489d4bb8f724d33c87", "author": {"user": null}, "url": "https://github.com/eclipse-openj9/openj9/commit/fcf748c0a8046dba025899489d4bb8f724d33c87", "committedDate": "2020-08-26T14:09:39Z", "message": "Formatting"}, "afterCommit": {"oid": "1707149cde281821202101158513bd7bbfa20459", "author": {"user": null}, "url": "https://github.com/eclipse-openj9/openj9/commit/1707149cde281821202101158513bd7bbfa20459", "committedDate": "2020-08-26T14:20:59Z", "message": "Move argument memory size parsing into j9argscan\n\nPreviously, parsing methods were only accessible within the GC. Moving these methods into j9argscan enables them to be used generally by VM, and JIT.\n\nSigned-off-by: AlenBadel <Alen.Badel@ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1NjYyMzc3", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#pullrequestreview-475662377", "createdAt": "2020-08-26T16:32:33Z", "commit": {"oid": "1707149cde281821202101158513bd7bbfa20459"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNjozMjozM1rOHHUPpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNjozMjozM1rOHHUPpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQzMzc2Nw==", "bodyText": "Would you please change UDATA to uintptr_t for consistency?", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r477433767", "createdAt": "2020-08-26T16:32:33Z", "author": {"login": "dmitripivkine"}, "path": "runtime/gc_modron_startup/mmparse.cpp", "diffHunk": "@@ -1355,95 +1356,49 @@ scan_hex_helper(J9JavaVM *javaVM, char **cursor, UDATA *value, const char *argNa\n }\n \n /**\n- * Wrapper for scan_udata_helper, that provides parsing for memory sizes.\n- * User should be able to specify the size in GiBs, MiBs, or KiBs (with G,g,M,m,K,k suffixes) or\n- * in bytes (no suffix)\n+ * Wrapper for scan_udata_memory_size, that provides readable error messages.\n+ * @param cursor address of the pointer to the string to parse for the udata.\n+ * @param value address of the storage for the udata to be read.\n+ * @param argName string containing the argument name to be used in error reporting.\n  * @return true if parsing was successful, false otherwise.\n  */\n bool\n scan_udata_memory_size_helper(J9JavaVM *javaVM, char **cursor, UDATA *value, const char *argName)\n {\n \tPORT_ACCESS_FROM_JAVAVM(javaVM);\n+\tUDATA result = scan_udata_memory_size(cursor, value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1707149cde281821202101158513bd7bbfa20459"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1NjYyOTA0", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#pullrequestreview-475662904", "createdAt": "2020-08-26T16:33:11Z", "commit": {"oid": "1707149cde281821202101158513bd7bbfa20459"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNjozMzoxMVrOHHUROg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNjozMzoxMVrOHHUROg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQzNDE3MA==", "bodyText": "The type of result should be uintptr_t as far as this is return code.", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r477434170", "createdAt": "2020-08-26T16:33:11Z", "author": {"login": "dmitripivkine"}, "path": "runtime/gc_modron_startup/mmparse.cpp", "diffHunk": "@@ -1355,95 +1356,49 @@ scan_hex_helper(J9JavaVM *javaVM, char **cursor, UDATA *value, const char *argNa\n }\n \n /**\n- * Wrapper for scan_udata_helper, that provides parsing for memory sizes.\n- * User should be able to specify the size in GiBs, MiBs, or KiBs (with G,g,M,m,K,k suffixes) or\n- * in bytes (no suffix)\n+ * Wrapper for scan_udata_memory_size, that provides readable error messages.\n+ * @param cursor address of the pointer to the string to parse for the udata.\n+ * @param value address of the storage for the udata to be read.\n+ * @param argName string containing the argument name to be used in error reporting.\n  * @return true if parsing was successful, false otherwise.\n  */\n bool\n scan_udata_memory_size_helper(J9JavaVM *javaVM, char **cursor, UDATA *value, const char *argName)\n {\n \tPORT_ACCESS_FROM_JAVAVM(javaVM);\n+\tUDATA result = scan_udata_memory_size(cursor, value);\n \n-\tif(!scan_udata_helper(javaVM, cursor, value, argName)) {\n-\t\treturn false;\n-\t}\n-\t\n-\tif(try_scan(cursor, \"T\") || try_scan(cursor, \"t\")) {\n-\t\tif (0 != *value) {\n-#if defined(J9VM_ENV_DATA64)\n-\t\t\tif (*value <= (((UDATA)-1) >> 40)) {\n-\t\t\t\t*value <<= 40;\n-\t\t\t} else\n-#endif /* defined(J9VM_ENV_DATA64) */\n-\t\t\t{\n-\t\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n-\t\t\t\treturn false;\n-\t\t\t}\n-\t\t}\n-\t} else if(try_scan(cursor, \"G\") || try_scan(cursor, \"g\")) {\n-\t\tif (*value <= (((UDATA)-1) >> 30)) {\n-\t\t\t*value <<= 30;\n-\t\t} else {\n-\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n-\t\t\treturn false;\n-\t\t}\n-\t} else if(try_scan(cursor, \"M\") || try_scan(cursor, \"m\")) {\n-\t\tif (*value <= (((UDATA)-1) >> 20)) {\n-\t\t\t*value <<= 20;\n-\t\t} else {\n-\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n-\t\t\treturn false;\n-\t\t}\n-\t} else if(try_scan(cursor, \"K\") || try_scan(cursor, \"k\")) {\n-\t\tif (*value <= (((UDATA)-1) >> 10)) {\n-\t\t\t*value <<= 10;\n-\t\t} else {\n-\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n-\t\t\treturn false;\n-\t\t}\n+\t/* Report Errors */\n+\tif (1 == result) {\n+\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_MUST_BE_NUMBER, argName);\n+\t} else if (2 == result) {\n+\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n \t}\n-\treturn true;\n+\n+\treturn 0 == result;\n }\n \n /**\n- * Wrapper for scan_u64_helper, that provides parsing for memory sizes.\n- * User should be able to specify the size in GiBs, MiBs, or KiBs (with G,g,M,m,K,k suffixes) or\n- * in bytes (no suffix)\n+ * Wrapper for scan_u64_helper, that provides readable error messages.\n+ * @param cursor address of the pointer to the string to parse for the udata.\n+ * @param value address of the storage for the udata to be read.\n+ * @param argName string containing the argument name to be used in error reporting.\n  * @return true if parsing was successful, false otherwise.\n  */\n bool\n scan_u64_memory_size_helper(J9JavaVM *javaVM, char **cursor, U_64 *value, const char *argName)\n {\n \tPORT_ACCESS_FROM_JAVAVM(javaVM);\n+\tU_64 result = scan_u64_memory_size(cursor, value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1707149cde281821202101158513bd7bbfa20459"}, "originalPosition": 89}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1NjY1NTIy", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#pullrequestreview-475665522", "createdAt": "2020-08-26T16:36:26Z", "commit": {"oid": "1707149cde281821202101158513bd7bbfa20459"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNjozNjoyN1rOHHUYug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNjozNjoyN1rOHHUYug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQzNjA5MA==", "bodyText": "please add T to the comment", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r477436090", "createdAt": "2020-08-26T16:36:27Z", "author": {"login": "dmitripivkine"}, "path": "runtime/util_core/j9argscan.c", "diffHunk": "@@ -385,6 +385,104 @@ scan_hex_caseflag_u64(char **scan_start, BOOLEAN uppercaseAllowed, uint64_t* res\n \treturn bits;\n }\n \n+/**\n+ * Scan the next unsigned number off of the argument string, and parses for memory sizes.\n+ * Specify the size in GiBs, MiBs, or KiBs (with G,g,M,m,K,k suffixes) or in bytes (no suffix).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1707149cde281821202101158513bd7bbfa20459"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1NjY3MTkw", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#pullrequestreview-475667190", "createdAt": "2020-08-26T16:38:17Z", "commit": {"oid": "1707149cde281821202101158513bd7bbfa20459"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNjozODoxN1rOHHUekw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNjozODoxN1rOHHUekw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQzNzU4Nw==", "bodyText": "please add space between if and bracket", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r477437587", "createdAt": "2020-08-26T16:38:17Z", "author": {"login": "dmitripivkine"}, "path": "runtime/util_core/j9argscan.c", "diffHunk": "@@ -385,6 +385,104 @@ scan_hex_caseflag_u64(char **scan_start, BOOLEAN uppercaseAllowed, uint64_t* res\n \treturn bits;\n }\n \n+/**\n+ * Scan the next unsigned number off of the argument string, and parses for memory sizes.\n+ * Specify the size in GiBs, MiBs, or KiBs (with G,g,M,m,K,k suffixes) or in bytes (no suffix).\n+ * @param[in] scan_start The string to be scanned\n+ * @param[out] result The result\n+ * @return returns 0 on success, 1 if the argument string is not a number, or 2 if overflow occurs.\n+ */\n+uintptr_t\n+scan_u64_memory_size(char **scan_start, uint64_t* result)\n+{\n+\tuintptr_t rc = scan_u64(scan_start, result);\n+\n+\t/* Report any errors from scan */\n+\tif (0 != rc) {\n+\t\treturn rc;\n+\t}\n+\n+\tif(try_scan(scan_start, \"T\") || try_scan(scan_start, \"t\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1707149cde281821202101158513bd7bbfa20459"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1NjY3NDI5", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#pullrequestreview-475667429", "createdAt": "2020-08-26T16:38:36Z", "commit": {"oid": "1707149cde281821202101158513bd7bbfa20459"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNjozODozNlrOHHUfZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNjozODozNlrOHHUfZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQzNzc5OQ==", "bodyText": "please add space between if and bracket", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r477437799", "createdAt": "2020-08-26T16:38:36Z", "author": {"login": "dmitripivkine"}, "path": "runtime/util_core/j9argscan.c", "diffHunk": "@@ -385,6 +385,104 @@ scan_hex_caseflag_u64(char **scan_start, BOOLEAN uppercaseAllowed, uint64_t* res\n \treturn bits;\n }\n \n+/**\n+ * Scan the next unsigned number off of the argument string, and parses for memory sizes.\n+ * Specify the size in GiBs, MiBs, or KiBs (with G,g,M,m,K,k suffixes) or in bytes (no suffix).\n+ * @param[in] scan_start The string to be scanned\n+ * @param[out] result The result\n+ * @return returns 0 on success, 1 if the argument string is not a number, or 2 if overflow occurs.\n+ */\n+uintptr_t\n+scan_u64_memory_size(char **scan_start, uint64_t* result)\n+{\n+\tuintptr_t rc = scan_u64(scan_start, result);\n+\n+\t/* Report any errors from scan */\n+\tif (0 != rc) {\n+\t\treturn rc;\n+\t}\n+\n+\tif(try_scan(scan_start, \"T\") || try_scan(scan_start, \"t\")) {\n+\t\tif (0 != *result) {\n+\t\t\tif (*result <= (((U_64)-1) >> 40)) {\n+\t\t\t\t*result <<= 40;\n+\t\t\t} else {\n+\t\t\t\treturn 2;\n+\t\t\t}\n+\t\t}\n+\t} else if(try_scan(scan_start, \"G\") || try_scan(scan_start, \"g\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1707149cde281821202101158513bd7bbfa20459"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1NjY3NjQ0", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#pullrequestreview-475667644", "createdAt": "2020-08-26T16:38:52Z", "commit": {"oid": "1707149cde281821202101158513bd7bbfa20459"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNjozODo1MlrOHHUgFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNjozODo1MlrOHHUgFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQzNzk3Mg==", "bodyText": "please add space between if and bracket", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r477437972", "createdAt": "2020-08-26T16:38:52Z", "author": {"login": "dmitripivkine"}, "path": "runtime/util_core/j9argscan.c", "diffHunk": "@@ -385,6 +385,104 @@ scan_hex_caseflag_u64(char **scan_start, BOOLEAN uppercaseAllowed, uint64_t* res\n \treturn bits;\n }\n \n+/**\n+ * Scan the next unsigned number off of the argument string, and parses for memory sizes.\n+ * Specify the size in GiBs, MiBs, or KiBs (with G,g,M,m,K,k suffixes) or in bytes (no suffix).\n+ * @param[in] scan_start The string to be scanned\n+ * @param[out] result The result\n+ * @return returns 0 on success, 1 if the argument string is not a number, or 2 if overflow occurs.\n+ */\n+uintptr_t\n+scan_u64_memory_size(char **scan_start, uint64_t* result)\n+{\n+\tuintptr_t rc = scan_u64(scan_start, result);\n+\n+\t/* Report any errors from scan */\n+\tif (0 != rc) {\n+\t\treturn rc;\n+\t}\n+\n+\tif(try_scan(scan_start, \"T\") || try_scan(scan_start, \"t\")) {\n+\t\tif (0 != *result) {\n+\t\t\tif (*result <= (((U_64)-1) >> 40)) {\n+\t\t\t\t*result <<= 40;\n+\t\t\t} else {\n+\t\t\t\treturn 2;\n+\t\t\t}\n+\t\t}\n+\t} else if(try_scan(scan_start, \"G\") || try_scan(scan_start, \"g\")) {\n+\t\tif (*result <= (((U_64)-1) >> 30)) {\n+\t\t\t*result <<= 30;\n+\t\t} else {\n+\t\t\treturn 2;\n+\t\t}\n+\t} else if(try_scan(scan_start, \"M\") || try_scan(scan_start, \"m\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1707149cde281821202101158513bd7bbfa20459"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1NjY3ODAy", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#pullrequestreview-475667802", "createdAt": "2020-08-26T16:39:04Z", "commit": {"oid": "1707149cde281821202101158513bd7bbfa20459"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNjozOTowNFrOHHUgeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNjozOTowNFrOHHUgeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQzODA3NA==", "bodyText": "please add space between if and bracket", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r477438074", "createdAt": "2020-08-26T16:39:04Z", "author": {"login": "dmitripivkine"}, "path": "runtime/util_core/j9argscan.c", "diffHunk": "@@ -385,6 +385,104 @@ scan_hex_caseflag_u64(char **scan_start, BOOLEAN uppercaseAllowed, uint64_t* res\n \treturn bits;\n }\n \n+/**\n+ * Scan the next unsigned number off of the argument string, and parses for memory sizes.\n+ * Specify the size in GiBs, MiBs, or KiBs (with G,g,M,m,K,k suffixes) or in bytes (no suffix).\n+ * @param[in] scan_start The string to be scanned\n+ * @param[out] result The result\n+ * @return returns 0 on success, 1 if the argument string is not a number, or 2 if overflow occurs.\n+ */\n+uintptr_t\n+scan_u64_memory_size(char **scan_start, uint64_t* result)\n+{\n+\tuintptr_t rc = scan_u64(scan_start, result);\n+\n+\t/* Report any errors from scan */\n+\tif (0 != rc) {\n+\t\treturn rc;\n+\t}\n+\n+\tif(try_scan(scan_start, \"T\") || try_scan(scan_start, \"t\")) {\n+\t\tif (0 != *result) {\n+\t\t\tif (*result <= (((U_64)-1) >> 40)) {\n+\t\t\t\t*result <<= 40;\n+\t\t\t} else {\n+\t\t\t\treturn 2;\n+\t\t\t}\n+\t\t}\n+\t} else if(try_scan(scan_start, \"G\") || try_scan(scan_start, \"g\")) {\n+\t\tif (*result <= (((U_64)-1) >> 30)) {\n+\t\t\t*result <<= 30;\n+\t\t} else {\n+\t\t\treturn 2;\n+\t\t}\n+\t} else if(try_scan(scan_start, \"M\") || try_scan(scan_start, \"m\")) {\n+\t\tif (*result <= (((U_64)-1) >> 20)) {\n+\t\t\t*result <<= 20;\n+\t\t} else {\n+\t\t\treturn 2;\n+\t\t}\n+\t} else if(try_scan(scan_start, \"K\") || try_scan(scan_start, \"k\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1707149cde281821202101158513bd7bbfa20459"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1Njc4NDgz", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#pullrequestreview-475678483", "createdAt": "2020-08-26T16:52:36Z", "commit": {"oid": "1707149cde281821202101158513bd7bbfa20459"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNjo1MjozNlrOHHVBXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNjo1MjozNlrOHHVBXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ0NjQ5Mw==", "bodyText": "This check is not required. In scan_udata_memory_size() it is necessary to handle exceptional case 0T which is technically valid even on 32 but platform for uintptr_t size. However we have uint64_t here so there is no exception necessary.", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r477446493", "createdAt": "2020-08-26T16:52:36Z", "author": {"login": "dmitripivkine"}, "path": "runtime/util_core/j9argscan.c", "diffHunk": "@@ -385,6 +385,104 @@ scan_hex_caseflag_u64(char **scan_start, BOOLEAN uppercaseAllowed, uint64_t* res\n \treturn bits;\n }\n \n+/**\n+ * Scan the next unsigned number off of the argument string, and parses for memory sizes.\n+ * Specify the size in GiBs, MiBs, or KiBs (with G,g,M,m,K,k suffixes) or in bytes (no suffix).\n+ * @param[in] scan_start The string to be scanned\n+ * @param[out] result The result\n+ * @return returns 0 on success, 1 if the argument string is not a number, or 2 if overflow occurs.\n+ */\n+uintptr_t\n+scan_u64_memory_size(char **scan_start, uint64_t* result)\n+{\n+\tuintptr_t rc = scan_u64(scan_start, result);\n+\n+\t/* Report any errors from scan */\n+\tif (0 != rc) {\n+\t\treturn rc;\n+\t}\n+\n+\tif(try_scan(scan_start, \"T\") || try_scan(scan_start, \"t\")) {\n+\t\tif (0 != *result) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1707149cde281821202101158513bd7bbfa20459"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1NjgxNjM0", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#pullrequestreview-475681634", "createdAt": "2020-08-26T16:56:02Z", "commit": {"oid": "1707149cde281821202101158513bd7bbfa20459"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNjo1NjowMlrOHHVK3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNjo1NjowMlrOHHVK3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ0ODkyNw==", "bodyText": "Would you please change this function to have single return rc; ? I believe it would be cleaner", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r477448927", "createdAt": "2020-08-26T16:56:02Z", "author": {"login": "dmitripivkine"}, "path": "runtime/util_core/j9argscan.c", "diffHunk": "@@ -385,6 +385,104 @@ scan_hex_caseflag_u64(char **scan_start, BOOLEAN uppercaseAllowed, uint64_t* res\n \treturn bits;\n }\n \n+/**\n+ * Scan the next unsigned number off of the argument string, and parses for memory sizes.\n+ * Specify the size in GiBs, MiBs, or KiBs (with G,g,M,m,K,k suffixes) or in bytes (no suffix).\n+ * @param[in] scan_start The string to be scanned\n+ * @param[out] result The result\n+ * @return returns 0 on success, 1 if the argument string is not a number, or 2 if overflow occurs.\n+ */\n+uintptr_t\n+scan_u64_memory_size(char **scan_start, uint64_t* result)\n+{\n+\tuintptr_t rc = scan_u64(scan_start, result);\n+\n+\t/* Report any errors from scan */\n+\tif (0 != rc) {\n+\t\treturn rc;\n+\t}\n+\n+\tif(try_scan(scan_start, \"T\") || try_scan(scan_start, \"t\")) {\n+\t\tif (0 != *result) {\n+\t\t\tif (*result <= (((U_64)-1) >> 40)) {\n+\t\t\t\t*result <<= 40;\n+\t\t\t} else {\n+\t\t\t\treturn 2;\n+\t\t\t}\n+\t\t}\n+\t} else if(try_scan(scan_start, \"G\") || try_scan(scan_start, \"g\")) {\n+\t\tif (*result <= (((U_64)-1) >> 30)) {\n+\t\t\t*result <<= 30;\n+\t\t} else {\n+\t\t\treturn 2;\n+\t\t}\n+\t} else if(try_scan(scan_start, \"M\") || try_scan(scan_start, \"m\")) {\n+\t\tif (*result <= (((U_64)-1) >> 20)) {\n+\t\t\t*result <<= 20;\n+\t\t} else {\n+\t\t\treturn 2;\n+\t\t}\n+\t} else if(try_scan(scan_start, \"K\") || try_scan(scan_start, \"k\")) {\n+\t\tif (*result <= (((U_64)-1) >> 10)) {\n+\t\t\t*result <<= 10;\n+\t\t} else {\n+\t\t\treturn 2;\n+\t\t}\n+\t}\n+\treturn 0; /* Success */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1707149cde281821202101158513bd7bbfa20459"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1NjgxODA5", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#pullrequestreview-475681809", "createdAt": "2020-08-26T16:56:15Z", "commit": {"oid": "1707149cde281821202101158513bd7bbfa20459"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNjo1NjoxNVrOHHVLaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNjo1NjoxNVrOHHVLaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ0OTA2NA==", "bodyText": "Would you please change this function to have single return rc; ? I believe it would be cleaner", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r477449064", "createdAt": "2020-08-26T16:56:15Z", "author": {"login": "dmitripivkine"}, "path": "runtime/util_core/j9argscan.c", "diffHunk": "@@ -385,6 +385,104 @@ scan_hex_caseflag_u64(char **scan_start, BOOLEAN uppercaseAllowed, uint64_t* res\n \treturn bits;\n }\n \n+/**\n+ * Scan the next unsigned number off of the argument string, and parses for memory sizes.\n+ * Specify the size in GiBs, MiBs, or KiBs (with G,g,M,m,K,k suffixes) or in bytes (no suffix).\n+ * @param[in] scan_start The string to be scanned\n+ * @param[out] result The result\n+ * @return returns 0 on success, 1 if the argument string is not a number, or 2 if overflow occurs.\n+ */\n+uintptr_t\n+scan_u64_memory_size(char **scan_start, uint64_t* result)\n+{\n+\tuintptr_t rc = scan_u64(scan_start, result);\n+\n+\t/* Report any errors from scan */\n+\tif (0 != rc) {\n+\t\treturn rc;\n+\t}\n+\n+\tif(try_scan(scan_start, \"T\") || try_scan(scan_start, \"t\")) {\n+\t\tif (0 != *result) {\n+\t\t\tif (*result <= (((U_64)-1) >> 40)) {\n+\t\t\t\t*result <<= 40;\n+\t\t\t} else {\n+\t\t\t\treturn 2;\n+\t\t\t}\n+\t\t}\n+\t} else if(try_scan(scan_start, \"G\") || try_scan(scan_start, \"g\")) {\n+\t\tif (*result <= (((U_64)-1) >> 30)) {\n+\t\t\t*result <<= 30;\n+\t\t} else {\n+\t\t\treturn 2;\n+\t\t}\n+\t} else if(try_scan(scan_start, \"M\") || try_scan(scan_start, \"m\")) {\n+\t\tif (*result <= (((U_64)-1) >> 20)) {\n+\t\t\t*result <<= 20;\n+\t\t} else {\n+\t\t\treturn 2;\n+\t\t}\n+\t} else if(try_scan(scan_start, \"K\") || try_scan(scan_start, \"k\")) {\n+\t\tif (*result <= (((U_64)-1) >> 10)) {\n+\t\t\t*result <<= 10;\n+\t\t} else {\n+\t\t\treturn 2;\n+\t\t}\n+\t}\n+\treturn 0; /* Success */\n+}\n+\n+/**\n+ * Scan the next unsigned number off of the argument string, and parses for memory sizes.\n+ * Specify the size in GiBs, MiBs, or KiBs (with G,g,M,m,K,k suffixes) or in bytes (no suffix).\n+ * @param[in] scan_start The string to be scanned\n+ * @param[out] result The result\n+ * @return returns 0 on success, 1 if the argument string is not a number, or 2 if overflow occurs.\n+ */\n+uintptr_t\n+scan_udata_memory_size(char **scan_start, uintptr_t* result)\n+{\n+\tuintptr_t rc = scan_udata(scan_start, result);\n+\n+\t/* Report any Errors from Scan */\n+\tif (0 != rc) {\n+\t\treturn rc;\n+\t}\n+\n+\t/* Scan Memory String, and check for overflow */\n+\tif(try_scan(scan_start, \"T\") || try_scan(scan_start, \"t\")) {\n+\t\tif (0 != *result) {\n+#if defined(J9VM_ENV_DATA64)\n+\t\t\tif (*result <= (((UDATA)-1) >> 40)) {\n+\t\t\t\t*result <<= 40;\n+\t\t\t} else\n+#endif /* defined(J9VM_ENV_DATA64) */\n+\t\t\t{\n+\t\t\t\treturn 2;\n+\t\t\t}\n+\t\t}\n+\t} else if(try_scan(scan_start, \"G\") || try_scan(scan_start, \"g\")) {\n+\t\tif (*result <= (((UDATA)-1) >> 30)) {\n+\t\t\t*result <<= 30;\n+\t\t} else {\n+\t\t\treturn 2;\n+\t\t}\n+\t} else if(try_scan(scan_start, \"M\") || try_scan(scan_start, \"m\")) {\n+\t\tif (*result <= (((UDATA)-1) >> 20)) {\n+\t\t\t*result <<= 20;\n+\t\t} else {\n+\t\t\treturn 2;\n+\t\t}\n+\t} else if(try_scan(scan_start, \"K\") || try_scan(scan_start, \"k\")) {\n+\t\tif (*result <= (((UDATA)-1) >> 10)) {\n+\t\t\t*result <<= 10;\n+\t\t} else {\n+\t\t\treturn 2;\n+\t\t}\n+\t}\n+\n+\treturn 0; /* Success */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1707149cde281821202101158513bd7bbfa20459"}, "originalPosition": 107}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1NjgyMTAx", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#pullrequestreview-475682101", "createdAt": "2020-08-26T16:56:35Z", "commit": {"oid": "1707149cde281821202101158513bd7bbfa20459"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNjo1NjozNVrOHHVMLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNjo1NjozNVrOHHVMLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ0OTI2Mw==", "bodyText": "please add space between if and bracket", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r477449263", "createdAt": "2020-08-26T16:56:35Z", "author": {"login": "dmitripivkine"}, "path": "runtime/util_core/j9argscan.c", "diffHunk": "@@ -385,6 +385,104 @@ scan_hex_caseflag_u64(char **scan_start, BOOLEAN uppercaseAllowed, uint64_t* res\n \treturn bits;\n }\n \n+/**\n+ * Scan the next unsigned number off of the argument string, and parses for memory sizes.\n+ * Specify the size in GiBs, MiBs, or KiBs (with G,g,M,m,K,k suffixes) or in bytes (no suffix).\n+ * @param[in] scan_start The string to be scanned\n+ * @param[out] result The result\n+ * @return returns 0 on success, 1 if the argument string is not a number, or 2 if overflow occurs.\n+ */\n+uintptr_t\n+scan_u64_memory_size(char **scan_start, uint64_t* result)\n+{\n+\tuintptr_t rc = scan_u64(scan_start, result);\n+\n+\t/* Report any errors from scan */\n+\tif (0 != rc) {\n+\t\treturn rc;\n+\t}\n+\n+\tif(try_scan(scan_start, \"T\") || try_scan(scan_start, \"t\")) {\n+\t\tif (0 != *result) {\n+\t\t\tif (*result <= (((U_64)-1) >> 40)) {\n+\t\t\t\t*result <<= 40;\n+\t\t\t} else {\n+\t\t\t\treturn 2;\n+\t\t\t}\n+\t\t}\n+\t} else if(try_scan(scan_start, \"G\") || try_scan(scan_start, \"g\")) {\n+\t\tif (*result <= (((U_64)-1) >> 30)) {\n+\t\t\t*result <<= 30;\n+\t\t} else {\n+\t\t\treturn 2;\n+\t\t}\n+\t} else if(try_scan(scan_start, \"M\") || try_scan(scan_start, \"m\")) {\n+\t\tif (*result <= (((U_64)-1) >> 20)) {\n+\t\t\t*result <<= 20;\n+\t\t} else {\n+\t\t\treturn 2;\n+\t\t}\n+\t} else if(try_scan(scan_start, \"K\") || try_scan(scan_start, \"k\")) {\n+\t\tif (*result <= (((U_64)-1) >> 10)) {\n+\t\t\t*result <<= 10;\n+\t\t} else {\n+\t\t\treturn 2;\n+\t\t}\n+\t}\n+\treturn 0; /* Success */\n+}\n+\n+/**\n+ * Scan the next unsigned number off of the argument string, and parses for memory sizes.\n+ * Specify the size in GiBs, MiBs, or KiBs (with G,g,M,m,K,k suffixes) or in bytes (no suffix).\n+ * @param[in] scan_start The string to be scanned\n+ * @param[out] result The result\n+ * @return returns 0 on success, 1 if the argument string is not a number, or 2 if overflow occurs.\n+ */\n+uintptr_t\n+scan_udata_memory_size(char **scan_start, uintptr_t* result)\n+{\n+\tuintptr_t rc = scan_udata(scan_start, result);\n+\n+\t/* Report any Errors from Scan */\n+\tif (0 != rc) {\n+\t\treturn rc;\n+\t}\n+\n+\t/* Scan Memory String, and check for overflow */\n+\tif(try_scan(scan_start, \"T\") || try_scan(scan_start, \"t\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1707149cde281821202101158513bd7bbfa20459"}, "originalPosition": 76}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1NjgyMjMw", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#pullrequestreview-475682230", "createdAt": "2020-08-26T16:56:45Z", "commit": {"oid": "1707149cde281821202101158513bd7bbfa20459"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNjo1Njo0NVrOHHVMhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNjo1Njo0NVrOHHVMhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ0OTM0OQ==", "bodyText": "please add space between if and bracket", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r477449349", "createdAt": "2020-08-26T16:56:45Z", "author": {"login": "dmitripivkine"}, "path": "runtime/util_core/j9argscan.c", "diffHunk": "@@ -385,6 +385,104 @@ scan_hex_caseflag_u64(char **scan_start, BOOLEAN uppercaseAllowed, uint64_t* res\n \treturn bits;\n }\n \n+/**\n+ * Scan the next unsigned number off of the argument string, and parses for memory sizes.\n+ * Specify the size in GiBs, MiBs, or KiBs (with G,g,M,m,K,k suffixes) or in bytes (no suffix).\n+ * @param[in] scan_start The string to be scanned\n+ * @param[out] result The result\n+ * @return returns 0 on success, 1 if the argument string is not a number, or 2 if overflow occurs.\n+ */\n+uintptr_t\n+scan_u64_memory_size(char **scan_start, uint64_t* result)\n+{\n+\tuintptr_t rc = scan_u64(scan_start, result);\n+\n+\t/* Report any errors from scan */\n+\tif (0 != rc) {\n+\t\treturn rc;\n+\t}\n+\n+\tif(try_scan(scan_start, \"T\") || try_scan(scan_start, \"t\")) {\n+\t\tif (0 != *result) {\n+\t\t\tif (*result <= (((U_64)-1) >> 40)) {\n+\t\t\t\t*result <<= 40;\n+\t\t\t} else {\n+\t\t\t\treturn 2;\n+\t\t\t}\n+\t\t}\n+\t} else if(try_scan(scan_start, \"G\") || try_scan(scan_start, \"g\")) {\n+\t\tif (*result <= (((U_64)-1) >> 30)) {\n+\t\t\t*result <<= 30;\n+\t\t} else {\n+\t\t\treturn 2;\n+\t\t}\n+\t} else if(try_scan(scan_start, \"M\") || try_scan(scan_start, \"m\")) {\n+\t\tif (*result <= (((U_64)-1) >> 20)) {\n+\t\t\t*result <<= 20;\n+\t\t} else {\n+\t\t\treturn 2;\n+\t\t}\n+\t} else if(try_scan(scan_start, \"K\") || try_scan(scan_start, \"k\")) {\n+\t\tif (*result <= (((U_64)-1) >> 10)) {\n+\t\t\t*result <<= 10;\n+\t\t} else {\n+\t\t\treturn 2;\n+\t\t}\n+\t}\n+\treturn 0; /* Success */\n+}\n+\n+/**\n+ * Scan the next unsigned number off of the argument string, and parses for memory sizes.\n+ * Specify the size in GiBs, MiBs, or KiBs (with G,g,M,m,K,k suffixes) or in bytes (no suffix).\n+ * @param[in] scan_start The string to be scanned\n+ * @param[out] result The result\n+ * @return returns 0 on success, 1 if the argument string is not a number, or 2 if overflow occurs.\n+ */\n+uintptr_t\n+scan_udata_memory_size(char **scan_start, uintptr_t* result)\n+{\n+\tuintptr_t rc = scan_udata(scan_start, result);\n+\n+\t/* Report any Errors from Scan */\n+\tif (0 != rc) {\n+\t\treturn rc;\n+\t}\n+\n+\t/* Scan Memory String, and check for overflow */\n+\tif(try_scan(scan_start, \"T\") || try_scan(scan_start, \"t\")) {\n+\t\tif (0 != *result) {\n+#if defined(J9VM_ENV_DATA64)\n+\t\t\tif (*result <= (((UDATA)-1) >> 40)) {\n+\t\t\t\t*result <<= 40;\n+\t\t\t} else\n+#endif /* defined(J9VM_ENV_DATA64) */\n+\t\t\t{\n+\t\t\t\treturn 2;\n+\t\t\t}\n+\t\t}\n+\t} else if(try_scan(scan_start, \"G\") || try_scan(scan_start, \"g\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1707149cde281821202101158513bd7bbfa20459"}, "originalPosition": 87}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1NjgyMzc5", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#pullrequestreview-475682379", "createdAt": "2020-08-26T16:56:55Z", "commit": {"oid": "1707149cde281821202101158513bd7bbfa20459"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNjo1Njo1NVrOHHVNBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNjo1Njo1NVrOHHVNBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ0OTQ3Ng==", "bodyText": "please add space between if and bracket", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r477449476", "createdAt": "2020-08-26T16:56:55Z", "author": {"login": "dmitripivkine"}, "path": "runtime/util_core/j9argscan.c", "diffHunk": "@@ -385,6 +385,104 @@ scan_hex_caseflag_u64(char **scan_start, BOOLEAN uppercaseAllowed, uint64_t* res\n \treturn bits;\n }\n \n+/**\n+ * Scan the next unsigned number off of the argument string, and parses for memory sizes.\n+ * Specify the size in GiBs, MiBs, or KiBs (with G,g,M,m,K,k suffixes) or in bytes (no suffix).\n+ * @param[in] scan_start The string to be scanned\n+ * @param[out] result The result\n+ * @return returns 0 on success, 1 if the argument string is not a number, or 2 if overflow occurs.\n+ */\n+uintptr_t\n+scan_u64_memory_size(char **scan_start, uint64_t* result)\n+{\n+\tuintptr_t rc = scan_u64(scan_start, result);\n+\n+\t/* Report any errors from scan */\n+\tif (0 != rc) {\n+\t\treturn rc;\n+\t}\n+\n+\tif(try_scan(scan_start, \"T\") || try_scan(scan_start, \"t\")) {\n+\t\tif (0 != *result) {\n+\t\t\tif (*result <= (((U_64)-1) >> 40)) {\n+\t\t\t\t*result <<= 40;\n+\t\t\t} else {\n+\t\t\t\treturn 2;\n+\t\t\t}\n+\t\t}\n+\t} else if(try_scan(scan_start, \"G\") || try_scan(scan_start, \"g\")) {\n+\t\tif (*result <= (((U_64)-1) >> 30)) {\n+\t\t\t*result <<= 30;\n+\t\t} else {\n+\t\t\treturn 2;\n+\t\t}\n+\t} else if(try_scan(scan_start, \"M\") || try_scan(scan_start, \"m\")) {\n+\t\tif (*result <= (((U_64)-1) >> 20)) {\n+\t\t\t*result <<= 20;\n+\t\t} else {\n+\t\t\treturn 2;\n+\t\t}\n+\t} else if(try_scan(scan_start, \"K\") || try_scan(scan_start, \"k\")) {\n+\t\tif (*result <= (((U_64)-1) >> 10)) {\n+\t\t\t*result <<= 10;\n+\t\t} else {\n+\t\t\treturn 2;\n+\t\t}\n+\t}\n+\treturn 0; /* Success */\n+}\n+\n+/**\n+ * Scan the next unsigned number off of the argument string, and parses for memory sizes.\n+ * Specify the size in GiBs, MiBs, or KiBs (with G,g,M,m,K,k suffixes) or in bytes (no suffix).\n+ * @param[in] scan_start The string to be scanned\n+ * @param[out] result The result\n+ * @return returns 0 on success, 1 if the argument string is not a number, or 2 if overflow occurs.\n+ */\n+uintptr_t\n+scan_udata_memory_size(char **scan_start, uintptr_t* result)\n+{\n+\tuintptr_t rc = scan_udata(scan_start, result);\n+\n+\t/* Report any Errors from Scan */\n+\tif (0 != rc) {\n+\t\treturn rc;\n+\t}\n+\n+\t/* Scan Memory String, and check for overflow */\n+\tif(try_scan(scan_start, \"T\") || try_scan(scan_start, \"t\")) {\n+\t\tif (0 != *result) {\n+#if defined(J9VM_ENV_DATA64)\n+\t\t\tif (*result <= (((UDATA)-1) >> 40)) {\n+\t\t\t\t*result <<= 40;\n+\t\t\t} else\n+#endif /* defined(J9VM_ENV_DATA64) */\n+\t\t\t{\n+\t\t\t\treturn 2;\n+\t\t\t}\n+\t\t}\n+\t} else if(try_scan(scan_start, \"G\") || try_scan(scan_start, \"g\")) {\n+\t\tif (*result <= (((UDATA)-1) >> 30)) {\n+\t\t\t*result <<= 30;\n+\t\t} else {\n+\t\t\treturn 2;\n+\t\t}\n+\t} else if(try_scan(scan_start, \"M\") || try_scan(scan_start, \"m\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1707149cde281821202101158513bd7bbfa20459"}, "originalPosition": 93}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1NjgyNDU2", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#pullrequestreview-475682456", "createdAt": "2020-08-26T16:57:01Z", "commit": {"oid": "1707149cde281821202101158513bd7bbfa20459"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNjo1NzowMVrOHHVNTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNjo1NzowMVrOHHVNTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ0OTU1MA==", "bodyText": "please add space between if and bracket", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r477449550", "createdAt": "2020-08-26T16:57:01Z", "author": {"login": "dmitripivkine"}, "path": "runtime/util_core/j9argscan.c", "diffHunk": "@@ -385,6 +385,104 @@ scan_hex_caseflag_u64(char **scan_start, BOOLEAN uppercaseAllowed, uint64_t* res\n \treturn bits;\n }\n \n+/**\n+ * Scan the next unsigned number off of the argument string, and parses for memory sizes.\n+ * Specify the size in GiBs, MiBs, or KiBs (with G,g,M,m,K,k suffixes) or in bytes (no suffix).\n+ * @param[in] scan_start The string to be scanned\n+ * @param[out] result The result\n+ * @return returns 0 on success, 1 if the argument string is not a number, or 2 if overflow occurs.\n+ */\n+uintptr_t\n+scan_u64_memory_size(char **scan_start, uint64_t* result)\n+{\n+\tuintptr_t rc = scan_u64(scan_start, result);\n+\n+\t/* Report any errors from scan */\n+\tif (0 != rc) {\n+\t\treturn rc;\n+\t}\n+\n+\tif(try_scan(scan_start, \"T\") || try_scan(scan_start, \"t\")) {\n+\t\tif (0 != *result) {\n+\t\t\tif (*result <= (((U_64)-1) >> 40)) {\n+\t\t\t\t*result <<= 40;\n+\t\t\t} else {\n+\t\t\t\treturn 2;\n+\t\t\t}\n+\t\t}\n+\t} else if(try_scan(scan_start, \"G\") || try_scan(scan_start, \"g\")) {\n+\t\tif (*result <= (((U_64)-1) >> 30)) {\n+\t\t\t*result <<= 30;\n+\t\t} else {\n+\t\t\treturn 2;\n+\t\t}\n+\t} else if(try_scan(scan_start, \"M\") || try_scan(scan_start, \"m\")) {\n+\t\tif (*result <= (((U_64)-1) >> 20)) {\n+\t\t\t*result <<= 20;\n+\t\t} else {\n+\t\t\treturn 2;\n+\t\t}\n+\t} else if(try_scan(scan_start, \"K\") || try_scan(scan_start, \"k\")) {\n+\t\tif (*result <= (((U_64)-1) >> 10)) {\n+\t\t\t*result <<= 10;\n+\t\t} else {\n+\t\t\treturn 2;\n+\t\t}\n+\t}\n+\treturn 0; /* Success */\n+}\n+\n+/**\n+ * Scan the next unsigned number off of the argument string, and parses for memory sizes.\n+ * Specify the size in GiBs, MiBs, or KiBs (with G,g,M,m,K,k suffixes) or in bytes (no suffix).\n+ * @param[in] scan_start The string to be scanned\n+ * @param[out] result The result\n+ * @return returns 0 on success, 1 if the argument string is not a number, or 2 if overflow occurs.\n+ */\n+uintptr_t\n+scan_udata_memory_size(char **scan_start, uintptr_t* result)\n+{\n+\tuintptr_t rc = scan_udata(scan_start, result);\n+\n+\t/* Report any Errors from Scan */\n+\tif (0 != rc) {\n+\t\treturn rc;\n+\t}\n+\n+\t/* Scan Memory String, and check for overflow */\n+\tif(try_scan(scan_start, \"T\") || try_scan(scan_start, \"t\")) {\n+\t\tif (0 != *result) {\n+#if defined(J9VM_ENV_DATA64)\n+\t\t\tif (*result <= (((UDATA)-1) >> 40)) {\n+\t\t\t\t*result <<= 40;\n+\t\t\t} else\n+#endif /* defined(J9VM_ENV_DATA64) */\n+\t\t\t{\n+\t\t\t\treturn 2;\n+\t\t\t}\n+\t\t}\n+\t} else if(try_scan(scan_start, \"G\") || try_scan(scan_start, \"g\")) {\n+\t\tif (*result <= (((UDATA)-1) >> 30)) {\n+\t\t\t*result <<= 30;\n+\t\t} else {\n+\t\t\treturn 2;\n+\t\t}\n+\t} else if(try_scan(scan_start, \"M\") || try_scan(scan_start, \"m\")) {\n+\t\tif (*result <= (((UDATA)-1) >> 20)) {\n+\t\t\t*result <<= 20;\n+\t\t} else {\n+\t\t\treturn 2;\n+\t\t}\n+\t} else if(try_scan(scan_start, \"K\") || try_scan(scan_start, \"k\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1707149cde281821202101158513bd7bbfa20459"}, "originalPosition": 99}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1NjgzOTk3", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#pullrequestreview-475683997", "createdAt": "2020-08-26T16:58:53Z", "commit": {"oid": "1707149cde281821202101158513bd7bbfa20459"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNjo1ODo1NFrOHHVRuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNjo1ODo1NFrOHHVRuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ1MDY4Mw==", "bodyText": "I believe would be better to replace U64 to uint64_t everywhere in this function for consistency", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r477450683", "createdAt": "2020-08-26T16:58:54Z", "author": {"login": "dmitripivkine"}, "path": "runtime/util_core/j9argscan.c", "diffHunk": "@@ -385,6 +385,104 @@ scan_hex_caseflag_u64(char **scan_start, BOOLEAN uppercaseAllowed, uint64_t* res\n \treturn bits;\n }\n \n+/**\n+ * Scan the next unsigned number off of the argument string, and parses for memory sizes.\n+ * Specify the size in GiBs, MiBs, or KiBs (with G,g,M,m,K,k suffixes) or in bytes (no suffix).\n+ * @param[in] scan_start The string to be scanned\n+ * @param[out] result The result\n+ * @return returns 0 on success, 1 if the argument string is not a number, or 2 if overflow occurs.\n+ */\n+uintptr_t\n+scan_u64_memory_size(char **scan_start, uint64_t* result)\n+{\n+\tuintptr_t rc = scan_u64(scan_start, result);\n+\n+\t/* Report any errors from scan */\n+\tif (0 != rc) {\n+\t\treturn rc;\n+\t}\n+\n+\tif(try_scan(scan_start, \"T\") || try_scan(scan_start, \"t\")) {\n+\t\tif (0 != *result) {\n+\t\t\tif (*result <= (((U_64)-1) >> 40)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1707149cde281821202101158513bd7bbfa20459"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1NjkwMzUy", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#pullrequestreview-475690352", "createdAt": "2020-08-26T17:07:10Z", "commit": {"oid": "f45cc3f882c9f2f62b58c05119d54cfc759d8fc7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNzowNzoxMFrOHHVkjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNzowNzoxMFrOHHVkjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ1NTUwMQ==", "bodyText": "I believe would be better to replace UDATA to uintptr_t everywhere in this function for consistency", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r477455501", "createdAt": "2020-08-26T17:07:10Z", "author": {"login": "dmitripivkine"}, "path": "runtime/util_core/j9argscan.c", "diffHunk": "@@ -385,6 +385,104 @@ scan_hex_caseflag_u64(char **scan_start, BOOLEAN uppercaseAllowed, uint64_t* res\n \treturn bits;\n }\n \n+/**\n+ * Scan the next unsigned number off of the argument string, and parses for memory sizes.\n+ * Specify the size in TiBs, GiBs, MiBs, or KiBs (with T,t,G,g,M,m,K,k suffixes) or in bytes (no suffix).\n+ * @param[in] scan_start The string to be scanned\n+ * @param[out] result The result\n+ * @return returns 0 on success, 1 if the argument string is not a number, or 2 if overflow occurs.\n+ */\n+uintptr_t\n+scan_u64_memory_size(char **scan_start, uint64_t* result)\n+{\n+\tuintptr_t rc = scan_u64(scan_start, result);\n+\n+\t/* Report any errors from scan */\n+\tif (0 != rc) {\n+\t\treturn rc;\n+\t}\n+\n+\tif (try_scan(scan_start, \"T\") || try_scan(scan_start, \"t\")) {\n+\t\tif (0 != *result) {\n+\t\t\tif (*result <= (((U_64)-1) >> 40)) {\n+\t\t\t\t*result <<= 40;\n+\t\t\t} else {\n+\t\t\t\treturn 2;\n+\t\t\t}\n+\t\t}\n+\t} else if (try_scan(scan_start, \"G\") || try_scan(scan_start, \"g\")) {\n+\t\tif (*result <= (((U_64)-1) >> 30)) {\n+\t\t\t*result <<= 30;\n+\t\t} else {\n+\t\t\treturn 2;\n+\t\t}\n+\t} else if (try_scan(scan_start, \"M\") || try_scan(scan_start, \"m\")) {\n+\t\tif (*result <= (((U_64)-1) >> 20)) {\n+\t\t\t*result <<= 20;\n+\t\t} else {\n+\t\t\treturn 2;\n+\t\t}\n+\t} else if (try_scan(scan_start, \"K\") || try_scan(scan_start, \"k\")) {\n+\t\tif (*result <= (((U_64)-1) >> 10)) {\n+\t\t\t*result <<= 10;\n+\t\t} else {\n+\t\t\treturn 2;\n+\t\t}\n+\t}\n+\treturn 0; /* Success */\n+}\n+\n+/**\n+ * Scan the next unsigned number off of the argument string, and parses for memory sizes.\n+ * Specify the size in TiBs, GiBs, MiBs, or KiBs (with T,t,G,g,M,m,K,k suffixes) or in bytes (no suffix).\n+ * @param[in] scan_start The string to be scanned\n+ * @param[out] result The result\n+ * @return returns 0 on success, 1 if the argument string is not a number, or 2 if overflow occurs.\n+ */\n+uintptr_t\n+scan_udata_memory_size(char **scan_start, uintptr_t* result)\n+{\n+\tuintptr_t rc = scan_udata(scan_start, result);\n+\n+\t/* Report any Errors from Scan */\n+\tif (0 != rc) {\n+\t\treturn rc;\n+\t}\n+\n+\t/* Scan Memory String, and check for overflow */\n+\tif (try_scan(scan_start, \"T\") || try_scan(scan_start, \"t\")) {\n+\t\tif (0 != *result) {\n+#if defined(J9VM_ENV_DATA64)\n+\t\t\tif (*result <= (((UDATA)-1) >> 40)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f45cc3f882c9f2f62b58c05119d54cfc759d8fc7"}, "originalPosition": 79}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8a462b80f94b7b5373dc5e87dae6153d6a5f373b", "author": {"user": null}, "url": "https://github.com/eclipse-openj9/openj9/commit/8a462b80f94b7b5373dc5e87dae6153d6a5f373b", "committedDate": "2020-08-26T19:11:38Z", "message": "Remove 0T check for scan_u64_memory_size"}, "afterCommit": {"oid": "66c5e0d5a3924fcb19f33365ac319ab62a0c0b84", "author": {"user": null}, "url": "https://github.com/eclipse-openj9/openj9/commit/66c5e0d5a3924fcb19f33365ac319ab62a0c0b84", "committedDate": "2020-08-26T19:13:14Z", "message": "Move argument memory size parsing into j9argscan\n\nPreviously, parsing methods were only accessible within the GC. Moving these methods into j9argscan enables them to be used generally by VM, and JIT.\n\nSigned-off-by: AlenBadel <Alen.Badel@ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "eda4117c6493fd53de0710914d7a1dcb4f6e841e", "author": {"user": null}, "url": "https://github.com/eclipse-openj9/openj9/commit/eda4117c6493fd53de0710914d7a1dcb4f6e841e", "committedDate": "2020-08-26T19:16:20Z", "message": "Formatting changes"}, "afterCommit": {"oid": "3d41fa07e541e0d4809e945fceb50adfcca7d43d", "author": {"user": null}, "url": "https://github.com/eclipse-openj9/openj9/commit/3d41fa07e541e0d4809e945fceb50adfcca7d43d", "committedDate": "2020-08-26T19:16:31Z", "message": "Move argument memory size parsing into j9argscan\n\nPreviously, parsing methods were only accessible within the GC. Moving these methods into j9argscan enables them to be used generally by VM, and JIT.\n\nSigned-off-by: AlenBadel <Alen.Badel@ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3d41fa07e541e0d4809e945fceb50adfcca7d43d", "author": {"user": null}, "url": "https://github.com/eclipse-openj9/openj9/commit/3d41fa07e541e0d4809e945fceb50adfcca7d43d", "committedDate": "2020-08-26T19:16:31Z", "message": "Move argument memory size parsing into j9argscan\n\nPreviously, parsing methods were only accessible within the GC. Moving these methods into j9argscan enables them to be used generally by VM, and JIT.\n\nSigned-off-by: AlenBadel <Alen.Badel@ibm.com>"}, "afterCommit": {"oid": "cfcffe231766e6b8302fc56e7c00d592f97dbea0", "author": {"user": null}, "url": "https://github.com/eclipse-openj9/openj9/commit/cfcffe231766e6b8302fc56e7c00d592f97dbea0", "committedDate": "2020-08-26T19:18:45Z", "message": "Move argument memory size parsing into j9argscan\n\nPreviously, parsing methods were only accessible within the GC. Moving these methods into j9argscan enables them to be used generally by VM, and JIT.\n\nSigned-off-by: AlenBadel <Alen.Badel@ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1ODQ3Mjgy", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#pullrequestreview-475847282", "createdAt": "2020-08-26T20:47:52Z", "commit": {"oid": "cfcffe231766e6b8302fc56e7c00d592f97dbea0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMDo0Nzo1MlrOHHdKqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMDo0Nzo1MlrOHHdKqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU3OTk0Nw==", "bodyText": "you can eliminate this return too... just use if (0 == rc) { to wrap if statement below", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r477579947", "createdAt": "2020-08-26T20:47:52Z", "author": {"login": "dmitripivkine"}, "path": "runtime/util_core/j9argscan.c", "diffHunk": "@@ -385,6 +385,102 @@ scan_hex_caseflag_u64(char **scan_start, BOOLEAN uppercaseAllowed, uint64_t* res\n \treturn bits;\n }\n \n+/**\n+ * Scan the next unsigned number off of the argument string, and parses for memory sizes.\n+ * Specify the size in TiBs, GiBs, MiBs, or KiBs (with T,t,G,g,M,m,K,k suffixes) or in bytes (no suffix).\n+ * @param[in] scan_start The string to be scanned\n+ * @param[out] result The result\n+ * @return returns 0 on success, 1 if the argument string is not a number, or 2 if overflow occurs.\n+ */\n+uintptr_t\n+scan_u64_memory_size(char **scan_start, uint64_t* result)\n+{\n+\tuintptr_t rc = scan_u64(scan_start, result);\n+\n+\t/* Report any errors from scan */\n+\tif (0 != rc) {\n+\t\treturn rc;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfcffe231766e6b8302fc56e7c00d592f97dbea0"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1ODQ3NDE4", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#pullrequestreview-475847418", "createdAt": "2020-08-26T20:48:05Z", "commit": {"oid": "cfcffe231766e6b8302fc56e7c00d592f97dbea0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMDo0ODowNVrOHHdLDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMDo0ODowNVrOHHdLDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU4MDA0Nw==", "bodyText": "you can eliminate this return too... just use if (0 == rc) { to wrap if statement below", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r477580047", "createdAt": "2020-08-26T20:48:05Z", "author": {"login": "dmitripivkine"}, "path": "runtime/util_core/j9argscan.c", "diffHunk": "@@ -385,6 +385,102 @@ scan_hex_caseflag_u64(char **scan_start, BOOLEAN uppercaseAllowed, uint64_t* res\n \treturn bits;\n }\n \n+/**\n+ * Scan the next unsigned number off of the argument string, and parses for memory sizes.\n+ * Specify the size in TiBs, GiBs, MiBs, or KiBs (with T,t,G,g,M,m,K,k suffixes) or in bytes (no suffix).\n+ * @param[in] scan_start The string to be scanned\n+ * @param[out] result The result\n+ * @return returns 0 on success, 1 if the argument string is not a number, or 2 if overflow occurs.\n+ */\n+uintptr_t\n+scan_u64_memory_size(char **scan_start, uint64_t* result)\n+{\n+\tuintptr_t rc = scan_u64(scan_start, result);\n+\n+\t/* Report any errors from scan */\n+\tif (0 != rc) {\n+\t\treturn rc;\n+\t}\n+\n+\tif (try_scan(scan_start, \"T\") || try_scan(scan_start, \"t\")) {\n+\t\tif (*result <= (((U_64)-1) >> 40)) {\n+\t\t\t*result <<= 40;\n+\t\t} else {\n+\t\t\trc = 2;\n+\t\t}\n+\t} else if (try_scan(scan_start, \"G\") || try_scan(scan_start, \"g\")) {\n+\t\tif (*result <= (((U_64)-1) >> 30)) {\n+\t\t\t*result <<= 30;\n+\t\t} else {\n+\t\t\trc = 2;\n+\t\t}\n+\t} else if (try_scan(scan_start, \"M\") || try_scan(scan_start, \"m\")) {\n+\t\tif (*result <= (((U_64)-1) >> 20)) {\n+\t\t\t*result <<= 20;\n+\t\t} else {\n+\t\t\trc = 2;\n+\t\t}\n+\t} else if (try_scan(scan_start, \"K\") || try_scan(scan_start, \"k\")) {\n+\t\tif (*result <= (((U_64)-1) >> 10)) {\n+\t\t\t*result <<= 10;\n+\t\t} else {\n+\t\t\trc = 2;\n+\t\t}\n+\t}\n+\treturn rc;\n+}\n+\n+/**\n+ * Scan the next unsigned number off of the argument string, and parses for memory sizes.\n+ * Specify the size in TiBs, GiBs, MiBs, or KiBs (with T,t,G,g,M,m,K,k suffixes) or in bytes (no suffix).\n+ * @param[in] scan_start The string to be scanned\n+ * @param[out] result The result\n+ * @return returns 0 on success, 1 if the argument string is not a number, or 2 if overflow occurs.\n+ */\n+uintptr_t\n+scan_udata_memory_size(char **scan_start, uintptr_t* result)\n+{\n+\tuintptr_t rc = scan_udata(scan_start, result);\n+\n+\t/* Report any Errors from Scan */\n+\tif (0 != rc) {\n+\t\treturn rc;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfcffe231766e6b8302fc56e7c00d592f97dbea0"}, "originalPosition": 70}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd15265dfddce039fa670d1bd1da10189572cad5", "author": {"user": null}, "url": "https://github.com/eclipse-openj9/openj9/commit/fd15265dfddce039fa670d1bd1da10189572cad5", "committedDate": "2020-08-27T14:14:52Z", "message": "Move argument memory size parsing into j9argscan\n\nPreviously, parsing methods were only accessible within the GC. Moving these methods into j9argscan enables them to be used generally by VM, and JIT.\n\nSigned-off-by: AlenBadel <Alen.Badel@ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b5a08b313d15c39be95d0592f774fd608212ff2c", "author": {"user": null}, "url": "https://github.com/eclipse-openj9/openj9/commit/b5a08b313d15c39be95d0592f774fd608212ff2c", "committedDate": "2020-08-27T14:11:20Z", "message": "Copyright mmparse"}, "afterCommit": {"oid": "fd15265dfddce039fa670d1bd1da10189572cad5", "author": {"user": null}, "url": "https://github.com/eclipse-openj9/openj9/commit/fd15265dfddce039fa670d1bd1da10189572cad5", "committedDate": "2020-08-27T14:14:52Z", "message": "Move argument memory size parsing into j9argscan\n\nPreviously, parsing methods were only accessible within the GC. Moving these methods into j9argscan enables them to be used generally by VM, and JIT.\n\nSigned-off-by: AlenBadel <Alen.Badel@ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2ODQwMDgx", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#pullrequestreview-476840081", "createdAt": "2020-08-27T15:30:44Z", "commit": {"oid": "fd15265dfddce039fa670d1bd1da10189572cad5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2ODQxNTUw", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#pullrequestreview-476841550", "createdAt": "2020-08-27T15:32:24Z", "commit": {"oid": "fd15265dfddce039fa670d1bd1da10189572cad5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 208, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}