{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2ODk1ODA2", "number": 10594, "title": "Remove old processor detection code on Power", "bodyText": "Summary of changes:\n\nRetire old version cpu detection code on Power\nMove CPU::getProcessorDescription() to base J9CPU class as the 3 platforms (X, Z, Power) share the same code. There is no need to have 3 copies\nReasons for the removal:\n\nWe kept the old version because we wanted to make sure new version and old version give us the same behaviour\nNow it's been a few month and we don't see any bugs with the new version there's no reason to keep the old version\nAlso we want to prevent developers from using the old version.\n\n\n\nOld design\n\nInitializes the TR_Processor struct via j9port library\n\nInitialization occurs in TR_J9VM::initializeProcessorType()\nobtain cpu information using CPU::TO_PORTLIB_getJ9ProcessorDesc()\nTR::Compiler->target.cpu.setProcessor to set processor\n\n\nFields and methods associated with the old design live in Class CPU\nCommon APIs:\n\nCPU::TO_PORTLIB_getJ9ProcessorDesc()\nj9sysinfo_processor_has_feature(processorDesc, feature) (j9port library API)\nCPU::id()\nCPU::setProcessor(TR_Processor)\n\n\n\nNew design\n\nInitializes the OMRProcessorDesc struct via omrport library\n\nCPU::detect() to initialize OMRProcessorDesc processorDescription\nCPU::applyUserOptions() to apply any debug options after initialization\nTR::Compiler->target.cpu singleton variable that holds the CPU instance\ncomp()->target().cpu per compilation variable which is used for cross-cpu compilation support\n\nFor JIT we initialize comp()->target().cpu with TR::Compiler->target.cpu (Host CPU)\nFor AOT we initialize comp()->target().cpu with TR::Compiler->relocatableTarget.cpu (Portable CPU)\n\n\n\n\nFields and methods associated with the new design live in Class CPU\nCommon APIs:\n\nCPU::supportsFeature(feature)\nCPU::isAtLeast(OMRProcessorArchitecture)\n\n\nBenefits:\n\nCommon to all 3 platforms\nSimpler interface\nCross-CPU compilation support (Use one cpu for AOT and another for JIT)\n\n\nThe implementation for the new design is first introduced here eclipse/omr#5197 and #9571\n\nissue: eclipse/omr#4339\ndepends on: eclipse/omr#5547\nSigned-off-by: Harry Yu harryyu1994@gmail.com", "createdAt": "2020-09-14T21:33:29Z", "url": "https://github.com/eclipse-openj9/openj9/pull/10594", "merged": true, "mergeCommit": {"oid": "80c140529ba0b3bef1a77167bfec9349cf131ab0"}, "closed": true, "closedAt": "2020-09-24T16:22:49Z", "author": {"login": "harryyu1994"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdI6SlEgBqjM3NjU0NTM0MDc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdLxsobABqjM3OTk3MTE3NzI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "69db7051234a369078ab799afc04c126e1dd4131", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/69db7051234a369078ab799afc04c126e1dd4131", "committedDate": "2020-09-14T21:32:20Z", "message": "Remove old processor detection code on Power\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}, "afterCommit": {"oid": "9a19fce5a21d94e2b4403d47b27c5dbe1935b26f", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/9a19fce5a21d94e2b4403d47b27c5dbe1935b26f", "committedDate": "2020-09-14T21:43:12Z", "message": "Remove old processor detection code on Power\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9a19fce5a21d94e2b4403d47b27c5dbe1935b26f", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/9a19fce5a21d94e2b4403d47b27c5dbe1935b26f", "committedDate": "2020-09-14T21:43:12Z", "message": "Remove old processor detection code on Power\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}, "afterCommit": {"oid": "eccd3e2f4aca9956a27095cddb78ac6c9caeeb33", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/eccd3e2f4aca9956a27095cddb78ac6c9caeeb33", "committedDate": "2020-09-14T22:10:39Z", "message": "Remove old processor detection code on Power\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "eccd3e2f4aca9956a27095cddb78ac6c9caeeb33", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/eccd3e2f4aca9956a27095cddb78ac6c9caeeb33", "committedDate": "2020-09-14T22:10:39Z", "message": "Remove old processor detection code on Power\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}, "afterCommit": {"oid": "e8854e277043e9a71d78c0f811eed079537fc858", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/e8854e277043e9a71d78c0f811eed079537fc858", "committedDate": "2020-09-15T16:24:40Z", "message": "Remove old processor detection code on Power\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e8854e277043e9a71d78c0f811eed079537fc858", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/e8854e277043e9a71d78c0f811eed079537fc858", "committedDate": "2020-09-15T16:24:40Z", "message": "Remove old processor detection code on Power\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}, "afterCommit": {"oid": "7c949359efb408745cf12d54b41131b9e78f3057", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/7c949359efb408745cf12d54b41131b9e78f3057", "committedDate": "2020-09-15T16:28:18Z", "message": "Remove old processor detection code on Power\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7c949359efb408745cf12d54b41131b9e78f3057", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/7c949359efb408745cf12d54b41131b9e78f3057", "committedDate": "2020-09-15T16:28:18Z", "message": "Remove old processor detection code on Power\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}, "afterCommit": {"oid": "2e6f5e6849be129c272eb34c672b82ec16f4b780", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/2e6f5e6849be129c272eb34c672b82ec16f4b780", "committedDate": "2020-09-15T18:26:33Z", "message": "Remove old processor detection code on Power\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5MDYyMTk5", "url": "https://github.com/eclipse-openj9/openj9/pull/10594#pullrequestreview-489062199", "createdAt": "2020-09-15T20:53:44Z", "commit": {"oid": "2e6f5e6849be129c272eb34c672b82ec16f4b780"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMDo1Mzo0NFrOHSUJtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMDo1Mzo0NFrOHSUJtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk2NjU4MA==", "bodyText": "does this routine exist only temporarily?  I am imagining that these p/env/J9CPU.x files would be deleted completely once everything CPU-related is moved to OMR side.  it is less ideal that CPU-related stuffs are still split implementation.", "url": "https://github.com/eclipse-openj9/openj9/pull/10594#discussion_r488966580", "createdAt": "2020-09-15T20:53:44Z", "author": {"login": "zl-wang"}, "path": "runtime/compiler/p/env/J9CPU.cpp", "diffHunk": "@@ -135,21 +47,10 @@ J9::Power::CPU::isCompatible(const OMRProcessorDesc& processorDescription)\n    return targetProcessor == processor;\n    }\n \n-OMRProcessorDesc\n-J9::Power::CPU::getProcessorDescription()\n-   {\n-#if defined(J9VM_OPT_JITSERVER)\n-   if (auto stream = TR::CompilationInfo::getStream())\n-      {\n-      auto *vmInfo = TR::compInfoPT->getClientData()->getOrCacheVMInfo(stream);\n-      return vmInfo->_processorDescription;\n-      }\n-#endif /* defined(J9VM_OPT_JITSERVER) */\n-   return _processorDescription;\n-   }\n-\n-bool\n-J9::Power::CPU::getPPCSupportsVSX()\n-   {\n-   return self()->supportsFeature(OMR_FEATURE_PPC_HAS_VSX);\n-   }\n+void\n+J9::Power::CPU::setProcessorType(OMRProcessorArchitecture p)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e6f5e6849be129c272eb34c672b82ec16f4b780"}, "originalPosition": 118}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5NzgwMzY1", "url": "https://github.com/eclipse-openj9/openj9/pull/10594#pullrequestreview-489780365", "createdAt": "2020-09-16T16:05:38Z", "commit": {"oid": "2e6f5e6849be129c272eb34c672b82ec16f4b780"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2e6f5e6849be129c272eb34c672b82ec16f4b780", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/2e6f5e6849be129c272eb34c672b82ec16f4b780", "committedDate": "2020-09-15T18:26:33Z", "message": "Remove old processor detection code on Power\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}, "afterCommit": {"oid": "f30e9b88683d3774a65e43e75772f3cfd1bafb7f", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/f30e9b88683d3774a65e43e75772f3cfd1bafb7f", "committedDate": "2020-09-16T17:33:50Z", "message": "Remove old processor detection code on Power\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f30e9b88683d3774a65e43e75772f3cfd1bafb7f", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/f30e9b88683d3774a65e43e75772f3cfd1bafb7f", "committedDate": "2020-09-16T17:33:50Z", "message": "Remove old processor detection code on Power\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}, "afterCommit": {"oid": "8dcce280d25d498d8c4c848151346c62104a7af6", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/8dcce280d25d498d8c4c848151346c62104a7af6", "committedDate": "2020-09-16T18:11:52Z", "message": "Remove old processor detection code on Power\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8dcce280d25d498d8c4c848151346c62104a7af6", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/8dcce280d25d498d8c4c848151346c62104a7af6", "committedDate": "2020-09-16T18:11:52Z", "message": "Remove old processor detection code on Power\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}, "afterCommit": {"oid": "1c43b50f35b7e45b59685432a31b52c3de1f24f8", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/1c43b50f35b7e45b59685432a31b52c3de1f24f8", "committedDate": "2020-09-16T18:24:06Z", "message": "Remove old processor detection code on Power\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1c43b50f35b7e45b59685432a31b52c3de1f24f8", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/1c43b50f35b7e45b59685432a31b52c3de1f24f8", "committedDate": "2020-09-16T18:24:06Z", "message": "Remove old processor detection code on Power\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}, "afterCommit": {"oid": "9e8012c41a69f9337042b56e51221a9e2cfbe786", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/9e8012c41a69f9337042b56e51221a9e2cfbe786", "committedDate": "2020-09-16T18:30:44Z", "message": "Remove old processor detection code on Power\n\nSummary of changes:\n- Retire old version cpu detection code on Power\n- Move `CPU::getProcessorDescription()` to base J9CPU class as the 3 platforms (X, Z, Power) share the same code. There is no need to have 3 copies\n- Reasons for the removal:\n  - We kept the old version because we wanted to make sure new version and old version give us the same behaviour\n  - Now it's been a few month and we don't see any bugs with the new version there's no reason to keep the old version\n  - Also we want to prevent developers from using the old version.\n\nOld design\n- Initializes the `TR_Processor` struct via j9port library\n  - Initialization occurs in `TR_J9VM::initializeProcessorType()`\n  - obtain cpu information using `CPU::TO_PORTLIB_getJ9ProcessorDesc()`\n  - `TR::Compiler->target.cpu.setProcessor` to set processor\n- Fields and methods associated with the old design live in `Class CPU`\n- Common APIs:\n  - `CPU::TO_PORTLIB_getJ9ProcessorDesc()`\n  - `j9sysinfo_processor_has_feature(processorDesc, feature)` (j9port library API)\n  - `CPU::id()`\n  - `CPU::setProcessor(TR_Processor)`\n\nNew design\n- Initializes the `OMRProcessorDesc` struct via omrport library\n  - `CPU::detect()` to initialize `OMRProcessorDesc processorDescription`\n  - `CPU::applyUserOptions()` to apply any debug options after initialization\n  - `TR::Compiler->target.cpu` singleton variable that holds the CPU instance\n  - `comp()->target().cpu` per compilation variable which is used for cross-cpu compilation support\n    - For JIT we initialize `comp()->target().cpu` with `TR::Compiler->target.cpu` (Host CPU)\n    - For AOT we initialize `comp()->target().cpu` with `TR::Compiler->relocatableTarget.cpu` (Portable CPU)\n- Fields and methods associated with the new design live in `Class CPU`\n- Common APIs:\n  - `CPU::supportsFeature(feature)`\n  - `CPU::isAtLeast(OMRProcessorArchitecture)`\n- Benefits:\n  - Common to all 3 platforms\n  - Simpler interface\n  - Cross-CPU compilation support (Use one cpu for AOT and another for JIT)\n- The implementation for the new design is first introduced here https://github.com/eclipse/omr/pull/5197 and https://github.com/eclipse/openj9/pull/9571\n\nissue: https://github.com/eclipse/omr/issues/4339\ndepends on: https://github.com/eclipse/omr/pull/5547\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9e8012c41a69f9337042b56e51221a9e2cfbe786", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/9e8012c41a69f9337042b56e51221a9e2cfbe786", "committedDate": "2020-09-16T18:30:44Z", "message": "Remove old processor detection code on Power\n\nSummary of changes:\n- Retire old version cpu detection code on Power\n- Move `CPU::getProcessorDescription()` to base J9CPU class as the 3 platforms (X, Z, Power) share the same code. There is no need to have 3 copies\n- Reasons for the removal:\n  - We kept the old version because we wanted to make sure new version and old version give us the same behaviour\n  - Now it's been a few month and we don't see any bugs with the new version there's no reason to keep the old version\n  - Also we want to prevent developers from using the old version.\n\nOld design\n- Initializes the `TR_Processor` struct via j9port library\n  - Initialization occurs in `TR_J9VM::initializeProcessorType()`\n  - obtain cpu information using `CPU::TO_PORTLIB_getJ9ProcessorDesc()`\n  - `TR::Compiler->target.cpu.setProcessor` to set processor\n- Fields and methods associated with the old design live in `Class CPU`\n- Common APIs:\n  - `CPU::TO_PORTLIB_getJ9ProcessorDesc()`\n  - `j9sysinfo_processor_has_feature(processorDesc, feature)` (j9port library API)\n  - `CPU::id()`\n  - `CPU::setProcessor(TR_Processor)`\n\nNew design\n- Initializes the `OMRProcessorDesc` struct via omrport library\n  - `CPU::detect()` to initialize `OMRProcessorDesc processorDescription`\n  - `CPU::applyUserOptions()` to apply any debug options after initialization\n  - `TR::Compiler->target.cpu` singleton variable that holds the CPU instance\n  - `comp()->target().cpu` per compilation variable which is used for cross-cpu compilation support\n    - For JIT we initialize `comp()->target().cpu` with `TR::Compiler->target.cpu` (Host CPU)\n    - For AOT we initialize `comp()->target().cpu` with `TR::Compiler->relocatableTarget.cpu` (Portable CPU)\n- Fields and methods associated with the new design live in `Class CPU`\n- Common APIs:\n  - `CPU::supportsFeature(feature)`\n  - `CPU::isAtLeast(OMRProcessorArchitecture)`\n- Benefits:\n  - Common to all 3 platforms\n  - Simpler interface\n  - Cross-CPU compilation support (Use one cpu for AOT and another for JIT)\n- The implementation for the new design is first introduced here https://github.com/eclipse/omr/pull/5197 and https://github.com/eclipse/openj9/pull/9571\n\nissue: https://github.com/eclipse/omr/issues/4339\ndepends on: https://github.com/eclipse/omr/pull/5547\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}, "afterCommit": {"oid": "233dccb272866cdf8fb1e36ba7d60fba7409a36e", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/233dccb272866cdf8fb1e36ba7d60fba7409a36e", "committedDate": "2020-09-16T18:51:13Z", "message": "Remove old processor detection code on Power\n\nSummary of changes:\n- Retire old version cpu detection code on Power\n- Move `CPU::getProcessorDescription()` to base J9CPU class as the 3 platforms (X, Z, Power) share the same code. There is no need to have 3 copies\n- Reasons for the removal:\n  - We kept the old version because we wanted to make sure new version and old version give us the same behaviour\n  - Now it's been a few month and we don't see any bugs with the new version there's no reason to keep the old version\n  - Also we want to prevent developers from using the old version.\n\nOld design\n- Initializes the `TR_Processor` struct via j9port library\n  - Initialization occurs in `TR_J9VM::initializeProcessorType()`\n  - obtain cpu information using `CPU::TO_PORTLIB_getJ9ProcessorDesc()`\n  - `TR::Compiler->target.cpu.setProcessor` to set processor\n- Fields and methods associated with the old design live in `Class CPU`\n- Common APIs:\n  - `CPU::TO_PORTLIB_getJ9ProcessorDesc()`\n  - `j9sysinfo_processor_has_feature(processorDesc, feature)` (j9port library API)\n  - `CPU::id()`\n  - `CPU::setProcessor(TR_Processor)`\n\nNew design\n- Initializes the `OMRProcessorDesc` struct via omrport library\n  - `CPU::detect()` to initialize `OMRProcessorDesc processorDescription`\n  - `CPU::applyUserOptions()` to apply any debug options after initialization\n  - `TR::Compiler->target.cpu` singleton variable that holds the CPU instance\n  - `comp()->target().cpu` per compilation variable which is used for cross-cpu compilation support\n    - For JIT we initialize `comp()->target().cpu` with `TR::Compiler->target.cpu` (Host CPU)\n    - For AOT we initialize `comp()->target().cpu` with `TR::Compiler->relocatableTarget.cpu` (Portable CPU)\n- Fields and methods associated with the new design live in `Class CPU`\n- Common APIs:\n  - `CPU::supportsFeature(feature)`\n  - `CPU::isAtLeast(OMRProcessorArchitecture)`\n- Benefits:\n  - Common to all 3 platforms\n  - Simpler interface\n  - Cross-CPU compilation support (Use one cpu for AOT and another for JIT)\n- The implementation for the new design is first introduced here https://github.com/eclipse/omr/pull/5197 and https://github.com/eclipse/openj9/pull/9571\n\nissue: https://github.com/eclipse/omr/issues/4339\ndepends on: https://github.com/eclipse/omr/pull/5547\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwMDc0Nzc3", "url": "https://github.com/eclipse-openj9/openj9/pull/10594#pullrequestreview-490074777", "createdAt": "2020-09-16T23:00:53Z", "commit": {"oid": "233dccb272866cdf8fb1e36ba7d60fba7409a36e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5d3d9c2ffee81da008ab187007036883dae73ed5", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/5d3d9c2ffee81da008ab187007036883dae73ed5", "committedDate": "2020-09-17T01:02:53Z", "message": "Remove unused CPU detection API\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}, "afterCommit": {"oid": "ea6bc32cc9186654b2b1492c1dda77ca2629c1a7", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/ea6bc32cc9186654b2b1492c1dda77ca2629c1a7", "committedDate": "2020-09-17T18:15:25Z", "message": "Remove old processor detection code on Power\n\nSummary of changes:\n- Retire old version cpu detection code on Power\n- Move `CPU::getProcessorDescription()` to base J9CPU class as the 3 platforms (X, Z, Power) share the same code. There is no need to have 3 copies\n- Reasons for the removal:\n  - We kept the old version because we wanted to make sure new version and old version give us the same behaviour\n  - Now it's been a few month and we don't see any bugs with the new version there's no reason to keep the old version\n  - Also we want to prevent developers from using the old version.\n\nOld design\n- Initializes the `TR_Processor` struct via j9port library\n  - Initialization occurs in `TR_J9VM::initializeProcessorType()`\n  - obtain cpu information using `CPU::TO_PORTLIB_getJ9ProcessorDesc()`\n  - `TR::Compiler->target.cpu.setProcessor` to set processor\n- Fields and methods associated with the old design live in `Class CPU`\n- Common APIs:\n  - `CPU::TO_PORTLIB_getJ9ProcessorDesc()`\n  - `j9sysinfo_processor_has_feature(processorDesc, feature)` (j9port library API)\n  - `CPU::id()`\n  - `CPU::setProcessor(TR_Processor)`\n\nNew design\n- Initializes the `OMRProcessorDesc` struct via omrport library\n  - `CPU::detect()` to initialize `OMRProcessorDesc processorDescription`\n  - `CPU::applyUserOptions()` to apply any debug options after initialization\n  - `TR::Compiler->target.cpu` singleton variable that holds the CPU instance\n  - `comp()->target().cpu` per compilation variable which is used for cross-cpu compilation support\n    - For JIT we initialize `comp()->target().cpu` with `TR::Compiler->target.cpu` (Host CPU)\n    - For AOT we initialize `comp()->target().cpu` with `TR::Compiler->relocatableTarget.cpu` (Portable CPU)\n- Fields and methods associated with the new design live in `Class CPU`\n- Common APIs:\n  - `CPU::supportsFeature(feature)`\n  - `CPU::isAtLeast(OMRProcessorArchitecture)`\n- Benefits:\n  - Common to all 3 platforms\n  - Simpler interface\n  - Cross-CPU compilation support (Use one cpu for AOT and another for JIT)\n- The implementation for the new design is first introduced here https://github.com/eclipse/omr/pull/5197 and https://github.com/eclipse/openj9/pull/9571\n\nissue: https://github.com/eclipse/omr/issues/4339\ndepends on: https://github.com/eclipse/omr/pull/5547\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ea6bc32cc9186654b2b1492c1dda77ca2629c1a7", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/ea6bc32cc9186654b2b1492c1dda77ca2629c1a7", "committedDate": "2020-09-17T18:15:25Z", "message": "Remove old processor detection code on Power\n\nSummary of changes:\n- Retire old version cpu detection code on Power\n- Move `CPU::getProcessorDescription()` to base J9CPU class as the 3 platforms (X, Z, Power) share the same code. There is no need to have 3 copies\n- Reasons for the removal:\n  - We kept the old version because we wanted to make sure new version and old version give us the same behaviour\n  - Now it's been a few month and we don't see any bugs with the new version there's no reason to keep the old version\n  - Also we want to prevent developers from using the old version.\n\nOld design\n- Initializes the `TR_Processor` struct via j9port library\n  - Initialization occurs in `TR_J9VM::initializeProcessorType()`\n  - obtain cpu information using `CPU::TO_PORTLIB_getJ9ProcessorDesc()`\n  - `TR::Compiler->target.cpu.setProcessor` to set processor\n- Fields and methods associated with the old design live in `Class CPU`\n- Common APIs:\n  - `CPU::TO_PORTLIB_getJ9ProcessorDesc()`\n  - `j9sysinfo_processor_has_feature(processorDesc, feature)` (j9port library API)\n  - `CPU::id()`\n  - `CPU::setProcessor(TR_Processor)`\n\nNew design\n- Initializes the `OMRProcessorDesc` struct via omrport library\n  - `CPU::detect()` to initialize `OMRProcessorDesc processorDescription`\n  - `CPU::applyUserOptions()` to apply any debug options after initialization\n  - `TR::Compiler->target.cpu` singleton variable that holds the CPU instance\n  - `comp()->target().cpu` per compilation variable which is used for cross-cpu compilation support\n    - For JIT we initialize `comp()->target().cpu` with `TR::Compiler->target.cpu` (Host CPU)\n    - For AOT we initialize `comp()->target().cpu` with `TR::Compiler->relocatableTarget.cpu` (Portable CPU)\n- Fields and methods associated with the new design live in `Class CPU`\n- Common APIs:\n  - `CPU::supportsFeature(feature)`\n  - `CPU::isAtLeast(OMRProcessorArchitecture)`\n- Benefits:\n  - Common to all 3 platforms\n  - Simpler interface\n  - Cross-CPU compilation support (Use one cpu for AOT and another for JIT)\n- The implementation for the new design is first introduced here https://github.com/eclipse/omr/pull/5197 and https://github.com/eclipse/openj9/pull/9571\n\nissue: https://github.com/eclipse/omr/issues/4339\ndepends on: https://github.com/eclipse/omr/pull/5547\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}, "afterCommit": {"oid": "fdf5c0f2c5645e79c938b67104c3d4f1f0195b1e", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/fdf5c0f2c5645e79c938b67104c3d4f1f0195b1e", "committedDate": "2020-09-17T19:02:49Z", "message": "Remove old processor detection code on Power\n\nSummary of changes:\n- Retire old version cpu detection code on Power\n- Move `CPU::getProcessorDescription()` to base J9CPU class as the 3 platforms (X, Z, Power) share the same code. There is no need to have 3 copies\n- Reasons for the removal:\n  - We kept the old version because we wanted to make sure new version and old version give us the same behaviour\n  - Now it's been a few month and we don't see any bugs with the new version there's no reason to keep the old version\n  - Also we want to prevent developers from using the old version.\n\nOld design\n- Initializes the `TR_Processor` struct via j9port library\n  - Initialization occurs in `TR_J9VM::initializeProcessorType()`\n  - obtain cpu information using `CPU::TO_PORTLIB_getJ9ProcessorDesc()`\n  - `TR::Compiler->target.cpu.setProcessor` to set processor\n- Fields and methods associated with the old design live in `Class CPU`\n- Common APIs:\n  - `CPU::TO_PORTLIB_getJ9ProcessorDesc()`\n  - `j9sysinfo_processor_has_feature(processorDesc, feature)` (j9port library API)\n  - `CPU::id()`\n  - `CPU::setProcessor(TR_Processor)`\n\nNew design\n- Initializes the `OMRProcessorDesc` struct via omrport library\n  - `CPU::detect()` to initialize `OMRProcessorDesc processorDescription`\n  - `CPU::applyUserOptions()` to apply any debug options after initialization\n  - `TR::Compiler->target.cpu` singleton variable that holds the CPU instance\n  - `comp()->target().cpu` per compilation variable which is used for cross-cpu compilation support\n    - For JIT we initialize `comp()->target().cpu` with `TR::Compiler->target.cpu` (Host CPU)\n    - For AOT we initialize `comp()->target().cpu` with `TR::Compiler->relocatableTarget.cpu` (Portable CPU)\n- Fields and methods associated with the new design live in `Class CPU`\n- Common APIs:\n  - `CPU::supportsFeature(feature)`\n  - `CPU::isAtLeast(OMRProcessorArchitecture)`\n- Benefits:\n  - Common to all 3 platforms\n  - Simpler interface\n  - Cross-CPU compilation support (Use one cpu for AOT and another for JIT)\n- The implementation for the new design is first introduced here https://github.com/eclipse/omr/pull/5197 and https://github.com/eclipse/openj9/pull/9571\n\nissue: https://github.com/eclipse/omr/issues/4339\ndepends on: https://github.com/eclipse/omr/pull/5547\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fdf5c0f2c5645e79c938b67104c3d4f1f0195b1e", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/fdf5c0f2c5645e79c938b67104c3d4f1f0195b1e", "committedDate": "2020-09-17T19:02:49Z", "message": "Remove old processor detection code on Power\n\nSummary of changes:\n- Retire old version cpu detection code on Power\n- Move `CPU::getProcessorDescription()` to base J9CPU class as the 3 platforms (X, Z, Power) share the same code. There is no need to have 3 copies\n- Reasons for the removal:\n  - We kept the old version because we wanted to make sure new version and old version give us the same behaviour\n  - Now it's been a few month and we don't see any bugs with the new version there's no reason to keep the old version\n  - Also we want to prevent developers from using the old version.\n\nOld design\n- Initializes the `TR_Processor` struct via j9port library\n  - Initialization occurs in `TR_J9VM::initializeProcessorType()`\n  - obtain cpu information using `CPU::TO_PORTLIB_getJ9ProcessorDesc()`\n  - `TR::Compiler->target.cpu.setProcessor` to set processor\n- Fields and methods associated with the old design live in `Class CPU`\n- Common APIs:\n  - `CPU::TO_PORTLIB_getJ9ProcessorDesc()`\n  - `j9sysinfo_processor_has_feature(processorDesc, feature)` (j9port library API)\n  - `CPU::id()`\n  - `CPU::setProcessor(TR_Processor)`\n\nNew design\n- Initializes the `OMRProcessorDesc` struct via omrport library\n  - `CPU::detect()` to initialize `OMRProcessorDesc processorDescription`\n  - `CPU::applyUserOptions()` to apply any debug options after initialization\n  - `TR::Compiler->target.cpu` singleton variable that holds the CPU instance\n  - `comp()->target().cpu` per compilation variable which is used for cross-cpu compilation support\n    - For JIT we initialize `comp()->target().cpu` with `TR::Compiler->target.cpu` (Host CPU)\n    - For AOT we initialize `comp()->target().cpu` with `TR::Compiler->relocatableTarget.cpu` (Portable CPU)\n- Fields and methods associated with the new design live in `Class CPU`\n- Common APIs:\n  - `CPU::supportsFeature(feature)`\n  - `CPU::isAtLeast(OMRProcessorArchitecture)`\n- Benefits:\n  - Common to all 3 platforms\n  - Simpler interface\n  - Cross-CPU compilation support (Use one cpu for AOT and another for JIT)\n- The implementation for the new design is first introduced here https://github.com/eclipse/omr/pull/5197 and https://github.com/eclipse/openj9/pull/9571\n\nissue: https://github.com/eclipse/omr/issues/4339\ndepends on: https://github.com/eclipse/omr/pull/5547\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}, "afterCommit": {"oid": "4fe000d5158d92e35f0489bf811cb24bf5d44471", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/4fe000d5158d92e35f0489bf811cb24bf5d44471", "committedDate": "2020-09-21T21:14:58Z", "message": "Remove old processor detection code on Power\n\nSummary of changes:\n- Retire old version cpu detection code on Power\n- Move `CPU::getProcessorDescription()` to base J9CPU class as the 3 platforms (X, Z, Power) share the same code. There is no need to have 3 copies\n- Reasons for the removal:\n  - We kept the old version because we wanted to make sure new version and old version give us the same behaviour\n  - Now it's been a few month and we don't see any bugs with the new version there's no reason to keep the old version\n  - Also we want to prevent developers from using the old version.\n\nOld design\n- Initializes the `TR_Processor` struct via j9port library\n  - Initialization occurs in `TR_J9VM::initializeProcessorType()`\n  - obtain cpu information using `CPU::TO_PORTLIB_getJ9ProcessorDesc()`\n  - `TR::Compiler->target.cpu.setProcessor` to set processor\n- Fields and methods associated with the old design live in `Class CPU`\n- Common APIs:\n  - `CPU::TO_PORTLIB_getJ9ProcessorDesc()`\n  - `j9sysinfo_processor_has_feature(processorDesc, feature)` (j9port library API)\n  - `CPU::id()`\n  - `CPU::setProcessor(TR_Processor)`\n\nNew design\n- Initializes the `OMRProcessorDesc` struct via omrport library\n  - `CPU::detect()` to initialize `OMRProcessorDesc processorDescription`\n  - `CPU::applyUserOptions()` to apply any debug options after initialization\n  - `TR::Compiler->target.cpu` singleton variable that holds the CPU instance\n  - `comp()->target().cpu` per compilation variable which is used for cross-cpu compilation support\n    - For JIT we initialize `comp()->target().cpu` with `TR::Compiler->target.cpu` (Host CPU)\n    - For AOT we initialize `comp()->target().cpu` with `TR::Compiler->relocatableTarget.cpu` (Portable CPU)\n- Fields and methods associated with the new design live in `Class CPU`\n- Common APIs:\n  - `CPU::supportsFeature(feature)`\n  - `CPU::isAtLeast(OMRProcessorArchitecture)`\n- Benefits:\n  - Common to all 3 platforms\n  - Simpler interface\n  - Cross-CPU compilation support (Use one cpu for AOT and another for JIT)\n- The implementation for the new design is first introduced here https://github.com/eclipse/omr/pull/5197 and https://github.com/eclipse/openj9/pull/9571\n\nissue: https://github.com/eclipse/omr/issues/4339\ndepends on: https://github.com/eclipse/omr/pull/5547\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4fe000d5158d92e35f0489bf811cb24bf5d44471", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/4fe000d5158d92e35f0489bf811cb24bf5d44471", "committedDate": "2020-09-21T21:14:58Z", "message": "Remove old processor detection code on Power\n\nSummary of changes:\n- Retire old version cpu detection code on Power\n- Move `CPU::getProcessorDescription()` to base J9CPU class as the 3 platforms (X, Z, Power) share the same code. There is no need to have 3 copies\n- Reasons for the removal:\n  - We kept the old version because we wanted to make sure new version and old version give us the same behaviour\n  - Now it's been a few month and we don't see any bugs with the new version there's no reason to keep the old version\n  - Also we want to prevent developers from using the old version.\n\nOld design\n- Initializes the `TR_Processor` struct via j9port library\n  - Initialization occurs in `TR_J9VM::initializeProcessorType()`\n  - obtain cpu information using `CPU::TO_PORTLIB_getJ9ProcessorDesc()`\n  - `TR::Compiler->target.cpu.setProcessor` to set processor\n- Fields and methods associated with the old design live in `Class CPU`\n- Common APIs:\n  - `CPU::TO_PORTLIB_getJ9ProcessorDesc()`\n  - `j9sysinfo_processor_has_feature(processorDesc, feature)` (j9port library API)\n  - `CPU::id()`\n  - `CPU::setProcessor(TR_Processor)`\n\nNew design\n- Initializes the `OMRProcessorDesc` struct via omrport library\n  - `CPU::detect()` to initialize `OMRProcessorDesc processorDescription`\n  - `CPU::applyUserOptions()` to apply any debug options after initialization\n  - `TR::Compiler->target.cpu` singleton variable that holds the CPU instance\n  - `comp()->target().cpu` per compilation variable which is used for cross-cpu compilation support\n    - For JIT we initialize `comp()->target().cpu` with `TR::Compiler->target.cpu` (Host CPU)\n    - For AOT we initialize `comp()->target().cpu` with `TR::Compiler->relocatableTarget.cpu` (Portable CPU)\n- Fields and methods associated with the new design live in `Class CPU`\n- Common APIs:\n  - `CPU::supportsFeature(feature)`\n  - `CPU::isAtLeast(OMRProcessorArchitecture)`\n- Benefits:\n  - Common to all 3 platforms\n  - Simpler interface\n  - Cross-CPU compilation support (Use one cpu for AOT and another for JIT)\n- The implementation for the new design is first introduced here https://github.com/eclipse/omr/pull/5197 and https://github.com/eclipse/openj9/pull/9571\n\nissue: https://github.com/eclipse/omr/issues/4339\ndepends on: https://github.com/eclipse/omr/pull/5547\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}, "afterCommit": {"oid": "4c8b0545227fe3c7f1cace8da0a5f02eb62c715c", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/4c8b0545227fe3c7f1cace8da0a5f02eb62c715c", "committedDate": "2020-09-21T21:18:28Z", "message": "Remove old processor detection code on Power\n\nSummary of changes:\n- Retire old version cpu detection code on Power\n- Move `CPU::getProcessorDescription()` to base J9CPU class as the 3 platforms (X, Z, Power) share the same code. There is no need to have 3 copies\n- Reasons for the removal:\n  - We kept the old version because we wanted to make sure new version and old version give us the same behaviour\n  - Now it's been a few month and we don't see any bugs with the new version there's no reason to keep the old version\n  - Also we want to prevent developers from using the old version.\n\nOld design\n- Initializes the `TR_Processor` struct via j9port library\n  - Initialization occurs in `TR_J9VM::initializeProcessorType()`\n  - obtain cpu information using `CPU::TO_PORTLIB_getJ9ProcessorDesc()`\n  - `TR::Compiler->target.cpu.setProcessor` to set processor\n- Fields and methods associated with the old design live in `Class CPU`\n- Common APIs:\n  - `CPU::TO_PORTLIB_getJ9ProcessorDesc()`\n  - `j9sysinfo_processor_has_feature(processorDesc, feature)` (j9port library API)\n  - `CPU::id()`\n  - `CPU::setProcessor(TR_Processor)`\n\nNew design\n- Initializes the `OMRProcessorDesc` struct via omrport library\n  - `CPU::detect()` to initialize `OMRProcessorDesc processorDescription`\n  - `CPU::applyUserOptions()` to apply any debug options after initialization\n  - `TR::Compiler->target.cpu` singleton variable that holds the CPU instance\n  - `comp()->target().cpu` per compilation variable which is used for cross-cpu compilation support\n    - For JIT we initialize `comp()->target().cpu` with `TR::Compiler->target.cpu` (Host CPU)\n    - For AOT we initialize `comp()->target().cpu` with `TR::Compiler->relocatableTarget.cpu` (Portable CPU)\n- Fields and methods associated with the new design live in `Class CPU`\n- Common APIs:\n  - `CPU::supportsFeature(feature)`\n  - `CPU::isAtLeast(OMRProcessorArchitecture)`\n- Benefits:\n  - Common to all 3 platforms\n  - Simpler interface\n  - Cross-CPU compilation support (Use one cpu for AOT and another for JIT)\n- The implementation for the new design is first introduced here https://github.com/eclipse/omr/pull/5197 and https://github.com/eclipse/openj9/pull/9571\n\nissue: https://github.com/eclipse/omr/issues/4339\ndepends on: https://github.com/eclipse/omr/pull/5547\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d9d92c70d4955b01f4013fb0d4a3e431ed7a0ed", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/1d9d92c70d4955b01f4013fb0d4a3e431ed7a0ed", "committedDate": "2020-09-23T19:24:13Z", "message": "Remove old processor detection code on Power\n\nSummary of changes:\n- Retire old version cpu detection code on Power\n- Move `CPU::getProcessorDescription()` to base J9CPU class as the 3 platforms (X, Z, Power) share the same code. There is no need to have 3 copies\n- Reasons for the removal:\n  - We kept the old version because we wanted to make sure new version and old version give us the same behaviour\n  - Now it's been a few month and we don't see any bugs with the new version there's no reason to keep the old version\n  - Also we want to prevent developers from using the old version.\n\nOld design\n- Initializes the `TR_Processor` struct via j9port library\n  - Initialization occurs in `TR_J9VM::initializeProcessorType()`\n  - obtain cpu information using `CPU::TO_PORTLIB_getJ9ProcessorDesc()`\n  - `TR::Compiler->target.cpu.setProcessor` to set processor\n- Fields and methods associated with the old design live in `Class CPU`\n- Common APIs:\n  - `CPU::TO_PORTLIB_getJ9ProcessorDesc()`\n  - `j9sysinfo_processor_has_feature(processorDesc, feature)` (j9port library API)\n  - `CPU::id()`\n  - `CPU::setProcessor(TR_Processor)`\n\nNew design\n- Initializes the `OMRProcessorDesc` struct via omrport library\n  - `CPU::detect()` to initialize `OMRProcessorDesc processorDescription`\n  - `CPU::applyUserOptions()` to apply any debug options after initialization\n  - `TR::Compiler->target.cpu` singleton variable that holds the CPU instance\n  - `comp()->target().cpu` per compilation variable which is used for cross-cpu compilation support\n    - For JIT we initialize `comp()->target().cpu` with `TR::Compiler->target.cpu` (Host CPU)\n    - For AOT we initialize `comp()->target().cpu` with `TR::Compiler->relocatableTarget.cpu` (Portable CPU)\n- Fields and methods associated with the new design live in `Class CPU`\n- Common APIs:\n  - `CPU::supportsFeature(feature)`\n  - `CPU::isAtLeast(OMRProcessorArchitecture)`\n- Benefits:\n  - Common to all 3 platforms\n  - Simpler interface\n  - Cross-CPU compilation support (Use one cpu for AOT and another for JIT)\n- The implementation for the new design is first introduced here https://github.com/eclipse/omr/pull/5197 and https://github.com/eclipse/openj9/pull/9571\n\nissue: https://github.com/eclipse/omr/issues/4339\ndepends on: https://github.com/eclipse/omr/pull/5547\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4c8b0545227fe3c7f1cace8da0a5f02eb62c715c", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/4c8b0545227fe3c7f1cace8da0a5f02eb62c715c", "committedDate": "2020-09-21T21:18:28Z", "message": "Remove old processor detection code on Power\n\nSummary of changes:\n- Retire old version cpu detection code on Power\n- Move `CPU::getProcessorDescription()` to base J9CPU class as the 3 platforms (X, Z, Power) share the same code. There is no need to have 3 copies\n- Reasons for the removal:\n  - We kept the old version because we wanted to make sure new version and old version give us the same behaviour\n  - Now it's been a few month and we don't see any bugs with the new version there's no reason to keep the old version\n  - Also we want to prevent developers from using the old version.\n\nOld design\n- Initializes the `TR_Processor` struct via j9port library\n  - Initialization occurs in `TR_J9VM::initializeProcessorType()`\n  - obtain cpu information using `CPU::TO_PORTLIB_getJ9ProcessorDesc()`\n  - `TR::Compiler->target.cpu.setProcessor` to set processor\n- Fields and methods associated with the old design live in `Class CPU`\n- Common APIs:\n  - `CPU::TO_PORTLIB_getJ9ProcessorDesc()`\n  - `j9sysinfo_processor_has_feature(processorDesc, feature)` (j9port library API)\n  - `CPU::id()`\n  - `CPU::setProcessor(TR_Processor)`\n\nNew design\n- Initializes the `OMRProcessorDesc` struct via omrport library\n  - `CPU::detect()` to initialize `OMRProcessorDesc processorDescription`\n  - `CPU::applyUserOptions()` to apply any debug options after initialization\n  - `TR::Compiler->target.cpu` singleton variable that holds the CPU instance\n  - `comp()->target().cpu` per compilation variable which is used for cross-cpu compilation support\n    - For JIT we initialize `comp()->target().cpu` with `TR::Compiler->target.cpu` (Host CPU)\n    - For AOT we initialize `comp()->target().cpu` with `TR::Compiler->relocatableTarget.cpu` (Portable CPU)\n- Fields and methods associated with the new design live in `Class CPU`\n- Common APIs:\n  - `CPU::supportsFeature(feature)`\n  - `CPU::isAtLeast(OMRProcessorArchitecture)`\n- Benefits:\n  - Common to all 3 platforms\n  - Simpler interface\n  - Cross-CPU compilation support (Use one cpu for AOT and another for JIT)\n- The implementation for the new design is first introduced here https://github.com/eclipse/omr/pull/5197 and https://github.com/eclipse/openj9/pull/9571\n\nissue: https://github.com/eclipse/omr/issues/4339\ndepends on: https://github.com/eclipse/omr/pull/5547\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}, "afterCommit": {"oid": "1d9d92c70d4955b01f4013fb0d4a3e431ed7a0ed", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/1d9d92c70d4955b01f4013fb0d4a3e431ed7a0ed", "committedDate": "2020-09-23T19:24:13Z", "message": "Remove old processor detection code on Power\n\nSummary of changes:\n- Retire old version cpu detection code on Power\n- Move `CPU::getProcessorDescription()` to base J9CPU class as the 3 platforms (X, Z, Power) share the same code. There is no need to have 3 copies\n- Reasons for the removal:\n  - We kept the old version because we wanted to make sure new version and old version give us the same behaviour\n  - Now it's been a few month and we don't see any bugs with the new version there's no reason to keep the old version\n  - Also we want to prevent developers from using the old version.\n\nOld design\n- Initializes the `TR_Processor` struct via j9port library\n  - Initialization occurs in `TR_J9VM::initializeProcessorType()`\n  - obtain cpu information using `CPU::TO_PORTLIB_getJ9ProcessorDesc()`\n  - `TR::Compiler->target.cpu.setProcessor` to set processor\n- Fields and methods associated with the old design live in `Class CPU`\n- Common APIs:\n  - `CPU::TO_PORTLIB_getJ9ProcessorDesc()`\n  - `j9sysinfo_processor_has_feature(processorDesc, feature)` (j9port library API)\n  - `CPU::id()`\n  - `CPU::setProcessor(TR_Processor)`\n\nNew design\n- Initializes the `OMRProcessorDesc` struct via omrport library\n  - `CPU::detect()` to initialize `OMRProcessorDesc processorDescription`\n  - `CPU::applyUserOptions()` to apply any debug options after initialization\n  - `TR::Compiler->target.cpu` singleton variable that holds the CPU instance\n  - `comp()->target().cpu` per compilation variable which is used for cross-cpu compilation support\n    - For JIT we initialize `comp()->target().cpu` with `TR::Compiler->target.cpu` (Host CPU)\n    - For AOT we initialize `comp()->target().cpu` with `TR::Compiler->relocatableTarget.cpu` (Portable CPU)\n- Fields and methods associated with the new design live in `Class CPU`\n- Common APIs:\n  - `CPU::supportsFeature(feature)`\n  - `CPU::isAtLeast(OMRProcessorArchitecture)`\n- Benefits:\n  - Common to all 3 platforms\n  - Simpler interface\n  - Cross-CPU compilation support (Use one cpu for AOT and another for JIT)\n- The implementation for the new design is first introduced here https://github.com/eclipse/omr/pull/5197 and https://github.com/eclipse/openj9/pull/9571\n\nissue: https://github.com/eclipse/omr/issues/4339\ndepends on: https://github.com/eclipse/omr/pull/5547\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 6, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}