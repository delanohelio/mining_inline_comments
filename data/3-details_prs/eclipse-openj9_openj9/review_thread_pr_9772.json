{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2NzYwODgw", "number": 9772, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNzoxNzo1MVrOECP76A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxODo0NjozOFrOEUJ_cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNzkzNzA0OnYy", "diffSide": "RIGHT", "path": "doc/features/SharedClassesCache.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNzoxNzo1MVrOGelyMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNzoxNzo1MVrOGelyMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcyOTUyMQ==", "bodyText": "It will be a bit confusing to someone reading this part after this PR gets merged because the feature will already be in.", "url": "https://github.com/eclipse-openj9/openj9/pull/9772#discussion_r434729521", "createdAt": "2020-06-03T17:17:51Z", "author": {"login": "ymanton"}, "path": "doc/features/SharedClassesCache.md", "diffHunk": "@@ -0,0 +1,71 @@\n+<!--\n+Copyright (c) 2019, 2020 IBM Corp. and others\n+\n+This program and the accompanying materials are made available under\n+the terms of the Eclipse Public License 2.0 which accompanies this\n+distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+or the Apache License, Version 2.0 which accompanies this distribution and\n+is available at https://www.apache.org/licenses/LICENSE-2.0.\n+\n+This Source Code may also be made available under the following\n+Secondary Licenses when the conditions for such availability set\n+forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+General Public License, version 2 with the GNU Classpath\n+Exception [1] and GNU General Public License, version 2 with the\n+OpenJDK Assembly Exception [2].\n+\n+[1] https://www.gnu.org/software/classpath/license.html\n+[2] http://openjdk.java.net/legal/assembly-exception.html\n+\n+SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+-->\n+\n+The Shared Classes Cache (SCC) is a feature of OpenJ9 that enables sharing \n+data between JVMs. For more information see [1].\n+\n+## JIT\n+\n+The JIT Compiler uses the SCC to store both AOT code as well as data either\n+necessary for AOT \n+(e.g. [Class Chains](https://github.com/eclipse/openj9/blob/master/doc/compiler/aot/ClassChains.md)),\n+or for performace (e.g. IProfiler data). The JIT interfaces with the SCC via\n+the `TR_J9SharedCache` class.\n+\n+### Offsets\n+\n+When data that is stored into the SCC needs to refer to other data, it is\n+referred to by using offsets. Traditionally, the offset would always be\n+relative to the start of the SCC. However, with the feature to change the\n+size of the SCC coming soon, only offsets of data in the ROM Class section", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf4ea7315e4e386b46f48793d8dad445e7cc7482"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NTY2NTAxOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/codegen/J9AheadOfTimeCompile.hpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxODozMToyM1rOG6SGZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxODozMToyM1rOG6SGZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc2NzE0Mw==", "bodyText": "Typo.", "url": "https://github.com/eclipse-openj9/openj9/pull/9772#discussion_r463767143", "createdAt": "2020-07-31T18:31:23Z", "author": {"login": "ymanton"}, "path": "runtime/compiler/codegen/J9AheadOfTimeCompile.hpp", "diffHunk": "@@ -85,16 +84,35 @@ class OMR_EXTENSIBLE AheadOfTimeCompile : public OMR::AheadOfTimeCompileConnecto\n     *\n     * Calling TR_J9SharedCache::offsetInSharedCacheFromPointer after such a\n     * redefinition could result in an assert. Therefore, this method exists as\n-    * a wrapper around TR_J9SharedCache::isPointerInSharedCache which doesn't\n+    * a wrapper around TR_J9SharedCache::isROMClassInSharedCache which doesn't\n     * assert and conveniently, updates the location referred to by the cacheOffset\n     * pointer passed in as a parameter.\n     *\n     * If the ptr isn't in the the SCC, then the current method will abort the\n     * compilation. If the ptr is in the SCC, then the cacheOffset will be updated.\n     *\n     * @param sharedCache pointer to the TR_SharedCache object\n+    * @param romClass J9ROMClass * whose offset in the SCC is required\n+    * @return The offset into the SCC of romClass\n+    */\n+   uintptr_t offsetInSharedCacheFromROMClass(TR_SharedCache *sharedCache, J9ROMClass *romClass);\n+\n+   /**\n+    * @brief Same circumstance as offsetInSharedCacheFromROMClass above\n+    *\n+    * @param sharedCache pointer to the TR_SharedCache object\n+    * @param romMethod J9ROMMethod * whose offset in the SCC is required\n+    * @return The offset into the SCC of romMethod\n+    */\n+   uintptr_t offsetInSharedCacheFromROMMethod(TR_SharedCache *sharedCache, J9ROMMethod *romMethod);\n+\n+   /**\n+    * @brief Wrapper around TR_J9SharedCache::offsetInSharedCacheFromPointer for\n+    *        consistency with the above APIs\n+    *\n+    * @param sharedCache pointer to the TR_SharedCache object\n     * @param ptr pointer whose offset in the SCC is required\n-    * @return The offset into the SCC of ptr\n+    * @return he offset into the SCC of ptr", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b0f77822d286cc04110ed04f187137ab5a72f57"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NTcwNjc0OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/env/J9SharedCache.cpp", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxODo0NjozOFrOG6Sf8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNDozNTo1NFrOG7jYDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc3MzY4Mg==", "bodyText": "Can we move these to a header instead of copying them?", "url": "https://github.com/eclipse-openj9/openj9/pull/9772#discussion_r463773682", "createdAt": "2020-07-31T18:46:38Z", "author": {"login": "ymanton"}, "path": "runtime/compiler/env/J9SharedCache.cpp", "diffHunk": "@@ -52,6 +52,10 @@\n       log(\"\" format \"\", ##__VA_ARGS__);          \\\n       }\n \n+// From CompositeCache.cpp\n+#define UPDATEPTR(ca) (((uint8_t *)(ca)) + (ca)->updateSRP)\n+#define SEGUPDATEPTR(ca) (((uint8_t *)(ca)) + (ca)->segmentSRP)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7398ab8235604ccca5bd62be296723c3a4d5aa1"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA5ODc2Nw==", "bodyText": "The reason I can't easily is because the definition in SC code is\nhttps://github.com/eclipse/openj9/blob/04c2621751962dd32b2ff60b8d212d27d5bd953b/runtime/shared_common/CompositeCache.cpp#L69-L71\nThere are several definitions for BlockPtr depending on the file you look at, but I think the one relevant for this macro is  https://github.com/eclipse/openj9/blob/04c2621751962dd32b2ff60b8d212d27d5bd953b/runtime/shared_common/CompositeCacheImpl.hpp#L79 which is typedef'd in a class. Moving the typedef to some j9 header might clash with the other typedefs. We can take a look at what might be involved to expose the SC macros, or maybe even just add public APIs. But I think it would be too much for this PR.", "url": "https://github.com/eclipse-openj9/openj9/pull/9772#discussion_r465098767", "createdAt": "2020-08-04T14:35:54Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/env/J9SharedCache.cpp", "diffHunk": "@@ -52,6 +52,10 @@\n       log(\"\" format \"\", ##__VA_ARGS__);          \\\n       }\n \n+// From CompositeCache.cpp\n+#define UPDATEPTR(ca) (((uint8_t *)(ca)) + (ca)->updateSRP)\n+#define SEGUPDATEPTR(ca) (((uint8_t *)(ca)) + (ca)->segmentSRP)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc3MzY4Mg=="}, "originalCommit": {"oid": "f7398ab8235604ccca5bd62be296723c3a4d5aa1"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 107, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}