{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3MDE3Njk5", "number": 10137, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMDoyMjowNVrOEPSo-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMDo0ODoyM1rOEjYHHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NDY5NDk2OnYy", "diffSide": "RIGHT", "path": "test/functional/Valhalla/src/org/openj9/test/lworld/ValueTypeGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMDoyMjowNVrOGy7Xvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMDoyNTo1MlrOGy7feQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA1NDcxOA==", "bodyText": "@tajila The spot causing the error when trying to create the method", "url": "https://github.com/eclipse-openj9/openj9/pull/10137#discussion_r456054718", "createdAt": "2020-07-16T20:22:05Z", "author": {"login": "OussamaSaoudi"}, "path": "test/functional/Valhalla/src/org/openj9/test/lworld/ValueTypeGenerator.java", "diffHunk": "@@ -925,4 +928,28 @@ public static void generateClassFile(String name, byte[] bytes) {\n \t\tbyte[] bytes = generateClass(name, fields, false, true);\n \t\treturn generator.defineClass(name, bytes, 0, bytes.length);\n \t}\n-}\n\\ No newline at end of file\n+\n+\tpublic static void addgenerate2DMultiANewArray(ClassWriter cw) {\n+        MethodVisitor mv = cw.visitMethod(ACC_PUBLIC + ACC_STATIC, \"generate2DMultiANewArray\", \"(II)Ljava/lang/Object;\", null, null);\n+\t\tmv.visitCode();\n+\t\tmv.visitVarInsn(ILOAD, 0);\n+\t\tmv.visitVarInsn(ILOAD, 1);\n+        mv.visitMultiANewArrayInsn( \"[[\" + getSigFromSimpleName(\"Point2D\", false), 2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "991ae4a36c9c5116113a233b7928d8c653406629"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA1NjY5Nw==", "bodyText": "dont hard code the name of the class, pass in the name as a param instead", "url": "https://github.com/eclipse-openj9/openj9/pull/10137#discussion_r456056697", "createdAt": "2020-07-16T20:25:52Z", "author": {"login": "tajila"}, "path": "test/functional/Valhalla/src/org/openj9/test/lworld/ValueTypeGenerator.java", "diffHunk": "@@ -925,4 +928,28 @@ public static void generateClassFile(String name, byte[] bytes) {\n \t\tbyte[] bytes = generateClass(name, fields, false, true);\n \t\treturn generator.defineClass(name, bytes, 0, bytes.length);\n \t}\n-}\n\\ No newline at end of file\n+\n+\tpublic static void addgenerate2DMultiANewArray(ClassWriter cw) {\n+        MethodVisitor mv = cw.visitMethod(ACC_PUBLIC + ACC_STATIC, \"generate2DMultiANewArray\", \"(II)Ljava/lang/Object;\", null, null);\n+\t\tmv.visitCode();\n+\t\tmv.visitVarInsn(ILOAD, 0);\n+\t\tmv.visitVarInsn(ILOAD, 1);\n+        mv.visitMultiANewArrayInsn( \"[[\" + getSigFromSimpleName(\"Point2D\", false), 2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA1NDcxOA=="}, "originalCommit": {"oid": "991ae4a36c9c5116113a233b7928d8c653406629"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODE0Nzg3OnYy", "diffSide": "RIGHT", "path": "test/functional/Valhalla/src/org/openj9/test/lworld/ValueTypeTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNzo0MjoxMlrOGzbqTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNzo0MjoxMlrOGzbqTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU4Mzc1Ng==", "bodyText": "Invoking getPoint2D is causing NullPointerException.", "url": "https://github.com/eclipse-openj9/openj9/pull/10137#discussion_r456583756", "createdAt": "2020-07-17T17:42:12Z", "author": {"login": "OussamaSaoudi"}, "path": "test/functional/Valhalla/src/org/openj9/test/lworld/ValueTypeTests.java", "diffHunk": "@@ -1982,6 +1982,35 @@ static public void testDefaultValueInPointArray() throws Throwable {\n \t\t}\n \t}\n \n+\t/**\n+\t * Create multianewarray with Point Class without initialization.\n+\t * The array should be set ot a Default Value.\n+\t */\n+\t@Test(priority=4)\n+\tstatic public void testDefaultValueInPointInstanceMultiANewArray() throws Throwable {\n+\t\tObject pointArray = Array.newInstance(point2DClass, new int[]{genericArraySize, genericArraySize});\n+\t\tfor (int i = 0; i < genericArraySize; i++) {\n+\t\t\tfor (int j = 0; j < genericArraySize; j++) {\n+\t\t\t\tObject pointObject = Array.get(Array.get(pointArray,i),j);\n+\t\t\t\tassertNotNull(pointObject);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t@Test(priority=4)\n+\tstatic public void testDefaultValueInPointByteCodeMultiANewArray() throws Throwable {\n+\t\t/* Try down cast? ELSE: look at ASMifier */\n+\t\tMethodHandle makePointArray = lookup.findStatic(point2DClass, \"generate2DMultiANewArray\", MethodType.methodType(Object.class, int.class, int.class));\n+\t\tObject pointArray = makePoint2D.invoke(genericArraySize, genericArraySize);\n+\t\tMethodHandle getPoint2D = lookup.findStatic(point2DClass, \"get2DMultiANewArray\", MethodType.methodType(Object.class, Object.class, int.class, int.class));\n+\t\t//for (int i = 0; i < genericArraySize; i++) {\n+\t\t\t//for (int j = 0; j < genericArraySize; j++) {\n+\t\t\t\tObject pointObject = getPoint2D.invoke(pointArray,1, 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83bdeda20f32ba7ab92e363f3d802f992c0a7ab3"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODM0OTk0OnYy", "diffSide": "RIGHT", "path": "test/functional/Valhalla/src/org/openj9/test/lworld/ValueTypeTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxODo0NjoyMFrOGzdldA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxODo0NjoyMFrOGzdldA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYxNTI4NA==", "bodyText": "youre not making an array here, need makePointArray instead of makePoint2D", "url": "https://github.com/eclipse-openj9/openj9/pull/10137#discussion_r456615284", "createdAt": "2020-07-17T18:46:20Z", "author": {"login": "tajila"}, "path": "test/functional/Valhalla/src/org/openj9/test/lworld/ValueTypeTests.java", "diffHunk": "@@ -1982,6 +1982,35 @@ static public void testDefaultValueInPointArray() throws Throwable {\n \t\t}\n \t}\n \n+\t/**\n+\t * Create multianewarray with Point Class without initialization.\n+\t * The array should be set ot a Default Value.\n+\t */\n+\t@Test(priority=4)\n+\tstatic public void testDefaultValueInPointInstanceMultiANewArray() throws Throwable {\n+\t\tObject pointArray = Array.newInstance(point2DClass, new int[]{genericArraySize, genericArraySize});\n+\t\tfor (int i = 0; i < genericArraySize; i++) {\n+\t\t\tfor (int j = 0; j < genericArraySize; j++) {\n+\t\t\t\tObject pointObject = Array.get(Array.get(pointArray,i),j);\n+\t\t\t\tassertNotNull(pointObject);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t@Test(priority=4)\n+\tstatic public void testDefaultValueInPointByteCodeMultiANewArray() throws Throwable {\n+\t\t/* Try down cast? ELSE: look at ASMifier */\n+\t\tMethodHandle makePointArray = lookup.findStatic(point2DClass, \"generate2DMultiANewArray\", MethodType.methodType(Object.class, int.class, int.class));\n+\t\tObject pointArray = makePoint2D.invoke(genericArraySize, genericArraySize);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86c2cb324d3db1d9cfcae5a39b36134875aa6069"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODM1NTY3OnYy", "diffSide": "RIGHT", "path": "test/functional/Valhalla/src/org/openj9/test/lworld/ValueTypeTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxODo0ODoyNVrOGzdpFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxODo0ODoyNVrOGzdpFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYxNjIxNQ==", "bodyText": "also you dont need to generate code for getters and setters, since Array.get will do the same thing", "url": "https://github.com/eclipse-openj9/openj9/pull/10137#discussion_r456616215", "createdAt": "2020-07-17T18:48:25Z", "author": {"login": "tajila"}, "path": "test/functional/Valhalla/src/org/openj9/test/lworld/ValueTypeTests.java", "diffHunk": "@@ -1982,6 +1982,35 @@ static public void testDefaultValueInPointArray() throws Throwable {\n \t\t}\n \t}\n \n+\t/**\n+\t * Create multianewarray with Point Class without initialization.\n+\t * The array should be set ot a Default Value.\n+\t */\n+\t@Test(priority=4)\n+\tstatic public void testDefaultValueInPointInstanceMultiANewArray() throws Throwable {\n+\t\tObject pointArray = Array.newInstance(point2DClass, new int[]{genericArraySize, genericArraySize});\n+\t\tfor (int i = 0; i < genericArraySize; i++) {\n+\t\t\tfor (int j = 0; j < genericArraySize; j++) {\n+\t\t\t\tObject pointObject = Array.get(Array.get(pointArray,i),j);\n+\t\t\t\tassertNotNull(pointObject);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t@Test(priority=4)\n+\tstatic public void testDefaultValueInPointByteCodeMultiANewArray() throws Throwable {\n+\t\t/* Try down cast? ELSE: look at ASMifier */\n+\t\tMethodHandle makePointArray = lookup.findStatic(point2DClass, \"generate2DMultiANewArray\", MethodType.methodType(Object.class, int.class, int.class));\n+\t\tObject pointArray = makePoint2D.invoke(genericArraySize, genericArraySize);\n+\t\tMethodHandle getPoint2D = lookup.findStatic(point2DClass, \"get2DMultiANewArray\", MethodType.methodType(Object.class, Object.class, int.class, int.class));\n+\t\t//for (int i = 0; i < genericArraySize; i++) {\n+\t\t\t//for (int j = 0; j < genericArraySize; j++) {\n+\t\t\t\tObject pointObject = getPoint2D.invoke(pointArray,1, 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86c2cb324d3db1d9cfcae5a39b36134875aa6069"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MDY1NDQyOnYy", "diffSide": "RIGHT", "path": "test/functional/Valhalla/src/org/openj9/test/lworld/ValueTypeGenerator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMzoxNzoxN1rOG5ikJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMzoxNzoxN1rOG5ikJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk4ODMyNw==", "bodyText": "nitpick: please rename to test2DMultiANewArray(cw, className); for consistency", "url": "https://github.com/eclipse-openj9/openj9/pull/10137#discussion_r462988327", "createdAt": "2020-07-30T13:17:17Z", "author": {"login": "tajila"}, "path": "test/functional/Valhalla/src/org/openj9/test/lworld/ValueTypeGenerator.java", "diffHunk": "@@ -116,6 +116,7 @@\n \t\t\t\tmakeGeneric(cw, className, \"makeValueGeneric\", \"makeValue\", makeValueSig, makeValueGenericSig, fields, makeMaxLocal, isRef);\n \t\t\t}\n \t\t}\n+\t\taddGenerate2DMultiANewArray(cw, className);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e9197a3c51f7892f39eff1205a2138cbd5e4864"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MDY3MDYwOnYy", "diffSide": "RIGHT", "path": "test/functional/Valhalla/src/org/openj9/test/lworld/ValueTypeGenerator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMzoyMToxM1rOG5it9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMzoyMToxM1rOG5it9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk5MDgzNg==", "bodyText": "you should also pass in isRef", "url": "https://github.com/eclipse-openj9/openj9/pull/10137#discussion_r462990836", "createdAt": "2020-07-30T13:21:13Z", "author": {"login": "tajila"}, "path": "test/functional/Valhalla/src/org/openj9/test/lworld/ValueTypeGenerator.java", "diffHunk": "@@ -925,4 +926,16 @@ public static void generateClassFile(String name, byte[] bytes) {\n \t\tbyte[] bytes = generateClass(name, fields, false, true);\n \t\treturn generator.defineClass(name, bytes, 0, bytes.length);\n \t}\n-}\n\\ No newline at end of file\n+\n+\tpublic static void addGenerate2DMultiANewArray(ClassWriter cw, String className) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e9197a3c51f7892f39eff1205a2138cbd5e4864"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MDY3MzE0OnYy", "diffSide": "RIGHT", "path": "test/functional/Valhalla/src/org/openj9/test/lworld/ValueTypeGenerator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMzoyMTo0OFrOG5iveA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMzoyMTo0OFrOG5iveA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk5MTIyNA==", "bodyText": "so it can be used here, so L is used for ref, and Q for values", "url": "https://github.com/eclipse-openj9/openj9/pull/10137#discussion_r462991224", "createdAt": "2020-07-30T13:21:48Z", "author": {"login": "tajila"}, "path": "test/functional/Valhalla/src/org/openj9/test/lworld/ValueTypeGenerator.java", "diffHunk": "@@ -925,4 +926,16 @@ public static void generateClassFile(String name, byte[] bytes) {\n \t\tbyte[] bytes = generateClass(name, fields, false, true);\n \t\treturn generator.defineClass(name, bytes, 0, bytes.length);\n \t}\n-}\n\\ No newline at end of file\n+\n+\tpublic static void addGenerate2DMultiANewArray(ClassWriter cw, String className) {\n+\t\tMethodVisitor mv = cw.visitMethod(ACC_PUBLIC + ACC_STATIC, \"generate2DMultiANewArray\", \"(II)Ljava/lang/Object;\", null, null);\n+\t\tmv.visitCode();\n+\t\tmv.visitVarInsn(ILOAD, 0);\n+\t\tmv.visitVarInsn(ILOAD, 1);\n+\t\tmv.visitMultiANewArrayInsn(\"[[\" + getSigFromSimpleName(className, false), 2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e9197a3c51f7892f39eff1205a2138cbd5e4864"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MDY4MzYzOnYy", "diffSide": "RIGHT", "path": "test/functional/Valhalla/src/org/openj9/test/lworld/ValueTypeGenerator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMzoyNDoxOFrOG5i15w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMzoyNDoxOFrOG5i15w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk5Mjg3MQ==", "bodyText": "same thing here with the name", "url": "https://github.com/eclipse-openj9/openj9/pull/10137#discussion_r462992871", "createdAt": "2020-07-30T13:24:18Z", "author": {"login": "tajila"}, "path": "test/functional/Valhalla/src/org/openj9/test/lworld/ValueTypeGenerator.java", "diffHunk": "@@ -925,4 +926,16 @@ public static void generateClassFile(String name, byte[] bytes) {\n \t\tbyte[] bytes = generateClass(name, fields, false, true);\n \t\treturn generator.defineClass(name, bytes, 0, bytes.length);\n \t}\n-}\n\\ No newline at end of file\n+\n+\tpublic static void addGenerate2DMultiANewArray(ClassWriter cw, String className) {\n+\t\tMethodVisitor mv = cw.visitMethod(ACC_PUBLIC + ACC_STATIC, \"generate2DMultiANewArray\", \"(II)Ljava/lang/Object;\", null, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e9197a3c51f7892f39eff1205a2138cbd5e4864"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MDcxMTc1OnYy", "diffSide": "RIGHT", "path": "test/functional/Valhalla/src/org/openj9/test/lworld/ValueTypeTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMzozMDo0N1rOG5jG4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMzozMDo0N1rOG5jG4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk5NzIxNg==", "bodyText": "for this test and the ones below, you can first do a loop write out each element with defaultLinePositions1 (look at checkFieldAccessMHOfAssortedType) and then do another loop to compare that it is correct with checkFieldAccessMHOfAssortedType. Look at testGCFlattenedValueArrayWithSingleAlignment for an example.", "url": "https://github.com/eclipse-openj9/openj9/pull/10137#discussion_r462997216", "createdAt": "2020-07-30T13:30:47Z", "author": {"login": "tajila"}, "path": "test/functional/Valhalla/src/org/openj9/test/lworld/ValueTypeTests.java", "diffHunk": "@@ -1997,6 +2029,42 @@ static public void testDefaultValueInLineArray() throws Throwable {\n \t\t}\n \t}\n \n+\t/**\n+\t * Create multi dimensional array with Line Class without initialization.\n+\t * Check the fields of each element in arrays. No field should be NULL.\n+\t */\n+\t@Test(priority=4)\n+\tstatic public void testDefaultValueInLineInstanceMultiANewArray() throws Throwable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e9197a3c51f7892f39eff1205a2138cbd5e4864"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MDUyODM1OnYy", "diffSide": "RIGHT", "path": "test/functional/Valhalla/src/org/openj9/test/lworld/ValueTypeTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMToxMzozMVrOHGp8ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMToxMzozMVrOHGp8ZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc0MDcwOA==", "bodyText": "@tajila This test concerns default values. Should I remove or modify it?", "url": "https://github.com/eclipse-openj9/openj9/pull/10137#discussion_r476740708", "createdAt": "2020-08-25T21:13:31Z", "author": {"login": "OussamaSaoudi"}, "path": "test/functional/Valhalla/src/org/openj9/test/lworld/ValueTypeTests.java", "diffHunk": "@@ -2099,6 +2293,38 @@ static public void testDefaultValueInAssortedRefWithLongAlignmentArray() throws\n \t\t}\n \t}\n \n+\n+\t/**\n+\t * Create an assortedRefWithLongAlignment multi dimensional array\n+\t * Since it's ref type, the array should be filled with nullptrs\n+\t */\n+\t@Test(priority=4)\n+\tstatic public void testDefaultValueInAssortedRefWithLongAlignmentInstanceMultiANewArray() throws Throwable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ebe452b66a653e39066dbc5ef1935b0d82ea663"}, "originalPosition": 232}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDAzNDQ5OnYy", "diffSide": "RIGHT", "path": "test/functional/Valhalla/playlist.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODowNTowMFrOHRguYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODowNTowMFrOHRguYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEyNDAwMA==", "bodyText": "This isn't what I meant. You can disable the specific tests that fail. Look for @Test(enabled = false, priority=5) in the tests", "url": "https://github.com/eclipse-openj9/openj9/pull/10137#discussion_r488124000", "createdAt": "2020-09-14T18:05:00Z", "author": {"login": "tajila"}, "path": "test/functional/Valhalla/playlist.xml", "diffHunk": "@@ -26,8 +26,11 @@\n \t\t<testCaseName>ValueTypeTests</testCaseName>\n \t\t<variations>\n \t\t\t<variation>NoOptions</variation>\n-\t\t\t<variation>-Xgcpolicy:nogc -XX:ValueTypeFlatteningThreshold=99999 -XX:+EnableArrayFlattening</variation>\n-\t\t\t<variation>-Xgcpolicy:optthruput -Xnocompactgc -XX:ValueTypeFlatteningThreshold=99999 -XX:+EnableArrayFlattening</variation>\n+\t\t\t<!--", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "441d6b50ff718bff052cfc6d61d23008fd2b23be"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NTMwNjUzOnYy", "diffSide": "RIGHT", "path": "runtime/vm/classsupport.c", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMDo0ODoyM1rOHRseTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMzo0MzozNFrOHSCkJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMxNjQ5NA==", "bodyText": "one more thing, we need a #ifdef VT here. Define a macro like this in j9.h (youll see the other VT macros)\n#ifdef VT\n#define IS_REFERENCE_SIGNATURE(firstChar) ('L' == (firstChar))\n#else\n#define IS_REFERENCE_SIGNATURE(firstChar) ('L' == (firstChar) || 'Q' == (firstChar))\n#endif", "url": "https://github.com/eclipse-openj9/openj9/pull/10137#discussion_r488316494", "createdAt": "2020-09-15T00:48:23Z", "author": {"login": "tajila"}, "path": "runtime/vm/classsupport.c", "diffHunk": "@@ -108,7 +108,7 @@ internalFindArrayClass(J9VMThread* vmThread, J9Module *j9module, UDATA arity, U_\n \t\t/* the first level of arity is already present in the array class */\n \t\tarity -= 1;\n \n-\t} else if (firstChar == 'L' && lastChar == ';') {\n+\t} else if ((firstChar == 'L' || firstChar == 'Q') && lastChar == ';') {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bd1aec74d78c363d1a33beb904dab87bd513368"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY3ODQzNw==", "bodyText": "perhaps a better name is IS_REF_OR_VAL_SIGNATURE", "url": "https://github.com/eclipse-openj9/openj9/pull/10137#discussion_r488678437", "createdAt": "2020-09-15T13:43:34Z", "author": {"login": "tajila"}, "path": "runtime/vm/classsupport.c", "diffHunk": "@@ -108,7 +108,7 @@ internalFindArrayClass(J9VMThread* vmThread, J9Module *j9module, UDATA arity, U_\n \t\t/* the first level of arity is already present in the array class */\n \t\tarity -= 1;\n \n-\t} else if (firstChar == 'L' && lastChar == ';') {\n+\t} else if ((firstChar == 'L' || firstChar == 'Q') && lastChar == ';') {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMxNjQ5NA=="}, "originalCommit": {"oid": "8bd1aec74d78c363d1a33beb904dab87bd513368"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4933, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}