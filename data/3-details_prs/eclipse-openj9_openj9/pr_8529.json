{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyNTk0NTgw", "number": 8529, "title": "Disable Power arraycopy inlining for very long lengths", "bodyText": "As it turns out, the code for performing an arraycopy inline on Power is\ncurrently broken for certain very long byte lengths. While this usually\ndoesn't matter, since the maximum length is bounded by the fact that\nJava uses ints to represent array indices, it's possible for the\noptimizer to create arraycopy nodes with very long lengths on\nunreachable paths.\nAs part of the ongoing refactor of the Power binary encoder, a number of\nnew asserts are being added that catch any out of range immediates.\nThese asserts trigger on code generated for such arraycopy nodes even\nthough they're unreachable, since the code generated is nonsense.\nThis has been corrected by completely disabling arraycopy inlining on\nPower for arraycopy nodes with lengths that do not fit in a 32-bit\ninteger.\nSigned-off-by: Ben Thomas ben@benthomas.ca", "createdAt": "2020-02-07T20:48:50Z", "url": "https://github.com/eclipse-openj9/openj9/pull/8529", "merged": true, "mergeCommit": {"oid": "7b20e2830b9822e5a41d46c549338fecd7e761c3"}, "closed": true, "closedAt": "2020-03-13T20:42:49Z", "author": {"login": "aviansie-ben"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcCFrQNAFqTM1NTQyODc0NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcMr6zNgFqTM3MzA0NDQxMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1NDI4NzQ0", "url": "https://github.com/eclipse-openj9/openj9/pull/8529#pullrequestreview-355428744", "createdAt": "2020-02-07T20:50:39Z", "commit": {"oid": "c88b6b596185a416408f65bd82d52672cb7885a2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMDo1MDozOVrOFnJ6rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMDo1MDozOVrOFnJ6rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYwMTI2MA==", "bodyText": "Is it worth adding a small comment why the upper range check is needed? Also will we handle the non-const case correctly?", "url": "https://github.com/eclipse-openj9/openj9/pull/8529#discussion_r376601260", "createdAt": "2020-02-07T20:50:39Z", "author": {"login": "fjeremic"}, "path": "runtime/compiler/p/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -13611,7 +13611,7 @@ TR::Register *J9::Power::TreeEvaluator::arraycopyEvaluator(TR::Node *node, TR::C\n    if (node->isForwardArrayCopy() && lengthNode->getOpCode().isLoadConst())\n       {\n       len = (lengthNode->getType().isInt32() ? lengthNode->getInt() : lengthNode->getLongInt());\n-      if (len >= 0)\n+      if (len >= 0 && len < 0x100000000LL)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c88b6b596185a416408f65bd82d52672cb7885a2"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6669a51adbd7ed48a5cb3ad681b52368855aa7af", "author": {"user": {"login": "aviansie-ben", "name": "Ben Thomas (Aviansie Ben)"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/6669a51adbd7ed48a5cb3ad681b52368855aa7af", "committedDate": "2020-02-08T03:58:50Z", "message": "Disable Power arraycopy inlining for very long lengths\n\nAs it turns out, the code for performing an arraycopy inline on Power is\ncurrently broken for certain very long byte lengths. While this usually\ndoesn't matter, since the maximum length is bounded by the fact that\nJava uses ints to represent array indices, it's possible for the\noptimizer to create arraycopy nodes with very long lengths on\nunreachable paths.\n\nAs part of the ongoing refactor of the Power binary encoder, a number of\nnew asserts are being added that catch any out of range immediates.\nThese asserts trigger on code generated for such arraycopy nodes even\nthough they're unreachable, since the code generated is nonsense.\n\nThis has been corrected by completely disabling arraycopy inlining on\nPower for arraycopy nodes with lengths that do not fit in a 32-bit\ninteger.\n\nSigned-off-by: Ben Thomas <ben@benthomas.ca>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c88b6b596185a416408f65bd82d52672cb7885a2", "author": {"user": {"login": "aviansie-ben", "name": "Ben Thomas (Aviansie Ben)"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/c88b6b596185a416408f65bd82d52672cb7885a2", "committedDate": "2020-02-07T20:47:25Z", "message": "Disable Power arraycopy inlining for very long lengths\n\nAs it turns out, the code for performing an arraycopy inline on Power is\ncurrently broken for certain very long byte lengths. While this usually\ndoesn't matter, since the maximum length is bounded by the fact that\nJava uses ints to represent array indices, it's possible for the\noptimizer to create arraycopy nodes with very long lengths on\nunreachable paths.\n\nAs part of the ongoing refactor of the Power binary encoder, a number of\nnew asserts are being added that catch any out of range immediates.\nThese asserts trigger on code generated for such arraycopy nodes even\nthough they're unreachable, since the code generated is nonsense.\n\nThis has been corrected by completely disabling arraycopy inlining on\nPower for arraycopy nodes with lengths that do not fit in a 32-bit\ninteger.\n\nSigned-off-by: Ben Thomas <ben@benthomas.ca>"}, "afterCommit": {"oid": "6669a51adbd7ed48a5cb3ad681b52368855aa7af", "author": {"user": {"login": "aviansie-ben", "name": "Ben Thomas (Aviansie Ben)"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/6669a51adbd7ed48a5cb3ad681b52368855aa7af", "committedDate": "2020-02-08T03:58:50Z", "message": "Disable Power arraycopy inlining for very long lengths\n\nAs it turns out, the code for performing an arraycopy inline on Power is\ncurrently broken for certain very long byte lengths. While this usually\ndoesn't matter, since the maximum length is bounded by the fact that\nJava uses ints to represent array indices, it's possible for the\noptimizer to create arraycopy nodes with very long lengths on\nunreachable paths.\n\nAs part of the ongoing refactor of the Power binary encoder, a number of\nnew asserts are being added that catch any out of range immediates.\nThese asserts trigger on code generated for such arraycopy nodes even\nthough they're unreachable, since the code generated is nonsense.\n\nThis has been corrected by completely disabling arraycopy inlining on\nPower for arraycopy nodes with lengths that do not fit in a 32-bit\ninteger.\n\nSigned-off-by: Ben Thomas <ben@benthomas.ca>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2MDI3MDY3", "url": "https://github.com/eclipse-openj9/openj9/pull/8529#pullrequestreview-356027067", "createdAt": "2020-02-10T15:26:40Z", "commit": {"oid": "6669a51adbd7ed48a5cb3ad681b52368855aa7af"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7afcfa6a3d8de5e757a6c27b3118f983dcf80c5", "author": {"user": {"login": "aviansie-ben", "name": "Ben Thomas (Aviansie Ben)"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/d7afcfa6a3d8de5e757a6c27b3118f983dcf80c5", "committedDate": "2020-02-11T21:32:59Z", "message": "Disable Power arraycopy inlining for all long lengths\n\nPreviously, the arraycopy inlining on Power was disabled for lengths\nexceeding 256 bytes, but only in OMR's evaluator for 3-child arraycopy\nnodes. However, as it turns out, our current inlining is suboptimal for\nlong lengths. To improve performance, this maximum length has now been\napplied to the OpenJ9 ICF version of arraycopy inlining for 5-child\narraycopy nodes as well.\n\nSigned-off-by: Ben Thomas <ben@benthomas.ca>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczMDQ0NDEx", "url": "https://github.com/eclipse-openj9/openj9/pull/8529#pullrequestreview-373044411", "createdAt": "2020-03-11T19:03:19Z", "commit": {"oid": "d7afcfa6a3d8de5e757a6c27b3118f983dcf80c5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 778, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}