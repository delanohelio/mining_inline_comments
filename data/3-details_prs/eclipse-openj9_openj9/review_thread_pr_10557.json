{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgzMzkxNTUx", "number": 10557, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMzowMDoxOVrOEiGo3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNTo1NTo0NFrOEv2_Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MTk1ODA1OnYy", "diffSide": "RIGHT", "path": "runtime/bcutil/ClassFileOracle.cpp", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMzowMDoxOVrOHPyYIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMzowMzo0NVrOHko3bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjMxNjA2NQ==", "bodyText": "There's a very similar method in ConstantPoolMap that determines if a cpEntry is for a VarHandle method.  Is it possible to reuse the existing method - ConstantPoolMap::isVarHandleMethod - or share the list between the two methods?\nDuplicating these kinds of lists leads to one getting out of sync.\nIf the long term goal is to remove the other list, then adding comments to both lists referencing the other would help with short term maintenance.", "url": "https://github.com/eclipse-openj9/openj9/pull/10557#discussion_r486316065", "createdAt": "2020-09-10T13:00:19Z", "author": {"login": "DanHeidinga"}, "path": "runtime/bcutil/ClassFileOracle.cpp", "diffHunk": "@@ -2375,6 +2375,112 @@ ClassFileOracle::methodIsNonStaticNonAbstract(U_16 methodIndex)\n \treturn J9_ARE_NO_BITS_SET(_classFile->methods[methodIndex].accessFlags, (CFR_ACC_STATIC | CFR_ACC_ABSTRACT));\n }\n \n+#if defined(J9VM_OPT_OPENJDK_METHODHANDLE)\n+/**\n+ * Determine if the method name corresponds to a VarHandle method with polymorphic\n+ * signature.\n+ *\n+ * @param methodName the constant pool info for the method name\n+ *\n+ * @return true for a VarHandle method with polymorphic signature. Otherwise,\n+ * return false.\n+ */\n+bool\n+ClassFileOracle::isPolymorphicVarHandleMethod(J9CfrConstantPoolInfo *methodName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b0e5e68d29de929475e9fea75e16bf085fa9146"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUyNjQ3Ng==", "bodyText": "I did notice another usage of that list here: https://github.com/eclipse/openj9/blob/adda8032110a449a8c96bb1901c0996900555697/runtime/vm/initsendtarget.cpp#L34-L148\nI was planning to share the list among all three methods. This change should reflect in this PR soon.", "url": "https://github.com/eclipse-openj9/openj9/pull/10557#discussion_r486526476", "createdAt": "2020-09-10T17:50:56Z", "author": {"login": "babsingh"}, "path": "runtime/bcutil/ClassFileOracle.cpp", "diffHunk": "@@ -2375,6 +2375,112 @@ ClassFileOracle::methodIsNonStaticNonAbstract(U_16 methodIndex)\n \treturn J9_ARE_NO_BITS_SET(_classFile->methods[methodIndex].accessFlags, (CFR_ACC_STATIC | CFR_ACC_ABSTRACT));\n }\n \n+#if defined(J9VM_OPT_OPENJDK_METHODHANDLE)\n+/**\n+ * Determine if the method name corresponds to a VarHandle method with polymorphic\n+ * signature.\n+ *\n+ * @param methodName the constant pool info for the method name\n+ *\n+ * @return true for a VarHandle method with polymorphic signature. Otherwise,\n+ * return false.\n+ */\n+bool\n+ClassFileOracle::isPolymorphicVarHandleMethod(J9CfrConstantPoolInfo *methodName)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjMxNjA2NQ=="}, "originalCommit": {"oid": "1b0e5e68d29de929475e9fea75e16bf085fa9146"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE4MDMzNA==", "bodyText": "I was only able to share code between\n[1] ConstantPoolMap::isVarHandleMethod and\n[2] ClassFileOracle::isPolymorphicVarHandleMethod.\n[3] initsendtarget.cpp::initializeMethodRunAddressVarHandle targets a different class (VarHandleInternal) and methods (with suffix _impl).", "url": "https://github.com/eclipse-openj9/openj9/pull/10557#discussion_r508180334", "createdAt": "2020-10-20T03:03:45Z", "author": {"login": "babsingh"}, "path": "runtime/bcutil/ClassFileOracle.cpp", "diffHunk": "@@ -2375,6 +2375,112 @@ ClassFileOracle::methodIsNonStaticNonAbstract(U_16 methodIndex)\n \treturn J9_ARE_NO_BITS_SET(_classFile->methods[methodIndex].accessFlags, (CFR_ACC_STATIC | CFR_ACC_ABSTRACT));\n }\n \n+#if defined(J9VM_OPT_OPENJDK_METHODHANDLE)\n+/**\n+ * Determine if the method name corresponds to a VarHandle method with polymorphic\n+ * signature.\n+ *\n+ * @param methodName the constant pool info for the method name\n+ *\n+ * @return true for a VarHandle method with polymorphic signature. Otherwise,\n+ * return false.\n+ */\n+bool\n+ClassFileOracle::isPolymorphicVarHandleMethod(J9CfrConstantPoolInfo *methodName)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjMxNjA2NQ=="}, "originalCommit": {"oid": "1b0e5e68d29de929475e9fea75e16bf085fa9146"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NjE1NDMyOnYy", "diffSide": "RIGHT", "path": "runtime/bcutil/ConstantPoolMap.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNTo1MDowNlrOHlEsBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNTo1MDowNlrOHlEsBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODYzNjE2NA==", "bodyText": "Don't change this =)  The change isn't required and the original formatting kept the if and its conditions lined up with the opening brace.  Easier to track with your eye then indenting.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t|| (J9CPTYPE_INTERFACE_INSTANCE_METHOD == _romConstantPoolTypes[i])\n          \n          \n            \n            \t\t|| (J9CPTYPE_INTERFACE_INSTANCE_METHOD == _romConstantPoolTypes[i])", "url": "https://github.com/eclipse-openj9/openj9/pull/10557#discussion_r508636164", "createdAt": "2020-10-20T15:50:06Z", "author": {"login": "DanHeidinga"}, "path": "runtime/bcutil/ConstantPoolMap.cpp", "diffHunk": "@@ -439,23 +327,34 @@ ConstantPoolMap::findVarHandleMethodRefs()\n \n \tfor (U_16 i = 1; i < _romConstantPoolCount; i++) {\n \t\tif ((J9CPTYPE_INSTANCE_METHOD == _romConstantPoolTypes[i])\n-\t\t|| (J9CPTYPE_INTERFACE_INSTANCE_METHOD == _romConstantPoolTypes[i])\n+\t\t\t|| (J9CPTYPE_INTERFACE_INSTANCE_METHOD == _romConstantPoolTypes[i])", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "779fbe4c2ed7034abcda7e80e6626c816e36925f"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NjE3NDYyOnYy", "diffSide": "RIGHT", "path": "runtime/bcutil/ConstantPoolMap.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNTo1Mjo1N1rOHlE49Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNTo1Mjo1N1rOHlE49Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODYzOTQ3Nw==", "bodyText": "This can be moved into the if ((sizeof(VARHANDLE_CLASS_NAME) - 1) == classNameLength) { block - always aim for the shortest lifetime for variables as possible as it makes reasoning about the code simpler", "url": "https://github.com/eclipse-openj9/openj9/pull/10557#discussion_r508639477", "createdAt": "2020-10-20T15:52:57Z", "author": {"login": "DanHeidinga"}, "path": "runtime/bcutil/ConstantPoolMap.cpp", "diffHunk": "@@ -439,23 +327,34 @@ ConstantPoolMap::findVarHandleMethodRefs()\n \n \tfor (U_16 i = 1; i < _romConstantPoolCount; i++) {\n \t\tif ((J9CPTYPE_INSTANCE_METHOD == _romConstantPoolTypes[i])\n-\t\t|| (J9CPTYPE_INTERFACE_INSTANCE_METHOD == _romConstantPoolTypes[i])\n+\t\t\t|| (J9CPTYPE_INTERFACE_INSTANCE_METHOD == _romConstantPoolTypes[i])\n \t\t) {\n \t\t\tU_16 cfrCPIndex = _romConstantPoolEntries[i];\n-\t\t\tU_32 slot1 = getCPSlot1(cfrCPIndex);\n-\t\t\tU_32 slot2 = getCPSlot2(cfrCPIndex);\n-\n-\t\t\tif (isVarHandleMethod(slot1, slot2)) {\n-\t\t\t\tif (NULL == varHandleMethodTable) {\n-\t\t\t\t\t/* Allocate a temporary array for storing indices of VarHandle methodrefs */\n-\t\t\t\t\tvarHandleMethodTable = (U_16*) j9mem_allocate_memory(_romConstantPoolCount * sizeof(U_16), OMRMEM_CATEGORY_VM);\n-\t\t\t\t\tif (NULL == varHandleMethodTable) {\n-\t\t\t\t\t\t_buildResult = OutOfMemory;\n-\t\t\t\t\t\tbreak;\n+\t\t\tU_32 classIndex = getCPSlot1(cfrCPIndex);\n+\t\t\tU_32 nasIndex = getCPSlot2(cfrCPIndex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "779fbe4c2ed7034abcda7e80e6626c816e36925f"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NjE5NDU5OnYy", "diffSide": "RIGHT", "path": "runtime/oti/VMHelpers.hpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNTo1NTo0NFrOHlFGMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNTo1NTo0NFrOHlFGMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY0Mjg2Ng==", "bodyText": "I strongly prefer this formatting but won't make you change it in new code.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tif ((0 == memcmp(methodNameData, \"get\", methodNameLength))\n          \n          \n            \n            \t\t\t\t|| (0 == memcmp(methodNameData, \"set\", methodNameLength))\n          \n          \n            \n            \t\t\t) {\n          \n          \n            \n            \t\t\tif ((0 == memcmp(methodNameData, \"get\", methodNameLength))\n          \n          \n            \n            \t\t\t|| (0 == memcmp(methodNameData, \"set\", methodNameLength))\n          \n          \n            \n            \t\t\t) {", "url": "https://github.com/eclipse-openj9/openj9/pull/10557#discussion_r508642866", "createdAt": "2020-10-20T15:55:44Z", "author": {"login": "DanHeidinga"}, "path": "runtime/oti/VMHelpers.hpp", "diffHunk": "@@ -1728,6 +1729,120 @@ class VM_VMHelpers\n \t\treturn rc;\n \t}\n \n+\t/**\n+\t * Determine if the method name corresponds to a VarHandle method with polymorphic\n+\t * signature.\n+\t *\n+\t * @param methodNameData the bytes of the method name\n+\t * @param methodNameLength the length of the method name\n+\t *\n+\t * @return true for a VarHandle method with polymorphic signature. Otherwise,\n+\t * return false.\n+\t */\n+\tstatic VMINLINE bool\n+\tisPolymorphicVarHandleMethod(const U_8 *methodNameData, U_32 methodNameLength)\n+\t{\n+\t\tbool result = false;\n+\n+\t\tswitch (methodNameLength) {\n+\t\tcase 3:\n+\t\t\tif ((0 == memcmp(methodNameData, \"get\", methodNameLength))\n+\t\t\t\t|| (0 == memcmp(methodNameData, \"set\", methodNameLength))\n+\t\t\t) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "779fbe4c2ed7034abcda7e80e6626c816e36925f"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4594, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}