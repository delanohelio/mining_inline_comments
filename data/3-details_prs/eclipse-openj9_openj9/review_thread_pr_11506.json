{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxOTgzMTg2", "number": 11506, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xOVQyMjoxMjoyN1rOFcijmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMFQwMDoyNjowNVrOFckYbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY1NDcwNjE4OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/control/JITServerCompilationThread.cpp", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xOVQyMjoxMjoyN1rOIoqOKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yM1QwMDo1NjoyMVrOIpzEGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTUwNTcwNQ==", "bodyText": "Don' we have to dereference the iterator: *it ?", "url": "https://github.com/eclipse-openj9/openj9/pull/11506#discussion_r579505705", "createdAt": "2021-02-19T22:12:27Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/control/JITServerCompilationThread.cpp", "diffHunk": "@@ -148,13 +148,25 @@ outOfProcessCompilationEnd(\n \n    JITServer::ServerMemoryState memoryState = computeServerMemoryState(compInfoPT->getCompilationInfo());\n \n+   // Send methods requring resolved trampolines in this compilation to the client\n+   std::vector<TR_OpaqueMethodBlock *> methodsRequiringTrampolines;\n+   if (comp->getMethodsRequiringTrampolines().size() > 0)\n+      {\n+      methodsRequiringTrampolines.reserve(comp->getMethodsRequiringTrampolines().size());\n+      for (auto it : comp->getMethodsRequiringTrampolines())\n+         {\n+         methodsRequiringTrampolines.push_back(it);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9de844db539e7fa8208dd727cf8c458af9f98f26"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDM4MTM4Nw==", "bodyText": "No we don't, because we don't explicitly use an iterator here, but we use a range-based for loop, which gives us elements of the vector directly.\nThe same method is used to iterate over SerializedRuntimeAssumption vector just a few lines above, so I used it here as well.", "url": "https://github.com/eclipse-openj9/openj9/pull/11506#discussion_r580381387", "createdAt": "2021-02-22T16:16:12Z", "author": {"login": "dmitry-ten"}, "path": "runtime/compiler/control/JITServerCompilationThread.cpp", "diffHunk": "@@ -148,13 +148,25 @@ outOfProcessCompilationEnd(\n \n    JITServer::ServerMemoryState memoryState = computeServerMemoryState(compInfoPT->getCompilationInfo());\n \n+   // Send methods requring resolved trampolines in this compilation to the client\n+   std::vector<TR_OpaqueMethodBlock *> methodsRequiringTrampolines;\n+   if (comp->getMethodsRequiringTrampolines().size() > 0)\n+      {\n+      methodsRequiringTrampolines.reserve(comp->getMethodsRequiringTrampolines().size());\n+      for (auto it : comp->getMethodsRequiringTrampolines())\n+         {\n+         methodsRequiringTrampolines.push_back(it);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTUwNTcwNQ=="}, "originalCommit": {"oid": "9de844db539e7fa8208dd727cf8c458af9f98f26"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDQyMDIxOA==", "bodyText": "Could you please double check? In the SerializedRuntimeAssumption code we push_back(*it).", "url": "https://github.com/eclipse-openj9/openj9/pull/11506#discussion_r580420218", "createdAt": "2021-02-22T17:03:45Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/control/JITServerCompilationThread.cpp", "diffHunk": "@@ -148,13 +148,25 @@ outOfProcessCompilationEnd(\n \n    JITServer::ServerMemoryState memoryState = computeServerMemoryState(compInfoPT->getCompilationInfo());\n \n+   // Send methods requring resolved trampolines in this compilation to the client\n+   std::vector<TR_OpaqueMethodBlock *> methodsRequiringTrampolines;\n+   if (comp->getMethodsRequiringTrampolines().size() > 0)\n+      {\n+      methodsRequiringTrampolines.reserve(comp->getMethodsRequiringTrampolines().size());\n+      for (auto it : comp->getMethodsRequiringTrampolines())\n+         {\n+         methodsRequiringTrampolines.push_back(it);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTUwNTcwNQ=="}, "originalCommit": {"oid": "9de844db539e7fa8208dd727cf8c458af9f98f26"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDQyNDg3NA==", "bodyText": "We dereference SerializedRuntimeAssumption because getSerializedRuntimeAssumptions returns TR::list<SerializedRuntimeAssumption *>, but the vector we send to the client is std::vector<SerializedRuntimeAssumption> so in this case dereference is the actual dereference, not iterator dereference.", "url": "https://github.com/eclipse-openj9/openj9/pull/11506#discussion_r580424874", "createdAt": "2021-02-22T17:09:49Z", "author": {"login": "dmitry-ten"}, "path": "runtime/compiler/control/JITServerCompilationThread.cpp", "diffHunk": "@@ -148,13 +148,25 @@ outOfProcessCompilationEnd(\n \n    JITServer::ServerMemoryState memoryState = computeServerMemoryState(compInfoPT->getCompilationInfo());\n \n+   // Send methods requring resolved trampolines in this compilation to the client\n+   std::vector<TR_OpaqueMethodBlock *> methodsRequiringTrampolines;\n+   if (comp->getMethodsRequiringTrampolines().size() > 0)\n+      {\n+      methodsRequiringTrampolines.reserve(comp->getMethodsRequiringTrampolines().size());\n+      for (auto it : comp->getMethodsRequiringTrampolines())\n+         {\n+         methodsRequiringTrampolines.push_back(it);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTUwNTcwNQ=="}, "originalCommit": {"oid": "9de844db539e7fa8208dd727cf8c458af9f98f26"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDY5OTE2MA==", "bodyText": "ok", "url": "https://github.com/eclipse-openj9/openj9/pull/11506#discussion_r580699160", "createdAt": "2021-02-23T00:56:21Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/control/JITServerCompilationThread.cpp", "diffHunk": "@@ -148,13 +148,25 @@ outOfProcessCompilationEnd(\n \n    JITServer::ServerMemoryState memoryState = computeServerMemoryState(compInfoPT->getCompilationInfo());\n \n+   // Send methods requring resolved trampolines in this compilation to the client\n+   std::vector<TR_OpaqueMethodBlock *> methodsRequiringTrampolines;\n+   if (comp->getMethodsRequiringTrampolines().size() > 0)\n+      {\n+      methodsRequiringTrampolines.reserve(comp->getMethodsRequiringTrampolines().size());\n+      for (auto it : comp->getMethodsRequiringTrampolines())\n+         {\n+         methodsRequiringTrampolines.push_back(it);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTUwNTcwNQ=="}, "originalCommit": {"oid": "9de844db539e7fa8208dd727cf8c458af9f98f26"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY1NTAwNTI0OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/control/JITClientCompilationThread.cpp", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMFQwMDoyNjowNVrOIos_2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yM1QwMDo1NTo1NlrOIpzDhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTU1MTE5NA==", "bodyText": "The generate code and the trampoline reservations need to stay in the same code cache. If we cannot reserve a trampoline here we need to take some corrective action, possibly leading to failing the compilation.\nif you look at how we reserve trampolines in the non-jitserver case you'll see it's quite complicated.", "url": "https://github.com/eclipse-openj9/openj9/pull/11506#discussion_r579551194", "createdAt": "2021-02-20T00:26:05Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/control/JITClientCompilationThread.cpp", "diffHunk": "@@ -3269,6 +3275,11 @@ remoteCompile(\n                   } // end switch (it->getKind())\n                }\n             metaData->runtimeAssumptionList = *(compiler->getMetadataAssumptionList());\n+\n+            for (auto& it : methodsRequiringTrampolines)\n+               {\n+               compInfoPT->reloRuntime()->codeCache()->reserveResolvedTrampoline(it, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9de844db539e7fa8208dd727cf8c458af9f98f26"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDQxOTUwNg==", "bodyText": "I see that in TR_J9VMBase::getResolvedTrampoline failing to allocate a trampoline always results in failing the compilation when we are in binary encoding. If I understand correctly, it's because we start populating the code cache in the binary encoding phase, so we can't just start using a new cache at that point and have to fail a compilation.\nI think for JITServer it would be reasonable to fail with TR::RecoverableTrampolineError if reserveResolvedTrampoline returns an error code because by that point we already received the code cache from the server so we can't just create a new one.", "url": "https://github.com/eclipse-openj9/openj9/pull/11506#discussion_r580419506", "createdAt": "2021-02-22T17:03:00Z", "author": {"login": "dmitry-ten"}, "path": "runtime/compiler/control/JITClientCompilationThread.cpp", "diffHunk": "@@ -3269,6 +3275,11 @@ remoteCompile(\n                   } // end switch (it->getKind())\n                }\n             metaData->runtimeAssumptionList = *(compiler->getMetadataAssumptionList());\n+\n+            for (auto& it : methodsRequiringTrampolines)\n+               {\n+               compInfoPT->reloRuntime()->codeCache()->reserveResolvedTrampoline(it, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTU1MTE5NA=="}, "originalCommit": {"oid": "9de844db539e7fa8208dd727cf8c458af9f98f26"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDY5OTAxMw==", "bodyText": "ok", "url": "https://github.com/eclipse-openj9/openj9/pull/11506#discussion_r580699013", "createdAt": "2021-02-23T00:55:56Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/control/JITClientCompilationThread.cpp", "diffHunk": "@@ -3269,6 +3275,11 @@ remoteCompile(\n                   } // end switch (it->getKind())\n                }\n             metaData->runtimeAssumptionList = *(compiler->getMetadataAssumptionList());\n+\n+            for (auto& it : methodsRequiringTrampolines)\n+               {\n+               compInfoPT->reloRuntime()->codeCache()->reserveResolvedTrampoline(it, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTU1MTE5NA=="}, "originalCommit": {"oid": "9de844db539e7fa8208dd727cf8c458af9f98f26"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 885, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}