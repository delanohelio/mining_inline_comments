{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4MjE0MTgx", "number": 9107, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNjoxOToyN1rODyk-TA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNjo1MzoxNVrODylytw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MzYxMTY0OnYy", "diffSide": "RIGHT", "path": "buildenv/jenkins/common/variables-functions.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNjoxOToyN1rOGGtIMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNjoxOToyN1rOGGtIMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY4NDAxNg==", "bodyText": "excludedTestsArray is not required since it contains excludedTests  collection only and is used only in this block.", "url": "https://github.com/eclipse-openj9/openj9/pull/9107#discussion_r409684016", "createdAt": "2020-04-16T16:19:27Z", "author": {"login": "vsebe"}, "path": "buildenv/jenkins/common/variables-functions.groovy", "diffHunk": "@@ -664,39 +671,45 @@ def set_test_targets() {\n * Set EXTRA_TEST_LABELS map if defined in variable file.\n */\n def set_test_misc() {\n-    EXTRA_TEST_LABELS = [:]\n     if (!params.TEST_NODE) {\n         // Only add extra test labels if the user has not specified a specific TEST_NODE\n-        TARGET_NAMES.each { target ->\n-            EXTRA_TEST_LABELS[target] = buildspec.getVectorField(\"extra_test_labels\", target).join('&&') ?: ''\n+        TESTS.each { id, target ->\n+            target['extraTestLabels'] = buildspec.getVectorField(\"extra_test_labels\", target).join('&&') ?: ''\n         }\n     }\n \n-    EXCLUDED_TESTS = []\n     def buildspec = buildspec_manager.getSpec(SPEC)\n     def excludedTests = buildspec.getVectorField(\"excluded_tests\", SDK_VERSION)\n     if (excludedTests) {\n-        EXCLUDED_TESTS.addAll(excludedTests)\n+        excludedTestsArray = []", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afcdcf2ddb42ff3a9edf023ceb1466b9ea440e0a"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MzYxNDQyOnYy", "diffSide": "RIGHT", "path": "buildenv/jenkins/common/variables-functions.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNjoyMDowNVrOGGtJ5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNjoyMDowNVrOGGtJ5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY4NDQ1Mg==", "bodyText": "use excludedTests", "url": "https://github.com/eclipse-openj9/openj9/pull/9107#discussion_r409684452", "createdAt": "2020-04-16T16:20:05Z", "author": {"login": "vsebe"}, "path": "buildenv/jenkins/common/variables-functions.groovy", "diffHunk": "@@ -664,39 +671,45 @@ def set_test_targets() {\n * Set EXTRA_TEST_LABELS map if defined in variable file.\n */\n def set_test_misc() {\n-    EXTRA_TEST_LABELS = [:]\n     if (!params.TEST_NODE) {\n         // Only add extra test labels if the user has not specified a specific TEST_NODE\n-        TARGET_NAMES.each { target ->\n-            EXTRA_TEST_LABELS[target] = buildspec.getVectorField(\"extra_test_labels\", target).join('&&') ?: ''\n+        TESTS.each { id, target ->\n+            target['extraTestLabels'] = buildspec.getVectorField(\"extra_test_labels\", target).join('&&') ?: ''\n         }\n     }\n \n-    EXCLUDED_TESTS = []\n     def buildspec = buildspec_manager.getSpec(SPEC)\n     def excludedTests = buildspec.getVectorField(\"excluded_tests\", SDK_VERSION)\n     if (excludedTests) {\n-        EXCLUDED_TESTS.addAll(excludedTests)\n+        excludedTestsArray = []\n+        excludedTestsArray.addAll(excludedTests)\n+        TESTS.each { id, target ->\n+            if (excludedTestsArray.contains(id)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afcdcf2ddb42ff3a9edf023ceb1466b9ea440e0a"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MzcyOTcyOnYy", "diffSide": "RIGHT", "path": "buildenv/jenkins/common/variables-functions.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNjo0OTowM1rOGGuT_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNjo0OTowM1rOGGuT_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTcwMzQyMQ==", "bodyText": "Please rework this if statement:\nif (!target['testFlag']) {\n    target['testFlag'] = flag\n} else if (flag) {\n    error(\"Cannot set more than 1 TEST_FLAG\")\n}", "url": "https://github.com/eclipse-openj9/openj9/pull/9107#discussion_r409703421", "createdAt": "2020-04-16T16:49:03Z", "author": {"login": "vsebe"}, "path": "buildenv/jenkins/common/variables-functions.groovy", "diffHunk": "@@ -664,39 +671,45 @@ def set_test_targets() {\n * Set EXTRA_TEST_LABELS map if defined in variable file.\n */\n def set_test_misc() {\n-    EXTRA_TEST_LABELS = [:]\n     if (!params.TEST_NODE) {\n         // Only add extra test labels if the user has not specified a specific TEST_NODE\n-        TARGET_NAMES.each { target ->\n-            EXTRA_TEST_LABELS[target] = buildspec.getVectorField(\"extra_test_labels\", target).join('&&') ?: ''\n+        TESTS.each { id, target ->\n+            target['extraTestLabels'] = buildspec.getVectorField(\"extra_test_labels\", target).join('&&') ?: ''\n         }\n     }\n \n-    EXCLUDED_TESTS = []\n     def buildspec = buildspec_manager.getSpec(SPEC)\n     def excludedTests = buildspec.getVectorField(\"excluded_tests\", SDK_VERSION)\n     if (excludedTests) {\n-        EXCLUDED_TESTS.addAll(excludedTests)\n+        excludedTestsArray = []\n+        excludedTestsArray.addAll(excludedTests)\n+        TESTS.each { id, target ->\n+            if (excludedTestsArray.contains(id)) {\n+                echo \"Excluding test target:'${id}'\"\n+                TESTS.remove(id)\n+            }\n+        }\n     }\n \n-    TEST_FLAG = buildspec.getScalarField(\"test_flags\", SDK_VERSION) ?: ''\n+    TESTS.each { id, target ->\n+        flag = buildspec.getScalarField(\"test_flags\", id) ?: ''\n+        if (flag) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afcdcf2ddb42ff3a9edf023ceb1466b9ea440e0a"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MzczOTMxOnYy", "diffSide": "RIGHT", "path": "buildenv/jenkins/common/variables-functions.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNjo1MTozMVrOGGuaIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNjo1MTozMVrOGGuaIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTcwNDk5NQ==", "bodyText": "Why another loop here for keepReportDir? Set target['keepReportDir'] in the above loop.", "url": "https://github.com/eclipse-openj9/openj9/pull/9107#discussion_r409704995", "createdAt": "2020-04-16T16:51:31Z", "author": {"login": "vsebe"}, "path": "buildenv/jenkins/common/variables-functions.groovy", "diffHunk": "@@ -664,39 +671,45 @@ def set_test_targets() {\n * Set EXTRA_TEST_LABELS map if defined in variable file.\n */\n def set_test_misc() {\n-    EXTRA_TEST_LABELS = [:]\n     if (!params.TEST_NODE) {\n         // Only add extra test labels if the user has not specified a specific TEST_NODE\n-        TARGET_NAMES.each { target ->\n-            EXTRA_TEST_LABELS[target] = buildspec.getVectorField(\"extra_test_labels\", target).join('&&') ?: ''\n+        TESTS.each { id, target ->\n+            target['extraTestLabels'] = buildspec.getVectorField(\"extra_test_labels\", target).join('&&') ?: ''\n         }\n     }\n \n-    EXCLUDED_TESTS = []\n     def buildspec = buildspec_manager.getSpec(SPEC)\n     def excludedTests = buildspec.getVectorField(\"excluded_tests\", SDK_VERSION)\n     if (excludedTests) {\n-        EXCLUDED_TESTS.addAll(excludedTests)\n+        excludedTestsArray = []\n+        excludedTestsArray.addAll(excludedTests)\n+        TESTS.each { id, target ->\n+            if (excludedTestsArray.contains(id)) {\n+                echo \"Excluding test target:'${id}'\"\n+                TESTS.remove(id)\n+            }\n+        }\n     }\n \n-    TEST_FLAG = buildspec.getScalarField(\"test_flags\", SDK_VERSION) ?: ''\n+    TESTS.each { id, target ->\n+        flag = buildspec.getScalarField(\"test_flags\", id) ?: ''\n+        if (flag) {\n+            target['testFlag'] = (target['testFlag']) ? error(\"Cannot set more than 1 TEST_FLAG\") : flag\n+        } else {\n+            target['testFlag'] = (target['testFlag']) ? target['testFlag'] : ''\n+        }\n+    }\n \n     // Set test param KEEP_REPORTDIR to false unless set true in variable file.\n-    TEST_KEEP_REPORTDIR = [:]\n-    TARGET_NAMES.each { target ->\n-        TEST_KEEP_REPORTDIR[target] = buildspec_manager.getSpec('misc').getScalarField(\"test_keep_reportdir\", target) ?: 'false'\n+    TESTS.each { id, target ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afcdcf2ddb42ff3a9edf023ceb1466b9ea440e0a"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0Mzc0NTgzOnYy", "diffSide": "RIGHT", "path": "buildenv/jenkins/common/variables-functions.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNjo1MzoxNVrOGGueMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNjo1MzoxNVrOGGueMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTcwNjAzNQ==", "bodyText": "Why another loop here? Set target['buildList'] in the loop at L694.", "url": "https://github.com/eclipse-openj9/openj9/pull/9107#discussion_r409706035", "createdAt": "2020-04-16T16:53:15Z", "author": {"login": "vsebe"}, "path": "buildenv/jenkins/common/variables-functions.groovy", "diffHunk": "@@ -664,39 +671,45 @@ def set_test_targets() {\n * Set EXTRA_TEST_LABELS map if defined in variable file.\n */\n def set_test_misc() {\n-    EXTRA_TEST_LABELS = [:]\n     if (!params.TEST_NODE) {\n         // Only add extra test labels if the user has not specified a specific TEST_NODE\n-        TARGET_NAMES.each { target ->\n-            EXTRA_TEST_LABELS[target] = buildspec.getVectorField(\"extra_test_labels\", target).join('&&') ?: ''\n+        TESTS.each { id, target ->\n+            target['extraTestLabels'] = buildspec.getVectorField(\"extra_test_labels\", target).join('&&') ?: ''\n         }\n     }\n \n-    EXCLUDED_TESTS = []\n     def buildspec = buildspec_manager.getSpec(SPEC)\n     def excludedTests = buildspec.getVectorField(\"excluded_tests\", SDK_VERSION)\n     if (excludedTests) {\n-        EXCLUDED_TESTS.addAll(excludedTests)\n+        excludedTestsArray = []\n+        excludedTestsArray.addAll(excludedTests)\n+        TESTS.each { id, target ->\n+            if (excludedTestsArray.contains(id)) {\n+                echo \"Excluding test target:'${id}'\"\n+                TESTS.remove(id)\n+            }\n+        }\n     }\n \n-    TEST_FLAG = buildspec.getScalarField(\"test_flags\", SDK_VERSION) ?: ''\n+    TESTS.each { id, target ->\n+        flag = buildspec.getScalarField(\"test_flags\", id) ?: ''\n+        if (flag) {\n+            target['testFlag'] = (target['testFlag']) ? error(\"Cannot set more than 1 TEST_FLAG\") : flag\n+        } else {\n+            target['testFlag'] = (target['testFlag']) ? target['testFlag'] : ''\n+        }\n+    }\n \n     // Set test param KEEP_REPORTDIR to false unless set true in variable file.\n-    TEST_KEEP_REPORTDIR = [:]\n-    TARGET_NAMES.each { target ->\n-        TEST_KEEP_REPORTDIR[target] = buildspec_manager.getSpec('misc').getScalarField(\"test_keep_reportdir\", target) ?: 'false'\n+    TESTS.each { id, target ->\n+        target['keepReportDir'] = buildspec_manager.getSpec('misc').getScalarField(\"test_keep_reportdir\", id) ?: 'false'\n     }\n \n-    TEST_BUILD_LIST = [:]\n-    TARGET_NAMES.each { target ->\n-        TEST_BUILD_LIST[target] = buildspec.getScalarField(\"test_build_list\", target) ?: ''\n+    TESTS.each { id, target ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afcdcf2ddb42ff3a9edf023ceb1466b9ea440e0a"}, "originalPosition": 83}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 329, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}