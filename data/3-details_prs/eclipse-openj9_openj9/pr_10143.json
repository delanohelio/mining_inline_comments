{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3NTQwMTcx", "number": 10143, "title": "Relax condition to require no exclusive VM access when generating jitdump", "bodyText": "This PR is a series of commits which addresses three different deadlocks described in #9136 following which we remove the restriction that jitdumps need to ensure no other thread is holding exclusive access. Each commit within this PR describes within the commit message the scenario which can be observed when we are in the deadlock state. These scenarios are further elaborated with code references in #9136.\nFixes: #9136", "createdAt": "2020-07-10T16:46:48Z", "url": "https://github.com/eclipse-openj9/openj9/pull/10143", "merged": true, "mergeCommit": {"oid": "2eba29ba5bb1b964e65420a8fa03116965a99a15"}, "closed": true, "closedAt": "2020-07-15T18:18:45Z", "author": {"login": "fjeremic"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABczmbPbAH2gAyNDQ3NTQwMTcxOjZkYTliMzc2ZDI1Zjg2Y2ZiNzBlN2ZiOWYwNmI5YjZhNzU3MmUwMWU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc1MS9JAFqTQ0OTA2ODYwOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6da9b376d25f86cfb70e7fb9f06b9b6a7572e01e", "author": {"user": {"login": "fjeremic", "name": "Filip Jeremic"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/6da9b376d25f86cfb70e7fb9f06b9b6a7572e01e", "committedDate": "2020-07-10T16:42:22Z", "message": "Fix deadlock during jitdump when compilation thread releases VM access\n\nThis change fixes a deadlock which can occur where a thread is trying\nto acquire exclusive VM access but is unable to. The following\nconditions can be observed:\n\n- GC thread is attempting to acquire exclusive, but it is waiting for\n`vm->exclusiveAccessResponseCount` to be zero\n- All compilation threads except one are stuck waiting on the dump\nmonitor to trigger a dump agent\n- One thread is executing the jitdump and it has just released VM\naccess and is waiting on the diagnostic thread to finish compiling the\nqueued JIT method on the compilation queue\n- The diagnostic thread is attempting to process the compilation queue\nbut it attempts to acquire VM access, so it blocks because GC wants\nexclusive\n\nThis three way deadlock can be resolved by allowing the GC to acquire\nexclusive VM access. The reason it is unable to is because the jitdump\nthread (crashed thread) has released VM access even though it was not\nholding it in the first place. This decrements\n`vm->exclusiveAccessResponseCount` one too many times and the GC thread\nis unable to acquire exclusive access so that everyone can proceed.\n\nThe fix is to simply acquire VM access before requesting the jitdump\nrecompilation since we will go down a code path that assumes we have VM\naccess already. i.e. synchronous compilations are synonymous with\nrequesting the compile on an application thread, which should always\nhold (non-exclusive) VM access.\n\nSigned-off-by: Filip Jeremic <fjeremic@ca.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da80b48bf0d176510d5e2801a1d5a14794ebeeae", "author": {"user": {"login": "fjeremic", "name": "Filip Jeremic"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/da80b48bf0d176510d5e2801a1d5a14794ebeeae", "committedDate": "2020-07-10T16:42:22Z", "message": "Fix deadlock during jitdump when a compilation interruption occurs\n\nThis change fixes a deadlock which can occur right before the VM is\nabout to terminate. The following conditions can be observed:\n\n- The jitdump file contains `=== EXCEPTION THROWN (JIT Shutdown) ===`\nor similar message\n- The crashed thread is generating the jitdump and an interruption\nexception is thrown forcing the thread to shut down\n- A number of other compilation threads have crashed and are waiting to\nacquire the dump lock so they can execute their dump agents\n\nThe deadlock happens because the thread generating the jitdump has not\nunwound the stack to release the dump lock and so the other crashed\nthreads can never proceed. The exception that is most commonly thrown\nis the `JitShutdown` exception which is thrown in\n`acquireVMaccessIfNeeded` when we check if the compilation should be\ninterrupted. The location where we try to acquire VM access is on the\npath which dumps Known Object Table during the jitdump process. Because\nwe are lacking a try/catch block around this piece of code, any\nexception which occurs will flow up and past the dump locking code in\n`dmpagent.c`, and all the way past the crash point until we reach the\ncatch handler in the crashed thread. This means the dump lock never\ngets released and we are in a deadlock situation with other crashed\nthreads just waiting around.\n\nThe fix is to simply wrap the jitdump process in a try/catch block and\nhandle such exceptions by reporting the error and aborting the jitdump\nprocess.\n\nSigned-off-by: Filip Jeremic <fjeremic@ca.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b3a17a11503440154815fceda40aff01bb6e4400", "author": {"user": {"login": "fjeremic", "name": "Filip Jeremic"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/b3a17a11503440154815fceda40aff01bb6e4400", "committedDate": "2020-07-10T16:42:22Z", "message": "Fix deadlock when VM access is requested while freeing the KOT\n\nThis change fixes a deadlock which can occur when freeing the Known\nObject Table (KOT). The following conditions can be observed:\n\n- The application thread wants to queue an asynchronous compile, but it\ncan't because it wants to acquire the comp monitor which the diagnostic\nthread owns\n- The diagnostic thread acquired the comp monitor in\n`postCompilationTasks` and is trying to free the known object table,\nfor which it requires VM access. It tries to get it but it can't\nbecause some other compilation thread has requested exclusive.\n- The compilation thread which requested exclusive is trying to reserve\na codecache but it can't get exclusive because the application thread\nhas VM access since it is still executing\n\nThis results in a three way deadlock. The fix here is to ensure in the\nlocations where we free the KOT we do not hold the comp monitor before\nacquiring VM access. To ensure no future bugs occur in this area we\nalso add a fatal assert in the VM access acquire logic to ensure the\ncomp monitor is not held.\n\nSigned-off-by: Filip Jeremic <fjeremic@ca.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1582c84de0b6d7b84671801eb327dc1bd5b0b82", "author": {"user": {"login": "fjeremic", "name": "Filip Jeremic"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/e1582c84de0b6d7b84671801eb327dc1bd5b0b82", "committedDate": "2020-07-10T16:42:23Z", "message": "Relax condition to require exclusive VM access when generating jitdump\n\nNow that all known deadlock situations have been fixed we can relax the\ncondition that no thread is holding exclusive VM access when generating\nthe jitdump. The process should still work even if some thread is\nholding exclusive VM access.\n\nSigned-off-by: Filip Jeremic <fjeremic@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2NTQ5NTQ3", "url": "https://github.com/eclipse-openj9/openj9/pull/10143#pullrequestreview-446549547", "createdAt": "2020-07-10T16:48:33Z", "commit": {"oid": "e1582c84de0b6d7b84671801eb327dc1bd5b0b82"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNjo0ODozM1rOGv-V9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNjo1MDo0OVrOGv-aew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk1NzY4NA==", "bodyText": "Curious why are we not calling postCompilationTasks here instead?", "url": "https://github.com/eclipse-openj9/openj9/pull/10143#discussion_r452957684", "createdAt": "2020-07-10T16:48:33Z", "author": {"login": "fjeremic"}, "path": "runtime/compiler/control/CompilationThread.cpp", "diffHunk": "@@ -8654,6 +8659,8 @@ TR::CompilationInfoPerThreadBase::wrappedCompile(J9PortLibrary *portLib, void *\n \n       if (compiler)\n          {\n+         // The KOT needs to survive at least until we're done committing virtual guards and we must not be holding the\n+         // comp monitor prior to freeing the KOT because it requires VM access.\n          if (compiler->getKnownObjectTable())\n             compiler->freeKnownObjectTable();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1582c84de0b6d7b84671801eb327dc1bd5b0b82"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk1ODg0Mw==", "bodyText": "The releaseVMAccess macro that we call in compileOnSeparateThread should have asserted I would have thought, because prior to this change we would not have held VM access while trying to release it. Any ideas why we don't assert in today's world?", "url": "https://github.com/eclipse-openj9/openj9/pull/10143#discussion_r452958843", "createdAt": "2020-07-10T16:50:49Z", "author": {"login": "fjeremic"}, "path": "runtime/compiler/control/JitDump.cpp", "diffHunk": "@@ -526,174 +517,198 @@ runJitdump(char *label, J9RASdumpContext *context, J9RASdumpAgent *agent)\n       compInfo->releaseCompMonitor(crashedThread);\n       }\n \n-   // if our compinfo is null, we are an application thread\n-   if (threadCompInfo == 0)\n+   try\n       {\n-      if (options->getVerboseOption(TR_VerboseDump))\n-         TR_VerboseLog::writeLineLocked(TR_Vlog_JITDUMP, \"Crashed in application thread\");\n-      trfprintf(logFile, \"#INFO: Crashed in application thread %p.\\n\", crashedThread);\n-\n-      // only bother doing anything if we have a healthy compilation thread available\n-      if (recompilationThread)\n+      // if our compinfo is null, we are an application thread\n+      if (threadCompInfo == 0)\n          {\n-         // make space for methods to be recompiled\n-         // FIXME: this is on the stack... is the stack big enough?\n-         int currentMethodIndex = 0;\n-         TR_MethodToBeCompiledForDump jittedMethodsOnStack[STACK_WALK_DEPTH] = { 0 };\n-\n-         // set up the stack walk object\n-         J9StackWalkState walkState;\n-\n-         walkState.userData1 = (void *)jittedMethodsOnStack;\n-         walkState.userData2 = (void *)&currentMethodIndex;\n-         walkState.walkThread = crashedThread;\n-         walkState.skipCount = 0;\n-         walkState.maxFrames = STACK_WALK_DEPTH;\n-         walkState.flags = (\n-            // J9_STACKWALK_LINEAR |\n-            // J9_STACKWALK_START_AT_JIT_FRAME |\n-            // J9_STACKWALK_INCLUDE_NATIVES |\n-            // J9_STACKWALK_HIDE_EXCEPTION_FRAMES |\n-            // J9_STACKWALK_ITERATE_HIDDEN_JIT_FRAMES |\n-            J9_STACKWALK_VISIBLE_ONLY |\n-            J9_STACKWALK_SKIP_INLINES |\n-            J9_STACKWALK_COUNT_SPECIFIED |\n-            J9_STACKWALK_ITERATE_FRAMES\n-            );\n-         walkState.frameWalkFunction = logStackIterator;\n-\n-         /*\n-          * NOTE [March 6th, 2013]:\n-          *\n-          *    Graham Chapman said:\n-          *\n-          *    This will make the stack walker jump back to the last\n-          *    interpreter transition point if a bad return address is found,\n-          *    rather than asserting.  You'll miss a bunch of frames, but\n-          *    there's really nothing better to be done in that case.\n-          */\n-         walkState.errorMode = J9_STACKWALK_ERROR_MODE_IGNORE;\n-\n-         // actually walk the stack, adding all JITed methods to the queue\n-         compInfo->acquireCompMonitor(crashedThread);\n-         crashedThread->javaVM->walkStackFrames(crashedThread, &walkState);\n-         compInfo->releaseCompMonitor(crashedThread);\n-\n          if (options->getVerboseOption(TR_VerboseDump))\n-            TR_VerboseLog::writeLineLocked(TR_Vlog_JITDUMP, \"found %d JITed methods on Java stack\", currentMethodIndex);\n-         trfprintf(logFile, \"#INFO: Found %d JITed methods on Java stack.\\n\", currentMethodIndex);\n-\n-         // resume the compilation thread\n-         recompilationThreadInfo->resumeCompilationThread();\n+            TR_VerboseLog::writeLineLocked(TR_Vlog_JITDUMP, \"Crashed in application thread\");\n+         trfprintf(logFile, \"#INFO: Crashed in application thread %p.\\n\", crashedThread);\n \n-         // compile our methods\n-         for (int i = 0; i < currentMethodIndex; i++)\n+         // only bother doing anything if we have a healthy compilation thread available\n+         if (recompilationThread)\n             {\n-            // skip if method is somehow null\n-            if (!(jittedMethodsOnStack[i]._method))\n-               continue;\n-\n-            TR_CompilationErrorCode compErrCode;\n-            compErrCode = recompileMethodForLog(\n-               crashedThread,\n-               jittedMethodsOnStack[i]._method,\n-               compInfo,\n-               frontendOfThread,\n-               jittedMethodsOnStack[i]._optLevel,\n-               false,\n-               jittedMethodsOnStack[i]._oldStartPC,\n-               logFile\n+            // make space for methods to be recompiled\n+            // FIXME: this is on the stack... is the stack big enough?\n+            int currentMethodIndex = 0;\n+            TR_MethodToBeCompiledForDump jittedMethodsOnStack[STACK_WALK_DEPTH] = { 0 };\n+\n+            // set up the stack walk object\n+            J9StackWalkState walkState;\n+\n+            walkState.userData1 = (void *)jittedMethodsOnStack;\n+            walkState.userData2 = (void *)&currentMethodIndex;\n+            walkState.walkThread = crashedThread;\n+            walkState.skipCount = 0;\n+            walkState.maxFrames = STACK_WALK_DEPTH;\n+            walkState.flags = (\n+               // J9_STACKWALK_LINEAR |\n+               // J9_STACKWALK_START_AT_JIT_FRAME |\n+               // J9_STACKWALK_INCLUDE_NATIVES |\n+               // J9_STACKWALK_HIDE_EXCEPTION_FRAMES |\n+               // J9_STACKWALK_ITERATE_HIDDEN_JIT_FRAMES |\n+               J9_STACKWALK_VISIBLE_ONLY |\n+               J9_STACKWALK_SKIP_INLINES |\n+               J9_STACKWALK_COUNT_SPECIFIED |\n+               J9_STACKWALK_ITERATE_FRAMES\n                );\n-            } // for\n-\n-         if (currentMethodIndex == 0)\n-            trfprintf(logFile, \"#INFO: DUMP FAILED: no methods to recompile\\n\");\n+            walkState.frameWalkFunction = logStackIterator;\n+\n+            /*\n+             * NOTE [March 6th, 2013]:\n+             *\n+             *    Graham Chapman said:\n+             *\n+             *    This will make the stack walker jump back to the last\n+             *    interpreter transition point if a bad return address is found,\n+             *    rather than asserting.  You'll miss a bunch of frames, but\n+             *    there's really nothing better to be done in that case.\n+             */\n+            walkState.errorMode = J9_STACKWALK_ERROR_MODE_IGNORE;\n+\n+            // actually walk the stack, adding all JITed methods to the queue\n+            compInfo->acquireCompMonitor(crashedThread);\n+            crashedThread->javaVM->walkStackFrames(crashedThread, &walkState);\n+            compInfo->releaseCompMonitor(crashedThread);\n+\n+            if (options->getVerboseOption(TR_VerboseDump))\n+               TR_VerboseLog::writeLineLocked(TR_Vlog_JITDUMP, \"found %d JITed methods on Java stack\", currentMethodIndex);\n+            trfprintf(logFile, \"#INFO: Found %d JITed methods on Java stack.\\n\", currentMethodIndex);\n+\n+            // resume the compilation thread\n+            recompilationThreadInfo->resumeCompilationThread();\n+\n+            // compile our methods\n+            for (int i = 0; i < currentMethodIndex; i++)\n+               {\n+               // skip if method is somehow null\n+               if (!(jittedMethodsOnStack[i]._method))\n+                  continue;\n \n-         if (options->getVerboseOption(TR_VerboseDump))\n-            TR_VerboseLog::writeLineLocked(TR_Vlog_JITDUMP, \"recompilations complete\");\n+               TR_CompilationErrorCode compErrCode;\n+               compErrCode = recompileMethodForLog(\n+                  crashedThread,\n+                  jittedMethodsOnStack[i]._method,\n+                  compInfo,\n+                  frontendOfThread,\n+                  jittedMethodsOnStack[i]._optLevel,\n+                  false,\n+                  jittedMethodsOnStack[i]._oldStartPC,\n+                  logFile\n+               );\n+               } // for\n \n-         } // if recompilationThread\n-      else\n-         {\n-         trfprintf(logFile, \"#INFO: DUMP FAILED: no diagnostic thread\\n\");\n-         jitDumpFailedBecause(crashedThread, \"no thread available to compile for dump\");\n-         }\n+            if (currentMethodIndex == 0)\n+               trfprintf(logFile, \"#INFO: DUMP FAILED: no methods to recompile\\n\");\n \n-      } // if threadcompinfo\n+            if (options->getVerboseOption(TR_VerboseDump))\n+               TR_VerboseLog::writeLineLocked(TR_Vlog_JITDUMP, \"recompilations complete\");\n \n-   // if our compinfo is not null, we are a compilation thread\n-   else\n-      {\n-      if (options->getVerboseOption(TR_VerboseDump))\n-         TR_VerboseLog::writeLineLocked(TR_Vlog_JITDUMP, \"crashed in compilation thread\");\n-      trfprintf(logFile, \"#INFO: Crashed in compilation thread %p.\\n\", crashedThread);\n+            } // if recompilationThread\n+         else\n+            {\n+            trfprintf(logFile, \"#INFO: DUMP FAILED: no diagnostic thread\\n\");\n+            jitDumpFailedBecause(crashedThread, \"no thread available to compile for dump\");\n+            }\n \n-      // get current compilation\n-      TR::Compilation *comp = threadCompInfo->getCompilation();\n+         } // if threadcompinfo\n \n-      // if the compilation is in progress, dump interesting things from it and then recompile\n-      if (comp)\n+      // if our compinfo is not null, we are a compilation thread\n+      else\n          {\n          if (options->getVerboseOption(TR_VerboseDump))\n-            TR_VerboseLog::writeLineLocked(TR_Vlog_JITDUMP, \"Found compilation object\");\n+            TR_VerboseLog::writeLineLocked(TR_Vlog_JITDUMP, \"crashed in compilation thread\");\n+         trfprintf(logFile, \"#INFO: Crashed in compilation thread %p.\\n\", crashedThread);\n \n-         // dump IL of current compilation\n-         dumpCurrentIL(comp, crashedThread, jitConfig, logFile);\n+         // get current compilation\n+         TR::Compilation *comp = threadCompInfo->getCompilation();\n \n-         // if there was an available compilation thread, recompile the current method\n-         if (recompilationThread)\n+         // if the compilation is in progress, dump interesting things from it and then recompile\n+         if (comp)\n             {\n-            // only proceed to recompile if the method is a regular Java method\n-            if (currentMethodBeingCompiled &&\n-               currentMethodBeingCompiled->getMethodDetails().isOrdinaryMethod())\n-               {\n-               // resume the healthy compilation thread\n-               recompilationThreadInfo->resumeCompilationThread();  // TODO: Postpone this so that the thread does not get to sleep again\n-               if (options->getVerboseOption(TR_VerboseDump))\n-                  TR_VerboseLog::writeLineLocked(TR_Vlog_JITDUMP, \"Resuming DiagCompThread\");\n+            if (options->getVerboseOption(TR_VerboseDump))\n+               TR_VerboseLog::writeLineLocked(TR_Vlog_JITDUMP, \"Found compilation object\");\n \n-               // get old start PC if method was available\n-               void *oldStartPC = 0;\n-               if (currentMethodBeingCompiled)\n-                  oldStartPC = currentMethodBeingCompiled->_oldStartPC;\n+            // dump IL of current compilation\n+            dumpCurrentIL(comp, crashedThread, jitConfig, logFile);\n \n-               // request the compilation\n-               TR_CompilationErrorCode compErrCode;\n-               compErrCode = recompileMethodForLog(\n-                  crashedThread,\n-                  (J9Method *)(comp->getCurrentMethod()->getPersistentIdentifier()),\n-                  compInfo,\n-                  frontendOfThread,\n-                  (TR_Hotness)comp->getOptLevel(),\n-                  comp->isProfilingCompilation(),\n-                  oldStartPC,\n-                  logFile\n+            // if there was an available compilation thread, recompile the current method\n+            if (recompilationThread)\n+               {\n+               // only proceed to recompile if the method is a regular Java method\n+               if (currentMethodBeingCompiled &&\n+                  currentMethodBeingCompiled->getMethodDetails().isOrdinaryMethod())\n+                  {\n+                  // resume the healthy compilation thread\n+                  recompilationThreadInfo->resumeCompilationThread();  // TODO: Postpone this so that the thread does not get to sleep again\n+                  if (options->getVerboseOption(TR_VerboseDump))\n+                     TR_VerboseLog::writeLineLocked(TR_Vlog_JITDUMP, \"Resuming DiagCompThread\");\n+\n+                  // get old start PC if method was available\n+                  void *oldStartPC = 0;\n+                  if (currentMethodBeingCompiled)\n+                     oldStartPC = currentMethodBeingCompiled->_oldStartPC;\n+\n+                  // The current thread is a compilation thread which may or may not currently hold VM access. The request\n+                  // for recompilation to generate the jitdump will be performed synchronously for which the code path we\n+                  // will take will be the same as if we were an application thread. We will take the synchronous request\n+                  // path in `compileOnSeparateThread` which ends up releasing VM access prior to waiting on the diagnostic\n+                  // thread to finish the queued compile. To avoid deadlocks we must acquire VM access here.\n+                  TR::VMAccessCriticalSection requestSynchronousCompilation(TR_J9VMBase::get(jitConfig, crashedThread));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1582c84de0b6d7b84671801eb327dc1bd5b0b82"}, "originalPosition": 292}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2NjU2MTM4", "url": "https://github.com/eclipse-openj9/openj9/pull/10143#pullrequestreview-446656138", "createdAt": "2020-07-10T19:36:45Z", "commit": {"oid": "6da9b376d25f86cfb70e7fb9f06b9b6a7572e01e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxOTozNjo0NVrOGwDfKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxOTozNjo0NVrOGwDfKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA0MTk2Mw==", "bodyText": "It's better that you add the brace brackets to explicitly scope the critical section.", "url": "https://github.com/eclipse-openj9/openj9/pull/10143#discussion_r453041963", "createdAt": "2020-07-10T19:36:45Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/control/JitDump.cpp", "diffHunk": "@@ -657,6 +658,13 @@ runJitdump(char *label, J9RASdumpContext *context, J9RASdumpAgent *agent)\n                if (currentMethodBeingCompiled)\n                   oldStartPC = currentMethodBeingCompiled->_oldStartPC;\n \n+               // The current thread is a compilation thread which may or may not currently hold VM access. The request\n+               // for recompilation to generate the jitdump will be performed synchronously for which the code path we\n+               // will take will be the same as if we were an application thread. We will take the synchronous request\n+               // path in `compileOnSeparateThread` which ends up releasing VM access prior to waiting on the diagnostic\n+               // thread to finish the queued compile. To avoid deadlocks we must acquire VM access here.\n+               TR::VMAccessCriticalSection requestSynchronousCompilation(TR_J9VMBase::get(jitConfig, crashedThread));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6da9b376d25f86cfb70e7fb9f06b9b6a7572e01e"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9cc7a4529057f67af8a9ad80a9dabdba19667723", "author": {"user": {"login": "fjeremic", "name": "Filip Jeremic"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/9cc7a4529057f67af8a9ad80a9dabdba19667723", "committedDate": "2020-07-13T20:13:12Z", "message": "Add explicit scope around VM access critical section\n\nSigned-off-by: Filip Jeremic <fjeremic@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4MjQ4MTIy", "url": "https://github.com/eclipse-openj9/openj9/pull/10143#pullrequestreview-448248122", "createdAt": "2020-07-14T16:02:31Z", "commit": {"oid": "9cc7a4529057f67af8a9ad80a9dabdba19667723"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4NDI5MDM3", "url": "https://github.com/eclipse-openj9/openj9/pull/10143#pullrequestreview-448429037", "createdAt": "2020-07-14T20:10:53Z", "commit": {"oid": "9cc7a4529057f67af8a9ad80a9dabdba19667723"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5MDY4NjA4", "url": "https://github.com/eclipse-openj9/openj9/pull/10143#pullrequestreview-449068608", "createdAt": "2020-07-15T15:23:38Z", "commit": {"oid": "9cc7a4529057f67af8a9ad80a9dabdba19667723"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 562, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}