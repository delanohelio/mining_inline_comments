{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0MzM4OTY0", "number": 11082, "title": "Parse -Xlog:gc variants for compatibility and add tests", "bodyText": "Issue #10799\nDoc issue eclipse-openj9/openj9-docs#671", "createdAt": "2020-11-02T21:38:47Z", "url": "https://github.com/eclipse-openj9/openj9/pull/11082", "merged": true, "mergeCommit": {"oid": "fc52cb7400d428e04a9a7c8b3dc9e634b7c97ae1"}, "closed": true, "closedAt": "2020-11-10T18:13:23Z", "author": {"login": "pshipton"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdYrnPmABqjM5NTAxODgyMDc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdbNcUIgFqTUyNzQ3NjEzMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "68f70bc88ff2892d4c73486d2a6a731db472ba28", "author": {"user": {"login": "pshipton", "name": "Peter Shipton"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/68f70bc88ff2892d4c73486d2a6a731db472ba28", "committedDate": "2020-11-02T21:27:55Z", "message": "Parse -Xlog:gc variants for compatibility\n\nIssue https://github.com/eclipse/openj9/issues/10799\n\nSigned-off-by: Peter Shipton <Peter_Shipton@ca.ibm.com>"}, "afterCommit": {"oid": "ba8839a0a1b04ed514a939deb90ef8818180f2ff", "author": {"user": {"login": "pshipton", "name": "Peter Shipton"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/ba8839a0a1b04ed514a939deb90ef8818180f2ff", "committedDate": "2020-11-02T21:37:15Z", "message": "Parse -Xlog:gc variants for compatibility\n\nIssue https://github.com/eclipse/openj9/issues/10799\n\nSigned-off-by: Peter Shipton <Peter_Shipton@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyMDg0MzIy", "url": "https://github.com/eclipse-openj9/openj9/pull/11082#pullrequestreview-522084322", "createdAt": "2020-11-02T22:44:35Z", "commit": {"oid": "2168fc95c67cad3ec9cf9823682179b5f5a8163c"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMjo0NDozNlrOHsYnyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMjo0NzoyMlrOHsYuMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjMwMjc5Mw==", "bodyText": "+ 1 for trailing NUL?", "url": "https://github.com/eclipse-openj9/openj9/pull/11082#discussion_r516302793", "createdAt": "2020-11-02T22:44:36Z", "author": {"login": "keithc-ca"}, "path": "runtime/vm/jvminit.c", "diffHunk": "@@ -6000,6 +6000,268 @@ processCompressionOptions(J9JavaVM *vm){\n \t}\n }\n \n+/**\n+ * Parse -Xlog:gc options and add mappings, for compatibility when -XX:-LegacyXlogOption is not set.\n+ * Anything besides -Xlog:gc, -Xlog:gc:stderr[:], \n+ */\n+static IDATA\n+parseXlogForCompatibility(J9JavaVM* vm)\n+{\n+\tPORT_ACCESS_FROM_JAVAVM(vm);\n+\tIDATA rc = JNI_OK;\n+\tJ9VMInitArgs* j9vm_args = vm->vmArgsArray;\n+\tIDATA xlogindex = FIND_ARG_IN_VMARGS_FORWARD(OPTIONAL_LIST_MATCH, MAPOPT_XLOG_OPT, NULL);\n+\twhile (xlogindex >= 0) {\n+\t\tBOOLEAN unrecognizedOption = FALSE;\n+\t\tBOOLEAN setgclog = FALSE;\n+\t\tBOOLEAN gclog = FALSE;\n+\t\tchar *gclogfile = NULL;\n+\t\tchar xlogoptionsbuf[LARGE_STRING_BUF_SIZE];\n+\t\tchar *xlogoptions = xlogoptionsbuf;\n+\t\tUDATA optionLen = strlen(j9vm_args->actualVMArgs->options[xlogindex].optionString);\n+\n+\t\tif (optionLen > sizeof(xlogoptionsbuf)) {\n+\t\t\txlogoptions = j9mem_allocate_memory(optionLen, OMRMEM_CATEGORY_VM);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2168fc95c67cad3ec9cf9823682179b5f5a8163c"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjMwMzkwMg==", "bodyText": "Please format types consistently (J9JavaVM *vm rather than J9JavaVM* vm - syntactically, the asterisk binds more tightly to the parameter name than the target type).", "url": "https://github.com/eclipse-openj9/openj9/pull/11082#discussion_r516303902", "createdAt": "2020-11-02T22:46:24Z", "author": {"login": "keithc-ca"}, "path": "runtime/vm/jvminit.c", "diffHunk": "@@ -6000,6 +6000,268 @@ processCompressionOptions(J9JavaVM *vm){\n \t}\n }\n \n+/**\n+ * Parse -Xlog:gc options and add mappings, for compatibility when -XX:-LegacyXlogOption is not set.\n+ * Anything besides -Xlog:gc, -Xlog:gc:stderr[:], \n+ */\n+static IDATA\n+parseXlogForCompatibility(J9JavaVM* vm)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2168fc95c67cad3ec9cf9823682179b5f5a8163c"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjMwNDQzMg==", "bodyText": "Please put constants on the left of ==.", "url": "https://github.com/eclipse-openj9/openj9/pull/11082#discussion_r516304432", "createdAt": "2020-11-02T22:47:22Z", "author": {"login": "keithc-ca"}, "path": "runtime/vm/jvminit.c", "diffHunk": "@@ -6000,6 +6000,268 @@ processCompressionOptions(J9JavaVM *vm){\n \t}\n }\n \n+/**\n+ * Parse -Xlog:gc options and add mappings, for compatibility when -XX:-LegacyXlogOption is not set.\n+ * Anything besides -Xlog:gc, -Xlog:gc:stderr[:], \n+ */\n+static IDATA\n+parseXlogForCompatibility(J9JavaVM* vm)\n+{\n+\tPORT_ACCESS_FROM_JAVAVM(vm);\n+\tIDATA rc = JNI_OK;\n+\tJ9VMInitArgs* j9vm_args = vm->vmArgsArray;\n+\tIDATA xlogindex = FIND_ARG_IN_VMARGS_FORWARD(OPTIONAL_LIST_MATCH, MAPOPT_XLOG_OPT, NULL);\n+\twhile (xlogindex >= 0) {\n+\t\tBOOLEAN unrecognizedOption = FALSE;\n+\t\tBOOLEAN setgclog = FALSE;\n+\t\tBOOLEAN gclog = FALSE;\n+\t\tchar *gclogfile = NULL;\n+\t\tchar xlogoptionsbuf[LARGE_STRING_BUF_SIZE];\n+\t\tchar *xlogoptions = xlogoptionsbuf;\n+\t\tUDATA optionLen = strlen(j9vm_args->actualVMArgs->options[xlogindex].optionString);\n+\n+\t\tif (optionLen > sizeof(xlogoptionsbuf)) {\n+\t\t\txlogoptions = j9mem_allocate_memory(optionLen, OMRMEM_CATEGORY_VM);\n+\t\t\tif (NULL == xlogoptions) {\n+\t\t\t\tgoto xlogret;\n+\t\t\t}\n+\t\t}\n+\n+\t\tif (OPTION_OK != COPY_OPTION_VALUE(xlogindex, ':', &xlogoptions, optionLen)) {\n+\t\t\trc = JNI_ERR;\n+\t\t\tgoto xlogret;\n+\t\t}\n+\n+\t\tif (xlogoptions == NULL) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2168fc95c67cad3ec9cf9823682179b5f5a8163c"}, "originalPosition": 36}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b184e94d38856ec4ab2337bd1bef15816fa9bf6b", "author": {"user": {"login": "pshipton", "name": "Peter Shipton"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/b184e94d38856ec4ab2337bd1bef15816fa9bf6b", "committedDate": "2020-11-03T01:51:36Z", "message": "Fix\n\nSigned-off-by: Peter Shipton <Peter_Shipton@ca.ibm.com>"}, "afterCommit": {"oid": "7893353b96787fd4d9551c41f1aa8067887eb8e0", "author": {"user": {"login": "pshipton", "name": "Peter Shipton"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/7893353b96787fd4d9551c41f1aa8067887eb8e0", "committedDate": "2020-11-03T02:48:11Z", "message": "Trailing options are unrecognized\n\nSigned-off-by: Peter Shipton <Peter_Shipton@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "90498d2ce2046733bf1db4fbdf3f99bf9ac14f6c", "author": {"user": {"login": "pshipton", "name": "Peter Shipton"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/90498d2ce2046733bf1db4fbdf3f99bf9ac14f6c", "committedDate": "2020-11-03T02:55:27Z", "message": "Fix function comment\n\nSigned-off-by: Peter Shipton <Peter_Shipton@ca.ibm.com>"}, "afterCommit": {"oid": "c2eb1d49186614145d3dcb2aab6d68d661ed4cd6", "author": {"user": {"login": "pshipton", "name": "Peter Shipton"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/c2eb1d49186614145d3dcb2aab6d68d661ed4cd6", "committedDate": "2020-11-03T02:56:33Z", "message": "Fix function comment\n\nSigned-off-by: Peter Shipton <Peter_Shipton@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "526c86b4125c60694b799a88a21332912e53a539", "author": {"user": {"login": "pshipton", "name": "Peter Shipton"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/526c86b4125c60694b799a88a21332912e53a539", "committedDate": "2020-11-03T03:01:07Z", "message": "Fix another instance from review\n\nSigned-off-by: Peter Shipton <Peter_Shipton@ca.ibm.com>"}, "afterCommit": {"oid": "8e51662a18dd8a70475586ede46fcdadbe0e38bb", "author": {"user": {"login": "pshipton", "name": "Peter Shipton"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/8e51662a18dd8a70475586ede46fcdadbe0e38bb", "committedDate": "2020-11-03T03:02:29Z", "message": "Fix another instance from review\n\nSigned-off-by: Peter Shipton <Peter_Shipton@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyNjI1NjY0", "url": "https://github.com/eclipse-openj9/openj9/pull/11082#pullrequestreview-522625664", "createdAt": "2020-11-03T15:41:42Z", "commit": {"oid": "8e51662a18dd8a70475586ede46fcdadbe0e38bb"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNTo0MTo0MlrOHs0t-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNzozNzo0MVrOHs5nEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjc2MzEyOA==", "bodyText": "I think this should set rc to signal failure.", "url": "https://github.com/eclipse-openj9/openj9/pull/11082#discussion_r516763128", "createdAt": "2020-11-03T15:41:42Z", "author": {"login": "keithc-ca"}, "path": "runtime/vm/jvminit.c", "diffHunk": "@@ -6000,6 +6000,270 @@ processCompressionOptions(J9JavaVM *vm){\n \t}\n }\n \n+/**\n+ * For compatibility when -XX:-LegacyXlogOption is not set, parse -Xlog:gc options and add mappings.\n+ * Anything besides -Xlog:gc, -Xlog:gc:stderr|<file>|file=<file>[:[:]] gives an unrecognized warning,\n+ * although any superset such as -Xlog, -Xlog:all, -Xlog:something,gc, etc. enables gc logging as well. \n+ */\n+static IDATA\n+parseXlogForCompatibility(J9JavaVM *vm)\n+{\n+\tPORT_ACCESS_FROM_JAVAVM(vm);\n+\tIDATA rc = JNI_OK;\n+\tJ9VMInitArgs *j9vm_args = vm->vmArgsArray;\n+\tIDATA xlogindex = FIND_ARG_IN_VMARGS_FORWARD(OPTIONAL_LIST_MATCH, MAPOPT_XLOG_OPT, NULL);\n+\twhile (xlogindex >= 0) {\n+\t\tBOOLEAN unrecognizedOption = FALSE;\n+\t\tBOOLEAN setgclog = FALSE;\n+\t\tBOOLEAN gclog = FALSE;\n+\t\tchar *gclogfile = NULL;\n+\t\tchar xlogoptionsbuf[LARGE_STRING_BUF_SIZE];\n+\t\tchar *xlogoptions = xlogoptionsbuf;\n+\t\t/* Include room for the trailing NULL */\n+\t\tUDATA optionLen = strlen(j9vm_args->actualVMArgs->options[xlogindex].optionString) + 1;\n+\n+\t\tif (optionLen > sizeof(xlogoptionsbuf)) {\n+\t\t\txlogoptions = j9mem_allocate_memory(optionLen, OMRMEM_CATEGORY_VM);\n+\t\t\tif (NULL == xlogoptions) {\n+\t\t\t\tgoto xlogret;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e51662a18dd8a70475586ede46fcdadbe0e38bb"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjgzMjc3Ng==", "bodyText": "I had not heard of strsep before; https://linux.die.net/man/3/strsep cautions about portability - have you verified its availability on all platforms we support?", "url": "https://github.com/eclipse-openj9/openj9/pull/11082#discussion_r516832776", "createdAt": "2020-11-03T17:20:45Z", "author": {"login": "keithc-ca"}, "path": "runtime/vm/jvminit.c", "diffHunk": "@@ -6000,6 +6000,270 @@ processCompressionOptions(J9JavaVM *vm){\n \t}\n }\n \n+/**\n+ * For compatibility when -XX:-LegacyXlogOption is not set, parse -Xlog:gc options and add mappings.\n+ * Anything besides -Xlog:gc, -Xlog:gc:stderr|<file>|file=<file>[:[:]] gives an unrecognized warning,\n+ * although any superset such as -Xlog, -Xlog:all, -Xlog:something,gc, etc. enables gc logging as well. \n+ */\n+static IDATA\n+parseXlogForCompatibility(J9JavaVM *vm)\n+{\n+\tPORT_ACCESS_FROM_JAVAVM(vm);\n+\tIDATA rc = JNI_OK;\n+\tJ9VMInitArgs *j9vm_args = vm->vmArgsArray;\n+\tIDATA xlogindex = FIND_ARG_IN_VMARGS_FORWARD(OPTIONAL_LIST_MATCH, MAPOPT_XLOG_OPT, NULL);\n+\twhile (xlogindex >= 0) {\n+\t\tBOOLEAN unrecognizedOption = FALSE;\n+\t\tBOOLEAN setgclog = FALSE;\n+\t\tBOOLEAN gclog = FALSE;\n+\t\tchar *gclogfile = NULL;\n+\t\tchar xlogoptionsbuf[LARGE_STRING_BUF_SIZE];\n+\t\tchar *xlogoptions = xlogoptionsbuf;\n+\t\t/* Include room for the trailing NULL */\n+\t\tUDATA optionLen = strlen(j9vm_args->actualVMArgs->options[xlogindex].optionString) + 1;\n+\n+\t\tif (optionLen > sizeof(xlogoptionsbuf)) {\n+\t\t\txlogoptions = j9mem_allocate_memory(optionLen, OMRMEM_CATEGORY_VM);\n+\t\t\tif (NULL == xlogoptions) {\n+\t\t\t\tgoto xlogret;\n+\t\t\t}\n+\t\t}\n+\n+\t\tif (OPTION_OK != COPY_OPTION_VALUE(xlogindex, ':', &xlogoptions, optionLen)) {\n+\t\t\trc = JNI_ERR;\n+\t\t\tgoto xlogret;\n+\t\t}\n+\n+\t\tif (NULL == xlogoptions) {\n+\t\t\t/* Reached if just -Xlog is specified */\n+\t\t\tsetgclog = TRUE;\n+\t\t\tgclog = TRUE;\n+\t\t\tunrecognizedOption = TRUE;\n+\t\t} else {\n+\t\t\t/* -Xlog:gc+other=off,a+b=c:file=abc:dec:options */\n+\t\t\tchar *fullOptions = xlogoptions;\n+\t\t\tchar *upToColon = strsep(&fullOptions, \":\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e51662a18dd8a70475586ede46fcdadbe0e38bb"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjgzNTc1NA==", "bodyText": "Please move each || to the beginning of the next line; see https://github.com/eclipse/omr/blob/master/doc/CodingStandard.md.", "url": "https://github.com/eclipse-openj9/openj9/pull/11082#discussion_r516835754", "createdAt": "2020-11-03T17:25:15Z", "author": {"login": "keithc-ca"}, "path": "runtime/vm/jvminit.c", "diffHunk": "@@ -6000,6 +6000,270 @@ processCompressionOptions(J9JavaVM *vm){\n \t}\n }\n \n+/**\n+ * For compatibility when -XX:-LegacyXlogOption is not set, parse -Xlog:gc options and add mappings.\n+ * Anything besides -Xlog:gc, -Xlog:gc:stderr|<file>|file=<file>[:[:]] gives an unrecognized warning,\n+ * although any superset such as -Xlog, -Xlog:all, -Xlog:something,gc, etc. enables gc logging as well. \n+ */\n+static IDATA\n+parseXlogForCompatibility(J9JavaVM *vm)\n+{\n+\tPORT_ACCESS_FROM_JAVAVM(vm);\n+\tIDATA rc = JNI_OK;\n+\tJ9VMInitArgs *j9vm_args = vm->vmArgsArray;\n+\tIDATA xlogindex = FIND_ARG_IN_VMARGS_FORWARD(OPTIONAL_LIST_MATCH, MAPOPT_XLOG_OPT, NULL);\n+\twhile (xlogindex >= 0) {\n+\t\tBOOLEAN unrecognizedOption = FALSE;\n+\t\tBOOLEAN setgclog = FALSE;\n+\t\tBOOLEAN gclog = FALSE;\n+\t\tchar *gclogfile = NULL;\n+\t\tchar xlogoptionsbuf[LARGE_STRING_BUF_SIZE];\n+\t\tchar *xlogoptions = xlogoptionsbuf;\n+\t\t/* Include room for the trailing NULL */\n+\t\tUDATA optionLen = strlen(j9vm_args->actualVMArgs->options[xlogindex].optionString) + 1;\n+\n+\t\tif (optionLen > sizeof(xlogoptionsbuf)) {\n+\t\t\txlogoptions = j9mem_allocate_memory(optionLen, OMRMEM_CATEGORY_VM);\n+\t\t\tif (NULL == xlogoptions) {\n+\t\t\t\tgoto xlogret;\n+\t\t\t}\n+\t\t}\n+\n+\t\tif (OPTION_OK != COPY_OPTION_VALUE(xlogindex, ':', &xlogoptions, optionLen)) {\n+\t\t\trc = JNI_ERR;\n+\t\t\tgoto xlogret;\n+\t\t}\n+\n+\t\tif (NULL == xlogoptions) {\n+\t\t\t/* Reached if just -Xlog is specified */\n+\t\t\tsetgclog = TRUE;\n+\t\t\tgclog = TRUE;\n+\t\t\tunrecognizedOption = TRUE;\n+\t\t} else {\n+\t\t\t/* -Xlog:gc+other=off,a+b=c:file=abc:dec:options */\n+\t\t\tchar *fullOptions = xlogoptions;\n+\t\t\tchar *upToColon = strsep(&fullOptions, \":\");\n+#if defined(DEBUG_XLOG)\n+\t\t\tj9tty_printf(PORTLIB, \"upToColon %s fullOptions %s\\n\", upToColon, fullOptions);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\tif ('\\0' == *upToColon) {\n+\t\t\t\t/* Nothing specified means all are enabled */\n+\t\t\t\tsetgclog = TRUE;\n+\t\t\t\tgclog = TRUE;\n+\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t} else {\n+\t\t\t\tchar *upToComma = strsep(&upToColon, \",\");\n+#if defined(DEBUG_XLOG)\n+\t\t\t\tj9tty_printf(PORTLIB, \"upToComma %s upToColon %s\\n\", upToComma, upToColon);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\twhile (TRUE) {\n+\t\t\t\t\tif ('\\0' == *upToComma) {\n+\t\t\t\t\t\t/* Missing tag */\n+xlogerr:\n+\t\t\t\t\t\tCONSUME_ARG(j9vm_args, xlogindex);\n+\t\t\t\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_VM_OPTION_MALFORMED, j9vm_args->actualVMArgs->options[xlogindex].optionString);\n+\t\t\t\t\t\trc = JNI_ERR;\n+\t\t\t\t\t\tgoto xlogret;\n+\t\t\t\t\t}\n+\t\t\t\t\tBOOLEAN checkTagLevel = FALSE;\n+\t\t\t\t\tchar *upToEquals = strsep(&upToComma, \"=\");\n+#if defined(DEBUG_XLOG)\n+\t\t\t\t\tj9tty_printf(PORTLIB, \"upToEquals %s upToComma %s\\n\", upToEquals, upToComma);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\t\tif ('\\0' == *upToEquals) {\n+\t\t\t\t\t\t/* Missing tag */\n+\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tUDATA numtags = 0;\n+\t\t\t\t\t\tchar *tag = strsep(&upToEquals, \"+\");\n+#if defined(DEBUG_XLOG)\n+\t\t\t\t\t\tj9tty_printf(PORTLIB, \"tag %s upToEquals %s\\n\", tag, upToEquals);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\t\t\twhile (TRUE) {\n+\t\t\t\t\t\t\tif ('\\0' == *tag) {\n+\t\t\t\t\t\t\t\t/* Missing tag */\n+\t\t\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tif (0 == j9_cmdla_stricmp(\"all\", tag)) {\n+\t\t\t\t\t\t\t\tif ((numtags > 0) || (NULL != upToEquals)) {\n+\t\t\t\t\t\t\t\t\t/* Invalid use of keyword all */\n+\t\t\t\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\t\tcheckTagLevel = TRUE;\n+\t\t\t\t\t\t\t\t\t/* only gc is recognized from all */\n+\t\t\t\t\t\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t} else if (0 == j9_cmdla_stricmp(\"disable\", tag)) {\n+\t\t\t\t\t\t\t\tif ((numtags > 0) ||\n+\t\t\t\t\t\t\t\t\t(NULL != upToEquals) ||\n+\t\t\t\t\t\t\t\t\t(NULL != upToComma) ||\n+\t\t\t\t\t\t\t\t\t(NULL != upToColon) ||\n+\t\t\t\t\t\t\t\t\t(NULL != fullOptions)\n+\t\t\t\t\t\t\t\t) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e51662a18dd8a70475586ede46fcdadbe0e38bb"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjgzODA1OQ==", "bodyText": "This duplicate code can be removed by moving the copy above to the top of the loop.", "url": "https://github.com/eclipse-openj9/openj9/pull/11082#discussion_r516838059", "createdAt": "2020-11-03T17:29:03Z", "author": {"login": "keithc-ca"}, "path": "runtime/vm/jvminit.c", "diffHunk": "@@ -6000,6 +6000,270 @@ processCompressionOptions(J9JavaVM *vm){\n \t}\n }\n \n+/**\n+ * For compatibility when -XX:-LegacyXlogOption is not set, parse -Xlog:gc options and add mappings.\n+ * Anything besides -Xlog:gc, -Xlog:gc:stderr|<file>|file=<file>[:[:]] gives an unrecognized warning,\n+ * although any superset such as -Xlog, -Xlog:all, -Xlog:something,gc, etc. enables gc logging as well. \n+ */\n+static IDATA\n+parseXlogForCompatibility(J9JavaVM *vm)\n+{\n+\tPORT_ACCESS_FROM_JAVAVM(vm);\n+\tIDATA rc = JNI_OK;\n+\tJ9VMInitArgs *j9vm_args = vm->vmArgsArray;\n+\tIDATA xlogindex = FIND_ARG_IN_VMARGS_FORWARD(OPTIONAL_LIST_MATCH, MAPOPT_XLOG_OPT, NULL);\n+\twhile (xlogindex >= 0) {\n+\t\tBOOLEAN unrecognizedOption = FALSE;\n+\t\tBOOLEAN setgclog = FALSE;\n+\t\tBOOLEAN gclog = FALSE;\n+\t\tchar *gclogfile = NULL;\n+\t\tchar xlogoptionsbuf[LARGE_STRING_BUF_SIZE];\n+\t\tchar *xlogoptions = xlogoptionsbuf;\n+\t\t/* Include room for the trailing NULL */\n+\t\tUDATA optionLen = strlen(j9vm_args->actualVMArgs->options[xlogindex].optionString) + 1;\n+\n+\t\tif (optionLen > sizeof(xlogoptionsbuf)) {\n+\t\t\txlogoptions = j9mem_allocate_memory(optionLen, OMRMEM_CATEGORY_VM);\n+\t\t\tif (NULL == xlogoptions) {\n+\t\t\t\tgoto xlogret;\n+\t\t\t}\n+\t\t}\n+\n+\t\tif (OPTION_OK != COPY_OPTION_VALUE(xlogindex, ':', &xlogoptions, optionLen)) {\n+\t\t\trc = JNI_ERR;\n+\t\t\tgoto xlogret;\n+\t\t}\n+\n+\t\tif (NULL == xlogoptions) {\n+\t\t\t/* Reached if just -Xlog is specified */\n+\t\t\tsetgclog = TRUE;\n+\t\t\tgclog = TRUE;\n+\t\t\tunrecognizedOption = TRUE;\n+\t\t} else {\n+\t\t\t/* -Xlog:gc+other=off,a+b=c:file=abc:dec:options */\n+\t\t\tchar *fullOptions = xlogoptions;\n+\t\t\tchar *upToColon = strsep(&fullOptions, \":\");\n+#if defined(DEBUG_XLOG)\n+\t\t\tj9tty_printf(PORTLIB, \"upToColon %s fullOptions %s\\n\", upToColon, fullOptions);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\tif ('\\0' == *upToColon) {\n+\t\t\t\t/* Nothing specified means all are enabled */\n+\t\t\t\tsetgclog = TRUE;\n+\t\t\t\tgclog = TRUE;\n+\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t} else {\n+\t\t\t\tchar *upToComma = strsep(&upToColon, \",\");\n+#if defined(DEBUG_XLOG)\n+\t\t\t\tj9tty_printf(PORTLIB, \"upToComma %s upToColon %s\\n\", upToComma, upToColon);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\twhile (TRUE) {\n+\t\t\t\t\tif ('\\0' == *upToComma) {\n+\t\t\t\t\t\t/* Missing tag */\n+xlogerr:\n+\t\t\t\t\t\tCONSUME_ARG(j9vm_args, xlogindex);\n+\t\t\t\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_VM_OPTION_MALFORMED, j9vm_args->actualVMArgs->options[xlogindex].optionString);\n+\t\t\t\t\t\trc = JNI_ERR;\n+\t\t\t\t\t\tgoto xlogret;\n+\t\t\t\t\t}\n+\t\t\t\t\tBOOLEAN checkTagLevel = FALSE;\n+\t\t\t\t\tchar *upToEquals = strsep(&upToComma, \"=\");\n+#if defined(DEBUG_XLOG)\n+\t\t\t\t\tj9tty_printf(PORTLIB, \"upToEquals %s upToComma %s\\n\", upToEquals, upToComma);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\t\tif ('\\0' == *upToEquals) {\n+\t\t\t\t\t\t/* Missing tag */\n+\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tUDATA numtags = 0;\n+\t\t\t\t\t\tchar *tag = strsep(&upToEquals, \"+\");\n+#if defined(DEBUG_XLOG)\n+\t\t\t\t\t\tj9tty_printf(PORTLIB, \"tag %s upToEquals %s\\n\", tag, upToEquals);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\t\t\twhile (TRUE) {\n+\t\t\t\t\t\t\tif ('\\0' == *tag) {\n+\t\t\t\t\t\t\t\t/* Missing tag */\n+\t\t\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tif (0 == j9_cmdla_stricmp(\"all\", tag)) {\n+\t\t\t\t\t\t\t\tif ((numtags > 0) || (NULL != upToEquals)) {\n+\t\t\t\t\t\t\t\t\t/* Invalid use of keyword all */\n+\t\t\t\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\t\tcheckTagLevel = TRUE;\n+\t\t\t\t\t\t\t\t\t/* only gc is recognized from all */\n+\t\t\t\t\t\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t} else if (0 == j9_cmdla_stricmp(\"disable\", tag)) {\n+\t\t\t\t\t\t\t\tif ((numtags > 0) ||\n+\t\t\t\t\t\t\t\t\t(NULL != upToEquals) ||\n+\t\t\t\t\t\t\t\t\t(NULL != upToComma) ||\n+\t\t\t\t\t\t\t\t\t(NULL != upToColon) ||\n+\t\t\t\t\t\t\t\t\t(NULL != fullOptions)\n+\t\t\t\t\t\t\t\t) {\n+\t\t\t\t\t\t\t\t\t/* Invalid use of keyword disable */\n+\t\t\t\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\t\tsetgclog = TRUE;\n+\t\t\t\t\t\t\t\t\tgclog = FALSE;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t} else if ((0 == j9_cmdla_stricmp(\"gc\", tag)) || (0 == j9_cmdla_stricmp(\"gc*\", tag))) {\n+\t\t\t\t\t\t\t\tcheckTagLevel = TRUE;\n+\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tnumtags += 1;\n+\t\t\t\t\t\t\tif (NULL == upToEquals) {\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\ttag = strsep(&upToEquals, \"+\");\n+#if defined(DEBUG_XLOG)\n+\t\t\t\t\t\t\tj9tty_printf(PORTLIB, \"tag %s upToEquals %s\\n\", tag, upToEquals);\n+#endif /* defined(DEBUG_XLOG) */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e51662a18dd8a70475586ede46fcdadbe0e38bb"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjgzOTI2Ng==", "bodyText": "Please remove trailing whitespace.", "url": "https://github.com/eclipse-openj9/openj9/pull/11082#discussion_r516839266", "createdAt": "2020-11-03T17:30:58Z", "author": {"login": "keithc-ca"}, "path": "runtime/vm/jvminit.c", "diffHunk": "@@ -6000,6 +6000,270 @@ processCompressionOptions(J9JavaVM *vm){\n \t}\n }\n \n+/**\n+ * For compatibility when -XX:-LegacyXlogOption is not set, parse -Xlog:gc options and add mappings.\n+ * Anything besides -Xlog:gc, -Xlog:gc:stderr|<file>|file=<file>[:[:]] gives an unrecognized warning,\n+ * although any superset such as -Xlog, -Xlog:all, -Xlog:something,gc, etc. enables gc logging as well. \n+ */\n+static IDATA\n+parseXlogForCompatibility(J9JavaVM *vm)\n+{\n+\tPORT_ACCESS_FROM_JAVAVM(vm);\n+\tIDATA rc = JNI_OK;\n+\tJ9VMInitArgs *j9vm_args = vm->vmArgsArray;\n+\tIDATA xlogindex = FIND_ARG_IN_VMARGS_FORWARD(OPTIONAL_LIST_MATCH, MAPOPT_XLOG_OPT, NULL);\n+\twhile (xlogindex >= 0) {\n+\t\tBOOLEAN unrecognizedOption = FALSE;\n+\t\tBOOLEAN setgclog = FALSE;\n+\t\tBOOLEAN gclog = FALSE;\n+\t\tchar *gclogfile = NULL;\n+\t\tchar xlogoptionsbuf[LARGE_STRING_BUF_SIZE];\n+\t\tchar *xlogoptions = xlogoptionsbuf;\n+\t\t/* Include room for the trailing NULL */\n+\t\tUDATA optionLen = strlen(j9vm_args->actualVMArgs->options[xlogindex].optionString) + 1;\n+\n+\t\tif (optionLen > sizeof(xlogoptionsbuf)) {\n+\t\t\txlogoptions = j9mem_allocate_memory(optionLen, OMRMEM_CATEGORY_VM);\n+\t\t\tif (NULL == xlogoptions) {\n+\t\t\t\tgoto xlogret;\n+\t\t\t}\n+\t\t}\n+\n+\t\tif (OPTION_OK != COPY_OPTION_VALUE(xlogindex, ':', &xlogoptions, optionLen)) {\n+\t\t\trc = JNI_ERR;\n+\t\t\tgoto xlogret;\n+\t\t}\n+\n+\t\tif (NULL == xlogoptions) {\n+\t\t\t/* Reached if just -Xlog is specified */\n+\t\t\tsetgclog = TRUE;\n+\t\t\tgclog = TRUE;\n+\t\t\tunrecognizedOption = TRUE;\n+\t\t} else {\n+\t\t\t/* -Xlog:gc+other=off,a+b=c:file=abc:dec:options */\n+\t\t\tchar *fullOptions = xlogoptions;\n+\t\t\tchar *upToColon = strsep(&fullOptions, \":\");\n+#if defined(DEBUG_XLOG)\n+\t\t\tj9tty_printf(PORTLIB, \"upToColon %s fullOptions %s\\n\", upToColon, fullOptions);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\tif ('\\0' == *upToColon) {\n+\t\t\t\t/* Nothing specified means all are enabled */\n+\t\t\t\tsetgclog = TRUE;\n+\t\t\t\tgclog = TRUE;\n+\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t} else {\n+\t\t\t\tchar *upToComma = strsep(&upToColon, \",\");\n+#if defined(DEBUG_XLOG)\n+\t\t\t\tj9tty_printf(PORTLIB, \"upToComma %s upToColon %s\\n\", upToComma, upToColon);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\twhile (TRUE) {\n+\t\t\t\t\tif ('\\0' == *upToComma) {\n+\t\t\t\t\t\t/* Missing tag */\n+xlogerr:\n+\t\t\t\t\t\tCONSUME_ARG(j9vm_args, xlogindex);\n+\t\t\t\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_VM_OPTION_MALFORMED, j9vm_args->actualVMArgs->options[xlogindex].optionString);\n+\t\t\t\t\t\trc = JNI_ERR;\n+\t\t\t\t\t\tgoto xlogret;\n+\t\t\t\t\t}\n+\t\t\t\t\tBOOLEAN checkTagLevel = FALSE;\n+\t\t\t\t\tchar *upToEquals = strsep(&upToComma, \"=\");\n+#if defined(DEBUG_XLOG)\n+\t\t\t\t\tj9tty_printf(PORTLIB, \"upToEquals %s upToComma %s\\n\", upToEquals, upToComma);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\t\tif ('\\0' == *upToEquals) {\n+\t\t\t\t\t\t/* Missing tag */\n+\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tUDATA numtags = 0;\n+\t\t\t\t\t\tchar *tag = strsep(&upToEquals, \"+\");\n+#if defined(DEBUG_XLOG)\n+\t\t\t\t\t\tj9tty_printf(PORTLIB, \"tag %s upToEquals %s\\n\", tag, upToEquals);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\t\t\twhile (TRUE) {\n+\t\t\t\t\t\t\tif ('\\0' == *tag) {\n+\t\t\t\t\t\t\t\t/* Missing tag */\n+\t\t\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tif (0 == j9_cmdla_stricmp(\"all\", tag)) {\n+\t\t\t\t\t\t\t\tif ((numtags > 0) || (NULL != upToEquals)) {\n+\t\t\t\t\t\t\t\t\t/* Invalid use of keyword all */\n+\t\t\t\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\t\tcheckTagLevel = TRUE;\n+\t\t\t\t\t\t\t\t\t/* only gc is recognized from all */\n+\t\t\t\t\t\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t} else if (0 == j9_cmdla_stricmp(\"disable\", tag)) {\n+\t\t\t\t\t\t\t\tif ((numtags > 0) ||\n+\t\t\t\t\t\t\t\t\t(NULL != upToEquals) ||\n+\t\t\t\t\t\t\t\t\t(NULL != upToComma) ||\n+\t\t\t\t\t\t\t\t\t(NULL != upToColon) ||\n+\t\t\t\t\t\t\t\t\t(NULL != fullOptions)\n+\t\t\t\t\t\t\t\t) {\n+\t\t\t\t\t\t\t\t\t/* Invalid use of keyword disable */\n+\t\t\t\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\t\tsetgclog = TRUE;\n+\t\t\t\t\t\t\t\t\tgclog = FALSE;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t} else if ((0 == j9_cmdla_stricmp(\"gc\", tag)) || (0 == j9_cmdla_stricmp(\"gc*\", tag))) {\n+\t\t\t\t\t\t\t\tcheckTagLevel = TRUE;\n+\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tnumtags += 1;\n+\t\t\t\t\t\t\tif (NULL == upToEquals) {\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\ttag = strsep(&upToEquals, \"+\");\n+#if defined(DEBUG_XLOG)\n+\t\t\t\t\t\t\tj9tty_printf(PORTLIB, \"tag %s upToEquals %s\\n\", tag, upToEquals);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tif (checkTagLevel) {\n+\t\t\t\t\t\t/* look for a level after the '=' */\n+\t\t\t\t\t\tsetgclog = TRUE;\n+\t\t\t\t\t\tif (NULL == upToComma) {\n+\t\t\t\t\t\t\tgclog = TRUE;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tif ('\\0' == *upToComma) {\n+\t\t\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tgclog = 0 != j9_cmdla_stricmp(\"off\", upToComma);\n+\t\t\t\t\t\t\tif (gclog) {\n+\t\t\t\t\t\t\t\t/* OpenJ9 doesn't understand log levels */\n+\t\t\t\t\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tif (NULL == upToColon) {\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n+\t\t\t\t\tupToComma = strsep(&upToColon, \",\");\n+#if defined(DEBUG_XLOG)\n+\t\t\t\t\tj9tty_printf(PORTLIB, \"upToComma %s upToColon %s\\n\", upToComma, upToColon);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif (NULL != fullOptions) {\n+\t\t\t\t/* look at the output method */\n+\t\t\t\tupToColon = strsep(&fullOptions, \":\");\n+#if defined(DEBUG_XLOG)\n+\t\t\t\tj9tty_printf(PORTLIB, \"upToColon %s fullOptions %s\\n\", upToColon, fullOptions);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\tchar *output = strsep(&upToColon, \"=\");\n+#if defined(DEBUG_XLOG)\n+\t\t\t\tj9tty_printf(PORTLIB, \"output %s upToColon %s\\n\", output, upToColon);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\t/* stderr | stdout | file=<filename> | <filename> */\n+\t\t\t\tif (0 == j9_cmdla_stricmp(\"stderr\", output)) {\n+\t\t\t\t\tif (NULL != upToColon) {\n+\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t}\n+\t\t\t\t} else if (0 == j9_cmdla_stricmp(\"stdout\", output)) {\n+\t\t\t\t\tif (NULL != upToColon) {\n+\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t}\n+\t\t\t\t\t/* Can't log to stdout yet */\n+\t\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t\t} else if (NULL == upToColon) {\n+\t\t\t\t\tif ('\\0' != *output) {\n+\t\t\t\t\t\t/* Without `=` anything non-empty is a filename */\n+\t\t\t\t\t\tgclogfile = output;\n+\t\t\t\t\t}\n+\t\t\t\t} else if (0 == j9_cmdla_stricmp(\"file\", output)) {\n+\t\t\t\t\tif (NULL == upToColon) {\n+\t\t\t\t\t\t/* `file=` with no filename specified */\n+\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t}\n+\t\t\t\t\tgclogfile = upToColon;\n+\t\t\t\t} else {\n+\t\t\t\t\t/* Anything else such as `<something>=<something>` is an error */\n+\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t}\n+\t\t\t\t", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e51662a18dd8a70475586ede46fcdadbe0e38bb"}, "originalPosition": 186}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg0MzI4Mg==", "bodyText": "buf should always be freed.", "url": "https://github.com/eclipse-openj9/openj9/pull/11082#discussion_r516843282", "createdAt": "2020-11-03T17:37:41Z", "author": {"login": "keithc-ca"}, "path": "runtime/vm/jvminit.c", "diffHunk": "@@ -6000,6 +6000,270 @@ processCompressionOptions(J9JavaVM *vm){\n \t}\n }\n \n+/**\n+ * For compatibility when -XX:-LegacyXlogOption is not set, parse -Xlog:gc options and add mappings.\n+ * Anything besides -Xlog:gc, -Xlog:gc:stderr|<file>|file=<file>[:[:]] gives an unrecognized warning,\n+ * although any superset such as -Xlog, -Xlog:all, -Xlog:something,gc, etc. enables gc logging as well. \n+ */\n+static IDATA\n+parseXlogForCompatibility(J9JavaVM *vm)\n+{\n+\tPORT_ACCESS_FROM_JAVAVM(vm);\n+\tIDATA rc = JNI_OK;\n+\tJ9VMInitArgs *j9vm_args = vm->vmArgsArray;\n+\tIDATA xlogindex = FIND_ARG_IN_VMARGS_FORWARD(OPTIONAL_LIST_MATCH, MAPOPT_XLOG_OPT, NULL);\n+\twhile (xlogindex >= 0) {\n+\t\tBOOLEAN unrecognizedOption = FALSE;\n+\t\tBOOLEAN setgclog = FALSE;\n+\t\tBOOLEAN gclog = FALSE;\n+\t\tchar *gclogfile = NULL;\n+\t\tchar xlogoptionsbuf[LARGE_STRING_BUF_SIZE];\n+\t\tchar *xlogoptions = xlogoptionsbuf;\n+\t\t/* Include room for the trailing NULL */\n+\t\tUDATA optionLen = strlen(j9vm_args->actualVMArgs->options[xlogindex].optionString) + 1;\n+\n+\t\tif (optionLen > sizeof(xlogoptionsbuf)) {\n+\t\t\txlogoptions = j9mem_allocate_memory(optionLen, OMRMEM_CATEGORY_VM);\n+\t\t\tif (NULL == xlogoptions) {\n+\t\t\t\tgoto xlogret;\n+\t\t\t}\n+\t\t}\n+\n+\t\tif (OPTION_OK != COPY_OPTION_VALUE(xlogindex, ':', &xlogoptions, optionLen)) {\n+\t\t\trc = JNI_ERR;\n+\t\t\tgoto xlogret;\n+\t\t}\n+\n+\t\tif (NULL == xlogoptions) {\n+\t\t\t/* Reached if just -Xlog is specified */\n+\t\t\tsetgclog = TRUE;\n+\t\t\tgclog = TRUE;\n+\t\t\tunrecognizedOption = TRUE;\n+\t\t} else {\n+\t\t\t/* -Xlog:gc+other=off,a+b=c:file=abc:dec:options */\n+\t\t\tchar *fullOptions = xlogoptions;\n+\t\t\tchar *upToColon = strsep(&fullOptions, \":\");\n+#if defined(DEBUG_XLOG)\n+\t\t\tj9tty_printf(PORTLIB, \"upToColon %s fullOptions %s\\n\", upToColon, fullOptions);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\tif ('\\0' == *upToColon) {\n+\t\t\t\t/* Nothing specified means all are enabled */\n+\t\t\t\tsetgclog = TRUE;\n+\t\t\t\tgclog = TRUE;\n+\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t} else {\n+\t\t\t\tchar *upToComma = strsep(&upToColon, \",\");\n+#if defined(DEBUG_XLOG)\n+\t\t\t\tj9tty_printf(PORTLIB, \"upToComma %s upToColon %s\\n\", upToComma, upToColon);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\twhile (TRUE) {\n+\t\t\t\t\tif ('\\0' == *upToComma) {\n+\t\t\t\t\t\t/* Missing tag */\n+xlogerr:\n+\t\t\t\t\t\tCONSUME_ARG(j9vm_args, xlogindex);\n+\t\t\t\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_VM_OPTION_MALFORMED, j9vm_args->actualVMArgs->options[xlogindex].optionString);\n+\t\t\t\t\t\trc = JNI_ERR;\n+\t\t\t\t\t\tgoto xlogret;\n+\t\t\t\t\t}\n+\t\t\t\t\tBOOLEAN checkTagLevel = FALSE;\n+\t\t\t\t\tchar *upToEquals = strsep(&upToComma, \"=\");\n+#if defined(DEBUG_XLOG)\n+\t\t\t\t\tj9tty_printf(PORTLIB, \"upToEquals %s upToComma %s\\n\", upToEquals, upToComma);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\t\tif ('\\0' == *upToEquals) {\n+\t\t\t\t\t\t/* Missing tag */\n+\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tUDATA numtags = 0;\n+\t\t\t\t\t\tchar *tag = strsep(&upToEquals, \"+\");\n+#if defined(DEBUG_XLOG)\n+\t\t\t\t\t\tj9tty_printf(PORTLIB, \"tag %s upToEquals %s\\n\", tag, upToEquals);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\t\t\twhile (TRUE) {\n+\t\t\t\t\t\t\tif ('\\0' == *tag) {\n+\t\t\t\t\t\t\t\t/* Missing tag */\n+\t\t\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tif (0 == j9_cmdla_stricmp(\"all\", tag)) {\n+\t\t\t\t\t\t\t\tif ((numtags > 0) || (NULL != upToEquals)) {\n+\t\t\t\t\t\t\t\t\t/* Invalid use of keyword all */\n+\t\t\t\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\t\tcheckTagLevel = TRUE;\n+\t\t\t\t\t\t\t\t\t/* only gc is recognized from all */\n+\t\t\t\t\t\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t} else if (0 == j9_cmdla_stricmp(\"disable\", tag)) {\n+\t\t\t\t\t\t\t\tif ((numtags > 0) ||\n+\t\t\t\t\t\t\t\t\t(NULL != upToEquals) ||\n+\t\t\t\t\t\t\t\t\t(NULL != upToComma) ||\n+\t\t\t\t\t\t\t\t\t(NULL != upToColon) ||\n+\t\t\t\t\t\t\t\t\t(NULL != fullOptions)\n+\t\t\t\t\t\t\t\t) {\n+\t\t\t\t\t\t\t\t\t/* Invalid use of keyword disable */\n+\t\t\t\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\t\tsetgclog = TRUE;\n+\t\t\t\t\t\t\t\t\tgclog = FALSE;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t} else if ((0 == j9_cmdla_stricmp(\"gc\", tag)) || (0 == j9_cmdla_stricmp(\"gc*\", tag))) {\n+\t\t\t\t\t\t\t\tcheckTagLevel = TRUE;\n+\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tnumtags += 1;\n+\t\t\t\t\t\t\tif (NULL == upToEquals) {\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\ttag = strsep(&upToEquals, \"+\");\n+#if defined(DEBUG_XLOG)\n+\t\t\t\t\t\t\tj9tty_printf(PORTLIB, \"tag %s upToEquals %s\\n\", tag, upToEquals);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tif (checkTagLevel) {\n+\t\t\t\t\t\t/* look for a level after the '=' */\n+\t\t\t\t\t\tsetgclog = TRUE;\n+\t\t\t\t\t\tif (NULL == upToComma) {\n+\t\t\t\t\t\t\tgclog = TRUE;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tif ('\\0' == *upToComma) {\n+\t\t\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tgclog = 0 != j9_cmdla_stricmp(\"off\", upToComma);\n+\t\t\t\t\t\t\tif (gclog) {\n+\t\t\t\t\t\t\t\t/* OpenJ9 doesn't understand log levels */\n+\t\t\t\t\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tif (NULL == upToColon) {\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n+\t\t\t\t\tupToComma = strsep(&upToColon, \",\");\n+#if defined(DEBUG_XLOG)\n+\t\t\t\t\tj9tty_printf(PORTLIB, \"upToComma %s upToColon %s\\n\", upToComma, upToColon);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif (NULL != fullOptions) {\n+\t\t\t\t/* look at the output method */\n+\t\t\t\tupToColon = strsep(&fullOptions, \":\");\n+#if defined(DEBUG_XLOG)\n+\t\t\t\tj9tty_printf(PORTLIB, \"upToColon %s fullOptions %s\\n\", upToColon, fullOptions);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\tchar *output = strsep(&upToColon, \"=\");\n+#if defined(DEBUG_XLOG)\n+\t\t\t\tj9tty_printf(PORTLIB, \"output %s upToColon %s\\n\", output, upToColon);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\t/* stderr | stdout | file=<filename> | <filename> */\n+\t\t\t\tif (0 == j9_cmdla_stricmp(\"stderr\", output)) {\n+\t\t\t\t\tif (NULL != upToColon) {\n+\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t}\n+\t\t\t\t} else if (0 == j9_cmdla_stricmp(\"stdout\", output)) {\n+\t\t\t\t\tif (NULL != upToColon) {\n+\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t}\n+\t\t\t\t\t/* Can't log to stdout yet */\n+\t\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t\t} else if (NULL == upToColon) {\n+\t\t\t\t\tif ('\\0' != *output) {\n+\t\t\t\t\t\t/* Without `=` anything non-empty is a filename */\n+\t\t\t\t\t\tgclogfile = output;\n+\t\t\t\t\t}\n+\t\t\t\t} else if (0 == j9_cmdla_stricmp(\"file\", output)) {\n+\t\t\t\t\tif (NULL == upToColon) {\n+\t\t\t\t\t\t/* `file=` with no filename specified */\n+\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t}\n+\t\t\t\t\tgclogfile = upToColon;\n+\t\t\t\t} else {\n+\t\t\t\t\t/* Anything else such as `<something>=<something>` is an error */\n+\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\tif (NULL != fullOptions) {\n+\t\t\t\t\t/* Anything besides trailing ':'s is unrecognized */\n+\t\t\t\t\tif (('\\0' != *fullOptions) && (':' != *fullOptions)) {\n+\t\t\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tstrsep(&fullOptions, \":\");\n+\t\t\t\t\t\tif ((NULL != fullOptions) && ('\\0' != *fullOptions)) {\n+\t\t\t\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+#if defined(DEBUG_XLOG)\n+\t\tj9tty_printf(PORTLIB, \"setgclog %d gclog %d file %s\\n\", setgclog, gclog, gclogfile);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\tif (setgclog && gclog) {\n+\t\t \tif (NULL != gclogfile) {\n+\t\t\t\tchar *buf = NULL;\n+\t\t\t\tchar timeBuf[20];\n+\t\t\t\tUDATA sizeRequired = 0;\n+\t\t\t\tstruct J9StringTokens *stringTokens = j9str_create_tokens(j9time_current_time_millis());\n+\t\t\t\tif (NULL == stringTokens) {\n+\t\t\t\t\trc = JNI_ERR;\n+\t\t\t\t\tgoto xlogret;\n+\t\t\t\t}\n+\t\t\t\tj9str_subst_tokens(timeBuf, sizeof(timeBuf), \"%Y-%m-%d_%H-%M-%S\", stringTokens);\n+\n+\t\t\t\tif (j9str_set_token(PORTLIB, stringTokens, \"p\", \"%lld\", j9sysinfo_get_pid()) ||\n+\t\t\t\t\tj9str_set_token(PORTLIB, stringTokens, \"t\", \"%s\", timeBuf)\n+\t\t\t\t) {\n+\t\t\t\t\tj9str_free_tokens(stringTokens);\n+\t\t\t\t\trc = JNI_ERR;\n+\t\t\t\t\tgoto xlogret;\n+\t\t\t\t}\n+\t\t\t\tsizeRequired = j9str_subst_tokens(NULL, 0, gclogfile, stringTokens);\n+\t\t\t\t/* sizeRequired already includes space for the NULL */\n+\t\t\t\tbuf = j9mem_allocate_memory(sizeof(MAPOPT_XVERBOSEGCLOG) - 1 + sizeRequired, OMRMEM_CATEGORY_VM);\n+\t\t\t\tif (NULL == buf) {\n+\t\t\t\t\tj9str_free_tokens(stringTokens);\n+\t\t\t\t\trc = JNI_ERR;\n+\t\t\t\t\tgoto xlogret;\n+\t\t\t\t}\n+\t\t\t\tstrcpy(buf, MAPOPT_XVERBOSEGCLOG);\n+\t\t\t\tj9str_subst_tokens(buf + sizeof(MAPOPT_XVERBOSEGCLOG) - 1, sizeRequired, gclogfile, stringTokens);\n+\t\t\t\tj9str_free_tokens(stringTokens);\n+\t\t\t\tj9tty_printf(PORTLIB, \"mapping %s to %s\\n\", j9vm_args->actualVMArgs->options[xlogindex].optionString, buf);\n+\t\t\t\tif (RC_FAILED == registerCmdLineMapping(vm, j9vm_args->actualVMArgs->options[xlogindex].optionString, buf, EXACT_MAP_NO_OPTIONS)) {\n+\t\t\t\t\tj9mem_free_memory(buf);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e51662a18dd8a70475586ede46fcdadbe0e38bb"}, "originalPosition": 235}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyODA1Njgy", "url": "https://github.com/eclipse-openj9/openj9/pull/11082#pullrequestreview-522805682", "createdAt": "2020-11-03T19:19:04Z", "commit": {"oid": "3fe44cb2851f2f6f217817c5a619bae60641040a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOToxOTowNFrOHs9GVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOToxOTowNFrOHs9GVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkwMDQzNw==", "bodyText": "nit: indented one extra space", "url": "https://github.com/eclipse-openj9/openj9/pull/11082#discussion_r516900437", "createdAt": "2020-11-03T19:19:04Z", "author": {"login": "keithc-ca"}, "path": "runtime/vm/jvminit.c", "diffHunk": "@@ -6000,6 +6000,291 @@ processCompressionOptions(J9JavaVM *vm){\n \t}\n }\n \n+/**\n+ * Returns the original *source.\n+ * Find the next delimiter and replace it with NULL. Set *source to the character\n+ * after the delimiter. If no delimiter is found, set *source to NULL.\n+ */\n+static char *\n+strUpToDelimiter(char **source, char delimiter)\n+{\n+\tchar ch = '\\0';\n+\tchar *result = *source;\n+\twhile ('\\0' != (ch = **source)) {\n+\t\tif (ch == delimiter) {\n+\t\t\t**source = '\\0';\n+\t\t\t*source += 1;\n+\t\t\t return result;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fe44cb2851f2f6f217817c5a619bae60641040a"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzNDAzNjE1", "url": "https://github.com/eclipse-openj9/openj9/pull/11082#pullrequestreview-523403615", "createdAt": "2020-11-04T14:19:17Z", "commit": {"oid": "e39dc3f97d6b8388fc5e1a5cc222dea074452b81"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDoxOToxN1rOHtaJgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDoxOToxN1rOHtaJgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM3NjM4NA==", "bodyText": "The l-value (constant) xlogoptionsbuf should be on the left.", "url": "https://github.com/eclipse-openj9/openj9/pull/11082#discussion_r517376384", "createdAt": "2020-11-04T14:19:17Z", "author": {"login": "keithc-ca"}, "path": "runtime/vm/jvminit.c", "diffHunk": "@@ -6000,6 +6002,291 @@ processCompressionOptions(J9JavaVM *vm){\n \t}\n }\n \n+/**\n+ * Returns the original *source.\n+ * Find the next delimiter and replace it with NULL. Set *source to the character\n+ * after the delimiter. If no delimiter is found, set *source to NULL.\n+ */\n+static char *\n+strUpToDelimiter(char **source, char delimiter)\n+{\n+\tchar ch = '\\0';\n+\tchar *result = *source;\n+\twhile ('\\0' != (ch = **source)) {\n+\t\tif (ch == delimiter) {\n+\t\t\t**source = '\\0';\n+\t\t\t*source += 1;\n+\t\t\treturn result;\n+\t\t}\n+\t\t*source += 1;\n+\t}\n+\t*source = NULL;\n+\treturn result;\n+}\n+\n+/**\n+ * For compatibility when -XX:-LegacyXlogOption is not set, parse -Xlog:gc options and add mappings.\n+ * Anything besides -Xlog:gc, -Xlog:gc:stderr|<file>|file=<file>[:[:]] gives an unrecognized warning,\n+ * although any superset such as -Xlog, -Xlog:all, -Xlog:something,gc, etc. enables gc logging as well.\n+ */\n+static IDATA\n+parseXlogForCompatibility(J9JavaVM *vm)\n+{\n+\tPORT_ACCESS_FROM_JAVAVM(vm);\n+\tIDATA rc = JNI_OK;\n+\tJ9VMInitArgs *j9vm_args = vm->vmArgsArray;\n+\tIDATA xlogindex = FIND_ARG_IN_VMARGS_FORWARD(OPTIONAL_LIST_MATCH, MAPOPT_XLOG_OPT, NULL);\n+\twhile (xlogindex >= 0) {\n+\t\tBOOLEAN unrecognizedOption = FALSE;\n+\t\tBOOLEAN setgclog = FALSE;\n+\t\tBOOLEAN gclog = FALSE;\n+\t\tchar *gclogfile = NULL;\n+\t\tchar xlogoptionsbuf[LARGE_STRING_BUF_SIZE];\n+\t\tchar *xlogoptions = xlogoptionsbuf;\n+\t\t/* Include room for the trailing NULL */\n+\t\tUDATA optionLen = strlen(j9vm_args->actualVMArgs->options[xlogindex].optionString) + 1;\n+\n+\t\tif (optionLen > sizeof(xlogoptionsbuf)) {\n+\t\t\txlogoptions = j9mem_allocate_memory(optionLen, OMRMEM_CATEGORY_VM);\n+\t\t\tif (NULL == xlogoptions) {\n+\t\t\t\trc = JNI_ERR;\n+\t\t\t\tgoto xlogret;\n+\t\t\t}\n+\t\t}\n+\n+\t\tif (OPTION_OK != COPY_OPTION_VALUE(xlogindex, ':', &xlogoptions, optionLen)) {\n+\t\t\trc = JNI_ERR;\n+\t\t\tgoto xlogret;\n+\t\t}\n+\n+\t\tif (NULL == xlogoptions) {\n+\t\t\t/* Reached if just -Xlog is specified */\n+\t\t\tsetgclog = TRUE;\n+\t\t\tgclog = TRUE;\n+\t\t\tunrecognizedOption = TRUE;\n+\t\t} else {\n+\t\t\t/* -Xlog:gc+other=off,a+b=c:file=abc:dec:options */\n+\t\t\tchar *fullOptions = xlogoptions;\n+\t\t\tchar *upToColon = strUpToDelimiter(&fullOptions, ':');\n+#if defined(DEBUG_XLOG)\n+\t\t\tj9tty_printf(PORTLIB, \"upToColon %s fullOptions %s\\n\", upToColon, fullOptions);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\tif ('\\0' == *upToColon) {\n+\t\t\t\t/* Nothing specified means all are enabled */\n+\t\t\t\tsetgclog = TRUE;\n+\t\t\t\tgclog = TRUE;\n+\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t} else {\n+\t\t\t\tchar *upToComma = strUpToDelimiter(&upToColon, ',');\n+\t\t\t\twhile (TRUE) {\n+\t\t\t\t\tBOOLEAN checkTagLevel = FALSE;\n+\t\t\t\t\tchar *upToEquals = NULL;\n+#if defined(DEBUG_XLOG)\n+\t\t\t\t\tj9tty_printf(PORTLIB, \"upToComma %s upToColon %s\\n\", upToComma, upToColon);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\t\tif ('\\0' == *upToComma) {\n+\t\t\t\t\t\t/* Missing tag */\n+xlogerr:\n+\t\t\t\t\t\tCONSUME_ARG(j9vm_args, xlogindex);\n+\t\t\t\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_VM_OPTION_MALFORMED, j9vm_args->actualVMArgs->options[xlogindex].optionString);\n+\t\t\t\t\t\trc = JNI_ERR;\n+\t\t\t\t\t\tgoto xlogret;\n+\t\t\t\t\t}\n+\t\t\t\t\tupToEquals = strUpToDelimiter(&upToComma, '=');\n+#if defined(DEBUG_XLOG)\n+\t\t\t\t\tj9tty_printf(PORTLIB, \"upToEquals %s upToComma %s\\n\", upToEquals, upToComma);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\t\tif ('\\0' == *upToEquals) {\n+\t\t\t\t\t\t/* Missing tag */\n+\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tUDATA numtags = 0;\n+\t\t\t\t\t\tconst char *tag = strUpToDelimiter(&upToEquals, '+');\n+\t\t\t\t\t\twhile (TRUE) {\n+#if defined(DEBUG_XLOG)\n+\t\t\t\t\t\t\tj9tty_printf(PORTLIB, \"tag %s upToEquals %s\\n\", tag, upToEquals);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\t\t\t\tif ('\\0' == *tag) {\n+\t\t\t\t\t\t\t\t/* Missing tag */\n+\t\t\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tif (0 == j9_cmdla_stricmp(\"all\", tag)) {\n+\t\t\t\t\t\t\t\tif ((numtags > 0) || (NULL != upToEquals)) {\n+\t\t\t\t\t\t\t\t\t/* Invalid use of keyword all */\n+\t\t\t\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\t\tcheckTagLevel = TRUE;\n+\t\t\t\t\t\t\t\t\t/* only gc is recognized from all */\n+\t\t\t\t\t\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t} else if (0 == j9_cmdla_stricmp(\"disable\", tag)) {\n+\t\t\t\t\t\t\t\tif ((numtags > 0)\n+\t\t\t\t\t\t\t\t\t|| (NULL != upToEquals)\n+\t\t\t\t\t\t\t\t\t|| (NULL != upToComma)\n+\t\t\t\t\t\t\t\t\t|| (NULL != upToColon)\n+\t\t\t\t\t\t\t\t\t|| (NULL != fullOptions)\n+\t\t\t\t\t\t\t\t) {\n+\t\t\t\t\t\t\t\t\t/* Invalid use of keyword disable */\n+\t\t\t\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\t\tsetgclog = TRUE;\n+\t\t\t\t\t\t\t\t\tgclog = FALSE;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t} else if ((0 == j9_cmdla_stricmp(\"gc\", tag)) || (0 == j9_cmdla_stricmp(\"gc*\", tag))) {\n+\t\t\t\t\t\t\t\tcheckTagLevel = TRUE;\n+\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tnumtags += 1;\n+\t\t\t\t\t\t\tif (NULL == upToEquals) {\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\ttag = strUpToDelimiter(&upToEquals, '+');\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tif (checkTagLevel) {\n+\t\t\t\t\t\t/* look for a level after the '=' */\n+\t\t\t\t\t\tsetgclog = TRUE;\n+\t\t\t\t\t\tif (NULL == upToComma) {\n+\t\t\t\t\t\t\tgclog = TRUE;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tif ('\\0' == *upToComma) {\n+\t\t\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tgclog = 0 != j9_cmdla_stricmp(\"off\", upToComma);\n+\t\t\t\t\t\t\tif (gclog) {\n+\t\t\t\t\t\t\t\t/* OpenJ9 doesn't understand log levels */\n+\t\t\t\t\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tif (NULL == upToColon) {\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n+\t\t\t\t\tupToComma = strUpToDelimiter(&upToColon, ',');\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif (NULL != fullOptions) {\n+\t\t\t\t/* look at the output method */\n+\t\t\t\tchar *output = NULL;\n+\t\t\t\tupToColon = strUpToDelimiter(&fullOptions, ':');\n+#if defined(DEBUG_XLOG)\n+\t\t\t\tj9tty_printf(PORTLIB, \"upToColon %s fullOptions %s\\n\", upToColon, fullOptions);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\toutput = strUpToDelimiter(&upToColon, '=');\n+#if defined(DEBUG_XLOG)\n+\t\t\t\tj9tty_printf(PORTLIB, \"output %s upToColon %s\\n\", output, upToColon);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\t/* stderr | stdout | file=<filename> | <filename> */\n+\t\t\t\tif (0 == j9_cmdla_stricmp(\"stderr\", output)) {\n+\t\t\t\t\tif (NULL != upToColon) {\n+\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t}\n+\t\t\t\t} else if (0 == j9_cmdla_stricmp(\"stdout\", output)) {\n+\t\t\t\t\tif (NULL != upToColon) {\n+\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t}\n+\t\t\t\t\t/* Can't log to stdout yet */\n+\t\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t\t} else if (NULL == upToColon) {\n+\t\t\t\t\tif ('\\0' != *output) {\n+\t\t\t\t\t\t/* Without `=` anything non-empty is a filename */\n+\t\t\t\t\t\tgclogfile = output;\n+\t\t\t\t\t}\n+\t\t\t\t} else if (0 == j9_cmdla_stricmp(\"file\", output)) {\n+\t\t\t\t\tif (NULL == upToColon) {\n+\t\t\t\t\t\t/* `file=` with no filename specified */\n+\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t}\n+\t\t\t\t\tgclogfile = upToColon;\n+\t\t\t\t} else {\n+\t\t\t\t\t/* Anything else such as `<something>=<something>` is an error */\n+\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t}\n+\n+\t\t\t\tif (NULL != fullOptions) {\n+\t\t\t\t\t/* Anything besides trailing ':'s is unrecognized */\n+\t\t\t\t\tif (('\\0' != *fullOptions) && (':' != *fullOptions)) {\n+\t\t\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tstrUpToDelimiter(&fullOptions, ':');\n+\t\t\t\t\t\tif ((NULL != fullOptions) && ('\\0' != *fullOptions)) {\n+\t\t\t\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+#if defined(DEBUG_XLOG)\n+\t\tj9tty_printf(PORTLIB, \"setgclog %d gclog %d file %s\\n\", setgclog, gclog, gclogfile);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\tif (setgclog && gclog) {\n+\t\t \tif (NULL != gclogfile) {\n+\t\t\t\tIDATA mapRc = 0;\n+\t\t\t\tchar *buf = NULL;\n+\t\t\t\tchar timeBuf[20];\n+\t\t\t\tUDATA sizeRequired = 0;\n+\t\t\t\tstruct J9StringTokens *stringTokens = j9str_create_tokens(j9time_current_time_millis());\n+\t\t\t\tif (NULL == stringTokens) {\n+\t\t\t\t\trc = JNI_ERR;\n+\t\t\t\t\tgoto xlogret;\n+\t\t\t\t}\n+\t\t\t\tj9str_subst_tokens(timeBuf, sizeof(timeBuf), \"%Y-%m-%d_%H-%M-%S\", stringTokens);\n+\n+\t\t\t\tif (j9str_set_token(PORTLIB, stringTokens, \"p\", \"%lld\", j9sysinfo_get_pid())\n+\t\t\t\t\t|| j9str_set_token(PORTLIB, stringTokens, \"t\", \"%s\", timeBuf)\n+\t\t\t\t) {\n+\t\t\t\t\tj9str_free_tokens(stringTokens);\n+\t\t\t\t\trc = JNI_ERR;\n+\t\t\t\t\tgoto xlogret;\n+\t\t\t\t}\n+\t\t\t\tsizeRequired = j9str_subst_tokens(NULL, 0, gclogfile, stringTokens);\n+\t\t\t\t/* sizeRequired already includes space for the NULL */\n+\t\t\t\tbuf = j9mem_allocate_memory(sizeof(MAPOPT_XVERBOSEGCLOG) - 1 + sizeRequired, OMRMEM_CATEGORY_VM);\n+\t\t\t\tif (NULL == buf) {\n+\t\t\t\t\tj9str_free_tokens(stringTokens);\n+\t\t\t\t\trc = JNI_ERR;\n+\t\t\t\t\tgoto xlogret;\n+\t\t\t\t}\n+\t\t\t\tstrcpy(buf, MAPOPT_XVERBOSEGCLOG);\n+\t\t\t\tj9str_subst_tokens(buf + sizeof(MAPOPT_XVERBOSEGCLOG) - 1, sizeRequired, gclogfile, stringTokens);\n+\t\t\t\tj9str_free_tokens(stringTokens);\n+\t\t\t\tj9tty_printf(PORTLIB, \"mapping %s to %s\\n\", j9vm_args->actualVMArgs->options[xlogindex].optionString, buf);\n+\t\t\t\tmapRc = registerCmdLineMapping(vm, j9vm_args->actualVMArgs->options[xlogindex].optionString, buf, EXACT_MAP_NO_OPTIONS);\n+\t\t\t\tj9mem_free_memory(buf);\n+\t\t\t\tif (RC_FAILED == mapRc) {\n+\t\t\t\t\trc = JNI_ERR;\n+\t\t\t\t\tgoto xlogret;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tif (RC_FAILED == registerCmdLineMapping(vm, j9vm_args->actualVMArgs->options[xlogindex].optionString, MAPOPT_VERBOSE_GC, EXACT_MAP_NO_OPTIONS)) {\n+\t\t\t\t\trc = JNI_ERR;\n+\t\t\t\t\tgoto xlogret;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} else if (setgclog) {\n+\t\t\t/* ATM there is no OpenJ9 option to disable gc logging */\n+\t\t\tunrecognizedOption = TRUE;\n+\t\t} else {\n+\t\t\tunrecognizedOption = TRUE;\n+\t\t}\n+\t\tif (unrecognizedOption) {\n+\t\t\tCONSUME_ARG(j9vm_args, xlogindex);\n+\t\t\tj9nls_printf(PORTLIB, J9NLS_WARNING, J9NLS_VM_UNRECOGNISED_CMD_LINE_OPT, j9vm_args->actualVMArgs->options[xlogindex].optionString);\n+\t\t}\n+\n+xlogret:\n+\t\tif (xlogoptions != xlogoptionsbuf) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e39dc3f97d6b8388fc5e1a5cc222dea074452b81"}, "originalPosition": 309}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzNDc4NzIz", "url": "https://github.com/eclipse-openj9/openj9/pull/11082#pullrequestreview-523478723", "createdAt": "2020-11-04T15:35:36Z", "commit": {"oid": "90f95e4fa448be1745c6820a1f035aafb8a0fe12"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNTozNTozNlrOHtdlFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNTozNTozNlrOHtdlFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQzMjU5Nw==", "bodyText": "nit: strange indentation (space between tabs)", "url": "https://github.com/eclipse-openj9/openj9/pull/11082#discussion_r517432597", "createdAt": "2020-11-04T15:35:36Z", "author": {"login": "keithc-ca"}, "path": "runtime/vm/jvminit.c", "diffHunk": "@@ -6000,6 +6002,291 @@ processCompressionOptions(J9JavaVM *vm){\n \t}\n }\n \n+/**\n+ * Returns the original *source.\n+ * Find the next delimiter and replace it with NULL. Set *source to the character\n+ * after the delimiter. If no delimiter is found, set *source to NULL.\n+ */\n+static char *\n+strUpToDelimiter(char **source, char delimiter)\n+{\n+\tchar ch = '\\0';\n+\tchar *result = *source;\n+\twhile ('\\0' != (ch = **source)) {\n+\t\tif (ch == delimiter) {\n+\t\t\t**source = '\\0';\n+\t\t\t*source += 1;\n+\t\t\treturn result;\n+\t\t}\n+\t\t*source += 1;\n+\t}\n+\t*source = NULL;\n+\treturn result;\n+}\n+\n+/**\n+ * For compatibility when -XX:-LegacyXlogOption is not set, parse -Xlog:gc options and add mappings.\n+ * Anything besides -Xlog:gc, -Xlog:gc:stderr|<file>|file=<file>[:[:]] gives an unrecognized warning,\n+ * although any superset such as -Xlog, -Xlog:all, -Xlog:something,gc, etc. enables gc logging as well.\n+ */\n+static IDATA\n+parseXlogForCompatibility(J9JavaVM *vm)\n+{\n+\tPORT_ACCESS_FROM_JAVAVM(vm);\n+\tIDATA rc = JNI_OK;\n+\tJ9VMInitArgs *j9vm_args = vm->vmArgsArray;\n+\tIDATA xlogindex = FIND_ARG_IN_VMARGS_FORWARD(OPTIONAL_LIST_MATCH, MAPOPT_XLOG_OPT, NULL);\n+\twhile (xlogindex >= 0) {\n+\t\tBOOLEAN unrecognizedOption = FALSE;\n+\t\tBOOLEAN setgclog = FALSE;\n+\t\tBOOLEAN gclog = FALSE;\n+\t\tchar *gclogfile = NULL;\n+\t\tchar xlogoptionsbuf[LARGE_STRING_BUF_SIZE];\n+\t\tchar *xlogoptions = xlogoptionsbuf;\n+\t\t/* Include room for the trailing NULL */\n+\t\tUDATA optionLen = strlen(j9vm_args->actualVMArgs->options[xlogindex].optionString) + 1;\n+\n+\t\tif (optionLen > sizeof(xlogoptionsbuf)) {\n+\t\t\txlogoptions = j9mem_allocate_memory(optionLen, OMRMEM_CATEGORY_VM);\n+\t\t\tif (NULL == xlogoptions) {\n+\t\t\t\trc = JNI_ERR;\n+\t\t\t\tgoto xlogret;\n+\t\t\t}\n+\t\t}\n+\n+\t\tif (OPTION_OK != COPY_OPTION_VALUE(xlogindex, ':', &xlogoptions, optionLen)) {\n+\t\t\trc = JNI_ERR;\n+\t\t\tgoto xlogret;\n+\t\t}\n+\n+\t\tif (NULL == xlogoptions) {\n+\t\t\t/* Reached if just -Xlog is specified */\n+\t\t\tsetgclog = TRUE;\n+\t\t\tgclog = TRUE;\n+\t\t\tunrecognizedOption = TRUE;\n+\t\t} else {\n+\t\t\t/* -Xlog:gc+other=off,a+b=c:file=abc:dec:options */\n+\t\t\tchar *fullOptions = xlogoptions;\n+\t\t\tchar *upToColon = strUpToDelimiter(&fullOptions, ':');\n+#if defined(DEBUG_XLOG)\n+\t\t\tj9tty_printf(PORTLIB, \"upToColon %s fullOptions %s\\n\", upToColon, fullOptions);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\tif ('\\0' == *upToColon) {\n+\t\t\t\t/* Nothing specified means all are enabled */\n+\t\t\t\tsetgclog = TRUE;\n+\t\t\t\tgclog = TRUE;\n+\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t} else {\n+\t\t\t\tchar *upToComma = strUpToDelimiter(&upToColon, ',');\n+\t\t\t\twhile (TRUE) {\n+\t\t\t\t\tBOOLEAN checkTagLevel = FALSE;\n+\t\t\t\t\tchar *upToEquals = NULL;\n+#if defined(DEBUG_XLOG)\n+\t\t\t\t\tj9tty_printf(PORTLIB, \"upToComma %s upToColon %s\\n\", upToComma, upToColon);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\t\tif ('\\0' == *upToComma) {\n+\t\t\t\t\t\t/* Missing tag */\n+xlogerr:\n+\t\t\t\t\t\tCONSUME_ARG(j9vm_args, xlogindex);\n+\t\t\t\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_VM_OPTION_MALFORMED, j9vm_args->actualVMArgs->options[xlogindex].optionString);\n+\t\t\t\t\t\trc = JNI_ERR;\n+\t\t\t\t\t\tgoto xlogret;\n+\t\t\t\t\t}\n+\t\t\t\t\tupToEquals = strUpToDelimiter(&upToComma, '=');\n+#if defined(DEBUG_XLOG)\n+\t\t\t\t\tj9tty_printf(PORTLIB, \"upToEquals %s upToComma %s\\n\", upToEquals, upToComma);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\t\tif ('\\0' == *upToEquals) {\n+\t\t\t\t\t\t/* Missing tag */\n+\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tUDATA numtags = 0;\n+\t\t\t\t\t\tconst char *tag = strUpToDelimiter(&upToEquals, '+');\n+\t\t\t\t\t\twhile (TRUE) {\n+#if defined(DEBUG_XLOG)\n+\t\t\t\t\t\t\tj9tty_printf(PORTLIB, \"tag %s upToEquals %s\\n\", tag, upToEquals);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\t\t\t\tif ('\\0' == *tag) {\n+\t\t\t\t\t\t\t\t/* Missing tag */\n+\t\t\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tif (0 == j9_cmdla_stricmp(\"all\", tag)) {\n+\t\t\t\t\t\t\t\tif ((numtags > 0) || (NULL != upToEquals)) {\n+\t\t\t\t\t\t\t\t\t/* Invalid use of keyword all */\n+\t\t\t\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\t\tcheckTagLevel = TRUE;\n+\t\t\t\t\t\t\t\t\t/* only gc is recognized from all */\n+\t\t\t\t\t\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t} else if (0 == j9_cmdla_stricmp(\"disable\", tag)) {\n+\t\t\t\t\t\t\t\tif ((numtags > 0)\n+\t\t\t\t\t\t\t\t\t|| (NULL != upToEquals)\n+\t\t\t\t\t\t\t\t\t|| (NULL != upToComma)\n+\t\t\t\t\t\t\t\t\t|| (NULL != upToColon)\n+\t\t\t\t\t\t\t\t\t|| (NULL != fullOptions)\n+\t\t\t\t\t\t\t\t) {\n+\t\t\t\t\t\t\t\t\t/* Invalid use of keyword disable */\n+\t\t\t\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\t\tsetgclog = TRUE;\n+\t\t\t\t\t\t\t\t\tgclog = FALSE;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t} else if ((0 == j9_cmdla_stricmp(\"gc\", tag)) || (0 == j9_cmdla_stricmp(\"gc*\", tag))) {\n+\t\t\t\t\t\t\t\tcheckTagLevel = TRUE;\n+\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tnumtags += 1;\n+\t\t\t\t\t\t\tif (NULL == upToEquals) {\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\ttag = strUpToDelimiter(&upToEquals, '+');\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tif (checkTagLevel) {\n+\t\t\t\t\t\t/* look for a level after the '=' */\n+\t\t\t\t\t\tsetgclog = TRUE;\n+\t\t\t\t\t\tif (NULL == upToComma) {\n+\t\t\t\t\t\t\tgclog = TRUE;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tif ('\\0' == *upToComma) {\n+\t\t\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tgclog = 0 != j9_cmdla_stricmp(\"off\", upToComma);\n+\t\t\t\t\t\t\tif (gclog) {\n+\t\t\t\t\t\t\t\t/* OpenJ9 doesn't understand log levels */\n+\t\t\t\t\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tif (NULL == upToColon) {\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n+\t\t\t\t\tupToComma = strUpToDelimiter(&upToColon, ',');\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif (NULL != fullOptions) {\n+\t\t\t\t/* look at the output method */\n+\t\t\t\tchar *output = NULL;\n+\t\t\t\tupToColon = strUpToDelimiter(&fullOptions, ':');\n+#if defined(DEBUG_XLOG)\n+\t\t\t\tj9tty_printf(PORTLIB, \"upToColon %s fullOptions %s\\n\", upToColon, fullOptions);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\toutput = strUpToDelimiter(&upToColon, '=');\n+#if defined(DEBUG_XLOG)\n+\t\t\t\tj9tty_printf(PORTLIB, \"output %s upToColon %s\\n\", output, upToColon);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\t\t\t/* stderr | stdout | file=<filename> | <filename> */\n+\t\t\t\tif (0 == j9_cmdla_stricmp(\"stderr\", output)) {\n+\t\t\t\t\tif (NULL != upToColon) {\n+\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t}\n+\t\t\t\t} else if (0 == j9_cmdla_stricmp(\"stdout\", output)) {\n+\t\t\t\t\tif (NULL != upToColon) {\n+\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t}\n+\t\t\t\t\t/* Can't log to stdout yet */\n+\t\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t\t} else if (NULL == upToColon) {\n+\t\t\t\t\tif ('\\0' != *output) {\n+\t\t\t\t\t\t/* Without `=` anything non-empty is a filename */\n+\t\t\t\t\t\tgclogfile = output;\n+\t\t\t\t\t}\n+\t\t\t\t} else if (0 == j9_cmdla_stricmp(\"file\", output)) {\n+\t\t\t\t\tif (NULL == upToColon) {\n+\t\t\t\t\t\t/* `file=` with no filename specified */\n+\t\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t\t}\n+\t\t\t\t\tgclogfile = upToColon;\n+\t\t\t\t} else {\n+\t\t\t\t\t/* Anything else such as `<something>=<something>` is an error */\n+\t\t\t\t\tgoto xlogerr;\n+\t\t\t\t}\n+\n+\t\t\t\tif (NULL != fullOptions) {\n+\t\t\t\t\t/* Anything besides trailing ':'s is unrecognized */\n+\t\t\t\t\tif (('\\0' != *fullOptions) && (':' != *fullOptions)) {\n+\t\t\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tstrUpToDelimiter(&fullOptions, ':');\n+\t\t\t\t\t\tif ((NULL != fullOptions) && ('\\0' != *fullOptions)) {\n+\t\t\t\t\t\t\tunrecognizedOption = TRUE;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+#if defined(DEBUG_XLOG)\n+\t\tj9tty_printf(PORTLIB, \"setgclog %d gclog %d file %s\\n\", setgclog, gclog, gclogfile);\n+#endif /* defined(DEBUG_XLOG) */\n+\t\tif (setgclog && gclog) {\n+\t\t \tif (NULL != gclogfile) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90f95e4fa448be1745c6820a1f035aafb8a0fe12"}, "originalPosition": 254}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "90f95e4fa448be1745c6820a1f035aafb8a0fe12", "author": {"user": {"login": "pshipton", "name": "Peter Shipton"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/90f95e4fa448be1745c6820a1f035aafb8a0fe12", "committedDate": "2020-11-04T14:53:24Z", "message": "Address review command and set parseError on failure\n\nSigned-off-by: Peter Shipton <Peter_Shipton@ca.ibm.com>"}, "afterCommit": {"oid": "d585fa37f1f82b60659de8dbba828067b3c7db5f", "author": {"user": {"login": "pshipton", "name": "Peter Shipton"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/d585fa37f1f82b60659de8dbba828067b3c7db5f", "committedDate": "2020-11-04T17:52:09Z", "message": "Fix bug in freeJavaVM()\n\nSigned-off-by: Peter Shipton <Peter_Shipton@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d703e35050dfcda2c8430b147e3159c481cf1371", "author": {"user": {"login": "pshipton", "name": "Peter Shipton"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/d703e35050dfcda2c8430b147e3159c481cf1371", "committedDate": "2020-11-06T22:13:00Z", "message": "More fixes\n\nSigned-off-by: Peter Shipton <Peter_Shipton@ca.ibm.com>"}, "afterCommit": {"oid": "d152ef4e160b35b162be113a102e5f5f1adf595c", "author": {"user": {"login": "pshipton", "name": "Peter Shipton"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/d152ef4e160b35b162be113a102e5f5f1adf595c", "committedDate": "2020-11-06T22:39:42Z", "message": "Add -Xlog tests\n\nSigned-off-by: Peter Shipton <Peter_Shipton@ca.ibm.com>\nUpdate\n\nSigned-off-by: Peter Shipton <Peter_Shipton@ca.ibm.com>\nFix tests\n\nSigned-off-by: Peter Shipton <Peter_Shipton@ca.ibm.com>\nMore fixes\n\nSigned-off-by: Peter Shipton <Peter_Shipton@ca.ibm.com>\nRemove unfeasible tests\n\nSigned-off-by: Peter Shipton <Peter_Shipton@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d152ef4e160b35b162be113a102e5f5f1adf595c", "author": {"user": {"login": "pshipton", "name": "Peter Shipton"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/d152ef4e160b35b162be113a102e5f5f1adf595c", "committedDate": "2020-11-06T22:39:42Z", "message": "Add -Xlog tests\n\nSigned-off-by: Peter Shipton <Peter_Shipton@ca.ibm.com>\nUpdate\n\nSigned-off-by: Peter Shipton <Peter_Shipton@ca.ibm.com>\nFix tests\n\nSigned-off-by: Peter Shipton <Peter_Shipton@ca.ibm.com>\nMore fixes\n\nSigned-off-by: Peter Shipton <Peter_Shipton@ca.ibm.com>\nRemove unfeasible tests\n\nSigned-off-by: Peter Shipton <Peter_Shipton@ca.ibm.com>"}, "afterCommit": {"oid": "92ea4c9c12d0499cb9e7c9faee74e5712ad76278", "author": {"user": {"login": "pshipton", "name": "Peter Shipton"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/92ea4c9c12d0499cb9e7c9faee74e5712ad76278", "committedDate": "2020-11-06T22:44:40Z", "message": "Add -Xlog tests\n\nSigned-off-by: Peter Shipton <Peter_Shipton@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "92ea4c9c12d0499cb9e7c9faee74e5712ad76278", "author": {"user": {"login": "pshipton", "name": "Peter Shipton"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/92ea4c9c12d0499cb9e7c9faee74e5712ad76278", "committedDate": "2020-11-06T22:44:40Z", "message": "Add -Xlog tests\n\nSigned-off-by: Peter Shipton <Peter_Shipton@ca.ibm.com>"}, "afterCommit": {"oid": "28930fa064b4120ea4bcdbdf28f1ed60c246b7e2", "author": {"user": {"login": "pshipton", "name": "Peter Shipton"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/28930fa064b4120ea4bcdbdf28f1ed60c246b7e2", "committedDate": "2020-11-06T22:46:51Z", "message": "Add -Xlog tests\n\nSigned-off-by: Peter Shipton <Peter_Shipton@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2NDQ5NDQx", "url": "https://github.com/eclipse-openj9/openj9/pull/11082#pullrequestreview-526449441", "createdAt": "2020-11-09T16:45:47Z", "commit": {"oid": "28930fa064b4120ea4bcdbdf28f1ed60c246b7e2"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNjo0NTo0OFrOHv3rJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNjo0OTo1MFrOHv373w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk1NzI4Nw==", "bodyText": "Please remove the unnecessary indentation of the copyright notices (in all .xml files).", "url": "https://github.com/eclipse-openj9/openj9/pull/11082#discussion_r519957287", "createdAt": "2020-11-09T16:45:48Z", "author": {"login": "keithc-ca"}, "path": "test/functional/cmdLineTests/xlogTests/build.xml", "diffHunk": "@@ -0,0 +1,44 @@\n+<?xml version=\"1.0\"?>\n+\n+<!--\n+  Copyright (c) 2020, 2020 IBM Corp. and others\n+\n+  This program and the accompanying materials are made available under\n+  the terms of the Eclipse Public License 2.0 which accompanies this\n+  distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+  or the Apache License, Version 2.0 which accompanies this distribution and\n+  is available at https://www.apache.org/licenses/LICENSE-2.0.\n+\n+  This Source Code may also be made available under the following\n+  Secondary Licenses when the conditions for such availability set\n+  forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+  General Public License, version 2 with the GNU Classpath\n+  Exception [1] and GNU General Public License, version 2 with the\n+  OpenJDK Assembly Exception [2].\n+\n+  [1] https://www.gnu.org/software/classpath/license.html\n+  [2] http://openjdk.java.net/legal/assembly-exception.html\n+\n+  SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28930fa064b4120ea4bcdbdf28f1ed60c246b7e2"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk1OTY5OA==", "bodyText": "Please remove trailing whitespace.", "url": "https://github.com/eclipse-openj9/openj9/pull/11082#discussion_r519959698", "createdAt": "2020-11-09T16:48:02Z", "author": {"login": "keithc-ca"}, "path": "test/functional/cmdLineTests/xlogTests/playlist.xml", "diffHunk": "@@ -0,0 +1,47 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+\n+<!--\n+  Copyright (c) 2020, 2020 IBM Corp. and others\n+\n+  This program and the accompanying materials are made available under\n+  the terms of the Eclipse Public License 2.0 which accompanies this\n+  distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+  or the Apache License, Version 2.0 which accompanies this distribution and\n+  is available at https://www.apache.org/licenses/LICENSE-2.0.\n+\n+  This Source Code may also be made available under the following\n+  Secondary Licenses when the conditions for such availability set\n+  forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+  General Public License, version 2 with the GNU Classpath\n+  Exception [1] and GNU General Public License, version 2 with the\n+  OpenJDK Assembly Exception [2].\n+\n+  [1] https://www.gnu.org/software/classpath/license.html\n+  [2] http://openjdk.java.net/legal/assembly-exception.html\n+\n+  SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+-->\n+\n+<playlist xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"../../../TKG/playlist.xsd\">\n+\t<test>\n+\t\t<testCaseName>cmdLineTester_xlogTests</testCaseName>\n+\t\t<variations>\n+\t\t\t<variation>NoOptions</variation>\n+\t\t</variations>\n+\t\t<command>$(JAVA_COMMAND) $(JVM_OPTIONS) \\\n+\t-DEXE=$(SQ)$(JAVA_COMMAND) $(JVM_OPTIONS)$(SQ) -jar $(CMDLINETESTER_JAR) \\\n+\t-config $(Q)$(TEST_RESROOT)$(D)xlog.xml$(Q) \\\n+\t-xids all,$(PLATFORM) -explainExcludes -nonZeroExitWhenError; \\\n+\t$(TEST_STATUS)</command>\n+\t\t<levels>\n+\t\t\t<level>extended</level>\n+\t\t</levels>\n+\t\t<groups>\n+\t\t\t<group>functional</group>\n+\t\t</groups>\n+\t\t<impls>\n+\t\t\t<impl>openj9</impl>\n+\t\t\t<impl>ibm</impl>\t\t\t", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28930fa064b4120ea4bcdbdf28f1ed60c246b7e2"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk2MTU2Nw==", "bodyText": "Please fix (throughout):\n\nindentation (space, tab -> tab)\ntrailing whitespace", "url": "https://github.com/eclipse-openj9/openj9/pull/11082#discussion_r519961567", "createdAt": "2020-11-09T16:49:50Z", "author": {"login": "keithc-ca"}, "path": "test/functional/cmdLineTests/xlogTests/xlog.xml", "diffHunk": "@@ -0,0 +1,251 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\" ?>\n+\n+<!--\n+  Copyright (c) 2020, 2020 IBM Corp. and others\n+\n+  This program and the accompanying materials are made available under\n+  the terms of the Eclipse Public License 2.0 which accompanies this\n+  distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+  or the Apache License, Version 2.0 which accompanies this distribution and\n+  is available at https://www.apache.org/licenses/LICENSE-2.0.\n+\n+  This Source Code may also be made available under the following\n+  Secondary Licenses when the conditions for such availability set\n+  forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+  General Public License, version 2 with the GNU Classpath\n+  Exception [1] and GNU General Public License, version 2 with the\n+  OpenJDK Assembly Exception [2].\n+\n+  [1] https://www.gnu.org/software/classpath/license.html\n+  [2] http://openjdk.java.net/legal/assembly-exception.html\n+\n+  SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+-->\n+\n+<!DOCTYPE suite SYSTEM \"cmdlinetester.dtd\">\n+\n+<suite id=\"-Xlog Tests\" timeout=\"60\">\n+<variable name=\"ENABLEXLOG\" value=\"-XX:-LegacyXlogOption\" />\n+\n+\t<test id=\"-Xlog\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+ \t</test>\n+\n+\t<test id=\"-Xlog:\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog: -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+ \t</test>\n+\n+\t<test id=\"-Xlog:all\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:all -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+ \t</test>\n+\n+\t<test id=\"-Xlog:all=off\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:all=off -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"failure\">verbosegc</output>\n+ \t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:any,gc\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:any,gc -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+ \t</test>\n+\n+\t<test id=\"-Xlog:gc,any\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc,any -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+ \t</test>\n+\n+\t<test id=\"-Xlog:gc,any=off\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc,any=off -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+ \t</test>\n+\n+\t<test id=\"-Xlog:gc\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM007</output>\n+ \t</test>\n+\n+\t<test id=\"-Xlog:gc:\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc: -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM007</output>\n+ \t</test>\n+\n+\t<test id=\"-Xlog:gc:stderr\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc:stderr -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM007</output>\n+ \t</test>\n+\n+\t<test id=\"-Xlog:gc:stderr\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc:stderr: -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM007</output>\n+ \t</test>\n+\n+\t<test id=\"-Xlog:gc:stderr:any\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc:stderr:any -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+ \t</test>\n+\n+\t<test id=\"-Xlog:gc:stdout\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc:stdout -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+ \t</test>\n+\n+\t<test id=\"-Xlog:gc:gclog\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc:gclog -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"failure\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM007</output>\n+ \t</test>\n+ \t\n+\t<test id=\"-Xlog:gc:gclog check file\">\n+\t\t<command>cat gclog</command>\n+\t\t<output regex=\"no\" type=\"success\">verbosegc</output>\n+ \t</test>\n+ \t", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28930fa064b4120ea4bcdbdf28f1ed60c246b7e2"}, "originalPosition": 146}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2NTcwOTcx", "url": "https://github.com/eclipse-openj9/openj9/pull/11082#pullrequestreview-526570971", "createdAt": "2020-11-09T19:09:04Z", "commit": {"oid": "ae5876f4ffa28d66e916b6ce949f7f2b51eff5d3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxOTowOTowNFrOHv9jYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxOTowOTowNFrOHv9jYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA1MzYwMw==", "bodyText": "nit: Extra, unwanted leading space.", "url": "https://github.com/eclipse-openj9/openj9/pull/11082#discussion_r520053603", "createdAt": "2020-11-09T19:09:04Z", "author": {"login": "keithc-ca"}, "path": "test/functional/cmdLineTests/xlogTests/playlist.xml", "diffHunk": "@@ -0,0 +1,47 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+\n+<!--\n+Copyright (c) 2020, 2020 IBM Corp. and others\n+\n+This program and the accompanying materials are made available under\n+the terms of the Eclipse Public License 2.0 which accompanies this\n+ distribution and is available at https://www.eclipse.org/legal/epl-2.0/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae5876f4ffa28d66e916b6ce949f7f2b51eff5d3"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2NjE1OTI2", "url": "https://github.com/eclipse-openj9/openj9/pull/11082#pullrequestreview-526615926", "createdAt": "2020-11-09T20:10:30Z", "commit": {"oid": "7e7a239d84699a94f9074a7e2905563b8d7242d5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMDoxMDozMFrOHv_yLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMDoxMDozMFrOHv_yLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA5MDE1OA==", "bodyText": "Are these tests guaranteed to be run sequentially (not in parallel)?", "url": "https://github.com/eclipse-openj9/openj9/pull/11082#discussion_r520090158", "createdAt": "2020-11-09T20:10:30Z", "author": {"login": "keithc-ca"}, "path": "test/functional/cmdLineTests/xlogTests/xlog.xml", "diffHunk": "@@ -0,0 +1,251 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\" ?>\n+\n+<!--\n+Copyright (c) 2020, 2020 IBM Corp. and others\n+\n+This program and the accompanying materials are made available under\n+the terms of the Eclipse Public License 2.0 which accompanies this\n+distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+or the Apache License, Version 2.0 which accompanies this distribution and\n+is available at https://www.apache.org/licenses/LICENSE-2.0.\n+\n+This Source Code may also be made available under the following\n+Secondary Licenses when the conditions for such availability set\n+forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+General Public License, version 2 with the GNU Classpath\n+Exception [1] and GNU General Public License, version 2 with the\n+OpenJDK Assembly Exception [2].\n+\n+[1] https://www.gnu.org/software/classpath/license.html\n+[2] http://openjdk.java.net/legal/assembly-exception.html\n+\n+SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+-->\n+\n+<!DOCTYPE suite SYSTEM \"cmdlinetester.dtd\">\n+\n+<suite id=\"-Xlog Tests\" timeout=\"60\">\n+<variable name=\"ENABLEXLOG\" value=\"-XX:-LegacyXlogOption\" />\n+\n+\t<test id=\"-Xlog\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog: -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:all\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:all -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:all=off\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:all=off -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"failure\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:any,gc\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:any,gc -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc,any\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc,any -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc,any=off\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc,any=off -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM007</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc:\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc: -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM007</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc:stderr\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc:stderr -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM007</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc:stderr\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc:stderr: -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM007</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc:stderr:any\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc:stderr:any -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc:stdout\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc:stdout -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc:gclog\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc:gclog -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"failure\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM007</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc:gclog check file\">\n+\t\t<command>cat gclog</command>\n+\t\t<output regex=\"no\" type=\"success\">verbosegc</output>\n+\t</test>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e7a239d84699a94f9074a7e2905563b8d7242d5"}, "originalPosition": 145}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2NjE2Njcy", "url": "https://github.com/eclipse-openj9/openj9/pull/11082#pullrequestreview-526616672", "createdAt": "2020-11-09T20:11:36Z", "commit": {"oid": "7e7a239d84699a94f9074a7e2905563b8d7242d5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMDoxMTozN1rOHv_0og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMDoxMTozN1rOHv_0og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA5MDc4Ng==", "bodyText": "I don't understand this: how can 'openjdk version' be both a success and a failure condition?", "url": "https://github.com/eclipse-openj9/openj9/pull/11082#discussion_r520090786", "createdAt": "2020-11-09T20:11:37Z", "author": {"login": "keithc-ca"}, "path": "test/functional/cmdLineTests/xlogTests/xlog.xml", "diffHunk": "@@ -0,0 +1,251 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\" ?>\n+\n+<!--\n+Copyright (c) 2020, 2020 IBM Corp. and others\n+\n+This program and the accompanying materials are made available under\n+the terms of the Eclipse Public License 2.0 which accompanies this\n+distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+or the Apache License, Version 2.0 which accompanies this distribution and\n+is available at https://www.apache.org/licenses/LICENSE-2.0.\n+\n+This Source Code may also be made available under the following\n+Secondary Licenses when the conditions for such availability set\n+forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+General Public License, version 2 with the GNU Classpath\n+Exception [1] and GNU General Public License, version 2 with the\n+OpenJDK Assembly Exception [2].\n+\n+[1] https://www.gnu.org/software/classpath/license.html\n+[2] http://openjdk.java.net/legal/assembly-exception.html\n+\n+SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+-->\n+\n+<!DOCTYPE suite SYSTEM \"cmdlinetester.dtd\">\n+\n+<suite id=\"-Xlog Tests\" timeout=\"60\">\n+<variable name=\"ENABLEXLOG\" value=\"-XX:-LegacyXlogOption\" />\n+\n+\t<test id=\"-Xlog\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog: -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:all\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:all -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:all=off\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:all=off -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"failure\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:any,gc\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:any,gc -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc,any\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc,any -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc,any=off\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc,any=off -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM007</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc:\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc: -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM007</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc:stderr\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc:stderr -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM007</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc:stderr\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc:stderr: -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM007</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc:stderr:any\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc:stderr:any -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc:stdout\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc:stdout -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc:gclog\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc:gclog -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"failure\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM007</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc:gclog check file\">\n+\t\t<command>cat gclog</command>\n+\t\t<output regex=\"no\" type=\"success\">verbosegc</output>\n+\t</test>\n+\n+\t<exec command=\"rm -f gclog\" />\n+\n+\t<test id=\"-Xlog:gc:gclog:\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc:gclog: -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"failure\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM007</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc:gclog: check file\">\n+\t\t<command>cat gclog</command>\n+\t\t<output regex=\"no\" type=\"success\">verbosegc</output>\n+\t</test>\n+\n+\t<exec command=\"rm -f gclog\" />\n+\n+\t<test id=\"-Xlog:gc:file=gclog\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc:file=gclog -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"failure\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM007</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc:file=gclog check file\">\n+\t\t<command>cat gclog</command>\n+\t\t<output regex=\"no\" type=\"success\">verbosegc</output>\n+\t</test>\n+\n+\t<exec command=\"rm -f gclog\" />\n+\n+\t<test id=\"-Xlog:gc=off\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc=off -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"failure\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:any+gc=off\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:any+gc=off -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"failure\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc+any=off\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc+any=off -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"failure\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:gc=off,any\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:gc=off,any -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"failure\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:any,gc=off\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:any,gc=off -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"failure\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:disable\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:disable -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"required\">JVMJ9VM007W</output>\n+\t\t<output regex=\"no\" type=\"failure\">verbosegc</output>\n+\t\t<output regex=\"no\" type=\"failure\">JVMJ9VM085</output>\n+\t</test>\n+\n+\t<test id=\"-Xlog:disable:\">\n+\t\t<command>$EXE$ $ENABLEXLOG$ -Xlog:disable: -version</command>\n+\t\t<output regex=\"no\" type=\"success\">openjdk version</output>\n+\t\t<output regex=\"no\" type=\"success\">JVMJ9VM085E</output>\n+\t\t<output regex=\"no\" type=\"failure\">openjdk version</output>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e7a239d84699a94f9074a7e2905563b8d7242d5"}, "originalPosition": 231}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "665296c2ae8e1d477d9035876154b38eaf000e21", "author": {"user": {"login": "pshipton", "name": "Peter Shipton"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/665296c2ae8e1d477d9035876154b38eaf000e21", "committedDate": "2020-11-10T14:50:39Z", "message": "Parse -Xlog:gc variants for compatibility and add tests\n\nIssue https://github.com/eclipse/openj9/issues/10799\n\nSigned-off-by: Peter Shipton <Peter_Shipton@ca.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27da8e8e7011096ed61334fc879e3e077bb59226", "author": {"user": {"login": "pshipton", "name": "Peter Shipton"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/27da8e8e7011096ed61334fc879e3e077bb59226", "committedDate": "2020-11-10T14:50:40Z", "message": "Fix bug in freeJavaVM()\n\nSigned-off-by: Peter Shipton <Peter_Shipton@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6d86461e1beab386caee54aa559ffe68dd5fd172", "author": {"user": {"login": "pshipton", "name": "Peter Shipton"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/6d86461e1beab386caee54aa559ffe68dd5fd172", "committedDate": "2020-11-09T21:31:43Z", "message": "Remove incorrect success condition\n\nSigned-off-by: Peter Shipton <Peter_Shipton@ca.ibm.com>"}, "afterCommit": {"oid": "27da8e8e7011096ed61334fc879e3e077bb59226", "author": {"user": {"login": "pshipton", "name": "Peter Shipton"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/27da8e8e7011096ed61334fc879e3e077bb59226", "committedDate": "2020-11-10T14:50:40Z", "message": "Fix bug in freeJavaVM()\n\nSigned-off-by: Peter Shipton <Peter_Shipton@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NDc2MTMw", "url": "https://github.com/eclipse-openj9/openj9/pull/11082#pullrequestreview-527476130", "createdAt": "2020-11-10T18:12:53Z", "commit": {"oid": "27da8e8e7011096ed61334fc879e3e077bb59226"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 73, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}