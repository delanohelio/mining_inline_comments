{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ1NTc2MzQ3", "number": 10106, "title": "Do not notify GC if class redef fails", "bodyText": "Exit redefineclassescommon gracefully if we fail to recreate a single\nramClass.\nFixes: #10104\nSigned-off-by: Tobi Ajila atobia@ca.ibm.com", "createdAt": "2020-07-07T18:19:27Z", "url": "https://github.com/eclipse-openj9/openj9/pull/10106", "merged": true, "mergeCommit": {"oid": "d8cd2a6fb35146af1eee9ba66f0c05c40740c507"}, "closed": true, "closedAt": "2020-07-07T21:13:32Z", "author": {"login": "tajila"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcyqNX9gFqTQ0NDE0OTYwNA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcyqbKxgFqTQ0NDE1OTgyMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0MTQ5NjA0", "url": "https://github.com/eclipse-openj9/openj9/pull/10106#pullrequestreview-444149604", "createdAt": "2020-07-07T18:32:54Z", "commit": {"oid": "9b4476023220cc24f3c768ed32a5ff9f07fde440"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxODozMjo1NFrOGuKxug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxODozMjo1NFrOGuKxug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA2NDI1MA==", "bodyText": "The hash table is not freed along this path. It looks like it could just be moved to after the label.", "url": "https://github.com/eclipse-openj9/openj9/pull/10106#discussion_r451064250", "createdAt": "2020-07-07T18:32:54Z", "author": {"login": "gacholio"}, "path": "runtime/jvmti/jvmtiClass.c", "diffHunk": "@@ -1172,104 +1172,104 @@ redefineClassesCommon(jvmtiEnv* env,\n \t\t/* Recreate the RAM classes for all classes */\n \n \t\trc = recreateRAMClasses(currentThread, classPairs, methodPairs, extensionsUsed, !extensionsEnabled);\n-\t\tif (rc == JVMTI_ERROR_NONE) {\n+\t\tif (rc != JVMTI_ERROR_NONE) {\n+\t\t\tgoto failedWithVMAccess;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b4476023220cc24f3c768ed32a5ff9f07fde440"}, "originalPosition": 6}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9b4476023220cc24f3c768ed32a5ff9f07fde440", "author": {"user": {"login": "tajila", "name": "Tobi"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/9b4476023220cc24f3c768ed32a5ff9f07fde440", "committedDate": "2020-07-07T16:47:03Z", "message": "Do not notify GC if class redef fails\n\nExit redefineclassescommon gracefully if we fail to recreate a single\nramClass.\n\nFixes: https://github.com/eclipse/openj9/issues/10104\n\nSigned-off-by: Tobi Ajila <atobia@ca.ibm.com>"}, "afterCommit": {"oid": "46b5a0588632e6fb6c78cec451b68b6b1cafe341", "author": {"user": {"login": "tajila", "name": "Tobi"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/46b5a0588632e6fb6c78cec451b68b6b1cafe341", "committedDate": "2020-07-07T18:39:48Z", "message": "Do not notify GC if class redef fails\n\nExit redefineclassescommon gracefully if we fail to recreate a single\nramClass.\n\nFixes: https://github.com/eclipse/openj9/issues/10104\n\nSigned-off-by: Tobi Ajila <atobia@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "46b5a0588632e6fb6c78cec451b68b6b1cafe341", "author": {"user": {"login": "tajila", "name": "Tobi"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/46b5a0588632e6fb6c78cec451b68b6b1cafe341", "committedDate": "2020-07-07T18:39:48Z", "message": "Do not notify GC if class redef fails\n\nExit redefineclassescommon gracefully if we fail to recreate a single\nramClass.\n\nFixes: https://github.com/eclipse/openj9/issues/10104\n\nSigned-off-by: Tobi Ajila <atobia@ca.ibm.com>"}, "afterCommit": {"oid": "1a4ecc351eade0523bd11d8064af00fa98386c7b", "author": {"user": {"login": "tajila", "name": "Tobi"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/1a4ecc351eade0523bd11d8064af00fa98386c7b", "committedDate": "2020-07-07T18:40:26Z", "message": "Do not notify GC if class redef fails\n\nExit redefineclassescommon gracefully if we fail to recreate a single\nramClass.\n\nFixes: https://github.com/eclipse/openj9/issues/10104\n\nSigned-off-by: Tobi Ajila <atobia@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0MTU2NDQx", "url": "https://github.com/eclipse-openj9/openj9/pull/10106#pullrequestreview-444156441", "createdAt": "2020-07-07T18:43:00Z", "commit": {"oid": "1a4ecc351eade0523bd11d8064af00fa98386c7b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxODo0MzowMFrOGuLG2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxODo0MzowMFrOGuLG2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA2OTY1Ng==", "bodyText": "just noticed this, we still have safe/exclusive at this point", "url": "https://github.com/eclipse-openj9/openj9/pull/10106#discussion_r451069656", "createdAt": "2020-07-07T18:43:00Z", "author": {"login": "tajila"}, "path": "runtime/jvmti/jvmtiClass.c", "diffHunk": "@@ -1172,107 +1172,106 @@ redefineClassesCommon(jvmtiEnv* env,\n \t\t/* Recreate the RAM classes for all classes */\n \n \t\trc = recreateRAMClasses(currentThread, classPairs, methodPairs, extensionsUsed, !extensionsEnabled);\n-\t\tif (rc == JVMTI_ERROR_NONE) {\n+\t\tif (rc != JVMTI_ERROR_NONE) {\n+\t\t\tgoto failedWithVMAccess;\n+\t\t}\n+\t\tif (!extensionsEnabled) {\n+\t\t\t/* Fast HCR path - where the J9Class is redefined in place. */\n \n-\t\t\tif (!extensionsEnabled) {\n-\t\t\t\t/* Fast HCR path - where the J9Class is redefined in place. */\n+\t\t\t/* Add method equivalences for the methods that were re-defined (reverse of before!). Propagate any equivalent resolved callsites. */\n+\t\t\trc = fixMethodEquivalencesAndCallSites(currentThread, classPairs, jitEventDataPtr, TRUE, &methodEquivalences, extensionsUsed);\n+\t\t\tif (rc != JVMTI_ERROR_NONE) {\n+\t\t\t\tgoto failed;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a4ecc351eade0523bd11d8064af00fa98386c7b"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0MTU2NjU3", "url": "https://github.com/eclipse-openj9/openj9/pull/10106#pullrequestreview-444156657", "createdAt": "2020-07-07T18:43:18Z", "commit": {"oid": "1a4ecc351eade0523bd11d8064af00fa98386c7b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxODo0MzoxOFrOGuLHhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxODo0MzoxOFrOGuLHhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA2OTgzMQ==", "bodyText": "same here", "url": "https://github.com/eclipse-openj9/openj9/pull/10106#discussion_r451069831", "createdAt": "2020-07-07T18:43:18Z", "author": {"login": "tajila"}, "path": "runtime/jvmti/jvmtiClass.c", "diffHunk": "@@ -1172,107 +1172,106 @@ redefineClassesCommon(jvmtiEnv* env,\n \t\t/* Recreate the RAM classes for all classes */\n \n \t\trc = recreateRAMClasses(currentThread, classPairs, methodPairs, extensionsUsed, !extensionsEnabled);\n-\t\tif (rc == JVMTI_ERROR_NONE) {\n+\t\tif (rc != JVMTI_ERROR_NONE) {\n+\t\t\tgoto failedWithVMAccess;\n+\t\t}\n+\t\tif (!extensionsEnabled) {\n+\t\t\t/* Fast HCR path - where the J9Class is redefined in place. */\n \n-\t\t\tif (!extensionsEnabled) {\n-\t\t\t\t/* Fast HCR path - where the J9Class is redefined in place. */\n+\t\t\t/* Add method equivalences for the methods that were re-defined (reverse of before!). Propagate any equivalent resolved callsites. */\n+\t\t\trc = fixMethodEquivalencesAndCallSites(currentThread, classPairs, jitEventDataPtr, TRUE, &methodEquivalences, extensionsUsed);\n+\t\t\tif (rc != JVMTI_ERROR_NONE) {\n+\t\t\t\tgoto failed;\n+\t\t\t}\n+\t\t\t/* Fix the vTables of all subclasses */\n+\t\t\tfixVTables_forNormalRedefine(currentThread, classPairs, methodPairs, TRUE, &methodEquivalences);\n \n-\t\t\t\t/* Add method equivalences for the methods that were re-defined (reverse of before!). Propagate any equivalent resolved callsites. */\n-\t\t\t\trc = fixMethodEquivalencesAndCallSites(currentThread, classPairs, jitEventDataPtr, TRUE, &methodEquivalences, extensionsUsed);\n-\t\t\t\tif (rc != JVMTI_ERROR_NONE) {\n-\t\t\t\t\tgoto failed;\n-\t\t\t\t}\n-\t\t\t\t/* Fix the vTables of all subclasses */\n-\t\t\t\tfixVTables_forNormalRedefine(currentThread, classPairs, methodPairs, TRUE, &methodEquivalences);\n+\t\t\t/* Update method references in DirectHandles */\n+\t\t\tfixDirectHandles(currentThread, classPairs, methodPairs);\n \n-\t\t\t\t/* Update method references in DirectHandles */\n-\t\t\t\tfixDirectHandles(currentThread, classPairs, methodPairs);\n+\t\t\t/* Fix JNI */\n+\t\t\tfixJNIRefs(currentThread, classPairs, TRUE, extensionsUsed);\n \n-\t\t\t\t/* Fix JNI */\n-\t\t\t\tfixJNIRefs(currentThread, classPairs, TRUE, extensionsUsed);\n+\t\t\t/* Fix resolved constant pool references to point to new methods. */\n+\t\t\tfixConstantPoolsForFastHCR(currentThread, classPairs, methodPairs);\n \n-\t\t\t\t/* Fix resolved constant pool references to point to new methods. */\n-\t\t\t\tfixConstantPoolsForFastHCR(currentThread, classPairs, methodPairs);\n+\t\t\t/* Flush the reflect method cache */\n+\t\t\tflushClassLoaderReflectCache(currentThread, classPairs);\n \n-\t\t\t\t/* Flush the reflect method cache */\n-\t\t\t\tflushClassLoaderReflectCache(currentThread, classPairs);\n+\t\t\t/* Store the method remap indices for redefined interface classes */\n+\t\t\tupdateInterfaceMethodOrdering(currentThread, class_count, specifiedClasses);\n \n-\t\t\t\t/* Store the method remap indices for redefined interface classes */\n-\t\t\t\tupdateInterfaceMethodOrdering(currentThread, class_count, specifiedClasses);\n+\t\t\t/* Indicate that a redefine has occurred */\n+\t\t\tvm->hotSwapCount += 1;\n \n-\t\t\t\t/* Indicate that a redefine has occurred */\n-\t\t\t\tvm->hotSwapCount += 1;\n+\t\t\t/* Notify the JIT about redefined classes */\n+\t\t\tjitClassRedefineEvent(currentThread, &jitEventData, FALSE);\n \n-\t\t\t\t/* Notify the JIT about redefined classes */\n-\t\t\t\tjitClassRedefineEvent(currentThread, &jitEventData, FALSE);\n+\t\t} else {\n \n-\t\t\t} else {\n+\t\t\t/* Clear/suspend all breakpoints in the classes being replaced */\n+\t\t\tclearBreakpointsInClasses(currentThread, classPairs);\n \n-\t\t\t\t/* Clear/suspend all breakpoints in the classes being replaced */\n-\t\t\t\tclearBreakpointsInClasses(currentThread, classPairs);\n+\t\t\t/* Fix static refs */\n+\t\t\tfixStaticRefs(currentThread, classPairs, extensionsUsed);\n \n-\t\t\t\t/* Fix static refs */\n-\t\t\t\tfixStaticRefs(currentThread, classPairs, extensionsUsed);\n- \n-\t\t\t\t/* Update heap references */\n-\t\t\t\tfixHeapRefs(vm, classPairs);\n+\t\t\t/* Update heap references */\n+\t\t\tfixHeapRefs(vm, classPairs);\n \n-\t\t\t\t/* Update method references in DirectHandles */\n-\t\t\t\tfixDirectHandles(currentThread, classPairs, methodPairs);\n- \n-\t\t\t\t/* Copy preserved values */\n-\t\t\t\tcopyPreservedValues(currentThread, classPairs, extensionsUsed);\n+\t\t\t/* Update method references in DirectHandles */\n+\t\t\tfixDirectHandles(currentThread, classPairs, methodPairs);\n \n-\t\t\t\t/* Update the componentType and leafComponentType fields of array classes */\n-\t\t\t\tfixArrayClasses(currentThread, classPairs);\n+\t\t\t/* Copy preserved values */\n+\t\t\tcopyPreservedValues(currentThread, classPairs, extensionsUsed);\n \n-\t\t\t\t/* Fix JNI */\n-\t\t\t\tfixJNIRefs(currentThread, classPairs, FALSE, extensionsUsed);\n+\t\t\t/* Update the componentType and leafComponentType fields of array classes */\n+\t\t\tfixArrayClasses(currentThread, classPairs);\n \n-\t\t\t\t/* Update the iTables of any classes which implement a replaced interface */\n-\t\t\t\tfixITables(currentThread, classPairs);\n+\t\t\t/* Fix JNI */\n+\t\t\tfixJNIRefs(currentThread, classPairs, FALSE, extensionsUsed);\n \n-\t\t\t\t/* Fix subclass hierarchy */\n-\t\t\t\tfixSubclassHierarchy(currentThread, classPairs);\n- \n-\t\t\t\t/* Unresolve all classes */\n-\t\t\t\tunresolveAllClasses(currentThread, classPairs, methodPairs, extensionsUsed);\n- \n-\t\t\t\t/* Update method equivalences. Propagate any equivalent resolved callsites. */\n-\t\t\t\trc = fixMethodEquivalencesAndCallSites(currentThread, classPairs, jitEventDataPtr, FALSE, &methodEquivalences, extensionsUsed);\n-\t\t\t\tif (rc != JVMTI_ERROR_NONE) {\n-\t\t\t\t\tgoto failed;\n-\t\t\t\t}\n-\t\t\t\t/* Fix the vTables of all subclasses */\n-\t\t\t\tif (!extensionsUsed) {\n-\t\t\t\t\tfixVTables_forNormalRedefine(currentThread, classPairs, methodPairs, FALSE, &methodEquivalences);\n-\t\t\t\t}\n+\t\t\t/* Update the iTables of any classes which implement a replaced interface */\n+\t\t\tfixITables(currentThread, classPairs);\n+\n+\t\t\t/* Fix subclass hierarchy */\n+\t\t\tfixSubclassHierarchy(currentThread, classPairs);\n+\n+\t\t\t/* Unresolve all classes */\n+\t\t\tunresolveAllClasses(currentThread, classPairs, methodPairs, extensionsUsed);\n+\n+\t\t\t/* Update method equivalences. Propagate any equivalent resolved callsites. */\n+\t\t\trc = fixMethodEquivalencesAndCallSites(currentThread, classPairs, jitEventDataPtr, FALSE, &methodEquivalences, extensionsUsed);\n+\t\t\tif (rc != JVMTI_ERROR_NONE) {\n+\t\t\t\tgoto failed;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a4ecc351eade0523bd11d8064af00fa98386c7b"}, "originalPosition": 132}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b07d060764572cf8540e7aca46b05387565e8aba", "author": {"user": {"login": "tajila", "name": "Tobi"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/b07d060764572cf8540e7aca46b05387565e8aba", "committedDate": "2020-07-07T18:44:31Z", "message": "Do not notify GC if class redef fails\n\nExit redefineclassescommon gracefully if we fail to recreate a single\nramClass.\n\nFixes: https://github.com/eclipse/openj9/issues/10104\n\nSigned-off-by: Tobi Ajila <atobia@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1a4ecc351eade0523bd11d8064af00fa98386c7b", "author": {"user": {"login": "tajila", "name": "Tobi"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/1a4ecc351eade0523bd11d8064af00fa98386c7b", "committedDate": "2020-07-07T18:40:26Z", "message": "Do not notify GC if class redef fails\n\nExit redefineclassescommon gracefully if we fail to recreate a single\nramClass.\n\nFixes: https://github.com/eclipse/openj9/issues/10104\n\nSigned-off-by: Tobi Ajila <atobia@ca.ibm.com>"}, "afterCommit": {"oid": "b07d060764572cf8540e7aca46b05387565e8aba", "author": {"user": {"login": "tajila", "name": "Tobi"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/b07d060764572cf8540e7aca46b05387565e8aba", "committedDate": "2020-07-07T18:44:31Z", "message": "Do not notify GC if class redef fails\n\nExit redefineclassescommon gracefully if we fail to recreate a single\nramClass.\n\nFixes: https://github.com/eclipse/openj9/issues/10104\n\nSigned-off-by: Tobi Ajila <atobia@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0MTU5ODIz", "url": "https://github.com/eclipse-openj9/openj9/pull/10106#pullrequestreview-444159823", "createdAt": "2020-07-07T18:47:59Z", "commit": {"oid": "b07d060764572cf8540e7aca46b05387565e8aba"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 512, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}