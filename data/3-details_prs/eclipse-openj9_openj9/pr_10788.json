{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4MDY0MzY4", "number": 10788, "title": "Insert arg count in VMThread's tempSlot for invokeBasic calls", "bodyText": "MethodHandle.invokeBasic is implemented as an internal native\nmethod that is signature polymorphic. When calling invokeBasic\nfrom the JIT body, the VM needs to know the number of arguments\nfor the invokeBasic call in order to locate the receiver object\non the stack. This implementation inserts a node at the lowering\ntrees phase to store the number of args into the VMThread.tempSlot\nright before the call to MethodHandle.invokeBasic.\nDepends: #10617, eclipse/omr#5597\nSigned-off-by: Nazim Bhuiyan nubhuiyan@ibm.com", "createdAt": "2020-10-05T19:22:01Z", "url": "https://github.com/eclipse-openj9/openj9/pull/10788", "merged": true, "mergeCommit": {"oid": "7c560a54732fefc63b8a9685587cfbfb10188ac1"}, "closed": true, "closedAt": "2020-10-15T17:34:22Z", "author": {"login": "nbhuiyan"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdPqH_BAFqTUwMjQxMDU2Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdSK2WKgBqjM4NzIyMzkxODA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyNDEwNTY2", "url": "https://github.com/eclipse-openj9/openj9/pull/10788#pullrequestreview-502410566", "createdAt": "2020-10-05T20:50:49Z", "commit": {"oid": "b666e299d6199c9045a209b374435c7908e48cde"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMDo1MDo0OVrOHctU7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMDo1MDo0OVrOHctU7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg2NDgxMg==", "bodyText": "This is going to need a different name - in the compiler a temp slot is a stack allocated variable - this usage will be very confusing. I would suggest findOrCreateVMThreadTempSlotSymbolRef or something explicit like that.", "url": "https://github.com/eclipse-openj9/openj9/pull/10788#discussion_r499864812", "createdAt": "2020-10-05T20:50:49Z", "author": {"login": "andrewcraik"}, "path": "runtime/compiler/compile/J9SymbolReferenceTable.cpp", "diffHunk": "@@ -2322,6 +2322,20 @@ J9::SymbolReferenceTable::findOrCreateProfilingBufferEndSymbolRef()\n    return element(profilingBufferEndSymbol);\n    }\n \n+TR::SymbolReference *\n+J9::SymbolReferenceTable::findOrCreateTempSlotSymbolRef()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b666e299d6199c9045a209b374435c7908e48cde"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyNDExMTgz", "url": "https://github.com/eclipse-openj9/openj9/pull/10788#pullrequestreview-502411183", "createdAt": "2020-10-05T20:51:49Z", "commit": {"oid": "b666e299d6199c9045a209b374435c7908e48cde"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMDo1MTo0OVrOHctWxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMDo1MTo0OVrOHctWxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg2NTI4NQ==", "bodyText": "This label is also potentially confusing in the lop with the other occurrences of temp slot - I think some thought needs to go into changing this to make it less confusing.", "url": "https://github.com/eclipse-openj9/openj9/pull/10788#discussion_r499865285", "createdAt": "2020-10-05T20:51:49Z", "author": {"login": "andrewcraik"}, "path": "runtime/compiler/compile/J9SymbolReferenceTable.cpp", "diffHunk": "@@ -2322,6 +2322,20 @@ J9::SymbolReferenceTable::findOrCreateProfilingBufferEndSymbolRef()\n    return element(profilingBufferEndSymbol);\n    }\n \n+TR::SymbolReference *\n+J9::SymbolReferenceTable::findOrCreateTempSlotSymbolRef()\n+   {\n+   if (!element(tempSlotSymbol))\n+      {\n+      TR_J9VMBase *fej9 = (TR_J9VMBase *)(fe());\n+      TR::Symbol * sym = TR::RegisterMappedSymbol::createMethodMetaDataSymbol(trHeapMemory(), \"tempSlot\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b666e299d6199c9045a209b374435c7908e48cde"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyNDE0ODQw", "url": "https://github.com/eclipse-openj9/openj9/pull/10788#pullrequestreview-502414840", "createdAt": "2020-10-05T20:57:14Z", "commit": {"oid": "b666e299d6199c9045a209b374435c7908e48cde"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMDo1NzoxNFrOHcthqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMDo1NzoxNFrOHcthqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg2ODA3Mg==", "bodyText": "I assume code later will clean up the call?", "url": "https://github.com/eclipse-openj9/openj9/pull/10788#discussion_r499868072", "createdAt": "2020-10-05T20:57:14Z", "author": {"login": "andrewcraik"}, "path": "runtime/compiler/codegen/J9CodeGenerator.cpp", "diffHunk": "@@ -1013,6 +1013,16 @@ J9::CodeGenerator::lowerTreeIfNeeded(\n       self()->lowerNonhelperCallIfNeeded(node, tt);\n       }\n \n+   if (node->getOpCode().isCall() &&\n+       !node->getSymbol()->castToMethodSymbol()->isHelper() &&\n+       (node->getSymbol()->castToMethodSymbol()->getRecognizedMethod() == TR::java_lang_invoke_MethodHandle_invokeBasic))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b666e299d6199c9045a209b374435c7908e48cde"}, "originalPosition": 6}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b666e299d6199c9045a209b374435c7908e48cde", "author": {"user": {"login": "nbhuiyan", "name": "Nazim Bhuiyan"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/b666e299d6199c9045a209b374435c7908e48cde", "committedDate": "2020-10-05T19:18:26Z", "message": "Insert arg count in VMThread's tempSlot for invokeBasic calls\n\nMethodHandle.invokeBasic is implemented as an internal native\nmethod that is signature polymorphic. When calling invokeBasic\nfrom the JIT body, the VM needs to know the number of arguments\nfor the invokeBasic call in order to locate the receiver object\non the stack. This implementation inserts a node at the lowering\ntrees phase to store the number of args into the VMThread.tempSlot\nright before the call to MethodHandle.invokeBasic.\n\nSigned-off-by: Nazim Bhuiyan <nubhuiyan@ibm.com>"}, "afterCommit": {"oid": "e782c5fd9f78c62a730f4afb59f46959fd4cfbe7", "author": {"user": {"login": "nbhuiyan", "name": "Nazim Bhuiyan"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/e782c5fd9f78c62a730f4afb59f46959fd4cfbe7", "committedDate": "2020-10-07T23:49:19Z", "message": "Insert arg count in VMThread's tempSlot for invokeBasic calls\n\nMethodHandle.invokeBasic is implemented as an internal native\nmethod that is signature polymorphic. When calling invokeBasic\nfrom the JIT body, the VM needs to know the number of arguments\nfor the invokeBasic call in order to locate the receiver object\non the stack. This implementation inserts a node at the lowering\ntrees phase to store the number of args into the VMThread.tempSlot\nright before the call to MethodHandle.invokeBasic.\n\nSigned-off-by: Nazim Bhuiyan <nubhuiyan@ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0ODI0MDQz", "url": "https://github.com/eclipse-openj9/openj9/pull/10788#pullrequestreview-504824043", "createdAt": "2020-10-08T14:09:24Z", "commit": {"oid": "e782c5fd9f78c62a730f4afb59f46959fd4cfbe7"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNDowOToyNFrOHegeZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNDoxMjowNFrOHegmfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc1MTM5OQ==", "bodyText": "We should call createStore(TR::Node *originatingByteCodeNode, TR::SymbolReference * symRef, TR::Node * value) and pass in the call node as the originatingByteCodeNode such that the store node gets the right bytecode index.", "url": "https://github.com/eclipse-openj9/openj9/pull/10788#discussion_r501751399", "createdAt": "2020-10-08T14:09:24Z", "author": {"login": "liqunl"}, "path": "runtime/compiler/codegen/J9CodeGenerator.cpp", "diffHunk": "@@ -1013,6 +1013,16 @@ J9::CodeGenerator::lowerTreeIfNeeded(\n       self()->lowerNonhelperCallIfNeeded(node, tt);\n       }\n \n+   if (node->getOpCode().isCall() &&\n+       !node->getSymbol()->castToMethodSymbol()->isHelper() &&\n+       (node->getSymbol()->castToMethodSymbol()->getRecognizedMethod() == TR::java_lang_invoke_MethodHandle_invokeBasic))\n+      {\n+      TR::SymbolReference *vmThreadTempSlotSymRef = self()->comp()->getSymRefTab()->findOrCreateVMThreadTempSlotSymbolRef();\n+      TR::Node *numArgsNode = TR::Node::iconst(node, node->getNumArguments() - 1);\n+      TR::Node *storeNode = TR::Node::createStore(vmThreadTempSlotSymRef, numArgsNode, TR::istore);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e782c5fd9f78c62a730f4afb59f46959fd4cfbe7"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc1MzQ2OA==", "bodyText": "Can the name be updated to findOrCreateVMThreadTempSlotFieldSymbolRef?", "url": "https://github.com/eclipse-openj9/openj9/pull/10788#discussion_r501753468", "createdAt": "2020-10-08T14:12:04Z", "author": {"login": "liqunl"}, "path": "runtime/compiler/compile/J9SymbolReferenceTable.hpp", "diffHunk": "@@ -76,6 +76,15 @@ class SymbolReferenceTable : public OMR::SymbolReferenceTableConnector\n    TR::SymbolReference * findOrCreateOSRScratchBufferSymbolRef();\n    TR::SymbolReference * findOrCreateOSRFrameIndexSymbolRef();\n \n+   /** \\brief\n+    * Find or create VMThread tempSlot symbol reference. J9VMThread.tempSlot provides a mechanism for the\n+    * compiler to provide information that the VM can use for various reasons - such as locating items on\n+    * the stack during a call to internal native methods that are signature-polymorphic.\n+    *\n+    * \\return TR::SymbolReference* the VMThreadTempSlotField symbol reference\n+    */\n+   TR::SymbolReference * findOrCreateVMThreadTempSlotSymbolRef();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e782c5fd9f78c62a730f4afb59f46959fd4cfbe7"}, "originalPosition": 11}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e782c5fd9f78c62a730f4afb59f46959fd4cfbe7", "author": {"user": {"login": "nbhuiyan", "name": "Nazim Bhuiyan"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/e782c5fd9f78c62a730f4afb59f46959fd4cfbe7", "committedDate": "2020-10-07T23:49:19Z", "message": "Insert arg count in VMThread's tempSlot for invokeBasic calls\n\nMethodHandle.invokeBasic is implemented as an internal native\nmethod that is signature polymorphic. When calling invokeBasic\nfrom the JIT body, the VM needs to know the number of arguments\nfor the invokeBasic call in order to locate the receiver object\non the stack. This implementation inserts a node at the lowering\ntrees phase to store the number of args into the VMThread.tempSlot\nright before the call to MethodHandle.invokeBasic.\n\nSigned-off-by: Nazim Bhuiyan <nubhuiyan@ibm.com>"}, "afterCommit": {"oid": "03c62b3613dcb47aefae3e537265dd57c03e500d", "author": {"user": {"login": "nbhuiyan", "name": "Nazim Bhuiyan"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/03c62b3613dcb47aefae3e537265dd57c03e500d", "committedDate": "2020-10-08T16:05:03Z", "message": "Insert arg count in VMThread's tempSlot for invokeBasic calls\n\nMethodHandle.invokeBasic is implemented as an internal native\nmethod that is signature polymorphic. When calling invokeBasic\nfrom the JIT body, the VM needs to know the number of arguments\nfor the invokeBasic call in order to locate the receiver object\non the stack. This implementation inserts a node at the lowering\ntrees phase to store the number of args into the VMThread.tempSlot\nright before the call to MethodHandle.invokeBasic.\n\nSigned-off-by: Nazim Bhuiyan <nubhuiyan@ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1MDI0MDg5", "url": "https://github.com/eclipse-openj9/openj9/pull/10788#pullrequestreview-505024089", "createdAt": "2020-10-08T17:48:09Z", "commit": {"oid": "03c62b3613dcb47aefae3e537265dd57c03e500d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1NzcwMDQ3", "url": "https://github.com/eclipse-openj9/openj9/pull/10788#pullrequestreview-505770047", "createdAt": "2020-10-09T15:17:47Z", "commit": {"oid": "03c62b3613dcb47aefae3e537265dd57c03e500d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "03c62b3613dcb47aefae3e537265dd57c03e500d", "author": {"user": {"login": "nbhuiyan", "name": "Nazim Bhuiyan"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/03c62b3613dcb47aefae3e537265dd57c03e500d", "committedDate": "2020-10-08T16:05:03Z", "message": "Insert arg count in VMThread's tempSlot for invokeBasic calls\n\nMethodHandle.invokeBasic is implemented as an internal native\nmethod that is signature polymorphic. When calling invokeBasic\nfrom the JIT body, the VM needs to know the number of arguments\nfor the invokeBasic call in order to locate the receiver object\non the stack. This implementation inserts a node at the lowering\ntrees phase to store the number of args into the VMThread.tempSlot\nright before the call to MethodHandle.invokeBasic.\n\nSigned-off-by: Nazim Bhuiyan <nubhuiyan@ibm.com>"}, "afterCommit": {"oid": "3348c4fb305cf8d7a16f67135c364d3222f62d4f", "author": {"user": {"login": "nbhuiyan", "name": "Nazim Bhuiyan"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/3348c4fb305cf8d7a16f67135c364d3222f62d4f", "committedDate": "2020-10-13T16:02:47Z", "message": "Insert arg count in VMThread's tempSlot for invokeBasic calls\n\nMethodHandle.invokeBasic is implemented as an internal native\nmethod that is signature polymorphic. When calling invokeBasic\nfrom the JIT body, the VM needs to know the number of arguments\nfor the invokeBasic call in order to locate the receiver object\non the stack. This implementation inserts a node at the lowering\ntrees phase to store the number of args into the VMThread.tempSlot\nright before the call to MethodHandle.invokeBasic.\n\nSigned-off-by: Nazim Bhuiyan <nubhuiyan@ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92980b0917a5a8c1421b75af3b3c14088fe673bb", "author": {"user": {"login": "nbhuiyan", "name": "Nazim Bhuiyan"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/92980b0917a5a8c1421b75af3b3c14088fe673bb", "committedDate": "2020-10-13T16:06:05Z", "message": "Add capability to create or lookup symref for VMThread.tempSlot\n\ntempSlotSymbol can be used to store additional info that the VM may\nuse during a call from JIT-ed code to the VM - such as when calling\nVM Internal Natives and needing to provide the number of parameters\nfor signature polymorphic methods.\n\nSigned-off-by: Nazim Bhuiyan <nubhuiyan@ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "705548e9bef9b30ff06dd664408735a1d1c14f0f", "author": {"user": {"login": "nbhuiyan", "name": "Nazim Bhuiyan"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/705548e9bef9b30ff06dd664408735a1d1c14f0f", "committedDate": "2020-10-13T16:06:05Z", "message": "Insert arg count in VMThread's tempSlot for invokeBasic calls\n\nMethodHandle.invokeBasic is implemented as an internal native\nmethod that is signature polymorphic. When calling invokeBasic\nfrom the JIT body, the VM needs to know the number of arguments\nfor the invokeBasic call in order to locate the receiver object\non the stack. This implementation inserts a node at the lowering\ntrees phase to store the number of args into the VMThread.tempSlot\nright before the call to MethodHandle.invokeBasic.\n\nSigned-off-by: Nazim Bhuiyan <nubhuiyan@ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3348c4fb305cf8d7a16f67135c364d3222f62d4f", "author": {"user": {"login": "nbhuiyan", "name": "Nazim Bhuiyan"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/3348c4fb305cf8d7a16f67135c364d3222f62d4f", "committedDate": "2020-10-13T16:02:47Z", "message": "Insert arg count in VMThread's tempSlot for invokeBasic calls\n\nMethodHandle.invokeBasic is implemented as an internal native\nmethod that is signature polymorphic. When calling invokeBasic\nfrom the JIT body, the VM needs to know the number of arguments\nfor the invokeBasic call in order to locate the receiver object\non the stack. This implementation inserts a node at the lowering\ntrees phase to store the number of args into the VMThread.tempSlot\nright before the call to MethodHandle.invokeBasic.\n\nSigned-off-by: Nazim Bhuiyan <nubhuiyan@ibm.com>"}, "afterCommit": {"oid": "705548e9bef9b30ff06dd664408735a1d1c14f0f", "author": {"user": {"login": "nbhuiyan", "name": "Nazim Bhuiyan"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/705548e9bef9b30ff06dd664408735a1d1c14f0f", "committedDate": "2020-10-13T16:06:05Z", "message": "Insert arg count in VMThread's tempSlot for invokeBasic calls\n\nMethodHandle.invokeBasic is implemented as an internal native\nmethod that is signature polymorphic. When calling invokeBasic\nfrom the JIT body, the VM needs to know the number of arguments\nfor the invokeBasic call in order to locate the receiver object\non the stack. This implementation inserts a node at the lowering\ntrees phase to store the number of args into the VMThread.tempSlot\nright before the call to MethodHandle.invokeBasic.\n\nSigned-off-by: Nazim Bhuiyan <nubhuiyan@ibm.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 388, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}