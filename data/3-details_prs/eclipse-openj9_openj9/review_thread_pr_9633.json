{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwOTU0MTIx", "number": 9633, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMzoxMTowNFrOD-dalQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMzoxNjoxMFrOD-ddYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODIwMjQ1OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/control/CompilationThread.cpp", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMzoxMTowNFrOGYkxiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxODozNToxNFrOGY-Nhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQyMTUxNQ==", "bodyText": "Don't hardcode 0x2 here as we'll miss it if we every re-order the flags.   There should be a named constant that can be used instead", "url": "https://github.com/eclipse-openj9/openj9/pull/9633#discussion_r428421515", "createdAt": "2020-05-21T03:11:04Z", "author": {"login": "DanHeidinga"}, "path": "runtime/compiler/control/CompilationThread.cpp", "diffHunk": "@@ -2993,15 +2993,17 @@ void TR::CompilationInfo::insertDLTRecord(J9Method *method, int32_t bcIndex, voi\n    }\n    }\n \n-void TR::CompilationInfo::cleanDLTRecordOnUnload(J9ClassLoader *classloader)\n+void TR::CompilationInfo::cleanDLTRecordOnUnload()\n    {\n    for (int32_t i=0; i<DLT_HASHSIZE; i++)\n       {\n       struct DLT_record *prev=NULL, *curr=_dltHash[i], *next;\n       while (curr != NULL)\n          {\n+         J9Class *clazz = J9_CLASS_FROM_METHOD(curr->_method);\n          next = curr->_next;\n-         if (J9_CLASS_FROM_METHOD(curr->_method)->classLoader == classloader)\n+         if ( J9_ARE_ALL_BITS_SET(clazz->classLoader->gcFlags, 0x2)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7667698e7e98af70d15ef744e5f4c15725a24b6"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY2OTU5Nw==", "bodyText": "We could either,\nMove the original defines on the GC side to somewhere central.\nhttps://github.com/eclipse/openj9/blob/29cc3dba911e30df27e2856c50f6b9ea78508fe3/runtime/gc_include/j9modron.h#L179-L185\nOr, we could just define J9_GC_CLASS_LOADER_DEAD in CompilationThread.\nWould you have a preference?", "url": "https://github.com/eclipse-openj9/openj9/pull/9633#discussion_r428669597", "createdAt": "2020-05-21T14:00:17Z", "author": {"login": "AlenBadel"}, "path": "runtime/compiler/control/CompilationThread.cpp", "diffHunk": "@@ -2993,15 +2993,17 @@ void TR::CompilationInfo::insertDLTRecord(J9Method *method, int32_t bcIndex, voi\n    }\n    }\n \n-void TR::CompilationInfo::cleanDLTRecordOnUnload(J9ClassLoader *classloader)\n+void TR::CompilationInfo::cleanDLTRecordOnUnload()\n    {\n    for (int32_t i=0; i<DLT_HASHSIZE; i++)\n       {\n       struct DLT_record *prev=NULL, *curr=_dltHash[i], *next;\n       while (curr != NULL)\n          {\n+         J9Class *clazz = J9_CLASS_FROM_METHOD(curr->_method);\n          next = curr->_next;\n-         if (J9_CLASS_FROM_METHOD(curr->_method)->classLoader == classloader)\n+         if ( J9_ARE_ALL_BITS_SET(clazz->classLoader->gcFlags, 0x2)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQyMTUxNQ=="}, "originalCommit": {"oid": "c7667698e7e98af70d15ef744e5f4c15725a24b6"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODcyOTYzMA==", "bodyText": "Why not include j9modron.h directly?", "url": "https://github.com/eclipse-openj9/openj9/pull/9633#discussion_r428729630", "createdAt": "2020-05-21T15:31:06Z", "author": {"login": "DanHeidinga"}, "path": "runtime/compiler/control/CompilationThread.cpp", "diffHunk": "@@ -2993,15 +2993,17 @@ void TR::CompilationInfo::insertDLTRecord(J9Method *method, int32_t bcIndex, voi\n    }\n    }\n \n-void TR::CompilationInfo::cleanDLTRecordOnUnload(J9ClassLoader *classloader)\n+void TR::CompilationInfo::cleanDLTRecordOnUnload()\n    {\n    for (int32_t i=0; i<DLT_HASHSIZE; i++)\n       {\n       struct DLT_record *prev=NULL, *curr=_dltHash[i], *next;\n       while (curr != NULL)\n          {\n+         J9Class *clazz = J9_CLASS_FROM_METHOD(curr->_method);\n          next = curr->_next;\n-         if (J9_CLASS_FROM_METHOD(curr->_method)->classLoader == classloader)\n+         if ( J9_ARE_ALL_BITS_SET(clazz->classLoader->gcFlags, 0x2)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQyMTUxNQ=="}, "originalCommit": {"oid": "c7667698e7e98af70d15ef744e5f4c15725a24b6"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgzODI3OQ==", "bodyText": "My apologies, I thought I tried earlier and got some re-definition errors.\nIncluded J9modron.h directly. See AlenBadel@5095b2f", "url": "https://github.com/eclipse-openj9/openj9/pull/9633#discussion_r428838279", "createdAt": "2020-05-21T18:35:14Z", "author": {"login": "AlenBadel"}, "path": "runtime/compiler/control/CompilationThread.cpp", "diffHunk": "@@ -2993,15 +2993,17 @@ void TR::CompilationInfo::insertDLTRecord(J9Method *method, int32_t bcIndex, voi\n    }\n    }\n \n-void TR::CompilationInfo::cleanDLTRecordOnUnload(J9ClassLoader *classloader)\n+void TR::CompilationInfo::cleanDLTRecordOnUnload()\n    {\n    for (int32_t i=0; i<DLT_HASHSIZE; i++)\n       {\n       struct DLT_record *prev=NULL, *curr=_dltHash[i], *next;\n       while (curr != NULL)\n          {\n+         J9Class *clazz = J9_CLASS_FROM_METHOD(curr->_method);\n          next = curr->_next;\n-         if (J9_CLASS_FROM_METHOD(curr->_method)->classLoader == classloader)\n+         if ( J9_ARE_ALL_BITS_SET(clazz->classLoader->gcFlags, 0x2)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQyMTUxNQ=="}, "originalCommit": {"oid": "c7667698e7e98af70d15ef744e5f4c15725a24b6"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODIwMzA4OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/control/CompilationThread.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMzoxMTo0MVrOGYkyDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxODozNTozMVrOGY-OJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQyMTY0Nw==", "bodyText": "Same concern here - magic numbers are painful when evolving the code", "url": "https://github.com/eclipse-openj9/openj9/pull/9633#discussion_r428421647", "createdAt": "2020-05-21T03:11:41Z", "author": {"login": "DanHeidinga"}, "path": "runtime/compiler/control/CompilationThread.cpp", "diffHunk": "@@ -12662,8 +12663,9 @@ void J9Method_HT::onClassUnloading(J9ClassLoader *j9classLoader)\n       HT_Entry *prev = NULL;\n       while (entry)\n          {\n-         if (NULL == entry->_j9method\n-            || J9_CLASS_FROM_METHOD(entry->_j9method)->classLoader == j9classLoader)\n+         J9Class *clazz = J9_CLASS_FROM_METHOD(entry->_j9method);\n+         if ( J9_ARE_ALL_BITS_SET(clazz->classLoader->gcFlags, 0x2)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7667698e7e98af70d15ef744e5f4c15725a24b6"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgzODQzNg==", "bodyText": "Included J9modron.h directly. See AlenBadel@5095b2f", "url": "https://github.com/eclipse-openj9/openj9/pull/9633#discussion_r428838436", "createdAt": "2020-05-21T18:35:31Z", "author": {"login": "AlenBadel"}, "path": "runtime/compiler/control/CompilationThread.cpp", "diffHunk": "@@ -12662,8 +12663,9 @@ void J9Method_HT::onClassUnloading(J9ClassLoader *j9classLoader)\n       HT_Entry *prev = NULL;\n       while (entry)\n          {\n-         if (NULL == entry->_j9method\n-            || J9_CLASS_FROM_METHOD(entry->_j9method)->classLoader == j9classLoader)\n+         J9Class *clazz = J9_CLASS_FROM_METHOD(entry->_j9method);\n+         if ( J9_ARE_ALL_BITS_SET(clazz->classLoader->gcFlags, 0x2)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQyMTY0Nw=="}, "originalCommit": {"oid": "c7667698e7e98af70d15ef744e5f4c15725a24b6"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODIwNTQ1OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/control/HookedByTheJit.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMzoxMzoxOFrOGYkzhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNDoyNjoyNVrOGY044A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQyMjAyMA==", "bodyText": "I don't understand the indentation here.  Why is compInfo->.... more deeply nested than the variable declaration above?", "url": "https://github.com/eclipse-openj9/openj9/pull/9633#discussion_r428422020", "createdAt": "2020-05-21T03:13:18Z", "author": {"login": "DanHeidinga"}, "path": "runtime/compiler/control/HookedByTheJit.cpp", "diffHunk": "@@ -2180,6 +2175,19 @@ static void jitHookClassLoaderUnload(J9HookInterface * * hookInterface, UDATA ev\n \n #endif /* defined (J9VM_GC_DYNAMIC_CLASS_UNLOADING)*/\n \n+#if defined(J9VM_GC_DYNAMIC_CLASS_UNLOADING) && defined(J9VM_JIT_DYNAMIC_LOOP_TRANSFER)\n+static void jitHookClassLoadersUnload(J9HookInterface * * hookInterface, UDATA eventNum, void * eventData, void * userData)\n+   {\n+   J9VMClassUnloadEvent * unloadedEvent = (J9VMClassUnloadEvent *)eventData;\n+   J9VMThread * vmThread = unloadedEvent->currentThread;\n+   J9JITConfig * jitConfig = vmThread->javaVM->jitConfig;\n+   TR::CompilationInfo * compInfo = TR::CompilationInfo::get(jitConfig);\n+      compInfo->cleanDLTRecordOnUnload();\n+      if (compInfo->getDLT_HT())\n+         compInfo->getDLT_HT()->onClassUnloading();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7667698e7e98af70d15ef744e5f4c15725a24b6"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY4NTUzNg==", "bodyText": "Thanks for catching that.\nSee: 72c265f", "url": "https://github.com/eclipse-openj9/openj9/pull/9633#discussion_r428685536", "createdAt": "2020-05-21T14:26:25Z", "author": {"login": "AlenBadel"}, "path": "runtime/compiler/control/HookedByTheJit.cpp", "diffHunk": "@@ -2180,6 +2175,19 @@ static void jitHookClassLoaderUnload(J9HookInterface * * hookInterface, UDATA ev\n \n #endif /* defined (J9VM_GC_DYNAMIC_CLASS_UNLOADING)*/\n \n+#if defined(J9VM_GC_DYNAMIC_CLASS_UNLOADING) && defined(J9VM_JIT_DYNAMIC_LOOP_TRANSFER)\n+static void jitHookClassLoadersUnload(J9HookInterface * * hookInterface, UDATA eventNum, void * eventData, void * userData)\n+   {\n+   J9VMClassUnloadEvent * unloadedEvent = (J9VMClassUnloadEvent *)eventData;\n+   J9VMThread * vmThread = unloadedEvent->currentThread;\n+   J9JITConfig * jitConfig = vmThread->javaVM->jitConfig;\n+   TR::CompilationInfo * compInfo = TR::CompilationInfo::get(jitConfig);\n+      compInfo->cleanDLTRecordOnUnload();\n+      if (compInfo->getDLT_HT())\n+         compInfo->getDLT_HT()->onClassUnloading();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQyMjAyMA=="}, "originalCommit": {"oid": "c7667698e7e98af70d15ef744e5f4c15725a24b6"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODIwOTYzOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/control/CompilationThread.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMzoxNjoxMFrOGYk2EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNDoyNTozNlrOGY021w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQyMjY3Mw==", "bodyText": "It would be good to add a comment here that the class specific check is required to handle vm anonymous classes which have a lifecycle independent of their classloader.  I had to double check the code when looking for how anon classes are handled so being explicit here would help.\nSame with the code above", "url": "https://github.com/eclipse-openj9/openj9/pull/9633#discussion_r428422673", "createdAt": "2020-05-21T03:16:10Z", "author": {"login": "DanHeidinga"}, "path": "runtime/compiler/control/CompilationThread.cpp", "diffHunk": "@@ -12662,8 +12663,9 @@ void J9Method_HT::onClassUnloading(J9ClassLoader *j9classLoader)\n       HT_Entry *prev = NULL;\n       while (entry)\n          {\n-         if (NULL == entry->_j9method\n-            || J9_CLASS_FROM_METHOD(entry->_j9method)->classLoader == j9classLoader)\n+         J9Class *clazz = J9_CLASS_FROM_METHOD(entry->_j9method);\n+         if ( J9_ARE_ALL_BITS_SET(clazz->classLoader->gcFlags, 0x2)\n+            || (J9CLASS_FLAGS(clazz) & J9AccClassDying) )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7667698e7e98af70d15ef744e5f4c15725a24b6"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY4NTAxNQ==", "bodyText": "I agree. Thanks!\nSee: 72c265f", "url": "https://github.com/eclipse-openj9/openj9/pull/9633#discussion_r428685015", "createdAt": "2020-05-21T14:25:36Z", "author": {"login": "AlenBadel"}, "path": "runtime/compiler/control/CompilationThread.cpp", "diffHunk": "@@ -12662,8 +12663,9 @@ void J9Method_HT::onClassUnloading(J9ClassLoader *j9classLoader)\n       HT_Entry *prev = NULL;\n       while (entry)\n          {\n-         if (NULL == entry->_j9method\n-            || J9_CLASS_FROM_METHOD(entry->_j9method)->classLoader == j9classLoader)\n+         J9Class *clazz = J9_CLASS_FROM_METHOD(entry->_j9method);\n+         if ( J9_ARE_ALL_BITS_SET(clazz->classLoader->gcFlags, 0x2)\n+            || (J9CLASS_FLAGS(clazz) & J9AccClassDying) )", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQyMjY3Mw=="}, "originalCommit": {"oid": "c7667698e7e98af70d15ef744e5f4c15725a24b6"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 207, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}