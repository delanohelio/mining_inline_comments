{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3Mzg3MTI4", "number": 8416, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNToyMTo1OFrODbdGwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNToyMTo1OFrODbdGwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMTE1MDA4OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/aarch64/codegen/J9TreeEvaluator.cpp", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNToyMTo1OFrOFi829g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNTozMzo1NlrOFi9Ezg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE5MzAxNA==", "bodyText": "This variable n is used only in the following if (comp->useCompressedPointers() && ... ) { ... } block.\nCan you move the variable into the block?", "url": "https://github.com/eclipse-openj9/openj9/pull/8416#discussion_r372193014", "createdAt": "2020-01-29T05:21:58Z", "author": {"login": "knn-k"}, "path": "runtime/compiler/aarch64/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -971,11 +970,28 @@ J9::ARM64::TreeEvaluator::evaluateNULLCHKWithPossibleResolve(TR::Node *node, boo\n    TR::Snippet *snippet = new (cg->trHeapMemory()) TR::ARM64HelperCallSnippet(cg, node, snippetLabel, node->getSymbolReference(), NULL);\n    cg->addSnippet(snippet);\n    TR::Register *referenceReg = cg->evaluate(reference);\n-   TR::InstOpCode::Mnemonic compareOp = useCompressedPointers ? TR::InstOpCode::cbzw : TR::InstOpCode::cbzx;\n-   TR::Instruction *cbzInstruction = generateCompareBranchInstruction(cg, compareOp, node, referenceReg, snippetLabel, NULL);\n+   TR::Instruction *cbzInstruction = generateCompareBranchInstruction(cg, TR::InstOpCode::cbzx, node, referenceReg, snippetLabel, NULL);\n    cbzInstruction->setNeedsGCMap(0xffffffff);\n    snippet->gcMap().setGCRegisterMask(0xffffffff);\n \n+   TR::Node *n = NULL;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69a14258c3559f8af2eb75881311324a5c4731ad"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE5NjU1OA==", "bodyText": "Moved the declaration of n inside the block.", "url": "https://github.com/eclipse-openj9/openj9/pull/8416#discussion_r372196558", "createdAt": "2020-01-29T05:33:56Z", "author": {"login": "Akira1Saitoh"}, "path": "runtime/compiler/aarch64/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -971,11 +970,28 @@ J9::ARM64::TreeEvaluator::evaluateNULLCHKWithPossibleResolve(TR::Node *node, boo\n    TR::Snippet *snippet = new (cg->trHeapMemory()) TR::ARM64HelperCallSnippet(cg, node, snippetLabel, node->getSymbolReference(), NULL);\n    cg->addSnippet(snippet);\n    TR::Register *referenceReg = cg->evaluate(reference);\n-   TR::InstOpCode::Mnemonic compareOp = useCompressedPointers ? TR::InstOpCode::cbzw : TR::InstOpCode::cbzx;\n-   TR::Instruction *cbzInstruction = generateCompareBranchInstruction(cg, compareOp, node, referenceReg, snippetLabel, NULL);\n+   TR::Instruction *cbzInstruction = generateCompareBranchInstruction(cg, TR::InstOpCode::cbzx, node, referenceReg, snippetLabel, NULL);\n    cbzInstruction->setNeedsGCMap(0xffffffff);\n    snippet->gcMap().setGCRegisterMask(0xffffffff);\n \n+   TR::Node *n = NULL;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE5MzAxNA=="}, "originalCommit": {"oid": "69a14258c3559f8af2eb75881311324a5c4731ad"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 661, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}