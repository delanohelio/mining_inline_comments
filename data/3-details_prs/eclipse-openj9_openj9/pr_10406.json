{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5NTcyMjU5", "number": 10406, "title": "Putfield & Withfield support for sym ref generation for flattened fields", "bodyText": "Support flattened fields in putfield and withfield.\nDependencies\n\n 1. #10115 Add TypeLayoutEntry build for flattened fields\n 2. #10352 Create JIT helper functions on checking flattened fields\n 3. eclipse/omr#5493 Create JIT option to select between runtime helpers or SymRef generation for flattened field support\n 4. #10462 Runtime flattened fields helper\n 5. #10362 LoadInstance support for sym ref generation for flattened fields.\n\nSigned-off-by: Annabelle Huo Annabelle.Huo@ibm.com", "createdAt": "2020-08-18T15:26:35Z", "url": "https://github.com/eclipse-openj9/openj9/pull/10406", "merged": true, "mergeCommit": {"oid": "ee8c44b2cba567196823785c5bbb6217583247ef"}, "closed": true, "closedAt": "2020-11-18T17:43:52Z", "author": {"login": "a7ehuo"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdCGXeGgBqjM2ODY1NjMxODY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABddx0iFAFqTUzMzcxNzA5OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3ad26f7e1ae40e5eea5079b60e6fc102efb0f7d7", "author": {"user": {"login": "a7ehuo", "name": "Annabelle Huo"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/3ad26f7e1ae40e5eea5079b60e6fc102efb0f7d7", "committedDate": "2020-08-18T15:24:35Z", "message": "Support flattened fields in putfield\n\n[skip ci]\n\nSigned-off-by: Annabelle Huo <Annabelle.Huo@ibm.com>"}, "afterCommit": {"oid": "6892e39bf91472d81a158a9f9f6e3d795bd1e377", "author": {"user": {"login": "a7ehuo", "name": "Annabelle Huo"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/6892e39bf91472d81a158a9f9f6e3d795bd1e377", "committedDate": "2020-08-24T17:49:45Z", "message": "Support flattened fields in putfield and withfield\n\n[skip ci]\n\nSigned-off-by: Annabelle Huo <Annabelle.Huo@ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6892e39bf91472d81a158a9f9f6e3d795bd1e377", "author": {"user": {"login": "a7ehuo", "name": "Annabelle Huo"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/6892e39bf91472d81a158a9f9f6e3d795bd1e377", "committedDate": "2020-08-24T17:49:45Z", "message": "Support flattened fields in putfield and withfield\n\n[skip ci]\n\nSigned-off-by: Annabelle Huo <Annabelle.Huo@ibm.com>"}, "afterCommit": {"oid": "cde1e9c7148dbf502165072b230ccc3b9c1a1a3c", "author": {"user": {"login": "a7ehuo", "name": "Annabelle Huo"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/cde1e9c7148dbf502165072b230ccc3b9c1a1a3c", "committedDate": "2020-08-26T22:02:45Z", "message": "Support flattened fields in putfield and withfield\n\n[skip ci]\n\nSigned-off-by: Annabelle Huo <Annabelle.Huo@ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cde1e9c7148dbf502165072b230ccc3b9c1a1a3c", "author": {"user": {"login": "a7ehuo", "name": "Annabelle Huo"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/cde1e9c7148dbf502165072b230ccc3b9c1a1a3c", "committedDate": "2020-08-26T22:02:45Z", "message": "Support flattened fields in putfield and withfield\n\n[skip ci]\n\nSigned-off-by: Annabelle Huo <Annabelle.Huo@ibm.com>"}, "afterCommit": {"oid": "6830b4e35738e52f5947a1c6d7f67fa38561f129", "author": {"user": {"login": "a7ehuo", "name": "Annabelle Huo"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/6830b4e35738e52f5947a1c6d7f67fa38561f129", "committedDate": "2020-09-22T22:06:26Z", "message": "Generate sym ref for flattened fields in putfield and withfield\n\nSigned-off-by: Annabelle Huo <Annabelle.Huo@ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6830b4e35738e52f5947a1c6d7f67fa38561f129", "author": {"user": {"login": "a7ehuo", "name": "Annabelle Huo"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/6830b4e35738e52f5947a1c6d7f67fa38561f129", "committedDate": "2020-09-22T22:06:26Z", "message": "Generate sym ref for flattened fields in putfield and withfield\n\nSigned-off-by: Annabelle Huo <Annabelle.Huo@ibm.com>"}, "afterCommit": {"oid": "fbec6d2fb22da6813b35cbdaba7f9d88374d7c2b", "author": {"user": {"login": "a7ehuo", "name": "Annabelle Huo"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/fbec6d2fb22da6813b35cbdaba7f9d88374d7c2b", "committedDate": "2020-09-25T15:34:17Z", "message": "Generate sym ref for flattened fields in putfield and withfield\n\nSigned-off-by: Annabelle Huo <Annabelle.Huo@ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMzMyNDky", "url": "https://github.com/eclipse-openj9/openj9/pull/10406#pullrequestreview-502332492", "createdAt": "2020-10-05T18:55:15Z", "commit": {"oid": "fbec6d2fb22da6813b35cbdaba7f9d88374d7c2b"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxODo1NToxNVrOHcpq_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwMzo1MDo1M1rOHc1A7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgwNDkyNw==", "bodyText": "Loop body is not indented", "url": "https://github.com/eclipse-openj9/openj9/pull/10406#discussion_r499804927", "createdAt": "2020-10-05T18:55:15Z", "author": {"login": "hzongaro"}, "path": "runtime/compiler/ilgen/Walker.cpp", "diffHunk": "@@ -6393,6 +6418,148 @@ TR_J9ByteCodeIlGenerator::genFlattenableWithFieldWithHelper(uint16_t fieldCpInde\n    push(helperCallNode);\n    }\n \n+static TR::SymbolReference * createLoadFieldSymRef(TR::Compilation * comp, TR_OpaqueClassBlock * fieldClass, const char * fieldname)\n+   {\n+   const TR::TypeLayout *fieldClassLayout = comp->typeLayout(fieldClass);\n+   size_t fieldClassFieldCount = fieldClassLayout->count();\n+\n+   for (size_t idx = 0; idx < fieldClassFieldCount; idx++)\n+      {\n+      const TR::TypeLayoutEntry &fieldEntry = fieldClassLayout->entry(idx);\n+      if (!strcmp(fieldname, fieldEntry._fieldname))\n+         {\n+         auto * fieldSymRef = comp->getSymRefTab()->findOrFabricateShadowSymbol(fieldClass,\n+                                                                              fieldEntry._datatype,\n+                                                                              fieldEntry._offset,\n+                                                                              fieldEntry._isVolatile,\n+                                                                              fieldEntry._isPrivate,\n+                                                                              fieldEntry._isFinal,\n+                                                                              fieldEntry._fieldname,\n+                                                                              fieldEntry._typeSignature\n+                                                                              );\n+         return fieldSymRef;\n+         }\n+      }\n+\n+   TR_ASSERT_FATAL(false, \"Did not find the matching fieldname %s\", fieldname);\n+   return NULL;\n+   }\n+\n+static char * removeTopLevelPrefixForFlattenedFields(const char * fieldName, uint32_t numCharactersToRemove, TR::Region &region)\n+   {\n+   uint32_t newStringLen = strlen(fieldName) - numCharactersToRemove;\n+\n+   char * newName = new (region) char[newStringLen+1];\n+   strncpy(newName, fieldName + numCharactersToRemove, newStringLen);\n+\n+   newName[newStringLen] = '\\0';\n+   return newName;\n+   }\n+\n+\n+void\n+TR_J9ByteCodeIlGenerator::genFlattenableWithField(uint16_t fieldCpIndex, TR_OpaqueClassBlock * valueClass)\n+   {\n+   /* An example on what the tree with flattened fields would look like\n+    *\n+    * value FlattenedLine2D {\n+    *   flattened Point2D st;\n+    *   flattened Point2D en;\n+    * }\n+    * /--- trees inserted ------------------------\n+    * n68n     (  0)  NULLCHK on n63n\n+    * n67n     (  2)    iloadi  FlattenedLine2D.st.x\n+    * n63n     (  3)      ==>newvalue (Identityless sharedMemory )\n+    * n70n     (  0)  NULLCHK on n63n\n+    * n69n     (  2)    iloadi  FlattenedLine2D.st.y I\n+    * n63n     (  3)      ==>newvalue (Identityless sharedMemory )\n+    * n72n     (  0)  NULLCHK on n65n\n+    * n71n     (  2)    iloadi  Point2D.x I\n+    * n65n     (  2)      aload  <parm 1 P>\n+    * n74n     (  0)  NULLCHK on n65n\n+    * n73n     (  2)    iloadi  Point2D.y I\n+    * n65n     (  2)      ==>aload\n+    * n76n     (  0)  treetop\n+    * n75n     (  1)    newvalue  jitNewValue[#100  helper Method]\n+    * n66n     (  1)      loadaddr  FlattenedLine2D\n+    * n67n     (  2)      ==>iloadi\n+    * n69n     (  2)      ==>iloadi\n+    * n71n     (  2)      ==>iloadi\n+    * n73n     (  2)      ==>iloadi\n+    * /--- stack after ------------------------\n+    * @0 n75n     (  1)  ==>newvalue (Identityless sharedMemory )\n+    * ============================================================\n+    */\n+   TR_ResolvedJ9Method * owningMethod = static_cast<TR_ResolvedJ9Method*>(_methodSymbol->getResolvedMethod());\n+\n+   if (isFieldResolved(comp(), owningMethod, fieldCpIndex, false))\n+      {\n+      TR::Node *newFieldValue = pop();\n+      TR::Node *originalObject = pop();\n+\n+      int32_t prefixLen = 0;\n+      char * fieldNamePrefix = getTopLevelPrefixForFlattenedFields(owningMethod, fieldCpIndex, prefixLen, comp()->trMemory()->currentStackRegion());\n+\n+      int len;\n+      const char * fieldClassChars = owningMethod->fieldSignatureChars(fieldCpIndex, len);\n+      TR_OpaqueClassBlock * fieldClass = fej9()->getClassFromSignature(fieldClassChars, len, owningMethod);\n+\n+      loadClassObject(valueClass);\n+\n+      const TR::TypeLayout *typeLayout = comp()->typeLayout(valueClass);\n+      size_t fieldCount = typeLayout->count();\n+\n+      TR_OpaqueClassBlock * containingClass = owningMethod->definingClassFromCPFieldRef(comp(), fieldCpIndex, _methodSymbol->isStatic());\n+\n+      for (size_t idx = 0; idx < fieldCount; idx++)\n+      {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbec6d2fb22da6813b35cbdaba7f9d88374d7c2b"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk3NDgzOA==", "bodyText": "This example should probably show what bytecode is being processed to produce these trees or at least some Java pseudo-code.  It might also be a little easier to understand if the value at n63n was an existing value that could be referenced with a name rather than another newly constructed value.", "url": "https://github.com/eclipse-openj9/openj9/pull/10406#discussion_r499974838", "createdAt": "2020-10-06T02:42:19Z", "author": {"login": "hzongaro"}, "path": "runtime/compiler/ilgen/Walker.cpp", "diffHunk": "@@ -6393,6 +6418,148 @@ TR_J9ByteCodeIlGenerator::genFlattenableWithFieldWithHelper(uint16_t fieldCpInde\n    push(helperCallNode);\n    }\n \n+static TR::SymbolReference * createLoadFieldSymRef(TR::Compilation * comp, TR_OpaqueClassBlock * fieldClass, const char * fieldname)\n+   {\n+   const TR::TypeLayout *fieldClassLayout = comp->typeLayout(fieldClass);\n+   size_t fieldClassFieldCount = fieldClassLayout->count();\n+\n+   for (size_t idx = 0; idx < fieldClassFieldCount; idx++)\n+      {\n+      const TR::TypeLayoutEntry &fieldEntry = fieldClassLayout->entry(idx);\n+      if (!strcmp(fieldname, fieldEntry._fieldname))\n+         {\n+         auto * fieldSymRef = comp->getSymRefTab()->findOrFabricateShadowSymbol(fieldClass,\n+                                                                              fieldEntry._datatype,\n+                                                                              fieldEntry._offset,\n+                                                                              fieldEntry._isVolatile,\n+                                                                              fieldEntry._isPrivate,\n+                                                                              fieldEntry._isFinal,\n+                                                                              fieldEntry._fieldname,\n+                                                                              fieldEntry._typeSignature\n+                                                                              );\n+         return fieldSymRef;\n+         }\n+      }\n+\n+   TR_ASSERT_FATAL(false, \"Did not find the matching fieldname %s\", fieldname);\n+   return NULL;\n+   }\n+\n+static char * removeTopLevelPrefixForFlattenedFields(const char * fieldName, uint32_t numCharactersToRemove, TR::Region &region)\n+   {\n+   uint32_t newStringLen = strlen(fieldName) - numCharactersToRemove;\n+\n+   char * newName = new (region) char[newStringLen+1];\n+   strncpy(newName, fieldName + numCharactersToRemove, newStringLen);\n+\n+   newName[newStringLen] = '\\0';\n+   return newName;\n+   }\n+\n+\n+void\n+TR_J9ByteCodeIlGenerator::genFlattenableWithField(uint16_t fieldCpIndex, TR_OpaqueClassBlock * valueClass)\n+   {\n+   /* An example on what the tree with flattened fields would look like\n+    *\n+    * value FlattenedLine2D {\n+    *   flattened Point2D st;\n+    *   flattened Point2D en;\n+    * }\n+    * /--- trees inserted ------------------------", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbec6d2fb22da6813b35cbdaba7f9d88374d7c2b"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk5MDAwMA==", "bodyText": "I would suggest making the operands a little more explicit here with bytecode or some Java/pseudo-code so that it's easier to tie this to the trees that are shown in the example.", "url": "https://github.com/eclipse-openj9/openj9/pull/10406#discussion_r499990000", "createdAt": "2020-10-06T03:47:27Z", "author": {"login": "hzongaro"}, "path": "runtime/compiler/ilgen/Walker.cpp", "diffHunk": "@@ -7012,6 +7186,89 @@ TR_J9ByteCodeIlGenerator::storeFlattenableInstanceWithHelper(int32_t cpIndex)\n    genTreeTop(helperCallNode);\n    }\n \n+void\n+TR_J9ByteCodeIlGenerator::storeFlattenableInstance(int32_t cpIndex)\n+   {\n+   /* An example on what the tree with flattened fields would look like\n+    *\n+    * class AssortedReftWithLongAlignment {\n+    *    flattened Point2D point;\n+    *    flattened Line2D line;\n+    *    flattened ValueObject o;\n+    *    flattened ValueLong l;\n+    *    flattened ValueDouble d;\n+    *    flattened ValueInt i;\n+    *    flattened Triangle2D tri;\n+    * }\n+    *\n+    * AssortedRefWithLongAlignment.setpoint(QPoint2D;)V", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbec6d2fb22da6813b35cbdaba7f9d88374d7c2b"}, "originalPosition": 260}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk5MDI2Mw==", "bodyText": "I don't think all these fields are relevant for this example.  If they're not, I suggest you remove them to avoid confusion.", "url": "https://github.com/eclipse-openj9/openj9/pull/10406#discussion_r499990263", "createdAt": "2020-10-06T03:48:50Z", "author": {"login": "hzongaro"}, "path": "runtime/compiler/ilgen/Walker.cpp", "diffHunk": "@@ -7012,6 +7186,89 @@ TR_J9ByteCodeIlGenerator::storeFlattenableInstanceWithHelper(int32_t cpIndex)\n    genTreeTop(helperCallNode);\n    }\n \n+void\n+TR_J9ByteCodeIlGenerator::storeFlattenableInstance(int32_t cpIndex)\n+   {\n+   /* An example on what the tree with flattened fields would look like\n+    *\n+    * class AssortedReftWithLongAlignment {\n+    *    flattened Point2D point;\n+    *    flattened Line2D line;\n+    *    flattened ValueObject o;\n+    *    flattened ValueLong l;\n+    *    flattened ValueDouble d;\n+    *    flattened ValueInt i;\n+    *    flattened Triangle2D tri;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbec6d2fb22da6813b35cbdaba7f9d88374d7c2b"}, "originalPosition": 257}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk5MDUzNw==", "bodyText": "Does this actually need to create a copy of the name with the prefix removed or could it simply be written as follows?\nchar *fieldNameRemovedTopLevelPrefix = fieldEntry._fieldname + prefixLen;", "url": "https://github.com/eclipse-openj9/openj9/pull/10406#discussion_r499990537", "createdAt": "2020-10-06T03:50:06Z", "author": {"login": "hzongaro"}, "path": "runtime/compiler/ilgen/Walker.cpp", "diffHunk": "@@ -6393,6 +6418,148 @@ TR_J9ByteCodeIlGenerator::genFlattenableWithFieldWithHelper(uint16_t fieldCpInde\n    push(helperCallNode);\n    }\n \n+static TR::SymbolReference * createLoadFieldSymRef(TR::Compilation * comp, TR_OpaqueClassBlock * fieldClass, const char * fieldname)\n+   {\n+   const TR::TypeLayout *fieldClassLayout = comp->typeLayout(fieldClass);\n+   size_t fieldClassFieldCount = fieldClassLayout->count();\n+\n+   for (size_t idx = 0; idx < fieldClassFieldCount; idx++)\n+      {\n+      const TR::TypeLayoutEntry &fieldEntry = fieldClassLayout->entry(idx);\n+      if (!strcmp(fieldname, fieldEntry._fieldname))\n+         {\n+         auto * fieldSymRef = comp->getSymRefTab()->findOrFabricateShadowSymbol(fieldClass,\n+                                                                              fieldEntry._datatype,\n+                                                                              fieldEntry._offset,\n+                                                                              fieldEntry._isVolatile,\n+                                                                              fieldEntry._isPrivate,\n+                                                                              fieldEntry._isFinal,\n+                                                                              fieldEntry._fieldname,\n+                                                                              fieldEntry._typeSignature\n+                                                                              );\n+         return fieldSymRef;\n+         }\n+      }\n+\n+   TR_ASSERT_FATAL(false, \"Did not find the matching fieldname %s\", fieldname);\n+   return NULL;\n+   }\n+\n+static char * removeTopLevelPrefixForFlattenedFields(const char * fieldName, uint32_t numCharactersToRemove, TR::Region &region)\n+   {\n+   uint32_t newStringLen = strlen(fieldName) - numCharactersToRemove;\n+\n+   char * newName = new (region) char[newStringLen+1];\n+   strncpy(newName, fieldName + numCharactersToRemove, newStringLen);\n+\n+   newName[newStringLen] = '\\0';\n+   return newName;\n+   }\n+\n+\n+void\n+TR_J9ByteCodeIlGenerator::genFlattenableWithField(uint16_t fieldCpIndex, TR_OpaqueClassBlock * valueClass)\n+   {\n+   /* An example on what the tree with flattened fields would look like\n+    *\n+    * value FlattenedLine2D {\n+    *   flattened Point2D st;\n+    *   flattened Point2D en;\n+    * }\n+    * /--- trees inserted ------------------------\n+    * n68n     (  0)  NULLCHK on n63n\n+    * n67n     (  2)    iloadi  FlattenedLine2D.st.x\n+    * n63n     (  3)      ==>newvalue (Identityless sharedMemory )\n+    * n70n     (  0)  NULLCHK on n63n\n+    * n69n     (  2)    iloadi  FlattenedLine2D.st.y I\n+    * n63n     (  3)      ==>newvalue (Identityless sharedMemory )\n+    * n72n     (  0)  NULLCHK on n65n\n+    * n71n     (  2)    iloadi  Point2D.x I\n+    * n65n     (  2)      aload  <parm 1 P>\n+    * n74n     (  0)  NULLCHK on n65n\n+    * n73n     (  2)    iloadi  Point2D.y I\n+    * n65n     (  2)      ==>aload\n+    * n76n     (  0)  treetop\n+    * n75n     (  1)    newvalue  jitNewValue[#100  helper Method]\n+    * n66n     (  1)      loadaddr  FlattenedLine2D\n+    * n67n     (  2)      ==>iloadi\n+    * n69n     (  2)      ==>iloadi\n+    * n71n     (  2)      ==>iloadi\n+    * n73n     (  2)      ==>iloadi\n+    * /--- stack after ------------------------\n+    * @0 n75n     (  1)  ==>newvalue (Identityless sharedMemory )\n+    * ============================================================\n+    */\n+   TR_ResolvedJ9Method * owningMethod = static_cast<TR_ResolvedJ9Method*>(_methodSymbol->getResolvedMethod());\n+\n+   if (isFieldResolved(comp(), owningMethod, fieldCpIndex, false))\n+      {\n+      TR::Node *newFieldValue = pop();\n+      TR::Node *originalObject = pop();\n+\n+      int32_t prefixLen = 0;\n+      char * fieldNamePrefix = getTopLevelPrefixForFlattenedFields(owningMethod, fieldCpIndex, prefixLen, comp()->trMemory()->currentStackRegion());\n+\n+      int len;\n+      const char * fieldClassChars = owningMethod->fieldSignatureChars(fieldCpIndex, len);\n+      TR_OpaqueClassBlock * fieldClass = fej9()->getClassFromSignature(fieldClassChars, len, owningMethod);\n+\n+      loadClassObject(valueClass);\n+\n+      const TR::TypeLayout *typeLayout = comp()->typeLayout(valueClass);\n+      size_t fieldCount = typeLayout->count();\n+\n+      TR_OpaqueClassBlock * containingClass = owningMethod->definingClassFromCPFieldRef(comp(), fieldCpIndex, _methodSymbol->isStatic());\n+\n+      for (size_t idx = 0; idx < fieldCount; idx++)\n+      {\n+      const TR::TypeLayoutEntry &fieldEntry = typeLayout->entry(idx);\n+      if (!strncmp(fieldNamePrefix, fieldEntry._fieldname, prefixLen))\n+         {\n+         char * fieldNameRemovedTopLevelPrefix = removeTopLevelPrefixForFlattenedFields(fieldEntry._fieldname, prefixLen,\n+                                                                                        comp()->trMemory()->currentStackRegion());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbec6d2fb22da6813b35cbdaba7f9d88374d7c2b"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk5MDc2NQ==", "bodyText": "As above, does this actually need to create a copy of the name with the prefix removed or could it simply be written as follows?\nchar *fieldNameRemovedTopLevelPrefix = fieldEntry._fieldname + prefixLen;", "url": "https://github.com/eclipse-openj9/openj9/pull/10406#discussion_r499990765", "createdAt": "2020-10-06T03:50:53Z", "author": {"login": "hzongaro"}, "path": "runtime/compiler/ilgen/Walker.cpp", "diffHunk": "@@ -7012,6 +7186,89 @@ TR_J9ByteCodeIlGenerator::storeFlattenableInstanceWithHelper(int32_t cpIndex)\n    genTreeTop(helperCallNode);\n    }\n \n+void\n+TR_J9ByteCodeIlGenerator::storeFlattenableInstance(int32_t cpIndex)\n+   {\n+   /* An example on what the tree with flattened fields would look like\n+    *\n+    * class AssortedReftWithLongAlignment {\n+    *    flattened Point2D point;\n+    *    flattened Line2D line;\n+    *    flattened ValueObject o;\n+    *    flattened ValueLong l;\n+    *    flattened ValueDouble d;\n+    *    flattened ValueInt i;\n+    *    flattened Triangle2D tri;\n+    * }\n+    *\n+    * AssortedRefWithLongAlignment.setpoint(QPoint2D;)V\n+    *\n+    * /--- trees inserted ------------------------\n+    * n6n      (  0)  NULLCHK on n4n [#32]\n+    * n5n      (  2)    iloadi  Point2D.x I[#355  final Point2D.x I +4]\n+    * n4n      (  2)      aload  <parm 1 Q>[#353  Parm]\n+    * n7n      (  0)  istorei  AssortedRefWithLongAlignment.point.x I[#354  final AssortedRefWithLongAlignment.point.x I +28]\n+    * n3n      (  2)    aload  <'this' parm LAssortedRefWithLongAlignment;>[#352  Parm]\n+    * n5n      (  2)    ==>iloadi\n+    * n9n      (  0)  NULLCHK on n4n [#32]\n+    * n8n      (  2)    iloadi  Point2D.y I[#357  final Point2D.y I +8]\n+    * n4n      (  2)      ==>aload\n+    * n10n     (  0)  istorei  AssortedRefWithLongAlignment.point.y I[#356  final AssortedRefWithLongAlignment.point.y I +32]\n+    * n3n      (  2)    ==>aload (X!=0 sharedMemory )\n+    * n8n      (  2)    ==>iloadi\n+    * ---- stack after: empty -----------------\n+    */\n+   TR_ResolvedJ9Method * owningMethod = static_cast<TR_ResolvedJ9Method*>(_methodSymbol->getResolvedMethod());\n+\n+   int32_t prefixLen = 0;\n+   char * fieldNamePrefix = getTopLevelPrefixForFlattenedFields(owningMethod, cpIndex, prefixLen, comp()->trMemory()->currentStackRegion());\n+\n+   TR_OpaqueClassBlock * containingClass = owningMethod->definingClassFromCPFieldRef(comp(), cpIndex, _methodSymbol->isStatic());\n+   const TR::TypeLayout *containingClassLayout = comp()->typeLayout(containingClass);\n+   size_t fieldCount = containingClassLayout->count();\n+\n+   TR::Node * value = pop();\n+   TR::Node * address = pop();\n+\n+   int len;\n+   const char *fieldClassChars = owningMethod->fieldSignatureChars(cpIndex, len);\n+   TR_OpaqueClassBlock * fieldClass = fej9()->getClassFromSignature(fieldClassChars, len, owningMethod);\n+\n+   for (size_t idx = 0; idx < fieldCount; idx++)\n+      {\n+      const TR::TypeLayoutEntry &fieldEntry = containingClassLayout->entry(idx);\n+      if (!strncmp(fieldNamePrefix, fieldEntry._fieldname, prefixLen))\n+         {\n+         auto * fieldSymRef = comp()->getSymRefTab()->findOrFabricateShadowSymbol(containingClass,\n+                                                                     fieldEntry._datatype,\n+                                                                     fieldEntry._offset,\n+                                                                     fieldEntry._isVolatile,\n+                                                                     fieldEntry._isPrivate,\n+                                                                     fieldEntry._isFinal,\n+                                                                     fieldEntry._fieldname,\n+                                                                     fieldEntry._typeSignature\n+                                                                     );\n+\n+         char * fieldNameRemovedTopLevelPrefix = removeTopLevelPrefixForFlattenedFields(fieldEntry._fieldname, prefixLen,\n+                                                                                        comp()->trMemory()->currentStackRegion());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbec6d2fb22da6813b35cbdaba7f9d88374d7c2b"}, "originalPosition": 309}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fbec6d2fb22da6813b35cbdaba7f9d88374d7c2b", "author": {"user": {"login": "a7ehuo", "name": "Annabelle Huo"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/fbec6d2fb22da6813b35cbdaba7f9d88374d7c2b", "committedDate": "2020-09-25T15:34:17Z", "message": "Generate sym ref for flattened fields in putfield and withfield\n\nSigned-off-by: Annabelle Huo <Annabelle.Huo@ibm.com>"}, "afterCommit": {"oid": "6ca43934d5ecea4d929a00b7f7d58f479102a1ee", "author": {"user": {"login": "a7ehuo", "name": "Annabelle Huo"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/6ca43934d5ecea4d929a00b7f7d58f479102a1ee", "committedDate": "2020-10-06T22:04:17Z", "message": "Generate sym ref for flattened fields in putfield and withfield\n\nSigned-off-by: Annabelle Huo <Annabelle.Huo@ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3NDg1NDg1", "url": "https://github.com/eclipse-openj9/openj9/pull/10406#pullrequestreview-507485485", "createdAt": "2020-10-13T14:17:13Z", "commit": {"oid": "6ca43934d5ecea4d929a00b7f7d58f479102a1ee"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNDoxNzoxM1rOHgpGLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNDoxNzoxM1rOHgpGLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk4OTgwNg==", "bodyText": "I hate to poke at these examples again, but as this example depends on a kludge that was implemented as a way of accessing support for withfield, it's certain that the Java syntax will change in the future. We're not likely to come back to fix the example, so maybe it would be better to express this example directly in bytecode", "url": "https://github.com/eclipse-openj9/openj9/pull/10406#discussion_r503989806", "createdAt": "2020-10-13T14:17:13Z", "author": {"login": "hzongaro"}, "path": "runtime/compiler/ilgen/Walker.cpp", "diffHunk": "@@ -6393,6 +6418,148 @@ TR_J9ByteCodeIlGenerator::genFlattenableWithFieldWithHelper(uint16_t fieldCpInde\n    push(helperCallNode);\n    }\n \n+static TR::SymbolReference * createLoadFieldSymRef(TR::Compilation * comp, TR_OpaqueClassBlock * fieldClass, const char * fieldname)\n+   {\n+   const TR::TypeLayout *fieldClassLayout = comp->typeLayout(fieldClass);\n+   size_t fieldClassFieldCount = fieldClassLayout->count();\n+\n+   for (size_t idx = 0; idx < fieldClassFieldCount; idx++)\n+      {\n+      const TR::TypeLayoutEntry &fieldEntry = fieldClassLayout->entry(idx);\n+      if (!strcmp(fieldname, fieldEntry._fieldname))\n+         {\n+         auto * fieldSymRef = comp->getSymRefTab()->findOrFabricateShadowSymbol(fieldClass,\n+                                                                              fieldEntry._datatype,\n+                                                                              fieldEntry._offset,\n+                                                                              fieldEntry._isVolatile,\n+                                                                              fieldEntry._isPrivate,\n+                                                                              fieldEntry._isFinal,\n+                                                                              fieldEntry._fieldname,\n+                                                                              fieldEntry._typeSignature\n+                                                                              );\n+         return fieldSymRef;\n+         }\n+      }\n+\n+   TR_ASSERT_FATAL(false, \"Did not find the matching fieldname %s\", fieldname);\n+   return NULL;\n+   }\n+\n+void\n+TR_J9ByteCodeIlGenerator::genFlattenableWithField(uint16_t fieldCpIndex, TR_OpaqueClassBlock * valueClass)\n+   {\n+   /* An example on what the tree with flattened fields would look like\n+    *\n+    * value Point2D {\n+    *    public final int x;\n+    *    public final int y;\n+    * }\n+    *\n+    * value FlattenedLine2D {\n+    *    public final Point2D st;\n+    *    public final Point2D en;\n+    *\n+    *    public static FlattenedLine2D withSt(FlattenedLine2D line, Point2D st) {\n+    *       FlattenedLine2D l1 = __WithField(line.st, st);\n+    *       return l1;\n+    *    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ca43934d5ecea4d929a00b7f7d58f479102a1ee"}, "originalPosition": 131}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6ca43934d5ecea4d929a00b7f7d58f479102a1ee", "author": {"user": {"login": "a7ehuo", "name": "Annabelle Huo"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/6ca43934d5ecea4d929a00b7f7d58f479102a1ee", "committedDate": "2020-10-06T22:04:17Z", "message": "Generate sym ref for flattened fields in putfield and withfield\n\nSigned-off-by: Annabelle Huo <Annabelle.Huo@ibm.com>"}, "afterCommit": {"oid": "995c323ca9f744319a9554f945290ef10cb5ca95", "author": {"user": {"login": "a7ehuo", "name": "Annabelle Huo"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/995c323ca9f744319a9554f945290ef10cb5ca95", "committedDate": "2020-10-13T18:17:09Z", "message": "Generate sym ref for flattened fields in putfield and withfield\n\nSigned-off-by: Annabelle Huo <Annabelle.Huo@ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "505d1ba73b63dc8f35770717ea37eb3fbe9bd011", "author": {"user": {"login": "a7ehuo", "name": "Annabelle Huo"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/505d1ba73b63dc8f35770717ea37eb3fbe9bd011", "committedDate": "2020-11-04T18:53:30Z", "message": "Generate sym ref for flattened fields in putfield and withfield\n\nSigned-off-by: Annabelle Huo <Annabelle.Huo@ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "995c323ca9f744319a9554f945290ef10cb5ca95", "author": {"user": {"login": "a7ehuo", "name": "Annabelle Huo"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/995c323ca9f744319a9554f945290ef10cb5ca95", "committedDate": "2020-10-13T18:17:09Z", "message": "Generate sym ref for flattened fields in putfield and withfield\n\nSigned-off-by: Annabelle Huo <Annabelle.Huo@ibm.com>"}, "afterCommit": {"oid": "505d1ba73b63dc8f35770717ea37eb3fbe9bd011", "author": {"user": {"login": "a7ehuo", "name": "Annabelle Huo"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/505d1ba73b63dc8f35770717ea37eb3fbe9bd011", "committedDate": "2020-11-04T18:53:30Z", "message": "Generate sym ref for flattened fields in putfield and withfield\n\nSigned-off-by: Annabelle Huo <Annabelle.Huo@ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5MTU0NDA3", "url": "https://github.com/eclipse-openj9/openj9/pull/10406#pullrequestreview-529154407", "createdAt": "2020-11-12T14:43:03Z", "commit": {"oid": "505d1ba73b63dc8f35770717ea37eb3fbe9bd011"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNDo0MzowM1rOHx9_DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNDo0MzowM1rOHx9_DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE1NzgzNg==", "bodyText": "Isn't the null check done by the helper?", "url": "https://github.com/eclipse-openj9/openj9/pull/10406#discussion_r522157836", "createdAt": "2020-11-12T14:43:03Z", "author": {"login": "Leonardo2718"}, "path": "runtime/compiler/ilgen/Walker.cpp", "diffHunk": "@@ -6408,8 +6415,26 @@ TR_J9ByteCodeIlGenerator::genWithField(uint16_t fieldCpIndex)\n    }\n \n void\n-TR_J9ByteCodeIlGenerator::genFlattenableWithFieldWithHelper(uint16_t fieldCpIndex, TR::Node * newFieldValue, TR::Node * originalObject)\n+TR_J9ByteCodeIlGenerator::genFlattenableWithFieldWithHelper(uint16_t fieldCpIndex)\n    {\n+   bool isStore = false;\n+   TR::SymbolReference * symRef = symRefTab()->findOrCreateShadowSymbol(_methodSymbol, fieldCpIndex, isStore);\n+   if (symRef->isUnresolved())\n+      {\n+      abortForUnresolvedValueTypeOp(\"withfield\", \"field\");\n+      }\n+\n+   TR::Node *newFieldValue = pop();\n+   TR::Node *originalObject = pop();\n+\n+   /*\n+    * Insert nullchk for the original object as requested by the JVM spec.\n+    * Especially in case of value type class with a single field, the nullchk is still\n+    * necessary even though the original object is actually not needed.\n+    */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "505d1ba73b63dc8f35770717ea37eb3fbe9bd011"}, "originalPosition": 76}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5MjAyMjk5", "url": "https://github.com/eclipse-openj9/openj9/pull/10406#pullrequestreview-529202299", "createdAt": "2020-11-12T15:27:49Z", "commit": {"oid": "505d1ba73b63dc8f35770717ea37eb3fbe9bd011"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNToyNzo0OVrOHyAGYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNToyNzo0OVrOHyAGYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE5MjQ4Mw==", "bodyText": "this NULLCHK is redundant - could we avoid generating it if it is still being generated?", "url": "https://github.com/eclipse-openj9/openj9/pull/10406#discussion_r522192483", "createdAt": "2020-11-12T15:27:49Z", "author": {"login": "andrewcraik"}, "path": "runtime/compiler/ilgen/Walker.cpp", "diffHunk": "@@ -6419,6 +6444,152 @@ TR_J9ByteCodeIlGenerator::genFlattenableWithFieldWithHelper(uint16_t fieldCpInde\n    push(helperCallNode);\n    }\n \n+static TR::SymbolReference * createLoadFieldSymRef(TR::Compilation * comp, TR_OpaqueClassBlock * fieldClass, const char * fieldname)\n+   {\n+   const TR::TypeLayout *fieldClassLayout = comp->typeLayout(fieldClass);\n+   size_t fieldClassFieldCount = fieldClassLayout->count();\n+\n+   for (size_t idx = 0; idx < fieldClassFieldCount; idx++)\n+      {\n+      const TR::TypeLayoutEntry &fieldEntry = fieldClassLayout->entry(idx);\n+      if (!strcmp(fieldname, fieldEntry._fieldname))\n+         {\n+         auto * fieldSymRef = comp->getSymRefTab()->findOrFabricateShadowSymbol(fieldClass,\n+                                                                              fieldEntry._datatype,\n+                                                                              fieldEntry._offset,\n+                                                                              fieldEntry._isVolatile,\n+                                                                              fieldEntry._isPrivate,\n+                                                                              fieldEntry._isFinal,\n+                                                                              fieldEntry._fieldname,\n+                                                                              fieldEntry._typeSignature\n+                                                                              );\n+         return fieldSymRef;\n+         }\n+      }\n+\n+   TR_ASSERT_FATAL(false, \"Did not find the matching fieldname %s\", fieldname);\n+   return NULL;\n+   }\n+\n+void\n+TR_J9ByteCodeIlGenerator::genFlattenableWithField(uint16_t fieldCpIndex, TR_OpaqueClassBlock * valueClass)\n+   {\n+   /* An example on what the tree with flattened fields would look like\n+    *\n+    * value Point2D {\n+    *    public final int x;\n+    *    public final int y;\n+    * }\n+    *\n+    * value FlattenedLine2D {\n+    *    public final Point2D st;\n+    *    public final Point2D en;\n+    *\n+    *    public static FlattenedLine2D withSt(FlattenedLine2D line, Point2D st) {\n+    *       0: aload_1\n+    *       1: aload_0\n+    *       3: withfield #3 // Field st:QPoint2D;\n+    *       6: astore_2\n+    *       7: aload_2\n+    *       8: areturn\n+    *    }\n+    * }\n+    *\n+    * method=\"FlattenedLine2D.withSt(QFlattenedLine2D;QPoint2D;)QFlattenedLine2D;\"\n+    * 3: JBwithfield\n+    * /--- trees inserted ------------------------\n+    * n7n      (  0)  NULLCHK on n3n [#32]\n+    * n6n      (  2)    iloadi  Point2D.x I[#355  final Point2D.x I +4]\n+    * n3n      (  2)      aload  <parm 1 F>[#353  Parm]\n+    * n9n      (  0)  NULLCHK on n3n [#32]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "505d1ba73b63dc8f35770717ea37eb3fbe9bd011"}, "originalPosition": 144}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5MjAyNTUz", "url": "https://github.com/eclipse-openj9/openj9/pull/10406#pullrequestreview-529202553", "createdAt": "2020-11-12T15:28:03Z", "commit": {"oid": "505d1ba73b63dc8f35770717ea37eb3fbe9bd011"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNToyODowM1rOHyAHBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNToyODowM1rOHyAHBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE5MjY0Ng==", "bodyText": "ditto", "url": "https://github.com/eclipse-openj9/openj9/pull/10406#discussion_r522192646", "createdAt": "2020-11-12T15:28:03Z", "author": {"login": "andrewcraik"}, "path": "runtime/compiler/ilgen/Walker.cpp", "diffHunk": "@@ -6419,6 +6444,152 @@ TR_J9ByteCodeIlGenerator::genFlattenableWithFieldWithHelper(uint16_t fieldCpInde\n    push(helperCallNode);\n    }\n \n+static TR::SymbolReference * createLoadFieldSymRef(TR::Compilation * comp, TR_OpaqueClassBlock * fieldClass, const char * fieldname)\n+   {\n+   const TR::TypeLayout *fieldClassLayout = comp->typeLayout(fieldClass);\n+   size_t fieldClassFieldCount = fieldClassLayout->count();\n+\n+   for (size_t idx = 0; idx < fieldClassFieldCount; idx++)\n+      {\n+      const TR::TypeLayoutEntry &fieldEntry = fieldClassLayout->entry(idx);\n+      if (!strcmp(fieldname, fieldEntry._fieldname))\n+         {\n+         auto * fieldSymRef = comp->getSymRefTab()->findOrFabricateShadowSymbol(fieldClass,\n+                                                                              fieldEntry._datatype,\n+                                                                              fieldEntry._offset,\n+                                                                              fieldEntry._isVolatile,\n+                                                                              fieldEntry._isPrivate,\n+                                                                              fieldEntry._isFinal,\n+                                                                              fieldEntry._fieldname,\n+                                                                              fieldEntry._typeSignature\n+                                                                              );\n+         return fieldSymRef;\n+         }\n+      }\n+\n+   TR_ASSERT_FATAL(false, \"Did not find the matching fieldname %s\", fieldname);\n+   return NULL;\n+   }\n+\n+void\n+TR_J9ByteCodeIlGenerator::genFlattenableWithField(uint16_t fieldCpIndex, TR_OpaqueClassBlock * valueClass)\n+   {\n+   /* An example on what the tree with flattened fields would look like\n+    *\n+    * value Point2D {\n+    *    public final int x;\n+    *    public final int y;\n+    * }\n+    *\n+    * value FlattenedLine2D {\n+    *    public final Point2D st;\n+    *    public final Point2D en;\n+    *\n+    *    public static FlattenedLine2D withSt(FlattenedLine2D line, Point2D st) {\n+    *       0: aload_1\n+    *       1: aload_0\n+    *       3: withfield #3 // Field st:QPoint2D;\n+    *       6: astore_2\n+    *       7: aload_2\n+    *       8: areturn\n+    *    }\n+    * }\n+    *\n+    * method=\"FlattenedLine2D.withSt(QFlattenedLine2D;QPoint2D;)QFlattenedLine2D;\"\n+    * 3: JBwithfield\n+    * /--- trees inserted ------------------------\n+    * n7n      (  0)  NULLCHK on n3n [#32]\n+    * n6n      (  2)    iloadi  Point2D.x I[#355  final Point2D.x I +4]\n+    * n3n      (  2)      aload  <parm 1 F>[#353  Parm]\n+    * n9n      (  0)  NULLCHK on n3n [#32]\n+    * n8n      (  2)    iloadi  Point2D.y I[#356  final Point2D.y I +8]\n+    * n3n      (  2)      ==>aload\n+    * n11n     (  0)  NULLCHK on n4n [#32]\n+    * n10n     (  2)    iloadi  FlattenedLine2D.en.x I[#357  final FlattenedLine2D.en.x I +12]\n+    * n4n      (  2)      aload  <parm 0 Q>[#352  Parm]\n+    * n13n     (  0)  NULLCHK on n4n [#32]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "505d1ba73b63dc8f35770717ea37eb3fbe9bd011"}, "originalPosition": 150}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzNzE3MDk5", "url": "https://github.com/eclipse-openj9/openj9/pull/10406#pullrequestreview-533717099", "createdAt": "2020-11-18T17:43:46Z", "commit": {"oid": "505d1ba73b63dc8f35770717ea37eb3fbe9bd011"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 176, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}