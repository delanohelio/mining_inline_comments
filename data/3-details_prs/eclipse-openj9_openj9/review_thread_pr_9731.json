{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0NjUxNDk4", "number": 9731, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNjo1Mjo0OVrOEB1WLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxODozNzo1MFrOEOz2Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMzU4MDYwOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/x/env/J9CPU.hpp", "isResolved": true, "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNjo1Mjo0OVrOGd69Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNTozODoyOVrOGeMuUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAyNzg2Mw==", "bodyText": "This is a static. Does this work with extensible classes?\nI don't see detectRelocatable() being called anywhere in this changeset. It is called in OMR::CompilerEnv::initializeRelocatableTargetEnvironment() but will use its own definition of detectRelocatable I think.", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r434027863", "createdAt": "2020-06-02T16:52:49Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/x/env/J9CPU.hpp", "diffHunk": "@@ -66,12 +66,14 @@ class OMR_EXTENSIBLE CPU : public J9::CPU\n    CPU(const OMRProcessorDesc& processorDescription) : J9::CPU(processorDescription) {}\n \n public:\n+   \n+   static TR::CPU detectRelocatable(OMRPortLibrary * const omrPortLib);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ec2f952b3b4c161aa44a34eb48b6fc42d6b7c86"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA2MzQ0Mw==", "bodyText": "I think static works with extensible classes. It's proven to work with the detect() set of changes.  TR::CPU::detectRelocatable(TR::Compiler->omrPortLib); will use the most derived definition (Notice the TR::CPU). So once J9::CPU::detectRelocatable() is defined, it will start using J9::CPU::detectRelocatable() instead of OMR::CPU::detectRelocatable.", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r434063443", "createdAt": "2020-06-02T17:52:30Z", "author": {"login": "harryyu1994"}, "path": "runtime/compiler/x/env/J9CPU.hpp", "diffHunk": "@@ -66,12 +66,14 @@ class OMR_EXTENSIBLE CPU : public J9::CPU\n    CPU(const OMRProcessorDesc& processorDescription) : J9::CPU(processorDescription) {}\n \n public:\n+   \n+   static TR::CPU detectRelocatable(OMRPortLibrary * const omrPortLib);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAyNzg2Mw=="}, "originalCommit": {"oid": "6ec2f952b3b4c161aa44a34eb48b6fc42d6b7c86"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI2MDM1Mg==", "bodyText": "I verified that detectRelocatable() does not seem to be the cause of the issue i mentioned. It's\n   if (((TR_J9VMBase *)fe)->isAOT_DEPRECATED_DO_NOT_USE())\n      _target = TR::Compiler->relocatableTarget;\nI failed to see why this would create the javac being jammed problem though.", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r434260352", "createdAt": "2020-06-03T01:28:58Z", "author": {"login": "harryyu1994"}, "path": "runtime/compiler/x/env/J9CPU.hpp", "diffHunk": "@@ -66,12 +66,14 @@ class OMR_EXTENSIBLE CPU : public J9::CPU\n    CPU(const OMRProcessorDesc& processorDescription) : J9::CPU(processorDescription) {}\n \n public:\n+   \n+   static TR::CPU detectRelocatable(OMRPortLibrary * const omrPortLib);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAyNzg2Mw=="}, "originalCommit": {"oid": "6ec2f952b3b4c161aa44a34eb48b6fc42d6b7c86"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI5MDc5Nw==", "bodyText": "-      _target = TR::Compiler->relocatableTarget;\n+      _target = TR::Compiler->target;\nIf i take out relocatableTarget and replace with target then it works. Something is wrong with relocatableTarget..", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r434290797", "createdAt": "2020-06-03T03:41:59Z", "author": {"login": "harryyu1994"}, "path": "runtime/compiler/x/env/J9CPU.hpp", "diffHunk": "@@ -66,12 +66,14 @@ class OMR_EXTENSIBLE CPU : public J9::CPU\n    CPU(const OMRProcessorDesc& processorDescription) : J9::CPU(processorDescription) {}\n \n public:\n+   \n+   static TR::CPU detectRelocatable(OMRPortLibrary * const omrPortLib);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAyNzg2Mw=="}, "originalCommit": {"oid": "6ec2f952b3b4c161aa44a34eb48b6fc42d6b7c86"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI5Mjk3Mw==", "bodyText": "If you replace the body of J9::X86::CPU::detectRelocatable with the body of OMR::CPU::detectRelocatable and leave _target = TR::Compiler->relocatableTarget;, do you still see the problem?", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r434292973", "createdAt": "2020-06-03T03:52:00Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/x/env/J9CPU.hpp", "diffHunk": "@@ -66,12 +66,14 @@ class OMR_EXTENSIBLE CPU : public J9::CPU\n    CPU(const OMRProcessorDesc& processorDescription) : J9::CPU(processorDescription) {}\n \n public:\n+   \n+   static TR::CPU detectRelocatable(OMRPortLibrary * const omrPortLib);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAyNzg2Mw=="}, "originalCommit": {"oid": "6ec2f952b3b4c161aa44a34eb48b6fc42d6b7c86"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI5MzY1NQ==", "bodyText": "Yes I tried it. I also tried removing J9::X86::CPU::detectRelocatable entirely but leaving _target = TR::Compiler->relocatableTarget. still see the problem.", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r434293655", "createdAt": "2020-06-03T03:54:56Z", "author": {"login": "harryyu1994"}, "path": "runtime/compiler/x/env/J9CPU.hpp", "diffHunk": "@@ -66,12 +66,14 @@ class OMR_EXTENSIBLE CPU : public J9::CPU\n    CPU(const OMRProcessorDesc& processorDescription) : J9::CPU(processorDescription) {}\n \n public:\n+   \n+   static TR::CPU detectRelocatable(OMRPortLibrary * const omrPortLib);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAyNzg2Mw=="}, "originalCommit": {"oid": "6ec2f952b3b4c161aa44a34eb48b6fc42d6b7c86"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI5NDE2Nw==", "bodyText": "Trying my last attempt to make sure J9::X86::CPU::detectRelocatable works: instead of doing cpu.target = TR::CPU::detect(), i'm trying cpu.target = TR::CPU::detectRelocatable() and avoiding using relocatableTarget at all. If this works we can conclude that J9::X86::CPU::detectRelocatable is working properly.", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r434294167", "createdAt": "2020-06-03T03:57:34Z", "author": {"login": "harryyu1994"}, "path": "runtime/compiler/x/env/J9CPU.hpp", "diffHunk": "@@ -66,12 +66,14 @@ class OMR_EXTENSIBLE CPU : public J9::CPU\n    CPU(const OMRProcessorDesc& processorDescription) : J9::CPU(processorDescription) {}\n \n public:\n+   \n+   static TR::CPU detectRelocatable(OMRPortLibrary * const omrPortLib);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAyNzg2Mw=="}, "originalCommit": {"oid": "6ec2f952b3b4c161aa44a34eb48b6fc42d6b7c86"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI5NDk0OQ==", "bodyText": "And it worked. So it's definitely TR::Compiler->relocatableTarget..\nI can try the other combo cpu.relocatableTarget = TR::CPU::detect() and use relocatableTarget instead of target everywhere. I'm guessing that will fail.", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r434294949", "createdAt": "2020-06-03T04:01:20Z", "author": {"login": "harryyu1994"}, "path": "runtime/compiler/x/env/J9CPU.hpp", "diffHunk": "@@ -66,12 +66,14 @@ class OMR_EXTENSIBLE CPU : public J9::CPU\n    CPU(const OMRProcessorDesc& processorDescription) : J9::CPU(processorDescription) {}\n \n public:\n+   \n+   static TR::CPU detectRelocatable(OMRPortLibrary * const omrPortLib);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAyNzg2Mw=="}, "originalCommit": {"oid": "6ec2f952b3b4c161aa44a34eb48b6fc42d6b7c86"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMxMTgzNw==", "bodyText": "To my surprise the above configuration worked.", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r434311837", "createdAt": "2020-06-03T05:13:21Z", "author": {"login": "harryyu1994"}, "path": "runtime/compiler/x/env/J9CPU.hpp", "diffHunk": "@@ -66,12 +66,14 @@ class OMR_EXTENSIBLE CPU : public J9::CPU\n    CPU(const OMRProcessorDesc& processorDescription) : J9::CPU(processorDescription) {}\n \n public:\n+   \n+   static TR::CPU detectRelocatable(OMRPortLibrary * const omrPortLib);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAyNzg2Mw=="}, "originalCommit": {"oid": "6ec2f952b3b4c161aa44a34eb48b6fc42d6b7c86"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMxNjc2Ng==", "bodyText": "as soon as we do this:\n-   _target(TR::Compiler->target),\n+   _target(TR::Compiler->relocatableTarget),\n(In OMRCompilation constructor)\nIt stops working. There is something different between TR::Compiler->target and TR::Compiler->relocatableTarget that was not intended.", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r434316766", "createdAt": "2020-06-03T05:30:50Z", "author": {"login": "harryyu1994"}, "path": "runtime/compiler/x/env/J9CPU.hpp", "diffHunk": "@@ -66,12 +66,14 @@ class OMR_EXTENSIBLE CPU : public J9::CPU\n    CPU(const OMRProcessorDesc& processorDescription) : J9::CPU(processorDescription) {}\n \n public:\n+   \n+   static TR::CPU detectRelocatable(OMRPortLibrary * const omrPortLib);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAyNzg2Mw=="}, "originalCommit": {"oid": "6ec2f952b3b4c161aa44a34eb48b6fc42d6b7c86"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMxODkzMA==", "bodyText": "I think I'm starting to understand why\nAfter the initialization, we continue to set things for the target:\n 5180  #if !defined(J9_PROJECT_SPECIFIC)\n 5181     TR::Compiler->host.setNumberOfProcessors(2);\n 5182:    TR::Compiler->target.setNumberOfProcessors(2);\n 5183     TR::Compiler->host.setSMP(true);\n 5184:    TR::Compiler->target.setSMP(true);\n 5185  #endif\nWe need to do the same for relocatableTarget if we want the same behavior. Or I should look into sinking them down to the constructor (which most likely not possible).", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r434318930", "createdAt": "2020-06-03T05:38:29Z", "author": {"login": "harryyu1994"}, "path": "runtime/compiler/x/env/J9CPU.hpp", "diffHunk": "@@ -66,12 +66,14 @@ class OMR_EXTENSIBLE CPU : public J9::CPU\n    CPU(const OMRProcessorDesc& processorDescription) : J9::CPU(processorDescription) {}\n \n public:\n+   \n+   static TR::CPU detectRelocatable(OMRPortLibrary * const omrPortLib);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAyNzg2Mw=="}, "originalCommit": {"oid": "6ec2f952b3b4c161aa44a34eb48b6fc42d6b7c86"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzY4Mjg1OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/compile/J9Compilation.cpp", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMzoxMzozN1rOGnABTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwMToxNzoxOVrOGnV-6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU0Nzk4MQ==", "bodyText": "For JITServer we set only the cpu while for non-jitserver we set the entire _target field.", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r443547981", "createdAt": "2020-06-22T13:13:37Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/compile/J9Compilation.cpp", "diffHunk": "@@ -183,13 +183,22 @@ J9::Compilation::Compilation(int32_t id,\n #endif /* defined(J9VM_OPT_JITSERVER) */\n    _osrProhibitedOverRangeOfTrees(false)\n    {\n-\n #if defined(J9VM_OPT_JITSERVER)\n    // In JITServer, we would like to use JITClient's processor info for the compilation\n    // The following code effectively replaces the cpu with client's cpu through the getProcessorDescription() that has JITServer support\n    if (self()->getPersistentInfo()->getRemoteCompilationMode() == JITServer::SERVER)\n-      _target.cpu = TR::CPU(TR::Compiler->target.cpu.getProcessorDescription());\n+      {\n+      OMRProcessorDesc JITClientProcessorDesc = TR::Compiler->target.cpu.getProcessorDescription();\n+      _target.cpu = TR::CPU(JITClientProcessorDesc);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5889df4ce6f4a7c22f77d252b1a36eca3821ea0d"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY0NTI4MA==", "bodyText": "Currently we are only getting cpu info from the client instead of the entire target. In the future we might want to get target from client.", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r443645280", "createdAt": "2020-06-22T15:30:48Z", "author": {"login": "harryyu1994"}, "path": "runtime/compiler/compile/J9Compilation.cpp", "diffHunk": "@@ -183,13 +183,22 @@ J9::Compilation::Compilation(int32_t id,\n #endif /* defined(J9VM_OPT_JITSERVER) */\n    _osrProhibitedOverRangeOfTrees(false)\n    {\n-\n #if defined(J9VM_OPT_JITSERVER)\n    // In JITServer, we would like to use JITClient's processor info for the compilation\n    // The following code effectively replaces the cpu with client's cpu through the getProcessorDescription() that has JITServer support\n    if (self()->getPersistentInfo()->getRemoteCompilationMode() == JITServer::SERVER)\n-      _target.cpu = TR::CPU(TR::Compiler->target.cpu.getProcessorDescription());\n+      {\n+      OMRProcessorDesc JITClientProcessorDesc = TR::Compiler->target.cpu.getProcessorDescription();\n+      _target.cpu = TR::CPU(JITClientProcessorDesc);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU0Nzk4MQ=="}, "originalCommit": {"oid": "5889df4ce6f4a7c22f77d252b1a36eca3821ea0d"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc2MzU1Mg==", "bodyText": "Please open an issue to copy the entire Environment to server", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r443763552", "createdAt": "2020-06-22T18:58:21Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/compile/J9Compilation.cpp", "diffHunk": "@@ -183,13 +183,22 @@ J9::Compilation::Compilation(int32_t id,\n #endif /* defined(J9VM_OPT_JITSERVER) */\n    _osrProhibitedOverRangeOfTrees(false)\n    {\n-\n #if defined(J9VM_OPT_JITSERVER)\n    // In JITServer, we would like to use JITClient's processor info for the compilation\n    // The following code effectively replaces the cpu with client's cpu through the getProcessorDescription() that has JITServer support\n    if (self()->getPersistentInfo()->getRemoteCompilationMode() == JITServer::SERVER)\n-      _target.cpu = TR::CPU(TR::Compiler->target.cpu.getProcessorDescription());\n+      {\n+      OMRProcessorDesc JITClientProcessorDesc = TR::Compiler->target.cpu.getProcessorDescription();\n+      _target.cpu = TR::CPU(JITClientProcessorDesc);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU0Nzk4MQ=="}, "originalCommit": {"oid": "5889df4ce6f4a7c22f77d252b1a36eca3821ea0d"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkwNzgxNw==", "bodyText": "Issue opened: #9979\nI will address it soon in a separate PR.", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r443907817", "createdAt": "2020-06-23T01:17:19Z", "author": {"login": "harryyu1994"}, "path": "runtime/compiler/compile/J9Compilation.cpp", "diffHunk": "@@ -183,13 +183,22 @@ J9::Compilation::Compilation(int32_t id,\n #endif /* defined(J9VM_OPT_JITSERVER) */\n    _osrProhibitedOverRangeOfTrees(false)\n    {\n-\n #if defined(J9VM_OPT_JITSERVER)\n    // In JITServer, we would like to use JITClient's processor info for the compilation\n    // The following code effectively replaces the cpu with client's cpu through the getProcessorDescription() that has JITServer support\n    if (self()->getPersistentInfo()->getRemoteCompilationMode() == JITServer::SERVER)\n-      _target.cpu = TR::CPU(TR::Compiler->target.cpu.getProcessorDescription());\n+      {\n+      OMRProcessorDesc JITClientProcessorDesc = TR::Compiler->target.cpu.getProcessorDescription();\n+      _target.cpu = TR::CPU(JITClientProcessorDesc);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU0Nzk4MQ=="}, "originalCommit": {"oid": "5889df4ce6f4a7c22f77d252b1a36eca3821ea0d"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzcwMjUxOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/runtime/RelocationRuntime.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMzoxODozNlrOGnANKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMzoxODozNlrOGnANKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU1MTAxOQ==", "bodyText": "This could be made ASSERT_FATAL if it's never supposed to be hit", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r443551019", "createdAt": "2020-06-22T13:18:36Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/runtime/RelocationRuntime.cpp", "diffHunk": "@@ -773,6 +773,13 @@ TR_RelocationRuntime::validateAOTHeader(TR_FrontEnd *fe, J9VMThread *curThread)\n    return false;\n    }\n \n+OMRProcessorDesc\n+TR_RelocationRuntime::getProcessorDescription(TR_FrontEnd *fe, J9VMThread *curThread)\n+   {\n+   TR_ASSERT(0, \"Error: getProcessorDescription not supported in this relocation runtime\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5889df4ce6f4a7c22f77d252b1a36eca3821ea0d"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2Mzk5ODUyOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/env/ProcessorDetection.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDoyNjozOVrOGnDFtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNTo0NjoxN1rOGnGmDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU5ODI2Mw==", "bodyText": "I don't see applyUserOptions for x86", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r443598263", "createdAt": "2020-06-22T14:26:39Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/env/ProcessorDetection.cpp", "diffHunk": "@@ -648,10 +648,12 @@ void\n TR_J9VM::initializeProcessorType()\n    {\n    TR_ASSERT(_compInfo,\"compInfo not defined\");\n-   TR::Compiler->target.cpu.applyUserOptions();\n \n    if (TR::Compiler->target.cpu.isZ())\n       {\n+      TR::Compiler->target.cpu.applyUserOptions();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e065401b9924ff668bec6731d39df075fd2ee12f"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY1NTY5NA==", "bodyText": "I've put applyUserOptions() back to the original place. There is no need to have this change here.", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r443655694", "createdAt": "2020-06-22T15:46:17Z", "author": {"login": "harryyu1994"}, "path": "runtime/compiler/env/ProcessorDetection.cpp", "diffHunk": "@@ -648,10 +648,12 @@ void\n TR_J9VM::initializeProcessorType()\n    {\n    TR_ASSERT(_compInfo,\"compInfo not defined\");\n-   TR::Compiler->target.cpu.applyUserOptions();\n \n    if (TR::Compiler->target.cpu.isZ())\n       {\n+      TR::Compiler->target.cpu.applyUserOptions();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU5ODI2Mw=="}, "originalCommit": {"oid": "e065401b9924ff668bec6731d39df075fd2ee12f"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDA0NTM2OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/x/env/J9CPU.hpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDozNTo1NFrOGnDiNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDozNTo1NFrOGnDiNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYwNTU1Nw==", "bodyText": "A doxygen comment would be nice here", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r443605557", "createdAt": "2020-06-22T14:35:54Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/x/env/J9CPU.hpp", "diffHunk": "@@ -51,13 +51,15 @@ class OMR_EXTENSIBLE CPU : public J9::CPU\n    CPU(const OMRProcessorDesc& processorDescription) : J9::CPU(processorDescription) {}\n \n public:\n+   ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e065401b9924ff668bec6731d39df075fd2ee12f"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDM1MzQ3OnYy", "diffSide": "RIGHT", "path": "runtime/shared/shrclssup.c", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNTo0NTozOFrOGnGkYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNTo1MDowN1rOGnGwSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY1NTI2NA==", "bodyText": "what is the default initialization value of vm->sharedCacheAPI->sharedCachePortable if we don't execute either of these paths?", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r443655264", "createdAt": "2020-06-22T15:45:38Z", "author": {"login": "dsouzai"}, "path": "runtime/shared/shrclssup.c", "diffHunk": "@@ -141,6 +141,20 @@ IDATA J9VMDllMain(J9JavaVM* vm, IDATA stage, void* reserved)\n \t\t\t\t\truntimeFlags |= J9SHR_RUNTIMEFLAG_DISABLE_BCI;\n \t\t\t\t}\n \n+\t\t\t\t/* Check for -XX:+PortableShareClasses and -XX:-PortableShareClasses; whichever comes later wins.\n+\t\t\t\t * These options should be checked before parseArgs() to allow -Xshareclasses:portable to override this option.\n+\t\t\t\t * \n+\t\t\t\t * Note: Please also change the function checkArgsConsumed() in runtime/vm/jvminit.c when adding new options,\n+\t\t\t\t * in order to quietly consume the options if it is used without -Xshareclasses\n+\t\t\t\t */\n+\t\t\t\targIndex1 = FIND_AND_CONSUME_ARG(EXACT_MATCH, VMOPT_XXSHARECLASSESPORTABLE, NULL);\n+\t\t\t\targIndex2 = FIND_AND_CONSUME_ARG(EXACT_MATCH, VMOPT_XXNOSHARECLASSESPORTABLE, NULL);\n+\t\t\t\tif (argIndex1 > argIndex2) {\n+\t\t\t\t\tvm->sharedCacheAPI->sharedCachePortable = TRUE;\n+\t\t\t\t} else if (argIndex2 > argIndex1) {\n+\t\t\t\t\tvm->sharedCacheAPI->sharedCachePortable = FALSE;\n+\t\t\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "235ac7d93a4aac599c9e2dedb07a150a5ece1a24"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY1ODMxMg==", "bodyText": "Default initialization value is 0.\nNear the beginning of this function:\nmemset(vm->sharedCacheAPI, 0, sizeof(J9SharedCacheAPI));", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r443658312", "createdAt": "2020-06-22T15:50:07Z", "author": {"login": "harryyu1994"}, "path": "runtime/shared/shrclssup.c", "diffHunk": "@@ -141,6 +141,20 @@ IDATA J9VMDllMain(J9JavaVM* vm, IDATA stage, void* reserved)\n \t\t\t\t\truntimeFlags |= J9SHR_RUNTIMEFLAG_DISABLE_BCI;\n \t\t\t\t}\n \n+\t\t\t\t/* Check for -XX:+PortableShareClasses and -XX:-PortableShareClasses; whichever comes later wins.\n+\t\t\t\t * These options should be checked before parseArgs() to allow -Xshareclasses:portable to override this option.\n+\t\t\t\t * \n+\t\t\t\t * Note: Please also change the function checkArgsConsumed() in runtime/vm/jvminit.c when adding new options,\n+\t\t\t\t * in order to quietly consume the options if it is used without -Xshareclasses\n+\t\t\t\t */\n+\t\t\t\targIndex1 = FIND_AND_CONSUME_ARG(EXACT_MATCH, VMOPT_XXSHARECLASSESPORTABLE, NULL);\n+\t\t\t\targIndex2 = FIND_AND_CONSUME_ARG(EXACT_MATCH, VMOPT_XXNOSHARECLASSESPORTABLE, NULL);\n+\t\t\t\tif (argIndex1 > argIndex2) {\n+\t\t\t\t\tvm->sharedCacheAPI->sharedCachePortable = TRUE;\n+\t\t\t\t} else if (argIndex2 > argIndex1) {\n+\t\t\t\t\tvm->sharedCacheAPI->sharedCachePortable = FALSE;\n+\t\t\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY1NTI2NA=="}, "originalCommit": {"oid": "235ac7d93a4aac599c9e2dedb07a150a5ece1a24"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDM2NDU3OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/runtime/RelocationRuntime.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNTo0ODoxM1rOGnGrLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNTo0ODoxM1rOGnGrLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY1NzAwNQ==", "bodyText": "maybe just move this to the header file like you did for TR_JITServerRelocationRuntime::getProcessorDescription", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r443657005", "createdAt": "2020-06-22T15:48:13Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/runtime/RelocationRuntime.cpp", "diffHunk": "@@ -773,6 +773,13 @@ TR_RelocationRuntime::validateAOTHeader(TR_FrontEnd *fe, J9VMThread *curThread)\n    return false;\n    }\n \n+OMRProcessorDesc\n+TR_RelocationRuntime::getProcessorDescription(TR_FrontEnd *fe, J9VMThread *curThread)\n+   {\n+   TR_ASSERT_FATAL(0, \"Error: getProcessorDescription not supported in this relocation runtime\");\n+   return OMRProcessorDesc();\n+   }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "235ac7d93a4aac599c9e2dedb07a150a5ece1a24"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDQwMjUzOnYy", "diffSide": "RIGHT", "path": "runtime/shared_common/shrinit.cpp", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNTo1NzowMlrOGnHCsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNjowOToyNlrOGnHiuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2MzAyNg==", "bodyText": "I guess this needs to be inside #if !defined(J9ZOS390) ?", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r443663026", "createdAt": "2020-06-22T15:57:02Z", "author": {"login": "hangshao0"}, "path": "runtime/shared_common/shrinit.cpp", "diffHunk": "@@ -264,6 +264,7 @@ J9SharedClassesHelpText J9SHAREDCLASSESHELPTEXT[] = {\n \t{HELPTEXT_LAYER_EQUALS,J9NLS_SHRC_SHRINIT_HELPTEXT_LAYER_EQUALS, 0, 0},\n \t{OPTION_CREATE_LAYER, J9NLS_SHRC_SHRINIT_HELPTEXT_CREATE_LAYER, 0, 0},\n #endif /* J9VM_OPT_MULTI_LAYER_SHARED_CLASS_CACHE */\n+\t{OPTION_PORTABLE, J9NLS_SHRC_SHRINIT_HELPTEXT_PORTABLE, 0, 0},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1266e5de9c5866ca15ace5b5d8843af2fb8aad99"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2OTUxMQ==", "bodyText": "I think it should only be present on x86 currently. What macro should we use?", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r443669511", "createdAt": "2020-06-22T16:06:46Z", "author": {"login": "harryyu1994"}, "path": "runtime/shared_common/shrinit.cpp", "diffHunk": "@@ -264,6 +264,7 @@ J9SharedClassesHelpText J9SHAREDCLASSESHELPTEXT[] = {\n \t{HELPTEXT_LAYER_EQUALS,J9NLS_SHRC_SHRINIT_HELPTEXT_LAYER_EQUALS, 0, 0},\n \t{OPTION_CREATE_LAYER, J9NLS_SHRC_SHRINIT_HELPTEXT_CREATE_LAYER, 0, 0},\n #endif /* J9VM_OPT_MULTI_LAYER_SHARED_CLASS_CACHE */\n+\t{OPTION_PORTABLE, J9NLS_SHRC_SHRINIT_HELPTEXT_PORTABLE, 0, 0},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2MzAyNg=="}, "originalCommit": {"oid": "1266e5de9c5866ca15ace5b5d8843af2fb8aad99"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3MTIyNw==", "bodyText": "defined(J9X86)", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r443671227", "createdAt": "2020-06-22T16:09:26Z", "author": {"login": "hangshao0"}, "path": "runtime/shared_common/shrinit.cpp", "diffHunk": "@@ -264,6 +264,7 @@ J9SharedClassesHelpText J9SHAREDCLASSESHELPTEXT[] = {\n \t{HELPTEXT_LAYER_EQUALS,J9NLS_SHRC_SHRINIT_HELPTEXT_LAYER_EQUALS, 0, 0},\n \t{OPTION_CREATE_LAYER, J9NLS_SHRC_SHRINIT_HELPTEXT_CREATE_LAYER, 0, 0},\n #endif /* J9VM_OPT_MULTI_LAYER_SHARED_CLASS_CACHE */\n+\t{OPTION_PORTABLE, J9NLS_SHRC_SHRINIT_HELPTEXT_PORTABLE, 0, 0},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2MzAyNg=="}, "originalCommit": {"oid": "1266e5de9c5866ca15ace5b5d8843af2fb8aad99"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDQ1NzU0OnYy", "diffSide": "RIGHT", "path": "runtime/nls/shrc/j9shr.nls", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNjoxMDoyNVrOGnHlBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNjoyMTozOFrOGnH_8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3MTgxNQ==", "bodyText": "@hangshao0 Not sure if I should add this or this is someone else's job. It looks like it needs to be in multiple languages.", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r443671815", "createdAt": "2020-06-22T16:10:25Z", "author": {"login": "harryyu1994"}, "path": "runtime/nls/shrc/j9shr.nls", "diffHunk": "@@ -6802,6 +6802,13 @@ J9NLS_SHRC_SHRINIT_HELPTEXT_CREATE_LAYER.system_action=\n J9NLS_SHRC_SHRINIT_HELPTEXT_CREATE_LAYER.user_response=\n # END NON-TRANSLATABLE\n \n+J9NLS_SHRC_SHRINIT_HELPTEXT_PORTABLE=Enable the shared cache to be portable.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1266e5de9c5866ca15ace5b5d8843af2fb8aad99"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3NTE5MQ==", "bodyText": "Adding the current message in this file is correct and sufficient now. Our translators will translator this message into different languages and add them in the corresponding .nls files.", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r443675191", "createdAt": "2020-06-22T16:16:04Z", "author": {"login": "hangshao0"}, "path": "runtime/nls/shrc/j9shr.nls", "diffHunk": "@@ -6802,6 +6802,13 @@ J9NLS_SHRC_SHRINIT_HELPTEXT_CREATE_LAYER.system_action=\n J9NLS_SHRC_SHRINIT_HELPTEXT_CREATE_LAYER.user_response=\n # END NON-TRANSLATABLE\n \n+J9NLS_SHRC_SHRINIT_HELPTEXT_PORTABLE=Enable the shared cache to be portable.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3MTgxNQ=="}, "originalCommit": {"oid": "1266e5de9c5866ca15ace5b5d8843af2fb8aad99"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3ODcwNg==", "bodyText": "Please add this message at the end of this file.", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r443678706", "createdAt": "2020-06-22T16:21:38Z", "author": {"login": "hangshao0"}, "path": "runtime/nls/shrc/j9shr.nls", "diffHunk": "@@ -6802,6 +6802,13 @@ J9NLS_SHRC_SHRINIT_HELPTEXT_CREATE_LAYER.system_action=\n J9NLS_SHRC_SHRINIT_HELPTEXT_CREATE_LAYER.user_response=\n # END NON-TRANSLATABLE\n \n+J9NLS_SHRC_SHRINIT_HELPTEXT_PORTABLE=Enable the shared cache to be portable.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3MTgxNQ=="}, "originalCommit": {"oid": "1266e5de9c5866ca15ace5b5d8843af2fb8aad99"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDgwMTk3OnYy", "diffSide": "RIGHT", "path": "runtime/shared_common/shrinit.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNzo0OTo0M1rOGnLA7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNzo0OTo0M1rOGnLA7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcyODExMQ==", "bodyText": "Better to put the new code here inside defined(J9X86) as well.", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r443728111", "createdAt": "2020-06-22T17:49:43Z", "author": {"login": "hangshao0"}, "path": "runtime/shared_common/shrinit.cpp", "diffHunk": "@@ -1263,6 +1272,12 @@ j9shr_dump_help(J9JavaVM* vm, UDATA more)\n \ttmpcstr = j9nls_lookup_message((J9NLS_INFO | J9NLS_DO_NOT_PRINT_MESSAGE_TAG), J9NLS_EXELIB_INTERNAL_HELP_XXDISABLEUSEGCSTARTUPHINTS, NULL);\n \tj9file_printf(PORTLIB, J9PORT_TTY_OUT, \"%s\", tmpcstr);\n \n+\ttmpcstr = j9nls_lookup_message((J9NLS_INFO | J9NLS_DO_NOT_PRINT_MESSAGE_TAG), J9NLS_EXELIB_INTERNAL_HELP_XXSHARECLASSESPORTABLE, NULL);\n+\tj9file_printf(PORTLIB, J9PORT_TTY_OUT, \"%s\", tmpcstr);\n+\n+\ttmpcstr = j9nls_lookup_message((J9NLS_INFO | J9NLS_DO_NOT_PRINT_MESSAGE_TAG), J9NLS_EXELIB_INTERNAL_HELP_XXNOSHARECLASSESPORTABLE, NULL);\n+\tj9file_printf(PORTLIB, J9PORT_TTY_OUT, \"%s\", tmpcstr);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd3139fcccc9d91c74b1e12a40f87ebd34ec6664"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTIxODY1OnYy", "diffSide": "RIGHT", "path": "runtime/shared/shrclssup.c", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxODo1MDo1N1rOGn2QuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxODo1MDo1N1rOGn2QuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQzNjY2NA==", "bodyText": "Can this be an unconditional else block?  Is there any reason to exclude the impossible == case?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t} else if (argIndex2 > argIndex1) {\n          \n          \n            \n            \t\t\t\t} else {", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r444436664", "createdAt": "2020-06-23T18:50:57Z", "author": {"login": "DanHeidinga"}, "path": "runtime/shared/shrclssup.c", "diffHunk": "@@ -141,6 +141,20 @@ IDATA J9VMDllMain(J9JavaVM* vm, IDATA stage, void* reserved)\n \t\t\t\t\truntimeFlags |= J9SHR_RUNTIMEFLAG_DISABLE_BCI;\n \t\t\t\t}\n \n+\t\t\t\t/* Check for -XX:+PortableShareClasses and -XX:-PortableShareClasses; whichever comes later wins.\n+\t\t\t\t * These options should be checked before parseArgs() to allow -Xshareclasses:portable to override this option.\n+\t\t\t\t * \n+\t\t\t\t * Note: Please also change the function checkArgsConsumed() in runtime/vm/jvminit.c when adding new options,\n+\t\t\t\t * in order to quietly consume the options if it is used without -Xshareclasses\n+\t\t\t\t */\n+\t\t\t\targIndex1 = FIND_AND_CONSUME_ARG(EXACT_MATCH, VMOPT_XXSHARECLASSESPORTABLE, NULL);\n+\t\t\t\targIndex2 = FIND_AND_CONSUME_ARG(EXACT_MATCH, VMOPT_XXNOSHARECLASSESPORTABLE, NULL);\n+\t\t\t\tif (argIndex1 > argIndex2) {\n+\t\t\t\t\tvm->sharedCacheAPI->sharedCachePortable = TRUE;\n+\t\t\t\t} else if (argIndex2 > argIndex1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b0bd393020da5aadaefa08780eb0435faece914"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzOTY0OTU1OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/runtime/RelocationRuntime.cpp", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxODozNzo1MFrOGyK_-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxOTowNzo1NVrOGyMCKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI2MjIwMg==", "bodyText": "Should this be named something like getProcessorDescriptionFromSCC to be clear what it does? We could get the processor description of current machine. Also, I don't see where this is used.", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r455262202", "createdAt": "2020-07-15T18:37:50Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/runtime/RelocationRuntime.cpp", "diffHunk": "@@ -1001,6 +1001,26 @@ TR_SharedCacheRelocationRuntime::getCurrentLockwordOptionHashValue(J9JavaVM *vm)\n    return currentLockwordOptionHashValue;\n    }\n \n+OMRProcessorDesc\n+TR_SharedCacheRelocationRuntime::getProcessorDescription(TR_FrontEnd *fe, J9VMThread *curThread)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43a903dcc369d4c40661626b7868d61d20a1d5ee"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI3OTE0Nw==", "bodyText": "It's used over here:\nhttps://github.com/eclipse/openj9/blob/43a903dcc369d4c40661626b7868d61d20a1d5ee/runtime/compiler/control/rossa.cpp#L1896-L1919\nWhen we have an existing SCC and passes the AOTHeader validation check, we copy processor features from SCC to relocatableTarget.\nI will change it to getProcessorDescriptionFromSCC to avoid confusions with the other getProcessorDescription() we have for TR::CPU.", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r455279147", "createdAt": "2020-07-15T19:07:55Z", "author": {"login": "harryyu1994"}, "path": "runtime/compiler/runtime/RelocationRuntime.cpp", "diffHunk": "@@ -1001,6 +1001,26 @@ TR_SharedCacheRelocationRuntime::getCurrentLockwordOptionHashValue(J9JavaVM *vm)\n    return currentLockwordOptionHashValue;\n    }\n \n+OMRProcessorDesc\n+TR_SharedCacheRelocationRuntime::getProcessorDescription(TR_FrontEnd *fe, J9VMThread *curThread)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI2MjIwMg=="}, "originalCommit": {"oid": "43a903dcc369d4c40661626b7868d61d20a1d5ee"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 88, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}