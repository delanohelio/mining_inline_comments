{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2ODYxMTEw", "number": 11123, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxODoxMDozM1rOE248iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxODoxMDozM1rOE248iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1OTkxNTYwOnYy", "diffSide": "RIGHT", "path": "runtime/jcl/common/java_lang_ref_Reference.cpp", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxODoxMDozM1rOHv7RxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNTozNjowMFrOHwiZ8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAxNjMyNQ==", "bodyText": "@RSalman This pattern repeats a few more times in the code.\n\nThis needs to be more generic and refer to SATB barrier, rather than Metronome GC policy\nWe should hide this SATB specialization under the hood of J9VMJAVALANGREFREFERENCE_REFERENT_VM macro", "url": "https://github.com/eclipse-openj9/openj9/pull/11123#discussion_r520016325", "createdAt": "2020-11-09T18:10:33Z", "author": {"login": "amicic"}, "path": "runtime/jcl/common/java_lang_ref_Reference.cpp", "diffHunk": "@@ -63,4 +63,39 @@ Java_java_lang_ref_Reference_waitForReferenceProcessingImpl(JNIEnv *env, jclass\n \treturn result;\n }\n \n+#if JAVA_SPEC_VERSION >= 16\n+JNIEXPORT jboolean JNICALL\n+java_lang_ref_Reference_refersTo(JNIEnv *env, jobject reference, jobject target)\n+{\n+\tJ9VMThread * const currentThread = (J9VMThread *)env;\n+\tJ9JavaVM * const vm = currentThread->javaVM;\n+\tJ9InternalVMFunctions * const vmFuncs = vm->internalVMFunctions;\n+\tjboolean result = JNI_FALSE;\n+\n+\tvmFuncs->internalEnterVMFromJNI(currentThread);\n+\n+\tif (NULL == reference) {\n+\t\tvmFuncs->setCurrentException(currentThread, J9VMCONSTANTPOOL_JAVALANGNULLPOINTEREXCEPTION, NULL);\n+\t} else {\n+\t\tj9object_t j9reference = J9_JNI_UNWRAP_REFERENCE(reference);\n+\t\tj9object_t j9target = (NULL != target) ? J9_JNI_UNWRAP_REFERENCE(target) : NULL;\n+\t\tj9object_t referent = NULL;\n+\n+\t\tif (J9_GC_POLICY_METRONOME == ((OMR_VM *)vm->omrVM)->gcPolicy) {\n+\t\t\treferent = vm->memoryManagerFunctions->j9gc_objaccess_referenceGet(currentThread, j9reference);\n+\t\t} else {\n+\t\t\treferent = J9VMJAVALANGREFREFERENCE_REFERENT_VM(vm, j9reference);\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23571a702fab412bd0e68d623da86a9858162d3d"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA1NjcxOQ==", "bodyText": "Those macros are currently autogenerated, so we should add a new pair of macros to get the referent (leaving the autogenerated ones as they are).", "url": "https://github.com/eclipse-openj9/openj9/pull/11123#discussion_r520056719", "createdAt": "2020-11-09T19:12:11Z", "author": {"login": "gacholio"}, "path": "runtime/jcl/common/java_lang_ref_Reference.cpp", "diffHunk": "@@ -63,4 +63,39 @@ Java_java_lang_ref_Reference_waitForReferenceProcessingImpl(JNIEnv *env, jclass\n \treturn result;\n }\n \n+#if JAVA_SPEC_VERSION >= 16\n+JNIEXPORT jboolean JNICALL\n+java_lang_ref_Reference_refersTo(JNIEnv *env, jobject reference, jobject target)\n+{\n+\tJ9VMThread * const currentThread = (J9VMThread *)env;\n+\tJ9JavaVM * const vm = currentThread->javaVM;\n+\tJ9InternalVMFunctions * const vmFuncs = vm->internalVMFunctions;\n+\tjboolean result = JNI_FALSE;\n+\n+\tvmFuncs->internalEnterVMFromJNI(currentThread);\n+\n+\tif (NULL == reference) {\n+\t\tvmFuncs->setCurrentException(currentThread, J9VMCONSTANTPOOL_JAVALANGNULLPOINTEREXCEPTION, NULL);\n+\t} else {\n+\t\tj9object_t j9reference = J9_JNI_UNWRAP_REFERENCE(reference);\n+\t\tj9object_t j9target = (NULL != target) ? J9_JNI_UNWRAP_REFERENCE(target) : NULL;\n+\t\tj9object_t referent = NULL;\n+\n+\t\tif (J9_GC_POLICY_METRONOME == ((OMR_VM *)vm->omrVM)->gcPolicy) {\n+\t\t\treferent = vm->memoryManagerFunctions->j9gc_objaccess_referenceGet(currentThread, j9reference);\n+\t\t} else {\n+\t\t\treferent = J9VMJAVALANGREFREFERENCE_REFERENT_VM(vm, j9reference);\n+\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAxNjMyNQ=="}, "originalCommit": {"oid": "23571a702fab412bd0e68d623da86a9858162d3d"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA1NzQxNQ==", "bodyText": "I would suggest doing this in a separate PR.", "url": "https://github.com/eclipse-openj9/openj9/pull/11123#discussion_r520057415", "createdAt": "2020-11-09T19:13:13Z", "author": {"login": "gacholio"}, "path": "runtime/jcl/common/java_lang_ref_Reference.cpp", "diffHunk": "@@ -63,4 +63,39 @@ Java_java_lang_ref_Reference_waitForReferenceProcessingImpl(JNIEnv *env, jclass\n \treturn result;\n }\n \n+#if JAVA_SPEC_VERSION >= 16\n+JNIEXPORT jboolean JNICALL\n+java_lang_ref_Reference_refersTo(JNIEnv *env, jobject reference, jobject target)\n+{\n+\tJ9VMThread * const currentThread = (J9VMThread *)env;\n+\tJ9JavaVM * const vm = currentThread->javaVM;\n+\tJ9InternalVMFunctions * const vmFuncs = vm->internalVMFunctions;\n+\tjboolean result = JNI_FALSE;\n+\n+\tvmFuncs->internalEnterVMFromJNI(currentThread);\n+\n+\tif (NULL == reference) {\n+\t\tvmFuncs->setCurrentException(currentThread, J9VMCONSTANTPOOL_JAVALANGNULLPOINTEREXCEPTION, NULL);\n+\t} else {\n+\t\tj9object_t j9reference = J9_JNI_UNWRAP_REFERENCE(reference);\n+\t\tj9object_t j9target = (NULL != target) ? J9_JNI_UNWRAP_REFERENCE(target) : NULL;\n+\t\tj9object_t referent = NULL;\n+\n+\t\tif (J9_GC_POLICY_METRONOME == ((OMR_VM *)vm->omrVM)->gcPolicy) {\n+\t\t\treferent = vm->memoryManagerFunctions->j9gc_objaccess_referenceGet(currentThread, j9reference);\n+\t\t} else {\n+\t\t\treferent = J9VMJAVALANGREFREFERENCE_REFERENT_VM(vm, j9reference);\n+\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAxNjMyNQ=="}, "originalCommit": {"oid": "23571a702fab412bd0e68d623da86a9858162d3d"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA1Nzk4Mw==", "bodyText": "yeah, I did not mean doing anything now", "url": "https://github.com/eclipse-openj9/openj9/pull/11123#discussion_r520057983", "createdAt": "2020-11-09T19:14:19Z", "author": {"login": "amicic"}, "path": "runtime/jcl/common/java_lang_ref_Reference.cpp", "diffHunk": "@@ -63,4 +63,39 @@ Java_java_lang_ref_Reference_waitForReferenceProcessingImpl(JNIEnv *env, jclass\n \treturn result;\n }\n \n+#if JAVA_SPEC_VERSION >= 16\n+JNIEXPORT jboolean JNICALL\n+java_lang_ref_Reference_refersTo(JNIEnv *env, jobject reference, jobject target)\n+{\n+\tJ9VMThread * const currentThread = (J9VMThread *)env;\n+\tJ9JavaVM * const vm = currentThread->javaVM;\n+\tJ9InternalVMFunctions * const vmFuncs = vm->internalVMFunctions;\n+\tjboolean result = JNI_FALSE;\n+\n+\tvmFuncs->internalEnterVMFromJNI(currentThread);\n+\n+\tif (NULL == reference) {\n+\t\tvmFuncs->setCurrentException(currentThread, J9VMCONSTANTPOOL_JAVALANGNULLPOINTEREXCEPTION, NULL);\n+\t} else {\n+\t\tj9object_t j9reference = J9_JNI_UNWRAP_REFERENCE(reference);\n+\t\tj9object_t j9target = (NULL != target) ? J9_JNI_UNWRAP_REFERENCE(target) : NULL;\n+\t\tj9object_t referent = NULL;\n+\n+\t\tif (J9_GC_POLICY_METRONOME == ((OMR_VM *)vm->omrVM)->gcPolicy) {\n+\t\t\treferent = vm->memoryManagerFunctions->j9gc_objaccess_referenceGet(currentThread, j9reference);\n+\t\t} else {\n+\t\t\treferent = J9VMJAVALANGREFREFERENCE_REFERENT_VM(vm, j9reference);\n+\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAxNjMyNQ=="}, "originalCommit": {"oid": "23571a702fab412bd0e68d623da86a9858162d3d"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY1NzM5NQ==", "bodyText": "Noted this: eclipse/omr#5494 (comment)", "url": "https://github.com/eclipse-openj9/openj9/pull/11123#discussion_r520657395", "createdAt": "2020-11-10T15:36:00Z", "author": {"login": "RSalman"}, "path": "runtime/jcl/common/java_lang_ref_Reference.cpp", "diffHunk": "@@ -63,4 +63,39 @@ Java_java_lang_ref_Reference_waitForReferenceProcessingImpl(JNIEnv *env, jclass\n \treturn result;\n }\n \n+#if JAVA_SPEC_VERSION >= 16\n+JNIEXPORT jboolean JNICALL\n+java_lang_ref_Reference_refersTo(JNIEnv *env, jobject reference, jobject target)\n+{\n+\tJ9VMThread * const currentThread = (J9VMThread *)env;\n+\tJ9JavaVM * const vm = currentThread->javaVM;\n+\tJ9InternalVMFunctions * const vmFuncs = vm->internalVMFunctions;\n+\tjboolean result = JNI_FALSE;\n+\n+\tvmFuncs->internalEnterVMFromJNI(currentThread);\n+\n+\tif (NULL == reference) {\n+\t\tvmFuncs->setCurrentException(currentThread, J9VMCONSTANTPOOL_JAVALANGNULLPOINTEREXCEPTION, NULL);\n+\t} else {\n+\t\tj9object_t j9reference = J9_JNI_UNWRAP_REFERENCE(reference);\n+\t\tj9object_t j9target = (NULL != target) ? J9_JNI_UNWRAP_REFERENCE(target) : NULL;\n+\t\tj9object_t referent = NULL;\n+\n+\t\tif (J9_GC_POLICY_METRONOME == ((OMR_VM *)vm->omrVM)->gcPolicy) {\n+\t\t\treferent = vm->memoryManagerFunctions->j9gc_objaccess_referenceGet(currentThread, j9reference);\n+\t\t} else {\n+\t\t\treferent = J9VMJAVALANGREFREFERENCE_REFERENT_VM(vm, j9reference);\n+\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAxNjMyNQ=="}, "originalCommit": {"oid": "23571a702fab412bd0e68d623da86a9858162d3d"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1097, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}