{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwNDE2MzE5", "number": 9395, "title": "Concurrent Scavenger Ownable Synchronizer Fix", "bodyText": "Fix corner case where Ownable Sync Objet is duplicated in the Ownable Sync list. This occurs\nwhen Ownable object construction finishes much after allocation causing\nit to survive multiple scavenges and being tenured. The object will be\nadded by jit following the STW phase, the concurrent phase will\nattempt to add it again. The current !isObjectInNewSpace(link) condition would\nstop this in normal circumstances. However, since this object will be\nlinked to tenure, !isObjectInNewSpace(link) will not be a sufficient\ncheck as it only checks against survivor space which would cause the tenured Ownable to pass\nthe condition and be added again.\nSigned-off-by: Salman Rana salman.rana@ibm.com", "createdAt": "2020-04-28T23:44:54Z", "url": "https://github.com/eclipse-openj9/openj9/pull/9395", "merged": true, "mergeCommit": {"oid": "c35748063a8fd60eafe324db041e826014733020"}, "closed": true, "closedAt": "2020-04-30T04:15:50Z", "author": {"login": "RSalman"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABccM4rmAFqTQwMjI5MTQ3Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcccTsigBqjMyODU3NjY1OTU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyMjkxNDc3", "url": "https://github.com/eclipse-openj9/openj9/pull/9395#pullrequestreview-402291477", "createdAt": "2020-04-28T23:56:44Z", "commit": {"oid": "a75046219d9c3dd61a9dd5f43ce616475fc44314"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyNjY0NjQx", "url": "https://github.com/eclipse-openj9/openj9/pull/9395#pullrequestreview-402664641", "createdAt": "2020-04-29T13:28:17Z", "commit": {"oid": "a75046219d9c3dd61a9dd5f43ce616475fc44314"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMzoyODoxN1rOGN-yIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMzoyODoxN1rOGN-yIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMxMzMxNA==", "bodyText": "please add extra pair of brackets (NULL != link)", "url": "https://github.com/eclipse-openj9/openj9/pull/9395#discussion_r417313314", "createdAt": "2020-04-29T13:28:17Z", "author": {"login": "dmitripivkine"}, "path": "runtime/gc_glue_java/ScavengerDelegate.cpp", "diffHunk": "@@ -604,12 +604,12 @@ MM_ScavengerDelegate::private_addOwnableSynchronizerObjectInList(MM_EnvironmentS\n \tomrobjectptr_t link = MM_GCExtensions::getExtensions(_extensions)->accessBarrier->isObjectInOwnableSynchronizerList(object);\n \t/* if isObjectInOwnableSynchronizerList() return NULL, it means the object isn't in OwnableSynchronizerList,\n \t * it could be the constructing object which would be added in the list after the construction finish later. ignore the object to avoid duplicated reference in the list.\n-\t * For concurrent scavenger, an object that doesn't finish constructing before the start of the STW phase will be added to the list after, during the concurrent phase.\n-\t * In this case, the object may already be added to the list. */\n-\tif (NULL != link && (!_extensions->isConcurrentScavengerEnabled() || (_extensions->isConcurrentScavengerEnabled() && !_extensions->scavenger->isObjectInNewSpace(link)))) {\n+\t * For concurrent scavenger, an object that doesn't finish constructing before the start of the STW phase will be added to the list after. As a result, the object may already\n+\t * be added to the list (non NULL link) when we scan it during the concurrent phase. We must not add it again here, so check link before proceeding */\n+\tif (NULL != link && (!_extensions->isConcurrentScavengerEnabled() || (_extensions->isConcurrentScavengerEnabled() && _extensions->scavenger->isObjectInEvacuateMemory(link)))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a75046219d9c3dd61a9dd5f43ce616475fc44314"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyNjY1NTYz", "url": "https://github.com/eclipse-openj9/openj9/pull/9395#pullrequestreview-402665563", "createdAt": "2020-04-29T13:29:15Z", "commit": {"oid": "a75046219d9c3dd61a9dd5f43ce616475fc44314"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e622b41b04336fd7c18d2e61a8fa53cf3295d83", "author": {"user": {"login": "RSalman", "name": "Salman Rana"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/9e622b41b04336fd7c18d2e61a8fa53cf3295d83", "committedDate": "2020-04-29T17:54:23Z", "message": "Concurrent Scavenger Ownable Synchronizer Fix\n\nFix corner case where Ownable Sync is duplicated in list. This occurs\nwhen Ownable object construction finishes much after allocation causing\nit to survive multiple scavengers and being tenured. The object will be\nadded by jit following the the STW phase, the concurrent phase will\nattempt to add it again, the `!isObjectInNewSpace(link)` condition would\nstop this in normal circumstances. However, since this object will be\nlinked to tenure, `!isObjectInNewSpace(link)` will not be a sufficient\ncheck (checks against survivor space) as the tenured Ownable will pass\nthe condition.\n\nSigned-off-by: Salman Rana <salman.rana@ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a75046219d9c3dd61a9dd5f43ce616475fc44314", "author": {"user": {"login": "RSalman", "name": "Salman Rana"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/a75046219d9c3dd61a9dd5f43ce616475fc44314", "committedDate": "2020-04-28T23:40:02Z", "message": "Concurrent Scavenger Ownable Synchronizer Fix\n\nFix corner case where Ownable Sync is duplicated in list. This occurs\nwhen Ownable object construction finishes much after allocation causing\nit to survive multiple scavengers and being tenured. The object will be\nadded by jit following the the STW phase, the concurrent phase will\nattempt to add it again, the `!isObjectInNewSpace(link)` condition would\nstop this in normal circumstances. However, since this object will be\nlinked to tenure, `!isObjectInNewSpace(link)` will not be a sufficient\ncheck (checks against survivor space) as the tenured Ownable will pass\nthe condition.\n\nSigned-off-by: Salman Rana <salman.rana@ibm.com>"}, "afterCommit": {"oid": "9e622b41b04336fd7c18d2e61a8fa53cf3295d83", "author": {"user": {"login": "RSalman", "name": "Salman Rana"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/9e622b41b04336fd7c18d2e61a8fa53cf3295d83", "committedDate": "2020-04-29T17:54:23Z", "message": "Concurrent Scavenger Ownable Synchronizer Fix\n\nFix corner case where Ownable Sync is duplicated in list. This occurs\nwhen Ownable object construction finishes much after allocation causing\nit to survive multiple scavengers and being tenured. The object will be\nadded by jit following the the STW phase, the concurrent phase will\nattempt to add it again, the `!isObjectInNewSpace(link)` condition would\nstop this in normal circumstances. However, since this object will be\nlinked to tenure, `!isObjectInNewSpace(link)` will not be a sufficient\ncheck (checks against survivor space) as the tenured Ownable will pass\nthe condition.\n\nSigned-off-by: Salman Rana <salman.rana@ibm.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1113, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}