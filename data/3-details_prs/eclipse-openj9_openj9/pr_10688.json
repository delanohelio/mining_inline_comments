{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyNTA5MDYz", "number": 10688, "title": "JITServer on Z build fixes", "bodyText": "This PR fixes 3 bugs for JITServer on Z that were seen in cmdLineTester_fieldwatchtests_0, MauveMultiThreadLoadTest_0, and _stringConcatOptTest_0. The reasoning for each fix is described in the individual commit messages.", "createdAt": "2020-09-24T14:58:45Z", "url": "https://github.com/eclipse-openj9/openj9/pull/10688", "merged": true, "mergeCommit": {"oid": "ae774e5ccffd45818286463ceed8c7cd46cf20b2"}, "closed": true, "closedAt": "2020-09-25T14:39:46Z", "author": {"login": "dchopra001"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdMCSEEAH2gAyNDkyNTA5MDYzOjBhMTQ1YjdjYjlkOTEzMjYxMmRlNGVlMDJjOGZmOTY5MmQxYmM2OWU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdMW0k-AFqTQ5NjQ4NDkzMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0a145b7cb9d9132612de4ee02c8ff9692d1bc69e", "author": {"user": {"login": "dchopra001", "name": "Dhruv Chopra"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/0a145b7cb9d9132612de4ee02c8ff9692d1bc69e", "committedDate": "2020-09-24T14:43:52Z", "message": "Avoid PC-relative instructions for fieldwatch support\n\nFor relocatable compiles such as remote compilations,\nfieldwatch should not generate PC relative instructions\nbecause it is not supported.\n\nSigned-off-by: Dhruv Chopra <Dhruv.C.Chopra@ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34d1cff5eb4b9d3a823bfb124bbe1e7207d88533", "author": {"user": {"login": "dchopra001", "name": "Dhruv Chopra"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/34d1cff5eb4b9d3a823bfb124bbe1e7207d88533", "committedDate": "2020-09-24T14:47:01Z", "message": "Set isVettedForAOT to true in ArrayStoreCHK evaluator\n\nWhen looking for the java/lang/Object class by name in the\nTR::ArrayStoreCHK evaluator, isVettedForAOT was set to false\nfor remote compilations. This is incorrect and we shouldn't\nrestrict this. Moreover, it can prevent CLGRL from\nbeing generated when it should be generated.\n\nSigned-off-by: Dhruv Chopra <Dhruv.C.Chopra@ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1Njg1ODMw", "url": "https://github.com/eclipse-openj9/openj9/pull/10688#pullrequestreview-495685830", "createdAt": "2020-09-24T15:19:30Z", "commit": {"oid": "14bb95fb8c599ff244ffcfc30884fcc0d5853b05"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNToxOTozMFrOHXgErw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNToxOTozMFrOHXgErw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQwNDc4Mw==", "bodyText": "Why are we hitting this path for JITServer at all? Shouldn't needClassAndMethodPointerRelocations return true for JITServer?", "url": "https://github.com/eclipse-openj9/openj9/pull/10688#discussion_r494404783", "createdAt": "2020-09-24T15:19:30Z", "author": {"login": "fjeremic"}, "path": "runtime/compiler/z/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -4002,7 +4002,7 @@ J9::Z::TreeEvaluator::generateTestAndReportFieldWatchInstructions(TR::CodeGenera\n       if (isResolved)\n          {\n          fieldClassReg = cg->allocateRegister();\n-         if (!(cg->needClassAndMethodPointerRelocations()))\n+         if (!(cg->needClassAndMethodPointerRelocations()) && cg->canUseRelativeLongInstructions(reinterpret_cast<int64_t>((static_cast<TR::J9WatchedStaticFieldSnippet *>(dataSnippet)->getFieldClass()))))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14bb95fb8c599ff244ffcfc30884fcc0d5853b05"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1ODU1NDc0", "url": "https://github.com/eclipse-openj9/openj9/pull/10688#pullrequestreview-495855474", "createdAt": "2020-09-24T18:41:53Z", "commit": {"oid": "14bb95fb8c599ff244ffcfc30884fcc0d5853b05"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxODo0MTo1M1rOHXoCYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxODo0MTo1M1rOHXoCYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUzNTI2NQ==", "bodyText": "Looking at the code I see that in the TR_J9SharedCacheVM implementation of getSystemClassFromClassName() we call TR_J9VM::getSystemClassFromClassName() with the default value of the isVettedForAOT which is false, but actually it doesn't matter because TR_J9VM::getSystemClassFromClassName() doesn't even look at isVettedForAOT.\nIn contrast the TR_J9Server implementation sends a message to the client with isVettedForAOT and the client executes the corresponding query using an AOT frontend for which isVettedForAOT may matter.\nSo the problem is that JITServer executes a TR_J9VM query which is replied by the client with an answer from a TR_J9SharedCacheVM frontend. Since the MessageType::VM_getSystemClassFromClassName is only sent by the JITServer from TR_J9ServerVM::getSystemClassFromClassName (i.e. the non-AOT frontend) I think the right solution is for the client to create a non-AOT frontend (TR_J9VM) to find the answer to the query.\nHere:\n      case MessageType::VM_getSystemClassFromClassName:\n         {\n         auto recv = client->getRecvData<std::string, bool>();\n         const std::string name = std::get<0>(recv);\n         bool isVettedForAOT = std::get<1>(recv);\n         client->write(response, fe->getSystemClassFromClassName(name.c_str(), name.length(), isVettedForAOT));\n         }\n         break;", "url": "https://github.com/eclipse-openj9/openj9/pull/10688#discussion_r494535265", "createdAt": "2020-09-24T18:41:53Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/env/VMJ9Server.cpp", "diffHunk": "@@ -2043,7 +2043,7 @@ TR_OpaqueClassBlock *\n TR_J9SharedCacheServerVM::getSystemClassFromClassName(const char * name, int32_t length, bool isVettedForAOT)\n    {\n    TR::Compilation *comp = _compInfoPT->getCompilation();\n-   TR_OpaqueClassBlock *classPointer = TR_J9ServerVM::getSystemClassFromClassName(name, length);\n+   TR_OpaqueClassBlock *classPointer = TR_J9ServerVM::getSystemClassFromClassName(name, length, isVettedForAOT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14bb95fb8c599ff244ffcfc30884fcc0d5853b05"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5608aa7e762f42e8c632b41af963f07ada2a508c", "author": {"user": {"login": "dchopra001", "name": "Dhruv Chopra"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/5608aa7e762f42e8c632b41af963f07ada2a508c", "committedDate": "2020-09-24T20:35:11Z", "message": "Call base implementation of getSystemClassFromClassName\n\nFor the VM_getSystemClassFromClassName JITServer message type,\nthe base implementation of getSystemClassFromClassName should\nalways be called, even for AOT compilations. This is because\nthe validation is done on the server.\n\nSigned-off-by: Dhruv Chopra <Dhruv.C.Chopra@ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "14bb95fb8c599ff244ffcfc30884fcc0d5853b05", "author": {"user": {"login": "dchopra001", "name": "Dhruv Chopra"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/14bb95fb8c599ff244ffcfc30884fcc0d5853b05", "committedDate": "2020-09-24T14:52:58Z", "message": "Call getSystemClassFromClassName's parent correctly\n\nThe TR_J9SharedCacheServerVM's implementation of\ngetSystemClassFromClassName invokes it's parent\nimplementation in order to common up some of the workload.\nWhen doing so, the isVettedForAOT parameter must be specified\nexplicitly so that it doesn't always default to false.\n\nSigned-off-by: Dhruv Chopra <Dhruv.C.Chopra@ibm.com>"}, "afterCommit": {"oid": "5608aa7e762f42e8c632b41af963f07ada2a508c", "author": {"user": {"login": "dchopra001", "name": "Dhruv Chopra"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/5608aa7e762f42e8c632b41af963f07ada2a508c", "committedDate": "2020-09-24T20:35:11Z", "message": "Call base implementation of getSystemClassFromClassName\n\nFor the VM_getSystemClassFromClassName JITServer message type,\nthe base implementation of getSystemClassFromClassName should\nalways be called, even for AOT compilations. This is because\nthe validation is done on the server.\n\nSigned-off-by: Dhruv Chopra <Dhruv.C.Chopra@ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27f02c3bed44a1820f30517c232381a4bfe48ebf", "author": {"user": {"login": "dchopra001", "name": "Dhruv Chopra"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/27f02c3bed44a1820f30517c232381a4bfe48ebf", "committedDate": "2020-09-24T21:32:12Z", "message": "Common up fieldClass definition\n\nSigned-off-by: Dhruv Chopra <Dhruv.C.Chopra@ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1OTY5MTkz", "url": "https://github.com/eclipse-openj9/openj9/pull/10688#pullrequestreview-495969193", "createdAt": "2020-09-24T21:37:38Z", "commit": {"oid": "27f02c3bed44a1820f30517c232381a4bfe48ebf"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2NDg0OTMy", "url": "https://github.com/eclipse-openj9/openj9/pull/10688#pullrequestreview-496484932", "createdAt": "2020-09-25T14:39:40Z", "commit": {"oid": "27f02c3bed44a1820f30517c232381a4bfe48ebf"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 292, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}