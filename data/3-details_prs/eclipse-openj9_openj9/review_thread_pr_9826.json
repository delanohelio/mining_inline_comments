{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxMzQ4MTIw", "number": 9826, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwMDoyNjo1OFrOEEGafQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwMToyMzo0N1rOEEG91w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNzM0ODQ1OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/aarch64/env/J9CPU.cpp", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwMDoyNjo1OVrOGhg1og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNTo0NzoxM1rOGh7Pqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5NDIxMA==", "bodyText": "This static means initialization happens only once. Is this going to have problems for JITServer (ARM is not supported yet, but maybe in the future)", "url": "https://github.com/eclipse-openj9/openj9/pull/9826#discussion_r437794210", "createdAt": "2020-06-10T00:26:59Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/aarch64/env/J9CPU.cpp", "diffHunk": "@@ -23,25 +23,32 @@\n #include \"env/CompilerEnv.hpp\"\n #include \"env/CPU.hpp\"\n \n-namespace J9\n-{\n-\n-namespace ARM64\n-{\n-\n-TR_ProcessorFeatureFlags\n-CPU::getProcessorFeatureFlags()\n+bool\n+J9::ARM64::CPU::isCompatible(const OMRProcessorDesc& processorDescription)\n    {\n-   TR_ProcessorFeatureFlags processorFeatureFlags = { {0} };\n-   return processorFeatureFlags;\n+   return self()->getProcessorDescription().processor == processorDescription.processor;\n    }\n \n-bool\n-CPU::isCompatible(TR_Processor processorSignature, TR_ProcessorFeatureFlags processorFeatureFlags)\n+OMRProcessorDesc\n+J9::ARM64::CPU::getProcessorDescription()\n    {\n-   return self()->id() == processorSignature;\n+   static bool initialized = false;\n+   if (!initialized)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fca77adc65fa2f45bf006e81244df1570dbbb27"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIyNTY2NQ==", "bodyText": "For ARM, we still need to add the processor detection logic to the omr port library in order for it for work like the rest (X, P, Z). Eventually that will be done but it may take a while and I don't want that work to block this item. That's why I introduced this wrapper function to map the old TR_Processor + TR_ProcessorFeatureFlags type to the new OMRProcessorDesc type.\nIn short, this code is temporary and probably will not be here by the time we support JITServer on ARM.", "url": "https://github.com/eclipse-openj9/openj9/pull/9826#discussion_r438225665", "createdAt": "2020-06-10T15:45:31Z", "author": {"login": "harryyu1994"}, "path": "runtime/compiler/aarch64/env/J9CPU.cpp", "diffHunk": "@@ -23,25 +23,32 @@\n #include \"env/CompilerEnv.hpp\"\n #include \"env/CPU.hpp\"\n \n-namespace J9\n-{\n-\n-namespace ARM64\n-{\n-\n-TR_ProcessorFeatureFlags\n-CPU::getProcessorFeatureFlags()\n+bool\n+J9::ARM64::CPU::isCompatible(const OMRProcessorDesc& processorDescription)\n    {\n-   TR_ProcessorFeatureFlags processorFeatureFlags = { {0} };\n-   return processorFeatureFlags;\n+   return self()->getProcessorDescription().processor == processorDescription.processor;\n    }\n \n-bool\n-CPU::isCompatible(TR_Processor processorSignature, TR_ProcessorFeatureFlags processorFeatureFlags)\n+OMRProcessorDesc\n+J9::ARM64::CPU::getProcessorDescription()\n    {\n-   return self()->id() == processorSignature;\n+   static bool initialized = false;\n+   if (!initialized)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5NDIxMA=="}, "originalCommit": {"oid": "3fca77adc65fa2f45bf006e81244df1570dbbb27"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIyNjg1OQ==", "bodyText": "For more information on the ARM port library work: eclipse/omr#5262. It still has issues and currently I don't have an arm machine to debug them. Also that item is low priority compared to the other ones.", "url": "https://github.com/eclipse-openj9/openj9/pull/9826#discussion_r438226859", "createdAt": "2020-06-10T15:47:13Z", "author": {"login": "harryyu1994"}, "path": "runtime/compiler/aarch64/env/J9CPU.cpp", "diffHunk": "@@ -23,25 +23,32 @@\n #include \"env/CompilerEnv.hpp\"\n #include \"env/CPU.hpp\"\n \n-namespace J9\n-{\n-\n-namespace ARM64\n-{\n-\n-TR_ProcessorFeatureFlags\n-CPU::getProcessorFeatureFlags()\n+bool\n+J9::ARM64::CPU::isCompatible(const OMRProcessorDesc& processorDescription)\n    {\n-   TR_ProcessorFeatureFlags processorFeatureFlags = { {0} };\n-   return processorFeatureFlags;\n+   return self()->getProcessorDescription().processor == processorDescription.processor;\n    }\n \n-bool\n-CPU::isCompatible(TR_Processor processorSignature, TR_ProcessorFeatureFlags processorFeatureFlags)\n+OMRProcessorDesc\n+J9::ARM64::CPU::getProcessorDescription()\n    {\n-   return self()->id() == processorSignature;\n+   static bool initialized = false;\n+   if (!initialized)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5NDIxMA=="}, "originalCommit": {"oid": "3fca77adc65fa2f45bf006e81244df1570dbbb27"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNzM1OTc4OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/compile/J9Compilation.cpp", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwMDozNDoyNFrOGhg8zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxOTo1MjoyNVrOGiEDWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5NjA0Nw==", "bodyText": "Can you please put a comment for this piece of code? It's not clear to me the intent of the code.\nIt creates a new TR::CPU based on TR::Compiler->target.cpu which I thought it was a singleton.", "url": "https://github.com/eclipse-openj9/openj9/pull/9826#discussion_r437796047", "createdAt": "2020-06-10T00:34:24Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/compile/J9Compilation.cpp", "diffHunk": "@@ -183,6 +183,11 @@ J9::Compilation::Compilation(int32_t id,\n #endif /* defined(J9VM_OPT_JITSERVER) */\n    _osrProhibitedOverRangeOfTrees(false)\n    {\n+   #if defined(J9VM_OPT_JITSERVER)\n+      if (self()->getPersistentInfo()->getRemoteCompilationMode() == JITServer::SERVER)\n+         _target.cpu = TR::CPU(TR::Compiler->target.cpu.getProcessorDescription());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fca77adc65fa2f45bf006e81244df1570dbbb27"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIzNjQ1MA==", "bodyText": "It is a singleton, but we added a remote call to getProcessorDescription() so it works for JITServer.\nOMRProcessorDesc\nJ9::X86::CPU::getProcessorDescription()\n   {\n#if defined(J9VM_OPT_JITSERVER)\n   if (auto stream = TR::CompilationInfo::getStream())\n      {\n      auto *vmInfo = TR::compInfoPT->getClientData()->getOrCacheVMInfo(stream);\n      return vmInfo->_processorDescription;\n      }\n#endif /* defined(J9VM_OPT_JITSERVER) */\n   return _processorDescription;\n   }\nI wouldn't say this is the final form yet. This is a way to make it work but do look kind of ugly at the moment. I think eventually the entire _target might be replaced for each compilation. I'll need more thoughts on this.", "url": "https://github.com/eclipse-openj9/openj9/pull/9826#discussion_r438236450", "createdAt": "2020-06-10T16:00:44Z", "author": {"login": "harryyu1994"}, "path": "runtime/compiler/compile/J9Compilation.cpp", "diffHunk": "@@ -183,6 +183,11 @@ J9::Compilation::Compilation(int32_t id,\n #endif /* defined(J9VM_OPT_JITSERVER) */\n    _osrProhibitedOverRangeOfTrees(false)\n    {\n+   #if defined(J9VM_OPT_JITSERVER)\n+      if (self()->getPersistentInfo()->getRemoteCompilationMode() == JITServer::SERVER)\n+         _target.cpu = TR::CPU(TR::Compiler->target.cpu.getProcessorDescription());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5NjA0Nw=="}, "originalCommit": {"oid": "3fca77adc65fa2f45bf006e81244df1570dbbb27"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM3MTE2MA==", "bodyText": "I've put some comments to explain the code.\nI think it's okay to have this in for now.\nSome of the logics for switching processors will be dealt with in the portable AOT item we have here(#9731) So these two lines of code are just temporary.", "url": "https://github.com/eclipse-openj9/openj9/pull/9826#discussion_r438371160", "createdAt": "2020-06-10T19:52:25Z", "author": {"login": "harryyu1994"}, "path": "runtime/compiler/compile/J9Compilation.cpp", "diffHunk": "@@ -183,6 +183,11 @@ J9::Compilation::Compilation(int32_t id,\n #endif /* defined(J9VM_OPT_JITSERVER) */\n    _osrProhibitedOverRangeOfTrees(false)\n    {\n+   #if defined(J9VM_OPT_JITSERVER)\n+      if (self()->getPersistentInfo()->getRemoteCompilationMode() == JITServer::SERVER)\n+         _target.cpu = TR::CPU(TR::Compiler->target.cpu.getProcessorDescription());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5NjA0Nw=="}, "originalCommit": {"oid": "3fca77adc65fa2f45bf006e81244df1570dbbb27"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNzQzODk1OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/x/env/J9CPU.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwMToyMzo0N1rOGhhs8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNTo0ODo1N1rOGh7UNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgwODM2OQ==", "bodyText": "Do we have JITServer implementations on P and Z as well?", "url": "https://github.com/eclipse-openj9/openj9/pull/9826#discussion_r437808369", "createdAt": "2020-06-10T01:23:47Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/x/env/J9CPU.cpp", "diffHunk": "@@ -36,105 +36,98 @@\n // Without this definition, we get an undefined symbol of JITConfig::instance() at runtime\n TR::JitConfig * TR::JitConfig::instance() { return NULL; }\n \n-namespace J9\n-{\n-\n-namespace X86\n-{\n-\n TR_X86CPUIDBuffer *\n-CPU::queryX86TargetCPUID()\n+J9::X86::CPU::queryX86TargetCPUID()\n    {\n    static TR_X86CPUIDBuffer buf = { {'U','n','k','n','o','w','n','B','r','a','n','d'} };\n    jitGetCPUID(&buf);\n    return &buf;\n    }\n \n const char *\n-CPU::getProcessorVendorId()\n+J9::X86::CPU::getProcessorVendorId()\n    {\n    return self()->getX86ProcessorVendorId();\n    }\n \n uint32_t\n-CPU::getProcessorSignature()\n+J9::X86::CPU::getProcessorSignature()\n    {\n    return self()->getX86ProcessorSignature();\n    }\n \n bool\n-CPU::hasPopulationCountInstruction()\n+J9::X86::CPU::hasPopulationCountInstruction()\n    {\n    if ((self()->getX86ProcessorFeatureFlags2() & TR_POPCNT) != 0x00000000)\n       return true;\n    else\n       return false;\n    }\n \n-TR_ProcessorFeatureFlags\n-CPU::getProcessorFeatureFlags()\n+bool\n+J9::X86::CPU::isCompatible(const OMRProcessorDesc& processorDescription)\n    {\n-#if defined(J9VM_OPT_JITSERVER)\n-   if (auto stream = TR::CompilationInfo::getStream())\n+   for (int i = 0; i < OMRPORT_SYSINFO_FEATURES_SIZE; i++)\n       {\n-      auto *vmInfo = TR::compInfoPT->getClientData()->getOrCacheVMInfo(stream);\n-      return vmInfo->_processorFeatureFlags;\n+      // Check to see if the current processor contains all the features that code cache's processor has\n+      if ((processorDescription.features[i] & self()->getProcessorDescription().features[i]) != processorDescription.features[i])\n+         return false;\n       }\n-#endif /* defined(J9VM_OPT_JITSERVER) */\n-   TR_ProcessorFeatureFlags processorFeatureFlags = { {self()->getX86ProcessorFeatureFlags(), self()->getX86ProcessorFeatureFlags2(), self()->getX86ProcessorFeatureFlags8()} };\n-   return processorFeatureFlags;\n+   return true;\n    }\n \n-bool\n-CPU::isCompatible(TR_Processor processorSignature, TR_ProcessorFeatureFlags processorFeatureFlags)\n+OMRProcessorDesc\n+J9::X86::CPU::getProcessorDescription()\n    {\n-   for (int i = 0; i < PROCESSOR_FEATURES_SIZE; i++)\n+#if defined(J9VM_OPT_JITSERVER)\n+   if (auto stream = TR::CompilationInfo::getStream())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fca77adc65fa2f45bf006e81244df1570dbbb27"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIyODAyMw==", "bodyText": "Good point, will add it for P and Z.", "url": "https://github.com/eclipse-openj9/openj9/pull/9826#discussion_r438228023", "createdAt": "2020-06-10T15:48:57Z", "author": {"login": "harryyu1994"}, "path": "runtime/compiler/x/env/J9CPU.cpp", "diffHunk": "@@ -36,105 +36,98 @@\n // Without this definition, we get an undefined symbol of JITConfig::instance() at runtime\n TR::JitConfig * TR::JitConfig::instance() { return NULL; }\n \n-namespace J9\n-{\n-\n-namespace X86\n-{\n-\n TR_X86CPUIDBuffer *\n-CPU::queryX86TargetCPUID()\n+J9::X86::CPU::queryX86TargetCPUID()\n    {\n    static TR_X86CPUIDBuffer buf = { {'U','n','k','n','o','w','n','B','r','a','n','d'} };\n    jitGetCPUID(&buf);\n    return &buf;\n    }\n \n const char *\n-CPU::getProcessorVendorId()\n+J9::X86::CPU::getProcessorVendorId()\n    {\n    return self()->getX86ProcessorVendorId();\n    }\n \n uint32_t\n-CPU::getProcessorSignature()\n+J9::X86::CPU::getProcessorSignature()\n    {\n    return self()->getX86ProcessorSignature();\n    }\n \n bool\n-CPU::hasPopulationCountInstruction()\n+J9::X86::CPU::hasPopulationCountInstruction()\n    {\n    if ((self()->getX86ProcessorFeatureFlags2() & TR_POPCNT) != 0x00000000)\n       return true;\n    else\n       return false;\n    }\n \n-TR_ProcessorFeatureFlags\n-CPU::getProcessorFeatureFlags()\n+bool\n+J9::X86::CPU::isCompatible(const OMRProcessorDesc& processorDescription)\n    {\n-#if defined(J9VM_OPT_JITSERVER)\n-   if (auto stream = TR::CompilationInfo::getStream())\n+   for (int i = 0; i < OMRPORT_SYSINFO_FEATURES_SIZE; i++)\n       {\n-      auto *vmInfo = TR::compInfoPT->getClientData()->getOrCacheVMInfo(stream);\n-      return vmInfo->_processorFeatureFlags;\n+      // Check to see if the current processor contains all the features that code cache's processor has\n+      if ((processorDescription.features[i] & self()->getProcessorDescription().features[i]) != processorDescription.features[i])\n+         return false;\n       }\n-#endif /* defined(J9VM_OPT_JITSERVER) */\n-   TR_ProcessorFeatureFlags processorFeatureFlags = { {self()->getX86ProcessorFeatureFlags(), self()->getX86ProcessorFeatureFlags2(), self()->getX86ProcessorFeatureFlags8()} };\n-   return processorFeatureFlags;\n+   return true;\n    }\n \n-bool\n-CPU::isCompatible(TR_Processor processorSignature, TR_ProcessorFeatureFlags processorFeatureFlags)\n+OMRProcessorDesc\n+J9::X86::CPU::getProcessorDescription()\n    {\n-   for (int i = 0; i < PROCESSOR_FEATURES_SIZE; i++)\n+#if defined(J9VM_OPT_JITSERVER)\n+   if (auto stream = TR::CompilationInfo::getStream())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgwODM2OQ=="}, "originalCommit": {"oid": "3fca77adc65fa2f45bf006e81244df1570dbbb27"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4981, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}