{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgyNDM0OTUx", "number": 10545, "title": "Consolidate AOT Relocation Records", "bodyText": "#4803", "createdAt": "2020-09-09T02:32:32Z", "url": "https://github.com/eclipse-openj9/openj9/pull/10545", "merged": true, "mergeCommit": {"oid": "ad71f4fa53acba3e9b6bef0539d28dd36cd956a3"}, "closed": true, "closedAt": "2020-10-10T00:23:14Z", "author": {"login": "dsouzai"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdG84YUAH2gAyNDgyNDM0OTUxOmIyMGI1MjMxYjYyOGY4NmU2NzY3MThiY2U5NWJlMzVlOWEzYzgzYTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdQ8CKCgFqTUwNTk2NDA2NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b20b5231b628f86e676718bce95be35e9a3c83a7", "author": {"user": {"login": "dsouzai", "name": "Irwin D'Souza"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/b20b5231b628f86e676718bce95be35e9a3c83a7", "committedDate": "2020-09-08T19:36:40Z", "message": "Consolidate TR_ValidateStackWalkerMaySkipFramesRecord\n\nRemove the duplicated code that writes the\nTR_ValidateStackWalkerMaySkipFramesRecord relocation header\ninformation, and consolidate it in one canonical location.\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80fa794749b9705fe0574b983e5fd96c7c6cdec3", "author": {"user": {"login": "dsouzai", "name": "Irwin D'Souza"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/80fa794749b9705fe0574b983e5fd96c7c6cdec3", "committedDate": "2020-09-08T19:37:29Z", "message": "Consolidate TR_ValidateClassInfoIsInitialized\n\nRemove the duplicated code that writes the\nTR_ValidateClassInfoIsInitialized relocation header\ninformation, and consolidate it in one canonical location.\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2bd8ce16dc249cb353590d4953ea58b53344c45b", "author": {"user": {"login": "dsouzai", "name": "Irwin D'Souza"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/2bd8ce16dc249cb353590d4953ea58b53344c45b", "committedDate": "2020-09-08T19:37:59Z", "message": "Consolidate TR_ValidateMethodFromSingleImplementer\n\nRemove the duplicated code that writes the\nTR_ValidateMethodFromSingleImplementer relocation header\ninformation, and consolidate it in one canonical location.\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzMDg1Njc2", "url": "https://github.com/eclipse-openj9/openj9/pull/10545#pullrequestreview-503085676", "createdAt": "2020-10-06T15:22:43Z", "commit": {"oid": "2bd8ce16dc249cb353590d4953ea58b53344c45b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNToyMjo0M1rOHdNELg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNTozNTowN1rOHdNzHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM4NDgxNA==", "bodyText": "I would prefer individual setCpIndex() and setVftSlot() setters, which can store to a field called _cpIndexOrVftSlot. Is there any way these could validate that cpIndex() is only called when setCpIndex() was used, and vftSlot() / setVtfSlot(), respectively? But I guess that's not easy to do since the relo record is set via the svmRecord which also uses the setCpIndexOrVftSlot() approach. Plus the print() guy becomes more troublesome too. \nDoes it need to be this way?", "url": "https://github.com/eclipse-openj9/openj9/pull/10545#discussion_r500384814", "createdAt": "2020-10-06T15:22:43Z", "author": {"login": "mstoodle"}, "path": "runtime/compiler/runtime/RelocationRecord.cpp", "diffHunk": "@@ -4482,35 +4482,122 @@ TR_RelocationRecordValidateClassInfoIsInitialized::isInitialized(TR_RelocationTa\n int32_t\n TR_RelocationRecordValidateMethodFromSingleImpl::applyRelocation(TR_RelocationRuntime *reloRuntime, TR_RelocationTarget *reloTarget, uint8_t *reloLocation)\n    {\n-   uint16_t methodID = reloTarget->loadUnsigned16b((uint8_t *) &((TR_RelocationRecordValidateMethodFromSingleImplBinaryTemplate *)_record)->_methodID);\n-   uint16_t definingClassID = reloTarget->loadUnsigned16b((uint8_t *) &((TR_RelocationRecordValidateMethodFromSingleImplBinaryTemplate *)_record)->_definingClassID);\n-   uint16_t thisClassID = reloTarget->loadUnsigned16b((uint8_t *) &((TR_RelocationRecordValidateMethodFromSingleImplBinaryTemplate *)_record)->_thisClassID);\n-   int32_t cpIndexOrVftSlot = reloTarget->loadSigned32b((uint8_t *) &((TR_RelocationRecordValidateMethodFromSingleImplBinaryTemplate *)_record)->_cpIndexOrVftSlot);\n-   uint16_t callerMethodID = reloTarget->loadUnsigned16b((uint8_t *) &((TR_RelocationRecordValidateMethodFromSingleImplBinaryTemplate *)_record)->_callerMethodID);\n-   uint16_t useGetResolvedInterfaceMethod = reloTarget->loadUnsigned16b((uint8_t *) &((TR_RelocationRecordValidateMethodFromSingleImplBinaryTemplate *)_record)->_useGetResolvedInterfaceMethod);\n-\n-   if (reloRuntime->reloLogger()->logEnabled())\n-      {\n-      reloRuntime->reloLogger()->printf(\"%s\\n\", name());\n-      reloRuntime->reloLogger()->printf(\"\\tapplyRelocation: methodID %d\\n\", methodID);\n-      reloRuntime->reloLogger()->printf(\"\\tapplyRelocation: definingClassID %d\\n\", definingClassID);\n-      reloRuntime->reloLogger()->printf(\"\\tapplyRelocation: thisClassID %d\\n\", thisClassID);\n-      reloRuntime->reloLogger()->printf(\"\\tapplyRelocation: cpIndexOrVftSlot %d\\n\", cpIndexOrVftSlot);\n-      reloRuntime->reloLogger()->printf(\"\\tapplyRelocation: callerMethodID %d\\n\", callerMethodID);\n-      reloRuntime->reloLogger()->printf(\"\\tapplyRelocation: useGetResolvedInterfaceMethod %d\\n\", useGetResolvedInterfaceMethod);\n-      }\n+   uint16_t methodID = this->methodID(reloTarget);\n+   uint16_t definingClassID = this->definingClassID(reloTarget);\n+   uint16_t thisClassID = this->thisClassID(reloTarget);\n+   int32_t cpIndexOrVftSlot = this->cpIndexOrVftSlot(reloTarget);\n+   uint16_t callerMethodID = this->callerMethodID(reloTarget);\n+   TR_YesNoMaybe useGetResolvedInterfaceMethod = this->useGetResolvedInterfaceMethod(reloTarget);\n \n    if (reloRuntime->comp()->getSymbolValidationManager()->validateMethodFromSingleImplementerRecord(methodID,\n                                                                                                     definingClassID,\n                                                                                                     thisClassID,\n                                                                                                     cpIndexOrVftSlot,\n                                                                                                     callerMethodID,\n-                                                                                                    (TR_YesNoMaybe)useGetResolvedInterfaceMethod))\n+                                                                                                    useGetResolvedInterfaceMethod))\n       return 0;\n    else\n       return compilationAotClassReloFailure;\n    }\n \n+void\n+TR_RelocationRecordValidateMethodFromSingleImpl::print(TR_RelocationRuntime *reloRuntime)\n+   {\n+   TR_RelocationTarget *reloTarget = reloRuntime->reloTarget();\n+   TR_RelocationRuntimeLogger *reloLogger = reloRuntime->reloLogger();\n+   TR_RelocationRecord::print(reloRuntime);\n+\n+   const char *yesnomaybe;\n+   TR_YesNoMaybe useGetResolvedInterfaceMethod = this->useGetResolvedInterfaceMethod(reloTarget);\n+   if (useGetResolvedInterfaceMethod == TR_yes)\n+      yesnomaybe = \"TR_yes\";\n+   else if (useGetResolvedInterfaceMethod == TR_no)\n+      yesnomaybe = \"TR_no\";\n+   else if (useGetResolvedInterfaceMethod == TR_maybe)\n+      yesnomaybe = \"TR_maybe\";\n+   else\n+      TR_ASSERT_FATAL(false, \"Unknown TR_YesNoMaybe %d\\n\", useGetResolvedInterfaceMethod);\n+\n+   reloLogger->printf(\"\\tmethodID %d\\n\", methodID(reloTarget));\n+   reloLogger->printf(\"\\tdefiningClassID %d\\n\", definingClassID(reloTarget));\n+   reloLogger->printf(\"\\tthisClassID %d\\n\", thisClassID(reloTarget));\n+   reloLogger->printf(\"\\tcpIndexOrVftSlot %d\\n\", cpIndexOrVftSlot(reloTarget));\n+   reloLogger->printf(\"\\tcallerMethodID %d\\n\", callerMethodID(reloTarget));\n+   reloLogger->printf(\"\\tuseGetResolvedInterfaceMethod %s\\n\", yesnomaybe);\n+   }\n+\n+void\n+TR_RelocationRecordValidateMethodFromSingleImpl::setMethodID(TR_RelocationTarget *reloTarget, uint16_t methodID)\n+   {\n+   reloTarget->storeUnsigned16b(methodID, (uint8_t *) &((TR_RelocationRecordValidateMethodFromSingleImplBinaryTemplate *)_record)->_methodID);\n+   }\n+\n+uint16_t\n+TR_RelocationRecordValidateMethodFromSingleImpl::methodID(TR_RelocationTarget *reloTarget)\n+   {\n+   return reloTarget->loadUnsigned16b((uint8_t *) &((TR_RelocationRecordValidateMethodFromSingleImplBinaryTemplate *)_record)->_methodID);\n+   }\n+\n+void\n+TR_RelocationRecordValidateMethodFromSingleImpl::setDefiningClassID(TR_RelocationTarget *reloTarget, uint16_t definingClassID)\n+   {\n+   reloTarget->storeUnsigned16b(definingClassID, (uint8_t *) &((TR_RelocationRecordValidateMethodFromSingleImplBinaryTemplate *)_record)->_definingClassID);\n+   }\n+\n+uint16_t\n+TR_RelocationRecordValidateMethodFromSingleImpl::definingClassID(TR_RelocationTarget *reloTarget)\n+   {\n+   return reloTarget->loadUnsigned16b((uint8_t *) &((TR_RelocationRecordValidateMethodFromSingleImplBinaryTemplate *)_record)->_definingClassID);\n+   }\n+\n+void\n+TR_RelocationRecordValidateMethodFromSingleImpl::setThisClassID(TR_RelocationTarget *reloTarget, uint16_t thisClassID)\n+   {\n+   reloTarget->storeUnsigned16b(thisClassID, (uint8_t *) &((TR_RelocationRecordValidateMethodFromSingleImplBinaryTemplate *)_record)->_thisClassID);\n+   }\n+\n+uint16_t\n+TR_RelocationRecordValidateMethodFromSingleImpl::thisClassID(TR_RelocationTarget *reloTarget)\n+   {\n+   return reloTarget->loadUnsigned16b((uint8_t *) &((TR_RelocationRecordValidateMethodFromSingleImplBinaryTemplate *)_record)->_thisClassID);\n+   }\n+\n+void\n+TR_RelocationRecordValidateMethodFromSingleImpl::setCpIndexOrVftSlot(TR_RelocationTarget *reloTarget, int32_t cpIndexOrVftSlot)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bd8ce16dc249cb353590d4953ea58b53344c45b"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM4ODI5MQ==", "bodyText": "if you're casting these as unsigned, shouldn't the format codes be %u ?", "url": "https://github.com/eclipse-openj9/openj9/pull/10545#discussion_r500388291", "createdAt": "2020-10-06T15:26:16Z", "author": {"login": "mstoodle"}, "path": "runtime/compiler/codegen/J9AheadOfTimeCompile.cpp", "diffHunk": "@@ -1557,9 +1571,26 @@ J9::AheadOfTimeCompile::dumpRelocationHeaderData(uint8_t *cursor, bool isVerbose\n                      (uint32_t)mfsiRecord->methodID(reloTarget),\n                      (uint32_t)mfsiRecord->definingClassID(reloTarget),\n                      (uint32_t)mfsiRecord->thisClassID(reloTarget),\n-                     mfsiRecord->cpIndexOrVftSlot(reloTarget),\n+                     (uint32_t)mfsiRecord->cpIndexOrVftSlot(reloTarget),\n                      (uint32_t)mfsiRecord->callerMethodID(reloTarget),\n-                     mfsiRecord->useGetResolvedInterfaceMethod(reloTarget));\n+                     (uint32_t)mfsiRecord->useGetResolvedInterfaceMethod(reloTarget));\n+            }\n+         }\n+         break;\n+\n+      case TR_ValidateMethodFromSingleInterfaceImplementer:\n+         {\n+         TR_RelocationRecordValidateMethodFromSingleInterfaceImpl *mfsiiRecord = reinterpret_cast<TR_RelocationRecordValidateMethodFromSingleInterfaceImpl *>(reloRecord);\n+\n+         self()->traceRelocationOffsets(cursor, offsetSize, endOfCurrentRecord, orderedPair);\n+         if (isVerbose)\n+            {\n+            traceMsg(self()->comp(), \"\\n Validate Method From Single Interface Implementor: methodID=%d, definingClassID=%d, thisClassID=%d, cpIndex=%d, callerMethodID=%d \",\n+                     (uint32_t)mfsiiRecord->methodID(reloTarget),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a9e75f77a37f537a4408acc0d4bb3ac34edf059"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM4OTU0MQ==", "bodyText": "uint16_t return type, but it returns the value from loadSigned16b() ?", "url": "https://github.com/eclipse-openj9/openj9/pull/10545#discussion_r500389541", "createdAt": "2020-10-06T15:27:34Z", "author": {"login": "mstoodle"}, "path": "runtime/compiler/runtime/RelocationRecord.cpp", "diffHunk": "@@ -4627,6 +4617,80 @@ TR_RelocationRecordValidateMethodFromSingleInterfaceImpl::applyRelocation(TR_Rel\n       return compilationAotClassReloFailure;\n    }\n \n+void\n+TR_RelocationRecordValidateMethodFromSingleInterfaceImpl::print(TR_RelocationRuntime *reloRuntime)\n+   {\n+   TR_RelocationTarget *reloTarget = reloRuntime->reloTarget();\n+   TR_RelocationRuntimeLogger *reloLogger = reloRuntime->reloLogger();\n+   TR_RelocationRecord::print(reloRuntime);\n+   reloLogger->printf(\"\\tmethodID %d\\n\", methodID(reloTarget));\n+   reloLogger->printf(\"\\tdefiningClassID %d\\n\", definingClassID(reloTarget));\n+   reloLogger->printf(\"\\tthisClassID %d\\n\", thisClassID(reloTarget));\n+   reloLogger->printf(\"\\tcallerMethodID %d\\n\", callerMethodID(reloTarget));\n+   reloLogger->printf(\"\\tcpIndex %d\\n\", cpIndex(reloTarget));\n+   }\n+\n+void\n+TR_RelocationRecordValidateMethodFromSingleInterfaceImpl::setMethodID(TR_RelocationTarget *reloTarget, uint16_t methodID)\n+   {\n+   reloTarget->storeUnsigned16b(methodID, (uint8_t *) &((TR_RelocationRecordValidateMethodFromSingleInterfaceImplBinaryTemplate *)_record)->_methodID);\n+   }\n+\n+\n+uint16_t\n+TR_RelocationRecordValidateMethodFromSingleInterfaceImpl::methodID(TR_RelocationTarget *reloTarget)\n+   {\n+   return reloTarget->loadUnsigned16b((uint8_t *) &((TR_RelocationRecordValidateMethodFromSingleInterfaceImplBinaryTemplate *)_record)->_methodID);\n+   }\n+\n+void\n+TR_RelocationRecordValidateMethodFromSingleInterfaceImpl::setDefiningClassID(TR_RelocationTarget *reloTarget, uint16_t definingClassID)\n+   {\n+   reloTarget->storeUnsigned16b(definingClassID, (uint8_t *) &((TR_RelocationRecordValidateMethodFromSingleInterfaceImplBinaryTemplate *)_record)->_definingClassID);\n+   }\n+\n+uint16_t\n+TR_RelocationRecordValidateMethodFromSingleInterfaceImpl::definingClassID(TR_RelocationTarget *reloTarget)\n+   {\n+   return reloTarget->loadUnsigned16b((uint8_t *) &((TR_RelocationRecordValidateMethodFromSingleInterfaceImplBinaryTemplate *)_record)->_definingClassID);\n+   }\n+\n+void\n+TR_RelocationRecordValidateMethodFromSingleInterfaceImpl::setThisClassID(TR_RelocationTarget *reloTarget, uint16_t thisClassID)\n+   {\n+   reloTarget->storeUnsigned16b(thisClassID, (uint8_t *) &((TR_RelocationRecordValidateMethodFromSingleInterfaceImplBinaryTemplate *)_record)->_thisClassID);\n+   }\n+\n+uint16_t\n+TR_RelocationRecordValidateMethodFromSingleInterfaceImpl::thisClassID(TR_RelocationTarget *reloTarget)\n+   {\n+   return reloTarget->loadUnsigned16b((uint8_t *) &((TR_RelocationRecordValidateMethodFromSingleInterfaceImplBinaryTemplate *)_record)->_thisClassID);\n+   }\n+\n+void\n+TR_RelocationRecordValidateMethodFromSingleInterfaceImpl::setCallerMethodID(TR_RelocationTarget *reloTarget, uint16_t callerMethodID)\n+   {\n+   reloTarget->storeUnsigned16b(callerMethodID, (uint8_t *) &((TR_RelocationRecordValidateMethodFromSingleInterfaceImplBinaryTemplate *)_record)->_callerMethodID);\n+   }\n+\n+uint16_t\n+TR_RelocationRecordValidateMethodFromSingleInterfaceImpl::callerMethodID(TR_RelocationTarget *reloTarget)\n+   {\n+   return reloTarget->loadUnsigned16b((uint8_t *) &((TR_RelocationRecordValidateMethodFromSingleInterfaceImplBinaryTemplate *)_record)->_callerMethodID);\n+   }\n+\n+void\n+TR_RelocationRecordValidateMethodFromSingleInterfaceImpl::setCpIndex(TR_RelocationTarget *reloTarget, uint16_t cpIndex)\n+   {\n+   reloTarget->storeSigned16b(cpIndex, (uint8_t *) &((TR_RelocationRecordValidateMethodFromSingleInterfaceImplBinaryTemplate *)_record)->_cpIndex);\n+   }\n+\n+uint16_t", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a9e75f77a37f537a4408acc0d4bb3ac34edf059"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM5MDUzNQ==", "bodyText": "takes a uint16_t cpIndex but uses storeSigned16b() ?", "url": "https://github.com/eclipse-openj9/openj9/pull/10545#discussion_r500390535", "createdAt": "2020-10-06T15:28:34Z", "author": {"login": "mstoodle"}, "path": "runtime/compiler/runtime/RelocationRecord.cpp", "diffHunk": "@@ -4627,6 +4617,80 @@ TR_RelocationRecordValidateMethodFromSingleInterfaceImpl::applyRelocation(TR_Rel\n       return compilationAotClassReloFailure;\n    }\n \n+void\n+TR_RelocationRecordValidateMethodFromSingleInterfaceImpl::print(TR_RelocationRuntime *reloRuntime)\n+   {\n+   TR_RelocationTarget *reloTarget = reloRuntime->reloTarget();\n+   TR_RelocationRuntimeLogger *reloLogger = reloRuntime->reloLogger();\n+   TR_RelocationRecord::print(reloRuntime);\n+   reloLogger->printf(\"\\tmethodID %d\\n\", methodID(reloTarget));\n+   reloLogger->printf(\"\\tdefiningClassID %d\\n\", definingClassID(reloTarget));\n+   reloLogger->printf(\"\\tthisClassID %d\\n\", thisClassID(reloTarget));\n+   reloLogger->printf(\"\\tcallerMethodID %d\\n\", callerMethodID(reloTarget));\n+   reloLogger->printf(\"\\tcpIndex %d\\n\", cpIndex(reloTarget));\n+   }\n+\n+void\n+TR_RelocationRecordValidateMethodFromSingleInterfaceImpl::setMethodID(TR_RelocationTarget *reloTarget, uint16_t methodID)\n+   {\n+   reloTarget->storeUnsigned16b(methodID, (uint8_t *) &((TR_RelocationRecordValidateMethodFromSingleInterfaceImplBinaryTemplate *)_record)->_methodID);\n+   }\n+\n+\n+uint16_t\n+TR_RelocationRecordValidateMethodFromSingleInterfaceImpl::methodID(TR_RelocationTarget *reloTarget)\n+   {\n+   return reloTarget->loadUnsigned16b((uint8_t *) &((TR_RelocationRecordValidateMethodFromSingleInterfaceImplBinaryTemplate *)_record)->_methodID);\n+   }\n+\n+void\n+TR_RelocationRecordValidateMethodFromSingleInterfaceImpl::setDefiningClassID(TR_RelocationTarget *reloTarget, uint16_t definingClassID)\n+   {\n+   reloTarget->storeUnsigned16b(definingClassID, (uint8_t *) &((TR_RelocationRecordValidateMethodFromSingleInterfaceImplBinaryTemplate *)_record)->_definingClassID);\n+   }\n+\n+uint16_t\n+TR_RelocationRecordValidateMethodFromSingleInterfaceImpl::definingClassID(TR_RelocationTarget *reloTarget)\n+   {\n+   return reloTarget->loadUnsigned16b((uint8_t *) &((TR_RelocationRecordValidateMethodFromSingleInterfaceImplBinaryTemplate *)_record)->_definingClassID);\n+   }\n+\n+void\n+TR_RelocationRecordValidateMethodFromSingleInterfaceImpl::setThisClassID(TR_RelocationTarget *reloTarget, uint16_t thisClassID)\n+   {\n+   reloTarget->storeUnsigned16b(thisClassID, (uint8_t *) &((TR_RelocationRecordValidateMethodFromSingleInterfaceImplBinaryTemplate *)_record)->_thisClassID);\n+   }\n+\n+uint16_t\n+TR_RelocationRecordValidateMethodFromSingleInterfaceImpl::thisClassID(TR_RelocationTarget *reloTarget)\n+   {\n+   return reloTarget->loadUnsigned16b((uint8_t *) &((TR_RelocationRecordValidateMethodFromSingleInterfaceImplBinaryTemplate *)_record)->_thisClassID);\n+   }\n+\n+void\n+TR_RelocationRecordValidateMethodFromSingleInterfaceImpl::setCallerMethodID(TR_RelocationTarget *reloTarget, uint16_t callerMethodID)\n+   {\n+   reloTarget->storeUnsigned16b(callerMethodID, (uint8_t *) &((TR_RelocationRecordValidateMethodFromSingleInterfaceImplBinaryTemplate *)_record)->_callerMethodID);\n+   }\n+\n+uint16_t\n+TR_RelocationRecordValidateMethodFromSingleInterfaceImpl::callerMethodID(TR_RelocationTarget *reloTarget)\n+   {\n+   return reloTarget->loadUnsigned16b((uint8_t *) &((TR_RelocationRecordValidateMethodFromSingleInterfaceImplBinaryTemplate *)_record)->_callerMethodID);\n+   }\n+\n+void\n+TR_RelocationRecordValidateMethodFromSingleInterfaceImpl::setCpIndex(TR_RelocationTarget *reloTarget, uint16_t cpIndex)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a9e75f77a37f537a4408acc0d4bb3ac34edf059"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM5MTYyOQ==", "bodyText": "mismatch unsigned type cast with printf format code?", "url": "https://github.com/eclipse-openj9/openj9/pull/10545#discussion_r500391629", "createdAt": "2020-10-06T15:29:44Z", "author": {"login": "mstoodle"}, "path": "runtime/compiler/codegen/J9AheadOfTimeCompile.cpp", "diffHunk": "@@ -1595,6 +1609,23 @@ J9::AheadOfTimeCompile::dumpRelocationHeaderData(uint8_t *cursor, bool isVerbose\n          }\n          break;\n \n+      case TR_ValidateMethodFromSingleAbstractImplementer:\n+         {\n+         TR_RelocationRecordValidateMethodFromSingleAbstractImpl *mfsaiRecord = reinterpret_cast<TR_RelocationRecordValidateMethodFromSingleAbstractImpl *>(reloRecord);\n+\n+         self()->traceRelocationOffsets(cursor, offsetSize, endOfCurrentRecord, orderedPair);\n+         if (isVerbose)\n+            {\n+            traceMsg(self()->comp(), \"\\n Validate Method From Single Abstract Implementor: methodID=%d, definingClassID=%d, thisClassID=%d, vftSlot=%d, callerMethodID=%d \",\n+                     (uint32_t)mfsaiRecord->methodID(reloTarget),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6686b055f3308e24d597b26e9cbe2fe9847b795"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM5MzcxNw==", "bodyText": "i know it shouldn't be -1, but aren't cpIndices usually a signed type?", "url": "https://github.com/eclipse-openj9/openj9/pull/10545#discussion_r500393717", "createdAt": "2020-10-06T15:31:51Z", "author": {"login": "mstoodle"}, "path": "runtime/compiler/runtime/RelocationRecord.cpp", "diffHunk": "@@ -4263,19 +4263,10 @@ TR_RelocationRecordValidateInterfaceMethodFromCP::cpIndex(TR_RelocationTarget *r\n int32_t\n TR_RelocationRecordValidateImproperInterfaceMethodFromCP::applyRelocation(TR_RelocationRuntime *reloRuntime, TR_RelocationTarget *reloTarget, uint8_t *reloLocation)\n    {\n-   uint16_t methodID = reloTarget->loadUnsigned16b((uint8_t *) &((TR_RelocationRecordValidateImproperInterfaceMethodFromCPBinaryTemplate *)_record)->_methodID);\n-   uint16_t definingClassID = reloTarget->loadUnsigned16b((uint8_t *) &((TR_RelocationRecordValidateImproperInterfaceMethodFromCPBinaryTemplate *)_record)->_definingClassID);\n-   uint16_t beholderID = reloTarget->loadUnsigned16b((uint8_t *) &((TR_RelocationRecordValidateImproperInterfaceMethodFromCPBinaryTemplate *)_record)->_beholderID);\n-   uint32_t cpIndex = reloTarget->loadUnsigned16b((uint8_t *) &((TR_RelocationRecordValidateImproperInterfaceMethodFromCPBinaryTemplate *)_record)->_cpIndex);\n-\n-   if (reloRuntime->reloLogger()->logEnabled())\n-      {\n-      reloRuntime->reloLogger()->printf(\"%s\\n\", name());\n-      reloRuntime->reloLogger()->printf(\"\\tapplyRelocation: methodID %d\\n\", methodID);\n-      reloRuntime->reloLogger()->printf(\"\\tapplyRelocation: definingClassID %d\\n\", definingClassID);\n-      reloRuntime->reloLogger()->printf(\"\\tapplyRelocation: beholderID %d\\n\", beholderID);\n-      reloRuntime->reloLogger()->printf(\"\\tapplyRelocation: cpIndex %d\\n\", cpIndex);\n-      }\n+   uint16_t methodID = this->methodID(reloTarget);\n+   uint16_t definingClassID = this->definingClassID(reloTarget);\n+   uint16_t beholderID = this->beholderID(reloTarget);\n+   uint32_t cpIndex = this->cpIndex(reloTarget);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aad3750c35295081ce9f8ac30f83f9a55d46b8c7"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM5NDcxNQ==", "bodyText": "mismatched format code ?", "url": "https://github.com/eclipse-openj9/openj9/pull/10545#discussion_r500394715", "createdAt": "2020-10-06T15:32:53Z", "author": {"login": "mstoodle"}, "path": "runtime/compiler/codegen/J9AheadOfTimeCompile.cpp", "diffHunk": "@@ -1642,6 +1656,20 @@ J9::AheadOfTimeCompile::dumpRelocationHeaderData(uint8_t *cursor, bool isVerbose\n          }\n          break;\n \n+      case TR_SymbolFromManager:\n+         {\n+         TR_RelocationRecordSymbolFromManager *sfmRecord = reinterpret_cast<TR_RelocationRecordSymbolFromManager *>(reloRecord);\n+\n+         self()->traceRelocationOffsets(cursor, offsetSize, endOfCurrentRecord, orderedPair);\n+         if (isVerbose)\n+            {\n+            traceMsg(self()->comp(), \"\\n Symbol From Manager: symbolID=%d symbolType=%d \",\n+                     (uint32_t)sfmRecord->symbolID(reloTarget),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43c9b727811a95d3e77d4ee4aefc034b134447c1"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM5NTc5MA==", "bodyText": "wouldn't you normally use a static_cast<uint16_t>() here?", "url": "https://github.com/eclipse-openj9/openj9/pull/10545#discussion_r500395790", "createdAt": "2020-10-06T15:34:02Z", "author": {"login": "mstoodle"}, "path": "runtime/compiler/runtime/RelocationRecord.cpp", "diffHunk": "@@ -4774,28 +4774,61 @@ TR_RelocationRecordValidateMethodFromSingleAbstractImpl::callerMethodID(TR_Reloc\n    return reloTarget->loadUnsigned16b((uint8_t *) &((TR_RelocationRecordValidateMethodFromSingleAbstractImplBinaryTemplate *)_record)->_callerMethodID);\n    }\n \n-int32_t\n-TR_RelocationRecordValidateMethodFromSingleAbstractImpl::vftSlot(TR_RelocationTarget *reloTarget)\n+void\n+TR_RelocationRecordSymbolFromManager::print(TR_RelocationRuntime *reloRuntime)\n    {\n-   return reloTarget->loadSigned32b((uint8_t *) &((TR_RelocationRecordValidateMethodFromSingleAbstractImplBinaryTemplate *)_record)->_vftSlot);\n+   TR_RelocationTarget *reloTarget = reloRuntime->reloTarget();\n+   TR_RelocationRuntimeLogger *reloLogger = reloRuntime->reloLogger();\n+   TR_RelocationRecord::print(reloRuntime);\n+\n+   const char *symType;\n+   TR::SymbolType symbolType = this->symbolType(reloTarget);\n+   if (symbolType == TR::SymbolType::typeOpaque)\n+      symType = \"typeOpaque\";\n+   else if (symbolType == TR::SymbolType::typeClass)\n+      symType = \"typeClass\";\n+   else if (symbolType == TR::SymbolType::typeMethod)\n+      symType = \"typeMethod\";\n+   else\n+      TR_ASSERT_FATAL(false, \"Unknown symbolType %d\\n\", symbolType);\n+\n+   reloLogger->printf(\"\\tsymbolID %d\\n\", symbolID(reloTarget));\n+   reloLogger->printf(\"\\tsymbolType %s\\n\", symType);\n+   }\n+\n+void\n+TR_RelocationRecordSymbolFromManager::setSymbolID(TR_RelocationTarget *reloTarget, uint16_t symbolID)\n+   {\n+   reloTarget->storeUnsigned16b(symbolID, (uint8_t *) &((TR_RelocationRecordSymbolFromManagerBinaryTemplate *)_record)->_symbolID);\n+   }\n+\n+uint16_t\n+TR_RelocationRecordSymbolFromManager::symbolID(TR_RelocationTarget *reloTarget)\n+   {\n+   return reloTarget->loadUnsigned16b((uint8_t *) &((TR_RelocationRecordSymbolFromManagerBinaryTemplate *)_record)->_symbolID);\n+   }\n+\n+void\n+TR_RelocationRecordSymbolFromManager::setSymbolType(TR_RelocationTarget *reloTarget, TR::SymbolType symbolType)\n+   {\n+   reloTarget->storeUnsigned16b((uint16_t)symbolType, (uint8_t *) &((TR_RelocationRecordSymbolFromManagerBinaryTemplate *)_record)->_symbolType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43c9b727811a95d3e77d4ee4aefc034b134447c1"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM5NTk5Mw==", "bodyText": "same static_cast<>() question?", "url": "https://github.com/eclipse-openj9/openj9/pull/10545#discussion_r500395993", "createdAt": "2020-10-06T15:34:15Z", "author": {"login": "mstoodle"}, "path": "runtime/compiler/runtime/RelocationRecord.cpp", "diffHunk": "@@ -4774,28 +4774,61 @@ TR_RelocationRecordValidateMethodFromSingleAbstractImpl::callerMethodID(TR_Reloc\n    return reloTarget->loadUnsigned16b((uint8_t *) &((TR_RelocationRecordValidateMethodFromSingleAbstractImplBinaryTemplate *)_record)->_callerMethodID);\n    }\n \n-int32_t\n-TR_RelocationRecordValidateMethodFromSingleAbstractImpl::vftSlot(TR_RelocationTarget *reloTarget)\n+void\n+TR_RelocationRecordSymbolFromManager::print(TR_RelocationRuntime *reloRuntime)\n    {\n-   return reloTarget->loadSigned32b((uint8_t *) &((TR_RelocationRecordValidateMethodFromSingleAbstractImplBinaryTemplate *)_record)->_vftSlot);\n+   TR_RelocationTarget *reloTarget = reloRuntime->reloTarget();\n+   TR_RelocationRuntimeLogger *reloLogger = reloRuntime->reloLogger();\n+   TR_RelocationRecord::print(reloRuntime);\n+\n+   const char *symType;\n+   TR::SymbolType symbolType = this->symbolType(reloTarget);\n+   if (symbolType == TR::SymbolType::typeOpaque)\n+      symType = \"typeOpaque\";\n+   else if (symbolType == TR::SymbolType::typeClass)\n+      symType = \"typeClass\";\n+   else if (symbolType == TR::SymbolType::typeMethod)\n+      symType = \"typeMethod\";\n+   else\n+      TR_ASSERT_FATAL(false, \"Unknown symbolType %d\\n\", symbolType);\n+\n+   reloLogger->printf(\"\\tsymbolID %d\\n\", symbolID(reloTarget));\n+   reloLogger->printf(\"\\tsymbolType %s\\n\", symType);\n+   }\n+\n+void\n+TR_RelocationRecordSymbolFromManager::setSymbolID(TR_RelocationTarget *reloTarget, uint16_t symbolID)\n+   {\n+   reloTarget->storeUnsigned16b(symbolID, (uint8_t *) &((TR_RelocationRecordSymbolFromManagerBinaryTemplate *)_record)->_symbolID);\n+   }\n+\n+uint16_t\n+TR_RelocationRecordSymbolFromManager::symbolID(TR_RelocationTarget *reloTarget)\n+   {\n+   return reloTarget->loadUnsigned16b((uint8_t *) &((TR_RelocationRecordSymbolFromManagerBinaryTemplate *)_record)->_symbolID);\n+   }\n+\n+void\n+TR_RelocationRecordSymbolFromManager::setSymbolType(TR_RelocationTarget *reloTarget, TR::SymbolType symbolType)\n+   {\n+   reloTarget->storeUnsigned16b((uint16_t)symbolType, (uint8_t *) &((TR_RelocationRecordSymbolFromManagerBinaryTemplate *)_record)->_symbolType);\n+   }\n+\n+TR::SymbolType\n+TR_RelocationRecordSymbolFromManager::symbolType(TR_RelocationTarget *reloTarget)\n+   {\n+   return (TR::SymbolType)reloTarget->loadUnsigned16b((uint8_t *) &((TR_RelocationRecordSymbolFromManagerBinaryTemplate *)_record)->_symbolType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43c9b727811a95d3e77d4ee4aefc034b134447c1"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM5NjgyOQ==", "bodyText": "format code?", "url": "https://github.com/eclipse-openj9/openj9/pull/10545#discussion_r500396829", "createdAt": "2020-10-06T15:35:07Z", "author": {"login": "mstoodle"}, "path": "runtime/compiler/codegen/J9AheadOfTimeCompile.cpp", "diffHunk": "@@ -1670,6 +1681,19 @@ J9::AheadOfTimeCompile::dumpRelocationHeaderData(uint8_t *cursor, bool isVerbose\n          }\n          break;\n \n+      case TR_ResolvedTrampolines:\n+         {\n+         TR_RelocationRecordResolvedTrampolines *rtRecord = reinterpret_cast<TR_RelocationRecordResolvedTrampolines *>(reloRecord);\n+\n+         self()->traceRelocationOffsets(cursor, offsetSize, endOfCurrentRecord, orderedPair);\n+         if (isVerbose)\n+            {\n+            traceMsg(self()->comp(), \"\\n Resolved Trampoline: symbolID=%d \",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c5433d83a45b0292bf7749e4b90ac0ce04a7a69"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d93c3642bd327e907de76cba697ff68ff92ce7be", "author": {"user": {"login": "dsouzai", "name": "Irwin D'Souza"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/d93c3642bd327e907de76cba697ff68ff92ce7be", "committedDate": "2020-10-06T15:50:43Z", "message": "Consolidate TR_ValidateMethodFromSingleInterfaceImplementer\n\nRemove the duplicated code that writes the\nTR_ValidateMethodFromSingleInterfaceImplementer relocation header\ninformation, and consolidate it in one canonical location.\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08826b921d11215ad1875055eecaacd7b20a12f0", "author": {"user": {"login": "dsouzai", "name": "Irwin D'Souza"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/08826b921d11215ad1875055eecaacd7b20a12f0", "committedDate": "2020-10-06T15:50:44Z", "message": "Consolidate TR_ValidateMethodFromSingleAbstractImplementer\n\nRemove the duplicated code that writes the\nTR_ValidateMethodFromSingleAbstractImplementer relocation header\ninformation, and consolidate it in one canonical location.\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f9f1001dcfa7db8bb87b2f4586b3954050aa8b1", "author": {"user": {"login": "dsouzai", "name": "Irwin D'Souza"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/7f9f1001dcfa7db8bb87b2f4586b3954050aa8b1", "committedDate": "2020-10-06T16:24:06Z", "message": "Consolidate TR_ValidateImproperInterfaceMethodFromCP\n\nRemove the duplicated code that writes the\nTR_ValidateImproperInterfaceMethodFromCP relocation header\ninformation, and consolidate it in one canonical location.\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a201da0d555f755ad11a5027bace038abdc057f", "author": {"user": {"login": "dsouzai", "name": "Irwin D'Souza"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/6a201da0d555f755ad11a5027bace038abdc057f", "committedDate": "2020-10-06T16:24:08Z", "message": "Consolidate TR_SymbolFromManager\n\nRemove the duplicated code that writes the\nTR_SymbolFromManager relocation header\ninformation, and consolidate it in one canonical location.\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a0664359cd67dbf80875a5e578d1a83db66a9d1", "author": {"user": {"login": "dsouzai", "name": "Irwin D'Souza"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/3a0664359cd67dbf80875a5e578d1a83db66a9d1", "committedDate": "2020-10-06T16:24:08Z", "message": "Consolidate TR_ResolvedTrampolines\n\nRemove the duplicated code that writes the\nTR_ResolvedTrampolines relocation header\ninformation, and consolidate it in one canonical location.\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0c5433d83a45b0292bf7749e4b90ac0ce04a7a69", "author": {"user": {"login": "dsouzai", "name": "Irwin D'Souza"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/0c5433d83a45b0292bf7749e4b90ac0ce04a7a69", "committedDate": "2020-09-08T21:58:40Z", "message": "Consolidate TR_ResolvedTrampolines\n\nRemove the duplicated code that writes the\nTR_ResolvedTrampolines relocation header\ninformation, and consolidate it in one canonical location.\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>"}, "afterCommit": {"oid": "3a0664359cd67dbf80875a5e578d1a83db66a9d1", "author": {"user": {"login": "dsouzai", "name": "Irwin D'Souza"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/3a0664359cd67dbf80875a5e578d1a83db66a9d1", "committedDate": "2020-10-06T16:24:08Z", "message": "Consolidate TR_ResolvedTrampolines\n\nRemove the duplicated code that writes the\nTR_ResolvedTrampolines relocation header\ninformation, and consolidate it in one canonical location.\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1OTY0MDY1", "url": "https://github.com/eclipse-openj9/openj9/pull/10545#pullrequestreview-505964065", "createdAt": "2020-10-09T20:16:41Z", "commit": {"oid": "3a0664359cd67dbf80875a5e578d1a83db66a9d1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4968, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}