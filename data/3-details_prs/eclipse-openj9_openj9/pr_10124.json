{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2NDU2Nzg4", "number": 10124, "title": "Add Dynamic Breadth First Scan Ordering to GC", "bodyText": "Add a gc scavenger scan ordering feature that enables the\ncopying of a hot field marked by the JIT immediately after the\nobject containing the hot field is copied.\nIssue: #7552\nSigned-off-by: Jonathan Oommen jon.oommen@gmail.com", "createdAt": "2020-07-08T20:05:26Z", "url": "https://github.com/eclipse-openj9/openj9/pull/10124", "merged": true, "mergeCommit": {"oid": "c2d4f396055353d9962542f4d2bfef9d26fff6ad"}, "closed": true, "closedAt": "2020-09-22T23:21:32Z", "author": {"login": "jonoommen"}, "timelineItems": {"totalCount": 59, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABczAZLJgBqjM1MjY4ODk1Njk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdLYteuABqjM3OTM1MTY4NDQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e38910114aa27f3321d56ad7b10723de5713216f", "author": {"user": {"login": "jonoommen", "name": "Jon Oommen"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/e38910114aa27f3321d56ad7b10723de5713216f", "committedDate": "2020-07-08T17:14:06Z", "message": "Modify Dynamic BF Scan Ordering to use new JIT Hot Field Marking\n\nModify GC Dynamic Breadth First Scan Ordering to use the\nnewly implemented JIT Hot Field Hot Marking Pass.\n\nSigned-off-by: Jonathan Oommen <jon.oommen@gmail.com>"}, "afterCommit": {"oid": "2f9845022f2b6376da38c9b3ad840b0d5055dd03", "author": {"user": {"login": "jonoommen", "name": "Jon Oommen"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/2f9845022f2b6376da38c9b3ad840b0d5055dd03", "committedDate": "2020-07-08T20:15:50Z", "message": "Modify Dynamic BF Scan Ordering to use new JIT Hot Field Marking\n\nModify GC Dynamic Breadth First Scan Ordering to use the\nnewly implemented JIT Hot Field Hot Marking Pass.\n\nSigned-off-by: Jonathan Oommen <jon.oommen@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2f9845022f2b6376da38c9b3ad840b0d5055dd03", "author": {"user": {"login": "jonoommen", "name": "Jon Oommen"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/2f9845022f2b6376da38c9b3ad840b0d5055dd03", "committedDate": "2020-07-08T20:15:50Z", "message": "Modify Dynamic BF Scan Ordering to use new JIT Hot Field Marking\n\nModify GC Dynamic Breadth First Scan Ordering to use the\nnewly implemented JIT Hot Field Hot Marking Pass.\n\nSigned-off-by: Jonathan Oommen <jon.oommen@gmail.com>"}, "afterCommit": {"oid": "52a47ed47e7f267126c8b2f43e8d79d570d121f8", "author": {"user": {"login": "jonoommen", "name": "Jon Oommen"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/52a47ed47e7f267126c8b2f43e8d79d570d121f8", "committedDate": "2020-07-08T20:40:30Z", "message": "Modify Dynamic BF Scan Ordering to use new JIT Hot Field Marking\n\nModify GC Dynamic Breadth First Scan Ordering to use the\nnewly implemented JIT Hot Field Hot Marking Pass.\n\nSigned-off-by: Jonathan Oommen <jon.oommen@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwMTA3OTA0", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#pullrequestreview-450107904", "createdAt": "2020-07-16T18:29:47Z", "commit": {"oid": "52a47ed47e7f267126c8b2f43e8d79d570d121f8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxODoyOTo0OFrOGy3Xdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxODoyOTo0OFrOGy3Xdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk4OTExMA==", "bodyText": "can we get these so they can be overridden by environment variables", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r455989110", "createdAt": "2020-07-16T18:29:48Z", "author": {"login": "andrewcraik"}, "path": "runtime/compiler/optimizer/HotFieldMarking.cpp", "diffHunk": "@@ -0,0 +1,173 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+\n+#include \"optimizer/HotFieldMarking.hpp\"\n+#include \"env/j9method.h\"\n+#include \"il/Block.hpp\"\n+#include \"il/Node.hpp\"\n+#include \"il/Node_inlines.hpp\"\n+#include \"il/SymbolReference.hpp\"\n+#include \"il/TreeTop.hpp\"\n+#include \"infra/ILWalk.hpp\"\n+#include \"optimizer/Optimizer.hpp\"\n+#include \"optimizer/Optimization.hpp\"\n+#include \"optimizer/Optimization_inlines.hpp\"\n+#include \"optimizer/OptimizationManager.hpp\"\n+\n+#include <map>\n+\n+struct SymStats\n+   {\n+   int32_t _count;\n+   int32_t _score;\n+   int32_t _fieldNameLength;\n+   char* _fieldName;\n+   int32_t _fieldSigLength;\n+   char* _fieldSig;\n+   TR_OpaqueClassBlock *_clazz;\n+   SymStats(int32_t count, int32_t score, int32_t fieldNameLength, char* fieldName, int32_t fieldSigLength, char* fieldSig, TR_OpaqueClassBlock *clazz) :\n+      _count(count), _score(score), _fieldNameLength(fieldNameLength), _fieldName(fieldName), _fieldSigLength(fieldSigLength), _fieldSig(fieldSig), _clazz(clazz) {}\n+   };\n+\n+typedef TR::typed_allocator<std::pair<TR::Symbol *, SymStats *>, TR::Region&> SymAggMapAllocator;\n+typedef std::less<TR::Symbol *> SymAggMapComparator;\n+typedef std::map<TR::Symbol *, SymStats *, SymAggMapComparator, SymAggMapAllocator> SymAggMap;\n+\n+static int32_t getReducedFrequencySum(int32_t currentValue, int32_t newFrequency)\n+   {\n+   return (currentValue + newFrequency);\n+   }\n+\n+static int32_t getReducedFrequencyAverage(int32_t currentValue, int32_t count, int32_t newFrequency)\n+   {\n+   return ((currentValue * count) + newFrequency) / (count + 1);\n+   }\n+\n+int32_t TR_HotFieldMarking::perform()\n+   {\n+   if (!jitConfig->javaVM->memoryManagerFunctions->j9gc_hot_reference_field_required(jitConfig->javaVM))\n+      {\n+      if (trace())\n+         traceMsg(comp(), \"Skipping hot field marking since dynamic breadth first scan ordering is disabled\\n\");\n+      return 0;\n+      }\n+\n+   SymAggMap stats(SymAggMapComparator(), comp()->trMemory()->currentStackRegion());\n+   TR::Block *block = NULL;\n+   for (TR::PostorderNodeIterator it(comp()->getStartTree(), comp()); it != NULL; ++it)\n+      {\n+      TR::Node * const node = it.currentNode();\n+      if (node->getOpCodeValue() == TR::BBStart)\n+         {\n+         block = node->getBlock();\n+         }\n+      else if ((node->getOpCode().isLoadIndirect() || node->getOpCode().isStoreIndirect())\n+               && node->getOpCode().hasSymbolReference()\n+               && !node->getSymbolReference()->isUnresolved()\n+               && node->getSymbolReference()->getSymbol()->isShadow()\n+               && !node->isInternalPointer()\n+               && !node->getOpCode().isArrayLength()\n+               && node->getSymbolReference()->getSymbol()->isCollectedReference()\n+              )\n+         {\n+         TR::SymbolReference *symRef = node->getSymbolReference();\n+         if (symRef->getCPIndex() >= 0 && !symRef->getSymbol()->isArrayShadowSymbol())\n+            {\n+            auto itr = stats.find(symRef->getSymbol());\n+            if (itr != stats.end())\n+               {\n+               if(TR::Options::getReductionAlgorithm(TR_HotFieldReductionAlgorithmSum))\n+                  {\n+                  itr->second->_score = getReducedFrequencySum(itr->second->_score, block->getFrequency());\n+                  } \n+               else\n+                  {\n+                  itr->second->_score = getReducedFrequencyAverage(itr->second->_score, itr->second->_count, block->getFrequency());\n+                  itr->second->_count += 1;\n+                  }\n+               continue;\n+               }\n+\n+            TR::ResolvedMethodSymbol *rms = comp()->getOwningMethodSymbol(symRef->getOwningMethodIndex());\n+            TR_ResolvedMethod *method = rms->getResolvedMethod();\n+\n+            int32_t fieldNameLength = 0;\n+            char *fieldName = method->fieldNameChars(symRef->getCPIndex(), fieldNameLength);\n+            int32_t fieldSigLength = 0;\n+            char *fieldSig = method->fieldSignatureChars(symRef->getCPIndex(), fieldSigLength);\n+            bool isStatic = false;\n+            TR_OpaqueClassBlock *containingClass = static_cast<TR_ResolvedJ9Method*>(method)->definingClassFromCPFieldRef(comp(), symRef->getCPIndex(), isStatic);\n+            if (isStatic)\n+               continue;\n+\n+            stats[symRef->getSymbol()] = new (trStackMemory()) SymStats(1, block->getFrequency(), fieldNameLength, fieldName, fieldSigLength, fieldSig, containingClass);\n+            }\n+         }\n+      }\n+\n+   for (auto itr = stats.begin(), end = stats.end(); itr != end; ++itr)\n+      {\n+      if (itr->second->_score >= TR::Options::_hotFieldThreshold)\n+         {\n+         int32_t fieldOffset = (comp()->fej9()->getInstanceFieldOffset(itr->second->_clazz, itr->second->_fieldName, itr->second->_fieldNameLength, itr->second->_fieldSig, itr->second->_fieldSigLength) + TR::Compiler->om.objectHeaderSizeInBytes()) / TR::Compiler->om.sizeofReferenceField();\n+            \n+         if (!comp()->fej9()->isAnonymousClass(itr->second->_clazz))\n+            {\n+            comp()->fej9()->reportHotField(getUtilization(), TR::Compiler->cls.convertClassOffsetToClassPtr(itr->second->_clazz), fieldOffset, itr->second->_score);\n+            \n+            if (comp()->getOption(TR_TraceMarkingOfHotFields))\n+               {\n+               int32_t classNameLength = 0;\n+               char *className = comp()->fej9()->getClassNameChars(itr->second->_clazz, classNameLength);\n+               //dumpOptDetails(comp(), \"HFM: %s notifying hot field %.*s%.*s.%.*s = %d\\n\", itr->second->_fieldSigLength, itr->second->_fieldSig, classNameLength, className, itr->second->_fieldNameLength, itr->second->_fieldName, itr->second->_score);           \n+               printf(\"HFM: signature: %.*s; class:%.*s; fieldName: %.*s; frequencyScore = %d; fieldOffset1: %d; \\n\", J9UTF8_LENGTH(itr->second->_fieldSig), J9UTF8_DATA(itr->second->_fieldSig), J9UTF8_LENGTH(className), J9UTF8_DATA(className), J9UTF8_LENGTH(itr->second->_fieldName), J9UTF8_DATA(itr->second->_fieldName), itr->second->_score, fieldOffset);\n+               }\n+            } \n+         }\n+      }\n+   return 1;\n+   }\n+\n+int32_t TR_HotFieldMarking::getUtilization()\n+   {\n+   switch (comp()->getMethodHotness())\n+      {\n+      case noOpt:\n+      case cold:\n+      case warm:\n+         return 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52a47ed47e7f267126c8b2f43e8d79d570d121f8"}, "originalPosition": 157}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwMTE5NTYx", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#pullrequestreview-450119561", "createdAt": "2020-07-16T18:46:35Z", "commit": {"oid": "52a47ed47e7f267126c8b2f43e8d79d570d121f8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxODo0NjozNVrOGy373A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxODo0NjozNVrOGy373A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk5ODQyOA==", "bodyText": "there shouldn't be any printf's in the JIT code, please use the tracing framework", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r455998428", "createdAt": "2020-07-16T18:46:35Z", "author": {"login": "andrewcraik"}, "path": "runtime/compiler/optimizer/HotFieldMarking.cpp", "diffHunk": "@@ -0,0 +1,173 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+\n+#include \"optimizer/HotFieldMarking.hpp\"\n+#include \"env/j9method.h\"\n+#include \"il/Block.hpp\"\n+#include \"il/Node.hpp\"\n+#include \"il/Node_inlines.hpp\"\n+#include \"il/SymbolReference.hpp\"\n+#include \"il/TreeTop.hpp\"\n+#include \"infra/ILWalk.hpp\"\n+#include \"optimizer/Optimizer.hpp\"\n+#include \"optimizer/Optimization.hpp\"\n+#include \"optimizer/Optimization_inlines.hpp\"\n+#include \"optimizer/OptimizationManager.hpp\"\n+\n+#include <map>\n+\n+struct SymStats\n+   {\n+   int32_t _count;\n+   int32_t _score;\n+   int32_t _fieldNameLength;\n+   char* _fieldName;\n+   int32_t _fieldSigLength;\n+   char* _fieldSig;\n+   TR_OpaqueClassBlock *_clazz;\n+   SymStats(int32_t count, int32_t score, int32_t fieldNameLength, char* fieldName, int32_t fieldSigLength, char* fieldSig, TR_OpaqueClassBlock *clazz) :\n+      _count(count), _score(score), _fieldNameLength(fieldNameLength), _fieldName(fieldName), _fieldSigLength(fieldSigLength), _fieldSig(fieldSig), _clazz(clazz) {}\n+   };\n+\n+typedef TR::typed_allocator<std::pair<TR::Symbol *, SymStats *>, TR::Region&> SymAggMapAllocator;\n+typedef std::less<TR::Symbol *> SymAggMapComparator;\n+typedef std::map<TR::Symbol *, SymStats *, SymAggMapComparator, SymAggMapAllocator> SymAggMap;\n+\n+static int32_t getReducedFrequencySum(int32_t currentValue, int32_t newFrequency)\n+   {\n+   return (currentValue + newFrequency);\n+   }\n+\n+static int32_t getReducedFrequencyAverage(int32_t currentValue, int32_t count, int32_t newFrequency)\n+   {\n+   return ((currentValue * count) + newFrequency) / (count + 1);\n+   }\n+\n+int32_t TR_HotFieldMarking::perform()\n+   {\n+   if (!jitConfig->javaVM->memoryManagerFunctions->j9gc_hot_reference_field_required(jitConfig->javaVM))\n+      {\n+      if (trace())\n+         traceMsg(comp(), \"Skipping hot field marking since dynamic breadth first scan ordering is disabled\\n\");\n+      return 0;\n+      }\n+\n+   SymAggMap stats(SymAggMapComparator(), comp()->trMemory()->currentStackRegion());\n+   TR::Block *block = NULL;\n+   for (TR::PostorderNodeIterator it(comp()->getStartTree(), comp()); it != NULL; ++it)\n+      {\n+      TR::Node * const node = it.currentNode();\n+      if (node->getOpCodeValue() == TR::BBStart)\n+         {\n+         block = node->getBlock();\n+         }\n+      else if ((node->getOpCode().isLoadIndirect() || node->getOpCode().isStoreIndirect())\n+               && node->getOpCode().hasSymbolReference()\n+               && !node->getSymbolReference()->isUnresolved()\n+               && node->getSymbolReference()->getSymbol()->isShadow()\n+               && !node->isInternalPointer()\n+               && !node->getOpCode().isArrayLength()\n+               && node->getSymbolReference()->getSymbol()->isCollectedReference()\n+              )\n+         {\n+         TR::SymbolReference *symRef = node->getSymbolReference();\n+         if (symRef->getCPIndex() >= 0 && !symRef->getSymbol()->isArrayShadowSymbol())\n+            {\n+            auto itr = stats.find(symRef->getSymbol());\n+            if (itr != stats.end())\n+               {\n+               if(TR::Options::getReductionAlgorithm(TR_HotFieldReductionAlgorithmSum))\n+                  {\n+                  itr->second->_score = getReducedFrequencySum(itr->second->_score, block->getFrequency());\n+                  } \n+               else\n+                  {\n+                  itr->second->_score = getReducedFrequencyAverage(itr->second->_score, itr->second->_count, block->getFrequency());\n+                  itr->second->_count += 1;\n+                  }\n+               continue;\n+               }\n+\n+            TR::ResolvedMethodSymbol *rms = comp()->getOwningMethodSymbol(symRef->getOwningMethodIndex());\n+            TR_ResolvedMethod *method = rms->getResolvedMethod();\n+\n+            int32_t fieldNameLength = 0;\n+            char *fieldName = method->fieldNameChars(symRef->getCPIndex(), fieldNameLength);\n+            int32_t fieldSigLength = 0;\n+            char *fieldSig = method->fieldSignatureChars(symRef->getCPIndex(), fieldSigLength);\n+            bool isStatic = false;\n+            TR_OpaqueClassBlock *containingClass = static_cast<TR_ResolvedJ9Method*>(method)->definingClassFromCPFieldRef(comp(), symRef->getCPIndex(), isStatic);\n+            if (isStatic)\n+               continue;\n+\n+            stats[symRef->getSymbol()] = new (trStackMemory()) SymStats(1, block->getFrequency(), fieldNameLength, fieldName, fieldSigLength, fieldSig, containingClass);\n+            }\n+         }\n+      }\n+\n+   for (auto itr = stats.begin(), end = stats.end(); itr != end; ++itr)\n+      {\n+      if (itr->second->_score >= TR::Options::_hotFieldThreshold)\n+         {\n+         int32_t fieldOffset = (comp()->fej9()->getInstanceFieldOffset(itr->second->_clazz, itr->second->_fieldName, itr->second->_fieldNameLength, itr->second->_fieldSig, itr->second->_fieldSigLength) + TR::Compiler->om.objectHeaderSizeInBytes()) / TR::Compiler->om.sizeofReferenceField();\n+            \n+         if (!comp()->fej9()->isAnonymousClass(itr->second->_clazz))\n+            {\n+            comp()->fej9()->reportHotField(getUtilization(), TR::Compiler->cls.convertClassOffsetToClassPtr(itr->second->_clazz), fieldOffset, itr->second->_score);\n+            \n+            if (comp()->getOption(TR_TraceMarkingOfHotFields))\n+               {\n+               int32_t classNameLength = 0;\n+               char *className = comp()->fej9()->getClassNameChars(itr->second->_clazz, classNameLength);\n+               //dumpOptDetails(comp(), \"HFM: %s notifying hot field %.*s%.*s.%.*s = %d\\n\", itr->second->_fieldSigLength, itr->second->_fieldSig, classNameLength, className, itr->second->_fieldNameLength, itr->second->_fieldName, itr->second->_score);           \n+               printf(\"HFM: signature: %.*s; class:%.*s; fieldName: %.*s; frequencyScore = %d; fieldOffset1: %d; \\n\", J9UTF8_LENGTH(itr->second->_fieldSig), J9UTF8_DATA(itr->second->_fieldSig), J9UTF8_LENGTH(className), J9UTF8_DATA(className), J9UTF8_LENGTH(itr->second->_fieldName), J9UTF8_DATA(itr->second->_fieldName), itr->second->_score, fieldOffset);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52a47ed47e7f267126c8b2f43e8d79d570d121f8"}, "originalPosition": 142}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwMTIwNTY4", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#pullrequestreview-450120568", "createdAt": "2020-07-16T18:48:02Z", "commit": {"oid": "52a47ed47e7f267126c8b2f43e8d79d570d121f8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxODo0ODowMlrOGy3-7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxODo0ODowMlrOGy3-7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk5OTIxNQ==", "bodyText": "usually the side-effects of an opt pass are guarded by performTransformation calls facilitates binary searching of problematic optimizations - we might want to consider that here to allow for filtering of the field data being reported.", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r455999215", "createdAt": "2020-07-16T18:48:02Z", "author": {"login": "andrewcraik"}, "path": "runtime/compiler/optimizer/HotFieldMarking.cpp", "diffHunk": "@@ -0,0 +1,173 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+\n+#include \"optimizer/HotFieldMarking.hpp\"\n+#include \"env/j9method.h\"\n+#include \"il/Block.hpp\"\n+#include \"il/Node.hpp\"\n+#include \"il/Node_inlines.hpp\"\n+#include \"il/SymbolReference.hpp\"\n+#include \"il/TreeTop.hpp\"\n+#include \"infra/ILWalk.hpp\"\n+#include \"optimizer/Optimizer.hpp\"\n+#include \"optimizer/Optimization.hpp\"\n+#include \"optimizer/Optimization_inlines.hpp\"\n+#include \"optimizer/OptimizationManager.hpp\"\n+\n+#include <map>\n+\n+struct SymStats\n+   {\n+   int32_t _count;\n+   int32_t _score;\n+   int32_t _fieldNameLength;\n+   char* _fieldName;\n+   int32_t _fieldSigLength;\n+   char* _fieldSig;\n+   TR_OpaqueClassBlock *_clazz;\n+   SymStats(int32_t count, int32_t score, int32_t fieldNameLength, char* fieldName, int32_t fieldSigLength, char* fieldSig, TR_OpaqueClassBlock *clazz) :\n+      _count(count), _score(score), _fieldNameLength(fieldNameLength), _fieldName(fieldName), _fieldSigLength(fieldSigLength), _fieldSig(fieldSig), _clazz(clazz) {}\n+   };\n+\n+typedef TR::typed_allocator<std::pair<TR::Symbol *, SymStats *>, TR::Region&> SymAggMapAllocator;\n+typedef std::less<TR::Symbol *> SymAggMapComparator;\n+typedef std::map<TR::Symbol *, SymStats *, SymAggMapComparator, SymAggMapAllocator> SymAggMap;\n+\n+static int32_t getReducedFrequencySum(int32_t currentValue, int32_t newFrequency)\n+   {\n+   return (currentValue + newFrequency);\n+   }\n+\n+static int32_t getReducedFrequencyAverage(int32_t currentValue, int32_t count, int32_t newFrequency)\n+   {\n+   return ((currentValue * count) + newFrequency) / (count + 1);\n+   }\n+\n+int32_t TR_HotFieldMarking::perform()\n+   {\n+   if (!jitConfig->javaVM->memoryManagerFunctions->j9gc_hot_reference_field_required(jitConfig->javaVM))\n+      {\n+      if (trace())\n+         traceMsg(comp(), \"Skipping hot field marking since dynamic breadth first scan ordering is disabled\\n\");\n+      return 0;\n+      }\n+\n+   SymAggMap stats(SymAggMapComparator(), comp()->trMemory()->currentStackRegion());\n+   TR::Block *block = NULL;\n+   for (TR::PostorderNodeIterator it(comp()->getStartTree(), comp()); it != NULL; ++it)\n+      {\n+      TR::Node * const node = it.currentNode();\n+      if (node->getOpCodeValue() == TR::BBStart)\n+         {\n+         block = node->getBlock();\n+         }\n+      else if ((node->getOpCode().isLoadIndirect() || node->getOpCode().isStoreIndirect())\n+               && node->getOpCode().hasSymbolReference()\n+               && !node->getSymbolReference()->isUnresolved()\n+               && node->getSymbolReference()->getSymbol()->isShadow()\n+               && !node->isInternalPointer()\n+               && !node->getOpCode().isArrayLength()\n+               && node->getSymbolReference()->getSymbol()->isCollectedReference()\n+              )\n+         {\n+         TR::SymbolReference *symRef = node->getSymbolReference();\n+         if (symRef->getCPIndex() >= 0 && !symRef->getSymbol()->isArrayShadowSymbol())\n+            {\n+            auto itr = stats.find(symRef->getSymbol());\n+            if (itr != stats.end())\n+               {\n+               if(TR::Options::getReductionAlgorithm(TR_HotFieldReductionAlgorithmSum))\n+                  {\n+                  itr->second->_score = getReducedFrequencySum(itr->second->_score, block->getFrequency());\n+                  } \n+               else\n+                  {\n+                  itr->second->_score = getReducedFrequencyAverage(itr->second->_score, itr->second->_count, block->getFrequency());\n+                  itr->second->_count += 1;\n+                  }\n+               continue;\n+               }\n+\n+            TR::ResolvedMethodSymbol *rms = comp()->getOwningMethodSymbol(symRef->getOwningMethodIndex());\n+            TR_ResolvedMethod *method = rms->getResolvedMethod();\n+\n+            int32_t fieldNameLength = 0;\n+            char *fieldName = method->fieldNameChars(symRef->getCPIndex(), fieldNameLength);\n+            int32_t fieldSigLength = 0;\n+            char *fieldSig = method->fieldSignatureChars(symRef->getCPIndex(), fieldSigLength);\n+            bool isStatic = false;\n+            TR_OpaqueClassBlock *containingClass = static_cast<TR_ResolvedJ9Method*>(method)->definingClassFromCPFieldRef(comp(), symRef->getCPIndex(), isStatic);\n+            if (isStatic)\n+               continue;\n+\n+            stats[symRef->getSymbol()] = new (trStackMemory()) SymStats(1, block->getFrequency(), fieldNameLength, fieldName, fieldSigLength, fieldSig, containingClass);\n+            }\n+         }\n+      }\n+\n+   for (auto itr = stats.begin(), end = stats.end(); itr != end; ++itr)\n+      {\n+      if (itr->second->_score >= TR::Options::_hotFieldThreshold)\n+         {\n+         int32_t fieldOffset = (comp()->fej9()->getInstanceFieldOffset(itr->second->_clazz, itr->second->_fieldName, itr->second->_fieldNameLength, itr->second->_fieldSig, itr->second->_fieldSigLength) + TR::Compiler->om.objectHeaderSizeInBytes()) / TR::Compiler->om.sizeofReferenceField();\n+            \n+         if (!comp()->fej9()->isAnonymousClass(itr->second->_clazz))\n+            {\n+            comp()->fej9()->reportHotField(getUtilization(), TR::Compiler->cls.convertClassOffsetToClassPtr(itr->second->_clazz), fieldOffset, itr->second->_score);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52a47ed47e7f267126c8b2f43e8d79d570d121f8"}, "originalPosition": 135}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwMTIxNzAz", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#pullrequestreview-450121703", "createdAt": "2020-07-16T18:49:42Z", "commit": {"oid": "52a47ed47e7f267126c8b2f43e8d79d570d121f8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxODo0OTo0MlrOGy4CUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxODo0OTo0MlrOGy4CUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAwMDA4Mw==", "bodyText": "this code needs more tracing about the fields being processed and the values of the stats after each field is processed to facilitate debugging in the future.", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r456000083", "createdAt": "2020-07-16T18:49:42Z", "author": {"login": "andrewcraik"}, "path": "runtime/compiler/optimizer/HotFieldMarking.cpp", "diffHunk": "@@ -0,0 +1,173 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+\n+#include \"optimizer/HotFieldMarking.hpp\"\n+#include \"env/j9method.h\"\n+#include \"il/Block.hpp\"\n+#include \"il/Node.hpp\"\n+#include \"il/Node_inlines.hpp\"\n+#include \"il/SymbolReference.hpp\"\n+#include \"il/TreeTop.hpp\"\n+#include \"infra/ILWalk.hpp\"\n+#include \"optimizer/Optimizer.hpp\"\n+#include \"optimizer/Optimization.hpp\"\n+#include \"optimizer/Optimization_inlines.hpp\"\n+#include \"optimizer/OptimizationManager.hpp\"\n+\n+#include <map>\n+\n+struct SymStats\n+   {\n+   int32_t _count;\n+   int32_t _score;\n+   int32_t _fieldNameLength;\n+   char* _fieldName;\n+   int32_t _fieldSigLength;\n+   char* _fieldSig;\n+   TR_OpaqueClassBlock *_clazz;\n+   SymStats(int32_t count, int32_t score, int32_t fieldNameLength, char* fieldName, int32_t fieldSigLength, char* fieldSig, TR_OpaqueClassBlock *clazz) :\n+      _count(count), _score(score), _fieldNameLength(fieldNameLength), _fieldName(fieldName), _fieldSigLength(fieldSigLength), _fieldSig(fieldSig), _clazz(clazz) {}\n+   };\n+\n+typedef TR::typed_allocator<std::pair<TR::Symbol *, SymStats *>, TR::Region&> SymAggMapAllocator;\n+typedef std::less<TR::Symbol *> SymAggMapComparator;\n+typedef std::map<TR::Symbol *, SymStats *, SymAggMapComparator, SymAggMapAllocator> SymAggMap;\n+\n+static int32_t getReducedFrequencySum(int32_t currentValue, int32_t newFrequency)\n+   {\n+   return (currentValue + newFrequency);\n+   }\n+\n+static int32_t getReducedFrequencyAverage(int32_t currentValue, int32_t count, int32_t newFrequency)\n+   {\n+   return ((currentValue * count) + newFrequency) / (count + 1);\n+   }\n+\n+int32_t TR_HotFieldMarking::perform()\n+   {\n+   if (!jitConfig->javaVM->memoryManagerFunctions->j9gc_hot_reference_field_required(jitConfig->javaVM))\n+      {\n+      if (trace())\n+         traceMsg(comp(), \"Skipping hot field marking since dynamic breadth first scan ordering is disabled\\n\");\n+      return 0;\n+      }\n+\n+   SymAggMap stats(SymAggMapComparator(), comp()->trMemory()->currentStackRegion());\n+   TR::Block *block = NULL;\n+   for (TR::PostorderNodeIterator it(comp()->getStartTree(), comp()); it != NULL; ++it)\n+      {\n+      TR::Node * const node = it.currentNode();\n+      if (node->getOpCodeValue() == TR::BBStart)\n+         {\n+         block = node->getBlock();\n+         }\n+      else if ((node->getOpCode().isLoadIndirect() || node->getOpCode().isStoreIndirect())\n+               && node->getOpCode().hasSymbolReference()\n+               && !node->getSymbolReference()->isUnresolved()\n+               && node->getSymbolReference()->getSymbol()->isShadow()\n+               && !node->isInternalPointer()\n+               && !node->getOpCode().isArrayLength()\n+               && node->getSymbolReference()->getSymbol()->isCollectedReference()\n+              )\n+         {\n+         TR::SymbolReference *symRef = node->getSymbolReference();\n+         if (symRef->getCPIndex() >= 0 && !symRef->getSymbol()->isArrayShadowSymbol())\n+            {\n+            auto itr = stats.find(symRef->getSymbol());\n+            if (itr != stats.end())\n+               {\n+               if(TR::Options::getReductionAlgorithm(TR_HotFieldReductionAlgorithmSum))\n+                  {\n+                  itr->second->_score = getReducedFrequencySum(itr->second->_score, block->getFrequency());\n+                  } \n+               else\n+                  {\n+                  itr->second->_score = getReducedFrequencyAverage(itr->second->_score, itr->second->_count, block->getFrequency());\n+                  itr->second->_count += 1;\n+                  }\n+               continue;\n+               }\n+\n+            TR::ResolvedMethodSymbol *rms = comp()->getOwningMethodSymbol(symRef->getOwningMethodIndex());\n+            TR_ResolvedMethod *method = rms->getResolvedMethod();\n+\n+            int32_t fieldNameLength = 0;\n+            char *fieldName = method->fieldNameChars(symRef->getCPIndex(), fieldNameLength);\n+            int32_t fieldSigLength = 0;\n+            char *fieldSig = method->fieldSignatureChars(symRef->getCPIndex(), fieldSigLength);\n+            bool isStatic = false;\n+            TR_OpaqueClassBlock *containingClass = static_cast<TR_ResolvedJ9Method*>(method)->definingClassFromCPFieldRef(comp(), symRef->getCPIndex(), isStatic);\n+            if (isStatic)\n+               continue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52a47ed47e7f267126c8b2f43e8d79d570d121f8"}, "originalPosition": 120}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwMTQ3Nzcz", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#pullrequestreview-450147773", "createdAt": "2020-07-16T19:21:19Z", "commit": {"oid": "52a47ed47e7f267126c8b2f43e8d79d570d121f8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxOToyMToyMFrOGy5GTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxOToyMToyMFrOGy5GTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAxNzQ4Nw==", "bodyText": "does this if need to be here? would it make more sense just to have the reductions all having the same signature and being static functions in the file so we could just assign a function pointer to point to one of the methods based on the configured algorithm? might make it easier to add other algorithms in the future or to even have the GC pass the reduction function in if it isn't embedded in the opt code directly...", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r456017487", "createdAt": "2020-07-16T19:21:20Z", "author": {"login": "andrewcraik"}, "path": "runtime/compiler/optimizer/HotFieldMarking.cpp", "diffHunk": "@@ -0,0 +1,173 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+\n+#include \"optimizer/HotFieldMarking.hpp\"\n+#include \"env/j9method.h\"\n+#include \"il/Block.hpp\"\n+#include \"il/Node.hpp\"\n+#include \"il/Node_inlines.hpp\"\n+#include \"il/SymbolReference.hpp\"\n+#include \"il/TreeTop.hpp\"\n+#include \"infra/ILWalk.hpp\"\n+#include \"optimizer/Optimizer.hpp\"\n+#include \"optimizer/Optimization.hpp\"\n+#include \"optimizer/Optimization_inlines.hpp\"\n+#include \"optimizer/OptimizationManager.hpp\"\n+\n+#include <map>\n+\n+struct SymStats\n+   {\n+   int32_t _count;\n+   int32_t _score;\n+   int32_t _fieldNameLength;\n+   char* _fieldName;\n+   int32_t _fieldSigLength;\n+   char* _fieldSig;\n+   TR_OpaqueClassBlock *_clazz;\n+   SymStats(int32_t count, int32_t score, int32_t fieldNameLength, char* fieldName, int32_t fieldSigLength, char* fieldSig, TR_OpaqueClassBlock *clazz) :\n+      _count(count), _score(score), _fieldNameLength(fieldNameLength), _fieldName(fieldName), _fieldSigLength(fieldSigLength), _fieldSig(fieldSig), _clazz(clazz) {}\n+   };\n+\n+typedef TR::typed_allocator<std::pair<TR::Symbol *, SymStats *>, TR::Region&> SymAggMapAllocator;\n+typedef std::less<TR::Symbol *> SymAggMapComparator;\n+typedef std::map<TR::Symbol *, SymStats *, SymAggMapComparator, SymAggMapAllocator> SymAggMap;\n+\n+static int32_t getReducedFrequencySum(int32_t currentValue, int32_t newFrequency)\n+   {\n+   return (currentValue + newFrequency);\n+   }\n+\n+static int32_t getReducedFrequencyAverage(int32_t currentValue, int32_t count, int32_t newFrequency)\n+   {\n+   return ((currentValue * count) + newFrequency) / (count + 1);\n+   }\n+\n+int32_t TR_HotFieldMarking::perform()\n+   {\n+   if (!jitConfig->javaVM->memoryManagerFunctions->j9gc_hot_reference_field_required(jitConfig->javaVM))\n+      {\n+      if (trace())\n+         traceMsg(comp(), \"Skipping hot field marking since dynamic breadth first scan ordering is disabled\\n\");\n+      return 0;\n+      }\n+\n+   SymAggMap stats(SymAggMapComparator(), comp()->trMemory()->currentStackRegion());\n+   TR::Block *block = NULL;\n+   for (TR::PostorderNodeIterator it(comp()->getStartTree(), comp()); it != NULL; ++it)\n+      {\n+      TR::Node * const node = it.currentNode();\n+      if (node->getOpCodeValue() == TR::BBStart)\n+         {\n+         block = node->getBlock();\n+         }\n+      else if ((node->getOpCode().isLoadIndirect() || node->getOpCode().isStoreIndirect())\n+               && node->getOpCode().hasSymbolReference()\n+               && !node->getSymbolReference()->isUnresolved()\n+               && node->getSymbolReference()->getSymbol()->isShadow()\n+               && !node->isInternalPointer()\n+               && !node->getOpCode().isArrayLength()\n+               && node->getSymbolReference()->getSymbol()->isCollectedReference()\n+              )\n+         {\n+         TR::SymbolReference *symRef = node->getSymbolReference();\n+         if (symRef->getCPIndex() >= 0 && !symRef->getSymbol()->isArrayShadowSymbol())\n+            {\n+            auto itr = stats.find(symRef->getSymbol());\n+            if (itr != stats.end())\n+               {\n+               if(TR::Options::getReductionAlgorithm(TR_HotFieldReductionAlgorithmSum))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52a47ed47e7f267126c8b2f43e8d79d570d121f8"}, "originalPosition": 98}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzMzQ1MjY4", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#pullrequestreview-453345268", "createdAt": "2020-07-22T13:59:09Z", "commit": {"oid": "52a47ed47e7f267126c8b2f43e8d79d570d121f8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMzo1OTowOVrOG1jwKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMzo1OTowOVrOG1jwKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgxMzQ4Mw==", "bodyText": "This needs some doxygen", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r458813483", "createdAt": "2020-07-22T13:59:09Z", "author": {"login": "andrewcraik"}, "path": "runtime/compiler/optimizer/HotFieldMarking.hpp", "diffHunk": "@@ -0,0 +1,48 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+\n+#ifndef HOTFIELDMARKING_INCL\n+#define HOTFIELDMARKING_INCL\n+\n+#include <stdint.h>                           // for int32_t\n+#include \"optimizer/Optimization.hpp\"         // for Optimization\n+#include \"optimizer/OptimizationManager.hpp\"  // for OptimizationManager\n+\n+namespace TR { class Block; class Node; }\n+\n+class TR_HotFieldMarking : public TR::Optimization\n+   {\n+   public:\n+   TR_HotFieldMarking(TR::OptimizationManager *manager)\n+      : TR::Optimization(manager)\n+      {}\n+   static TR::Optimization *create(TR::OptimizationManager *manager)\n+      {\n+      return new (manager->allocator()) TR_HotFieldMarking(manager);\n+      }\n+\n+   virtual int32_t perform();\n+   virtual const char * optDetailString() const throw();\n+   int32_t getUtilization();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52a47ed47e7f267126c8b2f43e8d79d570d121f8"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzMzQ1NTk0", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#pullrequestreview-453345594", "createdAt": "2020-07-22T13:59:31Z", "commit": {"oid": "52a47ed47e7f267126c8b2f43e8d79d570d121f8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMzo1OTozMVrOG1jxNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMzo1OTozMVrOG1jxNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgxMzc0OA==", "bodyText": "Some doxygen on this would be good", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r458813748", "createdAt": "2020-07-22T13:59:31Z", "author": {"login": "andrewcraik"}, "path": "runtime/compiler/optimizer/HotFieldMarking.cpp", "diffHunk": "@@ -0,0 +1,173 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+\n+#include \"optimizer/HotFieldMarking.hpp\"\n+#include \"env/j9method.h\"\n+#include \"il/Block.hpp\"\n+#include \"il/Node.hpp\"\n+#include \"il/Node_inlines.hpp\"\n+#include \"il/SymbolReference.hpp\"\n+#include \"il/TreeTop.hpp\"\n+#include \"infra/ILWalk.hpp\"\n+#include \"optimizer/Optimizer.hpp\"\n+#include \"optimizer/Optimization.hpp\"\n+#include \"optimizer/Optimization_inlines.hpp\"\n+#include \"optimizer/OptimizationManager.hpp\"\n+\n+#include <map>\n+\n+struct SymStats", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52a47ed47e7f267126c8b2f43e8d79d570d121f8"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0MTAxMDUy", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#pullrequestreview-454101052", "createdAt": "2020-07-23T12:57:07Z", "commit": {"oid": "9050263b7640de45fa1456f1c1a9db4a5fa0106b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMjo1NzowOFrOG2JPaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMjo1NzowOFrOG2JPaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQyNzY5MQ==", "bodyText": "please make these doxygen comments rather than just inline comments so they can come out in the documentation.", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r459427691", "createdAt": "2020-07-23T12:57:08Z", "author": {"login": "andrewcraik"}, "path": "runtime/compiler/optimizer/HotFieldMarking.cpp", "diffHunk": "@@ -35,24 +35,28 @@\n \n #include <map>\n \n+/**\n+ * A structure to represent the statistics related to each field during a compilation\n+ */\n struct SymStats\n    {\n-   int32_t _count;\n-   int32_t _score;\n+   int32_t _count; /* number of blocks within the compilation that contributes to the frequency score value of the field */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9050263b7640de45fa1456f1c1a9db4a5fa0106b"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0MTAyNDY5", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#pullrequestreview-454102469", "createdAt": "2020-07-23T12:58:30Z", "commit": {"oid": "9050263b7640de45fa1456f1c1a9db4a5fa0106b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMjo1ODozMFrOG2JStA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMjo1ODozMFrOG2JStA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQyODUzMg==", "bodyText": "please format the code with 3 space indent to match the rest of the file since these seem to be tabs.", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r459428532", "createdAt": "2020-07-23T12:58:30Z", "author": {"login": "andrewcraik"}, "path": "runtime/compiler/env/VMJ9.cpp", "diffHunk": "@@ -2347,6 +2350,113 @@ TR_J9VMBase::markHotField(TR::Compilation * comp, TR::SymbolReference * symRef,\n    }\n \n \n+/**\n+ * Report a hot field if the JIT has determined that the field has met appropriate thresholds to be determined a hot field. \n+ * Valid if dynamicBreadthFirstScanOrdering is enabled.\n+ *\n+ * @param reducedCpuUtil normalized cpu utilization of the hot field for the method being compiled\n+ * @param clazz pointer to the class where a hot field should be added\n+ * @param fieldOffset value of the field offset that should be added as a hot field for the given class\n+ * @param reducedFrequency normalized block frequency of the hot field for the method being compiled\n+ */\n+void\n+TR_J9VMBase::reportHotField(int32_t reducedCpuUtil, J9Class* clazz, U_8 fieldOffset,  U_32 reducedFrequency)\n+{\n+\tJ9JavaVM * javaVM = _jitConfig->javaVM;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9050263b7640de45fa1456f1c1a9db4a5fa0106b"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0MTE1Njg5", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#pullrequestreview-454115689", "createdAt": "2020-07-23T13:12:06Z", "commit": {"oid": "9050263b7640de45fa1456f1c1a9db4a5fa0106b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMzoxMjowN1rOG2J1yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMzoxMjowN1rOG2J1yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQzNzUxNQ==", "bodyText": "High-level question - shouldn't this logic live in the GC with the logic that declares the data structures and the logic which reads the data structures? We should keep the concerns separated so perhaps moving this function into the GC and just calling the GC from this method would be more appropriate since these are internal details not owned by the JIT and we have traditionally kept the code separate to make sure we respect encapsulation and so the JIT doesn't have to change if you have to change something about the internal data representation in the GC.", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r459437515", "createdAt": "2020-07-23T13:12:07Z", "author": {"login": "andrewcraik"}, "path": "runtime/compiler/env/VMJ9.cpp", "diffHunk": "@@ -2347,6 +2350,113 @@ TR_J9VMBase::markHotField(TR::Compilation * comp, TR::SymbolReference * symRef,\n    }\n \n \n+/**\n+ * Report a hot field if the JIT has determined that the field has met appropriate thresholds to be determined a hot field. \n+ * Valid if dynamicBreadthFirstScanOrdering is enabled.\n+ *\n+ * @param reducedCpuUtil normalized cpu utilization of the hot field for the method being compiled\n+ * @param clazz pointer to the class where a hot field should be added\n+ * @param fieldOffset value of the field offset that should be added as a hot field for the given class\n+ * @param reducedFrequency normalized block frequency of the hot field for the method being compiled\n+ */\n+void\n+TR_J9VMBase::reportHotField(int32_t reducedCpuUtil, J9Class* clazz, U_8 fieldOffset,  U_32 reducedFrequency)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9050263b7640de45fa1456f1c1a9db4a5fa0106b"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0MTE1OTk2", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#pullrequestreview-454115996", "createdAt": "2020-07-23T13:12:31Z", "commit": {"oid": "9050263b7640de45fa1456f1c1a9db4a5fa0106b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMzoxMjozMVrOG2J2vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMzoxMjozMVrOG2J2vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQzNzc1Ng==", "bodyText": "This should be queried from the VM/GC somewhere I don't see why it is hardcoded in the JIT.", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r459437756", "createdAt": "2020-07-23T13:12:31Z", "author": {"login": "andrewcraik"}, "path": "runtime/compiler/env/VMJ9.cpp", "diffHunk": "@@ -145,6 +145,9 @@\n #define J9_FINDKNOWNCLASS_FLAG_EXISTING_ONLY 2\n #endif\n \n+/* Max hot field list length allowed for a class if scavenger dynamicBreadthScanOrdering is enabled */\n+#define MAX_HOT_FIELD_LIST_LENGTH 10", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9050263b7640de45fa1456f1c1a9db4a5fa0106b"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0MTE2NDE3", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#pullrequestreview-454116417", "createdAt": "2020-07-23T13:13:03Z", "commit": {"oid": "9050263b7640de45fa1456f1c1a9db4a5fa0106b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMzoxMzowM1rOG2J32A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMzoxMzowM1rOG2J32A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQzODA0MA==", "bodyText": "Perhaps this would be better done as a query on the objectmodel or something?", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r459438040", "createdAt": "2020-07-23T13:13:03Z", "author": {"login": "andrewcraik"}, "path": "runtime/compiler/env/VMJ9.cpp", "diffHunk": "@@ -2347,6 +2350,113 @@ TR_J9VMBase::markHotField(TR::Compilation * comp, TR::SymbolReference * symRef,\n    }\n \n \n+/**\n+ * Report a hot field if the JIT has determined that the field has met appropriate thresholds to be determined a hot field. \n+ * Valid if dynamicBreadthFirstScanOrdering is enabled.\n+ *\n+ * @param reducedCpuUtil normalized cpu utilization of the hot field for the method being compiled\n+ * @param clazz pointer to the class where a hot field should be added\n+ * @param fieldOffset value of the field offset that should be added as a hot field for the given class\n+ * @param reducedFrequency normalized block frequency of the hot field for the method being compiled\n+ */\n+void\n+TR_J9VMBase::reportHotField(int32_t reducedCpuUtil, J9Class* clazz, U_8 fieldOffset,  U_32 reducedFrequency)\n+{\n+\tJ9JavaVM * javaVM = _jitConfig->javaVM;\n+\t/* exit if pools are null */\n+\tif (clazz->classLoader->hotFieldPool == NULL || javaVM->hotFieldClassInfoPool == NULL || javaVM->hotFieldClassInfoPoolMutex == NULL) {\n+\t\treturn;\n+\t}\n+\n+\t/* check if hotFieldsInfo exists already */\n+\tif(NULL == clazz->hotFieldsInfo) { \n+\t\tomrthread_monitor_enter(javaVM->hotFieldClassInfoPoolMutex);\n+\t\tif(NULL == clazz->hotFieldsInfo) {\n+         /* initialize new hotFieldsInfo pool element as it does not exist already */\n+\t\t\tclazz->hotFieldsInfo = (J9ClassHotFieldsInfo *)pool_newElement(javaVM->hotFieldClassInfoPool);\n+\t\t\tif(NULL == clazz->hotFieldsInfo) {\n+\t\t\t\tomrthread_monitor_exit(javaVM->hotFieldClassInfoPoolMutex);\n+\t\t\t\treturn; \n+\t\t\t}\n+         clazz->hotFieldsInfo->hotFieldListLength = 0;\n+\t\t\tclazz->hotFieldsInfo->consecutiveHotFieldSelections = 0;\n+\t\t\tclazz->hotFieldsInfo->hotFieldOffset1 = U_8_MAX;\n+\t\t\tclazz->hotFieldsInfo->hotFieldOffset2 = U_8_MAX;\n+         \n+         /* create and initialize the new hot field */\n+\t\t\tomrthread_monitor_enter(clazz->classLoader->hotFieldPoolMutex);\t\n+\t\t\tJ9HotField* newHotField = (J9HotField *)pool_newElement(clazz->classLoader->hotFieldPool);\t\n+\t\t\tif(NULL == newHotField) {\n+\t\t\t\tomrthread_monitor_exit(clazz->classLoader->hotFieldPoolMutex);\n+\t\t\t\tomrthread_monitor_exit(javaVM->hotFieldClassInfoPoolMutex);\n+\t\t\t\treturn; \n+\t\t\t} \n+\t\t\tnewHotField->next = NULL;\n+\t\t\tnewHotField->hotFieldOffset = fieldOffset;\n+\t\t\tnewHotField->hotness = (reducedFrequency * reducedCpuUtil);\n+\t\t\tnewHotField->cpuUtil = reducedCpuUtil;\n+\t\t\tomrthread_monitor_exit(clazz->classLoader->hotFieldPoolMutex);\n+         \n+         /* update hotFieldsInfo for the class now that a new hot field has been added */\n+\t\t\tclazz->hotFieldsInfo->hotFieldListHead = newHotField;\n+\t\t\tclazz->hotFieldsInfo->isClassHotFieldListDirty = true;\n+\t\t\tclazz->hotFieldsInfo->hotFieldListLength++;\n+\t\t\tclazz->hotFieldsInfo->classLoader = clazz->classLoader;\n+\t\t\tomrthread_monitor_exit(javaVM->hotFieldClassInfoPoolMutex);\n+\t\t\treturn;\t\t\n+\t\t} else {\n+\t\t\tomrthread_monitor_exit(javaVM->hotFieldClassInfoPoolMutex);\n+\t\t}\n+\t} \t\n+\n+\t/* see if hot field exists already in the hot field list */\n+\tJ9HotField* temp = clazz->hotFieldsInfo->hotFieldListHead;\n+\twhile (NULL != temp) {\n+      /* if the hot field exists, update the hot field with the newly reported hot field information */\n+\t\tif(temp->hotFieldOffset == fieldOffset) {\n+\t\t\tomrthread_monitor_enter(clazz->classLoader->hotFieldPoolMutex);\n+\t\t\ttemp->hotness += (reducedFrequency * reducedCpuUtil);\n+\t\t\ttemp->cpuUtil += reducedCpuUtil;\n+\t\t\tomrthread_monitor_exit(clazz->classLoader->hotFieldPoolMutex);\n+\t\t\tclazz->hotFieldsInfo->isClassHotFieldListDirty = true;\n+\t\t\treturn; \n+\t\t}\n+      /* if the hot field does not exist and the hot field list is not currently at its max size, create and initialize the new hot field  */\n+\t\telse if(NULL == temp->next) {\n+\t\t\tif(clazz->hotFieldsInfo->hotFieldListLength < MAX_HOT_FIELD_LIST_LENGTH)\n+\t\t\t{\n+\t\t\t\tomrthread_monitor_enter(clazz->classLoader->hotFieldPoolMutex);\n+\t\t\t\tJ9HotField* newHotField = (J9HotField *)pool_newElement(clazz->classLoader->hotFieldPool);\n+\t\t\t\tif(NULL == newHotField) {\n+\t\t\t\t\tomrthread_monitor_exit(clazz->classLoader->hotFieldPoolMutex);\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t\tnewHotField->next = NULL;\n+\t\t\t\tnewHotField->hotFieldOffset = fieldOffset;\n+\t\t\t\tnewHotField->hotness = (reducedFrequency * reducedCpuUtil);\n+\t\t\t\tnewHotField->cpuUtil = reducedCpuUtil;\n+\t\t\t\ttemp->next = newHotField;\n+\t\t\t\tomrthread_monitor_exit(clazz->classLoader->hotFieldPoolMutex);\n+\t\t\t\t/* update hotFieldsInfo for the class now that a new hot field has been added */\n+            clazz->hotFieldsInfo->hotFieldListLength++;\n+\t\t\t\tclazz->hotFieldsInfo->isClassHotFieldListDirty = true;\n+\t\t\t} \t\t\t\t\n+\t\t\treturn; \t\n+\t\t}\n+\t\ttemp = temp->next;\n+\t}\n+}\n+\n+/**\n+ * Query if hot reference field is reqired for dynamicBreadthFirstScanOrdering\n+ *  @return true if scavenger dynamicBreadthFirstScanOrdering is enabled, 0 otherwise \n+ */\n+bool\n+TR_J9VMBase::isHotReferenceFieldRequired()\n+   {\n+   return _jitConfig->javaVM->memoryManagerFunctions->j9gc_hot_reference_field_required(_jitConfig->javaVM);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9050263b7640de45fa1456f1c1a9db4a5fa0106b"}, "originalPosition": 118}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2ODQyMzU2", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#pullrequestreview-466842356", "createdAt": "2020-08-13T14:55:05Z", "commit": {"oid": "59a99371ed2d46bffa2d1a6987a1bc6fdcd93a8d"}, "state": "COMMENTED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNDo1NTowNVrOHAPW6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNTo0OToxMlrOHARq3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAxMzY3NQ==", "bodyText": "cache the result of vm->memoryManagerFunctions->j9gc_hot_reference_field_required(vm) in a BOOLEAN", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r470013675", "createdAt": "2020-08-13T14:55:05Z", "author": {"login": "tajila"}, "path": "runtime/vm/jvminit.c", "diffHunk": "@@ -649,6 +649,16 @@ freeJavaVM(J9JavaVM * vm)\n \t\trunShutdownStage(vm, INTERPRETER_SHUTDOWN, NULL, 0);\n \t}\n \n+\t/* Kill global hot field class info pool and its monitor if dynamicBreadthFirstScanOrdering is enabled */\n+\tif (vm->memoryManagerFunctions->j9gc_hot_reference_field_required(vm) && NULL != vm->hotFieldClassInfoPool) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59a99371ed2d46bffa2d1a6987a1bc6fdcd93a8d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAxNDA1MA==", "bodyText": "do the full (NULL != vm->hotFieldClassInfoPoolMutex) check here", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r470014050", "createdAt": "2020-08-13T14:55:28Z", "author": {"login": "tajila"}, "path": "runtime/vm/jvminit.c", "diffHunk": "@@ -649,6 +649,16 @@ freeJavaVM(J9JavaVM * vm)\n \t\trunShutdownStage(vm, INTERPRETER_SHUTDOWN, NULL, 0);\n \t}\n \n+\t/* Kill global hot field class info pool and its monitor if dynamicBreadthFirstScanOrdering is enabled */\n+\tif (vm->memoryManagerFunctions->j9gc_hot_reference_field_required(vm) && NULL != vm->hotFieldClassInfoPool) {\n+\t\tpool_kill(vm->hotFieldClassInfoPool);\n+\t\tvm->hotFieldClassInfoPool = NULL;\n+\t}\n+\n+\tif (vm->memoryManagerFunctions->j9gc_hot_reference_field_required(vm) && vm->hotFieldClassInfoPoolMutex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59a99371ed2d46bffa2d1a6987a1bc6fdcd93a8d"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAyMDE0MA==", "bodyText": "put comments on top", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r470020140", "createdAt": "2020-08-13T15:03:33Z", "author": {"login": "tajila"}, "path": "runtime/vm/jvminit.c", "diffHunk": "@@ -6307,6 +6317,13 @@ protectedInitializeJavaVM(J9PortLibrary* portLibrary, void * userData)\n \t\t\t}\n \t\t}\n #endif\n+\t\t/* Create global hot field class info pool and monitor if scavenger dynamicBreadthFirstScanOrdering is enabled */\n+\t\tif (vm->memoryManagerFunctions->j9gc_hot_reference_field_required(vm)) {\n+\t\t\tvm->hotFieldClassInfoPool = pool_new(sizeof(J9ClassHotFieldsInfo),  0, 0, 0, J9_GET_CALLSITE(), J9MEM_CATEGORY_CLASSES, POOL_FOR_PORT(portLibrary));\t/* Create the hot field class pool */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59a99371ed2d46bffa2d1a6987a1bc6fdcd93a8d"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAyMTAxOQ==", "bodyText": "to the full 0 != check for the monitor init", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r470021019", "createdAt": "2020-08-13T15:04:46Z", "author": {"login": "tajila"}, "path": "runtime/vm/jvminit.c", "diffHunk": "@@ -6307,6 +6317,13 @@ protectedInitializeJavaVM(J9PortLibrary* portLibrary, void * userData)\n \t\t\t}\n \t\t}\n #endif\n+\t\t/* Create global hot field class info pool and monitor if scavenger dynamicBreadthFirstScanOrdering is enabled */\n+\t\tif (vm->memoryManagerFunctions->j9gc_hot_reference_field_required(vm)) {\n+\t\t\tvm->hotFieldClassInfoPool = pool_new(sizeof(J9ClassHotFieldsInfo),  0, 0, 0, J9_GET_CALLSITE(), J9MEM_CATEGORY_CLASSES, POOL_FOR_PORT(portLibrary));\t/* Create the hot field class pool */\n+\t\t\tif (NULL == vm->hotFieldClassInfoPool || omrthread_monitor_init_with_name(&vm->hotFieldClassInfoPoolMutex, 0, \"Hot Field Class Info Pool\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59a99371ed2d46bffa2d1a6987a1bc6fdcd93a8d"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAyMTU2OA==", "bodyText": "some tabbing issues in this function", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r470021568", "createdAt": "2020-08-13T15:05:31Z", "author": {"login": "tajila"}, "path": "runtime/vm/resolvefield.cpp", "diffHunk": "@@ -578,6 +581,103 @@ addHiddenInstanceField(J9JavaVM *vm, const char *className, const char *fieldNam\n \treturn 0;\n }\n \n+/**\n+ * Report a hot field if the JIT has determined that the field has met appropriate thresholds to be determined a hot field. \n+ * Valid if dynamicBreadthFirstScanOrdering is enabled.\n+ *\n+ * @param vm[in] pointer to the J9JavaVM\n+ * @param reducedCpuUtil normalized cpu utilization of the hot field for the method being compiled\n+ * @param clazz pointer to the class where a hot field should be added\n+ * @param fieldOffset value of the field offset that should be added as a hot field for the given class\n+ * @param reducedFrequency normalized block frequency of the hot field for the method being compiled\n+ */\n+void\n+reportHotField(J9JavaVM *javaVM, int32_t reducedCpuUtil, J9Class* clazz, U_8 fieldOffset,  U_32 reducedFrequency)\n+{\n+\t/* exit if pools are null */\n+\tif (clazz->classLoader->hotFieldPool == NULL || javaVM->hotFieldClassInfoPool == NULL || javaVM->hotFieldClassInfoPoolMutex == NULL) {\n+\t\treturn;\n+\t}\n+\n+\t/* check if hotFieldsInfo exists already */\n+\tif(NULL == clazz->hotFieldsInfo) { \n+\t\tomrthread_monitor_enter(javaVM->hotFieldClassInfoPoolMutex);\n+\t\tif(NULL == clazz->hotFieldsInfo) {\n+         /* initialize new hotFieldsInfo pool element as it does not exist already */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59a99371ed2d46bffa2d1a6987a1bc6fdcd93a8d"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAyMzMyOA==", "bodyText": "space between if and (", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r470023328", "createdAt": "2020-08-13T15:08:06Z", "author": {"login": "tajila"}, "path": "runtime/vm/resolvefield.cpp", "diffHunk": "@@ -578,6 +581,103 @@ addHiddenInstanceField(J9JavaVM *vm, const char *className, const char *fieldNam\n \treturn 0;\n }\n \n+/**\n+ * Report a hot field if the JIT has determined that the field has met appropriate thresholds to be determined a hot field. \n+ * Valid if dynamicBreadthFirstScanOrdering is enabled.\n+ *\n+ * @param vm[in] pointer to the J9JavaVM\n+ * @param reducedCpuUtil normalized cpu utilization of the hot field for the method being compiled\n+ * @param clazz pointer to the class where a hot field should be added\n+ * @param fieldOffset value of the field offset that should be added as a hot field for the given class\n+ * @param reducedFrequency normalized block frequency of the hot field for the method being compiled\n+ */\n+void\n+reportHotField(J9JavaVM *javaVM, int32_t reducedCpuUtil, J9Class* clazz, U_8 fieldOffset,  U_32 reducedFrequency)\n+{\n+\t/* exit if pools are null */\n+\tif (clazz->classLoader->hotFieldPool == NULL || javaVM->hotFieldClassInfoPool == NULL || javaVM->hotFieldClassInfoPoolMutex == NULL) {\n+\t\treturn;\n+\t}\n+\n+\t/* check if hotFieldsInfo exists already */\n+\tif(NULL == clazz->hotFieldsInfo) { ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59a99371ed2d46bffa2d1a6987a1bc6fdcd93a8d"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAyMzQzNg==", "bodyText": "same below", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r470023436", "createdAt": "2020-08-13T15:08:16Z", "author": {"login": "tajila"}, "path": "runtime/vm/resolvefield.cpp", "diffHunk": "@@ -578,6 +581,103 @@ addHiddenInstanceField(J9JavaVM *vm, const char *className, const char *fieldNam\n \treturn 0;\n }\n \n+/**\n+ * Report a hot field if the JIT has determined that the field has met appropriate thresholds to be determined a hot field. \n+ * Valid if dynamicBreadthFirstScanOrdering is enabled.\n+ *\n+ * @param vm[in] pointer to the J9JavaVM\n+ * @param reducedCpuUtil normalized cpu utilization of the hot field for the method being compiled\n+ * @param clazz pointer to the class where a hot field should be added\n+ * @param fieldOffset value of the field offset that should be added as a hot field for the given class\n+ * @param reducedFrequency normalized block frequency of the hot field for the method being compiled\n+ */\n+void\n+reportHotField(J9JavaVM *javaVM, int32_t reducedCpuUtil, J9Class* clazz, U_8 fieldOffset,  U_32 reducedFrequency)\n+{\n+\t/* exit if pools are null */\n+\tif (clazz->classLoader->hotFieldPool == NULL || javaVM->hotFieldClassInfoPool == NULL || javaVM->hotFieldClassInfoPoolMutex == NULL) {\n+\t\treturn;\n+\t}\n+\n+\t/* check if hotFieldsInfo exists already */\n+\tif(NULL == clazz->hotFieldsInfo) { ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAyMzMyOA=="}, "originalCommit": {"oid": "59a99371ed2d46bffa2d1a6987a1bc6fdcd93a8d"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAzODgzOA==", "bodyText": "can this be done lazily? Some apps create a lot of classloaders with a small amounts of classes within them", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r470038838", "createdAt": "2020-08-13T15:30:03Z", "author": {"login": "tajila"}, "path": "runtime/vm/classallocation.c", "diffHunk": "@@ -173,6 +173,18 @@ allocateClassLoader(J9JavaVM *javaVM)\n \t\t/* memset not required as the classLoaderBlocks pool returns zero'd memory */\n \n \t\tclassLoader->classHashTable = hashClassTableNew(javaVM, INITIAL_CLASSHASHTABLE_SIZE);\n+\t\t\n+\t\t/* Create classloader hot field pool and monitor if scavenger dynamicBreadthFirstScanOrdering is enabled */\n+\t\tif(javaVM->memoryManagerFunctions->j9gc_hot_reference_field_required(javaVM)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59a99371ed2d46bffa2d1a6987a1bc6fdcd93a8d"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA0NDUzNQ==", "bodyText": "instead of temp calling it hotFieldListHead may be more descriptive", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r470044535", "createdAt": "2020-08-13T15:38:45Z", "author": {"login": "tajila"}, "path": "runtime/vm/resolvefield.cpp", "diffHunk": "@@ -578,6 +581,103 @@ addHiddenInstanceField(J9JavaVM *vm, const char *className, const char *fieldNam\n \treturn 0;\n }\n \n+/**\n+ * Report a hot field if the JIT has determined that the field has met appropriate thresholds to be determined a hot field. \n+ * Valid if dynamicBreadthFirstScanOrdering is enabled.\n+ *\n+ * @param vm[in] pointer to the J9JavaVM\n+ * @param reducedCpuUtil normalized cpu utilization of the hot field for the method being compiled\n+ * @param clazz pointer to the class where a hot field should be added\n+ * @param fieldOffset value of the field offset that should be added as a hot field for the given class\n+ * @param reducedFrequency normalized block frequency of the hot field for the method being compiled\n+ */\n+void\n+reportHotField(J9JavaVM *javaVM, int32_t reducedCpuUtil, J9Class* clazz, U_8 fieldOffset,  U_32 reducedFrequency)\n+{\n+\t/* exit if pools are null */\n+\tif (clazz->classLoader->hotFieldPool == NULL || javaVM->hotFieldClassInfoPool == NULL || javaVM->hotFieldClassInfoPoolMutex == NULL) {\n+\t\treturn;\n+\t}\n+\n+\t/* check if hotFieldsInfo exists already */\n+\tif(NULL == clazz->hotFieldsInfo) { \n+\t\tomrthread_monitor_enter(javaVM->hotFieldClassInfoPoolMutex);\n+\t\tif(NULL == clazz->hotFieldsInfo) {\n+         /* initialize new hotFieldsInfo pool element as it does not exist already */\n+\t\t\tclazz->hotFieldsInfo = (J9ClassHotFieldsInfo *)pool_newElement(javaVM->hotFieldClassInfoPool);\n+\t\t\tif(NULL == clazz->hotFieldsInfo) {\n+\t\t\t\tomrthread_monitor_exit(javaVM->hotFieldClassInfoPoolMutex);\n+\t\t\t\treturn; \n+\t\t\t}\n+         clazz->hotFieldsInfo->hotFieldListLength = 0;\n+\t\t\tclazz->hotFieldsInfo->consecutiveHotFieldSelections = 0;\n+\t\t\tclazz->hotFieldsInfo->hotFieldOffset1 = U_8_MAX;\n+\t\t\tclazz->hotFieldsInfo->hotFieldOffset2 = U_8_MAX;\n+         \n+         /* create and initialize the new hot field */\n+\t\t\tomrthread_monitor_enter(clazz->classLoader->hotFieldPoolMutex);\t\n+\t\t\tJ9HotField* newHotField = (J9HotField *)pool_newElement(clazz->classLoader->hotFieldPool);\t\n+\t\t\tif(NULL == newHotField) {\n+\t\t\t\tomrthread_monitor_exit(clazz->classLoader->hotFieldPoolMutex);\n+\t\t\t\tomrthread_monitor_exit(javaVM->hotFieldClassInfoPoolMutex);\n+\t\t\t\treturn; \n+\t\t\t} \n+\t\t\tnewHotField->next = NULL;\n+\t\t\tnewHotField->hotFieldOffset = fieldOffset;\n+\t\t\tnewHotField->hotness = (reducedFrequency * reducedCpuUtil);\n+\t\t\tnewHotField->cpuUtil = reducedCpuUtil;\n+\t\t\tomrthread_monitor_exit(clazz->classLoader->hotFieldPoolMutex);\n+         \n+         /* update hotFieldsInfo for the class now that a new hot field has been added */\n+\t\t\tclazz->hotFieldsInfo->hotFieldListHead = newHotField;\n+\t\t\tclazz->hotFieldsInfo->isClassHotFieldListDirty = true;\n+\t\t\tclazz->hotFieldsInfo->hotFieldListLength++;\n+\t\t\tclazz->hotFieldsInfo->classLoader = clazz->classLoader;\n+\t\t\tomrthread_monitor_exit(javaVM->hotFieldClassInfoPoolMutex);\n+\t\t\treturn;\t\t\n+\t\t} else {\n+\t\t\tomrthread_monitor_exit(javaVM->hotFieldClassInfoPoolMutex);\n+\t\t}\n+\t} \t\n+\n+\t/* see if hot field exists already in the hot field list */\n+\tJ9HotField* temp = clazz->hotFieldsInfo->hotFieldListHead;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59a99371ed2d46bffa2d1a6987a1bc6fdcd93a8d"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA0NDg2Mg==", "bodyText": "dont split else if with comments", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r470044862", "createdAt": "2020-08-13T15:39:16Z", "author": {"login": "tajila"}, "path": "runtime/vm/resolvefield.cpp", "diffHunk": "@@ -578,6 +581,103 @@ addHiddenInstanceField(J9JavaVM *vm, const char *className, const char *fieldNam\n \treturn 0;\n }\n \n+/**\n+ * Report a hot field if the JIT has determined that the field has met appropriate thresholds to be determined a hot field. \n+ * Valid if dynamicBreadthFirstScanOrdering is enabled.\n+ *\n+ * @param vm[in] pointer to the J9JavaVM\n+ * @param reducedCpuUtil normalized cpu utilization of the hot field for the method being compiled\n+ * @param clazz pointer to the class where a hot field should be added\n+ * @param fieldOffset value of the field offset that should be added as a hot field for the given class\n+ * @param reducedFrequency normalized block frequency of the hot field for the method being compiled\n+ */\n+void\n+reportHotField(J9JavaVM *javaVM, int32_t reducedCpuUtil, J9Class* clazz, U_8 fieldOffset,  U_32 reducedFrequency)\n+{\n+\t/* exit if pools are null */\n+\tif (clazz->classLoader->hotFieldPool == NULL || javaVM->hotFieldClassInfoPool == NULL || javaVM->hotFieldClassInfoPoolMutex == NULL) {\n+\t\treturn;\n+\t}\n+\n+\t/* check if hotFieldsInfo exists already */\n+\tif(NULL == clazz->hotFieldsInfo) { \n+\t\tomrthread_monitor_enter(javaVM->hotFieldClassInfoPoolMutex);\n+\t\tif(NULL == clazz->hotFieldsInfo) {\n+         /* initialize new hotFieldsInfo pool element as it does not exist already */\n+\t\t\tclazz->hotFieldsInfo = (J9ClassHotFieldsInfo *)pool_newElement(javaVM->hotFieldClassInfoPool);\n+\t\t\tif(NULL == clazz->hotFieldsInfo) {\n+\t\t\t\tomrthread_monitor_exit(javaVM->hotFieldClassInfoPoolMutex);\n+\t\t\t\treturn; \n+\t\t\t}\n+         clazz->hotFieldsInfo->hotFieldListLength = 0;\n+\t\t\tclazz->hotFieldsInfo->consecutiveHotFieldSelections = 0;\n+\t\t\tclazz->hotFieldsInfo->hotFieldOffset1 = U_8_MAX;\n+\t\t\tclazz->hotFieldsInfo->hotFieldOffset2 = U_8_MAX;\n+         \n+         /* create and initialize the new hot field */\n+\t\t\tomrthread_monitor_enter(clazz->classLoader->hotFieldPoolMutex);\t\n+\t\t\tJ9HotField* newHotField = (J9HotField *)pool_newElement(clazz->classLoader->hotFieldPool);\t\n+\t\t\tif(NULL == newHotField) {\n+\t\t\t\tomrthread_monitor_exit(clazz->classLoader->hotFieldPoolMutex);\n+\t\t\t\tomrthread_monitor_exit(javaVM->hotFieldClassInfoPoolMutex);\n+\t\t\t\treturn; \n+\t\t\t} \n+\t\t\tnewHotField->next = NULL;\n+\t\t\tnewHotField->hotFieldOffset = fieldOffset;\n+\t\t\tnewHotField->hotness = (reducedFrequency * reducedCpuUtil);\n+\t\t\tnewHotField->cpuUtil = reducedCpuUtil;\n+\t\t\tomrthread_monitor_exit(clazz->classLoader->hotFieldPoolMutex);\n+         \n+         /* update hotFieldsInfo for the class now that a new hot field has been added */\n+\t\t\tclazz->hotFieldsInfo->hotFieldListHead = newHotField;\n+\t\t\tclazz->hotFieldsInfo->isClassHotFieldListDirty = true;\n+\t\t\tclazz->hotFieldsInfo->hotFieldListLength++;\n+\t\t\tclazz->hotFieldsInfo->classLoader = clazz->classLoader;\n+\t\t\tomrthread_monitor_exit(javaVM->hotFieldClassInfoPoolMutex);\n+\t\t\treturn;\t\t\n+\t\t} else {\n+\t\t\tomrthread_monitor_exit(javaVM->hotFieldClassInfoPoolMutex);\n+\t\t}\n+\t} \t\n+\n+\t/* see if hot field exists already in the hot field list */\n+\tJ9HotField* temp = clazz->hotFieldsInfo->hotFieldListHead;\n+\twhile (NULL != temp) {\n+      /* if the hot field exists, update the hot field with the newly reported hot field information */\n+\t\tif(temp->hotFieldOffset == fieldOffset) {\n+\t\t\tomrthread_monitor_enter(clazz->classLoader->hotFieldPoolMutex);\n+\t\t\ttemp->hotness += (reducedFrequency * reducedCpuUtil);\n+\t\t\ttemp->cpuUtil += reducedCpuUtil;\n+\t\t\tomrthread_monitor_exit(clazz->classLoader->hotFieldPoolMutex);\n+\t\t\tclazz->hotFieldsInfo->isClassHotFieldListDirty = true;\n+\t\t\treturn; \n+\t\t}\n+      /* if the hot field does not exist and the hot field list is not currently at its max size, create and initialize the new hot field  */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59a99371ed2d46bffa2d1a6987a1bc6fdcd93a8d"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA0NzI3NA==", "bodyText": "is it possible for this to be NULL", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r470047274", "createdAt": "2020-08-13T15:42:46Z", "author": {"login": "tajila"}, "path": "runtime/vm/resolvefield.cpp", "diffHunk": "@@ -578,6 +581,103 @@ addHiddenInstanceField(J9JavaVM *vm, const char *className, const char *fieldNam\n \treturn 0;\n }\n \n+/**\n+ * Report a hot field if the JIT has determined that the field has met appropriate thresholds to be determined a hot field. \n+ * Valid if dynamicBreadthFirstScanOrdering is enabled.\n+ *\n+ * @param vm[in] pointer to the J9JavaVM\n+ * @param reducedCpuUtil normalized cpu utilization of the hot field for the method being compiled\n+ * @param clazz pointer to the class where a hot field should be added\n+ * @param fieldOffset value of the field offset that should be added as a hot field for the given class\n+ * @param reducedFrequency normalized block frequency of the hot field for the method being compiled\n+ */\n+void\n+reportHotField(J9JavaVM *javaVM, int32_t reducedCpuUtil, J9Class* clazz, U_8 fieldOffset,  U_32 reducedFrequency)\n+{\n+\t/* exit if pools are null */\n+\tif (clazz->classLoader->hotFieldPool == NULL || javaVM->hotFieldClassInfoPool == NULL || javaVM->hotFieldClassInfoPoolMutex == NULL) {\n+\t\treturn;\n+\t}\n+\n+\t/* check if hotFieldsInfo exists already */\n+\tif(NULL == clazz->hotFieldsInfo) { \n+\t\tomrthread_monitor_enter(javaVM->hotFieldClassInfoPoolMutex);\n+\t\tif(NULL == clazz->hotFieldsInfo) {\n+         /* initialize new hotFieldsInfo pool element as it does not exist already */\n+\t\t\tclazz->hotFieldsInfo = (J9ClassHotFieldsInfo *)pool_newElement(javaVM->hotFieldClassInfoPool);\n+\t\t\tif(NULL == clazz->hotFieldsInfo) {\n+\t\t\t\tomrthread_monitor_exit(javaVM->hotFieldClassInfoPoolMutex);\n+\t\t\t\treturn; \n+\t\t\t}\n+         clazz->hotFieldsInfo->hotFieldListLength = 0;\n+\t\t\tclazz->hotFieldsInfo->consecutiveHotFieldSelections = 0;\n+\t\t\tclazz->hotFieldsInfo->hotFieldOffset1 = U_8_MAX;\n+\t\t\tclazz->hotFieldsInfo->hotFieldOffset2 = U_8_MAX;\n+         \n+         /* create and initialize the new hot field */\n+\t\t\tomrthread_monitor_enter(clazz->classLoader->hotFieldPoolMutex);\t\n+\t\t\tJ9HotField* newHotField = (J9HotField *)pool_newElement(clazz->classLoader->hotFieldPool);\t\n+\t\t\tif(NULL == newHotField) {\n+\t\t\t\tomrthread_monitor_exit(clazz->classLoader->hotFieldPoolMutex);\n+\t\t\t\tomrthread_monitor_exit(javaVM->hotFieldClassInfoPoolMutex);\n+\t\t\t\treturn; \n+\t\t\t} \n+\t\t\tnewHotField->next = NULL;\n+\t\t\tnewHotField->hotFieldOffset = fieldOffset;\n+\t\t\tnewHotField->hotness = (reducedFrequency * reducedCpuUtil);\n+\t\t\tnewHotField->cpuUtil = reducedCpuUtil;\n+\t\t\tomrthread_monitor_exit(clazz->classLoader->hotFieldPoolMutex);\n+         \n+         /* update hotFieldsInfo for the class now that a new hot field has been added */\n+\t\t\tclazz->hotFieldsInfo->hotFieldListHead = newHotField;\n+\t\t\tclazz->hotFieldsInfo->isClassHotFieldListDirty = true;\n+\t\t\tclazz->hotFieldsInfo->hotFieldListLength++;\n+\t\t\tclazz->hotFieldsInfo->classLoader = clazz->classLoader;\n+\t\t\tomrthread_monitor_exit(javaVM->hotFieldClassInfoPoolMutex);\n+\t\t\treturn;\t\t\n+\t\t} else {\n+\t\t\tomrthread_monitor_exit(javaVM->hotFieldClassInfoPoolMutex);\n+\t\t}\n+\t} \t\n+\n+\t/* see if hot field exists already in the hot field list */\n+\tJ9HotField* temp = clazz->hotFieldsInfo->hotFieldListHead;\n+\twhile (NULL != temp) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59a99371ed2d46bffa2d1a6987a1bc6fdcd93a8d"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA1MDE0Ng==", "bodyText": "to avoid code duplication, and to simply things perhaps do the following:\n\nsearch for hot field\nif hotfield not found create it\nadd/update stats", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r470050146", "createdAt": "2020-08-13T15:47:08Z", "author": {"login": "tajila"}, "path": "runtime/vm/resolvefield.cpp", "diffHunk": "@@ -578,6 +581,103 @@ addHiddenInstanceField(J9JavaVM *vm, const char *className, const char *fieldNam\n \treturn 0;\n }\n \n+/**\n+ * Report a hot field if the JIT has determined that the field has met appropriate thresholds to be determined a hot field. \n+ * Valid if dynamicBreadthFirstScanOrdering is enabled.\n+ *\n+ * @param vm[in] pointer to the J9JavaVM\n+ * @param reducedCpuUtil normalized cpu utilization of the hot field for the method being compiled\n+ * @param clazz pointer to the class where a hot field should be added\n+ * @param fieldOffset value of the field offset that should be added as a hot field for the given class\n+ * @param reducedFrequency normalized block frequency of the hot field for the method being compiled\n+ */\n+void\n+reportHotField(J9JavaVM *javaVM, int32_t reducedCpuUtil, J9Class* clazz, U_8 fieldOffset,  U_32 reducedFrequency)\n+{\n+\t/* exit if pools are null */\n+\tif (clazz->classLoader->hotFieldPool == NULL || javaVM->hotFieldClassInfoPool == NULL || javaVM->hotFieldClassInfoPoolMutex == NULL) {\n+\t\treturn;\n+\t}\n+\n+\t/* check if hotFieldsInfo exists already */\n+\tif(NULL == clazz->hotFieldsInfo) { \n+\t\tomrthread_monitor_enter(javaVM->hotFieldClassInfoPoolMutex);\n+\t\tif(NULL == clazz->hotFieldsInfo) {\n+         /* initialize new hotFieldsInfo pool element as it does not exist already */\n+\t\t\tclazz->hotFieldsInfo = (J9ClassHotFieldsInfo *)pool_newElement(javaVM->hotFieldClassInfoPool);\n+\t\t\tif(NULL == clazz->hotFieldsInfo) {\n+\t\t\t\tomrthread_monitor_exit(javaVM->hotFieldClassInfoPoolMutex);\n+\t\t\t\treturn; \n+\t\t\t}\n+         clazz->hotFieldsInfo->hotFieldListLength = 0;\n+\t\t\tclazz->hotFieldsInfo->consecutiveHotFieldSelections = 0;\n+\t\t\tclazz->hotFieldsInfo->hotFieldOffset1 = U_8_MAX;\n+\t\t\tclazz->hotFieldsInfo->hotFieldOffset2 = U_8_MAX;\n+         \n+         /* create and initialize the new hot field */\n+\t\t\tomrthread_monitor_enter(clazz->classLoader->hotFieldPoolMutex);\t\n+\t\t\tJ9HotField* newHotField = (J9HotField *)pool_newElement(clazz->classLoader->hotFieldPool);\t\n+\t\t\tif(NULL == newHotField) {\n+\t\t\t\tomrthread_monitor_exit(clazz->classLoader->hotFieldPoolMutex);\n+\t\t\t\tomrthread_monitor_exit(javaVM->hotFieldClassInfoPoolMutex);\n+\t\t\t\treturn; \n+\t\t\t} \n+\t\t\tnewHotField->next = NULL;\n+\t\t\tnewHotField->hotFieldOffset = fieldOffset;\n+\t\t\tnewHotField->hotness = (reducedFrequency * reducedCpuUtil);\n+\t\t\tnewHotField->cpuUtil = reducedCpuUtil;\n+\t\t\tomrthread_monitor_exit(clazz->classLoader->hotFieldPoolMutex);\n+         \n+         /* update hotFieldsInfo for the class now that a new hot field has been added */\n+\t\t\tclazz->hotFieldsInfo->hotFieldListHead = newHotField;\n+\t\t\tclazz->hotFieldsInfo->isClassHotFieldListDirty = true;\n+\t\t\tclazz->hotFieldsInfo->hotFieldListLength++;\n+\t\t\tclazz->hotFieldsInfo->classLoader = clazz->classLoader;\n+\t\t\tomrthread_monitor_exit(javaVM->hotFieldClassInfoPoolMutex);\n+\t\t\treturn;\t\t\n+\t\t} else {\n+\t\t\tomrthread_monitor_exit(javaVM->hotFieldClassInfoPoolMutex);\n+\t\t}\n+\t} \t\n+\n+\t/* see if hot field exists already in the hot field list */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59a99371ed2d46bffa2d1a6987a1bc6fdcd93a8d"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA1MDM4Mg==", "bodyText": "tabbing issue here", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r470050382", "createdAt": "2020-08-13T15:47:27Z", "author": {"login": "tajila"}, "path": "runtime/oti/j9nonbuilder.h", "diffHunk": "@@ -605,6 +605,23 @@ typedef struct J9JITRedefinedClass {\n \tstruct J9JITMethodEquivalence* methodList;\n } J9JITRedefinedClass;\n \n+typedef struct J9HotField {\n+    U_8 hotFieldOffset; ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59a99371ed2d46bffa2d1a6987a1bc6fdcd93a8d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA1MTE3MA==", "bodyText": "to create a more efficient layout, start with the larger fields (pointer in this case) then the smaller ones. The compiler may add padding bytes if you place a big field after a smaller one", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r470051170", "createdAt": "2020-08-13T15:48:37Z", "author": {"login": "tajila"}, "path": "runtime/oti/j9nonbuilder.h", "diffHunk": "@@ -605,6 +605,23 @@ typedef struct J9JITRedefinedClass {\n \tstruct J9JITMethodEquivalence* methodList;\n } J9JITRedefinedClass;\n \n+typedef struct J9HotField {\n+    U_8 hotFieldOffset; ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA1MDM4Mg=="}, "originalCommit": {"oid": "59a99371ed2d46bffa2d1a6987a1bc6fdcd93a8d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA1MTU0OA==", "bodyText": "same here", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r470051548", "createdAt": "2020-08-13T15:49:12Z", "author": {"login": "tajila"}, "path": "runtime/oti/j9nonbuilder.h", "diffHunk": "@@ -605,6 +605,23 @@ typedef struct J9JITRedefinedClass {\n \tstruct J9JITMethodEquivalence* methodList;\n } J9JITRedefinedClass;\n \n+typedef struct J9HotField {\n+    U_8 hotFieldOffset; \n+    U_32 hotness;\n+\tU_16 cpuUtil;\n+   struct J9HotField* next;\n+} J9HotField;\n+\n+typedef struct J9ClassHotFieldsInfo {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59a99371ed2d46bffa2d1a6987a1bc6fdcd93a8d"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3MDM0NzAx", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#pullrequestreview-467034701", "createdAt": "2020-08-13T18:40:54Z", "commit": {"oid": "59a99371ed2d46bffa2d1a6987a1bc6fdcd93a8d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxODo0MDo1NFrOHAYxhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxODo0MDo1NFrOHAYxhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE2Nzk0Mg==", "bodyText": "j9class init should be done in createramclass, also the ram class fragments are zero init so the = NULL is not needed.", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r470167942", "createdAt": "2020-08-13T18:40:54Z", "author": {"login": "tajila"}, "path": "runtime/gc_glue_java/ObjectModel.cpp", "diffHunk": "@@ -98,6 +98,7 @@ GC_ObjectModel::internalClassLoadHook(J9HookInterface** hook, UDATA eventNum, vo\n \tGC_ObjectModel *objectModel = (GC_ObjectModel*)userData;\n \tJ9VMThread *vmThread = classLoadEvent->currentThread;\n \tJ9Class *clazz = classLoadEvent->clazz;\n+\tclazz->hotFieldsInfo = NULL;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59a99371ed2d46bffa2d1a6987a1bc6fdcd93a8d"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3MDM5MTEx", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#pullrequestreview-467039111", "createdAt": "2020-08-13T18:47:33Z", "commit": {"oid": "3024ceaa25e0ec0781fff4a333a688fda23bf9c2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxODo0NzozM1rOHAZAdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxODo0NzozM1rOHAZAdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE3MTc2NA==", "bodyText": "Coding style is: (NULL == clazz->classLoader->hotFieldPool). And you need extra oval brackets for each of comparison expressions .", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r470171764", "createdAt": "2020-08-13T18:47:33Z", "author": {"login": "amicic"}, "path": "runtime/vm/resolvefield.cpp", "diffHunk": "@@ -578,6 +581,103 @@ addHiddenInstanceField(J9JavaVM *vm, const char *className, const char *fieldNam\n \treturn 0;\n }\n \n+/**\n+ * Report a hot field if the JIT has determined that the field has met appropriate thresholds to be determined a hot field. \n+ * Valid if dynamicBreadthFirstScanOrdering is enabled.\n+ *\n+ * @param vm[in] pointer to the J9JavaVM\n+ * @param reducedCpuUtil normalized cpu utilization of the hot field for the method being compiled\n+ * @param clazz pointer to the class where a hot field should be added\n+ * @param fieldOffset value of the field offset that should be added as a hot field for the given class\n+ * @param reducedFrequency normalized block frequency of the hot field for the method being compiled\n+ */\n+void\n+reportHotField(J9JavaVM *javaVM, int32_t reducedCpuUtil, J9Class* clazz, U_8 fieldOffset,  U_32 reducedFrequency)\n+{\n+\t/* exit if pools are null */\n+\tif (clazz->classLoader->hotFieldPool == NULL || javaVM->hotFieldClassInfoPool == NULL || javaVM->hotFieldClassInfoPoolMutex == NULL) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3024ceaa25e0ec0781fff4a333a688fda23bf9c2"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3MDQwMjE5", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#pullrequestreview-467040219", "createdAt": "2020-08-13T18:49:18Z", "commit": {"oid": "3024ceaa25e0ec0781fff4a333a688fda23bf9c2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxODo0OToxOVrOHAZEOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxODo0OToxOVrOHAZEOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE3MjcyOQ==", "bodyText": "indentation for this comment and several other lines later below in this method does not now seem right", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r470172729", "createdAt": "2020-08-13T18:49:19Z", "author": {"login": "amicic"}, "path": "runtime/vm/resolvefield.cpp", "diffHunk": "@@ -578,6 +581,103 @@ addHiddenInstanceField(J9JavaVM *vm, const char *className, const char *fieldNam\n \treturn 0;\n }\n \n+/**\n+ * Report a hot field if the JIT has determined that the field has met appropriate thresholds to be determined a hot field. \n+ * Valid if dynamicBreadthFirstScanOrdering is enabled.\n+ *\n+ * @param vm[in] pointer to the J9JavaVM\n+ * @param reducedCpuUtil normalized cpu utilization of the hot field for the method being compiled\n+ * @param clazz pointer to the class where a hot field should be added\n+ * @param fieldOffset value of the field offset that should be added as a hot field for the given class\n+ * @param reducedFrequency normalized block frequency of the hot field for the method being compiled\n+ */\n+void\n+reportHotField(J9JavaVM *javaVM, int32_t reducedCpuUtil, J9Class* clazz, U_8 fieldOffset,  U_32 reducedFrequency)\n+{\n+\t/* exit if pools are null */\n+\tif (clazz->classLoader->hotFieldPool == NULL || javaVM->hotFieldClassInfoPool == NULL || javaVM->hotFieldClassInfoPoolMutex == NULL) {\n+\t\treturn;\n+\t}\n+\n+\t/* check if hotFieldsInfo exists already */\n+\tif(NULL == clazz->hotFieldsInfo) { \n+\t\tomrthread_monitor_enter(javaVM->hotFieldClassInfoPoolMutex);\n+\t\tif(NULL == clazz->hotFieldsInfo) {\n+         /* initialize new hotFieldsInfo pool element as it does not exist already */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3024ceaa25e0ec0781fff4a333a688fda23bf9c2"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4NTQ4ODUx", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#pullrequestreview-468548851", "createdAt": "2020-08-17T15:07:46Z", "commit": {"oid": "0dcf18b0cfc1d4fa149179819664b902fea03a4e"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNTowNzo0NlrOHBsxVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNToxNTo0NlrOHBtGWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU0NDE0OQ==", "bodyText": "not quite what I meant. Basically, line 606 - 644 (createHotFieldsInfo) is one function. Line 645 - 665 (addOrUpdateHotfield) is another.", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r471544149", "createdAt": "2020-08-17T15:07:46Z", "author": {"login": "tajila"}, "path": "runtime/vm/resolvefield.cpp", "diffHunk": "@@ -578,6 +583,118 @@ addHiddenInstanceField(J9JavaVM *vm, const char *className, const char *fieldNam\n \treturn 0;\n }\n \n+/**\n+ * Report a hot field if the JIT has determined that the field has met appropriate thresholds to be determined a hot field. \n+ * Valid if dynamicBreadthFirstScanOrdering is enabled.\n+ *\n+ * @param vm[in] pointer to the J9JavaVM\n+ * @param reducedCpuUtil normalized cpu utilization of the hot field for the method being compiled\n+ * @param clazz pointer to the class where a hot field should be added\n+ * @param fieldOffset value of the field offset that should be added as a hot field for the given class\n+ * @param reducedFrequency normalized block frequency of the hot field for the method being compiled\n+ */\n+void\n+reportHotField(J9JavaVM *javaVM, int32_t reducedCpuUtil, J9Class* clazz, U_8 fieldOffset,  U_32 reducedFrequency)\n+{\n+\t/* exit if pools are null */\n+\tif (NULL == clazz->classLoader->hotFieldPool || NULL == javaVM->hotFieldClassInfoPool || NULL == javaVM->hotFieldClassInfoPoolMutex) {\n+\t\tgoto exit;\n+\t}\n+\n+\t/* check if hotFieldsInfo exists already */\n+\tif(NULL == clazz->hotFieldsInfo) { \n+\t\tomrthread_monitor_enter(javaVM->hotFieldClassInfoPoolMutex);\n+\t\tif(NULL == clazz->hotFieldsInfo) {\n+        \t/* initialize new hotFieldsInfo pool element as it does not exist already */\n+\t\t\tclazz->hotFieldsInfo = (J9ClassHotFieldsInfo *)pool_newElement(javaVM->hotFieldClassInfoPool);\n+\t\t\tif(NULL == clazz->hotFieldsInfo) {\n+\t\t\t\tomrthread_monitor_exit(javaVM->hotFieldClassInfoPoolMutex);\n+\t\t\t\tgoto exit; \n+\t\t\t}\n+        \tclazz->hotFieldsInfo->hotFieldListLength = 0;\n+\t\t\tclazz->hotFieldsInfo->consecutiveHotFieldSelections = 0;\n+\t\t\tclazz->hotFieldsInfo->hotFieldOffset1 = U_8_MAX;\n+\t\t\tclazz->hotFieldsInfo->hotFieldOffset2 = U_8_MAX;\n+         \n+        \t/* create and initialize the new hot field */\n+\t\t\tomrthread_monitor_enter(clazz->classLoader->hotFieldPoolMutex);\t\n+\t\t\tJ9HotField* newHotField = (J9HotField *)pool_newElement(clazz->classLoader->hotFieldPool);\t\n+\t\t\tif(NULL == newHotField) {\n+\t\t\t\tomrthread_monitor_exit(clazz->classLoader->hotFieldPoolMutex);\n+\t\t\t\tomrthread_monitor_exit(javaVM->hotFieldClassInfoPoolMutex);\n+\t\t\t\tgoto exit; \n+\t\t\t} \n+\t\t\tnewHotField->next = NULL;\n+\t\t\tnewHotField->hotFieldOffset = fieldOffset;\n+\t\t\tnewHotField->hotness = (reducedFrequency * reducedCpuUtil);\n+\t\t\tnewHotField->cpuUtil = reducedCpuUtil;\n+\t\t\tomrthread_monitor_exit(clazz->classLoader->hotFieldPoolMutex);\n+         \n+        \t/* update hotFieldsInfo for the class now that a new hot field has been added */\n+\t\t\tclazz->hotFieldsInfo->hotFieldListHead = newHotField;\n+\t\t\tclazz->hotFieldsInfo->isClassHotFieldListDirty = true;\n+\t\t\tclazz->hotFieldsInfo->hotFieldListLength++;\n+\t\t\tclazz->hotFieldsInfo->classLoader = clazz->classLoader;\n+\t\t\tomrthread_monitor_exit(javaVM->hotFieldClassInfoPoolMutex);\n+\t\t\tgoto exit;\t\t\n+\t\t} else {\n+\t\t\tomrthread_monitor_exit(javaVM->hotFieldClassInfoPoolMutex);\n+\t\t}\n+\t} \t\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dcf18b0cfc1d4fa149179819664b902fea03a4e"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU0OTUzMQ==", "bodyText": "This is what I meant about the duplication, updateHotField is essentially addNewHotField without the allocation of a hotfield. If in the future you need to update the metrics collected, it will have to be updated in two places.\nAnother approach would be to simply find the hotfield in this loop, once it is found then break. If it is not found then current is NULL which is fine. In line 659 check add a NULL check for current along with the existing check (youll need to acquire the monitor before hand). Then in line 660 where you have addNewHotField,  simply allocate a new hotfield. After the if block update the hotfield, the release then monitor. All of this can be done in a single function.", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r471549531", "createdAt": "2020-08-17T15:15:46Z", "author": {"login": "tajila"}, "path": "runtime/vm/resolvefield.cpp", "diffHunk": "@@ -578,6 +583,118 @@ addHiddenInstanceField(J9JavaVM *vm, const char *className, const char *fieldNam\n \treturn 0;\n }\n \n+/**\n+ * Report a hot field if the JIT has determined that the field has met appropriate thresholds to be determined a hot field. \n+ * Valid if dynamicBreadthFirstScanOrdering is enabled.\n+ *\n+ * @param vm[in] pointer to the J9JavaVM\n+ * @param reducedCpuUtil normalized cpu utilization of the hot field for the method being compiled\n+ * @param clazz pointer to the class where a hot field should be added\n+ * @param fieldOffset value of the field offset that should be added as a hot field for the given class\n+ * @param reducedFrequency normalized block frequency of the hot field for the method being compiled\n+ */\n+void\n+reportHotField(J9JavaVM *javaVM, int32_t reducedCpuUtil, J9Class* clazz, U_8 fieldOffset,  U_32 reducedFrequency)\n+{\n+\t/* exit if pools are null */\n+\tif (NULL == clazz->classLoader->hotFieldPool || NULL == javaVM->hotFieldClassInfoPool || NULL == javaVM->hotFieldClassInfoPoolMutex) {\n+\t\tgoto exit;\n+\t}\n+\n+\t/* check if hotFieldsInfo exists already */\n+\tif(NULL == clazz->hotFieldsInfo) { \n+\t\tomrthread_monitor_enter(javaVM->hotFieldClassInfoPoolMutex);\n+\t\tif(NULL == clazz->hotFieldsInfo) {\n+        \t/* initialize new hotFieldsInfo pool element as it does not exist already */\n+\t\t\tclazz->hotFieldsInfo = (J9ClassHotFieldsInfo *)pool_newElement(javaVM->hotFieldClassInfoPool);\n+\t\t\tif(NULL == clazz->hotFieldsInfo) {\n+\t\t\t\tomrthread_monitor_exit(javaVM->hotFieldClassInfoPoolMutex);\n+\t\t\t\tgoto exit; \n+\t\t\t}\n+        \tclazz->hotFieldsInfo->hotFieldListLength = 0;\n+\t\t\tclazz->hotFieldsInfo->consecutiveHotFieldSelections = 0;\n+\t\t\tclazz->hotFieldsInfo->hotFieldOffset1 = U_8_MAX;\n+\t\t\tclazz->hotFieldsInfo->hotFieldOffset2 = U_8_MAX;\n+         \n+        \t/* create and initialize the new hot field */\n+\t\t\tomrthread_monitor_enter(clazz->classLoader->hotFieldPoolMutex);\t\n+\t\t\tJ9HotField* newHotField = (J9HotField *)pool_newElement(clazz->classLoader->hotFieldPool);\t\n+\t\t\tif(NULL == newHotField) {\n+\t\t\t\tomrthread_monitor_exit(clazz->classLoader->hotFieldPoolMutex);\n+\t\t\t\tomrthread_monitor_exit(javaVM->hotFieldClassInfoPoolMutex);\n+\t\t\t\tgoto exit; \n+\t\t\t} \n+\t\t\tnewHotField->next = NULL;\n+\t\t\tnewHotField->hotFieldOffset = fieldOffset;\n+\t\t\tnewHotField->hotness = (reducedFrequency * reducedCpuUtil);\n+\t\t\tnewHotField->cpuUtil = reducedCpuUtil;\n+\t\t\tomrthread_monitor_exit(clazz->classLoader->hotFieldPoolMutex);\n+         \n+        \t/* update hotFieldsInfo for the class now that a new hot field has been added */\n+\t\t\tclazz->hotFieldsInfo->hotFieldListHead = newHotField;\n+\t\t\tclazz->hotFieldsInfo->isClassHotFieldListDirty = true;\n+\t\t\tclazz->hotFieldsInfo->hotFieldListLength++;\n+\t\t\tclazz->hotFieldsInfo->classLoader = clazz->classLoader;\n+\t\t\tomrthread_monitor_exit(javaVM->hotFieldClassInfoPoolMutex);\n+\t\t\tgoto exit;\t\t\n+\t\t} else {\n+\t\t\tomrthread_monitor_exit(javaVM->hotFieldClassInfoPoolMutex);\n+\t\t}\n+\t} \t\n+\n+\t/* if the hot field exists, update the hot field with the newly reported hot field information */\n+\tJ9HotField* previous;\n+\tJ9HotField* current;\n+\tcurrent = clazz->hotFieldsInfo->hotFieldListHead;\n+\tdo {\n+\t\tif (current->hotFieldOffset == fieldOffset) {\n+\t\t\tupdateHotField(current, clazz, reducedCpuUtil, reducedFrequency);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dcf18b0cfc1d4fa149179819664b902fea03a4e"}, "originalPosition": 88}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0db0f9f3e969da940d33a2b795fbc06437910ddc", "author": {"user": {"login": "jonoommen", "name": "Jon Oommen"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/0db0f9f3e969da940d33a2b795fbc06437910ddc", "committedDate": "2020-08-17T18:36:37Z", "message": "modfiy input variable name"}, "afterCommit": {"oid": "75078eb89cc14856086cd02f793d2dd8761cdaf5", "author": {"user": {"login": "jonoommen", "name": "Jon Oommen"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/75078eb89cc14856086cd02f793d2dd8761cdaf5", "committedDate": "2020-08-17T19:33:45Z", "message": "modfiy input variable name"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "65bf0b78d39e3695a2ea4959b59bfc25a89d206e", "author": {"user": {"login": "jonoommen", "name": "Jon Oommen"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/65bf0b78d39e3695a2ea4959b59bfc25a89d206e", "committedDate": "2020-08-17T21:07:49Z", "message": "Add option for hot field resetting"}, "afterCommit": {"oid": "b3913bcde1e052f5f913075f7ee045c10a01aef4", "author": {"user": {"login": "jonoommen", "name": "Jon Oommen"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/b3913bcde1e052f5f913075f7ee045c10a01aef4", "committedDate": "2020-08-18T14:06:31Z", "message": "Add option for hot field resetting"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5NTUwNzQ5", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#pullrequestreview-469550749", "createdAt": "2020-08-18T15:07:29Z", "commit": {"oid": "b3913bcde1e052f5f913075f7ee045c10a01aef4"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNTowNzoyOVrOHCZDSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNToyNDoyM1rOHCZygg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI2OTY0Mw==", "bodyText": "if the hot field already exists and you have exceeded the MAX_HOT_FIELD_LIST_LENGTH then you will not be able to update it. This check needs to be moved into addOrUpdateHotField", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r472269643", "createdAt": "2020-08-18T15:07:29Z", "author": {"login": "tajila"}, "path": "runtime/vm/resolvefield.cpp", "diffHunk": "@@ -578,6 +583,124 @@ addHiddenInstanceField(J9JavaVM *vm, const char *className, const char *fieldNam\n \treturn 0;\n }\n \n+/**\n+ * Report a hot field if the JIT has determined that the field has met appropriate thresholds to be determined a hot field. \n+ * Valid if dynamicBreadthFirstScanOrdering is enabled.\n+ *\n+ * @param javaVM[in] pointer to the J9JavaVM\n+ * @param reducedCpuUtil normalized cpu utilization of the method reporting the hot field\n+ * @param clazz pointer to the class where a hot field should be added/updated\n+ * @param fieldOffset value of the field offset that should be added/updated as a hot field for the given class\n+ * @param reducedFrequency normalized block frequency of the hot field for the method reporting the hot field\n+ */\n+void\n+reportHotField(J9JavaVM *javaVM, int32_t reducedCpuUtil, J9Class* clazz, U_8 fieldOffset,  U_32 reducedFrequency)\n+{\n+\t/* exit if pools are null */\n+\tif (NULL == clazz->classLoader->hotFieldPool || NULL == javaVM->hotFieldClassInfoPool) {\n+\t\treturn;\n+\t}\n+\n+\t/* If hotFieldsInfo pool element for the class does not exist already, create and initialize the class' hotFieldsInfo pool element\n+\t * otherwise, create/update the given hot field for the class \n+\t */\n+\tif (NULL == clazz->hotFieldsInfo) {\n+\t\tcreateClassHotFieldsInfo(javaVM, clazz, fieldOffset, reducedCpuUtil, reducedFrequency);\n+\t} else if (clazz->hotFieldsInfo->hotFieldListLength < MAX_HOT_FIELD_LIST_LENGTH) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3913bcde1e052f5f913075f7ee045c10a01aef4"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI3MDA2Nw==", "bodyText": "you can add a label here releaseMutex:", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r472270067", "createdAt": "2020-08-18T15:08:07Z", "author": {"login": "tajila"}, "path": "runtime/vm/resolvefield.cpp", "diffHunk": "@@ -578,6 +583,124 @@ addHiddenInstanceField(J9JavaVM *vm, const char *className, const char *fieldNam\n \treturn 0;\n }\n \n+/**\n+ * Report a hot field if the JIT has determined that the field has met appropriate thresholds to be determined a hot field. \n+ * Valid if dynamicBreadthFirstScanOrdering is enabled.\n+ *\n+ * @param javaVM[in] pointer to the J9JavaVM\n+ * @param reducedCpuUtil normalized cpu utilization of the method reporting the hot field\n+ * @param clazz pointer to the class where a hot field should be added/updated\n+ * @param fieldOffset value of the field offset that should be added/updated as a hot field for the given class\n+ * @param reducedFrequency normalized block frequency of the hot field for the method reporting the hot field\n+ */\n+void\n+reportHotField(J9JavaVM *javaVM, int32_t reducedCpuUtil, J9Class* clazz, U_8 fieldOffset,  U_32 reducedFrequency)\n+{\n+\t/* exit if pools are null */\n+\tif (NULL == clazz->classLoader->hotFieldPool || NULL == javaVM->hotFieldClassInfoPool) {\n+\t\treturn;\n+\t}\n+\n+\t/* If hotFieldsInfo pool element for the class does not exist already, create and initialize the class' hotFieldsInfo pool element\n+\t * otherwise, create/update the given hot field for the class \n+\t */\n+\tif (NULL == clazz->hotFieldsInfo) {\n+\t\tcreateClassHotFieldsInfo(javaVM, clazz, fieldOffset, reducedCpuUtil, reducedFrequency);\n+\t} else if (clazz->hotFieldsInfo->hotFieldListLength < MAX_HOT_FIELD_LIST_LENGTH) {\n+\t\taddOrUpdateHotField(clazz, fieldOffset, reducedCpuUtil, reducedFrequency);\n+\t}\n+}\n+\n+/**\n+ * Create and initialize a class' hotFieldsInfo pool element.\n+ * Valid if dynamicBreadthFirstScanOrdering is enabled.\n+ *\n+ * @param javaVM[in] pointer to the J9JavaVM\n+ * @param clazz pointer to the class where a hot field should be added\n+ * @param fieldOffset value of the field offset that should be added as a hot field for the given class\n+ * @param reducedCpuUtil normalized cpu utilization of the method reporting the hot field\n+ * @param reducedFrequency normalized block frequency of the hot field for the method reporting the hot field\n+ */\n+VMINLINE void\n+createClassHotFieldsInfo(J9JavaVM *javaVM, J9Class* clazz, U_8 fieldOffset, int32_t reducedCpuUtil, U_32 reducedFrequency)\n+{\n+\tomrthread_monitor_enter(javaVM->hotFieldClassInfoPoolMutex);\n+\tif (NULL == clazz->hotFieldsInfo) {\n+\t\t/* initialize new hotFieldsInfo pool element as it does not exist already */\n+\t\tclazz->hotFieldsInfo = (J9ClassHotFieldsInfo *)pool_newElement(javaVM->hotFieldClassInfoPool);\n+\t\tif (NULL == clazz->hotFieldsInfo) {\n+\t\t\tgoto exit;\n+\t\t}\n+\t\tclazz->hotFieldsInfo->hotFieldListLength = 0;\n+\t\tclazz->hotFieldsInfo->consecutiveHotFieldSelections = 0;\n+\t\tclazz->hotFieldsInfo->hotFieldOffset1 = U_8_MAX;\n+\t\tclazz->hotFieldsInfo->hotFieldOffset2 = U_8_MAX;\n+\t\t\n+\t\t/* create and initialize the new hot field */\n+\t\tomrthread_monitor_enter(clazz->classLoader->hotFieldPoolMutex);\n+\t\tJ9HotField* newHotField = (J9HotField *)pool_newElement(clazz->classLoader->hotFieldPool);\n+\t\tif(NULL == newHotField) {\n+\t\t\tomrthread_monitor_exit(clazz->classLoader->hotFieldPoolMutex);\n+\t\t\tgoto exit;\n+\t\t}\n+\t\tnewHotField->next = NULL;\n+\t\tnewHotField->hotFieldOffset = fieldOffset;\n+\t\tnewHotField->hotness = (reducedFrequency * reducedCpuUtil);\n+\t\tnewHotField->cpuUtil = reducedCpuUtil;\n+\t\tomrthread_monitor_exit(clazz->classLoader->hotFieldPoolMutex);\n+\t\t\n+\t\t/* update hotFieldsInfo for the class now that a new hot field has been added */\n+\t\tclazz->hotFieldsInfo->hotFieldListHead = newHotField;\n+\t\tclazz->hotFieldsInfo->isClassHotFieldListDirty = true;\n+\t\tclazz->hotFieldsInfo->hotFieldListLength++;\n+\t\tclazz->hotFieldsInfo->classLoader = clazz->classLoader;\n+\t}\n+\t\n+exit:\n+\tomrthread_monitor_exit(javaVM->hotFieldClassInfoPoolMutex);\n+}\n+\n+/**\n+ * Add or update an existing hot field for a given class.\n+ * Valid if dynamicBreadthFirstScanOrdering is enabled.\n+ *\n+ * @param clazz pointer to the class where a hot field should be added/updated\n+ * @param fieldOffset value of the field offset that should be added/updated as a hot field for the given class\n+ * @param reducedCpuUtil normalized cpu utilization of the method reporting the hot field\n+ * @param reducedFrequency normalized block frequency of the hot field for the method reporting the hot field\n+ */\n+VMINLINE void\n+addOrUpdateHotField(J9Class* clazz, U_8 fieldOffset, int32_t reducedCpuUtil, U_32 reducedFrequency)\n+{\n+\t/* Check if the hot field exists already */\n+\tJ9HotField* current;\n+\tcurrent = clazz->hotFieldsInfo->hotFieldListHead;\n+\tdo {\n+\t\tif (current->hotFieldOffset == fieldOffset) {\n+\t\t\tbreak;\n+\t\t}\n+\t\tcurrent = current->next;\n+\t} while (NULL != current);\n+\n+\t/* if the hot field does not exist, create and initialize the new hot field, otherwise, update the hot field with the newly reported hot field information */\n+\tomrthread_monitor_enter(clazz->classLoader->hotFieldPoolMutex);\n+\tif (current == NULL) {\n+\t\tcurrent = (J9HotField *)pool_newElement(clazz->classLoader->hotFieldPool);\n+\t\tif (NULL == current) {\n+\t\t\tomrthread_monitor_exit(clazz->classLoader->hotFieldPoolMutex);\n+\t\t\treturn;\n+\t\t}\n+\t\tclazz->hotFieldsInfo->hotFieldListLength++;\n+\t\tcurrent->hotFieldOffset = fieldOffset;\n+\t\tcurrent->next = NULL;\n+\t}\n+\n+\tcurrent->hotness += (reducedFrequency * reducedCpuUtil);\n+\tcurrent->cpuUtil += reducedCpuUtil;\n+\tclazz->hotFieldsInfo->isClassHotFieldListDirty = true;\n+\tomrthread_monitor_exit(clazz->classLoader->hotFieldPoolMutex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3913bcde1e052f5f913075f7ee045c10a01aef4"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI3MDI1NQ==", "bodyText": "instead of return you can jump to release", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r472270255", "createdAt": "2020-08-18T15:08:23Z", "author": {"login": "tajila"}, "path": "runtime/vm/resolvefield.cpp", "diffHunk": "@@ -578,6 +583,124 @@ addHiddenInstanceField(J9JavaVM *vm, const char *className, const char *fieldNam\n \treturn 0;\n }\n \n+/**\n+ * Report a hot field if the JIT has determined that the field has met appropriate thresholds to be determined a hot field. \n+ * Valid if dynamicBreadthFirstScanOrdering is enabled.\n+ *\n+ * @param javaVM[in] pointer to the J9JavaVM\n+ * @param reducedCpuUtil normalized cpu utilization of the method reporting the hot field\n+ * @param clazz pointer to the class where a hot field should be added/updated\n+ * @param fieldOffset value of the field offset that should be added/updated as a hot field for the given class\n+ * @param reducedFrequency normalized block frequency of the hot field for the method reporting the hot field\n+ */\n+void\n+reportHotField(J9JavaVM *javaVM, int32_t reducedCpuUtil, J9Class* clazz, U_8 fieldOffset,  U_32 reducedFrequency)\n+{\n+\t/* exit if pools are null */\n+\tif (NULL == clazz->classLoader->hotFieldPool || NULL == javaVM->hotFieldClassInfoPool) {\n+\t\treturn;\n+\t}\n+\n+\t/* If hotFieldsInfo pool element for the class does not exist already, create and initialize the class' hotFieldsInfo pool element\n+\t * otherwise, create/update the given hot field for the class \n+\t */\n+\tif (NULL == clazz->hotFieldsInfo) {\n+\t\tcreateClassHotFieldsInfo(javaVM, clazz, fieldOffset, reducedCpuUtil, reducedFrequency);\n+\t} else if (clazz->hotFieldsInfo->hotFieldListLength < MAX_HOT_FIELD_LIST_LENGTH) {\n+\t\taddOrUpdateHotField(clazz, fieldOffset, reducedCpuUtil, reducedFrequency);\n+\t}\n+}\n+\n+/**\n+ * Create and initialize a class' hotFieldsInfo pool element.\n+ * Valid if dynamicBreadthFirstScanOrdering is enabled.\n+ *\n+ * @param javaVM[in] pointer to the J9JavaVM\n+ * @param clazz pointer to the class where a hot field should be added\n+ * @param fieldOffset value of the field offset that should be added as a hot field for the given class\n+ * @param reducedCpuUtil normalized cpu utilization of the method reporting the hot field\n+ * @param reducedFrequency normalized block frequency of the hot field for the method reporting the hot field\n+ */\n+VMINLINE void\n+createClassHotFieldsInfo(J9JavaVM *javaVM, J9Class* clazz, U_8 fieldOffset, int32_t reducedCpuUtil, U_32 reducedFrequency)\n+{\n+\tomrthread_monitor_enter(javaVM->hotFieldClassInfoPoolMutex);\n+\tif (NULL == clazz->hotFieldsInfo) {\n+\t\t/* initialize new hotFieldsInfo pool element as it does not exist already */\n+\t\tclazz->hotFieldsInfo = (J9ClassHotFieldsInfo *)pool_newElement(javaVM->hotFieldClassInfoPool);\n+\t\tif (NULL == clazz->hotFieldsInfo) {\n+\t\t\tgoto exit;\n+\t\t}\n+\t\tclazz->hotFieldsInfo->hotFieldListLength = 0;\n+\t\tclazz->hotFieldsInfo->consecutiveHotFieldSelections = 0;\n+\t\tclazz->hotFieldsInfo->hotFieldOffset1 = U_8_MAX;\n+\t\tclazz->hotFieldsInfo->hotFieldOffset2 = U_8_MAX;\n+\t\t\n+\t\t/* create and initialize the new hot field */\n+\t\tomrthread_monitor_enter(clazz->classLoader->hotFieldPoolMutex);\n+\t\tJ9HotField* newHotField = (J9HotField *)pool_newElement(clazz->classLoader->hotFieldPool);\n+\t\tif(NULL == newHotField) {\n+\t\t\tomrthread_monitor_exit(clazz->classLoader->hotFieldPoolMutex);\n+\t\t\tgoto exit;\n+\t\t}\n+\t\tnewHotField->next = NULL;\n+\t\tnewHotField->hotFieldOffset = fieldOffset;\n+\t\tnewHotField->hotness = (reducedFrequency * reducedCpuUtil);\n+\t\tnewHotField->cpuUtil = reducedCpuUtil;\n+\t\tomrthread_monitor_exit(clazz->classLoader->hotFieldPoolMutex);\n+\t\t\n+\t\t/* update hotFieldsInfo for the class now that a new hot field has been added */\n+\t\tclazz->hotFieldsInfo->hotFieldListHead = newHotField;\n+\t\tclazz->hotFieldsInfo->isClassHotFieldListDirty = true;\n+\t\tclazz->hotFieldsInfo->hotFieldListLength++;\n+\t\tclazz->hotFieldsInfo->classLoader = clazz->classLoader;\n+\t}\n+\t\n+exit:\n+\tomrthread_monitor_exit(javaVM->hotFieldClassInfoPoolMutex);\n+}\n+\n+/**\n+ * Add or update an existing hot field for a given class.\n+ * Valid if dynamicBreadthFirstScanOrdering is enabled.\n+ *\n+ * @param clazz pointer to the class where a hot field should be added/updated\n+ * @param fieldOffset value of the field offset that should be added/updated as a hot field for the given class\n+ * @param reducedCpuUtil normalized cpu utilization of the method reporting the hot field\n+ * @param reducedFrequency normalized block frequency of the hot field for the method reporting the hot field\n+ */\n+VMINLINE void\n+addOrUpdateHotField(J9Class* clazz, U_8 fieldOffset, int32_t reducedCpuUtil, U_32 reducedFrequency)\n+{\n+\t/* Check if the hot field exists already */\n+\tJ9HotField* current;\n+\tcurrent = clazz->hotFieldsInfo->hotFieldListHead;\n+\tdo {\n+\t\tif (current->hotFieldOffset == fieldOffset) {\n+\t\t\tbreak;\n+\t\t}\n+\t\tcurrent = current->next;\n+\t} while (NULL != current);\n+\n+\t/* if the hot field does not exist, create and initialize the new hot field, otherwise, update the hot field with the newly reported hot field information */\n+\tomrthread_monitor_enter(clazz->classLoader->hotFieldPoolMutex);\n+\tif (current == NULL) {\n+\t\tcurrent = (J9HotField *)pool_newElement(clazz->classLoader->hotFieldPool);\n+\t\tif (NULL == current) {\n+\t\t\tomrthread_monitor_exit(clazz->classLoader->hotFieldPoolMutex);\n+\t\t\treturn;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3913bcde1e052f5f913075f7ee045c10a01aef4"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI3MjU5NQ==", "bodyText": "same thing here, I would remove this code. Just make sure addOrUpdateHotField is called after", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r472272595", "createdAt": "2020-08-18T15:11:47Z", "author": {"login": "tajila"}, "path": "runtime/vm/resolvefield.cpp", "diffHunk": "@@ -578,6 +583,124 @@ addHiddenInstanceField(J9JavaVM *vm, const char *className, const char *fieldNam\n \treturn 0;\n }\n \n+/**\n+ * Report a hot field if the JIT has determined that the field has met appropriate thresholds to be determined a hot field. \n+ * Valid if dynamicBreadthFirstScanOrdering is enabled.\n+ *\n+ * @param javaVM[in] pointer to the J9JavaVM\n+ * @param reducedCpuUtil normalized cpu utilization of the method reporting the hot field\n+ * @param clazz pointer to the class where a hot field should be added/updated\n+ * @param fieldOffset value of the field offset that should be added/updated as a hot field for the given class\n+ * @param reducedFrequency normalized block frequency of the hot field for the method reporting the hot field\n+ */\n+void\n+reportHotField(J9JavaVM *javaVM, int32_t reducedCpuUtil, J9Class* clazz, U_8 fieldOffset,  U_32 reducedFrequency)\n+{\n+\t/* exit if pools are null */\n+\tif (NULL == clazz->classLoader->hotFieldPool || NULL == javaVM->hotFieldClassInfoPool) {\n+\t\treturn;\n+\t}\n+\n+\t/* If hotFieldsInfo pool element for the class does not exist already, create and initialize the class' hotFieldsInfo pool element\n+\t * otherwise, create/update the given hot field for the class \n+\t */\n+\tif (NULL == clazz->hotFieldsInfo) {\n+\t\tcreateClassHotFieldsInfo(javaVM, clazz, fieldOffset, reducedCpuUtil, reducedFrequency);\n+\t} else if (clazz->hotFieldsInfo->hotFieldListLength < MAX_HOT_FIELD_LIST_LENGTH) {\n+\t\taddOrUpdateHotField(clazz, fieldOffset, reducedCpuUtil, reducedFrequency);\n+\t}\n+}\n+\n+/**\n+ * Create and initialize a class' hotFieldsInfo pool element.\n+ * Valid if dynamicBreadthFirstScanOrdering is enabled.\n+ *\n+ * @param javaVM[in] pointer to the J9JavaVM\n+ * @param clazz pointer to the class where a hot field should be added\n+ * @param fieldOffset value of the field offset that should be added as a hot field for the given class\n+ * @param reducedCpuUtil normalized cpu utilization of the method reporting the hot field\n+ * @param reducedFrequency normalized block frequency of the hot field for the method reporting the hot field\n+ */\n+VMINLINE void\n+createClassHotFieldsInfo(J9JavaVM *javaVM, J9Class* clazz, U_8 fieldOffset, int32_t reducedCpuUtil, U_32 reducedFrequency)\n+{\n+\tomrthread_monitor_enter(javaVM->hotFieldClassInfoPoolMutex);\n+\tif (NULL == clazz->hotFieldsInfo) {\n+\t\t/* initialize new hotFieldsInfo pool element as it does not exist already */\n+\t\tclazz->hotFieldsInfo = (J9ClassHotFieldsInfo *)pool_newElement(javaVM->hotFieldClassInfoPool);\n+\t\tif (NULL == clazz->hotFieldsInfo) {\n+\t\t\tgoto exit;\n+\t\t}\n+\t\tclazz->hotFieldsInfo->hotFieldListLength = 0;\n+\t\tclazz->hotFieldsInfo->consecutiveHotFieldSelections = 0;\n+\t\tclazz->hotFieldsInfo->hotFieldOffset1 = U_8_MAX;\n+\t\tclazz->hotFieldsInfo->hotFieldOffset2 = U_8_MAX;\n+\t\t\n+\t\t/* create and initialize the new hot field */\n+\t\tomrthread_monitor_enter(clazz->classLoader->hotFieldPoolMutex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3913bcde1e052f5f913075f7ee045c10a01aef4"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI4MDEwMg==", "bodyText": "you  should return a success/failure return code, if this fails do not attempt addOrUpdateHotField", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r472280102", "createdAt": "2020-08-18T15:22:18Z", "author": {"login": "tajila"}, "path": "runtime/vm/resolvefield.cpp", "diffHunk": "@@ -578,6 +583,124 @@ addHiddenInstanceField(J9JavaVM *vm, const char *className, const char *fieldNam\n \treturn 0;\n }\n \n+/**\n+ * Report a hot field if the JIT has determined that the field has met appropriate thresholds to be determined a hot field. \n+ * Valid if dynamicBreadthFirstScanOrdering is enabled.\n+ *\n+ * @param javaVM[in] pointer to the J9JavaVM\n+ * @param reducedCpuUtil normalized cpu utilization of the method reporting the hot field\n+ * @param clazz pointer to the class where a hot field should be added/updated\n+ * @param fieldOffset value of the field offset that should be added/updated as a hot field for the given class\n+ * @param reducedFrequency normalized block frequency of the hot field for the method reporting the hot field\n+ */\n+void\n+reportHotField(J9JavaVM *javaVM, int32_t reducedCpuUtil, J9Class* clazz, U_8 fieldOffset,  U_32 reducedFrequency)\n+{\n+\t/* exit if pools are null */\n+\tif (NULL == clazz->classLoader->hotFieldPool || NULL == javaVM->hotFieldClassInfoPool) {\n+\t\treturn;\n+\t}\n+\n+\t/* If hotFieldsInfo pool element for the class does not exist already, create and initialize the class' hotFieldsInfo pool element\n+\t * otherwise, create/update the given hot field for the class \n+\t */\n+\tif (NULL == clazz->hotFieldsInfo) {\n+\t\tcreateClassHotFieldsInfo(javaVM, clazz, fieldOffset, reducedCpuUtil, reducedFrequency);\n+\t} else if (clazz->hotFieldsInfo->hotFieldListLength < MAX_HOT_FIELD_LIST_LENGTH) {\n+\t\taddOrUpdateHotField(clazz, fieldOffset, reducedCpuUtil, reducedFrequency);\n+\t}\n+}\n+\n+/**\n+ * Create and initialize a class' hotFieldsInfo pool element.\n+ * Valid if dynamicBreadthFirstScanOrdering is enabled.\n+ *\n+ * @param javaVM[in] pointer to the J9JavaVM\n+ * @param clazz pointer to the class where a hot field should be added\n+ * @param fieldOffset value of the field offset that should be added as a hot field for the given class\n+ * @param reducedCpuUtil normalized cpu utilization of the method reporting the hot field\n+ * @param reducedFrequency normalized block frequency of the hot field for the method reporting the hot field\n+ */\n+VMINLINE void", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3913bcde1e052f5f913075f7ee045c10a01aef4"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI4MDI4Mg==", "bodyText": "should set err return code", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r472280282", "createdAt": "2020-08-18T15:22:33Z", "author": {"login": "tajila"}, "path": "runtime/vm/resolvefield.cpp", "diffHunk": "@@ -578,6 +583,124 @@ addHiddenInstanceField(J9JavaVM *vm, const char *className, const char *fieldNam\n \treturn 0;\n }\n \n+/**\n+ * Report a hot field if the JIT has determined that the field has met appropriate thresholds to be determined a hot field. \n+ * Valid if dynamicBreadthFirstScanOrdering is enabled.\n+ *\n+ * @param javaVM[in] pointer to the J9JavaVM\n+ * @param reducedCpuUtil normalized cpu utilization of the method reporting the hot field\n+ * @param clazz pointer to the class where a hot field should be added/updated\n+ * @param fieldOffset value of the field offset that should be added/updated as a hot field for the given class\n+ * @param reducedFrequency normalized block frequency of the hot field for the method reporting the hot field\n+ */\n+void\n+reportHotField(J9JavaVM *javaVM, int32_t reducedCpuUtil, J9Class* clazz, U_8 fieldOffset,  U_32 reducedFrequency)\n+{\n+\t/* exit if pools are null */\n+\tif (NULL == clazz->classLoader->hotFieldPool || NULL == javaVM->hotFieldClassInfoPool) {\n+\t\treturn;\n+\t}\n+\n+\t/* If hotFieldsInfo pool element for the class does not exist already, create and initialize the class' hotFieldsInfo pool element\n+\t * otherwise, create/update the given hot field for the class \n+\t */\n+\tif (NULL == clazz->hotFieldsInfo) {\n+\t\tcreateClassHotFieldsInfo(javaVM, clazz, fieldOffset, reducedCpuUtil, reducedFrequency);\n+\t} else if (clazz->hotFieldsInfo->hotFieldListLength < MAX_HOT_FIELD_LIST_LENGTH) {\n+\t\taddOrUpdateHotField(clazz, fieldOffset, reducedCpuUtil, reducedFrequency);\n+\t}\n+}\n+\n+/**\n+ * Create and initialize a class' hotFieldsInfo pool element.\n+ * Valid if dynamicBreadthFirstScanOrdering is enabled.\n+ *\n+ * @param javaVM[in] pointer to the J9JavaVM\n+ * @param clazz pointer to the class where a hot field should be added\n+ * @param fieldOffset value of the field offset that should be added as a hot field for the given class\n+ * @param reducedCpuUtil normalized cpu utilization of the method reporting the hot field\n+ * @param reducedFrequency normalized block frequency of the hot field for the method reporting the hot field\n+ */\n+VMINLINE void\n+createClassHotFieldsInfo(J9JavaVM *javaVM, J9Class* clazz, U_8 fieldOffset, int32_t reducedCpuUtil, U_32 reducedFrequency)\n+{\n+\tomrthread_monitor_enter(javaVM->hotFieldClassInfoPoolMutex);\n+\tif (NULL == clazz->hotFieldsInfo) {\n+\t\t/* initialize new hotFieldsInfo pool element as it does not exist already */\n+\t\tclazz->hotFieldsInfo = (J9ClassHotFieldsInfo *)pool_newElement(javaVM->hotFieldClassInfoPool);\n+\t\tif (NULL == clazz->hotFieldsInfo) {\n+\t\t\tgoto exit;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3913bcde1e052f5f913075f7ee045c10a01aef4"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI4MTI4NQ==", "bodyText": "might be worth to return a success/err return code here as well. This way you can propogate the err to the JIT thread if you decide to do something with that info (ie. how does JIT deal with alloc failures).\nAll allocation failures should set the err.", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r472281285", "createdAt": "2020-08-18T15:23:48Z", "author": {"login": "tajila"}, "path": "runtime/vm/resolvefield.cpp", "diffHunk": "@@ -578,6 +583,124 @@ addHiddenInstanceField(J9JavaVM *vm, const char *className, const char *fieldNam\n \treturn 0;\n }\n \n+/**\n+ * Report a hot field if the JIT has determined that the field has met appropriate thresholds to be determined a hot field. \n+ * Valid if dynamicBreadthFirstScanOrdering is enabled.\n+ *\n+ * @param javaVM[in] pointer to the J9JavaVM\n+ * @param reducedCpuUtil normalized cpu utilization of the method reporting the hot field\n+ * @param clazz pointer to the class where a hot field should be added/updated\n+ * @param fieldOffset value of the field offset that should be added/updated as a hot field for the given class\n+ * @param reducedFrequency normalized block frequency of the hot field for the method reporting the hot field\n+ */\n+void\n+reportHotField(J9JavaVM *javaVM, int32_t reducedCpuUtil, J9Class* clazz, U_8 fieldOffset,  U_32 reducedFrequency)\n+{\n+\t/* exit if pools are null */\n+\tif (NULL == clazz->classLoader->hotFieldPool || NULL == javaVM->hotFieldClassInfoPool) {\n+\t\treturn;\n+\t}\n+\n+\t/* If hotFieldsInfo pool element for the class does not exist already, create and initialize the class' hotFieldsInfo pool element\n+\t * otherwise, create/update the given hot field for the class \n+\t */\n+\tif (NULL == clazz->hotFieldsInfo) {\n+\t\tcreateClassHotFieldsInfo(javaVM, clazz, fieldOffset, reducedCpuUtil, reducedFrequency);\n+\t} else if (clazz->hotFieldsInfo->hotFieldListLength < MAX_HOT_FIELD_LIST_LENGTH) {\n+\t\taddOrUpdateHotField(clazz, fieldOffset, reducedCpuUtil, reducedFrequency);\n+\t}\n+}\n+\n+/**\n+ * Create and initialize a class' hotFieldsInfo pool element.\n+ * Valid if dynamicBreadthFirstScanOrdering is enabled.\n+ *\n+ * @param javaVM[in] pointer to the J9JavaVM\n+ * @param clazz pointer to the class where a hot field should be added\n+ * @param fieldOffset value of the field offset that should be added as a hot field for the given class\n+ * @param reducedCpuUtil normalized cpu utilization of the method reporting the hot field\n+ * @param reducedFrequency normalized block frequency of the hot field for the method reporting the hot field\n+ */\n+VMINLINE void\n+createClassHotFieldsInfo(J9JavaVM *javaVM, J9Class* clazz, U_8 fieldOffset, int32_t reducedCpuUtil, U_32 reducedFrequency)\n+{\n+\tomrthread_monitor_enter(javaVM->hotFieldClassInfoPoolMutex);\n+\tif (NULL == clazz->hotFieldsInfo) {\n+\t\t/* initialize new hotFieldsInfo pool element as it does not exist already */\n+\t\tclazz->hotFieldsInfo = (J9ClassHotFieldsInfo *)pool_newElement(javaVM->hotFieldClassInfoPool);\n+\t\tif (NULL == clazz->hotFieldsInfo) {\n+\t\t\tgoto exit;\n+\t\t}\n+\t\tclazz->hotFieldsInfo->hotFieldListLength = 0;\n+\t\tclazz->hotFieldsInfo->consecutiveHotFieldSelections = 0;\n+\t\tclazz->hotFieldsInfo->hotFieldOffset1 = U_8_MAX;\n+\t\tclazz->hotFieldsInfo->hotFieldOffset2 = U_8_MAX;\n+\t\t\n+\t\t/* create and initialize the new hot field */\n+\t\tomrthread_monitor_enter(clazz->classLoader->hotFieldPoolMutex);\n+\t\tJ9HotField* newHotField = (J9HotField *)pool_newElement(clazz->classLoader->hotFieldPool);\n+\t\tif(NULL == newHotField) {\n+\t\t\tomrthread_monitor_exit(clazz->classLoader->hotFieldPoolMutex);\n+\t\t\tgoto exit;\n+\t\t}\n+\t\tnewHotField->next = NULL;\n+\t\tnewHotField->hotFieldOffset = fieldOffset;\n+\t\tnewHotField->hotness = (reducedFrequency * reducedCpuUtil);\n+\t\tnewHotField->cpuUtil = reducedCpuUtil;\n+\t\tomrthread_monitor_exit(clazz->classLoader->hotFieldPoolMutex);\n+\t\t\n+\t\t/* update hotFieldsInfo for the class now that a new hot field has been added */\n+\t\tclazz->hotFieldsInfo->hotFieldListHead = newHotField;\n+\t\tclazz->hotFieldsInfo->isClassHotFieldListDirty = true;\n+\t\tclazz->hotFieldsInfo->hotFieldListLength++;\n+\t\tclazz->hotFieldsInfo->classLoader = clazz->classLoader;\n+\t}\n+\t\n+exit:\n+\tomrthread_monitor_exit(javaVM->hotFieldClassInfoPoolMutex);\n+}\n+\n+/**\n+ * Add or update an existing hot field for a given class.\n+ * Valid if dynamicBreadthFirstScanOrdering is enabled.\n+ *\n+ * @param clazz pointer to the class where a hot field should be added/updated\n+ * @param fieldOffset value of the field offset that should be added/updated as a hot field for the given class\n+ * @param reducedCpuUtil normalized cpu utilization of the method reporting the hot field\n+ * @param reducedFrequency normalized block frequency of the hot field for the method reporting the hot field\n+ */\n+VMINLINE void", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3913bcde1e052f5f913075f7ee045c10a01aef4"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI4MTczMA==", "bodyText": "???", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r472281730", "createdAt": "2020-08-18T15:24:23Z", "author": {"login": "tajila"}, "path": "runtime/vm/classallocation.c", "diffHunk": "@@ -173,6 +173,18 @@ allocateClassLoader(J9JavaVM *javaVM)\n \t\t/* memset not required as the classLoaderBlocks pool returns zero'd memory */\n \n \t\tclassLoader->classHashTable = hashClassTableNew(javaVM, INITIAL_CLASSHASHTABLE_SIZE);\n+\t\t\n+\t\t/* Create classloader hot field pool and monitor if scavenger dynamicBreadthFirstScanOrdering is enabled */\n+\t\tif(javaVM->memoryManagerFunctions->j9gc_hot_reference_field_required(javaVM)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAzODgzOA=="}, "originalCommit": {"oid": "59a99371ed2d46bffa2d1a6987a1bc6fdcd93a8d"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5NjY3NjEy", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#pullrequestreview-469667612", "createdAt": "2020-08-18T17:21:27Z", "commit": {"oid": "b3913bcde1e052f5f913075f7ee045c10a01aef4"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNzoyMToyN1rOHCegWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNzoyNDoyMVrOHCenEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM1OTAwMQ==", "bodyText": "Strictly speaking, you only need the hotFieldClassInfoPoolMutex  for allocating the  hotFieldsInfo. As long as hotFieldListHead is only ever updated while hotFieldPoolMutex is held then there is no problem setting hotFieldListHead in addOrUpdateHotField without acquiring hotFieldClassInfoPoolMutex.", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r472359001", "createdAt": "2020-08-18T17:21:27Z", "author": {"login": "tajila"}, "path": "runtime/vm/resolvefield.cpp", "diffHunk": "@@ -578,6 +583,124 @@ addHiddenInstanceField(J9JavaVM *vm, const char *className, const char *fieldNam\n \treturn 0;\n }\n \n+/**\n+ * Report a hot field if the JIT has determined that the field has met appropriate thresholds to be determined a hot field. \n+ * Valid if dynamicBreadthFirstScanOrdering is enabled.\n+ *\n+ * @param javaVM[in] pointer to the J9JavaVM\n+ * @param reducedCpuUtil normalized cpu utilization of the method reporting the hot field\n+ * @param clazz pointer to the class where a hot field should be added/updated\n+ * @param fieldOffset value of the field offset that should be added/updated as a hot field for the given class\n+ * @param reducedFrequency normalized block frequency of the hot field for the method reporting the hot field\n+ */\n+void\n+reportHotField(J9JavaVM *javaVM, int32_t reducedCpuUtil, J9Class* clazz, U_8 fieldOffset,  U_32 reducedFrequency)\n+{\n+\t/* exit if pools are null */\n+\tif (NULL == clazz->classLoader->hotFieldPool || NULL == javaVM->hotFieldClassInfoPool) {\n+\t\treturn;\n+\t}\n+\n+\t/* If hotFieldsInfo pool element for the class does not exist already, create and initialize the class' hotFieldsInfo pool element\n+\t * otherwise, create/update the given hot field for the class \n+\t */\n+\tif (NULL == clazz->hotFieldsInfo) {\n+\t\tcreateClassHotFieldsInfo(javaVM, clazz, fieldOffset, reducedCpuUtil, reducedFrequency);\n+\t} else if (clazz->hotFieldsInfo->hotFieldListLength < MAX_HOT_FIELD_LIST_LENGTH) {\n+\t\taddOrUpdateHotField(clazz, fieldOffset, reducedCpuUtil, reducedFrequency);\n+\t}\n+}\n+\n+/**\n+ * Create and initialize a class' hotFieldsInfo pool element.\n+ * Valid if dynamicBreadthFirstScanOrdering is enabled.\n+ *\n+ * @param javaVM[in] pointer to the J9JavaVM\n+ * @param clazz pointer to the class where a hot field should be added\n+ * @param fieldOffset value of the field offset that should be added as a hot field for the given class\n+ * @param reducedCpuUtil normalized cpu utilization of the method reporting the hot field\n+ * @param reducedFrequency normalized block frequency of the hot field for the method reporting the hot field\n+ */\n+VMINLINE void\n+createClassHotFieldsInfo(J9JavaVM *javaVM, J9Class* clazz, U_8 fieldOffset, int32_t reducedCpuUtil, U_32 reducedFrequency)\n+{\n+\tomrthread_monitor_enter(javaVM->hotFieldClassInfoPoolMutex);\n+\tif (NULL == clazz->hotFieldsInfo) {\n+\t\t/* initialize new hotFieldsInfo pool element as it does not exist already */\n+\t\tclazz->hotFieldsInfo = (J9ClassHotFieldsInfo *)pool_newElement(javaVM->hotFieldClassInfoPool);\n+\t\tif (NULL == clazz->hotFieldsInfo) {\n+\t\t\tgoto exit;\n+\t\t}\n+\t\tclazz->hotFieldsInfo->hotFieldListLength = 0;\n+\t\tclazz->hotFieldsInfo->consecutiveHotFieldSelections = 0;\n+\t\tclazz->hotFieldsInfo->hotFieldOffset1 = U_8_MAX;\n+\t\tclazz->hotFieldsInfo->hotFieldOffset2 = U_8_MAX;\n+\t\t\n+\t\t/* create and initialize the new hot field */\n+\t\tomrthread_monitor_enter(clazz->classLoader->hotFieldPoolMutex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI3MjU5NQ=="}, "originalCommit": {"oid": "b3913bcde1e052f5f913075f7ee045c10a01aef4"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM2MDA0NA==", "bodyText": "you still need previous because when you are allocating a new one you need to add it to the list", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r472360044", "createdAt": "2020-08-18T17:23:11Z", "author": {"login": "tajila"}, "path": "runtime/vm/resolvefield.cpp", "diffHunk": "@@ -578,6 +583,124 @@ addHiddenInstanceField(J9JavaVM *vm, const char *className, const char *fieldNam\n \treturn 0;\n }\n \n+/**\n+ * Report a hot field if the JIT has determined that the field has met appropriate thresholds to be determined a hot field. \n+ * Valid if dynamicBreadthFirstScanOrdering is enabled.\n+ *\n+ * @param javaVM[in] pointer to the J9JavaVM\n+ * @param reducedCpuUtil normalized cpu utilization of the method reporting the hot field\n+ * @param clazz pointer to the class where a hot field should be added/updated\n+ * @param fieldOffset value of the field offset that should be added/updated as a hot field for the given class\n+ * @param reducedFrequency normalized block frequency of the hot field for the method reporting the hot field\n+ */\n+void\n+reportHotField(J9JavaVM *javaVM, int32_t reducedCpuUtil, J9Class* clazz, U_8 fieldOffset,  U_32 reducedFrequency)\n+{\n+\t/* exit if pools are null */\n+\tif (NULL == clazz->classLoader->hotFieldPool || NULL == javaVM->hotFieldClassInfoPool) {\n+\t\treturn;\n+\t}\n+\n+\t/* If hotFieldsInfo pool element for the class does not exist already, create and initialize the class' hotFieldsInfo pool element\n+\t * otherwise, create/update the given hot field for the class \n+\t */\n+\tif (NULL == clazz->hotFieldsInfo) {\n+\t\tcreateClassHotFieldsInfo(javaVM, clazz, fieldOffset, reducedCpuUtil, reducedFrequency);\n+\t} else if (clazz->hotFieldsInfo->hotFieldListLength < MAX_HOT_FIELD_LIST_LENGTH) {\n+\t\taddOrUpdateHotField(clazz, fieldOffset, reducedCpuUtil, reducedFrequency);\n+\t}\n+}\n+\n+/**\n+ * Create and initialize a class' hotFieldsInfo pool element.\n+ * Valid if dynamicBreadthFirstScanOrdering is enabled.\n+ *\n+ * @param javaVM[in] pointer to the J9JavaVM\n+ * @param clazz pointer to the class where a hot field should be added\n+ * @param fieldOffset value of the field offset that should be added as a hot field for the given class\n+ * @param reducedCpuUtil normalized cpu utilization of the method reporting the hot field\n+ * @param reducedFrequency normalized block frequency of the hot field for the method reporting the hot field\n+ */\n+VMINLINE void\n+createClassHotFieldsInfo(J9JavaVM *javaVM, J9Class* clazz, U_8 fieldOffset, int32_t reducedCpuUtil, U_32 reducedFrequency)\n+{\n+\tomrthread_monitor_enter(javaVM->hotFieldClassInfoPoolMutex);\n+\tif (NULL == clazz->hotFieldsInfo) {\n+\t\t/* initialize new hotFieldsInfo pool element as it does not exist already */\n+\t\tclazz->hotFieldsInfo = (J9ClassHotFieldsInfo *)pool_newElement(javaVM->hotFieldClassInfoPool);\n+\t\tif (NULL == clazz->hotFieldsInfo) {\n+\t\t\tgoto exit;\n+\t\t}\n+\t\tclazz->hotFieldsInfo->hotFieldListLength = 0;\n+\t\tclazz->hotFieldsInfo->consecutiveHotFieldSelections = 0;\n+\t\tclazz->hotFieldsInfo->hotFieldOffset1 = U_8_MAX;\n+\t\tclazz->hotFieldsInfo->hotFieldOffset2 = U_8_MAX;\n+\t\t\n+\t\t/* create and initialize the new hot field */\n+\t\tomrthread_monitor_enter(clazz->classLoader->hotFieldPoolMutex);\n+\t\tJ9HotField* newHotField = (J9HotField *)pool_newElement(clazz->classLoader->hotFieldPool);\n+\t\tif(NULL == newHotField) {\n+\t\t\tomrthread_monitor_exit(clazz->classLoader->hotFieldPoolMutex);\n+\t\t\tgoto exit;\n+\t\t}\n+\t\tnewHotField->next = NULL;\n+\t\tnewHotField->hotFieldOffset = fieldOffset;\n+\t\tnewHotField->hotness = (reducedFrequency * reducedCpuUtil);\n+\t\tnewHotField->cpuUtil = reducedCpuUtil;\n+\t\tomrthread_monitor_exit(clazz->classLoader->hotFieldPoolMutex);\n+\t\t\n+\t\t/* update hotFieldsInfo for the class now that a new hot field has been added */\n+\t\tclazz->hotFieldsInfo->hotFieldListHead = newHotField;\n+\t\tclazz->hotFieldsInfo->isClassHotFieldListDirty = true;\n+\t\tclazz->hotFieldsInfo->hotFieldListLength++;\n+\t\tclazz->hotFieldsInfo->classLoader = clazz->classLoader;\n+\t}\n+\t\n+exit:\n+\tomrthread_monitor_exit(javaVM->hotFieldClassInfoPoolMutex);\n+}\n+\n+/**\n+ * Add or update an existing hot field for a given class.\n+ * Valid if dynamicBreadthFirstScanOrdering is enabled.\n+ *\n+ * @param clazz pointer to the class where a hot field should be added/updated\n+ * @param fieldOffset value of the field offset that should be added/updated as a hot field for the given class\n+ * @param reducedCpuUtil normalized cpu utilization of the method reporting the hot field\n+ * @param reducedFrequency normalized block frequency of the hot field for the method reporting the hot field\n+ */\n+VMINLINE void\n+addOrUpdateHotField(J9Class* clazz, U_8 fieldOffset, int32_t reducedCpuUtil, U_32 reducedFrequency)\n+{\n+\t/* Check if the hot field exists already */\n+\tJ9HotField* current;\n+\tcurrent = clazz->hotFieldsInfo->hotFieldListHead;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3913bcde1e052f5f913075f7ee045c10a01aef4"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM2MDcyMQ==", "bodyText": "if previous is NULL, that is a signal that you need to set the hotFieldListHead instead", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r472360721", "createdAt": "2020-08-18T17:24:21Z", "author": {"login": "tajila"}, "path": "runtime/vm/resolvefield.cpp", "diffHunk": "@@ -578,6 +583,124 @@ addHiddenInstanceField(J9JavaVM *vm, const char *className, const char *fieldNam\n \treturn 0;\n }\n \n+/**\n+ * Report a hot field if the JIT has determined that the field has met appropriate thresholds to be determined a hot field. \n+ * Valid if dynamicBreadthFirstScanOrdering is enabled.\n+ *\n+ * @param javaVM[in] pointer to the J9JavaVM\n+ * @param reducedCpuUtil normalized cpu utilization of the method reporting the hot field\n+ * @param clazz pointer to the class where a hot field should be added/updated\n+ * @param fieldOffset value of the field offset that should be added/updated as a hot field for the given class\n+ * @param reducedFrequency normalized block frequency of the hot field for the method reporting the hot field\n+ */\n+void\n+reportHotField(J9JavaVM *javaVM, int32_t reducedCpuUtil, J9Class* clazz, U_8 fieldOffset,  U_32 reducedFrequency)\n+{\n+\t/* exit if pools are null */\n+\tif (NULL == clazz->classLoader->hotFieldPool || NULL == javaVM->hotFieldClassInfoPool) {\n+\t\treturn;\n+\t}\n+\n+\t/* If hotFieldsInfo pool element for the class does not exist already, create and initialize the class' hotFieldsInfo pool element\n+\t * otherwise, create/update the given hot field for the class \n+\t */\n+\tif (NULL == clazz->hotFieldsInfo) {\n+\t\tcreateClassHotFieldsInfo(javaVM, clazz, fieldOffset, reducedCpuUtil, reducedFrequency);\n+\t} else if (clazz->hotFieldsInfo->hotFieldListLength < MAX_HOT_FIELD_LIST_LENGTH) {\n+\t\taddOrUpdateHotField(clazz, fieldOffset, reducedCpuUtil, reducedFrequency);\n+\t}\n+}\n+\n+/**\n+ * Create and initialize a class' hotFieldsInfo pool element.\n+ * Valid if dynamicBreadthFirstScanOrdering is enabled.\n+ *\n+ * @param javaVM[in] pointer to the J9JavaVM\n+ * @param clazz pointer to the class where a hot field should be added\n+ * @param fieldOffset value of the field offset that should be added as a hot field for the given class\n+ * @param reducedCpuUtil normalized cpu utilization of the method reporting the hot field\n+ * @param reducedFrequency normalized block frequency of the hot field for the method reporting the hot field\n+ */\n+VMINLINE void\n+createClassHotFieldsInfo(J9JavaVM *javaVM, J9Class* clazz, U_8 fieldOffset, int32_t reducedCpuUtil, U_32 reducedFrequency)\n+{\n+\tomrthread_monitor_enter(javaVM->hotFieldClassInfoPoolMutex);\n+\tif (NULL == clazz->hotFieldsInfo) {\n+\t\t/* initialize new hotFieldsInfo pool element as it does not exist already */\n+\t\tclazz->hotFieldsInfo = (J9ClassHotFieldsInfo *)pool_newElement(javaVM->hotFieldClassInfoPool);\n+\t\tif (NULL == clazz->hotFieldsInfo) {\n+\t\t\tgoto exit;\n+\t\t}\n+\t\tclazz->hotFieldsInfo->hotFieldListLength = 0;\n+\t\tclazz->hotFieldsInfo->consecutiveHotFieldSelections = 0;\n+\t\tclazz->hotFieldsInfo->hotFieldOffset1 = U_8_MAX;\n+\t\tclazz->hotFieldsInfo->hotFieldOffset2 = U_8_MAX;\n+\t\t\n+\t\t/* create and initialize the new hot field */\n+\t\tomrthread_monitor_enter(clazz->classLoader->hotFieldPoolMutex);\n+\t\tJ9HotField* newHotField = (J9HotField *)pool_newElement(clazz->classLoader->hotFieldPool);\n+\t\tif(NULL == newHotField) {\n+\t\t\tomrthread_monitor_exit(clazz->classLoader->hotFieldPoolMutex);\n+\t\t\tgoto exit;\n+\t\t}\n+\t\tnewHotField->next = NULL;\n+\t\tnewHotField->hotFieldOffset = fieldOffset;\n+\t\tnewHotField->hotness = (reducedFrequency * reducedCpuUtil);\n+\t\tnewHotField->cpuUtil = reducedCpuUtil;\n+\t\tomrthread_monitor_exit(clazz->classLoader->hotFieldPoolMutex);\n+\t\t\n+\t\t/* update hotFieldsInfo for the class now that a new hot field has been added */\n+\t\tclazz->hotFieldsInfo->hotFieldListHead = newHotField;\n+\t\tclazz->hotFieldsInfo->isClassHotFieldListDirty = true;\n+\t\tclazz->hotFieldsInfo->hotFieldListLength++;\n+\t\tclazz->hotFieldsInfo->classLoader = clazz->classLoader;\n+\t}\n+\t\n+exit:\n+\tomrthread_monitor_exit(javaVM->hotFieldClassInfoPoolMutex);\n+}\n+\n+/**\n+ * Add or update an existing hot field for a given class.\n+ * Valid if dynamicBreadthFirstScanOrdering is enabled.\n+ *\n+ * @param clazz pointer to the class where a hot field should be added/updated\n+ * @param fieldOffset value of the field offset that should be added/updated as a hot field for the given class\n+ * @param reducedCpuUtil normalized cpu utilization of the method reporting the hot field\n+ * @param reducedFrequency normalized block frequency of the hot field for the method reporting the hot field\n+ */\n+VMINLINE void\n+addOrUpdateHotField(J9Class* clazz, U_8 fieldOffset, int32_t reducedCpuUtil, U_32 reducedFrequency)\n+{\n+\t/* Check if the hot field exists already */\n+\tJ9HotField* current;\n+\tcurrent = clazz->hotFieldsInfo->hotFieldListHead;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM2MDA0NA=="}, "originalCommit": {"oid": "b3913bcde1e052f5f913075f7ee045c10a01aef4"}, "originalPosition": 114}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5NzQ5Njky", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#pullrequestreview-469749692", "createdAt": "2020-08-18T19:15:19Z", "commit": {"oid": "b3913bcde1e052f5f913075f7ee045c10a01aef4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxOToxNToxOVrOHCiZAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxOToxNToxOVrOHCiZAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQyMjY1Ng==", "bodyText": "Might be worth making this a commandline param so it can be toggled if you feel that varying the number of hotfields may be preferable in certain apps", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r472422656", "createdAt": "2020-08-18T19:15:19Z", "author": {"login": "tajila"}, "path": "runtime/vm/resolvefield.cpp", "diffHunk": "@@ -36,6 +36,9 @@\n /* Extra hidden fields are lockword and finalizeLink. */\n #define NUMBER_OF_EXTRA_HIDDEN_FIELDS 2\n \n+/* Max hot field list length allowed for a class if scavenger dynamicBreadthScanOrdering is enabled */\n+#define MAX_HOT_FIELD_LIST_LENGTH 10", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3913bcde1e052f5f913075f7ee045c10a01aef4"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczNzQwMzUx", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#pullrequestreview-473740351", "createdAt": "2020-08-24T18:10:35Z", "commit": {"oid": "0804ef91b79504fc892c8c37d2bf66cb68bc0d79"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxODoxMDozNVrOHFwqOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxODoxNToxOFrOHFw3-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgwMjE3MA==", "bodyText": "try to avoid multiple returns", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r475802170", "createdAt": "2020-08-24T18:10:35Z", "author": {"login": "tajila"}, "path": "runtime/vm/resolvefield.cpp", "diffHunk": "@@ -578,6 +582,162 @@ addHiddenInstanceField(J9JavaVM *vm, const char *className, const char *fieldNam\n \treturn 0;\n }\n \n+/**\n+ * Report a hot field if the JIT has determined that the field has met appropriate thresholds to be determined a hot field. \n+ * Valid if dynamicBreadthFirstScanOrdering is enabled.\n+ *\n+ * @param javaVM[in] pointer to the J9JavaVM\n+ * @param reducedCpuUtil normalized cpu utilization of the method reporting the hot field\n+ * @param clazz pointer to the class where a hot field should be added/updated\n+ * @param fieldOffset value of the field offset that should be added/updated as a hot field for the given class\n+ * @param reducedFrequency normalized block frequency of the hot field for the method reporting the hot field\n+ */\n+void\n+reportHotField(J9JavaVM *javaVM, int32_t reducedCpuUtil, J9Class* clazz, U_8 fieldOffset,  U_32 reducedFrequency)\n+{\n+\t/*\n+\t * Exit if the hotFieldClassInfoPool is NULL as it should of been initialized during jvm initialization\n+\t */\n+\tif (NULL == javaVM->hotFieldClassInfoPool) {\n+\t\treturn;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0804ef91b79504fc892c8c37d2bf66cb68bc0d79"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgwMjQ1Ng==", "bodyText": "do the explicit false == createClassLoaderHotFieldPool", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r475802456", "createdAt": "2020-08-24T18:11:09Z", "author": {"login": "tajila"}, "path": "runtime/vm/resolvefield.cpp", "diffHunk": "@@ -578,6 +582,162 @@ addHiddenInstanceField(J9JavaVM *vm, const char *className, const char *fieldNam\n \treturn 0;\n }\n \n+/**\n+ * Report a hot field if the JIT has determined that the field has met appropriate thresholds to be determined a hot field. \n+ * Valid if dynamicBreadthFirstScanOrdering is enabled.\n+ *\n+ * @param javaVM[in] pointer to the J9JavaVM\n+ * @param reducedCpuUtil normalized cpu utilization of the method reporting the hot field\n+ * @param clazz pointer to the class where a hot field should be added/updated\n+ * @param fieldOffset value of the field offset that should be added/updated as a hot field for the given class\n+ * @param reducedFrequency normalized block frequency of the hot field for the method reporting the hot field\n+ */\n+void\n+reportHotField(J9JavaVM *javaVM, int32_t reducedCpuUtil, J9Class* clazz, U_8 fieldOffset,  U_32 reducedFrequency)\n+{\n+\t/*\n+\t * Exit if the hotFieldClassInfoPool is NULL as it should of been initialized during jvm initialization\n+\t */\n+\tif (NULL == javaVM->hotFieldClassInfoPool) {\n+\t\treturn;\n+\t}\n+\t/* \n+\t * If the classLoader's hot field pool is null, create and initialize its hotFieldPool and hotFieldPoolMutex as it is required\n+\t * for each classLoader if scavenger dynamicBreadthFirstScanOrdering is enabled\n+\t */\n+\tif(NULL == clazz->classLoader->hotFieldPool && !createClassLoaderHotFieldPool(javaVM, clazz->classLoader)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0804ef91b79504fc892c8c37d2bf66cb68bc0d79"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgwMjczMQ==", "bodyText": "you can embed the if statements", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r475802731", "createdAt": "2020-08-24T18:11:43Z", "author": {"login": "tajila"}, "path": "runtime/vm/resolvefield.cpp", "diffHunk": "@@ -578,6 +582,162 @@ addHiddenInstanceField(J9JavaVM *vm, const char *className, const char *fieldNam\n \treturn 0;\n }\n \n+/**\n+ * Report a hot field if the JIT has determined that the field has met appropriate thresholds to be determined a hot field. \n+ * Valid if dynamicBreadthFirstScanOrdering is enabled.\n+ *\n+ * @param javaVM[in] pointer to the J9JavaVM\n+ * @param reducedCpuUtil normalized cpu utilization of the method reporting the hot field\n+ * @param clazz pointer to the class where a hot field should be added/updated\n+ * @param fieldOffset value of the field offset that should be added/updated as a hot field for the given class\n+ * @param reducedFrequency normalized block frequency of the hot field for the method reporting the hot field\n+ */\n+void\n+reportHotField(J9JavaVM *javaVM, int32_t reducedCpuUtil, J9Class* clazz, U_8 fieldOffset,  U_32 reducedFrequency)\n+{\n+\t/*\n+\t * Exit if the hotFieldClassInfoPool is NULL as it should of been initialized during jvm initialization\n+\t */\n+\tif (NULL == javaVM->hotFieldClassInfoPool) {\n+\t\treturn;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgwMjE3MA=="}, "originalCommit": {"oid": "0804ef91b79504fc892c8c37d2bf66cb68bc0d79"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgwMzAxOA==", "bodyText": "also pay attention to the spacing if (", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r475803018", "createdAt": "2020-08-24T18:12:16Z", "author": {"login": "tajila"}, "path": "runtime/vm/resolvefield.cpp", "diffHunk": "@@ -578,6 +582,162 @@ addHiddenInstanceField(J9JavaVM *vm, const char *className, const char *fieldNam\n \treturn 0;\n }\n \n+/**\n+ * Report a hot field if the JIT has determined that the field has met appropriate thresholds to be determined a hot field. \n+ * Valid if dynamicBreadthFirstScanOrdering is enabled.\n+ *\n+ * @param javaVM[in] pointer to the J9JavaVM\n+ * @param reducedCpuUtil normalized cpu utilization of the method reporting the hot field\n+ * @param clazz pointer to the class where a hot field should be added/updated\n+ * @param fieldOffset value of the field offset that should be added/updated as a hot field for the given class\n+ * @param reducedFrequency normalized block frequency of the hot field for the method reporting the hot field\n+ */\n+void\n+reportHotField(J9JavaVM *javaVM, int32_t reducedCpuUtil, J9Class* clazz, U_8 fieldOffset,  U_32 reducedFrequency)\n+{\n+\t/*\n+\t * Exit if the hotFieldClassInfoPool is NULL as it should of been initialized during jvm initialization\n+\t */\n+\tif (NULL == javaVM->hotFieldClassInfoPool) {\n+\t\treturn;\n+\t}\n+\t/* \n+\t * If the classLoader's hot field pool is null, create and initialize its hotFieldPool and hotFieldPoolMutex as it is required\n+\t * for each classLoader if scavenger dynamicBreadthFirstScanOrdering is enabled\n+\t */\n+\tif(NULL == clazz->classLoader->hotFieldPool && !createClassLoaderHotFieldPool(javaVM, clazz->classLoader)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0804ef91b79504fc892c8c37d2bf66cb68bc0d79"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgwMzUzNw==", "bodyText": "this should start at the beginning of the line", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r475803537", "createdAt": "2020-08-24T18:13:18Z", "author": {"login": "tajila"}, "path": "runtime/vm/resolvefield.cpp", "diffHunk": "@@ -578,6 +582,162 @@ addHiddenInstanceField(J9JavaVM *vm, const char *className, const char *fieldNam\n \treturn 0;\n }\n \n+/**\n+ * Report a hot field if the JIT has determined that the field has met appropriate thresholds to be determined a hot field. \n+ * Valid if dynamicBreadthFirstScanOrdering is enabled.\n+ *\n+ * @param javaVM[in] pointer to the J9JavaVM\n+ * @param reducedCpuUtil normalized cpu utilization of the method reporting the hot field\n+ * @param clazz pointer to the class where a hot field should be added/updated\n+ * @param fieldOffset value of the field offset that should be added/updated as a hot field for the given class\n+ * @param reducedFrequency normalized block frequency of the hot field for the method reporting the hot field\n+ */\n+void\n+reportHotField(J9JavaVM *javaVM, int32_t reducedCpuUtil, J9Class* clazz, U_8 fieldOffset,  U_32 reducedFrequency)\n+{\n+\t/*\n+\t * Exit if the hotFieldClassInfoPool is NULL as it should of been initialized during jvm initialization\n+\t */\n+\tif (NULL == javaVM->hotFieldClassInfoPool) {\n+\t\treturn;\n+\t}\n+\t/* \n+\t * If the classLoader's hot field pool is null, create and initialize its hotFieldPool and hotFieldPoolMutex as it is required\n+\t * for each classLoader if scavenger dynamicBreadthFirstScanOrdering is enabled\n+\t */\n+\tif(NULL == clazz->classLoader->hotFieldPool && !createClassLoaderHotFieldPool(javaVM, clazz->classLoader)) {\n+\t\treturn;\n+\t}\n+\t/* \n+\t * If the hotFieldsInfo pool element for the class does not exist already, create and initialize the class' hotFieldsInfo pool element\n+\t * otherwise, create/update the given hot field for the class\n+\t */\n+\tif (NULL == clazz->hotFieldsInfo) {\n+\t\tcreateClassHotFieldsInfo(javaVM, clazz, fieldOffset, reducedCpuUtil, reducedFrequency);\n+\t}\n+\taddOrUpdateHotField(javaVM, clazz, fieldOffset, reducedCpuUtil, reducedFrequency);\n+}\n+\n+/**\n+ * Create and initialize a classLoaders hot field pool and hot field pool monitor.\n+ * Valid if dynamicBreadthFirstScanOrdering is enabled.\n+ *\n+ * @param javaVM[in] pointer to the J9JavaVM\n+ * @param classLoader pointer to the classLoader that requires a hot field pool and hot field monitor to be created for it\n+ */\n+VMINLINE bool\n+createClassLoaderHotFieldPool(J9JavaVM *javaVM, J9ClassLoader* classLoader)\n+{\n+\tbool result = true;\n+\tomrthread_monitor_enter(javaVM->globalHotFieldPoolMutex);\n+\tif (NULL == classLoader->hotFieldPool) {\n+\t\tclassLoader->hotFieldPool = pool_new(sizeof(J9HotField),  0, 0, 0, J9_GET_CALLSITE(), J9MEM_CATEGORY_CLASSES, POOL_FOR_PORT(javaVM->portLibrary));\n+\t\tif (NULL == classLoader->hotFieldPool || (0 != omrthread_monitor_init_with_name(&classLoader->hotFieldPoolMutex, 0, \"Hot Field Pool\"))) {\n+\t\t\tresult = false;\n+\t\t}\n+\t}\n+\tomrthread_monitor_exit(javaVM->globalHotFieldPoolMutex);\n+\treturn result;\n+}\n+\n+/**\n+ * Create and initialize a class' hotFieldsInfo pool element.\n+ * Valid if dynamicBreadthFirstScanOrdering is enabled.\n+ *\n+ * @param javaVM[in] pointer to the J9JavaVM\n+ * @param clazz pointer to the class where a hot field should be added\n+ * @param fieldOffset value of the field offset that should be added as a hot field for the given class\n+ * @param reducedCpuUtil normalized cpu utilization of the method reporting the hot field\n+ * @param reducedFrequency normalized block frequency of the hot field for the method reporting the hot field\n+ */\n+VMINLINE void\n+createClassHotFieldsInfo(J9JavaVM *javaVM, J9Class* clazz, U_8 fieldOffset, int32_t reducedCpuUtil, U_32 reducedFrequency)\n+{\n+\tomrthread_monitor_enter(javaVM->hotFieldClassInfoPoolMutex);\n+\t/*\n+\t* Create and initialize new hotFieldsInfo pool element if it does not exist already.\n+\t*/\n+\tif (NULL == clazz->hotFieldsInfo) {\n+\t\tJ9ClassHotFieldsInfo* hotFieldsInfo = (J9ClassHotFieldsInfo *)pool_newElement(javaVM->hotFieldClassInfoPool);\n+\t\tif (NULL != hotFieldsInfo) {\n+\t\t\thotFieldsInfo->hotFieldListLength = 0;\n+\t\t\thotFieldsInfo->consecutiveHotFieldSelections = 0;\n+\t\t\thotFieldsInfo->hotFieldOffset1 = U_8_MAX;\n+\t\t\thotFieldsInfo->hotFieldOffset2 = U_8_MAX;\n+\t\t\thotFieldsInfo->classLoader = clazz->classLoader;\n+\t\t\tclazz->hotFieldsInfo = hotFieldsInfo;\n+\t\t}\n+\t}\n+\tomrthread_monitor_exit(javaVM->hotFieldClassInfoPoolMutex);\n+}\n+\n+/**\n+ * Add or update an existing hot field for a given class.\n+ * Valid if dynamicBreadthFirstScanOrdering is enabled.\n+ *\n+ * @param clazz pointer to the class where a hot field should be added/updated\n+ * @param fieldOffset value of the field offset that should be added/updated as a hot field for the given class\n+ * @param reducedCpuUtil normalized cpu utilization of the method reporting the hot field\n+ * @param reducedFrequency normalized block frequency of the hot field for the method reporting the hot field\n+ */\n+VMINLINE void\n+addOrUpdateHotField(J9JavaVM *javaVM, J9Class* clazz, U_8 fieldOffset, int32_t reducedCpuUtil, U_32 reducedFrequency)\n+{\n+\tif (NULL != clazz->hotFieldsInfo) {\n+\t\tJ9ClassHotFieldsInfo* hotFieldsInfo = clazz->hotFieldsInfo;\n+\t\tJ9ClassLoader* classLoader = clazz->classLoader;\n+\t\tomrthread_monitor_enter(classLoader->hotFieldPoolMutex);\t\t\n+\t\t/* \n+\t\t * Search the hot field list of the class to check if the hot field exists already\n+\t\t */\n+\t\tJ9HotField* previous = NULL;\n+\t\tJ9HotField* current = hotFieldsInfo->hotFieldListHead;\n+\t\twhile (NULL != current) {\n+\t\t\tif (current->hotFieldOffset == fieldOffset) {\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tprevious = current;\n+\t\t\tcurrent = current->next;\n+\t\t}\n+\t\t/* \n+\t\t * If the hot field does not exist, create and initialize the new hot field.\n+\t\t */\n+\t\tif (current == NULL) {\n+\t\t\tif (hotFieldsInfo->hotFieldListLength >= javaVM->memoryManagerFunctions->j9gc_max_hot_field_list_length(javaVM)) {\n+\t\t\t\tgoto releaseMutex;\n+\t\t\t} else {\n+\t\t\t\tcurrent = (J9HotField *)pool_newElement(classLoader->hotFieldPool);\n+\t\t\t\tif (NULL == current) {\n+\t\t\t\t\tgoto releaseMutex;\n+\t\t\t\t}\n+\t\t\t\thotFieldsInfo->hotFieldListLength++;\n+\t\t\t\tcurrent->hotFieldOffset = fieldOffset;\n+\t\t\t\tcurrent->hotness = 0;\n+\t\t\t\tcurrent->cpuUtil = 0;\n+\t\t\t\tcurrent->next = NULL;\n+\t\t\t}\n+\t\t}\n+\t\t/*\n+\t\t * Update the existing or newly created hot field with the newly reported hot field information.\n+\t\t */\n+\t\tcurrent->hotness += (reducedFrequency * reducedCpuUtil);\n+\t\tcurrent->cpuUtil += reducedCpuUtil;\n+\t\thotFieldsInfo->isClassHotFieldListDirty = true;\t\t\n+\t\t/* \n+\t\t * Initialize hotFieldListHead if the hotFieldList for the class is empty - this is the case if the previous pointer is NULL. \n+\t\t * Otherwise, add the new hot field to the end of the hot field list for the class.\n+\t\t */\n+\t\tif (NULL == previous) {\n+\t\t\thotFieldsInfo->hotFieldListHead = current;\n+\t\t} else {\n+\t\t\tprevious->next = current;\n+\t\t}\n+\n+\treleaseMutex:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0804ef91b79504fc892c8c37d2bf66cb68bc0d79"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgwNTY5MA==", "bodyText": "unnecessary whitespace", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r475805690", "createdAt": "2020-08-24T18:15:18Z", "author": {"login": "tajila"}, "path": "runtime/vm/classallocation.c", "diffHunk": "@@ -173,6 +173,7 @@ allocateClassLoader(J9JavaVM *javaVM)\n \t\t/* memset not required as the classLoaderBlocks pool returns zero'd memory */\n \n \t\tclassLoader->classHashTable = hashClassTableNew(javaVM, INITIAL_CLASSHASHTABLE_SIZE);\n+\t\t", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0804ef91b79504fc892c8c37d2bf66cb68bc0d79"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczNzg3MTQz", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#pullrequestreview-473787143", "createdAt": "2020-08-24T19:17:55Z", "commit": {"oid": "0804ef91b79504fc892c8c37d2bf66cb68bc0d79"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxOToxNzo1NlrOHFy6MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxOToxNzo1NlrOHFy6MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgzOTAyNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tif (_javaVM->hotFieldClassInfoPool != NULL && ((_extensions->scavengerStats._gcCount  % _extensions->gcCountBetweenHotFieldSort) == 0)) {\n          \n          \n            \n            \tif ((NULL != _javaVM->hotFieldClassInfoPool) && ((_extensions->scavengerStats._gcCount  % _extensions->gcCountBetweenHotFieldSort) == 0)) {", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r475839024", "createdAt": "2020-08-24T19:17:56Z", "author": {"login": "amicic"}, "path": "runtime/gc_glue_java/ScavengerDelegate.cpp", "diffHunk": "@@ -648,6 +656,104 @@ MM_ScavengerDelegate::private_shouldPercolateGarbageCollect_classUnloading(MM_En\n \treturn shouldGCPercolate;\n }\n \n+void\n+MM_ScavengerDelegate::private_SortAllHotField()\n+{\t\n+\t/* update hottest fields for all elements of the hotFieldClassInfoPool where isClassHotFieldListDirty is true */\n+\tif (_javaVM->hotFieldClassInfoPool != NULL && ((_extensions->scavengerStats._gcCount  % _extensions->gcCountBetweenHotFieldSort) == 0)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0804ef91b79504fc892c8c37d2bf66cb68bc0d79"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczNzg3NDc4", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#pullrequestreview-473787478", "createdAt": "2020-08-24T19:18:30Z", "commit": {"oid": "0804ef91b79504fc892c8c37d2bf66cb68bc0d79"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxOToxODozMFrOHFy7Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxOToxODozMFrOHFy7Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgzOTI3OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\twhile (NULL != hotFieldClassInfoTemp && hotFieldClassInfoTemp->consecutiveHotFieldSelections != U_8_MAX) {\n          \n          \n            \n            \t\twhile ((NULL != hotFieldClassInfoTemp) && (U_8_MAX != hotFieldClassInfoTemp->consecutiveHotFieldSelections)) {", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r475839278", "createdAt": "2020-08-24T19:18:30Z", "author": {"login": "amicic"}, "path": "runtime/gc_glue_java/ScavengerDelegate.cpp", "diffHunk": "@@ -648,6 +656,104 @@ MM_ScavengerDelegate::private_shouldPercolateGarbageCollect_classUnloading(MM_En\n \treturn shouldGCPercolate;\n }\n \n+void\n+MM_ScavengerDelegate::private_SortAllHotField()\n+{\t\n+\t/* update hottest fields for all elements of the hotFieldClassInfoPool where isClassHotFieldListDirty is true */\n+\tif (_javaVM->hotFieldClassInfoPool != NULL && ((_extensions->scavengerStats._gcCount  % _extensions->gcCountBetweenHotFieldSort) == 0)) {\n+\t\tpool_state hotFieldClassInfoPoolState;\n+\t\tomrthread_monitor_enter(_javaVM->hotFieldClassInfoPoolMutex);\n+\t\tJ9ClassHotFieldsInfo *hotFieldClassInfoTemp = (J9ClassHotFieldsInfo *)pool_startDo(_javaVM->hotFieldClassInfoPool, &hotFieldClassInfoPoolState);\n+\t\t\n+\t\t/* sort hot field list for the class if the hot field list of the class is dirty */\n+\t\twhile (NULL != hotFieldClassInfoTemp && hotFieldClassInfoTemp->consecutiveHotFieldSelections != U_8_MAX) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0804ef91b79504fc892c8c37d2bf66cb68bc0d79"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczNzg4MDA2", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#pullrequestreview-473788006", "createdAt": "2020-08-24T19:19:19Z", "commit": {"oid": "0804ef91b79504fc892c8c37d2bf66cb68bc0d79"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxOToxOToyMFrOHFy82w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxOToxOToyMFrOHFy82w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgzOTcwNw==", "bodyText": "please add a couple of more extra oval brackets", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r475839707", "createdAt": "2020-08-24T19:19:20Z", "author": {"login": "amicic"}, "path": "runtime/gc_glue_java/ScavengerDelegate.cpp", "diffHunk": "@@ -648,6 +656,104 @@ MM_ScavengerDelegate::private_shouldPercolateGarbageCollect_classUnloading(MM_En\n \treturn shouldGCPercolate;\n }\n \n+void\n+MM_ScavengerDelegate::private_SortAllHotField()\n+{\t\n+\t/* update hottest fields for all elements of the hotFieldClassInfoPool where isClassHotFieldListDirty is true */\n+\tif (_javaVM->hotFieldClassInfoPool != NULL && ((_extensions->scavengerStats._gcCount  % _extensions->gcCountBetweenHotFieldSort) == 0)) {\n+\t\tpool_state hotFieldClassInfoPoolState;\n+\t\tomrthread_monitor_enter(_javaVM->hotFieldClassInfoPoolMutex);\n+\t\tJ9ClassHotFieldsInfo *hotFieldClassInfoTemp = (J9ClassHotFieldsInfo *)pool_startDo(_javaVM->hotFieldClassInfoPool, &hotFieldClassInfoPoolState);\n+\t\t\n+\t\t/* sort hot field list for the class if the hot field list of the class is dirty */\n+\t\twhile (NULL != hotFieldClassInfoTemp && hotFieldClassInfoTemp->consecutiveHotFieldSelections != U_8_MAX) {\n+\t\t\tif (hotFieldClassInfoTemp->isClassHotFieldListDirty) {\n+\t\t\t\tprivate_SortClassHotFieldList(hotFieldClassInfoTemp);\n+\t\t\t}\n+\t\t\thotFieldClassInfoTemp = (struct J9ClassHotFieldsInfo*)pool_nextDo(&hotFieldClassInfoPoolState);\n+\t\t}\n+\t\tomrthread_monitor_exit(_javaVM->hotFieldClassInfoPoolMutex);\n+\t}\n+\t/* If adaptiveGcCountBetweenHotFieldSort, update the gc count required between sorting all hot fields as the application runs longer */\n+\tif (_extensions->adaptiveGcCountBetweenHotFieldSort && _extensions->gcCountBetweenHotFieldSort < _extensions->gcCountBetweenHotFieldSortMax && _extensions->scavengerStats._gcCount % INCREMENT_GC_COUNT_BETWEEN_HOT_FIELD_SORT == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0804ef91b79504fc892c8c37d2bf66cb68bc0d79"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczNzg4MTQz", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#pullrequestreview-473788143", "createdAt": "2020-08-24T19:19:32Z", "commit": {"oid": "0804ef91b79504fc892c8c37d2bf66cb68bc0d79"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxOToxOTozMlrOHFy9Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxOToxOTozMlrOHFy9Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgzOTgwNw==", "bodyText": "brackets", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r475839807", "createdAt": "2020-08-24T19:19:32Z", "author": {"login": "amicic"}, "path": "runtime/gc_glue_java/ScavengerDelegate.cpp", "diffHunk": "@@ -648,6 +656,104 @@ MM_ScavengerDelegate::private_shouldPercolateGarbageCollect_classUnloading(MM_En\n \treturn shouldGCPercolate;\n }\n \n+void\n+MM_ScavengerDelegate::private_SortAllHotField()\n+{\t\n+\t/* update hottest fields for all elements of the hotFieldClassInfoPool where isClassHotFieldListDirty is true */\n+\tif (_javaVM->hotFieldClassInfoPool != NULL && ((_extensions->scavengerStats._gcCount  % _extensions->gcCountBetweenHotFieldSort) == 0)) {\n+\t\tpool_state hotFieldClassInfoPoolState;\n+\t\tomrthread_monitor_enter(_javaVM->hotFieldClassInfoPoolMutex);\n+\t\tJ9ClassHotFieldsInfo *hotFieldClassInfoTemp = (J9ClassHotFieldsInfo *)pool_startDo(_javaVM->hotFieldClassInfoPool, &hotFieldClassInfoPoolState);\n+\t\t\n+\t\t/* sort hot field list for the class if the hot field list of the class is dirty */\n+\t\twhile (NULL != hotFieldClassInfoTemp && hotFieldClassInfoTemp->consecutiveHotFieldSelections != U_8_MAX) {\n+\t\t\tif (hotFieldClassInfoTemp->isClassHotFieldListDirty) {\n+\t\t\t\tprivate_SortClassHotFieldList(hotFieldClassInfoTemp);\n+\t\t\t}\n+\t\t\thotFieldClassInfoTemp = (struct J9ClassHotFieldsInfo*)pool_nextDo(&hotFieldClassInfoPoolState);\n+\t\t}\n+\t\tomrthread_monitor_exit(_javaVM->hotFieldClassInfoPoolMutex);\n+\t}\n+\t/* If adaptiveGcCountBetweenHotFieldSort, update the gc count required between sorting all hot fields as the application runs longer */\n+\tif (_extensions->adaptiveGcCountBetweenHotFieldSort && _extensions->gcCountBetweenHotFieldSort < _extensions->gcCountBetweenHotFieldSortMax && _extensions->scavengerStats._gcCount % INCREMENT_GC_COUNT_BETWEEN_HOT_FIELD_SORT == 0) {\n+\t\t_extensions->gcCountBetweenHotFieldSort++;\n+\t}\n+\t/* If hotFieldResettingEnabled, update the gc count required between resetting all hot fields */\n+\tif (_extensions->hotFieldResettingEnabled && _extensions->scavengerStats._gcCount % _extensions->gcCountBetweenHotFieldReset == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0804ef91b79504fc892c8c37d2bf66cb68bc0d79"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczNzg4ODE2", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#pullrequestreview-473788816", "createdAt": "2020-08-24T19:20:38Z", "commit": {"oid": "0804ef91b79504fc892c8c37d2bf66cb68bc0d79"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxOToyMDozOFrOHFy_Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxOToyMDozOFrOHFy_Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg0MDM1NA==", "bodyText": "as per coding standards, we keep the constant first:\nMM_GCExtensions::OMR_GC_SCAVENGER_SCANORDERING_DYNAMIC_BREADTH_FIRST == _extensions->scavengerScanOrdering", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r475840354", "createdAt": "2020-08-24T19:20:38Z", "author": {"login": "amicic"}, "path": "runtime/gc_glue_java/ScavengerDelegate.cpp", "diffHunk": "@@ -180,6 +183,11 @@ MM_ScavengerDelegate::mainSetupForGC(MM_EnvironmentBase * envBase)\n \n \tprivate_setupForOwnableSynchronizerProcessing(MM_EnvironmentStandard::getEnvironment(envBase));\n \n+\t/* Sort all hot fields for all classes if scavenger dynamicBreadthFirstScanOrdering is enabled */\n+\tif (_extensions->scavengerScanOrdering == MM_GCExtensions::OMR_GC_SCAVENGER_SCANORDERING_DYNAMIC_BREADTH_FIRST) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0804ef91b79504fc892c8c37d2bf66cb68bc0d79"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczNzg5MDEx", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#pullrequestreview-473789011", "createdAt": "2020-08-24T19:20:57Z", "commit": {"oid": "0804ef91b79504fc892c8c37d2bf66cb68bc0d79"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxOToyMDo1OFrOHFy__g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxOToyMDo1OFrOHFy__g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg0MDUxMA==", "bodyText": "constant first", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r475840510", "createdAt": "2020-08-24T19:20:58Z", "author": {"login": "amicic"}, "path": "runtime/gc_glue_java/ScavengerDelegate.cpp", "diffHunk": "@@ -648,6 +656,104 @@ MM_ScavengerDelegate::private_shouldPercolateGarbageCollect_classUnloading(MM_En\n \treturn shouldGCPercolate;\n }\n \n+void\n+MM_ScavengerDelegate::private_SortAllHotField()\n+{\t\n+\t/* update hottest fields for all elements of the hotFieldClassInfoPool where isClassHotFieldListDirty is true */\n+\tif (_javaVM->hotFieldClassInfoPool != NULL && ((_extensions->scavengerStats._gcCount  % _extensions->gcCountBetweenHotFieldSort) == 0)) {\n+\t\tpool_state hotFieldClassInfoPoolState;\n+\t\tomrthread_monitor_enter(_javaVM->hotFieldClassInfoPoolMutex);\n+\t\tJ9ClassHotFieldsInfo *hotFieldClassInfoTemp = (J9ClassHotFieldsInfo *)pool_startDo(_javaVM->hotFieldClassInfoPool, &hotFieldClassInfoPoolState);\n+\t\t\n+\t\t/* sort hot field list for the class if the hot field list of the class is dirty */\n+\t\twhile (NULL != hotFieldClassInfoTemp && hotFieldClassInfoTemp->consecutiveHotFieldSelections != U_8_MAX) {\n+\t\t\tif (hotFieldClassInfoTemp->isClassHotFieldListDirty) {\n+\t\t\t\tprivate_SortClassHotFieldList(hotFieldClassInfoTemp);\n+\t\t\t}\n+\t\t\thotFieldClassInfoTemp = (struct J9ClassHotFieldsInfo*)pool_nextDo(&hotFieldClassInfoPoolState);\n+\t\t}\n+\t\tomrthread_monitor_exit(_javaVM->hotFieldClassInfoPoolMutex);\n+\t}\n+\t/* If adaptiveGcCountBetweenHotFieldSort, update the gc count required between sorting all hot fields as the application runs longer */\n+\tif (_extensions->adaptiveGcCountBetweenHotFieldSort && _extensions->gcCountBetweenHotFieldSort < _extensions->gcCountBetweenHotFieldSortMax && _extensions->scavengerStats._gcCount % INCREMENT_GC_COUNT_BETWEEN_HOT_FIELD_SORT == 0) {\n+\t\t_extensions->gcCountBetweenHotFieldSort++;\n+\t}\n+\t/* If hotFieldResettingEnabled, update the gc count required between resetting all hot fields */\n+\tif (_extensions->hotFieldResettingEnabled && _extensions->scavengerStats._gcCount % _extensions->gcCountBetweenHotFieldReset == 0) {\n+\t\tprivate_ResetAllHotFieldData();\n+\t}\n+}\n+\n+void\n+MM_ScavengerDelegate::private_SortClassHotFieldList(J9ClassHotFieldsInfo* hotFieldClassInfo) {\n+\t/* store initial hot field offsets before hotFieldClassInfo hot field offsets are updated */\n+\tU_8 initialHotFieldOffset1 = hotFieldClassInfo->hotFieldOffset1;\n+\tU_8 initialHotFieldOffset2 = hotFieldClassInfo->hotFieldOffset2;\n+\n+\t/* compute and update the hot fields for each class */\n+\tif (hotFieldClassInfo->hotFieldListLength == 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0804ef91b79504fc892c8c37d2bf66cb68bc0d79"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczNzkxNTk3", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#pullrequestreview-473791597", "createdAt": "2020-08-24T19:24:52Z", "commit": {"oid": "0804ef91b79504fc892c8c37d2bf66cb68bc0d79"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxOToyNDo1MlrOHFzHsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxOToyNDo1MlrOHFzHsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg0MjQ4MQ==", "bodyText": "extra brackets", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r475842481", "createdAt": "2020-08-24T19:24:52Z", "author": {"login": "amicic"}, "path": "runtime/gc_glue_java/ScavengerDelegate.cpp", "diffHunk": "@@ -648,6 +656,104 @@ MM_ScavengerDelegate::private_shouldPercolateGarbageCollect_classUnloading(MM_En\n \treturn shouldGCPercolate;\n }\n \n+void\n+MM_ScavengerDelegate::private_SortAllHotField()\n+{\t\n+\t/* update hottest fields for all elements of the hotFieldClassInfoPool where isClassHotFieldListDirty is true */\n+\tif (_javaVM->hotFieldClassInfoPool != NULL && ((_extensions->scavengerStats._gcCount  % _extensions->gcCountBetweenHotFieldSort) == 0)) {\n+\t\tpool_state hotFieldClassInfoPoolState;\n+\t\tomrthread_monitor_enter(_javaVM->hotFieldClassInfoPoolMutex);\n+\t\tJ9ClassHotFieldsInfo *hotFieldClassInfoTemp = (J9ClassHotFieldsInfo *)pool_startDo(_javaVM->hotFieldClassInfoPool, &hotFieldClassInfoPoolState);\n+\t\t\n+\t\t/* sort hot field list for the class if the hot field list of the class is dirty */\n+\t\twhile (NULL != hotFieldClassInfoTemp && hotFieldClassInfoTemp->consecutiveHotFieldSelections != U_8_MAX) {\n+\t\t\tif (hotFieldClassInfoTemp->isClassHotFieldListDirty) {\n+\t\t\t\tprivate_SortClassHotFieldList(hotFieldClassInfoTemp);\n+\t\t\t}\n+\t\t\thotFieldClassInfoTemp = (struct J9ClassHotFieldsInfo*)pool_nextDo(&hotFieldClassInfoPoolState);\n+\t\t}\n+\t\tomrthread_monitor_exit(_javaVM->hotFieldClassInfoPoolMutex);\n+\t}\n+\t/* If adaptiveGcCountBetweenHotFieldSort, update the gc count required between sorting all hot fields as the application runs longer */\n+\tif (_extensions->adaptiveGcCountBetweenHotFieldSort && _extensions->gcCountBetweenHotFieldSort < _extensions->gcCountBetweenHotFieldSortMax && _extensions->scavengerStats._gcCount % INCREMENT_GC_COUNT_BETWEEN_HOT_FIELD_SORT == 0) {\n+\t\t_extensions->gcCountBetweenHotFieldSort++;\n+\t}\n+\t/* If hotFieldResettingEnabled, update the gc count required between resetting all hot fields */\n+\tif (_extensions->hotFieldResettingEnabled && _extensions->scavengerStats._gcCount % _extensions->gcCountBetweenHotFieldReset == 0) {\n+\t\tprivate_ResetAllHotFieldData();\n+\t}\n+}\n+\n+void\n+MM_ScavengerDelegate::private_SortClassHotFieldList(J9ClassHotFieldsInfo* hotFieldClassInfo) {\n+\t/* store initial hot field offsets before hotFieldClassInfo hot field offsets are updated */\n+\tU_8 initialHotFieldOffset1 = hotFieldClassInfo->hotFieldOffset1;\n+\tU_8 initialHotFieldOffset2 = hotFieldClassInfo->hotFieldOffset2;\n+\n+\t/* compute and update the hot fields for each class */\n+\tif (hotFieldClassInfo->hotFieldListLength == 1) {\n+\t\thotFieldClassInfo->hotFieldOffset1 = hotFieldClassInfo->hotFieldListHead->hotFieldOffset;\n+\t} else {\n+\t\tJ9HotField* currentHotField = hotFieldClassInfo->hotFieldListHead;\n+\t\tU_64 hottest = 0;\n+\t\tU_64 secondHottest = 0;\n+\t\tU_64 current = 0;\n+\t\twhile (NULL != currentHotField) {\n+\t\t\tif(currentHotField->cpuUtil > _extensions->minCpuUtil) {\n+\t\t\t\tcurrent = currentHotField->hotness;\n+\t\t\t\t/* compute only the hottest field if depthCopyTwoPaths is not enabled, otherwise, compute the two hottest fields if depthCopyTwoPaths is enabled */\n+\t\t\t\tif (!_extensions->depthCopyTwoPaths) {\n+\t\t\t\t\tif (current > hottest) {\n+\t\t\t\t\t\thottest = current;\n+\t\t\t\t\t\thotFieldClassInfo->hotFieldOffset1 = currentHotField->hotFieldOffset;\n+\t\t\t\t\t}\n+\t\t\t\t} else {\n+\t\t\t\t\tif (current > hottest) {\n+\t\t\t\t\t\tsecondHottest = hottest;\n+\t\t\t\t\t\thotFieldClassInfo->hotFieldOffset2 = hotFieldClassInfo->hotFieldOffset1;\n+\t\t\t\t\t\thottest = current;\n+\t\t\t\t\t\thotFieldClassInfo->hotFieldOffset1 = currentHotField->hotFieldOffset;\n+\t\t\t\t\t} else if (current > secondHottest) {\n+\t\t\t\t\t\tsecondHottest = current;\n+\t\t\t\t\t\thotFieldClassInfo->hotFieldOffset2 = currentHotField->hotFieldOffset;\t\t\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tcurrentHotField = currentHotField->next;\n+\t\t}\n+\t} \n+\t/* if permanantHotFields are allowed, update consecutiveHotFieldSelections counter if hot field offsets are the same as the previous time the class hot field list was sorted  */\n+\tif (_extensions->allowPermanantHotFields) {\n+\t\tif (initialHotFieldOffset1 == hotFieldClassInfo->hotFieldOffset1 && initialHotFieldOffset2 == hotFieldClassInfo->hotFieldOffset2) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0804ef91b79504fc892c8c37d2bf66cb68bc0d79"}, "originalPosition": 94}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxMDQxNzIx", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#pullrequestreview-481041721", "createdAt": "2020-09-02T17:24:13Z", "commit": {"oid": "5880c20b4875adc256f2bbee1721285acd06420a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1004703f08a3ba2fe44dab0e8d68d383809894bd", "author": {"user": {"login": "jonoommen", "name": "Jon Oommen"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/1004703f08a3ba2fe44dab0e8d68d383809894bd", "committedDate": "2020-09-08T15:52:20Z", "message": "Add 3 path functionality"}, "afterCommit": {"oid": "8bbae5aa1c8aa6d4bfef63382812c68c9a68e2ba", "author": {"user": {"login": "jonoommen", "name": "Jon Oommen"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/8bbae5aa1c8aa6d4bfef63382812c68c9a68e2ba", "committedDate": "2020-09-09T00:39:13Z", "message": "Add 3 path functionality"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8bbae5aa1c8aa6d4bfef63382812c68c9a68e2ba", "author": {"user": {"login": "jonoommen", "name": "Jon Oommen"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/8bbae5aa1c8aa6d4bfef63382812c68c9a68e2ba", "committedDate": "2020-09-09T00:39:13Z", "message": "Add 3 path functionality"}, "afterCommit": {"oid": "ce4cfacb3fc351f9df8f208da5f52423026c9010", "author": {"user": {"login": "jonoommen", "name": "Jon Oommen"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/ce4cfacb3fc351f9df8f208da5f52423026c9010", "committedDate": "2020-09-10T20:10:50Z", "message": "Modify Dynamic BF Scan Ordering to use new JIT Hot Field Marking\n\nModify GC Dynamic Breadth First Scan Ordering to use the\nnewly implemented JIT Hot Field Hot Marking Pass.\n\nSigned-off-by: Jonathan Oommen <jon.oommen@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MzE0MjE3", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#pullrequestreview-486314217", "createdAt": "2020-09-10T21:12:48Z", "commit": {"oid": "ce4cfacb3fc351f9df8f208da5f52423026c9010"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3MTIzNDE5", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#pullrequestreview-487123419", "createdAt": "2020-09-11T21:04:33Z", "commit": {"oid": "ce4cfacb3fc351f9df8f208da5f52423026c9010"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMTowNDozM1rOHQt0eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMTowNDozM1rOHQt0eA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI4OTk3Ng==", "bodyText": "if dynamicBreadthFirstScanOrdering is provided along with say Balanced GC policy, the latter should take precedence, so that dynamicBreadthFirstScanOrdering  is ignored\nessentially set scavengerScanOrdering, but don't touch GC policy", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r487289976", "createdAt": "2020-09-11T21:04:33Z", "author": {"login": "amicic"}, "path": "runtime/gc_modron_startup/mmparseXgc.cpp", "diffHunk": "@@ -1123,6 +1123,15 @@ j9gc_initialize_parse_gc_colon(J9JavaVM *javaVM, char **scan_start)\n \t\tgoto _exit;\n \t}\n \t\t\n+\tif(try_scan(scan_start, \"dynamicBreadthFirstScanOrdering\")) {\n+\t\textensions->scavengerScanOrdering = MM_GCExtensions::OMR_GC_SCAVENGER_SCANORDERING_DYNAMIC_BREADTH_FIRST;\n+\t\t/* Below options are required options for dynamicBreadthFirstScanOrdering */\n+\t\textensions->scavengerAlignHotFields = false;\n+\t\textensions->configurationOptions._gcPolicy = gc_policy_gencon;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce4cfacb3fc351f9df8f208da5f52423026c9010"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3MTI1MzMy", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#pullrequestreview-487125332", "createdAt": "2020-09-11T21:08:28Z", "commit": {"oid": "ce4cfacb3fc351f9df8f208da5f52423026c9010"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMTowODoyOFrOHQt6lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMTowODoyOFrOHQt6lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI5MTU0Mg==", "bodyText": "move the comment(s) above one line and make them C style\nalso expand the comment providing a reason (for example to avoid immediate copying of hot children of reference objects)", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r487291542", "createdAt": "2020-09-11T21:08:28Z", "author": {"login": "amicic"}, "path": "runtime/gc_glue_java/ScavengerRootClearer.cpp", "diffHunk": "@@ -106,6 +106,7 @@ MM_ScavengerRootClearer::scavengeReferenceObjects(MM_EnvironmentStandard *env, u\n {\n \tAssert_MM_true(env->getGCEnvironment()->_referenceObjectBuffer->isEmpty());\n \n+\tenv->disableHotFieldDepthCopy(); //disable dynamicBreadthFirstScanOrdering depth copying before scavenging reference objects", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce4cfacb3fc351f9df8f208da5f52423026c9010"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4MDM0NDc1", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#pullrequestreview-488034475", "createdAt": "2020-09-14T18:26:23Z", "commit": {"oid": "4c57548b5861254e6bb073e358ef7d0a124d3bb9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODoyNjoyM1rOHRhdhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODoyNjoyM1rOHRhdhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEzNjA2OQ==", "bodyText": "we should not be forcing Scavenger either", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r488136069", "createdAt": "2020-09-14T18:26:23Z", "author": {"login": "amicic"}, "path": "runtime/gc_modron_startup/mmparseXgc.cpp", "diffHunk": "@@ -1123,6 +1123,14 @@ j9gc_initialize_parse_gc_colon(J9JavaVM *javaVM, char **scan_start)\n \t\tgoto _exit;\n \t}\n \t\t\n+\tif(try_scan(scan_start, \"dynamicBreadthFirstScanOrdering\")) {\n+\t\textensions->scavengerScanOrdering = MM_GCExtensions::OMR_GC_SCAVENGER_SCANORDERING_DYNAMIC_BREADTH_FIRST;\n+\t\t/* Below options are required options for dynamicBreadthFirstScanOrdering */\n+\t\textensions->scavengerAlignHotFields = false;\n+\t\textensions->scavengerEnabled = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c57548b5861254e6bb073e358ef7d0a124d3bb9"}, "originalPosition": 8}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "92be94be42c0336ab37c8552210851771399fd3a", "author": {"user": {"login": "jonoommen", "name": "Jon Oommen"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/92be94be42c0336ab37c8552210851771399fd3a", "committedDate": "2020-09-15T17:20:20Z", "message": "added oval brackets"}, "afterCommit": {"oid": "844a00b77c83a1c725848bb8a1ff6ee1a45caece", "author": {"user": {"login": "jonoommen", "name": "Jon Oommen"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/844a00b77c83a1c725848bb8a1ff6ee1a45caece", "committedDate": "2020-09-15T17:22:50Z", "message": "Modify Dynamic BF Scan Ordering to use new JIT Hot Field Marking\n\nModify GC Dynamic Breadth First Scan Ordering to use the\nnewly implemented JIT Hot Field Hot Marking Pass.\n\nSigned-off-by: Jonathan Oommen <jon.oommen@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5NjY1MzU5", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#pullrequestreview-489665359", "createdAt": "2020-09-16T14:09:01Z", "commit": {"oid": "844a00b77c83a1c725848bb8a1ff6ee1a45caece"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNDowOTowMVrOHSys7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNDowOTowMVrOHSys7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ2NzExOQ==", "bodyText": "This file has not been changed after all, so copyrights should not be updated and file should be excluded from change set", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r489467119", "createdAt": "2020-09-16T14:09:01Z", "author": {"login": "dmitripivkine"}, "path": "runtime/gc_glue_java/ObjectModel.cpp", "diffHunk": "@@ -1,5 +1,5 @@\n /*******************************************************************************\n- * Copyright (c) 1991, 2019 IBM Corp. and others\n+ * Copyright (c) 1991, 2020 IBM Corp. and others", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "844a00b77c83a1c725848bb8a1ff6ee1a45caece"}, "originalPosition": 3}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5NzkxOTkx", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#pullrequestreview-489791991", "createdAt": "2020-09-16T16:19:36Z", "commit": {"oid": "844a00b77c83a1c725848bb8a1ff6ee1a45caece"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNjoxOTozN1rOHS4kqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNjoxOTozN1rOHS4kqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU2MzMwNg==", "bodyText": "please put constant first", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r489563306", "createdAt": "2020-09-16T16:19:37Z", "author": {"login": "dmitripivkine"}, "path": "runtime/gc_modron_startup/mmhelpers.cpp", "diffHunk": "@@ -150,6 +150,30 @@ j9gc_software_read_barrier_enabled(J9JavaVM *javaVM)\n \treturn MM_GCExtensions::getExtensions(javaVM)->isSoftwareRangeCheckReadBarrierEnabled() ? 1 : 0;\n }\n \n+/**\n+ * Query if hot reference field is reqired for scavenger dynamicBreadthFirstScanOrdering\n+ *  @return true if scavenger dynamicBreadthFirstScanOrdering is enabled, 0 otherwise \n+ */\n+UDATA\n+j9gc_hot_reference_field_required(J9JavaVM *javaVM)\n+{\n+#if defined(J9VM_GC_MODRON_SCAVENGER)\n+\treturn MM_GCExtensions::getExtensions(javaVM)->scavengerScanOrdering == MM_GCExtensions::OMR_GC_SCAVENGER_SCANORDERING_DYNAMIC_BREADTH_FIRST;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "844a00b77c83a1c725848bb8a1ff6ee1a45caece"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5Nzk5NzE0", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#pullrequestreview-489799714", "createdAt": "2020-09-16T16:29:10Z", "commit": {"oid": "844a00b77c83a1c725848bb8a1ff6ee1a45caece"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNjoyOToxMFrOHS47bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNjoyOToxMFrOHS47bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU2OTEzMg==", "bodyText": "Cast to (int) is not necessary.  The type of extensions->gcCountBetweenHotFieldSort is uintptr_t", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r489569132", "createdAt": "2020-09-16T16:29:10Z", "author": {"login": "dmitripivkine"}, "path": "runtime/gc_modron_startup/mmparseXXgc.cpp", "diffHunk": "@@ -716,6 +716,143 @@ gcParseXXgcArguments(J9JavaVM *vm, char *optArg)\n \t\t}\n \n #if defined(J9VM_GC_MODRON_SCAVENGER)\n+\t\t/* Start of options relating to dynamicBreadthFirstScanOrdering */\n+\t\tif(try_scan(&scan_start, \"dbfGcCountBetweenHotFieldSort=\")) {\n+\t\t\tUDATA value;\n+\t\t\tif(!scan_udata_helper(vm, &scan_start, &value, \"dbfGcCountBetweenHotFieldSort=\")) {\n+\t\t\t\treturnValue = JNI_EINVAL;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tif(value > 10) {\n+\t\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_INTEGER_OUT_OF_RANGE, \"dbfGcCountBetweenHotFieldSort=\", (UDATA)0, (UDATA)10);\n+\t\t\t\treturnValue = JNI_EINVAL;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\textensions->gcCountBetweenHotFieldSort = ((int)value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "844a00b77c83a1c725848bb8a1ff6ee1a45caece"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5ODAwODU4", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#pullrequestreview-489800858", "createdAt": "2020-09-16T16:30:38Z", "commit": {"oid": "844a00b77c83a1c725848bb8a1ff6ee1a45caece"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNjozMDozOFrOHS4_Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNjozMDozOFrOHS4_Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU3MDA3OA==", "bodyText": "the same - cast is not necessary", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r489570078", "createdAt": "2020-09-16T16:30:38Z", "author": {"login": "dmitripivkine"}, "path": "runtime/gc_modron_startup/mmparseXXgc.cpp", "diffHunk": "@@ -716,6 +716,143 @@ gcParseXXgcArguments(J9JavaVM *vm, char *optArg)\n \t\t}\n \n #if defined(J9VM_GC_MODRON_SCAVENGER)\n+\t\t/* Start of options relating to dynamicBreadthFirstScanOrdering */\n+\t\tif(try_scan(&scan_start, \"dbfGcCountBetweenHotFieldSort=\")) {\n+\t\t\tUDATA value;\n+\t\t\tif(!scan_udata_helper(vm, &scan_start, &value, \"dbfGcCountBetweenHotFieldSort=\")) {\n+\t\t\t\treturnValue = JNI_EINVAL;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tif(value > 10) {\n+\t\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_INTEGER_OUT_OF_RANGE, \"dbfGcCountBetweenHotFieldSort=\", (UDATA)0, (UDATA)10);\n+\t\t\t\treturnValue = JNI_EINVAL;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\textensions->gcCountBetweenHotFieldSort = ((int)value);\n+\t\t\tcontinue;\n+\t\t}\n+\n+\t\tif(try_scan(&scan_start, \"dbfGcCountBetweenHotFieldSortMax=\")) {\n+\t\t\tUDATA value;\n+\t\t\tif(!scan_udata_helper(vm, &scan_start, &value, \"dbfGcCountBetweenHotFieldSortMax=\")) {\n+\t\t\t\treturnValue = JNI_EINVAL;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tif(value > 50) {\n+\t\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_INTEGER_OUT_OF_RANGE, \"dbfGcCountBetweenHotFieldSortMax=\", (UDATA)0, (UDATA)50);\n+\t\t\t\treturnValue = JNI_EINVAL;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\textensions->gcCountBetweenHotFieldSortMax = ((int)value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "844a00b77c83a1c725848bb8a1ff6ee1a45caece"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5ODAzMjAx", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#pullrequestreview-489803201", "createdAt": "2020-09-16T16:33:37Z", "commit": {"oid": "844a00b77c83a1c725848bb8a1ff6ee1a45caece"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNjozMzozOFrOHS5GSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNjozMzozOFrOHS5GSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU3MTkxNA==", "bodyText": "cast is not necessary", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r489571914", "createdAt": "2020-09-16T16:33:38Z", "author": {"login": "dmitripivkine"}, "path": "runtime/gc_modron_startup/mmparseXXgc.cpp", "diffHunk": "@@ -716,6 +716,143 @@ gcParseXXgcArguments(J9JavaVM *vm, char *optArg)\n \t\t}\n \n #if defined(J9VM_GC_MODRON_SCAVENGER)\n+\t\t/* Start of options relating to dynamicBreadthFirstScanOrdering */\n+\t\tif(try_scan(&scan_start, \"dbfGcCountBetweenHotFieldSort=\")) {\n+\t\t\tUDATA value;\n+\t\t\tif(!scan_udata_helper(vm, &scan_start, &value, \"dbfGcCountBetweenHotFieldSort=\")) {\n+\t\t\t\treturnValue = JNI_EINVAL;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tif(value > 10) {\n+\t\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_INTEGER_OUT_OF_RANGE, \"dbfGcCountBetweenHotFieldSort=\", (UDATA)0, (UDATA)10);\n+\t\t\t\treturnValue = JNI_EINVAL;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\textensions->gcCountBetweenHotFieldSort = ((int)value);\n+\t\t\tcontinue;\n+\t\t}\n+\n+\t\tif(try_scan(&scan_start, \"dbfGcCountBetweenHotFieldSortMax=\")) {\n+\t\t\tUDATA value;\n+\t\t\tif(!scan_udata_helper(vm, &scan_start, &value, \"dbfGcCountBetweenHotFieldSortMax=\")) {\n+\t\t\t\treturnValue = JNI_EINVAL;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tif(value > 50) {\n+\t\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_INTEGER_OUT_OF_RANGE, \"dbfGcCountBetweenHotFieldSortMax=\", (UDATA)0, (UDATA)50);\n+\t\t\t\treturnValue = JNI_EINVAL;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\textensions->gcCountBetweenHotFieldSortMax = ((int)value);\n+\t\t\tcontinue;\n+\t\t}\n+\n+\t\tif(try_scan(&scan_start, \"dbfDisableAdaptiveGcCountBetweenHotFieldSort\")) {\n+\t\t\textensions->adaptiveGcCountBetweenHotFieldSort = false;\n+\t\t\tcontinue;\n+\t\t}\n+\n+\t\tif(try_scan(&scan_start, \"dbfDisableDepthCopyTwoPaths\")) {\n+\t\t\textensions->depthCopyTwoPaths = false;\n+\t\t\tcontinue;\n+\t\t}\n+\t\t\n+\t\tif(try_scan(&scan_start, \"dbfDepthCopyThreePaths\")) {\n+\t\t\textensions->depthCopyThreePaths = true;\n+\t\t\tcontinue;\n+\t\t}\n+\t\t\n+\t\tif(try_scan(&scan_start, \"dbfEnableAlwaysDepthCopyFirstOffset\")) {\n+\t\t\textensions->alwaysDepthCopyFirstOffset = true;\n+\t\t\tcontinue;\n+\t\t} \n+\n+\t\tif(try_scan(&scan_start, \"dbfEnablePermanantHotFields\")) {\n+\t\t\textensions->allowPermanantHotFields = true;\n+\t\t\tcontinue;\n+\t\t}\n+\t\t\n+\t\tif(try_scan(&scan_start, \"dbfMaxConsecutiveHotFieldSelections=\")) {\n+\t\t\tUDATA value;\n+\t\t\tif(!scan_udata_helper(vm, &scan_start, &value, \"dbfMaxConsecutiveHotFieldSelections=\")) {\n+\t\t\t\treturnValue = JNI_EINVAL;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tif(value > 50) {\n+\t\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_INTEGER_OUT_OF_RANGE, \"dbfMaxConsecutiveHotFieldSelections=\", (UDATA)0, (UDATA)50);\n+\t\t\t\treturnValue = JNI_EINVAL;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\textensions->maxConsecutiveHotFieldSelections = ((int)value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "844a00b77c83a1c725848bb8a1ff6ee1a45caece"}, "originalPosition": 71}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5ODAzNzY5", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#pullrequestreview-489803769", "createdAt": "2020-09-16T16:34:24Z", "commit": {"oid": "844a00b77c83a1c725848bb8a1ff6ee1a45caece"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNjozNDoyNFrOHS5H_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNjozNDoyNFrOHS5H_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU3MjM1MQ==", "bodyText": "cast is not necessary", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r489572351", "createdAt": "2020-09-16T16:34:24Z", "author": {"login": "dmitripivkine"}, "path": "runtime/gc_modron_startup/mmparseXXgc.cpp", "diffHunk": "@@ -716,6 +716,143 @@ gcParseXXgcArguments(J9JavaVM *vm, char *optArg)\n \t\t}\n \n #if defined(J9VM_GC_MODRON_SCAVENGER)\n+\t\t/* Start of options relating to dynamicBreadthFirstScanOrdering */\n+\t\tif(try_scan(&scan_start, \"dbfGcCountBetweenHotFieldSort=\")) {\n+\t\t\tUDATA value;\n+\t\t\tif(!scan_udata_helper(vm, &scan_start, &value, \"dbfGcCountBetweenHotFieldSort=\")) {\n+\t\t\t\treturnValue = JNI_EINVAL;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tif(value > 10) {\n+\t\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_INTEGER_OUT_OF_RANGE, \"dbfGcCountBetweenHotFieldSort=\", (UDATA)0, (UDATA)10);\n+\t\t\t\treturnValue = JNI_EINVAL;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\textensions->gcCountBetweenHotFieldSort = ((int)value);\n+\t\t\tcontinue;\n+\t\t}\n+\n+\t\tif(try_scan(&scan_start, \"dbfGcCountBetweenHotFieldSortMax=\")) {\n+\t\t\tUDATA value;\n+\t\t\tif(!scan_udata_helper(vm, &scan_start, &value, \"dbfGcCountBetweenHotFieldSortMax=\")) {\n+\t\t\t\treturnValue = JNI_EINVAL;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tif(value > 50) {\n+\t\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_INTEGER_OUT_OF_RANGE, \"dbfGcCountBetweenHotFieldSortMax=\", (UDATA)0, (UDATA)50);\n+\t\t\t\treturnValue = JNI_EINVAL;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\textensions->gcCountBetweenHotFieldSortMax = ((int)value);\n+\t\t\tcontinue;\n+\t\t}\n+\n+\t\tif(try_scan(&scan_start, \"dbfDisableAdaptiveGcCountBetweenHotFieldSort\")) {\n+\t\t\textensions->adaptiveGcCountBetweenHotFieldSort = false;\n+\t\t\tcontinue;\n+\t\t}\n+\n+\t\tif(try_scan(&scan_start, \"dbfDisableDepthCopyTwoPaths\")) {\n+\t\t\textensions->depthCopyTwoPaths = false;\n+\t\t\tcontinue;\n+\t\t}\n+\t\t\n+\t\tif(try_scan(&scan_start, \"dbfDepthCopyThreePaths\")) {\n+\t\t\textensions->depthCopyThreePaths = true;\n+\t\t\tcontinue;\n+\t\t}\n+\t\t\n+\t\tif(try_scan(&scan_start, \"dbfEnableAlwaysDepthCopyFirstOffset\")) {\n+\t\t\textensions->alwaysDepthCopyFirstOffset = true;\n+\t\t\tcontinue;\n+\t\t} \n+\n+\t\tif(try_scan(&scan_start, \"dbfEnablePermanantHotFields\")) {\n+\t\t\textensions->allowPermanantHotFields = true;\n+\t\t\tcontinue;\n+\t\t}\n+\t\t\n+\t\tif(try_scan(&scan_start, \"dbfMaxConsecutiveHotFieldSelections=\")) {\n+\t\t\tUDATA value;\n+\t\t\tif(!scan_udata_helper(vm, &scan_start, &value, \"dbfMaxConsecutiveHotFieldSelections=\")) {\n+\t\t\t\treturnValue = JNI_EINVAL;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tif(value > 50) {\n+\t\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_INTEGER_OUT_OF_RANGE, \"dbfMaxConsecutiveHotFieldSelections=\", (UDATA)0, (UDATA)50);\n+\t\t\t\treturnValue = JNI_EINVAL;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\textensions->maxConsecutiveHotFieldSelections = ((int)value);\n+\t\t\tcontinue;\n+\t\t}\n+\n+\t\tif(try_scan(&scan_start, \"dbfEnableHotFieldResetting\")) {\n+\t\t\textensions->hotFieldResettingEnabled = true;\n+\t\t\tcontinue;\n+\t\t}\n+\n+\t\tif(try_scan(&scan_start, \"dbfGcCountBetweenHotFieldReset=\")) {\n+\t\t\tUDATA value;\n+\t\t\tif(!scan_udata_helper(vm, &scan_start, &value, \"dbfGcCountBetweenHotFieldReset=\")) {\n+\t\t\t\treturnValue = JNI_EINVAL;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tif(value > 5000) {\n+\t\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_INTEGER_OUT_OF_RANGE, \"dbfGcCountBetweenHotFieldReset=\", (UDATA)0, (UDATA)5000);\n+\t\t\t\treturnValue = JNI_EINVAL;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\textensions->gcCountBetweenHotFieldReset = ((int)value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "844a00b77c83a1c725848bb8a1ff6ee1a45caece"}, "originalPosition": 91}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5ODAzODk1", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#pullrequestreview-489803895", "createdAt": "2020-09-16T16:34:35Z", "commit": {"oid": "844a00b77c83a1c725848bb8a1ff6ee1a45caece"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNjozNDozNVrOHS5IXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNjozNDozNVrOHS5IXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU3MjQ0Nw==", "bodyText": "cast is not necessary", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r489572447", "createdAt": "2020-09-16T16:34:35Z", "author": {"login": "dmitripivkine"}, "path": "runtime/gc_modron_startup/mmparseXXgc.cpp", "diffHunk": "@@ -716,6 +716,143 @@ gcParseXXgcArguments(J9JavaVM *vm, char *optArg)\n \t\t}\n \n #if defined(J9VM_GC_MODRON_SCAVENGER)\n+\t\t/* Start of options relating to dynamicBreadthFirstScanOrdering */\n+\t\tif(try_scan(&scan_start, \"dbfGcCountBetweenHotFieldSort=\")) {\n+\t\t\tUDATA value;\n+\t\t\tif(!scan_udata_helper(vm, &scan_start, &value, \"dbfGcCountBetweenHotFieldSort=\")) {\n+\t\t\t\treturnValue = JNI_EINVAL;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tif(value > 10) {\n+\t\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_INTEGER_OUT_OF_RANGE, \"dbfGcCountBetweenHotFieldSort=\", (UDATA)0, (UDATA)10);\n+\t\t\t\treturnValue = JNI_EINVAL;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\textensions->gcCountBetweenHotFieldSort = ((int)value);\n+\t\t\tcontinue;\n+\t\t}\n+\n+\t\tif(try_scan(&scan_start, \"dbfGcCountBetweenHotFieldSortMax=\")) {\n+\t\t\tUDATA value;\n+\t\t\tif(!scan_udata_helper(vm, &scan_start, &value, \"dbfGcCountBetweenHotFieldSortMax=\")) {\n+\t\t\t\treturnValue = JNI_EINVAL;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tif(value > 50) {\n+\t\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_INTEGER_OUT_OF_RANGE, \"dbfGcCountBetweenHotFieldSortMax=\", (UDATA)0, (UDATA)50);\n+\t\t\t\treturnValue = JNI_EINVAL;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\textensions->gcCountBetweenHotFieldSortMax = ((int)value);\n+\t\t\tcontinue;\n+\t\t}\n+\n+\t\tif(try_scan(&scan_start, \"dbfDisableAdaptiveGcCountBetweenHotFieldSort\")) {\n+\t\t\textensions->adaptiveGcCountBetweenHotFieldSort = false;\n+\t\t\tcontinue;\n+\t\t}\n+\n+\t\tif(try_scan(&scan_start, \"dbfDisableDepthCopyTwoPaths\")) {\n+\t\t\textensions->depthCopyTwoPaths = false;\n+\t\t\tcontinue;\n+\t\t}\n+\t\t\n+\t\tif(try_scan(&scan_start, \"dbfDepthCopyThreePaths\")) {\n+\t\t\textensions->depthCopyThreePaths = true;\n+\t\t\tcontinue;\n+\t\t}\n+\t\t\n+\t\tif(try_scan(&scan_start, \"dbfEnableAlwaysDepthCopyFirstOffset\")) {\n+\t\t\textensions->alwaysDepthCopyFirstOffset = true;\n+\t\t\tcontinue;\n+\t\t} \n+\n+\t\tif(try_scan(&scan_start, \"dbfEnablePermanantHotFields\")) {\n+\t\t\textensions->allowPermanantHotFields = true;\n+\t\t\tcontinue;\n+\t\t}\n+\t\t\n+\t\tif(try_scan(&scan_start, \"dbfMaxConsecutiveHotFieldSelections=\")) {\n+\t\t\tUDATA value;\n+\t\t\tif(!scan_udata_helper(vm, &scan_start, &value, \"dbfMaxConsecutiveHotFieldSelections=\")) {\n+\t\t\t\treturnValue = JNI_EINVAL;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tif(value > 50) {\n+\t\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_INTEGER_OUT_OF_RANGE, \"dbfMaxConsecutiveHotFieldSelections=\", (UDATA)0, (UDATA)50);\n+\t\t\t\treturnValue = JNI_EINVAL;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\textensions->maxConsecutiveHotFieldSelections = ((int)value);\n+\t\t\tcontinue;\n+\t\t}\n+\n+\t\tif(try_scan(&scan_start, \"dbfEnableHotFieldResetting\")) {\n+\t\t\textensions->hotFieldResettingEnabled = true;\n+\t\t\tcontinue;\n+\t\t}\n+\n+\t\tif(try_scan(&scan_start, \"dbfGcCountBetweenHotFieldReset=\")) {\n+\t\t\tUDATA value;\n+\t\t\tif(!scan_udata_helper(vm, &scan_start, &value, \"dbfGcCountBetweenHotFieldReset=\")) {\n+\t\t\t\treturnValue = JNI_EINVAL;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tif(value > 5000) {\n+\t\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_INTEGER_OUT_OF_RANGE, \"dbfGcCountBetweenHotFieldReset=\", (UDATA)0, (UDATA)5000);\n+\t\t\t\treturnValue = JNI_EINVAL;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\textensions->gcCountBetweenHotFieldReset = ((int)value);\n+\t\t\tcontinue;\n+\t\t}\n+\n+\t\tif(try_scan(&scan_start, \"dbfDepthCopyMax=\")) {\n+\t\t\tUDATA value;\n+\t\t\tif(!scan_udata_helper(vm, &scan_start, &value, \"dbfDepthCopyMax=\")) {\n+\t\t\t\treturnValue = JNI_EINVAL;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tif(value > 10) {\n+\t\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_INTEGER_OUT_OF_RANGE, \"dbfDepthCopyMax=\", (UDATA)0, (UDATA)10);\n+\t\t\t\treturnValue = JNI_EINVAL;\n+\t\t\t\tbreak;\n+\t\t\t}\t\n+\t\t\textensions->depthCopyMax = ((int)value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "844a00b77c83a1c725848bb8a1ff6ee1a45caece"}, "originalPosition": 106}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5ODA0NTQ2", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#pullrequestreview-489804546", "createdAt": "2020-09-16T16:35:27Z", "commit": {"oid": "844a00b77c83a1c725848bb8a1ff6ee1a45caece"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNjozNToyOFrOHS5KUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNjozNToyOFrOHS5KUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU3Mjk0NQ==", "bodyText": "should be cast to (uint32_t)", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r489572945", "createdAt": "2020-09-16T16:35:28Z", "author": {"login": "dmitripivkine"}, "path": "runtime/gc_modron_startup/mmparseXXgc.cpp", "diffHunk": "@@ -716,6 +716,143 @@ gcParseXXgcArguments(J9JavaVM *vm, char *optArg)\n \t\t}\n \n #if defined(J9VM_GC_MODRON_SCAVENGER)\n+\t\t/* Start of options relating to dynamicBreadthFirstScanOrdering */\n+\t\tif(try_scan(&scan_start, \"dbfGcCountBetweenHotFieldSort=\")) {\n+\t\t\tUDATA value;\n+\t\t\tif(!scan_udata_helper(vm, &scan_start, &value, \"dbfGcCountBetweenHotFieldSort=\")) {\n+\t\t\t\treturnValue = JNI_EINVAL;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tif(value > 10) {\n+\t\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_INTEGER_OUT_OF_RANGE, \"dbfGcCountBetweenHotFieldSort=\", (UDATA)0, (UDATA)10);\n+\t\t\t\treturnValue = JNI_EINVAL;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\textensions->gcCountBetweenHotFieldSort = ((int)value);\n+\t\t\tcontinue;\n+\t\t}\n+\n+\t\tif(try_scan(&scan_start, \"dbfGcCountBetweenHotFieldSortMax=\")) {\n+\t\t\tUDATA value;\n+\t\t\tif(!scan_udata_helper(vm, &scan_start, &value, \"dbfGcCountBetweenHotFieldSortMax=\")) {\n+\t\t\t\treturnValue = JNI_EINVAL;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tif(value > 50) {\n+\t\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_INTEGER_OUT_OF_RANGE, \"dbfGcCountBetweenHotFieldSortMax=\", (UDATA)0, (UDATA)50);\n+\t\t\t\treturnValue = JNI_EINVAL;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\textensions->gcCountBetweenHotFieldSortMax = ((int)value);\n+\t\t\tcontinue;\n+\t\t}\n+\n+\t\tif(try_scan(&scan_start, \"dbfDisableAdaptiveGcCountBetweenHotFieldSort\")) {\n+\t\t\textensions->adaptiveGcCountBetweenHotFieldSort = false;\n+\t\t\tcontinue;\n+\t\t}\n+\n+\t\tif(try_scan(&scan_start, \"dbfDisableDepthCopyTwoPaths\")) {\n+\t\t\textensions->depthCopyTwoPaths = false;\n+\t\t\tcontinue;\n+\t\t}\n+\t\t\n+\t\tif(try_scan(&scan_start, \"dbfDepthCopyThreePaths\")) {\n+\t\t\textensions->depthCopyThreePaths = true;\n+\t\t\tcontinue;\n+\t\t}\n+\t\t\n+\t\tif(try_scan(&scan_start, \"dbfEnableAlwaysDepthCopyFirstOffset\")) {\n+\t\t\textensions->alwaysDepthCopyFirstOffset = true;\n+\t\t\tcontinue;\n+\t\t} \n+\n+\t\tif(try_scan(&scan_start, \"dbfEnablePermanantHotFields\")) {\n+\t\t\textensions->allowPermanantHotFields = true;\n+\t\t\tcontinue;\n+\t\t}\n+\t\t\n+\t\tif(try_scan(&scan_start, \"dbfMaxConsecutiveHotFieldSelections=\")) {\n+\t\t\tUDATA value;\n+\t\t\tif(!scan_udata_helper(vm, &scan_start, &value, \"dbfMaxConsecutiveHotFieldSelections=\")) {\n+\t\t\t\treturnValue = JNI_EINVAL;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tif(value > 50) {\n+\t\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_INTEGER_OUT_OF_RANGE, \"dbfMaxConsecutiveHotFieldSelections=\", (UDATA)0, (UDATA)50);\n+\t\t\t\treturnValue = JNI_EINVAL;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\textensions->maxConsecutiveHotFieldSelections = ((int)value);\n+\t\t\tcontinue;\n+\t\t}\n+\n+\t\tif(try_scan(&scan_start, \"dbfEnableHotFieldResetting\")) {\n+\t\t\textensions->hotFieldResettingEnabled = true;\n+\t\t\tcontinue;\n+\t\t}\n+\n+\t\tif(try_scan(&scan_start, \"dbfGcCountBetweenHotFieldReset=\")) {\n+\t\t\tUDATA value;\n+\t\t\tif(!scan_udata_helper(vm, &scan_start, &value, \"dbfGcCountBetweenHotFieldReset=\")) {\n+\t\t\t\treturnValue = JNI_EINVAL;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tif(value > 5000) {\n+\t\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_INTEGER_OUT_OF_RANGE, \"dbfGcCountBetweenHotFieldReset=\", (UDATA)0, (UDATA)5000);\n+\t\t\t\treturnValue = JNI_EINVAL;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\textensions->gcCountBetweenHotFieldReset = ((int)value);\n+\t\t\tcontinue;\n+\t\t}\n+\n+\t\tif(try_scan(&scan_start, \"dbfDepthCopyMax=\")) {\n+\t\t\tUDATA value;\n+\t\t\tif(!scan_udata_helper(vm, &scan_start, &value, \"dbfDepthCopyMax=\")) {\n+\t\t\t\treturnValue = JNI_EINVAL;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tif(value > 10) {\n+\t\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_INTEGER_OUT_OF_RANGE, \"dbfDepthCopyMax=\", (UDATA)0, (UDATA)10);\n+\t\t\t\treturnValue = JNI_EINVAL;\n+\t\t\t\tbreak;\n+\t\t\t}\t\n+\t\t\textensions->depthCopyMax = ((int)value);\n+\t\t\tcontinue;\n+\t\t}\n+\n+\t\tif(try_scan(&scan_start, \"dbfMaxHotFieldListLength=\")) {\n+\t\t\tUDATA value;\n+\t\t\tif(!scan_udata_helper(vm, &scan_start, &value, \"dbfMaxHotFieldListLength=\")) {\n+\t\t\t\treturnValue = JNI_EINVAL;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tif(value > 20) {\n+\t\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_INTEGER_OUT_OF_RANGE, \"dbfMaxHotFieldListLength=\", (UDATA)0, (UDATA)20);\n+\t\t\t\treturnValue = JNI_EINVAL;\n+\t\t\t\tbreak;\n+\t\t\t}\t\n+\t\t\textensions->maxHotFieldListLength = ((int)value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "844a00b77c83a1c725848bb8a1ff6ee1a45caece"}, "originalPosition": 121}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5ODA1MzMx", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#pullrequestreview-489805331", "createdAt": "2020-09-16T16:36:26Z", "commit": {"oid": "844a00b77c83a1c725848bb8a1ff6ee1a45caece"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNjozNjoyNlrOHS5Mzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNjozNjoyNlrOHS5Mzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU3MzU4Mg==", "bodyText": "cast is not necessary", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r489573582", "createdAt": "2020-09-16T16:36:26Z", "author": {"login": "dmitripivkine"}, "path": "runtime/gc_modron_startup/mmparseXXgc.cpp", "diffHunk": "@@ -716,6 +716,143 @@ gcParseXXgcArguments(J9JavaVM *vm, char *optArg)\n \t\t}\n \n #if defined(J9VM_GC_MODRON_SCAVENGER)\n+\t\t/* Start of options relating to dynamicBreadthFirstScanOrdering */\n+\t\tif(try_scan(&scan_start, \"dbfGcCountBetweenHotFieldSort=\")) {\n+\t\t\tUDATA value;\n+\t\t\tif(!scan_udata_helper(vm, &scan_start, &value, \"dbfGcCountBetweenHotFieldSort=\")) {\n+\t\t\t\treturnValue = JNI_EINVAL;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tif(value > 10) {\n+\t\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_INTEGER_OUT_OF_RANGE, \"dbfGcCountBetweenHotFieldSort=\", (UDATA)0, (UDATA)10);\n+\t\t\t\treturnValue = JNI_EINVAL;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\textensions->gcCountBetweenHotFieldSort = ((int)value);\n+\t\t\tcontinue;\n+\t\t}\n+\n+\t\tif(try_scan(&scan_start, \"dbfGcCountBetweenHotFieldSortMax=\")) {\n+\t\t\tUDATA value;\n+\t\t\tif(!scan_udata_helper(vm, &scan_start, &value, \"dbfGcCountBetweenHotFieldSortMax=\")) {\n+\t\t\t\treturnValue = JNI_EINVAL;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tif(value > 50) {\n+\t\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_INTEGER_OUT_OF_RANGE, \"dbfGcCountBetweenHotFieldSortMax=\", (UDATA)0, (UDATA)50);\n+\t\t\t\treturnValue = JNI_EINVAL;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\textensions->gcCountBetweenHotFieldSortMax = ((int)value);\n+\t\t\tcontinue;\n+\t\t}\n+\n+\t\tif(try_scan(&scan_start, \"dbfDisableAdaptiveGcCountBetweenHotFieldSort\")) {\n+\t\t\textensions->adaptiveGcCountBetweenHotFieldSort = false;\n+\t\t\tcontinue;\n+\t\t}\n+\n+\t\tif(try_scan(&scan_start, \"dbfDisableDepthCopyTwoPaths\")) {\n+\t\t\textensions->depthCopyTwoPaths = false;\n+\t\t\tcontinue;\n+\t\t}\n+\t\t\n+\t\tif(try_scan(&scan_start, \"dbfDepthCopyThreePaths\")) {\n+\t\t\textensions->depthCopyThreePaths = true;\n+\t\t\tcontinue;\n+\t\t}\n+\t\t\n+\t\tif(try_scan(&scan_start, \"dbfEnableAlwaysDepthCopyFirstOffset\")) {\n+\t\t\textensions->alwaysDepthCopyFirstOffset = true;\n+\t\t\tcontinue;\n+\t\t} \n+\n+\t\tif(try_scan(&scan_start, \"dbfEnablePermanantHotFields\")) {\n+\t\t\textensions->allowPermanantHotFields = true;\n+\t\t\tcontinue;\n+\t\t}\n+\t\t\n+\t\tif(try_scan(&scan_start, \"dbfMaxConsecutiveHotFieldSelections=\")) {\n+\t\t\tUDATA value;\n+\t\t\tif(!scan_udata_helper(vm, &scan_start, &value, \"dbfMaxConsecutiveHotFieldSelections=\")) {\n+\t\t\t\treturnValue = JNI_EINVAL;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tif(value > 50) {\n+\t\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_INTEGER_OUT_OF_RANGE, \"dbfMaxConsecutiveHotFieldSelections=\", (UDATA)0, (UDATA)50);\n+\t\t\t\treturnValue = JNI_EINVAL;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\textensions->maxConsecutiveHotFieldSelections = ((int)value);\n+\t\t\tcontinue;\n+\t\t}\n+\n+\t\tif(try_scan(&scan_start, \"dbfEnableHotFieldResetting\")) {\n+\t\t\textensions->hotFieldResettingEnabled = true;\n+\t\t\tcontinue;\n+\t\t}\n+\n+\t\tif(try_scan(&scan_start, \"dbfGcCountBetweenHotFieldReset=\")) {\n+\t\t\tUDATA value;\n+\t\t\tif(!scan_udata_helper(vm, &scan_start, &value, \"dbfGcCountBetweenHotFieldReset=\")) {\n+\t\t\t\treturnValue = JNI_EINVAL;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tif(value > 5000) {\n+\t\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_INTEGER_OUT_OF_RANGE, \"dbfGcCountBetweenHotFieldReset=\", (UDATA)0, (UDATA)5000);\n+\t\t\t\treturnValue = JNI_EINVAL;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\textensions->gcCountBetweenHotFieldReset = ((int)value);\n+\t\t\tcontinue;\n+\t\t}\n+\n+\t\tif(try_scan(&scan_start, \"dbfDepthCopyMax=\")) {\n+\t\t\tUDATA value;\n+\t\t\tif(!scan_udata_helper(vm, &scan_start, &value, \"dbfDepthCopyMax=\")) {\n+\t\t\t\treturnValue = JNI_EINVAL;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tif(value > 10) {\n+\t\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_INTEGER_OUT_OF_RANGE, \"dbfDepthCopyMax=\", (UDATA)0, (UDATA)10);\n+\t\t\t\treturnValue = JNI_EINVAL;\n+\t\t\t\tbreak;\n+\t\t\t}\t\n+\t\t\textensions->depthCopyMax = ((int)value);\n+\t\t\tcontinue;\n+\t\t}\n+\n+\t\tif(try_scan(&scan_start, \"dbfMaxHotFieldListLength=\")) {\n+\t\t\tUDATA value;\n+\t\t\tif(!scan_udata_helper(vm, &scan_start, &value, \"dbfMaxHotFieldListLength=\")) {\n+\t\t\t\treturnValue = JNI_EINVAL;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tif(value > 20) {\n+\t\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_INTEGER_OUT_OF_RANGE, \"dbfMaxHotFieldListLength=\", (UDATA)0, (UDATA)20);\n+\t\t\t\treturnValue = JNI_EINVAL;\n+\t\t\t\tbreak;\n+\t\t\t}\t\n+\t\t\textensions->maxHotFieldListLength = ((int)value);\n+\t\t\tcontinue;\n+\t\t}\n+\n+\t\tif(try_scan(&scan_start, \"dbfMinCpuUtil=\")) {\n+\t\t\tUDATA value;\n+\t\t\tif(!scan_udata_helper(vm, &scan_start, &value, \"dbfMinCpuUtil=\")) {\n+\t\t\t\treturnValue = JNI_EINVAL;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tif(value > 15) {\n+\t\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_INTEGER_OUT_OF_RANGE, \"dbfMinCpuUtil=\", (UDATA)0, (UDATA)15);\n+\t\t\t\treturnValue = JNI_EINVAL;\n+\t\t\t\tbreak;\n+\t\t\t}\t\n+\t\t\textensions->minCpuUtil = ((int)value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "844a00b77c83a1c725848bb8a1ff6ee1a45caece"}, "originalPosition": 136}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a0a71a286139f42c78139a4fd999e147342a28a", "author": {"user": {"login": "jonoommen", "name": "Jon Oommen"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/8a0a71a286139f42c78139a4fd999e147342a28a", "committedDate": "2020-09-16T18:02:52Z", "message": "Add Dynamic Breadth First Scan Ordering to the GC\n\nAdd Dynamic Breadth First Scan Ordering to the GC implemented\nusing JIT hot fields. This enables the copying of a hot field\nmarked by the JIT immediately after the object containing the\nhot field is copied during a Scavenge.\n\nSigned-off-by: Jonathan Oommen <jon.oommen@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4213c69486ef53e7b30dc2ba1539fefc734c6d4a", "author": {"user": {"login": "andrewcraik", "name": "Andrew Craik"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/4213c69486ef53e7b30dc2ba1539fefc734c6d4a", "committedDate": "2020-09-16T18:02:52Z", "message": "Add HotFieldMarking pass\n\nCurrently hot field information is passed to the GC by the JIT in ValuePropagation.\nTo make the point where hot field marking is done more deterministic this commit\npulls the marking out into its own pass.\n\nSigned-off-by: Andrew Craik <ajcraik@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5c858eb8d9379d8523e5afc5df4c47154336b19b", "author": {"user": {"login": "jonoommen", "name": "Jon Oommen"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/5c858eb8d9379d8523e5afc5df4c47154336b19b", "committedDate": "2020-09-16T17:05:07Z", "message": "Reccomended changes"}, "afterCommit": {"oid": "e00089f3cf0ad12e003bcaeb1aa0590895f37909", "author": {"user": {"login": "jonoommen", "name": "Jon Oommen"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/e00089f3cf0ad12e003bcaeb1aa0590895f37909", "committedDate": "2020-09-16T18:02:53Z", "message": "Modify Dynamic BF Scan Ordering to use new JIT Hot Field Marking\n\nModify GC Dynamic Breadth First Scan Ordering to use the\nnewly implemented JIT Hot Field Hot Marking Pass.\n\nSigned-off-by: Jonathan Oommen <jon.oommen@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwMDAxODM2", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#pullrequestreview-490001836", "createdAt": "2020-09-16T20:37:31Z", "commit": {"oid": "e00089f3cf0ad12e003bcaeb1aa0590895f37909"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMDozNzozMVrOHTDVsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMDozNzozMVrOHTDVsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTczOTY5OQ==", "bodyText": "please remove external pair of brackets", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#discussion_r489739699", "createdAt": "2020-09-16T20:37:31Z", "author": {"login": "dmitripivkine"}, "path": "runtime/gc_modron_startup/mmparseXXgc.cpp", "diffHunk": "@@ -716,6 +716,143 @@ gcParseXXgcArguments(J9JavaVM *vm, char *optArg)\n \t\t}\n \n #if defined(J9VM_GC_MODRON_SCAVENGER)\n+\t\t/* Start of options relating to dynamicBreadthFirstScanOrdering */\n+\t\tif(try_scan(&scan_start, \"dbfGcCountBetweenHotFieldSort=\")) {\n+\t\t\tUDATA value;\n+\t\t\tif(!scan_udata_helper(vm, &scan_start, &value, \"dbfGcCountBetweenHotFieldSort=\")) {\n+\t\t\t\treturnValue = JNI_EINVAL;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tif(value > 10) {\n+\t\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_INTEGER_OUT_OF_RANGE, \"dbfGcCountBetweenHotFieldSort=\", (UDATA)0, (UDATA)10);\n+\t\t\t\treturnValue = JNI_EINVAL;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\textensions->gcCountBetweenHotFieldSort = value;\n+\t\t\tcontinue;\n+\t\t}\n+\n+\t\tif(try_scan(&scan_start, \"dbfGcCountBetweenHotFieldSortMax=\")) {\n+\t\t\tUDATA value;\n+\t\t\tif(!scan_udata_helper(vm, &scan_start, &value, \"dbfGcCountBetweenHotFieldSortMax=\")) {\n+\t\t\t\treturnValue = JNI_EINVAL;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tif(value > 50) {\n+\t\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_INTEGER_OUT_OF_RANGE, \"dbfGcCountBetweenHotFieldSortMax=\", (UDATA)0, (UDATA)50);\n+\t\t\t\treturnValue = JNI_EINVAL;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\textensions->gcCountBetweenHotFieldSortMax = value;\n+\t\t\tcontinue;\n+\t\t}\n+\n+\t\tif(try_scan(&scan_start, \"dbfDisableAdaptiveGcCountBetweenHotFieldSort\")) {\n+\t\t\textensions->adaptiveGcCountBetweenHotFieldSort = false;\n+\t\t\tcontinue;\n+\t\t}\n+\n+\t\tif(try_scan(&scan_start, \"dbfDisableDepthCopyTwoPaths\")) {\n+\t\t\textensions->depthCopyTwoPaths = false;\n+\t\t\tcontinue;\n+\t\t}\n+\t\t\n+\t\tif(try_scan(&scan_start, \"dbfDepthCopyThreePaths\")) {\n+\t\t\textensions->depthCopyThreePaths = true;\n+\t\t\tcontinue;\n+\t\t}\n+\t\t\n+\t\tif(try_scan(&scan_start, \"dbfEnableAlwaysDepthCopyFirstOffset\")) {\n+\t\t\textensions->alwaysDepthCopyFirstOffset = true;\n+\t\t\tcontinue;\n+\t\t} \n+\n+\t\tif(try_scan(&scan_start, \"dbfEnablePermanantHotFields\")) {\n+\t\t\textensions->allowPermanantHotFields = true;\n+\t\t\tcontinue;\n+\t\t}\n+\t\t\n+\t\tif(try_scan(&scan_start, \"dbfMaxConsecutiveHotFieldSelections=\")) {\n+\t\t\tUDATA value;\n+\t\t\tif(!scan_udata_helper(vm, &scan_start, &value, \"dbfMaxConsecutiveHotFieldSelections=\")) {\n+\t\t\t\treturnValue = JNI_EINVAL;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tif(value > 50) {\n+\t\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_INTEGER_OUT_OF_RANGE, \"dbfMaxConsecutiveHotFieldSelections=\", (UDATA)0, (UDATA)50);\n+\t\t\t\treturnValue = JNI_EINVAL;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\textensions->maxConsecutiveHotFieldSelections = value;\n+\t\t\tcontinue;\n+\t\t}\n+\n+\t\tif(try_scan(&scan_start, \"dbfEnableHotFieldResetting\")) {\n+\t\t\textensions->hotFieldResettingEnabled = true;\n+\t\t\tcontinue;\n+\t\t}\n+\n+\t\tif(try_scan(&scan_start, \"dbfGcCountBetweenHotFieldReset=\")) {\n+\t\t\tUDATA value;\n+\t\t\tif(!scan_udata_helper(vm, &scan_start, &value, \"dbfGcCountBetweenHotFieldReset=\")) {\n+\t\t\t\treturnValue = JNI_EINVAL;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tif(value > 5000) {\n+\t\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_INTEGER_OUT_OF_RANGE, \"dbfGcCountBetweenHotFieldReset=\", (UDATA)0, (UDATA)5000);\n+\t\t\t\treturnValue = JNI_EINVAL;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\textensions->gcCountBetweenHotFieldReset = value;\n+\t\t\tcontinue;\n+\t\t}\n+\n+\t\tif(try_scan(&scan_start, \"dbfDepthCopyMax=\")) {\n+\t\t\tUDATA value;\n+\t\t\tif(!scan_udata_helper(vm, &scan_start, &value, \"dbfDepthCopyMax=\")) {\n+\t\t\t\treturnValue = JNI_EINVAL;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tif(value > 10) {\n+\t\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_INTEGER_OUT_OF_RANGE, \"dbfDepthCopyMax=\", (UDATA)0, (UDATA)10);\n+\t\t\t\treturnValue = JNI_EINVAL;\n+\t\t\t\tbreak;\n+\t\t\t}\t\n+\t\t\textensions->depthCopyMax = value;\n+\t\t\tcontinue;\n+\t\t}\n+\n+\t\tif(try_scan(&scan_start, \"dbfMaxHotFieldListLength=\")) {\n+\t\t\tUDATA value;\n+\t\t\tif(!scan_udata_helper(vm, &scan_start, &value, \"dbfMaxHotFieldListLength=\")) {\n+\t\t\t\treturnValue = JNI_EINVAL;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tif(value > 20) {\n+\t\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_INTEGER_OUT_OF_RANGE, \"dbfMaxHotFieldListLength=\", (UDATA)0, (UDATA)20);\n+\t\t\t\treturnValue = JNI_EINVAL;\n+\t\t\t\tbreak;\n+\t\t\t}\t\n+\t\t\textensions->maxHotFieldListLength = ((uint32_t)value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e00089f3cf0ad12e003bcaeb1aa0590895f37909"}, "originalPosition": 121}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwNTg4NTcz", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#pullrequestreview-490588573", "createdAt": "2020-09-17T13:22:31Z", "commit": {"oid": "e00089f3cf0ad12e003bcaeb1aa0590895f37909"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxNjg3OTAz", "url": "https://github.com/eclipse-openj9/openj9/pull/10124#pullrequestreview-491687903", "createdAt": "2020-09-18T18:21:17Z", "commit": {"oid": "e00089f3cf0ad12e003bcaeb1aa0590895f37909"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e00089f3cf0ad12e003bcaeb1aa0590895f37909", "author": {"user": {"login": "jonoommen", "name": "Jon Oommen"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/e00089f3cf0ad12e003bcaeb1aa0590895f37909", "committedDate": "2020-09-16T18:02:53Z", "message": "Modify Dynamic BF Scan Ordering to use new JIT Hot Field Marking\n\nModify GC Dynamic Breadth First Scan Ordering to use the\nnewly implemented JIT Hot Field Hot Marking Pass.\n\nSigned-off-by: Jonathan Oommen <jon.oommen@gmail.com>"}, "afterCommit": {"oid": "49d08e622c9ef16cc5d0bfef8afef0b72d7e6659", "author": {"user": {"login": "jonoommen", "name": "Jon Oommen"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/49d08e622c9ef16cc5d0bfef8afef0b72d7e6659", "committedDate": "2020-09-18T20:53:14Z", "message": "Modify Dynamic BF Scan Ordering to use new JIT Hot Field Marking\n\nModify GC Dynamic Breadth First Scan Ordering to use the\nnewly implemented JIT Hot Field Hot Marking Pass.\n\nSigned-off-by: Jonathan Oommen <jon.oommen@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "49d08e622c9ef16cc5d0bfef8afef0b72d7e6659", "author": {"user": {"login": "jonoommen", "name": "Jon Oommen"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/49d08e622c9ef16cc5d0bfef8afef0b72d7e6659", "committedDate": "2020-09-18T20:53:14Z", "message": "Modify Dynamic BF Scan Ordering to use new JIT Hot Field Marking\n\nModify GC Dynamic Breadth First Scan Ordering to use the\nnewly implemented JIT Hot Field Hot Marking Pass.\n\nSigned-off-by: Jonathan Oommen <jon.oommen@gmail.com>"}, "afterCommit": {"oid": "044adf715616a76b9c28c633b8ff1801e1964289", "author": {"user": {"login": "jonoommen", "name": "Jon Oommen"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/044adf715616a76b9c28c633b8ff1801e1964289", "committedDate": "2020-09-19T06:39:15Z", "message": "Modify Dynamic BF Scan Ordering to use new JIT Hot Field Marking\n\nModify GC Dynamic Breadth First Scan Ordering to use the\nnewly implemented JIT Hot Field Hot Marking Pass.\n\nSigned-off-by: Jonathan Oommen <jon.oommen@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b012e80180a1004711519f31d5616af1b1b3b72", "author": {"user": {"login": "jonoommen", "name": "Jon Oommen"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/7b012e80180a1004711519f31d5616af1b1b3b72", "committedDate": "2020-09-22T14:13:06Z", "message": "Modify Dynamic BF Scan Ordering to use new JIT Hot Field Marking\n\nModify GC Dynamic Breadth First Scan Ordering to use the\nnewly implemented JIT Hot Field Hot Marking Pass.\n\nSigned-off-by: Jonathan Oommen <jon.oommen@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "044adf715616a76b9c28c633b8ff1801e1964289", "author": {"user": {"login": "jonoommen", "name": "Jon Oommen"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/044adf715616a76b9c28c633b8ff1801e1964289", "committedDate": "2020-09-19T06:39:15Z", "message": "Modify Dynamic BF Scan Ordering to use new JIT Hot Field Marking\n\nModify GC Dynamic Breadth First Scan Ordering to use the\nnewly implemented JIT Hot Field Hot Marking Pass.\n\nSigned-off-by: Jonathan Oommen <jon.oommen@gmail.com>"}, "afterCommit": {"oid": "7b012e80180a1004711519f31d5616af1b1b3b72", "author": {"user": {"login": "jonoommen", "name": "Jon Oommen"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/7b012e80180a1004711519f31d5616af1b1b3b72", "committedDate": "2020-09-22T14:13:06Z", "message": "Modify Dynamic BF Scan Ordering to use new JIT Hot Field Marking\n\nModify GC Dynamic Breadth First Scan Ordering to use the\nnewly implemented JIT Hot Field Hot Marking Pass.\n\nSigned-off-by: Jonathan Oommen <jon.oommen@gmail.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 549, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}