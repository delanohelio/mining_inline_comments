{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4MjAxNDI4", "number": 9567, "title": "Incomplete tactical implementation for -XX:+PrintFlagsFinal", "bodyText": "An incomplete implementation of VM options that produces the\n-XX:+PrintFlagsFinal output for two specific options required by\nthe elasticsearch project. This code is expected to be temporary\nuntil a more comprehensive solution can be architected. For this\nreason, this change is very straight-forward and localized so\nit can be easily removed.\nThe two options whose values will be printed are for\n-XX:MaxHeapSize= and -XX:MaxDirectMemorySize= .\nWith this change, elasticsearch no longer NPEs on startup and,\nin my local testing, all their tests pass on OpenJ9.\nI tried to match, as closely as possible, the output Hotspot\ngenerates when one uses -XX:+PrintFlagsFinal, which includes the\nnames used for types (e.g. size_t or uint64_t), the option names,\nthe option category (e.g. {product} for these two options), the\nway the option is set (e.g. {ergonomic} or {command line} for\nthese two options), and the field widths produced by a JDK11\nHotspot build.\nI added 3 command-line tests :\n\n\nthat two options (MaxHeapSize, MaxDirectMemorySize) are present\nwhen -XX:+PrintFlagsFinal option is specified.\n\n\nthat -XX:+PrintFlagsFinal overrides earlier -XX:-PrintFlagsFinal.\n\n\nthat -XX:-PrintFlagsFinal overrides earlier -XX:+PrintFlagsFinal.\n\n\nFixes: #7764\nDoc issue eclipse-openj9/openj9-docs#571\nSigned-off-by: Mark Stoodley mstoodle@ca.ibm.com", "createdAt": "2020-05-14T19:27:00Z", "url": "https://github.com/eclipse-openj9/openj9/pull/9567", "merged": true, "mergeCommit": {"oid": "853d056f568dbf226cb14b5962ba95f753cc6849"}, "closed": true, "closedAt": "2020-05-27T15:56:00Z", "author": {"login": "mstoodle"}, "timelineItems": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABchT9olABqjMzMzg0MjM1Nzc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABclYspVABqjMzNzc5NTQyNzc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3dbd72ada9230c43e7fc1cc471875bca9f172b97", "author": {"user": {"login": "mstoodle", "name": "Mark Stoodley"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/3dbd72ada9230c43e7fc1cc471875bca9f172b97", "committedDate": "2020-05-14T19:23:57Z", "message": "Simple incomplete implementation for PrintFlagsFinal\n\nA simple implementation of VM options that can be used to produce\nthe -XX:+PrintFlagsFinal output. I began separating out options\nrelated code (very little of it at this point) into new files\nruntime/oti/options.h, runtime/vm/options.inc, and\nruntime/vm/options.c .\n\nFor now, I have only included two options in this new facility:\nMaxHeapSize and MaxDirectMemorySize. These options are required\nby the elasticsearch project, so I started with these. With this\nfacility implemented at OpenJ9, elasticsearch no longer NPEs on\nstartup and, in my local testing, all their tests pass on OpenJ9.\n\nI tried to match, as closely as possible, the output Hotspot\ngenerates when one uses -XX:+PrintFlagsFinal, which includes the\nnames used for types (e.g. size_t or uint64_t), the option names,\nthe option category (e.g. {product} or {diagnostic}), the way the\noption is set (e.g. {default} or {ergonomic} or {command line}),\nand the field sizes produced by a JDK11 Hotspot build. I did some\nresearch online to find the set of types and such.\n\nIn options.c are found the main data structures that represent\nthe options. I build a static array with the list of options\nand that array has a slot to hold the option's value. Since\nOpenJ9's existing option handling code is distributed across\nmultiple components that all record options differently, I chose\nto centralize the options for PrintFlagsFinal in this array which\nmeans the option values need to be fetched from other spots to\nfill in the array. That's not ideal. Going forward, I think we can\nprobably do better, but this is a starting point that works\nreasonably well for simple options. By creating something independent\nof the existing options framework, it's relatively easy to decide\nif an option has been set on the command-line or not using the\nstandard findVmArgInArgs() service.\n\nI don't think this framework represents an architectural direction;\nI was just trying to put something relatively useful and reasonably\nextensible in place that could hold us over until a more comprehensive\noptions framework rework (across components and probably across OMR\nas well) can be undertaken.\n\nFixes: 7764\n\nSigned-off-by: Mark Stoodley <mstoodle@ca.ibm.com>"}, "afterCommit": {"oid": "403480eb6cdaec6308b368f85e76483aa8fd29d8", "author": {"user": {"login": "mstoodle", "name": "Mark Stoodley"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/403480eb6cdaec6308b368f85e76483aa8fd29d8", "committedDate": "2020-05-14T20:59:46Z", "message": "Simple incomplete implementation for PrintFlagsFinal\n\nA simple implementation of VM options that can be used to produce\nthe -XX:+PrintFlagsFinal output. I began separating out options\nrelated code (very little of it at this point) into new files\nruntime/oti/options.h, runtime/vm/options.inc, and\nruntime/vm/options.c .\n\nFor now, I have only included two options in this new facility:\nMaxHeapSize and MaxDirectMemorySize. These options are required\nby the elasticsearch project, so I started with these. With this\nfacility implemented at OpenJ9, elasticsearch no longer NPEs on\nstartup and, in my local testing, all their tests pass on OpenJ9.\n\nI tried to match, as closely as possible, the output Hotspot\ngenerates when one uses -XX:+PrintFlagsFinal, which includes the\nnames used for types (e.g. size_t or uint64_t), the option names,\nthe option category (e.g. {product} or {diagnostic}), the way the\noption is set (e.g. {default} or {ergonomic} or {command line}),\nand the field sizes produced by a JDK11 Hotspot build. I did some\nresearch online to find the set of types and such.\n\nIn options.c are found the main data structures that represent\nthe options. I build a static array with the list of options\nand that array has a slot to hold the option's value. Since\nOpenJ9's existing option handling code is distributed across\nmultiple components that all record options differently, I chose\nto centralize the options for PrintFlagsFinal in this array which\nmeans the option values need to be fetched from other spots to\nfill in the array. That's not ideal. Going forward, I think we can\nprobably do better, but this is a starting point that works\nreasonably well for simple options. By creating something independent\nof the existing options framework, it's relatively easy to decide\nif an option has been set on the command-line or not using the\nstandard `findArgInVMArgs()` service.\n\nI don't think this framework represents an architectural direction;\nI was just trying to put something relatively useful and reasonably\nextensible in place that could hold us over until a more comprehensive\noptions framework rework (across components and probably across OMR\nas well) can be undertaken.\n\nFixes: 7764\n\nSigned-off-by: Mark Stoodley <mstoodle@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyMjk3NDMz", "url": "https://github.com/eclipse-openj9/openj9/pull/9567#pullrequestreview-412297433", "createdAt": "2020-05-15T01:57:19Z", "commit": {"oid": "403480eb6cdaec6308b368f85e76483aa8fd29d8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMTo1NzoxOVrOGVz6-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMTo1NzoxOVrOGVz6-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUyMzk2Mw==", "bodyText": "-XX:MaxHeapSize is an alias for -Xmx. I expect setting either -Xmx or -XX:MaxHeapSize should indicate that -XX:MaxHeapSize was set on the command line.", "url": "https://github.com/eclipse-openj9/openj9/pull/9567#discussion_r425523963", "createdAt": "2020-05-15T01:57:19Z", "author": {"login": "pshipton"}, "path": "runtime/vm/options.c", "diffHunk": "@@ -0,0 +1,176 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+\n+#include <stdio.h>\n+#include \"j9protos.h\"\n+#include \"jvminitcommon.h\"\n+#include \"options.h\"\n+\n+\n+\n+/* Option types for compatibility */\n+#define TYPE_BOOL 0\n+#define TYPE_CCSTR 1\n+#define TYPE_CCSTRLIST 2\n+#define TYPE_DOUBLE 3\n+#define TYPE_INT 4\n+#define TYPE_INTX 5\n+#define TYPE_SIZET 6\n+#define TYPE_UINT 7\n+#define TYPE_UINT64T 8\n+#define TYPE_UINTX 9\n+\n+static char *option_type_string[] = {\n+\t\"bool\",\n+\t\"ccstr\",\n+\t\"ccstrlist\",\n+\t\"double\",\n+\t\"int\",\n+\t\"intx\",\n+\t\"size_t\",\n+\t\"uint\",\n+\t\"uint64_t\",\n+\t\"uintx\"\n+};\n+\n+typedef union J9OptionValue {\n+\tUDATA v_uintx;\n+\tU_64 v_uint64;\n+\tsize_t v_sizet;\n+\tdouble v_double;\n+\tchar *v_ccstr;\n+\tchar **v_ccstrlist;\n+\tU_32 v_uint;\n+\tIDATA v_intx;\n+\tI_8 v_bool;\n+} J9OptionValue;\n+\n+#define CAT_PRODUCT\t\t0\n+#define CAT_ARCHPRODUCT\t\t1\n+#define CAT_PDPRODUCT\t\t2\n+#define CAT_PRODUCTRW\t\t3\n+#define CAT_DIAGNOSTIC\t\t4\n+#define CAT_EXPERIMENTAL\t5\n+#define CAT_MANAGEABLE\t\t6\n+\n+static char *option_category_string[] = {\n+\t\"{product}\",\n+\t\"{ARCH product}\",\n+\t\"{pd product}\",\n+\t\"{product rw}\",\n+\t\"{diagnostic}\",\n+\t\"{experimental}\",\n+\t\"{manageable}\",\n+};\n+\n+#define SET_DEFAULT\t0\n+#define SET_COMMANDLINE\t1\n+#define SET_ERGONOMIC\t2\n+\n+static char *option_howset_string[] = {\n+\t\"{default}\",\n+\t\"{command line}\",\n+\t\"{ergonomic}\"\n+};\n+\n+typedef struct J9OptionDesc {\n+\tchar * name;\n+\tI_8 type;\n+\tI_8 category;\n+\tI_8 howset;\n+\tJ9OptionValue value;\n+} J9OptionDesc;\n+\n+/*\n+ * [Global flags]\n+ *    size_t MaxHeapSize                              = 4294967296                                {product} {ergonomic}\n+ *   uint64_t MaxDirectMemorySize                     = 3758096384                                         {product} {default}\n+ */\n+\n+\n+typedef enum options_enum {\n+\tNoOption=-1,\n+\n+\t#define OPTION(n,t,cats) IDX_ ## n,\n+\t#include \"options.inc\"\n+\t#undef OPTION\n+} options_enum;\n+\n+static J9OptionDesc options[]={\n+\t#define OPTION(n,t,cats) { n, t, cats, SET_DEFAULT, { 0 } },\n+\t#include \"options.inc\"\n+\t#undef OPTION\n+};\n+#define NUM_OPTIONS\t(sizeof(options)/sizeof(J9OptionDesc))\n+\n+\n+#define VMOPTION(o) VMOPT_ ## o\n+\n+#define SET_OPTION(option, cmdLineOption, vtype, setValue, defaultSource) \\\n+\to = options + option; \\\n+\to->value.vtype = (setValue); \\\n+\tif ((findArgInVMArgs( PORTLIB, vm->vmArgsArray, STARTSWITH_MATCH, cmdLineOption, NULL, 0)) >= 0) { \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "403480eb6cdaec6308b368f85e76483aa8fd29d8"}, "originalPosition": 131}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "403480eb6cdaec6308b368f85e76483aa8fd29d8", "author": {"user": {"login": "mstoodle", "name": "Mark Stoodley"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/403480eb6cdaec6308b368f85e76483aa8fd29d8", "committedDate": "2020-05-14T20:59:46Z", "message": "Simple incomplete implementation for PrintFlagsFinal\n\nA simple implementation of VM options that can be used to produce\nthe -XX:+PrintFlagsFinal output. I began separating out options\nrelated code (very little of it at this point) into new files\nruntime/oti/options.h, runtime/vm/options.inc, and\nruntime/vm/options.c .\n\nFor now, I have only included two options in this new facility:\nMaxHeapSize and MaxDirectMemorySize. These options are required\nby the elasticsearch project, so I started with these. With this\nfacility implemented at OpenJ9, elasticsearch no longer NPEs on\nstartup and, in my local testing, all their tests pass on OpenJ9.\n\nI tried to match, as closely as possible, the output Hotspot\ngenerates when one uses -XX:+PrintFlagsFinal, which includes the\nnames used for types (e.g. size_t or uint64_t), the option names,\nthe option category (e.g. {product} or {diagnostic}), the way the\noption is set (e.g. {default} or {ergonomic} or {command line}),\nand the field sizes produced by a JDK11 Hotspot build. I did some\nresearch online to find the set of types and such.\n\nIn options.c are found the main data structures that represent\nthe options. I build a static array with the list of options\nand that array has a slot to hold the option's value. Since\nOpenJ9's existing option handling code is distributed across\nmultiple components that all record options differently, I chose\nto centralize the options for PrintFlagsFinal in this array which\nmeans the option values need to be fetched from other spots to\nfill in the array. That's not ideal. Going forward, I think we can\nprobably do better, but this is a starting point that works\nreasonably well for simple options. By creating something independent\nof the existing options framework, it's relatively easy to decide\nif an option has been set on the command-line or not using the\nstandard `findArgInVMArgs()` service.\n\nI don't think this framework represents an architectural direction;\nI was just trying to put something relatively useful and reasonably\nextensible in place that could hold us over until a more comprehensive\noptions framework rework (across components and probably across OMR\nas well) can be undertaken.\n\nFixes: 7764\n\nSigned-off-by: Mark Stoodley <mstoodle@ca.ibm.com>"}, "afterCommit": {"oid": "f17ba11e1bc2b024bae47c9d8e1d973c66dc426a", "author": {"user": {"login": "mstoodle", "name": "Mark Stoodley"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/f17ba11e1bc2b024bae47c9d8e1d973c66dc426a", "committedDate": "2020-05-15T04:10:17Z", "message": "Simple incomplete implementation for PrintFlagsFinal\n\nA simple implementation of VM options that can be used to produce\nthe -XX:+PrintFlagsFinal output. I began separating out options\nrelated code (very little of it at this point) into new files\nruntime/oti/options.h, runtime/vm/options.inc, and\nruntime/vm/options.c .\n\nFor now, I have only included two options in this new facility:\nMaxHeapSize and MaxDirectMemorySize. These options are required\nby the elasticsearch project, so I started with these. With this\nfacility implemented at OpenJ9, elasticsearch no longer NPEs on\nstartup and, in my local testing, all their tests pass on OpenJ9.\n\nI tried to match, as closely as possible, the output Hotspot\ngenerates when one uses -XX:+PrintFlagsFinal, which includes the\nnames used for types (e.g. size_t or uint64_t), the option names,\nthe option category (e.g. {product} or {diagnostic}), the way the\noption is set (e.g. {default} or {ergonomic} or {command line}),\nand the field sizes produced by a JDK11 Hotspot build. I did some\nresearch online to find the set of types and such.\n\nIn options.c are found the main data structures that represent\nthe options. I build a static array with the list of options\nand that array has a slot to hold the option's value. Since\nOpenJ9's existing option handling code is distributed across\nmultiple components that all record options differently, I chose\nto centralize the options for PrintFlagsFinal in this array which\nmeans the option values need to be fetched from other spots to\nfill in the array. That's not ideal. Going forward, I think we can\nprobably do better, but this is a starting point that works\nreasonably well for simple options. By creating something independent\nof the existing options framework, it's relatively easy to decide\nif an option has been set on the command-line or not using the\nstandard `findArgInVMArgs()` service.\n\nI don't think this framework represents an architectural direction;\nI was just trying to put something relatively useful and reasonably\nextensible in place that could hold us over until a more comprehensive\noptions framework rework (across components and probably across OMR\nas well) can be undertaken.\n\nFixes: 7764\n\nSigned-off-by: Mark Stoodley <mstoodle@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f17ba11e1bc2b024bae47c9d8e1d973c66dc426a", "author": {"user": {"login": "mstoodle", "name": "Mark Stoodley"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/f17ba11e1bc2b024bae47c9d8e1d973c66dc426a", "committedDate": "2020-05-15T04:10:17Z", "message": "Simple incomplete implementation for PrintFlagsFinal\n\nA simple implementation of VM options that can be used to produce\nthe -XX:+PrintFlagsFinal output. I began separating out options\nrelated code (very little of it at this point) into new files\nruntime/oti/options.h, runtime/vm/options.inc, and\nruntime/vm/options.c .\n\nFor now, I have only included two options in this new facility:\nMaxHeapSize and MaxDirectMemorySize. These options are required\nby the elasticsearch project, so I started with these. With this\nfacility implemented at OpenJ9, elasticsearch no longer NPEs on\nstartup and, in my local testing, all their tests pass on OpenJ9.\n\nI tried to match, as closely as possible, the output Hotspot\ngenerates when one uses -XX:+PrintFlagsFinal, which includes the\nnames used for types (e.g. size_t or uint64_t), the option names,\nthe option category (e.g. {product} or {diagnostic}), the way the\noption is set (e.g. {default} or {ergonomic} or {command line}),\nand the field sizes produced by a JDK11 Hotspot build. I did some\nresearch online to find the set of types and such.\n\nIn options.c are found the main data structures that represent\nthe options. I build a static array with the list of options\nand that array has a slot to hold the option's value. Since\nOpenJ9's existing option handling code is distributed across\nmultiple components that all record options differently, I chose\nto centralize the options for PrintFlagsFinal in this array which\nmeans the option values need to be fetched from other spots to\nfill in the array. That's not ideal. Going forward, I think we can\nprobably do better, but this is a starting point that works\nreasonably well for simple options. By creating something independent\nof the existing options framework, it's relatively easy to decide\nif an option has been set on the command-line or not using the\nstandard `findArgInVMArgs()` service.\n\nI don't think this framework represents an architectural direction;\nI was just trying to put something relatively useful and reasonably\nextensible in place that could hold us over until a more comprehensive\noptions framework rework (across components and probably across OMR\nas well) can be undertaken.\n\nFixes: 7764\n\nSigned-off-by: Mark Stoodley <mstoodle@ca.ibm.com>"}, "afterCommit": {"oid": "43fdb2d456a42b455995529aad2ad8378ba991a9", "author": {"user": {"login": "mstoodle", "name": "Mark Stoodley"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/43fdb2d456a42b455995529aad2ad8378ba991a9", "committedDate": "2020-05-15T04:15:14Z", "message": "Simple incomplete implementation for PrintFlagsFinal\n\nA simple implementation of VM options that can be used to produce\nthe -XX:+PrintFlagsFinal output. I began separating out options\nrelated code (very little of it at this point) into new files\nruntime/oti/options.h, runtime/vm/options.inc, and\nruntime/vm/options.c .\n\nFor now, I have only included two options in this new facility:\nMaxHeapSize and MaxDirectMemorySize. These options are required\nby the elasticsearch project, so I started with these. With this\nfacility implemented at OpenJ9, elasticsearch no longer NPEs on\nstartup and, in my local testing, all their tests pass on OpenJ9.\n\nI tried to match, as closely as possible, the output Hotspot\ngenerates when one uses -XX:+PrintFlagsFinal, which includes the\nnames used for types (e.g. size_t or uint64_t), the option names,\nthe option category (e.g. {product} or {diagnostic}), the way the\noption is set (e.g. {default} or {ergonomic} or {command line}),\nand the field sizes produced by a JDK11 Hotspot build. I did some\nresearch online to find the set of types and such.\n\nIn options.c are found the main data structures that represent\nthe options. I build a static array with the list of options\nand that array has a slot to hold the option's value. Since\nOpenJ9's existing option handling code is distributed across\nmultiple components that all record options differently, I chose\nto centralize the options for PrintFlagsFinal in this array which\nmeans the option values need to be fetched from other spots to\nfill in the array. That's not ideal. Going forward, I think we can\nprobably do better, but this is a starting point that works\nreasonably well for simple options. By creating something independent\nof the existing options framework, it's relatively easy to decide\nif an option has been set on the command-line or not using the\nstandard `findArgInVMArgs()` service.\n\nI don't think this framework represents an architectural direction;\nI was just trying to put something relatively useful and reasonably\nextensible in place that could hold us over until a more comprehensive\noptions framework rework (across components and probably across OMR\nas well) can be undertaken.\n\nFixes: 7764\n\nSigned-off-by: Mark Stoodley <mstoodle@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyNzM3ODU2", "url": "https://github.com/eclipse-openj9/openj9/pull/9567#pullrequestreview-412737856", "createdAt": "2020-05-15T15:13:54Z", "commit": {"oid": "43fdb2d456a42b455995529aad2ad8378ba991a9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNToxMzo1NFrOGWJC5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNToxMzo1NFrOGWJC5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg3MDA1NQ==", "bodyText": "This should use a NLS string. Similarly the option_category_string[] and option_howset_string[].\nAlso, pls fix the indenting here.", "url": "https://github.com/eclipse-openj9/openj9/pull/9567#discussion_r425870055", "createdAt": "2020-05-15T15:13:54Z", "author": {"login": "pshipton"}, "path": "runtime/vm/options.c", "diffHunk": "@@ -0,0 +1,240 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+\n+#include <stdio.h>\n+#include <assert.h>\n+#include \"j9protos.h\"\n+#include \"jvminitcommon.h\"\n+#include \"options.h\"\n+\n+\n+/*\n+ * Example -XX:+PrintFlagsFinal output: (Hotspot calls them \"Flags\" but OpenJ9 terminology is \"options\")\n+ *\n+ * [Global flags]\n+ *    size_t MaxHeapSize                              = 4294967296                                {product} {ergonomic}\n+ *  uint64_t MaxDirectMemorySize                      = 3758096384                                {product} {default}\n+ *\n+ * First column is the type of the option\n+ * Second column is the name of the option\n+ * Third column is the value of the option\n+ * Fourth column is a category for the option: product, experimental, etc.\n+ * Fifth column describes how the option's value was set: default setting, by command line, or via ergonomics (heuristics)\n+ */\n+\n+\n+/* Option types (first ten entries for compatibility) */\n+#define TYPE_BOOL 0\n+#define TYPE_CCSTR 1\n+#define TYPE_CCSTRLIST 2\n+#define TYPE_DOUBLE 3\n+#define TYPE_INT 4\n+#define TYPE_INTX 5\n+#define TYPE_SIZET 6\n+#define TYPE_UINT 7\n+#define TYPE_UINT64T 8\n+#define TYPE_UINTX 9\n+\n+static char *option_type_string[] = {\n+\t\"bool\",\n+\t\"ccstr\",\n+\t\"ccstrlist\",\n+\t\"double\",\n+\t\"int\",\n+\t\"intx\",\n+\t\"size_t\",\n+\t\"uint\",\n+\t\"uint64_t\",\n+\t\"uintx\"\n+};\n+#define NUM_TYPE_STRINGS\t(sizeof(option_type_string) / sizeof(char *))\n+\n+typedef union J9OptionValue {\n+\tUDATA v_uintx;\n+\tU_64 v_uint64;\n+\tsize_t v_sizet;\n+\tdouble v_double;\n+\tchar *v_ccstr;\n+\tchar **v_ccstrlist;\n+\tU_32 v_uint;\n+\tIDATA v_intx;\n+\tI_8 v_bool;\n+} J9OptionValue;\n+\n+#define CAT_PRODUCT\t\t0\n+#define CAT_ARCHPRODUCT\t\t1\n+#define CAT_PDPRODUCT\t\t2\n+#define CAT_PRODUCTRW\t\t3\n+#define CAT_DIAGNOSTIC\t\t4\n+#define CAT_EXPERIMENTAL\t5\n+#define CAT_MANAGEABLE\t\t6\n+\n+static char *option_category_string[] = {\n+\t\"{product}\",\n+\t\"{ARCH product}\",\n+\t\"{pd product}\",\n+\t\"{product rw}\",\n+\t\"{diagnostic}\",\n+\t\"{experimental}\",\n+\t\"{manageable}\",\n+};\n+#define NUM_CATEGORY_STRINGS\t(sizeof(option_category_string) / sizeof(char *))\n+\n+#define SET_DEFAULT\t0\n+#define SET_COMMANDLINE\t1\n+#define SET_ERGONOMIC\t2\n+\n+static char *option_howset_string[] = {\n+\t\"{default}\",\n+\t\"{command line}\",\n+\t\"{ergonomic}\"\n+};\n+#define NUM_HOWSET_STRINGS\t(sizeof(option_howset_string) / sizeof(char *))\n+\n+typedef struct J9OptionDesc {\n+\tchar * name;\n+\tI_8 type;\n+\tI_8 category;\n+\tI_8 howset;\n+\tJ9OptionValue value;\n+} J9OptionDesc;\n+\n+\n+/* options_enum gives each option an index starting from zero */\n+typedef enum options_enum {\n+\tNoOption=-1,\n+\n+\t#define OPTION(n,t,cats) IDX_ ## n,\n+\t#include \"options.inc\"\n+\t#undef OPTION\n+} options_enum;\n+\n+/* options array lists all options, same order as options_enum */\n+static J9OptionDesc options[]={\n+\t#define OPTION(n,t,cats) { n, t, cats, SET_DEFAULT, { 0 } },\n+\t#include \"options.inc\"\n+\t#undef OPTION\n+};\n+#define NUM_OPTIONS\t(sizeof(options)/sizeof(J9OptionDesc))\n+\n+\n+/*\n+ * SET_OPTION0 is the basic facility to initialize an element of the options array, but cumbersome to use directly\n+ * See following macros which are more convenient for direct use.\n+ *\n+ * option is an index from options_enum\n+ * cmdLineOption is a string listing the command line option that would be stored in VMArgs\n+ * vtype is the name of a field in J9OptionValue with the correct type for the option\n+ * setValue is the value of the option which must be assignable to the vtype field of J9OptionValue\n+ * defaultSource is one of the HOWSET_* values\n+ * OTHER_CHECKS is code that will be appended to the check if cmdLineOption is present in VMArgs\n+ *\tit can be used to expand the conditions under which the option will be considered set on the command line\n+ */\n+#define SET_OPTION0(option, cmdLineOption, vtype, setValue, defaultSource, OTHER_CHECKS) \\\n+\tassert(option < NUM_OPTIONS); \\\n+\to = options + option; \\\n+\to->value.vtype = (setValue); \\\n+\tif ((findArgInVMArgs( PORTLIB, vm->vmArgsArray, STARTSWITH_MATCH, cmdLineOption, NULL, 0) >= 0) OTHER_CHECKS) { \\\n+\t\to->howset = SET_COMMANDLINE; \\\n+\t} else { \\\n+\t\to->howset = (defaultSource); \\\n+\t}\n+\n+/*\n+ * More usable SET_OPTION for simple options that have no command line aliases\n+ * See parameter definitions for SET_OPTION0\n+ */\n+#define SET_OPTION(option, cmdLineOption, vtype, setValue, defaultSource) \\\n+\tSET_OPTION0(option, cmdLineOption, vtype, setValue, defaultSource, )\n+\n+/*\n+ * Version of SET_OPTION when two command line options alias to one another\n+ * The presence of either command line option will initialize the option with HOWSET_COMMANDLINE\n+ * See parameter definitions for SET_OPTION0\n+ * Also: aliasCmdLineOption is a string for a command line option that is an alias for cmdLineOption\n+ */\n+#define SET_OPTION_WITH_ALIAS(option, cmdLineOption, aliasCmdLineOption, vtype, setValue, defaultSource) \\\n+\tSET_OPTION0(option, cmdLineOption, vtype, setValue, defaultSource, \\\n+\t\t|| (findArgInVMArgs( PORTLIB, vm->vmArgsArray, STARTSWITH_MATCH, aliasCmdLineOption, NULL, 0) >= 0))\n+\n+/*\n+ * Following two macros can be used for options whose default values are HOWSET_ERGONOMIC and HOWSET_DEFAULT\n+ * See parameter definitions for SET_OPTION0\n+ */\n+\n+#define SET_ERGONOMIC_OPTION(option, cmdLineOption, vtype, value) SET_OPTION(option, cmdLineOption, vtype, value, SET_ERGONOMIC)\n+#define SET_DEFAULT_OPTION(option, cmdLineOption, value) SET_OPTION(option, cmdLineOption, value, SET_DEFAULT)\n+\n+/*\n+ * Following two macros can be used for -X options whose default values are HOWSET_ERGONONIC and HOWSET_DEFAULT\n+ * See parameter definitions for SET_OPTION0\n+ * cmdLineOption is derived automatically from the name provided for option\n+ */\n+#define SET_ERGONOMIC_XOPTION(option, vtype, value) SET_OPTION(IDX_VMOPT_ ## option, VMOPT_ ## X ## option, vtype, value, SET_ERGONOMIC)\n+#define SET_DEFAULT_XOPTION(option, vtype, value) SET_OPTION(IDX_VMOPT_ ## option, VMOPT_ ## X ## option, vtype, value, SET_DEFAULT)\n+\n+/*\n+ * Following two macros can be used for -XX options whose default values are HOWSET_ERGONONIC and HOWSET_DEFAULT\n+ * See parameter definitions for SET_OPTION0\n+ * cmdLineOption is derived automatically from the name provided for option\n+ */\n+#define SET_ERGONOMIC_XXOPTION(option, vtype, value) SET_OPTION(IDX_VMOPT_ ## option, VMOPT_ ## XX ## option, vtype, value, SET_ERGONOMIC)\n+#define SET_DEFAULT_XXOPTION(option, vtype, value) SET_OPTION(IDX_VMOPT_ ## option, VMOPT_ ## XX ## option, vtype, value, SET_DEFAULT)\n+\n+void initializeFlags(J9JavaVM* vm) {\n+\tJ9OptionDesc *o;\n+\tPORT_ACCESS_FROM_JAVAVM(vm);\n+\n+\tSET_OPTION_WITH_ALIAS(IDX_VMOPT_MAXHEAPSIZE, VMOPT_XMX, VMOPT_XXMAXHEAPSIZE, v_sizet, vm->memoryManagerFunctions->j9gc_get_maximum_heap_size(vm), SET_ERGONOMIC);\n+\tSET_ERGONOMIC_XXOPTION(MAXDIRECTMEMORYSIZE, v_uint64, vm->directByteBufferMemoryMax);\n+}\n+\n+/* Prints final flags (options) to the console. The list of options printed is not yet complete. */\n+void printFlags(J9JavaVM* vm) {\n+\tPORT_ACCESS_FROM_JAVAVM(vm);\n+\n+        j9tty_printf(PORTLIB, \"[Global flags]\\n\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fdb2d456a42b455995529aad2ad8378ba991a9"}, "originalPosition": 215}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyNzQxMzcw", "url": "https://github.com/eclipse-openj9/openj9/pull/9567#pullrequestreview-412741370", "createdAt": "2020-05-15T15:17:58Z", "commit": {"oid": "43fdb2d456a42b455995529aad2ad8378ba991a9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNToxNzo1OFrOGWJN2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNToxNzo1OFrOGWJN2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg3Mjg1OQ==", "bodyText": "This should indent via tabs to match the surrounding code.", "url": "https://github.com/eclipse-openj9/openj9/pull/9567#discussion_r425872859", "createdAt": "2020-05-15T15:17:58Z", "author": {"login": "pshipton"}, "path": "runtime/vm/jvminit.c", "diffHunk": "@@ -6349,6 +6350,15 @@ protectedInitializeJavaVM(J9PortLibrary* portLibrary, void * userData)\n \tXj9BreakPoint(\"jvminit\");\n #endif\n \n+        {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fdb2d456a42b455995529aad2ad8378ba991a9"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyODQzNzcy", "url": "https://github.com/eclipse-openj9/openj9/pull/9567#pullrequestreview-412843772", "createdAt": "2020-05-15T17:40:13Z", "commit": {"oid": "43fdb2d456a42b455995529aad2ad8378ba991a9"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNzo0MDoxM1rOGWODZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNzo1ODo1N1rOGWOo-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk1MjEwMg==", "bodyText": "This is a neat approach but different than we do with other options.  I'd prefer not to introduce this difference for one option without a compelling reason.  Same rationale for -XX:MaxHeapSize= below", "url": "https://github.com/eclipse-openj9/openj9/pull/9567#discussion_r425952102", "createdAt": "2020-05-15T17:40:13Z", "author": {"login": "DanHeidinga"}, "path": "runtime/oti/jvminit.h", "diffHunk": "@@ -334,7 +336,7 @@ enum INIT_STAGE {\n \n #define VMOPT_XSOFTREFTHRESHOLD \"-XSoftRefThreshold\"\n #define VMOPT_XAGGRESSIVE \"-Xaggressive\"\n-#define VMOPT_XXMAXDIRECTMEMORYSIZEEQUALS \"-XX:MaxDirectMemorySize=\"\n+#define VMOPT_XXMAXDIRECTMEMORYSIZEEQUALS (VMOPT_XXMAXDIRECTMEMORYSIZE \"=\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fdb2d456a42b455995529aad2ad8378ba991a9"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk2MTcyMg==", "bodyText": "I don't see these being used anywhere.  Did I miss something?", "url": "https://github.com/eclipse-openj9/openj9/pull/9567#discussion_r425961722", "createdAt": "2020-05-15T17:58:57Z", "author": {"login": "DanHeidinga"}, "path": "runtime/oti/jvminit.h", "diffHunk": "@@ -542,6 +544,12 @@ enum INIT_STAGE {\n #define VMOPT_XXSHOW_EXTENDED_NPE_MESSAGE \"-XX:+ShowCodeDetailsInExceptionMessages\"\n #define VMOPT_XXNOSHOW_EXTENDED_NPE_MESSAGE \"-XX:-ShowCodeDetailsInExceptionMessages\"\n \n+/* Print flag values */\n+#define VMOPT_XXPRINTFLAGSINITIALENABLE \"-XX:+PrintFlagsInitial\"\n+#define VMOPT_XXPRINTFLAGSINITIALDISABLE \"-XX:-PrintFlagsInitial\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fdb2d456a42b455995529aad2ad8378ba991a9"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0NTc3MDUz", "url": "https://github.com/eclipse-openj9/openj9/pull/9567#pullrequestreview-414577053", "createdAt": "2020-05-19T15:39:41Z", "commit": {"oid": "43fdb2d456a42b455995529aad2ad8378ba991a9"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNTozOTo0MVrOGXmjEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNjowMzoxM1rOGXnlTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQwMjAwMg==", "bodyText": "Either parentheses are missing in the VMOPT_XX definitions or (as it seems @DanHeidinga would prefer) the -XX: prefix should just be folded into the string literals.", "url": "https://github.com/eclipse-openj9/openj9/pull/9567#discussion_r427402002", "createdAt": "2020-05-19T15:39:41Z", "author": {"login": "keithc-ca"}, "path": "runtime/oti/options.h", "diffHunk": "@@ -0,0 +1,38 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+\n+#ifndef OPTIONS_H\n+#define OPTIONS_H\n+\n+struct J9JavaVM;\n+void initializeFlags(struct J9JavaVM* vm);\n+void printFlags(struct J9JavaVM* vm);\n+\n+#define XXCOLON \"-XX:\"\n+#define VMOPT_MAXHEAPSIZE \"MaxHeapSize\"\n+#define VMOPT_XXMAXHEAPSIZE XXCOLON VMOPT_MAXHEAPSIZE\n+\n+#define VMOPT_MAXDIRECTMEMORYSIZE \"MaxDirectMemorySize\"\n+#define VMOPT_XXMAXDIRECTMEMORYSIZE XXCOLON VMOPT_MAXDIRECTMEMORYSIZE", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fdb2d456a42b455995529aad2ad8378ba991a9"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQwMzgzMA==", "bodyText": "This include is redundant (see jvminit.h).", "url": "https://github.com/eclipse-openj9/openj9/pull/9567#discussion_r427403830", "createdAt": "2020-05-19T15:42:07Z", "author": {"login": "keithc-ca"}, "path": "runtime/vm/jvminit.c", "diffHunk": "@@ -80,6 +80,7 @@\n #include \"bcnames.h\"\n #include \"jimagereader.h\"\n #include \"vendor_version.h\"\n+#include \"options.h\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fdb2d456a42b455995529aad2ad8378ba991a9"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQwNTI0NQ==", "bodyText": "The type should be const char * const[].", "url": "https://github.com/eclipse-openj9/openj9/pull/9567#discussion_r427405245", "createdAt": "2020-05-19T15:44:02Z", "author": {"login": "keithc-ca"}, "path": "runtime/vm/options.c", "diffHunk": "@@ -0,0 +1,240 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+\n+#include <stdio.h>\n+#include <assert.h>\n+#include \"j9protos.h\"\n+#include \"jvminitcommon.h\"\n+#include \"options.h\"\n+\n+\n+/*\n+ * Example -XX:+PrintFlagsFinal output: (Hotspot calls them \"Flags\" but OpenJ9 terminology is \"options\")\n+ *\n+ * [Global flags]\n+ *    size_t MaxHeapSize                              = 4294967296                                {product} {ergonomic}\n+ *  uint64_t MaxDirectMemorySize                      = 3758096384                                {product} {default}\n+ *\n+ * First column is the type of the option\n+ * Second column is the name of the option\n+ * Third column is the value of the option\n+ * Fourth column is a category for the option: product, experimental, etc.\n+ * Fifth column describes how the option's value was set: default setting, by command line, or via ergonomics (heuristics)\n+ */\n+\n+\n+/* Option types (first ten entries for compatibility) */\n+#define TYPE_BOOL 0\n+#define TYPE_CCSTR 1\n+#define TYPE_CCSTRLIST 2\n+#define TYPE_DOUBLE 3\n+#define TYPE_INT 4\n+#define TYPE_INTX 5\n+#define TYPE_SIZET 6\n+#define TYPE_UINT 7\n+#define TYPE_UINT64T 8\n+#define TYPE_UINTX 9\n+\n+static char *option_type_string[] = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fdb2d456a42b455995529aad2ad8378ba991a9"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQwOTY5MA==", "bodyText": "Suggest: (sizeof(option_type_string) / sizeof(option_type_string[0])) so it can't be out of sync with the element type. Likewise for NUM_CATEGORY_STRINGS and NUM_HOWSET_STRINGS, etc. below.", "url": "https://github.com/eclipse-openj9/openj9/pull/9567#discussion_r427409690", "createdAt": "2020-05-19T15:50:20Z", "author": {"login": "keithc-ca"}, "path": "runtime/vm/options.c", "diffHunk": "@@ -0,0 +1,240 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+\n+#include <stdio.h>\n+#include <assert.h>\n+#include \"j9protos.h\"\n+#include \"jvminitcommon.h\"\n+#include \"options.h\"\n+\n+\n+/*\n+ * Example -XX:+PrintFlagsFinal output: (Hotspot calls them \"Flags\" but OpenJ9 terminology is \"options\")\n+ *\n+ * [Global flags]\n+ *    size_t MaxHeapSize                              = 4294967296                                {product} {ergonomic}\n+ *  uint64_t MaxDirectMemorySize                      = 3758096384                                {product} {default}\n+ *\n+ * First column is the type of the option\n+ * Second column is the name of the option\n+ * Third column is the value of the option\n+ * Fourth column is a category for the option: product, experimental, etc.\n+ * Fifth column describes how the option's value was set: default setting, by command line, or via ergonomics (heuristics)\n+ */\n+\n+\n+/* Option types (first ten entries for compatibility) */\n+#define TYPE_BOOL 0\n+#define TYPE_CCSTR 1\n+#define TYPE_CCSTRLIST 2\n+#define TYPE_DOUBLE 3\n+#define TYPE_INT 4\n+#define TYPE_INTX 5\n+#define TYPE_SIZET 6\n+#define TYPE_UINT 7\n+#define TYPE_UINT64T 8\n+#define TYPE_UINTX 9\n+\n+static char *option_type_string[] = {\n+\t\"bool\",\n+\t\"ccstr\",\n+\t\"ccstrlist\",\n+\t\"double\",\n+\t\"int\",\n+\t\"intx\",\n+\t\"size_t\",\n+\t\"uint\",\n+\t\"uint64_t\",\n+\t\"uintx\"\n+};\n+#define NUM_TYPE_STRINGS\t(sizeof(option_type_string) / sizeof(char *))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fdb2d456a42b455995529aad2ad8378ba991a9"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQxNDY0OQ==", "bodyText": "This should be surrounded by do { ... } while (0) to avoid syntactic surprises.\nUses of macro arguments should be parenthesized.\no should be a local variable in that do loop (perhaps with a better name).", "url": "https://github.com/eclipse-openj9/openj9/pull/9567#discussion_r427414649", "createdAt": "2020-05-19T15:57:12Z", "author": {"login": "keithc-ca"}, "path": "runtime/vm/options.c", "diffHunk": "@@ -0,0 +1,240 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+\n+#include <stdio.h>\n+#include <assert.h>\n+#include \"j9protos.h\"\n+#include \"jvminitcommon.h\"\n+#include \"options.h\"\n+\n+\n+/*\n+ * Example -XX:+PrintFlagsFinal output: (Hotspot calls them \"Flags\" but OpenJ9 terminology is \"options\")\n+ *\n+ * [Global flags]\n+ *    size_t MaxHeapSize                              = 4294967296                                {product} {ergonomic}\n+ *  uint64_t MaxDirectMemorySize                      = 3758096384                                {product} {default}\n+ *\n+ * First column is the type of the option\n+ * Second column is the name of the option\n+ * Third column is the value of the option\n+ * Fourth column is a category for the option: product, experimental, etc.\n+ * Fifth column describes how the option's value was set: default setting, by command line, or via ergonomics (heuristics)\n+ */\n+\n+\n+/* Option types (first ten entries for compatibility) */\n+#define TYPE_BOOL 0\n+#define TYPE_CCSTR 1\n+#define TYPE_CCSTRLIST 2\n+#define TYPE_DOUBLE 3\n+#define TYPE_INT 4\n+#define TYPE_INTX 5\n+#define TYPE_SIZET 6\n+#define TYPE_UINT 7\n+#define TYPE_UINT64T 8\n+#define TYPE_UINTX 9\n+\n+static char *option_type_string[] = {\n+\t\"bool\",\n+\t\"ccstr\",\n+\t\"ccstrlist\",\n+\t\"double\",\n+\t\"int\",\n+\t\"intx\",\n+\t\"size_t\",\n+\t\"uint\",\n+\t\"uint64_t\",\n+\t\"uintx\"\n+};\n+#define NUM_TYPE_STRINGS\t(sizeof(option_type_string) / sizeof(char *))\n+\n+typedef union J9OptionValue {\n+\tUDATA v_uintx;\n+\tU_64 v_uint64;\n+\tsize_t v_sizet;\n+\tdouble v_double;\n+\tchar *v_ccstr;\n+\tchar **v_ccstrlist;\n+\tU_32 v_uint;\n+\tIDATA v_intx;\n+\tI_8 v_bool;\n+} J9OptionValue;\n+\n+#define CAT_PRODUCT\t\t0\n+#define CAT_ARCHPRODUCT\t\t1\n+#define CAT_PDPRODUCT\t\t2\n+#define CAT_PRODUCTRW\t\t3\n+#define CAT_DIAGNOSTIC\t\t4\n+#define CAT_EXPERIMENTAL\t5\n+#define CAT_MANAGEABLE\t\t6\n+\n+static char *option_category_string[] = {\n+\t\"{product}\",\n+\t\"{ARCH product}\",\n+\t\"{pd product}\",\n+\t\"{product rw}\",\n+\t\"{diagnostic}\",\n+\t\"{experimental}\",\n+\t\"{manageable}\",\n+};\n+#define NUM_CATEGORY_STRINGS\t(sizeof(option_category_string) / sizeof(char *))\n+\n+#define SET_DEFAULT\t0\n+#define SET_COMMANDLINE\t1\n+#define SET_ERGONOMIC\t2\n+\n+static char *option_howset_string[] = {\n+\t\"{default}\",\n+\t\"{command line}\",\n+\t\"{ergonomic}\"\n+};\n+#define NUM_HOWSET_STRINGS\t(sizeof(option_howset_string) / sizeof(char *))\n+\n+typedef struct J9OptionDesc {\n+\tchar * name;\n+\tI_8 type;\n+\tI_8 category;\n+\tI_8 howset;\n+\tJ9OptionValue value;\n+} J9OptionDesc;\n+\n+\n+/* options_enum gives each option an index starting from zero */\n+typedef enum options_enum {\n+\tNoOption=-1,\n+\n+\t#define OPTION(n,t,cats) IDX_ ## n,\n+\t#include \"options.inc\"\n+\t#undef OPTION\n+} options_enum;\n+\n+/* options array lists all options, same order as options_enum */\n+static J9OptionDesc options[]={\n+\t#define OPTION(n,t,cats) { n, t, cats, SET_DEFAULT, { 0 } },\n+\t#include \"options.inc\"\n+\t#undef OPTION\n+};\n+#define NUM_OPTIONS\t(sizeof(options)/sizeof(J9OptionDesc))\n+\n+\n+/*\n+ * SET_OPTION0 is the basic facility to initialize an element of the options array, but cumbersome to use directly\n+ * See following macros which are more convenient for direct use.\n+ *\n+ * option is an index from options_enum\n+ * cmdLineOption is a string listing the command line option that would be stored in VMArgs\n+ * vtype is the name of a field in J9OptionValue with the correct type for the option\n+ * setValue is the value of the option which must be assignable to the vtype field of J9OptionValue\n+ * defaultSource is one of the HOWSET_* values\n+ * OTHER_CHECKS is code that will be appended to the check if cmdLineOption is present in VMArgs\n+ *\tit can be used to expand the conditions under which the option will be considered set on the command line\n+ */\n+#define SET_OPTION0(option, cmdLineOption, vtype, setValue, defaultSource, OTHER_CHECKS) \\\n+\tassert(option < NUM_OPTIONS); \\\n+\to = options + option; \\\n+\to->value.vtype = (setValue); \\\n+\tif ((findArgInVMArgs( PORTLIB, vm->vmArgsArray, STARTSWITH_MATCH, cmdLineOption, NULL, 0) >= 0) OTHER_CHECKS) { \\\n+\t\to->howset = SET_COMMANDLINE; \\\n+\t} else { \\\n+\t\to->howset = (defaultSource); \\\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fdb2d456a42b455995529aad2ad8378ba991a9"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQxNzkxOA==", "bodyText": "Formatting: space around = and after ;.", "url": "https://github.com/eclipse-openj9/openj9/pull/9567#discussion_r427417918", "createdAt": "2020-05-19T16:01:48Z", "author": {"login": "keithc-ca"}, "path": "runtime/vm/options.c", "diffHunk": "@@ -0,0 +1,240 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+\n+#include <stdio.h>\n+#include <assert.h>\n+#include \"j9protos.h\"\n+#include \"jvminitcommon.h\"\n+#include \"options.h\"\n+\n+\n+/*\n+ * Example -XX:+PrintFlagsFinal output: (Hotspot calls them \"Flags\" but OpenJ9 terminology is \"options\")\n+ *\n+ * [Global flags]\n+ *    size_t MaxHeapSize                              = 4294967296                                {product} {ergonomic}\n+ *  uint64_t MaxDirectMemorySize                      = 3758096384                                {product} {default}\n+ *\n+ * First column is the type of the option\n+ * Second column is the name of the option\n+ * Third column is the value of the option\n+ * Fourth column is a category for the option: product, experimental, etc.\n+ * Fifth column describes how the option's value was set: default setting, by command line, or via ergonomics (heuristics)\n+ */\n+\n+\n+/* Option types (first ten entries for compatibility) */\n+#define TYPE_BOOL 0\n+#define TYPE_CCSTR 1\n+#define TYPE_CCSTRLIST 2\n+#define TYPE_DOUBLE 3\n+#define TYPE_INT 4\n+#define TYPE_INTX 5\n+#define TYPE_SIZET 6\n+#define TYPE_UINT 7\n+#define TYPE_UINT64T 8\n+#define TYPE_UINTX 9\n+\n+static char *option_type_string[] = {\n+\t\"bool\",\n+\t\"ccstr\",\n+\t\"ccstrlist\",\n+\t\"double\",\n+\t\"int\",\n+\t\"intx\",\n+\t\"size_t\",\n+\t\"uint\",\n+\t\"uint64_t\",\n+\t\"uintx\"\n+};\n+#define NUM_TYPE_STRINGS\t(sizeof(option_type_string) / sizeof(char *))\n+\n+typedef union J9OptionValue {\n+\tUDATA v_uintx;\n+\tU_64 v_uint64;\n+\tsize_t v_sizet;\n+\tdouble v_double;\n+\tchar *v_ccstr;\n+\tchar **v_ccstrlist;\n+\tU_32 v_uint;\n+\tIDATA v_intx;\n+\tI_8 v_bool;\n+} J9OptionValue;\n+\n+#define CAT_PRODUCT\t\t0\n+#define CAT_ARCHPRODUCT\t\t1\n+#define CAT_PDPRODUCT\t\t2\n+#define CAT_PRODUCTRW\t\t3\n+#define CAT_DIAGNOSTIC\t\t4\n+#define CAT_EXPERIMENTAL\t5\n+#define CAT_MANAGEABLE\t\t6\n+\n+static char *option_category_string[] = {\n+\t\"{product}\",\n+\t\"{ARCH product}\",\n+\t\"{pd product}\",\n+\t\"{product rw}\",\n+\t\"{diagnostic}\",\n+\t\"{experimental}\",\n+\t\"{manageable}\",\n+};\n+#define NUM_CATEGORY_STRINGS\t(sizeof(option_category_string) / sizeof(char *))\n+\n+#define SET_DEFAULT\t0\n+#define SET_COMMANDLINE\t1\n+#define SET_ERGONOMIC\t2\n+\n+static char *option_howset_string[] = {\n+\t\"{default}\",\n+\t\"{command line}\",\n+\t\"{ergonomic}\"\n+};\n+#define NUM_HOWSET_STRINGS\t(sizeof(option_howset_string) / sizeof(char *))\n+\n+typedef struct J9OptionDesc {\n+\tchar * name;\n+\tI_8 type;\n+\tI_8 category;\n+\tI_8 howset;\n+\tJ9OptionValue value;\n+} J9OptionDesc;\n+\n+\n+/* options_enum gives each option an index starting from zero */\n+typedef enum options_enum {\n+\tNoOption=-1,\n+\n+\t#define OPTION(n,t,cats) IDX_ ## n,\n+\t#include \"options.inc\"\n+\t#undef OPTION\n+} options_enum;\n+\n+/* options array lists all options, same order as options_enum */\n+static J9OptionDesc options[]={\n+\t#define OPTION(n,t,cats) { n, t, cats, SET_DEFAULT, { 0 } },\n+\t#include \"options.inc\"\n+\t#undef OPTION\n+};\n+#define NUM_OPTIONS\t(sizeof(options)/sizeof(J9OptionDesc))\n+\n+\n+/*\n+ * SET_OPTION0 is the basic facility to initialize an element of the options array, but cumbersome to use directly\n+ * See following macros which are more convenient for direct use.\n+ *\n+ * option is an index from options_enum\n+ * cmdLineOption is a string listing the command line option that would be stored in VMArgs\n+ * vtype is the name of a field in J9OptionValue with the correct type for the option\n+ * setValue is the value of the option which must be assignable to the vtype field of J9OptionValue\n+ * defaultSource is one of the HOWSET_* values\n+ * OTHER_CHECKS is code that will be appended to the check if cmdLineOption is present in VMArgs\n+ *\tit can be used to expand the conditions under which the option will be considered set on the command line\n+ */\n+#define SET_OPTION0(option, cmdLineOption, vtype, setValue, defaultSource, OTHER_CHECKS) \\\n+\tassert(option < NUM_OPTIONS); \\\n+\to = options + option; \\\n+\to->value.vtype = (setValue); \\\n+\tif ((findArgInVMArgs( PORTLIB, vm->vmArgsArray, STARTSWITH_MATCH, cmdLineOption, NULL, 0) >= 0) OTHER_CHECKS) { \\\n+\t\to->howset = SET_COMMANDLINE; \\\n+\t} else { \\\n+\t\to->howset = (defaultSource); \\\n+\t}\n+\n+/*\n+ * More usable SET_OPTION for simple options that have no command line aliases\n+ * See parameter definitions for SET_OPTION0\n+ */\n+#define SET_OPTION(option, cmdLineOption, vtype, setValue, defaultSource) \\\n+\tSET_OPTION0(option, cmdLineOption, vtype, setValue, defaultSource, )\n+\n+/*\n+ * Version of SET_OPTION when two command line options alias to one another\n+ * The presence of either command line option will initialize the option with HOWSET_COMMANDLINE\n+ * See parameter definitions for SET_OPTION0\n+ * Also: aliasCmdLineOption is a string for a command line option that is an alias for cmdLineOption\n+ */\n+#define SET_OPTION_WITH_ALIAS(option, cmdLineOption, aliasCmdLineOption, vtype, setValue, defaultSource) \\\n+\tSET_OPTION0(option, cmdLineOption, vtype, setValue, defaultSource, \\\n+\t\t|| (findArgInVMArgs( PORTLIB, vm->vmArgsArray, STARTSWITH_MATCH, aliasCmdLineOption, NULL, 0) >= 0))\n+\n+/*\n+ * Following two macros can be used for options whose default values are HOWSET_ERGONOMIC and HOWSET_DEFAULT\n+ * See parameter definitions for SET_OPTION0\n+ */\n+\n+#define SET_ERGONOMIC_OPTION(option, cmdLineOption, vtype, value) SET_OPTION(option, cmdLineOption, vtype, value, SET_ERGONOMIC)\n+#define SET_DEFAULT_OPTION(option, cmdLineOption, value) SET_OPTION(option, cmdLineOption, value, SET_DEFAULT)\n+\n+/*\n+ * Following two macros can be used for -X options whose default values are HOWSET_ERGONONIC and HOWSET_DEFAULT\n+ * See parameter definitions for SET_OPTION0\n+ * cmdLineOption is derived automatically from the name provided for option\n+ */\n+#define SET_ERGONOMIC_XOPTION(option, vtype, value) SET_OPTION(IDX_VMOPT_ ## option, VMOPT_ ## X ## option, vtype, value, SET_ERGONOMIC)\n+#define SET_DEFAULT_XOPTION(option, vtype, value) SET_OPTION(IDX_VMOPT_ ## option, VMOPT_ ## X ## option, vtype, value, SET_DEFAULT)\n+\n+/*\n+ * Following two macros can be used for -XX options whose default values are HOWSET_ERGONONIC and HOWSET_DEFAULT\n+ * See parameter definitions for SET_OPTION0\n+ * cmdLineOption is derived automatically from the name provided for option\n+ */\n+#define SET_ERGONOMIC_XXOPTION(option, vtype, value) SET_OPTION(IDX_VMOPT_ ## option, VMOPT_ ## XX ## option, vtype, value, SET_ERGONOMIC)\n+#define SET_DEFAULT_XXOPTION(option, vtype, value) SET_OPTION(IDX_VMOPT_ ## option, VMOPT_ ## XX ## option, vtype, value, SET_DEFAULT)\n+\n+void initializeFlags(J9JavaVM* vm) {\n+\tJ9OptionDesc *o;\n+\tPORT_ACCESS_FROM_JAVAVM(vm);\n+\n+\tSET_OPTION_WITH_ALIAS(IDX_VMOPT_MAXHEAPSIZE, VMOPT_XMX, VMOPT_XXMAXHEAPSIZE, v_sizet, vm->memoryManagerFunctions->j9gc_get_maximum_heap_size(vm), SET_ERGONOMIC);\n+\tSET_ERGONOMIC_XXOPTION(MAXDIRECTMEMORYSIZE, v_uint64, vm->directByteBufferMemoryMax);\n+}\n+\n+/* Prints final flags (options) to the console. The list of options printed is not yet complete. */\n+void printFlags(J9JavaVM* vm) {\n+\tPORT_ACCESS_FROM_JAVAVM(vm);\n+\n+        j9tty_printf(PORTLIB, \"[Global flags]\\n\");\n+\tUDATA o_idx=0;\n+\tfor (o_idx = 0;o_idx < NUM_OPTIONS;o_idx++) {\n+\t\tJ9OptionDesc *o = options + o_idx;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fdb2d456a42b455995529aad2ad8378ba991a9"}, "originalPosition": 218}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQxODIyMQ==", "bodyText": "This declaration must move before the call to j9tty_printf above.", "url": "https://github.com/eclipse-openj9/openj9/pull/9567#discussion_r427418221", "createdAt": "2020-05-19T16:02:16Z", "author": {"login": "keithc-ca"}, "path": "runtime/vm/options.c", "diffHunk": "@@ -0,0 +1,240 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+\n+#include <stdio.h>\n+#include <assert.h>\n+#include \"j9protos.h\"\n+#include \"jvminitcommon.h\"\n+#include \"options.h\"\n+\n+\n+/*\n+ * Example -XX:+PrintFlagsFinal output: (Hotspot calls them \"Flags\" but OpenJ9 terminology is \"options\")\n+ *\n+ * [Global flags]\n+ *    size_t MaxHeapSize                              = 4294967296                                {product} {ergonomic}\n+ *  uint64_t MaxDirectMemorySize                      = 3758096384                                {product} {default}\n+ *\n+ * First column is the type of the option\n+ * Second column is the name of the option\n+ * Third column is the value of the option\n+ * Fourth column is a category for the option: product, experimental, etc.\n+ * Fifth column describes how the option's value was set: default setting, by command line, or via ergonomics (heuristics)\n+ */\n+\n+\n+/* Option types (first ten entries for compatibility) */\n+#define TYPE_BOOL 0\n+#define TYPE_CCSTR 1\n+#define TYPE_CCSTRLIST 2\n+#define TYPE_DOUBLE 3\n+#define TYPE_INT 4\n+#define TYPE_INTX 5\n+#define TYPE_SIZET 6\n+#define TYPE_UINT 7\n+#define TYPE_UINT64T 8\n+#define TYPE_UINTX 9\n+\n+static char *option_type_string[] = {\n+\t\"bool\",\n+\t\"ccstr\",\n+\t\"ccstrlist\",\n+\t\"double\",\n+\t\"int\",\n+\t\"intx\",\n+\t\"size_t\",\n+\t\"uint\",\n+\t\"uint64_t\",\n+\t\"uintx\"\n+};\n+#define NUM_TYPE_STRINGS\t(sizeof(option_type_string) / sizeof(char *))\n+\n+typedef union J9OptionValue {\n+\tUDATA v_uintx;\n+\tU_64 v_uint64;\n+\tsize_t v_sizet;\n+\tdouble v_double;\n+\tchar *v_ccstr;\n+\tchar **v_ccstrlist;\n+\tU_32 v_uint;\n+\tIDATA v_intx;\n+\tI_8 v_bool;\n+} J9OptionValue;\n+\n+#define CAT_PRODUCT\t\t0\n+#define CAT_ARCHPRODUCT\t\t1\n+#define CAT_PDPRODUCT\t\t2\n+#define CAT_PRODUCTRW\t\t3\n+#define CAT_DIAGNOSTIC\t\t4\n+#define CAT_EXPERIMENTAL\t5\n+#define CAT_MANAGEABLE\t\t6\n+\n+static char *option_category_string[] = {\n+\t\"{product}\",\n+\t\"{ARCH product}\",\n+\t\"{pd product}\",\n+\t\"{product rw}\",\n+\t\"{diagnostic}\",\n+\t\"{experimental}\",\n+\t\"{manageable}\",\n+};\n+#define NUM_CATEGORY_STRINGS\t(sizeof(option_category_string) / sizeof(char *))\n+\n+#define SET_DEFAULT\t0\n+#define SET_COMMANDLINE\t1\n+#define SET_ERGONOMIC\t2\n+\n+static char *option_howset_string[] = {\n+\t\"{default}\",\n+\t\"{command line}\",\n+\t\"{ergonomic}\"\n+};\n+#define NUM_HOWSET_STRINGS\t(sizeof(option_howset_string) / sizeof(char *))\n+\n+typedef struct J9OptionDesc {\n+\tchar * name;\n+\tI_8 type;\n+\tI_8 category;\n+\tI_8 howset;\n+\tJ9OptionValue value;\n+} J9OptionDesc;\n+\n+\n+/* options_enum gives each option an index starting from zero */\n+typedef enum options_enum {\n+\tNoOption=-1,\n+\n+\t#define OPTION(n,t,cats) IDX_ ## n,\n+\t#include \"options.inc\"\n+\t#undef OPTION\n+} options_enum;\n+\n+/* options array lists all options, same order as options_enum */\n+static J9OptionDesc options[]={\n+\t#define OPTION(n,t,cats) { n, t, cats, SET_DEFAULT, { 0 } },\n+\t#include \"options.inc\"\n+\t#undef OPTION\n+};\n+#define NUM_OPTIONS\t(sizeof(options)/sizeof(J9OptionDesc))\n+\n+\n+/*\n+ * SET_OPTION0 is the basic facility to initialize an element of the options array, but cumbersome to use directly\n+ * See following macros which are more convenient for direct use.\n+ *\n+ * option is an index from options_enum\n+ * cmdLineOption is a string listing the command line option that would be stored in VMArgs\n+ * vtype is the name of a field in J9OptionValue with the correct type for the option\n+ * setValue is the value of the option which must be assignable to the vtype field of J9OptionValue\n+ * defaultSource is one of the HOWSET_* values\n+ * OTHER_CHECKS is code that will be appended to the check if cmdLineOption is present in VMArgs\n+ *\tit can be used to expand the conditions under which the option will be considered set on the command line\n+ */\n+#define SET_OPTION0(option, cmdLineOption, vtype, setValue, defaultSource, OTHER_CHECKS) \\\n+\tassert(option < NUM_OPTIONS); \\\n+\to = options + option; \\\n+\to->value.vtype = (setValue); \\\n+\tif ((findArgInVMArgs( PORTLIB, vm->vmArgsArray, STARTSWITH_MATCH, cmdLineOption, NULL, 0) >= 0) OTHER_CHECKS) { \\\n+\t\to->howset = SET_COMMANDLINE; \\\n+\t} else { \\\n+\t\to->howset = (defaultSource); \\\n+\t}\n+\n+/*\n+ * More usable SET_OPTION for simple options that have no command line aliases\n+ * See parameter definitions for SET_OPTION0\n+ */\n+#define SET_OPTION(option, cmdLineOption, vtype, setValue, defaultSource) \\\n+\tSET_OPTION0(option, cmdLineOption, vtype, setValue, defaultSource, )\n+\n+/*\n+ * Version of SET_OPTION when two command line options alias to one another\n+ * The presence of either command line option will initialize the option with HOWSET_COMMANDLINE\n+ * See parameter definitions for SET_OPTION0\n+ * Also: aliasCmdLineOption is a string for a command line option that is an alias for cmdLineOption\n+ */\n+#define SET_OPTION_WITH_ALIAS(option, cmdLineOption, aliasCmdLineOption, vtype, setValue, defaultSource) \\\n+\tSET_OPTION0(option, cmdLineOption, vtype, setValue, defaultSource, \\\n+\t\t|| (findArgInVMArgs( PORTLIB, vm->vmArgsArray, STARTSWITH_MATCH, aliasCmdLineOption, NULL, 0) >= 0))\n+\n+/*\n+ * Following two macros can be used for options whose default values are HOWSET_ERGONOMIC and HOWSET_DEFAULT\n+ * See parameter definitions for SET_OPTION0\n+ */\n+\n+#define SET_ERGONOMIC_OPTION(option, cmdLineOption, vtype, value) SET_OPTION(option, cmdLineOption, vtype, value, SET_ERGONOMIC)\n+#define SET_DEFAULT_OPTION(option, cmdLineOption, value) SET_OPTION(option, cmdLineOption, value, SET_DEFAULT)\n+\n+/*\n+ * Following two macros can be used for -X options whose default values are HOWSET_ERGONONIC and HOWSET_DEFAULT\n+ * See parameter definitions for SET_OPTION0\n+ * cmdLineOption is derived automatically from the name provided for option\n+ */\n+#define SET_ERGONOMIC_XOPTION(option, vtype, value) SET_OPTION(IDX_VMOPT_ ## option, VMOPT_ ## X ## option, vtype, value, SET_ERGONOMIC)\n+#define SET_DEFAULT_XOPTION(option, vtype, value) SET_OPTION(IDX_VMOPT_ ## option, VMOPT_ ## X ## option, vtype, value, SET_DEFAULT)\n+\n+/*\n+ * Following two macros can be used for -XX options whose default values are HOWSET_ERGONONIC and HOWSET_DEFAULT\n+ * See parameter definitions for SET_OPTION0\n+ * cmdLineOption is derived automatically from the name provided for option\n+ */\n+#define SET_ERGONOMIC_XXOPTION(option, vtype, value) SET_OPTION(IDX_VMOPT_ ## option, VMOPT_ ## XX ## option, vtype, value, SET_ERGONOMIC)\n+#define SET_DEFAULT_XXOPTION(option, vtype, value) SET_OPTION(IDX_VMOPT_ ## option, VMOPT_ ## XX ## option, vtype, value, SET_DEFAULT)\n+\n+void initializeFlags(J9JavaVM* vm) {\n+\tJ9OptionDesc *o;\n+\tPORT_ACCESS_FROM_JAVAVM(vm);\n+\n+\tSET_OPTION_WITH_ALIAS(IDX_VMOPT_MAXHEAPSIZE, VMOPT_XMX, VMOPT_XXMAXHEAPSIZE, v_sizet, vm->memoryManagerFunctions->j9gc_get_maximum_heap_size(vm), SET_ERGONOMIC);\n+\tSET_ERGONOMIC_XXOPTION(MAXDIRECTMEMORYSIZE, v_uint64, vm->directByteBufferMemoryMax);\n+}\n+\n+/* Prints final flags (options) to the console. The list of options printed is not yet complete. */\n+void printFlags(J9JavaVM* vm) {\n+\tPORT_ACCESS_FROM_JAVAVM(vm);\n+\n+        j9tty_printf(PORTLIB, \"[Global flags]\\n\");\n+\tUDATA o_idx=0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fdb2d456a42b455995529aad2ad8378ba991a9"}, "originalPosition": 216}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQxODk1Nw==", "bodyText": "This would benefit from a comment explaining how these are used.", "url": "https://github.com/eclipse-openj9/openj9/pull/9567#discussion_r427418957", "createdAt": "2020-05-19T16:03:13Z", "author": {"login": "keithc-ca"}, "path": "runtime/vm/options.inc", "diffHunk": "@@ -0,0 +1,24 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+\n+OPTION(VMOPT_MAXHEAPSIZE, TYPE_SIZET, CAT_PRODUCT)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fdb2d456a42b455995529aad2ad8378ba991a9"}, "originalPosition": 23}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "43fdb2d456a42b455995529aad2ad8378ba991a9", "author": {"user": {"login": "mstoodle", "name": "Mark Stoodley"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/43fdb2d456a42b455995529aad2ad8378ba991a9", "committedDate": "2020-05-15T04:15:14Z", "message": "Simple incomplete implementation for PrintFlagsFinal\n\nA simple implementation of VM options that can be used to produce\nthe -XX:+PrintFlagsFinal output. I began separating out options\nrelated code (very little of it at this point) into new files\nruntime/oti/options.h, runtime/vm/options.inc, and\nruntime/vm/options.c .\n\nFor now, I have only included two options in this new facility:\nMaxHeapSize and MaxDirectMemorySize. These options are required\nby the elasticsearch project, so I started with these. With this\nfacility implemented at OpenJ9, elasticsearch no longer NPEs on\nstartup and, in my local testing, all their tests pass on OpenJ9.\n\nI tried to match, as closely as possible, the output Hotspot\ngenerates when one uses -XX:+PrintFlagsFinal, which includes the\nnames used for types (e.g. size_t or uint64_t), the option names,\nthe option category (e.g. {product} or {diagnostic}), the way the\noption is set (e.g. {default} or {ergonomic} or {command line}),\nand the field sizes produced by a JDK11 Hotspot build. I did some\nresearch online to find the set of types and such.\n\nIn options.c are found the main data structures that represent\nthe options. I build a static array with the list of options\nand that array has a slot to hold the option's value. Since\nOpenJ9's existing option handling code is distributed across\nmultiple components that all record options differently, I chose\nto centralize the options for PrintFlagsFinal in this array which\nmeans the option values need to be fetched from other spots to\nfill in the array. That's not ideal. Going forward, I think we can\nprobably do better, but this is a starting point that works\nreasonably well for simple options. By creating something independent\nof the existing options framework, it's relatively easy to decide\nif an option has been set on the command-line or not using the\nstandard `findArgInVMArgs()` service.\n\nI don't think this framework represents an architectural direction;\nI was just trying to put something relatively useful and reasonably\nextensible in place that could hold us over until a more comprehensive\noptions framework rework (across components and probably across OMR\nas well) can be undertaken.\n\nFixes: 7764\n\nSigned-off-by: Mark Stoodley <mstoodle@ca.ibm.com>"}, "afterCommit": {"oid": "f180c87f984d317e4582aa982cdf4afe2949f2f1", "author": {"user": {"login": "mstoodle", "name": "Mark Stoodley"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/f180c87f984d317e4582aa982cdf4afe2949f2f1", "committedDate": "2020-05-21T22:16:07Z", "message": "Simple incomplete implementation for PrintFlagsFinal\n\nA simple implementation of VM options that can be used to produce\nthe -XX:+PrintFlagsFinal output. I began separating out options\nrelated code (very little of it at this point) into new files\nruntime/oti/options.h, runtime/vm/options.inc, and\nruntime/vm/options.c .\n\nFor now, I have only included two options in this new facility:\nMaxHeapSize and MaxDirectMemorySize. These options are required\nby the elasticsearch project, so I started with these. With this\nfacility implemented at OpenJ9, elasticsearch no longer NPEs on\nstartup and, in my local testing, all their tests pass on OpenJ9.\n\nI tried to match, as closely as possible, the output Hotspot\ngenerates when one uses -XX:+PrintFlagsFinal, which includes the\nnames used for types (e.g. size_t or uint64_t), the option names,\nthe option category (e.g. {product} or {diagnostic}), the way the\noption is set (e.g. {default} or {ergonomic} or {command line}),\nand the field sizes produced by a JDK11 Hotspot build. I did some\nresearch online to find the set of types and such.\n\nIn options.c are found the main data structures that represent\nthe options. I build a static array with the list of options\nand that array has a slot to hold the option's value. Since\nOpenJ9's existing option handling code is distributed across\nmultiple components that all record options differently, I chose\nto centralize the options for PrintFlagsFinal in this array which\nmeans the option values need to be fetched from other spots to\nfill in the array. That's not ideal. Going forward, I think we can\nprobably do better, but this is a starting point that works\nreasonably well for simple options. By creating something independent\nof the existing options framework, it's relatively easy to decide\nif an option has been set on the command-line or not using the\nstandard `findArgInVMArgs()` service. Setting the values is\nperformed via the function `initializeFlagSettings()`.\n\nI don't think this framework represents an architectural direction;\nI was just trying to put something relatively useful and reasonably\nextensible in place that could hold us over until a more comprehensive\noptions framework rework (across components and probably across OMR\nas well) can be undertaken.\n\nFixes: #7764\n\nSigned-off-by: Mark Stoodley <mstoodle@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3MDE2MTg3", "url": "https://github.com/eclipse-openj9/openj9/pull/9567#pullrequestreview-417016187", "createdAt": "2020-05-22T15:51:32Z", "commit": {"oid": "f180c87f984d317e4582aa982cdf4afe2949f2f1"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNTo1MTozMlrOGZcAoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNjoxMzoxOFrOGZcfpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMyNjQ5Nw==", "bodyText": "We need some doc here to explain how to choose one of these categories when adding new items to the table. Similarly for howset.\nIf we're not going to use some of these categories, perhaps they should be removed/commented until needed.", "url": "https://github.com/eclipse-openj9/openj9/pull/9567#discussion_r429326497", "createdAt": "2020-05-22T15:51:32Z", "author": {"login": "pshipton"}, "path": "runtime/vm/options.c", "diffHunk": "@@ -0,0 +1,198 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+\n+#include <stdio.h>\n+#include <assert.h>\n+#include \"j9protos.h\"\n+#include \"jvminitcommon.h\"\n+#include \"options.h\"\n+\n+\n+/*\n+ * Example -XX:+PrintFlagsFinal output: (Hotspot calls them \"Flags\" but OpenJ9 terminology is \"options\")\n+ *\n+ * [Global flags]\n+ *    size_t MaxHeapSize                              = 4294967296                                {product} {ergonomic}\n+ *  uint64_t MaxDirectMemorySize                      = 3758096384                                {product} {default}\n+ *\n+ * First column is the type of the option\n+ * Second column is the name of the option\n+ * Third column is the value of the option\n+ * Fourth column is a category for the option: product, experimental, etc.\n+ * Fifth column describes how the option's value was set: default setting, by command line, or via ergonomics (heuristics)\n+ */\n+\n+\n+/* Option types (first ten entries for compatibility) */\n+#define TYPE_BOOL 0\n+#define TYPE_CCSTR 1\n+#define TYPE_CCSTRLIST 2\n+#define TYPE_DOUBLE 3\n+#define TYPE_INT 4\n+#define TYPE_INTX 5\n+#define TYPE_SIZET 6\n+#define TYPE_UINT 7\n+#define TYPE_UINT64T 8\n+#define TYPE_UINTX 9\n+\n+static const char *option_type_string[] = {\n+\t\"bool\",\n+\t\"ccstr\",\n+\t\"ccstrlist\",\n+\t\"double\",\n+\t\"int\",\n+\t\"intx\",\n+\t\"size_t\",\n+\t\"uint\",\n+\t\"uint64_t\",\n+\t\"uintx\"\n+};\n+#define NUM_TYPE_STRINGS\t(sizeof(option_type_string) / sizeof(option_type_string[0]))\n+\n+typedef union J9OptionValue {\n+\tUDATA v_uintx;\n+\tU_64 v_uint64;\n+\tsize_t v_sizet;\n+\tdouble v_double;\n+\tchar *v_ccstr;\n+\tchar **v_ccstrlist;\n+\tU_32 v_uint;\n+\tIDATA v_intx;\n+\tI_8 v_bool;\n+} J9OptionValue;\n+\n+#define CAT_PRODUCT\t\t0\n+#define CAT_ARCHPRODUCT\t\t1\n+#define CAT_PDPRODUCT\t\t2\n+#define CAT_PRODUCTRW\t\t3\n+#define CAT_DIAGNOSTIC\t\t4\n+#define CAT_EXPERIMENTAL\t5\n+#define CAT_MANAGEABLE\t\t6\n+\n+static const char *option_category_string[] = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f180c87f984d317e4582aa982cdf4afe2949f2f1"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMyOTM2OQ==", "bodyText": "Should there be a setting for options set in the environment rather than directly on the command line? The J9CmdLineOption contains this info.", "url": "https://github.com/eclipse-openj9/openj9/pull/9567#discussion_r429329369", "createdAt": "2020-05-22T15:57:11Z", "author": {"login": "pshipton"}, "path": "runtime/vm/options.c", "diffHunk": "@@ -0,0 +1,198 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+\n+#include <stdio.h>\n+#include <assert.h>\n+#include \"j9protos.h\"\n+#include \"jvminitcommon.h\"\n+#include \"options.h\"\n+\n+\n+/*\n+ * Example -XX:+PrintFlagsFinal output: (Hotspot calls them \"Flags\" but OpenJ9 terminology is \"options\")\n+ *\n+ * [Global flags]\n+ *    size_t MaxHeapSize                              = 4294967296                                {product} {ergonomic}\n+ *  uint64_t MaxDirectMemorySize                      = 3758096384                                {product} {default}\n+ *\n+ * First column is the type of the option\n+ * Second column is the name of the option\n+ * Third column is the value of the option\n+ * Fourth column is a category for the option: product, experimental, etc.\n+ * Fifth column describes how the option's value was set: default setting, by command line, or via ergonomics (heuristics)\n+ */\n+\n+\n+/* Option types (first ten entries for compatibility) */\n+#define TYPE_BOOL 0\n+#define TYPE_CCSTR 1\n+#define TYPE_CCSTRLIST 2\n+#define TYPE_DOUBLE 3\n+#define TYPE_INT 4\n+#define TYPE_INTX 5\n+#define TYPE_SIZET 6\n+#define TYPE_UINT 7\n+#define TYPE_UINT64T 8\n+#define TYPE_UINTX 9\n+\n+static const char *option_type_string[] = {\n+\t\"bool\",\n+\t\"ccstr\",\n+\t\"ccstrlist\",\n+\t\"double\",\n+\t\"int\",\n+\t\"intx\",\n+\t\"size_t\",\n+\t\"uint\",\n+\t\"uint64_t\",\n+\t\"uintx\"\n+};\n+#define NUM_TYPE_STRINGS\t(sizeof(option_type_string) / sizeof(option_type_string[0]))\n+\n+typedef union J9OptionValue {\n+\tUDATA v_uintx;\n+\tU_64 v_uint64;\n+\tsize_t v_sizet;\n+\tdouble v_double;\n+\tchar *v_ccstr;\n+\tchar **v_ccstrlist;\n+\tU_32 v_uint;\n+\tIDATA v_intx;\n+\tI_8 v_bool;\n+} J9OptionValue;\n+\n+#define CAT_PRODUCT\t\t0\n+#define CAT_ARCHPRODUCT\t\t1\n+#define CAT_PDPRODUCT\t\t2\n+#define CAT_PRODUCTRW\t\t3\n+#define CAT_DIAGNOSTIC\t\t4\n+#define CAT_EXPERIMENTAL\t5\n+#define CAT_MANAGEABLE\t\t6\n+\n+static const char *option_category_string[] = {\n+\t\"{product}\",\n+\t\"{ARCH product}\",\n+\t\"{pd product}\",\n+\t\"{product rw}\",\n+\t\"{diagnostic}\",\n+\t\"{experimental}\",\n+\t\"{manageable}\",\n+};\n+#define NUM_CATEGORY_STRINGS\t(sizeof(option_category_string) / sizeof(option_category_string[0]))\n+\n+#define SET_DEFAULT\t0\n+#define SET_COMMANDLINE\t1\n+#define SET_ERGONOMIC\t2\n+\n+static const char *option_howset_string[] = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f180c87f984d317e4582aa982cdf4afe2949f2f1"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMzNDQzOA==", "bodyText": "The J9OptionDesc table should be added to the J9JavaVM struct, and usable from any code (VM, GC, JIT).\nThe code to add MAXHEAPSIZE to the J9OptionDesc table should be in jvminit.c if we're not ready to modify the GC code for this.\nMAXDIRECTMEMORYSIZE is set via setMemoryOptionToOptElse() in jvminit.c. Ideally this code should be modified to update the J9OptionDesc table when there is a matching entry, rather than making another call to findArgInVMArgs().", "url": "https://github.com/eclipse-openj9/openj9/pull/9567#discussion_r429334438", "createdAt": "2020-05-22T16:13:18Z", "author": {"login": "pshipton"}, "path": "runtime/vm/options.c", "diffHunk": "@@ -0,0 +1,198 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+\n+#include <stdio.h>\n+#include <assert.h>\n+#include \"j9protos.h\"\n+#include \"jvminitcommon.h\"\n+#include \"options.h\"\n+\n+\n+/*\n+ * Example -XX:+PrintFlagsFinal output: (Hotspot calls them \"Flags\" but OpenJ9 terminology is \"options\")\n+ *\n+ * [Global flags]\n+ *    size_t MaxHeapSize                              = 4294967296                                {product} {ergonomic}\n+ *  uint64_t MaxDirectMemorySize                      = 3758096384                                {product} {default}\n+ *\n+ * First column is the type of the option\n+ * Second column is the name of the option\n+ * Third column is the value of the option\n+ * Fourth column is a category for the option: product, experimental, etc.\n+ * Fifth column describes how the option's value was set: default setting, by command line, or via ergonomics (heuristics)\n+ */\n+\n+\n+/* Option types (first ten entries for compatibility) */\n+#define TYPE_BOOL 0\n+#define TYPE_CCSTR 1\n+#define TYPE_CCSTRLIST 2\n+#define TYPE_DOUBLE 3\n+#define TYPE_INT 4\n+#define TYPE_INTX 5\n+#define TYPE_SIZET 6\n+#define TYPE_UINT 7\n+#define TYPE_UINT64T 8\n+#define TYPE_UINTX 9\n+\n+static const char *option_type_string[] = {\n+\t\"bool\",\n+\t\"ccstr\",\n+\t\"ccstrlist\",\n+\t\"double\",\n+\t\"int\",\n+\t\"intx\",\n+\t\"size_t\",\n+\t\"uint\",\n+\t\"uint64_t\",\n+\t\"uintx\"\n+};\n+#define NUM_TYPE_STRINGS\t(sizeof(option_type_string) / sizeof(option_type_string[0]))\n+\n+typedef union J9OptionValue {\n+\tUDATA v_uintx;\n+\tU_64 v_uint64;\n+\tsize_t v_sizet;\n+\tdouble v_double;\n+\tchar *v_ccstr;\n+\tchar **v_ccstrlist;\n+\tU_32 v_uint;\n+\tIDATA v_intx;\n+\tI_8 v_bool;\n+} J9OptionValue;\n+\n+#define CAT_PRODUCT\t\t0\n+#define CAT_ARCHPRODUCT\t\t1\n+#define CAT_PDPRODUCT\t\t2\n+#define CAT_PRODUCTRW\t\t3\n+#define CAT_DIAGNOSTIC\t\t4\n+#define CAT_EXPERIMENTAL\t5\n+#define CAT_MANAGEABLE\t\t6\n+\n+static const char *option_category_string[] = {\n+\t\"{product}\",\n+\t\"{ARCH product}\",\n+\t\"{pd product}\",\n+\t\"{product rw}\",\n+\t\"{diagnostic}\",\n+\t\"{experimental}\",\n+\t\"{manageable}\",\n+};\n+#define NUM_CATEGORY_STRINGS\t(sizeof(option_category_string) / sizeof(option_category_string[0]))\n+\n+#define SET_DEFAULT\t0\n+#define SET_COMMANDLINE\t1\n+#define SET_ERGONOMIC\t2\n+\n+static const char *option_howset_string[] = {\n+\t\"{default}\",\n+\t\"{command line}\",\n+\t\"{ergonomic}\"\n+};\n+#define NUM_HOWSET_STRINGS\t(sizeof(option_howset_string) / sizeof(option_howset_string[0]))\n+\n+typedef struct J9OptionDesc {\n+\tconst char * name;\n+\tI_8 type;\n+\tI_8 category;\n+\tI_8 howset;\n+\tJ9OptionValue value;\n+} J9OptionDesc;\n+\n+\n+/* options_enum gives each option an index starting from zero */\n+typedef enum options_enum {\n+\tNoOption=-1,\n+\n+\t#define OPTION(n,t,cats,how) IDX_ ## n,\n+\t#include \"options.inc\"\n+\t#undef OPTION\n+} options_enum;\n+\n+/* options array lists all options, same order as options_enum */\n+static J9OptionDesc options[]={\n+\t#define OPTION(n,t,cats,how) { n, t, cats, how, { 0 } },\n+\t#include \"options.inc\"\n+\t#undef OPTION\n+};\n+#define NUM_OPTIONS\t(sizeof(options)/sizeof(options[0]))\n+\n+\n+/*\n+ * initializeFlagSettings initializes the value and howset fields for all options in\n+ *\tthe options array. Constant default values would get howset=SET_DEFAULT, values\n+ *\tthat are computed heuristically based on other options or the environment get\n+ *\thowset=SET_ERGONOMIC, and if the value was set via a command line option (including\n+ *\taliases like -XX::MaxMemorySize= and -Xmx) get howset=SET_COMMANDLINE .\n+ */\n+void initializeFlagSettings(J9JavaVM* vm) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f180c87f984d317e4582aa982cdf4afe2949f2f1"}, "originalPosition": 147}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3MTQ4MzMw", "url": "https://github.com/eclipse-openj9/openj9/pull/9567#pullrequestreview-417148330", "createdAt": "2020-05-22T19:39:13Z", "commit": {"oid": "f180c87f984d317e4582aa982cdf4afe2949f2f1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxOTozOToxM1rOGZh_lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxOTozOToxM1rOGZh_lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQyNDUzMw==", "bodyText": "I'd prefer not to introduce options.inc in this PR and just include the 2 values directly here given this is a stepping stone to a larger design.\nGiven our conversations, I expected that most of this code would be removed and the minimal bits ported to jvminit.c to handle the two options.  And the table-based design would follow after.", "url": "https://github.com/eclipse-openj9/openj9/pull/9567#discussion_r429424533", "createdAt": "2020-05-22T19:39:13Z", "author": {"login": "DanHeidinga"}, "path": "runtime/vm/options.c", "diffHunk": "@@ -0,0 +1,198 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+\n+#include <stdio.h>\n+#include <assert.h>\n+#include \"j9protos.h\"\n+#include \"jvminitcommon.h\"\n+#include \"options.h\"\n+\n+\n+/*\n+ * Example -XX:+PrintFlagsFinal output: (Hotspot calls them \"Flags\" but OpenJ9 terminology is \"options\")\n+ *\n+ * [Global flags]\n+ *    size_t MaxHeapSize                              = 4294967296                                {product} {ergonomic}\n+ *  uint64_t MaxDirectMemorySize                      = 3758096384                                {product} {default}\n+ *\n+ * First column is the type of the option\n+ * Second column is the name of the option\n+ * Third column is the value of the option\n+ * Fourth column is a category for the option: product, experimental, etc.\n+ * Fifth column describes how the option's value was set: default setting, by command line, or via ergonomics (heuristics)\n+ */\n+\n+\n+/* Option types (first ten entries for compatibility) */\n+#define TYPE_BOOL 0\n+#define TYPE_CCSTR 1\n+#define TYPE_CCSTRLIST 2\n+#define TYPE_DOUBLE 3\n+#define TYPE_INT 4\n+#define TYPE_INTX 5\n+#define TYPE_SIZET 6\n+#define TYPE_UINT 7\n+#define TYPE_UINT64T 8\n+#define TYPE_UINTX 9\n+\n+static const char *option_type_string[] = {\n+\t\"bool\",\n+\t\"ccstr\",\n+\t\"ccstrlist\",\n+\t\"double\",\n+\t\"int\",\n+\t\"intx\",\n+\t\"size_t\",\n+\t\"uint\",\n+\t\"uint64_t\",\n+\t\"uintx\"\n+};\n+#define NUM_TYPE_STRINGS\t(sizeof(option_type_string) / sizeof(option_type_string[0]))\n+\n+typedef union J9OptionValue {\n+\tUDATA v_uintx;\n+\tU_64 v_uint64;\n+\tsize_t v_sizet;\n+\tdouble v_double;\n+\tchar *v_ccstr;\n+\tchar **v_ccstrlist;\n+\tU_32 v_uint;\n+\tIDATA v_intx;\n+\tI_8 v_bool;\n+} J9OptionValue;\n+\n+#define CAT_PRODUCT\t\t0\n+#define CAT_ARCHPRODUCT\t\t1\n+#define CAT_PDPRODUCT\t\t2\n+#define CAT_PRODUCTRW\t\t3\n+#define CAT_DIAGNOSTIC\t\t4\n+#define CAT_EXPERIMENTAL\t5\n+#define CAT_MANAGEABLE\t\t6\n+\n+static const char *option_category_string[] = {\n+\t\"{product}\",\n+\t\"{ARCH product}\",\n+\t\"{pd product}\",\n+\t\"{product rw}\",\n+\t\"{diagnostic}\",\n+\t\"{experimental}\",\n+\t\"{manageable}\",\n+};\n+#define NUM_CATEGORY_STRINGS\t(sizeof(option_category_string) / sizeof(option_category_string[0]))\n+\n+#define SET_DEFAULT\t0\n+#define SET_COMMANDLINE\t1\n+#define SET_ERGONOMIC\t2\n+\n+static const char *option_howset_string[] = {\n+\t\"{default}\",\n+\t\"{command line}\",\n+\t\"{ergonomic}\"\n+};\n+#define NUM_HOWSET_STRINGS\t(sizeof(option_howset_string) / sizeof(option_howset_string[0]))\n+\n+typedef struct J9OptionDesc {\n+\tconst char * name;\n+\tI_8 type;\n+\tI_8 category;\n+\tI_8 howset;\n+\tJ9OptionValue value;\n+} J9OptionDesc;\n+\n+\n+/* options_enum gives each option an index starting from zero */\n+typedef enum options_enum {\n+\tNoOption=-1,\n+\n+\t#define OPTION(n,t,cats,how) IDX_ ## n,\n+\t#include \"options.inc\"\n+\t#undef OPTION\n+} options_enum;\n+\n+/* options array lists all options, same order as options_enum */\n+static J9OptionDesc options[]={\n+\t#define OPTION(n,t,cats,how) { n, t, cats, how, { 0 } },\n+\t#include \"options.inc\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f180c87f984d317e4582aa982cdf4afe2949f2f1"}, "originalPosition": 134}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3MTQ4OTA3", "url": "https://github.com/eclipse-openj9/openj9/pull/9567#pullrequestreview-417148907", "createdAt": "2020-05-22T19:40:26Z", "commit": {"oid": "f180c87f984d317e4582aa982cdf4afe2949f2f1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxOTo0MDoyN1rOGZiBTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxOTo0MDoyN1rOGZiBTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQyNDk3Mw==", "bodyText": "please always use { & } for control flow.  It's too easy to add a debug printf into 1 line if statement and change the meaning of the program.  By always using curly braces, we can avoid that entire class of issues", "url": "https://github.com/eclipse-openj9/openj9/pull/9567#discussion_r429424973", "createdAt": "2020-05-22T19:40:27Z", "author": {"login": "DanHeidinga"}, "path": "runtime/vm/options.c", "diffHunk": "@@ -0,0 +1,198 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+\n+#include <stdio.h>\n+#include <assert.h>\n+#include \"j9protos.h\"\n+#include \"jvminitcommon.h\"\n+#include \"options.h\"\n+\n+\n+/*\n+ * Example -XX:+PrintFlagsFinal output: (Hotspot calls them \"Flags\" but OpenJ9 terminology is \"options\")\n+ *\n+ * [Global flags]\n+ *    size_t MaxHeapSize                              = 4294967296                                {product} {ergonomic}\n+ *  uint64_t MaxDirectMemorySize                      = 3758096384                                {product} {default}\n+ *\n+ * First column is the type of the option\n+ * Second column is the name of the option\n+ * Third column is the value of the option\n+ * Fourth column is a category for the option: product, experimental, etc.\n+ * Fifth column describes how the option's value was set: default setting, by command line, or via ergonomics (heuristics)\n+ */\n+\n+\n+/* Option types (first ten entries for compatibility) */\n+#define TYPE_BOOL 0\n+#define TYPE_CCSTR 1\n+#define TYPE_CCSTRLIST 2\n+#define TYPE_DOUBLE 3\n+#define TYPE_INT 4\n+#define TYPE_INTX 5\n+#define TYPE_SIZET 6\n+#define TYPE_UINT 7\n+#define TYPE_UINT64T 8\n+#define TYPE_UINTX 9\n+\n+static const char *option_type_string[] = {\n+\t\"bool\",\n+\t\"ccstr\",\n+\t\"ccstrlist\",\n+\t\"double\",\n+\t\"int\",\n+\t\"intx\",\n+\t\"size_t\",\n+\t\"uint\",\n+\t\"uint64_t\",\n+\t\"uintx\"\n+};\n+#define NUM_TYPE_STRINGS\t(sizeof(option_type_string) / sizeof(option_type_string[0]))\n+\n+typedef union J9OptionValue {\n+\tUDATA v_uintx;\n+\tU_64 v_uint64;\n+\tsize_t v_sizet;\n+\tdouble v_double;\n+\tchar *v_ccstr;\n+\tchar **v_ccstrlist;\n+\tU_32 v_uint;\n+\tIDATA v_intx;\n+\tI_8 v_bool;\n+} J9OptionValue;\n+\n+#define CAT_PRODUCT\t\t0\n+#define CAT_ARCHPRODUCT\t\t1\n+#define CAT_PDPRODUCT\t\t2\n+#define CAT_PRODUCTRW\t\t3\n+#define CAT_DIAGNOSTIC\t\t4\n+#define CAT_EXPERIMENTAL\t5\n+#define CAT_MANAGEABLE\t\t6\n+\n+static const char *option_category_string[] = {\n+\t\"{product}\",\n+\t\"{ARCH product}\",\n+\t\"{pd product}\",\n+\t\"{product rw}\",\n+\t\"{diagnostic}\",\n+\t\"{experimental}\",\n+\t\"{manageable}\",\n+};\n+#define NUM_CATEGORY_STRINGS\t(sizeof(option_category_string) / sizeof(option_category_string[0]))\n+\n+#define SET_DEFAULT\t0\n+#define SET_COMMANDLINE\t1\n+#define SET_ERGONOMIC\t2\n+\n+static const char *option_howset_string[] = {\n+\t\"{default}\",\n+\t\"{command line}\",\n+\t\"{ergonomic}\"\n+};\n+#define NUM_HOWSET_STRINGS\t(sizeof(option_howset_string) / sizeof(option_howset_string[0]))\n+\n+typedef struct J9OptionDesc {\n+\tconst char * name;\n+\tI_8 type;\n+\tI_8 category;\n+\tI_8 howset;\n+\tJ9OptionValue value;\n+} J9OptionDesc;\n+\n+\n+/* options_enum gives each option an index starting from zero */\n+typedef enum options_enum {\n+\tNoOption=-1,\n+\n+\t#define OPTION(n,t,cats,how) IDX_ ## n,\n+\t#include \"options.inc\"\n+\t#undef OPTION\n+} options_enum;\n+\n+/* options array lists all options, same order as options_enum */\n+static J9OptionDesc options[]={\n+\t#define OPTION(n,t,cats,how) { n, t, cats, how, { 0 } },\n+\t#include \"options.inc\"\n+\t#undef OPTION\n+};\n+#define NUM_OPTIONS\t(sizeof(options)/sizeof(options[0]))\n+\n+\n+/*\n+ * initializeFlagSettings initializes the value and howset fields for all options in\n+ *\tthe options array. Constant default values would get howset=SET_DEFAULT, values\n+ *\tthat are computed heuristically based on other options or the environment get\n+ *\thowset=SET_ERGONOMIC, and if the value was set via a command line option (including\n+ *\taliases like -XX::MaxMemorySize= and -Xmx) get howset=SET_COMMANDLINE .\n+ */\n+void initializeFlagSettings(J9JavaVM* vm) {\n+\tPORT_ACCESS_FROM_JAVAVM(vm);\n+\tJ9OptionDesc *option=NULL;\n+\n+\t/* Initialize value for -XX:MaxHeapSize / -Xmx */\n+\toption = options + IDX_VMOPT_MAXHEAPSIZE;\n+\toption->value.v_sizet = vm->memoryManagerFunctions->j9gc_get_maximum_heap_size(vm);\n+\tif ((findArgInVMArgs( PORTLIB, vm->vmArgsArray, STARTSWITH_MATCH, VMOPT_XMX, NULL, 0) >= 0))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f180c87f984d317e4582aa982cdf4afe2949f2f1"}, "originalPosition": 154}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3MTQ5NjI4", "url": "https://github.com/eclipse-openj9/openj9/pull/9567#pullrequestreview-417149628", "createdAt": "2020-05-22T19:41:53Z", "commit": {"oid": "f180c87f984d317e4582aa982cdf4afe2949f2f1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxOTo0MTo1M1rOGZiDVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxOTo0MTo1M1rOGZiDVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQyNTQ5NA==", "bodyText": "Formatting nitpick - we typically don't indent the cases of a switch statement to avoid excessively long lines\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tswitch (option->type) {\n          \n          \n            \n            \t\t\tcase TYPE_SIZET :\n          \n          \n            \n            \t\t\t\tj9tty_printf(PORTLIB, \"%-36zu\", (size_t)(option->value.v_sizet));\n          \n          \n            \n            \t\t\t\tbreak;\n          \n          \n            \n            \n          \n          \n            \n            \t\t\tcase TYPE_UINT64T :\n          \n          \n            \n            \t\t\t\tj9tty_printf(PORTLIB, \"%-36llu\", (uint64_t)(option->value.v_uint64));\n          \n          \n            \n            \t\t\t\tbreak;\n          \n          \n            \n            \t\t\tdefault :\n          \n          \n            \n            \t\t\t\t/* new option must have been added with an as yet unsupported type */\n          \n          \n            \n            \t\t\t\tassert(0);\n          \n          \n            \n            \t\t}\n          \n          \n            \n            \t\tswitch (option->type) {\n          \n          \n            \n            \t\tcase TYPE_SIZET :\n          \n          \n            \n            \t\t\tj9tty_printf(PORTLIB, \"%-36zu\", (size_t)(option->value.v_sizet));\n          \n          \n            \n            \t\t\tbreak;\n          \n          \n            \n            \n          \n          \n            \n            \t\tcase TYPE_UINT64T :\n          \n          \n            \n            \t\t\tj9tty_printf(PORTLIB, \"%-36llu\", (uint64_t)(option->value.v_uint64));\n          \n          \n            \n            \t\t\tbreak;\n          \n          \n            \n            \t\tdefault :\n          \n          \n            \n            \t\t\t/* new option must have been added with an as yet unsupported type */\n          \n          \n            \n            \t\t\tassert(0);\n          \n          \n            \n            \t\t}", "url": "https://github.com/eclipse-openj9/openj9/pull/9567#discussion_r429425494", "createdAt": "2020-05-22T19:41:53Z", "author": {"login": "DanHeidinga"}, "path": "runtime/vm/options.c", "diffHunk": "@@ -0,0 +1,198 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+\n+#include <stdio.h>\n+#include <assert.h>\n+#include \"j9protos.h\"\n+#include \"jvminitcommon.h\"\n+#include \"options.h\"\n+\n+\n+/*\n+ * Example -XX:+PrintFlagsFinal output: (Hotspot calls them \"Flags\" but OpenJ9 terminology is \"options\")\n+ *\n+ * [Global flags]\n+ *    size_t MaxHeapSize                              = 4294967296                                {product} {ergonomic}\n+ *  uint64_t MaxDirectMemorySize                      = 3758096384                                {product} {default}\n+ *\n+ * First column is the type of the option\n+ * Second column is the name of the option\n+ * Third column is the value of the option\n+ * Fourth column is a category for the option: product, experimental, etc.\n+ * Fifth column describes how the option's value was set: default setting, by command line, or via ergonomics (heuristics)\n+ */\n+\n+\n+/* Option types (first ten entries for compatibility) */\n+#define TYPE_BOOL 0\n+#define TYPE_CCSTR 1\n+#define TYPE_CCSTRLIST 2\n+#define TYPE_DOUBLE 3\n+#define TYPE_INT 4\n+#define TYPE_INTX 5\n+#define TYPE_SIZET 6\n+#define TYPE_UINT 7\n+#define TYPE_UINT64T 8\n+#define TYPE_UINTX 9\n+\n+static const char *option_type_string[] = {\n+\t\"bool\",\n+\t\"ccstr\",\n+\t\"ccstrlist\",\n+\t\"double\",\n+\t\"int\",\n+\t\"intx\",\n+\t\"size_t\",\n+\t\"uint\",\n+\t\"uint64_t\",\n+\t\"uintx\"\n+};\n+#define NUM_TYPE_STRINGS\t(sizeof(option_type_string) / sizeof(option_type_string[0]))\n+\n+typedef union J9OptionValue {\n+\tUDATA v_uintx;\n+\tU_64 v_uint64;\n+\tsize_t v_sizet;\n+\tdouble v_double;\n+\tchar *v_ccstr;\n+\tchar **v_ccstrlist;\n+\tU_32 v_uint;\n+\tIDATA v_intx;\n+\tI_8 v_bool;\n+} J9OptionValue;\n+\n+#define CAT_PRODUCT\t\t0\n+#define CAT_ARCHPRODUCT\t\t1\n+#define CAT_PDPRODUCT\t\t2\n+#define CAT_PRODUCTRW\t\t3\n+#define CAT_DIAGNOSTIC\t\t4\n+#define CAT_EXPERIMENTAL\t5\n+#define CAT_MANAGEABLE\t\t6\n+\n+static const char *option_category_string[] = {\n+\t\"{product}\",\n+\t\"{ARCH product}\",\n+\t\"{pd product}\",\n+\t\"{product rw}\",\n+\t\"{diagnostic}\",\n+\t\"{experimental}\",\n+\t\"{manageable}\",\n+};\n+#define NUM_CATEGORY_STRINGS\t(sizeof(option_category_string) / sizeof(option_category_string[0]))\n+\n+#define SET_DEFAULT\t0\n+#define SET_COMMANDLINE\t1\n+#define SET_ERGONOMIC\t2\n+\n+static const char *option_howset_string[] = {\n+\t\"{default}\",\n+\t\"{command line}\",\n+\t\"{ergonomic}\"\n+};\n+#define NUM_HOWSET_STRINGS\t(sizeof(option_howset_string) / sizeof(option_howset_string[0]))\n+\n+typedef struct J9OptionDesc {\n+\tconst char * name;\n+\tI_8 type;\n+\tI_8 category;\n+\tI_8 howset;\n+\tJ9OptionValue value;\n+} J9OptionDesc;\n+\n+\n+/* options_enum gives each option an index starting from zero */\n+typedef enum options_enum {\n+\tNoOption=-1,\n+\n+\t#define OPTION(n,t,cats,how) IDX_ ## n,\n+\t#include \"options.inc\"\n+\t#undef OPTION\n+} options_enum;\n+\n+/* options array lists all options, same order as options_enum */\n+static J9OptionDesc options[]={\n+\t#define OPTION(n,t,cats,how) { n, t, cats, how, { 0 } },\n+\t#include \"options.inc\"\n+\t#undef OPTION\n+};\n+#define NUM_OPTIONS\t(sizeof(options)/sizeof(options[0]))\n+\n+\n+/*\n+ * initializeFlagSettings initializes the value and howset fields for all options in\n+ *\tthe options array. Constant default values would get howset=SET_DEFAULT, values\n+ *\tthat are computed heuristically based on other options or the environment get\n+ *\thowset=SET_ERGONOMIC, and if the value was set via a command line option (including\n+ *\taliases like -XX::MaxMemorySize= and -Xmx) get howset=SET_COMMANDLINE .\n+ */\n+void initializeFlagSettings(J9JavaVM* vm) {\n+\tPORT_ACCESS_FROM_JAVAVM(vm);\n+\tJ9OptionDesc *option=NULL;\n+\n+\t/* Initialize value for -XX:MaxHeapSize / -Xmx */\n+\toption = options + IDX_VMOPT_MAXHEAPSIZE;\n+\toption->value.v_sizet = vm->memoryManagerFunctions->j9gc_get_maximum_heap_size(vm);\n+\tif ((findArgInVMArgs( PORTLIB, vm->vmArgsArray, STARTSWITH_MATCH, VMOPT_XMX, NULL, 0) >= 0))\n+\t\toption->howset = SET_COMMANDLINE;\n+\telse if ((findArgInVMArgs( PORTLIB, vm->vmArgsArray, STARTSWITH_MATCH, VMOPT_XXMAXHEAPSIZE, NULL, 0) >= 0))\n+\t\toption->howset = SET_COMMANDLINE;\n+\n+\t/* Initialize value for -XX:MaxDirectMemorySize */\n+\toption = options + IDX_VMOPT_MAXDIRECTMEMORYSIZE;\n+\toption->value.v_uint64 = vm->directByteBufferMemoryMax;\n+\tif ((findArgInVMArgs( PORTLIB, vm->vmArgsArray, STARTSWITH_MATCH, VMOPT_XXMAXDIRECTMEMORYSIZE, NULL, 0) >= 0))\n+\t\toption->howset = SET_COMMANDLINE;\n+}\n+\n+/*\n+ * Prints flags (options) to the console. The list of options printed is not yet complete.\n+ *\tSee example output comment at the top of this file below the copyright header.\n+ */\n+void printFlags(J9JavaVM* vm) {\n+\tPORT_ACCESS_FROM_JAVAVM(vm);\n+\tUDATA o_idx=0;\n+\n+\tj9tty_printf(PORTLIB, \"[Global flags]\\n\");\n+\tfor (o_idx=0; o_idx < NUM_OPTIONS; o_idx++) {\n+\t\tJ9OptionDesc *option = options + o_idx;\n+\n+\t\tassert(option->type < NUM_TYPE_STRINGS);\n+\t\tj9tty_printf(PORTLIB, \"%9s %-40s = \", option_type_string[option->type], option->name);\n+\n+\t\tswitch (option->type) {\n+\t\t\tcase TYPE_SIZET :\n+\t\t\t\tj9tty_printf(PORTLIB, \"%-36zu\", (size_t)(option->value.v_sizet));\n+\t\t\t\tbreak;\n+\n+\t\t\tcase TYPE_UINT64T :\n+\t\t\t\tj9tty_printf(PORTLIB, \"%-36llu\", (uint64_t)(option->value.v_uint64));\n+\t\t\t\tbreak;\n+\t\t\tdefault :\n+\t\t\t\t/* new option must have been added with an as yet unsupported type */\n+\t\t\t\tassert(0);\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f180c87f984d317e4582aa982cdf4afe2949f2f1"}, "originalPosition": 192}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3MTUwMDgy", "url": "https://github.com/eclipse-openj9/openj9/pull/9567#pullrequestreview-417150082", "createdAt": "2020-05-22T19:42:54Z", "commit": {"oid": "f180c87f984d317e4582aa982cdf4afe2949f2f1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxOTo0Mjo1NFrOGZiEvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxOTo0Mjo1NFrOGZiEvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQyNTg1Mg==", "bodyText": "Why %14s?  Is that to match the current longest option?", "url": "https://github.com/eclipse-openj9/openj9/pull/9567#discussion_r429425852", "createdAt": "2020-05-22T19:42:54Z", "author": {"login": "DanHeidinga"}, "path": "runtime/vm/options.c", "diffHunk": "@@ -0,0 +1,198 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+\n+#include <stdio.h>\n+#include <assert.h>\n+#include \"j9protos.h\"\n+#include \"jvminitcommon.h\"\n+#include \"options.h\"\n+\n+\n+/*\n+ * Example -XX:+PrintFlagsFinal output: (Hotspot calls them \"Flags\" but OpenJ9 terminology is \"options\")\n+ *\n+ * [Global flags]\n+ *    size_t MaxHeapSize                              = 4294967296                                {product} {ergonomic}\n+ *  uint64_t MaxDirectMemorySize                      = 3758096384                                {product} {default}\n+ *\n+ * First column is the type of the option\n+ * Second column is the name of the option\n+ * Third column is the value of the option\n+ * Fourth column is a category for the option: product, experimental, etc.\n+ * Fifth column describes how the option's value was set: default setting, by command line, or via ergonomics (heuristics)\n+ */\n+\n+\n+/* Option types (first ten entries for compatibility) */\n+#define TYPE_BOOL 0\n+#define TYPE_CCSTR 1\n+#define TYPE_CCSTRLIST 2\n+#define TYPE_DOUBLE 3\n+#define TYPE_INT 4\n+#define TYPE_INTX 5\n+#define TYPE_SIZET 6\n+#define TYPE_UINT 7\n+#define TYPE_UINT64T 8\n+#define TYPE_UINTX 9\n+\n+static const char *option_type_string[] = {\n+\t\"bool\",\n+\t\"ccstr\",\n+\t\"ccstrlist\",\n+\t\"double\",\n+\t\"int\",\n+\t\"intx\",\n+\t\"size_t\",\n+\t\"uint\",\n+\t\"uint64_t\",\n+\t\"uintx\"\n+};\n+#define NUM_TYPE_STRINGS\t(sizeof(option_type_string) / sizeof(option_type_string[0]))\n+\n+typedef union J9OptionValue {\n+\tUDATA v_uintx;\n+\tU_64 v_uint64;\n+\tsize_t v_sizet;\n+\tdouble v_double;\n+\tchar *v_ccstr;\n+\tchar **v_ccstrlist;\n+\tU_32 v_uint;\n+\tIDATA v_intx;\n+\tI_8 v_bool;\n+} J9OptionValue;\n+\n+#define CAT_PRODUCT\t\t0\n+#define CAT_ARCHPRODUCT\t\t1\n+#define CAT_PDPRODUCT\t\t2\n+#define CAT_PRODUCTRW\t\t3\n+#define CAT_DIAGNOSTIC\t\t4\n+#define CAT_EXPERIMENTAL\t5\n+#define CAT_MANAGEABLE\t\t6\n+\n+static const char *option_category_string[] = {\n+\t\"{product}\",\n+\t\"{ARCH product}\",\n+\t\"{pd product}\",\n+\t\"{product rw}\",\n+\t\"{diagnostic}\",\n+\t\"{experimental}\",\n+\t\"{manageable}\",\n+};\n+#define NUM_CATEGORY_STRINGS\t(sizeof(option_category_string) / sizeof(option_category_string[0]))\n+\n+#define SET_DEFAULT\t0\n+#define SET_COMMANDLINE\t1\n+#define SET_ERGONOMIC\t2\n+\n+static const char *option_howset_string[] = {\n+\t\"{default}\",\n+\t\"{command line}\",\n+\t\"{ergonomic}\"\n+};\n+#define NUM_HOWSET_STRINGS\t(sizeof(option_howset_string) / sizeof(option_howset_string[0]))\n+\n+typedef struct J9OptionDesc {\n+\tconst char * name;\n+\tI_8 type;\n+\tI_8 category;\n+\tI_8 howset;\n+\tJ9OptionValue value;\n+} J9OptionDesc;\n+\n+\n+/* options_enum gives each option an index starting from zero */\n+typedef enum options_enum {\n+\tNoOption=-1,\n+\n+\t#define OPTION(n,t,cats,how) IDX_ ## n,\n+\t#include \"options.inc\"\n+\t#undef OPTION\n+} options_enum;\n+\n+/* options array lists all options, same order as options_enum */\n+static J9OptionDesc options[]={\n+\t#define OPTION(n,t,cats,how) { n, t, cats, how, { 0 } },\n+\t#include \"options.inc\"\n+\t#undef OPTION\n+};\n+#define NUM_OPTIONS\t(sizeof(options)/sizeof(options[0]))\n+\n+\n+/*\n+ * initializeFlagSettings initializes the value and howset fields for all options in\n+ *\tthe options array. Constant default values would get howset=SET_DEFAULT, values\n+ *\tthat are computed heuristically based on other options or the environment get\n+ *\thowset=SET_ERGONOMIC, and if the value was set via a command line option (including\n+ *\taliases like -XX::MaxMemorySize= and -Xmx) get howset=SET_COMMANDLINE .\n+ */\n+void initializeFlagSettings(J9JavaVM* vm) {\n+\tPORT_ACCESS_FROM_JAVAVM(vm);\n+\tJ9OptionDesc *option=NULL;\n+\n+\t/* Initialize value for -XX:MaxHeapSize / -Xmx */\n+\toption = options + IDX_VMOPT_MAXHEAPSIZE;\n+\toption->value.v_sizet = vm->memoryManagerFunctions->j9gc_get_maximum_heap_size(vm);\n+\tif ((findArgInVMArgs( PORTLIB, vm->vmArgsArray, STARTSWITH_MATCH, VMOPT_XMX, NULL, 0) >= 0))\n+\t\toption->howset = SET_COMMANDLINE;\n+\telse if ((findArgInVMArgs( PORTLIB, vm->vmArgsArray, STARTSWITH_MATCH, VMOPT_XXMAXHEAPSIZE, NULL, 0) >= 0))\n+\t\toption->howset = SET_COMMANDLINE;\n+\n+\t/* Initialize value for -XX:MaxDirectMemorySize */\n+\toption = options + IDX_VMOPT_MAXDIRECTMEMORYSIZE;\n+\toption->value.v_uint64 = vm->directByteBufferMemoryMax;\n+\tif ((findArgInVMArgs( PORTLIB, vm->vmArgsArray, STARTSWITH_MATCH, VMOPT_XXMAXDIRECTMEMORYSIZE, NULL, 0) >= 0))\n+\t\toption->howset = SET_COMMANDLINE;\n+}\n+\n+/*\n+ * Prints flags (options) to the console. The list of options printed is not yet complete.\n+ *\tSee example output comment at the top of this file below the copyright header.\n+ */\n+void printFlags(J9JavaVM* vm) {\n+\tPORT_ACCESS_FROM_JAVAVM(vm);\n+\tUDATA o_idx=0;\n+\n+\tj9tty_printf(PORTLIB, \"[Global flags]\\n\");\n+\tfor (o_idx=0; o_idx < NUM_OPTIONS; o_idx++) {\n+\t\tJ9OptionDesc *option = options + o_idx;\n+\n+\t\tassert(option->type < NUM_TYPE_STRINGS);\n+\t\tj9tty_printf(PORTLIB, \"%9s %-40s = \", option_type_string[option->type], option->name);\n+\n+\t\tswitch (option->type) {\n+\t\t\tcase TYPE_SIZET :\n+\t\t\t\tj9tty_printf(PORTLIB, \"%-36zu\", (size_t)(option->value.v_sizet));\n+\t\t\t\tbreak;\n+\n+\t\t\tcase TYPE_UINT64T :\n+\t\t\t\tj9tty_printf(PORTLIB, \"%-36llu\", (uint64_t)(option->value.v_uint64));\n+\t\t\t\tbreak;\n+\t\t\tdefault :\n+\t\t\t\t/* new option must have been added with an as yet unsupported type */\n+\t\t\t\tassert(0);\n+\t\t}\n+\n+\t\tassert(option->category < NUM_CATEGORY_STRINGS);\n+\t\tassert(option->howset < NUM_HOWSET_STRINGS);\n+\t\tj9tty_printf(PORTLIB, \" %14s %s\\n\", option_category_string[option->category], option_howset_string[option->howset]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f180c87f984d317e4582aa982cdf4afe2949f2f1"}, "originalPosition": 196}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f180c87f984d317e4582aa982cdf4afe2949f2f1", "author": {"user": {"login": "mstoodle", "name": "Mark Stoodley"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/f180c87f984d317e4582aa982cdf4afe2949f2f1", "committedDate": "2020-05-21T22:16:07Z", "message": "Simple incomplete implementation for PrintFlagsFinal\n\nA simple implementation of VM options that can be used to produce\nthe -XX:+PrintFlagsFinal output. I began separating out options\nrelated code (very little of it at this point) into new files\nruntime/oti/options.h, runtime/vm/options.inc, and\nruntime/vm/options.c .\n\nFor now, I have only included two options in this new facility:\nMaxHeapSize and MaxDirectMemorySize. These options are required\nby the elasticsearch project, so I started with these. With this\nfacility implemented at OpenJ9, elasticsearch no longer NPEs on\nstartup and, in my local testing, all their tests pass on OpenJ9.\n\nI tried to match, as closely as possible, the output Hotspot\ngenerates when one uses -XX:+PrintFlagsFinal, which includes the\nnames used for types (e.g. size_t or uint64_t), the option names,\nthe option category (e.g. {product} or {diagnostic}), the way the\noption is set (e.g. {default} or {ergonomic} or {command line}),\nand the field sizes produced by a JDK11 Hotspot build. I did some\nresearch online to find the set of types and such.\n\nIn options.c are found the main data structures that represent\nthe options. I build a static array with the list of options\nand that array has a slot to hold the option's value. Since\nOpenJ9's existing option handling code is distributed across\nmultiple components that all record options differently, I chose\nto centralize the options for PrintFlagsFinal in this array which\nmeans the option values need to be fetched from other spots to\nfill in the array. That's not ideal. Going forward, I think we can\nprobably do better, but this is a starting point that works\nreasonably well for simple options. By creating something independent\nof the existing options framework, it's relatively easy to decide\nif an option has been set on the command-line or not using the\nstandard `findArgInVMArgs()` service. Setting the values is\nperformed via the function `initializeFlagSettings()`.\n\nI don't think this framework represents an architectural direction;\nI was just trying to put something relatively useful and reasonably\nextensible in place that could hold us over until a more comprehensive\noptions framework rework (across components and probably across OMR\nas well) can be undertaken.\n\nFixes: #7764\n\nSigned-off-by: Mark Stoodley <mstoodle@ca.ibm.com>"}, "afterCommit": {"oid": "f2dd9d7e644705073879f10f6a3e91757c02c70d", "author": {"user": {"login": "mstoodle", "name": "Mark Stoodley"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/f2dd9d7e644705073879f10f6a3e91757c02c70d", "committedDate": "2020-05-22T23:01:42Z", "message": "Incomplete hack implementation for -XX:+PrintFlagsFinal\n\nAn incomplete implementation of VM options that produces the\n-XX:+PrintFlagsFinal output for two specific options required by\nthe elasticsearch project. This code is expected to be temporary\nuntil a more comprehensive solution can be architected. For this\nreason, this change is very straight-forward and localized so\nit can be easily removed.\n\nThe two options whose values will be printed are for\n`-XX:MaxHeapSize=` and `-XX:MaxDirectMemorySize=` .\n\nWith this change, elasticsearch no longer NPEs on startup and,\nin my local testing, all their tests pass on OpenJ9.\n\nI tried to match, as closely as possible, the output Hotspot\ngenerates when one uses -XX:+PrintFlagsFinal, which includes the\nnames used for types (e.g. size_t or uint64_t), the option names,\nthe option category (e.g. {product} for these two options), the\nway the option is set (e.g. {ergonomic} or {command line} for\nthese two options), and the field widths produced by a JDK11\nHotspot build.\n\nI added 3 command-line tests :\n\n1) that two options (MaxHeapSize, MaxDirectMemorySize) are present\nwhen -XX:+PrintFlagsFinal option is specified.\n\n2) that -XX:+PrintFlagsFinal overrides earlier -XX:-PrintFlagsFinal.\n\n3) that -XX:-PrintFlagsFinal overrides earlier -XX:+PrintFlagsFinal.\n\nFixes: #7764\n\nSigned-off-by: Mark Stoodley <mstoodle@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f2dd9d7e644705073879f10f6a3e91757c02c70d", "author": {"user": {"login": "mstoodle", "name": "Mark Stoodley"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/f2dd9d7e644705073879f10f6a3e91757c02c70d", "committedDate": "2020-05-22T23:01:42Z", "message": "Incomplete hack implementation for -XX:+PrintFlagsFinal\n\nAn incomplete implementation of VM options that produces the\n-XX:+PrintFlagsFinal output for two specific options required by\nthe elasticsearch project. This code is expected to be temporary\nuntil a more comprehensive solution can be architected. For this\nreason, this change is very straight-forward and localized so\nit can be easily removed.\n\nThe two options whose values will be printed are for\n`-XX:MaxHeapSize=` and `-XX:MaxDirectMemorySize=` .\n\nWith this change, elasticsearch no longer NPEs on startup and,\nin my local testing, all their tests pass on OpenJ9.\n\nI tried to match, as closely as possible, the output Hotspot\ngenerates when one uses -XX:+PrintFlagsFinal, which includes the\nnames used for types (e.g. size_t or uint64_t), the option names,\nthe option category (e.g. {product} for these two options), the\nway the option is set (e.g. {ergonomic} or {command line} for\nthese two options), and the field widths produced by a JDK11\nHotspot build.\n\nI added 3 command-line tests :\n\n1) that two options (MaxHeapSize, MaxDirectMemorySize) are present\nwhen -XX:+PrintFlagsFinal option is specified.\n\n2) that -XX:+PrintFlagsFinal overrides earlier -XX:-PrintFlagsFinal.\n\n3) that -XX:-PrintFlagsFinal overrides earlier -XX:+PrintFlagsFinal.\n\nFixes: #7764\n\nSigned-off-by: Mark Stoodley <mstoodle@ca.ibm.com>"}, "afterCommit": {"oid": "3774db595f1ab03626d80a7b582fe1fc13dd11d0", "author": {"user": {"login": "mstoodle", "name": "Mark Stoodley"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/3774db595f1ab03626d80a7b582fe1fc13dd11d0", "committedDate": "2020-05-22T23:16:47Z", "message": "Incomplete hack implementation for -XX:+PrintFlagsFinal\n\nAn incomplete implementation of VM options that produces the\n-XX:+PrintFlagsFinal output for two specific options required by\nthe elasticsearch project. This code is expected to be temporary\nuntil a more comprehensive solution can be architected. For this\nreason, this change is very straight-forward and localized so\nit can be easily removed.\n\nThe two options whose values will be printed are for\n`-XX:MaxHeapSize=` and `-XX:MaxDirectMemorySize=` .\n\nWith this change, elasticsearch no longer NPEs on startup and,\nin my local testing, all their tests pass on OpenJ9.\n\nI tried to match, as closely as possible, the output Hotspot\ngenerates when one uses -XX:+PrintFlagsFinal, which includes the\nnames used for types (e.g. size_t or uint64_t), the option names,\nthe option category (e.g. {product} for these two options), the\nway the option is set (e.g. {ergonomic} or {command line} for\nthese two options), and the field widths produced by a JDK11\nHotspot build.\n\nI added 3 command-line tests :\n\n1) that two options (MaxHeapSize, MaxDirectMemorySize) are present\nwhen -XX:+PrintFlagsFinal option is specified.\n\n2) that -XX:+PrintFlagsFinal overrides earlier -XX:-PrintFlagsFinal.\n\n3) that -XX:-PrintFlagsFinal overrides earlier -XX:+PrintFlagsFinal.\n\nFixes: #7764\n\nSigned-off-by: Mark Stoodley <mstoodle@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3MjgwNDk1", "url": "https://github.com/eclipse-openj9/openj9/pull/9567#pullrequestreview-417280495", "createdAt": "2020-05-23T13:52:06Z", "commit": {"oid": "3774db595f1ab03626d80a7b582fe1fc13dd11d0"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxMzo1MjowNlrOGZpiAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxNDowNDo1MlrOGZpljA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU0ODAzMw==", "bodyText": "New VM code typically initializes all variables and tries to only have 1 per line.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tUDATA maxHeapSize, maxDirectMemorySize;\n          \n          \n            \n            \t\t\tchar *howset;\n          \n          \n            \n            \t\t\tUDATA maxHeapSize = 0;\n          \n          \n            \n            \t\t\tUDATA maxDirectMemorySize = vm->directByteBufferMemoryMax;\n          \n          \n            \n            \t\t\tchar *howset = NULL;", "url": "https://github.com/eclipse-openj9/openj9/pull/9567#discussion_r429548033", "createdAt": "2020-05-23T13:52:06Z", "author": {"login": "DanHeidinga"}, "path": "runtime/vm/jvminit.c", "diffHunk": "@@ -6349,6 +6349,40 @@ protectedInitializeJavaVM(J9PortLibrary* portLibrary, void * userData)\n \tXj9BreakPoint(\"jvminit\");\n #endif\n \n+        {\n+\t\tIDATA enabled = FIND_AND_CONSUME_ARG(EXACT_MATCH, VMOPT_XXPRINTFLAGSFINALENABLE, NULL);\n+\t\tIDATA disabled = FIND_AND_CONSUME_ARG(EXACT_MATCH, VMOPT_XXPRINTFLAGSFINALDISABLE, NULL);\n+\t\tif (enabled > disabled) {\n+\t\t\tUDATA maxHeapSize, maxDirectMemorySize;\n+\t\t\tchar *howset;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3774db595f1ab03626d80a7b582fe1fc13dd11d0"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU0ODgwMQ==", "bodyText": "Given the mapping between -Xmx and -XX:MaxHeapSize= [1], I think we only need to search for -Xmx here as the findArgInVMArgs code handles the mapping for us.\n[1] https://github.com/eclipse/openj9/blob/3774db595f1ab03626d80a7b582fe1fc13dd11d0/runtime/vm/jvminit.c#L4256", "url": "https://github.com/eclipse-openj9/openj9/pull/9567#discussion_r429548801", "createdAt": "2020-05-23T14:02:48Z", "author": {"login": "DanHeidinga"}, "path": "runtime/vm/jvminit.c", "diffHunk": "@@ -6349,6 +6349,40 @@ protectedInitializeJavaVM(J9PortLibrary* portLibrary, void * userData)\n \tXj9BreakPoint(\"jvminit\");\n #endif\n \n+        {\n+\t\tIDATA enabled = FIND_AND_CONSUME_ARG(EXACT_MATCH, VMOPT_XXPRINTFLAGSFINALENABLE, NULL);\n+\t\tIDATA disabled = FIND_AND_CONSUME_ARG(EXACT_MATCH, VMOPT_XXPRINTFLAGSFINALDISABLE, NULL);\n+\t\tif (enabled > disabled) {\n+\t\t\tUDATA maxHeapSize, maxDirectMemorySize;\n+\t\t\tchar *howset;\n+\n+\t\t\t/*\n+\t\t\t * Emulate Hotspot -XX:+PrintFlagsFinal output for two specific flags:\n+\t\t\t *\n+\t\t\t * [Global flags]\n+\t\t\t *    size_t MaxHeapSize                              = 4294967296                                {product} {ergonomic}\n+\t\t\t *  uint64_t MaxDirectMemorySize                      = 3758096384                                {product} {default}\n+\t\t\t */\n+\n+\t\t\tj9tty_printf(PORTLIB, \"[Global flags]\\n\");\n+\n+\t\t\tmaxHeapSize = (UDATA) vm->memoryManagerFunctions->j9gc_get_maximum_heap_size(vm);\n+\t\t\thowset=\"ergonomic\";\n+\t\t\tif ((findArgInVMArgs( PORTLIB, vm->vmArgsArray, STARTSWITH_MATCH, VMOPT_XMX, NULL, 0) >= 0) ||\n+\t\t\t\t(findArgInVMArgs( PORTLIB, vm->vmArgsArray, STARTSWITH_MATCH, MAPOPT_XXMAXHEAPSIZE_EQUALS, NULL, 0) >= 0)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3774db595f1ab03626d80a7b582fe1fc13dd11d0"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU0ODkxOQ==", "bodyText": "Nitpick I'd ignore if there weren't other changes:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\thowset=\"ergonomic\";\n          \n          \n            \n            \t\t\thowset = \"ergonomic\";", "url": "https://github.com/eclipse-openj9/openj9/pull/9567#discussion_r429548919", "createdAt": "2020-05-23T14:04:38Z", "author": {"login": "DanHeidinga"}, "path": "runtime/vm/jvminit.c", "diffHunk": "@@ -6349,6 +6349,40 @@ protectedInitializeJavaVM(J9PortLibrary* portLibrary, void * userData)\n \tXj9BreakPoint(\"jvminit\");\n #endif\n \n+        {\n+\t\tIDATA enabled = FIND_AND_CONSUME_ARG(EXACT_MATCH, VMOPT_XXPRINTFLAGSFINALENABLE, NULL);\n+\t\tIDATA disabled = FIND_AND_CONSUME_ARG(EXACT_MATCH, VMOPT_XXPRINTFLAGSFINALDISABLE, NULL);\n+\t\tif (enabled > disabled) {\n+\t\t\tUDATA maxHeapSize, maxDirectMemorySize;\n+\t\t\tchar *howset;\n+\n+\t\t\t/*\n+\t\t\t * Emulate Hotspot -XX:+PrintFlagsFinal output for two specific flags:\n+\t\t\t *\n+\t\t\t * [Global flags]\n+\t\t\t *    size_t MaxHeapSize                              = 4294967296                                {product} {ergonomic}\n+\t\t\t *  uint64_t MaxDirectMemorySize                      = 3758096384                                {product} {default}\n+\t\t\t */\n+\n+\t\t\tj9tty_printf(PORTLIB, \"[Global flags]\\n\");\n+\n+\t\t\tmaxHeapSize = (UDATA) vm->memoryManagerFunctions->j9gc_get_maximum_heap_size(vm);\n+\t\t\thowset=\"ergonomic\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3774db595f1ab03626d80a7b582fe1fc13dd11d0"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU0ODk0MA==", "bodyText": "Applies to other sets of howset as well", "url": "https://github.com/eclipse-openj9/openj9/pull/9567#discussion_r429548940", "createdAt": "2020-05-23T14:04:52Z", "author": {"login": "DanHeidinga"}, "path": "runtime/vm/jvminit.c", "diffHunk": "@@ -6349,6 +6349,40 @@ protectedInitializeJavaVM(J9PortLibrary* portLibrary, void * userData)\n \tXj9BreakPoint(\"jvminit\");\n #endif\n \n+        {\n+\t\tIDATA enabled = FIND_AND_CONSUME_ARG(EXACT_MATCH, VMOPT_XXPRINTFLAGSFINALENABLE, NULL);\n+\t\tIDATA disabled = FIND_AND_CONSUME_ARG(EXACT_MATCH, VMOPT_XXPRINTFLAGSFINALDISABLE, NULL);\n+\t\tif (enabled > disabled) {\n+\t\t\tUDATA maxHeapSize, maxDirectMemorySize;\n+\t\t\tchar *howset;\n+\n+\t\t\t/*\n+\t\t\t * Emulate Hotspot -XX:+PrintFlagsFinal output for two specific flags:\n+\t\t\t *\n+\t\t\t * [Global flags]\n+\t\t\t *    size_t MaxHeapSize                              = 4294967296                                {product} {ergonomic}\n+\t\t\t *  uint64_t MaxDirectMemorySize                      = 3758096384                                {product} {default}\n+\t\t\t */\n+\n+\t\t\tj9tty_printf(PORTLIB, \"[Global flags]\\n\");\n+\n+\t\t\tmaxHeapSize = (UDATA) vm->memoryManagerFunctions->j9gc_get_maximum_heap_size(vm);\n+\t\t\thowset=\"ergonomic\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU0ODkxOQ=="}, "originalCommit": {"oid": "3774db595f1ab03626d80a7b582fe1fc13dd11d0"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3Njc4MDU5", "url": "https://github.com/eclipse-openj9/openj9/pull/9567#pullrequestreview-417678059", "createdAt": "2020-05-25T12:28:52Z", "commit": {"oid": "3774db595f1ab03626d80a7b582fe1fc13dd11d0"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMjoyODo1MlrOGZ_lHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMjozMjo0NFrOGZ_rQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkwOTI3Ng==", "bodyText": "The types of maxHeapSize and maxDirectMemorySize should be uint64_t to match the comment below.\nhowset should have type const char *.", "url": "https://github.com/eclipse-openj9/openj9/pull/9567#discussion_r429909276", "createdAt": "2020-05-25T12:28:52Z", "author": {"login": "keithc-ca"}, "path": "runtime/vm/jvminit.c", "diffHunk": "@@ -6349,6 +6349,40 @@ protectedInitializeJavaVM(J9PortLibrary* portLibrary, void * userData)\n \tXj9BreakPoint(\"jvminit\");\n #endif\n \n+        {\n+\t\tIDATA enabled = FIND_AND_CONSUME_ARG(EXACT_MATCH, VMOPT_XXPRINTFLAGSFINALENABLE, NULL);\n+\t\tIDATA disabled = FIND_AND_CONSUME_ARG(EXACT_MATCH, VMOPT_XXPRINTFLAGSFINALDISABLE, NULL);\n+\t\tif (enabled > disabled) {\n+\t\t\tUDATA maxHeapSize, maxDirectMemorySize;\n+\t\t\tchar *howset;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU0ODAzMw=="}, "originalCommit": {"oid": "3774db595f1ab03626d80a7b582fe1fc13dd11d0"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkxMDM5OQ==", "bodyText": "The format for maxDirectMemorySize should not be llu, but rather zu (like maxHeapSize).", "url": "https://github.com/eclipse-openj9/openj9/pull/9567#discussion_r429910399", "createdAt": "2020-05-25T12:31:37Z", "author": {"login": "keithc-ca"}, "path": "runtime/vm/jvminit.c", "diffHunk": "@@ -6349,6 +6349,40 @@ protectedInitializeJavaVM(J9PortLibrary* portLibrary, void * userData)\n \tXj9BreakPoint(\"jvminit\");\n #endif\n \n+        {\n+\t\tIDATA enabled = FIND_AND_CONSUME_ARG(EXACT_MATCH, VMOPT_XXPRINTFLAGSFINALENABLE, NULL);\n+\t\tIDATA disabled = FIND_AND_CONSUME_ARG(EXACT_MATCH, VMOPT_XXPRINTFLAGSFINALDISABLE, NULL);\n+\t\tif (enabled > disabled) {\n+\t\t\tUDATA maxHeapSize, maxDirectMemorySize;\n+\t\t\tchar *howset;\n+\n+\t\t\t/*\n+\t\t\t * Emulate Hotspot -XX:+PrintFlagsFinal output for two specific flags:\n+\t\t\t *\n+\t\t\t * [Global flags]\n+\t\t\t *    size_t MaxHeapSize                              = 4294967296                                {product} {ergonomic}\n+\t\t\t *  uint64_t MaxDirectMemorySize                      = 3758096384                                {product} {default}\n+\t\t\t */\n+\n+\t\t\tj9tty_printf(PORTLIB, \"[Global flags]\\n\");\n+\n+\t\t\tmaxHeapSize = (UDATA) vm->memoryManagerFunctions->j9gc_get_maximum_heap_size(vm);\n+\t\t\thowset=\"ergonomic\";\n+\t\t\tif ((findArgInVMArgs( PORTLIB, vm->vmArgsArray, STARTSWITH_MATCH, VMOPT_XMX, NULL, 0) >= 0) ||\n+\t\t\t\t(findArgInVMArgs( PORTLIB, vm->vmArgsArray, STARTSWITH_MATCH, MAPOPT_XXMAXHEAPSIZE_EQUALS, NULL, 0) >= 0)) {\n+\t\t\t\thowset = \"commandline\";\n+\t\t\t}\n+\t\t\tj9tty_printf(PORTLIB, \"   size_t MaxHeapSize                              = %-41zu {product} {%s}\\n\", maxHeapSize, howset);\n+\n+\t\t\tmaxDirectMemorySize = vm->directByteBufferMemoryMax;\n+\t\t\thowset=\"ergonomic\";\n+\t\t\tif ((findArgInVMArgs( PORTLIB, vm->vmArgsArray, STARTSWITH_MATCH, VMOPT_XXMAXDIRECTMEMORYSIZEEQUALS, NULL, 0) >= 0)) {\n+\t\t\t\thowset = \"commandline\";\n+\t\t\t}\n+\t\t\tj9tty_printf(PORTLIB, \" uint64_t MaxDirectMemorySize                      = %-41llu {product} {%s}\\n\", maxDirectMemorySize, howset);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3774db595f1ab03626d80a7b582fe1fc13dd11d0"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkxMDg1MA==", "bodyText": "The opening brace should be indented one tab less than the block it begins (unlike JIT code).", "url": "https://github.com/eclipse-openj9/openj9/pull/9567#discussion_r429910850", "createdAt": "2020-05-25T12:32:44Z", "author": {"login": "keithc-ca"}, "path": "runtime/vm/jvminit.c", "diffHunk": "@@ -6349,6 +6350,15 @@ protectedInitializeJavaVM(J9PortLibrary* portLibrary, void * userData)\n \tXj9BreakPoint(\"jvminit\");\n #endif\n \n+        {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg3Mjg1OQ=="}, "originalCommit": {"oid": "43fdb2d456a42b455995529aad2ad8378ba991a9"}, "originalPosition": 12}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7bc47f084e9692768812f7b296a68679efcd8588", "author": {"user": {"login": "mstoodle", "name": "Mark Stoodley"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/7bc47f084e9692768812f7b296a68679efcd8588", "committedDate": "2020-05-25T17:00:04Z", "message": "changes types back to size_t and uint64_t\n\nMatch Hotspot output unless there is an extremely good reason not to.\n\nSigned-off-by: Mark Stoodley <mstoodle@ca.ibm.com>"}, "afterCommit": {"oid": "1665ed088d739875b8774006f7ee385fc775c23f", "author": {"user": {"login": "mstoodle", "name": "Mark Stoodley"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/1665ed088d739875b8774006f7ee385fc775c23f", "committedDate": "2020-05-26T20:04:31Z", "message": "Incomplete hack implementation for -XX:+PrintFlagsFinal\n\nAn incomplete implementation of VM options that produces the\n-XX:+PrintFlagsFinal output for two specific options required by\nthe elasticsearch project. This code is expected to be temporary\nuntil a more comprehensive solution can be architected. For this\nreason, this change is very straight-forward and localized so\nit can be easily removed.\n\nThe two options whose values will be printed are for\n`-XX:MaxHeapSize=` and `-XX:MaxDirectMemorySize=` .\n\nWith this change, elasticsearch no longer NPEs on startup and,\nin my local testing, all their tests pass on OpenJ9.\n\nI tried to match, as closely as possible, the output Hotspot\ngenerates when one uses -XX:+PrintFlagsFinal, which includes the\nnames used for types (e.g. size_t or uint64_t), the option names,\nthe option category (e.g. {product} for these two options), the\nway the option is set (e.g. {ergonomic} or {command line} for\nthese two options), and the field widths produced by a JDK11\nHotspot build.\n\nI added 3 command-line tests :\n\n1) that two options (MaxHeapSize, MaxDirectMemorySize) are present\nwhen -XX:+PrintFlagsFinal option is specified.\n\n2) that -XX:+PrintFlagsFinal overrides earlier -XX:-PrintFlagsFinal.\n\n3) that -XX:-PrintFlagsFinal overrides earlier -XX:+PrintFlagsFinal.\n\nFixes: #7764\n\nSigned-off-by: Mark Stoodley <mstoodle@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4NjY1NjUz", "url": "https://github.com/eclipse-openj9/openj9/pull/9567#pullrequestreview-418665653", "createdAt": "2020-05-26T20:45:10Z", "commit": {"oid": "1665ed088d739875b8774006f7ee385fc775c23f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4Njc0MDEz", "url": "https://github.com/eclipse-openj9/openj9/pull/9567#pullrequestreview-418674013", "createdAt": "2020-05-26T20:58:13Z", "commit": {"oid": "1665ed088d739875b8774006f7ee385fc775c23f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1665ed088d739875b8774006f7ee385fc775c23f", "author": {"user": {"login": "mstoodle", "name": "Mark Stoodley"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/1665ed088d739875b8774006f7ee385fc775c23f", "committedDate": "2020-05-26T20:04:31Z", "message": "Incomplete hack implementation for -XX:+PrintFlagsFinal\n\nAn incomplete implementation of VM options that produces the\n-XX:+PrintFlagsFinal output for two specific options required by\nthe elasticsearch project. This code is expected to be temporary\nuntil a more comprehensive solution can be architected. For this\nreason, this change is very straight-forward and localized so\nit can be easily removed.\n\nThe two options whose values will be printed are for\n`-XX:MaxHeapSize=` and `-XX:MaxDirectMemorySize=` .\n\nWith this change, elasticsearch no longer NPEs on startup and,\nin my local testing, all their tests pass on OpenJ9.\n\nI tried to match, as closely as possible, the output Hotspot\ngenerates when one uses -XX:+PrintFlagsFinal, which includes the\nnames used for types (e.g. size_t or uint64_t), the option names,\nthe option category (e.g. {product} for these two options), the\nway the option is set (e.g. {ergonomic} or {command line} for\nthese two options), and the field widths produced by a JDK11\nHotspot build.\n\nI added 3 command-line tests :\n\n1) that two options (MaxHeapSize, MaxDirectMemorySize) are present\nwhen -XX:+PrintFlagsFinal option is specified.\n\n2) that -XX:+PrintFlagsFinal overrides earlier -XX:-PrintFlagsFinal.\n\n3) that -XX:-PrintFlagsFinal overrides earlier -XX:+PrintFlagsFinal.\n\nFixes: #7764\n\nSigned-off-by: Mark Stoodley <mstoodle@ca.ibm.com>"}, "afterCommit": {"oid": "639bea83e9d1ae8a387de17edd62b1c5efc08937", "author": {"user": {"login": "mstoodle", "name": "Mark Stoodley"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/639bea83e9d1ae8a387de17edd62b1c5efc08937", "committedDate": "2020-05-26T21:50:09Z", "message": "Incomplete hack implementation for -XX:+PrintFlagsFinal\n\nAn incomplete implementation of VM options that produces the\n-XX:+PrintFlagsFinal output for two specific options required by\nthe elasticsearch project. This code is expected to be temporary\nuntil a more comprehensive solution can be architected. For this\nreason, this change is very straight-forward and localized so\nit can be easily removed.\n\nThe two options whose values will be printed are for\n`-XX:MaxHeapSize=` and `-XX:MaxDirectMemorySize=` .\n\nWith this change, elasticsearch no longer NPEs on startup and,\nin my local testing, all their tests pass on OpenJ9.\n\nI tried to match, as closely as possible, the output Hotspot\ngenerates when one uses -XX:+PrintFlagsFinal, which includes the\nnames used for types (e.g. size_t or uint64_t), the option names,\nthe option category (e.g. {product} for these two options), the\nway the option is set (e.g. {ergonomic} or {command line} for\nthese two options), and the field widths produced by a JDK11\nHotspot build.\n\nI added 3 command-line tests :\n\n1) that two options (MaxHeapSize, MaxDirectMemorySize) are present\nwhen -XX:+PrintFlagsFinal option is specified.\n\n2) that -XX:+PrintFlagsFinal overrides earlier -XX:-PrintFlagsFinal.\n\n3) that -XX:-PrintFlagsFinal overrides earlier -XX:+PrintFlagsFinal.\n\nFixes: #7764\n\nSigned-off-by: Mark Stoodley <mstoodle@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4NzY4NTAx", "url": "https://github.com/eclipse-openj9/openj9/pull/9567#pullrequestreview-418768501", "createdAt": "2020-05-27T00:37:26Z", "commit": {"oid": "639bea83e9d1ae8a387de17edd62b1c5efc08937"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff2b7f5e827d4310bc8a84a4838484cb47a1609d", "author": {"user": {"login": "mstoodle", "name": "Mark Stoodley"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/ff2b7f5e827d4310bc8a84a4838484cb47a1609d", "committedDate": "2020-05-27T12:47:18Z", "message": "Incomplete tactical implementation for -XX:+PrintFlagsFinal\n\nAn incomplete implementation of VM options that produces the\n-XX:+PrintFlagsFinal output for two specific options required by\nthe elasticsearch project. This code is expected to be temporary\nuntil a more comprehensive solution can be architected. For this\nreason, this change is very straight-forward and localized so\nit can be easily removed.\n\nThe two options whose values will be printed are for\n`-XX:MaxHeapSize=` and `-XX:MaxDirectMemorySize=` .\n\nWith this change, elasticsearch no longer NPEs on startup and,\nin my local testing, all their tests pass on OpenJ9.\n\nI tried to match, as closely as possible, the output Hotspot\ngenerates when one uses -XX:+PrintFlagsFinal, which includes the\nnames used for types (e.g. size_t or uint64_t), the option names,\nthe option category (e.g. {product} for these two options), the\nway the option is set (e.g. {ergonomic} or {command line} for\nthese two options), and the field widths produced by a JDK11\nHotspot build.\n\nI added 3 command-line tests :\n\n1) that two options (MaxHeapSize, MaxDirectMemorySize) are present\nwhen -XX:+PrintFlagsFinal option is specified.\n\n2) that -XX:+PrintFlagsFinal overrides earlier -XX:-PrintFlagsFinal.\n\n3) that -XX:-PrintFlagsFinal overrides earlier -XX:+PrintFlagsFinal.\n\nFixes: #7764\n\nSigned-off-by: Mark Stoodley <mstoodle@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "639bea83e9d1ae8a387de17edd62b1c5efc08937", "author": {"user": {"login": "mstoodle", "name": "Mark Stoodley"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/639bea83e9d1ae8a387de17edd62b1c5efc08937", "committedDate": "2020-05-26T21:50:09Z", "message": "Incomplete hack implementation for -XX:+PrintFlagsFinal\n\nAn incomplete implementation of VM options that produces the\n-XX:+PrintFlagsFinal output for two specific options required by\nthe elasticsearch project. This code is expected to be temporary\nuntil a more comprehensive solution can be architected. For this\nreason, this change is very straight-forward and localized so\nit can be easily removed.\n\nThe two options whose values will be printed are for\n`-XX:MaxHeapSize=` and `-XX:MaxDirectMemorySize=` .\n\nWith this change, elasticsearch no longer NPEs on startup and,\nin my local testing, all their tests pass on OpenJ9.\n\nI tried to match, as closely as possible, the output Hotspot\ngenerates when one uses -XX:+PrintFlagsFinal, which includes the\nnames used for types (e.g. size_t or uint64_t), the option names,\nthe option category (e.g. {product} for these two options), the\nway the option is set (e.g. {ergonomic} or {command line} for\nthese two options), and the field widths produced by a JDK11\nHotspot build.\n\nI added 3 command-line tests :\n\n1) that two options (MaxHeapSize, MaxDirectMemorySize) are present\nwhen -XX:+PrintFlagsFinal option is specified.\n\n2) that -XX:+PrintFlagsFinal overrides earlier -XX:-PrintFlagsFinal.\n\n3) that -XX:-PrintFlagsFinal overrides earlier -XX:+PrintFlagsFinal.\n\nFixes: #7764\n\nSigned-off-by: Mark Stoodley <mstoodle@ca.ibm.com>"}, "afterCommit": {"oid": "ff2b7f5e827d4310bc8a84a4838484cb47a1609d", "author": {"user": {"login": "mstoodle", "name": "Mark Stoodley"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/ff2b7f5e827d4310bc8a84a4838484cb47a1609d", "committedDate": "2020-05-27T12:47:18Z", "message": "Incomplete tactical implementation for -XX:+PrintFlagsFinal\n\nAn incomplete implementation of VM options that produces the\n-XX:+PrintFlagsFinal output for two specific options required by\nthe elasticsearch project. This code is expected to be temporary\nuntil a more comprehensive solution can be architected. For this\nreason, this change is very straight-forward and localized so\nit can be easily removed.\n\nThe two options whose values will be printed are for\n`-XX:MaxHeapSize=` and `-XX:MaxDirectMemorySize=` .\n\nWith this change, elasticsearch no longer NPEs on startup and,\nin my local testing, all their tests pass on OpenJ9.\n\nI tried to match, as closely as possible, the output Hotspot\ngenerates when one uses -XX:+PrintFlagsFinal, which includes the\nnames used for types (e.g. size_t or uint64_t), the option names,\nthe option category (e.g. {product} for these two options), the\nway the option is set (e.g. {ergonomic} or {command line} for\nthese two options), and the field widths produced by a JDK11\nHotspot build.\n\nI added 3 command-line tests :\n\n1) that two options (MaxHeapSize, MaxDirectMemorySize) are present\nwhen -XX:+PrintFlagsFinal option is specified.\n\n2) that -XX:+PrintFlagsFinal overrides earlier -XX:-PrintFlagsFinal.\n\n3) that -XX:-PrintFlagsFinal overrides earlier -XX:+PrintFlagsFinal.\n\nFixes: #7764\n\nSigned-off-by: Mark Stoodley <mstoodle@ca.ibm.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 931, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}