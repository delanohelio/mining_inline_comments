{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxNTg2NDg3", "number": 8931, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjo1MjoyMFrODqdwfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjo1Mjo1N1rODqdxtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODU0MzMyOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/env/J9KnownObjectTable.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjo1MjoyMFrOF6OpZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjo1MjoyMFrOF6OpZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYwMTcwMQ==", "bodyText": "Let's use a reference here.", "url": "https://github.com/eclipse-openj9/openj9/pull/8931#discussion_r396601701", "createdAt": "2020-03-23T16:52:20Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/env/J9KnownObjectTable.cpp", "diffHunk": "@@ -341,96 +435,176 @@ J9::KnownObjectTable::dumpObjectTo(TR::FILE *file, Index i, const char *fieldNam\n       }\n    }\n \n+\n+#if defined(J9VM_OPT_JITSERVER)\n void\n-J9::KnownObjectTable::dumpTo(TR::FILE *file, TR::Compilation *comp)\n+J9::KnownObjectTable::getKnownObjectTableDumpInfo(std::vector<TR_KnownObjectTableDumpInfo> &knotDumpInfoList)\n    {\n-#if defined(J9VM_OPT_JITSERVER)\n-   // JITServer KOT TODO\n-   if (self()->comp()->isOutOfProcessCompilation())\n-      return;\n-#endif /* defined(J9VM_OPT_JITSERVER) */\n+   TR_ASSERT_FATAL(!self()->comp()->isOutOfProcessCompilation(), \"getKnownObjectTableDumpInfo() can not be executed at the server.\");\n+\n    TR_J9VMBase *j9fe = (TR_J9VMBase*)self()->fe();\n    J9MemoryManagerFunctions * mmf = jitConfig->javaVM->memoryManagerFunctions;\n+   TR::KnownObjectTable::Index endIndex = self()->getEndIndex();\n    TR::VMAccessCriticalSection j9KnownObjectTableDumpToCriticalSection(j9fe,\n                                                                         TR::VMAccessCriticalSection::tryToAcquireVMAccess,\n-                                                                        comp);\n-\n+                                                                        self()->comp());\n    if (j9KnownObjectTableDumpToCriticalSection.hasVMAccess())\n       {\n-      trfprintf(file, \"<knownObjectTable size=\\\"%d\\\"> // \", self()->getEndIndex());\n+      uintptr_t *ref = NULL;\n+      int32_t   len = 0;\n+      char      *className = NULL;\n+      int32_t   hashCode = 0;\n+\n+      for (uint32_t i = 0; i < endIndex; i++)\n+         {\n+         if (self()->isNull(i))\n+            {\n+            knotDumpInfoList.push_back(make_tuple(TR_KnownObjectTableDumpInfoStruct(NULL, 0, 0), std::string(\"\")));\n+            }\n+         else\n+            {\n+            ref = self()->getPointerLocation(i);\n+            hashCode = mmf->j9gc_objaccess_getObjectHashCode(jitConfig->javaVM, (J9Object*)(*ref));\n+            className = j9fe->getClassNameChars(j9fe->getObjectClass(*ref), len);\n+\n+            knotDumpInfoList.push_back(make_tuple(TR_KnownObjectTableDumpInfoStruct(ref, *ref, hashCode), std::string(className, len)));\n+            }\n+         }\n+      }\n+   }\n+#endif /* defined(J9VM_OPT_JITSERVER) */\n+\n+\n+void\n+J9::KnownObjectTable::dumpTo(TR::FILE *file, TR::Compilation *comp)\n+   {\n+   TR::KnownObjectTable::Index endIndex = self()->getEndIndex();\n+#if defined(J9VM_OPT_JITSERVER)\n+   if (comp->isOutOfProcessCompilation())\n+      {\n+      auto stream = TR::CompilationInfo::getStream();\n+      stream->write(JITServer::MessageType::KnownObjectTable_getKnownObjectTableDumpInfo, JITServer::Void());\n+\n+      auto recv = stream->read<std::vector<TR_KnownObjectTableDumpInfo>>();\n+      auto knotDumpInfoList = std::get<0>(recv);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cd059862e280214c2e575d7576cb56a6f20fad1"}, "originalPosition": 200}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODU0NjQ3OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/env/J9KnownObjectTable.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjo1Mjo1N1rOF6OrQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjo1Mjo1N1rOF6OrQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYwMjE3Ng==", "bodyText": "%d should be replaces with %u because `numOfEntries is unsigned.", "url": "https://github.com/eclipse-openj9/openj9/pull/8931#discussion_r396602176", "createdAt": "2020-03-23T16:52:57Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/env/J9KnownObjectTable.cpp", "diffHunk": "@@ -341,96 +435,176 @@ J9::KnownObjectTable::dumpObjectTo(TR::FILE *file, Index i, const char *fieldNam\n       }\n    }\n \n+\n+#if defined(J9VM_OPT_JITSERVER)\n void\n-J9::KnownObjectTable::dumpTo(TR::FILE *file, TR::Compilation *comp)\n+J9::KnownObjectTable::getKnownObjectTableDumpInfo(std::vector<TR_KnownObjectTableDumpInfo> &knotDumpInfoList)\n    {\n-#if defined(J9VM_OPT_JITSERVER)\n-   // JITServer KOT TODO\n-   if (self()->comp()->isOutOfProcessCompilation())\n-      return;\n-#endif /* defined(J9VM_OPT_JITSERVER) */\n+   TR_ASSERT_FATAL(!self()->comp()->isOutOfProcessCompilation(), \"getKnownObjectTableDumpInfo() can not be executed at the server.\");\n+\n    TR_J9VMBase *j9fe = (TR_J9VMBase*)self()->fe();\n    J9MemoryManagerFunctions * mmf = jitConfig->javaVM->memoryManagerFunctions;\n+   TR::KnownObjectTable::Index endIndex = self()->getEndIndex();\n    TR::VMAccessCriticalSection j9KnownObjectTableDumpToCriticalSection(j9fe,\n                                                                         TR::VMAccessCriticalSection::tryToAcquireVMAccess,\n-                                                                        comp);\n-\n+                                                                        self()->comp());\n    if (j9KnownObjectTableDumpToCriticalSection.hasVMAccess())\n       {\n-      trfprintf(file, \"<knownObjectTable size=\\\"%d\\\"> // \", self()->getEndIndex());\n+      uintptr_t *ref = NULL;\n+      int32_t   len = 0;\n+      char      *className = NULL;\n+      int32_t   hashCode = 0;\n+\n+      for (uint32_t i = 0; i < endIndex; i++)\n+         {\n+         if (self()->isNull(i))\n+            {\n+            knotDumpInfoList.push_back(make_tuple(TR_KnownObjectTableDumpInfoStruct(NULL, 0, 0), std::string(\"\")));\n+            }\n+         else\n+            {\n+            ref = self()->getPointerLocation(i);\n+            hashCode = mmf->j9gc_objaccess_getObjectHashCode(jitConfig->javaVM, (J9Object*)(*ref));\n+            className = j9fe->getClassNameChars(j9fe->getObjectClass(*ref), len);\n+\n+            knotDumpInfoList.push_back(make_tuple(TR_KnownObjectTableDumpInfoStruct(ref, *ref, hashCode), std::string(className, len)));\n+            }\n+         }\n+      }\n+   }\n+#endif /* defined(J9VM_OPT_JITSERVER) */\n+\n+\n+void\n+J9::KnownObjectTable::dumpTo(TR::FILE *file, TR::Compilation *comp)\n+   {\n+   TR::KnownObjectTable::Index endIndex = self()->getEndIndex();\n+#if defined(J9VM_OPT_JITSERVER)\n+   if (comp->isOutOfProcessCompilation())\n+      {\n+      auto stream = TR::CompilationInfo::getStream();\n+      stream->write(JITServer::MessageType::KnownObjectTable_getKnownObjectTableDumpInfo, JITServer::Void());\n+\n+      auto recv = stream->read<std::vector<TR_KnownObjectTableDumpInfo>>();\n+      auto knotDumpInfoList = std::get<0>(recv);\n+\n+      uint32_t numOfEntries = knotDumpInfoList.size();\n+      TR_ASSERT_FATAL((numOfEntries == endIndex), \"The client table size %u is different from the server table size %u\", numOfEntries, endIndex);\n+\n+      trfprintf(file, \"<knownObjectTable size=\\\"%d\\\"> // \", numOfEntries);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cd059862e280214c2e575d7576cb56a6f20fad1"}, "originalPosition": 205}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 405, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}