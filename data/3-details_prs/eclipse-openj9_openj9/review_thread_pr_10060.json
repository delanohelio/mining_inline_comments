{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyMjM5NjA2", "number": 10060, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDo0NzowMVrOEK7cOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwNDowOToyM1rOELHfFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODk1MDk2OnYy", "diffSide": "RIGHT", "path": "runtime/bcutil/ROMClassBuilder.cpp", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDo0NzowMVrOGsQMoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNTo0NToyOVrOGsTO6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA1NTkwNA==", "bodyText": "Is the cast needed here?", "url": "https://github.com/eclipse-openj9/openj9/pull/10060#discussion_r449055904", "createdAt": "2020-07-02T14:47:01Z", "author": {"login": "DanHeidinga"}, "path": "runtime/bcutil/ROMClassBuilder.cpp", "diffHunk": "@@ -272,8 +272,10 @@ ROMClassBuilder::handleAnonClassName(J9CfrClassFile *classfile, bool *isLambda)\n \t/* Find if there are any Constant_String or CFR_CONSTANT_NameAndType references to the className.\n \t * If there are none we don't need to make a new cpEntry, we can overwrite the existing\n \t * one since the only reference to it is the classRef\n+\t * Note: The check only applies to the existing cpEntries of the constant pool rather than\n+\t * the last cpEntry (not yet initialized) for the anonClassName.\n \t */\n-\tfor (i = 0; i < classfile->constantPoolCount; i++) {\n+\tfor (i = 0; i < (U_32)newUtfCPEntry; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d03865bd3d8a223395cfcd19c438c1f934fa0261"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTEwNTY0MA==", "bodyText": "Removed the cast.", "url": "https://github.com/eclipse-openj9/openj9/pull/10060#discussion_r449105640", "createdAt": "2020-07-02T15:45:29Z", "author": {"login": "ChengJin01"}, "path": "runtime/bcutil/ROMClassBuilder.cpp", "diffHunk": "@@ -272,8 +272,10 @@ ROMClassBuilder::handleAnonClassName(J9CfrClassFile *classfile, bool *isLambda)\n \t/* Find if there are any Constant_String or CFR_CONSTANT_NameAndType references to the className.\n \t * If there are none we don't need to make a new cpEntry, we can overwrite the existing\n \t * one since the only reference to it is the classRef\n+\t * Note: The check only applies to the existing cpEntries of the constant pool rather than\n+\t * the last cpEntry (not yet initialized) for the anonClassName.\n \t */\n-\tfor (i = 0; i < classfile->constantPoolCount; i++) {\n+\tfor (i = 0; i < (U_32)newUtfCPEntry; i++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA1NTkwNA=="}, "originalCommit": {"oid": "d03865bd3d8a223395cfcd19c438c1f934fa0261"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODk3MTYyOnYy", "diffSide": "RIGHT", "path": "runtime/bcutil/cfreader.c", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDo1MjowMlrOGsQZvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNTo0NTo1OVrOGsTRSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA1OTI2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t/* Reset constantPoolCount for the anoClass after the static verification on the class file\n          \n          \n            \n            \t * so as to avoid checking the last cpEntry intended for anonClassName which has not yet been\n          \n          \n            \n            \t * initialized until ROMClassBuilder::handleAnonClassName() is invoked later in building\n          \n          \n            \n            \t * the corresponding ROMClass.\n          \n          \n            \n            \t */\n          \n          \n            \n            \t/* Set constantPoolCount here to take into account the extra cpEntry for the anonClass name.\n          \n          \n            \n            \t * This needs to occur after static verification as the new (last) cpEntry intended for \n          \n          \n            \n            \t  * the anonClassName is not initialized until ROMClassBuilder::handleAnonClassName() is \n          \n          \n            \n            \t  * invoked later in building the corresponding ROMClass.\n          \n          \n            \n            \t */", "url": "https://github.com/eclipse-openj9/openj9/pull/10060#discussion_r449059262", "createdAt": "2020-07-02T14:52:02Z", "author": {"login": "DanHeidinga"}, "path": "runtime/bcutil/cfreader.c", "diffHunk": "@@ -2860,6 +2864,13 @@ j9bcutil_readClassFileBytes(J9PortLibrary *portLib,\n \t}\n \tVERBOSE_END(ParseClassFileVerifyClass);\n \n+\t/* Reset constantPoolCount for the anoClass after the static verification on the class file\n+\t * so as to avoid checking the last cpEntry intended for anonClassName which has not yet been\n+\t * initialized until ROMClassBuilder::handleAnonClassName() is invoked later in building\n+\t * the corresponding ROMClass.\n+\t */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d03865bd3d8a223395cfcd19c438c1f934fa0261"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTEwNjI1MA==", "bodyText": "Replaced with the suggested comments.", "url": "https://github.com/eclipse-openj9/openj9/pull/10060#discussion_r449106250", "createdAt": "2020-07-02T15:45:59Z", "author": {"login": "ChengJin01"}, "path": "runtime/bcutil/cfreader.c", "diffHunk": "@@ -2860,6 +2864,13 @@ j9bcutil_readClassFileBytes(J9PortLibrary *portLib,\n \t}\n \tVERBOSE_END(ParseClassFileVerifyClass);\n \n+\t/* Reset constantPoolCount for the anoClass after the static verification on the class file\n+\t * so as to avoid checking the last cpEntry intended for anonClassName which has not yet been\n+\t * initialized until ROMClassBuilder::handleAnonClassName() is invoked later in building\n+\t * the corresponding ROMClass.\n+\t */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA1OTI2Mg=="}, "originalCommit": {"oid": "d03865bd3d8a223395cfcd19c438c1f934fa0261"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTAwMjEyOnYy", "diffSide": "RIGHT", "path": "runtime/bcutil/defineclass.c", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDo1OTowNVrOGsQtKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNTo0NzowMFrOGsTWJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA2NDIzNA==", "bodyText": "Ideally, this becomes:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tif (J9_ARE_ANY_BITS_SET(vm->runtimeFlags,J9_RUNTIME_VERIFY)) {\n          \n          \n            \n            \t\tif (J9_ARE_NO_BITS_SET(loadData->options, J9_FINDCLASS_FLAG_UNSAFE)\n          \n          \n            \n            \t\t|| (J2SE_VERSION(vm) == J2SE_18)\n          \n          \n            \n            \t\t|| (J2SE_VERSION(vm) == J2SE_V11)\n          \n          \n            \n            \t\t) {\n          \n          \n            \n            \t\t\ttranslationFlags |= BCT_StaticVerification;\n          \n          \n            \n            \t\t}\n          \n          \n            \n            \tif (J9_ARE_ANY_BITS_SET(vm->runtimeFlags,J9_RUNTIME_VERIFY)) {\n          \n          \n            \n            \t\ttranslationFlags |= BCT_StaticVerification;\n          \n          \n            \n            \t}\n          \n      \n    \n    \n  \n\nI'd like to verify as much of the Unsafe class as possible.", "url": "https://github.com/eclipse-openj9/openj9/pull/10060#discussion_r449064234", "createdAt": "2020-07-02T14:59:05Z", "author": {"login": "DanHeidinga"}, "path": "runtime/bcutil/defineclass.c", "diffHunk": "@@ -511,9 +511,14 @@ internalLoadROMClass(J9VMThread * vmThread, J9LoadROMClassData *loadData, J9Tran\n \t\ttranslationFlags |= stripFlags;\n \t}\n \n-\tif ((0 == (loadData->options & J9_FINDCLASS_FLAG_UNSAFE)) &&\n-\t\t(0 != (vm->runtimeFlags & J9_RUNTIME_VERIFY))) {\n-\t\ttranslationFlags |= BCT_StaticVerification;\n+\t/* Enable the static verification on the unsafe classes (only for Java 8 & 11) */\n+\tif (J9_ARE_ANY_BITS_SET(vm->runtimeFlags,J9_RUNTIME_VERIFY)) {\n+\t\tif (J9_ARE_NO_BITS_SET(loadData->options, J9_FINDCLASS_FLAG_UNSAFE)\n+\t\t|| (J2SE_VERSION(vm) == J2SE_18)\n+\t\t|| (J2SE_VERSION(vm) == J2SE_V11)\n+\t\t) {\n+\t\t\ttranslationFlags |= BCT_StaticVerification;\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d03865bd3d8a223395cfcd19c438c1f934fa0261"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTEwNzQ5NQ==", "bodyText": "Removed the check on Java 8  & 11. Will double-check in the personal builds.", "url": "https://github.com/eclipse-openj9/openj9/pull/10060#discussion_r449107495", "createdAt": "2020-07-02T15:47:00Z", "author": {"login": "ChengJin01"}, "path": "runtime/bcutil/defineclass.c", "diffHunk": "@@ -511,9 +511,14 @@ internalLoadROMClass(J9VMThread * vmThread, J9LoadROMClassData *loadData, J9Tran\n \t\ttranslationFlags |= stripFlags;\n \t}\n \n-\tif ((0 == (loadData->options & J9_FINDCLASS_FLAG_UNSAFE)) &&\n-\t\t(0 != (vm->runtimeFlags & J9_RUNTIME_VERIFY))) {\n-\t\ttranslationFlags |= BCT_StaticVerification;\n+\t/* Enable the static verification on the unsafe classes (only for Java 8 & 11) */\n+\tif (J9_ARE_ANY_BITS_SET(vm->runtimeFlags,J9_RUNTIME_VERIFY)) {\n+\t\tif (J9_ARE_NO_BITS_SET(loadData->options, J9_FINDCLASS_FLAG_UNSAFE)\n+\t\t|| (J2SE_VERSION(vm) == J2SE_18)\n+\t\t|| (J2SE_VERSION(vm) == J2SE_V11)\n+\t\t) {\n+\t\t\ttranslationFlags |= BCT_StaticVerification;\n+\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA2NDIzNA=="}, "originalCommit": {"oid": "d03865bd3d8a223395cfcd19c438c1f934fa0261"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTAwNjA3OnYy", "diffSide": "RIGHT", "path": "runtime/bcutil/cfreader.c", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNTowMDowMlrOGsQvqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNjoxNjo0NlrOGsUnmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA2NDg3Mw==", "bodyText": "I don't understand this change.  What check later in the code are we trying to avoid by this?", "url": "https://github.com/eclipse-openj9/openj9/pull/10060#discussion_r449064873", "createdAt": "2020-07-02T15:00:02Z", "author": {"login": "DanHeidinga"}, "path": "runtime/bcutil/cfreader.c", "diffHunk": "@@ -2643,8 +2643,14 @@ j9bcutil_readClassFileBytes(J9PortLibrary *portLib,\n \t/* Make sure the structure and static verification below uses the class file version\n \t * number. VM version is maintained in vmVersionShifted.\n \t */\n-\tflags &= ~BCT_MajorClassFileVersionMask;\n-\tflags |= ((UDATA) classfile->majorVersion) << BCT_MajorClassFileVersionMaskShift;\n+\tif (J9_ARE_ANY_BITS_SET(findClassFlags, J9_FINDCLASS_FLAG_UNSAFE)\n+\t&& ((vmVersionShifted == BCT_Java8MajorVersionShifted) || (vmVersionShifted == BCT_Java11MajorVersionShifted))\n+\t) {\n+\t\t/* Ignore the check for Unsafe.defineClass() on Java 8 & Java 11 */\n+\t} else {\n+\t\tflags &= ~BCT_MajorClassFileVersionMask;\n+\t\tflags |= ((UDATA) classfile->majorVersion) << BCT_MajorClassFileVersionMaskShift;\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d03865bd3d8a223395cfcd19c438c1f934fa0261"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTExOTM1MA==", "bodyText": "The late check on invokestatic in the case of unsafe needs to avoided in checkBytecodeStructure at  the code at /runtime/bcverify/staticverify.c:\ncheckBytecodeStructure (J9CfrClassFile * classfile, UDATA methodIndex, UDATA length, U_8 * map, J9CfrError * error, U_32 flags, I_32 *hasRET)\n{\n...\n\t\tcase CFR_BC_invokestatic:\n\t\t\t...\n\t\t\tif (info->tag != CFR_CONSTANT_Methodref) {\n------------------->    if (((flags & BCT_MajorClassFileVersionMask) >= BCT_Java8MajorVersionShifted)\n\t\t\t\t&& (bc != CFR_BC_invokevirtual) && (info->tag == CFR_CONSTANT_InterfaceMethodref)\n\t\t\t\t) {\n           ...\n\t\t\t\t\t/* Valid - take no action */\n\t\t\t\t} else {\n   ---------------------->errorType = J9NLS_CFR_ERR_BC_NOT_METHODREF__ID; \n\t\t\t\t\t/* Jazz 82615: Set the constant pool index to show up in the error message framework */\n\t\t\t\t\terrorDataIndex = index;\n\t\t\t\t\tgoto _verifyError;\n\t\t\t\t}\n\t\t\t}\n\nWe have to disable the check for unsafe to address the test failure with Unsafe.defineClass() detected in the OpenJ9 test suite jsr335_interfacePrivateMethod in personal builds (Java 8 & 11) as I mentioned at #9880 (comment)\njava.lang.VerifyError: JVMCFRE116 invoke bytecode must reference a Methodref; class=jdk/internal/reflect/GeneratedMethodAccessor19, method=invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;, pc=20\nException Details:\n  Location:\n---> jdk/internal/reflect/GeneratedMethodAccessor19.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object; \n@20: JBinvokestatic\n  Reason:\n    Wrong type at the index 10 of constant pool\n  Exception Handler Table:\n    bci [0, 20] => handler: 24\n    bci [0, 20] => handler: 24\n    bci [20, 23] => handler: 36\n\tat java.base/jdk.internal.misc.Unsafe.defineClass(Unsafe.java:1510) <--------\n\tat java.base/jdk.internal.reflect.ClassDefiner.defineClass(ClassDefiner.java:63)\n\tat java.base/jdk.internal.reflect.MethodAccessorGenerator$1.run(MethodAccessorGenerator.java:400)\n\tat java.base/jdk.internal.reflect.MethodAccessorGenerator$1.run(MethodAccessorGenerator.java:394)\n\tat java.base/java.security.AccessController.doPrivileged(AccessController.java:678)\n\tat java.base/jdk.internal.reflect.MethodAccessorGenerator.generate(MethodAccessorGenerator.java:393)\n\tat java.base/jdk.internal.reflect.MethodAccessorGenerator.generateMethod(MethodAccessorGenerator.java:75)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:53)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.openj9.test.jsr335.interfacePrivateMethod.Test_ReflectionAndMethodHandles.getLookupObject(Test_ReflectionAndMethodHandles.java:62)\n\tat org.openj9.test.jsr335.interfacePrivateMethod.Test_ReflectionAndMethodHandles.test_unreflect_child_public_static_m", "url": "https://github.com/eclipse-openj9/openj9/pull/10060#discussion_r449119350", "createdAt": "2020-07-02T16:02:04Z", "author": {"login": "ChengJin01"}, "path": "runtime/bcutil/cfreader.c", "diffHunk": "@@ -2643,8 +2643,14 @@ j9bcutil_readClassFileBytes(J9PortLibrary *portLib,\n \t/* Make sure the structure and static verification below uses the class file version\n \t * number. VM version is maintained in vmVersionShifted.\n \t */\n-\tflags &= ~BCT_MajorClassFileVersionMask;\n-\tflags |= ((UDATA) classfile->majorVersion) << BCT_MajorClassFileVersionMaskShift;\n+\tif (J9_ARE_ANY_BITS_SET(findClassFlags, J9_FINDCLASS_FLAG_UNSAFE)\n+\t&& ((vmVersionShifted == BCT_Java8MajorVersionShifted) || (vmVersionShifted == BCT_Java11MajorVersionShifted))\n+\t) {\n+\t\t/* Ignore the check for Unsafe.defineClass() on Java 8 & Java 11 */\n+\t} else {\n+\t\tflags &= ~BCT_MajorClassFileVersionMask;\n+\t\tflags |= ((UDATA) classfile->majorVersion) << BCT_MajorClassFileVersionMaskShift;\n+\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA2NDg3Mw=="}, "originalCommit": {"oid": "d03865bd3d8a223395cfcd19c438c1f934fa0261"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTEyODM0NA==", "bodyText": "I changed the code to (removing the check on Java 8 & 11)\n\tif (J9_ARE_NO_BITS_SET(findClassFlags, J9_FINDCLASS_FLAG_UNSAFE)) {\n\t\tflags &= ~BCT_MajorClassFileVersionMask;\n\t\tflags |= ((UDATA) classfile->majorVersion) << BCT_MajorClassFileVersionMaskShift;\n\t}\n\nto see how it goes in personal builds on Java 8 & 11.", "url": "https://github.com/eclipse-openj9/openj9/pull/10060#discussion_r449128344", "createdAt": "2020-07-02T16:16:46Z", "author": {"login": "ChengJin01"}, "path": "runtime/bcutil/cfreader.c", "diffHunk": "@@ -2643,8 +2643,14 @@ j9bcutil_readClassFileBytes(J9PortLibrary *portLib,\n \t/* Make sure the structure and static verification below uses the class file version\n \t * number. VM version is maintained in vmVersionShifted.\n \t */\n-\tflags &= ~BCT_MajorClassFileVersionMask;\n-\tflags |= ((UDATA) classfile->majorVersion) << BCT_MajorClassFileVersionMaskShift;\n+\tif (J9_ARE_ANY_BITS_SET(findClassFlags, J9_FINDCLASS_FLAG_UNSAFE)\n+\t&& ((vmVersionShifted == BCT_Java8MajorVersionShifted) || (vmVersionShifted == BCT_Java11MajorVersionShifted))\n+\t) {\n+\t\t/* Ignore the check for Unsafe.defineClass() on Java 8 & Java 11 */\n+\t} else {\n+\t\tflags &= ~BCT_MajorClassFileVersionMask;\n+\t\tflags |= ((UDATA) classfile->majorVersion) << BCT_MajorClassFileVersionMaskShift;\n+\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA2NDg3Mw=="}, "originalCommit": {"oid": "d03865bd3d8a223395cfcd19c438c1f934fa0261"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMDAwODE3OnYy", "diffSide": "RIGHT", "path": "runtime/bcutil/defineclass.c", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxOTozMTo1M1rOGsaoNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMDowMjoyNVrOGsbaew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIyNjgwNA==", "bodyText": "The comment can be deleted here as it doesn't match the intention of the code anymore.  Also, nitpick on space between , J9_RUNTIME....\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t/* Enable the static verification on the unsafe classes */\n          \n          \n            \n            \tif (J9_ARE_ANY_BITS_SET(vm->runtimeFlags,J9_RUNTIME_VERIFY)) {\n          \n          \n            \n            \tif (J9_ARE_ANY_BITS_SET(vm->runtimeFlags, J9_RUNTIME_VERIFY)) {", "url": "https://github.com/eclipse-openj9/openj9/pull/10060#discussion_r449226804", "createdAt": "2020-07-02T19:31:53Z", "author": {"login": "DanHeidinga"}, "path": "runtime/bcutil/defineclass.c", "diffHunk": "@@ -511,8 +511,8 @@ internalLoadROMClass(J9VMThread * vmThread, J9LoadROMClassData *loadData, J9Tran\n \t\ttranslationFlags |= stripFlags;\n \t}\n \n-\tif ((0 == (loadData->options & J9_FINDCLASS_FLAG_UNSAFE)) &&\n-\t\t(0 != (vm->runtimeFlags & J9_RUNTIME_VERIFY))) {\n+\t/* Enable the static verification on the unsafe classes */\n+\tif (J9_ARE_ANY_BITS_SET(vm->runtimeFlags,J9_RUNTIME_VERIFY)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bccfd57c7fdec64a694fac298db699652494504c"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIzOTY3NQ==", "bodyText": "Updated against the suggestion above.", "url": "https://github.com/eclipse-openj9/openj9/pull/10060#discussion_r449239675", "createdAt": "2020-07-02T20:02:25Z", "author": {"login": "ChengJin01"}, "path": "runtime/bcutil/defineclass.c", "diffHunk": "@@ -511,8 +511,8 @@ internalLoadROMClass(J9VMThread * vmThread, J9LoadROMClassData *loadData, J9Tran\n \t\ttranslationFlags |= stripFlags;\n \t}\n \n-\tif ((0 == (loadData->options & J9_FINDCLASS_FLAG_UNSAFE)) &&\n-\t\t(0 != (vm->runtimeFlags & J9_RUNTIME_VERIFY))) {\n+\t/* Enable the static verification on the unsafe classes */\n+\tif (J9_ARE_ANY_BITS_SET(vm->runtimeFlags,J9_RUNTIME_VERIFY)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIyNjgwNA=="}, "originalCommit": {"oid": "bccfd57c7fdec64a694fac298db699652494504c"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMDEyNzE5OnYy", "diffSide": "RIGHT", "path": "runtime/bcutil/cfreader.c", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMDoxNjozM1rOGsbxRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMzo0MDoxNlrOGsfw1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI0NTUxMA==", "bodyText": "Rather than making this change, which is quite distant from the source of the issue, could staticverify.c checkBytecodeStructure be changed instead?\nSomething like:\nif (info->tag != CFR_CONSTANT_Methodref) {\n\tif (((flags & BCT_MajorClassFileVersionMask) >= BCT_Java8MajorVersionShifted)\n\t&& (bc != CFR_BC_invokevirtual) && (info->tag == CFR_CONSTANT_InterfaceMethodref)\n\t) {\n\t\t/* JVMS 4.9.1 Static Constraints:\n\t\t * The indexbyte operands of each invokespecial and invokestatic instruction must represent\n\t\t * a valid index into the constant_pool table. The constant pool entry referenced by that\n\t\t * index must be either of type CONSTANT_Methodref or of type CONSTANT_InterfaceMethodref.\n\t\t */\n\t\t /* Valid - take no action */\n\t} else {\n\t\tif (flags & BCT_Unsafe) {\n\t\t\t// do any version specific checks here for 8 / 11 / etc that may be needed\n\t\t\t// requires adding a new BCT_Unsafe flag\n\t\t} else {\n\t\t\terrorType = J9NLS_CFR_ERR_BC_NOT_METHODREF__ID;\n\t\t\t/* Jazz 82615: Set the constant pool index to show up in the error message framework */\n\t\t\terrorDataIndex = index;\n\t\t\tgoto _verifyError;\n\t\t}\n\t}\n}", "url": "https://github.com/eclipse-openj9/openj9/pull/10060#discussion_r449245510", "createdAt": "2020-07-02T20:16:33Z", "author": {"login": "DanHeidinga"}, "path": "runtime/bcutil/cfreader.c", "diffHunk": "@@ -2642,9 +2642,13 @@ j9bcutil_readClassFileBytes(J9PortLibrary *portLib,\n \n \t/* Make sure the structure and static verification below uses the class file version\n \t * number. VM version is maintained in vmVersionShifted.\n+\t * Note: ignore the conversion of version to avoid the version check at checkBytecodeStructure\n+\t * in the case of Unsafe.defineClass().\n \t */\n-\tflags &= ~BCT_MajorClassFileVersionMask;\n-\tflags |= ((UDATA) classfile->majorVersion) << BCT_MajorClassFileVersionMaskShift;\n+\tif (J9_ARE_NO_BITS_SET(findClassFlags, J9_FINDCLASS_FLAG_UNSAFE)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37c0d07bf836a8fccd954a4e6752c5d8fb6f4674"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI1NjEzNw==", "bodyText": "Technically it should be fine to move this check to checkBytecodeStructure() but we still need to check the bytecode & CFR_CONSTANT_InterfaceMethodref in the case of unsafe to restrict the usage of unsafe at this point. e.g.\nif ( (J9_ARE_ANY_BITS_SET(flags, BCT_Unsafe) || ((flags & BCT_MajorClassFileVersionMask) >= BCT_Java8MajorVersionShifted))\n\t&& (bc != CFR_BC_invokevirtual) && (info->tag == CFR_CONSTANT_InterfaceMethodref)\n\t) {\n\t\t/* JVMS 4.9.1 Static Constraints:\n\t\t * The indexbyte operands of each invokespecial and invokestatic instruction must represent\n\t\t * a valid index into the constant_pool table. The constant pool entry referenced by that\n\t\t * index must be either of type CONSTANT_Methodref or of type CONSTANT_InterfaceMethodref.\n\t\t */\n\t\t /* Valid - take no action */\n\t}  else {  ...}\n\nor\nBOOLEAN checkFlag = J9_ARE_ANY_BITS_SET(flags, BCT_Unsafe) || ((flags & BCT_MajorClassFileVersionMask) >= BCT_Java8MajorVersionShifted);\n\nif ( checkFlag && (bc != CFR_BC_invokevirtual) && (info->tag == CFR_CONSTANT_InterfaceMethodref)) {\n\t\t/* JVMS 4.9.1 Static Constraints:\n\t\t * The indexbyte operands of each invokespecial and invokestatic instruction must represent\n\t\t * a valid index into the constant_pool table. The constant pool entry referenced by that\n\t\t * index must be either of type CONSTANT_Methodref or of type CONSTANT_InterfaceMethodref.\n\t\t */\n\t\t /* Valid - take no action */\n\t} else {   ...}", "url": "https://github.com/eclipse-openj9/openj9/pull/10060#discussion_r449256137", "createdAt": "2020-07-02T20:41:40Z", "author": {"login": "ChengJin01"}, "path": "runtime/bcutil/cfreader.c", "diffHunk": "@@ -2642,9 +2642,13 @@ j9bcutil_readClassFileBytes(J9PortLibrary *portLib,\n \n \t/* Make sure the structure and static verification below uses the class file version\n \t * number. VM version is maintained in vmVersionShifted.\n+\t * Note: ignore the conversion of version to avoid the version check at checkBytecodeStructure\n+\t * in the case of Unsafe.defineClass().\n \t */\n-\tflags &= ~BCT_MajorClassFileVersionMask;\n-\tflags |= ((UDATA) classfile->majorVersion) << BCT_MajorClassFileVersionMaskShift;\n+\tif (J9_ARE_NO_BITS_SET(findClassFlags, J9_FINDCLASS_FLAG_UNSAFE)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI0NTUxMA=="}, "originalCommit": {"oid": "37c0d07bf836a8fccd954a4e6752c5d8fb6f4674"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMwODA2NQ==", "bodyText": "The latest changes above didn't work correctly as the failure occurred again at jsr335InterfacePrivateMethod\njava.lang.VerifyError: JVMCFRE116 invoke bytecode must reference a Methodref; class=jdk/internal/reflect/GeneratedMethodAccessor18, method=invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;, pc=20\nException Details:\n  Location:\n    jdk/internal/reflect/GeneratedMethodAccessor18.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object; @20: JBinvokestatic\n  Reason:\n    Wrong type at the index 10 of constant pool\n  Exception Handler Table:\n    bci [0, 20] => handler: 24\n    bci [0, 20] => handler: 24\n    bci [20, 23] => handler: 36\n\tat java.base/jdk.internal.misc.Unsafe.defineClass(Unsafe.java:1510)\n\tat java.base/jdk.internal.reflect.ClassDefiner.defineClass(ClassDefiner.java:63)\n\tat java.base/jdk.internal.reflect.MethodAccessorGenerator$1.run(MethodAccessorGenerator.java:400)\n\tat java.base/jdk.internal.reflect.MethodAccessorGenerator$1.run(MethodAccessorGenerator.java:394)\n\tat java.base/java.security.AccessController.doPrivileged(AccessController.java:678)\n\n\nNeed to double-check to figure out what happened to the updated code.", "url": "https://github.com/eclipse-openj9/openj9/pull/10060#discussion_r449308065", "createdAt": "2020-07-02T23:27:30Z", "author": {"login": "ChengJin01"}, "path": "runtime/bcutil/cfreader.c", "diffHunk": "@@ -2642,9 +2642,13 @@ j9bcutil_readClassFileBytes(J9PortLibrary *portLib,\n \n \t/* Make sure the structure and static verification below uses the class file version\n \t * number. VM version is maintained in vmVersionShifted.\n+\t * Note: ignore the conversion of version to avoid the version check at checkBytecodeStructure\n+\t * in the case of Unsafe.defineClass().\n \t */\n-\tflags &= ~BCT_MajorClassFileVersionMask;\n-\tflags |= ((UDATA) classfile->majorVersion) << BCT_MajorClassFileVersionMaskShift;\n+\tif (J9_ARE_NO_BITS_SET(findClassFlags, J9_FINDCLASS_FLAG_UNSAFE)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI0NTUxMA=="}, "originalCommit": {"oid": "37c0d07bf836a8fccd954a4e6752c5d8fb6f4674"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMxMDkzNQ==", "bodyText": "Just realized that flags was not set up with BCT_Unsafe before use. So updated to the code as follows in j9bcutil_readClassFileBytes at cfreader.c\n\tif (J9_ARE_ANY_BITS_SET(findClassFlags, J9_FINDCLASS_FLAG_UNSAFE)) {\n\t\tflags |= BCT_Unsafe;  <--------\n\t}\n\nWill launch personal builds again to see how it goes in this way.", "url": "https://github.com/eclipse-openj9/openj9/pull/10060#discussion_r449310935", "createdAt": "2020-07-02T23:40:16Z", "author": {"login": "ChengJin01"}, "path": "runtime/bcutil/cfreader.c", "diffHunk": "@@ -2642,9 +2642,13 @@ j9bcutil_readClassFileBytes(J9PortLibrary *portLib,\n \n \t/* Make sure the structure and static verification below uses the class file version\n \t * number. VM version is maintained in vmVersionShifted.\n+\t * Note: ignore the conversion of version to avoid the version check at checkBytecodeStructure\n+\t * in the case of Unsafe.defineClass().\n \t */\n-\tflags &= ~BCT_MajorClassFileVersionMask;\n-\tflags |= ((UDATA) classfile->majorVersion) << BCT_MajorClassFileVersionMaskShift;\n+\tif (J9_ARE_NO_BITS_SET(findClassFlags, J9_FINDCLASS_FLAG_UNSAFE)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI0NTUxMA=="}, "originalCommit": {"oid": "37c0d07bf836a8fccd954a4e6752c5d8fb6f4674"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMDY5MTEyOnYy", "diffSide": "RIGHT", "path": "runtime/oti/j9nonbuilder.h", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwMToxNTozNFrOGsg_Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwMToyNjo1MFrOGshH_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMzMDk1OA==", "bodyText": "This overlaps the mask:\n#define BCT_MajorClassFileVersionMask  0xFF000000\n\nNeed to look for free bits earlier in the field", "url": "https://github.com/eclipse-openj9/openj9/pull/10060#discussion_r449330958", "createdAt": "2020-07-03T01:15:34Z", "author": {"login": "DanHeidinga"}, "path": "runtime/oti/j9nonbuilder.h", "diffHunk": "@@ -1966,6 +1966,7 @@ typedef struct J9BCTranslationData {\n #define BCT_AnyPreviewVersion  0x100000\n #define BCT_EnablePreview 0x200000\n #define BCT_DumpMaps  0x40000000\n+#define BCT_Unsafe  0x80000000", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8373a4bf79dc529bfa117a9a0e718c084eb3404"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMzMzI0Nw==", "bodyText": "Looking at the bits used as follows:\n#define BCT_LittleEndianOutput  0\n#define BCT_BigEndianOutput  1\n#define BCT_StripDebugAttributes  0x100\n#define BCT_StaticVerification  0x200\n#define BCT_DumpPreverifyData  0x400\n#define BCT_Xfuture  0x800\n#define BCT_AlwaysSplitBytecodes 0x1000\n#define BCT_IntermediateDataIsClassfile  0x2000\n#define BCT_ValueTypesEnabled  0x4000\n#define BCT_StripDebugLines  0x8000\n#define BCT_StripDebugSource  0x10000\n#define BCT_StripDebugVars  0x20000\n#define BCT_StripSourceDebugExtension  0x40000\n#define BCT_RetainRuntimeInvisibleAttributes  0x80000\n#define BCT_AnyPreviewVersion  0x100000\n#define BCT_EnablePreview 0x200000 <------------\n#define BCT_DumpMaps  0x40000000\n\nSo setting to 0x400000 for BCT_Unsafe should be fine to avoid the overlap with the class version bits.\n#define BCT_MajorClassFileVersionMask  0xFF000000\n#define BCT_MajorClassFileVersionMaskShift  24\n#define BCT_Java2MajorVersionShifted  0x2E000000\n#define BCT_Java5MajorVersionShifted  0x31000000\n#define BCT_Java6MajorVersionShifted  0x32000000\n#define BCT_Java7MajorVersionShifted  0x33000000\n#define BCT_Java8MajorVersionShifted  0x34000000\n#define BCT_Java9MajorVersionShifted  0x35000000\n#define BCT_Java10MajorVersionShifted 0x36000000\n#define BCT_Java11MajorVersionShifted 0x37000000\n#define BCT_Java12MajorVersionShifted 0x38000000\n#define BCT_Java13MajorVersionShifted 0x39000000\n#define BCT_Java14MajorVersionShifted 0x3A000000\n#define BCT_Java15MajorVersionShifted 0x3B000000\n#define BCT_JavaMaxMajorVersionShifted BCT_Java15MajorVersionShifted", "url": "https://github.com/eclipse-openj9/openj9/pull/10060#discussion_r449333247", "createdAt": "2020-07-03T01:26:50Z", "author": {"login": "ChengJin01"}, "path": "runtime/oti/j9nonbuilder.h", "diffHunk": "@@ -1966,6 +1966,7 @@ typedef struct J9BCTranslationData {\n #define BCT_AnyPreviewVersion  0x100000\n #define BCT_EnablePreview 0x200000\n #define BCT_DumpMaps  0x40000000\n+#define BCT_Unsafe  0x80000000", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMzMDk1OA=="}, "originalCommit": {"oid": "e8373a4bf79dc529bfa117a9a0e718c084eb3404"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMDkyNDM3OnYy", "diffSide": "RIGHT", "path": "runtime/bcverify/staticverify.c", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwNDowOToyM1rOGsjHSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwNDozMTozNlrOGsjYdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM2NTgzNQ==", "bodyText": "A name like \"isJava8orLater\" would be clearer.  I'd also put the Unsafe check second.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\tBOOLEAN checkFlag = J9_ARE_ANY_BITS_SET(flags, BCT_Unsafe) || ((flags & BCT_MajorClassFileVersionMask) >= BCT_Java8MajorVersionShifted);\n          \n          \n            \n            \t\t\t\tBOOLEAN isJava8OrLater = ((flags & BCT_MajorClassFileVersionMask) >= BCT_Java8MajorVersionShifted) || J9_ARE_ANY_BITS_SET(flags, BCT_Unsafe);", "url": "https://github.com/eclipse-openj9/openj9/pull/10060#discussion_r449365835", "createdAt": "2020-07-03T04:09:23Z", "author": {"login": "DanHeidinga"}, "path": "runtime/bcverify/staticverify.c", "diffHunk": "@@ -857,9 +857,9 @@ checkBytecodeStructure (J9CfrClassFile * classfile, UDATA methodIndex, UDATA len\n \t\t\t}\n \t\t\tinfo = &(classfile->constantPool[index]);\n \t\t\tif (info->tag != CFR_CONSTANT_Methodref) {\n-\t\t\t\tif (((flags & BCT_MajorClassFileVersionMask) >= BCT_Java8MajorVersionShifted)\n-\t\t\t\t&& (bc != CFR_BC_invokevirtual) && (info->tag == CFR_CONSTANT_InterfaceMethodref)\n-\t\t\t\t) {\n+\t\t\t\tBOOLEAN checkFlag = J9_ARE_ANY_BITS_SET(flags, BCT_Unsafe) || ((flags & BCT_MajorClassFileVersionMask) >= BCT_Java8MajorVersionShifted);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f387f13def9c84e7c5bcd232e286d0825945ddf"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM3MDIyOQ==", "bodyText": "Agreed and updated against the suggestion above.", "url": "https://github.com/eclipse-openj9/openj9/pull/10060#discussion_r449370229", "createdAt": "2020-07-03T04:31:36Z", "author": {"login": "ChengJin01"}, "path": "runtime/bcverify/staticverify.c", "diffHunk": "@@ -857,9 +857,9 @@ checkBytecodeStructure (J9CfrClassFile * classfile, UDATA methodIndex, UDATA len\n \t\t\t}\n \t\t\tinfo = &(classfile->constantPool[index]);\n \t\t\tif (info->tag != CFR_CONSTANT_Methodref) {\n-\t\t\t\tif (((flags & BCT_MajorClassFileVersionMask) >= BCT_Java8MajorVersionShifted)\n-\t\t\t\t&& (bc != CFR_BC_invokevirtual) && (info->tag == CFR_CONSTANT_InterfaceMethodref)\n-\t\t\t\t) {\n+\t\t\t\tBOOLEAN checkFlag = J9_ARE_ANY_BITS_SET(flags, BCT_Unsafe) || ((flags & BCT_MajorClassFileVersionMask) >= BCT_Java8MajorVersionShifted);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM2NTgzNQ=="}, "originalCommit": {"oid": "6f387f13def9c84e7c5bcd232e286d0825945ddf"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4890, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}