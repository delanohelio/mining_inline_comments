{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA5MjA0NDQx", "number": 10983, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNToyMDowNVrOE02toQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNDozNDozOFrOE-BG6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzODU3ODI1OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/env/J9ClassEnv.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNToyMDowNVrOHszseA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNToyMDowNVrOHszseA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjc0NjM2MA==", "bodyText": "The final sentence is a bit clumsy (and doesn't end in a period).", "url": "https://github.com/eclipse-openj9/openj9/pull/10983#discussion_r516746360", "createdAt": "2020-11-03T15:20:05Z", "author": {"login": "gacholio"}, "path": "runtime/compiler/env/J9ClassEnv.cpp", "diffHunk": "@@ -515,6 +515,15 @@ static void addEntryForFieldImpl(TR_VMField *field, TR::TypeLayoutBuilder &tlb,\n       ListIterator<TR_VMField> iter(fieldsInfo.getFields());\n       for (TR_VMField *childField = iter.getFirst(); childField; childField = iter.getNext())\n          {\n+         IDATA offsetBaseForChild = field->offset + offsetBase;\n+         if (vm->internalVMFunctions->doesClassHave4BytePrePadding(fieldClass))\n+            {\n+               /* Types with fields (flat or non-flat) that require double (64bit) alignment are pre-padded if there isn't\n+                * a smaller type that can be used as pre-padding. Pre-padding is eliminated when a type is flattened within\n+                * its container. As a result the base offset must subtracted by the size of pre-padding", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab5aa709a41190cdc54ad3c0bfaf4d621e888ab3"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzODU4NzcyOnYy", "diffSide": "RIGHT", "path": "runtime/gc_base/ObjectAccessBarrier.cpp", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNToyMjowMlrOHszyHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNjoyNjoxMFrOHtf2CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjc0NzgwNQ==", "bodyText": "Does this mean that arrays of padded VTs will pad the start of each element?", "url": "https://github.com/eclipse-openj9/openj9/pull/10983#discussion_r516747805", "createdAt": "2020-11-03T15:22:02Z", "author": {"login": "gacholio"}, "path": "runtime/gc_base/ObjectAccessBarrier.cpp", "diffHunk": "@@ -1131,13 +1131,18 @@ MM_ObjectAccessBarrier::indexableStoreI64(J9VMThread *vmThread, J9IndexableObjec\n void\n MM_ObjectAccessBarrier::copyObjectFieldsToFlattenedArrayElement(J9VMThread *vmThread, J9ArrayClass *arrayClazz, j9object_t srcObject, J9IndexableObject *arrayRef, I_32 index)\n {\n-\tUDATA const objectHeaderSize = J9VMTHREAD_OBJECT_HEADER_SIZE(vmThread);\n+\tUDATA elementStartOffset = J9VMTHREAD_OBJECT_HEADER_SIZE(vmThread);\n \tU_8 *elementAddress = (U_8*)indexableEffectiveAddress(vmThread, arrayRef, index, J9ARRAYCLASS_GET_STRIDE((J9Class *) arrayClazz));\n \tIDATA elementOffset = (elementAddress - (U_8*)arrayRef);\n \tJ9Class *elementClazz = J9GC_J9OBJECT_CLAZZ_THREAD(srcObject, vmThread);\n \tAssert_MM_true(J9_IS_J9CLASS_VALUETYPE(elementClazz));\n \tAssert_MM_true(elementClazz == arrayClazz->leafComponentType);\n-\tcopyObjectFields(vmThread, elementClazz, srcObject, objectHeaderSize, (j9object_t) arrayRef, elementOffset);\n+\n+\tif (J9CLASS_HAS_4BYTE_PREPADDING(elementClazz)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab5aa709a41190cdc54ad3c0bfaf4d621e888ab3"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQ2NDM0Mw==", "bodyText": "No VT array elements will not include pre-padding. See https://github.com/eclipse/openj9/blob/master/runtime/vm/createramclass.cpp#L3039", "url": "https://github.com/eclipse-openj9/openj9/pull/10983#discussion_r517464343", "createdAt": "2020-11-04T16:18:53Z", "author": {"login": "tajila"}, "path": "runtime/gc_base/ObjectAccessBarrier.cpp", "diffHunk": "@@ -1131,13 +1131,18 @@ MM_ObjectAccessBarrier::indexableStoreI64(J9VMThread *vmThread, J9IndexableObjec\n void\n MM_ObjectAccessBarrier::copyObjectFieldsToFlattenedArrayElement(J9VMThread *vmThread, J9ArrayClass *arrayClazz, j9object_t srcObject, J9IndexableObject *arrayRef, I_32 index)\n {\n-\tUDATA const objectHeaderSize = J9VMTHREAD_OBJECT_HEADER_SIZE(vmThread);\n+\tUDATA elementStartOffset = J9VMTHREAD_OBJECT_HEADER_SIZE(vmThread);\n \tU_8 *elementAddress = (U_8*)indexableEffectiveAddress(vmThread, arrayRef, index, J9ARRAYCLASS_GET_STRIDE((J9Class *) arrayClazz));\n \tIDATA elementOffset = (elementAddress - (U_8*)arrayRef);\n \tJ9Class *elementClazz = J9GC_J9OBJECT_CLAZZ_THREAD(srcObject, vmThread);\n \tAssert_MM_true(J9_IS_J9CLASS_VALUETYPE(elementClazz));\n \tAssert_MM_true(elementClazz == arrayClazz->leafComponentType);\n-\tcopyObjectFields(vmThread, elementClazz, srcObject, objectHeaderSize, (j9object_t) arrayRef, elementOffset);\n+\n+\tif (J9CLASS_HAS_4BYTE_PREPADDING(elementClazz)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjc0NzgwNQ=="}, "originalCommit": {"oid": "ab5aa709a41190cdc54ad3c0bfaf4d621e888ab3"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQ2OTcwNA==", "bodyText": "I suppose since VTs are immuteable, there are no volatile/atomic concerns.", "url": "https://github.com/eclipse-openj9/openj9/pull/10983#discussion_r517469704", "createdAt": "2020-11-04T16:26:10Z", "author": {"login": "gacholio"}, "path": "runtime/gc_base/ObjectAccessBarrier.cpp", "diffHunk": "@@ -1131,13 +1131,18 @@ MM_ObjectAccessBarrier::indexableStoreI64(J9VMThread *vmThread, J9IndexableObjec\n void\n MM_ObjectAccessBarrier::copyObjectFieldsToFlattenedArrayElement(J9VMThread *vmThread, J9ArrayClass *arrayClazz, j9object_t srcObject, J9IndexableObject *arrayRef, I_32 index)\n {\n-\tUDATA const objectHeaderSize = J9VMTHREAD_OBJECT_HEADER_SIZE(vmThread);\n+\tUDATA elementStartOffset = J9VMTHREAD_OBJECT_HEADER_SIZE(vmThread);\n \tU_8 *elementAddress = (U_8*)indexableEffectiveAddress(vmThread, arrayRef, index, J9ARRAYCLASS_GET_STRIDE((J9Class *) arrayClazz));\n \tIDATA elementOffset = (elementAddress - (U_8*)arrayRef);\n \tJ9Class *elementClazz = J9GC_J9OBJECT_CLAZZ_THREAD(srcObject, vmThread);\n \tAssert_MM_true(J9_IS_J9CLASS_VALUETYPE(elementClazz));\n \tAssert_MM_true(elementClazz == arrayClazz->leafComponentType);\n-\tcopyObjectFields(vmThread, elementClazz, srcObject, objectHeaderSize, (j9object_t) arrayRef, elementOffset);\n+\n+\tif (J9CLASS_HAS_4BYTE_PREPADDING(elementClazz)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjc0NzgwNQ=="}, "originalCommit": {"oid": "ab5aa709a41190cdc54ad3c0bfaf4d621e888ab3"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzODcxNTAxOnYy", "diffSide": "RIGHT", "path": "runtime/oti/vm_api.h", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNTo0ODozMlrOHs1BfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNTo0ODozMlrOHs1BfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjc2ODEyNQ==", "bodyText": "No doc, and why do we need a function to wrap a macro?", "url": "https://github.com/eclipse-openj9/openj9/pull/10983#discussion_r516768125", "createdAt": "2020-11-03T15:48:32Z", "author": {"login": "gacholio"}, "path": "runtime/oti/vm_api.h", "diffHunk": "@@ -2376,6 +2376,9 @@ BOOLEAN\n isNameOrSignatureQtype(J9UTF8 *utfWrapper);\n \n \n+BOOLEAN", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab5aa709a41190cdc54ad3c0bfaf4d621e888ab3"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzODcyMzc5OnYy", "diffSide": "RIGHT", "path": "runtime/oti/j9nonbuilder.h", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNTo1MDozNFrOHs1Hcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNTo1MDozNFrOHs1Hcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjc2OTY1MQ==", "bodyText": "This would better either before or after the bit constants.", "url": "https://github.com/eclipse-openj9/openj9/pull/10983#discussion_r516769651", "createdAt": "2020-11-03T15:50:34Z", "author": {"login": "gacholio"}, "path": "runtime/oti/j9nonbuilder.h", "diffHunk": "@@ -1597,18 +1598,23 @@ typedef struct J9ROMFieldOffsetWalkState {\n \tUDATA currentFlatSingleOffset;\n \tUDATA currentFlatObjectOffset;\n \tUDATA currentFlatDoubleOffset;\n+\tBOOLEAN classRequiresPrePadding;\n+\tUDATA flatBackFillSize;\n #endif /* J9VM_OPT_VALHALLA_VALUE_TYPES */\n } J9ROMFieldOffsetWalkState;\n \n-#define J9VM_FIELD_OFFSET_WALK_INCLUDE_STATIC  1\n-#define J9VM_FIELD_OFFSET_WALK_BACKFILL_OBJECT_FIELD  32\n-#define J9VM_FIELD_OFFSET_WALK_INCLUDE_HIDDEN  4\n-#define J9VM_FIELD_OFFSET_WALK_ONLY_OBJECT_SLOTS  8\n-#define J9VM_FIELD_OFFSET_WALK_CALCULATE_INSTANCE_SIZE  16\n-#define J9VM_FIELD_OFFSET_WALK_BACKFILL_SINGLE_FIELD  64\n+#define J9VM_FIELD_OFFSET_WALK_INCLUDE_STATIC  0x1\n+#define J9VM_FIELD_OFFSET_WALK_BACKFILL_OBJECT_FIELD  0x20\n+#define J9VM_FIELD_OFFSET_WALK_INCLUDE_HIDDEN  0x4\n+#define J9VM_FIELD_OFFSET_WALK_ONLY_OBJECT_SLOTS  0x8\n+#define J9VM_FIELD_OFFSET_WALK_CALCULATE_INSTANCE_SIZE  0x10\n+#define J9VM_FIELD_OFFSET_WALK_BACKFILL_SINGLE_FIELD  0x40\n #define J9VM_FIELD_OFFSET_WALK_MAXIMUM_HIDDEN_FIELDS_PER_CLASS  J9VM_MAX_HIDDEN_FIELDS_PER_CLASS", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab5aa709a41190cdc54ad3c0bfaf4d621e888ab3"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3OTc0OTQyOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/env/J9ClassEnv.cpp", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxODoyMjowNFrOHy6Egw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMjoxMjoxMVrOHzBTXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE0MjI3NQ==", "bodyText": "Why isn't this accounted for in the offset itself?", "url": "https://github.com/eclipse-openj9/openj9/pull/10983#discussion_r523142275", "createdAt": "2020-11-13T18:22:04Z", "author": {"login": "andrewcraik"}, "path": "runtime/compiler/env/J9ClassEnv.cpp", "diffHunk": "@@ -515,6 +515,15 @@ static void addEntryForFieldImpl(TR_VMField *field, TR::TypeLayoutBuilder &tlb,\n       ListIterator<TR_VMField> iter(fieldsInfo.getFields());\n       for (TR_VMField *childField = iter.getFirst(); childField; childField = iter.getNext())\n          {\n+         IDATA offsetBaseForChild = field->offset + offsetBase;\n+         if (J9CLASS_HAS_4BYTE_PREPADDING(fieldClass))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e0d6582e93f2edf0a442dd060fc41baa4df12c9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI2MDc2NA==", "bodyText": "There are two kinds of layout, the standalone layout and the flattened layout. For example given : inline class ValueLong { long l; } the standalone layout is:\nValueLong {\n    clazz \n    /* 4byte pre-padding */\n    long l (offset = 4) \n}\n\n//note `instanceFieldOffset` returns offset from header not from start of the object\n\nWe need to insert prepadding in order to statisfy alignment constraints for the long.\nHowever if it were flattened within another type,inline class ValueLongRef {ValueLong l; } the layout would be:\nValueLongRef {\n    clazz \n    /* 4byte pre-padding */\n    ValueLong { (offset = 4 in ValueLongRef) \n         //Value Long flattened layout, no pre-padding\n         long l (offset = 0 in ValueLong) //`instanceFieldOffset` still returns 4, this is why we need to subtract prepadding\n   }\n}\n\ninstanceFieldOffset always returns the offsets based on the standalone layout. So when a type is flattened we need to know if the standalone layout has pre-padding since that will be removed when its flattened.", "url": "https://github.com/eclipse-openj9/openj9/pull/10983#discussion_r523260764", "createdAt": "2020-11-13T22:12:11Z", "author": {"login": "tajila"}, "path": "runtime/compiler/env/J9ClassEnv.cpp", "diffHunk": "@@ -515,6 +515,15 @@ static void addEntryForFieldImpl(TR_VMField *field, TR::TypeLayoutBuilder &tlb,\n       ListIterator<TR_VMField> iter(fieldsInfo.getFields());\n       for (TR_VMField *childField = iter.getFirst(); childField; childField = iter.getNext())\n          {\n+         IDATA offsetBaseForChild = field->offset + offsetBase;\n+         if (J9CLASS_HAS_4BYTE_PREPADDING(fieldClass))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE0MjI3NQ=="}, "originalCommit": {"oid": "1e0d6582e93f2edf0a442dd060fc41baa4df12c9"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMDc2NjA4OnYy", "diffSide": "RIGHT", "path": "runtime/gc_base/ObjectAccessBarrier.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMjowMzowMlrOH2EHsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMjowMzowMlrOH2EHsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ1MjY1OA==", "bodyText": "This pattern repeats a few times.\nConsider introducing macros like J9CLASS_PREPADDING_SIZE, in which case this would convert into one liner:\nelementStartOffset += J9CLASS_PREPADDING_SIZE(class)\nAnother macro to consider is J9VMTHREAD_OBJECT_HEADER_WITHPREPADDING_SIZE", "url": "https://github.com/eclipse-openj9/openj9/pull/10983#discussion_r526452658", "createdAt": "2020-11-18T22:03:02Z", "author": {"login": "amicic"}, "path": "runtime/gc_base/ObjectAccessBarrier.cpp", "diffHunk": "@@ -1152,13 +1157,18 @@ MM_ObjectAccessBarrier::copyObjectFieldsToFlattenedArrayElement(J9VMThread *vmTh\n void\n MM_ObjectAccessBarrier::copyObjectFieldsFromFlattenedArrayElement(J9VMThread *vmThread, J9ArrayClass *arrayClazz, j9object_t destObject, J9IndexableObject *arrayRef, I_32 index)\n {\n-\tUDATA const objectHeaderSize = J9VMTHREAD_OBJECT_HEADER_SIZE(vmThread);\n+\tUDATA elementStartOffset = J9VMTHREAD_OBJECT_HEADER_SIZE(vmThread);\n \tU_8 *elementAddress = (U_8*)indexableEffectiveAddress(vmThread, arrayRef, index, J9ARRAYCLASS_GET_STRIDE((J9Class *) arrayClazz));\n \tIDATA elementOffset = (elementAddress - (U_8*)arrayRef);\n \tJ9Class *elementClazz = J9GC_J9OBJECT_CLAZZ_THREAD(destObject, vmThread);\n \tAssert_MM_true(J9_IS_J9CLASS_VALUETYPE(elementClazz));\n \tAssert_MM_true(elementClazz == arrayClazz->leafComponentType);\n-\tcopyObjectFields(vmThread, elementClazz, (j9object_t) arrayRef, elementOffset, destObject, objectHeaderSize);\n+\n+\tif (J9CLASS_HAS_4BYTE_PREPADDING(elementClazz)) {\n+\t\telementStartOffset += sizeof(U_32);\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e0d6582e93f2edf0a442dd060fc41baa4df12c9"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMDgxOTgzOnYy", "diffSide": "RIGHT", "path": "runtime/gc_base/ObjectAccessBarrier.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMjoxOTowOFrOH2EoFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMjoxOTowOFrOH2EoFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ2MDk1MQ==", "bodyText": "perhaps another macro ?\nlimit = J9CLASS_TOTAL_INSTANCE_SIZE_WITH_PREPADDING()", "url": "https://github.com/eclipse-openj9/openj9/pull/10983#discussion_r526460951", "createdAt": "2020-11-18T22:19:08Z", "author": {"login": "amicic"}, "path": "runtime/gc_base/ObjectAccessBarrier.cpp", "diffHunk": "@@ -1445,9 +1453,9 @@ MM_ObjectAccessBarrier::structuralCompareFlattenedObjects(J9VMThread *vmThread,\n \t\t}\n \t} else {\n \t\t/* no instanceDescription bits needed on this path */\n-\t\tif (0 != firstFieldOffset) {\n+\t\tif (J9CLASS_HAS_4BYTE_PREPADDING(valueClass)) {\n \t\t\t/* subtract padding */\n-\t\t\toffset += firstFieldOffset;\n+\t\t\tlimit -= sizeof(U_32);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e0d6582e93f2edf0a442dd060fc41baa4df12c9"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMDgzNjgwOnYy", "diffSide": "RIGHT", "path": "runtime/gc_include/ObjectAccessBarrierAPI.hpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMjoyNDowNFrOH2Ex7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMjoyNDowNFrOH2Ex7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ2MzQ3MA==", "bodyText": "Similar comment as before... I'd rather see mixedObjectGetHeaderSize/mixedObjectGetDataSize handle prepadding case which would slighly simplify caller's sites.", "url": "https://github.com/eclipse-openj9/openj9/pull/10983#discussion_r526463470", "createdAt": "2020-11-18T22:24:04Z", "author": {"login": "amicic"}, "path": "runtime/gc_include/ObjectAccessBarrierAPI.hpp", "diffHunk": "@@ -388,7 +388,12 @@ class MM_ObjectAccessBarrierAPI\n \tVMINLINE void\n \tcloneObject(J9VMThread *currentThread, j9object_t original, j9object_t copy, J9Class *objectClass)\n \t{\n-\t\tcopyObjectFields(currentThread, objectClass, original, mixedObjectGetHeaderSize(), copy, mixedObjectGetHeaderSize());\n+\t\tUDATA offset = mixedObjectGetHeaderSize();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e0d6582e93f2edf0a442dd060fc41baa4df12c9"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNDY1MzIzOnYy", "diffSide": "RIGHT", "path": "runtime/oti/j9.h", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNDozNDozOFrOH7Ad8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNDozNDozOFrOH7Ad8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYzNTY5Ng==", "bodyText": "nitpick: other macros start with J9CLASS_ (not J9_CLASS_)", "url": "https://github.com/eclipse-openj9/openj9/pull/10983#discussion_r531635696", "createdAt": "2020-11-27T14:34:38Z", "author": {"login": "amicic"}, "path": "runtime/oti/j9.h", "diffHunk": "@@ -310,11 +310,13 @@ static const struct { \\\n \n /* Macros for ValueTypes */\n #ifdef J9VM_OPT_VALHALLA_VALUE_TYPES\n+#define J9_CLASS_PAYLOAD_SIZE(clazz) J9_VALUETYPE_FLATTENED_SIZE(clazz)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8087ba3359d7b74384e8971d8a901dc740d5a520"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1013, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}