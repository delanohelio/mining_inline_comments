{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwMzAwMjkx", "number": 11314, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNDo0NTo1NVrOE_pzeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNDo1MToyNlrOE_p9_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MTgwNjY1OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/control/JITServerCompilationThread.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNDo0NTo1NVrOH9eXeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNDoyMzoyMFrOH947RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDIyMjcxMw==", "bodyText": "Does this TODO still need to be addressed? If so, can we put it in an issue with some description of what needs to be done to clean it up? If not, let's just delete this code.", "url": "https://github.com/eclipse-openj9/openj9/pull/11314#discussion_r534222713", "createdAt": "2020-12-02T14:45:55Z", "author": {"login": "ymanton"}, "path": "runtime/compiler/control/JITServerCompilationThread.cpp", "diffHunk": "@@ -664,28 +687,34 @@ TR::CompilationInfoPerThreadRemote::processEntry(TR_MethodToBeCompiled &entry, J\n       // If the client aborted this compilation it could have happened only while asking for entire\n       // CHTable and unloaded class address ranges and at that point the seqNo was not updated.\n       // We must update seqNo now to allow for blocking threads to pass through.\n+      // Since the caches are already cleared there is no harm in discarding this message.\n       clientSession->getSequencingMonitor()->enter();\n \n-      if (seqNo != clientSession->getExpectedSeqNo())\n+     // if (isCriticalRequest) TODO: what should we do here?\n          {\n-         Trc_JITServerUnexpectedSeqNo(compThread, getCompThreadId(), clientSession,\n-               (unsigned long long)clientId, seqNo, clientSession->getExpectedSeqNo(), clientSession->getNumActiveThreads());\n+         if (seqNo > clientSession->getLastProcessedCriticalSeqNo())\n+            {\n+           \n+            clientSession->setLastProcessedCriticalSeqNo(seqNo);\n+      \n+     \n+            //Trc_JITServerUnexpectedSeqNo(compThread, getCompThreadId(), clientSession,\n+            //   (unsigned long long)clientId, seqNo, clientSession->getExpectedSeqNo(), clientSession->getNumActiveThreads());\n \n-         TR_ASSERT(false, \"compThreadID=%d clientSessionData=%p clientUID=%llu (seqNo=%u, expectedSeqNo=%u, numActiveThreads=%d) unexpected seqNo\",\n-               getCompThreadId(), clientSession, (unsigned long long)clientId,\n-               seqNo, clientSession->getExpectedSeqNo(), clientSession->getNumActiveThreads());\n+            //TR_ASSERT(false, \"compThreadID=%d clientSessionData=%p clientUID=%llu (seqNo=%u, expectedSeqNo=%u, numActiveThreads=%d) unexpected seqNo\",\n+            //   getCompThreadId(), clientSession, (unsigned long long)clientId,\n+            //   seqNo, clientSession->getExpectedSeqNo(), clientSession->getNumActiveThreads());\n \n-         clientSession->setExpectedSeqNo(seqNo);\n+            }\n          }\n \n-      updateSeqNo(clientSession);\n+      //updateSeqNo(clientSession);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc45d1403a0ceef7d89761e2101564047a899247"}, "originalPosition": 411}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY1Nzg2MQ==", "bodyText": "I changed the code to address the TODO", "url": "https://github.com/eclipse-openj9/openj9/pull/11314#discussion_r534657861", "createdAt": "2020-12-03T04:23:20Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/control/JITServerCompilationThread.cpp", "diffHunk": "@@ -664,28 +687,34 @@ TR::CompilationInfoPerThreadRemote::processEntry(TR_MethodToBeCompiled &entry, J\n       // If the client aborted this compilation it could have happened only while asking for entire\n       // CHTable and unloaded class address ranges and at that point the seqNo was not updated.\n       // We must update seqNo now to allow for blocking threads to pass through.\n+      // Since the caches are already cleared there is no harm in discarding this message.\n       clientSession->getSequencingMonitor()->enter();\n \n-      if (seqNo != clientSession->getExpectedSeqNo())\n+     // if (isCriticalRequest) TODO: what should we do here?\n          {\n-         Trc_JITServerUnexpectedSeqNo(compThread, getCompThreadId(), clientSession,\n-               (unsigned long long)clientId, seqNo, clientSession->getExpectedSeqNo(), clientSession->getNumActiveThreads());\n+         if (seqNo > clientSession->getLastProcessedCriticalSeqNo())\n+            {\n+           \n+            clientSession->setLastProcessedCriticalSeqNo(seqNo);\n+      \n+     \n+            //Trc_JITServerUnexpectedSeqNo(compThread, getCompThreadId(), clientSession,\n+            //   (unsigned long long)clientId, seqNo, clientSession->getExpectedSeqNo(), clientSession->getNumActiveThreads());\n \n-         TR_ASSERT(false, \"compThreadID=%d clientSessionData=%p clientUID=%llu (seqNo=%u, expectedSeqNo=%u, numActiveThreads=%d) unexpected seqNo\",\n-               getCompThreadId(), clientSession, (unsigned long long)clientId,\n-               seqNo, clientSession->getExpectedSeqNo(), clientSession->getNumActiveThreads());\n+            //TR_ASSERT(false, \"compThreadID=%d clientSessionData=%p clientUID=%llu (seqNo=%u, expectedSeqNo=%u, numActiveThreads=%d) unexpected seqNo\",\n+            //   getCompThreadId(), clientSession, (unsigned long long)clientId,\n+            //   seqNo, clientSession->getExpectedSeqNo(), clientSession->getNumActiveThreads());\n \n-         clientSession->setExpectedSeqNo(seqNo);\n+            }\n          }\n \n-      updateSeqNo(clientSession);\n+      //updateSeqNo(clientSession);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDIyMjcxMw=="}, "originalCommit": {"oid": "cc45d1403a0ceef7d89761e2101564047a899247"}, "originalPosition": 411}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MTgxNzU0OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/control/JITServerCompilationThread.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNDo0ODoxNVrOH9eedg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNDoyNDowMVrOH9478Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDIyNDUwMg==", "bodyText": "Can we put this into an issue that describes how/why it must be changed?", "url": "https://github.com/eclipse-openj9/openj9/pull/11314#discussion_r534224502", "createdAt": "2020-12-02T14:48:15Z", "author": {"login": "ymanton"}, "path": "runtime/compiler/control/JITServerCompilationThread.cpp", "diffHunk": "@@ -393,42 +401,54 @@ TR::CompilationInfoPerThreadRemote::processEntry(TR_MethodToBeCompiled &entry, J\n       // Use a sequencing scheme to re-order compilation requests\n       //\n       clientSession->getSequencingMonitor()->enter();\n-      clientSession->updateMaxReceivedSeqNo(seqNo);\n-      if (seqNo > clientSession->getExpectedSeqNo()) // Out of order messages\n+      clientSession->updateMaxReceivedSeqNo(seqNo); // TODO: why do I need this?\n+      // This request can go through as long as criticalSeqNo has been processed\n+      if (criticalSeqNo > clientSession->getLastProcessedCriticalSeqNo())\n          {\n-         // Park this request until the missing ones arrive\n+         // Park this request until `criticalSeqNo` arrives and is processed\n          if (TR::Options::getVerboseOption(TR_VerboseJITServer))\n-            TR_VerboseLog::writeLineLocked(TR_Vlog_JITServer, \"compThreadID=%d out-of-sequence msg detected for clientUID=%llu seqNo=%u > expectedSeqNo=%u. Parking this thread (entry=%p)\",\n-            getCompThreadId(), (unsigned long long)clientId, seqNo, clientSession->getExpectedSeqNo(), &entry);\n-\n+            TR_VerboseLog::writeLineLocked(TR_Vlog_JITServer, \"compThreadID=%d out-of-sequence msg=%u detected for clientUID=%llu criticalSeqNo=%u > lastCriticalSeqNo=%u. Parking this thread (entry=%p)\",\n+            getCompThreadId(), seqNo, (unsigned long long)clientId, criticalSeqNo, clientSession->getLastProcessedCriticalSeqNo(), &entry);\n+         // TODO: must change this trace point\n          Trc_JITServerOutOfSequenceMessage(compThread, getCompThreadId(), clientSession,\n-               (unsigned long long)clientId, &entry, seqNo, clientSession->getExpectedSeqNo(), clientSession->getNumActiveThreads());\n+               (unsigned long long)clientId, &entry, seqNo, clientSession->getLastProcessedCriticalSeqNo(), clientSession->getNumActiveThreads());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc45d1403a0ceef7d89761e2101564047a899247"}, "originalPosition": 276}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY1ODAzMw==", "bodyText": "I added a new tracepoint to reflect the change in the message I wanted to convey", "url": "https://github.com/eclipse-openj9/openj9/pull/11314#discussion_r534658033", "createdAt": "2020-12-03T04:24:01Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/control/JITServerCompilationThread.cpp", "diffHunk": "@@ -393,42 +401,54 @@ TR::CompilationInfoPerThreadRemote::processEntry(TR_MethodToBeCompiled &entry, J\n       // Use a sequencing scheme to re-order compilation requests\n       //\n       clientSession->getSequencingMonitor()->enter();\n-      clientSession->updateMaxReceivedSeqNo(seqNo);\n-      if (seqNo > clientSession->getExpectedSeqNo()) // Out of order messages\n+      clientSession->updateMaxReceivedSeqNo(seqNo); // TODO: why do I need this?\n+      // This request can go through as long as criticalSeqNo has been processed\n+      if (criticalSeqNo > clientSession->getLastProcessedCriticalSeqNo())\n          {\n-         // Park this request until the missing ones arrive\n+         // Park this request until `criticalSeqNo` arrives and is processed\n          if (TR::Options::getVerboseOption(TR_VerboseJITServer))\n-            TR_VerboseLog::writeLineLocked(TR_Vlog_JITServer, \"compThreadID=%d out-of-sequence msg detected for clientUID=%llu seqNo=%u > expectedSeqNo=%u. Parking this thread (entry=%p)\",\n-            getCompThreadId(), (unsigned long long)clientId, seqNo, clientSession->getExpectedSeqNo(), &entry);\n-\n+            TR_VerboseLog::writeLineLocked(TR_Vlog_JITServer, \"compThreadID=%d out-of-sequence msg=%u detected for clientUID=%llu criticalSeqNo=%u > lastCriticalSeqNo=%u. Parking this thread (entry=%p)\",\n+            getCompThreadId(), seqNo, (unsigned long long)clientId, criticalSeqNo, clientSession->getLastProcessedCriticalSeqNo(), &entry);\n+         // TODO: must change this trace point\n          Trc_JITServerOutOfSequenceMessage(compThread, getCompThreadId(), clientSession,\n-               (unsigned long long)clientId, &entry, seqNo, clientSession->getExpectedSeqNo(), clientSession->getNumActiveThreads());\n+               (unsigned long long)clientId, &entry, seqNo, clientSession->getLastProcessedCriticalSeqNo(), clientSession->getNumActiveThreads());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDIyNDUwMg=="}, "originalCommit": {"oid": "cc45d1403a0ceef7d89761e2101564047a899247"}, "originalPosition": 276}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MTgzMzU4OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/control/JITClientCompilationThread.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNDo1MToyNlrOH9eosA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNDozNjoyNVrOH95LNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDIyNzEyMA==", "bodyText": "Can we put this in an issue that describes what needs to be done? It's not clear what \"this\" refers to.", "url": "https://github.com/eclipse-openj9/openj9/pull/11314#discussion_r534227120", "createdAt": "2020-12-02T14:51:26Z", "author": {"login": "ymanton"}, "path": "runtime/compiler/control/JITClientCompilationThread.cpp", "diffHunk": "@@ -3266,6 +3266,7 @@ remoteCompile(\n    std::string optionsStr = TR::Options::packOptions(compiler->getOptions());\n    std::string recompMethodInfoStr = compiler->isRecompilationEnabled() ? std::string((char *) compiler->getRecompilationInfo()->getMethodInfo(), sizeof(TR_PersistentMethodInfo)) : std::string();\n \n+   // TODO: make this a synchronized region to avoid bad_alloc exceptions", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc45d1403a0ceef7d89761e2101564047a899247"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY2MTk0MQ==", "bodyText": "Opened issue #11349 to address the TODO", "url": "https://github.com/eclipse-openj9/openj9/pull/11314#discussion_r534661941", "createdAt": "2020-12-03T04:36:25Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/control/JITClientCompilationThread.cpp", "diffHunk": "@@ -3266,6 +3266,7 @@ remoteCompile(\n    std::string optionsStr = TR::Options::packOptions(compiler->getOptions());\n    std::string recompMethodInfoStr = compiler->isRecompilationEnabled() ? std::string((char *) compiler->getRecompilationInfo()->getMethodInfo(), sizeof(TR_PersistentMethodInfo)) : std::string();\n \n+   // TODO: make this a synchronized region to avoid bad_alloc exceptions", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDIyNzEyMA=="}, "originalCommit": {"oid": "cc45d1403a0ceef7d89761e2101564047a899247"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 980, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}