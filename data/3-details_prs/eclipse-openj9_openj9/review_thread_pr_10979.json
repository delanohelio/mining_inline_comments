{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA5MTUwNDM4", "number": 10979, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxOToxMTo0OVrOExVVHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNTo1Njo1NVrOEx-Dgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMTY1MTUxOnYy", "diffSide": "RIGHT", "path": "test/functional/JIT_Test/src/jit/test/vich/JNILocalRef.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxOToxMTo0OVrOHnan2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMDo1MTowN1rOHneGHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA5MjY5OA==", "bodyText": "Any requirement for these to be unique objects?  valueOf will use the Integer cache where new Integer wouldn't", "url": "https://github.com/eclipse-openj9/openj9/pull/10979#discussion_r511092698", "createdAt": "2020-10-23T19:11:49Z", "author": {"login": "DanHeidinga"}, "path": "test/functional/JIT_Test/src/jit/test/vich/JNILocalRef.java", "diffHunk": "@@ -53,38 +53,38 @@ public JNILocalRef() {\n \t@Test(groups = { \"level.sanity\",\"component.jit\" })\n \tpublic void testJNILocalRef()\n \t{\n-\t\tObject o1 = new Integer(0);\n-\t\tObject o2 = new Integer(0);\n-\t\tObject o3 = new Integer(0);\n-\t\tObject o4 = new Integer(0);\n-\t\tObject o5 = new Integer(0);\n-\t\tObject o6 = new Integer(0);\n-\t\tObject o7 = new Integer(0);\n-\t\tObject o8 = new Integer(0);\n-\t\tObject o9 = new Integer(0);\n-\t\tObject o10 = new Integer(0);\n-\t\tObject o11 = new Integer(0);\n-\t\tObject o12 = new Integer(0);\n-\t\tObject o13 = new Integer(0);\n-\t\tObject o14 = new Integer(0);\n-\t\tObject o15 = new Integer(0);\n-\t\tObject o16 = new Integer(0);\n-\t\tObject o17 = new Integer(0);\n-\t\tObject o18 = new Integer(0);\n-\t\tObject o19 = new Integer(0);\n-\t\tObject o20 = new Integer(0);\n-\t\tObject o21 = new Integer(0);\n-\t\tObject o22 = new Integer(0);\n-\t\tObject o23 = new Integer(0);\n-\t\tObject o24 = new Integer(0);\n-\t\tObject o25 = new Integer(0);\n-\t\tObject o26 = new Integer(0);\n-\t\tObject o27 = new Integer(0);\n-\t\tObject o28 = new Integer(0);\n-\t\tObject o29 = new Integer(0);\n-\t\tObject o30 = new Integer(0);\n-\t\tObject o31 = new Integer(0);\n-\t\tObject o32 = new Integer(0);\n+\t\tObject o1 = Integer.valueOf(0);\n+\t\tObject o2 = Integer.valueOf(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c6f4f5869f8831588afc36bd943fd934fd92adc"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTEwMDQwOQ==", "bodyText": "This probably does change the sense of the test, but this test is pretty useless these days, and continues to pass with these changes.", "url": "https://github.com/eclipse-openj9/openj9/pull/10979#discussion_r511100409", "createdAt": "2020-10-23T19:20:58Z", "author": {"login": "gacholio"}, "path": "test/functional/JIT_Test/src/jit/test/vich/JNILocalRef.java", "diffHunk": "@@ -53,38 +53,38 @@ public JNILocalRef() {\n \t@Test(groups = { \"level.sanity\",\"component.jit\" })\n \tpublic void testJNILocalRef()\n \t{\n-\t\tObject o1 = new Integer(0);\n-\t\tObject o2 = new Integer(0);\n-\t\tObject o3 = new Integer(0);\n-\t\tObject o4 = new Integer(0);\n-\t\tObject o5 = new Integer(0);\n-\t\tObject o6 = new Integer(0);\n-\t\tObject o7 = new Integer(0);\n-\t\tObject o8 = new Integer(0);\n-\t\tObject o9 = new Integer(0);\n-\t\tObject o10 = new Integer(0);\n-\t\tObject o11 = new Integer(0);\n-\t\tObject o12 = new Integer(0);\n-\t\tObject o13 = new Integer(0);\n-\t\tObject o14 = new Integer(0);\n-\t\tObject o15 = new Integer(0);\n-\t\tObject o16 = new Integer(0);\n-\t\tObject o17 = new Integer(0);\n-\t\tObject o18 = new Integer(0);\n-\t\tObject o19 = new Integer(0);\n-\t\tObject o20 = new Integer(0);\n-\t\tObject o21 = new Integer(0);\n-\t\tObject o22 = new Integer(0);\n-\t\tObject o23 = new Integer(0);\n-\t\tObject o24 = new Integer(0);\n-\t\tObject o25 = new Integer(0);\n-\t\tObject o26 = new Integer(0);\n-\t\tObject o27 = new Integer(0);\n-\t\tObject o28 = new Integer(0);\n-\t\tObject o29 = new Integer(0);\n-\t\tObject o30 = new Integer(0);\n-\t\tObject o31 = new Integer(0);\n-\t\tObject o32 = new Integer(0);\n+\t\tObject o1 = Integer.valueOf(0);\n+\t\tObject o2 = Integer.valueOf(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA5MjY5OA=="}, "originalCommit": {"oid": "7c6f4f5869f8831588afc36bd943fd934fd92adc"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE0MDQ5Ng==", "bodyText": "Updated to use unique objects.", "url": "https://github.com/eclipse-openj9/openj9/pull/10979#discussion_r511140496", "createdAt": "2020-10-23T20:28:43Z", "author": {"login": "gacholio"}, "path": "test/functional/JIT_Test/src/jit/test/vich/JNILocalRef.java", "diffHunk": "@@ -53,38 +53,38 @@ public JNILocalRef() {\n \t@Test(groups = { \"level.sanity\",\"component.jit\" })\n \tpublic void testJNILocalRef()\n \t{\n-\t\tObject o1 = new Integer(0);\n-\t\tObject o2 = new Integer(0);\n-\t\tObject o3 = new Integer(0);\n-\t\tObject o4 = new Integer(0);\n-\t\tObject o5 = new Integer(0);\n-\t\tObject o6 = new Integer(0);\n-\t\tObject o7 = new Integer(0);\n-\t\tObject o8 = new Integer(0);\n-\t\tObject o9 = new Integer(0);\n-\t\tObject o10 = new Integer(0);\n-\t\tObject o11 = new Integer(0);\n-\t\tObject o12 = new Integer(0);\n-\t\tObject o13 = new Integer(0);\n-\t\tObject o14 = new Integer(0);\n-\t\tObject o15 = new Integer(0);\n-\t\tObject o16 = new Integer(0);\n-\t\tObject o17 = new Integer(0);\n-\t\tObject o18 = new Integer(0);\n-\t\tObject o19 = new Integer(0);\n-\t\tObject o20 = new Integer(0);\n-\t\tObject o21 = new Integer(0);\n-\t\tObject o22 = new Integer(0);\n-\t\tObject o23 = new Integer(0);\n-\t\tObject o24 = new Integer(0);\n-\t\tObject o25 = new Integer(0);\n-\t\tObject o26 = new Integer(0);\n-\t\tObject o27 = new Integer(0);\n-\t\tObject o28 = new Integer(0);\n-\t\tObject o29 = new Integer(0);\n-\t\tObject o30 = new Integer(0);\n-\t\tObject o31 = new Integer(0);\n-\t\tObject o32 = new Integer(0);\n+\t\tObject o1 = Integer.valueOf(0);\n+\t\tObject o2 = Integer.valueOf(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA5MjY5OA=="}, "originalCommit": {"oid": "7c6f4f5869f8831588afc36bd943fd934fd92adc"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE0NTUwMA==", "bodyText": "Changing them to new Object() is potentially giving our selves more work in the future considering that Object may become an abstract class. For these sort of things where we need a ref type but dont really care what kind we should just define a static inner class.", "url": "https://github.com/eclipse-openj9/openj9/pull/10979#discussion_r511145500", "createdAt": "2020-10-23T20:41:16Z", "author": {"login": "tajila"}, "path": "test/functional/JIT_Test/src/jit/test/vich/JNILocalRef.java", "diffHunk": "@@ -53,38 +53,38 @@ public JNILocalRef() {\n \t@Test(groups = { \"level.sanity\",\"component.jit\" })\n \tpublic void testJNILocalRef()\n \t{\n-\t\tObject o1 = new Integer(0);\n-\t\tObject o2 = new Integer(0);\n-\t\tObject o3 = new Integer(0);\n-\t\tObject o4 = new Integer(0);\n-\t\tObject o5 = new Integer(0);\n-\t\tObject o6 = new Integer(0);\n-\t\tObject o7 = new Integer(0);\n-\t\tObject o8 = new Integer(0);\n-\t\tObject o9 = new Integer(0);\n-\t\tObject o10 = new Integer(0);\n-\t\tObject o11 = new Integer(0);\n-\t\tObject o12 = new Integer(0);\n-\t\tObject o13 = new Integer(0);\n-\t\tObject o14 = new Integer(0);\n-\t\tObject o15 = new Integer(0);\n-\t\tObject o16 = new Integer(0);\n-\t\tObject o17 = new Integer(0);\n-\t\tObject o18 = new Integer(0);\n-\t\tObject o19 = new Integer(0);\n-\t\tObject o20 = new Integer(0);\n-\t\tObject o21 = new Integer(0);\n-\t\tObject o22 = new Integer(0);\n-\t\tObject o23 = new Integer(0);\n-\t\tObject o24 = new Integer(0);\n-\t\tObject o25 = new Integer(0);\n-\t\tObject o26 = new Integer(0);\n-\t\tObject o27 = new Integer(0);\n-\t\tObject o28 = new Integer(0);\n-\t\tObject o29 = new Integer(0);\n-\t\tObject o30 = new Integer(0);\n-\t\tObject o31 = new Integer(0);\n-\t\tObject o32 = new Integer(0);\n+\t\tObject o1 = Integer.valueOf(0);\n+\t\tObject o2 = Integer.valueOf(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA5MjY5OA=="}, "originalCommit": {"oid": "7c6f4f5869f8831588afc36bd943fd934fd92adc"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE0OTU5OQ==", "bodyText": "Updated.", "url": "https://github.com/eclipse-openj9/openj9/pull/10979#discussion_r511149599", "createdAt": "2020-10-23T20:51:07Z", "author": {"login": "gacholio"}, "path": "test/functional/JIT_Test/src/jit/test/vich/JNILocalRef.java", "diffHunk": "@@ -53,38 +53,38 @@ public JNILocalRef() {\n \t@Test(groups = { \"level.sanity\",\"component.jit\" })\n \tpublic void testJNILocalRef()\n \t{\n-\t\tObject o1 = new Integer(0);\n-\t\tObject o2 = new Integer(0);\n-\t\tObject o3 = new Integer(0);\n-\t\tObject o4 = new Integer(0);\n-\t\tObject o5 = new Integer(0);\n-\t\tObject o6 = new Integer(0);\n-\t\tObject o7 = new Integer(0);\n-\t\tObject o8 = new Integer(0);\n-\t\tObject o9 = new Integer(0);\n-\t\tObject o10 = new Integer(0);\n-\t\tObject o11 = new Integer(0);\n-\t\tObject o12 = new Integer(0);\n-\t\tObject o13 = new Integer(0);\n-\t\tObject o14 = new Integer(0);\n-\t\tObject o15 = new Integer(0);\n-\t\tObject o16 = new Integer(0);\n-\t\tObject o17 = new Integer(0);\n-\t\tObject o18 = new Integer(0);\n-\t\tObject o19 = new Integer(0);\n-\t\tObject o20 = new Integer(0);\n-\t\tObject o21 = new Integer(0);\n-\t\tObject o22 = new Integer(0);\n-\t\tObject o23 = new Integer(0);\n-\t\tObject o24 = new Integer(0);\n-\t\tObject o25 = new Integer(0);\n-\t\tObject o26 = new Integer(0);\n-\t\tObject o27 = new Integer(0);\n-\t\tObject o28 = new Integer(0);\n-\t\tObject o29 = new Integer(0);\n-\t\tObject o30 = new Integer(0);\n-\t\tObject o31 = new Integer(0);\n-\t\tObject o32 = new Integer(0);\n+\t\tObject o1 = Integer.valueOf(0);\n+\t\tObject o2 = Integer.valueOf(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA5MjY5OA=="}, "originalCommit": {"oid": "7c6f4f5869f8831588afc36bd943fd934fd92adc"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMTY4MjY3OnYy", "diffSide": "RIGHT", "path": "test/functional/Java8andUp/src/org/openj9/test/java/lang/ref/Test_PhantomReference.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxOToxNjoxOFrOHna2zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMDowMToyN1rOHnc21Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA5NjUyNg==", "bodyText": "Similar concern about caching of Boolean.valueOf() and changing the test as the lifetime of the Boolean is now much longer", "url": "https://github.com/eclipse-openj9/openj9/pull/10979#discussion_r511096526", "createdAt": "2020-10-23T19:16:18Z", "author": {"login": "DanHeidinga"}, "path": "test/functional/Java8andUp/src/org/openj9/test/java/lang/ref/Test_PhantomReference.java", "diffHunk": "@@ -42,7 +42,7 @@ protected void doneSuite() {\n \t@Test\n \tpublic void test_get() {\n \t\tReferenceQueue rq = new ReferenceQueue();\n-\t\tbool = new Boolean(false);\n+\t\tbool = Boolean.valueOf(false);\n \t\tPhantomReference pr = new PhantomReference(bool, rq);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c6f4f5869f8831588afc36bd943fd934fd92adc"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTEwMDkyOA==", "bodyText": "There's only one use here, so I don't think it matters.", "url": "https://github.com/eclipse-openj9/openj9/pull/10979#discussion_r511100928", "createdAt": "2020-10-23T19:21:35Z", "author": {"login": "gacholio"}, "path": "test/functional/Java8andUp/src/org/openj9/test/java/lang/ref/Test_PhantomReference.java", "diffHunk": "@@ -42,7 +42,7 @@ protected void doneSuite() {\n \t@Test\n \tpublic void test_get() {\n \t\tReferenceQueue rq = new ReferenceQueue();\n-\t\tbool = new Boolean(false);\n+\t\tbool = Boolean.valueOf(false);\n \t\tPhantomReference pr = new PhantomReference(bool, rq);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA5NjUyNg=="}, "originalCommit": {"oid": "7c6f4f5869f8831588afc36bd943fd934fd92adc"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTEyOTMwMQ==", "bodyText": "Only 1 use in this test but are you sure no other code in the class library is using Boolean.valueOf(false)?  The PhantomRef presumable will indicate when the bool has been collected and that may never happen due to using a cached version,", "url": "https://github.com/eclipse-openj9/openj9/pull/10979#discussion_r511129301", "createdAt": "2020-10-23T20:01:27Z", "author": {"login": "DanHeidinga"}, "path": "test/functional/Java8andUp/src/org/openj9/test/java/lang/ref/Test_PhantomReference.java", "diffHunk": "@@ -42,7 +42,7 @@ protected void doneSuite() {\n \t@Test\n \tpublic void test_get() {\n \t\tReferenceQueue rq = new ReferenceQueue();\n-\t\tbool = new Boolean(false);\n+\t\tbool = Boolean.valueOf(false);\n \t\tPhantomReference pr = new PhantomReference(bool, rq);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA5NjUyNg=="}, "originalCommit": {"oid": "7c6f4f5869f8831588afc36bd943fd934fd92adc"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMTY4NTYzOnYy", "diffSide": "RIGHT", "path": "test/functional/Java8andUp/src/org/openj9/test/java/lang/ref/Test_PhantomReference.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxOToxNjo0NVrOHna4Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxOTo1NDowNVrOHncpzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA5NjkxMQ==", "bodyText": "Same concern about extended life time here", "url": "https://github.com/eclipse-openj9/openj9/pull/10979#discussion_r511096911", "createdAt": "2020-10-23T19:16:45Z", "author": {"login": "DanHeidinga"}, "path": "test/functional/Java8andUp/src/org/openj9/test/java/lang/ref/Test_PhantomReference.java", "diffHunk": "@@ -53,7 +53,7 @@ public void test_get() {\n \t@Test\n \tpublic void test_Constructor() {\n \t\tReferenceQueue rq = new ReferenceQueue();\n-\t\tbool = new Boolean(true);\n+\t\tbool = Boolean.valueOf(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c6f4f5869f8831588afc36bd943fd934fd92adc"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTEwMTg2MQ==", "bodyText": "Single use.", "url": "https://github.com/eclipse-openj9/openj9/pull/10979#discussion_r511101861", "createdAt": "2020-10-23T19:22:47Z", "author": {"login": "gacholio"}, "path": "test/functional/Java8andUp/src/org/openj9/test/java/lang/ref/Test_PhantomReference.java", "diffHunk": "@@ -53,7 +53,7 @@ public void test_get() {\n \t@Test\n \tpublic void test_Constructor() {\n \t\tReferenceQueue rq = new ReferenceQueue();\n-\t\tbool = new Boolean(true);\n+\t\tbool = Boolean.valueOf(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA5NjkxMQ=="}, "originalCommit": {"oid": "7c6f4f5869f8831588afc36bd943fd934fd92adc"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTEyNTk2NQ==", "bodyText": "I've never understood what phantom does - aside from the potentially cached object, this test appears broken in two other ways:\n\nusing sleep is extremely unreliable\nthe bool variable is never set to null, so there's no guarantee it won't be collected even without the caching", "url": "https://github.com/eclipse-openj9/openj9/pull/10979#discussion_r511125965", "createdAt": "2020-10-23T19:54:05Z", "author": {"login": "gacholio"}, "path": "test/functional/Java8andUp/src/org/openj9/test/java/lang/ref/Test_PhantomReference.java", "diffHunk": "@@ -53,7 +53,7 @@ public void test_get() {\n \t@Test\n \tpublic void test_Constructor() {\n \t\tReferenceQueue rq = new ReferenceQueue();\n-\t\tbool = new Boolean(true);\n+\t\tbool = Boolean.valueOf(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA5NjkxMQ=="}, "originalCommit": {"oid": "7c6f4f5869f8831588afc36bd943fd934fd92adc"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMTY4OTk2OnYy", "diffSide": "RIGHT", "path": "test/functional/Java8andUp/src/org/openj9/test/java/lang/ref/Test_ReferenceQueue.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxOToxNzoyMlrOHna6ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxOToyMjoyNVrOHnbKkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA5NzQ0NQ==", "bodyText": "Similar concerns with this test", "url": "https://github.com/eclipse-openj9/openj9/pull/10979#discussion_r511097445", "createdAt": "2020-10-23T19:17:22Z", "author": {"login": "DanHeidinga"}, "path": "test/functional/Java8andUp/src/org/openj9/test/java/lang/ref/Test_ReferenceQueue.java", "diffHunk": "@@ -55,7 +55,7 @@ public void run() {\n \t\t\tsynchronized (rq) {\n \t\t\t\t// store in a static so it won't be gc'ed because the jit\n \t\t\t\t// optimized it out\n-\t\t\t\tinteger = new Integer(667);\n+\t\t\t\tinteger = Integer.valueOf(667);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c6f4f5869f8831588afc36bd943fd934fd92adc"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTEwMTU4NA==", "bodyText": "Single use, and realistically, no one is caching 667.", "url": "https://github.com/eclipse-openj9/openj9/pull/10979#discussion_r511101584", "createdAt": "2020-10-23T19:22:25Z", "author": {"login": "gacholio"}, "path": "test/functional/Java8andUp/src/org/openj9/test/java/lang/ref/Test_ReferenceQueue.java", "diffHunk": "@@ -55,7 +55,7 @@ public void run() {\n \t\t\tsynchronized (rq) {\n \t\t\t\t// store in a static so it won't be gc'ed because the jit\n \t\t\t\t// optimized it out\n-\t\t\t\tinteger = new Integer(667);\n+\t\t\t\tinteger = Integer.valueOf(667);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA5NzQ0NQ=="}, "originalCommit": {"oid": "7c6f4f5869f8831588afc36bd943fd934fd92adc"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwODMyMzg3OnYy", "diffSide": "RIGHT", "path": "jcl/src/java.base/share/classes/java/lang/reflect/Array.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNTo1Njo1NVrOHoWdcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNzowNTo0M1rOHoZspw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA3MzA3NQ==", "bodyText": "Hopefully this comment is no longer true: Perhaps it should be deleted?", "url": "https://github.com/eclipse-openj9/openj9/pull/10979#discussion_r512073075", "createdAt": "2020-10-26T15:56:55Z", "author": {"login": "keithc-ca"}, "path": "jcl/src/java.base/share/classes/java/lang/reflect/Array.java", "diffHunk": "@@ -71,7 +71,7 @@ public static Object get(Object array, int index) throws IllegalArgumentExceptio\n \t\treturn ((short[])array)[index];\n \t} else if (arrayClass == byte[].class) {\n \t\t/* Avoiding Byte cache yields 5x performance improvement. */\n-\t\treturn new Byte(((byte[])array)[index]);\n+\t\treturn Byte.valueOf(((byte[])array)[index]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "829ba91478ff41bec309392f260e5290e3882a20"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA4NzgzOA==", "bodyText": "This was an optimization that was made when we switched from the native implementation to the Java implementation as the Java implementation was more \"JIT friendly\". Perhaps @andrewcraik knows if this is still the case.", "url": "https://github.com/eclipse-openj9/openj9/pull/10979#discussion_r512087838", "createdAt": "2020-10-26T16:17:06Z", "author": {"login": "tajila"}, "path": "jcl/src/java.base/share/classes/java/lang/reflect/Array.java", "diffHunk": "@@ -71,7 +71,7 @@ public static Object get(Object array, int index) throws IllegalArgumentExceptio\n \t\treturn ((short[])array)[index];\n \t} else if (arrayClass == byte[].class) {\n \t\t/* Avoiding Byte cache yields 5x performance improvement. */\n-\t\treturn new Byte(((byte[])array)[index]);\n+\t\treturn Byte.valueOf(((byte[])array)[index]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA3MzA3NQ=="}, "originalCommit": {"oid": "829ba91478ff41bec309392f260e5290e3882a20"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA5Nzc4Mw==", "bodyText": "If nothing else, it should be changed to match the pattern of the rest of the code.", "url": "https://github.com/eclipse-openj9/openj9/pull/10979#discussion_r512097783", "createdAt": "2020-10-26T16:30:41Z", "author": {"login": "gacholio"}, "path": "jcl/src/java.base/share/classes/java/lang/reflect/Array.java", "diffHunk": "@@ -71,7 +71,7 @@ public static Object get(Object array, int index) throws IllegalArgumentExceptio\n \t\treturn ((short[])array)[index];\n \t} else if (arrayClass == byte[].class) {\n \t\t/* Avoiding Byte cache yields 5x performance improvement. */\n-\t\treturn new Byte(((byte[])array)[index]);\n+\t\treturn Byte.valueOf(((byte[])array)[index]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA3MzA3NQ=="}, "originalCommit": {"oid": "829ba91478ff41bec309392f260e5290e3882a20"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjEyNjExOQ==", "bodyText": "I do not know if this is still the case - that conversion happened quite a long time ago. The code would need to be benchmarked to know if the change to Byte.valueOf is performance neutral and if bypassing the Byte cache still yields a performance boost. I think any decision to change this needs perf testing since it was clearly important and so we need to verify the best way to handle the operations. Doing the new directly could allow for stack allocation when valueof may not (due to the cache pathways). I am not sure why the optimization was only applied in this specific case, but it being different is not sufficient to warrant a change without perf evaluation IMO.", "url": "https://github.com/eclipse-openj9/openj9/pull/10979#discussion_r512126119", "createdAt": "2020-10-26T17:05:43Z", "author": {"login": "andrewcraik"}, "path": "jcl/src/java.base/share/classes/java/lang/reflect/Array.java", "diffHunk": "@@ -71,7 +71,7 @@ public static Object get(Object array, int index) throws IllegalArgumentExceptio\n \t\treturn ((short[])array)[index];\n \t} else if (arrayClass == byte[].class) {\n \t\t/* Avoiding Byte cache yields 5x performance improvement. */\n-\t\treturn new Byte(((byte[])array)[index]);\n+\t\treturn Byte.valueOf(((byte[])array)[index]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA3MzA3NQ=="}, "originalCommit": {"oid": "829ba91478ff41bec309392f260e5290e3882a20"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1010, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}