{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyMDEzNDY2", "number": 10682, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMjo1OToyNFrOEmz4tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMzoxMDowMVrOEnP-7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTMxNDQ2OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/control/JITClientCompilationThread.cpp", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMjo1OToyNFrOHXDwTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMDo0ODowNlrOHXsE6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk0MDgxMw==", "bodyText": "We have a frontend as a parameter of handleServerMessage. Do we need a specific one, i.e. a non-AOT one? If so, please add a comment explaining why.", "url": "https://github.com/eclipse-openj9/openj9/pull/10682#discussion_r493940813", "createdAt": "2020-09-23T22:59:24Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/control/JITClientCompilationThread.cpp", "diffHunk": "@@ -256,9 +256,10 @@ handleServerMessage(JITServer::ClientStream *client, TR_J9VM *fe, JITServer::Mes\n       case MessageType::VM_getSystemClassFromClassName:\n          {\n          auto recv = client->getRecvData<std::string, bool>();\n+         TR_J9VMBase *fej9 = TR_J9VMBase::get(vmThread->javaVM->jitConfig, vmThread);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1977a74a44c54f7110fa5af2fbdb01adc606ac29"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ0MTg2MQ==", "bodyText": "Yeah, we need non-AOT front-end here, since validation is done on the server. I mention it in the commit message, will add comment here as well.", "url": "https://github.com/eclipse-openj9/openj9/pull/10682#discussion_r494441861", "createdAt": "2020-09-24T16:11:02Z", "author": {"login": "dmitry-ten"}, "path": "runtime/compiler/control/JITClientCompilationThread.cpp", "diffHunk": "@@ -256,9 +256,10 @@ handleServerMessage(JITServer::ClientStream *client, TR_J9VM *fe, JITServer::Mes\n       case MessageType::VM_getSystemClassFromClassName:\n          {\n          auto recv = client->getRecvData<std::string, bool>();\n+         TR_J9VMBase *fej9 = TR_J9VMBase::get(vmThread->javaVM->jitConfig, vmThread);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk0MDgxMw=="}, "originalCommit": {"oid": "1977a74a44c54f7110fa5af2fbdb01adc606ac29"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUzOTkyOA==", "bodyText": "Ironically, I just reviewed an item from @dchopra001 where I suggested using a TR_J9 frontend in this very place. In a sense I answered my own question in that PR.", "url": "https://github.com/eclipse-openj9/openj9/pull/10682#discussion_r494539928", "createdAt": "2020-09-24T18:50:06Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/control/JITClientCompilationThread.cpp", "diffHunk": "@@ -256,9 +256,10 @@ handleServerMessage(JITServer::ClientStream *client, TR_J9VM *fe, JITServer::Mes\n       case MessageType::VM_getSystemClassFromClassName:\n          {\n          auto recv = client->getRecvData<std::string, bool>();\n+         TR_J9VMBase *fej9 = TR_J9VMBase::get(vmThread->javaVM->jitConfig, vmThread);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk0MDgxMw=="}, "originalCommit": {"oid": "1977a74a44c54f7110fa5af2fbdb01adc606ac29"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU5MzE0Mg==", "bodyText": "Can we remove this line of code from here and merge it as part of #10688 instead? The change here is needed to functional correctness on Z. Since we are trying to get this change into the 0.23 branch, it'll be easier to push it through as part of #10688. Unless we are sure that the change in this PR should also be double delivered?", "url": "https://github.com/eclipse-openj9/openj9/pull/10682#discussion_r494593142", "createdAt": "2020-09-24T20:31:52Z", "author": {"login": "dchopra001"}, "path": "runtime/compiler/control/JITClientCompilationThread.cpp", "diffHunk": "@@ -256,9 +256,10 @@ handleServerMessage(JITServer::ClientStream *client, TR_J9VM *fe, JITServer::Mes\n       case MessageType::VM_getSystemClassFromClassName:\n          {\n          auto recv = client->getRecvData<std::string, bool>();\n+         TR_J9VMBase *fej9 = TR_J9VMBase::get(vmThread->javaVM->jitConfig, vmThread);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk0MDgxMw=="}, "originalCommit": {"oid": "1977a74a44c54f7110fa5af2fbdb01adc606ac29"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDYwMTEwNg==", "bodyText": "I will remove it.", "url": "https://github.com/eclipse-openj9/openj9/pull/10682#discussion_r494601106", "createdAt": "2020-09-24T20:47:23Z", "author": {"login": "dmitry-ten"}, "path": "runtime/compiler/control/JITClientCompilationThread.cpp", "diffHunk": "@@ -256,9 +256,10 @@ handleServerMessage(JITServer::ClientStream *client, TR_J9VM *fe, JITServer::Mes\n       case MessageType::VM_getSystemClassFromClassName:\n          {\n          auto recv = client->getRecvData<std::string, bool>();\n+         TR_J9VMBase *fej9 = TR_J9VMBase::get(vmThread->javaVM->jitConfig, vmThread);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk0MDgxMw=="}, "originalCommit": {"oid": "1977a74a44c54f7110fa5af2fbdb01adc606ac29"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDYwMTQ1MA==", "bodyText": "Thanks!", "url": "https://github.com/eclipse-openj9/openj9/pull/10682#discussion_r494601450", "createdAt": "2020-09-24T20:48:06Z", "author": {"login": "dchopra001"}, "path": "runtime/compiler/control/JITClientCompilationThread.cpp", "diffHunk": "@@ -256,9 +256,10 @@ handleServerMessage(JITServer::ClientStream *client, TR_J9VM *fe, JITServer::Mes\n       case MessageType::VM_getSystemClassFromClassName:\n          {\n          auto recv = client->getRecvData<std::string, bool>();\n+         TR_J9VMBase *fej9 = TR_J9VMBase::get(vmThread->javaVM->jitConfig, vmThread);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk0MDgxMw=="}, "originalCommit": {"oid": "1977a74a44c54f7110fa5af2fbdb01adc606ac29"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTM1NTIyOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/runtime/SymbolValidationManager.hpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMzoxMTowMFrOHXEHrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMzoxMTowMFrOHXEHrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk0Njc5Ng==", "bodyText": "This should be derived from the definition of the array", "url": "https://github.com/eclipse-openj9/openj9/pull/10682#discussion_r493946796", "createdAt": "2020-09-23T23:11:00Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/runtime/SymbolValidationManager.hpp", "diffHunk": "@@ -628,6 +628,7 @@ struct ImproperInterfaceMethodFromCPRecord : public MethodValidationRecord\n    int32_t _cpIndex;\n    };\n \n+#define SYSTEM_CLASSES_NOT_WORTH_REMEMBERING_COUNT 2", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1977a74a44c54f7110fa5af2fbdb01adc606ac29"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTM4MTY3OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/runtime/SymbolValidationManager.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMzoyMzowMlrOHXEW8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNToyNTo0OFrOHXgXHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk1MDcwNQ==", "bodyText": "We have the comp object so we can ask comp->isOutOfProcessCompilation()", "url": "https://github.com/eclipse-openj9/openj9/pull/10682#discussion_r493950705", "createdAt": "2020-09-23T23:23:02Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/runtime/SymbolValidationManager.cpp", "diffHunk": "@@ -111,6 +115,26 @@ TR::SymbolValidationManager::SymbolValidationManager(TR::Region &region, TR_Reso\n       _alreadyGeneratedRecords.insert(\n          new (_region) ArrayClassFromComponentClassRecord(arrayClass, component));\n       }\n+\n+#if defined(J9VM_OPT_JITSERVER)\n+   if (TR::CompilationInfo::get()->getPersistentInfo()->getRemoteCompilationMode() == JITServer::SERVER)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1977a74a44c54f7110fa5af2fbdb01adc606ac29"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQwOTUwMQ==", "bodyText": "We can't use that method here, since SVM is created from J9::Compilation constructor, and _isOutOfProcessCompilation is not set yet. But if we move if outside of the constructor then it can be changed.", "url": "https://github.com/eclipse-openj9/openj9/pull/10682#discussion_r494409501", "createdAt": "2020-09-24T15:25:48Z", "author": {"login": "dmitry-ten"}, "path": "runtime/compiler/runtime/SymbolValidationManager.cpp", "diffHunk": "@@ -111,6 +115,26 @@ TR::SymbolValidationManager::SymbolValidationManager(TR::Region &region, TR_Reso\n       _alreadyGeneratedRecords.insert(\n          new (_region) ArrayClassFromComponentClassRecord(arrayClass, component));\n       }\n+\n+#if defined(J9VM_OPT_JITSERVER)\n+   if (TR::CompilationInfo::get()->getPersistentInfo()->getRemoteCompilationMode() == JITServer::SERVER)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk1MDcwNQ=="}, "originalCommit": {"oid": "1977a74a44c54f7110fa5af2fbdb01adc606ac29"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTQ3ODUyOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/runtime/SymbolValidationManager.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMDowNzowMVrOHXFQ2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNjozODo0MFrOHXjbCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk2NTUzMQ==", "bodyText": "I think we should execute this block of code in the constructor of a session where our new vector of classes not worth remembering is defined. This way we can avoid locking getClassesNotWorthRememberingMonitor() every time we create an SVM object. I am proposing to take this block of code (more or less) and create a static function in SymbolValidationManager. Then call this function in the constructor of a client session. We may not even need a vector, just an array of structs should be enough, though I don't know if we can use the computed number of elements in another file.", "url": "https://github.com/eclipse-openj9/openj9/pull/10682#discussion_r493965531", "createdAt": "2020-09-24T00:07:01Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/runtime/SymbolValidationManager.cpp", "diffHunk": "@@ -111,6 +115,26 @@ TR::SymbolValidationManager::SymbolValidationManager(TR::Region &region, TR_Reso\n       _alreadyGeneratedRecords.insert(\n          new (_region) ArrayClassFromComponentClassRecord(arrayClass, component));\n       }\n+\n+#if defined(J9VM_OPT_JITSERVER)\n+   if (TR::CompilationInfo::get()->getPersistentInfo()->getRemoteCompilationMode() == JITServer::SERVER)\n+      {\n+      // If needed, populate the client session with classes not worth remembering\n+      auto clientData = _fej9->_compInfoPT->getClientData();\n+      auto &classesNotWorthRemembering = clientData->getSystemClassesNotWorthRemembering();\n+         {\n+         OMR::CriticalSection classesNotWorthRememberingMonitor(clientData->getClassesNotWorthRememberingMonitor());\n+         if (classesNotWorthRemembering.size() != SYSTEM_CLASSES_NOT_WORTH_REMEMBERING_COUNT)\n+            {\n+            for (int i = 0; i < SYSTEM_CLASSES_NOT_WORTH_REMEMBERING_COUNT; ++i)\n+               {\n+               auto classNotWorthRemembering = &_systemClassesNotWorthRemembering[i];\n+               classesNotWorthRemembering.push_back({ classNotWorthRemembering->_className, NULL, classNotWorthRemembering->_checkIsSuperClass });\n+               }\n+            }\n+         }\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1977a74a44c54f7110fa5af2fbdb01adc606ac29"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ1OTY1OQ==", "bodyText": "Yeah, I will implement that. I think we don't even need a monitor if array initialization is done in client session constructor.", "url": "https://github.com/eclipse-openj9/openj9/pull/10682#discussion_r494459659", "createdAt": "2020-09-24T16:38:40Z", "author": {"login": "dmitry-ten"}, "path": "runtime/compiler/runtime/SymbolValidationManager.cpp", "diffHunk": "@@ -111,6 +115,26 @@ TR::SymbolValidationManager::SymbolValidationManager(TR::Region &region, TR_Reso\n       _alreadyGeneratedRecords.insert(\n          new (_region) ArrayClassFromComponentClassRecord(arrayClass, component));\n       }\n+\n+#if defined(J9VM_OPT_JITSERVER)\n+   if (TR::CompilationInfo::get()->getPersistentInfo()->getRemoteCompilationMode() == JITServer::SERVER)\n+      {\n+      // If needed, populate the client session with classes not worth remembering\n+      auto clientData = _fej9->_compInfoPT->getClientData();\n+      auto &classesNotWorthRemembering = clientData->getSystemClassesNotWorthRemembering();\n+         {\n+         OMR::CriticalSection classesNotWorthRememberingMonitor(clientData->getClassesNotWorthRememberingMonitor());\n+         if (classesNotWorthRemembering.size() != SYSTEM_CLASSES_NOT_WORTH_REMEMBERING_COUNT)\n+            {\n+            for (int i = 0; i < SYSTEM_CLASSES_NOT_WORTH_REMEMBERING_COUNT; ++i)\n+               {\n+               auto classNotWorthRemembering = &_systemClassesNotWorthRemembering[i];\n+               classesNotWorthRemembering.push_back({ classNotWorthRemembering->_className, NULL, classNotWorthRemembering->_checkIsSuperClass });\n+               }\n+            }\n+         }\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk2NTUzMQ=="}, "originalCommit": {"oid": "1977a74a44c54f7110fa5af2fbdb01adc606ac29"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NTkxNzg4OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/runtime/SymbolValidationManager.hpp", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMzoxMDowMVrOHXvlZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMzowMjo0MlrOHYCrcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY1ODkxNw==", "bodyText": "Can't we leave the first const here. The second one refers to the _className being immutable, but the first one refers to the string of characters being immutable.", "url": "https://github.com/eclipse-openj9/openj9/pull/10682#discussion_r494658917", "createdAt": "2020-09-24T23:10:01Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/runtime/SymbolValidationManager.hpp", "diffHunk": "@@ -637,9 +641,9 @@ class SymbolValidationManager\n \n    struct SystemClassNotWorthRemembering\n       {\n-      const char * const _className;\n+      char *_className;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b56aec7f369c98a8de17280b0d065709b1dbe86c"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDcwNjAxMw==", "bodyText": "True. I can push the change once the tests pass.", "url": "https://github.com/eclipse-openj9/openj9/pull/10682#discussion_r494706013", "createdAt": "2020-09-25T02:07:25Z", "author": {"login": "dmitry-ten"}, "path": "runtime/compiler/runtime/SymbolValidationManager.hpp", "diffHunk": "@@ -637,9 +641,9 @@ class SymbolValidationManager\n \n    struct SystemClassNotWorthRemembering\n       {\n-      const char * const _className;\n+      char *_className;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY1ODkxNw=="}, "originalCommit": {"oid": "b56aec7f369c98a8de17280b0d065709b1dbe86c"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk3MTc2MA==", "bodyText": "The tests on Power take very long for some reason, but on x86 they passed. You could do this change now.", "url": "https://github.com/eclipse-openj9/openj9/pull/10682#discussion_r494971760", "createdAt": "2020-09-25T13:02:42Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/runtime/SymbolValidationManager.hpp", "diffHunk": "@@ -637,9 +641,9 @@ class SymbolValidationManager\n \n    struct SystemClassNotWorthRemembering\n       {\n-      const char * const _className;\n+      char *_className;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY1ODkxNw=="}, "originalCommit": {"oid": "b56aec7f369c98a8de17280b0d065709b1dbe86c"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1216, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}