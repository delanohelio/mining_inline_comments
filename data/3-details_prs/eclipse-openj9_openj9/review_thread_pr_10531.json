{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgyMTE2MDkw", "number": 10531, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODozODowOFrOEhXm8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMzoyMTozN1rOEh7vKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDI1MjY0OnYy", "diffSide": "RIGHT", "path": "runtime/vm/visible.c", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODozODowOFrOHOpbQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxOToxNjo1M1rOHOqrlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyMDgzNQ==", "bodyText": "Use the common helper to clear the exception\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tvmThread->currentException = NULL;\n          \n          \n            \n            \t\t\tvmThread->privateFlags &= ~(UDATA)J9_PRIVATE_FLAGS_REPORT_EXCEPTION_THROW;\n          \n          \n            \n            \t\t\tVM_VMHelpers::clearException(vmThread);", "url": "https://github.com/eclipse-openj9/openj9/pull/10531#discussion_r485120835", "createdAt": "2020-09-08T18:38:08Z", "author": {"login": "DanHeidinga"}, "path": "runtime/vm/visible.c", "diffHunk": "@@ -343,6 +355,15 @@ loadAndVerifyNestHost(J9VMThread *vmThread, J9Class *clazz, UDATA options)\n \t\t/* If a problem occurred in nest host verification then the nest host value is invalid */\n \t\tif (J9_VISIBILITY_ALLOWED == result) {\n \t\t\tclazz->nestHost = nestHost;\n+\t\t} else if (hiddenNestMate) {\n+\t\t\t/* \n+\t\t\t * For hidden class that is added into the nest of its host class, i.e. defined with Option.NESTMATE,\n+\t\t\t * if we cannot get its nest host, its hostclass (curClazz) shuold be used as nest host instead. \n+\t\t\t */\n+\t\t\tclazz->nestHost = curClazz;\n+\t\t\tvmThread->currentException = NULL;\n+\t\t\tvmThread->privateFlags &= ~(UDATA)J9_PRIVATE_FLAGS_REPORT_EXCEPTION_THROW;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4ff501d9be74dd0c54e86247d495bde961f016a"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEzOTUwNA==", "bodyText": "I get a compilation error if I change to use VM_VMHelpers\nvisible.c:358:38: error: expected expression before ':' token\n                         VM_VMHelpers::clearException(vmThread);\n                                      ^\nvisible.c:358:25: error: label 'VM_VMHelpers' defined but not used [-Werror=unused-label", "url": "https://github.com/eclipse-openj9/openj9/pull/10531#discussion_r485139504", "createdAt": "2020-09-08T19:13:10Z", "author": {"login": "hangshao0"}, "path": "runtime/vm/visible.c", "diffHunk": "@@ -343,6 +355,15 @@ loadAndVerifyNestHost(J9VMThread *vmThread, J9Class *clazz, UDATA options)\n \t\t/* If a problem occurred in nest host verification then the nest host value is invalid */\n \t\tif (J9_VISIBILITY_ALLOWED == result) {\n \t\t\tclazz->nestHost = nestHost;\n+\t\t} else if (hiddenNestMate) {\n+\t\t\t/* \n+\t\t\t * For hidden class that is added into the nest of its host class, i.e. defined with Option.NESTMATE,\n+\t\t\t * if we cannot get its nest host, its hostclass (curClazz) shuold be used as nest host instead. \n+\t\t\t */\n+\t\t\tclazz->nestHost = curClazz;\n+\t\t\tvmThread->currentException = NULL;\n+\t\t\tvmThread->privateFlags &= ~(UDATA)J9_PRIVATE_FLAGS_REPORT_EXCEPTION_THROW;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyMDgzNQ=="}, "originalCommit": {"oid": "f4ff501d9be74dd0c54e86247d495bde961f016a"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE0MTM5OQ==", "bodyText": "I told you to use a C++ helper in a c file.  Probably more work than it's worth to convert the file now so leave the code as it is", "url": "https://github.com/eclipse-openj9/openj9/pull/10531#discussion_r485141399", "createdAt": "2020-09-08T19:16:53Z", "author": {"login": "DanHeidinga"}, "path": "runtime/vm/visible.c", "diffHunk": "@@ -343,6 +355,15 @@ loadAndVerifyNestHost(J9VMThread *vmThread, J9Class *clazz, UDATA options)\n \t\t/* If a problem occurred in nest host verification then the nest host value is invalid */\n \t\tif (J9_VISIBILITY_ALLOWED == result) {\n \t\t\tclazz->nestHost = nestHost;\n+\t\t} else if (hiddenNestMate) {\n+\t\t\t/* \n+\t\t\t * For hidden class that is added into the nest of its host class, i.e. defined with Option.NESTMATE,\n+\t\t\t * if we cannot get its nest host, its hostclass (curClazz) shuold be used as nest host instead. \n+\t\t\t */\n+\t\t\tclazz->nestHost = curClazz;\n+\t\t\tvmThread->currentException = NULL;\n+\t\t\tvmThread->privateFlags &= ~(UDATA)J9_PRIVATE_FLAGS_REPORT_EXCEPTION_THROW;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyMDgzNQ=="}, "originalCommit": {"oid": "f4ff501d9be74dd0c54e86247d495bde961f016a"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDI3MjQyOnYy", "diffSide": "RIGHT", "path": "runtime/vm/visible.c", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODo0Mzo1NFrOHOpnCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxOToyMTozNlrOHOq1OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyMzg1MA==", "bodyText": "It might be clearer to directly assign clazz->nestHost = clazz->hostClass; here as curClazz is updated in the while loop above", "url": "https://github.com/eclipse-openj9/openj9/pull/10531#discussion_r485123850", "createdAt": "2020-09-08T18:43:54Z", "author": {"login": "DanHeidinga"}, "path": "runtime/vm/visible.c", "diffHunk": "@@ -343,6 +355,15 @@ loadAndVerifyNestHost(J9VMThread *vmThread, J9Class *clazz, UDATA options)\n \t\t/* If a problem occurred in nest host verification then the nest host value is invalid */\n \t\tif (J9_VISIBILITY_ALLOWED == result) {\n \t\t\tclazz->nestHost = nestHost;\n+\t\t} else if (hiddenNestMate) {\n+\t\t\t/* \n+\t\t\t * For hidden class that is added into the nest of its host class, i.e. defined with Option.NESTMATE,\n+\t\t\t * if we cannot get its nest host, its hostclass (curClazz) shuold be used as nest host instead. \n+\t\t\t */\n+\t\t\tclazz->nestHost = curClazz;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4ff501d9be74dd0c54e86247d495bde961f016a"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE0MDg1NQ==", "bodyText": "clazz->hostClass could be another hidden class defined with Option.NESTMATE, so we need to walk to the end of the chain to use the class that is not hidden NestMate class, which is curClazz.", "url": "https://github.com/eclipse-openj9/openj9/pull/10531#discussion_r485140855", "createdAt": "2020-09-08T19:15:41Z", "author": {"login": "hangshao0"}, "path": "runtime/vm/visible.c", "diffHunk": "@@ -343,6 +355,15 @@ loadAndVerifyNestHost(J9VMThread *vmThread, J9Class *clazz, UDATA options)\n \t\t/* If a problem occurred in nest host verification then the nest host value is invalid */\n \t\tif (J9_VISIBILITY_ALLOWED == result) {\n \t\t\tclazz->nestHost = nestHost;\n+\t\t} else if (hiddenNestMate) {\n+\t\t\t/* \n+\t\t\t * For hidden class that is added into the nest of its host class, i.e. defined with Option.NESTMATE,\n+\t\t\t * if we cannot get its nest host, its hostclass (curClazz) shuold be used as nest host instead. \n+\t\t\t */\n+\t\t\tclazz->nestHost = curClazz;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyMzg1MA=="}, "originalCommit": {"oid": "f4ff501d9be74dd0c54e86247d495bde961f016a"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE0MjIyMw==", "bodyText": "I thought we discussed in another PR that a hidden class couldn't be the host of another hidden class... or am I remembering that wrong?", "url": "https://github.com/eclipse-openj9/openj9/pull/10531#discussion_r485142223", "createdAt": "2020-09-08T19:18:39Z", "author": {"login": "DanHeidinga"}, "path": "runtime/vm/visible.c", "diffHunk": "@@ -343,6 +355,15 @@ loadAndVerifyNestHost(J9VMThread *vmThread, J9Class *clazz, UDATA options)\n \t\t/* If a problem occurred in nest host verification then the nest host value is invalid */\n \t\tif (J9_VISIBILITY_ALLOWED == result) {\n \t\t\tclazz->nestHost = nestHost;\n+\t\t} else if (hiddenNestMate) {\n+\t\t\t/* \n+\t\t\t * For hidden class that is added into the nest of its host class, i.e. defined with Option.NESTMATE,\n+\t\t\t * if we cannot get its nest host, its hostclass (curClazz) shuold be used as nest host instead. \n+\t\t\t */\n+\t\t\tclazz->nestHost = curClazz;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyMzg1MA=="}, "originalCommit": {"oid": "f4ff501d9be74dd0c54e86247d495bde961f016a"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE0Mzg2NQ==", "bodyText": "That discussion was a hidden class cannot be super class of another hidden class.", "url": "https://github.com/eclipse-openj9/openj9/pull/10531#discussion_r485143865", "createdAt": "2020-09-08T19:21:36Z", "author": {"login": "hangshao0"}, "path": "runtime/vm/visible.c", "diffHunk": "@@ -343,6 +355,15 @@ loadAndVerifyNestHost(J9VMThread *vmThread, J9Class *clazz, UDATA options)\n \t\t/* If a problem occurred in nest host verification then the nest host value is invalid */\n \t\tif (J9_VISIBILITY_ALLOWED == result) {\n \t\t\tclazz->nestHost = nestHost;\n+\t\t} else if (hiddenNestMate) {\n+\t\t\t/* \n+\t\t\t * For hidden class that is added into the nest of its host class, i.e. defined with Option.NESTMATE,\n+\t\t\t * if we cannot get its nest host, its hostclass (curClazz) shuold be used as nest host instead. \n+\t\t\t */\n+\t\t\tclazz->nestHost = curClazz;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyMzg1MA=="}, "originalCommit": {"oid": "f4ff501d9be74dd0c54e86247d495bde961f016a"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDI4MTQ5OnYy", "diffSide": "RIGHT", "path": "runtime/jcl/common/java_lang_Class.cpp", "isResolved": true, "comments": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODo0NjoxNVrOHOpsSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMToxNjo0NFrOHPanyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyNTE5Mg==", "bodyText": "Can this be moved into loadAndVerifyNestHost?  It's cleaner if that's the only code that sets nestHost.  A special case here makes it easy to overlook and harder to reason about nestmate code in general", "url": "https://github.com/eclipse-openj9/openj9/pull/10531#discussion_r485125192", "createdAt": "2020-09-08T18:46:15Z", "author": {"login": "DanHeidinga"}, "path": "runtime/jcl/common/java_lang_Class.cpp", "diffHunk": "@@ -1821,6 +1821,7 @@ Java_java_lang_Class_getNestHostImpl(JNIEnv *env, jobject recv)\n \t\t\t * not specify a nest, then it is considered to belong to its own nest and this is returned as\n \t\t\t * the host */\n \t\t\tnestHost = clazzToUse;\n+\t\t\tclazzToUse->nestHost = nestHost;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4ff501d9be74dd0c54e86247d495bde961f016a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE1MDQ0MA==", "bodyText": "So the existing code in loadAndVerifyNestHost() is already setting clazz->nestHost whenever J9_VISIBILITY_ALLOWED is returned. I cached nestHost to clazzToUse->nestHost here because I noticed one issue with existing nest mate implementation in LambdaNestedInnerTest.\nIf a class (could be a normal class, not necessarily a hidden class) has problem finding its nest host, i.e. loadAndVerifyNestHost() failed, this class is in its own nest. The test is doing something like assert(Clazz.getNestHost() ==  Clazz.getNestMembers()). Our existing code before this change has Clazz.getNestHost() == Clazz and Clazz.getNestMembers() == null, which makes the test fail.", "url": "https://github.com/eclipse-openj9/openj9/pull/10531#discussion_r485150440", "createdAt": "2020-09-08T19:34:30Z", "author": {"login": "hangshao0"}, "path": "runtime/jcl/common/java_lang_Class.cpp", "diffHunk": "@@ -1821,6 +1821,7 @@ Java_java_lang_Class_getNestHostImpl(JNIEnv *env, jobject recv)\n \t\t\t * not specify a nest, then it is considered to belong to its own nest and this is returned as\n \t\t\t * the host */\n \t\t\tnestHost = clazzToUse;\n+\t\t\tclazzToUse->nestHost = nestHost;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyNTE5Mg=="}, "originalCommit": {"oid": "f4ff501d9be74dd0c54e86247d495bde961f016a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2MTYzMg==", "bodyText": "That seems like a bug in our implementation of Java_java_lang_Class_getNestMembersImpl in that it returns null if the host isn't visible", "url": "https://github.com/eclipse-openj9/openj9/pull/10531#discussion_r485161632", "createdAt": "2020-09-08T19:56:17Z", "author": {"login": "DanHeidinga"}, "path": "runtime/jcl/common/java_lang_Class.cpp", "diffHunk": "@@ -1821,6 +1821,7 @@ Java_java_lang_Class_getNestHostImpl(JNIEnv *env, jobject recv)\n \t\t\t * not specify a nest, then it is considered to belong to its own nest and this is returned as\n \t\t\t * the host */\n \t\t\tnestHost = clazzToUse;\n+\t\t\tclazzToUse->nestHost = nestHost;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyNTE5Mg=="}, "originalCommit": {"oid": "f4ff501d9be74dd0c54e86247d495bde961f016a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2MzgyNw==", "bodyText": "That seems like a bug in our implementation of Java_java_lang_Class_getNestMembersImpl in that it returns null if the host isn't visible\n\nYes, I agree.", "url": "https://github.com/eclipse-openj9/openj9/pull/10531#discussion_r485163827", "createdAt": "2020-09-08T20:00:28Z", "author": {"login": "hangshao0"}, "path": "runtime/jcl/common/java_lang_Class.cpp", "diffHunk": "@@ -1821,6 +1821,7 @@ Java_java_lang_Class_getNestHostImpl(JNIEnv *env, jobject recv)\n \t\t\t * not specify a nest, then it is considered to belong to its own nest and this is returned as\n \t\t\t * the host */\n \t\t\tnestHost = clazzToUse;\n+\t\t\tclazzToUse->nestHost = nestHost;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyNTE5Mg=="}, "originalCommit": {"oid": "f4ff501d9be74dd0c54e86247d495bde961f016a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI4ODY1NQ==", "bodyText": "Are you removing this and making the change to Java_java_lang_Class_getNestMembersImpl?", "url": "https://github.com/eclipse-openj9/openj9/pull/10531#discussion_r485288655", "createdAt": "2020-09-09T01:45:33Z", "author": {"login": "DanHeidinga"}, "path": "runtime/jcl/common/java_lang_Class.cpp", "diffHunk": "@@ -1821,6 +1821,7 @@ Java_java_lang_Class_getNestHostImpl(JNIEnv *env, jobject recv)\n \t\t\t * not specify a nest, then it is considered to belong to its own nest and this is returned as\n \t\t\t * the host */\n \t\t\tnestHost = clazzToUse;\n+\t\t\tclazzToUse->nestHost = nestHost;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyNTE5Mg=="}, "originalCommit": {"oid": "f4ff501d9be74dd0c54e86247d495bde961f016a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU4MDIxMA==", "bodyText": "Would adding this case to Class#getNestMembers remove the need for this line?  It keeps the same behaviour in the natives and adds a small change in the java method\ndiff --git a/jcl/src/java.base/share/classes/java/lang/Class.java b/jcl/src/java.base/share/classes/java/lang/Class.java\nindex b13dfac0d6..0ad27fca06 100644\n--- a/jcl/src/java.base/share/classes/java/lang/Class.java\n+++ b/jcl/src/java.base/share/classes/java/lang/Class.java\n@@ -4758,6 +4758,10 @@ public Class<?>[] getNestMembers() throws LinkageError, SecurityException {\n        }\n \n        Class<?>[] members = getNestMembersImpl();\n+       if (members == null) {\n+               /* NestHost wasn't accessible - class is in a nest with itself */\n+               return new Class<?>[] { this };\n+       }\n        /* Skip security check for the Class object that belongs to the nest consisting only of itself */\n        if (members.length > 1) {\n                SecurityManager securityManager = System.getSecurityManager();", "url": "https://github.com/eclipse-openj9/openj9/pull/10531#discussion_r485580210", "createdAt": "2020-09-09T12:43:26Z", "author": {"login": "DanHeidinga"}, "path": "runtime/jcl/common/java_lang_Class.cpp", "diffHunk": "@@ -1821,6 +1821,7 @@ Java_java_lang_Class_getNestHostImpl(JNIEnv *env, jobject recv)\n \t\t\t * not specify a nest, then it is considered to belong to its own nest and this is returned as\n \t\t\t * the host */\n \t\t\tnestHost = clazzToUse;\n+\t\t\tclazzToUse->nestHost = nestHost;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyNTE5Mg=="}, "originalCommit": {"oid": "f4ff501d9be74dd0c54e86247d495bde961f016a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY4ODQ3OQ==", "bodyText": "May need to put the getNestMembersImpl() into a try catch block, I am getting NoClassDefFoundError if I made this change in Class.java when we cannot find the nesthost.", "url": "https://github.com/eclipse-openj9/openj9/pull/10531#discussion_r485688479", "createdAt": "2020-09-09T15:08:49Z", "author": {"login": "hangshao0"}, "path": "runtime/jcl/common/java_lang_Class.cpp", "diffHunk": "@@ -1821,6 +1821,7 @@ Java_java_lang_Class_getNestHostImpl(JNIEnv *env, jobject recv)\n \t\t\t * not specify a nest, then it is considered to belong to its own nest and this is returned as\n \t\t\t * the host */\n \t\t\tnestHost = clazzToUse;\n+\t\t\tclazzToUse->nestHost = nestHost;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyNTE5Mg=="}, "originalCommit": {"oid": "f4ff501d9be74dd0c54e86247d495bde961f016a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcwMTk4OA==", "bodyText": "As long as we match the RI and the specification, I'm OK with this approach", "url": "https://github.com/eclipse-openj9/openj9/pull/10531#discussion_r485701988", "createdAt": "2020-09-09T15:26:56Z", "author": {"login": "DanHeidinga"}, "path": "runtime/jcl/common/java_lang_Class.cpp", "diffHunk": "@@ -1821,6 +1821,7 @@ Java_java_lang_Class_getNestHostImpl(JNIEnv *env, jobject recv)\n \t\t\t * not specify a nest, then it is considered to belong to its own nest and this is returned as\n \t\t\t * the host */\n \t\t\tnestHost = clazzToUse;\n+\t\t\tclazzToUse->nestHost = nestHost;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyNTE5Mg=="}, "originalCommit": {"oid": "f4ff501d9be74dd0c54e86247d495bde961f016a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcwMjQxNA==", "bodyText": "We'll need to validate the behaviour on both JDK11 & JDK15 to ensure we're consistent with both releases", "url": "https://github.com/eclipse-openj9/openj9/pull/10531#discussion_r485702414", "createdAt": "2020-09-09T15:27:31Z", "author": {"login": "DanHeidinga"}, "path": "runtime/jcl/common/java_lang_Class.cpp", "diffHunk": "@@ -1821,6 +1821,7 @@ Java_java_lang_Class_getNestHostImpl(JNIEnv *env, jobject recv)\n \t\t\t * not specify a nest, then it is considered to belong to its own nest and this is returned as\n \t\t\t * the host */\n \t\t\tnestHost = clazzToUse;\n+\t\t\tclazzToUse->nestHost = nestHost;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyNTE5Mg=="}, "originalCommit": {"oid": "f4ff501d9be74dd0c54e86247d495bde961f016a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcxNDMzNA==", "bodyText": "Looking at the javadoc of Class.getNestMembers(), it says LinkageError (NoClassDefFoundError is a subclass of LinkageError) will be thrown if it has problem loading or validating a nest member or the nest host. So I think the try catch block is not the way to go.", "url": "https://github.com/eclipse-openj9/openj9/pull/10531#discussion_r485714334", "createdAt": "2020-09-09T15:43:57Z", "author": {"login": "hangshao0"}, "path": "runtime/jcl/common/java_lang_Class.cpp", "diffHunk": "@@ -1821,6 +1821,7 @@ Java_java_lang_Class_getNestHostImpl(JNIEnv *env, jobject recv)\n \t\t\t * not specify a nest, then it is considered to belong to its own nest and this is returned as\n \t\t\t * the host */\n \t\t\tnestHost = clazzToUse;\n+\t\t\tclazzToUse->nestHost = nestHost;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyNTE5Mg=="}, "originalCommit": {"oid": "f4ff501d9be74dd0c54e86247d495bde961f016a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTczNTMwMw==", "bodyText": "OK, tried removing the the code to cache nesthost to clazzToUse->nestHost, making change in the native Java_java_lang_Class_getNestMembersImpl. I still cannot get this test passed, it failed at a later place (on NoClassDefFoundError). So here is the thing:\nA hidden class is added to the nest of its host class, the host class cannot find its nest host.\nBoth hostClass.getNestHost() and hiddenClass().getNestHost() are called in the test, but the test does not expect the second call hiddenClass().getNestHost() to throw NoClassDefFoundError. I guess RI must cached the result of first call, so hiddenClass().getNestHost() directly return hostClass, it is like what I am doing in Java_java_lang_Class_getNestHostImpl() here.", "url": "https://github.com/eclipse-openj9/openj9/pull/10531#discussion_r485735303", "createdAt": "2020-09-09T16:10:38Z", "author": {"login": "hangshao0"}, "path": "runtime/jcl/common/java_lang_Class.cpp", "diffHunk": "@@ -1821,6 +1821,7 @@ Java_java_lang_Class_getNestHostImpl(JNIEnv *env, jobject recv)\n \t\t\t * not specify a nest, then it is considered to belong to its own nest and this is returned as\n \t\t\t * the host */\n \t\t\tnestHost = clazzToUse;\n+\t\t\tclazzToUse->nestHost = nestHost;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyNTE5Mg=="}, "originalCommit": {"oid": "f4ff501d9be74dd0c54e86247d495bde961f016a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc4MDk1Ng==", "bodyText": "What happens if the test calls hostClass.getNestHost() a second time?  By caching the result, I think you avoid the exception on the second call which isn't expected.", "url": "https://github.com/eclipse-openj9/openj9/pull/10531#discussion_r485780956", "createdAt": "2020-09-09T17:05:25Z", "author": {"login": "DanHeidinga"}, "path": "runtime/jcl/common/java_lang_Class.cpp", "diffHunk": "@@ -1821,6 +1821,7 @@ Java_java_lang_Class_getNestHostImpl(JNIEnv *env, jobject recv)\n \t\t\t * not specify a nest, then it is considered to belong to its own nest and this is returned as\n \t\t\t * the host */\n \t\t\tnestHost = clazzToUse;\n+\t\t\tclazzToUse->nestHost = nestHost;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyNTE5Mg=="}, "originalCommit": {"oid": "f4ff501d9be74dd0c54e86247d495bde961f016a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc4MTk3Mg==", "bodyText": "It also changes the behaviour of loadAndVerifyNestHost as it won't throw exceptions on subsequent calls.", "url": "https://github.com/eclipse-openj9/openj9/pull/10531#discussion_r485781972", "createdAt": "2020-09-09T17:07:14Z", "author": {"login": "DanHeidinga"}, "path": "runtime/jcl/common/java_lang_Class.cpp", "diffHunk": "@@ -1821,6 +1821,7 @@ Java_java_lang_Class_getNestHostImpl(JNIEnv *env, jobject recv)\n \t\t\t * not specify a nest, then it is considered to belong to its own nest and this is returned as\n \t\t\t * the host */\n \t\t\tnestHost = clazzToUse;\n+\t\t\tclazzToUse->nestHost = nestHost;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyNTE5Mg=="}, "originalCommit": {"oid": "f4ff501d9be74dd0c54e86247d495bde961f016a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgwNDMxNw==", "bodyText": "What happens if the test calls hostClass.getNestHost() a second time? By caching the result, I think you avoid the exception on the second call which isn't expected.\n\nIn Class.java, there is a field nestHost, so getNestHost() will call into getNestHostImpl only once for the same class. The second call will return the cached nestHost and won't throw exception.\nhttps://github.com/eclipse/openj9/blob/master/jcl/src/java.base/share/classes/java/lang/Class.java#L4696\n\nIt also changes the behaviour of loadAndVerifyNestHost as it won't throw exceptions on subsequent calls.\n\nYes, for the same class, it won't throw exception on subsequent calls, like Class.getNestHost(). I haven't find a way to not cache the nesthost and make the test pass.", "url": "https://github.com/eclipse-openj9/openj9/pull/10531#discussion_r485804317", "createdAt": "2020-09-09T17:46:02Z", "author": {"login": "hangshao0"}, "path": "runtime/jcl/common/java_lang_Class.cpp", "diffHunk": "@@ -1821,6 +1821,7 @@ Java_java_lang_Class_getNestHostImpl(JNIEnv *env, jobject recv)\n \t\t\t * not specify a nest, then it is considered to belong to its own nest and this is returned as\n \t\t\t * the host */\n \t\t\tnestHost = clazzToUse;\n+\t\t\tclazzToUse->nestHost = nestHost;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyNTE5Mg=="}, "originalCommit": {"oid": "f4ff501d9be74dd0c54e86247d495bde961f016a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgxODU1Mw==", "bodyText": "What does the RI do for the second call to hostClass.getNestHost() with the invalid nestHost?", "url": "https://github.com/eclipse-openj9/openj9/pull/10531#discussion_r485818553", "createdAt": "2020-09-09T18:11:53Z", "author": {"login": "DanHeidinga"}, "path": "runtime/jcl/common/java_lang_Class.cpp", "diffHunk": "@@ -1821,6 +1821,7 @@ Java_java_lang_Class_getNestHostImpl(JNIEnv *env, jobject recv)\n \t\t\t * not specify a nest, then it is considered to belong to its own nest and this is returned as\n \t\t\t * the host */\n \t\t\tnestHost = clazzToUse;\n+\t\t\tclazzToUse->nestHost = nestHost;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyNTE5Mg=="}, "originalCommit": {"oid": "f4ff501d9be74dd0c54e86247d495bde961f016a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0NDU4Mw==", "bodyText": "Interesting, I made 2 calls of hostClass.getNestHost(). I don't even see RI throw an exception on the first call, it directly returns hostclass itself. The second call has no exception either.", "url": "https://github.com/eclipse-openj9/openj9/pull/10531#discussion_r485844583", "createdAt": "2020-09-09T19:00:08Z", "author": {"login": "hangshao0"}, "path": "runtime/jcl/common/java_lang_Class.cpp", "diffHunk": "@@ -1821,6 +1821,7 @@ Java_java_lang_Class_getNestHostImpl(JNIEnv *env, jobject recv)\n \t\t\t * not specify a nest, then it is considered to belong to its own nest and this is returned as\n \t\t\t * the host */\n \t\t\tnestHost = clazzToUse;\n+\t\t\tclazzToUse->nestHost = nestHost;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyNTE5Mg=="}, "originalCommit": {"oid": "f4ff501d9be74dd0c54e86247d495bde961f016a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1MDEyOQ==", "bodyText": "OK, I've checked the javadoc of Class.getNestHost(), it only says SecurityException can be thrown, not matter it is first or second call.", "url": "https://github.com/eclipse-openj9/openj9/pull/10531#discussion_r485850129", "createdAt": "2020-09-09T19:10:26Z", "author": {"login": "hangshao0"}, "path": "runtime/jcl/common/java_lang_Class.cpp", "diffHunk": "@@ -1821,6 +1821,7 @@ Java_java_lang_Class_getNestHostImpl(JNIEnv *env, jobject recv)\n \t\t\t * not specify a nest, then it is considered to belong to its own nest and this is returned as\n \t\t\t * the host */\n \t\t\tnestHost = clazzToUse;\n+\t\t\tclazzToUse->nestHost = nestHost;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyNTE5Mg=="}, "originalCommit": {"oid": "f4ff501d9be74dd0c54e86247d495bde961f016a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1NTA0Ng==", "bodyText": "I wrote the following test case and I've tested it on both the RI and OpenJ9 using JDK14 (don't have a 15 build of the RI handy):\npublic class Out {\n\npublic static class In {\npublic static void main(String[] args) {\n\ttry {\n\t\tSystem.out.println(In.class.getNestHost());\n\t\tSystem.out.println(java.util.Arrays.toString(In.class.getNestMembers()));\n\t} catch (Throwable t) {\n\t\tt.printStackTrace();\n\t}\n\ttry {\n\t\tSystem.out.println(In.class.getNestHost());\n\t\tSystem.out.println(java.util.Arrays.toString(In.class.getNestMembers()));\n\t} catch (Throwable t) {\n\t\tt.printStackTrace();\n\t}\n}\n}\n}\nCompile it with: javac Out.java\nDelete Out.class: rm Out.class\nRun with java Out\\$In\nWith both VMs I get similar output:\n# java Out\\$In\nclass Out$In\njava.lang.NoClassDefFoundError: Unable to load nest-host class (Out) of Out$In\n\tat java.base/java.lang.Class.getNestMembers0(Native Method)\n\tat java.base/java.lang.Class.getNestMembers(Class.java:4146)\n\tat Out$In.main(Out.java:7)\nCaused by: java.lang.NoClassDefFoundError: Out\n\t... 3 more\nclass Out$In\njava.lang.NoClassDefFoundError: Unable to load nest-host class (Out) of Out$In\n\tat java.base/java.lang.Class.getNestMembers0(Native Method)\n\tat java.base/java.lang.Class.getNestMembers(Class.java:4146)\n\tat Out$In.main(Out.java:13)\nCaused by: java.lang.NoClassDefFoundError: Out\n\t... 3 more\n\nSo getNestHost() never throws for an invalid host but getNestMembers() does.  Is there behaviour different for the RI on JDK15?", "url": "https://github.com/eclipse-openj9/openj9/pull/10531#discussion_r485855046", "createdAt": "2020-09-09T19:19:43Z", "author": {"login": "DanHeidinga"}, "path": "runtime/jcl/common/java_lang_Class.cpp", "diffHunk": "@@ -1821,6 +1821,7 @@ Java_java_lang_Class_getNestHostImpl(JNIEnv *env, jobject recv)\n \t\t\t * not specify a nest, then it is considered to belong to its own nest and this is returned as\n \t\t\t * the host */\n \t\t\tnestHost = clazzToUse;\n+\t\t\tclazzToUse->nestHost = nestHost;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyNTE5Mg=="}, "originalCommit": {"oid": "f4ff501d9be74dd0c54e86247d495bde961f016a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg2NzYyMg==", "bodyText": "Yes, behaviour changed in JDK15. I run your test and get the same result on RI and openJ9 (with the change in this PR):\njava Out\\$In\nclass Out$In\n[class Out$In]\nclass Out$In\n[class Out$In]", "url": "https://github.com/eclipse-openj9/openj9/pull/10531#discussion_r485867622", "createdAt": "2020-09-09T19:37:42Z", "author": {"login": "hangshao0"}, "path": "runtime/jcl/common/java_lang_Class.cpp", "diffHunk": "@@ -1821,6 +1821,7 @@ Java_java_lang_Class_getNestHostImpl(JNIEnv *env, jobject recv)\n \t\t\t * not specify a nest, then it is considered to belong to its own nest and this is returned as\n \t\t\t * the host */\n \t\t\tnestHost = clazzToUse;\n+\t\t\tclazzToUse->nestHost = nestHost;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyNTE5Mg=="}, "originalCommit": {"oid": "f4ff501d9be74dd0c54e86247d495bde961f016a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg3MTEyNw==", "bodyText": "I guess I need to put this line clazzToUse->nestHost = nestHost; inside #if JAVA_SPEC_VERSION >= 15, so that all the change in the PR has effect only on JDK15 and up.", "url": "https://github.com/eclipse-openj9/openj9/pull/10531#discussion_r485871127", "createdAt": "2020-09-09T19:41:42Z", "author": {"login": "hangshao0"}, "path": "runtime/jcl/common/java_lang_Class.cpp", "diffHunk": "@@ -1821,6 +1821,7 @@ Java_java_lang_Class_getNestHostImpl(JNIEnv *env, jobject recv)\n \t\t\t * not specify a nest, then it is considered to belong to its own nest and this is returned as\n \t\t\t * the host */\n \t\t\tnestHost = clazzToUse;\n+\t\t\tclazzToUse->nestHost = nestHost;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyNTE5Mg=="}, "originalCommit": {"oid": "f4ff501d9be74dd0c54e86247d495bde961f016a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg3NjIzOA==", "bodyText": "Updated to put this line inside #if JAVA_SPEC_VERSION >= 15", "url": "https://github.com/eclipse-openj9/openj9/pull/10531#discussion_r485876238", "createdAt": "2020-09-09T19:47:43Z", "author": {"login": "hangshao0"}, "path": "runtime/jcl/common/java_lang_Class.cpp", "diffHunk": "@@ -1821,6 +1821,7 @@ Java_java_lang_Class_getNestHostImpl(JNIEnv *env, jobject recv)\n \t\t\t * not specify a nest, then it is considered to belong to its own nest and this is returned as\n \t\t\t * the host */\n \t\t\tnestHost = clazzToUse;\n+\t\t\tclazzToUse->nestHost = nestHost;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyNTE5Mg=="}, "originalCommit": {"oid": "f4ff501d9be74dd0c54e86247d495bde961f016a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg5MjM3OA==", "bodyText": "The behaviour is at least consistent for reflection if neither getNestHost or getNestMembers throws.  I would still prefer to see the write to clazz->nestHost happen in loadAndVerifyNestHost so that it's consistently handled in that code.  That's the single point that should be writing nestHost for runtime resolves (ie: apart from classes that start in their own nests)", "url": "https://github.com/eclipse-openj9/openj9/pull/10531#discussion_r485892378", "createdAt": "2020-09-09T20:08:04Z", "author": {"login": "DanHeidinga"}, "path": "runtime/jcl/common/java_lang_Class.cpp", "diffHunk": "@@ -1821,6 +1821,7 @@ Java_java_lang_Class_getNestHostImpl(JNIEnv *env, jobject recv)\n \t\t\t * not specify a nest, then it is considered to belong to its own nest and this is returned as\n \t\t\t * the host */\n \t\t\tnestHost = clazzToUse;\n+\t\t\tclazzToUse->nestHost = nestHost;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyNTE5Mg=="}, "originalCommit": {"oid": "f4ff501d9be74dd0c54e86247d495bde961f016a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkwNjcyNg==", "bodyText": "I checked the latest version of javadoc on Class.getNestMembers() in Java 15 from RI, they removed throwing LinkageError there. (Seems our javadoc needs to updated as well, I was checking our javadoc, which still says Class.getNestMembers() throws Linkage error). For java 15 and up, I changed the code to set clazz->nestHost to itself (host class for hidden class)  inside loadAndVerifyNestHost() if there is problem finding the nest host.", "url": "https://github.com/eclipse-openj9/openj9/pull/10531#discussion_r485906726", "createdAt": "2020-09-09T20:36:03Z", "author": {"login": "hangshao0"}, "path": "runtime/jcl/common/java_lang_Class.cpp", "diffHunk": "@@ -1821,6 +1821,7 @@ Java_java_lang_Class_getNestHostImpl(JNIEnv *env, jobject recv)\n \t\t\t * not specify a nest, then it is considered to belong to its own nest and this is returned as\n \t\t\t * the host */\n \t\t\tnestHost = clazzToUse;\n+\t\t\tclazzToUse->nestHost = nestHost;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyNTE5Mg=="}, "originalCommit": {"oid": "f4ff501d9be74dd0c54e86247d495bde961f016a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkyNjg1Ng==", "bodyText": "PR to update Javadoc: #10554", "url": "https://github.com/eclipse-openj9/openj9/pull/10531#discussion_r485926856", "createdAt": "2020-09-09T21:16:44Z", "author": {"login": "hangshao0"}, "path": "runtime/jcl/common/java_lang_Class.cpp", "diffHunk": "@@ -1821,6 +1821,7 @@ Java_java_lang_Class_getNestHostImpl(JNIEnv *env, jobject recv)\n \t\t\t * not specify a nest, then it is considered to belong to its own nest and this is returned as\n \t\t\t * the host */\n \t\t\tnestHost = clazzToUse;\n+\t\t\tclazzToUse->nestHost = nestHost;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyNTE5Mg=="}, "originalCommit": {"oid": "f4ff501d9be74dd0c54e86247d495bde961f016a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDU2ODg2OnYy", "diffSide": "RIGHT", "path": "runtime/vm/visible.c", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMDoxMTo1NVrOHOsZbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMDozODo1M1rOHOtNRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2OTUxNw==", "bodyText": "Can you move this if earlier to before the while loop?  It makes it clearer this code only applies to hidden classes.", "url": "https://github.com/eclipse-openj9/openj9/pull/10531#discussion_r485169517", "createdAt": "2020-09-08T20:11:55Z", "author": {"login": "DanHeidinga"}, "path": "runtime/vm/visible.c", "diffHunk": "@@ -296,6 +296,18 @@ loadAndVerifyNestHost(J9VMThread *vmThread, J9Class *clazz, UDATA options)\n \t\t\tnestHostName = J9ROMCLASS_NESTHOSTNAME(curClazz->romClass);\n \t\t}\n \n+\t\tif (hiddenNestMate) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4ff501d9be74dd0c54e86247d495bde961f016a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE3OTUzNQ==", "bodyText": "Done.", "url": "https://github.com/eclipse-openj9/openj9/pull/10531#discussion_r485179535", "createdAt": "2020-09-08T20:32:14Z", "author": {"login": "hangshao0"}, "path": "runtime/vm/visible.c", "diffHunk": "@@ -296,6 +296,18 @@ loadAndVerifyNestHost(J9VMThread *vmThread, J9Class *clazz, UDATA options)\n \t\t\tnestHostName = J9ROMCLASS_NESTHOSTNAME(curClazz->romClass);\n \t\t}\n \n+\t\tif (hiddenNestMate) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2OTUxNw=="}, "originalCommit": {"oid": "f4ff501d9be74dd0c54e86247d495bde961f016a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE4Mjc5MA==", "bodyText": "Also moved variable isCurClassHiddenNestMate inside to the if block.", "url": "https://github.com/eclipse-openj9/openj9/pull/10531#discussion_r485182790", "createdAt": "2020-09-08T20:38:53Z", "author": {"login": "hangshao0"}, "path": "runtime/vm/visible.c", "diffHunk": "@@ -296,6 +296,18 @@ loadAndVerifyNestHost(J9VMThread *vmThread, J9Class *clazz, UDATA options)\n \t\t\tnestHostName = J9ROMCLASS_NESTHOSTNAME(curClazz->romClass);\n \t\t}\n \n+\t\tif (hiddenNestMate) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2OTUxNw=="}, "originalCommit": {"oid": "f4ff501d9be74dd0c54e86247d495bde961f016a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTI4MjkxOnYy", "diffSide": "RIGHT", "path": "runtime/vm/visible.c", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMDozMzoyMFrOHPZTSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMDo0NjoyMVrOHPZtPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkwNTIyNA==", "bodyText": "Please add a comment here to reference the JVMS change that OKs this behaviour.  We want to explain that the exception is not rethrown if the nestHost is not accessible, it just means the class becomes it's own host.\nSee the Access Control section of the JDK15 JVMS:\n\nOtherwise,MhasaNestHostattribute,anditshost_class_indexitemisused as an index into the run-time constant pool of M. The symbolic reference at that index is resolved (\u00a75.4.3.1).\nIf resolution of the symbolic reference fails, then M is its own nest host. Any exception thrown as a result of failure of class or interface resolution is not rethrown.\n\nhttp://cr.openjdk.java.net/~iris/se/15/latestSpec/java-se-15-jvms-fr-diffs.pdf", "url": "https://github.com/eclipse-openj9/openj9/pull/10531#discussion_r485905224", "createdAt": "2020-09-09T20:33:20Z", "author": {"login": "DanHeidinga"}, "path": "runtime/vm/visible.c", "diffHunk": "@@ -343,6 +355,11 @@ loadAndVerifyNestHost(J9VMThread *vmThread, J9Class *clazz, UDATA options)\n \t\t/* If a problem occurred in nest host verification then the nest host value is invalid */\n \t\tif (J9_VISIBILITY_ALLOWED == result) {\n \t\t\tclazz->nestHost = nestHost;\n+\t\t} else if (J2SE_VERSION(vmThread->javaVM) >= J2SE_V15) {\n+\t\t\tclazz->nestHost = curClazz;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afd9b663745c11f0a719d9abfaa99494276a578a"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkxMTg3MA==", "bodyText": "Comment added.", "url": "https://github.com/eclipse-openj9/openj9/pull/10531#discussion_r485911870", "createdAt": "2020-09-09T20:46:21Z", "author": {"login": "hangshao0"}, "path": "runtime/vm/visible.c", "diffHunk": "@@ -343,6 +355,11 @@ loadAndVerifyNestHost(J9VMThread *vmThread, J9Class *clazz, UDATA options)\n \t\t/* If a problem occurred in nest host verification then the nest host value is invalid */\n \t\tif (J9_VISIBILITY_ALLOWED == result) {\n \t\t\tclazz->nestHost = nestHost;\n+\t\t} else if (J2SE_VERSION(vmThread->javaVM) >= J2SE_V15) {\n+\t\t\tclazz->nestHost = curClazz;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkwNTIyNA=="}, "originalCommit": {"oid": "afd9b663745c11f0a719d9abfaa99494276a578a"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MDE3MTkyOnYy", "diffSide": "RIGHT", "path": "runtime/vm/visible.c", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMzoyMTozN1rOHPhetg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNDo1MDoyOVrOHP35qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjAzOTIyMg==", "bodyText": "Can you paraphrase this rather than directly including the JVMS quote here?", "url": "https://github.com/eclipse-openj9/openj9/pull/10531#discussion_r486039222", "createdAt": "2020-09-10T03:21:37Z", "author": {"login": "DanHeidinga"}, "path": "runtime/vm/visible.c", "diffHunk": "@@ -343,6 +355,17 @@ loadAndVerifyNestHost(J9VMThread *vmThread, J9Class *clazz, UDATA options)\n \t\t/* If a problem occurred in nest host verification then the nest host value is invalid */\n \t\tif (J9_VISIBILITY_ALLOWED == result) {\n \t\t\tclazz->nestHost = nestHost;\n+\t\t} else if (J2SE_VERSION(vmThread->javaVM) >= J2SE_V15) {\n+\t\t\t/** \n+\t\t\t * JVM spec updated in Java 15:\n+\t\t\t * M has a NestHost attribute, and its host_class_index item is used as an index into the run-time constant pool of M. The symbolic reference at that \n+\t\t\t * index is resolved (\ufffd5.4.3.1). If resolution of the symbolic reference fails, then M is its own nest host. Any exception thrown as a result of failure \n+\t\t\t * of class or interface resolution is not rethrown.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a4468ad2513c7e3e1d7b8910483f34bc0a15a8f"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQwNjU2OQ==", "bodyText": "Fixed.", "url": "https://github.com/eclipse-openj9/openj9/pull/10531#discussion_r486406569", "createdAt": "2020-09-10T14:50:29Z", "author": {"login": "hangshao0"}, "path": "runtime/vm/visible.c", "diffHunk": "@@ -343,6 +355,17 @@ loadAndVerifyNestHost(J9VMThread *vmThread, J9Class *clazz, UDATA options)\n \t\t/* If a problem occurred in nest host verification then the nest host value is invalid */\n \t\tif (J9_VISIBILITY_ALLOWED == result) {\n \t\t\tclazz->nestHost = nestHost;\n+\t\t} else if (J2SE_VERSION(vmThread->javaVM) >= J2SE_V15) {\n+\t\t\t/** \n+\t\t\t * JVM spec updated in Java 15:\n+\t\t\t * M has a NestHost attribute, and its host_class_index item is used as an index into the run-time constant pool of M. The symbolic reference at that \n+\t\t\t * index is resolved (\ufffd5.4.3.1). If resolution of the symbolic reference fails, then M is its own nest host. Any exception thrown as a result of failure \n+\t\t\t * of class or interface resolution is not rethrown.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjAzOTIyMg=="}, "originalCommit": {"oid": "8a4468ad2513c7e3e1d7b8910483f34bc0a15a8f"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4574, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}