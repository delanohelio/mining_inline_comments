{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2MzgyNTkx", "number": 11118, "title": "Recognize and transform redundant calls in MH.invokeExact MethodHandle chain", "bodyText": "This changeset includes the following:\n\nrecognize java/lang/invoke/Invokers methods that require handling in RecognizedCallTransformer\nTransform Invokers.checkExactType to a ZEROCHK\nEliminate Invokers.checkCustomized calls when MethodHandle is a known object\n\nIssue: #10618", "createdAt": "2020-11-05T22:41:19Z", "url": "https://github.com/eclipse-openj9/openj9/pull/11118", "merged": true, "mergeCommit": {"oid": "d40ffe602658f1d1ac738cda3660f5c1573a3021"}, "closed": true, "closedAt": "2021-04-23T23:29:27Z", "author": {"login": "nbhuiyan"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdbOtoPAFqTUyNzQ5ODU0MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABeQEQ5PgFqTY0MzcxOTAzMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NDk4NTQx", "url": "https://github.com/eclipse-openj9/openj9/pull/11118#pullrequestreview-527498541", "createdAt": "2020-11-10T18:38:56Z", "commit": {"oid": "69c3a733378f560d3d49ccca1133a6ed94c1b23a"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODozODo1NlrOHwqJhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxOTo0MToyOVrOHwsz-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc4NDI2Mg==", "bodyText": "class25 should be added to recognizedClasses[] at the right entry, then you don't need to recognize the method here", "url": "https://github.com/eclipse-openj9/openj9/pull/11118#discussion_r520784262", "createdAt": "2020-11-10T18:38:56Z", "author": {"login": "liqunl"}, "path": "runtime/compiler/env/j9method.cpp", "diffHunk": "@@ -4613,6 +4621,13 @@ void TR_ResolvedJ9Method::construct()\n             setRecognizedMethodInfo(TR::java_util_concurrent_ConcurrentHashMap_all);\n          else if ((classNameLen == 16) && !strncmp(className, \"java/util/Vector\", 16))\n             setRecognizedMethodInfo(TR::java_util_Vector_all);\n+         else if ((classNameLen == 25) && !strncmp(className, \"java/lang/invoke/Invokers\", 25))\n+            {\n+            if (!strncmp(name, \"checkCustomized\", 15))\n+               setRecognizedMethodInfo(TR::java_lang_invoke_Invokers_checkCustomized);\n+            else if (!strncmp(name, \"checkExactType\", 14))\n+               setRecognizedMethodInfo(TR::java_lang_invoke_Invokers_checkExactType);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69c3a733378f560d3d49ccca1133a6ed94c1b23a"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgxNTEyMQ==", "bodyText": "It's better to use getArgument. The child index may not match argument index for some methods", "url": "https://github.com/eclipse-openj9/openj9/pull/11118#discussion_r520815121", "createdAt": "2020-11-10T19:19:25Z", "author": {"login": "liqunl"}, "path": "runtime/compiler/optimizer/J9RecognizedCallTransformer.cpp", "diffHunk": "@@ -116,6 +116,80 @@ void J9::RecognizedCallTransformer::process_java_lang_StrictMath_and_Math_sqrt(T\n \n    TR::TransformUtil::removeTree(comp(), treetop);\n    }\n+\n+#if defined(J9VM_OPT_OPENJDK_METHODHANDLE)\n+/*\n+Transforms calls to java/lang/invoke/Invokers.checkExactType to the more performant ZEROCHK.\n+\n+Blocks before transformation: ==>\n+\n+start Block_A\n+...\n+treetop\n+        call  java/lang/invoke/Invokers.checkExactType(Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)\n+           ==>aload\n+           ==>aload\n+...\n+end Block_A\n+\n+Blocks after transformation: ==>\n+\n+start Block_A\n+...\n+treetop\n+        ZEROCHK\n+          acmpeq\n+             ==>aload <expected type>\n+             aloadi <MethodHandle.type>\n+               ==>aload <MethodHandle>\n+...\n+end Block_A\n+\n+*/\n+void J9::RecognizedCallTransformer::process_java_lang_invoke_Invokers_checkExactType(TR::TreeTop* treetop, TR::Node* node)\n+   {\n+   TR::Node * methodHandleNode = node->getChild(0);\n+   TR::Node * expectedTypeNode = node->getChild(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69c3a733378f560d3d49ccca1133a6ed94c1b23a"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgyNTkzMg==", "bodyText": "Nodes created after ilgen should have originating bytecode node. Use the node create API that takes a node as the first argument to create the node.", "url": "https://github.com/eclipse-openj9/openj9/pull/11118#discussion_r520825932", "createdAt": "2020-11-10T19:38:03Z", "author": {"login": "liqunl"}, "path": "runtime/compiler/optimizer/J9RecognizedCallTransformer.cpp", "diffHunk": "@@ -116,6 +116,80 @@ void J9::RecognizedCallTransformer::process_java_lang_StrictMath_and_Math_sqrt(T\n \n    TR::TransformUtil::removeTree(comp(), treetop);\n    }\n+\n+#if defined(J9VM_OPT_OPENJDK_METHODHANDLE)\n+/*\n+Transforms calls to java/lang/invoke/Invokers.checkExactType to the more performant ZEROCHK.\n+\n+Blocks before transformation: ==>\n+\n+start Block_A\n+...\n+treetop\n+        call  java/lang/invoke/Invokers.checkExactType(Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)\n+           ==>aload\n+           ==>aload\n+...\n+end Block_A\n+\n+Blocks after transformation: ==>\n+\n+start Block_A\n+...\n+treetop\n+        ZEROCHK\n+          acmpeq\n+             ==>aload <expected type>\n+             aloadi <MethodHandle.type>\n+               ==>aload <MethodHandle>\n+...\n+end Block_A\n+\n+*/\n+void J9::RecognizedCallTransformer::process_java_lang_invoke_Invokers_checkExactType(TR::TreeTop* treetop, TR::Node* node)\n+   {\n+   TR::Node * methodHandleNode = node->getChild(0);\n+   TR::Node * expectedTypeNode = node->getChild(1);\n+   TR_J9VMBase* fej9 = static_cast<TR_J9VMBase*>(comp()->fe());\n+   uint32_t typeOffset = fej9->getInstanceFieldOffsetIncludingHeader(\"Ljava/lang/invoke/MethodHandle;\", \"type\", \"Ljava/lang/invoke/MethodType;\", comp()->getCurrentMethod());\n+   TR::SymbolReference *typeSymRef = comp()->getSymRefTab()->findOrFabricateShadowSymbol(comp()->getMethodSymbol(),\n+                                                                                         TR::Symbol::Java_lang_invoke_MethodHandle_type,\n+                                                                                         TR::Address,\n+                                                                                         typeOffset,\n+                                                                                         false,\n+                                                                                         false,\n+                                                                                         true,\n+                                                                                         \"java/lang/invoke/MethodHandle.type Ljava/lang/invoke/MethodType;\");\n+   TR::Node *handleTypeNode = TR::Node::createWithSymRef(comp()->il.opCodeForIndirectLoad(TR::Address), 1, 1, methodHandleNode, typeSymRef);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69c3a733378f560d3d49ccca1133a6ed94c1b23a"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgyNjUwMQ==", "bodyText": "The zerochk node should have MethodTypeCheck symref on it", "url": "https://github.com/eclipse-openj9/openj9/pull/11118#discussion_r520826501", "createdAt": "2020-11-10T19:39:04Z", "author": {"login": "liqunl"}, "path": "runtime/compiler/optimizer/J9RecognizedCallTransformer.cpp", "diffHunk": "@@ -116,6 +116,80 @@ void J9::RecognizedCallTransformer::process_java_lang_StrictMath_and_Math_sqrt(T\n \n    TR::TransformUtil::removeTree(comp(), treetop);\n    }\n+\n+#if defined(J9VM_OPT_OPENJDK_METHODHANDLE)\n+/*\n+Transforms calls to java/lang/invoke/Invokers.checkExactType to the more performant ZEROCHK.\n+\n+Blocks before transformation: ==>\n+\n+start Block_A\n+...\n+treetop\n+        call  java/lang/invoke/Invokers.checkExactType(Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)\n+           ==>aload\n+           ==>aload\n+...\n+end Block_A\n+\n+Blocks after transformation: ==>\n+\n+start Block_A\n+...\n+treetop\n+        ZEROCHK\n+          acmpeq\n+             ==>aload <expected type>\n+             aloadi <MethodHandle.type>\n+               ==>aload <MethodHandle>\n+...\n+end Block_A\n+\n+*/\n+void J9::RecognizedCallTransformer::process_java_lang_invoke_Invokers_checkExactType(TR::TreeTop* treetop, TR::Node* node)\n+   {\n+   TR::Node * methodHandleNode = node->getChild(0);\n+   TR::Node * expectedTypeNode = node->getChild(1);\n+   TR_J9VMBase* fej9 = static_cast<TR_J9VMBase*>(comp()->fe());\n+   uint32_t typeOffset = fej9->getInstanceFieldOffsetIncludingHeader(\"Ljava/lang/invoke/MethodHandle;\", \"type\", \"Ljava/lang/invoke/MethodType;\", comp()->getCurrentMethod());\n+   TR::SymbolReference *typeSymRef = comp()->getSymRefTab()->findOrFabricateShadowSymbol(comp()->getMethodSymbol(),\n+                                                                                         TR::Symbol::Java_lang_invoke_MethodHandle_type,\n+                                                                                         TR::Address,\n+                                                                                         typeOffset,\n+                                                                                         false,\n+                                                                                         false,\n+                                                                                         true,\n+                                                                                         \"java/lang/invoke/MethodHandle.type Ljava/lang/invoke/MethodType;\");\n+   TR::Node *handleTypeNode = TR::Node::createWithSymRef(comp()->il.opCodeForIndirectLoad(TR::Address), 1, 1, methodHandleNode, typeSymRef);\n+   TR::Node *cmpEqNode = TR::Node::create(TR::acmpeq, 2, expectedTypeNode, handleTypeNode);\n+   prepareToReplaceNode(node);\n+   TR::Node::recreate(node, TR::ZEROCHK);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69c3a733378f560d3d49ccca1133a6ed94c1b23a"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgyNzg5Ng==", "bodyText": "During inlining, the node may not have known object index. The known object info can come from inlined stack. Check if we're during inlining, and check the prex arg from the inline stack\nTR_PrexArgInfo *argInfo = comp->getCurrentInlinedCallArgInfo();\n   TR_PrexArgument *arg = argInfo->get(0);\n   if (arg && arg->getKnownObjectIndex() != TR::KnownObjectTable::UNKNOWN)\n      {", "url": "https://github.com/eclipse-openj9/openj9/pull/11118#discussion_r520827896", "createdAt": "2020-11-10T19:41:29Z", "author": {"login": "liqunl"}, "path": "runtime/compiler/optimizer/J9RecognizedCallTransformer.cpp", "diffHunk": "@@ -386,6 +460,12 @@ bool J9::RecognizedCallTransformer::isInlineable(TR::TreeTop* treetop)\n       case TR::java_lang_StrictMath_sqrt:\n       case TR::java_lang_Math_sqrt:\n          return comp()->target().cpu.getSupportsHardwareSQRT();\n+#if defined(J9VM_OPT_OPENJDK_METHODHANDLE)\n+      case TR::java_lang_invoke_Invokers_checkExactType:\n+         return true;\n+      case TR::java_lang_invoke_Invokers_checkCustomized:\n+         return node->getChild(0)->getSymbolReference()->hasKnownObjectIndex();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69c3a733378f560d3d49ccca1133a6ed94c1b23a"}, "originalPosition": 89}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "69c3a733378f560d3d49ccca1133a6ed94c1b23a", "author": {"user": {"login": "nbhuiyan", "name": "Nazim Bhuiyan"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/69c3a733378f560d3d49ccca1133a6ed94c1b23a", "committedDate": "2020-11-04T01:27:54Z", "message": "Add recognized call transformation for Invokers.checkCustomized\n\nThis call can be eliminated when the argument MethodHandle is a\nknown object.\n\nSigned-off-by: Nazim Bhuiyan <nubhuiyan@ibm.com>"}, "afterCommit": {"oid": "0c513f28852eebd3f8e5b04aec590c8299afe768", "author": {"user": {"login": "nbhuiyan", "name": "Nazim Bhuiyan"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/0c513f28852eebd3f8e5b04aec590c8299afe768", "committedDate": "2020-11-13T20:02:51Z", "message": "Add recognized call transformation for Invokers.checkCustomized\n\nThis call can be eliminated when the argument MethodHandle is a\nknown object.\n\nSigned-off-by: Nazim Bhuiyan <nubhuiyan@ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0c513f28852eebd3f8e5b04aec590c8299afe768", "author": {"user": {"login": "nbhuiyan", "name": "Nazim Bhuiyan"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/0c513f28852eebd3f8e5b04aec590c8299afe768", "committedDate": "2020-11-13T20:02:51Z", "message": "Add recognized call transformation for Invokers.checkCustomized\n\nThis call can be eliminated when the argument MethodHandle is a\nknown object.\n\nSigned-off-by: Nazim Bhuiyan <nubhuiyan@ibm.com>"}, "afterCommit": {"oid": "3eeca8ad45100cb739f0bc052193c719a3b09b14", "author": {"user": {"login": "nbhuiyan", "name": "Nazim Bhuiyan"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/3eeca8ad45100cb739f0bc052193c719a3b09b14", "committedDate": "2020-12-09T17:54:56Z", "message": "Add recognized call transformation for Invokers.checkCustomized\n\nThis call can be eliminated when the argument MethodHandle is a\nknown object.\n\nSigned-off-by: Nazim Bhuiyan <nubhuiyan@ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3eeca8ad45100cb739f0bc052193c719a3b09b14", "author": {"user": {"login": "nbhuiyan", "name": "Nazim Bhuiyan"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/3eeca8ad45100cb739f0bc052193c719a3b09b14", "committedDate": "2020-12-09T17:54:56Z", "message": "Add recognized call transformation for Invokers.checkCustomized\n\nThis call can be eliminated when the argument MethodHandle is a\nknown object.\n\nSigned-off-by: Nazim Bhuiyan <nubhuiyan@ibm.com>"}, "afterCommit": {"oid": "e2548f20ee3e647c0b387f626de61c06ee6ea842", "author": {"user": {"login": "nbhuiyan", "name": "Nazim Bhuiyan"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/e2548f20ee3e647c0b387f626de61c06ee6ea842", "committedDate": "2021-04-07T22:15:47Z", "message": "Transform misc. redundant checks in invokeExact MH chain\n\nThe following calls will be recognized and transformed as part\nof the MethodHandleTransformer opt:\n* Invokers.checkExactType\n* Invokers.checkCustomized\n\nSigned-off-by: Nazim Bhuiyan <nubhuiyan@ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjMyNzc0ODQz", "url": "https://github.com/eclipse-openj9/openj9/pull/11118#pullrequestreview-632774843", "createdAt": "2021-04-09T20:47:18Z", "commit": {"oid": "e2548f20ee3e647c0b387f626de61c06ee6ea842"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0wOVQyMDo0NzoxOFrOJGmKuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0wOVQyMTo0Mjo0MFrOJGniAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMDg5NjU2OA==", "bodyText": "treetops are traversed in a loop, removing the tree now may cause problem later. You can transform the call node to a passthrough with OMR::TransformUtil::transformCallNodeToPassThrough", "url": "https://github.com/eclipse-openj9/openj9/pull/11118#discussion_r610896568", "createdAt": "2021-04-09T20:47:18Z", "author": {"login": "liqunl"}, "path": "runtime/compiler/optimizer/MethodHandleTransformer.cpp", "diffHunk": "@@ -602,3 +608,87 @@ TR_MethodHandleTransformer::process_java_lang_invoke_MethodHandle_linkTo(TR::Tre\n                                                                                tt);\n       }\n    }\n+\n+/*\n+Transforms calls to java/lang/invoke/Invokers.checkExactType to the more performant ZEROCHK.\n+\n+Blocks before transformation: ==>\n+\n+start Block_A\n+...\n+treetop\n+        call  java/lang/invoke/Invokers.checkExactType(Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)\n+           ==>aload\n+           ==>aload\n+...\n+end Block_A\n+\n+Blocks after transformation: ==>\n+\n+start Block_A\n+...\n+treetop\n+        ZEROCHK\n+          acmpeq\n+             ==>aload <expected type>\n+             aloadi <MethodHandle.type>\n+               ==>aload <MethodHandle>\n+...\n+end Block_A\n+\n+*/\n+void\n+TR_MethodHandleTransformer::process_java_lang_invoke_Invokers_checkExactType(TR::TreeTop* tt, TR::Node* node)\n+   {\n+   if (!performTransformation(comp(), \"%sChanging checkExactType call node n%dn to ZEROCHK\\n\", optDetailString(), node->getGlobalIndex()))\n+      return;\n+   TR::Node * methodHandleNode = node->getArgument(0);\n+   TR::Node * expectedTypeNode = node->getArgument(1);\n+   TR_J9VMBase* fej9 = static_cast<TR_J9VMBase*>(comp()->fe());\n+   uint32_t typeOffset = fej9->getInstanceFieldOffsetIncludingHeader(\"Ljava/lang/invoke/MethodHandle;\", \"type\", \"Ljava/lang/invoke/MethodType;\", comp()->getCurrentMethod());\n+   TR::SymbolReference *typeSymRef = comp()->getSymRefTab()->findOrFabricateShadowSymbol(comp()->getMethodSymbol(),\n+                                                                                         TR::Symbol::Java_lang_invoke_MethodHandle_type,\n+                                                                                         TR::Address,\n+                                                                                         typeOffset,\n+                                                                                         false,\n+                                                                                         false,\n+                                                                                         true,\n+                                                                                         \"java/lang/invoke/MethodHandle.type Ljava/lang/invoke/MethodType;\");\n+   TR::Node *handleTypeNode = TR::Node::createWithSymRef(node, comp()->il.opCodeForIndirectLoad(TR::Address), 1, methodHandleNode, typeSymRef);\n+   TR::Node *cmpEqNode = TR::Node::create(node, TR::acmpeq, 2, expectedTypeNode, handleTypeNode);\n+   prepareToReplaceNode(node);\n+   TR::Node::recreate(node, TR::ZEROCHK);\n+   node->setSymbolReference(comp()->getSymRefTab()->findOrCreateMethodTypeCheckSymbolRef(comp()->getMethodSymbol()));\n+   node->setNumChildren(1);\n+   node->setAndIncChild(0, cmpEqNode);\n+   }\n+\n+/*\n+java/lang/invoke/Invokers.checkCustomized is redundant if its argument is a known object. This transformation\n+eliminates calls to java/lang/invoke/Invokers.checkCustomized.\n+\n+Blocks before transformation: ==>\n+\n+start Block_A\n+...\n+treetop\n+        call  java/lang/invoke/Invokers.checkCustomized(Ljava/lang/invoke/MethodHandle;)V\n+          aload  <MethodHandle>\n+...\n+end Block_A\n+\n+Blocks after transformation: ==> treetop eliminated\n+\n+*/\n+void\n+TR_MethodHandleTransformer::process_java_lang_invoke_Invokers_checkCustomized(TR::TreeTop* tt, TR::Node* node)\n+   {\n+   TR::KnownObjectTable::Index objIndex = getObjectInfoOfNode(node->getFirstArgument());\n+   auto knot = comp()->getKnownObjectTable();\n+   if (isKnownObject(objIndex) && knot && !knot->isNull(objIndex))\n+      {\n+      if (!performTransformation(comp(), \"%sRemoving checkCustomized call node n%dn as it is now redundant as MethodHandle has known object index\\n\", optDetailString(), node->getGlobalIndex()))\n+         return;\n+      TR::TransformUtil::removeTree(comp(), tt);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2548f20ee3e647c0b387f626de61c06ee6ea842"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMDkxODkxMw==", "bodyText": "If the two arguments are known object, we can do the check at compile time and remove the call if the types match", "url": "https://github.com/eclipse-openj9/openj9/pull/11118#discussion_r610918913", "createdAt": "2021-04-09T21:42:40Z", "author": {"login": "liqunl"}, "path": "runtime/compiler/optimizer/MethodHandleTransformer.cpp", "diffHunk": "@@ -602,3 +608,87 @@ TR_MethodHandleTransformer::process_java_lang_invoke_MethodHandle_linkTo(TR::Tre\n                                                                                tt);\n       }\n    }\n+\n+/*\n+Transforms calls to java/lang/invoke/Invokers.checkExactType to the more performant ZEROCHK.\n+\n+Blocks before transformation: ==>\n+\n+start Block_A\n+...\n+treetop\n+        call  java/lang/invoke/Invokers.checkExactType(Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)\n+           ==>aload\n+           ==>aload\n+...\n+end Block_A\n+\n+Blocks after transformation: ==>\n+\n+start Block_A\n+...\n+treetop\n+        ZEROCHK\n+          acmpeq\n+             ==>aload <expected type>\n+             aloadi <MethodHandle.type>\n+               ==>aload <MethodHandle>\n+...\n+end Block_A\n+\n+*/\n+void\n+TR_MethodHandleTransformer::process_java_lang_invoke_Invokers_checkExactType(TR::TreeTop* tt, TR::Node* node)\n+   {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2548f20ee3e647c0b387f626de61c06ee6ea842"}, "originalPosition": 48}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b76f7265df7b6beef49564dfd334d9588af1d39", "author": {"user": {"login": "nbhuiyan", "name": "Nazim Bhuiyan"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/9b76f7265df7b6beef49564dfd334d9588af1d39", "committedDate": "2021-04-22T16:53:08Z", "message": "Recognize java/lang/invoke/Invokers methods\n\nInvokers contain some methods that are called to verify program correctness\nfrom MethodHandle adapter methods and LamdaForm methods. Recognizing these\nmethods are required if we want to transform these calls when they are\nnot necessary.\n\nSigned-off-by: Nazim Bhuiyan <nubhuiyan@ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e2548f20ee3e647c0b387f626de61c06ee6ea842", "author": {"user": {"login": "nbhuiyan", "name": "Nazim Bhuiyan"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/e2548f20ee3e647c0b387f626de61c06ee6ea842", "committedDate": "2021-04-07T22:15:47Z", "message": "Transform misc. redundant checks in invokeExact MH chain\n\nThe following calls will be recognized and transformed as part\nof the MethodHandleTransformer opt:\n* Invokers.checkExactType\n* Invokers.checkCustomized\n\nSigned-off-by: Nazim Bhuiyan <nubhuiyan@ibm.com>"}, "afterCommit": {"oid": "7aff3ec564219cbd32c36f19ad7e6230531500be", "author": {"user": {"login": "nbhuiyan", "name": "Nazim Bhuiyan"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/7aff3ec564219cbd32c36f19ad7e6230531500be", "committedDate": "2021-04-22T16:53:08Z", "message": "Transform misc. redundant checks in invokeExact MH chain\n\nThe following calls will be recognized and transformed as part\nof the MethodHandleTransformer opt:\n* Invokers.checkExactType\n* Invokers.checkCustomized\n\nSigned-off-by: Nazim Bhuiyan <nubhuiyan@ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQzMzU2NzIx", "url": "https://github.com/eclipse-openj9/openj9/pull/11118#pullrequestreview-643356721", "createdAt": "2021-04-23T14:26:10Z", "commit": {"oid": "7aff3ec564219cbd32c36f19ad7e6230531500be"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yM1QxNDoyNjoxMFrOJOk1lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yM1QxNDoyNjoxMFrOJOk1lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTI2MzM4MQ==", "bodyText": "type is a private field", "url": "https://github.com/eclipse-openj9/openj9/pull/11118#discussion_r619263381", "createdAt": "2021-04-23T14:26:10Z", "author": {"login": "liqunl"}, "path": "runtime/compiler/optimizer/MethodHandleTransformer.cpp", "diffHunk": "@@ -602,3 +609,123 @@ TR_MethodHandleTransformer::process_java_lang_invoke_MethodHandle_linkTo(TR::Tre\n                                                                                tt);\n       }\n    }\n+\n+/*\n+Transforms calls to java/lang/invoke/Invokers.checkExactType to the more performant ZEROCHK.\n+\n+Blocks before transformation: ==>\n+\n+start Block_A\n+...\n+treetop\n+        call  java/lang/invoke/Invokers.checkExactType(Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)\n+           ==>aload\n+           ==>aload\n+...\n+end Block_A\n+\n+Blocks after transformation: ==>\n+\n+If MethodHandle and expected type are known objects at compile time and match: ==>\n+\n+start Block_A\n+...\n+treetop\n+        PassThrough\n+          aload <MethodHandle>\n+...\n+end Block_A\n+\n+else: ==>\n+\n+start Block_A\n+...\n+treetop\n+        ZEROCHK\n+          acmpeq\n+             ==>aload <expected type>\n+             aloadi <MethodHandle.type>\n+               ==>aload <MethodHandle>\n+...\n+end Block_A\n+\n+*/\n+void\n+TR_MethodHandleTransformer::process_java_lang_invoke_Invokers_checkExactType(TR::TreeTop* tt, TR::Node* node)\n+   {\n+   auto methodHandleNode = node->getArgument(0);\n+   auto expectedTypeNode = node->getArgument(1);\n+   TR_J9VMBase* fej9 = static_cast<TR_J9VMBase*>(comp()->fe());\n+\n+   TR::KnownObjectTable::Index mhIndex = getObjectInfoOfNode(methodHandleNode);\n+   TR::KnownObjectTable::Index expectedTypeIndex = getObjectInfoOfNode(expectedTypeNode);\n+   auto knot = comp()->getKnownObjectTable();\n+   if (knot && isKnownObject(mhIndex) && isKnownObject(expectedTypeIndex))\n+      {\n+      TR::VMAccessCriticalSection vmAccess(fej9);\n+      uintptr_t mhObject = knot->getPointer(mhIndex);\n+      uintptr_t mtObject = fej9->getReferenceField(mhObject, \"type\", \"Ljava/lang/invoke/MethodType;\");\n+      uintptr_t etObject = knot->getPointer(expectedTypeIndex);\n+\n+      if (etObject == mtObject && performTransformation(comp(), \"%sChanging checkExactType call node n%dn to PassThrough\\n\", optDetailString(), node->getGlobalIndex()))\n+         {\n+         TR::TransformUtil::transformCallNodeToPassThrough(this, node, tt, node->getFirstArgument());\n+         return;\n+         }\n+      }\n+   if (!performTransformation(comp(), \"%sChanging checkExactType call node n%dn to ZEROCHK\\n\", optDetailString(), node->getGlobalIndex()))\n+      return;\n+   uint32_t typeOffset = fej9->getInstanceFieldOffsetIncludingHeader(\"Ljava/lang/invoke/MethodHandle;\", \"type\", \"Ljava/lang/invoke/MethodType;\", comp()->getCurrentMethod());\n+   auto typeSymRef = comp()->getSymRefTab()->findOrFabricateShadowSymbol(comp()->getMethodSymbol(),\n+                                                                                         TR::Symbol::Java_lang_invoke_MethodHandle_type,\n+                                                                                         TR::Address,\n+                                                                                         typeOffset,\n+                                                                                         false,\n+                                                                                         false,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aff3ec564219cbd32c36f19ad7e6230531500be"}, "originalPosition": 97}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48a447a0584de480df561b12a7b56a065fb3690a", "author": {"user": {"login": "nbhuiyan", "name": "Nazim Bhuiyan"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/48a447a0584de480df561b12a7b56a065fb3690a", "committedDate": "2021-04-23T14:50:52Z", "message": "Transform misc. redundant checks in invokeExact MH chain\n\nThe following calls will be recognized and transformed as part\nof the MethodHandleTransformer opt:\n* Invokers.checkExactType\n* Invokers.checkCustomized\n\nSigned-off-by: Nazim Bhuiyan <nubhuiyan@ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7aff3ec564219cbd32c36f19ad7e6230531500be", "author": {"user": {"login": "nbhuiyan", "name": "Nazim Bhuiyan"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/7aff3ec564219cbd32c36f19ad7e6230531500be", "committedDate": "2021-04-22T16:53:08Z", "message": "Transform misc. redundant checks in invokeExact MH chain\n\nThe following calls will be recognized and transformed as part\nof the MethodHandleTransformer opt:\n* Invokers.checkExactType\n* Invokers.checkCustomized\n\nSigned-off-by: Nazim Bhuiyan <nubhuiyan@ibm.com>"}, "afterCommit": {"oid": "48a447a0584de480df561b12a7b56a065fb3690a", "author": {"user": {"login": "nbhuiyan", "name": "Nazim Bhuiyan"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/48a447a0584de480df561b12a7b56a065fb3690a", "committedDate": "2021-04-23T14:50:52Z", "message": "Transform misc. redundant checks in invokeExact MH chain\n\nThe following calls will be recognized and transformed as part\nof the MethodHandleTransformer opt:\n* Invokers.checkExactType\n* Invokers.checkCustomized\n\nSigned-off-by: Nazim Bhuiyan <nubhuiyan@ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQzNDU5NDQ4", "url": "https://github.com/eclipse-openj9/openj9/pull/11118#pullrequestreview-643459448", "createdAt": "2021-04-23T16:11:52Z", "commit": {"oid": "48a447a0584de480df561b12a7b56a065fb3690a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQzNzE5MDMy", "url": "https://github.com/eclipse-openj9/openj9/pull/11118#pullrequestreview-643719032", "createdAt": "2021-04-23T23:29:15Z", "commit": {"oid": "7aff3ec564219cbd32c36f19ad7e6230531500be"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 112, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}