{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwNzIxMjY1", "number": 11182, "title": "JDK16 VarHandle Support", "bodyText": "abstract MethodType accessModeTypeUncached(...)\naccessModeTypeUncached accepts an AccessType instance instead of an\nAccessMode instance as an input argument.\n\n\nfinal MethodType accessModeTypeUncached(int index)\ndirects a call to\nabstract MethodType accessModeTypeUncached(...)\n\n\npublic abstract VarHandle withInvokeExactBehavior()\nand its implementation in concrete classes that extend the abstract\nVarHandle.\n\n\npublic abstract VarHandle withInvokeBehavior()\nand its implementation in concrete classes that extend the abstract\nVarHandle.\n\n\npublic boolean hasInvokeExactBehavior()\nreturns true if the VarHandle has invokeExact behaviour. Otherwise, it\nreturns false.\n\n\nVarHandle.AIOOBE_SUPPLIER's second argument changes from List<Integer>\nto List<Number> in JDK16.\n\n\nAdd stubs for the ScopedMemoryAccess native methods.\n\n\nFixes: #11149\nSigned-off-by: Babneet Singh sbabneet@ca.ibm.com", "createdAt": "2020-11-13T17:29:16Z", "url": "https://github.com/eclipse-openj9/openj9/pull/11182", "merged": true, "mergeCommit": {"oid": "3f38e9bba78716c32f8013313f02950143b3acf4"}, "closed": true, "closedAt": "2020-11-23T14:23:37Z", "author": {"login": "babsingh"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdcKrG3gBqjM5OTQ1NDE5Nzg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdePzO9ABqjQwMTkwNzY1MjY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dc041cd876a7f17568980d8f99802b3049cb8518", "author": {"user": {"login": "babsingh", "name": "Babneet Singh"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/dc041cd876a7f17568980d8f99802b3049cb8518", "committedDate": "2020-11-13T17:28:04Z", "message": "JDK16 VarHandle Support\n\n1. abstract MethodType accessModeTypeUncached(...)\naccessModeTypeUncached accepts an AccessType instance instead of an\nAccessMode instance as an input argument.\n\n2. final MethodType accessModeTypeUncached(int index)\ndirects a call to\nabstract MethodType accessModeTypeUncached(...)\n\n3. public abstract VarHandle withInvokeExactBehavior()\nand its implementation in concrete classes that extend the abstract\nVarHandle.\n\n4. public abstract VarHandle withInvokeBehavior()\nand its implementation in concrete classes that extend the abstract\nVarHandle.\n\n5. public boolean hasInvokeExactBehavior()\nreturns true if the VarHandle has invokeExact behaviour. Otherwise, it\nreturns false.\n\nfixes: https://github.com/eclipse/openj9/issues/11149\n\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>"}, "afterCommit": {"oid": "ce31783860936f9ccac65a816023b032fe2d21ee", "author": {"user": {"login": "babsingh", "name": "Babneet Singh"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/ce31783860936f9ccac65a816023b032fe2d21ee", "committedDate": "2020-11-13T17:33:02Z", "message": "JDK16 VarHandle Support\n\n1. abstract MethodType accessModeTypeUncached(...)\naccessModeTypeUncached accepts an AccessType instance instead of an\nAccessMode instance as an input argument.\n\n2. final MethodType accessModeTypeUncached(int index)\ndirects a call to\nabstract MethodType accessModeTypeUncached(...)\n\n3. public abstract VarHandle withInvokeExactBehavior()\nand its implementation in concrete classes that extend the abstract\nVarHandle.\n\n4. public abstract VarHandle withInvokeBehavior()\nand its implementation in concrete classes that extend the abstract\nVarHandle.\n\n5. public boolean hasInvokeExactBehavior()\nreturns true if the VarHandle has invokeExact behaviour. Otherwise, it\nreturns false.\n\nFixes: https://github.com/eclipse/openj9/issues/11149\n\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwNDU2OTk2", "url": "https://github.com/eclipse-openj9/openj9/pull/11182#pullrequestreview-530456996", "createdAt": "2020-11-13T22:27:07Z", "commit": {"oid": "ce31783860936f9ccac65a816023b032fe2d21ee"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMjoyNzowN1rOHzBm8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMjoyNzowN1rOHzBm8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI2NTc3OQ==", "bodyText": "Is this need for 14+ or just 16+?", "url": "https://github.com/eclipse-openj9/openj9/pull/11182#discussion_r523265779", "createdAt": "2020-11-13T22:27:07Z", "author": {"login": "tajila"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/VarHandle.java", "diffHunk": "@@ -343,6 +343,7 @@ MethodType accessModeType(Class<?> receiver, Class<?> type, Class<?>... args) {\n /*[IF Java14]*/\n \tstatic final BiFunction<String, List<Integer>, ArrayIndexOutOfBoundsException> AIOOBE_SUPPLIER = null;\n \tVarForm vform = null;\n+\tfinal boolean exact;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce31783860936f9ccac65a816023b032fe2d21ee"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwNDU4NTMz", "url": "https://github.com/eclipse-openj9/openj9/pull/11182#pullrequestreview-530458533", "createdAt": "2020-11-13T22:30:58Z", "commit": {"oid": "ce31783860936f9ccac65a816023b032fe2d21ee"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMjozMDo1OVrOHzBr5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMjozMDo1OVrOHzBr5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI2NzA0NQ==", "bodyText": "Java 14 is out of service, I would suggest use Java15 instead. The block containing final boolean exact; can be decorated with /*[IF Java15]*/ as well and combined with the immediate following /*[IF Java15]*/ block.", "url": "https://github.com/eclipse-openj9/openj9/pull/11182#discussion_r523267045", "createdAt": "2020-11-13T22:30:59Z", "author": {"login": "JasonFengJ9"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/VarHandle.java", "diffHunk": "@@ -371,6 +372,9 @@ MethodType accessModeType(Class<?> receiver, Class<?> type, Class<?>... args) {\n \t\tthis.coordinateTypes = coordinateTypes;\n \t\tthis.handleTable = handleTable;\n \t\tthis.modifiers = modifiers;\n+/*[IF Java14]*/\n+\t\tthis.exact = false;\n+/*[ENDIF] Java14 */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce31783860936f9ccac65a816023b032fe2d21ee"}, "originalPosition": 14}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ce31783860936f9ccac65a816023b032fe2d21ee", "author": {"user": {"login": "babsingh", "name": "Babneet Singh"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/ce31783860936f9ccac65a816023b032fe2d21ee", "committedDate": "2020-11-13T17:33:02Z", "message": "JDK16 VarHandle Support\n\n1. abstract MethodType accessModeTypeUncached(...)\naccessModeTypeUncached accepts an AccessType instance instead of an\nAccessMode instance as an input argument.\n\n2. final MethodType accessModeTypeUncached(int index)\ndirects a call to\nabstract MethodType accessModeTypeUncached(...)\n\n3. public abstract VarHandle withInvokeExactBehavior()\nand its implementation in concrete classes that extend the abstract\nVarHandle.\n\n4. public abstract VarHandle withInvokeBehavior()\nand its implementation in concrete classes that extend the abstract\nVarHandle.\n\n5. public boolean hasInvokeExactBehavior()\nreturns true if the VarHandle has invokeExact behaviour. Otherwise, it\nreturns false.\n\nFixes: https://github.com/eclipse/openj9/issues/11149\n\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>"}, "afterCommit": {"oid": "1e5b8db03c2a929aafa99e9dc374f2f6b0db8414", "author": {"user": {"login": "babsingh", "name": "Babneet Singh"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/1e5b8db03c2a929aafa99e9dc374f2f6b0db8414", "committedDate": "2020-11-14T00:27:17Z", "message": "JDK16 VarHandle Support\n\n1. abstract MethodType accessModeTypeUncached(...)\naccessModeTypeUncached accepts an AccessType instance instead of an\nAccessMode instance as an input argument.\n\n2. final MethodType accessModeTypeUncached(int index)\ndirects a call to\nabstract MethodType accessModeTypeUncached(...)\n\n3. public abstract VarHandle withInvokeExactBehavior()\nand its implementation in concrete classes that extend the abstract\nVarHandle.\n\n4. public abstract VarHandle withInvokeBehavior()\nand its implementation in concrete classes that extend the abstract\nVarHandle.\n\n5. public boolean hasInvokeExactBehavior()\nreturns true if the VarHandle has invokeExact behaviour. Otherwise, it\nreturns false.\n\nFixes: https://github.com/eclipse/openj9/issues/11149\n\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1e5b8db03c2a929aafa99e9dc374f2f6b0db8414", "author": {"user": {"login": "babsingh", "name": "Babneet Singh"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/1e5b8db03c2a929aafa99e9dc374f2f6b0db8414", "committedDate": "2020-11-14T00:27:17Z", "message": "JDK16 VarHandle Support\n\n1. abstract MethodType accessModeTypeUncached(...)\naccessModeTypeUncached accepts an AccessType instance instead of an\nAccessMode instance as an input argument.\n\n2. final MethodType accessModeTypeUncached(int index)\ndirects a call to\nabstract MethodType accessModeTypeUncached(...)\n\n3. public abstract VarHandle withInvokeExactBehavior()\nand its implementation in concrete classes that extend the abstract\nVarHandle.\n\n4. public abstract VarHandle withInvokeBehavior()\nand its implementation in concrete classes that extend the abstract\nVarHandle.\n\n5. public boolean hasInvokeExactBehavior()\nreturns true if the VarHandle has invokeExact behaviour. Otherwise, it\nreturns false.\n\nFixes: https://github.com/eclipse/openj9/issues/11149\n\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>"}, "afterCommit": {"oid": "fc25ede2598036746db00090f5a8013ad6769d59", "author": {"user": {"login": "babsingh", "name": "Babneet Singh"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/fc25ede2598036746db00090f5a8013ad6769d59", "committedDate": "2020-11-14T00:30:42Z", "message": "JDK16 VarHandle Support\n\n1. abstract MethodType accessModeTypeUncached(...)\naccessModeTypeUncached accepts an AccessType instance instead of an\nAccessMode instance as an input argument.\n\n2. final MethodType accessModeTypeUncached(int index)\ndirects a call to\nabstract MethodType accessModeTypeUncached(...)\n\n3. public abstract VarHandle withInvokeExactBehavior()\nand its implementation in concrete classes that extend the abstract\nVarHandle.\n\n4. public abstract VarHandle withInvokeBehavior()\nand its implementation in concrete classes that extend the abstract\nVarHandle.\n\n5. public boolean hasInvokeExactBehavior()\nreturns true if the VarHandle has invokeExact behaviour. Otherwise, it\nreturns false.\n\nFixes: https://github.com/eclipse/openj9/issues/11149\n\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwODQxMjMy", "url": "https://github.com/eclipse-openj9/openj9/pull/11182#pullrequestreview-530841232", "createdAt": "2020-11-15T22:17:06Z", "commit": {"oid": "fc25ede2598036746db00090f5a8013ad6769d59"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQyMjoxNzowNlrOHzjjiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQyMjoxNzo1MFrOHzjj3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzgyMTk2Mw==", "bodyText": "The method name isn't changed, just the argument type which can be JPP decorated instead.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /*[ENDIF] Java16 */\n          \n          \n            \n            \tpublic MethodType accessModeTypeUncached(\n          \n          \n            \n            /*[IF Java16]*/\n          \n          \n            \n                       AccessType type\n          \n          \n            \n            /*[ELSE]*/\n          \n          \n            \n            \t   AccessMode accessMode\n          \n          \n            \n            /*[ENDIF] Java16 */\n          \n          \n            \n            \t) {\n          \n          \n            \n            \t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n          \n          \n            \n            \t}\n          \n      \n    \n    \n  \n\nCan this be moved into java.lang.invoke.VarHandle to avoid duplicate code within FieldVarHandle and ViewVarHandle?", "url": "https://github.com/eclipse-openj9/openj9/pull/11182#discussion_r523821963", "createdAt": "2020-11-15T22:17:06Z", "author": {"login": "JasonFengJ9"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/ArrayVarHandle.java", "diffHunk": "@@ -119,9 +119,25 @@\n \t}\n /*[ENDIF] Java12 */\n \n+/*[IF Java16]*/\n+\tpublic MethodType accessModeTypeUncached(AccessType type) {\n+\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n+\t}\n+/*[ELSE]*/\n \tpublic MethodType accessModeTypeUncached(AccessMode accessMode) {\n \t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n \t}\n+/*[ENDIF] Java16 */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc25ede2598036746db00090f5a8013ad6769d59"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzgyMjAxOQ==", "bodyText": "Similarly can this code block be moved into java.lang.invoke.VarHandle as well?", "url": "https://github.com/eclipse-openj9/openj9/pull/11182#discussion_r523822019", "createdAt": "2020-11-15T22:17:34Z", "author": {"login": "JasonFengJ9"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/ArrayVarHandle.java", "diffHunk": "@@ -119,9 +119,25 @@\n \t}\n /*[ENDIF] Java12 */\n \n+/*[IF Java16]*/\n+\tpublic MethodType accessModeTypeUncached(AccessType type) {\n+\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n+\t}\n+/*[ELSE]*/\n \tpublic MethodType accessModeTypeUncached(AccessMode accessMode) {\n \t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n \t}\n+/*[ENDIF] Java16 */\n+\n+/*[IF Java16]*/\n+\tpublic VarHandle withInvokeExactBehavior() {\n+\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n+\t}\n+\n+\tpublic VarHandle withInvokeBehavior() {\n+\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n+\t}\n+/*[ENDIF] Java16 */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc25ede2598036746db00090f5a8013ad6769d59"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzgyMjA0Nw==", "bodyText": "Considering the difference is the argument, I would suggest\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /*[ENDIF] Java16 */\n          \n          \n            \n            Class<?> receiverActual = accessModeTypeUncached(\n          \n          \n            \n            /*[IF Java16]*/\n          \n          \n            \n              AccessMode.GET.at\n          \n          \n            \n            /*[ELSE]*/\n          \n          \n            \n            AccessMode.GET\n          \n          \n            \n            /*[ENDIF] Java16 */\n          \n          \n            \n            ).parameterType(0);", "url": "https://github.com/eclipse-openj9/openj9/pull/11182#discussion_r523822047", "createdAt": "2020-11-15T22:17:50Z", "author": {"login": "JasonFengJ9"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/VarHandle.java", "diffHunk": "@@ -394,7 +414,11 @@ MethodType accessModeType(Class<?> receiver, Class<?> type, Class<?>... args) {\n \t\t\tint numAccessModes = accessModes.length;\n \t\n \t\t\t/* The first argument in AccessType.GET MethodType is the receiver class. */\n+/*[IF Java16]*/\n+\t\t\tClass<?> receiverActual = accessModeTypeUncached(AccessMode.GET.at).parameterType(0);\n+/*[ELSE]*/\n \t\t\tClass<?> receiverActual = accessModeTypeUncached(AccessMode.GET).parameterType(0);\n+/*[ENDIF] Java16 */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc25ede2598036746db00090f5a8013ad6769d59"}, "originalPosition": 51}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cefd33707a72933ffadfbd3ed73d9f232c1947b3", "author": {"user": {"login": "babsingh", "name": "Babneet Singh"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/cefd33707a72933ffadfbd3ed73d9f232c1947b3", "committedDate": "2020-11-16T15:09:04Z", "message": "Jason Feng's Feedback for #11182\n\nhttps://github.com/eclipse/openj9/pull/11182\n\n- Convert VarHandle abstract methods into concrete methods in order to\navoid duplication in classes that extend the abstract VarHandle class.\n\n- Use preprocessor flags to target only the impacted code.\n\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>"}, "afterCommit": {"oid": "59999e84614b7f2c56bf740b56a227b54b6b120f", "author": {"user": {"login": "babsingh", "name": "Babneet Singh"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/59999e84614b7f2c56bf740b56a227b54b6b120f", "committedDate": "2020-11-16T15:27:33Z", "message": "Jason Feng's Feedback for #11182\n\nhttps://github.com/eclipse/openj9/pull/11182\n\n- Convert VarHandle abstract methods into concrete methods in order to\navoid duplication in classes that extend the abstract VarHandle class.\n\n- Use the preprocessor flags to target only the impacted code.\n\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "59999e84614b7f2c56bf740b56a227b54b6b120f", "author": {"user": {"login": "babsingh", "name": "Babneet Singh"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/59999e84614b7f2c56bf740b56a227b54b6b120f", "committedDate": "2020-11-16T15:27:33Z", "message": "Jason Feng's Feedback for #11182\n\nhttps://github.com/eclipse/openj9/pull/11182\n\n- Convert VarHandle abstract methods into concrete methods in order to\navoid duplication in classes that extend the abstract VarHandle class.\n\n- Use the preprocessor flags to target only the impacted code.\n\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>"}, "afterCommit": {"oid": "6b98cfcde476c5257c615fc418d42ecf34f02269", "author": {"user": {"login": "babsingh", "name": "Babneet Singh"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/6b98cfcde476c5257c615fc418d42ecf34f02269", "committedDate": "2020-11-16T15:29:47Z", "message": "Jason Feng's Feedback for #11182\n\n1. Convert VarHandle abstract methods into concrete methods in order to\navoid duplication in classes that extend the abstract VarHandle class.\n\n2. Use the preprocessor flags to target only the impacted code.\n\nRelated: https://github.com/eclipse/openj9/pull/11182\n\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxNTI4Njg3", "url": "https://github.com/eclipse-openj9/openj9/pull/11182#pullrequestreview-531528687", "createdAt": "2020-11-16T17:08:54Z", "commit": {"oid": "6b98cfcde476c5257c615fc418d42ecf34f02269"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxNTQ2NjAy", "url": "https://github.com/eclipse-openj9/openj9/pull/11182#pullrequestreview-531546602", "createdAt": "2020-11-16T17:28:58Z", "commit": {"oid": "6b98cfcde476c5257c615fc418d42ecf34f02269"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNzoyOTowMFrOH0JqCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNzoyOTowMFrOH0JqCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ0NjIxNw==", "bodyText": "This is changed from public to package access which might be problematic.", "url": "https://github.com/eclipse-openj9/openj9/pull/11182#discussion_r524446217", "createdAt": "2020-11-16T17:29:00Z", "author": {"login": "JasonFengJ9"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/ArrayVarHandle.java", "diffHunk": "@@ -119,10 +119,6 @@\n \t}\n /*[ENDIF] Java12 */\n \n-\tpublic MethodType accessModeTypeUncached(AccessMode accessMode) {\n-\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n-\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b98cfcde476c5257c615fc418d42ecf34f02269"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxNjA1MzMz", "url": "https://github.com/eclipse-openj9/openj9/pull/11182#pullrequestreview-531605333", "createdAt": "2020-11-16T18:44:39Z", "commit": {"oid": "6b98cfcde476c5257c615fc418d42ecf34f02269"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxODo0NDozOVrOH0MhxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxODo0NDozOVrOH0MhxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ5MzI1Mg==", "bodyText": "withInvokeExactBehavior & withInvokeBehavior are public API, they are abstract as per https://download.java.net/java/early_access/jdk16/docs/api/java.base/java/lang/invoke/VarHandle.html#withInvokeBehavior()", "url": "https://github.com/eclipse-openj9/openj9/pull/11182#discussion_r524493252", "createdAt": "2020-11-16T18:44:39Z", "author": {"login": "JasonFengJ9"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/VarHandle.java", "diffHunk": "@@ -1692,5 +1733,32 @@ MethodHandle getMethodHandle(int i) {\n \t}\n /*[ENDIF] Java15 | OPENJDK_METHODHANDLES */\n \n-\tabstract MethodType accessModeTypeUncached(AccessMode accessMode);\n+\tMethodType accessModeTypeUncached(\n+\t\t/*[IF Java16]*/\n+\t\tAccessType type\n+\t\t/*[ELSE]*/\n+\t\tAccessMode accessMode\n+\t\t/*[ENDIF] Java16 */\n+\t) {\n+\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n+\t}\n+\n+/*[IF Java16]*/\n+\tfinal MethodType accessModeTypeUncached(int index) {\n+\t\treturn accessModeTypeUncached(AccessType.values()[index]);\n+\t}\n+\n+\tpublic VarHandle withInvokeExactBehavior() {\n+\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n+\t}\n+\n+\tpublic VarHandle withInvokeBehavior() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b98cfcde476c5257c615fc418d42ecf34f02269"}, "originalPosition": 115}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzNzk4Mzgy", "url": "https://github.com/eclipse-openj9/openj9/pull/11182#pullrequestreview-533798382", "createdAt": "2020-11-18T19:22:48Z", "commit": {"oid": "6b98cfcde476c5257c615fc418d42ecf34f02269"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c48be07065985d6cef29d1b15dd3afc1d3a4a33", "author": {"user": {"login": "babsingh", "name": "Babneet Singh"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/6c48be07065985d6cef29d1b15dd3afc1d3a4a33", "committedDate": "2020-11-19T17:13:29Z", "message": "JDK16 VarHandle Support\n\n1. abstract MethodType accessModeTypeUncached(...)\naccessModeTypeUncached accepts an AccessType instance instead of an\nAccessMode instance as an input argument.\n\n2. final MethodType accessModeTypeUncached(int index)\ndirects a call to\nabstract MethodType accessModeTypeUncached(...)\n\n3. public abstract VarHandle withInvokeExactBehavior()\nand its implementation in concrete classes that extend the abstract\nVarHandle.\n\n4. public abstract VarHandle withInvokeBehavior()\nand its implementation in concrete classes that extend the abstract\nVarHandle.\n\n5. public boolean hasInvokeExactBehavior()\nreturns true if the VarHandle has invokeExact behaviour. Otherwise, it\nreturns false.\n\nFixes: https://github.com/eclipse/openj9/issues/11149\n\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "554fc798deccf712c92544b2885d651a7668fb3c", "author": {"user": {"login": "babsingh", "name": "Babneet Singh"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/554fc798deccf712c92544b2885d651a7668fb3c", "committedDate": "2020-11-19T17:13:29Z", "message": "Jason Feng's Feedback for #11182\n\n1. Convert VarHandle abstract methods into concrete methods in order to\navoid duplication in classes that extend the abstract VarHandle class.\n\n2. Use the preprocessor flags to target only the impacted code.\n\nRelated: https://github.com/eclipse/openj9/pull/11182\n\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6b98cfcde476c5257c615fc418d42ecf34f02269", "author": {"user": {"login": "babsingh", "name": "Babneet Singh"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/6b98cfcde476c5257c615fc418d42ecf34f02269", "committedDate": "2020-11-16T15:29:47Z", "message": "Jason Feng's Feedback for #11182\n\n1. Convert VarHandle abstract methods into concrete methods in order to\navoid duplication in classes that extend the abstract VarHandle class.\n\n2. Use the preprocessor flags to target only the impacted code.\n\nRelated: https://github.com/eclipse/openj9/pull/11182\n\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>"}, "afterCommit": {"oid": "b8081e5ec1a79a82e88342e6f77880af8e76bac5", "author": {"user": {"login": "babsingh", "name": "Babneet Singh"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/b8081e5ec1a79a82e88342e6f77880af8e76bac5", "committedDate": "2020-11-19T17:13:29Z", "message": "Add stubs for the ScopedMemoryAccess native methods [JDK16]\n\nNative methods:\n1. private static native void registerNatives();\n2. native boolean closeScope0(Scope scope, Scope.ScopedAccessError\nexception);\n\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91464a7e7969ee8991b3d165ba8afec54f004582", "author": {"user": {"login": "babsingh", "name": "Babneet Singh"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/91464a7e7969ee8991b3d165ba8afec54f004582", "committedDate": "2020-11-19T17:19:39Z", "message": "VarHandle.AIOOBE_SUPPLIER's second argument changes in JDK16\n\nVarHandle.AIOOBE_SUPPLIER's second argument changes from List<Integer>\nto List<Number> in JDK16.\n\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b8081e5ec1a79a82e88342e6f77880af8e76bac5", "author": {"user": {"login": "babsingh", "name": "Babneet Singh"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/b8081e5ec1a79a82e88342e6f77880af8e76bac5", "committedDate": "2020-11-19T17:13:29Z", "message": "Add stubs for the ScopedMemoryAccess native methods [JDK16]\n\nNative methods:\n1. private static native void registerNatives();\n2. native boolean closeScope0(Scope scope, Scope.ScopedAccessError\nexception);\n\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>"}, "afterCommit": {"oid": "1048de3cea75a7c89fee1cdce16d8555747991ef", "author": {"user": {"login": "babsingh", "name": "Babneet Singh"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/1048de3cea75a7c89fee1cdce16d8555747991ef", "committedDate": "2020-11-19T17:19:41Z", "message": "Add stubs for the ScopedMemoryAccess native methods [JDK16]\n\nNative methods:\n1. private static native void registerNatives();\n2. native boolean closeScope0(Scope scope, Scope.ScopedAccessError\nexception);\n\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1048de3cea75a7c89fee1cdce16d8555747991ef", "author": {"user": {"login": "babsingh", "name": "Babneet Singh"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/1048de3cea75a7c89fee1cdce16d8555747991ef", "committedDate": "2020-11-19T17:19:41Z", "message": "Add stubs for the ScopedMemoryAccess native methods [JDK16]\n\nNative methods:\n1. private static native void registerNatives();\n2. native boolean closeScope0(Scope scope, Scope.ScopedAccessError\nexception);\n\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>"}, "afterCommit": {"oid": "2d36ccbf31bdb7c40831a2f4dbf4d4485ee79f26", "author": {"user": {"login": "babsingh", "name": "Babneet Singh"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/2d36ccbf31bdb7c40831a2f4dbf4d4485ee79f26", "committedDate": "2020-11-19T17:27:57Z", "message": "Add stubs for the ScopedMemoryAccess native methods [JDK16]\n\nNative methods:\n1. private static native void registerNatives();\n2. native boolean closeScope0(Scope scope, Scope.ScopedAccessError\nexception);\n\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0NzI4MDE0", "url": "https://github.com/eclipse-openj9/openj9/pull/11182#pullrequestreview-534728014", "createdAt": "2020-11-19T18:21:52Z", "commit": {"oid": "2d36ccbf31bdb7c40831a2f4dbf4d4485ee79f26"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2d36ccbf31bdb7c40831a2f4dbf4d4485ee79f26", "author": {"user": {"login": "babsingh", "name": "Babneet Singh"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/2d36ccbf31bdb7c40831a2f4dbf4d4485ee79f26", "committedDate": "2020-11-19T17:27:57Z", "message": "Add stubs for the ScopedMemoryAccess native methods [JDK16]\n\nNative methods:\n1. private static native void registerNatives();\n2. native boolean closeScope0(Scope scope, Scope.ScopedAccessError\nexception);\n\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>"}, "afterCommit": {"oid": "0b815b2e9d0525eed994ff206f843f4ea3f28d51", "author": {"user": {"login": "babsingh", "name": "Babneet Singh"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/0b815b2e9d0525eed994ff206f843f4ea3f28d51", "committedDate": "2020-11-19T19:21:44Z", "message": "Add stubs for the ScopedMemoryAccess native methods [JDK16]\n\nNative methods:\n1. private static native void registerNatives();\n2. native boolean closeScope0(Scope scope, Scope.ScopedAccessError\nexception);\n\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0b815b2e9d0525eed994ff206f843f4ea3f28d51", "author": {"user": {"login": "babsingh", "name": "Babneet Singh"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/0b815b2e9d0525eed994ff206f843f4ea3f28d51", "committedDate": "2020-11-19T19:21:44Z", "message": "Add stubs for the ScopedMemoryAccess native methods [JDK16]\n\nNative methods:\n1. private static native void registerNatives();\n2. native boolean closeScope0(Scope scope, Scope.ScopedAccessError\nexception);\n\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>"}, "afterCommit": {"oid": "d453278e753c0b2e99a57b79183a656d60cb11f4", "author": {"user": {"login": "babsingh", "name": "Babneet Singh"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/d453278e753c0b2e99a57b79183a656d60cb11f4", "committedDate": "2020-11-19T19:33:14Z", "message": "Add stubs for the ScopedMemoryAccess native methods [JDK16]\n\nNative methods:\n1. private static native void registerNatives();\n2. native boolean closeScope0(Scope scope, Scope.ScopedAccessError\nexception);\n\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0ODk0ODM3", "url": "https://github.com/eclipse-openj9/openj9/pull/11182#pullrequestreview-534894837", "createdAt": "2020-11-19T22:05:53Z", "commit": {"oid": "d453278e753c0b2e99a57b79183a656d60cb11f4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMjowNTo1M1rOH2zyeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMjowNTo1M1rOH2zyeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIzMzY1Ng==", "bodyText": "Is this native actually invoked? assert(!\"Java_jdk_internal_misc_ScopedMemoryAccess_closeScope0 is unimplemented\") can indicate this is a stub, otherwise, an issue could be opened to track the actual implementation.", "url": "https://github.com/eclipse-openj9/openj9/pull/11182#discussion_r527233656", "createdAt": "2020-11-19T22:05:53Z", "author": {"login": "JasonFengJ9"}, "path": "runtime/jcl/common/jdk_internal_misc_ScopedMemoryAccess.cpp", "diffHunk": "@@ -0,0 +1,46 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+\n+#include \"jni.h\"\n+#include \"jcl.h\"\n+#include \"jclglob.h\"\n+#include \"jclprots.h\"\n+#include \"jcl_internal.h\"\n+\n+extern \"C\" {\n+\n+#if JAVA_SPEC_VERSION >= 16\n+void JNICALL\n+Java_jdk_internal_misc_ScopedMemoryAccess_registerNatives(JNIEnv *env, jclass clazz)\n+{\n+\t/* TODO: Add implementation. */\n+}\n+\n+jboolean JNICALL\n+Java_jdk_internal_misc_ScopedMemoryAccess_closeScope0(JNIEnv *env, jobject instance, jobject scope, jobject exception)\n+{\n+\t/* TODO: Add implementation. */\n+\treturn JNI_FALSE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d453278e753c0b2e99a57b79183a656d60cb11f4"}, "originalPosition": 42}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "afc71a5f8f3c9b71ee5ef40282d2e9043efc2a38", "author": {"user": {"login": "babsingh", "name": "Babneet Singh"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/afc71a5f8f3c9b71ee5ef40282d2e9043efc2a38", "committedDate": "2020-11-20T04:39:18Z", "message": "Add stubs for the ScopedMemoryAccess native methods [JDK16]\n\nNative methods:\n1. private static native void registerNatives();\n2. native boolean closeScope0(Scope scope, Scope.ScopedAccessError\nexception);\n\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d453278e753c0b2e99a57b79183a656d60cb11f4", "author": {"user": {"login": "babsingh", "name": "Babneet Singh"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/d453278e753c0b2e99a57b79183a656d60cb11f4", "committedDate": "2020-11-19T19:33:14Z", "message": "Add stubs for the ScopedMemoryAccess native methods [JDK16]\n\nNative methods:\n1. private static native void registerNatives();\n2. native boolean closeScope0(Scope scope, Scope.ScopedAccessError\nexception);\n\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>"}, "afterCommit": {"oid": "afc71a5f8f3c9b71ee5ef40282d2e9043efc2a38", "author": {"user": {"login": "babsingh", "name": "Babneet Singh"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/afc71a5f8f3c9b71ee5ef40282d2e9043efc2a38", "committedDate": "2020-11-20T04:39:18Z", "message": "Add stubs for the ScopedMemoryAccess native methods [JDK16]\n\nNative methods:\n1. private static native void registerNatives();\n2. native boolean closeScope0(Scope scope, Scope.ScopedAccessError\nexception);\n\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1569, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}