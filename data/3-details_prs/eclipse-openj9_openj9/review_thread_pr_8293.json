{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyMzU5ODU4", "number": 8293, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMDoyMjoyMlrODX-iTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNzowNzoxOVrODYk-LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDY4NDMwOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/control/JITClientCompilationThread.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMDoyMjoyMlrOFdkq6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMDoyMjoyMlrOFdkq6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU1MzgzMg==", "bodyText": "Maybe use a const reference here  (const std::vector<uintptrj_t> &listOfOffsets)", "url": "https://github.com/eclipse-openj9/openj9/pull/8293#discussion_r366553832", "createdAt": "2020-01-14T20:22:22Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/control/JITClientCompilationThread.cpp", "diffHunk": "@@ -2063,26 +2049,13 @@ handleServerMessage(JITServer::ClientStream *client, TR_J9VM *fe, JITServer::Mes\n          client->write(response, ptr);\n          }\n          break;\n-      case MessageType::runFEMacro_derefUintptrjPtr:\n-         {\n-         TR::VMAccessCriticalSection deref(fe);\n-         compInfoPT->updateLastLocalGCCounter();\n-         client->write(response, *std::get<0>(client->getRecvData<uintptrj_t*>()));\n-         }\n-         break;\n       case MessageType::runFEMacro_invokeILGenMacrosInvokeExactAndFixup:\n          {\n-         auto recv = client->getRecvData<uintptrj_t>();\n+         auto recv = client->getRecvData<uintptrj_t*, std::vector<uintptrj_t> >();\n          TR::VMAccessCriticalSection invokeILGenMacrosInvokeExactAndFixup(fe);\n-\n-         if (compInfoPT->getLastLocalGCCounter() != compInfoPT->getCompilationInfo()->getLocalGCCounter())\n-            {\n-            // GC happened, fail compilation\n-            auto comp = compInfoPT->getCompilation();\n-            comp->failCompilation<TR::CompilationInterrupted>(\"Compilation interrupted due to GC\");\n-            }\n-\n-         uintptrj_t methodHandle = std::get<0>(recv);\n+         uintptrj_t receiverHandle = *std::get<0>(recv);\n+         std::vector<uintptrj_t> listOfOffsets = std::get<1>(recv);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73d4106211bcd3f38c97678e8c59e21f3fdc13c9"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDczNDg1OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/env/j9method.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMDo0MTo0NlrOFdlKSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMDo0MTo0NlrOFdlKSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU2MTg2NQ==", "bodyText": "I would delete blah", "url": "https://github.com/eclipse-openj9/openj9/pull/8293#discussion_r366561865", "createdAt": "2020-01-14T20:41:46Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/env/j9method.cpp", "diffHunk": "@@ -9200,3 +9201,45 @@ TR_J9ByteCodeIlGenerator::walkReferenceChain(TR::Node *node, uintptrj_t receiver\n \n    return result;\n    }\n+\n+\n+#if defined(JITSERVER_SUPPORT)\n+void\n+TR_J9ByteCodeIlGenerator::packReferenceChainOffsets(TR::Node *node, std::vector<uintptrj_t>& listOfOffsets)\n+   {\n+   if (node->getOpCode().isLoadDirect() && node->getType() == TR::Address)\n+      {\n+      TR_ASSERT(node->getSymbolReference()->getCPIndex() == 0, \"walkReferenceChain expecting aload of 'this'; found aload of %s\", comp()->getDebug()->getName(node->getSymbolReference()));\n+      return;\n+      }\n+   else if (node->getOpCode().isLoadIndirect() && node->getType() == TR::Address)\n+      {\n+      TR::SymbolReference *symRef = node->getSymbolReference();\n+      if (symRef->isUnresolved())\n+         {\n+         if (comp()->getOption(TR_TraceILGen))\n+            traceMsg(comp(), \"  walkReferenceChain hit unresolved symref %s; aborting\\n\", symRef->getName(comp()->getDebug()));\n+         comp()->failCompilation<TR::ILGenFailure>(\"Symbol reference is unresolved\");\n+         }\n+      TR::Symbol *sym = symRef->getSymbol();\n+      TR_ASSERT(sym->isShadow() && symRef->getCPIndex() > 0, \"walkReferenceChain expecting field load; found load of %s\", comp()->getDebug()->getName(symRef));\n+      uintptrj_t fieldOffset = symRef->getOffset() - TR::Compiler->om.objectHeaderSizeInBytes(); // blah", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73d4106211bcd3f38c97678e8c59e21f3fdc13c9"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2ODEyNzg4OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/control/JITServerHelpers.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMDo0MDowM1rOFeFvgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMDo0MDowM1rOFeFvgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA5NTY4MQ==", "bodyText": "listOfOffsets should be be const because it is only read", "url": "https://github.com/eclipse-openj9/openj9/pull/8293#discussion_r367095681", "createdAt": "2020-01-15T20:40:03Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/control/JITServerHelpers.cpp", "diffHunk": "@@ -549,3 +550,16 @@ JITServerHelpers::isAddressInROMClass(const void *address, const J9ROMClass *rom\n    {\n    return ((address >= romClass) && (address < (((uint8_t*) romClass) + romClass->romSize)));\n    }\n+\n+\n+uintptrj_t\n+JITServerHelpers::walkReferenceChainWithOffsets(TR_J9VM * fe, std::vector<uintptrj_t>& listOfOffsets, uintptrj_t receiver)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bac4a756d16934bb44f0bb64d46953d98daeeca"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2ODgyNjI4OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/control/JITServerHelpers.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwMjo0MDozM1rOFeMfew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwMjo0MDozM1rOFeMfew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIwNjI2Nw==", "bodyText": "listOfOffsets could be marked const", "url": "https://github.com/eclipse-openj9/openj9/pull/8293#discussion_r367206267", "createdAt": "2020-01-16T02:40:33Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/control/JITServerHelpers.cpp", "diffHunk": "@@ -549,3 +550,16 @@ JITServerHelpers::isAddressInROMClass(const void *address, const J9ROMClass *rom\n    {\n    return ((address >= romClass) && (address < (((uint8_t*) romClass) + romClass->romSize)));\n    }\n+\n+\n+uintptrj_t\n+JITServerHelpers::walkReferenceChainWithOffsets(TR_J9VM * fe, std::vector<uintptrj_t>& listOfOffsets, uintptrj_t receiver)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73d4106211bcd3f38c97678e8c59e21f3fdc13c9"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2ODg2MDE1OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/env/j9method.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwMzowNzoxOVrOFeMz_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwMzowNzoxOVrOFeMz_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIxMTUxNw==", "bodyText": "Maybe use a const reference for the string extracted from the message", "url": "https://github.com/eclipse-openj9/openj9/pull/8293#discussion_r367211517", "createdAt": "2020-01-16T03:07:19Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/env/j9method.cpp", "diffHunk": "@@ -7789,11 +7790,13 @@ TR_J9ByteCodeIlGenerator::runFEMacro(TR::SymbolReference *symRef)\n #if defined(JITSERVER_SUPPORT)\n          if (comp()->isOutOfProcessCompilation())\n             {\n+            std::vector<uintptrj_t> listOfOffsets;\n+            if (!returnFromArchetype)\n+               {\n+               packReferenceChainOffsets(methodHandleExpression, listOfOffsets);\n+               }\n             auto stream = TR::CompilationInfo::getStream();\n-            stream->write(JITServer::MessageType::runFEMacro_derefUintptrjPtr, thunkDetails->getHandleRef());\n-            receiverHandle = std::get<0>(stream->read<uintptrj_t>());\n-            methodHandle = returnFromArchetype ? receiverHandle : walkReferenceChain(methodHandleExpression, receiverHandle);\n-            stream->write(JITServer::MessageType::runFEMacro_invokeILGenMacrosInvokeExactAndFixup, methodHandle);\n+            stream->write(JITServer::MessageType::runFEMacro_invokeILGenMacrosInvokeExactAndFixup, thunkDetails->getHandleRef(), listOfOffsets);\n             auto recv = stream->read<std::string>();\n             std::string methodDescriptorString = std::get<0>(recv);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bac4a756d16934bb44f0bb64d46953d98daeeca"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2ODk5NzU2OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/control/JITClientCompilationThread.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNTowMzo1NVrOFeOD8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNTowMzo1NVrOFeOD8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIzMTk4Nw==", "bodyText": "Again, let's use a const reference here", "url": "https://github.com/eclipse-openj9/openj9/pull/8293#discussion_r367231987", "createdAt": "2020-01-16T05:03:55Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/control/JITClientCompilationThread.cpp", "diffHunk": "@@ -2373,17 +2389,13 @@ handleServerMessage(JITServer::ClientStream *client, TR_J9VM *fe, JITServer::Mes\n          client->write(response, permuteLength, argIndices);\n          }\n          break;\n-      case MessageType::runFEMacro_invokeILGenMacros:\n+      case MessageType::runFEMacro_invokeILGenMacrosParameterCount:\n          {\n-         if (compInfoPT->getLastLocalGCCounter() != compInfoPT->getCompilationInfo()->getLocalGCCounter())\n-            {\n-            // GC happened, fail compilation\n-            auto comp = compInfoPT->getCompilation();\n-            comp->failCompilation<TR::CompilationInterrupted>(\"Compilation interrupted due to GC\");\n-            }\n-\n-         uintptrj_t methodHandle = std::get<0>(client->getRecvData<uintptrj_t>());\n-         TR::VMAccessCriticalSection invokeILGenMacros(fe);\n+         auto recv = client->getRecvData<uintptrj_t*, std::vector<uintptrj_t> >();\n+         TR::VMAccessCriticalSection invokeILGenMacrosParameterCount(fe);\n+         uintptrj_t receiverHandle = *std::get<0>(recv);\n+         std::vector<uintptrj_t> listOfOffsets = std::get<1>(recv);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bac4a756d16934bb44f0bb64d46953d98daeeca"}, "originalPosition": 259}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2ODk5ODA2OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/control/JITClientCompilationThread.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNTowNDozMFrOFeOEVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNTowNDozMFrOFeOEVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIzMjA4NQ==", "bodyText": "Again, let's use a const reference here", "url": "https://github.com/eclipse-openj9/openj9/pull/8293#discussion_r367232085", "createdAt": "2020-01-16T05:04:30Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/control/JITClientCompilationThread.cpp", "diffHunk": "@@ -2392,7 +2404,29 @@ handleServerMessage(JITServer::ClientStream *client, TR_J9VM *fe, JITServer::Mes\n          client->write(response, parameterCount);\n          }\n          break;\n-\n+      case MessageType::runFEMacro_invokeILGenMacrosArrayLength:\n+         {\n+         auto recv = client->getRecvData<uintptrj_t*, std::vector<uintptrj_t> >();\n+         TR::VMAccessCriticalSection invokeILGenMacrosArrayLength(fe);\n+         uintptrj_t receiverHandle = *std::get<0>(recv);\n+         std::vector<uintptrj_t> listOfOffsets = std::get<1>(recv);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bac4a756d16934bb44f0bb64d46953d98daeeca"}, "originalPosition": 274}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2ODk5ODI0OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/control/JITClientCompilationThread.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNTowNDo0MFrOFeOEdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNTowNDo0MFrOFeOEdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIzMjExNw==", "bodyText": "Again, let's use a const reference here", "url": "https://github.com/eclipse-openj9/openj9/pull/8293#discussion_r367232117", "createdAt": "2020-01-16T05:04:40Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/control/JITClientCompilationThread.cpp", "diffHunk": "@@ -2392,7 +2404,29 @@ handleServerMessage(JITServer::ClientStream *client, TR_J9VM *fe, JITServer::Mes\n          client->write(response, parameterCount);\n          }\n          break;\n-\n+      case MessageType::runFEMacro_invokeILGenMacrosArrayLength:\n+         {\n+         auto recv = client->getRecvData<uintptrj_t*, std::vector<uintptrj_t> >();\n+         TR::VMAccessCriticalSection invokeILGenMacrosArrayLength(fe);\n+         uintptrj_t receiverHandle = *std::get<0>(recv);\n+         std::vector<uintptrj_t> listOfOffsets = std::get<1>(recv);\n+         uintptrj_t array = JITServerHelpers::walkReferenceChainWithOffsets(fe, listOfOffsets, receiverHandle);\n+         int32_t arrayLength = (int32_t)fe->getArrayLengthInElements(array);\n+         client->write(response, arrayLength);\n+         }\n+         break;\n+      case MessageType::runFEMacro_invokeILGenMacrosGetField:\n+         {\n+         auto recv = client->getRecvData<uintptrj_t*, uintptrj_t, std::vector<uintptrj_t> >();\n+         TR::VMAccessCriticalSection invokeILGenMacrosGetField(fe);\n+         uintptrj_t receiverHandle = *std::get<0>(recv);\n+         uintptrj_t fieldOffset = std::get<1>(recv);\n+         std::vector<uintptrj_t> listOfOffsets = std::get<2>(recv);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bac4a756d16934bb44f0bb64d46953d98daeeca"}, "originalPosition": 286}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MDk2ODM3OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/control/JITClientCompilationThread.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNzowMzoxNlrOFeg2fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNzowMzoxNlrOFeg2fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUzOTgzOA==", "bodyText": "I believe that getIn32FieldAt requires VM access in hand. same for getInt64FieldAt below", "url": "https://github.com/eclipse-openj9/openj9/pull/8293#discussion_r367539838", "createdAt": "2020-01-16T17:03:16Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/control/JITClientCompilationThread.cpp", "diffHunk": "@@ -656,13 +656,6 @@ handleServerMessage(JITServer::ClientStream *client, TR_J9VM *fe, JITServer::Mes\n          break;\n       case MessageType::VM_getInt32FieldAt:\n          {\n-         if (compInfoPT->getLastLocalGCCounter() != compInfoPT->getCompilationInfo()->getLocalGCCounter())\n-            {\n-            // GC happened, fail compilation\n-            auto comp = compInfoPT->getCompilation();\n-            comp->failCompilation<TR::CompilationInterrupted>(\"Compilation interrupted due to GC\");\n-            }\n-\n          auto recv = client->getRecvData<uintptrj_t, uintptrj_t>();\n          uintptrj_t objectPointer = std::get<0>(recv);\n          uintptrj_t fieldOffset = std::get<1>(recv);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c963b8c885395d8f89b693416870dcc548523a1f"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MDk4MTU3OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/control/JITClientCompilationThread.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNzowNzoxOVrOFeg-tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNzowNzoxOVrOFeg-tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU0MTk0Mg==", "bodyText": "fe->getArrayLengthInElements assumes VM access is already held, but I don't think the client will have it here, so we need to acquire is briefly", "url": "https://github.com/eclipse-openj9/openj9/pull/8293#discussion_r367541942", "createdAt": "2020-01-16T17:07:19Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/control/JITClientCompilationThread.cpp", "diffHunk": "@@ -699,13 +692,6 @@ handleServerMessage(JITServer::ClientStream *client, TR_J9VM *fe, JITServer::Mes\n          break;\n       case MessageType::VM_getArrayLengthInElements:\n          {\n-         if (compInfoPT->getLastLocalGCCounter() != compInfoPT->getCompilationInfo()->getLocalGCCounter())\n-            {\n-            // GC happened, fail compilation\n-            auto comp = compInfoPT->getCompilation();\n-            comp->failCompilation<TR::CompilationInterrupted>(\"Compilation interrupted due to GC\");\n-            }\n-\n          uintptrj_t objectPointer = std::get<0>(client->getRecvData<uintptrj_t>());\n          client->write(response, fe->getArrayLengthInElements(objectPointer));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c963b8c885395d8f89b693416870dcc548523a1f"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 744, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}