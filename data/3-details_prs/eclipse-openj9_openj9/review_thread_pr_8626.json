{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3OTgyNDI3", "number": 8626, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMjowNzowOVrODhsgJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMjowNzowOVrODhsgJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjU4NzI2OnYy", "diffSide": "RIGHT", "path": "runtime/gc_trace/TgcParallel.cpp", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMjowNzowOVrOFsk0Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMzoxMDozN1rOFsmYBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI4NDkwMg==", "bodyText": "Why the mix of different size types (uintptr_t and uint64_t)? Why not just uint64_t throughout?", "url": "https://github.com/eclipse-openj9/openj9/pull/8626#discussion_r382284902", "createdAt": "2020-02-20T22:07:09Z", "author": {"login": "keithc-ca"}, "path": "runtime/gc_trace/TgcParallel.cpp", "diffHunk": "@@ -305,7 +305,7 @@ tgcHookLocalGcEnd(J9HookInterface** hook, uintptr_t eventNum, void* eventData, v\n \tuint64_t prevReadObjectBarrierUpdate = 0;\n #endif /* OMR_GC_CONCURRENT_SCAVENGER */\n \twhile (historyRecord < endRecord) {\n-\t\ttotalRecordUpdates += historyRecord->updates;\n+\t\ttotalRecordUpdates += (uintptr_t) historyRecord->updates;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4eb5d29902043a48244323c333e064c26eeb01ca"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI4ODQ1OQ==", "bodyText": "These counts should all be uintptr_t. They'll need to be all aligned to to use the same type, see eclipse/omr#4825 (comment).\nRequires changes on the OMR side, will need to get PR in before making the counts consistent", "url": "https://github.com/eclipse-openj9/openj9/pull/8626#discussion_r382288459", "createdAt": "2020-02-20T22:15:23Z", "author": {"login": "RSalman"}, "path": "runtime/gc_trace/TgcParallel.cpp", "diffHunk": "@@ -305,7 +305,7 @@ tgcHookLocalGcEnd(J9HookInterface** hook, uintptr_t eventNum, void* eventData, v\n \tuint64_t prevReadObjectBarrierUpdate = 0;\n #endif /* OMR_GC_CONCURRENT_SCAVENGER */\n \twhile (historyRecord < endRecord) {\n-\t\ttotalRecordUpdates += historyRecord->updates;\n+\t\ttotalRecordUpdates += (uintptr_t) historyRecord->updates;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI4NDkwMg=="}, "originalCommit": {"oid": "4eb5d29902043a48244323c333e064c26eeb01ca"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI5MDk3OQ==", "bodyText": "If everything should be uintptr_t why is uint64_t used in this function (e.g. totalRecordUpdates)?", "url": "https://github.com/eclipse-openj9/openj9/pull/8626#discussion_r382290979", "createdAt": "2020-02-20T22:21:19Z", "author": {"login": "keithc-ca"}, "path": "runtime/gc_trace/TgcParallel.cpp", "diffHunk": "@@ -305,7 +305,7 @@ tgcHookLocalGcEnd(J9HookInterface** hook, uintptr_t eventNum, void* eventData, v\n \tuint64_t prevReadObjectBarrierUpdate = 0;\n #endif /* OMR_GC_CONCURRENT_SCAVENGER */\n \twhile (historyRecord < endRecord) {\n-\t\ttotalRecordUpdates += historyRecord->updates;\n+\t\ttotalRecordUpdates += (uintptr_t) historyRecord->updates;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI4NDkwMg=="}, "originalCommit": {"oid": "4eb5d29902043a48244323c333e064c26eeb01ca"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMwMTQ2OQ==", "bodyText": "There's 3 different variables here:\n\nuint64_t historyRecord->updates\nuintptr_t extensions->scavengerStats._copyScanUpdates\nuintptr_t totalRecordUpdates\n\nThere's no way to get around casting without any changes to OMR side. If we forgo casting\nhistoryRecord->updates here to uintptr_t, we'd have to change totalRecordUpdates to uint64_t to match historyRecord->updates.... however then we'd need to cast extensions->scavengerStats._copyScanUpdates  to uint64_t a few lines down when we subtract totalRecordUpdates and extensions->scavengerStats._copyScanUpdates:\nhttps://github.com/eclipse/openj9/blob/8782135e7f969dacae908af4c7c0d68511a94174/runtime/gc_trace/TgcParallel.cpp#L340", "url": "https://github.com/eclipse-openj9/openj9/pull/8626#discussion_r382301469", "createdAt": "2020-02-20T22:46:26Z", "author": {"login": "RSalman"}, "path": "runtime/gc_trace/TgcParallel.cpp", "diffHunk": "@@ -305,7 +305,7 @@ tgcHookLocalGcEnd(J9HookInterface** hook, uintptr_t eventNum, void* eventData, v\n \tuint64_t prevReadObjectBarrierUpdate = 0;\n #endif /* OMR_GC_CONCURRENT_SCAVENGER */\n \twhile (historyRecord < endRecord) {\n-\t\ttotalRecordUpdates += historyRecord->updates;\n+\t\ttotalRecordUpdates += (uintptr_t) historyRecord->updates;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI4NDkwMg=="}, "originalCommit": {"oid": "4eb5d29902043a48244323c333e064c26eeb01ca"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMxMDQwNQ==", "bodyText": "I hope we get this sorted out soon; casts are just a way to hide real problems.", "url": "https://github.com/eclipse-openj9/openj9/pull/8626#discussion_r382310405", "createdAt": "2020-02-20T23:10:37Z", "author": {"login": "keithc-ca"}, "path": "runtime/gc_trace/TgcParallel.cpp", "diffHunk": "@@ -305,7 +305,7 @@ tgcHookLocalGcEnd(J9HookInterface** hook, uintptr_t eventNum, void* eventData, v\n \tuint64_t prevReadObjectBarrierUpdate = 0;\n #endif /* OMR_GC_CONCURRENT_SCAVENGER */\n \twhile (historyRecord < endRecord) {\n-\t\ttotalRecordUpdates += historyRecord->updates;\n+\t\ttotalRecordUpdates += (uintptr_t) historyRecord->updates;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI4NDkwMg=="}, "originalCommit": {"oid": "4eb5d29902043a48244323c333e064c26eeb01ca"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 601, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}