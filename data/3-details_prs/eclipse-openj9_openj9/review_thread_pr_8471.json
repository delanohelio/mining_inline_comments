{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5Mzk4NDg2", "number": 8471, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMDo0OTowMVrODcWqlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMDo0OTozMVrODcWq8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDU4MDY4OnYy", "diffSide": "RIGHT", "path": "test/functional/cmdLineTests/cmdLineTest_J9tests/src/TestStringBufferAndBuilderGrowth.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMDo0OTowMVrOFkXjOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMToyNjo0MlrOFkYZ2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY3ODkwNQ==", "bodyText": "I wonder whether 8GB might be a more reasonable requirement, but I suppose we can try this and experiment later.", "url": "https://github.com/eclipse-openj9/openj9/pull/8471#discussion_r373678905", "createdAt": "2020-01-31T20:49:01Z", "author": {"login": "keithc-ca"}, "path": "test/functional/cmdLineTests/cmdLineTest_J9tests/src/TestStringBufferAndBuilderGrowth.java", "diffHunk": "@@ -20,13 +20,25 @@\n  * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n  *******************************************************************************/\n \n+import com.sun.management.OperatingSystemMXBean;\n+import java.lang.management.ManagementFactory;\n+\n /**\n  * @file TestStringBufferAndBuilderGrowth.java\n  * @brief Grows a StringBuffer and StringBuilder to Integer.MAX_VALUE\n  */\n public class TestStringBufferAndBuilderGrowth {\n \n public static void main(String[] args) {\n+\tOperatingSystemMXBean opBean = (OperatingSystemMXBean)ManagementFactory.getOperatingSystemMXBean();\n+\tlong physicalMemory = opBean.getTotalPhysicalMemorySize();\n+\tSystem.out.println(\"Machine has physical memory \" + physicalMemory + \" bytes or \" + (physicalMemory >> 20) + \" MB or \" + (physicalMemory >> 30) + \" GB\");\n+\tlong tenGig = 10L << 30;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7f26e191e2d7c4689b7d4fed1bb16c0e7a27594"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY5MTY1NA==", "bodyText": "I know AIX doesn't work with 7616 MB, trying a 8000 MB limit.", "url": "https://github.com/eclipse-openj9/openj9/pull/8471#discussion_r373691654", "createdAt": "2020-01-31T21:23:14Z", "author": {"login": "pshipton"}, "path": "test/functional/cmdLineTests/cmdLineTest_J9tests/src/TestStringBufferAndBuilderGrowth.java", "diffHunk": "@@ -20,13 +20,25 @@\n  * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n  *******************************************************************************/\n \n+import com.sun.management.OperatingSystemMXBean;\n+import java.lang.management.ManagementFactory;\n+\n /**\n  * @file TestStringBufferAndBuilderGrowth.java\n  * @brief Grows a StringBuffer and StringBuilder to Integer.MAX_VALUE\n  */\n public class TestStringBufferAndBuilderGrowth {\n \n public static void main(String[] args) {\n+\tOperatingSystemMXBean opBean = (OperatingSystemMXBean)ManagementFactory.getOperatingSystemMXBean();\n+\tlong physicalMemory = opBean.getTotalPhysicalMemorySize();\n+\tSystem.out.println(\"Machine has physical memory \" + physicalMemory + \" bytes or \" + (physicalMemory >> 20) + \" MB or \" + (physicalMemory >> 30) + \" GB\");\n+\tlong tenGig = 10L << 30;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY3ODkwNQ=="}, "originalCommit": {"oid": "a7f26e191e2d7c4689b7d4fed1bb16c0e7a27594"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY5Mjg5MQ==", "bodyText": "I think 8000MB is a more reasonable boundary.", "url": "https://github.com/eclipse-openj9/openj9/pull/8471#discussion_r373692891", "createdAt": "2020-01-31T21:26:42Z", "author": {"login": "keithc-ca"}, "path": "test/functional/cmdLineTests/cmdLineTest_J9tests/src/TestStringBufferAndBuilderGrowth.java", "diffHunk": "@@ -20,13 +20,25 @@\n  * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n  *******************************************************************************/\n \n+import com.sun.management.OperatingSystemMXBean;\n+import java.lang.management.ManagementFactory;\n+\n /**\n  * @file TestStringBufferAndBuilderGrowth.java\n  * @brief Grows a StringBuffer and StringBuilder to Integer.MAX_VALUE\n  */\n public class TestStringBufferAndBuilderGrowth {\n \n public static void main(String[] args) {\n+\tOperatingSystemMXBean opBean = (OperatingSystemMXBean)ManagementFactory.getOperatingSystemMXBean();\n+\tlong physicalMemory = opBean.getTotalPhysicalMemorySize();\n+\tSystem.out.println(\"Machine has physical memory \" + physicalMemory + \" bytes or \" + (physicalMemory >> 20) + \" MB or \" + (physicalMemory >> 30) + \" GB\");\n+\tlong tenGig = 10L << 30;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY3ODkwNQ=="}, "originalCommit": {"oid": "a7f26e191e2d7c4689b7d4fed1bb16c0e7a27594"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDU4MTYxOnYy", "diffSide": "RIGHT", "path": "test/functional/cmdLineTests/cmdLineTest_J9tests/j9tests_Java8.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMDo0OTozMVrOFkXj1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMTowOToyOFrOFkYA6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY3OTA2Mg==", "bodyText": "Wasn't the indentation of this (</test>) correct before?", "url": "https://github.com/eclipse-openj9/openj9/pull/8471#discussion_r373679062", "createdAt": "2020-01-31T20:49:31Z", "author": {"login": "keithc-ca"}, "path": "test/functional/cmdLineTests/cmdLineTest_J9tests/j9tests_Java8.xml", "diffHunk": "@@ -550,7 +550,8 @@\n   <command>$EXE$ -Xdump:none -Xmx7g -Djava.lang.stringBufferAndBuilder.growAggressively -cp $Q$$JARPATH$$Q$ TestStringBufferAndBuilderGrowth</command>\n   <output regex=\"no\" type=\"success\">StringBuffer capacity=2147483647 StringBuilder capacity=2147483647</output>\n   <output regex=\"no\" type=\"success\">Option too large</output>\n- </test>\n+  <output regex=\"no\" type=\"success\">Not enough resource to run test</output>\n+</test>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7f26e191e2d7c4689b7d4fed1bb16c0e7a27594"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY4NjUwNg==", "bodyText": "Fixed.", "url": "https://github.com/eclipse-openj9/openj9/pull/8471#discussion_r373686506", "createdAt": "2020-01-31T21:09:28Z", "author": {"login": "pshipton"}, "path": "test/functional/cmdLineTests/cmdLineTest_J9tests/j9tests_Java8.xml", "diffHunk": "@@ -550,7 +550,8 @@\n   <command>$EXE$ -Xdump:none -Xmx7g -Djava.lang.stringBufferAndBuilder.growAggressively -cp $Q$$JARPATH$$Q$ TestStringBufferAndBuilderGrowth</command>\n   <output regex=\"no\" type=\"success\">StringBuffer capacity=2147483647 StringBuilder capacity=2147483647</output>\n   <output regex=\"no\" type=\"success\">Option too large</output>\n- </test>\n+  <output regex=\"no\" type=\"success\">Not enough resource to run test</output>\n+</test>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY3OTA2Mg=="}, "originalCommit": {"oid": "a7f26e191e2d7c4689b7d4fed1bb16c0e7a27594"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 681, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}