{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyOTQxNDg5", "number": 10329, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNDozNjozNVrOEV22mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNzoyNTozN1rOEV7F_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMzU0MjY1OnYy", "diffSide": "RIGHT", "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNDozNjozNVrOG82c8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNToxMDoyM1rOG836NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ1OTg4OA==", "bodyText": "This looks wrong - code that's explicitly asking for the check should be updated for 15 rather than discarding the value here.", "url": "https://github.com/eclipse-openj9/openj9/pull/10329#discussion_r466459888", "createdAt": "2020-08-06T14:36:35Z", "author": {"login": "DanHeidinga"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -216,11 +216,23 @@\n \t\t}\n \t\t\n \t\tLookup(Class<?> lookupClass, Class<?> prevLookupClass, int lookupMode) {\n-\t\t\tthis(lookupClass, prevLookupClass, lookupMode, true);\n+\t\t\tthis(lookupClass, prevLookupClass, lookupMode,\n+\t\t\t/*[IF Java15]\n+\t\t\t\tfalse\n+\t\t\t/*[ELSE] Java15*/\n+\t\t\t\ttrue\n+\t\t\t/*[ENDIF] Java15*/\n+\t\t\t);\n \t\t}\n \t\t\n \t\tLookup(Class<?> lookupClass, int lookupMode, boolean doCheck) {\n-\t\t\tthis(lookupClass, null, lookupMode, doCheck);\n+\t\t\tthis(lookupClass, null, lookupMode,\n+\t\t\t/*[IF Java15]\n+\t\t\t\tfalse\n+\t\t\t/*[ELSE] Java15*/\n+\t\t\t\tdoCheck\n+\t\t\t/*[ENDIF] Java15*/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95985f5e4fdaef53e8ae4ff4edd7a09977a7a08a"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ4Mzc2NQ==", "bodyText": "The approach of this PR is to always skip the package check other than those three APIs in question for JDK15. Those three have been modified to invoke the Lookup constructor with true flag for JDK15 (to match RI behaviours). The expectation is that all other JDK15 API don't perform such check.\nDoes this make sense?", "url": "https://github.com/eclipse-openj9/openj9/pull/10329#discussion_r466483765", "createdAt": "2020-08-06T15:10:23Z", "author": {"login": "JasonFengJ9"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -216,11 +216,23 @@\n \t\t}\n \t\t\n \t\tLookup(Class<?> lookupClass, Class<?> prevLookupClass, int lookupMode) {\n-\t\t\tthis(lookupClass, prevLookupClass, lookupMode, true);\n+\t\t\tthis(lookupClass, prevLookupClass, lookupMode,\n+\t\t\t/*[IF Java15]\n+\t\t\t\tfalse\n+\t\t\t/*[ELSE] Java15*/\n+\t\t\t\ttrue\n+\t\t\t/*[ENDIF] Java15*/\n+\t\t\t);\n \t\t}\n \t\t\n \t\tLookup(Class<?> lookupClass, int lookupMode, boolean doCheck) {\n-\t\t\tthis(lookupClass, null, lookupMode, doCheck);\n+\t\t\tthis(lookupClass, null, lookupMode,\n+\t\t\t/*[IF Java15]\n+\t\t\t\tfalse\n+\t\t\t/*[ELSE] Java15*/\n+\t\t\t\tdoCheck\n+\t\t\t/*[ENDIF] Java15*/", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ1OTg4OA=="}, "originalCommit": {"oid": "95985f5e4fdaef53e8ae4ff4edd7a09977a7a08a"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMzU2MzEwOnYy", "diffSide": "RIGHT", "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNDo0MToxNlrOG82pYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNToxNTo0OFrOG84IYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ2MzA3Mg==", "bodyText": "Something like this may be clearer by putting the behaviour in a helper method like lookupJLIPackageCheckDefault\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tthis(lookupClass, prevLookupClass, lookupMode,\n          \n          \n            \n            \t\t\t/*[IF Java15]\n          \n          \n            \n            \t\t\t\tfalse\n          \n          \n            \n            \t\t\t/*[ELSE] Java15*/\n          \n          \n            \n            \t\t\t\ttrue\n          \n          \n            \n            \t\t\t/*[ENDIF] Java15*/\n          \n          \n            \n            \t\t\t);\n          \n          \n            \n            \t\t\tthis(lookupClass, prevLookupClass, lookupMode, lookupJLIPackageCheckDefault());\n          \n          \n            \n            \t\t}\n          \n          \n            \n            \n          \n          \n            \n            /* For Java 15, the default is not to check for the \"java.lang.invoke\" package.\n          \n          \n            \n             * For earlier releases, these lookups are illegal\n          \n          \n            \n              */\n          \n          \n            \n            static boolean lookupJLIPackageCheckDefault() {\n          \n          \n            \n            \t/*[IF Java15]\n          \n          \n            \n            \treturn false;\n          \n          \n            \n            \t/*[ELSE] Java15*/\n          \n          \n            \n            \treturn true;\n          \n          \n            \n            \t/*[ENDIF] Java15*/\n          \n          \n            \n            }", "url": "https://github.com/eclipse-openj9/openj9/pull/10329#discussion_r466463072", "createdAt": "2020-08-06T14:41:16Z", "author": {"login": "DanHeidinga"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -216,11 +216,23 @@\n \t\t}\n \t\t\n \t\tLookup(Class<?> lookupClass, Class<?> prevLookupClass, int lookupMode) {\n-\t\t\tthis(lookupClass, prevLookupClass, lookupMode, true);\n+\t\t\tthis(lookupClass, prevLookupClass, lookupMode,\n+\t\t\t/*[IF Java15]\n+\t\t\t\tfalse\n+\t\t\t/*[ELSE] Java15*/\n+\t\t\t\ttrue\n+\t\t\t/*[ENDIF] Java15*/\n+\t\t\t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95985f5e4fdaef53e8ae4ff4edd7a09977a7a08a"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ4NzM5Mw==", "bodyText": "Agreed. Updated the PR.", "url": "https://github.com/eclipse-openj9/openj9/pull/10329#discussion_r466487393", "createdAt": "2020-08-06T15:15:48Z", "author": {"login": "JasonFengJ9"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -216,11 +216,23 @@\n \t\t}\n \t\t\n \t\tLookup(Class<?> lookupClass, Class<?> prevLookupClass, int lookupMode) {\n-\t\t\tthis(lookupClass, prevLookupClass, lookupMode, true);\n+\t\t\tthis(lookupClass, prevLookupClass, lookupMode,\n+\t\t\t/*[IF Java15]\n+\t\t\t\tfalse\n+\t\t\t/*[ELSE] Java15*/\n+\t\t\t\ttrue\n+\t\t\t/*[ENDIF] Java15*/\n+\t\t\t);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ2MzA3Mg=="}, "originalCommit": {"oid": "95985f5e4fdaef53e8ae4ff4edd7a09977a7a08a"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDIyOTIxOnYy", "diffSide": "RIGHT", "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNzoyNDoxMVrOG89JnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODo0ODozMlrOG9AAvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU2OTYyOQ==", "bodyText": "This doesn't look right as it discards doCheck.  It should be\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tthis(lookupClass, null, lookupMode, lookupJLIPackageCheckDefault());\n          \n          \n            \n            \t\t\tthis(lookupClass, null, lookupMode, doCheck);\n          \n      \n    \n    \n  \n\nIt's up to the calling code to pass the right default or not supply one by using a different ctor.", "url": "https://github.com/eclipse-openj9/openj9/pull/10329#discussion_r466569629", "createdAt": "2020-08-06T17:24:11Z", "author": {"login": "DanHeidinga"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -215,12 +215,23 @@\n \t\t\taccessMode = lookupMode;\n \t\t}\n \t\t\n+\t\t/* For Java 15, the default is not to check for the \"java.lang.invoke\" package.\n+\t\t * For earlier releases, these lookups are illegal\n+\t\t  */\n+\t\tprivate static boolean lookupJLIPackageCheckDefault() {\n+\t\t\t/*[IF Java15]\n+\t\t\treturn false;\n+\t\t\t/*[ELSE] Java15*/\n+\t\t\treturn true;\n+\t\t\t/*[ENDIF] Java15*/\n+\t\t}\n+\t\t\n \t\tLookup(Class<?> lookupClass, Class<?> prevLookupClass, int lookupMode) {\n-\t\t\tthis(lookupClass, prevLookupClass, lookupMode, true);\n+\t\t\tthis(lookupClass, prevLookupClass, lookupMode, lookupJLIPackageCheckDefault());\n \t\t}\n \t\t\n \t\tLookup(Class<?> lookupClass, int lookupMode, boolean doCheck) {\n-\t\t\tthis(lookupClass, null, lookupMode, doCheck);\n+\t\t\tthis(lookupClass, null, lookupMode, lookupJLIPackageCheckDefault());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52293889c8063582d0cc7c997c07470ef06eb9d4"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYxNjUwOQ==", "bodyText": "Modified the helper method as following:\n\t\tprivate static boolean lookupJLIPackageCheckDefault(boolean doCheck) {\n\t\t\t/*[IF Java15]\n\t\t\treturn false;\n\t\t\t/*[ELSE] Java15*/\n\t\t\treturn doCheck;\n\t\t\t/*[ENDIF] Java15*/\n\t\t}\n\nThis is to skip the package check in JDK15 regardless of incoming doCheck flag while keep same behaviours for pre-JDK15 levels.\nHere it invokes lookupJLIPackageCheckDefault(doCheck) instead.", "url": "https://github.com/eclipse-openj9/openj9/pull/10329#discussion_r466616509", "createdAt": "2020-08-06T18:48:32Z", "author": {"login": "JasonFengJ9"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -215,12 +215,23 @@\n \t\t\taccessMode = lookupMode;\n \t\t}\n \t\t\n+\t\t/* For Java 15, the default is not to check for the \"java.lang.invoke\" package.\n+\t\t * For earlier releases, these lookups are illegal\n+\t\t  */\n+\t\tprivate static boolean lookupJLIPackageCheckDefault() {\n+\t\t\t/*[IF Java15]\n+\t\t\treturn false;\n+\t\t\t/*[ELSE] Java15*/\n+\t\t\treturn true;\n+\t\t\t/*[ENDIF] Java15*/\n+\t\t}\n+\t\t\n \t\tLookup(Class<?> lookupClass, Class<?> prevLookupClass, int lookupMode) {\n-\t\t\tthis(lookupClass, prevLookupClass, lookupMode, true);\n+\t\t\tthis(lookupClass, prevLookupClass, lookupMode, lookupJLIPackageCheckDefault());\n \t\t}\n \t\t\n \t\tLookup(Class<?> lookupClass, int lookupMode, boolean doCheck) {\n-\t\t\tthis(lookupClass, null, lookupMode, doCheck);\n+\t\t\tthis(lookupClass, null, lookupMode, lookupJLIPackageCheckDefault());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU2OTYyOQ=="}, "originalCommit": {"oid": "52293889c8063582d0cc7c997c07470ef06eb9d4"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDIzNzQyOnYy", "diffSide": "RIGHT", "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNzoyNTozN1rOG89OVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMzowMzo0NlrOG9ZCNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU3MDgzOA==", "bodyText": "Shouldn't this be false?  If the user already has a Lookup in the java.lang.invoke package, why would we restrict dropping access?", "url": "https://github.com/eclipse-openj9/openj9/pull/10329#discussion_r466570838", "createdAt": "2020-08-06T17:25:37Z", "author": {"login": "DanHeidinga"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -2214,7 +2225,7 @@ public VarHandle unreflectVarHandle(Field field) throws IllegalAccessException {\n \t\t\t\tnewPrevAccessClass = null;\n \t\t\t}\n \t\t\t\n-\t\t\treturn new Lookup(accessClass, newPrevAccessClass, newAccessMode);\n+\t\t\treturn new Lookup(accessClass, newPrevAccessClass, newAccessMode, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52293889c8063582d0cc7c997c07470ef06eb9d4"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYxNjU5OA==", "bodyText": "new Lookup(accessClass, newPrevAccessClass, newAccessMode)  invokes this(lookupClass, prevLookupClass, lookupMode, true), so the flag was true in current code base, i.e., always check the package.\nThis check matches RI behaviours which was introduced for defense-in-depth fix [1], and still presents in JDK15.\n[1] http://mail.openjdk.java.net/pipermail/jigsaw-dev/2017-April/012268.html", "url": "https://github.com/eclipse-openj9/openj9/pull/10329#discussion_r466616598", "createdAt": "2020-08-06T18:48:40Z", "author": {"login": "JasonFengJ9"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -2214,7 +2225,7 @@ public VarHandle unreflectVarHandle(Field field) throws IllegalAccessException {\n \t\t\t\tnewPrevAccessClass = null;\n \t\t\t}\n \t\t\t\n-\t\t\treturn new Lookup(accessClass, newPrevAccessClass, newAccessMode);\n+\t\t\treturn new Lookup(accessClass, newPrevAccessClass, newAccessMode, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU3MDgzOA=="}, "originalCommit": {"oid": "52293889c8063582d0cc7c997c07470ef06eb9d4"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAyNjQ4NQ==", "bodyText": "It's an odd restriction to leave at this point but as it matches the RI, we'll do the same for 15.", "url": "https://github.com/eclipse-openj9/openj9/pull/10329#discussion_r467026485", "createdAt": "2020-08-07T13:03:46Z", "author": {"login": "DanHeidinga"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -2214,7 +2225,7 @@ public VarHandle unreflectVarHandle(Field field) throws IllegalAccessException {\n \t\t\t\tnewPrevAccessClass = null;\n \t\t\t}\n \t\t\t\n-\t\t\treturn new Lookup(accessClass, newPrevAccessClass, newAccessMode);\n+\t\t\treturn new Lookup(accessClass, newPrevAccessClass, newAccessMode, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU3MDgzOA=="}, "originalCommit": {"oid": "52293889c8063582d0cc7c997c07470ef06eb9d4"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4647, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}