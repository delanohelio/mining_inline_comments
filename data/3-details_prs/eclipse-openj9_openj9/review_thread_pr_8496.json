{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwOTM1NTAx", "number": 8496, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNzoyNjozN1rODdEDTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxODozOTowN1rODdFcjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxODAxNjc2OnYy", "diffSide": "RIGHT", "path": "runtime/bcutil/ROMClassBuilder.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNzoyNjozN1rOFlc0LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNzoyNjozN1rOFlc0LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgxMzc0MQ==", "bodyText": "I added this check because when reaching this point, we do not have write mutex if the cache is full/soft full. Without this check,  j9shr_classStoreTransaction_createSharedClass() does not guarantee returning on checking J9SHR_RUNTIMEFLAG_AVAILABLE_SPACE_FULL from localRuntimeFlags (Another thread that has write mutex may unset this flag), leading to unexpected behavior.", "url": "https://github.com/eclipse-openj9/openj9/pull/8496#discussion_r374813741", "createdAt": "2020-02-04T17:26:37Z", "author": {"login": "hangshao0"}, "path": "runtime/bcutil/ROMClassBuilder.cpp", "diffHunk": "@@ -608,32 +608,37 @@ ROMClassBuilder::prepareAndLaydown( BufferManager *bufferManager, ClassFileParse\n \t\t\tsizeRequirements.lineNumberTableSize = U_32(sizeInformation.lineNumberSize);\n \t\t\tsizeRequirements.localVariableTableSize = U_32(sizeInformation.variableInfoSize);\n \n-\t\t\tif ( sharedStoreClassTransaction.allocateSharedClass(&sizeRequirements) ){\n-\t\t\t\tU_8 *romClassBuffer = (U_8*)sharedStoreClassTransaction.getRomClass();\n-\t\t\t\t/*\n-\t\t\t\t * Make note that the laydown is occurring in SharedClasses\n-\t\t\t\t */\n-\t\t\t\tromSize = finishPrepareAndLaydown(\n-\t\t\t\t\t\t(U_8*)sharedStoreClassTransaction.getRomClass(),\n-\t\t\t\t\t\t(U_8*)sharedStoreClassTransaction.getLineNumberTable(),\n-\t\t\t\t\t\t(U_8*)sharedStoreClassTransaction.getLocalVariableTable(),\n-\t\t\t\t\t\t&sizeInformation, modifiers, extraModifiers, optionalFlags,\n-\t\t\t\t\t\ttrue, sharedStoreClassTransaction.hasSharedStringTableLock(),\n-\t\t\t\t\t\t&classFileOracle, &srpOffsetTable, &srpKeyProducer, &romClassWriter,\n-\t\t\t\t\t\tcontext, &constantPoolMap\n-\t\t\t\t\t\t);\n-\n-\t\t\t\tfixReturnBytecodes(_portLibrary, (J9ROMClass *)romClassBuffer);\n+\t\t\tif (!sharedStoreClassTransaction.isCacheFull()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44bd2f3d0c3da263be5254ee3de4922dd1a5861c"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxODI0NDk2OnYy", "diffSide": "RIGHT", "path": "runtime/shared_common/SCImplementedAPI.cpp", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxODozOTowMlrOFlfEQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMTo1OTo1MlrOFlk9fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg1MDYyNQ==", "bodyText": "Why the check for TSTATE_ENTER_SEGMENTMUTEX?", "url": "https://github.com/eclipse-openj9/openj9/pull/8496#discussion_r374850625", "createdAt": "2020-02-04T18:39:02Z", "author": {"login": "pshipton"}, "path": "runtime/shared_common/SCImplementedAPI.cpp", "diffHunk": "@@ -770,7 +792,9 @@ j9shr_classStoreTransaction_nextSharedClassForCompare(void * tobj)\n \n \tTrc_SHR_API_j9shr_nextSharedClassForCompare_Entry(currentThread);\n \n-\tif (obj->transactionState != TSTATE_ENTER_WRITEMUTEX) {\n+\tif ((obj->transactionState != TSTATE_ENTER_WRITEMUTEX)\n+\t\t&& ((0 == obj->cacheFullFlags) || (obj->transactionState != TSTATE_ENTER_SEGMENTMUTEX))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44bd2f3d0c3da263be5254ee3de4922dd1a5861c"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg3NDc5Ng==", "bodyText": "With this change, we now return from j9shr_classStoreTransaction_start() after acquiring the segment mutex but before acquiring the cache write mutex if the cache is\nfull.\nfindNextROMClass() asserts the segmentMutex is being held. We should continue to findNextROMClass() in j9shr_classStoreTransaction_nextSharedClassForCompare() either:\n\nCache is not full, write mutex is entered, or\nCache is full, segmentMutex is entered.", "url": "https://github.com/eclipse-openj9/openj9/pull/8496#discussion_r374874796", "createdAt": "2020-02-04T19:25:42Z", "author": {"login": "hangshao0"}, "path": "runtime/shared_common/SCImplementedAPI.cpp", "diffHunk": "@@ -770,7 +792,9 @@ j9shr_classStoreTransaction_nextSharedClassForCompare(void * tobj)\n \n \tTrc_SHR_API_j9shr_nextSharedClassForCompare_Entry(currentThread);\n \n-\tif (obj->transactionState != TSTATE_ENTER_WRITEMUTEX) {\n+\tif ((obj->transactionState != TSTATE_ENTER_WRITEMUTEX)\n+\t\t&& ((0 == obj->cacheFullFlags) || (obj->transactionState != TSTATE_ENTER_SEGMENTMUTEX))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg1MDYyNQ=="}, "originalCommit": {"oid": "44bd2f3d0c3da263be5254ee3de4922dd1a5861c"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkxMjY0MQ==", "bodyText": "What I was thinking is that it seems redundant to check both cacheFullFlags and TSTATE_ENTER_SEGMENTMUTEX. If cacheFullFlags != 0 then transactionState == TSTATE_ENTER_SEGMENTMUTEX", "url": "https://github.com/eclipse-openj9/openj9/pull/8496#discussion_r374912641", "createdAt": "2020-02-04T20:45:21Z", "author": {"login": "pshipton"}, "path": "runtime/shared_common/SCImplementedAPI.cpp", "diffHunk": "@@ -770,7 +792,9 @@ j9shr_classStoreTransaction_nextSharedClassForCompare(void * tobj)\n \n \tTrc_SHR_API_j9shr_nextSharedClassForCompare_Entry(currentThread);\n \n-\tif (obj->transactionState != TSTATE_ENTER_WRITEMUTEX) {\n+\tif ((obj->transactionState != TSTATE_ENTER_WRITEMUTEX)\n+\t\t&& ((0 == obj->cacheFullFlags) || (obj->transactionState != TSTATE_ENTER_SEGMENTMUTEX))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg1MDYyNQ=="}, "originalCommit": {"oid": "44bd2f3d0c3da263be5254ee3de4922dd1a5861c"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk0NzE5Nw==", "bodyText": "Yes, the check for TSTATE_ENTER_SEGMENTMUTEX can be removed and it is removed.", "url": "https://github.com/eclipse-openj9/openj9/pull/8496#discussion_r374947197", "createdAt": "2020-02-04T21:59:52Z", "author": {"login": "hangshao0"}, "path": "runtime/shared_common/SCImplementedAPI.cpp", "diffHunk": "@@ -770,7 +792,9 @@ j9shr_classStoreTransaction_nextSharedClassForCompare(void * tobj)\n \n \tTrc_SHR_API_j9shr_nextSharedClassForCompare_Entry(currentThread);\n \n-\tif (obj->transactionState != TSTATE_ENTER_WRITEMUTEX) {\n+\tif ((obj->transactionState != TSTATE_ENTER_WRITEMUTEX)\n+\t\t&& ((0 == obj->cacheFullFlags) || (obj->transactionState != TSTATE_ENTER_SEGMENTMUTEX))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg1MDYyNQ=="}, "originalCommit": {"oid": "44bd2f3d0c3da263be5254ee3de4922dd1a5861c"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxODI0NTI0OnYy", "diffSide": "RIGHT", "path": "runtime/shared_common/j9shr.tdf", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxODozOTowN1rOFlfEcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMjowMDowN1rOFlk98w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg1MDY3NQ==", "bodyText": "Do these need to be level 1? They could be occurring quite often when the cache is full.", "url": "https://github.com/eclipse-openj9/openj9/pull/8496#discussion_r374850675", "createdAt": "2020-02-04T18:39:07Z", "author": {"login": "pshipton"}, "path": "runtime/shared_common/j9shr.tdf", "diffHunk": "@@ -2984,3 +2984,6 @@ TraceEvent=Trc_SHR_CM_storeCacheUniqueID_generateCacheUniqueID_after Overhead=1\n \n TraceEvent=Trc_SHR_CC_startup_getCacheUniqueID_before Overhead=1 Level=7 Template=\"CC::startup(): getCacheUniqueID() - (createTime: %llx, metadataBytes: %zx, classesBytes: %zx, lineNumTabBytes: %zx, varTabBytes: %zx) \"\n TraceEvent=Trc_SHR_CC_startup_getCacheUniqueID_after Overhead=1 Level=7 Template=\"CC::startup(): getCacheUniqueID() - the cache unique ID is %s\"\n+\n+TraceEvent=Trc_SHR_API_j9shr_classStoreTransaction_start_cacheFull_Event Overhead=1 Level=1 Template=\"API j9shr_classStoreTransaction_start : J9SHR_RUNTIMEFLAG_BLOCK_SPACE_FULL is set. The shared cache is full\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44bd2f3d0c3da263be5254ee3de4922dd1a5861c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg3NzU4MQ==", "bodyText": "I see the existing Trc_SHR_API_j9shr_createSharedClass_Full_Event is level 2 and cache could be full during the startup phase, so I made this trace point level 1. But I am fine with setting it level 3.", "url": "https://github.com/eclipse-openj9/openj9/pull/8496#discussion_r374877581", "createdAt": "2020-02-04T19:31:09Z", "author": {"login": "hangshao0"}, "path": "runtime/shared_common/j9shr.tdf", "diffHunk": "@@ -2984,3 +2984,6 @@ TraceEvent=Trc_SHR_CM_storeCacheUniqueID_generateCacheUniqueID_after Overhead=1\n \n TraceEvent=Trc_SHR_CC_startup_getCacheUniqueID_before Overhead=1 Level=7 Template=\"CC::startup(): getCacheUniqueID() - (createTime: %llx, metadataBytes: %zx, classesBytes: %zx, lineNumTabBytes: %zx, varTabBytes: %zx) \"\n TraceEvent=Trc_SHR_CC_startup_getCacheUniqueID_after Overhead=1 Level=7 Template=\"CC::startup(): getCacheUniqueID() - the cache unique ID is %s\"\n+\n+TraceEvent=Trc_SHR_API_j9shr_classStoreTransaction_start_cacheFull_Event Overhead=1 Level=1 Template=\"API j9shr_classStoreTransaction_start : J9SHR_RUNTIMEFLAG_BLOCK_SPACE_FULL is set. The shared cache is full\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg1MDY3NQ=="}, "originalCommit": {"oid": "44bd2f3d0c3da263be5254ee3de4922dd1a5861c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkxMDc2Mg==", "bodyText": "Ideally there should be a single tracepoint when the cache becomes full, not a tracepoint every time a class is loaded when the cache is full.", "url": "https://github.com/eclipse-openj9/openj9/pull/8496#discussion_r374910762", "createdAt": "2020-02-04T20:41:17Z", "author": {"login": "pshipton"}, "path": "runtime/shared_common/j9shr.tdf", "diffHunk": "@@ -2984,3 +2984,6 @@ TraceEvent=Trc_SHR_CM_storeCacheUniqueID_generateCacheUniqueID_after Overhead=1\n \n TraceEvent=Trc_SHR_CC_startup_getCacheUniqueID_before Overhead=1 Level=7 Template=\"CC::startup(): getCacheUniqueID() - (createTime: %llx, metadataBytes: %zx, classesBytes: %zx, lineNumTabBytes: %zx, varTabBytes: %zx) \"\n TraceEvent=Trc_SHR_CC_startup_getCacheUniqueID_after Overhead=1 Level=7 Template=\"CC::startup(): getCacheUniqueID() - the cache unique ID is %s\"\n+\n+TraceEvent=Trc_SHR_API_j9shr_classStoreTransaction_start_cacheFull_Event Overhead=1 Level=1 Template=\"API j9shr_classStoreTransaction_start : J9SHR_RUNTIMEFLAG_BLOCK_SPACE_FULL is set. The shared cache is full\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg1MDY3NQ=="}, "originalCommit": {"oid": "44bd2f3d0c3da263be5254ee3de4922dd1a5861c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk0NzMxNQ==", "bodyText": "Changed to level 3.", "url": "https://github.com/eclipse-openj9/openj9/pull/8496#discussion_r374947315", "createdAt": "2020-02-04T22:00:07Z", "author": {"login": "hangshao0"}, "path": "runtime/shared_common/j9shr.tdf", "diffHunk": "@@ -2984,3 +2984,6 @@ TraceEvent=Trc_SHR_CM_storeCacheUniqueID_generateCacheUniqueID_after Overhead=1\n \n TraceEvent=Trc_SHR_CC_startup_getCacheUniqueID_before Overhead=1 Level=7 Template=\"CC::startup(): getCacheUniqueID() - (createTime: %llx, metadataBytes: %zx, classesBytes: %zx, lineNumTabBytes: %zx, varTabBytes: %zx) \"\n TraceEvent=Trc_SHR_CC_startup_getCacheUniqueID_after Overhead=1 Level=7 Template=\"CC::startup(): getCacheUniqueID() - the cache unique ID is %s\"\n+\n+TraceEvent=Trc_SHR_API_j9shr_classStoreTransaction_start_cacheFull_Event Overhead=1 Level=1 Template=\"API j9shr_classStoreTransaction_start : J9SHR_RUNTIMEFLAG_BLOCK_SPACE_FULL is set. The shared cache is full\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg1MDY3NQ=="}, "originalCommit": {"oid": "44bd2f3d0c3da263be5254ee3de4922dd1a5861c"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 690, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}