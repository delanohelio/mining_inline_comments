{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxMDgyOTE1", "number": 8501, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNzowMjozM1rODdaMTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTo1MjozNVrODkUcLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTY0NDMxOnYy", "diffSide": "RIGHT", "path": "runtime/bcutil/ConstantPoolMap.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNzowMjozM1rOFl_tXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNzoxMzo1OVrOFmAG6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM4NTQzOQ==", "bodyText": "Would be good to comment here on why this is being done", "url": "https://github.com/eclipse-openj9/openj9/pull/8501#discussion_r375385439", "createdAt": "2020-02-05T17:02:33Z", "author": {"login": "DanHeidinga"}, "path": "runtime/bcutil/ConstantPoolMap.cpp", "diffHunk": "@@ -302,6 +302,14 @@ ConstantPoolMap::computeConstantPoolMapAndSizes()\n \t\t\t}\n \t\t}\n \t}\n+\n+\tJ9ClassPatchMap *map = _context->patchMap();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d24c19e1f497a72445f10422d61f4e13248b952"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM5MTk3Nw==", "bodyText": "These are @fengxue-IS changes for Constant Pool Patching (#8460). These should go away after #8460 is merged, and this pull request is rebased. Only the four commits listed in the header description need to be reviewed for this pull request.", "url": "https://github.com/eclipse-openj9/openj9/pull/8501#discussion_r375391977", "createdAt": "2020-02-05T17:13:59Z", "author": {"login": "babsingh"}, "path": "runtime/bcutil/ConstantPoolMap.cpp", "diffHunk": "@@ -302,6 +302,14 @@ ConstantPoolMap::computeConstantPoolMapAndSizes()\n \t\t\t}\n \t\t}\n \t}\n+\n+\tJ9ClassPatchMap *map = _context->patchMap();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM4NTQzOQ=="}, "originalCommit": {"oid": "1d24c19e1f497a72445f10422d61f4e13248b952"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0OTQ0MTUyOnYy", "diffSide": "RIGHT", "path": "runtime/vm/MHInterpreter.cpp", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwMjo0NjozMVrOFqHzHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMTowNDoxOVrOFrSWQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTcxMjI4NQ==", "bodyText": "Does this need to use the vmconstantpool?  Can we look up the class here if it's needed as it will only be used in error cases?\nI prefer not to grow the vmconstantpool if we can avoid it as every class in the pool is loaded at startup.", "url": "https://github.com/eclipse-openj9/openj9/pull/8501#discussion_r379712285", "createdAt": "2020-02-15T02:46:31Z", "author": {"login": "DanHeidinga"}, "path": "runtime/vm/MHInterpreter.cpp", "diffHunk": "@@ -555,6 +555,13 @@ VM_MHInterpreter::dispatchLoop(j9object_t methodHandle)\n \t\t\t/* Get MethodHandle for this operation from the VarHandle's handleTable */\n \t\t\tj9object_t handleTable = J9VMJAVALANGINVOKEVARHANDLE_HANDLETABLE(_currentThread, varHandle);\n \t\t\tj9object_t methodHandleFromTable = J9JAVAARRAYOFOBJECT_LOAD(_currentThread, handleTable, operation);\n+\n+\t\t\tif (NULL == methodHandleFromTable) {\n+\t\t\t\tprepareForExceptionThrow(_currentThread);\n+\t\t\t\tsetCurrentExceptionUTF(_currentThread, J9VMCONSTANTPOOL_JAVALANGUNSUPPORTEDOPERATIONEXCEPTION, NULL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a4672ab7f03d4440988c82758ada838292dfb64"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDcyMjU1NA==", "bodyText": "I have not noticed setCurrentException* examples without J9VMCONSTANTPOOL_* macros. So, vmconstantpool is required to throw the UnsupportedOperationException from setCurrentException*.", "url": "https://github.com/eclipse-openj9/openj9/pull/8501#discussion_r380722554", "createdAt": "2020-02-18T14:55:08Z", "author": {"login": "babsingh"}, "path": "runtime/vm/MHInterpreter.cpp", "diffHunk": "@@ -555,6 +555,13 @@ VM_MHInterpreter::dispatchLoop(j9object_t methodHandle)\n \t\t\t/* Get MethodHandle for this operation from the VarHandle's handleTable */\n \t\t\tj9object_t handleTable = J9VMJAVALANGINVOKEVARHANDLE_HANDLETABLE(_currentThread, varHandle);\n \t\t\tj9object_t methodHandleFromTable = J9JAVAARRAYOFOBJECT_LOAD(_currentThread, handleTable, operation);\n+\n+\t\t\tif (NULL == methodHandleFromTable) {\n+\t\t\t\tprepareForExceptionThrow(_currentThread);\n+\t\t\t\tsetCurrentExceptionUTF(_currentThread, J9VMCONSTANTPOOL_JAVALANGUNSUPPORTEDOPERATIONEXCEPTION, NULL);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTcxMjI4NQ=="}, "originalCommit": {"oid": "3a4672ab7f03d4440988c82758ada838292dfb64"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDcyNTU3Mw==", "bodyText": "I also observed that JEP370 testcases catch and ignore UnsupportedOperationException. We will under-perform in such scenarios if we look up for the exception class.", "url": "https://github.com/eclipse-openj9/openj9/pull/8501#discussion_r380725573", "createdAt": "2020-02-18T14:59:33Z", "author": {"login": "babsingh"}, "path": "runtime/vm/MHInterpreter.cpp", "diffHunk": "@@ -555,6 +555,13 @@ VM_MHInterpreter::dispatchLoop(j9object_t methodHandle)\n \t\t\t/* Get MethodHandle for this operation from the VarHandle's handleTable */\n \t\t\tj9object_t handleTable = J9VMJAVALANGINVOKEVARHANDLE_HANDLETABLE(_currentThread, varHandle);\n \t\t\tj9object_t methodHandleFromTable = J9JAVAARRAYOFOBJECT_LOAD(_currentThread, handleTable, operation);\n+\n+\t\t\tif (NULL == methodHandleFromTable) {\n+\t\t\t\tprepareForExceptionThrow(_currentThread);\n+\t\t\t\tsetCurrentExceptionUTF(_currentThread, J9VMCONSTANTPOOL_JAVALANGUNSUPPORTEDOPERATIONEXCEPTION, NULL);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTcxMjI4NQ=="}, "originalCommit": {"oid": "3a4672ab7f03d4440988c82758ada838292dfb64"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDczMjU0OQ==", "bodyText": "I would rather we lookup the class, allocate an instance, and then throw with VM_VMHelpers::setExceptionPending than putting the class in the vm CP.\nTest cases will of course trigger the UnsupportedOperationException, real applications won't.  I'd rather optimize for real apps then tests :)", "url": "https://github.com/eclipse-openj9/openj9/pull/8501#discussion_r380732549", "createdAt": "2020-02-18T15:10:01Z", "author": {"login": "DanHeidinga"}, "path": "runtime/vm/MHInterpreter.cpp", "diffHunk": "@@ -555,6 +555,13 @@ VM_MHInterpreter::dispatchLoop(j9object_t methodHandle)\n \t\t\t/* Get MethodHandle for this operation from the VarHandle's handleTable */\n \t\t\tj9object_t handleTable = J9VMJAVALANGINVOKEVARHANDLE_HANDLETABLE(_currentThread, varHandle);\n \t\t\tj9object_t methodHandleFromTable = J9JAVAARRAYOFOBJECT_LOAD(_currentThread, handleTable, operation);\n+\n+\t\t\tif (NULL == methodHandleFromTable) {\n+\t\t\t\tprepareForExceptionThrow(_currentThread);\n+\t\t\t\tsetCurrentExceptionUTF(_currentThread, J9VMCONSTANTPOOL_JAVALANGUNSUPPORTEDOPERATIONEXCEPTION, NULL);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTcxMjI4NQ=="}, "originalCommit": {"oid": "3a4672ab7f03d4440988c82758ada838292dfb64"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzMzY5OA==", "bodyText": "Updated: look up the class + setExceptionPending to throw UnsupportedOperationException.", "url": "https://github.com/eclipse-openj9/openj9/pull/8501#discussion_r380933698", "createdAt": "2020-02-18T21:04:19Z", "author": {"login": "babsingh"}, "path": "runtime/vm/MHInterpreter.cpp", "diffHunk": "@@ -555,6 +555,13 @@ VM_MHInterpreter::dispatchLoop(j9object_t methodHandle)\n \t\t\t/* Get MethodHandle for this operation from the VarHandle's handleTable */\n \t\t\tj9object_t handleTable = J9VMJAVALANGINVOKEVARHANDLE_HANDLETABLE(_currentThread, varHandle);\n \t\t\tj9object_t methodHandleFromTable = J9JAVAARRAYOFOBJECT_LOAD(_currentThread, handleTable, operation);\n+\n+\t\t\tif (NULL == methodHandleFromTable) {\n+\t\t\t\tprepareForExceptionThrow(_currentThread);\n+\t\t\t\tsetCurrentExceptionUTF(_currentThread, J9VMCONSTANTPOOL_JAVALANGUNSUPPORTEDOPERATIONEXCEPTION, NULL);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTcxMjI4NQ=="}, "originalCommit": {"oid": "3a4672ab7f03d4440988c82758ada838292dfb64"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0OTQ0MTc1OnYy", "diffSide": "RIGHT", "path": "runtime/oti/vmconstantpool.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwMjo0Njo1OFrOFqHzOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNTowMTozM1rOFrFuww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTcxMjMxNQ==", "bodyText": "See comment below - this should be removed or if it can't be, have a version tag added", "url": "https://github.com/eclipse-openj9/openj9/pull/8501#discussion_r379712315", "createdAt": "2020-02-15T02:46:58Z", "author": {"login": "DanHeidinga"}, "path": "runtime/oti/vmconstantpool.xml", "diffHunk": "@@ -110,6 +110,7 @@ SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-excepti\n \t<classref name=\"java/lang/invoke/MutableCallSite\" flags=\"opt_methodHandle\"/>\n \t<classref name=\"java/lang/invoke/MethodType\" flags=\"opt_methodHandle\"/>\n \t<classref name=\"java/lang/invoke/WrongMethodTypeException\" flags=\"opt_methodHandle\"/>\n+\t<classref name=\"java/lang/UnsupportedOperationException\" flags=\"opt_methodHandle\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a4672ab7f03d4440988c82758ada838292dfb64"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDcyNjk3OQ==", "bodyText": "I have added a version tag for the above vmconstantpool entry:\n<classref name=\"java/lang/UnsupportedOperationException\" versions=\"14-\"/>", "url": "https://github.com/eclipse-openj9/openj9/pull/8501#discussion_r380726979", "createdAt": "2020-02-18T15:01:33Z", "author": {"login": "babsingh"}, "path": "runtime/oti/vmconstantpool.xml", "diffHunk": "@@ -110,6 +110,7 @@ SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-excepti\n \t<classref name=\"java/lang/invoke/MutableCallSite\" flags=\"opt_methodHandle\"/>\n \t<classref name=\"java/lang/invoke/MethodType\" flags=\"opt_methodHandle\"/>\n \t<classref name=\"java/lang/invoke/WrongMethodTypeException\" flags=\"opt_methodHandle\"/>\n+\t<classref name=\"java/lang/UnsupportedOperationException\" flags=\"opt_methodHandle\"/>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTcxMjMxNQ=="}, "originalCommit": {"oid": "3a4672ab7f03d4440988c82758ada838292dfb64"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3Nzc3NjY4OnYy", "diffSide": "RIGHT", "path": "runtime/vm/MHInterpreter.cpp", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNjowODo0MFrOFuMOHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDowMDowMlrOFuTQQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk3OTAzOQ==", "bodyText": "The stack needs to be walkable at this point as looking up the class may cause a GC or another exception to occur.\nThis gives us two options, move the prepareForExceptionThrow call before looking up the exception class so we have a clean stack, or build a MT frame here.\nMy preference is to build the MT frame as it will be easier to debug & service as the VarHandle will still be on the stack and findable with DDR.", "url": "https://github.com/eclipse-openj9/openj9/pull/8501#discussion_r383979039", "createdAt": "2020-02-25T16:08:40Z", "author": {"login": "DanHeidinga"}, "path": "runtime/vm/MHInterpreter.cpp", "diffHunk": "@@ -555,6 +555,26 @@ VM_MHInterpreter::dispatchLoop(j9object_t methodHandle)\n \t\t\t/* Get MethodHandle for this operation from the VarHandle's handleTable */\n \t\t\tj9object_t handleTable = J9VMJAVALANGINVOKEVARHANDLE_HANDLETABLE(_currentThread, varHandle);\n \t\t\tj9object_t methodHandleFromTable = J9JAVAARRAYOFOBJECT_LOAD(_currentThread, handleTable, operation);\n+\n+\t\t\tif (NULL == methodHandleFromTable) {\n+\t\t\t\tconst char *exceptionClassName = \"java/lang/UnsupportedOperationException\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f80a9f22c1c11619e080a683720251f74e6d0ad"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk4MjcyNA==", "bodyText": "Note, we won't tear down the frame as throwing the exception will handle it appropritately", "url": "https://github.com/eclipse-openj9/openj9/pull/8501#discussion_r383982724", "createdAt": "2020-02-25T16:14:05Z", "author": {"login": "DanHeidinga"}, "path": "runtime/vm/MHInterpreter.cpp", "diffHunk": "@@ -555,6 +555,26 @@ VM_MHInterpreter::dispatchLoop(j9object_t methodHandle)\n \t\t\t/* Get MethodHandle for this operation from the VarHandle's handleTable */\n \t\t\tj9object_t handleTable = J9VMJAVALANGINVOKEVARHANDLE_HANDLETABLE(_currentThread, varHandle);\n \t\t\tj9object_t methodHandleFromTable = J9JAVAARRAYOFOBJECT_LOAD(_currentThread, handleTable, operation);\n+\n+\t\t\tif (NULL == methodHandleFromTable) {\n+\t\t\t\tconst char *exceptionClassName = \"java/lang/UnsupportedOperationException\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk3OTAzOQ=="}, "originalCommit": {"oid": "1f80a9f22c1c11619e080a683720251f74e6d0ad"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA5NDI3Mw==", "bodyText": "Added buildMethodTypeFrame.", "url": "https://github.com/eclipse-openj9/openj9/pull/8501#discussion_r384094273", "createdAt": "2020-02-25T20:00:02Z", "author": {"login": "babsingh"}, "path": "runtime/vm/MHInterpreter.cpp", "diffHunk": "@@ -555,6 +555,26 @@ VM_MHInterpreter::dispatchLoop(j9object_t methodHandle)\n \t\t\t/* Get MethodHandle for this operation from the VarHandle's handleTable */\n \t\t\tj9object_t handleTable = J9VMJAVALANGINVOKEVARHANDLE_HANDLETABLE(_currentThread, varHandle);\n \t\t\tj9object_t methodHandleFromTable = J9JAVAARRAYOFOBJECT_LOAD(_currentThread, handleTable, operation);\n+\n+\t\t\tif (NULL == methodHandleFromTable) {\n+\t\t\t\tconst char *exceptionClassName = \"java/lang/UnsupportedOperationException\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk3OTAzOQ=="}, "originalCommit": {"oid": "1f80a9f22c1c11619e080a683720251f74e6d0ad"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MTg3MjI3OnYy", "diffSide": "RIGHT", "path": "runtime/vm/BytecodeInterpreter.hpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNjo0MzoxMVrOFuzV4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNjo0MzoxMVrOFuzV4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYyMDAwMA==", "bodyText": "@DanHeidinga New code to address the segfault seen in the four View-(BE|LE)-(On|Off)Heap_0 testcases. I couldn't build a method type frame since no method type is available. So, I ended up moving prepareForExceptionThrow before looking up the exception class.\nNew code is included in the following commit:\n\nHandle NULL VarHandle.handleTable entries in (Bytecode|MH)Interpreter", "url": "https://github.com/eclipse-openj9/openj9/pull/8501#discussion_r384620000", "createdAt": "2020-02-26T16:43:11Z", "author": {"login": "babsingh"}, "path": "runtime/vm/BytecodeInterpreter.hpp", "diffHunk": "@@ -8269,6 +8269,29 @@ done:;\n \t\t\t/* Get MethodHandle for this operation from the VarHandles handleTable */\n \t\t\tj9object_t handleTable = J9VMJAVALANGINVOKEVARHANDLE_HANDLETABLE(_currentThread, varHandle);\n \t\t\tj9object_t methodHandle = J9JAVAARRAYOFOBJECT_LOAD(_currentThread, handleTable, operation);\n+\n+\t\t\tif (NULL == methodHandle) {\n+\t\t\t\tprepareForExceptionThrow(_currentThread);\n+\n+\t\t\t\tconst char *exceptionClassName = \"java/lang/UnsupportedOperationException\";\n+\t\t\t\tJ9Class *exceptionClass = internalFindClassUTF8(\n+\t\t\t\t\t\t_currentThread,\n+\t\t\t\t\t\t(U_8 *)exceptionClassName,\n+\t\t\t\t\t\tstrlen(exceptionClassName),\n+\t\t\t\t\t\t_currentThread->javaVM->systemClassLoader,\n+\t\t\t\t\t\tJ9_FINDCLASS_FLAG_THROW_ON_FAIL);\n+\n+\t\t\t\tj9object_t exception = _objectAllocate.inlineAllocateObject(_currentThread, exceptionClass);\n+\t\t\t\tif (NULL == exception) {\n+\t\t\t\t\trc = THROW_HEAP_OOM;\n+\t\t\t\t\tgoto done;\n+\t\t\t\t}\n+\n+\t\t\t\tVM_VMHelpers::setExceptionPending(_currentThread, exception);\n+\t\t\t\trc = GOTO_THROW_CURRENT_EXCEPTION;\n+\t\t\t\tgoto done;\n+\t\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8caf911fe4154563ee39a61f42d357b43a547b7b"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MzkzNTQ2OnYy", "diffSide": "RIGHT", "path": "runtime/vm/BytecodeInterpreter.hpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjo1NTowMlrOFvG9qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjo1NTowMlrOFvG9qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk0MTQ4Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tif (NULL == methodHandle) {\n          \n          \n            \n            \t\t\tif (NULL == methodHandle) {\n          \n          \n            \n            \t\t\t\tupdateVMStruct(REGISTER_ARGS);", "url": "https://github.com/eclipse-openj9/openj9/pull/8501#discussion_r384941483", "createdAt": "2020-02-27T06:55:02Z", "author": {"login": "DanHeidinga"}, "path": "runtime/vm/BytecodeInterpreter.hpp", "diffHunk": "@@ -8269,6 +8269,29 @@ done:;\n \t\t\t/* Get MethodHandle for this operation from the VarHandles handleTable */\n \t\t\tj9object_t handleTable = J9VMJAVALANGINVOKEVARHANDLE_HANDLETABLE(_currentThread, varHandle);\n \t\t\tj9object_t methodHandle = J9JAVAARRAYOFOBJECT_LOAD(_currentThread, handleTable, operation);\n+\n+\t\t\tif (NULL == methodHandle) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1802734f729f8928588429aea01e55406b4584cd"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Mzk0MzA4OnYy", "diffSide": "RIGHT", "path": "runtime/vm/BytecodeInterpreter.hpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjo1ODoyNlrOFvHCBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjo1ODoyNlrOFvHCBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk0MjU5Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t\t\tJ9_FINDCLASS_FLAG_THROW_ON_FAIL);\n          \n          \n            \n            \t\t\t\t\t\tJ9_FINDCLASS_FLAG_THROW_ON_FAIL);\n          \n          \n            \n            \t\t\t\tVMStructHasBeenUpdated(REGISTER_ARGS);", "url": "https://github.com/eclipse-openj9/openj9/pull/8501#discussion_r384942596", "createdAt": "2020-02-27T06:58:26Z", "author": {"login": "DanHeidinga"}, "path": "runtime/vm/BytecodeInterpreter.hpp", "diffHunk": "@@ -8269,6 +8269,29 @@ done:;\n \t\t\t/* Get MethodHandle for this operation from the VarHandles handleTable */\n \t\t\tj9object_t handleTable = J9VMJAVALANGINVOKEVARHANDLE_HANDLETABLE(_currentThread, varHandle);\n \t\t\tj9object_t methodHandle = J9JAVAARRAYOFOBJECT_LOAD(_currentThread, handleTable, operation);\n+\n+\t\t\tif (NULL == methodHandle) {\n+\t\t\t\tprepareForExceptionThrow(_currentThread);\n+\n+\t\t\t\tconst char *exceptionClassName = \"java/lang/UnsupportedOperationException\";\n+\t\t\t\tJ9Class *exceptionClass = internalFindClassUTF8(\n+\t\t\t\t\t\t_currentThread,\n+\t\t\t\t\t\t(U_8 *)exceptionClassName,\n+\t\t\t\t\t\tstrlen(exceptionClassName),\n+\t\t\t\t\t\t_currentThread->javaVM->systemClassLoader,\n+\t\t\t\t\t\tJ9_FINDCLASS_FLAG_THROW_ON_FAIL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1802734f729f8928588429aea01e55406b4584cd"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Mzk1OTk2OnYy", "diffSide": "RIGHT", "path": "runtime/vm/BytecodeInterpreter.hpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNzowNzo1MlrOFvHMYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNzowNzo1MlrOFvHMYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk0NTI0OA==", "bodyText": "A null return here says that we can't allocate without doing a GC.  It's not going to have an exception pending.  Since we're on an error path, better to use the out of line allocate _vm->memoryManagerFunctions->J9AllocateObject(.\nThe prepareForExceptionThrow will have built a special frame for us already so we don't have to build another one here.\nWe will need to add a VMStructHasBeenUpdated(REGISTER_ARGS); after the J9AllocateObject call", "url": "https://github.com/eclipse-openj9/openj9/pull/8501#discussion_r384945248", "createdAt": "2020-02-27T07:07:52Z", "author": {"login": "DanHeidinga"}, "path": "runtime/vm/BytecodeInterpreter.hpp", "diffHunk": "@@ -8269,6 +8269,29 @@ done:;\n \t\t\t/* Get MethodHandle for this operation from the VarHandles handleTable */\n \t\t\tj9object_t handleTable = J9VMJAVALANGINVOKEVARHANDLE_HANDLETABLE(_currentThread, varHandle);\n \t\t\tj9object_t methodHandle = J9JAVAARRAYOFOBJECT_LOAD(_currentThread, handleTable, operation);\n+\n+\t\t\tif (NULL == methodHandle) {\n+\t\t\t\tprepareForExceptionThrow(_currentThread);\n+\n+\t\t\t\tconst char *exceptionClassName = \"java/lang/UnsupportedOperationException\";\n+\t\t\t\tJ9Class *exceptionClass = internalFindClassUTF8(\n+\t\t\t\t\t\t_currentThread,\n+\t\t\t\t\t\t(U_8 *)exceptionClassName,\n+\t\t\t\t\t\tstrlen(exceptionClassName),\n+\t\t\t\t\t\t_currentThread->javaVM->systemClassLoader,\n+\t\t\t\t\t\tJ9_FINDCLASS_FLAG_THROW_ON_FAIL);\n+\n+\t\t\t\tj9object_t exception = _objectAllocate.inlineAllocateObject(_currentThread, exceptionClass);\n+\t\t\t\tif (NULL == exception) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1802734f729f8928588429aea01e55406b4584cd"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Mzk2MzQ0OnYy", "diffSide": "RIGHT", "path": "runtime/vm/MHInterpreter.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNzowOToxMVrOFvHORQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNzowOToxMVrOFvHORQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk0NTczMw==", "bodyText": "Same issue here - the inlineAllocateObject only indicates if we can allocate without a GC or not.  When it returns null, we usually need to build a frame / make the stack walkable & then call the gc'ing version of the allocate helpers", "url": "https://github.com/eclipse-openj9/openj9/pull/8501#discussion_r384945733", "createdAt": "2020-02-27T07:09:11Z", "author": {"login": "DanHeidinga"}, "path": "runtime/vm/MHInterpreter.cpp", "diffHunk": "@@ -555,6 +555,33 @@ VM_MHInterpreter::dispatchLoop(j9object_t methodHandle)\n \t\t\t/* Get MethodHandle for this operation from the VarHandle's handleTable */\n \t\t\tj9object_t handleTable = J9VMJAVALANGINVOKEVARHANDLE_HANDLETABLE(_currentThread, varHandle);\n \t\t\tj9object_t methodHandleFromTable = J9JAVAARRAYOFOBJECT_LOAD(_currentThread, handleTable, operation);\n+\n+\t\t\tif (NULL == methodHandleFromTable) {\n+\t\t\t\t/* Building a method type (MT) frame makes the stack walkable since looking up the class below may\n+\t\t\t\t * cause a GC or another exception. Also, the MT frame will make it easier to debug and service the\n+\t\t\t\t * error as the VarHandle will be on the stack and findable with DDR. The MT frame does not need to\n+\t\t\t\t * be restored since throwing the exception will handle it appropriately.\n+\t\t\t\t */\n+\t\t\t\tbuildMethodTypeFrame(_currentThread, type);\n+\n+\t\t\t\tconst char *exceptionClassName = \"java/lang/UnsupportedOperationException\";\n+\t\t\t\tJ9Class *exceptionClass = internalFindClassUTF8(\n+\t\t\t\t\t\t_currentThread,\n+\t\t\t\t\t\t(U_8 *)exceptionClassName,\n+\t\t\t\t\t\tstrlen(exceptionClassName),\n+\t\t\t\t\t\t_currentThread->javaVM->systemClassLoader,\n+\t\t\t\t\t\tJ9_FINDCLASS_FLAG_THROW_ON_FAIL);\n+\n+\t\t\t\tj9object_t exception = _objectAllocate->inlineAllocateObject(_currentThread, exceptionClass);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1802734f729f8928588429aea01e55406b4584cd"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NjA3NTYzOnYy", "diffSide": "RIGHT", "path": "runtime/vm/BytecodeInterpreter.hpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNzo1NTo0MVrOFvbSeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMzowMDowMlrOFvkMNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI3NDQ4OA==", "bodyText": "Although the compiler will likely fold it, you can use the LITERAL_STRLEN macro instead of strlen here.", "url": "https://github.com/eclipse-openj9/openj9/pull/8501#discussion_r385274488", "createdAt": "2020-02-27T17:55:41Z", "author": {"login": "gacholio"}, "path": "runtime/vm/BytecodeInterpreter.hpp", "diffHunk": "@@ -8269,6 +8269,29 @@ done:;\n \t\t\t/* Get MethodHandle for this operation from the VarHandles handleTable */\n \t\t\tj9object_t handleTable = J9VMJAVALANGINVOKEVARHANDLE_HANDLETABLE(_currentThread, varHandle);\n \t\t\tj9object_t methodHandle = J9JAVAARRAYOFOBJECT_LOAD(_currentThread, handleTable, operation);\n+\n+\t\t\tif (NULL == methodHandle) {\n+\t\t\t\tprepareForExceptionThrow(_currentThread);\n+\n+\t\t\t\tconst char *exceptionClassName = \"java/lang/UnsupportedOperationException\";\n+\t\t\t\tJ9Class *exceptionClass = internalFindClassUTF8(\n+\t\t\t\t\t\t_currentThread,\n+\t\t\t\t\t\t(U_8 *)exceptionClassName,\n+\t\t\t\t\t\tstrlen(exceptionClassName),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1802734f729f8928588429aea01e55406b4584cd"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQyMDM0Mw==", "bodyText": "LITERAL_STRLEN doesn't work with const char *. it only works if a string is passed directly or as a macro.", "url": "https://github.com/eclipse-openj9/openj9/pull/8501#discussion_r385420343", "createdAt": "2020-02-27T23:00:02Z", "author": {"login": "babsingh"}, "path": "runtime/vm/BytecodeInterpreter.hpp", "diffHunk": "@@ -8269,6 +8269,29 @@ done:;\n \t\t\t/* Get MethodHandle for this operation from the VarHandles handleTable */\n \t\t\tj9object_t handleTable = J9VMJAVALANGINVOKEVARHANDLE_HANDLETABLE(_currentThread, varHandle);\n \t\t\tj9object_t methodHandle = J9JAVAARRAYOFOBJECT_LOAD(_currentThread, handleTable, operation);\n+\n+\t\t\tif (NULL == methodHandle) {\n+\t\t\t\tprepareForExceptionThrow(_currentThread);\n+\n+\t\t\t\tconst char *exceptionClassName = \"java/lang/UnsupportedOperationException\";\n+\t\t\t\tJ9Class *exceptionClass = internalFindClassUTF8(\n+\t\t\t\t\t\t_currentThread,\n+\t\t\t\t\t\t(U_8 *)exceptionClassName,\n+\t\t\t\t\t\tstrlen(exceptionClassName),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI3NDQ4OA=="}, "originalCommit": {"oid": "1802734f729f8928588429aea01e55406b4584cd"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDEwNjEyOnYy", "diffSide": "RIGHT", "path": "runtime/vm/MHInterpreter.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMDowODoyNlrOFwBbfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMDozNToyNVrOFwCFIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg5OTM4OQ==", "bodyText": "This still needs a methodtype frame to be built as we don't know what MH operations have lead to this point.  The stack needs to be kept walkable here", "url": "https://github.com/eclipse-openj9/openj9/pull/8501#discussion_r385899389", "createdAt": "2020-02-28T20:08:26Z", "author": {"login": "DanHeidinga"}, "path": "runtime/vm/MHInterpreter.cpp", "diffHunk": "@@ -555,6 +555,12 @@ VM_MHInterpreter::dispatchLoop(j9object_t methodHandle)\n \t\t\t/* Get MethodHandle for this operation from the VarHandle's handleTable */\n \t\t\tj9object_t handleTable = J9VMJAVALANGINVOKEVARHANDLE_HANDLETABLE(_currentThread, varHandle);\n \t\t\tj9object_t methodHandleFromTable = J9JAVAARRAYOFOBJECT_LOAD(_currentThread, handleTable, operation);\n+\n+\t\t\tif (NULL == methodHandleFromTable) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b56e1aaa07c0ae7b4935b885ed2a035b24beb29"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTkxMDA1MA==", "bodyText": "Re-added buildMethodTypeFrame.", "url": "https://github.com/eclipse-openj9/openj9/pull/8501#discussion_r385910050", "createdAt": "2020-02-28T20:35:25Z", "author": {"login": "babsingh"}, "path": "runtime/vm/MHInterpreter.cpp", "diffHunk": "@@ -555,6 +555,12 @@ VM_MHInterpreter::dispatchLoop(j9object_t methodHandle)\n \t\t\t/* Get MethodHandle for this operation from the VarHandle's handleTable */\n \t\t\tj9object_t handleTable = J9VMJAVALANGINVOKEVARHANDLE_HANDLETABLE(_currentThread, varHandle);\n \t\t\tj9object_t methodHandleFromTable = J9JAVAARRAYOFOBJECT_LOAD(_currentThread, handleTable, operation);\n+\n+\t\t\tif (NULL == methodHandleFromTable) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg5OTM4OQ=="}, "originalCommit": {"oid": "1b56e1aaa07c0ae7b4935b885ed2a035b24beb29"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDEwMjIxOnYy", "diffSide": "RIGHT", "path": "runtime/vm/exceptionsupport.c", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTo1MjozNVrOFwkuqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNjozMzowMlrOFwmYZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3NzczOA==", "bodyText": "Other callers of internalFindClassUTF8 that use J9_FINDCLASS_FLAG_THROW_ON_FAIL anticipate a NULL return value; J9AllocateObject will crash if exceptionClass  is NULL.", "url": "https://github.com/eclipse-openj9/openj9/pull/8501#discussion_r386477738", "createdAt": "2020-03-02T15:52:35Z", "author": {"login": "keithc-ca"}, "path": "runtime/vm/exceptionsupport.c", "diffHunk": "@@ -82,6 +82,33 @@ setCurrentExceptionNLS(J9VMThread * vmThread, UDATA exceptionNumber, U_32 module\n \tsetCurrentExceptionUTF(vmThread, exceptionNumber, msg);\n }\n \n+void\n+prepareExceptionUsingClassName(J9VMThread *vmThread, const char *exceptionClassName)\n+{\n+\tJ9Class *exceptionClass = NULL;\n+\tj9object_t exception = NULL;\n+\n+\tprepareForExceptionThrow(vmThread);\n+\n+\texceptionClass = internalFindClassUTF8(\n+\t\t\tvmThread,\n+\t\t\t(U_8 *)exceptionClassName,\n+\t\t\tstrlen(exceptionClassName),\n+\t\t\tvmThread->javaVM->systemClassLoader,\n+\t\t\tJ9_FINDCLASS_FLAG_THROW_ON_FAIL);\n+\n+\texception = vmThread->javaVM->memoryManagerFunctions->J9AllocateObject(\n+\t\t\tvmThread,\n+\t\t\texceptionClass,\n+\t\t\tJ9_GC_ALLOCATE_OBJECT_NON_INSTRUMENTABLE);\n+\n+\tif (J9_UNEXPECTED(NULL == exception)) {\n+\t\tsetHeapOutOfMemoryError(vmThread);\n+\t} else {\n+\t\tvmThread->currentException = exception;\n+\t\tvmThread->privateFlags |= J9_PRIVATE_FLAGS_REPORT_EXCEPTION_THROW;\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c32d79501136a9b352bcb353c9fbbc4e3a145c0"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ4NzQ2MA==", "bodyText": "Thanks for catching that @keithc-ca!  @babsingh can you put together a PR that adds the NULL check and port it to the 0.19 branch as well?", "url": "https://github.com/eclipse-openj9/openj9/pull/8501#discussion_r386487460", "createdAt": "2020-03-02T16:06:42Z", "author": {"login": "DanHeidinga"}, "path": "runtime/vm/exceptionsupport.c", "diffHunk": "@@ -82,6 +82,33 @@ setCurrentExceptionNLS(J9VMThread * vmThread, UDATA exceptionNumber, U_32 module\n \tsetCurrentExceptionUTF(vmThread, exceptionNumber, msg);\n }\n \n+void\n+prepareExceptionUsingClassName(J9VMThread *vmThread, const char *exceptionClassName)\n+{\n+\tJ9Class *exceptionClass = NULL;\n+\tj9object_t exception = NULL;\n+\n+\tprepareForExceptionThrow(vmThread);\n+\n+\texceptionClass = internalFindClassUTF8(\n+\t\t\tvmThread,\n+\t\t\t(U_8 *)exceptionClassName,\n+\t\t\tstrlen(exceptionClassName),\n+\t\t\tvmThread->javaVM->systemClassLoader,\n+\t\t\tJ9_FINDCLASS_FLAG_THROW_ON_FAIL);\n+\n+\texception = vmThread->javaVM->memoryManagerFunctions->J9AllocateObject(\n+\t\t\tvmThread,\n+\t\t\texceptionClass,\n+\t\t\tJ9_GC_ALLOCATE_OBJECT_NON_INSTRUMENTABLE);\n+\n+\tif (J9_UNEXPECTED(NULL == exception)) {\n+\t\tsetHeapOutOfMemoryError(vmThread);\n+\t} else {\n+\t\tvmThread->currentException = exception;\n+\t\tvmThread->privateFlags |= J9_PRIVATE_FLAGS_REPORT_EXCEPTION_THROW;\n+\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3NzczOA=="}, "originalCommit": {"oid": "0c32d79501136a9b352bcb353c9fbbc4e3a145c0"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUwNDgwNg==", "bodyText": "yes.", "url": "https://github.com/eclipse-openj9/openj9/pull/8501#discussion_r386504806", "createdAt": "2020-03-02T16:33:02Z", "author": {"login": "babsingh"}, "path": "runtime/vm/exceptionsupport.c", "diffHunk": "@@ -82,6 +82,33 @@ setCurrentExceptionNLS(J9VMThread * vmThread, UDATA exceptionNumber, U_32 module\n \tsetCurrentExceptionUTF(vmThread, exceptionNumber, msg);\n }\n \n+void\n+prepareExceptionUsingClassName(J9VMThread *vmThread, const char *exceptionClassName)\n+{\n+\tJ9Class *exceptionClass = NULL;\n+\tj9object_t exception = NULL;\n+\n+\tprepareForExceptionThrow(vmThread);\n+\n+\texceptionClass = internalFindClassUTF8(\n+\t\t\tvmThread,\n+\t\t\t(U_8 *)exceptionClassName,\n+\t\t\tstrlen(exceptionClassName),\n+\t\t\tvmThread->javaVM->systemClassLoader,\n+\t\t\tJ9_FINDCLASS_FLAG_THROW_ON_FAIL);\n+\n+\texception = vmThread->javaVM->memoryManagerFunctions->J9AllocateObject(\n+\t\t\tvmThread,\n+\t\t\texceptionClass,\n+\t\t\tJ9_GC_ALLOCATE_OBJECT_NON_INSTRUMENTABLE);\n+\n+\tif (J9_UNEXPECTED(NULL == exception)) {\n+\t\tsetHeapOutOfMemoryError(vmThread);\n+\t} else {\n+\t\tvmThread->currentException = exception;\n+\t\tvmThread->privateFlags |= J9_PRIVATE_FLAGS_REPORT_EXCEPTION_THROW;\n+\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3NzczOA=="}, "originalCommit": {"oid": "0c32d79501136a9b352bcb353c9fbbc4e3a145c0"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 697, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}