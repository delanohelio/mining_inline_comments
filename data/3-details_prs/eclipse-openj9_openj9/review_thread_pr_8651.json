{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5NDM2NTg2", "number": 8651, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMToxMzo0NFrODm6JBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMToxOTowMFrODm6L_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTI1MDYyOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/aarch64/runtime/PicBuilder.spp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMToxMzo0NFrOF0mOZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMToxMzo0NFrOF0mOZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY5NjU0OA==", "bodyText": "This was already defined on L114.  Should be J9TR_ICSnippet_TargetAddr2?", "url": "https://github.com/eclipse-openj9/openj9/pull/8651#discussion_r390696548", "createdAt": "2020-03-11T01:13:44Z", "author": {"login": "0xdaryl"}, "path": "runtime/compiler/aarch64/runtime/PicBuilder.spp", "diffHunk": "@@ -108,7 +109,12 @@\n \t.set\tJ9TR_UICSnippet_CP,\t\t8\n \t.set\tJ9TR_UICSnippet_CPIndex,\t16\n \t.set\tJ9TR_ICSnippet_InterfaceClass,\t24\n-\t.set\tJ9TR_ICSnippet_MethodIndex,\t32\n+\t.set\tJ9TR_ICSnippet_ITableIndex,\t32\n+\t.set\tJ9TR_ICSnippet_Class1,\t\t40\n+\t.set\tJ9TR_ICSnippet_TargetAddr1,\t48\n+\t.set\tJ9TR_ICSnippet_Class2,\t\t56\n+\t.set\tJ9TR_ICSnippet_TargetAddr1,\t64", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d82cf87a9b31af42b22265de7de845b805466ba"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTI1ODIyOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/aarch64/codegen/CallSnippet.cpp", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMToxOTowMFrOF0mTBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwMDowNToxOVrOF1NVBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY5NzczNA==", "bodyText": "What is the purpose of these fields?  Are they for building an interface PIC?  If I understand the code in this PR correctly, they are introduced but not used in this PR.  I would say your commit message should at least comment on the fact that you're introducing them here, but the actual PIC mechanics will be completed later.", "url": "https://github.com/eclipse-openj9/openj9/pull/8651#discussion_r390697734", "createdAt": "2020-03-11T01:19:00Z", "author": {"login": "0xdaryl"}, "path": "runtime/compiler/aarch64/codegen/CallSnippet.cpp", "diffHunk": "@@ -508,44 +508,97 @@ uint32_t TR::ARM64VirtualUnresolvedSnippet::getLength(int32_t estimatedSnippetSt\n \n uint8_t *TR::ARM64InterfaceCallSnippet::emitSnippetBody()\n    {\n+   TR::Compilation *comp = cg()->comp();\n    uint8_t *cursor = cg()->getBinaryBufferCursor();\n+   TR::Node *callNode = getNode();\n    TR::SymbolReference *methodSymRef = getNode()->getSymbolReference();\n    TR::SymbolReference *glueRef = cg()->symRefTab()->findOrCreateRuntimeHelper(TR_ARM64interfaceCallHelper, false, false, false);\n+   TR_J9VMBase *fej9 = (TR_J9VMBase *)(comp->fe());\n+   void* thunk = fej9->getJ2IThunk(callNode->getSymbolReference()->getSymbol()->castToMethodSymbol()->getMethod(), comp);\n \n    getSnippetLabel()->setCodeLocation(cursor);\n \n    // bl glueRef\n-   *(int32_t *)cursor = cg()->encodeHelperBranchAndLink(glueRef, cursor, getNode());\n-   cursor += 4;\n+   *(int32_t *)cursor = cg()->encodeHelperBranchAndLink(glueRef, cursor, callNode);\n+   uint8_t *blAddress = cursor;\n+   cursor += ARM64_INSTRUCTION_LENGTH;\n \n    // Store the code cache RA\n    *(intptrj_t *)cursor = (intptrj_t)getReturnLabel()->getCodeLocation();\n    cg()->addExternalRelocation(new (cg()->trHeapMemory()) TR::ExternalRelocation(\n                                cursor,\n                                NULL,\n                                TR_AbsoluteMethodAddress, cg()),\n-                               __FILE__, __LINE__, getNode());\n-   cursor += 8;\n+                               __FILE__, __LINE__, callNode);\n+   cursor += sizeof(intptrj_t);\n \n    // CP\n-   *(intptrj_t *)cursor = (intptrj_t)methodSymRef->getOwningMethod(cg()->comp())->constantPool();\n-   cg()->addExternalRelocation(new (cg()->trHeapMemory()) TR::ExternalRelocation(\n-                               cursor,\n-                               *(uint8_t **)cursor,\n-                               getNode() ? (uint8_t *)getNode()->getInlinedSiteIndex() : (uint8_t *)-1,\n-                               TR_Thunks, cg()),\n-                               __FILE__, __LINE__, getNode());\n-   cursor += 8;\n+   intptrj_t cpAddr = (intptrj_t)methodSymRef->getOwningMethod(comp)->constantPool();\n+   *(intptrj_t *)cursor = cpAddr;\n+   uint8_t *j2iThunkRelocationPoint = cursor;\n+   cursor += sizeof(intptrj_t);\n \n    // CP index\n    *(intptrj_t *)cursor = methodSymRef->getCPIndexForVM();\n-   cursor += 8;\n+   cursor += sizeof(intptrj_t);\n \n-   // Add 2 more slots for resolved values (interface class and iTable offset)\n+   // 2 slots for resolved values (interface class and iTable index)\n    *(intptrj_t *)cursor = 0;\n-   cursor += 8;\n+   cursor += sizeof(intptrj_t);\n    *(intptrj_t *)cursor = 0;\n-   cursor += 8;\n+   cursor += sizeof(intptrj_t);\n+\n+   // Initialize for: two class ptrs, two target addrs\n+   // Initialize target addrs with the address of the bl\n+   *(intptrj_t *)cursor = -1;\n+   *(intptrj_t *)(cursor+sizeof(intptrj_t)) = (intptrj_t)blAddress;\n+   *(intptrj_t *)(cursor+2*sizeof(intptrj_t)) = -1;\n+   *(intptrj_t *)(cursor+3*sizeof(intptrj_t)) = (intptrj_t)blAddress;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d82cf87a9b31af42b22265de7de845b805466ba"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMzNzIyMA==", "bodyText": "Updated the code removing the unused snippet fields.", "url": "https://github.com/eclipse-openj9/openj9/pull/8651#discussion_r391337220", "createdAt": "2020-03-12T00:05:19Z", "author": {"login": "knn-k"}, "path": "runtime/compiler/aarch64/codegen/CallSnippet.cpp", "diffHunk": "@@ -508,44 +508,97 @@ uint32_t TR::ARM64VirtualUnresolvedSnippet::getLength(int32_t estimatedSnippetSt\n \n uint8_t *TR::ARM64InterfaceCallSnippet::emitSnippetBody()\n    {\n+   TR::Compilation *comp = cg()->comp();\n    uint8_t *cursor = cg()->getBinaryBufferCursor();\n+   TR::Node *callNode = getNode();\n    TR::SymbolReference *methodSymRef = getNode()->getSymbolReference();\n    TR::SymbolReference *glueRef = cg()->symRefTab()->findOrCreateRuntimeHelper(TR_ARM64interfaceCallHelper, false, false, false);\n+   TR_J9VMBase *fej9 = (TR_J9VMBase *)(comp->fe());\n+   void* thunk = fej9->getJ2IThunk(callNode->getSymbolReference()->getSymbol()->castToMethodSymbol()->getMethod(), comp);\n \n    getSnippetLabel()->setCodeLocation(cursor);\n \n    // bl glueRef\n-   *(int32_t *)cursor = cg()->encodeHelperBranchAndLink(glueRef, cursor, getNode());\n-   cursor += 4;\n+   *(int32_t *)cursor = cg()->encodeHelperBranchAndLink(glueRef, cursor, callNode);\n+   uint8_t *blAddress = cursor;\n+   cursor += ARM64_INSTRUCTION_LENGTH;\n \n    // Store the code cache RA\n    *(intptrj_t *)cursor = (intptrj_t)getReturnLabel()->getCodeLocation();\n    cg()->addExternalRelocation(new (cg()->trHeapMemory()) TR::ExternalRelocation(\n                                cursor,\n                                NULL,\n                                TR_AbsoluteMethodAddress, cg()),\n-                               __FILE__, __LINE__, getNode());\n-   cursor += 8;\n+                               __FILE__, __LINE__, callNode);\n+   cursor += sizeof(intptrj_t);\n \n    // CP\n-   *(intptrj_t *)cursor = (intptrj_t)methodSymRef->getOwningMethod(cg()->comp())->constantPool();\n-   cg()->addExternalRelocation(new (cg()->trHeapMemory()) TR::ExternalRelocation(\n-                               cursor,\n-                               *(uint8_t **)cursor,\n-                               getNode() ? (uint8_t *)getNode()->getInlinedSiteIndex() : (uint8_t *)-1,\n-                               TR_Thunks, cg()),\n-                               __FILE__, __LINE__, getNode());\n-   cursor += 8;\n+   intptrj_t cpAddr = (intptrj_t)methodSymRef->getOwningMethod(comp)->constantPool();\n+   *(intptrj_t *)cursor = cpAddr;\n+   uint8_t *j2iThunkRelocationPoint = cursor;\n+   cursor += sizeof(intptrj_t);\n \n    // CP index\n    *(intptrj_t *)cursor = methodSymRef->getCPIndexForVM();\n-   cursor += 8;\n+   cursor += sizeof(intptrj_t);\n \n-   // Add 2 more slots for resolved values (interface class and iTable offset)\n+   // 2 slots for resolved values (interface class and iTable index)\n    *(intptrj_t *)cursor = 0;\n-   cursor += 8;\n+   cursor += sizeof(intptrj_t);\n    *(intptrj_t *)cursor = 0;\n-   cursor += 8;\n+   cursor += sizeof(intptrj_t);\n+\n+   // Initialize for: two class ptrs, two target addrs\n+   // Initialize target addrs with the address of the bl\n+   *(intptrj_t *)cursor = -1;\n+   *(intptrj_t *)(cursor+sizeof(intptrj_t)) = (intptrj_t)blAddress;\n+   *(intptrj_t *)(cursor+2*sizeof(intptrj_t)) = -1;\n+   *(intptrj_t *)(cursor+3*sizeof(intptrj_t)) = (intptrj_t)blAddress;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY5NzczNA=="}, "originalCommit": {"oid": "2d82cf87a9b31af42b22265de7de845b805466ba"}, "originalPosition": 65}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 609, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}