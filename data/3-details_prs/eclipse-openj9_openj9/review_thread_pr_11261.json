{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2NjE1MTY1", "number": 11261, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNTowMTozOVrOE_qTkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yOVQxNDozOToyM1rOFrpuGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MTg4ODgxOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/ilgen/Walker.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNTowMTozOVrOH9fKZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxODowMDo0OFrOH9nd3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDIzNTc1MA==", "bodyText": "I think the comment you have in your commit message is a better description of this code.  Could you use something like that instead?\n// invokehandle/invokedynamic bytecode implicitly push an object from side\n// table as the last argument of the call. This is part of the behavior of\n// the bytecode in OpenJDK MethodHandle implementation. The object should\n// not be stashed because the interpreter will load the object itself.\n//", "url": "https://github.com/eclipse-openj9/openj9/pull/11261#discussion_r534235750", "createdAt": "2020-12-02T15:01:39Z", "author": {"login": "0xdaryl"}, "path": "runtime/compiler/ilgen/Walker.cpp", "diffHunk": "@@ -1672,6 +1672,15 @@ TR_J9ByteCodeIlGenerator::stashArgumentsForOSR(TR_J9ByteCode byteCode)\n    TR::MethodSymbol *symbol = symRef->getSymbol()->castToMethodSymbol();\n    int32_t numArgs = symbol->getMethod()->numberOfExplicitParameters() + (symbol->isStatic() ? 0 : 1);\n \n+#if defined(J9VM_OPT_OPENJDK_METHODHANDLE)\n+   // The method expects one more argument than we need to stashed, which is the appendix object\n+   // from side table. Interpreter will load the object itself", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d256a8fe0c783052923b57f15bd2f2b99d8cedf"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM3MTgwNg==", "bodyText": "Thanks. I've put more detailed comment there", "url": "https://github.com/eclipse-openj9/openj9/pull/11261#discussion_r534371806", "createdAt": "2020-12-02T18:00:48Z", "author": {"login": "liqunl"}, "path": "runtime/compiler/ilgen/Walker.cpp", "diffHunk": "@@ -1672,6 +1672,15 @@ TR_J9ByteCodeIlGenerator::stashArgumentsForOSR(TR_J9ByteCode byteCode)\n    TR::MethodSymbol *symbol = symRef->getSymbol()->castToMethodSymbol();\n    int32_t numArgs = symbol->getMethod()->numberOfExplicitParameters() + (symbol->isStatic() ? 0 : 1);\n \n+#if defined(J9VM_OPT_OPENJDK_METHODHANDLE)\n+   // The method expects one more argument than we need to stashed, which is the appendix object\n+   // from side table. Interpreter will load the object itself", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDIzNTc1MA=="}, "originalCommit": {"oid": "7d256a8fe0c783052923b57f15bd2f2b99d8cedf"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzgxMzA5ODk5OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/ilgen/Walker.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yOVQxNDoyNjo1MVrOI_ZBTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yOVQxNDoyNjo1MVrOI_ZBTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMzM0MTEzNQ==", "bodyText": "sp:  whether", "url": "https://github.com/eclipse-openj9/openj9/pull/11261#discussion_r603341135", "createdAt": "2021-03-29T14:26:51Z", "author": {"login": "0xdaryl"}, "path": "runtime/compiler/ilgen/Walker.cpp", "diffHunk": "@@ -1672,6 +1674,36 @@ TR_J9ByteCodeIlGenerator::stashArgumentsForOSR(TR_J9ByteCode byteCode)\n    TR::MethodSymbol *symbol = symRef->getSymbol()->castToMethodSymbol();\n    int32_t numArgs = symbol->getMethod()->numberOfExplicitParameters() + (symbol->isStatic() ? 0 : 1);\n \n+#if defined(J9VM_OPT_OPENJDK_METHODHANDLE)\n+   // invokehandle/invokedynamic bytecode implicitly push an object from side\n+   // table as the last argument of the call. This is part of the behavior of\n+   // the bytecode in Openjdk MethodHandle implementation. The object should\n+   // not be stashed.\n+   // The unresolved case will have one more implicit argument pushed onto the stack,\n+   // as the MemberName from side table is unknown, the target method is not known at\n+   // compile time, thus, the JIT uses MethodHandle.linkToStatic to represent the call.\n+   // MethodHandle.linkToStatic expects the last argument to be MemberName object\n+   //\n+   // Resolved case:\n+   // adapter(arg1, arg2, ..., argN, appendixObject)\n+   // Unresolved case:\n+   // MethodHandle.linkToStatic(arg1, arg2, ..., argN, appendixObject, MemberName)\n+   //\n+   // Notice that we always generate a resolved call, thus we use unresolvedInCP to tell\n+   // us whehter the side table entry is resolved", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d49096b3f686341762767fef4069510abb105f8a"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzgxMzE2NjM1OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/ilgen/Walker.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yOVQxNDozOToyM1rOI_Zpvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yOVQxNDozOToyM1rOI_Zpvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMzM1MTQ4Nw==", "bodyText": "Can you also make it clear in the comment here that the MemberName object isn't being stashed either.  At least that's what I think is happening based on the code below.", "url": "https://github.com/eclipse-openj9/openj9/pull/11261#discussion_r603351487", "createdAt": "2021-03-29T14:39:23Z", "author": {"login": "0xdaryl"}, "path": "runtime/compiler/ilgen/Walker.cpp", "diffHunk": "@@ -1672,6 +1674,36 @@ TR_J9ByteCodeIlGenerator::stashArgumentsForOSR(TR_J9ByteCode byteCode)\n    TR::MethodSymbol *symbol = symRef->getSymbol()->castToMethodSymbol();\n    int32_t numArgs = symbol->getMethod()->numberOfExplicitParameters() + (symbol->isStatic() ? 0 : 1);\n \n+#if defined(J9VM_OPT_OPENJDK_METHODHANDLE)\n+   // invokehandle/invokedynamic bytecode implicitly push an object from side\n+   // table as the last argument of the call. This is part of the behavior of\n+   // the bytecode in Openjdk MethodHandle implementation. The object should\n+   // not be stashed.\n+   // The unresolved case will have one more implicit argument pushed onto the stack,\n+   // as the MemberName from side table is unknown, the target method is not known at\n+   // compile time, thus, the JIT uses MethodHandle.linkToStatic to represent the call.\n+   // MethodHandle.linkToStatic expects the last argument to be MemberName object", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d49096b3f686341762767fef4069510abb105f8a"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 964, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}