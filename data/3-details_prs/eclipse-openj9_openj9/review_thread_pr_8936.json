{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxNzIzMjg5", "number": 8936, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMDoyNDo0MFrODqASjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxOTowNzozOVrODwh-IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzcxNTMyOnYy", "diffSide": "RIGHT", "path": "runtime/oti/j9nonbuilder.h", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMDoyNDo0MFrOF5iKuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMToxODowMVrOF5jdbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg3Mjk1NQ==", "bodyText": "Should be J9JAVAVM not J9VMTHREAD", "url": "https://github.com/eclipse-openj9/openj9/pull/8936#discussion_r395872955", "createdAt": "2020-03-20T20:24:40Z", "author": {"login": "gacholio"}, "path": "runtime/oti/j9nonbuilder.h", "diffHunk": "@@ -5179,7 +5183,11 @@ typedef struct J9JavaVM {\n #if defined(OMR_GC_COMPRESSED_POINTERS)\n #if defined(OMR_GC_FULL_POINTERS)\n /* Mixed mode - necessarily 64-bit */\n+#if defined(J9_OVERRIDE_COMPRESS_OBJECT_REFERENCES)\n+#define J9VMTHREAD_COMPRESS_OBJECT_REFERENCES(vmThread) J9_OVERRIDE_COMPRESS_OBJECT_REFERENCES", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de9ab8f6ad3a14c62b928c704308f5223f82c652"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg5NDEyNw==", "bodyText": "fixed", "url": "https://github.com/eclipse-openj9/openj9/pull/8936#discussion_r395894127", "createdAt": "2020-03-20T21:18:01Z", "author": {"login": "sharon-wang"}, "path": "runtime/oti/j9nonbuilder.h", "diffHunk": "@@ -5179,7 +5183,11 @@ typedef struct J9JavaVM {\n #if defined(OMR_GC_COMPRESSED_POINTERS)\n #if defined(OMR_GC_FULL_POINTERS)\n /* Mixed mode - necessarily 64-bit */\n+#if defined(J9_OVERRIDE_COMPRESS_OBJECT_REFERENCES)\n+#define J9VMTHREAD_COMPRESS_OBJECT_REFERENCES(vmThread) J9_OVERRIDE_COMPRESS_OBJECT_REFERENCES", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg3Mjk1NQ=="}, "originalCommit": {"oid": "de9ab8f6ad3a14c62b928c704308f5223f82c652"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODQ3OTQ2OnYy", "diffSide": "RIGHT", "path": "runtime/vm/BytecodeInterpreterFull.cpp", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjozNzo0NFrOF6OAAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjo1Mzo1OVrOF6OuEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU5MTEwNw==", "bodyText": "Rather than doing this, I think it would be better to hoist the class/loop names out into the wrapper .cpp files.", "url": "https://github.com/eclipse-openj9/openj9/pull/8936#discussion_r396591107", "createdAt": "2020-03-23T16:37:44Z", "author": {"login": "gacholio"}, "path": "runtime/vm/BytecodeInterpreterFull.cpp", "diffHunk": "@@ -0,0 +1,29 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+\n+#include \"j9cfg.h\"\n+\n+#if defined(OMR_GC_FULL_POINTERS)\n+#define J9_OVERRIDE_COMPRESS_OBJECT_REFERENCES FALSE\n+#define FULL_VERSION", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86defc7de6d3544ddbba6e4b422b34e0d8f8faa0"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU5NTQ0Nw==", "bodyText": "I will move #define LOOP_NAME bytecodeLoopFull, #define INTERPRETER_CLASS VM_BytecodeInterpreterFull etc to be declared per wrapper file. Each wrapper file will still include BytecodeInterpreter.inc, and the rest of the .inc will remain the same?", "url": "https://github.com/eclipse-openj9/openj9/pull/8936#discussion_r396595447", "createdAt": "2020-03-23T16:43:42Z", "author": {"login": "sharon-wang"}, "path": "runtime/vm/BytecodeInterpreterFull.cpp", "diffHunk": "@@ -0,0 +1,29 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+\n+#include \"j9cfg.h\"\n+\n+#if defined(OMR_GC_FULL_POINTERS)\n+#define J9_OVERRIDE_COMPRESS_OBJECT_REFERENCES FALSE\n+#define FULL_VERSION", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU5MTEwNw=="}, "originalCommit": {"oid": "86defc7de6d3544ddbba6e4b422b34e0d8f8faa0"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYwMjg5Nw==", "bodyText": "Sounds good - please do the same for the debug interpreter (though you will still need to define DEBUG_VERSION for that case).", "url": "https://github.com/eclipse-openj9/openj9/pull/8936#discussion_r396602897", "createdAt": "2020-03-23T16:53:59Z", "author": {"login": "gacholio"}, "path": "runtime/vm/BytecodeInterpreterFull.cpp", "diffHunk": "@@ -0,0 +1,29 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+\n+#include \"j9cfg.h\"\n+\n+#if defined(OMR_GC_FULL_POINTERS)\n+#define J9_OVERRIDE_COMPRESS_OBJECT_REFERENCES FALSE\n+#define FULL_VERSION", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU5MTEwNw=="}, "originalCommit": {"oid": "86defc7de6d3544ddbba6e4b422b34e0d8f8faa0"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODQ4MzIyOnYy", "diffSide": "RIGHT", "path": "runtime/makelib/targets.mk.zos.inc.ftl", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjozODozOFrOF6OCeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjo1OTo1OVrOF6O-7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU5MTczNg==", "bodyText": "There seems to be multiple entries for each interpreter in the makefiles.", "url": "https://github.com/eclipse-openj9/openj9/pull/8936#discussion_r396591736", "createdAt": "2020-03-23T16:38:38Z", "author": {"login": "gacholio"}, "path": "runtime/makelib/targets.mk.zos.inc.ftl", "diffHunk": "@@ -126,7 +126,17 @@ endif\n MRABIG = -Wc,\"TBYDBG(-qdebug=MRABIG)\"\n SPECIALCXXFLAGS = $(filter-out -Wc$(COMMA)debug -O3,$(CXXFLAGS))\n NEW_OPTIMIZATION_FLAG = -O2 -Wc,\"TBYDBG(-qdebug=lincomm:ptranl:tfbagg)\" -Wc,\"FEDBG(-qxflag=InlineDespiteVolatileInArgs)\"\n-BytecodeInterpreter.o : BytecodeInterpreter.cpp\n+\n+BytecodeInterpreterFull.o : BytecodeInterpreterFull.cpp\n+\t$(CXX) $(SPECIALCXXFLAGS) $(MRABIG) $(NEW_OPTIMIZATION_FLAG) -c $< > $*.asmlist\n+\n+BytecodeInterpreterCompressed.o : BytecodeInterpreterCompressed.cpp\n+\t$(CXX) $(SPECIALCXXFLAGS) $(MRABIG) $(NEW_OPTIMIZATION_FLAG) -c $< > $*.asmlist\n+\n+BytecodeInterpreterFull.o : BytecodeInterpreterFull.cpp\n+\t$(CXX) $(SPECIALCXXFLAGS) $(MRABIG) $(NEW_OPTIMIZATION_FLAG) -c $< > $*.asmlist\n+\n+BytecodeInterpreterCompressed.o : BytecodeInterpreterCompressed.cpp", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86defc7de6d3544ddbba6e4b422b34e0d8f8faa0"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYwNzIxNQ==", "bodyText": "fixed", "url": "https://github.com/eclipse-openj9/openj9/pull/8936#discussion_r396607215", "createdAt": "2020-03-23T16:59:59Z", "author": {"login": "sharon-wang"}, "path": "runtime/makelib/targets.mk.zos.inc.ftl", "diffHunk": "@@ -126,7 +126,17 @@ endif\n MRABIG = -Wc,\"TBYDBG(-qdebug=MRABIG)\"\n SPECIALCXXFLAGS = $(filter-out -Wc$(COMMA)debug -O3,$(CXXFLAGS))\n NEW_OPTIMIZATION_FLAG = -O2 -Wc,\"TBYDBG(-qdebug=lincomm:ptranl:tfbagg)\" -Wc,\"FEDBG(-qxflag=InlineDespiteVolatileInArgs)\"\n-BytecodeInterpreter.o : BytecodeInterpreter.cpp\n+\n+BytecodeInterpreterFull.o : BytecodeInterpreterFull.cpp\n+\t$(CXX) $(SPECIALCXXFLAGS) $(MRABIG) $(NEW_OPTIMIZATION_FLAG) -c $< > $*.asmlist\n+\n+BytecodeInterpreterCompressed.o : BytecodeInterpreterCompressed.cpp\n+\t$(CXX) $(SPECIALCXXFLAGS) $(MRABIG) $(NEW_OPTIMIZATION_FLAG) -c $< > $*.asmlist\n+\n+BytecodeInterpreterFull.o : BytecodeInterpreterFull.cpp\n+\t$(CXX) $(SPECIALCXXFLAGS) $(MRABIG) $(NEW_OPTIMIZATION_FLAG) -c $< > $*.asmlist\n+\n+BytecodeInterpreterCompressed.o : BytecodeInterpreterCompressed.cpp", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU5MTczNg=="}, "originalCommit": {"oid": "86defc7de6d3544ddbba6e4b422b34e0d8f8faa0"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODYwOTgyOnYy", "diffSide": "RIGHT", "path": "runtime/vm/jvminit.c", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNzowODoxM1rOF6PU2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNzoyMjowN1rOF6P7eQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYxMjgyNw==", "bodyText": "This code needs to be ifdeffed also - you can only refer to the full/compressed loop function if the appropriate flag is defined (since the interpreter files are compiled undef ifdef).", "url": "https://github.com/eclipse-openj9/openj9/pull/8936#discussion_r396612827", "createdAt": "2020-03-23T17:08:13Z", "author": {"login": "gacholio"}, "path": "runtime/vm/jvminit.c", "diffHunk": "@@ -2452,9 +2452,13 @@ IDATA VMInitStages(J9JavaVM *vm, IDATA stage, void* reserved) {\n #endif /* J9VM_INTERP_ATOMIC_FREE_JNI_USES_FLUSH */\n \t\t\tTRIGGER_J9HOOK_VM_ABOUT_TO_BOOTSTRAP(vm->hookInterface, vm->mainThread);\n \t\t\t/* At this point, the decision about which interpreter to use has been made */\n-\t\t\tvm->bytecodeLoop = J9_ARE_ANY_BITS_SET(vm->extendedRuntimeFlags, J9_EXTENDED_RUNTIME_DEBUG_MODE)\n-\t\t\t\t\t? (void*)debugBytecodeLoop\n-\t\t\t\t\t: (void*)bytecodeLoop;\n+\t\t\tif (J9_ARE_ANY_BITS_SET(vm->extendedRuntimeFlags, J9_EXTENDED_RUNTIME_DEBUG_MODE)) {\n+\t\t\t\tvm->bytecodeLoop = (void*)debugBytecodeLoop;\n+\t\t\t} else {\n+\t\t\t\tvm->bytecodeLoop = (J9VMTHREAD_COMPRESS_OBJECT_REFERENCES(vmThread))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "843405d3f725597ae4510df098de8a0fb81283c3"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYyMjcxMw==", "bodyText": "added the appropriate ifdefs", "url": "https://github.com/eclipse-openj9/openj9/pull/8936#discussion_r396622713", "createdAt": "2020-03-23T17:22:07Z", "author": {"login": "sharon-wang"}, "path": "runtime/vm/jvminit.c", "diffHunk": "@@ -2452,9 +2452,13 @@ IDATA VMInitStages(J9JavaVM *vm, IDATA stage, void* reserved) {\n #endif /* J9VM_INTERP_ATOMIC_FREE_JNI_USES_FLUSH */\n \t\t\tTRIGGER_J9HOOK_VM_ABOUT_TO_BOOTSTRAP(vm->hookInterface, vm->mainThread);\n \t\t\t/* At this point, the decision about which interpreter to use has been made */\n-\t\t\tvm->bytecodeLoop = J9_ARE_ANY_BITS_SET(vm->extendedRuntimeFlags, J9_EXTENDED_RUNTIME_DEBUG_MODE)\n-\t\t\t\t\t? (void*)debugBytecodeLoop\n-\t\t\t\t\t: (void*)bytecodeLoop;\n+\t\t\tif (J9_ARE_ANY_BITS_SET(vm->extendedRuntimeFlags, J9_EXTENDED_RUNTIME_DEBUG_MODE)) {\n+\t\t\t\tvm->bytecodeLoop = (void*)debugBytecodeLoop;\n+\t\t\t} else {\n+\t\t\t\tvm->bytecodeLoop = (J9VMTHREAD_COMPRESS_OBJECT_REFERENCES(vmThread))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYxMjgyNw=="}, "originalCommit": {"oid": "843405d3f725597ae4510df098de8a0fb81283c3"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTQ5NTMyOnYy", "diffSide": "RIGHT", "path": "runtime/vm/jvminit.c", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMTowODowOVrOF6YKYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMToxNzoyOFrOF6Ycxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc1NzYwMg==", "bodyText": "This needs to be J9JAVAVM_COMPRESS_OBJECT_REFERENCES(vm)", "url": "https://github.com/eclipse-openj9/openj9/pull/8936#discussion_r396757602", "createdAt": "2020-03-23T21:08:09Z", "author": {"login": "gacholio"}, "path": "runtime/vm/jvminit.c", "diffHunk": "@@ -2452,9 +2452,19 @@ IDATA VMInitStages(J9JavaVM *vm, IDATA stage, void* reserved) {\n #endif /* J9VM_INTERP_ATOMIC_FREE_JNI_USES_FLUSH */\n \t\t\tTRIGGER_J9HOOK_VM_ABOUT_TO_BOOTSTRAP(vm->hookInterface, vm->mainThread);\n \t\t\t/* At this point, the decision about which interpreter to use has been made */\n-\t\t\tvm->bytecodeLoop = J9_ARE_ANY_BITS_SET(vm->extendedRuntimeFlags, J9_EXTENDED_RUNTIME_DEBUG_MODE)\n-\t\t\t\t\t? (void*)debugBytecodeLoop\n-\t\t\t\t\t: (void*)bytecodeLoop;\n+\t\t\tif (J9_ARE_ANY_BITS_SET(vm->extendedRuntimeFlags, J9_EXTENDED_RUNTIME_DEBUG_MODE)) {\n+\t\t\t\tvm->bytecodeLoop = (void*)debugBytecodeLoop;\n+\t\t\t} else {\n+\t\t\t\tif (J9VMTHREAD_COMPRESS_OBJECT_REFERENCES(vmThread)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dbd86a95f670600c97321e9e3d1da0d0f2a7ef9"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc2MjMxMA==", "bodyText": "fixed", "url": "https://github.com/eclipse-openj9/openj9/pull/8936#discussion_r396762310", "createdAt": "2020-03-23T21:17:28Z", "author": {"login": "sharon-wang"}, "path": "runtime/vm/jvminit.c", "diffHunk": "@@ -2452,9 +2452,19 @@ IDATA VMInitStages(J9JavaVM *vm, IDATA stage, void* reserved) {\n #endif /* J9VM_INTERP_ATOMIC_FREE_JNI_USES_FLUSH */\n \t\t\tTRIGGER_J9HOOK_VM_ABOUT_TO_BOOTSTRAP(vm->hookInterface, vm->mainThread);\n \t\t\t/* At this point, the decision about which interpreter to use has been made */\n-\t\t\tvm->bytecodeLoop = J9_ARE_ANY_BITS_SET(vm->extendedRuntimeFlags, J9_EXTENDED_RUNTIME_DEBUG_MODE)\n-\t\t\t\t\t? (void*)debugBytecodeLoop\n-\t\t\t\t\t: (void*)bytecodeLoop;\n+\t\t\tif (J9_ARE_ANY_BITS_SET(vm->extendedRuntimeFlags, J9_EXTENDED_RUNTIME_DEBUG_MODE)) {\n+\t\t\t\tvm->bytecodeLoop = (void*)debugBytecodeLoop;\n+\t\t\t} else {\n+\t\t\t\tif (J9VMTHREAD_COMPRESS_OBJECT_REFERENCES(vmThread)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc1NzYwMg=="}, "originalCommit": {"oid": "7dbd86a95f670600c97321e9e3d1da0d0f2a7ef9"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODIyMTQ1OnYy", "diffSide": "RIGHT", "path": "runtime/oti/ArrayCopyHelpers.hpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMDozNzoxOVrOGDAA-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMDozNzoxOVrOGDAA-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc5OTE2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #if (J9_OVERRIDE_COMPRESS_OBJECT_REFERENCES)\n          \n          \n            \n            #if J9_OVERRIDE_COMPRESS_OBJECT_REFERENCES", "url": "https://github.com/eclipse-openj9/openj9/pull/8936#discussion_r405799162", "createdAt": "2020-04-08T20:37:19Z", "author": {"login": "rwy0717"}, "path": "runtime/oti/ArrayCopyHelpers.hpp", "diffHunk": "@@ -51,6 +51,14 @@\n typedef long long I_128 __attribute__ ((__vector_size__ (16)));\n #endif\n \n+#if defined(J9_OVERRIDE_COMPRESS_OBJECT_REFERENCES)\n+#if (J9_OVERRIDE_COMPRESS_OBJECT_REFERENCES)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a30cd515b6a86c843f307793973bf438c85a7695"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODIyMjM3OnYy", "diffSide": "RIGHT", "path": "runtime/oti/ObjectHash.hpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMDozNzozN1rOGDABjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMDozNzozN1rOGDABjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc5OTMxMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #if (J9_OVERRIDE_COMPRESS_OBJECT_REFERENCES)\n          \n          \n            \n            #if J9_OVERRIDE_COMPRESS_OBJECT_REFERENCES", "url": "https://github.com/eclipse-openj9/openj9/pull/8936#discussion_r405799311", "createdAt": "2020-04-08T20:37:37Z", "author": {"login": "rwy0717"}, "path": "runtime/oti/ObjectHash.hpp", "diffHunk": "@@ -29,6 +29,14 @@\n #include \"AtomicSupport.hpp\"\n #include \"VMHelpers.hpp\"\n \n+#if defined(J9_OVERRIDE_COMPRESS_OBJECT_REFERENCES)\n+#if (J9_OVERRIDE_COMPRESS_OBJECT_REFERENCES)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a30cd515b6a86c843f307793973bf438c85a7695"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODIzMDc1OnYy", "diffSide": "RIGHT", "path": "runtime/oti/objectreferencesmacros_define.h", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMDozOTo1N1rOGDAGnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMDozOTo1N1rOGDAGnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwMDYwNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #define J9VMTHREAD_COMPRESS_OBJECT_REFERENCES(vmThread) (J9_OVERRIDE_COMPRESS_OBJECT_REFERENCES ? TRUE : FALSE)\n          \n          \n            \n            #define J9VMTHREAD_COMPRESS_OBJECT_REFERENCES(vmThread) J9_OVERRIDE_COMPRESS_OBJECT_REFERENCES", "url": "https://github.com/eclipse-openj9/openj9/pull/8936#discussion_r405800605", "createdAt": "2020-04-08T20:39:57Z", "author": {"login": "rwy0717"}, "path": "runtime/oti/objectreferencesmacros_define.h", "diffHunk": "@@ -0,0 +1,44 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+\n+#include \"j9nonbuilder.h\"\n+\n+#if defined(OMR_GC_COMPRESSED_POINTERS)\n+#if defined(OMR_GC_FULL_POINTERS)\n+/* Mixed mode - necessarily 64-bit */\n+#if defined(J9_OVERRIDE_COMPRESS_OBJECT_REFERENCES)\n+#define J9VMTHREAD_COMPRESS_OBJECT_REFERENCES(vmThread) (J9_OVERRIDE_COMPRESS_OBJECT_REFERENCES ? TRUE : FALSE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a30cd515b6a86c843f307793973bf438c85a7695"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODIzMjA5OnYy", "diffSide": "RIGHT", "path": "runtime/oti/objectreferencesmacros_define.h", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMDo0MDoxOVrOGDAHeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMDo0MDoxOVrOGDAHeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwMDgyNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #define J9JAVAVM_COMPRESS_OBJECT_REFERENCES(vm) (J9_OVERRIDE_COMPRESS_OBJECT_REFERENCES ? TRUE : FALSE)\n          \n          \n            \n            #define J9JAVAVM_COMPRESS_OBJECT_REFERENCES(vm) J9_OVERRIDE_COMPRESS_OBJECT_REFERENCES", "url": "https://github.com/eclipse-openj9/openj9/pull/8936#discussion_r405800824", "createdAt": "2020-04-08T20:40:19Z", "author": {"login": "rwy0717"}, "path": "runtime/oti/objectreferencesmacros_define.h", "diffHunk": "@@ -0,0 +1,44 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+\n+#include \"j9nonbuilder.h\"\n+\n+#if defined(OMR_GC_COMPRESSED_POINTERS)\n+#if defined(OMR_GC_FULL_POINTERS)\n+/* Mixed mode - necessarily 64-bit */\n+#if defined(J9_OVERRIDE_COMPRESS_OBJECT_REFERENCES)\n+#define J9VMTHREAD_COMPRESS_OBJECT_REFERENCES(vmThread) (J9_OVERRIDE_COMPRESS_OBJECT_REFERENCES ? TRUE : FALSE)\n+#define J9JAVAVM_COMPRESS_OBJECT_REFERENCES(vm) (J9_OVERRIDE_COMPRESS_OBJECT_REFERENCES ? TRUE : FALSE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a30cd515b6a86c843f307793973bf438c85a7695"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODI0OTc5OnYy", "diffSide": "RIGHT", "path": "runtime/oti/vm_api.h", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMDo0NToxMVrOGDASHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMDowMDoxM1rOGDnZjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwMzU0OQ==", "bodyText": "Ought to be under the compressed flag.", "url": "https://github.com/eclipse-openj9/openj9/pull/8936#discussion_r405803549", "createdAt": "2020-04-08T20:45:11Z", "author": {"login": "rwy0717"}, "path": "runtime/oti/vm_api.h", "diffHunk": "@@ -4090,15 +4090,25 @@ typedef enum {\n void*\n J9_GetInterface(J9_INTERFACE_SELECTOR interfaceSelector, J9PortLibrary* portLib, void *userData);\n \n-/* -------------------- BytecodeInterpreter.cpp ------------ */\n+/* -------------------- BytecodeInterpreterFull.cpp ------------ */\n \n /**\n-* @brief Execute the bytecode loop\n+* @brief Execute the bytecode loop (full pointers)\n+* @param currentThread\n+* @return UDATA the action to take upon return to the builder interpreter\n+*/\n+UDATA\n+bytecodeLoopFull(J9VMThread *currentThread);\n+\n+/* -------------------- BytecodeInterpreterCompressed.cpp ------------ */\n+\n+/**\n+* @brief Execute the bytecode loop (compressed pointers)\n * @param currentThread\n * @return UDATA the action to take upon return to the builder interpreter\n */\n UDATA  \n-bytecodeLoop(J9VMThread *currentThread);\n+bytecodeLoopCompressed(J9VMThread *currentThread);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a30cd515b6a86c843f307793973bf438c85a7695"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQwNjc3OQ==", "bodyText": "No need to ifdef prototypes, though I'd be tempted to move these to the place that uses them, since they're so specific (and no one should be calling them directly, ever).", "url": "https://github.com/eclipse-openj9/openj9/pull/8936#discussion_r406406779", "createdAt": "2020-04-09T18:47:35Z", "author": {"login": "gacholio"}, "path": "runtime/oti/vm_api.h", "diffHunk": "@@ -4090,15 +4090,25 @@ typedef enum {\n void*\n J9_GetInterface(J9_INTERFACE_SELECTOR interfaceSelector, J9PortLibrary* portLib, void *userData);\n \n-/* -------------------- BytecodeInterpreter.cpp ------------ */\n+/* -------------------- BytecodeInterpreterFull.cpp ------------ */\n \n /**\n-* @brief Execute the bytecode loop\n+* @brief Execute the bytecode loop (full pointers)\n+* @param currentThread\n+* @return UDATA the action to take upon return to the builder interpreter\n+*/\n+UDATA\n+bytecodeLoopFull(J9VMThread *currentThread);\n+\n+/* -------------------- BytecodeInterpreterCompressed.cpp ------------ */\n+\n+/**\n+* @brief Execute the bytecode loop (compressed pointers)\n * @param currentThread\n * @return UDATA the action to take upon return to the builder interpreter\n */\n UDATA  \n-bytecodeLoop(J9VMThread *currentThread);\n+bytecodeLoopCompressed(J9VMThread *currentThread);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwMzU0OQ=="}, "originalCommit": {"oid": "a30cd515b6a86c843f307793973bf438c85a7695"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQzNzM1Nw==", "bodyText": "These are only used in jvminit.c. The Full/Compressed prototypes could be moved to that file? Should the debugBytecodeLoop prototype also be moved to the same place for consistency?", "url": "https://github.com/eclipse-openj9/openj9/pull/8936#discussion_r406437357", "createdAt": "2020-04-09T19:46:53Z", "author": {"login": "sharon-wang"}, "path": "runtime/oti/vm_api.h", "diffHunk": "@@ -4090,15 +4090,25 @@ typedef enum {\n void*\n J9_GetInterface(J9_INTERFACE_SELECTOR interfaceSelector, J9PortLibrary* portLib, void *userData);\n \n-/* -------------------- BytecodeInterpreter.cpp ------------ */\n+/* -------------------- BytecodeInterpreterFull.cpp ------------ */\n \n /**\n-* @brief Execute the bytecode loop\n+* @brief Execute the bytecode loop (full pointers)\n+* @param currentThread\n+* @return UDATA the action to take upon return to the builder interpreter\n+*/\n+UDATA\n+bytecodeLoopFull(J9VMThread *currentThread);\n+\n+/* -------------------- BytecodeInterpreterCompressed.cpp ------------ */\n+\n+/**\n+* @brief Execute the bytecode loop (compressed pointers)\n * @param currentThread\n * @return UDATA the action to take upon return to the builder interpreter\n */\n UDATA  \n-bytecodeLoop(J9VMThread *currentThread);\n+bytecodeLoopCompressed(J9VMThread *currentThread);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwMzU0OQ=="}, "originalCommit": {"oid": "a30cd515b6a86c843f307793973bf438c85a7695"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ0NDQzMA==", "bodyText": "I think that would be ideal - it means no one could accidentally call them. I suppose for complete safety, the prototypes should be ifdeffed in jvminit.c.\nYes, please move the debug version(s) to jvminit.c as well.", "url": "https://github.com/eclipse-openj9/openj9/pull/8936#discussion_r406444430", "createdAt": "2020-04-09T20:00:13Z", "author": {"login": "gacholio"}, "path": "runtime/oti/vm_api.h", "diffHunk": "@@ -4090,15 +4090,25 @@ typedef enum {\n void*\n J9_GetInterface(J9_INTERFACE_SELECTOR interfaceSelector, J9PortLibrary* portLib, void *userData);\n \n-/* -------------------- BytecodeInterpreter.cpp ------------ */\n+/* -------------------- BytecodeInterpreterFull.cpp ------------ */\n \n /**\n-* @brief Execute the bytecode loop\n+* @brief Execute the bytecode loop (full pointers)\n+* @param currentThread\n+* @return UDATA the action to take upon return to the builder interpreter\n+*/\n+UDATA\n+bytecodeLoopFull(J9VMThread *currentThread);\n+\n+/* -------------------- BytecodeInterpreterCompressed.cpp ------------ */\n+\n+/**\n+* @brief Execute the bytecode loop (compressed pointers)\n * @param currentThread\n * @return UDATA the action to take upon return to the builder interpreter\n */\n UDATA  \n-bytecodeLoop(J9VMThread *currentThread);\n+bytecodeLoopCompressed(J9VMThread *currentThread);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwMzU0OQ=="}, "originalCommit": {"oid": "a30cd515b6a86c843f307793973bf438c85a7695"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODI1MDc2OnYy", "diffSide": "RIGHT", "path": "runtime/oti/vm_api.h", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMDo0NToyN1rOGDASsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxODo0Nzo0MlrOGDlGsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwMzY5Nw==", "bodyText": "Ought to be under the full flag.", "url": "https://github.com/eclipse-openj9/openj9/pull/8936#discussion_r405803697", "createdAt": "2020-04-08T20:45:27Z", "author": {"login": "rwy0717"}, "path": "runtime/oti/vm_api.h", "diffHunk": "@@ -4090,15 +4090,25 @@ typedef enum {\n void*\n J9_GetInterface(J9_INTERFACE_SELECTOR interfaceSelector, J9PortLibrary* portLib, void *userData);\n \n-/* -------------------- BytecodeInterpreter.cpp ------------ */\n+/* -------------------- BytecodeInterpreterFull.cpp ------------ */\n \n /**\n-* @brief Execute the bytecode loop\n+* @brief Execute the bytecode loop (full pointers)\n+* @param currentThread\n+* @return UDATA the action to take upon return to the builder interpreter\n+*/\n+UDATA\n+bytecodeLoopFull(J9VMThread *currentThread);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a30cd515b6a86c843f307793973bf438c85a7695"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQwNjgzNQ==", "bodyText": "See above.", "url": "https://github.com/eclipse-openj9/openj9/pull/8936#discussion_r406406835", "createdAt": "2020-04-09T18:47:42Z", "author": {"login": "gacholio"}, "path": "runtime/oti/vm_api.h", "diffHunk": "@@ -4090,15 +4090,25 @@ typedef enum {\n void*\n J9_GetInterface(J9_INTERFACE_SELECTOR interfaceSelector, J9PortLibrary* portLib, void *userData);\n \n-/* -------------------- BytecodeInterpreter.cpp ------------ */\n+/* -------------------- BytecodeInterpreterFull.cpp ------------ */\n \n /**\n-* @brief Execute the bytecode loop\n+* @brief Execute the bytecode loop (full pointers)\n+* @param currentThread\n+* @return UDATA the action to take upon return to the builder interpreter\n+*/\n+UDATA\n+bytecodeLoopFull(J9VMThread *currentThread);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwMzY5Nw=="}, "originalCommit": {"oid": "a30cd515b6a86c843f307793973bf438c85a7695"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODI1MzUzOnYy", "diffSide": "RIGHT", "path": "runtime/oti/UnsafeAPI.hpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMDo0NjoxNFrOGDAUYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMDo0NjoxNFrOGDAUYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwNDEzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #if (J9_OVERRIDE_COMPRESS_OBJECT_REFERENCES)\n          \n          \n            \n            #if J9_OVERRIDE_COMPRESS_OBJECT_REFERENCES", "url": "https://github.com/eclipse-openj9/openj9/pull/8936#discussion_r405804130", "createdAt": "2020-04-08T20:46:14Z", "author": {"login": "rwy0717"}, "path": "runtime/oti/UnsafeAPI.hpp", "diffHunk": "@@ -30,6 +30,14 @@\n #include \"VMHelpers.hpp\"\n #include \"AtomicSupport.hpp\"\n \n+#if defined(J9_OVERRIDE_COMPRESS_OBJECT_REFERENCES)\n+#if (J9_OVERRIDE_COMPRESS_OBJECT_REFERENCES)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a30cd515b6a86c843f307793973bf438c85a7695"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODI1NTA4OnYy", "diffSide": "RIGHT", "path": "runtime/oti/ObjectMonitor.hpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMDo0NjozM1rOGDAVOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMDo0NjozM1rOGDAVOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwNDM0Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #if (J9_OVERRIDE_COMPRESS_OBJECT_REFERENCES)\n          \n          \n            \n            #if J9_OVERRIDE_COMPRESS_OBJECT_REFERENCES", "url": "https://github.com/eclipse-openj9/openj9/pull/8936#discussion_r405804347", "createdAt": "2020-04-08T20:46:33Z", "author": {"login": "rwy0717"}, "path": "runtime/oti/ObjectMonitor.hpp", "diffHunk": "@@ -33,6 +33,14 @@\n \n #include \"AtomicSupport.hpp\"\n \n+#if defined(J9_OVERRIDE_COMPRESS_OBJECT_REFERENCES)\n+#if (J9_OVERRIDE_COMPRESS_OBJECT_REFERENCES)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a30cd515b6a86c843f307793973bf438c85a7695"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODI3ODgwOnYy", "diffSide": "RIGHT", "path": "runtime/makelib/targets.mk.ftl", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMDo1MzoyMlrOGDAj7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNToyNDoxN1rOGGqvZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwODExMA==", "bodyText": "Eventually, it would be cleaner to simply not compile these sources, when their code is disabled, since osx complains about empty object files.", "url": "https://github.com/eclipse-openj9/openj9/pull/8936#discussion_r405808110", "createdAt": "2020-04-08T20:53:22Z", "author": {"login": "rwy0717"}, "path": "runtime/makelib/targets.mk.ftl", "diffHunk": "@@ -557,7 +560,10 @@ NEW_OPTIMIZATION_FLAG+=-qmaxmem=-1 -qpic\n </#if>\n SPECIALCXXFLAGS=$(filter-out $(FLAGS_TO_REMOVE),$(CXXFLAGS))\n \n-BytecodeInterpreter$(UMA_DOT_O):BytecodeInterpreter.cpp\n+BytecodeInterpreterFull$(UMA_DOT_O):BytecodeInterpreterFull.cpp\n+\t$(CXX) $(SPECIALCXXFLAGS) $(NEW_OPTIMIZATION_FLAG) -c $<\n+\n+BytecodeInterpreterCompressed$(UMA_DOT_O):BytecodeInterpreterCompressed.cpp\n \t$(CXX) $(SPECIALCXXFLAGS) $(NEW_OPTIMIZATION_FLAG) -c $<", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a30cd515b6a86c843f307793973bf438c85a7695"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQxMjI3Mw==", "bodyText": "Agreed - do you know offhand how to do this? I don't want to have to mess with makefiles (more than I already do) in order to mixify a build. If it can be done based on the flags in omrcfg.h, then great. Otherwise, I'd prefer to either ignore the OSX issue for now, or change the files to contain a dummy static or function when not defining the custom interpreter to work around the issue.", "url": "https://github.com/eclipse-openj9/openj9/pull/8936#discussion_r406412273", "createdAt": "2020-04-09T18:57:41Z", "author": {"login": "gacholio"}, "path": "runtime/makelib/targets.mk.ftl", "diffHunk": "@@ -557,7 +560,10 @@ NEW_OPTIMIZATION_FLAG+=-qmaxmem=-1 -qpic\n </#if>\n SPECIALCXXFLAGS=$(filter-out $(FLAGS_TO_REMOVE),$(CXXFLAGS))\n \n-BytecodeInterpreter$(UMA_DOT_O):BytecodeInterpreter.cpp\n+BytecodeInterpreterFull$(UMA_DOT_O):BytecodeInterpreterFull.cpp\n+\t$(CXX) $(SPECIALCXXFLAGS) $(NEW_OPTIMIZATION_FLAG) -c $<\n+\n+BytecodeInterpreterCompressed$(UMA_DOT_O):BytecodeInterpreterCompressed.cpp\n \t$(CXX) $(SPECIALCXXFLAGS) $(NEW_OPTIMIZATION_FLAG) -c $<", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwODExMA=="}, "originalCommit": {"oid": "a30cd515b6a86c843f307793973bf438c85a7695"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQzMDA2NA==", "bodyText": "I suppose we can't ignore OSX when we publish these changes, so the dummy code is the short-term answer if you can't fix the makefiles cleanly.", "url": "https://github.com/eclipse-openj9/openj9/pull/8936#discussion_r406430064", "createdAt": "2020-04-09T19:32:39Z", "author": {"login": "gacholio"}, "path": "runtime/makelib/targets.mk.ftl", "diffHunk": "@@ -557,7 +560,10 @@ NEW_OPTIMIZATION_FLAG+=-qmaxmem=-1 -qpic\n </#if>\n SPECIALCXXFLAGS=$(filter-out $(FLAGS_TO_REMOVE),$(CXXFLAGS))\n \n-BytecodeInterpreter$(UMA_DOT_O):BytecodeInterpreter.cpp\n+BytecodeInterpreterFull$(UMA_DOT_O):BytecodeInterpreterFull.cpp\n+\t$(CXX) $(SPECIALCXXFLAGS) $(NEW_OPTIMIZATION_FLAG) -c $<\n+\n+BytecodeInterpreterCompressed$(UMA_DOT_O):BytecodeInterpreterCompressed.cpp\n \t$(CXX) $(SPECIALCXXFLAGS) $(NEW_OPTIMIZATION_FLAG) -c $<", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwODExMA=="}, "originalCommit": {"oid": "a30cd515b6a86c843f307793973bf438c85a7695"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY0NDkwMg==", "bodyText": "Going with the temporary solution for now - dummy define in the split interpreter files. Will look into makefile changes in future PR.", "url": "https://github.com/eclipse-openj9/openj9/pull/8936#discussion_r409644902", "createdAt": "2020-04-16T15:24:17Z", "author": {"login": "sharon-wang"}, "path": "runtime/makelib/targets.mk.ftl", "diffHunk": "@@ -557,7 +560,10 @@ NEW_OPTIMIZATION_FLAG+=-qmaxmem=-1 -qpic\n </#if>\n SPECIALCXXFLAGS=$(filter-out $(FLAGS_TO_REMOVE),$(CXXFLAGS))\n \n-BytecodeInterpreter$(UMA_DOT_O):BytecodeInterpreter.cpp\n+BytecodeInterpreterFull$(UMA_DOT_O):BytecodeInterpreterFull.cpp\n+\t$(CXX) $(SPECIALCXXFLAGS) $(NEW_OPTIMIZATION_FLAG) -c $<\n+\n+BytecodeInterpreterCompressed$(UMA_DOT_O):BytecodeInterpreterCompressed.cpp\n \t$(CXX) $(SPECIALCXXFLAGS) $(NEW_OPTIMIZATION_FLAG) -c $<", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwODExMA=="}, "originalCommit": {"oid": "a30cd515b6a86c843f307793973bf438c85a7695"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODI4MjYzOnYy", "diffSide": "RIGHT", "path": "runtime/oti/VMAccess.hpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMDo1NDoyOVrOGDAmZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxODo1ODozNVrOGDldzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwODc0MQ==", "bodyText": "I think it would be more appropriate to make this (and it's complement) a .inc file.", "url": "https://github.com/eclipse-openj9/openj9/pull/8936#discussion_r405808741", "createdAt": "2020-04-08T20:54:29Z", "author": {"login": "rwy0717"}, "path": "runtime/oti/VMAccess.hpp", "diffHunk": "@@ -35,6 +35,8 @@\n #define J9_EXCLUSIVE_SLOW_REASON_JNICRITICAL 1\n #define J9_EXCLUSIVE_SLOW_REASON_EXCLUSIVE   2\n \n+#include \"objectreferencesmacros_undefine.h\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a30cd515b6a86c843f307793973bf438c85a7695"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQxMjc1MA==", "bodyText": "As they should never be directly included in general code, I can't disagree.", "url": "https://github.com/eclipse-openj9/openj9/pull/8936#discussion_r406412750", "createdAt": "2020-04-09T18:58:35Z", "author": {"login": "gacholio"}, "path": "runtime/oti/VMAccess.hpp", "diffHunk": "@@ -35,6 +35,8 @@\n #define J9_EXCLUSIVE_SLOW_REASON_JNICRITICAL 1\n #define J9_EXCLUSIVE_SLOW_REASON_EXCLUSIVE   2\n \n+#include \"objectreferencesmacros_undefine.h\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwODc0MQ=="}, "originalCommit": {"oid": "a30cd515b6a86c843f307793973bf438c85a7695"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjEyNDMzOnYy", "diffSide": "RIGHT", "path": "runtime/oti/objectreferencesmacros_undefine.h", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxOTowMDowNFrOGDlg_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxOTowMDowNFrOGDlg_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQxMzU2Nw==", "bodyText": "I think you must include j9nonbuilder.h here so that future includes do not redefine the macros (the header gate will prevent it, and we can't have one here).", "url": "https://github.com/eclipse-openj9/openj9/pull/8936#discussion_r406413567", "createdAt": "2020-04-09T19:00:04Z", "author": {"login": "gacholio"}, "path": "runtime/oti/objectreferencesmacros_undefine.h", "diffHunk": "@@ -0,0 +1,24 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a30cd515b6a86c843f307793973bf438c85a7695"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjE0ODE3OnYy", "diffSide": "RIGHT", "path": "runtime/oti/objectreferencesmacros_define.h", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxOTowNzozOVrOGDlwOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxOTowNzozOVrOGDlwOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQxNzQ2Nw==", "bodyText": "I believe this should be removed - it works because of the header gate in j9nonbuilder.h, but if we move the include to the _undefine file, it won't be necessary here.", "url": "https://github.com/eclipse-openj9/openj9/pull/8936#discussion_r406417467", "createdAt": "2020-04-09T19:07:39Z", "author": {"login": "gacholio"}, "path": "runtime/oti/objectreferencesmacros_define.h", "diffHunk": "@@ -0,0 +1,44 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+\n+#include \"j9nonbuilder.h\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a30cd515b6a86c843f307793973bf438c85a7695"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 412, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}