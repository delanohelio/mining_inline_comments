{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyMDUwNjI3", "number": 8520, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNTo0NDozMVrODegLDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMzoyMzowNVrODfLKhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMzEwOTg5OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/z/codegen/J9TreeEvaluator.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNTo0NDozMVrOFnrAkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNTo1NDowNlrOFnrZRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE0MzQ0MA==", "bodyText": "Given the PR description this is fine. I hope that this will be refactored into a separate evaluator eventually though.", "url": "https://github.com/eclipse-openj9/openj9/pull/8520#discussion_r377143440", "createdAt": "2020-02-10T15:44:31Z", "author": {"login": "fjeremic"}, "path": "runtime/compiler/z/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -2873,7 +2873,13 @@ J9::Z::TreeEvaluator::generateHelperCallForVMNewEvaluators(TR::Node *node, TR::C\n TR::Register *\n J9::Z::TreeEvaluator::newObjectEvaluator(TR::Node * node, TR::CodeGenerator * cg)\n    {\n-   if (cg->comp()->suppressAllocationInlining())\n+   // If the helper symbol set on the node is TR_jitNewValue, we are (expecting to be)\n+   // dealing with a value type. Since we do not fully support value types yet, always\n+   // call the JIT helper to do the allocation.\n+   //\n+   auto* comp = cg->comp();\n+   if (cg->comp()->suppressAllocationInlining() ||\n+       (TR::Compiler->om.areValueTypesEnabled() && node->getSymbolReference() == comp->getSymRefTab()->findOrCreateNewValueSymbolRef(comp->getMethodSymbol())))\n       return generateHelperCallForVMNewEvaluators(node, cg);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecf8e52e205aafdef9718e92b2f1ed5a14a8deff"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE0OTc2Ng==", "bodyText": "Yes. Eventually, newvalue will have its own evaluator. That work will happen as part of the ongoing work to refactor and optimize value types.", "url": "https://github.com/eclipse-openj9/openj9/pull/8520#discussion_r377149766", "createdAt": "2020-02-10T15:54:06Z", "author": {"login": "Leonardo2718"}, "path": "runtime/compiler/z/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -2873,7 +2873,13 @@ J9::Z::TreeEvaluator::generateHelperCallForVMNewEvaluators(TR::Node *node, TR::C\n TR::Register *\n J9::Z::TreeEvaluator::newObjectEvaluator(TR::Node * node, TR::CodeGenerator * cg)\n    {\n-   if (cg->comp()->suppressAllocationInlining())\n+   // If the helper symbol set on the node is TR_jitNewValue, we are (expecting to be)\n+   // dealing with a value type. Since we do not fully support value types yet, always\n+   // call the JIT helper to do the allocation.\n+   //\n+   auto* comp = cg->comp();\n+   if (cg->comp()->suppressAllocationInlining() ||\n+       (TR::Compiler->om.areValueTypesEnabled() && node->getSymbolReference() == comp->getSymRefTab()->findOrCreateNewValueSymbolRef(comp->getMethodSymbol())))\n       return generateHelperCallForVMNewEvaluators(node, cg);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE0MzQ0MA=="}, "originalCommit": {"oid": "ecf8e52e205aafdef9718e92b2f1ed5a14a8deff"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MDE1MzY1OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/p/codegen/J9TreeEvaluator.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMzoyMzowNVrOFouTKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxODoyNDoyN1rOFo5mmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI0NTkzMA==", "bodyText": "Can you please put the type of TR::Compilation rather than auto - doing so aids readability and ensures that if we need to refactor later we can support from the compiler type checker.", "url": "https://github.com/eclipse-openj9/openj9/pull/8520#discussion_r378245930", "createdAt": "2020-02-12T13:23:05Z", "author": {"login": "andrewcraik"}, "path": "runtime/compiler/p/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -2164,7 +2163,13 @@ TR::Register *J9::Power::TreeEvaluator::checkcastAndNULLCHKEvaluator(TR::Node *n\n \n TR::Register *J9::Power::TreeEvaluator::newObjectEvaluator(TR::Node *node, TR::CodeGenerator *cg)\n    {\n-   if (cg->comp()->suppressAllocationInlining())\n+   // If the helper symbol set on the node is TR_newValue, we are (expecting to be)\n+   // dealing with a value type. Since we do not fully support value types yet, always\n+   // call the JIT helper to do the allocation.\n+   //\n+   auto* comp = cg->comp();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec8fd520626297089d9794e7c574f3c84ea99070"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQzMTEyOQ==", "bodyText": "Fixed.", "url": "https://github.com/eclipse-openj9/openj9/pull/8520#discussion_r378431129", "createdAt": "2020-02-12T18:24:27Z", "author": {"login": "Leonardo2718"}, "path": "runtime/compiler/p/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -2164,7 +2163,13 @@ TR::Register *J9::Power::TreeEvaluator::checkcastAndNULLCHKEvaluator(TR::Node *n\n \n TR::Register *J9::Power::TreeEvaluator::newObjectEvaluator(TR::Node *node, TR::CodeGenerator *cg)\n    {\n-   if (cg->comp()->suppressAllocationInlining())\n+   // If the helper symbol set on the node is TR_newValue, we are (expecting to be)\n+   // dealing with a value type. Since we do not fully support value types yet, always\n+   // call the JIT helper to do the allocation.\n+   //\n+   auto* comp = cg->comp();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI0NTkzMA=="}, "originalCommit": {"oid": "ec8fd520626297089d9794e7c574f3c84ea99070"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 699, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}