{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1MjcyMzU0", "number": 9745, "title": "Sampling allocation bytes precisely without compromising the performance", "bodyText": "in order to sampling heap allocation bytes precisely without\ncompromising the performance, we have the below changes.\nHandle instrumentableAllocateHook and\nVM_OBJECT_ALLOCATE_WITHIN_THRESHOLD is still via disabling inline\nallocation\nHandle smapling for tracepoint is still during out of line allocation\nHandle smapling for JEP331 is via setTLHSamplingTop(size)\nUsing fake Heap Top instead of fake Heap Alloc for disabling inline\nallocation (realHeapAlloc-->realHeapTop,\nset/getRealAlloc()-->set/getRealTop(), getRealSize(), getUsedSize())\nUsing fake Heap Top to force out of line allocation at sampling thresold\nfor sampling heap allocation (setTLHSamplingTop()/resetTLHSamplingTop())\nsetTLHSamplingTop(size) are only called in the below 3 cases\n1, sampling threshold has been changed via GC-VM api\nj9gc_set_allocation_sampling_interval()\n2, TLH is refreshed\n3, after sampling is done\nCounting trace allocation byte includes allocation bytes inside TLH\nCache before flushing(_stats.bytesAllocated(true),\nstats->_tlhAllocatedUsed, )\nHandle traceAllocationByte for Health\nCenter(_oolTraceAllocationBytesForTracepoint,\noolObjectSamplingBytesGranularityForTracepoint) and traceAllocationByte\nfor JEP331(_traceAllocationBytesForHook,\nobjectSamplingBytesGranularityForHook) independently\ndepend on eclipse/omr#5260\nfix: #7740\nSigned-off-by: Lin Hu linhu@ca.ibm.com", "createdAt": "2020-05-29T18:59:20Z", "url": "https://github.com/eclipse-openj9/openj9/pull/9745", "merged": true, "mergeCommit": {"oid": "f07d5746fb8334377601b81534d1a3ad1d310ba7"}, "closed": true, "closedAt": "2020-06-04T21:19:20Z", "author": {"login": "LinHu2016"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcnDzmIAFqTQyMjA0MzYyNg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcoE-hlAFqTQyNDg0OTU2Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMDQzNjI2", "url": "https://github.com/eclipse-openj9/openj9/pull/9745#pullrequestreview-422043626", "createdAt": "2020-06-01T17:35:12Z", "commit": {"oid": "0cdfcf384b05e280d57036a02e54c3ae361e7805"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNzozNToxMlrOGdToIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNzozNToxMlrOGdToIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM4MzQ1Ng==", "bodyText": "Looks like the question I asked about support for dual TLH mode applies here: Am I reading correctly that if we set size for both TLHs we can get 2 * size to be allocated potentially?", "url": "https://github.com/eclipse-openj9/openj9/pull/9745#discussion_r433383456", "createdAt": "2020-06-01T17:35:12Z", "author": {"login": "dmitripivkine"}, "path": "runtime/gc_glue_java/EnvironmentDelegate.cpp", "diffHunk": "@@ -252,58 +252,134 @@ MM_EnvironmentDelegate::forceOutOfLineVMAccess()\n \n #if defined (J9VM_GC_THREAD_LOCAL_HEAP)\n /**\n- * Disable inline TLH allocates by hiding the real heap allocation address from\n- * JIT/Interpreter in realHeapAlloc and setting heapALloc == HeapTop so TLH\n+ * Disable inline TLH allocates by hiding the real heap top address from\n+ * JIT/Interpreter in realHeapTop and setting HeapTop == heapALloc so TLH\n  * looks full.\n  *\n  */\n void\n MM_EnvironmentDelegate::disableInlineTLHAllocate()\n {\n \tJ9ModronThreadLocalHeap *tlh = (J9ModronThreadLocalHeap *)&_vmThread->allocateThreadLocalHeap;\n-\ttlh->realHeapAlloc = _vmThread->heapAlloc;\n-\t_vmThread->heapAlloc = _vmThread->heapTop;\n+\tif (NULL == tlh->realHeapTop) {\n+\t\ttlh->realHeapTop = _vmThread->heapTop;\n+\t}\n+\t_vmThread->heapTop = _vmThread->heapAlloc;\n \n #if defined(J9VM_GC_NON_ZERO_TLH)\n \ttlh = (J9ModronThreadLocalHeap *)&_vmThread->nonZeroAllocateThreadLocalHeap;\n-\ttlh->realHeapAlloc = _vmThread->nonZeroHeapAlloc;\n-\t_vmThread->nonZeroHeapAlloc = _vmThread->nonZeroHeapTop;\n+\tif (NULL == tlh->realHeapTop) {\n+\t\ttlh->realHeapTop = _vmThread->nonZeroHeapTop;\n+\t}\n+\t_vmThread->nonZeroHeapTop = _vmThread->nonZeroHeapAlloc;\n #endif /* defined(J9VM_GC_NON_ZERO_TLH) */\n }\n \n /**\n- * Re-enable inline TLH allocate by restoring heapAlloc from realHeapAlloc\n+ * Re-enable inline TLH allocate by restoring heapTop from realHeapTop\n  */\n void\n MM_EnvironmentDelegate::enableInlineTLHAllocate()\n {\n \tJ9ModronThreadLocalHeap *tlh = (J9ModronThreadLocalHeap *)&_vmThread->allocateThreadLocalHeap;\n-\t_vmThread->heapAlloc =  tlh->realHeapAlloc;\n-\ttlh->realHeapAlloc = NULL;\n+\tif (NULL != tlh->realHeapTop) {\n+\t\t_vmThread->heapTop =  tlh->realHeapTop;\n+\t\ttlh->realHeapTop = NULL;\n+\t}\n \n #if defined(J9VM_GC_NON_ZERO_TLH)\n \ttlh = (J9ModronThreadLocalHeap *)&_vmThread->nonZeroAllocateThreadLocalHeap;\n-\t_vmThread->nonZeroHeapAlloc =  tlh->realHeapAlloc;\n-\ttlh->realHeapAlloc = NULL;\n+\tif (NULL != tlh->realHeapTop) {\n+\t\t_vmThread->nonZeroHeapTop =  tlh->realHeapTop;\n+\t\ttlh->realHeapTop = NULL;\n+\t}\n #endif /* defined(J9VM_GC_NON_ZERO_TLH) */\n }\n \n /**\n- * Determine if inline TLH allocate is enabled; its enabled if realheapAlloc is NULL.\n+ * Determine if inline TLH allocate is enabled; its enabled if realheapTop is NULL.\n  * @return TRUE if inline TLH allocates currently enabled for this thread; FALSE otherwise\n  */\n bool\n MM_EnvironmentDelegate::isInlineTLHAllocateEnabled()\n {\n \tJ9ModronThreadLocalHeap *tlh = (J9ModronThreadLocalHeap *)&_vmThread->allocateThreadLocalHeap;\n-\tbool result = (NULL == tlh->realHeapAlloc);\n+\tbool result = (NULL == tlh->realHeapTop);\n \n #if defined(J9VM_GC_NON_ZERO_TLH)\n \ttlh = (J9ModronThreadLocalHeap *)&_vmThread->nonZeroAllocateThreadLocalHeap;\n-\tresult = result && (NULL == tlh->realHeapAlloc);\n+\tresult = result && (NULL == tlh->realHeapTop);\n #endif /* defined(J9VM_GC_NON_ZERO_TLH) */\n \n \treturn result;\n }\n+\n+\n+void\n+MM_EnvironmentDelegate::setTLHSamplingTop(uintptr_t size)\n+{\n+\tuintptr_t max = 0;\n+\tJ9ModronThreadLocalHeap *tlh = (J9ModronThreadLocalHeap *)&_vmThread->allocateThreadLocalHeap;\n+\tif (NULL != tlh->realHeapTop) {\n+\t\tmax = tlh->realHeapTop - _vmThread->heapAlloc;\n+\t} else {\n+\t\tmax = _vmThread->heapTop - _vmThread->heapAlloc;\n+\t}\n+\n+\tif (max > size) {\n+\t\tif (NULL == tlh->realHeapTop) {\n+\t\t\ttlh->realHeapTop = _vmThread->heapTop;\n+\t\t}\n+\t\t_vmThread->heapTop = _vmThread->heapAlloc + size;\n+\t} else {\n+\t\tif (NULL != tlh->realHeapTop) {\n+\t\t\t_vmThread->heapTop =  tlh->realHeapTop;\n+\t\t\ttlh->realHeapTop = NULL;\n+\t\t}\n+\t}\n+\n+#if defined(J9VM_GC_NON_ZERO_TLH)\n+\t/* TODO: need to find better way set TLH sampling Top for NON ZERO case */\n+\ttlh = (J9ModronThreadLocalHeap *)&_vmThread->nonZeroAllocateThreadLocalHeap;\n+\tif (NULL != tlh->realHeapTop) {\n+\t\tmax = tlh->realHeapTop - _vmThread->nonZeroHeapAlloc;\n+\t} else {\n+\t\tmax = _vmThread->nonZeroHeapTop - _vmThread->nonZeroHeapAlloc;\n+\t}\n+\n+\tif (max > size) {\n+\t\tif (NULL == tlh->realHeapTop) {\n+\t\t\ttlh->realHeapTop = _vmThread->nonZeroHeapTop;\n+\t\t}\n+\t\t_vmThread->nonZeroHeapTop = _vmThread->nonZeroHeapAlloc + size;\n+\t} else {\n+\t\tif (NULL != tlh->realHeapTop) {\n+\t\t\t_vmThread->nonZeroHeapTop =  tlh->realHeapTop;\n+\t\t\ttlh->realHeapTop = NULL;\n+\t\t}\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cdfcf384b05e280d57036a02e54c3ae361e7805"}, "originalPosition": 123}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0cdfcf384b05e280d57036a02e54c3ae361e7805", "author": {"user": {"login": "LinHu2016", "name": "Lin Hu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/0cdfcf384b05e280d57036a02e54c3ae361e7805", "committedDate": "2020-05-29T18:58:15Z", "message": "Sampling allocation bytes precisely without compromising the performance\n\nin order to sampling heap allocation bytes precisely without\ncompromising the performance, we have the below changes.\n\nHandle instrumentableAllocateHook and\nVM_OBJECT_ALLOCATE_WITHIN_THRESHOLD is still via disabling inline\nallocation\nHandle smapling for tracepoint is still during out of line allocation\nHandle smapling for JEP331 is via setTLHSamplingTop(size)\n\nUsing fake Heap Top instead of fake Heap Alloc for disabling inline\nallocation (realHeapAlloc-->realHeapTop,\nset/getRealAlloc()-->set/getRealTop(), getRealSize(), getUsedSize())\nUsing fake Heap Top to force out of line allocation at sampling thresold\nfor sampling heap allocation (setTLHSamplingTop()/resetTLHSamplingTop())\nsetTLHSamplingTop(size) are only called in the below 3 cases\n\t1, sampling threshold has been changed via GC-VM api\nj9gc_set_allocation_sampling_interval()\n\t2, TLH is refreshed\n\t3, after sampling is done\n\nCounting trace allocation byte includes allocation bytes inside TLH\nCache before flushing(_stats.bytesAllocated(true),\nstats->_tlhAllocatedUsed, )\nHandle traceAllocationByte for Health\nCenter(_oolTraceAllocationBytesForTracepoint,\noolObjectSamplingBytesGranularityForTracepoint) and traceAllocationByte\nfor JEP331(_traceAllocationBytesForHook,\nobjectSamplingBytesGranularityForHook) independently\n\nSigned-off-by: Lin Hu <linhu@ca.ibm.com>"}, "afterCommit": {"oid": "3e18189e1a258cb36380c6965d2cec270a1d9994", "author": {"user": {"login": "LinHu2016", "name": "Lin Hu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/3e18189e1a258cb36380c6965d2cec270a1d9994", "committedDate": "2020-06-01T19:15:43Z", "message": "Sampling allocation bytes precisely without compromising the performance\n\nin order to sampling heap allocation bytes precisely without\ncompromising the performance, we have the below changes.\n\nHandle instrumentableAllocateHook and\nVM_OBJECT_ALLOCATE_WITHIN_THRESHOLD is still via disabling inline\nallocation\nHandle smapling for tracepoint is still during out of line allocation\nHandle smapling for JEP331 is via setTLHSamplingTop(size)\n\nUsing fake Heap Top instead of fake Heap Alloc for disabling inline\nallocation (realHeapAlloc-->realHeapTop,\nset/getRealAlloc()-->set/getRealTop(), getRealSize(), getUsedSize())\nUsing fake Heap Top to force out of line allocation at sampling thresold\nfor sampling heap allocation (setTLHSamplingTop()/resetTLHSamplingTop())\nsetTLHSamplingTop(size) are only called in the below 3 cases\n\t1, sampling threshold has been changed via GC-VM api\nj9gc_set_allocation_sampling_interval()\n\t2, TLH is refreshed\n\t3, after sampling is done\n\nCounting trace allocation byte includes allocation bytes inside TLH\nCache before flushing(_stats.bytesAllocated(true),\nstats->_tlhAllocatedUsed, )\nHandle traceAllocationByte for Health\nCenter(_oolTraceAllocationBytesForTracepoint,\noolObjectSamplingBytesGranularityForTracepoint) and traceAllocationByte\nfor JEP331(_traceAllocationBytesForHook,\nobjectSamplingBytesGranularityForHook) independently\n\nSigned-off-by: Lin Hu <linhu@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3e18189e1a258cb36380c6965d2cec270a1d9994", "author": {"user": {"login": "LinHu2016", "name": "Lin Hu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/3e18189e1a258cb36380c6965d2cec270a1d9994", "committedDate": "2020-06-01T19:15:43Z", "message": "Sampling allocation bytes precisely without compromising the performance\n\nin order to sampling heap allocation bytes precisely without\ncompromising the performance, we have the below changes.\n\nHandle instrumentableAllocateHook and\nVM_OBJECT_ALLOCATE_WITHIN_THRESHOLD is still via disabling inline\nallocation\nHandle smapling for tracepoint is still during out of line allocation\nHandle smapling for JEP331 is via setTLHSamplingTop(size)\n\nUsing fake Heap Top instead of fake Heap Alloc for disabling inline\nallocation (realHeapAlloc-->realHeapTop,\nset/getRealAlloc()-->set/getRealTop(), getRealSize(), getUsedSize())\nUsing fake Heap Top to force out of line allocation at sampling thresold\nfor sampling heap allocation (setTLHSamplingTop()/resetTLHSamplingTop())\nsetTLHSamplingTop(size) are only called in the below 3 cases\n\t1, sampling threshold has been changed via GC-VM api\nj9gc_set_allocation_sampling_interval()\n\t2, TLH is refreshed\n\t3, after sampling is done\n\nCounting trace allocation byte includes allocation bytes inside TLH\nCache before flushing(_stats.bytesAllocated(true),\nstats->_tlhAllocatedUsed, )\nHandle traceAllocationByte for Health\nCenter(_oolTraceAllocationBytesForTracepoint,\noolObjectSamplingBytesGranularityForTracepoint) and traceAllocationByte\nfor JEP331(_traceAllocationBytesForHook,\nobjectSamplingBytesGranularityForHook) independently\n\nSigned-off-by: Lin Hu <linhu@ca.ibm.com>"}, "afterCommit": {"oid": "03f2d378a2fc4de288719cc6e485ea68b9f84547", "author": {"user": {"login": "LinHu2016", "name": "Lin Hu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/03f2d378a2fc4de288719cc6e485ea68b9f84547", "committedDate": "2020-06-02T02:40:23Z", "message": "Sampling allocation bytes precisely without compromising the performance\n\nin order to sampling heap allocation bytes precisely without\ncompromising the performance, we have the below changes.\n\nHandle instrumentableAllocateHook and\nVM_OBJECT_ALLOCATE_WITHIN_THRESHOLD is still via disabling inline\nallocation\nHandle smapling for tracepoint is still during out of line allocation\nHandle smapling for JEP331 is via setTLHSamplingTop(size)\n\nUsing fake Heap Top instead of fake Heap Alloc for disabling inline\nallocation (realHeapAlloc-->realHeapTop,\nset/getRealAlloc()-->set/getRealTop(), getRealSize(), getUsedSize())\nUsing fake Heap Top to force out of line allocation at sampling thresold\nfor sampling heap allocation (setTLHSamplingTop()/resetTLHSamplingTop())\nsetTLHSamplingTop(size) are only called in the below 3 cases\n\t1, sampling threshold has been changed via GC-VM api\nj9gc_set_allocation_sampling_interval()\n\t2, TLH is refreshed\n\t3, after sampling is done\n\nCounting trace allocation byte includes allocation bytes inside TLH\nCache before flushing(_stats.bytesAllocated(true),\nstats->_tlhAllocatedUsed, )\nHandle traceAllocationByte for Health\nCenter(_oolTraceAllocationBytesForTracepoint,\noolObjectSamplingBytesGranularityForTracepoint) and traceAllocationByte\nfor JEP331(_traceAllocationBytesForHook,\nobjectSamplingBytesGranularityForHook) independently\n\nSigned-off-by: Lin Hu <linhu@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "03f2d378a2fc4de288719cc6e485ea68b9f84547", "author": {"user": {"login": "LinHu2016", "name": "Lin Hu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/03f2d378a2fc4de288719cc6e485ea68b9f84547", "committedDate": "2020-06-02T02:40:23Z", "message": "Sampling allocation bytes precisely without compromising the performance\n\nin order to sampling heap allocation bytes precisely without\ncompromising the performance, we have the below changes.\n\nHandle instrumentableAllocateHook and\nVM_OBJECT_ALLOCATE_WITHIN_THRESHOLD is still via disabling inline\nallocation\nHandle smapling for tracepoint is still during out of line allocation\nHandle smapling for JEP331 is via setTLHSamplingTop(size)\n\nUsing fake Heap Top instead of fake Heap Alloc for disabling inline\nallocation (realHeapAlloc-->realHeapTop,\nset/getRealAlloc()-->set/getRealTop(), getRealSize(), getUsedSize())\nUsing fake Heap Top to force out of line allocation at sampling thresold\nfor sampling heap allocation (setTLHSamplingTop()/resetTLHSamplingTop())\nsetTLHSamplingTop(size) are only called in the below 3 cases\n\t1, sampling threshold has been changed via GC-VM api\nj9gc_set_allocation_sampling_interval()\n\t2, TLH is refreshed\n\t3, after sampling is done\n\nCounting trace allocation byte includes allocation bytes inside TLH\nCache before flushing(_stats.bytesAllocated(true),\nstats->_tlhAllocatedUsed, )\nHandle traceAllocationByte for Health\nCenter(_oolTraceAllocationBytesForTracepoint,\noolObjectSamplingBytesGranularityForTracepoint) and traceAllocationByte\nfor JEP331(_traceAllocationBytesForHook,\nobjectSamplingBytesGranularityForHook) independently\n\nSigned-off-by: Lin Hu <linhu@ca.ibm.com>"}, "afterCommit": {"oid": "0b095c2c42709d99721cb48b63251f1d575eebb0", "author": {"user": {"login": "LinHu2016", "name": "Lin Hu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/0b095c2c42709d99721cb48b63251f1d575eebb0", "committedDate": "2020-06-02T15:08:29Z", "message": "Sampling allocation bytes precisely without compromising the performance\n\nin order to sampling heap allocation bytes precisely without\ncompromising the performance, we have the below changes.\n\nHandle instrumentableAllocateHook and\nVM_OBJECT_ALLOCATE_WITHIN_THRESHOLD is still via disabling inline\nallocation\nHandle smapling for tracepoint is still during out of line allocation\nHandle smapling for JEP331 is via setTLHSamplingTop(size)\n\nUsing fake Heap Top instead of fake Heap Alloc for disabling inline\nallocation (realHeapAlloc-->realHeapTop,\nset/getRealAlloc()-->set/getRealTop(), getRealSize(), getUsedSize())\nUsing fake Heap Top to force out of line allocation at sampling thresold\nfor sampling heap allocation (setTLHSamplingTop()/resetTLHSamplingTop())\nsetTLHSamplingTop(size) are only called in the below 3 cases\n\t1, sampling threshold has been changed via GC-VM api\nj9gc_set_allocation_sampling_interval()\n\t2, TLH is refreshed\n\t3, after sampling is done\n\nCounting trace allocation byte includes allocation bytes inside TLH\nCache before flushing(_stats.bytesAllocated(true),\nstats->_tlhAllocatedUsed, )\nHandle traceAllocationByte for Health\nCenter(_oolTraceAllocationBytesForTracepoint,\noolObjectSamplingBytesGranularityForTracepoint) and traceAllocationByte\nfor JEP331(_traceAllocationBytesForHook,\nobjectSamplingBytesGranularityForHook) independently\n\nSigned-off-by: Lin Hu <linhu@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0b095c2c42709d99721cb48b63251f1d575eebb0", "author": {"user": {"login": "LinHu2016", "name": "Lin Hu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/0b095c2c42709d99721cb48b63251f1d575eebb0", "committedDate": "2020-06-02T15:08:29Z", "message": "Sampling allocation bytes precisely without compromising the performance\n\nin order to sampling heap allocation bytes precisely without\ncompromising the performance, we have the below changes.\n\nHandle instrumentableAllocateHook and\nVM_OBJECT_ALLOCATE_WITHIN_THRESHOLD is still via disabling inline\nallocation\nHandle smapling for tracepoint is still during out of line allocation\nHandle smapling for JEP331 is via setTLHSamplingTop(size)\n\nUsing fake Heap Top instead of fake Heap Alloc for disabling inline\nallocation (realHeapAlloc-->realHeapTop,\nset/getRealAlloc()-->set/getRealTop(), getRealSize(), getUsedSize())\nUsing fake Heap Top to force out of line allocation at sampling thresold\nfor sampling heap allocation (setTLHSamplingTop()/resetTLHSamplingTop())\nsetTLHSamplingTop(size) are only called in the below 3 cases\n\t1, sampling threshold has been changed via GC-VM api\nj9gc_set_allocation_sampling_interval()\n\t2, TLH is refreshed\n\t3, after sampling is done\n\nCounting trace allocation byte includes allocation bytes inside TLH\nCache before flushing(_stats.bytesAllocated(true),\nstats->_tlhAllocatedUsed, )\nHandle traceAllocationByte for Health\nCenter(_oolTraceAllocationBytesForTracepoint,\noolObjectSamplingBytesGranularityForTracepoint) and traceAllocationByte\nfor JEP331(_traceAllocationBytesForHook,\nobjectSamplingBytesGranularityForHook) independently\n\nSigned-off-by: Lin Hu <linhu@ca.ibm.com>"}, "afterCommit": {"oid": "502edcd17f84c254e74a42242e8c08409d86c078", "author": {"user": {"login": "LinHu2016", "name": "Lin Hu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/502edcd17f84c254e74a42242e8c08409d86c078", "committedDate": "2020-06-02T16:02:35Z", "message": "Sampling allocation bytes precisely without compromising the performance\n\nin order to sampling heap allocation bytes precisely without\ncompromising the performance, we have the below changes.\n\nHandle instrumentableAllocateHook and\nVM_OBJECT_ALLOCATE_WITHIN_THRESHOLD is still via disabling inline\nallocation\nHandle smapling for tracepoint is still during out of line allocation\nHandle smapling for JEP331 is via setTLHSamplingTop(size)\n\nUsing fake Heap Top instead of fake Heap Alloc for disabling inline\nallocation (realHeapAlloc-->realHeapTop,\nset/getRealAlloc()-->set/getRealTop(), getRealSize(), getUsedSize())\nUsing fake Heap Top to force out of line allocation at sampling thresold\nfor sampling heap allocation (setTLHSamplingTop()/resetTLHSamplingTop())\nsetTLHSamplingTop(size) are only called in the below 3 cases\n\t1, sampling threshold has been changed via GC-VM api\nj9gc_set_allocation_sampling_interval()\n\t2, TLH is refreshed\n\t3, after sampling is done\n\nCounting trace allocation byte includes allocation bytes inside TLH\nCache before flushing(_stats.bytesAllocated(true),\nstats->_tlhAllocatedUsed, )\nHandle traceAllocationByte for Health\nCenter(_oolTraceAllocationBytesForTracepoint,\noolObjectSamplingBytesGranularityForTracepoint) and traceAllocationByte\nfor JEP331(_traceAllocationBytesForHook,\nobjectSamplingBytesGranularityForHook) independently\n\nSigned-off-by: Lin Hu <linhu@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "502edcd17f84c254e74a42242e8c08409d86c078", "author": {"user": {"login": "LinHu2016", "name": "Lin Hu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/502edcd17f84c254e74a42242e8c08409d86c078", "committedDate": "2020-06-02T16:02:35Z", "message": "Sampling allocation bytes precisely without compromising the performance\n\nin order to sampling heap allocation bytes precisely without\ncompromising the performance, we have the below changes.\n\nHandle instrumentableAllocateHook and\nVM_OBJECT_ALLOCATE_WITHIN_THRESHOLD is still via disabling inline\nallocation\nHandle smapling for tracepoint is still during out of line allocation\nHandle smapling for JEP331 is via setTLHSamplingTop(size)\n\nUsing fake Heap Top instead of fake Heap Alloc for disabling inline\nallocation (realHeapAlloc-->realHeapTop,\nset/getRealAlloc()-->set/getRealTop(), getRealSize(), getUsedSize())\nUsing fake Heap Top to force out of line allocation at sampling thresold\nfor sampling heap allocation (setTLHSamplingTop()/resetTLHSamplingTop())\nsetTLHSamplingTop(size) are only called in the below 3 cases\n\t1, sampling threshold has been changed via GC-VM api\nj9gc_set_allocation_sampling_interval()\n\t2, TLH is refreshed\n\t3, after sampling is done\n\nCounting trace allocation byte includes allocation bytes inside TLH\nCache before flushing(_stats.bytesAllocated(true),\nstats->_tlhAllocatedUsed, )\nHandle traceAllocationByte for Health\nCenter(_oolTraceAllocationBytesForTracepoint,\noolObjectSamplingBytesGranularityForTracepoint) and traceAllocationByte\nfor JEP331(_traceAllocationBytesForHook,\nobjectSamplingBytesGranularityForHook) independently\n\nSigned-off-by: Lin Hu <linhu@ca.ibm.com>"}, "afterCommit": {"oid": "5402cf7fc7be87a3c5724e66db29e8e9b2a7cbf7", "author": {"user": {"login": "LinHu2016", "name": "Lin Hu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/5402cf7fc7be87a3c5724e66db29e8e9b2a7cbf7", "committedDate": "2020-06-02T19:17:00Z", "message": "Sampling allocation bytes precisely without compromising the performance\n\nin order to sampling heap allocation bytes precisely without\ncompromising the performance, we have the below changes.\n\nHandle instrumentableAllocateHook and\nVM_OBJECT_ALLOCATE_WITHIN_THRESHOLD is still via disabling inline\nallocation\nHandle smapling for tracepoint is still during out of line allocation\nHandle smapling for JEP331 is via setTLHSamplingTop(size)\n\nUsing fake Heap Top instead of fake Heap Alloc for disabling inline\nallocation (realHeapAlloc-->realHeapTop,\nset/getRealAlloc()-->set/getRealTop(), getRealSize(), getUsedSize())\nUsing fake Heap Top to force out of line allocation at sampling thresold\nfor sampling heap allocation (setTLHSamplingTop()/resetTLHSamplingTop())\nsetTLHSamplingTop(size) are only called in the below 3 cases\n\t1, sampling threshold has been changed via GC-VM api\nj9gc_set_allocation_sampling_interval()\n\t2, TLH is refreshed\n\t3, after sampling is done\n\nCounting trace allocation byte includes allocation bytes inside TLH\nCache before flushing(_stats.bytesAllocated(true),\nstats->_tlhAllocatedUsed, )\nHandle traceAllocationByte for Health\nCenter(_oolTraceAllocationBytesForTracepoint,\noolObjectSamplingBytesGranularityForTracepoint) and traceAllocationByte\nfor JEP331(_traceAllocationBytesForHook,\nobjectSamplingBytesGranularityForHook) independently\n\nSigned-off-by: Lin Hu <linhu@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5402cf7fc7be87a3c5724e66db29e8e9b2a7cbf7", "author": {"user": {"login": "LinHu2016", "name": "Lin Hu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/5402cf7fc7be87a3c5724e66db29e8e9b2a7cbf7", "committedDate": "2020-06-02T19:17:00Z", "message": "Sampling allocation bytes precisely without compromising the performance\n\nin order to sampling heap allocation bytes precisely without\ncompromising the performance, we have the below changes.\n\nHandle instrumentableAllocateHook and\nVM_OBJECT_ALLOCATE_WITHIN_THRESHOLD is still via disabling inline\nallocation\nHandle smapling for tracepoint is still during out of line allocation\nHandle smapling for JEP331 is via setTLHSamplingTop(size)\n\nUsing fake Heap Top instead of fake Heap Alloc for disabling inline\nallocation (realHeapAlloc-->realHeapTop,\nset/getRealAlloc()-->set/getRealTop(), getRealSize(), getUsedSize())\nUsing fake Heap Top to force out of line allocation at sampling thresold\nfor sampling heap allocation (setTLHSamplingTop()/resetTLHSamplingTop())\nsetTLHSamplingTop(size) are only called in the below 3 cases\n\t1, sampling threshold has been changed via GC-VM api\nj9gc_set_allocation_sampling_interval()\n\t2, TLH is refreshed\n\t3, after sampling is done\n\nCounting trace allocation byte includes allocation bytes inside TLH\nCache before flushing(_stats.bytesAllocated(true),\nstats->_tlhAllocatedUsed, )\nHandle traceAllocationByte for Health\nCenter(_oolTraceAllocationBytesForTracepoint,\noolObjectSamplingBytesGranularityForTracepoint) and traceAllocationByte\nfor JEP331(_traceAllocationBytesForHook,\nobjectSamplingBytesGranularityForHook) independently\n\nSigned-off-by: Lin Hu <linhu@ca.ibm.com>"}, "afterCommit": {"oid": "e07dcc466b56a6fb26b1bc499a62adcebb1e6549", "author": {"user": {"login": "LinHu2016", "name": "Lin Hu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/e07dcc466b56a6fb26b1bc499a62adcebb1e6549", "committedDate": "2020-06-03T20:14:00Z", "message": "Sampling allocation bytes precisely without compromising the performance\n\nin order to sampling heap allocation bytes precisely without\ncompromising the performance, we have the below changes.\n\nHandle instrumentableAllocateHook and\nVM_OBJECT_ALLOCATE_WITHIN_THRESHOLD is still via disabling inline\nallocation\nHandle smapling for tracepoint is still during out of line allocation\nHandle smapling for JEP331 is via setTLHSamplingTop(size)\n\nUsing fake Heap Top instead of fake Heap Alloc for disabling inline\nallocation (realHeapAlloc-->realHeapTop,\nset/getRealAlloc()-->set/getRealTop(), getRealSize(), getUsedSize())\nUsing fake Heap Top to force out of line allocation at sampling thresold\nfor sampling heap allocation (setTLHSamplingTop()/resetTLHSamplingTop())\nsetTLHSamplingTop(size) are only called in the below 3 cases\n\t1, sampling threshold has been changed via GC-VM api\nj9gc_set_allocation_sampling_interval()\n\t2, TLH is refreshed\n\t3, after sampling is done\n\nCounting trace allocation byte includes allocation bytes inside TLH\nCache before flushing(_stats.bytesAllocated(true),\nstats->_tlhAllocatedUsed, )\nHandle traceAllocationByte for Health\nCenter(_oolTraceAllocationBytesForTracepoint,\noolObjectSamplingBytesGranularityForTracepoint) and traceAllocationByte\nfor JEP331(_traceAllocationBytesForHook,\nobjectSamplingBytesGranularityForHook) independently\n\nSigned-off-by: Lin Hu <linhu@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e07dcc466b56a6fb26b1bc499a62adcebb1e6549", "author": {"user": {"login": "LinHu2016", "name": "Lin Hu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/e07dcc466b56a6fb26b1bc499a62adcebb1e6549", "committedDate": "2020-06-03T20:14:00Z", "message": "Sampling allocation bytes precisely without compromising the performance\n\nin order to sampling heap allocation bytes precisely without\ncompromising the performance, we have the below changes.\n\nHandle instrumentableAllocateHook and\nVM_OBJECT_ALLOCATE_WITHIN_THRESHOLD is still via disabling inline\nallocation\nHandle smapling for tracepoint is still during out of line allocation\nHandle smapling for JEP331 is via setTLHSamplingTop(size)\n\nUsing fake Heap Top instead of fake Heap Alloc for disabling inline\nallocation (realHeapAlloc-->realHeapTop,\nset/getRealAlloc()-->set/getRealTop(), getRealSize(), getUsedSize())\nUsing fake Heap Top to force out of line allocation at sampling thresold\nfor sampling heap allocation (setTLHSamplingTop()/resetTLHSamplingTop())\nsetTLHSamplingTop(size) are only called in the below 3 cases\n\t1, sampling threshold has been changed via GC-VM api\nj9gc_set_allocation_sampling_interval()\n\t2, TLH is refreshed\n\t3, after sampling is done\n\nCounting trace allocation byte includes allocation bytes inside TLH\nCache before flushing(_stats.bytesAllocated(true),\nstats->_tlhAllocatedUsed, )\nHandle traceAllocationByte for Health\nCenter(_oolTraceAllocationBytesForTracepoint,\noolObjectSamplingBytesGranularityForTracepoint) and traceAllocationByte\nfor JEP331(_traceAllocationBytesForHook,\nobjectSamplingBytesGranularityForHook) independently\n\nSigned-off-by: Lin Hu <linhu@ca.ibm.com>"}, "afterCommit": {"oid": "02d2c1bb10337124fa21680748a004cc72083808", "author": {"user": {"login": "LinHu2016", "name": "Lin Hu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/02d2c1bb10337124fa21680748a004cc72083808", "committedDate": "2020-06-03T20:50:02Z", "message": "Sampling allocation bytes precisely without compromising the performance\n\nin order to sampling heap allocation bytes precisely without\ncompromising the performance, we have the below changes.\n\nHandle instrumentableAllocateHook and\nVM_OBJECT_ALLOCATE_WITHIN_THRESHOLD is still via disabling inline\nallocation\nHandle smapling for tracepoint is still during out of line allocation\nHandle smapling for JEP331 is via setTLHSamplingTop(size)\n\nUsing fake Heap Top instead of fake Heap Alloc for disabling inline\nallocation (realHeapAlloc-->realHeapTop,\nset/getRealAlloc()-->set/getRealTop(), getRealSize(), getUsedSize())\nUsing fake Heap Top to force out of line allocation at sampling thresold\nfor sampling heap allocation (setTLHSamplingTop()/resetTLHSamplingTop())\nsetTLHSamplingTop(size) are only called in the below 3 cases\n\t1, sampling threshold has been changed via GC-VM api\nj9gc_set_allocation_sampling_interval()\n\t2, TLH is refreshed\n\t3, after sampling is done\n\nCounting trace allocation byte includes allocation bytes inside TLH\nCache before flushing(_stats.bytesAllocated(true),\nstats->_tlhAllocatedUsed, )\nHandle traceAllocationByte for Health\nCenter(_oolTraceAllocationBytesForTracepoint,\noolObjectSamplingBytesGranularityForTracepoint) and traceAllocationByte\nfor JEP331(_traceAllocationBytesForHook,\nobjectSamplingBytesGranularityForHook) independently\n\nSigned-off-by: Lin Hu <linhu@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "02d2c1bb10337124fa21680748a004cc72083808", "author": {"user": {"login": "LinHu2016", "name": "Lin Hu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/02d2c1bb10337124fa21680748a004cc72083808", "committedDate": "2020-06-03T20:50:02Z", "message": "Sampling allocation bytes precisely without compromising the performance\n\nin order to sampling heap allocation bytes precisely without\ncompromising the performance, we have the below changes.\n\nHandle instrumentableAllocateHook and\nVM_OBJECT_ALLOCATE_WITHIN_THRESHOLD is still via disabling inline\nallocation\nHandle smapling for tracepoint is still during out of line allocation\nHandle smapling for JEP331 is via setTLHSamplingTop(size)\n\nUsing fake Heap Top instead of fake Heap Alloc for disabling inline\nallocation (realHeapAlloc-->realHeapTop,\nset/getRealAlloc()-->set/getRealTop(), getRealSize(), getUsedSize())\nUsing fake Heap Top to force out of line allocation at sampling thresold\nfor sampling heap allocation (setTLHSamplingTop()/resetTLHSamplingTop())\nsetTLHSamplingTop(size) are only called in the below 3 cases\n\t1, sampling threshold has been changed via GC-VM api\nj9gc_set_allocation_sampling_interval()\n\t2, TLH is refreshed\n\t3, after sampling is done\n\nCounting trace allocation byte includes allocation bytes inside TLH\nCache before flushing(_stats.bytesAllocated(true),\nstats->_tlhAllocatedUsed, )\nHandle traceAllocationByte for Health\nCenter(_oolTraceAllocationBytesForTracepoint,\noolObjectSamplingBytesGranularityForTracepoint) and traceAllocationByte\nfor JEP331(_traceAllocationBytesForHook,\nobjectSamplingBytesGranularityForHook) independently\n\nSigned-off-by: Lin Hu <linhu@ca.ibm.com>"}, "afterCommit": {"oid": "3e1814067f92394aa73a773e15a8f83e9c43990c", "author": {"user": {"login": "LinHu2016", "name": "Lin Hu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/3e1814067f92394aa73a773e15a8f83e9c43990c", "committedDate": "2020-06-03T21:12:34Z", "message": "Sampling allocation bytes precisely without compromising the performance\n\nin order to sampling heap allocation bytes precisely without\ncompromising the performance, we have the below changes.\n\nHandle instrumentableAllocateHook and\nVM_OBJECT_ALLOCATE_WITHIN_THRESHOLD is still via disabling inline\nallocation\nHandle smapling for tracepoint is still during out of line allocation\nHandle smapling for JEP331 is via setTLHSamplingTop(size)\n\nUsing fake Heap Top instead of fake Heap Alloc for disabling inline\nallocation (realHeapAlloc-->realHeapTop,\nset/getRealAlloc()-->set/getRealTop(), getRealSize(), getUsedSize())\nUsing fake Heap Top to force out of line allocation at sampling thresold\nfor sampling heap allocation (setTLHSamplingTop()/resetTLHSamplingTop())\nsetTLHSamplingTop(size) are only called in the below 3 cases\n\t1, sampling threshold has been changed via GC-VM api\nj9gc_set_allocation_sampling_interval()\n\t2, TLH is refreshed\n\t3, after sampling is done\n\nCounting trace allocation byte includes allocation bytes inside TLH\nCache before flushing(_stats.bytesAllocated(true),\nstats->_tlhAllocatedUsed, )\nHandle traceAllocationByte for Health\nCenter(_oolTraceAllocationBytesForTracepoint,\noolObjectSamplingBytesGranularityForTracepoint) and traceAllocationByte\nfor JEP331(_traceAllocationBytesForHook,\nobjectSamplingBytesGranularityForHook) independently\n\nSigned-off-by: Lin Hu <linhu@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3e1814067f92394aa73a773e15a8f83e9c43990c", "author": {"user": {"login": "LinHu2016", "name": "Lin Hu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/3e1814067f92394aa73a773e15a8f83e9c43990c", "committedDate": "2020-06-03T21:12:34Z", "message": "Sampling allocation bytes precisely without compromising the performance\n\nin order to sampling heap allocation bytes precisely without\ncompromising the performance, we have the below changes.\n\nHandle instrumentableAllocateHook and\nVM_OBJECT_ALLOCATE_WITHIN_THRESHOLD is still via disabling inline\nallocation\nHandle smapling for tracepoint is still during out of line allocation\nHandle smapling for JEP331 is via setTLHSamplingTop(size)\n\nUsing fake Heap Top instead of fake Heap Alloc for disabling inline\nallocation (realHeapAlloc-->realHeapTop,\nset/getRealAlloc()-->set/getRealTop(), getRealSize(), getUsedSize())\nUsing fake Heap Top to force out of line allocation at sampling thresold\nfor sampling heap allocation (setTLHSamplingTop()/resetTLHSamplingTop())\nsetTLHSamplingTop(size) are only called in the below 3 cases\n\t1, sampling threshold has been changed via GC-VM api\nj9gc_set_allocation_sampling_interval()\n\t2, TLH is refreshed\n\t3, after sampling is done\n\nCounting trace allocation byte includes allocation bytes inside TLH\nCache before flushing(_stats.bytesAllocated(true),\nstats->_tlhAllocatedUsed, )\nHandle traceAllocationByte for Health\nCenter(_oolTraceAllocationBytesForTracepoint,\noolObjectSamplingBytesGranularityForTracepoint) and traceAllocationByte\nfor JEP331(_traceAllocationBytesForHook,\nobjectSamplingBytesGranularityForHook) independently\n\nSigned-off-by: Lin Hu <linhu@ca.ibm.com>"}, "afterCommit": {"oid": "86eb95857b3d16128ee37448649f80ab7615d635", "author": {"user": {"login": "LinHu2016", "name": "Lin Hu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/86eb95857b3d16128ee37448649f80ab7615d635", "committedDate": "2020-06-04T13:48:55Z", "message": "Sampling allocation bytes precisely without compromising the performance\n\nin order to sampling heap allocation bytes precisely without\ncompromising the performance, we have the below changes.\n\nHandle instrumentableAllocateHook and\nVM_OBJECT_ALLOCATE_WITHIN_THRESHOLD is still via disabling inline\nallocation\nHandle smapling for tracepoint is still during out of line allocation\nHandle smapling for JEP331 is via setTLHSamplingTop(size)\n\nUsing fake Heap Top instead of fake Heap Alloc for disabling inline\nallocation (realHeapAlloc-->realHeapTop,\nset/getRealAlloc()-->set/getRealTop(), getRealSize(), getUsedSize())\nUsing fake Heap Top to force out of line allocation at sampling thresold\nfor sampling heap allocation (setTLHSamplingTop()/resetTLHSamplingTop())\nsetTLHSamplingTop(size) are only called in the below 3 cases\n\t1, sampling threshold has been changed via GC-VM api\nj9gc_set_allocation_sampling_interval()\n\t2, TLH is refreshed\n\t3, after sampling is done\n\nCounting trace allocation byte includes allocation bytes inside TLH\nCache before flushing(_stats.bytesAllocated(true),\nstats->_tlhAllocatedUsed, )\nHandle traceAllocationByte for Health\nCenter(_oolTraceAllocationBytesForTracepoint,\noolObjectSamplingBytesGranularityForTracepoint) and traceAllocationByte\nfor JEP331(_traceAllocationBytesForHook,\nobjectSamplingBytesGranularityForHook) independently\n\nSigned-off-by: Lin Hu <linhu@ca.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2dd5591146ad6d9c1690cd2be03d9dd7e187452", "author": {"user": {"login": "LinHu2016", "name": "Lin Hu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/d2dd5591146ad6d9c1690cd2be03d9dd7e187452", "committedDate": "2020-06-04T13:53:34Z", "message": "Sampling allocation bytes precisely without compromising the performance\n\nin order to sampling heap allocation bytes precisely without\ncompromising the performance, we have the below changes.\n\nHandle instrumentableAllocateHook and\nVM_OBJECT_ALLOCATE_WITHIN_THRESHOLD is still via disabling inline\nallocation\nHandle smapling for tracepoint is still during out of line allocation\nHandle smapling for JEP331 is via setTLHSamplingTop(size)\n\nUsing fake Heap Top instead of fake Heap Alloc for disabling inline\nallocation (realHeapAlloc-->realHeapTop,\nset/getRealAlloc()-->set/getRealTop(), getRealSize(), getUsedSize())\nUsing fake Heap Top to force out of line allocation at sampling thresold\nfor sampling heap allocation (setTLHSamplingTop()/resetTLHSamplingTop())\nsetTLHSamplingTop(size) are only called in the below 3 cases\n\t1, sampling threshold has been changed via GC-VM api\nj9gc_set_allocation_sampling_interval()\n\t2, TLH is refreshed\n\t3, after sampling is done\n\nCounting trace allocation byte includes allocation bytes inside TLH\nCache before flushing(_stats.bytesAllocated(true),\nstats->_tlhAllocatedUsed, )\nHandle traceAllocationByte for Health\nCenter(_oolTraceAllocationBytesForTracepoint,\noolObjectSamplingBytesGranularityForTracepoint) and traceAllocationByte\nfor JEP331(_traceAllocationBytesForHook,\nobjectSamplingBytesGranularityForHook) independently\n\nSigned-off-by: Lin Hu <linhu@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "86eb95857b3d16128ee37448649f80ab7615d635", "author": {"user": {"login": "LinHu2016", "name": "Lin Hu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/86eb95857b3d16128ee37448649f80ab7615d635", "committedDate": "2020-06-04T13:48:55Z", "message": "Sampling allocation bytes precisely without compromising the performance\n\nin order to sampling heap allocation bytes precisely without\ncompromising the performance, we have the below changes.\n\nHandle instrumentableAllocateHook and\nVM_OBJECT_ALLOCATE_WITHIN_THRESHOLD is still via disabling inline\nallocation\nHandle smapling for tracepoint is still during out of line allocation\nHandle smapling for JEP331 is via setTLHSamplingTop(size)\n\nUsing fake Heap Top instead of fake Heap Alloc for disabling inline\nallocation (realHeapAlloc-->realHeapTop,\nset/getRealAlloc()-->set/getRealTop(), getRealSize(), getUsedSize())\nUsing fake Heap Top to force out of line allocation at sampling thresold\nfor sampling heap allocation (setTLHSamplingTop()/resetTLHSamplingTop())\nsetTLHSamplingTop(size) are only called in the below 3 cases\n\t1, sampling threshold has been changed via GC-VM api\nj9gc_set_allocation_sampling_interval()\n\t2, TLH is refreshed\n\t3, after sampling is done\n\nCounting trace allocation byte includes allocation bytes inside TLH\nCache before flushing(_stats.bytesAllocated(true),\nstats->_tlhAllocatedUsed, )\nHandle traceAllocationByte for Health\nCenter(_oolTraceAllocationBytesForTracepoint,\noolObjectSamplingBytesGranularityForTracepoint) and traceAllocationByte\nfor JEP331(_traceAllocationBytesForHook,\nobjectSamplingBytesGranularityForHook) independently\n\nSigned-off-by: Lin Hu <linhu@ca.ibm.com>"}, "afterCommit": {"oid": "d2dd5591146ad6d9c1690cd2be03d9dd7e187452", "author": {"user": {"login": "LinHu2016", "name": "Lin Hu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/d2dd5591146ad6d9c1690cd2be03d9dd7e187452", "committedDate": "2020-06-04T13:53:34Z", "message": "Sampling allocation bytes precisely without compromising the performance\n\nin order to sampling heap allocation bytes precisely without\ncompromising the performance, we have the below changes.\n\nHandle instrumentableAllocateHook and\nVM_OBJECT_ALLOCATE_WITHIN_THRESHOLD is still via disabling inline\nallocation\nHandle smapling for tracepoint is still during out of line allocation\nHandle smapling for JEP331 is via setTLHSamplingTop(size)\n\nUsing fake Heap Top instead of fake Heap Alloc for disabling inline\nallocation (realHeapAlloc-->realHeapTop,\nset/getRealAlloc()-->set/getRealTop(), getRealSize(), getUsedSize())\nUsing fake Heap Top to force out of line allocation at sampling thresold\nfor sampling heap allocation (setTLHSamplingTop()/resetTLHSamplingTop())\nsetTLHSamplingTop(size) are only called in the below 3 cases\n\t1, sampling threshold has been changed via GC-VM api\nj9gc_set_allocation_sampling_interval()\n\t2, TLH is refreshed\n\t3, after sampling is done\n\nCounting trace allocation byte includes allocation bytes inside TLH\nCache before flushing(_stats.bytesAllocated(true),\nstats->_tlhAllocatedUsed, )\nHandle traceAllocationByte for Health\nCenter(_oolTraceAllocationBytesForTracepoint,\noolObjectSamplingBytesGranularityForTracepoint) and traceAllocationByte\nfor JEP331(_traceAllocationBytesForHook,\nobjectSamplingBytesGranularityForHook) independently\n\nSigned-off-by: Lin Hu <linhu@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NjA5MDg2", "url": "https://github.com/eclipse-openj9/openj9/pull/9745#pullrequestreview-424609086", "createdAt": "2020-06-04T16:09:15Z", "commit": {"oid": "d2dd5591146ad6d9c1690cd2be03d9dd7e187452"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NjY2NDY5", "url": "https://github.com/eclipse-openj9/openj9/pull/9745#pullrequestreview-424666469", "createdAt": "2020-06-04T17:20:41Z", "commit": {"oid": "d2dd5591146ad6d9c1690cd2be03d9dd7e187452"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0ODQ5NTYz", "url": "https://github.com/eclipse-openj9/openj9/pull/9745#pullrequestreview-424849563", "createdAt": "2020-06-04T21:29:56Z", "commit": {"oid": "d2dd5591146ad6d9c1690cd2be03d9dd7e187452"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMToyOTo1NlrOGfYtrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMToyOTo1NlrOGfYtrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU2Mzk0OQ==", "bodyText": "This will fail with NoSuchFieldError when examining core files created before the addition of realHeapTop.", "url": "https://github.com/eclipse-openj9/openj9/pull/9745#discussion_r435563949", "createdAt": "2020-06-04T21:29:56Z", "author": {"login": "keithc-ca"}, "path": "debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java", "diffHunk": "@@ -75,9 +75,9 @@ protected GCObjectHeapIteratorAddressOrderedList_V1(U8Pointer base, U8Pointer to\n \t\t\t\t\t\texcludedRangeList.add(new U8Pointer[] {heapAlloc, heapTop});\n \t\t\t\t\t} else {\n \t\t\t\t\t\t/* Might be an instrumented VM */\n-\t\t\t\t\t\tU8Pointer realHeapAlloc = adjustedToRange(vmThread.allocateThreadLocalHeap().realHeapAlloc(), base, top);\n-\t\t\t\t\t\tif(realHeapAlloc.notNull() && isSomethingToAdd(realHeapAlloc, heapTop)) {\n-\t\t\t\t\t\t\texcludedRangeList.add(new U8Pointer[] {realHeapAlloc, heapTop});\n+\t\t\t\t\t\tU8Pointer realHeapTop = adjustedToRange(vmThread.allocateThreadLocalHeap().realHeapTop(), base, top);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2dd5591146ad6d9c1690cd2be03d9dd7e187452"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 826, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}