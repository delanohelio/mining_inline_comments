{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwMzcyODM1", "number": 11317, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQwMDo0NjoxN1rOFBCXWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjoyMjoxOFrOFDA1pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NjMxNjQzOnYy", "diffSide": "RIGHT", "path": "runtime/gc_vlhgc/IncrementalGenerationalGC.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQwMDo0NjoxOFrOH_nL7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQwMDo0NjoxOFrOH_nL7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQ2NDM2NA==", "bodyText": "Remove gcStart/gcEnd dependency", "url": "https://github.com/eclipse-openj9/openj9/pull/11317#discussion_r536464364", "createdAt": "2020-12-05T00:46:18Z", "author": {"login": "bragaigor"}, "path": "runtime/gc_vlhgc/IncrementalGenerationalGC.cpp", "diffHunk": "@@ -2101,6 +2101,9 @@ MM_IncrementalGenerationalGC::exportStats(MM_EnvironmentVLHGC *env, MM_Collectio\n \t\t/* numaNodes is just used as indication to verbose GC that stats we collected are valid and indeed should be reported */\n \t\tstats->_numaNodes = _extensions->_numaManager.getAffinityLeaderCount();\n \t\tUDATA regionSize = _regionManager->getRegionSize();\n+\t\tUDATA allocateEdenTotal = 0;\n+\t\tstats->_edenHeapSize = getCurrentEdenSizeInBytes(env);\n+\t\tbool isGCend = stats->_startTime > stats->_endTime;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c20642fe6efa56460a65eb7b5761cb45590f5762"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4Njg5ODg0OnYy", "diffSide": "LEFT", "path": "runtime/gc_vlhgc/IncrementalGenerationalGC.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNTo1Njo0NFrOICcDMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNTo1Njo0NFrOICcDMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQyNzYzMw==", "bodyText": "we still need to update allocateEdenTotal, even for arraylet (age 0) region", "url": "https://github.com/eclipse-openj9/openj9/pull/11317#discussion_r539427633", "createdAt": "2020-12-09T15:56:44Z", "author": {"login": "amicic"}, "path": "runtime/gc_vlhgc/IncrementalGenerationalGC.cpp", "diffHunk": "@@ -2111,23 +2113,20 @@ MM_IncrementalGenerationalGC::exportStats(MM_EnvironmentVLHGC *env, MM_Collectio\n \t\t\t\tif (region->containsObjects()) {\n \t\t\t\t\tMM_MemoryPoolBumpPointer *memoryPool = (MM_MemoryPoolBumpPointer *)region->getMemoryPool();\n \t\t\t\t\tAssert_MM_true(NULL != memoryPool);\n-\t\t\t\t\t/* for Eden region containing objects Allocation Age must be smaller then amount allocated since last PGC */\n-\t\t\t\t\tif (region->getAllocationAge() <= _allocatedSinceLastPGC) {\n-\t\t\t\t\t\tstats->_edenHeapSize += regionSize;\n+\t\t\t\t\t/* Eden region containing objects, Allocation Age must be smaller then amount allocated since last PGC,\n+\t\t\t\t\t * more accurately, its logical age must be equal to zero */\n+\t\t\t\t\tif (0 == region->getLogicalAge()) {\n \t\t\t\t\t\t/* region is not collected yet, so getActualFreeMemorySize might not be accurate - using getAllocatableBytes instead */\n \t\t\t\t\t\tUDATA size = memoryPool->getAllocatableBytes();\n \t\t\t\t\t\tstats->_edenFreeHeapSize += size;\n \t\t\t\t\t\tusedMemory = regionSize - size;\n+\t\t\t\t\t\tallocateEdenTotal += regionSize;\n \t\t\t\t\t} else {\n \t\t\t\t\t\tusedMemory = regionSize - memoryPool->getFreeMemoryAndDarkMatterBytes();\n \t\t\t\t\t}\n \t\t\t\t} else {\n \t\t\t\t\tAssert_MM_true(region->isArrayletLeaf());\n \t\t\t\t\tusedMemory = regionSize;\n-\t\t\t\t\t/* for Eden arraylet leaf Allocation Age must be smaller then amount allocated since last PGC */\n-\t\t\t\t\tif (region->getAllocationAge() <= _allocatedSinceLastPGC) {\n-\t\t\t\t\t\tstats->_edenHeapSize += regionSize;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b161545c3904d2df6018a9546b5e01b19d858880"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzAzNzgyOnYy", "diffSide": "RIGHT", "path": "runtime/gc_vlhgc/IncrementalGenerationalGC.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjoyMjoxOFrOICdXfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjoyMjoxOFrOICdXfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ0OTIxMg==", "bodyText": "I prefer to use the old age condition (it's more generic), which might work better after reordering in #11378", "url": "https://github.com/eclipse-openj9/openj9/pull/11317#discussion_r539449212", "createdAt": "2020-12-09T16:22:18Z", "author": {"login": "amicic"}, "path": "runtime/gc_vlhgc/IncrementalGenerationalGC.cpp", "diffHunk": "@@ -2111,23 +2113,20 @@ MM_IncrementalGenerationalGC::exportStats(MM_EnvironmentVLHGC *env, MM_Collectio\n \t\t\t\tif (region->containsObjects()) {\n \t\t\t\t\tMM_MemoryPoolBumpPointer *memoryPool = (MM_MemoryPoolBumpPointer *)region->getMemoryPool();\n \t\t\t\t\tAssert_MM_true(NULL != memoryPool);\n-\t\t\t\t\t/* for Eden region containing objects Allocation Age must be smaller then amount allocated since last PGC */\n-\t\t\t\t\tif (region->getAllocationAge() <= _allocatedSinceLastPGC) {\n-\t\t\t\t\t\tstats->_edenHeapSize += regionSize;\n+\t\t\t\t\t/* Eden region containing objects, Allocation Age must be smaller then amount allocated since last PGC,\n+\t\t\t\t\t * more accurately, its logical age must be equal to zero */\n+\t\t\t\t\tif (0 == region->getLogicalAge()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b161545c3904d2df6018a9546b5e01b19d858880"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 984, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}