{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4MTg4OTA3", "number": 11285, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNzoxNzowN1rOE9twaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNzoxNzowN1rOE9twaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMTQ4MjY1OnYy", "diffSide": "RIGHT", "path": "runtime/shared_common/CompositeCache.cpp", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNzoxNzowN1rOH6jREQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNzo1OTo0MVrOH6kPWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE1NzI2NQ==", "bodyText": "We may want to remove Trc_SHR_Assert_Equals(_headerProtectCntr, 1) 2 lines below as well.", "url": "https://github.com/eclipse-openj9/openj9/pull/11285#discussion_r531157265", "createdAt": "2020-11-26T17:17:07Z", "author": {"login": "hangshao0"}, "path": "runtime/shared_common/CompositeCache.cpp", "diffHunk": "@@ -3710,15 +3710,8 @@ SH_CompositeCacheImpl::runExitCode(J9VMThread *currentThread)\n \t * If not unprotected here, subsequent JVMs will not be able to write to readwrite area.\n \t */\n \tunprotectHeaderReadWriteArea(currentThread, true);\n-\tif (0 != (*_runtimeFlags & J9SHR_RUNTIMEFLAG_ENABLE_MPROTECT_ALL)) {\n-\t\t/* If mprotect=all is set, above call to unprotectHeaderReadWriteArea() will set _readWriteProtectCntr to 1. */\n-\t\tTrc_SHR_Assert_Equals(_readWriteProtectCntr, 1);\n-\t} else {\n-\t\tTrc_SHR_Assert_Equals(_readWriteProtectCntr, 0);\n-\t}\n #else\n \tunprotectHeaderReadWriteArea(currentThread, false);\n-\tTrc_SHR_Assert_Equals(_readWriteProtectCntr, 0);\n #endif\n \t/* If mprotect=all is not set, then final value of _headerProtectCntr should be same is its initial value (= 1).\n \t * If mprotect=all is set, then above call to unprotectHeaderReadWriteArea() will set it to 1.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c06099a2c4f8b3d403bd7d8be52e4b8dbbaefbb"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE2MDE0Mw==", "bodyText": "Sure, updated.", "url": "https://github.com/eclipse-openj9/openj9/pull/11285#discussion_r531160143", "createdAt": "2020-11-26T17:24:05Z", "author": {"login": "pshipton"}, "path": "runtime/shared_common/CompositeCache.cpp", "diffHunk": "@@ -3710,15 +3710,8 @@ SH_CompositeCacheImpl::runExitCode(J9VMThread *currentThread)\n \t * If not unprotected here, subsequent JVMs will not be able to write to readwrite area.\n \t */\n \tunprotectHeaderReadWriteArea(currentThread, true);\n-\tif (0 != (*_runtimeFlags & J9SHR_RUNTIMEFLAG_ENABLE_MPROTECT_ALL)) {\n-\t\t/* If mprotect=all is set, above call to unprotectHeaderReadWriteArea() will set _readWriteProtectCntr to 1. */\n-\t\tTrc_SHR_Assert_Equals(_readWriteProtectCntr, 1);\n-\t} else {\n-\t\tTrc_SHR_Assert_Equals(_readWriteProtectCntr, 0);\n-\t}\n #else\n \tunprotectHeaderReadWriteArea(currentThread, false);\n-\tTrc_SHR_Assert_Equals(_readWriteProtectCntr, 0);\n #endif\n \t/* If mprotect=all is not set, then final value of _headerProtectCntr should be same is its initial value (= 1).\n \t * If mprotect=all is set, then above call to unprotectHeaderReadWriteArea() will set it to 1.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE1NzI2NQ=="}, "originalCommit": {"oid": "8c06099a2c4f8b3d403bd7d8be52e4b8dbbaefbb"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE3MTg1Mg==", "bodyText": "This one is protected by the readwrite lock, so I think the assert is valid, but it's not providing much value here.", "url": "https://github.com/eclipse-openj9/openj9/pull/11285#discussion_r531171852", "createdAt": "2020-11-26T17:55:33Z", "author": {"login": "pshipton"}, "path": "runtime/shared_common/CompositeCache.cpp", "diffHunk": "@@ -3710,15 +3710,8 @@ SH_CompositeCacheImpl::runExitCode(J9VMThread *currentThread)\n \t * If not unprotected here, subsequent JVMs will not be able to write to readwrite area.\n \t */\n \tunprotectHeaderReadWriteArea(currentThread, true);\n-\tif (0 != (*_runtimeFlags & J9SHR_RUNTIMEFLAG_ENABLE_MPROTECT_ALL)) {\n-\t\t/* If mprotect=all is set, above call to unprotectHeaderReadWriteArea() will set _readWriteProtectCntr to 1. */\n-\t\tTrc_SHR_Assert_Equals(_readWriteProtectCntr, 1);\n-\t} else {\n-\t\tTrc_SHR_Assert_Equals(_readWriteProtectCntr, 0);\n-\t}\n #else\n \tunprotectHeaderReadWriteArea(currentThread, false);\n-\tTrc_SHR_Assert_Equals(_readWriteProtectCntr, 0);\n #endif\n \t/* If mprotect=all is not set, then final value of _headerProtectCntr should be same is its initial value (= 1).\n \t * If mprotect=all is set, then above call to unprotectHeaderReadWriteArea() will set it to 1.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE1NzI2NQ=="}, "originalCommit": {"oid": "8c06099a2c4f8b3d403bd7d8be52e4b8dbbaefbb"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE3MzIwOQ==", "bodyText": "Sorry, ignore that. The readwrite lock is only when mprotect=all", "url": "https://github.com/eclipse-openj9/openj9/pull/11285#discussion_r531173209", "createdAt": "2020-11-26T17:59:41Z", "author": {"login": "pshipton"}, "path": "runtime/shared_common/CompositeCache.cpp", "diffHunk": "@@ -3710,15 +3710,8 @@ SH_CompositeCacheImpl::runExitCode(J9VMThread *currentThread)\n \t * If not unprotected here, subsequent JVMs will not be able to write to readwrite area.\n \t */\n \tunprotectHeaderReadWriteArea(currentThread, true);\n-\tif (0 != (*_runtimeFlags & J9SHR_RUNTIMEFLAG_ENABLE_MPROTECT_ALL)) {\n-\t\t/* If mprotect=all is set, above call to unprotectHeaderReadWriteArea() will set _readWriteProtectCntr to 1. */\n-\t\tTrc_SHR_Assert_Equals(_readWriteProtectCntr, 1);\n-\t} else {\n-\t\tTrc_SHR_Assert_Equals(_readWriteProtectCntr, 0);\n-\t}\n #else\n \tunprotectHeaderReadWriteArea(currentThread, false);\n-\tTrc_SHR_Assert_Equals(_readWriteProtectCntr, 0);\n #endif\n \t/* If mprotect=all is not set, then final value of _headerProtectCntr should be same is its initial value (= 1).\n \t * If mprotect=all is set, then above call to unprotectHeaderReadWriteArea() will set it to 1.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE1NzI2NQ=="}, "originalCommit": {"oid": "8c06099a2c4f8b3d403bd7d8be52e4b8dbbaefbb"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 972, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}