{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMxMzkxMTM5", "number": 11344, "title": "AArch64: Add jitARM64Handler", "bodyText": "Add jitARM64Handler to support implicit NULLCHK for aarch64.\nSigned-off-by: Akira Saitoh saiaki@jp.ibm.com", "createdAt": "2020-12-03T01:19:03Z", "url": "https://github.com/eclipse-openj9/openj9/pull/11344", "merged": true, "mergeCommit": {"oid": "ca4d9e9a43f4c191e6a1ff76c54caadcf66214e2"}, "closed": true, "closedAt": "2020-12-08T12:15:53Z", "author": {"login": "Akira1Saitoh"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdiY9lfgBqjQwNjUxMjkxMjk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdkJGmmAFqTU0NzE3NzU1MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "99e530544b458b589c06dcb4540a79a0a4bda8e7", "author": {"user": {"login": "Akira1Saitoh", "name": "Akira Saito"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/99e530544b458b589c06dcb4540a79a0a4bda8e7", "committedDate": "2020-12-02T00:48:41Z", "message": "AArch64: Add jitARM64Handler\n\nAdd jitARM64Handler to support implicit NULLCHK for aarch64.\n\nSigned-off-by: Akira Saitoh <saiaki@jp.ibm.com>"}, "afterCommit": {"oid": "1364db73123569d21bcb8bc13e2c05b182de5a00", "author": {"user": {"login": "Akira1Saitoh", "name": "Akira Saito"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/1364db73123569d21bcb8bc13e2c05b182de5a00", "committedDate": "2020-12-03T01:35:20Z", "message": "AArch64: Add jitARM64Handler\n\nAdd jitARM64Handler to support implicit NULLCHK for aarch64.\n\nSigned-off-by: Akira Saitoh <saiaki@jp.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1OTU1MzA2", "url": "https://github.com/eclipse-openj9/openj9/pull/11344#pullrequestreview-545955306", "createdAt": "2020-12-07T09:15:03Z", "commit": {"oid": "1364db73123569d21bcb8bc13e2c05b182de5a00"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwOToxNTowNFrOIAc5OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwOToxNTowNFrOIAc5OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzM0NDMxMg==", "bodyText": "Mixed styles of declaring pointer variables.\nconst char* infoName; or const char *infoName;", "url": "https://github.com/eclipse-openj9/openj9/pull/11344#discussion_r537344312", "createdAt": "2020-12-07T09:15:04Z", "author": {"login": "knn-k"}, "path": "runtime/compiler/runtime/SignalHandler.c", "diffHunk": "@@ -1850,6 +1850,87 @@ UDATA jitAMD64Handler(J9VMThread* vmThread, U_32 sigType, void *sigInfo)\n \treturn J9PORT_SIG_EXCEPTION_CONTINUE_SEARCH;\n }\n \n+#elif defined(TR_HOST_ARM64) && defined(TR_TARGET_ARM64)\n+\n+extern void jitHandleNullPointerExceptionTrap(void);\n+extern void jitHandleInternalErrorTrap(void);\n+\n+UDATA jitARM64Handler(J9VMThread* vmThread, U_32 sigType, void* sigInfo)\n+{\n+\tPORT_ACCESS_FROM_VMC(vmThread);\n+\n+\tJ9JITExceptionTable *exceptionTable = NULL;\n+\tJ9JITConfig *jitConfig = vmThread->javaVM->jitConfig;\n+\n+\tif (jitConfig) {\n+\t\tconst char* infoName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1364db73123569d21bcb8bc13e2c05b182de5a00"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1OTU4MjUw", "url": "https://github.com/eclipse-openj9/openj9/pull/11344#pullrequestreview-545958250", "createdAt": "2020-12-07T09:18:50Z", "commit": {"oid": "1364db73123569d21bcb8bc13e2c05b182de5a00"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwOToxODo1MFrOIAdCoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwOToxODo1MFrOIAdCoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzM0NjcyMA==", "bodyText": "You may want to define a symbol for a page size.\nIs the size of the first page 64KB?", "url": "https://github.com/eclipse-openj9/openj9/pull/11344#discussion_r537346720", "createdAt": "2020-12-07T09:18:50Z", "author": {"login": "knn-k"}, "path": "runtime/compiler/runtime/SignalHandler.c", "diffHunk": "@@ -1850,6 +1850,87 @@ UDATA jitAMD64Handler(J9VMThread* vmThread, U_32 sigType, void *sigInfo)\n \treturn J9PORT_SIG_EXCEPTION_CONTINUE_SEARCH;\n }\n \n+#elif defined(TR_HOST_ARM64) && defined(TR_TARGET_ARM64)\n+\n+extern void jitHandleNullPointerExceptionTrap(void);\n+extern void jitHandleInternalErrorTrap(void);\n+\n+UDATA jitARM64Handler(J9VMThread* vmThread, U_32 sigType, void* sigInfo)\n+{\n+\tPORT_ACCESS_FROM_VMC(vmThread);\n+\n+\tJ9JITExceptionTable *exceptionTable = NULL;\n+\tJ9JITConfig *jitConfig = vmThread->javaVM->jitConfig;\n+\n+\tif (jitConfig) {\n+\t\tconst char* infoName;\n+\t\tUDATA *pcPtr;\n+\t\tvoid *infoValue;\n+\t\tU_32 infoType;\n+\t\tJ9JITExceptionTable *exceptionTable;\n+\n+\t\tinfoType = j9sig_info(sigInfo, J9PORT_SIG_CONTROL, J9PORT_SIG_CONTROL_PC, &infoName, &infoValue);\n+\t\tif (infoType != J9PORT_SIG_VALUE_ADDRESS) {\n+\t\t\treturn J9PORT_SIG_EXCEPTION_CONTINUE_SEARCH;\n+\t\t}\n+\t\tpcPtr = (UDATA *) infoValue;\n+\n+\t\texceptionTable = jitConfig->jitGetExceptionTableFromPC(vmThread, *pcPtr);\n+\n+\t\tif (!exceptionTable && J9PORT_SIG_FLAG_SIGBUS == sigType) {\n+\t\t   // We might be in a jit helper routine (like arraycopy) so look at the link register as well...\n+\t\t   UDATA *lrPtr;\n+\t\t   /* R30 is LR for aarch64 */\n+\t\t   infoType = j9sig_info(sigInfo, J9PORT_SIG_GPR, 30, &infoName, &infoValue);\n+\t\t   if (infoType != J9PORT_SIG_VALUE_ADDRESS) {\n+\t\t      return J9PORT_SIG_EXCEPTION_CONTINUE_SEARCH;\n+\t\t   }\n+\t\t   lrPtr = (UDATA *) infoValue;\n+\t\t   exceptionTable = jitConfig->jitGetExceptionTableFromPC(vmThread, *lrPtr);\n+\t\t   if (exceptionTable) {\n+\t\t\t\tvmThread->jitException = (J9Object *) (*lrPtr);  /* the lr points at the instruction after the helper call */\n+\t\t\t\t*pcPtr = (UDATA) ((void *) &jitHandleInternalErrorTrap);\n+\t\t\t\treturn J9PORT_SIG_EXCEPTION_CONTINUE_EXECUTION;\n+\t\t   }\n+\t\t}\n+\n+\t\tif (exceptionTable) {\n+\t\t\tswitch (sigType) {\n+\t\t\tcase J9PORT_SIG_FLAG_SIGBUS:\n+\t\t\tcase J9PORT_SIG_FLAG_SIGSEGV:\n+\t\t\t\tinfoType = j9sig_info(sigInfo, J9PORT_SIG_SIGNAL, J9PORT_SIG_SIGNAL_INACCESSIBLE_ADDRESS, &infoName, &infoValue);\n+\t\t\t\tif (sigType == J9PORT_SIG_FLAG_SIGSEGV && infoType == J9PORT_SIG_VALUE_ADDRESS) {\n+\t\t\t\t\tif ( *(UDATA*)infoValue > 0xFFFF ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1364db73123569d21bcb8bc13e2c05b182de5a00"}, "originalPosition": 61}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1364db73123569d21bcb8bc13e2c05b182de5a00", "author": {"user": {"login": "Akira1Saitoh", "name": "Akira Saito"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/1364db73123569d21bcb8bc13e2c05b182de5a00", "committedDate": "2020-12-03T01:35:20Z", "message": "AArch64: Add jitARM64Handler\n\nAdd jitARM64Handler to support implicit NULLCHK for aarch64.\n\nSigned-off-by: Akira Saitoh <saiaki@jp.ibm.com>"}, "afterCommit": {"oid": "46d0f396ad5dbe1bd0cb708937e51c608492b268", "author": {"user": {"login": "Akira1Saitoh", "name": "Akira Saito"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/46d0f396ad5dbe1bd0cb708937e51c608492b268", "committedDate": "2020-12-08T00:49:48Z", "message": "AArch64: Add jitARM64Handler\n\nAdd jitARM64Handler to support implicit NULLCHK for aarch64.\n\nSigned-off-by: Akira Saitoh <saiaki@jp.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "46d0f396ad5dbe1bd0cb708937e51c608492b268", "author": {"user": {"login": "Akira1Saitoh", "name": "Akira Saito"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/46d0f396ad5dbe1bd0cb708937e51c608492b268", "committedDate": "2020-12-08T00:49:48Z", "message": "AArch64: Add jitARM64Handler\n\nAdd jitARM64Handler to support implicit NULLCHK for aarch64.\n\nSigned-off-by: Akira Saitoh <saiaki@jp.ibm.com>"}, "afterCommit": {"oid": "b8616767d1d9709261a179def2707484bdbe6fca", "author": {"user": {"login": "Akira1Saitoh", "name": "Akira Saito"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/b8616767d1d9709261a179def2707484bdbe6fca", "committedDate": "2020-12-08T01:21:21Z", "message": "AArch64: Add jitARM64Handler\n\nAdd jitARM64Handler to support implicit NULLCHK for aarch64.\n\nSigned-off-by: Akira Saitoh <saiaki@jp.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2Njc1Mzc5", "url": "https://github.com/eclipse-openj9/openj9/pull/11344#pullrequestreview-546675379", "createdAt": "2020-12-08T01:29:16Z", "commit": {"oid": "b8616767d1d9709261a179def2707484bdbe6fca"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMToyOToxNlrOIBCmlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMToyOToxNlrOIBCmlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk2MjEzMg==", "bodyText": "You need to compare using >= instead of > here.", "url": "https://github.com/eclipse-openj9/openj9/pull/11344#discussion_r537962132", "createdAt": "2020-12-08T01:29:16Z", "author": {"login": "knn-k"}, "path": "runtime/compiler/runtime/SignalHandler.c", "diffHunk": "@@ -1850,6 +1850,87 @@ UDATA jitAMD64Handler(J9VMThread* vmThread, U_32 sigType, void *sigInfo)\n \treturn J9PORT_SIG_EXCEPTION_CONTINUE_SEARCH;\n }\n \n+#elif defined(TR_HOST_ARM64) && defined(TR_TARGET_ARM64)\n+\n+#define NUMBEROFBYTESINACCESSIBLE 4096\n+extern void jitHandleNullPointerExceptionTrap(void);\n+extern void jitHandleInternalErrorTrap(void);\n+\n+UDATA jitARM64Handler(J9VMThread* vmThread, U_32 sigType, void* sigInfo)\n+{\n+\tPORT_ACCESS_FROM_VMC(vmThread);\n+\n+\tJ9JITExceptionTable *exceptionTable = NULL;\n+\tJ9JITConfig *jitConfig = vmThread->javaVM->jitConfig;\n+\n+\tif (jitConfig) {\n+\t\tconst char *infoName;\n+\t\tUDATA *pcPtr;\n+\t\tvoid *infoValue;\n+\t\tU_32 infoType;\n+\t\tJ9JITExceptionTable *exceptionTable;\n+\n+\t\tinfoType = j9sig_info(sigInfo, J9PORT_SIG_CONTROL, J9PORT_SIG_CONTROL_PC, &infoName, &infoValue);\n+\t\tif (infoType != J9PORT_SIG_VALUE_ADDRESS) {\n+\t\t\treturn J9PORT_SIG_EXCEPTION_CONTINUE_SEARCH;\n+\t\t}\n+\t\tpcPtr = (UDATA *) infoValue;\n+\n+\t\texceptionTable = jitConfig->jitGetExceptionTableFromPC(vmThread, *pcPtr);\n+\n+\t\tif (!exceptionTable && J9PORT_SIG_FLAG_SIGBUS == sigType) {\n+\t\t   // We might be in a jit helper routine (like arraycopy) so look at the link register as well...\n+\t\t   UDATA *lrPtr;\n+\t\t   /* R30 is LR for aarch64 */\n+\t\t   infoType = j9sig_info(sigInfo, J9PORT_SIG_GPR, 30, &infoName, &infoValue);\n+\t\t   if (infoType != J9PORT_SIG_VALUE_ADDRESS) {\n+\t\t      return J9PORT_SIG_EXCEPTION_CONTINUE_SEARCH;\n+\t\t   }\n+\t\t   lrPtr = (UDATA *) infoValue;\n+\t\t   exceptionTable = jitConfig->jitGetExceptionTableFromPC(vmThread, *lrPtr);\n+\t\t   if (exceptionTable) {\n+\t\t\t\tvmThread->jitException = (J9Object *) (*lrPtr);  /* the lr points at the instruction after the helper call */\n+\t\t\t\t*pcPtr = (UDATA) ((void *) &jitHandleInternalErrorTrap);\n+\t\t\t\treturn J9PORT_SIG_EXCEPTION_CONTINUE_EXECUTION;\n+\t\t   }\n+\t\t}\n+\n+\t\tif (exceptionTable) {\n+\t\t\tswitch (sigType) {\n+\t\t\tcase J9PORT_SIG_FLAG_SIGBUS:\n+\t\t\tcase J9PORT_SIG_FLAG_SIGSEGV:\n+\t\t\t\tinfoType = j9sig_info(sigInfo, J9PORT_SIG_SIGNAL, J9PORT_SIG_SIGNAL_INACCESSIBLE_ADDRESS, &infoName, &infoValue);\n+\t\t\t\tif (sigType == J9PORT_SIG_FLAG_SIGSEGV && infoType == J9PORT_SIG_VALUE_ADDRESS) {\n+\t\t\t\t\tif ( *(UDATA*)infoValue > NUMBEROFBYTESINACCESSIBLE) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8616767d1d9709261a179def2707484bdbe6fca"}, "originalPosition": 62}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97ee0069b849b57472f371b4cea9952ccbd5076a", "author": {"user": {"login": "Akira1Saitoh", "name": "Akira Saito"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/97ee0069b849b57472f371b4cea9952ccbd5076a", "committedDate": "2020-12-08T01:39:03Z", "message": "AArch64: Add jitARM64Handler\n\nAdd jitARM64Handler to support implicit NULLCHK for aarch64.\n\nSigned-off-by: Akira Saitoh <saiaki@jp.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b8616767d1d9709261a179def2707484bdbe6fca", "author": {"user": {"login": "Akira1Saitoh", "name": "Akira Saito"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/b8616767d1d9709261a179def2707484bdbe6fca", "committedDate": "2020-12-08T01:21:21Z", "message": "AArch64: Add jitARM64Handler\n\nAdd jitARM64Handler to support implicit NULLCHK for aarch64.\n\nSigned-off-by: Akira Saitoh <saiaki@jp.ibm.com>"}, "afterCommit": {"oid": "97ee0069b849b57472f371b4cea9952ccbd5076a", "author": {"user": {"login": "Akira1Saitoh", "name": "Akira Saito"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/97ee0069b849b57472f371b4cea9952ccbd5076a", "committedDate": "2020-12-08T01:39:03Z", "message": "AArch64: Add jitARM64Handler\n\nAdd jitARM64Handler to support implicit NULLCHK for aarch64.\n\nSigned-off-by: Akira Saitoh <saiaki@jp.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3MTc3NTUw", "url": "https://github.com/eclipse-openj9/openj9/pull/11344#pullrequestreview-547177550", "createdAt": "2020-12-08T12:14:53Z", "commit": {"oid": "97ee0069b849b57472f371b4cea9952ccbd5076a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1718, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}