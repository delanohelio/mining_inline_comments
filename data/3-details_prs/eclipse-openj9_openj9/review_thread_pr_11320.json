{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwMzg0MDAz", "number": 11320, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMzozNzoxMVrOE_YkGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQyMDowNzozMVrOFGYA6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0ODk4MjAwOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/x/codegen/J9TreeEvaluator.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMzozNzoxMVrOH9EP2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNzowODowOVrOIFa0gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc5NDc3OA==", "bodyText": "This should use static_cast. Similarly in other places where we fixed the casts on the Z PR.", "url": "https://github.com/eclipse-openj9/openj9/pull/11320#discussion_r533794778", "createdAt": "2020-12-01T23:37:11Z", "author": {"login": "fjeremic"}, "path": "runtime/compiler/x/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -1245,15 +1246,10 @@ TR::Register *J9::X86::TreeEvaluator::newEvaluator(TR::Node *node, TR::CodeGener\n \n TR::Register *J9::X86::TreeEvaluator::multianewArrayEvaluator(TR::Node *node, TR::CodeGenerator *cg)\n    {\n-   static char *useDirectHelperCall = feGetEnv(\"TR_MultiANewArrayEvaluatorUseDirectCall\");\n-\n    TR::Node *firstChild = node->getFirstChild();\n    TR::Node *secondChild = node->getSecondChild();\n    TR::Node *thirdChild = node->getThirdChild();\n \n-   if (useDirectHelperCall || !secondChild->getOpCode().isLoadConst() || secondChild->getInt()!=2)\n-      return TR::TreeEvaluator::performHelperCall(node, NULL, TR::acall, true, cg);\n-\n    // 2-dimensional MultiANewArray\n    TR::Compilation *comp = cg->comp();\n    TR_J9VMBase *fej9 = (TR_J9VMBase *)(comp->fe());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a884c808a3bdd62c434751190a314e807d75b16"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU1MzIxNw==", "bodyText": "Proper casts added in: 997900e", "url": "https://github.com/eclipse-openj9/openj9/pull/11320#discussion_r542553217", "createdAt": "2020-12-14T17:08:09Z", "author": {"login": "dchopra001"}, "path": "runtime/compiler/x/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -1245,15 +1246,10 @@ TR::Register *J9::X86::TreeEvaluator::newEvaluator(TR::Node *node, TR::CodeGener\n \n TR::Register *J9::X86::TreeEvaluator::multianewArrayEvaluator(TR::Node *node, TR::CodeGenerator *cg)\n    {\n-   static char *useDirectHelperCall = feGetEnv(\"TR_MultiANewArrayEvaluatorUseDirectCall\");\n-\n    TR::Node *firstChild = node->getFirstChild();\n    TR::Node *secondChild = node->getSecondChild();\n    TR::Node *thirdChild = node->getThirdChild();\n \n-   if (useDirectHelperCall || !secondChild->getOpCode().isLoadConst() || secondChild->getInt()!=2)\n-      return TR::TreeEvaluator::performHelperCall(node, NULL, TR::acall, true, cg);\n-\n    // 2-dimensional MultiANewArray\n    TR::Compilation *comp = cg->comp();\n    TR_J9VMBase *fej9 = (TR_J9VMBase *)(comp->fe());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc5NDc3OA=="}, "originalCommit": {"oid": "1a884c808a3bdd62c434751190a314e807d75b16"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0ODk4NTA3OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/x/codegen/J9TreeEvaluator.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMzozODoyN1rOH9ERlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNzowNzo0OFrOIFazmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc5NTIyMg==", "bodyText": "elementSize computation should be similar to Z.", "url": "https://github.com/eclipse-openj9/openj9/pull/11320#discussion_r533795222", "createdAt": "2020-12-01T23:38:27Z", "author": {"login": "fjeremic"}, "path": "runtime/compiler/x/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -1317,7 +1314,7 @@ TR::Register *J9::X86::TreeEvaluator::multianewArrayEvaluator(TR::Node *node, TR\n    generateRegMemInstruction(LRegMem(), node, targetReg, generateX86MemoryReference(vmThreadReg, offsetof(J9VMThread, heapAlloc), cg), cg);\n    generateRegMemInstruction(LEARegMem(), node, temp1Reg, generateX86MemoryReference(targetReg, zeroArraySize, cg), cg);\n    generateRegMemInstruction(CMPRegMem(), node, temp1Reg, generateX86MemoryReference(vmThreadReg, offsetof(J9VMThread, heapTop), cg), cg);\n-   generateLabelInstruction(JA4, node, failLabel, cg);\n+   generateLabelInstruction(JA4, node, oolJumpPoint, cg);\n    generateMemRegInstruction(SMemReg(), node, generateX86MemoryReference(vmThreadReg, offsetof(J9VMThread, heapAlloc), cg), temp1Reg, cg);\n \n    // Init class", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a884c808a3bdd62c434751190a314e807d75b16"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU1Mjk4Nw==", "bodyText": "Fixed in: 997900e", "url": "https://github.com/eclipse-openj9/openj9/pull/11320#discussion_r542552987", "createdAt": "2020-12-14T17:07:48Z", "author": {"login": "dchopra001"}, "path": "runtime/compiler/x/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -1317,7 +1314,7 @@ TR::Register *J9::X86::TreeEvaluator::multianewArrayEvaluator(TR::Node *node, TR\n    generateRegMemInstruction(LRegMem(), node, targetReg, generateX86MemoryReference(vmThreadReg, offsetof(J9VMThread, heapAlloc), cg), cg);\n    generateRegMemInstruction(LEARegMem(), node, temp1Reg, generateX86MemoryReference(targetReg, zeroArraySize, cg), cg);\n    generateRegMemInstruction(CMPRegMem(), node, temp1Reg, generateX86MemoryReference(vmThreadReg, offsetof(J9VMThread, heapTop), cg), cg);\n-   generateLabelInstruction(JA4, node, failLabel, cg);\n+   generateLabelInstruction(JA4, node, oolJumpPoint, cg);\n    generateMemRegInstruction(SMemReg(), node, generateX86MemoryReference(vmThreadReg, offsetof(J9VMThread, heapAlloc), cg), temp1Reg, cg);\n \n    // Init class", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc5NTIyMg=="}, "originalCommit": {"oid": "1a884c808a3bdd62c434751190a314e807d75b16"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0ODk4NjU2OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/x/codegen/J9TreeEvaluator.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMzozODo1M1rOH9ESUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNzowNzo0M1rOIFazVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc5NTQwOA==", "bodyText": "The if (comp->target().is64Bit() && !(maxObjectSizeInElements > 0 && maxObjectSizeInElements <= (uintptr_t)INT_MAX)) needs to be fixed the same way as Z.", "url": "https://github.com/eclipse-openj9/openj9/pull/11320#discussion_r533795408", "createdAt": "2020-12-01T23:38:53Z", "author": {"login": "fjeremic"}, "path": "runtime/compiler/x/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -1317,7 +1314,7 @@ TR::Register *J9::X86::TreeEvaluator::multianewArrayEvaluator(TR::Node *node, TR\n    generateRegMemInstruction(LRegMem(), node, targetReg, generateX86MemoryReference(vmThreadReg, offsetof(J9VMThread, heapAlloc), cg), cg);\n    generateRegMemInstruction(LEARegMem(), node, temp1Reg, generateX86MemoryReference(targetReg, zeroArraySize, cg), cg);\n    generateRegMemInstruction(CMPRegMem(), node, temp1Reg, generateX86MemoryReference(vmThreadReg, offsetof(J9VMThread, heapTop), cg), cg);\n-   generateLabelInstruction(JA4, node, failLabel, cg);\n+   generateLabelInstruction(JA4, node, oolJumpPoint, cg);\n    generateMemRegInstruction(SMemReg(), node, generateX86MemoryReference(vmThreadReg, offsetof(J9VMThread, heapAlloc), cg), temp1Reg, cg);\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a884c808a3bdd62c434751190a314e807d75b16"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU1MjkxNw==", "bodyText": "Fixed in: 997900e", "url": "https://github.com/eclipse-openj9/openj9/pull/11320#discussion_r542552917", "createdAt": "2020-12-14T17:07:43Z", "author": {"login": "dchopra001"}, "path": "runtime/compiler/x/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -1317,7 +1314,7 @@ TR::Register *J9::X86::TreeEvaluator::multianewArrayEvaluator(TR::Node *node, TR\n    generateRegMemInstruction(LRegMem(), node, targetReg, generateX86MemoryReference(vmThreadReg, offsetof(J9VMThread, heapAlloc), cg), cg);\n    generateRegMemInstruction(LEARegMem(), node, temp1Reg, generateX86MemoryReference(targetReg, zeroArraySize, cg), cg);\n    generateRegMemInstruction(CMPRegMem(), node, temp1Reg, generateX86MemoryReference(vmThreadReg, offsetof(J9VMThread, heapTop), cg), cg);\n-   generateLabelInstruction(JA4, node, failLabel, cg);\n+   generateLabelInstruction(JA4, node, oolJumpPoint, cg);\n    generateMemRegInstruction(SMemReg(), node, generateX86MemoryReference(vmThreadReg, offsetof(J9VMThread, heapAlloc), cg), temp1Reg, cg);\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc5NTQwOA=="}, "originalCommit": {"oid": "1a884c808a3bdd62c434751190a314e807d75b16"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMjI5MjI1OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/x/codegen/J9TreeEvaluator.cpp", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQyMDowNzozMVrOIHXEfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNTowMDoxOVrOIImiCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU4ODkyNg==", "bodyText": "Am I reading the code wrong, or does the loop exit on L1413 (generateLabelInstruction(JA4, node, loopLabel, cg);) fall into this code if the backedge isn't taken, which will always take you to the OOL instructions?  Is this the behaviour you expect because I don't think that's how it originally behaved.  You might need a branch around this if not.", "url": "https://github.com/eclipse-openj9/openj9/pull/11320#discussion_r544588926", "createdAt": "2020-12-16T20:07:31Z", "author": {"login": "0xdaryl"}, "path": "runtime/compiler/x/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -1480,6 +1445,9 @@ TR::Register *J9::X86::TreeEvaluator::multianewArrayEvaluator(TR::Node *node, TR\n \n    deps->stopAddingConditions();\n \n+   generateLabelInstruction(LABEL, node, oolJumpPoint, cg);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "997900e195cb6aa8469deec54cdf947e8622d2f4"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDYxMTc1Nw==", "bodyText": "Good catch! We'll need a jump to the fallThru label on line 1451 if we don't branch back to loopLabel. I've added it here: dde60a6", "url": "https://github.com/eclipse-openj9/openj9/pull/11320#discussion_r544611757", "createdAt": "2020-12-16T20:47:11Z", "author": {"login": "dchopra001"}, "path": "runtime/compiler/x/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -1480,6 +1445,9 @@ TR::Register *J9::X86::TreeEvaluator::multianewArrayEvaluator(TR::Node *node, TR\n \n    deps->stopAddingConditions();\n \n+   generateLabelInstruction(LABEL, node, oolJumpPoint, cg);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU4ODkyNg=="}, "originalCommit": {"oid": "997900e195cb6aa8469deec54cdf947e8622d2f4"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI5MzA3Ng==", "bodyText": "Let's run the microbenchmark on x86 to ensure we don't regress performance.", "url": "https://github.com/eclipse-openj9/openj9/pull/11320#discussion_r545293076", "createdAt": "2020-12-17T18:03:15Z", "author": {"login": "fjeremic"}, "path": "runtime/compiler/x/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -1480,6 +1445,9 @@ TR::Register *J9::X86::TreeEvaluator::multianewArrayEvaluator(TR::Node *node, TR\n \n    deps->stopAddingConditions();\n \n+   generateLabelInstruction(LABEL, node, oolJumpPoint, cg);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU4ODkyNg=="}, "originalCommit": {"oid": "997900e195cb6aa8469deec54cdf947e8622d2f4"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg5MDgyNw==", "bodyText": "Here are the results from the microbenchmark (performance looks as expected):\nfirstDimLength=0, secondDimLength=0,maxIterations=1000000 (allocation done in jit code)\n\n   -- finale --\n   42.2s:  >! 155.3M    167.6M    9.0   155.3M  155.3M  1886.1\n   43.2s:  <  175.2M    166.6M    5.4   155.3M  155.3M  1886.1\n   44.2s:  >  162.1M    163.7M    3.2   162.1M  162.1M  1890.4\n   45.2s:  >! 166.3M    169.3M    3.4   166.3M  166.3M  1892.9\n   46.2s:  <  172.1M    170.5M    2.0   166.3M  166.3M  1892.9\n   47.2s:  >  168.8M    169.6M    1.2   168.8M  168.8M  1894.4\n   48.2s:  <  170.7M    164.9M    2.8   168.8M  168.8M  1894.4\n   49.2s:  >  162.6M    167.0M    1.7   168.8M  168.8M  1894.4\n   50.2s:  <  168.4M    167.8M    1.0   168.8M  -inf    --\n   51.2s:  >  166.9M    168.5M    0.6   168.8M  166.9M  1893.3\n   52.2s:  <  169.0M    167.2M    0.8   168.8M  166.9M  1893.3\n   53.2s:  >  166.5M    169.5M    1.4   168.8M  166.9M  1893.3  \nMultiANewArray score: 168802736.000000 (168.8M 1894.4%)\n           uncertainty:   1.4%\n\nfirstDimLength=1000,secondDimLength=0,maxIterations=1000000 (allocation done in JIT code)\n\n   -- finale --\n   36.2s:  <  33.93K    33.85K    1.3   33.49K  33.49K  1041.9\n   37.2s:  >  33.64K    33.92K    0.8   33.64K  33.64K  1042.4\n   38.2s:  <  34.05K    33.72K    0.5   33.64K  33.64K  1042.4\n   39.3s:  <! 33.65K    30.13K   10.7   33.64K  33.64K  1042.4\n   40.2s:  >  28.52K    33.62K   12.2   33.64K  33.64K  1042.4\n   41.2s:  <  35.68K    33.51K    7.3   33.64K  33.64K  1042.4\n   42.2s:  >  32.28K    32.76K    4.4   33.64K  33.64K  1042.4\n   43.2s:  <  33.48K    33.31K    2.6   33.64K  -inf    --\n   44.2s:  >  32.87K    33.22K    1.6   33.64K  32.87K  1040.0\n   45.2s:  >! 33.48K    33.64K    1.9   33.64K  33.48K  1041.9\n   46.2s:  <  33.96K    33.67K    1.1   33.64K  33.48K  1041.9\n   47.2s:  >  33.47K    33.61K    0.7   33.64K  33.48K  1041.9  \nMultiANewArray score: 33642.914063 (33.64K 1042.4%)\n           uncertainty:   0.7%\n\nfirstDimLength=1000,secondDimLength=1,maxIterations=1000000 (jump to OOL to do allocation)\n\n -- finale --\n   38.8s:  <  6870      6685      1.6   6585    6585    879.3\n   39.8s:  <! 6632      6566      1.8   6585    6585    879.3\n   40.8s:  >  6507      6631      1.1   6585    6585    879.3\n   41.7s:  >! 6667      6695      1.3   6667    6667    880.5\n   42.8s:  <  6738      6589      1.6   6667    6667    880.5\n   43.7s:  >  6538      6823      3.6   6667    6667    880.5\n   44.8s:  <  6944      6732      2.1   6667    6667    880.5\n   45.7s:  >  6660      6776      1.3   6667    6667    880.5\n   46.7s:  >! 6820      6825      1.5   6820    6820    882.8\n   47.9s:  <  6877      6181      9.4   6820    6820    882.8\n   48.7s:  >  5891      6764      9.9   6820    6820    882.8\n   49.8s:  <  7098      6768      5.9   6820    6820    882.8\n   50.8s:  >  6567      6701      3.6   6820    6820    882.8\n  MultiANewArray score: 6819.545410 (6820 882.8%)\n           uncertainty:   3.6%", "url": "https://github.com/eclipse-openj9/openj9/pull/11320#discussion_r545890827", "createdAt": "2020-12-18T15:00:19Z", "author": {"login": "dchopra001"}, "path": "runtime/compiler/x/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -1480,6 +1445,9 @@ TR::Register *J9::X86::TreeEvaluator::multianewArrayEvaluator(TR::Node *node, TR\n \n    deps->stopAddingConditions();\n \n+   generateLabelInstruction(LABEL, node, oolJumpPoint, cg);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU4ODkyNg=="}, "originalCommit": {"oid": "997900e195cb6aa8469deec54cdf947e8622d2f4"}, "originalPosition": 174}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 986, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}