{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1OTkxNTM2", "number": 10239, "title": "JEP371 ClassData Support and JEP383 Support (Part 3)", "bodyText": "JEP371 ClassData Support:\n\nImplement Class.setClassData(...) and Class.getClassData()\nStore classData before init in ClassLoader_defineClassImpl1\nImplement Access.classData(...)\nImplement MethodHandleNatives.classData(...)\nImplement ClassDefiner.defineClass(initOption, classData)\nImplement Lookup.defineHiddenClassWithClassData(...)\nImplement MethodHandles.classData(...)\n\nJEP383 Support (Part 3):\n\nImplement MethodHandles.permuteArgumentChecks(...)\nImplement MethodHandles.collectReturnValue(...)\nImplement VarHandle.target()\nImplement VarHandle.asDirect()\nImplement VarHandle.isDirect()\nImplement VarHandle.getMethodHandle(...)\n\nRelated: #9625\nSigned-off-by: Babneet Singh sbabneet@ca.ibm.com", "createdAt": "2020-07-23T22:56:31Z", "url": "https://github.com/eclipse-openj9/openj9/pull/10239", "merged": true, "mergeCommit": {"oid": "0f92fc42a816955ae392b67986da3ec7f493f97d"}, "closed": true, "closedAt": "2020-08-07T12:56:19Z", "author": {"login": "babsingh"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc4EvafgFqTQ1NDkyMzc2MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc8Tg_RAFqTQ2Mjc0MzU3MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0OTIzNzYx", "url": "https://github.com/eclipse-openj9/openj9/pull/10239#pullrequestreview-454923761", "createdAt": "2020-07-24T14:17:15Z", "commit": {"oid": "08bbdcc2e2bdebfd24664335e21c61d643e6a2c5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2MTE1MjAy", "url": "https://github.com/eclipse-openj9/openj9/pull/10239#pullrequestreview-456115202", "createdAt": "2020-07-27T20:35:29Z", "commit": {"oid": "90a8a9312899ed56f7fc04b6a43b9d48364f4182"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3ODA0MjAx", "url": "https://github.com/eclipse-openj9/openj9/pull/10239#pullrequestreview-457804201", "createdAt": "2020-07-29T19:00:03Z", "commit": {"oid": "90a8a9312899ed56f7fc04b6a43b9d48364f4182"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxOTowMDowM1rOG5F92w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxOToxODozMVrOG5Gnfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUxOTc3MQ==", "bodyText": "This duplicates the body of defineClass.  Can the Class<?> defineClass(boolean initOption) version forward to this one with a null classData?", "url": "https://github.com/eclipse-openj9/openj9/pull/10239#discussion_r462519771", "createdAt": "2020-07-29T19:00:03Z", "author": {"login": "DanHeidinga"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -2282,45 +2282,83 @@ int toFlag() {\n \t\t\tprivate final String className;\n \t\t\tprivate final Lookup lookup;\n \t\t\tprivate final int ClassOptFlags;\n+\n \t\t\tClassDefiner(String name, byte[] template, Lookup lookupObj, int flags) {\n \t\t\t\tclassName = name;\n \t\t\t\tclassBytes = template;\n \t\t\t\tlookup = lookupObj;\n \t\t\t\tClassOptFlags = flags;\n \t\t\t}\n+\n \t\t\tClassDefiner(String name, byte[] template, Lookup lookupObj) {\n \t\t\t\tclassName = name;\n \t\t\t\tclassBytes = template;\n \t\t\t\tlookup = lookupObj;\n \t\t\t\tClassOptFlags = 0;\n \t\t\t}\n+\n \t\t\tClass<?> defineClass(boolean initOption) {\n \t\t\t\tClass<?> ret = AccessController.doPrivileged(new PrivilegedAction<Class<?>>() {\n \t\t\t\t\t@Override\n \t\t\t\t\tpublic Class<?> run() {\n \t\t\t\t\t\tJavaLangAccess jlAccess = SharedSecrets.getJavaLangAccess();\n \t\t\t\t\t\tClass<?> lookupClass = lookup.lookupClass();\n-\t\t\t\t\t\treturn jlAccess.defineClass(lookupClass.getClassLoader(), lookupClass, className, classBytes, jlAccess.protectionDomain(lookupClass), initOption, ClassOptFlags, null);\n+\t\t\t\t\t\treturn jlAccess.defineClass(lookupClass.getClassLoader(), lookupClass, className, classBytes,\n+\t\t\t\t\t\t\t\tjlAccess.protectionDomain(lookupClass), initOption, ClassOptFlags, null);\n+\t\t\t\t\t}\n+\t\t\t\t});\n+\t\t\t\treturn ret;\n+\t\t\t}\n+\n+\t\t\tClass<?> defineClass(boolean initOption, Object classData) {\n+\t\t\t\tClass<?> ret = AccessController.doPrivileged(new PrivilegedAction<Class<?>>() {\n+\t\t\t\t\t@Override\n+\t\t\t\t\tpublic Class<?> run() {\n+\t\t\t\t\t\tJavaLangAccess jlAccess = SharedSecrets.getJavaLangAccess();\n+\t\t\t\t\t\tClass<?> lookupClass = lookup.lookupClass();\n+\t\t\t\t\t\treturn jlAccess.defineClass(lookupClass.getClassLoader(), lookupClass, className, classBytes,\n+\t\t\t\t\t\t\t\tjlAccess.protectionDomain(lookupClass), initOption, ClassOptFlags, classData);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90a8a9312899ed56f7fc04b6a43b9d48364f4182"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUyMTIzMg==", "bodyText": "class data bytes may be confusing given the addition of the classData object", "url": "https://github.com/eclipse-openj9/openj9/pull/10239#discussion_r462521232", "createdAt": "2020-07-29T19:02:28Z", "author": {"login": "DanHeidinga"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -2282,45 +2282,83 @@ int toFlag() {\n \t\t\tprivate final String className;\n \t\t\tprivate final Lookup lookup;\n \t\t\tprivate final int ClassOptFlags;\n+\n \t\t\tClassDefiner(String name, byte[] template, Lookup lookupObj, int flags) {\n \t\t\t\tclassName = name;\n \t\t\t\tclassBytes = template;\n \t\t\t\tlookup = lookupObj;\n \t\t\t\tClassOptFlags = flags;\n \t\t\t}\n+\n \t\t\tClassDefiner(String name, byte[] template, Lookup lookupObj) {\n \t\t\t\tclassName = name;\n \t\t\t\tclassBytes = template;\n \t\t\t\tlookup = lookupObj;\n \t\t\t\tClassOptFlags = 0;\n \t\t\t}\n+\n \t\t\tClass<?> defineClass(boolean initOption) {\n \t\t\t\tClass<?> ret = AccessController.doPrivileged(new PrivilegedAction<Class<?>>() {\n \t\t\t\t\t@Override\n \t\t\t\t\tpublic Class<?> run() {\n \t\t\t\t\t\tJavaLangAccess jlAccess = SharedSecrets.getJavaLangAccess();\n \t\t\t\t\t\tClass<?> lookupClass = lookup.lookupClass();\n-\t\t\t\t\t\treturn jlAccess.defineClass(lookupClass.getClassLoader(), lookupClass, className, classBytes, jlAccess.protectionDomain(lookupClass), initOption, ClassOptFlags, null);\n+\t\t\t\t\t\treturn jlAccess.defineClass(lookupClass.getClassLoader(), lookupClass, className, classBytes,\n+\t\t\t\t\t\t\t\tjlAccess.protectionDomain(lookupClass), initOption, ClassOptFlags, null);\n+\t\t\t\t\t}\n+\t\t\t\t});\n+\t\t\t\treturn ret;\n+\t\t\t}\n+\n+\t\t\tClass<?> defineClass(boolean initOption, Object classData) {\n+\t\t\t\tClass<?> ret = AccessController.doPrivileged(new PrivilegedAction<Class<?>>() {\n+\t\t\t\t\t@Override\n+\t\t\t\t\tpublic Class<?> run() {\n+\t\t\t\t\t\tJavaLangAccess jlAccess = SharedSecrets.getJavaLangAccess();\n+\t\t\t\t\t\tClass<?> lookupClass = lookup.lookupClass();\n+\t\t\t\t\t\treturn jlAccess.defineClass(lookupClass.getClassLoader(), lookupClass, className, classBytes,\n+\t\t\t\t\t\t\t\tjlAccess.protectionDomain(lookupClass), initOption, ClassOptFlags, classData);\n \t\t\t\t\t}\n \t\t\t\t});\n \t\t\t\treturn ret;\n \t\t\t}\n \t\t}\n+\n \t\t/**\n \t\t * Constructs a new hidden class from an array of class data bytes.\n \t\t * \n-\t\t * @param bytes the class data bytes of the hidden class to be defined.  \n+\t\t * @param bytes the class data bytes of the hidden class to be defined.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90a8a9312899ed56f7fc04b6a43b9d48364f4182"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUyMjE3NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t * Constructs a new hidden class from an array of class data bytes.\n          \n          \n            \n            \t\t * Constructs a new hidden class from an array of class file bytes.", "url": "https://github.com/eclipse-openj9/openj9/pull/10239#discussion_r462522174", "createdAt": "2020-07-29T19:04:08Z", "author": {"login": "DanHeidinga"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -2282,45 +2282,83 @@ int toFlag() {\n \t\t\tprivate final String className;\n \t\t\tprivate final Lookup lookup;\n \t\t\tprivate final int ClassOptFlags;\n+\n \t\t\tClassDefiner(String name, byte[] template, Lookup lookupObj, int flags) {\n \t\t\t\tclassName = name;\n \t\t\t\tclassBytes = template;\n \t\t\t\tlookup = lookupObj;\n \t\t\t\tClassOptFlags = flags;\n \t\t\t}\n+\n \t\t\tClassDefiner(String name, byte[] template, Lookup lookupObj) {\n \t\t\t\tclassName = name;\n \t\t\t\tclassBytes = template;\n \t\t\t\tlookup = lookupObj;\n \t\t\t\tClassOptFlags = 0;\n \t\t\t}\n+\n \t\t\tClass<?> defineClass(boolean initOption) {\n \t\t\t\tClass<?> ret = AccessController.doPrivileged(new PrivilegedAction<Class<?>>() {\n \t\t\t\t\t@Override\n \t\t\t\t\tpublic Class<?> run() {\n \t\t\t\t\t\tJavaLangAccess jlAccess = SharedSecrets.getJavaLangAccess();\n \t\t\t\t\t\tClass<?> lookupClass = lookup.lookupClass();\n-\t\t\t\t\t\treturn jlAccess.defineClass(lookupClass.getClassLoader(), lookupClass, className, classBytes, jlAccess.protectionDomain(lookupClass), initOption, ClassOptFlags, null);\n+\t\t\t\t\t\treturn jlAccess.defineClass(lookupClass.getClassLoader(), lookupClass, className, classBytes,\n+\t\t\t\t\t\t\t\tjlAccess.protectionDomain(lookupClass), initOption, ClassOptFlags, null);\n+\t\t\t\t\t}\n+\t\t\t\t});\n+\t\t\t\treturn ret;\n+\t\t\t}\n+\n+\t\t\tClass<?> defineClass(boolean initOption, Object classData) {\n+\t\t\t\tClass<?> ret = AccessController.doPrivileged(new PrivilegedAction<Class<?>>() {\n+\t\t\t\t\t@Override\n+\t\t\t\t\tpublic Class<?> run() {\n+\t\t\t\t\t\tJavaLangAccess jlAccess = SharedSecrets.getJavaLangAccess();\n+\t\t\t\t\t\tClass<?> lookupClass = lookup.lookupClass();\n+\t\t\t\t\t\treturn jlAccess.defineClass(lookupClass.getClassLoader(), lookupClass, className, classBytes,\n+\t\t\t\t\t\t\t\tjlAccess.protectionDomain(lookupClass), initOption, ClassOptFlags, classData);\n \t\t\t\t\t}\n \t\t\t\t});\n \t\t\t\treturn ret;\n \t\t\t}\n \t\t}\n+\n \t\t/**\n \t\t * Constructs a new hidden class from an array of class data bytes.\n \t\t * \n-\t\t * @param bytes the class data bytes of the hidden class to be defined.  \n+\t\t * @param bytes the class data bytes of the hidden class to be defined.\n \t\t * @param initOption whether to initialize the hidden class.\n \t\t * @param classOptions the {@link ClassOption} to define the hidden class.\n+\t\t * \n \t\t * @return A Lookup object of the newly created hidden class.\n \t\t * @throws IllegalAccessException if this Lookup does not have full privilege access.\n \t\t */\n-\n \t\tpublic Lookup defineHiddenClass(byte[] bytes, boolean initOption, ClassOption... classOptions) throws IllegalAccessException {\n+\t\t\tClassDefiner definer = classDefiner(bytes, classOptions);\n+\t\t\treturn new Lookup(definer.defineClass(initOption));\n+\t\t}\n+\t\t\n+\t\t/**\n+\t\t * Constructs a new hidden class from an array of class data bytes.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90a8a9312899ed56f7fc04b6a43b9d48364f4182"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUyMjMwOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t * @param bytes the class data bytes of the hidden class to be defined.\n          \n          \n            \n            \t\t * @param bytes the class file bytes of the hidden class to be defined.", "url": "https://github.com/eclipse-openj9/openj9/pull/10239#discussion_r462522309", "createdAt": "2020-07-29T19:04:22Z", "author": {"login": "DanHeidinga"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -2282,45 +2282,83 @@ int toFlag() {\n \t\t\tprivate final String className;\n \t\t\tprivate final Lookup lookup;\n \t\t\tprivate final int ClassOptFlags;\n+\n \t\t\tClassDefiner(String name, byte[] template, Lookup lookupObj, int flags) {\n \t\t\t\tclassName = name;\n \t\t\t\tclassBytes = template;\n \t\t\t\tlookup = lookupObj;\n \t\t\t\tClassOptFlags = flags;\n \t\t\t}\n+\n \t\t\tClassDefiner(String name, byte[] template, Lookup lookupObj) {\n \t\t\t\tclassName = name;\n \t\t\t\tclassBytes = template;\n \t\t\t\tlookup = lookupObj;\n \t\t\t\tClassOptFlags = 0;\n \t\t\t}\n+\n \t\t\tClass<?> defineClass(boolean initOption) {\n \t\t\t\tClass<?> ret = AccessController.doPrivileged(new PrivilegedAction<Class<?>>() {\n \t\t\t\t\t@Override\n \t\t\t\t\tpublic Class<?> run() {\n \t\t\t\t\t\tJavaLangAccess jlAccess = SharedSecrets.getJavaLangAccess();\n \t\t\t\t\t\tClass<?> lookupClass = lookup.lookupClass();\n-\t\t\t\t\t\treturn jlAccess.defineClass(lookupClass.getClassLoader(), lookupClass, className, classBytes, jlAccess.protectionDomain(lookupClass), initOption, ClassOptFlags, null);\n+\t\t\t\t\t\treturn jlAccess.defineClass(lookupClass.getClassLoader(), lookupClass, className, classBytes,\n+\t\t\t\t\t\t\t\tjlAccess.protectionDomain(lookupClass), initOption, ClassOptFlags, null);\n+\t\t\t\t\t}\n+\t\t\t\t});\n+\t\t\t\treturn ret;\n+\t\t\t}\n+\n+\t\t\tClass<?> defineClass(boolean initOption, Object classData) {\n+\t\t\t\tClass<?> ret = AccessController.doPrivileged(new PrivilegedAction<Class<?>>() {\n+\t\t\t\t\t@Override\n+\t\t\t\t\tpublic Class<?> run() {\n+\t\t\t\t\t\tJavaLangAccess jlAccess = SharedSecrets.getJavaLangAccess();\n+\t\t\t\t\t\tClass<?> lookupClass = lookup.lookupClass();\n+\t\t\t\t\t\treturn jlAccess.defineClass(lookupClass.getClassLoader(), lookupClass, className, classBytes,\n+\t\t\t\t\t\t\t\tjlAccess.protectionDomain(lookupClass), initOption, ClassOptFlags, classData);\n \t\t\t\t\t}\n \t\t\t\t});\n \t\t\t\treturn ret;\n \t\t\t}\n \t\t}\n+\n \t\t/**\n \t\t * Constructs a new hidden class from an array of class data bytes.\n \t\t * \n-\t\t * @param bytes the class data bytes of the hidden class to be defined.  \n+\t\t * @param bytes the class data bytes of the hidden class to be defined.\n \t\t * @param initOption whether to initialize the hidden class.\n \t\t * @param classOptions the {@link ClassOption} to define the hidden class.\n+\t\t * \n \t\t * @return A Lookup object of the newly created hidden class.\n \t\t * @throws IllegalAccessException if this Lookup does not have full privilege access.\n \t\t */\n-\n \t\tpublic Lookup defineHiddenClass(byte[] bytes, boolean initOption, ClassOption... classOptions) throws IllegalAccessException {\n+\t\t\tClassDefiner definer = classDefiner(bytes, classOptions);\n+\t\t\treturn new Lookup(definer.defineClass(initOption));\n+\t\t}\n+\t\t\n+\t\t/**\n+\t\t * Constructs a new hidden class from an array of class data bytes.\n+\t\t * \n+\t\t * @param bytes the class data bytes of the hidden class to be defined.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90a8a9312899ed56f7fc04b6a43b9d48364f4182"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUyNzEyOQ==", "bodyText": "Why an unused parameter?", "url": "https://github.com/eclipse-openj9/openj9/pull/10239#discussion_r462527129", "createdAt": "2020-07-29T19:12:31Z", "author": {"login": "DanHeidinga"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -5466,12 +5500,96 @@ public Object helper(Object[] arguments) throws Throwable {\n \t}\n \n \t/*[IF Java15]*/\n-\tstatic boolean permuteArgumentChecks(int[] arr, MethodType mt1, MethodType mt2) {\n-\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n+\t/**\n+\t * Validates that the permute[] specifies a valid permutation from permuteType to handleType.\n+\t * This method throws IllegalArgumentException on failure and returns true on success. This\n+\t * disjointness allows it to be used in asserts.\n+\t * \n+\t * @param permute array specifies the conversion from permuteType to handleType.\n+\t * @param permuteType source method type.\n+\t * @param handleType target method type.\n+\t * \n+\t * @return true on success.\n+\t * @throws IllegalArgumentException on failure.\n+\t */\n+\tstatic boolean permuteArgumentChecks(int[] permute, MethodType permuteType, MethodType handleType) {\n+\t\treturn validatePermutationArray(permuteType, handleType, permute);\n \t}\n \t\n-\tstatic MethodHandle collectReturnValue(MethodHandle mh1, MethodHandle mh2) {\n-\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n+\t/**\n+\t * Return the classData stored in the accessClass of the Lookup object.\n+\t * \n+\t * @param caller Lookup object used to verify privileged access and retrieve classData.\n+\t * @param unused.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90a8a9312899ed56f7fc04b6a43b9d48364f4182"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUyODU2Mw==", "bodyText": "Is this field visible to Reflection in the RI?", "url": "https://github.com/eclipse-openj9/openj9/pull/10239#discussion_r462528563", "createdAt": "2020-07-29T19:15:07Z", "author": {"login": "DanHeidinga"}, "path": "jcl/src/java.base/share/classes/java/lang/Class.java", "diffHunk": "@@ -266,6 +266,10 @@ static Unsafe getUnsafe() {\n \tprivate Class<?> nestHost;\n /*[ENDIF] Java11*/\n \t\n+/*[IF Java15]*/\n+\tprivate transient Object classData;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90a8a9312899ed56f7fc04b6a43b9d48364f4182"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUzMDQzMA==", "bodyText": "How did we determine that true aka initialize is the right value here?", "url": "https://github.com/eclipse-openj9/openj9/pull/10239#discussion_r462530430", "createdAt": "2020-07-29T19:18:31Z", "author": {"login": "DanHeidinga"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -2282,45 +2282,83 @@ int toFlag() {\n \t\t\tprivate final String className;\n \t\t\tprivate final Lookup lookup;\n \t\t\tprivate final int ClassOptFlags;\n+\n \t\t\tClassDefiner(String name, byte[] template, Lookup lookupObj, int flags) {\n \t\t\t\tclassName = name;\n \t\t\t\tclassBytes = template;\n \t\t\t\tlookup = lookupObj;\n \t\t\t\tClassOptFlags = flags;\n \t\t\t}\n+\n \t\t\tClassDefiner(String name, byte[] template, Lookup lookupObj) {\n \t\t\t\tclassName = name;\n \t\t\t\tclassBytes = template;\n \t\t\t\tlookup = lookupObj;\n \t\t\t\tClassOptFlags = 0;\n \t\t\t}\n+\n \t\t\tClass<?> defineClass(boolean initOption) {\n \t\t\t\tClass<?> ret = AccessController.doPrivileged(new PrivilegedAction<Class<?>>() {\n \t\t\t\t\t@Override\n \t\t\t\t\tpublic Class<?> run() {\n \t\t\t\t\t\tJavaLangAccess jlAccess = SharedSecrets.getJavaLangAccess();\n \t\t\t\t\t\tClass<?> lookupClass = lookup.lookupClass();\n-\t\t\t\t\t\treturn jlAccess.defineClass(lookupClass.getClassLoader(), lookupClass, className, classBytes, jlAccess.protectionDomain(lookupClass), initOption, ClassOptFlags, null);\n+\t\t\t\t\t\treturn jlAccess.defineClass(lookupClass.getClassLoader(), lookupClass, className, classBytes,\n+\t\t\t\t\t\t\t\tjlAccess.protectionDomain(lookupClass), initOption, ClassOptFlags, null);\n+\t\t\t\t\t}\n+\t\t\t\t});\n+\t\t\t\treturn ret;\n+\t\t\t}\n+\n+\t\t\tClass<?> defineClass(boolean initOption, Object classData) {\n+\t\t\t\tClass<?> ret = AccessController.doPrivileged(new PrivilegedAction<Class<?>>() {\n+\t\t\t\t\t@Override\n+\t\t\t\t\tpublic Class<?> run() {\n+\t\t\t\t\t\tJavaLangAccess jlAccess = SharedSecrets.getJavaLangAccess();\n+\t\t\t\t\t\tClass<?> lookupClass = lookup.lookupClass();\n+\t\t\t\t\t\treturn jlAccess.defineClass(lookupClass.getClassLoader(), lookupClass, className, classBytes,\n+\t\t\t\t\t\t\t\tjlAccess.protectionDomain(lookupClass), initOption, ClassOptFlags, classData);\n \t\t\t\t\t}\n \t\t\t\t});\n \t\t\t\treturn ret;\n \t\t\t}\n \t\t}\n+\n \t\t/**\n \t\t * Constructs a new hidden class from an array of class data bytes.\n \t\t * \n-\t\t * @param bytes the class data bytes of the hidden class to be defined.  \n+\t\t * @param bytes the class data bytes of the hidden class to be defined.\n \t\t * @param initOption whether to initialize the hidden class.\n \t\t * @param classOptions the {@link ClassOption} to define the hidden class.\n+\t\t * \n \t\t * @return A Lookup object of the newly created hidden class.\n \t\t * @throws IllegalAccessException if this Lookup does not have full privilege access.\n \t\t */\n-\n \t\tpublic Lookup defineHiddenClass(byte[] bytes, boolean initOption, ClassOption... classOptions) throws IllegalAccessException {\n+\t\t\tClassDefiner definer = classDefiner(bytes, classOptions);\n+\t\t\treturn new Lookup(definer.defineClass(initOption));\n+\t\t}\n+\t\t\n+\t\t/**\n+\t\t * Constructs a new hidden class from an array of class data bytes.\n+\t\t * \n+\t\t * @param bytes the class data bytes of the hidden class to be defined.\n+\t\t * @param classData the classData to be stored in the hidden class.\n+\t\t * @param classOptions the {@link ClassOption} to define the hidden class.\n+\t\t * \n+\t\t * @return A Lookup object of the newly created hidden class.\n+\t\t * @throws IllegalAccessException if this Lookup does not have full privilege access.\n+\t\t */\n+\t\tLookup defineHiddenClassWithClassData(byte[] bytes, Object classData, ClassOption... classOptions) throws IllegalAccessException {\n+\t\t\tClassDefiner definer = classDefiner(bytes, classOptions);\n+\t\t\treturn new Lookup(definer.defineClass(true, classData));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90a8a9312899ed56f7fc04b6a43b9d48364f4182"}, "originalPosition": 76}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "90a8a9312899ed56f7fc04b6a43b9d48364f4182", "author": {"user": {"login": "babsingh", "name": "Babneet Singh"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/90a8a9312899ed56f7fc04b6a43b9d48364f4182", "committedDate": "2020-07-27T18:58:00Z", "message": "Set Class.classData before init in ClassLoader_defineClassImpl1\n\nBefore the new JEP371 changes, the classData could be set in\nAccess.defineClass in Java code before the class was initialized.\n\nWith the new JEP371 changes, all code to define and init the class was\nmoved into native code, ClassLoader_defineClassImpl1.\n\nThis requires Class.classData to be initialized within\nClassLoader_defineClassImpl1 before the class is initialized.\n\nClass.setClassData is removed since it is no longer used.\n\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>"}, "afterCommit": {"oid": "fbdaa6b644d9d3610b38b54838b2dea81135d916", "author": {"user": {"login": "babsingh", "name": "Babneet Singh"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/fbdaa6b644d9d3610b38b54838b2dea81135d916", "committedDate": "2020-07-30T03:38:44Z", "message": "Update comments and modified ClassDefiner.defineClass as per code-review\n\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fbdaa6b644d9d3610b38b54838b2dea81135d916", "author": {"user": {"login": "babsingh", "name": "Babneet Singh"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/fbdaa6b644d9d3610b38b54838b2dea81135d916", "committedDate": "2020-07-30T03:38:44Z", "message": "Update comments and modified ClassDefiner.defineClass as per code-review\n\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>"}, "afterCommit": {"oid": "ed349867f81fbb55faf5a4b8e8bbf3a46bb68329", "author": {"user": {"login": "babsingh", "name": "Babneet Singh"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/ed349867f81fbb55faf5a4b8e8bbf3a46bb68329", "committedDate": "2020-07-30T03:58:04Z", "message": "Update comments and modify ClassDefiner.defineClass as per code-review\n\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1fb618898a0e48a022f9ab2ad0857ef2b26ab3c", "author": {"user": {"login": "babsingh", "name": "Babneet Singh"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/a1fb618898a0e48a022f9ab2ad0857ef2b26ab3c", "committedDate": "2020-07-30T04:00:23Z", "message": "JEP371 ClassData Support and JEP383 Support (Part 3)\n\nJEP371 ClassData Support:\n\n1. Implement Class.setClassData(...) and Class.getClassData()\n2. Store classData in Access.defineClass(...)\n3. Implement Access.classData(...)\n4. Implement MethodHandleNatives.classData(...)\n5. Implement ClassDefiner.defineClass(initOption, classData)\n6. Implement Lookup.defineHiddenClassWithClassData(...)\n7. Implement MethodHandles.classData(...)\n\nJEP383 Support (Part 3):\n\n1. Implement MethodHandles.permuteArgumentChecks(...)\n2. Implement MethodHandles.collectReturnValue(...)\n3. Implement VarHandle.target()\n4. Implement VarHandle.asDirect()\n5. Implement VarHandle.isDirect()\n6. Implement VarHandle.getMethodHandle(...)\n\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f36909de48dfb0ea9470b1522f6a244b96655b80", "author": {"user": {"login": "babsingh", "name": "Babneet Singh"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/f36909de48dfb0ea9470b1522f6a244b96655b80", "committedDate": "2020-07-30T04:00:23Z", "message": "Set Class.classData before init in ClassLoader_defineClassImpl1\n\nBefore the new JEP371 changes, the classData could be set in\nAccess.defineClass in Java code before the class was initialized.\n\nWith the new JEP371 changes, all code to define and init the class was\nmoved into native code, ClassLoader_defineClassImpl1.\n\nThis requires Class.classData to be initialized within\nClassLoader_defineClassImpl1 before the class is initialized.\n\nClass.setClassData is removed since it is no longer used.\n\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93db73943ebdb2d12bbca9195b30327934732d11", "author": {"user": {"login": "babsingh", "name": "Babneet Singh"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/93db73943ebdb2d12bbca9195b30327934732d11", "committedDate": "2020-07-30T04:00:23Z", "message": "Update comments and modify ClassDefiner.defineClass as per code-review\n\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ed349867f81fbb55faf5a4b8e8bbf3a46bb68329", "author": {"user": {"login": "babsingh", "name": "Babneet Singh"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/ed349867f81fbb55faf5a4b8e8bbf3a46bb68329", "committedDate": "2020-07-30T03:58:04Z", "message": "Update comments and modify ClassDefiner.defineClass as per code-review\n\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>"}, "afterCommit": {"oid": "93db73943ebdb2d12bbca9195b30327934732d11", "author": {"user": {"login": "babsingh", "name": "Babneet Singh"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/93db73943ebdb2d12bbca9195b30327934732d11", "committedDate": "2020-07-30T04:00:23Z", "message": "Update comments and modify ClassDefiner.defineClass as per code-review\n\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyNzQzNTcw", "url": "https://github.com/eclipse-openj9/openj9/pull/10239#pullrequestreview-462743570", "createdAt": "2020-08-06T17:45:46Z", "commit": {"oid": "93db73943ebdb2d12bbca9195b30327934732d11"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 345, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}