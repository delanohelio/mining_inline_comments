{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4MTUyNzM3", "number": 9564, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODoxNzoyMVrOD8mMRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMTo0ODo0OFrOD8qUaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODY2ODg0OnYy", "diffSide": "RIGHT", "path": "runtime/util/fltconv.c", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODoxNzoyMVrOGVotYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMTowNjoyMFrOGVuNug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM0MDI1OQ==", "bodyText": "One declaration at a time, each with an initializer.", "url": "https://github.com/eclipse-openj9/openj9/pull/9564#discussion_r425340259", "createdAt": "2020-05-14T18:17:21Z", "author": {"login": "keithc-ca"}, "path": "runtime/util/fltconv.c", "diffHunk": "@@ -386,8 +387,75 @@ helperCConvertLongToFloat(I_64 src)\n {\n \tjfloat tmpDst;\n \n+/* Every platform but 32-bit Windows can use the cast.\n+ * Using VS2017 15.9 the cast doesn't give the expected result.\n+ */\n+#if !defined(WIN32) || defined(WIN64)\n \ttmpDst = (jfloat)src;\n-\n+#else /* !defined(WIN32) || defined(WIN64) */\n+\t{\n+\t\tint idl1, sign;\n+\t\tU_64 spfInt, overflow;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a65d2d0e577107ea4ec28f256d511cd824ccffd"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQzMDQ1OA==", "bodyText": "Fixed them all and a few other things as well.", "url": "https://github.com/eclipse-openj9/openj9/pull/9564#discussion_r425430458", "createdAt": "2020-05-14T21:06:20Z", "author": {"login": "pshipton"}, "path": "runtime/util/fltconv.c", "diffHunk": "@@ -386,8 +387,75 @@ helperCConvertLongToFloat(I_64 src)\n {\n \tjfloat tmpDst;\n \n+/* Every platform but 32-bit Windows can use the cast.\n+ * Using VS2017 15.9 the cast doesn't give the expected result.\n+ */\n+#if !defined(WIN32) || defined(WIN64)\n \ttmpDst = (jfloat)src;\n-\n+#else /* !defined(WIN32) || defined(WIN64) */\n+\t{\n+\t\tint idl1, sign;\n+\t\tU_64 spfInt, overflow;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM0MDI1OQ=="}, "originalCommit": {"oid": "8a65d2d0e577107ea4ec28f256d511cd824ccffd"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODY5NTg1OnYy", "diffSide": "RIGHT", "path": "runtime/util/fltconv.c", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODoyNToyNVrOGVo-tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMTowNTo1OFrOGVuM7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM0NDY5NA==", "bodyText": "This test must be >= else it yields the wrong answer for u64val = (1 << 32).", "url": "https://github.com/eclipse-openj9/openj9/pull/9564#discussion_r425344694", "createdAt": "2020-05-14T18:25:25Z", "author": {"login": "keithc-ca"}, "path": "runtime/util/fltconv.c", "diffHunk": "@@ -440,4 +508,21 @@ fltconv_indexLeadingOne32(U_32 u32val)\n }\n \n \n+static int \n+fltconv_indexLeadingOne64(U_64 u64val)\n+{\n+\tint leading;\n+\t\n+\tif (0 == u64val) {\n+\t\treturn -1;\n+\t}\n+\n+\tleading = fltconv_indexLeadingOne32((U_32)(u64val >> 32));\n+\tif (leading > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a65d2d0e577107ea4ec28f256d511cd824ccffd"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQzMDI1NA==", "bodyText": "Thanks for catching this one.", "url": "https://github.com/eclipse-openj9/openj9/pull/9564#discussion_r425430254", "createdAt": "2020-05-14T21:05:58Z", "author": {"login": "pshipton"}, "path": "runtime/util/fltconv.c", "diffHunk": "@@ -440,4 +508,21 @@ fltconv_indexLeadingOne32(U_32 u32val)\n }\n \n \n+static int \n+fltconv_indexLeadingOne64(U_64 u64val)\n+{\n+\tint leading;\n+\t\n+\tif (0 == u64val) {\n+\t\treturn -1;\n+\t}\n+\n+\tleading = fltconv_indexLeadingOne32((U_32)(u64val >> 32));\n+\tif (leading > 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM0NDY5NA=="}, "originalCommit": {"oid": "8a65d2d0e577107ea4ec28f256d511cd824ccffd"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODc3Mjc2OnYy", "diffSide": "RIGHT", "path": "runtime/util/fltconv.c", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODo0Nzo1OFrOGVpwuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMTozMDo0NVrOGVu8tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM1NzQ5Ng==", "bodyText": "I suggest (((U_64)1) << 63) is a better way to say 0x8000000000000000 and the first two conditions can be tested in a single operation with <:\n    if ((((U_64)1) << 63) < overflow) {\n        spfInt + = 1;\n    } else if ((((U_64)1) << 63) == overflow) {\n        if (0 != (spfInt & 1)) {\n            spfInt + = 1;\n        }\n    }", "url": "https://github.com/eclipse-openj9/openj9/pull/9564#discussion_r425357496", "createdAt": "2020-05-14T18:47:58Z", "author": {"login": "keithc-ca"}, "path": "runtime/util/fltconv.c", "diffHunk": "@@ -386,8 +387,75 @@ helperCConvertLongToFloat(I_64 src)\n {\n \tjfloat tmpDst;\n \n+/* Every platform but 32-bit Windows can use the cast.\n+ * Using VS2017 15.9 the cast doesn't give the expected result.\n+ */\n+#if !defined(WIN32) || defined(WIN64)\n \ttmpDst = (jfloat)src;\n-\n+#else /* !defined(WIN32) || defined(WIN64) */\n+\t{\n+\t\tint idl1, sign;\n+\t\tU_64 spfInt, overflow;\n+\t\n+\t\tif (0 == src) {\n+\t\t\treturn 0.0f;\n+\t\t}\n+\t\n+\t\tif (src < 0) {\n+\t\t\tspfInt = (U_64)0 - (U_64)src;\n+\t\t\tsign = 1;\n+\t\t} else {\n+\t\t\tspfInt = (U_64)src;\n+\t\t\tsign = 0;\n+\t\t}\n+\t\t\n+\t\t/* Find out where the most significant bit is in the integer value.\n+\t\t * We are only interested in keeping 24 of those bits. \n+\t\t */\n+\t\tidl1 = fltconv_indexLeadingOne64(spfInt);\n+\t\tif (idl1 >= 24) {\n+\t\t\t\n+\t\t\t/* If it's more than 24 bits, we shift right and keep track of\n+\t\t\t * the overflow for some possible rounding. \n+\t\t\t */\n+\t\t\toverflow = spfInt << (64 - (idl1 - 23));\n+\t\t\tspfInt >>= (idl1 - 23);\n+\t\t\tspfInt &= 0x007FFFFF;\n+\t\t\tspfInt |= ((idl1+SPEXPONENT_BIAS) << 23);\n+\t\t\tif (0 != (overflow & 0x8000000000000000)) {\n+\t\t\t\tif (0 != (overflow & 0x7FFFFFFFFFF00000)) {\n+\t\t\t\t\tspfInt++;\n+\t\t\t\t} else {\n+\t\t\t\t\tif (0 != (spfInt & 1)) {\n+\t\t\t\t\t\tspfInt++;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a65d2d0e577107ea4ec28f256d511cd824ccffd"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQyOTc5MQ==", "bodyText": "The suggested code isn't equivalent. I've updated to use the shift but otherwise left is as-is.", "url": "https://github.com/eclipse-openj9/openj9/pull/9564#discussion_r425429791", "createdAt": "2020-05-14T21:05:03Z", "author": {"login": "pshipton"}, "path": "runtime/util/fltconv.c", "diffHunk": "@@ -386,8 +387,75 @@ helperCConvertLongToFloat(I_64 src)\n {\n \tjfloat tmpDst;\n \n+/* Every platform but 32-bit Windows can use the cast.\n+ * Using VS2017 15.9 the cast doesn't give the expected result.\n+ */\n+#if !defined(WIN32) || defined(WIN64)\n \ttmpDst = (jfloat)src;\n-\n+#else /* !defined(WIN32) || defined(WIN64) */\n+\t{\n+\t\tint idl1, sign;\n+\t\tU_64 spfInt, overflow;\n+\t\n+\t\tif (0 == src) {\n+\t\t\treturn 0.0f;\n+\t\t}\n+\t\n+\t\tif (src < 0) {\n+\t\t\tspfInt = (U_64)0 - (U_64)src;\n+\t\t\tsign = 1;\n+\t\t} else {\n+\t\t\tspfInt = (U_64)src;\n+\t\t\tsign = 0;\n+\t\t}\n+\t\t\n+\t\t/* Find out where the most significant bit is in the integer value.\n+\t\t * We are only interested in keeping 24 of those bits. \n+\t\t */\n+\t\tidl1 = fltconv_indexLeadingOne64(spfInt);\n+\t\tif (idl1 >= 24) {\n+\t\t\t\n+\t\t\t/* If it's more than 24 bits, we shift right and keep track of\n+\t\t\t * the overflow for some possible rounding. \n+\t\t\t */\n+\t\t\toverflow = spfInt << (64 - (idl1 - 23));\n+\t\t\tspfInt >>= (idl1 - 23);\n+\t\t\tspfInt &= 0x007FFFFF;\n+\t\t\tspfInt |= ((idl1+SPEXPONENT_BIAS) << 23);\n+\t\t\tif (0 != (overflow & 0x8000000000000000)) {\n+\t\t\t\tif (0 != (overflow & 0x7FFFFFFFFFF00000)) {\n+\t\t\t\t\tspfInt++;\n+\t\t\t\t} else {\n+\t\t\t\t\tif (0 != (spfInt & 1)) {\n+\t\t\t\t\t\tspfInt++;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM1NzQ5Ng=="}, "originalCommit": {"oid": "8a65d2d0e577107ea4ec28f256d511cd824ccffd"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQzNDQ2Nw==", "bodyText": "I believe it is equivalent (considering the range of values that overflow might take).", "url": "https://github.com/eclipse-openj9/openj9/pull/9564#discussion_r425434467", "createdAt": "2020-05-14T21:14:19Z", "author": {"login": "keithc-ca"}, "path": "runtime/util/fltconv.c", "diffHunk": "@@ -386,8 +387,75 @@ helperCConvertLongToFloat(I_64 src)\n {\n \tjfloat tmpDst;\n \n+/* Every platform but 32-bit Windows can use the cast.\n+ * Using VS2017 15.9 the cast doesn't give the expected result.\n+ */\n+#if !defined(WIN32) || defined(WIN64)\n \ttmpDst = (jfloat)src;\n-\n+#else /* !defined(WIN32) || defined(WIN64) */\n+\t{\n+\t\tint idl1, sign;\n+\t\tU_64 spfInt, overflow;\n+\t\n+\t\tif (0 == src) {\n+\t\t\treturn 0.0f;\n+\t\t}\n+\t\n+\t\tif (src < 0) {\n+\t\t\tspfInt = (U_64)0 - (U_64)src;\n+\t\t\tsign = 1;\n+\t\t} else {\n+\t\t\tspfInt = (U_64)src;\n+\t\t\tsign = 0;\n+\t\t}\n+\t\t\n+\t\t/* Find out where the most significant bit is in the integer value.\n+\t\t * We are only interested in keeping 24 of those bits. \n+\t\t */\n+\t\tidl1 = fltconv_indexLeadingOne64(spfInt);\n+\t\tif (idl1 >= 24) {\n+\t\t\t\n+\t\t\t/* If it's more than 24 bits, we shift right and keep track of\n+\t\t\t * the overflow for some possible rounding. \n+\t\t\t */\n+\t\t\toverflow = spfInt << (64 - (idl1 - 23));\n+\t\t\tspfInt >>= (idl1 - 23);\n+\t\t\tspfInt &= 0x007FFFFF;\n+\t\t\tspfInt |= ((idl1+SPEXPONENT_BIAS) << 23);\n+\t\t\tif (0 != (overflow & 0x8000000000000000)) {\n+\t\t\t\tif (0 != (overflow & 0x7FFFFFFFFFF00000)) {\n+\t\t\t\t\tspfInt++;\n+\t\t\t\t} else {\n+\t\t\t\t\tif (0 != (spfInt & 1)) {\n+\t\t\t\t\t\tspfInt++;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM1NzQ5Ng=="}, "originalCommit": {"oid": "8a65d2d0e577107ea4ec28f256d511cd824ccffd"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ0MjQ4Nw==", "bodyText": "ok I see. Updated.", "url": "https://github.com/eclipse-openj9/openj9/pull/9564#discussion_r425442487", "createdAt": "2020-05-14T21:30:45Z", "author": {"login": "pshipton"}, "path": "runtime/util/fltconv.c", "diffHunk": "@@ -386,8 +387,75 @@ helperCConvertLongToFloat(I_64 src)\n {\n \tjfloat tmpDst;\n \n+/* Every platform but 32-bit Windows can use the cast.\n+ * Using VS2017 15.9 the cast doesn't give the expected result.\n+ */\n+#if !defined(WIN32) || defined(WIN64)\n \ttmpDst = (jfloat)src;\n-\n+#else /* !defined(WIN32) || defined(WIN64) */\n+\t{\n+\t\tint idl1, sign;\n+\t\tU_64 spfInt, overflow;\n+\t\n+\t\tif (0 == src) {\n+\t\t\treturn 0.0f;\n+\t\t}\n+\t\n+\t\tif (src < 0) {\n+\t\t\tspfInt = (U_64)0 - (U_64)src;\n+\t\t\tsign = 1;\n+\t\t} else {\n+\t\t\tspfInt = (U_64)src;\n+\t\t\tsign = 0;\n+\t\t}\n+\t\t\n+\t\t/* Find out where the most significant bit is in the integer value.\n+\t\t * We are only interested in keeping 24 of those bits. \n+\t\t */\n+\t\tidl1 = fltconv_indexLeadingOne64(spfInt);\n+\t\tif (idl1 >= 24) {\n+\t\t\t\n+\t\t\t/* If it's more than 24 bits, we shift right and keep track of\n+\t\t\t * the overflow for some possible rounding. \n+\t\t\t */\n+\t\t\toverflow = spfInt << (64 - (idl1 - 23));\n+\t\t\tspfInt >>= (idl1 - 23);\n+\t\t\tspfInt &= 0x007FFFFF;\n+\t\t\tspfInt |= ((idl1+SPEXPONENT_BIAS) << 23);\n+\t\t\tif (0 != (overflow & 0x8000000000000000)) {\n+\t\t\t\tif (0 != (overflow & 0x7FFFFFFFFFF00000)) {\n+\t\t\t\t\tspfInt++;\n+\t\t\t\t} else {\n+\t\t\t\t\tif (0 != (spfInt & 1)) {\n+\t\t\t\t\t\tspfInt++;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM1NzQ5Ng=="}, "originalCommit": {"oid": "8a65d2d0e577107ea4ec28f256d511cd824ccffd"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODkyNzg2OnYy", "diffSide": "RIGHT", "path": "runtime/util/fltconv.c", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxOTozNTozN1rOGVrT9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMTowNjozMVrOGVuOHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM4MjkwMA==", "bodyText": "I'm not sure WIN64 is reliable: this should use defined(J9VM_ENV_DATA64) instead.", "url": "https://github.com/eclipse-openj9/openj9/pull/9564#discussion_r425382900", "createdAt": "2020-05-14T19:35:37Z", "author": {"login": "keithc-ca"}, "path": "runtime/util/fltconv.c", "diffHunk": "@@ -386,8 +387,75 @@ helperCConvertLongToFloat(I_64 src)\n {\n \tjfloat tmpDst;\n \n+/* Every platform but 32-bit Windows can use the cast.\n+ * Using VS2017 15.9 the cast doesn't give the expected result.\n+ */\n+#if !defined(WIN32) || defined(WIN64)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a65d2d0e577107ea4ec28f256d511cd824ccffd"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQzMDU1Nw==", "bodyText": "Updated.", "url": "https://github.com/eclipse-openj9/openj9/pull/9564#discussion_r425430557", "createdAt": "2020-05-14T21:06:31Z", "author": {"login": "pshipton"}, "path": "runtime/util/fltconv.c", "diffHunk": "@@ -386,8 +387,75 @@ helperCConvertLongToFloat(I_64 src)\n {\n \tjfloat tmpDst;\n \n+/* Every platform but 32-bit Windows can use the cast.\n+ * Using VS2017 15.9 the cast doesn't give the expected result.\n+ */\n+#if !defined(WIN32) || defined(WIN64)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM4MjkwMA=="}, "originalCommit": {"oid": "8a65d2d0e577107ea4ec28f256d511cd824ccffd"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0OTIzOTQzOnYy", "diffSide": "RIGHT", "path": "runtime/util/fltconv.c", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMToxMToyMlrOGVuYEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMTozMjo1OVrOGVvA3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQzMzEwNw==", "bodyText": "This is dead code: the function is only called if u64val != 0 (and the code below handles that case anyway).", "url": "https://github.com/eclipse-openj9/openj9/pull/9564#discussion_r425433107", "createdAt": "2020-05-14T21:11:22Z", "author": {"login": "keithc-ca"}, "path": "runtime/util/fltconv.c", "diffHunk": "@@ -440,4 +509,21 @@ fltconv_indexLeadingOne32(U_32 u32val)\n }\n \n \n+static int \n+fltconv_indexLeadingOne64(U_64 u64val)\n+{\n+\tint leading = 0;\n+\t\n+\tif (0 == u64val) {\n+\t\treturn -1;\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c92b5fec6f3cd69ca306e62c72a5673e133223b"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ0MzU0OA==", "bodyText": "Removed.", "url": "https://github.com/eclipse-openj9/openj9/pull/9564#discussion_r425443548", "createdAt": "2020-05-14T21:32:59Z", "author": {"login": "pshipton"}, "path": "runtime/util/fltconv.c", "diffHunk": "@@ -440,4 +509,21 @@ fltconv_indexLeadingOne32(U_32 u32val)\n }\n \n \n+static int \n+fltconv_indexLeadingOne64(U_64 u64val)\n+{\n+\tint leading = 0;\n+\t\n+\tif (0 == u64val) {\n+\t\treturn -1;\n+\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQzMzEwNw=="}, "originalCommit": {"oid": "2c92b5fec6f3cd69ca306e62c72a5673e133223b"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0OTMyNjIyOnYy", "diffSide": "RIGHT", "path": "runtime/util/fltconv.c", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMTo0MTozMVrOGVvPmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMTo0NDowNlrOGVvUCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ0NzMyMw==", "bodyText": "The comment here and on the #endif no longer match the #if.", "url": "https://github.com/eclipse-openj9/openj9/pull/9564#discussion_r425447323", "createdAt": "2020-05-14T21:41:31Z", "author": {"login": "keithc-ca"}, "path": "runtime/util/fltconv.c", "diffHunk": "@@ -386,8 +387,72 @@ helperCConvertLongToFloat(I_64 src)\n {\n \tjfloat tmpDst;\n \n+/* Every platform but 32-bit Windows can use the cast.\n+ * Using VS2017 15.9 the cast doesn't give the expected result.\n+ */\n+#if !defined(WIN32) || defined(J9VM_ENV_DATA64)\n \ttmpDst = (jfloat)src;\n-\n+#else /* !defined(WIN32) || defined(WIN64) */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce7ca27ab3817e82d6d9553dd1b68f622edc5699"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ0ODQ1OA==", "bodyText": "Updated.", "url": "https://github.com/eclipse-openj9/openj9/pull/9564#discussion_r425448458", "createdAt": "2020-05-14T21:44:06Z", "author": {"login": "pshipton"}, "path": "runtime/util/fltconv.c", "diffHunk": "@@ -386,8 +387,72 @@ helperCConvertLongToFloat(I_64 src)\n {\n \tjfloat tmpDst;\n \n+/* Every platform but 32-bit Windows can use the cast.\n+ * Using VS2017 15.9 the cast doesn't give the expected result.\n+ */\n+#if !defined(WIN32) || defined(J9VM_ENV_DATA64)\n \ttmpDst = (jfloat)src;\n-\n+#else /* !defined(WIN32) || defined(WIN64) */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ0NzMyMw=="}, "originalCommit": {"oid": "ce7ca27ab3817e82d6d9553dd1b68f622edc5699"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0OTM0NTA3OnYy", "diffSide": "RIGHT", "path": "runtime/util/fltconv.c", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMTo0ODo0OFrOGVvcHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMjoxNzo0OFrOGVwJoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ1MDUyNg==", "bodyText": "Shouldn't this say 19.16 (I don't know where 15.9 came from)?", "url": "https://github.com/eclipse-openj9/openj9/pull/9564#discussion_r425450526", "createdAt": "2020-05-14T21:48:48Z", "author": {"login": "keithc-ca"}, "path": "runtime/util/fltconv.c", "diffHunk": "@@ -386,8 +387,72 @@ helperCConvertLongToFloat(I_64 src)\n {\n \tjfloat tmpDst;\n \n+/* Every platform but 32-bit Windows can use the cast.\n+ * Using VS2017 15.9 the cast doesn't give the expected result.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5928d9fde9a1c090b24acb3caa88fa7844e4045b"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ1MzI1Ng==", "bodyText": "15.9 is the version of VS2017 we install to get the C compiler 19.16\nhttps://docs.microsoft.com/en-us/visualstudio/releasenotes/vs2017-relnotes", "url": "https://github.com/eclipse-openj9/openj9/pull/9564#discussion_r425453256", "createdAt": "2020-05-14T21:55:14Z", "author": {"login": "pshipton"}, "path": "runtime/util/fltconv.c", "diffHunk": "@@ -386,8 +387,72 @@ helperCConvertLongToFloat(I_64 src)\n {\n \tjfloat tmpDst;\n \n+/* Every platform but 32-bit Windows can use the cast.\n+ * Using VS2017 15.9 the cast doesn't give the expected result.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ1MDUyNg=="}, "originalCommit": {"oid": "5928d9fde9a1c090b24acb3caa88fa7844e4045b"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ2MjE3Nw==", "bodyText": "Ok, got it. Thanks.", "url": "https://github.com/eclipse-openj9/openj9/pull/9564#discussion_r425462177", "createdAt": "2020-05-14T22:17:48Z", "author": {"login": "keithc-ca"}, "path": "runtime/util/fltconv.c", "diffHunk": "@@ -386,8 +387,72 @@ helperCConvertLongToFloat(I_64 src)\n {\n \tjfloat tmpDst;\n \n+/* Every platform but 32-bit Windows can use the cast.\n+ * Using VS2017 15.9 the cast doesn't give the expected result.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ1MDUyNg=="}, "originalCommit": {"oid": "5928d9fde9a1c090b24acb3caa88fa7844e4045b"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 155, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}