{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyMzU5ODU4", "number": 8293, "title": "Add walkReferenceChain JITServer Support", "bodyText": "The purpose of this change is to avoid using object addresses on JITServer. Using object addresses on JITServer creates problems when GC moves the object (thus changing the addresses). Instead, JITServer must use some kind of handle (a GlobalReference or some other GC root) to hold the object so that JITServer always has the valid object addresses when it tries to perform operations on it.\nwalkReferenceChain() is special in that it needs half of its information from JITServer(TR::Node) and half of its information from JITClient(object address). During the walk, we need vmaccess so that GC doesn't move the object of interest. We can only have vmaccess on JITClient, which means we need to do the walk on JITClient.\nThis change makes JITServer generate the offset information JITClient needs for the walk and passes to JITClient in the form of a vector.\nOriginally we have a LocalGCCounter hack where we can detect if the object has been moved to a different location. And when object has been moved, JITClient will abort the compilation. However, this does not work for all gcpolicies and also is not very efficient because JITClient can abort compilations that might not need to be aborted. This change offers a better solution: since the walk is done on JITClient and JITClient has control over vmaccess, object is guaranteed to not be moved during the operation.\nI have also noticed a few misuses of globalreference read and vmaccess and have corrected them. We must have vmaccess before we perform a read.\nIssue: #8109\nSigned-off-by: Harry Yu harryyu1994@gmail.com", "createdAt": "2020-01-13T22:49:58Z", "url": "https://github.com/eclipse-openj9/openj9/pull/8293", "merged": true, "mergeCommit": {"oid": "3ab42002ea87312685ed0c0a18f2c5c056787d28"}, "closed": true, "closedAt": "2020-01-17T15:08:46Z", "author": {"login": "harryyu1994"}, "timelineItems": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb6Ea8NgBqjI5NDUwNTY4MDE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb6_HGvgFqTM0NDE1MTQyMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "044a3fbc7b2b6730fdb2c5c2c0bb925b4d8321d0", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/044a3fbc7b2b6730fdb2c5c2c0bb925b4d8321d0", "committedDate": "2020-01-13T22:40:05Z", "message": "Add walkReferenceChain JITServer Support\n\nThe purpose of this change is to avoid using object addresses on JITServer.\nUsing object addresses on JITServer creates problems when GC changes the object addresses. Instead, JITServer must use some kind of handle (a GlobalReference or some other GC root) to hold the object so that JITServer always has the valid object addresses.\n\nwalkReferenceChain is special in that it needs half of its information from the JITServer(TR::Node) and half of its information from JITClient(object address). During the walk, we need vmaccess so that GC doesn't move the object of interest. We can only have vmaccess on JITClient, which means we need to do walkReferenceChain on JITClient.\n\nThis change makes JITServer to generate the offsets information JITClient needed for the walk and passes to JITClient in the form of a vector.\n\nIssue: #8109\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}, "afterCommit": {"oid": "06558bb4bd60127940518d6248df0b0b73c6b263", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/06558bb4bd60127940518d6248df0b0b73c6b263", "committedDate": "2020-01-13T22:51:22Z", "message": "Add walkReferenceChain JITServer Support\n\nThe purpose of this change is to avoid using object addresses on JITServer.\nUsing object addresses on JITServer creates problems when GC changes the object addresses. Instead, JITServer must use some kind of handle (a GlobalReference or some other GC root) to hold the object so that JITServer always has the valid object addresses.\n\nwalkReferenceChain is special in that it needs half of its information from the JITServer(TR::Node) and half of its information from JITClient(object address). During the walk, we need vmaccess so that GC doesn't move the object of interest. We can only have vmaccess on JITClient, which means we need to do walkReferenceChain on JITClient.\n\nThis change makes JITServer to generate the offsets information JITClient needed for the walk and passes to JITClient in the form of a vector.\n\nIssue: #8109\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "06558bb4bd60127940518d6248df0b0b73c6b263", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/06558bb4bd60127940518d6248df0b0b73c6b263", "committedDate": "2020-01-13T22:51:22Z", "message": "Add walkReferenceChain JITServer Support\n\nThe purpose of this change is to avoid using object addresses on JITServer.\nUsing object addresses on JITServer creates problems when GC changes the object addresses. Instead, JITServer must use some kind of handle (a GlobalReference or some other GC root) to hold the object so that JITServer always has the valid object addresses.\n\nwalkReferenceChain is special in that it needs half of its information from the JITServer(TR::Node) and half of its information from JITClient(object address). During the walk, we need vmaccess so that GC doesn't move the object of interest. We can only have vmaccess on JITClient, which means we need to do walkReferenceChain on JITClient.\n\nThis change makes JITServer to generate the offsets information JITClient needed for the walk and passes to JITClient in the form of a vector.\n\nIssue: #8109\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}, "afterCommit": {"oid": "bd794e1eb31f064a60f156db8e308495605c6522", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/bd794e1eb31f064a60f156db8e308495605c6522", "committedDate": "2020-01-13T22:56:04Z", "message": "Add walkReferenceChain JITServer Support\n\nThe purpose of this change is to avoid using object addresses on JITServer.\nUsing object addresses on JITServer creates problems when GC changes the object addresses. Instead, JITServer must use some kind of handle (a GlobalReference or some other GC root) to hold the object so that JITServer always has the valid object addresses.\n\nwalkReferenceChain is special in that it needs half of its information from the JITServer(TR::Node) and half of its information from JITClient(object address). During the walk, we need vmaccess so that GC doesn't move the object of interest. We can only have vmaccess on JITClient, which means we need to do walkReferenceChain on JITClient.\n\nThis change makes JITServer to generate the offsets information JITClient needed for the walk and passes to JITClient in the form of a vector.\n\nIssue: #8109\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bd794e1eb31f064a60f156db8e308495605c6522", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/bd794e1eb31f064a60f156db8e308495605c6522", "committedDate": "2020-01-13T22:56:04Z", "message": "Add walkReferenceChain JITServer Support\n\nThe purpose of this change is to avoid using object addresses on JITServer.\nUsing object addresses on JITServer creates problems when GC changes the object addresses. Instead, JITServer must use some kind of handle (a GlobalReference or some other GC root) to hold the object so that JITServer always has the valid object addresses.\n\nwalkReferenceChain is special in that it needs half of its information from the JITServer(TR::Node) and half of its information from JITClient(object address). During the walk, we need vmaccess so that GC doesn't move the object of interest. We can only have vmaccess on JITClient, which means we need to do walkReferenceChain on JITClient.\n\nThis change makes JITServer to generate the offsets information JITClient needed for the walk and passes to JITClient in the form of a vector.\n\nIssue: #8109\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}, "afterCommit": {"oid": "b7f3a4c12c683df37270bbafc4fb3adb6a95231e", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/b7f3a4c12c683df37270bbafc4fb3adb6a95231e", "committedDate": "2020-01-13T23:02:24Z", "message": "Add walkReferenceChain JITServer Support\n\nThe purpose of this change is to avoid using object addresses on JITServer.\nUsing object addresses on JITServer creates problems when GC changes the object addresses. Instead, JITServer must use some kind of handle (a GlobalReference or some other GC root) to hold the object so that JITServer always has the valid object addresses.\n\nwalkReferenceChain is special in that it needs half of its information from the JITServer(TR::Node) and half of its information from JITClient(object address). During the walk, we need vmaccess so that GC doesn't move the object of interest. We can only have vmaccess on JITClient, which means we need to do walkReferenceChain on JITClient.\n\nThis change makes JITServer to generate the offsets information JITClient needed for the walk and passes to JITClient in the form of a vector.\n\nIssue: #8109\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b7f3a4c12c683df37270bbafc4fb3adb6a95231e", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/b7f3a4c12c683df37270bbafc4fb3adb6a95231e", "committedDate": "2020-01-13T23:02:24Z", "message": "Add walkReferenceChain JITServer Support\n\nThe purpose of this change is to avoid using object addresses on JITServer.\nUsing object addresses on JITServer creates problems when GC changes the object addresses. Instead, JITServer must use some kind of handle (a GlobalReference or some other GC root) to hold the object so that JITServer always has the valid object addresses.\n\nwalkReferenceChain is special in that it needs half of its information from the JITServer(TR::Node) and half of its information from JITClient(object address). During the walk, we need vmaccess so that GC doesn't move the object of interest. We can only have vmaccess on JITClient, which means we need to do walkReferenceChain on JITClient.\n\nThis change makes JITServer to generate the offsets information JITClient needed for the walk and passes to JITClient in the form of a vector.\n\nIssue: #8109\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}, "afterCommit": {"oid": "125fefcd709f8c11e1bf2b02a2dded3685bc15e9", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/125fefcd709f8c11e1bf2b02a2dded3685bc15e9", "committedDate": "2020-01-13T23:07:57Z", "message": "Add walkReferenceChain JITServer Support\n\nThe purpose of this change is to avoid using object addresses on JITServer.\nUsing object addresses on JITServer creates problems when GC changes the object addresses. Instead, JITServer must use some kind of handle (a GlobalReference or some other GC root) to hold the object so that JITServer always has the valid object addresses.\n\nwalkReferenceChain is special in that it needs half of its information from the JITServer(TR::Node) and half of its information from JITClient(object address). During the walk, we need vmaccess so that GC doesn't move the object of interest. We can only have vmaccess on JITClient, which means we need to do walkReferenceChain on JITClient.\n\nThis change makes JITServer to generate the offsets information JITClient needed for the walk and passes to JITClient in the form of a vector.\n\nIssue: #8109\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "125fefcd709f8c11e1bf2b02a2dded3685bc15e9", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/125fefcd709f8c11e1bf2b02a2dded3685bc15e9", "committedDate": "2020-01-13T23:07:57Z", "message": "Add walkReferenceChain JITServer Support\n\nThe purpose of this change is to avoid using object addresses on JITServer.\nUsing object addresses on JITServer creates problems when GC changes the object addresses. Instead, JITServer must use some kind of handle (a GlobalReference or some other GC root) to hold the object so that JITServer always has the valid object addresses.\n\nwalkReferenceChain is special in that it needs half of its information from the JITServer(TR::Node) and half of its information from JITClient(object address). During the walk, we need vmaccess so that GC doesn't move the object of interest. We can only have vmaccess on JITClient, which means we need to do walkReferenceChain on JITClient.\n\nThis change makes JITServer to generate the offsets information JITClient needed for the walk and passes to JITClient in the form of a vector.\n\nIssue: #8109\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}, "afterCommit": {"oid": "287c142662bfec313c34dd6bb17480d1112ccbdc", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/287c142662bfec313c34dd6bb17480d1112ccbdc", "committedDate": "2020-01-13T23:26:44Z", "message": "Add walkReferenceChain JITServer Support\n\nThe purpose of this change is to avoid using object addresses on JITServer.\nUsing object addresses on JITServer creates problems when GC changes the object addresses. Instead, JITServer must use some kind of handle (a GlobalReference or some other GC root) to hold the object so that JITServer always has the valid object addresses.\n\nwalkReferenceChain is special in that it needs half of its information from the JITServer(TR::Node) and half of its information from JITClient(object address). During the walk, we need vmaccess so that GC doesn't move the object of interest. We can only have vmaccess on JITClient, which means we need to do walkReferenceChain on JITClient.\n\nThis change makes JITServer to generate the offsets information JITClient needed for the walk and passes to JITClient in the form of a vector.\n\nIssue: #8109\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "287c142662bfec313c34dd6bb17480d1112ccbdc", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/287c142662bfec313c34dd6bb17480d1112ccbdc", "committedDate": "2020-01-13T23:26:44Z", "message": "Add walkReferenceChain JITServer Support\n\nThe purpose of this change is to avoid using object addresses on JITServer.\nUsing object addresses on JITServer creates problems when GC changes the object addresses. Instead, JITServer must use some kind of handle (a GlobalReference or some other GC root) to hold the object so that JITServer always has the valid object addresses.\n\nwalkReferenceChain is special in that it needs half of its information from the JITServer(TR::Node) and half of its information from JITClient(object address). During the walk, we need vmaccess so that GC doesn't move the object of interest. We can only have vmaccess on JITClient, which means we need to do walkReferenceChain on JITClient.\n\nThis change makes JITServer to generate the offsets information JITClient needed for the walk and passes to JITClient in the form of a vector.\n\nIssue: #8109\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}, "afterCommit": {"oid": "e837b41866bef19bc8685ee2e6946de25e171c56", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/e837b41866bef19bc8685ee2e6946de25e171c56", "committedDate": "2020-01-13T23:34:34Z", "message": "Add walkReferenceChain JITServer Support\n\nThe purpose of this change is to avoid using object addresses on JITServer.\nUsing object addresses on JITServer creates problems when GC changes the object addresses. Instead, JITServer must use some kind of handle (a GlobalReference or some other GC root) to hold the object so that JITServer always has the valid object addresses.\n\nwalkReferenceChain is special in that it needs half of its information from the JITServer(TR::Node) and half of its information from JITClient(object address). During the walk, we need vmaccess so that GC doesn't move the object of interest. We can only have vmaccess on JITClient, which means we need to do walkReferenceChain on JITClient.\n\nThis change makes JITServer to generate the offsets information JITClient needed for the walk and passes to JITClient in the form of a vector.\n\nIssue: #8109\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e837b41866bef19bc8685ee2e6946de25e171c56", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/e837b41866bef19bc8685ee2e6946de25e171c56", "committedDate": "2020-01-13T23:34:34Z", "message": "Add walkReferenceChain JITServer Support\n\nThe purpose of this change is to avoid using object addresses on JITServer.\nUsing object addresses on JITServer creates problems when GC changes the object addresses. Instead, JITServer must use some kind of handle (a GlobalReference or some other GC root) to hold the object so that JITServer always has the valid object addresses.\n\nwalkReferenceChain is special in that it needs half of its information from the JITServer(TR::Node) and half of its information from JITClient(object address). During the walk, we need vmaccess so that GC doesn't move the object of interest. We can only have vmaccess on JITClient, which means we need to do walkReferenceChain on JITClient.\n\nThis change makes JITServer to generate the offsets information JITClient needed for the walk and passes to JITClient in the form of a vector.\n\nIssue: #8109\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}, "afterCommit": {"oid": "38f42aed4df96118c3ef84e97eb7016eadefd84d", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/38f42aed4df96118c3ef84e97eb7016eadefd84d", "committedDate": "2020-01-13T23:39:53Z", "message": "Add walkReferenceChain JITServer Support\n\nThe purpose of this change is to avoid using object addresses on JITServer.\nUsing object addresses on JITServer creates problems when GC changes the object addresses. Instead, JITServer must use some kind of handle (a GlobalReference or some other GC root) to hold the object so that JITServer always has the valid object addresses.\n\nwalkReferenceChain is special in that it needs half of its information from the JITServer(TR::Node) and half of its information from JITClient(object address). During the walk, we need vmaccess so that GC doesn't move the object of interest. We can only have vmaccess on JITClient, which means we need to do walkReferenceChain on JITClient.\n\nThis change makes JITServer to generate the offsets information JITClient needed for the walk and passes to JITClient in the form of a vector.\n\nIssue: #8109\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "38f42aed4df96118c3ef84e97eb7016eadefd84d", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/38f42aed4df96118c3ef84e97eb7016eadefd84d", "committedDate": "2020-01-13T23:39:53Z", "message": "Add walkReferenceChain JITServer Support\n\nThe purpose of this change is to avoid using object addresses on JITServer.\nUsing object addresses on JITServer creates problems when GC changes the object addresses. Instead, JITServer must use some kind of handle (a GlobalReference or some other GC root) to hold the object so that JITServer always has the valid object addresses.\n\nwalkReferenceChain is special in that it needs half of its information from the JITServer(TR::Node) and half of its information from JITClient(object address). During the walk, we need vmaccess so that GC doesn't move the object of interest. We can only have vmaccess on JITClient, which means we need to do walkReferenceChain on JITClient.\n\nThis change makes JITServer to generate the offsets information JITClient needed for the walk and passes to JITClient in the form of a vector.\n\nIssue: #8109\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}, "afterCommit": {"oid": "6f373ca457c05e815f641a04207aacc8328f290f", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/6f373ca457c05e815f641a04207aacc8328f290f", "committedDate": "2020-01-13T23:58:40Z", "message": "Add walkReferenceChain JITServer Support\n\nThe purpose of this change is to avoid using object addresses on JITServer.\nUsing object addresses on JITServer creates problems when GC changes the object addresses. Instead, JITServer must use some kind of handle (a GlobalReference or some other GC root) to hold the object so that JITServer always has the valid object addresses.\n\nwalkReferenceChain is special in that it needs half of its information from the JITServer(TR::Node) and half of its information from JITClient(object address). During the walk, we need vmaccess so that GC doesn't move the object of interest. We can only have vmaccess on JITClient, which means we need to do walkReferenceChain on JITClient.\n\nThis change makes JITServer to generate the offsets information JITClient needed for the walk and passes to JITClient in the form of a vector.\n\nIssue: #8109\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b3eb10f29428ae7e91cbfba4100199c10084ef69", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/b3eb10f29428ae7e91cbfba4100199c10084ef69", "committedDate": "2020-01-14T16:13:32Z", "message": "Add walkReferenceChain JITServer Support\n\nThe purpose of this change is to avoid using object addresses on JITServer.\nUsing object addresses on JITServer creates problems when GC changes the object addresses. Instead, JITServer must use some kind of handle (a GlobalReference or some other GC root) to hold the object so that JITServer always has the valid object addresses.\n\nwalkReferenceChain is special in that it needs half of its information from the JITServer(TR::Node) and half of its information from JITClient(object address). During the walk, we need vmaccess so that GC doesn't move the object of interest. We can only have vmaccess on JITClient, which means we need to do walkReferenceChain on JITClient.\n\nThis change makes JITServer to generate the offsets information JITClient needed for the walk and passes to JITClient in the form of a vector.\n\nIssue: #8109\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6f373ca457c05e815f641a04207aacc8328f290f", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/6f373ca457c05e815f641a04207aacc8328f290f", "committedDate": "2020-01-13T23:58:40Z", "message": "Add walkReferenceChain JITServer Support\n\nThe purpose of this change is to avoid using object addresses on JITServer.\nUsing object addresses on JITServer creates problems when GC changes the object addresses. Instead, JITServer must use some kind of handle (a GlobalReference or some other GC root) to hold the object so that JITServer always has the valid object addresses.\n\nwalkReferenceChain is special in that it needs half of its information from the JITServer(TR::Node) and half of its information from JITClient(object address). During the walk, we need vmaccess so that GC doesn't move the object of interest. We can only have vmaccess on JITClient, which means we need to do walkReferenceChain on JITClient.\n\nThis change makes JITServer to generate the offsets information JITClient needed for the walk and passes to JITClient in the form of a vector.\n\nIssue: #8109\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}, "afterCommit": {"oid": "b3eb10f29428ae7e91cbfba4100199c10084ef69", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/b3eb10f29428ae7e91cbfba4100199c10084ef69", "committedDate": "2020-01-14T16:13:32Z", "message": "Add walkReferenceChain JITServer Support\n\nThe purpose of this change is to avoid using object addresses on JITServer.\nUsing object addresses on JITServer creates problems when GC changes the object addresses. Instead, JITServer must use some kind of handle (a GlobalReference or some other GC root) to hold the object so that JITServer always has the valid object addresses.\n\nwalkReferenceChain is special in that it needs half of its information from the JITServer(TR::Node) and half of its information from JITClient(object address). During the walk, we need vmaccess so that GC doesn't move the object of interest. We can only have vmaccess on JITClient, which means we need to do walkReferenceChain on JITClient.\n\nThis change makes JITServer to generate the offsets information JITClient needed for the walk and passes to JITClient in the form of a vector.\n\nIssue: #8109\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1988428a74712cb18e3502185d0aafcac5537a5a", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/1988428a74712cb18e3502185d0aafcac5537a5a", "committedDate": "2020-01-14T16:31:20Z", "message": "Read globalreference after acquire vmaccess\n\nAfter JITClient receives the globalreference from JITServer, we need to obtain vmaccess before we dereference it.\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4756331210ee9f4a807ee9323ab4b31847ac564", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/d4756331210ee9f4a807ee9323ab4b31847ac564", "committedDate": "2020-01-14T16:56:30Z", "message": "Update all JITServer walkReferenceChain\n\nThere are 4 instances where JITServer incorrectly uses the walkReferenceChain routine. Update them to the new implementation.\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "50040fb36368034166605c07f80a7ecf293162f3", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/50040fb36368034166605c07f80a7ecf293162f3", "committedDate": "2020-01-14T17:03:51Z", "message": "Remove JITServer runFEMacro_derefUintptrjPtr API\n\nThis messageType has been eliminated by the JITServer walkReferenceChain routine.\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}, "afterCommit": {"oid": "ff14e563e3121313b83b17285d35983dc6da9f60", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/ff14e563e3121313b83b17285d35983dc6da9f60", "committedDate": "2020-01-14T18:42:05Z", "message": "Remove JITServer runFEMacro_derefUintptrjPtr API\n\nThis messageType has been eliminated by the JITServer walkReferenceChain routine.\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42f4a748a46397408589bc97b375c2ca7f0203e3", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/42f4a748a46397408589bc97b375c2ca7f0203e3", "committedDate": "2020-01-14T18:53:41Z", "message": "Remove JITServer runFEMacro_derefUintptrjPtr API\n\nThis messageType has been eliminated by the JITServer walkReferenceChain routine.\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ff14e563e3121313b83b17285d35983dc6da9f60", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/ff14e563e3121313b83b17285d35983dc6da9f60", "committedDate": "2020-01-14T18:42:05Z", "message": "Remove JITServer runFEMacro_derefUintptrjPtr API\n\nThis messageType has been eliminated by the JITServer walkReferenceChain routine.\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}, "afterCommit": {"oid": "42f4a748a46397408589bc97b375c2ca7f0203e3", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/42f4a748a46397408589bc97b375c2ca7f0203e3", "committedDate": "2020-01-14T18:53:41Z", "message": "Remove JITServer runFEMacro_derefUintptrjPtr API\n\nThis messageType has been eliminated by the JITServer walkReferenceChain routine.\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43692796317cded59420aec08263ded1034f8eaa", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/43692796317cded59420aec08263ded1034f8eaa", "committedDate": "2020-01-14T19:02:55Z", "message": "Remove the JITServer LocalGCCounter hack\n\nNow that walkReferenceChain is handled properly on JITServer and JITClient, the LocalGCCOunter hack, which does not cover all cases and not an efficient workaround, should be removed.\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c6ddf7d6153bced67e980a82a42c575c695082c", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/4c6ddf7d6153bced67e980a82a42c575c695082c", "committedDate": "2020-01-14T19:03:10Z", "message": "Fix copyright issues\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "305c98117b41f73544ca29376cf9b0ea05526fa0", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/305c98117b41f73544ca29376cf9b0ea05526fa0", "committedDate": "2020-01-14T18:57:49Z", "message": "Remove the JITServer LocalGCCounter hack\n\nNow that walkReferenceChain is handled properly on JITServer and JITClient, the LocalGCCOunter hack, which does not cover all cases and not an efficient workaround, should be removed.\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}, "afterCommit": {"oid": "4c6ddf7d6153bced67e980a82a42c575c695082c", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/4c6ddf7d6153bced67e980a82a42c575c695082c", "committedDate": "2020-01-14T19:03:10Z", "message": "Fix copyright issues\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73d4106211bcd3f38c97678e8c59e21f3fdc13c9", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/73d4106211bcd3f38c97678e8c59e21f3fdc13c9", "committedDate": "2020-01-14T19:19:25Z", "message": "Incrementing version number\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "87b227f87f131e31ec4567238176732d8351f3ae", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/87b227f87f131e31ec4567238176732d8351f3ae", "committedDate": "2020-01-14T20:40:40Z", "message": "Add runFEMacro JITServer Support\n\nThis change handles the following 3 methods for JITServer:\n1. java_lang_invoke_FilterArgumentsWithCombinerHandle_numSuffixArgs\n2. java_lang_invoke_FilterArgumentsWithCombinerHandle_filterPosition\n3. java_lang_invoke_FilterArgumentsWithCombinerHandle_argumentIndices\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}, "afterCommit": {"oid": "fed1f064f2cd1063e69cf98bbb96f140776324c1", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/fed1f064f2cd1063e69cf98bbb96f140776324c1", "committedDate": "2020-01-14T20:57:12Z", "message": "Add runFEMacro JITServer Support\n\nThis change handles the following 3 methods for JITServer:\n1. java_lang_invoke_FilterArgumentsWithCombinerHandle_numSuffixArgs\n2. java_lang_invoke_FilterArgumentsWithCombinerHandle_filterPosition\n3. java_lang_invoke_FilterArgumentsWithCombinerHandle_argumentIndices\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fed1f064f2cd1063e69cf98bbb96f140776324c1", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/fed1f064f2cd1063e69cf98bbb96f140776324c1", "committedDate": "2020-01-14T20:57:12Z", "message": "Add runFEMacro JITServer Support\n\nThis change handles the following 3 methods for JITServer:\n1. java_lang_invoke_FilterArgumentsWithCombinerHandle_numSuffixArgs\n2. java_lang_invoke_FilterArgumentsWithCombinerHandle_filterPosition\n3. java_lang_invoke_FilterArgumentsWithCombinerHandle_argumentIndices\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}, "afterCommit": {"oid": "b20baef75c226f4862ba3418aa5d5d74483c9cb6", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/b20baef75c226f4862ba3418aa5d5d74483c9cb6", "committedDate": "2020-01-14T21:01:31Z", "message": "Add runFEMacro JITServer Support\n\nThis change handles the following 3 methods for JITServer:\n1. java_lang_invoke_FilterArgumentsWithCombinerHandle_numSuffixArgs\n2. java_lang_invoke_FilterArgumentsWithCombinerHandle_filterPosition\n3. java_lang_invoke_FilterArgumentsWithCombinerHandle_argumentIndices\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2bac4a756d16934bb44f0bb64d46953d98daeeca", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/2bac4a756d16934bb44f0bb64d46953d98daeeca", "committedDate": "2020-01-14T21:09:09Z", "message": "Add runFEMacro JITServer Support\n\nThis change handles the following 3 methods for JITServer:\n1. java_lang_invoke_FilterArgumentsWithCombinerHandle_numSuffixArgs\n2. java_lang_invoke_FilterArgumentsWithCombinerHandle_filterPosition\n3. java_lang_invoke_FilterArgumentsWithCombinerHandle_argumentIndices\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b20baef75c226f4862ba3418aa5d5d74483c9cb6", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/b20baef75c226f4862ba3418aa5d5d74483c9cb6", "committedDate": "2020-01-14T21:01:31Z", "message": "Add runFEMacro JITServer Support\n\nThis change handles the following 3 methods for JITServer:\n1. java_lang_invoke_FilterArgumentsWithCombinerHandle_numSuffixArgs\n2. java_lang_invoke_FilterArgumentsWithCombinerHandle_filterPosition\n3. java_lang_invoke_FilterArgumentsWithCombinerHandle_argumentIndices\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}, "afterCommit": {"oid": "2bac4a756d16934bb44f0bb64d46953d98daeeca", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/2bac4a756d16934bb44f0bb64d46953d98daeeca", "committedDate": "2020-01-14T21:09:09Z", "message": "Add runFEMacro JITServer Support\n\nThis change handles the following 3 methods for JITServer:\n1. java_lang_invoke_FilterArgumentsWithCombinerHandle_numSuffixArgs\n2. java_lang_invoke_FilterArgumentsWithCombinerHandle_filterPosition\n3. java_lang_invoke_FilterArgumentsWithCombinerHandle_argumentIndices\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyODE0Mjcw", "url": "https://github.com/eclipse-openj9/openj9/pull/8293#pullrequestreview-342814270", "createdAt": "2020-01-14T20:22:22Z", "commit": {"oid": "73d4106211bcd3f38c97678e8c59e21f3fdc13c9"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMDoyMjoyMlrOFdkq6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNTowNDo0MFrOFeOEdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU1MzgzMg==", "bodyText": "Maybe use a const reference here  (const std::vector<uintptrj_t> &listOfOffsets)", "url": "https://github.com/eclipse-openj9/openj9/pull/8293#discussion_r366553832", "createdAt": "2020-01-14T20:22:22Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/control/JITClientCompilationThread.cpp", "diffHunk": "@@ -2063,26 +2049,13 @@ handleServerMessage(JITServer::ClientStream *client, TR_J9VM *fe, JITServer::Mes\n          client->write(response, ptr);\n          }\n          break;\n-      case MessageType::runFEMacro_derefUintptrjPtr:\n-         {\n-         TR::VMAccessCriticalSection deref(fe);\n-         compInfoPT->updateLastLocalGCCounter();\n-         client->write(response, *std::get<0>(client->getRecvData<uintptrj_t*>()));\n-         }\n-         break;\n       case MessageType::runFEMacro_invokeILGenMacrosInvokeExactAndFixup:\n          {\n-         auto recv = client->getRecvData<uintptrj_t>();\n+         auto recv = client->getRecvData<uintptrj_t*, std::vector<uintptrj_t> >();\n          TR::VMAccessCriticalSection invokeILGenMacrosInvokeExactAndFixup(fe);\n-\n-         if (compInfoPT->getLastLocalGCCounter() != compInfoPT->getCompilationInfo()->getLocalGCCounter())\n-            {\n-            // GC happened, fail compilation\n-            auto comp = compInfoPT->getCompilation();\n-            comp->failCompilation<TR::CompilationInterrupted>(\"Compilation interrupted due to GC\");\n-            }\n-\n-         uintptrj_t methodHandle = std::get<0>(recv);\n+         uintptrj_t receiverHandle = *std::get<0>(recv);\n+         std::vector<uintptrj_t> listOfOffsets = std::get<1>(recv);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73d4106211bcd3f38c97678e8c59e21f3fdc13c9"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU2MTg2NQ==", "bodyText": "I would delete blah", "url": "https://github.com/eclipse-openj9/openj9/pull/8293#discussion_r366561865", "createdAt": "2020-01-14T20:41:46Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/env/j9method.cpp", "diffHunk": "@@ -9200,3 +9201,45 @@ TR_J9ByteCodeIlGenerator::walkReferenceChain(TR::Node *node, uintptrj_t receiver\n \n    return result;\n    }\n+\n+\n+#if defined(JITSERVER_SUPPORT)\n+void\n+TR_J9ByteCodeIlGenerator::packReferenceChainOffsets(TR::Node *node, std::vector<uintptrj_t>& listOfOffsets)\n+   {\n+   if (node->getOpCode().isLoadDirect() && node->getType() == TR::Address)\n+      {\n+      TR_ASSERT(node->getSymbolReference()->getCPIndex() == 0, \"walkReferenceChain expecting aload of 'this'; found aload of %s\", comp()->getDebug()->getName(node->getSymbolReference()));\n+      return;\n+      }\n+   else if (node->getOpCode().isLoadIndirect() && node->getType() == TR::Address)\n+      {\n+      TR::SymbolReference *symRef = node->getSymbolReference();\n+      if (symRef->isUnresolved())\n+         {\n+         if (comp()->getOption(TR_TraceILGen))\n+            traceMsg(comp(), \"  walkReferenceChain hit unresolved symref %s; aborting\\n\", symRef->getName(comp()->getDebug()));\n+         comp()->failCompilation<TR::ILGenFailure>(\"Symbol reference is unresolved\");\n+         }\n+      TR::Symbol *sym = symRef->getSymbol();\n+      TR_ASSERT(sym->isShadow() && symRef->getCPIndex() > 0, \"walkReferenceChain expecting field load; found load of %s\", comp()->getDebug()->getName(symRef));\n+      uintptrj_t fieldOffset = symRef->getOffset() - TR::Compiler->om.objectHeaderSizeInBytes(); // blah", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73d4106211bcd3f38c97678e8c59e21f3fdc13c9"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA5NTY4MQ==", "bodyText": "listOfOffsets should be be const because it is only read", "url": "https://github.com/eclipse-openj9/openj9/pull/8293#discussion_r367095681", "createdAt": "2020-01-15T20:40:03Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/control/JITServerHelpers.cpp", "diffHunk": "@@ -549,3 +550,16 @@ JITServerHelpers::isAddressInROMClass(const void *address, const J9ROMClass *rom\n    {\n    return ((address >= romClass) && (address < (((uint8_t*) romClass) + romClass->romSize)));\n    }\n+\n+\n+uintptrj_t\n+JITServerHelpers::walkReferenceChainWithOffsets(TR_J9VM * fe, std::vector<uintptrj_t>& listOfOffsets, uintptrj_t receiver)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bac4a756d16934bb44f0bb64d46953d98daeeca"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIwNjI2Nw==", "bodyText": "listOfOffsets could be marked const", "url": "https://github.com/eclipse-openj9/openj9/pull/8293#discussion_r367206267", "createdAt": "2020-01-16T02:40:33Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/control/JITServerHelpers.cpp", "diffHunk": "@@ -549,3 +550,16 @@ JITServerHelpers::isAddressInROMClass(const void *address, const J9ROMClass *rom\n    {\n    return ((address >= romClass) && (address < (((uint8_t*) romClass) + romClass->romSize)));\n    }\n+\n+\n+uintptrj_t\n+JITServerHelpers::walkReferenceChainWithOffsets(TR_J9VM * fe, std::vector<uintptrj_t>& listOfOffsets, uintptrj_t receiver)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73d4106211bcd3f38c97678e8c59e21f3fdc13c9"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIxMTUxNw==", "bodyText": "Maybe use a const reference for the string extracted from the message", "url": "https://github.com/eclipse-openj9/openj9/pull/8293#discussion_r367211517", "createdAt": "2020-01-16T03:07:19Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/env/j9method.cpp", "diffHunk": "@@ -7789,11 +7790,13 @@ TR_J9ByteCodeIlGenerator::runFEMacro(TR::SymbolReference *symRef)\n #if defined(JITSERVER_SUPPORT)\n          if (comp()->isOutOfProcessCompilation())\n             {\n+            std::vector<uintptrj_t> listOfOffsets;\n+            if (!returnFromArchetype)\n+               {\n+               packReferenceChainOffsets(methodHandleExpression, listOfOffsets);\n+               }\n             auto stream = TR::CompilationInfo::getStream();\n-            stream->write(JITServer::MessageType::runFEMacro_derefUintptrjPtr, thunkDetails->getHandleRef());\n-            receiverHandle = std::get<0>(stream->read<uintptrj_t>());\n-            methodHandle = returnFromArchetype ? receiverHandle : walkReferenceChain(methodHandleExpression, receiverHandle);\n-            stream->write(JITServer::MessageType::runFEMacro_invokeILGenMacrosInvokeExactAndFixup, methodHandle);\n+            stream->write(JITServer::MessageType::runFEMacro_invokeILGenMacrosInvokeExactAndFixup, thunkDetails->getHandleRef(), listOfOffsets);\n             auto recv = stream->read<std::string>();\n             std::string methodDescriptorString = std::get<0>(recv);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bac4a756d16934bb44f0bb64d46953d98daeeca"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIzMTk4Nw==", "bodyText": "Again, let's use a const reference here", "url": "https://github.com/eclipse-openj9/openj9/pull/8293#discussion_r367231987", "createdAt": "2020-01-16T05:03:55Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/control/JITClientCompilationThread.cpp", "diffHunk": "@@ -2373,17 +2389,13 @@ handleServerMessage(JITServer::ClientStream *client, TR_J9VM *fe, JITServer::Mes\n          client->write(response, permuteLength, argIndices);\n          }\n          break;\n-      case MessageType::runFEMacro_invokeILGenMacros:\n+      case MessageType::runFEMacro_invokeILGenMacrosParameterCount:\n          {\n-         if (compInfoPT->getLastLocalGCCounter() != compInfoPT->getCompilationInfo()->getLocalGCCounter())\n-            {\n-            // GC happened, fail compilation\n-            auto comp = compInfoPT->getCompilation();\n-            comp->failCompilation<TR::CompilationInterrupted>(\"Compilation interrupted due to GC\");\n-            }\n-\n-         uintptrj_t methodHandle = std::get<0>(client->getRecvData<uintptrj_t>());\n-         TR::VMAccessCriticalSection invokeILGenMacros(fe);\n+         auto recv = client->getRecvData<uintptrj_t*, std::vector<uintptrj_t> >();\n+         TR::VMAccessCriticalSection invokeILGenMacrosParameterCount(fe);\n+         uintptrj_t receiverHandle = *std::get<0>(recv);\n+         std::vector<uintptrj_t> listOfOffsets = std::get<1>(recv);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bac4a756d16934bb44f0bb64d46953d98daeeca"}, "originalPosition": 259}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIzMjA4NQ==", "bodyText": "Again, let's use a const reference here", "url": "https://github.com/eclipse-openj9/openj9/pull/8293#discussion_r367232085", "createdAt": "2020-01-16T05:04:30Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/control/JITClientCompilationThread.cpp", "diffHunk": "@@ -2392,7 +2404,29 @@ handleServerMessage(JITServer::ClientStream *client, TR_J9VM *fe, JITServer::Mes\n          client->write(response, parameterCount);\n          }\n          break;\n-\n+      case MessageType::runFEMacro_invokeILGenMacrosArrayLength:\n+         {\n+         auto recv = client->getRecvData<uintptrj_t*, std::vector<uintptrj_t> >();\n+         TR::VMAccessCriticalSection invokeILGenMacrosArrayLength(fe);\n+         uintptrj_t receiverHandle = *std::get<0>(recv);\n+         std::vector<uintptrj_t> listOfOffsets = std::get<1>(recv);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bac4a756d16934bb44f0bb64d46953d98daeeca"}, "originalPosition": 274}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIzMjExNw==", "bodyText": "Again, let's use a const reference here", "url": "https://github.com/eclipse-openj9/openj9/pull/8293#discussion_r367232117", "createdAt": "2020-01-16T05:04:40Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/control/JITClientCompilationThread.cpp", "diffHunk": "@@ -2392,7 +2404,29 @@ handleServerMessage(JITServer::ClientStream *client, TR_J9VM *fe, JITServer::Mes\n          client->write(response, parameterCount);\n          }\n          break;\n-\n+      case MessageType::runFEMacro_invokeILGenMacrosArrayLength:\n+         {\n+         auto recv = client->getRecvData<uintptrj_t*, std::vector<uintptrj_t> >();\n+         TR::VMAccessCriticalSection invokeILGenMacrosArrayLength(fe);\n+         uintptrj_t receiverHandle = *std::get<0>(recv);\n+         std::vector<uintptrj_t> listOfOffsets = std::get<1>(recv);\n+         uintptrj_t array = JITServerHelpers::walkReferenceChainWithOffsets(fe, listOfOffsets, receiverHandle);\n+         int32_t arrayLength = (int32_t)fe->getArrayLengthInElements(array);\n+         client->write(response, arrayLength);\n+         }\n+         break;\n+      case MessageType::runFEMacro_invokeILGenMacrosGetField:\n+         {\n+         auto recv = client->getRecvData<uintptrj_t*, uintptrj_t, std::vector<uintptrj_t> >();\n+         TR::VMAccessCriticalSection invokeILGenMacrosGetField(fe);\n+         uintptrj_t receiverHandle = *std::get<0>(recv);\n+         uintptrj_t fieldOffset = std::get<1>(recv);\n+         std::vector<uintptrj_t> listOfOffsets = std::get<2>(recv);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bac4a756d16934bb44f0bb64d46953d98daeeca"}, "originalPosition": 286}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c963b8c885395d8f89b693416870dcc548523a1f", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/c963b8c885395d8f89b693416870dcc548523a1f", "committedDate": "2020-01-16T16:31:11Z", "message": "Make listOfOffsets const vector reference\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0MDcyMzIw", "url": "https://github.com/eclipse-openj9/openj9/pull/8293#pullrequestreview-344072320", "createdAt": "2020-01-16T17:03:15Z", "commit": {"oid": "c963b8c885395d8f89b693416870dcc548523a1f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNzowMzoxNlrOFeg2fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNzowMzoxNlrOFeg2fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUzOTgzOA==", "bodyText": "I believe that getIn32FieldAt requires VM access in hand. same for getInt64FieldAt below", "url": "https://github.com/eclipse-openj9/openj9/pull/8293#discussion_r367539838", "createdAt": "2020-01-16T17:03:16Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/control/JITClientCompilationThread.cpp", "diffHunk": "@@ -656,13 +656,6 @@ handleServerMessage(JITServer::ClientStream *client, TR_J9VM *fe, JITServer::Mes\n          break;\n       case MessageType::VM_getInt32FieldAt:\n          {\n-         if (compInfoPT->getLastLocalGCCounter() != compInfoPT->getCompilationInfo()->getLocalGCCounter())\n-            {\n-            // GC happened, fail compilation\n-            auto comp = compInfoPT->getCompilation();\n-            comp->failCompilation<TR::CompilationInterrupted>(\"Compilation interrupted due to GC\");\n-            }\n-\n          auto recv = client->getRecvData<uintptrj_t, uintptrj_t>();\n          uintptrj_t objectPointer = std::get<0>(recv);\n          uintptrj_t fieldOffset = std::get<1>(recv);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c963b8c885395d8f89b693416870dcc548523a1f"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0MDc1MDc1", "url": "https://github.com/eclipse-openj9/openj9/pull/8293#pullrequestreview-344075075", "createdAt": "2020-01-16T17:07:19Z", "commit": {"oid": "c963b8c885395d8f89b693416870dcc548523a1f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNzowNzoxOVrOFeg-tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNzowNzoxOVrOFeg-tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU0MTk0Mg==", "bodyText": "fe->getArrayLengthInElements assumes VM access is already held, but I don't think the client will have it here, so we need to acquire is briefly", "url": "https://github.com/eclipse-openj9/openj9/pull/8293#discussion_r367541942", "createdAt": "2020-01-16T17:07:19Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/control/JITClientCompilationThread.cpp", "diffHunk": "@@ -699,13 +692,6 @@ handleServerMessage(JITServer::ClientStream *client, TR_J9VM *fe, JITServer::Mes\n          break;\n       case MessageType::VM_getArrayLengthInElements:\n          {\n-         if (compInfoPT->getLastLocalGCCounter() != compInfoPT->getCompilationInfo()->getLocalGCCounter())\n-            {\n-            // GC happened, fail compilation\n-            auto comp = compInfoPT->getCompilation();\n-            comp->failCompilation<TR::CompilationInterrupted>(\"Compilation interrupted due to GC\");\n-            }\n-\n          uintptrj_t objectPointer = std::get<0>(client->getRecvData<uintptrj_t>());\n          client->write(response, fe->getArrayLengthInElements(objectPointer));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c963b8c885395d8f89b693416870dcc548523a1f"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd54e6009d7fc5f59cbf541022d8be29d090e0a6", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/cd54e6009d7fc5f59cbf541022d8be29d090e0a6", "committedDate": "2020-01-16T19:05:08Z", "message": "Acquire VMAccess for various JITClient APIs\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0MTUxNDIz", "url": "https://github.com/eclipse-openj9/openj9/pull/8293#pullrequestreview-344151423", "createdAt": "2020-01-16T19:14:19Z", "commit": {"oid": "cd54e6009d7fc5f59cbf541022d8be29d090e0a6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 842, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}