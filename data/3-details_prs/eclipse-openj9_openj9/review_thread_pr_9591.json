{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4ODUxODEy", "number": 9591, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMDoxODoyM1rOD99R5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxNTo0NDoyNlrOFMLzfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MjkzNzM1OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/codegen/J9AheadOfTimeCompile.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMDoxODoyM1rOGXxEZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMDoxODoyM1rOGXxEZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU3NDM3NQ==", "bodyText": "Missing a break; here.\nAlso you should add code to dump the relo data further below in J9::AheadOfTimeCompile::dumpRelocationHeaderData", "url": "https://github.com/eclipse-openj9/openj9/pull/9591#discussion_r427574375", "createdAt": "2020-05-19T20:18:23Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/codegen/J9AheadOfTimeCompile.cpp", "diffHunk": "@@ -563,6 +563,23 @@ J9::AheadOfTimeCompile::initializeCommonAOTRelocationHeader(TR::IteratedExternal\n          }\n          break;\n \n+      case TR_BlockFrequency:\n+         {\n+         TR_RelocationRecordBlockFrequency *blockFrequencyRecord = reinterpret_cast<TR_RelocationRecordBlockFrequency *>(reloRecord);\n+         TR_PersistentProfileInfo *profileInfo = TR::comp()->getRecompilationInfo()->getProfileInfo();\n+\n+         TR_ASSERT(NULL != profileInfo, \"PersistentProfileInfo not found when creating relocation record for block frequency\\n\");\n+\n+         TR_BlockFrequencyInfo *blockInfo = profileInfo->getBlockFrequencyInfo();\n+\n+         TR_ASSERT(NULL != blockInfo, \"BlockFrequencyInfo not found when creating relocation record for block frequency\\n\");\n+\n+         uintptr_t frequencyArrayBase = reinterpret_cast<uintptr_t>(blockInfo->getFrequencyArrayBase());\n+         uintptr_t frequencyPtr = reinterpret_cast<uintptr_t>(relocation->getTargetAddress());\n+\n+         blockFrequencyRecord->setFrequencyOffset(reloTarget, frequencyPtr - frequencyArrayBase);\n+         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c45bc7671a0bbc761885aeca21acf559126aa93d"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2Mjk0ODU1OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/runtime/RelocationRecord.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMDoyMTozN1rOGXxLTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMDoyMTozN1rOGXxLTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU3NjE0MQ==", "bodyText": "You should probably put a NULL check for the bodyInfo. If in some strange circumstance, the compiler in the load run might decide that a particular method shouldn't be recompiled, there won't be a bodyInfo. It would be a truly weird circumstance (especially since in the compile run there was a bodyInfo), so you could add some logging.", "url": "https://github.com/eclipse-openj9/openj9/pull/9591#discussion_r427576141", "createdAt": "2020-05-19T20:21:37Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/runtime/RelocationRecord.cpp", "diffHunk": "@@ -766,6 +766,77 @@ TR_RelocationRecordWithOffset::applyRelocation(TR_RelocationRuntime *reloRuntime\n    return 0;\n    }\n \n+// TR_BlockFrequency\n+//\n+char *\n+TR_RelocationRecordBlockFrequency::name()\n+   {\n+   return \"TR_BlockFrequency\";\n+   }\n+\n+void\n+TR_RelocationRecordBlockFrequency::print(TR_RelocationRuntime *reloRuntime)\n+   {\n+   TR_RelocationTarget *reloTarget = reloRuntime->reloTarget();\n+   TR_RelocationRuntimeLogger *reloLogger = reloRuntime->reloLogger();\n+   TR_RelocationRecord::print(reloRuntime);\n+   reloLogger->printf(\"\\tfrequencyOffset %x\\n\", frequencyOffset(reloTarget));\n+   }\n+\n+void\n+TR_RelocationRecordBlockFrequency::setFrequencyOffset(TR_RelocationTarget *reloTarget, uintptr_t offset)\n+   {\n+   reloTarget->storeRelocationRecordValue(offset, (uintptr_t *) &((TR_RelocationRecordBlockFrequencyBinaryTemplate *)_record)->_frequencyOffset);\n+   }\n+\n+uintptr_t\n+TR_RelocationRecordBlockFrequency::frequencyOffset(TR_RelocationTarget *reloTarget)\n+   {\n+   return reloTarget->loadRelocationRecordValue((uintptr_t *) &((TR_RelocationRecordBlockFrequencyBinaryTemplate *)_record)->_frequencyOffset);\n+   }\n+\n+int32_t\n+TR_RelocationRecordBlockFrequency::bytesInHeaderAndPayload()\n+   {\n+   return sizeof(TR_RelocationRecordBlockFrequencyBinaryTemplate);\n+   }\n+\n+void\n+TR_RelocationRecordBlockFrequency::preparePrivateData(TR_RelocationRuntime *reloRuntime, TR_RelocationTarget *reloTarget)\n+   {\n+   TR_RelocationRecordBlockFrequencyPrivateData *reloPrivateData = &(privateData()->blockFrequency);\n+   TR_PersistentJittedBodyInfo *bodyInfo = reinterpret_cast<TR_PersistentJittedBodyInfo *>(reloRuntime->exceptionTable()->bodyInfo);\n+   TR_PersistentProfileInfo *profileInfo = bodyInfo->getProfileInfo();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c45bc7671a0bbc761885aeca21acf559126aa93d"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2Mjk1NDQxOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/codegen/J9AheadOfTimeCompile.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMDoyMzoyN1rOGXxPPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMDoyMzoyN1rOGXxPPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU3NzE0OA==", "bodyText": "Probably best to also just fail the compile at this point, there was a new exception recently added J9::AOTRelocationRecordGenerationFailure that you could use.", "url": "https://github.com/eclipse-openj9/openj9/pull/9591#discussion_r427577148", "createdAt": "2020-05-19T20:23:27Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/codegen/J9AheadOfTimeCompile.cpp", "diffHunk": "@@ -563,6 +563,23 @@ J9::AheadOfTimeCompile::initializeCommonAOTRelocationHeader(TR::IteratedExternal\n          }\n          break;\n \n+      case TR_BlockFrequency:\n+         {\n+         TR_RelocationRecordBlockFrequency *blockFrequencyRecord = reinterpret_cast<TR_RelocationRecordBlockFrequency *>(reloRecord);\n+         TR_PersistentProfileInfo *profileInfo = TR::comp()->getRecompilationInfo()->getProfileInfo();\n+\n+         TR_ASSERT(NULL != profileInfo, \"PersistentProfileInfo not found when creating relocation record for block frequency\\n\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c45bc7671a0bbc761885aeca21acf559126aa93d"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2Mjk1NDg3OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/codegen/J9AheadOfTimeCompile.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMDoyMzozNlrOGXxPfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMDoyMzozNlrOGXxPfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU3NzIxNA==", "bodyText": "Same comment as above.", "url": "https://github.com/eclipse-openj9/openj9/pull/9591#discussion_r427577214", "createdAt": "2020-05-19T20:23:36Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/codegen/J9AheadOfTimeCompile.cpp", "diffHunk": "@@ -563,6 +563,23 @@ J9::AheadOfTimeCompile::initializeCommonAOTRelocationHeader(TR::IteratedExternal\n          }\n          break;\n \n+      case TR_BlockFrequency:\n+         {\n+         TR_RelocationRecordBlockFrequency *blockFrequencyRecord = reinterpret_cast<TR_RelocationRecordBlockFrequency *>(reloRecord);\n+         TR_PersistentProfileInfo *profileInfo = TR::comp()->getRecompilationInfo()->getProfileInfo();\n+\n+         TR_ASSERT(NULL != profileInfo, \"PersistentProfileInfo not found when creating relocation record for block frequency\\n\");\n+\n+         TR_BlockFrequencyInfo *blockInfo = profileInfo->getBlockFrequencyInfo();\n+\n+         TR_ASSERT(NULL != blockInfo, \"BlockFrequencyInfo not found when creating relocation record for block frequency\\n\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c45bc7671a0bbc761885aeca21acf559126aa93d"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NDg0MTYwOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/p/codegen/J9AheadOfTimeCompile.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxODoxMzo1M1rOIOh52w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxODoxMzo1M1rOIOh52w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjEwNjQ1OQ==", "bodyText": "You should use sizeof(TR_RelocationRecordBinaryTemplate) like you did in RelocationRecord.cpp.", "url": "https://github.com/eclipse-openj9/openj9/pull/9591#discussion_r552106459", "createdAt": "2021-01-05T18:13:53Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/p/codegen/J9AheadOfTimeCompile.cpp", "diffHunk": "@@ -505,6 +539,8 @@ uint32_t J9::Power::AheadOfTimeCompile::_relocationTargetTypeToHeaderSizeMap[TR_\n    sizeof(TR_RelocationRecordMethodCallAddressBinaryTemplate),         // TR_MethodCallAddress = 99,\n    sizeof(TR_RelocationRecordSymbolFromManagerBinaryTemplate),         // TR_DiscontiguousSymbolFromManager = 100,\n    sizeof(TR_RelocationRecordResolvedTrampolinesBinaryTemplate),       // TR_ResolvedTrampolines = 101,\n+   sizeof(TR_RelocationRecordBlockFrequencyBinaryTemplate),            // TR_BlockFrequency = 102,\n+   8,                                                                  // TR_RecompQueuedFlag = 103,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39e1a1a0b55e3e4faf2e25e28569cab959e493c0"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NDg0MTk3OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/p/codegen/J9AheadOfTimeCompile.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxODoxMzo1OFrOIOh6FA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxODoxMzo1OFrOIOh6FA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjEwNjUxNg==", "bodyText": "You should use sizeof(TR_RelocationRecordBinaryTemplate) like you did in RelocationRecord.cpp.", "url": "https://github.com/eclipse-openj9/openj9/pull/9591#discussion_r552106516", "createdAt": "2021-01-05T18:13:58Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/p/codegen/J9AheadOfTimeCompile.cpp", "diffHunk": "@@ -611,6 +647,8 @@ uint32_t J9::Power::AheadOfTimeCompile::_relocationTargetTypeToHeaderSizeMap[TR_\n    sizeof(TR_RelocationRecordMethodCallAddressBinaryTemplate),         // TR_MethodCallAddress = 99,\n    sizeof(TR_RelocationRecordSymbolFromManagerBinaryTemplate),         // TR_DiscontiguousSymbolFromManager = 100,\n    sizeof(TR_RelocationRecordResolvedTrampolinesBinaryTemplate),       // TR_ResolvedTrampolines = 101,\n+   sizeof(TR_RelocationRecordBlockFrequencyBinaryTemplate),            // TR_BlockFrequency = 102,\n+   4,                                                                  // TR_RecompQueuedFlag = 103,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39e1a1a0b55e3e4faf2e25e28569cab959e493c0"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NDg1MzYzOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/runtime/RelocationRecord.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxODoxNjoyMFrOIOiBpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxODoxNjoyMFrOIOiBpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjEwODQ1NA==", "bodyText": "Is it possible for profileInfo / profileInfo->getBlockFrequenceyInfo to be NULL? If it is then you'll need a NULL check in applyRelocation and return non-zero if _addressToPatch is NULL; otherwise you'll run into a SIGSEGV.", "url": "https://github.com/eclipse-openj9/openj9/pull/9591#discussion_r552108454", "createdAt": "2021-01-05T18:16:20Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/runtime/RelocationRecord.cpp", "diffHunk": "@@ -768,6 +774,128 @@ TR_RelocationRecordWithOffset::applyRelocation(TR_RelocationRuntime *reloRuntime\n    return 0;\n    }\n \n+// TR_BlockFrequency\n+//\n+char *\n+TR_RelocationRecordBlockFrequency::name()\n+   {\n+   return \"TR_BlockFrequency\";\n+   }\n+\n+void\n+TR_RelocationRecordBlockFrequency::print(TR_RelocationRuntime *reloRuntime)\n+   {\n+   TR_RelocationTarget *reloTarget = reloRuntime->reloTarget();\n+   TR_RelocationRuntimeLogger *reloLogger = reloRuntime->reloLogger();\n+   TR_RelocationRecord::print(reloRuntime);\n+   reloLogger->printf(\"\\tfrequencyOffset %x\\n\", frequencyOffset(reloTarget));\n+   }\n+\n+void\n+TR_RelocationRecordBlockFrequency::setFrequencyOffset(TR_RelocationTarget *reloTarget, uintptr_t offset)\n+   {\n+   reloTarget->storeRelocationRecordValue(offset, (uintptr_t *) &((TR_RelocationRecordBlockFrequencyBinaryTemplate *)_record)->_frequencyOffset);\n+   }\n+\n+uintptr_t\n+TR_RelocationRecordBlockFrequency::frequencyOffset(TR_RelocationTarget *reloTarget)\n+   {\n+   return reloTarget->loadRelocationRecordValue((uintptr_t *) &((TR_RelocationRecordBlockFrequencyBinaryTemplate *)_record)->_frequencyOffset);\n+   }\n+\n+int32_t\n+TR_RelocationRecordBlockFrequency::bytesInHeaderAndPayload()\n+   {\n+   return sizeof(TR_RelocationRecordBlockFrequencyBinaryTemplate);\n+   }\n+\n+void\n+TR_RelocationRecordBlockFrequency::preparePrivateData(TR_RelocationRuntime *reloRuntime, TR_RelocationTarget *reloTarget)\n+   {\n+   TR_RelocationRecordBlockFrequencyPrivateData *reloPrivateData = &(privateData()->blockFrequency);\n+   reloPrivateData->_addressToPatch = NULL;\n+\n+   TR_PersistentJittedBodyInfo *bodyInfo = reinterpret_cast<TR_PersistentJittedBodyInfo *>(reloRuntime->exceptionTable()->bodyInfo);\n+   if (bodyInfo)\n+      {\n+      TR_PersistentProfileInfo *profileInfo = bodyInfo->getProfileInfo();\n+      if (profileInfo && profileInfo->getBlockFrequencyInfo())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39e1a1a0b55e3e4faf2e25e28569cab959e493c0"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NDg1ODgxOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/runtime/RelocationRecord.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxODoxNzo1NVrOIOiE3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxODoxNzo1NVrOIOiE3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjEwOTI3OA==", "bodyText": "You don't need to implement print if TR_RelocationRecordRecompQueuedFlag doesn't have any new fields.", "url": "https://github.com/eclipse-openj9/openj9/pull/9591#discussion_r552109278", "createdAt": "2021-01-05T18:17:55Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/runtime/RelocationRecord.cpp", "diffHunk": "@@ -768,6 +774,128 @@ TR_RelocationRecordWithOffset::applyRelocation(TR_RelocationRuntime *reloRuntime\n    return 0;\n    }\n \n+// TR_BlockFrequency\n+//\n+char *\n+TR_RelocationRecordBlockFrequency::name()\n+   {\n+   return \"TR_BlockFrequency\";\n+   }\n+\n+void\n+TR_RelocationRecordBlockFrequency::print(TR_RelocationRuntime *reloRuntime)\n+   {\n+   TR_RelocationTarget *reloTarget = reloRuntime->reloTarget();\n+   TR_RelocationRuntimeLogger *reloLogger = reloRuntime->reloLogger();\n+   TR_RelocationRecord::print(reloRuntime);\n+   reloLogger->printf(\"\\tfrequencyOffset %x\\n\", frequencyOffset(reloTarget));\n+   }\n+\n+void\n+TR_RelocationRecordBlockFrequency::setFrequencyOffset(TR_RelocationTarget *reloTarget, uintptr_t offset)\n+   {\n+   reloTarget->storeRelocationRecordValue(offset, (uintptr_t *) &((TR_RelocationRecordBlockFrequencyBinaryTemplate *)_record)->_frequencyOffset);\n+   }\n+\n+uintptr_t\n+TR_RelocationRecordBlockFrequency::frequencyOffset(TR_RelocationTarget *reloTarget)\n+   {\n+   return reloTarget->loadRelocationRecordValue((uintptr_t *) &((TR_RelocationRecordBlockFrequencyBinaryTemplate *)_record)->_frequencyOffset);\n+   }\n+\n+int32_t\n+TR_RelocationRecordBlockFrequency::bytesInHeaderAndPayload()\n+   {\n+   return sizeof(TR_RelocationRecordBlockFrequencyBinaryTemplate);\n+   }\n+\n+void\n+TR_RelocationRecordBlockFrequency::preparePrivateData(TR_RelocationRuntime *reloRuntime, TR_RelocationTarget *reloTarget)\n+   {\n+   TR_RelocationRecordBlockFrequencyPrivateData *reloPrivateData = &(privateData()->blockFrequency);\n+   reloPrivateData->_addressToPatch = NULL;\n+\n+   TR_PersistentJittedBodyInfo *bodyInfo = reinterpret_cast<TR_PersistentJittedBodyInfo *>(reloRuntime->exceptionTable()->bodyInfo);\n+   if (bodyInfo)\n+      {\n+      TR_PersistentProfileInfo *profileInfo = bodyInfo->getProfileInfo();\n+      if (profileInfo && profileInfo->getBlockFrequencyInfo())\n+         {\n+         uintptr_t frequencyBase = reinterpret_cast<uintptr_t>(profileInfo->getBlockFrequencyInfo()->getFrequencyArrayBase());\n+         reloPrivateData->_addressToPatch = reinterpret_cast<uint8_t *>(frequencyBase + frequencyOffset(reloTarget));\n+         }\n+      }\n+   RELO_LOG(reloRuntime->reloLogger(), 6, \"\\tpreparePrivateData: addressToPatch: %p \\n\", reloPrivateData->_addressToPatch);\n+   }\n+\n+int32_t\n+TR_RelocationRecordBlockFrequency::applyRelocation(TR_RelocationRuntime *reloRuntime, TR_RelocationTarget *reloTarget, uint8_t *reloLocation)\n+   {\n+   TR_RelocationRecordBlockFrequencyPrivateData *reloPrivateData = &(privateData()->blockFrequency);\n+   reloTarget->storeAddressSequence(reloPrivateData->_addressToPatch, reloLocation, reloFlags(reloTarget));\n+\n+   return 0;\n+   }\n+\n+int32_t\n+TR_RelocationRecordBlockFrequency::applyRelocation(TR_RelocationRuntime *reloRuntime, TR_RelocationTarget *reloTarget, uint8_t *reloLocationHigh, uint8_t *reloLocationLow)\n+   {\n+   TR_RelocationRecordBlockFrequencyPrivateData *reloPrivateData = &(privateData()->blockFrequency);\n+   reloTarget->storeAddress(reloPrivateData->_addressToPatch, reloLocationHigh, reloLocationLow, reloFlags(reloTarget));\n+   return 0;\n+   }\n+\n+// TR_RecompQueuedFlag\n+//\n+char *\n+TR_RelocationRecordRecompQueuedFlag::name()\n+   {\n+   return \"TR_RecompQueuedFlag\";\n+   }\n+\n+void\n+TR_RelocationRecordRecompQueuedFlag::print(TR_RelocationRuntime *reloRuntime)\n+   {\n+   TR_RelocationTarget *reloTarget = reloRuntime->reloTarget();\n+   TR_RelocationRuntimeLogger *reloLogger = reloRuntime->reloLogger();\n+   TR_RelocationRecord::print(reloRuntime);\n+   }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39e1a1a0b55e3e4faf2e25e28569cab959e493c0"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NDg2MzU4OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/x/codegen/J9AheadOfTimeCompile.cpp", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxODoxOToxOFrOIOiHsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxNzoxMjo1OFrOIPNiqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjExMDAwMg==", "bodyText": "Why can't this be in the common runtime/compiler/codegen/J9AheadOfTimeCompile.cpp file?", "url": "https://github.com/eclipse-openj9/openj9/pull/9591#discussion_r552110002", "createdAt": "2021-01-05T18:19:18Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/x/codegen/J9AheadOfTimeCompile.cpp", "diffHunk": "@@ -155,6 +155,31 @@ uint8_t *J9::X86::AheadOfTimeCompile::initializeAOTRelocationHeader(TR::Iterated\n          }\n         break;\n \n+      case TR_BlockFrequency:\n+         {\n+         TR_RelocationRecordBlockFrequency *ptRecord = reinterpret_cast<TR_RelocationRecordBlockFrequency *>(reloRecord);\n+         TR_PersistentProfileInfo *profileInfo = TR::comp()->getRecompilationInfo()->getProfileInfo();\n+\n+         TR_ASSERT(NULL != profileInfo, \"PersistentProfileInfo not found when creating relocation record for block frequency\\n\");\n+         if (NULL == profileInfo)\n+            {\n+            self()->comp()->failCompilation<J9::AOTRelocationRecordGenerationFailure>(\"AOT header initialization can't find profile info\");\n+            }\n+\n+         TR_BlockFrequencyInfo *blockFrequencyInfo = profileInfo->getBlockFrequencyInfo();\n+         TR_ASSERT(NULL != blockFrequencyInfo, \"BlockFrequencyInfo not found when creating relocation record for block frequency\\n\");\n+         if (NULL == blockFrequencyInfo)\n+            {\n+            self()->comp()->failCompilation<J9::AOTRelocationRecordGenerationFailure>(\"AOT header initialization can't find block frequency info\");\n+            }\n+\n+         uintptr_t frequencyArrayBase = reinterpret_cast<uintptr_t>(blockFrequencyInfo->getFrequencyArrayBase());\n+         uintptr_t frequencyPtr = reinterpret_cast<uintptr_t>(relocation->getTargetAddress());\n+         ptRecord->setFrequencyOffset(reloTarget, frequencyPtr - frequencyArrayBase);\n+         cursor = relocation->getRelocationData() + TR_RelocationRecord::getSizeOfAOTRelocationHeader(static_cast<TR_RelocationRecordType>(targetKind));\n+         }\n+         break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39e1a1a0b55e3e4faf2e25e28569cab959e493c0"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjc0NTk2MA==", "bodyText": "Only reason is I need to set relo flags in p and not in x, so they are slightly different. I think I can use the implementation for p  as the common code and when generating the relocation I can set relo flag to 0 in x.", "url": "https://github.com/eclipse-openj9/openj9/pull/9591#discussion_r552745960", "createdAt": "2021-01-06T16:03:41Z", "author": {"login": "ashu-mehra"}, "path": "runtime/compiler/x/codegen/J9AheadOfTimeCompile.cpp", "diffHunk": "@@ -155,6 +155,31 @@ uint8_t *J9::X86::AheadOfTimeCompile::initializeAOTRelocationHeader(TR::Iterated\n          }\n         break;\n \n+      case TR_BlockFrequency:\n+         {\n+         TR_RelocationRecordBlockFrequency *ptRecord = reinterpret_cast<TR_RelocationRecordBlockFrequency *>(reloRecord);\n+         TR_PersistentProfileInfo *profileInfo = TR::comp()->getRecompilationInfo()->getProfileInfo();\n+\n+         TR_ASSERT(NULL != profileInfo, \"PersistentProfileInfo not found when creating relocation record for block frequency\\n\");\n+         if (NULL == profileInfo)\n+            {\n+            self()->comp()->failCompilation<J9::AOTRelocationRecordGenerationFailure>(\"AOT header initialization can't find profile info\");\n+            }\n+\n+         TR_BlockFrequencyInfo *blockFrequencyInfo = profileInfo->getBlockFrequencyInfo();\n+         TR_ASSERT(NULL != blockFrequencyInfo, \"BlockFrequencyInfo not found when creating relocation record for block frequency\\n\");\n+         if (NULL == blockFrequencyInfo)\n+            {\n+            self()->comp()->failCompilation<J9::AOTRelocationRecordGenerationFailure>(\"AOT header initialization can't find block frequency info\");\n+            }\n+\n+         uintptr_t frequencyArrayBase = reinterpret_cast<uintptr_t>(blockFrequencyInfo->getFrequencyArrayBase());\n+         uintptr_t frequencyPtr = reinterpret_cast<uintptr_t>(relocation->getTargetAddress());\n+         ptRecord->setFrequencyOffset(reloTarget, frequencyPtr - frequencyArrayBase);\n+         cursor = relocation->getRelocationData() + TR_RelocationRecord::getSizeOfAOTRelocationHeader(static_cast<TR_RelocationRecordType>(targetKind));\n+         }\n+         break;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjExMDAwMg=="}, "originalCommit": {"oid": "39e1a1a0b55e3e4faf2e25e28569cab959e493c0"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjc2MzE1NQ==", "bodyText": "Yeah it makes sense that p had its own implementation, but the x implementation was the common one, so it could be moved to the common file. The way the infra works is that it will look at the platform specific implementation first, so even if you move the x implementation to the common file, on P it will still run the P implementation.\nThat said, if you change all platforms to use TR_RelocationRecordInformation then you won't need a separate version for P.", "url": "https://github.com/eclipse-openj9/openj9/pull/9591#discussion_r552763155", "createdAt": "2021-01-06T16:16:04Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/x/codegen/J9AheadOfTimeCompile.cpp", "diffHunk": "@@ -155,6 +155,31 @@ uint8_t *J9::X86::AheadOfTimeCompile::initializeAOTRelocationHeader(TR::Iterated\n          }\n         break;\n \n+      case TR_BlockFrequency:\n+         {\n+         TR_RelocationRecordBlockFrequency *ptRecord = reinterpret_cast<TR_RelocationRecordBlockFrequency *>(reloRecord);\n+         TR_PersistentProfileInfo *profileInfo = TR::comp()->getRecompilationInfo()->getProfileInfo();\n+\n+         TR_ASSERT(NULL != profileInfo, \"PersistentProfileInfo not found when creating relocation record for block frequency\\n\");\n+         if (NULL == profileInfo)\n+            {\n+            self()->comp()->failCompilation<J9::AOTRelocationRecordGenerationFailure>(\"AOT header initialization can't find profile info\");\n+            }\n+\n+         TR_BlockFrequencyInfo *blockFrequencyInfo = profileInfo->getBlockFrequencyInfo();\n+         TR_ASSERT(NULL != blockFrequencyInfo, \"BlockFrequencyInfo not found when creating relocation record for block frequency\\n\");\n+         if (NULL == blockFrequencyInfo)\n+            {\n+            self()->comp()->failCompilation<J9::AOTRelocationRecordGenerationFailure>(\"AOT header initialization can't find block frequency info\");\n+            }\n+\n+         uintptr_t frequencyArrayBase = reinterpret_cast<uintptr_t>(blockFrequencyInfo->getFrequencyArrayBase());\n+         uintptr_t frequencyPtr = reinterpret_cast<uintptr_t>(relocation->getTargetAddress());\n+         ptRecord->setFrequencyOffset(reloTarget, frequencyPtr - frequencyArrayBase);\n+         cursor = relocation->getRelocationData() + TR_RelocationRecord::getSizeOfAOTRelocationHeader(static_cast<TR_RelocationRecordType>(targetKind));\n+         }\n+         break;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjExMDAwMg=="}, "originalCommit": {"oid": "39e1a1a0b55e3e4faf2e25e28569cab959e493c0"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjgyMTQxOA==", "bodyText": "if you change all platforms to use TR_RelocationRecordInformation then you won't need a separate version for P\n\nyup, that's the plan.", "url": "https://github.com/eclipse-openj9/openj9/pull/9591#discussion_r552821418", "createdAt": "2021-01-06T17:12:58Z", "author": {"login": "ashu-mehra"}, "path": "runtime/compiler/x/codegen/J9AheadOfTimeCompile.cpp", "diffHunk": "@@ -155,6 +155,31 @@ uint8_t *J9::X86::AheadOfTimeCompile::initializeAOTRelocationHeader(TR::Iterated\n          }\n         break;\n \n+      case TR_BlockFrequency:\n+         {\n+         TR_RelocationRecordBlockFrequency *ptRecord = reinterpret_cast<TR_RelocationRecordBlockFrequency *>(reloRecord);\n+         TR_PersistentProfileInfo *profileInfo = TR::comp()->getRecompilationInfo()->getProfileInfo();\n+\n+         TR_ASSERT(NULL != profileInfo, \"PersistentProfileInfo not found when creating relocation record for block frequency\\n\");\n+         if (NULL == profileInfo)\n+            {\n+            self()->comp()->failCompilation<J9::AOTRelocationRecordGenerationFailure>(\"AOT header initialization can't find profile info\");\n+            }\n+\n+         TR_BlockFrequencyInfo *blockFrequencyInfo = profileInfo->getBlockFrequencyInfo();\n+         TR_ASSERT(NULL != blockFrequencyInfo, \"BlockFrequencyInfo not found when creating relocation record for block frequency\\n\");\n+         if (NULL == blockFrequencyInfo)\n+            {\n+            self()->comp()->failCompilation<J9::AOTRelocationRecordGenerationFailure>(\"AOT header initialization can't find block frequency info\");\n+            }\n+\n+         uintptr_t frequencyArrayBase = reinterpret_cast<uintptr_t>(blockFrequencyInfo->getFrequencyArrayBase());\n+         uintptr_t frequencyPtr = reinterpret_cast<uintptr_t>(relocation->getTargetAddress());\n+         ptRecord->setFrequencyOffset(reloTarget, frequencyPtr - frequencyArrayBase);\n+         cursor = relocation->getRelocationData() + TR_RelocationRecord::getSizeOfAOTRelocationHeader(static_cast<TR_RelocationRecordType>(targetKind));\n+         }\n+         break;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjExMDAwMg=="}, "originalCommit": {"oid": "39e1a1a0b55e3e4faf2e25e28569cab959e493c0"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NDg3MDA4OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/x/codegen/J9AheadOfTimeCompile.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxODoyMToyM1rOIOiLwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxODoyMToyM1rOIOiLwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjExMTA0Mg==", "bodyText": "You should use sizeof(TR_RelocationRecordBinaryTemplate) like you did in RelocationRecord.cpp.", "url": "https://github.com/eclipse-openj9/openj9/pull/9591#discussion_r552111042", "createdAt": "2021-01-05T18:21:23Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/x/codegen/J9AheadOfTimeCompile.cpp", "diffHunk": "@@ -267,7 +292,9 @@ uint32_t J9::X86::AheadOfTimeCompile::_relocationTargetTypeToHeaderSizeMap[TR_Nu\n    sizeof(TR_RelocationRecordSymbolFromManagerBinaryTemplate),         // TR_SymbolFromManager = 98,\n    sizeof(TR_RelocationRecordMethodCallAddressBinaryTemplate),         // TR_MethodCallAddress                   = 99,\n    sizeof(TR_RelocationRecordSymbolFromManagerBinaryTemplate),         // TR_DiscontiguousSymbolFromManager = 100,\n-   sizeof(TR_RelocationRecordResolvedTrampolinesBinaryTemplate),       // TR_ResolvedTrampolines = 101\n+   sizeof(TR_RelocationRecordResolvedTrampolinesBinaryTemplate),       // TR_ResolvedTrampolines = 101,\n+   sizeof(TR_RelocationRecordBlockFrequencyBinaryTemplate),            // TR_BlockFrequency = 102,\n+   8,                                                                  // TR_RecompQueuedFlag = 103", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39e1a1a0b55e3e4faf2e25e28569cab959e493c0"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MzIwNjM5OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/codegen/J9AheadOfTimeCompile.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxNTo0NDoyNlrOIPxcGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxNTo0NDoyNlrOIPxcGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzQwOTU2MQ==", "bodyText": "There's a local comp object you can use; TR::comp() is apparently an expensive operation.", "url": "https://github.com/eclipse-openj9/openj9/pull/9591#discussion_r553409561", "createdAt": "2021-01-07T15:44:26Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/codegen/J9AheadOfTimeCompile.cpp", "diffHunk": "@@ -1094,6 +1095,38 @@ J9::AheadOfTimeCompile::initializeCommonAOTRelocationHeader(TR::IteratedExternal\n          }\n          break;\n \n+      case TR_BlockFrequency:\n+         {\n+         TR_RelocationRecordBlockFrequency *bfRecord = reinterpret_cast<TR_RelocationRecordBlockFrequency *>(reloRecord);\n+         TR_RelocationRecordInformation *recordInfo = reinterpret_cast<TR_RelocationRecordInformation *>(relocation->getTargetAddress());\n+         TR::SymbolReference *tempSR = reinterpret_cast<TR::SymbolReference *>(recordInfo->data1);\n+         TR::StaticSymbol *staticSym = tempSR->getSymbol()->getStaticSymbol();\n+\n+         uint8_t flags = (uint8_t) recordInfo->data2;\n+         TR_ASSERT((flags & RELOCATION_CROSS_PLATFORM_FLAGS_MASK) == 0,  \"reloFlags bits overlap cross-platform flags bits\\n\");\n+         bfRecord->setReloFlags(reloTarget, flags);\n+\n+         TR_PersistentProfileInfo *profileInfo = TR::comp()->getRecompilationInfo()->getProfileInfo();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "460c3295f1a4e5fb9c29469af54ebb1a33e6f39e"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 181, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}