{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxNzIzMjg5", "number": 8936, "title": "Implement compressed refs override and split BytecodeInterpreter", "bodyText": "Related: #8878\nImplement compressed refs override and split BytecodeInterpreter\n\nAdd new override macro J9_OVERRIDE_COMPRESS_OBJECT_REFERENCES.\nSplit BytecodeInterpreter.cpp into BytecodeInterpreterFull.cpp and BytecodeInterpreterCompressed.cpp.\nRename BytecodeInterpreter.cpp to BytecodeInterpreter.inc; only compile BytecodeInterpreterFull.cpp and BytecodeInterpreterCompressed.cpp\nMove bytecode LOOP_NAME definitions from BytecodeInterpreter.inc and INTERPRETER_CLASS definitions into individual wrapper files (Debug, Full and Compressed).\nIn BytecodeInterpreterFull.cpp and BytecodeInterpreterCompressed.cpp, define the override macro as:\nTRUE if OMR_GC_COMPRESSED_POINTERS is defined\nFALSE if OMR_GC_FULL_POINTERS is defined\nIf the override macro is defined, set J9VMTHREAD_COMPRESS_OBJECT_REFERENCES\nand J9JAVAVM_COMPRESS_OBJECT_REFERENCES to be the same value as the override macro.\n\nSplit BytecodeInterpreter included class names into Full/Compressed\nOf the classes that BytecodeInterpreter.hpp includes, #include \"objectreferencesmacros_undefine.inc\" and #include \"objectreferencesmacros_define.inc\" were added to determine whether or not to split the class names into Full/Compressed versions. If compile/runtime errors occurred with the undefine+define, then the appropriate class name would be split.\nSplit into Full/Compressed (failed undefine+define objectreferencesmacros)\n\nArrayCopyHelpers.hpp\nObjectAccessBarrierAPI.hpp\nObjectAllocationAPI.hpp\nObjectHash.hpp\nObjectMonitor.hpp\nUnsafeAPI.hpp\nVMHelpers.hpp\n\nNot Split (did not fail undefine+define objectreferencesmacros; the undefine+define remain in case future changes require these to be split)\n\nOutOfLineINL.hpp\nVMAccess.hpp\nValueTypeHelpers.hpp\n\nUntouched\n\nAtomicSupport.hpp (in OMR)\nBytecodeAction.hpp (no inline functions)\nJITInterface.hpp (JIT-related)\nMHInterpreter.hpp (further investigation needed)\n\nMove bytecodeLoop prototypes from vm_api.h to jvminit.c\nbytecodeLoop prototypes were relocated to jvminit.c since they do not need to be exposed to anything else.\nSplit DebugBytecodeInterpreter into Full/Compressed\n\nSplit DebugBytecodeInterpreter.cpp into DebugBytecodeInterpreterFull.cpp and DebugBytecodeInterpreterCompressed.cpp.\nRemove DebugBytecodeInterpreter.cpp\n\nAdd dummy define in split files to avoid OSX compile issue\nOSX complains about empty object files. As a temporary solution, #define LOOP_NAME 0 in split interpreter files so that the resulting object files are not empty if their respective code is not enabled.\nTo actually address this problem, these files should not be compiled if their code is disabled. Work will need to be done in makefiles, i.e. runtime/makelib/targets.mk.ftl, to skip compiling the appropriate files.\nFlags in omrcfg.h, i.e. OMR_GC_COMPRESSED_POINTERS and OMR_GC_FULL_POINTERS would be helpful in identifying which files should be compiled. Need to look into if these can be accessed in OpenJ9 makefiles or if there is an OpenJ9 equivalent to the flags.", "createdAt": "2020-03-20T20:17:52Z", "url": "https://github.com/eclipse-openj9/openj9/pull/8936", "merged": true, "mergeCommit": {"oid": "6db7a24035921ad0e86285eaf292c31ab5510931"}, "closed": true, "closedAt": "2020-04-16T23:01:43Z", "author": {"login": "sharon-wang"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcPmeg0AFqTM3ODc4OTg3OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcYR3W7gBqjMyNDE0NjY2NDg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4Nzg5ODc4", "url": "https://github.com/eclipse-openj9/openj9/pull/8936#pullrequestreview-378789878", "createdAt": "2020-03-20T20:24:40Z", "commit": {"oid": "de9ab8f6ad3a14c62b928c704308f5223f82c652"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMDoyNDo0MFrOF5iKuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMDoyNDo0MFrOF5iKuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg3Mjk1NQ==", "bodyText": "Should be J9JAVAVM not J9VMTHREAD", "url": "https://github.com/eclipse-openj9/openj9/pull/8936#discussion_r395872955", "createdAt": "2020-03-20T20:24:40Z", "author": {"login": "gacholio"}, "path": "runtime/oti/j9nonbuilder.h", "diffHunk": "@@ -5179,7 +5183,11 @@ typedef struct J9JavaVM {\n #if defined(OMR_GC_COMPRESSED_POINTERS)\n #if defined(OMR_GC_FULL_POINTERS)\n /* Mixed mode - necessarily 64-bit */\n+#if defined(J9_OVERRIDE_COMPRESS_OBJECT_REFERENCES)\n+#define J9VMTHREAD_COMPRESS_OBJECT_REFERENCES(vmThread) J9_OVERRIDE_COMPRESS_OBJECT_REFERENCES", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de9ab8f6ad3a14c62b928c704308f5223f82c652"}, "originalPosition": 17}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "de9ab8f6ad3a14c62b928c704308f5223f82c652", "author": {"user": {"login": "sharon-wang", "name": "Sharon Wang"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/de9ab8f6ad3a14c62b928c704308f5223f82c652", "committedDate": "2020-03-20T17:28:25Z", "message": "Implement compressed refs override and split BytecodeInterpreter\n\nAdd new define J9_OVERRIDE_COMPRESS_OBJECT_REFERENCES\n\nSigned-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>"}, "afterCommit": {"oid": "aa7b565d49daa0b3ed72fef124ab54790a00ae38", "author": {"user": {"login": "sharon-wang", "name": "Sharon Wang"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/aa7b565d49daa0b3ed72fef124ab54790a00ae38", "committedDate": "2020-03-20T20:55:17Z", "message": "Implement compressed refs override and split BytecodeInterpreter\n\nSplit BytecodeInterpreter.cpp into BytecodeInterpreterFull.cpp and\nBytecodeInterpreterCompressed.cpp. Set the bytecodeLoop name accordingly.\n\nAdd new override macro J9_OVERRIDE_COMPRESS_OBJECT_REFERENCES.\n\nIn BytecodeInterpreterFull.cpp and BytecodeInterpreterCompressed.cpp,\ndefine the override macro as:\n    TRUE if OMR_GC_COMPRESSED_POINTERS is defined\n    FALSE if OMR_GC_FULL_POINTERS is defined\n\nIf the override macro is defined, set J9VMTHREAD_COMPRESS_OBJECT_REFERENCES\nand J9JAVAVM_COMPRESS_OBJECT_REFERENCES to be the same value as the override macro.\n\nSigned-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4602244b382dfa0d830558cc8b247727f239c264", "author": {"user": {"login": "sharon-wang", "name": "Sharon Wang"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/4602244b382dfa0d830558cc8b247727f239c264", "committedDate": "2020-03-23T16:12:02Z", "message": "Remove BytecodeInterpreter.cpp and only compile Full/Compressed versions\n\nRename BytecodeInterpreter.cpp to BytecodeInterpreter.inc and only\ncompile BytecodeInterpreterFull.cpp and BytecodeInterpreterCompressed.cpp\n\nSigned-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>"}, "afterCommit": {"oid": "86defc7de6d3544ddbba6e4b422b34e0d8f8faa0", "author": {"user": {"login": "sharon-wang", "name": "Sharon Wang"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/86defc7de6d3544ddbba6e4b422b34e0d8f8faa0", "committedDate": "2020-03-23T16:18:47Z", "message": "Remove BytecodeInterpreter.cpp and only compile Full/Compressed versions\n\nRename BytecodeInterpreter.cpp to BytecodeInterpreter.inc and only\ncompile BytecodeInterpreterFull.cpp and BytecodeInterpreterCompressed.cpp\n\nSigned-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5NjA5MTU3", "url": "https://github.com/eclipse-openj9/openj9/pull/8936#pullrequestreview-379609157", "createdAt": "2020-03-23T16:37:43Z", "commit": {"oid": "86defc7de6d3544ddbba6e4b422b34e0d8f8faa0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjozNzo0NFrOF6OAAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjozNzo0NFrOF6OAAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU5MTEwNw==", "bodyText": "Rather than doing this, I think it would be better to hoist the class/loop names out into the wrapper .cpp files.", "url": "https://github.com/eclipse-openj9/openj9/pull/8936#discussion_r396591107", "createdAt": "2020-03-23T16:37:44Z", "author": {"login": "gacholio"}, "path": "runtime/vm/BytecodeInterpreterFull.cpp", "diffHunk": "@@ -0,0 +1,29 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+\n+#include \"j9cfg.h\"\n+\n+#if defined(OMR_GC_FULL_POINTERS)\n+#define J9_OVERRIDE_COMPRESS_OBJECT_REFERENCES FALSE\n+#define FULL_VERSION", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86defc7de6d3544ddbba6e4b422b34e0d8f8faa0"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5NjA5OTIy", "url": "https://github.com/eclipse-openj9/openj9/pull/8936#pullrequestreview-379609922", "createdAt": "2020-03-23T16:38:38Z", "commit": {"oid": "86defc7de6d3544ddbba6e4b422b34e0d8f8faa0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjozODozOFrOF6OCeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjozODozOFrOF6OCeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU5MTczNg==", "bodyText": "There seems to be multiple entries for each interpreter in the makefiles.", "url": "https://github.com/eclipse-openj9/openj9/pull/8936#discussion_r396591736", "createdAt": "2020-03-23T16:38:38Z", "author": {"login": "gacholio"}, "path": "runtime/makelib/targets.mk.zos.inc.ftl", "diffHunk": "@@ -126,7 +126,17 @@ endif\n MRABIG = -Wc,\"TBYDBG(-qdebug=MRABIG)\"\n SPECIALCXXFLAGS = $(filter-out -Wc$(COMMA)debug -O3,$(CXXFLAGS))\n NEW_OPTIMIZATION_FLAG = -O2 -Wc,\"TBYDBG(-qdebug=lincomm:ptranl:tfbagg)\" -Wc,\"FEDBG(-qxflag=InlineDespiteVolatileInArgs)\"\n-BytecodeInterpreter.o : BytecodeInterpreter.cpp\n+\n+BytecodeInterpreterFull.o : BytecodeInterpreterFull.cpp\n+\t$(CXX) $(SPECIALCXXFLAGS) $(MRABIG) $(NEW_OPTIMIZATION_FLAG) -c $< > $*.asmlist\n+\n+BytecodeInterpreterCompressed.o : BytecodeInterpreterCompressed.cpp\n+\t$(CXX) $(SPECIALCXXFLAGS) $(MRABIG) $(NEW_OPTIMIZATION_FLAG) -c $< > $*.asmlist\n+\n+BytecodeInterpreterFull.o : BytecodeInterpreterFull.cpp\n+\t$(CXX) $(SPECIALCXXFLAGS) $(MRABIG) $(NEW_OPTIMIZATION_FLAG) -c $< > $*.asmlist\n+\n+BytecodeInterpreterCompressed.o : BytecodeInterpreterCompressed.cpp", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86defc7de6d3544ddbba6e4b422b34e0d8f8faa0"}, "originalPosition": 22}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "86defc7de6d3544ddbba6e4b422b34e0d8f8faa0", "author": {"user": {"login": "sharon-wang", "name": "Sharon Wang"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/86defc7de6d3544ddbba6e4b422b34e0d8f8faa0", "committedDate": "2020-03-23T16:18:47Z", "message": "Remove BytecodeInterpreter.cpp and only compile Full/Compressed versions\n\nRename BytecodeInterpreter.cpp to BytecodeInterpreter.inc and only\ncompile BytecodeInterpreterFull.cpp and BytecodeInterpreterCompressed.cpp\n\nSigned-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>"}, "afterCommit": {"oid": "7f50fdac1d603ff8bb062877e046cf9e5e3d80d4", "author": {"user": {"login": "sharon-wang", "name": "Sharon Wang"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/7f50fdac1d603ff8bb062877e046cf9e5e3d80d4", "committedDate": "2020-03-23T16:57:49Z", "message": "Remove BytecodeInterpreter.cpp and only compile Full/Compressed versions\n\nRename BytecodeInterpreter.cpp to BytecodeInterpreter.inc and only\ncompile BytecodeInterpreterFull.cpp and BytecodeInterpreterCompressed.cpp\n\nMove bytecode LOOP_NAME definitions from BytecodeInterpreter.inc and\nINTERPRETER_CLASS definitions into individual wrapper files (Debug, Full\nand Compressed).\n\nSigned-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7f50fdac1d603ff8bb062877e046cf9e5e3d80d4", "author": {"user": {"login": "sharon-wang", "name": "Sharon Wang"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/7f50fdac1d603ff8bb062877e046cf9e5e3d80d4", "committedDate": "2020-03-23T16:57:49Z", "message": "Remove BytecodeInterpreter.cpp and only compile Full/Compressed versions\n\nRename BytecodeInterpreter.cpp to BytecodeInterpreter.inc and only\ncompile BytecodeInterpreterFull.cpp and BytecodeInterpreterCompressed.cpp\n\nMove bytecode LOOP_NAME definitions from BytecodeInterpreter.inc and\nINTERPRETER_CLASS definitions into individual wrapper files (Debug, Full\nand Compressed).\n\nSigned-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>"}, "afterCommit": {"oid": "843405d3f725597ae4510df098de8a0fb81283c3", "author": {"user": {"login": "sharon-wang", "name": "Sharon Wang"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/843405d3f725597ae4510df098de8a0fb81283c3", "committedDate": "2020-03-23T17:01:46Z", "message": "Remove BytecodeInterpreter.cpp and only compile Full/Compressed versions\n\nRename BytecodeInterpreter.cpp to BytecodeInterpreter.inc and only\ncompile BytecodeInterpreterFull.cpp and BytecodeInterpreterCompressed.cpp\n\nMove bytecode LOOP_NAME definitions from BytecodeInterpreter.inc and\nINTERPRETER_CLASS definitions into individual wrapper files (Debug, Full\nand Compressed).\n\nSigned-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5NjM2OTA4", "url": "https://github.com/eclipse-openj9/openj9/pull/8936#pullrequestreview-379636908", "createdAt": "2020-03-23T17:08:13Z", "commit": {"oid": "843405d3f725597ae4510df098de8a0fb81283c3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNzowODoxM1rOF6PU2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNzowODoxM1rOF6PU2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYxMjgyNw==", "bodyText": "This code needs to be ifdeffed also - you can only refer to the full/compressed loop function if the appropriate flag is defined (since the interpreter files are compiled undef ifdef).", "url": "https://github.com/eclipse-openj9/openj9/pull/8936#discussion_r396612827", "createdAt": "2020-03-23T17:08:13Z", "author": {"login": "gacholio"}, "path": "runtime/vm/jvminit.c", "diffHunk": "@@ -2452,9 +2452,13 @@ IDATA VMInitStages(J9JavaVM *vm, IDATA stage, void* reserved) {\n #endif /* J9VM_INTERP_ATOMIC_FREE_JNI_USES_FLUSH */\n \t\t\tTRIGGER_J9HOOK_VM_ABOUT_TO_BOOTSTRAP(vm->hookInterface, vm->mainThread);\n \t\t\t/* At this point, the decision about which interpreter to use has been made */\n-\t\t\tvm->bytecodeLoop = J9_ARE_ANY_BITS_SET(vm->extendedRuntimeFlags, J9_EXTENDED_RUNTIME_DEBUG_MODE)\n-\t\t\t\t\t? (void*)debugBytecodeLoop\n-\t\t\t\t\t: (void*)bytecodeLoop;\n+\t\t\tif (J9_ARE_ANY_BITS_SET(vm->extendedRuntimeFlags, J9_EXTENDED_RUNTIME_DEBUG_MODE)) {\n+\t\t\t\tvm->bytecodeLoop = (void*)debugBytecodeLoop;\n+\t\t\t} else {\n+\t\t\t\tvm->bytecodeLoop = (J9VMTHREAD_COMPRESS_OBJECT_REFERENCES(vmThread))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "843405d3f725597ae4510df098de8a0fb81283c3"}, "originalPosition": 10}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "843405d3f725597ae4510df098de8a0fb81283c3", "author": {"user": {"login": "sharon-wang", "name": "Sharon Wang"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/843405d3f725597ae4510df098de8a0fb81283c3", "committedDate": "2020-03-23T17:01:46Z", "message": "Remove BytecodeInterpreter.cpp and only compile Full/Compressed versions\n\nRename BytecodeInterpreter.cpp to BytecodeInterpreter.inc and only\ncompile BytecodeInterpreterFull.cpp and BytecodeInterpreterCompressed.cpp\n\nMove bytecode LOOP_NAME definitions from BytecodeInterpreter.inc and\nINTERPRETER_CLASS definitions into individual wrapper files (Debug, Full\nand Compressed).\n\nSigned-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>"}, "afterCommit": {"oid": "7dbd86a95f670600c97321e9e3d1da0d0f2a7ef9", "author": {"user": {"login": "sharon-wang", "name": "Sharon Wang"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/7dbd86a95f670600c97321e9e3d1da0d0f2a7ef9", "committedDate": "2020-03-23T17:21:28Z", "message": "Remove BytecodeInterpreter.cpp and only compile Full/Compressed versions\n\nRename BytecodeInterpreter.cpp to BytecodeInterpreter.inc and only\ncompile BytecodeInterpreterFull.cpp and BytecodeInterpreterCompressed.cpp\n\nMove bytecode LOOP_NAME definitions from BytecodeInterpreter.inc and\nINTERPRETER_CLASS definitions into individual wrapper files (Debug, Full\nand Compressed).\n\nSigned-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5ODIzNDU3", "url": "https://github.com/eclipse-openj9/openj9/pull/8936#pullrequestreview-379823457", "createdAt": "2020-03-23T21:08:09Z", "commit": {"oid": "7dbd86a95f670600c97321e9e3d1da0d0f2a7ef9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMTowODowOVrOF6YKYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMTowODowOVrOF6YKYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc1NzYwMg==", "bodyText": "This needs to be J9JAVAVM_COMPRESS_OBJECT_REFERENCES(vm)", "url": "https://github.com/eclipse-openj9/openj9/pull/8936#discussion_r396757602", "createdAt": "2020-03-23T21:08:09Z", "author": {"login": "gacholio"}, "path": "runtime/vm/jvminit.c", "diffHunk": "@@ -2452,9 +2452,19 @@ IDATA VMInitStages(J9JavaVM *vm, IDATA stage, void* reserved) {\n #endif /* J9VM_INTERP_ATOMIC_FREE_JNI_USES_FLUSH */\n \t\t\tTRIGGER_J9HOOK_VM_ABOUT_TO_BOOTSTRAP(vm->hookInterface, vm->mainThread);\n \t\t\t/* At this point, the decision about which interpreter to use has been made */\n-\t\t\tvm->bytecodeLoop = J9_ARE_ANY_BITS_SET(vm->extendedRuntimeFlags, J9_EXTENDED_RUNTIME_DEBUG_MODE)\n-\t\t\t\t\t? (void*)debugBytecodeLoop\n-\t\t\t\t\t: (void*)bytecodeLoop;\n+\t\t\tif (J9_ARE_ANY_BITS_SET(vm->extendedRuntimeFlags, J9_EXTENDED_RUNTIME_DEBUG_MODE)) {\n+\t\t\t\tvm->bytecodeLoop = (void*)debugBytecodeLoop;\n+\t\t\t} else {\n+\t\t\t\tif (J9VMTHREAD_COMPRESS_OBJECT_REFERENCES(vmThread)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dbd86a95f670600c97321e9e3d1da0d0f2a7ef9"}, "originalPosition": 10}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7dbd86a95f670600c97321e9e3d1da0d0f2a7ef9", "author": {"user": {"login": "sharon-wang", "name": "Sharon Wang"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/7dbd86a95f670600c97321e9e3d1da0d0f2a7ef9", "committedDate": "2020-03-23T17:21:28Z", "message": "Remove BytecodeInterpreter.cpp and only compile Full/Compressed versions\n\nRename BytecodeInterpreter.cpp to BytecodeInterpreter.inc and only\ncompile BytecodeInterpreterFull.cpp and BytecodeInterpreterCompressed.cpp\n\nMove bytecode LOOP_NAME definitions from BytecodeInterpreter.inc and\nINTERPRETER_CLASS definitions into individual wrapper files (Debug, Full\nand Compressed).\n\nSigned-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>"}, "afterCommit": {"oid": "b07f31c347784fb12ced1f5e1cd1603c7ca6b65a", "author": {"user": {"login": "sharon-wang", "name": "Sharon Wang"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/b07f31c347784fb12ced1f5e1cd1603c7ca6b65a", "committedDate": "2020-03-23T21:14:13Z", "message": "Implement compressed refs override and split BytecodeInterpreter\n\nAdd new override macro J9_OVERRIDE_COMPRESS_OBJECT_REFERENCES.\n\nSplit BytecodeInterpreter.cpp into BytecodeInterpreterFull.cpp and\nBytecodeInterpreterCompressed.cpp.\n\nRename BytecodeInterpreter.cpp to BytecodeInterpreter.inc and only\ncompile BytecodeInterpreterFull.cpp and BytecodeInterpreterCompressed.cpp\n\nMove bytecode LOOP_NAME definitions from BytecodeInterpreter.inc and\nINTERPRETER_CLASS definitions into individual wrapper files (Debug, Full\nand Compressed).\n\nIn BytecodeInterpreterFull.cpp and BytecodeInterpreterCompressed.cpp,\ndefine the override macro as:\n    TRUE if OMR_GC_COMPRESSED_POINTERS is defined\n    FALSE if OMR_GC_FULL_POINTERS is defined\n\nIf the override macro is defined, set J9VMTHREAD_COMPRESS_OBJECT_REFERENCES\nand J9JAVAVM_COMPRESS_OBJECT_REFERENCES to be the same value as the override macro.\n\nSigned-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b07f31c347784fb12ced1f5e1cd1603c7ca6b65a", "author": {"user": {"login": "sharon-wang", "name": "Sharon Wang"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/b07f31c347784fb12ced1f5e1cd1603c7ca6b65a", "committedDate": "2020-03-23T21:14:13Z", "message": "Implement compressed refs override and split BytecodeInterpreter\n\nAdd new override macro J9_OVERRIDE_COMPRESS_OBJECT_REFERENCES.\n\nSplit BytecodeInterpreter.cpp into BytecodeInterpreterFull.cpp and\nBytecodeInterpreterCompressed.cpp.\n\nRename BytecodeInterpreter.cpp to BytecodeInterpreter.inc and only\ncompile BytecodeInterpreterFull.cpp and BytecodeInterpreterCompressed.cpp\n\nMove bytecode LOOP_NAME definitions from BytecodeInterpreter.inc and\nINTERPRETER_CLASS definitions into individual wrapper files (Debug, Full\nand Compressed).\n\nIn BytecodeInterpreterFull.cpp and BytecodeInterpreterCompressed.cpp,\ndefine the override macro as:\n    TRUE if OMR_GC_COMPRESSED_POINTERS is defined\n    FALSE if OMR_GC_FULL_POINTERS is defined\n\nIf the override macro is defined, set J9VMTHREAD_COMPRESS_OBJECT_REFERENCES\nand J9JAVAVM_COMPRESS_OBJECT_REFERENCES to be the same value as the override macro.\n\nSigned-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>"}, "afterCommit": {"oid": "042630bce26ea6a2667efe2f105cf75d5d6a5dcf", "author": {"user": {"login": "sharon-wang", "name": "Sharon Wang"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/042630bce26ea6a2667efe2f105cf75d5d6a5dcf", "committedDate": "2020-04-08T20:04:27Z", "message": "Split BytecodeInterpreter included class names into Full/Compressed\n\nClasses included by BytecodeInterpreter may use (directly or indirectly)\nthe COMPRESS_OBJECT_REFERENCES macros in inline functions. Class names\nfor these classes need to be split into <CLASS_NAME>Full and <CLASS_NAME>Compressed\nto differentiate between the functions, so that the one definition rule is not violated.\nViolation of the one definition rule results in undefined behaviour which is not easy\nto track down.\n\nUse undefineobjectreferencesmacros.h and objectreferencesmacros.h to check if files need to be split into Full and Compressed.\n\nSplit VMHelpers, ObjectHash, UnsafeAPI, ArrayCopyHelpers into Full/Compressed\n\nSigned-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "042630bce26ea6a2667efe2f105cf75d5d6a5dcf", "author": {"user": {"login": "sharon-wang", "name": "Sharon Wang"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/042630bce26ea6a2667efe2f105cf75d5d6a5dcf", "committedDate": "2020-04-08T20:04:27Z", "message": "Split BytecodeInterpreter included class names into Full/Compressed\n\nClasses included by BytecodeInterpreter may use (directly or indirectly)\nthe COMPRESS_OBJECT_REFERENCES macros in inline functions. Class names\nfor these classes need to be split into <CLASS_NAME>Full and <CLASS_NAME>Compressed\nto differentiate between the functions, so that the one definition rule is not violated.\nViolation of the one definition rule results in undefined behaviour which is not easy\nto track down.\n\nUse undefineobjectreferencesmacros.h and objectreferencesmacros.h to check if files need to be split into Full and Compressed.\n\nSplit VMHelpers, ObjectHash, UnsafeAPI, ArrayCopyHelpers into Full/Compressed\n\nSigned-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>"}, "afterCommit": {"oid": "a30cd515b6a86c843f307793973bf438c85a7695", "author": {"user": {"login": "sharon-wang", "name": "Sharon Wang"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/a30cd515b6a86c843f307793973bf438c85a7695", "committedDate": "2020-04-08T20:20:07Z", "message": "Split BytecodeInterpreter included class names into Full/Compressed\n\nClasses included by BytecodeInterpreter may use (directly or indirectly)\nthe COMPRESS_OBJECT_REFERENCES macros in inline functions. Class names\nfor these classes need to be split into <CLASS_NAME>Full and <CLASS_NAME>Compressed\nto differentiate between the functions, so that the one definition rule is not violated.\nViolation of the one definition rule results in undefined behaviour which is not easy\nto track down.\n\nUse objectreferencesmacros_define.h and objectreferencesmacros_undefine.h to check if files need to be split into Full and Compressed.\n\nSplit VMHelpers, ObjectHash, UnsafeAPI, ArrayCopyHelpers into Full/Compressed\n\nSigned-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwMzEyODU3", "url": "https://github.com/eclipse-openj9/openj9/pull/8936#pullrequestreview-390312857", "createdAt": "2020-04-08T20:37:19Z", "commit": {"oid": "a30cd515b6a86c843f307793973bf438c85a7695"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMDozNzoxOVrOGDAA-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMDo1NDoyOVrOGDAmZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc5OTE2Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #if (J9_OVERRIDE_COMPRESS_OBJECT_REFERENCES)\n          \n          \n            \n            #if J9_OVERRIDE_COMPRESS_OBJECT_REFERENCES", "url": "https://github.com/eclipse-openj9/openj9/pull/8936#discussion_r405799162", "createdAt": "2020-04-08T20:37:19Z", "author": {"login": "rwy0717"}, "path": "runtime/oti/ArrayCopyHelpers.hpp", "diffHunk": "@@ -51,6 +51,14 @@\n typedef long long I_128 __attribute__ ((__vector_size__ (16)));\n #endif\n \n+#if defined(J9_OVERRIDE_COMPRESS_OBJECT_REFERENCES)\n+#if (J9_OVERRIDE_COMPRESS_OBJECT_REFERENCES)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a30cd515b6a86c843f307793973bf438c85a7695"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc5OTMxMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #if (J9_OVERRIDE_COMPRESS_OBJECT_REFERENCES)\n          \n          \n            \n            #if J9_OVERRIDE_COMPRESS_OBJECT_REFERENCES", "url": "https://github.com/eclipse-openj9/openj9/pull/8936#discussion_r405799311", "createdAt": "2020-04-08T20:37:37Z", "author": {"login": "rwy0717"}, "path": "runtime/oti/ObjectHash.hpp", "diffHunk": "@@ -29,6 +29,14 @@\n #include \"AtomicSupport.hpp\"\n #include \"VMHelpers.hpp\"\n \n+#if defined(J9_OVERRIDE_COMPRESS_OBJECT_REFERENCES)\n+#if (J9_OVERRIDE_COMPRESS_OBJECT_REFERENCES)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a30cd515b6a86c843f307793973bf438c85a7695"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwMDYwNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #define J9VMTHREAD_COMPRESS_OBJECT_REFERENCES(vmThread) (J9_OVERRIDE_COMPRESS_OBJECT_REFERENCES ? TRUE : FALSE)\n          \n          \n            \n            #define J9VMTHREAD_COMPRESS_OBJECT_REFERENCES(vmThread) J9_OVERRIDE_COMPRESS_OBJECT_REFERENCES", "url": "https://github.com/eclipse-openj9/openj9/pull/8936#discussion_r405800605", "createdAt": "2020-04-08T20:39:57Z", "author": {"login": "rwy0717"}, "path": "runtime/oti/objectreferencesmacros_define.h", "diffHunk": "@@ -0,0 +1,44 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+\n+#include \"j9nonbuilder.h\"\n+\n+#if defined(OMR_GC_COMPRESSED_POINTERS)\n+#if defined(OMR_GC_FULL_POINTERS)\n+/* Mixed mode - necessarily 64-bit */\n+#if defined(J9_OVERRIDE_COMPRESS_OBJECT_REFERENCES)\n+#define J9VMTHREAD_COMPRESS_OBJECT_REFERENCES(vmThread) (J9_OVERRIDE_COMPRESS_OBJECT_REFERENCES ? TRUE : FALSE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a30cd515b6a86c843f307793973bf438c85a7695"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwMDgyNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #define J9JAVAVM_COMPRESS_OBJECT_REFERENCES(vm) (J9_OVERRIDE_COMPRESS_OBJECT_REFERENCES ? TRUE : FALSE)\n          \n          \n            \n            #define J9JAVAVM_COMPRESS_OBJECT_REFERENCES(vm) J9_OVERRIDE_COMPRESS_OBJECT_REFERENCES", "url": "https://github.com/eclipse-openj9/openj9/pull/8936#discussion_r405800824", "createdAt": "2020-04-08T20:40:19Z", "author": {"login": "rwy0717"}, "path": "runtime/oti/objectreferencesmacros_define.h", "diffHunk": "@@ -0,0 +1,44 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+\n+#include \"j9nonbuilder.h\"\n+\n+#if defined(OMR_GC_COMPRESSED_POINTERS)\n+#if defined(OMR_GC_FULL_POINTERS)\n+/* Mixed mode - necessarily 64-bit */\n+#if defined(J9_OVERRIDE_COMPRESS_OBJECT_REFERENCES)\n+#define J9VMTHREAD_COMPRESS_OBJECT_REFERENCES(vmThread) (J9_OVERRIDE_COMPRESS_OBJECT_REFERENCES ? TRUE : FALSE)\n+#define J9JAVAVM_COMPRESS_OBJECT_REFERENCES(vm) (J9_OVERRIDE_COMPRESS_OBJECT_REFERENCES ? TRUE : FALSE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a30cd515b6a86c843f307793973bf438c85a7695"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwMzU0OQ==", "bodyText": "Ought to be under the compressed flag.", "url": "https://github.com/eclipse-openj9/openj9/pull/8936#discussion_r405803549", "createdAt": "2020-04-08T20:45:11Z", "author": {"login": "rwy0717"}, "path": "runtime/oti/vm_api.h", "diffHunk": "@@ -4090,15 +4090,25 @@ typedef enum {\n void*\n J9_GetInterface(J9_INTERFACE_SELECTOR interfaceSelector, J9PortLibrary* portLib, void *userData);\n \n-/* -------------------- BytecodeInterpreter.cpp ------------ */\n+/* -------------------- BytecodeInterpreterFull.cpp ------------ */\n \n /**\n-* @brief Execute the bytecode loop\n+* @brief Execute the bytecode loop (full pointers)\n+* @param currentThread\n+* @return UDATA the action to take upon return to the builder interpreter\n+*/\n+UDATA\n+bytecodeLoopFull(J9VMThread *currentThread);\n+\n+/* -------------------- BytecodeInterpreterCompressed.cpp ------------ */\n+\n+/**\n+* @brief Execute the bytecode loop (compressed pointers)\n * @param currentThread\n * @return UDATA the action to take upon return to the builder interpreter\n */\n UDATA  \n-bytecodeLoop(J9VMThread *currentThread);\n+bytecodeLoopCompressed(J9VMThread *currentThread);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a30cd515b6a86c843f307793973bf438c85a7695"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwMzY5Nw==", "bodyText": "Ought to be under the full flag.", "url": "https://github.com/eclipse-openj9/openj9/pull/8936#discussion_r405803697", "createdAt": "2020-04-08T20:45:27Z", "author": {"login": "rwy0717"}, "path": "runtime/oti/vm_api.h", "diffHunk": "@@ -4090,15 +4090,25 @@ typedef enum {\n void*\n J9_GetInterface(J9_INTERFACE_SELECTOR interfaceSelector, J9PortLibrary* portLib, void *userData);\n \n-/* -------------------- BytecodeInterpreter.cpp ------------ */\n+/* -------------------- BytecodeInterpreterFull.cpp ------------ */\n \n /**\n-* @brief Execute the bytecode loop\n+* @brief Execute the bytecode loop (full pointers)\n+* @param currentThread\n+* @return UDATA the action to take upon return to the builder interpreter\n+*/\n+UDATA\n+bytecodeLoopFull(J9VMThread *currentThread);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a30cd515b6a86c843f307793973bf438c85a7695"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwNDEzMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #if (J9_OVERRIDE_COMPRESS_OBJECT_REFERENCES)\n          \n          \n            \n            #if J9_OVERRIDE_COMPRESS_OBJECT_REFERENCES", "url": "https://github.com/eclipse-openj9/openj9/pull/8936#discussion_r405804130", "createdAt": "2020-04-08T20:46:14Z", "author": {"login": "rwy0717"}, "path": "runtime/oti/UnsafeAPI.hpp", "diffHunk": "@@ -30,6 +30,14 @@\n #include \"VMHelpers.hpp\"\n #include \"AtomicSupport.hpp\"\n \n+#if defined(J9_OVERRIDE_COMPRESS_OBJECT_REFERENCES)\n+#if (J9_OVERRIDE_COMPRESS_OBJECT_REFERENCES)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a30cd515b6a86c843f307793973bf438c85a7695"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwNDM0Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #if (J9_OVERRIDE_COMPRESS_OBJECT_REFERENCES)\n          \n          \n            \n            #if J9_OVERRIDE_COMPRESS_OBJECT_REFERENCES", "url": "https://github.com/eclipse-openj9/openj9/pull/8936#discussion_r405804347", "createdAt": "2020-04-08T20:46:33Z", "author": {"login": "rwy0717"}, "path": "runtime/oti/ObjectMonitor.hpp", "diffHunk": "@@ -33,6 +33,14 @@\n \n #include \"AtomicSupport.hpp\"\n \n+#if defined(J9_OVERRIDE_COMPRESS_OBJECT_REFERENCES)\n+#if (J9_OVERRIDE_COMPRESS_OBJECT_REFERENCES)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a30cd515b6a86c843f307793973bf438c85a7695"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwODExMA==", "bodyText": "Eventually, it would be cleaner to simply not compile these sources, when their code is disabled, since osx complains about empty object files.", "url": "https://github.com/eclipse-openj9/openj9/pull/8936#discussion_r405808110", "createdAt": "2020-04-08T20:53:22Z", "author": {"login": "rwy0717"}, "path": "runtime/makelib/targets.mk.ftl", "diffHunk": "@@ -557,7 +560,10 @@ NEW_OPTIMIZATION_FLAG+=-qmaxmem=-1 -qpic\n </#if>\n SPECIALCXXFLAGS=$(filter-out $(FLAGS_TO_REMOVE),$(CXXFLAGS))\n \n-BytecodeInterpreter$(UMA_DOT_O):BytecodeInterpreter.cpp\n+BytecodeInterpreterFull$(UMA_DOT_O):BytecodeInterpreterFull.cpp\n+\t$(CXX) $(SPECIALCXXFLAGS) $(NEW_OPTIMIZATION_FLAG) -c $<\n+\n+BytecodeInterpreterCompressed$(UMA_DOT_O):BytecodeInterpreterCompressed.cpp\n \t$(CXX) $(SPECIALCXXFLAGS) $(NEW_OPTIMIZATION_FLAG) -c $<", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a30cd515b6a86c843f307793973bf438c85a7695"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwODc0MQ==", "bodyText": "I think it would be more appropriate to make this (and it's complement) a .inc file.", "url": "https://github.com/eclipse-openj9/openj9/pull/8936#discussion_r405808741", "createdAt": "2020-04-08T20:54:29Z", "author": {"login": "rwy0717"}, "path": "runtime/oti/VMAccess.hpp", "diffHunk": "@@ -35,6 +35,8 @@\n #define J9_EXCLUSIVE_SLOW_REASON_JNICRITICAL 1\n #define J9_EXCLUSIVE_SLOW_REASON_EXCLUSIVE   2\n \n+#include \"objectreferencesmacros_undefine.h\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a30cd515b6a86c843f307793973bf438c85a7695"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMDUzNjU2", "url": "https://github.com/eclipse-openj9/openj9/pull/8936#pullrequestreview-391053656", "createdAt": "2020-04-09T19:00:03Z", "commit": {"oid": "a30cd515b6a86c843f307793973bf438c85a7695"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxOTowMDowNFrOGDlg_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxOTowMDowNFrOGDlg_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQxMzU2Nw==", "bodyText": "I think you must include j9nonbuilder.h here so that future includes do not redefine the macros (the header gate will prevent it, and we can't have one here).", "url": "https://github.com/eclipse-openj9/openj9/pull/8936#discussion_r406413567", "createdAt": "2020-04-09T19:00:04Z", "author": {"login": "gacholio"}, "path": "runtime/oti/objectreferencesmacros_undefine.h", "diffHunk": "@@ -0,0 +1,24 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a30cd515b6a86c843f307793973bf438c85a7695"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMDU4NjEy", "url": "https://github.com/eclipse-openj9/openj9/pull/8936#pullrequestreview-391058612", "createdAt": "2020-04-09T19:07:39Z", "commit": {"oid": "a30cd515b6a86c843f307793973bf438c85a7695"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxOTowNzozOVrOGDlwOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxOTowNzozOVrOGDlwOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQxNzQ2Nw==", "bodyText": "I believe this should be removed - it works because of the header gate in j9nonbuilder.h, but if we move the include to the _undefine file, it won't be necessary here.", "url": "https://github.com/eclipse-openj9/openj9/pull/8936#discussion_r406417467", "createdAt": "2020-04-09T19:07:39Z", "author": {"login": "gacholio"}, "path": "runtime/oti/objectreferencesmacros_define.h", "diffHunk": "@@ -0,0 +1,44 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+\n+#include \"j9nonbuilder.h\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a30cd515b6a86c843f307793973bf438c85a7695"}, "originalPosition": 23}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a30cd515b6a86c843f307793973bf438c85a7695", "author": {"user": {"login": "sharon-wang", "name": "Sharon Wang"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/a30cd515b6a86c843f307793973bf438c85a7695", "committedDate": "2020-04-08T20:20:07Z", "message": "Split BytecodeInterpreter included class names into Full/Compressed\n\nClasses included by BytecodeInterpreter may use (directly or indirectly)\nthe COMPRESS_OBJECT_REFERENCES macros in inline functions. Class names\nfor these classes need to be split into <CLASS_NAME>Full and <CLASS_NAME>Compressed\nto differentiate between the functions, so that the one definition rule is not violated.\nViolation of the one definition rule results in undefined behaviour which is not easy\nto track down.\n\nUse objectreferencesmacros_define.h and objectreferencesmacros_undefine.h to check if files need to be split into Full and Compressed.\n\nSplit VMHelpers, ObjectHash, UnsafeAPI, ArrayCopyHelpers into Full/Compressed\n\nSigned-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>"}, "afterCommit": {"oid": "c293083f363421e50b0dc48d8119d7310a81abdc", "author": {"user": {"login": "sharon-wang", "name": "Sharon Wang"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/c293083f363421e50b0dc48d8119d7310a81abdc", "committedDate": "2020-04-15T15:33:33Z", "message": "Move bytecodeLoop prototypes from vm_api.h to jvminit.c\n\nSigned-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c293083f363421e50b0dc48d8119d7310a81abdc", "author": {"user": {"login": "sharon-wang", "name": "Sharon Wang"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/c293083f363421e50b0dc48d8119d7310a81abdc", "committedDate": "2020-04-15T15:33:33Z", "message": "Move bytecodeLoop prototypes from vm_api.h to jvminit.c\n\nSigned-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>"}, "afterCommit": {"oid": "9d61aa7a3a854c16448fb69081d1ce23c74f1e10", "author": {"user": {"login": "sharon-wang", "name": "Sharon Wang"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/9d61aa7a3a854c16448fb69081d1ce23c74f1e10", "committedDate": "2020-04-15T15:42:59Z", "message": "Move bytecodeLoop prototypes from vm_api.h to jvminit.c\n\nSigned-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9d61aa7a3a854c16448fb69081d1ce23c74f1e10", "author": {"user": {"login": "sharon-wang", "name": "Sharon Wang"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/9d61aa7a3a854c16448fb69081d1ce23c74f1e10", "committedDate": "2020-04-15T15:42:59Z", "message": "Move bytecodeLoop prototypes from vm_api.h to jvminit.c\n\nSigned-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>"}, "afterCommit": {"oid": "9b365dfc43b13f7c2f45b4bdb605801c7f9121b0", "author": {"user": {"login": "sharon-wang", "name": "Sharon Wang"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/9b365dfc43b13f7c2f45b4bdb605801c7f9121b0", "committedDate": "2020-04-16T15:23:01Z", "message": "Add dummy define in split files to avoid OSX compile issue\n\nOSX complains about empty object files. As a temporary solution, #define LOOP_NAME 0 so that these files will not be empty when their ifdeffed code is not included.\n\nTo actually address this problem, these files should not be compiled if their code is disabled. Work will need to be done in makefiles, i.e. runtime/makelib/targets.mk.ftl, to skip compiling the appropriate files.\n\nFlags in omrcfg.h, i.e. OMR_GC_COMPRESSED_POINTERS and OMR_GC_FULL_POINTERS would be helpful in identifying which files should be compiled. Need to look into if these can be accessed in OpenJ9 makefiles or if there is an OpenJ9 equivalent to the flags.\n\nSigned-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9b365dfc43b13f7c2f45b4bdb605801c7f9121b0", "author": {"user": {"login": "sharon-wang", "name": "Sharon Wang"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/9b365dfc43b13f7c2f45b4bdb605801c7f9121b0", "committedDate": "2020-04-16T15:23:01Z", "message": "Add dummy define in split files to avoid OSX compile issue\n\nOSX complains about empty object files. As a temporary solution, #define LOOP_NAME 0 so that these files will not be empty when their ifdeffed code is not included.\n\nTo actually address this problem, these files should not be compiled if their code is disabled. Work will need to be done in makefiles, i.e. runtime/makelib/targets.mk.ftl, to skip compiling the appropriate files.\n\nFlags in omrcfg.h, i.e. OMR_GC_COMPRESSED_POINTERS and OMR_GC_FULL_POINTERS would be helpful in identifying which files should be compiled. Need to look into if these can be accessed in OpenJ9 makefiles or if there is an OpenJ9 equivalent to the flags.\n\nSigned-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>"}, "afterCommit": {"oid": "f5e0f15dee8bf805199b478aa826a4c16c2eae33", "author": {"user": {"login": "sharon-wang", "name": "Sharon Wang"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/f5e0f15dee8bf805199b478aa826a4c16c2eae33", "committedDate": "2020-04-16T15:33:29Z", "message": "Add dummy define in split files to avoid OSX compile issue\n\nOSX complains about empty object files. As a temporary solution, #define LOOP_NAME 0 so that these files will not be empty when their ifdeffed code is not included.\n\nTo actually address this problem, these files should not be compiled if their code is disabled. Work will need to be done in makefiles, i.e. runtime/makelib/targets.mk.ftl, to skip compiling the appropriate files.\n\nFlags in omrcfg.h, i.e. OMR_GC_COMPRESSED_POINTERS and OMR_GC_FULL_POINTERS would be helpful in identifying which files should be compiled. Need to look into if these can be accessed in OpenJ9 makefiles or if there is an OpenJ9 equivalent to the flags.\n\nSigned-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f5e0f15dee8bf805199b478aa826a4c16c2eae33", "author": {"user": {"login": "sharon-wang", "name": "Sharon Wang"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/f5e0f15dee8bf805199b478aa826a4c16c2eae33", "committedDate": "2020-04-16T15:33:29Z", "message": "Add dummy define in split files to avoid OSX compile issue\n\nOSX complains about empty object files. As a temporary solution, #define LOOP_NAME 0 so that these files will not be empty when their ifdeffed code is not included.\n\nTo actually address this problem, these files should not be compiled if their code is disabled. Work will need to be done in makefiles, i.e. runtime/makelib/targets.mk.ftl, to skip compiling the appropriate files.\n\nFlags in omrcfg.h, i.e. OMR_GC_COMPRESSED_POINTERS and OMR_GC_FULL_POINTERS would be helpful in identifying which files should be compiled. Need to look into if these can be accessed in OpenJ9 makefiles or if there is an OpenJ9 equivalent to the flags.\n\nSigned-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>"}, "afterCommit": {"oid": "78c23d89a83bf4b1892c5ea345e619df94a26899", "author": {"user": {"login": "sharon-wang", "name": "Sharon Wang"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/78c23d89a83bf4b1892c5ea345e619df94a26899", "committedDate": "2020-04-16T17:21:15Z", "message": "Add dummy define in split files to avoid OSX compile issue\n\nOSX complains about empty object files. As a temporary solution, #define LOOP_NAME 0 so that these files will not be empty when their ifdeffed code is not included.\n\nTo actually address this problem, these files should not be compiled if their code is disabled. Work will need to be done in makefiles, i.e. runtime/makelib/targets.mk.ftl, to skip compiling the appropriate files.\n\nFlags in omrcfg.h, i.e. OMR_GC_COMPRESSED_POINTERS and OMR_GC_FULL_POINTERS would be helpful in identifying which files should be compiled. Need to look into if these can be accessed in OpenJ9 makefiles or if there is an OpenJ9 equivalent to the flags.\n\nSigned-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0OTIxMDEy", "url": "https://github.com/eclipse-openj9/openj9/pull/8936#pullrequestreview-394921012", "createdAt": "2020-04-16T19:06:16Z", "commit": {"oid": "78c23d89a83bf4b1892c5ea345e619df94a26899"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "afa8db4e9a2de83542565ad37722d090d11efa3d", "author": {"user": {"login": "sharon-wang", "name": "Sharon Wang"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/afa8db4e9a2de83542565ad37722d090d11efa3d", "committedDate": "2020-04-16T19:09:29Z", "message": "Implement compressed refs override and split BytecodeInterpreter\n\nAdd new override macro J9_OVERRIDE_COMPRESS_OBJECT_REFERENCES.\n\nSplit BytecodeInterpreter.cpp into BytecodeInterpreterFull.cpp and BytecodeInterpreterCompressed.cpp.\n\nSplit DebugBytecodeInterpreter.cpp into DebugBytecodeInterpreterFull.cpp and DebugBytecodeInterpreterCompressed.cpp.\n\nIf the override macro is defined, set J9VMTHREAD_COMPRESS_OBJECT_REFERENCES and J9JAVAVM_COMPRESS_OBJECT_REFERENCES to be the same value as the override macro.\n\nSplit BytecodeInterpreter.hpp included class names: ArrayCopyHelpers, ObjectHash, ObjectMonitor, ObjectAccessBarrierAPI, ObjectAllocationAPI, UnsafeAPI, VMHelpers into Full/Compressed\n\nSigned-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "78c23d89a83bf4b1892c5ea345e619df94a26899", "author": {"user": {"login": "sharon-wang", "name": "Sharon Wang"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/78c23d89a83bf4b1892c5ea345e619df94a26899", "committedDate": "2020-04-16T17:21:15Z", "message": "Add dummy define in split files to avoid OSX compile issue\n\nOSX complains about empty object files. As a temporary solution, #define LOOP_NAME 0 so that these files will not be empty when their ifdeffed code is not included.\n\nTo actually address this problem, these files should not be compiled if their code is disabled. Work will need to be done in makefiles, i.e. runtime/makelib/targets.mk.ftl, to skip compiling the appropriate files.\n\nFlags in omrcfg.h, i.e. OMR_GC_COMPRESSED_POINTERS and OMR_GC_FULL_POINTERS would be helpful in identifying which files should be compiled. Need to look into if these can be accessed in OpenJ9 makefiles or if there is an OpenJ9 equivalent to the flags.\n\nSigned-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>"}, "afterCommit": {"oid": "afa8db4e9a2de83542565ad37722d090d11efa3d", "author": {"user": {"login": "sharon-wang", "name": "Sharon Wang"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/afa8db4e9a2de83542565ad37722d090d11efa3d", "committedDate": "2020-04-16T19:09:29Z", "message": "Implement compressed refs override and split BytecodeInterpreter\n\nAdd new override macro J9_OVERRIDE_COMPRESS_OBJECT_REFERENCES.\n\nSplit BytecodeInterpreter.cpp into BytecodeInterpreterFull.cpp and BytecodeInterpreterCompressed.cpp.\n\nSplit DebugBytecodeInterpreter.cpp into DebugBytecodeInterpreterFull.cpp and DebugBytecodeInterpreterCompressed.cpp.\n\nIf the override macro is defined, set J9VMTHREAD_COMPRESS_OBJECT_REFERENCES and J9JAVAVM_COMPRESS_OBJECT_REFERENCES to be the same value as the override macro.\n\nSplit BytecodeInterpreter.hpp included class names: ArrayCopyHelpers, ObjectHash, ObjectMonitor, ObjectAccessBarrierAPI, ObjectAllocationAPI, UnsafeAPI, VMHelpers into Full/Compressed\n\nSigned-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1298, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}