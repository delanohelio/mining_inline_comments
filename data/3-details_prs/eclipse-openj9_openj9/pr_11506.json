{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxOTgzMTg2", "number": 11506, "title": "Fix resolved trampoline reservation on JITServer", "bodyText": "Previously, we didn't have JITServer specific code\nfor handling method trampoline reservations because we assumed\nthat all methods can be called without trampolines.\nThis is true for x86, where code repository is enabled by default,\nbut leads to crashes on Power.\nThere are 2 types of method trampolines: resolved and unresolved,\ncorresponding to the types of method calls they enable.\nIn baseline JIT compilation (no JITServer, no AOT) we reserve\ntrampolines during codegen and they are patched during method execution.\nHowever, for AOT and JITServer reservation during codegen would not\nwork, since compiled code is executed by a different VM that doesn't\nhave trampolines reserved.\nAOT uses 2 relocation types to handle this:\n\n\nFor unresolved trampolines, we create a TR_Trampolines relocation.\nThis relocation is also added for JITServer compilations so this case\nis already handled.\n\n\nFor resolved trampolines, AOT only allows their use (and thus resolved\ncall dispatch) when SVM is enabled because TR_ResolvedTrampolines\nrelocation requires SVM. This is a problem for JITServer, since non-AOT\ncompilations do not use SVM and we don't want to use unresolved dispatch\nfor every call.\n\n\nThis commit keeps track of methods for which resolved trampoline is\nneeded during compilation on the server and sends the list to the client\nat the end of the compilation. Once the client receives compiled method\nand allocates code cache, it will reserve trampolines.", "createdAt": "2020-12-17T16:33:16Z", "url": "https://github.com/eclipse-openj9/openj9/pull/11506", "merged": true, "mergeCommit": {"oid": "e46c495183f9d9c88d6f6751c2fc540c3b552774"}, "closed": true, "closedAt": "2021-02-24T15:25:21Z", "author": {"login": "dmitry-ten"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdnH1xYgBqjQxMjY0Njc3OTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABd9A1jzgBqjQzNjY4MjE2MDk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0c033b3117550d1e53d05d6de06109a78ffcd551", "author": {"user": {"login": "dmitry-ten", "name": "Dmitry Ten"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/0c033b3117550d1e53d05d6de06109a78ffcd551", "committedDate": "2020-12-17T16:13:02Z", "message": "Fix resolved trampoline reservation on JITServer\n\nPreviously, we didn't have JITServer specific code\nfor handling method trampoline reservations because we assumed\nthat all methods can be called without trampolines.\nThis is true for x86, where code repository is enabled by default,\nbut leads to crashes on Power.\n\nThere are 2 types of method trampolines: resolved and unresolved,\ncorresponding to the types of method calls they enable.\nIn baseline JIT compilation (no JITServer, no AOT) we reserve\ntrampolines during codegen and they are patched during method execution.\nHowever, for AOT and JITServer reservation during codegen would not\nwork, since compiled code is executed by a different VM that doesn't\nhave trampolines reserved.\nAOT uses 2 relocation types to handle this:\n\n1. For unresolved trampolines, we create a `TR_Trampolines` relocation.\nThis relocation is also added for JITServer compilations so this case\nis already handled.\n\n2. For resolved trampolines, AOT only allows their use (and thus resolved\ncall dispatch) when SVM is enabled because `TR_ResolvedTrampolines`\nrelocation requires SVM. This is a problem for JITServer, since non-AOT\ncompilations do not use SVM and we don't want to use unresolved dispatch\nfor every call.\n\nThis commit keeps track of methods for which resolved trampoline is\nneeded during compilation on the server and sends the list to the client\nat the end of the compilation. Once the client receives compiled method\nand allocates code cache, it will reserve trampolines.\n\nSigned-off-by: Dmitry Ten <Dmitry.Ten@ibm.com>"}, "afterCommit": {"oid": "391d16213f48950b2adec492b5003d9695835737", "author": {"user": {"login": "dmitry-ten", "name": "Dmitry Ten"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/391d16213f48950b2adec492b5003d9695835737", "committedDate": "2020-12-17T18:28:16Z", "message": "Fix resolved trampoline reservation on JITServer\n\nPreviously, we didn't have JITServer specific code\nfor handling method trampoline reservations because we assumed\nthat all methods can be called without trampolines.\nThis is true for x86, where code repository is enabled by default,\nbut leads to crashes on Power.\n\nThere are 2 types of method trampolines: resolved and unresolved,\ncorresponding to the types of method calls they enable.\nIn baseline JIT compilation (no JITServer, no AOT) we reserve\ntrampolines during codegen and they are patched during method execution.\nHowever, for AOT and JITServer reservation during codegen would not\nwork, since compiled code is executed by a different VM that doesn't\nhave trampolines reserved.\nAOT uses 2 relocation types to handle this:\n\n1. For unresolved trampolines, we create a `TR_Trampolines` relocation.\nThis relocation is also added for JITServer compilations so this case\nis already handled.\n\n2. For resolved trampolines, AOT only allows their use (and thus resolved\ncall dispatch) when SVM is enabled because `TR_ResolvedTrampolines`\nrelocation requires SVM. This is a problem for JITServer, since non-AOT\ncompilations do not use SVM and we don't want to use unresolved dispatch\nfor every call.\n\nThis commit keeps track of methods for which resolved trampoline is\nneeded during compilation on the server and sends the list to the client\nat the end of the compilation. Once the client receives compiled method\nand allocates code cache, it will reserve trampolines.\n\nSigned-off-by: Dmitry Ten <Dmitry.Ten@ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "391d16213f48950b2adec492b5003d9695835737", "author": {"user": {"login": "dmitry-ten", "name": "Dmitry Ten"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/391d16213f48950b2adec492b5003d9695835737", "committedDate": "2020-12-17T18:28:16Z", "message": "Fix resolved trampoline reservation on JITServer\n\nPreviously, we didn't have JITServer specific code\nfor handling method trampoline reservations because we assumed\nthat all methods can be called without trampolines.\nThis is true for x86, where code repository is enabled by default,\nbut leads to crashes on Power.\n\nThere are 2 types of method trampolines: resolved and unresolved,\ncorresponding to the types of method calls they enable.\nIn baseline JIT compilation (no JITServer, no AOT) we reserve\ntrampolines during codegen and they are patched during method execution.\nHowever, for AOT and JITServer reservation during codegen would not\nwork, since compiled code is executed by a different VM that doesn't\nhave trampolines reserved.\nAOT uses 2 relocation types to handle this:\n\n1. For unresolved trampolines, we create a `TR_Trampolines` relocation.\nThis relocation is also added for JITServer compilations so this case\nis already handled.\n\n2. For resolved trampolines, AOT only allows their use (and thus resolved\ncall dispatch) when SVM is enabled because `TR_ResolvedTrampolines`\nrelocation requires SVM. This is a problem for JITServer, since non-AOT\ncompilations do not use SVM and we don't want to use unresolved dispatch\nfor every call.\n\nThis commit keeps track of methods for which resolved trampoline is\nneeded during compilation on the server and sends the list to the client\nat the end of the compilation. Once the client receives compiled method\nand allocates code cache, it will reserve trampolines.\n\nSigned-off-by: Dmitry Ten <Dmitry.Ten@ibm.com>"}, "afterCommit": {"oid": "e472263e3247d741b8974f7c6971cdc8ddedfba4", "author": {"user": {"login": "dmitry-ten", "name": "Dmitry Ten"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/e472263e3247d741b8974f7c6971cdc8ddedfba4", "committedDate": "2021-02-19T17:49:27Z", "message": "Fix resolved trampoline reservation on JITServer\n\nPreviously, we didn't have JITServer specific code\nfor handling method trampoline reservations because we assumed\nthat all methods can be called without trampolines.\nThis is true for x86, where code repository is enabled by default,\nbut leads to crashes on Power.\n\nThere are 2 types of method trampolines: resolved and unresolved,\ncorresponding to the types of method calls they enable.\nIn baseline JIT compilation (no JITServer, no AOT) we reserve\ntrampolines during codegen and they are patched during method execution.\nHowever, for AOT and JITServer reservation during codegen would not\nwork, since compiled code is executed by a different VM that doesn't\nhave trampolines reserved.\nAOT uses 2 relocation types to handle this:\n\n1. For unresolved trampolines, we create a `TR_Trampolines` relocation.\nThis relocation is also added for JITServer compilations so this case\nis already handled.\n\n2. For resolved trampolines, AOT only allows their use (and thus resolved\ncall dispatch) when SVM is enabled because `TR_ResolvedTrampolines`\nrelocation requires SVM. This is a problem for JITServer, since non-AOT\ncompilations do not use SVM and we don't want to use unresolved dispatch\nfor every call.\n\nThis commit keeps track of methods for which resolved trampoline is\nneeded during compilation on the server and sends the list to the client\nat the end of the compilation. Once the client receives compiled method\nand allocates code cache, it will reserve trampolines.\n\nSigned-off-by: Dmitry Ten <Dmitry.Ten@ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e472263e3247d741b8974f7c6971cdc8ddedfba4", "author": {"user": {"login": "dmitry-ten", "name": "Dmitry Ten"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/e472263e3247d741b8974f7c6971cdc8ddedfba4", "committedDate": "2021-02-19T17:49:27Z", "message": "Fix resolved trampoline reservation on JITServer\n\nPreviously, we didn't have JITServer specific code\nfor handling method trampoline reservations because we assumed\nthat all methods can be called without trampolines.\nThis is true for x86, where code repository is enabled by default,\nbut leads to crashes on Power.\n\nThere are 2 types of method trampolines: resolved and unresolved,\ncorresponding to the types of method calls they enable.\nIn baseline JIT compilation (no JITServer, no AOT) we reserve\ntrampolines during codegen and they are patched during method execution.\nHowever, for AOT and JITServer reservation during codegen would not\nwork, since compiled code is executed by a different VM that doesn't\nhave trampolines reserved.\nAOT uses 2 relocation types to handle this:\n\n1. For unresolved trampolines, we create a `TR_Trampolines` relocation.\nThis relocation is also added for JITServer compilations so this case\nis already handled.\n\n2. For resolved trampolines, AOT only allows their use (and thus resolved\ncall dispatch) when SVM is enabled because `TR_ResolvedTrampolines`\nrelocation requires SVM. This is a problem for JITServer, since non-AOT\ncompilations do not use SVM and we don't want to use unresolved dispatch\nfor every call.\n\nThis commit keeps track of methods for which resolved trampoline is\nneeded during compilation on the server and sends the list to the client\nat the end of the compilation. Once the client receives compiled method\nand allocates code cache, it will reserve trampolines.\n\nSigned-off-by: Dmitry Ten <Dmitry.Ten@ibm.com>"}, "afterCommit": {"oid": "9943e16a566ff448628b3303698e6ffe4338a2ae", "author": {"user": {"login": "dmitry-ten", "name": "Dmitry Ten"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/9943e16a566ff448628b3303698e6ffe4338a2ae", "committedDate": "2021-02-19T18:40:05Z", "message": "Fix resolved trampoline reservation on JITServer\n\nPreviously, we didn't have JITServer specific code\nfor handling method trampoline reservations because we assumed\nthat all methods can be called without trampolines.\nThis is true for x86, where code repository is enabled by default,\nbut leads to crashes on Power.\n\nThere are 2 types of method trampolines: resolved and unresolved,\ncorresponding to the types of method calls they enable.\nIn baseline JIT compilation (no JITServer, no AOT) we reserve\ntrampolines during codegen and they are patched during method execution.\nHowever, for AOT and JITServer reservation during codegen would not\nwork, since compiled code is executed by a different VM that doesn't\nhave trampolines reserved.\nAOT uses 2 relocation types to handle this:\n\n1. For unresolved trampolines, we create a `TR_Trampolines` relocation.\nThis relocation is also added for JITServer compilations so this case\nis already handled.\n\n2. For resolved trampolines, AOT only allows their use (and thus resolved\ncall dispatch) when SVM is enabled because `TR_ResolvedTrampolines`\nrelocation requires SVM. This is a problem for JITServer, since non-AOT\ncompilations do not use SVM and we don't want to use unresolved dispatch\nfor every call.\n\nThis commit keeps track of methods for which resolved trampoline is\nneeded during compilation on the server and sends the list to the client\nat the end of the compilation. Once the client receives compiled method\nand allocates code cache, it will reserve trampolines.\n\nSigned-off-by: Dmitry Ten <Dmitry.Ten@ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9943e16a566ff448628b3303698e6ffe4338a2ae", "author": {"user": {"login": "dmitry-ten", "name": "Dmitry Ten"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/9943e16a566ff448628b3303698e6ffe4338a2ae", "committedDate": "2021-02-19T18:40:05Z", "message": "Fix resolved trampoline reservation on JITServer\n\nPreviously, we didn't have JITServer specific code\nfor handling method trampoline reservations because we assumed\nthat all methods can be called without trampolines.\nThis is true for x86, where code repository is enabled by default,\nbut leads to crashes on Power.\n\nThere are 2 types of method trampolines: resolved and unresolved,\ncorresponding to the types of method calls they enable.\nIn baseline JIT compilation (no JITServer, no AOT) we reserve\ntrampolines during codegen and they are patched during method execution.\nHowever, for AOT and JITServer reservation during codegen would not\nwork, since compiled code is executed by a different VM that doesn't\nhave trampolines reserved.\nAOT uses 2 relocation types to handle this:\n\n1. For unresolved trampolines, we create a `TR_Trampolines` relocation.\nThis relocation is also added for JITServer compilations so this case\nis already handled.\n\n2. For resolved trampolines, AOT only allows their use (and thus resolved\ncall dispatch) when SVM is enabled because `TR_ResolvedTrampolines`\nrelocation requires SVM. This is a problem for JITServer, since non-AOT\ncompilations do not use SVM and we don't want to use unresolved dispatch\nfor every call.\n\nThis commit keeps track of methods for which resolved trampoline is\nneeded during compilation on the server and sends the list to the client\nat the end of the compilation. Once the client receives compiled method\nand allocates code cache, it will reserve trampolines.\n\nSigned-off-by: Dmitry Ten <Dmitry.Ten@ibm.com>"}, "afterCommit": {"oid": "9de844db539e7fa8208dd727cf8c458af9f98f26", "author": {"user": {"login": "dmitry-ten", "name": "Dmitry Ten"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/9de844db539e7fa8208dd727cf8c458af9f98f26", "committedDate": "2021-02-19T18:47:00Z", "message": "Fix resolved trampoline reservation on JITServer\n\nPreviously, we didn't have JITServer specific code\nfor handling method trampoline reservations because we assumed\nthat all methods can be called without trampolines.\nThis is true for x86, where code repository is enabled by default,\nbut leads to crashes on Power.\n\nThere are 2 types of method trampolines: resolved and unresolved,\ncorresponding to the types of method calls they enable.\nIn baseline JIT compilation (no JITServer, no AOT) we reserve\ntrampolines during codegen and they are patched during method execution.\nHowever, for AOT and JITServer reservation during codegen would not\nwork, since compiled code is executed by a different VM that doesn't\nhave trampolines reserved.\nAOT uses 2 relocation types to handle this:\n\n1. For unresolved trampolines, we create a `TR_Trampolines` relocation.\nThis relocation is also added for JITServer compilations so this case\nis already handled.\n\n2. For resolved trampolines, AOT only allows their use (and thus resolved\ncall dispatch) when SVM is enabled because `TR_ResolvedTrampolines`\nrelocation requires SVM. This is a problem for JITServer, since non-AOT\ncompilations do not use SVM and we don't want to use unresolved dispatch\nfor every call.\n\nThis commit keeps track of methods for which resolved trampoline is\nneeded during compilation on the server and sends the list to the client\nat the end of the compilation. Once the client receives compiled method\nand allocates code cache, it will reserve trampolines.\n\nSigned-off-by: Dmitry Ten <Dmitry.Ten@ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk0NjE0NjE2", "url": "https://github.com/eclipse-openj9/openj9/pull/11506#pullrequestreview-594614616", "createdAt": "2021-02-19T22:12:27Z", "commit": {"oid": "9de844db539e7fa8208dd727cf8c458af9f98f26"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xOVQyMjoxMjoyN1rOIoqOKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMFQwMDoyNjowNVrOIos_2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTUwNTcwNQ==", "bodyText": "Don' we have to dereference the iterator: *it ?", "url": "https://github.com/eclipse-openj9/openj9/pull/11506#discussion_r579505705", "createdAt": "2021-02-19T22:12:27Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/control/JITServerCompilationThread.cpp", "diffHunk": "@@ -148,13 +148,25 @@ outOfProcessCompilationEnd(\n \n    JITServer::ServerMemoryState memoryState = computeServerMemoryState(compInfoPT->getCompilationInfo());\n \n+   // Send methods requring resolved trampolines in this compilation to the client\n+   std::vector<TR_OpaqueMethodBlock *> methodsRequiringTrampolines;\n+   if (comp->getMethodsRequiringTrampolines().size() > 0)\n+      {\n+      methodsRequiringTrampolines.reserve(comp->getMethodsRequiringTrampolines().size());\n+      for (auto it : comp->getMethodsRequiringTrampolines())\n+         {\n+         methodsRequiringTrampolines.push_back(it);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9de844db539e7fa8208dd727cf8c458af9f98f26"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTU1MTE5NA==", "bodyText": "The generate code and the trampoline reservations need to stay in the same code cache. If we cannot reserve a trampoline here we need to take some corrective action, possibly leading to failing the compilation.\nif you look at how we reserve trampolines in the non-jitserver case you'll see it's quite complicated.", "url": "https://github.com/eclipse-openj9/openj9/pull/11506#discussion_r579551194", "createdAt": "2021-02-20T00:26:05Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/control/JITClientCompilationThread.cpp", "diffHunk": "@@ -3269,6 +3275,11 @@ remoteCompile(\n                   } // end switch (it->getKind())\n                }\n             metaData->runtimeAssumptionList = *(compiler->getMetadataAssumptionList());\n+\n+            for (auto& it : methodsRequiringTrampolines)\n+               {\n+               compInfoPT->reloRuntime()->codeCache()->reserveResolvedTrampoline(it, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9de844db539e7fa8208dd727cf8c458af9f98f26"}, "originalPosition": 50}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9de844db539e7fa8208dd727cf8c458af9f98f26", "author": {"user": {"login": "dmitry-ten", "name": "Dmitry Ten"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/9de844db539e7fa8208dd727cf8c458af9f98f26", "committedDate": "2021-02-19T18:47:00Z", "message": "Fix resolved trampoline reservation on JITServer\n\nPreviously, we didn't have JITServer specific code\nfor handling method trampoline reservations because we assumed\nthat all methods can be called without trampolines.\nThis is true for x86, where code repository is enabled by default,\nbut leads to crashes on Power.\n\nThere are 2 types of method trampolines: resolved and unresolved,\ncorresponding to the types of method calls they enable.\nIn baseline JIT compilation (no JITServer, no AOT) we reserve\ntrampolines during codegen and they are patched during method execution.\nHowever, for AOT and JITServer reservation during codegen would not\nwork, since compiled code is executed by a different VM that doesn't\nhave trampolines reserved.\nAOT uses 2 relocation types to handle this:\n\n1. For unresolved trampolines, we create a `TR_Trampolines` relocation.\nThis relocation is also added for JITServer compilations so this case\nis already handled.\n\n2. For resolved trampolines, AOT only allows their use (and thus resolved\ncall dispatch) when SVM is enabled because `TR_ResolvedTrampolines`\nrelocation requires SVM. This is a problem for JITServer, since non-AOT\ncompilations do not use SVM and we don't want to use unresolved dispatch\nfor every call.\n\nThis commit keeps track of methods for which resolved trampoline is\nneeded during compilation on the server and sends the list to the client\nat the end of the compilation. Once the client receives compiled method\nand allocates code cache, it will reserve trampolines.\n\nSigned-off-by: Dmitry Ten <Dmitry.Ten@ibm.com>"}, "afterCommit": {"oid": "a329856fd58d2ca0ea77a95f5d046b274cbcce9e", "author": {"user": {"login": "dmitry-ten", "name": "Dmitry Ten"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/a329856fd58d2ca0ea77a95f5d046b274cbcce9e", "committedDate": "2021-02-22T17:05:01Z", "message": "Fix resolved trampoline reservation on JITServer\n\nPreviously, we didn't have JITServer specific code\nfor handling method trampoline reservations because we assumed\nthat all methods can be called without trampolines.\nThis is true for x86, where code repository is enabled by default,\nbut leads to crashes on Power.\n\nThere are 2 types of method trampolines: resolved and unresolved,\ncorresponding to the types of method calls they enable.\nIn baseline JIT compilation (no JITServer, no AOT) we reserve\ntrampolines during codegen and they are patched during method execution.\nHowever, for AOT and JITServer reservation during codegen would not\nwork, since compiled code is executed by a different VM that doesn't\nhave trampolines reserved.\nAOT uses 2 relocation types to handle this:\n\n1. For unresolved trampolines, we create a `TR_Trampolines` relocation.\nThis relocation is also added for JITServer compilations so this case\nis already handled.\n\n2. For resolved trampolines, AOT only allows their use (and thus resolved\ncall dispatch) when SVM is enabled because `TR_ResolvedTrampolines`\nrelocation requires SVM. This is a problem for JITServer, since non-AOT\ncompilations do not use SVM and we don't want to use unresolved dispatch\nfor every call.\n\nThis commit keeps track of methods for which resolved trampoline is\nneeded during compilation on the server and sends the list to the client\nat the end of the compilation. Once the client receives compiled method\nand allocates code cache, it will reserve trampolines.\n\nSigned-off-by: Dmitry Ten <Dmitry.Ten@ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a329856fd58d2ca0ea77a95f5d046b274cbcce9e", "author": {"user": {"login": "dmitry-ten", "name": "Dmitry Ten"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/a329856fd58d2ca0ea77a95f5d046b274cbcce9e", "committedDate": "2021-02-22T17:05:01Z", "message": "Fix resolved trampoline reservation on JITServer\n\nPreviously, we didn't have JITServer specific code\nfor handling method trampoline reservations because we assumed\nthat all methods can be called without trampolines.\nThis is true for x86, where code repository is enabled by default,\nbut leads to crashes on Power.\n\nThere are 2 types of method trampolines: resolved and unresolved,\ncorresponding to the types of method calls they enable.\nIn baseline JIT compilation (no JITServer, no AOT) we reserve\ntrampolines during codegen and they are patched during method execution.\nHowever, for AOT and JITServer reservation during codegen would not\nwork, since compiled code is executed by a different VM that doesn't\nhave trampolines reserved.\nAOT uses 2 relocation types to handle this:\n\n1. For unresolved trampolines, we create a `TR_Trampolines` relocation.\nThis relocation is also added for JITServer compilations so this case\nis already handled.\n\n2. For resolved trampolines, AOT only allows their use (and thus resolved\ncall dispatch) when SVM is enabled because `TR_ResolvedTrampolines`\nrelocation requires SVM. This is a problem for JITServer, since non-AOT\ncompilations do not use SVM and we don't want to use unresolved dispatch\nfor every call.\n\nThis commit keeps track of methods for which resolved trampoline is\nneeded during compilation on the server and sends the list to the client\nat the end of the compilation. Once the client receives compiled method\nand allocates code cache, it will reserve trampolines.\n\nSigned-off-by: Dmitry Ten <Dmitry.Ten@ibm.com>"}, "afterCommit": {"oid": "66fe2a5a071c986e2e5e6048a00b16c30d202210", "author": {"user": {"login": "dmitry-ten", "name": "Dmitry Ten"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/66fe2a5a071c986e2e5e6048a00b16c30d202210", "committedDate": "2021-02-22T17:13:41Z", "message": "Fix resolved trampoline reservation on JITServer\n\nPreviously, we didn't have JITServer specific code\nfor handling method trampoline reservations because we assumed\nthat all methods can be called without trampolines.\nThis is true for x86, where code repository is enabled by default,\nbut leads to crashes on Power.\n\nThere are 2 types of method trampolines: resolved and unresolved,\ncorresponding to the types of method calls they enable.\nIn baseline JIT compilation (no JITServer, no AOT) we reserve\ntrampolines during codegen and they are patched during method execution.\nHowever, for AOT and JITServer reservation during codegen would not\nwork, since compiled code is executed by a different VM that doesn't\nhave trampolines reserved.\nAOT uses 2 relocation types to handle this:\n\n1. For unresolved trampolines, we create a `TR_Trampolines` relocation.\nThis relocation is also added for JITServer compilations so this case\nis already handled.\n\n2. For resolved trampolines, AOT only allows their use (and thus resolved\ncall dispatch) when SVM is enabled because `TR_ResolvedTrampolines`\nrelocation requires SVM. This is a problem for JITServer, since non-AOT\ncompilations do not use SVM and we don't want to use unresolved dispatch\nfor every call.\n\nThis commit keeps track of methods for which resolved trampoline is\nneeded during compilation on the server and sends the list to the client\nat the end of the compilation. Once the client receives compiled method\nand allocates code cache, it will reserve trampolines.\n\nSigned-off-by: Dmitry Ten <Dmitry.Ten@ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk1OTIwMzM0", "url": "https://github.com/eclipse-openj9/openj9/pull/11506#pullrequestreview-595920334", "createdAt": "2021-02-23T01:07:39Z", "commit": {"oid": "66fe2a5a071c986e2e5e6048a00b16c30d202210"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd1515105e98bd7b0139e431dc20b097c8f8e823", "author": {"user": {"login": "dmitry-ten", "name": "Dmitry Ten"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/cd1515105e98bd7b0139e431dc20b097c8f8e823", "committedDate": "2021-02-23T18:44:59Z", "message": "Fix resolved trampoline reservation on JITServer\n\nPreviously, we didn't have JITServer specific code\nfor handling method trampoline reservations because we assumed\nthat all methods can be called without trampolines.\nThis is true for x86, where code repository is enabled by default,\nbut leads to crashes on Power.\n\nThere are 2 types of method trampolines: resolved and unresolved,\ncorresponding to the types of method calls they enable.\nIn baseline JIT compilation (no JITServer, no AOT) we reserve\ntrampolines during codegen and they are patched during method execution.\nHowever, for AOT and JITServer reservation during codegen would not\nwork, since compiled code is executed by a different VM that doesn't\nhave trampolines reserved.\nAOT uses 2 relocation types to handle this:\n\n1. For unresolved trampolines, we create a `TR_Trampolines` relocation.\nThis relocation is also added for JITServer compilations so this case\nis already handled.\n\n2. For resolved trampolines, AOT only allows their use (and thus resolved\ncall dispatch) when SVM is enabled because `TR_ResolvedTrampolines`\nrelocation requires SVM. This is a problem for JITServer, since non-AOT\ncompilations do not use SVM and we don't want to use unresolved dispatch\nfor every call.\n\nThis commit keeps track of methods for which resolved trampoline is\nneeded during compilation on the server and sends the list to the client\nat the end of the compilation. Once the client receives compiled method\nand allocates code cache, it will reserve trampolines.\n\nSigned-off-by: Dmitry Ten <Dmitry.Ten@ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "66fe2a5a071c986e2e5e6048a00b16c30d202210", "author": {"user": {"login": "dmitry-ten", "name": "Dmitry Ten"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/66fe2a5a071c986e2e5e6048a00b16c30d202210", "committedDate": "2021-02-22T17:13:41Z", "message": "Fix resolved trampoline reservation on JITServer\n\nPreviously, we didn't have JITServer specific code\nfor handling method trampoline reservations because we assumed\nthat all methods can be called without trampolines.\nThis is true for x86, where code repository is enabled by default,\nbut leads to crashes on Power.\n\nThere are 2 types of method trampolines: resolved and unresolved,\ncorresponding to the types of method calls they enable.\nIn baseline JIT compilation (no JITServer, no AOT) we reserve\ntrampolines during codegen and they are patched during method execution.\nHowever, for AOT and JITServer reservation during codegen would not\nwork, since compiled code is executed by a different VM that doesn't\nhave trampolines reserved.\nAOT uses 2 relocation types to handle this:\n\n1. For unresolved trampolines, we create a `TR_Trampolines` relocation.\nThis relocation is also added for JITServer compilations so this case\nis already handled.\n\n2. For resolved trampolines, AOT only allows their use (and thus resolved\ncall dispatch) when SVM is enabled because `TR_ResolvedTrampolines`\nrelocation requires SVM. This is a problem for JITServer, since non-AOT\ncompilations do not use SVM and we don't want to use unresolved dispatch\nfor every call.\n\nThis commit keeps track of methods for which resolved trampoline is\nneeded during compilation on the server and sends the list to the client\nat the end of the compilation. Once the client receives compiled method\nand allocates code cache, it will reserve trampolines.\n\nSigned-off-by: Dmitry Ten <Dmitry.Ten@ibm.com>"}, "afterCommit": {"oid": "cd1515105e98bd7b0139e431dc20b097c8f8e823", "author": {"user": {"login": "dmitry-ten", "name": "Dmitry Ten"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/cd1515105e98bd7b0139e431dc20b097c8f8e823", "committedDate": "2021-02-23T18:44:59Z", "message": "Fix resolved trampoline reservation on JITServer\n\nPreviously, we didn't have JITServer specific code\nfor handling method trampoline reservations because we assumed\nthat all methods can be called without trampolines.\nThis is true for x86, where code repository is enabled by default,\nbut leads to crashes on Power.\n\nThere are 2 types of method trampolines: resolved and unresolved,\ncorresponding to the types of method calls they enable.\nIn baseline JIT compilation (no JITServer, no AOT) we reserve\ntrampolines during codegen and they are patched during method execution.\nHowever, for AOT and JITServer reservation during codegen would not\nwork, since compiled code is executed by a different VM that doesn't\nhave trampolines reserved.\nAOT uses 2 relocation types to handle this:\n\n1. For unresolved trampolines, we create a `TR_Trampolines` relocation.\nThis relocation is also added for JITServer compilations so this case\nis already handled.\n\n2. For resolved trampolines, AOT only allows their use (and thus resolved\ncall dispatch) when SVM is enabled because `TR_ResolvedTrampolines`\nrelocation requires SVM. This is a problem for JITServer, since non-AOT\ncompilations do not use SVM and we don't want to use unresolved dispatch\nfor every call.\n\nThis commit keeps track of methods for which resolved trampoline is\nneeded during compilation on the server and sends the list to the client\nat the end of the compilation. Once the client receives compiled method\nand allocates code cache, it will reserve trampolines.\n\nSigned-off-by: Dmitry Ten <Dmitry.Ten@ibm.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1524, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}