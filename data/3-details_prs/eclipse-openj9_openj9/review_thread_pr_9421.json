{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExODA4Mjc3", "number": 9421, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxODozMTo1NVrOD-V1Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxODo0ODowN1rOD-WU1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2Njk1OTk1OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/aarch64/env/J9CPU.cpp", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxODozMTo1NVrOGYYqEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxOToyNzo0NFrOGYau3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIyMjk5NQ==", "bodyText": "So compatibility requires a perfect match?", "url": "https://github.com/eclipse-openj9/openj9/pull/9421#discussion_r428222995", "createdAt": "2020-05-20T18:31:55Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/aarch64/env/J9CPU.cpp", "diffHunk": "@@ -39,7 +39,7 @@ CPU::getProcessorFeatureFlags()\n bool\n CPU::isCompatible(TR_Processor processorSignature, TR_ProcessorFeatureFlags processorFeatureFlags)\n    {\n-   return self()->is(processorSignature);\n+   return self()->id() == processorSignature;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfb66573b3c42709f42a6ef8a99c5a3ec69ba21c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI0ODg4Ng==", "bodyText": "This is aarch64 and that's how they implemented the compatibility.", "url": "https://github.com/eclipse-openj9/openj9/pull/9421#discussion_r428248886", "createdAt": "2020-05-20T19:12:31Z", "author": {"login": "harryyu1994"}, "path": "runtime/compiler/aarch64/env/J9CPU.cpp", "diffHunk": "@@ -39,7 +39,7 @@ CPU::getProcessorFeatureFlags()\n bool\n CPU::isCompatible(TR_Processor processorSignature, TR_ProcessorFeatureFlags processorFeatureFlags)\n    {\n-   return self()->is(processorSignature);\n+   return self()->id() == processorSignature;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIyMjk5NQ=="}, "originalCommit": {"oid": "cfb66573b3c42709f42a6ef8a99c5a3ec69ba21c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI1Njk4OA==", "bodyText": "What we are doing here is just to remove the old is() api. The compatibility functions will be re-written in a separate PR.\nThe reason we can't just change the compatibility function to use the new API now is because it is shared across all the platforms. Once all the platforms have the new api's then we can proceed to make them use the new api's.\nself()->is(processorSignature) is equivalent to self()->id() == processorSignature and that's the old api.", "url": "https://github.com/eclipse-openj9/openj9/pull/9421#discussion_r428256988", "createdAt": "2020-05-20T19:27:44Z", "author": {"login": "harryyu1994"}, "path": "runtime/compiler/aarch64/env/J9CPU.cpp", "diffHunk": "@@ -39,7 +39,7 @@ CPU::getProcessorFeatureFlags()\n bool\n CPU::isCompatible(TR_Processor processorSignature, TR_ProcessorFeatureFlags processorFeatureFlags)\n    {\n-   return self()->is(processorSignature);\n+   return self()->id() == processorSignature;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIyMjk5NQ=="}, "originalCommit": {"oid": "cfb66573b3c42709f42a6ef8a99c5a3ec69ba21c"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2Njk4MDEzOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/p/env/J9CPU.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxODozNTowN1rOGYY1WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxOTowOTowM1rOGYaHlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIyNTg4MA==", "bodyText": "I've just looked at a proposed PR that replaces TR::Compiler->target.cpu.id() >= TR_PPCp7; with TR::Compiler->target.cpu.isAtLeast(TR_PPCp7);\nThis PR seems to be doing the opposite", "url": "https://github.com/eclipse-openj9/openj9/pull/9421#discussion_r428225880", "createdAt": "2020-05-20T18:35:07Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/p/env/J9CPU.cpp", "diffHunk": "@@ -93,7 +93,7 @@ CPU::hasPopulationCountInstruction()\n #if defined(J9OS_I5)\n    return false;\n #else\n-   return TR::Compiler->target.cpu.isAtLeast(TR_PPCp7);\n+   return TR::Compiler->target.cpu.id() >= TR_PPCp7;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfb66573b3c42709f42a6ef8a99c5a3ec69ba21c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI0NjkzNQ==", "bodyText": "isAtLeast() takes in an enum, we have a new api isAtLeast() that takes in the new processor enum type and an old api isAtLeast() that takes in the old processor enum type. Certain compilers with certain platform don't seem to distinguish between enums so they will treat the two as the same function and complain there is a function name clash. To solve this, I need to get rid of the old isAtLeast() api. And this was the one of the only places that still uses the old api. So this change is to remove the old api and make sure it doesn't break the build.\nOnce that PR is merged, this change will get overwritten by the Power changes.", "url": "https://github.com/eclipse-openj9/openj9/pull/9421#discussion_r428246935", "createdAt": "2020-05-20T19:09:03Z", "author": {"login": "harryyu1994"}, "path": "runtime/compiler/p/env/J9CPU.cpp", "diffHunk": "@@ -93,7 +93,7 @@ CPU::hasPopulationCountInstruction()\n #if defined(J9OS_I5)\n    return false;\n #else\n-   return TR::Compiler->target.cpu.isAtLeast(TR_PPCp7);\n+   return TR::Compiler->target.cpu.id() >= TR_PPCp7;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIyNTg4MA=="}, "originalCommit": {"oid": "cfb66573b3c42709f42a6ef8a99c5a3ec69ba21c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NzAyNDM2OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/x/codegen/AllocPrefetchSnippet.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxODo0MzozM1rOGYZPIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxOToxMTo1M1rOGYaN8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIzMjQ4MA==", "bodyText": "Do we have comp() object somewhere handy so that we can avoid the TLS lookup?", "url": "https://github.com/eclipse-openj9/openj9/pull/9421#discussion_r428232480", "createdAt": "2020-05-20T18:43:33Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/x/codegen/AllocPrefetchSnippet.cpp", "diffHunk": "@@ -232,8 +232,9 @@ uint8_t* TR::X86AllocPrefetchSnippet::emitSharedBody(uint8_t* prefetchSnippetBuf\n    //\n    for (int32_t lineOffset = 0; lineOffset < numLines; ++lineOffset)\n       {\n+      TR_ASSERT(TR::CodeGenerator::getX86ProcessorInfo().isAMD15h() == TR::comp()->target().cpu.is(OMR_PROCESSOR_X86_AMDFAMILY15H), \"OMR_PROCESSOR_X86_AMDFAMILY15H\\n\");\n       prefetchSnippetBuffer[0] = 0x0F;\n-      if (cpuInfo.isAMD15h())\n+      if (TR::comp()->target().cpu.is(OMR_PROCESSOR_X86_AMDFAMILY15H))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfb66573b3c42709f42a6ef8a99c5a3ec69ba21c"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI0ODU2MA==", "bodyText": "Its caller has a cg pointer that can be passed to this function. I'll make that change.\nvoid TR::createCCPreLoadedCode(uint8_t *CCPreLoadedCodeBase, uint8_t *CCPreLoadedCodeTop, void ** CCPreLoadedCodeTable, TR::CodeGenerator *cg)\n   {\n   uint8_t *cursor = CCPreLoadedCodeBase;\n\n   CCPreLoadedCodeTable[TR_CCPreLoadedCode::TR_AllocPrefetch] = static_cast<void *>(cursor);\n   if (cg->comp()->target().is64Bit())\n      cursor = TR::X86AllocPrefetchSnippet::emitSharedBody<TR::HeapTypes::ZeroedHeap, true>(cursor);\n   else\n      cursor = TR::X86AllocPrefetchSnippet::emitSharedBody<TR::HeapTypes::ZeroedHeap, false>(cursor);\n\n   cursor = static_cast<uint8_t *>( TR::alignAllocation<32>(cursor) );\n\n   CCPreLoadedCodeTable[TR_CCPreLoadedCode::TR_NonZeroAllocPrefetch] = static_cast<void *>(cursor);\n   if (cg->comp()->target().is64Bit())\n      cursor = TR::X86AllocPrefetchSnippet::emitSharedBody<TR::HeapTypes::NonZeroedHeap, true>(cursor);\n   else\n      cursor = TR::X86AllocPrefetchSnippet::emitSharedBody<TR::HeapTypes::NonZeroedHeap, false>(cursor);\n\n   cursor = static_cast<uint8_t *>( TR::alignAllocation<32>(cursor) );\n\n   TR_ASSERT(cursor == CCPreLoadedCodeTop, \"The expected and actual sizes of the emitted code differ. cursor = %p, CCPreLoadedCodeTop = %p\", cursor, CCPreLoadedCodeTop);\n   }", "url": "https://github.com/eclipse-openj9/openj9/pull/9421#discussion_r428248560", "createdAt": "2020-05-20T19:11:53Z", "author": {"login": "harryyu1994"}, "path": "runtime/compiler/x/codegen/AllocPrefetchSnippet.cpp", "diffHunk": "@@ -232,8 +232,9 @@ uint8_t* TR::X86AllocPrefetchSnippet::emitSharedBody(uint8_t* prefetchSnippetBuf\n    //\n    for (int32_t lineOffset = 0; lineOffset < numLines; ++lineOffset)\n       {\n+      TR_ASSERT(TR::CodeGenerator::getX86ProcessorInfo().isAMD15h() == TR::comp()->target().cpu.is(OMR_PROCESSOR_X86_AMDFAMILY15H), \"OMR_PROCESSOR_X86_AMDFAMILY15H\\n\");\n       prefetchSnippetBuffer[0] = 0x0F;\n-      if (cpuInfo.isAMD15h())\n+      if (TR::comp()->target().cpu.is(OMR_PROCESSOR_X86_AMDFAMILY15H))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIzMjQ4MA=="}, "originalCommit": {"oid": "cfb66573b3c42709f42a6ef8a99c5a3ec69ba21c"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NzAzNTQ4OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/x/codegen/J9CodeGenerator.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxODo0Njo0MFrOGYZWIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxODo0Njo0MFrOGYZWIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIzNDI3NA==", "bodyText": "These asserts will go away as far I understand, so we could replace them with TR_ASSERT_FATAL without worrying about extra overhead forever.", "url": "https://github.com/eclipse-openj9/openj9/pull/9421#discussion_r428234274", "createdAt": "2020-05-20T18:46:40Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/x/codegen/J9CodeGenerator.cpp", "diffHunk": "@@ -85,19 +85,23 @@ J9::X86::CodeGenerator::CodeGenerator() :\n    cg->setSupportsPartialInlineOfMethodHooks();\n    cg->setSupportsInliningOfTypeCoersionMethods();\n    cg->setSupportsNewInstanceImplOpt();\n-   if (cg->getX86ProcessorInfo().supportsSSE4_1() &&\n+   \n+   TR_ASSERT(cg->comp()->target().cpu.supportsFeature(OMR_FEATURE_X86_SSE4_1) == cg->getX86ProcessorInfo().supportsSSE4_1(), \"supportsSSE4_1() failed\\n\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfb66573b3c42709f42a6ef8a99c5a3ec69ba21c"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NzA0MDg1OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/x/codegen/J9CodeGenerator.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxODo0ODowN1rOGYZZZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxODo0ODowN1rOGYZZZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIzNTEwOQ==", "bodyText": "I see that we have comp already available, so cg->comp() could be replaced by comp", "url": "https://github.com/eclipse-openj9/openj9/pull/9421#discussion_r428235109", "createdAt": "2020-05-20T18:48:07Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/x/codegen/J9CodeGenerator.cpp", "diffHunk": "@@ -85,19 +85,23 @@ J9::X86::CodeGenerator::CodeGenerator() :\n    cg->setSupportsPartialInlineOfMethodHooks();\n    cg->setSupportsInliningOfTypeCoersionMethods();\n    cg->setSupportsNewInstanceImplOpt();\n-   if (cg->getX86ProcessorInfo().supportsSSE4_1() &&\n+   \n+   TR_ASSERT(cg->comp()->target().cpu.supportsFeature(OMR_FEATURE_X86_SSE4_1) == cg->getX86ProcessorInfo().supportsSSE4_1(), \"supportsSSE4_1() failed\\n\");\n+   TR_ASSERT(cg->comp()->target().cpu.supportsFeature(OMR_FEATURE_X86_SSSE3) == cg->getX86ProcessorInfo().supportsSSSE3(), \"supportsSSSE3() failed\\n\");\n+   \n+   if (cg->comp()->target().cpu.supportsFeature(OMR_FEATURE_X86_SSE4_1) &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfb66573b3c42709f42a6ef8a99c5a3ec69ba21c"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 305, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}