{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwMjc0MjIy", "number": 9613, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMzowMjozM1rOD_YI6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwMjozNzo0N1rOEDI44A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NzgyMzc2OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/p/codegen/J9TreeEvaluator.cpp", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMzowMjozM1rOGaAbqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMzo1MTowMlrOGaB0GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkyMzI0MA==", "bodyText": "This is wrong. It deals with legitimate offsets such as 0x80000000 wrongly, turning them into positive offsets. You need to test specifically the other situations.", "url": "https://github.com/eclipse-openj9/openj9/pull/9613#discussion_r429923240", "createdAt": "2020-05-25T13:02:33Z", "author": {"login": "zl-wang"}, "path": "runtime/compiler/p/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -1235,7 +1235,15 @@ void loadFieldWatchSnippet(TR::CodeGenerator *cg, TR::Node *node, TR::Snippet *d\n       {\n       if (beginIndex<LOWER_IMMED || beginIndex>UPPER_IMMED)\n          {\n-         generateTrg1Src1ImmInstruction(cg, TR::InstOpCode::addis, node, scratchReg, cg->getTOCBaseRegister(), HI_VALUE(beginIndex));\n+         if (0x00008000 == HI_VALUE(beginIndex))\n+            {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7189324aeacf873df83829ab6281a106efcc83e8"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkzMTY0MA==", "bodyText": "If beginIndex is equal to 0x80000000 then HI_VALUE(beginIndex) will become 0xFFFF8000 so it won't trigger the if statement.\nHI_VALUE(beginIndex) will only become 0x00008000 when the upper 16 bits of beginIndex are equal to 0x7FFF and the highest bit of the lower 16 bits is set.\nSo beginIndex has to look like this in binary:\n0111 1111 1111 1111 1XXX XXXX XXXX XXXX\nHI_VALUE will first shift right by 16 bits:\n0000 0000 0000 0000 0111 1111 1111 1111\nThen add 1 because the highest bit of the original lowest 16 bits was set:\n0000 0000 0000 0000 1000 0000 0000 0000 = 0x00008000", "url": "https://github.com/eclipse-openj9/openj9/pull/9613#discussion_r429931640", "createdAt": "2020-05-25T13:21:18Z", "author": {"login": "IBMJimmyk"}, "path": "runtime/compiler/p/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -1235,7 +1235,15 @@ void loadFieldWatchSnippet(TR::CodeGenerator *cg, TR::Node *node, TR::Snippet *d\n       {\n       if (beginIndex<LOWER_IMMED || beginIndex>UPPER_IMMED)\n          {\n-         generateTrg1Src1ImmInstruction(cg, TR::InstOpCode::addis, node, scratchReg, cg->getTOCBaseRegister(), HI_VALUE(beginIndex));\n+         if (0x00008000 == HI_VALUE(beginIndex))\n+            {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkyMzI0MA=="}, "originalCommit": {"oid": "7189324aeacf873df83829ab6281a106efcc83e8"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk0NTg4MA==", "bodyText": "fair enough.", "url": "https://github.com/eclipse-openj9/openj9/pull/9613#discussion_r429945880", "createdAt": "2020-05-25T13:51:02Z", "author": {"login": "zl-wang"}, "path": "runtime/compiler/p/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -1235,7 +1235,15 @@ void loadFieldWatchSnippet(TR::CodeGenerator *cg, TR::Node *node, TR::Snippet *d\n       {\n       if (beginIndex<LOWER_IMMED || beginIndex>UPPER_IMMED)\n          {\n-         generateTrg1Src1ImmInstruction(cg, TR::InstOpCode::addis, node, scratchReg, cg->getTOCBaseRegister(), HI_VALUE(beginIndex));\n+         if (0x00008000 == HI_VALUE(beginIndex))\n+            {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkyMzI0MA=="}, "originalCommit": {"oid": "7189324aeacf873df83829ab6281a106efcc83e8"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNzI2ODE2OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/p/codegen/J9TreeEvaluator.cpp", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwMjozNzo0N1rOGgBX1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMzo0Nzo0MVrOGjEl-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzMDEwMQ==", "bodyText": "Could you please clarify why this instruction is needed? I thought just lis would be enough for any HI_VALUE.", "url": "https://github.com/eclipse-openj9/openj9/pull/9613#discussion_r436230101", "createdAt": "2020-06-06T02:37:47Z", "author": {"login": "gita-omr"}, "path": "runtime/compiler/p/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -6738,8 +6751,16 @@ static void genHeapAlloc(TR::Node *node, TR::Instruction *&iCursor, TR_OpaqueCla\n          iCursor = generateTrg1ImmInstruction(cg, TR::InstOpCode::li, node, zeroReg, 0, iCursor);\n          if (sizeInReg)\n             {\n-            iCursor = generateTrg1ImmInstruction(cg, TR::InstOpCode::lis, node, sizeReg, (allocSize >> 16) + ((allocSize & (1 << 15)) ? 1 : 0), iCursor);\n-            iCursor = generateTrg1Src1ImmInstruction(cg, TR::InstOpCode::addi, node, sizeReg, sizeReg, allocSize & 0x0000FFFF, iCursor);\n+            if (0x00008000 == HI_VALUE(allocSize))\n+               {\n+               iCursor = generateTrg1ImmInstruction(cg, TR::InstOpCode::lis, node, sizeReg, HI_VALUE(allocSize), iCursor);\n+               iCursor = generateTrg1Src1Imm2Instruction(cg, TR::InstOpCode::rlwinm, node, sizeReg, sizeReg, 0, 0xFFFFFFFF, iCursor);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea26fdb552ee3a61a224614c35250321b4e57b25"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY5ODc4Mg==", "bodyText": "I made a mistake there. Those two lines are just wrong. They should be a lis instruction followed by an addis instruction with the intent of putting 0x000000008000000 into a register.", "url": "https://github.com/eclipse-openj9/openj9/pull/9613#discussion_r436698782", "createdAt": "2020-06-08T13:25:54Z", "author": {"login": "IBMJimmyk"}, "path": "runtime/compiler/p/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -6738,8 +6751,16 @@ static void genHeapAlloc(TR::Node *node, TR::Instruction *&iCursor, TR_OpaqueCla\n          iCursor = generateTrg1ImmInstruction(cg, TR::InstOpCode::li, node, zeroReg, 0, iCursor);\n          if (sizeInReg)\n             {\n-            iCursor = generateTrg1ImmInstruction(cg, TR::InstOpCode::lis, node, sizeReg, (allocSize >> 16) + ((allocSize & (1 << 15)) ? 1 : 0), iCursor);\n-            iCursor = generateTrg1Src1ImmInstruction(cg, TR::InstOpCode::addi, node, sizeReg, sizeReg, allocSize & 0x0000FFFF, iCursor);\n+            if (0x00008000 == HI_VALUE(allocSize))\n+               {\n+               iCursor = generateTrg1ImmInstruction(cg, TR::InstOpCode::lis, node, sizeReg, HI_VALUE(allocSize), iCursor);\n+               iCursor = generateTrg1Src1Imm2Instruction(cg, TR::InstOpCode::rlwinm, node, sizeReg, sizeReg, 0, 0xFFFFFFFF, iCursor);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzMDEwMQ=="}, "originalCommit": {"oid": "ea26fdb552ee3a61a224614c35250321b4e57b25"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE0NTkzNg==", "bodyText": "I think we could've just called lis with 0xFFFF8000. This is just to avoid the ASSERT but the register will end up with the same bit pattern.", "url": "https://github.com/eclipse-openj9/openj9/pull/9613#discussion_r439145936", "createdAt": "2020-06-12T00:32:03Z", "author": {"login": "gita-omr"}, "path": "runtime/compiler/p/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -6738,8 +6751,16 @@ static void genHeapAlloc(TR::Node *node, TR::Instruction *&iCursor, TR_OpaqueCla\n          iCursor = generateTrg1ImmInstruction(cg, TR::InstOpCode::li, node, zeroReg, 0, iCursor);\n          if (sizeInReg)\n             {\n-            iCursor = generateTrg1ImmInstruction(cg, TR::InstOpCode::lis, node, sizeReg, (allocSize >> 16) + ((allocSize & (1 << 15)) ? 1 : 0), iCursor);\n-            iCursor = generateTrg1Src1ImmInstruction(cg, TR::InstOpCode::addi, node, sizeReg, sizeReg, allocSize & 0x0000FFFF, iCursor);\n+            if (0x00008000 == HI_VALUE(allocSize))\n+               {\n+               iCursor = generateTrg1ImmInstruction(cg, TR::InstOpCode::lis, node, sizeReg, HI_VALUE(allocSize), iCursor);\n+               iCursor = generateTrg1Src1Imm2Instruction(cg, TR::InstOpCode::rlwinm, node, sizeReg, sizeReg, 0, 0xFFFFFFFF, iCursor);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzMDEwMQ=="}, "originalCommit": {"oid": "ea26fdb552ee3a61a224614c35250321b4e57b25"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM2NDM3Nw==", "bodyText": "No, we can't do that. As I pointed out previously in eclipse/omr#5213 (comment), the assert would not be a false positive in these instances. When using the full 64-bit result (as is done here when running on 64-bit systems), using -0x8000 instead of 0x8000 will not end up with the correct bit pattern in the register and will result in incorrect behaviour.", "url": "https://github.com/eclipse-openj9/openj9/pull/9613#discussion_r439364377", "createdAt": "2020-06-12T11:28:57Z", "author": {"login": "aviansie-ben"}, "path": "runtime/compiler/p/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -6738,8 +6751,16 @@ static void genHeapAlloc(TR::Node *node, TR::Instruction *&iCursor, TR_OpaqueCla\n          iCursor = generateTrg1ImmInstruction(cg, TR::InstOpCode::li, node, zeroReg, 0, iCursor);\n          if (sizeInReg)\n             {\n-            iCursor = generateTrg1ImmInstruction(cg, TR::InstOpCode::lis, node, sizeReg, (allocSize >> 16) + ((allocSize & (1 << 15)) ? 1 : 0), iCursor);\n-            iCursor = generateTrg1Src1ImmInstruction(cg, TR::InstOpCode::addi, node, sizeReg, sizeReg, allocSize & 0x0000FFFF, iCursor);\n+            if (0x00008000 == HI_VALUE(allocSize))\n+               {\n+               iCursor = generateTrg1ImmInstruction(cg, TR::InstOpCode::lis, node, sizeReg, HI_VALUE(allocSize), iCursor);\n+               iCursor = generateTrg1Src1Imm2Instruction(cg, TR::InstOpCode::rlwinm, node, sizeReg, sizeReg, 0, 0xFFFFFFFF, iCursor);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzMDEwMQ=="}, "originalCommit": {"oid": "ea26fdb552ee3a61a224614c35250321b4e57b25"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQyODYwMA==", "bodyText": "Right! Forgot that lis is the same as addis with 0.", "url": "https://github.com/eclipse-openj9/openj9/pull/9613#discussion_r439428600", "createdAt": "2020-06-12T13:47:41Z", "author": {"login": "gita-omr"}, "path": "runtime/compiler/p/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -6738,8 +6751,16 @@ static void genHeapAlloc(TR::Node *node, TR::Instruction *&iCursor, TR_OpaqueCla\n          iCursor = generateTrg1ImmInstruction(cg, TR::InstOpCode::li, node, zeroReg, 0, iCursor);\n          if (sizeInReg)\n             {\n-            iCursor = generateTrg1ImmInstruction(cg, TR::InstOpCode::lis, node, sizeReg, (allocSize >> 16) + ((allocSize & (1 << 15)) ? 1 : 0), iCursor);\n-            iCursor = generateTrg1Src1ImmInstruction(cg, TR::InstOpCode::addi, node, sizeReg, sizeReg, allocSize & 0x0000FFFF, iCursor);\n+            if (0x00008000 == HI_VALUE(allocSize))\n+               {\n+               iCursor = generateTrg1ImmInstruction(cg, TR::InstOpCode::lis, node, sizeReg, HI_VALUE(allocSize), iCursor);\n+               iCursor = generateTrg1Src1Imm2Instruction(cg, TR::InstOpCode::rlwinm, node, sizeReg, sizeReg, 0, 0xFFFFFFFF, iCursor);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzMDEwMQ=="}, "originalCommit": {"oid": "ea26fdb552ee3a61a224614c35250321b4e57b25"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 192, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}