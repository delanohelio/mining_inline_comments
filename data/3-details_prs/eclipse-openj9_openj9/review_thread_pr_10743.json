{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1MDMwNzE3", "number": 10743, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxOTowNjoxNFrOEotDkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxOToxMDowMFrOEotIRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMTE2NjkxOnYy", "diffSide": "RIGHT", "path": "runtime/codert_vm/cnathelp.cpp", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxOTowNjoxNFrOHZ8xfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxOTo0MjowM1rOHZ-b_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk3MjE1OQ==", "bodyText": "Is it better to throw an empty IAE here than the NativeOOM?", "url": "https://github.com/eclipse-openj9/openj9/pull/10743#discussion_r496972159", "createdAt": "2020-09-29T19:06:14Z", "author": {"login": "DanHeidinga"}, "path": "runtime/codert_vm/cnathelp.cpp", "diffHunk": "@@ -3013,7 +3013,9 @@ old_slow_jitNewInstanceImplAccessCheck(J9VMThread *currentThread)\n \t\t\t\tJ9UTF8_LENGTH(nameUTF),\n \t\t\t\tJ9UTF8_DATA(sigUTF),\n \t\t\t\tJ9UTF8_LENGTH(sigUTF));\n-\t\tsetCurrentExceptionFromJIT(currentThread, J9VMCONSTANTPOOL_JAVALANGILLEGALACCESSEXCEPTION, detailMessage);\n+\t\tif (NULL != detailMessage) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "657d24fae2ba8adc2425c06afaf4c38da1e26449"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk5MDU1Mw==", "bodyText": "I don't like the idea of setting two exceptions in a row, but I could be talked out of it. It won't actually cause any problems to do so.", "url": "https://github.com/eclipse-openj9/openj9/pull/10743#discussion_r496990553", "createdAt": "2020-09-29T19:28:55Z", "author": {"login": "gacholio"}, "path": "runtime/codert_vm/cnathelp.cpp", "diffHunk": "@@ -3013,7 +3013,9 @@ old_slow_jitNewInstanceImplAccessCheck(J9VMThread *currentThread)\n \t\t\t\tJ9UTF8_LENGTH(nameUTF),\n \t\t\t\tJ9UTF8_DATA(sigUTF),\n \t\t\t\tJ9UTF8_LENGTH(sigUTF));\n-\t\tsetCurrentExceptionFromJIT(currentThread, J9VMCONSTANTPOOL_JAVALANGILLEGALACCESSEXCEPTION, detailMessage);\n+\t\tif (NULL != detailMessage) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk3MjE1OQ=="}, "originalCommit": {"oid": "657d24fae2ba8adc2425c06afaf4c38da1e26449"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk5OTQyMw==", "bodyText": "I'm OK with throwing the nativeOOM as that's the immediate failure.  Either way, the user will need to resolve both the cause of the OOM and the IAE - given this is a native OOM, trying to create a second exception (and its stacktrace) to set one as the cause of the other is asking for trouble.\nLet's keep it as you've written it", "url": "https://github.com/eclipse-openj9/openj9/pull/10743#discussion_r496999423", "createdAt": "2020-09-29T19:42:03Z", "author": {"login": "DanHeidinga"}, "path": "runtime/codert_vm/cnathelp.cpp", "diffHunk": "@@ -3013,7 +3013,9 @@ old_slow_jitNewInstanceImplAccessCheck(J9VMThread *currentThread)\n \t\t\t\tJ9UTF8_LENGTH(nameUTF),\n \t\t\t\tJ9UTF8_DATA(sigUTF),\n \t\t\t\tJ9UTF8_LENGTH(sigUTF));\n-\t\tsetCurrentExceptionFromJIT(currentThread, J9VMCONSTANTPOOL_JAVALANGILLEGALACCESSEXCEPTION, detailMessage);\n+\t\tif (NULL != detailMessage) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk3MjE1OQ=="}, "originalCommit": {"oid": "657d24fae2ba8adc2425c06afaf4c38da1e26449"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMTE3ODkzOnYy", "diffSide": "RIGHT", "path": "runtime/vm/stringhelpers.cpp", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxOToxMDowMFrOHZ85Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxOTozMTozMVrOHZ-Cmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk3NDE1OQ==", "bodyText": "We're in the VM here.  Can we directly call setNativeOOM??\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tvmThread->javaVM->internalVMFunctions->setNativeOutOfMemoryError(vmThread, 0, 0);\n          \n          \n            \n            \t\tsetNativeOutOfMemoryError(vmThread, 0, 0);", "url": "https://github.com/eclipse-openj9/openj9/pull/10743#discussion_r496974159", "createdAt": "2020-09-29T19:10:00Z", "author": {"login": "DanHeidinga"}, "path": "runtime/vm/stringhelpers.cpp", "diffHunk": "@@ -498,7 +498,9 @@ catUtfToString4(J9VMThread * vmThread, const U_8 *data1, UDATA length1, const U_\n \tj9object_t result = NULL;\n \tUDATA totalLength = length1 + length2 + length3 + length4;\n \tU_8 *buffer = (U_8*)j9mem_allocate_memory(totalLength, OMRMEM_CATEGORY_VM);\n-\tif (NULL != buffer) {\n+\tif (NULL == buffer) {\n+\t\tvmThread->javaVM->internalVMFunctions->setNativeOutOfMemoryError(vmThread, 0, 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "657d24fae2ba8adc2425c06afaf4c38da1e26449"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk4ODUxOA==", "bodyText": "The file is recompiled for one of the tests, so the direct call causes a link error.", "url": "https://github.com/eclipse-openj9/openj9/pull/10743#discussion_r496988518", "createdAt": "2020-09-29T19:26:41Z", "author": {"login": "gacholio"}, "path": "runtime/vm/stringhelpers.cpp", "diffHunk": "@@ -498,7 +498,9 @@ catUtfToString4(J9VMThread * vmThread, const U_8 *data1, UDATA length1, const U_\n \tj9object_t result = NULL;\n \tUDATA totalLength = length1 + length2 + length3 + length4;\n \tU_8 *buffer = (U_8*)j9mem_allocate_memory(totalLength, OMRMEM_CATEGORY_VM);\n-\tif (NULL != buffer) {\n+\tif (NULL == buffer) {\n+\t\tvmThread->javaVM->internalVMFunctions->setNativeOutOfMemoryError(vmThread, 0, 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk3NDE1OQ=="}, "originalCommit": {"oid": "657d24fae2ba8adc2425c06afaf4c38da1e26449"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk5MDU3MA==", "bodyText": "I'd suggest the J9_VM_FUNCTION(currentThread, function) approach but it isn't worth the effort for an OOM case", "url": "https://github.com/eclipse-openj9/openj9/pull/10743#discussion_r496990570", "createdAt": "2020-09-29T19:28:56Z", "author": {"login": "DanHeidinga"}, "path": "runtime/vm/stringhelpers.cpp", "diffHunk": "@@ -498,7 +498,9 @@ catUtfToString4(J9VMThread * vmThread, const U_8 *data1, UDATA length1, const U_\n \tj9object_t result = NULL;\n \tUDATA totalLength = length1 + length2 + length3 + length4;\n \tU_8 *buffer = (U_8*)j9mem_allocate_memory(totalLength, OMRMEM_CATEGORY_VM);\n-\tif (NULL != buffer) {\n+\tif (NULL == buffer) {\n+\t\tvmThread->javaVM->internalVMFunctions->setNativeOutOfMemoryError(vmThread, 0, 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk3NDE1OQ=="}, "originalCommit": {"oid": "657d24fae2ba8adc2425c06afaf4c38da1e26449"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk5MjkyMg==", "bodyText": "That macro only works if the magic ifdef is defined, which it is not for the test directory.", "url": "https://github.com/eclipse-openj9/openj9/pull/10743#discussion_r496992922", "createdAt": "2020-09-29T19:31:31Z", "author": {"login": "gacholio"}, "path": "runtime/vm/stringhelpers.cpp", "diffHunk": "@@ -498,7 +498,9 @@ catUtfToString4(J9VMThread * vmThread, const U_8 *data1, UDATA length1, const U_\n \tj9object_t result = NULL;\n \tUDATA totalLength = length1 + length2 + length3 + length4;\n \tU_8 *buffer = (U_8*)j9mem_allocate_memory(totalLength, OMRMEM_CATEGORY_VM);\n-\tif (NULL != buffer) {\n+\tif (NULL == buffer) {\n+\t\tvmThread->javaVM->internalVMFunctions->setNativeOutOfMemoryError(vmThread, 0, 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk3NDE1OQ=="}, "originalCommit": {"oid": "657d24fae2ba8adc2425c06afaf4c38da1e26449"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1260, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}