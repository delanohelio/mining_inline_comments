{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyMTg4MDIz", "number": 8525, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNTozMTozM1rODef1uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNTozMTozM1rODef1uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMzA1NTI5OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/p/codegen/J9PPCSnippet.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNTozMTozM1rOFnqeeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNTo0NDoxMFrOFozvNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzEzNDcxNA==", "bodyText": "There is only one BinaryBufferStart value (at least for a logical encoding unit such as a specific compilation). The way i->estimateBinaryLength is done looks wrong to me.  The next instruction will see longer estimated length. Reversing the two lines above and fixing using cg->getBinaryBufferStart would make more senses.", "url": "https://github.com/eclipse-openj9/openj9/pull/8525#discussion_r377134714", "createdAt": "2020-02-10T15:31:33Z", "author": {"login": "zl-wang"}, "path": "runtime/compiler/p/codegen/J9PPCSnippet.cpp", "diffHunk": "@@ -1879,6 +1879,17 @@ uint32_t TR::getCCPreLoadedCodeSize()\n #define CCEYECATCHER(a, b, c, d) (((a) << 24) | ((b) << 16) | ((c) << 8) | ((d) << 0))\n #endif\n \n+static void performCCPreLoadedBinaryEncoding(uint8_t *buffer, TR::CodeGenerator *cg)\n+   {\n+   cg->setBinaryBufferStart(buffer);\n+   cg->setBinaryBufferCursor(buffer);\n+   for (TR::Instruction *i = cg->getFirstInstruction(); i != NULL; i = i->getNext())\n+      {\n+      i->estimateBinaryLength(cg->getBinaryBufferCursor() - cg->getBinaryBufferStart());\n+      cg->setBinaryBufferCursor(i->generateBinaryEncoding());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e8e33b9cddd9acd57ce063b203bd0031dedc7c5"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMzNTAzMA==", "bodyText": "I think you're confused about what this code is actually doing... In this case, estimateBinaryLength is the method of TR::Instruction in charge of generating the binary length estimate and it takes in the current estimated offset into the binary buffer.\nIn this case, using the actual offset instead of keeping track of an estimate is fine since we don't ever actually use the estimated positions we generate here outside of verifying that the estimates are not violated. It's assumed that all conditional branches within a per-CC helper snippet are within range and the new binary encoder will fail with an assertion if that assumption doesn't hold and an out-of-range branch is encountered.", "url": "https://github.com/eclipse-openj9/openj9/pull/8525#discussion_r378335030", "createdAt": "2020-02-12T15:44:10Z", "author": {"login": "aviansie-ben"}, "path": "runtime/compiler/p/codegen/J9PPCSnippet.cpp", "diffHunk": "@@ -1879,6 +1879,17 @@ uint32_t TR::getCCPreLoadedCodeSize()\n #define CCEYECATCHER(a, b, c, d) (((a) << 24) | ((b) << 16) | ((c) << 8) | ((d) << 0))\n #endif\n \n+static void performCCPreLoadedBinaryEncoding(uint8_t *buffer, TR::CodeGenerator *cg)\n+   {\n+   cg->setBinaryBufferStart(buffer);\n+   cg->setBinaryBufferCursor(buffer);\n+   for (TR::Instruction *i = cg->getFirstInstruction(); i != NULL; i = i->getNext())\n+      {\n+      i->estimateBinaryLength(cg->getBinaryBufferCursor() - cg->getBinaryBufferStart());\n+      cg->setBinaryBufferCursor(i->generateBinaryEncoding());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzEzNDcxNA=="}, "originalCommit": {"oid": "3e8e33b9cddd9acd57ce063b203bd0031dedc7c5"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 703, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}