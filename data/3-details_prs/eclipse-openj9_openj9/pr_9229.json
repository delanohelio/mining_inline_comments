{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyNzcyNDkw", "number": 9229, "title": "Add test to verify the qualified UTF8 class name", "bodyText": "The test is to verify the length of the class name\nwith UTF8 package path name in loading classes from\na specified jar file.\nSigned-off-by: Cheng Jin jincheng@ca.ibm.com", "createdAt": "2020-04-13T18:23:43Z", "url": "https://github.com/eclipse-openj9/openj9/pull/9229", "merged": true, "mergeCommit": {"oid": "6e3a58efb708ab0fc2a2ea6a4f80b826e7b99dc5"}, "closed": true, "closedAt": "2020-04-16T22:29:57Z", "author": {"login": "ChengJin01"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcXUd9fAFqTM5MjM5NTM4OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcYUc0xgFqTM5NTA0MzQ1Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMzk1Mzg4", "url": "https://github.com/eclipse-openj9/openj9/pull/9229#pullrequestreview-392395388", "createdAt": "2020-04-13T19:57:10Z", "commit": {"oid": "82bd13bdec5e7d2b198e3583f508f856d77e2b9a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxOTo1NzoxMFrOGEzGwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxOTo1NzoxMFrOGEzGwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY4NDgwMg==", "bodyText": "Pls use File.deleteOnExit() to remove the jar file after the test is finished.", "url": "https://github.com/eclipse-openj9/openj9/pull/9229#discussion_r407684802", "createdAt": "2020-04-13T19:57:10Z", "author": {"login": "pshipton"}, "path": "test/functional/Java8andUp/src/org/openj9/test/utf8ClassPkgName/LoadClassWithUTF8PkgNameTest.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+\n+package org.openj9.test.utf8ClassPkgName;\n+\n+import java.util.regex.Pattern;\n+import java.util.jar.Manifest;\n+import java.util.jar.Attributes;\n+import java.util.jar.JarEntry;\n+import java.util.jar.JarOutputStream;\n+import java.io.OutputStream;\n+import java.io.FileOutputStream;\n+import java.io.File;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+\n+import org.objectweb.asm.*;\n+import static org.objectweb.asm.Opcodes.ACC_PUBLIC;\n+import static org.objectweb.asm.Opcodes.ACC_SUPER;\n+import static org.objectweb.asm.Opcodes.ALOAD;\n+import static org.objectweb.asm.Opcodes.INVOKESPECIAL;\n+import static org.objectweb.asm.Opcodes.RETURN;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+import org.testng.annotations.BeforeTest;\n+\n+\n+/**\n+ * Verify whether VM successfully loads a class with a Chinese UTF8 package name from a jar file\n+ * Note: The specified jar file to to be loaded in this test is automatically generated so as to\n+ * avoid any issue with platform dependencies.\n+ * \n+ */\n+@Test(groups = { \"level.sanity\" })\n+public class LoadClassWithUTF8PkgNameTest {\n+\t\n+\tprivate static byte[] classBytes;\n+\tfinal static int classVersionJava8 = 52;\n+\tfinal static String loadedPackagePath = \"org/openj9/resources/utf8pkgname/loaded_Utf8Class_\\u6b63\\u5728\\u52a0\\u8f7d\\u7c7b\\u5305\\u540d\\u957f\\u5ea6\\u6570\\u68c0\\u67e5/\";\n+\tfinal static String loadedClassName = \"Utf8ClassPackageNameTest\";\n+\tfinal static String loadedClassFileWithPackagePath = loadedPackagePath + loadedClassName + \".class\";\n+\tfinal static String loadedClassNameWithDotPath = loadedPackagePath.replace('/', '.') + loadedClassName;\n+\tfinal static String jarFileNameWithPath = System.getProperty(\"user.dir\") + \"/\" + \"Utf8PkgName.jar\";\n+\t\n+\tpublic static byte[] generateClassBytes(String loadedPackagePath, String loadedClassName, int classVersion) throws Exception {\n+\n+\t\tClassWriter cw = new ClassWriter(0);\n+\t\tFieldVisitor fv;\n+\t\tMethodVisitor mv;\n+\t\tAnnotationVisitor av0;\n+\n+\t\tcw.visit(classVersion, ACC_PUBLIC + ACC_SUPER, loadedPackagePath + loadedClassName, null, \"java/lang/Object\", null);\n+\t\tcw.visitSource(loadedClassName + \".java\", null);\n+\n+\t\t{\n+\t\t\tmv = cw.visitMethod(ACC_PUBLIC, \"<init>\", \"()V\", null, null);\n+\t\t\tmv.visitCode();\n+\t\t\tLabel l0 = new Label();\n+\t\t\tmv.visitLabel(l0);\n+\t\t\tmv.visitLineNumber(29, l0);\n+\t\t\tmv.visitVarInsn(ALOAD, 0);\n+\t\t\tmv.visitMethodInsn(INVOKESPECIAL, \"java/lang/Object\", \"<init>\", \"()V\");\n+\t\t\tmv.visitInsn(RETURN);\n+\t\t\tLabel l1 = new Label();\n+\t\t\tmv.visitLabel(l1);\n+\t\t\tmv.visitLocalVariable(\"this\", \"L\" + loadedPackagePath + loadedClassName + \";\", null, l0, l1, 0);\n+\t\t\tmv.visitMaxs(1, 1);\n+\t\t\tmv.visitEnd();\n+\t\t}\n+\t\tcw.visitEnd();\n+\n+\t\treturn cw.toByteArray();\n+\t}\n+\t\n+\t@BeforeTest\n+\tpublic void beforeTest() throws Exception {\n+\t\tString ver = System.getProperty(\"java.version\");\n+\t\tboolean isJava8ClassFile = ((ver.length()>=3) && ver.substring(0, 2).equalsIgnoreCase(\"1.8\")) ? true : false;\n+\t\t\n+\t\t/* The generated class file is only used by the java version >= Java 8 */\n+\t\tint classVersion = classVersionJava8;\n+\t\tif (!isJava8ClassFile) {\n+\t\t\t/* use the first located number in the version string assuming\n+\t\t\t * the major version number is 9, 10, 11, 12, 13, 14 ... \n+\t\t\t * Note: internal build might come with '-' in the version string.\n+\t\t\t * e.g. 14-internal\n+\t\t\t */\n+\t\t\tString splitPattern = (ver.indexOf('.') >= 0) ? Pattern.quote(\".\") : \n+\t\t\t\t\t\t\t\t\t((ver.indexOf('-') >=0) ? Pattern.quote(\"-\"): null);\n+\t\t\tString verDigits = (null != splitPattern) ? ver.split(splitPattern)[0] : ver;\n+\t\t\tclassVersion = (Integer.parseInt(verDigits) - 8) + classVersionJava8;\n+\t\t}\n+\t\tclassBytes = generateClassBytes(loadedPackagePath, loadedClassName, classVersion);\n+\t\t\n+\t\t/* prepare the MANIFEST data for the specified jar file */\n+\t\tString jarFileVersion = \"1.0.0\";\n+\t\tString jarFileAuthor = \"IBM OpenJ9\";\n+\t\tManifest manifestData = new Manifest();\n+\t\tAttributes manifestAttrs = manifestData.getMainAttributes();\n+\t\tmanifestAttrs.put(Attributes.Name.MANIFEST_VERSION, jarFileVersion);\n+\t\tmanifestAttrs.put(new Attributes.Name(\"Created-By\"), jarFileAuthor);\n+\t\t\n+\t\t/* write the class bytes into the specified jar file */\n+\t\tOutputStream fos = new FileOutputStream(new File(jarFileNameWithPath));\n+\t\tJarOutputStream jos = new JarOutputStream(fos, manifestData);\n+\t\tJarEntry jarEntry = new JarEntry(loadedClassFileWithPackagePath);\n+\t\tjos.putNextEntry(jarEntry);\n+\t\tjos.write(classBytes, 0, classBytes.length);\n+\t\tjos.closeEntry();\n+\t\tjos.close();\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82bd13bdec5e7d2b198e3583f508f856d77e2b9a"}, "originalPosition": 131}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMzk3MjMy", "url": "https://github.com/eclipse-openj9/openj9/pull/9229#pullrequestreview-392397232", "createdAt": "2020-04-13T19:59:56Z", "commit": {"oid": "82bd13bdec5e7d2b198e3583f508f856d77e2b9a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxOTo1OTo1NlrOGEzMsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxOTo1OTo1NlrOGEzMsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY4NjMyMA==", "bodyText": "There is a helper that does this, can you use org.openj9.test.util.VersionCheck.major() instead?", "url": "https://github.com/eclipse-openj9/openj9/pull/9229#discussion_r407686320", "createdAt": "2020-04-13T19:59:56Z", "author": {"login": "pshipton"}, "path": "test/functional/Java8andUp/src/org/openj9/test/utf8ClassPkgName/LoadClassWithUTF8PkgNameTest.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+\n+package org.openj9.test.utf8ClassPkgName;\n+\n+import java.util.regex.Pattern;\n+import java.util.jar.Manifest;\n+import java.util.jar.Attributes;\n+import java.util.jar.JarEntry;\n+import java.util.jar.JarOutputStream;\n+import java.io.OutputStream;\n+import java.io.FileOutputStream;\n+import java.io.File;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+\n+import org.objectweb.asm.*;\n+import static org.objectweb.asm.Opcodes.ACC_PUBLIC;\n+import static org.objectweb.asm.Opcodes.ACC_SUPER;\n+import static org.objectweb.asm.Opcodes.ALOAD;\n+import static org.objectweb.asm.Opcodes.INVOKESPECIAL;\n+import static org.objectweb.asm.Opcodes.RETURN;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+import org.testng.annotations.BeforeTest;\n+\n+\n+/**\n+ * Verify whether VM successfully loads a class with a Chinese UTF8 package name from a jar file\n+ * Note: The specified jar file to to be loaded in this test is automatically generated so as to\n+ * avoid any issue with platform dependencies.\n+ * \n+ */\n+@Test(groups = { \"level.sanity\" })\n+public class LoadClassWithUTF8PkgNameTest {\n+\t\n+\tprivate static byte[] classBytes;\n+\tfinal static int classVersionJava8 = 52;\n+\tfinal static String loadedPackagePath = \"org/openj9/resources/utf8pkgname/loaded_Utf8Class_\\u6b63\\u5728\\u52a0\\u8f7d\\u7c7b\\u5305\\u540d\\u957f\\u5ea6\\u6570\\u68c0\\u67e5/\";\n+\tfinal static String loadedClassName = \"Utf8ClassPackageNameTest\";\n+\tfinal static String loadedClassFileWithPackagePath = loadedPackagePath + loadedClassName + \".class\";\n+\tfinal static String loadedClassNameWithDotPath = loadedPackagePath.replace('/', '.') + loadedClassName;\n+\tfinal static String jarFileNameWithPath = System.getProperty(\"user.dir\") + \"/\" + \"Utf8PkgName.jar\";\n+\t\n+\tpublic static byte[] generateClassBytes(String loadedPackagePath, String loadedClassName, int classVersion) throws Exception {\n+\n+\t\tClassWriter cw = new ClassWriter(0);\n+\t\tFieldVisitor fv;\n+\t\tMethodVisitor mv;\n+\t\tAnnotationVisitor av0;\n+\n+\t\tcw.visit(classVersion, ACC_PUBLIC + ACC_SUPER, loadedPackagePath + loadedClassName, null, \"java/lang/Object\", null);\n+\t\tcw.visitSource(loadedClassName + \".java\", null);\n+\n+\t\t{\n+\t\t\tmv = cw.visitMethod(ACC_PUBLIC, \"<init>\", \"()V\", null, null);\n+\t\t\tmv.visitCode();\n+\t\t\tLabel l0 = new Label();\n+\t\t\tmv.visitLabel(l0);\n+\t\t\tmv.visitLineNumber(29, l0);\n+\t\t\tmv.visitVarInsn(ALOAD, 0);\n+\t\t\tmv.visitMethodInsn(INVOKESPECIAL, \"java/lang/Object\", \"<init>\", \"()V\");\n+\t\t\tmv.visitInsn(RETURN);\n+\t\t\tLabel l1 = new Label();\n+\t\t\tmv.visitLabel(l1);\n+\t\t\tmv.visitLocalVariable(\"this\", \"L\" + loadedPackagePath + loadedClassName + \";\", null, l0, l1, 0);\n+\t\t\tmv.visitMaxs(1, 1);\n+\t\t\tmv.visitEnd();\n+\t\t}\n+\t\tcw.visitEnd();\n+\n+\t\treturn cw.toByteArray();\n+\t}\n+\t\n+\t@BeforeTest\n+\tpublic void beforeTest() throws Exception {\n+\t\tString ver = System.getProperty(\"java.version\");\n+\t\tboolean isJava8ClassFile = ((ver.length()>=3) && ver.substring(0, 2).equalsIgnoreCase(\"1.8\")) ? true : false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82bd13bdec5e7d2b198e3583f508f856d77e2b9a"}, "originalPosition": 98}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMzk4OTA1", "url": "https://github.com/eclipse-openj9/openj9/pull/9229#pullrequestreview-392398905", "createdAt": "2020-04-13T20:02:24Z", "commit": {"oid": "82bd13bdec5e7d2b198e3583f508f856d77e2b9a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMDowMjoyNVrOGEzRxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMDowMjoyNVrOGEzRxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY4NzYyMw==", "bodyText": "There is a JarOutputStream constructor that doesn't take a manifest. Can it be used instead to simplify the test?", "url": "https://github.com/eclipse-openj9/openj9/pull/9229#discussion_r407687623", "createdAt": "2020-04-13T20:02:25Z", "author": {"login": "pshipton"}, "path": "test/functional/Java8andUp/src/org/openj9/test/utf8ClassPkgName/LoadClassWithUTF8PkgNameTest.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+\n+package org.openj9.test.utf8ClassPkgName;\n+\n+import java.util.regex.Pattern;\n+import java.util.jar.Manifest;\n+import java.util.jar.Attributes;\n+import java.util.jar.JarEntry;\n+import java.util.jar.JarOutputStream;\n+import java.io.OutputStream;\n+import java.io.FileOutputStream;\n+import java.io.File;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+\n+import org.objectweb.asm.*;\n+import static org.objectweb.asm.Opcodes.ACC_PUBLIC;\n+import static org.objectweb.asm.Opcodes.ACC_SUPER;\n+import static org.objectweb.asm.Opcodes.ALOAD;\n+import static org.objectweb.asm.Opcodes.INVOKESPECIAL;\n+import static org.objectweb.asm.Opcodes.RETURN;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+import org.testng.annotations.BeforeTest;\n+\n+\n+/**\n+ * Verify whether VM successfully loads a class with a Chinese UTF8 package name from a jar file\n+ * Note: The specified jar file to to be loaded in this test is automatically generated so as to\n+ * avoid any issue with platform dependencies.\n+ * \n+ */\n+@Test(groups = { \"level.sanity\" })\n+public class LoadClassWithUTF8PkgNameTest {\n+\t\n+\tprivate static byte[] classBytes;\n+\tfinal static int classVersionJava8 = 52;\n+\tfinal static String loadedPackagePath = \"org/openj9/resources/utf8pkgname/loaded_Utf8Class_\\u6b63\\u5728\\u52a0\\u8f7d\\u7c7b\\u5305\\u540d\\u957f\\u5ea6\\u6570\\u68c0\\u67e5/\";\n+\tfinal static String loadedClassName = \"Utf8ClassPackageNameTest\";\n+\tfinal static String loadedClassFileWithPackagePath = loadedPackagePath + loadedClassName + \".class\";\n+\tfinal static String loadedClassNameWithDotPath = loadedPackagePath.replace('/', '.') + loadedClassName;\n+\tfinal static String jarFileNameWithPath = System.getProperty(\"user.dir\") + \"/\" + \"Utf8PkgName.jar\";\n+\t\n+\tpublic static byte[] generateClassBytes(String loadedPackagePath, String loadedClassName, int classVersion) throws Exception {\n+\n+\t\tClassWriter cw = new ClassWriter(0);\n+\t\tFieldVisitor fv;\n+\t\tMethodVisitor mv;\n+\t\tAnnotationVisitor av0;\n+\n+\t\tcw.visit(classVersion, ACC_PUBLIC + ACC_SUPER, loadedPackagePath + loadedClassName, null, \"java/lang/Object\", null);\n+\t\tcw.visitSource(loadedClassName + \".java\", null);\n+\n+\t\t{\n+\t\t\tmv = cw.visitMethod(ACC_PUBLIC, \"<init>\", \"()V\", null, null);\n+\t\t\tmv.visitCode();\n+\t\t\tLabel l0 = new Label();\n+\t\t\tmv.visitLabel(l0);\n+\t\t\tmv.visitLineNumber(29, l0);\n+\t\t\tmv.visitVarInsn(ALOAD, 0);\n+\t\t\tmv.visitMethodInsn(INVOKESPECIAL, \"java/lang/Object\", \"<init>\", \"()V\");\n+\t\t\tmv.visitInsn(RETURN);\n+\t\t\tLabel l1 = new Label();\n+\t\t\tmv.visitLabel(l1);\n+\t\t\tmv.visitLocalVariable(\"this\", \"L\" + loadedPackagePath + loadedClassName + \";\", null, l0, l1, 0);\n+\t\t\tmv.visitMaxs(1, 1);\n+\t\t\tmv.visitEnd();\n+\t\t}\n+\t\tcw.visitEnd();\n+\n+\t\treturn cw.toByteArray();\n+\t}\n+\t\n+\t@BeforeTest\n+\tpublic void beforeTest() throws Exception {\n+\t\tString ver = System.getProperty(\"java.version\");\n+\t\tboolean isJava8ClassFile = ((ver.length()>=3) && ver.substring(0, 2).equalsIgnoreCase(\"1.8\")) ? true : false;\n+\t\t\n+\t\t/* The generated class file is only used by the java version >= Java 8 */\n+\t\tint classVersion = classVersionJava8;\n+\t\tif (!isJava8ClassFile) {\n+\t\t\t/* use the first located number in the version string assuming\n+\t\t\t * the major version number is 9, 10, 11, 12, 13, 14 ... \n+\t\t\t * Note: internal build might come with '-' in the version string.\n+\t\t\t * e.g. 14-internal\n+\t\t\t */\n+\t\t\tString splitPattern = (ver.indexOf('.') >= 0) ? Pattern.quote(\".\") : \n+\t\t\t\t\t\t\t\t\t((ver.indexOf('-') >=0) ? Pattern.quote(\"-\"): null);\n+\t\t\tString verDigits = (null != splitPattern) ? ver.split(splitPattern)[0] : ver;\n+\t\t\tclassVersion = (Integer.parseInt(verDigits) - 8) + classVersionJava8;\n+\t\t}\n+\t\tclassBytes = generateClassBytes(loadedPackagePath, loadedClassName, classVersion);\n+\t\t\n+\t\t/* prepare the MANIFEST data for the specified jar file */\n+\t\tString jarFileVersion = \"1.0.0\";\n+\t\tString jarFileAuthor = \"IBM OpenJ9\";\n+\t\tManifest manifestData = new Manifest();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82bd13bdec5e7d2b198e3583f508f856d77e2b9a"}, "originalPosition": 118}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "82bd13bdec5e7d2b198e3583f508f856d77e2b9a", "author": {"user": {"login": "ChengJin01", "name": "Cheng Jin"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/82bd13bdec5e7d2b198e3583f508f856d77e2b9a", "committedDate": "2020-04-13T16:50:30Z", "message": "Add test to verify the qualified UTF8 class name\n\nThe test is to verify the length of the class name\nwith UTF8 package path name in loading classes from\na specified jar file.\n\nSigned-off-by: Cheng Jin <jincheng@ca.ibm.com>"}, "afterCommit": {"oid": "498986be7c4b89f84f2259da66ce71b0192cf7b3", "author": {"user": {"login": "ChengJin01", "name": "Cheng Jin"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/498986be7c4b89f84f2259da66ce71b0192cf7b3", "committedDate": "2020-04-13T20:58:10Z", "message": "Add test to verify the qualified UTF8 class name\n\nThe test is to verify the length of the class name\nwith UTF8 package path name in loading classes from\na specified jar file.\n\nSigned-off-by: Cheng Jin <jincheng@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNDM5Mjk1", "url": "https://github.com/eclipse-openj9/openj9/pull/9229#pullrequestreview-392439295", "createdAt": "2020-04-13T21:05:52Z", "commit": {"oid": "498986be7c4b89f84f2259da66ce71b0192cf7b3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMTowNTo1MlrOGE1UZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMTowNTo1MlrOGE1UZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcyMTA2MQ==", "bodyText": "Since the only change here is a copyright update, this change can be removed.", "url": "https://github.com/eclipse-openj9/openj9/pull/9229#discussion_r407721061", "createdAt": "2020-04-13T21:05:52Z", "author": {"login": "pshipton"}, "path": "test/functional/Java8andUp/build.xml", "diffHunk": "@@ -1,7 +1,7 @@\n <?xml version=\"1.0\"?>\n \n <!--\n-  Copyright (c) 2016, 2019 IBM Corp. and others\n+  Copyright (c) 2016, 2020 IBM Corp. and others", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "498986be7c4b89f84f2259da66ce71b0192cf7b3"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNDM5NjM3", "url": "https://github.com/eclipse-openj9/openj9/pull/9229#pullrequestreview-392439637", "createdAt": "2020-04-13T21:06:22Z", "commit": {"oid": "498986be7c4b89f84f2259da66ce71b0192cf7b3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMTowNjoyM1rOGE1VZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMTowNjoyM1rOGE1VZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcyMTMxNw==", "bodyText": "Pls remove the unused entries from the imports.", "url": "https://github.com/eclipse-openj9/openj9/pull/9229#discussion_r407721317", "createdAt": "2020-04-13T21:06:23Z", "author": {"login": "pshipton"}, "path": "test/functional/Java8andUp/src/org/openj9/test/utf8ClassPkgName/LoadClassWithUTF8PkgNameTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+\n+package org.openj9.test.utf8ClassPkgName;\n+\n+import java.util.regex.Pattern;\n+import java.util.jar.Manifest;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "498986be7c4b89f84f2259da66ce71b0192cf7b3"}, "originalPosition": 26}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "498986be7c4b89f84f2259da66ce71b0192cf7b3", "author": {"user": {"login": "ChengJin01", "name": "Cheng Jin"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/498986be7c4b89f84f2259da66ce71b0192cf7b3", "committedDate": "2020-04-13T20:58:10Z", "message": "Add test to verify the qualified UTF8 class name\n\nThe test is to verify the length of the class name\nwith UTF8 package path name in loading classes from\na specified jar file.\n\nSigned-off-by: Cheng Jin <jincheng@ca.ibm.com>"}, "afterCommit": {"oid": "7d6f7da97052895affd10f250f1b380f471c59b3", "author": {"user": {"login": "ChengJin01", "name": "Cheng Jin"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/7d6f7da97052895affd10f250f1b380f471c59b3", "committedDate": "2020-04-13T21:20:38Z", "message": "Add test to verify the qualified UTF8 class name\n\nThe test is to verify the length of the class name\nwith UTF8 package path name in loading classes from\na specified jar file. [ci skip]\n\nSigned-off-by: Cheng Jin <jincheng@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNDYzMjM5", "url": "https://github.com/eclipse-openj9/openj9/pull/9229#pullrequestreview-392463239", "createdAt": "2020-04-13T21:47:35Z", "commit": {"oid": "7d6f7da97052895affd10f250f1b380f471c59b3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0ODQwNDU5", "url": "https://github.com/eclipse-openj9/openj9/pull/9229#pullrequestreview-394840459", "createdAt": "2020-04-16T17:16:29Z", "commit": {"oid": "7d6f7da97052895affd10f250f1b380f471c59b3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzoxNjoyOVrOGGvVVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzoxNjoyOVrOGGvVVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTcyMDE1MA==", "bodyText": "If it is 8+, we do not need this subsets at all. By default, it is 8+", "url": "https://github.com/eclipse-openj9/openj9/pull/9229#discussion_r409720150", "createdAt": "2020-04-16T17:16:29Z", "author": {"login": "llxia"}, "path": "test/functional/Java8andUp/playlist.xml", "diffHunk": "@@ -2562,5 +2562,30 @@\n \t\t\t<impl>ibm</impl>\n \t\t</impls>\n \t</test>\n+\t\n+\t<test>\n+\t\t<testCaseName>LoadClassWithUTF8PkgNameTest</testCaseName>\n+\t\t<command>$(ADD_JVM_LIB_DIR_TO_LIBPATH) $(JAVA_COMMAND) $(JVM_OPTIONS) \\\n+\t\t\t-cp $(Q)$(LIB_DIR)$(D)asm-all.jar$(P)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(Q) \\\n+\t\t\torg.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) \\\n+\t\t\t-testnames LoadClassWithUTF8PkgNameTest \\\n+\t\t\t-groups $(TEST_GROUP) \\\n+\t\t\t-excludegroups $(DEFAULT_EXCLUDE); \\\n+\t\t\t$(TEST_STATUS)\n+\t\t</command>\n+\t\t<levels>\n+\t\t\t<level>sanity</level>\n+\t\t</levels>\n+\t\t<groups>\n+\t\t\t<group>functional</group>\n+\t\t</groups>\n+\t\t<subsets>\n+\t\t\t<subset>8+</subset>\n+\t\t</subsets>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d6f7da97052895affd10f250f1b380f471c59b3"}, "originalPosition": 32}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a1677bab77fa9e417990897cda6ca4f772c9903", "author": {"user": {"login": "ChengJin01", "name": "Cheng Jin"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/0a1677bab77fa9e417990897cda6ca4f772c9903", "committedDate": "2020-04-16T17:54:40Z", "message": "Add test to verify the qualified UTF8 class name\n\nThe test is to verify the length of the class name\nwith UTF8 package path name in loading classes from\na specified jar file. [ci skip]\n\nSigned-off-by: Cheng Jin <jincheng@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7d6f7da97052895affd10f250f1b380f471c59b3", "author": {"user": {"login": "ChengJin01", "name": "Cheng Jin"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/7d6f7da97052895affd10f250f1b380f471c59b3", "committedDate": "2020-04-13T21:20:38Z", "message": "Add test to verify the qualified UTF8 class name\n\nThe test is to verify the length of the class name\nwith UTF8 package path name in loading classes from\na specified jar file. [ci skip]\n\nSigned-off-by: Cheng Jin <jincheng@ca.ibm.com>"}, "afterCommit": {"oid": "0a1677bab77fa9e417990897cda6ca4f772c9903", "author": {"user": {"login": "ChengJin01", "name": "Cheng Jin"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/0a1677bab77fa9e417990897cda6ca4f772c9903", "committedDate": "2020-04-16T17:54:40Z", "message": "Add test to verify the qualified UTF8 class name\n\nThe test is to verify the length of the class name\nwith UTF8 package path name in loading classes from\na specified jar file. [ci skip]\n\nSigned-off-by: Cheng Jin <jincheng@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1MDQzNDUy", "url": "https://github.com/eclipse-openj9/openj9/pull/9229#pullrequestreview-395043452", "createdAt": "2020-04-16T22:29:51Z", "commit": {"oid": "0a1677bab77fa9e417990897cda6ca4f772c9903"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1252, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}