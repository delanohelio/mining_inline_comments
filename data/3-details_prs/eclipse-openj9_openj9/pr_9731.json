{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0NjUxNDk4", "number": 9731, "title": "Add portable AOT support on x86", "bodyText": "TR::Compiler->target contains the host environment while TR::Compiler->relocatableTarget contains\nthe target environment that AOT compilations will use. TR::Compiler->relocatableTarget is set according\nto the presence of SCC, portable options and Docker containers. Then at the beginning of every compilation\n(in the constructor) we set the target to be TR::Compiler->target if JIT compilation and\nTR::Compiler->relocatableTarget if AOT compilation.\nThe following scenarios were considered:\n\nWhen there is no existing SCC and no portable option specified\n(-Xshareclasses:portable, -XX:+PortableShareClasses), we use the host processor for AOT\nWhen there is no existing SCC and has portable option specified, we use the hand-picked\nportable processor for AOT\nWhen there is no existing SCC and in container, we use the hand-picked portable processor\nfor AOT\nWhen there is existing SCC and it passes processor compatibility check, we use the processor\nstored in the SCC (ignoring portable options and whether we are in container or not)\nJITServer is not affected. Meaning JITServer will still use JITClient's processor information for\nall of its compilations regardless of the portable/inContainer/SCC options\n\ndepends on: eclipse/omr#4861\nIssue: #7966\nSigned-off-by: Harry Yu harryyu1994@gmail.com", "createdAt": "2020-05-28T18:14:17Z", "url": "https://github.com/eclipse-openj9/openj9/pull/9731", "merged": true, "mergeCommit": {"oid": "603499eb6b0c9ff3357a1c75069114c8e27b14f3"}, "closed": true, "closedAt": "2020-07-16T15:33:29Z", "author": {"login": "harryyu1994"}, "timelineItems": {"totalCount": 50, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABclyrq7ABqjMzODQyMjM3NTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc1PykqgFqTQ0OTI2NTE5Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "724d82456f3529495fc230dfada3689ed2d42be3", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/724d82456f3529495fc230dfada3689ed2d42be3", "committedDate": "2020-05-28T18:10:31Z", "message": "Create processor for portable AOT on x86\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}, "afterCommit": {"oid": "7c237312cc2cf6f65fe1ec109896b0d4240a67c5", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/7c237312cc2cf6f65fe1ec109896b0d4240a67c5", "committedDate": "2020-05-28T19:04:03Z", "message": "Create processor for portable AOT on x86\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7c237312cc2cf6f65fe1ec109896b0d4240a67c5", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/7c237312cc2cf6f65fe1ec109896b0d4240a67c5", "committedDate": "2020-05-28T19:04:03Z", "message": "Create processor for portable AOT on x86\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}, "afterCommit": {"oid": "390a4c215f0e611d8a6f09b91b94a8502ce2018c", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/390a4c215f0e611d8a6f09b91b94a8502ce2018c", "committedDate": "2020-05-28T19:22:15Z", "message": "Create processor for portable AOT on x86\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "390a4c215f0e611d8a6f09b91b94a8502ce2018c", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/390a4c215f0e611d8a6f09b91b94a8502ce2018c", "committedDate": "2020-05-28T19:22:15Z", "message": "Create processor for portable AOT on x86\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}, "afterCommit": {"oid": "6849d1af2f201ad1b0eb4dae5a7d0db408c254bb", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/6849d1af2f201ad1b0eb4dae5a7d0db408c254bb", "committedDate": "2020-06-01T19:59:21Z", "message": "Create processor for portable AOT on x86\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyODczNDA4", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#pullrequestreview-422873408", "createdAt": "2020-06-02T16:52:49Z", "commit": {"oid": "6ec2f952b3b4c161aa44a34eb48b6fc42d6b7c86"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNjo1Mjo0OVrOGd69Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNjo1Mjo0OVrOGd69Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAyNzg2Mw==", "bodyText": "This is a static. Does this work with extensible classes?\nI don't see detectRelocatable() being called anywhere in this changeset. It is called in OMR::CompilerEnv::initializeRelocatableTargetEnvironment() but will use its own definition of detectRelocatable I think.", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r434027863", "createdAt": "2020-06-02T16:52:49Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/x/env/J9CPU.hpp", "diffHunk": "@@ -66,12 +66,14 @@ class OMR_EXTENSIBLE CPU : public J9::CPU\n    CPU(const OMRProcessorDesc& processorDescription) : J9::CPU(processorDescription) {}\n \n public:\n+   \n+   static TR::CPU detectRelocatable(OMRPortLibrary * const omrPortLib);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ec2f952b3b4c161aa44a34eb48b6fc42d6b7c86"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6ec2f952b3b4c161aa44a34eb48b6fc42d6b7c86", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/6ec2f952b3b4c161aa44a34eb48b6fc42d6b7c86", "committedDate": "2020-06-02T01:16:14Z", "message": "fix"}, "afterCommit": {"oid": "ff7148930717efd89233f045def941a609553119", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/ff7148930717efd89233f045def941a609553119", "committedDate": "2020-06-02T18:40:09Z", "message": "fix"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3b20923f473603a10cc9041eef33440a60bb320d", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/3b20923f473603a10cc9041eef33440a60bb320d", "committedDate": "2020-06-04T15:13:44Z", "message": "fix relotarget"}, "afterCommit": {"oid": "4074d24a0ff40c5e08a46acd829ade5aa19088e5", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/4074d24a0ff40c5e08a46acd829ade5aa19088e5", "committedDate": "2020-06-04T15:34:59Z", "message": "fix relotarget"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3MzIzODA4", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#pullrequestreview-427323808", "createdAt": "2020-06-09T16:11:12Z", "commit": {"oid": "3fd9b06bd9bee0949fdcd63f7458cb9494f0e49f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "59bcbc8e4011a9663faa6ac984816ad8c512611f", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/59bcbc8e4011a9663faa6ac984816ad8c512611f", "committedDate": "2020-06-10T22:26:11Z", "message": "more comments"}, "afterCommit": {"oid": "948954a037baba3eaa2003119c95d4c7e3f44f4a", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/948954a037baba3eaa2003119c95d4c7e3f44f4a", "committedDate": "2020-06-16T21:29:57Z", "message": "Create processor for portable AOT on x86\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "948954a037baba3eaa2003119c95d4c7e3f44f4a", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/948954a037baba3eaa2003119c95d4c7e3f44f4a", "committedDate": "2020-06-16T21:29:57Z", "message": "Create processor for portable AOT on x86\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}, "afterCommit": {"oid": "4ce0403b5505e906833135025415f49c26ee25e4", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/4ce0403b5505e906833135025415f49c26ee25e4", "committedDate": "2020-06-16T21:41:49Z", "message": "Create processor for portable AOT on x86\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ee2b6abd6c268d1220e2892923105ec69fbfc59a", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/ee2b6abd6c268d1220e2892923105ec69fbfc59a", "committedDate": "2020-06-17T22:50:43Z", "message": "stuff"}, "afterCommit": {"oid": "35fd98236f453dcb244e68e87c7eca094b47757e", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/35fd98236f453dcb244e68e87c7eca094b47757e", "committedDate": "2020-06-18T18:28:34Z", "message": "Create processor for portable AOT on x86\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3209af25c657055b4b9b78589ac067b80a517569", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/3209af25c657055b4b9b78589ac067b80a517569", "committedDate": "2020-06-18T18:52:23Z", "message": "debug only"}, "afterCommit": {"oid": "eb97ecbf292b433b7583130b5005b560737572b3", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/eb97ecbf292b433b7583130b5005b560737572b3", "committedDate": "2020-06-18T19:01:05Z", "message": "debug only"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "49ded49c48a207029688a3b6b8c5ab4318cef930", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/49ded49c48a207029688a3b6b8c5ab4318cef930", "committedDate": "2020-06-18T19:34:20Z", "message": "tmp"}, "afterCommit": {"oid": "a98c2889259c5f4444e40902a3ac1100f1d73248", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/a98c2889259c5f4444e40902a3ac1100f1d73248", "committedDate": "2020-06-18T19:41:15Z", "message": "debug only"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a98c2889259c5f4444e40902a3ac1100f1d73248", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/a98c2889259c5f4444e40902a3ac1100f1d73248", "committedDate": "2020-06-18T19:41:15Z", "message": "debug only"}, "afterCommit": {"oid": "384abf154659b79bdeef06724ff2bfc2e14d0317", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/384abf154659b79bdeef06724ff2bfc2e14d0317", "committedDate": "2020-06-18T19:41:10Z", "message": "Create processor for portable AOT on x86\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "384abf154659b79bdeef06724ff2bfc2e14d0317", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/384abf154659b79bdeef06724ff2bfc2e14d0317", "committedDate": "2020-06-18T19:41:10Z", "message": "Create processor for portable AOT on x86\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}, "afterCommit": {"oid": "d40d236ffeb88422fe73652e867b827772133e72", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/d40d236ffeb88422fe73652e867b827772133e72", "committedDate": "2020-06-18T20:16:04Z", "message": "Add portable AOT support on x86\n\nIssue: #7966\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d40d236ffeb88422fe73652e867b827772133e72", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/d40d236ffeb88422fe73652e867b827772133e72", "committedDate": "2020-06-18T20:16:04Z", "message": "Add portable AOT support on x86\n\nIssue: #7966\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}, "afterCommit": {"oid": "93a24e55e306a8f39b8162338a601e6967d6d221", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/93a24e55e306a8f39b8162338a601e6967d6d221", "committedDate": "2020-06-18T20:21:53Z", "message": "Add portable AOT support on x86\n\nWhen there is no existing SCC and no portable option specified (-Xshareclasses:portable, -XX:+PortableShareClasses), we use the host processor for AOT\nWhen there is no existing SCC and has portable option specified, we use the hand-picked portable processor for AOT\nWhen there is no existing SCC and in container, we use the hand-picked portable processor for AOT\nWhen there is existing SCC and it passes processor compatibility check, we use the processor stored in the SCC (ignoring portable options and whether we are in container or not)\n\nIssue: #7966\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "93a24e55e306a8f39b8162338a601e6967d6d221", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/93a24e55e306a8f39b8162338a601e6967d6d221", "committedDate": "2020-06-18T20:21:53Z", "message": "Add portable AOT support on x86\n\nWhen there is no existing SCC and no portable option specified (-Xshareclasses:portable, -XX:+PortableShareClasses), we use the host processor for AOT\nWhen there is no existing SCC and has portable option specified, we use the hand-picked portable processor for AOT\nWhen there is no existing SCC and in container, we use the hand-picked portable processor for AOT\nWhen there is existing SCC and it passes processor compatibility check, we use the processor stored in the SCC (ignoring portable options and whether we are in container or not)\n\nIssue: #7966\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}, "afterCommit": {"oid": "57fde61e5a4eaf81e2810d6e3d39c1c059fa5290", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/57fde61e5a4eaf81e2810d6e3d39c1c059fa5290", "committedDate": "2020-06-18T20:24:22Z", "message": "Add portable AOT support on x86\n\nWhen there is no existing SCC and no portable option specified (-Xshareclasses:portable, -XX:+PortableShareClasses), we use the host processor for AOT\nWhen there is no existing SCC and has portable option specified, we use the hand-picked portable processor for AOT\nWhen there is no existing SCC and in container, we use the hand-picked portable processor for AOT\nWhen there is existing SCC and it passes processor compatibility check, we use the processor stored in the SCC (ignoring portable options and whether we are in container or not)\n\nIssue: #7966\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "57fde61e5a4eaf81e2810d6e3d39c1c059fa5290", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/57fde61e5a4eaf81e2810d6e3d39c1c059fa5290", "committedDate": "2020-06-18T20:24:22Z", "message": "Add portable AOT support on x86\n\nWhen there is no existing SCC and no portable option specified (-Xshareclasses:portable, -XX:+PortableShareClasses), we use the host processor for AOT\nWhen there is no existing SCC and has portable option specified, we use the hand-picked portable processor for AOT\nWhen there is no existing SCC and in container, we use the hand-picked portable processor for AOT\nWhen there is existing SCC and it passes processor compatibility check, we use the processor stored in the SCC (ignoring portable options and whether we are in container or not)\n\nIssue: #7966\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}, "afterCommit": {"oid": "34739b40778183b7e57460357df4283fb0cab083", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/34739b40778183b7e57460357df4283fb0cab083", "committedDate": "2020-06-18T20:44:52Z", "message": "Add portable AOT support on x86\n\nTR::Compiler->target contains the host environment while TR::Compiler->relocatableTarget contains\nthe target environment that AOT compilations will use. TR::Compiler->relocatableTarget is set according\nto the presence of SCC, portable options and Docker containers. Then at the beginning of every compilation\n(in the constructor) we set the target to be TR::Compiler->target if JIT compilation and\nTR::Compiler->relocatableTarget if AOT compilation.\nThe following scenarios were considered:\n\nWhen there is no existing SCC and no portable option specified\n(-Xshareclasses:portable, -XX:+PortableShareClasses), we use the host processor for AOT\nWhen there is no existing SCC and has portable option specified, we use the hand-picked\nportable processor for AOT\nWhen there is no existing SCC and in container, we use the hand-picked portable processor\nfor AOT\nWhen there is existing SCC and it passes processor compatibility check, we use the processor\nstored in the SCC (ignoring portable options and whether we are in container or not)\nJITServer is not affected. Meaning JITServer will still use JITClient's processor information for\nall of its compilations regardless of the portable/inContainer/SCC options\ndepends on: eclipse/omr#4861\nIssue: #7966\n\nSigned-off-by: Harry Yu harryyu1994@gmail.com"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "34739b40778183b7e57460357df4283fb0cab083", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/34739b40778183b7e57460357df4283fb0cab083", "committedDate": "2020-06-18T20:44:52Z", "message": "Add portable AOT support on x86\n\nTR::Compiler->target contains the host environment while TR::Compiler->relocatableTarget contains\nthe target environment that AOT compilations will use. TR::Compiler->relocatableTarget is set according\nto the presence of SCC, portable options and Docker containers. Then at the beginning of every compilation\n(in the constructor) we set the target to be TR::Compiler->target if JIT compilation and\nTR::Compiler->relocatableTarget if AOT compilation.\nThe following scenarios were considered:\n\nWhen there is no existing SCC and no portable option specified\n(-Xshareclasses:portable, -XX:+PortableShareClasses), we use the host processor for AOT\nWhen there is no existing SCC and has portable option specified, we use the hand-picked\nportable processor for AOT\nWhen there is no existing SCC and in container, we use the hand-picked portable processor\nfor AOT\nWhen there is existing SCC and it passes processor compatibility check, we use the processor\nstored in the SCC (ignoring portable options and whether we are in container or not)\nJITServer is not affected. Meaning JITServer will still use JITClient's processor information for\nall of its compilations regardless of the portable/inContainer/SCC options\ndepends on: eclipse/omr#4861\nIssue: #7966\n\nSigned-off-by: Harry Yu harryyu1994@gmail.com"}, "afterCommit": {"oid": "01e7197c379784fdf99602da6664d723d59fd044", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/01e7197c379784fdf99602da6664d723d59fd044", "committedDate": "2020-06-18T20:46:16Z", "message": "Add portable AOT support on x86\n\nTR::Compiler->target contains the host environment while TR::Compiler->relocatableTarget contains\nthe target environment that AOT compilations will use. TR::Compiler->relocatableTarget is set according\nto the presence of SCC, portable options and Docker containers. Then at the beginning of every compilation\n(in the constructor) we set the target to be TR::Compiler->target if JIT compilation and\nTR::Compiler->relocatableTarget if AOT compilation.\nThe following scenarios were considered:\n\nWhen there is no existing SCC and no portable option specified\n(-Xshareclasses:portable, -XX:+PortableShareClasses), we use the host processor for AOT\nWhen there is no existing SCC and has portable option specified, we use the hand-picked\nportable processor for AOT\nWhen there is no existing SCC and in container, we use the hand-picked portable processor\nfor AOT\nWhen there is existing SCC and it passes processor compatibility check, we use the processor\nstored in the SCC (ignoring portable options and whether we are in container or not)\nJITServer is not affected. Meaning JITServer will still use JITClient's processor information for\nall of its compilations regardless of the portable/inContainer/SCC options\ndepends on: eclipse/omr#4861\nIssue: #7966\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "01e7197c379784fdf99602da6664d723d59fd044", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/01e7197c379784fdf99602da6664d723d59fd044", "committedDate": "2020-06-18T20:46:16Z", "message": "Add portable AOT support on x86\n\nTR::Compiler->target contains the host environment while TR::Compiler->relocatableTarget contains\nthe target environment that AOT compilations will use. TR::Compiler->relocatableTarget is set according\nto the presence of SCC, portable options and Docker containers. Then at the beginning of every compilation\n(in the constructor) we set the target to be TR::Compiler->target if JIT compilation and\nTR::Compiler->relocatableTarget if AOT compilation.\nThe following scenarios were considered:\n\nWhen there is no existing SCC and no portable option specified\n(-Xshareclasses:portable, -XX:+PortableShareClasses), we use the host processor for AOT\nWhen there is no existing SCC and has portable option specified, we use the hand-picked\nportable processor for AOT\nWhen there is no existing SCC and in container, we use the hand-picked portable processor\nfor AOT\nWhen there is existing SCC and it passes processor compatibility check, we use the processor\nstored in the SCC (ignoring portable options and whether we are in container or not)\nJITServer is not affected. Meaning JITServer will still use JITClient's processor information for\nall of its compilations regardless of the portable/inContainer/SCC options\ndepends on: eclipse/omr#4861\nIssue: #7966\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}, "afterCommit": {"oid": "22d1ef39810d678506f65baeb040de2b29551a9e", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/22d1ef39810d678506f65baeb040de2b29551a9e", "committedDate": "2020-06-19T20:38:54Z", "message": "Add portable AOT support on x86\n\nTR::Compiler->target contains the host environment while TR::Compiler->relocatableTarget contains\nthe target environment that AOT compilations will use. TR::Compiler->relocatableTarget is set according\nto the presence of SCC, portable options and Docker containers. Then at the beginning of every compilation\n(in the constructor) we set the target to be TR::Compiler->target if JIT compilation and\nTR::Compiler->relocatableTarget if AOT compilation.\nThe following scenarios were considered:\n\nWhen there is no existing SCC and no portable option specified\n(-Xshareclasses:portable, -XX:+PortableShareClasses), we use the host processor for AOT\nWhen there is no existing SCC and has portable option specified, we use the hand-picked\nportable processor for AOT\nWhen there is no existing SCC and in container, we use the hand-picked portable processor\nfor AOT\nWhen there is existing SCC and it passes processor compatibility check, we use the processor\nstored in the SCC (ignoring portable options and whether we are in container or not)\nJITServer is not affected. Meaning JITServer will still use JITClient's processor information for\nall of its compilations regardless of the portable/inContainer/SCC options\ndepends on: eclipse/omr#4861\nIssue: #7966\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "22d1ef39810d678506f65baeb040de2b29551a9e", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/22d1ef39810d678506f65baeb040de2b29551a9e", "committedDate": "2020-06-19T20:38:54Z", "message": "Add portable AOT support on x86\n\nTR::Compiler->target contains the host environment while TR::Compiler->relocatableTarget contains\nthe target environment that AOT compilations will use. TR::Compiler->relocatableTarget is set according\nto the presence of SCC, portable options and Docker containers. Then at the beginning of every compilation\n(in the constructor) we set the target to be TR::Compiler->target if JIT compilation and\nTR::Compiler->relocatableTarget if AOT compilation.\nThe following scenarios were considered:\n\nWhen there is no existing SCC and no portable option specified\n(-Xshareclasses:portable, -XX:+PortableShareClasses), we use the host processor for AOT\nWhen there is no existing SCC and has portable option specified, we use the hand-picked\nportable processor for AOT\nWhen there is no existing SCC and in container, we use the hand-picked portable processor\nfor AOT\nWhen there is existing SCC and it passes processor compatibility check, we use the processor\nstored in the SCC (ignoring portable options and whether we are in container or not)\nJITServer is not affected. Meaning JITServer will still use JITClient's processor information for\nall of its compilations regardless of the portable/inContainer/SCC options\ndepends on: eclipse/omr#4861\nIssue: #7966\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}, "afterCommit": {"oid": "47188d1f3726239a982a5c237b9da077aec3096d", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/47188d1f3726239a982a5c237b9da077aec3096d", "committedDate": "2020-06-19T21:09:51Z", "message": "Add portable AOT support on x86\n\nTR::Compiler->target contains the host environment while TR::Compiler->relocatableTarget contains\nthe target environment that AOT compilations will use. TR::Compiler->relocatableTarget is set according\nto the presence of SCC, portable options and Docker containers. Then at the beginning of every compilation\n(in the constructor) we set the target to be TR::Compiler->target if JIT compilation and\nTR::Compiler->relocatableTarget if AOT compilation.\nThe following scenarios were considered:\n\nWhen there is no existing SCC and no portable option specified\n(-Xshareclasses:portable, -XX:+PortableShareClasses), we use the host processor for AOT\nWhen there is no existing SCC and has portable option specified, we use the hand-picked\nportable processor for AOT\nWhen there is no existing SCC and in container, we use the hand-picked portable processor\nfor AOT\nWhen there is existing SCC and it passes processor compatibility check, we use the processor\nstored in the SCC (ignoring portable options and whether we are in container or not)\nJITServer is not affected. Meaning JITServer will still use JITClient's processor information for\nall of its compilations regardless of the portable/inContainer/SCC options\ndepends on: eclipse/omr#4861\nIssue: #7966\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "47188d1f3726239a982a5c237b9da077aec3096d", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/47188d1f3726239a982a5c237b9da077aec3096d", "committedDate": "2020-06-19T21:09:51Z", "message": "Add portable AOT support on x86\n\nTR::Compiler->target contains the host environment while TR::Compiler->relocatableTarget contains\nthe target environment that AOT compilations will use. TR::Compiler->relocatableTarget is set according\nto the presence of SCC, portable options and Docker containers. Then at the beginning of every compilation\n(in the constructor) we set the target to be TR::Compiler->target if JIT compilation and\nTR::Compiler->relocatableTarget if AOT compilation.\nThe following scenarios were considered:\n\nWhen there is no existing SCC and no portable option specified\n(-Xshareclasses:portable, -XX:+PortableShareClasses), we use the host processor for AOT\nWhen there is no existing SCC and has portable option specified, we use the hand-picked\nportable processor for AOT\nWhen there is no existing SCC and in container, we use the hand-picked portable processor\nfor AOT\nWhen there is existing SCC and it passes processor compatibility check, we use the processor\nstored in the SCC (ignoring portable options and whether we are in container or not)\nJITServer is not affected. Meaning JITServer will still use JITClient's processor information for\nall of its compilations regardless of the portable/inContainer/SCC options\ndepends on: eclipse/omr#4861\nIssue: #7966\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}, "afterCommit": {"oid": "5889df4ce6f4a7c22f77d252b1a36eca3821ea0d", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/5889df4ce6f4a7c22f77d252b1a36eca3821ea0d", "committedDate": "2020-06-22T06:11:57Z", "message": "Add portable AOT support on x86\n\nTR::Compiler->target contains the host environment while TR::Compiler->relocatableTarget contains\nthe target environment that AOT compilations will use. TR::Compiler->relocatableTarget is set according\nto the presence of SCC, portable options and Docker containers. Then at the beginning of every compilation\n(in the constructor) we set the target to be TR::Compiler->target if JIT compilation and\nTR::Compiler->relocatableTarget if AOT compilation.\nThe following scenarios were considered:\n\nWhen there is no existing SCC and no portable option specified\n(-Xshareclasses:portable, -XX:+PortableShareClasses), we use the host processor for AOT\nWhen there is no existing SCC and has portable option specified, we use the hand-picked\nportable processor for AOT\nWhen there is no existing SCC and in container, we use the hand-picked portable processor\nfor AOT\nWhen there is existing SCC and it passes processor compatibility check, we use the processor\nstored in the SCC (ignoring portable options and whether we are in container or not)\nJITServer is not affected. Meaning JITServer will still use JITClient's processor information for\nall of its compilations regardless of the portable/inContainer/SCC options\ndepends on: eclipse/omr#4861\nIssue: #7966\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5889df4ce6f4a7c22f77d252b1a36eca3821ea0d", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/5889df4ce6f4a7c22f77d252b1a36eca3821ea0d", "committedDate": "2020-06-22T06:11:57Z", "message": "Add portable AOT support on x86\n\nTR::Compiler->target contains the host environment while TR::Compiler->relocatableTarget contains\nthe target environment that AOT compilations will use. TR::Compiler->relocatableTarget is set according\nto the presence of SCC, portable options and Docker containers. Then at the beginning of every compilation\n(in the constructor) we set the target to be TR::Compiler->target if JIT compilation and\nTR::Compiler->relocatableTarget if AOT compilation.\nThe following scenarios were considered:\n\nWhen there is no existing SCC and no portable option specified\n(-Xshareclasses:portable, -XX:+PortableShareClasses), we use the host processor for AOT\nWhen there is no existing SCC and has portable option specified, we use the hand-picked\nportable processor for AOT\nWhen there is no existing SCC and in container, we use the hand-picked portable processor\nfor AOT\nWhen there is existing SCC and it passes processor compatibility check, we use the processor\nstored in the SCC (ignoring portable options and whether we are in container or not)\nJITServer is not affected. Meaning JITServer will still use JITClient's processor information for\nall of its compilations regardless of the portable/inContainer/SCC options\ndepends on: eclipse/omr#4861\nIssue: #7966\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}, "afterCommit": {"oid": "e065401b9924ff668bec6731d39df075fd2ee12f", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/e065401b9924ff668bec6731d39df075fd2ee12f", "committedDate": "2020-06-22T13:54:15Z", "message": "Add portable AOT support on x86\n\nTR::Compiler->target contains the host environment while TR::Compiler->relocatableTarget contains\nthe target environment that AOT compilations will use. TR::Compiler->relocatableTarget is set according\nto the presence of SCC, portable options and Docker containers. Then at the beginning of every compilation\n(in the constructor) we set the target to be TR::Compiler->target if JIT compilation and\nTR::Compiler->relocatableTarget if AOT compilation.\nThe following scenarios were considered:\n\nWhen there is no existing SCC and no portable option specified\n(-Xshareclasses:portable, -XX:+PortableShareClasses), we use the host processor for AOT\nWhen there is no existing SCC and has portable option specified, we use the hand-picked\nportable processor for AOT\nWhen there is no existing SCC and in container, we use the hand-picked portable processor\nfor AOT\nWhen there is existing SCC and it passes processor compatibility check, we use the processor\nstored in the SCC (ignoring portable options and whether we are in container or not)\nJITServer is not affected. Meaning JITServer will still use JITClient's processor information for\nall of its compilations regardless of the portable/inContainer/SCC options\ndepends on: eclipse/omr#4861\nIssue: #7966\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0OTA5MDIz", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#pullrequestreview-434909023", "createdAt": "2020-06-22T13:13:37Z", "commit": {"oid": "5889df4ce6f4a7c22f77d252b1a36eca3821ea0d"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMzoxMzozN1rOGnABTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDozNTo1NFrOGnDiNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU0Nzk4MQ==", "bodyText": "For JITServer we set only the cpu while for non-jitserver we set the entire _target field.", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r443547981", "createdAt": "2020-06-22T13:13:37Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/compile/J9Compilation.cpp", "diffHunk": "@@ -183,13 +183,22 @@ J9::Compilation::Compilation(int32_t id,\n #endif /* defined(J9VM_OPT_JITSERVER) */\n    _osrProhibitedOverRangeOfTrees(false)\n    {\n-\n #if defined(J9VM_OPT_JITSERVER)\n    // In JITServer, we would like to use JITClient's processor info for the compilation\n    // The following code effectively replaces the cpu with client's cpu through the getProcessorDescription() that has JITServer support\n    if (self()->getPersistentInfo()->getRemoteCompilationMode() == JITServer::SERVER)\n-      _target.cpu = TR::CPU(TR::Compiler->target.cpu.getProcessorDescription());\n+      {\n+      OMRProcessorDesc JITClientProcessorDesc = TR::Compiler->target.cpu.getProcessorDescription();\n+      _target.cpu = TR::CPU(JITClientProcessorDesc);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5889df4ce6f4a7c22f77d252b1a36eca3821ea0d"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU1MTAxOQ==", "bodyText": "This could be made ASSERT_FATAL if it's never supposed to be hit", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r443551019", "createdAt": "2020-06-22T13:18:36Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/runtime/RelocationRuntime.cpp", "diffHunk": "@@ -773,6 +773,13 @@ TR_RelocationRuntime::validateAOTHeader(TR_FrontEnd *fe, J9VMThread *curThread)\n    return false;\n    }\n \n+OMRProcessorDesc\n+TR_RelocationRuntime::getProcessorDescription(TR_FrontEnd *fe, J9VMThread *curThread)\n+   {\n+   TR_ASSERT(0, \"Error: getProcessorDescription not supported in this relocation runtime\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5889df4ce6f4a7c22f77d252b1a36eca3821ea0d"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU5ODI2Mw==", "bodyText": "I don't see applyUserOptions for x86", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r443598263", "createdAt": "2020-06-22T14:26:39Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/env/ProcessorDetection.cpp", "diffHunk": "@@ -648,10 +648,12 @@ void\n TR_J9VM::initializeProcessorType()\n    {\n    TR_ASSERT(_compInfo,\"compInfo not defined\");\n-   TR::Compiler->target.cpu.applyUserOptions();\n \n    if (TR::Compiler->target.cpu.isZ())\n       {\n+      TR::Compiler->target.cpu.applyUserOptions();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e065401b9924ff668bec6731d39df075fd2ee12f"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYwNTU1Nw==", "bodyText": "A doxygen comment would be nice here", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r443605557", "createdAt": "2020-06-22T14:35:54Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/x/env/J9CPU.hpp", "diffHunk": "@@ -51,13 +51,15 @@ class OMR_EXTENSIBLE CPU : public J9::CPU\n    CPU(const OMRProcessorDesc& processorDescription) : J9::CPU(processorDescription) {}\n \n public:\n+   ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e065401b9924ff668bec6731d39df075fd2ee12f"}, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e065401b9924ff668bec6731d39df075fd2ee12f", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/e065401b9924ff668bec6731d39df075fd2ee12f", "committedDate": "2020-06-22T13:54:15Z", "message": "Add portable AOT support on x86\n\nTR::Compiler->target contains the host environment while TR::Compiler->relocatableTarget contains\nthe target environment that AOT compilations will use. TR::Compiler->relocatableTarget is set according\nto the presence of SCC, portable options and Docker containers. Then at the beginning of every compilation\n(in the constructor) we set the target to be TR::Compiler->target if JIT compilation and\nTR::Compiler->relocatableTarget if AOT compilation.\nThe following scenarios were considered:\n\nWhen there is no existing SCC and no portable option specified\n(-Xshareclasses:portable, -XX:+PortableShareClasses), we use the host processor for AOT\nWhen there is no existing SCC and has portable option specified, we use the hand-picked\nportable processor for AOT\nWhen there is no existing SCC and in container, we use the hand-picked portable processor\nfor AOT\nWhen there is existing SCC and it passes processor compatibility check, we use the processor\nstored in the SCC (ignoring portable options and whether we are in container or not)\nJITServer is not affected. Meaning JITServer will still use JITClient's processor information for\nall of its compilations regardless of the portable/inContainer/SCC options\ndepends on: eclipse/omr#4861\nIssue: #7966\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}, "afterCommit": {"oid": "854c090f4f283e6f1b5640101d3a654b9233e45b", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/854c090f4f283e6f1b5640101d3a654b9233e45b", "committedDate": "2020-06-22T15:28:15Z", "message": "Add portable AOT support on x86\n\nTR::Compiler->target contains the host environment while TR::Compiler->relocatableTarget contains\nthe target environment that AOT compilations will use. TR::Compiler->relocatableTarget is set according\nto the presence of SCC, portable options and Docker containers. Then at the beginning of every compilation\n(in the constructor) we set the target to be TR::Compiler->target if JIT compilation and\nTR::Compiler->relocatableTarget if AOT compilation.\nThe following scenarios were considered:\n\nWhen there is no existing SCC and no portable option specified\n(-Xshareclasses:portable, -XX:+PortableShareClasses), we use the host processor for AOT\nWhen there is no existing SCC and has portable option specified, we use the hand-picked\nportable processor for AOT\nWhen there is no existing SCC and in container, we use the hand-picked portable processor\nfor AOT\nWhen there is existing SCC and it passes processor compatibility check, we use the processor\nstored in the SCC (ignoring portable options and whether we are in container or not)\nJITServer is not affected. Meaning JITServer will still use JITClient's processor information for\nall of its compilations regardless of the portable/inContainer/SCC options\ndepends on: eclipse/omr#4861\nIssue: #7966\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "854c090f4f283e6f1b5640101d3a654b9233e45b", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/854c090f4f283e6f1b5640101d3a654b9233e45b", "committedDate": "2020-06-22T15:28:15Z", "message": "Add portable AOT support on x86\n\nTR::Compiler->target contains the host environment while TR::Compiler->relocatableTarget contains\nthe target environment that AOT compilations will use. TR::Compiler->relocatableTarget is set according\nto the presence of SCC, portable options and Docker containers. Then at the beginning of every compilation\n(in the constructor) we set the target to be TR::Compiler->target if JIT compilation and\nTR::Compiler->relocatableTarget if AOT compilation.\nThe following scenarios were considered:\n\nWhen there is no existing SCC and no portable option specified\n(-Xshareclasses:portable, -XX:+PortableShareClasses), we use the host processor for AOT\nWhen there is no existing SCC and has portable option specified, we use the hand-picked\nportable processor for AOT\nWhen there is no existing SCC and in container, we use the hand-picked portable processor\nfor AOT\nWhen there is existing SCC and it passes processor compatibility check, we use the processor\nstored in the SCC (ignoring portable options and whether we are in container or not)\nJITServer is not affected. Meaning JITServer will still use JITClient's processor information for\nall of its compilations regardless of the portable/inContainer/SCC options\ndepends on: eclipse/omr#4861\nIssue: #7966\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}, "afterCommit": {"oid": "235ac7d93a4aac599c9e2dedb07a150a5ece1a24", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/235ac7d93a4aac599c9e2dedb07a150a5ece1a24", "committedDate": "2020-06-22T15:31:54Z", "message": "Add portable AOT support on x86\n\nTR::Compiler->target contains the host environment while TR::Compiler->relocatableTarget contains\nthe target environment that AOT compilations will use. TR::Compiler->relocatableTarget is set according\nto the presence of SCC, portable options and Docker containers. Then at the beginning of every compilation\n(in the constructor) we set the target to be TR::Compiler->target if JIT compilation and\nTR::Compiler->relocatableTarget if AOT compilation.\nThe following scenarios were considered:\n\nWhen there is no existing SCC and no portable option specified\n(-Xshareclasses:portable, -XX:+PortableShareClasses), we use the host processor for AOT\nWhen there is no existing SCC and has portable option specified, we use the hand-picked\nportable processor for AOT\nWhen there is no existing SCC and in container, we use the hand-picked portable processor\nfor AOT\nWhen there is existing SCC and it passes processor compatibility check, we use the processor\nstored in the SCC (ignoring portable options and whether we are in container or not)\nJITServer is not affected. Meaning JITServer will still use JITClient's processor information for\nall of its compilations regardless of the portable/inContainer/SCC options\ndepends on: eclipse/omr#4861\nIssue: #7966\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MDUyNDAz", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#pullrequestreview-435052403", "createdAt": "2020-06-22T15:45:38Z", "commit": {"oid": "235ac7d93a4aac599c9e2dedb07a150a5ece1a24"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNTo0NTozOFrOGnGkYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNTo0NTozOFrOGnGkYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY1NTI2NA==", "bodyText": "what is the default initialization value of vm->sharedCacheAPI->sharedCachePortable if we don't execute either of these paths?", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r443655264", "createdAt": "2020-06-22T15:45:38Z", "author": {"login": "dsouzai"}, "path": "runtime/shared/shrclssup.c", "diffHunk": "@@ -141,6 +141,20 @@ IDATA J9VMDllMain(J9JavaVM* vm, IDATA stage, void* reserved)\n \t\t\t\t\truntimeFlags |= J9SHR_RUNTIMEFLAG_DISABLE_BCI;\n \t\t\t\t}\n \n+\t\t\t\t/* Check for -XX:+PortableShareClasses and -XX:-PortableShareClasses; whichever comes later wins.\n+\t\t\t\t * These options should be checked before parseArgs() to allow -Xshareclasses:portable to override this option.\n+\t\t\t\t * \n+\t\t\t\t * Note: Please also change the function checkArgsConsumed() in runtime/vm/jvminit.c when adding new options,\n+\t\t\t\t * in order to quietly consume the options if it is used without -Xshareclasses\n+\t\t\t\t */\n+\t\t\t\targIndex1 = FIND_AND_CONSUME_ARG(EXACT_MATCH, VMOPT_XXSHARECLASSESPORTABLE, NULL);\n+\t\t\t\targIndex2 = FIND_AND_CONSUME_ARG(EXACT_MATCH, VMOPT_XXNOSHARECLASSESPORTABLE, NULL);\n+\t\t\t\tif (argIndex1 > argIndex2) {\n+\t\t\t\t\tvm->sharedCacheAPI->sharedCachePortable = TRUE;\n+\t\t\t\t} else if (argIndex2 > argIndex1) {\n+\t\t\t\t\tvm->sharedCacheAPI->sharedCachePortable = FALSE;\n+\t\t\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "235ac7d93a4aac599c9e2dedb07a150a5ece1a24"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MDU0Njkz", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#pullrequestreview-435054693", "createdAt": "2020-06-22T15:48:13Z", "commit": {"oid": "235ac7d93a4aac599c9e2dedb07a150a5ece1a24"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNTo0ODoxM1rOGnGrLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNTo0ODoxM1rOGnGrLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY1NzAwNQ==", "bodyText": "maybe just move this to the header file like you did for TR_JITServerRelocationRuntime::getProcessorDescription", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r443657005", "createdAt": "2020-06-22T15:48:13Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/runtime/RelocationRuntime.cpp", "diffHunk": "@@ -773,6 +773,13 @@ TR_RelocationRuntime::validateAOTHeader(TR_FrontEnd *fe, J9VMThread *curThread)\n    return false;\n    }\n \n+OMRProcessorDesc\n+TR_RelocationRuntime::getProcessorDescription(TR_FrontEnd *fe, J9VMThread *curThread)\n+   {\n+   TR_ASSERT_FATAL(0, \"Error: getProcessorDescription not supported in this relocation runtime\");\n+   return OMRProcessorDesc();\n+   }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "235ac7d93a4aac599c9e2dedb07a150a5ece1a24"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MDU1ODY1", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#pullrequestreview-435055865", "createdAt": "2020-06-22T15:49:31Z", "commit": {"oid": "235ac7d93a4aac599c9e2dedb07a150a5ece1a24"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "235ac7d93a4aac599c9e2dedb07a150a5ece1a24", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/235ac7d93a4aac599c9e2dedb07a150a5ece1a24", "committedDate": "2020-06-22T15:31:54Z", "message": "Add portable AOT support on x86\n\nTR::Compiler->target contains the host environment while TR::Compiler->relocatableTarget contains\nthe target environment that AOT compilations will use. TR::Compiler->relocatableTarget is set according\nto the presence of SCC, portable options and Docker containers. Then at the beginning of every compilation\n(in the constructor) we set the target to be TR::Compiler->target if JIT compilation and\nTR::Compiler->relocatableTarget if AOT compilation.\nThe following scenarios were considered:\n\nWhen there is no existing SCC and no portable option specified\n(-Xshareclasses:portable, -XX:+PortableShareClasses), we use the host processor for AOT\nWhen there is no existing SCC and has portable option specified, we use the hand-picked\nportable processor for AOT\nWhen there is no existing SCC and in container, we use the hand-picked portable processor\nfor AOT\nWhen there is existing SCC and it passes processor compatibility check, we use the processor\nstored in the SCC (ignoring portable options and whether we are in container or not)\nJITServer is not affected. Meaning JITServer will still use JITClient's processor information for\nall of its compilations regardless of the portable/inContainer/SCC options\ndepends on: eclipse/omr#4861\nIssue: #7966\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}, "afterCommit": {"oid": "1266e5de9c5866ca15ace5b5d8843af2fb8aad99", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/1266e5de9c5866ca15ace5b5d8843af2fb8aad99", "committedDate": "2020-06-22T15:53:59Z", "message": "Add portable AOT support on x86\n\nTR::Compiler->target contains the host environment while TR::Compiler->relocatableTarget contains\nthe target environment that AOT compilations will use. TR::Compiler->relocatableTarget is set according\nto the presence of SCC, portable options and Docker containers. Then at the beginning of every compilation\n(in the constructor) we set the target to be TR::Compiler->target if JIT compilation and\nTR::Compiler->relocatableTarget if AOT compilation.\nThe following scenarios were considered:\n\nWhen there is no existing SCC and no portable option specified\n(-Xshareclasses:portable, -XX:+PortableShareClasses), we use the host processor for AOT\nWhen there is no existing SCC and has portable option specified, we use the hand-picked\nportable processor for AOT\nWhen there is no existing SCC and in container, we use the hand-picked portable processor\nfor AOT\nWhen there is existing SCC and it passes processor compatibility check, we use the processor\nstored in the SCC (ignoring portable options and whether we are in container or not)\nJITServer is not affected. Meaning JITServer will still use JITClient's processor information for\nall of its compilations regardless of the portable/inContainer/SCC options\ndepends on: eclipse/omr#4861\nIssue: #7966\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MDYyNTMw", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#pullrequestreview-435062530", "createdAt": "2020-06-22T15:57:01Z", "commit": {"oid": "1266e5de9c5866ca15ace5b5d8843af2fb8aad99"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNTo1NzowMlrOGnHCsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNTo1NzowMlrOGnHCsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2MzAyNg==", "bodyText": "I guess this needs to be inside #if !defined(J9ZOS390) ?", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r443663026", "createdAt": "2020-06-22T15:57:02Z", "author": {"login": "hangshao0"}, "path": "runtime/shared_common/shrinit.cpp", "diffHunk": "@@ -264,6 +264,7 @@ J9SharedClassesHelpText J9SHAREDCLASSESHELPTEXT[] = {\n \t{HELPTEXT_LAYER_EQUALS,J9NLS_SHRC_SHRINIT_HELPTEXT_LAYER_EQUALS, 0, 0},\n \t{OPTION_CREATE_LAYER, J9NLS_SHRC_SHRINIT_HELPTEXT_CREATE_LAYER, 0, 0},\n #endif /* J9VM_OPT_MULTI_LAYER_SHARED_CLASS_CACHE */\n+\t{OPTION_PORTABLE, J9NLS_SHRC_SHRINIT_HELPTEXT_PORTABLE, 0, 0},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1266e5de9c5866ca15ace5b5d8843af2fb8aad99"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MDc0MTYx", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#pullrequestreview-435074161", "createdAt": "2020-06-22T16:10:25Z", "commit": {"oid": "1266e5de9c5866ca15ace5b5d8843af2fb8aad99"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNjoxMDoyNVrOGnHlBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNjoxMDoyNVrOGnHlBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3MTgxNQ==", "bodyText": "@hangshao0 Not sure if I should add this or this is someone else's job. It looks like it needs to be in multiple languages.", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r443671815", "createdAt": "2020-06-22T16:10:25Z", "author": {"login": "harryyu1994"}, "path": "runtime/nls/shrc/j9shr.nls", "diffHunk": "@@ -6802,6 +6802,13 @@ J9NLS_SHRC_SHRINIT_HELPTEXT_CREATE_LAYER.system_action=\n J9NLS_SHRC_SHRINIT_HELPTEXT_CREATE_LAYER.user_response=\n # END NON-TRANSLATABLE\n \n+J9NLS_SHRC_SHRINIT_HELPTEXT_PORTABLE=Enable the shared cache to be portable.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1266e5de9c5866ca15ace5b5d8843af2fb8aad99"}, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1266e5de9c5866ca15ace5b5d8843af2fb8aad99", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/1266e5de9c5866ca15ace5b5d8843af2fb8aad99", "committedDate": "2020-06-22T15:53:59Z", "message": "Add portable AOT support on x86\n\nTR::Compiler->target contains the host environment while TR::Compiler->relocatableTarget contains\nthe target environment that AOT compilations will use. TR::Compiler->relocatableTarget is set according\nto the presence of SCC, portable options and Docker containers. Then at the beginning of every compilation\n(in the constructor) we set the target to be TR::Compiler->target if JIT compilation and\nTR::Compiler->relocatableTarget if AOT compilation.\nThe following scenarios were considered:\n\nWhen there is no existing SCC and no portable option specified\n(-Xshareclasses:portable, -XX:+PortableShareClasses), we use the host processor for AOT\nWhen there is no existing SCC and has portable option specified, we use the hand-picked\nportable processor for AOT\nWhen there is no existing SCC and in container, we use the hand-picked portable processor\nfor AOT\nWhen there is existing SCC and it passes processor compatibility check, we use the processor\nstored in the SCC (ignoring portable options and whether we are in container or not)\nJITServer is not affected. Meaning JITServer will still use JITClient's processor information for\nall of its compilations regardless of the portable/inContainer/SCC options\ndepends on: eclipse/omr#4861\nIssue: #7966\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}, "afterCommit": {"oid": "fd3139fcccc9d91c74b1e12a40f87ebd34ec6664", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/fd3139fcccc9d91c74b1e12a40f87ebd34ec6664", "committedDate": "2020-06-22T16:35:37Z", "message": "Add portable AOT support on x86\n\nTR::Compiler->target contains the host environment while TR::Compiler->relocatableTarget contains\nthe target environment that AOT compilations will use. TR::Compiler->relocatableTarget is set according\nto the presence of SCC, portable options and Docker containers. Then at the beginning of every compilation\n(in the constructor) we set the target to be TR::Compiler->target if JIT compilation and\nTR::Compiler->relocatableTarget if AOT compilation.\nThe following scenarios were considered:\n\nWhen there is no existing SCC and no portable option specified\n(-Xshareclasses:portable, -XX:+PortableShareClasses), we use the host processor for AOT\nWhen there is no existing SCC and has portable option specified, we use the hand-picked\nportable processor for AOT\nWhen there is no existing SCC and in container, we use the hand-picked portable processor\nfor AOT\nWhen there is existing SCC and it passes processor compatibility check, we use the processor\nstored in the SCC (ignoring portable options and whether we are in container or not)\nJITServer is not affected. Meaning JITServer will still use JITClient's processor information for\nall of its compilations regardless of the portable/inContainer/SCC options\ndepends on: eclipse/omr#4861\nIssue: #7966\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MTQ3NzA4", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#pullrequestreview-435147708", "createdAt": "2020-06-22T17:49:43Z", "commit": {"oid": "fd3139fcccc9d91c74b1e12a40f87ebd34ec6664"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNzo0OTo0M1rOGnLA7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNzo0OTo0M1rOGnLA7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcyODExMQ==", "bodyText": "Better to put the new code here inside defined(J9X86) as well.", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r443728111", "createdAt": "2020-06-22T17:49:43Z", "author": {"login": "hangshao0"}, "path": "runtime/shared_common/shrinit.cpp", "diffHunk": "@@ -1263,6 +1272,12 @@ j9shr_dump_help(J9JavaVM* vm, UDATA more)\n \ttmpcstr = j9nls_lookup_message((J9NLS_INFO | J9NLS_DO_NOT_PRINT_MESSAGE_TAG), J9NLS_EXELIB_INTERNAL_HELP_XXDISABLEUSEGCSTARTUPHINTS, NULL);\n \tj9file_printf(PORTLIB, J9PORT_TTY_OUT, \"%s\", tmpcstr);\n \n+\ttmpcstr = j9nls_lookup_message((J9NLS_INFO | J9NLS_DO_NOT_PRINT_MESSAGE_TAG), J9NLS_EXELIB_INTERNAL_HELP_XXSHARECLASSESPORTABLE, NULL);\n+\tj9file_printf(PORTLIB, J9PORT_TTY_OUT, \"%s\", tmpcstr);\n+\n+\ttmpcstr = j9nls_lookup_message((J9NLS_INFO | J9NLS_DO_NOT_PRINT_MESSAGE_TAG), J9NLS_EXELIB_INTERNAL_HELP_XXNOSHARECLASSESPORTABLE, NULL);\n+\tj9file_printf(PORTLIB, J9PORT_TTY_OUT, \"%s\", tmpcstr);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd3139fcccc9d91c74b1e12a40f87ebd34ec6664"}, "originalPosition": 39}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fd3139fcccc9d91c74b1e12a40f87ebd34ec6664", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/fd3139fcccc9d91c74b1e12a40f87ebd34ec6664", "committedDate": "2020-06-22T16:35:37Z", "message": "Add portable AOT support on x86\n\nTR::Compiler->target contains the host environment while TR::Compiler->relocatableTarget contains\nthe target environment that AOT compilations will use. TR::Compiler->relocatableTarget is set according\nto the presence of SCC, portable options and Docker containers. Then at the beginning of every compilation\n(in the constructor) we set the target to be TR::Compiler->target if JIT compilation and\nTR::Compiler->relocatableTarget if AOT compilation.\nThe following scenarios were considered:\n\nWhen there is no existing SCC and no portable option specified\n(-Xshareclasses:portable, -XX:+PortableShareClasses), we use the host processor for AOT\nWhen there is no existing SCC and has portable option specified, we use the hand-picked\nportable processor for AOT\nWhen there is no existing SCC and in container, we use the hand-picked portable processor\nfor AOT\nWhen there is existing SCC and it passes processor compatibility check, we use the processor\nstored in the SCC (ignoring portable options and whether we are in container or not)\nJITServer is not affected. Meaning JITServer will still use JITClient's processor information for\nall of its compilations regardless of the portable/inContainer/SCC options\ndepends on: eclipse/omr#4861\nIssue: #7966\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}, "afterCommit": {"oid": "0b0bd393020da5aadaefa08780eb0435faece914", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/0b0bd393020da5aadaefa08780eb0435faece914", "committedDate": "2020-06-22T18:16:03Z", "message": "Add portable AOT support on x86\n\nTR::Compiler->target contains the host environment while TR::Compiler->relocatableTarget contains\nthe target environment that AOT compilations will use. TR::Compiler->relocatableTarget is set according\nto the presence of SCC, portable options and Docker containers. Then at the beginning of every compilation\n(in the constructor) we set the target to be TR::Compiler->target if JIT compilation and\nTR::Compiler->relocatableTarget if AOT compilation.\nThe following scenarios were considered:\n\nWhen there is no existing SCC and no portable option specified\n(-Xshareclasses:portable, -XX:+PortableShareClasses), we use the host processor for AOT\nWhen there is no existing SCC and has portable option specified, we use the hand-picked\nportable processor for AOT\nWhen there is no existing SCC and in container, we use the hand-picked portable processor\nfor AOT\nWhen there is existing SCC and it passes processor compatibility check, we use the processor\nstored in the SCC (ignoring portable options and whether we are in container or not)\nJITServer is not affected. Meaning JITServer will still use JITClient's processor information for\nall of its compilations regardless of the portable/inContainer/SCC options\ndepends on: eclipse/omr#4861\nIssue: #7966\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MTgwMzM1", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#pullrequestreview-435180335", "createdAt": "2020-06-22T18:38:36Z", "commit": {"oid": "fd3139fcccc9d91c74b1e12a40f87ebd34ec6664"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1Mzc4OTIw", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#pullrequestreview-435378920", "createdAt": "2020-06-23T01:30:34Z", "commit": {"oid": "0b0bd393020da5aadaefa08780eb0435faece914"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2MDYzNTIz", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#pullrequestreview-436063523", "createdAt": "2020-06-23T18:50:57Z", "commit": {"oid": "0b0bd393020da5aadaefa08780eb0435faece914"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxODo1MDo1N1rOGn2QuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxODo1MDo1N1rOGn2QuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQzNjY2NA==", "bodyText": "Can this be an unconditional else block?  Is there any reason to exclude the impossible == case?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t} else if (argIndex2 > argIndex1) {\n          \n          \n            \n            \t\t\t\t} else {", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r444436664", "createdAt": "2020-06-23T18:50:57Z", "author": {"login": "DanHeidinga"}, "path": "runtime/shared/shrclssup.c", "diffHunk": "@@ -141,6 +141,20 @@ IDATA J9VMDllMain(J9JavaVM* vm, IDATA stage, void* reserved)\n \t\t\t\t\truntimeFlags |= J9SHR_RUNTIMEFLAG_DISABLE_BCI;\n \t\t\t\t}\n \n+\t\t\t\t/* Check for -XX:+PortableShareClasses and -XX:-PortableShareClasses; whichever comes later wins.\n+\t\t\t\t * These options should be checked before parseArgs() to allow -Xshareclasses:portable to override this option.\n+\t\t\t\t * \n+\t\t\t\t * Note: Please also change the function checkArgsConsumed() in runtime/vm/jvminit.c when adding new options,\n+\t\t\t\t * in order to quietly consume the options if it is used without -Xshareclasses\n+\t\t\t\t */\n+\t\t\t\targIndex1 = FIND_AND_CONSUME_ARG(EXACT_MATCH, VMOPT_XXSHARECLASSESPORTABLE, NULL);\n+\t\t\t\targIndex2 = FIND_AND_CONSUME_ARG(EXACT_MATCH, VMOPT_XXNOSHARECLASSESPORTABLE, NULL);\n+\t\t\t\tif (argIndex1 > argIndex2) {\n+\t\t\t\t\tvm->sharedCacheAPI->sharedCachePortable = TRUE;\n+\t\t\t\t} else if (argIndex2 > argIndex1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b0bd393020da5aadaefa08780eb0435faece914"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2MDY2NTgz", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#pullrequestreview-436066583", "createdAt": "2020-06-23T18:55:27Z", "commit": {"oid": "0b0bd393020da5aadaefa08780eb0435faece914"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0b0bd393020da5aadaefa08780eb0435faece914", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/0b0bd393020da5aadaefa08780eb0435faece914", "committedDate": "2020-06-22T18:16:03Z", "message": "Add portable AOT support on x86\n\nTR::Compiler->target contains the host environment while TR::Compiler->relocatableTarget contains\nthe target environment that AOT compilations will use. TR::Compiler->relocatableTarget is set according\nto the presence of SCC, portable options and Docker containers. Then at the beginning of every compilation\n(in the constructor) we set the target to be TR::Compiler->target if JIT compilation and\nTR::Compiler->relocatableTarget if AOT compilation.\nThe following scenarios were considered:\n\nWhen there is no existing SCC and no portable option specified\n(-Xshareclasses:portable, -XX:+PortableShareClasses), we use the host processor for AOT\nWhen there is no existing SCC and has portable option specified, we use the hand-picked\nportable processor for AOT\nWhen there is no existing SCC and in container, we use the hand-picked portable processor\nfor AOT\nWhen there is existing SCC and it passes processor compatibility check, we use the processor\nstored in the SCC (ignoring portable options and whether we are in container or not)\nJITServer is not affected. Meaning JITServer will still use JITClient's processor information for\nall of its compilations regardless of the portable/inContainer/SCC options\ndepends on: eclipse/omr#4861\nIssue: #7966\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}, "afterCommit": {"oid": "13abae467023e5f7f6b6fa339aaf5e5ff4849a94", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/13abae467023e5f7f6b6fa339aaf5e5ff4849a94", "committedDate": "2020-06-23T19:35:31Z", "message": "Add portable AOT support on x86\n\nTR::Compiler->target contains the host environment while TR::Compiler->relocatableTarget contains\nthe target environment that AOT compilations will use. TR::Compiler->relocatableTarget is set according\nto the presence of SCC, portable options and Docker containers. Then at the beginning of every compilation\n(in the constructor) we set the target to be TR::Compiler->target if JIT compilation and\nTR::Compiler->relocatableTarget if AOT compilation.\nThe following scenarios were considered:\n\nWhen there is no existing SCC and no portable option specified\n(-Xshareclasses:portable, -XX:+PortableShareClasses), we use the host processor for AOT\nWhen there is no existing SCC and has portable option specified, we use the hand-picked\nportable processor for AOT\nWhen there is no existing SCC and in container, we use the hand-picked portable processor\nfor AOT\nWhen there is existing SCC and it passes processor compatibility check, we use the processor\nstored in the SCC (ignoring portable options and whether we are in container or not)\nJITServer is not affected. Meaning JITServer will still use JITClient's processor information for\nall of its compilations regardless of the portable/inContainer/SCC options\ndepends on: eclipse/omr#4861\nIssue: #7966\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d1db529cf03e544623b9cf5c3ed00996ae093395", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/d1db529cf03e544623b9cf5c3ed00996ae093395", "committedDate": "2020-06-23T22:12:29Z", "message": "Remove options"}, "afterCommit": {"oid": "c50734839269a6cbe2f94f43af6147fb5f4289d8", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/c50734839269a6cbe2f94f43af6147fb5f4289d8", "committedDate": "2020-06-23T22:13:31Z", "message": "Add portable AOT support on x86\n\nTR::Compiler->target contains the host environment while TR::Compiler->relocatableTarget contains\nthe target environment that AOT compilations will use. TR::Compiler->relocatableTarget is set according\nto the presence of SCC, portable options and Docker containers. Then at the beginning of every compilation\n(in the constructor) we set the target to be TR::Compiler->target if JIT compilation and\nTR::Compiler->relocatableTarget if AOT compilation.\nThe following scenarios were considered:\n\n- When there is no existing SCC and no portable option specified we use the host processor for AOT\n- When there is no existing SCC and has portable option specified, we use the hand-picked portable processor for AOT\n- When there is no existing SCC and in container, we use the hand-picked portable processor for AOT\n- When there is existing SCC and it passes processor compatibility check, we use the processor stored in the SCC\n(ignoring portable options and whether we are in container or not)\n- JITServer is not affected. Meaning JITServer will still use JITClient's processor information for all of its\ncompilations regardless of the portable/inContainer/SCC options\n\ndepends on: eclipse/omr#4861\nIssue: #7966\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c50734839269a6cbe2f94f43af6147fb5f4289d8", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/c50734839269a6cbe2f94f43af6147fb5f4289d8", "committedDate": "2020-06-23T22:13:31Z", "message": "Add portable AOT support on x86\n\nTR::Compiler->target contains the host environment while TR::Compiler->relocatableTarget contains\nthe target environment that AOT compilations will use. TR::Compiler->relocatableTarget is set according\nto the presence of SCC, portable options and Docker containers. Then at the beginning of every compilation\n(in the constructor) we set the target to be TR::Compiler->target if JIT compilation and\nTR::Compiler->relocatableTarget if AOT compilation.\nThe following scenarios were considered:\n\n- When there is no existing SCC and no portable option specified we use the host processor for AOT\n- When there is no existing SCC and has portable option specified, we use the hand-picked portable processor for AOT\n- When there is no existing SCC and in container, we use the hand-picked portable processor for AOT\n- When there is existing SCC and it passes processor compatibility check, we use the processor stored in the SCC\n(ignoring portable options and whether we are in container or not)\n- JITServer is not affected. Meaning JITServer will still use JITClient's processor information for all of its\ncompilations regardless of the portable/inContainer/SCC options\n\ndepends on: eclipse/omr#4861\nIssue: #7966\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}, "afterCommit": {"oid": "05ea4511ea4ef8afd5f3435ce2ee39561301310c", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/05ea4511ea4ef8afd5f3435ce2ee39561301310c", "committedDate": "2020-07-14T17:03:32Z", "message": "Add portable AOT support on x86\n\nTR::Compiler->target contains the host environment while TR::Compiler->relocatableTarget contains\nthe target environment that AOT compilations will use. TR::Compiler->relocatableTarget is set according\nto the presence of SCC, portable options and Docker containers. Then at the beginning of every compilation\n(in the constructor) we set the target to be TR::Compiler->target if JIT compilation and\nTR::Compiler->relocatableTarget if AOT compilation.\nThe following scenarios were considered:\n\n- When there is no existing SCC and no portable option specified we use the host processor for AOT\n- When there is no existing SCC and has portable option specified, we use the hand-picked portable processor for AOT\n- When there is no existing SCC and in container, we use the hand-picked portable processor for AOT\n- When there is existing SCC and it passes processor compatibility check, we use the processor stored in the SCC\n(ignoring portable options and whether we are in container or not)\n- JITServer is not affected. Meaning JITServer will still use JITClient's processor information for all of its\ncompilations regardless of the portable/inContainer/SCC options\n\ndepends on: eclipse/omr#4861\nIssue: #7966\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "05ea4511ea4ef8afd5f3435ce2ee39561301310c", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/05ea4511ea4ef8afd5f3435ce2ee39561301310c", "committedDate": "2020-07-14T17:03:32Z", "message": "Add portable AOT support on x86\n\nTR::Compiler->target contains the host environment while TR::Compiler->relocatableTarget contains\nthe target environment that AOT compilations will use. TR::Compiler->relocatableTarget is set according\nto the presence of SCC, portable options and Docker containers. Then at the beginning of every compilation\n(in the constructor) we set the target to be TR::Compiler->target if JIT compilation and\nTR::Compiler->relocatableTarget if AOT compilation.\nThe following scenarios were considered:\n\n- When there is no existing SCC and no portable option specified we use the host processor for AOT\n- When there is no existing SCC and has portable option specified, we use the hand-picked portable processor for AOT\n- When there is no existing SCC and in container, we use the hand-picked portable processor for AOT\n- When there is existing SCC and it passes processor compatibility check, we use the processor stored in the SCC\n(ignoring portable options and whether we are in container or not)\n- JITServer is not affected. Meaning JITServer will still use JITClient's processor information for all of its\ncompilations regardless of the portable/inContainer/SCC options\n\ndepends on: eclipse/omr#4861\nIssue: #7966\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}, "afterCommit": {"oid": "ef843c2ccb485355158fc812f700139b950c53f9", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/ef843c2ccb485355158fc812f700139b950c53f9", "committedDate": "2020-07-14T18:38:43Z", "message": "Add portable AOT support on x86\n\nTR::Compiler->target contains the host environment while TR::Compiler->relocatableTarget contains\nthe target environment that AOT compilations will use. TR::Compiler->relocatableTarget is set according\nto the presence of SCC, portable options and Docker containers. Then at the beginning of every compilation\n(in the constructor) we set the target to be TR::Compiler->target if JIT compilation and\nTR::Compiler->relocatableTarget if AOT compilation.\nThe following scenarios were considered:\n\n- When there is no existing SCC and no portable option specified we use the host processor for AOT\n- When there is no existing SCC and has portable option specified, we use the hand-picked portable processor for AOT\n- When there is no existing SCC and in container, we use the hand-picked portable processor for AOT\n- When there is existing SCC and it passes processor compatibility check, we use the processor stored in the SCC\n(ignoring portable options and whether we are in container or not)\n- JITServer is not affected. Meaning JITServer will still use JITClient's processor information for all of its\ncompilations regardless of the portable/inContainer/SCC options\n\ndepends on: eclipse/omr#4861\nIssue: #7966\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "270a41478fa4f73089a001892c021c47ef39a5a6", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/270a41478fa4f73089a001892c021c47ef39a5a6", "committedDate": "2020-07-15T16:40:51Z", "message": "Add portable AOT support on x86\n\nTR::Compiler->target contains the host environment while TR::Compiler->relocatableTarget contains\nthe target environment that AOT compilations will use. TR::Compiler->relocatableTarget is set according\nto the presence of SCC, portable options and Docker containers. Then at the beginning of every compilation\n(in the constructor) we set the target to be TR::Compiler->target if JIT compilation and\nTR::Compiler->relocatableTarget if AOT compilation.\nThe following scenarios were considered:\n\nWhen there is no existing SCC and no portable option specified we use the host processor for AOT\nWhen there is no existing SCC and has portable option specified, we use the hand-picked portable processor for AOT\nWhen there is no existing SCC and in container, we use the hand-picked portable processor for AOT\nWhen there is existing SCC and it passes processor compatibility check, we use the processor stored in the SCC\n(ignoring portable options and whether we are in container or not)\nJITServer is not affected. Meaning JITServer will still use JITClient's processor information for all of its\ncompilations regardless of the portable/inContainer/SCC options\n\nIssue: #7966\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e2ccf89621a485f41041a2ba6a310d0a4bc52e49", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/e2ccf89621a485f41041a2ba6a310d0a4bc52e49", "committedDate": "2020-07-15T16:37:12Z", "message": "Add portable AOT support on x86\n\nTR::Compiler->target contains the host environment while TR::Compiler->relocatableTarget contains\nthe target environment that AOT compilations will use. TR::Compiler->relocatableTarget is set according\nto the presence of SCC, portable options and Docker containers. Then at the beginning of every compilation\n(in the constructor) we set the target to be TR::Compiler->target if JIT compilation and\nTR::Compiler->relocatableTarget if AOT compilation.\nThe following scenarios were considered:\n\n- When there is no existing SCC and no portable option specified we use the host processor for AOT\n- When there is no existing SCC and has portable option specified, we use the hand-picked portable processor for AOT\n- When there is no existing SCC and in container, we use the hand-picked portable processor for AOT\n- When there is existing SCC and it passes processor compatibility check, we use the processor stored in the SCC\n(ignoring portable options and whether we are in container or not)\n- JITServer is not affected. Meaning JITServer will still use JITClient's processor information for all of its\ncompilations regardless of the portable/inContainer/SCC options\n\nIssue: #7966\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}, "afterCommit": {"oid": "638845b634b32380c081ffe0c56fa7e869f6ddd3", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/638845b634b32380c081ffe0c56fa7e869f6ddd3", "committedDate": "2020-07-15T16:38:47Z", "message": "Add portable AOT support on x86\n\nTR::Compiler->target contains the host environment while TR::Compiler->relocatableTarget contains\nthe target environment that AOT compilations will use. TR::Compiler->relocatableTarget is set according\nto the presence of SCC, portable options and Docker containers. Then at the beginning of every compilation\n(in the constructor) we set the target to be TR::Compiler->target if JIT compilation and\nTR::Compiler->relocatableTarget if AOT compilation.\nThe following scenarios were considered:\n\nWhen there is no existing SCC and no portable option specified we use the host processor for AOT\nWhen there is no existing SCC and has portable option specified, we use the hand-picked portable processor for AOT\nWhen there is no existing SCC and in container, we use the hand-picked portable processor for AOT\nWhen there is existing SCC and it passes processor compatibility check, we use the processor stored in the SCC\n(ignoring portable options and whether we are in container or not)\nJITServer is not affected. Meaning JITServer will still use JITClient's processor information for all of its\ncompilations regardless of the portable/inContainer/SCC options\n\nIssue: #7966\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ef843c2ccb485355158fc812f700139b950c53f9", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/ef843c2ccb485355158fc812f700139b950c53f9", "committedDate": "2020-07-14T18:38:43Z", "message": "Add portable AOT support on x86\n\nTR::Compiler->target contains the host environment while TR::Compiler->relocatableTarget contains\nthe target environment that AOT compilations will use. TR::Compiler->relocatableTarget is set according\nto the presence of SCC, portable options and Docker containers. Then at the beginning of every compilation\n(in the constructor) we set the target to be TR::Compiler->target if JIT compilation and\nTR::Compiler->relocatableTarget if AOT compilation.\nThe following scenarios were considered:\n\n- When there is no existing SCC and no portable option specified we use the host processor for AOT\n- When there is no existing SCC and has portable option specified, we use the hand-picked portable processor for AOT\n- When there is no existing SCC and in container, we use the hand-picked portable processor for AOT\n- When there is existing SCC and it passes processor compatibility check, we use the processor stored in the SCC\n(ignoring portable options and whether we are in container or not)\n- JITServer is not affected. Meaning JITServer will still use JITClient's processor information for all of its\ncompilations regardless of the portable/inContainer/SCC options\n\ndepends on: eclipse/omr#4861\nIssue: #7966\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}, "afterCommit": {"oid": "e2ccf89621a485f41041a2ba6a310d0a4bc52e49", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/e2ccf89621a485f41041a2ba6a310d0a4bc52e49", "committedDate": "2020-07-15T16:37:12Z", "message": "Add portable AOT support on x86\n\nTR::Compiler->target contains the host environment while TR::Compiler->relocatableTarget contains\nthe target environment that AOT compilations will use. TR::Compiler->relocatableTarget is set according\nto the presence of SCC, portable options and Docker containers. Then at the beginning of every compilation\n(in the constructor) we set the target to be TR::Compiler->target if JIT compilation and\nTR::Compiler->relocatableTarget if AOT compilation.\nThe following scenarios were considered:\n\n- When there is no existing SCC and no portable option specified we use the host processor for AOT\n- When there is no existing SCC and has portable option specified, we use the hand-picked portable processor for AOT\n- When there is no existing SCC and in container, we use the hand-picked portable processor for AOT\n- When there is existing SCC and it passes processor compatibility check, we use the processor stored in the SCC\n(ignoring portable options and whether we are in container or not)\n- JITServer is not affected. Meaning JITServer will still use JITClient's processor information for all of its\ncompilations regardless of the portable/inContainer/SCC options\n\nIssue: #7966\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "638845b634b32380c081ffe0c56fa7e869f6ddd3", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/638845b634b32380c081ffe0c56fa7e869f6ddd3", "committedDate": "2020-07-15T16:38:47Z", "message": "Add portable AOT support on x86\n\nTR::Compiler->target contains the host environment while TR::Compiler->relocatableTarget contains\nthe target environment that AOT compilations will use. TR::Compiler->relocatableTarget is set according\nto the presence of SCC, portable options and Docker containers. Then at the beginning of every compilation\n(in the constructor) we set the target to be TR::Compiler->target if JIT compilation and\nTR::Compiler->relocatableTarget if AOT compilation.\nThe following scenarios were considered:\n\nWhen there is no existing SCC and no portable option specified we use the host processor for AOT\nWhen there is no existing SCC and has portable option specified, we use the hand-picked portable processor for AOT\nWhen there is no existing SCC and in container, we use the hand-picked portable processor for AOT\nWhen there is existing SCC and it passes processor compatibility check, we use the processor stored in the SCC\n(ignoring portable options and whether we are in container or not)\nJITServer is not affected. Meaning JITServer will still use JITClient's processor information for all of its\ncompilations regardless of the portable/inContainer/SCC options\n\nIssue: #7966\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}, "afterCommit": {"oid": "270a41478fa4f73089a001892c021c47ef39a5a6", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/270a41478fa4f73089a001892c021c47ef39a5a6", "committedDate": "2020-07-15T16:40:51Z", "message": "Add portable AOT support on x86\n\nTR::Compiler->target contains the host environment while TR::Compiler->relocatableTarget contains\nthe target environment that AOT compilations will use. TR::Compiler->relocatableTarget is set according\nto the presence of SCC, portable options and Docker containers. Then at the beginning of every compilation\n(in the constructor) we set the target to be TR::Compiler->target if JIT compilation and\nTR::Compiler->relocatableTarget if AOT compilation.\nThe following scenarios were considered:\n\nWhen there is no existing SCC and no portable option specified we use the host processor for AOT\nWhen there is no existing SCC and has portable option specified, we use the hand-picked portable processor for AOT\nWhen there is no existing SCC and in container, we use the hand-picked portable processor for AOT\nWhen there is existing SCC and it passes processor compatibility check, we use the processor stored in the SCC\n(ignoring portable options and whether we are in container or not)\nJITServer is not affected. Meaning JITServer will still use JITClient's processor information for all of its\ncompilations regardless of the portable/inContainer/SCC options\n\nIssue: #7966\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43a903dcc369d4c40661626b7868d61d20a1d5ee", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/43a903dcc369d4c40661626b7868d61d20a1d5ee", "committedDate": "2020-07-15T17:08:07Z", "message": "Sink container detection down to sharedCacheAPI->sharedCachePortable\n\nWhen user disable portableAOT, it should disable portableAOT in container\nas well.\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5MjMwMTg3", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#pullrequestreview-449230187", "createdAt": "2020-07-15T18:37:50Z", "commit": {"oid": "43a903dcc369d4c40661626b7868d61d20a1d5ee"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxODozNzo1MFrOGyK_-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxODozNzo1MFrOGyK_-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI2MjIwMg==", "bodyText": "Should this be named something like getProcessorDescriptionFromSCC to be clear what it does? We could get the processor description of current machine. Also, I don't see where this is used.", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r455262202", "createdAt": "2020-07-15T18:37:50Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/runtime/RelocationRuntime.cpp", "diffHunk": "@@ -1001,6 +1001,26 @@ TR_SharedCacheRelocationRuntime::getCurrentLockwordOptionHashValue(J9JavaVM *vm)\n    return currentLockwordOptionHashValue;\n    }\n \n+OMRProcessorDesc\n+TR_SharedCacheRelocationRuntime::getProcessorDescription(TR_FrontEnd *fe, J9VMThread *curThread)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43a903dcc369d4c40661626b7868d61d20a1d5ee"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72ae9fd3cbc38a01e8c844cff90ee0b1818632d3", "author": {"user": {"login": "harryyu1994", "name": "Harry Yu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/72ae9fd3cbc38a01e8c844cff90ee0b1818632d3", "committedDate": "2020-07-15T19:18:35Z", "message": "Rename getProcessorDescription to getProcessorDescriptionSCC\n\nThe purpose is to avoid confusions with TR::CPU's getProcessorDescription().\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5MjY1MTky", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#pullrequestreview-449265192", "createdAt": "2020-07-15T19:27:53Z", "commit": {"oid": "72ae9fd3cbc38a01e8c844cff90ee0b1818632d3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 809, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}