{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxNDQ5MjU1", "number": 9199, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNDozNToyN1rODwbr3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNDozNToyN1rODwbr3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTExODM3OnYy", "diffSide": "RIGHT", "path": "jcl/src/openj9.dtfjview/share/classes/com/ibm/jvm/dtfjview/commands/OpenCommand.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNDozNToyN1rOGDbkNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxOToxNjoxMlrOGDmA_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI1MDU0OA==", "bodyText": "I think there should be a blank line after this warning, to help it stand out from the help text.", "url": "https://github.com/eclipse-openj9/openj9/pull/9199#discussion_r406250548", "createdAt": "2020-04-09T14:35:27Z", "author": {"login": "pshipton"}, "path": "jcl/src/openj9.dtfjview/share/classes/com/ibm/jvm/dtfjview/commands/OpenCommand.java", "diffHunk": "@@ -128,100 +127,113 @@ private void imagesFromCommandLine(String args[]) {\n \t\t\t}\n \t\t}\n \t}\n-\t\n+\n \tprivate ImageFactory getFactory() {\n-\t\tif(factory != null) {\n+\t\tif (factory != null) {\n \t\t\treturn factory;\n \t\t}\n \t\ttry {\n \t\t\tClass<?> factoryClass = Class.forName(factoryName);\n-\t\t\tfactory = (ImageFactory)factoryClass.newInstance();\n+\t\t\tfactory = (ImageFactory) factoryClass.newInstance();\n \t\t} catch (ClassNotFoundException e) {\n \t\t\tout.println(\"ClassNotFoundException while getting ImageFactory: \" + e.getMessage());\n \t\t\tout.println(\"Use -D\" + SYSPROP_FACTORY + \"=<classname> to change the ImageFactory\");\n \t\t\tSystem.exit(JDMPVIEW_SYNTAX_ERROR);\n-\t\t} catch (InstantiationException e) {\n-\t\t\tout.println(\"InstantiationException while getting ImageFactory: \" + e.getMessage());\n+\t\t} catch (ClassCastException e) {\n+\t\t\tout.println(\"ClassCastException while getting ImageFactory: \" + e.getMessage());\n \t\t\tSystem.exit(JDMPVIEW_SYNTAX_ERROR);\n \t\t} catch (IllegalAccessException e) {\n \t\t\tout.println(\"IllegalAccessException while getting ImageFactory: \" + e.getMessage());\n \t\t\tSystem.exit(JDMPVIEW_SYNTAX_ERROR);\n+\t\t} catch (InstantiationException e) {\n+\t\t\tout.println(\"InstantiationException while getting ImageFactory: \" + e.getMessage());\n+\t\t\tSystem.exit(JDMPVIEW_SYNTAX_ERROR);\n \t\t}\n \t\treturn factory;\n \t}\n \t\n \t\n \tprivate void createContexts(Image loadedImage, String coreFilePath) {\n-\t\tif(loadedImage == null) {\n-\t\t\t//cannot create any contexts as an image has not been obtained\n+\t\tif (loadedImage == null) {\n+\t\t\t// cannot create any contexts as an image has not been obtained\n \t\t\treturn;\n \t\t}\n \t\tboolean hasContexts = false;\n \t\tIterator<?> spaces = loadedImage.getAddressSpaces();\n-\t\twhile(spaces.hasNext()) {\n+\t\twhile (spaces.hasNext()) {\n \t\t\tObject o = spaces.next();\n-\t\t\tif(o instanceof ImageAddressSpace) {\n-\t\t\t\tImageAddressSpace space = (ImageAddressSpace) o;\n-\t\t\t\tIterator<?> procs = space.getProcesses();\n-\t\t\t\tif(procs.hasNext()) {\n-\t\t\t\t\twhile(procs.hasNext()) {\n-\t\t\t\t\t\to = procs.next();\n-\t\t\t\t\t\tif(o instanceof ImageProcess) {\n-\t\t\t\t\t\t\tImageProcess proc = (ImageProcess) o;\n-\t\t\t\t\t\t\tIterator<?> runtimes = proc.getRuntimes();\n-\t\t\t\t\t\t\tif(runtimes.hasNext()) {\n-\t\t\t\t\t\t\t\twhile(runtimes.hasNext()) {\n-\t\t\t\t\t\t\t\t\to = runtimes.next();\n-\t\t\t\t\t\t\t\t\tif(o instanceof JavaRuntime) {\n-\t\t\t\t\t\t\t\t\t\tcreateCombinedContext(loadedImage, apiLevelMajor, apiLevelMinor, space, proc, (JavaRuntime)o, coreFilePath);\n-\t\t\t\t\t\t\t\t\t\thasContexts = true;\n-\t\t\t\t\t\t\t\t\t} else if (o instanceof CorruptData) {\n-\t\t\t\t\t\t\t\t\t\tlogger.fine(\"CorruptData encountered in ImageProcess.getRuntimes(): \" + ((CorruptData)o).toString());\n-\t\t\t\t\t\t\t\t\t\tcreateCombinedContext(loadedImage, apiLevelMajor, apiLevelMinor, space, proc, null, coreFilePath);\n-\t\t\t\t\t\t\t\t\t\thasContexts = true;\n-\t\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\t\tlogger.fine(\"Unexpected class encountered in ImageProcess.getRuntimes()\");\n-\t\t\t\t\t\t\t\t\t\tcreateCombinedContext(loadedImage, apiLevelMajor, apiLevelMinor, space, proc, null, coreFilePath);\n-\t\t\t\t\t\t\t\t\t\thasContexts = true;\n-\t\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t//there are no runtimes so create a context for this process\n-\t\t\t\t\t\t\t\tcreateCombinedContext(loadedImage, apiLevelMajor, apiLevelMinor, space, proc, null, coreFilePath);\n-\t\t\t\t\t\t\t\thasContexts = true;\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t} else {\n-\t\t\t\t\t//context with only an address space\n-\t\t\t\t\tcreateCombinedContext(loadedImage, apiLevelMajor, apiLevelMinor, space, null, null, coreFilePath);\n+\t\t\tif (!(o instanceof ImageAddressSpace)) {\n+\t\t\t\t// need a representation of a corrupt context\n+\t\t\t\tlogger.fine(\"Skipping corrupt ImageAddress space\");\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\n+\t\t\tImageAddressSpace space = (ImageAddressSpace) o;\n+\t\t\tIterator<?> procs = space.getProcesses();\n+\t\t\tif (!procs.hasNext()) {\n+\t\t\t\t// context with only an address space\n+\t\t\t\tcreateCombinedContext(loadedImage, apiLevelMajor, apiLevelMinor, space, null, null, coreFilePath);\n+\t\t\t\thasContexts = true;\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\n+\t\t\twhile (procs.hasNext()) {\n+\t\t\t\to = procs.next();\n+\t\t\t\tif (!(o instanceof ImageProcess)) {\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\n+\t\t\t\tImageProcess proc = (ImageProcess) o;\n+\t\t\t\tIterator<?> runtimes = proc.getRuntimes();\n+\n+\t\t\t\tif (!runtimes.hasNext()) {\n+\t\t\t\t\t// there are no runtimes so create a context for this process\n+\t\t\t\t\tcreateCombinedContext(loadedImage, apiLevelMajor, apiLevelMinor, space, proc, null, coreFilePath);\n \t\t\t\t\thasContexts = true;\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\n+\t\t\t\twhile (runtimes.hasNext()) {\n+\t\t\t\t\to = runtimes.next();\n+\t\t\t\t\tif (o instanceof JavaRuntime) {\n+\t\t\t\t\t\tcreateCombinedContext(loadedImage, apiLevelMajor, apiLevelMinor, space, proc, (JavaRuntime) o, coreFilePath);\n+\t\t\t\t\t\thasContexts = true;\n+\t\t\t\t\t} else if (o instanceof CorruptData) {\n+\t\t\t\t\t\tlogger.fine(\"CorruptData encountered in ImageProcess.getRuntimes(): \" + o);\n+\t\t\t\t\t\tcreateCombinedContext(loadedImage, apiLevelMajor, apiLevelMinor, space, proc, null, coreFilePath);\n+\t\t\t\t\t\thasContexts = true;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tlogger.fine(\"Unexpected class encountered in ImageProcess.getRuntimes()\");\n+\t\t\t\t\t\tcreateCombinedContext(loadedImage, apiLevelMajor, apiLevelMinor, space, proc, null, coreFilePath);\n+\t\t\t\t\t\thasContexts = true;\n+\t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\t//need a representation of a corrupt context\n-\t\t\t\tlogger.fine(\"Skipping corrupt ImageAddress space\");\n \t\t\t}\n \t\t}\n-\t\tif(!hasContexts) {\n-\t\t\tif(ctx.hasPropertyBeenSet(VERBOSE_MODE_PROPERTY)) {\n-\t\t\t\tout.println(\"Warning : no contexts were found, is this a valid core file ?\");\n+\t\tif (!hasContexts) {\n+\t\t\tif (ctx.hasPropertyBeenSet(VERBOSE_MODE_PROPERTY)) {\n+\t\t\t\tout.println(\"Warning: no contexts were found, is this a valid core file?\");\n+\t\t\t}\n+\t\t} else {\n+\t\t\tif (loadedImage.isTruncated()) {\n+\t\t\t\tout.println(\"Warning: dump file is truncated. Extracted information may be incomplete.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a30679ccf7548f186c7ebc446de72b871b9b593"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMwMjI4NA==", "bodyText": "Agreed. I'll let the current build finish before pushing that change.", "url": "https://github.com/eclipse-openj9/openj9/pull/9199#discussion_r406302284", "createdAt": "2020-04-09T15:48:51Z", "author": {"login": "keithc-ca"}, "path": "jcl/src/openj9.dtfjview/share/classes/com/ibm/jvm/dtfjview/commands/OpenCommand.java", "diffHunk": "@@ -128,100 +127,113 @@ private void imagesFromCommandLine(String args[]) {\n \t\t\t}\n \t\t}\n \t}\n-\t\n+\n \tprivate ImageFactory getFactory() {\n-\t\tif(factory != null) {\n+\t\tif (factory != null) {\n \t\t\treturn factory;\n \t\t}\n \t\ttry {\n \t\t\tClass<?> factoryClass = Class.forName(factoryName);\n-\t\t\tfactory = (ImageFactory)factoryClass.newInstance();\n+\t\t\tfactory = (ImageFactory) factoryClass.newInstance();\n \t\t} catch (ClassNotFoundException e) {\n \t\t\tout.println(\"ClassNotFoundException while getting ImageFactory: \" + e.getMessage());\n \t\t\tout.println(\"Use -D\" + SYSPROP_FACTORY + \"=<classname> to change the ImageFactory\");\n \t\t\tSystem.exit(JDMPVIEW_SYNTAX_ERROR);\n-\t\t} catch (InstantiationException e) {\n-\t\t\tout.println(\"InstantiationException while getting ImageFactory: \" + e.getMessage());\n+\t\t} catch (ClassCastException e) {\n+\t\t\tout.println(\"ClassCastException while getting ImageFactory: \" + e.getMessage());\n \t\t\tSystem.exit(JDMPVIEW_SYNTAX_ERROR);\n \t\t} catch (IllegalAccessException e) {\n \t\t\tout.println(\"IllegalAccessException while getting ImageFactory: \" + e.getMessage());\n \t\t\tSystem.exit(JDMPVIEW_SYNTAX_ERROR);\n+\t\t} catch (InstantiationException e) {\n+\t\t\tout.println(\"InstantiationException while getting ImageFactory: \" + e.getMessage());\n+\t\t\tSystem.exit(JDMPVIEW_SYNTAX_ERROR);\n \t\t}\n \t\treturn factory;\n \t}\n \t\n \t\n \tprivate void createContexts(Image loadedImage, String coreFilePath) {\n-\t\tif(loadedImage == null) {\n-\t\t\t//cannot create any contexts as an image has not been obtained\n+\t\tif (loadedImage == null) {\n+\t\t\t// cannot create any contexts as an image has not been obtained\n \t\t\treturn;\n \t\t}\n \t\tboolean hasContexts = false;\n \t\tIterator<?> spaces = loadedImage.getAddressSpaces();\n-\t\twhile(spaces.hasNext()) {\n+\t\twhile (spaces.hasNext()) {\n \t\t\tObject o = spaces.next();\n-\t\t\tif(o instanceof ImageAddressSpace) {\n-\t\t\t\tImageAddressSpace space = (ImageAddressSpace) o;\n-\t\t\t\tIterator<?> procs = space.getProcesses();\n-\t\t\t\tif(procs.hasNext()) {\n-\t\t\t\t\twhile(procs.hasNext()) {\n-\t\t\t\t\t\to = procs.next();\n-\t\t\t\t\t\tif(o instanceof ImageProcess) {\n-\t\t\t\t\t\t\tImageProcess proc = (ImageProcess) o;\n-\t\t\t\t\t\t\tIterator<?> runtimes = proc.getRuntimes();\n-\t\t\t\t\t\t\tif(runtimes.hasNext()) {\n-\t\t\t\t\t\t\t\twhile(runtimes.hasNext()) {\n-\t\t\t\t\t\t\t\t\to = runtimes.next();\n-\t\t\t\t\t\t\t\t\tif(o instanceof JavaRuntime) {\n-\t\t\t\t\t\t\t\t\t\tcreateCombinedContext(loadedImage, apiLevelMajor, apiLevelMinor, space, proc, (JavaRuntime)o, coreFilePath);\n-\t\t\t\t\t\t\t\t\t\thasContexts = true;\n-\t\t\t\t\t\t\t\t\t} else if (o instanceof CorruptData) {\n-\t\t\t\t\t\t\t\t\t\tlogger.fine(\"CorruptData encountered in ImageProcess.getRuntimes(): \" + ((CorruptData)o).toString());\n-\t\t\t\t\t\t\t\t\t\tcreateCombinedContext(loadedImage, apiLevelMajor, apiLevelMinor, space, proc, null, coreFilePath);\n-\t\t\t\t\t\t\t\t\t\thasContexts = true;\n-\t\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\t\tlogger.fine(\"Unexpected class encountered in ImageProcess.getRuntimes()\");\n-\t\t\t\t\t\t\t\t\t\tcreateCombinedContext(loadedImage, apiLevelMajor, apiLevelMinor, space, proc, null, coreFilePath);\n-\t\t\t\t\t\t\t\t\t\thasContexts = true;\n-\t\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t//there are no runtimes so create a context for this process\n-\t\t\t\t\t\t\t\tcreateCombinedContext(loadedImage, apiLevelMajor, apiLevelMinor, space, proc, null, coreFilePath);\n-\t\t\t\t\t\t\t\thasContexts = true;\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t} else {\n-\t\t\t\t\t//context with only an address space\n-\t\t\t\t\tcreateCombinedContext(loadedImage, apiLevelMajor, apiLevelMinor, space, null, null, coreFilePath);\n+\t\t\tif (!(o instanceof ImageAddressSpace)) {\n+\t\t\t\t// need a representation of a corrupt context\n+\t\t\t\tlogger.fine(\"Skipping corrupt ImageAddress space\");\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\n+\t\t\tImageAddressSpace space = (ImageAddressSpace) o;\n+\t\t\tIterator<?> procs = space.getProcesses();\n+\t\t\tif (!procs.hasNext()) {\n+\t\t\t\t// context with only an address space\n+\t\t\t\tcreateCombinedContext(loadedImage, apiLevelMajor, apiLevelMinor, space, null, null, coreFilePath);\n+\t\t\t\thasContexts = true;\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\n+\t\t\twhile (procs.hasNext()) {\n+\t\t\t\to = procs.next();\n+\t\t\t\tif (!(o instanceof ImageProcess)) {\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\n+\t\t\t\tImageProcess proc = (ImageProcess) o;\n+\t\t\t\tIterator<?> runtimes = proc.getRuntimes();\n+\n+\t\t\t\tif (!runtimes.hasNext()) {\n+\t\t\t\t\t// there are no runtimes so create a context for this process\n+\t\t\t\t\tcreateCombinedContext(loadedImage, apiLevelMajor, apiLevelMinor, space, proc, null, coreFilePath);\n \t\t\t\t\thasContexts = true;\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\n+\t\t\t\twhile (runtimes.hasNext()) {\n+\t\t\t\t\to = runtimes.next();\n+\t\t\t\t\tif (o instanceof JavaRuntime) {\n+\t\t\t\t\t\tcreateCombinedContext(loadedImage, apiLevelMajor, apiLevelMinor, space, proc, (JavaRuntime) o, coreFilePath);\n+\t\t\t\t\t\thasContexts = true;\n+\t\t\t\t\t} else if (o instanceof CorruptData) {\n+\t\t\t\t\t\tlogger.fine(\"CorruptData encountered in ImageProcess.getRuntimes(): \" + o);\n+\t\t\t\t\t\tcreateCombinedContext(loadedImage, apiLevelMajor, apiLevelMinor, space, proc, null, coreFilePath);\n+\t\t\t\t\t\thasContexts = true;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tlogger.fine(\"Unexpected class encountered in ImageProcess.getRuntimes()\");\n+\t\t\t\t\t\tcreateCombinedContext(loadedImage, apiLevelMajor, apiLevelMinor, space, proc, null, coreFilePath);\n+\t\t\t\t\t\thasContexts = true;\n+\t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\t//need a representation of a corrupt context\n-\t\t\t\tlogger.fine(\"Skipping corrupt ImageAddress space\");\n \t\t\t}\n \t\t}\n-\t\tif(!hasContexts) {\n-\t\t\tif(ctx.hasPropertyBeenSet(VERBOSE_MODE_PROPERTY)) {\n-\t\t\t\tout.println(\"Warning : no contexts were found, is this a valid core file ?\");\n+\t\tif (!hasContexts) {\n+\t\t\tif (ctx.hasPropertyBeenSet(VERBOSE_MODE_PROPERTY)) {\n+\t\t\t\tout.println(\"Warning: no contexts were found, is this a valid core file?\");\n+\t\t\t}\n+\t\t} else {\n+\t\t\tif (loadedImage.isTruncated()) {\n+\t\t\t\tout.println(\"Warning: dump file is truncated. Extracted information may be incomplete.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI1MDU0OA=="}, "originalCommit": {"oid": "2a30679ccf7548f186c7ebc446de72b871b9b593"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMzNzMyOQ==", "bodyText": "Sure. Doesn't matter though, the build will continue even if you push, and I've captured the link to make it easy to find.", "url": "https://github.com/eclipse-openj9/openj9/pull/9199#discussion_r406337329", "createdAt": "2020-04-09T16:45:33Z", "author": {"login": "pshipton"}, "path": "jcl/src/openj9.dtfjview/share/classes/com/ibm/jvm/dtfjview/commands/OpenCommand.java", "diffHunk": "@@ -128,100 +127,113 @@ private void imagesFromCommandLine(String args[]) {\n \t\t\t}\n \t\t}\n \t}\n-\t\n+\n \tprivate ImageFactory getFactory() {\n-\t\tif(factory != null) {\n+\t\tif (factory != null) {\n \t\t\treturn factory;\n \t\t}\n \t\ttry {\n \t\t\tClass<?> factoryClass = Class.forName(factoryName);\n-\t\t\tfactory = (ImageFactory)factoryClass.newInstance();\n+\t\t\tfactory = (ImageFactory) factoryClass.newInstance();\n \t\t} catch (ClassNotFoundException e) {\n \t\t\tout.println(\"ClassNotFoundException while getting ImageFactory: \" + e.getMessage());\n \t\t\tout.println(\"Use -D\" + SYSPROP_FACTORY + \"=<classname> to change the ImageFactory\");\n \t\t\tSystem.exit(JDMPVIEW_SYNTAX_ERROR);\n-\t\t} catch (InstantiationException e) {\n-\t\t\tout.println(\"InstantiationException while getting ImageFactory: \" + e.getMessage());\n+\t\t} catch (ClassCastException e) {\n+\t\t\tout.println(\"ClassCastException while getting ImageFactory: \" + e.getMessage());\n \t\t\tSystem.exit(JDMPVIEW_SYNTAX_ERROR);\n \t\t} catch (IllegalAccessException e) {\n \t\t\tout.println(\"IllegalAccessException while getting ImageFactory: \" + e.getMessage());\n \t\t\tSystem.exit(JDMPVIEW_SYNTAX_ERROR);\n+\t\t} catch (InstantiationException e) {\n+\t\t\tout.println(\"InstantiationException while getting ImageFactory: \" + e.getMessage());\n+\t\t\tSystem.exit(JDMPVIEW_SYNTAX_ERROR);\n \t\t}\n \t\treturn factory;\n \t}\n \t\n \t\n \tprivate void createContexts(Image loadedImage, String coreFilePath) {\n-\t\tif(loadedImage == null) {\n-\t\t\t//cannot create any contexts as an image has not been obtained\n+\t\tif (loadedImage == null) {\n+\t\t\t// cannot create any contexts as an image has not been obtained\n \t\t\treturn;\n \t\t}\n \t\tboolean hasContexts = false;\n \t\tIterator<?> spaces = loadedImage.getAddressSpaces();\n-\t\twhile(spaces.hasNext()) {\n+\t\twhile (spaces.hasNext()) {\n \t\t\tObject o = spaces.next();\n-\t\t\tif(o instanceof ImageAddressSpace) {\n-\t\t\t\tImageAddressSpace space = (ImageAddressSpace) o;\n-\t\t\t\tIterator<?> procs = space.getProcesses();\n-\t\t\t\tif(procs.hasNext()) {\n-\t\t\t\t\twhile(procs.hasNext()) {\n-\t\t\t\t\t\to = procs.next();\n-\t\t\t\t\t\tif(o instanceof ImageProcess) {\n-\t\t\t\t\t\t\tImageProcess proc = (ImageProcess) o;\n-\t\t\t\t\t\t\tIterator<?> runtimes = proc.getRuntimes();\n-\t\t\t\t\t\t\tif(runtimes.hasNext()) {\n-\t\t\t\t\t\t\t\twhile(runtimes.hasNext()) {\n-\t\t\t\t\t\t\t\t\to = runtimes.next();\n-\t\t\t\t\t\t\t\t\tif(o instanceof JavaRuntime) {\n-\t\t\t\t\t\t\t\t\t\tcreateCombinedContext(loadedImage, apiLevelMajor, apiLevelMinor, space, proc, (JavaRuntime)o, coreFilePath);\n-\t\t\t\t\t\t\t\t\t\thasContexts = true;\n-\t\t\t\t\t\t\t\t\t} else if (o instanceof CorruptData) {\n-\t\t\t\t\t\t\t\t\t\tlogger.fine(\"CorruptData encountered in ImageProcess.getRuntimes(): \" + ((CorruptData)o).toString());\n-\t\t\t\t\t\t\t\t\t\tcreateCombinedContext(loadedImage, apiLevelMajor, apiLevelMinor, space, proc, null, coreFilePath);\n-\t\t\t\t\t\t\t\t\t\thasContexts = true;\n-\t\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\t\tlogger.fine(\"Unexpected class encountered in ImageProcess.getRuntimes()\");\n-\t\t\t\t\t\t\t\t\t\tcreateCombinedContext(loadedImage, apiLevelMajor, apiLevelMinor, space, proc, null, coreFilePath);\n-\t\t\t\t\t\t\t\t\t\thasContexts = true;\n-\t\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t//there are no runtimes so create a context for this process\n-\t\t\t\t\t\t\t\tcreateCombinedContext(loadedImage, apiLevelMajor, apiLevelMinor, space, proc, null, coreFilePath);\n-\t\t\t\t\t\t\t\thasContexts = true;\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t} else {\n-\t\t\t\t\t//context with only an address space\n-\t\t\t\t\tcreateCombinedContext(loadedImage, apiLevelMajor, apiLevelMinor, space, null, null, coreFilePath);\n+\t\t\tif (!(o instanceof ImageAddressSpace)) {\n+\t\t\t\t// need a representation of a corrupt context\n+\t\t\t\tlogger.fine(\"Skipping corrupt ImageAddress space\");\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\n+\t\t\tImageAddressSpace space = (ImageAddressSpace) o;\n+\t\t\tIterator<?> procs = space.getProcesses();\n+\t\t\tif (!procs.hasNext()) {\n+\t\t\t\t// context with only an address space\n+\t\t\t\tcreateCombinedContext(loadedImage, apiLevelMajor, apiLevelMinor, space, null, null, coreFilePath);\n+\t\t\t\thasContexts = true;\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\n+\t\t\twhile (procs.hasNext()) {\n+\t\t\t\to = procs.next();\n+\t\t\t\tif (!(o instanceof ImageProcess)) {\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\n+\t\t\t\tImageProcess proc = (ImageProcess) o;\n+\t\t\t\tIterator<?> runtimes = proc.getRuntimes();\n+\n+\t\t\t\tif (!runtimes.hasNext()) {\n+\t\t\t\t\t// there are no runtimes so create a context for this process\n+\t\t\t\t\tcreateCombinedContext(loadedImage, apiLevelMajor, apiLevelMinor, space, proc, null, coreFilePath);\n \t\t\t\t\thasContexts = true;\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\n+\t\t\t\twhile (runtimes.hasNext()) {\n+\t\t\t\t\to = runtimes.next();\n+\t\t\t\t\tif (o instanceof JavaRuntime) {\n+\t\t\t\t\t\tcreateCombinedContext(loadedImage, apiLevelMajor, apiLevelMinor, space, proc, (JavaRuntime) o, coreFilePath);\n+\t\t\t\t\t\thasContexts = true;\n+\t\t\t\t\t} else if (o instanceof CorruptData) {\n+\t\t\t\t\t\tlogger.fine(\"CorruptData encountered in ImageProcess.getRuntimes(): \" + o);\n+\t\t\t\t\t\tcreateCombinedContext(loadedImage, apiLevelMajor, apiLevelMinor, space, proc, null, coreFilePath);\n+\t\t\t\t\t\thasContexts = true;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tlogger.fine(\"Unexpected class encountered in ImageProcess.getRuntimes()\");\n+\t\t\t\t\t\tcreateCombinedContext(loadedImage, apiLevelMajor, apiLevelMinor, space, proc, null, coreFilePath);\n+\t\t\t\t\t\thasContexts = true;\n+\t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\t//need a representation of a corrupt context\n-\t\t\t\tlogger.fine(\"Skipping corrupt ImageAddress space\");\n \t\t\t}\n \t\t}\n-\t\tif(!hasContexts) {\n-\t\t\tif(ctx.hasPropertyBeenSet(VERBOSE_MODE_PROPERTY)) {\n-\t\t\t\tout.println(\"Warning : no contexts were found, is this a valid core file ?\");\n+\t\tif (!hasContexts) {\n+\t\t\tif (ctx.hasPropertyBeenSet(VERBOSE_MODE_PROPERTY)) {\n+\t\t\t\tout.println(\"Warning: no contexts were found, is this a valid core file?\");\n+\t\t\t}\n+\t\t} else {\n+\t\t\tif (loadedImage.isTruncated()) {\n+\t\t\t\tout.println(\"Warning: dump file is truncated. Extracted information may be incomplete.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI1MDU0OA=="}, "originalCommit": {"oid": "2a30679ccf7548f186c7ebc446de72b871b9b593"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQyMTc1Nw==", "bodyText": "Done.", "url": "https://github.com/eclipse-openj9/openj9/pull/9199#discussion_r406421757", "createdAt": "2020-04-09T19:16:12Z", "author": {"login": "keithc-ca"}, "path": "jcl/src/openj9.dtfjview/share/classes/com/ibm/jvm/dtfjview/commands/OpenCommand.java", "diffHunk": "@@ -128,100 +127,113 @@ private void imagesFromCommandLine(String args[]) {\n \t\t\t}\n \t\t}\n \t}\n-\t\n+\n \tprivate ImageFactory getFactory() {\n-\t\tif(factory != null) {\n+\t\tif (factory != null) {\n \t\t\treturn factory;\n \t\t}\n \t\ttry {\n \t\t\tClass<?> factoryClass = Class.forName(factoryName);\n-\t\t\tfactory = (ImageFactory)factoryClass.newInstance();\n+\t\t\tfactory = (ImageFactory) factoryClass.newInstance();\n \t\t} catch (ClassNotFoundException e) {\n \t\t\tout.println(\"ClassNotFoundException while getting ImageFactory: \" + e.getMessage());\n \t\t\tout.println(\"Use -D\" + SYSPROP_FACTORY + \"=<classname> to change the ImageFactory\");\n \t\t\tSystem.exit(JDMPVIEW_SYNTAX_ERROR);\n-\t\t} catch (InstantiationException e) {\n-\t\t\tout.println(\"InstantiationException while getting ImageFactory: \" + e.getMessage());\n+\t\t} catch (ClassCastException e) {\n+\t\t\tout.println(\"ClassCastException while getting ImageFactory: \" + e.getMessage());\n \t\t\tSystem.exit(JDMPVIEW_SYNTAX_ERROR);\n \t\t} catch (IllegalAccessException e) {\n \t\t\tout.println(\"IllegalAccessException while getting ImageFactory: \" + e.getMessage());\n \t\t\tSystem.exit(JDMPVIEW_SYNTAX_ERROR);\n+\t\t} catch (InstantiationException e) {\n+\t\t\tout.println(\"InstantiationException while getting ImageFactory: \" + e.getMessage());\n+\t\t\tSystem.exit(JDMPVIEW_SYNTAX_ERROR);\n \t\t}\n \t\treturn factory;\n \t}\n \t\n \t\n \tprivate void createContexts(Image loadedImage, String coreFilePath) {\n-\t\tif(loadedImage == null) {\n-\t\t\t//cannot create any contexts as an image has not been obtained\n+\t\tif (loadedImage == null) {\n+\t\t\t// cannot create any contexts as an image has not been obtained\n \t\t\treturn;\n \t\t}\n \t\tboolean hasContexts = false;\n \t\tIterator<?> spaces = loadedImage.getAddressSpaces();\n-\t\twhile(spaces.hasNext()) {\n+\t\twhile (spaces.hasNext()) {\n \t\t\tObject o = spaces.next();\n-\t\t\tif(o instanceof ImageAddressSpace) {\n-\t\t\t\tImageAddressSpace space = (ImageAddressSpace) o;\n-\t\t\t\tIterator<?> procs = space.getProcesses();\n-\t\t\t\tif(procs.hasNext()) {\n-\t\t\t\t\twhile(procs.hasNext()) {\n-\t\t\t\t\t\to = procs.next();\n-\t\t\t\t\t\tif(o instanceof ImageProcess) {\n-\t\t\t\t\t\t\tImageProcess proc = (ImageProcess) o;\n-\t\t\t\t\t\t\tIterator<?> runtimes = proc.getRuntimes();\n-\t\t\t\t\t\t\tif(runtimes.hasNext()) {\n-\t\t\t\t\t\t\t\twhile(runtimes.hasNext()) {\n-\t\t\t\t\t\t\t\t\to = runtimes.next();\n-\t\t\t\t\t\t\t\t\tif(o instanceof JavaRuntime) {\n-\t\t\t\t\t\t\t\t\t\tcreateCombinedContext(loadedImage, apiLevelMajor, apiLevelMinor, space, proc, (JavaRuntime)o, coreFilePath);\n-\t\t\t\t\t\t\t\t\t\thasContexts = true;\n-\t\t\t\t\t\t\t\t\t} else if (o instanceof CorruptData) {\n-\t\t\t\t\t\t\t\t\t\tlogger.fine(\"CorruptData encountered in ImageProcess.getRuntimes(): \" + ((CorruptData)o).toString());\n-\t\t\t\t\t\t\t\t\t\tcreateCombinedContext(loadedImage, apiLevelMajor, apiLevelMinor, space, proc, null, coreFilePath);\n-\t\t\t\t\t\t\t\t\t\thasContexts = true;\n-\t\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\t\tlogger.fine(\"Unexpected class encountered in ImageProcess.getRuntimes()\");\n-\t\t\t\t\t\t\t\t\t\tcreateCombinedContext(loadedImage, apiLevelMajor, apiLevelMinor, space, proc, null, coreFilePath);\n-\t\t\t\t\t\t\t\t\t\thasContexts = true;\n-\t\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t//there are no runtimes so create a context for this process\n-\t\t\t\t\t\t\t\tcreateCombinedContext(loadedImage, apiLevelMajor, apiLevelMinor, space, proc, null, coreFilePath);\n-\t\t\t\t\t\t\t\thasContexts = true;\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t} else {\n-\t\t\t\t\t//context with only an address space\n-\t\t\t\t\tcreateCombinedContext(loadedImage, apiLevelMajor, apiLevelMinor, space, null, null, coreFilePath);\n+\t\t\tif (!(o instanceof ImageAddressSpace)) {\n+\t\t\t\t// need a representation of a corrupt context\n+\t\t\t\tlogger.fine(\"Skipping corrupt ImageAddress space\");\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\n+\t\t\tImageAddressSpace space = (ImageAddressSpace) o;\n+\t\t\tIterator<?> procs = space.getProcesses();\n+\t\t\tif (!procs.hasNext()) {\n+\t\t\t\t// context with only an address space\n+\t\t\t\tcreateCombinedContext(loadedImage, apiLevelMajor, apiLevelMinor, space, null, null, coreFilePath);\n+\t\t\t\thasContexts = true;\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\n+\t\t\twhile (procs.hasNext()) {\n+\t\t\t\to = procs.next();\n+\t\t\t\tif (!(o instanceof ImageProcess)) {\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\n+\t\t\t\tImageProcess proc = (ImageProcess) o;\n+\t\t\t\tIterator<?> runtimes = proc.getRuntimes();\n+\n+\t\t\t\tif (!runtimes.hasNext()) {\n+\t\t\t\t\t// there are no runtimes so create a context for this process\n+\t\t\t\t\tcreateCombinedContext(loadedImage, apiLevelMajor, apiLevelMinor, space, proc, null, coreFilePath);\n \t\t\t\t\thasContexts = true;\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\n+\t\t\t\twhile (runtimes.hasNext()) {\n+\t\t\t\t\to = runtimes.next();\n+\t\t\t\t\tif (o instanceof JavaRuntime) {\n+\t\t\t\t\t\tcreateCombinedContext(loadedImage, apiLevelMajor, apiLevelMinor, space, proc, (JavaRuntime) o, coreFilePath);\n+\t\t\t\t\t\thasContexts = true;\n+\t\t\t\t\t} else if (o instanceof CorruptData) {\n+\t\t\t\t\t\tlogger.fine(\"CorruptData encountered in ImageProcess.getRuntimes(): \" + o);\n+\t\t\t\t\t\tcreateCombinedContext(loadedImage, apiLevelMajor, apiLevelMinor, space, proc, null, coreFilePath);\n+\t\t\t\t\t\thasContexts = true;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tlogger.fine(\"Unexpected class encountered in ImageProcess.getRuntimes()\");\n+\t\t\t\t\t\tcreateCombinedContext(loadedImage, apiLevelMajor, apiLevelMinor, space, proc, null, coreFilePath);\n+\t\t\t\t\t\thasContexts = true;\n+\t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\t//need a representation of a corrupt context\n-\t\t\t\tlogger.fine(\"Skipping corrupt ImageAddress space\");\n \t\t\t}\n \t\t}\n-\t\tif(!hasContexts) {\n-\t\t\tif(ctx.hasPropertyBeenSet(VERBOSE_MODE_PROPERTY)) {\n-\t\t\t\tout.println(\"Warning : no contexts were found, is this a valid core file ?\");\n+\t\tif (!hasContexts) {\n+\t\t\tif (ctx.hasPropertyBeenSet(VERBOSE_MODE_PROPERTY)) {\n+\t\t\t\tout.println(\"Warning: no contexts were found, is this a valid core file?\");\n+\t\t\t}\n+\t\t} else {\n+\t\t\tif (loadedImage.isTruncated()) {\n+\t\t\t\tout.println(\"Warning: dump file is truncated. Extracted information may be incomplete.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI1MDU0OA=="}, "originalCommit": {"oid": "2a30679ccf7548f186c7ebc446de72b871b9b593"}, "originalPosition": 213}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 374, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}