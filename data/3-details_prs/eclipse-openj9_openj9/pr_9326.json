{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3NTMwMjky", "number": 9326, "title": "Supporting Changes for mon(ent/exit) for value Types", "bodyText": "Add support for monitor enter/exit for value Types on IBM Z.\nCloses: #9110\nSigned-off-by: Rahil Shah rahil@ca.ibm.com", "createdAt": "2020-04-22T20:30:39Z", "url": "https://github.com/eclipse-openj9/openj9/pull/9326", "merged": true, "mergeCommit": {"oid": "2200fc68f98fc8f6481cf3a8008d1983744ec941"}, "closed": true, "closedAt": "2020-04-29T21:01:04Z", "author": {"login": "r30shah"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcaOskgABqjMyNjI0MTgxODA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABccchgVAFqTQwMjkxNjEwOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a4df2d7953bf8fad782f13e2b8e3d7a38f0c4e0a", "author": {"user": {"login": "r30shah", "name": "Rahil Shah"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/a4df2d7953bf8fad782f13e2b8e3d7a38f0c4e0a", "committedDate": "2020-04-22T19:55:23Z", "message": "Supporting Changes for mon(ent/exit) for value Types\n\nAdd support for monitor enter/exit for value Types on IBM Z.\n\nSigned-off-by: Rahil Shah <rahil@ca.ibm.com>"}, "afterCommit": {"oid": "c99f445c36fe76ead49f8c155b36812bf8df525b", "author": {"user": {"login": "r30shah", "name": "Rahil Shah"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/c99f445c36fe76ead49f8c155b36812bf8df525b", "committedDate": "2020-04-22T20:55:13Z", "message": "Supporting Changes for mon(ent/exit) for value Types\n\nAdd support for monitor enter/exit for value Types on IBM Z.\n\nSigned-off-by: Rahil Shah <rahil@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NTkxMTU1", "url": "https://github.com/eclipse-openj9/openj9/pull/9326#pullrequestreview-398591155", "createdAt": "2020-04-22T21:09:18Z", "commit": {"oid": "c99f445c36fe76ead49f8c155b36812bf8df525b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMTowOToxOVrOGKL8sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMTowOToxOVrOGKL8sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzMzNDcwNA==", "bodyText": "@fjeremic  I have a big-fat TODO here, as whenever we are making substantial changes in monent/monexit or work towards enabling lock reservation, we do need to refactor both the evaluators.\nRight now We have multiple OOL sections generated.\n\nMonitorCacheLookup : We implement this in OOL and as last resource there we call the JIT Helper.\nLock Reservation : Also we perform some checks in OOL for lock reservation before calling the JIT helper.\nInlineRecursive:  Generating a manual nested monitor handling in OOL, which also has a helper call.\n\nRight now 2 is disabled and we generate either 1(In case we do not have lockword offset) or 3 and if we generate 1 , second OOL only contains a call to JIT Helper, otherwise, we have some good work done in OOL section for 3 before it call helper.", "url": "https://github.com/eclipse-openj9/openj9/pull/9326#discussion_r413334704", "createdAt": "2020-04-22T21:09:19Z", "author": {"login": "r30shah"}, "path": "runtime/compiler/z/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -6937,16 +6937,57 @@ J9::Z::TreeEvaluator::VMifInstanceOfEvaluator(TR::Node * node, TR::CodeGenerator\n    return NULL;\n    }\n \n+TR::Register *\n+J9::Z::TreeEvaluator::generateCheckForValueTypeMonitorEnterOrExit(TR::Node *node, TR::Register *objReg, TR::LabelSymbol* mergeLabel, TR::LabelSymbol *helperCallLabel, TR::CodeGenerator *cg)\n+   {\n+   TR::Register *objectClassReg = cg->allocateRegister();\n+   TR::TreeEvaluator::genLoadForObjectHeadersMasked(cg, node, objectClassReg, generateS390MemoryReference(objReg, TR::Compiler->om.offsetOfObjectVftField(), cg), NULL);\n+   TR::Register *classFlagsRegister = cg->allocateRegister();\n+   TR_J9VMBase *fej9 = (TR_J9VMBase *)(cg->comp()->fe());\n+   generateRXInstruction(cg, TR::InstOpCode::L, node, classFlagsRegister, generateS390MemoryReference(objectClassReg, static_cast<uint32_t>(fej9->getOffsetOfClassFlags()), cg));\n+   bool generateOOLSection = helperCallLabel == NULL;\n+   if (generateOOLSection)\n+      helperCallLabel = generateLabelSymbol(cg);\n+   generateS390CompareAndBranchInstruction(cg, TR::InstOpCode::CL, node, classFlagsRegister, static_cast<int32_t>(J9ClassIsValueType), TR::InstOpCode::COND_BE, helperCallLabel);\n+\n+   // TODO: As we have quite amount of work happening in OOL in other cases (Monitor Cache Lookup / Lock Reservation / Regular Code Recursive CAS code for monitor),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c99f445c36fe76ead49f8c155b36812bf8df525b"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxMTQ0NTE1", "url": "https://github.com/eclipse-openj9/openj9/pull/9326#pullrequestreview-401144515", "createdAt": "2020-04-27T16:55:51Z", "commit": {"oid": "c99f445c36fe76ead49f8c155b36812bf8df525b"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNjo1NTo1MVrOGMtn9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNzozMjo1M1rOGMvQtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk4MzYwNw==", "bodyText": "Is there a need to expose this API externally? The only two uses should be in the monitor evaluators, so I would think it could just remain as a static function in the compilation unit.", "url": "https://github.com/eclipse-openj9/openj9/pull/9326#discussion_r415983607", "createdAt": "2020-04-27T16:55:51Z", "author": {"login": "fjeremic"}, "path": "runtime/compiler/z/codegen/J9TreeEvaluator.hpp", "diffHunk": "@@ -150,7 +150,17 @@ class OMR_EXTENSIBLE TreeEvaluator: public J9::TreeEvaluator\n                                                             TR_S390ScratchRegisterManager *srm, TR::LabelSymbol *mergeLabel);\n \n \n-\n+   /**\n+    * Generates a quick runtime test for valueType node and in case if node is of valueType, generates a branch to helper call\n+    * \n+    * @param node monent or monexit node\n+    * @param objReg TR::Register containing the object\n+    * @param mergeLabel TR::LabelSymbol* to pointing to mergePoint in mainline\n+    * @param callLabel TR::LabelSymbol* pointing to the helper Call Label\n+    * @param cg CodeGenerator Object Ptr\n+    * @return TR::Register* If Given node required a runtime test to check for valueType, it will return the register containing J9Class of given object\n+    */\n+   static TR::Register *generateCheckForValueTypeMonitorEnterOrExit(TR::Node *node, TR::Register *objReg, TR::LabelSymbol *mergeLabel, TR::LabelSymbol *helperCallLabel, TR::CodeGenerator *cg);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c99f445c36fe76ead49f8c155b36812bf8df525b"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk5ODU1NQ==", "bodyText": "This should be a static_cast if possible.", "url": "https://github.com/eclipse-openj9/openj9/pull/9326#discussion_r415998555", "createdAt": "2020-04-27T17:16:37Z", "author": {"login": "fjeremic"}, "path": "runtime/compiler/z/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -6937,16 +6937,57 @@ J9::Z::TreeEvaluator::VMifInstanceOfEvaluator(TR::Node * node, TR::CodeGenerator\n    return NULL;\n    }\n \n+TR::Register *\n+J9::Z::TreeEvaluator::generateCheckForValueTypeMonitorEnterOrExit(TR::Node *node, TR::Register *objReg, TR::LabelSymbol* mergeLabel, TR::LabelSymbol *helperCallLabel, TR::CodeGenerator *cg)\n+   {\n+   TR::Register *objectClassReg = cg->allocateRegister();\n+   TR::TreeEvaluator::genLoadForObjectHeadersMasked(cg, node, objectClassReg, generateS390MemoryReference(objReg, TR::Compiler->om.offsetOfObjectVftField(), cg), NULL);\n+   TR::Register *classFlagsRegister = cg->allocateRegister();\n+   TR_J9VMBase *fej9 = (TR_J9VMBase *)(cg->comp()->fe());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c99f445c36fe76ead49f8c155b36812bf8df525b"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk5ODg2MQ==", "bodyText": "This register leaks. We never seem to call cg->stopUsingRegister on it.", "url": "https://github.com/eclipse-openj9/openj9/pull/9326#discussion_r415998861", "createdAt": "2020-04-27T17:17:04Z", "author": {"login": "fjeremic"}, "path": "runtime/compiler/z/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -6937,16 +6937,57 @@ J9::Z::TreeEvaluator::VMifInstanceOfEvaluator(TR::Node * node, TR::CodeGenerator\n    return NULL;\n    }\n \n+TR::Register *\n+J9::Z::TreeEvaluator::generateCheckForValueTypeMonitorEnterOrExit(TR::Node *node, TR::Register *objReg, TR::LabelSymbol* mergeLabel, TR::LabelSymbol *helperCallLabel, TR::CodeGenerator *cg)\n+   {\n+   TR::Register *objectClassReg = cg->allocateRegister();\n+   TR::TreeEvaluator::genLoadForObjectHeadersMasked(cg, node, objectClassReg, generateS390MemoryReference(objReg, TR::Compiler->om.offsetOfObjectVftField(), cg), NULL);\n+   TR::Register *classFlagsRegister = cg->allocateRegister();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c99f445c36fe76ead49f8c155b36812bf8df525b"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAwNTk4Mg==", "bodyText": "I don't think we need to load the flags into a register. Can we get away with using TM to just test in memory and generate a BRC to act on it?", "url": "https://github.com/eclipse-openj9/openj9/pull/9326#discussion_r416005982", "createdAt": "2020-04-27T17:27:03Z", "author": {"login": "fjeremic"}, "path": "runtime/compiler/z/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -6937,16 +6937,57 @@ J9::Z::TreeEvaluator::VMifInstanceOfEvaluator(TR::Node * node, TR::CodeGenerator\n    return NULL;\n    }\n \n+TR::Register *\n+J9::Z::TreeEvaluator::generateCheckForValueTypeMonitorEnterOrExit(TR::Node *node, TR::Register *objReg, TR::LabelSymbol* mergeLabel, TR::LabelSymbol *helperCallLabel, TR::CodeGenerator *cg)\n+   {\n+   TR::Register *objectClassReg = cg->allocateRegister();\n+   TR::TreeEvaluator::genLoadForObjectHeadersMasked(cg, node, objectClassReg, generateS390MemoryReference(objReg, TR::Compiler->om.offsetOfObjectVftField(), cg), NULL);\n+   TR::Register *classFlagsRegister = cg->allocateRegister();\n+   TR_J9VMBase *fej9 = (TR_J9VMBase *)(cg->comp()->fe());\n+   generateRXInstruction(cg, TR::InstOpCode::L, node, classFlagsRegister, generateS390MemoryReference(objectClassReg, static_cast<uint32_t>(fej9->getOffsetOfClassFlags()), cg));\n+   bool generateOOLSection = helperCallLabel == NULL;\n+   if (generateOOLSection)\n+      helperCallLabel = generateLabelSymbol(cg);\n+   generateS390CompareAndBranchInstruction(cg, TR::InstOpCode::CL, node, classFlagsRegister, static_cast<int32_t>(J9ClassIsValueType), TR::InstOpCode::COND_BE, helperCallLabel);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c99f445c36fe76ead49f8c155b36812bf8df525b"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAwNzUwNA==", "bodyText": "What you have here is fine. Personally I'd avoid complicating things with if (generateOOLSection) as it relies on external code doing something, so if any changes are made there would be bugs. Personally I'd unconditionally generate the OOL and call the helper just for our own sanity. However what you have is ok. I agree the evaluator is starting to become quite complicated now and needs some love.", "url": "https://github.com/eclipse-openj9/openj9/pull/9326#discussion_r416007504", "createdAt": "2020-04-27T17:29:06Z", "author": {"login": "fjeremic"}, "path": "runtime/compiler/z/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -6937,16 +6937,57 @@ J9::Z::TreeEvaluator::VMifInstanceOfEvaluator(TR::Node * node, TR::CodeGenerator\n    return NULL;\n    }\n \n+TR::Register *\n+J9::Z::TreeEvaluator::generateCheckForValueTypeMonitorEnterOrExit(TR::Node *node, TR::Register *objReg, TR::LabelSymbol* mergeLabel, TR::LabelSymbol *helperCallLabel, TR::CodeGenerator *cg)\n+   {\n+   TR::Register *objectClassReg = cg->allocateRegister();\n+   TR::TreeEvaluator::genLoadForObjectHeadersMasked(cg, node, objectClassReg, generateS390MemoryReference(objReg, TR::Compiler->om.offsetOfObjectVftField(), cg), NULL);\n+   TR::Register *classFlagsRegister = cg->allocateRegister();\n+   TR_J9VMBase *fej9 = (TR_J9VMBase *)(cg->comp()->fe());\n+   generateRXInstruction(cg, TR::InstOpCode::L, node, classFlagsRegister, generateS390MemoryReference(objectClassReg, static_cast<uint32_t>(fej9->getOffsetOfClassFlags()), cg));\n+   bool generateOOLSection = helperCallLabel == NULL;\n+   if (generateOOLSection)\n+      helperCallLabel = generateLabelSymbol(cg);\n+   generateS390CompareAndBranchInstruction(cg, TR::InstOpCode::CL, node, classFlagsRegister, static_cast<int32_t>(J9ClassIsValueType), TR::InstOpCode::COND_BE, helperCallLabel);\n+\n+   // TODO: As we have quite amount of work happening in OOL in other cases (Monitor Cache Lookup / Lock Reservation / Regular Code Recursive CAS code for monitor),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzMzNDcwNA=="}, "originalCommit": {"oid": "c99f445c36fe76ead49f8c155b36812bf8df525b"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAwODkxNw==", "bodyText": "We should try to stick to a similar implementation to x86 to avoid complexity and deviation. You only need to send in the node and from that you can extract the object register.", "url": "https://github.com/eclipse-openj9/openj9/pull/9326#discussion_r416008917", "createdAt": "2020-04-27T17:31:00Z", "author": {"login": "fjeremic"}, "path": "runtime/compiler/z/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -6937,16 +6937,57 @@ J9::Z::TreeEvaluator::VMifInstanceOfEvaluator(TR::Node * node, TR::CodeGenerator\n    return NULL;\n    }\n \n+TR::Register *\n+J9::Z::TreeEvaluator::generateCheckForValueTypeMonitorEnterOrExit(TR::Node *node, TR::Register *objReg, TR::LabelSymbol* mergeLabel, TR::LabelSymbol *helperCallLabel, TR::CodeGenerator *cg)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c99f445c36fe76ead49f8c155b36812bf8df525b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAxMDQyMg==", "bodyText": "Let's try to stick with similar code as on x86 and move this TR_maybe check into the API. Alternatively modify the x86 implementation to look like yours. Whichever you think is best as long as we are consistent.", "url": "https://github.com/eclipse-openj9/openj9/pull/9326#discussion_r416010422", "createdAt": "2020-04-27T17:32:53Z", "author": {"login": "fjeremic"}, "path": "runtime/compiler/z/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -7006,13 +7047,24 @@ J9::Z::TreeEvaluator::VMmonentEvaluator(TR::Node * node, TR::CodeGenerator * cg)\n    if (disableOOL)\n       inlineRecursive = false;\n \n+   if (TR::Compiler->om.areValueTypesEnabled() && isMonitorValueType == TR_maybe)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c99f445c36fe76ead49f8c155b36812bf8df525b"}, "originalPosition": 63}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c99f445c36fe76ead49f8c155b36812bf8df525b", "author": {"user": {"login": "r30shah", "name": "Rahil Shah"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/c99f445c36fe76ead49f8c155b36812bf8df525b", "committedDate": "2020-04-22T20:55:13Z", "message": "Supporting Changes for mon(ent/exit) for value Types\n\nAdd support for monitor enter/exit for value Types on IBM Z.\n\nSigned-off-by: Rahil Shah <rahil@ca.ibm.com>"}, "afterCommit": {"oid": "097726868780ab77a37f3f823e2ba1d82900e0db", "author": {"user": {"login": "r30shah", "name": "Rahil Shah"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/097726868780ab77a37f3f823e2ba1d82900e0db", "committedDate": "2020-04-23T15:22:01Z", "message": "Supporting Changes for mon(ent/exit) for value Types\n\nAdd support for monitor enter/exit for value Types on IBM Z.\n\nSigned-off-by: Rahil Shah <rahil@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "097726868780ab77a37f3f823e2ba1d82900e0db", "author": {"user": {"login": "r30shah", "name": "Rahil Shah"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/097726868780ab77a37f3f823e2ba1d82900e0db", "committedDate": "2020-04-23T15:22:01Z", "message": "Supporting Changes for mon(ent/exit) for value Types\n\nAdd support for monitor enter/exit for value Types on IBM Z.\n\nSigned-off-by: Rahil Shah <rahil@ca.ibm.com>"}, "afterCommit": {"oid": "46e59d80a6c270bd3654d431e7c3372ec3d240b8", "author": {"user": {"login": "r30shah", "name": "Rahil Shah"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/46e59d80a6c270bd3654d431e7c3372ec3d240b8", "committedDate": "2020-04-27T21:07:11Z", "message": "Supporting Changes for mon(ent/exit) for value Types\n\nAdd support for monitor enter/exit for value Types on IBM Z.\n\nSigned-off-by: Rahil Shah <rahil@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "46e59d80a6c270bd3654d431e7c3372ec3d240b8", "author": {"user": {"login": "r30shah", "name": "Rahil Shah"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/46e59d80a6c270bd3654d431e7c3372ec3d240b8", "committedDate": "2020-04-27T21:07:11Z", "message": "Supporting Changes for mon(ent/exit) for value Types\n\nAdd support for monitor enter/exit for value Types on IBM Z.\n\nSigned-off-by: Rahil Shah <rahil@ca.ibm.com>"}, "afterCommit": {"oid": "a9677bf7a14415c84c7dcde1d0bf8fc7969e950b", "author": {"user": {"login": "r30shah", "name": "Rahil Shah"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/a9677bf7a14415c84c7dcde1d0bf8fc7969e950b", "committedDate": "2020-04-27T21:09:28Z", "message": "Supporting Changes for mon(ent/exit) for value Types\n\nAdd support for monitor enter/exit for value Types on IBM Z.\n\nSigned-off-by: Rahil Shah <rahil@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxMzQwNjM0", "url": "https://github.com/eclipse-openj9/openj9/pull/9326#pullrequestreview-401340634", "createdAt": "2020-04-27T21:29:00Z", "commit": {"oid": "a9677bf7a14415c84c7dcde1d0bf8fc7969e950b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMToyOTowMVrOGM4gjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMToyOTowMVrOGM4gjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE2MTkzMw==", "bodyText": "@fjeremic  We will not carry out further test in the loop if we find valueType is enabled and node can be of value type.", "url": "https://github.com/eclipse-openj9/openj9/pull/9326#discussion_r416161933", "createdAt": "2020-04-27T21:29:01Z", "author": {"login": "r30shah"}, "path": "runtime/compiler/z/codegen/ReduceSynchronizedFieldLoad.cpp", "diffHunk": "@@ -284,7 +284,9 @@ ReduceSynchronizedFieldLoad::performOnTreeTops(TR::TreeTop* startTreeTop, TR::Tr\n          TR::Node* monentNode = iter.currentNode()->getOpCodeValue() == TR::monent ?\n             iter.currentNode() :\n             iter.currentNode()->getFirstChild();\n-\n+         // If value types are enabled and the monitor is confirmed non value type, than only do this optimization.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9677bf7a14415c84c7dcde1d0bf8fc7969e950b"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a9677bf7a14415c84c7dcde1d0bf8fc7969e950b", "author": {"user": {"login": "r30shah", "name": "Rahil Shah"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/a9677bf7a14415c84c7dcde1d0bf8fc7969e950b", "committedDate": "2020-04-27T21:09:28Z", "message": "Supporting Changes for mon(ent/exit) for value Types\n\nAdd support for monitor enter/exit for value Types on IBM Z.\n\nSigned-off-by: Rahil Shah <rahil@ca.ibm.com>"}, "afterCommit": {"oid": "2a2c5fa991bf7b3579cbe91338977bcb1f0e2884", "author": {"user": {"login": "r30shah", "name": "Rahil Shah"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/2a2c5fa991bf7b3579cbe91338977bcb1f0e2884", "committedDate": "2020-04-28T16:06:11Z", "message": "Supporting Changes for mon(ent/exit) for value Types\n\nAdd support for monitor enter/exit for value Types on IBM Z.\n\nSigned-off-by: Rahil Shah <rahil@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyMDAxODY0", "url": "https://github.com/eclipse-openj9/openj9/pull/9326#pullrequestreview-402001864", "createdAt": "2020-04-28T16:19:58Z", "commit": {"oid": "2a2c5fa991bf7b3579cbe91338977bcb1f0e2884"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNjoxOTo1OFrOGNcRHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNjoxOTo1OFrOGNcRHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc0NzgwNw==", "bodyText": "This is dangerous. We are assuming the value of J9ClassIsValueType is in a specific bit range. If that were ever to change we would have a silent bug here. Can we add a fatal assert that 0 < J9ClassIsValueType <= 0xFFFF?", "url": "https://github.com/eclipse-openj9/openj9/pull/9326#discussion_r416747807", "createdAt": "2020-04-28T16:19:58Z", "author": {"login": "fjeremic"}, "path": "runtime/compiler/z/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -6937,16 +6937,69 @@ J9::Z::TreeEvaluator::VMifInstanceOfEvaluator(TR::Node * node, TR::CodeGenerator\n    return NULL;\n    }\n \n+/**\n+    * Generates a quick runtime test for valueType node and in case if node is of valueType, generates a branch to helper call\n+    * \n+    * @param node monent or monexit node\n+    * @param mergeLabel TR::LabelSymbol* to pointing to mergePoint in mainline\n+    * @param callLabel TR::LabelSymbol* pointing to the helper Call Label\n+    * @param cg CodeGenerator Object Ptr\n+    * @return TR::Register* If Given node required a runtime test to check for valueType, it will return the register containing J9Class of given object\n+    */\n+static TR::Register*\n+generateCheckForValueTypeMonitorEnterOrExit(TR::Node *node, TR::LabelSymbol* mergeLabel, TR::LabelSymbol *helperCallLabel, TR::CodeGenerator *cg)\n+   {\n+   TR::Register *objReg = cg->evaluate(node->getFirstChild());\n+   TR::Register *objectClassReg = cg->allocateRegister();\n+   TR::TreeEvaluator::genLoadForObjectHeadersMasked(cg, node, objectClassReg, generateS390MemoryReference(objReg, TR::Compiler->om.offsetOfObjectVftField(), cg), NULL);\n+   TR::Register *classFlagsRegister = cg->allocateRegister();\n+   TR_J9VMBase *fej9 = static_cast<TR_J9VMBase *>(cg->comp()->fe());\n+   generateRXInstruction(cg, TR::InstOpCode::L, node, classFlagsRegister, generateS390MemoryReference(objectClassReg, static_cast<uint32_t>(fej9->getOffsetOfClassFlags()), cg));\n+   bool generateOOLSection = helperCallLabel == NULL;\n+   if (generateOOLSection)\n+      helperCallLabel = generateLabelSymbol(cg);\n+   \n+   generateRIInstruction(cg, TR::InstOpCode::TMLL, node, classFlagsRegister, J9ClassIsValueType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a2c5fa991bf7b3579cbe91338977bcb1f0e2884"}, "originalPosition": 26}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2a2c5fa991bf7b3579cbe91338977bcb1f0e2884", "author": {"user": {"login": "r30shah", "name": "Rahil Shah"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/2a2c5fa991bf7b3579cbe91338977bcb1f0e2884", "committedDate": "2020-04-28T16:06:11Z", "message": "Supporting Changes for mon(ent/exit) for value Types\n\nAdd support for monitor enter/exit for value Types on IBM Z.\n\nSigned-off-by: Rahil Shah <rahil@ca.ibm.com>"}, "afterCommit": {"oid": "247123bcd0bf7c87262e954972690bf87f08e56a", "author": {"user": {"login": "r30shah", "name": "Rahil Shah"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/247123bcd0bf7c87262e954972690bf87f08e56a", "committedDate": "2020-04-28T16:27:12Z", "message": "Supporting Changes for mon(ent/exit) for value Types\n\nAdd support for monitor enter/exit for value Types on IBM Z.\n\nSigned-off-by: Rahil Shah <rahil@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "247123bcd0bf7c87262e954972690bf87f08e56a", "author": {"user": {"login": "r30shah", "name": "Rahil Shah"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/247123bcd0bf7c87262e954972690bf87f08e56a", "committedDate": "2020-04-28T16:27:12Z", "message": "Supporting Changes for mon(ent/exit) for value Types\n\nAdd support for monitor enter/exit for value Types on IBM Z.\n\nSigned-off-by: Rahil Shah <rahil@ca.ibm.com>"}, "afterCommit": {"oid": "194c9838319153c006f53f64cfd8db44d2a78ad5", "author": {"user": {"login": "r30shah", "name": "Rahil Shah"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/194c9838319153c006f53f64cfd8db44d2a78ad5", "committedDate": "2020-04-28T17:21:56Z", "message": "Supporting Changes for mon(ent/exit) for value Types\n\nAdd support for monitor enter/exit for value Types on IBM Z.\n\nSigned-off-by: Rahil Shah <rahil@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyMTU1OTAz", "url": "https://github.com/eclipse-openj9/openj9/pull/9326#pullrequestreview-402155903", "createdAt": "2020-04-28T19:43:46Z", "commit": {"oid": "194c9838319153c006f53f64cfd8db44d2a78ad5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxOTo0Mzo0NlrOGNkGIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxOTo0Mzo0NlrOGNkGIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg3NjA2Nw==", "bodyText": "This is still not what we want. I would have hoped the use of classFlagsRegister would have been completely eliminated. Can we get rid of this load and just turn the TMLL into TM (immediate-memory test under mask)?", "url": "https://github.com/eclipse-openj9/openj9/pull/9326#discussion_r416876067", "createdAt": "2020-04-28T19:43:46Z", "author": {"login": "fjeremic"}, "path": "runtime/compiler/z/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -6937,16 +6937,71 @@ J9::Z::TreeEvaluator::VMifInstanceOfEvaluator(TR::Node * node, TR::CodeGenerator\n    return NULL;\n    }\n \n+/**\n+    * Generates a quick runtime test for valueType node and in case if node is of valueType, generates a branch to helper call\n+    * \n+    * @param node monent or monexit node\n+    * @param mergeLabel TR::LabelSymbol* to pointing to mergePoint in mainline\n+    * @param callLabel TR::LabelSymbol* pointing to the helper Call Label\n+    * @param cg CodeGenerator Object Ptr\n+    * @return TR::Register* If Given node required a runtime test to check for valueType, it will return the register containing J9Class of given object\n+    */\n+static TR::Register*\n+generateCheckForValueTypeMonitorEnterOrExit(TR::Node *node, TR::LabelSymbol* mergeLabel, TR::LabelSymbol *helperCallLabel, TR::CodeGenerator *cg)\n+   {\n+   TR::Register *objReg = cg->evaluate(node->getFirstChild());\n+   TR::Register *objectClassReg = cg->allocateRegister();\n+   TR::TreeEvaluator::genLoadForObjectHeadersMasked(cg, node, objectClassReg, generateS390MemoryReference(objReg, TR::Compiler->om.offsetOfObjectVftField(), cg), NULL);\n+   TR::Register *classFlagsRegister = cg->allocateRegister();\n+   TR_J9VMBase *fej9 = static_cast<TR_J9VMBase *>(cg->comp()->fe());\n+   generateRXInstruction(cg, TR::InstOpCode::L, node, classFlagsRegister, generateS390MemoryReference(objectClassReg, static_cast<uint32_t>(fej9->getOffsetOfClassFlags()), cg));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "194c9838319153c006f53f64cfd8db44d2a78ad5"}, "originalPosition": 21}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "194c9838319153c006f53f64cfd8db44d2a78ad5", "author": {"user": {"login": "r30shah", "name": "Rahil Shah"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/194c9838319153c006f53f64cfd8db44d2a78ad5", "committedDate": "2020-04-28T17:21:56Z", "message": "Supporting Changes for mon(ent/exit) for value Types\n\nAdd support for monitor enter/exit for value Types on IBM Z.\n\nSigned-off-by: Rahil Shah <rahil@ca.ibm.com>"}, "afterCommit": {"oid": "c64a354e89084e22019e97161f517bd09eace94a", "author": {"user": {"login": "r30shah", "name": "Rahil Shah"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/c64a354e89084e22019e97161f517bd09eace94a", "committedDate": "2020-04-28T23:35:56Z", "message": "Supporting Changes for mon(ent/exit) for value Types\n\nAdd support for monitor enter/exit for value Types on IBM Z.\n\nSigned-off-by: Rahil Shah <rahil@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyNzk0Njc5", "url": "https://github.com/eclipse-openj9/openj9/pull/9326#pullrequestreview-402794679", "createdAt": "2020-04-29T15:40:45Z", "commit": {"oid": "c64a354e89084e22019e97161f517bd09eace94a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNTo0MDo0NVrOGOFAzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjowOToxNFrOGOGQeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQxNTM3NA==", "bodyText": "Formatting is a bit off here. I don't think we need to specify the types of the parameters as Doxygen automatically picks that up. There shouldn't be an \"If\" in the return value message because this register is always returned.", "url": "https://github.com/eclipse-openj9/openj9/pull/9326#discussion_r417415374", "createdAt": "2020-04-29T15:40:45Z", "author": {"login": "fjeremic"}, "path": "runtime/compiler/z/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -6937,16 +6937,69 @@ J9::Z::TreeEvaluator::VMifInstanceOfEvaluator(TR::Node * node, TR::CodeGenerator\n    return NULL;\n    }\n \n+/**\n+    * Generates a quick runtime test for valueType node and in case if node is of valueType, generates a branch to helper call\n+    * \n+    * @param node monent or monexit node\n+    * @param mergeLabel TR::LabelSymbol* to pointing to mergePoint in mainline\n+    * @param callLabel TR::LabelSymbol* pointing to the helper Call Label\n+    * @param cg CodeGenerator Object Ptr\n+    * @return TR::Register* If Given node required a runtime test to check for valueType, it will return the register containing J9Class of given object\n+    */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c64a354e89084e22019e97161f517bd09eace94a"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQzNTc2OQ==", "bodyText": "This may be more on the personal preference but I'd consider adding some line breaks in between logical blocks of code. This entire function looks like one giant block of continuous code which may be hard to read. Just something to consider. I've gone ahead and improved the grammar in the comments and added line breaks to show what this function could look like:\nstatic TR::Register*\ngenerateCheckForValueTypeMonitorEnterOrExit(TR::Node *node, TR::LabelSymbol* mergeLabel, TR::LabelSymbol *helperCallLabel, TR::CodeGenerator *cg)\n   {\n   auto objReg = cg->evaluate(node->getFirstChild());\n   auto objectClassReg = cg->allocateRegister();\n\n   TR::TreeEvaluator::genLoadForObjectHeadersMasked(cg, node, objectClassReg, generateS390MemoryReference(objReg, TR::Compiler->om.offsetOfObjectVftField(), cg), NULL);\n\n   // Currently the value of J9ClassIsValueType flag maps to the second (low order) byte of the class flags field. To\n   // be able to use the TM instruction we need to ensure we safe guard against changes of this value since we have to\n   // hardcode the offset from the class flags field to reach the byte corresponding to the bit we want to test.\n   static_assert(static_cast<uint32_t>(J9ClassIsValueType & 0xFF00) == static_cast<uint32_t>(J9ClassIsValueType), \n      \"Expecting J9ClassIsValueType to be within second byte of classFlags\");\n   auto classFlagsMemRef = generateS390MemoryReference(objectClassReg, static_cast<uint32_t>(static_cast<TR_J9VMBase *>(cg->comp()->fe())->getOffsetOfClassFlags()) + 2, cg);\n   generateSIInstruction(cg, TR::InstOpCode::TM, node, classFlagsMemRef, J9ClassIsValueType >> 8);\n\n   const bool generateOOLSection = (helperCallLabel == NULL);\n   if (generateOOLSection)\n      {\n      helperCallLabel = generateLabelSymbol(cg);\n      }\n\n   generateS390BranchInstruction(cg, TR::InstOpCode::BRC, TR::InstOpCode::COND_BRNZ, node, helperCallLabel);\n\n   // TODO: There is now the possibility of three distinct OOL sections with helper calls to be generated when\n   // evaluating the TR::monent or TR::monexit nodes:\n   //\n   // 1. Monitor cache lookup OOL\n   // 2. Lock reservation OOL\n   // 3. Value types object OOL\n   //\n   // These distinct OOL sections may perform non-trivial logic but what they all have in common is they all have a\n   // call to the same JIT helper which acts as a fall back. This complexity exists because of the way the evaluators\n   // are currently architected and due to the restriction that we cannot have nested OOL code sections. Whenever\n   // making future changes to these evaluators we should consider refactoring them to reduce the complexity and\n   // attempt to consolidate the calls to the JIT helper so as to not have multiple copies.\n   if (generateOOLSection)\n      {\n      TR_S390OutOfLineCodeSection *helperCallOOLSection = new (cg->trHeapMemory()) TR_S390OutOfLineCodeSection(helperCallLabel, mergeLabel, cg);\n      cg->getS390OutOfLineCodeSectionList().push_front(helperCallOOLSection);\n      helperCallOOLSection->swapInstructionListsWithCompilation();\n\n      auto cursor = generateS390LabelInstruction(cg, TR::InstOpCode::LABEL, node, helperCallLabel);\n\n      TR_Debug *debugObj = cg->getDebug();\n      if (debugObj)\n         debugObj->addInstructionComment(cursor, \"Denotes Start of OOL for ValueType Node\");\n\n      cg->getLinkage(TR_CHelper)->buildDirectDispatch(node);\n      cursor = generateS390BranchInstruction(cg, TR::InstOpCode::BRC, TR::InstOpCode::COND_BRC, node, mergeLabel);\n\n      if (debugObj)\n         debugObj->addInstructionComment(cursor, \"Denotes End of OOL for ValueType Node\");\n\n      helperCallOOLSection->swapInstructionListsWithCompilation();\n      }\n\n   return objectClassReg;\n   }\n\nDo you think it reads easier and the comments are improved?", "url": "https://github.com/eclipse-openj9/openj9/pull/9326#discussion_r417435769", "createdAt": "2020-04-29T16:09:14Z", "author": {"login": "fjeremic"}, "path": "runtime/compiler/z/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -6937,16 +6937,69 @@ J9::Z::TreeEvaluator::VMifInstanceOfEvaluator(TR::Node * node, TR::CodeGenerator\n    return NULL;\n    }\n \n+/**\n+    * Generates a quick runtime test for valueType node and in case if node is of valueType, generates a branch to helper call\n+    * \n+    * @param node monent or monexit node\n+    * @param mergeLabel TR::LabelSymbol* to pointing to mergePoint in mainline\n+    * @param callLabel TR::LabelSymbol* pointing to the helper Call Label\n+    * @param cg CodeGenerator Object Ptr\n+    * @return TR::Register* If Given node required a runtime test to check for valueType, it will return the register containing J9Class of given object\n+    */\n+static TR::Register*\n+generateCheckForValueTypeMonitorEnterOrExit(TR::Node *node, TR::LabelSymbol* mergeLabel, TR::LabelSymbol *helperCallLabel, TR::CodeGenerator *cg)\n+   {\n+   TR::Register *objReg = cg->evaluate(node->getFirstChild());\n+   TR::Register *objectClassReg = cg->allocateRegister();\n+   TR::TreeEvaluator::genLoadForObjectHeadersMasked(cg, node, objectClassReg, generateS390MemoryReference(objReg, TR::Compiler->om.offsetOfObjectVftField(), cg), NULL);\n+   TR_J9VMBase *fej9 = static_cast<TR_J9VMBase *>(cg->comp()->fe());\n+   bool generateOOLSection = helperCallLabel == NULL;\n+   if (generateOOLSection)\n+      helperCallLabel = generateLabelSymbol(cg);\n+   // Currently we have used a bit from the second byte in the 32-bit ClassFlags field for J9ClassIsValueType flag.\n+   // To use the memory to immediate test instruction, we are generating a memory reference which accesses the second byte in the ClassFlags field.\n+   static_assert(static_cast<uint32_t>(J9ClassIsValueType & 0xFF00) == static_cast<uint32_t>(J9ClassIsValueType), \"Expecting J9ClassIsValueType to be within second byte of classFlags\");\n+   TR::MemoryReference *classFlagsMemRef = generateS390MemoryReference(objectClassReg, static_cast<uint32_t>(fej9->getOffsetOfClassFlags()) + 2, cg);\n+   generateSIInstruction(cg, TR::InstOpCode::TM, node, classFlagsMemRef, J9ClassIsValueType >> 8);\n+   generateS390BranchInstruction(cg, TR::InstOpCode::BRC, TR::InstOpCode::COND_BRNZ, node, helperCallLabel);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c64a354e89084e22019e97161f517bd09eace94a"}, "originalPosition": 28}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c64a354e89084e22019e97161f517bd09eace94a", "author": {"user": {"login": "r30shah", "name": "Rahil Shah"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/c64a354e89084e22019e97161f517bd09eace94a", "committedDate": "2020-04-28T23:35:56Z", "message": "Supporting Changes for mon(ent/exit) for value Types\n\nAdd support for monitor enter/exit for value Types on IBM Z.\n\nSigned-off-by: Rahil Shah <rahil@ca.ibm.com>"}, "afterCommit": {"oid": "95e8afe940942c7102d63af15e07e73d02cb8789", "author": {"user": {"login": "r30shah", "name": "Rahil Shah"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/95e8afe940942c7102d63af15e07e73d02cb8789", "committedDate": "2020-04-29T17:11:18Z", "message": "Supporting Changes for mon(ent/exit) for value Types\n\nAdd support for monitor enter/exit for value Types on IBM Z.\n\nSigned-off-by: Rahil Shah <rahil@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "95e8afe940942c7102d63af15e07e73d02cb8789", "author": {"user": {"login": "r30shah", "name": "Rahil Shah"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/95e8afe940942c7102d63af15e07e73d02cb8789", "committedDate": "2020-04-29T17:11:18Z", "message": "Supporting Changes for mon(ent/exit) for value Types\n\nAdd support for monitor enter/exit for value Types on IBM Z.\n\nSigned-off-by: Rahil Shah <rahil@ca.ibm.com>"}, "afterCommit": {"oid": "43de64cef4a422b07e3d23dd5da27ee8a1456fe5", "author": {"user": {"login": "r30shah", "name": "Rahil Shah"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/43de64cef4a422b07e3d23dd5da27ee8a1456fe5", "committedDate": "2020-04-29T17:57:41Z", "message": "Supporting Changes for mon(ent/exit) for value Types\n\nAdd support for monitor enter/exit for value Types on IBM Z.\n\nSigned-off-by: Rahil Shah <rahil@ca.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c89e41e6063a07fe9f1366692c0f054769be7b4a", "author": {"user": {"login": "r30shah", "name": "Rahil Shah"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/c89e41e6063a07fe9f1366692c0f054769be7b4a", "committedDate": "2020-04-29T17:59:09Z", "message": "Supporting Changes for mon(ent/exit) for value Types\n\nAdd support for monitor enter/exit for value Types on IBM Z.\n\nSigned-off-by: Rahil Shah <rahil@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "43de64cef4a422b07e3d23dd5da27ee8a1456fe5", "author": {"user": {"login": "r30shah", "name": "Rahil Shah"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/43de64cef4a422b07e3d23dd5da27ee8a1456fe5", "committedDate": "2020-04-29T17:57:41Z", "message": "Supporting Changes for mon(ent/exit) for value Types\n\nAdd support for monitor enter/exit for value Types on IBM Z.\n\nSigned-off-by: Rahil Shah <rahil@ca.ibm.com>"}, "afterCommit": {"oid": "c89e41e6063a07fe9f1366692c0f054769be7b4a", "author": {"user": {"login": "r30shah", "name": "Rahil Shah"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/c89e41e6063a07fe9f1366692c0f054769be7b4a", "committedDate": "2020-04-29T17:59:09Z", "message": "Supporting Changes for mon(ent/exit) for value Types\n\nAdd support for monitor enter/exit for value Types on IBM Z.\n\nSigned-off-by: Rahil Shah <rahil@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyOTE2MTA4", "url": "https://github.com/eclipse-openj9/openj9/pull/9326#pullrequestreview-402916108", "createdAt": "2020-04-29T18:09:54Z", "commit": {"oid": "c89e41e6063a07fe9f1366692c0f054769be7b4a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1051, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}