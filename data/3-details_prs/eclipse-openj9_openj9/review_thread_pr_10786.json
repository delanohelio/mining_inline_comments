{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4MDQyNzY1", "number": 10786, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxOTozODozN1rOEqdIhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDo0OTo1OFrOEqxryw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTUyOTY3OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/control/JITClientCompilationThread.cpp", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxOTozODozN1rOHcrDkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDowNDozM1rOHdIerw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgyNzYwMQ==", "bodyText": "In other parts of the code I see the following parameters being passed:\nfindOrCreateRuntimeHelper(TR_prepareForOSR, false, false, true);\nThis is the meaning of the parameters:\nTR::SymbolReference *\nOMR::SymbolReferenceTable::findOrCreateRuntimeHelper(TR_RuntimeHelper index,\n                                                     bool             canGCandReturn,\n                                                     bool             canGCandExcept,\n                                                     bool             preservesAllRegisters)\n\nIs there a reason you used false for preserveAllregisters?", "url": "https://github.com/eclipse-openj9/openj9/pull/10786#discussion_r499827601", "createdAt": "2020-10-05T19:38:37Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/control/JITClientCompilationThread.cpp", "diffHunk": "@@ -465,6 +465,7 @@ handleServerMessage(JITServer::ClientStream *client, TR_J9VM *fe, JITServer::Mes\n          vmInfo._interpreterVTableOffset = TR::Compiler->vm.getInterpreterVTableOffset();\n          vmInfo._maxHeapSizeInBytes = TR::Compiler->vm.maxHeapSizeInBytes();\n          vmInfo._enableGlobalLockReservation = vmThread->javaVM->enableGlobalLockReservation;\n+         vmInfo._prepareForOSRHelper = comp->getSymRefTab()->findOrCreateRuntimeHelper(TR_prepareForOSR, false, false, false)->getMethodAddress();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72b125571f27afe03897bce5987cd62591ab4de0"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgzNDE3NQ==", "bodyText": "I just saw that all other helpers saved in VM info use this parameters so I just copied that. I'll change it to the parameters used elsewhere for this helper.", "url": "https://github.com/eclipse-openj9/openj9/pull/10786#discussion_r499834175", "createdAt": "2020-10-05T19:51:26Z", "author": {"login": "dmitry-ten"}, "path": "runtime/compiler/control/JITClientCompilationThread.cpp", "diffHunk": "@@ -465,6 +465,7 @@ handleServerMessage(JITServer::ClientStream *client, TR_J9VM *fe, JITServer::Mes\n          vmInfo._interpreterVTableOffset = TR::Compiler->vm.getInterpreterVTableOffset();\n          vmInfo._maxHeapSizeInBytes = TR::Compiler->vm.maxHeapSizeInBytes();\n          vmInfo._enableGlobalLockReservation = vmThread->javaVM->enableGlobalLockReservation;\n+         vmInfo._prepareForOSRHelper = comp->getSymRefTab()->findOrCreateRuntimeHelper(TR_prepareForOSR, false, false, false)->getMethodAddress();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgyNzYwMQ=="}, "originalCommit": {"oid": "72b125571f27afe03897bce5987cd62591ab4de0"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMwOTY3OQ==", "bodyText": "This code is obsolete in the new implementation", "url": "https://github.com/eclipse-openj9/openj9/pull/10786#discussion_r500309679", "createdAt": "2020-10-06T14:04:33Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/control/JITClientCompilationThread.cpp", "diffHunk": "@@ -465,6 +465,7 @@ handleServerMessage(JITServer::ClientStream *client, TR_J9VM *fe, JITServer::Mes\n          vmInfo._interpreterVTableOffset = TR::Compiler->vm.getInterpreterVTableOffset();\n          vmInfo._maxHeapSizeInBytes = TR::Compiler->vm.maxHeapSizeInBytes();\n          vmInfo._enableGlobalLockReservation = vmThread->javaVM->enableGlobalLockReservation;\n+         vmInfo._prepareForOSRHelper = comp->getSymRefTab()->findOrCreateRuntimeHelper(TR_prepareForOSR, false, false, false)->getMethodAddress();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgyNzYwMQ=="}, "originalCommit": {"oid": "72b125571f27afe03897bce5987cd62591ab4de0"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTU0OTIyOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/runtime/JITClientSession.cpp", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxOTo0NDo1NVrOHcrP5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxOTo1Mjo0MlrOHcrgVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgzMDc1Ng==", "bodyText": "Is this runtimeHelpers global? If so, it's not going to work.", "url": "https://github.com/eclipse-openj9/openj9/pull/10786#discussion_r499830756", "createdAt": "2020-10-05T19:44:55Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/runtime/JITClientSession.cpp", "diffHunk": "@@ -406,6 +406,7 @@ ClientSessionData::getOrCacheVMInfo(JITServer::ServerStream *stream)\n       auto recv = stream->read<VMInfo, std::vector<CacheDescriptor> >();\n       _vmInfo = new (PERSISTENT_NEW) VMInfo(std::get<0>(recv));\n       _vmInfo->_j9SharedClassCacheDescriptorList = reconstructJ9SharedClassCacheDescriptorList(std::get<1>(recv));\n+      runtimeHelpers.setAddress(TR_prepareForOSR, _vmInfo->_prepareForOSRHelper);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72b125571f27afe03897bce5987cd62591ab4de0"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgzMjM4Mw==", "bodyText": "Yeah, it's global. I don't see a good way of accessing this helper from OMR though, it's the only reason I set address here, instead of at the callsite.", "url": "https://github.com/eclipse-openj9/openj9/pull/10786#discussion_r499832383", "createdAt": "2020-10-05T19:48:02Z", "author": {"login": "dmitry-ten"}, "path": "runtime/compiler/runtime/JITClientSession.cpp", "diffHunk": "@@ -406,6 +406,7 @@ ClientSessionData::getOrCacheVMInfo(JITServer::ServerStream *stream)\n       auto recv = stream->read<VMInfo, std::vector<CacheDescriptor> >();\n       _vmInfo = new (PERSISTENT_NEW) VMInfo(std::get<0>(recv));\n       _vmInfo->_j9SharedClassCacheDescriptorList = reconstructJ9SharedClassCacheDescriptorList(std::get<1>(recv));\n+      runtimeHelpers.setAddress(TR_prepareForOSR, _vmInfo->_prepareForOSRHelper);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgzMDc1Ng=="}, "originalCommit": {"oid": "72b125571f27afe03897bce5987cd62591ab4de0"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgzNDk2Nw==", "bodyText": "I guess one way would be to add a method to the front-end to specifically get prepareForOSR helper, I just don't find this to be a particularly nice solution", "url": "https://github.com/eclipse-openj9/openj9/pull/10786#discussion_r499834967", "createdAt": "2020-10-05T19:52:42Z", "author": {"login": "dmitry-ten"}, "path": "runtime/compiler/runtime/JITClientSession.cpp", "diffHunk": "@@ -406,6 +406,7 @@ ClientSessionData::getOrCacheVMInfo(JITServer::ServerStream *stream)\n       auto recv = stream->read<VMInfo, std::vector<CacheDescriptor> >();\n       _vmInfo = new (PERSISTENT_NEW) VMInfo(std::get<0>(recv));\n       _vmInfo->_j9SharedClassCacheDescriptorList = reconstructJ9SharedClassCacheDescriptorList(std::get<1>(recv));\n+      runtimeHelpers.setAddress(TR_prepareForOSR, _vmInfo->_prepareForOSRHelper);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgzMDc1Ng=="}, "originalCommit": {"oid": "72b125571f27afe03897bce5987cd62591ab4de0"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMDY1MzI2OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/net/MessageTypes.hpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwNDozNToxOFrOHc1naQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDowNzoxNVrOHdIpGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAwMDYxNw==", "bodyText": "New message means a minor version increment", "url": "https://github.com/eclipse-openj9/openj9/pull/10786#discussion_r500000617", "createdAt": "2020-10-06T04:35:18Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/net/MessageTypes.hpp", "diffHunk": "@@ -218,9 +218,10 @@ enum MessageType : uint16_t\n    CompInfo_setInvocationCountAtomic,\n    CompInfo_isClassSpecial,\n    CompInfo_getJ9MethodStartPC,\n+   CompInfo_getHelperMethod,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0cb3e39ec5eb798167b4f7202beb5d2cc901211"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMxMjM0Ng==", "bodyText": "Also, maybe CompInfo_getHelperAddress is more suitable for a name.", "url": "https://github.com/eclipse-openj9/openj9/pull/10786#discussion_r500312346", "createdAt": "2020-10-06T14:07:15Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/net/MessageTypes.hpp", "diffHunk": "@@ -218,9 +218,10 @@ enum MessageType : uint16_t\n    CompInfo_setInvocationCountAtomic,\n    CompInfo_isClassSpecial,\n    CompInfo_getJ9MethodStartPC,\n+   CompInfo_getHelperMethod,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAwMDYxNw=="}, "originalCommit": {"oid": "e0cb3e39ec5eb798167b4f7202beb5d2cc901211"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMDY2MDY0OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/runtime/JITClientSession.hpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwNDo0MDoxM1rOHc1rvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwNDo0MDoxM1rOHc1rvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAwMTcyNw==", "bodyText": "This needs to be deleted", "url": "https://github.com/eclipse-openj9/openj9/pull/10786#discussion_r500001727", "createdAt": "2020-10-06T04:40:13Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/runtime/JITClientSession.hpp", "diffHunk": "@@ -336,6 +336,7 @@ class ClientSessionData\n       TR_OpaqueClassBlock *_srConstructorAccessorClass;\n #endif // J9VM_OPT_SIDECAR\n       U_32 _extendedRuntimeFlags2;\n+      void *_prepareForOSRHelper;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0cb3e39ec5eb798167b4f7202beb5d2cc901211"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMjY1MzY1OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/runtime/JITClientSession.hpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDoxMDoyMVrOHdI1aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDoxMDoyMVrOHdI1aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMxNTQ5OQ==", "bodyText": "More descriptive names: getRuntimeHelperAddress and setRuntimeHelperAddress", "url": "https://github.com/eclipse-openj9/openj9/pull/10786#discussion_r500315499", "createdAt": "2020-10-06T14:10:21Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/runtime/JITClientSession.hpp", "diffHunk": "@@ -437,6 +437,9 @@ class ClientSessionData\n \n    TR::SymbolValidationManager::SystemClassNotWorthRemembering *getSystemClassesNotWorthRemembering() { return _systemClassesNotWorthRemembering; }\n \n+   void *getRuntimeHelper(TR_RuntimeHelper helper) { return _runtimeHelpers[helper]; }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fca47708dcc069530abb7f6331f6e6712dc4f586"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMjcwNDk0OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/runtime/Runtime.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDoxOTowMFrOHdJVdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNToyMzoxNVrOHdNGRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMyMzcwMw==", "bodyText": "I would like to limit the overhead for the non-jitserver path, so auto compInfoPT = TR::compInfoPT; should be computed after if (compInfo->getPersistentInfo()->getRemoteCompilationMode() == JITServer::SERVER\nFor the JITServer path, is it all possible that compInfoPT does not exist? I am guessing not because at JITServer most of the code is executed during a compilation.", "url": "https://github.com/eclipse-openj9/openj9/pull/10786#discussion_r500323703", "createdAt": "2020-10-06T14:19:00Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/runtime/Runtime.cpp", "diffHunk": "@@ -167,6 +168,29 @@ void* TR_RuntimeHelperTable::getFunctionPointer(TR_RuntimeHelper h)\n \n void* TR_RuntimeHelperTable::getFunctionEntryPointOrConst(TR_RuntimeHelper h)\n    {\n+#if defined(J9VM_OPT_JITSERVER)\n+   TR::CompilationInfo *compInfo = getCompilationInfo(jitConfig);\n+   auto compInfoPT = TR::compInfoPT;\n+   if (compInfo->getPersistentInfo()->getRemoteCompilationMode() == JITServer::SERVER &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fca47708dcc069530abb7f6331f6e6712dc4f586"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM4NTM1MQ==", "bodyText": "This method is called at jit initialization, so compInfoPT could be NULL.", "url": "https://github.com/eclipse-openj9/openj9/pull/10786#discussion_r500385351", "createdAt": "2020-10-06T15:23:15Z", "author": {"login": "dmitry-ten"}, "path": "runtime/compiler/runtime/Runtime.cpp", "diffHunk": "@@ -167,6 +168,29 @@ void* TR_RuntimeHelperTable::getFunctionPointer(TR_RuntimeHelper h)\n \n void* TR_RuntimeHelperTable::getFunctionEntryPointOrConst(TR_RuntimeHelper h)\n    {\n+#if defined(J9VM_OPT_JITSERVER)\n+   TR::CompilationInfo *compInfo = getCompilationInfo(jitConfig);\n+   auto compInfoPT = TR::compInfoPT;\n+   if (compInfo->getPersistentInfo()->getRemoteCompilationMode() == JITServer::SERVER &&", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMyMzcwMw=="}, "originalCommit": {"oid": "fca47708dcc069530abb7f6331f6e6712dc4f586"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMjc2MzYyOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/runtime/Runtime.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDoyODowOVrOHdJ5dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDoyODowOVrOHdJ5dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMzMjkxNw==", "bodyText": "The stream should be available from CompInfoPT->getMethodToBeCompiled()->_stream or something like that", "url": "https://github.com/eclipse-openj9/openj9/pull/10786#discussion_r500332917", "createdAt": "2020-10-06T14:28:09Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/runtime/Runtime.cpp", "diffHunk": "@@ -167,6 +168,29 @@ void* TR_RuntimeHelperTable::getFunctionPointer(TR_RuntimeHelper h)\n \n void* TR_RuntimeHelperTable::getFunctionEntryPointOrConst(TR_RuntimeHelper h)\n    {\n+#if defined(J9VM_OPT_JITSERVER) && defined(TR_HOST_POWER)\n+   TR::CompilationInfo *compInfo = getCompilationInfo(jitConfig);\n+   auto compInfoPT = TR::compInfoPT;\n+   if (compInfo->getPersistentInfo()->getRemoteCompilationMode() == JITServer::SERVER &&\n+       compInfoPT)\n+      {\n+      // Return the client-side helper address\n+      // Get cached value if it exists, otherwise make remote and cache\n+      void *helperAddress = compInfoPT->getClientData()->getRuntimeHelper(h);\n+      if (helperAddress)\n+         return helperAddress;\n+      auto stream = TR::CompilationInfo::getStream();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b7f2c04e4eafc173e1765654ce43bc5852b3823"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMjg5Njc1OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/runtime/Runtime.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDo0OTo1OFrOHdLMSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDo0OTo1OFrOHdLMSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM1NDEyMg==", "bodyText": "People reading the code may wonder why we do this only for Power, so it's better to have a comment explaining why", "url": "https://github.com/eclipse-openj9/openj9/pull/10786#discussion_r500354122", "createdAt": "2020-10-06T14:49:58Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/runtime/Runtime.cpp", "diffHunk": "@@ -167,6 +170,29 @@ void* TR_RuntimeHelperTable::getFunctionPointer(TR_RuntimeHelper h)\n \n void* TR_RuntimeHelperTable::getFunctionEntryPointOrConst(TR_RuntimeHelper h)\n    {\n+#if defined(J9VM_OPT_JITSERVER) && defined(TR_HOST_POWER)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7301e25eb9b6abcd32cf20db177326840bdf5bc"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1284, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}