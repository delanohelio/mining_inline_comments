{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzMTgxOTA5", "number": 9854, "reviewThreads": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMDoyMDozOFrOEE1hmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNTozMDozN1rOEHn5Ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNTA2NzE1OnYy", "diffSide": "RIGHT", "path": "runtime/vm/ValueTypeHelpers.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMDoyMDozOFrOGitaTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMDoyMDozOFrOGitaTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA0ODc4MA==", "bodyText": "need to check if the field is flattened before doing this. If its not flattened the size is sizeof(fj9object_t)", "url": "https://github.com/eclipse-openj9/openj9/pull/9854#discussion_r439048780", "createdAt": "2020-06-11T20:20:38Z", "author": {"login": "tajila"}, "path": "runtime/vm/ValueTypeHelpers.cpp", "diffHunk": "@@ -69,4 +72,114 @@ isClassRefQtype(J9Class *cpContextClass, U_16 cpIndex)\n {\n \treturn VM_ValueTypeHelpers::isClassRefQtype((J9ConstantPool *) cpContextClass->ramConstantPool, cpIndex);\n }\n+#ifdef J9VM_OPT_VALHALLA_VALUE_TYPES\n+UDATA\n+findIndexInFlattenedClassCache(J9FlattenedClassCache *flattenedClassCache, J9ROMNameAndSignature *nameAndSignature)\n+{\n+        /* first field indicates the number of classes in the cache */\n+        UDATA index = UDATA_MAX;\n+        UDATA length = flattenedClassCache->numberOfEntries;\n+        J9ROMFieldShape *fccEntryField = NULL;\n+\n+        for (UDATA i = 0; i < length; i++) {\n+                        fccEntryField = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->field;\n+                        if (J9UTF8_EQUALS(J9ROMNAMEANDSIGNATURE_NAME(nameAndSignature), J9ROMFIELDSHAPE_NAME(fccEntryField))\n+                                        && J9UTF8_EQUALS(J9ROMNAMEANDSIGNATURE_SIGNATURE(nameAndSignature), J9ROMFIELDSHAPE_SIGNATURE(fccEntryField))\n+                        ) {\n+                                        index = i;\n+                                        break;\n+                        }\n+        }\n+        return index;\n+}\n+\n+J9Class *\n+findJ9ClassInFlattenedClassCache(J9FlattenedClassCache *flattenedClassCache, U_8 *className, UDATA classNameLength)\n+{\n+        /* first field indicates the number of classes in the cache */\n+        UDATA length = flattenedClassCache->numberOfEntries;\n+        J9Class *clazz = NULL;\n+\n+        for (UDATA i = 0; i < length; i++) {\n+                        J9UTF8* currentClassName = J9ROMCLASS_CLASSNAME(J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->clazz->romClass);\n+                        if (J9UTF8_DATA_EQUALS(J9UTF8_DATA(currentClassName), J9UTF8_LENGTH(currentClassName), className, classNameLength)) {\n+                                        clazz = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->clazz;\n+                                        break;\n+                        }\n+        }\n+\n+        Assert_VM_notNull(clazz);\n+        return clazz;\n+}\n+#endif /* J9VM_OPT_VALHALLA_VALUE_TYPES */\n+\n+UDATA\n+getFlattenableFieldOffset(J9Class *fieldOwner, J9ROMFieldShape *field, BOOLEAN instanceField)\n+{               \n+        UDATA fieldOffset = 0;\n+        if(TRUE == instanceField){\n+                J9FlattenedClassCache *flattenedClassCache = NULL;\n+                J9ROMNameAndSignature *nameAndSig;\n+                UDATA fieldIndex = 0;\n+\n+                nameAndSig = &field->nameAndSignature;\n+                flattenedClassCache = fieldOwner->flattenedClassCache;\n+                fieldIndex = findIndexInFlattenedClassCache(flattenedClassCache, nameAndSig);\n+                J9FlattenedClassCacheEntry * flattenedClassCacheEntry = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, fieldIndex);\n+                fieldOffset = flattenedClassCacheEntry->offset;\n+        } else{\n+                /* static not implemented yet */\n+                fieldOffset = UDATA_MAX;\n+        }\n+        return fieldOffset;\n+}\n+\n+BOOLEAN\n+isFlattenableFieldFlattened(J9Class *fieldOwner, J9ROMFieldShape *field, BOOLEAN instanceField)\n+{\n+        BOOLEAN fieldFlattened = FALSE;\n+        if(TRUE ==  instanceField){\n+                J9Class* clazz = getFlattenableFieldType(fieldOwner, field, instanceField);\n+                fieldFlattened = J9_ARE_ALL_BITS_SET((clazz)->classFlags, J9ClassIsFlattened);\n+        } else{\n+                /* static not implemented yet */\n+                fieldFlattened = FALSE;\n+        }\n+        return fieldFlattened;\n+}\n+\n+J9Class *\n+getFlattenableFieldType(J9Class *fieldOwner, J9ROMFieldShape *field, BOOLEAN instanceField)\n+{\n+        J9Class * fieldType = NULL;\n+        if(TRUE == instanceField){\n+                J9FlattenedClassCache *flattenedClassCache = NULL;\n+                J9ROMNameAndSignature *nameAndSig;\n+                UDATA fieldIndex = 0;\n+\n+                nameAndSig = &field->nameAndSignature;\n+                flattenedClassCache = fieldOwner->flattenedClassCache;\n+                fieldIndex = findIndexInFlattenedClassCache(flattenedClassCache, nameAndSig);\n+                fieldType = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, fieldIndex)->clazz;\n+        } else{\n+                /*static not implemented yet */\n+                fieldType = NULL;\n+        }\n+        return fieldType;\n+}\n+\n+UDATA\n+getFlattenableFieldSize(J9Class *fieldOwner, J9ROMFieldShape *field, BOOLEAN instanceField)\n+{\n+        UDATA instanceSize = FALSE;\n+        if(TRUE ==  instanceField){\n+                J9Class* clazz = getFlattenableFieldType(fieldOwner, field, instanceField);\n+                instanceSize =  (clazz)->totalInstanceSize - (clazz)->backfillOffset;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "392bc5aa00451574863faee90beb4a9a6a87b874"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNTI4NDcyOnYy", "diffSide": "RIGHT", "path": "runtime/vm/ValueTypeHelpers.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMTozODowNFrOGivkRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMTozODowNFrOGivkRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA4NDEwMQ==", "bodyText": "need to fix the tab spacing here", "url": "https://github.com/eclipse-openj9/openj9/pull/9854#discussion_r439084101", "createdAt": "2020-06-11T21:38:04Z", "author": {"login": "tajila"}, "path": "runtime/vm/ValueTypeHelpers.cpp", "diffHunk": "@@ -69,4 +72,114 @@ isClassRefQtype(J9Class *cpContextClass, U_16 cpIndex)\n {\n \treturn VM_ValueTypeHelpers::isClassRefQtype((J9ConstantPool *) cpContextClass->ramConstantPool, cpIndex);\n }\n+#ifdef J9VM_OPT_VALHALLA_VALUE_TYPES\n+UDATA\n+findIndexInFlattenedClassCache(J9FlattenedClassCache *flattenedClassCache, J9ROMNameAndSignature *nameAndSignature)\n+{\n+        /* first field indicates the number of classes in the cache */\n+        UDATA index = UDATA_MAX;\n+        UDATA length = flattenedClassCache->numberOfEntries;\n+        J9ROMFieldShape *fccEntryField = NULL;\n+\n+        for (UDATA i = 0; i < length; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "851641816185f3e4c11d5712b9f47db94c5a6013"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNTI4NjQ4OnYy", "diffSide": "RIGHT", "path": "runtime/vm/resolvesupport.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMTozODo1MVrOGivlVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMTozODo1MVrOGivlVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA4NDM3Mg==", "bodyText": "do you need this one", "url": "https://github.com/eclipse-openj9/openj9/pull/9854#discussion_r439084372", "createdAt": "2020-06-11T21:38:51Z", "author": {"login": "tajila"}, "path": "runtime/vm/resolvesupport.cpp", "diffHunk": "@@ -33,6 +33,8 @@\n #include \"stackwalk.h\"\n #include \"j9modifiers_api.h\"\n #include \"VMHelpers.hpp\"\n+#include \"ValueTypeHelpers.hpp\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "851641816185f3e4c11d5712b9f47db94c5a6013"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNTI4NzIxOnYy", "diffSide": "RIGHT", "path": "runtime/vm/ValueTypeHelpers.hpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMTozOToxMVrOGivlzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMTozOToxMVrOGivlzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA4NDQ5Mw==", "bodyText": "unnecessary whitespace", "url": "https://github.com/eclipse-openj9/openj9/pull/9854#discussion_r439084493", "createdAt": "2020-06-11T21:39:11Z", "author": {"login": "tajila"}, "path": "runtime/vm/ValueTypeHelpers.hpp", "diffHunk": "@@ -256,4 +257,6 @@ class VM_ValueTypeHelpers {\n \n };\n \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "851641816185f3e4c11d5712b9f47db94c5a6013"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNTI4Nzk0OnYy", "diffSide": "RIGHT", "path": "runtime/vm/ValueTypeHelpers.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMTozOToyOVrOGivmPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMTozOToyOVrOGivmPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA4NDYwNg==", "bodyText": "tab spacing here as well", "url": "https://github.com/eclipse-openj9/openj9/pull/9854#discussion_r439084606", "createdAt": "2020-06-11T21:39:29Z", "author": {"login": "tajila"}, "path": "runtime/vm/ValueTypeHelpers.cpp", "diffHunk": "@@ -69,4 +72,114 @@ isClassRefQtype(J9Class *cpContextClass, U_16 cpIndex)\n {\n \treturn VM_ValueTypeHelpers::isClassRefQtype((J9ConstantPool *) cpContextClass->ramConstantPool, cpIndex);\n }\n+#ifdef J9VM_OPT_VALHALLA_VALUE_TYPES\n+UDATA\n+findIndexInFlattenedClassCache(J9FlattenedClassCache *flattenedClassCache, J9ROMNameAndSignature *nameAndSignature)\n+{\n+        /* first field indicates the number of classes in the cache */\n+        UDATA index = UDATA_MAX;\n+        UDATA length = flattenedClassCache->numberOfEntries;\n+        J9ROMFieldShape *fccEntryField = NULL;\n+\n+        for (UDATA i = 0; i < length; i++) {\n+                        fccEntryField = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->field;\n+                        if (J9UTF8_EQUALS(J9ROMNAMEANDSIGNATURE_NAME(nameAndSignature), J9ROMFIELDSHAPE_NAME(fccEntryField))\n+                                        && J9UTF8_EQUALS(J9ROMNAMEANDSIGNATURE_SIGNATURE(nameAndSignature), J9ROMFIELDSHAPE_SIGNATURE(fccEntryField))\n+                        ) {\n+                                        index = i;\n+                                        break;\n+                        }\n+        }\n+        return index;\n+}\n+\n+J9Class *\n+findJ9ClassInFlattenedClassCache(J9FlattenedClassCache *flattenedClassCache, U_8 *className, UDATA classNameLength)\n+{\n+        /* first field indicates the number of classes in the cache */\n+        UDATA length = flattenedClassCache->numberOfEntries;\n+        J9Class *clazz = NULL;\n+\n+        for (UDATA i = 0; i < length; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "851641816185f3e4c11d5712b9f47db94c5a6013"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODUxOTY0OnYy", "diffSide": "RIGHT", "path": "runtime/tests/vm/CMakeLists.txt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxOToxOToxMlrOGjPIrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxOToxOToxMlrOGjPIrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYwMTMyNg==", "bodyText": "should be j9vm_SOURCE_DIR", "url": "https://github.com/eclipse-openj9/openj9/pull/9854#discussion_r439601326", "createdAt": "2020-06-12T19:19:12Z", "author": {"login": "tajila"}, "path": "runtime/tests/vm/CMakeLists.txt", "diffHunk": "@@ -40,6 +40,7 @@ j9vm_add_executable(vmtest\n \t${j9vm_SOURCE_DIR}/vm/vmthinit.c\n \t${j9vm_SOURCE_DIR}/vm/stringhelpers.cpp\n \t${j9vm_BINARY_DIR}/vm/ut_j9vm.c\n+\t${j9vm_BINARY_DIR}/vm/ValueTypeHelpers.cpp", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e556d3a49884f478b84e16e72b02ea775dea67b4"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MjA0NDE2OnYy", "diffSide": "RIGHT", "path": "runtime/vm/ValueTypeHelpers.cpp", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMTo0NDowMlrOGjumsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNToxOTozOFrOGj29SA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDExNjkxMg==", "bodyText": "make this a real helper, like the others", "url": "https://github.com/eclipse-openj9/openj9/pull/9854#discussion_r440116912", "createdAt": "2020-06-15T11:44:02Z", "author": {"login": "tajila"}, "path": "runtime/vm/ValueTypeHelpers.cpp", "diffHunk": "@@ -25,8 +25,11 @@\n #include \"j9.h\"\n #include \"ut_j9vm.h\"\n #include \"ObjectAccessBarrierAPI.hpp\"\n+#include \"vm_api.h\"\n \n extern \"C\" {\n+#define J9_ARRAY_ELEMENT_SIZE(arrayClass) (arrayClass->flattenedElementSize)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bf754da9b6d008cc1d0768a5605ed211bf621e0"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDIyMjU0Mg==", "bodyText": "Do I keep the macro naming convention too?", "url": "https://github.com/eclipse-openj9/openj9/pull/9854#discussion_r440222542", "createdAt": "2020-06-15T14:36:36Z", "author": {"login": "OussamaSaoudi"}, "path": "runtime/vm/ValueTypeHelpers.cpp", "diffHunk": "@@ -25,8 +25,11 @@\n #include \"j9.h\"\n #include \"ut_j9vm.h\"\n #include \"ObjectAccessBarrierAPI.hpp\"\n+#include \"vm_api.h\"\n \n extern \"C\" {\n+#define J9_ARRAY_ELEMENT_SIZE(arrayClass) (arrayClass->flattenedElementSize)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDExNjkxMg=="}, "originalCommit": {"oid": "5bf754da9b6d008cc1d0768a5605ed211bf621e0"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI1Mzc2OA==", "bodyText": "you can call it arrayElementSize(..)", "url": "https://github.com/eclipse-openj9/openj9/pull/9854#discussion_r440253768", "createdAt": "2020-06-15T15:19:38Z", "author": {"login": "tajila"}, "path": "runtime/vm/ValueTypeHelpers.cpp", "diffHunk": "@@ -25,8 +25,11 @@\n #include \"j9.h\"\n #include \"ut_j9vm.h\"\n #include \"ObjectAccessBarrierAPI.hpp\"\n+#include \"vm_api.h\"\n \n extern \"C\" {\n+#define J9_ARRAY_ELEMENT_SIZE(arrayClass) (arrayClass->flattenedElementSize)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDExNjkxMg=="}, "originalCommit": {"oid": "5bf754da9b6d008cc1d0768a5605ed211bf621e0"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MjA0NzU5OnYy", "diffSide": "RIGHT", "path": "runtime/oti/vm_api.h", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMTo0NToxNlrOGjuo9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMTo0NToyN1rOGjupWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDExNzQ5Mw==", "bodyText": "We dont need the BOOLEAN instanceField param, we should be able to tell since all field names will be unique. See #9880. Currently, only instance fields are qtypes, so dont worry about statics for now.", "url": "https://github.com/eclipse-openj9/openj9/pull/9854#discussion_r440117493", "createdAt": "2020-06-15T11:45:16Z", "author": {"login": "tajila"}, "path": "runtime/oti/vm_api.h", "diffHunk": "@@ -2343,6 +2343,56 @@ UDATA\n findIndexInFlattenedClassCache(J9FlattenedClassCache *flattenedClassCache, J9ROMNameAndSignature *nameAndSignature);\n #endif /* J9VM_OPT_VALHALLA_VALUE_TYPES */\n \n+/**\n+ * Returns the offset of a qtype field.\n+ * \n+ * @param[in] fieldOwner the J9class that defines the field\n+ * @param[in] field romfieldshape of the field\n+ * @param[in] instance flag indicate if its an instance or static field\n+ *\n+ * @return field offset\n+ */\n+UDATA\n+getFlattenableFieldOffset(J9Class *fieldOwner, J9ROMFieldShape *field, BOOLEAN instanceField);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bf754da9b6d008cc1d0768a5605ed211bf621e0"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDExNzU5Mg==", "bodyText": "this goes for the rest of the helpers", "url": "https://github.com/eclipse-openj9/openj9/pull/9854#discussion_r440117592", "createdAt": "2020-06-15T11:45:27Z", "author": {"login": "tajila"}, "path": "runtime/oti/vm_api.h", "diffHunk": "@@ -2343,6 +2343,56 @@ UDATA\n findIndexInFlattenedClassCache(J9FlattenedClassCache *flattenedClassCache, J9ROMNameAndSignature *nameAndSignature);\n #endif /* J9VM_OPT_VALHALLA_VALUE_TYPES */\n \n+/**\n+ * Returns the offset of a qtype field.\n+ * \n+ * @param[in] fieldOwner the J9class that defines the field\n+ * @param[in] field romfieldshape of the field\n+ * @param[in] instance flag indicate if its an instance or static field\n+ *\n+ * @return field offset\n+ */\n+UDATA\n+getFlattenableFieldOffset(J9Class *fieldOwner, J9ROMFieldShape *field, BOOLEAN instanceField);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDExNzQ5Mw=="}, "originalCommit": {"oid": "5bf754da9b6d008cc1d0768a5605ed211bf621e0"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0Mzc4NTAyOnYy", "diffSide": "RIGHT", "path": "runtime/vm/ValueTypeHelpers.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxOToyOTowMFrOGj_xRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxOToyOTowMFrOGj_xRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM5ODE0OA==", "bodyText": "you need a check here that index is not UDATA_MAX.  Make it an assert, jit should not give us bad params.\nSame thing goes for all the other places its used", "url": "https://github.com/eclipse-openj9/openj9/pull/9854#discussion_r440398148", "createdAt": "2020-06-15T19:29:00Z", "author": {"login": "tajila"}, "path": "runtime/vm/ValueTypeHelpers.cpp", "diffHunk": "@@ -69,4 +70,104 @@ isClassRefQtype(J9Class *cpContextClass, U_16 cpIndex)\n {\n \treturn VM_ValueTypeHelpers::isClassRefQtype((J9ConstantPool *) cpContextClass->ramConstantPool, cpIndex);\n }\n+UDATA\n+findIndexInFlattenedClassCache(J9FlattenedClassCache *flattenedClassCache, J9ROMNameAndSignature *nameAndSignature)\n+{\n+        /* first field indicates the number of classes in the cache */\n+        UDATA index = UDATA_MAX;\n+        UDATA length = flattenedClassCache->numberOfEntries;\n+        J9ROMFieldShape *fccEntryField = NULL;\n+\n+        for (UDATA i = 0; i < length; i++) {\n+                fccEntryField = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->field;\n+                if (J9UTF8_EQUALS(J9ROMNAMEANDSIGNATURE_NAME(nameAndSignature), J9ROMFIELDSHAPE_NAME(fccEntryField))\n+                        && J9UTF8_EQUALS(J9ROMNAMEANDSIGNATURE_SIGNATURE(nameAndSignature), J9ROMFIELDSHAPE_SIGNATURE(fccEntryField))\n+                ) {\n+                        index = i;\n+                        break;\n+                }\n+        }\n+        return index;\n+}\n+\n+J9Class *\n+findJ9ClassInFlattenedClassCache(J9FlattenedClassCache *flattenedClassCache, U_8 *className, UDATA classNameLength)\n+{\n+        /* first field indicates the number of classes in the cache */\n+        UDATA length = flattenedClassCache->numberOfEntries;\n+        J9Class *clazz = NULL;\n+\n+        for (UDATA i = 0; i < length; i++) {\n+                J9UTF8* currentClassName = J9ROMCLASS_CLASSNAME(J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->clazz->romClass);\n+                if (J9UTF8_DATA_EQUALS(J9UTF8_DATA(currentClassName), J9UTF8_LENGTH(currentClassName), className, classNameLength)) {\n+                        clazz = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->clazz;\n+                        break;\n+                }\n+        }\n+\n+        Assert_VM_notNull(clazz);\n+        return clazz;\n+}\n+\n+UDATA\n+getFlattenableFieldOffset(J9Class *fieldOwner, J9ROMFieldShape *field)\n+{               \n+        UDATA fieldOffset = 0;\n+        J9FlattenedClassCache *flattenedClassCache = NULL;\n+        J9ROMNameAndSignature *nameAndSig;\n+        UDATA fieldIndex = 0;\n+\n+        nameAndSig = &field->nameAndSignature;\n+        flattenedClassCache = fieldOwner->flattenedClassCache;\n+        fieldIndex = findIndexInFlattenedClassCache(flattenedClassCache, nameAndSig);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e070a9a6b1eee54716ea9b8702cfbd0273936b6"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0Mzc4Nzk2OnYy", "diffSide": "RIGHT", "path": "runtime/oti/vm_api.h", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxOToyOTo0OVrOGj_y-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxOToyOTo0OVrOGj_y-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM5ODU4Ng==", "bodyText": "all of these functions need an entry in the internalVMFunctions table", "url": "https://github.com/eclipse-openj9/openj9/pull/9854#discussion_r440398586", "createdAt": "2020-06-15T19:29:49Z", "author": {"login": "tajila"}, "path": "runtime/oti/vm_api.h", "diffHunk": "@@ -2343,6 +2343,63 @@ UDATA\n findIndexInFlattenedClassCache(J9FlattenedClassCache *flattenedClassCache, J9ROMNameAndSignature *nameAndSignature);\n #endif /* J9VM_OPT_VALHALLA_VALUE_TYPES */\n \n+/**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e070a9a6b1eee54716ea9b8702cfbd0273936b6"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTkxNzY4OnYy", "diffSide": "RIGHT", "path": "runtime/vm/ValueTypeHelpers.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzoyMTo0NlrOGlPkqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzoyMTo0NlrOGlPkqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcwNTY0Mw==", "bodyText": "formatting, needs space between if ( and ) {", "url": "https://github.com/eclipse-openj9/openj9/pull/9854#discussion_r441705643", "createdAt": "2020-06-17T17:21:46Z", "author": {"login": "tajila"}, "path": "runtime/vm/ValueTypeHelpers.cpp", "diffHunk": "@@ -69,4 +70,106 @@ isClassRefQtype(J9Class *cpContextClass, U_16 cpIndex)\n {\n \treturn VM_ValueTypeHelpers::isClassRefQtype((J9ConstantPool *) cpContextClass->ramConstantPool, cpIndex);\n }\n+UDATA\n+findIndexInFlattenedClassCache(J9FlattenedClassCache *flattenedClassCache, J9ROMNameAndSignature *nameAndSignature)\n+{\n+        /* first field indicates the number of classes in the cache */\n+        UDATA index = UDATA_MAX;\n+        UDATA length = flattenedClassCache->numberOfEntries;\n+        J9ROMFieldShape *fccEntryField = NULL;\n+\n+        for (UDATA i = 0; i < length; i++) {\n+                fccEntryField = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->field;\n+                if (J9UTF8_EQUALS(J9ROMNAMEANDSIGNATURE_NAME(nameAndSignature), J9ROMFIELDSHAPE_NAME(fccEntryField))\n+                        && J9UTF8_EQUALS(J9ROMNAMEANDSIGNATURE_SIGNATURE(nameAndSignature), J9ROMFIELDSHAPE_SIGNATURE(fccEntryField))\n+                ) {\n+                        index = i;\n+                        break;\n+                }\n+        }\n+        return index;\n+}\n+\n+J9Class *\n+findJ9ClassInFlattenedClassCache(J9FlattenedClassCache *flattenedClassCache, U_8 *className, UDATA classNameLength)\n+{\n+        /* first field indicates the number of classes in the cache */\n+        UDATA length = flattenedClassCache->numberOfEntries;\n+        J9Class *clazz = NULL;\n+\n+        for (UDATA i = 0; i < length; i++) {\n+                J9UTF8* currentClassName = J9ROMCLASS_CLASSNAME(J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->clazz->romClass);\n+                if (J9UTF8_DATA_EQUALS(J9UTF8_DATA(currentClassName), J9UTF8_LENGTH(currentClassName), className, classNameLength)) {\n+                        clazz = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->clazz;\n+                        break;\n+                }\n+        }\n+\n+        Assert_VM_notNull(clazz);\n+        return clazz;\n+}\n+\n+UDATA\n+getFlattenableFieldOffset(J9Class *fieldOwner, J9ROMFieldShape *field)\n+{\n+        UDATA fieldOffset = 0;\n+        J9FlattenedClassCache *flattenedClassCache = NULL;\n+        J9ROMNameAndSignature *nameAndSig;\n+        UDATA fieldIndex = 0;\n+\n+        nameAndSig = &field->nameAndSignature;\n+        flattenedClassCache = fieldOwner->flattenedClassCache;\n+        fieldIndex = findIndexInFlattenedClassCache(flattenedClassCache, nameAndSig);\n+        Assert_VM_unequal(UDATA_MAX, fieldIndex);\n+        J9FlattenedClassCacheEntry * flattenedClassCacheEntry = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, fieldIndex);\n+        fieldOffset = flattenedClassCacheEntry->offset;\n+        return fieldOffset;\n+}\n+\n+BOOLEAN\n+isFlattenableFieldFlattened(J9Class *fieldOwner, J9ROMFieldShape *field)\n+{\n+        BOOLEAN fieldFlattened = FALSE;\n+        J9Class* clazz = getFlattenableFieldType(fieldOwner, field);\n+        fieldFlattened = J9_ARE_ALL_BITS_SET((clazz)->classFlags, J9ClassIsFlattened);\n+        return fieldFlattened;\n+}\n+\n+J9Class *\n+getFlattenableFieldType(J9Class *fieldOwner, J9ROMFieldShape *field)\n+{\n+        J9Class * fieldType = NULL;\n+        J9FlattenedClassCache *flattenedClassCache = NULL;\n+        J9ROMNameAndSignature *nameAndSig;\n+        UDATA fieldIndex = 0;\n+\n+        nameAndSig = &field->nameAndSignature;\n+        flattenedClassCache = fieldOwner->flattenedClassCache;\n+        fieldIndex = findIndexInFlattenedClassCache(flattenedClassCache, nameAndSig);\n+        Assert_VM_unequal(UDATA_MAX, fieldIndex);\n+        fieldType = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, fieldIndex)->clazz;\n+        return fieldType;\n+}\n+\n+UDATA\n+getFlattenableFieldSize(J9Class *fieldOwner, J9ROMFieldShape *field)\n+{\n+        UDATA instanceSize = 0;\n+        if(isFlattenableFieldFlattened(fieldOwner, field)){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de19620784ae02a74c7d6fa35e84ed0d4c7299d6"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTkxODczOnYy", "diffSide": "RIGHT", "path": "runtime/vm/ValueTypeHelpers.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzoyMjowNVrOGlPlZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzoyMjowNVrOGlPlZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcwNTgzMQ==", "bodyText": "same here", "url": "https://github.com/eclipse-openj9/openj9/pull/9854#discussion_r441705831", "createdAt": "2020-06-17T17:22:05Z", "author": {"login": "tajila"}, "path": "runtime/vm/ValueTypeHelpers.cpp", "diffHunk": "@@ -69,4 +70,106 @@ isClassRefQtype(J9Class *cpContextClass, U_16 cpIndex)\n {\n \treturn VM_ValueTypeHelpers::isClassRefQtype((J9ConstantPool *) cpContextClass->ramConstantPool, cpIndex);\n }\n+UDATA\n+findIndexInFlattenedClassCache(J9FlattenedClassCache *flattenedClassCache, J9ROMNameAndSignature *nameAndSignature)\n+{\n+        /* first field indicates the number of classes in the cache */\n+        UDATA index = UDATA_MAX;\n+        UDATA length = flattenedClassCache->numberOfEntries;\n+        J9ROMFieldShape *fccEntryField = NULL;\n+\n+        for (UDATA i = 0; i < length; i++) {\n+                fccEntryField = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->field;\n+                if (J9UTF8_EQUALS(J9ROMNAMEANDSIGNATURE_NAME(nameAndSignature), J9ROMFIELDSHAPE_NAME(fccEntryField))\n+                        && J9UTF8_EQUALS(J9ROMNAMEANDSIGNATURE_SIGNATURE(nameAndSignature), J9ROMFIELDSHAPE_SIGNATURE(fccEntryField))\n+                ) {\n+                        index = i;\n+                        break;\n+                }\n+        }\n+        return index;\n+}\n+\n+J9Class *\n+findJ9ClassInFlattenedClassCache(J9FlattenedClassCache *flattenedClassCache, U_8 *className, UDATA classNameLength)\n+{\n+        /* first field indicates the number of classes in the cache */\n+        UDATA length = flattenedClassCache->numberOfEntries;\n+        J9Class *clazz = NULL;\n+\n+        for (UDATA i = 0; i < length; i++) {\n+                J9UTF8* currentClassName = J9ROMCLASS_CLASSNAME(J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->clazz->romClass);\n+                if (J9UTF8_DATA_EQUALS(J9UTF8_DATA(currentClassName), J9UTF8_LENGTH(currentClassName), className, classNameLength)) {\n+                        clazz = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->clazz;\n+                        break;\n+                }\n+        }\n+\n+        Assert_VM_notNull(clazz);\n+        return clazz;\n+}\n+\n+UDATA\n+getFlattenableFieldOffset(J9Class *fieldOwner, J9ROMFieldShape *field)\n+{\n+        UDATA fieldOffset = 0;\n+        J9FlattenedClassCache *flattenedClassCache = NULL;\n+        J9ROMNameAndSignature *nameAndSig;\n+        UDATA fieldIndex = 0;\n+\n+        nameAndSig = &field->nameAndSignature;\n+        flattenedClassCache = fieldOwner->flattenedClassCache;\n+        fieldIndex = findIndexInFlattenedClassCache(flattenedClassCache, nameAndSig);\n+        Assert_VM_unequal(UDATA_MAX, fieldIndex);\n+        J9FlattenedClassCacheEntry * flattenedClassCacheEntry = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, fieldIndex);\n+        fieldOffset = flattenedClassCacheEntry->offset;\n+        return fieldOffset;\n+}\n+\n+BOOLEAN\n+isFlattenableFieldFlattened(J9Class *fieldOwner, J9ROMFieldShape *field)\n+{\n+        BOOLEAN fieldFlattened = FALSE;\n+        J9Class* clazz = getFlattenableFieldType(fieldOwner, field);\n+        fieldFlattened = J9_ARE_ALL_BITS_SET((clazz)->classFlags, J9ClassIsFlattened);\n+        return fieldFlattened;\n+}\n+\n+J9Class *\n+getFlattenableFieldType(J9Class *fieldOwner, J9ROMFieldShape *field)\n+{\n+        J9Class * fieldType = NULL;\n+        J9FlattenedClassCache *flattenedClassCache = NULL;\n+        J9ROMNameAndSignature *nameAndSig;\n+        UDATA fieldIndex = 0;\n+\n+        nameAndSig = &field->nameAndSignature;\n+        flattenedClassCache = fieldOwner->flattenedClassCache;\n+        fieldIndex = findIndexInFlattenedClassCache(flattenedClassCache, nameAndSig);\n+        Assert_VM_unequal(UDATA_MAX, fieldIndex);\n+        fieldType = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, fieldIndex)->clazz;\n+        return fieldType;\n+}\n+\n+UDATA\n+getFlattenableFieldSize(J9Class *fieldOwner, J9ROMFieldShape *field)\n+{\n+        UDATA instanceSize = 0;\n+        if(isFlattenableFieldFlattened(fieldOwner, field)){\n+                J9Class* clazz = getFlattenableFieldType(fieldOwner, field);\n+                instanceSize =  (clazz)->totalInstanceSize - (clazz)->backfillOffset;\n+        } else{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de19620784ae02a74c7d6fa35e84ed0d4c7299d6"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTkyMDgyOnYy", "diffSide": "RIGHT", "path": "runtime/vm/ValueTypeHelpers.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzoyMjozOVrOGlPmyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODo1MjozNlrOGlS8ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcwNjE4Nw==", "bodyText": "can simply return arrayClass->flattenedElementSize;", "url": "https://github.com/eclipse-openj9/openj9/pull/9854#discussion_r441706187", "createdAt": "2020-06-17T17:22:39Z", "author": {"login": "tajila"}, "path": "runtime/vm/ValueTypeHelpers.cpp", "diffHunk": "@@ -69,4 +70,106 @@ isClassRefQtype(J9Class *cpContextClass, U_16 cpIndex)\n {\n \treturn VM_ValueTypeHelpers::isClassRefQtype((J9ConstantPool *) cpContextClass->ramConstantPool, cpIndex);\n }\n+UDATA\n+findIndexInFlattenedClassCache(J9FlattenedClassCache *flattenedClassCache, J9ROMNameAndSignature *nameAndSignature)\n+{\n+        /* first field indicates the number of classes in the cache */\n+        UDATA index = UDATA_MAX;\n+        UDATA length = flattenedClassCache->numberOfEntries;\n+        J9ROMFieldShape *fccEntryField = NULL;\n+\n+        for (UDATA i = 0; i < length; i++) {\n+                fccEntryField = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->field;\n+                if (J9UTF8_EQUALS(J9ROMNAMEANDSIGNATURE_NAME(nameAndSignature), J9ROMFIELDSHAPE_NAME(fccEntryField))\n+                        && J9UTF8_EQUALS(J9ROMNAMEANDSIGNATURE_SIGNATURE(nameAndSignature), J9ROMFIELDSHAPE_SIGNATURE(fccEntryField))\n+                ) {\n+                        index = i;\n+                        break;\n+                }\n+        }\n+        return index;\n+}\n+\n+J9Class *\n+findJ9ClassInFlattenedClassCache(J9FlattenedClassCache *flattenedClassCache, U_8 *className, UDATA classNameLength)\n+{\n+        /* first field indicates the number of classes in the cache */\n+        UDATA length = flattenedClassCache->numberOfEntries;\n+        J9Class *clazz = NULL;\n+\n+        for (UDATA i = 0; i < length; i++) {\n+                J9UTF8* currentClassName = J9ROMCLASS_CLASSNAME(J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->clazz->romClass);\n+                if (J9UTF8_DATA_EQUALS(J9UTF8_DATA(currentClassName), J9UTF8_LENGTH(currentClassName), className, classNameLength)) {\n+                        clazz = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->clazz;\n+                        break;\n+                }\n+        }\n+\n+        Assert_VM_notNull(clazz);\n+        return clazz;\n+}\n+\n+UDATA\n+getFlattenableFieldOffset(J9Class *fieldOwner, J9ROMFieldShape *field)\n+{\n+        UDATA fieldOffset = 0;\n+        J9FlattenedClassCache *flattenedClassCache = NULL;\n+        J9ROMNameAndSignature *nameAndSig;\n+        UDATA fieldIndex = 0;\n+\n+        nameAndSig = &field->nameAndSignature;\n+        flattenedClassCache = fieldOwner->flattenedClassCache;\n+        fieldIndex = findIndexInFlattenedClassCache(flattenedClassCache, nameAndSig);\n+        Assert_VM_unequal(UDATA_MAX, fieldIndex);\n+        J9FlattenedClassCacheEntry * flattenedClassCacheEntry = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, fieldIndex);\n+        fieldOffset = flattenedClassCacheEntry->offset;\n+        return fieldOffset;\n+}\n+\n+BOOLEAN\n+isFlattenableFieldFlattened(J9Class *fieldOwner, J9ROMFieldShape *field)\n+{\n+        BOOLEAN fieldFlattened = FALSE;\n+        J9Class* clazz = getFlattenableFieldType(fieldOwner, field);\n+        fieldFlattened = J9_ARE_ALL_BITS_SET((clazz)->classFlags, J9ClassIsFlattened);\n+        return fieldFlattened;\n+}\n+\n+J9Class *\n+getFlattenableFieldType(J9Class *fieldOwner, J9ROMFieldShape *field)\n+{\n+        J9Class * fieldType = NULL;\n+        J9FlattenedClassCache *flattenedClassCache = NULL;\n+        J9ROMNameAndSignature *nameAndSig;\n+        UDATA fieldIndex = 0;\n+\n+        nameAndSig = &field->nameAndSignature;\n+        flattenedClassCache = fieldOwner->flattenedClassCache;\n+        fieldIndex = findIndexInFlattenedClassCache(flattenedClassCache, nameAndSig);\n+        Assert_VM_unequal(UDATA_MAX, fieldIndex);\n+        fieldType = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, fieldIndex)->clazz;\n+        return fieldType;\n+}\n+\n+UDATA\n+getFlattenableFieldSize(J9Class *fieldOwner, J9ROMFieldShape *field)\n+{\n+        UDATA instanceSize = 0;\n+        if(isFlattenableFieldFlattened(fieldOwner, field)){\n+                J9Class* clazz = getFlattenableFieldType(fieldOwner, field);\n+                instanceSize =  (clazz)->totalInstanceSize - (clazz)->backfillOffset;\n+        } else{\n+                instanceSize = sizeof(fj9object_t);\n+        }\n+        return instanceSize;\n+}\n+\n+UDATA\n+arrayElementSize(J9ArrayClass* arrayClass)\n+{\n+        UDATA elementSize = 0;\n+        elementSize = arrayClass->flattenedElementSize;\n+        return elementSize;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de19620784ae02a74c7d6fa35e84ed0d4c7299d6"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc2MDg3NA==", "bodyText": "I added an assert_vm_notNull too. Let me know if I should revert that", "url": "https://github.com/eclipse-openj9/openj9/pull/9854#discussion_r441760874", "createdAt": "2020-06-17T18:52:36Z", "author": {"login": "OussamaSaoudi"}, "path": "runtime/vm/ValueTypeHelpers.cpp", "diffHunk": "@@ -69,4 +70,106 @@ isClassRefQtype(J9Class *cpContextClass, U_16 cpIndex)\n {\n \treturn VM_ValueTypeHelpers::isClassRefQtype((J9ConstantPool *) cpContextClass->ramConstantPool, cpIndex);\n }\n+UDATA\n+findIndexInFlattenedClassCache(J9FlattenedClassCache *flattenedClassCache, J9ROMNameAndSignature *nameAndSignature)\n+{\n+        /* first field indicates the number of classes in the cache */\n+        UDATA index = UDATA_MAX;\n+        UDATA length = flattenedClassCache->numberOfEntries;\n+        J9ROMFieldShape *fccEntryField = NULL;\n+\n+        for (UDATA i = 0; i < length; i++) {\n+                fccEntryField = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->field;\n+                if (J9UTF8_EQUALS(J9ROMNAMEANDSIGNATURE_NAME(nameAndSignature), J9ROMFIELDSHAPE_NAME(fccEntryField))\n+                        && J9UTF8_EQUALS(J9ROMNAMEANDSIGNATURE_SIGNATURE(nameAndSignature), J9ROMFIELDSHAPE_SIGNATURE(fccEntryField))\n+                ) {\n+                        index = i;\n+                        break;\n+                }\n+        }\n+        return index;\n+}\n+\n+J9Class *\n+findJ9ClassInFlattenedClassCache(J9FlattenedClassCache *flattenedClassCache, U_8 *className, UDATA classNameLength)\n+{\n+        /* first field indicates the number of classes in the cache */\n+        UDATA length = flattenedClassCache->numberOfEntries;\n+        J9Class *clazz = NULL;\n+\n+        for (UDATA i = 0; i < length; i++) {\n+                J9UTF8* currentClassName = J9ROMCLASS_CLASSNAME(J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->clazz->romClass);\n+                if (J9UTF8_DATA_EQUALS(J9UTF8_DATA(currentClassName), J9UTF8_LENGTH(currentClassName), className, classNameLength)) {\n+                        clazz = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->clazz;\n+                        break;\n+                }\n+        }\n+\n+        Assert_VM_notNull(clazz);\n+        return clazz;\n+}\n+\n+UDATA\n+getFlattenableFieldOffset(J9Class *fieldOwner, J9ROMFieldShape *field)\n+{\n+        UDATA fieldOffset = 0;\n+        J9FlattenedClassCache *flattenedClassCache = NULL;\n+        J9ROMNameAndSignature *nameAndSig;\n+        UDATA fieldIndex = 0;\n+\n+        nameAndSig = &field->nameAndSignature;\n+        flattenedClassCache = fieldOwner->flattenedClassCache;\n+        fieldIndex = findIndexInFlattenedClassCache(flattenedClassCache, nameAndSig);\n+        Assert_VM_unequal(UDATA_MAX, fieldIndex);\n+        J9FlattenedClassCacheEntry * flattenedClassCacheEntry = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, fieldIndex);\n+        fieldOffset = flattenedClassCacheEntry->offset;\n+        return fieldOffset;\n+}\n+\n+BOOLEAN\n+isFlattenableFieldFlattened(J9Class *fieldOwner, J9ROMFieldShape *field)\n+{\n+        BOOLEAN fieldFlattened = FALSE;\n+        J9Class* clazz = getFlattenableFieldType(fieldOwner, field);\n+        fieldFlattened = J9_ARE_ALL_BITS_SET((clazz)->classFlags, J9ClassIsFlattened);\n+        return fieldFlattened;\n+}\n+\n+J9Class *\n+getFlattenableFieldType(J9Class *fieldOwner, J9ROMFieldShape *field)\n+{\n+        J9Class * fieldType = NULL;\n+        J9FlattenedClassCache *flattenedClassCache = NULL;\n+        J9ROMNameAndSignature *nameAndSig;\n+        UDATA fieldIndex = 0;\n+\n+        nameAndSig = &field->nameAndSignature;\n+        flattenedClassCache = fieldOwner->flattenedClassCache;\n+        fieldIndex = findIndexInFlattenedClassCache(flattenedClassCache, nameAndSig);\n+        Assert_VM_unequal(UDATA_MAX, fieldIndex);\n+        fieldType = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, fieldIndex)->clazz;\n+        return fieldType;\n+}\n+\n+UDATA\n+getFlattenableFieldSize(J9Class *fieldOwner, J9ROMFieldShape *field)\n+{\n+        UDATA instanceSize = 0;\n+        if(isFlattenableFieldFlattened(fieldOwner, field)){\n+                J9Class* clazz = getFlattenableFieldType(fieldOwner, field);\n+                instanceSize =  (clazz)->totalInstanceSize - (clazz)->backfillOffset;\n+        } else{\n+                instanceSize = sizeof(fj9object_t);\n+        }\n+        return instanceSize;\n+}\n+\n+UDATA\n+arrayElementSize(J9ArrayClass* arrayClass)\n+{\n+        UDATA elementSize = 0;\n+        elementSize = arrayClass->flattenedElementSize;\n+        return elementSize;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcwNjE4Nw=="}, "originalCommit": {"oid": "de19620784ae02a74c7d6fa35e84ed0d4c7299d6"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTkyNjM2OnYy", "diffSide": "RIGHT", "path": "runtime/vm/ValueTypeHelpers.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzoyNDoxN1rOGlPqYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzoyNDoxN1rOGlPqYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcwNzEwNg==", "bodyText": "add assert_vm_notNull for the params, same for the other functions below", "url": "https://github.com/eclipse-openj9/openj9/pull/9854#discussion_r441707106", "createdAt": "2020-06-17T17:24:17Z", "author": {"login": "tajila"}, "path": "runtime/vm/ValueTypeHelpers.cpp", "diffHunk": "@@ -69,4 +70,106 @@ isClassRefQtype(J9Class *cpContextClass, U_16 cpIndex)\n {\n \treturn VM_ValueTypeHelpers::isClassRefQtype((J9ConstantPool *) cpContextClass->ramConstantPool, cpIndex);\n }\n+UDATA\n+findIndexInFlattenedClassCache(J9FlattenedClassCache *flattenedClassCache, J9ROMNameAndSignature *nameAndSignature)\n+{\n+        /* first field indicates the number of classes in the cache */\n+        UDATA index = UDATA_MAX;\n+        UDATA length = flattenedClassCache->numberOfEntries;\n+        J9ROMFieldShape *fccEntryField = NULL;\n+\n+        for (UDATA i = 0; i < length; i++) {\n+                fccEntryField = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->field;\n+                if (J9UTF8_EQUALS(J9ROMNAMEANDSIGNATURE_NAME(nameAndSignature), J9ROMFIELDSHAPE_NAME(fccEntryField))\n+                        && J9UTF8_EQUALS(J9ROMNAMEANDSIGNATURE_SIGNATURE(nameAndSignature), J9ROMFIELDSHAPE_SIGNATURE(fccEntryField))\n+                ) {\n+                        index = i;\n+                        break;\n+                }\n+        }\n+        return index;\n+}\n+\n+J9Class *\n+findJ9ClassInFlattenedClassCache(J9FlattenedClassCache *flattenedClassCache, U_8 *className, UDATA classNameLength)\n+{\n+        /* first field indicates the number of classes in the cache */\n+        UDATA length = flattenedClassCache->numberOfEntries;\n+        J9Class *clazz = NULL;\n+\n+        for (UDATA i = 0; i < length; i++) {\n+                J9UTF8* currentClassName = J9ROMCLASS_CLASSNAME(J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->clazz->romClass);\n+                if (J9UTF8_DATA_EQUALS(J9UTF8_DATA(currentClassName), J9UTF8_LENGTH(currentClassName), className, classNameLength)) {\n+                        clazz = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->clazz;\n+                        break;\n+                }\n+        }\n+\n+        Assert_VM_notNull(clazz);\n+        return clazz;\n+}\n+\n+UDATA\n+getFlattenableFieldOffset(J9Class *fieldOwner, J9ROMFieldShape *field)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de19620784ae02a74c7d6fa35e84ed0d4c7299d6"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NjUzMTMzOnYy", "diffSide": "RIGHT", "path": "runtime/vm/ValueTypeHelpers.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxOToyNjo1N1rOGl9Iug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxOToyNjo1N1rOGl9Iug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ1MjE1NA==", "bodyText": "initialize size to sizeof(fj9object_t); so you dont need the else", "url": "https://github.com/eclipse-openj9/openj9/pull/9854#discussion_r442452154", "createdAt": "2020-06-18T19:26:57Z", "author": {"login": "tajila"}, "path": "runtime/vm/ValueTypeHelpers.cpp", "diffHunk": "@@ -69,4 +70,117 @@ isClassRefQtype(J9Class *cpContextClass, U_16 cpIndex)\n {\n \treturn VM_ValueTypeHelpers::isClassRefQtype((J9ConstantPool *) cpContextClass->ramConstantPool, cpIndex);\n }\n+UDATA\n+findIndexInFlattenedClassCache(J9FlattenedClassCache *flattenedClassCache, J9ROMNameAndSignature *nameAndSignature)\n+{\n+        /* first field indicates the number of classes in the cache */\n+        UDATA index = UDATA_MAX;\n+        UDATA length = flattenedClassCache->numberOfEntries;\n+        J9ROMFieldShape *fccEntryField = NULL;\n+\n+        for (UDATA i = 0; i < length; i++) {\n+                fccEntryField = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->field;\n+                if (J9UTF8_EQUALS(J9ROMNAMEANDSIGNATURE_NAME(nameAndSignature), J9ROMFIELDSHAPE_NAME(fccEntryField))\n+                        && J9UTF8_EQUALS(J9ROMNAMEANDSIGNATURE_SIGNATURE(nameAndSignature), J9ROMFIELDSHAPE_SIGNATURE(fccEntryField))\n+                ) {\n+                        index = i;\n+                        break;\n+                }\n+        }\n+        return index;\n+}\n+\n+J9Class *\n+findJ9ClassInFlattenedClassCache(J9FlattenedClassCache *flattenedClassCache, U_8 *className, UDATA classNameLength)\n+{\n+        /* first field indicates the number of classes in the cache */\n+        UDATA length = flattenedClassCache->numberOfEntries;\n+        J9Class *clazz = NULL;\n+\n+        for (UDATA i = 0; i < length; i++) {\n+                J9UTF8* currentClassName = J9ROMCLASS_CLASSNAME(J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->clazz->romClass);\n+                if (J9UTF8_DATA_EQUALS(J9UTF8_DATA(currentClassName), J9UTF8_LENGTH(currentClassName), className, classNameLength)) {\n+                        clazz = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->clazz;\n+                        break;\n+                }\n+        }\n+\n+        Assert_VM_notNull(clazz);\n+        return clazz;\n+}\n+\n+UDATA\n+getFlattenableFieldOffset(J9Class *fieldOwner, J9ROMFieldShape *field)\n+{\n+        Assert_VM_notNull(fieldOwner);\n+        Assert_VM_notNull(field);\n+\n+        UDATA fieldOffset = 0;\n+        J9FlattenedClassCache *flattenedClassCache = NULL;\n+        J9ROMNameAndSignature *nameAndSig;\n+        UDATA fieldIndex = 0;\n+\n+        nameAndSig = &field->nameAndSignature;\n+        flattenedClassCache = fieldOwner->flattenedClassCache;\n+        fieldIndex = findIndexInFlattenedClassCache(flattenedClassCache, nameAndSig);\n+        Assert_VM_unequal(UDATA_MAX, fieldIndex);\n+        J9FlattenedClassCacheEntry * flattenedClassCacheEntry = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, fieldIndex);\n+        fieldOffset = flattenedClassCacheEntry->offset;\n+        return fieldOffset;\n+}\n+\n+BOOLEAN\n+isFlattenableFieldFlattened(J9Class *fieldOwner, J9ROMFieldShape *field)\n+{\n+        Assert_VM_notNull(fieldOwner);\n+        Assert_VM_notNull(field);\n+\n+        BOOLEAN fieldFlattened = FALSE;\n+        J9Class* clazz = getFlattenableFieldType(fieldOwner, field);\n+        fieldFlattened = J9_ARE_ALL_BITS_SET((clazz)->classFlags, J9ClassIsFlattened);\n+        return fieldFlattened;\n+}\n+\n+J9Class *\n+getFlattenableFieldType(J9Class *fieldOwner, J9ROMFieldShape *field)\n+{\n+        Assert_VM_notNull(fieldOwner);\n+        Assert_VM_notNull(field);\n+\n+        J9Class * fieldType = NULL;\n+        J9FlattenedClassCache *flattenedClassCache = NULL;\n+        J9ROMNameAndSignature *nameAndSig;\n+        UDATA fieldIndex = 0;\n+\n+        nameAndSig = &field->nameAndSignature;\n+        flattenedClassCache = fieldOwner->flattenedClassCache;\n+        fieldIndex = findIndexInFlattenedClassCache(flattenedClassCache, nameAndSig);\n+        Assert_VM_unequal(UDATA_MAX, fieldIndex);\n+        fieldType = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, fieldIndex)->clazz;\n+        return fieldType;\n+}\n+\n+UDATA\n+getFlattenableFieldSize(J9Class *fieldOwner, J9ROMFieldShape *field)\n+{\n+        Assert_VM_notNull(fieldOwner);\n+        Assert_VM_notNull(field);\n+\n+        UDATA instanceSize = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79acb1e06e3feb6d4ead50e232e50ce0648bb22e"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1OTYxNDEwOnYy", "diffSide": "RIGHT", "path": "runtime/vm/ValueTypeHelpers.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNjo0MToyMFrOGmbGGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNjo0MToyMFrOGmbGGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk0MzAwMA==", "bodyText": "Assign this in the declaration, please. In fact all of these can be declared and assigned in order.", "url": "https://github.com/eclipse-openj9/openj9/pull/9854#discussion_r442943000", "createdAt": "2020-06-19T16:41:20Z", "author": {"login": "gacholio"}, "path": "runtime/vm/ValueTypeHelpers.cpp", "diffHunk": "@@ -69,4 +70,115 @@ isClassRefQtype(J9Class *cpContextClass, U_16 cpIndex)\n {\n \treturn VM_ValueTypeHelpers::isClassRefQtype((J9ConstantPool *) cpContextClass->ramConstantPool, cpIndex);\n }\n+UDATA\n+findIndexInFlattenedClassCache(J9FlattenedClassCache *flattenedClassCache, J9ROMNameAndSignature *nameAndSignature)\n+{\n+        /* first field indicates the number of classes in the cache */\n+        UDATA index = UDATA_MAX;\n+        UDATA length = flattenedClassCache->numberOfEntries;\n+        J9ROMFieldShape *fccEntryField = NULL;\n+\n+        for (UDATA i = 0; i < length; i++) {\n+                fccEntryField = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->field;\n+                if (J9UTF8_EQUALS(J9ROMNAMEANDSIGNATURE_NAME(nameAndSignature), J9ROMFIELDSHAPE_NAME(fccEntryField))\n+                        && J9UTF8_EQUALS(J9ROMNAMEANDSIGNATURE_SIGNATURE(nameAndSignature), J9ROMFIELDSHAPE_SIGNATURE(fccEntryField))\n+                ) {\n+                        index = i;\n+                        break;\n+                }\n+        }\n+        return index;\n+}\n+\n+J9Class *\n+findJ9ClassInFlattenedClassCache(J9FlattenedClassCache *flattenedClassCache, U_8 *className, UDATA classNameLength)\n+{\n+        /* first field indicates the number of classes in the cache */\n+        UDATA length = flattenedClassCache->numberOfEntries;\n+        J9Class *clazz = NULL;\n+\n+        for (UDATA i = 0; i < length; i++) {\n+                J9UTF8* currentClassName = J9ROMCLASS_CLASSNAME(J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->clazz->romClass);\n+                if (J9UTF8_DATA_EQUALS(J9UTF8_DATA(currentClassName), J9UTF8_LENGTH(currentClassName), className, classNameLength)) {\n+                        clazz = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->clazz;\n+                        break;\n+                }\n+        }\n+\n+        Assert_VM_notNull(clazz);\n+        return clazz;\n+}\n+\n+UDATA\n+getFlattenableFieldOffset(J9Class *fieldOwner, J9ROMFieldShape *field)\n+{\n+        Assert_VM_notNull(fieldOwner);\n+        Assert_VM_notNull(field);\n+\n+        UDATA fieldOffset = 0;\n+        J9FlattenedClassCache *flattenedClassCache = NULL;\n+        J9ROMNameAndSignature *nameAndSig;\n+        UDATA fieldIndex = 0;\n+\n+        nameAndSig = &field->nameAndSignature;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3abc31bb1ed7a364d5e53631308061e120a013a"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1OTYxNTc0OnYy", "diffSide": "RIGHT", "path": "runtime/vm/ValueTypeHelpers.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNjo0MjowMFrOGmbHIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNjo0MjowMFrOGmbHIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk0MzI2Ng==", "bodyText": "Like above, assign these in the declarations.", "url": "https://github.com/eclipse-openj9/openj9/pull/9854#discussion_r442943266", "createdAt": "2020-06-19T16:42:00Z", "author": {"login": "gacholio"}, "path": "runtime/vm/ValueTypeHelpers.cpp", "diffHunk": "@@ -69,4 +70,115 @@ isClassRefQtype(J9Class *cpContextClass, U_16 cpIndex)\n {\n \treturn VM_ValueTypeHelpers::isClassRefQtype((J9ConstantPool *) cpContextClass->ramConstantPool, cpIndex);\n }\n+UDATA\n+findIndexInFlattenedClassCache(J9FlattenedClassCache *flattenedClassCache, J9ROMNameAndSignature *nameAndSignature)\n+{\n+        /* first field indicates the number of classes in the cache */\n+        UDATA index = UDATA_MAX;\n+        UDATA length = flattenedClassCache->numberOfEntries;\n+        J9ROMFieldShape *fccEntryField = NULL;\n+\n+        for (UDATA i = 0; i < length; i++) {\n+                fccEntryField = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->field;\n+                if (J9UTF8_EQUALS(J9ROMNAMEANDSIGNATURE_NAME(nameAndSignature), J9ROMFIELDSHAPE_NAME(fccEntryField))\n+                        && J9UTF8_EQUALS(J9ROMNAMEANDSIGNATURE_SIGNATURE(nameAndSignature), J9ROMFIELDSHAPE_SIGNATURE(fccEntryField))\n+                ) {\n+                        index = i;\n+                        break;\n+                }\n+        }\n+        return index;\n+}\n+\n+J9Class *\n+findJ9ClassInFlattenedClassCache(J9FlattenedClassCache *flattenedClassCache, U_8 *className, UDATA classNameLength)\n+{\n+        /* first field indicates the number of classes in the cache */\n+        UDATA length = flattenedClassCache->numberOfEntries;\n+        J9Class *clazz = NULL;\n+\n+        for (UDATA i = 0; i < length; i++) {\n+                J9UTF8* currentClassName = J9ROMCLASS_CLASSNAME(J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->clazz->romClass);\n+                if (J9UTF8_DATA_EQUALS(J9UTF8_DATA(currentClassName), J9UTF8_LENGTH(currentClassName), className, classNameLength)) {\n+                        clazz = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->clazz;\n+                        break;\n+                }\n+        }\n+\n+        Assert_VM_notNull(clazz);\n+        return clazz;\n+}\n+\n+UDATA\n+getFlattenableFieldOffset(J9Class *fieldOwner, J9ROMFieldShape *field)\n+{\n+        Assert_VM_notNull(fieldOwner);\n+        Assert_VM_notNull(field);\n+\n+        UDATA fieldOffset = 0;\n+        J9FlattenedClassCache *flattenedClassCache = NULL;\n+        J9ROMNameAndSignature *nameAndSig;\n+        UDATA fieldIndex = 0;\n+\n+        nameAndSig = &field->nameAndSignature;\n+        flattenedClassCache = fieldOwner->flattenedClassCache;\n+        fieldIndex = findIndexInFlattenedClassCache(flattenedClassCache, nameAndSig);\n+        Assert_VM_unequal(UDATA_MAX, fieldIndex);\n+        J9FlattenedClassCacheEntry * flattenedClassCacheEntry = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, fieldIndex);\n+        fieldOffset = flattenedClassCacheEntry->offset;\n+        return fieldOffset;\n+}\n+\n+BOOLEAN\n+isFlattenableFieldFlattened(J9Class *fieldOwner, J9ROMFieldShape *field)\n+{\n+        Assert_VM_notNull(fieldOwner);\n+        Assert_VM_notNull(field);\n+\n+        BOOLEAN fieldFlattened = FALSE;\n+        J9Class* clazz = getFlattenableFieldType(fieldOwner, field);\n+        fieldFlattened = J9_ARE_ALL_BITS_SET((clazz)->classFlags, J9ClassIsFlattened);\n+        return fieldFlattened;\n+}\n+\n+J9Class *\n+getFlattenableFieldType(J9Class *fieldOwner, J9ROMFieldShape *field)\n+{\n+        Assert_VM_notNull(fieldOwner);\n+        Assert_VM_notNull(field);\n+\n+        J9Class * fieldType = NULL;\n+        J9FlattenedClassCache *flattenedClassCache = NULL;\n+        J9ROMNameAndSignature *nameAndSig;\n+        UDATA fieldIndex = 0;\n+\n+        nameAndSig = &field->nameAndSignature;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3abc31bb1ed7a364d5e53631308061e120a013a"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1OTYyMTY1OnYy", "diffSide": "RIGHT", "path": "runtime/vm/ValueTypeHelpers.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNjo0NDoxMVrOGmbK3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNjo0NDoxMVrOGmbK3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk0NDIyMw==", "bodyText": "This is not legal - use J9VMTHREAD_REFERENCE_SIZE or J9JAVAVM_REFERENCE_SIZE (which means you'll need to pass in a vmThread or javaVM).", "url": "https://github.com/eclipse-openj9/openj9/pull/9854#discussion_r442944223", "createdAt": "2020-06-19T16:44:11Z", "author": {"login": "gacholio"}, "path": "runtime/vm/ValueTypeHelpers.cpp", "diffHunk": "@@ -69,4 +70,115 @@ isClassRefQtype(J9Class *cpContextClass, U_16 cpIndex)\n {\n \treturn VM_ValueTypeHelpers::isClassRefQtype((J9ConstantPool *) cpContextClass->ramConstantPool, cpIndex);\n }\n+UDATA\n+findIndexInFlattenedClassCache(J9FlattenedClassCache *flattenedClassCache, J9ROMNameAndSignature *nameAndSignature)\n+{\n+        /* first field indicates the number of classes in the cache */\n+        UDATA index = UDATA_MAX;\n+        UDATA length = flattenedClassCache->numberOfEntries;\n+        J9ROMFieldShape *fccEntryField = NULL;\n+\n+        for (UDATA i = 0; i < length; i++) {\n+                fccEntryField = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->field;\n+                if (J9UTF8_EQUALS(J9ROMNAMEANDSIGNATURE_NAME(nameAndSignature), J9ROMFIELDSHAPE_NAME(fccEntryField))\n+                        && J9UTF8_EQUALS(J9ROMNAMEANDSIGNATURE_SIGNATURE(nameAndSignature), J9ROMFIELDSHAPE_SIGNATURE(fccEntryField))\n+                ) {\n+                        index = i;\n+                        break;\n+                }\n+        }\n+        return index;\n+}\n+\n+J9Class *\n+findJ9ClassInFlattenedClassCache(J9FlattenedClassCache *flattenedClassCache, U_8 *className, UDATA classNameLength)\n+{\n+        /* first field indicates the number of classes in the cache */\n+        UDATA length = flattenedClassCache->numberOfEntries;\n+        J9Class *clazz = NULL;\n+\n+        for (UDATA i = 0; i < length; i++) {\n+                J9UTF8* currentClassName = J9ROMCLASS_CLASSNAME(J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->clazz->romClass);\n+                if (J9UTF8_DATA_EQUALS(J9UTF8_DATA(currentClassName), J9UTF8_LENGTH(currentClassName), className, classNameLength)) {\n+                        clazz = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->clazz;\n+                        break;\n+                }\n+        }\n+\n+        Assert_VM_notNull(clazz);\n+        return clazz;\n+}\n+\n+UDATA\n+getFlattenableFieldOffset(J9Class *fieldOwner, J9ROMFieldShape *field)\n+{\n+        Assert_VM_notNull(fieldOwner);\n+        Assert_VM_notNull(field);\n+\n+        UDATA fieldOffset = 0;\n+        J9FlattenedClassCache *flattenedClassCache = NULL;\n+        J9ROMNameAndSignature *nameAndSig;\n+        UDATA fieldIndex = 0;\n+\n+        nameAndSig = &field->nameAndSignature;\n+        flattenedClassCache = fieldOwner->flattenedClassCache;\n+        fieldIndex = findIndexInFlattenedClassCache(flattenedClassCache, nameAndSig);\n+        Assert_VM_unequal(UDATA_MAX, fieldIndex);\n+        J9FlattenedClassCacheEntry * flattenedClassCacheEntry = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, fieldIndex);\n+        fieldOffset = flattenedClassCacheEntry->offset;\n+        return fieldOffset;\n+}\n+\n+BOOLEAN\n+isFlattenableFieldFlattened(J9Class *fieldOwner, J9ROMFieldShape *field)\n+{\n+        Assert_VM_notNull(fieldOwner);\n+        Assert_VM_notNull(field);\n+\n+        BOOLEAN fieldFlattened = FALSE;\n+        J9Class* clazz = getFlattenableFieldType(fieldOwner, field);\n+        fieldFlattened = J9_ARE_ALL_BITS_SET((clazz)->classFlags, J9ClassIsFlattened);\n+        return fieldFlattened;\n+}\n+\n+J9Class *\n+getFlattenableFieldType(J9Class *fieldOwner, J9ROMFieldShape *field)\n+{\n+        Assert_VM_notNull(fieldOwner);\n+        Assert_VM_notNull(field);\n+\n+        J9Class * fieldType = NULL;\n+        J9FlattenedClassCache *flattenedClassCache = NULL;\n+        J9ROMNameAndSignature *nameAndSig;\n+        UDATA fieldIndex = 0;\n+\n+        nameAndSig = &field->nameAndSignature;\n+        flattenedClassCache = fieldOwner->flattenedClassCache;\n+        fieldIndex = findIndexInFlattenedClassCache(flattenedClassCache, nameAndSig);\n+        Assert_VM_unequal(UDATA_MAX, fieldIndex);\n+        fieldType = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, fieldIndex)->clazz;\n+        return fieldType;\n+}\n+\n+UDATA\n+getFlattenableFieldSize(J9Class *fieldOwner, J9ROMFieldShape *field)\n+{\n+        Assert_VM_notNull(fieldOwner);\n+        Assert_VM_notNull(field);\n+\n+        UDATA instanceSize = sizeof(fj9object_t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3abc31bb1ed7a364d5e53631308061e120a013a"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDI4NjA0OnYy", "diffSide": "RIGHT", "path": "runtime/vm/ValueTypeHelpers.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNToyOTozNlrOGnF57w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNToyOTozNlrOGnF57w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY0NDM5OQ==", "bodyText": "This comment (and the identical one below) seems unnecessary.", "url": "https://github.com/eclipse-openj9/openj9/pull/9854#discussion_r443644399", "createdAt": "2020-06-22T15:29:36Z", "author": {"login": "gacholio"}, "path": "runtime/vm/ValueTypeHelpers.cpp", "diffHunk": "@@ -69,4 +70,106 @@ isClassRefQtype(J9Class *cpContextClass, U_16 cpIndex)\n {\n \treturn VM_ValueTypeHelpers::isClassRefQtype((J9ConstantPool *) cpContextClass->ramConstantPool, cpIndex);\n }\n+UDATA\n+findIndexInFlattenedClassCache(J9FlattenedClassCache *flattenedClassCache, J9ROMNameAndSignature *nameAndSignature)\n+{\n+        /* first field indicates the number of classes in the cache */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91c074bf22e3fa7d84a837e355b83b212962812e"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDI4ODE1OnYy", "diffSide": "RIGHT", "path": "runtime/vm/ValueTypeHelpers.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNTozMDowNFrOGnF7PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNTozMDowNFrOGnF7PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY0NDczMg==", "bodyText": "Please move this inside the loop (and initialize it in the declaration).", "url": "https://github.com/eclipse-openj9/openj9/pull/9854#discussion_r443644732", "createdAt": "2020-06-22T15:30:04Z", "author": {"login": "gacholio"}, "path": "runtime/vm/ValueTypeHelpers.cpp", "diffHunk": "@@ -69,4 +70,106 @@ isClassRefQtype(J9Class *cpContextClass, U_16 cpIndex)\n {\n \treturn VM_ValueTypeHelpers::isClassRefQtype((J9ConstantPool *) cpContextClass->ramConstantPool, cpIndex);\n }\n+UDATA\n+findIndexInFlattenedClassCache(J9FlattenedClassCache *flattenedClassCache, J9ROMNameAndSignature *nameAndSignature)\n+{\n+        /* first field indicates the number of classes in the cache */\n+        UDATA index = UDATA_MAX;\n+        UDATA length = flattenedClassCache->numberOfEntries;\n+        J9ROMFieldShape *fccEntryField = NULL;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91c074bf22e3fa7d84a837e355b83b212962812e"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDI5MDkwOnYy", "diffSide": "RIGHT", "path": "runtime/vm/ValueTypeHelpers.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNTozMDozN1rOGnF85Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNTozMDozN1rOGnF85Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY0NTE1Nw==", "bodyText": "Extra blank after the =", "url": "https://github.com/eclipse-openj9/openj9/pull/9854#discussion_r443645157", "createdAt": "2020-06-22T15:30:37Z", "author": {"login": "gacholio"}, "path": "runtime/vm/ValueTypeHelpers.cpp", "diffHunk": "@@ -69,4 +70,106 @@ isClassRefQtype(J9Class *cpContextClass, U_16 cpIndex)\n {\n \treturn VM_ValueTypeHelpers::isClassRefQtype((J9ConstantPool *) cpContextClass->ramConstantPool, cpIndex);\n }\n+UDATA\n+findIndexInFlattenedClassCache(J9FlattenedClassCache *flattenedClassCache, J9ROMNameAndSignature *nameAndSignature)\n+{\n+        /* first field indicates the number of classes in the cache */\n+        UDATA index = UDATA_MAX;\n+        UDATA length = flattenedClassCache->numberOfEntries;\n+        J9ROMFieldShape *fccEntryField = NULL;\n+\n+        for (UDATA i = 0; i < length; i++) {\n+                fccEntryField = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->field;\n+                if (J9UTF8_EQUALS(J9ROMNAMEANDSIGNATURE_NAME(nameAndSignature), J9ROMFIELDSHAPE_NAME(fccEntryField))\n+                        && J9UTF8_EQUALS(J9ROMNAMEANDSIGNATURE_SIGNATURE(nameAndSignature), J9ROMFIELDSHAPE_SIGNATURE(fccEntryField))\n+                ) {\n+                        index = i;\n+                        break;\n+                }\n+        }\n+        return index;\n+}\n+\n+J9Class *\n+findJ9ClassInFlattenedClassCache(J9FlattenedClassCache *flattenedClassCache, U_8 *className, UDATA classNameLength)\n+{\n+        /* first field indicates the number of classes in the cache */\n+        UDATA length = flattenedClassCache->numberOfEntries;\n+        J9Class *clazz = NULL;\n+\n+        for (UDATA i = 0; i < length; i++) {\n+                J9UTF8* currentClassName = J9ROMCLASS_CLASSNAME(J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->clazz->romClass);\n+                if (J9UTF8_DATA_EQUALS(J9UTF8_DATA(currentClassName), J9UTF8_LENGTH(currentClassName), className, classNameLength)) {\n+                        clazz = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->clazz;\n+                        break;\n+                }\n+        }\n+\n+        Assert_VM_notNull(clazz);\n+        return clazz;\n+}\n+\n+UDATA\n+getFlattenableFieldOffset(J9Class *fieldOwner, J9ROMFieldShape *field)\n+{\n+        Assert_VM_notNull(fieldOwner);\n+        Assert_VM_notNull(field);\n+\n+        J9FlattenedClassCache *flattenedClassCache = fieldOwner->flattenedClassCache;\n+        J9ROMNameAndSignature *nameAndSig = &field->nameAndSignature;\n+        UDATA fieldIndex = findIndexInFlattenedClassCache(flattenedClassCache, nameAndSig);\n+        Assert_VM_unequal(UDATA_MAX, fieldIndex);\n+        J9FlattenedClassCacheEntry * flattenedClassCacheEntry = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, fieldIndex);\n+        UDATA fieldOffset = flattenedClassCacheEntry->offset;\n+        return fieldOffset;\n+}\n+\n+BOOLEAN\n+isFlattenableFieldFlattened(J9Class *fieldOwner, J9ROMFieldShape *field)\n+{\n+        Assert_VM_notNull(fieldOwner);\n+        Assert_VM_notNull(field);\n+\n+        J9Class* clazz = getFlattenableFieldType(fieldOwner, field);\n+        BOOLEAN fieldFlattened = J9_ARE_ALL_BITS_SET((clazz)->classFlags, J9ClassIsFlattened);\n+\n+        return fieldFlattened;\n+}\n+\n+J9Class *\n+getFlattenableFieldType(J9Class *fieldOwner, J9ROMFieldShape *field)\n+{\n+        Assert_VM_notNull(fieldOwner);\n+        Assert_VM_notNull(field);\n+\n+        J9FlattenedClassCache *flattenedClassCache = fieldOwner->flattenedClassCache;\n+        J9ROMNameAndSignature *nameAndSig = &field->nameAndSignature;\n+        UDATA fieldIndex = findIndexInFlattenedClassCache(flattenedClassCache, nameAndSig);\n+        Assert_VM_unequal(UDATA_MAX, fieldIndex);\n+        J9Class * fieldType = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, fieldIndex)->clazz;\n+\n+        return fieldType;\n+}\n+\n+UDATA\n+getFlattenableFieldSize(J9VMThread *currentThread, J9Class *fieldOwner, J9ROMFieldShape *field)\n+{\n+        Assert_VM_notNull(fieldOwner);\n+        Assert_VM_notNull(field);\n+\n+        UDATA instanceSize =  J9VMTHREAD_REFERENCE_SIZE(currentThread);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91c074bf22e3fa7d84a837e355b83b212962812e"}, "originalPosition": 99}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 0, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}