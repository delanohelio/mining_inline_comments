{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0MDEyNDgy", "number": 9255, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwMzowNTozM1rODyUbaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNTowNzoyNFrODy8CEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDkwMDg5OnYy", "diffSide": "RIGHT", "path": "runtime/jvmti/jvmtiEventManagement.c", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwMzowNTozM1rOGGS2bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMTo1Njo0MVrOGGhw5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI1MzQ4Nw==", "bodyText": "nitpick\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tif(JVMTI_EVENT_SAMPLED_OBJECT_ALLOC == event_type) {\n          \n          \n            \n            \t\t\tif (JVMTI_EVENT_SAMPLED_OBJECT_ALLOC == event_type) {", "url": "https://github.com/eclipse-openj9/openj9/pull/9255#discussion_r409253487", "createdAt": "2020-04-16T03:05:33Z", "author": {"login": "DanHeidinga"}, "path": "runtime/jvmti/jvmtiEventManagement.c", "diffHunk": "@@ -173,6 +173,14 @@ jvmtiSetEventNotificationMode(jvmtiEnv* env,\n \t\t\t\t\tbreak;\n  \t\t\t}\n \t\t}\n+#if JAVA_SPEC_VERSION >= 11\n+\t\telse if (JVMTI_DISABLE == mode) {\n+\t\t\tif(JVMTI_EVENT_SAMPLED_OBJECT_ALLOC == event_type) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21d3d29682d83f06d57bab5c1f338a5e12314109"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ5NzYzOQ==", "bodyText": "fixed.", "url": "https://github.com/eclipse-openj9/openj9/pull/9255#discussion_r409497639", "createdAt": "2020-04-16T11:56:18Z", "author": {"login": "JasonFengJ9"}, "path": "runtime/jvmti/jvmtiEventManagement.c", "diffHunk": "@@ -173,6 +173,14 @@ jvmtiSetEventNotificationMode(jvmtiEnv* env,\n \t\t\t\t\tbreak;\n  \t\t\t}\n \t\t}\n+#if JAVA_SPEC_VERSION >= 11\n+\t\telse if (JVMTI_DISABLE == mode) {\n+\t\t\tif(JVMTI_EVENT_SAMPLED_OBJECT_ALLOC == event_type) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI1MzQ4Nw=="}, "originalCommit": {"oid": "21d3d29682d83f06d57bab5c1f338a5e12314109"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ5NzgyOA==", "bodyText": "fixed.", "url": "https://github.com/eclipse-openj9/openj9/pull/9255#discussion_r409497828", "createdAt": "2020-04-16T11:56:41Z", "author": {"login": "JasonFengJ9"}, "path": "runtime/jvmti/jvmtiEventManagement.c", "diffHunk": "@@ -173,6 +173,14 @@ jvmtiSetEventNotificationMode(jvmtiEnv* env,\n \t\t\t\t\tbreak;\n  \t\t\t}\n \t\t}\n+#if JAVA_SPEC_VERSION >= 11\n+\t\telse if (JVMTI_DISABLE == mode) {\n+\t\t\tif(JVMTI_EVENT_SAMPLED_OBJECT_ALLOC == event_type) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI1MzQ4Nw=="}, "originalCommit": {"oid": "21d3d29682d83f06d57bab5c1f338a5e12314109"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDkzMzAyOnYy", "diffSide": "RIGHT", "path": "runtime/jvmti/jvmtiCapability.c", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwMzoyMzozMVrOGGTJHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMTo1OTowOVrOGGh18w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI1ODI3MA==", "bodyText": "There's a getCurrentThread jvmti helper method to handle unattached threads correctly.  It should probably be used here as well.", "url": "https://github.com/eclipse-openj9/openj9/pull/9255#discussion_r409258270", "createdAt": "2020-04-16T03:23:31Z", "author": {"login": "DanHeidinga"}, "path": "runtime/jvmti/jvmtiCapability.c", "diffHunk": "@@ -478,8 +478,10 @@ jvmtiRelinquishCapabilities(jvmtiEnv* env,\n \n #if JAVA_SPEC_VERSION >= 11\n \t\tif (capabilities_ptr->can_generate_sampled_object_alloc_events) {\n-\t\t\t/* The default sampling interval is not changed. */\n+\t\t\tJ9VMThread *currentThread = vm->internalVMFunctions->currentVMThread(vm);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21d3d29682d83f06d57bab5c1f338a5e12314109"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ5OTEyMw==", "bodyText": "Agreed, use the helper method getCurrentVMThread here instead.\nFor another usage of currentThread at jvmtiHelpers.c:disposeEnvironment() without a return error code, check if the currentThread is NULL directly, and skip the use of currentThread when it is unattached and has a NULL value.", "url": "https://github.com/eclipse-openj9/openj9/pull/9255#discussion_r409499123", "createdAt": "2020-04-16T11:59:09Z", "author": {"login": "JasonFengJ9"}, "path": "runtime/jvmti/jvmtiCapability.c", "diffHunk": "@@ -478,8 +478,10 @@ jvmtiRelinquishCapabilities(jvmtiEnv* env,\n \n #if JAVA_SPEC_VERSION >= 11\n \t\tif (capabilities_ptr->can_generate_sampled_object_alloc_events) {\n-\t\t\t/* The default sampling interval is not changed. */\n+\t\t\tJ9VMThread *currentThread = vm->internalVMFunctions->currentVMThread(vm);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI1ODI3MA=="}, "originalCommit": {"oid": "21d3d29682d83f06d57bab5c1f338a5e12314109"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDk1MTc1OnYy", "diffSide": "RIGHT", "path": "runtime/jvmti/jvmtiHelpers.c", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwMzozNDoxNVrOGGTT4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMjowMDoxOVrOGGh4bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI2MTAyNQ==", "bodyText": "Do we need some way to push this out to all the threads? (ie: an async event?) Is this event per thread or global?", "url": "https://github.com/eclipse-openj9/openj9/pull/9255#discussion_r409261025", "createdAt": "2020-04-16T03:34:15Z", "author": {"login": "DanHeidinga"}, "path": "runtime/jvmti/jvmtiHelpers.c", "diffHunk": "@@ -174,13 +175,14 @@ disposeEnvironment(J9JVMTIEnv * j9env, UDATA freeData)\n #if JAVA_SPEC_VERSION >= 11\n \t\tif (j9env->capabilities.can_generate_sampled_object_alloc_events) {\n \t\t\tJ9JVMTI_DATA_FROM_VM(vm)->flags &= ~J9JVMTI_FLAG_SAMPLED_OBJECT_ALLOC_ENABLED;\n+\t\t\t/* Set sampling interval to UDATA_MAX to inform GC that sampling is not required */\n+\t\t\tvm->memoryManagerFunctions->j9gc_set_allocation_sampling_interval(currentThread, UDATA_MAX);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21d3d29682d83f06d57bab5c1f338a5e12314109"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ5OTc1OA==", "bodyText": "If I understand the question correctly, there is no need to do so for all threads.\nj9gc_set_allocation_sampling_interval(vmThread, samplingInterval) modifies MM_GCExtensions.oolObjectSamplingBytesGranularity\nhttps://github.com/eclipse/omr/blob/eb71465140b3b7fd74f8ad12a65da4d384aa945e/gc/base/GCExtensionsBase.hpp#L295\nwhich is a global setting for GC to determine if the newly added MM_GCExtensions. _traceAllocationBytes (https://github.com/eclipse/omr/pull/5071/files) has passed the samplingInterval and a sampling event should be fired.\ncan_generate_sampled_object_alloc_events is global, the sampled objects come from the allocations in different threads.\nEdit: Internally GC calculates _traceAllocationBytes per thread, compares with oolObjectSamplingBytesGranularity which is a global setting, and fire J9HOOK_MM_OBJECT_ALLOCATION_SAMPLING. Though GC does sampling and fire event per thread, application allocation sampling rate is going to match the samplingInterval specified statistically in the long run.", "url": "https://github.com/eclipse-openj9/openj9/pull/9255#discussion_r409499758", "createdAt": "2020-04-16T12:00:19Z", "author": {"login": "JasonFengJ9"}, "path": "runtime/jvmti/jvmtiHelpers.c", "diffHunk": "@@ -174,13 +175,14 @@ disposeEnvironment(J9JVMTIEnv * j9env, UDATA freeData)\n #if JAVA_SPEC_VERSION >= 11\n \t\tif (j9env->capabilities.can_generate_sampled_object_alloc_events) {\n \t\t\tJ9JVMTI_DATA_FROM_VM(vm)->flags &= ~J9JVMTI_FLAG_SAMPLED_OBJECT_ALLOC_ENABLED;\n+\t\t\t/* Set sampling interval to UDATA_MAX to inform GC that sampling is not required */\n+\t\t\tvm->memoryManagerFunctions->j9gc_set_allocation_sampling_interval(currentThread, UDATA_MAX);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI2MTAyNQ=="}, "originalCommit": {"oid": "21d3d29682d83f06d57bab5c1f338a5e12314109"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MzE4NDg2OnYy", "diffSide": "RIGHT", "path": "runtime/jvmti/jvmtiCapability.c", "isResolved": true, "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNDo0NTowMFrOGGo5Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMjowNzo1MlrOGHLXBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYxNDY3OQ==", "bodyText": "If the sampling interval is global, the GC call should be changed to take a VM, not a thread.", "url": "https://github.com/eclipse-openj9/openj9/pull/9255#discussion_r409614679", "createdAt": "2020-04-16T14:45:00Z", "author": {"login": "gacholio"}, "path": "runtime/jvmti/jvmtiCapability.c", "diffHunk": "@@ -478,8 +478,13 @@ jvmtiRelinquishCapabilities(jvmtiEnv* env,\n \n #if JAVA_SPEC_VERSION >= 11\n \t\tif (capabilities_ptr->can_generate_sampled_object_alloc_events) {\n-\t\t\t/* The default sampling interval is not changed. */\n+\t\t\tJ9VMThread *currentThread = NULL;\n \t\t\tjvmtiData->flags &= ~J9JVMTI_FLAG_SAMPLED_OBJECT_ALLOC_ENABLED;\n+\t\t\trc = getCurrentVMThread(vm, &currentThread);\n+\t\t\tif (JVMTI_ERROR_NONE == rc) {\n+\t\t\t\t/* Set sampling interval to UDATA_MAX to inform GC that sampling is not required */\n+\t\t\t\tvm->memoryManagerFunctions->j9gc_set_allocation_sampling_interval(currentThread, UDATA_MAX);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5bc56d4c1ee750b75e1ca0a99b04f3a948a9748"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYzMTQzOQ==", "bodyText": "@dmitripivkine Any objection?", "url": "https://github.com/eclipse-openj9/openj9/pull/9255#discussion_r409631439", "createdAt": "2020-04-16T15:05:49Z", "author": {"login": "gacholio"}, "path": "runtime/jvmti/jvmtiCapability.c", "diffHunk": "@@ -478,8 +478,13 @@ jvmtiRelinquishCapabilities(jvmtiEnv* env,\n \n #if JAVA_SPEC_VERSION >= 11\n \t\tif (capabilities_ptr->can_generate_sampled_object_alloc_events) {\n-\t\t\t/* The default sampling interval is not changed. */\n+\t\t\tJ9VMThread *currentThread = NULL;\n \t\t\tjvmtiData->flags &= ~J9JVMTI_FLAG_SAMPLED_OBJECT_ALLOC_ENABLED;\n+\t\t\trc = getCurrentVMThread(vm, &currentThread);\n+\t\t\tif (JVMTI_ERROR_NONE == rc) {\n+\t\t\t\t/* Set sampling interval to UDATA_MAX to inform GC that sampling is not required */\n+\t\t\t\tvm->memoryManagerFunctions->j9gc_set_allocation_sampling_interval(currentThread, UDATA_MAX);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYxNDY3OQ=="}, "originalCommit": {"oid": "b5bc56d4c1ee750b75e1ca0a99b04f3a948a9748"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc0MDQ2NA==", "bodyText": "Seems right for me. Is there any thread-specific usage of this API I missed?", "url": "https://github.com/eclipse-openj9/openj9/pull/9255#discussion_r409740464", "createdAt": "2020-04-16T17:49:22Z", "author": {"login": "dmitripivkine"}, "path": "runtime/jvmti/jvmtiCapability.c", "diffHunk": "@@ -478,8 +478,13 @@ jvmtiRelinquishCapabilities(jvmtiEnv* env,\n \n #if JAVA_SPEC_VERSION >= 11\n \t\tif (capabilities_ptr->can_generate_sampled_object_alloc_events) {\n-\t\t\t/* The default sampling interval is not changed. */\n+\t\t\tJ9VMThread *currentThread = NULL;\n \t\t\tjvmtiData->flags &= ~J9JVMTI_FLAG_SAMPLED_OBJECT_ALLOC_ENABLED;\n+\t\t\trc = getCurrentVMThread(vm, &currentThread);\n+\t\t\tif (JVMTI_ERROR_NONE == rc) {\n+\t\t\t\t/* Set sampling interval to UDATA_MAX to inform GC that sampling is not required */\n+\t\t\t\tvm->memoryManagerFunctions->j9gc_set_allocation_sampling_interval(currentThread, UDATA_MAX);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYxNDY3OQ=="}, "originalCommit": {"oid": "b5bc56d4c1ee750b75e1ca0a99b04f3a948a9748"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc0NTMyMw==", "bodyText": "Is there any thread-specific usage of this API I missed?\n\nNo, the currentThread is used to retrieve J9JavaVM instead.", "url": "https://github.com/eclipse-openj9/openj9/pull/9255#discussion_r409745323", "createdAt": "2020-04-16T17:57:01Z", "author": {"login": "JasonFengJ9"}, "path": "runtime/jvmti/jvmtiCapability.c", "diffHunk": "@@ -478,8 +478,13 @@ jvmtiRelinquishCapabilities(jvmtiEnv* env,\n \n #if JAVA_SPEC_VERSION >= 11\n \t\tif (capabilities_ptr->can_generate_sampled_object_alloc_events) {\n-\t\t\t/* The default sampling interval is not changed. */\n+\t\t\tJ9VMThread *currentThread = NULL;\n \t\t\tjvmtiData->flags &= ~J9JVMTI_FLAG_SAMPLED_OBJECT_ALLOC_ENABLED;\n+\t\t\trc = getCurrentVMThread(vm, &currentThread);\n+\t\t\tif (JVMTI_ERROR_NONE == rc) {\n+\t\t\t\t/* Set sampling interval to UDATA_MAX to inform GC that sampling is not required */\n+\t\t\t\tvm->memoryManagerFunctions->j9gc_set_allocation_sampling_interval(currentThread, UDATA_MAX);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYxNDY3OQ=="}, "originalCommit": {"oid": "b5bc56d4c1ee750b75e1ca0a99b04f3a948a9748"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc1Nzg1Ng==", "bodyText": "Seems right for me. Is there any thread-specific usage of this API I missed?\n\nwe need MM_EnvironmentBase to retrieve _objectAllocationInterface for disableCachedAllocations() in #9254", "url": "https://github.com/eclipse-openj9/openj9/pull/9255#discussion_r409757856", "createdAt": "2020-04-16T18:18:09Z", "author": {"login": "LinHu2016"}, "path": "runtime/jvmti/jvmtiCapability.c", "diffHunk": "@@ -478,8 +478,13 @@ jvmtiRelinquishCapabilities(jvmtiEnv* env,\n \n #if JAVA_SPEC_VERSION >= 11\n \t\tif (capabilities_ptr->can_generate_sampled_object_alloc_events) {\n-\t\t\t/* The default sampling interval is not changed. */\n+\t\t\tJ9VMThread *currentThread = NULL;\n \t\t\tjvmtiData->flags &= ~J9JVMTI_FLAG_SAMPLED_OBJECT_ALLOC_ENABLED;\n+\t\t\trc = getCurrentVMThread(vm, &currentThread);\n+\t\t\tif (JVMTI_ERROR_NONE == rc) {\n+\t\t\t\t/* Set sampling interval to UDATA_MAX to inform GC that sampling is not required */\n+\t\t\t\tvm->memoryManagerFunctions->j9gc_set_allocation_sampling_interval(currentThread, UDATA_MAX);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYxNDY3OQ=="}, "originalCommit": {"oid": "b5bc56d4c1ee750b75e1ca0a99b04f3a948a9748"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc2NjE2NQ==", "bodyText": "we need MM_EnvironmentBase to retrieve _objectAllocationInterface for disableCachedAllocations() in #9254\n\nPost a question at https://github.com/eclipse/openj9/pull/9254/files#r409765714", "url": "https://github.com/eclipse-openj9/openj9/pull/9255#discussion_r409766165", "createdAt": "2020-04-16T18:32:31Z", "author": {"login": "JasonFengJ9"}, "path": "runtime/jvmti/jvmtiCapability.c", "diffHunk": "@@ -478,8 +478,13 @@ jvmtiRelinquishCapabilities(jvmtiEnv* env,\n \n #if JAVA_SPEC_VERSION >= 11\n \t\tif (capabilities_ptr->can_generate_sampled_object_alloc_events) {\n-\t\t\t/* The default sampling interval is not changed. */\n+\t\t\tJ9VMThread *currentThread = NULL;\n \t\t\tjvmtiData->flags &= ~J9JVMTI_FLAG_SAMPLED_OBJECT_ALLOC_ENABLED;\n+\t\t\trc = getCurrentVMThread(vm, &currentThread);\n+\t\t\tif (JVMTI_ERROR_NONE == rc) {\n+\t\t\t\t/* Set sampling interval to UDATA_MAX to inform GC that sampling is not required */\n+\t\t\t\tvm->memoryManagerFunctions->j9gc_set_allocation_sampling_interval(currentThread, UDATA_MAX);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYxNDY3OQ=="}, "originalCommit": {"oid": "b5bc56d4c1ee750b75e1ca0a99b04f3a948a9748"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc3MTY3NA==", "bodyText": "Maybe we can retrieve MM_EnvironmentBase via getCurrentVMThread(), or somewhere else", "url": "https://github.com/eclipse-openj9/openj9/pull/9255#discussion_r409771674", "createdAt": "2020-04-16T18:41:38Z", "author": {"login": "LinHu2016"}, "path": "runtime/jvmti/jvmtiCapability.c", "diffHunk": "@@ -478,8 +478,13 @@ jvmtiRelinquishCapabilities(jvmtiEnv* env,\n \n #if JAVA_SPEC_VERSION >= 11\n \t\tif (capabilities_ptr->can_generate_sampled_object_alloc_events) {\n-\t\t\t/* The default sampling interval is not changed. */\n+\t\t\tJ9VMThread *currentThread = NULL;\n \t\t\tjvmtiData->flags &= ~J9JVMTI_FLAG_SAMPLED_OBJECT_ALLOC_ENABLED;\n+\t\t\trc = getCurrentVMThread(vm, &currentThread);\n+\t\t\tif (JVMTI_ERROR_NONE == rc) {\n+\t\t\t\t/* Set sampling interval to UDATA_MAX to inform GC that sampling is not required */\n+\t\t\t\tvm->memoryManagerFunctions->j9gc_set_allocation_sampling_interval(currentThread, UDATA_MAX);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYxNDY3OQ=="}, "originalCommit": {"oid": "b5bc56d4c1ee750b75e1ca0a99b04f3a948a9748"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc3OTE3NA==", "bodyText": "There is not a question how to get thread info, if we really need it we can keep API as it stays now. However there is a question about correctness global vs per thread. Is it correct to set is as now for thread or we should manage to set this for ALL threads?", "url": "https://github.com/eclipse-openj9/openj9/pull/9255#discussion_r409779174", "createdAt": "2020-04-16T18:54:51Z", "author": {"login": "dmitripivkine"}, "path": "runtime/jvmti/jvmtiCapability.c", "diffHunk": "@@ -478,8 +478,13 @@ jvmtiRelinquishCapabilities(jvmtiEnv* env,\n \n #if JAVA_SPEC_VERSION >= 11\n \t\tif (capabilities_ptr->can_generate_sampled_object_alloc_events) {\n-\t\t\t/* The default sampling interval is not changed. */\n+\t\t\tJ9VMThread *currentThread = NULL;\n \t\t\tjvmtiData->flags &= ~J9JVMTI_FLAG_SAMPLED_OBJECT_ALLOC_ENABLED;\n+\t\t\trc = getCurrentVMThread(vm, &currentThread);\n+\t\t\tif (JVMTI_ERROR_NONE == rc) {\n+\t\t\t\t/* Set sampling interval to UDATA_MAX to inform GC that sampling is not required */\n+\t\t\t\tvm->memoryManagerFunctions->j9gc_set_allocation_sampling_interval(currentThread, UDATA_MAX);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYxNDY3OQ=="}, "originalCommit": {"oid": "b5bc56d4c1ee750b75e1ca0a99b04f3a948a9748"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc4MzgzOQ==", "bodyText": "My complaint here was all the work to retrieve the thread, only to have it used to fetch the VM.", "url": "https://github.com/eclipse-openj9/openj9/pull/9255#discussion_r409783839", "createdAt": "2020-04-16T19:03:28Z", "author": {"login": "gacholio"}, "path": "runtime/jvmti/jvmtiCapability.c", "diffHunk": "@@ -478,8 +478,13 @@ jvmtiRelinquishCapabilities(jvmtiEnv* env,\n \n #if JAVA_SPEC_VERSION >= 11\n \t\tif (capabilities_ptr->can_generate_sampled_object_alloc_events) {\n-\t\t\t/* The default sampling interval is not changed. */\n+\t\t\tJ9VMThread *currentThread = NULL;\n \t\t\tjvmtiData->flags &= ~J9JVMTI_FLAG_SAMPLED_OBJECT_ALLOC_ENABLED;\n+\t\t\trc = getCurrentVMThread(vm, &currentThread);\n+\t\t\tif (JVMTI_ERROR_NONE == rc) {\n+\t\t\t\t/* Set sampling interval to UDATA_MAX to inform GC that sampling is not required */\n+\t\t\t\tvm->memoryManagerFunctions->j9gc_set_allocation_sampling_interval(currentThread, UDATA_MAX);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYxNDY3OQ=="}, "originalCommit": {"oid": "b5bc56d4c1ee750b75e1ca0a99b04f3a948a9748"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc4NDQyMQ==", "bodyText": "j9gc_set_allocation_sampling_interval() is intended to affect all threads. If #9254 can find a way for disableCachedAllocations() via J9JavaVM * instead of J9VMThread *, j9gc_set_allocation_sampling_interval() can be modified to take J9JavaVM * which gives clear indication that this API is for VM all threads.", "url": "https://github.com/eclipse-openj9/openj9/pull/9255#discussion_r409784421", "createdAt": "2020-04-16T19:04:40Z", "author": {"login": "JasonFengJ9"}, "path": "runtime/jvmti/jvmtiCapability.c", "diffHunk": "@@ -478,8 +478,13 @@ jvmtiRelinquishCapabilities(jvmtiEnv* env,\n \n #if JAVA_SPEC_VERSION >= 11\n \t\tif (capabilities_ptr->can_generate_sampled_object_alloc_events) {\n-\t\t\t/* The default sampling interval is not changed. */\n+\t\t\tJ9VMThread *currentThread = NULL;\n \t\t\tjvmtiData->flags &= ~J9JVMTI_FLAG_SAMPLED_OBJECT_ALLOC_ENABLED;\n+\t\t\trc = getCurrentVMThread(vm, &currentThread);\n+\t\t\tif (JVMTI_ERROR_NONE == rc) {\n+\t\t\t\t/* Set sampling interval to UDATA_MAX to inform GC that sampling is not required */\n+\t\t\t\tvm->memoryManagerFunctions->j9gc_set_allocation_sampling_interval(currentThread, UDATA_MAX);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYxNDY3OQ=="}, "originalCommit": {"oid": "b5bc56d4c1ee750b75e1ca0a99b04f3a948a9748"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc4ODkyNg==", "bodyText": "I believe this is true. However current implementation in #9254 sets flag for one thread only. It does not look correct for me. We need to double check. And it confirms GAC position - it is useful to set correct scope", "url": "https://github.com/eclipse-openj9/openj9/pull/9255#discussion_r409788926", "createdAt": "2020-04-16T19:13:03Z", "author": {"login": "dmitripivkine"}, "path": "runtime/jvmti/jvmtiCapability.c", "diffHunk": "@@ -478,8 +478,13 @@ jvmtiRelinquishCapabilities(jvmtiEnv* env,\n \n #if JAVA_SPEC_VERSION >= 11\n \t\tif (capabilities_ptr->can_generate_sampled_object_alloc_events) {\n-\t\t\t/* The default sampling interval is not changed. */\n+\t\t\tJ9VMThread *currentThread = NULL;\n \t\t\tjvmtiData->flags &= ~J9JVMTI_FLAG_SAMPLED_OBJECT_ALLOC_ENABLED;\n+\t\t\trc = getCurrentVMThread(vm, &currentThread);\n+\t\t\tif (JVMTI_ERROR_NONE == rc) {\n+\t\t\t\t/* Set sampling interval to UDATA_MAX to inform GC that sampling is not required */\n+\t\t\t\tvm->memoryManagerFunctions->j9gc_set_allocation_sampling_interval(currentThread, UDATA_MAX);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYxNDY3OQ=="}, "originalCommit": {"oid": "b5bc56d4c1ee750b75e1ca0a99b04f3a948a9748"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc5NTQ3Mg==", "bodyText": "Okay, am going to change j9gc_set_allocation_sampling_interval() to take J9JavaVM *.\n@LinHu2016 please adjust your PR & personal build.", "url": "https://github.com/eclipse-openj9/openj9/pull/9255#discussion_r409795472", "createdAt": "2020-04-16T19:24:49Z", "author": {"login": "JasonFengJ9"}, "path": "runtime/jvmti/jvmtiCapability.c", "diffHunk": "@@ -478,8 +478,13 @@ jvmtiRelinquishCapabilities(jvmtiEnv* env,\n \n #if JAVA_SPEC_VERSION >= 11\n \t\tif (capabilities_ptr->can_generate_sampled_object_alloc_events) {\n-\t\t\t/* The default sampling interval is not changed. */\n+\t\t\tJ9VMThread *currentThread = NULL;\n \t\t\tjvmtiData->flags &= ~J9JVMTI_FLAG_SAMPLED_OBJECT_ALLOC_ENABLED;\n+\t\t\trc = getCurrentVMThread(vm, &currentThread);\n+\t\t\tif (JVMTI_ERROR_NONE == rc) {\n+\t\t\t\t/* Set sampling interval to UDATA_MAX to inform GC that sampling is not required */\n+\t\t\t\tvm->memoryManagerFunctions->j9gc_set_allocation_sampling_interval(currentThread, UDATA_MAX);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYxNDY3OQ=="}, "originalCommit": {"oid": "b5bc56d4c1ee750b75e1ca0a99b04f3a948a9748"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgxNzE1NQ==", "bodyText": "sure, I am going to handle whole threads for disableCacheAllocations and monitor extensions->disableInlineAllocationForSamplingBytesGranularity for initializing _cachedAllocationsEnabled for new created thread, I am going to leave j9gc_set_allocation_sampling_interval() no change until this PR is merged.", "url": "https://github.com/eclipse-openj9/openj9/pull/9255#discussion_r409817155", "createdAt": "2020-04-16T20:05:29Z", "author": {"login": "LinHu2016"}, "path": "runtime/jvmti/jvmtiCapability.c", "diffHunk": "@@ -478,8 +478,13 @@ jvmtiRelinquishCapabilities(jvmtiEnv* env,\n \n #if JAVA_SPEC_VERSION >= 11\n \t\tif (capabilities_ptr->can_generate_sampled_object_alloc_events) {\n-\t\t\t/* The default sampling interval is not changed. */\n+\t\t\tJ9VMThread *currentThread = NULL;\n \t\t\tjvmtiData->flags &= ~J9JVMTI_FLAG_SAMPLED_OBJECT_ALLOC_ENABLED;\n+\t\t\trc = getCurrentVMThread(vm, &currentThread);\n+\t\t\tif (JVMTI_ERROR_NONE == rc) {\n+\t\t\t\t/* Set sampling interval to UDATA_MAX to inform GC that sampling is not required */\n+\t\t\t\tvm->memoryManagerFunctions->j9gc_set_allocation_sampling_interval(currentThread, UDATA_MAX);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYxNDY3OQ=="}, "originalCommit": {"oid": "b5bc56d4c1ee750b75e1ca0a99b04f3a948a9748"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE3OTMzNQ==", "bodyText": "Updated the PR to accept J9JavaVM * in j9gc_set_allocation_sampling_interval(). Keep the NULL check for currentThread within disposeEnvironment(). deleteAgentBreakpoint(J9VMThread *, J9JVMTIEnv *, J9JVMTIAgentBreakpoint *) and its associates might not need J9VMThread *currentThread, but will leave that to another PR.\n@gacholio @DanHeidinga please review.", "url": "https://github.com/eclipse-openj9/openj9/pull/9255#discussion_r410179335", "createdAt": "2020-04-17T12:07:52Z", "author": {"login": "JasonFengJ9"}, "path": "runtime/jvmti/jvmtiCapability.c", "diffHunk": "@@ -478,8 +478,13 @@ jvmtiRelinquishCapabilities(jvmtiEnv* env,\n \n #if JAVA_SPEC_VERSION >= 11\n \t\tif (capabilities_ptr->can_generate_sampled_object_alloc_events) {\n-\t\t\t/* The default sampling interval is not changed. */\n+\t\t\tJ9VMThread *currentThread = NULL;\n \t\t\tjvmtiData->flags &= ~J9JVMTI_FLAG_SAMPLED_OBJECT_ALLOC_ENABLED;\n+\t\t\trc = getCurrentVMThread(vm, &currentThread);\n+\t\t\tif (JVMTI_ERROR_NONE == rc) {\n+\t\t\t\t/* Set sampling interval to UDATA_MAX to inform GC that sampling is not required */\n+\t\t\t\tvm->memoryManagerFunctions->j9gc_set_allocation_sampling_interval(currentThread, UDATA_MAX);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYxNDY3OQ=="}, "originalCommit": {"oid": "b5bc56d4c1ee750b75e1ca0a99b04f3a948a9748"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NzA5NDA5OnYy", "diffSide": "RIGHT", "path": "runtime/jvmti/jvmtiHelpers.c", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMzo1MjoyM1rOGHO4VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNDo1NzozOVrOGHRdgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDIzNzAxMw==", "bodyText": "Why is this necessary?", "url": "https://github.com/eclipse-openj9/openj9/pull/9255#discussion_r410237013", "createdAt": "2020-04-17T13:52:23Z", "author": {"login": "gacholio"}, "path": "runtime/jvmti/jvmtiHelpers.c", "diffHunk": "@@ -174,20 +174,25 @@ disposeEnvironment(J9JVMTIEnv * j9env, UDATA freeData)\n #if JAVA_SPEC_VERSION >= 11\n \t\tif (j9env->capabilities.can_generate_sampled_object_alloc_events) {\n \t\t\tJ9JVMTI_DATA_FROM_VM(vm)->flags &= ~J9JVMTI_FLAG_SAMPLED_OBJECT_ALLOC_ENABLED;\n+\t\t\t/* Set sampling interval to UDATA_MAX to inform GC that sampling is not required */\n+\t\t\tvm->memoryManagerFunctions->j9gc_set_allocation_sampling_interval(vm, UDATA_MAX);\n \t\t}\n #endif /* JAVA_SPEC_VERSION >= 11 */\n \n \t\t/* Remove all breakpoints */\n \n-\t\tif (j9env->breakpoints != NULL) {\n+\t\tif (NULL != j9env->breakpoints) {\n \t\t\tJ9VMThread * currentThread = vm->internalVMFunctions->currentVMThread(vm);\n-\t\t\tpool_state poolState;\n-\t\t\tJ9JVMTIAgentBreakpoint * agentBreakpoint = NULL;\n-\n-\t\t\tagentBreakpoint = pool_startDo(j9env->breakpoints, &poolState);\n-\t\t\twhile (agentBreakpoint != NULL) {\n-\t\t\t\tdeleteAgentBreakpoint(currentThread, j9env, agentBreakpoint);\n-\t\t\t\tagentBreakpoint = pool_nextDo(&poolState);\n+\t\t\t/* Ignore the case that currentThread is NULL, i.e., unattached thread */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47d5475f50a13c3eb994ec5056bdfd3bfedb3e1e"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI2MDgzNw==", "bodyText": "currentThread is from vm->internalVMFunctions->currentVMThread(vm) which might return NULL as per https://github.com/eclipse/openj9/blob/5800af9452097b029c1a38fbc5cbd20011060a8b/runtime/jvmti/jvmtiHelpers.c#L502-L510\nCurrent function disposeEnvironment() doesn't return an error code, hence just call deleteAgentBreakpoint(currentThread, j9env, agentBreakpoint) when the currentThread is notNULL, and ignore the NULL case.", "url": "https://github.com/eclipse-openj9/openj9/pull/9255#discussion_r410260837", "createdAt": "2020-04-17T14:29:02Z", "author": {"login": "JasonFengJ9"}, "path": "runtime/jvmti/jvmtiHelpers.c", "diffHunk": "@@ -174,20 +174,25 @@ disposeEnvironment(J9JVMTIEnv * j9env, UDATA freeData)\n #if JAVA_SPEC_VERSION >= 11\n \t\tif (j9env->capabilities.can_generate_sampled_object_alloc_events) {\n \t\t\tJ9JVMTI_DATA_FROM_VM(vm)->flags &= ~J9JVMTI_FLAG_SAMPLED_OBJECT_ALLOC_ENABLED;\n+\t\t\t/* Set sampling interval to UDATA_MAX to inform GC that sampling is not required */\n+\t\t\tvm->memoryManagerFunctions->j9gc_set_allocation_sampling_interval(vm, UDATA_MAX);\n \t\t}\n #endif /* JAVA_SPEC_VERSION >= 11 */\n \n \t\t/* Remove all breakpoints */\n \n-\t\tif (j9env->breakpoints != NULL) {\n+\t\tif (NULL != j9env->breakpoints) {\n \t\t\tJ9VMThread * currentThread = vm->internalVMFunctions->currentVMThread(vm);\n-\t\t\tpool_state poolState;\n-\t\t\tJ9JVMTIAgentBreakpoint * agentBreakpoint = NULL;\n-\n-\t\t\tagentBreakpoint = pool_startDo(j9env->breakpoints, &poolState);\n-\t\t\twhile (agentBreakpoint != NULL) {\n-\t\t\t\tdeleteAgentBreakpoint(currentThread, j9env, agentBreakpoint);\n-\t\t\t\tagentBreakpoint = pool_nextDo(&poolState);\n+\t\t\t/* Ignore the case that currentThread is NULL, i.e., unattached thread */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDIzNzAxMw=="}, "originalCommit": {"oid": "47d5475f50a13c3eb994ec5056bdfd3bfedb3e1e"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI3NjM0MQ==", "bodyText": "Is this to fix something? I don't believe this situation could actually occur, so I'd rather see the crash than a silent no-op.", "url": "https://github.com/eclipse-openj9/openj9/pull/9255#discussion_r410276341", "createdAt": "2020-04-17T14:53:07Z", "author": {"login": "gacholio"}, "path": "runtime/jvmti/jvmtiHelpers.c", "diffHunk": "@@ -174,20 +174,25 @@ disposeEnvironment(J9JVMTIEnv * j9env, UDATA freeData)\n #if JAVA_SPEC_VERSION >= 11\n \t\tif (j9env->capabilities.can_generate_sampled_object_alloc_events) {\n \t\t\tJ9JVMTI_DATA_FROM_VM(vm)->flags &= ~J9JVMTI_FLAG_SAMPLED_OBJECT_ALLOC_ENABLED;\n+\t\t\t/* Set sampling interval to UDATA_MAX to inform GC that sampling is not required */\n+\t\t\tvm->memoryManagerFunctions->j9gc_set_allocation_sampling_interval(vm, UDATA_MAX);\n \t\t}\n #endif /* JAVA_SPEC_VERSION >= 11 */\n \n \t\t/* Remove all breakpoints */\n \n-\t\tif (j9env->breakpoints != NULL) {\n+\t\tif (NULL != j9env->breakpoints) {\n \t\t\tJ9VMThread * currentThread = vm->internalVMFunctions->currentVMThread(vm);\n-\t\t\tpool_state poolState;\n-\t\t\tJ9JVMTIAgentBreakpoint * agentBreakpoint = NULL;\n-\n-\t\t\tagentBreakpoint = pool_startDo(j9env->breakpoints, &poolState);\n-\t\t\twhile (agentBreakpoint != NULL) {\n-\t\t\t\tdeleteAgentBreakpoint(currentThread, j9env, agentBreakpoint);\n-\t\t\t\tagentBreakpoint = pool_nextDo(&poolState);\n+\t\t\t/* Ignore the case that currentThread is NULL, i.e., unattached thread */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDIzNzAxMw=="}, "originalCommit": {"oid": "47d5475f50a13c3eb994ec5056bdfd3bfedb3e1e"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI3OTI5Nw==", "bodyText": "No, this change is completely from eyeballing the code. Will restore the code then.", "url": "https://github.com/eclipse-openj9/openj9/pull/9255#discussion_r410279297", "createdAt": "2020-04-17T14:57:39Z", "author": {"login": "JasonFengJ9"}, "path": "runtime/jvmti/jvmtiHelpers.c", "diffHunk": "@@ -174,20 +174,25 @@ disposeEnvironment(J9JVMTIEnv * j9env, UDATA freeData)\n #if JAVA_SPEC_VERSION >= 11\n \t\tif (j9env->capabilities.can_generate_sampled_object_alloc_events) {\n \t\t\tJ9JVMTI_DATA_FROM_VM(vm)->flags &= ~J9JVMTI_FLAG_SAMPLED_OBJECT_ALLOC_ENABLED;\n+\t\t\t/* Set sampling interval to UDATA_MAX to inform GC that sampling is not required */\n+\t\t\tvm->memoryManagerFunctions->j9gc_set_allocation_sampling_interval(vm, UDATA_MAX);\n \t\t}\n #endif /* JAVA_SPEC_VERSION >= 11 */\n \n \t\t/* Remove all breakpoints */\n \n-\t\tif (j9env->breakpoints != NULL) {\n+\t\tif (NULL != j9env->breakpoints) {\n \t\t\tJ9VMThread * currentThread = vm->internalVMFunctions->currentVMThread(vm);\n-\t\t\tpool_state poolState;\n-\t\t\tJ9JVMTIAgentBreakpoint * agentBreakpoint = NULL;\n-\n-\t\t\tagentBreakpoint = pool_startDo(j9env->breakpoints, &poolState);\n-\t\t\twhile (agentBreakpoint != NULL) {\n-\t\t\t\tdeleteAgentBreakpoint(currentThread, j9env, agentBreakpoint);\n-\t\t\t\tagentBreakpoint = pool_nextDo(&poolState);\n+\t\t\t/* Ignore the case that currentThread is NULL, i.e., unattached thread */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDIzNzAxMw=="}, "originalCommit": {"oid": "47d5475f50a13c3eb994ec5056bdfd3bfedb3e1e"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NzM4OTYzOnYy", "diffSide": "RIGHT", "path": "runtime/jvmti/jvmtiMemory.c", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNTowNzoyNFrOGHR10Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNToyMzo0OFrOGHSd4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI4NTUyMQ==", "bodyText": "VM is fetched twice here, in two different ways. Please use a local.", "url": "https://github.com/eclipse-openj9/openj9/pull/9255#discussion_r410285521", "createdAt": "2020-04-17T15:07:24Z", "author": {"login": "gacholio"}, "path": "runtime/jvmti/jvmtiMemory.c", "diffHunk": "@@ -87,19 +87,15 @@ jvmtiSetHeapSamplingInterval(jvmtiEnv *env,\n {\n \tjvmtiError rc = JVMTI_ERROR_NONE;\n \tJ9VMThread *currentThread = NULL;\n-\tJ9JavaVM *vm = JAVAVM_FROM_ENV(env);\n \t\n \tTrc_JVMTI_jvmtiSetHeapSamplingInterval_Entry(env, samplingInterval);\n \t\n \tENSURE_PHASE_ONLOAD_OR_LIVE(env);\n \tENSURE_CAPABILITY(env, can_generate_sampled_object_alloc_events);\n \tENSURE_NON_NEGATIVE(samplingInterval);\n \n-\trc = getCurrentVMThread(vm, &currentThread);\n-\tif ((JVMTI_ERROR_NONE == rc) && (NULL != currentThread)) {\n-\t\t/* No negative samplingInterval, and there is no data lost when jint is casted to UDATA. */\n-\t\tvm->memoryManagerFunctions->j9gc_set_allocation_sampling_interval(currentThread, samplingInterval);\n-\t}\n+\t/* No negative samplingInterval, and there is no data lost when jint is casted to UDATA. */\n+\tcurrentThread->javaVM->memoryManagerFunctions->j9gc_set_allocation_sampling_interval(((J9JVMTIEnv *)env)->vm, samplingInterval);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2277a0de2afb9b2655c1d3438afab92741f9e21e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI5NTc3Ng==", "bodyText": "Fixed, please have another look.", "url": "https://github.com/eclipse-openj9/openj9/pull/9255#discussion_r410295776", "createdAt": "2020-04-17T15:23:48Z", "author": {"login": "JasonFengJ9"}, "path": "runtime/jvmti/jvmtiMemory.c", "diffHunk": "@@ -87,19 +87,15 @@ jvmtiSetHeapSamplingInterval(jvmtiEnv *env,\n {\n \tjvmtiError rc = JVMTI_ERROR_NONE;\n \tJ9VMThread *currentThread = NULL;\n-\tJ9JavaVM *vm = JAVAVM_FROM_ENV(env);\n \t\n \tTrc_JVMTI_jvmtiSetHeapSamplingInterval_Entry(env, samplingInterval);\n \t\n \tENSURE_PHASE_ONLOAD_OR_LIVE(env);\n \tENSURE_CAPABILITY(env, can_generate_sampled_object_alloc_events);\n \tENSURE_NON_NEGATIVE(samplingInterval);\n \n-\trc = getCurrentVMThread(vm, &currentThread);\n-\tif ((JVMTI_ERROR_NONE == rc) && (NULL != currentThread)) {\n-\t\t/* No negative samplingInterval, and there is no data lost when jint is casted to UDATA. */\n-\t\tvm->memoryManagerFunctions->j9gc_set_allocation_sampling_interval(currentThread, samplingInterval);\n-\t}\n+\t/* No negative samplingInterval, and there is no data lost when jint is casted to UDATA. */\n+\tcurrentThread->javaVM->memoryManagerFunctions->j9gc_set_allocation_sampling_interval(((J9JVMTIEnv *)env)->vm, samplingInterval);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI4NTUyMQ=="}, "originalCommit": {"oid": "2277a0de2afb9b2655c1d3438afab92741f9e21e"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 404, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}