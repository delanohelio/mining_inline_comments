{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1MDQ1MTk0", "number": 9014, "title": "Performance profile data parsing script ", "bodyText": "When we look at community raised performance issue on OpenJ9, we sometimes need to ask user to collect profile information. The output from the perf tool, i.e. perf.data is kernel depended. So we will need the user to process the data on their side before sending the raw data to us. This tool will parse the raw profile data and produce a text file which list the methods by number of ticks.\nI have already asked the team to ensure that all contributors are current or former IBM employees.\nThis will help further investigate issue #8353\nSigned-off-by: Guangji Beverly Xu guangjxu@ca.ibm.com", "createdAt": "2020-03-28T04:28:44Z", "url": "https://github.com/eclipse-openj9/openj9/pull/9014", "merged": true, "mergeCommit": {"oid": "d6f33681573e163382d79b4ba15655d392b9094e"}, "closed": true, "closedAt": "2020-08-11T19:11:22Z", "author": {"login": "BeverlyXu"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcSwb3eAFqTM4Mzk4NTk4Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc96jo4gBqjM2NDQzMzA5Mjk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzOTg1OTg3", "url": "https://github.com/eclipse-openj9/openj9/pull/9014#pullrequestreview-383985987", "createdAt": "2020-03-30T15:42:36Z", "commit": {"oid": "0851703b3179358c31a3f83644ea5eb441940dae"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTo0MjozNlrOF9wDXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTo0MjozNlrOF9wDXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI5NDc1MA==", "bodyText": "This script should have a copyright header.", "url": "https://github.com/eclipse-openj9/openj9/pull/9014#discussion_r400294750", "createdAt": "2020-03-30T15:42:36Z", "author": {"login": "0xdaryl"}, "path": "runtime/runtimetools/perfscripts/perf-hottest", "diffHunk": "@@ -0,0 +1,151 @@\n+#!/usr/bin/env python", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0851703b3179358c31a3f83644ea5eb441940dae"}, "originalPosition": 1}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0851703b3179358c31a3f83644ea5eb441940dae", "author": {"user": {"login": "BeverlyXu", "name": "BeverlyXu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/0851703b3179358c31a3f83644ea5eb441940dae", "committedDate": "2020-03-28T04:26:34Z", "message": "Merge branch 'bevPerfScript' of github.com:beverlyxu/openj9 into bevPerfScript"}, "afterCommit": {"oid": "667a67b07c1c53fb419afecb5e135a7a2a5191ce", "author": {"user": {"login": "BeverlyXu", "name": "BeverlyXu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/667a67b07c1c53fb419afecb5e135a7a2a5191ce", "committedDate": "2020-03-30T15:58:39Z", "message": "Adding a script to parse the result of perf.data (profile from the\ntool:perf)\n\nWhen we look at community rasied performance issue on OpenJ9, we sometimes need to ask user to collect profile information. The output from the perf tool, i.e. perf.data is kernel depended. So we will need the user to process the data on their side before sending the raw data to us. This tool will parse the raw profile data and produce a text file which list the metheds by number of ticks.\n\nAssists to close: #8353\nSigned-off-by: Guangji Beverly Xu <guangjxu@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "667a67b07c1c53fb419afecb5e135a7a2a5191ce", "author": {"user": {"login": "BeverlyXu", "name": "BeverlyXu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/667a67b07c1c53fb419afecb5e135a7a2a5191ce", "committedDate": "2020-03-30T15:58:39Z", "message": "Adding a script to parse the result of perf.data (profile from the\ntool:perf)\n\nWhen we look at community rasied performance issue on OpenJ9, we sometimes need to ask user to collect profile information. The output from the perf tool, i.e. perf.data is kernel depended. So we will need the user to process the data on their side before sending the raw data to us. This tool will parse the raw profile data and produce a text file which list the metheds by number of ticks.\n\nAssists to close: #8353\nSigned-off-by: Guangji Beverly Xu <guangjxu@ca.ibm.com>"}, "afterCommit": {"oid": "2c3c70915222d24f3c193861884c09851d094215", "author": {"user": {"login": "BeverlyXu", "name": "BeverlyXu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/2c3c70915222d24f3c193861884c09851d094215", "committedDate": "2020-03-30T16:39:30Z", "message": "A script to parse the perf tool result\n\nWhen we look at community raised performance issue on OpenJ9, we sometimes need to ask user to collect profile information. The output from the perf tool, i.e. perf.data is kernel depended. So we will need the user to process the data on their side before sending the raw data to us. This tool will parse the raw profile data and produce a text file which list the metheds by number of ticks.\n\nAssists to close: #8353\nSigned-off-by: Guangji Beverly Xu <guangjxu@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1MDQwNzEx", "url": "https://github.com/eclipse-openj9/openj9/pull/9014#pullrequestreview-385040711", "createdAt": "2020-03-31T19:30:39Z", "commit": {"oid": "2c3c70915222d24f3c193861884c09851d094215"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOTozMDozOVrOF-k_iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOTozMDozOVrOF-k_iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE2MjEyMw==", "bodyText": "This comment is not the right format for Python", "url": "https://github.com/eclipse-openj9/openj9/pull/9014#discussion_r401162123", "createdAt": "2020-03-31T19:30:39Z", "author": {"login": "andrewcraik"}, "path": "runtime/runtimetools/perfscripts/perf-hottest", "diffHunk": "@@ -0,0 +1,173 @@\n+/*******************************************************************************", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c3c70915222d24f3c193861884c09851d094215"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1MDQxMDM1", "url": "https://github.com/eclipse-openj9/openj9/pull/9014#pullrequestreview-385041035", "createdAt": "2020-03-31T19:31:07Z", "commit": {"oid": "2c3c70915222d24f3c193861884c09851d094215"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOTozMTowN1rOF-lAnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOTozMTowN1rOF-lAnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE2MjM5Ng==", "bodyText": "Can this usage be expanded with examples - I tried using this and it was not possible to figure it out from this terse instruction.", "url": "https://github.com/eclipse-openj9/openj9/pull/9014#discussion_r401162396", "createdAt": "2020-03-31T19:31:07Z", "author": {"login": "andrewcraik"}, "path": "runtime/runtimetools/perfscripts/perf-hottest", "diffHunk": "@@ -0,0 +1,173 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+\n+#!/usr/bin/env python\n+# This script assumes the perf.data is in the folder where the script is;\n+# This script also assumes perf-$pid.map files exist in /tmp\n+# Depending on if you are running on Windows or Linux, you might need to add flags like \"-G -F comm,ip,sym,symoff,dso\" after \"perf script\"\n+from __future__ import print_function\n+from collections import defaultdict, namedtuple\n+import re, sys, textwrap\n+\n+try:\n+    from builtins import hex as _builtin_hex\n+except ImportError:\n+    from __builtin__ import hex as _builtin_hex\n+\n+Sample = namedtuple('Sample', 'pc sym offs so thread')\n+\n+def main(args):\n+    if len(args) == 0:\n+        cmdline_error()\n+\n+    if args[0] in ('-h', '--help'):\n+        if len(args) == 1:\n+            usage(out=sys.stdout, status=0)\n+        else:\n+            cmdline_error()\n+\n+    attrs = set('pc sym offs so thread'.split())\n+    group_by_attr = args[0]\n+    if group_by_attr not in attrs:\n+        cmdline_error()\n+\n+    pred = lambda s: True\n+    def pred_compose(prev, attr, attr_re):\n+        return lambda s: (prev(s) and attr_re.search(str(getattr(s, attr))))\n+\n+    for arg in args[1:]:\n+        if '=' not in arg:\n+            printerr('error: filter argument not of the form <attr>=<regex>:', arg)\n+            cmdline_error()\n+\n+        cur_filter_attr, cur_filter_re_src = arg.split('=', 1)\n+        try:\n+            cur_filter_re = re.compile(cur_filter_re_src)\n+        except re.error:\n+            printerr('error: invalid regular expression:', cur_filter_re_src)\n+            cmdline_error()\n+\n+        pred = pred_compose(pred, cur_filter_attr, cur_filter_re)\n+\n+    samples = (s for s in read_samples(sys.stdin) if pred(s))\n+    counts = counts_by(group_by_attr, samples)\n+    total_count = sum(n for key, n in counts.iteritems())\n+    assert (total_count == 0) == (len(counts) == 0)\n+\n+    if len(counts) > 0:\n+        table = []\n+        for key, n in sorted(counts.iteritems(), key=lambda pair: pair[1]):\n+            pct = 100.0 * float(n) / float(total_count)\n+            table.append((n, '{0:6.2f}%'.format(pct), key))\n+\n+        hex_key_fmt = '-0{width}x'\n+        key_fmt = ''\n+        if group_by_attr == 'pc':\n+            key_fmt = hex_key_fmt\n+        elif group_by_attr == 'offs' and '?' not in counts:\n+            key_fmt = hex_key_fmt\n+        format_table(('-{width}', '', key_fmt), table)\n+\n+    print('', total_count, '        --total--')\n+\n+def cmdline_error():\n+    usage(out=sys.stderr, status=1)\n+\n+def printerr(*args):\n+    print('error:', *args, out=sys.stderr)\n+\n+def usage(out, status):\n+    msg = textwrap.dedent('''\\\n+        usage: perf script | perf-hottest <attr> [<attr>=<regex>...]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c3c70915222d24f3c193861884c09851d094215"}, "originalPosition": 100}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2c3c70915222d24f3c193861884c09851d094215", "author": {"user": {"login": "BeverlyXu", "name": "BeverlyXu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/2c3c70915222d24f3c193861884c09851d094215", "committedDate": "2020-03-30T16:39:30Z", "message": "A script to parse the perf tool result\n\nWhen we look at community raised performance issue on OpenJ9, we sometimes need to ask user to collect profile information. The output from the perf tool, i.e. perf.data is kernel depended. So we will need the user to process the data on their side before sending the raw data to us. This tool will parse the raw profile data and produce a text file which list the metheds by number of ticks.\n\nAssists to close: #8353\nSigned-off-by: Guangji Beverly Xu <guangjxu@ca.ibm.com>"}, "afterCommit": {"oid": "74a55a611b226015af89c303f27b9be558e50b2a", "author": {"user": {"login": "BeverlyXu", "name": "BeverlyXu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/74a55a611b226015af89c303f27b9be558e50b2a", "committedDate": "2020-04-02T16:50:41Z", "message": "A script to parse the perf tool result\n\nWhen we look at community raised performance issue on OpenJ9, we sometimes need to ask user to collect profile information. The output from the perf tool, i.e. perf.data is kernel depended. So we will need the user to process the data on their side before sending the raw data to us. This tool will parse the raw profile data and produce a text file which list the metheds by number of ticks.\n\nAssists to close: #8353\nSigned-off-by: Guangji Beverly Xu <guangjxu@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3MjMwNDk2", "url": "https://github.com/eclipse-openj9/openj9/pull/9014#pullrequestreview-387230496", "createdAt": "2020-04-03T12:57:47Z", "commit": {"oid": "74a55a611b226015af89c303f27b9be558e50b2a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMjo1Nzo0N1rOGAUULQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMjo1Nzo0N1rOGAUULQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk4NjAyOQ==", "bodyText": "Can this also list what these attributes mean?", "url": "https://github.com/eclipse-openj9/openj9/pull/9014#discussion_r402986029", "createdAt": "2020-04-03T12:57:47Z", "author": {"login": "andrewcraik"}, "path": "runtime/runtimetools/perfscripts/perf-hottest", "diffHunk": "@@ -0,0 +1,177 @@\n+#!/usr/bin/env python\n+\n+# ------------------------------------------------------------------------\n+ # Copyright (c) 2020, 2020 IBM Corp. and others\n+ #\n+ # This program and the accompanying materials are made available under\n+ # the terms of the Eclipse Public License 2.0 which accompanies this\n+ # distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ # or the Apache License, Version 2.0 which accompanies this distribution and\n+ # is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ #\n+ # This Source Code may also be made available under the following\n+ # Secondary Licenses when the conditions for such availability set\n+ # forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ # General Public License, version 2 with the GNU Classpath\n+ # Exception [1] and GNU General Public License, version 2 with the\n+ # OpenJDK Assembly Exception [2].\n+ #\n+ # [1] https://www.gnu.org/software/classpath/license.html\n+ # [2] http://openjdk.java.net/legal/assembly-exception.html\n+ #\n+ # SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+# ---------------------------------------------------------------------------\n+\n+# This script assumes the perf.data is in the folder where the script is;\n+# This script also assumes perf-$pid.map files exist in /tmp\n+# There is a known bug with the perf tool that make this script not usable. Details: https://bugzilla.kernel.org/show_bug.cgi?id=203811\n+\n+from __future__ import print_function\n+from collections import defaultdict, namedtuple\n+import re, sys, textwrap\n+\n+try:\n+    from builtins import hex as _builtin_hex\n+except ImportError:\n+    from __builtin__ import hex as _builtin_hex\n+\n+Sample = namedtuple('Sample', 'pc sym offs so thread')\n+\n+def main(args):\n+    if len(args) == 0:\n+        cmdline_error()\n+\n+    if args[0] in ('-h', '--help'):\n+        if len(args) == 1:\n+            usage(out=sys.stdout, status=0)\n+        else:\n+            cmdline_error()\n+\n+    attrs = set('pc sym offs so thread'.split())\n+    group_by_attr = args[0]\n+    if group_by_attr not in attrs:\n+        cmdline_error()\n+\n+    pred = lambda s: True\n+    def pred_compose(prev, attr, attr_re):\n+        return lambda s: (prev(s) and attr_re.search(str(getattr(s, attr))))\n+\n+    for arg in args[1:]:\n+        if '=' not in arg:\n+            printerr('error: filter argument not of the form <attr>=<regex>:', arg)\n+            cmdline_error()\n+\n+        cur_filter_attr, cur_filter_re_src = arg.split('=', 1)\n+        try:\n+            cur_filter_re = re.compile(cur_filter_re_src)\n+        except re.error:\n+            printerr('error: invalid regular expression:', cur_filter_re_src)\n+            cmdline_error()\n+\n+        pred = pred_compose(pred, cur_filter_attr, cur_filter_re)\n+\n+    samples = (s for s in read_samples(sys.stdin) if pred(s))\n+    counts = counts_by(group_by_attr, samples)\n+    total_count = sum(n for key, n in counts.iteritems())\n+    assert (total_count == 0) == (len(counts) == 0)\n+\n+    if len(counts) > 0:\n+        table = []\n+        for key, n in sorted(counts.iteritems(), key=lambda pair: pair[1]):\n+            pct = 100.0 * float(n) / float(total_count)\n+            table.append((n, '{0:6.2f}%'.format(pct), key))\n+\n+        hex_key_fmt = '-0{width}x'\n+        key_fmt = ''\n+        if group_by_attr == 'pc':\n+            key_fmt = hex_key_fmt\n+        elif group_by_attr == 'offs' and '?' not in counts:\n+            key_fmt = hex_key_fmt\n+        format_table(('-{width}', '', key_fmt), table)\n+\n+    print('', total_count, '        --total--')\n+\n+def cmdline_error():\n+    usage(out=sys.stderr, status=1)\n+\n+def printerr(*args):\n+    print('error:', *args, out=sys.stderr)\n+\n+def usage(out, status):\n+    msg = textwrap.dedent('''\\\n+        usage: perf script | perf-hottest <attr> [<attr>=<regex>...]\n+        Attributes: pc, sym, offs, so, thread", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74a55a611b226015af89c303f27b9be558e50b2a"}, "originalPosition": 103}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3MjMxNDk2", "url": "https://github.com/eclipse-openj9/openj9/pull/9014#pullrequestreview-387231496", "createdAt": "2020-04-03T12:59:09Z", "commit": {"oid": "74a55a611b226015af89c303f27b9be558e50b2a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMjo1OTowOVrOGAUXjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMjo1OTowOVrOGAUXjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk4Njg5NA==", "bodyText": "Is there any way to check the perf.data or perf --version or something to see if it is affected by this bug and report it to the user rather than leaving it as a comment in the script - this has a real potential to cause a lot of confusion in the field.", "url": "https://github.com/eclipse-openj9/openj9/pull/9014#discussion_r402986894", "createdAt": "2020-04-03T12:59:09Z", "author": {"login": "andrewcraik"}, "path": "runtime/runtimetools/perfscripts/perf-hottest", "diffHunk": "@@ -0,0 +1,177 @@\n+#!/usr/bin/env python\n+\n+# ------------------------------------------------------------------------\n+ # Copyright (c) 2020, 2020 IBM Corp. and others\n+ #\n+ # This program and the accompanying materials are made available under\n+ # the terms of the Eclipse Public License 2.0 which accompanies this\n+ # distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ # or the Apache License, Version 2.0 which accompanies this distribution and\n+ # is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ #\n+ # This Source Code may also be made available under the following\n+ # Secondary Licenses when the conditions for such availability set\n+ # forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ # General Public License, version 2 with the GNU Classpath\n+ # Exception [1] and GNU General Public License, version 2 with the\n+ # OpenJDK Assembly Exception [2].\n+ #\n+ # [1] https://www.gnu.org/software/classpath/license.html\n+ # [2] http://openjdk.java.net/legal/assembly-exception.html\n+ #\n+ # SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+# ---------------------------------------------------------------------------\n+\n+# This script assumes the perf.data is in the folder where the script is;\n+# This script also assumes perf-$pid.map files exist in /tmp\n+# There is a known bug with the perf tool that make this script not usable. Details: https://bugzilla.kernel.org/show_bug.cgi?id=203811", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74a55a611b226015af89c303f27b9be558e50b2a"}, "originalPosition": 27}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "74a55a611b226015af89c303f27b9be558e50b2a", "author": {"user": {"login": "BeverlyXu", "name": "BeverlyXu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/74a55a611b226015af89c303f27b9be558e50b2a", "committedDate": "2020-04-02T16:50:41Z", "message": "A script to parse the perf tool result\n\nWhen we look at community raised performance issue on OpenJ9, we sometimes need to ask user to collect profile information. The output from the perf tool, i.e. perf.data is kernel depended. So we will need the user to process the data on their side before sending the raw data to us. This tool will parse the raw profile data and produce a text file which list the metheds by number of ticks.\n\nAssists to close: #8353\nSigned-off-by: Guangji Beverly Xu <guangjxu@ca.ibm.com>"}, "afterCommit": {"oid": "7f91518109a73c77c1fd109d22cc8bf9babf00c8", "author": {"user": {"login": "BeverlyXu", "name": "BeverlyXu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/7f91518109a73c77c1fd109d22cc8bf9babf00c8", "committedDate": "2020-04-03T21:20:26Z", "message": "A script to parse the perf tool result\n\nWhen we look at community raised performance issue on OpenJ9, we sometimes need to ask user to collect profile information. The output from the perf tool, i.e. perf.data is kernel depended. So we will need the user to process the data on their side before sending the raw data to us. This tool will parse the raw profile data and produce a text file which list the metheds by number of ticks.\n\nAssists to close: #8353\nSigned-off-by: Guangji Beverly Xu <guangjxu@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7f91518109a73c77c1fd109d22cc8bf9babf00c8", "author": {"user": {"login": "BeverlyXu", "name": "BeverlyXu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/7f91518109a73c77c1fd109d22cc8bf9babf00c8", "committedDate": "2020-04-03T21:20:26Z", "message": "A script to parse the perf tool result\n\nWhen we look at community raised performance issue on OpenJ9, we sometimes need to ask user to collect profile information. The output from the perf tool, i.e. perf.data is kernel depended. So we will need the user to process the data on their side before sending the raw data to us. This tool will parse the raw profile data and produce a text file which list the metheds by number of ticks.\n\nAssists to close: #8353\nSigned-off-by: Guangji Beverly Xu <guangjxu@ca.ibm.com>"}, "afterCommit": {"oid": "6a9e43f10806ae5526e24b0ea32560f8c173f8bd", "author": {"user": {"login": "BeverlyXu", "name": "BeverlyXu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/6a9e43f10806ae5526e24b0ea32560f8c173f8bd", "committedDate": "2020-06-23T05:51:10Z", "message": "A script to parse the perf tool result\n\nWhen we look at community raised performance issue on OpenJ9, we sometimes need to ask user to collect profile information. The output from the perf tool, i.e. perf.data is kernel depended. So we will need the user to process the data on their side before sending the raw data to us. This tool will parse the raw profile data and produce a text file which list the metheds by number of ticks.\n\nAssists to close: #8353\nSigned-off-by: Guangji Beverly Xu <guangjxu@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MDU5Njkz", "url": "https://github.com/eclipse-openj9/openj9/pull/9014#pullrequestreview-455059693", "createdAt": "2020-07-24T17:23:12Z", "commit": {"oid": "6a9e43f10806ae5526e24b0ea32560f8c173f8bd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNzoyMzoxMlrOG23qCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNzoyMzoxMlrOG23qCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE4ODE2OA==", "bodyText": "Code looks fine - could you just add some comment documentation on what this tool does and what the different modes are? With that I think this should be good to go.", "url": "https://github.com/eclipse-openj9/openj9/pull/9014#discussion_r460188168", "createdAt": "2020-07-24T17:23:12Z", "author": {"login": "andrewcraik"}, "path": "runtime/runtimetools/perfscripts/perf-hottest", "diffHunk": "@@ -0,0 +1,210 @@\n+#!/usr/bin/env python\n+\n+# ------------------------------------------------------------------------\n+ # Copyright (c) 2020, 2020 IBM Corp. and others\n+ #\n+ # This program and the accompanying materials are made available under\n+ # the terms of the Eclipse Public License 2.0 which accompanies this\n+ # distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ # or the Apache License, Version 2.0 which accompanies this distribution and\n+ # is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ #\n+ # This Source Code may also be made available under the following\n+ # Secondary Licenses when the conditions for such availability set\n+ # forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ # General Public License, version 2 with the GNU Classpath\n+ # Exception [1] and GNU General Public License, version 2 with the\n+ # OpenJDK Assembly Exception [2].\n+ #\n+ # [1] https://www.gnu.org/software/classpath/license.html\n+ # [2] http://openjdk.java.net/legal/assembly-exception.html\n+ #\n+ # SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+# ---------------------------------------------------------------------------\n+\n+# This script checks to make sure the following conditions:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a9e43f10806ae5526e24b0ea32560f8c173f8bd"}, "originalPosition": 25}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6a9e43f10806ae5526e24b0ea32560f8c173f8bd", "author": {"user": {"login": "BeverlyXu", "name": "BeverlyXu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/6a9e43f10806ae5526e24b0ea32560f8c173f8bd", "committedDate": "2020-06-23T05:51:10Z", "message": "A script to parse the perf tool result\n\nWhen we look at community raised performance issue on OpenJ9, we sometimes need to ask user to collect profile information. The output from the perf tool, i.e. perf.data is kernel depended. So we will need the user to process the data on their side before sending the raw data to us. This tool will parse the raw profile data and produce a text file which list the metheds by number of ticks.\n\nAssists to close: #8353\nSigned-off-by: Guangji Beverly Xu <guangjxu@ca.ibm.com>"}, "afterCommit": {"oid": "d660dc522f1d863498605a06acbe934ddecc3514", "author": {"user": {"login": "BeverlyXu", "name": "BeverlyXu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/d660dc522f1d863498605a06acbe934ddecc3514", "committedDate": "2020-08-11T04:27:09Z", "message": "A script to parse the perf tool result\n\nWhen we look at community raised performance issue on OpenJ9, we sometimes need to ask user to collect profile information. The output from the perf tool, i.e. perf.data is kernel depended. So we will need the user to process the data on their side before sending the raw data to us. This tool will parse the raw profile data and produce a text file which list the metheds by number of ticks.\n\nAssists to close: #8353\nSigned-off-by: Guangji Beverly Xu <guangjxu@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d660dc522f1d863498605a06acbe934ddecc3514", "author": {"user": {"login": "BeverlyXu", "name": "BeverlyXu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/d660dc522f1d863498605a06acbe934ddecc3514", "committedDate": "2020-08-11T04:27:09Z", "message": "A script to parse the perf tool result\n\nWhen we look at community raised performance issue on OpenJ9, we sometimes need to ask user to collect profile information. The output from the perf tool, i.e. perf.data is kernel depended. So we will need the user to process the data on their side before sending the raw data to us. This tool will parse the raw profile data and produce a text file which list the metheds by number of ticks.\n\nAssists to close: #8353\nSigned-off-by: Guangji Beverly Xu <guangjxu@ca.ibm.com>"}, "afterCommit": {"oid": "67e1467257f0b5f4a92f90118ef6f94100eaf470", "author": {"user": {"login": "BeverlyXu", "name": "BeverlyXu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/67e1467257f0b5f4a92f90118ef6f94100eaf470", "committedDate": "2020-08-11T16:12:39Z", "message": "A script to parse the perf tool result\n\nWhen we look at community raised performance issue on OpenJ9, we sometimes need to ask user to collect profile information. The output from the perf tool, i.e. perf.data is kernel depended. So we will need the user to process the data on their side before sending the raw data to us. This tool will parse the raw profile data and produce a text file which list the metheds by number of ticks.\n\nAssists to close: #8353\nSigned-off-by: Guangji Beverly Xu <guangjxu@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1MjU2Mzg5", "url": "https://github.com/eclipse-openj9/openj9/pull/9014#pullrequestreview-465256389", "createdAt": "2020-08-11T16:57:26Z", "commit": {"oid": "67e1467257f0b5f4a92f90118ef6f94100eaf470"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6bcdb85c188a4eedda69e1c977ace45481977ab", "author": {"user": {"login": "BeverlyXu", "name": "BeverlyXu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/c6bcdb85c188a4eedda69e1c977ace45481977ab", "committedDate": "2020-08-11T17:48:50Z", "message": "A script to parse the perf tool result\n\nWhen we look at community raised performance issue on OpenJ9, we sometimes need to ask user to collect profile information. The output from the perf tool, i.e. perf.data is kernel depended. So we will need the user to process the data on their side before sending the raw data to us. This tool will parse the raw profile data and produce a text file which list the metheds by number of ticks.\n\nAssists to close: #8353\nSigned-off-by: Guangji Beverly Xu <guangjxu@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "67e1467257f0b5f4a92f90118ef6f94100eaf470", "author": {"user": {"login": "BeverlyXu", "name": "BeverlyXu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/67e1467257f0b5f4a92f90118ef6f94100eaf470", "committedDate": "2020-08-11T16:12:39Z", "message": "A script to parse the perf tool result\n\nWhen we look at community raised performance issue on OpenJ9, we sometimes need to ask user to collect profile information. The output from the perf tool, i.e. perf.data is kernel depended. So we will need the user to process the data on their side before sending the raw data to us. This tool will parse the raw profile data and produce a text file which list the metheds by number of ticks.\n\nAssists to close: #8353\nSigned-off-by: Guangji Beverly Xu <guangjxu@ca.ibm.com>"}, "afterCommit": {"oid": "c6bcdb85c188a4eedda69e1c977ace45481977ab", "author": {"user": {"login": "BeverlyXu", "name": "BeverlyXu"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/c6bcdb85c188a4eedda69e1c977ace45481977ab", "committedDate": "2020-08-11T17:48:50Z", "message": "A script to parse the perf tool result\n\nWhen we look at community raised performance issue on OpenJ9, we sometimes need to ask user to collect profile information. The output from the perf tool, i.e. perf.data is kernel depended. So we will need the user to process the data on their side before sending the raw data to us. This tool will parse the raw profile data and produce a text file which list the metheds by number of ticks.\n\nAssists to close: #8353\nSigned-off-by: Guangji Beverly Xu <guangjxu@ca.ibm.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1343, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}