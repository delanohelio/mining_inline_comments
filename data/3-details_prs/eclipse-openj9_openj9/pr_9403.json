{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwODM0Mzcz", "number": 9403, "title": "Cache result of class chain validation", "bodyText": "Depends on eclipse/omr#5143\nThis PR introduces an optimization to the Class Chain Validation performed when loading an AOT compiled body from the SCC. For specifics on the Class Chain see [1]. The high level idea is that the Class Chain does not validate visibility, but rather is used to validate that the shape of the class seen in the previous run is the same in the current run. It does so by comparing the chain of romclasses that make up its inheritance and interface hierarchy. Therefore, once the class chain validation has succeeded for a given class, that remains true for the remainder of the run and there is no need to run class chain validations again.\nCurrently, class chain validations are implemented as validation records, which exist per method. Therefore, a class could have its class chain validated several times. This PR caches the result of a validation. It does so by maintaining two bit vectors (one for success and one for failure). The key of the bit vector is the offset of the romclass in the SCC.\nThe caching is guarded by the option -Xaot:enableClassChainValidationCaching (hence the dependence on OMR).\nThis PR is motivated by changes in validation that will likely be required when Project Valhalla lands. With flattened types, the class chains will likely need to be modified. Additionally the time required to validate flattened types will likely be much higher.\nfyi @andrewcraik\n\nQuestions\n@mpirvu Each of the bit vectors are initialized with 1024*1204 bits. This equates to 128KiB each, so a total of 256KiB. The bit vectors are growable, but I chose 1024*1024 as a reasonable soft upper bound of the number classes that would be loaded in most cases. Do you think that initial number is too big and do you think this will have an impact on footprint when enabled?\n@mstoodle I know that if a class chain validation succeeds, that is now an invariant during the run. However, if a class chain validation fails, is it possible for it to succeed later? I don't think it can but I wanted to double check with you.\n@andrewcraik how does HCR affect a romclass? When a class gets redefined, does it get a different romclass?\n\nLocal Tests\nSuccessful validation\nDefault:\nTR_J9SC:classMatchesCachedVersion class 0000000000805500 java/lang/String\nTR_J9SC:        found chain: 00007FCB62722670 with length 48\nTR_J9SC:                Examining romclass 00007FCB514695C0 (java/lang/String) offset 431312, comparing to 431312\nTR_J9SC:                Examining romclass 00007FCB51459000 (java/lang/Object) offset 364304, comparing to 364304\nTR_J9SC:                Examining romclass 00007FCB51468780 (java/io/Serializable) offset 427664, comparing to 427664\nTR_J9SC:                Examining romclass 00007FCB51471FD8 (java/lang/Comparable) offset 466664, comparing to 466664\nTR_J9SC:                Examining romclass 00007FCB514720F0 (java/lang/CharSequence) offset 466944, comparing to 466944\nTR_J9SC:        Match!  return true\n...\nTR_J9SC:classMatchesCachedVersion class 0000000000805500 java/lang/String\nTR_J9SC:        found chain: 00007FCB62722670 with length 48\nTR_J9SC:                Examining romclass 00007FCB514695C0 (java/lang/String) offset 431312, comparing to 431312\nTR_J9SC:                Examining romclass 00007FCB51459000 (java/lang/Object) offset 364304, comparing to 364304\nTR_J9SC:                Examining romclass 00007FCB51468780 (java/io/Serializable) offset 427664, comparing to 427664\nTR_J9SC:                Examining romclass 00007FCB51471FD8 (java/lang/Comparable) offset 466664, comparing to 466664\nTR_J9SC:                Examining romclass 00007FCB514720F0 (java/lang/CharSequence) offset 466944, comparing to 466944\nTR_J9SC:        Match!  return true\n\nenableClassChainValidationCaching:\nTR_J9SC:classMatchesCachedVersion class 000000000222C500 java/lang/String\nTR_J9SC:        found chain: 00007F21BE722670 with length 48\nTR_J9SC:                Examining romclass 00007F21AD4695C0 (java/lang/String) offset 431312, comparing to 431312\nTR_J9SC:                Examining romclass 00007F21AD459000 (java/lang/Object) offset 364304, comparing to 364304\nTR_J9SC:                Examining romclass 00007F21AD468780 (java/io/Serializable) offset 427664, comparing to 427664\nTR_J9SC:                Examining romclass 00007F21AD471FD8 (java/lang/Comparable) offset 466664, comparing to 466664\nTR_J9SC:                Examining romclass 00007F21AD4720F0 (java/lang/CharSequence) offset 466944, comparing to 466944\nTR_J9SC:        Match!  return true\n...\nTR_J9SC:classMatchesCachedVersion class 000000000222C500 java/lang/String\nTR_J9SC:        cached result: validation succeeded\n\nUnsuccessful validation\nFailure simulated by doing:\ndiff --git a/runtime/compiler/env/J9SharedCache.cpp b/runtime/compiler/env/J9SharedCache.cpp\nindex 6b73cc91d6..a8b8b37916 100644\n--- a/runtime/compiler/env/J9SharedCache.cpp\n+++ b/runtime/compiler/env/J9SharedCache.cpp\n@@ -960,6 +960,7 @@ TR_J9SharedCache::classMatchesCachedVersion(J9Class *clazz, UDATA *chainData)\n \n    /* Perform class chain validation */\n    bool validationSucceeded = validateClassChain(romClass, clazz, chainPtr, chainEnd);\n+   validationSucceeded = false;\n    if (validationSucceeded)\n       LOG(1, \"\\tMatch!  return true\\n\");\n\nDefault:\nTR_J9SC:classMatchesCachedVersion class 0000000000BEC500 java/lang/String\nTR_J9SC:        found chain: 00007F09C27224E4 with length 48\nTR_J9SC:                Examining romclass 00007F09B14695C0 (java/lang/String) offset 431312, comparing to 431312\nTR_J9SC:                Examining romclass 00007F09B1459000 (java/lang/Object) offset 364304, comparing to 364304\nTR_J9SC:                Examining romclass 00007F09B1468780 (java/io/Serializable) offset 427664, comparing to 427664\nTR_J9SC:                Examining romclass 00007F09B1471FD8 (java/lang/Comparable) offset 466664, comparing to 466664\nTR_J9SC:                Examining romclass 00007F09B14720F0 (java/lang/CharSequence) offset 466944, comparing to 466944\n                applyRelocation: could not verify class\n...\nTR_J9SC:classMatchesCachedVersion class 0000000000BEC500 java/lang/String\nTR_J9SC:        found chain: 00007F09C27224E4 with length 48\nTR_J9SC:                Examining romclass 00007F09B14695C0 (java/lang/String) offset 431312, comparing to 431312\nTR_J9SC:                Examining romclass 00007F09B1459000 (java/lang/Object) offset 364304, comparing to 364304\nTR_J9SC:                Examining romclass 00007F09B1468780 (java/io/Serializable) offset 427664, comparing to 427664\nTR_J9SC:                Examining romclass 00007F09B1471FD8 (java/lang/Comparable) offset 466664, comparing to 466664\nTR_J9SC:                Examining romclass 00007F09B14720F0 (java/lang/CharSequence) offset 466944, comparing to 466944\n                applyRelocation: could not verify class\n\nenableClassChainValidationCaching:\nTR_J9SC:classMatchesCachedVersion class 00000000014F2500 java/lang/String\nTR_J9SC:        found chain: 00007FB31A722670 with length 48\nTR_J9SC:                Examining romclass 00007FB3094695C0 (java/lang/String) offset 431312, comparing to 431312\nTR_J9SC:                Examining romclass 00007FB309459000 (java/lang/Object) offset 364304, comparing to 364304\nTR_J9SC:                Examining romclass 00007FB309468780 (java/io/Serializable) offset 427664, comparing to 427664\nTR_J9SC:                Examining romclass 00007FB309471FD8 (java/lang/Comparable) offset 466664, comparing to 466664\nTR_J9SC:                Examining romclass 00007FB3094720F0 (java/lang/CharSequence) offset 466944, comparing to 466944\n                preparePrivateData: clazz 0000000000000000\n...\nTR_J9SC:classMatchesCachedVersion class 00000000014F2500 java/lang/String\nTR_J9SC:        cached result: validation failed\n\n\n[1] https://github.com/eclipse/openj9/blob/master/doc/compiler/aot/ClassChains.md", "createdAt": "2020-04-29T16:56:16Z", "url": "https://github.com/eclipse-openj9/openj9/pull/9403", "merged": true, "mergeCommit": {"oid": "f9e5eed21fc129ad37c6600464dc41566a23127d"}, "closed": true, "closedAt": "2020-05-08T18:55:49Z", "author": {"login": "dsouzai"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABccc-WCAFqTQwMjkxNDY4Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABce-k_uAFqTQwNzU1ODg3MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyOTE0Njgy", "url": "https://github.com/eclipse-openj9/openj9/pull/9403#pullrequestreview-402914682", "createdAt": "2020-04-29T18:07:55Z", "commit": {"oid": "17ce825fd2b8a6314b59b6a452044e89745d64d2"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxODowNzo1NVrOGOK5PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxODozMDozMVrOGOLtFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUxMTc0MQ==", "bodyText": "I haven't checked, but if these vectors are only initialized during aboutToBootstrap, then the monitor is not needed because aboutToBootstrap is only executed by a single thread before any Java code can run.", "url": "https://github.com/eclipse-openj9/openj9/pull/9403#discussion_r417511741", "createdAt": "2020-04-29T18:07:55Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/env/J9SharedCache.cpp", "diffHunk": "@@ -96,6 +103,15 @@ TR_YesNoMaybe TR_J9SharedCache::isSharedCacheDisabledBecauseFull(TR::Compilation\n    return _sharedCacheDisabledBecauseFull;\n    }\n \n+bool\n+TR_J9SharedCache::initClassChainValidationBitVectors()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17ce825fd2b8a6314b59b6a452044e89745d64d2"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUxNDA4Nw==", "bodyText": "Nitpick: space before index++", "url": "https://github.com/eclipse-openj9/openj9/pull/9403#discussion_r417514087", "createdAt": "2020-04-29T18:12:01Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/env/J9SharedCache.cpp", "diffHunk": "@@ -813,76 +829,155 @@ TR_J9SharedCache::findChainForClass(J9Class *clazz, const char *key, uint32_t ke\n    return chainForClass;\n    }\n \n+bool\n+TR_J9SharedCache::validateSuperClassesInClassChain(J9Class *clazz, UDATA * & chainPtr, UDATA *chainEnd)\n+   {\n+   int32_t numSuperclasses = TR::Compiler->cls.classDepthOf(fe()->convertClassPtrToClassOffset(clazz));\n+   for (int32_t index=0; index < numSuperclasses;index++)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17ce825fd2b8a6314b59b6a452044e89745d64d2"}, "originalPosition": 204}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUxNDg2MQ==", "bodyText": "Let's cache fe()->convertClassPtrToClassOffset(clazz) and take it out of the loop", "url": "https://github.com/eclipse-openj9/openj9/pull/9403#discussion_r417514861", "createdAt": "2020-04-29T18:13:21Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/env/J9SharedCache.cpp", "diffHunk": "@@ -813,76 +829,155 @@ TR_J9SharedCache::findChainForClass(J9Class *clazz, const char *key, uint32_t ke\n    return chainForClass;\n    }\n \n+bool\n+TR_J9SharedCache::validateSuperClassesInClassChain(J9Class *clazz, UDATA * & chainPtr, UDATA *chainEnd)\n+   {\n+   int32_t numSuperclasses = TR::Compiler->cls.classDepthOf(fe()->convertClassPtrToClassOffset(clazz));\n+   for (int32_t index=0; index < numSuperclasses;index++)\n+      {\n+      J9ROMClass *romClass = TR::Compiler->cls.romClassOfSuperClass(fe()->convertClassPtrToClassOffset(clazz), index);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17ce825fd2b8a6314b59b6a452044e89745d64d2"}, "originalPosition": 206}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUyMjc2OQ==", "bodyText": "I forgot when codert_onload is executed, but it would be nice to create this monitor only if needed, thus maybe we should move this inside initClassChainValidationBitVectors()", "url": "https://github.com/eclipse-openj9/openj9/pull/9403#discussion_r417522769", "createdAt": "2020-04-29T18:26:40Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/runtime/codertinit.cpp", "diffHunk": "@@ -216,6 +217,13 @@ J9JITConfig * codert_onload(J9JavaVM * javaVM)\n          goto _abort;\n       }\n \n+   /* initialize classChainValidationMutex */\n+   if (!classChainValidationMutex)\n+      {\n+      if (!(classChainValidationMutex = TR::Monitor::create(\"JIT-ClassChainValidationMutex\")))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17ce825fd2b8a6314b59b6a452044e89745d64d2"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUyNTAxMg==", "bodyText": "Each class offset is represented by a bit inside the bit-vector. You have 1 million bits (initial size) which means you can cover (more or less) an SCC size of 1MB (ignoring for a moment that classes are stored in the beginning of the SCC).\nIf a class is always aligned on an 8-byte boundary you could do (classOffsetInCache >> 3) to expand your coverage", "url": "https://github.com/eclipse-openj9/openj9/pull/9403#discussion_r417525012", "createdAt": "2020-04-29T18:30:31Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/env/J9SharedCache.cpp", "diffHunk": "@@ -813,76 +829,155 @@ TR_J9SharedCache::findChainForClass(J9Class *clazz, const char *key, uint32_t ke\n    return chainForClass;\n    }\n \n+bool\n+TR_J9SharedCache::validateSuperClassesInClassChain(J9Class *clazz, UDATA * & chainPtr, UDATA *chainEnd)\n+   {\n+   int32_t numSuperclasses = TR::Compiler->cls.classDepthOf(fe()->convertClassPtrToClassOffset(clazz));\n+   for (int32_t index=0; index < numSuperclasses;index++)\n+      {\n+      J9ROMClass *romClass = TR::Compiler->cls.romClassOfSuperClass(fe()->convertClassPtrToClassOffset(clazz), index);\n+      if (!romclassMatchesCachedVersion(romClass, chainPtr, chainEnd))\n+         {\n+         LOG(1, \"\\tClass in hierarchy did not match, returning false\\n\");\n+         return false;\n+         }\n+      }\n+   return true;\n+   }\n+\n+bool\n+TR_J9SharedCache::validateInterfacesInClassChain(J9Class *clazz, UDATA * & chainPtr, UDATA *chainEnd)\n+   {\n+   J9ITable *interfaceElement = TR::Compiler->cls.iTableOf(fe()->convertClassPtrToClassOffset(clazz));\n+   while (interfaceElement)\n+      {\n+      J9ROMClass * romClass = TR::Compiler->cls.iTableRomClass(interfaceElement);\n+      if (!romclassMatchesCachedVersion(romClass, chainPtr, chainEnd))\n+         {\n+         LOG(1, \"\\tInterface class did not match, returning false\\n\");\n+         return false;\n+         }\n+      interfaceElement = TR::Compiler->cls.iTableNext(interfaceElement);\n+      }\n+   return true;\n+   }\n+\n+bool\n+TR_J9SharedCache::validateClassChain(J9ROMClass *romClass, J9Class *clazz, UDATA * & chainPtr, UDATA *chainEnd)\n+   {\n+   bool validationSucceeded = false;\n+\n+   if (!romclassMatchesCachedVersion(romClass, chainPtr, chainEnd))\n+      {\n+      LOG(1, \"\\tClass did not match, returning false\\n\");\n+      }\n+   else if (!validateSuperClassesInClassChain(clazz, chainPtr, chainEnd))\n+      {\n+      LOG(1, \"\\tClass in hierarchy did not match, returning false\\n\");\n+      }\n+   else if (!validateInterfacesInClassChain(clazz, chainPtr, chainEnd))\n+      {\n+      LOG(1, \"\\tInterface class did not match, returning false\\n\");\n+      }\n+   else if (chainPtr != chainEnd)\n+      {\n+      LOG(1, \"\\tfinished classes and interfaces, but not at chain end, returning false\\n\");\n+      }\n+   else\n+      {\n+      validationSucceeded = true;\n+      }\n+\n+   return validationSucceeded;\n+   }\n+\n bool\n TR_J9SharedCache::classMatchesCachedVersion(J9Class *clazz, UDATA *chainData)\n    {\n    J9ROMClass *romClass = TR::Compiler->cls.romClassOf(fe()->convertClassPtrToClassOffset(clazz));\n    J9UTF8 * className = J9ROMCLASS_CLASSNAME(romClass);\n-   LOG(5, { log(\"classMatchesCachedVersion class %p %.*s\\n\", clazz, J9UTF8_LENGTH(className), J9UTF8_DATA(className)); });\n+   LOG(1, \"classMatchesCachedVersion class %p %.*s\\n\", clazz, J9UTF8_LENGTH(className), J9UTF8_DATA(className));\n \n    uintptr_t classOffsetInCache;\n+\n+   /* If the pointer isn't the SCC, then return false immmediately\n+    * as the bit vectors hold offsets into the SCC of romclasses\n+    */\n    if (!isPointerInSharedCache(romClass, &classOffsetInCache))\n       {\n-      LOG(5, { log(\"\\tclass not in shared cache, returning false\\n\"); });\n+      LOG(1, \"\\tclass not in shared cache, returning false\\n\");\n       return false;\n       }\n \n+   /* Check if the validation of the class chain was previously\n+    * performed; if so, return the result of that validation\n+    */\n+   if (TR::Options::getAOTCmdLineOptions()->getOption(TR_EnableClassChainValidationCaching))\n+      {\n+      OMR::CriticalSection checkBitVectors(classChainValidationMutex);\n+      if (_classChainValidationFailed->isSet(classOffsetInCache))\n+         {\n+         LOG(1, \"\\tcached result: validation failed\\n\");\n+         return false;\n+         }\n+      if (_classChainValidationSucceeded->isSet(classOffsetInCache))\n+         {\n+         LOG(1, \"\\tcached result: validation succeeded\\n\");\n+         return true;\n+         }\n+      }\n+\n+   /* If the chainData passed in is NULL, try to find it in the SCC\n+    * using the romclass\n+    */\n    if (chainData == NULL)\n       {\n       char key[17]; // longest possible key length is way less than 16 digits\n       uint32_t keyLength;\n       createClassKey(classOffsetInCache, key, keyLength);\n-      LOG(9, { log(\"\\tno chain specific, so looking up for key %.*s\\n\", keyLength, key); });\n+      LOG(3, \"\\tno chain specific, so looking up for key %.*s\\n\", keyLength, key);\n       chainData = findChainForClass(clazz, key, keyLength);\n-      if (chainData == NULL)\n+      }\n+\n+   /* If the chainData is still NULL, add the romclas offset to\n+    * the _classChainValidationFailed bit vector\n+    */\n+   if (chainData == NULL)\n+      {\n+      LOG(1, \"\\tno stored chain, returning false\\n\");\n+      if (TR::Options::getAOTCmdLineOptions()->getOption(TR_EnableClassChainValidationCaching))\n          {\n-         LOG(5, { log(\"\\tno stored chain, returning false\\n\"); });\n-         return false;\n+         OMR::CriticalSection noStoredChain(classChainValidationMutex);\n+         _classChainValidationFailed->set(classOffsetInCache);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17ce825fd2b8a6314b59b6a452044e89745d64d2"}, "originalPosition": 325}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzNjQ2MDUz", "url": "https://github.com/eclipse-openj9/openj9/pull/9403#pullrequestreview-403646053", "createdAt": "2020-04-30T15:43:33Z", "commit": {"oid": "17ce825fd2b8a6314b59b6a452044e89745d64d2"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "17ce825fd2b8a6314b59b6a452044e89745d64d2", "author": {"user": {"login": "dsouzai", "name": "Irwin D'Souza"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/17ce825fd2b8a6314b59b6a452044e89745d64d2", "committedDate": "2020-04-28T20:30:33Z", "message": "Guard caching with an option\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>"}, "afterCommit": {"oid": "c9fb50ab754a421eb0c94f9bca67ccb4f7019014", "author": {"user": {"login": "dsouzai", "name": "Irwin D'Souza"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/c9fb50ab754a421eb0c94f9bca67ccb4f7019014", "committedDate": "2020-05-04T20:56:03Z", "message": "Add comments\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c9fb50ab754a421eb0c94f9bca67ccb4f7019014", "author": {"user": {"login": "dsouzai", "name": "Irwin D'Souza"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/c9fb50ab754a421eb0c94f9bca67ccb4f7019014", "committedDate": "2020-05-04T20:56:03Z", "message": "Add comments\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>"}, "afterCommit": {"oid": "ce42ed59239ccd054c9dc881d890a397d3be63a8", "author": {"user": {"login": "dsouzai", "name": "Irwin D'Souza"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/ce42ed59239ccd054c9dc881d890a397d3be63a8", "committedDate": "2020-05-04T21:19:36Z", "message": "Add comments\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1MzY0OTE4", "url": "https://github.com/eclipse-openj9/openj9/pull/9403#pullrequestreview-405364918", "createdAt": "2020-05-04T21:34:46Z", "commit": {"oid": "ce42ed59239ccd054c9dc881d890a397d3be63a8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMTozNDo0NlrOGQTFag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMTozNDo0NlrOGQTFag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc0MzA4Mg==", "bodyText": "Probably should guard this with if (!_ccvMap. Or, I should just remove the if (!_classChainValidationMutex) check above.", "url": "https://github.com/eclipse-openj9/openj9/pull/9403#discussion_r419743082", "createdAt": "2020-05-04T21:34:46Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/env/J9SharedCache.cpp", "diffHunk": "@@ -96,6 +100,45 @@ TR_YesNoMaybe TR_J9SharedCache::isSharedCacheDisabledBecauseFull(TR::Compilation\n    return _sharedCacheDisabledBecauseFull;\n    }\n \n+bool\n+TR_J9SharedCache::initCCVCaching()\n+   {\n+   if (!_classChainValidationMutex)\n+      {\n+      if (!(_classChainValidationMutex = TR::Monitor::create(\"JIT-ClassChainValidationMutex\")))\n+         return false;\n+      }\n+\n+   void *storage = jitPersistentAlloc(sizeof(CCVMap));\n+   if (!storage)\n+      return false;\n+\n+   _ccvMap = new (storage) CCVMap(CCVComparator(), TR::Compiler->persistentAllocator());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce42ed59239ccd054c9dc881d890a397d3be63a8"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1ODIxOTE1", "url": "https://github.com/eclipse-openj9/openj9/pull/9403#pullrequestreview-405821915", "createdAt": "2020-05-05T14:05:42Z", "commit": {"oid": "ce42ed59239ccd054c9dc881d890a397d3be63a8"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNDowNTo0MlrOGQrELA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNDoyODoxMFrOGQsG6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDEzNTk4MA==", "bodyText": "Would something from PersistentCollections.hpp work for you here? (maybe extend it as I see that we only have  unordered_map)", "url": "https://github.com/eclipse-openj9/openj9/pull/9403#discussion_r420135980", "createdAt": "2020-05-05T14:05:42Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/env/J9SharedCache.cpp", "diffHunk": "@@ -96,6 +100,45 @@ TR_YesNoMaybe TR_J9SharedCache::isSharedCacheDisabledBecauseFull(TR::Compilation\n    return _sharedCacheDisabledBecauseFull;\n    }\n \n+bool\n+TR_J9SharedCache::initCCVCaching()\n+   {\n+   if (!_classChainValidationMutex)\n+      {\n+      if (!(_classChainValidationMutex = TR::Monitor::create(\"JIT-ClassChainValidationMutex\")))\n+         return false;\n+      }\n+\n+   void *storage = jitPersistentAlloc(sizeof(CCVMap));\n+   if (!storage)\n+      return false;\n+\n+   _ccvMap = new (storage) CCVMap(CCVComparator(), TR::Compiler->persistentAllocator());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc0MzA4Mg=="}, "originalCommit": {"oid": "ce42ed59239ccd054c9dc881d890a397d3be63a8"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE1MzA2NA==", "bodyText": "I don't understand this assert. When TR_EnableClassChainValidationCaching is enabled, we either return true or false or crash. Then the code below that does cacheCCVResult(classOffsetInCache, CCVResult::failure) is unreachable.", "url": "https://github.com/eclipse-openj9/openj9/pull/9403#discussion_r420153064", "createdAt": "2020-05-05T14:28:10Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/env/J9SharedCache.cpp", "diffHunk": "@@ -814,75 +857,150 @@ TR_J9SharedCache::findChainForClass(J9Class *clazz, const char *key, uint32_t ke\n    }\n \n bool\n-TR_J9SharedCache::classMatchesCachedVersion(J9Class *clazz, UDATA *chainData)\n+TR_J9SharedCache::validateSuperClassesInClassChain(TR_OpaqueClassBlock *clazz, UDATA * & chainPtr, UDATA *chainEnd)\n    {\n-   J9ROMClass *romClass = TR::Compiler->cls.romClassOf(fe()->convertClassPtrToClassOffset(clazz));\n-   J9UTF8 * className = J9ROMCLASS_CLASSNAME(romClass);\n-   LOG(5, { log(\"classMatchesCachedVersion class %p %.*s\\n\", clazz, J9UTF8_LENGTH(className), J9UTF8_DATA(className)); });\n-\n-   uintptr_t classOffsetInCache;\n-   if (!isPointerInSharedCache(romClass, &classOffsetInCache))\n+   int32_t numSuperclasses = TR::Compiler->cls.classDepthOf(clazz);\n+   for (int32_t index=0; index < numSuperclasses; index++)\n       {\n-      LOG(5, { log(\"\\tclass not in shared cache, returning false\\n\"); });\n-      return false;\n+      J9ROMClass *romClass = TR::Compiler->cls.romClassOfSuperClass(clazz, index);\n+      if (!romclassMatchesCachedVersion(romClass, chainPtr, chainEnd))\n+         {\n+         LOG(1, \"\\tClass in hierarchy did not match, returning false\\n\");\n+         return false;\n+         }\n       }\n+   return true;\n+   }\n \n-   if (chainData == NULL)\n+bool\n+TR_J9SharedCache::validateInterfacesInClassChain(TR_OpaqueClassBlock *clazz, UDATA * & chainPtr, UDATA *chainEnd)\n+   {\n+   J9ITable *interfaceElement = TR::Compiler->cls.iTableOf(clazz);\n+   while (interfaceElement)\n       {\n-      char key[17]; // longest possible key length is way less than 16 digits\n-      uint32_t keyLength;\n-      createClassKey(classOffsetInCache, key, keyLength);\n-      LOG(9, { log(\"\\tno chain specific, so looking up for key %.*s\\n\", keyLength, key); });\n-      chainData = findChainForClass(clazz, key, keyLength);\n-      if (chainData == NULL)\n+      J9ROMClass * romClass = TR::Compiler->cls.iTableRomClass(interfaceElement);\n+      if (!romclassMatchesCachedVersion(romClass, chainPtr, chainEnd))\n          {\n-         LOG(5, { log(\"\\tno stored chain, returning false\\n\"); });\n+         LOG(1, \"\\tInterface class did not match, returning false\\n\");\n          return false;\n          }\n+      interfaceElement = TR::Compiler->cls.iTableNext(interfaceElement);\n       }\n+   return true;\n+   }\n \n-   UDATA *chainPtr = chainData;\n-   UDATA chainLength = *chainPtr++;\n-   UDATA *chainEnd = (UDATA *) (((U_8*)chainData) + chainLength);\n-   LOG(9, { log(\"\\tfound chain: %p with length %d\\n\", chainData, chainLength); });\n+bool\n+TR_J9SharedCache::validateClassChain(J9ROMClass *romClass, TR_OpaqueClassBlock *clazz, UDATA * & chainPtr, UDATA *chainEnd)\n+   {\n+   bool validationSucceeded = false;\n \n    if (!romclassMatchesCachedVersion(romClass, chainPtr, chainEnd))\n       {\n-         LOG(5, { log(\"\\tClass did not match, returning false\\n\"); });\n-         return false;\n+      LOG(1, \"\\tClass did not match, returning false\\n\");\n+      }\n+   else if (!validateSuperClassesInClassChain(clazz, chainPtr, chainEnd))\n+      {\n+      LOG(1, \"\\tClass in hierarchy did not match, returning false\\n\");\n+      }\n+   else if (!validateInterfacesInClassChain(clazz, chainPtr, chainEnd))\n+      {\n+      LOG(1, \"\\tInterface class did not match, returning false\\n\");\n+      }\n+   else if (chainPtr != chainEnd)\n+      {\n+      LOG(1, \"\\tfinished classes and interfaces, but not at chain end, returning false\\n\");\n+      }\n+   else\n+      {\n+      validationSucceeded = true;\n       }\n \n-   int32_t numSuperclasses = TR::Compiler->cls.classDepthOf(fe()->convertClassPtrToClassOffset(clazz));\n-   for (int32_t index=0; index < numSuperclasses;index++)\n+   return validationSucceeded;\n+   }\n+\n+bool\n+TR_J9SharedCache::classMatchesCachedVersion(J9Class *clazz, UDATA *chainData)\n+   {\n+   J9ROMClass *romClass = TR::Compiler->cls.romClassOf(fe()->convertClassPtrToClassOffset(clazz));\n+   J9UTF8 * className = J9ROMCLASS_CLASSNAME(romClass);\n+   LOG(1, \"classMatchesCachedVersion class %p %.*s\\n\", clazz, J9UTF8_LENGTH(className), J9UTF8_DATA(className));\n+\n+   uintptr_t classOffsetInCache;\n+\n+   /* If the pointer isn't the SCC, then return false immmediately\n+    * as the map holds offsets into the SCC of romclasses\n+    */\n+   if (!isPointerInSharedCache(romClass, &classOffsetInCache))\n       {\n-      J9ROMClass *romClass = TR::Compiler->cls.romClassOfSuperClass(fe()->convertClassPtrToClassOffset(clazz), index);\n-      if (!romclassMatchesCachedVersion(romClass, chainPtr, chainEnd))\n-         {\n-         LOG(5, { log(\"\\tClass in hierarchy did not match, returning false\\n\"); });\n-         return false;\n-         }\n+      LOG(1, \"\\tclass not in shared cache, returning false\\n\");\n+      return false;\n       }\n \n-   J9ITable *interfaceElement = TR::Compiler->cls.iTableOf(fe()->convertClassPtrToClassOffset(clazz));\n-   while (interfaceElement)\n+   /* Check if the validation of the class chain was previously\n+    * performed; if so, return the result of that validation\n+    */\n+   if (TR::Options::getAOTCmdLineOptions()->getOption(TR_EnableClassChainValidationCaching))\n       {\n-      J9ROMClass * romClass = TR::Compiler->cls.iTableRomClass(interfaceElement);\n-      if (!romclassMatchesCachedVersion(romClass, chainPtr, chainEnd))\n+      auto result = getCachedCCVResult(classOffsetInCache);\n+      if (result == CCVResult::success)\n+         {\n+         LOG(1, \"\\tcached result: validation succeeded\\n\");\n+         return true;\n+         }\n+      else if (result == CCVResult::failure)\n          {\n-         LOG(5, { log(\"\\tInterface class did not match, returning false\\n\"); });\n+         LOG(1, \"\\tcached result: validation failed\\n\");\n          return false;\n          }\n-      interfaceElement = TR::Compiler->cls.iTableNext(interfaceElement);\n+      else\n+         {\n+         TR_ASSERT_FATAL(result == CCVResult::notYetValidated, \"Unknown result cached %d\\n\", result);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce42ed59239ccd054c9dc881d890a397d3be63a8"}, "originalPosition": 361}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1ODcyOTU3", "url": "https://github.com/eclipse-openj9/openj9/pull/9403#pullrequestreview-405872957", "createdAt": "2020-05-05T14:57:09Z", "commit": {"oid": "ce42ed59239ccd054c9dc881d890a397d3be63a8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb5c26bbdc5365d32c4fefc774b61d5e0c5638d7", "author": {"user": {"login": "dsouzai", "name": "Irwin D'Souza"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/fb5c26bbdc5365d32c4fefc774b61d5e0c5638d7", "committedDate": "2020-05-05T15:07:26Z", "message": "Clean up LOG macro\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1261b78b87fe5f03f942a7910bad65352a25bacc", "author": {"user": {"login": "dsouzai", "name": "Irwin D'Souza"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/1261b78b87fe5f03f942a7910bad65352a25bacc", "committedDate": "2020-05-05T15:07:26Z", "message": "Add classChainValidationMutex\n\nThis mutex will be used to guard concurrent accesses to the map\nthat will keep track of classes whose class chain has already been\nvalidated.\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ce42ed59239ccd054c9dc881d890a397d3be63a8", "author": {"user": {"login": "dsouzai", "name": "Irwin D'Souza"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/ce42ed59239ccd054c9dc881d890a397d3be63a8", "committedDate": "2020-05-04T21:19:36Z", "message": "Add comments\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>"}, "afterCommit": {"oid": "ea953b3b88519110a5dd48275f9aecd5795a61ea", "author": {"user": {"login": "dsouzai", "name": "Irwin D'Souza"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/ea953b3b88519110a5dd48275f9aecd5795a61ea", "committedDate": "2020-05-05T15:07:26Z", "message": "Add comments\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eeb41d24bcb5078e7617055903ef8cff60897344", "author": {"user": {"login": "dsouzai", "name": "Irwin D'Souza"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/eeb41d24bcb5078e7617055903ef8cff60897344", "committedDate": "2020-05-05T19:06:09Z", "message": "Init Map\n\nThis commit initializes the map that will be used to keep track\nof classes whose class chain has already been validated.\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71aaab83a3af1f56a30cbe318484439b3d6f3241", "author": {"user": {"login": "dsouzai", "name": "Irwin D'Souza"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/71aaab83a3af1f56a30cbe318484439b3d6f3241", "committedDate": "2020-05-05T19:06:10Z", "message": "Cache result of class chain validation\n\nThis commit introduces the ability to cache the result of the validation\nof a class' class chain. The class chain validation validates the shape\nof a loaded class; as such it does so using romclass comparisons.\nTherefore, the shape can't change for the duration of the run.\nTherefore, once a class has been validated (or failed to validate), that\nresult is true for the duration of the run.\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71778530f37660002e532e6e5a70808a5b10736d", "author": {"user": {"login": "dsouzai", "name": "Irwin D'Souza"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/71778530f37660002e532e6e5a70808a5b10736d", "committedDate": "2020-05-05T19:06:10Z", "message": "Add comments\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ea953b3b88519110a5dd48275f9aecd5795a61ea", "author": {"user": {"login": "dsouzai", "name": "Irwin D'Souza"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/ea953b3b88519110a5dd48275f9aecd5795a61ea", "committedDate": "2020-05-05T15:07:26Z", "message": "Add comments\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>"}, "afterCommit": {"oid": "71778530f37660002e532e6e5a70808a5b10736d", "author": {"user": {"login": "dsouzai", "name": "Irwin D'Souza"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/71778530f37660002e532e6e5a70808a5b10736d", "committedDate": "2020-05-05T19:06:10Z", "message": "Add comments\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3NTU4ODcw", "url": "https://github.com/eclipse-openj9/openj9/pull/9403#pullrequestreview-407558870", "createdAt": "2020-05-07T14:58:20Z", "commit": {"oid": "71778530f37660002e532e6e5a70808a5b10736d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1118, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}