{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5NjQzMzAx", "number": 10175, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxOToxMDozOVrOEUKZJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMjo0MTo0NFrOEpzJ5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NTc3MjUzOnYy", "diffSide": "RIGHT", "path": "runtime/redirector/redirector.c", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxOToxMDozOVrOG6TIaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxOToxMDozOVrOG6TIaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc4NDA0MA==", "bodyText": "I don't think we should change the behaviour for IBM's existing Java 8 builds.  The following #if def check should exclude it for Java 8, non-openj9 builds\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tenvOptions = getenv(ENVVAR_JAVA_OPTIONS);\n          \n          \n            \n            \tif (NULL != envOptions) {\n          \n          \n            \n            \t\tcheckEnvOptions(envOptions, &gcPolicy, &xcompressedstr, &xnocompressedstr, &xjvmstr, &xjvm, &namedVM, &nameLength, &xmxstr);\n          \n          \n            \n            \t}\n          \n          \n            \n            #if (JAVA_SPEC_VERSION != 8) || defined(OPENJ9_BUILD)\n          \n          \n            \n            \tenvOptions = getenv(ENVVAR_JAVA_OPTIONS);\n          \n          \n            \n            \tif (NULL != envOptions) {\n          \n          \n            \n            \t\tcheckEnvOptions(envOptions, &gcPolicy, &xcompressedstr, &xnocompressedstr, &xjvmstr, &xjvm, &namedVM, &nameLength, &xmxstr);\n          \n          \n            \n            \t}\n          \n          \n            \n            #endif /* (JAVA_SPEC_VERSION != 8) || defined(OPENJ9_BUILD) */", "url": "https://github.com/eclipse-openj9/openj9/pull/10175#discussion_r463784040", "createdAt": "2020-07-31T19:10:39Z", "author": {"login": "DanHeidinga"}, "path": "runtime/redirector/redirector.c", "diffHunk": "@@ -491,69 +548,24 @@ chooseJVM(JavaVMInitArgs *args, char *retBuffer, size_t bufferLength)\n \tint ignoreUnrecognizedEnabled = 0;\n \n \tint gcPolicy = GC_POLICY_GENCON;\n-\tconst char *gcPolicyOption = \"-Xgcpolicy:\";\n-\tsize_t gcPolicyOptionLength = strlen(gcPolicyOption);\n-\tchar *gcPolicyString = NULL;\n \n \tchar *xmxstr = NULL;\n \tU_64 requestedHeapSize = 0;\n \n-\t/* the command line is handled below but look into the ENVVAR_OPENJ9_JAVA_OPTIONS here, since it is a special case */\n+\t/* \n+\t * The command line is handled below but look into the *JAVA_OPTIONS here, since it is a special case.\n+\t * First look at JAVA_OPTIONS, then OPENJ9_JAVA_OPTIONS or IBM_JAVA_OPTIONS if OPENJ9_JAVA_OPTIONS isn't defined.\n+\t */\n+\tenvOptions = getenv(ENVVAR_JAVA_OPTIONS);\n+\tif (NULL != envOptions) {\n+\t\tcheckEnvOptions(envOptions, &gcPolicy, &xcompressedstr, &xnocompressedstr, &xjvmstr, &xjvm, &namedVM, &nameLength, &xmxstr);\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbd52ba7b13931b4662b00a64e6897fdc318640e"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NTc3NzgzOnYy", "diffSide": "RIGHT", "path": "runtime/util/vmargs.c", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxOToxMjo0NFrOG6TLug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxOToxMjo0NFrOG6TLug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc4NDg5MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t|| (0 != addEnvironmentVariableArguments(portLib, ENVVAR_JAVA_OPTIONS, vmArgumentsList, verboseFlags))\n          \n          \n            \n            #if (JAVA_SPEC_VERSION != 8) || defined(OPENJ9_BUILD)\n          \n          \n            \n            \t\t\t|| (0 != addEnvironmentVariableArguments(portLib, ENVVAR_JAVA_OPTIONS, vmArgumentsList, verboseFlags))\n          \n          \n            \n            #endif", "url": "https://github.com/eclipse-openj9/openj9/pull/10175#discussion_r463784890", "createdAt": "2020-07-31T19:12:44Z", "author": {"login": "DanHeidinga"}, "path": "runtime/util/vmargs.c", "diffHunk": "@@ -1395,6 +1395,7 @@ addEnvironmentVariables(J9PortLibrary * portLib, JavaVMInitArgs *launcherArgs, J\n \t\t\t|| (0 != mapEnvVarToArgument(portLib, ENVVAR_IBM_JAVA_ENABLE_ASCII_FILETAG, VMOPT_XASCII_FILETAG, vmArgumentsList, EXACT_MAP_NO_OPTIONS, verboseFlags))\n #endif\n \t\t\t|| (0 != addEnvironmentVariableArguments(portLib, ENVVAR_JAVA_TOOL_OPTIONS, vmArgumentsList, verboseFlags))\n+\t\t\t|| (0 != addEnvironmentVariableArguments(portLib, ENVVAR_JAVA_OPTIONS, vmArgumentsList, verboseFlags))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbd52ba7b13931b4662b00a64e6897fdc318640e"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NTk4NTU4OnYy", "diffSide": "RIGHT", "path": "test/functional/Java8andUp/src/org/openj9/test/vmArguments/VmArgumentTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMDoxODoxNVrOG6VE7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMDoxODoxNVrOG6VE7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgxNTkxOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tProcessBuilder pb = makeProcessBuilder(new String[] {}, CLASSPATH);\n          \n          \n            \n            \t\tMap<String, String> env = pb.environment();\n          \n          \n            \n            \t\tString javaOptionsArg = \"-Dtest.name=testJavaOptions\"; //$NON-NLS-1$\n          \n          \n            \n            \t\tenv.put(JAVA_OPTIONS, javaOptionsArg);\n          \n          \n            \n            \t\tArrayList<String> actualArguments = runAndGetArgumentList(pb);\n          \n          \n            \n            \t\tHashMap<String, Integer> argumentPositions = checkArguments(actualArguments, new String[] {javaOptionsArg});\n          \n          \n            \n            \t\tassertTrue(MISSING_ARGUMENT+javaOptionsArg, argumentPositions.containsKey(javaOptionsArg));\n          \n          \n            \n            \t\t/* environment variables should come after implicit arguments */\n          \n          \n            \n            \t\tassertTrue(JAVA_OPTIONS+ SHOULD_COME_AFTER+DJAVA_HOME, \n          \n          \n            \n            \t\t\t\targumentPositions.get(javaOptionsArg).intValue() > argumentPositions.get(DJAVA_HOME).intValue()); \n          \n          \n            \n            \t}\n          \n          \n            \n            \t\tif (!isIbm)\n          \n          \n            \n            \t\t\tProcessBuilder pb = makeProcessBuilder(new String[] {}, CLASSPATH);\n          \n          \n            \n            \t\t\tMap<String, String> env = pb.environment();\n          \n          \n            \n            \t\t\tString javaOptionsArg = \"-Dtest.name=testJavaOptions\"; //$NON-NLS-1$\n          \n          \n            \n            \t\t\tenv.put(JAVA_OPTIONS, javaOptionsArg);\n          \n          \n            \n            \t\t\tArrayList<String> actualArguments = runAndGetArgumentList(pb);\n          \n          \n            \n            \t\t\tHashMap<String, Integer> argumentPositions = checkArguments(actualArguments, new String[] {javaOptionsArg});\n          \n          \n            \n            \t\t\tassertTrue(MISSING_ARGUMENT+javaOptionsArg, argumentPositions.containsKey(javaOptionsArg));\n          \n          \n            \n            \t\t\t/* environment variables should come after implicit arguments */\n          \n          \n            \n            \t\t\tassertTrue(JAVA_OPTIONS+ SHOULD_COME_AFTER+DJAVA_HOME, \n          \n          \n            \n            \t\t\t\t\targumentPositions.get(javaOptionsArg).intValue() > \targumentPositions.get(DJAVA_HOME).intValue());\n          \n          \n            \n            \t\t}\n          \n          \n            \n            \t}", "url": "https://github.com/eclipse-openj9/openj9/pull/10175#discussion_r463815919", "createdAt": "2020-07-31T20:18:15Z", "author": {"login": "DanHeidinga"}, "path": "test/functional/Java8andUp/src/org/openj9/test/vmArguments/VmArgumentTests.java", "diffHunk": "@@ -334,7 +335,23 @@ public void testArgEncodingInIbmJavaOptions() {\n \t\tassertTrue(IBM_JAVA_OPTIONS+ \" should come last\", argumentPositions.get(ibmJavaOptionsArg).intValue() > argumentPositions.get(DJAVA_HOME).intValue());\n \t}\n \n-\t/* test OPENJ9_JAVA_OPTIONS environment variableS */\n+\t/* test JAVA_OPTIONS environment variable */\n+\t@Test\n+\tpublic void testJavaOptions() {\n+\t\tProcessBuilder pb = makeProcessBuilder(new String[] {}, CLASSPATH);\n+\t\tMap<String, String> env = pb.environment();\n+\t\tString javaOptionsArg = \"-Dtest.name=testJavaOptions\"; //$NON-NLS-1$\n+\t\tenv.put(JAVA_OPTIONS, javaOptionsArg);\n+\t\tArrayList<String> actualArguments = runAndGetArgumentList(pb);\n+\t\tHashMap<String, Integer> argumentPositions = checkArguments(actualArguments, new String[] {javaOptionsArg});\n+\t\tassertTrue(MISSING_ARGUMENT+javaOptionsArg, argumentPositions.containsKey(javaOptionsArg));\n+\t\t/* environment variables should come after implicit arguments */\n+\t\tassertTrue(JAVA_OPTIONS+ SHOULD_COME_AFTER+DJAVA_HOME, \n+\t\t\t\targumentPositions.get(javaOptionsArg).intValue() > argumentPositions.get(DJAVA_HOME).intValue()); \n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbd52ba7b13931b4662b00a64e6897fdc318640e"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NTk4OTQ1OnYy", "diffSide": "RIGHT", "path": "test/functional/Java8andUp/src/org/openj9/test/vmArguments/VmArgumentTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMDoxOTo1MVrOG6VHWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMDoxOTo1MVrOG6VHWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgxNjUzNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tProcessBuilder pb = makeProcessBuilder(new String[] {}, CLASSPATH);\n          \n          \n            \n            \t\tif (isIbm) {\n          \n          \n            \n            \t\t\t/* disable this test for IBM builds */\n          \n          \n            \n            \t\t\treturn;\n          \n          \n            \n            \t\t}\n          \n          \n            \n            \t\tProcessBuilder pb = makeProcessBuilder(new String[] {}, CLASSPATH);", "url": "https://github.com/eclipse-openj9/openj9/pull/10175#discussion_r463816537", "createdAt": "2020-07-31T20:19:51Z", "author": {"login": "DanHeidinga"}, "path": "test/functional/Java8andUp/src/org/openj9/test/vmArguments/VmArgumentTests.java", "diffHunk": "@@ -666,30 +683,36 @@ public void testCommandlineArgumentsWithLeadingAndTrailingSpaces() {\n \t\t}\n \t}\n \n-\t/* IBM_JAVA_OPTIONS should take priority over JAVA_TOOL_OPTIONS */\n+\t/* IBM_JAVA_OPTIONS should take priority over JAVA_TOOL_OPTIONS, and JAVA_OPTIONS */\n \t@Test\n \tpublic void testEnvironmentVariableOrdering() {\n \t\tProcessBuilder pb = makeProcessBuilder(new String[] {}, CLASSPATH);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbd52ba7b13931b4662b00a64e6897fdc318640e"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0ODcyNzY1OnYy", "diffSide": "RIGHT", "path": "runtime/redirector/redirector.c", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMDozMjowMFrOHB539w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMjowNzo1MlrOHbfmOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc1ODgzOQ==", "bodyText": "Why not fold this initialization into the declaration?", "url": "https://github.com/eclipse-openj9/openj9/pull/10175#discussion_r471758839", "createdAt": "2020-08-17T20:32:00Z", "author": {"login": "keithc-ca"}, "path": "runtime/redirector/redirector.c", "diffHunk": "@@ -463,6 +464,62 @@ parseMemorySizeValue(char *option)\n \treturn result;\n }\n \n+#define GC_POLICY_OPTION \"-Xgcpolicy:\"\n+#define LENGTH_GC_POLICY_OPTION (sizeof(GC_POLICY_OPTION) - 1)\n+\n+static void\n+checkEnvOptions(char *envOptions, int *gcPolicy, char **xcompressedstr, char **xnocompressedstr, char **xjvmstr, int *xjvm, char **namedVM, size_t *nameLength, char **xmxstr)\n+{\n+\tchar *gcPolicyString = NULL;\n+\n+\tgcPolicyString = findStartOfMostRightOption(envOptions, GC_POLICY_OPTION);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbd52ba7b13931b4662b00a64e6897fdc318640e"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU5MTI4OA==", "bodyText": "Updated.", "url": "https://github.com/eclipse-openj9/openj9/pull/10175#discussion_r498591288", "createdAt": "2020-10-02T02:07:52Z", "author": {"login": "pshipton"}, "path": "runtime/redirector/redirector.c", "diffHunk": "@@ -463,6 +464,62 @@ parseMemorySizeValue(char *option)\n \treturn result;\n }\n \n+#define GC_POLICY_OPTION \"-Xgcpolicy:\"\n+#define LENGTH_GC_POLICY_OPTION (sizeof(GC_POLICY_OPTION) - 1)\n+\n+static void\n+checkEnvOptions(char *envOptions, int *gcPolicy, char **xcompressedstr, char **xnocompressedstr, char **xjvmstr, int *xjvm, char **namedVM, size_t *nameLength, char **xmxstr)\n+{\n+\tchar *gcPolicyString = NULL;\n+\n+\tgcPolicyString = findStartOfMostRightOption(envOptions, GC_POLICY_OPTION);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc1ODgzOQ=="}, "originalCommit": {"oid": "bbd52ba7b13931b4662b00a64e6897fdc318640e"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0ODc0MjIzOnYy", "diffSide": "RIGHT", "path": "runtime/redirector/redirector.c", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMDozNjo0OVrOHB6A_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMjowODozMlrOHbfmtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc2MTE0OQ==", "bodyText": "Is the * in *JAVA_OPTIONS significant?", "url": "https://github.com/eclipse-openj9/openj9/pull/10175#discussion_r471761149", "createdAt": "2020-08-17T20:36:49Z", "author": {"login": "keithc-ca"}, "path": "runtime/redirector/redirector.c", "diffHunk": "@@ -491,69 +548,24 @@ chooseJVM(JavaVMInitArgs *args, char *retBuffer, size_t bufferLength)\n \tint ignoreUnrecognizedEnabled = 0;\n \n \tint gcPolicy = GC_POLICY_GENCON;\n-\tconst char *gcPolicyOption = \"-Xgcpolicy:\";\n-\tsize_t gcPolicyOptionLength = strlen(gcPolicyOption);\n-\tchar *gcPolicyString = NULL;\n \n \tchar *xmxstr = NULL;\n \tU_64 requestedHeapSize = 0;\n \n-\t/* the command line is handled below but look into the ENVVAR_OPENJ9_JAVA_OPTIONS here, since it is a special case */\n+\t/* \n+\t * The command line is handled below but look into the *JAVA_OPTIONS here, since it is a special case.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbd52ba7b13931b4662b00a64e6897fdc318640e"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU5MTQxNQ==", "bodyText": "Yes. I've rewritten the comment to be explicit.", "url": "https://github.com/eclipse-openj9/openj9/pull/10175#discussion_r498591415", "createdAt": "2020-10-02T02:08:32Z", "author": {"login": "pshipton"}, "path": "runtime/redirector/redirector.c", "diffHunk": "@@ -491,69 +548,24 @@ chooseJVM(JavaVMInitArgs *args, char *retBuffer, size_t bufferLength)\n \tint ignoreUnrecognizedEnabled = 0;\n \n \tint gcPolicy = GC_POLICY_GENCON;\n-\tconst char *gcPolicyOption = \"-Xgcpolicy:\";\n-\tsize_t gcPolicyOptionLength = strlen(gcPolicyOption);\n-\tchar *gcPolicyString = NULL;\n \n \tchar *xmxstr = NULL;\n \tU_64 requestedHeapSize = 0;\n \n-\t/* the command line is handled below but look into the ENVVAR_OPENJ9_JAVA_OPTIONS here, since it is a special case */\n+\t/* \n+\t * The command line is handled below but look into the *JAVA_OPTIONS here, since it is a special case.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc2MTE0OQ=="}, "originalCommit": {"oid": "bbd52ba7b13931b4662b00a64e6897fdc318640e"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMTM4NTE3OnYy", "diffSide": "RIGHT", "path": "runtime/redirector/redirector.c", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMjoyNDo0NlrOHbfx-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMzoyMTo1OFrOHbgXgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU5NDI5OQ==", "bodyText": "I know this isn't new code but it looks like we index off the end of the buffer here if gcPolicyString = \"nogc\".\nLikely fixable by setting\ngcPolicyString = \"-Xgcpolicy:nogc\"", "url": "https://github.com/eclipse-openj9/openj9/pull/10175#discussion_r498594299", "createdAt": "2020-10-02T02:24:46Z", "author": {"login": "DanHeidinga"}, "path": "runtime/redirector/redirector.c", "diffHunk": "@@ -463,6 +464,60 @@ parseMemorySizeValue(char *option)\n \treturn result;\n }\n \n+#define GC_POLICY_OPTION \"-Xgcpolicy:\"\n+#define LENGTH_GC_POLICY_OPTION (sizeof(GC_POLICY_OPTION) - 1)\n+\n+static void\n+checkEnvOptions(char *envOptions, int *gcPolicy, char **xcompressedstr, char **xnocompressedstr, char **xjvmstr, int *xjvm, char **namedVM, size_t *nameLength, char **xmxstr)\n+{\n+\tchar *gcPolicyString = findStartOfMostRightOption(envOptions, GC_POLICY_OPTION);\n+\tif (NULL == gcPolicyString) {\n+\t\tif (hasEnvOption(envOptions, \"-XX:+UseNoGC\")) {\n+\t\t\tgcPolicyString = \"nogc\";\n+\t\t}\n+\t}\n+\tif (NULL != gcPolicyString) {\n+\t\tparseGCPolicy(gcPolicyString + LENGTH_GC_POLICY_OPTION, gcPolicy);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7721381277fba6d09a51452d4eefda438b4b5d39"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYwMzkwNw==", "bodyText": "Updated.", "url": "https://github.com/eclipse-openj9/openj9/pull/10175#discussion_r498603907", "createdAt": "2020-10-02T03:21:58Z", "author": {"login": "pshipton"}, "path": "runtime/redirector/redirector.c", "diffHunk": "@@ -463,6 +464,60 @@ parseMemorySizeValue(char *option)\n \treturn result;\n }\n \n+#define GC_POLICY_OPTION \"-Xgcpolicy:\"\n+#define LENGTH_GC_POLICY_OPTION (sizeof(GC_POLICY_OPTION) - 1)\n+\n+static void\n+checkEnvOptions(char *envOptions, int *gcPolicy, char **xcompressedstr, char **xnocompressedstr, char **xjvmstr, int *xjvm, char **namedVM, size_t *nameLength, char **xmxstr)\n+{\n+\tchar *gcPolicyString = findStartOfMostRightOption(envOptions, GC_POLICY_OPTION);\n+\tif (NULL == gcPolicyString) {\n+\t\tif (hasEnvOption(envOptions, \"-XX:+UseNoGC\")) {\n+\t\t\tgcPolicyString = \"nogc\";\n+\t\t}\n+\t}\n+\tif (NULL != gcPolicyString) {\n+\t\tparseGCPolicy(gcPolicyString + LENGTH_GC_POLICY_OPTION, gcPolicy);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU5NDI5OQ=="}, "originalCommit": {"oid": "7721381277fba6d09a51452d4eefda438b4b5d39"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjY0MjIwOnYy", "diffSide": "RIGHT", "path": "runtime/redirector/redirector.c", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMjozODozMFrOHbsAxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMjozODozMFrOHbsAxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc5NDY5NQ==", "bodyText": "I think this second call to strstr() can be replaced by *xjvmstr.", "url": "https://github.com/eclipse-openj9/openj9/pull/10175#discussion_r498794695", "createdAt": "2020-10-02T12:38:30Z", "author": {"login": "keithc-ca"}, "path": "runtime/redirector/redirector.c", "diffHunk": "@@ -463,6 +464,60 @@ parseMemorySizeValue(char *option)\n \treturn result;\n }\n \n+#define GC_POLICY_OPTION \"-Xgcpolicy:\"\n+#define LENGTH_GC_POLICY_OPTION (sizeof(GC_POLICY_OPTION) - 1)\n+\n+static void\n+checkEnvOptions(char *envOptions, int *gcPolicy, char **xcompressedstr, char **xnocompressedstr, char **xjvmstr, int *xjvm, char **namedVM, size_t *nameLength, char **xmxstr)\n+{\n+\tchar *gcPolicyString = findStartOfMostRightOption(envOptions, GC_POLICY_OPTION);\n+\tif (NULL == gcPolicyString) {\n+\t\tif (hasEnvOption(envOptions, \"-XX:+UseNoGC\")) {\n+\t\t\tgcPolicyString = GC_POLICY_OPTION \"nogc\";\n+\t\t}\n+\t}\n+\tif (NULL != gcPolicyString) {\n+\t\tparseGCPolicy(gcPolicyString + LENGTH_GC_POLICY_OPTION, gcPolicy);\n+\t}\n+\n+\tif (hasEnvOption(envOptions, \"-Xcompressedrefs\")) {\n+\t\txcompressed = 0;\n+\t\t*xcompressedstr = \"-Xcompressedrefs\";\n+\t}\n+\tif (hasEnvOption(envOptions, \"-XX:+UseCompressedOops\")) {\n+\t\txcompressed = 0;\n+\t\t*xcompressedstr = \"-XX:+UseCompressedOops\";\n+\t}\n+\tif (hasEnvOption(envOptions, \"-Xnocompressedrefs\")) {\n+\t\txnocompressed = 0;\n+\t\t*xnocompressedstr = \"-Xnocompressedrefs\";\n+\t}\n+\tif (hasEnvOption(envOptions, \"-XX:-UseCompressedOops\")) {\n+\t\txnocompressed = 0;\n+\t\t*xnocompressedstr = \"-XX:-UseCompressedOops\";\n+\t}\n+\t\n+\t*xjvmstr = strstr(envOptions, \"-Xjvm:\");\n+\tif (NULL != *xjvmstr) {\n+\t\tchar *space = NULL;\n+\n+\t\txjvm = 0;\n+\t\t*namedVM = strstr(envOptions, \"-Xjvm:\") + 6;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3149bd71a608a9f4d747863692f7e92bb0b84388"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjY0ODkwOnYy", "diffSide": "RIGHT", "path": "test/functional/Java8andUp/src/org/openj9/test/vmArguments/VmArgumentTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMjo0MDo0OFrOHbsFEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMjo0MDo0OFrOHbsFEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc5NTc5Mw==", "bodyText": "nit: spaces missing around ? and : (here and on line 153).", "url": "https://github.com/eclipse-openj9/openj9/pull/10175#discussion_r498795793", "createdAt": "2020-10-02T12:40:48Z", "author": {"login": "keithc-ca"}, "path": "test/functional/Java8andUp/src/org/openj9/test/vmArguments/VmArgumentTests.java", "diffHunk": "@@ -130,9 +132,9 @@\n \tprotected static Logger logger = Logger.getLogger(VmArgumentTests.class);\n \n \tstatic {\n-\t\tboolean isIbm = System.getProperty(\"java.vm.vendor\").equals(\"IBM Corporation\");\n+\t\tisIBM = System.getProperty(\"java.vm.vendor\").equals(\"IBM Corporation\");\n \t\tmandatoryArgumentsJava8 = new String[] {\n-\t\t\t\tisIbm?XOPTIONSFILE:null,\n+\t\t\t\tisIBM?XOPTIONSFILE:null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3149bd71a608a9f4d747863692f7e92bb0b84388"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjY1MTg4OnYy", "diffSide": "RIGHT", "path": "test/functional/Java8andUp/src/org/openj9/test/vmArguments/VmArgumentTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMjo0MTo0NFrOHbsG6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMjo0MTo0NFrOHbsG6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc5NjI2NA==", "bodyText": "nit: spaces missing around + (here and several places below).", "url": "https://github.com/eclipse-openj9/openj9/pull/10175#discussion_r498796264", "createdAt": "2020-10-02T12:41:44Z", "author": {"login": "keithc-ca"}, "path": "test/functional/Java8andUp/src/org/openj9/test/vmArguments/VmArgumentTests.java", "diffHunk": "@@ -666,30 +688,46 @@ public void testCommandlineArgumentsWithLeadingAndTrailingSpaces() {\n \t\t}\n \t}\n \n-\t/* IBM_JAVA_OPTIONS should take priority over JAVA_TOOL_OPTIONS */\n+\t/* IBM_JAVA_OPTIONS should take priority over JAVA_TOOL_OPTIONS, and JAVA_OPTIONS */\n \t@Test\n \tpublic void testEnvironmentVariableOrdering() {\n \t\tProcessBuilder pb = makeProcessBuilder(new String[] {}, CLASSPATH);\n \t\tMap<String, String> env = pb.environment();\n-\t\tString javaToolOptionsArg = \"-Dtest.name1=javaToolOptionsArg\";\n-\t\tString ibmJavaOptionsArg = \"-Dtest.name2=ibmJavaOptionsArg\";\n-\t\tString openJ9JavaOptionsArg = \"-Dtest.name2=openJ9JavaOptionsArg\";\n-\t\tenv.put(JAVA_TOOL_OPTIONS, javaToolOptionsArg);\n+\t\tString ibmJavaOptionsArg = \"-Dtest.name1=ibmJavaOptionsArg\";\n+\t\tString javaOptionsArg = \"-Dtest.name2=javaOptionsArg\";\n+\t\tString javaToolOptionsArg = \"-Dtest.name3=javaToolOptionsArg\";\n+\t\tString openJ9JavaOptionsArg = \"-Dtest.name4=openJ9JavaOptionsArg\";\n \t\tenv.put(IBM_JAVA_OPTIONS, ibmJavaOptionsArg);\n+\t\tenv.put(JAVA_OPTIONS, javaOptionsArg);\n+\t\tenv.put(JAVA_TOOL_OPTIONS, javaToolOptionsArg);\n \t\tenv.put(OPENJ9_JAVA_OPTIONS, openJ9JavaOptionsArg);\n \t\tArrayList<String> actualArguments = runAndGetArgumentList(pb);\n \t\tHashMap<String, Integer> argumentPositions = checkArguments(actualArguments, \n-\t\t\t\tnew String[] {ibmJavaOptionsArg, javaToolOptionsArg, openJ9JavaOptionsArg});\n+\t\t\t\tnew String[] {ibmJavaOptionsArg, javaOptionsArg, javaToolOptionsArg, openJ9JavaOptionsArg});\n \t\tassertTrue(MISSING_ARGUMENT+ibmJavaOptionsArg, \n \t\t\t\targumentPositions.containsKey(ibmJavaOptionsArg));\n+\t\tif (!isJava8 || !isIBM) {\n+\t\t\tassertTrue(MISSING_ARGUMENT+javaOptionsArg, ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3149bd71a608a9f4d747863692f7e92bb0b84388"}, "originalPosition": 102}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4773, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}