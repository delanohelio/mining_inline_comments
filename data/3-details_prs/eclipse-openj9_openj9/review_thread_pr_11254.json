{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2MTU2MDIw", "number": 11254, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNzoyNDoxNFrOE819sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwMzoyNzo1N1rOE9DEUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjM0MTYyOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/codegen/J9CodeGenerator.cpp", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNzoyNDoxNFrOH5NXNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMzozMzoyN1rOH5dGCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc0OTgxNA==", "bodyText": "Why we move the acmp call tree top just after node whose child is node? I think this routine can be simpler, what you need to do is move the acmp call helper at the end of the prevBlock . You might just need to get the last real tree-top and add it after it as you have just split the blocks I do not think we would have more than one exit edge from the prevBlock.", "url": "https://github.com/eclipse-openj9/openj9/pull/11254#discussion_r529749814", "createdAt": "2020-11-24T17:24:14Z", "author": {"login": "r30shah"}, "path": "runtime/compiler/codegen/J9CodeGenerator.cpp", "diffHunk": "@@ -251,6 +251,48 @@ J9::CodeGenerator::fastpathAcmpHelper(TR::Node *node, TR::TreeTop *tt, const boo\n    // next treetop and then at the current one\n    TR::Block* prevBlock = tt->getEnclosingBlock();\n    TR::Block* targetBlock = prevBlock->splitPostGRA(tt->getNextTreeTop(), cfg, true, NULL);\n+\n+   // Move call tree to end of block, along with any stores of the result of the call, if they're\n+   // not already at the end.  The call has to be split into its own block, but splitPostGRA above\n+   // might have left register stores and stores into temporaries that must stay with the previous block\n+   TR::TreeTop* prevBlockExit = prevBlock->getExit();\n+   TR::TreeTop* afterTT = tt->getNextTreeTop();\n+\n+   if (afterTT != prevBlockExit)\n+      {\n+      if (trace)\n+         {\n+         traceMsg(comp, \"Moving treetop containing node n%dn [%p] associated with acmp helper call to end of prevBlock in preparation of final block split\\n\", tt->getNode()->getGlobalIndex(), tt->getNode());\n+         }\n+\n+      // Remove TreeTop for call node\n+      tt->unlink(false);\n+      TR::TreeTop* callTreesTail = tt;\n+\n+      while (afterTT != prevBlockExit)\n+         {\n+         TR::TreeTop* nextTT = afterTT->getNextTreeTop();\n+         TR::ILOpCodes op = afterTT->getNode()->getOpCodeValue();\n+\n+         if ((op == TR::iRegStore || op == TR::istore) && afterTT->getNode()->getFirstChild() == node)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd3aac0b531b17e22787e8f8cf484522859c8f3f"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkxODc4MQ==", "bodyText": "@r30shah Rahil, I'm not sure I'm understanding your comment, so let me show an example of what's happening.  Here are the trees after the call to splitPostGRA:\nn142n     treetop                                                                             \nn141n       icall  jitAcmpHelper[#99  helper Method] [flags 0x400 0x0 ]                       \nn139n         ==>aload\nn140n         ==>aload\nn340n     bRegStore ecx                                                                       \nn14n        ==>bloadi\nn343n     bRegStore edx                                                                       \nn31n        ==>bloadi\nn346n     bRegStore esi                                                                       \nn48n        ==>bloadi\nn349n     bRegStore eax                                                                       \nn65n        ==>bloadi\nn352n     bRegStore r14d                                                                      \nn82n        ==>bloadi\nn355n     istore  <temp slot 24>[#371  Auto] [flags 0x3 0x0 ]                                 \nn354n       b2i                                                                               \nn99n          ==>bloadi\nn359n     istore  <temp slot 25>[#372  Auto] [flags 0x3 0x0 ]                                 \nn358n       b2i                                                                               \nn116n         ==>bloadi\nn363n     istore  <temp slot 26>[#373  Auto] [flags 0x3 0x0 ]                                 \nn362n       b2i                                                                               \nn133n         ==>bloadi\nn366n     istore  <temp slot 27>[#374  Auto] [flags 0x3 0x0 ]                                 \nn141n       ==>icall\nn338n     BBEnd </block_2> ===== ()\n\nI'm trying to move the TR::TreeTops containing nodes n142n and n366n.  I hadn't wanted to make any assumptions about how many stores there might be for the value of the icall or whether they would appear after all of the other stores.", "url": "https://github.com/eclipse-openj9/openj9/pull/11254#discussion_r529918781", "createdAt": "2020-11-24T22:06:12Z", "author": {"login": "hzongaro"}, "path": "runtime/compiler/codegen/J9CodeGenerator.cpp", "diffHunk": "@@ -251,6 +251,48 @@ J9::CodeGenerator::fastpathAcmpHelper(TR::Node *node, TR::TreeTop *tt, const boo\n    // next treetop and then at the current one\n    TR::Block* prevBlock = tt->getEnclosingBlock();\n    TR::Block* targetBlock = prevBlock->splitPostGRA(tt->getNextTreeTop(), cfg, true, NULL);\n+\n+   // Move call tree to end of block, along with any stores of the result of the call, if they're\n+   // not already at the end.  The call has to be split into its own block, but splitPostGRA above\n+   // might have left register stores and stores into temporaries that must stay with the previous block\n+   TR::TreeTop* prevBlockExit = prevBlock->getExit();\n+   TR::TreeTop* afterTT = tt->getNextTreeTop();\n+\n+   if (afterTT != prevBlockExit)\n+      {\n+      if (trace)\n+         {\n+         traceMsg(comp, \"Moving treetop containing node n%dn [%p] associated with acmp helper call to end of prevBlock in preparation of final block split\\n\", tt->getNode()->getGlobalIndex(), tt->getNode());\n+         }\n+\n+      // Remove TreeTop for call node\n+      tt->unlink(false);\n+      TR::TreeTop* callTreesTail = tt;\n+\n+      while (afterTT != prevBlockExit)\n+         {\n+         TR::TreeTop* nextTT = afterTT->getNextTreeTop();\n+         TR::ILOpCodes op = afterTT->getNode()->getOpCodeValue();\n+\n+         if ((op == TR::iRegStore || op == TR::istore) && afterTT->getNode()->getFirstChild() == node)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc0OTgxNA=="}, "originalCommit": {"oid": "bd3aac0b531b17e22787e8f8cf484522859c8f3f"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAwNzU2MQ==", "bodyText": "Okk, Sorry, now it is clear to me.  So far it seems good to me, let me give it another look.", "url": "https://github.com/eclipse-openj9/openj9/pull/11254#discussion_r530007561", "createdAt": "2020-11-24T23:33:27Z", "author": {"login": "r30shah"}, "path": "runtime/compiler/codegen/J9CodeGenerator.cpp", "diffHunk": "@@ -251,6 +251,48 @@ J9::CodeGenerator::fastpathAcmpHelper(TR::Node *node, TR::TreeTop *tt, const boo\n    // next treetop and then at the current one\n    TR::Block* prevBlock = tt->getEnclosingBlock();\n    TR::Block* targetBlock = prevBlock->splitPostGRA(tt->getNextTreeTop(), cfg, true, NULL);\n+\n+   // Move call tree to end of block, along with any stores of the result of the call, if they're\n+   // not already at the end.  The call has to be split into its own block, but splitPostGRA above\n+   // might have left register stores and stores into temporaries that must stay with the previous block\n+   TR::TreeTop* prevBlockExit = prevBlock->getExit();\n+   TR::TreeTop* afterTT = tt->getNextTreeTop();\n+\n+   if (afterTT != prevBlockExit)\n+      {\n+      if (trace)\n+         {\n+         traceMsg(comp, \"Moving treetop containing node n%dn [%p] associated with acmp helper call to end of prevBlock in preparation of final block split\\n\", tt->getNode()->getGlobalIndex(), tt->getNode());\n+         }\n+\n+      // Remove TreeTop for call node\n+      tt->unlink(false);\n+      TR::TreeTop* callTreesTail = tt;\n+\n+      while (afterTT != prevBlockExit)\n+         {\n+         TR::TreeTop* nextTT = afterTT->getNextTreeTop();\n+         TR::ILOpCodes op = afterTT->getNode()->getOpCodeValue();\n+\n+         if ((op == TR::iRegStore || op == TR::istore) && afterTT->getNode()->getFirstChild() == node)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc0OTgxNA=="}, "originalCommit": {"oid": "bd3aac0b531b17e22787e8f8cf484522859c8f3f"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzQzNzE2OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/codegen/J9CodeGenerator.cpp", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMjowNzoxOFrOH5XvTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNTozMTowN1rOH54sng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkxOTgyMg==", "bodyText": "I wonder if the diagram on the above should be updated with GlRegDeps() to  show how the register dependency looks like between the split blocks and some sort of annotation that mentions the call tree needs to be at the end of the block.\nhttps://github.com/eclipse/openj9/blob/bd3aac0b531b17e22787e8f8cf484522859c8f3f/runtime/compiler/codegen/J9CodeGenerator.cpp#L197-L219", "url": "https://github.com/eclipse-openj9/openj9/pull/11254#discussion_r529919822", "createdAt": "2020-11-24T22:07:18Z", "author": {"login": "a7ehuo"}, "path": "runtime/compiler/codegen/J9CodeGenerator.cpp", "diffHunk": "@@ -251,6 +251,48 @@ J9::CodeGenerator::fastpathAcmpHelper(TR::Node *node, TR::TreeTop *tt, const boo\n    // next treetop and then at the current one\n    TR::Block* prevBlock = tt->getEnclosingBlock();\n    TR::Block* targetBlock = prevBlock->splitPostGRA(tt->getNextTreeTop(), cfg, true, NULL);\n+\n+   // Move call tree to end of block, along with any stores of the result of the call, if they're", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd3aac0b531b17e22787e8f8cf484522859c8f3f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA2OTkzMA==", "bodyText": "Thanks for suggesting that this should show the register dependencies; I'll do that.\nAs for showing that the call tree has to appear at the end of the block, the difficulty is that this diagram shows where the acmphelper call ends up after the call to split.  It's only at the end of the previous block just before the call split, so I would have to add another diagram showing the intermediate state.  I'm not sure it's worth it to add another diagram.  Thoughts?", "url": "https://github.com/eclipse-openj9/openj9/pull/11254#discussion_r530069930", "createdAt": "2020-11-25T02:36:08Z", "author": {"login": "hzongaro"}, "path": "runtime/compiler/codegen/J9CodeGenerator.cpp", "diffHunk": "@@ -251,6 +251,48 @@ J9::CodeGenerator::fastpathAcmpHelper(TR::Node *node, TR::TreeTop *tt, const boo\n    // next treetop and then at the current one\n    TR::Block* prevBlock = tt->getEnclosingBlock();\n    TR::Block* targetBlock = prevBlock->splitPostGRA(tt->getNextTreeTop(), cfg, true, NULL);\n+\n+   // Move call tree to end of block, along with any stores of the result of the call, if they're", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkxOTgyMg=="}, "originalCommit": {"oid": "bd3aac0b531b17e22787e8f8cf484522859c8f3f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA3NDU0NA==", "bodyText": "IMO a detailed explanation here before moving the treetops should suffice the intermediate state. Adding CFG diagram for intermediate state in the beginning would complicate. I have just reworded the  above comment,\nAs the block is split after the helper call node, it might be possible that as part of un-commoning, code to store nodes into registers or temp-slot is appended to the original block by splitPostGRA call. Move helper call treetop  to end of block, along with any stores resulting from un-commoning of the nodes in helper call tree so that it can be split into its own block", "url": "https://github.com/eclipse-openj9/openj9/pull/11254#discussion_r530074544", "createdAt": "2020-11-25T02:51:27Z", "author": {"login": "r30shah"}, "path": "runtime/compiler/codegen/J9CodeGenerator.cpp", "diffHunk": "@@ -251,6 +251,48 @@ J9::CodeGenerator::fastpathAcmpHelper(TR::Node *node, TR::TreeTop *tt, const boo\n    // next treetop and then at the current one\n    TR::Block* prevBlock = tt->getEnclosingBlock();\n    TR::Block* targetBlock = prevBlock->splitPostGRA(tt->getNextTreeTop(), cfg, true, NULL);\n+\n+   // Move call tree to end of block, along with any stores of the result of the call, if they're", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkxOTgyMg=="}, "originalCommit": {"oid": "bd3aac0b531b17e22787e8f8cf484522859c8f3f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ1OTgwNg==", "bodyText": "A detailed explanation would do.", "url": "https://github.com/eclipse-openj9/openj9/pull/11254#discussion_r530459806", "createdAt": "2020-11-25T15:31:07Z", "author": {"login": "a7ehuo"}, "path": "runtime/compiler/codegen/J9CodeGenerator.cpp", "diffHunk": "@@ -251,6 +251,48 @@ J9::CodeGenerator::fastpathAcmpHelper(TR::Node *node, TR::TreeTop *tt, const boo\n    // next treetop and then at the current one\n    TR::Block* prevBlock = tt->getEnclosingBlock();\n    TR::Block* targetBlock = prevBlock->splitPostGRA(tt->getNextTreeTop(), cfg, true, NULL);\n+\n+   // Move call tree to end of block, along with any stores of the result of the call, if they're", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkxOTgyMg=="}, "originalCommit": {"oid": "bd3aac0b531b17e22787e8f8cf484522859c8f3f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzQ5MzE3OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/codegen/J9CodeGenerator.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMjoxNjowNFrOH5YS7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMjoxNjowNFrOH5YS7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkyODk0MQ==", "bodyText": "Should this trace be updated to differentiate from the trace message at line L265 to show this one is more specific to store nodes?", "url": "https://github.com/eclipse-openj9/openj9/pull/11254#discussion_r529928941", "createdAt": "2020-11-24T22:16:04Z", "author": {"login": "a7ehuo"}, "path": "runtime/compiler/codegen/J9CodeGenerator.cpp", "diffHunk": "@@ -251,6 +251,48 @@ J9::CodeGenerator::fastpathAcmpHelper(TR::Node *node, TR::TreeTop *tt, const boo\n    // next treetop and then at the current one\n    TR::Block* prevBlock = tt->getEnclosingBlock();\n    TR::Block* targetBlock = prevBlock->splitPostGRA(tt->getNextTreeTop(), cfg, true, NULL);\n+\n+   // Move call tree to end of block, along with any stores of the result of the call, if they're\n+   // not already at the end.  The call has to be split into its own block, but splitPostGRA above\n+   // might have left register stores and stores into temporaries that must stay with the previous block\n+   TR::TreeTop* prevBlockExit = prevBlock->getExit();\n+   TR::TreeTop* afterTT = tt->getNextTreeTop();\n+\n+   if (afterTT != prevBlockExit)\n+      {\n+      if (trace)\n+         {\n+         traceMsg(comp, \"Moving treetop containing node n%dn [%p] associated with acmp helper call to end of prevBlock in preparation of final block split\\n\", tt->getNode()->getGlobalIndex(), tt->getNode());\n+         }\n+\n+      // Remove TreeTop for call node\n+      tt->unlink(false);\n+      TR::TreeTop* callTreesTail = tt;\n+\n+      while (afterTT != prevBlockExit)\n+         {\n+         TR::TreeTop* nextTT = afterTT->getNextTreeTop();\n+         TR::ILOpCodes op = afterTT->getNode()->getOpCodeValue();\n+\n+         if ((op == TR::iRegStore || op == TR::istore) && afterTT->getNode()->getFirstChild() == node)\n+            {\n+            if (trace)\n+               {\n+               traceMsg(comp, \"Moving treetop containing node n%dn [%p] associated with acmp helper call to end of prevBlock in preparation of final block split\\n\", afterTT->getNode()->getGlobalIndex(), afterTT->getNode());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd3aac0b531b17e22787e8f8cf484522859c8f3f"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNDQ4NjIwOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/codegen/J9CodeGenerator.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwMzoyNjo0MVrOH5hxJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwMzoyNjo0MVrOH5hxJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA4NDEzMg==", "bodyText": "This is used as iterator mainly to walk through treetops. How about using iterTT?", "url": "https://github.com/eclipse-openj9/openj9/pull/11254#discussion_r530084132", "createdAt": "2020-11-25T03:26:41Z", "author": {"login": "r30shah"}, "path": "runtime/compiler/codegen/J9CodeGenerator.cpp", "diffHunk": "@@ -251,6 +251,48 @@ J9::CodeGenerator::fastpathAcmpHelper(TR::Node *node, TR::TreeTop *tt, const boo\n    // next treetop and then at the current one\n    TR::Block* prevBlock = tt->getEnclosingBlock();\n    TR::Block* targetBlock = prevBlock->splitPostGRA(tt->getNextTreeTop(), cfg, true, NULL);\n+\n+   // Move call tree to end of block, along with any stores of the result of the call, if they're\n+   // not already at the end.  The call has to be split into its own block, but splitPostGRA above\n+   // might have left register stores and stores into temporaries that must stay with the previous block\n+   TR::TreeTop* prevBlockExit = prevBlock->getExit();\n+   TR::TreeTop* afterTT = tt->getNextTreeTop();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd3aac0b531b17e22787e8f8cf484522859c8f3f"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNDQ4ODQ5OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/codegen/J9CodeGenerator.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwMzoyNzo1N1rOH5hycA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwMzoyNzo1N1rOH5hycA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA4NDQ2NA==", "bodyText": "This  is the last real tree-top in the later created callBlock , may be we can rename this to reflect that.", "url": "https://github.com/eclipse-openj9/openj9/pull/11254#discussion_r530084464", "createdAt": "2020-11-25T03:27:57Z", "author": {"login": "r30shah"}, "path": "runtime/compiler/codegen/J9CodeGenerator.cpp", "diffHunk": "@@ -251,6 +251,48 @@ J9::CodeGenerator::fastpathAcmpHelper(TR::Node *node, TR::TreeTop *tt, const boo\n    // next treetop and then at the current one\n    TR::Block* prevBlock = tt->getEnclosingBlock();\n    TR::Block* targetBlock = prevBlock->splitPostGRA(tt->getNextTreeTop(), cfg, true, NULL);\n+\n+   // Move call tree to end of block, along with any stores of the result of the call, if they're\n+   // not already at the end.  The call has to be split into its own block, but splitPostGRA above\n+   // might have left register stores and stores into temporaries that must stay with the previous block\n+   TR::TreeTop* prevBlockExit = prevBlock->getExit();\n+   TR::TreeTop* afterTT = tt->getNextTreeTop();\n+\n+   if (afterTT != prevBlockExit)\n+      {\n+      if (trace)\n+         {\n+         traceMsg(comp, \"Moving treetop containing node n%dn [%p] associated with acmp helper call to end of prevBlock in preparation of final block split\\n\", tt->getNode()->getGlobalIndex(), tt->getNode());\n+         }\n+\n+      // Remove TreeTop for call node\n+      tt->unlink(false);\n+      TR::TreeTop* callTreesTail = tt;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd3aac0b531b17e22787e8f8cf484522859c8f3f"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 960, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}