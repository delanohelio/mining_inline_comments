{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxOTEzMDY0", "number": 10678, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxOTozODoyN1rOEmwRxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxODowODo0MVrOEnKQLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDcyMzI0OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/env/PersistentAllocator.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxOTozODoyN1rOHW-HZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMDoxOTowMVrOHW_cqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg0ODQyMA==", "bodyText": "Is the 0th index special? If so then maybe it's worth having an enum or maybe a static const size_t rather than using the literal 0.", "url": "https://github.com/eclipse-openj9/openj9/pull/10678#discussion_r493848420", "createdAt": "2020-09-23T19:38:27Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/env/PersistentAllocator.cpp", "diffHunk": "@@ -68,78 +65,133 @@ PersistentAllocator::allocate(size_t size, void *hint)\n    return alloc;\n    }\n \n+PersistentAllocator::Block *\n+PersistentAllocator::allocateFromVariableSizeListLocked(size_t allocSize)\n+   {\n+   Block * block = NULL;\n+   Block * prev = NULL;\n+   for (block = _freeBlocks[0]; block && block->_size < allocSize; prev = block, block = prev->next())\n+      {}\n+\n+   if (block)\n+      {\n+      if (prev)\n+         prev->_next = block->next();\n+      else\n+         _freeBlocks[0] = block->next();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76e2109024567dcc6d7757bcc604ab0dc73d9649"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg3MDI0OA==", "bodyText": "Yes, the first list is the variable-size one used for larger blocks. I'll use a static const size_t", "url": "https://github.com/eclipse-openj9/openj9/pull/10678#discussion_r493870248", "createdAt": "2020-09-23T20:19:01Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/env/PersistentAllocator.cpp", "diffHunk": "@@ -68,78 +65,133 @@ PersistentAllocator::allocate(size_t size, void *hint)\n    return alloc;\n    }\n \n+PersistentAllocator::Block *\n+PersistentAllocator::allocateFromVariableSizeListLocked(size_t allocSize)\n+   {\n+   Block * block = NULL;\n+   Block * prev = NULL;\n+   for (block = _freeBlocks[0]; block && block->_size < allocSize; prev = block, block = prev->next())\n+      {}\n+\n+   if (block)\n+      {\n+      if (prev)\n+         prev->_next = block->next();\n+      else\n+         _freeBlocks[0] = block->next();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg0ODQyMA=="}, "originalCommit": {"oid": "76e2109024567dcc6d7757bcc604ab0dc73d9649"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDcyNDQxOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/env/PersistentAllocator.cpp", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxOTozODo0N1rOHW-IFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNDo1MzowOFrOHXe3QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg0ODU5Nw==", "bodyText": "Better to use OMR::Critical Section(_smallBlockListsMonitor);", "url": "https://github.com/eclipse-openj9/openj9/pull/10678#discussion_r493848597", "createdAt": "2020-09-23T19:38:47Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/env/PersistentAllocator.cpp", "diffHunk": "@@ -68,78 +65,133 @@ PersistentAllocator::allocate(size_t size, void *hint)\n    return alloc;\n    }\n \n+PersistentAllocator::Block *\n+PersistentAllocator::allocateFromVariableSizeListLocked(size_t allocSize)\n+   {\n+   Block * block = NULL;\n+   Block * prev = NULL;\n+   for (block = _freeBlocks[0]; block && block->_size < allocSize; prev = block, block = prev->next())\n+      {}\n+\n+   if (block)\n+      {\n+      if (prev)\n+         prev->_next = block->next();\n+      else\n+         _freeBlocks[0] = block->next();\n+\n+      block->_next = NULL;\n+      }\n+   return block;\n+   }\n+\n void *\n-PersistentAllocator::allocateLocked(size_t requestedSize)\n+PersistentAllocator::allocateInternal(size_t requestedSize)\n    {\n    TR_ASSERT( sizeof(Block) == mem_round( sizeof(Block) ),\"Persistent block size will prevent us from properly aligning allocations.\");\n    size_t const dataSize = mem_round(requestedSize);\n    size_t const allocSize = sizeof(Block) + dataSize;\n \n-   TR::AllocatedMemoryMeter::update_allocated(allocSize, persistentAlloc);\n+   if (TR::AllocatedMemoryMeter::_enabled & persistentAlloc)\n+      {\n+      // Use _smallBlockListsMonitor to protect TR::AllocatedMemoryMeter::update_allocated\n+      // because accessing the variable-size-block list protected by ::memoryAllocMonitor\n+      // takes longer and we may be penalizing access to fixed size block which should be very fast\n+      j9thread_monitor_enter(_smallBlockListsMonitor);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76e2109024567dcc6d7757bcc604ab0dc73d9649"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg3MzQ2Mw==", "bodyText": "Persistent memory is created very early when TR monitors don't even exist. This is why that ugliness\n      if (::memoryAllocMonitor)\n         ::memoryAllocMonitor->enter();\n\nexists. In here I decided to use VM constructs for the mutexes, rather than repeating the pattern above.\nDue to these complications OMR::Critical Section(_smallBlockListsMonitor); will not work.", "url": "https://github.com/eclipse-openj9/openj9/pull/10678#discussion_r493873463", "createdAt": "2020-09-23T20:25:09Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/env/PersistentAllocator.cpp", "diffHunk": "@@ -68,78 +65,133 @@ PersistentAllocator::allocate(size_t size, void *hint)\n    return alloc;\n    }\n \n+PersistentAllocator::Block *\n+PersistentAllocator::allocateFromVariableSizeListLocked(size_t allocSize)\n+   {\n+   Block * block = NULL;\n+   Block * prev = NULL;\n+   for (block = _freeBlocks[0]; block && block->_size < allocSize; prev = block, block = prev->next())\n+      {}\n+\n+   if (block)\n+      {\n+      if (prev)\n+         prev->_next = block->next();\n+      else\n+         _freeBlocks[0] = block->next();\n+\n+      block->_next = NULL;\n+      }\n+   return block;\n+   }\n+\n void *\n-PersistentAllocator::allocateLocked(size_t requestedSize)\n+PersistentAllocator::allocateInternal(size_t requestedSize)\n    {\n    TR_ASSERT( sizeof(Block) == mem_round( sizeof(Block) ),\"Persistent block size will prevent us from properly aligning allocations.\");\n    size_t const dataSize = mem_round(requestedSize);\n    size_t const allocSize = sizeof(Block) + dataSize;\n \n-   TR::AllocatedMemoryMeter::update_allocated(allocSize, persistentAlloc);\n+   if (TR::AllocatedMemoryMeter::_enabled & persistentAlloc)\n+      {\n+      // Use _smallBlockListsMonitor to protect TR::AllocatedMemoryMeter::update_allocated\n+      // because accessing the variable-size-block list protected by ::memoryAllocMonitor\n+      // takes longer and we may be penalizing access to fixed size block which should be very fast\n+      j9thread_monitor_enter(_smallBlockListsMonitor);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg0ODU5Nw=="}, "originalCommit": {"oid": "76e2109024567dcc6d7757bcc604ab0dc73d9649"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM4NDk2MQ==", "bodyText": "Ah....that's unfortunate :/", "url": "https://github.com/eclipse-openj9/openj9/pull/10678#discussion_r494384961", "createdAt": "2020-09-24T14:53:08Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/env/PersistentAllocator.cpp", "diffHunk": "@@ -68,78 +65,133 @@ PersistentAllocator::allocate(size_t size, void *hint)\n    return alloc;\n    }\n \n+PersistentAllocator::Block *\n+PersistentAllocator::allocateFromVariableSizeListLocked(size_t allocSize)\n+   {\n+   Block * block = NULL;\n+   Block * prev = NULL;\n+   for (block = _freeBlocks[0]; block && block->_size < allocSize; prev = block, block = prev->next())\n+      {}\n+\n+   if (block)\n+      {\n+      if (prev)\n+         prev->_next = block->next();\n+      else\n+         _freeBlocks[0] = block->next();\n+\n+      block->_next = NULL;\n+      }\n+   return block;\n+   }\n+\n void *\n-PersistentAllocator::allocateLocked(size_t requestedSize)\n+PersistentAllocator::allocateInternal(size_t requestedSize)\n    {\n    TR_ASSERT( sizeof(Block) == mem_round( sizeof(Block) ),\"Persistent block size will prevent us from properly aligning allocations.\");\n    size_t const dataSize = mem_round(requestedSize);\n    size_t const allocSize = sizeof(Block) + dataSize;\n \n-   TR::AllocatedMemoryMeter::update_allocated(allocSize, persistentAlloc);\n+   if (TR::AllocatedMemoryMeter::_enabled & persistentAlloc)\n+      {\n+      // Use _smallBlockListsMonitor to protect TR::AllocatedMemoryMeter::update_allocated\n+      // because accessing the variable-size-block list protected by ::memoryAllocMonitor\n+      // takes longer and we may be penalizing access to fixed size block which should be very fast\n+      j9thread_monitor_enter(_smallBlockListsMonitor);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg0ODU5Nw=="}, "originalCommit": {"oid": "76e2109024567dcc6d7757bcc604ab0dc73d9649"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDcyODAxOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/env/PersistentAllocator.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxOTozOTo1M1rOHW-KSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxOTozOTo1M1rOHW-KSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg0OTE2MQ==", "bodyText": "Same comment as above regarding the literal 0.", "url": "https://github.com/eclipse-openj9/openj9/pull/10678#discussion_r493849161", "createdAt": "2020-09-23T19:39:53Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/env/PersistentAllocator.cpp", "diffHunk": "@@ -68,78 +65,133 @@ PersistentAllocator::allocate(size_t size, void *hint)\n    return alloc;\n    }\n \n+PersistentAllocator::Block *\n+PersistentAllocator::allocateFromVariableSizeListLocked(size_t allocSize)\n+   {\n+   Block * block = NULL;\n+   Block * prev = NULL;\n+   for (block = _freeBlocks[0]; block && block->_size < allocSize; prev = block, block = prev->next())\n+      {}\n+\n+   if (block)\n+      {\n+      if (prev)\n+         prev->_next = block->next();\n+      else\n+         _freeBlocks[0] = block->next();\n+\n+      block->_next = NULL;\n+      }\n+   return block;\n+   }\n+\n void *\n-PersistentAllocator::allocateLocked(size_t requestedSize)\n+PersistentAllocator::allocateInternal(size_t requestedSize)\n    {\n    TR_ASSERT( sizeof(Block) == mem_round( sizeof(Block) ),\"Persistent block size will prevent us from properly aligning allocations.\");\n    size_t const dataSize = mem_round(requestedSize);\n    size_t const allocSize = sizeof(Block) + dataSize;\n \n-   TR::AllocatedMemoryMeter::update_allocated(allocSize, persistentAlloc);\n+   if (TR::AllocatedMemoryMeter::_enabled & persistentAlloc)\n+      {\n+      // Use _smallBlockListsMonitor to protect TR::AllocatedMemoryMeter::update_allocated\n+      // because accessing the variable-size-block list protected by ::memoryAllocMonitor\n+      // takes longer and we may be penalizing access to fixed size block which should be very fast\n+      j9thread_monitor_enter(_smallBlockListsMonitor);\n+      TR::AllocatedMemoryMeter::update_allocated(allocSize, persistentAlloc);\n+      j9thread_monitor_exit(_smallBlockListsMonitor);\n+      }\n \n    // If this is a small block try to allocate it from the appropriate\n    // fixed-size-block chain.\n    //\n    size_t const index = freeBlocksIndex(allocSize);\n-   Block * block = 0;\n-   Block * prev = 0;\n-   for (\n-      block = _freeBlocks[index];\n-      block && block->_size < allocSize;\n-      prev = block, block = prev->next()\n-      )\n-      { TR_ASSERT(index == 0, \"Iterating through a fixed-size block bin.\"); }\n-\n-   if (block)\n+   if (index != 0) // fixed-size-block chain", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76e2109024567dcc6d7757bcc604ab0dc73d9649"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDcyOTU2OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/env/PersistentAllocator.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxOTo0MDoxN1rOHW-LPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxOTo0MDoxN1rOHW-LPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg0OTQwNQ==", "bodyText": "Same comment as above regarding OMR::CriticalSection.", "url": "https://github.com/eclipse-openj9/openj9/pull/10678#discussion_r493849405", "createdAt": "2020-09-23T19:40:17Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/env/PersistentAllocator.cpp", "diffHunk": "@@ -68,78 +65,133 @@ PersistentAllocator::allocate(size_t size, void *hint)\n    return alloc;\n    }\n \n+PersistentAllocator::Block *\n+PersistentAllocator::allocateFromVariableSizeListLocked(size_t allocSize)\n+   {\n+   Block * block = NULL;\n+   Block * prev = NULL;\n+   for (block = _freeBlocks[0]; block && block->_size < allocSize; prev = block, block = prev->next())\n+      {}\n+\n+   if (block)\n+      {\n+      if (prev)\n+         prev->_next = block->next();\n+      else\n+         _freeBlocks[0] = block->next();\n+\n+      block->_next = NULL;\n+      }\n+   return block;\n+   }\n+\n void *\n-PersistentAllocator::allocateLocked(size_t requestedSize)\n+PersistentAllocator::allocateInternal(size_t requestedSize)\n    {\n    TR_ASSERT( sizeof(Block) == mem_round( sizeof(Block) ),\"Persistent block size will prevent us from properly aligning allocations.\");\n    size_t const dataSize = mem_round(requestedSize);\n    size_t const allocSize = sizeof(Block) + dataSize;\n \n-   TR::AllocatedMemoryMeter::update_allocated(allocSize, persistentAlloc);\n+   if (TR::AllocatedMemoryMeter::_enabled & persistentAlloc)\n+      {\n+      // Use _smallBlockListsMonitor to protect TR::AllocatedMemoryMeter::update_allocated\n+      // because accessing the variable-size-block list protected by ::memoryAllocMonitor\n+      // takes longer and we may be penalizing access to fixed size block which should be very fast\n+      j9thread_monitor_enter(_smallBlockListsMonitor);\n+      TR::AllocatedMemoryMeter::update_allocated(allocSize, persistentAlloc);\n+      j9thread_monitor_exit(_smallBlockListsMonitor);\n+      }\n \n    // If this is a small block try to allocate it from the appropriate\n    // fixed-size-block chain.\n    //\n    size_t const index = freeBlocksIndex(allocSize);\n-   Block * block = 0;\n-   Block * prev = 0;\n-   for (\n-      block = _freeBlocks[index];\n-      block && block->_size < allocSize;\n-      prev = block, block = prev->next()\n-      )\n-      { TR_ASSERT(index == 0, \"Iterating through a fixed-size block bin.\"); }\n-\n-   if (block)\n+   if (index != 0) // fixed-size-block chain\n       {\n-\n-      TR_ASSERT(\n-         ( index == 0 ) || ( block->_size == allocSize ),\n-         \"block %p in chain for index %d has size %d (not %d)\\n\",\n-         block,\n-         index,\n-         block->_size,\n-         (index * sizeof(void *)) + sizeof(Block)\n-         );\n-\n-      if (prev)\n-         prev->_next = block->next();\n-      else\n+      j9thread_monitor_enter(_smallBlockListsMonitor);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76e2109024567dcc6d7757bcc604ab0dc73d9649"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDc0NDE5OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/env/PersistentAllocator.cpp", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxOTo0NDoyOVrOHW-UTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNzoxMzoyOVrOHXktiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg1MTcyNw==", "bodyText": "I don't think this is a good idea; it's better to just wrap the call to allocateFromSegmentLocked in a scope and use OMR::CriticalSection(::memoryAllocMonitor)", "url": "https://github.com/eclipse-openj9/openj9/pull/10678#discussion_r493851727", "createdAt": "2020-09-23T19:44:29Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/env/PersistentAllocator.cpp", "diffHunk": "@@ -68,78 +65,133 @@ PersistentAllocator::allocate(size_t size, void *hint)\n    return alloc;\n    }\n \n+PersistentAllocator::Block *\n+PersistentAllocator::allocateFromVariableSizeListLocked(size_t allocSize)\n+   {\n+   Block * block = NULL;\n+   Block * prev = NULL;\n+   for (block = _freeBlocks[0]; block && block->_size < allocSize; prev = block, block = prev->next())\n+      {}\n+\n+   if (block)\n+      {\n+      if (prev)\n+         prev->_next = block->next();\n+      else\n+         _freeBlocks[0] = block->next();\n+\n+      block->_next = NULL;\n+      }\n+   return block;\n+   }\n+\n void *\n-PersistentAllocator::allocateLocked(size_t requestedSize)\n+PersistentAllocator::allocateInternal(size_t requestedSize)\n    {\n    TR_ASSERT( sizeof(Block) == mem_round( sizeof(Block) ),\"Persistent block size will prevent us from properly aligning allocations.\");\n    size_t const dataSize = mem_round(requestedSize);\n    size_t const allocSize = sizeof(Block) + dataSize;\n \n-   TR::AllocatedMemoryMeter::update_allocated(allocSize, persistentAlloc);\n+   if (TR::AllocatedMemoryMeter::_enabled & persistentAlloc)\n+      {\n+      // Use _smallBlockListsMonitor to protect TR::AllocatedMemoryMeter::update_allocated\n+      // because accessing the variable-size-block list protected by ::memoryAllocMonitor\n+      // takes longer and we may be penalizing access to fixed size block which should be very fast\n+      j9thread_monitor_enter(_smallBlockListsMonitor);\n+      TR::AllocatedMemoryMeter::update_allocated(allocSize, persistentAlloc);\n+      j9thread_monitor_exit(_smallBlockListsMonitor);\n+      }\n \n    // If this is a small block try to allocate it from the appropriate\n    // fixed-size-block chain.\n    //\n    size_t const index = freeBlocksIndex(allocSize);\n-   Block * block = 0;\n-   Block * prev = 0;\n-   for (\n-      block = _freeBlocks[index];\n-      block && block->_size < allocSize;\n-      prev = block, block = prev->next()\n-      )\n-      { TR_ASSERT(index == 0, \"Iterating through a fixed-size block bin.\"); }\n-\n-   if (block)\n+   if (index != 0) // fixed-size-block chain\n       {\n-\n-      TR_ASSERT(\n-         ( index == 0 ) || ( block->_size == allocSize ),\n-         \"block %p in chain for index %d has size %d (not %d)\\n\",\n-         block,\n-         index,\n-         block->_size,\n-         (index * sizeof(void *)) + sizeof(Block)\n-         );\n-\n-      if (prev)\n-         prev->_next = block->next();\n-      else\n+      j9thread_monitor_enter(_smallBlockListsMonitor);\n+      Block * block = _freeBlocks[index];\n+      if (block)\n+         {\n          _freeBlocks[index] = block->next();\n-\n-      block->_next = NULL;\n-\n-      size_t const excess = block->_size - allocSize;\n-\n-      if (excess > sizeof(Block))\n+         block->_next = NULL;\n+         j9thread_monitor_exit(_smallBlockListsMonitor);\n+         return block + 1; // Return pointer after the header\n+         }\n+      j9thread_monitor_exit(_smallBlockListsMonitor);\n+      // Need to allocate from segment\n+      // Preemtively acquire the mutex that protects the segment allocation\n+      if (::memoryAllocMonitor)\n+         ::memoryAllocMonitor->enter();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76e2109024567dcc6d7757bcc604ab0dc73d9649"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg3NDk5Ng==", "bodyText": "As explained above ::CriticalSection(::memoryAllocMonitor) will not work because ::memoryAllocMonitor can be NULL.\nAnother goal of this implementation was to reduce the number of monitor->enter()/monitor->exit() as much as possible. Otherwise I wouldn't rush into acquiring the monitor at this point", "url": "https://github.com/eclipse-openj9/openj9/pull/10678#discussion_r493874996", "createdAt": "2020-09-23T20:28:10Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/env/PersistentAllocator.cpp", "diffHunk": "@@ -68,78 +65,133 @@ PersistentAllocator::allocate(size_t size, void *hint)\n    return alloc;\n    }\n \n+PersistentAllocator::Block *\n+PersistentAllocator::allocateFromVariableSizeListLocked(size_t allocSize)\n+   {\n+   Block * block = NULL;\n+   Block * prev = NULL;\n+   for (block = _freeBlocks[0]; block && block->_size < allocSize; prev = block, block = prev->next())\n+      {}\n+\n+   if (block)\n+      {\n+      if (prev)\n+         prev->_next = block->next();\n+      else\n+         _freeBlocks[0] = block->next();\n+\n+      block->_next = NULL;\n+      }\n+   return block;\n+   }\n+\n void *\n-PersistentAllocator::allocateLocked(size_t requestedSize)\n+PersistentAllocator::allocateInternal(size_t requestedSize)\n    {\n    TR_ASSERT( sizeof(Block) == mem_round( sizeof(Block) ),\"Persistent block size will prevent us from properly aligning allocations.\");\n    size_t const dataSize = mem_round(requestedSize);\n    size_t const allocSize = sizeof(Block) + dataSize;\n \n-   TR::AllocatedMemoryMeter::update_allocated(allocSize, persistentAlloc);\n+   if (TR::AllocatedMemoryMeter::_enabled & persistentAlloc)\n+      {\n+      // Use _smallBlockListsMonitor to protect TR::AllocatedMemoryMeter::update_allocated\n+      // because accessing the variable-size-block list protected by ::memoryAllocMonitor\n+      // takes longer and we may be penalizing access to fixed size block which should be very fast\n+      j9thread_monitor_enter(_smallBlockListsMonitor);\n+      TR::AllocatedMemoryMeter::update_allocated(allocSize, persistentAlloc);\n+      j9thread_monitor_exit(_smallBlockListsMonitor);\n+      }\n \n    // If this is a small block try to allocate it from the appropriate\n    // fixed-size-block chain.\n    //\n    size_t const index = freeBlocksIndex(allocSize);\n-   Block * block = 0;\n-   Block * prev = 0;\n-   for (\n-      block = _freeBlocks[index];\n-      block && block->_size < allocSize;\n-      prev = block, block = prev->next()\n-      )\n-      { TR_ASSERT(index == 0, \"Iterating through a fixed-size block bin.\"); }\n-\n-   if (block)\n+   if (index != 0) // fixed-size-block chain\n       {\n-\n-      TR_ASSERT(\n-         ( index == 0 ) || ( block->_size == allocSize ),\n-         \"block %p in chain for index %d has size %d (not %d)\\n\",\n-         block,\n-         index,\n-         block->_size,\n-         (index * sizeof(void *)) + sizeof(Block)\n-         );\n-\n-      if (prev)\n-         prev->_next = block->next();\n-      else\n+      j9thread_monitor_enter(_smallBlockListsMonitor);\n+      Block * block = _freeBlocks[index];\n+      if (block)\n+         {\n          _freeBlocks[index] = block->next();\n-\n-      block->_next = NULL;\n-\n-      size_t const excess = block->_size - allocSize;\n-\n-      if (excess > sizeof(Block))\n+         block->_next = NULL;\n+         j9thread_monitor_exit(_smallBlockListsMonitor);\n+         return block + 1; // Return pointer after the header\n+         }\n+      j9thread_monitor_exit(_smallBlockListsMonitor);\n+      // Need to allocate from segment\n+      // Preemtively acquire the mutex that protects the segment allocation\n+      if (::memoryAllocMonitor)\n+         ::memoryAllocMonitor->enter();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg1MTcyNw=="}, "originalCommit": {"oid": "76e2109024567dcc6d7757bcc604ab0dc73d9649"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM5MzQ1OQ==", "bodyText": "Given that this is at the end of the if block, why does the monitor need to be acquired here? Wouldn't it be better to just move it right before the call to allocateFromSegmentLocked below? The else block looks self contained, so the only way to end up in the call to allocateFromSegmentLocked is if the code enter the if block here.", "url": "https://github.com/eclipse-openj9/openj9/pull/10678#discussion_r494393459", "createdAt": "2020-09-24T15:04:13Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/env/PersistentAllocator.cpp", "diffHunk": "@@ -68,78 +65,133 @@ PersistentAllocator::allocate(size_t size, void *hint)\n    return alloc;\n    }\n \n+PersistentAllocator::Block *\n+PersistentAllocator::allocateFromVariableSizeListLocked(size_t allocSize)\n+   {\n+   Block * block = NULL;\n+   Block * prev = NULL;\n+   for (block = _freeBlocks[0]; block && block->_size < allocSize; prev = block, block = prev->next())\n+      {}\n+\n+   if (block)\n+      {\n+      if (prev)\n+         prev->_next = block->next();\n+      else\n+         _freeBlocks[0] = block->next();\n+\n+      block->_next = NULL;\n+      }\n+   return block;\n+   }\n+\n void *\n-PersistentAllocator::allocateLocked(size_t requestedSize)\n+PersistentAllocator::allocateInternal(size_t requestedSize)\n    {\n    TR_ASSERT( sizeof(Block) == mem_round( sizeof(Block) ),\"Persistent block size will prevent us from properly aligning allocations.\");\n    size_t const dataSize = mem_round(requestedSize);\n    size_t const allocSize = sizeof(Block) + dataSize;\n \n-   TR::AllocatedMemoryMeter::update_allocated(allocSize, persistentAlloc);\n+   if (TR::AllocatedMemoryMeter::_enabled & persistentAlloc)\n+      {\n+      // Use _smallBlockListsMonitor to protect TR::AllocatedMemoryMeter::update_allocated\n+      // because accessing the variable-size-block list protected by ::memoryAllocMonitor\n+      // takes longer and we may be penalizing access to fixed size block which should be very fast\n+      j9thread_monitor_enter(_smallBlockListsMonitor);\n+      TR::AllocatedMemoryMeter::update_allocated(allocSize, persistentAlloc);\n+      j9thread_monitor_exit(_smallBlockListsMonitor);\n+      }\n \n    // If this is a small block try to allocate it from the appropriate\n    // fixed-size-block chain.\n    //\n    size_t const index = freeBlocksIndex(allocSize);\n-   Block * block = 0;\n-   Block * prev = 0;\n-   for (\n-      block = _freeBlocks[index];\n-      block && block->_size < allocSize;\n-      prev = block, block = prev->next()\n-      )\n-      { TR_ASSERT(index == 0, \"Iterating through a fixed-size block bin.\"); }\n-\n-   if (block)\n+   if (index != 0) // fixed-size-block chain\n       {\n-\n-      TR_ASSERT(\n-         ( index == 0 ) || ( block->_size == allocSize ),\n-         \"block %p in chain for index %d has size %d (not %d)\\n\",\n-         block,\n-         index,\n-         block->_size,\n-         (index * sizeof(void *)) + sizeof(Block)\n-         );\n-\n-      if (prev)\n-         prev->_next = block->next();\n-      else\n+      j9thread_monitor_enter(_smallBlockListsMonitor);\n+      Block * block = _freeBlocks[index];\n+      if (block)\n+         {\n          _freeBlocks[index] = block->next();\n-\n-      block->_next = NULL;\n-\n-      size_t const excess = block->_size - allocSize;\n-\n-      if (excess > sizeof(Block))\n+         block->_next = NULL;\n+         j9thread_monitor_exit(_smallBlockListsMonitor);\n+         return block + 1; // Return pointer after the header\n+         }\n+      j9thread_monitor_exit(_smallBlockListsMonitor);\n+      // Need to allocate from segment\n+      // Preemtively acquire the mutex that protects the segment allocation\n+      if (::memoryAllocMonitor)\n+         ::memoryAllocMonitor->enter();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg1MTcyNw=="}, "originalCommit": {"oid": "76e2109024567dcc6d7757bcc604ab0dc73d9649"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ3MzM3Nw==", "bodyText": "When we try to allocate from the variable-size-block list and fail we have the corresponding lock in hand. The next action is to allocate from segments, operation which is protected by the same lock. Instead of releasing the lock just to acquire it immediately when segment allocation needs to happen, I decided to keep it on.  So we enter the section of code that allocates from segments with the monitor already held. This means that if we fail to allocate from the small-block list (the code above) we also need to lock the variable-size-block mutex in preparation of allocating from a segment.\nThe pseudo code looks like this:\nIf (need to allocate a small block)\n   {\n    try to allocate small block\n    if (success) return\n    else acquire LargeBlockMutex in preparation for segment allocation\n    }\nelse // Large block allocation\n   {\n    acquire LargeBlockMutex\n    try to allocate large block\n    if (success)   release mutex and return\n     else\n         {\n        // LargeBlockMutex is still held\n        // Do not release it just to acquire it again immediately\n         }\n     }\n  AllocateFromSegment()\n  release LargeBlockMutex", "url": "https://github.com/eclipse-openj9/openj9/pull/10678#discussion_r494473377", "createdAt": "2020-09-24T17:00:53Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/env/PersistentAllocator.cpp", "diffHunk": "@@ -68,78 +65,133 @@ PersistentAllocator::allocate(size_t size, void *hint)\n    return alloc;\n    }\n \n+PersistentAllocator::Block *\n+PersistentAllocator::allocateFromVariableSizeListLocked(size_t allocSize)\n+   {\n+   Block * block = NULL;\n+   Block * prev = NULL;\n+   for (block = _freeBlocks[0]; block && block->_size < allocSize; prev = block, block = prev->next())\n+      {}\n+\n+   if (block)\n+      {\n+      if (prev)\n+         prev->_next = block->next();\n+      else\n+         _freeBlocks[0] = block->next();\n+\n+      block->_next = NULL;\n+      }\n+   return block;\n+   }\n+\n void *\n-PersistentAllocator::allocateLocked(size_t requestedSize)\n+PersistentAllocator::allocateInternal(size_t requestedSize)\n    {\n    TR_ASSERT( sizeof(Block) == mem_round( sizeof(Block) ),\"Persistent block size will prevent us from properly aligning allocations.\");\n    size_t const dataSize = mem_round(requestedSize);\n    size_t const allocSize = sizeof(Block) + dataSize;\n \n-   TR::AllocatedMemoryMeter::update_allocated(allocSize, persistentAlloc);\n+   if (TR::AllocatedMemoryMeter::_enabled & persistentAlloc)\n+      {\n+      // Use _smallBlockListsMonitor to protect TR::AllocatedMemoryMeter::update_allocated\n+      // because accessing the variable-size-block list protected by ::memoryAllocMonitor\n+      // takes longer and we may be penalizing access to fixed size block which should be very fast\n+      j9thread_monitor_enter(_smallBlockListsMonitor);\n+      TR::AllocatedMemoryMeter::update_allocated(allocSize, persistentAlloc);\n+      j9thread_monitor_exit(_smallBlockListsMonitor);\n+      }\n \n    // If this is a small block try to allocate it from the appropriate\n    // fixed-size-block chain.\n    //\n    size_t const index = freeBlocksIndex(allocSize);\n-   Block * block = 0;\n-   Block * prev = 0;\n-   for (\n-      block = _freeBlocks[index];\n-      block && block->_size < allocSize;\n-      prev = block, block = prev->next()\n-      )\n-      { TR_ASSERT(index == 0, \"Iterating through a fixed-size block bin.\"); }\n-\n-   if (block)\n+   if (index != 0) // fixed-size-block chain\n       {\n-\n-      TR_ASSERT(\n-         ( index == 0 ) || ( block->_size == allocSize ),\n-         \"block %p in chain for index %d has size %d (not %d)\\n\",\n-         block,\n-         index,\n-         block->_size,\n-         (index * sizeof(void *)) + sizeof(Block)\n-         );\n-\n-      if (prev)\n-         prev->_next = block->next();\n-      else\n+      j9thread_monitor_enter(_smallBlockListsMonitor);\n+      Block * block = _freeBlocks[index];\n+      if (block)\n+         {\n          _freeBlocks[index] = block->next();\n-\n-      block->_next = NULL;\n-\n-      size_t const excess = block->_size - allocSize;\n-\n-      if (excess > sizeof(Block))\n+         block->_next = NULL;\n+         j9thread_monitor_exit(_smallBlockListsMonitor);\n+         return block + 1; // Return pointer after the header\n+         }\n+      j9thread_monitor_exit(_smallBlockListsMonitor);\n+      // Need to allocate from segment\n+      // Preemtively acquire the mutex that protects the segment allocation\n+      if (::memoryAllocMonitor)\n+         ::memoryAllocMonitor->enter();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg1MTcyNw=="}, "originalCommit": {"oid": "76e2109024567dcc6d7757bcc604ab0dc73d9649"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ3NTY2OA==", "bodyText": "If it feels cleaner I could repeat the code that does AllocateFromSegment into the two cases above (one for small blocks and one for large block)", "url": "https://github.com/eclipse-openj9/openj9/pull/10678#discussion_r494475668", "createdAt": "2020-09-24T17:04:48Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/env/PersistentAllocator.cpp", "diffHunk": "@@ -68,78 +65,133 @@ PersistentAllocator::allocate(size_t size, void *hint)\n    return alloc;\n    }\n \n+PersistentAllocator::Block *\n+PersistentAllocator::allocateFromVariableSizeListLocked(size_t allocSize)\n+   {\n+   Block * block = NULL;\n+   Block * prev = NULL;\n+   for (block = _freeBlocks[0]; block && block->_size < allocSize; prev = block, block = prev->next())\n+      {}\n+\n+   if (block)\n+      {\n+      if (prev)\n+         prev->_next = block->next();\n+      else\n+         _freeBlocks[0] = block->next();\n+\n+      block->_next = NULL;\n+      }\n+   return block;\n+   }\n+\n void *\n-PersistentAllocator::allocateLocked(size_t requestedSize)\n+PersistentAllocator::allocateInternal(size_t requestedSize)\n    {\n    TR_ASSERT( sizeof(Block) == mem_round( sizeof(Block) ),\"Persistent block size will prevent us from properly aligning allocations.\");\n    size_t const dataSize = mem_round(requestedSize);\n    size_t const allocSize = sizeof(Block) + dataSize;\n \n-   TR::AllocatedMemoryMeter::update_allocated(allocSize, persistentAlloc);\n+   if (TR::AllocatedMemoryMeter::_enabled & persistentAlloc)\n+      {\n+      // Use _smallBlockListsMonitor to protect TR::AllocatedMemoryMeter::update_allocated\n+      // because accessing the variable-size-block list protected by ::memoryAllocMonitor\n+      // takes longer and we may be penalizing access to fixed size block which should be very fast\n+      j9thread_monitor_enter(_smallBlockListsMonitor);\n+      TR::AllocatedMemoryMeter::update_allocated(allocSize, persistentAlloc);\n+      j9thread_monitor_exit(_smallBlockListsMonitor);\n+      }\n \n    // If this is a small block try to allocate it from the appropriate\n    // fixed-size-block chain.\n    //\n    size_t const index = freeBlocksIndex(allocSize);\n-   Block * block = 0;\n-   Block * prev = 0;\n-   for (\n-      block = _freeBlocks[index];\n-      block && block->_size < allocSize;\n-      prev = block, block = prev->next()\n-      )\n-      { TR_ASSERT(index == 0, \"Iterating through a fixed-size block bin.\"); }\n-\n-   if (block)\n+   if (index != 0) // fixed-size-block chain\n       {\n-\n-      TR_ASSERT(\n-         ( index == 0 ) || ( block->_size == allocSize ),\n-         \"block %p in chain for index %d has size %d (not %d)\\n\",\n-         block,\n-         index,\n-         block->_size,\n-         (index * sizeof(void *)) + sizeof(Block)\n-         );\n-\n-      if (prev)\n-         prev->_next = block->next();\n-      else\n+      j9thread_monitor_enter(_smallBlockListsMonitor);\n+      Block * block = _freeBlocks[index];\n+      if (block)\n+         {\n          _freeBlocks[index] = block->next();\n-\n-      block->_next = NULL;\n-\n-      size_t const excess = block->_size - allocSize;\n-\n-      if (excess > sizeof(Block))\n+         block->_next = NULL;\n+         j9thread_monitor_exit(_smallBlockListsMonitor);\n+         return block + 1; // Return pointer after the header\n+         }\n+      j9thread_monitor_exit(_smallBlockListsMonitor);\n+      // Need to allocate from segment\n+      // Preemtively acquire the mutex that protects the segment allocation\n+      if (::memoryAllocMonitor)\n+         ::memoryAllocMonitor->enter();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg1MTcyNw=="}, "originalCommit": {"oid": "76e2109024567dcc6d7757bcc604ab0dc73d9649"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ4MDc3OQ==", "bodyText": "Ah I see your point. Yeah I think this is one of those few places where code duplication is a good idea. It would only be a duplication of\n   allocation = allocateFromSegmentLocked(allocSize);\n   if (::memoryAllocMonitor)\n      ::memoryAllocMonitor->exit();\n\nin both the if and else blocks, so I think the duplication is well worth the increased clarity it would provide.", "url": "https://github.com/eclipse-openj9/openj9/pull/10678#discussion_r494480779", "createdAt": "2020-09-24T17:13:29Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/env/PersistentAllocator.cpp", "diffHunk": "@@ -68,78 +65,133 @@ PersistentAllocator::allocate(size_t size, void *hint)\n    return alloc;\n    }\n \n+PersistentAllocator::Block *\n+PersistentAllocator::allocateFromVariableSizeListLocked(size_t allocSize)\n+   {\n+   Block * block = NULL;\n+   Block * prev = NULL;\n+   for (block = _freeBlocks[0]; block && block->_size < allocSize; prev = block, block = prev->next())\n+      {}\n+\n+   if (block)\n+      {\n+      if (prev)\n+         prev->_next = block->next();\n+      else\n+         _freeBlocks[0] = block->next();\n+\n+      block->_next = NULL;\n+      }\n+   return block;\n+   }\n+\n void *\n-PersistentAllocator::allocateLocked(size_t requestedSize)\n+PersistentAllocator::allocateInternal(size_t requestedSize)\n    {\n    TR_ASSERT( sizeof(Block) == mem_round( sizeof(Block) ),\"Persistent block size will prevent us from properly aligning allocations.\");\n    size_t const dataSize = mem_round(requestedSize);\n    size_t const allocSize = sizeof(Block) + dataSize;\n \n-   TR::AllocatedMemoryMeter::update_allocated(allocSize, persistentAlloc);\n+   if (TR::AllocatedMemoryMeter::_enabled & persistentAlloc)\n+      {\n+      // Use _smallBlockListsMonitor to protect TR::AllocatedMemoryMeter::update_allocated\n+      // because accessing the variable-size-block list protected by ::memoryAllocMonitor\n+      // takes longer and we may be penalizing access to fixed size block which should be very fast\n+      j9thread_monitor_enter(_smallBlockListsMonitor);\n+      TR::AllocatedMemoryMeter::update_allocated(allocSize, persistentAlloc);\n+      j9thread_monitor_exit(_smallBlockListsMonitor);\n+      }\n \n    // If this is a small block try to allocate it from the appropriate\n    // fixed-size-block chain.\n    //\n    size_t const index = freeBlocksIndex(allocSize);\n-   Block * block = 0;\n-   Block * prev = 0;\n-   for (\n-      block = _freeBlocks[index];\n-      block && block->_size < allocSize;\n-      prev = block, block = prev->next()\n-      )\n-      { TR_ASSERT(index == 0, \"Iterating through a fixed-size block bin.\"); }\n-\n-   if (block)\n+   if (index != 0) // fixed-size-block chain\n       {\n-\n-      TR_ASSERT(\n-         ( index == 0 ) || ( block->_size == allocSize ),\n-         \"block %p in chain for index %d has size %d (not %d)\\n\",\n-         block,\n-         index,\n-         block->_size,\n-         (index * sizeof(void *)) + sizeof(Block)\n-         );\n-\n-      if (prev)\n-         prev->_next = block->next();\n-      else\n+      j9thread_monitor_enter(_smallBlockListsMonitor);\n+      Block * block = _freeBlocks[index];\n+      if (block)\n+         {\n          _freeBlocks[index] = block->next();\n-\n-      block->_next = NULL;\n-\n-      size_t const excess = block->_size - allocSize;\n-\n-      if (excess > sizeof(Block))\n+         block->_next = NULL;\n+         j9thread_monitor_exit(_smallBlockListsMonitor);\n+         return block + 1; // Return pointer after the header\n+         }\n+      j9thread_monitor_exit(_smallBlockListsMonitor);\n+      // Need to allocate from segment\n+      // Preemtively acquire the mutex that protects the segment allocation\n+      if (::memoryAllocMonitor)\n+         ::memoryAllocMonitor->enter();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg1MTcyNw=="}, "originalCommit": {"oid": "76e2109024567dcc6d7757bcc604ab0dc73d9649"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDc0ODI3OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/env/PersistentAllocator.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxOTo0NTo1MVrOHW-W9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMDoyOToxMVrOHW_xWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg1MjQwNg==", "bodyText": "Better to use OMR::CriticalSection. Is it ever possible that ::memoryAllocMonitor is NULL? Wouldn't that cause all sorts of issues?", "url": "https://github.com/eclipse-openj9/openj9/pull/10678#discussion_r493852406", "createdAt": "2020-09-23T19:45:51Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/env/PersistentAllocator.cpp", "diffHunk": "@@ -68,78 +65,133 @@ PersistentAllocator::allocate(size_t size, void *hint)\n    return alloc;\n    }\n \n+PersistentAllocator::Block *\n+PersistentAllocator::allocateFromVariableSizeListLocked(size_t allocSize)\n+   {\n+   Block * block = NULL;\n+   Block * prev = NULL;\n+   for (block = _freeBlocks[0]; block && block->_size < allocSize; prev = block, block = prev->next())\n+      {}\n+\n+   if (block)\n+      {\n+      if (prev)\n+         prev->_next = block->next();\n+      else\n+         _freeBlocks[0] = block->next();\n+\n+      block->_next = NULL;\n+      }\n+   return block;\n+   }\n+\n void *\n-PersistentAllocator::allocateLocked(size_t requestedSize)\n+PersistentAllocator::allocateInternal(size_t requestedSize)\n    {\n    TR_ASSERT( sizeof(Block) == mem_round( sizeof(Block) ),\"Persistent block size will prevent us from properly aligning allocations.\");\n    size_t const dataSize = mem_round(requestedSize);\n    size_t const allocSize = sizeof(Block) + dataSize;\n \n-   TR::AllocatedMemoryMeter::update_allocated(allocSize, persistentAlloc);\n+   if (TR::AllocatedMemoryMeter::_enabled & persistentAlloc)\n+      {\n+      // Use _smallBlockListsMonitor to protect TR::AllocatedMemoryMeter::update_allocated\n+      // because accessing the variable-size-block list protected by ::memoryAllocMonitor\n+      // takes longer and we may be penalizing access to fixed size block which should be very fast\n+      j9thread_monitor_enter(_smallBlockListsMonitor);\n+      TR::AllocatedMemoryMeter::update_allocated(allocSize, persistentAlloc);\n+      j9thread_monitor_exit(_smallBlockListsMonitor);\n+      }\n \n    // If this is a small block try to allocate it from the appropriate\n    // fixed-size-block chain.\n    //\n    size_t const index = freeBlocksIndex(allocSize);\n-   Block * block = 0;\n-   Block * prev = 0;\n-   for (\n-      block = _freeBlocks[index];\n-      block && block->_size < allocSize;\n-      prev = block, block = prev->next()\n-      )\n-      { TR_ASSERT(index == 0, \"Iterating through a fixed-size block bin.\"); }\n-\n-   if (block)\n+   if (index != 0) // fixed-size-block chain\n       {\n-\n-      TR_ASSERT(\n-         ( index == 0 ) || ( block->_size == allocSize ),\n-         \"block %p in chain for index %d has size %d (not %d)\\n\",\n-         block,\n-         index,\n-         block->_size,\n-         (index * sizeof(void *)) + sizeof(Block)\n-         );\n-\n-      if (prev)\n-         prev->_next = block->next();\n-      else\n+      j9thread_monitor_enter(_smallBlockListsMonitor);\n+      Block * block = _freeBlocks[index];\n+      if (block)\n+         {\n          _freeBlocks[index] = block->next();\n-\n-      block->_next = NULL;\n-\n-      size_t const excess = block->_size - allocSize;\n-\n-      if (excess > sizeof(Block))\n+         block->_next = NULL;\n+         j9thread_monitor_exit(_smallBlockListsMonitor);\n+         return block + 1; // Return pointer after the header\n+         }\n+      j9thread_monitor_exit(_smallBlockListsMonitor);\n+      // Need to allocate from segment\n+      // Preemtively acquire the mutex that protects the segment allocation\n+      if (::memoryAllocMonitor)\n+         ::memoryAllocMonitor->enter();\n+      }\n+   else // Variable size block allocation\n+      {\n+      if (::memoryAllocMonitor)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76e2109024567dcc6d7757bcc604ab0dc73d9649"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg3NTU0NQ==", "bodyText": "Yes ::memoryAllocMonitor can be NULL very early on, during JIT initialization. Because there is only one thread there are no race conditions", "url": "https://github.com/eclipse-openj9/openj9/pull/10678#discussion_r493875545", "createdAt": "2020-09-23T20:29:11Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/env/PersistentAllocator.cpp", "diffHunk": "@@ -68,78 +65,133 @@ PersistentAllocator::allocate(size_t size, void *hint)\n    return alloc;\n    }\n \n+PersistentAllocator::Block *\n+PersistentAllocator::allocateFromVariableSizeListLocked(size_t allocSize)\n+   {\n+   Block * block = NULL;\n+   Block * prev = NULL;\n+   for (block = _freeBlocks[0]; block && block->_size < allocSize; prev = block, block = prev->next())\n+      {}\n+\n+   if (block)\n+      {\n+      if (prev)\n+         prev->_next = block->next();\n+      else\n+         _freeBlocks[0] = block->next();\n+\n+      block->_next = NULL;\n+      }\n+   return block;\n+   }\n+\n void *\n-PersistentAllocator::allocateLocked(size_t requestedSize)\n+PersistentAllocator::allocateInternal(size_t requestedSize)\n    {\n    TR_ASSERT( sizeof(Block) == mem_round( sizeof(Block) ),\"Persistent block size will prevent us from properly aligning allocations.\");\n    size_t const dataSize = mem_round(requestedSize);\n    size_t const allocSize = sizeof(Block) + dataSize;\n \n-   TR::AllocatedMemoryMeter::update_allocated(allocSize, persistentAlloc);\n+   if (TR::AllocatedMemoryMeter::_enabled & persistentAlloc)\n+      {\n+      // Use _smallBlockListsMonitor to protect TR::AllocatedMemoryMeter::update_allocated\n+      // because accessing the variable-size-block list protected by ::memoryAllocMonitor\n+      // takes longer and we may be penalizing access to fixed size block which should be very fast\n+      j9thread_monitor_enter(_smallBlockListsMonitor);\n+      TR::AllocatedMemoryMeter::update_allocated(allocSize, persistentAlloc);\n+      j9thread_monitor_exit(_smallBlockListsMonitor);\n+      }\n \n    // If this is a small block try to allocate it from the appropriate\n    // fixed-size-block chain.\n    //\n    size_t const index = freeBlocksIndex(allocSize);\n-   Block * block = 0;\n-   Block * prev = 0;\n-   for (\n-      block = _freeBlocks[index];\n-      block && block->_size < allocSize;\n-      prev = block, block = prev->next()\n-      )\n-      { TR_ASSERT(index == 0, \"Iterating through a fixed-size block bin.\"); }\n-\n-   if (block)\n+   if (index != 0) // fixed-size-block chain\n       {\n-\n-      TR_ASSERT(\n-         ( index == 0 ) || ( block->_size == allocSize ),\n-         \"block %p in chain for index %d has size %d (not %d)\\n\",\n-         block,\n-         index,\n-         block->_size,\n-         (index * sizeof(void *)) + sizeof(Block)\n-         );\n-\n-      if (prev)\n-         prev->_next = block->next();\n-      else\n+      j9thread_monitor_enter(_smallBlockListsMonitor);\n+      Block * block = _freeBlocks[index];\n+      if (block)\n+         {\n          _freeBlocks[index] = block->next();\n-\n-      block->_next = NULL;\n-\n-      size_t const excess = block->_size - allocSize;\n-\n-      if (excess > sizeof(Block))\n+         block->_next = NULL;\n+         j9thread_monitor_exit(_smallBlockListsMonitor);\n+         return block + 1; // Return pointer after the header\n+         }\n+      j9thread_monitor_exit(_smallBlockListsMonitor);\n+      // Need to allocate from segment\n+      // Preemtively acquire the mutex that protects the segment allocation\n+      if (::memoryAllocMonitor)\n+         ::memoryAllocMonitor->enter();\n+      }\n+   else // Variable size block allocation\n+      {\n+      if (::memoryAllocMonitor)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg1MjQwNg=="}, "originalCommit": {"oid": "76e2109024567dcc6d7757bcc604ab0dc73d9649"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDc3MjYxOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/env/PersistentAllocator.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxOTo1Mjo1MlrOHW-l-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMDozMDowOFrOHW_zUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg1NjI1MA==", "bodyText": "Might be worth just 1. using OMR::CriticalSection, and 2. moving the critical section to inside freeFixedSizeBlock.\nAn unfortunate side effect of using a critical section for ::memoryAllocMonitor though is that we'll end up acquiring both monitors here. Maybe this is an infrequent enough scenario that it shouldn't be a problem?", "url": "https://github.com/eclipse-openj9/openj9/pull/10678#discussion_r493856250", "createdAt": "2020-09-23T19:52:52Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/env/PersistentAllocator.cpp", "diffHunk": "@@ -68,78 +65,133 @@ PersistentAllocator::allocate(size_t size, void *hint)\n    return alloc;\n    }\n \n+PersistentAllocator::Block *\n+PersistentAllocator::allocateFromVariableSizeListLocked(size_t allocSize)\n+   {\n+   Block * block = NULL;\n+   Block * prev = NULL;\n+   for (block = _freeBlocks[0]; block && block->_size < allocSize; prev = block, block = prev->next())\n+      {}\n+\n+   if (block)\n+      {\n+      if (prev)\n+         prev->_next = block->next();\n+      else\n+         _freeBlocks[0] = block->next();\n+\n+      block->_next = NULL;\n+      }\n+   return block;\n+   }\n+\n void *\n-PersistentAllocator::allocateLocked(size_t requestedSize)\n+PersistentAllocator::allocateInternal(size_t requestedSize)\n    {\n    TR_ASSERT( sizeof(Block) == mem_round( sizeof(Block) ),\"Persistent block size will prevent us from properly aligning allocations.\");\n    size_t const dataSize = mem_round(requestedSize);\n    size_t const allocSize = sizeof(Block) + dataSize;\n \n-   TR::AllocatedMemoryMeter::update_allocated(allocSize, persistentAlloc);\n+   if (TR::AllocatedMemoryMeter::_enabled & persistentAlloc)\n+      {\n+      // Use _smallBlockListsMonitor to protect TR::AllocatedMemoryMeter::update_allocated\n+      // because accessing the variable-size-block list protected by ::memoryAllocMonitor\n+      // takes longer and we may be penalizing access to fixed size block which should be very fast\n+      j9thread_monitor_enter(_smallBlockListsMonitor);\n+      TR::AllocatedMemoryMeter::update_allocated(allocSize, persistentAlloc);\n+      j9thread_monitor_exit(_smallBlockListsMonitor);\n+      }\n \n    // If this is a small block try to allocate it from the appropriate\n    // fixed-size-block chain.\n    //\n    size_t const index = freeBlocksIndex(allocSize);\n-   Block * block = 0;\n-   Block * prev = 0;\n-   for (\n-      block = _freeBlocks[index];\n-      block && block->_size < allocSize;\n-      prev = block, block = prev->next()\n-      )\n-      { TR_ASSERT(index == 0, \"Iterating through a fixed-size block bin.\"); }\n-\n-   if (block)\n+   if (index != 0) // fixed-size-block chain\n       {\n-\n-      TR_ASSERT(\n-         ( index == 0 ) || ( block->_size == allocSize ),\n-         \"block %p in chain for index %d has size %d (not %d)\\n\",\n-         block,\n-         index,\n-         block->_size,\n-         (index * sizeof(void *)) + sizeof(Block)\n-         );\n-\n-      if (prev)\n-         prev->_next = block->next();\n-      else\n+      j9thread_monitor_enter(_smallBlockListsMonitor);\n+      Block * block = _freeBlocks[index];\n+      if (block)\n+         {\n          _freeBlocks[index] = block->next();\n-\n-      block->_next = NULL;\n-\n-      size_t const excess = block->_size - allocSize;\n-\n-      if (excess > sizeof(Block))\n+         block->_next = NULL;\n+         j9thread_monitor_exit(_smallBlockListsMonitor);\n+         return block + 1; // Return pointer after the header\n+         }\n+      j9thread_monitor_exit(_smallBlockListsMonitor);\n+      // Need to allocate from segment\n+      // Preemtively acquire the mutex that protects the segment allocation\n+      if (::memoryAllocMonitor)\n+         ::memoryAllocMonitor->enter();\n+      }\n+   else // Variable size block allocation\n+      {\n+      if (::memoryAllocMonitor)\n+         ::memoryAllocMonitor->enter();\n+      Block * block = allocateFromVariableSizeListLocked(allocSize);\n+      if (block)\n          {\n-         block->_size = allocSize;\n-         freeBlock( new (pointer_cast<uint8_t *>(block) + allocSize) Block(excess) );\n+         // If the block I found is bigger than what I need,\n+         // split it and put the remaining block back onto the free list\n+         size_t const excess = block->_size - allocSize;\n+         if (excess > sizeof(Block))\n+            {\n+            block->_size = allocSize;\n+            const size_t excessIndex = freeBlocksIndex(excess);\n+            if (excessIndex > 0)\n+               {\n+               // Exit the variable size list monitor and grab a fixed size list monitor\n+               if (::memoryAllocMonitor)\n+                  ::memoryAllocMonitor->exit();\n+\n+               j9thread_monitor_enter(_smallBlockListsMonitor);\n+               freeFixedSizeBlock( new (pointer_cast<uint8_t *>(block) + allocSize) Block(excess) );\n+               j9thread_monitor_exit(_smallBlockListsMonitor);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76e2109024567dcc6d7757bcc604ab0dc73d9649"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg3NjA0OQ==", "bodyText": "As stated above a goal of this implementation was to reduce the number of monitor->enter()/monitor->exit() as much as possible.", "url": "https://github.com/eclipse-openj9/openj9/pull/10678#discussion_r493876049", "createdAt": "2020-09-23T20:30:08Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/env/PersistentAllocator.cpp", "diffHunk": "@@ -68,78 +65,133 @@ PersistentAllocator::allocate(size_t size, void *hint)\n    return alloc;\n    }\n \n+PersistentAllocator::Block *\n+PersistentAllocator::allocateFromVariableSizeListLocked(size_t allocSize)\n+   {\n+   Block * block = NULL;\n+   Block * prev = NULL;\n+   for (block = _freeBlocks[0]; block && block->_size < allocSize; prev = block, block = prev->next())\n+      {}\n+\n+   if (block)\n+      {\n+      if (prev)\n+         prev->_next = block->next();\n+      else\n+         _freeBlocks[0] = block->next();\n+\n+      block->_next = NULL;\n+      }\n+   return block;\n+   }\n+\n void *\n-PersistentAllocator::allocateLocked(size_t requestedSize)\n+PersistentAllocator::allocateInternal(size_t requestedSize)\n    {\n    TR_ASSERT( sizeof(Block) == mem_round( sizeof(Block) ),\"Persistent block size will prevent us from properly aligning allocations.\");\n    size_t const dataSize = mem_round(requestedSize);\n    size_t const allocSize = sizeof(Block) + dataSize;\n \n-   TR::AllocatedMemoryMeter::update_allocated(allocSize, persistentAlloc);\n+   if (TR::AllocatedMemoryMeter::_enabled & persistentAlloc)\n+      {\n+      // Use _smallBlockListsMonitor to protect TR::AllocatedMemoryMeter::update_allocated\n+      // because accessing the variable-size-block list protected by ::memoryAllocMonitor\n+      // takes longer and we may be penalizing access to fixed size block which should be very fast\n+      j9thread_monitor_enter(_smallBlockListsMonitor);\n+      TR::AllocatedMemoryMeter::update_allocated(allocSize, persistentAlloc);\n+      j9thread_monitor_exit(_smallBlockListsMonitor);\n+      }\n \n    // If this is a small block try to allocate it from the appropriate\n    // fixed-size-block chain.\n    //\n    size_t const index = freeBlocksIndex(allocSize);\n-   Block * block = 0;\n-   Block * prev = 0;\n-   for (\n-      block = _freeBlocks[index];\n-      block && block->_size < allocSize;\n-      prev = block, block = prev->next()\n-      )\n-      { TR_ASSERT(index == 0, \"Iterating through a fixed-size block bin.\"); }\n-\n-   if (block)\n+   if (index != 0) // fixed-size-block chain\n       {\n-\n-      TR_ASSERT(\n-         ( index == 0 ) || ( block->_size == allocSize ),\n-         \"block %p in chain for index %d has size %d (not %d)\\n\",\n-         block,\n-         index,\n-         block->_size,\n-         (index * sizeof(void *)) + sizeof(Block)\n-         );\n-\n-      if (prev)\n-         prev->_next = block->next();\n-      else\n+      j9thread_monitor_enter(_smallBlockListsMonitor);\n+      Block * block = _freeBlocks[index];\n+      if (block)\n+         {\n          _freeBlocks[index] = block->next();\n-\n-      block->_next = NULL;\n-\n-      size_t const excess = block->_size - allocSize;\n-\n-      if (excess > sizeof(Block))\n+         block->_next = NULL;\n+         j9thread_monitor_exit(_smallBlockListsMonitor);\n+         return block + 1; // Return pointer after the header\n+         }\n+      j9thread_monitor_exit(_smallBlockListsMonitor);\n+      // Need to allocate from segment\n+      // Preemtively acquire the mutex that protects the segment allocation\n+      if (::memoryAllocMonitor)\n+         ::memoryAllocMonitor->enter();\n+      }\n+   else // Variable size block allocation\n+      {\n+      if (::memoryAllocMonitor)\n+         ::memoryAllocMonitor->enter();\n+      Block * block = allocateFromVariableSizeListLocked(allocSize);\n+      if (block)\n          {\n-         block->_size = allocSize;\n-         freeBlock( new (pointer_cast<uint8_t *>(block) + allocSize) Block(excess) );\n+         // If the block I found is bigger than what I need,\n+         // split it and put the remaining block back onto the free list\n+         size_t const excess = block->_size - allocSize;\n+         if (excess > sizeof(Block))\n+            {\n+            block->_size = allocSize;\n+            const size_t excessIndex = freeBlocksIndex(excess);\n+            if (excessIndex > 0)\n+               {\n+               // Exit the variable size list monitor and grab a fixed size list monitor\n+               if (::memoryAllocMonitor)\n+                  ::memoryAllocMonitor->exit();\n+\n+               j9thread_monitor_enter(_smallBlockListsMonitor);\n+               freeFixedSizeBlock( new (pointer_cast<uint8_t *>(block) + allocSize) Block(excess) );\n+               j9thread_monitor_exit(_smallBlockListsMonitor);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg1NjI1MA=="}, "originalCommit": {"oid": "76e2109024567dcc6d7757bcc604ab0dc73d9649"}, "originalPosition": 158}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDc3OTc5OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/env/PersistentAllocator.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxOTo1NTowMlrOHW-qiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMDozMDoxN1rOHW_zmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg1NzQxOQ==", "bodyText": "Same comment as above regarding literal 0.", "url": "https://github.com/eclipse-openj9/openj9/pull/10678#discussion_r493857419", "createdAt": "2020-09-23T19:55:02Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/env/PersistentAllocator.cpp", "diffHunk": "@@ -68,78 +65,133 @@ PersistentAllocator::allocate(size_t size, void *hint)\n    return alloc;\n    }\n \n+PersistentAllocator::Block *\n+PersistentAllocator::allocateFromVariableSizeListLocked(size_t allocSize)\n+   {\n+   Block * block = NULL;\n+   Block * prev = NULL;\n+   for (block = _freeBlocks[0]; block && block->_size < allocSize; prev = block, block = prev->next())\n+      {}\n+\n+   if (block)\n+      {\n+      if (prev)\n+         prev->_next = block->next();\n+      else\n+         _freeBlocks[0] = block->next();\n+\n+      block->_next = NULL;\n+      }\n+   return block;\n+   }\n+\n void *\n-PersistentAllocator::allocateLocked(size_t requestedSize)\n+PersistentAllocator::allocateInternal(size_t requestedSize)\n    {\n    TR_ASSERT( sizeof(Block) == mem_round( sizeof(Block) ),\"Persistent block size will prevent us from properly aligning allocations.\");\n    size_t const dataSize = mem_round(requestedSize);\n    size_t const allocSize = sizeof(Block) + dataSize;\n \n-   TR::AllocatedMemoryMeter::update_allocated(allocSize, persistentAlloc);\n+   if (TR::AllocatedMemoryMeter::_enabled & persistentAlloc)\n+      {\n+      // Use _smallBlockListsMonitor to protect TR::AllocatedMemoryMeter::update_allocated\n+      // because accessing the variable-size-block list protected by ::memoryAllocMonitor\n+      // takes longer and we may be penalizing access to fixed size block which should be very fast\n+      j9thread_monitor_enter(_smallBlockListsMonitor);\n+      TR::AllocatedMemoryMeter::update_allocated(allocSize, persistentAlloc);\n+      j9thread_monitor_exit(_smallBlockListsMonitor);\n+      }\n \n    // If this is a small block try to allocate it from the appropriate\n    // fixed-size-block chain.\n    //\n    size_t const index = freeBlocksIndex(allocSize);\n-   Block * block = 0;\n-   Block * prev = 0;\n-   for (\n-      block = _freeBlocks[index];\n-      block && block->_size < allocSize;\n-      prev = block, block = prev->next()\n-      )\n-      { TR_ASSERT(index == 0, \"Iterating through a fixed-size block bin.\"); }\n-\n-   if (block)\n+   if (index != 0) // fixed-size-block chain\n       {\n-\n-      TR_ASSERT(\n-         ( index == 0 ) || ( block->_size == allocSize ),\n-         \"block %p in chain for index %d has size %d (not %d)\\n\",\n-         block,\n-         index,\n-         block->_size,\n-         (index * sizeof(void *)) + sizeof(Block)\n-         );\n-\n-      if (prev)\n-         prev->_next = block->next();\n-      else\n+      j9thread_monitor_enter(_smallBlockListsMonitor);\n+      Block * block = _freeBlocks[index];\n+      if (block)\n+         {\n          _freeBlocks[index] = block->next();\n-\n-      block->_next = NULL;\n-\n-      size_t const excess = block->_size - allocSize;\n-\n-      if (excess > sizeof(Block))\n+         block->_next = NULL;\n+         j9thread_monitor_exit(_smallBlockListsMonitor);\n+         return block + 1; // Return pointer after the header\n+         }\n+      j9thread_monitor_exit(_smallBlockListsMonitor);\n+      // Need to allocate from segment\n+      // Preemtively acquire the mutex that protects the segment allocation\n+      if (::memoryAllocMonitor)\n+         ::memoryAllocMonitor->enter();\n+      }\n+   else // Variable size block allocation\n+      {\n+      if (::memoryAllocMonitor)\n+         ::memoryAllocMonitor->enter();\n+      Block * block = allocateFromVariableSizeListLocked(allocSize);\n+      if (block)\n          {\n-         block->_size = allocSize;\n-         freeBlock( new (pointer_cast<uint8_t *>(block) + allocSize) Block(excess) );\n+         // If the block I found is bigger than what I need,\n+         // split it and put the remaining block back onto the free list\n+         size_t const excess = block->_size - allocSize;\n+         if (excess > sizeof(Block))\n+            {\n+            block->_size = allocSize;\n+            const size_t excessIndex = freeBlocksIndex(excess);\n+            if (excessIndex > 0)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76e2109024567dcc6d7757bcc604ab0dc73d9649"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg3NjEyMw==", "bodyText": "ok", "url": "https://github.com/eclipse-openj9/openj9/pull/10678#discussion_r493876123", "createdAt": "2020-09-23T20:30:17Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/env/PersistentAllocator.cpp", "diffHunk": "@@ -68,78 +65,133 @@ PersistentAllocator::allocate(size_t size, void *hint)\n    return alloc;\n    }\n \n+PersistentAllocator::Block *\n+PersistentAllocator::allocateFromVariableSizeListLocked(size_t allocSize)\n+   {\n+   Block * block = NULL;\n+   Block * prev = NULL;\n+   for (block = _freeBlocks[0]; block && block->_size < allocSize; prev = block, block = prev->next())\n+      {}\n+\n+   if (block)\n+      {\n+      if (prev)\n+         prev->_next = block->next();\n+      else\n+         _freeBlocks[0] = block->next();\n+\n+      block->_next = NULL;\n+      }\n+   return block;\n+   }\n+\n void *\n-PersistentAllocator::allocateLocked(size_t requestedSize)\n+PersistentAllocator::allocateInternal(size_t requestedSize)\n    {\n    TR_ASSERT( sizeof(Block) == mem_round( sizeof(Block) ),\"Persistent block size will prevent us from properly aligning allocations.\");\n    size_t const dataSize = mem_round(requestedSize);\n    size_t const allocSize = sizeof(Block) + dataSize;\n \n-   TR::AllocatedMemoryMeter::update_allocated(allocSize, persistentAlloc);\n+   if (TR::AllocatedMemoryMeter::_enabled & persistentAlloc)\n+      {\n+      // Use _smallBlockListsMonitor to protect TR::AllocatedMemoryMeter::update_allocated\n+      // because accessing the variable-size-block list protected by ::memoryAllocMonitor\n+      // takes longer and we may be penalizing access to fixed size block which should be very fast\n+      j9thread_monitor_enter(_smallBlockListsMonitor);\n+      TR::AllocatedMemoryMeter::update_allocated(allocSize, persistentAlloc);\n+      j9thread_monitor_exit(_smallBlockListsMonitor);\n+      }\n \n    // If this is a small block try to allocate it from the appropriate\n    // fixed-size-block chain.\n    //\n    size_t const index = freeBlocksIndex(allocSize);\n-   Block * block = 0;\n-   Block * prev = 0;\n-   for (\n-      block = _freeBlocks[index];\n-      block && block->_size < allocSize;\n-      prev = block, block = prev->next()\n-      )\n-      { TR_ASSERT(index == 0, \"Iterating through a fixed-size block bin.\"); }\n-\n-   if (block)\n+   if (index != 0) // fixed-size-block chain\n       {\n-\n-      TR_ASSERT(\n-         ( index == 0 ) || ( block->_size == allocSize ),\n-         \"block %p in chain for index %d has size %d (not %d)\\n\",\n-         block,\n-         index,\n-         block->_size,\n-         (index * sizeof(void *)) + sizeof(Block)\n-         );\n-\n-      if (prev)\n-         prev->_next = block->next();\n-      else\n+      j9thread_monitor_enter(_smallBlockListsMonitor);\n+      Block * block = _freeBlocks[index];\n+      if (block)\n+         {\n          _freeBlocks[index] = block->next();\n-\n-      block->_next = NULL;\n-\n-      size_t const excess = block->_size - allocSize;\n-\n-      if (excess > sizeof(Block))\n+         block->_next = NULL;\n+         j9thread_monitor_exit(_smallBlockListsMonitor);\n+         return block + 1; // Return pointer after the header\n+         }\n+      j9thread_monitor_exit(_smallBlockListsMonitor);\n+      // Need to allocate from segment\n+      // Preemtively acquire the mutex that protects the segment allocation\n+      if (::memoryAllocMonitor)\n+         ::memoryAllocMonitor->enter();\n+      }\n+   else // Variable size block allocation\n+      {\n+      if (::memoryAllocMonitor)\n+         ::memoryAllocMonitor->enter();\n+      Block * block = allocateFromVariableSizeListLocked(allocSize);\n+      if (block)\n          {\n-         block->_size = allocSize;\n-         freeBlock( new (pointer_cast<uint8_t *>(block) + allocSize) Block(excess) );\n+         // If the block I found is bigger than what I need,\n+         // split it and put the remaining block back onto the free list\n+         size_t const excess = block->_size - allocSize;\n+         if (excess > sizeof(Block))\n+            {\n+            block->_size = allocSize;\n+            const size_t excessIndex = freeBlocksIndex(excess);\n+            if (excessIndex > 0)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg1NzQxOQ=="}, "originalCommit": {"oid": "76e2109024567dcc6d7757bcc604ab0dc73d9649"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDc4MTgxOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/env/PersistentAllocator.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxOTo1NTozOFrOHW-r0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxOTo1NjoxOVrOHW-tPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg1Nzc0NA==", "bodyText": "As stated above, better to use a critical section here in a nested scope.", "url": "https://github.com/eclipse-openj9/openj9/pull/10678#discussion_r493857744", "createdAt": "2020-09-23T19:55:38Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/env/PersistentAllocator.cpp", "diffHunk": "@@ -68,78 +65,133 @@ PersistentAllocator::allocate(size_t size, void *hint)\n    return alloc;\n    }\n \n+PersistentAllocator::Block *\n+PersistentAllocator::allocateFromVariableSizeListLocked(size_t allocSize)\n+   {\n+   Block * block = NULL;\n+   Block * prev = NULL;\n+   for (block = _freeBlocks[0]; block && block->_size < allocSize; prev = block, block = prev->next())\n+      {}\n+\n+   if (block)\n+      {\n+      if (prev)\n+         prev->_next = block->next();\n+      else\n+         _freeBlocks[0] = block->next();\n+\n+      block->_next = NULL;\n+      }\n+   return block;\n+   }\n+\n void *\n-PersistentAllocator::allocateLocked(size_t requestedSize)\n+PersistentAllocator::allocateInternal(size_t requestedSize)\n    {\n    TR_ASSERT( sizeof(Block) == mem_round( sizeof(Block) ),\"Persistent block size will prevent us from properly aligning allocations.\");\n    size_t const dataSize = mem_round(requestedSize);\n    size_t const allocSize = sizeof(Block) + dataSize;\n \n-   TR::AllocatedMemoryMeter::update_allocated(allocSize, persistentAlloc);\n+   if (TR::AllocatedMemoryMeter::_enabled & persistentAlloc)\n+      {\n+      // Use _smallBlockListsMonitor to protect TR::AllocatedMemoryMeter::update_allocated\n+      // because accessing the variable-size-block list protected by ::memoryAllocMonitor\n+      // takes longer and we may be penalizing access to fixed size block which should be very fast\n+      j9thread_monitor_enter(_smallBlockListsMonitor);\n+      TR::AllocatedMemoryMeter::update_allocated(allocSize, persistentAlloc);\n+      j9thread_monitor_exit(_smallBlockListsMonitor);\n+      }\n \n    // If this is a small block try to allocate it from the appropriate\n    // fixed-size-block chain.\n    //\n    size_t const index = freeBlocksIndex(allocSize);\n-   Block * block = 0;\n-   Block * prev = 0;\n-   for (\n-      block = _freeBlocks[index];\n-      block && block->_size < allocSize;\n-      prev = block, block = prev->next()\n-      )\n-      { TR_ASSERT(index == 0, \"Iterating through a fixed-size block bin.\"); }\n-\n-   if (block)\n+   if (index != 0) // fixed-size-block chain\n       {\n-\n-      TR_ASSERT(\n-         ( index == 0 ) || ( block->_size == allocSize ),\n-         \"block %p in chain for index %d has size %d (not %d)\\n\",\n-         block,\n-         index,\n-         block->_size,\n-         (index * sizeof(void *)) + sizeof(Block)\n-         );\n-\n-      if (prev)\n-         prev->_next = block->next();\n-      else\n+      j9thread_monitor_enter(_smallBlockListsMonitor);\n+      Block * block = _freeBlocks[index];\n+      if (block)\n+         {\n          _freeBlocks[index] = block->next();\n-\n-      block->_next = NULL;\n-\n-      size_t const excess = block->_size - allocSize;\n-\n-      if (excess > sizeof(Block))\n+         block->_next = NULL;\n+         j9thread_monitor_exit(_smallBlockListsMonitor);\n+         return block + 1; // Return pointer after the header\n+         }\n+      j9thread_monitor_exit(_smallBlockListsMonitor);\n+      // Need to allocate from segment\n+      // Preemtively acquire the mutex that protects the segment allocation\n+      if (::memoryAllocMonitor)\n+         ::memoryAllocMonitor->enter();\n+      }\n+   else // Variable size block allocation\n+      {\n+      if (::memoryAllocMonitor)\n+         ::memoryAllocMonitor->enter();\n+      Block * block = allocateFromVariableSizeListLocked(allocSize);\n+      if (block)\n          {\n-         block->_size = allocSize;\n-         freeBlock( new (pointer_cast<uint8_t *>(block) + allocSize) Block(excess) );\n+         // If the block I found is bigger than what I need,\n+         // split it and put the remaining block back onto the free list\n+         size_t const excess = block->_size - allocSize;\n+         if (excess > sizeof(Block))\n+            {\n+            block->_size = allocSize;\n+            const size_t excessIndex = freeBlocksIndex(excess);\n+            if (excessIndex > 0)\n+               {\n+               // Exit the variable size list monitor and grab a fixed size list monitor\n+               if (::memoryAllocMonitor)\n+                  ::memoryAllocMonitor->exit();\n+\n+               j9thread_monitor_enter(_smallBlockListsMonitor);\n+               freeFixedSizeBlock( new (pointer_cast<uint8_t *>(block) + allocSize) Block(excess) );\n+               j9thread_monitor_exit(_smallBlockListsMonitor);\n+               // No monitor held at this point, so we can return\n+               return block + 1;\n+               }\n+            else\n+               {\n+               freeVariableSizeBlock( new (pointer_cast<uint8_t *>(block) + allocSize) Block(excess) );\n+               }\n+            }\n+         if (::memoryAllocMonitor)\n+            ::memoryAllocMonitor->exit();\n+         return block + 1;\n          }\n-\n-      return block + 1;\n       }\n-\n+   // At this point I have to allocate memory from a segment\n    // Find the first persistent segment with enough free space\n+   // Required mutex has already been obtained\n    //\n+   void *allocation = allocateFromSegmentLocked(allocSize);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76e2109024567dcc6d7757bcc604ab0dc73d9649"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg1ODExMQ==", "bodyText": "Might even be worth considering creating the critical section inside allocateFromSegmentLocked now that I think of it.", "url": "https://github.com/eclipse-openj9/openj9/pull/10678#discussion_r493858111", "createdAt": "2020-09-23T19:56:19Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/env/PersistentAllocator.cpp", "diffHunk": "@@ -68,78 +65,133 @@ PersistentAllocator::allocate(size_t size, void *hint)\n    return alloc;\n    }\n \n+PersistentAllocator::Block *\n+PersistentAllocator::allocateFromVariableSizeListLocked(size_t allocSize)\n+   {\n+   Block * block = NULL;\n+   Block * prev = NULL;\n+   for (block = _freeBlocks[0]; block && block->_size < allocSize; prev = block, block = prev->next())\n+      {}\n+\n+   if (block)\n+      {\n+      if (prev)\n+         prev->_next = block->next();\n+      else\n+         _freeBlocks[0] = block->next();\n+\n+      block->_next = NULL;\n+      }\n+   return block;\n+   }\n+\n void *\n-PersistentAllocator::allocateLocked(size_t requestedSize)\n+PersistentAllocator::allocateInternal(size_t requestedSize)\n    {\n    TR_ASSERT( sizeof(Block) == mem_round( sizeof(Block) ),\"Persistent block size will prevent us from properly aligning allocations.\");\n    size_t const dataSize = mem_round(requestedSize);\n    size_t const allocSize = sizeof(Block) + dataSize;\n \n-   TR::AllocatedMemoryMeter::update_allocated(allocSize, persistentAlloc);\n+   if (TR::AllocatedMemoryMeter::_enabled & persistentAlloc)\n+      {\n+      // Use _smallBlockListsMonitor to protect TR::AllocatedMemoryMeter::update_allocated\n+      // because accessing the variable-size-block list protected by ::memoryAllocMonitor\n+      // takes longer and we may be penalizing access to fixed size block which should be very fast\n+      j9thread_monitor_enter(_smallBlockListsMonitor);\n+      TR::AllocatedMemoryMeter::update_allocated(allocSize, persistentAlloc);\n+      j9thread_monitor_exit(_smallBlockListsMonitor);\n+      }\n \n    // If this is a small block try to allocate it from the appropriate\n    // fixed-size-block chain.\n    //\n    size_t const index = freeBlocksIndex(allocSize);\n-   Block * block = 0;\n-   Block * prev = 0;\n-   for (\n-      block = _freeBlocks[index];\n-      block && block->_size < allocSize;\n-      prev = block, block = prev->next()\n-      )\n-      { TR_ASSERT(index == 0, \"Iterating through a fixed-size block bin.\"); }\n-\n-   if (block)\n+   if (index != 0) // fixed-size-block chain\n       {\n-\n-      TR_ASSERT(\n-         ( index == 0 ) || ( block->_size == allocSize ),\n-         \"block %p in chain for index %d has size %d (not %d)\\n\",\n-         block,\n-         index,\n-         block->_size,\n-         (index * sizeof(void *)) + sizeof(Block)\n-         );\n-\n-      if (prev)\n-         prev->_next = block->next();\n-      else\n+      j9thread_monitor_enter(_smallBlockListsMonitor);\n+      Block * block = _freeBlocks[index];\n+      if (block)\n+         {\n          _freeBlocks[index] = block->next();\n-\n-      block->_next = NULL;\n-\n-      size_t const excess = block->_size - allocSize;\n-\n-      if (excess > sizeof(Block))\n+         block->_next = NULL;\n+         j9thread_monitor_exit(_smallBlockListsMonitor);\n+         return block + 1; // Return pointer after the header\n+         }\n+      j9thread_monitor_exit(_smallBlockListsMonitor);\n+      // Need to allocate from segment\n+      // Preemtively acquire the mutex that protects the segment allocation\n+      if (::memoryAllocMonitor)\n+         ::memoryAllocMonitor->enter();\n+      }\n+   else // Variable size block allocation\n+      {\n+      if (::memoryAllocMonitor)\n+         ::memoryAllocMonitor->enter();\n+      Block * block = allocateFromVariableSizeListLocked(allocSize);\n+      if (block)\n          {\n-         block->_size = allocSize;\n-         freeBlock( new (pointer_cast<uint8_t *>(block) + allocSize) Block(excess) );\n+         // If the block I found is bigger than what I need,\n+         // split it and put the remaining block back onto the free list\n+         size_t const excess = block->_size - allocSize;\n+         if (excess > sizeof(Block))\n+            {\n+            block->_size = allocSize;\n+            const size_t excessIndex = freeBlocksIndex(excess);\n+            if (excessIndex > 0)\n+               {\n+               // Exit the variable size list monitor and grab a fixed size list monitor\n+               if (::memoryAllocMonitor)\n+                  ::memoryAllocMonitor->exit();\n+\n+               j9thread_monitor_enter(_smallBlockListsMonitor);\n+               freeFixedSizeBlock( new (pointer_cast<uint8_t *>(block) + allocSize) Block(excess) );\n+               j9thread_monitor_exit(_smallBlockListsMonitor);\n+               // No monitor held at this point, so we can return\n+               return block + 1;\n+               }\n+            else\n+               {\n+               freeVariableSizeBlock( new (pointer_cast<uint8_t *>(block) + allocSize) Block(excess) );\n+               }\n+            }\n+         if (::memoryAllocMonitor)\n+            ::memoryAllocMonitor->exit();\n+         return block + 1;\n          }\n-\n-      return block + 1;\n       }\n-\n+   // At this point I have to allocate memory from a segment\n    // Find the first persistent segment with enough free space\n+   // Required mutex has already been obtained\n    //\n+   void *allocation = allocateFromSegmentLocked(allocSize);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg1Nzc0NA=="}, "originalCommit": {"oid": "76e2109024567dcc6d7757bcc604ab0dc73d9649"}, "originalPosition": 179}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDc5Mzg3OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/env/PersistentAllocator.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxOTo1OToxMlrOHW-zTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxOTo1OToxMlrOHW-zTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg1OTY2MQ==", "bodyText": "Same comment as above regarding literal 0", "url": "https://github.com/eclipse-openj9/openj9/pull/10678#discussion_r493859661", "createdAt": "2020-09-23T19:59:12Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/env/PersistentAllocator.cpp", "diffHunk": "@@ -164,26 +216,34 @@ PersistentAllocator::remainingSpace(J9MemorySegment &segment) throw()\n    }\n \n void\n-PersistentAllocator::freeBlock(Block * block)\n+PersistentAllocator::freeFixedSizeBlock(Block * block)\n+   {\n+   // Appropriate lock should have been obtained\n+   TR_ASSERT(block->_size > 0, \"Block size is non-positive\");\n+   size_t const index = freeBlocksIndex(block->_size);\n+   TR_ASSERT(index, \"freeFixedSizeBlock should be used for small blocks, so index cannot be 0\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76e2109024567dcc6d7757bcc604ab0dc73d9649"}, "originalPosition": 224}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDc5NzQ0OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/env/PersistentAllocator.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMDowMDoxMlrOHW-1kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMDowMDoxMlrOHW-1kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg2MDI0MA==", "bodyText": "same comment as above regarding literal 0.", "url": "https://github.com/eclipse-openj9/openj9/pull/10678#discussion_r493860240", "createdAt": "2020-09-23T20:00:12Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/env/PersistentAllocator.cpp", "diffHunk": "@@ -164,26 +216,34 @@ PersistentAllocator::remainingSpace(J9MemorySegment &segment) throw()\n    }\n \n void\n-PersistentAllocator::freeBlock(Block * block)\n+PersistentAllocator::freeFixedSizeBlock(Block * block)\n+   {\n+   // Appropriate lock should have been obtained\n+   TR_ASSERT(block->_size > 0, \"Block size is non-positive\");\n+   size_t const index = freeBlocksIndex(block->_size);\n+   TR_ASSERT(index, \"freeFixedSizeBlock should be used for small blocks, so index cannot be 0\");\n+   block->_next = _freeBlocks[index];\n+   _freeBlocks[index] = block;\n+   }\n+\n+void\n+PersistentAllocator::freeVariableSizeBlock(Block * block)\n    {\n+   // Appropriate lock should have been obtained\n    TR_ASSERT(block->_size > 0, \"Block size is non-positive\");\n-   TR_ASSERT(block->_next == NULL, \"In-use persistent memory block @ belongs to a free block chain.\", block);\n    block->_next = NULL;\n \n-   // If this is a small block, add it to the appropriate fixed-size-block\n-   // chain. Otherwise add it to the variable-size-block chain which is in\n-   // ascending size order.\n+   // Add block to the variable-size-block chain which is in ascending size order.\n    //\n-   size_t const index = freeBlocksIndex(block->_size);\n-   Block * blockIterator = _freeBlocks[index];\n+   TR_ASSERT(freeBlocksIndex(block->_size) == 0, \"freeVariableSizeBlock should be used for large blocks, so index should be 0\");\n+   Block * blockIterator = _freeBlocks[0];\n    if (!blockIterator || !(blockIterator->_size < block->_size) )\n       {\n-      block->_next = _freeBlocks[index];\n-      _freeBlocks[index] = block;\n+      block->_next = _freeBlocks[0];\n+      _freeBlocks[0] = block;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76e2109024567dcc6d7757bcc604ab0dc73d9649"}, "originalPosition": 251}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDgxMTM5OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/env/PersistentAllocator.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMDowNDoyOVrOHW--cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMDozMToyNFrOHW_2HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg2MjUxMw==", "bodyText": "Shouldn't the message say something like \"Freeing a block that is in the free list\"?", "url": "https://github.com/eclipse-openj9/openj9/pull/10678#discussion_r493862513", "createdAt": "2020-09-23T20:04:29Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/env/PersistentAllocator.cpp", "diffHunk": "@@ -194,25 +254,49 @@ PersistentAllocator::freeBlock(Block * block)\n    }\n \n void\n-PersistentAllocator::deallocate(void * mem, size_t) throw()\n+PersistentAllocator::freeBlock(Block * block)\n    {\n-   if (::memoryAllocMonitor)\n-      ::memoryAllocMonitor->enter();\n-\n-\n-   Block * block = static_cast<Block *>(mem) - 1;\n+   TR_ASSERT(block->_size > 0, \"Block size is non-positive\");\n \n-   // adjust the used persistent memory here and not in freePersistentmemory(block, size)\n+   // Adjust the used persistent memory here and not in freePersistentmemory(block, size)\n    // because that call is also used to free memory that wasn't actually committed\n-   TR::AllocatedMemoryMeter::update_freed(block->_size, persistentAlloc);\n+   if (TR::AllocatedMemoryMeter::_enabled & persistentAlloc)\n+      {\n+      j9thread_monitor_enter(_smallBlockListsMonitor);\n+      TR::AllocatedMemoryMeter::update_freed(block->_size, persistentAlloc);\n+      j9thread_monitor_exit(_smallBlockListsMonitor);\n+      }\n+  \n+   // If this is a small block, add it to the appropriate fixed-size-block\n+   // chain. Otherwise add it to the variable-size-block chain which is in\n+   // ascending size order.\n+   //\n+   size_t const index = freeBlocksIndex(block->_size);\n+   if (index > 0)\n+      {\n+      j9thread_monitor_enter(_smallBlockListsMonitor);\n+      freeFixedSizeBlock(block);\n+      j9thread_monitor_exit(_smallBlockListsMonitor);\n+      }\n+   else\n+      {\n+      if (::memoryAllocMonitor)\n+         ::memoryAllocMonitor->enter();\n+      freeVariableSizeBlock(block);\n+      if (::memoryAllocMonitor)\n+         ::memoryAllocMonitor->exit();\n+      }\n+   }\n \n+void\n+PersistentAllocator::deallocate(void * mem, size_t) throw()\n+   {\n+   Block * block = static_cast<Block *>(mem) - 1;\n+   TR_ASSERT_FATAL(block->_next == NULL, \"Freeing a block that is in use. block=%p next=%p\", block, block->_next);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76e2109024567dcc6d7757bcc604ab0dc73d9649"}, "originalPosition": 309}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg3Njc2NA==", "bodyText": "Right. The message was meant to alert for double free which we see from time to time", "url": "https://github.com/eclipse-openj9/openj9/pull/10678#discussion_r493876764", "createdAt": "2020-09-23T20:31:24Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/env/PersistentAllocator.cpp", "diffHunk": "@@ -194,25 +254,49 @@ PersistentAllocator::freeBlock(Block * block)\n    }\n \n void\n-PersistentAllocator::deallocate(void * mem, size_t) throw()\n+PersistentAllocator::freeBlock(Block * block)\n    {\n-   if (::memoryAllocMonitor)\n-      ::memoryAllocMonitor->enter();\n-\n-\n-   Block * block = static_cast<Block *>(mem) - 1;\n+   TR_ASSERT(block->_size > 0, \"Block size is non-positive\");\n \n-   // adjust the used persistent memory here and not in freePersistentmemory(block, size)\n+   // Adjust the used persistent memory here and not in freePersistentmemory(block, size)\n    // because that call is also used to free memory that wasn't actually committed\n-   TR::AllocatedMemoryMeter::update_freed(block->_size, persistentAlloc);\n+   if (TR::AllocatedMemoryMeter::_enabled & persistentAlloc)\n+      {\n+      j9thread_monitor_enter(_smallBlockListsMonitor);\n+      TR::AllocatedMemoryMeter::update_freed(block->_size, persistentAlloc);\n+      j9thread_monitor_exit(_smallBlockListsMonitor);\n+      }\n+  \n+   // If this is a small block, add it to the appropriate fixed-size-block\n+   // chain. Otherwise add it to the variable-size-block chain which is in\n+   // ascending size order.\n+   //\n+   size_t const index = freeBlocksIndex(block->_size);\n+   if (index > 0)\n+      {\n+      j9thread_monitor_enter(_smallBlockListsMonitor);\n+      freeFixedSizeBlock(block);\n+      j9thread_monitor_exit(_smallBlockListsMonitor);\n+      }\n+   else\n+      {\n+      if (::memoryAllocMonitor)\n+         ::memoryAllocMonitor->enter();\n+      freeVariableSizeBlock(block);\n+      if (::memoryAllocMonitor)\n+         ::memoryAllocMonitor->exit();\n+      }\n+   }\n \n+void\n+PersistentAllocator::deallocate(void * mem, size_t) throw()\n+   {\n+   Block * block = static_cast<Block *>(mem) - 1;\n+   TR_ASSERT_FATAL(block->_next == NULL, \"Freeing a block that is in use. block=%p next=%p\", block, block->_next);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg2MjUxMw=="}, "originalCommit": {"oid": "76e2109024567dcc6d7757bcc604ab0dc73d9649"}, "originalPosition": 309}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDgyMjgxOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/env/PersistentAllocator.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMDowNzo0NFrOHW_FVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMDowNzo0NFrOHW_FVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg2NDI3OQ==", "bodyText": "Same comments as above regarding critical section and the literal 0.", "url": "https://github.com/eclipse-openj9/openj9/pull/10678#discussion_r493864279", "createdAt": "2020-09-23T20:07:44Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/env/PersistentAllocator.cpp", "diffHunk": "@@ -194,25 +254,49 @@ PersistentAllocator::freeBlock(Block * block)\n    }\n \n void\n-PersistentAllocator::deallocate(void * mem, size_t) throw()\n+PersistentAllocator::freeBlock(Block * block)\n    {\n-   if (::memoryAllocMonitor)\n-      ::memoryAllocMonitor->enter();\n-\n-\n-   Block * block = static_cast<Block *>(mem) - 1;\n+   TR_ASSERT(block->_size > 0, \"Block size is non-positive\");\n \n-   // adjust the used persistent memory here and not in freePersistentmemory(block, size)\n+   // Adjust the used persistent memory here and not in freePersistentmemory(block, size)\n    // because that call is also used to free memory that wasn't actually committed\n-   TR::AllocatedMemoryMeter::update_freed(block->_size, persistentAlloc);\n+   if (TR::AllocatedMemoryMeter::_enabled & persistentAlloc)\n+      {\n+      j9thread_monitor_enter(_smallBlockListsMonitor);\n+      TR::AllocatedMemoryMeter::update_freed(block->_size, persistentAlloc);\n+      j9thread_monitor_exit(_smallBlockListsMonitor);\n+      }\n+  \n+   // If this is a small block, add it to the appropriate fixed-size-block\n+   // chain. Otherwise add it to the variable-size-block chain which is in\n+   // ascending size order.\n+   //\n+   size_t const index = freeBlocksIndex(block->_size);\n+   if (index > 0)\n+      {\n+      j9thread_monitor_enter(_smallBlockListsMonitor);\n+      freeFixedSizeBlock(block);\n+      j9thread_monitor_exit(_smallBlockListsMonitor);\n+      }\n+   else\n+      {\n+      if (::memoryAllocMonitor)\n+         ::memoryAllocMonitor->enter();\n+      freeVariableSizeBlock(block);\n+      if (::memoryAllocMonitor)\n+         ::memoryAllocMonitor->exit();\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76e2109024567dcc6d7757bcc604ab0dc73d9649"}, "originalPosition": 302}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDk3OTAzOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/env/PersistentAllocator.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxODowODo0MVrOHXmruw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxODozMDowNVrOHXnidw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUxMzA4Mw==", "bodyText": "This line was added as part of your last update; doesn't seem to be used.", "url": "https://github.com/eclipse-openj9/openj9/pull/10678#discussion_r494513083", "createdAt": "2020-09-24T18:08:41Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/env/PersistentAllocator.cpp", "diffHunk": "@@ -164,26 +225,34 @@ PersistentAllocator::remainingSpace(J9MemorySegment &segment) throw()\n    }\n \n void\n-PersistentAllocator::freeBlock(Block * block)\n+PersistentAllocator::freeFixedSizeBlock(Block * block)\n    {\n+   // Appropriate lock should have been obtained\n    TR_ASSERT(block->_size > 0, \"Block size is non-positive\");\n-   TR_ASSERT(block->_next == NULL, \"In-use persistent memory block @ belongs to a free block chain.\", block);\n-   block->_next = NULL;\n+   size_t const index = freeBlocksIndex(block->_size);\n+   TR_ASSERT(index != LARGE_BLOCK_LIST_INDEX, \"freeFixedSizeBlock should be used for small blocks, so index cannot be LARGE_BLOCK_LIST_INDEX\");\n+   block->_next = _freeBlocks[index];\n+   _freeBlocks[index] = block;\n+   }\n \n-   // If this is a small block, add it to the appropriate fixed-size-block\n-   // chain. Otherwise add it to the variable-size-block chain which is in\n-   // ascending size order.\n+void\n+PersistentAllocator::freeVariableSizeBlock(Block * block)\n+   {\n+   // Appropriate lock should have been obtained\n+   TR_ASSERT(block->_size > 0, \"Block size is non-positive\");\n+   block->_next = NULL;\n+   Block * volatile next = block->_next;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc67d852c87273d0cc9b26c6745dc86e0f7b5596"}, "originalPosition": 250}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUyNzA5NQ==", "bodyText": "Good catch! This is me trying to determine the effect/correctness of volatile in connection to the other defect involving j9method->extra.", "url": "https://github.com/eclipse-openj9/openj9/pull/10678#discussion_r494527095", "createdAt": "2020-09-24T18:30:05Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/env/PersistentAllocator.cpp", "diffHunk": "@@ -164,26 +225,34 @@ PersistentAllocator::remainingSpace(J9MemorySegment &segment) throw()\n    }\n \n void\n-PersistentAllocator::freeBlock(Block * block)\n+PersistentAllocator::freeFixedSizeBlock(Block * block)\n    {\n+   // Appropriate lock should have been obtained\n    TR_ASSERT(block->_size > 0, \"Block size is non-positive\");\n-   TR_ASSERT(block->_next == NULL, \"In-use persistent memory block @ belongs to a free block chain.\", block);\n-   block->_next = NULL;\n+   size_t const index = freeBlocksIndex(block->_size);\n+   TR_ASSERT(index != LARGE_BLOCK_LIST_INDEX, \"freeFixedSizeBlock should be used for small blocks, so index cannot be LARGE_BLOCK_LIST_INDEX\");\n+   block->_next = _freeBlocks[index];\n+   _freeBlocks[index] = block;\n+   }\n \n-   // If this is a small block, add it to the appropriate fixed-size-block\n-   // chain. Otherwise add it to the variable-size-block chain which is in\n-   // ascending size order.\n+void\n+PersistentAllocator::freeVariableSizeBlock(Block * block)\n+   {\n+   // Appropriate lock should have been obtained\n+   TR_ASSERT(block->_size > 0, \"Block size is non-positive\");\n+   block->_next = NULL;\n+   Block * volatile next = block->_next;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUxMzA4Mw=="}, "originalCommit": {"oid": "fc67d852c87273d0cc9b26c6745dc86e0f7b5596"}, "originalPosition": 250}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1212, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}