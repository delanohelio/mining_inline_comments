{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5ODQ0OTU5", "number": 9139, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMDo0NjowM1rODwKMjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNTo0MTo0OFrODyj_9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODI1Mjk1OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/optimizer/EscapeAnalysis.cpp", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMDo0NjowM1rOGDAT_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxOTo0MjoxNlrOGEyoDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwNDAzMA==", "bodyText": "Just to clarify, \"unflattened value type\" means a value type that is not the reference project of the type?", "url": "https://github.com/eclipse-openj9/openj9/pull/9139#discussion_r405804030", "createdAt": "2020-04-08T20:46:03Z", "author": {"login": "Leonardo2718"}, "path": "runtime/compiler/optimizer/EscapeAnalysis.cpp", "diffHunk": "@@ -1076,6 +1076,23 @@ int32_t TR_EscapeAnalysis::performAnalysisOnce()\n                traceMsg(comp(), \"   Make [%p] non-local because we can't have locking when candidate escapes in cold blocks\\n\", candidate->_node);\n             }\n \n+         // Value type fields of objects created with a NEW bytecode must be initialized\n+         // with their default values.  EA is not yet set up to perform such iniitialization,\n+         // so remove the candidate from consideration.\n+         if (candidate->_kind == TR::New)\n+            {\n+            TR_OpaqueClassBlock *clazz = (TR_OpaqueClassBlock *)candidate->_node->getFirstChild()->getSymbol()->getStaticSymbol()->getStaticAddress();\n+\n+            if (!TR::Compiler->cls.isZeroInitializable(clazz))\n+               {\n+               if (trace())\n+                  traceMsg(comp(), \"   Fail [%p] because the candidate is not zero initializable (that is, it has a field that is an unflattened value type)\\n\", candidate->_node);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89a6f471bd5000458aefa91d54a9f0b17ff1cfdc"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxMDM5Mg==", "bodyText": "It means the fields of the value type field haven't been \"inlined\" into the class that contains that field.  I will reword this to make things more clear.", "url": "https://github.com/eclipse-openj9/openj9/pull/9139#discussion_r406210392", "createdAt": "2020-04-09T13:38:24Z", "author": {"login": "hzongaro"}, "path": "runtime/compiler/optimizer/EscapeAnalysis.cpp", "diffHunk": "@@ -1076,6 +1076,23 @@ int32_t TR_EscapeAnalysis::performAnalysisOnce()\n                traceMsg(comp(), \"   Make [%p] non-local because we can't have locking when candidate escapes in cold blocks\\n\", candidate->_node);\n             }\n \n+         // Value type fields of objects created with a NEW bytecode must be initialized\n+         // with their default values.  EA is not yet set up to perform such iniitialization,\n+         // so remove the candidate from consideration.\n+         if (candidate->_kind == TR::New)\n+            {\n+            TR_OpaqueClassBlock *clazz = (TR_OpaqueClassBlock *)candidate->_node->getFirstChild()->getSymbol()->getStaticSymbol()->getStaticAddress();\n+\n+            if (!TR::Compiler->cls.isZeroInitializable(clazz))\n+               {\n+               if (trace())\n+                  traceMsg(comp(), \"   Fail [%p] because the candidate is not zero initializable (that is, it has a field that is an unflattened value type)\\n\", candidate->_node);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwNDAzMA=="}, "originalCommit": {"oid": "89a6f471bd5000458aefa91d54a9f0b17ff1cfdc"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY3Njk0MA==", "bodyText": "Revised wording in commit d897b43", "url": "https://github.com/eclipse-openj9/openj9/pull/9139#discussion_r407676940", "createdAt": "2020-04-13T19:42:16Z", "author": {"login": "hzongaro"}, "path": "runtime/compiler/optimizer/EscapeAnalysis.cpp", "diffHunk": "@@ -1076,6 +1076,23 @@ int32_t TR_EscapeAnalysis::performAnalysisOnce()\n                traceMsg(comp(), \"   Make [%p] non-local because we can't have locking when candidate escapes in cold blocks\\n\", candidate->_node);\n             }\n \n+         // Value type fields of objects created with a NEW bytecode must be initialized\n+         // with their default values.  EA is not yet set up to perform such iniitialization,\n+         // so remove the candidate from consideration.\n+         if (candidate->_kind == TR::New)\n+            {\n+            TR_OpaqueClassBlock *clazz = (TR_OpaqueClassBlock *)candidate->_node->getFirstChild()->getSymbol()->getStaticSymbol()->getStaticAddress();\n+\n+            if (!TR::Compiler->cls.isZeroInitializable(clazz))\n+               {\n+               if (trace())\n+                  traceMsg(comp(), \"   Fail [%p] because the candidate is not zero initializable (that is, it has a field that is an unflattened value type)\\n\", candidate->_node);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwNDAzMA=="}, "originalCommit": {"oid": "89a6f471bd5000458aefa91d54a9f0b17ff1cfdc"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODI2NDU5OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/compile/J9Compilation.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMDo0OToxM1rOGDAa-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxOTo0MTozMVrOGEymoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwNTgxOQ==", "bodyText": "Can I suggest making this a const?", "url": "https://github.com/eclipse-openj9/openj9/pull/9139#discussion_r405805819", "createdAt": "2020-04-08T20:49:13Z", "author": {"login": "Leonardo2718"}, "path": "runtime/compiler/compile/J9Compilation.cpp", "diffHunk": "@@ -617,6 +617,8 @@ J9::Compilation::canAllocateInline(TR::Node* node, TR_OpaqueClassBlock* &classIn\n \n    bool generateArraylets = self()->generateArraylets();\n \n+   bool areValueTypesEnabled = TR::Compiler->om.areValueTypesEnabled();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed0d00d2bc63a98162302a40aab45f56c785ae18"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY3NjU3Ng==", "bodyText": "Added const in commit b27c9e6", "url": "https://github.com/eclipse-openj9/openj9/pull/9139#discussion_r407676576", "createdAt": "2020-04-13T19:41:31Z", "author": {"login": "hzongaro"}, "path": "runtime/compiler/compile/J9Compilation.cpp", "diffHunk": "@@ -617,6 +617,8 @@ J9::Compilation::canAllocateInline(TR::Node* node, TR_OpaqueClassBlock* &classIn\n \n    bool generateArraylets = self()->generateArraylets();\n \n+   bool areValueTypesEnabled = TR::Compiler->om.areValueTypesEnabled();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwNTgxOQ=="}, "originalCommit": {"oid": "ed0d00d2bc63a98162302a40aab45f56c785ae18"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDgwMDIwOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/optimizer/EscapeAnalysis.cpp", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoyMjoxOFrOGDYbfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxOTo0MDo0N1rOGEylSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5OTE2Ng==", "bodyText": "How does this fail happen - the trace says there is a failure, but the candidate isn't removed?", "url": "https://github.com/eclipse-openj9/openj9/pull/9139#discussion_r406199166", "createdAt": "2020-04-09T13:22:18Z", "author": {"login": "andrewcraik"}, "path": "runtime/compiler/optimizer/EscapeAnalysis.cpp", "diffHunk": "@@ -1169,6 +1187,16 @@ int32_t TR_EscapeAnalysis::performAnalysisOnce()\n                rememoize(candidate);\n                _candidates.remove(candidate);\n                }\n+            else\n+               {\n+               TR_OpaqueClassBlock *clazz = (TR_OpaqueClassBlock*)classNode->getSymbol()->castToStaticSymbol()->getStaticAddress();\n+\n+               if (TR::Compiler->cls.isValueTypeClass(clazz))\n+                  {\n+                  if (trace())\n+                     traceMsg(comp(), \"   Fail [%p] because array has value type elements\\n\", candidate->_node);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e91dcf5de46b3fb00e676d5474e337e7d3e411ab"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxMTAwMA==", "bodyText": "Thanks for catching that mistake.", "url": "https://github.com/eclipse-openj9/openj9/pull/9139#discussion_r406211000", "createdAt": "2020-04-09T13:39:14Z", "author": {"login": "hzongaro"}, "path": "runtime/compiler/optimizer/EscapeAnalysis.cpp", "diffHunk": "@@ -1169,6 +1187,16 @@ int32_t TR_EscapeAnalysis::performAnalysisOnce()\n                rememoize(candidate);\n                _candidates.remove(candidate);\n                }\n+            else\n+               {\n+               TR_OpaqueClassBlock *clazz = (TR_OpaqueClassBlock*)classNode->getSymbol()->castToStaticSymbol()->getStaticAddress();\n+\n+               if (TR::Compiler->cls.isValueTypeClass(clazz))\n+                  {\n+                  if (trace())\n+                     traceMsg(comp(), \"   Fail [%p] because array has value type elements\\n\", candidate->_node);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5OTE2Ng=="}, "originalCommit": {"oid": "e91dcf5de46b3fb00e676d5474e337e7d3e411ab"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY3NjIzNA==", "bodyText": "Corrected in commit d897b43", "url": "https://github.com/eclipse-openj9/openj9/pull/9139#discussion_r407676234", "createdAt": "2020-04-13T19:40:47Z", "author": {"login": "hzongaro"}, "path": "runtime/compiler/optimizer/EscapeAnalysis.cpp", "diffHunk": "@@ -1169,6 +1187,16 @@ int32_t TR_EscapeAnalysis::performAnalysisOnce()\n                rememoize(candidate);\n                _candidates.remove(candidate);\n                }\n+            else\n+               {\n+               TR_OpaqueClassBlock *clazz = (TR_OpaqueClassBlock*)classNode->getSymbol()->castToStaticSymbol()->getStaticAddress();\n+\n+               if (TR::Compiler->cls.isValueTypeClass(clazz))\n+                  {\n+                  if (trace())\n+                     traceMsg(comp(), \"   Fail [%p] because array has value type elements\\n\", candidate->_node);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5OTE2Ng=="}, "originalCommit": {"oid": "e91dcf5de46b3fb00e676d5474e337e7d3e411ab"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDgwNzU3OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/compile/J9Compilation.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoyMzo1NFrOGDYf9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxOTozOTozNFrOGEyivA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIwMDMwOQ==", "bodyText": "This is a pretty big thing since the dynamic allocations won't work - can we have a debug counter and a trace statement? Ultimately we would want to check at runtime if we could do the inline allocation otherwise call out, but this is fine as a first step for functional correctness.", "url": "https://github.com/eclipse-openj9/openj9/pull/9139#discussion_r406200309", "createdAt": "2020-04-09T13:23:54Z", "author": {"login": "andrewcraik"}, "path": "runtime/compiler/compile/J9Compilation.cpp", "diffHunk": "@@ -665,11 +667,12 @@ J9::Compilation::canAllocateInline(TR::Node* node, TR_OpaqueClassBlock* &classIn\n       {\n       classRef      = node->getSecondChild();\n \n-      // In the case of dynamic array allocation, return 0 indicating variable dynamic array allocation\n+      // In the case of dynamic array allocation, return 0 indicating variable dynamic array allocation,\n+      // unless value types are enabled, in which case return -1 to prevent inline allocation\n       if (classRef->getOpCodeValue() != TR::loadaddr)\n          {\n          classInfo = NULL;\n-         return 0;\n+         return areValueTypesEnabled ? -1 : 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e91dcf5de46b3fb00e676d5474e337e7d3e411ab"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY3NTU4MA==", "bodyText": "Good point!  Added a new debug counter in this revised commit:  b27c9e6", "url": "https://github.com/eclipse-openj9/openj9/pull/9139#discussion_r407675580", "createdAt": "2020-04-13T19:39:34Z", "author": {"login": "hzongaro"}, "path": "runtime/compiler/compile/J9Compilation.cpp", "diffHunk": "@@ -665,11 +667,12 @@ J9::Compilation::canAllocateInline(TR::Node* node, TR_OpaqueClassBlock* &classIn\n       {\n       classRef      = node->getSecondChild();\n \n-      // In the case of dynamic array allocation, return 0 indicating variable dynamic array allocation\n+      // In the case of dynamic array allocation, return 0 indicating variable dynamic array allocation,\n+      // unless value types are enabled, in which case return -1 to prevent inline allocation\n       if (classRef->getOpCodeValue() != TR::loadaddr)\n          {\n          classInfo = NULL;\n-         return 0;\n+         return areValueTypesEnabled ? -1 : 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIwMDMwOQ=="}, "originalCommit": {"oid": "e91dcf5de46b3fb00e676d5474e337e7d3e411ab"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTEyNTY5OnYy", "diffSide": "RIGHT", "path": "runtime/oti/VMHelpers.hpp", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNDozNzoxOVrOGDbpUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNToyMjoyMVrOGDdmng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI1MTg1Ng==", "bodyText": "I'd like to see TraceAssert added to inlineAllocateIndexableObject and similar helpers to validate that we're not passing any classes that have the J9ClassContainsUnflattenedFlattenables bit set.\nThe assert should be guarded by J9VM_OPT_VALHALLA_VALUE_TYPES.  FYI @tajila", "url": "https://github.com/eclipse-openj9/openj9/pull/9139#discussion_r406251856", "createdAt": "2020-04-09T14:37:19Z", "author": {"login": "DanHeidinga"}, "path": "runtime/oti/VMHelpers.hpp", "diffHunk": "@@ -756,7 +756,7 @@ class VM_VMHelpers\n #if defined(J9VM_OPT_VALHALLA_VALUE_TYPES)\n \t\tif (J9_IS_J9CLASS_FLATTENED(arrayClass)) {\n \t\t\tinstance = objectAllocate->inlineAllocateIndexableValueTypeObject(currentThread, arrayClass, size, initializeSlots, memoryBarrier, sizeCheck);\n-\t\t} else\n+\t\t} else if (J9_ARE_NO_BITS_SET(arrayClass->classFlags, J9ClassContainsUnflattenedFlattenables))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e91dcf5de46b3fb00e676d5474e337e7d3e411ab"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI1NTczMQ==", "bodyText": "Looking at the interpreter code, I think we have different semantics there and may trip up on a case like:\ninline class I {\n   int a;\n   int b;\n}\n\nclass Bad {\n  I i;\n  int c;\n}\n\nnew Bad[10];\nSee\nhttps://github.com/eclipse/openj9/blob/c6b594b6c03f957bb6a07f5d234a6d996037a17f/runtime/vm/BytecodeInterpreter.hpp#L1079-L1087\nwhich calls:\nhttps://github.com/eclipse/openj9/blob/c6b594b6c03f957bb6a07f5d234a6d996037a17f/runtime/vm/BytecodeInterpreter.hpp#L1051-L1061\nwhich means either the inline allocate code already handles this or the interpreter needs to be fixed too", "url": "https://github.com/eclipse-openj9/openj9/pull/9139#discussion_r406255731", "createdAt": "2020-04-09T14:42:34Z", "author": {"login": "DanHeidinga"}, "path": "runtime/oti/VMHelpers.hpp", "diffHunk": "@@ -756,7 +756,7 @@ class VM_VMHelpers\n #if defined(J9VM_OPT_VALHALLA_VALUE_TYPES)\n \t\tif (J9_IS_J9CLASS_FLATTENED(arrayClass)) {\n \t\t\tinstance = objectAllocate->inlineAllocateIndexableValueTypeObject(currentThread, arrayClass, size, initializeSlots, memoryBarrier, sizeCheck);\n-\t\t} else\n+\t\t} else if (J9_ARE_NO_BITS_SET(arrayClass->classFlags, J9ClassContainsUnflattenedFlattenables))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI1MTg1Ng=="}, "originalCommit": {"oid": "e91dcf5de46b3fb00e676d5474e337e7d3e411ab"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI4MzkzNA==", "bodyText": "Based on @tajila's response, the code I missed is in the anewarray implementation:\nhttps://github.com/eclipse/openj9/blob/c6b594b6c03f957bb6a07f5d234a6d996037a17f/runtime/vm/BytecodeInterpreter.hpp#L7569-L7574", "url": "https://github.com/eclipse-openj9/openj9/pull/9139#discussion_r406283934", "createdAt": "2020-04-09T15:22:21Z", "author": {"login": "DanHeidinga"}, "path": "runtime/oti/VMHelpers.hpp", "diffHunk": "@@ -756,7 +756,7 @@ class VM_VMHelpers\n #if defined(J9VM_OPT_VALHALLA_VALUE_TYPES)\n \t\tif (J9_IS_J9CLASS_FLATTENED(arrayClass)) {\n \t\t\tinstance = objectAllocate->inlineAllocateIndexableValueTypeObject(currentThread, arrayClass, size, initializeSlots, memoryBarrier, sizeCheck);\n-\t\t} else\n+\t\t} else if (J9_ARE_NO_BITS_SET(arrayClass->classFlags, J9ClassContainsUnflattenedFlattenables))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI1MTg1Ng=="}, "originalCommit": {"oid": "e91dcf5de46b3fb00e676d5474e337e7d3e411ab"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MzQ1MjA0OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/compile/J9Compilation.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNTo0MTo0OFrOGGriXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNjoyNzowMlrOGGtcLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY1Nzk1MA==", "bodyText": "Windows build failure due to the reference to the uninitialized size variable in the call to traceMsg.", "url": "https://github.com/eclipse-openj9/openj9/pull/9139#discussion_r409657950", "createdAt": "2020-04-16T15:41:48Z", "author": {"login": "hzongaro"}, "path": "runtime/compiler/compile/J9Compilation.cpp", "diffHunk": "@@ -665,11 +667,26 @@ J9::Compilation::canAllocateInline(TR::Node* node, TR_OpaqueClassBlock* &classIn\n       {\n       classRef      = node->getSecondChild();\n \n-      // In the case of dynamic array allocation, return 0 indicating variable dynamic array allocation\n+      // In the case of dynamic array allocation, return 0 indicating variable dynamic array allocation,\n+      // unless value types are enabled, in which case return -1 to prevent inline allocation\n       if (classRef->getOpCodeValue() != TR::loadaddr)\n          {\n          classInfo = NULL;\n-         return 0;\n+         if (areValueTypesEnabled)\n+            {\n+            if (self()->getOption(TR_TraceCG))\n+               {\n+               traceMsg(self(), \"cannot inline array allocation @ node %p because value types are enabled\\n\", node, size);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b50419689b2cd71d4ad7306e2d6e3995a5ab0802"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY4OTEzNA==", "bodyText": "Corrected in commit a328c03", "url": "https://github.com/eclipse-openj9/openj9/pull/9139#discussion_r409689134", "createdAt": "2020-04-16T16:27:02Z", "author": {"login": "hzongaro"}, "path": "runtime/compiler/compile/J9Compilation.cpp", "diffHunk": "@@ -665,11 +667,26 @@ J9::Compilation::canAllocateInline(TR::Node* node, TR_OpaqueClassBlock* &classIn\n       {\n       classRef      = node->getSecondChild();\n \n-      // In the case of dynamic array allocation, return 0 indicating variable dynamic array allocation\n+      // In the case of dynamic array allocation, return 0 indicating variable dynamic array allocation,\n+      // unless value types are enabled, in which case return -1 to prevent inline allocation\n       if (classRef->getOpCodeValue() != TR::loadaddr)\n          {\n          classInfo = NULL;\n-         return 0;\n+         if (areValueTypesEnabled)\n+            {\n+            if (self()->getOption(TR_TraceCG))\n+               {\n+               traceMsg(self(), \"cannot inline array allocation @ node %p because value types are enabled\\n\", node, size);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY1Nzk1MA=="}, "originalCommit": {"oid": "b50419689b2cd71d4ad7306e2d6e3995a5ab0802"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 347, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}