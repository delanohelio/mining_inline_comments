{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4ODA4MzUz", "number": 9368, "title": "VM side of synthetic handler fix", "bodyText": "Details in #9267\nAlso reverts #7340 which was a failed attempt to fix this before we\ncompletely understood the issue.\n[ci skip]\nSigned-off-by: Graham Chapman graham_chapman@ca.ibm.com", "createdAt": "2020-04-24T23:34:09Z", "url": "https://github.com/eclipse-openj9/openj9/pull/9368", "merged": true, "mergeCommit": {"oid": "7d740b427a60bb8808aa5ec959d98d002d21c8d1"}, "closed": true, "closedAt": "2020-04-25T18:57:57Z", "author": {"login": "gacholio"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABca94TMgBqjMyNzE1NDU5OTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcbKaUTAFqTQwMDMzNzYxMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "95e0bd8988a67472bb2f58b69a13792cdfa1e3e0", "author": {"user": {"login": "gacholio", "name": "Graham Chapman"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/95e0bd8988a67472bb2f58b69a13792cdfa1e3e0", "committedDate": "2020-04-24T19:14:44Z", "message": "VM side of synthetic handler fix\n\nDetails in #9267\n\nAlso reverts #7340 which was a failed attempt to fix this before we\ncompletely understood the issue.\n\n[ci skip]\n\nSigned-off-by: Graham Chapman <graham_chapman@ca.ibm.com>"}, "afterCommit": {"oid": "9217ed5e7bbbbffce1bf7e9ec59eace9959dde44", "author": {"user": {"login": "gacholio", "name": "Graham Chapman"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/9217ed5e7bbbbffce1bf7e9ec59eace9959dde44", "committedDate": "2020-04-25T03:52:10Z", "message": "VM side of synthetic handler fix\n\nDetails in #9267\n\nAlso reverts #7340 which was a failed attempt to fix this before we\ncompletely understood the issue.\n\n[ci skip]\n\nSigned-off-by: Graham Chapman <graham_chapman@ca.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f1a9c0f33ba905187f66efaea70ab4f01079aa1", "author": {"user": {"login": "gacholio", "name": "Graham Chapman"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/5f1a9c0f33ba905187f66efaea70ab4f01079aa1", "committedDate": "2020-04-25T04:31:19Z", "message": "VM side of synthetic handler fix\n\nDetails in #9267\n\nAlso reverts #7340 which was a failed attempt to fix this before we\ncompletely understood the issue.\n\n[ci skip]\n\nSigned-off-by: Graham Chapman <graham_chapman@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9217ed5e7bbbbffce1bf7e9ec59eace9959dde44", "author": {"user": {"login": "gacholio", "name": "Graham Chapman"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/9217ed5e7bbbbffce1bf7e9ec59eace9959dde44", "committedDate": "2020-04-25T03:52:10Z", "message": "VM side of synthetic handler fix\n\nDetails in #9267\n\nAlso reverts #7340 which was a failed attempt to fix this before we\ncompletely understood the issue.\n\n[ci skip]\n\nSigned-off-by: Graham Chapman <graham_chapman@ca.ibm.com>"}, "afterCommit": {"oid": "5f1a9c0f33ba905187f66efaea70ab4f01079aa1", "author": {"user": {"login": "gacholio", "name": "Graham Chapman"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/5f1a9c0f33ba905187f66efaea70ab4f01079aa1", "committedDate": "2020-04-25T04:31:19Z", "message": "VM side of synthetic handler fix\n\nDetails in #9267\n\nAlso reverts #7340 which was a failed attempt to fix this before we\ncompletely understood the issue.\n\n[ci skip]\n\nSigned-off-by: Graham Chapman <graham_chapman@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMzM3NjEw", "url": "https://github.com/eclipse-openj9/openj9/pull/9368#pullrequestreview-400337610", "createdAt": "2020-04-25T00:45:34Z", "commit": {"oid": "95e0bd8988a67472bb2f58b69a13792cdfa1e3e0"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQwMDo0NTozNFrOGLtwmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxODoyMzoyM1rOGL4q9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkzNzI0Mg==", "bodyText": "I think this works to zero the structs and makes it easier to reason about the code below.  Same deal for walkState\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tJ9JITDecompileState decompileState;\n          \n          \n            \n            \tJ9JITDecompileState decompileState = {0};", "url": "https://github.com/eclipse-openj9/openj9/pull/9368#discussion_r414937242", "createdAt": "2020-04-25T00:45:34Z", "author": {"login": "DanHeidinga"}, "path": "runtime/codert_vm/decomp.cpp", "diffHunk": "@@ -1200,12 +1200,45 @@ c_jitDecompileAtExceptionCatch(J9VMThread * currentThread)\n \tU_8 *jitPC = decompRecord->pc;\n \t/* Simulate a call to a resolve helper to make the stack walkable */\n \tbuildBranchJITResolveFrame(currentThread, jitPC, J9_STACK_FLAGS_JIT_EXCEPTION_CATCH_RESOLVE);\n-\t/* Discard the existing decompilation in favour of a new one at the exception catch point */\n+\n+\tJ9JavaVM *vm = currentThread->javaVM;\n+\tJ9JITDecompileState decompileState;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95e0bd8988a67472bb2f58b69a13792cdfa1e3e0"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTExNjAyMg==", "bodyText": "Are we guaranteed to have an inlineMap even if nothing was inlined here?  Should this assert be moved inside the if?", "url": "https://github.com/eclipse-openj9/openj9/pull/9368#discussion_r415116022", "createdAt": "2020-04-25T18:23:23Z", "author": {"login": "DanHeidinga"}, "path": "runtime/codert_vm/decomp.cpp", "diffHunk": "@@ -1200,12 +1200,45 @@ c_jitDecompileAtExceptionCatch(J9VMThread * currentThread)\n \tU_8 *jitPC = decompRecord->pc;\n \t/* Simulate a call to a resolve helper to make the stack walkable */\n \tbuildBranchJITResolveFrame(currentThread, jitPC, J9_STACK_FLAGS_JIT_EXCEPTION_CATCH_RESOLVE);\n-\t/* Discard the existing decompilation in favour of a new one at the exception catch point */\n+\n+\tJ9JavaVM *vm = currentThread->javaVM;\n+\tJ9JITDecompileState decompileState;\n+\tJ9StackWalkState walkState;\n \tJ9OSRBuffer *osrBuffer = &decompRecord->osrBuffer;\n \tUDATA numberOfFrames = osrBuffer->numberOfFrames;\n \tJ9OSRFrame *osrFrame = (J9OSRFrame*)(osrBuffer + 1);\n+\tJ9JITExceptionTable *metaData = NULL;\n+\n+\t/* Collect the required information from the stack - top visible frame is the decompile frame */\n+\twalkState.flags = J9_STACKWALK_ITERATE_FRAMES | J9_STACKWALK_SKIP_INLINES | J9_STACKWALK_VISIBLE_ONLY | J9_STACKWALK_MAINTAIN_REGISTER_MAP | J9_STACKWALK_ITERATE_HIDDEN_JIT_FRAMES | J9_STACKWALK_SAVE_STACKED_REGISTERS;\n+\twalkState.skipCount = 0;\n+\twalkState.frameWalkFunction = decompileMethodFrameIterator;\n+\twalkState.walkThread = currentThread;\n+\twalkState.userData1 = &decompileState;\n+\twalkState.userData2 = NULL;\n+\tvm->walkStackFrames(currentThread, &walkState);\n+\tmetaData = decompileState.metaData;\n+\n+\t/* Determine in which inlined frame the exception is being caught */\n+\tUDATA newNumberOfFrames = 1;\n+\tvoid *stackMap = NULL;\n+\tvoid *inlineMap = NULL;\n+\tvoid *inlinedCallSite = NULL;\n+\t/* Note we need to add 1 to the JIT PC here in order to get the correct map at the exception handler\n+\t * because jitGetMapsFromPC is expecting a return address, so it subtracts 1.  The value stored in the\n+\t * decomp record is the start address of the compiled exception handler.\n+\t */\n+\tjitGetMapsFromPC(vm, metaData, (UDATA)jitPC + 1, &stackMap, &inlineMap);\n+\tAssert_CodertVM_false(NULL == inlineMap);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f1a9c0f33ba905187f66efaea70ab4f01079aa1"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1084, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}