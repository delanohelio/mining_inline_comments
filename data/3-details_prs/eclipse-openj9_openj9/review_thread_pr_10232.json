{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1ODkxNTc1", "number": 10232, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNDoxMDozNVrOER1nkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNDoxODo1OVrOER10ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTM5NzMwOnYy", "diffSide": "RIGHT", "path": "runtime/util/hshelp.c", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNDoxMDozNVrOG2w2tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNDoxODozNlrOG2xKbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA3NjcyNg==", "bodyText": "Please declare each variable on its own line and initialize them.", "url": "https://github.com/eclipse-openj9/openj9/pull/10232#discussion_r460076726", "createdAt": "2020-07-24T14:10:35Z", "author": {"login": "gacholio"}, "path": "runtime/util/hshelp.c", "diffHunk": "@@ -3220,6 +3220,54 @@ verifyRecordAttributesAreSame(J9ROMClass *originalROMClass, J9ROMClass *replacem\n done:\n \treturn rc;\n }\n+\n+static jvmtiError\n+verifyPermittedSubclassAttributeContentsMatch(J9ROMClass *originalROMClass, J9ROMClass *replacementROMClass)\n+{\n+\tjvmtiError rc = JVMTI_ERROR_NONE;\n+\n+\tif (J9ROMCLASS_IS_SEALED(originalROMClass) && J9ROMCLASS_IS_SEALED(replacementROMClass)) {\n+\t\tU_32* originalPermittedSubclassesCountPtr = getNumberOfPermittedSubclassesPtr(originalROMClass);\n+\t\tU_32* replacementPermittedSubclassesCountPtr = getNumberOfPermittedSubclassesPtr(replacementROMClass);\n+\n+\t\tif (*originalPermittedSubclassesCountPtr == *replacementPermittedSubclassesCountPtr) {\n+\t\t\tU_32 i, j;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29ffbf52cac1b7a2362491f6da73c6dd18aa64d6"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA4MTc3NQ==", "bodyText": "Also, j should be declared inside the loop.", "url": "https://github.com/eclipse-openj9/openj9/pull/10232#discussion_r460081775", "createdAt": "2020-07-24T14:18:36Z", "author": {"login": "gacholio"}, "path": "runtime/util/hshelp.c", "diffHunk": "@@ -3220,6 +3220,54 @@ verifyRecordAttributesAreSame(J9ROMClass *originalROMClass, J9ROMClass *replacem\n done:\n \treturn rc;\n }\n+\n+static jvmtiError\n+verifyPermittedSubclassAttributeContentsMatch(J9ROMClass *originalROMClass, J9ROMClass *replacementROMClass)\n+{\n+\tjvmtiError rc = JVMTI_ERROR_NONE;\n+\n+\tif (J9ROMCLASS_IS_SEALED(originalROMClass) && J9ROMCLASS_IS_SEALED(replacementROMClass)) {\n+\t\tU_32* originalPermittedSubclassesCountPtr = getNumberOfPermittedSubclassesPtr(originalROMClass);\n+\t\tU_32* replacementPermittedSubclassesCountPtr = getNumberOfPermittedSubclassesPtr(replacementROMClass);\n+\n+\t\tif (*originalPermittedSubclassesCountPtr == *replacementPermittedSubclassesCountPtr) {\n+\t\t\tU_32 i, j;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA3NjcyNg=="}, "originalCommit": {"oid": "29ffbf52cac1b7a2362491f6da73c6dd18aa64d6"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTQzMDc1OnYy", "diffSide": "RIGHT", "path": "runtime/util/hshelp.c", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNDoxODo1OVrOG2xLcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxOTo1MzowN1rOG277Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA4MjAzMg==", "bodyText": "Use ! for booleans.", "url": "https://github.com/eclipse-openj9/openj9/pull/10232#discussion_r460082032", "createdAt": "2020-07-24T14:18:59Z", "author": {"login": "gacholio"}, "path": "runtime/util/hshelp.c", "diffHunk": "@@ -3220,6 +3220,54 @@ verifyRecordAttributesAreSame(J9ROMClass *originalROMClass, J9ROMClass *replacem\n done:\n \treturn rc;\n }\n+\n+static jvmtiError\n+verifyPermittedSubclassAttributeContentsMatch(J9ROMClass *originalROMClass, J9ROMClass *replacementROMClass)\n+{\n+\tjvmtiError rc = JVMTI_ERROR_NONE;\n+\n+\tif (J9ROMCLASS_IS_SEALED(originalROMClass) && J9ROMCLASS_IS_SEALED(replacementROMClass)) {\n+\t\tU_32* originalPermittedSubclassesCountPtr = getNumberOfPermittedSubclassesPtr(originalROMClass);\n+\t\tU_32* replacementPermittedSubclassesCountPtr = getNumberOfPermittedSubclassesPtr(replacementROMClass);\n+\n+\t\tif (*originalPermittedSubclassesCountPtr == *replacementPermittedSubclassesCountPtr) {\n+\t\t\tU_32 i, j;\n+\n+\t\t\tfor (i = 0; i < *originalPermittedSubclassesCountPtr; i++) {\n+\t\t\t\tBOOLEAN foundMatchingSubclass = FALSE;\n+\t\t\t\tJ9UTF8* originalSubclassNameUTF = permittedSubclassesNameAtIndex(originalPermittedSubclassesCountPtr, i);\n+\t\t\t\t\n+\t\t\t\t/* Find matching subclass name in replacement ROM class. The permitted subclasses are not required to be in the same order\n+\t\t\t\t * as the original class. Assume the replacement subclass is in the same slot as original to try to improve speed.\n+\t\t\t\t */\n+\t\t\t\tfor (j = 0; j < *originalPermittedSubclassesCountPtr; j++){\n+\t\t\t\t\tU_32 adjustedIndex = (i + j) % *originalPermittedSubclassesCountPtr;\n+\t\t\t\t\tJ9UTF8* replacementSubclassNameUTF = permittedSubclassesNameAtIndex(replacementPermittedSubclassesCountPtr, adjustedIndex);\n+\n+\t\t\t\t\tif (J9UTF8_EQUALS(originalSubclassNameUTF, replacementSubclassNameUTF)) {\n+\t\t\t\t\t\tfoundMatchingSubclass = TRUE;\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\t/* check if matching subclass was found. */\n+\t\t\t\tif (FALSE == foundMatchingSubclass) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29ffbf52cac1b7a2362491f6da73c6dd18aa64d6"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI1ODA5OQ==", "bodyText": "updated.", "url": "https://github.com/eclipse-openj9/openj9/pull/10232#discussion_r460258099", "createdAt": "2020-07-24T19:53:07Z", "author": {"login": "theresa-m"}, "path": "runtime/util/hshelp.c", "diffHunk": "@@ -3220,6 +3220,54 @@ verifyRecordAttributesAreSame(J9ROMClass *originalROMClass, J9ROMClass *replacem\n done:\n \treturn rc;\n }\n+\n+static jvmtiError\n+verifyPermittedSubclassAttributeContentsMatch(J9ROMClass *originalROMClass, J9ROMClass *replacementROMClass)\n+{\n+\tjvmtiError rc = JVMTI_ERROR_NONE;\n+\n+\tif (J9ROMCLASS_IS_SEALED(originalROMClass) && J9ROMCLASS_IS_SEALED(replacementROMClass)) {\n+\t\tU_32* originalPermittedSubclassesCountPtr = getNumberOfPermittedSubclassesPtr(originalROMClass);\n+\t\tU_32* replacementPermittedSubclassesCountPtr = getNumberOfPermittedSubclassesPtr(replacementROMClass);\n+\n+\t\tif (*originalPermittedSubclassesCountPtr == *replacementPermittedSubclassesCountPtr) {\n+\t\t\tU_32 i, j;\n+\n+\t\t\tfor (i = 0; i < *originalPermittedSubclassesCountPtr; i++) {\n+\t\t\t\tBOOLEAN foundMatchingSubclass = FALSE;\n+\t\t\t\tJ9UTF8* originalSubclassNameUTF = permittedSubclassesNameAtIndex(originalPermittedSubclassesCountPtr, i);\n+\t\t\t\t\n+\t\t\t\t/* Find matching subclass name in replacement ROM class. The permitted subclasses are not required to be in the same order\n+\t\t\t\t * as the original class. Assume the replacement subclass is in the same slot as original to try to improve speed.\n+\t\t\t\t */\n+\t\t\t\tfor (j = 0; j < *originalPermittedSubclassesCountPtr; j++){\n+\t\t\t\t\tU_32 adjustedIndex = (i + j) % *originalPermittedSubclassesCountPtr;\n+\t\t\t\t\tJ9UTF8* replacementSubclassNameUTF = permittedSubclassesNameAtIndex(replacementPermittedSubclassesCountPtr, adjustedIndex);\n+\n+\t\t\t\t\tif (J9UTF8_EQUALS(originalSubclassNameUTF, replacementSubclassNameUTF)) {\n+\t\t\t\t\t\tfoundMatchingSubclass = TRUE;\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\t/* check if matching subclass was found. */\n+\t\t\t\tif (FALSE == foundMatchingSubclass) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA4MjAzMg=="}, "originalCommit": {"oid": "29ffbf52cac1b7a2362491f6da73c6dd18aa64d6"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4806, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}