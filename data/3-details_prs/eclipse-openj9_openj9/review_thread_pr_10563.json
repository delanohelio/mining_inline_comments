{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgzOTk3MDE0", "number": 10563, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNTo1NToyOVrOEiL1YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNzowODoyOVrOEiNoGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MjgwOTI5OnYy", "diffSide": "RIGHT", "path": "runtime/bcutil/cfreader.c", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNTo1NToyOVrOHP60Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNjowMDo0N1rOHP7C0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ1NDMyMg==", "bodyText": "Please format these properly (space after if) and don't use ! for zero tests in new code.", "url": "https://github.com/eclipse-openj9/openj9/pull/10563#discussion_r486454322", "createdAt": "2020-09-10T15:55:29Z", "author": {"login": "gacholio"}, "path": "runtime/bcutil/cfreader.c", "diffHunk": "@@ -3470,15 +3481,30 @@ readAnnotationElement(J9CfrClassFile * classfile, J9CfrAnnotationElement ** pAnn\n \t\tbreak;\n \t\t\t\n \tcase 'e':\n+\t{\n+\t\tJ9CfrConstantPoolInfo* cpBase = classfile->constantPool;\n+\t\tU_16 cpCount = classfile->constantPoolCount;\n+\t\tU_16 typeNameIndex = 0;\n+\t\tU_16 constNameIndex = 0;\n+\n \t\tif (!ALLOC_CAST(element, J9CfrAnnotationElementEnum, J9CfrAnnotationElement)) {\n \t\t\treturn -2;\n \t\t}\n \n \t\tCHECK_EOF(4);\n \t\tNEXT_U16(((J9CfrAnnotationElementEnum *)element)->typeNameIndex, index);\n \t\tNEXT_U16(((J9CfrAnnotationElementEnum *)element)->constNameIndex, index);\n+\t\t\n+\t\ttypeNameIndex = ((J9CfrAnnotationElementEnum *)element)->typeNameIndex;\n+\t\tconstNameIndex = ((J9CfrAnnotationElementEnum *)element)->constNameIndex;\n+\t\tif(!typeNameIndex || (typeNameIndex >= cpCount) || !constNameIndex || (constNameIndex >= cpCount)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c3629eac201fbd7eeee205df78d097ddf176d5d"}, "originalPosition": 326}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ1ODA2NQ==", "bodyText": "Fixed as suggested above.", "url": "https://github.com/eclipse-openj9/openj9/pull/10563#discussion_r486458065", "createdAt": "2020-09-10T16:00:47Z", "author": {"login": "ChengJin01"}, "path": "runtime/bcutil/cfreader.c", "diffHunk": "@@ -3470,15 +3481,30 @@ readAnnotationElement(J9CfrClassFile * classfile, J9CfrAnnotationElement ** pAnn\n \t\tbreak;\n \t\t\t\n \tcase 'e':\n+\t{\n+\t\tJ9CfrConstantPoolInfo* cpBase = classfile->constantPool;\n+\t\tU_16 cpCount = classfile->constantPoolCount;\n+\t\tU_16 typeNameIndex = 0;\n+\t\tU_16 constNameIndex = 0;\n+\n \t\tif (!ALLOC_CAST(element, J9CfrAnnotationElementEnum, J9CfrAnnotationElement)) {\n \t\t\treturn -2;\n \t\t}\n \n \t\tCHECK_EOF(4);\n \t\tNEXT_U16(((J9CfrAnnotationElementEnum *)element)->typeNameIndex, index);\n \t\tNEXT_U16(((J9CfrAnnotationElementEnum *)element)->constNameIndex, index);\n+\t\t\n+\t\ttypeNameIndex = ((J9CfrAnnotationElementEnum *)element)->typeNameIndex;\n+\t\tconstNameIndex = ((J9CfrAnnotationElementEnum *)element)->constNameIndex;\n+\t\tif(!typeNameIndex || (typeNameIndex >= cpCount) || !constNameIndex || (constNameIndex >= cpCount)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ1NDMyMg=="}, "originalCommit": {"oid": "6c3629eac201fbd7eeee205df78d097ddf176d5d"}, "originalPosition": 326}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MzEwMjk5OnYy", "diffSide": "RIGHT", "path": "runtime/bcutil/cfreader.c", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNzowODoyOVrOHP9snQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxODo1Njo1NVrOHQBuYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUwMTUzMw==", "bodyText": "Does this behaviour apply across all supported JDK levels - 8, 11 & 15?  Does the RI report the errors for these cases in all releases?", "url": "https://github.com/eclipse-openj9/openj9/pull/10563#discussion_r486501533", "createdAt": "2020-09-10T17:08:29Z", "author": {"login": "DanHeidinga"}, "path": "runtime/bcutil/cfreader.c", "diffHunk": "@@ -448,6 +448,17 @@ readAttributes(J9CfrClassFile * classfile, J9CfrAttribute *** pAttributes, U_32\n \t\t\t\tU_32 cursor = 0;\n \t\t\t\tTrc_BCU_MalformedAnnotation(address);\n \n+\t\t\t\t/* Capture the errors with type_name_index & const_name_index in enum_const_value against the VM Spec */\n+\t\t\t\tif (BCT_ERR_INVALID_ANNOTATION_BAD_CP_INDEX_OUT_OF_RANGE == result) {\n+\t\t\t\t\terrorCode = J9NLS_CFR_ERR_BAD_INDEX__ID;\n+\t\t\t\t\toffset = address;\n+\t\t\t\t\tgoto _errorFound;\n+\t\t\t\t} else if (BCT_ERR_INVALID_ANNOTATION_BAD_CP_UTF8_STRING == result) {\n+\t\t\t\t\terrorCode = J9NLS_CFR_ERR_BAD_NAME_INDEX__ID;\n+\t\t\t\t\toffset = address;\n+\t\t\t\t\tgoto _errorFound;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "034442a0fcbd9e533b8a4674bab34c04807d48bc"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU2NzUyMw==", "bodyText": "The rules for element_value  in the Spec have been there since Java 7 as follows:\n4.7.16 The RuntimeVisibleAnnotations attribute\n4.7.16.1 The element_value structure\nenum_const_value\nThe enum_const_value item is used if the tag item is e.\nThe enum_const_value item consists of the following two items:\ntype_name_index\nThe value of the type_name_index item must be a valid index into the constant_pool table. \nThe constant_pool entry at that index must be a CONSTANT_Utf8_info structure (\u00a74.4.7) \nrepresenting a valid field descriptor (\u00a74.3.2) that denotes the internal form of the binary name \n(\u00a74.2.1) of the type of the enum constant represented by this element_value structure.\nconst_name_index\nThe value of the const_name_index item must be a valid index into the constant_pool table. \nThe constant_pool entry at that index must be a CONSTANT_Utf8_info structure (\u00a74.4.7) \nrepresenting the simple name of the enum constant represented by this element_value structure.\n\nGiven the failing test case plus part of test framework code needs to be modified to the appropriate class version supported by the JDK, I can't simply verify it on Hotspot Java 8 and 11 but it works with Hotspot Java 15.\n$ jdk15_hotspot/bin/java -version\nopenjdk version \"15\" 2020-09-15\nOpenJDK Runtime Environment (build 15+36-1562)\nOpenJDK 64-Bit Server VM (build 15+36-1562, mixed mode, sharing)\n\ntest output (PASSED)\njava.lang.annotation.AnnotationFormatError: java.lang.IllegalArgumentException: \nConstant pool index out of bounds", "url": "https://github.com/eclipse-openj9/openj9/pull/10563#discussion_r486567523", "createdAt": "2020-09-10T18:56:55Z", "author": {"login": "ChengJin01"}, "path": "runtime/bcutil/cfreader.c", "diffHunk": "@@ -448,6 +448,17 @@ readAttributes(J9CfrClassFile * classfile, J9CfrAttribute *** pAttributes, U_32\n \t\t\t\tU_32 cursor = 0;\n \t\t\t\tTrc_BCU_MalformedAnnotation(address);\n \n+\t\t\t\t/* Capture the errors with type_name_index & const_name_index in enum_const_value against the VM Spec */\n+\t\t\t\tif (BCT_ERR_INVALID_ANNOTATION_BAD_CP_INDEX_OUT_OF_RANGE == result) {\n+\t\t\t\t\terrorCode = J9NLS_CFR_ERR_BAD_INDEX__ID;\n+\t\t\t\t\toffset = address;\n+\t\t\t\t\tgoto _errorFound;\n+\t\t\t\t} else if (BCT_ERR_INVALID_ANNOTATION_BAD_CP_UTF8_STRING == result) {\n+\t\t\t\t\terrorCode = J9NLS_CFR_ERR_BAD_NAME_INDEX__ID;\n+\t\t\t\t\toffset = address;\n+\t\t\t\t\tgoto _errorFound;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUwMTUzMw=="}, "originalCommit": {"oid": "034442a0fcbd9e533b8a4674bab34c04807d48bc"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4598, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}