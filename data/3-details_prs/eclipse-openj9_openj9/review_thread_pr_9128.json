{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5MTkxNjYx", "number": 9128, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNzoyMjoyNlrOD_BVCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxNDozMzoxMlrOD_Zzhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NDA4NjQ4OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/env/J9ClassEnv.hpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNzoyMjoyNlrOGZefrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQyMDoxMjowMlrOGZioSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2NzIxMw==", "bodyText": "Given value types exist at the OMR level should we contribute the API to OMR and always return false in their implementation for the time being?", "url": "https://github.com/eclipse-openj9/openj9/pull/9128#discussion_r429367213", "createdAt": "2020-05-22T17:22:26Z", "author": {"login": "andrewcraik"}, "path": "runtime/compiler/env/J9ClassEnv.hpp", "diffHunk": "@@ -124,16 +124,31 @@ class OMR_EXTENSIBLE ClassEnv : public OMR::ClassEnvConnector\n    bool isString(TR::Compilation *comp, uintptr_t objectPointer);\n    bool jitStaticsAreSame(TR::Compilation *comp, TR_ResolvedMethod * method1, int32_t cpIndex1, TR_ResolvedMethod * method2, int32_t cpIndex2);\n    bool jitFieldsAreSame(TR::Compilation *comp, TR_ResolvedMethod * method1, int32_t cpIndex1, TR_ResolvedMethod * method2, int32_t cpIndex2, int32_t isStatic);\n+   /*\n+    * \\brief\n+    *    Tells whether a class reference entry in the constant pool represents a value type class.\n+    *\n+    * \\param cpContextClass\n+    *    The class whose constant pool contains the class reference entry being looked at. In another words,\n+    *    it's the class of the method referring to the class reference entry.\n+    *\n+    * \\param cpIndex\n+    *    The constant pool index of the class reference entry.\n+    *\n+    * \\note\n+    *    The class reference entry doesn't need to be resolved because the information is encoded in class name string\n+    */\n+   bool isClassRefValueType(TR_OpaqueClassBlock *cpContextClass, int32_t cpIndex, TR::Compilation * comp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "707067e564b5502088eaa7c60c48edfb700361ed"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQzNDk1Mg==", "bodyText": "I think this query is specific to constant pool entry which only exists in openj9.", "url": "https://github.com/eclipse-openj9/openj9/pull/9128#discussion_r429434952", "createdAt": "2020-05-22T20:12:02Z", "author": {"login": "cathyzhyi"}, "path": "runtime/compiler/env/J9ClassEnv.hpp", "diffHunk": "@@ -124,16 +124,31 @@ class OMR_EXTENSIBLE ClassEnv : public OMR::ClassEnvConnector\n    bool isString(TR::Compilation *comp, uintptr_t objectPointer);\n    bool jitStaticsAreSame(TR::Compilation *comp, TR_ResolvedMethod * method1, int32_t cpIndex1, TR_ResolvedMethod * method2, int32_t cpIndex2);\n    bool jitFieldsAreSame(TR::Compilation *comp, TR_ResolvedMethod * method1, int32_t cpIndex1, TR_ResolvedMethod * method2, int32_t cpIndex2, int32_t isStatic);\n+   /*\n+    * \\brief\n+    *    Tells whether a class reference entry in the constant pool represents a value type class.\n+    *\n+    * \\param cpContextClass\n+    *    The class whose constant pool contains the class reference entry being looked at. In another words,\n+    *    it's the class of the method referring to the class reference entry.\n+    *\n+    * \\param cpIndex\n+    *    The constant pool index of the class reference entry.\n+    *\n+    * \\note\n+    *    The class reference entry doesn't need to be resolved because the information is encoded in class name string\n+    */\n+   bool isClassRefValueType(TR_OpaqueClassBlock *cpContextClass, int32_t cpIndex, TR::Compilation * comp);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2NzIxMw=="}, "originalCommit": {"oid": "707067e564b5502088eaa7c60c48edfb700361ed"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NDA5MTYwOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/ilgen/IlGenerator.cpp", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNzoyNDoyNFrOGZejFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNDozMDoxOVrOGbNCeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2ODA4Nw==", "bodyText": "it seems wweird to say the the symbolReference isUnresovled and then as a question about it. A comment to explain this is probably warranted...", "url": "https://github.com/eclipse-openj9/openj9/pull/9128#discussion_r429368087", "createdAt": "2020-05-22T17:24:24Z", "author": {"login": "andrewcraik"}, "path": "runtime/compiler/ilgen/IlGenerator.cpp", "diffHunk": "@@ -564,7 +564,8 @@ TR_J9ByteCodeIlGenerator::genILFromByteCodes()\n \n       if (currNode->getOpCodeValue() == TR::checkcast\n           && currNode->getSecondChild()->getOpCodeValue() == TR::loadaddr\n-          && currNode->getSecondChild()->getSymbolReference()->isUnresolved())\n+          && currNode->getSecondChild()->getSymbolReference()->isUnresolved()\n+          && !TR::Compiler->cls.isClassRefValueType(method()->classOfMethod(), currNode->getSecondChild()->getSymbolReference()->getCPIndex(), comp()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "707067e564b5502088eaa7c60c48edfb700361ed"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ1NzI0OQ==", "bodyText": "Added comments as suggested.", "url": "https://github.com/eclipse-openj9/openj9/pull/9128#discussion_r429457249", "createdAt": "2020-05-22T21:27:24Z", "author": {"login": "cathyzhyi"}, "path": "runtime/compiler/ilgen/IlGenerator.cpp", "diffHunk": "@@ -564,7 +564,8 @@ TR_J9ByteCodeIlGenerator::genILFromByteCodes()\n \n       if (currNode->getOpCodeValue() == TR::checkcast\n           && currNode->getSecondChild()->getOpCodeValue() == TR::loadaddr\n-          && currNode->getSecondChild()->getSymbolReference()->isUnresolved())\n+          && currNode->getSecondChild()->getSymbolReference()->isUnresolved()\n+          && !TR::Compiler->cls.isClassRefValueType(method()->classOfMethod(), currNode->getSecondChild()->getSymbolReference()->getCPIndex(), comp()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2ODA4Nw=="}, "originalCommit": {"oid": "707067e564b5502088eaa7c60c48edfb700361ed"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk3MjIzMA==", "bodyText": "Yi @cathyzhyi, I was looking at your adjusted comment.  Just so I'm clear on this, the class specified on CHECKCAST is required to be resolved only if the object is non-null and the class is not a value type.  If the class is a value type, it will never be resolved by the CHECKCAST.  Right?", "url": "https://github.com/eclipse-openj9/openj9/pull/9128#discussion_r429972230", "createdAt": "2020-05-25T14:46:01Z", "author": {"login": "hzongaro"}, "path": "runtime/compiler/ilgen/IlGenerator.cpp", "diffHunk": "@@ -564,7 +564,8 @@ TR_J9ByteCodeIlGenerator::genILFromByteCodes()\n \n       if (currNode->getOpCodeValue() == TR::checkcast\n           && currNode->getSecondChild()->getOpCodeValue() == TR::loadaddr\n-          && currNode->getSecondChild()->getSymbolReference()->isUnresolved())\n+          && currNode->getSecondChild()->getSymbolReference()->isUnresolved()\n+          && !TR::Compiler->cls.isClassRefValueType(method()->classOfMethod(), currNode->getSecondChild()->getSymbolReference()->getCPIndex(), comp()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2ODA4Nw=="}, "originalCommit": {"oid": "707067e564b5502088eaa7c60c48edfb700361ed"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA1MzU0NQ==", "bodyText": "Hey Henry, @hzongaro the class reference can still be resolved by CHECKCAST if the object is not-null and is value type. The value type class is excluded from expansion because the resolve check is already inserted when calling loadClassObject. The expansion for unresolved case is needed for reference type because we want to avoid resolving the class when the object is null so can't just insert the resolve check in the mainline path for all cases as we do for value type.", "url": "https://github.com/eclipse-openj9/openj9/pull/9128#discussion_r430053545", "createdAt": "2020-05-25T19:23:27Z", "author": {"login": "cathyzhyi"}, "path": "runtime/compiler/ilgen/IlGenerator.cpp", "diffHunk": "@@ -564,7 +564,8 @@ TR_J9ByteCodeIlGenerator::genILFromByteCodes()\n \n       if (currNode->getOpCodeValue() == TR::checkcast\n           && currNode->getSecondChild()->getOpCodeValue() == TR::loadaddr\n-          && currNode->getSecondChild()->getSymbolReference()->isUnresolved())\n+          && currNode->getSecondChild()->getSymbolReference()->isUnresolved()\n+          && !TR::Compiler->cls.isClassRefValueType(method()->classOfMethod(), currNode->getSecondChild()->getSymbolReference()->getCPIndex(), comp()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2ODA4Nw=="}, "originalCommit": {"oid": "707067e564b5502088eaa7c60c48edfb700361ed"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA3NjIwNw==", "bodyText": "Thanks, Yi @cathyzhyi!  Now I see.\nI've followed through the logic more carefully now, and I'm wondering whether the name of unresolvedCheckcastTops should be changed to make it clear that not all the unresolved CHECKCASTs are included - only the ones that need to be expanded.  Maybe something like unexpandedUnresolvedCheckcastTops?  Or unresolvedCheckcastTopsNeedingNullGuard?  (I know those are kind of long names - I'm really good at names that are way too long.  :-)", "url": "https://github.com/eclipse-openj9/openj9/pull/9128#discussion_r430076207", "createdAt": "2020-05-25T21:15:32Z", "author": {"login": "hzongaro"}, "path": "runtime/compiler/ilgen/IlGenerator.cpp", "diffHunk": "@@ -564,7 +564,8 @@ TR_J9ByteCodeIlGenerator::genILFromByteCodes()\n \n       if (currNode->getOpCodeValue() == TR::checkcast\n           && currNode->getSecondChild()->getOpCodeValue() == TR::loadaddr\n-          && currNode->getSecondChild()->getSymbolReference()->isUnresolved())\n+          && currNode->getSecondChild()->getSymbolReference()->isUnresolved()\n+          && !TR::Compiler->cls.isClassRefValueType(method()->classOfMethod(), currNode->getSecondChild()->getSymbolReference()->getCPIndex(), comp()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2ODA4Nw=="}, "originalCommit": {"oid": "707067e564b5502088eaa7c60c48edfb700361ed"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE3ODM2MA==", "bodyText": "Thanks for the suggestion! Changed the variable name to unresolvedCheckcastTopsNeedingNullGuard", "url": "https://github.com/eclipse-openj9/openj9/pull/9128#discussion_r431178360", "createdAt": "2020-05-27T14:30:19Z", "author": {"login": "cathyzhyi"}, "path": "runtime/compiler/ilgen/IlGenerator.cpp", "diffHunk": "@@ -564,7 +564,8 @@ TR_J9ByteCodeIlGenerator::genILFromByteCodes()\n \n       if (currNode->getOpCodeValue() == TR::checkcast\n           && currNode->getSecondChild()->getOpCodeValue() == TR::loadaddr\n-          && currNode->getSecondChild()->getSymbolReference()->isUnresolved())\n+          && currNode->getSecondChild()->getSymbolReference()->isUnresolved()\n+          && !TR::Compiler->cls.isClassRefValueType(method()->classOfMethod(), currNode->getSecondChild()->getSymbolReference()->getCPIndex(), comp()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2ODA4Nw=="}, "originalCommit": {"oid": "707067e564b5502088eaa7c60c48edfb700361ed"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3ODA5NjcwOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/env/J9ClassEnv.hpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxNDozMzoxMlrOGaDD9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxOToxMzo1MFrOGaIRAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk2NjMyNA==", "bodyText": "This is a bit of a nit, but nearly all the methods in this file that accept a pointer to a TR::Compilation have that in the first argument position.  It feels a little odd seeing it in the last position here, though I see enumerateFields is the same that way.", "url": "https://github.com/eclipse-openj9/openj9/pull/9128#discussion_r429966324", "createdAt": "2020-05-25T14:33:12Z", "author": {"login": "hzongaro"}, "path": "runtime/compiler/env/J9ClassEnv.hpp", "diffHunk": "@@ -124,16 +124,31 @@ class OMR_EXTENSIBLE ClassEnv : public OMR::ClassEnvConnector\n    bool isString(TR::Compilation *comp, uintptr_t objectPointer);\n    bool jitStaticsAreSame(TR::Compilation *comp, TR_ResolvedMethod * method1, int32_t cpIndex1, TR_ResolvedMethod * method2, int32_t cpIndex2);\n    bool jitFieldsAreSame(TR::Compilation *comp, TR_ResolvedMethod * method1, int32_t cpIndex1, TR_ResolvedMethod * method2, int32_t cpIndex2, int32_t isStatic);\n+   /*\n+    * \\brief\n+    *    Tells whether a class reference entry in the constant pool represents a value type class.\n+    *\n+    * \\param cpContextClass\n+    *    The class whose constant pool contains the class reference entry being looked at. In another words,\n+    *    it's the class of the method referring to the class reference entry.\n+    *\n+    * \\param cpIndex\n+    *    The constant pool index of the class reference entry.\n+    *\n+    * \\note\n+    *    The class reference entry doesn't need to be resolved because the information is encoded in class name string\n+    */\n+   bool isClassRefValueType(TR_OpaqueClassBlock *cpContextClass, int32_t cpIndex, TR::Compilation * comp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a584fb97300db9d687fccf21131938f7c6e6c48f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA1MTU4Ng==", "bodyText": "thanks for pointing that out! Changed the TR::Compilation parm to be the first one.", "url": "https://github.com/eclipse-openj9/openj9/pull/9128#discussion_r430051586", "createdAt": "2020-05-25T19:13:50Z", "author": {"login": "cathyzhyi"}, "path": "runtime/compiler/env/J9ClassEnv.hpp", "diffHunk": "@@ -124,16 +124,31 @@ class OMR_EXTENSIBLE ClassEnv : public OMR::ClassEnvConnector\n    bool isString(TR::Compilation *comp, uintptr_t objectPointer);\n    bool jitStaticsAreSame(TR::Compilation *comp, TR_ResolvedMethod * method1, int32_t cpIndex1, TR_ResolvedMethod * method2, int32_t cpIndex2);\n    bool jitFieldsAreSame(TR::Compilation *comp, TR_ResolvedMethod * method1, int32_t cpIndex1, TR_ResolvedMethod * method2, int32_t cpIndex2, int32_t isStatic);\n+   /*\n+    * \\brief\n+    *    Tells whether a class reference entry in the constant pool represents a value type class.\n+    *\n+    * \\param cpContextClass\n+    *    The class whose constant pool contains the class reference entry being looked at. In another words,\n+    *    it's the class of the method referring to the class reference entry.\n+    *\n+    * \\param cpIndex\n+    *    The constant pool index of the class reference entry.\n+    *\n+    * \\note\n+    *    The class reference entry doesn't need to be resolved because the information is encoded in class name string\n+    */\n+   bool isClassRefValueType(TR_OpaqueClassBlock *cpContextClass, int32_t cpIndex, TR::Compilation * comp);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk2NjMyNA=="}, "originalCommit": {"oid": "a584fb97300db9d687fccf21131938f7c6e6c48f"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 335, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}