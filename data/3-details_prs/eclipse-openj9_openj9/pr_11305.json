{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI5NzYxNDc2", "number": 11305, "title": "Update to use the new LoadStoreHandler API on Power", "bodyText": "Recently, OMR has decided to simplify the way that node-based loads and stores are generated on Power due to a large number of issues regarding missing barriers for volatile loads and a great deal of OpenJ9-specific code surrounding volatile and unresolved that has leaked into OMR (eclipse/omr#5630). The current plan is for the old API for directly generating memory references from nodes to be deprecated after the new API is implemented, so OpenJ9 must be updated to use this new API.\nThis PR should be merged simultaneously with the corresponding OMR PR to implement the new API (eclipse/omr#5652).", "createdAt": "2020-11-30T19:28:15Z", "url": "https://github.com/eclipse-openj9/openj9/pull/11305", "merged": true, "mergeCommit": {"oid": "5e2594c1ed8e3d79e0ee2fcd28e5e11077749077"}, "closed": true, "closedAt": "2021-02-17T15:24:08Z", "author": {"login": "aviansie-ben"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdiRGkIgBqjQwNjMyNTM2Nzc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABd6sdhtgFqTU5MTI0Mjc3Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e09de8f0b2a6b2f9fc473c98ed07c9aaab8d2314", "author": {"user": {"login": "aviansie-ben", "name": "Ben Thomas (Aviansie Ben)"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/e09de8f0b2a6b2f9fc473c98ed07c9aaab8d2314", "committedDate": "2020-11-27T18:24:27Z", "message": "Update simple read monitors to use the new LoadStoreHandler API\n\nPreviously, the code for emitting simple read monitors was using the old\nMemoryReference-based API for performing the load. This API is being\ndeprecated in OMR, so all code dealing with read barriers has been\nupdated to use the new LoadStoreHandler API.\n\nSigned-off-by: Ben Thomas <ben@benthomas.ca>"}, "afterCommit": {"oid": "bc90ee3e0e9c69285138c9b79baf97e16b073f20", "author": {"user": {"login": "aviansie-ben", "name": "Ben Thomas (Aviansie Ben)"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/bc90ee3e0e9c69285138c9b79baf97e16b073f20", "committedDate": "2020-12-02T16:26:03Z", "message": "Update simple read monitors to use the new LoadStoreHandler API\n\nPreviously, the code for emitting simple read monitors was using the old\nMemoryReference-based API for performing the load. This API is being\ndeprecated in OMR, so all code dealing with read barriers has been\nupdated to use the new LoadStoreHandler API.\n\nSigned-off-by: Ben Thomas <ben@benthomas.ca>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "79be1d914cfa34019434f5c5c06e19dae65795c9", "author": {"user": {"login": "aviansie-ben", "name": "Ben Thomas (Aviansie Ben)"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/79be1d914cfa34019434f5c5c06e19dae65795c9", "committedDate": "2020-12-03T17:58:39Z", "message": "Disable prefetching for aloadi nodes on 64-bit\n\nPreviously, the code in the insertPrefetchIfNecessary method was\nexpecting that it would only see aloadi nodes on 32-bit. Because of\nthis, the code would not operate correctly and would cause segfaults\nduring compilation. This was previously being handled by simply not\ncalling insertPrefetchIfNecessary under these conditions, however\nkeeping this behaviour requires that OMR know about implementation\ndetails of OpenJ9's prefetching.\n\nWhile this code could theoretically be made to work under these\nconditions, the code as written simply cannot handle this case. Instead,\na check has been added to prevent insertPrefetchIfNecessary from\noperating on aloadi nodes on 64-bit to replicate the old behaviour.\n\nSigned-off-by: Ben Thomas <ben@benthomas.ca>"}, "afterCommit": {"oid": "24dc2babedf8ad00c543fd122d2f5c686500120f", "author": {"user": {"login": "aviansie-ben", "name": "Ben Thomas (Aviansie Ben)"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/24dc2babedf8ad00c543fd122d2f5c686500120f", "committedDate": "2020-12-10T19:35:23Z", "message": "Disable prefetching for aloadi nodes on 64-bit\n\nPreviously, the code in the insertPrefetchIfNecessary method was\nexpecting that it would only see aloadi nodes on 32-bit. Because of\nthis, the code would not operate correctly and would cause segfaults\nduring compilation. This was previously being handled by simply not\ncalling insertPrefetchIfNecessary under these conditions, however\nkeeping this behaviour requires that OMR know about implementation\ndetails of OpenJ9's prefetching.\n\nWhile this code could theoretically be made to work under these\nconditions, the code as written simply cannot handle this case. Instead,\na check has been added to prevent insertPrefetchIfNecessary from\noperating on aloadi nodes on 64-bit to replicate the old behaviour.\n\nSigned-off-by: Ben Thomas <ben@benthomas.ca>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "24dc2babedf8ad00c543fd122d2f5c686500120f", "author": {"user": {"login": "aviansie-ben", "name": "Ben Thomas (Aviansie Ben)"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/24dc2babedf8ad00c543fd122d2f5c686500120f", "committedDate": "2020-12-10T19:35:23Z", "message": "Disable prefetching for aloadi nodes on 64-bit\n\nPreviously, the code in the insertPrefetchIfNecessary method was\nexpecting that it would only see aloadi nodes on 32-bit. Because of\nthis, the code would not operate correctly and would cause segfaults\nduring compilation. This was previously being handled by simply not\ncalling insertPrefetchIfNecessary under these conditions, however\nkeeping this behaviour requires that OMR know about implementation\ndetails of OpenJ9's prefetching.\n\nWhile this code could theoretically be made to work under these\nconditions, the code as written simply cannot handle this case. Instead,\na check has been added to prevent insertPrefetchIfNecessary from\noperating on aloadi nodes on 64-bit to replicate the old behaviour.\n\nSigned-off-by: Ben Thomas <ben@benthomas.ca>"}, "afterCommit": {"oid": "825ae5151f1c3710237427f8b898eae5bbae9ff6", "author": {"user": {"login": "aviansie-ben", "name": "Ben Thomas (Aviansie Ben)"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/825ae5151f1c3710237427f8b898eae5bbae9ff6", "committedDate": "2020-12-17T19:34:26Z", "message": "Update simple read monitors to use the new LoadStoreHandler API\n\nPreviously, the code for emitting simple read monitors was using the old\nMemoryReference-based API for performing the load. This API is being\ndeprecated in OMR, so all code dealing with read barriers has been\nupdated to use the new LoadStoreHandler API.\n\nSigned-off-by: Ben Thomas <ben@benthomas.ca>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1OTQ3NDMy", "url": "https://github.com/eclipse-openj9/openj9/pull/11305#pullrequestreview-555947432", "createdAt": "2020-12-19T15:07:24Z", "commit": {"oid": "825ae5151f1c3710237427f8b898eae5bbae9ff6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQxNTowNzoyNFrOII8WDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQxNTowNzoyNFrOII8WDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI0ODIwNw==", "bodyText": "I think this will cause some register shuffling since before dependencies were shared between the array check store and write barrier helpers.", "url": "https://github.com/eclipse-openj9/openj9/pull/11305#discussion_r546248207", "createdAt": "2020-12-19T15:07:24Z", "author": {"login": "gita-omr"}, "path": "runtime/compiler/p/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -3585,105 +3407,46 @@ TR::Register *J9::Power::TreeEvaluator::ArrayStoreCHKEvaluator(TR::Node *node, T\n       }\n \n    TR::Register *srcReg, *dstReg;\n-   TR::Register *condReg, *temp1Reg, *temp2Reg, *temp3Reg, *temp4Reg, *baseReg, *indexReg;\n-   TR::MemoryReference *tempMR1, *tempMR2;\n-   TR::LabelSymbol *wbLabel, *doneLabel, *startLabel, *storeLabel, *wrtBarEndLabel;\n+   TR::Register *condReg, *temp1Reg, *temp2Reg, *temp3Reg, *temp4Reg;\n+   TR::LabelSymbol *wbLabel, *startLabel;\n    TR::RegisterDependencyConditions *conditions;\n-   J9::Power::PrivateLinkage *linkage = (J9::Power::PrivateLinkage *) cg->getLinkage();\n-   const TR::PPCLinkageProperties &properties = linkage->getProperties();\n-   TR::Instruction *gcPoint;\n-   bool stopUsingSrc = false;\n \n    wbLabel = generateLabelSymbol(cg);\n-   doneLabel = generateLabelSymbol(cg);\n-   storeLabel = (doWrtBar) ? (generateLabelSymbol(cg)) : NULL;\n \n-   tempMR1 = TR::MemoryReference::createWithRootLoadOrStore(cg, firstChild, TR::Compiler->om.sizeofReferenceAddress());\n    dstReg = cg->evaluate(destinationChild);\n-   TR::Register *compressedReg;\n-   if (sourceChild->getReferenceCount() > 1 && (srcReg = sourceChild->getRegister()) != NULL)\n-      {\n-      TR::Register *tempReg = cg->allocateCollectedReferenceRegister();\n-\n-      // Source must be an object.\n-      TR_ASSERT(!srcReg->containsInternalPointer(), \"Stored value is an internal pointer\");\n+   srcReg = cg->evaluate(sourceChild);\n \n-      generateTrg1Src1Instruction(cg, TR::InstOpCode::mr, node, tempReg, srcReg);\n-      srcReg = tempReg;\n-      stopUsingSrc = true;\n-      compressedReg = srcReg;\n-      if (usingCompressedPointers)\n-         compressedReg = cg->evaluate(firstChild->getSecondChild());\n-      }\n-   else\n-      {\n-      srcReg = cg->evaluate(sourceChild);\n-      compressedReg = srcReg;\n-      if (usingCompressedPointers)\n-         compressedReg = cg->evaluate(firstChild->getSecondChild());\n-      }\n-\n-   int32_t numDeps = 11;\n-   if (usingCompressedPointers)\n-      numDeps++;\n-   if ((gcMode == gc_modron_wrtbar_satb) || (comp->getOptions()->realTimeGC()))\n-      numDeps++;\n-   if (!firstChild->skipWrtBar())\n-      numDeps += 2;\n-\n-   conditions = new (cg->trHeapMemory()) TR::RegisterDependencyConditions(numDeps, numDeps, cg->trMemory());\n+   conditions = new (cg->trHeapMemory()) TR::RegisterDependencyConditions(7, 7, cg->trMemory());\n    temp1Reg = cg->allocateRegister();\n    temp2Reg = cg->allocateRegister();\n    temp3Reg = cg->allocateRegister();\n    temp4Reg = cg->allocateRegister();\n    condReg = cg->allocateRegister(TR_CCR);\n \n-   // !!! Adding any dependency before the baseReg, you have to be careful with the excludeGPR0 order\n-   TR::addDependency(conditions, dstReg, TR::RealRegister::gr3, TR_GPR, cg);\n-\n-   if (comp->getOptions()->realTimeGC())\n-      TR::addDependency(conditions, srcReg, TR::RealRegister::gr5, TR_GPR, cg);\n-   else\n-      TR::addDependency(conditions, srcReg, TR::RealRegister::gr4, TR_GPR, cg);\n-\n-   TR::addDependency(conditions, temp1Reg, TR::RealRegister::gr11, TR_GPR, cg);\n+   TR::addDependency(conditions, dstReg, TR::RealRegister::NoReg, TR_GPR, cg);\n+   conditions->getPreConditions()->getRegisterDependency(conditions->getAddCursorForPre() - 1)->setExcludeGPR0();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "825ae5151f1c3710237427f8b898eae5bbae9ff6"}, "originalPosition": 514}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYyMDU1MTc0", "url": "https://github.com/eclipse-openj9/openj9/pull/11305#pullrequestreview-562055174", "createdAt": "2021-01-05T19:06:14Z", "commit": {"oid": "825ae5151f1c3710237427f8b898eae5bbae9ff6"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxOTowNjoxNFrOIOjmAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxOTowNjoxNFrOIOjmAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjEzNDE0NA==", "bodyText": "This looks like conditions being misplaced originally.  This current fix certainly is not in line with the intention of prefetch optimization.  Prefetch surely is beneficial performance-wise to 64bit non-compressed.\nThe conditions should read something like:   if  (is-objectReference-load  &&  hotness-testing && CPU-testing)\nApplies to the next change too.", "url": "https://github.com/eclipse-openj9/openj9/pull/11305#discussion_r552134144", "createdAt": "2021-01-05T19:06:14Z", "author": {"login": "zl-wang"}, "path": "runtime/compiler/p/codegen/J9CodeGenerator.cpp", "diffHunk": "@@ -403,7 +403,7 @@ J9::Power::CodeGenerator::insertPrefetchIfNecessary(TR::Node *node, TR::Register\n    static bool disableStringObjPrefetch = (feGetEnv(\"TR_DisableStringObjPrefetch\") != NULL);\n    bool optDisabled = false;\n \n-   if (node->getOpCodeValue() == TR::aloadi ||\n+   if ((node->getOpCodeValue() == TR::aloadi && !comp->target().is64Bit()) ||\n         (comp->target().is64Bit() &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "825ae5151f1c3710237427f8b898eae5bbae9ff6"}, "originalPosition": 6}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "825ae5151f1c3710237427f8b898eae5bbae9ff6", "author": {"user": {"login": "aviansie-ben", "name": "Ben Thomas (Aviansie Ben)"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/825ae5151f1c3710237427f8b898eae5bbae9ff6", "committedDate": "2020-12-17T19:34:26Z", "message": "Update simple read monitors to use the new LoadStoreHandler API\n\nPreviously, the code for emitting simple read monitors was using the old\nMemoryReference-based API for performing the load. This API is being\ndeprecated in OMR, so all code dealing with read barriers has been\nupdated to use the new LoadStoreHandler API.\n\nSigned-off-by: Ben Thomas <ben@benthomas.ca>"}, "afterCommit": {"oid": "688a9f3246c328e8d0e6368f913fa29d01cc69d1", "author": {"user": {"login": "aviansie-ben", "name": "Ben Thomas (Aviansie Ben)"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/688a9f3246c328e8d0e6368f913fa29d01cc69d1", "committedDate": "2021-01-05T19:18:42Z", "message": "Update simple read monitors to use the new LoadStoreHandler API\n\nPreviously, the code for emitting simple read monitors was using the old\nMemoryReference-based API for performing the load. This API is being\ndeprecated in OMR, so all code dealing with read barriers has been\nupdated to use the new LoadStoreHandler API.\n\nSigned-off-by: Ben Thomas <ben@benthomas.ca>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcwNjA5NjM2", "url": "https://github.com/eclipse-openj9/openj9/pull/11305#pullrequestreview-570609636", "createdAt": "2021-01-18T15:49:56Z", "commit": {"oid": "688a9f3246c328e8d0e6368f913fa29d01cc69d1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQxNTo0OTo1NlrOIVu1Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQxNTo0OTo1NlrOIVu1Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTY1ODI2Nw==", "bodyText": "@zl-wang is there any chance this assert can get triggered?", "url": "https://github.com/eclipse-openj9/openj9/pull/11305#discussion_r559658267", "createdAt": "2021-01-18T15:49:56Z", "author": {"login": "gita-omr"}, "path": "runtime/compiler/p/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -7439,26 +7274,27 @@ static bool simpleReadMonitor(TR::Node *node, TR::CodeGenerator *cg, TR::Node *o\n       {\n       if (TR::Compiler->om.compressObjectReferences() && nextTopNode->getSymbol()->isClassObject())\n          {\n-         tempMR = TR::MemoryReference::createWithRootLoadOrStore(cg, nextTopNode, 4);\n+         tempMR = TR::LoadStoreHandler::generateSimpleLoadMemoryReference(cg, nextTopNode, 4);\n          loadOpCode = TR::InstOpCode::lwz;\n          }\n       else\n          {\n-         tempMR = TR::MemoryReference::createWithRootLoadOrStore(cg, nextTopNode, 8);\n+         tempMR = TR::LoadStoreHandler::generateSimpleLoadMemoryReference(cg, nextTopNode, 8);\n          loadOpCode = TR::InstOpCode::ld;\n          }\n       }\n    else\n       {\n-      tempMR = TR::MemoryReference::createWithRootLoadOrStore(cg, nextTopNode, 4);\n+      tempMR = TR::LoadStoreHandler::generateSimpleLoadMemoryReference(cg, nextTopNode, 4);\n       loadOpCode = TR::InstOpCode::lwz;\n       }\n+   TR_ASSERT_FATAL_WITH_NODE(nextTopNode, !tempMR.getMemoryReference()->getIndexRegister(), \"Simple read monitors do not currently support indexed loads\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "688a9f3246c328e8d0e6368f913fa29d01cc69d1"}, "originalPosition": 449}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc5NjU0Mjgw", "url": "https://github.com/eclipse-openj9/openj9/pull/11305#pullrequestreview-579654280", "createdAt": "2021-01-29T22:11:32Z", "commit": {"oid": "dfaf3b86bdd68b6d0c08e0c5db4c49288fb3e18a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOVQyMjoxMTozMlrOIc2W8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOVQyMjoxMTozMlrOIc2W8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzEyMTY0OQ==", "bodyText": "since TR::LoadStoreHandler::generateSimpleLoadMemoryReference doesn't guarantee immediate-form addressing, it looks like potentially this assert can trigger.  On the other hand, the existing code didn't handle the indexRegister anyway (if it were present), so that it could be wrong already but not caught with assert. I would suggest removing this assert and staying the previous assumption for the time being, and open a follow-up item to handle the indexRegsiter if it becomes present.  as it is,  it likely works even if indexRegister is present. But this newly added assert will be a flare-up regression in the field (as the ConstantDataSnippet assert was). @aviansie-ben", "url": "https://github.com/eclipse-openj9/openj9/pull/11305#discussion_r567121649", "createdAt": "2021-01-29T22:11:32Z", "author": {"login": "zl-wang"}, "path": "runtime/compiler/p/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -7439,26 +7274,27 @@ static bool simpleReadMonitor(TR::Node *node, TR::CodeGenerator *cg, TR::Node *o\n       {\n       if (TR::Compiler->om.compressObjectReferences() && nextTopNode->getSymbol()->isClassObject())\n          {\n-         tempMR = TR::MemoryReference::createWithRootLoadOrStore(cg, nextTopNode, 4);\n+         tempMR = TR::LoadStoreHandler::generateSimpleLoadMemoryReference(cg, nextTopNode, 4);\n          loadOpCode = TR::InstOpCode::lwz;\n          }\n       else\n          {\n-         tempMR = TR::MemoryReference::createWithRootLoadOrStore(cg, nextTopNode, 8);\n+         tempMR = TR::LoadStoreHandler::generateSimpleLoadMemoryReference(cg, nextTopNode, 8);\n          loadOpCode = TR::InstOpCode::ld;\n          }\n       }\n    else\n       {\n-      tempMR = TR::MemoryReference::createWithRootLoadOrStore(cg, nextTopNode, 4);\n+      tempMR = TR::LoadStoreHandler::generateSimpleLoadMemoryReference(cg, nextTopNode, 4);\n       loadOpCode = TR::InstOpCode::lwz;\n       }\n+   TR_ASSERT_FATAL_WITH_NODE(nextTopNode, !tempMR.getMemoryReference()->getIndexRegister(), \"Simple read monitors do not currently support indexed loads\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTY1ODI2Nw=="}, "originalCommit": {"oid": "688a9f3246c328e8d0e6368f913fa29d01cc69d1"}, "originalPosition": 449}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7c26c2088c7839f4dd3ae31e1e36b18778660ba", "author": {"user": {"login": "aviansie-ben", "name": "Ben Thomas (Aviansie Ben)"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/e7c26c2088c7839f4dd3ae31e1e36b18778660ba", "committedDate": "2021-02-11T04:29:01Z", "message": "Disable prefetching for aloadi nodes on 64-bit\n\nPreviously, the code in the insertPrefetchIfNecessary method was\nexpecting that it would only see aloadi nodes on 32-bit. Because of\nthis, the code would not operate correctly and would cause segfaults\nduring compilation. This was previously being handled by simply not\ncalling insertPrefetchIfNecessary under these conditions, however\nkeeping this behaviour requires that OMR know about implementation\ndetails of OpenJ9's prefetching.\n\nWhile this code could theoretically be made to work under these\nconditions, the code as written simply cannot handle this case. Instead,\na check has been added to prevent insertPrefetchIfNecessary from\noperating on aloadi nodes on 64-bit to replicate the old behaviour.\n\nSigned-off-by: Ben Thomas <ben@benthomas.ca>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a98159db0defb4a657b07e6c20745dfb2f0dfed4", "author": {"user": {"login": "aviansie-ben", "name": "Ben Thomas (Aviansie Ben)"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/a98159db0defb4a657b07e6c20745dfb2f0dfed4", "committedDate": "2021-02-11T04:29:01Z", "message": "Add OMRLoadStoreHandler.cpp to builds\n\nSigned-off-by: Ben Thomas <ben@benthomas.ca>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7322e410b44a7776d10e4838c070f689a3af2a95", "author": {"user": {"login": "aviansie-ben", "name": "Ben Thomas (Aviansie Ben)"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/7322e410b44a7776d10e4838c070f689a3af2a95", "committedDate": "2021-02-11T04:29:02Z", "message": "Update write barriers to use the new LoadStoreHandler API\n\nPreviously, the code for performing write barriers was using the old\nMemoryReference-based API for performing its stores. This API is being\ndeprecated in OMR, so all code dealing with write barriers has been\nupdated to use the new LoadStoreHandler API.\n\nSigned-off-by: Ben Thomas <ben@benthomas.ca>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46fc477f605ddc1158a12335082609d905f07b53", "author": {"user": {"login": "aviansie-ben", "name": "Ben Thomas (Aviansie Ben)"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/46fc477f605ddc1158a12335082609d905f07b53", "committedDate": "2021-02-11T04:29:02Z", "message": "Update read barriers to use the new LoadStoreHandler API\n\nPreviously, the code for performing read barriers was using the old\nMemoryReference-based API for performing its loads. This API is being\ndeprecated in OMR, so all code dealing with read barriers has been\nupdated to use the new LoadStoreHandler API.\n\nUnfortunately, this code cannot be updated in its current form to use\nLoadStoreHandler as intended since it unavoidably performs the load\nduring ICF. Thus, it currently uses generateComputeAddressSequence to\ncompute the address but does not use generateLoadAddressSequence to\nperform the load. This is safe since OpenJ9 is the most derived project\nthat could possibly overload LoadStoreHandler and emitting unnecessary\nsync instructions (while bad for performance) is not incorrect.\n\nThis code should be revisited later to make it more idiomatic, but that\nis beyond the scope of this particular change.\n\nSigned-off-by: Ben Thomas <ben@benthomas.ca>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf696f2d44715fd5a8582672ef80c93e7ed92be7", "author": {"user": {"login": "aviansie-ben", "name": "Ben Thomas (Aviansie Ben)"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/bf696f2d44715fd5a8582672ef80c93e7ed92be7", "committedDate": "2021-02-11T04:29:02Z", "message": "Update simple read monitors to use the new LoadStoreHandler API\n\nPreviously, the code for emitting simple read monitors was using the old\nMemoryReference-based API for performing the load. This API is being\ndeprecated in OMR, so all code dealing with read barriers has been\nupdated to use the new LoadStoreHandler API.\n\nSigned-off-by: Ben Thomas <ben@benthomas.ca>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b93e826a2c87fcf670be5f0abe8bb439e9d2ba59", "author": {"user": {"login": "aviansie-ben", "name": "Ben Thomas (Aviansie Ben)"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/b93e826a2c87fcf670be5f0abe8bb439e9d2ba59", "committedDate": "2021-02-11T04:29:02Z", "message": "Update copyright dates to 2021\n\nSigned-off-by: Ben Thomas <ben@benthomas.ca>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8d77f91e715b71d9940157a813c53ddcbcd97d5", "author": {"user": {"login": "aviansie-ben", "name": "Ben Thomas (Aviansie Ben)"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/f8d77f91e715b71d9940157a813c53ddcbcd97d5", "committedDate": "2021-02-11T05:04:24Z", "message": "Remove assert at Julian's request\n\nSigned-off-by: Ben Thomas <ben@benthomas.ca>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dfaf3b86bdd68b6d0c08e0c5db4c49288fb3e18a", "author": {"user": {"login": "aviansie-ben", "name": "Ben Thomas (Aviansie Ben)"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/dfaf3b86bdd68b6d0c08e0c5db4c49288fb3e18a", "committedDate": "2021-01-19T15:53:32Z", "message": "Update copyright dates to 2021\n\nSigned-off-by: Ben Thomas <ben@benthomas.ca>"}, "afterCommit": {"oid": "f8d77f91e715b71d9940157a813c53ddcbcd97d5", "author": {"user": {"login": "aviansie-ben", "name": "Ben Thomas (Aviansie Ben)"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/f8d77f91e715b71d9940157a813c53ddcbcd97d5", "committedDate": "2021-02-11T05:04:24Z", "message": "Remove assert at Julian's request\n\nSigned-off-by: Ben Thomas <ben@benthomas.ca>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkxMjQyNzcy", "url": "https://github.com/eclipse-openj9/openj9/pull/11305#pullrequestreview-591242772", "createdAt": "2021-02-16T13:52:55Z", "commit": {"oid": "f8d77f91e715b71d9940157a813c53ddcbcd97d5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1672, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}