{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3Mzg4MTUw", "number": 10599, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDozNjo1N1rOEoHC6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDo0ODo0MlrOEoHYfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDkzOTMwOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/z/codegen/J9UnresolvedDataReadOnlySnippet.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDozNjo1N1rOHZAvWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMDowOTo0MFrOHZN3lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk4ODU2OQ==", "bodyText": "Tabs should be spaces here for consistency.", "url": "https://github.com/eclipse-openj9/openj9/pull/10599#discussion_r495988569", "createdAt": "2020-09-28T14:36:57Z", "author": {"login": "fjeremic"}, "path": "runtime/compiler/z/codegen/J9UnresolvedDataReadOnlySnippet.cpp", "diffHunk": "@@ -122,12 +123,11 @@ J9::Z::UnresolvedDataReadOnlySnippet::emitSnippetBody()\n       // Branch to doneLabel (BRCL 0xF,[doneLabel])\n       *reinterpret_cast<int16_t*>(cursor) = 0xC0F4;\n \n-      addressA = reinterpret_cast<intptr_t>(doneLabel->getCodeLocation());\n-      addressB = reinterpret_cast<intptr_t>(cursor);\n+\t\tintptr_t doneLabelAddress = reinterpret_cast<intptr_t>(doneLabel->getCodeLocation());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b338abb5dd0f20fafbafcf06353059bd235de0a"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIwMzY2OQ==", "bodyText": "Fixed in https://github.com/eclipse/openj9/compare/ee40f0a3614cab3847b46a4b61c6fb2795d4b775..3ac390dbe99682be85f71980c4568d19c47c35dd", "url": "https://github.com/eclipse-openj9/openj9/pull/10599#discussion_r496203669", "createdAt": "2020-09-28T20:09:40Z", "author": {"login": "r30shah"}, "path": "runtime/compiler/z/codegen/J9UnresolvedDataReadOnlySnippet.cpp", "diffHunk": "@@ -122,12 +123,11 @@ J9::Z::UnresolvedDataReadOnlySnippet::emitSnippetBody()\n       // Branch to doneLabel (BRCL 0xF,[doneLabel])\n       *reinterpret_cast<int16_t*>(cursor) = 0xC0F4;\n \n-      addressA = reinterpret_cast<intptr_t>(doneLabel->getCodeLocation());\n-      addressB = reinterpret_cast<intptr_t>(cursor);\n+\t\tintptr_t doneLabelAddress = reinterpret_cast<intptr_t>(doneLabel->getCodeLocation());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk4ODU2OQ=="}, "originalCommit": {"oid": "7b338abb5dd0f20fafbafcf06353059bd235de0a"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDk1MTcwOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/z/codegen/J9UnresolvedDataReadOnlySnippet.cpp", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDozOTo0MFrOHZA21Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMDoxMjoxM1rOHZN8dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk5MDQ4NQ==", "bodyText": "How about calling it what is is, i.e. returnLabel?", "url": "https://github.com/eclipse-openj9/openj9/pull/10599#discussion_r495990485", "createdAt": "2020-09-28T14:39:40Z", "author": {"login": "fjeremic"}, "path": "runtime/compiler/z/codegen/J9UnresolvedDataReadOnlySnippet.cpp", "diffHunk": "@@ -67,12 +67,14 @@ J9::Z::UnresolvedDataReadOnlySnippet::UnresolvedDataReadOnlySnippet(\n       intptr_t resolveDataAddress,\n       TR::LabelSymbol *startResolveSequenceLabel,\n       TR::LabelSymbol *volatileFenceLabel,\n+      TR::LabelSymbol *snippetCallNextInstrLabel,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b338abb5dd0f20fafbafcf06353059bd235de0a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIwNDkxOA==", "bodyText": "I chose this name it represents the nextInstruction after snippet call for GC, and in none of the path we actually return to this point.", "url": "https://github.com/eclipse-openj9/openj9/pull/10599#discussion_r496204918", "createdAt": "2020-09-28T20:12:13Z", "author": {"login": "r30shah"}, "path": "runtime/compiler/z/codegen/J9UnresolvedDataReadOnlySnippet.cpp", "diffHunk": "@@ -67,12 +67,14 @@ J9::Z::UnresolvedDataReadOnlySnippet::UnresolvedDataReadOnlySnippet(\n       intptr_t resolveDataAddress,\n       TR::LabelSymbol *startResolveSequenceLabel,\n       TR::LabelSymbol *volatileFenceLabel,\n+      TR::LabelSymbol *snippetCallNextInstrLabel,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk5MDQ4NQ=="}, "originalCommit": {"oid": "7b338abb5dd0f20fafbafcf06353059bd235de0a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDk2MTM1OnYy", "diffSide": "LEFT", "path": "runtime/compiler/z/codegen/J9UnresolvedDataReadOnlySnippet.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDo0MTo0NVrOHZA82Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMDowNjozNlrOHZNxcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk5MjAyNQ==", "bodyText": "We should probably leave this comment in.", "url": "https://github.com/eclipse-openj9/openj9/pull/10599#discussion_r495992025", "createdAt": "2020-09-28T14:41:45Z", "author": {"login": "fjeremic"}, "path": "runtime/compiler/z/codegen/J9UnresolvedDataReadOnlySnippet.cpp", "diffHunk": "@@ -89,26 +91,25 @@ J9::Z::UnresolvedDataReadOnlySnippet::emitSnippetBody()\n    TR::GlobalFunctionCallData dataDestination(glueSymRef, getNode(), cursor, cg(), self());\n    cursor = cg()->getObjFmt()->encodeGlobalFunctionCall(dataDestination);\n \n-   // Relative address to the CCUnresolvedData*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b338abb5dd0f20fafbafcf06353059bd235de0a"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIwMjA5OA==", "bodyText": "Added the comment back in https://github.com/eclipse/openj9/compare/ee40f0a3614cab3847b46a4b61c6fb2795d4b775..3ac390dbe99682be85f71980c4568d19c47c35dd", "url": "https://github.com/eclipse-openj9/openj9/pull/10599#discussion_r496202098", "createdAt": "2020-09-28T20:06:36Z", "author": {"login": "r30shah"}, "path": "runtime/compiler/z/codegen/J9UnresolvedDataReadOnlySnippet.cpp", "diffHunk": "@@ -89,26 +91,25 @@ J9::Z::UnresolvedDataReadOnlySnippet::emitSnippetBody()\n    TR::GlobalFunctionCallData dataDestination(glueSymRef, getNode(), cursor, cg(), self());\n    cursor = cg()->getObjFmt()->encodeGlobalFunctionCall(dataDestination);\n \n-   // Relative address to the CCUnresolvedData*", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk5MjAyNQ=="}, "originalCommit": {"oid": "7b338abb5dd0f20fafbafcf06353059bd235de0a"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDk4MDczOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/z/codegen/J9UnresolvedDataReadOnlySnippet.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDo0NTo0MFrOHZBIjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDo0NTo0MFrOHZBIjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk5NTAyMg==", "bodyText": "How about naming this startResolveSequenceLabelAddr?", "url": "https://github.com/eclipse-openj9/openj9/pull/10599#discussion_r495995022", "createdAt": "2020-09-28T14:45:40Z", "author": {"login": "fjeremic"}, "path": "runtime/compiler/z/codegen/J9UnresolvedDataReadOnlySnippet.cpp", "diffHunk": "@@ -89,26 +91,25 @@ J9::Z::UnresolvedDataReadOnlySnippet::emitSnippetBody()\n    TR::GlobalFunctionCallData dataDestination(glueSymRef, getNode(), cursor, cg(), self());\n    cursor = cg()->getObjFmt()->encodeGlobalFunctionCall(dataDestination);\n \n-   // Relative address to the CCUnresolvedData*\n-   intptr_t addressA = reinterpret_cast<intptr_t>(resolveDataAddress);\n-   intptr_t addressB = reinterpret_cast<intptr_t>(cursor);\n+   uint8_t *helperCallRA = cursor;\n \n-   TR_ASSERT_FATAL(cg()->canUseRelativeLongInstructions(addressA), \"CCUnresolvedData* [%p] is outside relative immediate range\", addressA);\n+   TR_ASSERT_FATAL(cg()->canUseRelativeLongInstructions(resolveDataAddress), \"CCUnresolvedData* [%p] is outside relative immediate range\", resolveDataAddress);\n \n-   *reinterpret_cast<int32_t*>(cursor) = static_cast<int32_t>(addressA - addressB);\n+   *reinterpret_cast<int32_t*>(cursor) = static_cast<int32_t>(resolveDataAddress - (intptr_t)helperCallRA);\n    cursor += 4;\n \n    // Constant pool index\n    *reinterpret_cast<int32_t*>(cursor) = getCPIndex();\n    cursor += 4;\n \n    // Relative address to the start of the mainline resolution\n-   addressA = reinterpret_cast<intptr_t>(startResolveSequenceLabel->getCodeLocation());\n-   addressB = reinterpret_cast<intptr_t>(cursor);\n-\n-   TR_ASSERT_FATAL(cg()->canUseRelativeLongInstructions(addressA), \"startResolveSequenceLabel [%p] is outside relative immediate range\", addressA);\n+   intptr_t startOfResolutionSeqLabelAddr = reinterpret_cast<intptr_t>(startResolveSequenceLabel->getCodeLocation());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b338abb5dd0f20fafbafcf06353059bd235de0a"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDk5MTU5OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/z/codegen/J9UnresolvedDataReadOnlySnippet.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDo0ODowNFrOHZBPVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMDowODo1NFrOHZN19w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk5Njc1OA==", "bodyText": "We should add a comment above this similar to others about what it is trying to encode. For example Relative address to the return label following the snippet call.", "url": "https://github.com/eclipse-openj9/openj9/pull/10599#discussion_r495996758", "createdAt": "2020-09-28T14:48:04Z", "author": {"login": "fjeremic"}, "path": "runtime/compiler/z/codegen/J9UnresolvedDataReadOnlySnippet.cpp", "diffHunk": "@@ -89,26 +91,25 @@ J9::Z::UnresolvedDataReadOnlySnippet::emitSnippetBody()\n    TR::GlobalFunctionCallData dataDestination(glueSymRef, getNode(), cursor, cg(), self());\n    cursor = cg()->getObjFmt()->encodeGlobalFunctionCall(dataDestination);\n \n-   // Relative address to the CCUnresolvedData*\n-   intptr_t addressA = reinterpret_cast<intptr_t>(resolveDataAddress);\n-   intptr_t addressB = reinterpret_cast<intptr_t>(cursor);\n+   uint8_t *helperCallRA = cursor;\n \n-   TR_ASSERT_FATAL(cg()->canUseRelativeLongInstructions(addressA), \"CCUnresolvedData* [%p] is outside relative immediate range\", addressA);\n+   TR_ASSERT_FATAL(cg()->canUseRelativeLongInstructions(resolveDataAddress), \"CCUnresolvedData* [%p] is outside relative immediate range\", resolveDataAddress);\n \n-   *reinterpret_cast<int32_t*>(cursor) = static_cast<int32_t>(addressA - addressB);\n+   *reinterpret_cast<int32_t*>(cursor) = static_cast<int32_t>(resolveDataAddress - (intptr_t)helperCallRA);\n    cursor += 4;\n \n    // Constant pool index\n    *reinterpret_cast<int32_t*>(cursor) = getCPIndex();\n    cursor += 4;\n \n    // Relative address to the start of the mainline resolution\n-   addressA = reinterpret_cast<intptr_t>(startResolveSequenceLabel->getCodeLocation());\n-   addressB = reinterpret_cast<intptr_t>(cursor);\n-\n-   TR_ASSERT_FATAL(cg()->canUseRelativeLongInstructions(addressA), \"startResolveSequenceLabel [%p] is outside relative immediate range\", addressA);\n+   intptr_t startOfResolutionSeqLabelAddr = reinterpret_cast<intptr_t>(startResolveSequenceLabel->getCodeLocation());\n+   TR_ASSERT_FATAL(cg()->canUseRelativeLongInstructions(startOfResolutionSeqLabelAddr), \"startResolveSequenceLabel [%p] is outside relative immediate range\", startOfResolutionSeqLabelAddr);\n+   *reinterpret_cast<int32_t*>(cursor) = static_cast<int32_t>(startOfResolutionSeqLabelAddr - (intptr_t)helperCallRA);\n+   cursor += 4;\n \n-   *reinterpret_cast<int32_t*>(cursor) = static_cast<int32_t>(addressA - addressB);\n+   intptr_t snippetCallNextInstrLabelAddress = reinterpret_cast<intptr_t>(snippetCallNextInstrLabel->getCodeLocation());\n+   *reinterpret_cast<int32_t*>(cursor) = static_cast<int32_t>(snippetCallNextInstrLabelAddress - (intptr_t)helperCallRA);\n    cursor += 4;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b338abb5dd0f20fafbafcf06353059bd235de0a"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIwMzI1NQ==", "bodyText": "Added the comment in https://github.com/eclipse/openj9/compare/3ac390dbe99682be85f71980c4568d19c47c35dd..602be0121b2e925ba5801a153abb585fe9008379", "url": "https://github.com/eclipse-openj9/openj9/pull/10599#discussion_r496203255", "createdAt": "2020-09-28T20:08:54Z", "author": {"login": "r30shah"}, "path": "runtime/compiler/z/codegen/J9UnresolvedDataReadOnlySnippet.cpp", "diffHunk": "@@ -89,26 +91,25 @@ J9::Z::UnresolvedDataReadOnlySnippet::emitSnippetBody()\n    TR::GlobalFunctionCallData dataDestination(glueSymRef, getNode(), cursor, cg(), self());\n    cursor = cg()->getObjFmt()->encodeGlobalFunctionCall(dataDestination);\n \n-   // Relative address to the CCUnresolvedData*\n-   intptr_t addressA = reinterpret_cast<intptr_t>(resolveDataAddress);\n-   intptr_t addressB = reinterpret_cast<intptr_t>(cursor);\n+   uint8_t *helperCallRA = cursor;\n \n-   TR_ASSERT_FATAL(cg()->canUseRelativeLongInstructions(addressA), \"CCUnresolvedData* [%p] is outside relative immediate range\", addressA);\n+   TR_ASSERT_FATAL(cg()->canUseRelativeLongInstructions(resolveDataAddress), \"CCUnresolvedData* [%p] is outside relative immediate range\", resolveDataAddress);\n \n-   *reinterpret_cast<int32_t*>(cursor) = static_cast<int32_t>(addressA - addressB);\n+   *reinterpret_cast<int32_t*>(cursor) = static_cast<int32_t>(resolveDataAddress - (intptr_t)helperCallRA);\n    cursor += 4;\n \n    // Constant pool index\n    *reinterpret_cast<int32_t*>(cursor) = getCPIndex();\n    cursor += 4;\n \n    // Relative address to the start of the mainline resolution\n-   addressA = reinterpret_cast<intptr_t>(startResolveSequenceLabel->getCodeLocation());\n-   addressB = reinterpret_cast<intptr_t>(cursor);\n-\n-   TR_ASSERT_FATAL(cg()->canUseRelativeLongInstructions(addressA), \"startResolveSequenceLabel [%p] is outside relative immediate range\", addressA);\n+   intptr_t startOfResolutionSeqLabelAddr = reinterpret_cast<intptr_t>(startResolveSequenceLabel->getCodeLocation());\n+   TR_ASSERT_FATAL(cg()->canUseRelativeLongInstructions(startOfResolutionSeqLabelAddr), \"startResolveSequenceLabel [%p] is outside relative immediate range\", startOfResolutionSeqLabelAddr);\n+   *reinterpret_cast<int32_t*>(cursor) = static_cast<int32_t>(startOfResolutionSeqLabelAddr - (intptr_t)helperCallRA);\n+   cursor += 4;\n \n-   *reinterpret_cast<int32_t*>(cursor) = static_cast<int32_t>(addressA - addressB);\n+   intptr_t snippetCallNextInstrLabelAddress = reinterpret_cast<intptr_t>(snippetCallNextInstrLabel->getCodeLocation());\n+   *reinterpret_cast<int32_t*>(cursor) = static_cast<int32_t>(snippetCallNextInstrLabelAddress - (intptr_t)helperCallRA);\n    cursor += 4;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk5Njc1OA=="}, "originalCommit": {"oid": "7b338abb5dd0f20fafbafcf06353059bd235de0a"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDk5NDU1OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/z/codegen/J9UnresolvedDataReadOnlySnippet.hpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDo0ODo0MlrOHZBRJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDo0ODo0MlrOHZBRJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk5NzIyMg==", "bodyText": "We should order these in the same way as the parameters to the constructor. I'll ignore the fact that we're missing documentation which is true for a wide scope of this effort. We will get to it though before we merge into mainline.", "url": "https://github.com/eclipse-openj9/openj9/pull/10599#discussion_r495997222", "createdAt": "2020-09-28T14:48:42Z", "author": {"login": "fjeremic"}, "path": "runtime/compiler/z/codegen/J9UnresolvedDataReadOnlySnippet.hpp", "diffHunk": "@@ -89,6 +90,7 @@ class UnresolvedDataReadOnlySnippet : public TR::Snippet\n    TR::LabelSymbol *startResolveSequenceLabel;\n    TR::LabelSymbol *volatileFenceLabel;\n    TR::LabelSymbol *doneLabel;\n+   TR::LabelSymbol *snippetCallNextInstrLabel;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b338abb5dd0f20fafbafcf06353059bd235de0a"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4608, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}