{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyNzMwMjA4", "number": 9845, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxODozMDo0OVrOEGD3pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxODozMzowOVrOEGD6rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzkwMzA4OnYy", "diffSide": "RIGHT", "path": "runtime/shared_common/CompositeCache.cpp", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxODozMDo0OVrOGkoJ1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxODo0NzoxM1rOGkot9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA1OTc5Ng==", "bodyText": "\"We don't need to compute the cache id for layer 0\" should be:\n\"We don't need to compute the cache id for the top layer\".\nThe cache ID is needed only by its higher layer. Top layer does not have a higher layer, so no need to compute cache id for the top layer.", "url": "https://github.com/eclipse-openj9/openj9/pull/9845#discussion_r441059796", "createdAt": "2020-06-16T18:30:49Z", "author": {"login": "hangshao0"}, "path": "runtime/shared_common/CompositeCache.cpp", "diffHunk": "@@ -1711,7 +1711,8 @@ SH_CompositeCacheImpl::startup(J9VMThread* currentThread, J9SharedClassPreinitCo\n \t}\n \tif (rc == CC_STARTUP_OK) {\n \t\t_started = true;\n-\t\tif (NULL == cacheMemory) {\n+\t\t/* We don't need to compute the cache id for layer 0. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d221f0258f29e1ebd0a4b0f8984a8a3346aa5450"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA2NDQ3NA==", "bodyText": "Your earlier comments left me with the understanding that a layer stores the unique id of the layer below it. A layer 0 cache has no layers below it and so doesn't need to compute or store an id. At one point I had the test 0 != _layer, but changed it after re-reading your advice to test NULL != _previous.", "url": "https://github.com/eclipse-openj9/openj9/pull/9845#discussion_r441064474", "createdAt": "2020-06-16T18:38:53Z", "author": {"login": "keithc-ca"}, "path": "runtime/shared_common/CompositeCache.cpp", "diffHunk": "@@ -1711,7 +1711,8 @@ SH_CompositeCacheImpl::startup(J9VMThread* currentThread, J9SharedClassPreinitCo\n \t}\n \tif (rc == CC_STARTUP_OK) {\n \t\t_started = true;\n-\t\tif (NULL == cacheMemory) {\n+\t\t/* We don't need to compute the cache id for layer 0. */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA1OTc5Ng=="}, "originalCommit": {"oid": "d221f0258f29e1ebd0a4b0f8984a8a3346aa5450"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA2OTA0Ng==", "bodyText": "a layer stores the unique id of the below it. A layer 0 cache has no layers below it\n\nThis is correct.\n\nso doesn't need to compute or store an id.\n\nThe layer 0 does not store an id. But the cache id of layer 0 may need to be computed.\nIf there is a layer 1, the cache unique ID of layer 0 needs to be computed, and stored in layer 1.\nIf there is no layer 1, layer 0 is the top layer. There is no need to compute or stored id of layer 0.", "url": "https://github.com/eclipse-openj9/openj9/pull/9845#discussion_r441069046", "createdAt": "2020-06-16T18:47:13Z", "author": {"login": "hangshao0"}, "path": "runtime/shared_common/CompositeCache.cpp", "diffHunk": "@@ -1711,7 +1711,8 @@ SH_CompositeCacheImpl::startup(J9VMThread* currentThread, J9SharedClassPreinitCo\n \t}\n \tif (rc == CC_STARTUP_OK) {\n \t\t_started = true;\n-\t\tif (NULL == cacheMemory) {\n+\t\t/* We don't need to compute the cache id for layer 0. */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA1OTc5Ng=="}, "originalCommit": {"oid": "d221f0258f29e1ebd0a4b0f8984a8a3346aa5450"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzkxMDg3OnYy", "diffSide": "RIGHT", "path": "runtime/shared_common/CacheMap.hpp", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxODozMzowOVrOGkoO_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxODo0MjoxM1rOGkojXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA2MTExOQ==", "bodyText": "J9SHR_UNIQUE_CACHE_ID_BUFSIZE or J9SHR_CACHE_UNIQUE_ID_BUFSIZE ? The function name is generateCacheUniqueID", "url": "https://github.com/eclipse-openj9/openj9/pull/9845#discussion_r441061119", "createdAt": "2020-06-16T18:33:09Z", "author": {"login": "hangshao0"}, "path": "runtime/shared_common/CacheMap.hpp", "diffHunk": "@@ -39,7 +39,18 @@\n #define CM_CACHE_CORRUPT -2\n #define CM_CACHE_STORE_PREREQ_ID_FAILED -3\n \n-#define J9SHR_UNIQUE_CACHE_ID_BUFSIZE  (J9SH_MAXPATH + 35)\n+/*\n+ * The maximum width of the hexadecimal representation of a value of type 'T'.\n+ */\n+#define J9HEX_WIDTH(T) (2 * sizeof(T))\n+\n+/*\n+ * A unique cache id is a path followed by six hexadecimal values,\n+ * the first two of which express 64-bits values and the remaining\n+ * four express UDATA values. Additionally, there are six separator\n+ * characters and a terminating NUL character.\n+ */\n+#define J9SHR_UNIQUE_CACHE_ID_BUFSIZE (J9SH_MAXPATH + (2 * J9HEX_WIDTH(U_64)) + (4 * J9HEX_WIDTH(UDATA)) + 6 + 1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d221f0258f29e1ebd0a4b0f8984a8a3346aa5450"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA2NDcxMQ==", "bodyText": "I didn't change the name of the macro, just its value.", "url": "https://github.com/eclipse-openj9/openj9/pull/9845#discussion_r441064711", "createdAt": "2020-06-16T18:39:18Z", "author": {"login": "keithc-ca"}, "path": "runtime/shared_common/CacheMap.hpp", "diffHunk": "@@ -39,7 +39,18 @@\n #define CM_CACHE_CORRUPT -2\n #define CM_CACHE_STORE_PREREQ_ID_FAILED -3\n \n-#define J9SHR_UNIQUE_CACHE_ID_BUFSIZE  (J9SH_MAXPATH + 35)\n+/*\n+ * The maximum width of the hexadecimal representation of a value of type 'T'.\n+ */\n+#define J9HEX_WIDTH(T) (2 * sizeof(T))\n+\n+/*\n+ * A unique cache id is a path followed by six hexadecimal values,\n+ * the first two of which express 64-bits values and the remaining\n+ * four express UDATA values. Additionally, there are six separator\n+ * characters and a terminating NUL character.\n+ */\n+#define J9SHR_UNIQUE_CACHE_ID_BUFSIZE (J9SH_MAXPATH + (2 * J9HEX_WIDTH(U_64)) + (4 * J9HEX_WIDTH(UDATA)) + 6 + 1)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA2MTExOQ=="}, "originalCommit": {"oid": "d221f0258f29e1ebd0a4b0f8984a8a3346aa5450"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA2NjMzMg==", "bodyText": "Ah, I see.", "url": "https://github.com/eclipse-openj9/openj9/pull/9845#discussion_r441066332", "createdAt": "2020-06-16T18:42:13Z", "author": {"login": "hangshao0"}, "path": "runtime/shared_common/CacheMap.hpp", "diffHunk": "@@ -39,7 +39,18 @@\n #define CM_CACHE_CORRUPT -2\n #define CM_CACHE_STORE_PREREQ_ID_FAILED -3\n \n-#define J9SHR_UNIQUE_CACHE_ID_BUFSIZE  (J9SH_MAXPATH + 35)\n+/*\n+ * The maximum width of the hexadecimal representation of a value of type 'T'.\n+ */\n+#define J9HEX_WIDTH(T) (2 * sizeof(T))\n+\n+/*\n+ * A unique cache id is a path followed by six hexadecimal values,\n+ * the first two of which express 64-bits values and the remaining\n+ * four express UDATA values. Additionally, there are six separator\n+ * characters and a terminating NUL character.\n+ */\n+#define J9SHR_UNIQUE_CACHE_ID_BUFSIZE (J9SH_MAXPATH + (2 * J9HEX_WIDTH(U_64)) + (4 * J9HEX_WIDTH(UDATA)) + 6 + 1)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA2MTExOQ=="}, "originalCommit": {"oid": "d221f0258f29e1ebd0a4b0f8984a8a3346aa5450"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4993, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}