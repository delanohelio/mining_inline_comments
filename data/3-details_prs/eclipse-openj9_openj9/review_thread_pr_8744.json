{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzNTk3Mjk3", "number": 8744, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNTo0OTo0M1rODlGR2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNTo0OTo0M1rODlGR2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjI2Nzc5OnYy", "diffSide": "RIGHT", "path": "jcl/src/java.base/share/classes/openj9/internal/tools/attach/target/DiagnosticUtils.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNTo0OTo0M1rOFxyx2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOTozMDozNVrOFx6r4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc1NjUwNA==", "bodyText": "Any reason the existing native can't be used here, it looks like it would work.", "url": "https://github.com/eclipse-openj9/openj9/pull/8744#discussion_r387756504", "createdAt": "2020-03-04T15:49:43Z", "author": {"login": "pshipton"}, "path": "jcl/src/java.base/share/classes/openj9/internal/tools/attach/target/DiagnosticUtils.java", "diffHunk": "@@ -271,14 +272,23 @@ private static DiagnosticProperties doDump(String diagnosticCommand) {\n \t\t\t}\n \t\t\tif (!dumpType.isEmpty()) {\n \t\t\t\tString fileDirective = (\"system\".equals(dumpType) && IPC.isZOS) ? \":dsn=\" : \":file=\"; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n-\n-\t\t\t\tString request = dumpType + fileDirective + parts[1];\n-\t\t\t\ttry {\n-\t\t\t\t\tString actualDumpFile = triggerDumpsImpl(request, dumpType + \"DumpToFile\"); //$NON-NLS-1$\n-\t\t\t\t\tresult = DiagnosticProperties.makeStringResult(\"Dump written to \" + actualDumpFile); //$NON-NLS-1$\n-\t\t\t\t} catch (InvalidDumpOptionExceptionBase e) {\n-\t\t\t\t\tIPC.logMessage(\"doDump exception: \", e.getMessage()); //$NON-NLS-1$\n-\t\t\t\t\tDiagnosticProperties.makeExceptionProperties(e);\n+\t\t\t\tif (parts.length == 1) {\n+\t\t\t\t\t// there is no file path/name specified, use default settings like -Xdump\n+\t\t\t\t\tint rc = triggerDefaultDumpsImpl(dumpType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3e72e04a562fb62aacea62f1f7e5ff9eff5ed85"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc4MjcxMA==", "bodyText": "The existing native openj9.internal.tools.attach.target.DiagnosticUtils.triggerDumpsImpl() is a wrapper of com.ibm.jvm.Dump.triggerDumpsImpl() which lives along with com.ibm.jvm.Dump.JavaDumpImpl(), com.ibm.jvm.Dump.SnapDumpImpl(), com.ibm.jvm.Dump.SystemDumpImpl(), and com.ibm.jvm.Dump.HeapDumpImpl(). Those Java/Snap/System/Heap specific dump native don't provide path/name, and they are in separated natives to avoid path/name parsing within native Dump.triggerDumpsImpl().\nSimilarly triggerDefaultDumpsImpl() doesn't invoke Dump.triggerDumpsImpl() directly either.", "url": "https://github.com/eclipse-openj9/openj9/pull/8744#discussion_r387782710", "createdAt": "2020-03-04T16:27:46Z", "author": {"login": "JasonFengJ9"}, "path": "jcl/src/java.base/share/classes/openj9/internal/tools/attach/target/DiagnosticUtils.java", "diffHunk": "@@ -271,14 +272,23 @@ private static DiagnosticProperties doDump(String diagnosticCommand) {\n \t\t\t}\n \t\t\tif (!dumpType.isEmpty()) {\n \t\t\t\tString fileDirective = (\"system\".equals(dumpType) && IPC.isZOS) ? \":dsn=\" : \":file=\"; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n-\n-\t\t\t\tString request = dumpType + fileDirective + parts[1];\n-\t\t\t\ttry {\n-\t\t\t\t\tString actualDumpFile = triggerDumpsImpl(request, dumpType + \"DumpToFile\"); //$NON-NLS-1$\n-\t\t\t\t\tresult = DiagnosticProperties.makeStringResult(\"Dump written to \" + actualDumpFile); //$NON-NLS-1$\n-\t\t\t\t} catch (InvalidDumpOptionExceptionBase e) {\n-\t\t\t\t\tIPC.logMessage(\"doDump exception: \", e.getMessage()); //$NON-NLS-1$\n-\t\t\t\t\tDiagnosticProperties.makeExceptionProperties(e);\n+\t\t\t\tif (parts.length == 1) {\n+\t\t\t\t\t// there is no file path/name specified, use default settings like -Xdump\n+\t\t\t\t\tint rc = triggerDefaultDumpsImpl(dumpType);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc1NjUwNA=="}, "originalCommit": {"oid": "d3e72e04a562fb62aacea62f1f7e5ff9eff5ed85"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgxOTY1NA==", "bodyText": "I believe triggerDumpsImpl can be used. As long as \":file=\" + parts[1] isn't specified, it will use the default names. Please give this a try. Otherwise there are more changes required to triggerDefaultDumpsImpl which I'll call out in further review.", "url": "https://github.com/eclipse-openj9/openj9/pull/8744#discussion_r387819654", "createdAt": "2020-03-04T17:28:01Z", "author": {"login": "pshipton"}, "path": "jcl/src/java.base/share/classes/openj9/internal/tools/attach/target/DiagnosticUtils.java", "diffHunk": "@@ -271,14 +272,23 @@ private static DiagnosticProperties doDump(String diagnosticCommand) {\n \t\t\t}\n \t\t\tif (!dumpType.isEmpty()) {\n \t\t\t\tString fileDirective = (\"system\".equals(dumpType) && IPC.isZOS) ? \":dsn=\" : \":file=\"; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n-\n-\t\t\t\tString request = dumpType + fileDirective + parts[1];\n-\t\t\t\ttry {\n-\t\t\t\t\tString actualDumpFile = triggerDumpsImpl(request, dumpType + \"DumpToFile\"); //$NON-NLS-1$\n-\t\t\t\t\tresult = DiagnosticProperties.makeStringResult(\"Dump written to \" + actualDumpFile); //$NON-NLS-1$\n-\t\t\t\t} catch (InvalidDumpOptionExceptionBase e) {\n-\t\t\t\t\tIPC.logMessage(\"doDump exception: \", e.getMessage()); //$NON-NLS-1$\n-\t\t\t\t\tDiagnosticProperties.makeExceptionProperties(e);\n+\t\t\t\tif (parts.length == 1) {\n+\t\t\t\t\t// there is no file path/name specified, use default settings like -Xdump\n+\t\t\t\t\tint rc = triggerDefaultDumpsImpl(dumpType);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc1NjUwNA=="}, "originalCommit": {"oid": "d3e72e04a562fb62aacea62f1f7e5ff9eff5ed85"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4NjA1MA==", "bodyText": "Thanks, triggerDumpsImpl() did the trick when :file=name isn't supplied in the dump request string. Updated the PR, please have another look.\ncom.ibm.jvm.Dump.JavaDumpImpl(), com.ibm.jvm.Dump.SnapDumpImpl(), com.ibm.jvm.Dump.SystemDumpImpl(), and com.ibm.jvm.Dump.HeapDumpImpl() should be able to use Dump.triggerDumpsImpl() as well, but I am going to leave it to another PR.", "url": "https://github.com/eclipse-openj9/openj9/pull/8744#discussion_r387886050", "createdAt": "2020-03-04T19:30:35Z", "author": {"login": "JasonFengJ9"}, "path": "jcl/src/java.base/share/classes/openj9/internal/tools/attach/target/DiagnosticUtils.java", "diffHunk": "@@ -271,14 +272,23 @@ private static DiagnosticProperties doDump(String diagnosticCommand) {\n \t\t\t}\n \t\t\tif (!dumpType.isEmpty()) {\n \t\t\t\tString fileDirective = (\"system\".equals(dumpType) && IPC.isZOS) ? \":dsn=\" : \":file=\"; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n-\n-\t\t\t\tString request = dumpType + fileDirective + parts[1];\n-\t\t\t\ttry {\n-\t\t\t\t\tString actualDumpFile = triggerDumpsImpl(request, dumpType + \"DumpToFile\"); //$NON-NLS-1$\n-\t\t\t\t\tresult = DiagnosticProperties.makeStringResult(\"Dump written to \" + actualDumpFile); //$NON-NLS-1$\n-\t\t\t\t} catch (InvalidDumpOptionExceptionBase e) {\n-\t\t\t\t\tIPC.logMessage(\"doDump exception: \", e.getMessage()); //$NON-NLS-1$\n-\t\t\t\t\tDiagnosticProperties.makeExceptionProperties(e);\n+\t\t\t\tif (parts.length == 1) {\n+\t\t\t\t\t// there is no file path/name specified, use default settings like -Xdump\n+\t\t\t\t\tint rc = triggerDefaultDumpsImpl(dumpType);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc1NjUwNA=="}, "originalCommit": {"oid": "d3e72e04a562fb62aacea62f1f7e5ff9eff5ed85"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 646, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}