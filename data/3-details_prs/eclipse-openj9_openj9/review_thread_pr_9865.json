{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzODA5NTIw", "number": 9865, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxODoxNjozOVrOEHM3IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNToyNjo0N1rOEHnyWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1OTg2MjA4OnYy", "diffSide": "RIGHT", "path": "jcl/src/java.base/share/classes/java/lang/invoke/InfoFromMemberName.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxODoxNjozOVrOGmdj3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxODoxNjozOVrOGmdj3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk4MzM4OA==", "bodyText": "Pls add a blank line.", "url": "https://github.com/eclipse-openj9/openj9/pull/9865#discussion_r442983388", "createdAt": "2020-06-19T18:16:39Z", "author": {"login": "pshipton"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/InfoFromMemberName.java", "diffHunk": "@@ -21,3 +21,46 @@\n  *\n  * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n  *******************************************************************************/\n+/*[IF Java15]*/\n+package java.lang.invoke;\n+\n+import java.lang.invoke.MethodHandles.Lookup;\n+import java.lang.reflect.Member;\n+\n+class InfoFromMemberName implements MethodHandleInfo {\n+\tInfoFromMemberName(Lookup lookup, MemberName member, byte kind) {\n+\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n+\t}\n+\n+\t@Override\n+\tpublic Class<?> getDeclaringClass() {\n+\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n+\t}\n+\n+\t@Override\n+\tpublic String getName() {\n+\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n+\t}\n+\n+\t@Override\n+\tpublic MethodType getMethodType() {\n+\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n+\n+\t}\n+\n+\t@Override\n+\tpublic int getModifiers() {\n+\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n+\t}\n+\n+\t@Override\n+\tpublic int getReferenceKind() {\n+\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n+\t}\n+\n+\t@Override\n+\tpublic <T extends Member> T reflectAs(Class<T> expected, Lookup lookup) {\n+\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n+\t}\n+}\n+/* [ENDIF] Java15 */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6ff813463f624c59a2e9a9d750b75f0a3f0d3ed"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1OTg2NDE5OnYy", "diffSide": "RIGHT", "path": "jcl/src/java.base/share/classes/java/lang/invoke/MemberName.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxODoxNzozMlrOGmdlNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxODoxNzozMlrOGmdlNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk4MzczNQ==", "bodyText": "Java 10 is no longer supported, these could all be inside [IF Java 11]", "url": "https://github.com/eclipse-openj9/openj9/pull/9865#discussion_r442983735", "createdAt": "2020-06-19T18:17:32Z", "author": {"login": "pshipton"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MemberName.java", "diffHunk": "@@ -97,6 +97,8 @@ String getMethodDescriptor() {\n \tpublic Class<?> getDeclaringClass() {\n \t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n \t}\n+\t/*[ENDIF] Java10 */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6ff813463f624c59a2e9a9d750b75f0a3f0d3ed"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1OTg3NDY5OnYy", "diffSide": "RIGHT", "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxODoyMTo1MFrOGmdsDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxODoyMTo1MFrOGmdsDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk4NTQ4NQ==", "bodyText": "The external messages need to be declared via preprocessor MSG on the line above, otherwise the messages won't be in the build.  The ExternalMessages-MasterIndex.properties file is just for tracking the indexes, it doesn't go into the build.", "url": "https://github.com/eclipse-openj9/openj9/pull/9865#discussion_r442985485", "createdAt": "2020-06-19T18:21:50Z", "author": {"login": "pshipton"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -2313,6 +2317,19 @@ ClassDefiner makeHiddenClassDefiner(String name, byte[] template) {\n \t\t\tClassDefiner definer = new ClassDefiner(name, template, this);\n \t\t\treturn definer;\n \t\t}\n+\t\t\n+\t\tpublic Class<?> ensureInitialized(Class<?> cls) throws IllegalArgumentException, IllegalAccessException {\n+\t\t\tif (cls.isArray()) {\n+\t\t\t\tthrow new IllegalArgumentException(com.ibm.oti.util.Msg.getString(\"K0683\", cls));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6ff813463f624c59a2e9a9d750b75f0a3f0d3ed"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDI3MzUzOnYy", "diffSide": "RIGHT", "path": "jcl/src/java.base/share/classes/java/lang/invoke/InfoFromMemberName.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNToyNjo0N1rOGnFyMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNjo0Mzo1M1rOGnI06g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY0MjQxOQ==", "bodyText": "Now it seems there is an extra blank line.", "url": "https://github.com/eclipse-openj9/openj9/pull/9865#discussion_r443642419", "createdAt": "2020-06-22T15:26:47Z", "author": {"login": "pshipton"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/InfoFromMemberName.java", "diffHunk": "@@ -21,3 +21,47 @@\n  *\n  * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n  *******************************************************************************/\n+/*[IF Java15]*/\n+package java.lang.invoke;\n+\n+import java.lang.invoke.MethodHandles.Lookup;\n+import java.lang.reflect.Member;\n+\n+class InfoFromMemberName implements MethodHandleInfo {\n+\tInfoFromMemberName(Lookup lookup, MemberName member, byte kind) {\n+\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n+\t}\n+\n+\t@Override\n+\tpublic Class<?> getDeclaringClass() {\n+\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n+\t}\n+\n+\t@Override\n+\tpublic String getName() {\n+\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n+\t}\n+\n+\t@Override\n+\tpublic MethodType getMethodType() {\n+\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n+\n+\t}\n+\n+\t@Override\n+\tpublic int getModifiers() {\n+\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n+\t}\n+\n+\t@Override\n+\tpublic int getReferenceKind() {\n+\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n+\t}\n+\n+\t@Override\n+\tpublic <T extends Member> T reflectAs(Class<T> expected, Lookup lookup) {\n+\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n+\t}\n+}\n+/*[ENDIF] Java15 */\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f264ca4d59c0c6362bae48db35508f01b9c433d"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY0NzI2OQ==", "bodyText": "I thought the previous feedback #9865 (comment) had requested a blank line. I am hoping this is fine.", "url": "https://github.com/eclipse-openj9/openj9/pull/9865#discussion_r443647269", "createdAt": "2020-06-22T15:33:50Z", "author": {"login": "babsingh"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/InfoFromMemberName.java", "diffHunk": "@@ -21,3 +21,47 @@\n  *\n  * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n  *******************************************************************************/\n+/*[IF Java15]*/\n+package java.lang.invoke;\n+\n+import java.lang.invoke.MethodHandles.Lookup;\n+import java.lang.reflect.Member;\n+\n+class InfoFromMemberName implements MethodHandleInfo {\n+\tInfoFromMemberName(Lookup lookup, MemberName member, byte kind) {\n+\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n+\t}\n+\n+\t@Override\n+\tpublic Class<?> getDeclaringClass() {\n+\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n+\t}\n+\n+\t@Override\n+\tpublic String getName() {\n+\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n+\t}\n+\n+\t@Override\n+\tpublic MethodType getMethodType() {\n+\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n+\n+\t}\n+\n+\t@Override\n+\tpublic int getModifiers() {\n+\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n+\t}\n+\n+\t@Override\n+\tpublic int getReferenceKind() {\n+\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n+\t}\n+\n+\t@Override\n+\tpublic <T extends Member> T reflectAs(Class<T> expected, Lookup lookup) {\n+\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n+\t}\n+}\n+/*[ENDIF] Java15 */\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY0MjQxOQ=="}, "originalCommit": {"oid": "7f264ca4d59c0c6362bae48db35508f01b9c433d"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY5MjI2Ng==", "bodyText": "There doesn't need to be a blank line, we just like to have a linefeed at the end of the last line, and there wasn't one originally.", "url": "https://github.com/eclipse-openj9/openj9/pull/9865#discussion_r443692266", "createdAt": "2020-06-22T16:43:53Z", "author": {"login": "pshipton"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/InfoFromMemberName.java", "diffHunk": "@@ -21,3 +21,47 @@\n  *\n  * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n  *******************************************************************************/\n+/*[IF Java15]*/\n+package java.lang.invoke;\n+\n+import java.lang.invoke.MethodHandles.Lookup;\n+import java.lang.reflect.Member;\n+\n+class InfoFromMemberName implements MethodHandleInfo {\n+\tInfoFromMemberName(Lookup lookup, MemberName member, byte kind) {\n+\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n+\t}\n+\n+\t@Override\n+\tpublic Class<?> getDeclaringClass() {\n+\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n+\t}\n+\n+\t@Override\n+\tpublic String getName() {\n+\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n+\t}\n+\n+\t@Override\n+\tpublic MethodType getMethodType() {\n+\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n+\n+\t}\n+\n+\t@Override\n+\tpublic int getModifiers() {\n+\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n+\t}\n+\n+\t@Override\n+\tpublic int getReferenceKind() {\n+\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n+\t}\n+\n+\t@Override\n+\tpublic <T extends Member> T reflectAs(Class<T> expected, Lookup lookup) {\n+\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n+\t}\n+}\n+/*[ENDIF] Java15 */\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY0MjQxOQ=="}, "originalCommit": {"oid": "7f264ca4d59c0c6362bae48db35508f01b9c433d"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}