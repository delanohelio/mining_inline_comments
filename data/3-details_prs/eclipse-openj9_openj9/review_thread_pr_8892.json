{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwMDI2NzA5", "number": 8892, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxOTowMDo0NFrODpPcNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDoxMToxMFrODqzwmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NTcxMTg4OnYy", "diffSide": "RIGHT", "path": "runtime/jcl/common/java_lang_invoke_VarHandle.c", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxOTowMDo0NFrOF4S6rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNToyNTo1OFrOF4zuIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU3NDUwOQ==", "bodyText": "It shouldn't be possible to get here with isStatic true and definingClass == null.  It would be better to assert that then let a partially initialized VH escape", "url": "https://github.com/eclipse-openj9/openj9/pull/8892#discussion_r394574509", "createdAt": "2020-03-18T19:00:44Z", "author": {"login": "DanHeidinga"}, "path": "runtime/jcl/common/java_lang_invoke_VarHandle.c", "diffHunk": "@@ -111,7 +112,11 @@ Java_java_lang_invoke_FieldVarHandle_lookupField(JNIEnv *env, jobject handle, jc\n \t\tgoto _cleanup;\n \t}\n \n-\tJ9VMJAVALANGINVOKEVARHANDLE_SET_MODIFIERS(vmThread, J9_JNI_UNWRAP_REFERENCE(handle), ((J9ROMFieldShape*) romField)->modifiers);\n+\tvarHandle = J9_JNI_UNWRAP_REFERENCE(handle);\n+\tJ9VMJAVALANGINVOKEVARHANDLE_SET_MODIFIERS(vmThread, varHandle, ((J9ROMFieldShape *)romField)->modifiers);\n+\tif (isStatic && (NULL != definingClass)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce30c1c8e5a3d5b6c4ab9298580c77da4fc558ef"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU4NDU1Mw==", "bodyText": "StaticFieldVarHandle and InstanceFieldVarHandle extend FieldVarHandle. For InstanceFieldVarHandle, isStatic will be false. definingClass should be the lookupClass (== instance class) in case of  InstanceFieldVarHandle. We already set definingClass to lookupClass in FieldVarHandle's constructor. For StaticFieldVarHandle, definingClassshould be updated to the owner of the static field.\nWe can add an assert for definingClass since I expect it to be always non-null.\nIn FieldVarHandle's constructor, we set definingClass to j9LookupClass. A more efficient check would be:\nif (isStatic && (j9LookupClass != definingClass)) {\n    Assert_JCL_notNull(definingClass);\n    ...\n\nI also plan to add a new test case to address the reported failure.", "url": "https://github.com/eclipse-openj9/openj9/pull/8892#discussion_r394584553", "createdAt": "2020-03-18T19:20:00Z", "author": {"login": "babsingh"}, "path": "runtime/jcl/common/java_lang_invoke_VarHandle.c", "diffHunk": "@@ -111,7 +112,11 @@ Java_java_lang_invoke_FieldVarHandle_lookupField(JNIEnv *env, jobject handle, jc\n \t\tgoto _cleanup;\n \t}\n \n-\tJ9VMJAVALANGINVOKEVARHANDLE_SET_MODIFIERS(vmThread, J9_JNI_UNWRAP_REFERENCE(handle), ((J9ROMFieldShape*) romField)->modifiers);\n+\tvarHandle = J9_JNI_UNWRAP_REFERENCE(handle);\n+\tJ9VMJAVALANGINVOKEVARHANDLE_SET_MODIFIERS(vmThread, varHandle, ((J9ROMFieldShape *)romField)->modifiers);\n+\tif (isStatic && (NULL != definingClass)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU3NDUwOQ=="}, "originalCommit": {"oid": "ce30c1c8e5a3d5b6c4ab9298580c77da4fc558ef"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU5MjgwMA==", "bodyText": "I was thinking:\nif (isStatic) {\n Assert_JCL_notNull(definingClass);\n}\n\nWhy add the other check?", "url": "https://github.com/eclipse-openj9/openj9/pull/8892#discussion_r394592800", "createdAt": "2020-03-18T19:35:39Z", "author": {"login": "DanHeidinga"}, "path": "runtime/jcl/common/java_lang_invoke_VarHandle.c", "diffHunk": "@@ -111,7 +112,11 @@ Java_java_lang_invoke_FieldVarHandle_lookupField(JNIEnv *env, jobject handle, jc\n \t\tgoto _cleanup;\n \t}\n \n-\tJ9VMJAVALANGINVOKEVARHANDLE_SET_MODIFIERS(vmThread, J9_JNI_UNWRAP_REFERENCE(handle), ((J9ROMFieldShape*) romField)->modifiers);\n+\tvarHandle = J9_JNI_UNWRAP_REFERENCE(handle);\n+\tJ9VMJAVALANGINVOKEVARHANDLE_SET_MODIFIERS(vmThread, varHandle, ((J9ROMFieldShape *)romField)->modifiers);\n+\tif (isStatic && (NULL != definingClass)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU3NDUwOQ=="}, "originalCommit": {"oid": "ce30c1c8e5a3d5b6c4ab9298580c77da4fc558ef"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYwMDM4OQ==", "bodyText": "Why add the other check?\n\nBecause we already set FieldVarHandle.definingClass to lookupClass in FieldVarHandle's constructor before invoking the native FieldVarHandle_lookupField method. We can avoid setting definingClass the same value twice.\nhttps://github.com/eclipse/openj9/blob/6a8a0aef2e12405cc08654f15c62952d7c5f4fc6/jcl/src/java.base/share/classes/java/lang/invoke/FieldVarHandle.java#L53-L60", "url": "https://github.com/eclipse-openj9/openj9/pull/8892#discussion_r394600389", "createdAt": "2020-03-18T19:50:27Z", "author": {"login": "babsingh"}, "path": "runtime/jcl/common/java_lang_invoke_VarHandle.c", "diffHunk": "@@ -111,7 +112,11 @@ Java_java_lang_invoke_FieldVarHandle_lookupField(JNIEnv *env, jobject handle, jc\n \t\tgoto _cleanup;\n \t}\n \n-\tJ9VMJAVALANGINVOKEVARHANDLE_SET_MODIFIERS(vmThread, J9_JNI_UNWRAP_REFERENCE(handle), ((J9ROMFieldShape*) romField)->modifiers);\n+\tvarHandle = J9_JNI_UNWRAP_REFERENCE(handle);\n+\tJ9VMJAVALANGINVOKEVARHANDLE_SET_MODIFIERS(vmThread, varHandle, ((J9ROMFieldShape *)romField)->modifiers);\n+\tif (isStatic && (NULL != definingClass)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU3NDUwOQ=="}, "originalCommit": {"oid": "ce30c1c8e5a3d5b6c4ab9298580c77da4fc558ef"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYwOTIxNg==", "bodyText": "I hadn't realized we're hammering a final field in the native that had already been set.  I really don't like doing that.\nWe should probably remove the final modifier in this case.", "url": "https://github.com/eclipse-openj9/openj9/pull/8892#discussion_r394609216", "createdAt": "2020-03-18T20:07:50Z", "author": {"login": "DanHeidinga"}, "path": "runtime/jcl/common/java_lang_invoke_VarHandle.c", "diffHunk": "@@ -111,7 +112,11 @@ Java_java_lang_invoke_FieldVarHandle_lookupField(JNIEnv *env, jobject handle, jc\n \t\tgoto _cleanup;\n \t}\n \n-\tJ9VMJAVALANGINVOKEVARHANDLE_SET_MODIFIERS(vmThread, J9_JNI_UNWRAP_REFERENCE(handle), ((J9ROMFieldShape*) romField)->modifiers);\n+\tvarHandle = J9_JNI_UNWRAP_REFERENCE(handle);\n+\tJ9VMJAVALANGINVOKEVARHANDLE_SET_MODIFIERS(vmThread, varHandle, ((J9ROMFieldShape *)romField)->modifiers);\n+\tif (isStatic && (NULL != definingClass)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU3NDUwOQ=="}, "originalCommit": {"oid": "ce30c1c8e5a3d5b6c4ab9298580c77da4fc558ef"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTEwMjUzNA==", "bodyText": "In the latest changes, definingClass is only updated once in the native method. Can we keep the final keyword?", "url": "https://github.com/eclipse-openj9/openj9/pull/8892#discussion_r395102534", "createdAt": "2020-03-19T15:13:35Z", "author": {"login": "babsingh"}, "path": "runtime/jcl/common/java_lang_invoke_VarHandle.c", "diffHunk": "@@ -111,7 +112,11 @@ Java_java_lang_invoke_FieldVarHandle_lookupField(JNIEnv *env, jobject handle, jc\n \t\tgoto _cleanup;\n \t}\n \n-\tJ9VMJAVALANGINVOKEVARHANDLE_SET_MODIFIERS(vmThread, J9_JNI_UNWRAP_REFERENCE(handle), ((J9ROMFieldShape*) romField)->modifiers);\n+\tvarHandle = J9_JNI_UNWRAP_REFERENCE(handle);\n+\tJ9VMJAVALANGINVOKEVARHANDLE_SET_MODIFIERS(vmThread, varHandle, ((J9ROMFieldShape *)romField)->modifiers);\n+\tif (isStatic && (NULL != definingClass)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU3NDUwOQ=="}, "originalCommit": {"oid": "ce30c1c8e5a3d5b6c4ab9298580c77da4fc558ef"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTExMTk3MQ==", "bodyText": "Even though, it is initialized once in native code. Compiler expects it to be initialized in Java code. So, the final keyword would need to be removed.", "url": "https://github.com/eclipse-openj9/openj9/pull/8892#discussion_r395111971", "createdAt": "2020-03-19T15:25:58Z", "author": {"login": "babsingh"}, "path": "runtime/jcl/common/java_lang_invoke_VarHandle.c", "diffHunk": "@@ -111,7 +112,11 @@ Java_java_lang_invoke_FieldVarHandle_lookupField(JNIEnv *env, jobject handle, jc\n \t\tgoto _cleanup;\n \t}\n \n-\tJ9VMJAVALANGINVOKEVARHANDLE_SET_MODIFIERS(vmThread, J9_JNI_UNWRAP_REFERENCE(handle), ((J9ROMFieldShape*) romField)->modifiers);\n+\tvarHandle = J9_JNI_UNWRAP_REFERENCE(handle);\n+\tJ9VMJAVALANGINVOKEVARHANDLE_SET_MODIFIERS(vmThread, varHandle, ((J9ROMFieldShape *)romField)->modifiers);\n+\tif (isStatic && (NULL != definingClass)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU3NDUwOQ=="}, "originalCommit": {"oid": "ce30c1c8e5a3d5b6c4ab9298580c77da4fc558ef"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjA4NDkyOnYy", "diffSide": "RIGHT", "path": "jcl/src/java.base/share/classes/java/lang/invoke/FieldVarHandle.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMzo1NjozOVrOF6xaTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMzo1NjozOVrOF6xaTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE3MTI3Ng==", "bodyText": "Comments shouldn't be about the past - \"no longer satisfies\" - but explaining why is great!\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t/* definingClass cannot be a final field since it no longer satisfies the conditions of\n          \n          \n            \n            \t * the final keyword. It is modified twice, once in Java code and once in native code.\n          \n          \n            \n            \t */\n          \n          \n            \n            \t/* definingClass cannot be a final field since it is modified twice, once in \n          \n          \n            \n            \t * Java code and once in native code.\n          \n          \n            \n            \t */", "url": "https://github.com/eclipse-openj9/openj9/pull/8892#discussion_r397171276", "createdAt": "2020-03-24T13:56:39Z", "author": {"login": "DanHeidinga"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/FieldVarHandle.java", "diffHunk": "@@ -35,9 +35,13 @@\n \n abstract class FieldVarHandle extends VarHandle {\n \tfinal long vmslot;\n-\tfinal Class<?> definingClass;\n \tfinal String fieldName;\n \n+\t/* definingClass cannot be a final field since it no longer satisfies the conditions of\n+\t * the final keyword. It is modified twice, once in Java code and once in native code.\n+\t */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b0246bc529600fbd3d3e768aa1de66568d3356b"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjEwMDY2OnYy", "diffSide": "RIGHT", "path": "runtime/jcl/common/java_lang_invoke_VarHandle.c", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDowMDoxOFrOF6xkYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDowMDoxOFrOF6xkYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE3Mzg1OA==", "bodyText": "I would prefer this code unconditionally set the field for static handles.  This makes the code clearer and is safe for the future if the field is no longer set in java\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tif (isStatic && (j9LookupClass != definingClass)) {\n          \n          \n            \n            \tif (isStatic) {", "url": "https://github.com/eclipse-openj9/openj9/pull/8892#discussion_r397173858", "createdAt": "2020-03-24T14:00:18Z", "author": {"login": "DanHeidinga"}, "path": "runtime/jcl/common/java_lang_invoke_VarHandle.c", "diffHunk": "@@ -111,7 +112,18 @@ Java_java_lang_invoke_FieldVarHandle_lookupField(JNIEnv *env, jobject handle, jc\n \t\tgoto _cleanup;\n \t}\n \n-\tJ9VMJAVALANGINVOKEVARHANDLE_SET_MODIFIERS(vmThread, J9_JNI_UNWRAP_REFERENCE(handle), ((J9ROMFieldShape*) romField)->modifiers);\n+\tvarHandle = J9_JNI_UNWRAP_REFERENCE(handle);\n+\tJ9VMJAVALANGINVOKEVARHANDLE_SET_MODIFIERS(vmThread, varHandle, ((J9ROMFieldShape *)romField)->modifiers);\n+\n+\t/* StaticFieldVarHandle and InstanceFieldVarHandle extend FieldVarHandle. For StaticFieldVarHandle, isStatic\n+\t * is true, and the definingClass field is set to the owner of the static field. For InstanceFieldVarHandle,\n+\t * isStatic is false, and the definingClass field is set to the lookupClass, which is also the instance class,\n+\t * in FieldVarHandle's constructor.\n+\t */\n+\tif (isStatic && (j9LookupClass != definingClass)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b0246bc529600fbd3d3e768aa1de66568d3356b"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjE0ODExOnYy", "diffSide": "RIGHT", "path": "test/functional/Java9andUp/src/org/openj9/test/varhandle/StaticFieldVarHandleTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDoxMToxMFrOF6yDXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMDoxMzoxNVrOF7BTrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE4MTc4OA==", "bodyText": "Can this be broken into a series of tests?  It will be easier to focus debugging efforts in the future if we can clearly see which operation failed.", "url": "https://github.com/eclipse-openj9/openj9/pull/8892#discussion_r397181788", "createdAt": "2020-03-24T14:11:10Z", "author": {"login": "DanHeidinga"}, "path": "test/functional/Java9andUp/src/org/openj9/test/varhandle/StaticFieldVarHandleTests.java", "diffHunk": "@@ -2484,4 +2491,226 @@ public void testCommonCallSite() {\n \tprivate long commonVarHandleCallSite(VarHandle vh, long value) {\n \t\treturn (long)vh.get();\n \t}\n+\t\n+\t/**\n+\t * Perform all the operations available on a StaticFieldVarHandle referencing a {@link String} field of a\n+\t * parent class via the child class.\n+\t */\n+\t@Test\n+\tpublic void testReferenceInParentFromChild() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b0246bc529600fbd3d3e768aa1de66568d3356b"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQzMTcyNQ==", "bodyText": "Divided into a series of tests.", "url": "https://github.com/eclipse-openj9/openj9/pull/8892#discussion_r397431725", "createdAt": "2020-03-24T20:13:15Z", "author": {"login": "babsingh"}, "path": "test/functional/Java9andUp/src/org/openj9/test/varhandle/StaticFieldVarHandleTests.java", "diffHunk": "@@ -2484,4 +2491,226 @@ public void testCommonCallSite() {\n \tprivate long commonVarHandleCallSite(VarHandle vh, long value) {\n \t\treturn (long)vh.get();\n \t}\n+\t\n+\t/**\n+\t * Perform all the operations available on a StaticFieldVarHandle referencing a {@link String} field of a\n+\t * parent class via the child class.\n+\t */\n+\t@Test\n+\tpublic void testReferenceInParentFromChild() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE4MTc4OA=="}, "originalCommit": {"oid": "0b0246bc529600fbd3d3e768aa1de66568d3356b"}, "originalPosition": 145}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 547, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}