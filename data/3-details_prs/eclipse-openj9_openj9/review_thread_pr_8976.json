{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzNjUwNzQw", "number": 8976, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDozNToxNVrODtsjcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoxNDoxOVrODwZjHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MjQyNDgwOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/x/codegen/J9TreeEvaluator.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDozNToxNVrOF_Rmvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMTo1Nzo1N1rOF_UInA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg5MzA1NA==", "bodyText": "Wouldn't it be safer to say == TR_no?", "url": "https://github.com/eclipse-openj9/openj9/pull/8976#discussion_r401893054", "createdAt": "2020-04-01T20:35:15Z", "author": {"login": "andrewcraik"}, "path": "runtime/compiler/x/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -4508,6 +4511,25 @@ void J9::X86::TreeEvaluator::transactionalMemoryJITMonitorEntry(TR::Node\n       cg->stopUsingRegister(counterReg);\n    }\n \n+void\n+J9::X86::TreeEvaluator::monitorEnterOrExitForValueTypeClass(\n+      TR::Node *node,\n+      TR::LabelSymbol *snippetLabel,\n+      TR::CodeGenerator *cg)\n+   {\n+   if (cg->isMonitorValueType(node) != TR_maybe)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd65ad82de988ee3d163c9a50f8bd3bc4d005a47"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkzNDQ5Mg==", "bodyText": "This method only handles the cases where it's unclear whether the monitor is value type or not. we need to generate extra checks in those cases. == TR_nois using existing sequence and == TR_yes is calling VM helper directly. Both of the later 2 cases wont be handled here.", "url": "https://github.com/eclipse-openj9/openj9/pull/8976#discussion_r401934492", "createdAt": "2020-04-01T21:57:57Z", "author": {"login": "cathyzhyi"}, "path": "runtime/compiler/x/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -4508,6 +4511,25 @@ void J9::X86::TreeEvaluator::transactionalMemoryJITMonitorEntry(TR::Node\n       cg->stopUsingRegister(counterReg);\n    }\n \n+void\n+J9::X86::TreeEvaluator::monitorEnterOrExitForValueTypeClass(\n+      TR::Node *node,\n+      TR::LabelSymbol *snippetLabel,\n+      TR::CodeGenerator *cg)\n+   {\n+   if (cg->isMonitorValueType(node) != TR_maybe)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg5MzA1NA=="}, "originalCommit": {"oid": "bd65ad82de988ee3d163c9a50f8bd3bc4d005a47"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5OTQ3OTk0OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/codegen/J9CodeGenerator.hpp", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMzowNjoyMFrOGAUnOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMTozMjozM1rOGAqVZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk5MDkwNw==", "bodyText": "Wouldn't this be better phrased as get the most abstract type the monitor may be operating on?", "url": "https://github.com/eclipse-openj9/openj9/pull/8976#discussion_r402990907", "createdAt": "2020-04-03T13:06:20Z", "author": {"login": "andrewcraik"}, "path": "runtime/compiler/codegen/J9CodeGenerator.hpp", "diffHunk": "@@ -298,21 +298,41 @@ class OMR_EXTENSIBLE CodeGenerator : public OMR::CodeGeneratorConnector\n    TR_BitVector *setLiveMonitors(TR_BitVector *v) {return (_liveMonitors = v);}\n \n public:\n+   /*\n+    * \\brief\n+    *    Get the class or the superclass of the monitor object.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd65ad82de988ee3d163c9a50f8bd3bc4d005a47"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAxNzY1Ng==", "bodyText": "Do you mean the most concrete type the monitor may be operating on?", "url": "https://github.com/eclipse-openj9/openj9/pull/8976#discussion_r403017656", "createdAt": "2020-04-03T13:48:19Z", "author": {"login": "cathyzhyi"}, "path": "runtime/compiler/codegen/J9CodeGenerator.hpp", "diffHunk": "@@ -298,21 +298,41 @@ class OMR_EXTENSIBLE CodeGenerator : public OMR::CodeGeneratorConnector\n    TR_BitVector *setLiveMonitors(TR_BitVector *v) {return (_liveMonitors = v);}\n \n public:\n+   /*\n+    * \\brief\n+    *    Get the class or the superclass of the monitor object.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk5MDkwNw=="}, "originalCommit": {"oid": "bd65ad82de988ee3d163c9a50f8bd3bc4d005a47"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI2OTc4Ng==", "bodyText": "Depends on how you view it - it is the most specific type that could cover all possible types that could reach the monitor right?", "url": "https://github.com/eclipse-openj9/openj9/pull/8976#discussion_r403269786", "createdAt": "2020-04-03T19:36:47Z", "author": {"login": "andrewcraik"}, "path": "runtime/compiler/codegen/J9CodeGenerator.hpp", "diffHunk": "@@ -298,21 +298,41 @@ class OMR_EXTENSIBLE CodeGenerator : public OMR::CodeGeneratorConnector\n    TR_BitVector *setLiveMonitors(TR_BitVector *v) {return (_liveMonitors = v);}\n \n public:\n+   /*\n+    * \\brief\n+    *    Get the class or the superclass of the monitor object.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk5MDkwNw=="}, "originalCommit": {"oid": "bd65ad82de988ee3d163c9a50f8bd3bc4d005a47"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM0Njc5MQ==", "bodyText": "Yea, I got it. Changed the phrasing as suggested. Thanks!", "url": "https://github.com/eclipse-openj9/openj9/pull/8976#discussion_r403346791", "createdAt": "2020-04-03T21:32:33Z", "author": {"login": "cathyzhyi"}, "path": "runtime/compiler/codegen/J9CodeGenerator.hpp", "diffHunk": "@@ -298,21 +298,41 @@ class OMR_EXTENSIBLE CodeGenerator : public OMR::CodeGeneratorConnector\n    TR_BitVector *setLiveMonitors(TR_BitVector *v) {return (_liveMonitors = v);}\n \n public:\n+   /*\n+    * \\brief\n+    *    Get the class or the superclass of the monitor object.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk5MDkwNw=="}, "originalCommit": {"oid": "bd65ad82de988ee3d163c9a50f8bd3bc4d005a47"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5OTQ4NTkwOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/x/codegen/J9TreeEvaluator.cpp", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMzowNzo1MFrOGAUqrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwMTo1Mjo0NlrOGBwI6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk5MTc5MA==", "bodyText": "Why is this unconditional? It is only true if value types are enabled right?", "url": "https://github.com/eclipse-openj9/openj9/pull/8976#discussion_r402991790", "createdAt": "2020-04-03T13:07:50Z", "author": {"login": "andrewcraik"}, "path": "runtime/compiler/x/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -132,14 +132,17 @@ inline void generateLoadJ9Class(TR::Node* node, TR::Register* j9class, TR::Regis\n       switch (opValue)\n          {\n          case TR::checkcastAndNULLCHK:\n+         case TR::monent:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd65ad82de988ee3d163c9a50f8bd3bc4d005a47"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA0ODkxNQ==", "bodyText": "It looks like opValue couldn't be monent or monexit before (it would assert before). But now generateLoadJ9Class is called by monitorEnterOrExitForValueTypeClass which can pass in a monent or monexit node. So it can only get to these new cases if value types are enabled.", "url": "https://github.com/eclipse-openj9/openj9/pull/8976#discussion_r403048915", "createdAt": "2020-04-03T14:33:33Z", "author": {"login": "IBMJimmyk"}, "path": "runtime/compiler/x/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -132,14 +132,17 @@ inline void generateLoadJ9Class(TR::Node* node, TR::Register* j9class, TR::Regis\n       switch (opValue)\n          {\n          case TR::checkcastAndNULLCHK:\n+         case TR::monent:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk5MTc5MA=="}, "originalCommit": {"oid": "bd65ad82de988ee3d163c9a50f8bd3bc4d005a47"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ1NDQ1MQ==", "bodyText": "@cathyzhyi Could we add a fatal assert to capture that fact?", "url": "https://github.com/eclipse-openj9/openj9/pull/8976#discussion_r404454451", "createdAt": "2020-04-06T23:46:59Z", "author": {"login": "andrewcraik"}, "path": "runtime/compiler/x/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -132,14 +132,17 @@ inline void generateLoadJ9Class(TR::Node* node, TR::Register* j9class, TR::Regis\n       switch (opValue)\n          {\n          case TR::checkcastAndNULLCHK:\n+         case TR::monent:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk5MTc5MA=="}, "originalCommit": {"oid": "bd65ad82de988ee3d163c9a50f8bd3bc4d005a47"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ5MDQ3Mw==", "bodyText": "Added fatal assert as suggested.", "url": "https://github.com/eclipse-openj9/openj9/pull/8976#discussion_r404490473", "createdAt": "2020-04-07T01:52:46Z", "author": {"login": "cathyzhyi"}, "path": "runtime/compiler/x/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -132,14 +132,17 @@ inline void generateLoadJ9Class(TR::Node* node, TR::Register* j9class, TR::Regis\n       switch (opValue)\n          {\n          case TR::checkcastAndNULLCHK:\n+         case TR::monent:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk5MTc5MA=="}, "originalCommit": {"oid": "bd65ad82de988ee3d163c9a50f8bd3bc4d005a47"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5OTQ5MDg4OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/x/codegen/J9TreeEvaluator.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMzowOTowOFrOGAUtzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMTowNjo0MFrOGApq6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk5MjU5MA==", "bodyText": "Shouldn't this have the verb generate in the name?", "url": "https://github.com/eclipse-openj9/openj9/pull/8976#discussion_r402992590", "createdAt": "2020-04-03T13:09:08Z", "author": {"login": "andrewcraik"}, "path": "runtime/compiler/x/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -4508,6 +4511,25 @@ void J9::X86::TreeEvaluator::transactionalMemoryJITMonitorEntry(TR::Node\n       cg->stopUsingRegister(counterReg);\n    }\n \n+void\n+J9::X86::TreeEvaluator::monitorEnterOrExitForValueTypeClass(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd65ad82de988ee3d163c9a50f8bd3bc4d005a47"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMzNTkxNA==", "bodyText": "changed the name to generateCheckForValueTypeMonitorEnterOrExit.", "url": "https://github.com/eclipse-openj9/openj9/pull/8976#discussion_r403335914", "createdAt": "2020-04-03T21:06:40Z", "author": {"login": "cathyzhyi"}, "path": "runtime/compiler/x/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -4508,6 +4511,25 @@ void J9::X86::TreeEvaluator::transactionalMemoryJITMonitorEntry(TR::Node\n       cg->stopUsingRegister(counterReg);\n    }\n \n+void\n+J9::X86::TreeEvaluator::monitorEnterOrExitForValueTypeClass(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk5MjU5MA=="}, "originalCommit": {"oid": "bd65ad82de988ee3d163c9a50f8bd3bc4d005a47"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5OTQ5MzY0OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/x/codegen/J9TreeEvaluator.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMzowOTo1MFrOGAUvhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNDoxNDoxOFrOGAXVtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk5MzAzMQ==", "bodyText": "Why did this move?", "url": "https://github.com/eclipse-openj9/openj9/pull/8976#discussion_r402993031", "createdAt": "2020-04-03T13:09:50Z", "author": {"login": "andrewcraik"}, "path": "runtime/compiler/x/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -4518,20 +4540,22 @@ J9::X86::TreeEvaluator::VMmonentEvaluator(\n    // appropriate excepting instruction we must make sure to reset the\n    // excepting instruction since our children may have set it.\n    //\n+   TR::Compilation *comp = cg->comp();\n+   TR_J9VMBase *fej9 = (TR_J9VMBase *)(cg->fe());\n    static const char *noInline = feGetEnv(\"TR_NoInlineMonitor\");\n-   static int32_t monEntCount = 0;\n    static const char *firstMonEnt = feGetEnv(\"TR_FirstMonEnt\");\n-   static const char *doCmpFirst = feGetEnv(\"TR_AddCMPBeforeCMPXCHG\");\n+   static int32_t monEntCount = 0;\n    bool reservingLock = false;\n    bool normalLockPreservingReservation = false;\n    bool dummyMethodMonitor = false;\n-   TR_J9VMBase *fej9 = (TR_J9VMBase *)(cg->fe());\n-   TR::Compilation *comp = cg->comp();\n+\n+   static const char *doCmpFirst = feGetEnv(\"TR_AddCMPBeforeCMPXCHG\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd65ad82de988ee3d163c9a50f8bd3bc4d005a47"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAzNTU3NQ==", "bodyText": "I rearranged so that the items that are common for monenter and monexit are in the same order.", "url": "https://github.com/eclipse-openj9/openj9/pull/8976#discussion_r403035575", "createdAt": "2020-04-03T14:14:18Z", "author": {"login": "cathyzhyi"}, "path": "runtime/compiler/x/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -4518,20 +4540,22 @@ J9::X86::TreeEvaluator::VMmonentEvaluator(\n    // appropriate excepting instruction we must make sure to reset the\n    // excepting instruction since our children may have set it.\n    //\n+   TR::Compilation *comp = cg->comp();\n+   TR_J9VMBase *fej9 = (TR_J9VMBase *)(cg->fe());\n    static const char *noInline = feGetEnv(\"TR_NoInlineMonitor\");\n-   static int32_t monEntCount = 0;\n    static const char *firstMonEnt = feGetEnv(\"TR_FirstMonEnt\");\n-   static const char *doCmpFirst = feGetEnv(\"TR_AddCMPBeforeCMPXCHG\");\n+   static int32_t monEntCount = 0;\n    bool reservingLock = false;\n    bool normalLockPreservingReservation = false;\n    bool dummyMethodMonitor = false;\n-   TR_J9VMBase *fej9 = (TR_J9VMBase *)(cg->fe());\n-   TR::Compilation *comp = cg->comp();\n+\n+   static const char *doCmpFirst = feGetEnv(\"TR_AddCMPBeforeCMPXCHG\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk5MzAzMQ=="}, "originalCommit": {"oid": "bd65ad82de988ee3d163c9a50f8bd3bc4d005a47"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjAxMDkwOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/codegen/J9CodeGenerator.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMzozNDo1M1rOGCD06Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMzozNDo1M1rOGCD06Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgxMzAzMw==", "bodyText": "I don't think you need to call the MonitorTypeMap constructor explicitly here.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               _monitorMapping(MonitorTypeMap(std::less<ncount_t>(), MonitorMapAllocator(self()->comp()->trMemory()->heapMemoryRegion()))),\n          \n          \n            \n               _monitorMapping(std::less<ncount_t>(), MonitorMapAllocator(self()->comp()->trMemory()->heapMemoryRegion())),", "url": "https://github.com/eclipse-openj9/openj9/pull/8976#discussion_r404813033", "createdAt": "2020-04-07T13:34:53Z", "author": {"login": "Leonardo2718"}, "path": "runtime/compiler/codegen/J9CodeGenerator.cpp", "diffHunk": "@@ -78,7 +78,7 @@ J9::CodeGenerator::CodeGenerator() :\n    _liveMonitors(NULL),\n    _nodesSpineCheckedList(getTypedAllocator<TR::Node*>(TR::comp()->allocator())),\n    _jniCallSites(getTypedAllocator<TR_Pair<TR_ResolvedMethod,TR::Instruction> *>(TR::comp()->allocator())),\n-   _monitorMapping(self()->comp()->trMemory(), 256),\n+   _monitorMapping(MonitorTypeMap(std::less<ncount_t>(), MonitorMapAllocator(self()->comp()->trMemory()->heapMemoryRegion()))),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f146f439b2e196c5ad946a905143bf956afcb9ff"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjAyNDYzOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/codegen/J9CodeGenerator.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMzozODowNVrOGCD9rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNDo1NToxMlrOGCHlWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgxNTI3OA==", "bodyText": "I think it would cleaner to have\nauto monIt = _monitorMapping.find(monNode->getGlobalIndex());\nreturn monIt != _monitorMapping.end() ? (TR_OpaqueClassBlock *)*monIt : NULL", "url": "https://github.com/eclipse-openj9/openj9/pull/8976#discussion_r404815278", "createdAt": "2020-04-07T13:38:05Z", "author": {"login": "Leonardo2718"}, "path": "runtime/compiler/codegen/J9CodeGenerator.cpp", "diffHunk": "@@ -4980,15 +4978,36 @@ J9::CodeGenerator::generatePoisonNode(TR::Block *currentBlock, TR::SymbolReferen\n void\n J9::CodeGenerator::addMonClass(TR::Node* monNode, TR_OpaqueClassBlock* clazz)\n    {\n-   _monitorMapping.add(monNode);\n-   _monitorMapping.add(clazz);\n+   _monitorMapping[monNode->getGlobalIndex()] = clazz;\n    }\n \n TR_OpaqueClassBlock *\n J9::CodeGenerator::getMonClass(TR::Node* monNode)\n    {\n-   for (int i = 0; i < _monitorMapping.size(); i += 2)\n-      if (_monitorMapping[i] == monNode)\n-         return (TR_OpaqueClassBlock *) _monitorMapping[i+1];\n-   return 0;\n+   return _monitorMapping.find(monNode->getGlobalIndex()) != _monitorMapping.end() ?\n+            (TR_OpaqueClassBlock *) _monitorMapping[monNode->getGlobalIndex()] :\n+            NULL;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f146f439b2e196c5ad946a905143bf956afcb9ff"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg3NDU4NA==", "bodyText": "yes, changed as suggested. Thanks!", "url": "https://github.com/eclipse-openj9/openj9/pull/8976#discussion_r404874584", "createdAt": "2020-04-07T14:55:12Z", "author": {"login": "cathyzhyi"}, "path": "runtime/compiler/codegen/J9CodeGenerator.cpp", "diffHunk": "@@ -4980,15 +4978,36 @@ J9::CodeGenerator::generatePoisonNode(TR::Block *currentBlock, TR::SymbolReferen\n void\n J9::CodeGenerator::addMonClass(TR::Node* monNode, TR_OpaqueClassBlock* clazz)\n    {\n-   _monitorMapping.add(monNode);\n-   _monitorMapping.add(clazz);\n+   _monitorMapping[monNode->getGlobalIndex()] = clazz;\n    }\n \n TR_OpaqueClassBlock *\n J9::CodeGenerator::getMonClass(TR::Node* monNode)\n    {\n-   for (int i = 0; i < _monitorMapping.size(); i += 2)\n-      if (_monitorMapping[i] == monNode)\n-         return (TR_OpaqueClassBlock *) _monitorMapping[i+1];\n-   return 0;\n+   return _monitorMapping.find(monNode->getGlobalIndex()) != _monitorMapping.end() ?\n+            (TR_OpaqueClassBlock *) _monitorMapping[monNode->getGlobalIndex()] :\n+            NULL;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgxNTI3OA=="}, "originalCommit": {"oid": "f146f439b2e196c5ad946a905143bf956afcb9ff"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjAzOTcxOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/codegen/J9CodeGenerator.hpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMzo0MToyMFrOGCEG2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMzo0MToyMFrOGCEG2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgxNzYyNw==", "bodyText": "For consistency\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                *    whether a monitor object is of value type\n          \n          \n            \n                *    Whether a monitor object is of value type", "url": "https://github.com/eclipse-openj9/openj9/pull/8976#discussion_r404817627", "createdAt": "2020-04-07T13:41:20Z", "author": {"login": "Leonardo2718"}, "path": "runtime/compiler/codegen/J9CodeGenerator.hpp", "diffHunk": "@@ -298,21 +298,41 @@ class OMR_EXTENSIBLE CodeGenerator : public OMR::CodeGeneratorConnector\n    TR_BitVector *setLiveMonitors(TR_BitVector *v) {return (_liveMonitors = v);}\n \n public:\n+   /*\n+    * \\brief\n+    *    Get the most abstract type the monitor may be operating on.\n+    *\n+    * \\note\n+    *    java.lang.Object is only returned when the monitor object is of type java.lang.Object but not any subclasses\n+    */\n+   TR_OpaqueClassBlock* getMonClass(TR::Node* monNode);\n \n-TR_OpaqueClassBlock* getMonClass(TR::Node* monNode);\n+   /*\n+    * \\brief\n+    *    whether a monitor object is of value type", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f146f439b2e196c5ad946a905143bf956afcb9ff"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjA1MjE2OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/x/codegen/J9TreeEvaluator.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMzo0Mzo1OVrOGCEOVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNDo1Mzo0M1rOGCHgZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgxOTU0MA==", "bodyText": "Would it be possible to make this a TR_ASSERT_FATAL?", "url": "https://github.com/eclipse-openj9/openj9/pull/8976#discussion_r404819540", "createdAt": "2020-04-07T13:43:59Z", "author": {"login": "Leonardo2718"}, "path": "runtime/compiler/x/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -131,15 +131,19 @@ inline void generateLoadJ9Class(TR::Node* node, TR::Register* j9class, TR::Regis\n       {\n       switch (opValue)\n          {\n+         case TR::monent:\n+         case TR::monexit:\n+            TR_ASSERT_FATAL(TR::Compiler->om.areValueTypesEnabled(), \"monent and monexit evaluators should only call generateLoadJ9Class when value type is enabled\");\n          case TR::checkcastAndNULLCHK:\n             needsNULLCHK = true;\n             break;\n          case TR::icall: // TR_checkAssignable\n             return; // j9class register already holds j9class\n+         case TR::checkcast:\n+         case TR::instanceof:\n+            break;\n          default:\n-            TR_ASSERT(opValue == TR::checkcast ||\n-                      opValue == TR::instanceof,\n-                     \"Unexpected opCode for generateLoadJ9Class %s.\", node->getOpCode().getName());\n+            TR_ASSERT(false, \"Unexpected opCode for generateLoadJ9Class %s.\", node->getOpCode().getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f146f439b2e196c5ad946a905143bf956afcb9ff"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg3MzMxNw==", "bodyText": "yes, changed to TR_ASSERT_FATAL", "url": "https://github.com/eclipse-openj9/openj9/pull/8976#discussion_r404873317", "createdAt": "2020-04-07T14:53:43Z", "author": {"login": "cathyzhyi"}, "path": "runtime/compiler/x/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -131,15 +131,19 @@ inline void generateLoadJ9Class(TR::Node* node, TR::Register* j9class, TR::Regis\n       {\n       switch (opValue)\n          {\n+         case TR::monent:\n+         case TR::monexit:\n+            TR_ASSERT_FATAL(TR::Compiler->om.areValueTypesEnabled(), \"monent and monexit evaluators should only call generateLoadJ9Class when value type is enabled\");\n          case TR::checkcastAndNULLCHK:\n             needsNULLCHK = true;\n             break;\n          case TR::icall: // TR_checkAssignable\n             return; // j9class register already holds j9class\n+         case TR::checkcast:\n+         case TR::instanceof:\n+            break;\n          default:\n-            TR_ASSERT(opValue == TR::checkcast ||\n-                      opValue == TR::instanceof,\n-                     \"Unexpected opCode for generateLoadJ9Class %s.\", node->getOpCode().getName());\n+            TR_ASSERT(false, \"Unexpected opCode for generateLoadJ9Class %s.\", node->getOpCode().getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgxOTU0MA=="}, "originalCommit": {"oid": "f146f439b2e196c5ad946a905143bf956afcb9ff"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjA2OTEzOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/x/codegen/J9TreeEvaluator.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMzo0NzozOFrOGCEZKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMzo0NzozOFrOGCEZKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgyMjMxMw==", "bodyText": "This could really be an auto, since it's clear what the type should be from the cast.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               TR_J9VMBase *fej9 = (TR_J9VMBase *)(cg->fe());\n          \n          \n            \n               auto fej9 = (TR_J9VMBase *)(cg->fe());", "url": "https://github.com/eclipse-openj9/openj9/pull/8976#discussion_r404822313", "createdAt": "2020-04-07T13:47:38Z", "author": {"login": "Leonardo2718"}, "path": "runtime/compiler/x/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -4508,6 +4512,25 @@ void J9::X86::TreeEvaluator::transactionalMemoryJITMonitorEntry(TR::Node\n       cg->stopUsingRegister(counterReg);\n    }\n \n+void\n+J9::X86::TreeEvaluator::generateCheckForValueTypeMonitorEnterOrExit(\n+      TR::Node *node,\n+      TR::LabelSymbol *snippetLabel,\n+      TR::CodeGenerator *cg)\n+   {\n+   if (cg->isMonitorValueType(node) != TR_maybe)\n+      return;\n+   TR::Register *objectReg = cg->evaluate(node->getFirstChild());\n+   auto j9classReg = cg->allocateRegister();\n+   generateLoadJ9Class(node, j9classReg, objectReg, cg);\n+   TR_J9VMBase *fej9 = (TR_J9VMBase *)(cg->fe());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f146f439b2e196c5ad946a905143bf956afcb9ff"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjA3NjY3OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/x/codegen/J9TreeEvaluator.cpp", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMzo0OToxNFrOGCEd-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjoxMjowMVrOGCLOYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgyMzU0Ng==", "bodyText": "This static assert seems out of place.", "url": "https://github.com/eclipse-openj9/openj9/pull/8976#discussion_r404823546", "createdAt": "2020-04-07T13:49:14Z", "author": {"login": "Leonardo2718"}, "path": "runtime/compiler/x/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -4508,6 +4512,25 @@ void J9::X86::TreeEvaluator::transactionalMemoryJITMonitorEntry(TR::Node\n       cg->stopUsingRegister(counterReg);\n    }\n \n+void\n+J9::X86::TreeEvaluator::generateCheckForValueTypeMonitorEnterOrExit(\n+      TR::Node *node,\n+      TR::LabelSymbol *snippetLabel,\n+      TR::CodeGenerator *cg)\n+   {\n+   if (cg->isMonitorValueType(node) != TR_maybe)\n+      return;\n+   TR::Register *objectReg = cg->evaluate(node->getFirstChild());\n+   auto j9classReg = cg->allocateRegister();\n+   generateLoadJ9Class(node, j9classReg, objectReg, cg);\n+   TR_J9VMBase *fej9 = (TR_J9VMBase *)(cg->fe());\n+   auto classFlagsMR = generateX86MemoryReference(j9classReg, (uintptr_t)(fej9->getOffsetOfClassFlags()), cg);\n+   static_assert((uint32_t) J9ClassIsValueType < USHRT_MAX, \"J9ClassIsValueType must be less than 16bits\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f146f439b2e196c5ad946a905143bf956afcb9ff"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg1OTgwNA==", "bodyText": "It's for the test instruction generated below to make sure a 2bytes width memory access is enough to test the bit", "url": "https://github.com/eclipse-openj9/openj9/pull/8976#discussion_r404859804", "createdAt": "2020-04-07T14:36:58Z", "author": {"login": "cathyzhyi"}, "path": "runtime/compiler/x/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -4508,6 +4512,25 @@ void J9::X86::TreeEvaluator::transactionalMemoryJITMonitorEntry(TR::Node\n       cg->stopUsingRegister(counterReg);\n    }\n \n+void\n+J9::X86::TreeEvaluator::generateCheckForValueTypeMonitorEnterOrExit(\n+      TR::Node *node,\n+      TR::LabelSymbol *snippetLabel,\n+      TR::CodeGenerator *cg)\n+   {\n+   if (cg->isMonitorValueType(node) != TR_maybe)\n+      return;\n+   TR::Register *objectReg = cg->evaluate(node->getFirstChild());\n+   auto j9classReg = cg->allocateRegister();\n+   generateLoadJ9Class(node, j9classReg, objectReg, cg);\n+   TR_J9VMBase *fej9 = (TR_J9VMBase *)(cg->fe());\n+   auto classFlagsMR = generateX86MemoryReference(j9classReg, (uintptr_t)(fej9->getOffsetOfClassFlags()), cg);\n+   static_assert((uint32_t) J9ClassIsValueType < USHRT_MAX, \"J9ClassIsValueType must be less than 16bits\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgyMzU0Ng=="}, "originalCommit": {"oid": "f146f439b2e196c5ad946a905143bf956afcb9ff"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkxNjEzNQ==", "bodyText": "Ok, that makes sense. Maybe change the assert message then to something like \"Expecting J9ClassIsValueType to be less than 16 bits for use in test instruction\"?", "url": "https://github.com/eclipse-openj9/openj9/pull/8976#discussion_r404916135", "createdAt": "2020-04-07T15:47:52Z", "author": {"login": "Leonardo2718"}, "path": "runtime/compiler/x/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -4508,6 +4512,25 @@ void J9::X86::TreeEvaluator::transactionalMemoryJITMonitorEntry(TR::Node\n       cg->stopUsingRegister(counterReg);\n    }\n \n+void\n+J9::X86::TreeEvaluator::generateCheckForValueTypeMonitorEnterOrExit(\n+      TR::Node *node,\n+      TR::LabelSymbol *snippetLabel,\n+      TR::CodeGenerator *cg)\n+   {\n+   if (cg->isMonitorValueType(node) != TR_maybe)\n+      return;\n+   TR::Register *objectReg = cg->evaluate(node->getFirstChild());\n+   auto j9classReg = cg->allocateRegister();\n+   generateLoadJ9Class(node, j9classReg, objectReg, cg);\n+   TR_J9VMBase *fej9 = (TR_J9VMBase *)(cg->fe());\n+   auto classFlagsMR = generateX86MemoryReference(j9classReg, (uintptr_t)(fej9->getOffsetOfClassFlags()), cg);\n+   static_assert((uint32_t) J9ClassIsValueType < USHRT_MAX, \"J9ClassIsValueType must be less than 16bits\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgyMzU0Ng=="}, "originalCommit": {"oid": "f146f439b2e196c5ad946a905143bf956afcb9ff"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkzNDI0Mw==", "bodyText": "changed as suggested", "url": "https://github.com/eclipse-openj9/openj9/pull/8976#discussion_r404934243", "createdAt": "2020-04-07T16:12:01Z", "author": {"login": "cathyzhyi"}, "path": "runtime/compiler/x/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -4508,6 +4512,25 @@ void J9::X86::TreeEvaluator::transactionalMemoryJITMonitorEntry(TR::Node\n       cg->stopUsingRegister(counterReg);\n    }\n \n+void\n+J9::X86::TreeEvaluator::generateCheckForValueTypeMonitorEnterOrExit(\n+      TR::Node *node,\n+      TR::LabelSymbol *snippetLabel,\n+      TR::CodeGenerator *cg)\n+   {\n+   if (cg->isMonitorValueType(node) != TR_maybe)\n+      return;\n+   TR::Register *objectReg = cg->evaluate(node->getFirstChild());\n+   auto j9classReg = cg->allocateRegister();\n+   generateLoadJ9Class(node, j9classReg, objectReg, cg);\n+   TR_J9VMBase *fej9 = (TR_J9VMBase *)(cg->fe());\n+   auto classFlagsMR = generateX86MemoryReference(j9classReg, (uintptr_t)(fej9->getOffsetOfClassFlags()), cg);\n+   static_assert((uint32_t) J9ClassIsValueType < USHRT_MAX, \"J9ClassIsValueType must be less than 16bits\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgyMzU0Ng=="}, "originalCommit": {"oid": "f146f439b2e196c5ad946a905143bf956afcb9ff"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzUxNzAzOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/codegen/J9CodeGenerator.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxOToyNDowNFrOGCSq_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxOTo0MjoyNVrOGCTRfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1NjI1Mw==", "bodyText": "Sorry, I missed this earlier: you should avoid calling self() in constructors because it relies on undefined behaviour. You can use TR::comp() instead as is done to initialize other fields.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               _monitorMapping(std::less<ncount_t>(), MonitorMapAllocator(self()->comp()->trMemory()->heapMemoryRegion())),\n          \n          \n            \n               _monitorMapping(std::less<ncount_t>(), MonitorMapAllocator(TR::comp()->trMemory()->heapMemoryRegion())),", "url": "https://github.com/eclipse-openj9/openj9/pull/8976#discussion_r405056253", "createdAt": "2020-04-07T19:24:04Z", "author": {"login": "Leonardo2718"}, "path": "runtime/compiler/codegen/J9CodeGenerator.cpp", "diffHunk": "@@ -78,7 +78,7 @@ J9::CodeGenerator::CodeGenerator() :\n    _liveMonitors(NULL),\n    _nodesSpineCheckedList(getTypedAllocator<TR::Node*>(TR::comp()->allocator())),\n    _jniCallSites(getTypedAllocator<TR_Pair<TR_ResolvedMethod,TR::Instruction> *>(TR::comp()->allocator())),\n-   _monitorMapping(self()->comp()->trMemory(), 256),\n+   _monitorMapping(std::less<ncount_t>(), MonitorMapAllocator(self()->comp()->trMemory()->heapMemoryRegion())),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b8c7785ec1e3b6284743be1ee918ef02b6bfadc"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA2NjExMA==", "bodyText": "fixed as suggested. thanks!", "url": "https://github.com/eclipse-openj9/openj9/pull/8976#discussion_r405066110", "createdAt": "2020-04-07T19:42:25Z", "author": {"login": "cathyzhyi"}, "path": "runtime/compiler/codegen/J9CodeGenerator.cpp", "diffHunk": "@@ -78,7 +78,7 @@ J9::CodeGenerator::CodeGenerator() :\n    _liveMonitors(NULL),\n    _nodesSpineCheckedList(getTypedAllocator<TR::Node*>(TR::comp()->allocator())),\n    _jniCallSites(getTypedAllocator<TR_Pair<TR_ResolvedMethod,TR::Instruction> *>(TR::comp()->allocator())),\n-   _monitorMapping(self()->comp()->trMemory(), 256),\n+   _monitorMapping(std::less<ncount_t>(), MonitorMapAllocator(self()->comp()->trMemory()->heapMemoryRegion())),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1NjI1Mw=="}, "originalCommit": {"oid": "9b8c7785ec1e3b6284743be1ee918ef02b6bfadc"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDc2ODMxOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/x/codegen/J9TreeEvaluator.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoxNDoxOVrOGDYHng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNDo0Mzo1N1rOGDb8cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NDA3OA==", "bodyText": "Can you make these auto types explicit where reasonable eg TR:Register TR_J9VMBase etc", "url": "https://github.com/eclipse-openj9/openj9/pull/8976#discussion_r406194078", "createdAt": "2020-04-09T13:14:19Z", "author": {"login": "andrewcraik"}, "path": "runtime/compiler/x/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -4508,6 +4512,25 @@ void J9::X86::TreeEvaluator::transactionalMemoryJITMonitorEntry(TR::Node\n       cg->stopUsingRegister(counterReg);\n    }\n \n+void\n+J9::X86::TreeEvaluator::generateCheckForValueTypeMonitorEnterOrExit(\n+      TR::Node *node,\n+      TR::LabelSymbol *snippetLabel,\n+      TR::CodeGenerator *cg)\n+   {\n+   if (cg->isMonitorValueType(node) != TR_maybe)\n+      return;\n+   TR::Register *objectReg = cg->evaluate(node->getFirstChild());\n+   auto j9classReg = cg->allocateRegister();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac2a0a19731c9d7aee31e2a0abcf98eb30e6f122"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI1Njc1NQ==", "bodyText": "done. Leo was suggesting using auto for the TR_J9VMBase case since the type is obvious from the checkcast.", "url": "https://github.com/eclipse-openj9/openj9/pull/8976#discussion_r406256755", "createdAt": "2020-04-09T14:43:57Z", "author": {"login": "cathyzhyi"}, "path": "runtime/compiler/x/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -4508,6 +4512,25 @@ void J9::X86::TreeEvaluator::transactionalMemoryJITMonitorEntry(TR::Node\n       cg->stopUsingRegister(counterReg);\n    }\n \n+void\n+J9::X86::TreeEvaluator::generateCheckForValueTypeMonitorEnterOrExit(\n+      TR::Node *node,\n+      TR::LabelSymbol *snippetLabel,\n+      TR::CodeGenerator *cg)\n+   {\n+   if (cg->isMonitorValueType(node) != TR_maybe)\n+      return;\n+   TR::Register *objectReg = cg->evaluate(node->getFirstChild());\n+   auto j9classReg = cg->allocateRegister();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NDA3OA=="}, "originalCommit": {"oid": "ac2a0a19731c9d7aee31e2a0abcf98eb30e6f122"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 431, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}