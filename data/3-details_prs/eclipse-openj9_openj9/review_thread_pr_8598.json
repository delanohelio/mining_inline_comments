{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2NjY3NzMy", "number": 8598, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxOToyNzozMlrODh_Lng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxOTozMDowMlrODh_OgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTY0NzY2OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/optimizer/J9EstimateCodeSize.cpp", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxOToyNzozMlrOFtCEFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNjowMTo1M1rOFuxmXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc2NDA1Mg==", "bodyText": "why 7?", "url": "https://github.com/eclipse-openj9/openj9/pull/8598#discussion_r382764052", "createdAt": "2020-02-21T19:27:32Z", "author": {"login": "andrewcraik"}, "path": "runtime/compiler/optimizer/J9EstimateCodeSize.cpp", "diffHunk": "@@ -1277,7 +1277,11 @@ TR_J9EstimateCodeSize::realEstimateCodeSize(TR_CallTarget *calltarget, TR_CallSt\n       {\n       bci.prepareToFindAndCreateCallsites(blocks, flags, callSites, &cfg, &newBCInfo, _recursionDepth, &callStack);\n       bool iteratorWithState = isCalleeMethodHandleThunk && !mhInlineWithPeeking;\n-      bci.findAndCreateCallsitesFromBytecodes(wasPeekingSuccessfull, iteratorWithState);\n+      if (!bci.findAndCreateCallsitesFromBytecodes(wasPeekingSuccessfull, iteratorWithState))\n+         {\n+         heuristicTrace(tracer(), \"*** Depth %d: ECS end for target %p signature %s. bci.findAndCreateCallsitesFromBytecode failed\", _recursionDepth, calltarget, callerName);\n+         return returnCleanup(7);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70b8822e3dbddc673bbba4553c2626a694d4f763"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMyOTg2OQ==", "bodyText": "I think the number is used to identify the location of error return starting from 0 and the largest existing number is 6.", "url": "https://github.com/eclipse-openj9/openj9/pull/8598#discussion_r383329869", "createdAt": "2020-02-24T15:24:32Z", "author": {"login": "cathyzhyi"}, "path": "runtime/compiler/optimizer/J9EstimateCodeSize.cpp", "diffHunk": "@@ -1277,7 +1277,11 @@ TR_J9EstimateCodeSize::realEstimateCodeSize(TR_CallTarget *calltarget, TR_CallSt\n       {\n       bci.prepareToFindAndCreateCallsites(blocks, flags, callSites, &cfg, &newBCInfo, _recursionDepth, &callStack);\n       bool iteratorWithState = isCalleeMethodHandleThunk && !mhInlineWithPeeking;\n-      bci.findAndCreateCallsitesFromBytecodes(wasPeekingSuccessfull, iteratorWithState);\n+      if (!bci.findAndCreateCallsitesFromBytecodes(wasPeekingSuccessfull, iteratorWithState))\n+         {\n+         heuristicTrace(tracer(), \"*** Depth %d: ECS end for target %p signature %s. bci.findAndCreateCallsitesFromBytecode failed\", _recursionDepth, calltarget, callerName);\n+         return returnCleanup(7);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc2NDA1Mg=="}, "originalCommit": {"oid": "70b8822e3dbddc673bbba4553c2626a694d4f763"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ0ODM5MQ==", "bodyText": "where are these defined? I'm not a fan of this kind of magic number...", "url": "https://github.com/eclipse-openj9/openj9/pull/8598#discussion_r383448391", "createdAt": "2020-02-24T18:51:34Z", "author": {"login": "andrewcraik"}, "path": "runtime/compiler/optimizer/J9EstimateCodeSize.cpp", "diffHunk": "@@ -1277,7 +1277,11 @@ TR_J9EstimateCodeSize::realEstimateCodeSize(TR_CallTarget *calltarget, TR_CallSt\n       {\n       bci.prepareToFindAndCreateCallsites(blocks, flags, callSites, &cfg, &newBCInfo, _recursionDepth, &callStack);\n       bool iteratorWithState = isCalleeMethodHandleThunk && !mhInlineWithPeeking;\n-      bci.findAndCreateCallsitesFromBytecodes(wasPeekingSuccessfull, iteratorWithState);\n+      if (!bci.findAndCreateCallsitesFromBytecodes(wasPeekingSuccessfull, iteratorWithState))\n+         {\n+         heuristicTrace(tracer(), \"*** Depth %d: ECS end for target %p signature %s. bci.findAndCreateCallsitesFromBytecode failed\", _recursionDepth, calltarget, callerName);\n+         return returnCleanup(7);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc2NDA1Mg=="}, "originalCommit": {"oid": "70b8822e3dbddc673bbba4553c2626a694d4f763"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAwMjMzNA==", "bodyText": "it's defined here https://github.com/eclipse/openj9/blob/ef5279e88d90827a8f4fbfe494e661539e7b74c0/runtime/compiler/optimizer/EstimateCodeSize.hpp#L81 and used here https://github.com/eclipse/openj9/blob/ef5279e88d90827a8f4fbfe494e661539e7b74c0/runtime/compiler/optimizer/InlinerTempForJ9.cpp#L3553-L3554\nAnd inside https://github.com/eclipse/openj9/blob/ef5279e88d90827a8f4fbfe494e661539e7b74c0/runtime/compiler/optimizer/J9EstimateCodeSize.cpp#L1040 searching for cleanup( would show all the places using this API to bail. Probably a least an enum can make it looks cleaner.", "url": "https://github.com/eclipse-openj9/openj9/pull/8598#discussion_r384002334", "createdAt": "2020-02-25T17:01:13Z", "author": {"login": "cathyzhyi"}, "path": "runtime/compiler/optimizer/J9EstimateCodeSize.cpp", "diffHunk": "@@ -1277,7 +1277,11 @@ TR_J9EstimateCodeSize::realEstimateCodeSize(TR_CallTarget *calltarget, TR_CallSt\n       {\n       bci.prepareToFindAndCreateCallsites(blocks, flags, callSites, &cfg, &newBCInfo, _recursionDepth, &callStack);\n       bool iteratorWithState = isCalleeMethodHandleThunk && !mhInlineWithPeeking;\n-      bci.findAndCreateCallsitesFromBytecodes(wasPeekingSuccessfull, iteratorWithState);\n+      if (!bci.findAndCreateCallsitesFromBytecodes(wasPeekingSuccessfull, iteratorWithState))\n+         {\n+         heuristicTrace(tracer(), \"*** Depth %d: ECS end for target %p signature %s. bci.findAndCreateCallsitesFromBytecode failed\", _recursionDepth, calltarget, callerName);\n+         return returnCleanup(7);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc2NDA1Mg=="}, "originalCommit": {"oid": "70b8822e3dbddc673bbba4553c2626a694d4f763"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUxODQ4Mg==", "bodyText": "Ok, I think it would be good to create a cleanup item to at least convert these magic numbers to an enum as a beginner item since the current state of affairs is far from idea. Could we have a comment on the function where we use these magic numbers of what the return values are as a stop gap?", "url": "https://github.com/eclipse-openj9/openj9/pull/8598#discussion_r384518482", "createdAt": "2020-02-26T14:16:38Z", "author": {"login": "andrewcraik"}, "path": "runtime/compiler/optimizer/J9EstimateCodeSize.cpp", "diffHunk": "@@ -1277,7 +1277,11 @@ TR_J9EstimateCodeSize::realEstimateCodeSize(TR_CallTarget *calltarget, TR_CallSt\n       {\n       bci.prepareToFindAndCreateCallsites(blocks, flags, callSites, &cfg, &newBCInfo, _recursionDepth, &callStack);\n       bool iteratorWithState = isCalleeMethodHandleThunk && !mhInlineWithPeeking;\n-      bci.findAndCreateCallsitesFromBytecodes(wasPeekingSuccessfull, iteratorWithState);\n+      if (!bci.findAndCreateCallsitesFromBytecodes(wasPeekingSuccessfull, iteratorWithState))\n+         {\n+         heuristicTrace(tracer(), \"*** Depth %d: ECS end for target %p signature %s. bci.findAndCreateCallsitesFromBytecode failed\", _recursionDepth, calltarget, callerName);\n+         return returnCleanup(7);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc2NDA1Mg=="}, "originalCommit": {"oid": "70b8822e3dbddc673bbba4553c2626a694d4f763"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU5MTQ1Mw==", "bodyText": "added documentation for in the returnCleanup and opened an issue here #8664", "url": "https://github.com/eclipse-openj9/openj9/pull/8598#discussion_r384591453", "createdAt": "2020-02-26T16:01:53Z", "author": {"login": "cathyzhyi"}, "path": "runtime/compiler/optimizer/J9EstimateCodeSize.cpp", "diffHunk": "@@ -1277,7 +1277,11 @@ TR_J9EstimateCodeSize::realEstimateCodeSize(TR_CallTarget *calltarget, TR_CallSt\n       {\n       bci.prepareToFindAndCreateCallsites(blocks, flags, callSites, &cfg, &newBCInfo, _recursionDepth, &callStack);\n       bool iteratorWithState = isCalleeMethodHandleThunk && !mhInlineWithPeeking;\n-      bci.findAndCreateCallsitesFromBytecodes(wasPeekingSuccessfull, iteratorWithState);\n+      if (!bci.findAndCreateCallsitesFromBytecodes(wasPeekingSuccessfull, iteratorWithState))\n+         {\n+         heuristicTrace(tracer(), \"*** Depth %d: ECS end for target %p signature %s. bci.findAndCreateCallsitesFromBytecode failed\", _recursionDepth, calltarget, callerName);\n+         return returnCleanup(7);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc2NDA1Mg=="}, "originalCommit": {"oid": "70b8822e3dbddc673bbba4553c2626a694d4f763"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTY1MDM1OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/optimizer/InterpreterEmulator.hpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxOToyODoyOFrOFtCFtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNjo0MToxOVrOFtnoMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc2NDQ2OA==", "bodyText": "would false be better as meaning some error occurred - eg an unexpected bytecode?", "url": "https://github.com/eclipse-openj9/openj9/pull/8598#discussion_r382764468", "createdAt": "2020-02-21T19:28:28Z", "author": {"login": "andrewcraik"}, "path": "runtime/compiler/optimizer/InterpreterEmulator.hpp", "diffHunk": "@@ -224,8 +226,10 @@ class InterpreterEmulator : public TR_ByteCodeIteratorWithState<TR_J9ByteCode, J\n       void initializeIteratorWithState();\n       /*\n        * push and pop operands on stack according to given bytecode\n+       *\n+       * \\return whether maintainStack succeed. Return false if there is any unexpected bytecode.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70b8822e3dbddc673bbba4553c2626a694d4f763"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM3OTUwNQ==", "bodyText": "modified the documentation msg.", "url": "https://github.com/eclipse-openj9/openj9/pull/8598#discussion_r383379505", "createdAt": "2020-02-24T16:41:19Z", "author": {"login": "cathyzhyi"}, "path": "runtime/compiler/optimizer/InterpreterEmulator.hpp", "diffHunk": "@@ -224,8 +226,10 @@ class InterpreterEmulator : public TR_ByteCodeIteratorWithState<TR_J9ByteCode, J\n       void initializeIteratorWithState();\n       /*\n        * push and pop operands on stack according to given bytecode\n+       *\n+       * \\return whether maintainStack succeed. Return false if there is any unexpected bytecode.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc2NDQ2OA=="}, "originalCommit": {"oid": "70b8822e3dbddc673bbba4553c2626a694d4f763"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTY1MjU0OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/optimizer/InterpreterEmulator.cpp", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxOToyOToxMFrOFtCG9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNjo0MToyN1rOFtnohw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc2NDc4OQ==", "bodyText": "formatting - return on new line please", "url": "https://github.com/eclipse-openj9/openj9/pull/8598#discussion_r382764789", "createdAt": "2020-02-21T19:29:10Z", "author": {"login": "andrewcraik"}, "path": "runtime/compiler/optimizer/InterpreterEmulator.cpp", "diffHunk": "@@ -439,13 +441,15 @@ InterpreterEmulator::findAndCreateCallsitesFromBytecodes(bool wasPeekingSuccessf\n \n       if (_iteratorWithState)\n          {\n-         maintainStack(bc);\n-         dumpStack();\n+         if (maintainStack(bc))\n+            dumpStack();\n+         else return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70b8822e3dbddc673bbba4553c2626a694d4f763"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM3OTU5MQ==", "bodyText": "fixed.", "url": "https://github.com/eclipse-openj9/openj9/pull/8598#discussion_r383379591", "createdAt": "2020-02-24T16:41:27Z", "author": {"login": "cathyzhyi"}, "path": "runtime/compiler/optimizer/InterpreterEmulator.cpp", "diffHunk": "@@ -439,13 +441,15 @@ InterpreterEmulator::findAndCreateCallsitesFromBytecodes(bool wasPeekingSuccessf\n \n       if (_iteratorWithState)\n          {\n-         maintainStack(bc);\n-         dumpStack();\n+         if (maintainStack(bc))\n+            dumpStack();\n+         else return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc2NDc4OQ=="}, "originalCommit": {"oid": "70b8822e3dbddc673bbba4553c2626a694d4f763"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTY1NTA1OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/optimizer/InterpreterEmulator.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxOTozMDowMlrOFtCIfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzoxNDowN1rOFtozTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc2NTE4Mg==", "bodyText": "might also be worht having a static debug counter - possibly even one that counts the specific bytecodes that caused failures. An envvar for a fatal assert might not be a bad idea for development to make finding missing bytecodes easier.", "url": "https://github.com/eclipse-openj9/openj9/pull/8598#discussion_r382765182", "createdAt": "2020-02-21T19:30:02Z", "author": {"login": "andrewcraik"}, "path": "runtime/compiler/optimizer/InterpreterEmulator.cpp", "diffHunk": "@@ -216,8 +216,10 @@ InterpreterEmulator::maintainStack(TR_J9ByteCode bc)\n       case J9BCinvokestaticsplit:\n          break;\n       default:\n-         TR_ASSERT_FATAL(0, \"unexpected bytecode in thunk archetype %p at bcIndex %d %s (%d)\\n\", _calltarget, bcIndex(), comp()->fej9()->getByteCodeName(nextByte(0)), bc);\n+         debugTrace(tracer(), \"unexpected bytecode in thunk archetype %p at bcIndex %d %s (%d)\\n\", _calltarget, bcIndex(), comp()->fej9()->getByteCodeName(nextByte(0)), bc);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70b8822e3dbddc673bbba4553c2626a694d4f763"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM5ODczNQ==", "bodyText": "modified as suggested.", "url": "https://github.com/eclipse-openj9/openj9/pull/8598#discussion_r383398735", "createdAt": "2020-02-24T17:14:07Z", "author": {"login": "cathyzhyi"}, "path": "runtime/compiler/optimizer/InterpreterEmulator.cpp", "diffHunk": "@@ -216,8 +216,10 @@ InterpreterEmulator::maintainStack(TR_J9ByteCode bc)\n       case J9BCinvokestaticsplit:\n          break;\n       default:\n-         TR_ASSERT_FATAL(0, \"unexpected bytecode in thunk archetype %p at bcIndex %d %s (%d)\\n\", _calltarget, bcIndex(), comp()->fej9()->getByteCodeName(nextByte(0)), bc);\n+         debugTrace(tracer(), \"unexpected bytecode in thunk archetype %p at bcIndex %d %s (%d)\\n\", _calltarget, bcIndex(), comp()->fej9()->getByteCodeName(nextByte(0)), bc);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc2NTE4Mg=="}, "originalCommit": {"oid": "70b8822e3dbddc673bbba4553c2626a694d4f763"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 580, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}