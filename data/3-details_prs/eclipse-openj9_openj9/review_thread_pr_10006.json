{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5Mzk4MzU3", "number": 10006, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNTozMDoxM1rOEKJ0PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNTozODozOFrOEMIkxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDgyMDQ0OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/env/J9SharedCache.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNTozMDoxM1rOGrCEHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDoxNjozN1rOGsO48A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc3NTc3Mg==", "bodyText": "Why is the test on allowRecompilation needed? Since the test is on the global options object we could do one test during bootstrap and disable CCV completely if it depends on recompilation being enabled.", "url": "https://github.com/eclipse-openj9/openj9/pull/10006#discussion_r447775772", "createdAt": "2020-06-30T15:30:13Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/env/J9SharedCache.cpp", "diffHunk": "@@ -100,47 +100,33 @@ TR_YesNoMaybe TR_J9SharedCache::isSharedCacheDisabledBecauseFull(TR::Compilation\n    return _sharedCacheDisabledBecauseFull;\n    }\n \n-bool\n-TR_J9SharedCache::initCCVCaching()\n+CCVResult\n+TR_J9SharedCache::getCachedCCVResult(TR_J9VMBase *fej9, TR::CompilationInfo *compInfo, TR_OpaqueClassBlock *clazz)\n    {\n-   if (!_classChainValidationMutex)\n+   if (TR::Options::getCmdLineOptions()->allowRecompilation()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf5065d17d6880cd4bd988d23d91ca6490008e07"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAzNDQ4MA==", "bodyText": "I did add the test in bootstrap here\nhttps://github.com/eclipse/openj9/blob/cf5065d17d6880cd4bd988d23d91ca6490008e07/runtime/compiler/control/DLLMain.cpp#L438-L444\nbut I suppose this was an additional test just in case it's possible for recomp to get disabled at runtime.", "url": "https://github.com/eclipse-openj9/openj9/pull/10006#discussion_r449034480", "createdAt": "2020-07-02T14:16:37Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/env/J9SharedCache.cpp", "diffHunk": "@@ -100,47 +100,33 @@ TR_YesNoMaybe TR_J9SharedCache::isSharedCacheDisabledBecauseFull(TR::Compilation\n    return _sharedCacheDisabledBecauseFull;\n    }\n \n-bool\n-TR_J9SharedCache::initCCVCaching()\n+CCVResult\n+TR_J9SharedCache::getCachedCCVResult(TR_J9VMBase *fej9, TR::CompilationInfo *compInfo, TR_OpaqueClassBlock *clazz)\n    {\n-   if (!_classChainValidationMutex)\n+   if (TR::Options::getCmdLineOptions()->allowRecompilation()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc3NTc3Mg=="}, "originalCommit": {"oid": "cf5065d17d6880cd4bd988d23d91ca6490008e07"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDg0MDc1OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/env/J9SharedCache.hpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNTozNDo0NVrOGrCQmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDoyNjo1MVrOGsPVpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc3ODk3MA==", "bodyText": "Is there something to be gained from making these methods static?\nfej9 and compInfo are cached inside the J9SharedCache object so you could avoid passing these parameters.", "url": "https://github.com/eclipse-openj9/openj9/pull/10006#discussion_r447778970", "createdAt": "2020-06-30T15:34:45Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/env/J9SharedCache.hpp", "diffHunk": "@@ -256,18 +243,26 @@ class TR_J9SharedCache : public TR_SharedCache\n \n    /**\n     * @brief Gets the cached result of a prior class chain validation\n-    * @param classOffsetInCache Offset into the SCC of the class to be validated\n-    * @return The CCVResult stored in the map; CCVResult::notYetValidated if result does not exist.\n+    *\n+    * @param fej9 TR_J9VMBase object\n+    * @param compInfo TR::CompilationInfo object\n+    * @param clazz The class to be validated\n+    *\n+    * @return The cached CCVResult; CCVResult::notYetValidated if result does not exist.\n     */\n-   static CCVResult getCachedCCVResult(uintptr_t classOffsetInCache);\n+   static CCVResult getCachedCCVResult(TR_J9VMBase *fej9, TR::CompilationInfo *compInfo, TR_OpaqueClassBlock *clazz);\n \n    /**\n     * @brief Caches the result of a class chain validation\n-    * @param classOffsetInCache Offset into the SCC of the class to be validated\n+    *\n+    * @param fej9 TR_J9VMBase object\n+    * @param compInfo TR::CompilationInfo object\n+    * @param clazz The class to be validated\n     * @param result The result represented as a CCVResult\n-    * @return The result of the insertion.\n+    *\n+    * @return The result of the insertion\n     */\n-   static bool cacheCCVResult(uintptr_t classOffsetInCache, CCVResult result);\n+   static bool cacheCCVResult(TR_J9VMBase *fej9, TR::CompilationInfo *compInfo, TR_OpaqueClassBlock *clazz, CCVResult result);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf5065d17d6880cd4bd988d23d91ca6490008e07"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA0MTgzMQ==", "bodyText": "I don't think so; I'll make them regular methods.", "url": "https://github.com/eclipse-openj9/openj9/pull/10006#discussion_r449041831", "createdAt": "2020-07-02T14:26:51Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/env/J9SharedCache.hpp", "diffHunk": "@@ -256,18 +243,26 @@ class TR_J9SharedCache : public TR_SharedCache\n \n    /**\n     * @brief Gets the cached result of a prior class chain validation\n-    * @param classOffsetInCache Offset into the SCC of the class to be validated\n-    * @return The CCVResult stored in the map; CCVResult::notYetValidated if result does not exist.\n+    *\n+    * @param fej9 TR_J9VMBase object\n+    * @param compInfo TR::CompilationInfo object\n+    * @param clazz The class to be validated\n+    *\n+    * @return The cached CCVResult; CCVResult::notYetValidated if result does not exist.\n     */\n-   static CCVResult getCachedCCVResult(uintptr_t classOffsetInCache);\n+   static CCVResult getCachedCCVResult(TR_J9VMBase *fej9, TR::CompilationInfo *compInfo, TR_OpaqueClassBlock *clazz);\n \n    /**\n     * @brief Caches the result of a class chain validation\n-    * @param classOffsetInCache Offset into the SCC of the class to be validated\n+    *\n+    * @param fej9 TR_J9VMBase object\n+    * @param compInfo TR::CompilationInfo object\n+    * @param clazz The class to be validated\n     * @param result The result represented as a CCVResult\n-    * @return The result of the insertion.\n+    *\n+    * @return The result of the insertion\n     */\n-   static bool cacheCCVResult(uintptr_t classOffsetInCache, CCVResult result);\n+   static bool cacheCCVResult(TR_J9VMBase *fej9, TR::CompilationInfo *compInfo, TR_OpaqueClassBlock *clazz, CCVResult result);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc3ODk3MA=="}, "originalCommit": {"oid": "cf5065d17d6880cd4bd988d23d91ca6490008e07"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDg1MzU1OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/env/J9SharedCache.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNTozNzozMVrOGrCYaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDoxOTowMVrOGsO_RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc4MDk2OQ==", "bodyText": "Is classInfo guaranteed to exist here?", "url": "https://github.com/eclipse-openj9/openj9/pull/10006#discussion_r447780969", "createdAt": "2020-06-30T15:37:31Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/env/J9SharedCache.cpp", "diffHunk": "@@ -100,47 +100,33 @@ TR_YesNoMaybe TR_J9SharedCache::isSharedCacheDisabledBecauseFull(TR::Compilation\n    return _sharedCacheDisabledBecauseFull;\n    }\n \n-bool\n-TR_J9SharedCache::initCCVCaching()\n+CCVResult\n+TR_J9SharedCache::getCachedCCVResult(TR_J9VMBase *fej9, TR::CompilationInfo *compInfo, TR_OpaqueClassBlock *clazz)\n    {\n-   if (!_classChainValidationMutex)\n+   if (TR::Options::getCmdLineOptions()->allowRecompilation()\n+       && !TR::Options::getCmdLineOptions()->getOption(TR_DisableCHOpts))\n       {\n-      if (!(_classChainValidationMutex = TR::Monitor::create(\"JIT-ClassChainValidationMutex\")))\n-         return false;\n+      TR::ClassTableCriticalSection cacheResult(fej9);\n+      TR_PersistentCHTable *table = compInfo->getPersistentInfo()->getPersistentCHTable();\n+      TR_PersistentClassInfo *classInfo = table->findClassInfo(clazz);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf5065d17d6880cd4bd988d23d91ca6490008e07"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAzNjEwMQ==", "bodyText": "I think so; in the PersistentCHTable code, I see a similar pattern, where if the CH Table is enabled, the classInfo must exist.", "url": "https://github.com/eclipse-openj9/openj9/pull/10006#discussion_r449036101", "createdAt": "2020-07-02T14:19:01Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/env/J9SharedCache.cpp", "diffHunk": "@@ -100,47 +100,33 @@ TR_YesNoMaybe TR_J9SharedCache::isSharedCacheDisabledBecauseFull(TR::Compilation\n    return _sharedCacheDisabledBecauseFull;\n    }\n \n-bool\n-TR_J9SharedCache::initCCVCaching()\n+CCVResult\n+TR_J9SharedCache::getCachedCCVResult(TR_J9VMBase *fej9, TR::CompilationInfo *compInfo, TR_OpaqueClassBlock *clazz)\n    {\n-   if (!_classChainValidationMutex)\n+   if (TR::Options::getCmdLineOptions()->allowRecompilation()\n+       && !TR::Options::getCmdLineOptions()->getOption(TR_DisableCHOpts))\n       {\n-      if (!(_classChainValidationMutex = TR::Monitor::create(\"JIT-ClassChainValidationMutex\")))\n-         return false;\n+      TR::ClassTableCriticalSection cacheResult(fej9);\n+      TR_PersistentCHTable *table = compInfo->getPersistentInfo()->getPersistentCHTable();\n+      TR_PersistentClassInfo *classInfo = table->findClassInfo(clazz);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc4MDk2OQ=="}, "originalCommit": {"oid": "cf5065d17d6880cd4bd988d23d91ca6490008e07"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDg1NDUxOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/env/J9SharedCache.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNTozNzo0OFrOGrCZLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDoxOToxNFrOGsPAAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc4MTE2NQ==", "bodyText": "Is classInfo guaranteed to exist here?", "url": "https://github.com/eclipse-openj9/openj9/pull/10006#discussion_r447781165", "createdAt": "2020-06-30T15:37:48Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/env/J9SharedCache.cpp", "diffHunk": "@@ -100,47 +100,33 @@ TR_YesNoMaybe TR_J9SharedCache::isSharedCacheDisabledBecauseFull(TR::Compilation\n    return _sharedCacheDisabledBecauseFull;\n    }\n \n-bool\n-TR_J9SharedCache::initCCVCaching()\n+CCVResult\n+TR_J9SharedCache::getCachedCCVResult(TR_J9VMBase *fej9, TR::CompilationInfo *compInfo, TR_OpaqueClassBlock *clazz)\n    {\n-   if (!_classChainValidationMutex)\n+   if (TR::Options::getCmdLineOptions()->allowRecompilation()\n+       && !TR::Options::getCmdLineOptions()->getOption(TR_DisableCHOpts))\n       {\n-      if (!(_classChainValidationMutex = TR::Monitor::create(\"JIT-ClassChainValidationMutex\")))\n-         return false;\n+      TR::ClassTableCriticalSection cacheResult(fej9);\n+      TR_PersistentCHTable *table = compInfo->getPersistentInfo()->getPersistentCHTable();\n+      TR_PersistentClassInfo *classInfo = table->findClassInfo(clazz);\n+      return classInfo->getCCVResult();\n       }\n-\n-   if (!_ccvMap)\n-      {\n-      void *storage = jitPersistentAlloc(sizeof(CCVMap));\n-      if (!storage)\n-         return false;\n-\n-      _ccvMap = new (storage) CCVMap(CCVComparator(), getPersistentAllocator());\n-      }\n-\n-   return true;\n-   }\n-\n-TR_J9SharedCache::CCVResult\n-TR_J9SharedCache::getCachedCCVResult(uintptr_t classOffsetInCache)\n-   {\n-   OMR::CriticalSection getCachedResult(_classChainValidationMutex);\n-\n-   auto iter = _ccvMap->find(classOffsetInCache);\n-   if (iter == _ccvMap->end())\n-      return CCVResult::notYetValidated;\n-   else\n-      return iter->second;\n+   return CCVResult::notYetValidated;\n    }\n \n bool\n-TR_J9SharedCache::cacheCCVResult(uintptr_t classOffsetInCache, CCVResult result)\n+TR_J9SharedCache::cacheCCVResult(TR_J9VMBase *fej9, TR::CompilationInfo *compInfo, TR_OpaqueClassBlock *clazz, CCVResult result)\n    {\n-   OMR::CriticalSection cacheResult(_classChainValidationMutex);\n-\n-   auto res = _ccvMap->insert(std::make_pair(classOffsetInCache, result));\n-\n-   return res.second;\n+   if (TR::Options::getCmdLineOptions()->allowRecompilation()\n+       && !TR::Options::getCmdLineOptions()->getOption(TR_DisableCHOpts))\n+      {\n+      TR::ClassTableCriticalSection cacheResult(fej9);\n+      TR_PersistentCHTable *table = compInfo->getPersistentInfo()->getPersistentCHTable();\n+      TR_PersistentClassInfo *classInfo = table->findClassInfo(clazz);\n+      classInfo->setCCVResult(result);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf5065d17d6880cd4bd988d23d91ca6490008e07"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAzNjI4OA==", "bodyText": "Same comment as above.", "url": "https://github.com/eclipse-openj9/openj9/pull/10006#discussion_r449036288", "createdAt": "2020-07-02T14:19:14Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/env/J9SharedCache.cpp", "diffHunk": "@@ -100,47 +100,33 @@ TR_YesNoMaybe TR_J9SharedCache::isSharedCacheDisabledBecauseFull(TR::Compilation\n    return _sharedCacheDisabledBecauseFull;\n    }\n \n-bool\n-TR_J9SharedCache::initCCVCaching()\n+CCVResult\n+TR_J9SharedCache::getCachedCCVResult(TR_J9VMBase *fej9, TR::CompilationInfo *compInfo, TR_OpaqueClassBlock *clazz)\n    {\n-   if (!_classChainValidationMutex)\n+   if (TR::Options::getCmdLineOptions()->allowRecompilation()\n+       && !TR::Options::getCmdLineOptions()->getOption(TR_DisableCHOpts))\n       {\n-      if (!(_classChainValidationMutex = TR::Monitor::create(\"JIT-ClassChainValidationMutex\")))\n-         return false;\n+      TR::ClassTableCriticalSection cacheResult(fej9);\n+      TR_PersistentCHTable *table = compInfo->getPersistentInfo()->getPersistentCHTable();\n+      TR_PersistentClassInfo *classInfo = table->findClassInfo(clazz);\n+      return classInfo->getCCVResult();\n       }\n-\n-   if (!_ccvMap)\n-      {\n-      void *storage = jitPersistentAlloc(sizeof(CCVMap));\n-      if (!storage)\n-         return false;\n-\n-      _ccvMap = new (storage) CCVMap(CCVComparator(), getPersistentAllocator());\n-      }\n-\n-   return true;\n-   }\n-\n-TR_J9SharedCache::CCVResult\n-TR_J9SharedCache::getCachedCCVResult(uintptr_t classOffsetInCache)\n-   {\n-   OMR::CriticalSection getCachedResult(_classChainValidationMutex);\n-\n-   auto iter = _ccvMap->find(classOffsetInCache);\n-   if (iter == _ccvMap->end())\n-      return CCVResult::notYetValidated;\n-   else\n-      return iter->second;\n+   return CCVResult::notYetValidated;\n    }\n \n bool\n-TR_J9SharedCache::cacheCCVResult(uintptr_t classOffsetInCache, CCVResult result)\n+TR_J9SharedCache::cacheCCVResult(TR_J9VMBase *fej9, TR::CompilationInfo *compInfo, TR_OpaqueClassBlock *clazz, CCVResult result)\n    {\n-   OMR::CriticalSection cacheResult(_classChainValidationMutex);\n-\n-   auto res = _ccvMap->insert(std::make_pair(classOffsetInCache, result));\n-\n-   return res.second;\n+   if (TR::Options::getCmdLineOptions()->allowRecompilation()\n+       && !TR::Options::getCmdLineOptions()->getOption(TR_DisableCHOpts))\n+      {\n+      TR::ClassTableCriticalSection cacheResult(fej9);\n+      TR_PersistentCHTable *table = compInfo->getPersistentInfo()->getPersistentCHTable();\n+      TR_PersistentClassInfo *classInfo = table->findClassInfo(clazz);\n+      classInfo->setCCVResult(result);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc4MTE2NQ=="}, "originalCommit": {"oid": "cf5065d17d6880cd4bd988d23d91ca6490008e07"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTE0Njc3OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/runtime/RuntimeAssumptions.hpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNjozOTo1MFrOGrFKBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDoyMTozMlrOGsPGyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgyNjQzNw==", "bodyText": "This is going to increase the size of each entry in the CHTable. We should encode it on 8-bits.\nAlso, maybe a add an inline comment for this field. CCV is not very descriptive.", "url": "https://github.com/eclipse-openj9/openj9/pull/10006#discussion_r447826437", "createdAt": "2020-06-30T16:39:50Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/runtime/RuntimeAssumptions.hpp", "diffHunk": "@@ -180,6 +193,7 @@ class TR_PersistentClassInfo : public TR_Link0<TR_PersistentClassInfo>\n    int32_t                             _nameLength;\n    flags8_t                            _flags;\n    flags8_t                            _shouldNotBeNewlyExtended; // one bit for each possible compilation thread\n+   CCVResult                           _ccvResult;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf5065d17d6880cd4bd988d23d91ca6490008e07"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAzODAyNA==", "bodyText": "I think because the enum only has 3 values, it does get allocated only 8 bits by the compiler; however, I can make it explicitly 8 bits.", "url": "https://github.com/eclipse-openj9/openj9/pull/10006#discussion_r449038024", "createdAt": "2020-07-02T14:21:32Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/runtime/RuntimeAssumptions.hpp", "diffHunk": "@@ -180,6 +193,7 @@ class TR_PersistentClassInfo : public TR_Link0<TR_PersistentClassInfo>\n    int32_t                             _nameLength;\n    flags8_t                            _flags;\n    flags8_t                            _shouldNotBeNewlyExtended; // one bit for each possible compilation thread\n+   CCVResult                           _ccvResult;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgyNjQzNw=="}, "originalCommit": {"oid": "cf5065d17d6880cd4bd988d23d91ca6490008e07"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTE0Nzc2OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/runtime/RuntimeAssumptions.hpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNjo0MDowNVrOGrFKpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNjo0MDowNVrOGrFKpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgyNjU5Ng==", "bodyText": "This could me marked as const", "url": "https://github.com/eclipse-openj9/openj9/pull/10006#discussion_r447826596", "createdAt": "2020-06-30T16:40:05Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/runtime/RuntimeAssumptions.hpp", "diffHunk": "@@ -147,6 +157,9 @@ class TR_PersistentClassInfo : public TR_Link0<TR_PersistentClassInfo>\n    int32_t getNameLength()                       { return _nameLength; }\n    virtual void setNameLength(int32_t length)            { _nameLength = length; }\n \n+   void setCCVResult(CCVResult result) { _ccvResult = result; }\n+   CCVResult getCCVResult() { return _ccvResult; }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf5065d17d6880cd4bd988d23d91ca6490008e07"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTE2NDI0OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/env/PersistentCHTable.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNjo0Mzo1M1rOGrFUmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDoyMDoxNlrOGsPC1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgyOTE0Ng==", "bodyText": "Could we use scratch memory instead of persistent for this temporary?", "url": "https://github.com/eclipse-openj9/openj9/pull/10006#discussion_r447829146", "createdAt": "2020-06-30T16:43:53Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/env/PersistentCHTable.cpp", "diffHunk": "@@ -713,3 +713,45 @@ TR_PersistentCHTable::classGotLoaded(\n       }\n    return clazz;\n    }\n+\n+void\n+TR_PersistentCHTable::collectAllSubClasses(TR_PersistentClassInfo *clazz, ClassList &classList, TR_J9VMBase *fej9, bool locked)\n+   {\n+   TR::ClassTableCriticalSection collectSubClasses(fej9, locked);\n+\n+   VisitTracker<> marked(TR::Compiler->persistentAllocator());\n+\n+   collectAllSubClassesLocked(clazz, classList, marked);\n+   }\n+\n+void\n+TR_PersistentCHTable::collectAllSubClassesLocked(TR_PersistentClassInfo *clazz, ClassList &classList, VisitTracker<> &marked)\n+   {\n+   for (auto subClass = clazz->getFirstSubclass(); subClass; subClass = subClass->getNext())\n+      {\n+      if (!subClass->getClassInfo()->hasBeenVisited())\n+         {\n+         TR_PersistentClassInfo *sc = subClass->getClassInfo();\n+         classList.push_front(sc);\n+         marked.visit(sc);\n+         collectAllSubClassesLocked(sc, classList, marked);\n+         }\n+      }\n+   }\n+\n+void\n+TR_PersistentCHTable::resetCachedCCVResult(TR_J9VMBase *fej9, TR_OpaqueClassBlock *clazz)\n+   {\n+   TR::ClassTableCriticalSection collectSubClasses(fej9);\n+\n+   ClassList classList(TR::Compiler->persistentAllocator());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf5065d17d6880cd4bd988d23d91ca6490008e07"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAzNzAxNQ==", "bodyText": "No, because this method runs outside of a compilation; it only runs when HCR causes the JIT hook jitClassesRedefined to get invoked.", "url": "https://github.com/eclipse-openj9/openj9/pull/10006#discussion_r449037015", "createdAt": "2020-07-02T14:20:16Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/env/PersistentCHTable.cpp", "diffHunk": "@@ -713,3 +713,45 @@ TR_PersistentCHTable::classGotLoaded(\n       }\n    return clazz;\n    }\n+\n+void\n+TR_PersistentCHTable::collectAllSubClasses(TR_PersistentClassInfo *clazz, ClassList &classList, TR_J9VMBase *fej9, bool locked)\n+   {\n+   TR::ClassTableCriticalSection collectSubClasses(fej9, locked);\n+\n+   VisitTracker<> marked(TR::Compiler->persistentAllocator());\n+\n+   collectAllSubClassesLocked(clazz, classList, marked);\n+   }\n+\n+void\n+TR_PersistentCHTable::collectAllSubClassesLocked(TR_PersistentClassInfo *clazz, ClassList &classList, VisitTracker<> &marked)\n+   {\n+   for (auto subClass = clazz->getFirstSubclass(); subClass; subClass = subClass->getNext())\n+      {\n+      if (!subClass->getClassInfo()->hasBeenVisited())\n+         {\n+         TR_PersistentClassInfo *sc = subClass->getClassInfo();\n+         classList.push_front(sc);\n+         marked.visit(sc);\n+         collectAllSubClassesLocked(sc, classList, marked);\n+         }\n+      }\n+   }\n+\n+void\n+TR_PersistentCHTable::resetCachedCCVResult(TR_J9VMBase *fej9, TR_OpaqueClassBlock *clazz)\n+   {\n+   TR::ClassTableCriticalSection collectSubClasses(fej9);\n+\n+   ClassList classList(TR::Compiler->persistentAllocator());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgyOTE0Ng=="}, "originalCommit": {"oid": "cf5065d17d6880cd4bd988d23d91ca6490008e07"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMTU3MjU2OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/runtime/RuntimeAssumptions.hpp", "isResolved": true, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNTozNDozNlrOGuEPeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNDo1OToxN1rOGusN1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk1NzE3Nw==", "bodyText": "Does something like this work on all platforms: enum CCVResults : uint8_t\nThis would eliminate the need for casting.", "url": "https://github.com/eclipse-openj9/openj9/pull/10006#discussion_r450957177", "createdAt": "2020-07-07T15:34:36Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/runtime/RuntimeAssumptions.hpp", "diffHunk": "@@ -45,6 +45,16 @@ class TR_PreXRecompile;\n class TR_RedefinedClassPicSite;\n class TR_UnloadedClassPicSite;\n \n+/**\n+ * @brief Enum to describe the result of a Class Chain Validation (CCV).\n+ */\n+enum CCVResult", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34fe2f57f167d0a9fcc07b033f966145d26bf6eb"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA3Mjk5OA==", "bodyText": "I tried it out; it didn't work. The compiler will accept the syntax, but it will complain about invalid conversion without the casts.", "url": "https://github.com/eclipse-openj9/openj9/pull/10006#discussion_r451072998", "createdAt": "2020-07-07T18:49:26Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/runtime/RuntimeAssumptions.hpp", "diffHunk": "@@ -45,6 +45,16 @@ class TR_PreXRecompile;\n class TR_RedefinedClassPicSite;\n class TR_UnloadedClassPicSite;\n \n+/**\n+ * @brief Enum to describe the result of a Class Chain Validation (CCV).\n+ */\n+enum CCVResult", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk1NzE3Nw=="}, "originalCommit": {"oid": "34fe2f57f167d0a9fcc07b033f966145d26bf6eb"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA4ODk3OQ==", "bodyText": "I am curious, on which platform it didn't work? We use this for JITServer code compiled with gcc", "url": "https://github.com/eclipse-openj9/openj9/pull/10006#discussion_r451088979", "createdAt": "2020-07-07T19:20:11Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/runtime/RuntimeAssumptions.hpp", "diffHunk": "@@ -45,6 +45,16 @@ class TR_PreXRecompile;\n class TR_RedefinedClassPicSite;\n class TR_UnloadedClassPicSite;\n \n+/**\n+ * @brief Enum to describe the result of a Class Chain Validation (CCV).\n+ */\n+enum CCVResult", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk1NzE3Nw=="}, "originalCommit": {"oid": "34fe2f57f167d0a9fcc07b033f966145d26bf6eb"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTExODk0OQ==", "bodyText": "diff --git a/runtime/compiler/runtime/RuntimeAssumptions.hpp b/runtime/compiler/runtime/RuntimeAssumptions.hpp\nindex 293b1333fd..176b02d3c4 100644\n--- a/runtime/compiler/runtime/RuntimeAssumptions.hpp\n+++ b/runtime/compiler/runtime/RuntimeAssumptions.hpp\n@@ -48,7 +48,7 @@ class TR_UnloadedClassPicSite;\n /**\n  * @brief Enum to describe the result of a Class Chain Validation (CCV).\n  */\n-enum CCVResult\n+enum CCVResult : uint8_t\n    {\n    notYetValidated,\n    success,\n@@ -160,8 +160,8 @@ class TR_PersistentClassInfo : public TR_Link0<TR_PersistentClassInfo>\n    int32_t getNameLength()                       { return _nameLength; }\n    virtual void setNameLength(int32_t length)            { _nameLength = length; }\n \n-   void setCCVResult(CCVResult result) { _ccvResult = static_cast<uint8_t>(result); }\n-   CCVResult getCCVResult() const { return static_cast<CCVResult>(_ccvResult); }\n+   void setCCVResult(CCVResult result) { _ccvResult = result; }\n+   CCVResult getCCVResult() const { return _ccvResult; }\n \n    private:\n\nIn file included from /root/jit/compiler/env/J9SharedCache.hpp:34:0,\n                 from /root/jit/compiler/env/VMJ9.h:45,\n                 from /root/jit/compiler/compile/AOTClassInfo.hpp:29,\n                 from /root/jit/compiler/compile/J9Compilation.hpp:43,\n                 from /root/jit/compiler/compile/Compilation.hpp:26,\n                 from /root/jit/omr/compiler/codegen/OMRCodeGenerator.hpp:45,\n                 from /root/jit/omr/compiler/x/codegen/OMRCodeGenerator.hpp:34,\n                 from /root/jit/omr/compiler/x/amd64/codegen/OMRCodeGenerator.hpp:36,\n                 from /root/jit/compiler/codegen/J9CodeGenerator.hpp:36,\n                 from /root/jit/compiler/x/codegen/J9CodeGenerator.hpp:26,\n                 from /root/jit/compiler/x/amd64/codegen/J9CodeGenerator.hpp:41,\n                 from /root/jit/compiler/codegen/CodeGenGC.cpp:32:\n/root/jit/compiler/runtime/RuntimeAssumptions.hpp: In member function 'CCVResult TR_PersistentClassInfo::getCCVResult() const':\n/root/jit/compiler/runtime/RuntimeAssumptions.hpp:164:44: error: invalid conversion from 'uint8_t {aka unsigned char}' to 'CCVResult' [-fpermissive]\n    CCVResult getCCVResult() const { return _ccvResult; }\n                                            ^~~~~~~~~~\n\nroot@ba22b76deb8d:~/jit# gcc --version\ngcc (GCC) 7.3.0\nCopyright (C) 2017 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.", "url": "https://github.com/eclipse-openj9/openj9/pull/10006#discussion_r451118949", "createdAt": "2020-07-07T20:18:56Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/runtime/RuntimeAssumptions.hpp", "diffHunk": "@@ -45,6 +45,16 @@ class TR_PreXRecompile;\n class TR_RedefinedClassPicSite;\n class TR_UnloadedClassPicSite;\n \n+/**\n+ * @brief Enum to describe the result of a Class Chain Validation (CCV).\n+ */\n+enum CCVResult", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk1NzE3Nw=="}, "originalCommit": {"oid": "34fe2f57f167d0a9fcc07b033f966145d26bf6eb"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEzMjIzMg==", "bodyText": "What is the declaration of _ccvResult above? The compiler complains that about a conversion from uint8_t to CCVResult, but we should already have:\nCCVResult _ccvResult;", "url": "https://github.com/eclipse-openj9/openj9/pull/10006#discussion_r451132232", "createdAt": "2020-07-07T20:44:45Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/runtime/RuntimeAssumptions.hpp", "diffHunk": "@@ -45,6 +45,16 @@ class TR_PreXRecompile;\n class TR_RedefinedClassPicSite;\n class TR_UnloadedClassPicSite;\n \n+/**\n+ * @brief Enum to describe the result of a Class Chain Validation (CCV).\n+ */\n+enum CCVResult", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk1NzE3Nw=="}, "originalCommit": {"oid": "34fe2f57f167d0a9fcc07b033f966145d26bf6eb"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEzNjM5Ng==", "bodyText": "oh, _ccvResult is a uint8_t. I guess that's why there's a problem?", "url": "https://github.com/eclipse-openj9/openj9/pull/10006#discussion_r451136396", "createdAt": "2020-07-07T20:53:02Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/runtime/RuntimeAssumptions.hpp", "diffHunk": "@@ -45,6 +45,16 @@ class TR_PreXRecompile;\n class TR_RedefinedClassPicSite;\n class TR_UnloadedClassPicSite;\n \n+/**\n+ * @brief Enum to describe the result of a Class Chain Validation (CCV).\n+ */\n+enum CCVResult", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk1NzE3Nw=="}, "originalCommit": {"oid": "34fe2f57f167d0a9fcc07b033f966145d26bf6eb"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEzNzE0NQ==", "bodyText": "yeah looks like changing _ccvResult to CCVResult fixes the build issue.", "url": "https://github.com/eclipse-openj9/openj9/pull/10006#discussion_r451137145", "createdAt": "2020-07-07T20:54:29Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/runtime/RuntimeAssumptions.hpp", "diffHunk": "@@ -45,6 +45,16 @@ class TR_PreXRecompile;\n class TR_RedefinedClassPicSite;\n class TR_UnloadedClassPicSite;\n \n+/**\n+ * @brief Enum to describe the result of a Class Chain Validation (CCV).\n+ */\n+enum CCVResult", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk1NzE3Nw=="}, "originalCommit": {"oid": "34fe2f57f167d0a9fcc07b033f966145d26bf6eb"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEzNzMyNg==", "bodyText": "I will have to try on other platforms though before making the change here.", "url": "https://github.com/eclipse-openj9/openj9/pull/10006#discussion_r451137326", "createdAt": "2020-07-07T20:54:47Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/runtime/RuntimeAssumptions.hpp", "diffHunk": "@@ -45,6 +45,16 @@ class TR_PreXRecompile;\n class TR_RedefinedClassPicSite;\n class TR_UnloadedClassPicSite;\n \n+/**\n+ * @brief Enum to describe the result of a Class Chain Validation (CCV).\n+ */\n+enum CCVResult", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk1NzE3Nw=="}, "originalCommit": {"oid": "34fe2f57f167d0a9fcc07b033f966145d26bf6eb"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYxMjExOQ==", "bodyText": "Changes made.", "url": "https://github.com/eclipse-openj9/openj9/pull/10006#discussion_r451612119", "createdAt": "2020-07-08T14:59:17Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/runtime/RuntimeAssumptions.hpp", "diffHunk": "@@ -45,6 +45,16 @@ class TR_PreXRecompile;\n class TR_RedefinedClassPicSite;\n class TR_UnloadedClassPicSite;\n \n+/**\n+ * @brief Enum to describe the result of a Class Chain Validation (CCV).\n+ */\n+enum CCVResult", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk1NzE3Nw=="}, "originalCommit": {"oid": "34fe2f57f167d0a9fcc07b033f966145d26bf6eb"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMTU4ODUyOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/runtime/RuntimeAssumptions.hpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNTozODozOFrOGuEZyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNTozODozOFrOGuEZyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk1OTgxOA==", "bodyText": "const should stay after the name of the function to indicate that the function does not change the object it operates on.", "url": "https://github.com/eclipse-openj9/openj9/pull/10006#discussion_r450959818", "createdAt": "2020-07-07T15:38:38Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/runtime/RuntimeAssumptions.hpp", "diffHunk": "@@ -147,6 +160,9 @@ class TR_PersistentClassInfo : public TR_Link0<TR_PersistentClassInfo>\n    int32_t getNameLength()                       { return _nameLength; }\n    virtual void setNameLength(int32_t length)            { _nameLength = length; }\n \n+   void setCCVResult(CCVResult result) { _ccvResult = static_cast<uint8_t>(result); }\n+   const CCVResult getCCVResult() { return static_cast<CCVResult>(_ccvResult); }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34fe2f57f167d0a9fcc07b033f966145d26bf6eb"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4863, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}