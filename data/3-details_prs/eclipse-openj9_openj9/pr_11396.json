{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM0MTEzNDMw", "number": 11396, "title": "Add doc for relocation of inlined methods", "bodyText": "", "createdAt": "2020-12-08T04:37:12Z", "url": "https://github.com/eclipse-openj9/openj9/pull/11396", "merged": true, "mergeCommit": {"oid": "543d070e136e3e2b7ae91e8da8d0646693981a87"}, "closed": true, "closedAt": "2020-12-09T21:29:47Z", "author": {"login": "dsouzai"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdkCj9oABqjQwODI4MjA3NDE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdkQyMggFqTU0NzYzNTUzMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cfd20069f1cce44faae1cb279e4c0d1bcf3a8cab", "author": {"user": {"login": "dsouzai", "name": "Irwin D'Souza"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/cfd20069f1cce44faae1cb279e4c0d1bcf3a8cab", "committedDate": "2020-12-08T04:36:20Z", "message": "Add doc for relocation of inlined methods\n\n[ci-skip]\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>"}, "afterCommit": {"oid": "17e1e321461c675f186edc100e40548c4da06411", "author": {"user": {"login": "dsouzai", "name": "Irwin D'Souza"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/17e1e321461c675f186edc100e40548c4da06411", "committedDate": "2020-12-08T04:37:24Z", "message": "Add doc for relocation of inlined methods\n\n[ci skip]\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3NDg5Mjg5", "url": "https://github.com/eclipse-openj9/openj9/pull/11396#pullrequestreview-547489289", "createdAt": "2020-12-08T17:59:55Z", "commit": {"oid": "17e1e321461c675f186edc100e40548c4da06411"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNzo1OTo1NVrOIBttrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxODoxMjozMlrOIBufJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY2ODQ2Mw==", "bodyText": "\"This document will explain\" might sound better here.", "url": "https://github.com/eclipse-openj9/openj9/pull/11396#discussion_r538668463", "createdAt": "2020-12-08T17:59:55Z", "author": {"login": "fjeremic"}, "path": "doc/compiler/aot/InlinedMethods.md", "diffHunk": "@@ -0,0 +1,259 @@\n+<!--\n+Copyright (c) 2020, 2020 IBM Corp. and others\n+\n+This program and the accompanying materials are made available under\n+the terms of the Eclipse Public License 2.0 which accompanies this\n+distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+or the Apache License, Version 2.0 which accompanies this distribution and\n+is available at https://www.apache.org/licenses/LICENSE-2.0.\n+\n+This Source Code may also be made available under the following\n+Secondary Licenses when the conditions for such availability set\n+forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+General Public License, version 2 with the GNU Classpath\n+Exception [1] and GNU General Public License, version 2 with the\n+OpenJDK Assembly Exception [2].\n+\n+[1] https://www.gnu.org/software/classpath/license.html\n+[2] http://openjdk.java.net/legal/assembly-exception.html\n+\n+SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+-->\n+\n+# Overview\n+\n+AOT compilations support inlining of methods.\n+However, ensuring validation and relocation is a non-trivial process with\n+many subtleties. The relocation records related to the inlined methods are \n+different from the other records in that they do many things - they perform \n+validation, relocation of the inlined table entry in the J9JITExceptionTable\n+metadata structure, as well as relocation of guards. \n+\n+This document will go through how an inlined site is validated, as well what ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e1e321461c675f186edc100e40548c4da06411"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY2OTU3NQ==", "bodyText": "The link name should be the same as the actual article name, i.e. \"Intro to Ahead Of Time Compilation\". This helps search engines.", "url": "https://github.com/eclipse-openj9/openj9/pull/11396#discussion_r538669575", "createdAt": "2020-12-08T18:00:58Z", "author": {"login": "fjeremic"}, "path": "doc/compiler/aot/InlinedMethods.md", "diffHunk": "@@ -0,0 +1,259 @@\n+<!--\n+Copyright (c) 2020, 2020 IBM Corp. and others\n+\n+This program and the accompanying materials are made available under\n+the terms of the Eclipse Public License 2.0 which accompanies this\n+distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+or the Apache License, Version 2.0 which accompanies this distribution and\n+is available at https://www.apache.org/licenses/LICENSE-2.0.\n+\n+This Source Code may also be made available under the following\n+Secondary Licenses when the conditions for such availability set\n+forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+General Public License, version 2 with the GNU Classpath\n+Exception [1] and GNU General Public License, version 2 with the\n+OpenJDK Assembly Exception [2].\n+\n+[1] https://www.gnu.org/software/classpath/license.html\n+[2] http://openjdk.java.net/legal/assembly-exception.html\n+\n+SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+-->\n+\n+# Overview\n+\n+AOT compilations support inlining of methods.\n+However, ensuring validation and relocation is a non-trivial process with\n+many subtleties. The relocation records related to the inlined methods are \n+different from the other records in that they do many things - they perform \n+validation, relocation of the inlined table entry in the J9JITExceptionTable\n+metadata structure, as well as relocation of guards. \n+\n+This document will go through how an inlined site is validated, as well what \n+what all is necessary as part of the relocation. Note, inlined method \n+relocations still follow the high level process described by the\n+[Intro to AOT blog series](https://blog.openj9.org/2018/10/10/intro-to-ahead-of-time-compilation/),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e1e321461c675f186edc100e40548c4da06411"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY3MTg3Mg==", "bodyText": "I'd add some new lines here, at the very least around the ellipses, to emphasize different logical blocks of code.", "url": "https://github.com/eclipse-openj9/openj9/pull/11396#discussion_r538671872", "createdAt": "2020-12-08T18:03:12Z", "author": {"login": "fjeremic"}, "path": "doc/compiler/aot/InlinedMethods.md", "diffHunk": "@@ -0,0 +1,259 @@\n+<!--\n+Copyright (c) 2020, 2020 IBM Corp. and others\n+\n+This program and the accompanying materials are made available under\n+the terms of the Eclipse Public License 2.0 which accompanies this\n+distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+or the Apache License, Version 2.0 which accompanies this distribution and\n+is available at https://www.apache.org/licenses/LICENSE-2.0.\n+\n+This Source Code may also be made available under the following\n+Secondary Licenses when the conditions for such availability set\n+forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+General Public License, version 2 with the GNU Classpath\n+Exception [1] and GNU General Public License, version 2 with the\n+OpenJDK Assembly Exception [2].\n+\n+[1] https://www.gnu.org/software/classpath/license.html\n+[2] http://openjdk.java.net/legal/assembly-exception.html\n+\n+SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+-->\n+\n+# Overview\n+\n+AOT compilations support inlining of methods.\n+However, ensuring validation and relocation is a non-trivial process with\n+many subtleties. The relocation records related to the inlined methods are \n+different from the other records in that they do many things - they perform \n+validation, relocation of the inlined table entry in the J9JITExceptionTable\n+metadata structure, as well as relocation of guards. \n+\n+This document will go through how an inlined site is validated, as well what \n+what all is necessary as part of the relocation. Note, inlined method \n+relocations still follow the high level process described by the\n+[Intro to AOT blog series](https://blog.openj9.org/2018/10/10/intro-to-ahead-of-time-compilation/),\n+which this doc assumes the reader has already read.\n+\n+# Introduction\n+\n+There are four general kinds of inlined method relocations:\n+\n+* Inlined Methods\n+* Inlined Methods with NOP Guards\n+* Profiled Inlined Methods\n+* Profiled Inlined Methods with Guards\n+\n+All relocations are used to validate the inlined method. However, the\n+relocations for methods with guards are used to relocate the associated\n+inlined table entry in the metadata as well as the guards for the \n+inlined sites, whereas the rest are only used to relocate the associated\n+inlined table entry. Profiled Inlined Methods are methods that were \n+inlined that were not named by the caller. For example,\n+consider the following scenario:\n+\n+```\n+class base {\n+\tvoid foo();\n+}\n+class child_one extends base {\n+\tvoid foo();\n+}\n+child class_two extends base {\n+\tvoid foo();\n+}\n+...\n+\tvoid some_method(base b) {\n+\t\tb.foo();\n+\t}\n+```", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e1e321461c675f186edc100e40548c4da06411"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY3MzU2MA==", "bodyText": "I think this should be \"materializing\".", "url": "https://github.com/eclipse-openj9/openj9/pull/11396#discussion_r538673560", "createdAt": "2020-12-08T18:04:54Z", "author": {"login": "fjeremic"}, "path": "doc/compiler/aot/InlinedMethods.md", "diffHunk": "@@ -0,0 +1,259 @@\n+<!--\n+Copyright (c) 2020, 2020 IBM Corp. and others\n+\n+This program and the accompanying materials are made available under\n+the terms of the Eclipse Public License 2.0 which accompanies this\n+distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+or the Apache License, Version 2.0 which accompanies this distribution and\n+is available at https://www.apache.org/licenses/LICENSE-2.0.\n+\n+This Source Code may also be made available under the following\n+Secondary Licenses when the conditions for such availability set\n+forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+General Public License, version 2 with the GNU Classpath\n+Exception [1] and GNU General Public License, version 2 with the\n+OpenJDK Assembly Exception [2].\n+\n+[1] https://www.gnu.org/software/classpath/license.html\n+[2] http://openjdk.java.net/legal/assembly-exception.html\n+\n+SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+-->\n+\n+# Overview\n+\n+AOT compilations support inlining of methods.\n+However, ensuring validation and relocation is a non-trivial process with\n+many subtleties. The relocation records related to the inlined methods are \n+different from the other records in that they do many things - they perform \n+validation, relocation of the inlined table entry in the J9JITExceptionTable\n+metadata structure, as well as relocation of guards. \n+\n+This document will go through how an inlined site is validated, as well what \n+what all is necessary as part of the relocation. Note, inlined method \n+relocations still follow the high level process described by the\n+[Intro to AOT blog series](https://blog.openj9.org/2018/10/10/intro-to-ahead-of-time-compilation/),\n+which this doc assumes the reader has already read.\n+\n+# Introduction\n+\n+There are four general kinds of inlined method relocations:\n+\n+* Inlined Methods\n+* Inlined Methods with NOP Guards\n+* Profiled Inlined Methods\n+* Profiled Inlined Methods with Guards\n+\n+All relocations are used to validate the inlined method. However, the\n+relocations for methods with guards are used to relocate the associated\n+inlined table entry in the metadata as well as the guards for the \n+inlined sites, whereas the rest are only used to relocate the associated\n+inlined table entry. Profiled Inlined Methods are methods that were \n+inlined that were not named by the caller. For example,\n+consider the following scenario:\n+\n+```\n+class base {\n+\tvoid foo();\n+}\n+class child_one extends base {\n+\tvoid foo();\n+}\n+child class_two extends base {\n+\tvoid foo();\n+}\n+...\n+\tvoid some_method(base b) {\n+\t\tb.foo();\n+\t}\n+```\n+Because `b` is of type `base`, the `foo` that gets executed could either\n+be the implementation in `base` or `child_one` or `child_two`. If the\n+inliner decided to pick `base.foo()` because that is what was named in\n+`some_method`, then the relocation would be the Inlined Method variant.\n+However, if the inliner decided to inline `child_two.foo()` based on \n+profiling information, the relocation would be the Profiled Inlined\n+Method variant.\n+\n+# Generating Guards & External Relocations\n+\n+During an AOT compilation, i.e. when the code is first generated, external\n+relocation are generated at various points. Once all of these external \n+relocations are added to a list, the inlined method external relocations\n+are then added in reverse order; because entries are added to the\n+list at the front, an external relocation associated with the last inlined\n+site index is added first, followed by the second last, continuing to the\n+first. This ensures that the first inlined method external relocation in\n+the list is associated with the first inlined site.\n+\n+The reason for ensuring this is because validating/materialize values for", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e1e321461c675f186edc100e40548c4da06411"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY3Mzk3MQ==", "bodyText": "\"calls\" shouldn't be in code format.", "url": "https://github.com/eclipse-openj9/openj9/pull/11396#discussion_r538673971", "createdAt": "2020-12-08T18:05:23Z", "author": {"login": "fjeremic"}, "path": "doc/compiler/aot/InlinedMethods.md", "diffHunk": "@@ -0,0 +1,259 @@\n+<!--\n+Copyright (c) 2020, 2020 IBM Corp. and others\n+\n+This program and the accompanying materials are made available under\n+the terms of the Eclipse Public License 2.0 which accompanies this\n+distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+or the Apache License, Version 2.0 which accompanies this distribution and\n+is available at https://www.apache.org/licenses/LICENSE-2.0.\n+\n+This Source Code may also be made available under the following\n+Secondary Licenses when the conditions for such availability set\n+forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+General Public License, version 2 with the GNU Classpath\n+Exception [1] and GNU General Public License, version 2 with the\n+OpenJDK Assembly Exception [2].\n+\n+[1] https://www.gnu.org/software/classpath/license.html\n+[2] http://openjdk.java.net/legal/assembly-exception.html\n+\n+SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+-->\n+\n+# Overview\n+\n+AOT compilations support inlining of methods.\n+However, ensuring validation and relocation is a non-trivial process with\n+many subtleties. The relocation records related to the inlined methods are \n+different from the other records in that they do many things - they perform \n+validation, relocation of the inlined table entry in the J9JITExceptionTable\n+metadata structure, as well as relocation of guards. \n+\n+This document will go through how an inlined site is validated, as well what \n+what all is necessary as part of the relocation. Note, inlined method \n+relocations still follow the high level process described by the\n+[Intro to AOT blog series](https://blog.openj9.org/2018/10/10/intro-to-ahead-of-time-compilation/),\n+which this doc assumes the reader has already read.\n+\n+# Introduction\n+\n+There are four general kinds of inlined method relocations:\n+\n+* Inlined Methods\n+* Inlined Methods with NOP Guards\n+* Profiled Inlined Methods\n+* Profiled Inlined Methods with Guards\n+\n+All relocations are used to validate the inlined method. However, the\n+relocations for methods with guards are used to relocate the associated\n+inlined table entry in the metadata as well as the guards for the \n+inlined sites, whereas the rest are only used to relocate the associated\n+inlined table entry. Profiled Inlined Methods are methods that were \n+inlined that were not named by the caller. For example,\n+consider the following scenario:\n+\n+```\n+class base {\n+\tvoid foo();\n+}\n+class child_one extends base {\n+\tvoid foo();\n+}\n+child class_two extends base {\n+\tvoid foo();\n+}\n+...\n+\tvoid some_method(base b) {\n+\t\tb.foo();\n+\t}\n+```\n+Because `b` is of type `base`, the `foo` that gets executed could either\n+be the implementation in `base` or `child_one` or `child_two`. If the\n+inliner decided to pick `base.foo()` because that is what was named in\n+`some_method`, then the relocation would be the Inlined Method variant.\n+However, if the inliner decided to inline `child_two.foo()` based on \n+profiling information, the relocation would be the Profiled Inlined\n+Method variant.\n+\n+# Generating Guards & External Relocations\n+\n+During an AOT compilation, i.e. when the code is first generated, external\n+relocation are generated at various points. Once all of these external \n+relocations are added to a list, the inlined method external relocations\n+are then added in reverse order; because entries are added to the\n+list at the front, an external relocation associated with the last inlined\n+site index is added first, followed by the second last, continuing to the\n+first. This ensures that the first inlined method external relocation in\n+the list is associated with the first inlined site.\n+\n+The reason for ensuring this is because validating/materialize values for\n+subsequent inlined methods may depend on the previous entry. For example,\n+if `foo() calls bar() calls baz()`, and `bar` and `baz` are inlined (first", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e1e321461c675f186edc100e40548c4da06411"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY3ODM5Nw==", "bodyText": "I think we should put the footnote at the end of the section so the reader doesn't have to navigate to the end of the document for it. Think of where footnotes are placed in a book. Typically they are at the bottom of the current page. We don't have \"pages\" here per say, so sections is the next best thing.\nAlso I think you should be able to do:\n1 This is a problem that will be fixed soonTM as features like OSR, NextGenHCR, and FSD cannot otherwise be supported for AOT.\nMoreover though I would like to see this footnote backed by an issue, otherwise it will never get fixed. The issue should also backpoint to this article to remove the footnote once it is actually fixed so we don't forget to update the documentation. (or is fixing this a true pipedream?)", "url": "https://github.com/eclipse-openj9/openj9/pull/11396#discussion_r538678397", "createdAt": "2020-12-08T18:09:48Z", "author": {"login": "fjeremic"}, "path": "doc/compiler/aot/InlinedMethods.md", "diffHunk": "@@ -0,0 +1,259 @@\n+<!--\n+Copyright (c) 2020, 2020 IBM Corp. and others\n+\n+This program and the accompanying materials are made available under\n+the terms of the Eclipse Public License 2.0 which accompanies this\n+distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+or the Apache License, Version 2.0 which accompanies this distribution and\n+is available at https://www.apache.org/licenses/LICENSE-2.0.\n+\n+This Source Code may also be made available under the following\n+Secondary Licenses when the conditions for such availability set\n+forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+General Public License, version 2 with the GNU Classpath\n+Exception [1] and GNU General Public License, version 2 with the\n+OpenJDK Assembly Exception [2].\n+\n+[1] https://www.gnu.org/software/classpath/license.html\n+[2] http://openjdk.java.net/legal/assembly-exception.html\n+\n+SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+-->\n+\n+# Overview\n+\n+AOT compilations support inlining of methods.\n+However, ensuring validation and relocation is a non-trivial process with\n+many subtleties. The relocation records related to the inlined methods are \n+different from the other records in that they do many things - they perform \n+validation, relocation of the inlined table entry in the J9JITExceptionTable\n+metadata structure, as well as relocation of guards. \n+\n+This document will go through how an inlined site is validated, as well what \n+what all is necessary as part of the relocation. Note, inlined method \n+relocations still follow the high level process described by the\n+[Intro to AOT blog series](https://blog.openj9.org/2018/10/10/intro-to-ahead-of-time-compilation/),\n+which this doc assumes the reader has already read.\n+\n+# Introduction\n+\n+There are four general kinds of inlined method relocations:\n+\n+* Inlined Methods\n+* Inlined Methods with NOP Guards\n+* Profiled Inlined Methods\n+* Profiled Inlined Methods with Guards\n+\n+All relocations are used to validate the inlined method. However, the\n+relocations for methods with guards are used to relocate the associated\n+inlined table entry in the metadata as well as the guards for the \n+inlined sites, whereas the rest are only used to relocate the associated\n+inlined table entry. Profiled Inlined Methods are methods that were \n+inlined that were not named by the caller. For example,\n+consider the following scenario:\n+\n+```\n+class base {\n+\tvoid foo();\n+}\n+class child_one extends base {\n+\tvoid foo();\n+}\n+child class_two extends base {\n+\tvoid foo();\n+}\n+...\n+\tvoid some_method(base b) {\n+\t\tb.foo();\n+\t}\n+```\n+Because `b` is of type `base`, the `foo` that gets executed could either\n+be the implementation in `base` or `child_one` or `child_two`. If the\n+inliner decided to pick `base.foo()` because that is what was named in\n+`some_method`, then the relocation would be the Inlined Method variant.\n+However, if the inliner decided to inline `child_two.foo()` based on \n+profiling information, the relocation would be the Profiled Inlined\n+Method variant.\n+\n+# Generating Guards & External Relocations\n+\n+During an AOT compilation, i.e. when the code is first generated, external\n+relocation are generated at various points. Once all of these external \n+relocations are added to a list, the inlined method external relocations\n+are then added in reverse order; because entries are added to the\n+list at the front, an external relocation associated with the last inlined\n+site index is added first, followed by the second last, continuing to the\n+first. This ensures that the first inlined method external relocation in\n+the list is associated with the first inlined site.\n+\n+The reason for ensuring this is because validating/materialize values for\n+subsequent inlined methods may depend on the previous entry. For example,\n+if `foo() calls bar() calls baz()`, and `bar` and `baz` are inlined (first\n+`bar` would be inlined, then `baz`), `baz` is named in `bar`'s constant\n+pool, and `bar` is named in `foo`'s constant pool. Therefore, in order to\n+materialize the `J9Method` of `baz`, one first needs the `J9Method` of `bar`,\n+which first requires the `J9Method` of `foo`.\n+\n+Generating external relocations for inlined methods requires the \n+existence of Guards. Guards are used to gate execution of regions of \n+code. When a method is inlined, a guard is generated for that inlined \n+method. It is possible for a guard to be removed for various reasons. \n+Currently, an inlined method cannot be validated/relocated without an \n+associated guard<sup>1</sup>. As such, if a guard is removed, it is ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e1e321461c675f186edc100e40548c4da06411"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY4MTEyNw==", "bodyText": "Side note we should think about renaming _failValidation to validationResult if both success and failure can be recorded.", "url": "https://github.com/eclipse-openj9/openj9/pull/11396#discussion_r538681127", "createdAt": "2020-12-08T18:12:32Z", "author": {"login": "fjeremic"}, "path": "doc/compiler/aot/InlinedMethods.md", "diffHunk": "@@ -0,0 +1,259 @@\n+<!--\n+Copyright (c) 2020, 2020 IBM Corp. and others\n+\n+This program and the accompanying materials are made available under\n+the terms of the Eclipse Public License 2.0 which accompanies this\n+distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+or the Apache License, Version 2.0 which accompanies this distribution and\n+is available at https://www.apache.org/licenses/LICENSE-2.0.\n+\n+This Source Code may also be made available under the following\n+Secondary Licenses when the conditions for such availability set\n+forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+General Public License, version 2 with the GNU Classpath\n+Exception [1] and GNU General Public License, version 2 with the\n+OpenJDK Assembly Exception [2].\n+\n+[1] https://www.gnu.org/software/classpath/license.html\n+[2] http://openjdk.java.net/legal/assembly-exception.html\n+\n+SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+-->\n+\n+# Overview\n+\n+AOT compilations support inlining of methods.\n+However, ensuring validation and relocation is a non-trivial process with\n+many subtleties. The relocation records related to the inlined methods are \n+different from the other records in that they do many things - they perform \n+validation, relocation of the inlined table entry in the J9JITExceptionTable\n+metadata structure, as well as relocation of guards. \n+\n+This document will go through how an inlined site is validated, as well what \n+what all is necessary as part of the relocation. Note, inlined method \n+relocations still follow the high level process described by the\n+[Intro to AOT blog series](https://blog.openj9.org/2018/10/10/intro-to-ahead-of-time-compilation/),\n+which this doc assumes the reader has already read.\n+\n+# Introduction\n+\n+There are four general kinds of inlined method relocations:\n+\n+* Inlined Methods\n+* Inlined Methods with NOP Guards\n+* Profiled Inlined Methods\n+* Profiled Inlined Methods with Guards\n+\n+All relocations are used to validate the inlined method. However, the\n+relocations for methods with guards are used to relocate the associated\n+inlined table entry in the metadata as well as the guards for the \n+inlined sites, whereas the rest are only used to relocate the associated\n+inlined table entry. Profiled Inlined Methods are methods that were \n+inlined that were not named by the caller. For example,\n+consider the following scenario:\n+\n+```\n+class base {\n+\tvoid foo();\n+}\n+class child_one extends base {\n+\tvoid foo();\n+}\n+child class_two extends base {\n+\tvoid foo();\n+}\n+...\n+\tvoid some_method(base b) {\n+\t\tb.foo();\n+\t}\n+```\n+Because `b` is of type `base`, the `foo` that gets executed could either\n+be the implementation in `base` or `child_one` or `child_two`. If the\n+inliner decided to pick `base.foo()` because that is what was named in\n+`some_method`, then the relocation would be the Inlined Method variant.\n+However, if the inliner decided to inline `child_two.foo()` based on \n+profiling information, the relocation would be the Profiled Inlined\n+Method variant.\n+\n+# Generating Guards & External Relocations\n+\n+During an AOT compilation, i.e. when the code is first generated, external\n+relocation are generated at various points. Once all of these external \n+relocations are added to a list, the inlined method external relocations\n+are then added in reverse order; because entries are added to the\n+list at the front, an external relocation associated with the last inlined\n+site index is added first, followed by the second last, continuing to the\n+first. This ensures that the first inlined method external relocation in\n+the list is associated with the first inlined site.\n+\n+The reason for ensuring this is because validating/materialize values for\n+subsequent inlined methods may depend on the previous entry. For example,\n+if `foo() calls bar() calls baz()`, and `bar` and `baz` are inlined (first\n+`bar` would be inlined, then `baz`), `baz` is named in `bar`'s constant\n+pool, and `bar` is named in `foo`'s constant pool. Therefore, in order to\n+materialize the `J9Method` of `baz`, one first needs the `J9Method` of `bar`,\n+which first requires the `J9Method` of `foo`.\n+\n+Generating external relocations for inlined methods requires the \n+existence of Guards. Guards are used to gate execution of regions of \n+code. When a method is inlined, a guard is generated for that inlined \n+method. It is possible for a guard to be removed for various reasons. \n+Currently, an inlined method cannot be validated/relocated without an \n+associated guard<sup>1</sup>. As such, if a guard is removed, it is \n+still kept aside so that the information it holds can be used \n+to create an external relocation. If a guard is removed, the Inlined Method \n+/ Profiled Inlined Method relocations are generated; if the guard remains, \n+the Inlined Method with NOP Guard / Profiled Inlined Method with Guard \n+relocations are generated.\n+\n+Unless the [SVM](https://github.com/eclipse/openj9/blob/master/doc/compiler/aot/SymbolValidationManager.md)\n+is enabled, the inlined method external relocations are the\n+last entries added to the list; if the SVM is enabled, the SVM validation\n+records are added next - part of the validation that would've been done by\n+the inlined method validation procedure is delegated to the SVM.\n+\n+# Validating Inlined Sites \n+\n+The way an inlined method is validated depends on whether it was\n+profiled or not.\n+\n+## Inlined Methods with or without NOP Guards\n+\n+The process starts in `TR_RelocationRecordInlinedMethod::preparePrivateData`.\n+First `TR_RelocationRecordInlinedMethod::inlinedSiteValid` is called, which\n+\n+1. Gets the J9Method of the caller. For the very first inlined site, this will be the method being compiled; for the rest it will be from one of the previously validated/relocated inlined sites.\n+2. Checks if the method has been unloaded.\n+3. Materializes the J9Method of the inlined method:\n+    * If the SVM is enabled the method ID in the relocation record is used.\n+    * If the SVM is disabled, `getMethodFromCP` is called which is a virtual method that has different implementations depending on the kind of inlined method (special, static, virtual, interface).\n+4. Checks if the inlined site can be activated because of debug or other JVM restrictions.\n+5. Checks if J9ROMClass of the J9Method from step 3 matches the J9ROMClass in the SCC based on the offset stored in the relocation record.\n+\n+If everything succeeds, `inlinedSiteValid` returns true. The success or\n+failure is cached in `reloPrivateData->_failValidation`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e1e321461c675f186edc100e40548c4da06411"}, "originalPosition": 134}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "17e1e321461c675f186edc100e40548c4da06411", "author": {"user": {"login": "dsouzai", "name": "Irwin D'Souza"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/17e1e321461c675f186edc100e40548c4da06411", "committedDate": "2020-12-08T04:37:24Z", "message": "Add doc for relocation of inlined methods\n\n[ci skip]\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>"}, "afterCommit": {"oid": "c823ae9aa2336bc1e614fb7887b193a68f7790be", "author": {"user": {"login": "dsouzai", "name": "Irwin D'Souza"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/c823ae9aa2336bc1e614fb7887b193a68f7790be", "committedDate": "2020-12-08T18:31:28Z", "message": "Add doc for relocation of inlined methods\n\n[ci skip]\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c823ae9aa2336bc1e614fb7887b193a68f7790be", "author": {"user": {"login": "dsouzai", "name": "Irwin D'Souza"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/c823ae9aa2336bc1e614fb7887b193a68f7790be", "committedDate": "2020-12-08T18:31:28Z", "message": "Add doc for relocation of inlined methods\n\n[ci skip]\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>"}, "afterCommit": {"oid": "358163ff6c6e5da3ba1847924056bc0cf618db2d", "author": {"user": {"login": "dsouzai", "name": "Irwin D'Souza"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/358163ff6c6e5da3ba1847924056bc0cf618db2d", "committedDate": "2020-12-08T18:32:57Z", "message": "Add doc for relocation of inlined methods\n\n[ci skip]\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8aa7b8d2d7ea4ba3150c6c1367b4506898f301ab", "author": {"user": {"login": "dsouzai", "name": "Irwin D'Souza"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/8aa7b8d2d7ea4ba3150c6c1367b4506898f301ab", "committedDate": "2020-12-08T18:37:29Z", "message": "Add doc for relocation of inlined methods\n\n[ci skip]\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "358163ff6c6e5da3ba1847924056bc0cf618db2d", "author": {"user": {"login": "dsouzai", "name": "Irwin D'Souza"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/358163ff6c6e5da3ba1847924056bc0cf618db2d", "committedDate": "2020-12-08T18:32:57Z", "message": "Add doc for relocation of inlined methods\n\n[ci skip]\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>"}, "afterCommit": {"oid": "8aa7b8d2d7ea4ba3150c6c1367b4506898f301ab", "author": {"user": {"login": "dsouzai", "name": "Irwin D'Souza"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/8aa7b8d2d7ea4ba3150c6c1367b4506898f301ab", "committedDate": "2020-12-08T18:37:29Z", "message": "Add doc for relocation of inlined methods\n\n[ci skip]\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3NjM1NTMx", "url": "https://github.com/eclipse-openj9/openj9/pull/11396#pullrequestreview-547635531", "createdAt": "2020-12-08T21:11:49Z", "commit": {"oid": "8aa7b8d2d7ea4ba3150c6c1367b4506898f301ab"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1470, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}