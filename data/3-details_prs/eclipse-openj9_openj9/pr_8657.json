{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5NzU3MjI1", "number": 8657, "title": "Update the Lookup specific code against the JDK14 Spec", "bodyText": "The change is to update the code related to MH.Lookup\nto deal with the change of the full privilege access\nand the new concept called \"previous lookup class\" introduced\nin JDK14.\nFixes: #8570, Fixes: #8571\nSigned-off-by: Cheng Jin jincheng@ca.ibm.com", "createdAt": "2020-02-25T19:25:04Z", "url": "https://github.com/eclipse-openj9/openj9/pull/8657", "merged": true, "mergeCommit": {"oid": "66c281ae673679407ed36d1c81a7677e18800923"}, "closed": true, "closedAt": "2020-03-06T18:02:19Z", "author": {"login": "ChengJin01"}, "timelineItems": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcH3eiQgBqjMwNzA3MzkxMTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcLC8-yAFqTM3MDQ2NzYyMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f67ffd1bbdcb7772f17a5a4bccc344b77af29c1a", "author": {"user": {"login": "ChengJin01", "name": "Cheng Jin"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/f67ffd1bbdcb7772f17a5a4bccc344b77af29c1a", "committedDate": "2020-02-25T19:22:53Z", "message": "Update the Lookup specific code against the JKD14 Spec\n\nThe change is to update the code related to MH.Lookup\nto deal with the change of the full privilege access\nand the new concept called previous lookup class introduced\nin JDK14.\n\nFixes: #8571\n\nSigned-off-by: Cheng Jin <jincheng@ca.ibm.com>"}, "afterCommit": {"oid": "3b68d099961a5b27d3209e711c6ec595f46868b5", "author": {"user": {"login": "ChengJin01", "name": "Cheng Jin"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/3b68d099961a5b27d3209e711c6ec595f46868b5", "committedDate": "2020-02-25T19:41:19Z", "message": "Update the Lookup specific code against the JDK14 Spec\n\nThe change is to update the code related to MH.Lookup\nto deal with the change of the full privilege access\nand the new concept called previous lookup class introduced\nin JDK14.\n\nFixes: #8571\n\nSigned-off-by: Cheng Jin <jincheng@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3b68d099961a5b27d3209e711c6ec595f46868b5", "author": {"user": {"login": "ChengJin01", "name": "Cheng Jin"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/3b68d099961a5b27d3209e711c6ec595f46868b5", "committedDate": "2020-02-25T19:41:19Z", "message": "Update the Lookup specific code against the JDK14 Spec\n\nThe change is to update the code related to MH.Lookup\nto deal with the change of the full privilege access\nand the new concept called previous lookup class introduced\nin JDK14.\n\nFixes: #8571\n\nSigned-off-by: Cheng Jin <jincheng@ca.ibm.com>"}, "afterCommit": {"oid": "276e2b4557b746f86a4ede7c23e0b543f5acaee7", "author": {"user": {"login": "ChengJin01", "name": "Cheng Jin"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/276e2b4557b746f86a4ede7c23e0b543f5acaee7", "committedDate": "2020-02-26T00:05:29Z", "message": "Update the Lookup specific code against the JDK14 Spec\n\nThe change is to update the code related to MH.Lookup\nto deal with the change of the full privilege access\nand the new concept called previous lookup class introduced\nin JDK14.\n\nFixes: #8571\n\nSigned-off-by: Cheng Jin <jincheng@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "276e2b4557b746f86a4ede7c23e0b543f5acaee7", "author": {"user": {"login": "ChengJin01", "name": "Cheng Jin"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/276e2b4557b746f86a4ede7c23e0b543f5acaee7", "committedDate": "2020-02-26T00:05:29Z", "message": "Update the Lookup specific code against the JDK14 Spec\n\nThe change is to update the code related to MH.Lookup\nto deal with the change of the full privilege access\nand the new concept called previous lookup class introduced\nin JDK14.\n\nFixes: #8571\n\nSigned-off-by: Cheng Jin <jincheng@ca.ibm.com>"}, "afterCommit": {"oid": "0a5357a283db7f2a2ad3ff949ff477b30f1697e9", "author": {"user": {"login": "ChengJin01", "name": "Cheng Jin"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/0a5357a283db7f2a2ad3ff949ff477b30f1697e9", "committedDate": "2020-02-26T05:31:28Z", "message": "Update the Lookup specific code against the JDK14 Spec\n\nThe change is to update the code related to MH.Lookup\nto deal with the change of the full privilege access\nand the new concept called previous lookup class introduced\nin JDK14.\n\nFixes: #8571\n\nSigned-off-by: Cheng Jin <jincheng@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0a5357a283db7f2a2ad3ff949ff477b30f1697e9", "author": {"user": {"login": "ChengJin01", "name": "Cheng Jin"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/0a5357a283db7f2a2ad3ff949ff477b30f1697e9", "committedDate": "2020-02-26T05:31:28Z", "message": "Update the Lookup specific code against the JDK14 Spec\n\nThe change is to update the code related to MH.Lookup\nto deal with the change of the full privilege access\nand the new concept called previous lookup class introduced\nin JDK14.\n\nFixes: #8571\n\nSigned-off-by: Cheng Jin <jincheng@ca.ibm.com>"}, "afterCommit": {"oid": "0fe4d0e8689ef14fd65029c44ecf84272b0f9c5c", "author": {"user": {"login": "ChengJin01", "name": "Cheng Jin"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/0fe4d0e8689ef14fd65029c44ecf84272b0f9c5c", "committedDate": "2020-02-27T16:18:33Z", "message": "Update the Lookup specific code against the JDK14 Spec\n\nThe change is to update the code related to MH.Lookup\nto deal with the change of the full privilege access\nand the new concept called previous lookup class introduced\nin JDK14.\n\nFixes: #8571\n\nSigned-off-by: Cheng Jin <jincheng@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0NjA5MTUz", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#pullrequestreview-364609153", "createdAt": "2020-02-26T03:55:52Z", "commit": {"oid": "276e2b4557b746f86a4ede7c23e0b543f5acaee7"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwMzo1NTo1M1rOFudi1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNTozMDo0OVrOFvV-ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI2Mjg2OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\tif ( lookupClass.getName().startsWith(\"java.lang.invoke.\")) {  //$NON-NLS-1$\n          \n          \n            \n            \t\t\t\tif (lookupClass.getName().startsWith(\"java.lang.invoke.\")) {  //$NON-NLS-1$", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#discussion_r384262868", "createdAt": "2020-02-26T03:55:53Z", "author": {"login": "DanHeidinga"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -180,10 +184,41 @@\n \t\tstatic Lookup IMPL_LOOKUP = internalPrivilegedLookup; /* hack for b56 of lambda-dev */\n \t\t\n \t\t/* Access token used in lookups - Object for public lookup */\n+\t\t/*[IF Java14]*/\n+\t\tfinal Class<?> prevAccessClass;\n+\t\t/*[ENDIF] Java14*/\n \t\tfinal Class<?> accessClass;\n \t\tfinal int accessMode;\n \t\tprivate final  boolean performSecurityCheck;\n \t\t\n+\t\t/*[IF Java14]*/\n+\t\tLookup(Class<?> lookupClass, Class<?> prevLookupClass, int lookupMode, boolean doCheck) {\n+\t\t\tthis.performSecurityCheck = doCheck;\n+\t\t\tif (doCheck && (INTERNAL_PRIVILEGED != lookupMode)) {\n+\t\t\t\tif ( lookupClass.getName().startsWith(\"java.lang.invoke.\")) {  //$NON-NLS-1$", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "276e2b4557b746f86a4ede7c23e0b543f5acaee7"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI2NDg1Mg==", "bodyText": "@JasonFengJ9 Any thoughts on whether there's a cleaner way to do the jcl preprocessor tags here with less duplication?", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#discussion_r384264852", "createdAt": "2020-02-26T04:06:19Z", "author": {"login": "DanHeidinga"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -170,7 +170,11 @@\n \t\t\n \t\t/* single cached value of public Lookup object */\n \t\t/*[IF Sidecar19-SE-OpenJ9]\n+\t\t/*[IF Java14]*/\n+\t\tstatic Lookup PUBLIC_LOOKUP = new Lookup(Object.class, Lookup.UNCONDITIONAL);\n+\t\t/*[ELSE]*/\n \t\tstatic Lookup PUBLIC_LOOKUP = new Lookup(Object.class, Lookup.PUBLIC | Lookup.UNCONDITIONAL);\n+\t\t/*[ENDIF] Java14 */\n \t\t/*[ELSE]*/\n \t\tstatic Lookup PUBLIC_LOOKUP = new Lookup(Object.class, Lookup.PUBLIC);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "276e2b4557b746f86a4ede7c23e0b543f5acaee7"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI2NTE3Mw==", "bodyText": "Why doesn't this forward to the new ctor:\n\t\tLookup(Class<?> lookupClass, Class<?> prevLookupClass, int lookupMode, boolean doCheck) {\n?", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#discussion_r384265173", "createdAt": "2020-02-26T04:08:01Z", "author": {"login": "DanHeidinga"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -180,10 +184,41 @@\n \t\tstatic Lookup IMPL_LOOKUP = internalPrivilegedLookup; /* hack for b56 of lambda-dev */\n \t\t\n \t\t/* Access token used in lookups - Object for public lookup */\n+\t\t/*[IF Java14]*/\n+\t\tfinal Class<?> prevAccessClass;\n+\t\t/*[ENDIF] Java14*/\n \t\tfinal Class<?> accessClass;\n \t\tfinal int accessMode;\n \t\tprivate final  boolean performSecurityCheck;\n \t\t\n+\t\t/*[IF Java14]*/\n+\t\tLookup(Class<?> lookupClass, Class<?> prevLookupClass, int lookupMode, boolean doCheck) {\n+\t\t\tthis.performSecurityCheck = doCheck;\n+\t\t\tif (doCheck && (INTERNAL_PRIVILEGED != lookupMode)) {\n+\t\t\t\tif ( lookupClass.getName().startsWith(\"java.lang.invoke.\")) {  //$NON-NLS-1$\n+\t\t\t\t\t/*[MSG \"K0588\", \"Illegal Lookup object - originated from java.lang.invoke: {0}\"]*/\n+\t\t\t\t\tthrow new IllegalArgumentException(com.ibm.oti.util.Msg.getString(\"K0588\", lookupClass.getName())); //$NON-NLS-1$\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\taccessClass = lookupClass;\n+\t\t\tprevAccessClass = prevLookupClass;\n+\t\t\taccessMode = lookupMode;\n+\t\t}\n+\t\t\n+\t\tLookup(Class<?> lookupClass, Class<?> prevLookupClass, int lookupMode) {\n+\t\t\tthis(lookupClass, prevLookupClass, lookupMode, true);\n+\t\t}\n+\t\t\n+\t\tLookup(Class<?> lookupClass, Class<?> prevLookupClass) {\n+\t\t\tthis(lookupClass, prevLookupClass, FULL_ACCESS_MASK, true);\n+\t\t}\n+\t\t\n+\t\tLookup(Class<?> lookupClass, Class<?> prevLookupClass, boolean performSecurityCheck) {\n+\t\t\t this(lookupClass, prevLookupClass, FULL_ACCESS_MASK, performSecurityCheck);\n+\t\t}\n+\t\t/*[ENDIF] Java14*/\n+\t\t\n \t\tLookup(Class<?> lookupClass, int lookupMode, boolean doCheck) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "276e2b4557b746f86a4ede7c23e0b543f5acaee7"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI2NTQ1Mg==", "bodyText": "Are all the new forms of these ctors used?  Let's only add the ones we actually need", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#discussion_r384265452", "createdAt": "2020-02-26T04:09:25Z", "author": {"login": "DanHeidinga"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -180,10 +184,41 @@\n \t\tstatic Lookup IMPL_LOOKUP = internalPrivilegedLookup; /* hack for b56 of lambda-dev */\n \t\t\n \t\t/* Access token used in lookups - Object for public lookup */\n+\t\t/*[IF Java14]*/\n+\t\tfinal Class<?> prevAccessClass;\n+\t\t/*[ENDIF] Java14*/\n \t\tfinal Class<?> accessClass;\n \t\tfinal int accessMode;\n \t\tprivate final  boolean performSecurityCheck;\n \t\t\n+\t\t/*[IF Java14]*/\n+\t\tLookup(Class<?> lookupClass, Class<?> prevLookupClass, int lookupMode, boolean doCheck) {\n+\t\t\tthis.performSecurityCheck = doCheck;\n+\t\t\tif (doCheck && (INTERNAL_PRIVILEGED != lookupMode)) {\n+\t\t\t\tif ( lookupClass.getName().startsWith(\"java.lang.invoke.\")) {  //$NON-NLS-1$\n+\t\t\t\t\t/*[MSG \"K0588\", \"Illegal Lookup object - originated from java.lang.invoke: {0}\"]*/\n+\t\t\t\t\tthrow new IllegalArgumentException(com.ibm.oti.util.Msg.getString(\"K0588\", lookupClass.getName())); //$NON-NLS-1$\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\taccessClass = lookupClass;\n+\t\t\tprevAccessClass = prevLookupClass;\n+\t\t\taccessMode = lookupMode;\n+\t\t}\n+\t\t\n+\t\tLookup(Class<?> lookupClass, Class<?> prevLookupClass, int lookupMode) {\n+\t\t\tthis(lookupClass, prevLookupClass, lookupMode, true);\n+\t\t}\n+\t\t\n+\t\tLookup(Class<?> lookupClass, Class<?> prevLookupClass) {\n+\t\t\tthis(lookupClass, prevLookupClass, FULL_ACCESS_MASK, true);\n+\t\t}\n+\t\t\n+\t\tLookup(Class<?> lookupClass, Class<?> prevLookupClass, boolean performSecurityCheck) {\n+\t\t\t this(lookupClass, prevLookupClass, FULL_ACCESS_MASK, performSecurityCheck);\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "276e2b4557b746f86a4ede7c23e0b543f5acaee7"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE4NzQ4Ng==", "bodyText": "Suggested change", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#discussion_r385187486", "createdAt": "2020-02-27T15:30:49Z", "author": {"login": "DanHeidinga"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -558,7 +632,7 @@ private void checkClassAccess(Class<?> targetClass) throws IllegalAccessExceptio\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n-\n+\t\t\t", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a5357a283db7f2a2ad3ff949ff477b30f1697e9"}, "originalPosition": 171}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0fe4d0e8689ef14fd65029c44ecf84272b0f9c5c", "author": {"user": {"login": "ChengJin01", "name": "Cheng Jin"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/0fe4d0e8689ef14fd65029c44ecf84272b0f9c5c", "committedDate": "2020-02-27T16:18:33Z", "message": "Update the Lookup specific code against the JDK14 Spec\n\nThe change is to update the code related to MH.Lookup\nto deal with the change of the full privilege access\nand the new concept called previous lookup class introduced\nin JDK14.\n\nFixes: #8571\n\nSigned-off-by: Cheng Jin <jincheng@ca.ibm.com>"}, "afterCommit": {"oid": "7c16326a5fd04126c45b251a1e701c95d7c6539a", "author": {"user": {"login": "ChengJin01", "name": "Cheng Jin"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/7c16326a5fd04126c45b251a1e701c95d7c6539a", "committedDate": "2020-02-28T02:07:06Z", "message": "Update the Lookup specific code against the JDK14 Spec\n\nThe change is to update the code related to MH.Lookup\nto deal with the change of the full privilege access\nand the new concept called previous lookup class introduced\nin JDK14.\n\nFixes: #8571\n\nSigned-off-by: Cheng Jin <jincheng@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7c16326a5fd04126c45b251a1e701c95d7c6539a", "author": {"user": {"login": "ChengJin01", "name": "Cheng Jin"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/7c16326a5fd04126c45b251a1e701c95d7c6539a", "committedDate": "2020-02-28T02:07:06Z", "message": "Update the Lookup specific code against the JDK14 Spec\n\nThe change is to update the code related to MH.Lookup\nto deal with the change of the full privilege access\nand the new concept called previous lookup class introduced\nin JDK14.\n\nFixes: #8571\n\nSigned-off-by: Cheng Jin <jincheng@ca.ibm.com>"}, "afterCommit": {"oid": "b41926919e013e94d5342a580cd7df49ada6e69b", "author": {"user": {"login": "ChengJin01", "name": "Cheng Jin"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/b41926919e013e94d5342a580cd7df49ada6e69b", "committedDate": "2020-02-28T19:31:08Z", "message": "Update the Lookup specific code against the JDK14 Spec\n\nThe change is to update the code related to MH.Lookup\nto deal with the change of the full privilege access\nand the new concept called previous lookup class introduced\nin JDK14.\n\nFixes: #8571\n\nSigned-off-by: Cheng Jin <jincheng@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b41926919e013e94d5342a580cd7df49ada6e69b", "author": {"user": {"login": "ChengJin01", "name": "Cheng Jin"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/b41926919e013e94d5342a580cd7df49ada6e69b", "committedDate": "2020-02-28T19:31:08Z", "message": "Update the Lookup specific code against the JDK14 Spec\n\nThe change is to update the code related to MH.Lookup\nto deal with the change of the full privilege access\nand the new concept called previous lookup class introduced\nin JDK14.\n\nFixes: #8571\n\nSigned-off-by: Cheng Jin <jincheng@ca.ibm.com>"}, "afterCommit": {"oid": "893f1f7dda2a247400c13511aefc4df92fba6253", "author": {"user": {"login": "ChengJin01", "name": "Cheng Jin"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/893f1f7dda2a247400c13511aefc4df92fba6253", "committedDate": "2020-02-28T20:36:51Z", "message": "Update the Lookup specific code against the JDK14 Spec\n\nThe change is to update the code related to MH.Lookup\nto deal with the change of the full privilege access\nand the new concept called previous lookup class introduced\nin JDK14.\n\nFixes: #8571\n\nSigned-off-by: Cheng Jin <jincheng@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3NTA4NDM3", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#pullrequestreview-367508437", "createdAt": "2020-03-02T20:35:59Z", "commit": {"oid": "893f1f7dda2a247400c13511aefc4df92fba6253"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMDozNjowMFrOFwuWqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMDo0MDowNlrOFwud3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYzNTQzMg==", "bodyText": "Use Objects.requireNonNull(lookupClass) here rather than the explicit method call for a null check", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#discussion_r386635432", "createdAt": "2020-03-02T20:36:00Z", "author": {"login": "DanHeidinga"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -1100,29 +1220,55 @@ public MethodHandle findStaticSetter(Class<?> clazz, String fieldName, Class<?>\n \t\t\treturn handle;\n \t\t}\n \t\t\n+\t\t/*[IF Java14]*/\n \t\t/**\n \t\t * Create a lookup on the request class.  The resulting lookup will have no more \n \t\t * access privileges than the original.\n \t\t * \n \t\t * @param lookupClass - the class to create the lookup on\n \t\t * @return a new MethodHandles.Lookup object\n+\t\t * @throws NullPointerException - if lookupClass is null\n+\t\t * @throws IllegalArgumentException - if the requested Class is a primitive type or an array class\n \t\t */\n-\t\tpublic MethodHandles.Lookup in(Class<?> lookupClass){\n-\t\t\tlookupClass.getClass();\t// implicit null check\n+\t\tpublic MethodHandles.Lookup in(Class<?> lookupClass) throws NullPointerException, IllegalArgumentException {\n+\t\t/*[ELSE]*/\n+\t\t/**\n+\t\t * Create a lookup on the request class.  The resulting lookup will have no more \n+\t\t * access privileges than the original.\n+\t\t * \n+\t\t * @param lookupClass - the class to create the lookup on\n+\t\t * @return a new MethodHandles.Lookup object\n+\t\t */\n+\t\tpublic MethodHandles.Lookup in(Class<?> lookupClass) {\n+\t\t/*[ENDIF] Java14 */\n+\t\t\tif (Objects.isNull(lookupClass)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "893f1f7dda2a247400c13511aefc4df92fba6253"}, "originalPosition": 270}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYzNTY4OA==", "bodyText": "What's the expected behaviour of these cases pre-java14?  We may be able to enable this everywhere", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#discussion_r386635688", "createdAt": "2020-03-02T20:36:32Z", "author": {"login": "DanHeidinga"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -1100,29 +1220,55 @@ public MethodHandle findStaticSetter(Class<?> clazz, String fieldName, Class<?>\n \t\t\treturn handle;\n \t\t}\n \t\t\n+\t\t/*[IF Java14]*/\n \t\t/**\n \t\t * Create a lookup on the request class.  The resulting lookup will have no more \n \t\t * access privileges than the original.\n \t\t * \n \t\t * @param lookupClass - the class to create the lookup on\n \t\t * @return a new MethodHandles.Lookup object\n+\t\t * @throws NullPointerException - if lookupClass is null\n+\t\t * @throws IllegalArgumentException - if the requested Class is a primitive type or an array class\n \t\t */\n-\t\tpublic MethodHandles.Lookup in(Class<?> lookupClass){\n-\t\t\tlookupClass.getClass();\t// implicit null check\n+\t\tpublic MethodHandles.Lookup in(Class<?> lookupClass) throws NullPointerException, IllegalArgumentException {\n+\t\t/*[ELSE]*/\n+\t\t/**\n+\t\t * Create a lookup on the request class.  The resulting lookup will have no more \n+\t\t * access privileges than the original.\n+\t\t * \n+\t\t * @param lookupClass - the class to create the lookup on\n+\t\t * @return a new MethodHandles.Lookup object\n+\t\t */\n+\t\tpublic MethodHandles.Lookup in(Class<?> lookupClass) {\n+\t\t/*[ENDIF] Java14 */\n+\t\t\tif (Objects.isNull(lookupClass)) {\n+\t\t\t\t/*[MSG \"K0682\", \"The requested lookup class must not be null\"]*/\n+\t\t\t\tthrow new NullPointerException(com.ibm.oti.util.Msg.getString(\"K0682\")); //$NON-NLS-1$\n+\t\t\t}\n+\t\t\t\n+\t\t\t/*[IF Java14]*/\n+\t\t\tif ((lookupClass == void.class) || lookupClass.isPrimitive() || lookupClass.isArray()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "893f1f7dda2a247400c13511aefc4df92fba6253"}, "originalPosition": 276}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYzNzI3OA==", "bodyText": "This is a good use case for a switch statement:\nswitch(dropMode) {\ncase PUBLIC:\ncase MODULE:\ncase PACKAGE:\ncase PRIVATE:\ncase PROTECTED:\ncase UNCONDITIONAL:\n  /* dropMode is OK */\n  break;\ndefault:\n\t/*[MSG \"K065R\", \"The requested lookup mode: 0x{0} is not one of the existing access modes: 0x{1}\"]*/\n \tthrow new IllegalArgumentException(com.ibm.oti.util.Msg.getString(\"K065R\", Integer.toHexString(dropMode), Integer.toHexString(fullAccessMode))); \n}", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#discussion_r386637278", "createdAt": "2020-03-02T20:40:06Z", "author": {"login": "DanHeidinga"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -1865,11 +2082,30 @@ public VarHandle unreflectVarHandle(Field field) throws IllegalAccessException {\n \t\t\t * as it is not set up for lookup objects by default.\n \t\t\t */\n \t\t\tint fullAccessMode = FULL_ACCESS_MASK | MODULE | UNCONDITIONAL;\n+\t\t\t\n+\t\t\tif ((dropMode != PUBLIC)\n+\t\t\t\t\t&& (dropMode != MODULE)\n+\t\t\t\t\t&& (dropMode != PACKAGE)\n+\t\t\t\t\t&& (dropMode != PRIVATE)\n+\t\t\t\t\t&& (dropMode != PROTECTED)\n+\t\t\t\t\t&& (dropMode != UNCONDITIONAL)\n+\t\t\t) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "893f1f7dda2a247400c13511aefc4df92fba6253"}, "originalPosition": 452}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "893f1f7dda2a247400c13511aefc4df92fba6253", "author": {"user": {"login": "ChengJin01", "name": "Cheng Jin"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/893f1f7dda2a247400c13511aefc4df92fba6253", "committedDate": "2020-02-28T20:36:51Z", "message": "Update the Lookup specific code against the JDK14 Spec\n\nThe change is to update the code related to MH.Lookup\nto deal with the change of the full privilege access\nand the new concept called previous lookup class introduced\nin JDK14.\n\nFixes: #8571\n\nSigned-off-by: Cheng Jin <jincheng@ca.ibm.com>"}, "afterCommit": {"oid": "27703cc23fef422b27d5c01d3cc82052108e0d20", "author": {"user": {"login": "ChengJin01", "name": "Cheng Jin"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/27703cc23fef422b27d5c01d3cc82052108e0d20", "committedDate": "2020-03-02T21:06:38Z", "message": "Update the Lookup specific code against the JDK14 Spec\n\nThe change is to update the code related to MH.Lookup\nto deal with the change of the full privilege access\nand the new concept called previous lookup class introduced\nin JDK14.\n\nFixes: #8571\n\nSigned-off-by: Cheng Jin <jincheng@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "27703cc23fef422b27d5c01d3cc82052108e0d20", "author": {"user": {"login": "ChengJin01", "name": "Cheng Jin"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/27703cc23fef422b27d5c01d3cc82052108e0d20", "committedDate": "2020-03-02T21:06:38Z", "message": "Update the Lookup specific code against the JDK14 Spec\n\nThe change is to update the code related to MH.Lookup\nto deal with the change of the full privilege access\nand the new concept called previous lookup class introduced\nin JDK14.\n\nFixes: #8571\n\nSigned-off-by: Cheng Jin <jincheng@ca.ibm.com>"}, "afterCommit": {"oid": "910157e25aa9f5e964ea8bdb7d8fb899320dc27f", "author": {"user": {"login": "ChengJin01", "name": "Cheng Jin"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/910157e25aa9f5e964ea8bdb7d8fb899320dc27f", "committedDate": "2020-03-02T22:14:19Z", "message": "Update the Lookup specific code against the JDK14 Spec\n\nThe change is to update the code related to MH.Lookup\nto deal with the change of the full privilege access\nand the new concept called previous lookup class introduced\nin JDK14.\n\nFixes: #8571\n\nSigned-off-by: Cheng Jin <jincheng@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "910157e25aa9f5e964ea8bdb7d8fb899320dc27f", "author": {"user": {"login": "ChengJin01", "name": "Cheng Jin"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/910157e25aa9f5e964ea8bdb7d8fb899320dc27f", "committedDate": "2020-03-02T22:14:19Z", "message": "Update the Lookup specific code against the JDK14 Spec\n\nThe change is to update the code related to MH.Lookup\nto deal with the change of the full privilege access\nand the new concept called previous lookup class introduced\nin JDK14.\n\nFixes: #8571\n\nSigned-off-by: Cheng Jin <jincheng@ca.ibm.com>"}, "afterCommit": {"oid": "843e3f81590528251d612bedfdc3c563795329ee", "author": {"user": {"login": "ChengJin01", "name": "Cheng Jin"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/843e3f81590528251d612bedfdc3c563795329ee", "committedDate": "2020-03-03T01:01:59Z", "message": "Update the Lookup specific code against the JDK14 Spec\n\nThe change is to update the code related to MH.Lookup\nto deal with the change of the full privilege access\nand the new concept called previous lookup class introduced\nin JDK14.\n\nFixes: #8571\n\nSigned-off-by: Cheng Jin <jincheng@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "843e3f81590528251d612bedfdc3c563795329ee", "author": {"user": {"login": "ChengJin01", "name": "Cheng Jin"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/843e3f81590528251d612bedfdc3c563795329ee", "committedDate": "2020-03-03T01:01:59Z", "message": "Update the Lookup specific code against the JDK14 Spec\n\nThe change is to update the code related to MH.Lookup\nto deal with the change of the full privilege access\nand the new concept called previous lookup class introduced\nin JDK14.\n\nFixes: #8571\n\nSigned-off-by: Cheng Jin <jincheng@ca.ibm.com>"}, "afterCommit": {"oid": "593cac9ef55ab8f867183fb4725e255a898302fd", "author": {"user": {"login": "ChengJin01", "name": "Cheng Jin"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/593cac9ef55ab8f867183fb4725e255a898302fd", "committedDate": "2020-03-03T19:33:17Z", "message": "Update the Lookup specific code against the JDK14 Spec\n\nThe change is to update the code related to MH.Lookup\nto deal with the change of the full privilege access\nand the new concept called previous lookup class introduced\nin JDK14.\n\nFixes: #8571\n\nSigned-off-by: Cheng Jin <jincheng@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "593cac9ef55ab8f867183fb4725e255a898302fd", "author": {"user": {"login": "ChengJin01", "name": "Cheng Jin"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/593cac9ef55ab8f867183fb4725e255a898302fd", "committedDate": "2020-03-03T19:33:17Z", "message": "Update the Lookup specific code against the JDK14 Spec\n\nThe change is to update the code related to MH.Lookup\nto deal with the change of the full privilege access\nand the new concept called previous lookup class introduced\nin JDK14.\n\nFixes: #8571\n\nSigned-off-by: Cheng Jin <jincheng@ca.ibm.com>"}, "afterCommit": {"oid": "99faaccd43d84954406e90e6bca82f09878346b3", "author": {"user": {"login": "ChengJin01", "name": "Cheng Jin"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/99faaccd43d84954406e90e6bca82f09878346b3", "committedDate": "2020-03-03T19:34:55Z", "message": "Update the Lookup specific code against the JDK14 Spec\n\nThe change is to update the code related to MH.Lookup\nto deal with the change of the full privilege access\nand the new concept called previous lookup class introduced\nin JDK14.\n\nFixes: #8571\n\nSigned-off-by: Cheng Jin <jincheng@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MjcyMjYz", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#pullrequestreview-368272263", "createdAt": "2020-03-03T19:45:18Z", "commit": {"oid": "99faaccd43d84954406e90e6bca82f09878346b3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxOTo0NToxOFrOFxUAuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxOTo0NToxOFrOFxUAuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1MjQwOA==", "bodyText": "nitpick : pls add Java14 here.", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#discussion_r387252408", "createdAt": "2020-03-03T19:45:18Z", "author": {"login": "JasonFengJ9"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -169,45 +169,60 @@\n \t\tstatic final int VARARGS = 0x80;\n \t\t\n \t\t/* single cached value of public Lookup object */\n-\t\t/*[IF Sidecar19-SE-OpenJ9]\n-\t\tstatic Lookup PUBLIC_LOOKUP = new Lookup(Object.class, Lookup.PUBLIC | Lookup.UNCONDITIONAL);\n+\t\tstatic final int mhMask = \n+\t\t/*[IF Java11]*/\n+\t\t/*[IF Java14]*/\n+\t\tLookup.UNCONDITIONAL;\n \t\t/*[ELSE]*/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99faaccd43d84954406e90e6bca82f09878346b3"}, "originalPosition": 10}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "99faaccd43d84954406e90e6bca82f09878346b3", "author": {"user": {"login": "ChengJin01", "name": "Cheng Jin"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/99faaccd43d84954406e90e6bca82f09878346b3", "committedDate": "2020-03-03T19:34:55Z", "message": "Update the Lookup specific code against the JDK14 Spec\n\nThe change is to update the code related to MH.Lookup\nto deal with the change of the full privilege access\nand the new concept called previous lookup class introduced\nin JDK14.\n\nFixes: #8571\n\nSigned-off-by: Cheng Jin <jincheng@ca.ibm.com>"}, "afterCommit": {"oid": "85bb47f369d72e79486efa6a58c216236a787fd2", "author": {"user": {"login": "ChengJin01", "name": "Cheng Jin"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/85bb47f369d72e79486efa6a58c216236a787fd2", "committedDate": "2020-03-03T19:46:39Z", "message": "Update the Lookup specific code against the JDK14 Spec\n\nThe change is to update the code related to MH.Lookup\nto deal with the change of the full privilege access\nand the new concept called previous lookup class introduced\nin JDK14.\n\nFixes: #8571\n\nSigned-off-by: Cheng Jin <jincheng@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4Mjg5ODM5", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#pullrequestreview-368289839", "createdAt": "2020-03-03T20:11:45Z", "commit": {"oid": "85bb47f369d72e79486efa6a58c216236a787fd2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "85bb47f369d72e79486efa6a58c216236a787fd2", "author": {"user": {"login": "ChengJin01", "name": "Cheng Jin"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/85bb47f369d72e79486efa6a58c216236a787fd2", "committedDate": "2020-03-03T19:46:39Z", "message": "Update the Lookup specific code against the JDK14 Spec\n\nThe change is to update the code related to MH.Lookup\nto deal with the change of the full privilege access\nand the new concept called previous lookup class introduced\nin JDK14.\n\nFixes: #8571\n\nSigned-off-by: Cheng Jin <jincheng@ca.ibm.com>"}, "afterCommit": {"oid": "2e5e67581a539e04a56b75e594345758ba14034d", "author": {"user": {"login": "ChengJin01", "name": "Cheng Jin"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/2e5e67581a539e04a56b75e594345758ba14034d", "committedDate": "2020-03-04T21:10:37Z", "message": "Update the Lookup specific code against the JDK14 Spec\n\nThe change is to update the code related to MH.Lookup\nto deal with the change of the full privilege access\nand the new concept called previous lookup class introduced\nin JDK14.\n\nFixes: #8571\n\nSigned-off-by: Cheng Jin <jincheng@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2e5e67581a539e04a56b75e594345758ba14034d", "author": {"user": {"login": "ChengJin01", "name": "Cheng Jin"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/2e5e67581a539e04a56b75e594345758ba14034d", "committedDate": "2020-03-04T21:10:37Z", "message": "Update the Lookup specific code against the JDK14 Spec\n\nThe change is to update the code related to MH.Lookup\nto deal with the change of the full privilege access\nand the new concept called previous lookup class introduced\nin JDK14.\n\nFixes: #8571\n\nSigned-off-by: Cheng Jin <jincheng@ca.ibm.com>"}, "afterCommit": {"oid": "f947deba7532c4d6406cfed387c48f575021151e", "author": {"user": {"login": "ChengJin01", "name": "Cheng Jin"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/f947deba7532c4d6406cfed387c48f575021151e", "committedDate": "2020-03-05T18:10:34Z", "message": "Update the Lookup specific code against the JDK14 Spec\n\nThe change is to update the code related to MH.Lookup\nto deal with the change of the full privilege access\nand the new concept called previous lookup class introduced\nin JDK14.\n\nFixes: #8571\n\nSigned-off-by: Cheng Jin <jincheng@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f947deba7532c4d6406cfed387c48f575021151e", "author": {"user": {"login": "ChengJin01", "name": "Cheng Jin"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/f947deba7532c4d6406cfed387c48f575021151e", "committedDate": "2020-03-05T18:10:34Z", "message": "Update the Lookup specific code against the JDK14 Spec\n\nThe change is to update the code related to MH.Lookup\nto deal with the change of the full privilege access\nand the new concept called previous lookup class introduced\nin JDK14.\n\nFixes: #8571\n\nSigned-off-by: Cheng Jin <jincheng@ca.ibm.com>"}, "afterCommit": {"oid": "fd6f62fa41d798c471298ee9f0b75576294d96c6", "author": {"user": {"login": "ChengJin01", "name": "Cheng Jin"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/fd6f62fa41d798c471298ee9f0b75576294d96c6", "committedDate": "2020-03-05T18:16:45Z", "message": "Update the Lookup specific code against the JDK14 Spec\n\nThe change is to update the code related to MH.Lookup\nto deal with the change of the full privilege access\nand the new concept called previous lookup class introduced\nin JDK14.\n\nFixes: #8570, Fixes: #8571\n\nSigned-off-by: Cheng Jin <jincheng@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4ODkzMDk2", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#pullrequestreview-368893096", "createdAt": "2020-03-04T15:47:34Z", "commit": {"oid": "843e3f81590528251d612bedfdc3c563795329ee"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNTo0OTozMFrOFxyxQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNjozNjoyMVrOFya8wA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc1NjM1Mw==", "bodyText": "void.class.isPrimitive() is true\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tif ((lookupClass == void.class) || lookupClass.isPrimitive() || lookupClass.isArray()) {\n          \n          \n            \n            \t\t\tif (lookupClass.isPrimitive() || lookupClass.isArray()) {", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#discussion_r387756353", "createdAt": "2020-03-04T15:49:30Z", "author": {"login": "DanHeidinga"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -1100,29 +1233,52 @@ public MethodHandle findStaticSetter(Class<?> clazz, String fieldName, Class<?>\n \t\t\treturn handle;\n \t\t}\n \t\t\n+\t\t/*[IF Java14]*/\n+\t\t/**\n+\t\t * Create a lookup on the request class.  The resulting lookup will have no more \n+\t\t * access privileges than the original.\n+\t\t * \n+\t\t * @param lookupClass - the class to create the lookup on\n+\t\t * @return a new MethodHandles.Lookup object\n+\t\t * @throws NullPointerException - if lookupClass is null\n+\t\t * @throws IllegalArgumentException - if the requested Class is a primitive type or an array class\n+\t\t */\n+\t\tpublic MethodHandles.Lookup in(Class<?> lookupClass) throws NullPointerException, IllegalArgumentException {\n+\t\t/*[ELSE]*/\n \t\t/**\n \t\t * Create a lookup on the request class.  The resulting lookup will have no more \n \t\t * access privileges than the original.\n \t\t * \n \t\t * @param lookupClass - the class to create the lookup on\n \t\t * @return a new MethodHandles.Lookup object\n \t\t */\n-\t\tpublic MethodHandles.Lookup in(Class<?> lookupClass){\n-\t\t\tlookupClass.getClass();\t// implicit null check\n+\t\tpublic MethodHandles.Lookup in(Class<?> lookupClass) {\n+\t\t/*[ENDIF] Java14 */\n+\t\t\tObjects.requireNonNull(lookupClass);\n+\t\t\t\n+\t\t\t/*[IF Java14]*/\n+\t\t\tif ((lookupClass == void.class) || lookupClass.isPrimitive() || lookupClass.isArray()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85bb47f369d72e79486efa6a58c216236a787fd2"}, "originalPosition": 318}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQwMDkwOQ==", "bodyText": "Why would dropLookupMode ever modify the previousAccessClass?", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#discussion_r388400909", "createdAt": "2020-03-05T16:15:34Z", "author": {"login": "DanHeidinga"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -1865,47 +2136,109 @@ public VarHandle unreflectVarHandle(Field field) throws IllegalAccessException {\n \t\t\t * as it is not set up for lookup objects by default.\n \t\t\t */\n \t\t\tint fullAccessMode = FULL_ACCESS_MASK | MODULE | UNCONDITIONAL;\n+\t\t\t\n+\t\t\tswitch(dropMode) {\n+\t\t\tcase PUBLIC:\n+\t\t\tcase MODULE:\n+\t\t\tcase PACKAGE:\n+\t\t\tcase PRIVATE:\n+\t\t\tcase PROTECTED:\n+\t\t\tcase UNCONDITIONAL:\n+\t\t\t\t/* dropMode is OK */\n+\t\t\t\tbreak;\n+\t\t\tdefault:\n+\t\t\t\t/*[MSG \"K065R\", \"The requested lookup mode: 0x{0} is not one of the existing access modes: 0x{1}\"]*/\n+\t\t\t\tthrow new IllegalArgumentException(com.ibm.oti.util.Msg.getString(\"K065R\", Integer.toHexString(dropMode), Integer.toHexString(fullAccessMode))); //$NON-NLS-1$\n+\t\t\t}\n \n+\t\t\t/*[IF Java14]*/\n+\t\t\t/* The lookup object has to discard the protected access by default */\n+\t\t\tint newAccessMode = accessMode & ~PROTECTED;\n+\t\t\t/*[ELSE]*/\n \t\t\t/* The lookup object has to discard the protected and unconditional access by default */\n \t\t\tint newAccessMode = accessMode & ~(PROTECTED | UNCONDITIONAL);\n+\t\t\t/*[ENDIF] Java14*/\n \t\t\t\n-\t\t\tswitch (dropMode) {\n+\t\t\t/* The access mode to be dropped must exist in the current access mode;\n+\t\t\t * otherwise, the new access mode remains unchanged.\n+\t\t\t */\n+\t\t\tswitch (dropMode & newAccessMode) {\n \t\t\tcase PUBLIC:\n \t\t\t\tnewAccessMode = NO_ACCESS;\n \t\t\t\tbreak;\n-\t\t\tcase MODULE:\n-\t\t\t\tnewAccessMode &= ~(MODULE | PACKAGE | PRIVATE);\n-\t\t\t\tbreak;\n \t\t\tcase PACKAGE:\n \t\t\t\tnewAccessMode &= ~(PACKAGE | PRIVATE);\n \t\t\t\tbreak;\n \t\t\tcase PRIVATE:\n \t\t\t\tnewAccessMode &= ~PRIVATE;\n \t\t\t\tbreak;\n-\t\t\tcase PROTECTED:\n \t\t\tcase UNCONDITIONAL:\n+\t\t\t\t/*[IF Java14]*/\n+\t\t\t\tnewAccessMode = NO_ACCESS;\n+\t\t\t\t/*[ENDIF] Java14*/\n \t\t\t\tbreak;\n \t\t\tdefault:\n-\t\t\t\t/*[MSG \"K065R\", \"The requested lookup mode: 0x{0} is not one of the existing access modes: 0x{1}\"]*/\n-\t\t\t\tthrow new IllegalArgumentException(com.ibm.oti.util.Msg.getString(\"K065R\", Integer.toHexString(dropMode), Integer.toHexString(fullAccessMode))); //$NON-NLS-1$\n+\t\t\t\t/* no change in the access mode */\n \t\t\t}\n \t\t\t\n-\t\t\treturn new Lookup(accessClass, newAccessMode); \n+\t\t\t/* The exception is MODULE in which case all access bits involved must be dropped\n+\t\t\t * whether or not the MODULE bit exists in the access mode.\n+\t\t\t */\n+\t\t\tif ((dropMode == MODULE) || ((dropMode & newAccessMode) == MODULE)) {\n+\t\t\t\tnewAccessMode &= ~(MODULE | PACKAGE | PRIVATE);\n+\t\t\t}\n+\t\t\t\n+\t\t\t/*[IF Java14]*/\n+\t\t\t/* There is no previous lookup class for the requested lookup class\n+\t\t\t * if the MODULE or UNCONDITIONAL bit is set in the new access mode.\n+\t\t\t */\n+\t\t\tClass<?> newPrevAccessClass = prevAccessClass;\n+\t\t\tif (((newAccessMode & MODULE) == MODULE)\n+\t\t\t\t|| ((newAccessMode & UNCONDITIONAL) == UNCONDITIONAL)\n+\t\t\t) {\n+\t\t\t\tnewPrevAccessClass = null;\n+\t\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e5e67581a539e04a56b75e594345758ba14034d"}, "originalPosition": 622}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQxNDY1Ng==", "bodyText": "void.class.isPrimitive is true so we don't need to first check", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#discussion_r388414656", "createdAt": "2020-03-05T16:36:21Z", "author": {"login": "DanHeidinga"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -1959,8 +2292,8 @@ static MethodHandle filterArgument(MethodHandle target, int pos, MethodHandle fi\n \t\t\tthrow new NullPointerException(com.ibm.oti.util.Msg.getString(\"K065S\")); //$NON-NLS-1$\n \t\t}\n \t\t\n-\t\tif (targetClass.isPrimitive() || targetClass.isArray()) {\n-\t\t\t/*[MSG \"K065T\", \"The target class: {0} must not be a primitive type or an array class\"]*/\n+\t\tif ((targetClass == void.class) || targetClass.isPrimitive() || targetClass.isArray()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e5e67581a539e04a56b75e594345758ba14034d"}, "originalPosition": 673}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5ODUwNTQ3", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#pullrequestreview-369850547", "createdAt": "2020-03-05T19:27:41Z", "commit": {"oid": "fd6f62fa41d798c471298ee9f0b75576294d96c6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOToyNzo0MVrOFyg9fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOToyNzo0MVrOFyg9fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxMzE1MQ==", "bodyText": "Why is this an exception?  I don't see anything about this in the \"Access modes\" table showing dropLookupMode behaviour in https://download.java.net/java/early_access/jdk14/docs/api/java.base/java/lang/invoke/MethodHandles.Lookup.html#access-modes\nIt seems like this should apply to all dropped modes & the change to switch (dropMode & newAccessMode) is unnecessary", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#discussion_r388513151", "createdAt": "2020-03-05T19:27:41Z", "author": {"login": "DanHeidinga"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -1865,47 +2136,109 @@ public VarHandle unreflectVarHandle(Field field) throws IllegalAccessException {\n \t\t\t * as it is not set up for lookup objects by default.\n \t\t\t */\n \t\t\tint fullAccessMode = FULL_ACCESS_MASK | MODULE | UNCONDITIONAL;\n+\t\t\t\n+\t\t\tswitch(dropMode) {\n+\t\t\tcase PUBLIC:\n+\t\t\tcase MODULE:\n+\t\t\tcase PACKAGE:\n+\t\t\tcase PRIVATE:\n+\t\t\tcase PROTECTED:\n+\t\t\tcase UNCONDITIONAL:\n+\t\t\t\t/* dropMode is OK */\n+\t\t\t\tbreak;\n+\t\t\tdefault:\n+\t\t\t\t/*[MSG \"K065R\", \"The requested lookup mode: 0x{0} is not one of the existing access modes: 0x{1}\"]*/\n+\t\t\t\tthrow new IllegalArgumentException(com.ibm.oti.util.Msg.getString(\"K065R\", Integer.toHexString(dropMode), Integer.toHexString(fullAccessMode))); //$NON-NLS-1$\n+\t\t\t}\n \n+\t\t\t/*[IF Java14]*/\n+\t\t\t/* The lookup object has to discard the protected access by default */\n+\t\t\tint newAccessMode = accessMode & ~PROTECTED;\n+\t\t\t/*[ELSE]*/\n \t\t\t/* The lookup object has to discard the protected and unconditional access by default */\n \t\t\tint newAccessMode = accessMode & ~(PROTECTED | UNCONDITIONAL);\n+\t\t\t/*[ENDIF] Java14*/\n \t\t\t\n-\t\t\tswitch (dropMode) {\n+\t\t\t/* The access mode to be dropped must exist in the current access mode;\n+\t\t\t * otherwise, the new access mode remains unchanged.\n+\t\t\t */\n+\t\t\tswitch (dropMode & newAccessMode) {\n \t\t\tcase PUBLIC:\n \t\t\t\tnewAccessMode = NO_ACCESS;\n \t\t\t\tbreak;\n-\t\t\tcase MODULE:\n-\t\t\t\tnewAccessMode &= ~(MODULE | PACKAGE | PRIVATE);\n-\t\t\t\tbreak;\n \t\t\tcase PACKAGE:\n \t\t\t\tnewAccessMode &= ~(PACKAGE | PRIVATE);\n \t\t\t\tbreak;\n \t\t\tcase PRIVATE:\n \t\t\t\tnewAccessMode &= ~PRIVATE;\n \t\t\t\tbreak;\n-\t\t\tcase PROTECTED:\n \t\t\tcase UNCONDITIONAL:\n+\t\t\t\t/*[IF Java14]*/\n+\t\t\t\tnewAccessMode = NO_ACCESS;\n+\t\t\t\t/*[ENDIF] Java14*/\n \t\t\t\tbreak;\n \t\t\tdefault:\n-\t\t\t\t/*[MSG \"K065R\", \"The requested lookup mode: 0x{0} is not one of the existing access modes: 0x{1}\"]*/\n-\t\t\t\tthrow new IllegalArgumentException(com.ibm.oti.util.Msg.getString(\"K065R\", Integer.toHexString(dropMode), Integer.toHexString(fullAccessMode))); //$NON-NLS-1$\n+\t\t\t\t/* no change in the access mode */\n \t\t\t}\n \t\t\t\n-\t\t\treturn new Lookup(accessClass, newAccessMode); \n+\t\t\t/* The exception is MODULE in which case all access bits involved must be dropped", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd6f62fa41d798c471298ee9f0b75576294d96c6"}, "originalPosition": 606}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5ODYwMTI3", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#pullrequestreview-369860127", "createdAt": "2020-03-05T19:41:52Z", "commit": {"oid": "fd6f62fa41d798c471298ee9f0b75576294d96c6"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTo0MTo1M1rOFyhahg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTo0MjozNlrOFyhb8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUyMDU4Mg==", "bodyText": "Can you add the following code here to make it more clear?\n/* A protected class (must be a member class) is compiled to a public class as\n * the protected flag of this class doesn't exist on the VM level (there is no \n * access flag in the binary form representing 'protected')\n */\n final boolean targetClassIsPublic = (Modifier.isPublic(targetClassModifiers) || Modifier.isProtected(targetClassModifiers));", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#discussion_r388520582", "createdAt": "2020-03-05T19:41:53Z", "author": {"login": "DanHeidinga"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -535,28 +568,67 @@ private void checkAccess(Class<?> definingClass, Class<?> referenceClass, String\n \t\t */\n \t\tprivate void checkClassAccess(Class<?> targetClass) throws IllegalAccessException {\n \t\t\t/*[IF Sidecar19-SE]*/\n+\t\t\t/*[IF Java14]*/\n+\t\t\tcheckClassModuleVisibility(accessMode, accessClass, prevAccessClass, targetClass);\n+\t\t\t/*[ELSE]*/\n \t\t\tcheckClassModuleVisibility(accessMode, accessClass.getModule(), targetClass);\n+\t\t\t/*[ENDIF] Java14*/\n \t\t\t/*[ENDIF]*/\n+\t\t\t\n \t\t\tif (NO_ACCESS != accessMode) {\n-\t\t\t\t/* target class should always be accessible to the lookup class when they are the same class */\n-\t\t\t\tif (accessClass == targetClass) {\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\tint modifiers = targetClass.getModifiers();\n-\t\t\t\t\n-\t\t\t\t/* A protected class (must be a member class) is compiled to a public class as\n-\t\t\t\t * the protected flag of this class doesn't exist on the VM level (there is no \n-\t\t\t\t * access flag in the binary form representing 'protected')\n-\t\t\t\t */\n-\t\t\t\tif (Modifier.isPublic(modifiers) || Modifier.isProtected(modifiers)) {\n-\t\t\t\t\t/* Already determined that we have more than \"no access\" (public access) */\n+\t\t\t\tint targetClassModifiers = targetClass.getModifiers();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd6f62fa41d798c471298ee9f0b75576294d96c6"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUyMDcwMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t\t&& (Modifier.isPublic(targetClassModifiers) || Modifier.isProtected(targetClassModifiers))\n          \n          \n            \n            \t\t\t\t\t&& targetClassIsPublic", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#discussion_r388520700", "createdAt": "2020-03-05T19:42:06Z", "author": {"login": "DanHeidinga"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -535,28 +568,67 @@ private void checkAccess(Class<?> definingClass, Class<?> referenceClass, String\n \t\t */\n \t\tprivate void checkClassAccess(Class<?> targetClass) throws IllegalAccessException {\n \t\t\t/*[IF Sidecar19-SE]*/\n+\t\t\t/*[IF Java14]*/\n+\t\t\tcheckClassModuleVisibility(accessMode, accessClass, prevAccessClass, targetClass);\n+\t\t\t/*[ELSE]*/\n \t\t\tcheckClassModuleVisibility(accessMode, accessClass.getModule(), targetClass);\n+\t\t\t/*[ENDIF] Java14*/\n \t\t\t/*[ENDIF]*/\n+\t\t\t\n \t\t\tif (NO_ACCESS != accessMode) {\n-\t\t\t\t/* target class should always be accessible to the lookup class when they are the same class */\n-\t\t\t\tif (accessClass == targetClass) {\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\tint modifiers = targetClass.getModifiers();\n-\t\t\t\t\n-\t\t\t\t/* A protected class (must be a member class) is compiled to a public class as\n-\t\t\t\t * the protected flag of this class doesn't exist on the VM level (there is no \n-\t\t\t\t * access flag in the binary form representing 'protected')\n-\t\t\t\t */\n-\t\t\t\tif (Modifier.isPublic(modifiers) || Modifier.isProtected(modifiers)) {\n-\t\t\t\t\t/* Already determined that we have more than \"no access\" (public access) */\n+\t\t\t\tint targetClassModifiers = targetClass.getModifiers();\n+\t\t\t\t/*[IF Java14]*/\n+\t\t\t\tModule accessModule = accessClass.getModule();\n+\t\t\t\tModule targetModule = targetClass.getModule();\n+\t\t\t\tString targetClassPackageName = targetClass.getPackageName();\n+\n+\t\t\t\tif (((UNCONDITIONAL & accessMode) == UNCONDITIONAL)\n+\t\t\t\t\t&& (Modifier.isPublic(targetClassModifiers) || Modifier.isProtected(targetClassModifiers))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd6f62fa41d798c471298ee9f0b75576294d96c6"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUyMDk0NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t\t/* A protected class (must be a member class) is compiled to a public class as\n          \n          \n            \n            \t\t\t\t\t * the protected flag of this class doesn't exist on the VM level (there is no \n          \n          \n            \n            \t\t\t\t\t * access flag in the binary form representing 'protected')\n          \n          \n            \n            \t\t\t\t\t */\n          \n          \n            \n            \t\t\t\t\tif (Modifier.isPublic(targetClassModifiers) || Modifier.isProtected(targetClassModifiers)) {\n          \n          \n            \n            \t\t\t\t\tif (targetClassIsPublic) {", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#discussion_r388520944", "createdAt": "2020-03-05T19:42:36Z", "author": {"login": "DanHeidinga"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -535,28 +568,67 @@ private void checkAccess(Class<?> definingClass, Class<?> referenceClass, String\n \t\t */\n \t\tprivate void checkClassAccess(Class<?> targetClass) throws IllegalAccessException {\n \t\t\t/*[IF Sidecar19-SE]*/\n+\t\t\t/*[IF Java14]*/\n+\t\t\tcheckClassModuleVisibility(accessMode, accessClass, prevAccessClass, targetClass);\n+\t\t\t/*[ELSE]*/\n \t\t\tcheckClassModuleVisibility(accessMode, accessClass.getModule(), targetClass);\n+\t\t\t/*[ENDIF] Java14*/\n \t\t\t/*[ENDIF]*/\n+\t\t\t\n \t\t\tif (NO_ACCESS != accessMode) {\n-\t\t\t\t/* target class should always be accessible to the lookup class when they are the same class */\n-\t\t\t\tif (accessClass == targetClass) {\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\tint modifiers = targetClass.getModifiers();\n-\t\t\t\t\n-\t\t\t\t/* A protected class (must be a member class) is compiled to a public class as\n-\t\t\t\t * the protected flag of this class doesn't exist on the VM level (there is no \n-\t\t\t\t * access flag in the binary form representing 'protected')\n-\t\t\t\t */\n-\t\t\t\tif (Modifier.isPublic(modifiers) || Modifier.isProtected(modifiers)) {\n-\t\t\t\t\t/* Already determined that we have more than \"no access\" (public access) */\n+\t\t\t\tint targetClassModifiers = targetClass.getModifiers();\n+\t\t\t\t/*[IF Java14]*/\n+\t\t\t\tModule accessModule = accessClass.getModule();\n+\t\t\t\tModule targetModule = targetClass.getModule();\n+\t\t\t\tString targetClassPackageName = targetClass.getPackageName();\n+\n+\t\t\t\tif (((UNCONDITIONAL & accessMode) == UNCONDITIONAL)\n+\t\t\t\t\t&& (Modifier.isPublic(targetClassModifiers) || Modifier.isProtected(targetClassModifiers))\n+\t\t\t\t\t&& targetModule.isExported(targetClassPackageName)\n+\t\t\t\t) {\n \t\t\t\t\treturn;\n-\t\t\t\t} else {\n-\t\t\t\t\tif (((PACKAGE == (accessMode & PACKAGE)) || Modifier.isPrivate(accessMode)) && isSamePackage(accessClass, targetClass)) {\n+\t\t\t\t} else if ((targetModule != null) && (accessModule != null) \n+\t\t\t\t\t\t&& (accessModule.equals(targetModule) || (!accessModule.isNamed() && !targetModule.isNamed()))\n+\t\t\t\t) {\n+\t\t\t\t\tif (((PRIVATE & accessMode) == PRIVATE)\n+\t\t\t\t\t\t&& ((targetClass == accessClass) || targetClass.isNestmateOf(accessClass))\n+\t\t\t\t\t) {\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t} else if (((PACKAGE & accessMode) == PACKAGE) && isSamePackage(targetClass, accessClass)) {\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t} else if (((MODULE & accessMode) == MODULE)\n+\t\t\t\t\t\t&& (Modifier.isPublic(targetClassModifiers) || Modifier.isProtected(targetClassModifiers))\n+\t\t\t\t\t) {\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t} else if (((PUBLIC & accessMode) == PUBLIC)\n+\t\t\t\t\t\t&& (Modifier.isPublic(targetClassModifiers) || Modifier.isProtected(targetClassModifiers))\n+\t\t\t\t\t\t&& (((prevAccessClass != null) && targetModule.isExported(targetClassPackageName, prevAccessClass.getModule()))\n+\t\t\t\t\t\t\t|| targetModule.isExported(targetClassPackageName))\n+\t\t\t\t\t) {\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t}\n+\t\t\t\t} else if ((PUBLIC & accessMode) == PUBLIC) {\n+\t\t\t\t/*[ENDIF] Java14*/\n+\t\t\t\t\t/* target class should always be accessible to the lookup class when they are the same class */\n+\t\t\t\t\tif (accessClass == targetClass) {\n \t\t\t\t\t\treturn;\n \t\t\t\t\t}\n+\t\t\t\t\t\n+\t\t\t\t\t/* A protected class (must be a member class) is compiled to a public class as\n+\t\t\t\t\t * the protected flag of this class doesn't exist on the VM level (there is no \n+\t\t\t\t\t * access flag in the binary form representing 'protected')\n+\t\t\t\t\t */\n+\t\t\t\t\tif (Modifier.isPublic(targetClassModifiers) || Modifier.isProtected(targetClassModifiers)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd6f62fa41d798c471298ee9f0b75576294d96c6"}, "originalPosition": 197}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5ODY5NTky", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#pullrequestreview-369869592", "createdAt": "2020-03-05T19:55:38Z", "commit": {"oid": "fd6f62fa41d798c471298ee9f0b75576294d96c6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTo1NTozOVrOFyh4wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTo1NTozOVrOFyh4wA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUyODMyMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\tif (((UNCONDITIONAL & accessMode) == UNCONDITIONAL)\n          \n          \n            \n            \t\t\t\t/* An UNCONDITIONAL lookup has access to public types in any unconditionally exported package */\n          \n          \n            \n            \t\t\t\tif (((UNCONDITIONAL & accessMode) == UNCONDITIONAL)", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#discussion_r388528320", "createdAt": "2020-03-05T19:55:39Z", "author": {"login": "DanHeidinga"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -535,28 +568,67 @@ private void checkAccess(Class<?> definingClass, Class<?> referenceClass, String\n \t\t */\n \t\tprivate void checkClassAccess(Class<?> targetClass) throws IllegalAccessException {\n \t\t\t/*[IF Sidecar19-SE]*/\n+\t\t\t/*[IF Java14]*/\n+\t\t\tcheckClassModuleVisibility(accessMode, accessClass, prevAccessClass, targetClass);\n+\t\t\t/*[ELSE]*/\n \t\t\tcheckClassModuleVisibility(accessMode, accessClass.getModule(), targetClass);\n+\t\t\t/*[ENDIF] Java14*/\n \t\t\t/*[ENDIF]*/\n+\t\t\t\n \t\t\tif (NO_ACCESS != accessMode) {\n-\t\t\t\t/* target class should always be accessible to the lookup class when they are the same class */\n-\t\t\t\tif (accessClass == targetClass) {\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\tint modifiers = targetClass.getModifiers();\n-\t\t\t\t\n-\t\t\t\t/* A protected class (must be a member class) is compiled to a public class as\n-\t\t\t\t * the protected flag of this class doesn't exist on the VM level (there is no \n-\t\t\t\t * access flag in the binary form representing 'protected')\n-\t\t\t\t */\n-\t\t\t\tif (Modifier.isPublic(modifiers) || Modifier.isProtected(modifiers)) {\n-\t\t\t\t\t/* Already determined that we have more than \"no access\" (public access) */\n+\t\t\t\tint targetClassModifiers = targetClass.getModifiers();\n+\t\t\t\t/*[IF Java14]*/\n+\t\t\t\tModule accessModule = accessClass.getModule();\n+\t\t\t\tModule targetModule = targetClass.getModule();\n+\t\t\t\tString targetClassPackageName = targetClass.getPackageName();\n+\n+\t\t\t\tif (((UNCONDITIONAL & accessMode) == UNCONDITIONAL)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd6f62fa41d798c471298ee9f0b75576294d96c6"}, "originalPosition": 159}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5ODcxNDc4", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#pullrequestreview-369871478", "createdAt": "2020-03-05T19:58:20Z", "commit": {"oid": "fd6f62fa41d798c471298ee9f0b75576294d96c6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTo1ODoyMFrOFyh-sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTo1ODoyMFrOFyh-sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUyOTg0MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t\t\t&& (Modifier.isPublic(targetClassModifiers) || Modifier.isProtected(targetClassModifiers))\n          \n          \n            \n            \t\t\t\t\t\t&& (targetClassIsPublic)", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#discussion_r388529840", "createdAt": "2020-03-05T19:58:20Z", "author": {"login": "DanHeidinga"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -535,28 +568,67 @@ private void checkAccess(Class<?> definingClass, Class<?> referenceClass, String\n \t\t */\n \t\tprivate void checkClassAccess(Class<?> targetClass) throws IllegalAccessException {\n \t\t\t/*[IF Sidecar19-SE]*/\n+\t\t\t/*[IF Java14]*/\n+\t\t\tcheckClassModuleVisibility(accessMode, accessClass, prevAccessClass, targetClass);\n+\t\t\t/*[ELSE]*/\n \t\t\tcheckClassModuleVisibility(accessMode, accessClass.getModule(), targetClass);\n+\t\t\t/*[ENDIF] Java14*/\n \t\t\t/*[ENDIF]*/\n+\t\t\t\n \t\t\tif (NO_ACCESS != accessMode) {\n-\t\t\t\t/* target class should always be accessible to the lookup class when they are the same class */\n-\t\t\t\tif (accessClass == targetClass) {\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\tint modifiers = targetClass.getModifiers();\n-\t\t\t\t\n-\t\t\t\t/* A protected class (must be a member class) is compiled to a public class as\n-\t\t\t\t * the protected flag of this class doesn't exist on the VM level (there is no \n-\t\t\t\t * access flag in the binary form representing 'protected')\n-\t\t\t\t */\n-\t\t\t\tif (Modifier.isPublic(modifiers) || Modifier.isProtected(modifiers)) {\n-\t\t\t\t\t/* Already determined that we have more than \"no access\" (public access) */\n+\t\t\t\tint targetClassModifiers = targetClass.getModifiers();\n+\t\t\t\t/*[IF Java14]*/\n+\t\t\t\tModule accessModule = accessClass.getModule();\n+\t\t\t\tModule targetModule = targetClass.getModule();\n+\t\t\t\tString targetClassPackageName = targetClass.getPackageName();\n+\n+\t\t\t\tif (((UNCONDITIONAL & accessMode) == UNCONDITIONAL)\n+\t\t\t\t\t&& (Modifier.isPublic(targetClassModifiers) || Modifier.isProtected(targetClassModifiers))\n+\t\t\t\t\t&& targetModule.isExported(targetClassPackageName)\n+\t\t\t\t) {\n \t\t\t\t\treturn;\n-\t\t\t\t} else {\n-\t\t\t\t\tif (((PACKAGE == (accessMode & PACKAGE)) || Modifier.isPrivate(accessMode)) && isSamePackage(accessClass, targetClass)) {\n+\t\t\t\t} else if ((targetModule != null) && (accessModule != null) \n+\t\t\t\t\t\t&& (accessModule.equals(targetModule) || (!accessModule.isNamed() && !targetModule.isNamed()))\n+\t\t\t\t) {\n+\t\t\t\t\tif (((PRIVATE & accessMode) == PRIVATE)\n+\t\t\t\t\t\t&& ((targetClass == accessClass) || targetClass.isNestmateOf(accessClass))\n+\t\t\t\t\t) {\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t} else if (((PACKAGE & accessMode) == PACKAGE) && isSamePackage(targetClass, accessClass)) {\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t} else if (((MODULE & accessMode) == MODULE)\n+\t\t\t\t\t\t&& (Modifier.isPublic(targetClassModifiers) || Modifier.isProtected(targetClassModifiers))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd6f62fa41d798c471298ee9f0b75576294d96c6"}, "originalPosition": 176}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5ODcxNjYz", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#pullrequestreview-369871663", "createdAt": "2020-03-05T19:58:36Z", "commit": {"oid": "fd6f62fa41d798c471298ee9f0b75576294d96c6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTo1ODozNlrOFyh_LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTo1ODozNlrOFyh_LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUyOTk2NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t\t\t&& (Modifier.isPublic(targetClassModifiers) || Modifier.isProtected(targetClassModifiers))\n          \n          \n            \n            \t\t\t\t\t\t&& (targetClassIsPublic)", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#discussion_r388529964", "createdAt": "2020-03-05T19:58:36Z", "author": {"login": "DanHeidinga"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -535,28 +568,67 @@ private void checkAccess(Class<?> definingClass, Class<?> referenceClass, String\n \t\t */\n \t\tprivate void checkClassAccess(Class<?> targetClass) throws IllegalAccessException {\n \t\t\t/*[IF Sidecar19-SE]*/\n+\t\t\t/*[IF Java14]*/\n+\t\t\tcheckClassModuleVisibility(accessMode, accessClass, prevAccessClass, targetClass);\n+\t\t\t/*[ELSE]*/\n \t\t\tcheckClassModuleVisibility(accessMode, accessClass.getModule(), targetClass);\n+\t\t\t/*[ENDIF] Java14*/\n \t\t\t/*[ENDIF]*/\n+\t\t\t\n \t\t\tif (NO_ACCESS != accessMode) {\n-\t\t\t\t/* target class should always be accessible to the lookup class when they are the same class */\n-\t\t\t\tif (accessClass == targetClass) {\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\tint modifiers = targetClass.getModifiers();\n-\t\t\t\t\n-\t\t\t\t/* A protected class (must be a member class) is compiled to a public class as\n-\t\t\t\t * the protected flag of this class doesn't exist on the VM level (there is no \n-\t\t\t\t * access flag in the binary form representing 'protected')\n-\t\t\t\t */\n-\t\t\t\tif (Modifier.isPublic(modifiers) || Modifier.isProtected(modifiers)) {\n-\t\t\t\t\t/* Already determined that we have more than \"no access\" (public access) */\n+\t\t\t\tint targetClassModifiers = targetClass.getModifiers();\n+\t\t\t\t/*[IF Java14]*/\n+\t\t\t\tModule accessModule = accessClass.getModule();\n+\t\t\t\tModule targetModule = targetClass.getModule();\n+\t\t\t\tString targetClassPackageName = targetClass.getPackageName();\n+\n+\t\t\t\tif (((UNCONDITIONAL & accessMode) == UNCONDITIONAL)\n+\t\t\t\t\t&& (Modifier.isPublic(targetClassModifiers) || Modifier.isProtected(targetClassModifiers))\n+\t\t\t\t\t&& targetModule.isExported(targetClassPackageName)\n+\t\t\t\t) {\n \t\t\t\t\treturn;\n-\t\t\t\t} else {\n-\t\t\t\t\tif (((PACKAGE == (accessMode & PACKAGE)) || Modifier.isPrivate(accessMode)) && isSamePackage(accessClass, targetClass)) {\n+\t\t\t\t} else if ((targetModule != null) && (accessModule != null) \n+\t\t\t\t\t\t&& (accessModule.equals(targetModule) || (!accessModule.isNamed() && !targetModule.isNamed()))\n+\t\t\t\t) {\n+\t\t\t\t\tif (((PRIVATE & accessMode) == PRIVATE)\n+\t\t\t\t\t\t&& ((targetClass == accessClass) || targetClass.isNestmateOf(accessClass))\n+\t\t\t\t\t) {\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t} else if (((PACKAGE & accessMode) == PACKAGE) && isSamePackage(targetClass, accessClass)) {\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t} else if (((MODULE & accessMode) == MODULE)\n+\t\t\t\t\t\t&& (Modifier.isPublic(targetClassModifiers) || Modifier.isProtected(targetClassModifiers))\n+\t\t\t\t\t) {\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t} else if (((PUBLIC & accessMode) == PUBLIC)\n+\t\t\t\t\t\t&& (Modifier.isPublic(targetClassModifiers) || Modifier.isProtected(targetClassModifiers))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd6f62fa41d798c471298ee9f0b75576294d96c6"}, "originalPosition": 180}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fd6f62fa41d798c471298ee9f0b75576294d96c6", "author": {"user": {"login": "ChengJin01", "name": "Cheng Jin"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/fd6f62fa41d798c471298ee9f0b75576294d96c6", "committedDate": "2020-03-05T18:16:45Z", "message": "Update the Lookup specific code against the JDK14 Spec\n\nThe change is to update the code related to MH.Lookup\nto deal with the change of the full privilege access\nand the new concept called previous lookup class introduced\nin JDK14.\n\nFixes: #8570, Fixes: #8571\n\nSigned-off-by: Cheng Jin <jincheng@ca.ibm.com>"}, "afterCommit": {"oid": "2951b122838d308cad558600d5a76b8df0a047ab", "author": {"user": {"login": "ChengJin01", "name": "Cheng Jin"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/2951b122838d308cad558600d5a76b8df0a047ab", "committedDate": "2020-03-05T20:51:03Z", "message": "Update the Lookup specific code against the JDK14 Spec\n\nThe change is to update the code related to MH.Lookup\nto deal with the change of the full privilege access\nand the new concept called previous lookup class introduced\nin JDK14.\n\nFixes: #8570, Fixes: #8571\n\nSigned-off-by: Cheng Jin <jincheng@ca.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d59e822645c3335c4dd726144b3a4a333893cc8", "author": {"user": {"login": "ChengJin01", "name": "Cheng Jin"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/9d59e822645c3335c4dd726144b3a4a333893cc8", "committedDate": "2020-03-05T21:12:34Z", "message": "Update the Lookup specific code against the JDK14 Spec\n\nThe change is to update the code related to MH.Lookup\nto deal with the change of the full privilege access\nand the new concept called previous lookup class introduced\nin JDK14.\n\nFixes: #8570, Fixes: #8571\n\nSigned-off-by: Cheng Jin <jincheng@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2951b122838d308cad558600d5a76b8df0a047ab", "author": {"user": {"login": "ChengJin01", "name": "Cheng Jin"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/2951b122838d308cad558600d5a76b8df0a047ab", "committedDate": "2020-03-05T20:51:03Z", "message": "Update the Lookup specific code against the JDK14 Spec\n\nThe change is to update the code related to MH.Lookup\nto deal with the change of the full privilege access\nand the new concept called previous lookup class introduced\nin JDK14.\n\nFixes: #8570, Fixes: #8571\n\nSigned-off-by: Cheng Jin <jincheng@ca.ibm.com>"}, "afterCommit": {"oid": "9d59e822645c3335c4dd726144b3a4a333893cc8", "author": {"user": {"login": "ChengJin01", "name": "Cheng Jin"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/9d59e822645c3335c4dd726144b3a4a333893cc8", "committedDate": "2020-03-05T21:12:34Z", "message": "Update the Lookup specific code against the JDK14 Spec\n\nThe change is to update the code related to MH.Lookup\nto deal with the change of the full privilege access\nand the new concept called previous lookup class introduced\nin JDK14.\n\nFixes: #8570, Fixes: #8571\n\nSigned-off-by: Cheng Jin <jincheng@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNDY3NjIx", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#pullrequestreview-370467621", "createdAt": "2020-03-06T16:45:40Z", "commit": {"oid": "9d59e822645c3335c4dd726144b3a4a333893cc8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 603, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}