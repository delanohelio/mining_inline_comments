{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2NzU2MDM0", "number": 8830, "title": "Improve overflow checking in String classes", "bodyText": "fix char array length computation to handle Integer.MAX_VALUE\ncheck length in private String constructors\ncheck length in String.concat()\ncheck length in String.repeat()\ncheck length in String.replace(CharSequence, CharSequence)\nuse StringUTF16.newBytesFor() to allocate byte arrays for jdk11+ uncompressed strings\ncompare chars with 255 consistently (not 256 some places)\nmake private methods static where possible\navoid using intrinsics if byte count would exceed Integer.MAX_VALUE", "createdAt": "2020-03-11T15:22:34Z", "url": "https://github.com/eclipse-openj9/openj9/pull/8830", "merged": true, "mergeCommit": {"oid": "b0716f06a5c21a85c0c0481ac2f8e6660339d848"}, "closed": true, "closedAt": "2020-03-13T02:49:18Z", "author": {"login": "keithc-ca"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcMo4Y1AFqTM3Mjg3MDk0OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcNHLqHAFqTM3NDAxNjIzNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyODcwOTQ4", "url": "https://github.com/eclipse-openj9/openj9/pull/8830#pullrequestreview-372870948", "createdAt": "2020-03-11T15:30:28Z", "commit": {"oid": "ad295e8e75025dc31e440cdd5887a25b7b331ac6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNTozMDoyOFrOF08RCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNTozMDoyOFrOF08RCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA1NzY3NQ==", "bodyText": "Just noting that this looks like a small method and should get inlined, but it is not a guarantee. @cathyzhyi should we consider adding this to the always worth inlining list?", "url": "https://github.com/eclipse-openj9/openj9/pull/8830#discussion_r391057675", "createdAt": "2020-03-11T15:30:28Z", "author": {"login": "fjeremic"}, "path": "jcl/src/java.base/share/classes/java/lang/String.java", "diffHunk": "@@ -686,7 +690,7 @@ private String(String s, char c) {\n \n \t\t\thelpers.putByteInArrayByIndex(value, slen, (byte) c);\n \t\t} else {\n-\t\t\tvalue = new byte[concatlen * 2];\n+\t\t\tvalue = StringUTF16.newBytesFor(concatlen);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad295e8e75025dc31e440cdd5887a25b7b331ac6"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyOTAzNjQy", "url": "https://github.com/eclipse-openj9/openj9/pull/8830#pullrequestreview-372903642", "createdAt": "2020-03-11T16:04:44Z", "commit": {"oid": "ad295e8e75025dc31e440cdd5887a25b7b331ac6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNjowNDo0NVrOF093Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNjowNDo0NVrOF093Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA4MzgyMg==", "bodyText": "@fjeremic Does this helper method treat the third parameter as unsigned? If not, there's potential for overflow here because in Java 8, strings can be longer than Integer.MAX_VALUE / 2 characters.", "url": "https://github.com/eclipse-openj9/openj9/pull/8830#discussion_r391083822", "createdAt": "2020-03-11T16:04:45Z", "author": {"login": "keithc-ca"}, "path": "jcl/src/java.base/share/classes/java/lang/String.java", "diffHunk": "@@ -7070,13 +7139,13 @@ public String toUpperCase(Locale locale) {\n \t\t\tint sLength = lengthInternal();\n \n \t\t\tif (enableCompression && (null == compressionFlag || count >= 0)) {\n-\t\t\t\tchar[] output = new char[(sLength + 1) / 2];\n-\t\t\t\tif (helpers.toUpperIntrinsicLatin1(value, output, sLength)){\n+\t\t\t\tchar[] output = new char[(sLength + 1) >>> 1];\n+\t\t\t\tif (helpers.toUpperIntrinsicLatin1(value, output, sLength)) {\n \t\t\t\t\treturn new String(output, 0, sLength, true);\n \t\t\t\t}\n \t\t\t} else {\n \t\t\t\tchar[] output = new char[sLength];\n-\t\t\t\tif (helpers.toUpperIntrinsicUTF16(value, output, sLength * 2)){\n+\t\t\t\tif (helpers.toUpperIntrinsicUTF16(value, output, sLength * 2)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad295e8e75025dc31e440cdd5887a25b7b331ac6"}, "originalPosition": 675}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczMTExNjI0", "url": "https://github.com/eclipse-openj9/openj9/pull/8830#pullrequestreview-373111624", "createdAt": "2020-03-11T20:44:06Z", "commit": {"oid": "d41c2db74ee0f66b403c47e704055a2078a9a45e"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMDo0NDowN1rOF1IcGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMDo0ODo0NFrOF1IksA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI1NzExMg==", "bodyText": "Need to double check returning the identical string is appropriate here.", "url": "https://github.com/eclipse-openj9/openj9/pull/8830#discussion_r391257112", "createdAt": "2020-03-11T20:44:07Z", "author": {"login": "pshipton"}, "path": "jcl/src/java.base/share/classes/java/lang/String.java", "diffHunk": "@@ -3614,7 +3642,20 @@ public String replace(CharSequence sequence1, CharSequence sequence2) {\n \t\tint sequence1len = sequence1.length();\n \n \t\tif (sequence1len == 0) {\n-\t\t\tStringBuilder builder = new StringBuilder((len + 1) * sequence2.length());\n+\t\t\tint sequence2len = sequence2.length();\n+\n+\t\t\tif (sequence2len == 0) {\n+\t\t\t\treturn this;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d41c2db74ee0f66b403c47e704055a2078a9a45e"}, "originalPosition": 312}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI1OTMxMg==", "bodyText": "Please bracket for easier readability.", "url": "https://github.com/eclipse-openj9/openj9/pull/8830#discussion_r391259312", "createdAt": "2020-03-11T20:48:44Z", "author": {"login": "pshipton"}, "path": "jcl/src/java.base/share/classes/java/lang/String.java", "diffHunk": "@@ -3614,7 +3642,20 @@ public String replace(CharSequence sequence1, CharSequence sequence2) {\n \t\tint sequence1len = sequence1.length();\n \n \t\tif (sequence1len == 0) {\n-\t\t\tStringBuilder builder = new StringBuilder((len + 1) * sequence2.length());\n+\t\t\tint sequence2len = sequence2.length();\n+\n+\t\t\tif (sequence2len == 0) {\n+\t\t\t\treturn this;\n+\t\t\t}\n+\n+\t\t\tint tooManyCopies = (Integer.MAX_VALUE - len) / sequence2len;\n+\n+\t\t\tif (len >= tooManyCopies) {\n+\t\t\t\t/*[MSG \"K0D01\", \"Array capacity exceeded\"]*/\n+\t\t\t\tthrow new OutOfMemoryError(com.ibm.oti.util.Msg.getString(\"K0D01\")); //$NON-NLS-1$\n+\t\t\t}\n+\n+\t\t\tStringBuilder builder = new StringBuilder(len + (len + 1) * sequence2len);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d41c2db74ee0f66b403c47e704055a2078a9a45e"}, "originalPosition": 322}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczNTkzNzgw", "url": "https://github.com/eclipse-openj9/openj9/pull/8830#pullrequestreview-373593780", "createdAt": "2020-03-12T14:16:04Z", "commit": {"oid": "d41c2db74ee0f66b403c47e704055a2078a9a45e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dfa60abd2baf5ebc4a043de1b4665af349d01b61", "author": {"user": {"login": "keithc-ca", "name": "Keith W. Campbell"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/dfa60abd2baf5ebc4a043de1b4665af349d01b61", "committedDate": "2020-03-12T17:25:14Z", "message": "Improve overflow checking in String classes\n\n* fix char array length computation to handle Integer.MAX_VALUE\n\n* check length in private String constructors\n\n* check length in String.concat()\n\n* check length in String.repeat()\n\n* check length in String.replace(CharSequence, CharSequence)\n\n* use StringUTF16.newBytesFor() to allocate byte arrays for jdk11+\n  uncompressed strings\n\n* compare chars with 255 consistently (not 256 some places)\n\n* make private methods static where possible\n\n* avoid using intrinsics if byte count would exceed Integer.MAX_VALUE\n\nSigned-off-by: Keith W. Campbell <keithc@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2dd9d879b61a0cf922e73dcc6928c857bf18c5d0", "author": {"user": {"login": "keithc-ca", "name": "Keith W. Campbell"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/2dd9d879b61a0cf922e73dcc6928c857bf18c5d0", "committedDate": "2020-03-12T17:21:42Z", "message": "More parentheses\n\nSigned-off-by: Keith W. Campbell <keithc@ca.ibm.com>"}, "afterCommit": {"oid": "dfa60abd2baf5ebc4a043de1b4665af349d01b61", "author": {"user": {"login": "keithc-ca", "name": "Keith W. Campbell"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/dfa60abd2baf5ebc4a043de1b4665af349d01b61", "committedDate": "2020-03-12T17:25:14Z", "message": "Improve overflow checking in String classes\n\n* fix char array length computation to handle Integer.MAX_VALUE\n\n* check length in private String constructors\n\n* check length in String.concat()\n\n* check length in String.repeat()\n\n* check length in String.replace(CharSequence, CharSequence)\n\n* use StringUTF16.newBytesFor() to allocate byte arrays for jdk11+\n  uncompressed strings\n\n* compare chars with 255 consistently (not 256 some places)\n\n* make private methods static where possible\n\n* avoid using intrinsics if byte count would exceed Integer.MAX_VALUE\n\nSigned-off-by: Keith W. Campbell <keithc@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0MDE2MjM2", "url": "https://github.com/eclipse-openj9/openj9/pull/8830#pullrequestreview-374016236", "createdAt": "2020-03-13T02:49:10Z", "commit": {"oid": "dfa60abd2baf5ebc4a043de1b4665af349d01b61"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 465, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}