{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzMjA4OTM5", "number": 11061, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxOTozOTo1NFrOEz7xVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMDo1NDozNlrOE4WbtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyODkyMTE5OnYy", "diffSide": "RIGHT", "path": "jcl/src/java.base/share/classes/java/lang/String.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxOTozOTo1NFrOHrdjJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxOTo0OToyMlrOHreBxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTMzNDk0OA==", "bodyText": "I expect the compareValue(int codepoint) code should be the same logic as compareValue(char c). It should either compare with 128, or the check against 128 should be removed here.\n@fjeremic  any JIT opinions?", "url": "https://github.com/eclipse-openj9/openj9/pull/11061#discussion_r515334948", "createdAt": "2020-10-30T19:39:54Z", "author": {"login": "pshipton"}, "path": "jcl/src/java.base/share/classes/java/lang/String.java", "diffHunk": "@@ -1429,6 +1429,14 @@ public int compareTo(String string) {\n \t\treturn s1len - s2len;\n \t}\n \n+\tprivate int compareValue(int codepoint) {\n+\t\tif ('A' <= codepoint && codepoint <= 'Z') {\n+\t\t\treturn codepoint + ('a' - 'A');\n+\t\t}\n+\n+\t\treturn Character.toLowerCase(Character.toUpperCase(codepoint));\n+\t}\n+\n \tprivate char compareValue(char c) {\n \t\tif (c < 128) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f5c2fdec582bcf352041c912c5c999028ba5596"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTMzODIxMw==", "bodyText": "Int is signed vs char which is unsigned, so you'd have to check greater than 0 too, at which point you have two checks already, which is the same number as the 'A' <= codepoint && codepoint <= 'Z' check below. That was my reasoning for removing it for compareValue(int codepoint).", "url": "https://github.com/eclipse-openj9/openj9/pull/11061#discussion_r515338213", "createdAt": "2020-10-30T19:43:54Z", "author": {"login": "mikezhang1234567890"}, "path": "jcl/src/java.base/share/classes/java/lang/String.java", "diffHunk": "@@ -1429,6 +1429,14 @@ public int compareTo(String string) {\n \t\treturn s1len - s2len;\n \t}\n \n+\tprivate int compareValue(int codepoint) {\n+\t\tif ('A' <= codepoint && codepoint <= 'Z') {\n+\t\t\treturn codepoint + ('a' - 'A');\n+\t\t}\n+\n+\t\treturn Character.toLowerCase(Character.toUpperCase(codepoint));\n+\t}\n+\n \tprivate char compareValue(char c) {\n \t\tif (c < 128) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTMzNDk0OA=="}, "originalCommit": {"oid": "6f5c2fdec582bcf352041c912c5c999028ba5596"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM0Mjc4OA==", "bodyText": "I think we should remove the if (c < 128) check in this API. The JIT will fold it away anyways since the if ('A' <= c && c <= 'Z') { is a stronger condition, but the method size will be inflated to the inliner, so getting rid of it in code is the best thing we can do.", "url": "https://github.com/eclipse-openj9/openj9/pull/11061#discussion_r515342788", "createdAt": "2020-10-30T19:49:22Z", "author": {"login": "fjeremic"}, "path": "jcl/src/java.base/share/classes/java/lang/String.java", "diffHunk": "@@ -1429,6 +1429,14 @@ public int compareTo(String string) {\n \t\treturn s1len - s2len;\n \t}\n \n+\tprivate int compareValue(int codepoint) {\n+\t\tif ('A' <= codepoint && codepoint <= 'Z') {\n+\t\t\treturn codepoint + ('a' - 'A');\n+\t\t}\n+\n+\t\treturn Character.toLowerCase(Character.toUpperCase(codepoint));\n+\t}\n+\n \tprivate char compareValue(char c) {\n \t\tif (c < 128) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTMzNDk0OA=="}, "originalCommit": {"oid": "6f5c2fdec582bcf352041c912c5c999028ba5596"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyODk3NTEyOnYy", "diffSide": "RIGHT", "path": "jcl/src/java.base/share/classes/java/lang/String.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxOTo1MTozMlrOHreFjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMDoxMTozMVrOHreobA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM0Mzc1Ng==", "bodyText": "Shouldn't this be doing Character.toUpperCase(Character.toLowerCase(codepoint)) similarly to compareValue()?", "url": "https://github.com/eclipse-openj9/openj9/pull/11061#discussion_r515343756", "createdAt": "2020-10-30T19:51:32Z", "author": {"login": "pshipton"}, "path": "jcl/src/java.base/share/classes/java/lang/String.java", "diffHunk": "@@ -1771,14 +1793,25 @@ public boolean equalsIgnoreCase(String string) {\n \n \t\t\tif (charAtO1Last != charAtO2Last &&\n \t\t\t\t\ttoUpperCase(charAtO1Last) != toUpperCase(charAtO2Last) &&\n-\t\t\t\t\t((charAtO1Last <= 255 && charAtO2Last <= 255) || Character.toLowerCase(charAtO1Last) != Character.toLowerCase(charAtO2Last))) {\n+\t\t\t\t\t((charAtO1Last <= 255 && charAtO2Last <= 255) || Character.toLowerCase(charAtO1Last) != Character.toLowerCase(charAtO2Last)) &&\n+\t\t\t\t\t(!Character.isLowSurrogate(charAtO1Last) || !Character.isLowSurrogate(charAtO2Last))) {\n \t\t\t\treturn false;\n \t\t\t}\n \n \t\t\twhile (o1 < end - 1) {\n \t\t\t\tchar charAtO1 = s1.charAtInternal(o1++, s1Value);\n \t\t\t\tchar charAtO2 = s2.charAtInternal(o2++, s2Value);\n \n+\t\t\t\t/*[IF Java16]*/\n+\t\t\t\tif (Character.isHighSurrogate(charAtO1) && Character.isHighSurrogate(charAtO2)) {\n+\t\t\t\t\tint codepointAtO1 = Character.toCodePoint(charAtO1, s1.charAtInternal(o1++, s1Value));\n+\t\t\t\t\tint codepointAtO2 = Character.toCodePoint(charAtO2, s2.charAtInternal(o2++, s2Value));\n+\t\t\t\t\tif ((codepointAtO1 != codepointAtO2) && (Character.toUpperCase(codepointAtO1) != Character.toUpperCase(codepointAtO2))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f5c2fdec582bcf352041c912c5c999028ba5596"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM1MjY4NA==", "bodyText": "Yes, will fix here and in regionMatches.", "url": "https://github.com/eclipse-openj9/openj9/pull/11061#discussion_r515352684", "createdAt": "2020-10-30T20:11:31Z", "author": {"login": "mikezhang1234567890"}, "path": "jcl/src/java.base/share/classes/java/lang/String.java", "diffHunk": "@@ -1771,14 +1793,25 @@ public boolean equalsIgnoreCase(String string) {\n \n \t\t\tif (charAtO1Last != charAtO2Last &&\n \t\t\t\t\ttoUpperCase(charAtO1Last) != toUpperCase(charAtO2Last) &&\n-\t\t\t\t\t((charAtO1Last <= 255 && charAtO2Last <= 255) || Character.toLowerCase(charAtO1Last) != Character.toLowerCase(charAtO2Last))) {\n+\t\t\t\t\t((charAtO1Last <= 255 && charAtO2Last <= 255) || Character.toLowerCase(charAtO1Last) != Character.toLowerCase(charAtO2Last)) &&\n+\t\t\t\t\t(!Character.isLowSurrogate(charAtO1Last) || !Character.isLowSurrogate(charAtO2Last))) {\n \t\t\t\treturn false;\n \t\t\t}\n \n \t\t\twhile (o1 < end - 1) {\n \t\t\t\tchar charAtO1 = s1.charAtInternal(o1++, s1Value);\n \t\t\t\tchar charAtO2 = s2.charAtInternal(o2++, s2Value);\n \n+\t\t\t\t/*[IF Java16]*/\n+\t\t\t\tif (Character.isHighSurrogate(charAtO1) && Character.isHighSurrogate(charAtO2)) {\n+\t\t\t\t\tint codepointAtO1 = Character.toCodePoint(charAtO1, s1.charAtInternal(o1++, s1Value));\n+\t\t\t\t\tint codepointAtO2 = Character.toCodePoint(charAtO2, s2.charAtInternal(o2++, s2Value));\n+\t\t\t\t\tif ((codepointAtO1 != codepointAtO2) && (Character.toUpperCase(codepointAtO1) != Character.toUpperCase(codepointAtO2))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM0Mzc1Ng=="}, "originalCommit": {"oid": "6f5c2fdec582bcf352041c912c5c999028ba5596"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MDU5MTc3OnYy", "diffSide": "RIGHT", "path": "jcl/src/java.base/share/classes/java/lang/String.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMzowOTo0M1rOHxhkUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMDo0NDo0NFrOHyNqzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY5MjI0MQ==", "bodyText": "I think this should be included for Java16+ only.", "url": "https://github.com/eclipse-openj9/openj9/pull/11061#discussion_r521692241", "createdAt": "2020-11-11T23:09:43Z", "author": {"login": "pshipton"}, "path": "jcl/src/java.base/share/classes/java/lang/String.java", "diffHunk": "@@ -1771,14 +1791,25 @@ public boolean equalsIgnoreCase(String string) {\n \n \t\t\tif (charAtO1Last != charAtO2Last &&\n \t\t\t\t\ttoUpperCase(charAtO1Last) != toUpperCase(charAtO2Last) &&\n-\t\t\t\t\t((charAtO1Last <= 255 && charAtO2Last <= 255) || Character.toLowerCase(charAtO1Last) != Character.toLowerCase(charAtO2Last))) {\n+\t\t\t\t\t((charAtO1Last <= 255 && charAtO2Last <= 255) || Character.toLowerCase(charAtO1Last) != Character.toLowerCase(charAtO2Last)) &&\n+\t\t\t\t\t(!Character.isLowSurrogate(charAtO1Last) || !Character.isLowSurrogate(charAtO2Last))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7eda4861d5f4c2766d45337a102d43f7afeebf89"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY5NDUxNA==", "bodyText": "I think there is a problem here for Java 16+. If the last character is a low surrogate, then it's not checked for equality here. If the character proceeding it isn't a high surrogate, true can be returned even when the characters are different.", "url": "https://github.com/eclipse-openj9/openj9/pull/11061#discussion_r521694514", "createdAt": "2020-11-11T23:16:26Z", "author": {"login": "pshipton"}, "path": "jcl/src/java.base/share/classes/java/lang/String.java", "diffHunk": "@@ -1771,14 +1791,25 @@ public boolean equalsIgnoreCase(String string) {\n \n \t\t\tif (charAtO1Last != charAtO2Last &&\n \t\t\t\t\ttoUpperCase(charAtO1Last) != toUpperCase(charAtO2Last) &&\n-\t\t\t\t\t((charAtO1Last <= 255 && charAtO2Last <= 255) || Character.toLowerCase(charAtO1Last) != Character.toLowerCase(charAtO2Last))) {\n+\t\t\t\t\t((charAtO1Last <= 255 && charAtO2Last <= 255) || Character.toLowerCase(charAtO1Last) != Character.toLowerCase(charAtO2Last)) &&\n+\t\t\t\t\t(!Character.isLowSurrogate(charAtO1Last) || !Character.isLowSurrogate(charAtO2Last))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY5MjI0MQ=="}, "originalCommit": {"oid": "7eda4861d5f4c2766d45337a102d43f7afeebf89"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc0NDc4Nw==", "bodyText": "Pls create a test case for this case, which should fail with this code, and pass once the problem is fixed.", "url": "https://github.com/eclipse-openj9/openj9/pull/11061#discussion_r521744787", "createdAt": "2020-11-12T00:51:18Z", "author": {"login": "pshipton"}, "path": "jcl/src/java.base/share/classes/java/lang/String.java", "diffHunk": "@@ -1771,14 +1791,25 @@ public boolean equalsIgnoreCase(String string) {\n \n \t\t\tif (charAtO1Last != charAtO2Last &&\n \t\t\t\t\ttoUpperCase(charAtO1Last) != toUpperCase(charAtO2Last) &&\n-\t\t\t\t\t((charAtO1Last <= 255 && charAtO2Last <= 255) || Character.toLowerCase(charAtO1Last) != Character.toLowerCase(charAtO2Last))) {\n+\t\t\t\t\t((charAtO1Last <= 255 && charAtO2Last <= 255) || Character.toLowerCase(charAtO1Last) != Character.toLowerCase(charAtO2Last)) &&\n+\t\t\t\t\t(!Character.isLowSurrogate(charAtO1Last) || !Character.isLowSurrogate(charAtO2Last))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY5MjI0MQ=="}, "originalCommit": {"oid": "7eda4861d5f4c2766d45337a102d43f7afeebf89"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQxNDc5Ng==", "bodyText": "Updated method and included a test with low surrogate half only at the end of a string/region.", "url": "https://github.com/eclipse-openj9/openj9/pull/11061#discussion_r522414796", "createdAt": "2020-11-12T20:44:44Z", "author": {"login": "mikezhang1234567890"}, "path": "jcl/src/java.base/share/classes/java/lang/String.java", "diffHunk": "@@ -1771,14 +1791,25 @@ public boolean equalsIgnoreCase(String string) {\n \n \t\t\tif (charAtO1Last != charAtO2Last &&\n \t\t\t\t\ttoUpperCase(charAtO1Last) != toUpperCase(charAtO2Last) &&\n-\t\t\t\t\t((charAtO1Last <= 255 && charAtO2Last <= 255) || Character.toLowerCase(charAtO1Last) != Character.toLowerCase(charAtO2Last))) {\n+\t\t\t\t\t((charAtO1Last <= 255 && charAtO2Last <= 255) || Character.toLowerCase(charAtO1Last) != Character.toLowerCase(charAtO2Last)) &&\n+\t\t\t\t\t(!Character.isLowSurrogate(charAtO1Last) || !Character.isLowSurrogate(charAtO2Last))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY5MjI0MQ=="}, "originalCommit": {"oid": "7eda4861d5f4c2766d45337a102d43f7afeebf89"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NTIzMjUzOnYy", "diffSide": "RIGHT", "path": "jcl/src/java.base/share/classes/java/lang/String.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMDo1NDozNlrOHyN_fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMTozNTozOVrOHyPQXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQyMDA5Mw==", "bodyText": "Pls make the change for jdk16 only to avoid changing perf for older versions.", "url": "https://github.com/eclipse-openj9/openj9/pull/11061#discussion_r522420093", "createdAt": "2020-11-12T20:54:36Z", "author": {"login": "pshipton"}, "path": "jcl/src/java.base/share/classes/java/lang/String.java", "diffHunk": "@@ -1769,16 +1789,32 @@ public boolean equalsIgnoreCase(String string) {\n \t\t\tchar charAtO1Last = s1.charAtInternal(s1len - 1, s1Value);\n \t\t\tchar charAtO2Last = s2.charAtInternal(s1len - 1, s2Value);\n \n-\t\t\tif (charAtO1Last != charAtO2Last &&\n-\t\t\t\t\ttoUpperCase(charAtO1Last) != toUpperCase(charAtO2Last) &&\n-\t\t\t\t\t((charAtO1Last <= 255 && charAtO2Last <= 255) || Character.toLowerCase(charAtO1Last) != Character.toLowerCase(charAtO2Last))) {\n+\t\t\tif (charAtO1Last != charAtO2Last\n+\t\t\t\t\t&& toUpperCase(charAtO1Last) != toUpperCase(charAtO2Last)\n+\t\t\t\t\t&& ((charAtO1Last <= 255 && charAtO2Last <= 255) || Character.toLowerCase(charAtO1Last) != Character.toLowerCase(charAtO2Last))\n+\t\t\t\t\t/*[IF Java16]*/\n+\t\t\t\t\t&& (!Character.isLowSurrogate(charAtO1Last) || !Character.isLowSurrogate(charAtO2Last))\n+\t\t\t\t\t/*[ENDIF] Java16 */\n+\t\t\t) {\n \t\t\t\treturn false;\n \t\t\t}\n \n-\t\t\twhile (o1 < end - 1) {\n+\t\t\twhile (o1 < end) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c68d088304674e09400e60cd798fead3de0668db"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ0MDc5OA==", "bodyText": "Updated so it's for Java 16 only.", "url": "https://github.com/eclipse-openj9/openj9/pull/11061#discussion_r522440798", "createdAt": "2020-11-12T21:35:39Z", "author": {"login": "mikezhang1234567890"}, "path": "jcl/src/java.base/share/classes/java/lang/String.java", "diffHunk": "@@ -1769,16 +1789,32 @@ public boolean equalsIgnoreCase(String string) {\n \t\t\tchar charAtO1Last = s1.charAtInternal(s1len - 1, s1Value);\n \t\t\tchar charAtO2Last = s2.charAtInternal(s1len - 1, s2Value);\n \n-\t\t\tif (charAtO1Last != charAtO2Last &&\n-\t\t\t\t\ttoUpperCase(charAtO1Last) != toUpperCase(charAtO2Last) &&\n-\t\t\t\t\t((charAtO1Last <= 255 && charAtO2Last <= 255) || Character.toLowerCase(charAtO1Last) != Character.toLowerCase(charAtO2Last))) {\n+\t\t\tif (charAtO1Last != charAtO2Last\n+\t\t\t\t\t&& toUpperCase(charAtO1Last) != toUpperCase(charAtO2Last)\n+\t\t\t\t\t&& ((charAtO1Last <= 255 && charAtO2Last <= 255) || Character.toLowerCase(charAtO1Last) != Character.toLowerCase(charAtO2Last))\n+\t\t\t\t\t/*[IF Java16]*/\n+\t\t\t\t\t&& (!Character.isLowSurrogate(charAtO1Last) || !Character.isLowSurrogate(charAtO2Last))\n+\t\t\t\t\t/*[ENDIF] Java16 */\n+\t\t\t) {\n \t\t\t\treturn false;\n \t\t\t}\n \n-\t\t\twhile (o1 < end - 1) {\n+\t\t\twhile (o1 < end) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQyMDA5Mw=="}, "originalCommit": {"oid": "c68d088304674e09400e60cd798fead3de0668db"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1058, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}