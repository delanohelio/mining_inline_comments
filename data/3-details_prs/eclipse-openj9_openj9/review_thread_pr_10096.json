{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0OTg2MDA2", "number": 10096, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNToxMjowNVrOEqyeHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNDo1MTo1MVrOErpxqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzAyNTU4OnYy", "diffSide": "RIGHT", "path": "runtime/oti/vmconstantpool.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNToxMjowNVrOHdMeUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNTo0ODowMVrOHdOcKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM3NTEyMw==", "bodyText": "Why is constructorPlaceHolder needed for OJDK methodhandles?", "url": "https://github.com/eclipse-openj9/openj9/pull/10096#discussion_r500375123", "createdAt": "2020-10-06T15:12:05Z", "author": {"login": "DanHeidinga"}, "path": "runtime/oti/vmconstantpool.xml", "diffHunk": "@@ -411,13 +407,15 @@ SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-excepti\n \t<staticmethodref class=\"java/lang/J9VMInternals\" name=\"initializationAlreadyFailed\" signature=\"(Ljava/lang/Class;)V\"/>\n \t<staticmethodref class=\"java/lang/J9VMInternals\" name=\"recordInitializationFailure\" signature=\"(Ljava/lang/Class;Ljava/lang/Throwable;)V\"/>\n \n+\t<!-- Static method references needed to support OpenJ9 and OpenJDK MethodHandles. -->\n+\t<staticmethodref class=\"java/lang/invoke/MethodHandleHelper\" name=\"sendResolveMethodHandle\" signature=\"(ILjava/lang/Class;Ljava/lang/Class;Ljava/lang/String;Ljava/lang/String;Ljava/lang/ClassLoader;)Ljava/lang/invoke/MethodHandle;\" flags=\"opt_methodHandleCommon\"/>\n+\t<staticmethodref class=\"java/lang/invoke/MethodHandleHelper\" name=\"resolveInvokeDynamic\" signature=\"(JLjava/lang/String;Ljava/lang/String;J)Ljava/lang/invoke/MethodHandle;\" flags=\"opt_methodHandleCommon\"/>\n+\t<staticmethodref class=\"java/lang/invoke/MethodHandleHelper\" name=\"resolveConstantDynamic\" signature=\"(JLjava/lang/String;Ljava/lang/String;J)Ljava/lang/Object;\" versions=\"11-\" flag=\"opt_methodHandleCommon\"/>\n+\t<staticmethodref class=\"java/lang/invoke/MethodHandleHelper\" name=\"constructorPlaceHolder\" signature=\"(Ljava/lang/Object;)Ljava/lang/Object;\" flags=\"opt_methodHandleCommon\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5491e7a817b567d40b181b82d34270d3fb2c9f1"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQwNzMzNg==", "bodyText": "It's not needed for OJDK MethodHandles. But, it is a static method referred in vmconstantpool.xml. Leaving it in MethodHandle will cause JCL init issues #10637 (comment) since it won't exist in OJDK MethodHandle. So, I decided to remove all static methods, which are referred in vmconstantpool.xml, out of MethodHandle into MethodHandleHelper.\nThere is one static method (referred in vmcp.xml) pending to be moved: MH.invokeWithArgumentsHelper. It will be handled in a separate PR since it has a lot of JIT usages in OpenJ9 and OMR.", "url": "https://github.com/eclipse-openj9/openj9/pull/10096#discussion_r500407336", "createdAt": "2020-10-06T15:48:01Z", "author": {"login": "babsingh"}, "path": "runtime/oti/vmconstantpool.xml", "diffHunk": "@@ -411,13 +407,15 @@ SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-excepti\n \t<staticmethodref class=\"java/lang/J9VMInternals\" name=\"initializationAlreadyFailed\" signature=\"(Ljava/lang/Class;)V\"/>\n \t<staticmethodref class=\"java/lang/J9VMInternals\" name=\"recordInitializationFailure\" signature=\"(Ljava/lang/Class;Ljava/lang/Throwable;)V\"/>\n \n+\t<!-- Static method references needed to support OpenJ9 and OpenJDK MethodHandles. -->\n+\t<staticmethodref class=\"java/lang/invoke/MethodHandleHelper\" name=\"sendResolveMethodHandle\" signature=\"(ILjava/lang/Class;Ljava/lang/Class;Ljava/lang/String;Ljava/lang/String;Ljava/lang/ClassLoader;)Ljava/lang/invoke/MethodHandle;\" flags=\"opt_methodHandleCommon\"/>\n+\t<staticmethodref class=\"java/lang/invoke/MethodHandleHelper\" name=\"resolveInvokeDynamic\" signature=\"(JLjava/lang/String;Ljava/lang/String;J)Ljava/lang/invoke/MethodHandle;\" flags=\"opt_methodHandleCommon\"/>\n+\t<staticmethodref class=\"java/lang/invoke/MethodHandleHelper\" name=\"resolveConstantDynamic\" signature=\"(JLjava/lang/String;Ljava/lang/String;J)Ljava/lang/Object;\" versions=\"11-\" flag=\"opt_methodHandleCommon\"/>\n+\t<staticmethodref class=\"java/lang/invoke/MethodHandleHelper\" name=\"constructorPlaceHolder\" signature=\"(Ljava/lang/Object;)Ljava/lang/Object;\" flags=\"opt_methodHandleCommon\"/>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM3NTEyMw=="}, "originalCommit": {"oid": "a5491e7a817b567d40b181b82d34270d3fb2c9f1"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzA5ODU3OnYy", "diffSide": "LEFT", "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandle.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNToyNDozMlrOHdNLIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNTo0OTozMFrOHdOgfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM4NjU5NA==", "bodyText": "There are a lot of xxxxPlaceHolder methods.  Why is only this one being moved?", "url": "https://github.com/eclipse-openj9/openj9/pull/10096#discussion_r500386594", "createdAt": "2020-10-06T15:24:32Z", "author": {"login": "DanHeidinga"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandle.java", "diffHunk": "@@ -1521,19 +1052,6 @@ private MethodHandle filterArgumentsPlaceHolder(int index, int parentOffset, int\n \t\treturn this;\n \t}\n \t\n-\t/*[IF ]*/\n-\t/*\n-\t * Used to preserve the new objectRef on the stack when avoiding the call-in for\n-\t * constructorHandles.  Must return 'this' so stackmapper will keep the object\n-\t * alive.\n-\t */\n-\t/*[ENDIF]*/\n-\t@SuppressWarnings(\"unused\")\n-\t@VMCONSTANTPOOL_METHOD\n-\tprivate static Object constructorPlaceHolder(Object newObjectRef) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5491e7a817b567d40b181b82d34270d3fb2c9f1"}, "originalPosition": 510}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQwODQ0NA==", "bodyText": "Other xxxxPlaceHolder methods are non-static. Similar JCL init issues were not seen with non-static MH methods. So, only the static MH.constructorPlaceHolder is being moved.", "url": "https://github.com/eclipse-openj9/openj9/pull/10096#discussion_r500408444", "createdAt": "2020-10-06T15:49:30Z", "author": {"login": "babsingh"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandle.java", "diffHunk": "@@ -1521,19 +1052,6 @@ private MethodHandle filterArgumentsPlaceHolder(int index, int parentOffset, int\n \t\treturn this;\n \t}\n \t\n-\t/*[IF ]*/\n-\t/*\n-\t * Used to preserve the new objectRef on the stack when avoiding the call-in for\n-\t * constructorHandles.  Must return 'this' so stackmapper will keep the object\n-\t * alive.\n-\t */\n-\t/*[ENDIF]*/\n-\t@SuppressWarnings(\"unused\")\n-\t@VMCONSTANTPOOL_METHOD\n-\tprivate static Object constructorPlaceHolder(Object newObjectRef) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM4NjU5NA=="}, "originalCommit": {"oid": "a5491e7a817b567d40b181b82d34270d3fb2c9f1"}, "originalPosition": 510}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzA5OTk5OnYy", "diffSide": "RIGHT", "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandleHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNToyNDo0NVrOHdNMAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNTo1ODo0OFrOHdO6xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM4NjgxNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /*[INCLUDE-IF Sidecar17]*/\n          \n          \n            \n            /*[INCLUDE-IF Sidecar18]*/", "url": "https://github.com/eclipse-openj9/openj9/pull/10096#discussion_r500386817", "createdAt": "2020-10-06T15:24:45Z", "author": {"login": "DanHeidinga"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandleHelper.java", "diffHunk": "@@ -0,0 +1,528 @@\n+/*[INCLUDE-IF Sidecar17]*/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5491e7a817b567d40b181b82d34270d3fb2c9f1"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQxNTE3NQ==", "bodyText": "Updated.", "url": "https://github.com/eclipse-openj9/openj9/pull/10096#discussion_r500415175", "createdAt": "2020-10-06T15:58:48Z", "author": {"login": "babsingh"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandleHelper.java", "diffHunk": "@@ -0,0 +1,528 @@\n+/*[INCLUDE-IF Sidecar17]*/", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM4NjgxNw=="}, "originalCommit": {"oid": "a5491e7a817b567d40b181b82d34270d3fb2c9f1"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MjA4NjgxOnYy", "diffSide": "RIGHT", "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandleHelper.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNDo1MTo1MVrOHeih0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNToyMDoyMVrOHej1rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc4NTA0MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public final class MethodHandleHelper {\n          \n          \n            \n            final class MethodHandleHelper {\n          \n      \n    \n    \n  \n\nNeeds to be package protected.\nThis PR is already tested. Shall I update this PR or do this change in a follow-up PR?", "url": "https://github.com/eclipse-openj9/openj9/pull/10096#discussion_r501785040", "createdAt": "2020-10-08T14:51:51Z", "author": {"login": "babsingh"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandleHelper.java", "diffHunk": "@@ -0,0 +1,528 @@\n+/*[INCLUDE-IF Sidecar18-SE]*/\n+/*******************************************************************************\n+ * Copyright (c) 2020, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+package java.lang.invoke;\n+\n+import java.lang.invoke.MethodHandles.Lookup;\n+import java.util.ArrayList;\n+import java.util.Objects;\n+\n+import com.ibm.oti.util.Msg;\n+import com.ibm.oti.vm.VM;\n+import com.ibm.oti.vm.VMLangAccess;\n+\n+/*[IF Sidecar19-SE]\n+import jdk.internal.misc.Unsafe;\n+import jdk.internal.reflect.ConstantPool;\n+/*[ELSE]*/\n+import sun.misc.Unsafe;\n+import sun.reflect.ConstantPool;\n+/*[ENDIF]*/\n+\n+import com.ibm.jit.JITHelpers;\n+\n+/**\n+ * Static methods for the MethodHandle class.\n+ */\n+public final class MethodHandleHelper {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e274536005daa55bb555e1abedb16aeaaca3abd8"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc4OTU3OQ==", "bodyText": "in this PR please.  We'll rerun tests as required - likely only a single platform", "url": "https://github.com/eclipse-openj9/openj9/pull/10096#discussion_r501789579", "createdAt": "2020-10-08T14:57:37Z", "author": {"login": "DanHeidinga"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandleHelper.java", "diffHunk": "@@ -0,0 +1,528 @@\n+/*[INCLUDE-IF Sidecar18-SE]*/\n+/*******************************************************************************\n+ * Copyright (c) 2020, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+package java.lang.invoke;\n+\n+import java.lang.invoke.MethodHandles.Lookup;\n+import java.util.ArrayList;\n+import java.util.Objects;\n+\n+import com.ibm.oti.util.Msg;\n+import com.ibm.oti.vm.VM;\n+import com.ibm.oti.vm.VMLangAccess;\n+\n+/*[IF Sidecar19-SE]\n+import jdk.internal.misc.Unsafe;\n+import jdk.internal.reflect.ConstantPool;\n+/*[ELSE]*/\n+import sun.misc.Unsafe;\n+import sun.reflect.ConstantPool;\n+/*[ENDIF]*/\n+\n+import com.ibm.jit.JITHelpers;\n+\n+/**\n+ * Static methods for the MethodHandle class.\n+ */\n+public final class MethodHandleHelper {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc4NTA0MA=="}, "originalCommit": {"oid": "e274536005daa55bb555e1abedb16aeaaca3abd8"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgwNjUxMA==", "bodyText": "Updated.", "url": "https://github.com/eclipse-openj9/openj9/pull/10096#discussion_r501806510", "createdAt": "2020-10-08T15:20:21Z", "author": {"login": "babsingh"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandleHelper.java", "diffHunk": "@@ -0,0 +1,528 @@\n+/*[INCLUDE-IF Sidecar18-SE]*/\n+/*******************************************************************************\n+ * Copyright (c) 2020, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+package java.lang.invoke;\n+\n+import java.lang.invoke.MethodHandles.Lookup;\n+import java.util.ArrayList;\n+import java.util.Objects;\n+\n+import com.ibm.oti.util.Msg;\n+import com.ibm.oti.vm.VM;\n+import com.ibm.oti.vm.VMLangAccess;\n+\n+/*[IF Sidecar19-SE]\n+import jdk.internal.misc.Unsafe;\n+import jdk.internal.reflect.ConstantPool;\n+/*[ELSE]*/\n+import sun.misc.Unsafe;\n+import sun.reflect.ConstantPool;\n+/*[ENDIF]*/\n+\n+import com.ibm.jit.JITHelpers;\n+\n+/**\n+ * Static methods for the MethodHandle class.\n+ */\n+public final class MethodHandleHelper {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc4NTA0MA=="}, "originalCommit": {"oid": "e274536005daa55bb555e1abedb16aeaaca3abd8"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4908, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}