{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3Mjg3NjIz", "number": 10779, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMzowMDo0M1rOEqTpzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzoxMDoxNVrOEq1x9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNzk3NjQ3OnYy", "diffSide": "RIGHT", "path": "buildenv/jenkins/common/variables-functions.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMzowMDo0M1rOHcb8iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMzozMjoxNVrOHcdN_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU4MDA0MA==", "bodyText": "Not sure we'd want the env output here.  What value is having this information at this point?  There are also 2 within 5 lines.  mkdir isn't really needed.  Windows path has a mv and gzip will create the directory structure if it doesn't exist.", "url": "https://github.com/eclipse-openj9/openj9/pull/10779#discussion_r499580040", "createdAt": "2020-10-05T13:00:43Z", "author": {"login": "jdekonin"}, "path": "buildenv/jenkins/common/variables-functions.groovy", "diffHunk": "@@ -1514,33 +1514,66 @@ def create_job(JOB_NAME, SDK_VERSION, SPEC, downstreamJobType, id) {\n }\n \n def set_build_variables_per_node() {\n-    BOOT_JDK = check_path(buildspec.getScalarField('boot_jdk', SDK_VERSION), true)\n+    BOOT_JDK = buildspec.getScalarField('boot_jdk.location', SDK_VERSION)\n     println(\"BOOT_JDK: ${BOOT_JDK}\")\n-    if (!BOOT_JDK) {\n-        error(\"BOOT_JDK: ${BOOT_JDK} does not exist!\")\n+    if (!check_path(\"${BOOT_JDK}/bin/java\")) {\n+        echo \"BOOT_JDK: ${BOOT_JDK} does not exist! Attempt to download it...\"\n+        download_boot_jdk(BOOT_JDK)\n     }\n \n-    def freemarkerPath = buildspec.getScalarField('freemarker', SDK_VERSION)\n-    FREEMARKER = check_path(buildspec.getScalarField('freemarker', SDK_VERSION), false)\n+    FREEMARKER = buildspec.getScalarField('freemarker', SDK_VERSION)\n     println(\"FREEMARKER: ${FREEMARKER}\")\n-    if (!FREEMARKER) {\n+    if (!check_path(FREEMARKER)) {\n         error(\"FREEMARKER: ${FREEMARKER} does not exist!\")\n     }\n \n-    OPENJDK_REFERENCE_REPO = check_path(buildspec.getScalarField(\"openjdk_reference_repo\", SDK_VERSION), true)\n+    OPENJDK_REFERENCE_REPO = buildspec.getScalarField(\"openjdk_reference_repo\", SDK_VERSION)\n     println(\"OPENJDK_REFERENCE_REPO: ${OPENJDK_REFERENCE_REPO}\")\n-    if (!OPENJDK_REFERENCE_REPO) {\n+    if (!check_path(OPENJDK_REFERENCE_REPO)) {\n         println(\"The git cache OPENJDK_REFERENCE_REPO: ${buildspec.getScalarField('openjdk_reference_repo', SDK_VERSION)} does not exist on ${NODE_NAME}!\")\n     }\n }\n \n-def check_path(inPath, isDir) {\n+def check_path(inPath) {\n     if (!inPath) {\n-        return inPath\n+        return false\n     }\n-\n-    def testOption = (isDir) ? \"-d\" : \"-e\"\n-    return sh (script: \"test ${testOption} ${inPath} && echo ${inPath} || echo ''\", returnStdout: true).trim()\n+    return sh (script: \"test -e ${inPath} && echo true || echo false\", returnStdout: true).trim().toBoolean()\n }\n \n+def download_boot_jdk(jdkPath) {\n+    def bootJDKVersion = SDK_VERSION.toInteger() - 1\n+    if ((SDK_VERSION == '8') || (SDK_VERSION == '11')) {\n+        bootJDKVersion = SDK_VERSION\n+    }\n+    def os = buildspec.getScalarField('boot_jdk', 'os')\n+    def arch = buildspec.getScalarField('boot_jdk', 'arch')\n+    def dirStrip = buildspec.getScalarField('boot_jdk', 'dir_strip')\n+    def sdkUrl = \"https://api.adoptopenjdk.net/v3/binary/latest/${bootJDKVersion}/ga/${os}/${arch}/jdk/openj9/normal/adoptopenjdk?project=jdk\"\n+\n+    /*\n+     * Download bootjdk\n+     * Windows are zips from Adopt. Unzip doesn't have strip dir so we have to manually move.\n+     * Remaining platforms are tarballs.\n+     * Mac has some extra dirs to strip off hence $dirStrip.\n+     */\n+    dir('bootjdk') {\n+        sh \"\"\"\n+            env\n+            curl -LJkO ${sdkUrl}\n+            mkdir -p ${jdkPath}\n+            sdkFile=`ls | grep OpenJDK`\n+            env", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6c6fd7d905f07c0f8ea048f561f25c137fa9c17"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYwMDg5NA==", "bodyText": "ah, debug I forgot to remove. Will update.", "url": "https://github.com/eclipse-openj9/openj9/pull/10779#discussion_r499600894", "createdAt": "2020-10-05T13:32:15Z", "author": {"login": "AdamBrousseau"}, "path": "buildenv/jenkins/common/variables-functions.groovy", "diffHunk": "@@ -1514,33 +1514,66 @@ def create_job(JOB_NAME, SDK_VERSION, SPEC, downstreamJobType, id) {\n }\n \n def set_build_variables_per_node() {\n-    BOOT_JDK = check_path(buildspec.getScalarField('boot_jdk', SDK_VERSION), true)\n+    BOOT_JDK = buildspec.getScalarField('boot_jdk.location', SDK_VERSION)\n     println(\"BOOT_JDK: ${BOOT_JDK}\")\n-    if (!BOOT_JDK) {\n-        error(\"BOOT_JDK: ${BOOT_JDK} does not exist!\")\n+    if (!check_path(\"${BOOT_JDK}/bin/java\")) {\n+        echo \"BOOT_JDK: ${BOOT_JDK} does not exist! Attempt to download it...\"\n+        download_boot_jdk(BOOT_JDK)\n     }\n \n-    def freemarkerPath = buildspec.getScalarField('freemarker', SDK_VERSION)\n-    FREEMARKER = check_path(buildspec.getScalarField('freemarker', SDK_VERSION), false)\n+    FREEMARKER = buildspec.getScalarField('freemarker', SDK_VERSION)\n     println(\"FREEMARKER: ${FREEMARKER}\")\n-    if (!FREEMARKER) {\n+    if (!check_path(FREEMARKER)) {\n         error(\"FREEMARKER: ${FREEMARKER} does not exist!\")\n     }\n \n-    OPENJDK_REFERENCE_REPO = check_path(buildspec.getScalarField(\"openjdk_reference_repo\", SDK_VERSION), true)\n+    OPENJDK_REFERENCE_REPO = buildspec.getScalarField(\"openjdk_reference_repo\", SDK_VERSION)\n     println(\"OPENJDK_REFERENCE_REPO: ${OPENJDK_REFERENCE_REPO}\")\n-    if (!OPENJDK_REFERENCE_REPO) {\n+    if (!check_path(OPENJDK_REFERENCE_REPO)) {\n         println(\"The git cache OPENJDK_REFERENCE_REPO: ${buildspec.getScalarField('openjdk_reference_repo', SDK_VERSION)} does not exist on ${NODE_NAME}!\")\n     }\n }\n \n-def check_path(inPath, isDir) {\n+def check_path(inPath) {\n     if (!inPath) {\n-        return inPath\n+        return false\n     }\n-\n-    def testOption = (isDir) ? \"-d\" : \"-e\"\n-    return sh (script: \"test ${testOption} ${inPath} && echo ${inPath} || echo ''\", returnStdout: true).trim()\n+    return sh (script: \"test -e ${inPath} && echo true || echo false\", returnStdout: true).trim().toBoolean()\n }\n \n+def download_boot_jdk(jdkPath) {\n+    def bootJDKVersion = SDK_VERSION.toInteger() - 1\n+    if ((SDK_VERSION == '8') || (SDK_VERSION == '11')) {\n+        bootJDKVersion = SDK_VERSION\n+    }\n+    def os = buildspec.getScalarField('boot_jdk', 'os')\n+    def arch = buildspec.getScalarField('boot_jdk', 'arch')\n+    def dirStrip = buildspec.getScalarField('boot_jdk', 'dir_strip')\n+    def sdkUrl = \"https://api.adoptopenjdk.net/v3/binary/latest/${bootJDKVersion}/ga/${os}/${arch}/jdk/openj9/normal/adoptopenjdk?project=jdk\"\n+\n+    /*\n+     * Download bootjdk\n+     * Windows are zips from Adopt. Unzip doesn't have strip dir so we have to manually move.\n+     * Remaining platforms are tarballs.\n+     * Mac has some extra dirs to strip off hence $dirStrip.\n+     */\n+    dir('bootjdk') {\n+        sh \"\"\"\n+            env\n+            curl -LJkO ${sdkUrl}\n+            mkdir -p ${jdkPath}\n+            sdkFile=`ls | grep OpenJDK`\n+            env", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU4MDA0MA=="}, "originalCommit": {"oid": "f6c6fd7d905f07c0f8ea048f561f25c137fa9c17"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNzk4MjY4OnYy", "diffSide": "RIGHT", "path": "buildenv/jenkins/common/variables-functions.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMzowMjoxNFrOHccAWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMzozMjo0NVrOHcdPTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU4MTAxOQ==", "bodyText": "Not sure what bootjdk.tar.gz is connected too.  I'm thinking you mean \"\\$sdkFile\"?", "url": "https://github.com/eclipse-openj9/openj9/pull/10779#discussion_r499581019", "createdAt": "2020-10-05T13:02:14Z", "author": {"login": "jdekonin"}, "path": "buildenv/jenkins/common/variables-functions.groovy", "diffHunk": "@@ -1514,33 +1514,66 @@ def create_job(JOB_NAME, SDK_VERSION, SPEC, downstreamJobType, id) {\n }\n \n def set_build_variables_per_node() {\n-    BOOT_JDK = check_path(buildspec.getScalarField('boot_jdk', SDK_VERSION), true)\n+    BOOT_JDK = buildspec.getScalarField('boot_jdk.location', SDK_VERSION)\n     println(\"BOOT_JDK: ${BOOT_JDK}\")\n-    if (!BOOT_JDK) {\n-        error(\"BOOT_JDK: ${BOOT_JDK} does not exist!\")\n+    if (!check_path(\"${BOOT_JDK}/bin/java\")) {\n+        echo \"BOOT_JDK: ${BOOT_JDK} does not exist! Attempt to download it...\"\n+        download_boot_jdk(BOOT_JDK)\n     }\n \n-    def freemarkerPath = buildspec.getScalarField('freemarker', SDK_VERSION)\n-    FREEMARKER = check_path(buildspec.getScalarField('freemarker', SDK_VERSION), false)\n+    FREEMARKER = buildspec.getScalarField('freemarker', SDK_VERSION)\n     println(\"FREEMARKER: ${FREEMARKER}\")\n-    if (!FREEMARKER) {\n+    if (!check_path(FREEMARKER)) {\n         error(\"FREEMARKER: ${FREEMARKER} does not exist!\")\n     }\n \n-    OPENJDK_REFERENCE_REPO = check_path(buildspec.getScalarField(\"openjdk_reference_repo\", SDK_VERSION), true)\n+    OPENJDK_REFERENCE_REPO = buildspec.getScalarField(\"openjdk_reference_repo\", SDK_VERSION)\n     println(\"OPENJDK_REFERENCE_REPO: ${OPENJDK_REFERENCE_REPO}\")\n-    if (!OPENJDK_REFERENCE_REPO) {\n+    if (!check_path(OPENJDK_REFERENCE_REPO)) {\n         println(\"The git cache OPENJDK_REFERENCE_REPO: ${buildspec.getScalarField('openjdk_reference_repo', SDK_VERSION)} does not exist on ${NODE_NAME}!\")\n     }\n }\n \n-def check_path(inPath, isDir) {\n+def check_path(inPath) {\n     if (!inPath) {\n-        return inPath\n+        return false\n     }\n-\n-    def testOption = (isDir) ? \"-d\" : \"-e\"\n-    return sh (script: \"test ${testOption} ${inPath} && echo ${inPath} || echo ''\", returnStdout: true).trim()\n+    return sh (script: \"test -e ${inPath} && echo true || echo false\", returnStdout: true).trim().toBoolean()\n }\n \n+def download_boot_jdk(jdkPath) {\n+    def bootJDKVersion = SDK_VERSION.toInteger() - 1\n+    if ((SDK_VERSION == '8') || (SDK_VERSION == '11')) {\n+        bootJDKVersion = SDK_VERSION\n+    }\n+    def os = buildspec.getScalarField('boot_jdk', 'os')\n+    def arch = buildspec.getScalarField('boot_jdk', 'arch')\n+    def dirStrip = buildspec.getScalarField('boot_jdk', 'dir_strip')\n+    def sdkUrl = \"https://api.adoptopenjdk.net/v3/binary/latest/${bootJDKVersion}/ga/${os}/${arch}/jdk/openj9/normal/adoptopenjdk?project=jdk\"\n+\n+    /*\n+     * Download bootjdk\n+     * Windows are zips from Adopt. Unzip doesn't have strip dir so we have to manually move.\n+     * Remaining platforms are tarballs.\n+     * Mac has some extra dirs to strip off hence $dirStrip.\n+     */\n+    dir('bootjdk') {\n+        sh \"\"\"\n+            env\n+            curl -LJkO ${sdkUrl}\n+            mkdir -p ${jdkPath}\n+            sdkFile=`ls | grep OpenJDK`\n+            env\n+            if [[ \"\\$sdkFile\" == *zip ]]; then\n+                unzip \"\\$sdkFile\" -d .\n+                sdkFolder=`ls -d */`\n+                mv \"\\$sdkFolder\"* ${jdkPath}/\n+            else\n+                gzip -cd \"\\$sdkFile\" | tar xof - -C ${jdkPath} --strip=${dirStrip}\n+            fi\n+            ${jdkPath}/bin/java -version\n+            rm -f bootjdk.tar.gz", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6c6fd7d905f07c0f8ea048f561f25c137fa9c17"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYwMTIyOQ==", "bodyText": "Good catch, forgot to update that.", "url": "https://github.com/eclipse-openj9/openj9/pull/10779#discussion_r499601229", "createdAt": "2020-10-05T13:32:45Z", "author": {"login": "AdamBrousseau"}, "path": "buildenv/jenkins/common/variables-functions.groovy", "diffHunk": "@@ -1514,33 +1514,66 @@ def create_job(JOB_NAME, SDK_VERSION, SPEC, downstreamJobType, id) {\n }\n \n def set_build_variables_per_node() {\n-    BOOT_JDK = check_path(buildspec.getScalarField('boot_jdk', SDK_VERSION), true)\n+    BOOT_JDK = buildspec.getScalarField('boot_jdk.location', SDK_VERSION)\n     println(\"BOOT_JDK: ${BOOT_JDK}\")\n-    if (!BOOT_JDK) {\n-        error(\"BOOT_JDK: ${BOOT_JDK} does not exist!\")\n+    if (!check_path(\"${BOOT_JDK}/bin/java\")) {\n+        echo \"BOOT_JDK: ${BOOT_JDK} does not exist! Attempt to download it...\"\n+        download_boot_jdk(BOOT_JDK)\n     }\n \n-    def freemarkerPath = buildspec.getScalarField('freemarker', SDK_VERSION)\n-    FREEMARKER = check_path(buildspec.getScalarField('freemarker', SDK_VERSION), false)\n+    FREEMARKER = buildspec.getScalarField('freemarker', SDK_VERSION)\n     println(\"FREEMARKER: ${FREEMARKER}\")\n-    if (!FREEMARKER) {\n+    if (!check_path(FREEMARKER)) {\n         error(\"FREEMARKER: ${FREEMARKER} does not exist!\")\n     }\n \n-    OPENJDK_REFERENCE_REPO = check_path(buildspec.getScalarField(\"openjdk_reference_repo\", SDK_VERSION), true)\n+    OPENJDK_REFERENCE_REPO = buildspec.getScalarField(\"openjdk_reference_repo\", SDK_VERSION)\n     println(\"OPENJDK_REFERENCE_REPO: ${OPENJDK_REFERENCE_REPO}\")\n-    if (!OPENJDK_REFERENCE_REPO) {\n+    if (!check_path(OPENJDK_REFERENCE_REPO)) {\n         println(\"The git cache OPENJDK_REFERENCE_REPO: ${buildspec.getScalarField('openjdk_reference_repo', SDK_VERSION)} does not exist on ${NODE_NAME}!\")\n     }\n }\n \n-def check_path(inPath, isDir) {\n+def check_path(inPath) {\n     if (!inPath) {\n-        return inPath\n+        return false\n     }\n-\n-    def testOption = (isDir) ? \"-d\" : \"-e\"\n-    return sh (script: \"test ${testOption} ${inPath} && echo ${inPath} || echo ''\", returnStdout: true).trim()\n+    return sh (script: \"test -e ${inPath} && echo true || echo false\", returnStdout: true).trim().toBoolean()\n }\n \n+def download_boot_jdk(jdkPath) {\n+    def bootJDKVersion = SDK_VERSION.toInteger() - 1\n+    if ((SDK_VERSION == '8') || (SDK_VERSION == '11')) {\n+        bootJDKVersion = SDK_VERSION\n+    }\n+    def os = buildspec.getScalarField('boot_jdk', 'os')\n+    def arch = buildspec.getScalarField('boot_jdk', 'arch')\n+    def dirStrip = buildspec.getScalarField('boot_jdk', 'dir_strip')\n+    def sdkUrl = \"https://api.adoptopenjdk.net/v3/binary/latest/${bootJDKVersion}/ga/${os}/${arch}/jdk/openj9/normal/adoptopenjdk?project=jdk\"\n+\n+    /*\n+     * Download bootjdk\n+     * Windows are zips from Adopt. Unzip doesn't have strip dir so we have to manually move.\n+     * Remaining platforms are tarballs.\n+     * Mac has some extra dirs to strip off hence $dirStrip.\n+     */\n+    dir('bootjdk') {\n+        sh \"\"\"\n+            env\n+            curl -LJkO ${sdkUrl}\n+            mkdir -p ${jdkPath}\n+            sdkFile=`ls | grep OpenJDK`\n+            env\n+            if [[ \"\\$sdkFile\" == *zip ]]; then\n+                unzip \"\\$sdkFile\" -d .\n+                sdkFolder=`ls -d */`\n+                mv \"\\$sdkFolder\"* ${jdkPath}/\n+            else\n+                gzip -cd \"\\$sdkFile\" | tar xof - -C ${jdkPath} --strip=${dirStrip}\n+            fi\n+            ${jdkPath}/bin/java -version\n+            rm -f bootjdk.tar.gz", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU4MTAxOQ=="}, "originalCommit": {"oid": "f6c6fd7d905f07c0f8ea048f561f25c137fa9c17"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODEzMDY0OnYy", "diffSide": "RIGHT", "path": "buildenv/jenkins/variables/defaults.yml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMzozNzoxN1rOHcdbYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMzozNzoxN1rOHcdbYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYwNDMyMQ==", "bodyText": "Missed an a here in arch.", "url": "https://github.com/eclipse-openj9/openj9/pull/10779#discussion_r499604321", "createdAt": "2020-10-05T13:37:17Z", "author": {"login": "jdekonin"}, "path": "buildenv/jenkins/variables/defaults.yml", "diffHunk": "@@ -246,11 +250,15 @@ ppc64le_linux_jit:\n s390x_linux:\n   extends: ['debuginfo', 'freemarker', 'openjdk_reference_repo', 'openssl']\n   boot_jdk:\n-    8: '/usr/lib/jvm/adoptojdk-java-s390x-80'\n-    11: '/usr/lib/jvm/adoptojdk-java-11'\n-    14: '/usr/lib/jvm/adoptojdk-java-14'\n-    15: '/usr/lib/jvm/adoptojdk-java-14'\n-    next: '/usr/lib/jvm/adoptojdk-java-15'\n+    location:\n+      8: '/usr/lib/jvm/adoptojdk-java-s390x-80'\n+      11: '/usr/lib/jvm/adoptojdk-java-11'\n+      14: '/usr/lib/jvm/adoptojdk-java-14'\n+      15: '/usr/lib/jvm/adoptojdk-java-14'\n+      next: '/usr/lib/jvm/adoptojdk-java-15'\n+    rch: 's390x'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3783c91f1ca44b637fb355c18367cb7feaac92b3"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODkzNDAzOnYy", "diffSide": "RIGHT", "path": "buildenv/jenkins/variables/defaults.yml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjo0MToxOVrOHclO9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzowMjozMlrOHcl-xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczMjIxNA==", "bodyText": "typo", "url": "https://github.com/eclipse-openj9/openj9/pull/10779#discussion_r499732214", "createdAt": "2020-10-05T16:41:19Z", "author": {"login": "pshipton"}, "path": "buildenv/jenkins/variables/defaults.yml", "diffHunk": "@@ -531,7 +555,11 @@ x86-64_windows_xl_uma:\n x86-32_windows:\n   extends: ['debuginfo', 'openjdk_reference_repo', 'openssl_bundle']\n   boot_jdk:\n-    8: '/cygdrive/c/openjdk/jdk7'\n+    locaiton:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79c94c5fd9bc04a0d6ea5cb42586614a2bdb708a"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc0NDQ1NQ==", "bodyText": "fixed", "url": "https://github.com/eclipse-openj9/openj9/pull/10779#discussion_r499744455", "createdAt": "2020-10-05T17:02:32Z", "author": {"login": "AdamBrousseau"}, "path": "buildenv/jenkins/variables/defaults.yml", "diffHunk": "@@ -531,7 +555,11 @@ x86-64_windows_xl_uma:\n x86-32_windows:\n   extends: ['debuginfo', 'openjdk_reference_repo', 'openssl_bundle']\n   boot_jdk:\n-    8: '/cygdrive/c/openjdk/jdk7'\n+    locaiton:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczMjIxNA=="}, "originalCommit": {"oid": "79c94c5fd9bc04a0d6ea5cb42586614a2bdb708a"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODk0MzgxOnYy", "diffSide": "RIGHT", "path": "buildenv/jenkins/common/variables-functions.groovy", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjo0Mzo1M1rOHclU8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzowMzo0M1rOHcmBdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczMzc0NQ==", "bodyText": "Did you want to handle .pax and .pax.Z as well?", "url": "https://github.com/eclipse-openj9/openj9/pull/10779#discussion_r499733745", "createdAt": "2020-10-05T16:43:53Z", "author": {"login": "pshipton"}, "path": "buildenv/jenkins/common/variables-functions.groovy", "diffHunk": "@@ -1514,33 +1514,64 @@ def create_job(JOB_NAME, SDK_VERSION, SPEC, downstreamJobType, id) {\n }\n \n def set_build_variables_per_node() {\n-    BOOT_JDK = check_path(buildspec.getScalarField('boot_jdk', SDK_VERSION), true)\n+    BOOT_JDK = buildspec.getScalarField('boot_jdk.location', SDK_VERSION)\n     println(\"BOOT_JDK: ${BOOT_JDK}\")\n-    if (!BOOT_JDK) {\n-        error(\"BOOT_JDK: ${BOOT_JDK} does not exist!\")\n+    if (!check_path(\"${BOOT_JDK}/bin/java\")) {\n+        echo \"BOOT_JDK: ${BOOT_JDK} does not exist! Attempt to download it...\"\n+        download_boot_jdk(BOOT_JDK)\n     }\n \n-    def freemarkerPath = buildspec.getScalarField('freemarker', SDK_VERSION)\n-    FREEMARKER = check_path(buildspec.getScalarField('freemarker', SDK_VERSION), false)\n+    FREEMARKER = buildspec.getScalarField('freemarker', SDK_VERSION)\n     println(\"FREEMARKER: ${FREEMARKER}\")\n-    if (!FREEMARKER) {\n+    if (!check_path(FREEMARKER)) {\n         error(\"FREEMARKER: ${FREEMARKER} does not exist!\")\n     }\n \n-    OPENJDK_REFERENCE_REPO = check_path(buildspec.getScalarField(\"openjdk_reference_repo\", SDK_VERSION), true)\n+    OPENJDK_REFERENCE_REPO = buildspec.getScalarField(\"openjdk_reference_repo\", SDK_VERSION)\n     println(\"OPENJDK_REFERENCE_REPO: ${OPENJDK_REFERENCE_REPO}\")\n-    if (!OPENJDK_REFERENCE_REPO) {\n+    if (!check_path(OPENJDK_REFERENCE_REPO)) {\n         println(\"The git cache OPENJDK_REFERENCE_REPO: ${buildspec.getScalarField('openjdk_reference_repo', SDK_VERSION)} does not exist on ${NODE_NAME}!\")\n     }\n }\n \n-def check_path(inPath, isDir) {\n+def check_path(inPath) {\n     if (!inPath) {\n-        return inPath\n+        return false\n     }\n-\n-    def testOption = (isDir) ? \"-d\" : \"-e\"\n-    return sh (script: \"test ${testOption} ${inPath} && echo ${inPath} || echo ''\", returnStdout: true).trim()\n+    return sh (script: \"test -e ${inPath} && echo true || echo false\", returnStdout: true).trim().toBoolean()\n }\n \n+def download_boot_jdk(jdkPath) {\n+    def bootJDKVersion = SDK_VERSION.toInteger() - 1\n+    if ((SDK_VERSION == '8') || (SDK_VERSION == '11')) {\n+        bootJDKVersion = SDK_VERSION\n+    }\n+    def os = buildspec.getScalarField('boot_jdk', 'os')\n+    def arch = buildspec.getScalarField('boot_jdk', 'arch')\n+    def dirStrip = buildspec.getScalarField('boot_jdk', 'dir_strip')\n+    def sdkUrl = \"https://api.adoptopenjdk.net/v3/binary/latest/${bootJDKVersion}/ga/${os}/${arch}/jdk/openj9/normal/adoptopenjdk?project=jdk\"\n+\n+    /*\n+     * Download bootjdk\n+     * Windows are zips from Adopt. Unzip doesn't have strip dir so we have to manually move.\n+     * Remaining platforms are tarballs.\n+     * Mac has some extra dirs to strip off hence $dirStrip.\n+     */\n+    dir('bootjdk') {\n+        sh \"\"\"\n+            curl -LJkO ${sdkUrl}\n+            mkdir -p ${jdkPath}\n+            sdkFile=`ls | grep OpenJDK`\n+            if [[ \"\\$sdkFile\" == *zip ]]; then\n+                unzip \"\\$sdkFile\" -d .\n+                sdkFolder=`ls -d */`\n+                mv \"\\$sdkFolder\"* ${jdkPath}/\n+            else\n+                gzip -cd \"\\$sdkFile\" | tar xof - -C ${jdkPath} --strip=${dirStrip}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79c94c5fd9bc04a0d6ea5cb42586614a2bdb708a"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczNTc2Mw==", "bodyText": "I guess they aren't available from Adopt, so any support on this can wait.", "url": "https://github.com/eclipse-openj9/openj9/pull/10779#discussion_r499735763", "createdAt": "2020-10-05T16:47:21Z", "author": {"login": "pshipton"}, "path": "buildenv/jenkins/common/variables-functions.groovy", "diffHunk": "@@ -1514,33 +1514,64 @@ def create_job(JOB_NAME, SDK_VERSION, SPEC, downstreamJobType, id) {\n }\n \n def set_build_variables_per_node() {\n-    BOOT_JDK = check_path(buildspec.getScalarField('boot_jdk', SDK_VERSION), true)\n+    BOOT_JDK = buildspec.getScalarField('boot_jdk.location', SDK_VERSION)\n     println(\"BOOT_JDK: ${BOOT_JDK}\")\n-    if (!BOOT_JDK) {\n-        error(\"BOOT_JDK: ${BOOT_JDK} does not exist!\")\n+    if (!check_path(\"${BOOT_JDK}/bin/java\")) {\n+        echo \"BOOT_JDK: ${BOOT_JDK} does not exist! Attempt to download it...\"\n+        download_boot_jdk(BOOT_JDK)\n     }\n \n-    def freemarkerPath = buildspec.getScalarField('freemarker', SDK_VERSION)\n-    FREEMARKER = check_path(buildspec.getScalarField('freemarker', SDK_VERSION), false)\n+    FREEMARKER = buildspec.getScalarField('freemarker', SDK_VERSION)\n     println(\"FREEMARKER: ${FREEMARKER}\")\n-    if (!FREEMARKER) {\n+    if (!check_path(FREEMARKER)) {\n         error(\"FREEMARKER: ${FREEMARKER} does not exist!\")\n     }\n \n-    OPENJDK_REFERENCE_REPO = check_path(buildspec.getScalarField(\"openjdk_reference_repo\", SDK_VERSION), true)\n+    OPENJDK_REFERENCE_REPO = buildspec.getScalarField(\"openjdk_reference_repo\", SDK_VERSION)\n     println(\"OPENJDK_REFERENCE_REPO: ${OPENJDK_REFERENCE_REPO}\")\n-    if (!OPENJDK_REFERENCE_REPO) {\n+    if (!check_path(OPENJDK_REFERENCE_REPO)) {\n         println(\"The git cache OPENJDK_REFERENCE_REPO: ${buildspec.getScalarField('openjdk_reference_repo', SDK_VERSION)} does not exist on ${NODE_NAME}!\")\n     }\n }\n \n-def check_path(inPath, isDir) {\n+def check_path(inPath) {\n     if (!inPath) {\n-        return inPath\n+        return false\n     }\n-\n-    def testOption = (isDir) ? \"-d\" : \"-e\"\n-    return sh (script: \"test ${testOption} ${inPath} && echo ${inPath} || echo ''\", returnStdout: true).trim()\n+    return sh (script: \"test -e ${inPath} && echo true || echo false\", returnStdout: true).trim().toBoolean()\n }\n \n+def download_boot_jdk(jdkPath) {\n+    def bootJDKVersion = SDK_VERSION.toInteger() - 1\n+    if ((SDK_VERSION == '8') || (SDK_VERSION == '11')) {\n+        bootJDKVersion = SDK_VERSION\n+    }\n+    def os = buildspec.getScalarField('boot_jdk', 'os')\n+    def arch = buildspec.getScalarField('boot_jdk', 'arch')\n+    def dirStrip = buildspec.getScalarField('boot_jdk', 'dir_strip')\n+    def sdkUrl = \"https://api.adoptopenjdk.net/v3/binary/latest/${bootJDKVersion}/ga/${os}/${arch}/jdk/openj9/normal/adoptopenjdk?project=jdk\"\n+\n+    /*\n+     * Download bootjdk\n+     * Windows are zips from Adopt. Unzip doesn't have strip dir so we have to manually move.\n+     * Remaining platforms are tarballs.\n+     * Mac has some extra dirs to strip off hence $dirStrip.\n+     */\n+    dir('bootjdk') {\n+        sh \"\"\"\n+            curl -LJkO ${sdkUrl}\n+            mkdir -p ${jdkPath}\n+            sdkFile=`ls | grep OpenJDK`\n+            if [[ \"\\$sdkFile\" == *zip ]]; then\n+                unzip \"\\$sdkFile\" -d .\n+                sdkFolder=`ls -d */`\n+                mv \"\\$sdkFolder\"* ${jdkPath}/\n+            else\n+                gzip -cd \"\\$sdkFile\" | tar xof - -C ${jdkPath} --strip=${dirStrip}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczMzc0NQ=="}, "originalCommit": {"oid": "79c94c5fd9bc04a0d6ea5cb42586614a2bdb708a"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc0NTE0MQ==", "bodyText": "No because Adopt won't have z/OS binaries anyways. If we want to make the curl configurable in the future we can revisit.", "url": "https://github.com/eclipse-openj9/openj9/pull/10779#discussion_r499745141", "createdAt": "2020-10-05T17:03:43Z", "author": {"login": "AdamBrousseau"}, "path": "buildenv/jenkins/common/variables-functions.groovy", "diffHunk": "@@ -1514,33 +1514,64 @@ def create_job(JOB_NAME, SDK_VERSION, SPEC, downstreamJobType, id) {\n }\n \n def set_build_variables_per_node() {\n-    BOOT_JDK = check_path(buildspec.getScalarField('boot_jdk', SDK_VERSION), true)\n+    BOOT_JDK = buildspec.getScalarField('boot_jdk.location', SDK_VERSION)\n     println(\"BOOT_JDK: ${BOOT_JDK}\")\n-    if (!BOOT_JDK) {\n-        error(\"BOOT_JDK: ${BOOT_JDK} does not exist!\")\n+    if (!check_path(\"${BOOT_JDK}/bin/java\")) {\n+        echo \"BOOT_JDK: ${BOOT_JDK} does not exist! Attempt to download it...\"\n+        download_boot_jdk(BOOT_JDK)\n     }\n \n-    def freemarkerPath = buildspec.getScalarField('freemarker', SDK_VERSION)\n-    FREEMARKER = check_path(buildspec.getScalarField('freemarker', SDK_VERSION), false)\n+    FREEMARKER = buildspec.getScalarField('freemarker', SDK_VERSION)\n     println(\"FREEMARKER: ${FREEMARKER}\")\n-    if (!FREEMARKER) {\n+    if (!check_path(FREEMARKER)) {\n         error(\"FREEMARKER: ${FREEMARKER} does not exist!\")\n     }\n \n-    OPENJDK_REFERENCE_REPO = check_path(buildspec.getScalarField(\"openjdk_reference_repo\", SDK_VERSION), true)\n+    OPENJDK_REFERENCE_REPO = buildspec.getScalarField(\"openjdk_reference_repo\", SDK_VERSION)\n     println(\"OPENJDK_REFERENCE_REPO: ${OPENJDK_REFERENCE_REPO}\")\n-    if (!OPENJDK_REFERENCE_REPO) {\n+    if (!check_path(OPENJDK_REFERENCE_REPO)) {\n         println(\"The git cache OPENJDK_REFERENCE_REPO: ${buildspec.getScalarField('openjdk_reference_repo', SDK_VERSION)} does not exist on ${NODE_NAME}!\")\n     }\n }\n \n-def check_path(inPath, isDir) {\n+def check_path(inPath) {\n     if (!inPath) {\n-        return inPath\n+        return false\n     }\n-\n-    def testOption = (isDir) ? \"-d\" : \"-e\"\n-    return sh (script: \"test ${testOption} ${inPath} && echo ${inPath} || echo ''\", returnStdout: true).trim()\n+    return sh (script: \"test -e ${inPath} && echo true || echo false\", returnStdout: true).trim().toBoolean()\n }\n \n+def download_boot_jdk(jdkPath) {\n+    def bootJDKVersion = SDK_VERSION.toInteger() - 1\n+    if ((SDK_VERSION == '8') || (SDK_VERSION == '11')) {\n+        bootJDKVersion = SDK_VERSION\n+    }\n+    def os = buildspec.getScalarField('boot_jdk', 'os')\n+    def arch = buildspec.getScalarField('boot_jdk', 'arch')\n+    def dirStrip = buildspec.getScalarField('boot_jdk', 'dir_strip')\n+    def sdkUrl = \"https://api.adoptopenjdk.net/v3/binary/latest/${bootJDKVersion}/ga/${os}/${arch}/jdk/openj9/normal/adoptopenjdk?project=jdk\"\n+\n+    /*\n+     * Download bootjdk\n+     * Windows are zips from Adopt. Unzip doesn't have strip dir so we have to manually move.\n+     * Remaining platforms are tarballs.\n+     * Mac has some extra dirs to strip off hence $dirStrip.\n+     */\n+    dir('bootjdk') {\n+        sh \"\"\"\n+            curl -LJkO ${sdkUrl}\n+            mkdir -p ${jdkPath}\n+            sdkFile=`ls | grep OpenJDK`\n+            if [[ \"\\$sdkFile\" == *zip ]]; then\n+                unzip \"\\$sdkFile\" -d .\n+                sdkFolder=`ls -d */`\n+                mv \"\\$sdkFolder\"* ${jdkPath}/\n+            else\n+                gzip -cd \"\\$sdkFile\" | tar xof - -C ${jdkPath} --strip=${dirStrip}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczMzc0NQ=="}, "originalCommit": {"oid": "79c94c5fd9bc04a0d6ea5cb42586614a2bdb708a"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODk1MjQyOnYy", "diffSide": "RIGHT", "path": "buildenv/jenkins/common/variables-functions.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjo0NjoxM1rOHclaOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjo1NDo1OVrOHcluPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczNTA5OQ==", "bodyText": "I don't think this will put it into jdkPath.", "url": "https://github.com/eclipse-openj9/openj9/pull/10779#discussion_r499735099", "createdAt": "2020-10-05T16:46:13Z", "author": {"login": "pshipton"}, "path": "buildenv/jenkins/common/variables-functions.groovy", "diffHunk": "@@ -1514,33 +1514,64 @@ def create_job(JOB_NAME, SDK_VERSION, SPEC, downstreamJobType, id) {\n }\n \n def set_build_variables_per_node() {\n-    BOOT_JDK = check_path(buildspec.getScalarField('boot_jdk', SDK_VERSION), true)\n+    BOOT_JDK = buildspec.getScalarField('boot_jdk.location', SDK_VERSION)\n     println(\"BOOT_JDK: ${BOOT_JDK}\")\n-    if (!BOOT_JDK) {\n-        error(\"BOOT_JDK: ${BOOT_JDK} does not exist!\")\n+    if (!check_path(\"${BOOT_JDK}/bin/java\")) {\n+        echo \"BOOT_JDK: ${BOOT_JDK} does not exist! Attempt to download it...\"\n+        download_boot_jdk(BOOT_JDK)\n     }\n \n-    def freemarkerPath = buildspec.getScalarField('freemarker', SDK_VERSION)\n-    FREEMARKER = check_path(buildspec.getScalarField('freemarker', SDK_VERSION), false)\n+    FREEMARKER = buildspec.getScalarField('freemarker', SDK_VERSION)\n     println(\"FREEMARKER: ${FREEMARKER}\")\n-    if (!FREEMARKER) {\n+    if (!check_path(FREEMARKER)) {\n         error(\"FREEMARKER: ${FREEMARKER} does not exist!\")\n     }\n \n-    OPENJDK_REFERENCE_REPO = check_path(buildspec.getScalarField(\"openjdk_reference_repo\", SDK_VERSION), true)\n+    OPENJDK_REFERENCE_REPO = buildspec.getScalarField(\"openjdk_reference_repo\", SDK_VERSION)\n     println(\"OPENJDK_REFERENCE_REPO: ${OPENJDK_REFERENCE_REPO}\")\n-    if (!OPENJDK_REFERENCE_REPO) {\n+    if (!check_path(OPENJDK_REFERENCE_REPO)) {\n         println(\"The git cache OPENJDK_REFERENCE_REPO: ${buildspec.getScalarField('openjdk_reference_repo', SDK_VERSION)} does not exist on ${NODE_NAME}!\")\n     }\n }\n \n-def check_path(inPath, isDir) {\n+def check_path(inPath) {\n     if (!inPath) {\n-        return inPath\n+        return false\n     }\n-\n-    def testOption = (isDir) ? \"-d\" : \"-e\"\n-    return sh (script: \"test ${testOption} ${inPath} && echo ${inPath} || echo ''\", returnStdout: true).trim()\n+    return sh (script: \"test -e ${inPath} && echo true || echo false\", returnStdout: true).trim().toBoolean()\n }\n \n+def download_boot_jdk(jdkPath) {\n+    def bootJDKVersion = SDK_VERSION.toInteger() - 1\n+    if ((SDK_VERSION == '8') || (SDK_VERSION == '11')) {\n+        bootJDKVersion = SDK_VERSION\n+    }\n+    def os = buildspec.getScalarField('boot_jdk', 'os')\n+    def arch = buildspec.getScalarField('boot_jdk', 'arch')\n+    def dirStrip = buildspec.getScalarField('boot_jdk', 'dir_strip')\n+    def sdkUrl = \"https://api.adoptopenjdk.net/v3/binary/latest/${bootJDKVersion}/ga/${os}/${arch}/jdk/openj9/normal/adoptopenjdk?project=jdk\"\n+\n+    /*\n+     * Download bootjdk\n+     * Windows are zips from Adopt. Unzip doesn't have strip dir so we have to manually move.\n+     * Remaining platforms are tarballs.\n+     * Mac has some extra dirs to strip off hence $dirStrip.\n+     */\n+    dir('bootjdk') {\n+        sh \"\"\"\n+            curl -LJkO ${sdkUrl}\n+            mkdir -p ${jdkPath}\n+            sdkFile=`ls | grep OpenJDK`\n+            if [[ \"\\$sdkFile\" == *zip ]]; then\n+                unzip \"\\$sdkFile\" -d .", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79c94c5fd9bc04a0d6ea5cb42586614a2bdb708a"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc0MDIyMg==", "bodyText": "nm, I see.", "url": "https://github.com/eclipse-openj9/openj9/pull/10779#discussion_r499740222", "createdAt": "2020-10-05T16:54:59Z", "author": {"login": "pshipton"}, "path": "buildenv/jenkins/common/variables-functions.groovy", "diffHunk": "@@ -1514,33 +1514,64 @@ def create_job(JOB_NAME, SDK_VERSION, SPEC, downstreamJobType, id) {\n }\n \n def set_build_variables_per_node() {\n-    BOOT_JDK = check_path(buildspec.getScalarField('boot_jdk', SDK_VERSION), true)\n+    BOOT_JDK = buildspec.getScalarField('boot_jdk.location', SDK_VERSION)\n     println(\"BOOT_JDK: ${BOOT_JDK}\")\n-    if (!BOOT_JDK) {\n-        error(\"BOOT_JDK: ${BOOT_JDK} does not exist!\")\n+    if (!check_path(\"${BOOT_JDK}/bin/java\")) {\n+        echo \"BOOT_JDK: ${BOOT_JDK} does not exist! Attempt to download it...\"\n+        download_boot_jdk(BOOT_JDK)\n     }\n \n-    def freemarkerPath = buildspec.getScalarField('freemarker', SDK_VERSION)\n-    FREEMARKER = check_path(buildspec.getScalarField('freemarker', SDK_VERSION), false)\n+    FREEMARKER = buildspec.getScalarField('freemarker', SDK_VERSION)\n     println(\"FREEMARKER: ${FREEMARKER}\")\n-    if (!FREEMARKER) {\n+    if (!check_path(FREEMARKER)) {\n         error(\"FREEMARKER: ${FREEMARKER} does not exist!\")\n     }\n \n-    OPENJDK_REFERENCE_REPO = check_path(buildspec.getScalarField(\"openjdk_reference_repo\", SDK_VERSION), true)\n+    OPENJDK_REFERENCE_REPO = buildspec.getScalarField(\"openjdk_reference_repo\", SDK_VERSION)\n     println(\"OPENJDK_REFERENCE_REPO: ${OPENJDK_REFERENCE_REPO}\")\n-    if (!OPENJDK_REFERENCE_REPO) {\n+    if (!check_path(OPENJDK_REFERENCE_REPO)) {\n         println(\"The git cache OPENJDK_REFERENCE_REPO: ${buildspec.getScalarField('openjdk_reference_repo', SDK_VERSION)} does not exist on ${NODE_NAME}!\")\n     }\n }\n \n-def check_path(inPath, isDir) {\n+def check_path(inPath) {\n     if (!inPath) {\n-        return inPath\n+        return false\n     }\n-\n-    def testOption = (isDir) ? \"-d\" : \"-e\"\n-    return sh (script: \"test ${testOption} ${inPath} && echo ${inPath} || echo ''\", returnStdout: true).trim()\n+    return sh (script: \"test -e ${inPath} && echo true || echo false\", returnStdout: true).trim().toBoolean()\n }\n \n+def download_boot_jdk(jdkPath) {\n+    def bootJDKVersion = SDK_VERSION.toInteger() - 1\n+    if ((SDK_VERSION == '8') || (SDK_VERSION == '11')) {\n+        bootJDKVersion = SDK_VERSION\n+    }\n+    def os = buildspec.getScalarField('boot_jdk', 'os')\n+    def arch = buildspec.getScalarField('boot_jdk', 'arch')\n+    def dirStrip = buildspec.getScalarField('boot_jdk', 'dir_strip')\n+    def sdkUrl = \"https://api.adoptopenjdk.net/v3/binary/latest/${bootJDKVersion}/ga/${os}/${arch}/jdk/openj9/normal/adoptopenjdk?project=jdk\"\n+\n+    /*\n+     * Download bootjdk\n+     * Windows are zips from Adopt. Unzip doesn't have strip dir so we have to manually move.\n+     * Remaining platforms are tarballs.\n+     * Mac has some extra dirs to strip off hence $dirStrip.\n+     */\n+    dir('bootjdk') {\n+        sh \"\"\"\n+            curl -LJkO ${sdkUrl}\n+            mkdir -p ${jdkPath}\n+            sdkFile=`ls | grep OpenJDK`\n+            if [[ \"\\$sdkFile\" == *zip ]]; then\n+                unzip \"\\$sdkFile\" -d .", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczNTA5OQ=="}, "originalCommit": {"oid": "79c94c5fd9bc04a0d6ea5cb42586614a2bdb708a"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTAwMDYyOnYy", "diffSide": "RIGHT", "path": "buildenv/jenkins/common/variables-functions.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjo1OToyNlrOHcl4Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzowNTozMVrOHcmFUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc0Mjc5MA==", "bodyText": "This should clean up the $sdkFolder", "url": "https://github.com/eclipse-openj9/openj9/pull/10779#discussion_r499742790", "createdAt": "2020-10-05T16:59:26Z", "author": {"login": "pshipton"}, "path": "buildenv/jenkins/common/variables-functions.groovy", "diffHunk": "@@ -1514,33 +1514,64 @@ def create_job(JOB_NAME, SDK_VERSION, SPEC, downstreamJobType, id) {\n }\n \n def set_build_variables_per_node() {\n-    BOOT_JDK = check_path(buildspec.getScalarField('boot_jdk', SDK_VERSION), true)\n+    BOOT_JDK = buildspec.getScalarField('boot_jdk.location', SDK_VERSION)\n     println(\"BOOT_JDK: ${BOOT_JDK}\")\n-    if (!BOOT_JDK) {\n-        error(\"BOOT_JDK: ${BOOT_JDK} does not exist!\")\n+    if (!check_path(\"${BOOT_JDK}/bin/java\")) {\n+        echo \"BOOT_JDK: ${BOOT_JDK} does not exist! Attempt to download it...\"\n+        download_boot_jdk(BOOT_JDK)\n     }\n \n-    def freemarkerPath = buildspec.getScalarField('freemarker', SDK_VERSION)\n-    FREEMARKER = check_path(buildspec.getScalarField('freemarker', SDK_VERSION), false)\n+    FREEMARKER = buildspec.getScalarField('freemarker', SDK_VERSION)\n     println(\"FREEMARKER: ${FREEMARKER}\")\n-    if (!FREEMARKER) {\n+    if (!check_path(FREEMARKER)) {\n         error(\"FREEMARKER: ${FREEMARKER} does not exist!\")\n     }\n \n-    OPENJDK_REFERENCE_REPO = check_path(buildspec.getScalarField(\"openjdk_reference_repo\", SDK_VERSION), true)\n+    OPENJDK_REFERENCE_REPO = buildspec.getScalarField(\"openjdk_reference_repo\", SDK_VERSION)\n     println(\"OPENJDK_REFERENCE_REPO: ${OPENJDK_REFERENCE_REPO}\")\n-    if (!OPENJDK_REFERENCE_REPO) {\n+    if (!check_path(OPENJDK_REFERENCE_REPO)) {\n         println(\"The git cache OPENJDK_REFERENCE_REPO: ${buildspec.getScalarField('openjdk_reference_repo', SDK_VERSION)} does not exist on ${NODE_NAME}!\")\n     }\n }\n \n-def check_path(inPath, isDir) {\n+def check_path(inPath) {\n     if (!inPath) {\n-        return inPath\n+        return false\n     }\n-\n-    def testOption = (isDir) ? \"-d\" : \"-e\"\n-    return sh (script: \"test ${testOption} ${inPath} && echo ${inPath} || echo ''\", returnStdout: true).trim()\n+    return sh (script: \"test -e ${inPath} && echo true || echo false\", returnStdout: true).trim().toBoolean()\n }\n \n+def download_boot_jdk(jdkPath) {\n+    def bootJDKVersion = SDK_VERSION.toInteger() - 1\n+    if ((SDK_VERSION == '8') || (SDK_VERSION == '11')) {\n+        bootJDKVersion = SDK_VERSION\n+    }\n+    def os = buildspec.getScalarField('boot_jdk', 'os')\n+    def arch = buildspec.getScalarField('boot_jdk', 'arch')\n+    def dirStrip = buildspec.getScalarField('boot_jdk', 'dir_strip')\n+    def sdkUrl = \"https://api.adoptopenjdk.net/v3/binary/latest/${bootJDKVersion}/ga/${os}/${arch}/jdk/openj9/normal/adoptopenjdk?project=jdk\"\n+\n+    /*\n+     * Download bootjdk\n+     * Windows are zips from Adopt. Unzip doesn't have strip dir so we have to manually move.\n+     * Remaining platforms are tarballs.\n+     * Mac has some extra dirs to strip off hence $dirStrip.\n+     */\n+    dir('bootjdk') {\n+        sh \"\"\"\n+            curl -LJkO ${sdkUrl}\n+            mkdir -p ${jdkPath}\n+            sdkFile=`ls | grep OpenJDK`\n+            if [[ \"\\$sdkFile\" == *zip ]]; then\n+                unzip \"\\$sdkFile\" -d .\n+                sdkFolder=`ls -d */`\n+                mv \"\\$sdkFolder\"* ${jdkPath}/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79c94c5fd9bc04a0d6ea5cb42586614a2bdb708a"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc0NjEyOA==", "bodyText": "Since it will be in the WORKSPACE the job will clean it up at the end. I rm'd the binary to free up some space.", "url": "https://github.com/eclipse-openj9/openj9/pull/10779#discussion_r499746128", "createdAt": "2020-10-05T17:05:31Z", "author": {"login": "AdamBrousseau"}, "path": "buildenv/jenkins/common/variables-functions.groovy", "diffHunk": "@@ -1514,33 +1514,64 @@ def create_job(JOB_NAME, SDK_VERSION, SPEC, downstreamJobType, id) {\n }\n \n def set_build_variables_per_node() {\n-    BOOT_JDK = check_path(buildspec.getScalarField('boot_jdk', SDK_VERSION), true)\n+    BOOT_JDK = buildspec.getScalarField('boot_jdk.location', SDK_VERSION)\n     println(\"BOOT_JDK: ${BOOT_JDK}\")\n-    if (!BOOT_JDK) {\n-        error(\"BOOT_JDK: ${BOOT_JDK} does not exist!\")\n+    if (!check_path(\"${BOOT_JDK}/bin/java\")) {\n+        echo \"BOOT_JDK: ${BOOT_JDK} does not exist! Attempt to download it...\"\n+        download_boot_jdk(BOOT_JDK)\n     }\n \n-    def freemarkerPath = buildspec.getScalarField('freemarker', SDK_VERSION)\n-    FREEMARKER = check_path(buildspec.getScalarField('freemarker', SDK_VERSION), false)\n+    FREEMARKER = buildspec.getScalarField('freemarker', SDK_VERSION)\n     println(\"FREEMARKER: ${FREEMARKER}\")\n-    if (!FREEMARKER) {\n+    if (!check_path(FREEMARKER)) {\n         error(\"FREEMARKER: ${FREEMARKER} does not exist!\")\n     }\n \n-    OPENJDK_REFERENCE_REPO = check_path(buildspec.getScalarField(\"openjdk_reference_repo\", SDK_VERSION), true)\n+    OPENJDK_REFERENCE_REPO = buildspec.getScalarField(\"openjdk_reference_repo\", SDK_VERSION)\n     println(\"OPENJDK_REFERENCE_REPO: ${OPENJDK_REFERENCE_REPO}\")\n-    if (!OPENJDK_REFERENCE_REPO) {\n+    if (!check_path(OPENJDK_REFERENCE_REPO)) {\n         println(\"The git cache OPENJDK_REFERENCE_REPO: ${buildspec.getScalarField('openjdk_reference_repo', SDK_VERSION)} does not exist on ${NODE_NAME}!\")\n     }\n }\n \n-def check_path(inPath, isDir) {\n+def check_path(inPath) {\n     if (!inPath) {\n-        return inPath\n+        return false\n     }\n-\n-    def testOption = (isDir) ? \"-d\" : \"-e\"\n-    return sh (script: \"test ${testOption} ${inPath} && echo ${inPath} || echo ''\", returnStdout: true).trim()\n+    return sh (script: \"test -e ${inPath} && echo true || echo false\", returnStdout: true).trim().toBoolean()\n }\n \n+def download_boot_jdk(jdkPath) {\n+    def bootJDKVersion = SDK_VERSION.toInteger() - 1\n+    if ((SDK_VERSION == '8') || (SDK_VERSION == '11')) {\n+        bootJDKVersion = SDK_VERSION\n+    }\n+    def os = buildspec.getScalarField('boot_jdk', 'os')\n+    def arch = buildspec.getScalarField('boot_jdk', 'arch')\n+    def dirStrip = buildspec.getScalarField('boot_jdk', 'dir_strip')\n+    def sdkUrl = \"https://api.adoptopenjdk.net/v3/binary/latest/${bootJDKVersion}/ga/${os}/${arch}/jdk/openj9/normal/adoptopenjdk?project=jdk\"\n+\n+    /*\n+     * Download bootjdk\n+     * Windows are zips from Adopt. Unzip doesn't have strip dir so we have to manually move.\n+     * Remaining platforms are tarballs.\n+     * Mac has some extra dirs to strip off hence $dirStrip.\n+     */\n+    dir('bootjdk') {\n+        sh \"\"\"\n+            curl -LJkO ${sdkUrl}\n+            mkdir -p ${jdkPath}\n+            sdkFile=`ls | grep OpenJDK`\n+            if [[ \"\\$sdkFile\" == *zip ]]; then\n+                unzip \"\\$sdkFile\" -d .\n+                sdkFolder=`ls -d */`\n+                mv \"\\$sdkFolder\"* ${jdkPath}/", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc0Mjc5MA=="}, "originalCommit": {"oid": "79c94c5fd9bc04a0d6ea5cb42586614a2bdb708a"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTAzMDk0OnYy", "diffSide": "RIGHT", "path": "buildenv/jenkins/common/variables-functions.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzowODozNFrOHcmLng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzowODozNFrOHcmLng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc0Nzc0Mg==", "bodyText": "This won't work for next. Let me fix.", "url": "https://github.com/eclipse-openj9/openj9/pull/10779#discussion_r499747742", "createdAt": "2020-10-05T17:08:34Z", "author": {"login": "AdamBrousseau"}, "path": "buildenv/jenkins/common/variables-functions.groovy", "diffHunk": "@@ -1514,33 +1514,64 @@ def create_job(JOB_NAME, SDK_VERSION, SPEC, downstreamJobType, id) {\n }\n \n def set_build_variables_per_node() {\n-    BOOT_JDK = check_path(buildspec.getScalarField('boot_jdk', SDK_VERSION), true)\n+    BOOT_JDK = buildspec.getScalarField('boot_jdk.location', SDK_VERSION)\n     println(\"BOOT_JDK: ${BOOT_JDK}\")\n-    if (!BOOT_JDK) {\n-        error(\"BOOT_JDK: ${BOOT_JDK} does not exist!\")\n+    if (!check_path(\"${BOOT_JDK}/bin/java\")) {\n+        echo \"BOOT_JDK: ${BOOT_JDK} does not exist! Attempt to download it...\"\n+        download_boot_jdk(BOOT_JDK)\n     }\n \n-    def freemarkerPath = buildspec.getScalarField('freemarker', SDK_VERSION)\n-    FREEMARKER = check_path(buildspec.getScalarField('freemarker', SDK_VERSION), false)\n+    FREEMARKER = buildspec.getScalarField('freemarker', SDK_VERSION)\n     println(\"FREEMARKER: ${FREEMARKER}\")\n-    if (!FREEMARKER) {\n+    if (!check_path(FREEMARKER)) {\n         error(\"FREEMARKER: ${FREEMARKER} does not exist!\")\n     }\n \n-    OPENJDK_REFERENCE_REPO = check_path(buildspec.getScalarField(\"openjdk_reference_repo\", SDK_VERSION), true)\n+    OPENJDK_REFERENCE_REPO = buildspec.getScalarField(\"openjdk_reference_repo\", SDK_VERSION)\n     println(\"OPENJDK_REFERENCE_REPO: ${OPENJDK_REFERENCE_REPO}\")\n-    if (!OPENJDK_REFERENCE_REPO) {\n+    if (!check_path(OPENJDK_REFERENCE_REPO)) {\n         println(\"The git cache OPENJDK_REFERENCE_REPO: ${buildspec.getScalarField('openjdk_reference_repo', SDK_VERSION)} does not exist on ${NODE_NAME}!\")\n     }\n }\n \n-def check_path(inPath, isDir) {\n+def check_path(inPath) {\n     if (!inPath) {\n-        return inPath\n+        return false\n     }\n-\n-    def testOption = (isDir) ? \"-d\" : \"-e\"\n-    return sh (script: \"test ${testOption} ${inPath} && echo ${inPath} || echo ''\", returnStdout: true).trim()\n+    return sh (script: \"test -e ${inPath} && echo true || echo false\", returnStdout: true).trim().toBoolean()\n }\n \n+def download_boot_jdk(jdkPath) {\n+    def bootJDKVersion = SDK_VERSION.toInteger() - 1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9cdf270da252a00072e782079fdb2eb288f73fd1"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzU1MTk1OnYy", "diffSide": "RIGHT", "path": "buildenv/jenkins/variables/defaults.yml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNjoxMVrOHdRmQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODoxNjo0NFrOHdUPNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1OTA3NQ==", "bodyText": "We can use 15 to build 15, since it's already GAed.", "url": "https://github.com/eclipse-openj9/openj9/pull/10779#discussion_r500459075", "createdAt": "2020-10-06T17:06:11Z", "author": {"login": "pshipton"}, "path": "buildenv/jenkins/variables/defaults.yml", "diffHunk": "@@ -166,6 +166,20 @@ freemarker:\n openjdk_reference_repo:\n   openjdk_reference_repo: '/home/jenkins/openjdk_cache'\n #========================================#\n+# BootJDK Default values\n+#========================================#\n+boot_jdk_default:\n+  boot_jdk:\n+    location:\n+      all: '${HOME}/bootjdks'\n+    version:\n+      8: '8'\n+      11: '11'\n+      15: '14'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfca97c4dabae49462edf50a2ae6634d4507e4d7"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUwMjMyNQ==", "bodyText": "Updated", "url": "https://github.com/eclipse-openj9/openj9/pull/10779#discussion_r500502325", "createdAt": "2020-10-06T18:16:44Z", "author": {"login": "AdamBrousseau"}, "path": "buildenv/jenkins/variables/defaults.yml", "diffHunk": "@@ -166,6 +166,20 @@ freemarker:\n openjdk_reference_repo:\n   openjdk_reference_repo: '/home/jenkins/openjdk_cache'\n #========================================#\n+# BootJDK Default values\n+#========================================#\n+boot_jdk_default:\n+  boot_jdk:\n+    location:\n+      all: '${HOME}/bootjdks'\n+    version:\n+      8: '8'\n+      11: '11'\n+      15: '14'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1OTA3NQ=="}, "originalCommit": {"oid": "dfca97c4dabae49462edf50a2ae6634d4507e4d7"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzU2NzkxOnYy", "diffSide": "RIGHT", "path": "buildenv/jenkins/variables/defaults.yml", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzoxMDoxNVrOHdRwEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODo0NDozMlrOHdVTZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ2MTU4NQ==", "bodyText": "How does this work? There isn't any Openj9 Aarch64 build at Adopt for Java 15.", "url": "https://github.com/eclipse-openj9/openj9/pull/10779#discussion_r500461585", "createdAt": "2020-10-06T17:10:15Z", "author": {"login": "pshipton"}, "path": "buildenv/jenkins/variables/defaults.yml", "diffHunk": "@@ -432,12 +435,15 @@ x86-64_linux_valhalla:\n # Linux Aarch 64bits Compressed Pointers\n #========================================#\n aarch64_linux:\n-  extends: ['debuginfo', 'freemarker', 'openjdk_reference_repo', 'openssl']\n+  extends: ['boot_jdk_default', 'debuginfo', 'freemarker', 'openjdk_reference_repo', 'openssl']\n   boot_jdk:\n-    8: '/usr/lib/jvm/java-1.8.0'\n-    11: '/usr/lib/jvm/adoptojdk-java-11'\n-    15: '/usr/lib/jvm/jdk-15+36'\n-    next: '/usr/lib/jvm/jdk-15+36'\n+    version:\n+      8: '8'\n+      11: '11'\n+      15: '15'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfca97c4dabae49462edf50a2ae6634d4507e4d7"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ2Nzc3MA==", "bodyText": "It will only try if the directory doesn't already exist on the machine.  So for the odd case where the platform is still in progress that will need to be pushed out manually otherwise it will fail.", "url": "https://github.com/eclipse-openj9/openj9/pull/10779#discussion_r500467770", "createdAt": "2020-10-06T17:20:12Z", "author": {"login": "jdekonin"}, "path": "buildenv/jenkins/variables/defaults.yml", "diffHunk": "@@ -432,12 +435,15 @@ x86-64_linux_valhalla:\n # Linux Aarch 64bits Compressed Pointers\n #========================================#\n aarch64_linux:\n-  extends: ['debuginfo', 'freemarker', 'openjdk_reference_repo', 'openssl']\n+  extends: ['boot_jdk_default', 'debuginfo', 'freemarker', 'openjdk_reference_repo', 'openssl']\n   boot_jdk:\n-    8: '/usr/lib/jvm/java-1.8.0'\n-    11: '/usr/lib/jvm/adoptojdk-java-11'\n-    15: '/usr/lib/jvm/jdk-15+36'\n-    next: '/usr/lib/jvm/jdk-15+36'\n+    version:\n+      8: '8'\n+      11: '11'\n+      15: '15'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ2MTU4NQ=="}, "originalCommit": {"oid": "dfca97c4dabae49462edf50a2ae6634d4507e4d7"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUxMjYzOA==", "bodyText": "This PR changes the default bootjdk directories, so none of them exist unless the machines have been updated.\n${HOME}/bootjdks for most, and /opt/bootjdks for AIX.", "url": "https://github.com/eclipse-openj9/openj9/pull/10779#discussion_r500512638", "createdAt": "2020-10-06T18:32:38Z", "author": {"login": "pshipton"}, "path": "buildenv/jenkins/variables/defaults.yml", "diffHunk": "@@ -432,12 +435,15 @@ x86-64_linux_valhalla:\n # Linux Aarch 64bits Compressed Pointers\n #========================================#\n aarch64_linux:\n-  extends: ['debuginfo', 'freemarker', 'openjdk_reference_repo', 'openssl']\n+  extends: ['boot_jdk_default', 'debuginfo', 'freemarker', 'openjdk_reference_repo', 'openssl']\n   boot_jdk:\n-    8: '/usr/lib/jvm/java-1.8.0'\n-    11: '/usr/lib/jvm/adoptojdk-java-11'\n-    15: '/usr/lib/jvm/jdk-15+36'\n-    next: '/usr/lib/jvm/jdk-15+36'\n+    version:\n+      8: '8'\n+      11: '11'\n+      15: '15'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ2MTU4NQ=="}, "originalCommit": {"oid": "dfca97c4dabae49462edf50a2ae6634d4507e4d7"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUxOTc4MA==", "bodyText": "Correct, for the single aarch machine I have already copied the bootjdk to the new location.\n[jenkins@cent7-arm8-1 ~]$ ll bootjdks/\ntotal 12\ndrwxrwxr-x 9 jenkins jenkins 4096 Oct  6 05:06 jdk11\ndrwxrwxr-x 9 jenkins jenkins 4096 Oct  6 12:22 jdk15\ndrwxrwxr-x 7 jenkins jenkins 4096 Oct  6 12:25 jdk8", "url": "https://github.com/eclipse-openj9/openj9/pull/10779#discussion_r500519780", "createdAt": "2020-10-06T18:44:32Z", "author": {"login": "AdamBrousseau"}, "path": "buildenv/jenkins/variables/defaults.yml", "diffHunk": "@@ -432,12 +435,15 @@ x86-64_linux_valhalla:\n # Linux Aarch 64bits Compressed Pointers\n #========================================#\n aarch64_linux:\n-  extends: ['debuginfo', 'freemarker', 'openjdk_reference_repo', 'openssl']\n+  extends: ['boot_jdk_default', 'debuginfo', 'freemarker', 'openjdk_reference_repo', 'openssl']\n   boot_jdk:\n-    8: '/usr/lib/jvm/java-1.8.0'\n-    11: '/usr/lib/jvm/adoptojdk-java-11'\n-    15: '/usr/lib/jvm/jdk-15+36'\n-    next: '/usr/lib/jvm/jdk-15+36'\n+    version:\n+      8: '8'\n+      11: '11'\n+      15: '15'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ2MTU4NQ=="}, "originalCommit": {"oid": "dfca97c4dabae49462edf50a2ae6634d4507e4d7"}, "originalPosition": 108}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1275, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}