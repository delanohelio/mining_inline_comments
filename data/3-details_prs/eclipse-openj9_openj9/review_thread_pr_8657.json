{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5NzU3MjI1", "number": 8657, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwMzo1NTo1M1rODi74JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTo1ODozNlrODlkGfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3OTU5MjA0OnYy", "diffSide": "RIGHT", "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwMzo1NTo1M1rOFudi1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwMjowNzo0M1rOFvnc7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI2Mjg2OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\tif ( lookupClass.getName().startsWith(\"java.lang.invoke.\")) {  //$NON-NLS-1$\n          \n          \n            \n            \t\t\t\tif (lookupClass.getName().startsWith(\"java.lang.invoke.\")) {  //$NON-NLS-1$", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#discussion_r384262868", "createdAt": "2020-02-26T03:55:53Z", "author": {"login": "DanHeidinga"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -180,10 +184,41 @@\n \t\tstatic Lookup IMPL_LOOKUP = internalPrivilegedLookup; /* hack for b56 of lambda-dev */\n \t\t\n \t\t/* Access token used in lookups - Object for public lookup */\n+\t\t/*[IF Java14]*/\n+\t\tfinal Class<?> prevAccessClass;\n+\t\t/*[ENDIF] Java14*/\n \t\tfinal Class<?> accessClass;\n \t\tfinal int accessMode;\n \t\tprivate final  boolean performSecurityCheck;\n \t\t\n+\t\t/*[IF Java14]*/\n+\t\tLookup(Class<?> lookupClass, Class<?> prevLookupClass, int lookupMode, boolean doCheck) {\n+\t\t\tthis.performSecurityCheck = doCheck;\n+\t\t\tif (doCheck && (INTERNAL_PRIVILEGED != lookupMode)) {\n+\t\t\t\tif ( lookupClass.getName().startsWith(\"java.lang.invoke.\")) {  //$NON-NLS-1$", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "276e2b4557b746f86a4ede7c23e0b543f5acaee7"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ3Mzc3NA==", "bodyText": "Fixed.", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#discussion_r385473774", "createdAt": "2020-02-28T02:07:43Z", "author": {"login": "ChengJin01"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -180,10 +184,41 @@\n \t\tstatic Lookup IMPL_LOOKUP = internalPrivilegedLookup; /* hack for b56 of lambda-dev */\n \t\t\n \t\t/* Access token used in lookups - Object for public lookup */\n+\t\t/*[IF Java14]*/\n+\t\tfinal Class<?> prevAccessClass;\n+\t\t/*[ENDIF] Java14*/\n \t\tfinal Class<?> accessClass;\n \t\tfinal int accessMode;\n \t\tprivate final  boolean performSecurityCheck;\n \t\t\n+\t\t/*[IF Java14]*/\n+\t\tLookup(Class<?> lookupClass, Class<?> prevLookupClass, int lookupMode, boolean doCheck) {\n+\t\t\tthis.performSecurityCheck = doCheck;\n+\t\t\tif (doCheck && (INTERNAL_PRIVILEGED != lookupMode)) {\n+\t\t\t\tif ( lookupClass.getName().startsWith(\"java.lang.invoke.\")) {  //$NON-NLS-1$", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI2Mjg2OA=="}, "originalCommit": {"oid": "276e2b4557b746f86a4ede7c23e0b543f5acaee7"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3OTYwNTEyOnYy", "diffSide": "RIGHT", "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNDowNjoxOVrOFudqlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxOTozODozMVrOFxTyuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI2NDg1Mg==", "bodyText": "@JasonFengJ9 Any thoughts on whether there's a cleaner way to do the jcl preprocessor tags here with less duplication?", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#discussion_r384264852", "createdAt": "2020-02-26T04:06:19Z", "author": {"login": "DanHeidinga"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -170,7 +170,11 @@\n \t\t\n \t\t/* single cached value of public Lookup object */\n \t\t/*[IF Sidecar19-SE-OpenJ9]\n+\t\t/*[IF Java14]*/\n+\t\tstatic Lookup PUBLIC_LOOKUP = new Lookup(Object.class, Lookup.UNCONDITIONAL);\n+\t\t/*[ELSE]*/\n \t\tstatic Lookup PUBLIC_LOOKUP = new Lookup(Object.class, Lookup.PUBLIC | Lookup.UNCONDITIONAL);\n+\t\t/*[ENDIF] Java14 */\n \t\t/*[ELSE]*/\n \t\tstatic Lookup PUBLIC_LOOKUP = new Lookup(Object.class, Lookup.PUBLIC);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "276e2b4557b746f86a4ede7c23e0b543f5acaee7"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEyMzU2Mw==", "bodyText": "Sincere apology for late response, somehow I didn't catch the git notification (and strangely it didn't show up with mention query in the past).\nI think JPP tags could be organized as following:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tstatic Lookup PUBLIC_LOOKUP = new Lookup(Object.class, Lookup.PUBLIC);\n          \n          \n            \n            \t\tstatic final int mhMask = \n          \n          \n            \n            \t\t/*[IF Java11]\n          \n          \n            \n            \t\t/*[IF Java14]*/\n          \n          \n            \n            \t\tLookup.UNCONDITIONAL;\n          \n          \n            \n            \t\t/*[ELSE]*/\n          \n          \n            \n            \t\tLookup.PUBLIC | Lookup.UNCONDITIONAL;\n          \n          \n            \n            \t\t/*[ENDIF] Java14 */\n          \n          \n            \n            \t\t/*[ELSE] Java11 */\n          \n          \n            \n            \t\tLookup.PUBLIC;\n          \n          \n            \n            \t\t/*[ENDIF] Java11 */\n          \n          \n            \n            \t\tstatic Lookup PUBLIC_LOOKUP = new Lookup(Object.class, mhMask);\n          \n      \n    \n    \n  \n\nAlternatively static final int mhMask =  could be moved within the JPP decoration to avoid the actual code like\n\t\tstatic final int mhMask = \n\t\tLookup.PUBLIC;", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#discussion_r387123563", "createdAt": "2020-03-03T16:05:47Z", "author": {"login": "JasonFengJ9"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -170,7 +170,11 @@\n \t\t\n \t\t/* single cached value of public Lookup object */\n \t\t/*[IF Sidecar19-SE-OpenJ9]\n+\t\t/*[IF Java14]*/\n+\t\tstatic Lookup PUBLIC_LOOKUP = new Lookup(Object.class, Lookup.UNCONDITIONAL);\n+\t\t/*[ELSE]*/\n \t\tstatic Lookup PUBLIC_LOOKUP = new Lookup(Object.class, Lookup.PUBLIC | Lookup.UNCONDITIONAL);\n+\t\t/*[ENDIF] Java14 */\n \t\t/*[ELSE]*/\n \t\tstatic Lookup PUBLIC_LOOKUP = new Lookup(Object.class, Lookup.PUBLIC);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI2NDg1Mg=="}, "originalCommit": {"oid": "276e2b4557b746f86a4ede7c23e0b543f5acaee7"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE4MjE4OA==", "bodyText": "I will update the code against the suggestion above by @JasonFengJ9 if there is no other concern on the format.", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#discussion_r387182188", "createdAt": "2020-03-03T17:36:07Z", "author": {"login": "ChengJin01"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -170,7 +170,11 @@\n \t\t\n \t\t/* single cached value of public Lookup object */\n \t\t/*[IF Sidecar19-SE-OpenJ9]\n+\t\t/*[IF Java14]*/\n+\t\tstatic Lookup PUBLIC_LOOKUP = new Lookup(Object.class, Lookup.UNCONDITIONAL);\n+\t\t/*[ELSE]*/\n \t\tstatic Lookup PUBLIC_LOOKUP = new Lookup(Object.class, Lookup.PUBLIC | Lookup.UNCONDITIONAL);\n+\t\t/*[ENDIF] Java14 */\n \t\t/*[ELSE]*/\n \t\tstatic Lookup PUBLIC_LOOKUP = new Lookup(Object.class, Lookup.PUBLIC);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI2NDg1Mg=="}, "originalCommit": {"oid": "276e2b4557b746f86a4ede7c23e0b543f5acaee7"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI0ODgyNQ==", "bodyText": "The code there has been updated as suggested above.", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#discussion_r387248825", "createdAt": "2020-03-03T19:38:31Z", "author": {"login": "ChengJin01"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -170,7 +170,11 @@\n \t\t\n \t\t/* single cached value of public Lookup object */\n \t\t/*[IF Sidecar19-SE-OpenJ9]\n+\t\t/*[IF Java14]*/\n+\t\tstatic Lookup PUBLIC_LOOKUP = new Lookup(Object.class, Lookup.UNCONDITIONAL);\n+\t\t/*[ELSE]*/\n \t\tstatic Lookup PUBLIC_LOOKUP = new Lookup(Object.class, Lookup.PUBLIC | Lookup.UNCONDITIONAL);\n+\t\t/*[ENDIF] Java14 */\n \t\t/*[ELSE]*/\n \t\tstatic Lookup PUBLIC_LOOKUP = new Lookup(Object.class, Lookup.PUBLIC);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI2NDg1Mg=="}, "originalCommit": {"oid": "276e2b4557b746f86a4ede7c23e0b543f5acaee7"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3OTYwNzMzOnYy", "diffSide": "RIGHT", "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNDowODowMVrOFudr1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwMjowOTowMVrOFvneVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI2NTE3Mw==", "bodyText": "Why doesn't this forward to the new ctor:\n\t\tLookup(Class<?> lookupClass, Class<?> prevLookupClass, int lookupMode, boolean doCheck) {\n?", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#discussion_r384265173", "createdAt": "2020-02-26T04:08:01Z", "author": {"login": "DanHeidinga"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -180,10 +184,41 @@\n \t\tstatic Lookup IMPL_LOOKUP = internalPrivilegedLookup; /* hack for b56 of lambda-dev */\n \t\t\n \t\t/* Access token used in lookups - Object for public lookup */\n+\t\t/*[IF Java14]*/\n+\t\tfinal Class<?> prevAccessClass;\n+\t\t/*[ENDIF] Java14*/\n \t\tfinal Class<?> accessClass;\n \t\tfinal int accessMode;\n \t\tprivate final  boolean performSecurityCheck;\n \t\t\n+\t\t/*[IF Java14]*/\n+\t\tLookup(Class<?> lookupClass, Class<?> prevLookupClass, int lookupMode, boolean doCheck) {\n+\t\t\tthis.performSecurityCheck = doCheck;\n+\t\t\tif (doCheck && (INTERNAL_PRIVILEGED != lookupMode)) {\n+\t\t\t\tif ( lookupClass.getName().startsWith(\"java.lang.invoke.\")) {  //$NON-NLS-1$\n+\t\t\t\t\t/*[MSG \"K0588\", \"Illegal Lookup object - originated from java.lang.invoke: {0}\"]*/\n+\t\t\t\t\tthrow new IllegalArgumentException(com.ibm.oti.util.Msg.getString(\"K0588\", lookupClass.getName())); //$NON-NLS-1$\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\taccessClass = lookupClass;\n+\t\t\tprevAccessClass = prevLookupClass;\n+\t\t\taccessMode = lookupMode;\n+\t\t}\n+\t\t\n+\t\tLookup(Class<?> lookupClass, Class<?> prevLookupClass, int lookupMode) {\n+\t\t\tthis(lookupClass, prevLookupClass, lookupMode, true);\n+\t\t}\n+\t\t\n+\t\tLookup(Class<?> lookupClass, Class<?> prevLookupClass) {\n+\t\t\tthis(lookupClass, prevLookupClass, FULL_ACCESS_MASK, true);\n+\t\t}\n+\t\t\n+\t\tLookup(Class<?> lookupClass, Class<?> prevLookupClass, boolean performSecurityCheck) {\n+\t\t\t this(lookupClass, prevLookupClass, FULL_ACCESS_MASK, performSecurityCheck);\n+\t\t}\n+\t\t/*[ENDIF] Java14*/\n+\t\t\n \t\tLookup(Class<?> lookupClass, int lookupMode, boolean doCheck) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "276e2b4557b746f86a4ede7c23e0b543f5acaee7"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ3NDEzMw==", "bodyText": "Agreed and updated as follows:\n\t\tLookup(Class<?> lookupClass, int lookupMode, boolean doCheck) {\n\t\t\tthis(lookupClass, null, lookupMode, doCheck);\n\t\t}", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#discussion_r385474133", "createdAt": "2020-02-28T02:09:01Z", "author": {"login": "ChengJin01"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -180,10 +184,41 @@\n \t\tstatic Lookup IMPL_LOOKUP = internalPrivilegedLookup; /* hack for b56 of lambda-dev */\n \t\t\n \t\t/* Access token used in lookups - Object for public lookup */\n+\t\t/*[IF Java14]*/\n+\t\tfinal Class<?> prevAccessClass;\n+\t\t/*[ENDIF] Java14*/\n \t\tfinal Class<?> accessClass;\n \t\tfinal int accessMode;\n \t\tprivate final  boolean performSecurityCheck;\n \t\t\n+\t\t/*[IF Java14]*/\n+\t\tLookup(Class<?> lookupClass, Class<?> prevLookupClass, int lookupMode, boolean doCheck) {\n+\t\t\tthis.performSecurityCheck = doCheck;\n+\t\t\tif (doCheck && (INTERNAL_PRIVILEGED != lookupMode)) {\n+\t\t\t\tif ( lookupClass.getName().startsWith(\"java.lang.invoke.\")) {  //$NON-NLS-1$\n+\t\t\t\t\t/*[MSG \"K0588\", \"Illegal Lookup object - originated from java.lang.invoke: {0}\"]*/\n+\t\t\t\t\tthrow new IllegalArgumentException(com.ibm.oti.util.Msg.getString(\"K0588\", lookupClass.getName())); //$NON-NLS-1$\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\taccessClass = lookupClass;\n+\t\t\tprevAccessClass = prevLookupClass;\n+\t\t\taccessMode = lookupMode;\n+\t\t}\n+\t\t\n+\t\tLookup(Class<?> lookupClass, Class<?> prevLookupClass, int lookupMode) {\n+\t\t\tthis(lookupClass, prevLookupClass, lookupMode, true);\n+\t\t}\n+\t\t\n+\t\tLookup(Class<?> lookupClass, Class<?> prevLookupClass) {\n+\t\t\tthis(lookupClass, prevLookupClass, FULL_ACCESS_MASK, true);\n+\t\t}\n+\t\t\n+\t\tLookup(Class<?> lookupClass, Class<?> prevLookupClass, boolean performSecurityCheck) {\n+\t\t\t this(lookupClass, prevLookupClass, FULL_ACCESS_MASK, performSecurityCheck);\n+\t\t}\n+\t\t/*[ENDIF] Java14*/\n+\t\t\n \t\tLookup(Class<?> lookupClass, int lookupMode, boolean doCheck) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI2NTE3Mw=="}, "originalCommit": {"oid": "276e2b4557b746f86a4ede7c23e0b543f5acaee7"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3OTYwODk4OnYy", "diffSide": "RIGHT", "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNDowOToyNVrOFuds7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwMjowOTozOVrOFvne4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI2NTQ1Mg==", "bodyText": "Are all the new forms of these ctors used?  Let's only add the ones we actually need", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#discussion_r384265452", "createdAt": "2020-02-26T04:09:25Z", "author": {"login": "DanHeidinga"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -180,10 +184,41 @@\n \t\tstatic Lookup IMPL_LOOKUP = internalPrivilegedLookup; /* hack for b56 of lambda-dev */\n \t\t\n \t\t/* Access token used in lookups - Object for public lookup */\n+\t\t/*[IF Java14]*/\n+\t\tfinal Class<?> prevAccessClass;\n+\t\t/*[ENDIF] Java14*/\n \t\tfinal Class<?> accessClass;\n \t\tfinal int accessMode;\n \t\tprivate final  boolean performSecurityCheck;\n \t\t\n+\t\t/*[IF Java14]*/\n+\t\tLookup(Class<?> lookupClass, Class<?> prevLookupClass, int lookupMode, boolean doCheck) {\n+\t\t\tthis.performSecurityCheck = doCheck;\n+\t\t\tif (doCheck && (INTERNAL_PRIVILEGED != lookupMode)) {\n+\t\t\t\tif ( lookupClass.getName().startsWith(\"java.lang.invoke.\")) {  //$NON-NLS-1$\n+\t\t\t\t\t/*[MSG \"K0588\", \"Illegal Lookup object - originated from java.lang.invoke: {0}\"]*/\n+\t\t\t\t\tthrow new IllegalArgumentException(com.ibm.oti.util.Msg.getString(\"K0588\", lookupClass.getName())); //$NON-NLS-1$\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\taccessClass = lookupClass;\n+\t\t\tprevAccessClass = prevLookupClass;\n+\t\t\taccessMode = lookupMode;\n+\t\t}\n+\t\t\n+\t\tLookup(Class<?> lookupClass, Class<?> prevLookupClass, int lookupMode) {\n+\t\t\tthis(lookupClass, prevLookupClass, lookupMode, true);\n+\t\t}\n+\t\t\n+\t\tLookup(Class<?> lookupClass, Class<?> prevLookupClass) {\n+\t\t\tthis(lookupClass, prevLookupClass, FULL_ACCESS_MASK, true);\n+\t\t}\n+\t\t\n+\t\tLookup(Class<?> lookupClass, Class<?> prevLookupClass, boolean performSecurityCheck) {\n+\t\t\t this(lookupClass, prevLookupClass, FULL_ACCESS_MASK, performSecurityCheck);\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "276e2b4557b746f86a4ede7c23e0b543f5acaee7"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ3NDI3NA==", "bodyText": "Removed unused constructors as suggested above.", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#discussion_r385474274", "createdAt": "2020-02-28T02:09:39Z", "author": {"login": "ChengJin01"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -180,10 +184,41 @@\n \t\tstatic Lookup IMPL_LOOKUP = internalPrivilegedLookup; /* hack for b56 of lambda-dev */\n \t\t\n \t\t/* Access token used in lookups - Object for public lookup */\n+\t\t/*[IF Java14]*/\n+\t\tfinal Class<?> prevAccessClass;\n+\t\t/*[ENDIF] Java14*/\n \t\tfinal Class<?> accessClass;\n \t\tfinal int accessMode;\n \t\tprivate final  boolean performSecurityCheck;\n \t\t\n+\t\t/*[IF Java14]*/\n+\t\tLookup(Class<?> lookupClass, Class<?> prevLookupClass, int lookupMode, boolean doCheck) {\n+\t\t\tthis.performSecurityCheck = doCheck;\n+\t\t\tif (doCheck && (INTERNAL_PRIVILEGED != lookupMode)) {\n+\t\t\t\tif ( lookupClass.getName().startsWith(\"java.lang.invoke.\")) {  //$NON-NLS-1$\n+\t\t\t\t\t/*[MSG \"K0588\", \"Illegal Lookup object - originated from java.lang.invoke: {0}\"]*/\n+\t\t\t\t\tthrow new IllegalArgumentException(com.ibm.oti.util.Msg.getString(\"K0588\", lookupClass.getName())); //$NON-NLS-1$\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\taccessClass = lookupClass;\n+\t\t\tprevAccessClass = prevLookupClass;\n+\t\t\taccessMode = lookupMode;\n+\t\t}\n+\t\t\n+\t\tLookup(Class<?> lookupClass, Class<?> prevLookupClass, int lookupMode) {\n+\t\t\tthis(lookupClass, prevLookupClass, lookupMode, true);\n+\t\t}\n+\t\t\n+\t\tLookup(Class<?> lookupClass, Class<?> prevLookupClass) {\n+\t\t\tthis(lookupClass, prevLookupClass, FULL_ACCESS_MASK, true);\n+\t\t}\n+\t\t\n+\t\tLookup(Class<?> lookupClass, Class<?> prevLookupClass, boolean performSecurityCheck) {\n+\t\t\t this(lookupClass, prevLookupClass, FULL_ACCESS_MASK, performSecurityCheck);\n+\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI2NTQ1Mg=="}, "originalCommit": {"oid": "276e2b4557b746f86a4ede7c23e0b543f5acaee7"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NTUyNDUzOnYy", "diffSide": "RIGHT", "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNTozMDo0OVrOFvV-ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwMjoxNDozMVrOFvnjdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE4NzQ4Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#discussion_r385187486", "createdAt": "2020-02-27T15:30:49Z", "author": {"login": "DanHeidinga"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -558,7 +632,7 @@ private void checkClassAccess(Class<?> targetClass) throws IllegalAccessExceptio\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n-\n+\t\t\t", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a5357a283db7f2a2ad3ff949ff477b30f1697e9"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ3NTQ0NQ==", "bodyText": "Fixed.", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#discussion_r385475445", "createdAt": "2020-02-28T02:14:31Z", "author": {"login": "ChengJin01"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -558,7 +632,7 @@ private void checkClassAccess(Class<?> targetClass) throws IllegalAccessExceptio\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n-\n+\t\t\t", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE4NzQ4Ng=="}, "originalCommit": {"oid": "0a5357a283db7f2a2ad3ff949ff477b30f1697e9"}, "originalPosition": 171}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTA5ODIxOnYy", "diffSide": "RIGHT", "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMDozNjowMFrOFwuWqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTowNzoyMFrOFwvQ6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYzNTQzMg==", "bodyText": "Use Objects.requireNonNull(lookupClass) here rather than the explicit method call for a null check", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#discussion_r386635432", "createdAt": "2020-03-02T20:36:00Z", "author": {"login": "DanHeidinga"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -1100,29 +1220,55 @@ public MethodHandle findStaticSetter(Class<?> clazz, String fieldName, Class<?>\n \t\t\treturn handle;\n \t\t}\n \t\t\n+\t\t/*[IF Java14]*/\n \t\t/**\n \t\t * Create a lookup on the request class.  The resulting lookup will have no more \n \t\t * access privileges than the original.\n \t\t * \n \t\t * @param lookupClass - the class to create the lookup on\n \t\t * @return a new MethodHandles.Lookup object\n+\t\t * @throws NullPointerException - if lookupClass is null\n+\t\t * @throws IllegalArgumentException - if the requested Class is a primitive type or an array class\n \t\t */\n-\t\tpublic MethodHandles.Lookup in(Class<?> lookupClass){\n-\t\t\tlookupClass.getClass();\t// implicit null check\n+\t\tpublic MethodHandles.Lookup in(Class<?> lookupClass) throws NullPointerException, IllegalArgumentException {\n+\t\t/*[ELSE]*/\n+\t\t/**\n+\t\t * Create a lookup on the request class.  The resulting lookup will have no more \n+\t\t * access privileges than the original.\n+\t\t * \n+\t\t * @param lookupClass - the class to create the lookup on\n+\t\t * @return a new MethodHandles.Lookup object\n+\t\t */\n+\t\tpublic MethodHandles.Lookup in(Class<?> lookupClass) {\n+\t\t/*[ENDIF] Java14 */\n+\t\t\tif (Objects.isNull(lookupClass)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "893f1f7dda2a247400c13511aefc4df92fba6253"}, "originalPosition": 270}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY1MDM0Nw==", "bodyText": "Agreed and fixed.", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#discussion_r386650347", "createdAt": "2020-03-02T21:07:20Z", "author": {"login": "ChengJin01"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -1100,29 +1220,55 @@ public MethodHandle findStaticSetter(Class<?> clazz, String fieldName, Class<?>\n \t\t\treturn handle;\n \t\t}\n \t\t\n+\t\t/*[IF Java14]*/\n \t\t/**\n \t\t * Create a lookup on the request class.  The resulting lookup will have no more \n \t\t * access privileges than the original.\n \t\t * \n \t\t * @param lookupClass - the class to create the lookup on\n \t\t * @return a new MethodHandles.Lookup object\n+\t\t * @throws NullPointerException - if lookupClass is null\n+\t\t * @throws IllegalArgumentException - if the requested Class is a primitive type or an array class\n \t\t */\n-\t\tpublic MethodHandles.Lookup in(Class<?> lookupClass){\n-\t\t\tlookupClass.getClass();\t// implicit null check\n+\t\tpublic MethodHandles.Lookup in(Class<?> lookupClass) throws NullPointerException, IllegalArgumentException {\n+\t\t/*[ELSE]*/\n+\t\t/**\n+\t\t * Create a lookup on the request class.  The resulting lookup will have no more \n+\t\t * access privileges than the original.\n+\t\t * \n+\t\t * @param lookupClass - the class to create the lookup on\n+\t\t * @return a new MethodHandles.Lookup object\n+\t\t */\n+\t\tpublic MethodHandles.Lookup in(Class<?> lookupClass) {\n+\t\t/*[ENDIF] Java14 */\n+\t\t\tif (Objects.isNull(lookupClass)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYzNTQzMg=="}, "originalCommit": {"oid": "893f1f7dda2a247400c13511aefc4df92fba6253"}, "originalPosition": 270}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTA5OTg3OnYy", "diffSide": "RIGHT", "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMDozNjozMlrOFwuXqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxOTozNzozM1rOFxTwyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYzNTY4OA==", "bodyText": "What's the expected behaviour of these cases pre-java14?  We may be able to enable this everywhere", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#discussion_r386635688", "createdAt": "2020-03-02T20:36:32Z", "author": {"login": "DanHeidinga"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -1100,29 +1220,55 @@ public MethodHandle findStaticSetter(Class<?> clazz, String fieldName, Class<?>\n \t\t\treturn handle;\n \t\t}\n \t\t\n+\t\t/*[IF Java14]*/\n \t\t/**\n \t\t * Create a lookup on the request class.  The resulting lookup will have no more \n \t\t * access privileges than the original.\n \t\t * \n \t\t * @param lookupClass - the class to create the lookup on\n \t\t * @return a new MethodHandles.Lookup object\n+\t\t * @throws NullPointerException - if lookupClass is null\n+\t\t * @throws IllegalArgumentException - if the requested Class is a primitive type or an array class\n \t\t */\n-\t\tpublic MethodHandles.Lookup in(Class<?> lookupClass){\n-\t\t\tlookupClass.getClass();\t// implicit null check\n+\t\tpublic MethodHandles.Lookup in(Class<?> lookupClass) throws NullPointerException, IllegalArgumentException {\n+\t\t/*[ELSE]*/\n+\t\t/**\n+\t\t * Create a lookup on the request class.  The resulting lookup will have no more \n+\t\t * access privileges than the original.\n+\t\t * \n+\t\t * @param lookupClass - the class to create the lookup on\n+\t\t * @return a new MethodHandles.Lookup object\n+\t\t */\n+\t\tpublic MethodHandles.Lookup in(Class<?> lookupClass) {\n+\t\t/*[ENDIF] Java14 */\n+\t\t\tif (Objects.isNull(lookupClass)) {\n+\t\t\t\t/*[MSG \"K0682\", \"The requested lookup class must not be null\"]*/\n+\t\t\t\tthrow new NullPointerException(com.ibm.oti.util.Msg.getString(\"K0682\")); //$NON-NLS-1$\n+\t\t\t}\n+\t\t\t\n+\t\t\t/*[IF Java14]*/\n+\t\t\tif ((lookupClass == void.class) || lookupClass.isPrimitive() || lookupClass.isArray()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "893f1f7dda2a247400c13511aefc4df92fba6253"}, "originalPosition": 276}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY1NDYwNQ==", "bodyText": "there is no other check on the requested lookup class except the null-check according to the Spec at Java 11, 12 and 13 at\nhttp://cr.openjdk.java.net/~iris/se/11/build/latest/api/java.base/java/lang/invoke/MethodHandles.Lookup.html#in(java.lang.Class)\nhttp://cr.openjdk.java.net/~iris/se/12/build/latest/api/java.base/java/lang/invoke/MethodHandles.Lookup.html#in(java.lang.Class)\nhttp://cr.openjdk.java.net/~iris/se/13/build/latest/api/java.base/java/lang/invoke/MethodHandles.Lookup.html#in(java.lang.Class)\npublic MethodHandles.Lookup in(Class<?> requestedLookupClass)\n...\nThrows:\n    NullPointerException - if the argument is null\n\nagainst the Java 14 Spec:\npublic MethodHandles.Lookup in(Class<?> requestedLookupClass)\n...\nThrows:\n  --> IllegalArgumentException - if requestedLookupClass is a primitive type or void or array class\n    NullPointerException - if the argument is null\n\nAnd such check is not required in other APIs in Java 14 except Lookup::in.\nSo it should never hurt to enable the check here (only internal tests need to be updated to deal with the check)", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#discussion_r386654605", "createdAt": "2020-03-02T21:16:06Z", "author": {"login": "ChengJin01"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -1100,29 +1220,55 @@ public MethodHandle findStaticSetter(Class<?> clazz, String fieldName, Class<?>\n \t\t\treturn handle;\n \t\t}\n \t\t\n+\t\t/*[IF Java14]*/\n \t\t/**\n \t\t * Create a lookup on the request class.  The resulting lookup will have no more \n \t\t * access privileges than the original.\n \t\t * \n \t\t * @param lookupClass - the class to create the lookup on\n \t\t * @return a new MethodHandles.Lookup object\n+\t\t * @throws NullPointerException - if lookupClass is null\n+\t\t * @throws IllegalArgumentException - if the requested Class is a primitive type or an array class\n \t\t */\n-\t\tpublic MethodHandles.Lookup in(Class<?> lookupClass){\n-\t\t\tlookupClass.getClass();\t// implicit null check\n+\t\tpublic MethodHandles.Lookup in(Class<?> lookupClass) throws NullPointerException, IllegalArgumentException {\n+\t\t/*[ELSE]*/\n+\t\t/**\n+\t\t * Create a lookup on the request class.  The resulting lookup will have no more \n+\t\t * access privileges than the original.\n+\t\t * \n+\t\t * @param lookupClass - the class to create the lookup on\n+\t\t * @return a new MethodHandles.Lookup object\n+\t\t */\n+\t\tpublic MethodHandles.Lookup in(Class<?> lookupClass) {\n+\t\t/*[ENDIF] Java14 */\n+\t\t\tif (Objects.isNull(lookupClass)) {\n+\t\t\t\t/*[MSG \"K0682\", \"The requested lookup class must not be null\"]*/\n+\t\t\t\tthrow new NullPointerException(com.ibm.oti.util.Msg.getString(\"K0682\")); //$NON-NLS-1$\n+\t\t\t}\n+\t\t\t\n+\t\t\t/*[IF Java14]*/\n+\t\t\tif ((lookupClass == void.class) || lookupClass.isPrimitive() || lookupClass.isArray()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYzNTY4OA=="}, "originalCommit": {"oid": "893f1f7dda2a247400c13511aefc4df92fba6253"}, "originalPosition": 276}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgwNDk4Mw==", "bodyText": "I used jshell to test an RI JDK 10 as it was conveniently available and it doesn't have the check so we can't enable everywhere:\n$ ../../jdk-10.0.2+13/bin/jshell -J-showversion\nopenjdk version \"10.0.2-adoptopenjdk\" 2018-07-17\nOpenJDK Runtime Environment (build 10.0.2-adoptopenjdk+13)\nOpenJDK 64-Bit Server VM (build 10.0.2-adoptopenjdk+13, mixed mode)\n|  Welcome to JShell -- Version 10.0.2-adoptopenjdk\n|  For an introduction type: /help intro\n\njshell> import java.lang.invoke.*\n\njshell> MethodHandles.Lookup l = MethodHandles.lookup();\nl ==> \n\njshell> l.in(void.class)\n$3 ==> void/public\n\njshell> l.in(int.class)\n$4 ==> int/public\n\njshell> l.in(int[].class)\n$5 ==> [I/public", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#discussion_r386804983", "createdAt": "2020-03-03T05:23:10Z", "author": {"login": "DanHeidinga"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -1100,29 +1220,55 @@ public MethodHandle findStaticSetter(Class<?> clazz, String fieldName, Class<?>\n \t\t\treturn handle;\n \t\t}\n \t\t\n+\t\t/*[IF Java14]*/\n \t\t/**\n \t\t * Create a lookup on the request class.  The resulting lookup will have no more \n \t\t * access privileges than the original.\n \t\t * \n \t\t * @param lookupClass - the class to create the lookup on\n \t\t * @return a new MethodHandles.Lookup object\n+\t\t * @throws NullPointerException - if lookupClass is null\n+\t\t * @throws IllegalArgumentException - if the requested Class is a primitive type or an array class\n \t\t */\n-\t\tpublic MethodHandles.Lookup in(Class<?> lookupClass){\n-\t\t\tlookupClass.getClass();\t// implicit null check\n+\t\tpublic MethodHandles.Lookup in(Class<?> lookupClass) throws NullPointerException, IllegalArgumentException {\n+\t\t/*[ELSE]*/\n+\t\t/**\n+\t\t * Create a lookup on the request class.  The resulting lookup will have no more \n+\t\t * access privileges than the original.\n+\t\t * \n+\t\t * @param lookupClass - the class to create the lookup on\n+\t\t * @return a new MethodHandles.Lookup object\n+\t\t */\n+\t\tpublic MethodHandles.Lookup in(Class<?> lookupClass) {\n+\t\t/*[ENDIF] Java14 */\n+\t\t\tif (Objects.isNull(lookupClass)) {\n+\t\t\t\t/*[MSG \"K0682\", \"The requested lookup class must not be null\"]*/\n+\t\t\t\tthrow new NullPointerException(com.ibm.oti.util.Msg.getString(\"K0682\")); //$NON-NLS-1$\n+\t\t\t}\n+\t\t\t\n+\t\t\t/*[IF Java14]*/\n+\t\t\tif ((lookupClass == void.class) || lookupClass.isPrimitive() || lookupClass.isArray()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYzNTY4OA=="}, "originalCommit": {"oid": "893f1f7dda2a247400c13511aefc4df92fba6253"}, "originalPosition": 276}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgxNTU1MQ==", "bodyText": "I double-checked on RI/Hotspot at JDK 11, 12, 13 and 14 as follows and it turns out only RI JDK14 does the type check.\n\nJDK11\n\n# jdk_11.0.6_10_hotspot/bin/jshell -J-showversion\nopenjdk version \"11.0.6\" 2020-01-14\nOpenJDK Runtime Environment AdoptOpenJDK (build 11.0.6+10)\nOpenJDK 64-Bit Server VM AdoptOpenJDK (build 11.0.6+10, mixed mode)\nMar 02, 2020 9:54:53 PM java.util.prefs.FileSystemPreferences$1 run\nINFO: Created user preferences directory.\n|  Welcome to JShell -- Version 11.0.6\n|  For an introduction type: /help intro\n\njshell> import java.lang.invoke.*\n\njshell> MethodHandles.Lookup l = MethodHandles.lookup();\nl ==>\njshell> l.in(void.class)\n$3 ==> void/public\n\njshell> l.in(int.class)\n$4 ==> int/public\n\njshell> l.in(int[].class)\n$5 ==> [I/public\n\n\nJDK12\n\n# jdk_12.0.2_10_hotspot/bin/jshell -J-showversion\nopenjdk version \"12.0.2\" 2019-07-16\nOpenJDK Runtime Environment AdoptOpenJDK (build 12.0.2+10)\nOpenJDK 64-Bit Server VM AdoptOpenJDK (build 12.0.2+10, mixed mode, sharing)\n|  Welcome to JShell -- Version 12.0.2\n|  For an introduction type: /help intro\n\njshell> import java.lang.invoke.*\n\njshell> MethodHandles.Lookup l = MethodHandles.lookup();\nl ==>\n\njshell> l.in(void.class)\n$3 ==> void/public\n\njshell> l.in(int.class)\n$4 ==> int/public\n\njshell> l.in(int[].class)\n$5 ==> [I/public\n\n3.JDK13\n# jdk_13.0.2_8_hotspot/bin/jshell -J-showversion\nopenjdk version \"13.0.2\" 2020-01-14\nOpenJDK Runtime Environment AdoptOpenJDK (build 13.0.2+8)\nOpenJDK 64-Bit Server VM AdoptOpenJDK (build 13.0.2+8, mixed mode, sharing)\n|  Welcome to JShell -- Version 13.0.2\n|  For an introduction type: /help intro\n\njshell> import java.lang.invoke.*\n\njshell> MethodHandles.Lookup l = MethodHandles.lookup();\nl ==>\n\njshell> l.in(void.class)\n$3 ==> void/public\n\njshell> l.in(int.class)\n$4 ==> int/public\n\njshell> l.in(int[].class)\n$5 ==> [I/public\n\n4.JDK14\n# jdk14_hotspot_04_14_2020/bin/jshell -J-showversion\njava version \"14.0.1\" 2020-04-14\nJava(TM) SE Runtime Environment (build 14.0.1+4)\nJava HotSpot(TM) 64-Bit Server VM (build 14.0.1+4, mixed mode, sharing)\n|  Welcome to JShell -- Version 14.0.1\n|  For an introduction type: /help intro\n\njshell> import java.lang.invoke.*\n\njshell> MethodHandles.Lookup l = MethodHandles.lookup();\nl ==>\n\njshell> l.in(void.class)\n|  Exception java.lang.IllegalArgumentException: void is a primitive class\n|        at MethodHandles$Lookup.in (MethodHandles.java:1476)\n|        at (#3:1)\n\njshell> l.in(int.class)\n|  Exception java.lang.IllegalArgumentException: int is a primitive class\n|        at MethodHandles$Lookup.in (MethodHandles.java:1476)\n|        at (#4:1)\n\njshell> l.in(int[].class)\n|  Exception java.lang.IllegalArgumentException: class [I is an array class\n|        at MethodHandles$Lookup.in (MethodHandles.java:1478)\n|        at (#5:1)\n\nBased on the results above, I will restore the previous changes back to only have the check enabled on JDK14 and remove the test cases that was updated for the type check.", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#discussion_r386815551", "createdAt": "2020-03-03T06:07:31Z", "author": {"login": "ChengJin01"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -1100,29 +1220,55 @@ public MethodHandle findStaticSetter(Class<?> clazz, String fieldName, Class<?>\n \t\t\treturn handle;\n \t\t}\n \t\t\n+\t\t/*[IF Java14]*/\n \t\t/**\n \t\t * Create a lookup on the request class.  The resulting lookup will have no more \n \t\t * access privileges than the original.\n \t\t * \n \t\t * @param lookupClass - the class to create the lookup on\n \t\t * @return a new MethodHandles.Lookup object\n+\t\t * @throws NullPointerException - if lookupClass is null\n+\t\t * @throws IllegalArgumentException - if the requested Class is a primitive type or an array class\n \t\t */\n-\t\tpublic MethodHandles.Lookup in(Class<?> lookupClass){\n-\t\t\tlookupClass.getClass();\t// implicit null check\n+\t\tpublic MethodHandles.Lookup in(Class<?> lookupClass) throws NullPointerException, IllegalArgumentException {\n+\t\t/*[ELSE]*/\n+\t\t/**\n+\t\t * Create a lookup on the request class.  The resulting lookup will have no more \n+\t\t * access privileges than the original.\n+\t\t * \n+\t\t * @param lookupClass - the class to create the lookup on\n+\t\t * @return a new MethodHandles.Lookup object\n+\t\t */\n+\t\tpublic MethodHandles.Lookup in(Class<?> lookupClass) {\n+\t\t/*[ENDIF] Java14 */\n+\t\t\tif (Objects.isNull(lookupClass)) {\n+\t\t\t\t/*[MSG \"K0682\", \"The requested lookup class must not be null\"]*/\n+\t\t\t\tthrow new NullPointerException(com.ibm.oti.util.Msg.getString(\"K0682\")); //$NON-NLS-1$\n+\t\t\t}\n+\t\t\t\n+\t\t\t/*[IF Java14]*/\n+\t\t\tif ((lookupClass == void.class) || lookupClass.isPrimitive() || lookupClass.isArray()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYzNTY4OA=="}, "originalCommit": {"oid": "893f1f7dda2a247400c13511aefc4df92fba6253"}, "originalPosition": 276}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI0ODMyOQ==", "bodyText": "The validity check has only been enabled on JDK14 and the corresponding test case were also disabled on JDK14. Will launch personal builds to see whether it works correctly as expected.", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#discussion_r387248329", "createdAt": "2020-03-03T19:37:33Z", "author": {"login": "ChengJin01"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -1100,29 +1220,55 @@ public MethodHandle findStaticSetter(Class<?> clazz, String fieldName, Class<?>\n \t\t\treturn handle;\n \t\t}\n \t\t\n+\t\t/*[IF Java14]*/\n \t\t/**\n \t\t * Create a lookup on the request class.  The resulting lookup will have no more \n \t\t * access privileges than the original.\n \t\t * \n \t\t * @param lookupClass - the class to create the lookup on\n \t\t * @return a new MethodHandles.Lookup object\n+\t\t * @throws NullPointerException - if lookupClass is null\n+\t\t * @throws IllegalArgumentException - if the requested Class is a primitive type or an array class\n \t\t */\n-\t\tpublic MethodHandles.Lookup in(Class<?> lookupClass){\n-\t\t\tlookupClass.getClass();\t// implicit null check\n+\t\tpublic MethodHandles.Lookup in(Class<?> lookupClass) throws NullPointerException, IllegalArgumentException {\n+\t\t/*[ELSE]*/\n+\t\t/**\n+\t\t * Create a lookup on the request class.  The resulting lookup will have no more \n+\t\t * access privileges than the original.\n+\t\t * \n+\t\t * @param lookupClass - the class to create the lookup on\n+\t\t * @return a new MethodHandles.Lookup object\n+\t\t */\n+\t\tpublic MethodHandles.Lookup in(Class<?> lookupClass) {\n+\t\t/*[ENDIF] Java14 */\n+\t\t\tif (Objects.isNull(lookupClass)) {\n+\t\t\t\t/*[MSG \"K0682\", \"The requested lookup class must not be null\"]*/\n+\t\t\t\tthrow new NullPointerException(com.ibm.oti.util.Msg.getString(\"K0682\")); //$NON-NLS-1$\n+\t\t\t}\n+\t\t\t\n+\t\t\t/*[IF Java14]*/\n+\t\t\tif ((lookupClass == void.class) || lookupClass.isPrimitive() || lookupClass.isArray()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYzNTY4OA=="}, "originalCommit": {"oid": "893f1f7dda2a247400c13511aefc4df92fba6253"}, "originalPosition": 276}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTEwOTY4OnYy", "diffSide": "RIGHT", "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMDo0MDowNlrOFwud3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMToxNzowMFrOFwvjLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYzNzI3OA==", "bodyText": "This is a good use case for a switch statement:\nswitch(dropMode) {\ncase PUBLIC:\ncase MODULE:\ncase PACKAGE:\ncase PRIVATE:\ncase PROTECTED:\ncase UNCONDITIONAL:\n  /* dropMode is OK */\n  break;\ndefault:\n\t/*[MSG \"K065R\", \"The requested lookup mode: 0x{0} is not one of the existing access modes: 0x{1}\"]*/\n \tthrow new IllegalArgumentException(com.ibm.oti.util.Msg.getString(\"K065R\", Integer.toHexString(dropMode), Integer.toHexString(fullAccessMode))); \n}", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#discussion_r386637278", "createdAt": "2020-03-02T20:40:06Z", "author": {"login": "DanHeidinga"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -1865,11 +2082,30 @@ public VarHandle unreflectVarHandle(Field field) throws IllegalAccessException {\n \t\t\t * as it is not set up for lookup objects by default.\n \t\t\t */\n \t\t\tint fullAccessMode = FULL_ACCESS_MASK | MODULE | UNCONDITIONAL;\n+\t\t\t\n+\t\t\tif ((dropMode != PUBLIC)\n+\t\t\t\t\t&& (dropMode != MODULE)\n+\t\t\t\t\t&& (dropMode != PACKAGE)\n+\t\t\t\t\t&& (dropMode != PRIVATE)\n+\t\t\t\t\t&& (dropMode != PROTECTED)\n+\t\t\t\t\t&& (dropMode != UNCONDITIONAL)\n+\t\t\t) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "893f1f7dda2a247400c13511aefc4df92fba6253"}, "originalPosition": 452}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY1NTAyMg==", "bodyText": "Agreed and replaced with switch statement.", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#discussion_r386655022", "createdAt": "2020-03-02T21:17:00Z", "author": {"login": "ChengJin01"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -1865,11 +2082,30 @@ public VarHandle unreflectVarHandle(Field field) throws IllegalAccessException {\n \t\t\t * as it is not set up for lookup objects by default.\n \t\t\t */\n \t\t\tint fullAccessMode = FULL_ACCESS_MASK | MODULE | UNCONDITIONAL;\n+\t\t\t\n+\t\t\tif ((dropMode != PUBLIC)\n+\t\t\t\t\t&& (dropMode != MODULE)\n+\t\t\t\t\t&& (dropMode != PACKAGE)\n+\t\t\t\t\t&& (dropMode != PRIVATE)\n+\t\t\t\t\t&& (dropMode != PROTECTED)\n+\t\t\t\t\t&& (dropMode != UNCONDITIONAL)\n+\t\t\t) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYzNzI3OA=="}, "originalCommit": {"oid": "893f1f7dda2a247400c13511aefc4df92fba6253"}, "originalPosition": 452}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTA0NzM3OnYy", "diffSide": "RIGHT", "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxOTo0NToxOFrOFxUAuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxOTo0Njo1OFrOFxUELg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1MjQwOA==", "bodyText": "nitpick : pls add Java14 here.", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#discussion_r387252408", "createdAt": "2020-03-03T19:45:18Z", "author": {"login": "JasonFengJ9"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -169,45 +169,60 @@\n \t\tstatic final int VARARGS = 0x80;\n \t\t\n \t\t/* single cached value of public Lookup object */\n-\t\t/*[IF Sidecar19-SE-OpenJ9]\n-\t\tstatic Lookup PUBLIC_LOOKUP = new Lookup(Object.class, Lookup.PUBLIC | Lookup.UNCONDITIONAL);\n+\t\tstatic final int mhMask = \n+\t\t/*[IF Java11]*/\n+\t\t/*[IF Java14]*/\n+\t\tLookup.UNCONDITIONAL;\n \t\t/*[ELSE]*/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99faaccd43d84954406e90e6bca82f09878346b3"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1MzI5NA==", "bodyText": "Fixed.", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#discussion_r387253294", "createdAt": "2020-03-03T19:46:58Z", "author": {"login": "ChengJin01"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -169,45 +169,60 @@\n \t\tstatic final int VARARGS = 0x80;\n \t\t\n \t\t/* single cached value of public Lookup object */\n-\t\t/*[IF Sidecar19-SE-OpenJ9]\n-\t\tstatic Lookup PUBLIC_LOOKUP = new Lookup(Object.class, Lookup.PUBLIC | Lookup.UNCONDITIONAL);\n+\t\tstatic final int mhMask = \n+\t\t/*[IF Java11]*/\n+\t\t/*[IF Java14]*/\n+\t\tLookup.UNCONDITIONAL;\n \t\t/*[ELSE]*/", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1MjQwOA=="}, "originalCommit": {"oid": "99faaccd43d84954406e90e6bca82f09878346b3"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjI2NjgzOnYy", "diffSide": "RIGHT", "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNTo0OTozMFrOFxyxQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMDo1Mjo0NVrOFyjv5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc1NjM1Mw==", "bodyText": "void.class.isPrimitive() is true\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tif ((lookupClass == void.class) || lookupClass.isPrimitive() || lookupClass.isArray()) {\n          \n          \n            \n            \t\t\tif (lookupClass.isPrimitive() || lookupClass.isArray()) {", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#discussion_r387756353", "createdAt": "2020-03-04T15:49:30Z", "author": {"login": "DanHeidinga"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -1100,29 +1233,52 @@ public MethodHandle findStaticSetter(Class<?> clazz, String fieldName, Class<?>\n \t\t\treturn handle;\n \t\t}\n \t\t\n+\t\t/*[IF Java14]*/\n+\t\t/**\n+\t\t * Create a lookup on the request class.  The resulting lookup will have no more \n+\t\t * access privileges than the original.\n+\t\t * \n+\t\t * @param lookupClass - the class to create the lookup on\n+\t\t * @return a new MethodHandles.Lookup object\n+\t\t * @throws NullPointerException - if lookupClass is null\n+\t\t * @throws IllegalArgumentException - if the requested Class is a primitive type or an array class\n+\t\t */\n+\t\tpublic MethodHandles.Lookup in(Class<?> lookupClass) throws NullPointerException, IllegalArgumentException {\n+\t\t/*[ELSE]*/\n \t\t/**\n \t\t * Create a lookup on the request class.  The resulting lookup will have no more \n \t\t * access privileges than the original.\n \t\t * \n \t\t * @param lookupClass - the class to create the lookup on\n \t\t * @return a new MethodHandles.Lookup object\n \t\t */\n-\t\tpublic MethodHandles.Lookup in(Class<?> lookupClass){\n-\t\t\tlookupClass.getClass();\t// implicit null check\n+\t\tpublic MethodHandles.Lookup in(Class<?> lookupClass) {\n+\t\t/*[ENDIF] Java14 */\n+\t\t\tObjects.requireNonNull(lookupClass);\n+\t\t\t\n+\t\t\t/*[IF Java14]*/\n+\t\t\tif ((lookupClass == void.class) || lookupClass.isPrimitive() || lookupClass.isArray()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85bb47f369d72e79486efa6a58c216236a787fd2"}, "originalPosition": 318}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU1ODgyMw==", "bodyText": "Agreed and removed lookupClass == void.class against the suggestion above.", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#discussion_r388558823", "createdAt": "2020-03-05T20:52:45Z", "author": {"login": "ChengJin01"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -1100,29 +1233,52 @@ public MethodHandle findStaticSetter(Class<?> clazz, String fieldName, Class<?>\n \t\t\treturn handle;\n \t\t}\n \t\t\n+\t\t/*[IF Java14]*/\n+\t\t/**\n+\t\t * Create a lookup on the request class.  The resulting lookup will have no more \n+\t\t * access privileges than the original.\n+\t\t * \n+\t\t * @param lookupClass - the class to create the lookup on\n+\t\t * @return a new MethodHandles.Lookup object\n+\t\t * @throws NullPointerException - if lookupClass is null\n+\t\t * @throws IllegalArgumentException - if the requested Class is a primitive type or an array class\n+\t\t */\n+\t\tpublic MethodHandles.Lookup in(Class<?> lookupClass) throws NullPointerException, IllegalArgumentException {\n+\t\t/*[ELSE]*/\n \t\t/**\n \t\t * Create a lookup on the request class.  The resulting lookup will have no more \n \t\t * access privileges than the original.\n \t\t * \n \t\t * @param lookupClass - the class to create the lookup on\n \t\t * @return a new MethodHandles.Lookup object\n \t\t */\n-\t\tpublic MethodHandles.Lookup in(Class<?> lookupClass){\n-\t\t\tlookupClass.getClass();\t// implicit null check\n+\t\tpublic MethodHandles.Lookup in(Class<?> lookupClass) {\n+\t\t/*[ENDIF] Java14 */\n+\t\t\tObjects.requireNonNull(lookupClass);\n+\t\t\t\n+\t\t\t/*[IF Java14]*/\n+\t\t\tif ((lookupClass == void.class) || lookupClass.isPrimitive() || lookupClass.isArray()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc1NjM1Mw=="}, "originalCommit": {"oid": "85bb47f369d72e79486efa6a58c216236a787fd2"}, "originalPosition": 318}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjM0NzM3OnYy", "diffSide": "RIGHT", "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNjoxNTozNFrOFyaHDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMDozMjoxOFrOFyjFTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQwMDkwOQ==", "bodyText": "Why would dropLookupMode ever modify the previousAccessClass?", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#discussion_r388400909", "createdAt": "2020-03-05T16:15:34Z", "author": {"login": "DanHeidinga"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -1865,47 +2136,109 @@ public VarHandle unreflectVarHandle(Field field) throws IllegalAccessException {\n \t\t\t * as it is not set up for lookup objects by default.\n \t\t\t */\n \t\t\tint fullAccessMode = FULL_ACCESS_MASK | MODULE | UNCONDITIONAL;\n+\t\t\t\n+\t\t\tswitch(dropMode) {\n+\t\t\tcase PUBLIC:\n+\t\t\tcase MODULE:\n+\t\t\tcase PACKAGE:\n+\t\t\tcase PRIVATE:\n+\t\t\tcase PROTECTED:\n+\t\t\tcase UNCONDITIONAL:\n+\t\t\t\t/* dropMode is OK */\n+\t\t\t\tbreak;\n+\t\t\tdefault:\n+\t\t\t\t/*[MSG \"K065R\", \"The requested lookup mode: 0x{0} is not one of the existing access modes: 0x{1}\"]*/\n+\t\t\t\tthrow new IllegalArgumentException(com.ibm.oti.util.Msg.getString(\"K065R\", Integer.toHexString(dropMode), Integer.toHexString(fullAccessMode))); //$NON-NLS-1$\n+\t\t\t}\n \n+\t\t\t/*[IF Java14]*/\n+\t\t\t/* The lookup object has to discard the protected access by default */\n+\t\t\tint newAccessMode = accessMode & ~PROTECTED;\n+\t\t\t/*[ELSE]*/\n \t\t\t/* The lookup object has to discard the protected and unconditional access by default */\n \t\t\tint newAccessMode = accessMode & ~(PROTECTED | UNCONDITIONAL);\n+\t\t\t/*[ENDIF] Java14*/\n \t\t\t\n-\t\t\tswitch (dropMode) {\n+\t\t\t/* The access mode to be dropped must exist in the current access mode;\n+\t\t\t * otherwise, the new access mode remains unchanged.\n+\t\t\t */\n+\t\t\tswitch (dropMode & newAccessMode) {\n \t\t\tcase PUBLIC:\n \t\t\t\tnewAccessMode = NO_ACCESS;\n \t\t\t\tbreak;\n-\t\t\tcase MODULE:\n-\t\t\t\tnewAccessMode &= ~(MODULE | PACKAGE | PRIVATE);\n-\t\t\t\tbreak;\n \t\t\tcase PACKAGE:\n \t\t\t\tnewAccessMode &= ~(PACKAGE | PRIVATE);\n \t\t\t\tbreak;\n \t\t\tcase PRIVATE:\n \t\t\t\tnewAccessMode &= ~PRIVATE;\n \t\t\t\tbreak;\n-\t\t\tcase PROTECTED:\n \t\t\tcase UNCONDITIONAL:\n+\t\t\t\t/*[IF Java14]*/\n+\t\t\t\tnewAccessMode = NO_ACCESS;\n+\t\t\t\t/*[ENDIF] Java14*/\n \t\t\t\tbreak;\n \t\t\tdefault:\n-\t\t\t\t/*[MSG \"K065R\", \"The requested lookup mode: 0x{0} is not one of the existing access modes: 0x{1}\"]*/\n-\t\t\t\tthrow new IllegalArgumentException(com.ibm.oti.util.Msg.getString(\"K065R\", Integer.toHexString(dropMode), Integer.toHexString(fullAccessMode))); //$NON-NLS-1$\n+\t\t\t\t/* no change in the access mode */\n \t\t\t}\n \t\t\t\n-\t\t\treturn new Lookup(accessClass, newAccessMode); \n+\t\t\t/* The exception is MODULE in which case all access bits involved must be dropped\n+\t\t\t * whether or not the MODULE bit exists in the access mode.\n+\t\t\t */\n+\t\t\tif ((dropMode == MODULE) || ((dropMode & newAccessMode) == MODULE)) {\n+\t\t\t\tnewAccessMode &= ~(MODULE | PACKAGE | PRIVATE);\n+\t\t\t}\n+\t\t\t\n+\t\t\t/*[IF Java14]*/\n+\t\t\t/* There is no previous lookup class for the requested lookup class\n+\t\t\t * if the MODULE or UNCONDITIONAL bit is set in the new access mode.\n+\t\t\t */\n+\t\t\tClass<?> newPrevAccessClass = prevAccessClass;\n+\t\t\tif (((newAccessMode & MODULE) == MODULE)\n+\t\t\t\t|| ((newAccessMode & UNCONDITIONAL) == UNCONDITIONAL)\n+\t\t\t) {\n+\t\t\t\tnewPrevAccessClass = null;\n+\t\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e5e67581a539e04a56b75e594345758ba14034d"}, "originalPosition": 622}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU0NzkxOA==", "bodyText": "at http://cr.openjdk.java.net/~iris/se/14/build/latest/api/java.base/java/lang/invoke/MethodHandles.Lookup.html#UNCONDITIONAL:\npublic static final int UNCONDITIONAL\n...\nIf this lookup mode is set, the previous lookup class is always null. \n<----- this is the new change when setting up UNCONDITIONAL since Java 14\n\nThe newly added description requires to handle previousAccessClass which is not specific to dropLookupMode() but everywhere when the UNCONDITIONAL bit is set initially.", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#discussion_r388547918", "createdAt": "2020-03-05T20:32:18Z", "author": {"login": "ChengJin01"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -1865,47 +2136,109 @@ public VarHandle unreflectVarHandle(Field field) throws IllegalAccessException {\n \t\t\t * as it is not set up for lookup objects by default.\n \t\t\t */\n \t\t\tint fullAccessMode = FULL_ACCESS_MASK | MODULE | UNCONDITIONAL;\n+\t\t\t\n+\t\t\tswitch(dropMode) {\n+\t\t\tcase PUBLIC:\n+\t\t\tcase MODULE:\n+\t\t\tcase PACKAGE:\n+\t\t\tcase PRIVATE:\n+\t\t\tcase PROTECTED:\n+\t\t\tcase UNCONDITIONAL:\n+\t\t\t\t/* dropMode is OK */\n+\t\t\t\tbreak;\n+\t\t\tdefault:\n+\t\t\t\t/*[MSG \"K065R\", \"The requested lookup mode: 0x{0} is not one of the existing access modes: 0x{1}\"]*/\n+\t\t\t\tthrow new IllegalArgumentException(com.ibm.oti.util.Msg.getString(\"K065R\", Integer.toHexString(dropMode), Integer.toHexString(fullAccessMode))); //$NON-NLS-1$\n+\t\t\t}\n \n+\t\t\t/*[IF Java14]*/\n+\t\t\t/* The lookup object has to discard the protected access by default */\n+\t\t\tint newAccessMode = accessMode & ~PROTECTED;\n+\t\t\t/*[ELSE]*/\n \t\t\t/* The lookup object has to discard the protected and unconditional access by default */\n \t\t\tint newAccessMode = accessMode & ~(PROTECTED | UNCONDITIONAL);\n+\t\t\t/*[ENDIF] Java14*/\n \t\t\t\n-\t\t\tswitch (dropMode) {\n+\t\t\t/* The access mode to be dropped must exist in the current access mode;\n+\t\t\t * otherwise, the new access mode remains unchanged.\n+\t\t\t */\n+\t\t\tswitch (dropMode & newAccessMode) {\n \t\t\tcase PUBLIC:\n \t\t\t\tnewAccessMode = NO_ACCESS;\n \t\t\t\tbreak;\n-\t\t\tcase MODULE:\n-\t\t\t\tnewAccessMode &= ~(MODULE | PACKAGE | PRIVATE);\n-\t\t\t\tbreak;\n \t\t\tcase PACKAGE:\n \t\t\t\tnewAccessMode &= ~(PACKAGE | PRIVATE);\n \t\t\t\tbreak;\n \t\t\tcase PRIVATE:\n \t\t\t\tnewAccessMode &= ~PRIVATE;\n \t\t\t\tbreak;\n-\t\t\tcase PROTECTED:\n \t\t\tcase UNCONDITIONAL:\n+\t\t\t\t/*[IF Java14]*/\n+\t\t\t\tnewAccessMode = NO_ACCESS;\n+\t\t\t\t/*[ENDIF] Java14*/\n \t\t\t\tbreak;\n \t\t\tdefault:\n-\t\t\t\t/*[MSG \"K065R\", \"The requested lookup mode: 0x{0} is not one of the existing access modes: 0x{1}\"]*/\n-\t\t\t\tthrow new IllegalArgumentException(com.ibm.oti.util.Msg.getString(\"K065R\", Integer.toHexString(dropMode), Integer.toHexString(fullAccessMode))); //$NON-NLS-1$\n+\t\t\t\t/* no change in the access mode */\n \t\t\t}\n \t\t\t\n-\t\t\treturn new Lookup(accessClass, newAccessMode); \n+\t\t\t/* The exception is MODULE in which case all access bits involved must be dropped\n+\t\t\t * whether or not the MODULE bit exists in the access mode.\n+\t\t\t */\n+\t\t\tif ((dropMode == MODULE) || ((dropMode & newAccessMode) == MODULE)) {\n+\t\t\t\tnewAccessMode &= ~(MODULE | PACKAGE | PRIVATE);\n+\t\t\t}\n+\t\t\t\n+\t\t\t/*[IF Java14]*/\n+\t\t\t/* There is no previous lookup class for the requested lookup class\n+\t\t\t * if the MODULE or UNCONDITIONAL bit is set in the new access mode.\n+\t\t\t */\n+\t\t\tClass<?> newPrevAccessClass = prevAccessClass;\n+\t\t\tif (((newAccessMode & MODULE) == MODULE)\n+\t\t\t\t|| ((newAccessMode & UNCONDITIONAL) == UNCONDITIONAL)\n+\t\t\t) {\n+\t\t\t\tnewPrevAccessClass = null;\n+\t\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQwMDkwOQ=="}, "originalCommit": {"oid": "2e5e67581a539e04a56b75e594345758ba14034d"}, "originalPosition": 622}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjQzMTU1OnYy", "diffSide": "RIGHT", "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNjozNjoyMVrOFya8wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMDo1Mjo1N1rOFyjwXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQxNDY1Ng==", "bodyText": "void.class.isPrimitive is true so we don't need to first check", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#discussion_r388414656", "createdAt": "2020-03-05T16:36:21Z", "author": {"login": "DanHeidinga"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -1959,8 +2292,8 @@ static MethodHandle filterArgument(MethodHandle target, int pos, MethodHandle fi\n \t\t\tthrow new NullPointerException(com.ibm.oti.util.Msg.getString(\"K065S\")); //$NON-NLS-1$\n \t\t}\n \t\t\n-\t\tif (targetClass.isPrimitive() || targetClass.isArray()) {\n-\t\t\t/*[MSG \"K065T\", \"The target class: {0} must not be a primitive type or an array class\"]*/\n+\t\tif ((targetClass == void.class) || targetClass.isPrimitive() || targetClass.isArray()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e5e67581a539e04a56b75e594345758ba14034d"}, "originalPosition": 673}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU1ODk0Mg==", "bodyText": "Fixed.", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#discussion_r388558942", "createdAt": "2020-03-05T20:52:57Z", "author": {"login": "ChengJin01"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -1959,8 +2292,8 @@ static MethodHandle filterArgument(MethodHandle target, int pos, MethodHandle fi\n \t\t\tthrow new NullPointerException(com.ibm.oti.util.Msg.getString(\"K065S\")); //$NON-NLS-1$\n \t\t}\n \t\t\n-\t\tif (targetClass.isPrimitive() || targetClass.isArray()) {\n-\t\t\t/*[MSG \"K065T\", \"The target class: {0} must not be a primitive type or an array class\"]*/\n+\t\tif ((targetClass == void.class) || targetClass.isPrimitive() || targetClass.isArray()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQxNDY1Ng=="}, "originalCommit": {"oid": "2e5e67581a539e04a56b75e594345758ba14034d"}, "originalPosition": 673}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzA0ODk3OnYy", "diffSide": "RIGHT", "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOToyNzo0MVrOFyg9fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMDozODowM1rOFyjRxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxMzE1MQ==", "bodyText": "Why is this an exception?  I don't see anything about this in the \"Access modes\" table showing dropLookupMode behaviour in https://download.java.net/java/early_access/jdk14/docs/api/java.base/java/lang/invoke/MethodHandles.Lookup.html#access-modes\nIt seems like this should apply to all dropped modes & the change to switch (dropMode & newAccessMode) is unnecessary", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#discussion_r388513151", "createdAt": "2020-03-05T19:27:41Z", "author": {"login": "DanHeidinga"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -1865,47 +2136,109 @@ public VarHandle unreflectVarHandle(Field field) throws IllegalAccessException {\n \t\t\t * as it is not set up for lookup objects by default.\n \t\t\t */\n \t\t\tint fullAccessMode = FULL_ACCESS_MASK | MODULE | UNCONDITIONAL;\n+\t\t\t\n+\t\t\tswitch(dropMode) {\n+\t\t\tcase PUBLIC:\n+\t\t\tcase MODULE:\n+\t\t\tcase PACKAGE:\n+\t\t\tcase PRIVATE:\n+\t\t\tcase PROTECTED:\n+\t\t\tcase UNCONDITIONAL:\n+\t\t\t\t/* dropMode is OK */\n+\t\t\t\tbreak;\n+\t\t\tdefault:\n+\t\t\t\t/*[MSG \"K065R\", \"The requested lookup mode: 0x{0} is not one of the existing access modes: 0x{1}\"]*/\n+\t\t\t\tthrow new IllegalArgumentException(com.ibm.oti.util.Msg.getString(\"K065R\", Integer.toHexString(dropMode), Integer.toHexString(fullAccessMode))); //$NON-NLS-1$\n+\t\t\t}\n \n+\t\t\t/*[IF Java14]*/\n+\t\t\t/* The lookup object has to discard the protected access by default */\n+\t\t\tint newAccessMode = accessMode & ~PROTECTED;\n+\t\t\t/*[ELSE]*/\n \t\t\t/* The lookup object has to discard the protected and unconditional access by default */\n \t\t\tint newAccessMode = accessMode & ~(PROTECTED | UNCONDITIONAL);\n+\t\t\t/*[ENDIF] Java14*/\n \t\t\t\n-\t\t\tswitch (dropMode) {\n+\t\t\t/* The access mode to be dropped must exist in the current access mode;\n+\t\t\t * otherwise, the new access mode remains unchanged.\n+\t\t\t */\n+\t\t\tswitch (dropMode & newAccessMode) {\n \t\t\tcase PUBLIC:\n \t\t\t\tnewAccessMode = NO_ACCESS;\n \t\t\t\tbreak;\n-\t\t\tcase MODULE:\n-\t\t\t\tnewAccessMode &= ~(MODULE | PACKAGE | PRIVATE);\n-\t\t\t\tbreak;\n \t\t\tcase PACKAGE:\n \t\t\t\tnewAccessMode &= ~(PACKAGE | PRIVATE);\n \t\t\t\tbreak;\n \t\t\tcase PRIVATE:\n \t\t\t\tnewAccessMode &= ~PRIVATE;\n \t\t\t\tbreak;\n-\t\t\tcase PROTECTED:\n \t\t\tcase UNCONDITIONAL:\n+\t\t\t\t/*[IF Java14]*/\n+\t\t\t\tnewAccessMode = NO_ACCESS;\n+\t\t\t\t/*[ENDIF] Java14*/\n \t\t\t\tbreak;\n \t\t\tdefault:\n-\t\t\t\t/*[MSG \"K065R\", \"The requested lookup mode: 0x{0} is not one of the existing access modes: 0x{1}\"]*/\n-\t\t\t\tthrow new IllegalArgumentException(com.ibm.oti.util.Msg.getString(\"K065R\", Integer.toHexString(dropMode), Integer.toHexString(fullAccessMode))); //$NON-NLS-1$\n+\t\t\t\t/* no change in the access mode */\n \t\t\t}\n \t\t\t\n-\t\t\treturn new Lookup(accessClass, newAccessMode); \n+\t\t\t/* The exception is MODULE in which case all access bits involved must be dropped", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd6f62fa41d798c471298ee9f0b75576294d96c6"}, "originalPosition": 606}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU1MTEwOA==", "bodyText": "As mentioned at #8571 (comment),\n  public void testDropLookupMode() throws Exception {\n        Lookup lookup = MethodHandles.privateLookupIn(m5.type1, m4.lookup);\n        assertTrue((lookup.lookupModes() & MODULE) == 0); <--- MODULE doesn't exist\n        ...\n        Lookup lookup3 = lookup.dropLookupMode(MODULE);\n---> assertTrue(lookup3.lookupModes() == (lookup.lookupModes() & ~(PROTECTED|PRIVATE|PACKAGE)));\n\nHere's the printing message for the test above\n[TestNG] Running:\n  java/lang/invoke/modules/Driver1.java\n\nconfig jdk.test.ModuleAccessTest.setup(): success\n----- testDropLookupMode --------\nm4.lookup.lookupModes() = 31\nm4.lookup.lookupClass() = class d1.D1\nm4.lookup.lookupClass().getModule() = module m4\nm5.type1.getModule() = module m5\n\nlookup = e1.E1/d1.D1\nlookup.lookupClass = class e1.E1\nlookup.lookupClass().getModule() = module m5\nlookup.lookupModes() = 15 <--------------------- 0xF or 1111 <---- MODULE doesn't exist\nlookup.previousLookupClass() = class d1.D1\nlookup.lookupModes() & ~(PROTECTED|PRIVATE|PACKAGE) = 1\nlookup3.lookupModes() = 1 <------------------------------ PUBLIC is left eventually\ntest jdk.test.ModuleAccessTest.testDropLookupMode(): failure\n\nBased on the weird result, the generated lookup  doesn't hold the MODULE bit, in which case it shouldn't drop all PROTECTED|PRIVATE|PACKAGE as if the MODULE bit exists if the previous clarification from Oracle (mode to be dropped must exist in the access mode) is reasonable; Otherwise, Oracle should bring up with another explanation as to how this happens and why.", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#discussion_r388551108", "createdAt": "2020-03-05T20:38:03Z", "author": {"login": "ChengJin01"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -1865,47 +2136,109 @@ public VarHandle unreflectVarHandle(Field field) throws IllegalAccessException {\n \t\t\t * as it is not set up for lookup objects by default.\n \t\t\t */\n \t\t\tint fullAccessMode = FULL_ACCESS_MASK | MODULE | UNCONDITIONAL;\n+\t\t\t\n+\t\t\tswitch(dropMode) {\n+\t\t\tcase PUBLIC:\n+\t\t\tcase MODULE:\n+\t\t\tcase PACKAGE:\n+\t\t\tcase PRIVATE:\n+\t\t\tcase PROTECTED:\n+\t\t\tcase UNCONDITIONAL:\n+\t\t\t\t/* dropMode is OK */\n+\t\t\t\tbreak;\n+\t\t\tdefault:\n+\t\t\t\t/*[MSG \"K065R\", \"The requested lookup mode: 0x{0} is not one of the existing access modes: 0x{1}\"]*/\n+\t\t\t\tthrow new IllegalArgumentException(com.ibm.oti.util.Msg.getString(\"K065R\", Integer.toHexString(dropMode), Integer.toHexString(fullAccessMode))); //$NON-NLS-1$\n+\t\t\t}\n \n+\t\t\t/*[IF Java14]*/\n+\t\t\t/* The lookup object has to discard the protected access by default */\n+\t\t\tint newAccessMode = accessMode & ~PROTECTED;\n+\t\t\t/*[ELSE]*/\n \t\t\t/* The lookup object has to discard the protected and unconditional access by default */\n \t\t\tint newAccessMode = accessMode & ~(PROTECTED | UNCONDITIONAL);\n+\t\t\t/*[ENDIF] Java14*/\n \t\t\t\n-\t\t\tswitch (dropMode) {\n+\t\t\t/* The access mode to be dropped must exist in the current access mode;\n+\t\t\t * otherwise, the new access mode remains unchanged.\n+\t\t\t */\n+\t\t\tswitch (dropMode & newAccessMode) {\n \t\t\tcase PUBLIC:\n \t\t\t\tnewAccessMode = NO_ACCESS;\n \t\t\t\tbreak;\n-\t\t\tcase MODULE:\n-\t\t\t\tnewAccessMode &= ~(MODULE | PACKAGE | PRIVATE);\n-\t\t\t\tbreak;\n \t\t\tcase PACKAGE:\n \t\t\t\tnewAccessMode &= ~(PACKAGE | PRIVATE);\n \t\t\t\tbreak;\n \t\t\tcase PRIVATE:\n \t\t\t\tnewAccessMode &= ~PRIVATE;\n \t\t\t\tbreak;\n-\t\t\tcase PROTECTED:\n \t\t\tcase UNCONDITIONAL:\n+\t\t\t\t/*[IF Java14]*/\n+\t\t\t\tnewAccessMode = NO_ACCESS;\n+\t\t\t\t/*[ENDIF] Java14*/\n \t\t\t\tbreak;\n \t\t\tdefault:\n-\t\t\t\t/*[MSG \"K065R\", \"The requested lookup mode: 0x{0} is not one of the existing access modes: 0x{1}\"]*/\n-\t\t\t\tthrow new IllegalArgumentException(com.ibm.oti.util.Msg.getString(\"K065R\", Integer.toHexString(dropMode), Integer.toHexString(fullAccessMode))); //$NON-NLS-1$\n+\t\t\t\t/* no change in the access mode */\n \t\t\t}\n \t\t\t\n-\t\t\treturn new Lookup(accessClass, newAccessMode); \n+\t\t\t/* The exception is MODULE in which case all access bits involved must be dropped", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxMzE1MQ=="}, "originalCommit": {"oid": "fd6f62fa41d798c471298ee9f0b75576294d96c6"}, "originalPosition": 606}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzA5NDkwOnYy", "diffSide": "RIGHT", "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTo0MTo1M1rOFyhahg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMDo1MzoyOFrOFyjxgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUyMDU4Mg==", "bodyText": "Can you add the following code here to make it more clear?\n/* A protected class (must be a member class) is compiled to a public class as\n * the protected flag of this class doesn't exist on the VM level (there is no \n * access flag in the binary form representing 'protected')\n */\n final boolean targetClassIsPublic = (Modifier.isPublic(targetClassModifiers) || Modifier.isProtected(targetClassModifiers));", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#discussion_r388520582", "createdAt": "2020-03-05T19:41:53Z", "author": {"login": "DanHeidinga"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -535,28 +568,67 @@ private void checkAccess(Class<?> definingClass, Class<?> referenceClass, String\n \t\t */\n \t\tprivate void checkClassAccess(Class<?> targetClass) throws IllegalAccessException {\n \t\t\t/*[IF Sidecar19-SE]*/\n+\t\t\t/*[IF Java14]*/\n+\t\t\tcheckClassModuleVisibility(accessMode, accessClass, prevAccessClass, targetClass);\n+\t\t\t/*[ELSE]*/\n \t\t\tcheckClassModuleVisibility(accessMode, accessClass.getModule(), targetClass);\n+\t\t\t/*[ENDIF] Java14*/\n \t\t\t/*[ENDIF]*/\n+\t\t\t\n \t\t\tif (NO_ACCESS != accessMode) {\n-\t\t\t\t/* target class should always be accessible to the lookup class when they are the same class */\n-\t\t\t\tif (accessClass == targetClass) {\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\tint modifiers = targetClass.getModifiers();\n-\t\t\t\t\n-\t\t\t\t/* A protected class (must be a member class) is compiled to a public class as\n-\t\t\t\t * the protected flag of this class doesn't exist on the VM level (there is no \n-\t\t\t\t * access flag in the binary form representing 'protected')\n-\t\t\t\t */\n-\t\t\t\tif (Modifier.isPublic(modifiers) || Modifier.isProtected(modifiers)) {\n-\t\t\t\t\t/* Already determined that we have more than \"no access\" (public access) */\n+\t\t\t\tint targetClassModifiers = targetClass.getModifiers();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd6f62fa41d798c471298ee9f0b75576294d96c6"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU1OTIzMg==", "bodyText": "Updated the code as suggested above.", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#discussion_r388559232", "createdAt": "2020-03-05T20:53:28Z", "author": {"login": "ChengJin01"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -535,28 +568,67 @@ private void checkAccess(Class<?> definingClass, Class<?> referenceClass, String\n \t\t */\n \t\tprivate void checkClassAccess(Class<?> targetClass) throws IllegalAccessException {\n \t\t\t/*[IF Sidecar19-SE]*/\n+\t\t\t/*[IF Java14]*/\n+\t\t\tcheckClassModuleVisibility(accessMode, accessClass, prevAccessClass, targetClass);\n+\t\t\t/*[ELSE]*/\n \t\t\tcheckClassModuleVisibility(accessMode, accessClass.getModule(), targetClass);\n+\t\t\t/*[ENDIF] Java14*/\n \t\t\t/*[ENDIF]*/\n+\t\t\t\n \t\t\tif (NO_ACCESS != accessMode) {\n-\t\t\t\t/* target class should always be accessible to the lookup class when they are the same class */\n-\t\t\t\tif (accessClass == targetClass) {\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\tint modifiers = targetClass.getModifiers();\n-\t\t\t\t\n-\t\t\t\t/* A protected class (must be a member class) is compiled to a public class as\n-\t\t\t\t * the protected flag of this class doesn't exist on the VM level (there is no \n-\t\t\t\t * access flag in the binary form representing 'protected')\n-\t\t\t\t */\n-\t\t\t\tif (Modifier.isPublic(modifiers) || Modifier.isProtected(modifiers)) {\n-\t\t\t\t\t/* Already determined that we have more than \"no access\" (public access) */\n+\t\t\t\tint targetClassModifiers = targetClass.getModifiers();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUyMDU4Mg=="}, "originalCommit": {"oid": "fd6f62fa41d798c471298ee9f0b75576294d96c6"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzA5NTYxOnYy", "diffSide": "RIGHT", "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTo0MjowNlrOFyha_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMDo1MzozOFrOFyjx5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUyMDcwMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t\t&& (Modifier.isPublic(targetClassModifiers) || Modifier.isProtected(targetClassModifiers))\n          \n          \n            \n            \t\t\t\t\t&& targetClassIsPublic", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#discussion_r388520700", "createdAt": "2020-03-05T19:42:06Z", "author": {"login": "DanHeidinga"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -535,28 +568,67 @@ private void checkAccess(Class<?> definingClass, Class<?> referenceClass, String\n \t\t */\n \t\tprivate void checkClassAccess(Class<?> targetClass) throws IllegalAccessException {\n \t\t\t/*[IF Sidecar19-SE]*/\n+\t\t\t/*[IF Java14]*/\n+\t\t\tcheckClassModuleVisibility(accessMode, accessClass, prevAccessClass, targetClass);\n+\t\t\t/*[ELSE]*/\n \t\t\tcheckClassModuleVisibility(accessMode, accessClass.getModule(), targetClass);\n+\t\t\t/*[ENDIF] Java14*/\n \t\t\t/*[ENDIF]*/\n+\t\t\t\n \t\t\tif (NO_ACCESS != accessMode) {\n-\t\t\t\t/* target class should always be accessible to the lookup class when they are the same class */\n-\t\t\t\tif (accessClass == targetClass) {\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\tint modifiers = targetClass.getModifiers();\n-\t\t\t\t\n-\t\t\t\t/* A protected class (must be a member class) is compiled to a public class as\n-\t\t\t\t * the protected flag of this class doesn't exist on the VM level (there is no \n-\t\t\t\t * access flag in the binary form representing 'protected')\n-\t\t\t\t */\n-\t\t\t\tif (Modifier.isPublic(modifiers) || Modifier.isProtected(modifiers)) {\n-\t\t\t\t\t/* Already determined that we have more than \"no access\" (public access) */\n+\t\t\t\tint targetClassModifiers = targetClass.getModifiers();\n+\t\t\t\t/*[IF Java14]*/\n+\t\t\t\tModule accessModule = accessClass.getModule();\n+\t\t\t\tModule targetModule = targetClass.getModule();\n+\t\t\t\tString targetClassPackageName = targetClass.getPackageName();\n+\n+\t\t\t\tif (((UNCONDITIONAL & accessMode) == UNCONDITIONAL)\n+\t\t\t\t\t&& (Modifier.isPublic(targetClassModifiers) || Modifier.isProtected(targetClassModifiers))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd6f62fa41d798c471298ee9f0b75576294d96c6"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU1OTMzMw==", "bodyText": "Fixed.", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#discussion_r388559333", "createdAt": "2020-03-05T20:53:38Z", "author": {"login": "ChengJin01"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -535,28 +568,67 @@ private void checkAccess(Class<?> definingClass, Class<?> referenceClass, String\n \t\t */\n \t\tprivate void checkClassAccess(Class<?> targetClass) throws IllegalAccessException {\n \t\t\t/*[IF Sidecar19-SE]*/\n+\t\t\t/*[IF Java14]*/\n+\t\t\tcheckClassModuleVisibility(accessMode, accessClass, prevAccessClass, targetClass);\n+\t\t\t/*[ELSE]*/\n \t\t\tcheckClassModuleVisibility(accessMode, accessClass.getModule(), targetClass);\n+\t\t\t/*[ENDIF] Java14*/\n \t\t\t/*[ENDIF]*/\n+\t\t\t\n \t\t\tif (NO_ACCESS != accessMode) {\n-\t\t\t\t/* target class should always be accessible to the lookup class when they are the same class */\n-\t\t\t\tif (accessClass == targetClass) {\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\tint modifiers = targetClass.getModifiers();\n-\t\t\t\t\n-\t\t\t\t/* A protected class (must be a member class) is compiled to a public class as\n-\t\t\t\t * the protected flag of this class doesn't exist on the VM level (there is no \n-\t\t\t\t * access flag in the binary form representing 'protected')\n-\t\t\t\t */\n-\t\t\t\tif (Modifier.isPublic(modifiers) || Modifier.isProtected(modifiers)) {\n-\t\t\t\t\t/* Already determined that we have more than \"no access\" (public access) */\n+\t\t\t\tint targetClassModifiers = targetClass.getModifiers();\n+\t\t\t\t/*[IF Java14]*/\n+\t\t\t\tModule accessModule = accessClass.getModule();\n+\t\t\t\tModule targetModule = targetClass.getModule();\n+\t\t\t\tString targetClassPackageName = targetClass.getPackageName();\n+\n+\t\t\t\tif (((UNCONDITIONAL & accessMode) == UNCONDITIONAL)\n+\t\t\t\t\t&& (Modifier.isPublic(targetClassModifiers) || Modifier.isProtected(targetClassModifiers))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUyMDcwMA=="}, "originalCommit": {"oid": "fd6f62fa41d798c471298ee9f0b75576294d96c6"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzA5NzE1OnYy", "diffSide": "RIGHT", "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTo0MjozNlrOFyhb8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMDo1Mzo0NVrOFyjyGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUyMDk0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t\t/* A protected class (must be a member class) is compiled to a public class as\n          \n          \n            \n            \t\t\t\t\t * the protected flag of this class doesn't exist on the VM level (there is no \n          \n          \n            \n            \t\t\t\t\t * access flag in the binary form representing 'protected')\n          \n          \n            \n            \t\t\t\t\t */\n          \n          \n            \n            \t\t\t\t\tif (Modifier.isPublic(targetClassModifiers) || Modifier.isProtected(targetClassModifiers)) {\n          \n          \n            \n            \t\t\t\t\tif (targetClassIsPublic) {", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#discussion_r388520944", "createdAt": "2020-03-05T19:42:36Z", "author": {"login": "DanHeidinga"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -535,28 +568,67 @@ private void checkAccess(Class<?> definingClass, Class<?> referenceClass, String\n \t\t */\n \t\tprivate void checkClassAccess(Class<?> targetClass) throws IllegalAccessException {\n \t\t\t/*[IF Sidecar19-SE]*/\n+\t\t\t/*[IF Java14]*/\n+\t\t\tcheckClassModuleVisibility(accessMode, accessClass, prevAccessClass, targetClass);\n+\t\t\t/*[ELSE]*/\n \t\t\tcheckClassModuleVisibility(accessMode, accessClass.getModule(), targetClass);\n+\t\t\t/*[ENDIF] Java14*/\n \t\t\t/*[ENDIF]*/\n+\t\t\t\n \t\t\tif (NO_ACCESS != accessMode) {\n-\t\t\t\t/* target class should always be accessible to the lookup class when they are the same class */\n-\t\t\t\tif (accessClass == targetClass) {\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\tint modifiers = targetClass.getModifiers();\n-\t\t\t\t\n-\t\t\t\t/* A protected class (must be a member class) is compiled to a public class as\n-\t\t\t\t * the protected flag of this class doesn't exist on the VM level (there is no \n-\t\t\t\t * access flag in the binary form representing 'protected')\n-\t\t\t\t */\n-\t\t\t\tif (Modifier.isPublic(modifiers) || Modifier.isProtected(modifiers)) {\n-\t\t\t\t\t/* Already determined that we have more than \"no access\" (public access) */\n+\t\t\t\tint targetClassModifiers = targetClass.getModifiers();\n+\t\t\t\t/*[IF Java14]*/\n+\t\t\t\tModule accessModule = accessClass.getModule();\n+\t\t\t\tModule targetModule = targetClass.getModule();\n+\t\t\t\tString targetClassPackageName = targetClass.getPackageName();\n+\n+\t\t\t\tif (((UNCONDITIONAL & accessMode) == UNCONDITIONAL)\n+\t\t\t\t\t&& (Modifier.isPublic(targetClassModifiers) || Modifier.isProtected(targetClassModifiers))\n+\t\t\t\t\t&& targetModule.isExported(targetClassPackageName)\n+\t\t\t\t) {\n \t\t\t\t\treturn;\n-\t\t\t\t} else {\n-\t\t\t\t\tif (((PACKAGE == (accessMode & PACKAGE)) || Modifier.isPrivate(accessMode)) && isSamePackage(accessClass, targetClass)) {\n+\t\t\t\t} else if ((targetModule != null) && (accessModule != null) \n+\t\t\t\t\t\t&& (accessModule.equals(targetModule) || (!accessModule.isNamed() && !targetModule.isNamed()))\n+\t\t\t\t) {\n+\t\t\t\t\tif (((PRIVATE & accessMode) == PRIVATE)\n+\t\t\t\t\t\t&& ((targetClass == accessClass) || targetClass.isNestmateOf(accessClass))\n+\t\t\t\t\t) {\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t} else if (((PACKAGE & accessMode) == PACKAGE) && isSamePackage(targetClass, accessClass)) {\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t} else if (((MODULE & accessMode) == MODULE)\n+\t\t\t\t\t\t&& (Modifier.isPublic(targetClassModifiers) || Modifier.isProtected(targetClassModifiers))\n+\t\t\t\t\t) {\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t} else if (((PUBLIC & accessMode) == PUBLIC)\n+\t\t\t\t\t\t&& (Modifier.isPublic(targetClassModifiers) || Modifier.isProtected(targetClassModifiers))\n+\t\t\t\t\t\t&& (((prevAccessClass != null) && targetModule.isExported(targetClassPackageName, prevAccessClass.getModule()))\n+\t\t\t\t\t\t\t|| targetModule.isExported(targetClassPackageName))\n+\t\t\t\t\t) {\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t}\n+\t\t\t\t} else if ((PUBLIC & accessMode) == PUBLIC) {\n+\t\t\t\t/*[ENDIF] Java14*/\n+\t\t\t\t\t/* target class should always be accessible to the lookup class when they are the same class */\n+\t\t\t\t\tif (accessClass == targetClass) {\n \t\t\t\t\t\treturn;\n \t\t\t\t\t}\n+\t\t\t\t\t\n+\t\t\t\t\t/* A protected class (must be a member class) is compiled to a public class as\n+\t\t\t\t\t * the protected flag of this class doesn't exist on the VM level (there is no \n+\t\t\t\t\t * access flag in the binary form representing 'protected')\n+\t\t\t\t\t */\n+\t\t\t\t\tif (Modifier.isPublic(targetClassModifiers) || Modifier.isProtected(targetClassModifiers)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd6f62fa41d798c471298ee9f0b75576294d96c6"}, "originalPosition": 197}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU1OTM4NQ==", "bodyText": "Fixed.", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#discussion_r388559385", "createdAt": "2020-03-05T20:53:45Z", "author": {"login": "ChengJin01"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -535,28 +568,67 @@ private void checkAccess(Class<?> definingClass, Class<?> referenceClass, String\n \t\t */\n \t\tprivate void checkClassAccess(Class<?> targetClass) throws IllegalAccessException {\n \t\t\t/*[IF Sidecar19-SE]*/\n+\t\t\t/*[IF Java14]*/\n+\t\t\tcheckClassModuleVisibility(accessMode, accessClass, prevAccessClass, targetClass);\n+\t\t\t/*[ELSE]*/\n \t\t\tcheckClassModuleVisibility(accessMode, accessClass.getModule(), targetClass);\n+\t\t\t/*[ENDIF] Java14*/\n \t\t\t/*[ENDIF]*/\n+\t\t\t\n \t\t\tif (NO_ACCESS != accessMode) {\n-\t\t\t\t/* target class should always be accessible to the lookup class when they are the same class */\n-\t\t\t\tif (accessClass == targetClass) {\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\tint modifiers = targetClass.getModifiers();\n-\t\t\t\t\n-\t\t\t\t/* A protected class (must be a member class) is compiled to a public class as\n-\t\t\t\t * the protected flag of this class doesn't exist on the VM level (there is no \n-\t\t\t\t * access flag in the binary form representing 'protected')\n-\t\t\t\t */\n-\t\t\t\tif (Modifier.isPublic(modifiers) || Modifier.isProtected(modifiers)) {\n-\t\t\t\t\t/* Already determined that we have more than \"no access\" (public access) */\n+\t\t\t\tint targetClassModifiers = targetClass.getModifiers();\n+\t\t\t\t/*[IF Java14]*/\n+\t\t\t\tModule accessModule = accessClass.getModule();\n+\t\t\t\tModule targetModule = targetClass.getModule();\n+\t\t\t\tString targetClassPackageName = targetClass.getPackageName();\n+\n+\t\t\t\tif (((UNCONDITIONAL & accessMode) == UNCONDITIONAL)\n+\t\t\t\t\t&& (Modifier.isPublic(targetClassModifiers) || Modifier.isProtected(targetClassModifiers))\n+\t\t\t\t\t&& targetModule.isExported(targetClassPackageName)\n+\t\t\t\t) {\n \t\t\t\t\treturn;\n-\t\t\t\t} else {\n-\t\t\t\t\tif (((PACKAGE == (accessMode & PACKAGE)) || Modifier.isPrivate(accessMode)) && isSamePackage(accessClass, targetClass)) {\n+\t\t\t\t} else if ((targetModule != null) && (accessModule != null) \n+\t\t\t\t\t\t&& (accessModule.equals(targetModule) || (!accessModule.isNamed() && !targetModule.isNamed()))\n+\t\t\t\t) {\n+\t\t\t\t\tif (((PRIVATE & accessMode) == PRIVATE)\n+\t\t\t\t\t\t&& ((targetClass == accessClass) || targetClass.isNestmateOf(accessClass))\n+\t\t\t\t\t) {\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t} else if (((PACKAGE & accessMode) == PACKAGE) && isSamePackage(targetClass, accessClass)) {\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t} else if (((MODULE & accessMode) == MODULE)\n+\t\t\t\t\t\t&& (Modifier.isPublic(targetClassModifiers) || Modifier.isProtected(targetClassModifiers))\n+\t\t\t\t\t) {\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t} else if (((PUBLIC & accessMode) == PUBLIC)\n+\t\t\t\t\t\t&& (Modifier.isPublic(targetClassModifiers) || Modifier.isProtected(targetClassModifiers))\n+\t\t\t\t\t\t&& (((prevAccessClass != null) && targetModule.isExported(targetClassPackageName, prevAccessClass.getModule()))\n+\t\t\t\t\t\t\t|| targetModule.isExported(targetClassPackageName))\n+\t\t\t\t\t) {\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t}\n+\t\t\t\t} else if ((PUBLIC & accessMode) == PUBLIC) {\n+\t\t\t\t/*[ENDIF] Java14*/\n+\t\t\t\t\t/* target class should always be accessible to the lookup class when they are the same class */\n+\t\t\t\t\tif (accessClass == targetClass) {\n \t\t\t\t\t\treturn;\n \t\t\t\t\t}\n+\t\t\t\t\t\n+\t\t\t\t\t/* A protected class (must be a member class) is compiled to a public class as\n+\t\t\t\t\t * the protected flag of this class doesn't exist on the VM level (there is no \n+\t\t\t\t\t * access flag in the binary form representing 'protected')\n+\t\t\t\t\t */\n+\t\t\t\t\tif (Modifier.isPublic(targetClassModifiers) || Modifier.isProtected(targetClassModifiers)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUyMDk0NA=="}, "originalCommit": {"oid": "fd6f62fa41d798c471298ee9f0b75576294d96c6"}, "originalPosition": 197}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzE0Mzg5OnYy", "diffSide": "RIGHT", "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTo1NTozOVrOFyh4wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMDo1NDozNlrOFyjz8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUyODMyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\tif (((UNCONDITIONAL & accessMode) == UNCONDITIONAL)\n          \n          \n            \n            \t\t\t\t/* An UNCONDITIONAL lookup has access to public types in any unconditionally exported package */\n          \n          \n            \n            \t\t\t\tif (((UNCONDITIONAL & accessMode) == UNCONDITIONAL)", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#discussion_r388528320", "createdAt": "2020-03-05T19:55:39Z", "author": {"login": "DanHeidinga"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -535,28 +568,67 @@ private void checkAccess(Class<?> definingClass, Class<?> referenceClass, String\n \t\t */\n \t\tprivate void checkClassAccess(Class<?> targetClass) throws IllegalAccessException {\n \t\t\t/*[IF Sidecar19-SE]*/\n+\t\t\t/*[IF Java14]*/\n+\t\t\tcheckClassModuleVisibility(accessMode, accessClass, prevAccessClass, targetClass);\n+\t\t\t/*[ELSE]*/\n \t\t\tcheckClassModuleVisibility(accessMode, accessClass.getModule(), targetClass);\n+\t\t\t/*[ENDIF] Java14*/\n \t\t\t/*[ENDIF]*/\n+\t\t\t\n \t\t\tif (NO_ACCESS != accessMode) {\n-\t\t\t\t/* target class should always be accessible to the lookup class when they are the same class */\n-\t\t\t\tif (accessClass == targetClass) {\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\tint modifiers = targetClass.getModifiers();\n-\t\t\t\t\n-\t\t\t\t/* A protected class (must be a member class) is compiled to a public class as\n-\t\t\t\t * the protected flag of this class doesn't exist on the VM level (there is no \n-\t\t\t\t * access flag in the binary form representing 'protected')\n-\t\t\t\t */\n-\t\t\t\tif (Modifier.isPublic(modifiers) || Modifier.isProtected(modifiers)) {\n-\t\t\t\t\t/* Already determined that we have more than \"no access\" (public access) */\n+\t\t\t\tint targetClassModifiers = targetClass.getModifiers();\n+\t\t\t\t/*[IF Java14]*/\n+\t\t\t\tModule accessModule = accessClass.getModule();\n+\t\t\t\tModule targetModule = targetClass.getModule();\n+\t\t\t\tString targetClassPackageName = targetClass.getPackageName();\n+\n+\t\t\t\tif (((UNCONDITIONAL & accessMode) == UNCONDITIONAL)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd6f62fa41d798c471298ee9f0b75576294d96c6"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU1OTg1Ng==", "bodyText": "Comments were added for UNCONDITIONAL against the suggestion above.", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#discussion_r388559856", "createdAt": "2020-03-05T20:54:36Z", "author": {"login": "ChengJin01"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -535,28 +568,67 @@ private void checkAccess(Class<?> definingClass, Class<?> referenceClass, String\n \t\t */\n \t\tprivate void checkClassAccess(Class<?> targetClass) throws IllegalAccessException {\n \t\t\t/*[IF Sidecar19-SE]*/\n+\t\t\t/*[IF Java14]*/\n+\t\t\tcheckClassModuleVisibility(accessMode, accessClass, prevAccessClass, targetClass);\n+\t\t\t/*[ELSE]*/\n \t\t\tcheckClassModuleVisibility(accessMode, accessClass.getModule(), targetClass);\n+\t\t\t/*[ENDIF] Java14*/\n \t\t\t/*[ENDIF]*/\n+\t\t\t\n \t\t\tif (NO_ACCESS != accessMode) {\n-\t\t\t\t/* target class should always be accessible to the lookup class when they are the same class */\n-\t\t\t\tif (accessClass == targetClass) {\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\tint modifiers = targetClass.getModifiers();\n-\t\t\t\t\n-\t\t\t\t/* A protected class (must be a member class) is compiled to a public class as\n-\t\t\t\t * the protected flag of this class doesn't exist on the VM level (there is no \n-\t\t\t\t * access flag in the binary form representing 'protected')\n-\t\t\t\t */\n-\t\t\t\tif (Modifier.isPublic(modifiers) || Modifier.isProtected(modifiers)) {\n-\t\t\t\t\t/* Already determined that we have more than \"no access\" (public access) */\n+\t\t\t\tint targetClassModifiers = targetClass.getModifiers();\n+\t\t\t\t/*[IF Java14]*/\n+\t\t\t\tModule accessModule = accessClass.getModule();\n+\t\t\t\tModule targetModule = targetClass.getModule();\n+\t\t\t\tString targetClassPackageName = targetClass.getPackageName();\n+\n+\t\t\t\tif (((UNCONDITIONAL & accessMode) == UNCONDITIONAL)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUyODMyMA=="}, "originalCommit": {"oid": "fd6f62fa41d798c471298ee9f0b75576294d96c6"}, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzE1MzIxOnYy", "diffSide": "RIGHT", "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTo1ODoyMFrOFyh-sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMDo1NDo1MFrOFyj0Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUyOTg0MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t\t\t&& (Modifier.isPublic(targetClassModifiers) || Modifier.isProtected(targetClassModifiers))\n          \n          \n            \n            \t\t\t\t\t\t&& (targetClassIsPublic)", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#discussion_r388529840", "createdAt": "2020-03-05T19:58:20Z", "author": {"login": "DanHeidinga"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -535,28 +568,67 @@ private void checkAccess(Class<?> definingClass, Class<?> referenceClass, String\n \t\t */\n \t\tprivate void checkClassAccess(Class<?> targetClass) throws IllegalAccessException {\n \t\t\t/*[IF Sidecar19-SE]*/\n+\t\t\t/*[IF Java14]*/\n+\t\t\tcheckClassModuleVisibility(accessMode, accessClass, prevAccessClass, targetClass);\n+\t\t\t/*[ELSE]*/\n \t\t\tcheckClassModuleVisibility(accessMode, accessClass.getModule(), targetClass);\n+\t\t\t/*[ENDIF] Java14*/\n \t\t\t/*[ENDIF]*/\n+\t\t\t\n \t\t\tif (NO_ACCESS != accessMode) {\n-\t\t\t\t/* target class should always be accessible to the lookup class when they are the same class */\n-\t\t\t\tif (accessClass == targetClass) {\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\tint modifiers = targetClass.getModifiers();\n-\t\t\t\t\n-\t\t\t\t/* A protected class (must be a member class) is compiled to a public class as\n-\t\t\t\t * the protected flag of this class doesn't exist on the VM level (there is no \n-\t\t\t\t * access flag in the binary form representing 'protected')\n-\t\t\t\t */\n-\t\t\t\tif (Modifier.isPublic(modifiers) || Modifier.isProtected(modifiers)) {\n-\t\t\t\t\t/* Already determined that we have more than \"no access\" (public access) */\n+\t\t\t\tint targetClassModifiers = targetClass.getModifiers();\n+\t\t\t\t/*[IF Java14]*/\n+\t\t\t\tModule accessModule = accessClass.getModule();\n+\t\t\t\tModule targetModule = targetClass.getModule();\n+\t\t\t\tString targetClassPackageName = targetClass.getPackageName();\n+\n+\t\t\t\tif (((UNCONDITIONAL & accessMode) == UNCONDITIONAL)\n+\t\t\t\t\t&& (Modifier.isPublic(targetClassModifiers) || Modifier.isProtected(targetClassModifiers))\n+\t\t\t\t\t&& targetModule.isExported(targetClassPackageName)\n+\t\t\t\t) {\n \t\t\t\t\treturn;\n-\t\t\t\t} else {\n-\t\t\t\t\tif (((PACKAGE == (accessMode & PACKAGE)) || Modifier.isPrivate(accessMode)) && isSamePackage(accessClass, targetClass)) {\n+\t\t\t\t} else if ((targetModule != null) && (accessModule != null) \n+\t\t\t\t\t\t&& (accessModule.equals(targetModule) || (!accessModule.isNamed() && !targetModule.isNamed()))\n+\t\t\t\t) {\n+\t\t\t\t\tif (((PRIVATE & accessMode) == PRIVATE)\n+\t\t\t\t\t\t&& ((targetClass == accessClass) || targetClass.isNestmateOf(accessClass))\n+\t\t\t\t\t) {\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t} else if (((PACKAGE & accessMode) == PACKAGE) && isSamePackage(targetClass, accessClass)) {\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t} else if (((MODULE & accessMode) == MODULE)\n+\t\t\t\t\t\t&& (Modifier.isPublic(targetClassModifiers) || Modifier.isProtected(targetClassModifiers))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd6f62fa41d798c471298ee9f0b75576294d96c6"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU1OTk0Nw==", "bodyText": "Fixed.", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#discussion_r388559947", "createdAt": "2020-03-05T20:54:50Z", "author": {"login": "ChengJin01"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -535,28 +568,67 @@ private void checkAccess(Class<?> definingClass, Class<?> referenceClass, String\n \t\t */\n \t\tprivate void checkClassAccess(Class<?> targetClass) throws IllegalAccessException {\n \t\t\t/*[IF Sidecar19-SE]*/\n+\t\t\t/*[IF Java14]*/\n+\t\t\tcheckClassModuleVisibility(accessMode, accessClass, prevAccessClass, targetClass);\n+\t\t\t/*[ELSE]*/\n \t\t\tcheckClassModuleVisibility(accessMode, accessClass.getModule(), targetClass);\n+\t\t\t/*[ENDIF] Java14*/\n \t\t\t/*[ENDIF]*/\n+\t\t\t\n \t\t\tif (NO_ACCESS != accessMode) {\n-\t\t\t\t/* target class should always be accessible to the lookup class when they are the same class */\n-\t\t\t\tif (accessClass == targetClass) {\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\tint modifiers = targetClass.getModifiers();\n-\t\t\t\t\n-\t\t\t\t/* A protected class (must be a member class) is compiled to a public class as\n-\t\t\t\t * the protected flag of this class doesn't exist on the VM level (there is no \n-\t\t\t\t * access flag in the binary form representing 'protected')\n-\t\t\t\t */\n-\t\t\t\tif (Modifier.isPublic(modifiers) || Modifier.isProtected(modifiers)) {\n-\t\t\t\t\t/* Already determined that we have more than \"no access\" (public access) */\n+\t\t\t\tint targetClassModifiers = targetClass.getModifiers();\n+\t\t\t\t/*[IF Java14]*/\n+\t\t\t\tModule accessModule = accessClass.getModule();\n+\t\t\t\tModule targetModule = targetClass.getModule();\n+\t\t\t\tString targetClassPackageName = targetClass.getPackageName();\n+\n+\t\t\t\tif (((UNCONDITIONAL & accessMode) == UNCONDITIONAL)\n+\t\t\t\t\t&& (Modifier.isPublic(targetClassModifiers) || Modifier.isProtected(targetClassModifiers))\n+\t\t\t\t\t&& targetModule.isExported(targetClassPackageName)\n+\t\t\t\t) {\n \t\t\t\t\treturn;\n-\t\t\t\t} else {\n-\t\t\t\t\tif (((PACKAGE == (accessMode & PACKAGE)) || Modifier.isPrivate(accessMode)) && isSamePackage(accessClass, targetClass)) {\n+\t\t\t\t} else if ((targetModule != null) && (accessModule != null) \n+\t\t\t\t\t\t&& (accessModule.equals(targetModule) || (!accessModule.isNamed() && !targetModule.isNamed()))\n+\t\t\t\t) {\n+\t\t\t\t\tif (((PRIVATE & accessMode) == PRIVATE)\n+\t\t\t\t\t\t&& ((targetClass == accessClass) || targetClass.isNestmateOf(accessClass))\n+\t\t\t\t\t) {\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t} else if (((PACKAGE & accessMode) == PACKAGE) && isSamePackage(targetClass, accessClass)) {\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t} else if (((MODULE & accessMode) == MODULE)\n+\t\t\t\t\t\t&& (Modifier.isPublic(targetClassModifiers) || Modifier.isProtected(targetClassModifiers))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUyOTg0MA=="}, "originalCommit": {"oid": "fd6f62fa41d798c471298ee9f0b75576294d96c6"}, "originalPosition": 176}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzE1Mzg4OnYy", "diffSide": "RIGHT", "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTo1ODozNlrOFyh_LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMDo1NDo1N1rOFyj0sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUyOTk2NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t\t\t&& (Modifier.isPublic(targetClassModifiers) || Modifier.isProtected(targetClassModifiers))\n          \n          \n            \n            \t\t\t\t\t\t&& (targetClassIsPublic)", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#discussion_r388529964", "createdAt": "2020-03-05T19:58:36Z", "author": {"login": "DanHeidinga"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -535,28 +568,67 @@ private void checkAccess(Class<?> definingClass, Class<?> referenceClass, String\n \t\t */\n \t\tprivate void checkClassAccess(Class<?> targetClass) throws IllegalAccessException {\n \t\t\t/*[IF Sidecar19-SE]*/\n+\t\t\t/*[IF Java14]*/\n+\t\t\tcheckClassModuleVisibility(accessMode, accessClass, prevAccessClass, targetClass);\n+\t\t\t/*[ELSE]*/\n \t\t\tcheckClassModuleVisibility(accessMode, accessClass.getModule(), targetClass);\n+\t\t\t/*[ENDIF] Java14*/\n \t\t\t/*[ENDIF]*/\n+\t\t\t\n \t\t\tif (NO_ACCESS != accessMode) {\n-\t\t\t\t/* target class should always be accessible to the lookup class when they are the same class */\n-\t\t\t\tif (accessClass == targetClass) {\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\tint modifiers = targetClass.getModifiers();\n-\t\t\t\t\n-\t\t\t\t/* A protected class (must be a member class) is compiled to a public class as\n-\t\t\t\t * the protected flag of this class doesn't exist on the VM level (there is no \n-\t\t\t\t * access flag in the binary form representing 'protected')\n-\t\t\t\t */\n-\t\t\t\tif (Modifier.isPublic(modifiers) || Modifier.isProtected(modifiers)) {\n-\t\t\t\t\t/* Already determined that we have more than \"no access\" (public access) */\n+\t\t\t\tint targetClassModifiers = targetClass.getModifiers();\n+\t\t\t\t/*[IF Java14]*/\n+\t\t\t\tModule accessModule = accessClass.getModule();\n+\t\t\t\tModule targetModule = targetClass.getModule();\n+\t\t\t\tString targetClassPackageName = targetClass.getPackageName();\n+\n+\t\t\t\tif (((UNCONDITIONAL & accessMode) == UNCONDITIONAL)\n+\t\t\t\t\t&& (Modifier.isPublic(targetClassModifiers) || Modifier.isProtected(targetClassModifiers))\n+\t\t\t\t\t&& targetModule.isExported(targetClassPackageName)\n+\t\t\t\t) {\n \t\t\t\t\treturn;\n-\t\t\t\t} else {\n-\t\t\t\t\tif (((PACKAGE == (accessMode & PACKAGE)) || Modifier.isPrivate(accessMode)) && isSamePackage(accessClass, targetClass)) {\n+\t\t\t\t} else if ((targetModule != null) && (accessModule != null) \n+\t\t\t\t\t\t&& (accessModule.equals(targetModule) || (!accessModule.isNamed() && !targetModule.isNamed()))\n+\t\t\t\t) {\n+\t\t\t\t\tif (((PRIVATE & accessMode) == PRIVATE)\n+\t\t\t\t\t\t&& ((targetClass == accessClass) || targetClass.isNestmateOf(accessClass))\n+\t\t\t\t\t) {\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t} else if (((PACKAGE & accessMode) == PACKAGE) && isSamePackage(targetClass, accessClass)) {\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t} else if (((MODULE & accessMode) == MODULE)\n+\t\t\t\t\t\t&& (Modifier.isPublic(targetClassModifiers) || Modifier.isProtected(targetClassModifiers))\n+\t\t\t\t\t) {\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t} else if (((PUBLIC & accessMode) == PUBLIC)\n+\t\t\t\t\t\t&& (Modifier.isPublic(targetClassModifiers) || Modifier.isProtected(targetClassModifiers))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd6f62fa41d798c471298ee9f0b75576294d96c6"}, "originalPosition": 180}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU2MDA1MQ==", "bodyText": "Fixed.", "url": "https://github.com/eclipse-openj9/openj9/pull/8657#discussion_r388560051", "createdAt": "2020-03-05T20:54:57Z", "author": {"login": "ChengJin01"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -535,28 +568,67 @@ private void checkAccess(Class<?> definingClass, Class<?> referenceClass, String\n \t\t */\n \t\tprivate void checkClassAccess(Class<?> targetClass) throws IllegalAccessException {\n \t\t\t/*[IF Sidecar19-SE]*/\n+\t\t\t/*[IF Java14]*/\n+\t\t\tcheckClassModuleVisibility(accessMode, accessClass, prevAccessClass, targetClass);\n+\t\t\t/*[ELSE]*/\n \t\t\tcheckClassModuleVisibility(accessMode, accessClass.getModule(), targetClass);\n+\t\t\t/*[ENDIF] Java14*/\n \t\t\t/*[ENDIF]*/\n+\t\t\t\n \t\t\tif (NO_ACCESS != accessMode) {\n-\t\t\t\t/* target class should always be accessible to the lookup class when they are the same class */\n-\t\t\t\tif (accessClass == targetClass) {\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\tint modifiers = targetClass.getModifiers();\n-\t\t\t\t\n-\t\t\t\t/* A protected class (must be a member class) is compiled to a public class as\n-\t\t\t\t * the protected flag of this class doesn't exist on the VM level (there is no \n-\t\t\t\t * access flag in the binary form representing 'protected')\n-\t\t\t\t */\n-\t\t\t\tif (Modifier.isPublic(modifiers) || Modifier.isProtected(modifiers)) {\n-\t\t\t\t\t/* Already determined that we have more than \"no access\" (public access) */\n+\t\t\t\tint targetClassModifiers = targetClass.getModifiers();\n+\t\t\t\t/*[IF Java14]*/\n+\t\t\t\tModule accessModule = accessClass.getModule();\n+\t\t\t\tModule targetModule = targetClass.getModule();\n+\t\t\t\tString targetClassPackageName = targetClass.getPackageName();\n+\n+\t\t\t\tif (((UNCONDITIONAL & accessMode) == UNCONDITIONAL)\n+\t\t\t\t\t&& (Modifier.isPublic(targetClassModifiers) || Modifier.isProtected(targetClassModifiers))\n+\t\t\t\t\t&& targetModule.isExported(targetClassPackageName)\n+\t\t\t\t) {\n \t\t\t\t\treturn;\n-\t\t\t\t} else {\n-\t\t\t\t\tif (((PACKAGE == (accessMode & PACKAGE)) || Modifier.isPrivate(accessMode)) && isSamePackage(accessClass, targetClass)) {\n+\t\t\t\t} else if ((targetModule != null) && (accessModule != null) \n+\t\t\t\t\t\t&& (accessModule.equals(targetModule) || (!accessModule.isNamed() && !targetModule.isNamed()))\n+\t\t\t\t) {\n+\t\t\t\t\tif (((PRIVATE & accessMode) == PRIVATE)\n+\t\t\t\t\t\t&& ((targetClass == accessClass) || targetClass.isNestmateOf(accessClass))\n+\t\t\t\t\t) {\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t} else if (((PACKAGE & accessMode) == PACKAGE) && isSamePackage(targetClass, accessClass)) {\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t} else if (((MODULE & accessMode) == MODULE)\n+\t\t\t\t\t\t&& (Modifier.isPublic(targetClassModifiers) || Modifier.isProtected(targetClassModifiers))\n+\t\t\t\t\t) {\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t} else if (((PUBLIC & accessMode) == PUBLIC)\n+\t\t\t\t\t\t&& (Modifier.isPublic(targetClassModifiers) || Modifier.isProtected(targetClassModifiers))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUyOTk2NA=="}, "originalCommit": {"oid": "fd6f62fa41d798c471298ee9f0b75576294d96c6"}, "originalPosition": 180}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 618, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}