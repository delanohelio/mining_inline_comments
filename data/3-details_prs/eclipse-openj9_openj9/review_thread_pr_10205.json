{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU0NTUyNzg1", "number": 10205, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNzozNzowNlrOERudow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNzozNzowNlrOERudow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDIyNDk5OnYy", "diffSide": "RIGHT", "path": "doc/compiler/runtime/JITHooks.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNzozNzowNlrOG2l2NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDoyOTozNlrOG4PcQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg5NjM3Mw==", "bodyText": "This phrasing is a bit cumbersome. Could we make it clearer with something like: Notifies prior to initialization of a class through the <clinit> method", "url": "https://github.com/eclipse-openj9/openj9/pull/10205#discussion_r459896373", "createdAt": "2020-07-24T07:37:06Z", "author": {"login": "mpirvu"}, "path": "doc/compiler/runtime/JITHooks.md", "diffHunk": "@@ -0,0 +1,89 @@\n+<!--\n+Copyright (c) 2020, 2020 IBM Corp. and others\n+\n+This program and the accompanying materials are made available under\n+the terms of the Eclipse Public License 2.0 which accompanies this\n+distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+or the Apache License, Version 2.0 which accompanies this distribution and\n+is available at https://www.apache.org/licenses/LICENSE-2.0.\n+\n+This Source Code may also be made available under the following\n+Secondary Licenses when the conditions for such availability set\n+forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+General Public License, version 2 with the GNU Classpath\n+Exception [1] and GNU General Public License, version 2 with the\n+OpenJDK Assembly Exception [2].\n+\n+[1] https://www.gnu.org/software/classpath/license.html\n+[2] http://openjdk.java.net/legal/assembly-exception.html\n+\n+SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+-->\n+\n+# Background\n+\n+The VM has a mechansim to register callbacks for specific runtime event.\n+The JIT makes use of these events to perform tasks either for functional \n+correctness, performance, or housekeeping. \n+\n+# Hooks\n+This section outlines various events or Hooks the JIT registers a callback\n+against. The callbacks associated with these Hooks can be found in\n+HookedByTheJit.cpp.\n+\n+|Hook|Description|Comment|\n+|--|--|--|\n+|`J9HOOK_VM_PROFILING_BYTECODE_BUFFER_FULL`|Notifies when the bytecode profiling buffer (consumed by the IProfiler) for a given thread is full.||\n+|`J9HOOK_VM_LOOKUP_JNI_ID`|Notifies when a method or field ID is looked up via JNI.|The JIT uses this to get notified when `main` in the Java code is about to be run; it then unregisters this hook.|\n+|`J9HOOK_VM_INITIALIZE_SEND_TARGET`|Notifies when J9Methods are to have their send target initialized.|Used to set initial invocation counts.|\n+|`J9HOOK_MM_OMR_LOCAL_GC_START`|Notifies when a local Garbage Collection has started.|Local here applies to policies such as GenCon, where only the nursery region is being GC'd.|\n+|`J9HOOK_MM_OMR_LOCAL_GC_END`|Notifies when a local GC has ended|If Real Time GC is enabled, the JIT registers `jitHookLocalGCEnd`; otherwise it registers `jitHookReleaseCodeLocalGCEnd`.|\n+|`J9HOOK_MM_OMR_GLOBAL_GC_START`|Notifies when a global GC has started.|Global here implies a GC of the entire heap.|\n+|`J9HOOK_MM_OMR_GLOBAL_GC_END`|Notifies when a global GC has ended.|If Real Time GC is enabled, the JIT registers `jitHookGlobalGCEnd`; otherwise it registers `jitHookReleaseCodeGlobalGCEnd`.|\n+|`J9HOOK_MM_OMR_GC_CYCLE_END`|Notifies when the GC Cycle has ended.|The JIT only registers against this hook if Real Time GC is enabled.|\n+|`J9HOOK_VM_INTERNAL_CLASS_LOAD`|Notifies when a class has been loaded.||\n+|`J9HOOK_VM_CLASS_PREINITIALIZE`|Notifies prior to notify the initialization of a class prior to running the `<clinit>`.|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9f6b4e3f1401784d8f93064b04f40dd65bb3b66"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA5NDMzNQ==", "bodyText": "Ah good catch, the phrasing was different before, and I just did a mass search/replace which clearly didn't work out in this case.", "url": "https://github.com/eclipse-openj9/openj9/pull/10205#discussion_r460094335", "createdAt": "2020-07-24T14:38:26Z", "author": {"login": "dsouzai"}, "path": "doc/compiler/runtime/JITHooks.md", "diffHunk": "@@ -0,0 +1,89 @@\n+<!--\n+Copyright (c) 2020, 2020 IBM Corp. and others\n+\n+This program and the accompanying materials are made available under\n+the terms of the Eclipse Public License 2.0 which accompanies this\n+distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+or the Apache License, Version 2.0 which accompanies this distribution and\n+is available at https://www.apache.org/licenses/LICENSE-2.0.\n+\n+This Source Code may also be made available under the following\n+Secondary Licenses when the conditions for such availability set\n+forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+General Public License, version 2 with the GNU Classpath\n+Exception [1] and GNU General Public License, version 2 with the\n+OpenJDK Assembly Exception [2].\n+\n+[1] https://www.gnu.org/software/classpath/license.html\n+[2] http://openjdk.java.net/legal/assembly-exception.html\n+\n+SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+-->\n+\n+# Background\n+\n+The VM has a mechansim to register callbacks for specific runtime event.\n+The JIT makes use of these events to perform tasks either for functional \n+correctness, performance, or housekeeping. \n+\n+# Hooks\n+This section outlines various events or Hooks the JIT registers a callback\n+against. The callbacks associated with these Hooks can be found in\n+HookedByTheJit.cpp.\n+\n+|Hook|Description|Comment|\n+|--|--|--|\n+|`J9HOOK_VM_PROFILING_BYTECODE_BUFFER_FULL`|Notifies when the bytecode profiling buffer (consumed by the IProfiler) for a given thread is full.||\n+|`J9HOOK_VM_LOOKUP_JNI_ID`|Notifies when a method or field ID is looked up via JNI.|The JIT uses this to get notified when `main` in the Java code is about to be run; it then unregisters this hook.|\n+|`J9HOOK_VM_INITIALIZE_SEND_TARGET`|Notifies when J9Methods are to have their send target initialized.|Used to set initial invocation counts.|\n+|`J9HOOK_MM_OMR_LOCAL_GC_START`|Notifies when a local Garbage Collection has started.|Local here applies to policies such as GenCon, where only the nursery region is being GC'd.|\n+|`J9HOOK_MM_OMR_LOCAL_GC_END`|Notifies when a local GC has ended|If Real Time GC is enabled, the JIT registers `jitHookLocalGCEnd`; otherwise it registers `jitHookReleaseCodeLocalGCEnd`.|\n+|`J9HOOK_MM_OMR_GLOBAL_GC_START`|Notifies when a global GC has started.|Global here implies a GC of the entire heap.|\n+|`J9HOOK_MM_OMR_GLOBAL_GC_END`|Notifies when a global GC has ended.|If Real Time GC is enabled, the JIT registers `jitHookGlobalGCEnd`; otherwise it registers `jitHookReleaseCodeGlobalGCEnd`.|\n+|`J9HOOK_MM_OMR_GC_CYCLE_END`|Notifies when the GC Cycle has ended.|The JIT only registers against this hook if Real Time GC is enabled.|\n+|`J9HOOK_VM_INTERNAL_CLASS_LOAD`|Notifies when a class has been loaded.||\n+|`J9HOOK_VM_CLASS_PREINITIALIZE`|Notifies prior to notify the initialization of a class prior to running the `<clinit>`.|", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg5NjM3Mw=="}, "originalCommit": {"oid": "a9f6b4e3f1401784d8f93064b04f40dd65bb3b66"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYyNjQzMw==", "bodyText": "Fixed in 42c8adf", "url": "https://github.com/eclipse-openj9/openj9/pull/10205#discussion_r461626433", "createdAt": "2020-07-28T14:29:36Z", "author": {"login": "dsouzai"}, "path": "doc/compiler/runtime/JITHooks.md", "diffHunk": "@@ -0,0 +1,89 @@\n+<!--\n+Copyright (c) 2020, 2020 IBM Corp. and others\n+\n+This program and the accompanying materials are made available under\n+the terms of the Eclipse Public License 2.0 which accompanies this\n+distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+or the Apache License, Version 2.0 which accompanies this distribution and\n+is available at https://www.apache.org/licenses/LICENSE-2.0.\n+\n+This Source Code may also be made available under the following\n+Secondary Licenses when the conditions for such availability set\n+forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+General Public License, version 2 with the GNU Classpath\n+Exception [1] and GNU General Public License, version 2 with the\n+OpenJDK Assembly Exception [2].\n+\n+[1] https://www.gnu.org/software/classpath/license.html\n+[2] http://openjdk.java.net/legal/assembly-exception.html\n+\n+SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+-->\n+\n+# Background\n+\n+The VM has a mechansim to register callbacks for specific runtime event.\n+The JIT makes use of these events to perform tasks either for functional \n+correctness, performance, or housekeeping. \n+\n+# Hooks\n+This section outlines various events or Hooks the JIT registers a callback\n+against. The callbacks associated with these Hooks can be found in\n+HookedByTheJit.cpp.\n+\n+|Hook|Description|Comment|\n+|--|--|--|\n+|`J9HOOK_VM_PROFILING_BYTECODE_BUFFER_FULL`|Notifies when the bytecode profiling buffer (consumed by the IProfiler) for a given thread is full.||\n+|`J9HOOK_VM_LOOKUP_JNI_ID`|Notifies when a method or field ID is looked up via JNI.|The JIT uses this to get notified when `main` in the Java code is about to be run; it then unregisters this hook.|\n+|`J9HOOK_VM_INITIALIZE_SEND_TARGET`|Notifies when J9Methods are to have their send target initialized.|Used to set initial invocation counts.|\n+|`J9HOOK_MM_OMR_LOCAL_GC_START`|Notifies when a local Garbage Collection has started.|Local here applies to policies such as GenCon, where only the nursery region is being GC'd.|\n+|`J9HOOK_MM_OMR_LOCAL_GC_END`|Notifies when a local GC has ended|If Real Time GC is enabled, the JIT registers `jitHookLocalGCEnd`; otherwise it registers `jitHookReleaseCodeLocalGCEnd`.|\n+|`J9HOOK_MM_OMR_GLOBAL_GC_START`|Notifies when a global GC has started.|Global here implies a GC of the entire heap.|\n+|`J9HOOK_MM_OMR_GLOBAL_GC_END`|Notifies when a global GC has ended.|If Real Time GC is enabled, the JIT registers `jitHookGlobalGCEnd`; otherwise it registers `jitHookReleaseCodeGlobalGCEnd`.|\n+|`J9HOOK_MM_OMR_GC_CYCLE_END`|Notifies when the GC Cycle has ended.|The JIT only registers against this hook if Real Time GC is enabled.|\n+|`J9HOOK_VM_INTERNAL_CLASS_LOAD`|Notifies when a class has been loaded.||\n+|`J9HOOK_VM_CLASS_PREINITIALIZE`|Notifies prior to notify the initialization of a class prior to running the `<clinit>`.|", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg5NjM3Mw=="}, "originalCommit": {"oid": "a9f6b4e3f1401784d8f93064b04f40dd65bb3b66"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4786, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}