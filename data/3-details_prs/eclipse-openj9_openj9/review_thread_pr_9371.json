{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5NTU5MjQ4", "number": 9371, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNTo0Njo0NlrOD2wabA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNDo1MzowOFrOD3eWTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NzQyODkyOnYy", "diffSide": "RIGHT", "path": "buildenv/ansible/roles/openj9-build-environment/tasks/main.yml", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNTo0Njo0NlrOGMqPsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNzoxMDo1MVrOGMuSTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTkyODI0MA==", "bodyText": "Is this supposed to be a comment?", "url": "https://github.com/eclipse-openj9/openj9/pull/9371#discussion_r415928240", "createdAt": "2020-04-27T15:46:46Z", "author": {"login": "pshipton"}, "path": "buildenv/ansible/roles/openj9-build-environment/tasks/main.yml", "diffHunk": "@@ -22,20 +22,22 @@\n ---\n - name: Create a build folder\n   file:\n-    dest: \"{{ build_dir }}\" \n-    mode: 0755 \n+    dest: \"{{ build_dir }}\"\n+    mode: 0755\n     state: directory\n   tags:\n     - buildenv\n-- name: Get Dockerfile for the building environment\n+- name: Get script to build docker image\n   get_url:\n-    dest: \"{{ build_dir }}/Dockerfile-base\"\n-    url: \"https://raw.githubusercontent.com/eclipse/openj9/master/buildenv/docker/{{ version }}/{{ platform }}/ubuntu16/Dockerfile\"\n-    mode: 0644\n+    dest: \"{{ build_dir }}/mkdocker.sh\"\n+    url: \"https://raw.githubusercontent.com/eclipse/openj9/master/buildenv/docker/mkdocker.sh\"\n+    mode: 0755\n     validate_certs: no\n   tags:\n     - buildenv\n - name: Build the docker image for the building environment\n+  # docker/{{ version }}/{{ platform }}/ubuntu16\n+  # bash mkdocker.sh --tag=openj9-{{ version }}-build --dist=ubuntu --version=16.04 --build", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca90e819e3c73fba4aed259cecdfe25c7141a06f"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk4MzA3Mw==", "bodyText": "No, it is a reminder that I need to learn enough about ansible to run that bash command.", "url": "https://github.com/eclipse-openj9/openj9/pull/9371#discussion_r415983073", "createdAt": "2020-04-27T16:55:08Z", "author": {"login": "keithc-ca"}, "path": "buildenv/ansible/roles/openj9-build-environment/tasks/main.yml", "diffHunk": "@@ -22,20 +22,22 @@\n ---\n - name: Create a build folder\n   file:\n-    dest: \"{{ build_dir }}\" \n-    mode: 0755 \n+    dest: \"{{ build_dir }}\"\n+    mode: 0755\n     state: directory\n   tags:\n     - buildenv\n-- name: Get Dockerfile for the building environment\n+- name: Get script to build docker image\n   get_url:\n-    dest: \"{{ build_dir }}/Dockerfile-base\"\n-    url: \"https://raw.githubusercontent.com/eclipse/openj9/master/buildenv/docker/{{ version }}/{{ platform }}/ubuntu16/Dockerfile\"\n-    mode: 0644\n+    dest: \"{{ build_dir }}/mkdocker.sh\"\n+    url: \"https://raw.githubusercontent.com/eclipse/openj9/master/buildenv/docker/mkdocker.sh\"\n+    mode: 0755\n     validate_certs: no\n   tags:\n     - buildenv\n - name: Build the docker image for the building environment\n+  # docker/{{ version }}/{{ platform }}/ubuntu16\n+  # bash mkdocker.sh --tag=openj9-{{ version }}-build --dist=ubuntu --version=16.04 --build", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTkyODI0MA=="}, "originalCommit": {"oid": "ca90e819e3c73fba4aed259cecdfe25c7141a06f"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk5MzEyOQ==", "bodyText": "To merge in advance of fixing this problem, we should have an issue to address it later.", "url": "https://github.com/eclipse-openj9/openj9/pull/9371#discussion_r415993129", "createdAt": "2020-04-27T17:08:54Z", "author": {"login": "pshipton"}, "path": "buildenv/ansible/roles/openj9-build-environment/tasks/main.yml", "diffHunk": "@@ -22,20 +22,22 @@\n ---\n - name: Create a build folder\n   file:\n-    dest: \"{{ build_dir }}\" \n-    mode: 0755 \n+    dest: \"{{ build_dir }}\"\n+    mode: 0755\n     state: directory\n   tags:\n     - buildenv\n-- name: Get Dockerfile for the building environment\n+- name: Get script to build docker image\n   get_url:\n-    dest: \"{{ build_dir }}/Dockerfile-base\"\n-    url: \"https://raw.githubusercontent.com/eclipse/openj9/master/buildenv/docker/{{ version }}/{{ platform }}/ubuntu16/Dockerfile\"\n-    mode: 0644\n+    dest: \"{{ build_dir }}/mkdocker.sh\"\n+    url: \"https://raw.githubusercontent.com/eclipse/openj9/master/buildenv/docker/mkdocker.sh\"\n+    mode: 0755\n     validate_certs: no\n   tags:\n     - buildenv\n - name: Build the docker image for the building environment\n+  # docker/{{ version }}/{{ platform }}/ubuntu16\n+  # bash mkdocker.sh --tag=openj9-{{ version }}-build --dist=ubuntu --version=16.04 --build", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTkyODI0MA=="}, "originalCommit": {"oid": "ca90e819e3c73fba4aed259cecdfe25c7141a06f"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk5NDQ0Nw==", "bodyText": "It turned out to be easier to just fix it.", "url": "https://github.com/eclipse-openj9/openj9/pull/9371#discussion_r415994447", "createdAt": "2020-04-27T17:10:51Z", "author": {"login": "keithc-ca"}, "path": "buildenv/ansible/roles/openj9-build-environment/tasks/main.yml", "diffHunk": "@@ -22,20 +22,22 @@\n ---\n - name: Create a build folder\n   file:\n-    dest: \"{{ build_dir }}\" \n-    mode: 0755 \n+    dest: \"{{ build_dir }}\"\n+    mode: 0755\n     state: directory\n   tags:\n     - buildenv\n-- name: Get Dockerfile for the building environment\n+- name: Get script to build docker image\n   get_url:\n-    dest: \"{{ build_dir }}/Dockerfile-base\"\n-    url: \"https://raw.githubusercontent.com/eclipse/openj9/master/buildenv/docker/{{ version }}/{{ platform }}/ubuntu16/Dockerfile\"\n-    mode: 0644\n+    dest: \"{{ build_dir }}/mkdocker.sh\"\n+    url: \"https://raw.githubusercontent.com/eclipse/openj9/master/buildenv/docker/mkdocker.sh\"\n+    mode: 0755\n     validate_certs: no\n   tags:\n     - buildenv\n - name: Build the docker image for the building environment\n+  # docker/{{ version }}/{{ platform }}/ubuntu16\n+  # bash mkdocker.sh --tag=openj9-{{ version }}-build --dist=ubuntu --version=16.04 --build", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTkyODI0MA=="}, "originalCommit": {"oid": "ca90e819e3c73fba4aed259cecdfe25c7141a06f"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NzQ1ODg0OnYy", "diffSide": "RIGHT", "path": "buildenv/jenkins/docker-slaves/jenkinsfile-build-container.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNTo1MTowMVrOGMqiWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNjozNTo1MlrOGMstAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTkzMzAxNg==", "bodyText": "There should be an Issue for this.", "url": "https://github.com/eclipse-openj9/openj9/pull/9371#discussion_r415933016", "createdAt": "2020-04-27T15:51:01Z", "author": {"login": "pshipton"}, "path": "buildenv/jenkins/docker-slaves/jenkinsfile-build-container.groovy", "diffHunk": "@@ -63,17 +63,24 @@ timeout(time: 5, unit: 'HOURS') {\n                 }\n                 stage(\"Build\") {\n                     if(params.ghprbPullId) {\n-                        TAGS = \"-t ${REPOSITORY}:PR${ghprbPullId}\"\n+                        TAGS = \"--tag=${REPOSITORY}:PR${ghprbPullId}\"\n                     } else {\n-                        TAGS = \"-t ${REPOSITORY}:${BUILD_NUMBER} -t ${REPOSITORY}:latest\"\n+                        /* FIXME mkdocker.sh doesn't handle multiple --tag options */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca90e819e3c73fba4aed259cecdfe25c7141a06f"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk2ODUxMw==", "bodyText": "The script already supports multiple --tag options: the comment was just stale and has been removed.", "url": "https://github.com/eclipse-openj9/openj9/pull/9371#discussion_r415968513", "createdAt": "2020-04-27T16:35:52Z", "author": {"login": "keithc-ca"}, "path": "buildenv/jenkins/docker-slaves/jenkinsfile-build-container.groovy", "diffHunk": "@@ -63,17 +63,24 @@ timeout(time: 5, unit: 'HOURS') {\n                 }\n                 stage(\"Build\") {\n                     if(params.ghprbPullId) {\n-                        TAGS = \"-t ${REPOSITORY}:PR${ghprbPullId}\"\n+                        TAGS = \"--tag=${REPOSITORY}:PR${ghprbPullId}\"\n                     } else {\n-                        TAGS = \"-t ${REPOSITORY}:${BUILD_NUMBER} -t ${REPOSITORY}:latest\"\n+                        /* FIXME mkdocker.sh doesn't handle multiple --tag options */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTkzMzAxNg=="}, "originalCommit": {"oid": "ca90e819e3c73fba4aed259cecdfe25c7141a06f"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NzQ4MjM3OnYy", "diffSide": "RIGHT", "path": "doc/build-instructions/Build_Instructions_V8.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNTo1NTowNFrOGMqvtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNzoxODoyNFrOGMunSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTkzNjQzNg==", "bodyText": "We're not ready for this yet.", "url": "https://github.com/eclipse-openj9/openj9/pull/9371#discussion_r415936436", "createdAt": "2020-04-27T15:55:04Z", "author": {"login": "pshipton"}, "path": "doc/build-instructions/Build_Instructions_V8.md", "diffHunk": "@@ -159,10 +125,8 @@ bash get_source.sh\n :penguin:\n When you have all the source files that you need, run the configure script, which detects how to build in the current build environment.\n ```\n-bash configure --with-freemarker-jar=/root/freemarker.jar\n+bash configure --with-cmake", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca90e819e3c73fba4aed259cecdfe25c7141a06f"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk4Njk5OA==", "bodyText": "I thought we were close enough (at least for jdk8 on Linux) that it made sense to update this, but I will revert to non-cmake for now.", "url": "https://github.com/eclipse-openj9/openj9/pull/9371#discussion_r415986998", "createdAt": "2020-04-27T17:00:05Z", "author": {"login": "keithc-ca"}, "path": "doc/build-instructions/Build_Instructions_V8.md", "diffHunk": "@@ -159,10 +125,8 @@ bash get_source.sh\n :penguin:\n When you have all the source files that you need, run the configure script, which detects how to build in the current build environment.\n ```\n-bash configure --with-freemarker-jar=/root/freemarker.jar\n+bash configure --with-cmake", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTkzNjQzNg=="}, "originalCommit": {"oid": "ca90e819e3c73fba4aed259cecdfe25c7141a06f"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk5OTgxNw==", "bodyText": "Reverted.", "url": "https://github.com/eclipse-openj9/openj9/pull/9371#discussion_r415999817", "createdAt": "2020-04-27T17:18:24Z", "author": {"login": "keithc-ca"}, "path": "doc/build-instructions/Build_Instructions_V8.md", "diffHunk": "@@ -159,10 +125,8 @@ bash get_source.sh\n :penguin:\n When you have all the source files that you need, run the configure script, which detects how to build in the current build environment.\n ```\n-bash configure --with-freemarker-jar=/root/freemarker.jar\n+bash configure --with-cmake", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTkzNjQzNg=="}, "originalCommit": {"oid": "ca90e819e3c73fba4aed259cecdfe25c7141a06f"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NzUyNzU3OnYy", "diffSide": "RIGHT", "path": "buildenv/ansible/roles/openj9-build-environment/tasks/main.yml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNjowMzozNlrOGMrKgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNzoxMToxMVrOGMuTUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk0MzI5OA==", "bodyText": "This isn't an IBM copyright, seems an IBM copyright needs to be added for these changes.", "url": "https://github.com/eclipse-openj9/openj9/pull/9371#discussion_r415943298", "createdAt": "2020-04-27T16:03:36Z", "author": {"login": "pshipton"}, "path": "buildenv/ansible/roles/openj9-build-environment/tasks/main.yml", "diffHunk": "@@ -1,5 +1,5 @@\n ###############################################################################\n-# Copyright (c) 2018, 2018 Pavel Samolysov\n+# Copyright (c) 2018, 2020 Pavel Samolysov", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca90e819e3c73fba4aed259cecdfe25c7141a06f"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk5NDcwNQ==", "bodyText": "Fixed.", "url": "https://github.com/eclipse-openj9/openj9/pull/9371#discussion_r415994705", "createdAt": "2020-04-27T17:11:11Z", "author": {"login": "keithc-ca"}, "path": "buildenv/ansible/roles/openj9-build-environment/tasks/main.yml", "diffHunk": "@@ -1,5 +1,5 @@\n ###############################################################################\n-# Copyright (c) 2018, 2018 Pavel Samolysov\n+# Copyright (c) 2018, 2020 Pavel Samolysov", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk0MzI5OA=="}, "originalCommit": {"oid": "ca90e819e3c73fba4aed259cecdfe25c7141a06f"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4Nzg3ODE3OnYy", "diffSide": "RIGHT", "path": "buildenv/ansible/roles/openj9-build-environment/tasks/main.yml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNzoxMjo1NVrOGMuYOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNzo0MTo1OVrOGMvrsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk5NTk2MQ==", "bodyText": "Pls use the standard  Copyright (c) 2020, 2020 IBM Corp. and others copyright, used by most of the OpenJ9 files.", "url": "https://github.com/eclipse-openj9/openj9/pull/9371#discussion_r415995961", "createdAt": "2020-04-27T17:12:55Z", "author": {"login": "pshipton"}, "path": "buildenv/ansible/roles/openj9-build-environment/tasks/main.yml", "diffHunk": "@@ -19,40 +19,36 @@\n #\n # SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n ###############################################################################\n+# (c) Copyright IBM Corp. 2020, 2020 All Rights Reserved", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8671b1d3d14905d5046aaa5b37082b3e24daf709"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAwMzY0MA==", "bodyText": "I copied that text from some other file (in jdk8?). Updated as requested.", "url": "https://github.com/eclipse-openj9/openj9/pull/9371#discussion_r416003640", "createdAt": "2020-04-27T17:24:00Z", "author": {"login": "keithc-ca"}, "path": "buildenv/ansible/roles/openj9-build-environment/tasks/main.yml", "diffHunk": "@@ -19,40 +19,36 @@\n #\n # SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n ###############################################################################\n+# (c) Copyright IBM Corp. 2020, 2020 All Rights Reserved", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk5NTk2MQ=="}, "originalCommit": {"oid": "8671b1d3d14905d5046aaa5b37082b3e24daf709"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAxNzMyOQ==", "bodyText": "Yes, the ibmruntimes repos use different copyrights.", "url": "https://github.com/eclipse-openj9/openj9/pull/9371#discussion_r416017329", "createdAt": "2020-04-27T17:41:59Z", "author": {"login": "pshipton"}, "path": "buildenv/ansible/roles/openj9-build-environment/tasks/main.yml", "diffHunk": "@@ -19,40 +19,36 @@\n #\n # SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n ###############################################################################\n+# (c) Copyright IBM Corp. 2020, 2020 All Rights Reserved", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk5NTk2MQ=="}, "originalCommit": {"oid": "8671b1d3d14905d5046aaa5b37082b3e24daf709"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4ODA2MzM4OnYy", "diffSide": "RIGHT", "path": "buildenv/docker/mkdocker.sh", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNzo1MDoyOVrOGMwDhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMDoyMzoyM1rOGM2GDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAyMzQzMA==", "bodyText": "This seems to download quite a few JDKs. Is the intention that the resulting Dockerfile will be able to build all versions of the JDK? If so does that mean the user is expected to explicitly initialize JAVA_HOME to point to the correct JDK before kicking off the build process?", "url": "https://github.com/eclipse-openj9/openj9/pull/9371#discussion_r416023430", "createdAt": "2020-04-27T17:50:29Z", "author": {"login": "fjeremic"}, "path": "buildenv/docker/mkdocker.sh", "diffHunk": "@@ -0,0 +1,672 @@\n+#!/bin/bash -\n+\n+print_license() {\n+cat <<- EOF\n+# Copyright (c) 2019, 2020 IBM Corp. and others\n+#\n+# This program and the accompanying materials are made available under\n+# the terms of the Eclipse Public License 2.0 which accompanies this\n+# distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+# or the Apache License, Version 2.0 which accompanies this distribution and\n+# is available at https://www.apache.org/licenses/LICENSE-2.0.\n+#\n+# This Source Code may also be made available under the following\n+# Secondary Licenses when the conditions for such availability set\n+# forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+# General Public License, version 2 with the GNU Classpath\n+# Exception [1] and GNU General Public License, version 2 with the\n+# OpenJDK Assembly Exception [2].\n+#\n+# [1] https://www.gnu.org/software/classpath/license.html\n+# [2] http://openjdk.java.net/legal/assembly-exception.html\n+#\n+# SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+EOF\n+}\n+\n+usage() {\n+  echo \"Usage: $0 [OPTION]...\"\n+  echo \"Generate a Dockerfile for building OpenJ9\"\n+  echo \"\"\n+  echo \"Options:\"\n+  echo \"  --help|-h      print this help, then exit\"\n+  echo \"  --arch=...     specify the processor architecture (default: host architecture)\"\n+  echo \"  --build        build the docker image (overrides '--print')\"\n+  echo \"  --cuda         include CUDA header files\"\n+  echo \"  --dist=...     specify the Linux distribution (e.g. centos, ubuntu)\"\n+  echo \"  --print        write the Dockerfile to stdout (default; overrides '--build')\"\n+  echo \"  --tag=...      specify a name for the docker image (may be repeated, default: none)\"\n+  echo \"  --user=...     specify the user name (default: 'jenkins')\"\n+  echo \"  --version=...  specify the distribution version (e.g. 6.9, 16.04)\"\n+  echo \"\"\n+  local arch=\"$(uname -m)\"\n+  echo \"Supported build patterns on this host ($arch):\"\n+if [ $arch = x86_64 ] ; then\n+  echo \"  bash mkdocker.sh --tag=openj9/cent69 --dist=centos --version=6.9 --build\"\n+fi\n+if [ $arch = x86_64 -o $arch = ppc64le ] ; then\n+  echo \"  bash mkdocker.sh --tag=openj9/cent7  --dist=centos --version=7   --build\"\n+fi\n+  echo \"  bash mkdocker.sh --tag=openj9/ub16   --dist=ubuntu --version=16  --build\"\n+  echo \"  bash mkdocker.sh --tag=openj9/ub18   --dist=ubuntu --version=18  --build\"\n+  echo \"  bash mkdocker.sh --tag=openj9/ub20   --dist=ubuntu --version=20  --build\"\n+  exit 1\n+}\n+\n+# Global configuration variables.\n+action=print\n+arch=\n+cuda=no\n+dist=unspecified\n+tags=()\n+user=jenkins\n+version=unspecified\n+\n+# Frequently used commands.\n+wget_O=\"wget --progress=dot:mega -O\"\n+\n+parse_options() {\n+  for arg in \"$@\" ; do\n+    case \"$arg\" in\n+      -h | --help)\n+        usage\n+        ;;\n+      --arch=*)\n+        arch=\"${arg#*=}\"\n+        ;;\n+      --build)\n+        action=build\n+        ;;\n+      --cuda)\n+        cuda=9.0\n+        ;;\n+      --dist=*)\n+        dist=\"${arg#*=}\"\n+        ;;\n+      --print)\n+        action=print\n+        ;;\n+      --tag=*)\n+        tags+=(\"${arg#*=}\")\n+        ;;\n+      --user=*)\n+        user=\"${arg#*=}\"\n+        ;;\n+      --version=*)\n+        version=\"${arg#*=}\"\n+        ;;\n+      *) # bad option\n+        echo \"Unsupported option: '$arg'\" >&2\n+        usage\n+        ;;\n+    esac\n+  done\n+}\n+\n+validate_options() {\n+  if [ \"x$arch\" = x ] ; then\n+    arch=\"$(uname -m)\"\n+  fi\n+\n+  case \"$arch\" in\n+    ppc64le | s390x | x86_64)\n+      ;;\n+    *)\n+      echo \"Unsupported architecture: '$arch'\" >&2\n+      exit 1\n+      ;;\n+  esac\n+\n+  # Validate the distribution and version.\n+  case \"$dist\" in\n+    centos)\n+      if [ $arch = s390x ] ; then\n+        echo \"CentOS is not supported on $arch\" >&2\n+        exit 1\n+      fi\n+      case $version in\n+        6.9)\n+          if [ $arch = ppc64le ] ; then\n+            echo \"CentOS version 6.9 is not supported on $arch\" >&2\n+            exit 1\n+          fi\n+          ;;\n+        7)\n+          ;;\n+        unspecified)\n+          echo \"Unspecified CentOS version: use '--version' option\" >&2\n+          exit 1\n+          ;;\n+        *)\n+          echo \"Unsupported CentOS version: '$version'\" >&2\n+          exit 1\n+          ;;\n+      esac\n+      ;;\n+    ubuntu)\n+      case $version in\n+        16 | 18 | 20)\n+          version=$version.04\n+          ;;\n+        16.04 | 18.04 | 20.04)\n+          ;;\n+        unspecified)\n+          echo \"Unspecified Ubuntu version: use '--version' option\" >&2\n+          exit 1\n+          ;;\n+        *)\n+          echo \"Unsupported Ubuntu version: '$version'\" >&2\n+          exit 1\n+          ;;\n+      esac\n+      ;;\n+    unspecified)\n+      echo \"Unspecified distribution: use '--dist' option\" >&2\n+      exit 1\n+      ;;\n+    *)\n+      echo \"Unsupported distribution: '$dist'\" >&2\n+      exit 1\n+      ;;\n+  esac\n+\n+  # If CUDA is requested, validate the architecture.\n+  if [ $cuda != no ] ; then\n+    case \"$arch\" in\n+      ppc64le | x86_64)\n+        ;;\n+      *)\n+        echo \"CUDA is not supported on architecture: '$arch'\" >&2\n+        exit 1\n+        ;;\n+    esac\n+  fi\n+}\n+\n+build_cmd() {\n+  local cmd=build\n+  local file=$1\n+  for tag in ${tags[@]} ; do\n+    cmd=\"$cmd --tag $tag\"\n+  done\n+  echo $cmd --file $file .\n+}\n+\n+preamble() {\n+  echo \"\"\n+  echo \"# Generated by: mkdocker.sh $command_line\"\n+  echo \"\"\n+  echo \"# To use this docker file:\"\n+  echo \"# First, copy your public ssh key into authorized_keys.\"\n+  echo \"# Then, in the directory containing the Dockerfile, authorized_keys\"\n+  echo \"# file, and known_hosts file, run:\"\n+  echo \"#   docker $(build_cmd Dockerfile)\"\n+  echo \"#\"\n+if [ ${#tags[@]} -lt 2 ] ; then\n+  echo \"# To start a container based on the resulting image, run this command:\"\n+else\n+  echo \"# To start a container based on the resulting image, run one of these commands:\"\n+fi\n+if [ ${#tags[@]} -eq 0 ] ; then\n+  echo \"#   docker run -it <image>\"\n+else\n+for tag in ${tags[@]} ; do\n+  echo \"#   docker run -it $tag\"\n+done\n+fi\n+  echo \"\"\n+if [ $cuda != no ] ; then\n+  echo \"FROM nvidia/cuda:${cuda}-devel-ubuntu16.04 AS cuda-dev\"\n+  echo \"\"\n+fi\n+  echo \"FROM $dist:$version\"\n+}\n+\n+install_centos_packages() {\n+  echo \"RUN yum -y update \\\\\"\n+if [ $version = 6.9 ] ; then\n+  echo \" && yum -y install https://\\$(rpm -E '%{?centos:centos}%{!?centos:rhel}%{rhel}').iuscommunity.org/ius-release.rpm \\\\\"\n+fi\n+  echo \" && yum -y install \\\\\"\n+  echo \"    alsa-lib-devel \\\\\"\n+if [ $arch = ppc64le ] ; then\n+  echo \"    automake \\\\\" # required to update make\n+fi\n+  echo \"    bind-utils \\\\\"\n+  echo \"    bison \\\\\"\n+  echo \"    bzip2 \\\\\"\n+  echo \"    ca-certificates \\\\\"\n+  echo \"    cpio \\\\\"\n+  echo \"    cups-devel \\\\\"\n+  echo \"    curl-devel \\\\\" # required by git\n+  echo \"    elfutils-libelf-devel \\\\\"\n+  echo \"    expat-devel \\\\\" # required by git and the xml parser\n+  echo \"    file-devel \\\\\"\n+  echo \"    file-libs \\\\\"\n+  echo \"    flex \\\\\"\n+  echo \"    fontconfig \\\\\"\n+  echo \"    fontconfig-devel \\\\\"\n+  echo \"    freetype-devel \\\\\"\n+  echo \"    gettext \\\\\"\n+  echo \"    gettext-devel \\\\\" # required by git\n+  echo \"    glibc \\\\\"\n+  echo \"    glibc-common \\\\\"\n+  echo \"    glibc-devel \\\\\"\n+  echo \"    gmp-devel \\\\\"\n+  echo \"    lbzip2 \\\\\"\n+  echo \"    libdwarf \\\\\"\n+  echo \"    libdwarf-devel \\\\\"\n+  echo \"    libffi-devel \\\\\"\n+  echo \"    libstdc++-static \\\\\"\n+  echo \"    libX11-devel \\\\\"\n+  echo \"    libXext-devel \\\\\"\n+  echo \"    libXi-devel \\\\\"\n+  echo \"    libXrandr-devel \\\\\"\n+  echo \"    libXrender-devel \\\\\"\n+  echo \"    libXt-devel \\\\\"\n+  echo \"    libXtst-devel \\\\\"\n+  echo \"    make \\\\\"\n+  echo \"    mesa-libGL-devel \\\\\"\n+  echo \"    mpfr-devel \\\\\"\n+  echo \"    ntp \\\\\"\n+  echo \"    numactl-devel \\\\\"\n+  echo \"    openssh-clients \\\\\"\n+  echo \"    openssh-server \\\\\"\n+  echo \"    openssl-devel \\\\\" # required by git, etc.\n+  echo \"    perl-CPAN \\\\\"\n+  echo \"    perl-DBI \\\\\"\n+  echo \"    perl-devel \\\\\"\n+  echo \"    perl-ExtUtils-MakeMaker \\\\\" # required by git\n+  echo \"    perl-GD \\\\\"\n+  echo \"    perl-libwww-perl \\\\\"\n+  echo \"    perl-Time-HiRes \\\\\"\n+if [ $arch = ppc64le ] ; then\n+  echo \"    texinfo \\\\\" # required to update make\n+fi\n+  echo \"    unzip \\\\\"\n+  echo \"    vim \\\\\"\n+  echo \"    wget \\\\\"\n+  echo \"    xorg-x11-server-Xvfb \\\\\"\n+  echo \"    xz \\\\\"\n+  echo \"    zip \\\\\"\n+  echo \"    zlib-devel \\\\\" # required by git, python\n+  echo \" && yum clean all\"\n+  echo \"\"\n+  local autoconf_version=2.69\n+  echo \"# Install autoconf.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O autoconf.tar.gz https://fossies.org/linux/misc/autoconf-$autoconf_version.tar.gz \\\\\"\n+  echo \" && tar -xzf autoconf.tar.gz \\\\\"\n+  echo \" && cd autoconf-$autoconf_version \\\\\"\n+  echo \" && ./configure --build=\\$(rpm --eval %{_host}) \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf autoconf.tar.gz autoconf-$autoconf_version\"\n+  echo \"\"\n+  echo \"# Install gcc-7.5.\"\n+  echo \"RUN cd /usr/local \\\\\"\n+  echo \" && $wget_O gcc-7.tar.xz 'https://ci.adoptopenjdk.net/userContent/gcc/gcc750+ccache.$arch.tar.xz' \\\\\"\n+  echo \" && tar -xJf gcc-7.tar.xz --strip-components=1 \\\\\"\n+  echo \" && ln -sf ../local/bin/gcc-7.5 /usr/bin/gcc \\\\\"\n+  echo \" && ln -sf ../local/bin/g++-7.5 /usr/bin/g++ \\\\\"\n+  echo \" && ln -sf gcc /usr/bin/cc \\\\\"\n+  echo \" && ln -sf g++ /usr/bin/c++ \\\\\"\n+  echo \" && rm -f gcc-7.tar.xz\"\n+  echo \"\"\n+  local git_version=2.5.3\n+  echo \"# Install git.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O git.tar.gz https://www.kernel.org/pub/software/scm/git/git-$git_version.tar.gz \\\\\"\n+  echo \" && tar -xzf git.tar.gz \\\\\"\n+  echo \" && cd git-$git_version \\\\\"\n+  echo \" && make prefix=/usr/local all \\\\\"\n+  echo \" && make prefix=/usr/local install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf git.tar.gz git-$git_version\"\n+if [ $arch = ppc64le ] ; then\n+  # make 4.2 requires automake 1.15\n+  echo \"\"\n+  local automake_version=1.15\n+  echo \"# Update automake.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O automake.tar.gz http://ftp.gnu.org/gnu/automake/automake-$automake_version.tar.gz \\\\\"\n+  echo \" && tar -xzf automake.tar.gz \\\\\"\n+  echo \" && cd automake-$automake_version \\\\\"\n+  echo \" && ./configure \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf automake.tar.gz automake-$automake_version\"\n+  echo \"\"\n+  local make_version=4.2\n+  echo \"# Update make.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O make.tar.gz https://github.com/mirror/make/archive/$make_version.tar.gz \\\\\"\n+  echo \" && tar -xzf make.tar.gz \\\\\"\n+  echo \" && cd make-$make_version \\\\\"\n+  echo \" && ACLOCAL_PATH=/usr/share/aclocal autoreconf -i \\\\\"\n+  echo \" && ./configure \\\\\"\n+  echo \" && make update \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && ln -s make /usr/local/bin/gmake \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf make.tar.gz make-$make_version\"\n+fi\n+if [ $arch = x86_64 ] ; then\n+  echo \"\"\n+  local nasm_version=2.13.03\n+  echo \"# Install nasm.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O nasm.tar.gz https://www.nasm.us/pub/nasm/releasebuilds/$nasm_version/nasm-$nasm_version.tar.gz \\\\\"\n+  echo \" && tar -xzf nasm.tar.gz \\\\\"\n+  echo \" && cd nasm-$nasm_version \\\\\"\n+  echo \" && ./configure -prefix=/usr/local \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf nasm.tar.gz nasm-$nasm_version\"\n+fi\n+}\n+\n+install_ubuntu_packages() {\n+  echo \"RUN apt-get update \\\\\"\n+  echo \" && apt-get install -qq -y --no-install-recommends \\\\\"\n+  echo \"    software-properties-common \\\\\"\n+if [ $version = 16.04 ] ; then\n+  echo \"    python-software-properties \\\\\"\n+fi\n+  echo \" && add-apt-repository ppa:ubuntu-toolchain-r/test \\\\\"\n+  echo \" && apt-get update \\\\\"\n+  echo \" && apt-get install -qq -y --no-install-recommends \\\\\"\n+  echo \"    ant \\\\\"\n+  echo \"    ant-contrib \\\\\"\n+  echo \"    autoconf \\\\\"\n+  echo \"    build-essential \\\\\"\n+  echo \"    ca-certificates \\\\\"\n+  echo \"    cmake \\\\\"\n+  echo \"    cpio \\\\\"\n+  echo \"    curl \\\\\"\n+  echo \"    file \\\\\"\n+if [ $arch != s390x ] ; then\n+  echo \"    g++-7 \\\\\"\n+  echo \"    gcc-7 \\\\\"\n+fi\n+  echo \"    gdb \\\\\"\n+  echo \"    git \\\\\"\n+  echo \"    libasound2-dev \\\\\"\n+  echo \"    libcups2-dev \\\\\"\n+  echo \"    libdwarf-dev \\\\\"\n+  echo \"    libelf-dev \\\\\"\n+  echo \"    libexpat1-dev \\\\\" # required by the xml parser\n+  echo \"    libffi-dev \\\\\"\n+  echo \"    libfontconfig \\\\\"\n+  echo \"    libfontconfig1-dev \\\\\"\n+  echo \"    libfreetype6-dev \\\\\"\n+if [ $arch != s390x ] ; then\n+  echo \"    libnuma-dev \\\\\"\n+fi\n+if [ $arch = s390x ] ; then\n+  echo \"    libmpc3 \\\\\"\n+fi\n+  echo \"    libssl-dev \\\\\"\n+  echo \"    libx11-dev \\\\\"\n+  echo \"    libxext-dev \\\\\"\n+  echo \"    libxrandr-dev \\\\\"\n+  echo \"    libxrender-dev \\\\\"\n+  echo \"    libxt-dev \\\\\"\n+  echo \"    libxtst-dev \\\\\"\n+  echo \"    make \\\\\"\n+if [ $arch = x86_64 ] ; then\n+  echo \"    nasm \\\\\"\n+fi\n+  echo \"    openssh-client \\\\\"\n+  echo \"    openssh-server \\\\\"\n+  echo \"    perl \\\\\"\n+  echo \"    pkg-config \\\\\"\n+if [ $version = 16.04 ] ; then\n+  echo \"    realpath \\\\\"\n+fi\n+  echo \"    ssh \\\\\"\n+  echo \"    unzip \\\\\"\n+  echo \"    wget \\\\\"\n+  echo \"    xvfb \\\\\"\n+  echo \"    zip \\\\\"\n+  echo \"    zlib1g-dev \\\\\"\n+  echo \" && rm -rf /var/lib/apt/lists/*\"\n+}\n+\n+install_packages() {\n+  echo \"\"\n+  echo \"# Install required OS tools.\"\n+  echo \"\"\n+if [ $dist = centos ] ; then\n+  install_centos_packages\n+else\n+  install_ubuntu_packages\n+fi\n+}\n+\n+install_compilers() {\n+if [ $arch = s390x ] ; then\n+  echo \"\"\n+  local gcc_version=7.5\n+  echo \"# Install gcc.\"\n+  echo \"RUN cd /usr/local \\\\\"\n+  echo \" && $wget_O gcc.tar.xz 'https://ci.adoptopenjdk.net/userContent/gcc/gcc750+ccache.$arch.tar.xz' \\\\\"\n+  echo \" && tar -xJf gcc.tar.xz --strip-components=1 \\\\\"\n+  echo \" && rm -f gcc.tar.xz\"\n+  echo \"\"\n+  echo \"# Create various symbolic links.\"\n+  echo \"RUN ln -s lib/$arch-linux-gnu /usr/lib64 \\\\\"\n+if [ $dist:$version = ubuntu:18.04 ] ; then\n+  # On s390x perl needs version 4 of mpfr, but we only have version 6.\n+  echo \" && ln -s libmpfr.so.6 /usr/lib64/libmpfr.so.4 \\\\\"\n+fi\n+  # /usr/local/include/c++ is a directory that already exists so we create these symbolic links in two steps.\n+  echo \" && ( cd /usr/local/include && for f in \\$(ls /usr/include/s390x-linux-gnu/c++) ; do test -e \\$f || ln -s /usr/include/s390x-linux-gnu/c++/\\$f . ; done ) \\\\\"\n+  echo \" && ln -s \\$(ls -d /usr/include/s390x-linux-gnu/* | grep -v '/c++\\$') /usr/local/include \\\\\"\n+  echo \" && ln -sf ../local/bin/g++-$gcc_version /usr/bin/g++-7 \\\\\"\n+  echo \" && ln -sf ../local/bin/gcc-$gcc_version /usr/bin/gcc-7\"\n+fi\n+if [ $dist != centos ] ; then\n+  echo \"\"\n+  echo \"ENV CC=gcc-7 CXX=g++-7\"\n+fi\n+}\n+\n+install_cmake() {\n+if [ $dist == centos ] ; then\n+  echo \"\"\n+  local cmake_version=3.11\n+  local cmake_name=cmake-$cmake_version.4\n+  echo \"# Install cmake.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O cmake.tar.gz https://cmake.org/files/v$cmake_version/$cmake_name.tar.gz \\\\\"\n+  echo \" && tar -xzf cmake.tar.gz \\\\\"\n+  echo \" && cd $cmake_name \\\\\"\n+  echo \" && export LDFLAGS='-static-libstdc++' \\\\\"\n+  echo \" && ./configure \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf cmake.tar.gz $cmake_name\"\n+fi\n+}\n+\n+prepare_user() {\n+  # Ensure authorized_keys exists.\n+  test -f authorized_keys || touch authorized_keys\n+  # Ensure github.com is a known host.\n+  ( test -f known_hosts && grep -q '^github.com ' known_hosts ) \\\n+    || ssh-keyscan github.com >> known_hosts\n+}\n+\n+create_user() {\n+  echo \"\"\n+  echo \"# Add user home and copy authorized_keys and known_hosts.\"\n+  echo \"RUN useradd -ms /bin/bash $user \\\\\"\n+  echo \" && mkdir /home/$user/.ssh \\\\\"\n+  echo \" && chmod 700 /home/$user/.ssh\"\n+  echo \"COPY authorized_keys known_hosts /home/$user/.ssh/\"\n+  echo \"RUN chown -R $user:$user /home/$user \\\\\"\n+  echo \" && chmod 600 /home/$user/.ssh/authorized_keys /home/$user/.ssh/known_hosts\"\n+}\n+\n+install_freemarker() {\n+  echo \"\"\n+  local freemarker_version=2.3.8\n+  echo \"# Download and extract freemarker.jar to /root/freemarker.jar.\"\n+  echo \"RUN mkdir -p /root \\\\\"\n+  echo \" && cd /root \\\\\"\n+  echo \" && $wget_O freemarker.tar.gz https://sourceforge.net/projects/freemarker/files/freemarker/$freemarker_version/freemarker-$freemarker_version.tar.gz/download \\\\\"\n+  echo \" && tar -xzf freemarker.tar.gz freemarker-$freemarker_version/lib/freemarker.jar --strip=2 \\\\\"\n+  echo \" && rm -f freemarker.tar.gz\"\n+}\n+\n+bootjdk_dirs() {\n+  for version in $@ ; do\n+    if [ $version = 8 ] ; then\n+      echo /usr/lib/jvm/adoptojdk-java-80\n+    else\n+      echo /usr/lib/jvm/adoptojdk-java-$version\n+    fi\n+  done\n+}\n+\n+bootjdk_url() {\n+  local version=$1\n+  if [ $arch = x86_64 ] ; then\n+    echo https://api.adoptopenjdk.net/v3/binary/latest/$version/ga/linux/x64/jdk/openj9/normal/adoptopenjdk\n+  else\n+    echo https://api.adoptopenjdk.net/v3/binary/latest/$version/ga/linux/$arch/jdk/openj9/normal/adoptopenjdk\n+  fi\n+}\n+\n+install_bootjdks() {\n+  local versions=\"8 11 13 14\"\n+  echo \"\"\n+  echo \"# Download and install boot JDKs from AdoptOpenJDK.\"\n+  echo \"RUN cd /tmp \\\\\"\n+for version in $versions ; do\n+  echo \" && $wget_O jdk$version.tar.gz $(bootjdk_url $version) \\\\\"\n+done\n+  echo \" && mkdir -p\" $(bootjdk_dirs $versions) \"\\\\\"\n+for version in $versions ; do\n+  echo \" && tar -xzf jdk$version.tar.gz --directory=$(bootjdk_dirs $version)/ --strip=1 \\\\\"\n+done\n+  echo \" && rm -f jdk*.tar.gz\"\n+}\n+\n+install_cuda() {\n+  echo \"\"\n+  echo \"# Copy header files necessary to build a VM with CUDA support.\"\n+  echo \"RUN mkdir -p /usr/local/cuda-${cuda}/nvvm\"\n+  echo \"COPY --from=cuda-dev /usr/local/cuda-${cuda}/include      /usr/local/cuda-${cuda}/include\"\n+  echo \"COPY --from=cuda-dev /usr/local/cuda-${cuda}/nvvm/include /usr/local/cuda-${cuda}/nvvm/include\"\n+  echo \"ENV CUDA_HOME=/usr/local/cuda-${cuda}\"\n+}\n+\n+install_python() {\n+  local python_version=3.7.3\n+  echo \"\"\n+  echo \"# Install python.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O python.tar.xz https://www.python.org/ftp/python/$python_version/Python-$python_version.tar.xz \\\\\"\n+  echo \" && tar -xJf python.tar.xz \\\\\"\n+  echo \" && cd Python-$python_version \\\\\"\n+  echo \" && ./configure --prefix=/usr/local \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf python.tar.xz Python-$python_version\"\n+}\n+\n+adjust_ldconfig() {\n+  echo \"\"\n+  echo \"# Run ldconfig to discover newly installed shared libraries.\"\n+  echo \"RUN for dir in lib lib64 ; do echo /usr/local/$dir ; done > /etc/ld.so.conf.d/usr-local.conf \\\\\"\n+  echo \" && ldconfig\"\n+}\n+\n+# called as: add_git_remote remote url\n+add_git_remote() {\n+  echo \" && git remote add ${1} ${2} \\\\\"\n+  # Like-named (and conflicting) tags exist in multiple repositories: don't fetch any tags.\n+  echo \" && git config remote.${1}.tagopt --no-tags \\\\\"\n+}\n+\n+create_git_cache() {\n+  # The jdk14 remote is fetched first because that repository was subjected to\n+  # 'git gc --aggressive --prune=all' before it was first published making it much\n+  # smaller than the other jdk repositories. There is a large degree of overlap\n+  # among the jdk repositories so a relatively small number of commits must be\n+  # fetched from the others.\n+  echo \"\"\n+  echo \"# Setup a reference repository cache for faster clones in containers.\"\n+  echo \"RUN mkdir /home/$user/git_cache \\\\\"\n+  echo \" && cd /home/$user/git_cache \\\\\"\n+  echo \" && git init --bare \\\\\"\n+  add_git_remote jdk8    https://github.com/ibmruntimes/openj9-openjdk-jdk8.git\n+  add_git_remote jdk11   https://github.com/ibmruntimes/openj9-openjdk-jdk11.git\n+  add_git_remote jdk14   https://github.com/ibmruntimes/openj9-openjdk-jdk14.git\n+  add_git_remote jdknext https://github.com/ibmruntimes/openj9-openjdk-jdk.git\n+  add_git_remote omr     https://github.com/eclipse/openj9-omr.git\n+  add_git_remote openj9  https://github.com/eclipse/openj9.git\n+  echo \" && echo Fetching repository cache... \\\\\"\n+  echo \" && git fetch jdk14 \\\\\"\n+  echo \" && git fetch --all \\\\\"\n+  echo \" && echo Shrinking repository cache... \\\\\"\n+  echo \" && git gc --aggressive --prune=all\"\n+}\n+\n+configure_ssh() {\n+  echo \"\"\n+  echo \"# Configure sshd.\"\n+  echo \"RUN mkdir /var/run/sshd \\\\\"\n+  echo \" && sed -i -e 's|#PermitRootLogin|PermitRootLogin|' \\\\\"\n+  echo \"           -e 's|#RSAAuthentication.*|RSAAuthentication yes|' \\\\\"\n+  echo \"           -e 's|#PubkeyAuthentication.*|PubkeyAuthentication yes|' /etc/ssh/sshd_config\"\n+  echo \"\"\n+  echo \"# SSH login fix so user is not kicked off after login.\"\n+  echo \"RUN sed -i -e 's|session\\s*required\\s*pam_loginuid.so|session optional pam_loginuid.so|' /etc/pam.d/sshd\"\n+  echo \"\"\n+  echo \"# Expose SSH port.\"\n+  echo \"EXPOSE 22\"\n+}\n+\n+print_dockerfile() {\n+  print_license\n+  preamble\n+  install_packages\n+  create_user\n+if [ $cuda != no ] ; then\n+  install_cuda\n+fi\n+  install_freemarker\n+\n+  install_compilers\n+\n+  install_cmake\n+  install_python\n+\n+  adjust_ldconfig\n+  configure_ssh\n+\n+  install_bootjdks", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "547dbb1b691a8ad1b4a2af1def6ae75493f8bd15"}, "originalPosition": 656}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAzNTc1OQ==", "bodyText": "Yes, boot JDKs will be available for building any (current) version. Users are expected to use the --with-boot-jdk= configure option, e.g.:\nbash configure --with-boot-jdk=/usr/lib/jvm/adoptojdk-java-80 ...\n\nor\nbash configure --with-boot-jdk=/usr/lib/jvm/adoptojdk-java-11 ...\n\nSetting JAVA_HOME is not necessary.", "url": "https://github.com/eclipse-openj9/openj9/pull/9371#discussion_r416035759", "createdAt": "2020-04-27T18:07:35Z", "author": {"login": "keithc-ca"}, "path": "buildenv/docker/mkdocker.sh", "diffHunk": "@@ -0,0 +1,672 @@\n+#!/bin/bash -\n+\n+print_license() {\n+cat <<- EOF\n+# Copyright (c) 2019, 2020 IBM Corp. and others\n+#\n+# This program and the accompanying materials are made available under\n+# the terms of the Eclipse Public License 2.0 which accompanies this\n+# distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+# or the Apache License, Version 2.0 which accompanies this distribution and\n+# is available at https://www.apache.org/licenses/LICENSE-2.0.\n+#\n+# This Source Code may also be made available under the following\n+# Secondary Licenses when the conditions for such availability set\n+# forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+# General Public License, version 2 with the GNU Classpath\n+# Exception [1] and GNU General Public License, version 2 with the\n+# OpenJDK Assembly Exception [2].\n+#\n+# [1] https://www.gnu.org/software/classpath/license.html\n+# [2] http://openjdk.java.net/legal/assembly-exception.html\n+#\n+# SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+EOF\n+}\n+\n+usage() {\n+  echo \"Usage: $0 [OPTION]...\"\n+  echo \"Generate a Dockerfile for building OpenJ9\"\n+  echo \"\"\n+  echo \"Options:\"\n+  echo \"  --help|-h      print this help, then exit\"\n+  echo \"  --arch=...     specify the processor architecture (default: host architecture)\"\n+  echo \"  --build        build the docker image (overrides '--print')\"\n+  echo \"  --cuda         include CUDA header files\"\n+  echo \"  --dist=...     specify the Linux distribution (e.g. centos, ubuntu)\"\n+  echo \"  --print        write the Dockerfile to stdout (default; overrides '--build')\"\n+  echo \"  --tag=...      specify a name for the docker image (may be repeated, default: none)\"\n+  echo \"  --user=...     specify the user name (default: 'jenkins')\"\n+  echo \"  --version=...  specify the distribution version (e.g. 6.9, 16.04)\"\n+  echo \"\"\n+  local arch=\"$(uname -m)\"\n+  echo \"Supported build patterns on this host ($arch):\"\n+if [ $arch = x86_64 ] ; then\n+  echo \"  bash mkdocker.sh --tag=openj9/cent69 --dist=centos --version=6.9 --build\"\n+fi\n+if [ $arch = x86_64 -o $arch = ppc64le ] ; then\n+  echo \"  bash mkdocker.sh --tag=openj9/cent7  --dist=centos --version=7   --build\"\n+fi\n+  echo \"  bash mkdocker.sh --tag=openj9/ub16   --dist=ubuntu --version=16  --build\"\n+  echo \"  bash mkdocker.sh --tag=openj9/ub18   --dist=ubuntu --version=18  --build\"\n+  echo \"  bash mkdocker.sh --tag=openj9/ub20   --dist=ubuntu --version=20  --build\"\n+  exit 1\n+}\n+\n+# Global configuration variables.\n+action=print\n+arch=\n+cuda=no\n+dist=unspecified\n+tags=()\n+user=jenkins\n+version=unspecified\n+\n+# Frequently used commands.\n+wget_O=\"wget --progress=dot:mega -O\"\n+\n+parse_options() {\n+  for arg in \"$@\" ; do\n+    case \"$arg\" in\n+      -h | --help)\n+        usage\n+        ;;\n+      --arch=*)\n+        arch=\"${arg#*=}\"\n+        ;;\n+      --build)\n+        action=build\n+        ;;\n+      --cuda)\n+        cuda=9.0\n+        ;;\n+      --dist=*)\n+        dist=\"${arg#*=}\"\n+        ;;\n+      --print)\n+        action=print\n+        ;;\n+      --tag=*)\n+        tags+=(\"${arg#*=}\")\n+        ;;\n+      --user=*)\n+        user=\"${arg#*=}\"\n+        ;;\n+      --version=*)\n+        version=\"${arg#*=}\"\n+        ;;\n+      *) # bad option\n+        echo \"Unsupported option: '$arg'\" >&2\n+        usage\n+        ;;\n+    esac\n+  done\n+}\n+\n+validate_options() {\n+  if [ \"x$arch\" = x ] ; then\n+    arch=\"$(uname -m)\"\n+  fi\n+\n+  case \"$arch\" in\n+    ppc64le | s390x | x86_64)\n+      ;;\n+    *)\n+      echo \"Unsupported architecture: '$arch'\" >&2\n+      exit 1\n+      ;;\n+  esac\n+\n+  # Validate the distribution and version.\n+  case \"$dist\" in\n+    centos)\n+      if [ $arch = s390x ] ; then\n+        echo \"CentOS is not supported on $arch\" >&2\n+        exit 1\n+      fi\n+      case $version in\n+        6.9)\n+          if [ $arch = ppc64le ] ; then\n+            echo \"CentOS version 6.9 is not supported on $arch\" >&2\n+            exit 1\n+          fi\n+          ;;\n+        7)\n+          ;;\n+        unspecified)\n+          echo \"Unspecified CentOS version: use '--version' option\" >&2\n+          exit 1\n+          ;;\n+        *)\n+          echo \"Unsupported CentOS version: '$version'\" >&2\n+          exit 1\n+          ;;\n+      esac\n+      ;;\n+    ubuntu)\n+      case $version in\n+        16 | 18 | 20)\n+          version=$version.04\n+          ;;\n+        16.04 | 18.04 | 20.04)\n+          ;;\n+        unspecified)\n+          echo \"Unspecified Ubuntu version: use '--version' option\" >&2\n+          exit 1\n+          ;;\n+        *)\n+          echo \"Unsupported Ubuntu version: '$version'\" >&2\n+          exit 1\n+          ;;\n+      esac\n+      ;;\n+    unspecified)\n+      echo \"Unspecified distribution: use '--dist' option\" >&2\n+      exit 1\n+      ;;\n+    *)\n+      echo \"Unsupported distribution: '$dist'\" >&2\n+      exit 1\n+      ;;\n+  esac\n+\n+  # If CUDA is requested, validate the architecture.\n+  if [ $cuda != no ] ; then\n+    case \"$arch\" in\n+      ppc64le | x86_64)\n+        ;;\n+      *)\n+        echo \"CUDA is not supported on architecture: '$arch'\" >&2\n+        exit 1\n+        ;;\n+    esac\n+  fi\n+}\n+\n+build_cmd() {\n+  local cmd=build\n+  local file=$1\n+  for tag in ${tags[@]} ; do\n+    cmd=\"$cmd --tag $tag\"\n+  done\n+  echo $cmd --file $file .\n+}\n+\n+preamble() {\n+  echo \"\"\n+  echo \"# Generated by: mkdocker.sh $command_line\"\n+  echo \"\"\n+  echo \"# To use this docker file:\"\n+  echo \"# First, copy your public ssh key into authorized_keys.\"\n+  echo \"# Then, in the directory containing the Dockerfile, authorized_keys\"\n+  echo \"# file, and known_hosts file, run:\"\n+  echo \"#   docker $(build_cmd Dockerfile)\"\n+  echo \"#\"\n+if [ ${#tags[@]} -lt 2 ] ; then\n+  echo \"# To start a container based on the resulting image, run this command:\"\n+else\n+  echo \"# To start a container based on the resulting image, run one of these commands:\"\n+fi\n+if [ ${#tags[@]} -eq 0 ] ; then\n+  echo \"#   docker run -it <image>\"\n+else\n+for tag in ${tags[@]} ; do\n+  echo \"#   docker run -it $tag\"\n+done\n+fi\n+  echo \"\"\n+if [ $cuda != no ] ; then\n+  echo \"FROM nvidia/cuda:${cuda}-devel-ubuntu16.04 AS cuda-dev\"\n+  echo \"\"\n+fi\n+  echo \"FROM $dist:$version\"\n+}\n+\n+install_centos_packages() {\n+  echo \"RUN yum -y update \\\\\"\n+if [ $version = 6.9 ] ; then\n+  echo \" && yum -y install https://\\$(rpm -E '%{?centos:centos}%{!?centos:rhel}%{rhel}').iuscommunity.org/ius-release.rpm \\\\\"\n+fi\n+  echo \" && yum -y install \\\\\"\n+  echo \"    alsa-lib-devel \\\\\"\n+if [ $arch = ppc64le ] ; then\n+  echo \"    automake \\\\\" # required to update make\n+fi\n+  echo \"    bind-utils \\\\\"\n+  echo \"    bison \\\\\"\n+  echo \"    bzip2 \\\\\"\n+  echo \"    ca-certificates \\\\\"\n+  echo \"    cpio \\\\\"\n+  echo \"    cups-devel \\\\\"\n+  echo \"    curl-devel \\\\\" # required by git\n+  echo \"    elfutils-libelf-devel \\\\\"\n+  echo \"    expat-devel \\\\\" # required by git and the xml parser\n+  echo \"    file-devel \\\\\"\n+  echo \"    file-libs \\\\\"\n+  echo \"    flex \\\\\"\n+  echo \"    fontconfig \\\\\"\n+  echo \"    fontconfig-devel \\\\\"\n+  echo \"    freetype-devel \\\\\"\n+  echo \"    gettext \\\\\"\n+  echo \"    gettext-devel \\\\\" # required by git\n+  echo \"    glibc \\\\\"\n+  echo \"    glibc-common \\\\\"\n+  echo \"    glibc-devel \\\\\"\n+  echo \"    gmp-devel \\\\\"\n+  echo \"    lbzip2 \\\\\"\n+  echo \"    libdwarf \\\\\"\n+  echo \"    libdwarf-devel \\\\\"\n+  echo \"    libffi-devel \\\\\"\n+  echo \"    libstdc++-static \\\\\"\n+  echo \"    libX11-devel \\\\\"\n+  echo \"    libXext-devel \\\\\"\n+  echo \"    libXi-devel \\\\\"\n+  echo \"    libXrandr-devel \\\\\"\n+  echo \"    libXrender-devel \\\\\"\n+  echo \"    libXt-devel \\\\\"\n+  echo \"    libXtst-devel \\\\\"\n+  echo \"    make \\\\\"\n+  echo \"    mesa-libGL-devel \\\\\"\n+  echo \"    mpfr-devel \\\\\"\n+  echo \"    ntp \\\\\"\n+  echo \"    numactl-devel \\\\\"\n+  echo \"    openssh-clients \\\\\"\n+  echo \"    openssh-server \\\\\"\n+  echo \"    openssl-devel \\\\\" # required by git, etc.\n+  echo \"    perl-CPAN \\\\\"\n+  echo \"    perl-DBI \\\\\"\n+  echo \"    perl-devel \\\\\"\n+  echo \"    perl-ExtUtils-MakeMaker \\\\\" # required by git\n+  echo \"    perl-GD \\\\\"\n+  echo \"    perl-libwww-perl \\\\\"\n+  echo \"    perl-Time-HiRes \\\\\"\n+if [ $arch = ppc64le ] ; then\n+  echo \"    texinfo \\\\\" # required to update make\n+fi\n+  echo \"    unzip \\\\\"\n+  echo \"    vim \\\\\"\n+  echo \"    wget \\\\\"\n+  echo \"    xorg-x11-server-Xvfb \\\\\"\n+  echo \"    xz \\\\\"\n+  echo \"    zip \\\\\"\n+  echo \"    zlib-devel \\\\\" # required by git, python\n+  echo \" && yum clean all\"\n+  echo \"\"\n+  local autoconf_version=2.69\n+  echo \"# Install autoconf.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O autoconf.tar.gz https://fossies.org/linux/misc/autoconf-$autoconf_version.tar.gz \\\\\"\n+  echo \" && tar -xzf autoconf.tar.gz \\\\\"\n+  echo \" && cd autoconf-$autoconf_version \\\\\"\n+  echo \" && ./configure --build=\\$(rpm --eval %{_host}) \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf autoconf.tar.gz autoconf-$autoconf_version\"\n+  echo \"\"\n+  echo \"# Install gcc-7.5.\"\n+  echo \"RUN cd /usr/local \\\\\"\n+  echo \" && $wget_O gcc-7.tar.xz 'https://ci.adoptopenjdk.net/userContent/gcc/gcc750+ccache.$arch.tar.xz' \\\\\"\n+  echo \" && tar -xJf gcc-7.tar.xz --strip-components=1 \\\\\"\n+  echo \" && ln -sf ../local/bin/gcc-7.5 /usr/bin/gcc \\\\\"\n+  echo \" && ln -sf ../local/bin/g++-7.5 /usr/bin/g++ \\\\\"\n+  echo \" && ln -sf gcc /usr/bin/cc \\\\\"\n+  echo \" && ln -sf g++ /usr/bin/c++ \\\\\"\n+  echo \" && rm -f gcc-7.tar.xz\"\n+  echo \"\"\n+  local git_version=2.5.3\n+  echo \"# Install git.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O git.tar.gz https://www.kernel.org/pub/software/scm/git/git-$git_version.tar.gz \\\\\"\n+  echo \" && tar -xzf git.tar.gz \\\\\"\n+  echo \" && cd git-$git_version \\\\\"\n+  echo \" && make prefix=/usr/local all \\\\\"\n+  echo \" && make prefix=/usr/local install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf git.tar.gz git-$git_version\"\n+if [ $arch = ppc64le ] ; then\n+  # make 4.2 requires automake 1.15\n+  echo \"\"\n+  local automake_version=1.15\n+  echo \"# Update automake.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O automake.tar.gz http://ftp.gnu.org/gnu/automake/automake-$automake_version.tar.gz \\\\\"\n+  echo \" && tar -xzf automake.tar.gz \\\\\"\n+  echo \" && cd automake-$automake_version \\\\\"\n+  echo \" && ./configure \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf automake.tar.gz automake-$automake_version\"\n+  echo \"\"\n+  local make_version=4.2\n+  echo \"# Update make.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O make.tar.gz https://github.com/mirror/make/archive/$make_version.tar.gz \\\\\"\n+  echo \" && tar -xzf make.tar.gz \\\\\"\n+  echo \" && cd make-$make_version \\\\\"\n+  echo \" && ACLOCAL_PATH=/usr/share/aclocal autoreconf -i \\\\\"\n+  echo \" && ./configure \\\\\"\n+  echo \" && make update \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && ln -s make /usr/local/bin/gmake \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf make.tar.gz make-$make_version\"\n+fi\n+if [ $arch = x86_64 ] ; then\n+  echo \"\"\n+  local nasm_version=2.13.03\n+  echo \"# Install nasm.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O nasm.tar.gz https://www.nasm.us/pub/nasm/releasebuilds/$nasm_version/nasm-$nasm_version.tar.gz \\\\\"\n+  echo \" && tar -xzf nasm.tar.gz \\\\\"\n+  echo \" && cd nasm-$nasm_version \\\\\"\n+  echo \" && ./configure -prefix=/usr/local \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf nasm.tar.gz nasm-$nasm_version\"\n+fi\n+}\n+\n+install_ubuntu_packages() {\n+  echo \"RUN apt-get update \\\\\"\n+  echo \" && apt-get install -qq -y --no-install-recommends \\\\\"\n+  echo \"    software-properties-common \\\\\"\n+if [ $version = 16.04 ] ; then\n+  echo \"    python-software-properties \\\\\"\n+fi\n+  echo \" && add-apt-repository ppa:ubuntu-toolchain-r/test \\\\\"\n+  echo \" && apt-get update \\\\\"\n+  echo \" && apt-get install -qq -y --no-install-recommends \\\\\"\n+  echo \"    ant \\\\\"\n+  echo \"    ant-contrib \\\\\"\n+  echo \"    autoconf \\\\\"\n+  echo \"    build-essential \\\\\"\n+  echo \"    ca-certificates \\\\\"\n+  echo \"    cmake \\\\\"\n+  echo \"    cpio \\\\\"\n+  echo \"    curl \\\\\"\n+  echo \"    file \\\\\"\n+if [ $arch != s390x ] ; then\n+  echo \"    g++-7 \\\\\"\n+  echo \"    gcc-7 \\\\\"\n+fi\n+  echo \"    gdb \\\\\"\n+  echo \"    git \\\\\"\n+  echo \"    libasound2-dev \\\\\"\n+  echo \"    libcups2-dev \\\\\"\n+  echo \"    libdwarf-dev \\\\\"\n+  echo \"    libelf-dev \\\\\"\n+  echo \"    libexpat1-dev \\\\\" # required by the xml parser\n+  echo \"    libffi-dev \\\\\"\n+  echo \"    libfontconfig \\\\\"\n+  echo \"    libfontconfig1-dev \\\\\"\n+  echo \"    libfreetype6-dev \\\\\"\n+if [ $arch != s390x ] ; then\n+  echo \"    libnuma-dev \\\\\"\n+fi\n+if [ $arch = s390x ] ; then\n+  echo \"    libmpc3 \\\\\"\n+fi\n+  echo \"    libssl-dev \\\\\"\n+  echo \"    libx11-dev \\\\\"\n+  echo \"    libxext-dev \\\\\"\n+  echo \"    libxrandr-dev \\\\\"\n+  echo \"    libxrender-dev \\\\\"\n+  echo \"    libxt-dev \\\\\"\n+  echo \"    libxtst-dev \\\\\"\n+  echo \"    make \\\\\"\n+if [ $arch = x86_64 ] ; then\n+  echo \"    nasm \\\\\"\n+fi\n+  echo \"    openssh-client \\\\\"\n+  echo \"    openssh-server \\\\\"\n+  echo \"    perl \\\\\"\n+  echo \"    pkg-config \\\\\"\n+if [ $version = 16.04 ] ; then\n+  echo \"    realpath \\\\\"\n+fi\n+  echo \"    ssh \\\\\"\n+  echo \"    unzip \\\\\"\n+  echo \"    wget \\\\\"\n+  echo \"    xvfb \\\\\"\n+  echo \"    zip \\\\\"\n+  echo \"    zlib1g-dev \\\\\"\n+  echo \" && rm -rf /var/lib/apt/lists/*\"\n+}\n+\n+install_packages() {\n+  echo \"\"\n+  echo \"# Install required OS tools.\"\n+  echo \"\"\n+if [ $dist = centos ] ; then\n+  install_centos_packages\n+else\n+  install_ubuntu_packages\n+fi\n+}\n+\n+install_compilers() {\n+if [ $arch = s390x ] ; then\n+  echo \"\"\n+  local gcc_version=7.5\n+  echo \"# Install gcc.\"\n+  echo \"RUN cd /usr/local \\\\\"\n+  echo \" && $wget_O gcc.tar.xz 'https://ci.adoptopenjdk.net/userContent/gcc/gcc750+ccache.$arch.tar.xz' \\\\\"\n+  echo \" && tar -xJf gcc.tar.xz --strip-components=1 \\\\\"\n+  echo \" && rm -f gcc.tar.xz\"\n+  echo \"\"\n+  echo \"# Create various symbolic links.\"\n+  echo \"RUN ln -s lib/$arch-linux-gnu /usr/lib64 \\\\\"\n+if [ $dist:$version = ubuntu:18.04 ] ; then\n+  # On s390x perl needs version 4 of mpfr, but we only have version 6.\n+  echo \" && ln -s libmpfr.so.6 /usr/lib64/libmpfr.so.4 \\\\\"\n+fi\n+  # /usr/local/include/c++ is a directory that already exists so we create these symbolic links in two steps.\n+  echo \" && ( cd /usr/local/include && for f in \\$(ls /usr/include/s390x-linux-gnu/c++) ; do test -e \\$f || ln -s /usr/include/s390x-linux-gnu/c++/\\$f . ; done ) \\\\\"\n+  echo \" && ln -s \\$(ls -d /usr/include/s390x-linux-gnu/* | grep -v '/c++\\$') /usr/local/include \\\\\"\n+  echo \" && ln -sf ../local/bin/g++-$gcc_version /usr/bin/g++-7 \\\\\"\n+  echo \" && ln -sf ../local/bin/gcc-$gcc_version /usr/bin/gcc-7\"\n+fi\n+if [ $dist != centos ] ; then\n+  echo \"\"\n+  echo \"ENV CC=gcc-7 CXX=g++-7\"\n+fi\n+}\n+\n+install_cmake() {\n+if [ $dist == centos ] ; then\n+  echo \"\"\n+  local cmake_version=3.11\n+  local cmake_name=cmake-$cmake_version.4\n+  echo \"# Install cmake.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O cmake.tar.gz https://cmake.org/files/v$cmake_version/$cmake_name.tar.gz \\\\\"\n+  echo \" && tar -xzf cmake.tar.gz \\\\\"\n+  echo \" && cd $cmake_name \\\\\"\n+  echo \" && export LDFLAGS='-static-libstdc++' \\\\\"\n+  echo \" && ./configure \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf cmake.tar.gz $cmake_name\"\n+fi\n+}\n+\n+prepare_user() {\n+  # Ensure authorized_keys exists.\n+  test -f authorized_keys || touch authorized_keys\n+  # Ensure github.com is a known host.\n+  ( test -f known_hosts && grep -q '^github.com ' known_hosts ) \\\n+    || ssh-keyscan github.com >> known_hosts\n+}\n+\n+create_user() {\n+  echo \"\"\n+  echo \"# Add user home and copy authorized_keys and known_hosts.\"\n+  echo \"RUN useradd -ms /bin/bash $user \\\\\"\n+  echo \" && mkdir /home/$user/.ssh \\\\\"\n+  echo \" && chmod 700 /home/$user/.ssh\"\n+  echo \"COPY authorized_keys known_hosts /home/$user/.ssh/\"\n+  echo \"RUN chown -R $user:$user /home/$user \\\\\"\n+  echo \" && chmod 600 /home/$user/.ssh/authorized_keys /home/$user/.ssh/known_hosts\"\n+}\n+\n+install_freemarker() {\n+  echo \"\"\n+  local freemarker_version=2.3.8\n+  echo \"# Download and extract freemarker.jar to /root/freemarker.jar.\"\n+  echo \"RUN mkdir -p /root \\\\\"\n+  echo \" && cd /root \\\\\"\n+  echo \" && $wget_O freemarker.tar.gz https://sourceforge.net/projects/freemarker/files/freemarker/$freemarker_version/freemarker-$freemarker_version.tar.gz/download \\\\\"\n+  echo \" && tar -xzf freemarker.tar.gz freemarker-$freemarker_version/lib/freemarker.jar --strip=2 \\\\\"\n+  echo \" && rm -f freemarker.tar.gz\"\n+}\n+\n+bootjdk_dirs() {\n+  for version in $@ ; do\n+    if [ $version = 8 ] ; then\n+      echo /usr/lib/jvm/adoptojdk-java-80\n+    else\n+      echo /usr/lib/jvm/adoptojdk-java-$version\n+    fi\n+  done\n+}\n+\n+bootjdk_url() {\n+  local version=$1\n+  if [ $arch = x86_64 ] ; then\n+    echo https://api.adoptopenjdk.net/v3/binary/latest/$version/ga/linux/x64/jdk/openj9/normal/adoptopenjdk\n+  else\n+    echo https://api.adoptopenjdk.net/v3/binary/latest/$version/ga/linux/$arch/jdk/openj9/normal/adoptopenjdk\n+  fi\n+}\n+\n+install_bootjdks() {\n+  local versions=\"8 11 13 14\"\n+  echo \"\"\n+  echo \"# Download and install boot JDKs from AdoptOpenJDK.\"\n+  echo \"RUN cd /tmp \\\\\"\n+for version in $versions ; do\n+  echo \" && $wget_O jdk$version.tar.gz $(bootjdk_url $version) \\\\\"\n+done\n+  echo \" && mkdir -p\" $(bootjdk_dirs $versions) \"\\\\\"\n+for version in $versions ; do\n+  echo \" && tar -xzf jdk$version.tar.gz --directory=$(bootjdk_dirs $version)/ --strip=1 \\\\\"\n+done\n+  echo \" && rm -f jdk*.tar.gz\"\n+}\n+\n+install_cuda() {\n+  echo \"\"\n+  echo \"# Copy header files necessary to build a VM with CUDA support.\"\n+  echo \"RUN mkdir -p /usr/local/cuda-${cuda}/nvvm\"\n+  echo \"COPY --from=cuda-dev /usr/local/cuda-${cuda}/include      /usr/local/cuda-${cuda}/include\"\n+  echo \"COPY --from=cuda-dev /usr/local/cuda-${cuda}/nvvm/include /usr/local/cuda-${cuda}/nvvm/include\"\n+  echo \"ENV CUDA_HOME=/usr/local/cuda-${cuda}\"\n+}\n+\n+install_python() {\n+  local python_version=3.7.3\n+  echo \"\"\n+  echo \"# Install python.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O python.tar.xz https://www.python.org/ftp/python/$python_version/Python-$python_version.tar.xz \\\\\"\n+  echo \" && tar -xJf python.tar.xz \\\\\"\n+  echo \" && cd Python-$python_version \\\\\"\n+  echo \" && ./configure --prefix=/usr/local \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf python.tar.xz Python-$python_version\"\n+}\n+\n+adjust_ldconfig() {\n+  echo \"\"\n+  echo \"# Run ldconfig to discover newly installed shared libraries.\"\n+  echo \"RUN for dir in lib lib64 ; do echo /usr/local/$dir ; done > /etc/ld.so.conf.d/usr-local.conf \\\\\"\n+  echo \" && ldconfig\"\n+}\n+\n+# called as: add_git_remote remote url\n+add_git_remote() {\n+  echo \" && git remote add ${1} ${2} \\\\\"\n+  # Like-named (and conflicting) tags exist in multiple repositories: don't fetch any tags.\n+  echo \" && git config remote.${1}.tagopt --no-tags \\\\\"\n+}\n+\n+create_git_cache() {\n+  # The jdk14 remote is fetched first because that repository was subjected to\n+  # 'git gc --aggressive --prune=all' before it was first published making it much\n+  # smaller than the other jdk repositories. There is a large degree of overlap\n+  # among the jdk repositories so a relatively small number of commits must be\n+  # fetched from the others.\n+  echo \"\"\n+  echo \"# Setup a reference repository cache for faster clones in containers.\"\n+  echo \"RUN mkdir /home/$user/git_cache \\\\\"\n+  echo \" && cd /home/$user/git_cache \\\\\"\n+  echo \" && git init --bare \\\\\"\n+  add_git_remote jdk8    https://github.com/ibmruntimes/openj9-openjdk-jdk8.git\n+  add_git_remote jdk11   https://github.com/ibmruntimes/openj9-openjdk-jdk11.git\n+  add_git_remote jdk14   https://github.com/ibmruntimes/openj9-openjdk-jdk14.git\n+  add_git_remote jdknext https://github.com/ibmruntimes/openj9-openjdk-jdk.git\n+  add_git_remote omr     https://github.com/eclipse/openj9-omr.git\n+  add_git_remote openj9  https://github.com/eclipse/openj9.git\n+  echo \" && echo Fetching repository cache... \\\\\"\n+  echo \" && git fetch jdk14 \\\\\"\n+  echo \" && git fetch --all \\\\\"\n+  echo \" && echo Shrinking repository cache... \\\\\"\n+  echo \" && git gc --aggressive --prune=all\"\n+}\n+\n+configure_ssh() {\n+  echo \"\"\n+  echo \"# Configure sshd.\"\n+  echo \"RUN mkdir /var/run/sshd \\\\\"\n+  echo \" && sed -i -e 's|#PermitRootLogin|PermitRootLogin|' \\\\\"\n+  echo \"           -e 's|#RSAAuthentication.*|RSAAuthentication yes|' \\\\\"\n+  echo \"           -e 's|#PubkeyAuthentication.*|PubkeyAuthentication yes|' /etc/ssh/sshd_config\"\n+  echo \"\"\n+  echo \"# SSH login fix so user is not kicked off after login.\"\n+  echo \"RUN sed -i -e 's|session\\s*required\\s*pam_loginuid.so|session optional pam_loginuid.so|' /etc/pam.d/sshd\"\n+  echo \"\"\n+  echo \"# Expose SSH port.\"\n+  echo \"EXPOSE 22\"\n+}\n+\n+print_dockerfile() {\n+  print_license\n+  preamble\n+  install_packages\n+  create_user\n+if [ $cuda != no ] ; then\n+  install_cuda\n+fi\n+  install_freemarker\n+\n+  install_compilers\n+\n+  install_cmake\n+  install_python\n+\n+  adjust_ldconfig\n+  configure_ssh\n+\n+  install_bootjdks", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAyMzQzMA=="}, "originalCommit": {"oid": "547dbb1b691a8ad1b4a2af1def6ae75493f8bd15"}, "originalPosition": 656}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjExOTI5NQ==", "bodyText": "I see we don't consistently suggest using --with-boot-jdk= in the build docs, it's only suggested for Windows.", "url": "https://github.com/eclipse-openj9/openj9/pull/9371#discussion_r416119295", "createdAt": "2020-04-27T20:18:24Z", "author": {"login": "pshipton"}, "path": "buildenv/docker/mkdocker.sh", "diffHunk": "@@ -0,0 +1,672 @@\n+#!/bin/bash -\n+\n+print_license() {\n+cat <<- EOF\n+# Copyright (c) 2019, 2020 IBM Corp. and others\n+#\n+# This program and the accompanying materials are made available under\n+# the terms of the Eclipse Public License 2.0 which accompanies this\n+# distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+# or the Apache License, Version 2.0 which accompanies this distribution and\n+# is available at https://www.apache.org/licenses/LICENSE-2.0.\n+#\n+# This Source Code may also be made available under the following\n+# Secondary Licenses when the conditions for such availability set\n+# forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+# General Public License, version 2 with the GNU Classpath\n+# Exception [1] and GNU General Public License, version 2 with the\n+# OpenJDK Assembly Exception [2].\n+#\n+# [1] https://www.gnu.org/software/classpath/license.html\n+# [2] http://openjdk.java.net/legal/assembly-exception.html\n+#\n+# SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+EOF\n+}\n+\n+usage() {\n+  echo \"Usage: $0 [OPTION]...\"\n+  echo \"Generate a Dockerfile for building OpenJ9\"\n+  echo \"\"\n+  echo \"Options:\"\n+  echo \"  --help|-h      print this help, then exit\"\n+  echo \"  --arch=...     specify the processor architecture (default: host architecture)\"\n+  echo \"  --build        build the docker image (overrides '--print')\"\n+  echo \"  --cuda         include CUDA header files\"\n+  echo \"  --dist=...     specify the Linux distribution (e.g. centos, ubuntu)\"\n+  echo \"  --print        write the Dockerfile to stdout (default; overrides '--build')\"\n+  echo \"  --tag=...      specify a name for the docker image (may be repeated, default: none)\"\n+  echo \"  --user=...     specify the user name (default: 'jenkins')\"\n+  echo \"  --version=...  specify the distribution version (e.g. 6.9, 16.04)\"\n+  echo \"\"\n+  local arch=\"$(uname -m)\"\n+  echo \"Supported build patterns on this host ($arch):\"\n+if [ $arch = x86_64 ] ; then\n+  echo \"  bash mkdocker.sh --tag=openj9/cent69 --dist=centos --version=6.9 --build\"\n+fi\n+if [ $arch = x86_64 -o $arch = ppc64le ] ; then\n+  echo \"  bash mkdocker.sh --tag=openj9/cent7  --dist=centos --version=7   --build\"\n+fi\n+  echo \"  bash mkdocker.sh --tag=openj9/ub16   --dist=ubuntu --version=16  --build\"\n+  echo \"  bash mkdocker.sh --tag=openj9/ub18   --dist=ubuntu --version=18  --build\"\n+  echo \"  bash mkdocker.sh --tag=openj9/ub20   --dist=ubuntu --version=20  --build\"\n+  exit 1\n+}\n+\n+# Global configuration variables.\n+action=print\n+arch=\n+cuda=no\n+dist=unspecified\n+tags=()\n+user=jenkins\n+version=unspecified\n+\n+# Frequently used commands.\n+wget_O=\"wget --progress=dot:mega -O\"\n+\n+parse_options() {\n+  for arg in \"$@\" ; do\n+    case \"$arg\" in\n+      -h | --help)\n+        usage\n+        ;;\n+      --arch=*)\n+        arch=\"${arg#*=}\"\n+        ;;\n+      --build)\n+        action=build\n+        ;;\n+      --cuda)\n+        cuda=9.0\n+        ;;\n+      --dist=*)\n+        dist=\"${arg#*=}\"\n+        ;;\n+      --print)\n+        action=print\n+        ;;\n+      --tag=*)\n+        tags+=(\"${arg#*=}\")\n+        ;;\n+      --user=*)\n+        user=\"${arg#*=}\"\n+        ;;\n+      --version=*)\n+        version=\"${arg#*=}\"\n+        ;;\n+      *) # bad option\n+        echo \"Unsupported option: '$arg'\" >&2\n+        usage\n+        ;;\n+    esac\n+  done\n+}\n+\n+validate_options() {\n+  if [ \"x$arch\" = x ] ; then\n+    arch=\"$(uname -m)\"\n+  fi\n+\n+  case \"$arch\" in\n+    ppc64le | s390x | x86_64)\n+      ;;\n+    *)\n+      echo \"Unsupported architecture: '$arch'\" >&2\n+      exit 1\n+      ;;\n+  esac\n+\n+  # Validate the distribution and version.\n+  case \"$dist\" in\n+    centos)\n+      if [ $arch = s390x ] ; then\n+        echo \"CentOS is not supported on $arch\" >&2\n+        exit 1\n+      fi\n+      case $version in\n+        6.9)\n+          if [ $arch = ppc64le ] ; then\n+            echo \"CentOS version 6.9 is not supported on $arch\" >&2\n+            exit 1\n+          fi\n+          ;;\n+        7)\n+          ;;\n+        unspecified)\n+          echo \"Unspecified CentOS version: use '--version' option\" >&2\n+          exit 1\n+          ;;\n+        *)\n+          echo \"Unsupported CentOS version: '$version'\" >&2\n+          exit 1\n+          ;;\n+      esac\n+      ;;\n+    ubuntu)\n+      case $version in\n+        16 | 18 | 20)\n+          version=$version.04\n+          ;;\n+        16.04 | 18.04 | 20.04)\n+          ;;\n+        unspecified)\n+          echo \"Unspecified Ubuntu version: use '--version' option\" >&2\n+          exit 1\n+          ;;\n+        *)\n+          echo \"Unsupported Ubuntu version: '$version'\" >&2\n+          exit 1\n+          ;;\n+      esac\n+      ;;\n+    unspecified)\n+      echo \"Unspecified distribution: use '--dist' option\" >&2\n+      exit 1\n+      ;;\n+    *)\n+      echo \"Unsupported distribution: '$dist'\" >&2\n+      exit 1\n+      ;;\n+  esac\n+\n+  # If CUDA is requested, validate the architecture.\n+  if [ $cuda != no ] ; then\n+    case \"$arch\" in\n+      ppc64le | x86_64)\n+        ;;\n+      *)\n+        echo \"CUDA is not supported on architecture: '$arch'\" >&2\n+        exit 1\n+        ;;\n+    esac\n+  fi\n+}\n+\n+build_cmd() {\n+  local cmd=build\n+  local file=$1\n+  for tag in ${tags[@]} ; do\n+    cmd=\"$cmd --tag $tag\"\n+  done\n+  echo $cmd --file $file .\n+}\n+\n+preamble() {\n+  echo \"\"\n+  echo \"# Generated by: mkdocker.sh $command_line\"\n+  echo \"\"\n+  echo \"# To use this docker file:\"\n+  echo \"# First, copy your public ssh key into authorized_keys.\"\n+  echo \"# Then, in the directory containing the Dockerfile, authorized_keys\"\n+  echo \"# file, and known_hosts file, run:\"\n+  echo \"#   docker $(build_cmd Dockerfile)\"\n+  echo \"#\"\n+if [ ${#tags[@]} -lt 2 ] ; then\n+  echo \"# To start a container based on the resulting image, run this command:\"\n+else\n+  echo \"# To start a container based on the resulting image, run one of these commands:\"\n+fi\n+if [ ${#tags[@]} -eq 0 ] ; then\n+  echo \"#   docker run -it <image>\"\n+else\n+for tag in ${tags[@]} ; do\n+  echo \"#   docker run -it $tag\"\n+done\n+fi\n+  echo \"\"\n+if [ $cuda != no ] ; then\n+  echo \"FROM nvidia/cuda:${cuda}-devel-ubuntu16.04 AS cuda-dev\"\n+  echo \"\"\n+fi\n+  echo \"FROM $dist:$version\"\n+}\n+\n+install_centos_packages() {\n+  echo \"RUN yum -y update \\\\\"\n+if [ $version = 6.9 ] ; then\n+  echo \" && yum -y install https://\\$(rpm -E '%{?centos:centos}%{!?centos:rhel}%{rhel}').iuscommunity.org/ius-release.rpm \\\\\"\n+fi\n+  echo \" && yum -y install \\\\\"\n+  echo \"    alsa-lib-devel \\\\\"\n+if [ $arch = ppc64le ] ; then\n+  echo \"    automake \\\\\" # required to update make\n+fi\n+  echo \"    bind-utils \\\\\"\n+  echo \"    bison \\\\\"\n+  echo \"    bzip2 \\\\\"\n+  echo \"    ca-certificates \\\\\"\n+  echo \"    cpio \\\\\"\n+  echo \"    cups-devel \\\\\"\n+  echo \"    curl-devel \\\\\" # required by git\n+  echo \"    elfutils-libelf-devel \\\\\"\n+  echo \"    expat-devel \\\\\" # required by git and the xml parser\n+  echo \"    file-devel \\\\\"\n+  echo \"    file-libs \\\\\"\n+  echo \"    flex \\\\\"\n+  echo \"    fontconfig \\\\\"\n+  echo \"    fontconfig-devel \\\\\"\n+  echo \"    freetype-devel \\\\\"\n+  echo \"    gettext \\\\\"\n+  echo \"    gettext-devel \\\\\" # required by git\n+  echo \"    glibc \\\\\"\n+  echo \"    glibc-common \\\\\"\n+  echo \"    glibc-devel \\\\\"\n+  echo \"    gmp-devel \\\\\"\n+  echo \"    lbzip2 \\\\\"\n+  echo \"    libdwarf \\\\\"\n+  echo \"    libdwarf-devel \\\\\"\n+  echo \"    libffi-devel \\\\\"\n+  echo \"    libstdc++-static \\\\\"\n+  echo \"    libX11-devel \\\\\"\n+  echo \"    libXext-devel \\\\\"\n+  echo \"    libXi-devel \\\\\"\n+  echo \"    libXrandr-devel \\\\\"\n+  echo \"    libXrender-devel \\\\\"\n+  echo \"    libXt-devel \\\\\"\n+  echo \"    libXtst-devel \\\\\"\n+  echo \"    make \\\\\"\n+  echo \"    mesa-libGL-devel \\\\\"\n+  echo \"    mpfr-devel \\\\\"\n+  echo \"    ntp \\\\\"\n+  echo \"    numactl-devel \\\\\"\n+  echo \"    openssh-clients \\\\\"\n+  echo \"    openssh-server \\\\\"\n+  echo \"    openssl-devel \\\\\" # required by git, etc.\n+  echo \"    perl-CPAN \\\\\"\n+  echo \"    perl-DBI \\\\\"\n+  echo \"    perl-devel \\\\\"\n+  echo \"    perl-ExtUtils-MakeMaker \\\\\" # required by git\n+  echo \"    perl-GD \\\\\"\n+  echo \"    perl-libwww-perl \\\\\"\n+  echo \"    perl-Time-HiRes \\\\\"\n+if [ $arch = ppc64le ] ; then\n+  echo \"    texinfo \\\\\" # required to update make\n+fi\n+  echo \"    unzip \\\\\"\n+  echo \"    vim \\\\\"\n+  echo \"    wget \\\\\"\n+  echo \"    xorg-x11-server-Xvfb \\\\\"\n+  echo \"    xz \\\\\"\n+  echo \"    zip \\\\\"\n+  echo \"    zlib-devel \\\\\" # required by git, python\n+  echo \" && yum clean all\"\n+  echo \"\"\n+  local autoconf_version=2.69\n+  echo \"# Install autoconf.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O autoconf.tar.gz https://fossies.org/linux/misc/autoconf-$autoconf_version.tar.gz \\\\\"\n+  echo \" && tar -xzf autoconf.tar.gz \\\\\"\n+  echo \" && cd autoconf-$autoconf_version \\\\\"\n+  echo \" && ./configure --build=\\$(rpm --eval %{_host}) \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf autoconf.tar.gz autoconf-$autoconf_version\"\n+  echo \"\"\n+  echo \"# Install gcc-7.5.\"\n+  echo \"RUN cd /usr/local \\\\\"\n+  echo \" && $wget_O gcc-7.tar.xz 'https://ci.adoptopenjdk.net/userContent/gcc/gcc750+ccache.$arch.tar.xz' \\\\\"\n+  echo \" && tar -xJf gcc-7.tar.xz --strip-components=1 \\\\\"\n+  echo \" && ln -sf ../local/bin/gcc-7.5 /usr/bin/gcc \\\\\"\n+  echo \" && ln -sf ../local/bin/g++-7.5 /usr/bin/g++ \\\\\"\n+  echo \" && ln -sf gcc /usr/bin/cc \\\\\"\n+  echo \" && ln -sf g++ /usr/bin/c++ \\\\\"\n+  echo \" && rm -f gcc-7.tar.xz\"\n+  echo \"\"\n+  local git_version=2.5.3\n+  echo \"# Install git.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O git.tar.gz https://www.kernel.org/pub/software/scm/git/git-$git_version.tar.gz \\\\\"\n+  echo \" && tar -xzf git.tar.gz \\\\\"\n+  echo \" && cd git-$git_version \\\\\"\n+  echo \" && make prefix=/usr/local all \\\\\"\n+  echo \" && make prefix=/usr/local install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf git.tar.gz git-$git_version\"\n+if [ $arch = ppc64le ] ; then\n+  # make 4.2 requires automake 1.15\n+  echo \"\"\n+  local automake_version=1.15\n+  echo \"# Update automake.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O automake.tar.gz http://ftp.gnu.org/gnu/automake/automake-$automake_version.tar.gz \\\\\"\n+  echo \" && tar -xzf automake.tar.gz \\\\\"\n+  echo \" && cd automake-$automake_version \\\\\"\n+  echo \" && ./configure \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf automake.tar.gz automake-$automake_version\"\n+  echo \"\"\n+  local make_version=4.2\n+  echo \"# Update make.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O make.tar.gz https://github.com/mirror/make/archive/$make_version.tar.gz \\\\\"\n+  echo \" && tar -xzf make.tar.gz \\\\\"\n+  echo \" && cd make-$make_version \\\\\"\n+  echo \" && ACLOCAL_PATH=/usr/share/aclocal autoreconf -i \\\\\"\n+  echo \" && ./configure \\\\\"\n+  echo \" && make update \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && ln -s make /usr/local/bin/gmake \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf make.tar.gz make-$make_version\"\n+fi\n+if [ $arch = x86_64 ] ; then\n+  echo \"\"\n+  local nasm_version=2.13.03\n+  echo \"# Install nasm.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O nasm.tar.gz https://www.nasm.us/pub/nasm/releasebuilds/$nasm_version/nasm-$nasm_version.tar.gz \\\\\"\n+  echo \" && tar -xzf nasm.tar.gz \\\\\"\n+  echo \" && cd nasm-$nasm_version \\\\\"\n+  echo \" && ./configure -prefix=/usr/local \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf nasm.tar.gz nasm-$nasm_version\"\n+fi\n+}\n+\n+install_ubuntu_packages() {\n+  echo \"RUN apt-get update \\\\\"\n+  echo \" && apt-get install -qq -y --no-install-recommends \\\\\"\n+  echo \"    software-properties-common \\\\\"\n+if [ $version = 16.04 ] ; then\n+  echo \"    python-software-properties \\\\\"\n+fi\n+  echo \" && add-apt-repository ppa:ubuntu-toolchain-r/test \\\\\"\n+  echo \" && apt-get update \\\\\"\n+  echo \" && apt-get install -qq -y --no-install-recommends \\\\\"\n+  echo \"    ant \\\\\"\n+  echo \"    ant-contrib \\\\\"\n+  echo \"    autoconf \\\\\"\n+  echo \"    build-essential \\\\\"\n+  echo \"    ca-certificates \\\\\"\n+  echo \"    cmake \\\\\"\n+  echo \"    cpio \\\\\"\n+  echo \"    curl \\\\\"\n+  echo \"    file \\\\\"\n+if [ $arch != s390x ] ; then\n+  echo \"    g++-7 \\\\\"\n+  echo \"    gcc-7 \\\\\"\n+fi\n+  echo \"    gdb \\\\\"\n+  echo \"    git \\\\\"\n+  echo \"    libasound2-dev \\\\\"\n+  echo \"    libcups2-dev \\\\\"\n+  echo \"    libdwarf-dev \\\\\"\n+  echo \"    libelf-dev \\\\\"\n+  echo \"    libexpat1-dev \\\\\" # required by the xml parser\n+  echo \"    libffi-dev \\\\\"\n+  echo \"    libfontconfig \\\\\"\n+  echo \"    libfontconfig1-dev \\\\\"\n+  echo \"    libfreetype6-dev \\\\\"\n+if [ $arch != s390x ] ; then\n+  echo \"    libnuma-dev \\\\\"\n+fi\n+if [ $arch = s390x ] ; then\n+  echo \"    libmpc3 \\\\\"\n+fi\n+  echo \"    libssl-dev \\\\\"\n+  echo \"    libx11-dev \\\\\"\n+  echo \"    libxext-dev \\\\\"\n+  echo \"    libxrandr-dev \\\\\"\n+  echo \"    libxrender-dev \\\\\"\n+  echo \"    libxt-dev \\\\\"\n+  echo \"    libxtst-dev \\\\\"\n+  echo \"    make \\\\\"\n+if [ $arch = x86_64 ] ; then\n+  echo \"    nasm \\\\\"\n+fi\n+  echo \"    openssh-client \\\\\"\n+  echo \"    openssh-server \\\\\"\n+  echo \"    perl \\\\\"\n+  echo \"    pkg-config \\\\\"\n+if [ $version = 16.04 ] ; then\n+  echo \"    realpath \\\\\"\n+fi\n+  echo \"    ssh \\\\\"\n+  echo \"    unzip \\\\\"\n+  echo \"    wget \\\\\"\n+  echo \"    xvfb \\\\\"\n+  echo \"    zip \\\\\"\n+  echo \"    zlib1g-dev \\\\\"\n+  echo \" && rm -rf /var/lib/apt/lists/*\"\n+}\n+\n+install_packages() {\n+  echo \"\"\n+  echo \"# Install required OS tools.\"\n+  echo \"\"\n+if [ $dist = centos ] ; then\n+  install_centos_packages\n+else\n+  install_ubuntu_packages\n+fi\n+}\n+\n+install_compilers() {\n+if [ $arch = s390x ] ; then\n+  echo \"\"\n+  local gcc_version=7.5\n+  echo \"# Install gcc.\"\n+  echo \"RUN cd /usr/local \\\\\"\n+  echo \" && $wget_O gcc.tar.xz 'https://ci.adoptopenjdk.net/userContent/gcc/gcc750+ccache.$arch.tar.xz' \\\\\"\n+  echo \" && tar -xJf gcc.tar.xz --strip-components=1 \\\\\"\n+  echo \" && rm -f gcc.tar.xz\"\n+  echo \"\"\n+  echo \"# Create various symbolic links.\"\n+  echo \"RUN ln -s lib/$arch-linux-gnu /usr/lib64 \\\\\"\n+if [ $dist:$version = ubuntu:18.04 ] ; then\n+  # On s390x perl needs version 4 of mpfr, but we only have version 6.\n+  echo \" && ln -s libmpfr.so.6 /usr/lib64/libmpfr.so.4 \\\\\"\n+fi\n+  # /usr/local/include/c++ is a directory that already exists so we create these symbolic links in two steps.\n+  echo \" && ( cd /usr/local/include && for f in \\$(ls /usr/include/s390x-linux-gnu/c++) ; do test -e \\$f || ln -s /usr/include/s390x-linux-gnu/c++/\\$f . ; done ) \\\\\"\n+  echo \" && ln -s \\$(ls -d /usr/include/s390x-linux-gnu/* | grep -v '/c++\\$') /usr/local/include \\\\\"\n+  echo \" && ln -sf ../local/bin/g++-$gcc_version /usr/bin/g++-7 \\\\\"\n+  echo \" && ln -sf ../local/bin/gcc-$gcc_version /usr/bin/gcc-7\"\n+fi\n+if [ $dist != centos ] ; then\n+  echo \"\"\n+  echo \"ENV CC=gcc-7 CXX=g++-7\"\n+fi\n+}\n+\n+install_cmake() {\n+if [ $dist == centos ] ; then\n+  echo \"\"\n+  local cmake_version=3.11\n+  local cmake_name=cmake-$cmake_version.4\n+  echo \"# Install cmake.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O cmake.tar.gz https://cmake.org/files/v$cmake_version/$cmake_name.tar.gz \\\\\"\n+  echo \" && tar -xzf cmake.tar.gz \\\\\"\n+  echo \" && cd $cmake_name \\\\\"\n+  echo \" && export LDFLAGS='-static-libstdc++' \\\\\"\n+  echo \" && ./configure \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf cmake.tar.gz $cmake_name\"\n+fi\n+}\n+\n+prepare_user() {\n+  # Ensure authorized_keys exists.\n+  test -f authorized_keys || touch authorized_keys\n+  # Ensure github.com is a known host.\n+  ( test -f known_hosts && grep -q '^github.com ' known_hosts ) \\\n+    || ssh-keyscan github.com >> known_hosts\n+}\n+\n+create_user() {\n+  echo \"\"\n+  echo \"# Add user home and copy authorized_keys and known_hosts.\"\n+  echo \"RUN useradd -ms /bin/bash $user \\\\\"\n+  echo \" && mkdir /home/$user/.ssh \\\\\"\n+  echo \" && chmod 700 /home/$user/.ssh\"\n+  echo \"COPY authorized_keys known_hosts /home/$user/.ssh/\"\n+  echo \"RUN chown -R $user:$user /home/$user \\\\\"\n+  echo \" && chmod 600 /home/$user/.ssh/authorized_keys /home/$user/.ssh/known_hosts\"\n+}\n+\n+install_freemarker() {\n+  echo \"\"\n+  local freemarker_version=2.3.8\n+  echo \"# Download and extract freemarker.jar to /root/freemarker.jar.\"\n+  echo \"RUN mkdir -p /root \\\\\"\n+  echo \" && cd /root \\\\\"\n+  echo \" && $wget_O freemarker.tar.gz https://sourceforge.net/projects/freemarker/files/freemarker/$freemarker_version/freemarker-$freemarker_version.tar.gz/download \\\\\"\n+  echo \" && tar -xzf freemarker.tar.gz freemarker-$freemarker_version/lib/freemarker.jar --strip=2 \\\\\"\n+  echo \" && rm -f freemarker.tar.gz\"\n+}\n+\n+bootjdk_dirs() {\n+  for version in $@ ; do\n+    if [ $version = 8 ] ; then\n+      echo /usr/lib/jvm/adoptojdk-java-80\n+    else\n+      echo /usr/lib/jvm/adoptojdk-java-$version\n+    fi\n+  done\n+}\n+\n+bootjdk_url() {\n+  local version=$1\n+  if [ $arch = x86_64 ] ; then\n+    echo https://api.adoptopenjdk.net/v3/binary/latest/$version/ga/linux/x64/jdk/openj9/normal/adoptopenjdk\n+  else\n+    echo https://api.adoptopenjdk.net/v3/binary/latest/$version/ga/linux/$arch/jdk/openj9/normal/adoptopenjdk\n+  fi\n+}\n+\n+install_bootjdks() {\n+  local versions=\"8 11 13 14\"\n+  echo \"\"\n+  echo \"# Download and install boot JDKs from AdoptOpenJDK.\"\n+  echo \"RUN cd /tmp \\\\\"\n+for version in $versions ; do\n+  echo \" && $wget_O jdk$version.tar.gz $(bootjdk_url $version) \\\\\"\n+done\n+  echo \" && mkdir -p\" $(bootjdk_dirs $versions) \"\\\\\"\n+for version in $versions ; do\n+  echo \" && tar -xzf jdk$version.tar.gz --directory=$(bootjdk_dirs $version)/ --strip=1 \\\\\"\n+done\n+  echo \" && rm -f jdk*.tar.gz\"\n+}\n+\n+install_cuda() {\n+  echo \"\"\n+  echo \"# Copy header files necessary to build a VM with CUDA support.\"\n+  echo \"RUN mkdir -p /usr/local/cuda-${cuda}/nvvm\"\n+  echo \"COPY --from=cuda-dev /usr/local/cuda-${cuda}/include      /usr/local/cuda-${cuda}/include\"\n+  echo \"COPY --from=cuda-dev /usr/local/cuda-${cuda}/nvvm/include /usr/local/cuda-${cuda}/nvvm/include\"\n+  echo \"ENV CUDA_HOME=/usr/local/cuda-${cuda}\"\n+}\n+\n+install_python() {\n+  local python_version=3.7.3\n+  echo \"\"\n+  echo \"# Install python.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O python.tar.xz https://www.python.org/ftp/python/$python_version/Python-$python_version.tar.xz \\\\\"\n+  echo \" && tar -xJf python.tar.xz \\\\\"\n+  echo \" && cd Python-$python_version \\\\\"\n+  echo \" && ./configure --prefix=/usr/local \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf python.tar.xz Python-$python_version\"\n+}\n+\n+adjust_ldconfig() {\n+  echo \"\"\n+  echo \"# Run ldconfig to discover newly installed shared libraries.\"\n+  echo \"RUN for dir in lib lib64 ; do echo /usr/local/$dir ; done > /etc/ld.so.conf.d/usr-local.conf \\\\\"\n+  echo \" && ldconfig\"\n+}\n+\n+# called as: add_git_remote remote url\n+add_git_remote() {\n+  echo \" && git remote add ${1} ${2} \\\\\"\n+  # Like-named (and conflicting) tags exist in multiple repositories: don't fetch any tags.\n+  echo \" && git config remote.${1}.tagopt --no-tags \\\\\"\n+}\n+\n+create_git_cache() {\n+  # The jdk14 remote is fetched first because that repository was subjected to\n+  # 'git gc --aggressive --prune=all' before it was first published making it much\n+  # smaller than the other jdk repositories. There is a large degree of overlap\n+  # among the jdk repositories so a relatively small number of commits must be\n+  # fetched from the others.\n+  echo \"\"\n+  echo \"# Setup a reference repository cache for faster clones in containers.\"\n+  echo \"RUN mkdir /home/$user/git_cache \\\\\"\n+  echo \" && cd /home/$user/git_cache \\\\\"\n+  echo \" && git init --bare \\\\\"\n+  add_git_remote jdk8    https://github.com/ibmruntimes/openj9-openjdk-jdk8.git\n+  add_git_remote jdk11   https://github.com/ibmruntimes/openj9-openjdk-jdk11.git\n+  add_git_remote jdk14   https://github.com/ibmruntimes/openj9-openjdk-jdk14.git\n+  add_git_remote jdknext https://github.com/ibmruntimes/openj9-openjdk-jdk.git\n+  add_git_remote omr     https://github.com/eclipse/openj9-omr.git\n+  add_git_remote openj9  https://github.com/eclipse/openj9.git\n+  echo \" && echo Fetching repository cache... \\\\\"\n+  echo \" && git fetch jdk14 \\\\\"\n+  echo \" && git fetch --all \\\\\"\n+  echo \" && echo Shrinking repository cache... \\\\\"\n+  echo \" && git gc --aggressive --prune=all\"\n+}\n+\n+configure_ssh() {\n+  echo \"\"\n+  echo \"# Configure sshd.\"\n+  echo \"RUN mkdir /var/run/sshd \\\\\"\n+  echo \" && sed -i -e 's|#PermitRootLogin|PermitRootLogin|' \\\\\"\n+  echo \"           -e 's|#RSAAuthentication.*|RSAAuthentication yes|' \\\\\"\n+  echo \"           -e 's|#PubkeyAuthentication.*|PubkeyAuthentication yes|' /etc/ssh/sshd_config\"\n+  echo \"\"\n+  echo \"# SSH login fix so user is not kicked off after login.\"\n+  echo \"RUN sed -i -e 's|session\\s*required\\s*pam_loginuid.so|session optional pam_loginuid.so|' /etc/pam.d/sshd\"\n+  echo \"\"\n+  echo \"# Expose SSH port.\"\n+  echo \"EXPOSE 22\"\n+}\n+\n+print_dockerfile() {\n+  print_license\n+  preamble\n+  install_packages\n+  create_user\n+if [ $cuda != no ] ; then\n+  install_cuda\n+fi\n+  install_freemarker\n+\n+  install_compilers\n+\n+  install_cmake\n+  install_python\n+\n+  adjust_ldconfig\n+  configure_ssh\n+\n+  install_bootjdks", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAyMzQzMA=="}, "originalCommit": {"oid": "547dbb1b691a8ad1b4a2af1def6ae75493f8bd15"}, "originalPosition": 656}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjEyMjM4MA==", "bodyText": "Created #9375 to deal with this problem.", "url": "https://github.com/eclipse-openj9/openj9/pull/9371#discussion_r416122380", "createdAt": "2020-04-27T20:23:23Z", "author": {"login": "pshipton"}, "path": "buildenv/docker/mkdocker.sh", "diffHunk": "@@ -0,0 +1,672 @@\n+#!/bin/bash -\n+\n+print_license() {\n+cat <<- EOF\n+# Copyright (c) 2019, 2020 IBM Corp. and others\n+#\n+# This program and the accompanying materials are made available under\n+# the terms of the Eclipse Public License 2.0 which accompanies this\n+# distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+# or the Apache License, Version 2.0 which accompanies this distribution and\n+# is available at https://www.apache.org/licenses/LICENSE-2.0.\n+#\n+# This Source Code may also be made available under the following\n+# Secondary Licenses when the conditions for such availability set\n+# forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+# General Public License, version 2 with the GNU Classpath\n+# Exception [1] and GNU General Public License, version 2 with the\n+# OpenJDK Assembly Exception [2].\n+#\n+# [1] https://www.gnu.org/software/classpath/license.html\n+# [2] http://openjdk.java.net/legal/assembly-exception.html\n+#\n+# SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+EOF\n+}\n+\n+usage() {\n+  echo \"Usage: $0 [OPTION]...\"\n+  echo \"Generate a Dockerfile for building OpenJ9\"\n+  echo \"\"\n+  echo \"Options:\"\n+  echo \"  --help|-h      print this help, then exit\"\n+  echo \"  --arch=...     specify the processor architecture (default: host architecture)\"\n+  echo \"  --build        build the docker image (overrides '--print')\"\n+  echo \"  --cuda         include CUDA header files\"\n+  echo \"  --dist=...     specify the Linux distribution (e.g. centos, ubuntu)\"\n+  echo \"  --print        write the Dockerfile to stdout (default; overrides '--build')\"\n+  echo \"  --tag=...      specify a name for the docker image (may be repeated, default: none)\"\n+  echo \"  --user=...     specify the user name (default: 'jenkins')\"\n+  echo \"  --version=...  specify the distribution version (e.g. 6.9, 16.04)\"\n+  echo \"\"\n+  local arch=\"$(uname -m)\"\n+  echo \"Supported build patterns on this host ($arch):\"\n+if [ $arch = x86_64 ] ; then\n+  echo \"  bash mkdocker.sh --tag=openj9/cent69 --dist=centos --version=6.9 --build\"\n+fi\n+if [ $arch = x86_64 -o $arch = ppc64le ] ; then\n+  echo \"  bash mkdocker.sh --tag=openj9/cent7  --dist=centos --version=7   --build\"\n+fi\n+  echo \"  bash mkdocker.sh --tag=openj9/ub16   --dist=ubuntu --version=16  --build\"\n+  echo \"  bash mkdocker.sh --tag=openj9/ub18   --dist=ubuntu --version=18  --build\"\n+  echo \"  bash mkdocker.sh --tag=openj9/ub20   --dist=ubuntu --version=20  --build\"\n+  exit 1\n+}\n+\n+# Global configuration variables.\n+action=print\n+arch=\n+cuda=no\n+dist=unspecified\n+tags=()\n+user=jenkins\n+version=unspecified\n+\n+# Frequently used commands.\n+wget_O=\"wget --progress=dot:mega -O\"\n+\n+parse_options() {\n+  for arg in \"$@\" ; do\n+    case \"$arg\" in\n+      -h | --help)\n+        usage\n+        ;;\n+      --arch=*)\n+        arch=\"${arg#*=}\"\n+        ;;\n+      --build)\n+        action=build\n+        ;;\n+      --cuda)\n+        cuda=9.0\n+        ;;\n+      --dist=*)\n+        dist=\"${arg#*=}\"\n+        ;;\n+      --print)\n+        action=print\n+        ;;\n+      --tag=*)\n+        tags+=(\"${arg#*=}\")\n+        ;;\n+      --user=*)\n+        user=\"${arg#*=}\"\n+        ;;\n+      --version=*)\n+        version=\"${arg#*=}\"\n+        ;;\n+      *) # bad option\n+        echo \"Unsupported option: '$arg'\" >&2\n+        usage\n+        ;;\n+    esac\n+  done\n+}\n+\n+validate_options() {\n+  if [ \"x$arch\" = x ] ; then\n+    arch=\"$(uname -m)\"\n+  fi\n+\n+  case \"$arch\" in\n+    ppc64le | s390x | x86_64)\n+      ;;\n+    *)\n+      echo \"Unsupported architecture: '$arch'\" >&2\n+      exit 1\n+      ;;\n+  esac\n+\n+  # Validate the distribution and version.\n+  case \"$dist\" in\n+    centos)\n+      if [ $arch = s390x ] ; then\n+        echo \"CentOS is not supported on $arch\" >&2\n+        exit 1\n+      fi\n+      case $version in\n+        6.9)\n+          if [ $arch = ppc64le ] ; then\n+            echo \"CentOS version 6.9 is not supported on $arch\" >&2\n+            exit 1\n+          fi\n+          ;;\n+        7)\n+          ;;\n+        unspecified)\n+          echo \"Unspecified CentOS version: use '--version' option\" >&2\n+          exit 1\n+          ;;\n+        *)\n+          echo \"Unsupported CentOS version: '$version'\" >&2\n+          exit 1\n+          ;;\n+      esac\n+      ;;\n+    ubuntu)\n+      case $version in\n+        16 | 18 | 20)\n+          version=$version.04\n+          ;;\n+        16.04 | 18.04 | 20.04)\n+          ;;\n+        unspecified)\n+          echo \"Unspecified Ubuntu version: use '--version' option\" >&2\n+          exit 1\n+          ;;\n+        *)\n+          echo \"Unsupported Ubuntu version: '$version'\" >&2\n+          exit 1\n+          ;;\n+      esac\n+      ;;\n+    unspecified)\n+      echo \"Unspecified distribution: use '--dist' option\" >&2\n+      exit 1\n+      ;;\n+    *)\n+      echo \"Unsupported distribution: '$dist'\" >&2\n+      exit 1\n+      ;;\n+  esac\n+\n+  # If CUDA is requested, validate the architecture.\n+  if [ $cuda != no ] ; then\n+    case \"$arch\" in\n+      ppc64le | x86_64)\n+        ;;\n+      *)\n+        echo \"CUDA is not supported on architecture: '$arch'\" >&2\n+        exit 1\n+        ;;\n+    esac\n+  fi\n+}\n+\n+build_cmd() {\n+  local cmd=build\n+  local file=$1\n+  for tag in ${tags[@]} ; do\n+    cmd=\"$cmd --tag $tag\"\n+  done\n+  echo $cmd --file $file .\n+}\n+\n+preamble() {\n+  echo \"\"\n+  echo \"# Generated by: mkdocker.sh $command_line\"\n+  echo \"\"\n+  echo \"# To use this docker file:\"\n+  echo \"# First, copy your public ssh key into authorized_keys.\"\n+  echo \"# Then, in the directory containing the Dockerfile, authorized_keys\"\n+  echo \"# file, and known_hosts file, run:\"\n+  echo \"#   docker $(build_cmd Dockerfile)\"\n+  echo \"#\"\n+if [ ${#tags[@]} -lt 2 ] ; then\n+  echo \"# To start a container based on the resulting image, run this command:\"\n+else\n+  echo \"# To start a container based on the resulting image, run one of these commands:\"\n+fi\n+if [ ${#tags[@]} -eq 0 ] ; then\n+  echo \"#   docker run -it <image>\"\n+else\n+for tag in ${tags[@]} ; do\n+  echo \"#   docker run -it $tag\"\n+done\n+fi\n+  echo \"\"\n+if [ $cuda != no ] ; then\n+  echo \"FROM nvidia/cuda:${cuda}-devel-ubuntu16.04 AS cuda-dev\"\n+  echo \"\"\n+fi\n+  echo \"FROM $dist:$version\"\n+}\n+\n+install_centos_packages() {\n+  echo \"RUN yum -y update \\\\\"\n+if [ $version = 6.9 ] ; then\n+  echo \" && yum -y install https://\\$(rpm -E '%{?centos:centos}%{!?centos:rhel}%{rhel}').iuscommunity.org/ius-release.rpm \\\\\"\n+fi\n+  echo \" && yum -y install \\\\\"\n+  echo \"    alsa-lib-devel \\\\\"\n+if [ $arch = ppc64le ] ; then\n+  echo \"    automake \\\\\" # required to update make\n+fi\n+  echo \"    bind-utils \\\\\"\n+  echo \"    bison \\\\\"\n+  echo \"    bzip2 \\\\\"\n+  echo \"    ca-certificates \\\\\"\n+  echo \"    cpio \\\\\"\n+  echo \"    cups-devel \\\\\"\n+  echo \"    curl-devel \\\\\" # required by git\n+  echo \"    elfutils-libelf-devel \\\\\"\n+  echo \"    expat-devel \\\\\" # required by git and the xml parser\n+  echo \"    file-devel \\\\\"\n+  echo \"    file-libs \\\\\"\n+  echo \"    flex \\\\\"\n+  echo \"    fontconfig \\\\\"\n+  echo \"    fontconfig-devel \\\\\"\n+  echo \"    freetype-devel \\\\\"\n+  echo \"    gettext \\\\\"\n+  echo \"    gettext-devel \\\\\" # required by git\n+  echo \"    glibc \\\\\"\n+  echo \"    glibc-common \\\\\"\n+  echo \"    glibc-devel \\\\\"\n+  echo \"    gmp-devel \\\\\"\n+  echo \"    lbzip2 \\\\\"\n+  echo \"    libdwarf \\\\\"\n+  echo \"    libdwarf-devel \\\\\"\n+  echo \"    libffi-devel \\\\\"\n+  echo \"    libstdc++-static \\\\\"\n+  echo \"    libX11-devel \\\\\"\n+  echo \"    libXext-devel \\\\\"\n+  echo \"    libXi-devel \\\\\"\n+  echo \"    libXrandr-devel \\\\\"\n+  echo \"    libXrender-devel \\\\\"\n+  echo \"    libXt-devel \\\\\"\n+  echo \"    libXtst-devel \\\\\"\n+  echo \"    make \\\\\"\n+  echo \"    mesa-libGL-devel \\\\\"\n+  echo \"    mpfr-devel \\\\\"\n+  echo \"    ntp \\\\\"\n+  echo \"    numactl-devel \\\\\"\n+  echo \"    openssh-clients \\\\\"\n+  echo \"    openssh-server \\\\\"\n+  echo \"    openssl-devel \\\\\" # required by git, etc.\n+  echo \"    perl-CPAN \\\\\"\n+  echo \"    perl-DBI \\\\\"\n+  echo \"    perl-devel \\\\\"\n+  echo \"    perl-ExtUtils-MakeMaker \\\\\" # required by git\n+  echo \"    perl-GD \\\\\"\n+  echo \"    perl-libwww-perl \\\\\"\n+  echo \"    perl-Time-HiRes \\\\\"\n+if [ $arch = ppc64le ] ; then\n+  echo \"    texinfo \\\\\" # required to update make\n+fi\n+  echo \"    unzip \\\\\"\n+  echo \"    vim \\\\\"\n+  echo \"    wget \\\\\"\n+  echo \"    xorg-x11-server-Xvfb \\\\\"\n+  echo \"    xz \\\\\"\n+  echo \"    zip \\\\\"\n+  echo \"    zlib-devel \\\\\" # required by git, python\n+  echo \" && yum clean all\"\n+  echo \"\"\n+  local autoconf_version=2.69\n+  echo \"# Install autoconf.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O autoconf.tar.gz https://fossies.org/linux/misc/autoconf-$autoconf_version.tar.gz \\\\\"\n+  echo \" && tar -xzf autoconf.tar.gz \\\\\"\n+  echo \" && cd autoconf-$autoconf_version \\\\\"\n+  echo \" && ./configure --build=\\$(rpm --eval %{_host}) \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf autoconf.tar.gz autoconf-$autoconf_version\"\n+  echo \"\"\n+  echo \"# Install gcc-7.5.\"\n+  echo \"RUN cd /usr/local \\\\\"\n+  echo \" && $wget_O gcc-7.tar.xz 'https://ci.adoptopenjdk.net/userContent/gcc/gcc750+ccache.$arch.tar.xz' \\\\\"\n+  echo \" && tar -xJf gcc-7.tar.xz --strip-components=1 \\\\\"\n+  echo \" && ln -sf ../local/bin/gcc-7.5 /usr/bin/gcc \\\\\"\n+  echo \" && ln -sf ../local/bin/g++-7.5 /usr/bin/g++ \\\\\"\n+  echo \" && ln -sf gcc /usr/bin/cc \\\\\"\n+  echo \" && ln -sf g++ /usr/bin/c++ \\\\\"\n+  echo \" && rm -f gcc-7.tar.xz\"\n+  echo \"\"\n+  local git_version=2.5.3\n+  echo \"# Install git.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O git.tar.gz https://www.kernel.org/pub/software/scm/git/git-$git_version.tar.gz \\\\\"\n+  echo \" && tar -xzf git.tar.gz \\\\\"\n+  echo \" && cd git-$git_version \\\\\"\n+  echo \" && make prefix=/usr/local all \\\\\"\n+  echo \" && make prefix=/usr/local install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf git.tar.gz git-$git_version\"\n+if [ $arch = ppc64le ] ; then\n+  # make 4.2 requires automake 1.15\n+  echo \"\"\n+  local automake_version=1.15\n+  echo \"# Update automake.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O automake.tar.gz http://ftp.gnu.org/gnu/automake/automake-$automake_version.tar.gz \\\\\"\n+  echo \" && tar -xzf automake.tar.gz \\\\\"\n+  echo \" && cd automake-$automake_version \\\\\"\n+  echo \" && ./configure \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf automake.tar.gz automake-$automake_version\"\n+  echo \"\"\n+  local make_version=4.2\n+  echo \"# Update make.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O make.tar.gz https://github.com/mirror/make/archive/$make_version.tar.gz \\\\\"\n+  echo \" && tar -xzf make.tar.gz \\\\\"\n+  echo \" && cd make-$make_version \\\\\"\n+  echo \" && ACLOCAL_PATH=/usr/share/aclocal autoreconf -i \\\\\"\n+  echo \" && ./configure \\\\\"\n+  echo \" && make update \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && ln -s make /usr/local/bin/gmake \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf make.tar.gz make-$make_version\"\n+fi\n+if [ $arch = x86_64 ] ; then\n+  echo \"\"\n+  local nasm_version=2.13.03\n+  echo \"# Install nasm.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O nasm.tar.gz https://www.nasm.us/pub/nasm/releasebuilds/$nasm_version/nasm-$nasm_version.tar.gz \\\\\"\n+  echo \" && tar -xzf nasm.tar.gz \\\\\"\n+  echo \" && cd nasm-$nasm_version \\\\\"\n+  echo \" && ./configure -prefix=/usr/local \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf nasm.tar.gz nasm-$nasm_version\"\n+fi\n+}\n+\n+install_ubuntu_packages() {\n+  echo \"RUN apt-get update \\\\\"\n+  echo \" && apt-get install -qq -y --no-install-recommends \\\\\"\n+  echo \"    software-properties-common \\\\\"\n+if [ $version = 16.04 ] ; then\n+  echo \"    python-software-properties \\\\\"\n+fi\n+  echo \" && add-apt-repository ppa:ubuntu-toolchain-r/test \\\\\"\n+  echo \" && apt-get update \\\\\"\n+  echo \" && apt-get install -qq -y --no-install-recommends \\\\\"\n+  echo \"    ant \\\\\"\n+  echo \"    ant-contrib \\\\\"\n+  echo \"    autoconf \\\\\"\n+  echo \"    build-essential \\\\\"\n+  echo \"    ca-certificates \\\\\"\n+  echo \"    cmake \\\\\"\n+  echo \"    cpio \\\\\"\n+  echo \"    curl \\\\\"\n+  echo \"    file \\\\\"\n+if [ $arch != s390x ] ; then\n+  echo \"    g++-7 \\\\\"\n+  echo \"    gcc-7 \\\\\"\n+fi\n+  echo \"    gdb \\\\\"\n+  echo \"    git \\\\\"\n+  echo \"    libasound2-dev \\\\\"\n+  echo \"    libcups2-dev \\\\\"\n+  echo \"    libdwarf-dev \\\\\"\n+  echo \"    libelf-dev \\\\\"\n+  echo \"    libexpat1-dev \\\\\" # required by the xml parser\n+  echo \"    libffi-dev \\\\\"\n+  echo \"    libfontconfig \\\\\"\n+  echo \"    libfontconfig1-dev \\\\\"\n+  echo \"    libfreetype6-dev \\\\\"\n+if [ $arch != s390x ] ; then\n+  echo \"    libnuma-dev \\\\\"\n+fi\n+if [ $arch = s390x ] ; then\n+  echo \"    libmpc3 \\\\\"\n+fi\n+  echo \"    libssl-dev \\\\\"\n+  echo \"    libx11-dev \\\\\"\n+  echo \"    libxext-dev \\\\\"\n+  echo \"    libxrandr-dev \\\\\"\n+  echo \"    libxrender-dev \\\\\"\n+  echo \"    libxt-dev \\\\\"\n+  echo \"    libxtst-dev \\\\\"\n+  echo \"    make \\\\\"\n+if [ $arch = x86_64 ] ; then\n+  echo \"    nasm \\\\\"\n+fi\n+  echo \"    openssh-client \\\\\"\n+  echo \"    openssh-server \\\\\"\n+  echo \"    perl \\\\\"\n+  echo \"    pkg-config \\\\\"\n+if [ $version = 16.04 ] ; then\n+  echo \"    realpath \\\\\"\n+fi\n+  echo \"    ssh \\\\\"\n+  echo \"    unzip \\\\\"\n+  echo \"    wget \\\\\"\n+  echo \"    xvfb \\\\\"\n+  echo \"    zip \\\\\"\n+  echo \"    zlib1g-dev \\\\\"\n+  echo \" && rm -rf /var/lib/apt/lists/*\"\n+}\n+\n+install_packages() {\n+  echo \"\"\n+  echo \"# Install required OS tools.\"\n+  echo \"\"\n+if [ $dist = centos ] ; then\n+  install_centos_packages\n+else\n+  install_ubuntu_packages\n+fi\n+}\n+\n+install_compilers() {\n+if [ $arch = s390x ] ; then\n+  echo \"\"\n+  local gcc_version=7.5\n+  echo \"# Install gcc.\"\n+  echo \"RUN cd /usr/local \\\\\"\n+  echo \" && $wget_O gcc.tar.xz 'https://ci.adoptopenjdk.net/userContent/gcc/gcc750+ccache.$arch.tar.xz' \\\\\"\n+  echo \" && tar -xJf gcc.tar.xz --strip-components=1 \\\\\"\n+  echo \" && rm -f gcc.tar.xz\"\n+  echo \"\"\n+  echo \"# Create various symbolic links.\"\n+  echo \"RUN ln -s lib/$arch-linux-gnu /usr/lib64 \\\\\"\n+if [ $dist:$version = ubuntu:18.04 ] ; then\n+  # On s390x perl needs version 4 of mpfr, but we only have version 6.\n+  echo \" && ln -s libmpfr.so.6 /usr/lib64/libmpfr.so.4 \\\\\"\n+fi\n+  # /usr/local/include/c++ is a directory that already exists so we create these symbolic links in two steps.\n+  echo \" && ( cd /usr/local/include && for f in \\$(ls /usr/include/s390x-linux-gnu/c++) ; do test -e \\$f || ln -s /usr/include/s390x-linux-gnu/c++/\\$f . ; done ) \\\\\"\n+  echo \" && ln -s \\$(ls -d /usr/include/s390x-linux-gnu/* | grep -v '/c++\\$') /usr/local/include \\\\\"\n+  echo \" && ln -sf ../local/bin/g++-$gcc_version /usr/bin/g++-7 \\\\\"\n+  echo \" && ln -sf ../local/bin/gcc-$gcc_version /usr/bin/gcc-7\"\n+fi\n+if [ $dist != centos ] ; then\n+  echo \"\"\n+  echo \"ENV CC=gcc-7 CXX=g++-7\"\n+fi\n+}\n+\n+install_cmake() {\n+if [ $dist == centos ] ; then\n+  echo \"\"\n+  local cmake_version=3.11\n+  local cmake_name=cmake-$cmake_version.4\n+  echo \"# Install cmake.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O cmake.tar.gz https://cmake.org/files/v$cmake_version/$cmake_name.tar.gz \\\\\"\n+  echo \" && tar -xzf cmake.tar.gz \\\\\"\n+  echo \" && cd $cmake_name \\\\\"\n+  echo \" && export LDFLAGS='-static-libstdc++' \\\\\"\n+  echo \" && ./configure \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf cmake.tar.gz $cmake_name\"\n+fi\n+}\n+\n+prepare_user() {\n+  # Ensure authorized_keys exists.\n+  test -f authorized_keys || touch authorized_keys\n+  # Ensure github.com is a known host.\n+  ( test -f known_hosts && grep -q '^github.com ' known_hosts ) \\\n+    || ssh-keyscan github.com >> known_hosts\n+}\n+\n+create_user() {\n+  echo \"\"\n+  echo \"# Add user home and copy authorized_keys and known_hosts.\"\n+  echo \"RUN useradd -ms /bin/bash $user \\\\\"\n+  echo \" && mkdir /home/$user/.ssh \\\\\"\n+  echo \" && chmod 700 /home/$user/.ssh\"\n+  echo \"COPY authorized_keys known_hosts /home/$user/.ssh/\"\n+  echo \"RUN chown -R $user:$user /home/$user \\\\\"\n+  echo \" && chmod 600 /home/$user/.ssh/authorized_keys /home/$user/.ssh/known_hosts\"\n+}\n+\n+install_freemarker() {\n+  echo \"\"\n+  local freemarker_version=2.3.8\n+  echo \"# Download and extract freemarker.jar to /root/freemarker.jar.\"\n+  echo \"RUN mkdir -p /root \\\\\"\n+  echo \" && cd /root \\\\\"\n+  echo \" && $wget_O freemarker.tar.gz https://sourceforge.net/projects/freemarker/files/freemarker/$freemarker_version/freemarker-$freemarker_version.tar.gz/download \\\\\"\n+  echo \" && tar -xzf freemarker.tar.gz freemarker-$freemarker_version/lib/freemarker.jar --strip=2 \\\\\"\n+  echo \" && rm -f freemarker.tar.gz\"\n+}\n+\n+bootjdk_dirs() {\n+  for version in $@ ; do\n+    if [ $version = 8 ] ; then\n+      echo /usr/lib/jvm/adoptojdk-java-80\n+    else\n+      echo /usr/lib/jvm/adoptojdk-java-$version\n+    fi\n+  done\n+}\n+\n+bootjdk_url() {\n+  local version=$1\n+  if [ $arch = x86_64 ] ; then\n+    echo https://api.adoptopenjdk.net/v3/binary/latest/$version/ga/linux/x64/jdk/openj9/normal/adoptopenjdk\n+  else\n+    echo https://api.adoptopenjdk.net/v3/binary/latest/$version/ga/linux/$arch/jdk/openj9/normal/adoptopenjdk\n+  fi\n+}\n+\n+install_bootjdks() {\n+  local versions=\"8 11 13 14\"\n+  echo \"\"\n+  echo \"# Download and install boot JDKs from AdoptOpenJDK.\"\n+  echo \"RUN cd /tmp \\\\\"\n+for version in $versions ; do\n+  echo \" && $wget_O jdk$version.tar.gz $(bootjdk_url $version) \\\\\"\n+done\n+  echo \" && mkdir -p\" $(bootjdk_dirs $versions) \"\\\\\"\n+for version in $versions ; do\n+  echo \" && tar -xzf jdk$version.tar.gz --directory=$(bootjdk_dirs $version)/ --strip=1 \\\\\"\n+done\n+  echo \" && rm -f jdk*.tar.gz\"\n+}\n+\n+install_cuda() {\n+  echo \"\"\n+  echo \"# Copy header files necessary to build a VM with CUDA support.\"\n+  echo \"RUN mkdir -p /usr/local/cuda-${cuda}/nvvm\"\n+  echo \"COPY --from=cuda-dev /usr/local/cuda-${cuda}/include      /usr/local/cuda-${cuda}/include\"\n+  echo \"COPY --from=cuda-dev /usr/local/cuda-${cuda}/nvvm/include /usr/local/cuda-${cuda}/nvvm/include\"\n+  echo \"ENV CUDA_HOME=/usr/local/cuda-${cuda}\"\n+}\n+\n+install_python() {\n+  local python_version=3.7.3\n+  echo \"\"\n+  echo \"# Install python.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O python.tar.xz https://www.python.org/ftp/python/$python_version/Python-$python_version.tar.xz \\\\\"\n+  echo \" && tar -xJf python.tar.xz \\\\\"\n+  echo \" && cd Python-$python_version \\\\\"\n+  echo \" && ./configure --prefix=/usr/local \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf python.tar.xz Python-$python_version\"\n+}\n+\n+adjust_ldconfig() {\n+  echo \"\"\n+  echo \"# Run ldconfig to discover newly installed shared libraries.\"\n+  echo \"RUN for dir in lib lib64 ; do echo /usr/local/$dir ; done > /etc/ld.so.conf.d/usr-local.conf \\\\\"\n+  echo \" && ldconfig\"\n+}\n+\n+# called as: add_git_remote remote url\n+add_git_remote() {\n+  echo \" && git remote add ${1} ${2} \\\\\"\n+  # Like-named (and conflicting) tags exist in multiple repositories: don't fetch any tags.\n+  echo \" && git config remote.${1}.tagopt --no-tags \\\\\"\n+}\n+\n+create_git_cache() {\n+  # The jdk14 remote is fetched first because that repository was subjected to\n+  # 'git gc --aggressive --prune=all' before it was first published making it much\n+  # smaller than the other jdk repositories. There is a large degree of overlap\n+  # among the jdk repositories so a relatively small number of commits must be\n+  # fetched from the others.\n+  echo \"\"\n+  echo \"# Setup a reference repository cache for faster clones in containers.\"\n+  echo \"RUN mkdir /home/$user/git_cache \\\\\"\n+  echo \" && cd /home/$user/git_cache \\\\\"\n+  echo \" && git init --bare \\\\\"\n+  add_git_remote jdk8    https://github.com/ibmruntimes/openj9-openjdk-jdk8.git\n+  add_git_remote jdk11   https://github.com/ibmruntimes/openj9-openjdk-jdk11.git\n+  add_git_remote jdk14   https://github.com/ibmruntimes/openj9-openjdk-jdk14.git\n+  add_git_remote jdknext https://github.com/ibmruntimes/openj9-openjdk-jdk.git\n+  add_git_remote omr     https://github.com/eclipse/openj9-omr.git\n+  add_git_remote openj9  https://github.com/eclipse/openj9.git\n+  echo \" && echo Fetching repository cache... \\\\\"\n+  echo \" && git fetch jdk14 \\\\\"\n+  echo \" && git fetch --all \\\\\"\n+  echo \" && echo Shrinking repository cache... \\\\\"\n+  echo \" && git gc --aggressive --prune=all\"\n+}\n+\n+configure_ssh() {\n+  echo \"\"\n+  echo \"# Configure sshd.\"\n+  echo \"RUN mkdir /var/run/sshd \\\\\"\n+  echo \" && sed -i -e 's|#PermitRootLogin|PermitRootLogin|' \\\\\"\n+  echo \"           -e 's|#RSAAuthentication.*|RSAAuthentication yes|' \\\\\"\n+  echo \"           -e 's|#PubkeyAuthentication.*|PubkeyAuthentication yes|' /etc/ssh/sshd_config\"\n+  echo \"\"\n+  echo \"# SSH login fix so user is not kicked off after login.\"\n+  echo \"RUN sed -i -e 's|session\\s*required\\s*pam_loginuid.so|session optional pam_loginuid.so|' /etc/pam.d/sshd\"\n+  echo \"\"\n+  echo \"# Expose SSH port.\"\n+  echo \"EXPOSE 22\"\n+}\n+\n+print_dockerfile() {\n+  print_license\n+  preamble\n+  install_packages\n+  create_user\n+if [ $cuda != no ] ; then\n+  install_cuda\n+fi\n+  install_freemarker\n+\n+  install_compilers\n+\n+  install_cmake\n+  install_python\n+\n+  adjust_ldconfig\n+  configure_ssh\n+\n+  install_bootjdks", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAyMzQzMA=="}, "originalCommit": {"oid": "547dbb1b691a8ad1b4a2af1def6ae75493f8bd15"}, "originalPosition": 656}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4OTkzOTcxOnYy", "diffSide": "RIGHT", "path": "buildenv/docker/mkdocker.sh", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwMzoxNDo0NVrOGNApRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxODozMjo0N1rOGNhksQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI5NTIzOQ==", "bodyText": "I think something is wrong here. The image runs make 3.82 and there is no /usr/local/bin/gmake file.", "url": "https://github.com/eclipse-openj9/openj9/pull/9371#discussion_r416295239", "createdAt": "2020-04-28T03:14:45Z", "author": {"login": "pshipton"}, "path": "buildenv/docker/mkdocker.sh", "diffHunk": "@@ -0,0 +1,684 @@\n+#!/bin/bash -\n+\n+print_license() {\n+cat <<- EOF\n+# Copyright (c) 2019, 2020 IBM Corp. and others\n+#\n+# This program and the accompanying materials are made available under\n+# the terms of the Eclipse Public License 2.0 which accompanies this\n+# distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+# or the Apache License, Version 2.0 which accompanies this distribution and\n+# is available at https://www.apache.org/licenses/LICENSE-2.0.\n+#\n+# This Source Code may also be made available under the following\n+# Secondary Licenses when the conditions for such availability set\n+# forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+# General Public License, version 2 with the GNU Classpath\n+# Exception [1] and GNU General Public License, version 2 with the\n+# OpenJDK Assembly Exception [2].\n+#\n+# [1] https://www.gnu.org/software/classpath/license.html\n+# [2] http://openjdk.java.net/legal/assembly-exception.html\n+#\n+# SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+EOF\n+}\n+\n+usage() {\n+  echo \"Usage: $0 [OPTION]...\"\n+  echo \"Generate a Dockerfile for building OpenJ9\"\n+  echo \"\"\n+  echo \"Options:\"\n+  echo \"  --help|-h      print this help, then exit\"\n+  echo \"  --arch=...     specify the processor architecture (default: host architecture)\"\n+  echo \"  --build        build the docker image (overrides '--print')\"\n+  echo \"  --cuda         include CUDA header files\"\n+  echo \"  --dist=...     specify the Linux distribution (e.g. centos, ubuntu)\"\n+  echo \"  --print        write the Dockerfile to stdout (default; overrides '--build')\"\n+  echo \"  --tag=...      specify a name for the docker image (may be repeated, default: none)\"\n+  echo \"  --user=...     specify the user name (default: 'jenkins')\"\n+  echo \"  --version=...  specify the distribution version (e.g. 6.9, 16.04)\"\n+  echo \"\"\n+  local arch=\"$(uname -m)\"\n+  echo \"Supported build patterns on this host ($arch):\"\n+if [ $arch = x86_64 ] ; then\n+  echo \"  bash mkdocker.sh --tag=openj9/cent69 --dist=centos --version=6.9 --build\"\n+fi\n+if [ $arch = x86_64 -o $arch = ppc64le ] ; then\n+  echo \"  bash mkdocker.sh --tag=openj9/cent7  --dist=centos --version=7   --build\"\n+fi\n+  echo \"  bash mkdocker.sh --tag=openj9/ub16   --dist=ubuntu --version=16  --build\"\n+  echo \"  bash mkdocker.sh --tag=openj9/ub18   --dist=ubuntu --version=18  --build\"\n+  echo \"  bash mkdocker.sh --tag=openj9/ub20   --dist=ubuntu --version=20  --build\"\n+  exit 1\n+}\n+\n+# Global configuration variables.\n+action=print\n+arch=\n+cuda=no\n+dist=unspecified\n+tags=()\n+user=jenkins\n+version=unspecified\n+\n+# Frequently used commands.\n+wget_O=\"wget --progress=dot:mega -O\"\n+\n+parse_options() {\n+  for arg in \"$@\" ; do\n+    case \"$arg\" in\n+      -h | --help)\n+        usage\n+        ;;\n+      --arch=*)\n+        arch=\"${arg#*=}\"\n+        ;;\n+      --build)\n+        action=build\n+        ;;\n+      --cuda)\n+        cuda=9.0\n+        ;;\n+      --dist=*)\n+        dist=\"${arg#*=}\"\n+        ;;\n+      --print)\n+        action=print\n+        ;;\n+      --tag=*)\n+        tags+=(\"${arg#*=}\")\n+        ;;\n+      --user=*)\n+        user=\"${arg#*=}\"\n+        ;;\n+      --version=*)\n+        version=\"${arg#*=}\"\n+        ;;\n+      *) # bad option\n+        echo \"Unsupported option: '$arg'\" >&2\n+        usage\n+        ;;\n+    esac\n+  done\n+}\n+\n+validate_options() {\n+  if [ \"x$arch\" = x ] ; then\n+    arch=\"$(uname -m)\"\n+  fi\n+\n+  case \"$arch\" in\n+    ppc64le | s390x | x86_64)\n+      ;;\n+    *)\n+      echo \"Unsupported architecture: '$arch'\" >&2\n+      exit 1\n+      ;;\n+  esac\n+\n+  # Validate the distribution and version.\n+  case \"$dist\" in\n+    centos)\n+      if [ $arch = s390x ] ; then\n+        echo \"CentOS is not supported on $arch\" >&2\n+        exit 1\n+      fi\n+      case $version in\n+        6.9)\n+          if [ $arch = ppc64le ] ; then\n+            echo \"CentOS version 6.9 is not supported on $arch\" >&2\n+            exit 1\n+          fi\n+          ;;\n+        7)\n+          ;;\n+        unspecified)\n+          echo \"Unspecified CentOS version: use '--version' option\" >&2\n+          exit 1\n+          ;;\n+        *)\n+          echo \"Unsupported CentOS version: '$version'\" >&2\n+          exit 1\n+          ;;\n+      esac\n+      ;;\n+    ubuntu)\n+      case $version in\n+        16 | 18 | 20)\n+          version=$version.04\n+          ;;\n+        16.04 | 18.04 | 20.04)\n+          ;;\n+        unspecified)\n+          echo \"Unspecified Ubuntu version: use '--version' option\" >&2\n+          exit 1\n+          ;;\n+        *)\n+          echo \"Unsupported Ubuntu version: '$version'\" >&2\n+          exit 1\n+          ;;\n+      esac\n+      ;;\n+    unspecified)\n+      echo \"Unspecified distribution: use '--dist' option\" >&2\n+      exit 1\n+      ;;\n+    *)\n+      echo \"Unsupported distribution: '$dist'\" >&2\n+      exit 1\n+      ;;\n+  esac\n+\n+  # If CUDA is requested, validate the architecture.\n+  if [ $cuda != no ] ; then\n+    case \"$arch\" in\n+      ppc64le | x86_64)\n+        ;;\n+      *)\n+        echo \"CUDA is not supported on architecture: '$arch'\" >&2\n+        exit 1\n+        ;;\n+    esac\n+  fi\n+}\n+\n+build_cmd() {\n+  local cmd=build\n+  local file=$1\n+  for tag in ${tags[@]} ; do\n+    cmd=\"$cmd --tag $tag\"\n+  done\n+  echo $cmd --file $file .\n+}\n+\n+preamble() {\n+  echo \"\"\n+  echo \"# Generated by: mkdocker.sh $command_line\"\n+  echo \"\"\n+  echo \"# To use this docker file:\"\n+  echo \"# First, copy your public ssh key into authorized_keys.\"\n+  echo \"# Then, in the directory containing the Dockerfile, authorized_keys\"\n+  echo \"# file, and known_hosts file, run:\"\n+  echo \"#   docker $(build_cmd Dockerfile)\"\n+  echo \"#\"\n+if [ ${#tags[@]} -lt 2 ] ; then\n+  echo \"# To start a container based on the resulting image, run this command:\"\n+else\n+  echo \"# To start a container based on the resulting image, run one of these commands:\"\n+fi\n+if [ ${#tags[@]} -eq 0 ] ; then\n+  echo \"#   docker run -it <image>\"\n+else\n+for tag in ${tags[@]} ; do\n+  echo \"#   docker run -it $tag\"\n+done\n+fi\n+  echo \"\"\n+if [ $cuda != no ] ; then\n+  echo \"FROM nvidia/cuda:${cuda}-devel-ubuntu16.04 AS cuda-dev\"\n+  echo \"\"\n+fi\n+  echo \"FROM $dist:$version\"\n+}\n+\n+install_centos_packages() {\n+  echo \"RUN yum -y update \\\\\"\n+if [ $version = 6.9 ] ; then\n+  echo \" && yum -y install https://\\$(rpm -E '%{?centos:centos}%{!?centos:rhel}%{rhel}').iuscommunity.org/ius-release.rpm \\\\\"\n+fi\n+  echo \" && yum -y install \\\\\"\n+  echo \"    alsa-lib-devel \\\\\"\n+if [ $arch = ppc64le ] ; then\n+  echo \"    automake \\\\\" # required to update make\n+fi\n+  echo \"    bind-utils \\\\\"\n+  echo \"    bison \\\\\"\n+  echo \"    bzip2 \\\\\"\n+  echo \"    ca-certificates \\\\\"\n+  echo \"    cpio \\\\\"\n+  echo \"    cups-devel \\\\\"\n+  echo \"    curl-devel \\\\\" # required by git\n+  echo \"    elfutils-libelf-devel \\\\\"\n+  echo \"    expat-devel \\\\\" # required by git and the xml parser\n+  echo \"    file-devel \\\\\"\n+  echo \"    file-libs \\\\\"\n+  echo \"    flex \\\\\"\n+  echo \"    fontconfig \\\\\"\n+  echo \"    fontconfig-devel \\\\\"\n+  echo \"    freetype-devel \\\\\"\n+  echo \"    gettext \\\\\"\n+  echo \"    gettext-devel \\\\\" # required by git\n+  echo \"    glibc \\\\\"\n+  echo \"    glibc-common \\\\\"\n+  echo \"    glibc-devel \\\\\"\n+  echo \"    gmp-devel \\\\\"\n+  echo \"    lbzip2 \\\\\"\n+  echo \"    libdwarf \\\\\"\n+  echo \"    libdwarf-devel \\\\\"\n+  echo \"    libffi-devel \\\\\"\n+  echo \"    libstdc++-static \\\\\"\n+  echo \"    libX11-devel \\\\\"\n+  echo \"    libXext-devel \\\\\"\n+  echo \"    libXi-devel \\\\\"\n+  echo \"    libXrandr-devel \\\\\"\n+  echo \"    libXrender-devel \\\\\"\n+  echo \"    libXt-devel \\\\\"\n+  echo \"    libXtst-devel \\\\\"\n+  echo \"    make \\\\\"\n+  echo \"    mesa-libGL-devel \\\\\"\n+  echo \"    mpfr-devel \\\\\"\n+  echo \"    ntp \\\\\"\n+  echo \"    numactl-devel \\\\\"\n+  echo \"    openssh-clients \\\\\"\n+  echo \"    openssh-server \\\\\"\n+  echo \"    openssl-devel \\\\\" # required by git, etc.\n+  echo \"    perl-CPAN \\\\\"\n+  echo \"    perl-DBI \\\\\"\n+  echo \"    perl-devel \\\\\"\n+  echo \"    perl-ExtUtils-MakeMaker \\\\\" # required by git\n+  echo \"    perl-GD \\\\\"\n+  echo \"    perl-libwww-perl \\\\\"\n+  echo \"    perl-Time-HiRes \\\\\"\n+if [ $arch = ppc64le ] ; then\n+  echo \"    texinfo \\\\\" # required to update make\n+fi\n+  echo \"    unzip \\\\\"\n+  echo \"    vim \\\\\"\n+  echo \"    wget \\\\\"\n+  echo \"    xorg-x11-server-Xvfb \\\\\"\n+  echo \"    xz \\\\\"\n+  echo \"    zip \\\\\"\n+  echo \"    zlib-devel \\\\\" # required by git, python\n+  echo \" && yum clean all\"\n+  echo \"\"\n+  local autoconf_version=2.69\n+  echo \"# Install autoconf.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O autoconf.tar.gz https://fossies.org/linux/misc/autoconf-$autoconf_version.tar.gz \\\\\"\n+  echo \" && tar -xzf autoconf.tar.gz \\\\\"\n+  echo \" && cd autoconf-$autoconf_version \\\\\"\n+  echo \" && ./configure --build=\\$(rpm --eval %{_host}) \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf autoconf.tar.gz autoconf-$autoconf_version\"\n+  echo \"\"\n+  echo \"# Install gcc-7.5.\"\n+  echo \"RUN cd /usr/local \\\\\"\n+  echo \" && $wget_O gcc-7.tar.xz 'https://ci.adoptopenjdk.net/userContent/gcc/gcc750+ccache.$arch.tar.xz' \\\\\"\n+  echo \" && tar -xJf gcc-7.tar.xz --strip-components=1 \\\\\"\n+  echo \" && ln -sf ../local/bin/gcc-7.5 /usr/bin/gcc \\\\\"\n+  echo \" && ln -sf ../local/bin/g++-7.5 /usr/bin/g++ \\\\\"\n+  echo \" && ln -sf gcc /usr/bin/cc \\\\\"\n+  echo \" && ln -sf g++ /usr/bin/c++ \\\\\"\n+  echo \" && rm -f gcc-7.tar.xz\"\n+  echo \"\"\n+  local ant_version=1.10.5\n+  echo \"# Install ant.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O ant.zip https://archive.apache.org/dist/ant/binaries/apache-ant-$ant_version-bin.zip \\\\\"\n+  echo \" && unzip -q ant.zip -d /opt \\\\\"\n+  echo \" && ln -s apache-ant-$ant_version /opt/ant \\\\\"\n+  echo \" && ln -s /opt/ant/bin/ant /usr/bin/ant \\\\\"\n+  echo \" && $wget_O ant-contrib.tar.gz https://sourceforge.net/projects/ant-contrib/files/ant-contrib/1.0b3/ant-contrib-1.0b3-bin.tar.gz \\\\\"\n+  echo \" && tar -xzf ant-contrib.tar.gz \\\\\"\n+  echo \" && mv ant-contrib/ant-contrib-1.0b3.jar /opt/ant/lib \\\\\"\n+  echo \" && rm -rf ant-contrib ant.zip ant-contrib.tar.gz\"\n+  echo \"\"\n+  local git_version=2.5.3\n+  echo \"# Install git.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O git.tar.gz https://www.kernel.org/pub/software/scm/git/git-$git_version.tar.gz \\\\\"\n+  echo \" && tar -xzf git.tar.gz \\\\\"\n+  echo \" && cd git-$git_version \\\\\"\n+  echo \" && make prefix=/usr/local all \\\\\"\n+  echo \" && make prefix=/usr/local install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf git.tar.gz git-$git_version\"\n+if [ $arch = ppc64le ] ; then\n+  # make 4.2 requires automake 1.15\n+  echo \"\"\n+  local automake_version=1.15\n+  echo \"# Update automake.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O automake.tar.gz http://ftp.gnu.org/gnu/automake/automake-$automake_version.tar.gz \\\\\"\n+  echo \" && tar -xzf automake.tar.gz \\\\\"\n+  echo \" && cd automake-$automake_version \\\\\"\n+  echo \" && ./configure \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf automake.tar.gz automake-$automake_version\"\n+  echo \"\"\n+  local make_version=4.2\n+  echo \"# Update make.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O make.tar.gz https://github.com/mirror/make/archive/$make_version.tar.gz \\\\\"\n+  echo \" && tar -xzf make.tar.gz \\\\\"\n+  echo \" && cd make-$make_version \\\\\"\n+  echo \" && ACLOCAL_PATH=/usr/share/aclocal autoreconf -i \\\\\"\n+  echo \" && ./configure \\\\\"\n+  echo \" && make update \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && ln -s make /usr/local/bin/gmake \\\\\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd8cf76d87ad741dc6f09408196fb89a238d9544"}, "originalPosition": 365}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU5MTMxNQ==", "bodyText": "This is only used on ppc64le where the version of make available via apt appears to hang during a build.\nkeithc@up16keithc1:~$ docker run --rm -it openj9/cent7\n[root@b645b703025b /]# which make\n/usr/local/bin/make\n[root@b645b703025b /]# make -v\nGNU Make 4.2\nBuilt for powerpc64le-unknown-linux-gnu\nCopyright (C) 1988-2016 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.", "url": "https://github.com/eclipse-openj9/openj9/pull/9371#discussion_r416591315", "createdAt": "2020-04-28T12:58:51Z", "author": {"login": "keithc-ca"}, "path": "buildenv/docker/mkdocker.sh", "diffHunk": "@@ -0,0 +1,684 @@\n+#!/bin/bash -\n+\n+print_license() {\n+cat <<- EOF\n+# Copyright (c) 2019, 2020 IBM Corp. and others\n+#\n+# This program and the accompanying materials are made available under\n+# the terms of the Eclipse Public License 2.0 which accompanies this\n+# distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+# or the Apache License, Version 2.0 which accompanies this distribution and\n+# is available at https://www.apache.org/licenses/LICENSE-2.0.\n+#\n+# This Source Code may also be made available under the following\n+# Secondary Licenses when the conditions for such availability set\n+# forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+# General Public License, version 2 with the GNU Classpath\n+# Exception [1] and GNU General Public License, version 2 with the\n+# OpenJDK Assembly Exception [2].\n+#\n+# [1] https://www.gnu.org/software/classpath/license.html\n+# [2] http://openjdk.java.net/legal/assembly-exception.html\n+#\n+# SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+EOF\n+}\n+\n+usage() {\n+  echo \"Usage: $0 [OPTION]...\"\n+  echo \"Generate a Dockerfile for building OpenJ9\"\n+  echo \"\"\n+  echo \"Options:\"\n+  echo \"  --help|-h      print this help, then exit\"\n+  echo \"  --arch=...     specify the processor architecture (default: host architecture)\"\n+  echo \"  --build        build the docker image (overrides '--print')\"\n+  echo \"  --cuda         include CUDA header files\"\n+  echo \"  --dist=...     specify the Linux distribution (e.g. centos, ubuntu)\"\n+  echo \"  --print        write the Dockerfile to stdout (default; overrides '--build')\"\n+  echo \"  --tag=...      specify a name for the docker image (may be repeated, default: none)\"\n+  echo \"  --user=...     specify the user name (default: 'jenkins')\"\n+  echo \"  --version=...  specify the distribution version (e.g. 6.9, 16.04)\"\n+  echo \"\"\n+  local arch=\"$(uname -m)\"\n+  echo \"Supported build patterns on this host ($arch):\"\n+if [ $arch = x86_64 ] ; then\n+  echo \"  bash mkdocker.sh --tag=openj9/cent69 --dist=centos --version=6.9 --build\"\n+fi\n+if [ $arch = x86_64 -o $arch = ppc64le ] ; then\n+  echo \"  bash mkdocker.sh --tag=openj9/cent7  --dist=centos --version=7   --build\"\n+fi\n+  echo \"  bash mkdocker.sh --tag=openj9/ub16   --dist=ubuntu --version=16  --build\"\n+  echo \"  bash mkdocker.sh --tag=openj9/ub18   --dist=ubuntu --version=18  --build\"\n+  echo \"  bash mkdocker.sh --tag=openj9/ub20   --dist=ubuntu --version=20  --build\"\n+  exit 1\n+}\n+\n+# Global configuration variables.\n+action=print\n+arch=\n+cuda=no\n+dist=unspecified\n+tags=()\n+user=jenkins\n+version=unspecified\n+\n+# Frequently used commands.\n+wget_O=\"wget --progress=dot:mega -O\"\n+\n+parse_options() {\n+  for arg in \"$@\" ; do\n+    case \"$arg\" in\n+      -h | --help)\n+        usage\n+        ;;\n+      --arch=*)\n+        arch=\"${arg#*=}\"\n+        ;;\n+      --build)\n+        action=build\n+        ;;\n+      --cuda)\n+        cuda=9.0\n+        ;;\n+      --dist=*)\n+        dist=\"${arg#*=}\"\n+        ;;\n+      --print)\n+        action=print\n+        ;;\n+      --tag=*)\n+        tags+=(\"${arg#*=}\")\n+        ;;\n+      --user=*)\n+        user=\"${arg#*=}\"\n+        ;;\n+      --version=*)\n+        version=\"${arg#*=}\"\n+        ;;\n+      *) # bad option\n+        echo \"Unsupported option: '$arg'\" >&2\n+        usage\n+        ;;\n+    esac\n+  done\n+}\n+\n+validate_options() {\n+  if [ \"x$arch\" = x ] ; then\n+    arch=\"$(uname -m)\"\n+  fi\n+\n+  case \"$arch\" in\n+    ppc64le | s390x | x86_64)\n+      ;;\n+    *)\n+      echo \"Unsupported architecture: '$arch'\" >&2\n+      exit 1\n+      ;;\n+  esac\n+\n+  # Validate the distribution and version.\n+  case \"$dist\" in\n+    centos)\n+      if [ $arch = s390x ] ; then\n+        echo \"CentOS is not supported on $arch\" >&2\n+        exit 1\n+      fi\n+      case $version in\n+        6.9)\n+          if [ $arch = ppc64le ] ; then\n+            echo \"CentOS version 6.9 is not supported on $arch\" >&2\n+            exit 1\n+          fi\n+          ;;\n+        7)\n+          ;;\n+        unspecified)\n+          echo \"Unspecified CentOS version: use '--version' option\" >&2\n+          exit 1\n+          ;;\n+        *)\n+          echo \"Unsupported CentOS version: '$version'\" >&2\n+          exit 1\n+          ;;\n+      esac\n+      ;;\n+    ubuntu)\n+      case $version in\n+        16 | 18 | 20)\n+          version=$version.04\n+          ;;\n+        16.04 | 18.04 | 20.04)\n+          ;;\n+        unspecified)\n+          echo \"Unspecified Ubuntu version: use '--version' option\" >&2\n+          exit 1\n+          ;;\n+        *)\n+          echo \"Unsupported Ubuntu version: '$version'\" >&2\n+          exit 1\n+          ;;\n+      esac\n+      ;;\n+    unspecified)\n+      echo \"Unspecified distribution: use '--dist' option\" >&2\n+      exit 1\n+      ;;\n+    *)\n+      echo \"Unsupported distribution: '$dist'\" >&2\n+      exit 1\n+      ;;\n+  esac\n+\n+  # If CUDA is requested, validate the architecture.\n+  if [ $cuda != no ] ; then\n+    case \"$arch\" in\n+      ppc64le | x86_64)\n+        ;;\n+      *)\n+        echo \"CUDA is not supported on architecture: '$arch'\" >&2\n+        exit 1\n+        ;;\n+    esac\n+  fi\n+}\n+\n+build_cmd() {\n+  local cmd=build\n+  local file=$1\n+  for tag in ${tags[@]} ; do\n+    cmd=\"$cmd --tag $tag\"\n+  done\n+  echo $cmd --file $file .\n+}\n+\n+preamble() {\n+  echo \"\"\n+  echo \"# Generated by: mkdocker.sh $command_line\"\n+  echo \"\"\n+  echo \"# To use this docker file:\"\n+  echo \"# First, copy your public ssh key into authorized_keys.\"\n+  echo \"# Then, in the directory containing the Dockerfile, authorized_keys\"\n+  echo \"# file, and known_hosts file, run:\"\n+  echo \"#   docker $(build_cmd Dockerfile)\"\n+  echo \"#\"\n+if [ ${#tags[@]} -lt 2 ] ; then\n+  echo \"# To start a container based on the resulting image, run this command:\"\n+else\n+  echo \"# To start a container based on the resulting image, run one of these commands:\"\n+fi\n+if [ ${#tags[@]} -eq 0 ] ; then\n+  echo \"#   docker run -it <image>\"\n+else\n+for tag in ${tags[@]} ; do\n+  echo \"#   docker run -it $tag\"\n+done\n+fi\n+  echo \"\"\n+if [ $cuda != no ] ; then\n+  echo \"FROM nvidia/cuda:${cuda}-devel-ubuntu16.04 AS cuda-dev\"\n+  echo \"\"\n+fi\n+  echo \"FROM $dist:$version\"\n+}\n+\n+install_centos_packages() {\n+  echo \"RUN yum -y update \\\\\"\n+if [ $version = 6.9 ] ; then\n+  echo \" && yum -y install https://\\$(rpm -E '%{?centos:centos}%{!?centos:rhel}%{rhel}').iuscommunity.org/ius-release.rpm \\\\\"\n+fi\n+  echo \" && yum -y install \\\\\"\n+  echo \"    alsa-lib-devel \\\\\"\n+if [ $arch = ppc64le ] ; then\n+  echo \"    automake \\\\\" # required to update make\n+fi\n+  echo \"    bind-utils \\\\\"\n+  echo \"    bison \\\\\"\n+  echo \"    bzip2 \\\\\"\n+  echo \"    ca-certificates \\\\\"\n+  echo \"    cpio \\\\\"\n+  echo \"    cups-devel \\\\\"\n+  echo \"    curl-devel \\\\\" # required by git\n+  echo \"    elfutils-libelf-devel \\\\\"\n+  echo \"    expat-devel \\\\\" # required by git and the xml parser\n+  echo \"    file-devel \\\\\"\n+  echo \"    file-libs \\\\\"\n+  echo \"    flex \\\\\"\n+  echo \"    fontconfig \\\\\"\n+  echo \"    fontconfig-devel \\\\\"\n+  echo \"    freetype-devel \\\\\"\n+  echo \"    gettext \\\\\"\n+  echo \"    gettext-devel \\\\\" # required by git\n+  echo \"    glibc \\\\\"\n+  echo \"    glibc-common \\\\\"\n+  echo \"    glibc-devel \\\\\"\n+  echo \"    gmp-devel \\\\\"\n+  echo \"    lbzip2 \\\\\"\n+  echo \"    libdwarf \\\\\"\n+  echo \"    libdwarf-devel \\\\\"\n+  echo \"    libffi-devel \\\\\"\n+  echo \"    libstdc++-static \\\\\"\n+  echo \"    libX11-devel \\\\\"\n+  echo \"    libXext-devel \\\\\"\n+  echo \"    libXi-devel \\\\\"\n+  echo \"    libXrandr-devel \\\\\"\n+  echo \"    libXrender-devel \\\\\"\n+  echo \"    libXt-devel \\\\\"\n+  echo \"    libXtst-devel \\\\\"\n+  echo \"    make \\\\\"\n+  echo \"    mesa-libGL-devel \\\\\"\n+  echo \"    mpfr-devel \\\\\"\n+  echo \"    ntp \\\\\"\n+  echo \"    numactl-devel \\\\\"\n+  echo \"    openssh-clients \\\\\"\n+  echo \"    openssh-server \\\\\"\n+  echo \"    openssl-devel \\\\\" # required by git, etc.\n+  echo \"    perl-CPAN \\\\\"\n+  echo \"    perl-DBI \\\\\"\n+  echo \"    perl-devel \\\\\"\n+  echo \"    perl-ExtUtils-MakeMaker \\\\\" # required by git\n+  echo \"    perl-GD \\\\\"\n+  echo \"    perl-libwww-perl \\\\\"\n+  echo \"    perl-Time-HiRes \\\\\"\n+if [ $arch = ppc64le ] ; then\n+  echo \"    texinfo \\\\\" # required to update make\n+fi\n+  echo \"    unzip \\\\\"\n+  echo \"    vim \\\\\"\n+  echo \"    wget \\\\\"\n+  echo \"    xorg-x11-server-Xvfb \\\\\"\n+  echo \"    xz \\\\\"\n+  echo \"    zip \\\\\"\n+  echo \"    zlib-devel \\\\\" # required by git, python\n+  echo \" && yum clean all\"\n+  echo \"\"\n+  local autoconf_version=2.69\n+  echo \"# Install autoconf.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O autoconf.tar.gz https://fossies.org/linux/misc/autoconf-$autoconf_version.tar.gz \\\\\"\n+  echo \" && tar -xzf autoconf.tar.gz \\\\\"\n+  echo \" && cd autoconf-$autoconf_version \\\\\"\n+  echo \" && ./configure --build=\\$(rpm --eval %{_host}) \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf autoconf.tar.gz autoconf-$autoconf_version\"\n+  echo \"\"\n+  echo \"# Install gcc-7.5.\"\n+  echo \"RUN cd /usr/local \\\\\"\n+  echo \" && $wget_O gcc-7.tar.xz 'https://ci.adoptopenjdk.net/userContent/gcc/gcc750+ccache.$arch.tar.xz' \\\\\"\n+  echo \" && tar -xJf gcc-7.tar.xz --strip-components=1 \\\\\"\n+  echo \" && ln -sf ../local/bin/gcc-7.5 /usr/bin/gcc \\\\\"\n+  echo \" && ln -sf ../local/bin/g++-7.5 /usr/bin/g++ \\\\\"\n+  echo \" && ln -sf gcc /usr/bin/cc \\\\\"\n+  echo \" && ln -sf g++ /usr/bin/c++ \\\\\"\n+  echo \" && rm -f gcc-7.tar.xz\"\n+  echo \"\"\n+  local ant_version=1.10.5\n+  echo \"# Install ant.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O ant.zip https://archive.apache.org/dist/ant/binaries/apache-ant-$ant_version-bin.zip \\\\\"\n+  echo \" && unzip -q ant.zip -d /opt \\\\\"\n+  echo \" && ln -s apache-ant-$ant_version /opt/ant \\\\\"\n+  echo \" && ln -s /opt/ant/bin/ant /usr/bin/ant \\\\\"\n+  echo \" && $wget_O ant-contrib.tar.gz https://sourceforge.net/projects/ant-contrib/files/ant-contrib/1.0b3/ant-contrib-1.0b3-bin.tar.gz \\\\\"\n+  echo \" && tar -xzf ant-contrib.tar.gz \\\\\"\n+  echo \" && mv ant-contrib/ant-contrib-1.0b3.jar /opt/ant/lib \\\\\"\n+  echo \" && rm -rf ant-contrib ant.zip ant-contrib.tar.gz\"\n+  echo \"\"\n+  local git_version=2.5.3\n+  echo \"# Install git.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O git.tar.gz https://www.kernel.org/pub/software/scm/git/git-$git_version.tar.gz \\\\\"\n+  echo \" && tar -xzf git.tar.gz \\\\\"\n+  echo \" && cd git-$git_version \\\\\"\n+  echo \" && make prefix=/usr/local all \\\\\"\n+  echo \" && make prefix=/usr/local install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf git.tar.gz git-$git_version\"\n+if [ $arch = ppc64le ] ; then\n+  # make 4.2 requires automake 1.15\n+  echo \"\"\n+  local automake_version=1.15\n+  echo \"# Update automake.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O automake.tar.gz http://ftp.gnu.org/gnu/automake/automake-$automake_version.tar.gz \\\\\"\n+  echo \" && tar -xzf automake.tar.gz \\\\\"\n+  echo \" && cd automake-$automake_version \\\\\"\n+  echo \" && ./configure \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf automake.tar.gz automake-$automake_version\"\n+  echo \"\"\n+  local make_version=4.2\n+  echo \"# Update make.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O make.tar.gz https://github.com/mirror/make/archive/$make_version.tar.gz \\\\\"\n+  echo \" && tar -xzf make.tar.gz \\\\\"\n+  echo \" && cd make-$make_version \\\\\"\n+  echo \" && ACLOCAL_PATH=/usr/share/aclocal autoreconf -i \\\\\"\n+  echo \" && ./configure \\\\\"\n+  echo \" && make update \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && ln -s make /usr/local/bin/gmake \\\\\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI5NTIzOQ=="}, "originalCommit": {"oid": "cd8cf76d87ad741dc6f09408196fb89a238d9544"}, "originalPosition": 365}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjcwNTY0OA==", "bodyText": "The tests require make 4.1 or later. The cent7/x86 image contains make 3.82", "url": "https://github.com/eclipse-openj9/openj9/pull/9371#discussion_r416705648", "createdAt": "2020-04-28T15:25:46Z", "author": {"login": "pshipton"}, "path": "buildenv/docker/mkdocker.sh", "diffHunk": "@@ -0,0 +1,684 @@\n+#!/bin/bash -\n+\n+print_license() {\n+cat <<- EOF\n+# Copyright (c) 2019, 2020 IBM Corp. and others\n+#\n+# This program and the accompanying materials are made available under\n+# the terms of the Eclipse Public License 2.0 which accompanies this\n+# distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+# or the Apache License, Version 2.0 which accompanies this distribution and\n+# is available at https://www.apache.org/licenses/LICENSE-2.0.\n+#\n+# This Source Code may also be made available under the following\n+# Secondary Licenses when the conditions for such availability set\n+# forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+# General Public License, version 2 with the GNU Classpath\n+# Exception [1] and GNU General Public License, version 2 with the\n+# OpenJDK Assembly Exception [2].\n+#\n+# [1] https://www.gnu.org/software/classpath/license.html\n+# [2] http://openjdk.java.net/legal/assembly-exception.html\n+#\n+# SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+EOF\n+}\n+\n+usage() {\n+  echo \"Usage: $0 [OPTION]...\"\n+  echo \"Generate a Dockerfile for building OpenJ9\"\n+  echo \"\"\n+  echo \"Options:\"\n+  echo \"  --help|-h      print this help, then exit\"\n+  echo \"  --arch=...     specify the processor architecture (default: host architecture)\"\n+  echo \"  --build        build the docker image (overrides '--print')\"\n+  echo \"  --cuda         include CUDA header files\"\n+  echo \"  --dist=...     specify the Linux distribution (e.g. centos, ubuntu)\"\n+  echo \"  --print        write the Dockerfile to stdout (default; overrides '--build')\"\n+  echo \"  --tag=...      specify a name for the docker image (may be repeated, default: none)\"\n+  echo \"  --user=...     specify the user name (default: 'jenkins')\"\n+  echo \"  --version=...  specify the distribution version (e.g. 6.9, 16.04)\"\n+  echo \"\"\n+  local arch=\"$(uname -m)\"\n+  echo \"Supported build patterns on this host ($arch):\"\n+if [ $arch = x86_64 ] ; then\n+  echo \"  bash mkdocker.sh --tag=openj9/cent69 --dist=centos --version=6.9 --build\"\n+fi\n+if [ $arch = x86_64 -o $arch = ppc64le ] ; then\n+  echo \"  bash mkdocker.sh --tag=openj9/cent7  --dist=centos --version=7   --build\"\n+fi\n+  echo \"  bash mkdocker.sh --tag=openj9/ub16   --dist=ubuntu --version=16  --build\"\n+  echo \"  bash mkdocker.sh --tag=openj9/ub18   --dist=ubuntu --version=18  --build\"\n+  echo \"  bash mkdocker.sh --tag=openj9/ub20   --dist=ubuntu --version=20  --build\"\n+  exit 1\n+}\n+\n+# Global configuration variables.\n+action=print\n+arch=\n+cuda=no\n+dist=unspecified\n+tags=()\n+user=jenkins\n+version=unspecified\n+\n+# Frequently used commands.\n+wget_O=\"wget --progress=dot:mega -O\"\n+\n+parse_options() {\n+  for arg in \"$@\" ; do\n+    case \"$arg\" in\n+      -h | --help)\n+        usage\n+        ;;\n+      --arch=*)\n+        arch=\"${arg#*=}\"\n+        ;;\n+      --build)\n+        action=build\n+        ;;\n+      --cuda)\n+        cuda=9.0\n+        ;;\n+      --dist=*)\n+        dist=\"${arg#*=}\"\n+        ;;\n+      --print)\n+        action=print\n+        ;;\n+      --tag=*)\n+        tags+=(\"${arg#*=}\")\n+        ;;\n+      --user=*)\n+        user=\"${arg#*=}\"\n+        ;;\n+      --version=*)\n+        version=\"${arg#*=}\"\n+        ;;\n+      *) # bad option\n+        echo \"Unsupported option: '$arg'\" >&2\n+        usage\n+        ;;\n+    esac\n+  done\n+}\n+\n+validate_options() {\n+  if [ \"x$arch\" = x ] ; then\n+    arch=\"$(uname -m)\"\n+  fi\n+\n+  case \"$arch\" in\n+    ppc64le | s390x | x86_64)\n+      ;;\n+    *)\n+      echo \"Unsupported architecture: '$arch'\" >&2\n+      exit 1\n+      ;;\n+  esac\n+\n+  # Validate the distribution and version.\n+  case \"$dist\" in\n+    centos)\n+      if [ $arch = s390x ] ; then\n+        echo \"CentOS is not supported on $arch\" >&2\n+        exit 1\n+      fi\n+      case $version in\n+        6.9)\n+          if [ $arch = ppc64le ] ; then\n+            echo \"CentOS version 6.9 is not supported on $arch\" >&2\n+            exit 1\n+          fi\n+          ;;\n+        7)\n+          ;;\n+        unspecified)\n+          echo \"Unspecified CentOS version: use '--version' option\" >&2\n+          exit 1\n+          ;;\n+        *)\n+          echo \"Unsupported CentOS version: '$version'\" >&2\n+          exit 1\n+          ;;\n+      esac\n+      ;;\n+    ubuntu)\n+      case $version in\n+        16 | 18 | 20)\n+          version=$version.04\n+          ;;\n+        16.04 | 18.04 | 20.04)\n+          ;;\n+        unspecified)\n+          echo \"Unspecified Ubuntu version: use '--version' option\" >&2\n+          exit 1\n+          ;;\n+        *)\n+          echo \"Unsupported Ubuntu version: '$version'\" >&2\n+          exit 1\n+          ;;\n+      esac\n+      ;;\n+    unspecified)\n+      echo \"Unspecified distribution: use '--dist' option\" >&2\n+      exit 1\n+      ;;\n+    *)\n+      echo \"Unsupported distribution: '$dist'\" >&2\n+      exit 1\n+      ;;\n+  esac\n+\n+  # If CUDA is requested, validate the architecture.\n+  if [ $cuda != no ] ; then\n+    case \"$arch\" in\n+      ppc64le | x86_64)\n+        ;;\n+      *)\n+        echo \"CUDA is not supported on architecture: '$arch'\" >&2\n+        exit 1\n+        ;;\n+    esac\n+  fi\n+}\n+\n+build_cmd() {\n+  local cmd=build\n+  local file=$1\n+  for tag in ${tags[@]} ; do\n+    cmd=\"$cmd --tag $tag\"\n+  done\n+  echo $cmd --file $file .\n+}\n+\n+preamble() {\n+  echo \"\"\n+  echo \"# Generated by: mkdocker.sh $command_line\"\n+  echo \"\"\n+  echo \"# To use this docker file:\"\n+  echo \"# First, copy your public ssh key into authorized_keys.\"\n+  echo \"# Then, in the directory containing the Dockerfile, authorized_keys\"\n+  echo \"# file, and known_hosts file, run:\"\n+  echo \"#   docker $(build_cmd Dockerfile)\"\n+  echo \"#\"\n+if [ ${#tags[@]} -lt 2 ] ; then\n+  echo \"# To start a container based on the resulting image, run this command:\"\n+else\n+  echo \"# To start a container based on the resulting image, run one of these commands:\"\n+fi\n+if [ ${#tags[@]} -eq 0 ] ; then\n+  echo \"#   docker run -it <image>\"\n+else\n+for tag in ${tags[@]} ; do\n+  echo \"#   docker run -it $tag\"\n+done\n+fi\n+  echo \"\"\n+if [ $cuda != no ] ; then\n+  echo \"FROM nvidia/cuda:${cuda}-devel-ubuntu16.04 AS cuda-dev\"\n+  echo \"\"\n+fi\n+  echo \"FROM $dist:$version\"\n+}\n+\n+install_centos_packages() {\n+  echo \"RUN yum -y update \\\\\"\n+if [ $version = 6.9 ] ; then\n+  echo \" && yum -y install https://\\$(rpm -E '%{?centos:centos}%{!?centos:rhel}%{rhel}').iuscommunity.org/ius-release.rpm \\\\\"\n+fi\n+  echo \" && yum -y install \\\\\"\n+  echo \"    alsa-lib-devel \\\\\"\n+if [ $arch = ppc64le ] ; then\n+  echo \"    automake \\\\\" # required to update make\n+fi\n+  echo \"    bind-utils \\\\\"\n+  echo \"    bison \\\\\"\n+  echo \"    bzip2 \\\\\"\n+  echo \"    ca-certificates \\\\\"\n+  echo \"    cpio \\\\\"\n+  echo \"    cups-devel \\\\\"\n+  echo \"    curl-devel \\\\\" # required by git\n+  echo \"    elfutils-libelf-devel \\\\\"\n+  echo \"    expat-devel \\\\\" # required by git and the xml parser\n+  echo \"    file-devel \\\\\"\n+  echo \"    file-libs \\\\\"\n+  echo \"    flex \\\\\"\n+  echo \"    fontconfig \\\\\"\n+  echo \"    fontconfig-devel \\\\\"\n+  echo \"    freetype-devel \\\\\"\n+  echo \"    gettext \\\\\"\n+  echo \"    gettext-devel \\\\\" # required by git\n+  echo \"    glibc \\\\\"\n+  echo \"    glibc-common \\\\\"\n+  echo \"    glibc-devel \\\\\"\n+  echo \"    gmp-devel \\\\\"\n+  echo \"    lbzip2 \\\\\"\n+  echo \"    libdwarf \\\\\"\n+  echo \"    libdwarf-devel \\\\\"\n+  echo \"    libffi-devel \\\\\"\n+  echo \"    libstdc++-static \\\\\"\n+  echo \"    libX11-devel \\\\\"\n+  echo \"    libXext-devel \\\\\"\n+  echo \"    libXi-devel \\\\\"\n+  echo \"    libXrandr-devel \\\\\"\n+  echo \"    libXrender-devel \\\\\"\n+  echo \"    libXt-devel \\\\\"\n+  echo \"    libXtst-devel \\\\\"\n+  echo \"    make \\\\\"\n+  echo \"    mesa-libGL-devel \\\\\"\n+  echo \"    mpfr-devel \\\\\"\n+  echo \"    ntp \\\\\"\n+  echo \"    numactl-devel \\\\\"\n+  echo \"    openssh-clients \\\\\"\n+  echo \"    openssh-server \\\\\"\n+  echo \"    openssl-devel \\\\\" # required by git, etc.\n+  echo \"    perl-CPAN \\\\\"\n+  echo \"    perl-DBI \\\\\"\n+  echo \"    perl-devel \\\\\"\n+  echo \"    perl-ExtUtils-MakeMaker \\\\\" # required by git\n+  echo \"    perl-GD \\\\\"\n+  echo \"    perl-libwww-perl \\\\\"\n+  echo \"    perl-Time-HiRes \\\\\"\n+if [ $arch = ppc64le ] ; then\n+  echo \"    texinfo \\\\\" # required to update make\n+fi\n+  echo \"    unzip \\\\\"\n+  echo \"    vim \\\\\"\n+  echo \"    wget \\\\\"\n+  echo \"    xorg-x11-server-Xvfb \\\\\"\n+  echo \"    xz \\\\\"\n+  echo \"    zip \\\\\"\n+  echo \"    zlib-devel \\\\\" # required by git, python\n+  echo \" && yum clean all\"\n+  echo \"\"\n+  local autoconf_version=2.69\n+  echo \"# Install autoconf.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O autoconf.tar.gz https://fossies.org/linux/misc/autoconf-$autoconf_version.tar.gz \\\\\"\n+  echo \" && tar -xzf autoconf.tar.gz \\\\\"\n+  echo \" && cd autoconf-$autoconf_version \\\\\"\n+  echo \" && ./configure --build=\\$(rpm --eval %{_host}) \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf autoconf.tar.gz autoconf-$autoconf_version\"\n+  echo \"\"\n+  echo \"# Install gcc-7.5.\"\n+  echo \"RUN cd /usr/local \\\\\"\n+  echo \" && $wget_O gcc-7.tar.xz 'https://ci.adoptopenjdk.net/userContent/gcc/gcc750+ccache.$arch.tar.xz' \\\\\"\n+  echo \" && tar -xJf gcc-7.tar.xz --strip-components=1 \\\\\"\n+  echo \" && ln -sf ../local/bin/gcc-7.5 /usr/bin/gcc \\\\\"\n+  echo \" && ln -sf ../local/bin/g++-7.5 /usr/bin/g++ \\\\\"\n+  echo \" && ln -sf gcc /usr/bin/cc \\\\\"\n+  echo \" && ln -sf g++ /usr/bin/c++ \\\\\"\n+  echo \" && rm -f gcc-7.tar.xz\"\n+  echo \"\"\n+  local ant_version=1.10.5\n+  echo \"# Install ant.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O ant.zip https://archive.apache.org/dist/ant/binaries/apache-ant-$ant_version-bin.zip \\\\\"\n+  echo \" && unzip -q ant.zip -d /opt \\\\\"\n+  echo \" && ln -s apache-ant-$ant_version /opt/ant \\\\\"\n+  echo \" && ln -s /opt/ant/bin/ant /usr/bin/ant \\\\\"\n+  echo \" && $wget_O ant-contrib.tar.gz https://sourceforge.net/projects/ant-contrib/files/ant-contrib/1.0b3/ant-contrib-1.0b3-bin.tar.gz \\\\\"\n+  echo \" && tar -xzf ant-contrib.tar.gz \\\\\"\n+  echo \" && mv ant-contrib/ant-contrib-1.0b3.jar /opt/ant/lib \\\\\"\n+  echo \" && rm -rf ant-contrib ant.zip ant-contrib.tar.gz\"\n+  echo \"\"\n+  local git_version=2.5.3\n+  echo \"# Install git.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O git.tar.gz https://www.kernel.org/pub/software/scm/git/git-$git_version.tar.gz \\\\\"\n+  echo \" && tar -xzf git.tar.gz \\\\\"\n+  echo \" && cd git-$git_version \\\\\"\n+  echo \" && make prefix=/usr/local all \\\\\"\n+  echo \" && make prefix=/usr/local install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf git.tar.gz git-$git_version\"\n+if [ $arch = ppc64le ] ; then\n+  # make 4.2 requires automake 1.15\n+  echo \"\"\n+  local automake_version=1.15\n+  echo \"# Update automake.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O automake.tar.gz http://ftp.gnu.org/gnu/automake/automake-$automake_version.tar.gz \\\\\"\n+  echo \" && tar -xzf automake.tar.gz \\\\\"\n+  echo \" && cd automake-$automake_version \\\\\"\n+  echo \" && ./configure \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf automake.tar.gz automake-$automake_version\"\n+  echo \"\"\n+  local make_version=4.2\n+  echo \"# Update make.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O make.tar.gz https://github.com/mirror/make/archive/$make_version.tar.gz \\\\\"\n+  echo \" && tar -xzf make.tar.gz \\\\\"\n+  echo \" && cd make-$make_version \\\\\"\n+  echo \" && ACLOCAL_PATH=/usr/share/aclocal autoreconf -i \\\\\"\n+  echo \" && ./configure \\\\\"\n+  echo \" && make update \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && ln -s make /usr/local/bin/gmake \\\\\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI5NTIzOQ=="}, "originalCommit": {"oid": "cd8cf76d87ad741dc6f09408196fb89a238d9544"}, "originalPosition": 365}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjczMTIzNQ==", "bodyText": "I'll fix that, but where does it say the tests need 4.1 (besides perhaps ppc64le)?", "url": "https://github.com/eclipse-openj9/openj9/pull/9371#discussion_r416731235", "createdAt": "2020-04-28T15:57:15Z", "author": {"login": "keithc-ca"}, "path": "buildenv/docker/mkdocker.sh", "diffHunk": "@@ -0,0 +1,684 @@\n+#!/bin/bash -\n+\n+print_license() {\n+cat <<- EOF\n+# Copyright (c) 2019, 2020 IBM Corp. and others\n+#\n+# This program and the accompanying materials are made available under\n+# the terms of the Eclipse Public License 2.0 which accompanies this\n+# distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+# or the Apache License, Version 2.0 which accompanies this distribution and\n+# is available at https://www.apache.org/licenses/LICENSE-2.0.\n+#\n+# This Source Code may also be made available under the following\n+# Secondary Licenses when the conditions for such availability set\n+# forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+# General Public License, version 2 with the GNU Classpath\n+# Exception [1] and GNU General Public License, version 2 with the\n+# OpenJDK Assembly Exception [2].\n+#\n+# [1] https://www.gnu.org/software/classpath/license.html\n+# [2] http://openjdk.java.net/legal/assembly-exception.html\n+#\n+# SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+EOF\n+}\n+\n+usage() {\n+  echo \"Usage: $0 [OPTION]...\"\n+  echo \"Generate a Dockerfile for building OpenJ9\"\n+  echo \"\"\n+  echo \"Options:\"\n+  echo \"  --help|-h      print this help, then exit\"\n+  echo \"  --arch=...     specify the processor architecture (default: host architecture)\"\n+  echo \"  --build        build the docker image (overrides '--print')\"\n+  echo \"  --cuda         include CUDA header files\"\n+  echo \"  --dist=...     specify the Linux distribution (e.g. centos, ubuntu)\"\n+  echo \"  --print        write the Dockerfile to stdout (default; overrides '--build')\"\n+  echo \"  --tag=...      specify a name for the docker image (may be repeated, default: none)\"\n+  echo \"  --user=...     specify the user name (default: 'jenkins')\"\n+  echo \"  --version=...  specify the distribution version (e.g. 6.9, 16.04)\"\n+  echo \"\"\n+  local arch=\"$(uname -m)\"\n+  echo \"Supported build patterns on this host ($arch):\"\n+if [ $arch = x86_64 ] ; then\n+  echo \"  bash mkdocker.sh --tag=openj9/cent69 --dist=centos --version=6.9 --build\"\n+fi\n+if [ $arch = x86_64 -o $arch = ppc64le ] ; then\n+  echo \"  bash mkdocker.sh --tag=openj9/cent7  --dist=centos --version=7   --build\"\n+fi\n+  echo \"  bash mkdocker.sh --tag=openj9/ub16   --dist=ubuntu --version=16  --build\"\n+  echo \"  bash mkdocker.sh --tag=openj9/ub18   --dist=ubuntu --version=18  --build\"\n+  echo \"  bash mkdocker.sh --tag=openj9/ub20   --dist=ubuntu --version=20  --build\"\n+  exit 1\n+}\n+\n+# Global configuration variables.\n+action=print\n+arch=\n+cuda=no\n+dist=unspecified\n+tags=()\n+user=jenkins\n+version=unspecified\n+\n+# Frequently used commands.\n+wget_O=\"wget --progress=dot:mega -O\"\n+\n+parse_options() {\n+  for arg in \"$@\" ; do\n+    case \"$arg\" in\n+      -h | --help)\n+        usage\n+        ;;\n+      --arch=*)\n+        arch=\"${arg#*=}\"\n+        ;;\n+      --build)\n+        action=build\n+        ;;\n+      --cuda)\n+        cuda=9.0\n+        ;;\n+      --dist=*)\n+        dist=\"${arg#*=}\"\n+        ;;\n+      --print)\n+        action=print\n+        ;;\n+      --tag=*)\n+        tags+=(\"${arg#*=}\")\n+        ;;\n+      --user=*)\n+        user=\"${arg#*=}\"\n+        ;;\n+      --version=*)\n+        version=\"${arg#*=}\"\n+        ;;\n+      *) # bad option\n+        echo \"Unsupported option: '$arg'\" >&2\n+        usage\n+        ;;\n+    esac\n+  done\n+}\n+\n+validate_options() {\n+  if [ \"x$arch\" = x ] ; then\n+    arch=\"$(uname -m)\"\n+  fi\n+\n+  case \"$arch\" in\n+    ppc64le | s390x | x86_64)\n+      ;;\n+    *)\n+      echo \"Unsupported architecture: '$arch'\" >&2\n+      exit 1\n+      ;;\n+  esac\n+\n+  # Validate the distribution and version.\n+  case \"$dist\" in\n+    centos)\n+      if [ $arch = s390x ] ; then\n+        echo \"CentOS is not supported on $arch\" >&2\n+        exit 1\n+      fi\n+      case $version in\n+        6.9)\n+          if [ $arch = ppc64le ] ; then\n+            echo \"CentOS version 6.9 is not supported on $arch\" >&2\n+            exit 1\n+          fi\n+          ;;\n+        7)\n+          ;;\n+        unspecified)\n+          echo \"Unspecified CentOS version: use '--version' option\" >&2\n+          exit 1\n+          ;;\n+        *)\n+          echo \"Unsupported CentOS version: '$version'\" >&2\n+          exit 1\n+          ;;\n+      esac\n+      ;;\n+    ubuntu)\n+      case $version in\n+        16 | 18 | 20)\n+          version=$version.04\n+          ;;\n+        16.04 | 18.04 | 20.04)\n+          ;;\n+        unspecified)\n+          echo \"Unspecified Ubuntu version: use '--version' option\" >&2\n+          exit 1\n+          ;;\n+        *)\n+          echo \"Unsupported Ubuntu version: '$version'\" >&2\n+          exit 1\n+          ;;\n+      esac\n+      ;;\n+    unspecified)\n+      echo \"Unspecified distribution: use '--dist' option\" >&2\n+      exit 1\n+      ;;\n+    *)\n+      echo \"Unsupported distribution: '$dist'\" >&2\n+      exit 1\n+      ;;\n+  esac\n+\n+  # If CUDA is requested, validate the architecture.\n+  if [ $cuda != no ] ; then\n+    case \"$arch\" in\n+      ppc64le | x86_64)\n+        ;;\n+      *)\n+        echo \"CUDA is not supported on architecture: '$arch'\" >&2\n+        exit 1\n+        ;;\n+    esac\n+  fi\n+}\n+\n+build_cmd() {\n+  local cmd=build\n+  local file=$1\n+  for tag in ${tags[@]} ; do\n+    cmd=\"$cmd --tag $tag\"\n+  done\n+  echo $cmd --file $file .\n+}\n+\n+preamble() {\n+  echo \"\"\n+  echo \"# Generated by: mkdocker.sh $command_line\"\n+  echo \"\"\n+  echo \"# To use this docker file:\"\n+  echo \"# First, copy your public ssh key into authorized_keys.\"\n+  echo \"# Then, in the directory containing the Dockerfile, authorized_keys\"\n+  echo \"# file, and known_hosts file, run:\"\n+  echo \"#   docker $(build_cmd Dockerfile)\"\n+  echo \"#\"\n+if [ ${#tags[@]} -lt 2 ] ; then\n+  echo \"# To start a container based on the resulting image, run this command:\"\n+else\n+  echo \"# To start a container based on the resulting image, run one of these commands:\"\n+fi\n+if [ ${#tags[@]} -eq 0 ] ; then\n+  echo \"#   docker run -it <image>\"\n+else\n+for tag in ${tags[@]} ; do\n+  echo \"#   docker run -it $tag\"\n+done\n+fi\n+  echo \"\"\n+if [ $cuda != no ] ; then\n+  echo \"FROM nvidia/cuda:${cuda}-devel-ubuntu16.04 AS cuda-dev\"\n+  echo \"\"\n+fi\n+  echo \"FROM $dist:$version\"\n+}\n+\n+install_centos_packages() {\n+  echo \"RUN yum -y update \\\\\"\n+if [ $version = 6.9 ] ; then\n+  echo \" && yum -y install https://\\$(rpm -E '%{?centos:centos}%{!?centos:rhel}%{rhel}').iuscommunity.org/ius-release.rpm \\\\\"\n+fi\n+  echo \" && yum -y install \\\\\"\n+  echo \"    alsa-lib-devel \\\\\"\n+if [ $arch = ppc64le ] ; then\n+  echo \"    automake \\\\\" # required to update make\n+fi\n+  echo \"    bind-utils \\\\\"\n+  echo \"    bison \\\\\"\n+  echo \"    bzip2 \\\\\"\n+  echo \"    ca-certificates \\\\\"\n+  echo \"    cpio \\\\\"\n+  echo \"    cups-devel \\\\\"\n+  echo \"    curl-devel \\\\\" # required by git\n+  echo \"    elfutils-libelf-devel \\\\\"\n+  echo \"    expat-devel \\\\\" # required by git and the xml parser\n+  echo \"    file-devel \\\\\"\n+  echo \"    file-libs \\\\\"\n+  echo \"    flex \\\\\"\n+  echo \"    fontconfig \\\\\"\n+  echo \"    fontconfig-devel \\\\\"\n+  echo \"    freetype-devel \\\\\"\n+  echo \"    gettext \\\\\"\n+  echo \"    gettext-devel \\\\\" # required by git\n+  echo \"    glibc \\\\\"\n+  echo \"    glibc-common \\\\\"\n+  echo \"    glibc-devel \\\\\"\n+  echo \"    gmp-devel \\\\\"\n+  echo \"    lbzip2 \\\\\"\n+  echo \"    libdwarf \\\\\"\n+  echo \"    libdwarf-devel \\\\\"\n+  echo \"    libffi-devel \\\\\"\n+  echo \"    libstdc++-static \\\\\"\n+  echo \"    libX11-devel \\\\\"\n+  echo \"    libXext-devel \\\\\"\n+  echo \"    libXi-devel \\\\\"\n+  echo \"    libXrandr-devel \\\\\"\n+  echo \"    libXrender-devel \\\\\"\n+  echo \"    libXt-devel \\\\\"\n+  echo \"    libXtst-devel \\\\\"\n+  echo \"    make \\\\\"\n+  echo \"    mesa-libGL-devel \\\\\"\n+  echo \"    mpfr-devel \\\\\"\n+  echo \"    ntp \\\\\"\n+  echo \"    numactl-devel \\\\\"\n+  echo \"    openssh-clients \\\\\"\n+  echo \"    openssh-server \\\\\"\n+  echo \"    openssl-devel \\\\\" # required by git, etc.\n+  echo \"    perl-CPAN \\\\\"\n+  echo \"    perl-DBI \\\\\"\n+  echo \"    perl-devel \\\\\"\n+  echo \"    perl-ExtUtils-MakeMaker \\\\\" # required by git\n+  echo \"    perl-GD \\\\\"\n+  echo \"    perl-libwww-perl \\\\\"\n+  echo \"    perl-Time-HiRes \\\\\"\n+if [ $arch = ppc64le ] ; then\n+  echo \"    texinfo \\\\\" # required to update make\n+fi\n+  echo \"    unzip \\\\\"\n+  echo \"    vim \\\\\"\n+  echo \"    wget \\\\\"\n+  echo \"    xorg-x11-server-Xvfb \\\\\"\n+  echo \"    xz \\\\\"\n+  echo \"    zip \\\\\"\n+  echo \"    zlib-devel \\\\\" # required by git, python\n+  echo \" && yum clean all\"\n+  echo \"\"\n+  local autoconf_version=2.69\n+  echo \"# Install autoconf.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O autoconf.tar.gz https://fossies.org/linux/misc/autoconf-$autoconf_version.tar.gz \\\\\"\n+  echo \" && tar -xzf autoconf.tar.gz \\\\\"\n+  echo \" && cd autoconf-$autoconf_version \\\\\"\n+  echo \" && ./configure --build=\\$(rpm --eval %{_host}) \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf autoconf.tar.gz autoconf-$autoconf_version\"\n+  echo \"\"\n+  echo \"# Install gcc-7.5.\"\n+  echo \"RUN cd /usr/local \\\\\"\n+  echo \" && $wget_O gcc-7.tar.xz 'https://ci.adoptopenjdk.net/userContent/gcc/gcc750+ccache.$arch.tar.xz' \\\\\"\n+  echo \" && tar -xJf gcc-7.tar.xz --strip-components=1 \\\\\"\n+  echo \" && ln -sf ../local/bin/gcc-7.5 /usr/bin/gcc \\\\\"\n+  echo \" && ln -sf ../local/bin/g++-7.5 /usr/bin/g++ \\\\\"\n+  echo \" && ln -sf gcc /usr/bin/cc \\\\\"\n+  echo \" && ln -sf g++ /usr/bin/c++ \\\\\"\n+  echo \" && rm -f gcc-7.tar.xz\"\n+  echo \"\"\n+  local ant_version=1.10.5\n+  echo \"# Install ant.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O ant.zip https://archive.apache.org/dist/ant/binaries/apache-ant-$ant_version-bin.zip \\\\\"\n+  echo \" && unzip -q ant.zip -d /opt \\\\\"\n+  echo \" && ln -s apache-ant-$ant_version /opt/ant \\\\\"\n+  echo \" && ln -s /opt/ant/bin/ant /usr/bin/ant \\\\\"\n+  echo \" && $wget_O ant-contrib.tar.gz https://sourceforge.net/projects/ant-contrib/files/ant-contrib/1.0b3/ant-contrib-1.0b3-bin.tar.gz \\\\\"\n+  echo \" && tar -xzf ant-contrib.tar.gz \\\\\"\n+  echo \" && mv ant-contrib/ant-contrib-1.0b3.jar /opt/ant/lib \\\\\"\n+  echo \" && rm -rf ant-contrib ant.zip ant-contrib.tar.gz\"\n+  echo \"\"\n+  local git_version=2.5.3\n+  echo \"# Install git.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O git.tar.gz https://www.kernel.org/pub/software/scm/git/git-$git_version.tar.gz \\\\\"\n+  echo \" && tar -xzf git.tar.gz \\\\\"\n+  echo \" && cd git-$git_version \\\\\"\n+  echo \" && make prefix=/usr/local all \\\\\"\n+  echo \" && make prefix=/usr/local install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf git.tar.gz git-$git_version\"\n+if [ $arch = ppc64le ] ; then\n+  # make 4.2 requires automake 1.15\n+  echo \"\"\n+  local automake_version=1.15\n+  echo \"# Update automake.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O automake.tar.gz http://ftp.gnu.org/gnu/automake/automake-$automake_version.tar.gz \\\\\"\n+  echo \" && tar -xzf automake.tar.gz \\\\\"\n+  echo \" && cd automake-$automake_version \\\\\"\n+  echo \" && ./configure \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf automake.tar.gz automake-$automake_version\"\n+  echo \"\"\n+  local make_version=4.2\n+  echo \"# Update make.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O make.tar.gz https://github.com/mirror/make/archive/$make_version.tar.gz \\\\\"\n+  echo \" && tar -xzf make.tar.gz \\\\\"\n+  echo \" && cd make-$make_version \\\\\"\n+  echo \" && ACLOCAL_PATH=/usr/share/aclocal autoreconf -i \\\\\"\n+  echo \" && ./configure \\\\\"\n+  echo \" && make update \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && ln -s make /usr/local/bin/gmake \\\\\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI5NTIzOQ=="}, "originalCommit": {"oid": "cd8cf76d87ad741dc6f09408196fb89a238d9544"}, "originalPosition": 365}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc1NjE4Mg==", "bodyText": "The test requirements are here https://github.com/eclipse/openj9/blob/master/test/docs/Prerequisites.md", "url": "https://github.com/eclipse-openj9/openj9/pull/9371#discussion_r416756182", "createdAt": "2020-04-28T16:31:37Z", "author": {"login": "pshipton"}, "path": "buildenv/docker/mkdocker.sh", "diffHunk": "@@ -0,0 +1,684 @@\n+#!/bin/bash -\n+\n+print_license() {\n+cat <<- EOF\n+# Copyright (c) 2019, 2020 IBM Corp. and others\n+#\n+# This program and the accompanying materials are made available under\n+# the terms of the Eclipse Public License 2.0 which accompanies this\n+# distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+# or the Apache License, Version 2.0 which accompanies this distribution and\n+# is available at https://www.apache.org/licenses/LICENSE-2.0.\n+#\n+# This Source Code may also be made available under the following\n+# Secondary Licenses when the conditions for such availability set\n+# forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+# General Public License, version 2 with the GNU Classpath\n+# Exception [1] and GNU General Public License, version 2 with the\n+# OpenJDK Assembly Exception [2].\n+#\n+# [1] https://www.gnu.org/software/classpath/license.html\n+# [2] http://openjdk.java.net/legal/assembly-exception.html\n+#\n+# SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+EOF\n+}\n+\n+usage() {\n+  echo \"Usage: $0 [OPTION]...\"\n+  echo \"Generate a Dockerfile for building OpenJ9\"\n+  echo \"\"\n+  echo \"Options:\"\n+  echo \"  --help|-h      print this help, then exit\"\n+  echo \"  --arch=...     specify the processor architecture (default: host architecture)\"\n+  echo \"  --build        build the docker image (overrides '--print')\"\n+  echo \"  --cuda         include CUDA header files\"\n+  echo \"  --dist=...     specify the Linux distribution (e.g. centos, ubuntu)\"\n+  echo \"  --print        write the Dockerfile to stdout (default; overrides '--build')\"\n+  echo \"  --tag=...      specify a name for the docker image (may be repeated, default: none)\"\n+  echo \"  --user=...     specify the user name (default: 'jenkins')\"\n+  echo \"  --version=...  specify the distribution version (e.g. 6.9, 16.04)\"\n+  echo \"\"\n+  local arch=\"$(uname -m)\"\n+  echo \"Supported build patterns on this host ($arch):\"\n+if [ $arch = x86_64 ] ; then\n+  echo \"  bash mkdocker.sh --tag=openj9/cent69 --dist=centos --version=6.9 --build\"\n+fi\n+if [ $arch = x86_64 -o $arch = ppc64le ] ; then\n+  echo \"  bash mkdocker.sh --tag=openj9/cent7  --dist=centos --version=7   --build\"\n+fi\n+  echo \"  bash mkdocker.sh --tag=openj9/ub16   --dist=ubuntu --version=16  --build\"\n+  echo \"  bash mkdocker.sh --tag=openj9/ub18   --dist=ubuntu --version=18  --build\"\n+  echo \"  bash mkdocker.sh --tag=openj9/ub20   --dist=ubuntu --version=20  --build\"\n+  exit 1\n+}\n+\n+# Global configuration variables.\n+action=print\n+arch=\n+cuda=no\n+dist=unspecified\n+tags=()\n+user=jenkins\n+version=unspecified\n+\n+# Frequently used commands.\n+wget_O=\"wget --progress=dot:mega -O\"\n+\n+parse_options() {\n+  for arg in \"$@\" ; do\n+    case \"$arg\" in\n+      -h | --help)\n+        usage\n+        ;;\n+      --arch=*)\n+        arch=\"${arg#*=}\"\n+        ;;\n+      --build)\n+        action=build\n+        ;;\n+      --cuda)\n+        cuda=9.0\n+        ;;\n+      --dist=*)\n+        dist=\"${arg#*=}\"\n+        ;;\n+      --print)\n+        action=print\n+        ;;\n+      --tag=*)\n+        tags+=(\"${arg#*=}\")\n+        ;;\n+      --user=*)\n+        user=\"${arg#*=}\"\n+        ;;\n+      --version=*)\n+        version=\"${arg#*=}\"\n+        ;;\n+      *) # bad option\n+        echo \"Unsupported option: '$arg'\" >&2\n+        usage\n+        ;;\n+    esac\n+  done\n+}\n+\n+validate_options() {\n+  if [ \"x$arch\" = x ] ; then\n+    arch=\"$(uname -m)\"\n+  fi\n+\n+  case \"$arch\" in\n+    ppc64le | s390x | x86_64)\n+      ;;\n+    *)\n+      echo \"Unsupported architecture: '$arch'\" >&2\n+      exit 1\n+      ;;\n+  esac\n+\n+  # Validate the distribution and version.\n+  case \"$dist\" in\n+    centos)\n+      if [ $arch = s390x ] ; then\n+        echo \"CentOS is not supported on $arch\" >&2\n+        exit 1\n+      fi\n+      case $version in\n+        6.9)\n+          if [ $arch = ppc64le ] ; then\n+            echo \"CentOS version 6.9 is not supported on $arch\" >&2\n+            exit 1\n+          fi\n+          ;;\n+        7)\n+          ;;\n+        unspecified)\n+          echo \"Unspecified CentOS version: use '--version' option\" >&2\n+          exit 1\n+          ;;\n+        *)\n+          echo \"Unsupported CentOS version: '$version'\" >&2\n+          exit 1\n+          ;;\n+      esac\n+      ;;\n+    ubuntu)\n+      case $version in\n+        16 | 18 | 20)\n+          version=$version.04\n+          ;;\n+        16.04 | 18.04 | 20.04)\n+          ;;\n+        unspecified)\n+          echo \"Unspecified Ubuntu version: use '--version' option\" >&2\n+          exit 1\n+          ;;\n+        *)\n+          echo \"Unsupported Ubuntu version: '$version'\" >&2\n+          exit 1\n+          ;;\n+      esac\n+      ;;\n+    unspecified)\n+      echo \"Unspecified distribution: use '--dist' option\" >&2\n+      exit 1\n+      ;;\n+    *)\n+      echo \"Unsupported distribution: '$dist'\" >&2\n+      exit 1\n+      ;;\n+  esac\n+\n+  # If CUDA is requested, validate the architecture.\n+  if [ $cuda != no ] ; then\n+    case \"$arch\" in\n+      ppc64le | x86_64)\n+        ;;\n+      *)\n+        echo \"CUDA is not supported on architecture: '$arch'\" >&2\n+        exit 1\n+        ;;\n+    esac\n+  fi\n+}\n+\n+build_cmd() {\n+  local cmd=build\n+  local file=$1\n+  for tag in ${tags[@]} ; do\n+    cmd=\"$cmd --tag $tag\"\n+  done\n+  echo $cmd --file $file .\n+}\n+\n+preamble() {\n+  echo \"\"\n+  echo \"# Generated by: mkdocker.sh $command_line\"\n+  echo \"\"\n+  echo \"# To use this docker file:\"\n+  echo \"# First, copy your public ssh key into authorized_keys.\"\n+  echo \"# Then, in the directory containing the Dockerfile, authorized_keys\"\n+  echo \"# file, and known_hosts file, run:\"\n+  echo \"#   docker $(build_cmd Dockerfile)\"\n+  echo \"#\"\n+if [ ${#tags[@]} -lt 2 ] ; then\n+  echo \"# To start a container based on the resulting image, run this command:\"\n+else\n+  echo \"# To start a container based on the resulting image, run one of these commands:\"\n+fi\n+if [ ${#tags[@]} -eq 0 ] ; then\n+  echo \"#   docker run -it <image>\"\n+else\n+for tag in ${tags[@]} ; do\n+  echo \"#   docker run -it $tag\"\n+done\n+fi\n+  echo \"\"\n+if [ $cuda != no ] ; then\n+  echo \"FROM nvidia/cuda:${cuda}-devel-ubuntu16.04 AS cuda-dev\"\n+  echo \"\"\n+fi\n+  echo \"FROM $dist:$version\"\n+}\n+\n+install_centos_packages() {\n+  echo \"RUN yum -y update \\\\\"\n+if [ $version = 6.9 ] ; then\n+  echo \" && yum -y install https://\\$(rpm -E '%{?centos:centos}%{!?centos:rhel}%{rhel}').iuscommunity.org/ius-release.rpm \\\\\"\n+fi\n+  echo \" && yum -y install \\\\\"\n+  echo \"    alsa-lib-devel \\\\\"\n+if [ $arch = ppc64le ] ; then\n+  echo \"    automake \\\\\" # required to update make\n+fi\n+  echo \"    bind-utils \\\\\"\n+  echo \"    bison \\\\\"\n+  echo \"    bzip2 \\\\\"\n+  echo \"    ca-certificates \\\\\"\n+  echo \"    cpio \\\\\"\n+  echo \"    cups-devel \\\\\"\n+  echo \"    curl-devel \\\\\" # required by git\n+  echo \"    elfutils-libelf-devel \\\\\"\n+  echo \"    expat-devel \\\\\" # required by git and the xml parser\n+  echo \"    file-devel \\\\\"\n+  echo \"    file-libs \\\\\"\n+  echo \"    flex \\\\\"\n+  echo \"    fontconfig \\\\\"\n+  echo \"    fontconfig-devel \\\\\"\n+  echo \"    freetype-devel \\\\\"\n+  echo \"    gettext \\\\\"\n+  echo \"    gettext-devel \\\\\" # required by git\n+  echo \"    glibc \\\\\"\n+  echo \"    glibc-common \\\\\"\n+  echo \"    glibc-devel \\\\\"\n+  echo \"    gmp-devel \\\\\"\n+  echo \"    lbzip2 \\\\\"\n+  echo \"    libdwarf \\\\\"\n+  echo \"    libdwarf-devel \\\\\"\n+  echo \"    libffi-devel \\\\\"\n+  echo \"    libstdc++-static \\\\\"\n+  echo \"    libX11-devel \\\\\"\n+  echo \"    libXext-devel \\\\\"\n+  echo \"    libXi-devel \\\\\"\n+  echo \"    libXrandr-devel \\\\\"\n+  echo \"    libXrender-devel \\\\\"\n+  echo \"    libXt-devel \\\\\"\n+  echo \"    libXtst-devel \\\\\"\n+  echo \"    make \\\\\"\n+  echo \"    mesa-libGL-devel \\\\\"\n+  echo \"    mpfr-devel \\\\\"\n+  echo \"    ntp \\\\\"\n+  echo \"    numactl-devel \\\\\"\n+  echo \"    openssh-clients \\\\\"\n+  echo \"    openssh-server \\\\\"\n+  echo \"    openssl-devel \\\\\" # required by git, etc.\n+  echo \"    perl-CPAN \\\\\"\n+  echo \"    perl-DBI \\\\\"\n+  echo \"    perl-devel \\\\\"\n+  echo \"    perl-ExtUtils-MakeMaker \\\\\" # required by git\n+  echo \"    perl-GD \\\\\"\n+  echo \"    perl-libwww-perl \\\\\"\n+  echo \"    perl-Time-HiRes \\\\\"\n+if [ $arch = ppc64le ] ; then\n+  echo \"    texinfo \\\\\" # required to update make\n+fi\n+  echo \"    unzip \\\\\"\n+  echo \"    vim \\\\\"\n+  echo \"    wget \\\\\"\n+  echo \"    xorg-x11-server-Xvfb \\\\\"\n+  echo \"    xz \\\\\"\n+  echo \"    zip \\\\\"\n+  echo \"    zlib-devel \\\\\" # required by git, python\n+  echo \" && yum clean all\"\n+  echo \"\"\n+  local autoconf_version=2.69\n+  echo \"# Install autoconf.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O autoconf.tar.gz https://fossies.org/linux/misc/autoconf-$autoconf_version.tar.gz \\\\\"\n+  echo \" && tar -xzf autoconf.tar.gz \\\\\"\n+  echo \" && cd autoconf-$autoconf_version \\\\\"\n+  echo \" && ./configure --build=\\$(rpm --eval %{_host}) \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf autoconf.tar.gz autoconf-$autoconf_version\"\n+  echo \"\"\n+  echo \"# Install gcc-7.5.\"\n+  echo \"RUN cd /usr/local \\\\\"\n+  echo \" && $wget_O gcc-7.tar.xz 'https://ci.adoptopenjdk.net/userContent/gcc/gcc750+ccache.$arch.tar.xz' \\\\\"\n+  echo \" && tar -xJf gcc-7.tar.xz --strip-components=1 \\\\\"\n+  echo \" && ln -sf ../local/bin/gcc-7.5 /usr/bin/gcc \\\\\"\n+  echo \" && ln -sf ../local/bin/g++-7.5 /usr/bin/g++ \\\\\"\n+  echo \" && ln -sf gcc /usr/bin/cc \\\\\"\n+  echo \" && ln -sf g++ /usr/bin/c++ \\\\\"\n+  echo \" && rm -f gcc-7.tar.xz\"\n+  echo \"\"\n+  local ant_version=1.10.5\n+  echo \"# Install ant.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O ant.zip https://archive.apache.org/dist/ant/binaries/apache-ant-$ant_version-bin.zip \\\\\"\n+  echo \" && unzip -q ant.zip -d /opt \\\\\"\n+  echo \" && ln -s apache-ant-$ant_version /opt/ant \\\\\"\n+  echo \" && ln -s /opt/ant/bin/ant /usr/bin/ant \\\\\"\n+  echo \" && $wget_O ant-contrib.tar.gz https://sourceforge.net/projects/ant-contrib/files/ant-contrib/1.0b3/ant-contrib-1.0b3-bin.tar.gz \\\\\"\n+  echo \" && tar -xzf ant-contrib.tar.gz \\\\\"\n+  echo \" && mv ant-contrib/ant-contrib-1.0b3.jar /opt/ant/lib \\\\\"\n+  echo \" && rm -rf ant-contrib ant.zip ant-contrib.tar.gz\"\n+  echo \"\"\n+  local git_version=2.5.3\n+  echo \"# Install git.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O git.tar.gz https://www.kernel.org/pub/software/scm/git/git-$git_version.tar.gz \\\\\"\n+  echo \" && tar -xzf git.tar.gz \\\\\"\n+  echo \" && cd git-$git_version \\\\\"\n+  echo \" && make prefix=/usr/local all \\\\\"\n+  echo \" && make prefix=/usr/local install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf git.tar.gz git-$git_version\"\n+if [ $arch = ppc64le ] ; then\n+  # make 4.2 requires automake 1.15\n+  echo \"\"\n+  local automake_version=1.15\n+  echo \"# Update automake.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O automake.tar.gz http://ftp.gnu.org/gnu/automake/automake-$automake_version.tar.gz \\\\\"\n+  echo \" && tar -xzf automake.tar.gz \\\\\"\n+  echo \" && cd automake-$automake_version \\\\\"\n+  echo \" && ./configure \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf automake.tar.gz automake-$automake_version\"\n+  echo \"\"\n+  local make_version=4.2\n+  echo \"# Update make.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O make.tar.gz https://github.com/mirror/make/archive/$make_version.tar.gz \\\\\"\n+  echo \" && tar -xzf make.tar.gz \\\\\"\n+  echo \" && cd make-$make_version \\\\\"\n+  echo \" && ACLOCAL_PATH=/usr/share/aclocal autoreconf -i \\\\\"\n+  echo \" && ./configure \\\\\"\n+  echo \" && make update \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && ln -s make /usr/local/bin/gmake \\\\\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI5NTIzOQ=="}, "originalCommit": {"oid": "cd8cf76d87ad741dc6f09408196fb89a238d9544"}, "originalPosition": 365}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgzNDczNw==", "bodyText": "Updated to install make 4.1 on CentOS for x86_64.", "url": "https://github.com/eclipse-openj9/openj9/pull/9371#discussion_r416834737", "createdAt": "2020-04-28T18:32:47Z", "author": {"login": "keithc-ca"}, "path": "buildenv/docker/mkdocker.sh", "diffHunk": "@@ -0,0 +1,684 @@\n+#!/bin/bash -\n+\n+print_license() {\n+cat <<- EOF\n+# Copyright (c) 2019, 2020 IBM Corp. and others\n+#\n+# This program and the accompanying materials are made available under\n+# the terms of the Eclipse Public License 2.0 which accompanies this\n+# distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+# or the Apache License, Version 2.0 which accompanies this distribution and\n+# is available at https://www.apache.org/licenses/LICENSE-2.0.\n+#\n+# This Source Code may also be made available under the following\n+# Secondary Licenses when the conditions for such availability set\n+# forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+# General Public License, version 2 with the GNU Classpath\n+# Exception [1] and GNU General Public License, version 2 with the\n+# OpenJDK Assembly Exception [2].\n+#\n+# [1] https://www.gnu.org/software/classpath/license.html\n+# [2] http://openjdk.java.net/legal/assembly-exception.html\n+#\n+# SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+EOF\n+}\n+\n+usage() {\n+  echo \"Usage: $0 [OPTION]...\"\n+  echo \"Generate a Dockerfile for building OpenJ9\"\n+  echo \"\"\n+  echo \"Options:\"\n+  echo \"  --help|-h      print this help, then exit\"\n+  echo \"  --arch=...     specify the processor architecture (default: host architecture)\"\n+  echo \"  --build        build the docker image (overrides '--print')\"\n+  echo \"  --cuda         include CUDA header files\"\n+  echo \"  --dist=...     specify the Linux distribution (e.g. centos, ubuntu)\"\n+  echo \"  --print        write the Dockerfile to stdout (default; overrides '--build')\"\n+  echo \"  --tag=...      specify a name for the docker image (may be repeated, default: none)\"\n+  echo \"  --user=...     specify the user name (default: 'jenkins')\"\n+  echo \"  --version=...  specify the distribution version (e.g. 6.9, 16.04)\"\n+  echo \"\"\n+  local arch=\"$(uname -m)\"\n+  echo \"Supported build patterns on this host ($arch):\"\n+if [ $arch = x86_64 ] ; then\n+  echo \"  bash mkdocker.sh --tag=openj9/cent69 --dist=centos --version=6.9 --build\"\n+fi\n+if [ $arch = x86_64 -o $arch = ppc64le ] ; then\n+  echo \"  bash mkdocker.sh --tag=openj9/cent7  --dist=centos --version=7   --build\"\n+fi\n+  echo \"  bash mkdocker.sh --tag=openj9/ub16   --dist=ubuntu --version=16  --build\"\n+  echo \"  bash mkdocker.sh --tag=openj9/ub18   --dist=ubuntu --version=18  --build\"\n+  echo \"  bash mkdocker.sh --tag=openj9/ub20   --dist=ubuntu --version=20  --build\"\n+  exit 1\n+}\n+\n+# Global configuration variables.\n+action=print\n+arch=\n+cuda=no\n+dist=unspecified\n+tags=()\n+user=jenkins\n+version=unspecified\n+\n+# Frequently used commands.\n+wget_O=\"wget --progress=dot:mega -O\"\n+\n+parse_options() {\n+  for arg in \"$@\" ; do\n+    case \"$arg\" in\n+      -h | --help)\n+        usage\n+        ;;\n+      --arch=*)\n+        arch=\"${arg#*=}\"\n+        ;;\n+      --build)\n+        action=build\n+        ;;\n+      --cuda)\n+        cuda=9.0\n+        ;;\n+      --dist=*)\n+        dist=\"${arg#*=}\"\n+        ;;\n+      --print)\n+        action=print\n+        ;;\n+      --tag=*)\n+        tags+=(\"${arg#*=}\")\n+        ;;\n+      --user=*)\n+        user=\"${arg#*=}\"\n+        ;;\n+      --version=*)\n+        version=\"${arg#*=}\"\n+        ;;\n+      *) # bad option\n+        echo \"Unsupported option: '$arg'\" >&2\n+        usage\n+        ;;\n+    esac\n+  done\n+}\n+\n+validate_options() {\n+  if [ \"x$arch\" = x ] ; then\n+    arch=\"$(uname -m)\"\n+  fi\n+\n+  case \"$arch\" in\n+    ppc64le | s390x | x86_64)\n+      ;;\n+    *)\n+      echo \"Unsupported architecture: '$arch'\" >&2\n+      exit 1\n+      ;;\n+  esac\n+\n+  # Validate the distribution and version.\n+  case \"$dist\" in\n+    centos)\n+      if [ $arch = s390x ] ; then\n+        echo \"CentOS is not supported on $arch\" >&2\n+        exit 1\n+      fi\n+      case $version in\n+        6.9)\n+          if [ $arch = ppc64le ] ; then\n+            echo \"CentOS version 6.9 is not supported on $arch\" >&2\n+            exit 1\n+          fi\n+          ;;\n+        7)\n+          ;;\n+        unspecified)\n+          echo \"Unspecified CentOS version: use '--version' option\" >&2\n+          exit 1\n+          ;;\n+        *)\n+          echo \"Unsupported CentOS version: '$version'\" >&2\n+          exit 1\n+          ;;\n+      esac\n+      ;;\n+    ubuntu)\n+      case $version in\n+        16 | 18 | 20)\n+          version=$version.04\n+          ;;\n+        16.04 | 18.04 | 20.04)\n+          ;;\n+        unspecified)\n+          echo \"Unspecified Ubuntu version: use '--version' option\" >&2\n+          exit 1\n+          ;;\n+        *)\n+          echo \"Unsupported Ubuntu version: '$version'\" >&2\n+          exit 1\n+          ;;\n+      esac\n+      ;;\n+    unspecified)\n+      echo \"Unspecified distribution: use '--dist' option\" >&2\n+      exit 1\n+      ;;\n+    *)\n+      echo \"Unsupported distribution: '$dist'\" >&2\n+      exit 1\n+      ;;\n+  esac\n+\n+  # If CUDA is requested, validate the architecture.\n+  if [ $cuda != no ] ; then\n+    case \"$arch\" in\n+      ppc64le | x86_64)\n+        ;;\n+      *)\n+        echo \"CUDA is not supported on architecture: '$arch'\" >&2\n+        exit 1\n+        ;;\n+    esac\n+  fi\n+}\n+\n+build_cmd() {\n+  local cmd=build\n+  local file=$1\n+  for tag in ${tags[@]} ; do\n+    cmd=\"$cmd --tag $tag\"\n+  done\n+  echo $cmd --file $file .\n+}\n+\n+preamble() {\n+  echo \"\"\n+  echo \"# Generated by: mkdocker.sh $command_line\"\n+  echo \"\"\n+  echo \"# To use this docker file:\"\n+  echo \"# First, copy your public ssh key into authorized_keys.\"\n+  echo \"# Then, in the directory containing the Dockerfile, authorized_keys\"\n+  echo \"# file, and known_hosts file, run:\"\n+  echo \"#   docker $(build_cmd Dockerfile)\"\n+  echo \"#\"\n+if [ ${#tags[@]} -lt 2 ] ; then\n+  echo \"# To start a container based on the resulting image, run this command:\"\n+else\n+  echo \"# To start a container based on the resulting image, run one of these commands:\"\n+fi\n+if [ ${#tags[@]} -eq 0 ] ; then\n+  echo \"#   docker run -it <image>\"\n+else\n+for tag in ${tags[@]} ; do\n+  echo \"#   docker run -it $tag\"\n+done\n+fi\n+  echo \"\"\n+if [ $cuda != no ] ; then\n+  echo \"FROM nvidia/cuda:${cuda}-devel-ubuntu16.04 AS cuda-dev\"\n+  echo \"\"\n+fi\n+  echo \"FROM $dist:$version\"\n+}\n+\n+install_centos_packages() {\n+  echo \"RUN yum -y update \\\\\"\n+if [ $version = 6.9 ] ; then\n+  echo \" && yum -y install https://\\$(rpm -E '%{?centos:centos}%{!?centos:rhel}%{rhel}').iuscommunity.org/ius-release.rpm \\\\\"\n+fi\n+  echo \" && yum -y install \\\\\"\n+  echo \"    alsa-lib-devel \\\\\"\n+if [ $arch = ppc64le ] ; then\n+  echo \"    automake \\\\\" # required to update make\n+fi\n+  echo \"    bind-utils \\\\\"\n+  echo \"    bison \\\\\"\n+  echo \"    bzip2 \\\\\"\n+  echo \"    ca-certificates \\\\\"\n+  echo \"    cpio \\\\\"\n+  echo \"    cups-devel \\\\\"\n+  echo \"    curl-devel \\\\\" # required by git\n+  echo \"    elfutils-libelf-devel \\\\\"\n+  echo \"    expat-devel \\\\\" # required by git and the xml parser\n+  echo \"    file-devel \\\\\"\n+  echo \"    file-libs \\\\\"\n+  echo \"    flex \\\\\"\n+  echo \"    fontconfig \\\\\"\n+  echo \"    fontconfig-devel \\\\\"\n+  echo \"    freetype-devel \\\\\"\n+  echo \"    gettext \\\\\"\n+  echo \"    gettext-devel \\\\\" # required by git\n+  echo \"    glibc \\\\\"\n+  echo \"    glibc-common \\\\\"\n+  echo \"    glibc-devel \\\\\"\n+  echo \"    gmp-devel \\\\\"\n+  echo \"    lbzip2 \\\\\"\n+  echo \"    libdwarf \\\\\"\n+  echo \"    libdwarf-devel \\\\\"\n+  echo \"    libffi-devel \\\\\"\n+  echo \"    libstdc++-static \\\\\"\n+  echo \"    libX11-devel \\\\\"\n+  echo \"    libXext-devel \\\\\"\n+  echo \"    libXi-devel \\\\\"\n+  echo \"    libXrandr-devel \\\\\"\n+  echo \"    libXrender-devel \\\\\"\n+  echo \"    libXt-devel \\\\\"\n+  echo \"    libXtst-devel \\\\\"\n+  echo \"    make \\\\\"\n+  echo \"    mesa-libGL-devel \\\\\"\n+  echo \"    mpfr-devel \\\\\"\n+  echo \"    ntp \\\\\"\n+  echo \"    numactl-devel \\\\\"\n+  echo \"    openssh-clients \\\\\"\n+  echo \"    openssh-server \\\\\"\n+  echo \"    openssl-devel \\\\\" # required by git, etc.\n+  echo \"    perl-CPAN \\\\\"\n+  echo \"    perl-DBI \\\\\"\n+  echo \"    perl-devel \\\\\"\n+  echo \"    perl-ExtUtils-MakeMaker \\\\\" # required by git\n+  echo \"    perl-GD \\\\\"\n+  echo \"    perl-libwww-perl \\\\\"\n+  echo \"    perl-Time-HiRes \\\\\"\n+if [ $arch = ppc64le ] ; then\n+  echo \"    texinfo \\\\\" # required to update make\n+fi\n+  echo \"    unzip \\\\\"\n+  echo \"    vim \\\\\"\n+  echo \"    wget \\\\\"\n+  echo \"    xorg-x11-server-Xvfb \\\\\"\n+  echo \"    xz \\\\\"\n+  echo \"    zip \\\\\"\n+  echo \"    zlib-devel \\\\\" # required by git, python\n+  echo \" && yum clean all\"\n+  echo \"\"\n+  local autoconf_version=2.69\n+  echo \"# Install autoconf.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O autoconf.tar.gz https://fossies.org/linux/misc/autoconf-$autoconf_version.tar.gz \\\\\"\n+  echo \" && tar -xzf autoconf.tar.gz \\\\\"\n+  echo \" && cd autoconf-$autoconf_version \\\\\"\n+  echo \" && ./configure --build=\\$(rpm --eval %{_host}) \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf autoconf.tar.gz autoconf-$autoconf_version\"\n+  echo \"\"\n+  echo \"# Install gcc-7.5.\"\n+  echo \"RUN cd /usr/local \\\\\"\n+  echo \" && $wget_O gcc-7.tar.xz 'https://ci.adoptopenjdk.net/userContent/gcc/gcc750+ccache.$arch.tar.xz' \\\\\"\n+  echo \" && tar -xJf gcc-7.tar.xz --strip-components=1 \\\\\"\n+  echo \" && ln -sf ../local/bin/gcc-7.5 /usr/bin/gcc \\\\\"\n+  echo \" && ln -sf ../local/bin/g++-7.5 /usr/bin/g++ \\\\\"\n+  echo \" && ln -sf gcc /usr/bin/cc \\\\\"\n+  echo \" && ln -sf g++ /usr/bin/c++ \\\\\"\n+  echo \" && rm -f gcc-7.tar.xz\"\n+  echo \"\"\n+  local ant_version=1.10.5\n+  echo \"# Install ant.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O ant.zip https://archive.apache.org/dist/ant/binaries/apache-ant-$ant_version-bin.zip \\\\\"\n+  echo \" && unzip -q ant.zip -d /opt \\\\\"\n+  echo \" && ln -s apache-ant-$ant_version /opt/ant \\\\\"\n+  echo \" && ln -s /opt/ant/bin/ant /usr/bin/ant \\\\\"\n+  echo \" && $wget_O ant-contrib.tar.gz https://sourceforge.net/projects/ant-contrib/files/ant-contrib/1.0b3/ant-contrib-1.0b3-bin.tar.gz \\\\\"\n+  echo \" && tar -xzf ant-contrib.tar.gz \\\\\"\n+  echo \" && mv ant-contrib/ant-contrib-1.0b3.jar /opt/ant/lib \\\\\"\n+  echo \" && rm -rf ant-contrib ant.zip ant-contrib.tar.gz\"\n+  echo \"\"\n+  local git_version=2.5.3\n+  echo \"# Install git.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O git.tar.gz https://www.kernel.org/pub/software/scm/git/git-$git_version.tar.gz \\\\\"\n+  echo \" && tar -xzf git.tar.gz \\\\\"\n+  echo \" && cd git-$git_version \\\\\"\n+  echo \" && make prefix=/usr/local all \\\\\"\n+  echo \" && make prefix=/usr/local install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf git.tar.gz git-$git_version\"\n+if [ $arch = ppc64le ] ; then\n+  # make 4.2 requires automake 1.15\n+  echo \"\"\n+  local automake_version=1.15\n+  echo \"# Update automake.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O automake.tar.gz http://ftp.gnu.org/gnu/automake/automake-$automake_version.tar.gz \\\\\"\n+  echo \" && tar -xzf automake.tar.gz \\\\\"\n+  echo \" && cd automake-$automake_version \\\\\"\n+  echo \" && ./configure \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf automake.tar.gz automake-$automake_version\"\n+  echo \"\"\n+  local make_version=4.2\n+  echo \"# Update make.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O make.tar.gz https://github.com/mirror/make/archive/$make_version.tar.gz \\\\\"\n+  echo \" && tar -xzf make.tar.gz \\\\\"\n+  echo \" && cd make-$make_version \\\\\"\n+  echo \" && ACLOCAL_PATH=/usr/share/aclocal autoreconf -i \\\\\"\n+  echo \" && ./configure \\\\\"\n+  echo \" && make update \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && ln -s make /usr/local/bin/gmake \\\\\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI5NTIzOQ=="}, "originalCommit": {"oid": "cd8cf76d87ad741dc6f09408196fb89a238d9544"}, "originalPosition": 365}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4OTk0NjAyOnYy", "diffSide": "RIGHT", "path": "buildenv/jenkins/docker-slaves/jenkinsfile-build-container.groovy", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwMzoxNzoxNFrOGNAsjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwMzozNDozMFrOGNuoeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI5NjA3OQ==", "bodyText": "This job takes 2 params, ARCH and OS, and produces a \"build & test\" or a \"test only\" docker image matching the params. This change ignores the OS param and forces the image to be a build & test container matching the OS we build on. The resulting image could be tagged and uploaded incorrectly. We either need to keep supporting test only images by taking the OS param into account or change the build so it only does build & test containers and remove the OS param. The latter would also require an update to the readme.", "url": "https://github.com/eclipse-openj9/openj9/pull/9371#discussion_r416296079", "createdAt": "2020-04-28T03:17:14Z", "author": {"login": "AdamBrousseau"}, "path": "buildenv/jenkins/docker-slaves/jenkinsfile-build-container.groovy", "diffHunk": "@@ -63,17 +63,23 @@ timeout(time: 5, unit: 'HOURS') {\n                 }\n                 stage(\"Build\") {\n                     if(params.ghprbPullId) {\n-                        TAGS = \"-t ${REPOSITORY}:PR${ghprbPullId}\"\n+                        TAGS = \"--tag=${REPOSITORY}:PR${ghprbPullId}\"\n                     } else {\n-                        TAGS = \"-t ${REPOSITORY}:${BUILD_NUMBER} -t ${REPOSITORY}:latest\"\n+                        TAGS = \"--tag=${REPOSITORY}:${BUILD_NUMBER} --tag=${REPOSITORY}:latest\"\n                     }\n-                    dir(\"buildenv/jenkins/docker-slaves/${ARCH}/${OS}\") {\n+                    dir(\"buildenv/docker\") {\n                         sh \"cp ${WORKSPACE}/buildenv/jenkins/authorized_keys ./\"\n-                        sh \"touch ./known_hosts\"\n-                        if(env.KNOWN_HOSTS){\n-                            sh \"ssh-keyscan ${KNOWN_HOSTS} >> ./known_hosts\"\n+                        sh \"touch known_hosts\"\n+                        if(env.KNOWN_HOSTS) {\n+                            sh \"ssh-keyscan ${KNOWN_HOSTS} >> known_hosts\"\n+                        }\n+                        if(${ARCH} == \"ppc64le\") {\n+                            sh \"bash mkdocker.sh --build --dist=centos --version=7 ${TAGS}\"\n+                        } else if(${ARCH} == \"s390x\") {\n+                            sh \"bash mkdocker.sh --build --dist=ubuntu --version=16.04 ${TAGS}\"\n+                        } else if(${ARCH} == \"x86\") {\n+                            sh \"bash mkdocker.sh --build --dist=centos --version=6.9 ${TAGS}\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd8cf76d87ad741dc6f09408196fb89a238d9544"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU5NjA4MQ==", "bodyText": "How would an x86_64 host, say, build and image for ppc64le? I don't see how it makes sense to expect to be able to do cross-platform builds. On the other hand, if we only wanted to print a Dockerfile for a different OS, that's fine, but I don't think that was what this was trying to do.\nI think test-only images make sense to verify that none of the build requirements become necessary to use a VM.", "url": "https://github.com/eclipse-openj9/openj9/pull/9371#discussion_r416596081", "createdAt": "2020-04-28T13:05:52Z", "author": {"login": "keithc-ca"}, "path": "buildenv/jenkins/docker-slaves/jenkinsfile-build-container.groovy", "diffHunk": "@@ -63,17 +63,23 @@ timeout(time: 5, unit: 'HOURS') {\n                 }\n                 stage(\"Build\") {\n                     if(params.ghprbPullId) {\n-                        TAGS = \"-t ${REPOSITORY}:PR${ghprbPullId}\"\n+                        TAGS = \"--tag=${REPOSITORY}:PR${ghprbPullId}\"\n                     } else {\n-                        TAGS = \"-t ${REPOSITORY}:${BUILD_NUMBER} -t ${REPOSITORY}:latest\"\n+                        TAGS = \"--tag=${REPOSITORY}:${BUILD_NUMBER} --tag=${REPOSITORY}:latest\"\n                     }\n-                    dir(\"buildenv/jenkins/docker-slaves/${ARCH}/${OS}\") {\n+                    dir(\"buildenv/docker\") {\n                         sh \"cp ${WORKSPACE}/buildenv/jenkins/authorized_keys ./\"\n-                        sh \"touch ./known_hosts\"\n-                        if(env.KNOWN_HOSTS){\n-                            sh \"ssh-keyscan ${KNOWN_HOSTS} >> ./known_hosts\"\n+                        sh \"touch known_hosts\"\n+                        if(env.KNOWN_HOSTS) {\n+                            sh \"ssh-keyscan ${KNOWN_HOSTS} >> known_hosts\"\n+                        }\n+                        if(${ARCH} == \"ppc64le\") {\n+                            sh \"bash mkdocker.sh --build --dist=centos --version=7 ${TAGS}\"\n+                        } else if(${ARCH} == \"s390x\") {\n+                            sh \"bash mkdocker.sh --build --dist=ubuntu --version=16.04 ${TAGS}\"\n+                        } else if(${ARCH} == \"x86\") {\n+                            sh \"bash mkdocker.sh --build --dist=centos --version=6.9 ${TAGS}\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI5NjA3OQ=="}, "originalCommit": {"oid": "cd8cf76d87ad741dc6f09408196fb89a238d9544"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYyNDMxOQ==", "bodyText": "Perhaps I was too hasty in my reply above. Do we need to build an image for any of the existing ARCH/OS combinations? If so, I can update this file so it matches the old behavior.\nppc64le/centos7\nppc64le/ubuntu16\nppc64le/ubuntu18\ns390x/ubuntu16\ns390x/ubuntu18\nx86/centos6.9\nx86/ubuntu16\nx86/ubuntu18", "url": "https://github.com/eclipse-openj9/openj9/pull/9371#discussion_r416624319", "createdAt": "2020-04-28T13:44:01Z", "author": {"login": "keithc-ca"}, "path": "buildenv/jenkins/docker-slaves/jenkinsfile-build-container.groovy", "diffHunk": "@@ -63,17 +63,23 @@ timeout(time: 5, unit: 'HOURS') {\n                 }\n                 stage(\"Build\") {\n                     if(params.ghprbPullId) {\n-                        TAGS = \"-t ${REPOSITORY}:PR${ghprbPullId}\"\n+                        TAGS = \"--tag=${REPOSITORY}:PR${ghprbPullId}\"\n                     } else {\n-                        TAGS = \"-t ${REPOSITORY}:${BUILD_NUMBER} -t ${REPOSITORY}:latest\"\n+                        TAGS = \"--tag=${REPOSITORY}:${BUILD_NUMBER} --tag=${REPOSITORY}:latest\"\n                     }\n-                    dir(\"buildenv/jenkins/docker-slaves/${ARCH}/${OS}\") {\n+                    dir(\"buildenv/docker\") {\n                         sh \"cp ${WORKSPACE}/buildenv/jenkins/authorized_keys ./\"\n-                        sh \"touch ./known_hosts\"\n-                        if(env.KNOWN_HOSTS){\n-                            sh \"ssh-keyscan ${KNOWN_HOSTS} >> ./known_hosts\"\n+                        sh \"touch known_hosts\"\n+                        if(env.KNOWN_HOSTS) {\n+                            sh \"ssh-keyscan ${KNOWN_HOSTS} >> known_hosts\"\n+                        }\n+                        if(${ARCH} == \"ppc64le\") {\n+                            sh \"bash mkdocker.sh --build --dist=centos --version=7 ${TAGS}\"\n+                        } else if(${ARCH} == \"s390x\") {\n+                            sh \"bash mkdocker.sh --build --dist=ubuntu --version=16.04 ${TAGS}\"\n+                        } else if(${ARCH} == \"x86\") {\n+                            sh \"bash mkdocker.sh --build --dist=centos --version=6.9 ${TAGS}\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI5NjA3OQ=="}, "originalCommit": {"oid": "cd8cf76d87ad741dc6f09408196fb89a238d9544"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjY0ODk5OA==", "bodyText": "I've updated the script to support the expanded set of combinations handled by mkdocker.sh.", "url": "https://github.com/eclipse-openj9/openj9/pull/9371#discussion_r416648998", "createdAt": "2020-04-28T14:15:33Z", "author": {"login": "keithc-ca"}, "path": "buildenv/jenkins/docker-slaves/jenkinsfile-build-container.groovy", "diffHunk": "@@ -63,17 +63,23 @@ timeout(time: 5, unit: 'HOURS') {\n                 }\n                 stage(\"Build\") {\n                     if(params.ghprbPullId) {\n-                        TAGS = \"-t ${REPOSITORY}:PR${ghprbPullId}\"\n+                        TAGS = \"--tag=${REPOSITORY}:PR${ghprbPullId}\"\n                     } else {\n-                        TAGS = \"-t ${REPOSITORY}:${BUILD_NUMBER} -t ${REPOSITORY}:latest\"\n+                        TAGS = \"--tag=${REPOSITORY}:${BUILD_NUMBER} --tag=${REPOSITORY}:latest\"\n                     }\n-                    dir(\"buildenv/jenkins/docker-slaves/${ARCH}/${OS}\") {\n+                    dir(\"buildenv/docker\") {\n                         sh \"cp ${WORKSPACE}/buildenv/jenkins/authorized_keys ./\"\n-                        sh \"touch ./known_hosts\"\n-                        if(env.KNOWN_HOSTS){\n-                            sh \"ssh-keyscan ${KNOWN_HOSTS} >> ./known_hosts\"\n+                        sh \"touch known_hosts\"\n+                        if(env.KNOWN_HOSTS) {\n+                            sh \"ssh-keyscan ${KNOWN_HOSTS} >> known_hosts\"\n+                        }\n+                        if(${ARCH} == \"ppc64le\") {\n+                            sh \"bash mkdocker.sh --build --dist=centos --version=7 ${TAGS}\"\n+                        } else if(${ARCH} == \"s390x\") {\n+                            sh \"bash mkdocker.sh --build --dist=ubuntu --version=16.04 ${TAGS}\"\n+                        } else if(${ARCH} == \"x86\") {\n+                            sh \"bash mkdocker.sh --build --dist=centos --version=6.9 ${TAGS}\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI5NjA3OQ=="}, "originalCommit": {"oid": "cd8cf76d87ad741dc6f09408196fb89a238d9544"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA0ODY5Ng==", "bodyText": "Great thanks. Looks like there's no notion of test-only at this point. Which I guess is more user/developer friendly. We are not using the existing images at the moment (anymore) but I would like to re-enable them. We may only do 1 for each arch to start in order to limit our risk for stability issues.", "url": "https://github.com/eclipse-openj9/openj9/pull/9371#discussion_r417048696", "createdAt": "2020-04-29T03:34:30Z", "author": {"login": "AdamBrousseau"}, "path": "buildenv/jenkins/docker-slaves/jenkinsfile-build-container.groovy", "diffHunk": "@@ -63,17 +63,23 @@ timeout(time: 5, unit: 'HOURS') {\n                 }\n                 stage(\"Build\") {\n                     if(params.ghprbPullId) {\n-                        TAGS = \"-t ${REPOSITORY}:PR${ghprbPullId}\"\n+                        TAGS = \"--tag=${REPOSITORY}:PR${ghprbPullId}\"\n                     } else {\n-                        TAGS = \"-t ${REPOSITORY}:${BUILD_NUMBER} -t ${REPOSITORY}:latest\"\n+                        TAGS = \"--tag=${REPOSITORY}:${BUILD_NUMBER} --tag=${REPOSITORY}:latest\"\n                     }\n-                    dir(\"buildenv/jenkins/docker-slaves/${ARCH}/${OS}\") {\n+                    dir(\"buildenv/docker\") {\n                         sh \"cp ${WORKSPACE}/buildenv/jenkins/authorized_keys ./\"\n-                        sh \"touch ./known_hosts\"\n-                        if(env.KNOWN_HOSTS){\n-                            sh \"ssh-keyscan ${KNOWN_HOSTS} >> ./known_hosts\"\n+                        sh \"touch known_hosts\"\n+                        if(env.KNOWN_HOSTS) {\n+                            sh \"ssh-keyscan ${KNOWN_HOSTS} >> known_hosts\"\n+                        }\n+                        if(${ARCH} == \"ppc64le\") {\n+                            sh \"bash mkdocker.sh --build --dist=centos --version=7 ${TAGS}\"\n+                        } else if(${ARCH} == \"s390x\") {\n+                            sh \"bash mkdocker.sh --build --dist=ubuntu --version=16.04 ${TAGS}\"\n+                        } else if(${ARCH} == \"x86\") {\n+                            sh \"bash mkdocker.sh --build --dist=centos --version=6.9 ${TAGS}\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI5NjA3OQ=="}, "originalCommit": {"oid": "cd8cf76d87ad741dc6f09408196fb89a238d9544"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4OTk4ODYzOnYy", "diffSide": "RIGHT", "path": "buildenv/docker/mkdocker.sh", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwMzozNTo1MVrOGNBC7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMzowNzoyMFrOGNTElw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjMwMTgwNg==", "bodyText": "Does this mean if we want cuda installed we have to run ub16?", "url": "https://github.com/eclipse-openj9/openj9/pull/9371#discussion_r416301806", "createdAt": "2020-04-28T03:35:51Z", "author": {"login": "AdamBrousseau"}, "path": "buildenv/docker/mkdocker.sh", "diffHunk": "@@ -0,0 +1,684 @@\n+#!/bin/bash -\n+\n+print_license() {\n+cat <<- EOF\n+# Copyright (c) 2019, 2020 IBM Corp. and others\n+#\n+# This program and the accompanying materials are made available under\n+# the terms of the Eclipse Public License 2.0 which accompanies this\n+# distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+# or the Apache License, Version 2.0 which accompanies this distribution and\n+# is available at https://www.apache.org/licenses/LICENSE-2.0.\n+#\n+# This Source Code may also be made available under the following\n+# Secondary Licenses when the conditions for such availability set\n+# forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+# General Public License, version 2 with the GNU Classpath\n+# Exception [1] and GNU General Public License, version 2 with the\n+# OpenJDK Assembly Exception [2].\n+#\n+# [1] https://www.gnu.org/software/classpath/license.html\n+# [2] http://openjdk.java.net/legal/assembly-exception.html\n+#\n+# SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+EOF\n+}\n+\n+usage() {\n+  echo \"Usage: $0 [OPTION]...\"\n+  echo \"Generate a Dockerfile for building OpenJ9\"\n+  echo \"\"\n+  echo \"Options:\"\n+  echo \"  --help|-h      print this help, then exit\"\n+  echo \"  --arch=...     specify the processor architecture (default: host architecture)\"\n+  echo \"  --build        build the docker image (overrides '--print')\"\n+  echo \"  --cuda         include CUDA header files\"\n+  echo \"  --dist=...     specify the Linux distribution (e.g. centos, ubuntu)\"\n+  echo \"  --print        write the Dockerfile to stdout (default; overrides '--build')\"\n+  echo \"  --tag=...      specify a name for the docker image (may be repeated, default: none)\"\n+  echo \"  --user=...     specify the user name (default: 'jenkins')\"\n+  echo \"  --version=...  specify the distribution version (e.g. 6.9, 16.04)\"\n+  echo \"\"\n+  local arch=\"$(uname -m)\"\n+  echo \"Supported build patterns on this host ($arch):\"\n+if [ $arch = x86_64 ] ; then\n+  echo \"  bash mkdocker.sh --tag=openj9/cent69 --dist=centos --version=6.9 --build\"\n+fi\n+if [ $arch = x86_64 -o $arch = ppc64le ] ; then\n+  echo \"  bash mkdocker.sh --tag=openj9/cent7  --dist=centos --version=7   --build\"\n+fi\n+  echo \"  bash mkdocker.sh --tag=openj9/ub16   --dist=ubuntu --version=16  --build\"\n+  echo \"  bash mkdocker.sh --tag=openj9/ub18   --dist=ubuntu --version=18  --build\"\n+  echo \"  bash mkdocker.sh --tag=openj9/ub20   --dist=ubuntu --version=20  --build\"\n+  exit 1\n+}\n+\n+# Global configuration variables.\n+action=print\n+arch=\n+cuda=no\n+dist=unspecified\n+tags=()\n+user=jenkins\n+version=unspecified\n+\n+# Frequently used commands.\n+wget_O=\"wget --progress=dot:mega -O\"\n+\n+parse_options() {\n+  for arg in \"$@\" ; do\n+    case \"$arg\" in\n+      -h | --help)\n+        usage\n+        ;;\n+      --arch=*)\n+        arch=\"${arg#*=}\"\n+        ;;\n+      --build)\n+        action=build\n+        ;;\n+      --cuda)\n+        cuda=9.0\n+        ;;\n+      --dist=*)\n+        dist=\"${arg#*=}\"\n+        ;;\n+      --print)\n+        action=print\n+        ;;\n+      --tag=*)\n+        tags+=(\"${arg#*=}\")\n+        ;;\n+      --user=*)\n+        user=\"${arg#*=}\"\n+        ;;\n+      --version=*)\n+        version=\"${arg#*=}\"\n+        ;;\n+      *) # bad option\n+        echo \"Unsupported option: '$arg'\" >&2\n+        usage\n+        ;;\n+    esac\n+  done\n+}\n+\n+validate_options() {\n+  if [ \"x$arch\" = x ] ; then\n+    arch=\"$(uname -m)\"\n+  fi\n+\n+  case \"$arch\" in\n+    ppc64le | s390x | x86_64)\n+      ;;\n+    *)\n+      echo \"Unsupported architecture: '$arch'\" >&2\n+      exit 1\n+      ;;\n+  esac\n+\n+  # Validate the distribution and version.\n+  case \"$dist\" in\n+    centos)\n+      if [ $arch = s390x ] ; then\n+        echo \"CentOS is not supported on $arch\" >&2\n+        exit 1\n+      fi\n+      case $version in\n+        6.9)\n+          if [ $arch = ppc64le ] ; then\n+            echo \"CentOS version 6.9 is not supported on $arch\" >&2\n+            exit 1\n+          fi\n+          ;;\n+        7)\n+          ;;\n+        unspecified)\n+          echo \"Unspecified CentOS version: use '--version' option\" >&2\n+          exit 1\n+          ;;\n+        *)\n+          echo \"Unsupported CentOS version: '$version'\" >&2\n+          exit 1\n+          ;;\n+      esac\n+      ;;\n+    ubuntu)\n+      case $version in\n+        16 | 18 | 20)\n+          version=$version.04\n+          ;;\n+        16.04 | 18.04 | 20.04)\n+          ;;\n+        unspecified)\n+          echo \"Unspecified Ubuntu version: use '--version' option\" >&2\n+          exit 1\n+          ;;\n+        *)\n+          echo \"Unsupported Ubuntu version: '$version'\" >&2\n+          exit 1\n+          ;;\n+      esac\n+      ;;\n+    unspecified)\n+      echo \"Unspecified distribution: use '--dist' option\" >&2\n+      exit 1\n+      ;;\n+    *)\n+      echo \"Unsupported distribution: '$dist'\" >&2\n+      exit 1\n+      ;;\n+  esac\n+\n+  # If CUDA is requested, validate the architecture.\n+  if [ $cuda != no ] ; then\n+    case \"$arch\" in\n+      ppc64le | x86_64)\n+        ;;\n+      *)\n+        echo \"CUDA is not supported on architecture: '$arch'\" >&2\n+        exit 1\n+        ;;\n+    esac\n+  fi\n+}\n+\n+build_cmd() {\n+  local cmd=build\n+  local file=$1\n+  for tag in ${tags[@]} ; do\n+    cmd=\"$cmd --tag $tag\"\n+  done\n+  echo $cmd --file $file .\n+}\n+\n+preamble() {\n+  echo \"\"\n+  echo \"# Generated by: mkdocker.sh $command_line\"\n+  echo \"\"\n+  echo \"# To use this docker file:\"\n+  echo \"# First, copy your public ssh key into authorized_keys.\"\n+  echo \"# Then, in the directory containing the Dockerfile, authorized_keys\"\n+  echo \"# file, and known_hosts file, run:\"\n+  echo \"#   docker $(build_cmd Dockerfile)\"\n+  echo \"#\"\n+if [ ${#tags[@]} -lt 2 ] ; then\n+  echo \"# To start a container based on the resulting image, run this command:\"\n+else\n+  echo \"# To start a container based on the resulting image, run one of these commands:\"\n+fi\n+if [ ${#tags[@]} -eq 0 ] ; then\n+  echo \"#   docker run -it <image>\"\n+else\n+for tag in ${tags[@]} ; do\n+  echo \"#   docker run -it $tag\"\n+done\n+fi\n+  echo \"\"\n+if [ $cuda != no ] ; then\n+  echo \"FROM nvidia/cuda:${cuda}-devel-ubuntu16.04 AS cuda-dev\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd8cf76d87ad741dc6f09408196fb89a238d9544"}, "originalPosition": 219}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU5NzE0Mw==", "bodyText": "No, we're only copying a few header files from the CUDA image; they're all platform-independent.", "url": "https://github.com/eclipse-openj9/openj9/pull/9371#discussion_r416597143", "createdAt": "2020-04-28T13:07:20Z", "author": {"login": "keithc-ca"}, "path": "buildenv/docker/mkdocker.sh", "diffHunk": "@@ -0,0 +1,684 @@\n+#!/bin/bash -\n+\n+print_license() {\n+cat <<- EOF\n+# Copyright (c) 2019, 2020 IBM Corp. and others\n+#\n+# This program and the accompanying materials are made available under\n+# the terms of the Eclipse Public License 2.0 which accompanies this\n+# distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+# or the Apache License, Version 2.0 which accompanies this distribution and\n+# is available at https://www.apache.org/licenses/LICENSE-2.0.\n+#\n+# This Source Code may also be made available under the following\n+# Secondary Licenses when the conditions for such availability set\n+# forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+# General Public License, version 2 with the GNU Classpath\n+# Exception [1] and GNU General Public License, version 2 with the\n+# OpenJDK Assembly Exception [2].\n+#\n+# [1] https://www.gnu.org/software/classpath/license.html\n+# [2] http://openjdk.java.net/legal/assembly-exception.html\n+#\n+# SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+EOF\n+}\n+\n+usage() {\n+  echo \"Usage: $0 [OPTION]...\"\n+  echo \"Generate a Dockerfile for building OpenJ9\"\n+  echo \"\"\n+  echo \"Options:\"\n+  echo \"  --help|-h      print this help, then exit\"\n+  echo \"  --arch=...     specify the processor architecture (default: host architecture)\"\n+  echo \"  --build        build the docker image (overrides '--print')\"\n+  echo \"  --cuda         include CUDA header files\"\n+  echo \"  --dist=...     specify the Linux distribution (e.g. centos, ubuntu)\"\n+  echo \"  --print        write the Dockerfile to stdout (default; overrides '--build')\"\n+  echo \"  --tag=...      specify a name for the docker image (may be repeated, default: none)\"\n+  echo \"  --user=...     specify the user name (default: 'jenkins')\"\n+  echo \"  --version=...  specify the distribution version (e.g. 6.9, 16.04)\"\n+  echo \"\"\n+  local arch=\"$(uname -m)\"\n+  echo \"Supported build patterns on this host ($arch):\"\n+if [ $arch = x86_64 ] ; then\n+  echo \"  bash mkdocker.sh --tag=openj9/cent69 --dist=centos --version=6.9 --build\"\n+fi\n+if [ $arch = x86_64 -o $arch = ppc64le ] ; then\n+  echo \"  bash mkdocker.sh --tag=openj9/cent7  --dist=centos --version=7   --build\"\n+fi\n+  echo \"  bash mkdocker.sh --tag=openj9/ub16   --dist=ubuntu --version=16  --build\"\n+  echo \"  bash mkdocker.sh --tag=openj9/ub18   --dist=ubuntu --version=18  --build\"\n+  echo \"  bash mkdocker.sh --tag=openj9/ub20   --dist=ubuntu --version=20  --build\"\n+  exit 1\n+}\n+\n+# Global configuration variables.\n+action=print\n+arch=\n+cuda=no\n+dist=unspecified\n+tags=()\n+user=jenkins\n+version=unspecified\n+\n+# Frequently used commands.\n+wget_O=\"wget --progress=dot:mega -O\"\n+\n+parse_options() {\n+  for arg in \"$@\" ; do\n+    case \"$arg\" in\n+      -h | --help)\n+        usage\n+        ;;\n+      --arch=*)\n+        arch=\"${arg#*=}\"\n+        ;;\n+      --build)\n+        action=build\n+        ;;\n+      --cuda)\n+        cuda=9.0\n+        ;;\n+      --dist=*)\n+        dist=\"${arg#*=}\"\n+        ;;\n+      --print)\n+        action=print\n+        ;;\n+      --tag=*)\n+        tags+=(\"${arg#*=}\")\n+        ;;\n+      --user=*)\n+        user=\"${arg#*=}\"\n+        ;;\n+      --version=*)\n+        version=\"${arg#*=}\"\n+        ;;\n+      *) # bad option\n+        echo \"Unsupported option: '$arg'\" >&2\n+        usage\n+        ;;\n+    esac\n+  done\n+}\n+\n+validate_options() {\n+  if [ \"x$arch\" = x ] ; then\n+    arch=\"$(uname -m)\"\n+  fi\n+\n+  case \"$arch\" in\n+    ppc64le | s390x | x86_64)\n+      ;;\n+    *)\n+      echo \"Unsupported architecture: '$arch'\" >&2\n+      exit 1\n+      ;;\n+  esac\n+\n+  # Validate the distribution and version.\n+  case \"$dist\" in\n+    centos)\n+      if [ $arch = s390x ] ; then\n+        echo \"CentOS is not supported on $arch\" >&2\n+        exit 1\n+      fi\n+      case $version in\n+        6.9)\n+          if [ $arch = ppc64le ] ; then\n+            echo \"CentOS version 6.9 is not supported on $arch\" >&2\n+            exit 1\n+          fi\n+          ;;\n+        7)\n+          ;;\n+        unspecified)\n+          echo \"Unspecified CentOS version: use '--version' option\" >&2\n+          exit 1\n+          ;;\n+        *)\n+          echo \"Unsupported CentOS version: '$version'\" >&2\n+          exit 1\n+          ;;\n+      esac\n+      ;;\n+    ubuntu)\n+      case $version in\n+        16 | 18 | 20)\n+          version=$version.04\n+          ;;\n+        16.04 | 18.04 | 20.04)\n+          ;;\n+        unspecified)\n+          echo \"Unspecified Ubuntu version: use '--version' option\" >&2\n+          exit 1\n+          ;;\n+        *)\n+          echo \"Unsupported Ubuntu version: '$version'\" >&2\n+          exit 1\n+          ;;\n+      esac\n+      ;;\n+    unspecified)\n+      echo \"Unspecified distribution: use '--dist' option\" >&2\n+      exit 1\n+      ;;\n+    *)\n+      echo \"Unsupported distribution: '$dist'\" >&2\n+      exit 1\n+      ;;\n+  esac\n+\n+  # If CUDA is requested, validate the architecture.\n+  if [ $cuda != no ] ; then\n+    case \"$arch\" in\n+      ppc64le | x86_64)\n+        ;;\n+      *)\n+        echo \"CUDA is not supported on architecture: '$arch'\" >&2\n+        exit 1\n+        ;;\n+    esac\n+  fi\n+}\n+\n+build_cmd() {\n+  local cmd=build\n+  local file=$1\n+  for tag in ${tags[@]} ; do\n+    cmd=\"$cmd --tag $tag\"\n+  done\n+  echo $cmd --file $file .\n+}\n+\n+preamble() {\n+  echo \"\"\n+  echo \"# Generated by: mkdocker.sh $command_line\"\n+  echo \"\"\n+  echo \"# To use this docker file:\"\n+  echo \"# First, copy your public ssh key into authorized_keys.\"\n+  echo \"# Then, in the directory containing the Dockerfile, authorized_keys\"\n+  echo \"# file, and known_hosts file, run:\"\n+  echo \"#   docker $(build_cmd Dockerfile)\"\n+  echo \"#\"\n+if [ ${#tags[@]} -lt 2 ] ; then\n+  echo \"# To start a container based on the resulting image, run this command:\"\n+else\n+  echo \"# To start a container based on the resulting image, run one of these commands:\"\n+fi\n+if [ ${#tags[@]} -eq 0 ] ; then\n+  echo \"#   docker run -it <image>\"\n+else\n+for tag in ${tags[@]} ; do\n+  echo \"#   docker run -it $tag\"\n+done\n+fi\n+  echo \"\"\n+if [ $cuda != no ] ; then\n+  echo \"FROM nvidia/cuda:${cuda}-devel-ubuntu16.04 AS cuda-dev\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjMwMTgwNg=="}, "originalCommit": {"oid": "cd8cf76d87ad741dc6f09408196fb89a238d9544"}, "originalPosition": 219}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NDg3ODgxOnYy", "diffSide": "RIGHT", "path": "buildenv/docker/mkdocker.sh", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNDowNDozOVrOGNvB1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMjoyMjo0NFrOGN8Syg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA1NTE5MQ==", "bodyText": "If we're using the jenkins user why are we putting freemarker in /root and not /home/jenkins?", "url": "https://github.com/eclipse-openj9/openj9/pull/9371#discussion_r417055191", "createdAt": "2020-04-29T04:04:39Z", "author": {"login": "AdamBrousseau"}, "path": "buildenv/docker/mkdocker.sh", "diffHunk": "@@ -0,0 +1,697 @@\n+#!/bin/bash -\n+\n+print_license() {\n+cat <<- EOF\n+# Copyright (c) 2019, 2020 IBM Corp. and others\n+#\n+# This program and the accompanying materials are made available under\n+# the terms of the Eclipse Public License 2.0 which accompanies this\n+# distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+# or the Apache License, Version 2.0 which accompanies this distribution and\n+# is available at https://www.apache.org/licenses/LICENSE-2.0.\n+#\n+# This Source Code may also be made available under the following\n+# Secondary Licenses when the conditions for such availability set\n+# forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+# General Public License, version 2 with the GNU Classpath\n+# Exception [1] and GNU General Public License, version 2 with the\n+# OpenJDK Assembly Exception [2].\n+#\n+# [1] https://www.gnu.org/software/classpath/license.html\n+# [2] http://openjdk.java.net/legal/assembly-exception.html\n+#\n+# SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+EOF\n+}\n+\n+usage() {\n+  echo \"Usage: $0 [OPTION]...\"\n+  echo \"Generate a Dockerfile for building OpenJ9\"\n+  echo \"\"\n+  echo \"Options:\"\n+  echo \"  --help|-h      print this help, then exit\"\n+  echo \"  --arch=...     specify the processor architecture (default: host architecture)\"\n+  echo \"  --build        build the docker image (overrides '--print')\"\n+  echo \"  --cuda         include CUDA header files\"\n+  echo \"  --dist=...     specify the Linux distribution (e.g. centos, ubuntu)\"\n+  echo \"  --print        write the Dockerfile to stdout (default; overrides '--build')\"\n+  echo \"  --tag=...      specify a name for the docker image (may be repeated, default: none)\"\n+  echo \"  --user=...     specify the user name (default: 'jenkins')\"\n+  echo \"  --version=...  specify the distribution version (e.g. 6.9, 16.04)\"\n+  echo \"\"\n+  local arch=\"$(uname -m)\"\n+  echo \"Supported build patterns on this host ($arch):\"\n+if [ $arch = x86_64 ] ; then\n+  echo \"  bash mkdocker.sh --tag=openj9/cent69 --dist=centos --version=6.9 --build\"\n+fi\n+if [ $arch = x86_64 -o $arch = ppc64le ] ; then\n+  echo \"  bash mkdocker.sh --tag=openj9/cent7  --dist=centos --version=7   --build\"\n+fi\n+  echo \"  bash mkdocker.sh --tag=openj9/ub16   --dist=ubuntu --version=16  --build\"\n+  echo \"  bash mkdocker.sh --tag=openj9/ub18   --dist=ubuntu --version=18  --build\"\n+  echo \"  bash mkdocker.sh --tag=openj9/ub20   --dist=ubuntu --version=20  --build\"\n+  exit 1\n+}\n+\n+# Global configuration variables.\n+action=print\n+arch=\n+cuda=no\n+dist=unspecified\n+tags=()\n+user=jenkins\n+version=unspecified\n+\n+# Frequently used commands.\n+wget_O=\"wget --progress=dot:mega -O\"\n+\n+parse_options() {\n+  for arg in \"$@\" ; do\n+    case \"$arg\" in\n+      -h | --help)\n+        usage\n+        ;;\n+      --arch=*)\n+        arch=\"${arg#*=}\"\n+        ;;\n+      --build)\n+        action=build\n+        ;;\n+      --cuda)\n+        cuda=9.0\n+        ;;\n+      --dist=*)\n+        dist=\"${arg#*=}\"\n+        ;;\n+      --print)\n+        action=print\n+        ;;\n+      --tag=*)\n+        tags+=(\"${arg#*=}\")\n+        ;;\n+      --user=*)\n+        user=\"${arg#*=}\"\n+        ;;\n+      --version=*)\n+        version=\"${arg#*=}\"\n+        ;;\n+      *) # bad option\n+        echo \"Unsupported option: '$arg'\" >&2\n+        usage\n+        ;;\n+    esac\n+  done\n+}\n+\n+validate_options() {\n+  if [ \"x$arch\" = x ] ; then\n+    arch=\"$(uname -m)\"\n+  fi\n+\n+  case \"$arch\" in\n+    ppc64le | s390x | x86_64)\n+      ;;\n+    *)\n+      echo \"Unsupported architecture: '$arch'\" >&2\n+      exit 1\n+      ;;\n+  esac\n+\n+  # Validate the distribution and version.\n+  case \"$dist\" in\n+    centos)\n+      if [ $arch = s390x ] ; then\n+        echo \"CentOS is not supported on $arch\" >&2\n+        exit 1\n+      fi\n+      case $version in\n+        6.9)\n+          if [ $arch = ppc64le ] ; then\n+            echo \"CentOS version 6.9 is not supported on $arch\" >&2\n+            exit 1\n+          fi\n+          ;;\n+        7)\n+          ;;\n+        unspecified)\n+          echo \"Unspecified CentOS version: use '--version' option\" >&2\n+          exit 1\n+          ;;\n+        *)\n+          echo \"Unsupported CentOS version: '$version'\" >&2\n+          exit 1\n+          ;;\n+      esac\n+      ;;\n+    ubuntu)\n+      case $version in\n+        16 | 18 | 20)\n+          version=$version.04\n+          ;;\n+        16.04 | 18.04 | 20.04)\n+          ;;\n+        unspecified)\n+          echo \"Unspecified Ubuntu version: use '--version' option\" >&2\n+          exit 1\n+          ;;\n+        *)\n+          echo \"Unsupported Ubuntu version: '$version'\" >&2\n+          exit 1\n+          ;;\n+      esac\n+      ;;\n+    unspecified)\n+      echo \"Unspecified distribution: use '--dist' option\" >&2\n+      exit 1\n+      ;;\n+    *)\n+      echo \"Unsupported distribution: '$dist'\" >&2\n+      exit 1\n+      ;;\n+  esac\n+\n+  # If CUDA is requested, validate the architecture.\n+  if [ $cuda != no ] ; then\n+    case \"$arch\" in\n+      ppc64le | x86_64)\n+        ;;\n+      *)\n+        echo \"CUDA is not supported on architecture: '$arch'\" >&2\n+        exit 1\n+        ;;\n+    esac\n+  fi\n+}\n+\n+build_cmd() {\n+  local cmd=build\n+  local file=$1\n+  for tag in ${tags[@]} ; do\n+    cmd=\"$cmd --tag $tag\"\n+  done\n+  echo $cmd --file $file .\n+}\n+\n+preamble() {\n+  echo \"\"\n+  echo \"# Generated by: mkdocker.sh $command_line\"\n+  echo \"\"\n+  echo \"# To use this docker file:\"\n+  echo \"# First, copy your public ssh key into authorized_keys.\"\n+  echo \"# Then, in the directory containing the Dockerfile, authorized_keys\"\n+  echo \"# file, and known_hosts file, run:\"\n+  echo \"#   docker $(build_cmd Dockerfile)\"\n+  echo \"#\"\n+if [ ${#tags[@]} -lt 2 ] ; then\n+  echo \"# To start a container based on the resulting image, run this command:\"\n+else\n+  echo \"# To start a container based on the resulting image, run one of these commands:\"\n+fi\n+if [ ${#tags[@]} -eq 0 ] ; then\n+  echo \"#   docker run -it <image>\"\n+else\n+for tag in ${tags[@]} ; do\n+  echo \"#   docker run -it $tag\"\n+done\n+fi\n+  echo \"\"\n+if [ $cuda != no ] ; then\n+  echo \"FROM nvidia/cuda:${cuda}-devel-ubuntu16.04 AS cuda-dev\"\n+  echo \"\"\n+fi\n+  echo \"FROM $dist:$version\"\n+}\n+\n+install_centos_packages() {\n+  echo \"RUN yum -y update \\\\\"\n+if [ $version = 6.9 ] ; then\n+  echo \" && yum -y install https://\\$(rpm -E '%{?centos:centos}%{!?centos:rhel}%{rhel}').iuscommunity.org/ius-release.rpm \\\\\"\n+fi\n+  echo \" && yum -y install \\\\\"\n+  echo \"    alsa-lib-devel \\\\\"\n+  echo \"    automake \\\\\" # required to update make\n+  echo \"    bind-utils \\\\\"\n+  echo \"    bison \\\\\"\n+  echo \"    bzip2 \\\\\"\n+  echo \"    ca-certificates \\\\\"\n+  echo \"    cpio \\\\\"\n+  echo \"    cups-devel \\\\\"\n+  echo \"    curl-devel \\\\\" # required by git\n+  echo \"    elfutils-libelf-devel \\\\\"\n+  echo \"    expat-devel \\\\\" # required by git and the xml parser\n+  echo \"    file-devel \\\\\"\n+  echo \"    file-libs \\\\\"\n+  echo \"    flex \\\\\"\n+  echo \"    fontconfig \\\\\"\n+  echo \"    fontconfig-devel \\\\\"\n+  echo \"    freetype-devel \\\\\"\n+  echo \"    gettext \\\\\"\n+  echo \"    gettext-devel \\\\\" # required by git\n+  echo \"    glibc \\\\\"\n+  echo \"    glibc-common \\\\\"\n+  echo \"    glibc-devel \\\\\"\n+  echo \"    gmp-devel \\\\\"\n+  echo \"    lbzip2 \\\\\"\n+  echo \"    libdwarf \\\\\"\n+  echo \"    libdwarf-devel \\\\\"\n+  echo \"    libffi-devel \\\\\"\n+  echo \"    libstdc++-static \\\\\"\n+  echo \"    libX11-devel \\\\\"\n+  echo \"    libXext-devel \\\\\"\n+  echo \"    libXi-devel \\\\\"\n+  echo \"    libXrandr-devel \\\\\"\n+  echo \"    libXrender-devel \\\\\"\n+  echo \"    libXt-devel \\\\\"\n+  echo \"    libXtst-devel \\\\\"\n+  echo \"    make \\\\\"\n+  echo \"    mesa-libGL-devel \\\\\"\n+  echo \"    mpfr-devel \\\\\"\n+  echo \"    ntp \\\\\"\n+  echo \"    numactl-devel \\\\\"\n+  echo \"    openssh-clients \\\\\"\n+  echo \"    openssh-server \\\\\"\n+  echo \"    openssl-devel \\\\\" # required by git, etc.\n+  echo \"    perl-CPAN \\\\\"\n+  echo \"    perl-DBI \\\\\"\n+  echo \"    perl-devel \\\\\"\n+  echo \"    perl-ExtUtils-MakeMaker \\\\\" # required by git\n+  echo \"    perl-GD \\\\\"\n+  echo \"    perl-libwww-perl \\\\\"\n+  echo \"    perl-Time-HiRes \\\\\"\n+  echo \"    texinfo \\\\\" # required to update make\n+  echo \"    unzip \\\\\"\n+  echo \"    vim \\\\\"\n+  echo \"    wget \\\\\"\n+  echo \"    xorg-x11-server-Xvfb \\\\\"\n+  echo \"    xz \\\\\"\n+  echo \"    zip \\\\\"\n+  echo \"    zlib-devel \\\\\" # required by git, python\n+  echo \" && yum clean all\"\n+  echo \"\"\n+  local autoconf_version=2.69\n+  echo \"# Install autoconf.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O autoconf.tar.gz https://fossies.org/linux/misc/autoconf-$autoconf_version.tar.gz \\\\\"\n+  echo \" && tar -xzf autoconf.tar.gz \\\\\"\n+  echo \" && cd autoconf-$autoconf_version \\\\\"\n+  echo \" && ./configure --build=\\$(rpm --eval %{_host}) \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf autoconf.tar.gz autoconf-$autoconf_version\"\n+  echo \"\"\n+  echo \"# Install gcc-7.5.\"\n+  echo \"RUN cd /usr/local \\\\\"\n+  echo \" && $wget_O gcc-7.tar.xz 'https://ci.adoptopenjdk.net/userContent/gcc/gcc750+ccache.$arch.tar.xz' \\\\\"\n+  echo \" && tar -xJf gcc-7.tar.xz --strip-components=1 \\\\\"\n+  echo \" && ln -sf ../local/bin/gcc-7.5 /usr/bin/gcc \\\\\"\n+  echo \" && ln -sf ../local/bin/g++-7.5 /usr/bin/g++ \\\\\"\n+  echo \" && ln -sf gcc /usr/bin/cc \\\\\"\n+  echo \" && ln -sf g++ /usr/bin/c++ \\\\\"\n+  echo \" && rm -f gcc-7.tar.xz\"\n+  echo \"\"\n+  local ant_version=1.10.5\n+  echo \"# Install ant.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O ant.zip https://archive.apache.org/dist/ant/binaries/apache-ant-$ant_version-bin.zip \\\\\"\n+  echo \" && unzip -q ant.zip -d /opt \\\\\"\n+  echo \" && ln -s apache-ant-$ant_version /opt/ant \\\\\"\n+  echo \" && ln -s /opt/ant/bin/ant /usr/bin/ant \\\\\"\n+  echo \" && $wget_O ant-contrib.tar.gz https://sourceforge.net/projects/ant-contrib/files/ant-contrib/1.0b3/ant-contrib-1.0b3-bin.tar.gz \\\\\"\n+  echo \" && tar -xzf ant-contrib.tar.gz \\\\\"\n+  echo \" && mv ant-contrib/ant-contrib-1.0b3.jar /opt/ant/lib \\\\\"\n+  echo \" && rm -rf ant-contrib ant.zip ant-contrib.tar.gz\"\n+  echo \"\"\n+  local git_version=2.5.3\n+  echo \"# Install git.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O git.tar.gz https://www.kernel.org/pub/software/scm/git/git-$git_version.tar.gz \\\\\"\n+  echo \" && tar -xzf git.tar.gz \\\\\"\n+  echo \" && cd git-$git_version \\\\\"\n+  echo \" && make prefix=/usr/local all \\\\\"\n+  echo \" && make prefix=/usr/local install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf git.tar.gz git-$git_version\"\n+  # updating make requires automake 1.15\n+  echo \"\"\n+  local automake_version=1.15\n+  echo \"# Update automake.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O automake.tar.gz http://ftp.gnu.org/gnu/automake/automake-$automake_version.tar.gz \\\\\"\n+  echo \" && tar -xzf automake.tar.gz \\\\\"\n+  echo \" && cd automake-$automake_version \\\\\"\n+  echo \" && ./configure \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf automake.tar.gz automake-$automake_version\"\n+if [ $arch = x86_64 ] ; then\n+  echo \"\"\n+  local gettext_version=0.20.1\n+  echo \"# Update gettext.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O gettext.tar.gz http://ftp.gnu.org/gnu/gettext/gettext-$gettext_version.tar.gz \\\\\"\n+  echo \" && tar -xzf gettext.tar.gz \\\\\"\n+  echo \" && cd gettext-$gettext_version \\\\\"\n+  echo \" && ./autogen.sh --skip-gnulib \\\\\"\n+  echo \" && ./configure --disable-nls \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf gettext.tar.gz gettext-$gettext_version\"\n+fi\n+  echo \"\"\n+if [ $arch = ppc64le ] ; then\n+  local make_version=4.2\n+else\n+  local make_version=4.1\n+fi\n+  echo \"# Update make.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O make.tar.gz https://github.com/mirror/make/archive/$make_version.tar.gz \\\\\"\n+  echo \" && tar -xzf make.tar.gz \\\\\"\n+  echo \" && cd make-$make_version \\\\\"\n+  echo \" && ACLOCAL_PATH=/usr/share/aclocal autoreconf -i \\\\\"\n+  echo \" && ./configure \\\\\"\n+  echo \" && make update \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && ln -s make /usr/local/bin/gmake \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf make.tar.gz make-$make_version\"\n+if [ $arch = x86_64 ] ; then\n+  echo \"\"\n+  local nasm_version=2.13.03\n+  echo \"# Install nasm.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O nasm.tar.gz https://www.nasm.us/pub/nasm/releasebuilds/$nasm_version/nasm-$nasm_version.tar.gz \\\\\"\n+  echo \" && tar -xzf nasm.tar.gz \\\\\"\n+  echo \" && cd nasm-$nasm_version \\\\\"\n+  echo \" && ./configure -prefix=/usr/local \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf nasm.tar.gz nasm-$nasm_version\"\n+fi\n+}\n+\n+install_ubuntu_packages() {\n+  echo \"RUN apt-get update \\\\\"\n+  echo \" && apt-get install -qq -y --no-install-recommends \\\\\"\n+  echo \"    software-properties-common \\\\\"\n+if [ $version = 16.04 ] ; then\n+  echo \"    python-software-properties \\\\\"\n+fi\n+  echo \" && add-apt-repository ppa:ubuntu-toolchain-r/test \\\\\"\n+  echo \" && apt-get update \\\\\"\n+  echo \" && apt-get install -qq -y --no-install-recommends \\\\\"\n+  echo \"    ant \\\\\"\n+  echo \"    ant-contrib \\\\\"\n+  echo \"    autoconf \\\\\"\n+  echo \"    build-essential \\\\\"\n+  echo \"    ca-certificates \\\\\"\n+  echo \"    cmake \\\\\"\n+  echo \"    cpio \\\\\"\n+  echo \"    curl \\\\\"\n+  echo \"    file \\\\\"\n+if [ $arch != s390x ] ; then\n+  echo \"    g++-7 \\\\\"\n+  echo \"    gcc-7 \\\\\"\n+fi\n+  echo \"    gdb \\\\\"\n+  echo \"    git \\\\\"\n+  echo \"    libasound2-dev \\\\\"\n+  echo \"    libcups2-dev \\\\\"\n+  echo \"    libdwarf-dev \\\\\"\n+  echo \"    libelf-dev \\\\\"\n+  echo \"    libexpat1-dev \\\\\" # required by the xml parser\n+  echo \"    libffi-dev \\\\\"\n+  echo \"    libfontconfig \\\\\"\n+  echo \"    libfontconfig1-dev \\\\\"\n+  echo \"    libfreetype6-dev \\\\\"\n+if [ $arch != s390x ] ; then\n+  echo \"    libnuma-dev \\\\\"\n+fi\n+if [ $arch = s390x ] ; then\n+  echo \"    libmpc3 \\\\\"\n+fi\n+  echo \"    libssl-dev \\\\\"\n+  echo \"    libx11-dev \\\\\"\n+  echo \"    libxext-dev \\\\\"\n+  echo \"    libxrandr-dev \\\\\"\n+  echo \"    libxrender-dev \\\\\"\n+  echo \"    libxt-dev \\\\\"\n+  echo \"    libxtst-dev \\\\\"\n+  echo \"    make \\\\\"\n+if [ $arch = x86_64 ] ; then\n+  echo \"    nasm \\\\\"\n+fi\n+  echo \"    openssh-client \\\\\"\n+  echo \"    openssh-server \\\\\"\n+  echo \"    perl \\\\\"\n+  echo \"    pkg-config \\\\\"\n+if [ $version = 16.04 ] ; then\n+  echo \"    realpath \\\\\"\n+fi\n+  echo \"    ssh \\\\\"\n+  echo \"    unzip \\\\\"\n+  echo \"    wget \\\\\"\n+  echo \"    xvfb \\\\\"\n+  echo \"    zip \\\\\"\n+  echo \"    zlib1g-dev \\\\\"\n+  echo \" && rm -rf /var/lib/apt/lists/*\"\n+}\n+\n+install_packages() {\n+  echo \"\"\n+  echo \"# Install required OS tools.\"\n+  echo \"\"\n+if [ $dist = centos ] ; then\n+  install_centos_packages\n+else\n+  install_ubuntu_packages\n+fi\n+}\n+\n+install_compilers() {\n+if [ $arch = s390x ] ; then\n+  echo \"\"\n+  local gcc_version=7.5\n+  echo \"# Install gcc.\"\n+  echo \"RUN cd /usr/local \\\\\"\n+  echo \" && $wget_O gcc.tar.xz 'https://ci.adoptopenjdk.net/userContent/gcc/gcc750+ccache.$arch.tar.xz' \\\\\"\n+  echo \" && tar -xJf gcc.tar.xz --strip-components=1 \\\\\"\n+  echo \" && rm -f gcc.tar.xz\"\n+  echo \"\"\n+  echo \"# Create various symbolic links.\"\n+  echo \"RUN ln -s lib/$arch-linux-gnu /usr/lib64 \\\\\"\n+if [ $dist:$version = ubuntu:18.04 ] ; then\n+  # On s390x perl needs version 4 of mpfr, but we only have version 6.\n+  echo \" && ln -s libmpfr.so.6 /usr/lib64/libmpfr.so.4 \\\\\"\n+fi\n+  # /usr/local/include/c++ is a directory that already exists so we create these symbolic links in two steps.\n+  echo \" && ( cd /usr/local/include && for f in \\$(ls /usr/include/s390x-linux-gnu/c++) ; do test -e \\$f || ln -s /usr/include/s390x-linux-gnu/c++/\\$f . ; done ) \\\\\"\n+  echo \" && ln -s \\$(ls -d /usr/include/s390x-linux-gnu/* | grep -v '/c++\\$') /usr/local/include \\\\\"\n+  echo \" && ln -sf ../local/bin/g++-$gcc_version /usr/bin/g++-7 \\\\\"\n+  echo \" && ln -sf ../local/bin/gcc-$gcc_version /usr/bin/gcc-7\"\n+fi\n+if [ $dist != centos ] ; then\n+  echo \"\"\n+  echo \"ENV CC=gcc-7 CXX=g++-7\"\n+fi\n+}\n+\n+install_cmake() {\n+if [ $dist == centos ] ; then\n+  echo \"\"\n+  local cmake_version=3.11\n+  local cmake_name=cmake-$cmake_version.4\n+  echo \"# Install cmake.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O cmake.tar.gz https://cmake.org/files/v$cmake_version/$cmake_name.tar.gz \\\\\"\n+  echo \" && tar -xzf cmake.tar.gz \\\\\"\n+  echo \" && cd $cmake_name \\\\\"\n+  echo \" && export LDFLAGS='-static-libstdc++' \\\\\"\n+  echo \" && ./configure \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf cmake.tar.gz $cmake_name\"\n+fi\n+}\n+\n+prepare_user() {\n+  # Ensure authorized_keys exists.\n+  test -f authorized_keys || touch authorized_keys\n+  # Ensure github.com is a known host.\n+  ( test -f known_hosts && grep -q '^github.com ' known_hosts ) \\\n+    || ssh-keyscan github.com >> known_hosts\n+}\n+\n+create_user() {\n+  echo \"\"\n+  echo \"# Add user home and copy authorized_keys and known_hosts.\"\n+  echo \"RUN useradd -ms /bin/bash $user \\\\\"\n+  echo \" && mkdir /home/$user/.ssh \\\\\"\n+  echo \" && chmod 700 /home/$user/.ssh\"\n+  echo \"COPY authorized_keys known_hosts /home/$user/.ssh/\"\n+  echo \"RUN chown -R $user:$user /home/$user \\\\\"\n+  echo \" && chmod 600 /home/$user/.ssh/authorized_keys /home/$user/.ssh/known_hosts\"\n+}\n+\n+install_freemarker() {\n+  echo \"\"\n+  local freemarker_version=2.3.8\n+  echo \"# Download and extract freemarker.jar to /root/freemarker.jar.\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24771d8a3d3bf6d37d10a0ddf97a4d4b6b478c46"}, "originalPosition": 544}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI3MjUyMg==", "bodyText": "All the Dockerfiles under buildenv/docker put it in /root and ansible does the same. On the other hand, defaults.yml seems to expect it in /home/jenkins. I suppose we could have it both places, or we can pick one and fix the references to the other location.", "url": "https://github.com/eclipse-openj9/openj9/pull/9371#discussion_r417272522", "createdAt": "2020-04-29T12:22:44Z", "author": {"login": "keithc-ca"}, "path": "buildenv/docker/mkdocker.sh", "diffHunk": "@@ -0,0 +1,697 @@\n+#!/bin/bash -\n+\n+print_license() {\n+cat <<- EOF\n+# Copyright (c) 2019, 2020 IBM Corp. and others\n+#\n+# This program and the accompanying materials are made available under\n+# the terms of the Eclipse Public License 2.0 which accompanies this\n+# distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+# or the Apache License, Version 2.0 which accompanies this distribution and\n+# is available at https://www.apache.org/licenses/LICENSE-2.0.\n+#\n+# This Source Code may also be made available under the following\n+# Secondary Licenses when the conditions for such availability set\n+# forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+# General Public License, version 2 with the GNU Classpath\n+# Exception [1] and GNU General Public License, version 2 with the\n+# OpenJDK Assembly Exception [2].\n+#\n+# [1] https://www.gnu.org/software/classpath/license.html\n+# [2] http://openjdk.java.net/legal/assembly-exception.html\n+#\n+# SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+EOF\n+}\n+\n+usage() {\n+  echo \"Usage: $0 [OPTION]...\"\n+  echo \"Generate a Dockerfile for building OpenJ9\"\n+  echo \"\"\n+  echo \"Options:\"\n+  echo \"  --help|-h      print this help, then exit\"\n+  echo \"  --arch=...     specify the processor architecture (default: host architecture)\"\n+  echo \"  --build        build the docker image (overrides '--print')\"\n+  echo \"  --cuda         include CUDA header files\"\n+  echo \"  --dist=...     specify the Linux distribution (e.g. centos, ubuntu)\"\n+  echo \"  --print        write the Dockerfile to stdout (default; overrides '--build')\"\n+  echo \"  --tag=...      specify a name for the docker image (may be repeated, default: none)\"\n+  echo \"  --user=...     specify the user name (default: 'jenkins')\"\n+  echo \"  --version=...  specify the distribution version (e.g. 6.9, 16.04)\"\n+  echo \"\"\n+  local arch=\"$(uname -m)\"\n+  echo \"Supported build patterns on this host ($arch):\"\n+if [ $arch = x86_64 ] ; then\n+  echo \"  bash mkdocker.sh --tag=openj9/cent69 --dist=centos --version=6.9 --build\"\n+fi\n+if [ $arch = x86_64 -o $arch = ppc64le ] ; then\n+  echo \"  bash mkdocker.sh --tag=openj9/cent7  --dist=centos --version=7   --build\"\n+fi\n+  echo \"  bash mkdocker.sh --tag=openj9/ub16   --dist=ubuntu --version=16  --build\"\n+  echo \"  bash mkdocker.sh --tag=openj9/ub18   --dist=ubuntu --version=18  --build\"\n+  echo \"  bash mkdocker.sh --tag=openj9/ub20   --dist=ubuntu --version=20  --build\"\n+  exit 1\n+}\n+\n+# Global configuration variables.\n+action=print\n+arch=\n+cuda=no\n+dist=unspecified\n+tags=()\n+user=jenkins\n+version=unspecified\n+\n+# Frequently used commands.\n+wget_O=\"wget --progress=dot:mega -O\"\n+\n+parse_options() {\n+  for arg in \"$@\" ; do\n+    case \"$arg\" in\n+      -h | --help)\n+        usage\n+        ;;\n+      --arch=*)\n+        arch=\"${arg#*=}\"\n+        ;;\n+      --build)\n+        action=build\n+        ;;\n+      --cuda)\n+        cuda=9.0\n+        ;;\n+      --dist=*)\n+        dist=\"${arg#*=}\"\n+        ;;\n+      --print)\n+        action=print\n+        ;;\n+      --tag=*)\n+        tags+=(\"${arg#*=}\")\n+        ;;\n+      --user=*)\n+        user=\"${arg#*=}\"\n+        ;;\n+      --version=*)\n+        version=\"${arg#*=}\"\n+        ;;\n+      *) # bad option\n+        echo \"Unsupported option: '$arg'\" >&2\n+        usage\n+        ;;\n+    esac\n+  done\n+}\n+\n+validate_options() {\n+  if [ \"x$arch\" = x ] ; then\n+    arch=\"$(uname -m)\"\n+  fi\n+\n+  case \"$arch\" in\n+    ppc64le | s390x | x86_64)\n+      ;;\n+    *)\n+      echo \"Unsupported architecture: '$arch'\" >&2\n+      exit 1\n+      ;;\n+  esac\n+\n+  # Validate the distribution and version.\n+  case \"$dist\" in\n+    centos)\n+      if [ $arch = s390x ] ; then\n+        echo \"CentOS is not supported on $arch\" >&2\n+        exit 1\n+      fi\n+      case $version in\n+        6.9)\n+          if [ $arch = ppc64le ] ; then\n+            echo \"CentOS version 6.9 is not supported on $arch\" >&2\n+            exit 1\n+          fi\n+          ;;\n+        7)\n+          ;;\n+        unspecified)\n+          echo \"Unspecified CentOS version: use '--version' option\" >&2\n+          exit 1\n+          ;;\n+        *)\n+          echo \"Unsupported CentOS version: '$version'\" >&2\n+          exit 1\n+          ;;\n+      esac\n+      ;;\n+    ubuntu)\n+      case $version in\n+        16 | 18 | 20)\n+          version=$version.04\n+          ;;\n+        16.04 | 18.04 | 20.04)\n+          ;;\n+        unspecified)\n+          echo \"Unspecified Ubuntu version: use '--version' option\" >&2\n+          exit 1\n+          ;;\n+        *)\n+          echo \"Unsupported Ubuntu version: '$version'\" >&2\n+          exit 1\n+          ;;\n+      esac\n+      ;;\n+    unspecified)\n+      echo \"Unspecified distribution: use '--dist' option\" >&2\n+      exit 1\n+      ;;\n+    *)\n+      echo \"Unsupported distribution: '$dist'\" >&2\n+      exit 1\n+      ;;\n+  esac\n+\n+  # If CUDA is requested, validate the architecture.\n+  if [ $cuda != no ] ; then\n+    case \"$arch\" in\n+      ppc64le | x86_64)\n+        ;;\n+      *)\n+        echo \"CUDA is not supported on architecture: '$arch'\" >&2\n+        exit 1\n+        ;;\n+    esac\n+  fi\n+}\n+\n+build_cmd() {\n+  local cmd=build\n+  local file=$1\n+  for tag in ${tags[@]} ; do\n+    cmd=\"$cmd --tag $tag\"\n+  done\n+  echo $cmd --file $file .\n+}\n+\n+preamble() {\n+  echo \"\"\n+  echo \"# Generated by: mkdocker.sh $command_line\"\n+  echo \"\"\n+  echo \"# To use this docker file:\"\n+  echo \"# First, copy your public ssh key into authorized_keys.\"\n+  echo \"# Then, in the directory containing the Dockerfile, authorized_keys\"\n+  echo \"# file, and known_hosts file, run:\"\n+  echo \"#   docker $(build_cmd Dockerfile)\"\n+  echo \"#\"\n+if [ ${#tags[@]} -lt 2 ] ; then\n+  echo \"# To start a container based on the resulting image, run this command:\"\n+else\n+  echo \"# To start a container based on the resulting image, run one of these commands:\"\n+fi\n+if [ ${#tags[@]} -eq 0 ] ; then\n+  echo \"#   docker run -it <image>\"\n+else\n+for tag in ${tags[@]} ; do\n+  echo \"#   docker run -it $tag\"\n+done\n+fi\n+  echo \"\"\n+if [ $cuda != no ] ; then\n+  echo \"FROM nvidia/cuda:${cuda}-devel-ubuntu16.04 AS cuda-dev\"\n+  echo \"\"\n+fi\n+  echo \"FROM $dist:$version\"\n+}\n+\n+install_centos_packages() {\n+  echo \"RUN yum -y update \\\\\"\n+if [ $version = 6.9 ] ; then\n+  echo \" && yum -y install https://\\$(rpm -E '%{?centos:centos}%{!?centos:rhel}%{rhel}').iuscommunity.org/ius-release.rpm \\\\\"\n+fi\n+  echo \" && yum -y install \\\\\"\n+  echo \"    alsa-lib-devel \\\\\"\n+  echo \"    automake \\\\\" # required to update make\n+  echo \"    bind-utils \\\\\"\n+  echo \"    bison \\\\\"\n+  echo \"    bzip2 \\\\\"\n+  echo \"    ca-certificates \\\\\"\n+  echo \"    cpio \\\\\"\n+  echo \"    cups-devel \\\\\"\n+  echo \"    curl-devel \\\\\" # required by git\n+  echo \"    elfutils-libelf-devel \\\\\"\n+  echo \"    expat-devel \\\\\" # required by git and the xml parser\n+  echo \"    file-devel \\\\\"\n+  echo \"    file-libs \\\\\"\n+  echo \"    flex \\\\\"\n+  echo \"    fontconfig \\\\\"\n+  echo \"    fontconfig-devel \\\\\"\n+  echo \"    freetype-devel \\\\\"\n+  echo \"    gettext \\\\\"\n+  echo \"    gettext-devel \\\\\" # required by git\n+  echo \"    glibc \\\\\"\n+  echo \"    glibc-common \\\\\"\n+  echo \"    glibc-devel \\\\\"\n+  echo \"    gmp-devel \\\\\"\n+  echo \"    lbzip2 \\\\\"\n+  echo \"    libdwarf \\\\\"\n+  echo \"    libdwarf-devel \\\\\"\n+  echo \"    libffi-devel \\\\\"\n+  echo \"    libstdc++-static \\\\\"\n+  echo \"    libX11-devel \\\\\"\n+  echo \"    libXext-devel \\\\\"\n+  echo \"    libXi-devel \\\\\"\n+  echo \"    libXrandr-devel \\\\\"\n+  echo \"    libXrender-devel \\\\\"\n+  echo \"    libXt-devel \\\\\"\n+  echo \"    libXtst-devel \\\\\"\n+  echo \"    make \\\\\"\n+  echo \"    mesa-libGL-devel \\\\\"\n+  echo \"    mpfr-devel \\\\\"\n+  echo \"    ntp \\\\\"\n+  echo \"    numactl-devel \\\\\"\n+  echo \"    openssh-clients \\\\\"\n+  echo \"    openssh-server \\\\\"\n+  echo \"    openssl-devel \\\\\" # required by git, etc.\n+  echo \"    perl-CPAN \\\\\"\n+  echo \"    perl-DBI \\\\\"\n+  echo \"    perl-devel \\\\\"\n+  echo \"    perl-ExtUtils-MakeMaker \\\\\" # required by git\n+  echo \"    perl-GD \\\\\"\n+  echo \"    perl-libwww-perl \\\\\"\n+  echo \"    perl-Time-HiRes \\\\\"\n+  echo \"    texinfo \\\\\" # required to update make\n+  echo \"    unzip \\\\\"\n+  echo \"    vim \\\\\"\n+  echo \"    wget \\\\\"\n+  echo \"    xorg-x11-server-Xvfb \\\\\"\n+  echo \"    xz \\\\\"\n+  echo \"    zip \\\\\"\n+  echo \"    zlib-devel \\\\\" # required by git, python\n+  echo \" && yum clean all\"\n+  echo \"\"\n+  local autoconf_version=2.69\n+  echo \"# Install autoconf.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O autoconf.tar.gz https://fossies.org/linux/misc/autoconf-$autoconf_version.tar.gz \\\\\"\n+  echo \" && tar -xzf autoconf.tar.gz \\\\\"\n+  echo \" && cd autoconf-$autoconf_version \\\\\"\n+  echo \" && ./configure --build=\\$(rpm --eval %{_host}) \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf autoconf.tar.gz autoconf-$autoconf_version\"\n+  echo \"\"\n+  echo \"# Install gcc-7.5.\"\n+  echo \"RUN cd /usr/local \\\\\"\n+  echo \" && $wget_O gcc-7.tar.xz 'https://ci.adoptopenjdk.net/userContent/gcc/gcc750+ccache.$arch.tar.xz' \\\\\"\n+  echo \" && tar -xJf gcc-7.tar.xz --strip-components=1 \\\\\"\n+  echo \" && ln -sf ../local/bin/gcc-7.5 /usr/bin/gcc \\\\\"\n+  echo \" && ln -sf ../local/bin/g++-7.5 /usr/bin/g++ \\\\\"\n+  echo \" && ln -sf gcc /usr/bin/cc \\\\\"\n+  echo \" && ln -sf g++ /usr/bin/c++ \\\\\"\n+  echo \" && rm -f gcc-7.tar.xz\"\n+  echo \"\"\n+  local ant_version=1.10.5\n+  echo \"# Install ant.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O ant.zip https://archive.apache.org/dist/ant/binaries/apache-ant-$ant_version-bin.zip \\\\\"\n+  echo \" && unzip -q ant.zip -d /opt \\\\\"\n+  echo \" && ln -s apache-ant-$ant_version /opt/ant \\\\\"\n+  echo \" && ln -s /opt/ant/bin/ant /usr/bin/ant \\\\\"\n+  echo \" && $wget_O ant-contrib.tar.gz https://sourceforge.net/projects/ant-contrib/files/ant-contrib/1.0b3/ant-contrib-1.0b3-bin.tar.gz \\\\\"\n+  echo \" && tar -xzf ant-contrib.tar.gz \\\\\"\n+  echo \" && mv ant-contrib/ant-contrib-1.0b3.jar /opt/ant/lib \\\\\"\n+  echo \" && rm -rf ant-contrib ant.zip ant-contrib.tar.gz\"\n+  echo \"\"\n+  local git_version=2.5.3\n+  echo \"# Install git.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O git.tar.gz https://www.kernel.org/pub/software/scm/git/git-$git_version.tar.gz \\\\\"\n+  echo \" && tar -xzf git.tar.gz \\\\\"\n+  echo \" && cd git-$git_version \\\\\"\n+  echo \" && make prefix=/usr/local all \\\\\"\n+  echo \" && make prefix=/usr/local install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf git.tar.gz git-$git_version\"\n+  # updating make requires automake 1.15\n+  echo \"\"\n+  local automake_version=1.15\n+  echo \"# Update automake.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O automake.tar.gz http://ftp.gnu.org/gnu/automake/automake-$automake_version.tar.gz \\\\\"\n+  echo \" && tar -xzf automake.tar.gz \\\\\"\n+  echo \" && cd automake-$automake_version \\\\\"\n+  echo \" && ./configure \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf automake.tar.gz automake-$automake_version\"\n+if [ $arch = x86_64 ] ; then\n+  echo \"\"\n+  local gettext_version=0.20.1\n+  echo \"# Update gettext.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O gettext.tar.gz http://ftp.gnu.org/gnu/gettext/gettext-$gettext_version.tar.gz \\\\\"\n+  echo \" && tar -xzf gettext.tar.gz \\\\\"\n+  echo \" && cd gettext-$gettext_version \\\\\"\n+  echo \" && ./autogen.sh --skip-gnulib \\\\\"\n+  echo \" && ./configure --disable-nls \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf gettext.tar.gz gettext-$gettext_version\"\n+fi\n+  echo \"\"\n+if [ $arch = ppc64le ] ; then\n+  local make_version=4.2\n+else\n+  local make_version=4.1\n+fi\n+  echo \"# Update make.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O make.tar.gz https://github.com/mirror/make/archive/$make_version.tar.gz \\\\\"\n+  echo \" && tar -xzf make.tar.gz \\\\\"\n+  echo \" && cd make-$make_version \\\\\"\n+  echo \" && ACLOCAL_PATH=/usr/share/aclocal autoreconf -i \\\\\"\n+  echo \" && ./configure \\\\\"\n+  echo \" && make update \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && ln -s make /usr/local/bin/gmake \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf make.tar.gz make-$make_version\"\n+if [ $arch = x86_64 ] ; then\n+  echo \"\"\n+  local nasm_version=2.13.03\n+  echo \"# Install nasm.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O nasm.tar.gz https://www.nasm.us/pub/nasm/releasebuilds/$nasm_version/nasm-$nasm_version.tar.gz \\\\\"\n+  echo \" && tar -xzf nasm.tar.gz \\\\\"\n+  echo \" && cd nasm-$nasm_version \\\\\"\n+  echo \" && ./configure -prefix=/usr/local \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf nasm.tar.gz nasm-$nasm_version\"\n+fi\n+}\n+\n+install_ubuntu_packages() {\n+  echo \"RUN apt-get update \\\\\"\n+  echo \" && apt-get install -qq -y --no-install-recommends \\\\\"\n+  echo \"    software-properties-common \\\\\"\n+if [ $version = 16.04 ] ; then\n+  echo \"    python-software-properties \\\\\"\n+fi\n+  echo \" && add-apt-repository ppa:ubuntu-toolchain-r/test \\\\\"\n+  echo \" && apt-get update \\\\\"\n+  echo \" && apt-get install -qq -y --no-install-recommends \\\\\"\n+  echo \"    ant \\\\\"\n+  echo \"    ant-contrib \\\\\"\n+  echo \"    autoconf \\\\\"\n+  echo \"    build-essential \\\\\"\n+  echo \"    ca-certificates \\\\\"\n+  echo \"    cmake \\\\\"\n+  echo \"    cpio \\\\\"\n+  echo \"    curl \\\\\"\n+  echo \"    file \\\\\"\n+if [ $arch != s390x ] ; then\n+  echo \"    g++-7 \\\\\"\n+  echo \"    gcc-7 \\\\\"\n+fi\n+  echo \"    gdb \\\\\"\n+  echo \"    git \\\\\"\n+  echo \"    libasound2-dev \\\\\"\n+  echo \"    libcups2-dev \\\\\"\n+  echo \"    libdwarf-dev \\\\\"\n+  echo \"    libelf-dev \\\\\"\n+  echo \"    libexpat1-dev \\\\\" # required by the xml parser\n+  echo \"    libffi-dev \\\\\"\n+  echo \"    libfontconfig \\\\\"\n+  echo \"    libfontconfig1-dev \\\\\"\n+  echo \"    libfreetype6-dev \\\\\"\n+if [ $arch != s390x ] ; then\n+  echo \"    libnuma-dev \\\\\"\n+fi\n+if [ $arch = s390x ] ; then\n+  echo \"    libmpc3 \\\\\"\n+fi\n+  echo \"    libssl-dev \\\\\"\n+  echo \"    libx11-dev \\\\\"\n+  echo \"    libxext-dev \\\\\"\n+  echo \"    libxrandr-dev \\\\\"\n+  echo \"    libxrender-dev \\\\\"\n+  echo \"    libxt-dev \\\\\"\n+  echo \"    libxtst-dev \\\\\"\n+  echo \"    make \\\\\"\n+if [ $arch = x86_64 ] ; then\n+  echo \"    nasm \\\\\"\n+fi\n+  echo \"    openssh-client \\\\\"\n+  echo \"    openssh-server \\\\\"\n+  echo \"    perl \\\\\"\n+  echo \"    pkg-config \\\\\"\n+if [ $version = 16.04 ] ; then\n+  echo \"    realpath \\\\\"\n+fi\n+  echo \"    ssh \\\\\"\n+  echo \"    unzip \\\\\"\n+  echo \"    wget \\\\\"\n+  echo \"    xvfb \\\\\"\n+  echo \"    zip \\\\\"\n+  echo \"    zlib1g-dev \\\\\"\n+  echo \" && rm -rf /var/lib/apt/lists/*\"\n+}\n+\n+install_packages() {\n+  echo \"\"\n+  echo \"# Install required OS tools.\"\n+  echo \"\"\n+if [ $dist = centos ] ; then\n+  install_centos_packages\n+else\n+  install_ubuntu_packages\n+fi\n+}\n+\n+install_compilers() {\n+if [ $arch = s390x ] ; then\n+  echo \"\"\n+  local gcc_version=7.5\n+  echo \"# Install gcc.\"\n+  echo \"RUN cd /usr/local \\\\\"\n+  echo \" && $wget_O gcc.tar.xz 'https://ci.adoptopenjdk.net/userContent/gcc/gcc750+ccache.$arch.tar.xz' \\\\\"\n+  echo \" && tar -xJf gcc.tar.xz --strip-components=1 \\\\\"\n+  echo \" && rm -f gcc.tar.xz\"\n+  echo \"\"\n+  echo \"# Create various symbolic links.\"\n+  echo \"RUN ln -s lib/$arch-linux-gnu /usr/lib64 \\\\\"\n+if [ $dist:$version = ubuntu:18.04 ] ; then\n+  # On s390x perl needs version 4 of mpfr, but we only have version 6.\n+  echo \" && ln -s libmpfr.so.6 /usr/lib64/libmpfr.so.4 \\\\\"\n+fi\n+  # /usr/local/include/c++ is a directory that already exists so we create these symbolic links in two steps.\n+  echo \" && ( cd /usr/local/include && for f in \\$(ls /usr/include/s390x-linux-gnu/c++) ; do test -e \\$f || ln -s /usr/include/s390x-linux-gnu/c++/\\$f . ; done ) \\\\\"\n+  echo \" && ln -s \\$(ls -d /usr/include/s390x-linux-gnu/* | grep -v '/c++\\$') /usr/local/include \\\\\"\n+  echo \" && ln -sf ../local/bin/g++-$gcc_version /usr/bin/g++-7 \\\\\"\n+  echo \" && ln -sf ../local/bin/gcc-$gcc_version /usr/bin/gcc-7\"\n+fi\n+if [ $dist != centos ] ; then\n+  echo \"\"\n+  echo \"ENV CC=gcc-7 CXX=g++-7\"\n+fi\n+}\n+\n+install_cmake() {\n+if [ $dist == centos ] ; then\n+  echo \"\"\n+  local cmake_version=3.11\n+  local cmake_name=cmake-$cmake_version.4\n+  echo \"# Install cmake.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O cmake.tar.gz https://cmake.org/files/v$cmake_version/$cmake_name.tar.gz \\\\\"\n+  echo \" && tar -xzf cmake.tar.gz \\\\\"\n+  echo \" && cd $cmake_name \\\\\"\n+  echo \" && export LDFLAGS='-static-libstdc++' \\\\\"\n+  echo \" && ./configure \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf cmake.tar.gz $cmake_name\"\n+fi\n+}\n+\n+prepare_user() {\n+  # Ensure authorized_keys exists.\n+  test -f authorized_keys || touch authorized_keys\n+  # Ensure github.com is a known host.\n+  ( test -f known_hosts && grep -q '^github.com ' known_hosts ) \\\n+    || ssh-keyscan github.com >> known_hosts\n+}\n+\n+create_user() {\n+  echo \"\"\n+  echo \"# Add user home and copy authorized_keys and known_hosts.\"\n+  echo \"RUN useradd -ms /bin/bash $user \\\\\"\n+  echo \" && mkdir /home/$user/.ssh \\\\\"\n+  echo \" && chmod 700 /home/$user/.ssh\"\n+  echo \"COPY authorized_keys known_hosts /home/$user/.ssh/\"\n+  echo \"RUN chown -R $user:$user /home/$user \\\\\"\n+  echo \" && chmod 600 /home/$user/.ssh/authorized_keys /home/$user/.ssh/known_hosts\"\n+}\n+\n+install_freemarker() {\n+  echo \"\"\n+  local freemarker_version=2.3.8\n+  echo \"# Download and extract freemarker.jar to /root/freemarker.jar.\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA1NTE5MQ=="}, "originalCommit": {"oid": "24771d8a3d3bf6d37d10a0ddf97a4d4b6b478c46"}, "originalPosition": 544}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NDg4MzU0OnYy", "diffSide": "RIGHT", "path": "buildenv/docker/mkdocker.sh", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNDowNzozM1rOGNvEfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMDoyMDoyNFrOGOPeeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA1NTg3MA==", "bodyText": "Perhaps git_cache is a better name, but right now we're using openjdk_cache for all the Jenkins nodes (as per https://github.com/eclipse/openj9/blob/master/buildenv/jenkins/variables/defaults.yml#L151). If we switch we'd have to update all the nodes, as well as the defaults.yml and the updater job (https://github.com/eclipse/openj9/blob/master/buildenv/jenkins/jobs/infrastructure/Update-Reference-Repos.groovy#L148).\nAgain, not currently using the images so this wouldn't immediately break anything.", "url": "https://github.com/eclipse-openj9/openj9/pull/9371#discussion_r417055870", "createdAt": "2020-04-29T04:07:33Z", "author": {"login": "AdamBrousseau"}, "path": "buildenv/docker/mkdocker.sh", "diffHunk": "@@ -0,0 +1,697 @@\n+#!/bin/bash -\n+\n+print_license() {\n+cat <<- EOF\n+# Copyright (c) 2019, 2020 IBM Corp. and others\n+#\n+# This program and the accompanying materials are made available under\n+# the terms of the Eclipse Public License 2.0 which accompanies this\n+# distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+# or the Apache License, Version 2.0 which accompanies this distribution and\n+# is available at https://www.apache.org/licenses/LICENSE-2.0.\n+#\n+# This Source Code may also be made available under the following\n+# Secondary Licenses when the conditions for such availability set\n+# forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+# General Public License, version 2 with the GNU Classpath\n+# Exception [1] and GNU General Public License, version 2 with the\n+# OpenJDK Assembly Exception [2].\n+#\n+# [1] https://www.gnu.org/software/classpath/license.html\n+# [2] http://openjdk.java.net/legal/assembly-exception.html\n+#\n+# SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+EOF\n+}\n+\n+usage() {\n+  echo \"Usage: $0 [OPTION]...\"\n+  echo \"Generate a Dockerfile for building OpenJ9\"\n+  echo \"\"\n+  echo \"Options:\"\n+  echo \"  --help|-h      print this help, then exit\"\n+  echo \"  --arch=...     specify the processor architecture (default: host architecture)\"\n+  echo \"  --build        build the docker image (overrides '--print')\"\n+  echo \"  --cuda         include CUDA header files\"\n+  echo \"  --dist=...     specify the Linux distribution (e.g. centos, ubuntu)\"\n+  echo \"  --print        write the Dockerfile to stdout (default; overrides '--build')\"\n+  echo \"  --tag=...      specify a name for the docker image (may be repeated, default: none)\"\n+  echo \"  --user=...     specify the user name (default: 'jenkins')\"\n+  echo \"  --version=...  specify the distribution version (e.g. 6.9, 16.04)\"\n+  echo \"\"\n+  local arch=\"$(uname -m)\"\n+  echo \"Supported build patterns on this host ($arch):\"\n+if [ $arch = x86_64 ] ; then\n+  echo \"  bash mkdocker.sh --tag=openj9/cent69 --dist=centos --version=6.9 --build\"\n+fi\n+if [ $arch = x86_64 -o $arch = ppc64le ] ; then\n+  echo \"  bash mkdocker.sh --tag=openj9/cent7  --dist=centos --version=7   --build\"\n+fi\n+  echo \"  bash mkdocker.sh --tag=openj9/ub16   --dist=ubuntu --version=16  --build\"\n+  echo \"  bash mkdocker.sh --tag=openj9/ub18   --dist=ubuntu --version=18  --build\"\n+  echo \"  bash mkdocker.sh --tag=openj9/ub20   --dist=ubuntu --version=20  --build\"\n+  exit 1\n+}\n+\n+# Global configuration variables.\n+action=print\n+arch=\n+cuda=no\n+dist=unspecified\n+tags=()\n+user=jenkins\n+version=unspecified\n+\n+# Frequently used commands.\n+wget_O=\"wget --progress=dot:mega -O\"\n+\n+parse_options() {\n+  for arg in \"$@\" ; do\n+    case \"$arg\" in\n+      -h | --help)\n+        usage\n+        ;;\n+      --arch=*)\n+        arch=\"${arg#*=}\"\n+        ;;\n+      --build)\n+        action=build\n+        ;;\n+      --cuda)\n+        cuda=9.0\n+        ;;\n+      --dist=*)\n+        dist=\"${arg#*=}\"\n+        ;;\n+      --print)\n+        action=print\n+        ;;\n+      --tag=*)\n+        tags+=(\"${arg#*=}\")\n+        ;;\n+      --user=*)\n+        user=\"${arg#*=}\"\n+        ;;\n+      --version=*)\n+        version=\"${arg#*=}\"\n+        ;;\n+      *) # bad option\n+        echo \"Unsupported option: '$arg'\" >&2\n+        usage\n+        ;;\n+    esac\n+  done\n+}\n+\n+validate_options() {\n+  if [ \"x$arch\" = x ] ; then\n+    arch=\"$(uname -m)\"\n+  fi\n+\n+  case \"$arch\" in\n+    ppc64le | s390x | x86_64)\n+      ;;\n+    *)\n+      echo \"Unsupported architecture: '$arch'\" >&2\n+      exit 1\n+      ;;\n+  esac\n+\n+  # Validate the distribution and version.\n+  case \"$dist\" in\n+    centos)\n+      if [ $arch = s390x ] ; then\n+        echo \"CentOS is not supported on $arch\" >&2\n+        exit 1\n+      fi\n+      case $version in\n+        6.9)\n+          if [ $arch = ppc64le ] ; then\n+            echo \"CentOS version 6.9 is not supported on $arch\" >&2\n+            exit 1\n+          fi\n+          ;;\n+        7)\n+          ;;\n+        unspecified)\n+          echo \"Unspecified CentOS version: use '--version' option\" >&2\n+          exit 1\n+          ;;\n+        *)\n+          echo \"Unsupported CentOS version: '$version'\" >&2\n+          exit 1\n+          ;;\n+      esac\n+      ;;\n+    ubuntu)\n+      case $version in\n+        16 | 18 | 20)\n+          version=$version.04\n+          ;;\n+        16.04 | 18.04 | 20.04)\n+          ;;\n+        unspecified)\n+          echo \"Unspecified Ubuntu version: use '--version' option\" >&2\n+          exit 1\n+          ;;\n+        *)\n+          echo \"Unsupported Ubuntu version: '$version'\" >&2\n+          exit 1\n+          ;;\n+      esac\n+      ;;\n+    unspecified)\n+      echo \"Unspecified distribution: use '--dist' option\" >&2\n+      exit 1\n+      ;;\n+    *)\n+      echo \"Unsupported distribution: '$dist'\" >&2\n+      exit 1\n+      ;;\n+  esac\n+\n+  # If CUDA is requested, validate the architecture.\n+  if [ $cuda != no ] ; then\n+    case \"$arch\" in\n+      ppc64le | x86_64)\n+        ;;\n+      *)\n+        echo \"CUDA is not supported on architecture: '$arch'\" >&2\n+        exit 1\n+        ;;\n+    esac\n+  fi\n+}\n+\n+build_cmd() {\n+  local cmd=build\n+  local file=$1\n+  for tag in ${tags[@]} ; do\n+    cmd=\"$cmd --tag $tag\"\n+  done\n+  echo $cmd --file $file .\n+}\n+\n+preamble() {\n+  echo \"\"\n+  echo \"# Generated by: mkdocker.sh $command_line\"\n+  echo \"\"\n+  echo \"# To use this docker file:\"\n+  echo \"# First, copy your public ssh key into authorized_keys.\"\n+  echo \"# Then, in the directory containing the Dockerfile, authorized_keys\"\n+  echo \"# file, and known_hosts file, run:\"\n+  echo \"#   docker $(build_cmd Dockerfile)\"\n+  echo \"#\"\n+if [ ${#tags[@]} -lt 2 ] ; then\n+  echo \"# To start a container based on the resulting image, run this command:\"\n+else\n+  echo \"# To start a container based on the resulting image, run one of these commands:\"\n+fi\n+if [ ${#tags[@]} -eq 0 ] ; then\n+  echo \"#   docker run -it <image>\"\n+else\n+for tag in ${tags[@]} ; do\n+  echo \"#   docker run -it $tag\"\n+done\n+fi\n+  echo \"\"\n+if [ $cuda != no ] ; then\n+  echo \"FROM nvidia/cuda:${cuda}-devel-ubuntu16.04 AS cuda-dev\"\n+  echo \"\"\n+fi\n+  echo \"FROM $dist:$version\"\n+}\n+\n+install_centos_packages() {\n+  echo \"RUN yum -y update \\\\\"\n+if [ $version = 6.9 ] ; then\n+  echo \" && yum -y install https://\\$(rpm -E '%{?centos:centos}%{!?centos:rhel}%{rhel}').iuscommunity.org/ius-release.rpm \\\\\"\n+fi\n+  echo \" && yum -y install \\\\\"\n+  echo \"    alsa-lib-devel \\\\\"\n+  echo \"    automake \\\\\" # required to update make\n+  echo \"    bind-utils \\\\\"\n+  echo \"    bison \\\\\"\n+  echo \"    bzip2 \\\\\"\n+  echo \"    ca-certificates \\\\\"\n+  echo \"    cpio \\\\\"\n+  echo \"    cups-devel \\\\\"\n+  echo \"    curl-devel \\\\\" # required by git\n+  echo \"    elfutils-libelf-devel \\\\\"\n+  echo \"    expat-devel \\\\\" # required by git and the xml parser\n+  echo \"    file-devel \\\\\"\n+  echo \"    file-libs \\\\\"\n+  echo \"    flex \\\\\"\n+  echo \"    fontconfig \\\\\"\n+  echo \"    fontconfig-devel \\\\\"\n+  echo \"    freetype-devel \\\\\"\n+  echo \"    gettext \\\\\"\n+  echo \"    gettext-devel \\\\\" # required by git\n+  echo \"    glibc \\\\\"\n+  echo \"    glibc-common \\\\\"\n+  echo \"    glibc-devel \\\\\"\n+  echo \"    gmp-devel \\\\\"\n+  echo \"    lbzip2 \\\\\"\n+  echo \"    libdwarf \\\\\"\n+  echo \"    libdwarf-devel \\\\\"\n+  echo \"    libffi-devel \\\\\"\n+  echo \"    libstdc++-static \\\\\"\n+  echo \"    libX11-devel \\\\\"\n+  echo \"    libXext-devel \\\\\"\n+  echo \"    libXi-devel \\\\\"\n+  echo \"    libXrandr-devel \\\\\"\n+  echo \"    libXrender-devel \\\\\"\n+  echo \"    libXt-devel \\\\\"\n+  echo \"    libXtst-devel \\\\\"\n+  echo \"    make \\\\\"\n+  echo \"    mesa-libGL-devel \\\\\"\n+  echo \"    mpfr-devel \\\\\"\n+  echo \"    ntp \\\\\"\n+  echo \"    numactl-devel \\\\\"\n+  echo \"    openssh-clients \\\\\"\n+  echo \"    openssh-server \\\\\"\n+  echo \"    openssl-devel \\\\\" # required by git, etc.\n+  echo \"    perl-CPAN \\\\\"\n+  echo \"    perl-DBI \\\\\"\n+  echo \"    perl-devel \\\\\"\n+  echo \"    perl-ExtUtils-MakeMaker \\\\\" # required by git\n+  echo \"    perl-GD \\\\\"\n+  echo \"    perl-libwww-perl \\\\\"\n+  echo \"    perl-Time-HiRes \\\\\"\n+  echo \"    texinfo \\\\\" # required to update make\n+  echo \"    unzip \\\\\"\n+  echo \"    vim \\\\\"\n+  echo \"    wget \\\\\"\n+  echo \"    xorg-x11-server-Xvfb \\\\\"\n+  echo \"    xz \\\\\"\n+  echo \"    zip \\\\\"\n+  echo \"    zlib-devel \\\\\" # required by git, python\n+  echo \" && yum clean all\"\n+  echo \"\"\n+  local autoconf_version=2.69\n+  echo \"# Install autoconf.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O autoconf.tar.gz https://fossies.org/linux/misc/autoconf-$autoconf_version.tar.gz \\\\\"\n+  echo \" && tar -xzf autoconf.tar.gz \\\\\"\n+  echo \" && cd autoconf-$autoconf_version \\\\\"\n+  echo \" && ./configure --build=\\$(rpm --eval %{_host}) \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf autoconf.tar.gz autoconf-$autoconf_version\"\n+  echo \"\"\n+  echo \"# Install gcc-7.5.\"\n+  echo \"RUN cd /usr/local \\\\\"\n+  echo \" && $wget_O gcc-7.tar.xz 'https://ci.adoptopenjdk.net/userContent/gcc/gcc750+ccache.$arch.tar.xz' \\\\\"\n+  echo \" && tar -xJf gcc-7.tar.xz --strip-components=1 \\\\\"\n+  echo \" && ln -sf ../local/bin/gcc-7.5 /usr/bin/gcc \\\\\"\n+  echo \" && ln -sf ../local/bin/g++-7.5 /usr/bin/g++ \\\\\"\n+  echo \" && ln -sf gcc /usr/bin/cc \\\\\"\n+  echo \" && ln -sf g++ /usr/bin/c++ \\\\\"\n+  echo \" && rm -f gcc-7.tar.xz\"\n+  echo \"\"\n+  local ant_version=1.10.5\n+  echo \"# Install ant.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O ant.zip https://archive.apache.org/dist/ant/binaries/apache-ant-$ant_version-bin.zip \\\\\"\n+  echo \" && unzip -q ant.zip -d /opt \\\\\"\n+  echo \" && ln -s apache-ant-$ant_version /opt/ant \\\\\"\n+  echo \" && ln -s /opt/ant/bin/ant /usr/bin/ant \\\\\"\n+  echo \" && $wget_O ant-contrib.tar.gz https://sourceforge.net/projects/ant-contrib/files/ant-contrib/1.0b3/ant-contrib-1.0b3-bin.tar.gz \\\\\"\n+  echo \" && tar -xzf ant-contrib.tar.gz \\\\\"\n+  echo \" && mv ant-contrib/ant-contrib-1.0b3.jar /opt/ant/lib \\\\\"\n+  echo \" && rm -rf ant-contrib ant.zip ant-contrib.tar.gz\"\n+  echo \"\"\n+  local git_version=2.5.3\n+  echo \"# Install git.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O git.tar.gz https://www.kernel.org/pub/software/scm/git/git-$git_version.tar.gz \\\\\"\n+  echo \" && tar -xzf git.tar.gz \\\\\"\n+  echo \" && cd git-$git_version \\\\\"\n+  echo \" && make prefix=/usr/local all \\\\\"\n+  echo \" && make prefix=/usr/local install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf git.tar.gz git-$git_version\"\n+  # updating make requires automake 1.15\n+  echo \"\"\n+  local automake_version=1.15\n+  echo \"# Update automake.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O automake.tar.gz http://ftp.gnu.org/gnu/automake/automake-$automake_version.tar.gz \\\\\"\n+  echo \" && tar -xzf automake.tar.gz \\\\\"\n+  echo \" && cd automake-$automake_version \\\\\"\n+  echo \" && ./configure \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf automake.tar.gz automake-$automake_version\"\n+if [ $arch = x86_64 ] ; then\n+  echo \"\"\n+  local gettext_version=0.20.1\n+  echo \"# Update gettext.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O gettext.tar.gz http://ftp.gnu.org/gnu/gettext/gettext-$gettext_version.tar.gz \\\\\"\n+  echo \" && tar -xzf gettext.tar.gz \\\\\"\n+  echo \" && cd gettext-$gettext_version \\\\\"\n+  echo \" && ./autogen.sh --skip-gnulib \\\\\"\n+  echo \" && ./configure --disable-nls \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf gettext.tar.gz gettext-$gettext_version\"\n+fi\n+  echo \"\"\n+if [ $arch = ppc64le ] ; then\n+  local make_version=4.2\n+else\n+  local make_version=4.1\n+fi\n+  echo \"# Update make.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O make.tar.gz https://github.com/mirror/make/archive/$make_version.tar.gz \\\\\"\n+  echo \" && tar -xzf make.tar.gz \\\\\"\n+  echo \" && cd make-$make_version \\\\\"\n+  echo \" && ACLOCAL_PATH=/usr/share/aclocal autoreconf -i \\\\\"\n+  echo \" && ./configure \\\\\"\n+  echo \" && make update \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && ln -s make /usr/local/bin/gmake \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf make.tar.gz make-$make_version\"\n+if [ $arch = x86_64 ] ; then\n+  echo \"\"\n+  local nasm_version=2.13.03\n+  echo \"# Install nasm.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O nasm.tar.gz https://www.nasm.us/pub/nasm/releasebuilds/$nasm_version/nasm-$nasm_version.tar.gz \\\\\"\n+  echo \" && tar -xzf nasm.tar.gz \\\\\"\n+  echo \" && cd nasm-$nasm_version \\\\\"\n+  echo \" && ./configure -prefix=/usr/local \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf nasm.tar.gz nasm-$nasm_version\"\n+fi\n+}\n+\n+install_ubuntu_packages() {\n+  echo \"RUN apt-get update \\\\\"\n+  echo \" && apt-get install -qq -y --no-install-recommends \\\\\"\n+  echo \"    software-properties-common \\\\\"\n+if [ $version = 16.04 ] ; then\n+  echo \"    python-software-properties \\\\\"\n+fi\n+  echo \" && add-apt-repository ppa:ubuntu-toolchain-r/test \\\\\"\n+  echo \" && apt-get update \\\\\"\n+  echo \" && apt-get install -qq -y --no-install-recommends \\\\\"\n+  echo \"    ant \\\\\"\n+  echo \"    ant-contrib \\\\\"\n+  echo \"    autoconf \\\\\"\n+  echo \"    build-essential \\\\\"\n+  echo \"    ca-certificates \\\\\"\n+  echo \"    cmake \\\\\"\n+  echo \"    cpio \\\\\"\n+  echo \"    curl \\\\\"\n+  echo \"    file \\\\\"\n+if [ $arch != s390x ] ; then\n+  echo \"    g++-7 \\\\\"\n+  echo \"    gcc-7 \\\\\"\n+fi\n+  echo \"    gdb \\\\\"\n+  echo \"    git \\\\\"\n+  echo \"    libasound2-dev \\\\\"\n+  echo \"    libcups2-dev \\\\\"\n+  echo \"    libdwarf-dev \\\\\"\n+  echo \"    libelf-dev \\\\\"\n+  echo \"    libexpat1-dev \\\\\" # required by the xml parser\n+  echo \"    libffi-dev \\\\\"\n+  echo \"    libfontconfig \\\\\"\n+  echo \"    libfontconfig1-dev \\\\\"\n+  echo \"    libfreetype6-dev \\\\\"\n+if [ $arch != s390x ] ; then\n+  echo \"    libnuma-dev \\\\\"\n+fi\n+if [ $arch = s390x ] ; then\n+  echo \"    libmpc3 \\\\\"\n+fi\n+  echo \"    libssl-dev \\\\\"\n+  echo \"    libx11-dev \\\\\"\n+  echo \"    libxext-dev \\\\\"\n+  echo \"    libxrandr-dev \\\\\"\n+  echo \"    libxrender-dev \\\\\"\n+  echo \"    libxt-dev \\\\\"\n+  echo \"    libxtst-dev \\\\\"\n+  echo \"    make \\\\\"\n+if [ $arch = x86_64 ] ; then\n+  echo \"    nasm \\\\\"\n+fi\n+  echo \"    openssh-client \\\\\"\n+  echo \"    openssh-server \\\\\"\n+  echo \"    perl \\\\\"\n+  echo \"    pkg-config \\\\\"\n+if [ $version = 16.04 ] ; then\n+  echo \"    realpath \\\\\"\n+fi\n+  echo \"    ssh \\\\\"\n+  echo \"    unzip \\\\\"\n+  echo \"    wget \\\\\"\n+  echo \"    xvfb \\\\\"\n+  echo \"    zip \\\\\"\n+  echo \"    zlib1g-dev \\\\\"\n+  echo \" && rm -rf /var/lib/apt/lists/*\"\n+}\n+\n+install_packages() {\n+  echo \"\"\n+  echo \"# Install required OS tools.\"\n+  echo \"\"\n+if [ $dist = centos ] ; then\n+  install_centos_packages\n+else\n+  install_ubuntu_packages\n+fi\n+}\n+\n+install_compilers() {\n+if [ $arch = s390x ] ; then\n+  echo \"\"\n+  local gcc_version=7.5\n+  echo \"# Install gcc.\"\n+  echo \"RUN cd /usr/local \\\\\"\n+  echo \" && $wget_O gcc.tar.xz 'https://ci.adoptopenjdk.net/userContent/gcc/gcc750+ccache.$arch.tar.xz' \\\\\"\n+  echo \" && tar -xJf gcc.tar.xz --strip-components=1 \\\\\"\n+  echo \" && rm -f gcc.tar.xz\"\n+  echo \"\"\n+  echo \"# Create various symbolic links.\"\n+  echo \"RUN ln -s lib/$arch-linux-gnu /usr/lib64 \\\\\"\n+if [ $dist:$version = ubuntu:18.04 ] ; then\n+  # On s390x perl needs version 4 of mpfr, but we only have version 6.\n+  echo \" && ln -s libmpfr.so.6 /usr/lib64/libmpfr.so.4 \\\\\"\n+fi\n+  # /usr/local/include/c++ is a directory that already exists so we create these symbolic links in two steps.\n+  echo \" && ( cd /usr/local/include && for f in \\$(ls /usr/include/s390x-linux-gnu/c++) ; do test -e \\$f || ln -s /usr/include/s390x-linux-gnu/c++/\\$f . ; done ) \\\\\"\n+  echo \" && ln -s \\$(ls -d /usr/include/s390x-linux-gnu/* | grep -v '/c++\\$') /usr/local/include \\\\\"\n+  echo \" && ln -sf ../local/bin/g++-$gcc_version /usr/bin/g++-7 \\\\\"\n+  echo \" && ln -sf ../local/bin/gcc-$gcc_version /usr/bin/gcc-7\"\n+fi\n+if [ $dist != centos ] ; then\n+  echo \"\"\n+  echo \"ENV CC=gcc-7 CXX=g++-7\"\n+fi\n+}\n+\n+install_cmake() {\n+if [ $dist == centos ] ; then\n+  echo \"\"\n+  local cmake_version=3.11\n+  local cmake_name=cmake-$cmake_version.4\n+  echo \"# Install cmake.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O cmake.tar.gz https://cmake.org/files/v$cmake_version/$cmake_name.tar.gz \\\\\"\n+  echo \" && tar -xzf cmake.tar.gz \\\\\"\n+  echo \" && cd $cmake_name \\\\\"\n+  echo \" && export LDFLAGS='-static-libstdc++' \\\\\"\n+  echo \" && ./configure \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf cmake.tar.gz $cmake_name\"\n+fi\n+}\n+\n+prepare_user() {\n+  # Ensure authorized_keys exists.\n+  test -f authorized_keys || touch authorized_keys\n+  # Ensure github.com is a known host.\n+  ( test -f known_hosts && grep -q '^github.com ' known_hosts ) \\\n+    || ssh-keyscan github.com >> known_hosts\n+}\n+\n+create_user() {\n+  echo \"\"\n+  echo \"# Add user home and copy authorized_keys and known_hosts.\"\n+  echo \"RUN useradd -ms /bin/bash $user \\\\\"\n+  echo \" && mkdir /home/$user/.ssh \\\\\"\n+  echo \" && chmod 700 /home/$user/.ssh\"\n+  echo \"COPY authorized_keys known_hosts /home/$user/.ssh/\"\n+  echo \"RUN chown -R $user:$user /home/$user \\\\\"\n+  echo \" && chmod 600 /home/$user/.ssh/authorized_keys /home/$user/.ssh/known_hosts\"\n+}\n+\n+install_freemarker() {\n+  echo \"\"\n+  local freemarker_version=2.3.8\n+  echo \"# Download and extract freemarker.jar to /root/freemarker.jar.\"\n+  echo \"RUN mkdir -p /root \\\\\"\n+  echo \" && cd /root \\\\\"\n+  echo \" && $wget_O freemarker.tar.gz https://sourceforge.net/projects/freemarker/files/freemarker/$freemarker_version/freemarker-$freemarker_version.tar.gz/download \\\\\"\n+  echo \" && tar -xzf freemarker.tar.gz freemarker-$freemarker_version/lib/freemarker.jar --strip=2 \\\\\"\n+  echo \" && rm -f freemarker.tar.gz\"\n+}\n+\n+bootjdk_dirs() {\n+  for version in $@ ; do\n+    if [ $version = 8 ] ; then\n+      echo /usr/lib/jvm/adoptojdk-java-80\n+    else\n+      echo /usr/lib/jvm/adoptojdk-java-$version\n+    fi\n+  done\n+}\n+\n+bootjdk_url() {\n+  local version=$1\n+  if [ $arch = x86_64 ] ; then\n+    echo https://api.adoptopenjdk.net/v3/binary/latest/$version/ga/linux/x64/jdk/openj9/normal/adoptopenjdk\n+  else\n+    echo https://api.adoptopenjdk.net/v3/binary/latest/$version/ga/linux/$arch/jdk/openj9/normal/adoptopenjdk\n+  fi\n+}\n+\n+install_bootjdks() {\n+  local versions=\"8 11 13 14\"\n+  echo \"\"\n+  echo \"# Download and install boot JDKs from AdoptOpenJDK.\"\n+  echo \"RUN cd /tmp \\\\\"\n+for version in $versions ; do\n+  echo \" && $wget_O jdk$version.tar.gz $(bootjdk_url $version) \\\\\"\n+done\n+  echo \" && mkdir -p\" $(bootjdk_dirs $versions) \"\\\\\"\n+for version in $versions ; do\n+  echo \" && tar -xzf jdk$version.tar.gz --directory=$(bootjdk_dirs $version)/ --strip=1 \\\\\"\n+done\n+  echo \" && rm -f jdk*.tar.gz\"\n+}\n+\n+install_cuda() {\n+  echo \"\"\n+  echo \"# Copy header files necessary to build a VM with CUDA support.\"\n+  echo \"RUN mkdir -p /usr/local/cuda-${cuda}/nvvm\"\n+  echo \"COPY --from=cuda-dev /usr/local/cuda-${cuda}/include      /usr/local/cuda-${cuda}/include\"\n+  echo \"COPY --from=cuda-dev /usr/local/cuda-${cuda}/nvvm/include /usr/local/cuda-${cuda}/nvvm/include\"\n+  echo \"ENV CUDA_HOME=/usr/local/cuda-${cuda}\"\n+}\n+\n+install_python() {\n+  local python_version=3.7.3\n+  echo \"\"\n+  echo \"# Install python.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O python.tar.xz https://www.python.org/ftp/python/$python_version/Python-$python_version.tar.xz \\\\\"\n+  echo \" && tar -xJf python.tar.xz \\\\\"\n+  echo \" && cd Python-$python_version \\\\\"\n+  echo \" && ./configure --prefix=/usr/local \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf python.tar.xz Python-$python_version\"\n+}\n+\n+adjust_ldconfig() {\n+  echo \"\"\n+  echo \"# Run ldconfig to discover newly installed shared libraries.\"\n+  echo \"RUN for dir in lib lib64 ; do echo /usr/local/$dir ; done > /etc/ld.so.conf.d/usr-local.conf \\\\\"\n+  echo \" && ldconfig\"\n+}\n+\n+# called as: add_git_remote remote url\n+add_git_remote() {\n+  echo \" && git remote add ${1} ${2} \\\\\"\n+  # Like-named (and conflicting) tags exist in multiple repositories: don't fetch any tags.\n+  echo \" && git config remote.${1}.tagopt --no-tags \\\\\"\n+}\n+\n+create_git_cache() {\n+  # The jdk14 remote is fetched first because that repository was subjected to\n+  # 'git gc --aggressive --prune=all' before it was first published making it much\n+  # smaller than the other jdk repositories. There is a large degree of overlap\n+  # among the jdk repositories so a relatively small number of commits must be\n+  # fetched from the others.\n+  echo \"\"\n+  echo \"# Setup a reference repository cache for faster clones in containers.\"\n+  echo \"RUN mkdir /home/$user/git_cache \\\\\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24771d8a3d3bf6d37d10a0ddf97a4d4b6b478c46"}, "originalPosition": 632}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI3NDIzOA==", "bodyText": "This is easily changed once we have agreement on what it should be called.", "url": "https://github.com/eclipse-openj9/openj9/pull/9371#discussion_r417274238", "createdAt": "2020-04-29T12:25:46Z", "author": {"login": "keithc-ca"}, "path": "buildenv/docker/mkdocker.sh", "diffHunk": "@@ -0,0 +1,697 @@\n+#!/bin/bash -\n+\n+print_license() {\n+cat <<- EOF\n+# Copyright (c) 2019, 2020 IBM Corp. and others\n+#\n+# This program and the accompanying materials are made available under\n+# the terms of the Eclipse Public License 2.0 which accompanies this\n+# distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+# or the Apache License, Version 2.0 which accompanies this distribution and\n+# is available at https://www.apache.org/licenses/LICENSE-2.0.\n+#\n+# This Source Code may also be made available under the following\n+# Secondary Licenses when the conditions for such availability set\n+# forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+# General Public License, version 2 with the GNU Classpath\n+# Exception [1] and GNU General Public License, version 2 with the\n+# OpenJDK Assembly Exception [2].\n+#\n+# [1] https://www.gnu.org/software/classpath/license.html\n+# [2] http://openjdk.java.net/legal/assembly-exception.html\n+#\n+# SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+EOF\n+}\n+\n+usage() {\n+  echo \"Usage: $0 [OPTION]...\"\n+  echo \"Generate a Dockerfile for building OpenJ9\"\n+  echo \"\"\n+  echo \"Options:\"\n+  echo \"  --help|-h      print this help, then exit\"\n+  echo \"  --arch=...     specify the processor architecture (default: host architecture)\"\n+  echo \"  --build        build the docker image (overrides '--print')\"\n+  echo \"  --cuda         include CUDA header files\"\n+  echo \"  --dist=...     specify the Linux distribution (e.g. centos, ubuntu)\"\n+  echo \"  --print        write the Dockerfile to stdout (default; overrides '--build')\"\n+  echo \"  --tag=...      specify a name for the docker image (may be repeated, default: none)\"\n+  echo \"  --user=...     specify the user name (default: 'jenkins')\"\n+  echo \"  --version=...  specify the distribution version (e.g. 6.9, 16.04)\"\n+  echo \"\"\n+  local arch=\"$(uname -m)\"\n+  echo \"Supported build patterns on this host ($arch):\"\n+if [ $arch = x86_64 ] ; then\n+  echo \"  bash mkdocker.sh --tag=openj9/cent69 --dist=centos --version=6.9 --build\"\n+fi\n+if [ $arch = x86_64 -o $arch = ppc64le ] ; then\n+  echo \"  bash mkdocker.sh --tag=openj9/cent7  --dist=centos --version=7   --build\"\n+fi\n+  echo \"  bash mkdocker.sh --tag=openj9/ub16   --dist=ubuntu --version=16  --build\"\n+  echo \"  bash mkdocker.sh --tag=openj9/ub18   --dist=ubuntu --version=18  --build\"\n+  echo \"  bash mkdocker.sh --tag=openj9/ub20   --dist=ubuntu --version=20  --build\"\n+  exit 1\n+}\n+\n+# Global configuration variables.\n+action=print\n+arch=\n+cuda=no\n+dist=unspecified\n+tags=()\n+user=jenkins\n+version=unspecified\n+\n+# Frequently used commands.\n+wget_O=\"wget --progress=dot:mega -O\"\n+\n+parse_options() {\n+  for arg in \"$@\" ; do\n+    case \"$arg\" in\n+      -h | --help)\n+        usage\n+        ;;\n+      --arch=*)\n+        arch=\"${arg#*=}\"\n+        ;;\n+      --build)\n+        action=build\n+        ;;\n+      --cuda)\n+        cuda=9.0\n+        ;;\n+      --dist=*)\n+        dist=\"${arg#*=}\"\n+        ;;\n+      --print)\n+        action=print\n+        ;;\n+      --tag=*)\n+        tags+=(\"${arg#*=}\")\n+        ;;\n+      --user=*)\n+        user=\"${arg#*=}\"\n+        ;;\n+      --version=*)\n+        version=\"${arg#*=}\"\n+        ;;\n+      *) # bad option\n+        echo \"Unsupported option: '$arg'\" >&2\n+        usage\n+        ;;\n+    esac\n+  done\n+}\n+\n+validate_options() {\n+  if [ \"x$arch\" = x ] ; then\n+    arch=\"$(uname -m)\"\n+  fi\n+\n+  case \"$arch\" in\n+    ppc64le | s390x | x86_64)\n+      ;;\n+    *)\n+      echo \"Unsupported architecture: '$arch'\" >&2\n+      exit 1\n+      ;;\n+  esac\n+\n+  # Validate the distribution and version.\n+  case \"$dist\" in\n+    centos)\n+      if [ $arch = s390x ] ; then\n+        echo \"CentOS is not supported on $arch\" >&2\n+        exit 1\n+      fi\n+      case $version in\n+        6.9)\n+          if [ $arch = ppc64le ] ; then\n+            echo \"CentOS version 6.9 is not supported on $arch\" >&2\n+            exit 1\n+          fi\n+          ;;\n+        7)\n+          ;;\n+        unspecified)\n+          echo \"Unspecified CentOS version: use '--version' option\" >&2\n+          exit 1\n+          ;;\n+        *)\n+          echo \"Unsupported CentOS version: '$version'\" >&2\n+          exit 1\n+          ;;\n+      esac\n+      ;;\n+    ubuntu)\n+      case $version in\n+        16 | 18 | 20)\n+          version=$version.04\n+          ;;\n+        16.04 | 18.04 | 20.04)\n+          ;;\n+        unspecified)\n+          echo \"Unspecified Ubuntu version: use '--version' option\" >&2\n+          exit 1\n+          ;;\n+        *)\n+          echo \"Unsupported Ubuntu version: '$version'\" >&2\n+          exit 1\n+          ;;\n+      esac\n+      ;;\n+    unspecified)\n+      echo \"Unspecified distribution: use '--dist' option\" >&2\n+      exit 1\n+      ;;\n+    *)\n+      echo \"Unsupported distribution: '$dist'\" >&2\n+      exit 1\n+      ;;\n+  esac\n+\n+  # If CUDA is requested, validate the architecture.\n+  if [ $cuda != no ] ; then\n+    case \"$arch\" in\n+      ppc64le | x86_64)\n+        ;;\n+      *)\n+        echo \"CUDA is not supported on architecture: '$arch'\" >&2\n+        exit 1\n+        ;;\n+    esac\n+  fi\n+}\n+\n+build_cmd() {\n+  local cmd=build\n+  local file=$1\n+  for tag in ${tags[@]} ; do\n+    cmd=\"$cmd --tag $tag\"\n+  done\n+  echo $cmd --file $file .\n+}\n+\n+preamble() {\n+  echo \"\"\n+  echo \"# Generated by: mkdocker.sh $command_line\"\n+  echo \"\"\n+  echo \"# To use this docker file:\"\n+  echo \"# First, copy your public ssh key into authorized_keys.\"\n+  echo \"# Then, in the directory containing the Dockerfile, authorized_keys\"\n+  echo \"# file, and known_hosts file, run:\"\n+  echo \"#   docker $(build_cmd Dockerfile)\"\n+  echo \"#\"\n+if [ ${#tags[@]} -lt 2 ] ; then\n+  echo \"# To start a container based on the resulting image, run this command:\"\n+else\n+  echo \"# To start a container based on the resulting image, run one of these commands:\"\n+fi\n+if [ ${#tags[@]} -eq 0 ] ; then\n+  echo \"#   docker run -it <image>\"\n+else\n+for tag in ${tags[@]} ; do\n+  echo \"#   docker run -it $tag\"\n+done\n+fi\n+  echo \"\"\n+if [ $cuda != no ] ; then\n+  echo \"FROM nvidia/cuda:${cuda}-devel-ubuntu16.04 AS cuda-dev\"\n+  echo \"\"\n+fi\n+  echo \"FROM $dist:$version\"\n+}\n+\n+install_centos_packages() {\n+  echo \"RUN yum -y update \\\\\"\n+if [ $version = 6.9 ] ; then\n+  echo \" && yum -y install https://\\$(rpm -E '%{?centos:centos}%{!?centos:rhel}%{rhel}').iuscommunity.org/ius-release.rpm \\\\\"\n+fi\n+  echo \" && yum -y install \\\\\"\n+  echo \"    alsa-lib-devel \\\\\"\n+  echo \"    automake \\\\\" # required to update make\n+  echo \"    bind-utils \\\\\"\n+  echo \"    bison \\\\\"\n+  echo \"    bzip2 \\\\\"\n+  echo \"    ca-certificates \\\\\"\n+  echo \"    cpio \\\\\"\n+  echo \"    cups-devel \\\\\"\n+  echo \"    curl-devel \\\\\" # required by git\n+  echo \"    elfutils-libelf-devel \\\\\"\n+  echo \"    expat-devel \\\\\" # required by git and the xml parser\n+  echo \"    file-devel \\\\\"\n+  echo \"    file-libs \\\\\"\n+  echo \"    flex \\\\\"\n+  echo \"    fontconfig \\\\\"\n+  echo \"    fontconfig-devel \\\\\"\n+  echo \"    freetype-devel \\\\\"\n+  echo \"    gettext \\\\\"\n+  echo \"    gettext-devel \\\\\" # required by git\n+  echo \"    glibc \\\\\"\n+  echo \"    glibc-common \\\\\"\n+  echo \"    glibc-devel \\\\\"\n+  echo \"    gmp-devel \\\\\"\n+  echo \"    lbzip2 \\\\\"\n+  echo \"    libdwarf \\\\\"\n+  echo \"    libdwarf-devel \\\\\"\n+  echo \"    libffi-devel \\\\\"\n+  echo \"    libstdc++-static \\\\\"\n+  echo \"    libX11-devel \\\\\"\n+  echo \"    libXext-devel \\\\\"\n+  echo \"    libXi-devel \\\\\"\n+  echo \"    libXrandr-devel \\\\\"\n+  echo \"    libXrender-devel \\\\\"\n+  echo \"    libXt-devel \\\\\"\n+  echo \"    libXtst-devel \\\\\"\n+  echo \"    make \\\\\"\n+  echo \"    mesa-libGL-devel \\\\\"\n+  echo \"    mpfr-devel \\\\\"\n+  echo \"    ntp \\\\\"\n+  echo \"    numactl-devel \\\\\"\n+  echo \"    openssh-clients \\\\\"\n+  echo \"    openssh-server \\\\\"\n+  echo \"    openssl-devel \\\\\" # required by git, etc.\n+  echo \"    perl-CPAN \\\\\"\n+  echo \"    perl-DBI \\\\\"\n+  echo \"    perl-devel \\\\\"\n+  echo \"    perl-ExtUtils-MakeMaker \\\\\" # required by git\n+  echo \"    perl-GD \\\\\"\n+  echo \"    perl-libwww-perl \\\\\"\n+  echo \"    perl-Time-HiRes \\\\\"\n+  echo \"    texinfo \\\\\" # required to update make\n+  echo \"    unzip \\\\\"\n+  echo \"    vim \\\\\"\n+  echo \"    wget \\\\\"\n+  echo \"    xorg-x11-server-Xvfb \\\\\"\n+  echo \"    xz \\\\\"\n+  echo \"    zip \\\\\"\n+  echo \"    zlib-devel \\\\\" # required by git, python\n+  echo \" && yum clean all\"\n+  echo \"\"\n+  local autoconf_version=2.69\n+  echo \"# Install autoconf.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O autoconf.tar.gz https://fossies.org/linux/misc/autoconf-$autoconf_version.tar.gz \\\\\"\n+  echo \" && tar -xzf autoconf.tar.gz \\\\\"\n+  echo \" && cd autoconf-$autoconf_version \\\\\"\n+  echo \" && ./configure --build=\\$(rpm --eval %{_host}) \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf autoconf.tar.gz autoconf-$autoconf_version\"\n+  echo \"\"\n+  echo \"# Install gcc-7.5.\"\n+  echo \"RUN cd /usr/local \\\\\"\n+  echo \" && $wget_O gcc-7.tar.xz 'https://ci.adoptopenjdk.net/userContent/gcc/gcc750+ccache.$arch.tar.xz' \\\\\"\n+  echo \" && tar -xJf gcc-7.tar.xz --strip-components=1 \\\\\"\n+  echo \" && ln -sf ../local/bin/gcc-7.5 /usr/bin/gcc \\\\\"\n+  echo \" && ln -sf ../local/bin/g++-7.5 /usr/bin/g++ \\\\\"\n+  echo \" && ln -sf gcc /usr/bin/cc \\\\\"\n+  echo \" && ln -sf g++ /usr/bin/c++ \\\\\"\n+  echo \" && rm -f gcc-7.tar.xz\"\n+  echo \"\"\n+  local ant_version=1.10.5\n+  echo \"# Install ant.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O ant.zip https://archive.apache.org/dist/ant/binaries/apache-ant-$ant_version-bin.zip \\\\\"\n+  echo \" && unzip -q ant.zip -d /opt \\\\\"\n+  echo \" && ln -s apache-ant-$ant_version /opt/ant \\\\\"\n+  echo \" && ln -s /opt/ant/bin/ant /usr/bin/ant \\\\\"\n+  echo \" && $wget_O ant-contrib.tar.gz https://sourceforge.net/projects/ant-contrib/files/ant-contrib/1.0b3/ant-contrib-1.0b3-bin.tar.gz \\\\\"\n+  echo \" && tar -xzf ant-contrib.tar.gz \\\\\"\n+  echo \" && mv ant-contrib/ant-contrib-1.0b3.jar /opt/ant/lib \\\\\"\n+  echo \" && rm -rf ant-contrib ant.zip ant-contrib.tar.gz\"\n+  echo \"\"\n+  local git_version=2.5.3\n+  echo \"# Install git.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O git.tar.gz https://www.kernel.org/pub/software/scm/git/git-$git_version.tar.gz \\\\\"\n+  echo \" && tar -xzf git.tar.gz \\\\\"\n+  echo \" && cd git-$git_version \\\\\"\n+  echo \" && make prefix=/usr/local all \\\\\"\n+  echo \" && make prefix=/usr/local install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf git.tar.gz git-$git_version\"\n+  # updating make requires automake 1.15\n+  echo \"\"\n+  local automake_version=1.15\n+  echo \"# Update automake.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O automake.tar.gz http://ftp.gnu.org/gnu/automake/automake-$automake_version.tar.gz \\\\\"\n+  echo \" && tar -xzf automake.tar.gz \\\\\"\n+  echo \" && cd automake-$automake_version \\\\\"\n+  echo \" && ./configure \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf automake.tar.gz automake-$automake_version\"\n+if [ $arch = x86_64 ] ; then\n+  echo \"\"\n+  local gettext_version=0.20.1\n+  echo \"# Update gettext.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O gettext.tar.gz http://ftp.gnu.org/gnu/gettext/gettext-$gettext_version.tar.gz \\\\\"\n+  echo \" && tar -xzf gettext.tar.gz \\\\\"\n+  echo \" && cd gettext-$gettext_version \\\\\"\n+  echo \" && ./autogen.sh --skip-gnulib \\\\\"\n+  echo \" && ./configure --disable-nls \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf gettext.tar.gz gettext-$gettext_version\"\n+fi\n+  echo \"\"\n+if [ $arch = ppc64le ] ; then\n+  local make_version=4.2\n+else\n+  local make_version=4.1\n+fi\n+  echo \"# Update make.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O make.tar.gz https://github.com/mirror/make/archive/$make_version.tar.gz \\\\\"\n+  echo \" && tar -xzf make.tar.gz \\\\\"\n+  echo \" && cd make-$make_version \\\\\"\n+  echo \" && ACLOCAL_PATH=/usr/share/aclocal autoreconf -i \\\\\"\n+  echo \" && ./configure \\\\\"\n+  echo \" && make update \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && ln -s make /usr/local/bin/gmake \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf make.tar.gz make-$make_version\"\n+if [ $arch = x86_64 ] ; then\n+  echo \"\"\n+  local nasm_version=2.13.03\n+  echo \"# Install nasm.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O nasm.tar.gz https://www.nasm.us/pub/nasm/releasebuilds/$nasm_version/nasm-$nasm_version.tar.gz \\\\\"\n+  echo \" && tar -xzf nasm.tar.gz \\\\\"\n+  echo \" && cd nasm-$nasm_version \\\\\"\n+  echo \" && ./configure -prefix=/usr/local \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf nasm.tar.gz nasm-$nasm_version\"\n+fi\n+}\n+\n+install_ubuntu_packages() {\n+  echo \"RUN apt-get update \\\\\"\n+  echo \" && apt-get install -qq -y --no-install-recommends \\\\\"\n+  echo \"    software-properties-common \\\\\"\n+if [ $version = 16.04 ] ; then\n+  echo \"    python-software-properties \\\\\"\n+fi\n+  echo \" && add-apt-repository ppa:ubuntu-toolchain-r/test \\\\\"\n+  echo \" && apt-get update \\\\\"\n+  echo \" && apt-get install -qq -y --no-install-recommends \\\\\"\n+  echo \"    ant \\\\\"\n+  echo \"    ant-contrib \\\\\"\n+  echo \"    autoconf \\\\\"\n+  echo \"    build-essential \\\\\"\n+  echo \"    ca-certificates \\\\\"\n+  echo \"    cmake \\\\\"\n+  echo \"    cpio \\\\\"\n+  echo \"    curl \\\\\"\n+  echo \"    file \\\\\"\n+if [ $arch != s390x ] ; then\n+  echo \"    g++-7 \\\\\"\n+  echo \"    gcc-7 \\\\\"\n+fi\n+  echo \"    gdb \\\\\"\n+  echo \"    git \\\\\"\n+  echo \"    libasound2-dev \\\\\"\n+  echo \"    libcups2-dev \\\\\"\n+  echo \"    libdwarf-dev \\\\\"\n+  echo \"    libelf-dev \\\\\"\n+  echo \"    libexpat1-dev \\\\\" # required by the xml parser\n+  echo \"    libffi-dev \\\\\"\n+  echo \"    libfontconfig \\\\\"\n+  echo \"    libfontconfig1-dev \\\\\"\n+  echo \"    libfreetype6-dev \\\\\"\n+if [ $arch != s390x ] ; then\n+  echo \"    libnuma-dev \\\\\"\n+fi\n+if [ $arch = s390x ] ; then\n+  echo \"    libmpc3 \\\\\"\n+fi\n+  echo \"    libssl-dev \\\\\"\n+  echo \"    libx11-dev \\\\\"\n+  echo \"    libxext-dev \\\\\"\n+  echo \"    libxrandr-dev \\\\\"\n+  echo \"    libxrender-dev \\\\\"\n+  echo \"    libxt-dev \\\\\"\n+  echo \"    libxtst-dev \\\\\"\n+  echo \"    make \\\\\"\n+if [ $arch = x86_64 ] ; then\n+  echo \"    nasm \\\\\"\n+fi\n+  echo \"    openssh-client \\\\\"\n+  echo \"    openssh-server \\\\\"\n+  echo \"    perl \\\\\"\n+  echo \"    pkg-config \\\\\"\n+if [ $version = 16.04 ] ; then\n+  echo \"    realpath \\\\\"\n+fi\n+  echo \"    ssh \\\\\"\n+  echo \"    unzip \\\\\"\n+  echo \"    wget \\\\\"\n+  echo \"    xvfb \\\\\"\n+  echo \"    zip \\\\\"\n+  echo \"    zlib1g-dev \\\\\"\n+  echo \" && rm -rf /var/lib/apt/lists/*\"\n+}\n+\n+install_packages() {\n+  echo \"\"\n+  echo \"# Install required OS tools.\"\n+  echo \"\"\n+if [ $dist = centos ] ; then\n+  install_centos_packages\n+else\n+  install_ubuntu_packages\n+fi\n+}\n+\n+install_compilers() {\n+if [ $arch = s390x ] ; then\n+  echo \"\"\n+  local gcc_version=7.5\n+  echo \"# Install gcc.\"\n+  echo \"RUN cd /usr/local \\\\\"\n+  echo \" && $wget_O gcc.tar.xz 'https://ci.adoptopenjdk.net/userContent/gcc/gcc750+ccache.$arch.tar.xz' \\\\\"\n+  echo \" && tar -xJf gcc.tar.xz --strip-components=1 \\\\\"\n+  echo \" && rm -f gcc.tar.xz\"\n+  echo \"\"\n+  echo \"# Create various symbolic links.\"\n+  echo \"RUN ln -s lib/$arch-linux-gnu /usr/lib64 \\\\\"\n+if [ $dist:$version = ubuntu:18.04 ] ; then\n+  # On s390x perl needs version 4 of mpfr, but we only have version 6.\n+  echo \" && ln -s libmpfr.so.6 /usr/lib64/libmpfr.so.4 \\\\\"\n+fi\n+  # /usr/local/include/c++ is a directory that already exists so we create these symbolic links in two steps.\n+  echo \" && ( cd /usr/local/include && for f in \\$(ls /usr/include/s390x-linux-gnu/c++) ; do test -e \\$f || ln -s /usr/include/s390x-linux-gnu/c++/\\$f . ; done ) \\\\\"\n+  echo \" && ln -s \\$(ls -d /usr/include/s390x-linux-gnu/* | grep -v '/c++\\$') /usr/local/include \\\\\"\n+  echo \" && ln -sf ../local/bin/g++-$gcc_version /usr/bin/g++-7 \\\\\"\n+  echo \" && ln -sf ../local/bin/gcc-$gcc_version /usr/bin/gcc-7\"\n+fi\n+if [ $dist != centos ] ; then\n+  echo \"\"\n+  echo \"ENV CC=gcc-7 CXX=g++-7\"\n+fi\n+}\n+\n+install_cmake() {\n+if [ $dist == centos ] ; then\n+  echo \"\"\n+  local cmake_version=3.11\n+  local cmake_name=cmake-$cmake_version.4\n+  echo \"# Install cmake.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O cmake.tar.gz https://cmake.org/files/v$cmake_version/$cmake_name.tar.gz \\\\\"\n+  echo \" && tar -xzf cmake.tar.gz \\\\\"\n+  echo \" && cd $cmake_name \\\\\"\n+  echo \" && export LDFLAGS='-static-libstdc++' \\\\\"\n+  echo \" && ./configure \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf cmake.tar.gz $cmake_name\"\n+fi\n+}\n+\n+prepare_user() {\n+  # Ensure authorized_keys exists.\n+  test -f authorized_keys || touch authorized_keys\n+  # Ensure github.com is a known host.\n+  ( test -f known_hosts && grep -q '^github.com ' known_hosts ) \\\n+    || ssh-keyscan github.com >> known_hosts\n+}\n+\n+create_user() {\n+  echo \"\"\n+  echo \"# Add user home and copy authorized_keys and known_hosts.\"\n+  echo \"RUN useradd -ms /bin/bash $user \\\\\"\n+  echo \" && mkdir /home/$user/.ssh \\\\\"\n+  echo \" && chmod 700 /home/$user/.ssh\"\n+  echo \"COPY authorized_keys known_hosts /home/$user/.ssh/\"\n+  echo \"RUN chown -R $user:$user /home/$user \\\\\"\n+  echo \" && chmod 600 /home/$user/.ssh/authorized_keys /home/$user/.ssh/known_hosts\"\n+}\n+\n+install_freemarker() {\n+  echo \"\"\n+  local freemarker_version=2.3.8\n+  echo \"# Download and extract freemarker.jar to /root/freemarker.jar.\"\n+  echo \"RUN mkdir -p /root \\\\\"\n+  echo \" && cd /root \\\\\"\n+  echo \" && $wget_O freemarker.tar.gz https://sourceforge.net/projects/freemarker/files/freemarker/$freemarker_version/freemarker-$freemarker_version.tar.gz/download \\\\\"\n+  echo \" && tar -xzf freemarker.tar.gz freemarker-$freemarker_version/lib/freemarker.jar --strip=2 \\\\\"\n+  echo \" && rm -f freemarker.tar.gz\"\n+}\n+\n+bootjdk_dirs() {\n+  for version in $@ ; do\n+    if [ $version = 8 ] ; then\n+      echo /usr/lib/jvm/adoptojdk-java-80\n+    else\n+      echo /usr/lib/jvm/adoptojdk-java-$version\n+    fi\n+  done\n+}\n+\n+bootjdk_url() {\n+  local version=$1\n+  if [ $arch = x86_64 ] ; then\n+    echo https://api.adoptopenjdk.net/v3/binary/latest/$version/ga/linux/x64/jdk/openj9/normal/adoptopenjdk\n+  else\n+    echo https://api.adoptopenjdk.net/v3/binary/latest/$version/ga/linux/$arch/jdk/openj9/normal/adoptopenjdk\n+  fi\n+}\n+\n+install_bootjdks() {\n+  local versions=\"8 11 13 14\"\n+  echo \"\"\n+  echo \"# Download and install boot JDKs from AdoptOpenJDK.\"\n+  echo \"RUN cd /tmp \\\\\"\n+for version in $versions ; do\n+  echo \" && $wget_O jdk$version.tar.gz $(bootjdk_url $version) \\\\\"\n+done\n+  echo \" && mkdir -p\" $(bootjdk_dirs $versions) \"\\\\\"\n+for version in $versions ; do\n+  echo \" && tar -xzf jdk$version.tar.gz --directory=$(bootjdk_dirs $version)/ --strip=1 \\\\\"\n+done\n+  echo \" && rm -f jdk*.tar.gz\"\n+}\n+\n+install_cuda() {\n+  echo \"\"\n+  echo \"# Copy header files necessary to build a VM with CUDA support.\"\n+  echo \"RUN mkdir -p /usr/local/cuda-${cuda}/nvvm\"\n+  echo \"COPY --from=cuda-dev /usr/local/cuda-${cuda}/include      /usr/local/cuda-${cuda}/include\"\n+  echo \"COPY --from=cuda-dev /usr/local/cuda-${cuda}/nvvm/include /usr/local/cuda-${cuda}/nvvm/include\"\n+  echo \"ENV CUDA_HOME=/usr/local/cuda-${cuda}\"\n+}\n+\n+install_python() {\n+  local python_version=3.7.3\n+  echo \"\"\n+  echo \"# Install python.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O python.tar.xz https://www.python.org/ftp/python/$python_version/Python-$python_version.tar.xz \\\\\"\n+  echo \" && tar -xJf python.tar.xz \\\\\"\n+  echo \" && cd Python-$python_version \\\\\"\n+  echo \" && ./configure --prefix=/usr/local \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf python.tar.xz Python-$python_version\"\n+}\n+\n+adjust_ldconfig() {\n+  echo \"\"\n+  echo \"# Run ldconfig to discover newly installed shared libraries.\"\n+  echo \"RUN for dir in lib lib64 ; do echo /usr/local/$dir ; done > /etc/ld.so.conf.d/usr-local.conf \\\\\"\n+  echo \" && ldconfig\"\n+}\n+\n+# called as: add_git_remote remote url\n+add_git_remote() {\n+  echo \" && git remote add ${1} ${2} \\\\\"\n+  # Like-named (and conflicting) tags exist in multiple repositories: don't fetch any tags.\n+  echo \" && git config remote.${1}.tagopt --no-tags \\\\\"\n+}\n+\n+create_git_cache() {\n+  # The jdk14 remote is fetched first because that repository was subjected to\n+  # 'git gc --aggressive --prune=all' before it was first published making it much\n+  # smaller than the other jdk repositories. There is a large degree of overlap\n+  # among the jdk repositories so a relatively small number of commits must be\n+  # fetched from the others.\n+  echo \"\"\n+  echo \"# Setup a reference repository cache for faster clones in containers.\"\n+  echo \"RUN mkdir /home/$user/git_cache \\\\\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA1NTg3MA=="}, "originalCommit": {"oid": "24771d8a3d3bf6d37d10a0ddf97a4d4b6b478c46"}, "originalPosition": 632}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU4NjgwOA==", "bodyText": "I give in: let's stick with 'openjdk_cache' (at least for the time-being).", "url": "https://github.com/eclipse-openj9/openj9/pull/9371#discussion_r417586808", "createdAt": "2020-04-29T20:20:24Z", "author": {"login": "keithc-ca"}, "path": "buildenv/docker/mkdocker.sh", "diffHunk": "@@ -0,0 +1,697 @@\n+#!/bin/bash -\n+\n+print_license() {\n+cat <<- EOF\n+# Copyright (c) 2019, 2020 IBM Corp. and others\n+#\n+# This program and the accompanying materials are made available under\n+# the terms of the Eclipse Public License 2.0 which accompanies this\n+# distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+# or the Apache License, Version 2.0 which accompanies this distribution and\n+# is available at https://www.apache.org/licenses/LICENSE-2.0.\n+#\n+# This Source Code may also be made available under the following\n+# Secondary Licenses when the conditions for such availability set\n+# forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+# General Public License, version 2 with the GNU Classpath\n+# Exception [1] and GNU General Public License, version 2 with the\n+# OpenJDK Assembly Exception [2].\n+#\n+# [1] https://www.gnu.org/software/classpath/license.html\n+# [2] http://openjdk.java.net/legal/assembly-exception.html\n+#\n+# SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+EOF\n+}\n+\n+usage() {\n+  echo \"Usage: $0 [OPTION]...\"\n+  echo \"Generate a Dockerfile for building OpenJ9\"\n+  echo \"\"\n+  echo \"Options:\"\n+  echo \"  --help|-h      print this help, then exit\"\n+  echo \"  --arch=...     specify the processor architecture (default: host architecture)\"\n+  echo \"  --build        build the docker image (overrides '--print')\"\n+  echo \"  --cuda         include CUDA header files\"\n+  echo \"  --dist=...     specify the Linux distribution (e.g. centos, ubuntu)\"\n+  echo \"  --print        write the Dockerfile to stdout (default; overrides '--build')\"\n+  echo \"  --tag=...      specify a name for the docker image (may be repeated, default: none)\"\n+  echo \"  --user=...     specify the user name (default: 'jenkins')\"\n+  echo \"  --version=...  specify the distribution version (e.g. 6.9, 16.04)\"\n+  echo \"\"\n+  local arch=\"$(uname -m)\"\n+  echo \"Supported build patterns on this host ($arch):\"\n+if [ $arch = x86_64 ] ; then\n+  echo \"  bash mkdocker.sh --tag=openj9/cent69 --dist=centos --version=6.9 --build\"\n+fi\n+if [ $arch = x86_64 -o $arch = ppc64le ] ; then\n+  echo \"  bash mkdocker.sh --tag=openj9/cent7  --dist=centos --version=7   --build\"\n+fi\n+  echo \"  bash mkdocker.sh --tag=openj9/ub16   --dist=ubuntu --version=16  --build\"\n+  echo \"  bash mkdocker.sh --tag=openj9/ub18   --dist=ubuntu --version=18  --build\"\n+  echo \"  bash mkdocker.sh --tag=openj9/ub20   --dist=ubuntu --version=20  --build\"\n+  exit 1\n+}\n+\n+# Global configuration variables.\n+action=print\n+arch=\n+cuda=no\n+dist=unspecified\n+tags=()\n+user=jenkins\n+version=unspecified\n+\n+# Frequently used commands.\n+wget_O=\"wget --progress=dot:mega -O\"\n+\n+parse_options() {\n+  for arg in \"$@\" ; do\n+    case \"$arg\" in\n+      -h | --help)\n+        usage\n+        ;;\n+      --arch=*)\n+        arch=\"${arg#*=}\"\n+        ;;\n+      --build)\n+        action=build\n+        ;;\n+      --cuda)\n+        cuda=9.0\n+        ;;\n+      --dist=*)\n+        dist=\"${arg#*=}\"\n+        ;;\n+      --print)\n+        action=print\n+        ;;\n+      --tag=*)\n+        tags+=(\"${arg#*=}\")\n+        ;;\n+      --user=*)\n+        user=\"${arg#*=}\"\n+        ;;\n+      --version=*)\n+        version=\"${arg#*=}\"\n+        ;;\n+      *) # bad option\n+        echo \"Unsupported option: '$arg'\" >&2\n+        usage\n+        ;;\n+    esac\n+  done\n+}\n+\n+validate_options() {\n+  if [ \"x$arch\" = x ] ; then\n+    arch=\"$(uname -m)\"\n+  fi\n+\n+  case \"$arch\" in\n+    ppc64le | s390x | x86_64)\n+      ;;\n+    *)\n+      echo \"Unsupported architecture: '$arch'\" >&2\n+      exit 1\n+      ;;\n+  esac\n+\n+  # Validate the distribution and version.\n+  case \"$dist\" in\n+    centos)\n+      if [ $arch = s390x ] ; then\n+        echo \"CentOS is not supported on $arch\" >&2\n+        exit 1\n+      fi\n+      case $version in\n+        6.9)\n+          if [ $arch = ppc64le ] ; then\n+            echo \"CentOS version 6.9 is not supported on $arch\" >&2\n+            exit 1\n+          fi\n+          ;;\n+        7)\n+          ;;\n+        unspecified)\n+          echo \"Unspecified CentOS version: use '--version' option\" >&2\n+          exit 1\n+          ;;\n+        *)\n+          echo \"Unsupported CentOS version: '$version'\" >&2\n+          exit 1\n+          ;;\n+      esac\n+      ;;\n+    ubuntu)\n+      case $version in\n+        16 | 18 | 20)\n+          version=$version.04\n+          ;;\n+        16.04 | 18.04 | 20.04)\n+          ;;\n+        unspecified)\n+          echo \"Unspecified Ubuntu version: use '--version' option\" >&2\n+          exit 1\n+          ;;\n+        *)\n+          echo \"Unsupported Ubuntu version: '$version'\" >&2\n+          exit 1\n+          ;;\n+      esac\n+      ;;\n+    unspecified)\n+      echo \"Unspecified distribution: use '--dist' option\" >&2\n+      exit 1\n+      ;;\n+    *)\n+      echo \"Unsupported distribution: '$dist'\" >&2\n+      exit 1\n+      ;;\n+  esac\n+\n+  # If CUDA is requested, validate the architecture.\n+  if [ $cuda != no ] ; then\n+    case \"$arch\" in\n+      ppc64le | x86_64)\n+        ;;\n+      *)\n+        echo \"CUDA is not supported on architecture: '$arch'\" >&2\n+        exit 1\n+        ;;\n+    esac\n+  fi\n+}\n+\n+build_cmd() {\n+  local cmd=build\n+  local file=$1\n+  for tag in ${tags[@]} ; do\n+    cmd=\"$cmd --tag $tag\"\n+  done\n+  echo $cmd --file $file .\n+}\n+\n+preamble() {\n+  echo \"\"\n+  echo \"# Generated by: mkdocker.sh $command_line\"\n+  echo \"\"\n+  echo \"# To use this docker file:\"\n+  echo \"# First, copy your public ssh key into authorized_keys.\"\n+  echo \"# Then, in the directory containing the Dockerfile, authorized_keys\"\n+  echo \"# file, and known_hosts file, run:\"\n+  echo \"#   docker $(build_cmd Dockerfile)\"\n+  echo \"#\"\n+if [ ${#tags[@]} -lt 2 ] ; then\n+  echo \"# To start a container based on the resulting image, run this command:\"\n+else\n+  echo \"# To start a container based on the resulting image, run one of these commands:\"\n+fi\n+if [ ${#tags[@]} -eq 0 ] ; then\n+  echo \"#   docker run -it <image>\"\n+else\n+for tag in ${tags[@]} ; do\n+  echo \"#   docker run -it $tag\"\n+done\n+fi\n+  echo \"\"\n+if [ $cuda != no ] ; then\n+  echo \"FROM nvidia/cuda:${cuda}-devel-ubuntu16.04 AS cuda-dev\"\n+  echo \"\"\n+fi\n+  echo \"FROM $dist:$version\"\n+}\n+\n+install_centos_packages() {\n+  echo \"RUN yum -y update \\\\\"\n+if [ $version = 6.9 ] ; then\n+  echo \" && yum -y install https://\\$(rpm -E '%{?centos:centos}%{!?centos:rhel}%{rhel}').iuscommunity.org/ius-release.rpm \\\\\"\n+fi\n+  echo \" && yum -y install \\\\\"\n+  echo \"    alsa-lib-devel \\\\\"\n+  echo \"    automake \\\\\" # required to update make\n+  echo \"    bind-utils \\\\\"\n+  echo \"    bison \\\\\"\n+  echo \"    bzip2 \\\\\"\n+  echo \"    ca-certificates \\\\\"\n+  echo \"    cpio \\\\\"\n+  echo \"    cups-devel \\\\\"\n+  echo \"    curl-devel \\\\\" # required by git\n+  echo \"    elfutils-libelf-devel \\\\\"\n+  echo \"    expat-devel \\\\\" # required by git and the xml parser\n+  echo \"    file-devel \\\\\"\n+  echo \"    file-libs \\\\\"\n+  echo \"    flex \\\\\"\n+  echo \"    fontconfig \\\\\"\n+  echo \"    fontconfig-devel \\\\\"\n+  echo \"    freetype-devel \\\\\"\n+  echo \"    gettext \\\\\"\n+  echo \"    gettext-devel \\\\\" # required by git\n+  echo \"    glibc \\\\\"\n+  echo \"    glibc-common \\\\\"\n+  echo \"    glibc-devel \\\\\"\n+  echo \"    gmp-devel \\\\\"\n+  echo \"    lbzip2 \\\\\"\n+  echo \"    libdwarf \\\\\"\n+  echo \"    libdwarf-devel \\\\\"\n+  echo \"    libffi-devel \\\\\"\n+  echo \"    libstdc++-static \\\\\"\n+  echo \"    libX11-devel \\\\\"\n+  echo \"    libXext-devel \\\\\"\n+  echo \"    libXi-devel \\\\\"\n+  echo \"    libXrandr-devel \\\\\"\n+  echo \"    libXrender-devel \\\\\"\n+  echo \"    libXt-devel \\\\\"\n+  echo \"    libXtst-devel \\\\\"\n+  echo \"    make \\\\\"\n+  echo \"    mesa-libGL-devel \\\\\"\n+  echo \"    mpfr-devel \\\\\"\n+  echo \"    ntp \\\\\"\n+  echo \"    numactl-devel \\\\\"\n+  echo \"    openssh-clients \\\\\"\n+  echo \"    openssh-server \\\\\"\n+  echo \"    openssl-devel \\\\\" # required by git, etc.\n+  echo \"    perl-CPAN \\\\\"\n+  echo \"    perl-DBI \\\\\"\n+  echo \"    perl-devel \\\\\"\n+  echo \"    perl-ExtUtils-MakeMaker \\\\\" # required by git\n+  echo \"    perl-GD \\\\\"\n+  echo \"    perl-libwww-perl \\\\\"\n+  echo \"    perl-Time-HiRes \\\\\"\n+  echo \"    texinfo \\\\\" # required to update make\n+  echo \"    unzip \\\\\"\n+  echo \"    vim \\\\\"\n+  echo \"    wget \\\\\"\n+  echo \"    xorg-x11-server-Xvfb \\\\\"\n+  echo \"    xz \\\\\"\n+  echo \"    zip \\\\\"\n+  echo \"    zlib-devel \\\\\" # required by git, python\n+  echo \" && yum clean all\"\n+  echo \"\"\n+  local autoconf_version=2.69\n+  echo \"# Install autoconf.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O autoconf.tar.gz https://fossies.org/linux/misc/autoconf-$autoconf_version.tar.gz \\\\\"\n+  echo \" && tar -xzf autoconf.tar.gz \\\\\"\n+  echo \" && cd autoconf-$autoconf_version \\\\\"\n+  echo \" && ./configure --build=\\$(rpm --eval %{_host}) \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf autoconf.tar.gz autoconf-$autoconf_version\"\n+  echo \"\"\n+  echo \"# Install gcc-7.5.\"\n+  echo \"RUN cd /usr/local \\\\\"\n+  echo \" && $wget_O gcc-7.tar.xz 'https://ci.adoptopenjdk.net/userContent/gcc/gcc750+ccache.$arch.tar.xz' \\\\\"\n+  echo \" && tar -xJf gcc-7.tar.xz --strip-components=1 \\\\\"\n+  echo \" && ln -sf ../local/bin/gcc-7.5 /usr/bin/gcc \\\\\"\n+  echo \" && ln -sf ../local/bin/g++-7.5 /usr/bin/g++ \\\\\"\n+  echo \" && ln -sf gcc /usr/bin/cc \\\\\"\n+  echo \" && ln -sf g++ /usr/bin/c++ \\\\\"\n+  echo \" && rm -f gcc-7.tar.xz\"\n+  echo \"\"\n+  local ant_version=1.10.5\n+  echo \"# Install ant.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O ant.zip https://archive.apache.org/dist/ant/binaries/apache-ant-$ant_version-bin.zip \\\\\"\n+  echo \" && unzip -q ant.zip -d /opt \\\\\"\n+  echo \" && ln -s apache-ant-$ant_version /opt/ant \\\\\"\n+  echo \" && ln -s /opt/ant/bin/ant /usr/bin/ant \\\\\"\n+  echo \" && $wget_O ant-contrib.tar.gz https://sourceforge.net/projects/ant-contrib/files/ant-contrib/1.0b3/ant-contrib-1.0b3-bin.tar.gz \\\\\"\n+  echo \" && tar -xzf ant-contrib.tar.gz \\\\\"\n+  echo \" && mv ant-contrib/ant-contrib-1.0b3.jar /opt/ant/lib \\\\\"\n+  echo \" && rm -rf ant-contrib ant.zip ant-contrib.tar.gz\"\n+  echo \"\"\n+  local git_version=2.5.3\n+  echo \"# Install git.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O git.tar.gz https://www.kernel.org/pub/software/scm/git/git-$git_version.tar.gz \\\\\"\n+  echo \" && tar -xzf git.tar.gz \\\\\"\n+  echo \" && cd git-$git_version \\\\\"\n+  echo \" && make prefix=/usr/local all \\\\\"\n+  echo \" && make prefix=/usr/local install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf git.tar.gz git-$git_version\"\n+  # updating make requires automake 1.15\n+  echo \"\"\n+  local automake_version=1.15\n+  echo \"# Update automake.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O automake.tar.gz http://ftp.gnu.org/gnu/automake/automake-$automake_version.tar.gz \\\\\"\n+  echo \" && tar -xzf automake.tar.gz \\\\\"\n+  echo \" && cd automake-$automake_version \\\\\"\n+  echo \" && ./configure \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf automake.tar.gz automake-$automake_version\"\n+if [ $arch = x86_64 ] ; then\n+  echo \"\"\n+  local gettext_version=0.20.1\n+  echo \"# Update gettext.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O gettext.tar.gz http://ftp.gnu.org/gnu/gettext/gettext-$gettext_version.tar.gz \\\\\"\n+  echo \" && tar -xzf gettext.tar.gz \\\\\"\n+  echo \" && cd gettext-$gettext_version \\\\\"\n+  echo \" && ./autogen.sh --skip-gnulib \\\\\"\n+  echo \" && ./configure --disable-nls \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf gettext.tar.gz gettext-$gettext_version\"\n+fi\n+  echo \"\"\n+if [ $arch = ppc64le ] ; then\n+  local make_version=4.2\n+else\n+  local make_version=4.1\n+fi\n+  echo \"# Update make.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O make.tar.gz https://github.com/mirror/make/archive/$make_version.tar.gz \\\\\"\n+  echo \" && tar -xzf make.tar.gz \\\\\"\n+  echo \" && cd make-$make_version \\\\\"\n+  echo \" && ACLOCAL_PATH=/usr/share/aclocal autoreconf -i \\\\\"\n+  echo \" && ./configure \\\\\"\n+  echo \" && make update \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && ln -s make /usr/local/bin/gmake \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf make.tar.gz make-$make_version\"\n+if [ $arch = x86_64 ] ; then\n+  echo \"\"\n+  local nasm_version=2.13.03\n+  echo \"# Install nasm.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O nasm.tar.gz https://www.nasm.us/pub/nasm/releasebuilds/$nasm_version/nasm-$nasm_version.tar.gz \\\\\"\n+  echo \" && tar -xzf nasm.tar.gz \\\\\"\n+  echo \" && cd nasm-$nasm_version \\\\\"\n+  echo \" && ./configure -prefix=/usr/local \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf nasm.tar.gz nasm-$nasm_version\"\n+fi\n+}\n+\n+install_ubuntu_packages() {\n+  echo \"RUN apt-get update \\\\\"\n+  echo \" && apt-get install -qq -y --no-install-recommends \\\\\"\n+  echo \"    software-properties-common \\\\\"\n+if [ $version = 16.04 ] ; then\n+  echo \"    python-software-properties \\\\\"\n+fi\n+  echo \" && add-apt-repository ppa:ubuntu-toolchain-r/test \\\\\"\n+  echo \" && apt-get update \\\\\"\n+  echo \" && apt-get install -qq -y --no-install-recommends \\\\\"\n+  echo \"    ant \\\\\"\n+  echo \"    ant-contrib \\\\\"\n+  echo \"    autoconf \\\\\"\n+  echo \"    build-essential \\\\\"\n+  echo \"    ca-certificates \\\\\"\n+  echo \"    cmake \\\\\"\n+  echo \"    cpio \\\\\"\n+  echo \"    curl \\\\\"\n+  echo \"    file \\\\\"\n+if [ $arch != s390x ] ; then\n+  echo \"    g++-7 \\\\\"\n+  echo \"    gcc-7 \\\\\"\n+fi\n+  echo \"    gdb \\\\\"\n+  echo \"    git \\\\\"\n+  echo \"    libasound2-dev \\\\\"\n+  echo \"    libcups2-dev \\\\\"\n+  echo \"    libdwarf-dev \\\\\"\n+  echo \"    libelf-dev \\\\\"\n+  echo \"    libexpat1-dev \\\\\" # required by the xml parser\n+  echo \"    libffi-dev \\\\\"\n+  echo \"    libfontconfig \\\\\"\n+  echo \"    libfontconfig1-dev \\\\\"\n+  echo \"    libfreetype6-dev \\\\\"\n+if [ $arch != s390x ] ; then\n+  echo \"    libnuma-dev \\\\\"\n+fi\n+if [ $arch = s390x ] ; then\n+  echo \"    libmpc3 \\\\\"\n+fi\n+  echo \"    libssl-dev \\\\\"\n+  echo \"    libx11-dev \\\\\"\n+  echo \"    libxext-dev \\\\\"\n+  echo \"    libxrandr-dev \\\\\"\n+  echo \"    libxrender-dev \\\\\"\n+  echo \"    libxt-dev \\\\\"\n+  echo \"    libxtst-dev \\\\\"\n+  echo \"    make \\\\\"\n+if [ $arch = x86_64 ] ; then\n+  echo \"    nasm \\\\\"\n+fi\n+  echo \"    openssh-client \\\\\"\n+  echo \"    openssh-server \\\\\"\n+  echo \"    perl \\\\\"\n+  echo \"    pkg-config \\\\\"\n+if [ $version = 16.04 ] ; then\n+  echo \"    realpath \\\\\"\n+fi\n+  echo \"    ssh \\\\\"\n+  echo \"    unzip \\\\\"\n+  echo \"    wget \\\\\"\n+  echo \"    xvfb \\\\\"\n+  echo \"    zip \\\\\"\n+  echo \"    zlib1g-dev \\\\\"\n+  echo \" && rm -rf /var/lib/apt/lists/*\"\n+}\n+\n+install_packages() {\n+  echo \"\"\n+  echo \"# Install required OS tools.\"\n+  echo \"\"\n+if [ $dist = centos ] ; then\n+  install_centos_packages\n+else\n+  install_ubuntu_packages\n+fi\n+}\n+\n+install_compilers() {\n+if [ $arch = s390x ] ; then\n+  echo \"\"\n+  local gcc_version=7.5\n+  echo \"# Install gcc.\"\n+  echo \"RUN cd /usr/local \\\\\"\n+  echo \" && $wget_O gcc.tar.xz 'https://ci.adoptopenjdk.net/userContent/gcc/gcc750+ccache.$arch.tar.xz' \\\\\"\n+  echo \" && tar -xJf gcc.tar.xz --strip-components=1 \\\\\"\n+  echo \" && rm -f gcc.tar.xz\"\n+  echo \"\"\n+  echo \"# Create various symbolic links.\"\n+  echo \"RUN ln -s lib/$arch-linux-gnu /usr/lib64 \\\\\"\n+if [ $dist:$version = ubuntu:18.04 ] ; then\n+  # On s390x perl needs version 4 of mpfr, but we only have version 6.\n+  echo \" && ln -s libmpfr.so.6 /usr/lib64/libmpfr.so.4 \\\\\"\n+fi\n+  # /usr/local/include/c++ is a directory that already exists so we create these symbolic links in two steps.\n+  echo \" && ( cd /usr/local/include && for f in \\$(ls /usr/include/s390x-linux-gnu/c++) ; do test -e \\$f || ln -s /usr/include/s390x-linux-gnu/c++/\\$f . ; done ) \\\\\"\n+  echo \" && ln -s \\$(ls -d /usr/include/s390x-linux-gnu/* | grep -v '/c++\\$') /usr/local/include \\\\\"\n+  echo \" && ln -sf ../local/bin/g++-$gcc_version /usr/bin/g++-7 \\\\\"\n+  echo \" && ln -sf ../local/bin/gcc-$gcc_version /usr/bin/gcc-7\"\n+fi\n+if [ $dist != centos ] ; then\n+  echo \"\"\n+  echo \"ENV CC=gcc-7 CXX=g++-7\"\n+fi\n+}\n+\n+install_cmake() {\n+if [ $dist == centos ] ; then\n+  echo \"\"\n+  local cmake_version=3.11\n+  local cmake_name=cmake-$cmake_version.4\n+  echo \"# Install cmake.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O cmake.tar.gz https://cmake.org/files/v$cmake_version/$cmake_name.tar.gz \\\\\"\n+  echo \" && tar -xzf cmake.tar.gz \\\\\"\n+  echo \" && cd $cmake_name \\\\\"\n+  echo \" && export LDFLAGS='-static-libstdc++' \\\\\"\n+  echo \" && ./configure \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf cmake.tar.gz $cmake_name\"\n+fi\n+}\n+\n+prepare_user() {\n+  # Ensure authorized_keys exists.\n+  test -f authorized_keys || touch authorized_keys\n+  # Ensure github.com is a known host.\n+  ( test -f known_hosts && grep -q '^github.com ' known_hosts ) \\\n+    || ssh-keyscan github.com >> known_hosts\n+}\n+\n+create_user() {\n+  echo \"\"\n+  echo \"# Add user home and copy authorized_keys and known_hosts.\"\n+  echo \"RUN useradd -ms /bin/bash $user \\\\\"\n+  echo \" && mkdir /home/$user/.ssh \\\\\"\n+  echo \" && chmod 700 /home/$user/.ssh\"\n+  echo \"COPY authorized_keys known_hosts /home/$user/.ssh/\"\n+  echo \"RUN chown -R $user:$user /home/$user \\\\\"\n+  echo \" && chmod 600 /home/$user/.ssh/authorized_keys /home/$user/.ssh/known_hosts\"\n+}\n+\n+install_freemarker() {\n+  echo \"\"\n+  local freemarker_version=2.3.8\n+  echo \"# Download and extract freemarker.jar to /root/freemarker.jar.\"\n+  echo \"RUN mkdir -p /root \\\\\"\n+  echo \" && cd /root \\\\\"\n+  echo \" && $wget_O freemarker.tar.gz https://sourceforge.net/projects/freemarker/files/freemarker/$freemarker_version/freemarker-$freemarker_version.tar.gz/download \\\\\"\n+  echo \" && tar -xzf freemarker.tar.gz freemarker-$freemarker_version/lib/freemarker.jar --strip=2 \\\\\"\n+  echo \" && rm -f freemarker.tar.gz\"\n+}\n+\n+bootjdk_dirs() {\n+  for version in $@ ; do\n+    if [ $version = 8 ] ; then\n+      echo /usr/lib/jvm/adoptojdk-java-80\n+    else\n+      echo /usr/lib/jvm/adoptojdk-java-$version\n+    fi\n+  done\n+}\n+\n+bootjdk_url() {\n+  local version=$1\n+  if [ $arch = x86_64 ] ; then\n+    echo https://api.adoptopenjdk.net/v3/binary/latest/$version/ga/linux/x64/jdk/openj9/normal/adoptopenjdk\n+  else\n+    echo https://api.adoptopenjdk.net/v3/binary/latest/$version/ga/linux/$arch/jdk/openj9/normal/adoptopenjdk\n+  fi\n+}\n+\n+install_bootjdks() {\n+  local versions=\"8 11 13 14\"\n+  echo \"\"\n+  echo \"# Download and install boot JDKs from AdoptOpenJDK.\"\n+  echo \"RUN cd /tmp \\\\\"\n+for version in $versions ; do\n+  echo \" && $wget_O jdk$version.tar.gz $(bootjdk_url $version) \\\\\"\n+done\n+  echo \" && mkdir -p\" $(bootjdk_dirs $versions) \"\\\\\"\n+for version in $versions ; do\n+  echo \" && tar -xzf jdk$version.tar.gz --directory=$(bootjdk_dirs $version)/ --strip=1 \\\\\"\n+done\n+  echo \" && rm -f jdk*.tar.gz\"\n+}\n+\n+install_cuda() {\n+  echo \"\"\n+  echo \"# Copy header files necessary to build a VM with CUDA support.\"\n+  echo \"RUN mkdir -p /usr/local/cuda-${cuda}/nvvm\"\n+  echo \"COPY --from=cuda-dev /usr/local/cuda-${cuda}/include      /usr/local/cuda-${cuda}/include\"\n+  echo \"COPY --from=cuda-dev /usr/local/cuda-${cuda}/nvvm/include /usr/local/cuda-${cuda}/nvvm/include\"\n+  echo \"ENV CUDA_HOME=/usr/local/cuda-${cuda}\"\n+}\n+\n+install_python() {\n+  local python_version=3.7.3\n+  echo \"\"\n+  echo \"# Install python.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O python.tar.xz https://www.python.org/ftp/python/$python_version/Python-$python_version.tar.xz \\\\\"\n+  echo \" && tar -xJf python.tar.xz \\\\\"\n+  echo \" && cd Python-$python_version \\\\\"\n+  echo \" && ./configure --prefix=/usr/local \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf python.tar.xz Python-$python_version\"\n+}\n+\n+adjust_ldconfig() {\n+  echo \"\"\n+  echo \"# Run ldconfig to discover newly installed shared libraries.\"\n+  echo \"RUN for dir in lib lib64 ; do echo /usr/local/$dir ; done > /etc/ld.so.conf.d/usr-local.conf \\\\\"\n+  echo \" && ldconfig\"\n+}\n+\n+# called as: add_git_remote remote url\n+add_git_remote() {\n+  echo \" && git remote add ${1} ${2} \\\\\"\n+  # Like-named (and conflicting) tags exist in multiple repositories: don't fetch any tags.\n+  echo \" && git config remote.${1}.tagopt --no-tags \\\\\"\n+}\n+\n+create_git_cache() {\n+  # The jdk14 remote is fetched first because that repository was subjected to\n+  # 'git gc --aggressive --prune=all' before it was first published making it much\n+  # smaller than the other jdk repositories. There is a large degree of overlap\n+  # among the jdk repositories so a relatively small number of commits must be\n+  # fetched from the others.\n+  echo \"\"\n+  echo \"# Setup a reference repository cache for faster clones in containers.\"\n+  echo \"RUN mkdir /home/$user/git_cache \\\\\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA1NTg3MA=="}, "originalCommit": {"oid": "24771d8a3d3bf6d37d10a0ddf97a4d4b6b478c46"}, "originalPosition": 632}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NDk1MTQ4OnYy", "diffSide": "RIGHT", "path": "buildenv/docker/mkdocker.sh", "isResolved": false, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNDo1MDo1OVrOGNvpzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxOTo0ODozN1rOGOOaOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA2NTQyMQ==", "bodyText": "Does JITServer still require a newer version of openssl installed on the machine? This looks like it's currently 1.0.1e (on Cent6.9). The existing Dockerfile has 1.1.1b.", "url": "https://github.com/eclipse-openj9/openj9/pull/9371#discussion_r417065421", "createdAt": "2020-04-29T04:50:59Z", "author": {"login": "AdamBrousseau"}, "path": "buildenv/docker/mkdocker.sh", "diffHunk": "@@ -0,0 +1,697 @@\n+#!/bin/bash -\n+\n+print_license() {\n+cat <<- EOF\n+# Copyright (c) 2019, 2020 IBM Corp. and others\n+#\n+# This program and the accompanying materials are made available under\n+# the terms of the Eclipse Public License 2.0 which accompanies this\n+# distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+# or the Apache License, Version 2.0 which accompanies this distribution and\n+# is available at https://www.apache.org/licenses/LICENSE-2.0.\n+#\n+# This Source Code may also be made available under the following\n+# Secondary Licenses when the conditions for such availability set\n+# forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+# General Public License, version 2 with the GNU Classpath\n+# Exception [1] and GNU General Public License, version 2 with the\n+# OpenJDK Assembly Exception [2].\n+#\n+# [1] https://www.gnu.org/software/classpath/license.html\n+# [2] http://openjdk.java.net/legal/assembly-exception.html\n+#\n+# SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+EOF\n+}\n+\n+usage() {\n+  echo \"Usage: $0 [OPTION]...\"\n+  echo \"Generate a Dockerfile for building OpenJ9\"\n+  echo \"\"\n+  echo \"Options:\"\n+  echo \"  --help|-h      print this help, then exit\"\n+  echo \"  --arch=...     specify the processor architecture (default: host architecture)\"\n+  echo \"  --build        build the docker image (overrides '--print')\"\n+  echo \"  --cuda         include CUDA header files\"\n+  echo \"  --dist=...     specify the Linux distribution (e.g. centos, ubuntu)\"\n+  echo \"  --print        write the Dockerfile to stdout (default; overrides '--build')\"\n+  echo \"  --tag=...      specify a name for the docker image (may be repeated, default: none)\"\n+  echo \"  --user=...     specify the user name (default: 'jenkins')\"\n+  echo \"  --version=...  specify the distribution version (e.g. 6.9, 16.04)\"\n+  echo \"\"\n+  local arch=\"$(uname -m)\"\n+  echo \"Supported build patterns on this host ($arch):\"\n+if [ $arch = x86_64 ] ; then\n+  echo \"  bash mkdocker.sh --tag=openj9/cent69 --dist=centos --version=6.9 --build\"\n+fi\n+if [ $arch = x86_64 -o $arch = ppc64le ] ; then\n+  echo \"  bash mkdocker.sh --tag=openj9/cent7  --dist=centos --version=7   --build\"\n+fi\n+  echo \"  bash mkdocker.sh --tag=openj9/ub16   --dist=ubuntu --version=16  --build\"\n+  echo \"  bash mkdocker.sh --tag=openj9/ub18   --dist=ubuntu --version=18  --build\"\n+  echo \"  bash mkdocker.sh --tag=openj9/ub20   --dist=ubuntu --version=20  --build\"\n+  exit 1\n+}\n+\n+# Global configuration variables.\n+action=print\n+arch=\n+cuda=no\n+dist=unspecified\n+tags=()\n+user=jenkins\n+version=unspecified\n+\n+# Frequently used commands.\n+wget_O=\"wget --progress=dot:mega -O\"\n+\n+parse_options() {\n+  for arg in \"$@\" ; do\n+    case \"$arg\" in\n+      -h | --help)\n+        usage\n+        ;;\n+      --arch=*)\n+        arch=\"${arg#*=}\"\n+        ;;\n+      --build)\n+        action=build\n+        ;;\n+      --cuda)\n+        cuda=9.0\n+        ;;\n+      --dist=*)\n+        dist=\"${arg#*=}\"\n+        ;;\n+      --print)\n+        action=print\n+        ;;\n+      --tag=*)\n+        tags+=(\"${arg#*=}\")\n+        ;;\n+      --user=*)\n+        user=\"${arg#*=}\"\n+        ;;\n+      --version=*)\n+        version=\"${arg#*=}\"\n+        ;;\n+      *) # bad option\n+        echo \"Unsupported option: '$arg'\" >&2\n+        usage\n+        ;;\n+    esac\n+  done\n+}\n+\n+validate_options() {\n+  if [ \"x$arch\" = x ] ; then\n+    arch=\"$(uname -m)\"\n+  fi\n+\n+  case \"$arch\" in\n+    ppc64le | s390x | x86_64)\n+      ;;\n+    *)\n+      echo \"Unsupported architecture: '$arch'\" >&2\n+      exit 1\n+      ;;\n+  esac\n+\n+  # Validate the distribution and version.\n+  case \"$dist\" in\n+    centos)\n+      if [ $arch = s390x ] ; then\n+        echo \"CentOS is not supported on $arch\" >&2\n+        exit 1\n+      fi\n+      case $version in\n+        6.9)\n+          if [ $arch = ppc64le ] ; then\n+            echo \"CentOS version 6.9 is not supported on $arch\" >&2\n+            exit 1\n+          fi\n+          ;;\n+        7)\n+          ;;\n+        unspecified)\n+          echo \"Unspecified CentOS version: use '--version' option\" >&2\n+          exit 1\n+          ;;\n+        *)\n+          echo \"Unsupported CentOS version: '$version'\" >&2\n+          exit 1\n+          ;;\n+      esac\n+      ;;\n+    ubuntu)\n+      case $version in\n+        16 | 18 | 20)\n+          version=$version.04\n+          ;;\n+        16.04 | 18.04 | 20.04)\n+          ;;\n+        unspecified)\n+          echo \"Unspecified Ubuntu version: use '--version' option\" >&2\n+          exit 1\n+          ;;\n+        *)\n+          echo \"Unsupported Ubuntu version: '$version'\" >&2\n+          exit 1\n+          ;;\n+      esac\n+      ;;\n+    unspecified)\n+      echo \"Unspecified distribution: use '--dist' option\" >&2\n+      exit 1\n+      ;;\n+    *)\n+      echo \"Unsupported distribution: '$dist'\" >&2\n+      exit 1\n+      ;;\n+  esac\n+\n+  # If CUDA is requested, validate the architecture.\n+  if [ $cuda != no ] ; then\n+    case \"$arch\" in\n+      ppc64le | x86_64)\n+        ;;\n+      *)\n+        echo \"CUDA is not supported on architecture: '$arch'\" >&2\n+        exit 1\n+        ;;\n+    esac\n+  fi\n+}\n+\n+build_cmd() {\n+  local cmd=build\n+  local file=$1\n+  for tag in ${tags[@]} ; do\n+    cmd=\"$cmd --tag $tag\"\n+  done\n+  echo $cmd --file $file .\n+}\n+\n+preamble() {\n+  echo \"\"\n+  echo \"# Generated by: mkdocker.sh $command_line\"\n+  echo \"\"\n+  echo \"# To use this docker file:\"\n+  echo \"# First, copy your public ssh key into authorized_keys.\"\n+  echo \"# Then, in the directory containing the Dockerfile, authorized_keys\"\n+  echo \"# file, and known_hosts file, run:\"\n+  echo \"#   docker $(build_cmd Dockerfile)\"\n+  echo \"#\"\n+if [ ${#tags[@]} -lt 2 ] ; then\n+  echo \"# To start a container based on the resulting image, run this command:\"\n+else\n+  echo \"# To start a container based on the resulting image, run one of these commands:\"\n+fi\n+if [ ${#tags[@]} -eq 0 ] ; then\n+  echo \"#   docker run -it <image>\"\n+else\n+for tag in ${tags[@]} ; do\n+  echo \"#   docker run -it $tag\"\n+done\n+fi\n+  echo \"\"\n+if [ $cuda != no ] ; then\n+  echo \"FROM nvidia/cuda:${cuda}-devel-ubuntu16.04 AS cuda-dev\"\n+  echo \"\"\n+fi\n+  echo \"FROM $dist:$version\"\n+}\n+\n+install_centos_packages() {\n+  echo \"RUN yum -y update \\\\\"\n+if [ $version = 6.9 ] ; then\n+  echo \" && yum -y install https://\\$(rpm -E '%{?centos:centos}%{!?centos:rhel}%{rhel}').iuscommunity.org/ius-release.rpm \\\\\"\n+fi\n+  echo \" && yum -y install \\\\\"\n+  echo \"    alsa-lib-devel \\\\\"\n+  echo \"    automake \\\\\" # required to update make\n+  echo \"    bind-utils \\\\\"\n+  echo \"    bison \\\\\"\n+  echo \"    bzip2 \\\\\"\n+  echo \"    ca-certificates \\\\\"\n+  echo \"    cpio \\\\\"\n+  echo \"    cups-devel \\\\\"\n+  echo \"    curl-devel \\\\\" # required by git\n+  echo \"    elfutils-libelf-devel \\\\\"\n+  echo \"    expat-devel \\\\\" # required by git and the xml parser\n+  echo \"    file-devel \\\\\"\n+  echo \"    file-libs \\\\\"\n+  echo \"    flex \\\\\"\n+  echo \"    fontconfig \\\\\"\n+  echo \"    fontconfig-devel \\\\\"\n+  echo \"    freetype-devel \\\\\"\n+  echo \"    gettext \\\\\"\n+  echo \"    gettext-devel \\\\\" # required by git\n+  echo \"    glibc \\\\\"\n+  echo \"    glibc-common \\\\\"\n+  echo \"    glibc-devel \\\\\"\n+  echo \"    gmp-devel \\\\\"\n+  echo \"    lbzip2 \\\\\"\n+  echo \"    libdwarf \\\\\"\n+  echo \"    libdwarf-devel \\\\\"\n+  echo \"    libffi-devel \\\\\"\n+  echo \"    libstdc++-static \\\\\"\n+  echo \"    libX11-devel \\\\\"\n+  echo \"    libXext-devel \\\\\"\n+  echo \"    libXi-devel \\\\\"\n+  echo \"    libXrandr-devel \\\\\"\n+  echo \"    libXrender-devel \\\\\"\n+  echo \"    libXt-devel \\\\\"\n+  echo \"    libXtst-devel \\\\\"\n+  echo \"    make \\\\\"\n+  echo \"    mesa-libGL-devel \\\\\"\n+  echo \"    mpfr-devel \\\\\"\n+  echo \"    ntp \\\\\"\n+  echo \"    numactl-devel \\\\\"\n+  echo \"    openssh-clients \\\\\"\n+  echo \"    openssh-server \\\\\"\n+  echo \"    openssl-devel \\\\\" # required by git, etc.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24771d8a3d3bf6d37d10a0ddf97a4d4b6b478c46"}, "originalPosition": 273}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI4MzA0NA==", "bodyText": "Which packages are you suggesting might be omitted?\nThe version of openssl use to build is less important than what is bundled.", "url": "https://github.com/eclipse-openj9/openj9/pull/9371#discussion_r417283044", "createdAt": "2020-04-29T12:40:57Z", "author": {"login": "keithc-ca"}, "path": "buildenv/docker/mkdocker.sh", "diffHunk": "@@ -0,0 +1,697 @@\n+#!/bin/bash -\n+\n+print_license() {\n+cat <<- EOF\n+# Copyright (c) 2019, 2020 IBM Corp. and others\n+#\n+# This program and the accompanying materials are made available under\n+# the terms of the Eclipse Public License 2.0 which accompanies this\n+# distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+# or the Apache License, Version 2.0 which accompanies this distribution and\n+# is available at https://www.apache.org/licenses/LICENSE-2.0.\n+#\n+# This Source Code may also be made available under the following\n+# Secondary Licenses when the conditions for such availability set\n+# forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+# General Public License, version 2 with the GNU Classpath\n+# Exception [1] and GNU General Public License, version 2 with the\n+# OpenJDK Assembly Exception [2].\n+#\n+# [1] https://www.gnu.org/software/classpath/license.html\n+# [2] http://openjdk.java.net/legal/assembly-exception.html\n+#\n+# SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+EOF\n+}\n+\n+usage() {\n+  echo \"Usage: $0 [OPTION]...\"\n+  echo \"Generate a Dockerfile for building OpenJ9\"\n+  echo \"\"\n+  echo \"Options:\"\n+  echo \"  --help|-h      print this help, then exit\"\n+  echo \"  --arch=...     specify the processor architecture (default: host architecture)\"\n+  echo \"  --build        build the docker image (overrides '--print')\"\n+  echo \"  --cuda         include CUDA header files\"\n+  echo \"  --dist=...     specify the Linux distribution (e.g. centos, ubuntu)\"\n+  echo \"  --print        write the Dockerfile to stdout (default; overrides '--build')\"\n+  echo \"  --tag=...      specify a name for the docker image (may be repeated, default: none)\"\n+  echo \"  --user=...     specify the user name (default: 'jenkins')\"\n+  echo \"  --version=...  specify the distribution version (e.g. 6.9, 16.04)\"\n+  echo \"\"\n+  local arch=\"$(uname -m)\"\n+  echo \"Supported build patterns on this host ($arch):\"\n+if [ $arch = x86_64 ] ; then\n+  echo \"  bash mkdocker.sh --tag=openj9/cent69 --dist=centos --version=6.9 --build\"\n+fi\n+if [ $arch = x86_64 -o $arch = ppc64le ] ; then\n+  echo \"  bash mkdocker.sh --tag=openj9/cent7  --dist=centos --version=7   --build\"\n+fi\n+  echo \"  bash mkdocker.sh --tag=openj9/ub16   --dist=ubuntu --version=16  --build\"\n+  echo \"  bash mkdocker.sh --tag=openj9/ub18   --dist=ubuntu --version=18  --build\"\n+  echo \"  bash mkdocker.sh --tag=openj9/ub20   --dist=ubuntu --version=20  --build\"\n+  exit 1\n+}\n+\n+# Global configuration variables.\n+action=print\n+arch=\n+cuda=no\n+dist=unspecified\n+tags=()\n+user=jenkins\n+version=unspecified\n+\n+# Frequently used commands.\n+wget_O=\"wget --progress=dot:mega -O\"\n+\n+parse_options() {\n+  for arg in \"$@\" ; do\n+    case \"$arg\" in\n+      -h | --help)\n+        usage\n+        ;;\n+      --arch=*)\n+        arch=\"${arg#*=}\"\n+        ;;\n+      --build)\n+        action=build\n+        ;;\n+      --cuda)\n+        cuda=9.0\n+        ;;\n+      --dist=*)\n+        dist=\"${arg#*=}\"\n+        ;;\n+      --print)\n+        action=print\n+        ;;\n+      --tag=*)\n+        tags+=(\"${arg#*=}\")\n+        ;;\n+      --user=*)\n+        user=\"${arg#*=}\"\n+        ;;\n+      --version=*)\n+        version=\"${arg#*=}\"\n+        ;;\n+      *) # bad option\n+        echo \"Unsupported option: '$arg'\" >&2\n+        usage\n+        ;;\n+    esac\n+  done\n+}\n+\n+validate_options() {\n+  if [ \"x$arch\" = x ] ; then\n+    arch=\"$(uname -m)\"\n+  fi\n+\n+  case \"$arch\" in\n+    ppc64le | s390x | x86_64)\n+      ;;\n+    *)\n+      echo \"Unsupported architecture: '$arch'\" >&2\n+      exit 1\n+      ;;\n+  esac\n+\n+  # Validate the distribution and version.\n+  case \"$dist\" in\n+    centos)\n+      if [ $arch = s390x ] ; then\n+        echo \"CentOS is not supported on $arch\" >&2\n+        exit 1\n+      fi\n+      case $version in\n+        6.9)\n+          if [ $arch = ppc64le ] ; then\n+            echo \"CentOS version 6.9 is not supported on $arch\" >&2\n+            exit 1\n+          fi\n+          ;;\n+        7)\n+          ;;\n+        unspecified)\n+          echo \"Unspecified CentOS version: use '--version' option\" >&2\n+          exit 1\n+          ;;\n+        *)\n+          echo \"Unsupported CentOS version: '$version'\" >&2\n+          exit 1\n+          ;;\n+      esac\n+      ;;\n+    ubuntu)\n+      case $version in\n+        16 | 18 | 20)\n+          version=$version.04\n+          ;;\n+        16.04 | 18.04 | 20.04)\n+          ;;\n+        unspecified)\n+          echo \"Unspecified Ubuntu version: use '--version' option\" >&2\n+          exit 1\n+          ;;\n+        *)\n+          echo \"Unsupported Ubuntu version: '$version'\" >&2\n+          exit 1\n+          ;;\n+      esac\n+      ;;\n+    unspecified)\n+      echo \"Unspecified distribution: use '--dist' option\" >&2\n+      exit 1\n+      ;;\n+    *)\n+      echo \"Unsupported distribution: '$dist'\" >&2\n+      exit 1\n+      ;;\n+  esac\n+\n+  # If CUDA is requested, validate the architecture.\n+  if [ $cuda != no ] ; then\n+    case \"$arch\" in\n+      ppc64le | x86_64)\n+        ;;\n+      *)\n+        echo \"CUDA is not supported on architecture: '$arch'\" >&2\n+        exit 1\n+        ;;\n+    esac\n+  fi\n+}\n+\n+build_cmd() {\n+  local cmd=build\n+  local file=$1\n+  for tag in ${tags[@]} ; do\n+    cmd=\"$cmd --tag $tag\"\n+  done\n+  echo $cmd --file $file .\n+}\n+\n+preamble() {\n+  echo \"\"\n+  echo \"# Generated by: mkdocker.sh $command_line\"\n+  echo \"\"\n+  echo \"# To use this docker file:\"\n+  echo \"# First, copy your public ssh key into authorized_keys.\"\n+  echo \"# Then, in the directory containing the Dockerfile, authorized_keys\"\n+  echo \"# file, and known_hosts file, run:\"\n+  echo \"#   docker $(build_cmd Dockerfile)\"\n+  echo \"#\"\n+if [ ${#tags[@]} -lt 2 ] ; then\n+  echo \"# To start a container based on the resulting image, run this command:\"\n+else\n+  echo \"# To start a container based on the resulting image, run one of these commands:\"\n+fi\n+if [ ${#tags[@]} -eq 0 ] ; then\n+  echo \"#   docker run -it <image>\"\n+else\n+for tag in ${tags[@]} ; do\n+  echo \"#   docker run -it $tag\"\n+done\n+fi\n+  echo \"\"\n+if [ $cuda != no ] ; then\n+  echo \"FROM nvidia/cuda:${cuda}-devel-ubuntu16.04 AS cuda-dev\"\n+  echo \"\"\n+fi\n+  echo \"FROM $dist:$version\"\n+}\n+\n+install_centos_packages() {\n+  echo \"RUN yum -y update \\\\\"\n+if [ $version = 6.9 ] ; then\n+  echo \" && yum -y install https://\\$(rpm -E '%{?centos:centos}%{!?centos:rhel}%{rhel}').iuscommunity.org/ius-release.rpm \\\\\"\n+fi\n+  echo \" && yum -y install \\\\\"\n+  echo \"    alsa-lib-devel \\\\\"\n+  echo \"    automake \\\\\" # required to update make\n+  echo \"    bind-utils \\\\\"\n+  echo \"    bison \\\\\"\n+  echo \"    bzip2 \\\\\"\n+  echo \"    ca-certificates \\\\\"\n+  echo \"    cpio \\\\\"\n+  echo \"    cups-devel \\\\\"\n+  echo \"    curl-devel \\\\\" # required by git\n+  echo \"    elfutils-libelf-devel \\\\\"\n+  echo \"    expat-devel \\\\\" # required by git and the xml parser\n+  echo \"    file-devel \\\\\"\n+  echo \"    file-libs \\\\\"\n+  echo \"    flex \\\\\"\n+  echo \"    fontconfig \\\\\"\n+  echo \"    fontconfig-devel \\\\\"\n+  echo \"    freetype-devel \\\\\"\n+  echo \"    gettext \\\\\"\n+  echo \"    gettext-devel \\\\\" # required by git\n+  echo \"    glibc \\\\\"\n+  echo \"    glibc-common \\\\\"\n+  echo \"    glibc-devel \\\\\"\n+  echo \"    gmp-devel \\\\\"\n+  echo \"    lbzip2 \\\\\"\n+  echo \"    libdwarf \\\\\"\n+  echo \"    libdwarf-devel \\\\\"\n+  echo \"    libffi-devel \\\\\"\n+  echo \"    libstdc++-static \\\\\"\n+  echo \"    libX11-devel \\\\\"\n+  echo \"    libXext-devel \\\\\"\n+  echo \"    libXi-devel \\\\\"\n+  echo \"    libXrandr-devel \\\\\"\n+  echo \"    libXrender-devel \\\\\"\n+  echo \"    libXt-devel \\\\\"\n+  echo \"    libXtst-devel \\\\\"\n+  echo \"    make \\\\\"\n+  echo \"    mesa-libGL-devel \\\\\"\n+  echo \"    mpfr-devel \\\\\"\n+  echo \"    ntp \\\\\"\n+  echo \"    numactl-devel \\\\\"\n+  echo \"    openssh-clients \\\\\"\n+  echo \"    openssh-server \\\\\"\n+  echo \"    openssl-devel \\\\\" # required by git, etc.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA2NTQyMQ=="}, "originalCommit": {"oid": "24771d8a3d3bf6d37d10a0ddf97a4d4b6b478c46"}, "originalPosition": 273}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMzMzcxNg==", "bodyText": "On the existing images we specifically install 111b.\nhttps://github.com/eclipse/openj9/blob/master/buildenv/jenkins/docker-slaves/x86/centos6.9/Dockerfile#L244\nBut that may be obsolete now.", "url": "https://github.com/eclipse-openj9/openj9/pull/9371#discussion_r417333716", "createdAt": "2020-04-29T13:55:42Z", "author": {"login": "AdamBrousseau"}, "path": "buildenv/docker/mkdocker.sh", "diffHunk": "@@ -0,0 +1,697 @@\n+#!/bin/bash -\n+\n+print_license() {\n+cat <<- EOF\n+# Copyright (c) 2019, 2020 IBM Corp. and others\n+#\n+# This program and the accompanying materials are made available under\n+# the terms of the Eclipse Public License 2.0 which accompanies this\n+# distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+# or the Apache License, Version 2.0 which accompanies this distribution and\n+# is available at https://www.apache.org/licenses/LICENSE-2.0.\n+#\n+# This Source Code may also be made available under the following\n+# Secondary Licenses when the conditions for such availability set\n+# forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+# General Public License, version 2 with the GNU Classpath\n+# Exception [1] and GNU General Public License, version 2 with the\n+# OpenJDK Assembly Exception [2].\n+#\n+# [1] https://www.gnu.org/software/classpath/license.html\n+# [2] http://openjdk.java.net/legal/assembly-exception.html\n+#\n+# SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+EOF\n+}\n+\n+usage() {\n+  echo \"Usage: $0 [OPTION]...\"\n+  echo \"Generate a Dockerfile for building OpenJ9\"\n+  echo \"\"\n+  echo \"Options:\"\n+  echo \"  --help|-h      print this help, then exit\"\n+  echo \"  --arch=...     specify the processor architecture (default: host architecture)\"\n+  echo \"  --build        build the docker image (overrides '--print')\"\n+  echo \"  --cuda         include CUDA header files\"\n+  echo \"  --dist=...     specify the Linux distribution (e.g. centos, ubuntu)\"\n+  echo \"  --print        write the Dockerfile to stdout (default; overrides '--build')\"\n+  echo \"  --tag=...      specify a name for the docker image (may be repeated, default: none)\"\n+  echo \"  --user=...     specify the user name (default: 'jenkins')\"\n+  echo \"  --version=...  specify the distribution version (e.g. 6.9, 16.04)\"\n+  echo \"\"\n+  local arch=\"$(uname -m)\"\n+  echo \"Supported build patterns on this host ($arch):\"\n+if [ $arch = x86_64 ] ; then\n+  echo \"  bash mkdocker.sh --tag=openj9/cent69 --dist=centos --version=6.9 --build\"\n+fi\n+if [ $arch = x86_64 -o $arch = ppc64le ] ; then\n+  echo \"  bash mkdocker.sh --tag=openj9/cent7  --dist=centos --version=7   --build\"\n+fi\n+  echo \"  bash mkdocker.sh --tag=openj9/ub16   --dist=ubuntu --version=16  --build\"\n+  echo \"  bash mkdocker.sh --tag=openj9/ub18   --dist=ubuntu --version=18  --build\"\n+  echo \"  bash mkdocker.sh --tag=openj9/ub20   --dist=ubuntu --version=20  --build\"\n+  exit 1\n+}\n+\n+# Global configuration variables.\n+action=print\n+arch=\n+cuda=no\n+dist=unspecified\n+tags=()\n+user=jenkins\n+version=unspecified\n+\n+# Frequently used commands.\n+wget_O=\"wget --progress=dot:mega -O\"\n+\n+parse_options() {\n+  for arg in \"$@\" ; do\n+    case \"$arg\" in\n+      -h | --help)\n+        usage\n+        ;;\n+      --arch=*)\n+        arch=\"${arg#*=}\"\n+        ;;\n+      --build)\n+        action=build\n+        ;;\n+      --cuda)\n+        cuda=9.0\n+        ;;\n+      --dist=*)\n+        dist=\"${arg#*=}\"\n+        ;;\n+      --print)\n+        action=print\n+        ;;\n+      --tag=*)\n+        tags+=(\"${arg#*=}\")\n+        ;;\n+      --user=*)\n+        user=\"${arg#*=}\"\n+        ;;\n+      --version=*)\n+        version=\"${arg#*=}\"\n+        ;;\n+      *) # bad option\n+        echo \"Unsupported option: '$arg'\" >&2\n+        usage\n+        ;;\n+    esac\n+  done\n+}\n+\n+validate_options() {\n+  if [ \"x$arch\" = x ] ; then\n+    arch=\"$(uname -m)\"\n+  fi\n+\n+  case \"$arch\" in\n+    ppc64le | s390x | x86_64)\n+      ;;\n+    *)\n+      echo \"Unsupported architecture: '$arch'\" >&2\n+      exit 1\n+      ;;\n+  esac\n+\n+  # Validate the distribution and version.\n+  case \"$dist\" in\n+    centos)\n+      if [ $arch = s390x ] ; then\n+        echo \"CentOS is not supported on $arch\" >&2\n+        exit 1\n+      fi\n+      case $version in\n+        6.9)\n+          if [ $arch = ppc64le ] ; then\n+            echo \"CentOS version 6.9 is not supported on $arch\" >&2\n+            exit 1\n+          fi\n+          ;;\n+        7)\n+          ;;\n+        unspecified)\n+          echo \"Unspecified CentOS version: use '--version' option\" >&2\n+          exit 1\n+          ;;\n+        *)\n+          echo \"Unsupported CentOS version: '$version'\" >&2\n+          exit 1\n+          ;;\n+      esac\n+      ;;\n+    ubuntu)\n+      case $version in\n+        16 | 18 | 20)\n+          version=$version.04\n+          ;;\n+        16.04 | 18.04 | 20.04)\n+          ;;\n+        unspecified)\n+          echo \"Unspecified Ubuntu version: use '--version' option\" >&2\n+          exit 1\n+          ;;\n+        *)\n+          echo \"Unsupported Ubuntu version: '$version'\" >&2\n+          exit 1\n+          ;;\n+      esac\n+      ;;\n+    unspecified)\n+      echo \"Unspecified distribution: use '--dist' option\" >&2\n+      exit 1\n+      ;;\n+    *)\n+      echo \"Unsupported distribution: '$dist'\" >&2\n+      exit 1\n+      ;;\n+  esac\n+\n+  # If CUDA is requested, validate the architecture.\n+  if [ $cuda != no ] ; then\n+    case \"$arch\" in\n+      ppc64le | x86_64)\n+        ;;\n+      *)\n+        echo \"CUDA is not supported on architecture: '$arch'\" >&2\n+        exit 1\n+        ;;\n+    esac\n+  fi\n+}\n+\n+build_cmd() {\n+  local cmd=build\n+  local file=$1\n+  for tag in ${tags[@]} ; do\n+    cmd=\"$cmd --tag $tag\"\n+  done\n+  echo $cmd --file $file .\n+}\n+\n+preamble() {\n+  echo \"\"\n+  echo \"# Generated by: mkdocker.sh $command_line\"\n+  echo \"\"\n+  echo \"# To use this docker file:\"\n+  echo \"# First, copy your public ssh key into authorized_keys.\"\n+  echo \"# Then, in the directory containing the Dockerfile, authorized_keys\"\n+  echo \"# file, and known_hosts file, run:\"\n+  echo \"#   docker $(build_cmd Dockerfile)\"\n+  echo \"#\"\n+if [ ${#tags[@]} -lt 2 ] ; then\n+  echo \"# To start a container based on the resulting image, run this command:\"\n+else\n+  echo \"# To start a container based on the resulting image, run one of these commands:\"\n+fi\n+if [ ${#tags[@]} -eq 0 ] ; then\n+  echo \"#   docker run -it <image>\"\n+else\n+for tag in ${tags[@]} ; do\n+  echo \"#   docker run -it $tag\"\n+done\n+fi\n+  echo \"\"\n+if [ $cuda != no ] ; then\n+  echo \"FROM nvidia/cuda:${cuda}-devel-ubuntu16.04 AS cuda-dev\"\n+  echo \"\"\n+fi\n+  echo \"FROM $dist:$version\"\n+}\n+\n+install_centos_packages() {\n+  echo \"RUN yum -y update \\\\\"\n+if [ $version = 6.9 ] ; then\n+  echo \" && yum -y install https://\\$(rpm -E '%{?centos:centos}%{!?centos:rhel}%{rhel}').iuscommunity.org/ius-release.rpm \\\\\"\n+fi\n+  echo \" && yum -y install \\\\\"\n+  echo \"    alsa-lib-devel \\\\\"\n+  echo \"    automake \\\\\" # required to update make\n+  echo \"    bind-utils \\\\\"\n+  echo \"    bison \\\\\"\n+  echo \"    bzip2 \\\\\"\n+  echo \"    ca-certificates \\\\\"\n+  echo \"    cpio \\\\\"\n+  echo \"    cups-devel \\\\\"\n+  echo \"    curl-devel \\\\\" # required by git\n+  echo \"    elfutils-libelf-devel \\\\\"\n+  echo \"    expat-devel \\\\\" # required by git and the xml parser\n+  echo \"    file-devel \\\\\"\n+  echo \"    file-libs \\\\\"\n+  echo \"    flex \\\\\"\n+  echo \"    fontconfig \\\\\"\n+  echo \"    fontconfig-devel \\\\\"\n+  echo \"    freetype-devel \\\\\"\n+  echo \"    gettext \\\\\"\n+  echo \"    gettext-devel \\\\\" # required by git\n+  echo \"    glibc \\\\\"\n+  echo \"    glibc-common \\\\\"\n+  echo \"    glibc-devel \\\\\"\n+  echo \"    gmp-devel \\\\\"\n+  echo \"    lbzip2 \\\\\"\n+  echo \"    libdwarf \\\\\"\n+  echo \"    libdwarf-devel \\\\\"\n+  echo \"    libffi-devel \\\\\"\n+  echo \"    libstdc++-static \\\\\"\n+  echo \"    libX11-devel \\\\\"\n+  echo \"    libXext-devel \\\\\"\n+  echo \"    libXi-devel \\\\\"\n+  echo \"    libXrandr-devel \\\\\"\n+  echo \"    libXrender-devel \\\\\"\n+  echo \"    libXt-devel \\\\\"\n+  echo \"    libXtst-devel \\\\\"\n+  echo \"    make \\\\\"\n+  echo \"    mesa-libGL-devel \\\\\"\n+  echo \"    mpfr-devel \\\\\"\n+  echo \"    ntp \\\\\"\n+  echo \"    numactl-devel \\\\\"\n+  echo \"    openssh-clients \\\\\"\n+  echo \"    openssh-server \\\\\"\n+  echo \"    openssl-devel \\\\\" # required by git, etc.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA2NTQyMQ=="}, "originalCommit": {"oid": "24771d8a3d3bf6d37d10a0ddf97a4d4b6b478c46"}, "originalPosition": 273}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ1NTkzMA==", "bodyText": "We're at openssl 1.1.1g currently.\nA build of jdk11 configured --with-jitserver in a centos:6.9/x86 container completed successfully.", "url": "https://github.com/eclipse-openj9/openj9/pull/9371#discussion_r417455930", "createdAt": "2020-04-29T16:39:38Z", "author": {"login": "keithc-ca"}, "path": "buildenv/docker/mkdocker.sh", "diffHunk": "@@ -0,0 +1,697 @@\n+#!/bin/bash -\n+\n+print_license() {\n+cat <<- EOF\n+# Copyright (c) 2019, 2020 IBM Corp. and others\n+#\n+# This program and the accompanying materials are made available under\n+# the terms of the Eclipse Public License 2.0 which accompanies this\n+# distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+# or the Apache License, Version 2.0 which accompanies this distribution and\n+# is available at https://www.apache.org/licenses/LICENSE-2.0.\n+#\n+# This Source Code may also be made available under the following\n+# Secondary Licenses when the conditions for such availability set\n+# forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+# General Public License, version 2 with the GNU Classpath\n+# Exception [1] and GNU General Public License, version 2 with the\n+# OpenJDK Assembly Exception [2].\n+#\n+# [1] https://www.gnu.org/software/classpath/license.html\n+# [2] http://openjdk.java.net/legal/assembly-exception.html\n+#\n+# SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+EOF\n+}\n+\n+usage() {\n+  echo \"Usage: $0 [OPTION]...\"\n+  echo \"Generate a Dockerfile for building OpenJ9\"\n+  echo \"\"\n+  echo \"Options:\"\n+  echo \"  --help|-h      print this help, then exit\"\n+  echo \"  --arch=...     specify the processor architecture (default: host architecture)\"\n+  echo \"  --build        build the docker image (overrides '--print')\"\n+  echo \"  --cuda         include CUDA header files\"\n+  echo \"  --dist=...     specify the Linux distribution (e.g. centos, ubuntu)\"\n+  echo \"  --print        write the Dockerfile to stdout (default; overrides '--build')\"\n+  echo \"  --tag=...      specify a name for the docker image (may be repeated, default: none)\"\n+  echo \"  --user=...     specify the user name (default: 'jenkins')\"\n+  echo \"  --version=...  specify the distribution version (e.g. 6.9, 16.04)\"\n+  echo \"\"\n+  local arch=\"$(uname -m)\"\n+  echo \"Supported build patterns on this host ($arch):\"\n+if [ $arch = x86_64 ] ; then\n+  echo \"  bash mkdocker.sh --tag=openj9/cent69 --dist=centos --version=6.9 --build\"\n+fi\n+if [ $arch = x86_64 -o $arch = ppc64le ] ; then\n+  echo \"  bash mkdocker.sh --tag=openj9/cent7  --dist=centos --version=7   --build\"\n+fi\n+  echo \"  bash mkdocker.sh --tag=openj9/ub16   --dist=ubuntu --version=16  --build\"\n+  echo \"  bash mkdocker.sh --tag=openj9/ub18   --dist=ubuntu --version=18  --build\"\n+  echo \"  bash mkdocker.sh --tag=openj9/ub20   --dist=ubuntu --version=20  --build\"\n+  exit 1\n+}\n+\n+# Global configuration variables.\n+action=print\n+arch=\n+cuda=no\n+dist=unspecified\n+tags=()\n+user=jenkins\n+version=unspecified\n+\n+# Frequently used commands.\n+wget_O=\"wget --progress=dot:mega -O\"\n+\n+parse_options() {\n+  for arg in \"$@\" ; do\n+    case \"$arg\" in\n+      -h | --help)\n+        usage\n+        ;;\n+      --arch=*)\n+        arch=\"${arg#*=}\"\n+        ;;\n+      --build)\n+        action=build\n+        ;;\n+      --cuda)\n+        cuda=9.0\n+        ;;\n+      --dist=*)\n+        dist=\"${arg#*=}\"\n+        ;;\n+      --print)\n+        action=print\n+        ;;\n+      --tag=*)\n+        tags+=(\"${arg#*=}\")\n+        ;;\n+      --user=*)\n+        user=\"${arg#*=}\"\n+        ;;\n+      --version=*)\n+        version=\"${arg#*=}\"\n+        ;;\n+      *) # bad option\n+        echo \"Unsupported option: '$arg'\" >&2\n+        usage\n+        ;;\n+    esac\n+  done\n+}\n+\n+validate_options() {\n+  if [ \"x$arch\" = x ] ; then\n+    arch=\"$(uname -m)\"\n+  fi\n+\n+  case \"$arch\" in\n+    ppc64le | s390x | x86_64)\n+      ;;\n+    *)\n+      echo \"Unsupported architecture: '$arch'\" >&2\n+      exit 1\n+      ;;\n+  esac\n+\n+  # Validate the distribution and version.\n+  case \"$dist\" in\n+    centos)\n+      if [ $arch = s390x ] ; then\n+        echo \"CentOS is not supported on $arch\" >&2\n+        exit 1\n+      fi\n+      case $version in\n+        6.9)\n+          if [ $arch = ppc64le ] ; then\n+            echo \"CentOS version 6.9 is not supported on $arch\" >&2\n+            exit 1\n+          fi\n+          ;;\n+        7)\n+          ;;\n+        unspecified)\n+          echo \"Unspecified CentOS version: use '--version' option\" >&2\n+          exit 1\n+          ;;\n+        *)\n+          echo \"Unsupported CentOS version: '$version'\" >&2\n+          exit 1\n+          ;;\n+      esac\n+      ;;\n+    ubuntu)\n+      case $version in\n+        16 | 18 | 20)\n+          version=$version.04\n+          ;;\n+        16.04 | 18.04 | 20.04)\n+          ;;\n+        unspecified)\n+          echo \"Unspecified Ubuntu version: use '--version' option\" >&2\n+          exit 1\n+          ;;\n+        *)\n+          echo \"Unsupported Ubuntu version: '$version'\" >&2\n+          exit 1\n+          ;;\n+      esac\n+      ;;\n+    unspecified)\n+      echo \"Unspecified distribution: use '--dist' option\" >&2\n+      exit 1\n+      ;;\n+    *)\n+      echo \"Unsupported distribution: '$dist'\" >&2\n+      exit 1\n+      ;;\n+  esac\n+\n+  # If CUDA is requested, validate the architecture.\n+  if [ $cuda != no ] ; then\n+    case \"$arch\" in\n+      ppc64le | x86_64)\n+        ;;\n+      *)\n+        echo \"CUDA is not supported on architecture: '$arch'\" >&2\n+        exit 1\n+        ;;\n+    esac\n+  fi\n+}\n+\n+build_cmd() {\n+  local cmd=build\n+  local file=$1\n+  for tag in ${tags[@]} ; do\n+    cmd=\"$cmd --tag $tag\"\n+  done\n+  echo $cmd --file $file .\n+}\n+\n+preamble() {\n+  echo \"\"\n+  echo \"# Generated by: mkdocker.sh $command_line\"\n+  echo \"\"\n+  echo \"# To use this docker file:\"\n+  echo \"# First, copy your public ssh key into authorized_keys.\"\n+  echo \"# Then, in the directory containing the Dockerfile, authorized_keys\"\n+  echo \"# file, and known_hosts file, run:\"\n+  echo \"#   docker $(build_cmd Dockerfile)\"\n+  echo \"#\"\n+if [ ${#tags[@]} -lt 2 ] ; then\n+  echo \"# To start a container based on the resulting image, run this command:\"\n+else\n+  echo \"# To start a container based on the resulting image, run one of these commands:\"\n+fi\n+if [ ${#tags[@]} -eq 0 ] ; then\n+  echo \"#   docker run -it <image>\"\n+else\n+for tag in ${tags[@]} ; do\n+  echo \"#   docker run -it $tag\"\n+done\n+fi\n+  echo \"\"\n+if [ $cuda != no ] ; then\n+  echo \"FROM nvidia/cuda:${cuda}-devel-ubuntu16.04 AS cuda-dev\"\n+  echo \"\"\n+fi\n+  echo \"FROM $dist:$version\"\n+}\n+\n+install_centos_packages() {\n+  echo \"RUN yum -y update \\\\\"\n+if [ $version = 6.9 ] ; then\n+  echo \" && yum -y install https://\\$(rpm -E '%{?centos:centos}%{!?centos:rhel}%{rhel}').iuscommunity.org/ius-release.rpm \\\\\"\n+fi\n+  echo \" && yum -y install \\\\\"\n+  echo \"    alsa-lib-devel \\\\\"\n+  echo \"    automake \\\\\" # required to update make\n+  echo \"    bind-utils \\\\\"\n+  echo \"    bison \\\\\"\n+  echo \"    bzip2 \\\\\"\n+  echo \"    ca-certificates \\\\\"\n+  echo \"    cpio \\\\\"\n+  echo \"    cups-devel \\\\\"\n+  echo \"    curl-devel \\\\\" # required by git\n+  echo \"    elfutils-libelf-devel \\\\\"\n+  echo \"    expat-devel \\\\\" # required by git and the xml parser\n+  echo \"    file-devel \\\\\"\n+  echo \"    file-libs \\\\\"\n+  echo \"    flex \\\\\"\n+  echo \"    fontconfig \\\\\"\n+  echo \"    fontconfig-devel \\\\\"\n+  echo \"    freetype-devel \\\\\"\n+  echo \"    gettext \\\\\"\n+  echo \"    gettext-devel \\\\\" # required by git\n+  echo \"    glibc \\\\\"\n+  echo \"    glibc-common \\\\\"\n+  echo \"    glibc-devel \\\\\"\n+  echo \"    gmp-devel \\\\\"\n+  echo \"    lbzip2 \\\\\"\n+  echo \"    libdwarf \\\\\"\n+  echo \"    libdwarf-devel \\\\\"\n+  echo \"    libffi-devel \\\\\"\n+  echo \"    libstdc++-static \\\\\"\n+  echo \"    libX11-devel \\\\\"\n+  echo \"    libXext-devel \\\\\"\n+  echo \"    libXi-devel \\\\\"\n+  echo \"    libXrandr-devel \\\\\"\n+  echo \"    libXrender-devel \\\\\"\n+  echo \"    libXt-devel \\\\\"\n+  echo \"    libXtst-devel \\\\\"\n+  echo \"    make \\\\\"\n+  echo \"    mesa-libGL-devel \\\\\"\n+  echo \"    mpfr-devel \\\\\"\n+  echo \"    ntp \\\\\"\n+  echo \"    numactl-devel \\\\\"\n+  echo \"    openssh-clients \\\\\"\n+  echo \"    openssh-server \\\\\"\n+  echo \"    openssl-devel \\\\\" # required by git, etc.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA2NTQyMQ=="}, "originalCommit": {"oid": "24771d8a3d3bf6d37d10a0ddf97a4d4b6b478c46"}, "originalPosition": 273}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUxNzA1MA==", "bodyText": "Any Linux system installed openssl satisfies a runtime requirement, not a build requirement. The build downloads 1.1.1g (currently) and builds against that, it doesn't matter what is installed on the system.\ni.e. you'd need to run JIT server testing to see any problem, which may include using test_flags: 'JITAAS'. I'm not sure if existing tests would identify problems with openssl. Better to ask @mpirvu about the requirements.", "url": "https://github.com/eclipse-openj9/openj9/pull/9371#discussion_r417517050", "createdAt": "2020-04-29T18:16:54Z", "author": {"login": "pshipton"}, "path": "buildenv/docker/mkdocker.sh", "diffHunk": "@@ -0,0 +1,697 @@\n+#!/bin/bash -\n+\n+print_license() {\n+cat <<- EOF\n+# Copyright (c) 2019, 2020 IBM Corp. and others\n+#\n+# This program and the accompanying materials are made available under\n+# the terms of the Eclipse Public License 2.0 which accompanies this\n+# distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+# or the Apache License, Version 2.0 which accompanies this distribution and\n+# is available at https://www.apache.org/licenses/LICENSE-2.0.\n+#\n+# This Source Code may also be made available under the following\n+# Secondary Licenses when the conditions for such availability set\n+# forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+# General Public License, version 2 with the GNU Classpath\n+# Exception [1] and GNU General Public License, version 2 with the\n+# OpenJDK Assembly Exception [2].\n+#\n+# [1] https://www.gnu.org/software/classpath/license.html\n+# [2] http://openjdk.java.net/legal/assembly-exception.html\n+#\n+# SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+EOF\n+}\n+\n+usage() {\n+  echo \"Usage: $0 [OPTION]...\"\n+  echo \"Generate a Dockerfile for building OpenJ9\"\n+  echo \"\"\n+  echo \"Options:\"\n+  echo \"  --help|-h      print this help, then exit\"\n+  echo \"  --arch=...     specify the processor architecture (default: host architecture)\"\n+  echo \"  --build        build the docker image (overrides '--print')\"\n+  echo \"  --cuda         include CUDA header files\"\n+  echo \"  --dist=...     specify the Linux distribution (e.g. centos, ubuntu)\"\n+  echo \"  --print        write the Dockerfile to stdout (default; overrides '--build')\"\n+  echo \"  --tag=...      specify a name for the docker image (may be repeated, default: none)\"\n+  echo \"  --user=...     specify the user name (default: 'jenkins')\"\n+  echo \"  --version=...  specify the distribution version (e.g. 6.9, 16.04)\"\n+  echo \"\"\n+  local arch=\"$(uname -m)\"\n+  echo \"Supported build patterns on this host ($arch):\"\n+if [ $arch = x86_64 ] ; then\n+  echo \"  bash mkdocker.sh --tag=openj9/cent69 --dist=centos --version=6.9 --build\"\n+fi\n+if [ $arch = x86_64 -o $arch = ppc64le ] ; then\n+  echo \"  bash mkdocker.sh --tag=openj9/cent7  --dist=centos --version=7   --build\"\n+fi\n+  echo \"  bash mkdocker.sh --tag=openj9/ub16   --dist=ubuntu --version=16  --build\"\n+  echo \"  bash mkdocker.sh --tag=openj9/ub18   --dist=ubuntu --version=18  --build\"\n+  echo \"  bash mkdocker.sh --tag=openj9/ub20   --dist=ubuntu --version=20  --build\"\n+  exit 1\n+}\n+\n+# Global configuration variables.\n+action=print\n+arch=\n+cuda=no\n+dist=unspecified\n+tags=()\n+user=jenkins\n+version=unspecified\n+\n+# Frequently used commands.\n+wget_O=\"wget --progress=dot:mega -O\"\n+\n+parse_options() {\n+  for arg in \"$@\" ; do\n+    case \"$arg\" in\n+      -h | --help)\n+        usage\n+        ;;\n+      --arch=*)\n+        arch=\"${arg#*=}\"\n+        ;;\n+      --build)\n+        action=build\n+        ;;\n+      --cuda)\n+        cuda=9.0\n+        ;;\n+      --dist=*)\n+        dist=\"${arg#*=}\"\n+        ;;\n+      --print)\n+        action=print\n+        ;;\n+      --tag=*)\n+        tags+=(\"${arg#*=}\")\n+        ;;\n+      --user=*)\n+        user=\"${arg#*=}\"\n+        ;;\n+      --version=*)\n+        version=\"${arg#*=}\"\n+        ;;\n+      *) # bad option\n+        echo \"Unsupported option: '$arg'\" >&2\n+        usage\n+        ;;\n+    esac\n+  done\n+}\n+\n+validate_options() {\n+  if [ \"x$arch\" = x ] ; then\n+    arch=\"$(uname -m)\"\n+  fi\n+\n+  case \"$arch\" in\n+    ppc64le | s390x | x86_64)\n+      ;;\n+    *)\n+      echo \"Unsupported architecture: '$arch'\" >&2\n+      exit 1\n+      ;;\n+  esac\n+\n+  # Validate the distribution and version.\n+  case \"$dist\" in\n+    centos)\n+      if [ $arch = s390x ] ; then\n+        echo \"CentOS is not supported on $arch\" >&2\n+        exit 1\n+      fi\n+      case $version in\n+        6.9)\n+          if [ $arch = ppc64le ] ; then\n+            echo \"CentOS version 6.9 is not supported on $arch\" >&2\n+            exit 1\n+          fi\n+          ;;\n+        7)\n+          ;;\n+        unspecified)\n+          echo \"Unspecified CentOS version: use '--version' option\" >&2\n+          exit 1\n+          ;;\n+        *)\n+          echo \"Unsupported CentOS version: '$version'\" >&2\n+          exit 1\n+          ;;\n+      esac\n+      ;;\n+    ubuntu)\n+      case $version in\n+        16 | 18 | 20)\n+          version=$version.04\n+          ;;\n+        16.04 | 18.04 | 20.04)\n+          ;;\n+        unspecified)\n+          echo \"Unspecified Ubuntu version: use '--version' option\" >&2\n+          exit 1\n+          ;;\n+        *)\n+          echo \"Unsupported Ubuntu version: '$version'\" >&2\n+          exit 1\n+          ;;\n+      esac\n+      ;;\n+    unspecified)\n+      echo \"Unspecified distribution: use '--dist' option\" >&2\n+      exit 1\n+      ;;\n+    *)\n+      echo \"Unsupported distribution: '$dist'\" >&2\n+      exit 1\n+      ;;\n+  esac\n+\n+  # If CUDA is requested, validate the architecture.\n+  if [ $cuda != no ] ; then\n+    case \"$arch\" in\n+      ppc64le | x86_64)\n+        ;;\n+      *)\n+        echo \"CUDA is not supported on architecture: '$arch'\" >&2\n+        exit 1\n+        ;;\n+    esac\n+  fi\n+}\n+\n+build_cmd() {\n+  local cmd=build\n+  local file=$1\n+  for tag in ${tags[@]} ; do\n+    cmd=\"$cmd --tag $tag\"\n+  done\n+  echo $cmd --file $file .\n+}\n+\n+preamble() {\n+  echo \"\"\n+  echo \"# Generated by: mkdocker.sh $command_line\"\n+  echo \"\"\n+  echo \"# To use this docker file:\"\n+  echo \"# First, copy your public ssh key into authorized_keys.\"\n+  echo \"# Then, in the directory containing the Dockerfile, authorized_keys\"\n+  echo \"# file, and known_hosts file, run:\"\n+  echo \"#   docker $(build_cmd Dockerfile)\"\n+  echo \"#\"\n+if [ ${#tags[@]} -lt 2 ] ; then\n+  echo \"# To start a container based on the resulting image, run this command:\"\n+else\n+  echo \"# To start a container based on the resulting image, run one of these commands:\"\n+fi\n+if [ ${#tags[@]} -eq 0 ] ; then\n+  echo \"#   docker run -it <image>\"\n+else\n+for tag in ${tags[@]} ; do\n+  echo \"#   docker run -it $tag\"\n+done\n+fi\n+  echo \"\"\n+if [ $cuda != no ] ; then\n+  echo \"FROM nvidia/cuda:${cuda}-devel-ubuntu16.04 AS cuda-dev\"\n+  echo \"\"\n+fi\n+  echo \"FROM $dist:$version\"\n+}\n+\n+install_centos_packages() {\n+  echo \"RUN yum -y update \\\\\"\n+if [ $version = 6.9 ] ; then\n+  echo \" && yum -y install https://\\$(rpm -E '%{?centos:centos}%{!?centos:rhel}%{rhel}').iuscommunity.org/ius-release.rpm \\\\\"\n+fi\n+  echo \" && yum -y install \\\\\"\n+  echo \"    alsa-lib-devel \\\\\"\n+  echo \"    automake \\\\\" # required to update make\n+  echo \"    bind-utils \\\\\"\n+  echo \"    bison \\\\\"\n+  echo \"    bzip2 \\\\\"\n+  echo \"    ca-certificates \\\\\"\n+  echo \"    cpio \\\\\"\n+  echo \"    cups-devel \\\\\"\n+  echo \"    curl-devel \\\\\" # required by git\n+  echo \"    elfutils-libelf-devel \\\\\"\n+  echo \"    expat-devel \\\\\" # required by git and the xml parser\n+  echo \"    file-devel \\\\\"\n+  echo \"    file-libs \\\\\"\n+  echo \"    flex \\\\\"\n+  echo \"    fontconfig \\\\\"\n+  echo \"    fontconfig-devel \\\\\"\n+  echo \"    freetype-devel \\\\\"\n+  echo \"    gettext \\\\\"\n+  echo \"    gettext-devel \\\\\" # required by git\n+  echo \"    glibc \\\\\"\n+  echo \"    glibc-common \\\\\"\n+  echo \"    glibc-devel \\\\\"\n+  echo \"    gmp-devel \\\\\"\n+  echo \"    lbzip2 \\\\\"\n+  echo \"    libdwarf \\\\\"\n+  echo \"    libdwarf-devel \\\\\"\n+  echo \"    libffi-devel \\\\\"\n+  echo \"    libstdc++-static \\\\\"\n+  echo \"    libX11-devel \\\\\"\n+  echo \"    libXext-devel \\\\\"\n+  echo \"    libXi-devel \\\\\"\n+  echo \"    libXrandr-devel \\\\\"\n+  echo \"    libXrender-devel \\\\\"\n+  echo \"    libXt-devel \\\\\"\n+  echo \"    libXtst-devel \\\\\"\n+  echo \"    make \\\\\"\n+  echo \"    mesa-libGL-devel \\\\\"\n+  echo \"    mpfr-devel \\\\\"\n+  echo \"    ntp \\\\\"\n+  echo \"    numactl-devel \\\\\"\n+  echo \"    openssh-clients \\\\\"\n+  echo \"    openssh-server \\\\\"\n+  echo \"    openssl-devel \\\\\" # required by git, etc.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA2NTQyMQ=="}, "originalCommit": {"oid": "24771d8a3d3bf6d37d10a0ddf97a4d4b6b478c46"}, "originalPosition": 273}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUxODcwNw==", "bodyText": "I note https://blog.openj9.org/2020/01/09/free-your-jvm-from-the-jit-with-jitserver-technology/ mentions If so desired, the network communication between the client JVM and JITServer can be encrypted using OpenSSL 1.0.x or 1.1.x", "url": "https://github.com/eclipse-openj9/openj9/pull/9371#discussion_r417518707", "createdAt": "2020-04-29T18:19:48Z", "author": {"login": "pshipton"}, "path": "buildenv/docker/mkdocker.sh", "diffHunk": "@@ -0,0 +1,697 @@\n+#!/bin/bash -\n+\n+print_license() {\n+cat <<- EOF\n+# Copyright (c) 2019, 2020 IBM Corp. and others\n+#\n+# This program and the accompanying materials are made available under\n+# the terms of the Eclipse Public License 2.0 which accompanies this\n+# distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+# or the Apache License, Version 2.0 which accompanies this distribution and\n+# is available at https://www.apache.org/licenses/LICENSE-2.0.\n+#\n+# This Source Code may also be made available under the following\n+# Secondary Licenses when the conditions for such availability set\n+# forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+# General Public License, version 2 with the GNU Classpath\n+# Exception [1] and GNU General Public License, version 2 with the\n+# OpenJDK Assembly Exception [2].\n+#\n+# [1] https://www.gnu.org/software/classpath/license.html\n+# [2] http://openjdk.java.net/legal/assembly-exception.html\n+#\n+# SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+EOF\n+}\n+\n+usage() {\n+  echo \"Usage: $0 [OPTION]...\"\n+  echo \"Generate a Dockerfile for building OpenJ9\"\n+  echo \"\"\n+  echo \"Options:\"\n+  echo \"  --help|-h      print this help, then exit\"\n+  echo \"  --arch=...     specify the processor architecture (default: host architecture)\"\n+  echo \"  --build        build the docker image (overrides '--print')\"\n+  echo \"  --cuda         include CUDA header files\"\n+  echo \"  --dist=...     specify the Linux distribution (e.g. centos, ubuntu)\"\n+  echo \"  --print        write the Dockerfile to stdout (default; overrides '--build')\"\n+  echo \"  --tag=...      specify a name for the docker image (may be repeated, default: none)\"\n+  echo \"  --user=...     specify the user name (default: 'jenkins')\"\n+  echo \"  --version=...  specify the distribution version (e.g. 6.9, 16.04)\"\n+  echo \"\"\n+  local arch=\"$(uname -m)\"\n+  echo \"Supported build patterns on this host ($arch):\"\n+if [ $arch = x86_64 ] ; then\n+  echo \"  bash mkdocker.sh --tag=openj9/cent69 --dist=centos --version=6.9 --build\"\n+fi\n+if [ $arch = x86_64 -o $arch = ppc64le ] ; then\n+  echo \"  bash mkdocker.sh --tag=openj9/cent7  --dist=centos --version=7   --build\"\n+fi\n+  echo \"  bash mkdocker.sh --tag=openj9/ub16   --dist=ubuntu --version=16  --build\"\n+  echo \"  bash mkdocker.sh --tag=openj9/ub18   --dist=ubuntu --version=18  --build\"\n+  echo \"  bash mkdocker.sh --tag=openj9/ub20   --dist=ubuntu --version=20  --build\"\n+  exit 1\n+}\n+\n+# Global configuration variables.\n+action=print\n+arch=\n+cuda=no\n+dist=unspecified\n+tags=()\n+user=jenkins\n+version=unspecified\n+\n+# Frequently used commands.\n+wget_O=\"wget --progress=dot:mega -O\"\n+\n+parse_options() {\n+  for arg in \"$@\" ; do\n+    case \"$arg\" in\n+      -h | --help)\n+        usage\n+        ;;\n+      --arch=*)\n+        arch=\"${arg#*=}\"\n+        ;;\n+      --build)\n+        action=build\n+        ;;\n+      --cuda)\n+        cuda=9.0\n+        ;;\n+      --dist=*)\n+        dist=\"${arg#*=}\"\n+        ;;\n+      --print)\n+        action=print\n+        ;;\n+      --tag=*)\n+        tags+=(\"${arg#*=}\")\n+        ;;\n+      --user=*)\n+        user=\"${arg#*=}\"\n+        ;;\n+      --version=*)\n+        version=\"${arg#*=}\"\n+        ;;\n+      *) # bad option\n+        echo \"Unsupported option: '$arg'\" >&2\n+        usage\n+        ;;\n+    esac\n+  done\n+}\n+\n+validate_options() {\n+  if [ \"x$arch\" = x ] ; then\n+    arch=\"$(uname -m)\"\n+  fi\n+\n+  case \"$arch\" in\n+    ppc64le | s390x | x86_64)\n+      ;;\n+    *)\n+      echo \"Unsupported architecture: '$arch'\" >&2\n+      exit 1\n+      ;;\n+  esac\n+\n+  # Validate the distribution and version.\n+  case \"$dist\" in\n+    centos)\n+      if [ $arch = s390x ] ; then\n+        echo \"CentOS is not supported on $arch\" >&2\n+        exit 1\n+      fi\n+      case $version in\n+        6.9)\n+          if [ $arch = ppc64le ] ; then\n+            echo \"CentOS version 6.9 is not supported on $arch\" >&2\n+            exit 1\n+          fi\n+          ;;\n+        7)\n+          ;;\n+        unspecified)\n+          echo \"Unspecified CentOS version: use '--version' option\" >&2\n+          exit 1\n+          ;;\n+        *)\n+          echo \"Unsupported CentOS version: '$version'\" >&2\n+          exit 1\n+          ;;\n+      esac\n+      ;;\n+    ubuntu)\n+      case $version in\n+        16 | 18 | 20)\n+          version=$version.04\n+          ;;\n+        16.04 | 18.04 | 20.04)\n+          ;;\n+        unspecified)\n+          echo \"Unspecified Ubuntu version: use '--version' option\" >&2\n+          exit 1\n+          ;;\n+        *)\n+          echo \"Unsupported Ubuntu version: '$version'\" >&2\n+          exit 1\n+          ;;\n+      esac\n+      ;;\n+    unspecified)\n+      echo \"Unspecified distribution: use '--dist' option\" >&2\n+      exit 1\n+      ;;\n+    *)\n+      echo \"Unsupported distribution: '$dist'\" >&2\n+      exit 1\n+      ;;\n+  esac\n+\n+  # If CUDA is requested, validate the architecture.\n+  if [ $cuda != no ] ; then\n+    case \"$arch\" in\n+      ppc64le | x86_64)\n+        ;;\n+      *)\n+        echo \"CUDA is not supported on architecture: '$arch'\" >&2\n+        exit 1\n+        ;;\n+    esac\n+  fi\n+}\n+\n+build_cmd() {\n+  local cmd=build\n+  local file=$1\n+  for tag in ${tags[@]} ; do\n+    cmd=\"$cmd --tag $tag\"\n+  done\n+  echo $cmd --file $file .\n+}\n+\n+preamble() {\n+  echo \"\"\n+  echo \"# Generated by: mkdocker.sh $command_line\"\n+  echo \"\"\n+  echo \"# To use this docker file:\"\n+  echo \"# First, copy your public ssh key into authorized_keys.\"\n+  echo \"# Then, in the directory containing the Dockerfile, authorized_keys\"\n+  echo \"# file, and known_hosts file, run:\"\n+  echo \"#   docker $(build_cmd Dockerfile)\"\n+  echo \"#\"\n+if [ ${#tags[@]} -lt 2 ] ; then\n+  echo \"# To start a container based on the resulting image, run this command:\"\n+else\n+  echo \"# To start a container based on the resulting image, run one of these commands:\"\n+fi\n+if [ ${#tags[@]} -eq 0 ] ; then\n+  echo \"#   docker run -it <image>\"\n+else\n+for tag in ${tags[@]} ; do\n+  echo \"#   docker run -it $tag\"\n+done\n+fi\n+  echo \"\"\n+if [ $cuda != no ] ; then\n+  echo \"FROM nvidia/cuda:${cuda}-devel-ubuntu16.04 AS cuda-dev\"\n+  echo \"\"\n+fi\n+  echo \"FROM $dist:$version\"\n+}\n+\n+install_centos_packages() {\n+  echo \"RUN yum -y update \\\\\"\n+if [ $version = 6.9 ] ; then\n+  echo \" && yum -y install https://\\$(rpm -E '%{?centos:centos}%{!?centos:rhel}%{rhel}').iuscommunity.org/ius-release.rpm \\\\\"\n+fi\n+  echo \" && yum -y install \\\\\"\n+  echo \"    alsa-lib-devel \\\\\"\n+  echo \"    automake \\\\\" # required to update make\n+  echo \"    bind-utils \\\\\"\n+  echo \"    bison \\\\\"\n+  echo \"    bzip2 \\\\\"\n+  echo \"    ca-certificates \\\\\"\n+  echo \"    cpio \\\\\"\n+  echo \"    cups-devel \\\\\"\n+  echo \"    curl-devel \\\\\" # required by git\n+  echo \"    elfutils-libelf-devel \\\\\"\n+  echo \"    expat-devel \\\\\" # required by git and the xml parser\n+  echo \"    file-devel \\\\\"\n+  echo \"    file-libs \\\\\"\n+  echo \"    flex \\\\\"\n+  echo \"    fontconfig \\\\\"\n+  echo \"    fontconfig-devel \\\\\"\n+  echo \"    freetype-devel \\\\\"\n+  echo \"    gettext \\\\\"\n+  echo \"    gettext-devel \\\\\" # required by git\n+  echo \"    glibc \\\\\"\n+  echo \"    glibc-common \\\\\"\n+  echo \"    glibc-devel \\\\\"\n+  echo \"    gmp-devel \\\\\"\n+  echo \"    lbzip2 \\\\\"\n+  echo \"    libdwarf \\\\\"\n+  echo \"    libdwarf-devel \\\\\"\n+  echo \"    libffi-devel \\\\\"\n+  echo \"    libstdc++-static \\\\\"\n+  echo \"    libX11-devel \\\\\"\n+  echo \"    libXext-devel \\\\\"\n+  echo \"    libXi-devel \\\\\"\n+  echo \"    libXrandr-devel \\\\\"\n+  echo \"    libXrender-devel \\\\\"\n+  echo \"    libXt-devel \\\\\"\n+  echo \"    libXtst-devel \\\\\"\n+  echo \"    make \\\\\"\n+  echo \"    mesa-libGL-devel \\\\\"\n+  echo \"    mpfr-devel \\\\\"\n+  echo \"    ntp \\\\\"\n+  echo \"    numactl-devel \\\\\"\n+  echo \"    openssh-clients \\\\\"\n+  echo \"    openssh-server \\\\\"\n+  echo \"    openssl-devel \\\\\" # required by git, etc.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA2NTQyMQ=="}, "originalCommit": {"oid": "24771d8a3d3bf6d37d10a0ddf97a4d4b6b478c46"}, "originalPosition": 273}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUzOTU2MA==", "bodyText": "yes, JITServer can build against OpenSSL 1.1.x, so we should be good.", "url": "https://github.com/eclipse-openj9/openj9/pull/9371#discussion_r417539560", "createdAt": "2020-04-29T18:55:14Z", "author": {"login": "mpirvu"}, "path": "buildenv/docker/mkdocker.sh", "diffHunk": "@@ -0,0 +1,697 @@\n+#!/bin/bash -\n+\n+print_license() {\n+cat <<- EOF\n+# Copyright (c) 2019, 2020 IBM Corp. and others\n+#\n+# This program and the accompanying materials are made available under\n+# the terms of the Eclipse Public License 2.0 which accompanies this\n+# distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+# or the Apache License, Version 2.0 which accompanies this distribution and\n+# is available at https://www.apache.org/licenses/LICENSE-2.0.\n+#\n+# This Source Code may also be made available under the following\n+# Secondary Licenses when the conditions for such availability set\n+# forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+# General Public License, version 2 with the GNU Classpath\n+# Exception [1] and GNU General Public License, version 2 with the\n+# OpenJDK Assembly Exception [2].\n+#\n+# [1] https://www.gnu.org/software/classpath/license.html\n+# [2] http://openjdk.java.net/legal/assembly-exception.html\n+#\n+# SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+EOF\n+}\n+\n+usage() {\n+  echo \"Usage: $0 [OPTION]...\"\n+  echo \"Generate a Dockerfile for building OpenJ9\"\n+  echo \"\"\n+  echo \"Options:\"\n+  echo \"  --help|-h      print this help, then exit\"\n+  echo \"  --arch=...     specify the processor architecture (default: host architecture)\"\n+  echo \"  --build        build the docker image (overrides '--print')\"\n+  echo \"  --cuda         include CUDA header files\"\n+  echo \"  --dist=...     specify the Linux distribution (e.g. centos, ubuntu)\"\n+  echo \"  --print        write the Dockerfile to stdout (default; overrides '--build')\"\n+  echo \"  --tag=...      specify a name for the docker image (may be repeated, default: none)\"\n+  echo \"  --user=...     specify the user name (default: 'jenkins')\"\n+  echo \"  --version=...  specify the distribution version (e.g. 6.9, 16.04)\"\n+  echo \"\"\n+  local arch=\"$(uname -m)\"\n+  echo \"Supported build patterns on this host ($arch):\"\n+if [ $arch = x86_64 ] ; then\n+  echo \"  bash mkdocker.sh --tag=openj9/cent69 --dist=centos --version=6.9 --build\"\n+fi\n+if [ $arch = x86_64 -o $arch = ppc64le ] ; then\n+  echo \"  bash mkdocker.sh --tag=openj9/cent7  --dist=centos --version=7   --build\"\n+fi\n+  echo \"  bash mkdocker.sh --tag=openj9/ub16   --dist=ubuntu --version=16  --build\"\n+  echo \"  bash mkdocker.sh --tag=openj9/ub18   --dist=ubuntu --version=18  --build\"\n+  echo \"  bash mkdocker.sh --tag=openj9/ub20   --dist=ubuntu --version=20  --build\"\n+  exit 1\n+}\n+\n+# Global configuration variables.\n+action=print\n+arch=\n+cuda=no\n+dist=unspecified\n+tags=()\n+user=jenkins\n+version=unspecified\n+\n+# Frequently used commands.\n+wget_O=\"wget --progress=dot:mega -O\"\n+\n+parse_options() {\n+  for arg in \"$@\" ; do\n+    case \"$arg\" in\n+      -h | --help)\n+        usage\n+        ;;\n+      --arch=*)\n+        arch=\"${arg#*=}\"\n+        ;;\n+      --build)\n+        action=build\n+        ;;\n+      --cuda)\n+        cuda=9.0\n+        ;;\n+      --dist=*)\n+        dist=\"${arg#*=}\"\n+        ;;\n+      --print)\n+        action=print\n+        ;;\n+      --tag=*)\n+        tags+=(\"${arg#*=}\")\n+        ;;\n+      --user=*)\n+        user=\"${arg#*=}\"\n+        ;;\n+      --version=*)\n+        version=\"${arg#*=}\"\n+        ;;\n+      *) # bad option\n+        echo \"Unsupported option: '$arg'\" >&2\n+        usage\n+        ;;\n+    esac\n+  done\n+}\n+\n+validate_options() {\n+  if [ \"x$arch\" = x ] ; then\n+    arch=\"$(uname -m)\"\n+  fi\n+\n+  case \"$arch\" in\n+    ppc64le | s390x | x86_64)\n+      ;;\n+    *)\n+      echo \"Unsupported architecture: '$arch'\" >&2\n+      exit 1\n+      ;;\n+  esac\n+\n+  # Validate the distribution and version.\n+  case \"$dist\" in\n+    centos)\n+      if [ $arch = s390x ] ; then\n+        echo \"CentOS is not supported on $arch\" >&2\n+        exit 1\n+      fi\n+      case $version in\n+        6.9)\n+          if [ $arch = ppc64le ] ; then\n+            echo \"CentOS version 6.9 is not supported on $arch\" >&2\n+            exit 1\n+          fi\n+          ;;\n+        7)\n+          ;;\n+        unspecified)\n+          echo \"Unspecified CentOS version: use '--version' option\" >&2\n+          exit 1\n+          ;;\n+        *)\n+          echo \"Unsupported CentOS version: '$version'\" >&2\n+          exit 1\n+          ;;\n+      esac\n+      ;;\n+    ubuntu)\n+      case $version in\n+        16 | 18 | 20)\n+          version=$version.04\n+          ;;\n+        16.04 | 18.04 | 20.04)\n+          ;;\n+        unspecified)\n+          echo \"Unspecified Ubuntu version: use '--version' option\" >&2\n+          exit 1\n+          ;;\n+        *)\n+          echo \"Unsupported Ubuntu version: '$version'\" >&2\n+          exit 1\n+          ;;\n+      esac\n+      ;;\n+    unspecified)\n+      echo \"Unspecified distribution: use '--dist' option\" >&2\n+      exit 1\n+      ;;\n+    *)\n+      echo \"Unsupported distribution: '$dist'\" >&2\n+      exit 1\n+      ;;\n+  esac\n+\n+  # If CUDA is requested, validate the architecture.\n+  if [ $cuda != no ] ; then\n+    case \"$arch\" in\n+      ppc64le | x86_64)\n+        ;;\n+      *)\n+        echo \"CUDA is not supported on architecture: '$arch'\" >&2\n+        exit 1\n+        ;;\n+    esac\n+  fi\n+}\n+\n+build_cmd() {\n+  local cmd=build\n+  local file=$1\n+  for tag in ${tags[@]} ; do\n+    cmd=\"$cmd --tag $tag\"\n+  done\n+  echo $cmd --file $file .\n+}\n+\n+preamble() {\n+  echo \"\"\n+  echo \"# Generated by: mkdocker.sh $command_line\"\n+  echo \"\"\n+  echo \"# To use this docker file:\"\n+  echo \"# First, copy your public ssh key into authorized_keys.\"\n+  echo \"# Then, in the directory containing the Dockerfile, authorized_keys\"\n+  echo \"# file, and known_hosts file, run:\"\n+  echo \"#   docker $(build_cmd Dockerfile)\"\n+  echo \"#\"\n+if [ ${#tags[@]} -lt 2 ] ; then\n+  echo \"# To start a container based on the resulting image, run this command:\"\n+else\n+  echo \"# To start a container based on the resulting image, run one of these commands:\"\n+fi\n+if [ ${#tags[@]} -eq 0 ] ; then\n+  echo \"#   docker run -it <image>\"\n+else\n+for tag in ${tags[@]} ; do\n+  echo \"#   docker run -it $tag\"\n+done\n+fi\n+  echo \"\"\n+if [ $cuda != no ] ; then\n+  echo \"FROM nvidia/cuda:${cuda}-devel-ubuntu16.04 AS cuda-dev\"\n+  echo \"\"\n+fi\n+  echo \"FROM $dist:$version\"\n+}\n+\n+install_centos_packages() {\n+  echo \"RUN yum -y update \\\\\"\n+if [ $version = 6.9 ] ; then\n+  echo \" && yum -y install https://\\$(rpm -E '%{?centos:centos}%{!?centos:rhel}%{rhel}').iuscommunity.org/ius-release.rpm \\\\\"\n+fi\n+  echo \" && yum -y install \\\\\"\n+  echo \"    alsa-lib-devel \\\\\"\n+  echo \"    automake \\\\\" # required to update make\n+  echo \"    bind-utils \\\\\"\n+  echo \"    bison \\\\\"\n+  echo \"    bzip2 \\\\\"\n+  echo \"    ca-certificates \\\\\"\n+  echo \"    cpio \\\\\"\n+  echo \"    cups-devel \\\\\"\n+  echo \"    curl-devel \\\\\" # required by git\n+  echo \"    elfutils-libelf-devel \\\\\"\n+  echo \"    expat-devel \\\\\" # required by git and the xml parser\n+  echo \"    file-devel \\\\\"\n+  echo \"    file-libs \\\\\"\n+  echo \"    flex \\\\\"\n+  echo \"    fontconfig \\\\\"\n+  echo \"    fontconfig-devel \\\\\"\n+  echo \"    freetype-devel \\\\\"\n+  echo \"    gettext \\\\\"\n+  echo \"    gettext-devel \\\\\" # required by git\n+  echo \"    glibc \\\\\"\n+  echo \"    glibc-common \\\\\"\n+  echo \"    glibc-devel \\\\\"\n+  echo \"    gmp-devel \\\\\"\n+  echo \"    lbzip2 \\\\\"\n+  echo \"    libdwarf \\\\\"\n+  echo \"    libdwarf-devel \\\\\"\n+  echo \"    libffi-devel \\\\\"\n+  echo \"    libstdc++-static \\\\\"\n+  echo \"    libX11-devel \\\\\"\n+  echo \"    libXext-devel \\\\\"\n+  echo \"    libXi-devel \\\\\"\n+  echo \"    libXrandr-devel \\\\\"\n+  echo \"    libXrender-devel \\\\\"\n+  echo \"    libXt-devel \\\\\"\n+  echo \"    libXtst-devel \\\\\"\n+  echo \"    make \\\\\"\n+  echo \"    mesa-libGL-devel \\\\\"\n+  echo \"    mpfr-devel \\\\\"\n+  echo \"    ntp \\\\\"\n+  echo \"    numactl-devel \\\\\"\n+  echo \"    openssh-clients \\\\\"\n+  echo \"    openssh-server \\\\\"\n+  echo \"    openssl-devel \\\\\" # required by git, etc.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA2NTQyMQ=="}, "originalCommit": {"oid": "24771d8a3d3bf6d37d10a0ddf97a4d4b6b478c46"}, "originalPosition": 273}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU0ODc1MA==", "bodyText": "I don't think we should hold this up for JITServer requirements: there are still a bunch of dockerfiles that serve those purposes:\nbuildenv/docker/jdk8/s390x/ubuntu16/jitserver\nbuildenv/docker/jdk8/x86_64/rhel7/jitserver\nbuildenv/docker/jdk8/x86_64/ubuntu16/jitserver\nbuildenv/docker/jdk8/x86_64/ubuntu18/jitserver\n\nI hope we will come to decide that most of them are redundant (or the script can be improved to make them so).", "url": "https://github.com/eclipse-openj9/openj9/pull/9371#discussion_r417548750", "createdAt": "2020-04-29T19:11:14Z", "author": {"login": "keithc-ca"}, "path": "buildenv/docker/mkdocker.sh", "diffHunk": "@@ -0,0 +1,697 @@\n+#!/bin/bash -\n+\n+print_license() {\n+cat <<- EOF\n+# Copyright (c) 2019, 2020 IBM Corp. and others\n+#\n+# This program and the accompanying materials are made available under\n+# the terms of the Eclipse Public License 2.0 which accompanies this\n+# distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+# or the Apache License, Version 2.0 which accompanies this distribution and\n+# is available at https://www.apache.org/licenses/LICENSE-2.0.\n+#\n+# This Source Code may also be made available under the following\n+# Secondary Licenses when the conditions for such availability set\n+# forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+# General Public License, version 2 with the GNU Classpath\n+# Exception [1] and GNU General Public License, version 2 with the\n+# OpenJDK Assembly Exception [2].\n+#\n+# [1] https://www.gnu.org/software/classpath/license.html\n+# [2] http://openjdk.java.net/legal/assembly-exception.html\n+#\n+# SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+EOF\n+}\n+\n+usage() {\n+  echo \"Usage: $0 [OPTION]...\"\n+  echo \"Generate a Dockerfile for building OpenJ9\"\n+  echo \"\"\n+  echo \"Options:\"\n+  echo \"  --help|-h      print this help, then exit\"\n+  echo \"  --arch=...     specify the processor architecture (default: host architecture)\"\n+  echo \"  --build        build the docker image (overrides '--print')\"\n+  echo \"  --cuda         include CUDA header files\"\n+  echo \"  --dist=...     specify the Linux distribution (e.g. centos, ubuntu)\"\n+  echo \"  --print        write the Dockerfile to stdout (default; overrides '--build')\"\n+  echo \"  --tag=...      specify a name for the docker image (may be repeated, default: none)\"\n+  echo \"  --user=...     specify the user name (default: 'jenkins')\"\n+  echo \"  --version=...  specify the distribution version (e.g. 6.9, 16.04)\"\n+  echo \"\"\n+  local arch=\"$(uname -m)\"\n+  echo \"Supported build patterns on this host ($arch):\"\n+if [ $arch = x86_64 ] ; then\n+  echo \"  bash mkdocker.sh --tag=openj9/cent69 --dist=centos --version=6.9 --build\"\n+fi\n+if [ $arch = x86_64 -o $arch = ppc64le ] ; then\n+  echo \"  bash mkdocker.sh --tag=openj9/cent7  --dist=centos --version=7   --build\"\n+fi\n+  echo \"  bash mkdocker.sh --tag=openj9/ub16   --dist=ubuntu --version=16  --build\"\n+  echo \"  bash mkdocker.sh --tag=openj9/ub18   --dist=ubuntu --version=18  --build\"\n+  echo \"  bash mkdocker.sh --tag=openj9/ub20   --dist=ubuntu --version=20  --build\"\n+  exit 1\n+}\n+\n+# Global configuration variables.\n+action=print\n+arch=\n+cuda=no\n+dist=unspecified\n+tags=()\n+user=jenkins\n+version=unspecified\n+\n+# Frequently used commands.\n+wget_O=\"wget --progress=dot:mega -O\"\n+\n+parse_options() {\n+  for arg in \"$@\" ; do\n+    case \"$arg\" in\n+      -h | --help)\n+        usage\n+        ;;\n+      --arch=*)\n+        arch=\"${arg#*=}\"\n+        ;;\n+      --build)\n+        action=build\n+        ;;\n+      --cuda)\n+        cuda=9.0\n+        ;;\n+      --dist=*)\n+        dist=\"${arg#*=}\"\n+        ;;\n+      --print)\n+        action=print\n+        ;;\n+      --tag=*)\n+        tags+=(\"${arg#*=}\")\n+        ;;\n+      --user=*)\n+        user=\"${arg#*=}\"\n+        ;;\n+      --version=*)\n+        version=\"${arg#*=}\"\n+        ;;\n+      *) # bad option\n+        echo \"Unsupported option: '$arg'\" >&2\n+        usage\n+        ;;\n+    esac\n+  done\n+}\n+\n+validate_options() {\n+  if [ \"x$arch\" = x ] ; then\n+    arch=\"$(uname -m)\"\n+  fi\n+\n+  case \"$arch\" in\n+    ppc64le | s390x | x86_64)\n+      ;;\n+    *)\n+      echo \"Unsupported architecture: '$arch'\" >&2\n+      exit 1\n+      ;;\n+  esac\n+\n+  # Validate the distribution and version.\n+  case \"$dist\" in\n+    centos)\n+      if [ $arch = s390x ] ; then\n+        echo \"CentOS is not supported on $arch\" >&2\n+        exit 1\n+      fi\n+      case $version in\n+        6.9)\n+          if [ $arch = ppc64le ] ; then\n+            echo \"CentOS version 6.9 is not supported on $arch\" >&2\n+            exit 1\n+          fi\n+          ;;\n+        7)\n+          ;;\n+        unspecified)\n+          echo \"Unspecified CentOS version: use '--version' option\" >&2\n+          exit 1\n+          ;;\n+        *)\n+          echo \"Unsupported CentOS version: '$version'\" >&2\n+          exit 1\n+          ;;\n+      esac\n+      ;;\n+    ubuntu)\n+      case $version in\n+        16 | 18 | 20)\n+          version=$version.04\n+          ;;\n+        16.04 | 18.04 | 20.04)\n+          ;;\n+        unspecified)\n+          echo \"Unspecified Ubuntu version: use '--version' option\" >&2\n+          exit 1\n+          ;;\n+        *)\n+          echo \"Unsupported Ubuntu version: '$version'\" >&2\n+          exit 1\n+          ;;\n+      esac\n+      ;;\n+    unspecified)\n+      echo \"Unspecified distribution: use '--dist' option\" >&2\n+      exit 1\n+      ;;\n+    *)\n+      echo \"Unsupported distribution: '$dist'\" >&2\n+      exit 1\n+      ;;\n+  esac\n+\n+  # If CUDA is requested, validate the architecture.\n+  if [ $cuda != no ] ; then\n+    case \"$arch\" in\n+      ppc64le | x86_64)\n+        ;;\n+      *)\n+        echo \"CUDA is not supported on architecture: '$arch'\" >&2\n+        exit 1\n+        ;;\n+    esac\n+  fi\n+}\n+\n+build_cmd() {\n+  local cmd=build\n+  local file=$1\n+  for tag in ${tags[@]} ; do\n+    cmd=\"$cmd --tag $tag\"\n+  done\n+  echo $cmd --file $file .\n+}\n+\n+preamble() {\n+  echo \"\"\n+  echo \"# Generated by: mkdocker.sh $command_line\"\n+  echo \"\"\n+  echo \"# To use this docker file:\"\n+  echo \"# First, copy your public ssh key into authorized_keys.\"\n+  echo \"# Then, in the directory containing the Dockerfile, authorized_keys\"\n+  echo \"# file, and known_hosts file, run:\"\n+  echo \"#   docker $(build_cmd Dockerfile)\"\n+  echo \"#\"\n+if [ ${#tags[@]} -lt 2 ] ; then\n+  echo \"# To start a container based on the resulting image, run this command:\"\n+else\n+  echo \"# To start a container based on the resulting image, run one of these commands:\"\n+fi\n+if [ ${#tags[@]} -eq 0 ] ; then\n+  echo \"#   docker run -it <image>\"\n+else\n+for tag in ${tags[@]} ; do\n+  echo \"#   docker run -it $tag\"\n+done\n+fi\n+  echo \"\"\n+if [ $cuda != no ] ; then\n+  echo \"FROM nvidia/cuda:${cuda}-devel-ubuntu16.04 AS cuda-dev\"\n+  echo \"\"\n+fi\n+  echo \"FROM $dist:$version\"\n+}\n+\n+install_centos_packages() {\n+  echo \"RUN yum -y update \\\\\"\n+if [ $version = 6.9 ] ; then\n+  echo \" && yum -y install https://\\$(rpm -E '%{?centos:centos}%{!?centos:rhel}%{rhel}').iuscommunity.org/ius-release.rpm \\\\\"\n+fi\n+  echo \" && yum -y install \\\\\"\n+  echo \"    alsa-lib-devel \\\\\"\n+  echo \"    automake \\\\\" # required to update make\n+  echo \"    bind-utils \\\\\"\n+  echo \"    bison \\\\\"\n+  echo \"    bzip2 \\\\\"\n+  echo \"    ca-certificates \\\\\"\n+  echo \"    cpio \\\\\"\n+  echo \"    cups-devel \\\\\"\n+  echo \"    curl-devel \\\\\" # required by git\n+  echo \"    elfutils-libelf-devel \\\\\"\n+  echo \"    expat-devel \\\\\" # required by git and the xml parser\n+  echo \"    file-devel \\\\\"\n+  echo \"    file-libs \\\\\"\n+  echo \"    flex \\\\\"\n+  echo \"    fontconfig \\\\\"\n+  echo \"    fontconfig-devel \\\\\"\n+  echo \"    freetype-devel \\\\\"\n+  echo \"    gettext \\\\\"\n+  echo \"    gettext-devel \\\\\" # required by git\n+  echo \"    glibc \\\\\"\n+  echo \"    glibc-common \\\\\"\n+  echo \"    glibc-devel \\\\\"\n+  echo \"    gmp-devel \\\\\"\n+  echo \"    lbzip2 \\\\\"\n+  echo \"    libdwarf \\\\\"\n+  echo \"    libdwarf-devel \\\\\"\n+  echo \"    libffi-devel \\\\\"\n+  echo \"    libstdc++-static \\\\\"\n+  echo \"    libX11-devel \\\\\"\n+  echo \"    libXext-devel \\\\\"\n+  echo \"    libXi-devel \\\\\"\n+  echo \"    libXrandr-devel \\\\\"\n+  echo \"    libXrender-devel \\\\\"\n+  echo \"    libXt-devel \\\\\"\n+  echo \"    libXtst-devel \\\\\"\n+  echo \"    make \\\\\"\n+  echo \"    mesa-libGL-devel \\\\\"\n+  echo \"    mpfr-devel \\\\\"\n+  echo \"    ntp \\\\\"\n+  echo \"    numactl-devel \\\\\"\n+  echo \"    openssh-clients \\\\\"\n+  echo \"    openssh-server \\\\\"\n+  echo \"    openssl-devel \\\\\" # required by git, etc.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA2NTQyMQ=="}, "originalCommit": {"oid": "24771d8a3d3bf6d37d10a0ddf97a4d4b6b478c46"}, "originalPosition": 273}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU2OTMzNg==", "bodyText": "Agreed, this isn't a blocker for merging. I think the git_cache issue is. The other stuff can be fixed up afterwards if necessary.", "url": "https://github.com/eclipse-openj9/openj9/pull/9371#discussion_r417569336", "createdAt": "2020-04-29T19:48:37Z", "author": {"login": "pshipton"}, "path": "buildenv/docker/mkdocker.sh", "diffHunk": "@@ -0,0 +1,697 @@\n+#!/bin/bash -\n+\n+print_license() {\n+cat <<- EOF\n+# Copyright (c) 2019, 2020 IBM Corp. and others\n+#\n+# This program and the accompanying materials are made available under\n+# the terms of the Eclipse Public License 2.0 which accompanies this\n+# distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+# or the Apache License, Version 2.0 which accompanies this distribution and\n+# is available at https://www.apache.org/licenses/LICENSE-2.0.\n+#\n+# This Source Code may also be made available under the following\n+# Secondary Licenses when the conditions for such availability set\n+# forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+# General Public License, version 2 with the GNU Classpath\n+# Exception [1] and GNU General Public License, version 2 with the\n+# OpenJDK Assembly Exception [2].\n+#\n+# [1] https://www.gnu.org/software/classpath/license.html\n+# [2] http://openjdk.java.net/legal/assembly-exception.html\n+#\n+# SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+EOF\n+}\n+\n+usage() {\n+  echo \"Usage: $0 [OPTION]...\"\n+  echo \"Generate a Dockerfile for building OpenJ9\"\n+  echo \"\"\n+  echo \"Options:\"\n+  echo \"  --help|-h      print this help, then exit\"\n+  echo \"  --arch=...     specify the processor architecture (default: host architecture)\"\n+  echo \"  --build        build the docker image (overrides '--print')\"\n+  echo \"  --cuda         include CUDA header files\"\n+  echo \"  --dist=...     specify the Linux distribution (e.g. centos, ubuntu)\"\n+  echo \"  --print        write the Dockerfile to stdout (default; overrides '--build')\"\n+  echo \"  --tag=...      specify a name for the docker image (may be repeated, default: none)\"\n+  echo \"  --user=...     specify the user name (default: 'jenkins')\"\n+  echo \"  --version=...  specify the distribution version (e.g. 6.9, 16.04)\"\n+  echo \"\"\n+  local arch=\"$(uname -m)\"\n+  echo \"Supported build patterns on this host ($arch):\"\n+if [ $arch = x86_64 ] ; then\n+  echo \"  bash mkdocker.sh --tag=openj9/cent69 --dist=centos --version=6.9 --build\"\n+fi\n+if [ $arch = x86_64 -o $arch = ppc64le ] ; then\n+  echo \"  bash mkdocker.sh --tag=openj9/cent7  --dist=centos --version=7   --build\"\n+fi\n+  echo \"  bash mkdocker.sh --tag=openj9/ub16   --dist=ubuntu --version=16  --build\"\n+  echo \"  bash mkdocker.sh --tag=openj9/ub18   --dist=ubuntu --version=18  --build\"\n+  echo \"  bash mkdocker.sh --tag=openj9/ub20   --dist=ubuntu --version=20  --build\"\n+  exit 1\n+}\n+\n+# Global configuration variables.\n+action=print\n+arch=\n+cuda=no\n+dist=unspecified\n+tags=()\n+user=jenkins\n+version=unspecified\n+\n+# Frequently used commands.\n+wget_O=\"wget --progress=dot:mega -O\"\n+\n+parse_options() {\n+  for arg in \"$@\" ; do\n+    case \"$arg\" in\n+      -h | --help)\n+        usage\n+        ;;\n+      --arch=*)\n+        arch=\"${arg#*=}\"\n+        ;;\n+      --build)\n+        action=build\n+        ;;\n+      --cuda)\n+        cuda=9.0\n+        ;;\n+      --dist=*)\n+        dist=\"${arg#*=}\"\n+        ;;\n+      --print)\n+        action=print\n+        ;;\n+      --tag=*)\n+        tags+=(\"${arg#*=}\")\n+        ;;\n+      --user=*)\n+        user=\"${arg#*=}\"\n+        ;;\n+      --version=*)\n+        version=\"${arg#*=}\"\n+        ;;\n+      *) # bad option\n+        echo \"Unsupported option: '$arg'\" >&2\n+        usage\n+        ;;\n+    esac\n+  done\n+}\n+\n+validate_options() {\n+  if [ \"x$arch\" = x ] ; then\n+    arch=\"$(uname -m)\"\n+  fi\n+\n+  case \"$arch\" in\n+    ppc64le | s390x | x86_64)\n+      ;;\n+    *)\n+      echo \"Unsupported architecture: '$arch'\" >&2\n+      exit 1\n+      ;;\n+  esac\n+\n+  # Validate the distribution and version.\n+  case \"$dist\" in\n+    centos)\n+      if [ $arch = s390x ] ; then\n+        echo \"CentOS is not supported on $arch\" >&2\n+        exit 1\n+      fi\n+      case $version in\n+        6.9)\n+          if [ $arch = ppc64le ] ; then\n+            echo \"CentOS version 6.9 is not supported on $arch\" >&2\n+            exit 1\n+          fi\n+          ;;\n+        7)\n+          ;;\n+        unspecified)\n+          echo \"Unspecified CentOS version: use '--version' option\" >&2\n+          exit 1\n+          ;;\n+        *)\n+          echo \"Unsupported CentOS version: '$version'\" >&2\n+          exit 1\n+          ;;\n+      esac\n+      ;;\n+    ubuntu)\n+      case $version in\n+        16 | 18 | 20)\n+          version=$version.04\n+          ;;\n+        16.04 | 18.04 | 20.04)\n+          ;;\n+        unspecified)\n+          echo \"Unspecified Ubuntu version: use '--version' option\" >&2\n+          exit 1\n+          ;;\n+        *)\n+          echo \"Unsupported Ubuntu version: '$version'\" >&2\n+          exit 1\n+          ;;\n+      esac\n+      ;;\n+    unspecified)\n+      echo \"Unspecified distribution: use '--dist' option\" >&2\n+      exit 1\n+      ;;\n+    *)\n+      echo \"Unsupported distribution: '$dist'\" >&2\n+      exit 1\n+      ;;\n+  esac\n+\n+  # If CUDA is requested, validate the architecture.\n+  if [ $cuda != no ] ; then\n+    case \"$arch\" in\n+      ppc64le | x86_64)\n+        ;;\n+      *)\n+        echo \"CUDA is not supported on architecture: '$arch'\" >&2\n+        exit 1\n+        ;;\n+    esac\n+  fi\n+}\n+\n+build_cmd() {\n+  local cmd=build\n+  local file=$1\n+  for tag in ${tags[@]} ; do\n+    cmd=\"$cmd --tag $tag\"\n+  done\n+  echo $cmd --file $file .\n+}\n+\n+preamble() {\n+  echo \"\"\n+  echo \"# Generated by: mkdocker.sh $command_line\"\n+  echo \"\"\n+  echo \"# To use this docker file:\"\n+  echo \"# First, copy your public ssh key into authorized_keys.\"\n+  echo \"# Then, in the directory containing the Dockerfile, authorized_keys\"\n+  echo \"# file, and known_hosts file, run:\"\n+  echo \"#   docker $(build_cmd Dockerfile)\"\n+  echo \"#\"\n+if [ ${#tags[@]} -lt 2 ] ; then\n+  echo \"# To start a container based on the resulting image, run this command:\"\n+else\n+  echo \"# To start a container based on the resulting image, run one of these commands:\"\n+fi\n+if [ ${#tags[@]} -eq 0 ] ; then\n+  echo \"#   docker run -it <image>\"\n+else\n+for tag in ${tags[@]} ; do\n+  echo \"#   docker run -it $tag\"\n+done\n+fi\n+  echo \"\"\n+if [ $cuda != no ] ; then\n+  echo \"FROM nvidia/cuda:${cuda}-devel-ubuntu16.04 AS cuda-dev\"\n+  echo \"\"\n+fi\n+  echo \"FROM $dist:$version\"\n+}\n+\n+install_centos_packages() {\n+  echo \"RUN yum -y update \\\\\"\n+if [ $version = 6.9 ] ; then\n+  echo \" && yum -y install https://\\$(rpm -E '%{?centos:centos}%{!?centos:rhel}%{rhel}').iuscommunity.org/ius-release.rpm \\\\\"\n+fi\n+  echo \" && yum -y install \\\\\"\n+  echo \"    alsa-lib-devel \\\\\"\n+  echo \"    automake \\\\\" # required to update make\n+  echo \"    bind-utils \\\\\"\n+  echo \"    bison \\\\\"\n+  echo \"    bzip2 \\\\\"\n+  echo \"    ca-certificates \\\\\"\n+  echo \"    cpio \\\\\"\n+  echo \"    cups-devel \\\\\"\n+  echo \"    curl-devel \\\\\" # required by git\n+  echo \"    elfutils-libelf-devel \\\\\"\n+  echo \"    expat-devel \\\\\" # required by git and the xml parser\n+  echo \"    file-devel \\\\\"\n+  echo \"    file-libs \\\\\"\n+  echo \"    flex \\\\\"\n+  echo \"    fontconfig \\\\\"\n+  echo \"    fontconfig-devel \\\\\"\n+  echo \"    freetype-devel \\\\\"\n+  echo \"    gettext \\\\\"\n+  echo \"    gettext-devel \\\\\" # required by git\n+  echo \"    glibc \\\\\"\n+  echo \"    glibc-common \\\\\"\n+  echo \"    glibc-devel \\\\\"\n+  echo \"    gmp-devel \\\\\"\n+  echo \"    lbzip2 \\\\\"\n+  echo \"    libdwarf \\\\\"\n+  echo \"    libdwarf-devel \\\\\"\n+  echo \"    libffi-devel \\\\\"\n+  echo \"    libstdc++-static \\\\\"\n+  echo \"    libX11-devel \\\\\"\n+  echo \"    libXext-devel \\\\\"\n+  echo \"    libXi-devel \\\\\"\n+  echo \"    libXrandr-devel \\\\\"\n+  echo \"    libXrender-devel \\\\\"\n+  echo \"    libXt-devel \\\\\"\n+  echo \"    libXtst-devel \\\\\"\n+  echo \"    make \\\\\"\n+  echo \"    mesa-libGL-devel \\\\\"\n+  echo \"    mpfr-devel \\\\\"\n+  echo \"    ntp \\\\\"\n+  echo \"    numactl-devel \\\\\"\n+  echo \"    openssh-clients \\\\\"\n+  echo \"    openssh-server \\\\\"\n+  echo \"    openssl-devel \\\\\" # required by git, etc.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA2NTQyMQ=="}, "originalCommit": {"oid": "24771d8a3d3bf6d37d10a0ddf97a4d4b6b478c46"}, "originalPosition": 273}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NDk1NTAwOnYy", "diffSide": "RIGHT", "path": "buildenv/docker/mkdocker.sh", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNDo1MzowOVrOGNvrpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNDo1MzowOVrOGNvrpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA2NTg5NA==", "bodyText": "I can't get Jenkins to connect to a cent6.9 container. The logs indicate the ssh service is not running. I see these lines in the existing file. If I recall correctly, this initiates the service so it starts when you start the container. Although I'm not sure why the stop command is also there.\nVerified. If I run the container and start the service I can ssh in from my laptop to the container.", "url": "https://github.com/eclipse-openj9/openj9/pull/9371#discussion_r417065894", "createdAt": "2020-04-29T04:53:09Z", "author": {"login": "AdamBrousseau"}, "path": "buildenv/docker/mkdocker.sh", "diffHunk": "@@ -0,0 +1,697 @@\n+#!/bin/bash -\n+\n+print_license() {\n+cat <<- EOF\n+# Copyright (c) 2019, 2020 IBM Corp. and others\n+#\n+# This program and the accompanying materials are made available under\n+# the terms of the Eclipse Public License 2.0 which accompanies this\n+# distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+# or the Apache License, Version 2.0 which accompanies this distribution and\n+# is available at https://www.apache.org/licenses/LICENSE-2.0.\n+#\n+# This Source Code may also be made available under the following\n+# Secondary Licenses when the conditions for such availability set\n+# forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+# General Public License, version 2 with the GNU Classpath\n+# Exception [1] and GNU General Public License, version 2 with the\n+# OpenJDK Assembly Exception [2].\n+#\n+# [1] https://www.gnu.org/software/classpath/license.html\n+# [2] http://openjdk.java.net/legal/assembly-exception.html\n+#\n+# SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+EOF\n+}\n+\n+usage() {\n+  echo \"Usage: $0 [OPTION]...\"\n+  echo \"Generate a Dockerfile for building OpenJ9\"\n+  echo \"\"\n+  echo \"Options:\"\n+  echo \"  --help|-h      print this help, then exit\"\n+  echo \"  --arch=...     specify the processor architecture (default: host architecture)\"\n+  echo \"  --build        build the docker image (overrides '--print')\"\n+  echo \"  --cuda         include CUDA header files\"\n+  echo \"  --dist=...     specify the Linux distribution (e.g. centos, ubuntu)\"\n+  echo \"  --print        write the Dockerfile to stdout (default; overrides '--build')\"\n+  echo \"  --tag=...      specify a name for the docker image (may be repeated, default: none)\"\n+  echo \"  --user=...     specify the user name (default: 'jenkins')\"\n+  echo \"  --version=...  specify the distribution version (e.g. 6.9, 16.04)\"\n+  echo \"\"\n+  local arch=\"$(uname -m)\"\n+  echo \"Supported build patterns on this host ($arch):\"\n+if [ $arch = x86_64 ] ; then\n+  echo \"  bash mkdocker.sh --tag=openj9/cent69 --dist=centos --version=6.9 --build\"\n+fi\n+if [ $arch = x86_64 -o $arch = ppc64le ] ; then\n+  echo \"  bash mkdocker.sh --tag=openj9/cent7  --dist=centos --version=7   --build\"\n+fi\n+  echo \"  bash mkdocker.sh --tag=openj9/ub16   --dist=ubuntu --version=16  --build\"\n+  echo \"  bash mkdocker.sh --tag=openj9/ub18   --dist=ubuntu --version=18  --build\"\n+  echo \"  bash mkdocker.sh --tag=openj9/ub20   --dist=ubuntu --version=20  --build\"\n+  exit 1\n+}\n+\n+# Global configuration variables.\n+action=print\n+arch=\n+cuda=no\n+dist=unspecified\n+tags=()\n+user=jenkins\n+version=unspecified\n+\n+# Frequently used commands.\n+wget_O=\"wget --progress=dot:mega -O\"\n+\n+parse_options() {\n+  for arg in \"$@\" ; do\n+    case \"$arg\" in\n+      -h | --help)\n+        usage\n+        ;;\n+      --arch=*)\n+        arch=\"${arg#*=}\"\n+        ;;\n+      --build)\n+        action=build\n+        ;;\n+      --cuda)\n+        cuda=9.0\n+        ;;\n+      --dist=*)\n+        dist=\"${arg#*=}\"\n+        ;;\n+      --print)\n+        action=print\n+        ;;\n+      --tag=*)\n+        tags+=(\"${arg#*=}\")\n+        ;;\n+      --user=*)\n+        user=\"${arg#*=}\"\n+        ;;\n+      --version=*)\n+        version=\"${arg#*=}\"\n+        ;;\n+      *) # bad option\n+        echo \"Unsupported option: '$arg'\" >&2\n+        usage\n+        ;;\n+    esac\n+  done\n+}\n+\n+validate_options() {\n+  if [ \"x$arch\" = x ] ; then\n+    arch=\"$(uname -m)\"\n+  fi\n+\n+  case \"$arch\" in\n+    ppc64le | s390x | x86_64)\n+      ;;\n+    *)\n+      echo \"Unsupported architecture: '$arch'\" >&2\n+      exit 1\n+      ;;\n+  esac\n+\n+  # Validate the distribution and version.\n+  case \"$dist\" in\n+    centos)\n+      if [ $arch = s390x ] ; then\n+        echo \"CentOS is not supported on $arch\" >&2\n+        exit 1\n+      fi\n+      case $version in\n+        6.9)\n+          if [ $arch = ppc64le ] ; then\n+            echo \"CentOS version 6.9 is not supported on $arch\" >&2\n+            exit 1\n+          fi\n+          ;;\n+        7)\n+          ;;\n+        unspecified)\n+          echo \"Unspecified CentOS version: use '--version' option\" >&2\n+          exit 1\n+          ;;\n+        *)\n+          echo \"Unsupported CentOS version: '$version'\" >&2\n+          exit 1\n+          ;;\n+      esac\n+      ;;\n+    ubuntu)\n+      case $version in\n+        16 | 18 | 20)\n+          version=$version.04\n+          ;;\n+        16.04 | 18.04 | 20.04)\n+          ;;\n+        unspecified)\n+          echo \"Unspecified Ubuntu version: use '--version' option\" >&2\n+          exit 1\n+          ;;\n+        *)\n+          echo \"Unsupported Ubuntu version: '$version'\" >&2\n+          exit 1\n+          ;;\n+      esac\n+      ;;\n+    unspecified)\n+      echo \"Unspecified distribution: use '--dist' option\" >&2\n+      exit 1\n+      ;;\n+    *)\n+      echo \"Unsupported distribution: '$dist'\" >&2\n+      exit 1\n+      ;;\n+  esac\n+\n+  # If CUDA is requested, validate the architecture.\n+  if [ $cuda != no ] ; then\n+    case \"$arch\" in\n+      ppc64le | x86_64)\n+        ;;\n+      *)\n+        echo \"CUDA is not supported on architecture: '$arch'\" >&2\n+        exit 1\n+        ;;\n+    esac\n+  fi\n+}\n+\n+build_cmd() {\n+  local cmd=build\n+  local file=$1\n+  for tag in ${tags[@]} ; do\n+    cmd=\"$cmd --tag $tag\"\n+  done\n+  echo $cmd --file $file .\n+}\n+\n+preamble() {\n+  echo \"\"\n+  echo \"# Generated by: mkdocker.sh $command_line\"\n+  echo \"\"\n+  echo \"# To use this docker file:\"\n+  echo \"# First, copy your public ssh key into authorized_keys.\"\n+  echo \"# Then, in the directory containing the Dockerfile, authorized_keys\"\n+  echo \"# file, and known_hosts file, run:\"\n+  echo \"#   docker $(build_cmd Dockerfile)\"\n+  echo \"#\"\n+if [ ${#tags[@]} -lt 2 ] ; then\n+  echo \"# To start a container based on the resulting image, run this command:\"\n+else\n+  echo \"# To start a container based on the resulting image, run one of these commands:\"\n+fi\n+if [ ${#tags[@]} -eq 0 ] ; then\n+  echo \"#   docker run -it <image>\"\n+else\n+for tag in ${tags[@]} ; do\n+  echo \"#   docker run -it $tag\"\n+done\n+fi\n+  echo \"\"\n+if [ $cuda != no ] ; then\n+  echo \"FROM nvidia/cuda:${cuda}-devel-ubuntu16.04 AS cuda-dev\"\n+  echo \"\"\n+fi\n+  echo \"FROM $dist:$version\"\n+}\n+\n+install_centos_packages() {\n+  echo \"RUN yum -y update \\\\\"\n+if [ $version = 6.9 ] ; then\n+  echo \" && yum -y install https://\\$(rpm -E '%{?centos:centos}%{!?centos:rhel}%{rhel}').iuscommunity.org/ius-release.rpm \\\\\"\n+fi\n+  echo \" && yum -y install \\\\\"\n+  echo \"    alsa-lib-devel \\\\\"\n+  echo \"    automake \\\\\" # required to update make\n+  echo \"    bind-utils \\\\\"\n+  echo \"    bison \\\\\"\n+  echo \"    bzip2 \\\\\"\n+  echo \"    ca-certificates \\\\\"\n+  echo \"    cpio \\\\\"\n+  echo \"    cups-devel \\\\\"\n+  echo \"    curl-devel \\\\\" # required by git\n+  echo \"    elfutils-libelf-devel \\\\\"\n+  echo \"    expat-devel \\\\\" # required by git and the xml parser\n+  echo \"    file-devel \\\\\"\n+  echo \"    file-libs \\\\\"\n+  echo \"    flex \\\\\"\n+  echo \"    fontconfig \\\\\"\n+  echo \"    fontconfig-devel \\\\\"\n+  echo \"    freetype-devel \\\\\"\n+  echo \"    gettext \\\\\"\n+  echo \"    gettext-devel \\\\\" # required by git\n+  echo \"    glibc \\\\\"\n+  echo \"    glibc-common \\\\\"\n+  echo \"    glibc-devel \\\\\"\n+  echo \"    gmp-devel \\\\\"\n+  echo \"    lbzip2 \\\\\"\n+  echo \"    libdwarf \\\\\"\n+  echo \"    libdwarf-devel \\\\\"\n+  echo \"    libffi-devel \\\\\"\n+  echo \"    libstdc++-static \\\\\"\n+  echo \"    libX11-devel \\\\\"\n+  echo \"    libXext-devel \\\\\"\n+  echo \"    libXi-devel \\\\\"\n+  echo \"    libXrandr-devel \\\\\"\n+  echo \"    libXrender-devel \\\\\"\n+  echo \"    libXt-devel \\\\\"\n+  echo \"    libXtst-devel \\\\\"\n+  echo \"    make \\\\\"\n+  echo \"    mesa-libGL-devel \\\\\"\n+  echo \"    mpfr-devel \\\\\"\n+  echo \"    ntp \\\\\"\n+  echo \"    numactl-devel \\\\\"\n+  echo \"    openssh-clients \\\\\"\n+  echo \"    openssh-server \\\\\"\n+  echo \"    openssl-devel \\\\\" # required by git, etc.\n+  echo \"    perl-CPAN \\\\\"\n+  echo \"    perl-DBI \\\\\"\n+  echo \"    perl-devel \\\\\"\n+  echo \"    perl-ExtUtils-MakeMaker \\\\\" # required by git\n+  echo \"    perl-GD \\\\\"\n+  echo \"    perl-libwww-perl \\\\\"\n+  echo \"    perl-Time-HiRes \\\\\"\n+  echo \"    texinfo \\\\\" # required to update make\n+  echo \"    unzip \\\\\"\n+  echo \"    vim \\\\\"\n+  echo \"    wget \\\\\"\n+  echo \"    xorg-x11-server-Xvfb \\\\\"\n+  echo \"    xz \\\\\"\n+  echo \"    zip \\\\\"\n+  echo \"    zlib-devel \\\\\" # required by git, python\n+  echo \" && yum clean all\"\n+  echo \"\"\n+  local autoconf_version=2.69\n+  echo \"# Install autoconf.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O autoconf.tar.gz https://fossies.org/linux/misc/autoconf-$autoconf_version.tar.gz \\\\\"\n+  echo \" && tar -xzf autoconf.tar.gz \\\\\"\n+  echo \" && cd autoconf-$autoconf_version \\\\\"\n+  echo \" && ./configure --build=\\$(rpm --eval %{_host}) \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf autoconf.tar.gz autoconf-$autoconf_version\"\n+  echo \"\"\n+  echo \"# Install gcc-7.5.\"\n+  echo \"RUN cd /usr/local \\\\\"\n+  echo \" && $wget_O gcc-7.tar.xz 'https://ci.adoptopenjdk.net/userContent/gcc/gcc750+ccache.$arch.tar.xz' \\\\\"\n+  echo \" && tar -xJf gcc-7.tar.xz --strip-components=1 \\\\\"\n+  echo \" && ln -sf ../local/bin/gcc-7.5 /usr/bin/gcc \\\\\"\n+  echo \" && ln -sf ../local/bin/g++-7.5 /usr/bin/g++ \\\\\"\n+  echo \" && ln -sf gcc /usr/bin/cc \\\\\"\n+  echo \" && ln -sf g++ /usr/bin/c++ \\\\\"\n+  echo \" && rm -f gcc-7.tar.xz\"\n+  echo \"\"\n+  local ant_version=1.10.5\n+  echo \"# Install ant.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O ant.zip https://archive.apache.org/dist/ant/binaries/apache-ant-$ant_version-bin.zip \\\\\"\n+  echo \" && unzip -q ant.zip -d /opt \\\\\"\n+  echo \" && ln -s apache-ant-$ant_version /opt/ant \\\\\"\n+  echo \" && ln -s /opt/ant/bin/ant /usr/bin/ant \\\\\"\n+  echo \" && $wget_O ant-contrib.tar.gz https://sourceforge.net/projects/ant-contrib/files/ant-contrib/1.0b3/ant-contrib-1.0b3-bin.tar.gz \\\\\"\n+  echo \" && tar -xzf ant-contrib.tar.gz \\\\\"\n+  echo \" && mv ant-contrib/ant-contrib-1.0b3.jar /opt/ant/lib \\\\\"\n+  echo \" && rm -rf ant-contrib ant.zip ant-contrib.tar.gz\"\n+  echo \"\"\n+  local git_version=2.5.3\n+  echo \"# Install git.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O git.tar.gz https://www.kernel.org/pub/software/scm/git/git-$git_version.tar.gz \\\\\"\n+  echo \" && tar -xzf git.tar.gz \\\\\"\n+  echo \" && cd git-$git_version \\\\\"\n+  echo \" && make prefix=/usr/local all \\\\\"\n+  echo \" && make prefix=/usr/local install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf git.tar.gz git-$git_version\"\n+  # updating make requires automake 1.15\n+  echo \"\"\n+  local automake_version=1.15\n+  echo \"# Update automake.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O automake.tar.gz http://ftp.gnu.org/gnu/automake/automake-$automake_version.tar.gz \\\\\"\n+  echo \" && tar -xzf automake.tar.gz \\\\\"\n+  echo \" && cd automake-$automake_version \\\\\"\n+  echo \" && ./configure \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf automake.tar.gz automake-$automake_version\"\n+if [ $arch = x86_64 ] ; then\n+  echo \"\"\n+  local gettext_version=0.20.1\n+  echo \"# Update gettext.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O gettext.tar.gz http://ftp.gnu.org/gnu/gettext/gettext-$gettext_version.tar.gz \\\\\"\n+  echo \" && tar -xzf gettext.tar.gz \\\\\"\n+  echo \" && cd gettext-$gettext_version \\\\\"\n+  echo \" && ./autogen.sh --skip-gnulib \\\\\"\n+  echo \" && ./configure --disable-nls \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf gettext.tar.gz gettext-$gettext_version\"\n+fi\n+  echo \"\"\n+if [ $arch = ppc64le ] ; then\n+  local make_version=4.2\n+else\n+  local make_version=4.1\n+fi\n+  echo \"# Update make.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O make.tar.gz https://github.com/mirror/make/archive/$make_version.tar.gz \\\\\"\n+  echo \" && tar -xzf make.tar.gz \\\\\"\n+  echo \" && cd make-$make_version \\\\\"\n+  echo \" && ACLOCAL_PATH=/usr/share/aclocal autoreconf -i \\\\\"\n+  echo \" && ./configure \\\\\"\n+  echo \" && make update \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && ln -s make /usr/local/bin/gmake \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf make.tar.gz make-$make_version\"\n+if [ $arch = x86_64 ] ; then\n+  echo \"\"\n+  local nasm_version=2.13.03\n+  echo \"# Install nasm.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O nasm.tar.gz https://www.nasm.us/pub/nasm/releasebuilds/$nasm_version/nasm-$nasm_version.tar.gz \\\\\"\n+  echo \" && tar -xzf nasm.tar.gz \\\\\"\n+  echo \" && cd nasm-$nasm_version \\\\\"\n+  echo \" && ./configure -prefix=/usr/local \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf nasm.tar.gz nasm-$nasm_version\"\n+fi\n+}\n+\n+install_ubuntu_packages() {\n+  echo \"RUN apt-get update \\\\\"\n+  echo \" && apt-get install -qq -y --no-install-recommends \\\\\"\n+  echo \"    software-properties-common \\\\\"\n+if [ $version = 16.04 ] ; then\n+  echo \"    python-software-properties \\\\\"\n+fi\n+  echo \" && add-apt-repository ppa:ubuntu-toolchain-r/test \\\\\"\n+  echo \" && apt-get update \\\\\"\n+  echo \" && apt-get install -qq -y --no-install-recommends \\\\\"\n+  echo \"    ant \\\\\"\n+  echo \"    ant-contrib \\\\\"\n+  echo \"    autoconf \\\\\"\n+  echo \"    build-essential \\\\\"\n+  echo \"    ca-certificates \\\\\"\n+  echo \"    cmake \\\\\"\n+  echo \"    cpio \\\\\"\n+  echo \"    curl \\\\\"\n+  echo \"    file \\\\\"\n+if [ $arch != s390x ] ; then\n+  echo \"    g++-7 \\\\\"\n+  echo \"    gcc-7 \\\\\"\n+fi\n+  echo \"    gdb \\\\\"\n+  echo \"    git \\\\\"\n+  echo \"    libasound2-dev \\\\\"\n+  echo \"    libcups2-dev \\\\\"\n+  echo \"    libdwarf-dev \\\\\"\n+  echo \"    libelf-dev \\\\\"\n+  echo \"    libexpat1-dev \\\\\" # required by the xml parser\n+  echo \"    libffi-dev \\\\\"\n+  echo \"    libfontconfig \\\\\"\n+  echo \"    libfontconfig1-dev \\\\\"\n+  echo \"    libfreetype6-dev \\\\\"\n+if [ $arch != s390x ] ; then\n+  echo \"    libnuma-dev \\\\\"\n+fi\n+if [ $arch = s390x ] ; then\n+  echo \"    libmpc3 \\\\\"\n+fi\n+  echo \"    libssl-dev \\\\\"\n+  echo \"    libx11-dev \\\\\"\n+  echo \"    libxext-dev \\\\\"\n+  echo \"    libxrandr-dev \\\\\"\n+  echo \"    libxrender-dev \\\\\"\n+  echo \"    libxt-dev \\\\\"\n+  echo \"    libxtst-dev \\\\\"\n+  echo \"    make \\\\\"\n+if [ $arch = x86_64 ] ; then\n+  echo \"    nasm \\\\\"\n+fi\n+  echo \"    openssh-client \\\\\"\n+  echo \"    openssh-server \\\\\"\n+  echo \"    perl \\\\\"\n+  echo \"    pkg-config \\\\\"\n+if [ $version = 16.04 ] ; then\n+  echo \"    realpath \\\\\"\n+fi\n+  echo \"    ssh \\\\\"\n+  echo \"    unzip \\\\\"\n+  echo \"    wget \\\\\"\n+  echo \"    xvfb \\\\\"\n+  echo \"    zip \\\\\"\n+  echo \"    zlib1g-dev \\\\\"\n+  echo \" && rm -rf /var/lib/apt/lists/*\"\n+}\n+\n+install_packages() {\n+  echo \"\"\n+  echo \"# Install required OS tools.\"\n+  echo \"\"\n+if [ $dist = centos ] ; then\n+  install_centos_packages\n+else\n+  install_ubuntu_packages\n+fi\n+}\n+\n+install_compilers() {\n+if [ $arch = s390x ] ; then\n+  echo \"\"\n+  local gcc_version=7.5\n+  echo \"# Install gcc.\"\n+  echo \"RUN cd /usr/local \\\\\"\n+  echo \" && $wget_O gcc.tar.xz 'https://ci.adoptopenjdk.net/userContent/gcc/gcc750+ccache.$arch.tar.xz' \\\\\"\n+  echo \" && tar -xJf gcc.tar.xz --strip-components=1 \\\\\"\n+  echo \" && rm -f gcc.tar.xz\"\n+  echo \"\"\n+  echo \"# Create various symbolic links.\"\n+  echo \"RUN ln -s lib/$arch-linux-gnu /usr/lib64 \\\\\"\n+if [ $dist:$version = ubuntu:18.04 ] ; then\n+  # On s390x perl needs version 4 of mpfr, but we only have version 6.\n+  echo \" && ln -s libmpfr.so.6 /usr/lib64/libmpfr.so.4 \\\\\"\n+fi\n+  # /usr/local/include/c++ is a directory that already exists so we create these symbolic links in two steps.\n+  echo \" && ( cd /usr/local/include && for f in \\$(ls /usr/include/s390x-linux-gnu/c++) ; do test -e \\$f || ln -s /usr/include/s390x-linux-gnu/c++/\\$f . ; done ) \\\\\"\n+  echo \" && ln -s \\$(ls -d /usr/include/s390x-linux-gnu/* | grep -v '/c++\\$') /usr/local/include \\\\\"\n+  echo \" && ln -sf ../local/bin/g++-$gcc_version /usr/bin/g++-7 \\\\\"\n+  echo \" && ln -sf ../local/bin/gcc-$gcc_version /usr/bin/gcc-7\"\n+fi\n+if [ $dist != centos ] ; then\n+  echo \"\"\n+  echo \"ENV CC=gcc-7 CXX=g++-7\"\n+fi\n+}\n+\n+install_cmake() {\n+if [ $dist == centos ] ; then\n+  echo \"\"\n+  local cmake_version=3.11\n+  local cmake_name=cmake-$cmake_version.4\n+  echo \"# Install cmake.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O cmake.tar.gz https://cmake.org/files/v$cmake_version/$cmake_name.tar.gz \\\\\"\n+  echo \" && tar -xzf cmake.tar.gz \\\\\"\n+  echo \" && cd $cmake_name \\\\\"\n+  echo \" && export LDFLAGS='-static-libstdc++' \\\\\"\n+  echo \" && ./configure \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf cmake.tar.gz $cmake_name\"\n+fi\n+}\n+\n+prepare_user() {\n+  # Ensure authorized_keys exists.\n+  test -f authorized_keys || touch authorized_keys\n+  # Ensure github.com is a known host.\n+  ( test -f known_hosts && grep -q '^github.com ' known_hosts ) \\\n+    || ssh-keyscan github.com >> known_hosts\n+}\n+\n+create_user() {\n+  echo \"\"\n+  echo \"# Add user home and copy authorized_keys and known_hosts.\"\n+  echo \"RUN useradd -ms /bin/bash $user \\\\\"\n+  echo \" && mkdir /home/$user/.ssh \\\\\"\n+  echo \" && chmod 700 /home/$user/.ssh\"\n+  echo \"COPY authorized_keys known_hosts /home/$user/.ssh/\"\n+  echo \"RUN chown -R $user:$user /home/$user \\\\\"\n+  echo \" && chmod 600 /home/$user/.ssh/authorized_keys /home/$user/.ssh/known_hosts\"\n+}\n+\n+install_freemarker() {\n+  echo \"\"\n+  local freemarker_version=2.3.8\n+  echo \"# Download and extract freemarker.jar to /root/freemarker.jar.\"\n+  echo \"RUN mkdir -p /root \\\\\"\n+  echo \" && cd /root \\\\\"\n+  echo \" && $wget_O freemarker.tar.gz https://sourceforge.net/projects/freemarker/files/freemarker/$freemarker_version/freemarker-$freemarker_version.tar.gz/download \\\\\"\n+  echo \" && tar -xzf freemarker.tar.gz freemarker-$freemarker_version/lib/freemarker.jar --strip=2 \\\\\"\n+  echo \" && rm -f freemarker.tar.gz\"\n+}\n+\n+bootjdk_dirs() {\n+  for version in $@ ; do\n+    if [ $version = 8 ] ; then\n+      echo /usr/lib/jvm/adoptojdk-java-80\n+    else\n+      echo /usr/lib/jvm/adoptojdk-java-$version\n+    fi\n+  done\n+}\n+\n+bootjdk_url() {\n+  local version=$1\n+  if [ $arch = x86_64 ] ; then\n+    echo https://api.adoptopenjdk.net/v3/binary/latest/$version/ga/linux/x64/jdk/openj9/normal/adoptopenjdk\n+  else\n+    echo https://api.adoptopenjdk.net/v3/binary/latest/$version/ga/linux/$arch/jdk/openj9/normal/adoptopenjdk\n+  fi\n+}\n+\n+install_bootjdks() {\n+  local versions=\"8 11 13 14\"\n+  echo \"\"\n+  echo \"# Download and install boot JDKs from AdoptOpenJDK.\"\n+  echo \"RUN cd /tmp \\\\\"\n+for version in $versions ; do\n+  echo \" && $wget_O jdk$version.tar.gz $(bootjdk_url $version) \\\\\"\n+done\n+  echo \" && mkdir -p\" $(bootjdk_dirs $versions) \"\\\\\"\n+for version in $versions ; do\n+  echo \" && tar -xzf jdk$version.tar.gz --directory=$(bootjdk_dirs $version)/ --strip=1 \\\\\"\n+done\n+  echo \" && rm -f jdk*.tar.gz\"\n+}\n+\n+install_cuda() {\n+  echo \"\"\n+  echo \"# Copy header files necessary to build a VM with CUDA support.\"\n+  echo \"RUN mkdir -p /usr/local/cuda-${cuda}/nvvm\"\n+  echo \"COPY --from=cuda-dev /usr/local/cuda-${cuda}/include      /usr/local/cuda-${cuda}/include\"\n+  echo \"COPY --from=cuda-dev /usr/local/cuda-${cuda}/nvvm/include /usr/local/cuda-${cuda}/nvvm/include\"\n+  echo \"ENV CUDA_HOME=/usr/local/cuda-${cuda}\"\n+}\n+\n+install_python() {\n+  local python_version=3.7.3\n+  echo \"\"\n+  echo \"# Install python.\"\n+  echo \"RUN cd /tmp \\\\\"\n+  echo \" && $wget_O python.tar.xz https://www.python.org/ftp/python/$python_version/Python-$python_version.tar.xz \\\\\"\n+  echo \" && tar -xJf python.tar.xz \\\\\"\n+  echo \" && cd Python-$python_version \\\\\"\n+  echo \" && ./configure --prefix=/usr/local \\\\\"\n+  echo \" && make \\\\\"\n+  echo \" && make install \\\\\"\n+  echo \" && cd .. \\\\\"\n+  echo \" && rm -rf python.tar.xz Python-$python_version\"\n+}\n+\n+adjust_ldconfig() {\n+  echo \"\"\n+  echo \"# Run ldconfig to discover newly installed shared libraries.\"\n+  echo \"RUN for dir in lib lib64 ; do echo /usr/local/$dir ; done > /etc/ld.so.conf.d/usr-local.conf \\\\\"\n+  echo \" && ldconfig\"\n+}\n+\n+# called as: add_git_remote remote url\n+add_git_remote() {\n+  echo \" && git remote add ${1} ${2} \\\\\"\n+  # Like-named (and conflicting) tags exist in multiple repositories: don't fetch any tags.\n+  echo \" && git config remote.${1}.tagopt --no-tags \\\\\"\n+}\n+\n+create_git_cache() {\n+  # The jdk14 remote is fetched first because that repository was subjected to\n+  # 'git gc --aggressive --prune=all' before it was first published making it much\n+  # smaller than the other jdk repositories. There is a large degree of overlap\n+  # among the jdk repositories so a relatively small number of commits must be\n+  # fetched from the others.\n+  echo \"\"\n+  echo \"# Setup a reference repository cache for faster clones in containers.\"\n+  echo \"RUN mkdir /home/$user/git_cache \\\\\"\n+  echo \" && cd /home/$user/git_cache \\\\\"\n+  echo \" && git init --bare \\\\\"\n+  add_git_remote jdk8    https://github.com/ibmruntimes/openj9-openjdk-jdk8.git\n+  add_git_remote jdk11   https://github.com/ibmruntimes/openj9-openjdk-jdk11.git\n+  add_git_remote jdk14   https://github.com/ibmruntimes/openj9-openjdk-jdk14.git\n+  add_git_remote jdknext https://github.com/ibmruntimes/openj9-openjdk-jdk.git\n+  add_git_remote omr     https://github.com/eclipse/openj9-omr.git\n+  add_git_remote openj9  https://github.com/eclipse/openj9.git\n+  echo \" && echo Fetching repository cache... \\\\\"\n+  echo \" && git fetch jdk14 \\\\\"\n+  echo \" && git fetch --all \\\\\"\n+  echo \" && echo Shrinking repository cache... \\\\\"\n+  echo \" && git gc --aggressive --prune=all\"\n+}\n+\n+configure_ssh() {\n+  echo \"\"\n+  echo \"# Configure sshd.\"\n+  echo \"RUN mkdir /var/run/sshd \\\\\"\n+  echo \" && sed -i -e 's|#PermitRootLogin|PermitRootLogin|' \\\\\"\n+  echo \"           -e 's|#RSAAuthentication.*|RSAAuthentication yes|' \\\\\"\n+  echo \"           -e 's|#PubkeyAuthentication.*|PubkeyAuthentication yes|' /etc/ssh/sshd_config\"\n+  echo \"\"\n+  echo \"# SSH login fix so user is not kicked off after login.\"\n+  echo \"RUN sed -i -e 's|session\\s*required\\s*pam_loginuid.so|session optional pam_loginuid.so|' /etc/pam.d/sshd\"\n+  echo \"\"\n+  echo \"# Expose SSH port.\"\n+  echo \"EXPOSE 22\"\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24771d8a3d3bf6d37d10a0ddf97a4d4b6b478c46"}, "originalPosition": 661}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 267, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}