{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAyODA2OTE0", "number": 10876, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMToxOTo0NlrOEtOndA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMToxOTo0NlrOEtOndA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODYwODUyOnYy", "diffSide": "RIGHT", "path": "test/functional/JIT_Test/playlist.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMToxOTo0NlrOHg549A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMjo0MDozM1rOHhovxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI2NDk0OA==", "bodyText": "I am guessing that ^arch.arm means NOT arm. Is there a a way to include platforms rather than excluding? I would prefer that because if in the future a new platform comes along, it will be automatically included.", "url": "https://github.com/eclipse-openj9/openj9/pull/10876#discussion_r504264948", "createdAt": "2020-10-13T21:19:46Z", "author": {"login": "mpirvu"}, "path": "test/functional/JIT_Test/playlist.xml", "diffHunk": "@@ -598,7 +598,7 @@\n \t\techo $(Q)$(TEST_JDK_BIN)$(D)jitserver doesn't exist; assuming this JDK does not support JITServer and trivially passing the test.$(Q); \\\n \tfi; \\\n \t$(TEST_STATUS)</command>\n-\t\t<platformRequirements>os.linux,arch.x86,bits.64,vm.cmprssptrs</platformRequirements>\n+\t\t<platformRequirements>os.linux,^arch.arm,^arch.aarch64,^arch.s390x,bits.64,vm.cmprssptrs</platformRequirements>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "254bf5ee80445cfa9bd1f06e793e5fb15f77b23f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI3ODM1MQ==", "bodyText": "Yeah ^ means NOT. I don't think there is a way to include multiple platforms instead of excluding. At least I couldn't find any tests that would do that.", "url": "https://github.com/eclipse-openj9/openj9/pull/10876#discussion_r504278351", "createdAt": "2020-10-13T21:48:46Z", "author": {"login": "dmitry-ten"}, "path": "test/functional/JIT_Test/playlist.xml", "diffHunk": "@@ -598,7 +598,7 @@\n \t\techo $(Q)$(TEST_JDK_BIN)$(D)jitserver doesn't exist; assuming this JDK does not support JITServer and trivially passing the test.$(Q); \\\n \tfi; \\\n \t$(TEST_STATUS)</command>\n-\t\t<platformRequirements>os.linux,arch.x86,bits.64,vm.cmprssptrs</platformRequirements>\n+\t\t<platformRequirements>os.linux,^arch.arm,^arch.aarch64,^arch.s390x,bits.64,vm.cmprssptrs</platformRequirements>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI2NDk0OA=="}, "originalCommit": {"oid": "254bf5ee80445cfa9bd1f06e793e5fb15f77b23f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTAzMjY0NA==", "bodyText": "There are very many examples that use exclusions, so I am ok with the solution proposed here.", "url": "https://github.com/eclipse-openj9/openj9/pull/10876#discussion_r505032644", "createdAt": "2020-10-14T22:40:33Z", "author": {"login": "mpirvu"}, "path": "test/functional/JIT_Test/playlist.xml", "diffHunk": "@@ -598,7 +598,7 @@\n \t\techo $(Q)$(TEST_JDK_BIN)$(D)jitserver doesn't exist; assuming this JDK does not support JITServer and trivially passing the test.$(Q); \\\n \tfi; \\\n \t$(TEST_STATUS)</command>\n-\t\t<platformRequirements>os.linux,arch.x86,bits.64,vm.cmprssptrs</platformRequirements>\n+\t\t<platformRequirements>os.linux,^arch.arm,^arch.aarch64,^arch.s390x,bits.64,vm.cmprssptrs</platformRequirements>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI2NDk0OA=="}, "originalCommit": {"oid": "254bf5ee80445cfa9bd1f06e793e5fb15f77b23f"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1135, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}