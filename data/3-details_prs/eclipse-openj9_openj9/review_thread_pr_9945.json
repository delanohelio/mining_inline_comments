{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2ODc1MDk1", "number": 9945, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMzo0ODo1N1rOEHH2zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMzo1MDowNVrOEHH4UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1OTA0MjA0OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/compile/J9SymbolReferenceTable.cpp", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMzo0ODo1N1rOGmVgYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNTo0MToyMFrOGmZORg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg1MTQyNQ==", "bodyText": "Why do we need the ()s around the == components of a straight && - there are dozens of examples of && chains like this in the compiler so my preference would be to keep them uniform unless there is a real need to change them to satisfy a compiler. If we do decide to change them I'd prefer to try and make it uniformly at once to avoid mixing styles..\nTo be clear I'm 100% onboard with the assignment != NULL change on the while.", "url": "https://github.com/eclipse-openj9/openj9/pull/9945#discussion_r442851425", "createdAt": "2020-06-19T13:48:57Z", "author": {"login": "andrewcraik"}, "path": "runtime/compiler/compile/J9SymbolReferenceTable.cpp", "diffHunk": "@@ -1428,10 +1428,10 @@ J9::SymbolReferenceTable::findJavaLangReferenceReferentShadowSymbol(TR_ResolvedM\n    TR::SymbolReference * symRef;\n    TR_SymRefIterator i(type == TR::Address ? aliasBuilder.addressShadowSymRefs() :\n                                             (type == TR::Int32 ? aliasBuilder.intShadowSymRefs() : aliasBuilder.nonIntPrimitiveShadowSymRefs()), self());\n-   while (symRef = i.getNext())\n-      if (symRef->getSymbol()->getDataType() == type &&\n-          symRef->getOffset() == offset &&\n-          symRef->getOwningMethod(comp()) == owningMethod)\n+   while ((symRef = i.getNext()) != NULL)\n+      if ((symRef->getSymbol()->getDataType() == type) &&\n+          (symRef->getOffset() == offset) &&\n+          (symRef->getOwningMethod(comp()) == owningMethod))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "caa2c214a9e4e4df0bfd60bafa6a0f5b93ac0b8d"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg4MjcyNg==", "bodyText": "I can revert that part of the change if you feel strongly about it.\nFrom the VM side of the code base, we have a general rule that each clause of a compound condition should be bracketed so devs can think about the logic rather than the order-of-operations, and so that future changes to the conditionals are clear when they need to introduce new sub-conditionals.\nI've tried a couple of times to introduce bracketing around complex conditionals after the fact - including using tools - and had the process fail.  There's even an old, now closed PR where matching the brackets to what the clang tool says it does with the conditional results in crashes at runtime.  Easier to introduce the brackets when simple than to retrofit later.", "url": "https://github.com/eclipse-openj9/openj9/pull/9945#discussion_r442882726", "createdAt": "2020-06-19T14:46:37Z", "author": {"login": "DanHeidinga"}, "path": "runtime/compiler/compile/J9SymbolReferenceTable.cpp", "diffHunk": "@@ -1428,10 +1428,10 @@ J9::SymbolReferenceTable::findJavaLangReferenceReferentShadowSymbol(TR_ResolvedM\n    TR::SymbolReference * symRef;\n    TR_SymRefIterator i(type == TR::Address ? aliasBuilder.addressShadowSymRefs() :\n                                             (type == TR::Int32 ? aliasBuilder.intShadowSymRefs() : aliasBuilder.nonIntPrimitiveShadowSymRefs()), self());\n-   while (symRef = i.getNext())\n-      if (symRef->getSymbol()->getDataType() == type &&\n-          symRef->getOffset() == offset &&\n-          symRef->getOwningMethod(comp()) == owningMethod)\n+   while ((symRef = i.getNext()) != NULL)\n+      if ((symRef->getSymbol()->getDataType() == type) &&\n+          (symRef->getOffset() == offset) &&\n+          (symRef->getOwningMethod(comp()) == owningMethod))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg1MTQyNQ=="}, "originalCommit": {"oid": "caa2c214a9e4e4df0bfd60bafa6a0f5b93ac0b8d"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkxMjMyNg==", "bodyText": "I certainly see there are benefits to explicit braces, but I also believe there is a benefit to keeping the code uniform. Rather than changing the code convention piecemeal I'd prefer to make this kind of change as a more considered more global change. To be clear, I am not saying you are wrong, but the conditions in this (and other compiler files) adhere to a set of conventions and I think consistency is a great aid to maintainability and readability. The benefits of your proposal should be considered as and when we get back to code style discussions.", "url": "https://github.com/eclipse-openj9/openj9/pull/9945#discussion_r442912326", "createdAt": "2020-06-19T15:41:20Z", "author": {"login": "andrewcraik"}, "path": "runtime/compiler/compile/J9SymbolReferenceTable.cpp", "diffHunk": "@@ -1428,10 +1428,10 @@ J9::SymbolReferenceTable::findJavaLangReferenceReferentShadowSymbol(TR_ResolvedM\n    TR::SymbolReference * symRef;\n    TR_SymRefIterator i(type == TR::Address ? aliasBuilder.addressShadowSymRefs() :\n                                             (type == TR::Int32 ? aliasBuilder.intShadowSymRefs() : aliasBuilder.nonIntPrimitiveShadowSymRefs()), self());\n-   while (symRef = i.getNext())\n-      if (symRef->getSymbol()->getDataType() == type &&\n-          symRef->getOffset() == offset &&\n-          symRef->getOwningMethod(comp()) == owningMethod)\n+   while ((symRef = i.getNext()) != NULL)\n+      if ((symRef->getSymbol()->getDataType() == type) &&\n+          (symRef->getOffset() == offset) &&\n+          (symRef->getOwningMethod(comp()) == owningMethod))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg1MTQyNQ=="}, "originalCommit": {"oid": "caa2c214a9e4e4df0bfd60bafa6a0f5b93ac0b8d"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1OTA0NTkzOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/control/HookedByTheJit.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMzo1MDowNVrOGmVi0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNDo0Nzo0MlrOGmXdCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg1MjA0OA==", "bodyText": "I'm fine with the ()s around the && to make the precedence clear but why around the == ?", "url": "https://github.com/eclipse-openj9/openj9/pull/9945#discussion_r442852048", "createdAt": "2020-06-19T13:50:05Z", "author": {"login": "andrewcraik"}, "path": "runtime/compiler/control/HookedByTheJit.cpp", "diffHunk": "@@ -4332,14 +4332,18 @@ static void jitStateLogic(J9JITConfig * jitConfig, TR::CompilationInfo * compInf\n       }\n    else // We will go to STEADY or DEEP_STEADY\n       {\n-      if (oldState == DEEPSTEADY_STATE ||  // keep the DEEPSTEADY_STATE\n+      if ((oldState == DEEPSTEADY_STATE) ||  // keep the DEEPSTEADY_STATE", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "caa2c214a9e4e4df0bfd60bafa6a0f5b93ac0b8d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg4MzMzOA==", "bodyText": "See longer explanation above.  But in general it helps code readability and evolution to make each conditional a clear, separate thing.", "url": "https://github.com/eclipse-openj9/openj9/pull/9945#discussion_r442883338", "createdAt": "2020-06-19T14:47:42Z", "author": {"login": "DanHeidinga"}, "path": "runtime/compiler/control/HookedByTheJit.cpp", "diffHunk": "@@ -4332,14 +4332,18 @@ static void jitStateLogic(J9JITConfig * jitConfig, TR::CompilationInfo * compInf\n       }\n    else // We will go to STEADY or DEEP_STEADY\n       {\n-      if (oldState == DEEPSTEADY_STATE ||  // keep the DEEPSTEADY_STATE\n+      if ((oldState == DEEPSTEADY_STATE) ||  // keep the DEEPSTEADY_STATE", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg1MjA0OA=="}, "originalCommit": {"oid": "caa2c214a9e4e4df0bfd60bafa6a0f5b93ac0b8d"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 44, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}