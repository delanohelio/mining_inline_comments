{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5MDkzMTIy", "number": 8199, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxNzo1MDo0NVrODW73cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxNzo1NTozMlrODW78jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1Mzc2MTEzOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/codegen/CodeGenGC.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxNzo1MDo0NVrOFb-Xew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxNzo1MDo0NVrOFb-Xew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg3NzY5MQ==", "bodyText": "@0xdaryl @knn-k FYI I'm not sure why we have architecture guards for this. I'm sure ARM/AArch64 could benefit.", "url": "https://github.com/eclipse-openj9/openj9/pull/8199#discussion_r364877691", "createdAt": "2020-01-09T17:50:45Z", "author": {"login": "fjeremic"}, "path": "runtime/compiler/codegen/CodeGenGC.cpp", "diffHunk": "@@ -378,7 +378,7 @@ J9::CodeGenerator::createStackAtlas()\n             localObjectsFound = true;\n             int32_t localObjectAlignment = comp->fej9()->getLocalObjectAlignmentInBytes();\n             if (localObjectAlignment > stackSlotSize &&\n-                (TR::Compiler->target.cpu.isX86() || TR::Compiler->target.cpu.isPower() || TR::Compiler->target.cpu.isZ()))\n+                (comp->target().cpu.isX86() || comp->target().cpu.isPower() || comp->target().cpu.isZ()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b68bd81fc15387f2c174fb35c0e8d282124f75c3"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1Mzc3MDA4OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/optimizer/IdiomTransformations.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxNzo1NDowMFrOFb-c7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxNzo1NDowMFrOFb-c7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg3OTA4Ng==", "bodyText": "This is pretty scary looking code in idiom recognition...", "url": "https://github.com/eclipse-openj9/openj9/pull/8199#discussion_r364879086", "createdAt": "2020-01-09T17:54:00Z", "author": {"login": "fjeremic"}, "path": "runtime/compiler/optimizer/IdiomTransformations.cpp", "diffHunk": "@@ -4712,7 +4712,7 @@ makeCopyingTRTOInduction1Graph(TR::Compilation *c, int32_t ctrl, int32_t pattern\n    tgt->setMinCounts(1, 1, 1);  // minimum ifCount, indirectLoadCount, indirectStoreCount\n    tgt->setHotness(warm, false);\n    static char *versionLengthStr = feGetEnv(\"TR_CopyingTRTOInduction1Graph_versionLength\");\n-   static int   versionLength = versionLengthStr ? atoi(versionLengthStr) : (TR::Compiler->target.cpu.isPower() ? 0 : 8);\n+   static int   versionLength = versionLengthStr ? atoi(versionLengthStr) : (c->target().cpu.isPower() ? 0 : 8);\n    tgt->setVersionLength(versionLength);   // depending on each architecture", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b68bd81fc15387f2c174fb35c0e8d282124f75c3"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1Mzc3NDIxOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/p/codegen/J9CodeGenerator.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxNzo1NTozMlrOFb-flg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxODowMDoyMlrOFb-n0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg3OTc2Ng==", "bodyText": "Do these have to use self()? The one right below just calls comp()", "url": "https://github.com/eclipse-openj9/openj9/pull/8199#discussion_r364879766", "createdAt": "2020-01-09T17:55:32Z", "author": {"login": "fjeremic"}, "path": "runtime/compiler/p/codegen/J9CodeGenerator.cpp", "diffHunk": "@@ -728,9 +728,9 @@ J9::Power::CodeGenerator::insertPrefetchIfNecessary(TR::Node *node, TR::Register\n       }\n    else if (node->getOpCodeValue() == TR::awrtbari &&\n             comp()->getMethodHotness() >= scorching &&\n-            TR::Compiler->target.cpu.id() >= TR_PPCp6 &&\n-              (TR::Compiler->target.is32Bit() ||\n-                (TR::Compiler->target.is64Bit() &&\n+            self()->comp()->target().cpu.id() >= TR_PPCp6 &&\n+              (self()->comp()->target().is32Bit() ||\n+                (self()->comp()->target().is64Bit() &&\n                  comp()->useCompressedPointers() &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b68bd81fc15387f2c174fb35c0e8d282124f75c3"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg4MTg3Mw==", "bodyText": "\ud83e\udd37\u200d\u2642 not sure, in an extensible class I always use self() just in case.", "url": "https://github.com/eclipse-openj9/openj9/pull/8199#discussion_r364881873", "createdAt": "2020-01-09T18:00:22Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/p/codegen/J9CodeGenerator.cpp", "diffHunk": "@@ -728,9 +728,9 @@ J9::Power::CodeGenerator::insertPrefetchIfNecessary(TR::Node *node, TR::Register\n       }\n    else if (node->getOpCodeValue() == TR::awrtbari &&\n             comp()->getMethodHotness() >= scorching &&\n-            TR::Compiler->target.cpu.id() >= TR_PPCp6 &&\n-              (TR::Compiler->target.is32Bit() ||\n-                (TR::Compiler->target.is64Bit() &&\n+            self()->comp()->target().cpu.id() >= TR_PPCp6 &&\n+              (self()->comp()->target().is32Bit() ||\n+                (self()->comp()->target().is64Bit() &&\n                  comp()->useCompressedPointers() &&", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg3OTc2Ng=="}, "originalCommit": {"oid": "b68bd81fc15387f2c174fb35c0e8d282124f75c3"}, "originalPosition": 150}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 797, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}