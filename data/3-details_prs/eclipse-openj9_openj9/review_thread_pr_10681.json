{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyMDEzMTk2", "number": 10681, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMDozMDoyNFrOEmxWCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNzowMToxOVrOEnIwTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDg5ODAzOnYy", "diffSide": "RIGHT", "path": "runtime/jcl/common/unsafe_mem.c", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMDozMDoyNFrOHW_z4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMjo1OTo0MlrOHXH90g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg3NjE5Mg==", "bodyText": "this will break windows, if a variable is not defined at the beginning of a scope. Don't worry about having multiple #if defined(..) blocks. Just define the variable at the start of the scope.", "url": "https://github.com/eclipse-openj9/openj9/pull/10681#discussion_r493876192", "createdAt": "2020-09-23T20:30:24Z", "author": {"login": "tajila"}, "path": "runtime/jcl/common/unsafe_mem.c", "diffHunk": "@@ -146,6 +145,7 @@ unsafeFreeMemory(J9VMThread* vmThread, void* oldAddress)\n \t\tJ9_LINKED_LIST_REMOVE(vmThread->javaVM->unsafeMemoryListHead, memBlock);\n \t\tomrthread_monitor_exit(mutex);\n #if defined(J9VM_OPT_SNAPSHOTS)\n+\t\tJ9JavaVM *vm = vmThread->javaVM;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74d9e544302db2e57a039f6bc3250808729d938a"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDAwOTgxMA==", "bodyText": "Fixed in https://github.com/eclipse/openj9/compare/74d9e544302db2e57a039f6bc3250808729d938a..a001f260c87796da222a7d5f0aa36ca27e7d5b69", "url": "https://github.com/eclipse-openj9/openj9/pull/10681#discussion_r494009810", "createdAt": "2020-09-24T02:59:42Z", "author": {"login": "r30shah"}, "path": "runtime/jcl/common/unsafe_mem.c", "diffHunk": "@@ -146,6 +145,7 @@ unsafeFreeMemory(J9VMThread* vmThread, void* oldAddress)\n \t\tJ9_LINKED_LIST_REMOVE(vmThread->javaVM->unsafeMemoryListHead, memBlock);\n \t\tomrthread_monitor_exit(mutex);\n #if defined(J9VM_OPT_SNAPSHOTS)\n+\t\tJ9JavaVM *vm = vmThread->javaVM;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg3NjE5Mg=="}, "originalCommit": {"oid": "74d9e544302db2e57a039f6bc3250808729d938a"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDg5ODY2OnYy", "diffSide": "RIGHT", "path": "runtime/vm/jvminit.c", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMDozMDozNFrOHW_0Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMjo1OTo0OFrOHXH95w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg3NjI5NQ==", "bodyText": "same here", "url": "https://github.com/eclipse-openj9/openj9/pull/10681#discussion_r493876295", "createdAt": "2020-09-23T20:30:34Z", "author": {"login": "tajila"}, "path": "runtime/vm/jvminit.c", "diffHunk": "@@ -7002,14 +7002,14 @@ freeClassNativeMemory(J9HookInterface** hook, UDATA eventNum, void* eventData, v\n {\n \tJ9VMClassUnloadEvent * data = eventData;\n \tJ9Class * clazz = data->clazz;\n-\tJ9JavaVM *vm = data->currentThread->javaVM;\n \tPORT_ACCESS_FROM_VMC(data->currentThread);\n \n \t/* Free the ID table for this class, but do not free any of the IDs.  They will be freed by killing their\n \t\tpools when the class loader is unloaded.\n \t*/\n \n #if defined(J9VM_OPT_SNAPSHOTS)\n+\tJ9JavaVM *vm = data->currentThread->javaVM;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74d9e544302db2e57a039f6bc3250808729d938a"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDAwOTgzMQ==", "bodyText": "Fixed in https://github.com/eclipse/openj9/compare/74d9e544302db2e57a039f6bc3250808729d938a..a001f260c87796da222a7d5f0aa36ca27e7d5b69", "url": "https://github.com/eclipse-openj9/openj9/pull/10681#discussion_r494009831", "createdAt": "2020-09-24T02:59:48Z", "author": {"login": "r30shah"}, "path": "runtime/vm/jvminit.c", "diffHunk": "@@ -7002,14 +7002,14 @@ freeClassNativeMemory(J9HookInterface** hook, UDATA eventNum, void* eventData, v\n {\n \tJ9VMClassUnloadEvent * data = eventData;\n \tJ9Class * clazz = data->clazz;\n-\tJ9JavaVM *vm = data->currentThread->javaVM;\n \tPORT_ACCESS_FROM_VMC(data->currentThread);\n \n \t/* Free the ID table for this class, but do not free any of the IDs.  They will be freed by killing their\n \t\tpools when the class loader is unloaded.\n \t*/\n \n #if defined(J9VM_OPT_SNAPSHOTS)\n+\tJ9JavaVM *vm = data->currentThread->javaVM;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg3NjI5NQ=="}, "originalCommit": {"oid": "74d9e544302db2e57a039f6bc3250808729d938a"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDczMzU3OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/z/codegen/J9TreeEvaluator.cpp", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNzowMToxOVrOHXkRlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwMTowNzoyM1rOHXxkrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ3MzYyMA==", "bodyText": "@0xdaryl @fjeremic The rest of this PR looks fine to me but I don't have the background to tell if this is correct.  Can you of you +1 this?", "url": "https://github.com/eclipse-openj9/openj9/pull/10681#discussion_r494473620", "createdAt": "2020-09-24T17:01:19Z", "author": {"login": "DanHeidinga"}, "path": "runtime/compiler/z/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -2184,7 +2184,7 @@ J9::Z::TreeEvaluator::asynccheckEvaluator(TR::Node * node, TR::CodeGenerator * c\n          }\n       if (value >= MIN_IMMEDIATE_VAL && value <= MAX_IMMEDIATE_VAL)\n          {\n-         TR::MemoryReference * tempMR = generateS390MemoryReference(firstChild, cg);\n+         TR::MemoryReference * tempMR = TR::MemoryReference::create(cg, firstChild);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a001f260c87796da222a7d5f0aa36ca27e7d5b69"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ3OTQ3MA==", "bodyText": "For the background, we got rid of calls to generateS390MemoryReference(TR::Node *, TR::CodeGenerator*) and replaced them with API TR::MemoryReference::create , not sure when and how this got escaped, may be because we do not have those changes in master branch of OpenJ9.", "url": "https://github.com/eclipse-openj9/openj9/pull/10681#discussion_r494479470", "createdAt": "2020-09-24T17:11:14Z", "author": {"login": "r30shah"}, "path": "runtime/compiler/z/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -2184,7 +2184,7 @@ J9::Z::TreeEvaluator::asynccheckEvaluator(TR::Node * node, TR::CodeGenerator * c\n          }\n       if (value >= MIN_IMMEDIATE_VAL && value <= MAX_IMMEDIATE_VAL)\n          {\n-         TR::MemoryReference * tempMR = generateS390MemoryReference(firstChild, cg);\n+         TR::MemoryReference * tempMR = TR::MemoryReference::create(cg, firstChild);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ3MzYyMA=="}, "originalCommit": {"oid": "a001f260c87796da222a7d5f0aa36ca27e7d5b69"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY5MTUwMw==", "bodyText": "This looks to be fine for the snapshot branch, but that API needs to find its way into the master branch still.", "url": "https://github.com/eclipse-openj9/openj9/pull/10681#discussion_r494691503", "createdAt": "2020-09-25T01:07:23Z", "author": {"login": "0xdaryl"}, "path": "runtime/compiler/z/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -2184,7 +2184,7 @@ J9::Z::TreeEvaluator::asynccheckEvaluator(TR::Node * node, TR::CodeGenerator * c\n          }\n       if (value >= MIN_IMMEDIATE_VAL && value <= MAX_IMMEDIATE_VAL)\n          {\n-         TR::MemoryReference * tempMR = generateS390MemoryReference(firstChild, cg);\n+         TR::MemoryReference * tempMR = TR::MemoryReference::create(cg, firstChild);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ3MzYyMA=="}, "originalCommit": {"oid": "a001f260c87796da222a7d5f0aa36ca27e7d5b69"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1214, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}