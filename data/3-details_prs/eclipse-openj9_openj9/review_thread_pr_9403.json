{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwODM0Mzcz", "number": 9403, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxODowNzo1NVrOD3vhtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNDoyODoxMFrOD5bdXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5Nzc2OTUxOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/env/J9SharedCache.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxODowNzo1NVrOGOK5PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMDo0MjoyOVrOGQRaAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUxMTc0MQ==", "bodyText": "I haven't checked, but if these vectors are only initialized during aboutToBootstrap, then the monitor is not needed because aboutToBootstrap is only executed by a single thread before any Java code can run.", "url": "https://github.com/eclipse-openj9/openj9/pull/9403#discussion_r417511741", "createdAt": "2020-04-29T18:07:55Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/env/J9SharedCache.cpp", "diffHunk": "@@ -96,6 +103,15 @@ TR_YesNoMaybe TR_J9SharedCache::isSharedCacheDisabledBecauseFull(TR::Compilation\n    return _sharedCacheDisabledBecauseFull;\n    }\n \n+bool\n+TR_J9SharedCache::initClassChainValidationBitVectors()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17ce825fd2b8a6314b59b6a452044e89745d64d2"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcxNTU4Nw==", "bodyText": "yeah they're only initialized in aboutToBootstrap; I'll change it so we don't acquire the monitor.", "url": "https://github.com/eclipse-openj9/openj9/pull/9403#discussion_r419715587", "createdAt": "2020-05-04T20:42:29Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/env/J9SharedCache.cpp", "diffHunk": "@@ -96,6 +103,15 @@ TR_YesNoMaybe TR_J9SharedCache::isSharedCacheDisabledBecauseFull(TR::Compilation\n    return _sharedCacheDisabledBecauseFull;\n    }\n \n+bool\n+TR_J9SharedCache::initClassChainValidationBitVectors()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUxMTc0MQ=="}, "originalCommit": {"oid": "17ce825fd2b8a6314b59b6a452044e89745d64d2"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5Nzc4MzMxOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/env/J9SharedCache.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxODoxMjowMVrOGOLCZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxODoxMjowMVrOGOLCZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUxNDA4Nw==", "bodyText": "Nitpick: space before index++", "url": "https://github.com/eclipse-openj9/openj9/pull/9403#discussion_r417514087", "createdAt": "2020-04-29T18:12:01Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/env/J9SharedCache.cpp", "diffHunk": "@@ -813,76 +829,155 @@ TR_J9SharedCache::findChainForClass(J9Class *clazz, const char *key, uint32_t ke\n    return chainForClass;\n    }\n \n+bool\n+TR_J9SharedCache::validateSuperClassesInClassChain(J9Class *clazz, UDATA * & chainPtr, UDATA *chainEnd)\n+   {\n+   int32_t numSuperclasses = TR::Compiler->cls.classDepthOf(fe()->convertClassPtrToClassOffset(clazz));\n+   for (int32_t index=0; index < numSuperclasses;index++)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17ce825fd2b8a6314b59b6a452044e89745d64d2"}, "originalPosition": 204}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5Nzc4NzkwOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/env/J9SharedCache.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxODoxMzoyMVrOGOLFbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxODoxMzoyMVrOGOLFbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUxNDg2MQ==", "bodyText": "Let's cache fe()->convertClassPtrToClassOffset(clazz) and take it out of the loop", "url": "https://github.com/eclipse-openj9/openj9/pull/9403#discussion_r417514861", "createdAt": "2020-04-29T18:13:21Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/env/J9SharedCache.cpp", "diffHunk": "@@ -813,76 +829,155 @@ TR_J9SharedCache::findChainForClass(J9Class *clazz, const char *key, uint32_t ke\n    return chainForClass;\n    }\n \n+bool\n+TR_J9SharedCache::validateSuperClassesInClassChain(J9Class *clazz, UDATA * & chainPtr, UDATA *chainEnd)\n+   {\n+   int32_t numSuperclasses = TR::Compiler->cls.classDepthOf(fe()->convertClassPtrToClassOffset(clazz));\n+   for (int32_t index=0; index < numSuperclasses;index++)\n+      {\n+      J9ROMClass *romClass = TR::Compiler->cls.romClassOfSuperClass(fe()->convertClassPtrToClassOffset(clazz), index);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17ce825fd2b8a6314b59b6a452044e89745d64d2"}, "originalPosition": 206}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzgzNTM4OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/runtime/codertinit.cpp", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxODoyNjo0MFrOGOLkUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMDo0MzoyMlrOGQRbwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUyMjc2OQ==", "bodyText": "I forgot when codert_onload is executed, but it would be nice to create this monitor only if needed, thus maybe we should move this inside initClassChainValidationBitVectors()", "url": "https://github.com/eclipse-openj9/openj9/pull/9403#discussion_r417522769", "createdAt": "2020-04-29T18:26:40Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/runtime/codertinit.cpp", "diffHunk": "@@ -216,6 +217,13 @@ J9JITConfig * codert_onload(J9JavaVM * javaVM)\n          goto _abort;\n       }\n \n+   /* initialize classChainValidationMutex */\n+   if (!classChainValidationMutex)\n+      {\n+      if (!(classChainValidationMutex = TR::Monitor::create(\"JIT-ClassChainValidationMutex\")))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17ce825fd2b8a6314b59b6a452044e89745d64d2"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODExMjQyMQ==", "bodyText": "Yeah I was thinking about whether I can avoid creating the monitor if I don't need it. I'll look into it.", "url": "https://github.com/eclipse-openj9/openj9/pull/9403#discussion_r418112421", "createdAt": "2020-04-30T15:51:32Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/runtime/codertinit.cpp", "diffHunk": "@@ -216,6 +217,13 @@ J9JITConfig * codert_onload(J9JavaVM * javaVM)\n          goto _abort;\n       }\n \n+   /* initialize classChainValidationMutex */\n+   if (!classChainValidationMutex)\n+      {\n+      if (!(classChainValidationMutex = TR::Monitor::create(\"JIT-ClassChainValidationMutex\")))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUyMjc2OQ=="}, "originalCommit": {"oid": "17ce825fd2b8a6314b59b6a452044e89745d64d2"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcxNjAzMg==", "bodyText": "I changed where the monitor is created; essentially the monitor is only needed after we init the map, so I'll change the code to create the monitor when we go to init the map.", "url": "https://github.com/eclipse-openj9/openj9/pull/9403#discussion_r419716032", "createdAt": "2020-05-04T20:43:22Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/runtime/codertinit.cpp", "diffHunk": "@@ -216,6 +217,13 @@ J9JITConfig * codert_onload(J9JavaVM * javaVM)\n          goto _abort;\n       }\n \n+   /* initialize classChainValidationMutex */\n+   if (!classChainValidationMutex)\n+      {\n+      if (!(classChainValidationMutex = TR::Monitor::create(\"JIT-ClassChainValidationMutex\")))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUyMjc2OQ=="}, "originalCommit": {"oid": "17ce825fd2b8a6314b59b6a452044e89745d64d2"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5Nzg0OTEyOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/env/J9SharedCache.cpp", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxODozMDozMVrOGOLtFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMToyNDo0M1rOGQSxLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUyNTAxMg==", "bodyText": "Each class offset is represented by a bit inside the bit-vector. You have 1 million bits (initial size) which means you can cover (more or less) an SCC size of 1MB (ignoring for a moment that classes are stored in the beginning of the SCC).\nIf a class is always aligned on an 8-byte boundary you could do (classOffsetInCache >> 3) to expand your coverage", "url": "https://github.com/eclipse-openj9/openj9/pull/9403#discussion_r417525012", "createdAt": "2020-04-29T18:30:31Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/env/J9SharedCache.cpp", "diffHunk": "@@ -813,76 +829,155 @@ TR_J9SharedCache::findChainForClass(J9Class *clazz, const char *key, uint32_t ke\n    return chainForClass;\n    }\n \n+bool\n+TR_J9SharedCache::validateSuperClassesInClassChain(J9Class *clazz, UDATA * & chainPtr, UDATA *chainEnd)\n+   {\n+   int32_t numSuperclasses = TR::Compiler->cls.classDepthOf(fe()->convertClassPtrToClassOffset(clazz));\n+   for (int32_t index=0; index < numSuperclasses;index++)\n+      {\n+      J9ROMClass *romClass = TR::Compiler->cls.romClassOfSuperClass(fe()->convertClassPtrToClassOffset(clazz), index);\n+      if (!romclassMatchesCachedVersion(romClass, chainPtr, chainEnd))\n+         {\n+         LOG(1, \"\\tClass in hierarchy did not match, returning false\\n\");\n+         return false;\n+         }\n+      }\n+   return true;\n+   }\n+\n+bool\n+TR_J9SharedCache::validateInterfacesInClassChain(J9Class *clazz, UDATA * & chainPtr, UDATA *chainEnd)\n+   {\n+   J9ITable *interfaceElement = TR::Compiler->cls.iTableOf(fe()->convertClassPtrToClassOffset(clazz));\n+   while (interfaceElement)\n+      {\n+      J9ROMClass * romClass = TR::Compiler->cls.iTableRomClass(interfaceElement);\n+      if (!romclassMatchesCachedVersion(romClass, chainPtr, chainEnd))\n+         {\n+         LOG(1, \"\\tInterface class did not match, returning false\\n\");\n+         return false;\n+         }\n+      interfaceElement = TR::Compiler->cls.iTableNext(interfaceElement);\n+      }\n+   return true;\n+   }\n+\n+bool\n+TR_J9SharedCache::validateClassChain(J9ROMClass *romClass, J9Class *clazz, UDATA * & chainPtr, UDATA *chainEnd)\n+   {\n+   bool validationSucceeded = false;\n+\n+   if (!romclassMatchesCachedVersion(romClass, chainPtr, chainEnd))\n+      {\n+      LOG(1, \"\\tClass did not match, returning false\\n\");\n+      }\n+   else if (!validateSuperClassesInClassChain(clazz, chainPtr, chainEnd))\n+      {\n+      LOG(1, \"\\tClass in hierarchy did not match, returning false\\n\");\n+      }\n+   else if (!validateInterfacesInClassChain(clazz, chainPtr, chainEnd))\n+      {\n+      LOG(1, \"\\tInterface class did not match, returning false\\n\");\n+      }\n+   else if (chainPtr != chainEnd)\n+      {\n+      LOG(1, \"\\tfinished classes and interfaces, but not at chain end, returning false\\n\");\n+      }\n+   else\n+      {\n+      validationSucceeded = true;\n+      }\n+\n+   return validationSucceeded;\n+   }\n+\n bool\n TR_J9SharedCache::classMatchesCachedVersion(J9Class *clazz, UDATA *chainData)\n    {\n    J9ROMClass *romClass = TR::Compiler->cls.romClassOf(fe()->convertClassPtrToClassOffset(clazz));\n    J9UTF8 * className = J9ROMCLASS_CLASSNAME(romClass);\n-   LOG(5, { log(\"classMatchesCachedVersion class %p %.*s\\n\", clazz, J9UTF8_LENGTH(className), J9UTF8_DATA(className)); });\n+   LOG(1, \"classMatchesCachedVersion class %p %.*s\\n\", clazz, J9UTF8_LENGTH(className), J9UTF8_DATA(className));\n \n    uintptr_t classOffsetInCache;\n+\n+   /* If the pointer isn't the SCC, then return false immmediately\n+    * as the bit vectors hold offsets into the SCC of romclasses\n+    */\n    if (!isPointerInSharedCache(romClass, &classOffsetInCache))\n       {\n-      LOG(5, { log(\"\\tclass not in shared cache, returning false\\n\"); });\n+      LOG(1, \"\\tclass not in shared cache, returning false\\n\");\n       return false;\n       }\n \n+   /* Check if the validation of the class chain was previously\n+    * performed; if so, return the result of that validation\n+    */\n+   if (TR::Options::getAOTCmdLineOptions()->getOption(TR_EnableClassChainValidationCaching))\n+      {\n+      OMR::CriticalSection checkBitVectors(classChainValidationMutex);\n+      if (_classChainValidationFailed->isSet(classOffsetInCache))\n+         {\n+         LOG(1, \"\\tcached result: validation failed\\n\");\n+         return false;\n+         }\n+      if (_classChainValidationSucceeded->isSet(classOffsetInCache))\n+         {\n+         LOG(1, \"\\tcached result: validation succeeded\\n\");\n+         return true;\n+         }\n+      }\n+\n+   /* If the chainData passed in is NULL, try to find it in the SCC\n+    * using the romclass\n+    */\n    if (chainData == NULL)\n       {\n       char key[17]; // longest possible key length is way less than 16 digits\n       uint32_t keyLength;\n       createClassKey(classOffsetInCache, key, keyLength);\n-      LOG(9, { log(\"\\tno chain specific, so looking up for key %.*s\\n\", keyLength, key); });\n+      LOG(3, \"\\tno chain specific, so looking up for key %.*s\\n\", keyLength, key);\n       chainData = findChainForClass(clazz, key, keyLength);\n-      if (chainData == NULL)\n+      }\n+\n+   /* If the chainData is still NULL, add the romclas offset to\n+    * the _classChainValidationFailed bit vector\n+    */\n+   if (chainData == NULL)\n+      {\n+      LOG(1, \"\\tno stored chain, returning false\\n\");\n+      if (TR::Options::getAOTCmdLineOptions()->getOption(TR_EnableClassChainValidationCaching))\n          {\n-         LOG(5, { log(\"\\tno stored chain, returning false\\n\"); });\n-         return false;\n+         OMR::CriticalSection noStoredChain(classChainValidationMutex);\n+         _classChainValidationFailed->set(classOffsetInCache);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17ce825fd2b8a6314b59b6a452044e89745d64d2"}, "originalPosition": 325}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODExNTcxNg==", "bodyText": "You have 1 million bits (initial size) which means you can cover (more or less) an SCC size of 1MB\n\nI believe it's going to be much more than 1MB. The reason is because the ROMClass offsets refer to the embedded ROMClass in the SCC. The ROMClass contains the ROMConstantPool and the ROMMethods (which contain all the bytecodes). Therefore, the distance between two ROMClasses is going to much more than 1 pointer size.\n\nIf a class is always aligned on an 8-byte boundary you could do (classOffsetInCache >> 3) to expand your coverage\n\nI don't think the ROMClasses are aligned on a 8-byte boundary like RAMClasses, but i'll defer to @DanHeidinga on that. However even if they were aligned, I don't believe you can do the shift because the shift only applies to the class and not the offset.", "url": "https://github.com/eclipse-openj9/openj9/pull/9403#discussion_r418115716", "createdAt": "2020-04-30T15:56:05Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/env/J9SharedCache.cpp", "diffHunk": "@@ -813,76 +829,155 @@ TR_J9SharedCache::findChainForClass(J9Class *clazz, const char *key, uint32_t ke\n    return chainForClass;\n    }\n \n+bool\n+TR_J9SharedCache::validateSuperClassesInClassChain(J9Class *clazz, UDATA * & chainPtr, UDATA *chainEnd)\n+   {\n+   int32_t numSuperclasses = TR::Compiler->cls.classDepthOf(fe()->convertClassPtrToClassOffset(clazz));\n+   for (int32_t index=0; index < numSuperclasses;index++)\n+      {\n+      J9ROMClass *romClass = TR::Compiler->cls.romClassOfSuperClass(fe()->convertClassPtrToClassOffset(clazz), index);\n+      if (!romclassMatchesCachedVersion(romClass, chainPtr, chainEnd))\n+         {\n+         LOG(1, \"\\tClass in hierarchy did not match, returning false\\n\");\n+         return false;\n+         }\n+      }\n+   return true;\n+   }\n+\n+bool\n+TR_J9SharedCache::validateInterfacesInClassChain(J9Class *clazz, UDATA * & chainPtr, UDATA *chainEnd)\n+   {\n+   J9ITable *interfaceElement = TR::Compiler->cls.iTableOf(fe()->convertClassPtrToClassOffset(clazz));\n+   while (interfaceElement)\n+      {\n+      J9ROMClass * romClass = TR::Compiler->cls.iTableRomClass(interfaceElement);\n+      if (!romclassMatchesCachedVersion(romClass, chainPtr, chainEnd))\n+         {\n+         LOG(1, \"\\tInterface class did not match, returning false\\n\");\n+         return false;\n+         }\n+      interfaceElement = TR::Compiler->cls.iTableNext(interfaceElement);\n+      }\n+   return true;\n+   }\n+\n+bool\n+TR_J9SharedCache::validateClassChain(J9ROMClass *romClass, J9Class *clazz, UDATA * & chainPtr, UDATA *chainEnd)\n+   {\n+   bool validationSucceeded = false;\n+\n+   if (!romclassMatchesCachedVersion(romClass, chainPtr, chainEnd))\n+      {\n+      LOG(1, \"\\tClass did not match, returning false\\n\");\n+      }\n+   else if (!validateSuperClassesInClassChain(clazz, chainPtr, chainEnd))\n+      {\n+      LOG(1, \"\\tClass in hierarchy did not match, returning false\\n\");\n+      }\n+   else if (!validateInterfacesInClassChain(clazz, chainPtr, chainEnd))\n+      {\n+      LOG(1, \"\\tInterface class did not match, returning false\\n\");\n+      }\n+   else if (chainPtr != chainEnd)\n+      {\n+      LOG(1, \"\\tfinished classes and interfaces, but not at chain end, returning false\\n\");\n+      }\n+   else\n+      {\n+      validationSucceeded = true;\n+      }\n+\n+   return validationSucceeded;\n+   }\n+\n bool\n TR_J9SharedCache::classMatchesCachedVersion(J9Class *clazz, UDATA *chainData)\n    {\n    J9ROMClass *romClass = TR::Compiler->cls.romClassOf(fe()->convertClassPtrToClassOffset(clazz));\n    J9UTF8 * className = J9ROMCLASS_CLASSNAME(romClass);\n-   LOG(5, { log(\"classMatchesCachedVersion class %p %.*s\\n\", clazz, J9UTF8_LENGTH(className), J9UTF8_DATA(className)); });\n+   LOG(1, \"classMatchesCachedVersion class %p %.*s\\n\", clazz, J9UTF8_LENGTH(className), J9UTF8_DATA(className));\n \n    uintptr_t classOffsetInCache;\n+\n+   /* If the pointer isn't the SCC, then return false immmediately\n+    * as the bit vectors hold offsets into the SCC of romclasses\n+    */\n    if (!isPointerInSharedCache(romClass, &classOffsetInCache))\n       {\n-      LOG(5, { log(\"\\tclass not in shared cache, returning false\\n\"); });\n+      LOG(1, \"\\tclass not in shared cache, returning false\\n\");\n       return false;\n       }\n \n+   /* Check if the validation of the class chain was previously\n+    * performed; if so, return the result of that validation\n+    */\n+   if (TR::Options::getAOTCmdLineOptions()->getOption(TR_EnableClassChainValidationCaching))\n+      {\n+      OMR::CriticalSection checkBitVectors(classChainValidationMutex);\n+      if (_classChainValidationFailed->isSet(classOffsetInCache))\n+         {\n+         LOG(1, \"\\tcached result: validation failed\\n\");\n+         return false;\n+         }\n+      if (_classChainValidationSucceeded->isSet(classOffsetInCache))\n+         {\n+         LOG(1, \"\\tcached result: validation succeeded\\n\");\n+         return true;\n+         }\n+      }\n+\n+   /* If the chainData passed in is NULL, try to find it in the SCC\n+    * using the romclass\n+    */\n    if (chainData == NULL)\n       {\n       char key[17]; // longest possible key length is way less than 16 digits\n       uint32_t keyLength;\n       createClassKey(classOffsetInCache, key, keyLength);\n-      LOG(9, { log(\"\\tno chain specific, so looking up for key %.*s\\n\", keyLength, key); });\n+      LOG(3, \"\\tno chain specific, so looking up for key %.*s\\n\", keyLength, key);\n       chainData = findChainForClass(clazz, key, keyLength);\n-      if (chainData == NULL)\n+      }\n+\n+   /* If the chainData is still NULL, add the romclas offset to\n+    * the _classChainValidationFailed bit vector\n+    */\n+   if (chainData == NULL)\n+      {\n+      LOG(1, \"\\tno stored chain, returning false\\n\");\n+      if (TR::Options::getAOTCmdLineOptions()->getOption(TR_EnableClassChainValidationCaching))\n          {\n-         LOG(5, { log(\"\\tno stored chain, returning false\\n\"); });\n-         return false;\n+         OMR::CriticalSection noStoredChain(classChainValidationMutex);\n+         _classChainValidationFailed->set(classOffsetInCache);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUyNTAxMg=="}, "originalCommit": {"oid": "17ce825fd2b8a6314b59b6a452044e89745d64d2"}, "originalPosition": 325}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEzNDkwOQ==", "bodyText": "The distance between two ROMClasses is indeed going to be larger than 1 pointer size which is why the bitvector solution is inefficient. A sparse bit vector may be better here.\nIf the ROMClasses are aligned on a 8-byte boundary, the offsets are going to be aligned too because I assume that the section of ROMclasses in the SCC is aligned.", "url": "https://github.com/eclipse-openj9/openj9/pull/9403#discussion_r418134909", "createdAt": "2020-04-30T16:25:35Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/env/J9SharedCache.cpp", "diffHunk": "@@ -813,76 +829,155 @@ TR_J9SharedCache::findChainForClass(J9Class *clazz, const char *key, uint32_t ke\n    return chainForClass;\n    }\n \n+bool\n+TR_J9SharedCache::validateSuperClassesInClassChain(J9Class *clazz, UDATA * & chainPtr, UDATA *chainEnd)\n+   {\n+   int32_t numSuperclasses = TR::Compiler->cls.classDepthOf(fe()->convertClassPtrToClassOffset(clazz));\n+   for (int32_t index=0; index < numSuperclasses;index++)\n+      {\n+      J9ROMClass *romClass = TR::Compiler->cls.romClassOfSuperClass(fe()->convertClassPtrToClassOffset(clazz), index);\n+      if (!romclassMatchesCachedVersion(romClass, chainPtr, chainEnd))\n+         {\n+         LOG(1, \"\\tClass in hierarchy did not match, returning false\\n\");\n+         return false;\n+         }\n+      }\n+   return true;\n+   }\n+\n+bool\n+TR_J9SharedCache::validateInterfacesInClassChain(J9Class *clazz, UDATA * & chainPtr, UDATA *chainEnd)\n+   {\n+   J9ITable *interfaceElement = TR::Compiler->cls.iTableOf(fe()->convertClassPtrToClassOffset(clazz));\n+   while (interfaceElement)\n+      {\n+      J9ROMClass * romClass = TR::Compiler->cls.iTableRomClass(interfaceElement);\n+      if (!romclassMatchesCachedVersion(romClass, chainPtr, chainEnd))\n+         {\n+         LOG(1, \"\\tInterface class did not match, returning false\\n\");\n+         return false;\n+         }\n+      interfaceElement = TR::Compiler->cls.iTableNext(interfaceElement);\n+      }\n+   return true;\n+   }\n+\n+bool\n+TR_J9SharedCache::validateClassChain(J9ROMClass *romClass, J9Class *clazz, UDATA * & chainPtr, UDATA *chainEnd)\n+   {\n+   bool validationSucceeded = false;\n+\n+   if (!romclassMatchesCachedVersion(romClass, chainPtr, chainEnd))\n+      {\n+      LOG(1, \"\\tClass did not match, returning false\\n\");\n+      }\n+   else if (!validateSuperClassesInClassChain(clazz, chainPtr, chainEnd))\n+      {\n+      LOG(1, \"\\tClass in hierarchy did not match, returning false\\n\");\n+      }\n+   else if (!validateInterfacesInClassChain(clazz, chainPtr, chainEnd))\n+      {\n+      LOG(1, \"\\tInterface class did not match, returning false\\n\");\n+      }\n+   else if (chainPtr != chainEnd)\n+      {\n+      LOG(1, \"\\tfinished classes and interfaces, but not at chain end, returning false\\n\");\n+      }\n+   else\n+      {\n+      validationSucceeded = true;\n+      }\n+\n+   return validationSucceeded;\n+   }\n+\n bool\n TR_J9SharedCache::classMatchesCachedVersion(J9Class *clazz, UDATA *chainData)\n    {\n    J9ROMClass *romClass = TR::Compiler->cls.romClassOf(fe()->convertClassPtrToClassOffset(clazz));\n    J9UTF8 * className = J9ROMCLASS_CLASSNAME(romClass);\n-   LOG(5, { log(\"classMatchesCachedVersion class %p %.*s\\n\", clazz, J9UTF8_LENGTH(className), J9UTF8_DATA(className)); });\n+   LOG(1, \"classMatchesCachedVersion class %p %.*s\\n\", clazz, J9UTF8_LENGTH(className), J9UTF8_DATA(className));\n \n    uintptr_t classOffsetInCache;\n+\n+   /* If the pointer isn't the SCC, then return false immmediately\n+    * as the bit vectors hold offsets into the SCC of romclasses\n+    */\n    if (!isPointerInSharedCache(romClass, &classOffsetInCache))\n       {\n-      LOG(5, { log(\"\\tclass not in shared cache, returning false\\n\"); });\n+      LOG(1, \"\\tclass not in shared cache, returning false\\n\");\n       return false;\n       }\n \n+   /* Check if the validation of the class chain was previously\n+    * performed; if so, return the result of that validation\n+    */\n+   if (TR::Options::getAOTCmdLineOptions()->getOption(TR_EnableClassChainValidationCaching))\n+      {\n+      OMR::CriticalSection checkBitVectors(classChainValidationMutex);\n+      if (_classChainValidationFailed->isSet(classOffsetInCache))\n+         {\n+         LOG(1, \"\\tcached result: validation failed\\n\");\n+         return false;\n+         }\n+      if (_classChainValidationSucceeded->isSet(classOffsetInCache))\n+         {\n+         LOG(1, \"\\tcached result: validation succeeded\\n\");\n+         return true;\n+         }\n+      }\n+\n+   /* If the chainData passed in is NULL, try to find it in the SCC\n+    * using the romclass\n+    */\n    if (chainData == NULL)\n       {\n       char key[17]; // longest possible key length is way less than 16 digits\n       uint32_t keyLength;\n       createClassKey(classOffsetInCache, key, keyLength);\n-      LOG(9, { log(\"\\tno chain specific, so looking up for key %.*s\\n\", keyLength, key); });\n+      LOG(3, \"\\tno chain specific, so looking up for key %.*s\\n\", keyLength, key);\n       chainData = findChainForClass(clazz, key, keyLength);\n-      if (chainData == NULL)\n+      }\n+\n+   /* If the chainData is still NULL, add the romclas offset to\n+    * the _classChainValidationFailed bit vector\n+    */\n+   if (chainData == NULL)\n+      {\n+      LOG(1, \"\\tno stored chain, returning false\\n\");\n+      if (TR::Options::getAOTCmdLineOptions()->getOption(TR_EnableClassChainValidationCaching))\n          {\n-         LOG(5, { log(\"\\tno stored chain, returning false\\n\"); });\n-         return false;\n+         OMR::CriticalSection noStoredChain(classChainValidationMutex);\n+         _classChainValidationFailed->set(classOffsetInCache);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUyNTAxMg=="}, "originalCommit": {"oid": "17ce825fd2b8a6314b59b6a452044e89745d64d2"}, "originalPosition": 325}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTczNzkwMA==", "bodyText": "Resolving thread based on the conversation starting from #9403 (comment)", "url": "https://github.com/eclipse-openj9/openj9/pull/9403#discussion_r419737900", "createdAt": "2020-05-04T21:24:43Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/env/J9SharedCache.cpp", "diffHunk": "@@ -813,76 +829,155 @@ TR_J9SharedCache::findChainForClass(J9Class *clazz, const char *key, uint32_t ke\n    return chainForClass;\n    }\n \n+bool\n+TR_J9SharedCache::validateSuperClassesInClassChain(J9Class *clazz, UDATA * & chainPtr, UDATA *chainEnd)\n+   {\n+   int32_t numSuperclasses = TR::Compiler->cls.classDepthOf(fe()->convertClassPtrToClassOffset(clazz));\n+   for (int32_t index=0; index < numSuperclasses;index++)\n+      {\n+      J9ROMClass *romClass = TR::Compiler->cls.romClassOfSuperClass(fe()->convertClassPtrToClassOffset(clazz), index);\n+      if (!romclassMatchesCachedVersion(romClass, chainPtr, chainEnd))\n+         {\n+         LOG(1, \"\\tClass in hierarchy did not match, returning false\\n\");\n+         return false;\n+         }\n+      }\n+   return true;\n+   }\n+\n+bool\n+TR_J9SharedCache::validateInterfacesInClassChain(J9Class *clazz, UDATA * & chainPtr, UDATA *chainEnd)\n+   {\n+   J9ITable *interfaceElement = TR::Compiler->cls.iTableOf(fe()->convertClassPtrToClassOffset(clazz));\n+   while (interfaceElement)\n+      {\n+      J9ROMClass * romClass = TR::Compiler->cls.iTableRomClass(interfaceElement);\n+      if (!romclassMatchesCachedVersion(romClass, chainPtr, chainEnd))\n+         {\n+         LOG(1, \"\\tInterface class did not match, returning false\\n\");\n+         return false;\n+         }\n+      interfaceElement = TR::Compiler->cls.iTableNext(interfaceElement);\n+      }\n+   return true;\n+   }\n+\n+bool\n+TR_J9SharedCache::validateClassChain(J9ROMClass *romClass, J9Class *clazz, UDATA * & chainPtr, UDATA *chainEnd)\n+   {\n+   bool validationSucceeded = false;\n+\n+   if (!romclassMatchesCachedVersion(romClass, chainPtr, chainEnd))\n+      {\n+      LOG(1, \"\\tClass did not match, returning false\\n\");\n+      }\n+   else if (!validateSuperClassesInClassChain(clazz, chainPtr, chainEnd))\n+      {\n+      LOG(1, \"\\tClass in hierarchy did not match, returning false\\n\");\n+      }\n+   else if (!validateInterfacesInClassChain(clazz, chainPtr, chainEnd))\n+      {\n+      LOG(1, \"\\tInterface class did not match, returning false\\n\");\n+      }\n+   else if (chainPtr != chainEnd)\n+      {\n+      LOG(1, \"\\tfinished classes and interfaces, but not at chain end, returning false\\n\");\n+      }\n+   else\n+      {\n+      validationSucceeded = true;\n+      }\n+\n+   return validationSucceeded;\n+   }\n+\n bool\n TR_J9SharedCache::classMatchesCachedVersion(J9Class *clazz, UDATA *chainData)\n    {\n    J9ROMClass *romClass = TR::Compiler->cls.romClassOf(fe()->convertClassPtrToClassOffset(clazz));\n    J9UTF8 * className = J9ROMCLASS_CLASSNAME(romClass);\n-   LOG(5, { log(\"classMatchesCachedVersion class %p %.*s\\n\", clazz, J9UTF8_LENGTH(className), J9UTF8_DATA(className)); });\n+   LOG(1, \"classMatchesCachedVersion class %p %.*s\\n\", clazz, J9UTF8_LENGTH(className), J9UTF8_DATA(className));\n \n    uintptr_t classOffsetInCache;\n+\n+   /* If the pointer isn't the SCC, then return false immmediately\n+    * as the bit vectors hold offsets into the SCC of romclasses\n+    */\n    if (!isPointerInSharedCache(romClass, &classOffsetInCache))\n       {\n-      LOG(5, { log(\"\\tclass not in shared cache, returning false\\n\"); });\n+      LOG(1, \"\\tclass not in shared cache, returning false\\n\");\n       return false;\n       }\n \n+   /* Check if the validation of the class chain was previously\n+    * performed; if so, return the result of that validation\n+    */\n+   if (TR::Options::getAOTCmdLineOptions()->getOption(TR_EnableClassChainValidationCaching))\n+      {\n+      OMR::CriticalSection checkBitVectors(classChainValidationMutex);\n+      if (_classChainValidationFailed->isSet(classOffsetInCache))\n+         {\n+         LOG(1, \"\\tcached result: validation failed\\n\");\n+         return false;\n+         }\n+      if (_classChainValidationSucceeded->isSet(classOffsetInCache))\n+         {\n+         LOG(1, \"\\tcached result: validation succeeded\\n\");\n+         return true;\n+         }\n+      }\n+\n+   /* If the chainData passed in is NULL, try to find it in the SCC\n+    * using the romclass\n+    */\n    if (chainData == NULL)\n       {\n       char key[17]; // longest possible key length is way less than 16 digits\n       uint32_t keyLength;\n       createClassKey(classOffsetInCache, key, keyLength);\n-      LOG(9, { log(\"\\tno chain specific, so looking up for key %.*s\\n\", keyLength, key); });\n+      LOG(3, \"\\tno chain specific, so looking up for key %.*s\\n\", keyLength, key);\n       chainData = findChainForClass(clazz, key, keyLength);\n-      if (chainData == NULL)\n+      }\n+\n+   /* If the chainData is still NULL, add the romclas offset to\n+    * the _classChainValidationFailed bit vector\n+    */\n+   if (chainData == NULL)\n+      {\n+      LOG(1, \"\\tno stored chain, returning false\\n\");\n+      if (TR::Options::getAOTCmdLineOptions()->getOption(TR_EnableClassChainValidationCaching))\n          {\n-         LOG(5, { log(\"\\tno stored chain, returning false\\n\"); });\n-         return false;\n+         OMR::CriticalSection noStoredChain(classChainValidationMutex);\n+         _classChainValidationFailed->set(classOffsetInCache);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUyNTAxMg=="}, "originalCommit": {"oid": "17ce825fd2b8a6314b59b6a452044e89745d64d2"}, "originalPosition": 325}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMjc3Njk2OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/env/J9SharedCache.cpp", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMTozNDo0NlrOGQTFag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNDo0Mjo0MVrOGQsxmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc0MzA4Mg==", "bodyText": "Probably should guard this with if (!_ccvMap. Or, I should just remove the if (!_classChainValidationMutex) check above.", "url": "https://github.com/eclipse-openj9/openj9/pull/9403#discussion_r419743082", "createdAt": "2020-05-04T21:34:46Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/env/J9SharedCache.cpp", "diffHunk": "@@ -96,6 +100,45 @@ TR_YesNoMaybe TR_J9SharedCache::isSharedCacheDisabledBecauseFull(TR::Compilation\n    return _sharedCacheDisabledBecauseFull;\n    }\n \n+bool\n+TR_J9SharedCache::initCCVCaching()\n+   {\n+   if (!_classChainValidationMutex)\n+      {\n+      if (!(_classChainValidationMutex = TR::Monitor::create(\"JIT-ClassChainValidationMutex\")))\n+         return false;\n+      }\n+\n+   void *storage = jitPersistentAlloc(sizeof(CCVMap));\n+   if (!storage)\n+      return false;\n+\n+   _ccvMap = new (storage) CCVMap(CCVComparator(), TR::Compiler->persistentAllocator());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce42ed59239ccd054c9dc881d890a397d3be63a8"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDEzNTk4MA==", "bodyText": "Would something from PersistentCollections.hpp work for you here? (maybe extend it as I see that we only have  unordered_map)", "url": "https://github.com/eclipse-openj9/openj9/pull/9403#discussion_r420135980", "createdAt": "2020-05-05T14:05:42Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/env/J9SharedCache.cpp", "diffHunk": "@@ -96,6 +100,45 @@ TR_YesNoMaybe TR_J9SharedCache::isSharedCacheDisabledBecauseFull(TR::Compilation\n    return _sharedCacheDisabledBecauseFull;\n    }\n \n+bool\n+TR_J9SharedCache::initCCVCaching()\n+   {\n+   if (!_classChainValidationMutex)\n+      {\n+      if (!(_classChainValidationMutex = TR::Monitor::create(\"JIT-ClassChainValidationMutex\")))\n+         return false;\n+      }\n+\n+   void *storage = jitPersistentAlloc(sizeof(CCVMap));\n+   if (!storage)\n+      return false;\n+\n+   _ccvMap = new (storage) CCVMap(CCVComparator(), TR::Compiler->persistentAllocator());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc0MzA4Mg=="}, "originalCommit": {"oid": "ce42ed59239ccd054c9dc881d890a397d3be63a8"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE2Mzk5Mg==", "bodyText": "I think that the syntax in that file won't compile on all platforms; it needs full C++11 support.", "url": "https://github.com/eclipse-openj9/openj9/pull/9403#discussion_r420163992", "createdAt": "2020-05-05T14:42:41Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/env/J9SharedCache.cpp", "diffHunk": "@@ -96,6 +100,45 @@ TR_YesNoMaybe TR_J9SharedCache::isSharedCacheDisabledBecauseFull(TR::Compilation\n    return _sharedCacheDisabledBecauseFull;\n    }\n \n+bool\n+TR_J9SharedCache::initCCVCaching()\n+   {\n+   if (!_classChainValidationMutex)\n+      {\n+      if (!(_classChainValidationMutex = TR::Monitor::create(\"JIT-ClassChainValidationMutex\")))\n+         return false;\n+      }\n+\n+   void *storage = jitPersistentAlloc(sizeof(CCVMap));\n+   if (!storage)\n+      return false;\n+\n+   _ccvMap = new (storage) CCVMap(CCVComparator(), TR::Compiler->persistentAllocator());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc0MzA4Mg=="}, "originalCommit": {"oid": "ce42ed59239ccd054c9dc881d890a397d3be63a8"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNTQ1MzEwOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/env/J9SharedCache.cpp", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNDoyODoxMFrOGQsG6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNDo0NDo0NlrOGQs31A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE1MzA2NA==", "bodyText": "I don't understand this assert. When TR_EnableClassChainValidationCaching is enabled, we either return true or false or crash. Then the code below that does cacheCCVResult(classOffsetInCache, CCVResult::failure) is unreachable.", "url": "https://github.com/eclipse-openj9/openj9/pull/9403#discussion_r420153064", "createdAt": "2020-05-05T14:28:10Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/env/J9SharedCache.cpp", "diffHunk": "@@ -814,75 +857,150 @@ TR_J9SharedCache::findChainForClass(J9Class *clazz, const char *key, uint32_t ke\n    }\n \n bool\n-TR_J9SharedCache::classMatchesCachedVersion(J9Class *clazz, UDATA *chainData)\n+TR_J9SharedCache::validateSuperClassesInClassChain(TR_OpaqueClassBlock *clazz, UDATA * & chainPtr, UDATA *chainEnd)\n    {\n-   J9ROMClass *romClass = TR::Compiler->cls.romClassOf(fe()->convertClassPtrToClassOffset(clazz));\n-   J9UTF8 * className = J9ROMCLASS_CLASSNAME(romClass);\n-   LOG(5, { log(\"classMatchesCachedVersion class %p %.*s\\n\", clazz, J9UTF8_LENGTH(className), J9UTF8_DATA(className)); });\n-\n-   uintptr_t classOffsetInCache;\n-   if (!isPointerInSharedCache(romClass, &classOffsetInCache))\n+   int32_t numSuperclasses = TR::Compiler->cls.classDepthOf(clazz);\n+   for (int32_t index=0; index < numSuperclasses; index++)\n       {\n-      LOG(5, { log(\"\\tclass not in shared cache, returning false\\n\"); });\n-      return false;\n+      J9ROMClass *romClass = TR::Compiler->cls.romClassOfSuperClass(clazz, index);\n+      if (!romclassMatchesCachedVersion(romClass, chainPtr, chainEnd))\n+         {\n+         LOG(1, \"\\tClass in hierarchy did not match, returning false\\n\");\n+         return false;\n+         }\n       }\n+   return true;\n+   }\n \n-   if (chainData == NULL)\n+bool\n+TR_J9SharedCache::validateInterfacesInClassChain(TR_OpaqueClassBlock *clazz, UDATA * & chainPtr, UDATA *chainEnd)\n+   {\n+   J9ITable *interfaceElement = TR::Compiler->cls.iTableOf(clazz);\n+   while (interfaceElement)\n       {\n-      char key[17]; // longest possible key length is way less than 16 digits\n-      uint32_t keyLength;\n-      createClassKey(classOffsetInCache, key, keyLength);\n-      LOG(9, { log(\"\\tno chain specific, so looking up for key %.*s\\n\", keyLength, key); });\n-      chainData = findChainForClass(clazz, key, keyLength);\n-      if (chainData == NULL)\n+      J9ROMClass * romClass = TR::Compiler->cls.iTableRomClass(interfaceElement);\n+      if (!romclassMatchesCachedVersion(romClass, chainPtr, chainEnd))\n          {\n-         LOG(5, { log(\"\\tno stored chain, returning false\\n\"); });\n+         LOG(1, \"\\tInterface class did not match, returning false\\n\");\n          return false;\n          }\n+      interfaceElement = TR::Compiler->cls.iTableNext(interfaceElement);\n       }\n+   return true;\n+   }\n \n-   UDATA *chainPtr = chainData;\n-   UDATA chainLength = *chainPtr++;\n-   UDATA *chainEnd = (UDATA *) (((U_8*)chainData) + chainLength);\n-   LOG(9, { log(\"\\tfound chain: %p with length %d\\n\", chainData, chainLength); });\n+bool\n+TR_J9SharedCache::validateClassChain(J9ROMClass *romClass, TR_OpaqueClassBlock *clazz, UDATA * & chainPtr, UDATA *chainEnd)\n+   {\n+   bool validationSucceeded = false;\n \n    if (!romclassMatchesCachedVersion(romClass, chainPtr, chainEnd))\n       {\n-         LOG(5, { log(\"\\tClass did not match, returning false\\n\"); });\n-         return false;\n+      LOG(1, \"\\tClass did not match, returning false\\n\");\n+      }\n+   else if (!validateSuperClassesInClassChain(clazz, chainPtr, chainEnd))\n+      {\n+      LOG(1, \"\\tClass in hierarchy did not match, returning false\\n\");\n+      }\n+   else if (!validateInterfacesInClassChain(clazz, chainPtr, chainEnd))\n+      {\n+      LOG(1, \"\\tInterface class did not match, returning false\\n\");\n+      }\n+   else if (chainPtr != chainEnd)\n+      {\n+      LOG(1, \"\\tfinished classes and interfaces, but not at chain end, returning false\\n\");\n+      }\n+   else\n+      {\n+      validationSucceeded = true;\n       }\n \n-   int32_t numSuperclasses = TR::Compiler->cls.classDepthOf(fe()->convertClassPtrToClassOffset(clazz));\n-   for (int32_t index=0; index < numSuperclasses;index++)\n+   return validationSucceeded;\n+   }\n+\n+bool\n+TR_J9SharedCache::classMatchesCachedVersion(J9Class *clazz, UDATA *chainData)\n+   {\n+   J9ROMClass *romClass = TR::Compiler->cls.romClassOf(fe()->convertClassPtrToClassOffset(clazz));\n+   J9UTF8 * className = J9ROMCLASS_CLASSNAME(romClass);\n+   LOG(1, \"classMatchesCachedVersion class %p %.*s\\n\", clazz, J9UTF8_LENGTH(className), J9UTF8_DATA(className));\n+\n+   uintptr_t classOffsetInCache;\n+\n+   /* If the pointer isn't the SCC, then return false immmediately\n+    * as the map holds offsets into the SCC of romclasses\n+    */\n+   if (!isPointerInSharedCache(romClass, &classOffsetInCache))\n       {\n-      J9ROMClass *romClass = TR::Compiler->cls.romClassOfSuperClass(fe()->convertClassPtrToClassOffset(clazz), index);\n-      if (!romclassMatchesCachedVersion(romClass, chainPtr, chainEnd))\n-         {\n-         LOG(5, { log(\"\\tClass in hierarchy did not match, returning false\\n\"); });\n-         return false;\n-         }\n+      LOG(1, \"\\tclass not in shared cache, returning false\\n\");\n+      return false;\n       }\n \n-   J9ITable *interfaceElement = TR::Compiler->cls.iTableOf(fe()->convertClassPtrToClassOffset(clazz));\n-   while (interfaceElement)\n+   /* Check if the validation of the class chain was previously\n+    * performed; if so, return the result of that validation\n+    */\n+   if (TR::Options::getAOTCmdLineOptions()->getOption(TR_EnableClassChainValidationCaching))\n       {\n-      J9ROMClass * romClass = TR::Compiler->cls.iTableRomClass(interfaceElement);\n-      if (!romclassMatchesCachedVersion(romClass, chainPtr, chainEnd))\n+      auto result = getCachedCCVResult(classOffsetInCache);\n+      if (result == CCVResult::success)\n+         {\n+         LOG(1, \"\\tcached result: validation succeeded\\n\");\n+         return true;\n+         }\n+      else if (result == CCVResult::failure)\n          {\n-         LOG(5, { log(\"\\tInterface class did not match, returning false\\n\"); });\n+         LOG(1, \"\\tcached result: validation failed\\n\");\n          return false;\n          }\n-      interfaceElement = TR::Compiler->cls.iTableNext(interfaceElement);\n+      else\n+         {\n+         TR_ASSERT_FATAL(result == CCVResult::notYetValidated, \"Unknown result cached %d\\n\", result);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce42ed59239ccd054c9dc881d890a397d3be63a8"}, "originalPosition": 361}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE2NDU5Ng==", "bodyText": "getCachedCCVResult can return CCVResult::notYetValidated if we've never cached the result of the validation yet, ie, this is the first time we're validating the class.", "url": "https://github.com/eclipse-openj9/openj9/pull/9403#discussion_r420164596", "createdAt": "2020-05-05T14:43:31Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/env/J9SharedCache.cpp", "diffHunk": "@@ -814,75 +857,150 @@ TR_J9SharedCache::findChainForClass(J9Class *clazz, const char *key, uint32_t ke\n    }\n \n bool\n-TR_J9SharedCache::classMatchesCachedVersion(J9Class *clazz, UDATA *chainData)\n+TR_J9SharedCache::validateSuperClassesInClassChain(TR_OpaqueClassBlock *clazz, UDATA * & chainPtr, UDATA *chainEnd)\n    {\n-   J9ROMClass *romClass = TR::Compiler->cls.romClassOf(fe()->convertClassPtrToClassOffset(clazz));\n-   J9UTF8 * className = J9ROMCLASS_CLASSNAME(romClass);\n-   LOG(5, { log(\"classMatchesCachedVersion class %p %.*s\\n\", clazz, J9UTF8_LENGTH(className), J9UTF8_DATA(className)); });\n-\n-   uintptr_t classOffsetInCache;\n-   if (!isPointerInSharedCache(romClass, &classOffsetInCache))\n+   int32_t numSuperclasses = TR::Compiler->cls.classDepthOf(clazz);\n+   for (int32_t index=0; index < numSuperclasses; index++)\n       {\n-      LOG(5, { log(\"\\tclass not in shared cache, returning false\\n\"); });\n-      return false;\n+      J9ROMClass *romClass = TR::Compiler->cls.romClassOfSuperClass(clazz, index);\n+      if (!romclassMatchesCachedVersion(romClass, chainPtr, chainEnd))\n+         {\n+         LOG(1, \"\\tClass in hierarchy did not match, returning false\\n\");\n+         return false;\n+         }\n       }\n+   return true;\n+   }\n \n-   if (chainData == NULL)\n+bool\n+TR_J9SharedCache::validateInterfacesInClassChain(TR_OpaqueClassBlock *clazz, UDATA * & chainPtr, UDATA *chainEnd)\n+   {\n+   J9ITable *interfaceElement = TR::Compiler->cls.iTableOf(clazz);\n+   while (interfaceElement)\n       {\n-      char key[17]; // longest possible key length is way less than 16 digits\n-      uint32_t keyLength;\n-      createClassKey(classOffsetInCache, key, keyLength);\n-      LOG(9, { log(\"\\tno chain specific, so looking up for key %.*s\\n\", keyLength, key); });\n-      chainData = findChainForClass(clazz, key, keyLength);\n-      if (chainData == NULL)\n+      J9ROMClass * romClass = TR::Compiler->cls.iTableRomClass(interfaceElement);\n+      if (!romclassMatchesCachedVersion(romClass, chainPtr, chainEnd))\n          {\n-         LOG(5, { log(\"\\tno stored chain, returning false\\n\"); });\n+         LOG(1, \"\\tInterface class did not match, returning false\\n\");\n          return false;\n          }\n+      interfaceElement = TR::Compiler->cls.iTableNext(interfaceElement);\n       }\n+   return true;\n+   }\n \n-   UDATA *chainPtr = chainData;\n-   UDATA chainLength = *chainPtr++;\n-   UDATA *chainEnd = (UDATA *) (((U_8*)chainData) + chainLength);\n-   LOG(9, { log(\"\\tfound chain: %p with length %d\\n\", chainData, chainLength); });\n+bool\n+TR_J9SharedCache::validateClassChain(J9ROMClass *romClass, TR_OpaqueClassBlock *clazz, UDATA * & chainPtr, UDATA *chainEnd)\n+   {\n+   bool validationSucceeded = false;\n \n    if (!romclassMatchesCachedVersion(romClass, chainPtr, chainEnd))\n       {\n-         LOG(5, { log(\"\\tClass did not match, returning false\\n\"); });\n-         return false;\n+      LOG(1, \"\\tClass did not match, returning false\\n\");\n+      }\n+   else if (!validateSuperClassesInClassChain(clazz, chainPtr, chainEnd))\n+      {\n+      LOG(1, \"\\tClass in hierarchy did not match, returning false\\n\");\n+      }\n+   else if (!validateInterfacesInClassChain(clazz, chainPtr, chainEnd))\n+      {\n+      LOG(1, \"\\tInterface class did not match, returning false\\n\");\n+      }\n+   else if (chainPtr != chainEnd)\n+      {\n+      LOG(1, \"\\tfinished classes and interfaces, but not at chain end, returning false\\n\");\n+      }\n+   else\n+      {\n+      validationSucceeded = true;\n       }\n \n-   int32_t numSuperclasses = TR::Compiler->cls.classDepthOf(fe()->convertClassPtrToClassOffset(clazz));\n-   for (int32_t index=0; index < numSuperclasses;index++)\n+   return validationSucceeded;\n+   }\n+\n+bool\n+TR_J9SharedCache::classMatchesCachedVersion(J9Class *clazz, UDATA *chainData)\n+   {\n+   J9ROMClass *romClass = TR::Compiler->cls.romClassOf(fe()->convertClassPtrToClassOffset(clazz));\n+   J9UTF8 * className = J9ROMCLASS_CLASSNAME(romClass);\n+   LOG(1, \"classMatchesCachedVersion class %p %.*s\\n\", clazz, J9UTF8_LENGTH(className), J9UTF8_DATA(className));\n+\n+   uintptr_t classOffsetInCache;\n+\n+   /* If the pointer isn't the SCC, then return false immmediately\n+    * as the map holds offsets into the SCC of romclasses\n+    */\n+   if (!isPointerInSharedCache(romClass, &classOffsetInCache))\n       {\n-      J9ROMClass *romClass = TR::Compiler->cls.romClassOfSuperClass(fe()->convertClassPtrToClassOffset(clazz), index);\n-      if (!romclassMatchesCachedVersion(romClass, chainPtr, chainEnd))\n-         {\n-         LOG(5, { log(\"\\tClass in hierarchy did not match, returning false\\n\"); });\n-         return false;\n-         }\n+      LOG(1, \"\\tclass not in shared cache, returning false\\n\");\n+      return false;\n       }\n \n-   J9ITable *interfaceElement = TR::Compiler->cls.iTableOf(fe()->convertClassPtrToClassOffset(clazz));\n-   while (interfaceElement)\n+   /* Check if the validation of the class chain was previously\n+    * performed; if so, return the result of that validation\n+    */\n+   if (TR::Options::getAOTCmdLineOptions()->getOption(TR_EnableClassChainValidationCaching))\n       {\n-      J9ROMClass * romClass = TR::Compiler->cls.iTableRomClass(interfaceElement);\n-      if (!romclassMatchesCachedVersion(romClass, chainPtr, chainEnd))\n+      auto result = getCachedCCVResult(classOffsetInCache);\n+      if (result == CCVResult::success)\n+         {\n+         LOG(1, \"\\tcached result: validation succeeded\\n\");\n+         return true;\n+         }\n+      else if (result == CCVResult::failure)\n          {\n-         LOG(5, { log(\"\\tInterface class did not match, returning false\\n\"); });\n+         LOG(1, \"\\tcached result: validation failed\\n\");\n          return false;\n          }\n-      interfaceElement = TR::Compiler->cls.iTableNext(interfaceElement);\n+      else\n+         {\n+         TR_ASSERT_FATAL(result == CCVResult::notYetValidated, \"Unknown result cached %d\\n\", result);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE1MzA2NA=="}, "originalCommit": {"oid": "ce42ed59239ccd054c9dc881d890a397d3be63a8"}, "originalPosition": 361}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE2NTU4OA==", "bodyText": "The assert is to ensure that if the result returned is not success or failure, it better be notYetValidated (see comment in https://github.com/dsouzai/openj9/blob/classChainOpts/runtime/compiler/env/J9SharedCache.hpp#L257-L261)", "url": "https://github.com/eclipse-openj9/openj9/pull/9403#discussion_r420165588", "createdAt": "2020-05-05T14:44:46Z", "author": {"login": "dsouzai"}, "path": "runtime/compiler/env/J9SharedCache.cpp", "diffHunk": "@@ -814,75 +857,150 @@ TR_J9SharedCache::findChainForClass(J9Class *clazz, const char *key, uint32_t ke\n    }\n \n bool\n-TR_J9SharedCache::classMatchesCachedVersion(J9Class *clazz, UDATA *chainData)\n+TR_J9SharedCache::validateSuperClassesInClassChain(TR_OpaqueClassBlock *clazz, UDATA * & chainPtr, UDATA *chainEnd)\n    {\n-   J9ROMClass *romClass = TR::Compiler->cls.romClassOf(fe()->convertClassPtrToClassOffset(clazz));\n-   J9UTF8 * className = J9ROMCLASS_CLASSNAME(romClass);\n-   LOG(5, { log(\"classMatchesCachedVersion class %p %.*s\\n\", clazz, J9UTF8_LENGTH(className), J9UTF8_DATA(className)); });\n-\n-   uintptr_t classOffsetInCache;\n-   if (!isPointerInSharedCache(romClass, &classOffsetInCache))\n+   int32_t numSuperclasses = TR::Compiler->cls.classDepthOf(clazz);\n+   for (int32_t index=0; index < numSuperclasses; index++)\n       {\n-      LOG(5, { log(\"\\tclass not in shared cache, returning false\\n\"); });\n-      return false;\n+      J9ROMClass *romClass = TR::Compiler->cls.romClassOfSuperClass(clazz, index);\n+      if (!romclassMatchesCachedVersion(romClass, chainPtr, chainEnd))\n+         {\n+         LOG(1, \"\\tClass in hierarchy did not match, returning false\\n\");\n+         return false;\n+         }\n       }\n+   return true;\n+   }\n \n-   if (chainData == NULL)\n+bool\n+TR_J9SharedCache::validateInterfacesInClassChain(TR_OpaqueClassBlock *clazz, UDATA * & chainPtr, UDATA *chainEnd)\n+   {\n+   J9ITable *interfaceElement = TR::Compiler->cls.iTableOf(clazz);\n+   while (interfaceElement)\n       {\n-      char key[17]; // longest possible key length is way less than 16 digits\n-      uint32_t keyLength;\n-      createClassKey(classOffsetInCache, key, keyLength);\n-      LOG(9, { log(\"\\tno chain specific, so looking up for key %.*s\\n\", keyLength, key); });\n-      chainData = findChainForClass(clazz, key, keyLength);\n-      if (chainData == NULL)\n+      J9ROMClass * romClass = TR::Compiler->cls.iTableRomClass(interfaceElement);\n+      if (!romclassMatchesCachedVersion(romClass, chainPtr, chainEnd))\n          {\n-         LOG(5, { log(\"\\tno stored chain, returning false\\n\"); });\n+         LOG(1, \"\\tInterface class did not match, returning false\\n\");\n          return false;\n          }\n+      interfaceElement = TR::Compiler->cls.iTableNext(interfaceElement);\n       }\n+   return true;\n+   }\n \n-   UDATA *chainPtr = chainData;\n-   UDATA chainLength = *chainPtr++;\n-   UDATA *chainEnd = (UDATA *) (((U_8*)chainData) + chainLength);\n-   LOG(9, { log(\"\\tfound chain: %p with length %d\\n\", chainData, chainLength); });\n+bool\n+TR_J9SharedCache::validateClassChain(J9ROMClass *romClass, TR_OpaqueClassBlock *clazz, UDATA * & chainPtr, UDATA *chainEnd)\n+   {\n+   bool validationSucceeded = false;\n \n    if (!romclassMatchesCachedVersion(romClass, chainPtr, chainEnd))\n       {\n-         LOG(5, { log(\"\\tClass did not match, returning false\\n\"); });\n-         return false;\n+      LOG(1, \"\\tClass did not match, returning false\\n\");\n+      }\n+   else if (!validateSuperClassesInClassChain(clazz, chainPtr, chainEnd))\n+      {\n+      LOG(1, \"\\tClass in hierarchy did not match, returning false\\n\");\n+      }\n+   else if (!validateInterfacesInClassChain(clazz, chainPtr, chainEnd))\n+      {\n+      LOG(1, \"\\tInterface class did not match, returning false\\n\");\n+      }\n+   else if (chainPtr != chainEnd)\n+      {\n+      LOG(1, \"\\tfinished classes and interfaces, but not at chain end, returning false\\n\");\n+      }\n+   else\n+      {\n+      validationSucceeded = true;\n       }\n \n-   int32_t numSuperclasses = TR::Compiler->cls.classDepthOf(fe()->convertClassPtrToClassOffset(clazz));\n-   for (int32_t index=0; index < numSuperclasses;index++)\n+   return validationSucceeded;\n+   }\n+\n+bool\n+TR_J9SharedCache::classMatchesCachedVersion(J9Class *clazz, UDATA *chainData)\n+   {\n+   J9ROMClass *romClass = TR::Compiler->cls.romClassOf(fe()->convertClassPtrToClassOffset(clazz));\n+   J9UTF8 * className = J9ROMCLASS_CLASSNAME(romClass);\n+   LOG(1, \"classMatchesCachedVersion class %p %.*s\\n\", clazz, J9UTF8_LENGTH(className), J9UTF8_DATA(className));\n+\n+   uintptr_t classOffsetInCache;\n+\n+   /* If the pointer isn't the SCC, then return false immmediately\n+    * as the map holds offsets into the SCC of romclasses\n+    */\n+   if (!isPointerInSharedCache(romClass, &classOffsetInCache))\n       {\n-      J9ROMClass *romClass = TR::Compiler->cls.romClassOfSuperClass(fe()->convertClassPtrToClassOffset(clazz), index);\n-      if (!romclassMatchesCachedVersion(romClass, chainPtr, chainEnd))\n-         {\n-         LOG(5, { log(\"\\tClass in hierarchy did not match, returning false\\n\"); });\n-         return false;\n-         }\n+      LOG(1, \"\\tclass not in shared cache, returning false\\n\");\n+      return false;\n       }\n \n-   J9ITable *interfaceElement = TR::Compiler->cls.iTableOf(fe()->convertClassPtrToClassOffset(clazz));\n-   while (interfaceElement)\n+   /* Check if the validation of the class chain was previously\n+    * performed; if so, return the result of that validation\n+    */\n+   if (TR::Options::getAOTCmdLineOptions()->getOption(TR_EnableClassChainValidationCaching))\n       {\n-      J9ROMClass * romClass = TR::Compiler->cls.iTableRomClass(interfaceElement);\n-      if (!romclassMatchesCachedVersion(romClass, chainPtr, chainEnd))\n+      auto result = getCachedCCVResult(classOffsetInCache);\n+      if (result == CCVResult::success)\n+         {\n+         LOG(1, \"\\tcached result: validation succeeded\\n\");\n+         return true;\n+         }\n+      else if (result == CCVResult::failure)\n          {\n-         LOG(5, { log(\"\\tInterface class did not match, returning false\\n\"); });\n+         LOG(1, \"\\tcached result: validation failed\\n\");\n          return false;\n          }\n-      interfaceElement = TR::Compiler->cls.iTableNext(interfaceElement);\n+      else\n+         {\n+         TR_ASSERT_FATAL(result == CCVResult::notYetValidated, \"Unknown result cached %d\\n\", result);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE1MzA2NA=="}, "originalCommit": {"oid": "ce42ed59239ccd054c9dc881d890a397d3be63a8"}, "originalPosition": 361}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 285, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}