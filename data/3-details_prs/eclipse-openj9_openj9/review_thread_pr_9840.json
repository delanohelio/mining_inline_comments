{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyMTM4NTg0", "number": 9840, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNzo0NDozMFrOEEZi9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzowNjo1MVrOEFIX5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMDQ4MzEwOnYy", "diffSide": "RIGHT", "path": "runtime/rasdump/trigger.c", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNzo0NDozMFrOGh_0Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNzo0NDozMFrOGh_0Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMwMTc1OA==", "bodyText": "nit: comment closer should be on a line by itself.", "url": "https://github.com/eclipse-openj9/openj9/pull/9840#discussion_r438301758", "createdAt": "2020-06-10T17:44:30Z", "author": {"login": "keithc-ca"}, "path": "runtime/rasdump/trigger.c", "diffHunk": "@@ -555,6 +555,46 @@ prepareForDump(struct J9JavaVM *vm, struct J9RASdumpAgent *agent, struct J9RASdu\n \t\tnewState |= J9RAS_DUMP_TRACE_DISABLED;\n \t}\n \n+\t/* Release vm access until this thread has the dumpKey and is ready to run. This will allow \n+\t * other threads to obtain exclusiveVMAccess in the meantime. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7b4ec673c57999d4bc1a72c07980365685a904f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMDQ4NzIzOnYy", "diffSide": "RIGHT", "path": "runtime/rasdump/trigger.c", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNzo0NTozN1rOGh_27w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMzowOToxMVrOGiJNIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMwMjQ0Nw==", "bodyText": "It isn't clear to me what is meant by 'out-time' here: please elaborate.", "url": "https://github.com/eclipse-openj9/openj9/pull/9840#discussion_r438302447", "createdAt": "2020-06-10T17:45:37Z", "author": {"login": "keithc-ca"}, "path": "runtime/rasdump/trigger.c", "diffHunk": "@@ -555,6 +555,46 @@ prepareForDump(struct J9JavaVM *vm, struct J9RASdumpAgent *agent, struct J9RASdu\n \t\tnewState |= J9RAS_DUMP_TRACE_DISABLED;\n \t}\n \n+\t/* Release vm access until this thread has the dumpKey and is ready to run. This will allow \n+\t * other threads to obtain exclusiveVMAccess in the meantime. */\n+\tvm->internalVMFunctions->internalReleaseVMAccess(vmThread);\n+\n+\t/*\n+\t * The following actions are considered safe to call during a crash situation...\n+\t */\n+\n+\t/* For fatal events, the first failing thread sets the global rasDumpFirstThread. It then gets higher priority on the\n+\t * serial dump lock, see below. This allows the first failing thread to complete its dumps and exit the VM, reducing\n+\t * the number of dumps written and out-time if multiple threads crash.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7b4ec673c57999d4bc1a72c07980365685a904f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ1NTU4NA==", "bodyText": "I am unclear about this phrase as well, this comment was not authored by me.\nI think it is talking about reducing the time it takes a thread to crash but I'm not sure why that would apply to 'multiple threads' specifically.", "url": "https://github.com/eclipse-openj9/openj9/pull/9840#discussion_r438455584", "createdAt": "2020-06-10T23:09:11Z", "author": {"login": "theresa-m"}, "path": "runtime/rasdump/trigger.c", "diffHunk": "@@ -555,6 +555,46 @@ prepareForDump(struct J9JavaVM *vm, struct J9RASdumpAgent *agent, struct J9RASdu\n \t\tnewState |= J9RAS_DUMP_TRACE_DISABLED;\n \t}\n \n+\t/* Release vm access until this thread has the dumpKey and is ready to run. This will allow \n+\t * other threads to obtain exclusiveVMAccess in the meantime. */\n+\tvm->internalVMFunctions->internalReleaseVMAccess(vmThread);\n+\n+\t/*\n+\t * The following actions are considered safe to call during a crash situation...\n+\t */\n+\n+\t/* For fatal events, the first failing thread sets the global rasDumpFirstThread. It then gets higher priority on the\n+\t * serial dump lock, see below. This allows the first failing thread to complete its dumps and exit the VM, reducing\n+\t * the number of dumps written and out-time if multiple threads crash.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMwMjQ0Nw=="}, "originalCommit": {"oid": "c7b4ec673c57999d4bc1a72c07980365685a904f"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMDQ5NDkwOnYy", "diffSide": "RIGHT", "path": "runtime/rasdump/trigger.c", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNzo0Nzo0N1rOGh_76w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNzo0Nzo0N1rOGh_76w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMwMzcyMw==", "bodyText": "This should use J9_ARE_ANY_BITS_SET().", "url": "https://github.com/eclipse-openj9/openj9/pull/9840#discussion_r438303723", "createdAt": "2020-06-10T17:47:47Z", "author": {"login": "keithc-ca"}, "path": "runtime/rasdump/trigger.c", "diffHunk": "@@ -555,6 +555,46 @@ prepareForDump(struct J9JavaVM *vm, struct J9RASdumpAgent *agent, struct J9RASdu\n \t\tnewState |= J9RAS_DUMP_TRACE_DISABLED;\n \t}\n \n+\t/* Release vm access until this thread has the dumpKey and is ready to run. This will allow \n+\t * other threads to obtain exclusiveVMAccess in the meantime. */\n+\tvm->internalVMFunctions->internalReleaseVMAccess(vmThread);\n+\n+\t/*\n+\t * The following actions are considered safe to call during a crash situation...\n+\t */\n+\n+\t/* For fatal events, the first failing thread sets the global rasDumpFirstThread. It then gets higher priority on the\n+\t * serial dump lock, see below. This allows the first failing thread to complete its dumps and exit the VM, reducing\n+\t * the number of dumps written and out-time if multiple threads crash.\n+\t */\n+\tif (0 != (context->eventFlags & (J9RAS_DUMP_ON_GP_FAULT | J9RAS_DUMP_ON_ABORT_SIGNAL | J9RAS_DUMP_ON_TRACE_ASSERT))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7b4ec673c57999d4bc1a72c07980365685a904f"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMDQ5NzEwOnYy", "diffSide": "RIGHT", "path": "runtime/rasdump/trigger.c", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNzo0ODoyNFrOGh_9Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNzo0ODoyNFrOGh_9Ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMwNDA5MQ==", "bodyText": "This should use J9_ARE_ANY_BITS_SET().", "url": "https://github.com/eclipse-openj9/openj9/pull/9840#discussion_r438304091", "createdAt": "2020-06-10T17:48:24Z", "author": {"login": "keithc-ca"}, "path": "runtime/rasdump/trigger.c", "diffHunk": "@@ -555,6 +555,46 @@ prepareForDump(struct J9JavaVM *vm, struct J9RASdumpAgent *agent, struct J9RASdu\n \t\tnewState |= J9RAS_DUMP_TRACE_DISABLED;\n \t}\n \n+\t/* Release vm access until this thread has the dumpKey and is ready to run. This will allow \n+\t * other threads to obtain exclusiveVMAccess in the meantime. */\n+\tvm->internalVMFunctions->internalReleaseVMAccess(vmThread);\n+\n+\t/*\n+\t * The following actions are considered safe to call during a crash situation...\n+\t */\n+\n+\t/* For fatal events, the first failing thread sets the global rasDumpFirstThread. It then gets higher priority on the\n+\t * serial dump lock, see below. This allows the first failing thread to complete its dumps and exit the VM, reducing\n+\t * the number of dumps written and out-time if multiple threads crash.\n+\t */\n+\tif (0 != (context->eventFlags & (J9RAS_DUMP_ON_GP_FAULT | J9RAS_DUMP_ON_ABORT_SIGNAL | J9RAS_DUMP_ON_TRACE_ASSERT))) {\n+\t\tcompareAndSwapUDATA(&rasDumpFirstThread, 0, dumpKey);\n+\t}\n+\n+\tif (rasDumpSuspendKey == dumpKey) {\n+\t\t/* We already have the lock */\n+\t} else {\n+\t\tUDATA newKey = 0;\n+\n+\t\t/* Grab the dump lock? */\n+\t\tif (agent->requestMask & J9RAS_DUMP_DO_SUSPEND_OTHER_DUMPS) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7b4ec673c57999d4bc1a72c07980365685a904f"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMDUwMDAzOnYy", "diffSide": "RIGHT", "path": "runtime/rasdump/trigger.c", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNzo0OToxN1rOGh__Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNzo0OToxN1rOGh__Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMwNDU5NQ==", "bodyText": "This should use J9_ARE_NO_BITS_SET().", "url": "https://github.com/eclipse-openj9/openj9/pull/9840#discussion_r438304595", "createdAt": "2020-06-10T17:49:17Z", "author": {"login": "keithc-ca"}, "path": "runtime/rasdump/trigger.c", "diffHunk": "@@ -555,6 +555,46 @@ prepareForDump(struct J9JavaVM *vm, struct J9RASdumpAgent *agent, struct J9RASdu\n \t\tnewState |= J9RAS_DUMP_TRACE_DISABLED;\n \t}\n \n+\t/* Release vm access until this thread has the dumpKey and is ready to run. This will allow \n+\t * other threads to obtain exclusiveVMAccess in the meantime. */\n+\tvm->internalVMFunctions->internalReleaseVMAccess(vmThread);\n+\n+\t/*\n+\t * The following actions are considered safe to call during a crash situation...\n+\t */\n+\n+\t/* For fatal events, the first failing thread sets the global rasDumpFirstThread. It then gets higher priority on the\n+\t * serial dump lock, see below. This allows the first failing thread to complete its dumps and exit the VM, reducing\n+\t * the number of dumps written and out-time if multiple threads crash.\n+\t */\n+\tif (0 != (context->eventFlags & (J9RAS_DUMP_ON_GP_FAULT | J9RAS_DUMP_ON_ABORT_SIGNAL | J9RAS_DUMP_ON_TRACE_ASSERT))) {\n+\t\tcompareAndSwapUDATA(&rasDumpFirstThread, 0, dumpKey);\n+\t}\n+\n+\tif (rasDumpSuspendKey == dumpKey) {\n+\t\t/* We already have the lock */\n+\t} else {\n+\t\tUDATA newKey = 0;\n+\n+\t\t/* Grab the dump lock? */\n+\t\tif (agent->requestMask & J9RAS_DUMP_DO_SUSPEND_OTHER_DUMPS) {\n+\t\t\tnewState |= J9RAS_DUMP_GOT_LOCK;\n+\t\t\tnewKey = dumpKey;\n+\t\t}\n+\n+\t\t/* Always wait for the lock, but only grab it when requested */\n+\t\twhile (compareAndSwapUDATA(&rasDumpSuspendKey, 0, newKey) != 0) {\n+\t\t\tif (rasDumpFirstThread == dumpKey) {\n+\t\t\t\t/* First failing thread gets a simple priority boost over other threads waiting for lock */\n+\t\t\t\tomrthread_sleep(20);\n+\t\t\t} else {\n+\t\t\t\tomrthread_sleep(200);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tvm->internalVMFunctions->internalAcquireVMAccess(vmThread);\n+\n \tif ((context->eventFlags & (J9RAS_DUMP_ON_GP_FAULT | J9RAS_DUMP_ON_ABORT_SIGNAL | J9RAS_DUMP_ON_TRACE_ASSERT)) == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7b4ec673c57999d4bc1a72c07980365685a904f"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMDgyMTYyOnYy", "diffSide": "RIGHT", "path": "runtime/rasdump/trigger.c", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxOToyNzoxN1rOGiDQRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMjoyODoyNlrOGiIYzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM1ODA4NA==", "bodyText": "We can't release vmaccess here as we don't know what state we're in.  The code below is setup to handle:\n\nunattached threads needing to attach (won't have vmaccess at this point)\nthreads that are \"inNative\"\nthreads that don't already have access\n\nThat code needs to run first to get to a stable state before we can modify the current thread's access", "url": "https://github.com/eclipse-openj9/openj9/pull/9840#discussion_r438358084", "createdAt": "2020-06-10T19:27:17Z", "author": {"login": "DanHeidinga"}, "path": "runtime/rasdump/trigger.c", "diffHunk": "@@ -555,6 +555,46 @@ prepareForDump(struct J9JavaVM *vm, struct J9RASdumpAgent *agent, struct J9RASdu\n \t\tnewState |= J9RAS_DUMP_TRACE_DISABLED;\n \t}\n \n+\t/* Release vm access until this thread has the dumpKey and is ready to run. This will allow \n+\t * other threads to obtain exclusiveVMAccess in the meantime. */\n+\tvm->internalVMFunctions->internalReleaseVMAccess(vmThread);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7b4ec673c57999d4bc1a72c07980365685a904f"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ0MjE4OA==", "bodyText": "I see the problem with that.\nFrom what I can tell though the vm access state is only being stabilized for the J9RAS_DUMP_DO_EXCLUSIVE_VM_ACCESS case here\nI think instead those cases can be checked before calling internalReleaseVMAccess here.", "url": "https://github.com/eclipse-openj9/openj9/pull/9840#discussion_r438442188", "createdAt": "2020-06-10T22:28:26Z", "author": {"login": "theresa-m"}, "path": "runtime/rasdump/trigger.c", "diffHunk": "@@ -555,6 +555,46 @@ prepareForDump(struct J9JavaVM *vm, struct J9RASdumpAgent *agent, struct J9RASdu\n \t\tnewState |= J9RAS_DUMP_TRACE_DISABLED;\n \t}\n \n+\t/* Release vm access until this thread has the dumpKey and is ready to run. This will allow \n+\t * other threads to obtain exclusiveVMAccess in the meantime. */\n+\tvm->internalVMFunctions->internalReleaseVMAccess(vmThread);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM1ODA4NA=="}, "originalCommit": {"oid": "c7b4ec673c57999d4bc1a72c07980365685a904f"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTY3Njc0OnYy", "diffSide": "RIGHT", "path": "runtime/rasdump/trigger.c", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMTozOTowMVrOGiLqkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwMzozNzo1NlrOGi1_3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ5NTg5MQ==", "bodyText": "This is closer but we still need to take isNative into account as I believe we have vmaccess but be in native.  @gacholio", "url": "https://github.com/eclipse-openj9/openj9/pull/9840#discussion_r438495891", "createdAt": "2020-06-11T01:39:01Z", "author": {"login": "DanHeidinga"}, "path": "runtime/rasdump/trigger.c", "diffHunk": "@@ -555,7 +556,53 @@ prepareForDump(struct J9JavaVM *vm, struct J9RASdumpAgent *agent, struct J9RASdu\n \t\tnewState |= J9RAS_DUMP_TRACE_DISABLED;\n \t}\n \n-\tif ((context->eventFlags & (J9RAS_DUMP_ON_GP_FAULT | J9RAS_DUMP_ON_ABORT_SIGNAL | J9RAS_DUMP_ON_TRACE_ASSERT)) == 0) {\n+\t/* Release vm access until this thread has the dumpKey and is ready to run. This will allow other threads to obtain exclusiveVMAccess in the meantime. */\n+\tif (vmThread) {\n+\t\tif (vmThread->publicFlags & J9_PUBLIC_FLAGS_VM_ACCESS) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea280e00050e08ceaed599bf44e55e8b700f2f6"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg2NjE5NA==", "bodyText": "I'll take a detailed look before the end of the week.", "url": "https://github.com/eclipse-openj9/openj9/pull/9840#discussion_r438866194", "createdAt": "2020-06-11T15:22:31Z", "author": {"login": "gacholio"}, "path": "runtime/rasdump/trigger.c", "diffHunk": "@@ -555,7 +556,53 @@ prepareForDump(struct J9JavaVM *vm, struct J9RASdumpAgent *agent, struct J9RASdu\n \t\tnewState |= J9RAS_DUMP_TRACE_DISABLED;\n \t}\n \n-\tif ((context->eventFlags & (J9RAS_DUMP_ON_GP_FAULT | J9RAS_DUMP_ON_ABORT_SIGNAL | J9RAS_DUMP_ON_TRACE_ASSERT)) == 0) {\n+\t/* Release vm access until this thread has the dumpKey and is ready to run. This will allow other threads to obtain exclusiveVMAccess in the meantime. */\n+\tif (vmThread) {\n+\t\tif (vmThread->publicFlags & J9_PUBLIC_FLAGS_VM_ACCESS) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ5NTg5MQ=="}, "originalCommit": {"oid": "7ea280e00050e08ceaed599bf44e55e8b700f2f6"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk4ODg5NA==", "bodyText": "There's code in here that's already assuming we're in the JNI context when this function is running (calls AttachCurrentThreadAsDaemon) - what is the actual context when this is called? There are 3 possibilities:\n\ninNative (i.e. JNI)\nnot inNative, have VM access\nnot inNative, don't have VM access", "url": "https://github.com/eclipse-openj9/openj9/pull/9840#discussion_r438988894", "createdAt": "2020-06-11T18:29:01Z", "author": {"login": "gacholio"}, "path": "runtime/rasdump/trigger.c", "diffHunk": "@@ -555,7 +556,53 @@ prepareForDump(struct J9JavaVM *vm, struct J9RASdumpAgent *agent, struct J9RASdu\n \t\tnewState |= J9RAS_DUMP_TRACE_DISABLED;\n \t}\n \n-\tif ((context->eventFlags & (J9RAS_DUMP_ON_GP_FAULT | J9RAS_DUMP_ON_ABORT_SIGNAL | J9RAS_DUMP_ON_TRACE_ASSERT)) == 0) {\n+\t/* Release vm access until this thread has the dumpKey and is ready to run. This will allow other threads to obtain exclusiveVMAccess in the meantime. */\n+\tif (vmThread) {\n+\t\tif (vmThread->publicFlags & J9_PUBLIC_FLAGS_VM_ACCESS) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ5NTg5MQ=="}, "originalCommit": {"oid": "7ea280e00050e08ceaed599bf44e55e8b700f2f6"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA4MTkzMA==", "bodyText": "ah. I see now the difference with inNative is with atomic_free_jni. I will update that case.", "url": "https://github.com/eclipse-openj9/openj9/pull/9840#discussion_r439081930", "createdAt": "2020-06-11T21:32:51Z", "author": {"login": "theresa-m"}, "path": "runtime/rasdump/trigger.c", "diffHunk": "@@ -555,7 +556,53 @@ prepareForDump(struct J9JavaVM *vm, struct J9RASdumpAgent *agent, struct J9RASdu\n \t\tnewState |= J9RAS_DUMP_TRACE_DISABLED;\n \t}\n \n-\tif ((context->eventFlags & (J9RAS_DUMP_ON_GP_FAULT | J9RAS_DUMP_ON_ABORT_SIGNAL | J9RAS_DUMP_ON_TRACE_ASSERT)) == 0) {\n+\t/* Release vm access until this thread has the dumpKey and is ready to run. This will allow other threads to obtain exclusiveVMAccess in the meantime. */\n+\tif (vmThread) {\n+\t\tif (vmThread->publicFlags & J9_PUBLIC_FLAGS_VM_ACCESS) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ5NTg5MQ=="}, "originalCommit": {"oid": "7ea280e00050e08ceaed599bf44e55e8b700f2f6"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA5NTc2MQ==", "bodyText": "updated.", "url": "https://github.com/eclipse-openj9/openj9/pull/9840#discussion_r439095761", "createdAt": "2020-06-11T22:00:25Z", "author": {"login": "theresa-m"}, "path": "runtime/rasdump/trigger.c", "diffHunk": "@@ -555,7 +556,53 @@ prepareForDump(struct J9JavaVM *vm, struct J9RASdumpAgent *agent, struct J9RASdu\n \t\tnewState |= J9RAS_DUMP_TRACE_DISABLED;\n \t}\n \n-\tif ((context->eventFlags & (J9RAS_DUMP_ON_GP_FAULT | J9RAS_DUMP_ON_ABORT_SIGNAL | J9RAS_DUMP_ON_TRACE_ASSERT)) == 0) {\n+\t/* Release vm access until this thread has the dumpKey and is ready to run. This will allow other threads to obtain exclusiveVMAccess in the meantime. */\n+\tif (vmThread) {\n+\t\tif (vmThread->publicFlags & J9_PUBLIC_FLAGS_VM_ACCESS) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ5NTg5MQ=="}, "originalCommit": {"oid": "7ea280e00050e08ceaed599bf44e55e8b700f2f6"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE4OTQ3MA==", "bodyText": "I'm wrong about the attach case - that's for a signal on a thread not attached to the VM at all (so not the typical \"JNI context\"). The code has to handle atomic-free in the same way as below - detect and save the state so it can be restored later.", "url": "https://github.com/eclipse-openj9/openj9/pull/9840#discussion_r439189470", "createdAt": "2020-06-12T03:37:56Z", "author": {"login": "gacholio"}, "path": "runtime/rasdump/trigger.c", "diffHunk": "@@ -555,7 +556,53 @@ prepareForDump(struct J9JavaVM *vm, struct J9RASdumpAgent *agent, struct J9RASdu\n \t\tnewState |= J9RAS_DUMP_TRACE_DISABLED;\n \t}\n \n-\tif ((context->eventFlags & (J9RAS_DUMP_ON_GP_FAULT | J9RAS_DUMP_ON_ABORT_SIGNAL | J9RAS_DUMP_ON_TRACE_ASSERT)) == 0) {\n+\t/* Release vm access until this thread has the dumpKey and is ready to run. This will allow other threads to obtain exclusiveVMAccess in the meantime. */\n+\tif (vmThread) {\n+\t\tif (vmThread->publicFlags & J9_PUBLIC_FLAGS_VM_ACCESS) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ5NTg5MQ=="}, "originalCommit": {"oid": "7ea280e00050e08ceaed599bf44e55e8b700f2f6"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNzA3MDAzOnYy", "diffSide": "RIGHT", "path": "runtime/rasdump/trigger.c", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMTozMzo0MFrOGjAx4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNjo1MjoxOFrOGjLB5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM2NjExMg==", "bodyText": "This is still not correct - please follow the pattern below.", "url": "https://github.com/eclipse-openj9/openj9/pull/9840#discussion_r439366112", "createdAt": "2020-06-12T11:33:40Z", "author": {"login": "gacholio"}, "path": "runtime/rasdump/trigger.c", "diffHunk": "@@ -555,7 +556,61 @@ prepareForDump(struct J9JavaVM *vm, struct J9RASdumpAgent *agent, struct J9RASdu\n \t\tnewState |= J9RAS_DUMP_TRACE_DISABLED;\n \t}\n \n-\tif ((context->eventFlags & (J9RAS_DUMP_ON_GP_FAULT | J9RAS_DUMP_ON_ABORT_SIGNAL | J9RAS_DUMP_ON_TRACE_ASSERT)) == 0) {\n+\t/* Release vm access until this thread has the dumpKey and is ready to run. This will allow other threads to obtain exclusiveVMAccess in the meantime. */\n+\tif (vmThread) {\n+\t\tif (J9_ARE_ANY_BITS_SET(vmThread->publicFlags, J9_PUBLIC_FLAGS_VM_ACCESS)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83a5c0476055905276ab3279be17c0117f960bf4"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQyNzg2OQ==", "bodyText": "Strictly speaking, you don't need to do anything if inNative is true - the thread will not block exclusive. That should simplify the code.\nif (!inNative) {\n   if (vm access) {\n      release and set your variable\n   }\n}", "url": "https://github.com/eclipse-openj9/openj9/pull/9840#discussion_r439427869", "createdAt": "2020-06-12T13:46:27Z", "author": {"login": "gacholio"}, "path": "runtime/rasdump/trigger.c", "diffHunk": "@@ -555,7 +556,61 @@ prepareForDump(struct J9JavaVM *vm, struct J9RASdumpAgent *agent, struct J9RASdu\n \t\tnewState |= J9RAS_DUMP_TRACE_DISABLED;\n \t}\n \n-\tif ((context->eventFlags & (J9RAS_DUMP_ON_GP_FAULT | J9RAS_DUMP_ON_ABORT_SIGNAL | J9RAS_DUMP_ON_TRACE_ASSERT)) == 0) {\n+\t/* Release vm access until this thread has the dumpKey and is ready to run. This will allow other threads to obtain exclusiveVMAccess in the meantime. */\n+\tif (vmThread) {\n+\t\tif (J9_ARE_ANY_BITS_SET(vmThread->publicFlags, J9_PUBLIC_FLAGS_VM_ACCESS)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM2NjExMg=="}, "originalCommit": {"oid": "83a5c0476055905276ab3279be17c0117f960bf4"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ2MTMzOA==", "bodyText": "And when reacquiring access, you need only check the local variable and call acquire - no need for any enter/exit VM in this change.\nIt's safe to check !inNative without an ifdef, as the field always exists and will always be 0 in VMs which have not been updated for atomic-free JNI.", "url": "https://github.com/eclipse-openj9/openj9/pull/9840#discussion_r439461338", "createdAt": "2020-06-12T14:42:03Z", "author": {"login": "gacholio"}, "path": "runtime/rasdump/trigger.c", "diffHunk": "@@ -555,7 +556,61 @@ prepareForDump(struct J9JavaVM *vm, struct J9RASdumpAgent *agent, struct J9RASdu\n \t\tnewState |= J9RAS_DUMP_TRACE_DISABLED;\n \t}\n \n-\tif ((context->eventFlags & (J9RAS_DUMP_ON_GP_FAULT | J9RAS_DUMP_ON_ABORT_SIGNAL | J9RAS_DUMP_ON_TRACE_ASSERT)) == 0) {\n+\t/* Release vm access until this thread has the dumpKey and is ready to run. This will allow other threads to obtain exclusiveVMAccess in the meantime. */\n+\tif (vmThread) {\n+\t\tif (J9_ARE_ANY_BITS_SET(vmThread->publicFlags, J9_PUBLIC_FLAGS_VM_ACCESS)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM2NjExMg=="}, "originalCommit": {"oid": "83a5c0476055905276ab3279be17c0117f960bf4"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUzNDA1NQ==", "bodyText": "Thanks for the review @gacholio I've updated the change with the pattern you suggested.", "url": "https://github.com/eclipse-openj9/openj9/pull/9840#discussion_r439534055", "createdAt": "2020-06-12T16:52:18Z", "author": {"login": "theresa-m"}, "path": "runtime/rasdump/trigger.c", "diffHunk": "@@ -555,7 +556,61 @@ prepareForDump(struct J9JavaVM *vm, struct J9RASdumpAgent *agent, struct J9RASdu\n \t\tnewState |= J9RAS_DUMP_TRACE_DISABLED;\n \t}\n \n-\tif ((context->eventFlags & (J9RAS_DUMP_ON_GP_FAULT | J9RAS_DUMP_ON_ABORT_SIGNAL | J9RAS_DUMP_ON_TRACE_ASSERT)) == 0) {\n+\t/* Release vm access until this thread has the dumpKey and is ready to run. This will allow other threads to obtain exclusiveVMAccess in the meantime. */\n+\tif (vmThread) {\n+\t\tif (J9_ARE_ANY_BITS_SET(vmThread->publicFlags, J9_PUBLIC_FLAGS_VM_ACCESS)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM2NjExMg=="}, "originalCommit": {"oid": "83a5c0476055905276ab3279be17c0117f960bf4"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNzY1MzIyOnYy", "diffSide": "RIGHT", "path": "runtime/rasdump/trigger.c", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNDozOTozMFrOGjGgAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNDozOTozMFrOGjGgAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ1OTg0MQ==", "bodyText": "Should be 0 !=", "url": "https://github.com/eclipse-openj9/openj9/pull/9840#discussion_r439459841", "createdAt": "2020-06-12T14:39:30Z", "author": {"login": "gacholio"}, "path": "runtime/rasdump/trigger.c", "diffHunk": "@@ -555,7 +556,61 @@ prepareForDump(struct J9JavaVM *vm, struct J9RASdumpAgent *agent, struct J9RASdu\n \t\tnewState |= J9RAS_DUMP_TRACE_DISABLED;\n \t}\n \n-\tif ((context->eventFlags & (J9RAS_DUMP_ON_GP_FAULT | J9RAS_DUMP_ON_ABORT_SIGNAL | J9RAS_DUMP_ON_TRACE_ASSERT)) == 0) {\n+\t/* Release vm access until this thread has the dumpKey and is ready to run. This will allow other threads to obtain exclusiveVMAccess in the meantime. */\n+\tif (vmThread) {\n+\t\tif (J9_ARE_ANY_BITS_SET(vmThread->publicFlags, J9_PUBLIC_FLAGS_VM_ACCESS)) {\n+\t\t\tif (vmThread->inNative) {\n+\t\t\t\tvm->internalVMFunctions->internalExitVMToJNI(vmThread);\n+\t\t\t} else {\n+\t\t\t\tvm->internalVMFunctions->internalReleaseVMAccess(vmThread);\n+\t\t\t}\n+\t\t\tacquireVMAccessAfterWait = TRUE;\n+\t\t}\n+\t}\n+\n+\t/*\n+\t * The following actions are considered safe to call during a crash situation...\n+\t */\n+\n+\t/* For fatal events, the first failing thread sets the global rasDumpFirstThread. It then gets higher priority on the\n+\t * serial dump lock, see below. This allows the first failing thread to complete its dumps and exit the VM, reducing\n+\t * the number of dumps written and out-time if multiple threads crash.\n+\t */\n+\tif (J9_ARE_ANY_BITS_SET(context->eventFlags, J9RAS_DUMP_ON_GP_FAULT | J9RAS_DUMP_ON_ABORT_SIGNAL | J9RAS_DUMP_ON_TRACE_ASSERT)) {\n+\t\tcompareAndSwapUDATA(&rasDumpFirstThread, 0, dumpKey);\n+\t}\n+\n+\tif (rasDumpSuspendKey == dumpKey) {\n+\t\t/* We already have the lock */\n+\t} else {\n+\t\tUDATA newKey = 0;\n+\n+\t\t/* Grab the dump lock? */\n+\t\tif (J9_ARE_ANY_BITS_SET(agent->requestMask, J9RAS_DUMP_DO_SUSPEND_OTHER_DUMPS)) {\n+\t\t\tnewState |= J9RAS_DUMP_GOT_LOCK;\n+\t\t\tnewKey = dumpKey;\n+\t\t}\n+\n+\t\t/* Always wait for the lock, but only grab it when requested */\n+\t\twhile (compareAndSwapUDATA(&rasDumpSuspendKey, 0, newKey) != 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83a5c0476055905276ab3279be17c0117f960bf4"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODE1NTI0OnYy", "diffSide": "RIGHT", "path": "runtime/rasdump/trigger.c", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzowNjo1MVrOGjLeSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzoyMToxNFrOGjL4kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0MTMyMw==", "bodyText": "I would prefer NULL != vmThread here, but the old-style is used throughout the file, so I won't insist.", "url": "https://github.com/eclipse-openj9/openj9/pull/9840#discussion_r439541323", "createdAt": "2020-06-12T17:06:51Z", "author": {"login": "gacholio"}, "path": "runtime/rasdump/trigger.c", "diffHunk": "@@ -555,7 +556,53 @@ prepareForDump(struct J9JavaVM *vm, struct J9RASdumpAgent *agent, struct J9RASdu\n \t\tnewState |= J9RAS_DUMP_TRACE_DISABLED;\n \t}\n \n-\tif ((context->eventFlags & (J9RAS_DUMP_ON_GP_FAULT | J9RAS_DUMP_ON_ABORT_SIGNAL | J9RAS_DUMP_ON_TRACE_ASSERT)) == 0) {\n+\t/* Release vm access until this thread has the dumpKey and is ready to run. This will allow other threads to obtain exclusiveVMAccess in the meantime. */\n+\tif (vmThread && !vmThread->inNative) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3164fc98a7e32cbcac6849c53c991d51e8a0661d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0ODA1MQ==", "bodyText": "updated with that change", "url": "https://github.com/eclipse-openj9/openj9/pull/9840#discussion_r439548051", "createdAt": "2020-06-12T17:21:14Z", "author": {"login": "theresa-m"}, "path": "runtime/rasdump/trigger.c", "diffHunk": "@@ -555,7 +556,53 @@ prepareForDump(struct J9JavaVM *vm, struct J9RASdumpAgent *agent, struct J9RASdu\n \t\tnewState |= J9RAS_DUMP_TRACE_DISABLED;\n \t}\n \n-\tif ((context->eventFlags & (J9RAS_DUMP_ON_GP_FAULT | J9RAS_DUMP_ON_ABORT_SIGNAL | J9RAS_DUMP_ON_TRACE_ASSERT)) == 0) {\n+\t/* Release vm access until this thread has the dumpKey and is ready to run. This will allow other threads to obtain exclusiveVMAccess in the meantime. */\n+\tif (vmThread && !vmThread->inNative) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0MTMyMw=="}, "originalCommit": {"oid": "3164fc98a7e32cbcac6849c53c991d51e8a0661d"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4989, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}