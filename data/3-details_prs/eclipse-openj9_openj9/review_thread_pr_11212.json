{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIyNzAwMzQw", "number": 11212, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwMzo0Njo0NFrOE6XWrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwNToxMzowNlrOE6Zumg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NjM1NTAwOnYy", "diffSide": "RIGHT", "path": "runtime/compiler/control/JITServerHelpers.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwMzo0Njo0NFrOH1ZO4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwNDozNzoyM1rOH1cIWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTc0OTk4NA==", "bodyText": "Here, size is the padded size. Is there a risk to copy past the end of the string and risk a crash?\nUnlikely though because the padding is at most 1.", "url": "https://github.com/eclipse-openj9/openj9/pull/11212#discussion_r525749984", "createdAt": "2020-11-18T03:46:44Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/control/JITServerHelpers.cpp", "diffHunk": "@@ -37,63 +37,88 @@ bool         JITServerHelpers::_serverAvailable = true;\n uint64_t     JITServerHelpers::_nextConnectionRetryTime = 0;\n TR::Monitor *JITServerHelpers::_clientStreamMonitor = NULL;\n \n+\n+// To ensure that the length fields in UTF8 strings appended at the end of the\n+// packed ROMClass are properly aligned, we must pad the strings accordingly.\n+// This function returns the total size of a UTF8 string with the padding.\n static size_t\n-methodStringsLength(J9ROMMethod *method)\n+getUTF8Size(const J9UTF8 *str)\n    {\n-   J9UTF8 *name = J9ROMMETHOD_NAME(method);\n-   J9UTF8 *sig = J9ROMMETHOD_SIGNATURE(method);\n-   return (name->length + sig->length + (2 * sizeof(U_16)));\n+   return OMR::alignNoCheck(str->length, sizeof(str->length)) + sizeof(str->length);\n+   }\n+\n+static size_t\n+getPackedUTF8Size(const J9UTF8 *str, const J9ROMClass *romClass)\n+   {\n+   return JITServerHelpers::isAddressInROMClass(str, romClass) ? 0 : getUTF8Size(str);\n+   }\n+\n+// If the string points outside of the contiguous part of origRomClass, appends\n+// it (with padding) at curPos and updates the SRP to the string in the packed\n+// ROMClass. Returns the new value of curPos.\n+static uint8_t *\n+packUTF8(uint8_t *curPos, const J9UTF8 *origStr, const J9ROMClass *origRomClass, J9SRP &srp)\n+   {\n+   if (JITServerHelpers::isAddressInROMClass(origStr, origRomClass))\n+      return curPos;\n+\n+   size_t size = getUTF8Size(origStr);\n+   memcpy(curPos, origStr, size);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6963c120cd7521140c381564dc2fbeafa601944"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTc5NzQ2NA==", "bodyText": "Good catch. I'll fix it.", "url": "https://github.com/eclipse-openj9/openj9/pull/11212#discussion_r525797464", "createdAt": "2020-11-18T04:37:23Z", "author": {"login": "AlexeyKhrabrov"}, "path": "runtime/compiler/control/JITServerHelpers.cpp", "diffHunk": "@@ -37,63 +37,88 @@ bool         JITServerHelpers::_serverAvailable = true;\n uint64_t     JITServerHelpers::_nextConnectionRetryTime = 0;\n TR::Monitor *JITServerHelpers::_clientStreamMonitor = NULL;\n \n+\n+// To ensure that the length fields in UTF8 strings appended at the end of the\n+// packed ROMClass are properly aligned, we must pad the strings accordingly.\n+// This function returns the total size of a UTF8 string with the padding.\n static size_t\n-methodStringsLength(J9ROMMethod *method)\n+getUTF8Size(const J9UTF8 *str)\n    {\n-   J9UTF8 *name = J9ROMMETHOD_NAME(method);\n-   J9UTF8 *sig = J9ROMMETHOD_SIGNATURE(method);\n-   return (name->length + sig->length + (2 * sizeof(U_16)));\n+   return OMR::alignNoCheck(str->length, sizeof(str->length)) + sizeof(str->length);\n+   }\n+\n+static size_t\n+getPackedUTF8Size(const J9UTF8 *str, const J9ROMClass *romClass)\n+   {\n+   return JITServerHelpers::isAddressInROMClass(str, romClass) ? 0 : getUTF8Size(str);\n+   }\n+\n+// If the string points outside of the contiguous part of origRomClass, appends\n+// it (with padding) at curPos and updates the SRP to the string in the packed\n+// ROMClass. Returns the new value of curPos.\n+static uint8_t *\n+packUTF8(uint8_t *curPos, const J9UTF8 *origStr, const J9ROMClass *origRomClass, J9SRP &srp)\n+   {\n+   if (JITServerHelpers::isAddressInROMClass(origStr, origRomClass))\n+      return curPos;\n+\n+   size_t size = getUTF8Size(origStr);\n+   memcpy(curPos, origStr, size);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTc0OTk4NA=="}, "originalCommit": {"oid": "a6963c120cd7521140c381564dc2fbeafa601944"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NjQxOTc2OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/control/JITServerHelpers.cpp", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwMzo1OTowOVrOH1Z9EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwNDo0NjoxM1rOH1coVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTc2MTgwOA==", "bodyText": "Is this the right comparison? alignedNoCheck can return 0 only when the length is 0.", "url": "https://github.com/eclipse-openj9/openj9/pull/11212#discussion_r525761808", "createdAt": "2020-11-18T03:59:09Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/control/JITServerHelpers.cpp", "diffHunk": "@@ -37,63 +37,88 @@ bool         JITServerHelpers::_serverAvailable = true;\n uint64_t     JITServerHelpers::_nextConnectionRetryTime = 0;\n TR::Monitor *JITServerHelpers::_clientStreamMonitor = NULL;\n \n+\n+// To ensure that the length fields in UTF8 strings appended at the end of the\n+// packed ROMClass are properly aligned, we must pad the strings accordingly.\n+// This function returns the total size of a UTF8 string with the padding.\n static size_t\n-methodStringsLength(J9ROMMethod *method)\n+getUTF8Size(const J9UTF8 *str)\n    {\n-   J9UTF8 *name = J9ROMMETHOD_NAME(method);\n-   J9UTF8 *sig = J9ROMMETHOD_SIGNATURE(method);\n-   return (name->length + sig->length + (2 * sizeof(U_16)));\n+   return OMR::alignNoCheck(str->length, sizeof(str->length)) + sizeof(str->length);\n+   }\n+\n+static size_t\n+getPackedUTF8Size(const J9UTF8 *str, const J9ROMClass *romClass)\n+   {\n+   return JITServerHelpers::isAddressInROMClass(str, romClass) ? 0 : getUTF8Size(str);\n+   }\n+\n+// If the string points outside of the contiguous part of origRomClass, appends\n+// it (with padding) at curPos and updates the SRP to the string in the packed\n+// ROMClass. Returns the new value of curPos.\n+static uint8_t *\n+packUTF8(uint8_t *curPos, const J9UTF8 *origStr, const J9ROMClass *origRomClass, J9SRP &srp)\n+   {\n+   if (JITServerHelpers::isAddressInROMClass(origStr, origRomClass))\n+      return curPos;\n+\n+   size_t size = getUTF8Size(origStr);\n+   memcpy(curPos, origStr, size);\n+   static_assert(sizeof(origStr->length) == 2, \"UTF8 length field is not 2 bytes large\");\n+   if (!OMR::alignedNoCheck(origStr->length, sizeof(origStr->length)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6963c120cd7521140c381564dc2fbeafa601944"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTc5NzY2MA==", "bodyText": "I think this is correct. This function returns true if its 1st argument is aligned on the 2nd.", "url": "https://github.com/eclipse-openj9/openj9/pull/11212#discussion_r525797660", "createdAt": "2020-11-18T04:37:37Z", "author": {"login": "AlexeyKhrabrov"}, "path": "runtime/compiler/control/JITServerHelpers.cpp", "diffHunk": "@@ -37,63 +37,88 @@ bool         JITServerHelpers::_serverAvailable = true;\n uint64_t     JITServerHelpers::_nextConnectionRetryTime = 0;\n TR::Monitor *JITServerHelpers::_clientStreamMonitor = NULL;\n \n+\n+// To ensure that the length fields in UTF8 strings appended at the end of the\n+// packed ROMClass are properly aligned, we must pad the strings accordingly.\n+// This function returns the total size of a UTF8 string with the padding.\n static size_t\n-methodStringsLength(J9ROMMethod *method)\n+getUTF8Size(const J9UTF8 *str)\n    {\n-   J9UTF8 *name = J9ROMMETHOD_NAME(method);\n-   J9UTF8 *sig = J9ROMMETHOD_SIGNATURE(method);\n-   return (name->length + sig->length + (2 * sizeof(U_16)));\n+   return OMR::alignNoCheck(str->length, sizeof(str->length)) + sizeof(str->length);\n+   }\n+\n+static size_t\n+getPackedUTF8Size(const J9UTF8 *str, const J9ROMClass *romClass)\n+   {\n+   return JITServerHelpers::isAddressInROMClass(str, romClass) ? 0 : getUTF8Size(str);\n+   }\n+\n+// If the string points outside of the contiguous part of origRomClass, appends\n+// it (with padding) at curPos and updates the SRP to the string in the packed\n+// ROMClass. Returns the new value of curPos.\n+static uint8_t *\n+packUTF8(uint8_t *curPos, const J9UTF8 *origStr, const J9ROMClass *origRomClass, J9SRP &srp)\n+   {\n+   if (JITServerHelpers::isAddressInROMClass(origStr, origRomClass))\n+      return curPos;\n+\n+   size_t size = getUTF8Size(origStr);\n+   memcpy(curPos, origStr, size);\n+   static_assert(sizeof(origStr->length) == 2, \"UTF8 length field is not 2 bytes large\");\n+   if (!OMR::alignedNoCheck(origStr->length, sizeof(origStr->length)))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTc2MTgwOA=="}, "originalCommit": {"oid": "a6963c120cd7521140c381564dc2fbeafa601944"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTgwNTY1Mw==", "bodyText": "Got it. I was actually looking at the definition of alignNoCheck instead of alignedNoCheck.", "url": "https://github.com/eclipse-openj9/openj9/pull/11212#discussion_r525805653", "createdAt": "2020-11-18T04:46:13Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/control/JITServerHelpers.cpp", "diffHunk": "@@ -37,63 +37,88 @@ bool         JITServerHelpers::_serverAvailable = true;\n uint64_t     JITServerHelpers::_nextConnectionRetryTime = 0;\n TR::Monitor *JITServerHelpers::_clientStreamMonitor = NULL;\n \n+\n+// To ensure that the length fields in UTF8 strings appended at the end of the\n+// packed ROMClass are properly aligned, we must pad the strings accordingly.\n+// This function returns the total size of a UTF8 string with the padding.\n static size_t\n-methodStringsLength(J9ROMMethod *method)\n+getUTF8Size(const J9UTF8 *str)\n    {\n-   J9UTF8 *name = J9ROMMETHOD_NAME(method);\n-   J9UTF8 *sig = J9ROMMETHOD_SIGNATURE(method);\n-   return (name->length + sig->length + (2 * sizeof(U_16)));\n+   return OMR::alignNoCheck(str->length, sizeof(str->length)) + sizeof(str->length);\n+   }\n+\n+static size_t\n+getPackedUTF8Size(const J9UTF8 *str, const J9ROMClass *romClass)\n+   {\n+   return JITServerHelpers::isAddressInROMClass(str, romClass) ? 0 : getUTF8Size(str);\n+   }\n+\n+// If the string points outside of the contiguous part of origRomClass, appends\n+// it (with padding) at curPos and updates the SRP to the string in the packed\n+// ROMClass. Returns the new value of curPos.\n+static uint8_t *\n+packUTF8(uint8_t *curPos, const J9UTF8 *origStr, const J9ROMClass *origRomClass, J9SRP &srp)\n+   {\n+   if (JITServerHelpers::isAddressInROMClass(origStr, origRomClass))\n+      return curPos;\n+\n+   size_t size = getUTF8Size(origStr);\n+   memcpy(curPos, origStr, size);\n+   static_assert(sizeof(origStr->length) == 2, \"UTF8 length field is not 2 bytes large\");\n+   if (!OMR::alignedNoCheck(origStr->length, sizeof(origStr->length)))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTc2MTgwOA=="}, "originalCommit": {"oid": "a6963c120cd7521140c381564dc2fbeafa601944"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NjQ4Mjk4OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/control/JITServerHelpers.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwNDoxMTozNVrOH1ap-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwNDozODowMlrOH1cKfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTc3MzMwNQ==", "bodyText": "We didn't do this before. Was this a bug?", "url": "https://github.com/eclipse-openj9/openj9/pull/11212#discussion_r525773305", "createdAt": "2020-11-18T04:11:35Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/control/JITServerHelpers.cpp", "diffHunk": "@@ -37,63 +37,88 @@ bool         JITServerHelpers::_serverAvailable = true;\n uint64_t     JITServerHelpers::_nextConnectionRetryTime = 0;\n TR::Monitor *JITServerHelpers::_clientStreamMonitor = NULL;\n \n+\n+// To ensure that the length fields in UTF8 strings appended at the end of the\n+// packed ROMClass are properly aligned, we must pad the strings accordingly.\n+// This function returns the total size of a UTF8 string with the padding.\n static size_t\n-methodStringsLength(J9ROMMethod *method)\n+getUTF8Size(const J9UTF8 *str)\n    {\n-   J9UTF8 *name = J9ROMMETHOD_NAME(method);\n-   J9UTF8 *sig = J9ROMMETHOD_SIGNATURE(method);\n-   return (name->length + sig->length + (2 * sizeof(U_16)));\n+   return OMR::alignNoCheck(str->length, sizeof(str->length)) + sizeof(str->length);\n+   }\n+\n+static size_t\n+getPackedUTF8Size(const J9UTF8 *str, const J9ROMClass *romClass)\n+   {\n+   return JITServerHelpers::isAddressInROMClass(str, romClass) ? 0 : getUTF8Size(str);\n+   }\n+\n+// If the string points outside of the contiguous part of origRomClass, appends\n+// it (with padding) at curPos and updates the SRP to the string in the packed\n+// ROMClass. Returns the new value of curPos.\n+static uint8_t *\n+packUTF8(uint8_t *curPos, const J9UTF8 *origStr, const J9ROMClass *origRomClass, J9SRP &srp)\n+   {\n+   if (JITServerHelpers::isAddressInROMClass(origStr, origRomClass))\n+      return curPos;\n+\n+   size_t size = getUTF8Size(origStr);\n+   memcpy(curPos, origStr, size);\n+   static_assert(sizeof(origStr->length) == 2, \"UTF8 length field is not 2 bytes large\");\n+   if (!OMR::alignedNoCheck(origStr->length, sizeof(origStr->length)))\n+      curPos[size - 1] = '\\0';\n+   NNSRP_SET(srp, curPos);\n+   return curPos + size;\n    }\n \n // Packs a ROMClass into a std::string to be transferred to the server.\n-// The name and signature of all methods are appended to the end of the cloned class body and the\n-// self referential pointers to them are updated to deal with possible interning. The method names\n-// and signature are needed on the server but may be interned globally on the client.\n+// Some of the name and signature strings are interned and stored outside\n+// of the ROMClass body. Such strings are appended to the end of the cloned\n+// ROMClass body and the self referential pointers to them are updated.\n static std::string\n packROMClass(J9ROMClass *origRomClass, TR_Memory *trMemory)\n    {\n+   size_t totalSize = origRomClass->romSize;\n    J9UTF8 *className = J9ROMCLASS_CLASSNAME(origRomClass);\n-   size_t classNameSize = className->length + sizeof(U_16);\n+   totalSize += getPackedUTF8Size(className, origRomClass);\n \n    J9ROMMethod *romMethod = J9ROMCLASS_ROMMETHODS(origRomClass);\n-   size_t totalSize = origRomClass->romSize + classNameSize;\n    for (size_t i = 0; i < origRomClass->romMethodCount; ++i)\n       {\n-      totalSize += methodStringsLength(romMethod);\n+      totalSize += getPackedUTF8Size(J9ROMMETHOD_NAME(romMethod), origRomClass);\n+      totalSize += getPackedUTF8Size(J9ROMMETHOD_SIGNATURE(romMethod), origRomClass);\n       romMethod = nextROMMethod(romMethod);\n       }\n \n+   // Check if the contiguous part of the ROMClass already contains all the strings visited above\n+   if (totalSize == origRomClass->romSize)\n+      return std::string((char *)origRomClass, origRomClass->romSize);\n+\n    J9ROMClass *romClass = (J9ROMClass *)trMemory->allocateHeapMemory(totalSize);\n    if (!romClass)\n       throw std::bad_alloc();\n    memcpy(romClass, origRomClass, origRomClass->romSize);\n+   // Update the size to include the strings that will be appended at the end\n+   romClass->romSize = totalSize;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6963c120cd7521140c381564dc2fbeafa601944"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTc5ODAxNQ==", "bodyText": "Yes, but it didn't actually lead to any problems since these strings are only accessed directly and without checking that they are within the ROMClass bounds.", "url": "https://github.com/eclipse-openj9/openj9/pull/11212#discussion_r525798015", "createdAt": "2020-11-18T04:38:02Z", "author": {"login": "AlexeyKhrabrov"}, "path": "runtime/compiler/control/JITServerHelpers.cpp", "diffHunk": "@@ -37,63 +37,88 @@ bool         JITServerHelpers::_serverAvailable = true;\n uint64_t     JITServerHelpers::_nextConnectionRetryTime = 0;\n TR::Monitor *JITServerHelpers::_clientStreamMonitor = NULL;\n \n+\n+// To ensure that the length fields in UTF8 strings appended at the end of the\n+// packed ROMClass are properly aligned, we must pad the strings accordingly.\n+// This function returns the total size of a UTF8 string with the padding.\n static size_t\n-methodStringsLength(J9ROMMethod *method)\n+getUTF8Size(const J9UTF8 *str)\n    {\n-   J9UTF8 *name = J9ROMMETHOD_NAME(method);\n-   J9UTF8 *sig = J9ROMMETHOD_SIGNATURE(method);\n-   return (name->length + sig->length + (2 * sizeof(U_16)));\n+   return OMR::alignNoCheck(str->length, sizeof(str->length)) + sizeof(str->length);\n+   }\n+\n+static size_t\n+getPackedUTF8Size(const J9UTF8 *str, const J9ROMClass *romClass)\n+   {\n+   return JITServerHelpers::isAddressInROMClass(str, romClass) ? 0 : getUTF8Size(str);\n+   }\n+\n+// If the string points outside of the contiguous part of origRomClass, appends\n+// it (with padding) at curPos and updates the SRP to the string in the packed\n+// ROMClass. Returns the new value of curPos.\n+static uint8_t *\n+packUTF8(uint8_t *curPos, const J9UTF8 *origStr, const J9ROMClass *origRomClass, J9SRP &srp)\n+   {\n+   if (JITServerHelpers::isAddressInROMClass(origStr, origRomClass))\n+      return curPos;\n+\n+   size_t size = getUTF8Size(origStr);\n+   memcpy(curPos, origStr, size);\n+   static_assert(sizeof(origStr->length) == 2, \"UTF8 length field is not 2 bytes large\");\n+   if (!OMR::alignedNoCheck(origStr->length, sizeof(origStr->length)))\n+      curPos[size - 1] = '\\0';\n+   NNSRP_SET(srp, curPos);\n+   return curPos + size;\n    }\n \n // Packs a ROMClass into a std::string to be transferred to the server.\n-// The name and signature of all methods are appended to the end of the cloned class body and the\n-// self referential pointers to them are updated to deal with possible interning. The method names\n-// and signature are needed on the server but may be interned globally on the client.\n+// Some of the name and signature strings are interned and stored outside\n+// of the ROMClass body. Such strings are appended to the end of the cloned\n+// ROMClass body and the self referential pointers to them are updated.\n static std::string\n packROMClass(J9ROMClass *origRomClass, TR_Memory *trMemory)\n    {\n+   size_t totalSize = origRomClass->romSize;\n    J9UTF8 *className = J9ROMCLASS_CLASSNAME(origRomClass);\n-   size_t classNameSize = className->length + sizeof(U_16);\n+   totalSize += getPackedUTF8Size(className, origRomClass);\n \n    J9ROMMethod *romMethod = J9ROMCLASS_ROMMETHODS(origRomClass);\n-   size_t totalSize = origRomClass->romSize + classNameSize;\n    for (size_t i = 0; i < origRomClass->romMethodCount; ++i)\n       {\n-      totalSize += methodStringsLength(romMethod);\n+      totalSize += getPackedUTF8Size(J9ROMMETHOD_NAME(romMethod), origRomClass);\n+      totalSize += getPackedUTF8Size(J9ROMMETHOD_SIGNATURE(romMethod), origRomClass);\n       romMethod = nextROMMethod(romMethod);\n       }\n \n+   // Check if the contiguous part of the ROMClass already contains all the strings visited above\n+   if (totalSize == origRomClass->romSize)\n+      return std::string((char *)origRomClass, origRomClass->romSize);\n+\n    J9ROMClass *romClass = (J9ROMClass *)trMemory->allocateHeapMemory(totalSize);\n    if (!romClass)\n       throw std::bad_alloc();\n    memcpy(romClass, origRomClass, origRomClass->romSize);\n+   // Update the size to include the strings that will be appended at the end\n+   romClass->romSize = totalSize;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTc3MzMwNQ=="}, "originalCommit": {"oid": "a6963c120cd7521140c381564dc2fbeafa601944"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5Njc0Mzk0OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/control/JITServerHelpers.cpp", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwNToxMzowNlrOH1ddxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMzozMTo1M1rOH1t7Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTgxOTMzMg==", "bodyText": "Don't we add too much now? sizeof(*str) is 4 so we pad payload to be a multiple of 4 and then add another 4 bytes", "url": "https://github.com/eclipse-openj9/openj9/pull/11212#discussion_r525819332", "createdAt": "2020-11-18T05:13:06Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/control/JITServerHelpers.cpp", "diffHunk": "@@ -37,63 +37,88 @@ bool         JITServerHelpers::_serverAvailable = true;\n uint64_t     JITServerHelpers::_nextConnectionRetryTime = 0;\n TR::Monitor *JITServerHelpers::_clientStreamMonitor = NULL;\n \n+\n+// To ensure that the length fields in UTF8 strings appended at the end of the\n+// packed ROMClass are properly aligned, we must pad the strings accordingly.\n+// This function returns the total size of a UTF8 string with the padding.\n static size_t\n-methodStringsLength(J9ROMMethod *method)\n+getUTF8Size(const J9UTF8 *str)\n    {\n-   J9UTF8 *name = J9ROMMETHOD_NAME(method);\n-   J9UTF8 *sig = J9ROMMETHOD_SIGNATURE(method);\n-   return (name->length + sig->length + (2 * sizeof(U_16)));\n+   return OMR::alignNoCheck(str->length, sizeof(*str)) + sizeof(*str);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e52aab4a853bf5d562fa5f5deb16233fd42cd07"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTgyMTMxOQ==", "bodyText": "sizeof(*str) == sizeof(J9UTF8) == sizeof(J9UTF8::length) == 2. This function returns the size of the whole thing, including the header. The only change I made here was to use sizeof(J9UTF8) instead of sizeof(J9UTF8::length) because it exposes less details about J9UTF8 internals.", "url": "https://github.com/eclipse-openj9/openj9/pull/11212#discussion_r525821319", "createdAt": "2020-11-18T05:20:23Z", "author": {"login": "AlexeyKhrabrov"}, "path": "runtime/compiler/control/JITServerHelpers.cpp", "diffHunk": "@@ -37,63 +37,88 @@ bool         JITServerHelpers::_serverAvailable = true;\n uint64_t     JITServerHelpers::_nextConnectionRetryTime = 0;\n TR::Monitor *JITServerHelpers::_clientStreamMonitor = NULL;\n \n+\n+// To ensure that the length fields in UTF8 strings appended at the end of the\n+// packed ROMClass are properly aligned, we must pad the strings accordingly.\n+// This function returns the total size of a UTF8 string with the padding.\n static size_t\n-methodStringsLength(J9ROMMethod *method)\n+getUTF8Size(const J9UTF8 *str)\n    {\n-   J9UTF8 *name = J9ROMMETHOD_NAME(method);\n-   J9UTF8 *sig = J9ROMMETHOD_SIGNATURE(method);\n-   return (name->length + sig->length + (2 * sizeof(U_16)));\n+   return OMR::alignNoCheck(str->length, sizeof(*str)) + sizeof(*str);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTgxOTMzMg=="}, "originalCommit": {"oid": "3e52aab4a853bf5d562fa5f5deb16233fd42cd07"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjA4OTAwMw==", "bodyText": "Right. My IDE found me another definition in genBinaryBlob.hpp\n\ttypedef struct J9UTF8 {\n\t\tuint16_t length;\n\t\tuint8_t data[2];\n\t} J9UTF8;\n\nwhich may be used for DDR?", "url": "https://github.com/eclipse-openj9/openj9/pull/11212#discussion_r526089003", "createdAt": "2020-11-18T13:31:53Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/control/JITServerHelpers.cpp", "diffHunk": "@@ -37,63 +37,88 @@ bool         JITServerHelpers::_serverAvailable = true;\n uint64_t     JITServerHelpers::_nextConnectionRetryTime = 0;\n TR::Monitor *JITServerHelpers::_clientStreamMonitor = NULL;\n \n+\n+// To ensure that the length fields in UTF8 strings appended at the end of the\n+// packed ROMClass are properly aligned, we must pad the strings accordingly.\n+// This function returns the total size of a UTF8 string with the padding.\n static size_t\n-methodStringsLength(J9ROMMethod *method)\n+getUTF8Size(const J9UTF8 *str)\n    {\n-   J9UTF8 *name = J9ROMMETHOD_NAME(method);\n-   J9UTF8 *sig = J9ROMMETHOD_SIGNATURE(method);\n-   return (name->length + sig->length + (2 * sizeof(U_16)));\n+   return OMR::alignNoCheck(str->length, sizeof(*str)) + sizeof(*str);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTgxOTMzMg=="}, "originalCommit": {"oid": "3e52aab4a853bf5d562fa5f5deb16233fd42cd07"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 938, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}