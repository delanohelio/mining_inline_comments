{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzNjkwNTYw", "number": 8978, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMDo0NDowMFrODsOMuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMDo0NjozMlrODsOPNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3Njk2NTY4OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/runtime/JITServerIProfiler.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMDo0NDowMFrOF9BRLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMDo0NDowMFrOF9BRLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUyODIzOA==", "bodyText": "Small tweak: take this increment out of the for loop and at the end just add serialEntry->_callerCount=callerIdx;", "url": "https://github.com/eclipse-openj9/openj9/pull/8978#discussion_r399528238", "createdAt": "2020-03-27T20:44:00Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/runtime/JITServerIProfiler.cpp", "diffHunk": "@@ -91,26 +88,25 @@ JITServerIProfiler::deserializeMethodEntry(TR_ContiguousIPMethodHashTableEntry *\n    return entry;\n    }\n \n-TR_ContiguousIPMethodHashTableEntry\n-TR_ContiguousIPMethodHashTableEntry::serialize(TR_IPMethodHashTableEntry *entry)\n+void\n+TR_ContiguousIPMethodHashTableEntry::serialize(TR_IPMethodHashTableEntry *entry, TR_ContiguousIPMethodHashTableEntry *serialEntry)\n    {\n-   TR_ContiguousIPMethodHashTableEntry serialEntry;\n-   memset(&serialEntry, 0, sizeof(TR_ContiguousIPMethodHashTableEntry));\n-   serialEntry._method = entry->_method;\n-   serialEntry._otherBucket = entry->_otherBucket;\n+   serialEntry->_method = entry->_method;\n+   serialEntry->_otherBucket = entry->_otherBucket;\n+   serialEntry->_callerCount = 0;\n \n    size_t callerIdx = 0;\n    for (TR_IPMethodData *caller = &entry->_caller; caller; caller = caller->next)\n       {\n       if (callerIdx >= TR_IPMethodHashTableEntry::MAX_IPMETHOD_CALLERS)\n          break;\n-      auto &serialCaller = serialEntry._callers[callerIdx];\n+      auto &serialCaller = serialEntry->_callers[callerIdx];\n       serialCaller._method = caller->getMethod();\n       serialCaller._pcIndex = caller->getPCIndex();\n       serialCaller._weight = caller->getWeight();\n+      serialEntry->_callerCount++;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c53986ccaf0546987daecaeba2a9acbb3f1fb13c"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3Njk3MjA0OnYy", "diffSide": "RIGHT", "path": "runtime/compiler/runtime/JITServerIProfiler.cpp", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMDo0NjozMlrOF9BVVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzoxMDozNVrOF9zwdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUyOTMwMg==", "bodyText": "reserve will not work here because the size of the string is not adjusted. We need to do std::string entryStr(sizeof(TR_ContiguousIPMethodHashTableEntry), 0)\nAn alternative is to resize the string before calling serialize:\nentryStr.resize(sizeof(TR_ContiguousIPMethodHashTableEntry))` which fills it with 0 as well\nWe could also another resize after the string is filled because we know how many entries are stored. This will limit the amount of empty data transferred to and from network.", "url": "https://github.com/eclipse-openj9/openj9/pull/8978#discussion_r399529302", "createdAt": "2020-03-27T20:46:32Z", "author": {"login": "mpirvu"}, "path": "runtime/compiler/runtime/JITServerIProfiler.cpp", "diffHunk": "@@ -803,8 +799,11 @@ JITClientIProfiler::serializeIProfilerMethodEntry(TR_OpaqueMethodBlock *omb)\n    auto entry = findOrCreateMethodEntry(NULL, (J9Method *) omb, false);\n    if (entry)\n       {\n-      auto serialEntry = TR_ContiguousIPMethodHashTableEntry::serialize(entry);\n-      std::string entryStr((char *) &serialEntry, sizeof(TR_ContiguousIPMethodHashTableEntry));\n+      std::string entryStr;\n+      entryStr.reserve(sizeof(TR_ContiguousIPMethodHashTableEntry));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c53986ccaf0546987daecaeba2a9acbb3f1fb13c"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM1NTQ0NQ==", "bodyText": "Ok, used a different constructor", "url": "https://github.com/eclipse-openj9/openj9/pull/8978#discussion_r400355445", "createdAt": "2020-03-30T17:10:35Z", "author": {"login": "dmitry-ten"}, "path": "runtime/compiler/runtime/JITServerIProfiler.cpp", "diffHunk": "@@ -803,8 +799,11 @@ JITClientIProfiler::serializeIProfilerMethodEntry(TR_OpaqueMethodBlock *omb)\n    auto entry = findOrCreateMethodEntry(NULL, (J9Method *) omb, false);\n    if (entry)\n       {\n-      auto serialEntry = TR_ContiguousIPMethodHashTableEntry::serialize(entry);\n-      std::string entryStr((char *) &serialEntry, sizeof(TR_ContiguousIPMethodHashTableEntry));\n+      std::string entryStr;\n+      entryStr.reserve(sizeof(TR_ContiguousIPMethodHashTableEntry));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUyOTMwMg=="}, "originalCommit": {"oid": "c53986ccaf0546987daecaeba2a9acbb3f1fb13c"}, "originalPosition": 53}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 434, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}