{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwNzIxMjY1", "number": 11182, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMjoyNzowN1rOE420OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMjowNTo1M1rOE7Q4IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDUzODE3OnYy", "diffSide": "RIGHT", "path": "jcl/src/java.base/share/classes/java/lang/invoke/VarHandle.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMjoyNzowN1rOHzBm8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQwMDo0MDozNFrOHzDzEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI2NTc3OQ==", "bodyText": "Is this need for 14+ or just 16+?", "url": "https://github.com/eclipse-openj9/openj9/pull/11182#discussion_r523265779", "createdAt": "2020-11-13T22:27:07Z", "author": {"login": "tajila"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/VarHandle.java", "diffHunk": "@@ -343,6 +343,7 @@ MethodType accessModeType(Class<?> receiver, Class<?> type, Class<?>... args) {\n /*[IF Java14]*/\n \tstatic final BiFunction<String, List<Integer>, ArrayIndexOutOfBoundsException> AIOOBE_SUPPLIER = null;\n \tVarForm vform = null;\n+\tfinal boolean exact;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce31783860936f9ccac65a816023b032fe2d21ee"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI5ODAyMQ==", "bodyText": "The addition of the exact field impacts a constructor [VarHandle(VarForm varForm)] which was introduced in Java 14. In order to avoid duplication of the constructor (100+ lines of code), the field is surrounded using the Java14 flag.", "url": "https://github.com/eclipse-openj9/openj9/pull/11182#discussion_r523298021", "createdAt": "2020-11-14T00:22:19Z", "author": {"login": "babsingh"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/VarHandle.java", "diffHunk": "@@ -343,6 +343,7 @@ MethodType accessModeType(Class<?> receiver, Class<?> type, Class<?>... args) {\n /*[IF Java14]*/\n \tstatic final BiFunction<String, List<Integer>, ArrayIndexOutOfBoundsException> AIOOBE_SUPPLIER = null;\n \tVarForm vform = null;\n+\tfinal boolean exact;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI2NTc3OQ=="}, "originalCommit": {"oid": "ce31783860936f9ccac65a816023b032fe2d21ee"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzMwMTY1MQ==", "bodyText": "Now, all the new changes are only enabled for Java16.", "url": "https://github.com/eclipse-openj9/openj9/pull/11182#discussion_r523301651", "createdAt": "2020-11-14T00:40:34Z", "author": {"login": "babsingh"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/VarHandle.java", "diffHunk": "@@ -343,6 +343,7 @@ MethodType accessModeType(Class<?> receiver, Class<?> type, Class<?>... args) {\n /*[IF Java14]*/\n \tstatic final BiFunction<String, List<Integer>, ArrayIndexOutOfBoundsException> AIOOBE_SUPPLIER = null;\n \tVarForm vform = null;\n+\tfinal boolean exact;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI2NTc3OQ=="}, "originalCommit": {"oid": "ce31783860936f9ccac65a816023b032fe2d21ee"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDU0NjcwOnYy", "diffSide": "RIGHT", "path": "jcl/src/java.base/share/classes/java/lang/invoke/VarHandle.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMjozMDo1OVrOHzBr5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQwMDo0MDozOFrOHzDzGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI2NzA0NQ==", "bodyText": "Java 14 is out of service, I would suggest use Java15 instead. The block containing final boolean exact; can be decorated with /*[IF Java15]*/ as well and combined with the immediate following /*[IF Java15]*/ block.", "url": "https://github.com/eclipse-openj9/openj9/pull/11182#discussion_r523267045", "createdAt": "2020-11-13T22:30:59Z", "author": {"login": "JasonFengJ9"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/VarHandle.java", "diffHunk": "@@ -371,6 +372,9 @@ MethodType accessModeType(Class<?> receiver, Class<?> type, Class<?>... args) {\n \t\tthis.coordinateTypes = coordinateTypes;\n \t\tthis.handleTable = handleTable;\n \t\tthis.modifiers = modifiers;\n+/*[IF Java14]*/\n+\t\tthis.exact = false;\n+/*[ENDIF] Java14 */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce31783860936f9ccac65a816023b032fe2d21ee"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI5ODA1MA==", "bodyText": "Refer to #11182 (comment).", "url": "https://github.com/eclipse-openj9/openj9/pull/11182#discussion_r523298050", "createdAt": "2020-11-14T00:22:32Z", "author": {"login": "babsingh"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/VarHandle.java", "diffHunk": "@@ -371,6 +372,9 @@ MethodType accessModeType(Class<?> receiver, Class<?> type, Class<?>... args) {\n \t\tthis.coordinateTypes = coordinateTypes;\n \t\tthis.handleTable = handleTable;\n \t\tthis.modifiers = modifiers;\n+/*[IF Java14]*/\n+\t\tthis.exact = false;\n+/*[ENDIF] Java14 */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI2NzA0NQ=="}, "originalCommit": {"oid": "ce31783860936f9ccac65a816023b032fe2d21ee"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzMwMTY1OQ==", "bodyText": "Now, all the new changes are only enabled for Java16.", "url": "https://github.com/eclipse-openj9/openj9/pull/11182#discussion_r523301659", "createdAt": "2020-11-14T00:40:38Z", "author": {"login": "babsingh"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/VarHandle.java", "diffHunk": "@@ -371,6 +372,9 @@ MethodType accessModeType(Class<?> receiver, Class<?> type, Class<?>... args) {\n \t\tthis.coordinateTypes = coordinateTypes;\n \t\tthis.handleTable = handleTable;\n \t\tthis.modifiers = modifiers;\n+/*[IF Java14]*/\n+\t\tthis.exact = false;\n+/*[ENDIF] Java14 */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI2NzA0NQ=="}, "originalCommit": {"oid": "ce31783860936f9ccac65a816023b032fe2d21ee"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NDMxNzcxOnYy", "diffSide": "RIGHT", "path": "jcl/src/java.base/share/classes/java/lang/invoke/ArrayVarHandle.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQyMjoxNzowNlrOHzjjiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQyMjoxNzowNlrOHzjjiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzgyMTk2Mw==", "bodyText": "The method name isn't changed, just the argument type which can be JPP decorated instead.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /*[ENDIF] Java16 */\n          \n          \n            \n            \tpublic MethodType accessModeTypeUncached(\n          \n          \n            \n            /*[IF Java16]*/\n          \n          \n            \n                       AccessType type\n          \n          \n            \n            /*[ELSE]*/\n          \n          \n            \n            \t   AccessMode accessMode\n          \n          \n            \n            /*[ENDIF] Java16 */\n          \n          \n            \n            \t) {\n          \n          \n            \n            \t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n          \n          \n            \n            \t}\n          \n      \n    \n    \n  \n\nCan this be moved into java.lang.invoke.VarHandle to avoid duplicate code within FieldVarHandle and ViewVarHandle?", "url": "https://github.com/eclipse-openj9/openj9/pull/11182#discussion_r523821963", "createdAt": "2020-11-15T22:17:06Z", "author": {"login": "JasonFengJ9"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/ArrayVarHandle.java", "diffHunk": "@@ -119,9 +119,25 @@\n \t}\n /*[ENDIF] Java12 */\n \n+/*[IF Java16]*/\n+\tpublic MethodType accessModeTypeUncached(AccessType type) {\n+\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n+\t}\n+/*[ELSE]*/\n \tpublic MethodType accessModeTypeUncached(AccessMode accessMode) {\n \t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n \t}\n+/*[ENDIF] Java16 */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc25ede2598036746db00090f5a8013ad6769d59"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NDMxODE1OnYy", "diffSide": "RIGHT", "path": "jcl/src/java.base/share/classes/java/lang/invoke/ArrayVarHandle.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQyMjoxNzozNFrOHzjjww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQyMjoxNzozNFrOHzjjww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzgyMjAxOQ==", "bodyText": "Similarly can this code block be moved into java.lang.invoke.VarHandle as well?", "url": "https://github.com/eclipse-openj9/openj9/pull/11182#discussion_r523822019", "createdAt": "2020-11-15T22:17:34Z", "author": {"login": "JasonFengJ9"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/ArrayVarHandle.java", "diffHunk": "@@ -119,9 +119,25 @@\n \t}\n /*[ENDIF] Java12 */\n \n+/*[IF Java16]*/\n+\tpublic MethodType accessModeTypeUncached(AccessType type) {\n+\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n+\t}\n+/*[ELSE]*/\n \tpublic MethodType accessModeTypeUncached(AccessMode accessMode) {\n \t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n \t}\n+/*[ENDIF] Java16 */\n+\n+/*[IF Java16]*/\n+\tpublic VarHandle withInvokeExactBehavior() {\n+\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n+\t}\n+\n+\tpublic VarHandle withInvokeBehavior() {\n+\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n+\t}\n+/*[ENDIF] Java16 */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc25ede2598036746db00090f5a8013ad6769d59"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NDMxODM2OnYy", "diffSide": "RIGHT", "path": "jcl/src/java.base/share/classes/java/lang/invoke/VarHandle.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQyMjoxNzo1MFrOHzjj3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQyMjoxNzo1MFrOHzjj3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzgyMjA0Nw==", "bodyText": "Considering the difference is the argument, I would suggest\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /*[ENDIF] Java16 */\n          \n          \n            \n            Class<?> receiverActual = accessModeTypeUncached(\n          \n          \n            \n            /*[IF Java16]*/\n          \n          \n            \n              AccessMode.GET.at\n          \n          \n            \n            /*[ELSE]*/\n          \n          \n            \n            AccessMode.GET\n          \n          \n            \n            /*[ENDIF] Java16 */\n          \n          \n            \n            ).parameterType(0);", "url": "https://github.com/eclipse-openj9/openj9/pull/11182#discussion_r523822047", "createdAt": "2020-11-15T22:17:50Z", "author": {"login": "JasonFengJ9"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/VarHandle.java", "diffHunk": "@@ -394,7 +414,11 @@ MethodType accessModeType(Class<?> receiver, Class<?> type, Class<?>... args) {\n \t\t\tint numAccessModes = accessModes.length;\n \t\n \t\t\t/* The first argument in AccessType.GET MethodType is the receiver class. */\n+/*[IF Java16]*/\n+\t\t\tClass<?> receiverActual = accessModeTypeUncached(AccessMode.GET.at).parameterType(0);\n+/*[ELSE]*/\n \t\t\tClass<?> receiverActual = accessModeTypeUncached(AccessMode.GET).parameterType(0);\n+/*[ENDIF] Java16 */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc25ede2598036746db00090f5a8013ad6769d59"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4ODMxMDE0OnYy", "diffSide": "LEFT", "path": "jcl/src/java.base/share/classes/java/lang/invoke/ArrayVarHandle.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNzoyOTowMFrOH0JqCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMjowODowN1rOH0WoGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ0NjIxNw==", "bodyText": "This is changed from public to package access which might be problematic.", "url": "https://github.com/eclipse-openj9/openj9/pull/11182#discussion_r524446217", "createdAt": "2020-11-16T17:29:00Z", "author": {"login": "JasonFengJ9"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/ArrayVarHandle.java", "diffHunk": "@@ -119,10 +119,6 @@\n \t}\n /*[ENDIF] Java12 */\n \n-\tpublic MethodType accessModeTypeUncached(AccessMode accessMode) {\n-\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n-\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b98cfcde476c5257c615fc418d42ecf34f02269"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDY1ODcxMw==", "bodyText": "https://download.java.net/java/early_access/jdk16/docs/api/java.base/java/lang/invoke/VarHandle.html\nAccording to the above Java doc, VarHandle.accessModeTypeUncached is not public. OpenJ9 classes, which extend the abstract Varhandle class, made it public but those OpenJ9 classes are not subject to the compliance (signature) test. Making accessModeTypeUncached public in the abstract VarHandle class will break the compliance (signature) test. So, we should keep VarHandle.accessModeTypeUncached package-protected as per the current changes.", "url": "https://github.com/eclipse-openj9/openj9/pull/11182#discussion_r524658713", "createdAt": "2020-11-16T22:08:07Z", "author": {"login": "babsingh"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/ArrayVarHandle.java", "diffHunk": "@@ -119,10 +119,6 @@\n \t}\n /*[ENDIF] Java12 */\n \n-\tpublic MethodType accessModeTypeUncached(AccessMode accessMode) {\n-\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n-\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ0NjIxNw=="}, "originalCommit": {"oid": "6b98cfcde476c5257c615fc418d42ecf34f02269"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4ODYxMDI0OnYy", "diffSide": "RIGHT", "path": "jcl/src/java.base/share/classes/java/lang/invoke/VarHandle.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxODo0NDozOVrOH0MhxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMjowMzoxMlrOH0WK4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ5MzI1Mg==", "bodyText": "withInvokeExactBehavior & withInvokeBehavior are public API, they are abstract as per https://download.java.net/java/early_access/jdk16/docs/api/java.base/java/lang/invoke/VarHandle.html#withInvokeBehavior()", "url": "https://github.com/eclipse-openj9/openj9/pull/11182#discussion_r524493252", "createdAt": "2020-11-16T18:44:39Z", "author": {"login": "JasonFengJ9"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/VarHandle.java", "diffHunk": "@@ -1692,5 +1733,32 @@ MethodHandle getMethodHandle(int i) {\n \t}\n /*[ENDIF] Java15 | OPENJDK_METHODHANDLES */\n \n-\tabstract MethodType accessModeTypeUncached(AccessMode accessMode);\n+\tMethodType accessModeTypeUncached(\n+\t\t/*[IF Java16]*/\n+\t\tAccessType type\n+\t\t/*[ELSE]*/\n+\t\tAccessMode accessMode\n+\t\t/*[ENDIF] Java16 */\n+\t) {\n+\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n+\t}\n+\n+/*[IF Java16]*/\n+\tfinal MethodType accessModeTypeUncached(int index) {\n+\t\treturn accessModeTypeUncached(AccessType.values()[index]);\n+\t}\n+\n+\tpublic VarHandle withInvokeExactBehavior() {\n+\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n+\t}\n+\n+\tpublic VarHandle withInvokeBehavior() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b98cfcde476c5257c615fc418d42ecf34f02269"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDY1MTIzNA==", "bodyText": "Java 16 builds are not fully supported yet. So, it is not possible to verify the impact of changing abstract methods to concrete methods in the VarHandle class. These changes should not break any OpenJ9 testing so they can be accepted in its current state. Any other issues can be addressed once Java 16 builds are fully functional.", "url": "https://github.com/eclipse-openj9/openj9/pull/11182#discussion_r524651234", "createdAt": "2020-11-16T22:03:12Z", "author": {"login": "babsingh"}, "path": "jcl/src/java.base/share/classes/java/lang/invoke/VarHandle.java", "diffHunk": "@@ -1692,5 +1733,32 @@ MethodHandle getMethodHandle(int i) {\n \t}\n /*[ENDIF] Java15 | OPENJDK_METHODHANDLES */\n \n-\tabstract MethodType accessModeTypeUncached(AccessMode accessMode);\n+\tMethodType accessModeTypeUncached(\n+\t\t/*[IF Java16]*/\n+\t\tAccessType type\n+\t\t/*[ELSE]*/\n+\t\tAccessMode accessMode\n+\t\t/*[ENDIF] Java16 */\n+\t) {\n+\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n+\t}\n+\n+/*[IF Java16]*/\n+\tfinal MethodType accessModeTypeUncached(int index) {\n+\t\treturn accessModeTypeUncached(AccessType.values()[index]);\n+\t}\n+\n+\tpublic VarHandle withInvokeExactBehavior() {\n+\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n+\t}\n+\n+\tpublic VarHandle withInvokeBehavior() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ5MzI1Mg=="}, "originalCommit": {"oid": "6b98cfcde476c5257c615fc418d42ecf34f02269"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNTc3OTUzOnYy", "diffSide": "RIGHT", "path": "runtime/jcl/common/jdk_internal_misc_ScopedMemoryAccess.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMjowNTo1M1rOH2zyeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNDo1ODoxNlrOH290Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIzMzY1Ng==", "bodyText": "Is this native actually invoked? assert(!\"Java_jdk_internal_misc_ScopedMemoryAccess_closeScope0 is unimplemented\") can indicate this is a stub, otherwise, an issue could be opened to track the actual implementation.", "url": "https://github.com/eclipse-openj9/openj9/pull/11182#discussion_r527233656", "createdAt": "2020-11-19T22:05:53Z", "author": {"login": "JasonFengJ9"}, "path": "runtime/jcl/common/jdk_internal_misc_ScopedMemoryAccess.cpp", "diffHunk": "@@ -0,0 +1,46 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+\n+#include \"jni.h\"\n+#include \"jcl.h\"\n+#include \"jclglob.h\"\n+#include \"jclprots.h\"\n+#include \"jcl_internal.h\"\n+\n+extern \"C\" {\n+\n+#if JAVA_SPEC_VERSION >= 16\n+void JNICALL\n+Java_jdk_internal_misc_ScopedMemoryAccess_registerNatives(JNIEnv *env, jclass clazz)\n+{\n+\t/* TODO: Add implementation. */\n+}\n+\n+jboolean JNICALL\n+Java_jdk_internal_misc_ScopedMemoryAccess_closeScope0(JNIEnv *env, jobject instance, jobject scope, jobject exception)\n+{\n+\t/* TODO: Add implementation. */\n+\treturn JNI_FALSE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d453278e753c0b2e99a57b79183a656d60cb11f4"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM5NzkwNg==", "bodyText": "The assertion has been added. The implementation of the stubs and associated test failures are tracked through #11027 (JEP393). Refer to the latest update for more details: #11027 (comment).\n\nScopedMemoryAccess_registerNatives: should not assert; stays empty since our tooling handles the registration of Java native methods.\nScopedMemoryAccess_closeScope0: now, throws an assertion; needs an implementation.", "url": "https://github.com/eclipse-openj9/openj9/pull/11182#discussion_r527397906", "createdAt": "2020-11-20T04:58:16Z", "author": {"login": "babsingh"}, "path": "runtime/jcl/common/jdk_internal_misc_ScopedMemoryAccess.cpp", "diffHunk": "@@ -0,0 +1,46 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+\n+#include \"jni.h\"\n+#include \"jcl.h\"\n+#include \"jclglob.h\"\n+#include \"jclprots.h\"\n+#include \"jcl_internal.h\"\n+\n+extern \"C\" {\n+\n+#if JAVA_SPEC_VERSION >= 16\n+void JNICALL\n+Java_jdk_internal_misc_ScopedMemoryAccess_registerNatives(JNIEnv *env, jclass clazz)\n+{\n+\t/* TODO: Add implementation. */\n+}\n+\n+jboolean JNICALL\n+Java_jdk_internal_misc_ScopedMemoryAccess_closeScope0(JNIEnv *env, jobject instance, jobject scope, jobject exception)\n+{\n+\t/* TODO: Add implementation. */\n+\treturn JNI_FALSE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIzMzY1Ng=="}, "originalCommit": {"oid": "d453278e753c0b2e99a57b79183a656d60cb11f4"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 919, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}