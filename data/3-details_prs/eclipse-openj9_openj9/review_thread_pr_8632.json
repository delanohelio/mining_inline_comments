{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4NDM0Mjg5", "number": 8632, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMDowNjozMVrODh_2YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMjoxODo1NlrODif4Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTc1NzEyOnYy", "diffSide": "RIGHT", "path": "runtime/shared_common/CompositeCache.cpp", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMDowNjozMVrOFtDIvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMTo0MTo0N1rOFtw5VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc4MTYyOQ==", "bodyText": "This isn't a fix, you can use compare and swap to fix it.", "url": "https://github.com/eclipse-openj9/openj9/pull/8632#discussion_r382781629", "createdAt": "2020-02-21T20:06:31Z", "author": {"login": "pshipton"}, "path": "runtime/shared_common/CompositeCache.cpp", "diffHunk": "@@ -6813,7 +6813,7 @@ SH_CompositeCacheImpl::updateRuntimeFullFlags(J9VMThread *currentThread)\n \tif (_readOnlyOSCache || J9_ARE_ALL_BITS_SET(*_runtimeFlags, J9SHR_RUNTIMEFLAG_ENABLE_READONLY)) {\n \t\tgoto done;\n \t}\n-\n+\tcacheFullFlags = _theca->cacheFullFlags;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c95e1a463684c0c70c6b1994422326dcb38a908f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgwMDE4OA==", "bodyText": "You mean compare and swap on local variable cacheFullFlags ?", "url": "https://github.com/eclipse-openj9/openj9/pull/8632#discussion_r382800188", "createdAt": "2020-02-21T20:52:35Z", "author": {"login": "hangshao0"}, "path": "runtime/shared_common/CompositeCache.cpp", "diffHunk": "@@ -6813,7 +6813,7 @@ SH_CompositeCacheImpl::updateRuntimeFullFlags(J9VMThread *currentThread)\n \tif (_readOnlyOSCache || J9_ARE_ALL_BITS_SET(*_runtimeFlags, J9SHR_RUNTIMEFLAG_ENABLE_READONLY)) {\n \t\tgoto done;\n \t}\n-\n+\tcacheFullFlags = _theca->cacheFullFlags;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc4MTYyOQ=="}, "originalCommit": {"oid": "c95e1a463684c0c70c6b1994422326dcb38a908f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgwNTMwNA==", "bodyText": "The time window I find in the old code is between line 6802 and line 6817. Line 6802 got a value of 0 from  _theca->cacheFullFlags.  When doing comparison at line 6817, both _theca->cacheFullFlags and _cacheFullFlags are changed by another thread. The current thread is still using a cached cacheFullFlags which is 0 .", "url": "https://github.com/eclipse-openj9/openj9/pull/8632#discussion_r382805304", "createdAt": "2020-02-21T21:05:18Z", "author": {"login": "hangshao0"}, "path": "runtime/shared_common/CompositeCache.cpp", "diffHunk": "@@ -6813,7 +6813,7 @@ SH_CompositeCacheImpl::updateRuntimeFullFlags(J9VMThread *currentThread)\n \tif (_readOnlyOSCache || J9_ARE_ALL_BITS_SET(*_runtimeFlags, J9SHR_RUNTIMEFLAG_ENABLE_READONLY)) {\n \t\tgoto done;\n \t}\n-\n+\tcacheFullFlags = _theca->cacheFullFlags;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc4MTYyOQ=="}, "originalCommit": {"oid": "c95e1a463684c0c70c6b1994422326dcb38a908f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg0NDAzMA==", "bodyText": "Compare and swap can be used to combine the test _cacheFullFlags == cacheFullFlags and the assignment _cacheFullFlags = cacheFullFlags into one atomic operation. Sounds like the fetch of _theca->cacheFullFlags, the test and the assignment need to be protected by a monitor. Is the code that changed _theca->cacheFullFlags in another thread using any monitor?", "url": "https://github.com/eclipse-openj9/openj9/pull/8632#discussion_r382844030", "createdAt": "2020-02-21T22:53:16Z", "author": {"login": "pshipton"}, "path": "runtime/shared_common/CompositeCache.cpp", "diffHunk": "@@ -6813,7 +6813,7 @@ SH_CompositeCacheImpl::updateRuntimeFullFlags(J9VMThread *currentThread)\n \tif (_readOnlyOSCache || J9_ARE_ALL_BITS_SET(*_runtimeFlags, J9SHR_RUNTIMEFLAG_ENABLE_READONLY)) {\n \t\tgoto done;\n \t}\n-\n+\tcacheFullFlags = _theca->cacheFullFlags;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc4MTYyOQ=="}, "originalCommit": {"oid": "c95e1a463684c0c70c6b1994422326dcb38a908f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM4NTQ0OA==", "bodyText": "The other thread is changing _theca->cacheFullFlags, _cacheFullFlags  and the runtime flags here:\nhttps://github.com/eclipse/openj9/blob/master/runtime/shared_common/CompositeCache.cpp#L6142to#L6150\nIt is not using a monitor. But it is inside the write mutex.\nWe shouldn't cache the obsolete _theca->cacheFullFlags value to the local variable cacheFullFlags and use the obsolete value to update the runtime flags.  I think we should fetch the latest _theca->cacheFullFlags to update the runtime flags.", "url": "https://github.com/eclipse-openj9/openj9/pull/8632#discussion_r383385448", "createdAt": "2020-02-24T16:50:55Z", "author": {"login": "hangshao0"}, "path": "runtime/shared_common/CompositeCache.cpp", "diffHunk": "@@ -6813,7 +6813,7 @@ SH_CompositeCacheImpl::updateRuntimeFullFlags(J9VMThread *currentThread)\n \tif (_readOnlyOSCache || J9_ARE_ALL_BITS_SET(*_runtimeFlags, J9SHR_RUNTIMEFLAG_ENABLE_READONLY)) {\n \t\tgoto done;\n \t}\n-\n+\tcacheFullFlags = _theca->cacheFullFlags;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc4MTYyOQ=="}, "originalCommit": {"oid": "c95e1a463684c0c70c6b1994422326dcb38a908f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ5MTI3Ng==", "bodyText": "Since a thread switch can occur at any time, and the cpu is free to move code around somewhat, changing the source to move the fetch of _theca->cacheFullFlags closer to the test isn't a proper fix. Some kind of synchronization needs to be used to guarantee consistent results.", "url": "https://github.com/eclipse-openj9/openj9/pull/8632#discussion_r383491276", "createdAt": "2020-02-24T20:16:59Z", "author": {"login": "pshipton"}, "path": "runtime/shared_common/CompositeCache.cpp", "diffHunk": "@@ -6813,7 +6813,7 @@ SH_CompositeCacheImpl::updateRuntimeFullFlags(J9VMThread *currentThread)\n \tif (_readOnlyOSCache || J9_ARE_ALL_BITS_SET(*_runtimeFlags, J9SHR_RUNTIMEFLAG_ENABLE_READONLY)) {\n \t\tgoto done;\n \t}\n-\n+\tcacheFullFlags = _theca->cacheFullFlags;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc4MTYyOQ=="}, "originalCommit": {"oid": "c95e1a463684c0c70c6b1994422326dcb38a908f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUzMTM0OA==", "bodyText": "Moved the setting of _cacheFullFlags and its comparison against\n_theca->cacheFullFlags inside _runtimeFlagsProtectMutex.", "url": "https://github.com/eclipse-openj9/openj9/pull/8632#discussion_r383531348", "createdAt": "2020-02-24T21:41:47Z", "author": {"login": "hangshao0"}, "path": "runtime/shared_common/CompositeCache.cpp", "diffHunk": "@@ -6813,7 +6813,7 @@ SH_CompositeCacheImpl::updateRuntimeFullFlags(J9VMThread *currentThread)\n \tif (_readOnlyOSCache || J9_ARE_ALL_BITS_SET(*_runtimeFlags, J9SHR_RUNTIMEFLAG_ENABLE_READONLY)) {\n \t\tgoto done;\n \t}\n-\n+\tcacheFullFlags = _theca->cacheFullFlags;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc4MTYyOQ=="}, "originalCommit": {"oid": "c95e1a463684c0c70c6b1994422326dcb38a908f"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTAwNDgyOnYy", "diffSide": "RIGHT", "path": "runtime/shared_common/CompositeCache.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMjoxODo1NlrOFtx8TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMjoxOTozM1rOFtx9Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU0ODQ5Mw==", "bodyText": "I don't see the corresponding omrthread_monitor_exit()", "url": "https://github.com/eclipse-openj9/openj9/pull/8632#discussion_r383548493", "createdAt": "2020-02-24T22:18:56Z", "author": {"login": "pshipton"}, "path": "runtime/shared_common/CompositeCache.cpp", "diffHunk": "@@ -6813,16 +6813,19 @@ SH_CompositeCacheImpl::updateRuntimeFullFlags(J9VMThread *currentThread)\n \tif (_readOnlyOSCache || J9_ARE_ALL_BITS_SET(*_runtimeFlags, J9SHR_RUNTIMEFLAG_ENABLE_READONLY)) {\n \t\tgoto done;\n \t}\n-\n-\tif (_cacheFullFlags == cacheFullFlags) {\n+\t\n+\t/* It is possible we take _headerProtectMutex inside _runtimeFlagsProtectMutex.\n+\t * So assert we do not hold _headerProtectMutex before taking _runtimeFlagsProtectMutex.\n+\t */\n+\tTrc_SHR_Assert_True(1 != omrthread_monitor_owned_by_self(_headerProtectMutex));\n+\tomrthread_monitor_enter(_runtimeFlagsProtectMutex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b4d136b98813a83276c6f2a5e6a612003d55a71"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU0ODc1OQ==", "bodyText": "nm, it's already there.", "url": "https://github.com/eclipse-openj9/openj9/pull/8632#discussion_r383548759", "createdAt": "2020-02-24T22:19:33Z", "author": {"login": "pshipton"}, "path": "runtime/shared_common/CompositeCache.cpp", "diffHunk": "@@ -6813,16 +6813,19 @@ SH_CompositeCacheImpl::updateRuntimeFullFlags(J9VMThread *currentThread)\n \tif (_readOnlyOSCache || J9_ARE_ALL_BITS_SET(*_runtimeFlags, J9SHR_RUNTIMEFLAG_ENABLE_READONLY)) {\n \t\tgoto done;\n \t}\n-\n-\tif (_cacheFullFlags == cacheFullFlags) {\n+\t\n+\t/* It is possible we take _headerProtectMutex inside _runtimeFlagsProtectMutex.\n+\t * So assert we do not hold _headerProtectMutex before taking _runtimeFlagsProtectMutex.\n+\t */\n+\tTrc_SHR_Assert_True(1 != omrthread_monitor_owned_by_self(_headerProtectMutex));\n+\tomrthread_monitor_enter(_runtimeFlagsProtectMutex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU0ODQ5Mw=="}, "originalCommit": {"oid": "5b4d136b98813a83276c6f2a5e6a612003d55a71"}, "originalPosition": 82}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 604, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}