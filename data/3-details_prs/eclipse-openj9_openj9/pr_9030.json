{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2MDEwNzU2", "number": 9030, "title": "IL Generation for defaultvalue bytecode instruction", "bodyText": "This change adds prototype IL generation support for the value type defaultvalue bytecode in the case where the class specified is resolved.  If the class is unresolved, the JIT compilation is aborted with an UnsupportedValueTypeOperation exception.", "createdAt": "2020-03-31T01:49:36Z", "url": "https://github.com/eclipse-openj9/openj9/pull/9030", "merged": true, "mergeCommit": {"oid": "06fa4ce85ed4632d1723a1ad346b8e00e9269b60"}, "closed": true, "closedAt": "2020-04-02T14:46:42Z", "author": {"login": "hzongaro"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcTXexKAFqTM4NTU2OTM2OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcTc87UAFqTM4NTg4OTE1NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1NTY5MzY5", "url": "https://github.com/eclipse-openj9/openj9/pull/9030#pullrequestreview-385569369", "createdAt": "2020-04-01T13:12:04Z", "commit": {"oid": "b9a23471bc975f5e2a458fa276b0e8a6d73d9665"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1NjMzNDc3", "url": "https://github.com/eclipse-openj9/openj9/pull/9030#pullrequestreview-385633477", "createdAt": "2020-04-01T14:21:14Z", "commit": {"oid": "b9a23471bc975f5e2a458fa276b0e8a6d73d9665"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNDoyMToxNFrOF_C-Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNDoyMTo1NlrOF_DAbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY1MzMxNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tcase 'Q':\n          \n          \n            \n            \t\t\tcase 'L': next = J9_NATIVE_TYPE_OBJECT; break;\n          \n          \n            \n            \t\t\tcase 'Q': /* FALLTHROUGH */\n          \n          \n            \n            \t\t\tcase 'L': next = J9_NATIVE_TYPE_OBJECT; break;", "url": "https://github.com/eclipse-openj9/openj9/pull/9030#discussion_r401653315", "createdAt": "2020-04-01T14:21:14Z", "author": {"login": "DanHeidinga"}, "path": "runtime/jit_vm/ctsupport.cpp", "diffHunk": "@@ -202,6 +202,7 @@ jitParseSignature (const J9UTF8 *signature, U_8 *paramBuffer, UDATA *paramElemen\n \t\t\tstate = returnValue;\n \t\t} else {\n \t\t\tswitch (*sigChar) {\n+\t\t\tcase 'Q':\n \t\t\tcase 'L': next = J9_NATIVE_TYPE_OBJECT; break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9a23471bc975f5e2a458fa276b0e8a6d73d9665"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY1Mzg3MA==", "bodyText": "It's a minor thing but we try to label all fall throughs explicitly so that future refactoring doesn't mess up the logic", "url": "https://github.com/eclipse-openj9/openj9/pull/9030#discussion_r401653870", "createdAt": "2020-04-01T14:21:56Z", "author": {"login": "DanHeidinga"}, "path": "runtime/jit_vm/ctsupport.cpp", "diffHunk": "@@ -202,6 +202,7 @@ jitParseSignature (const J9UTF8 *signature, U_8 *paramBuffer, UDATA *paramElemen\n \t\t\tstate = returnValue;\n \t\t} else {\n \t\t\tswitch (*sigChar) {\n+\t\t\tcase 'Q':\n \t\t\tcase 'L': next = J9_NATIVE_TYPE_OBJECT; break;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY1MzMxNQ=="}, "originalCommit": {"oid": "b9a23471bc975f5e2a458fa276b0e8a6d73d9665"}, "originalPosition": 12}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b9a23471bc975f5e2a458fa276b0e8a6d73d9665", "author": {"user": {"login": "hzongaro", "name": "Henry Zongaro"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/b9a23471bc975f5e2a458fa276b0e8a6d73d9665", "committedDate": "2020-03-30T20:54:31Z", "message": "Prototype ILGen for defaultvalue bytecode\n\nFor a defaultvalue bytecode, if the class is resolved, generate a\nnewvalue instruction with default values for the fields as operands.\nRecursively generate a newvalue for any fields that are themselves\nvalue types.\n\nThe JIT compiler is not yet able to handle the case of an unresolved\nclass used in a defaultvalue bytecode instruction.  Simply fail the\ncompilation during ILGen if an unresolved class is encountered in that\nsituation.  The failure is reported as an\nUnsupportedValueTypeOperation exception.  The intention is that these\ncan be replaced with OSR points in the future.\n\nIn order to track the frequency with which we are failing compilations\ndue to encountering unresolved classes during IL generation for the\ndefaultvalue bytecode, use static debug counters that begin with\nthe string \"ilgen.abort/unresolved/defaultvalue\".\n\nSigned-off-by:  Henry Zongaro <zongaro@ca.ibm.com>"}, "afterCommit": {"oid": "79d5737f576f71b23feb7b26c750e43ec478a4dc", "author": {"user": {"login": "hzongaro", "name": "Henry Zongaro"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/79d5737f576f71b23feb7b26c750e43ec478a4dc", "committedDate": "2020-04-01T18:46:08Z", "message": "Prototype ILGen for defaultvalue bytecode\n\nFor a defaultvalue bytecode, if the class is resolved, generate a\nnewvalue instruction with default values for the fields as operands.\nRecursively generate a newvalue for any fields that are themselves\nvalue types.\n\nThe JIT compiler is not yet able to handle the case of an unresolved\nclass used in a defaultvalue bytecode instruction.  Simply fail the\ncompilation during ILGen if an unresolved class is encountered in that\nsituation.  The failure is reported as an\nUnsupportedValueTypeOperation exception.  The intention is that these\ncan be replaced with OSR points in the future.\n\nIn order to track the frequency with which we are failing compilations\ndue to encountering unresolved classes during IL generation for the\ndefaultvalue bytecode, use static debug counters that begin with\nthe string \"ilgen.abort/unresolved/defaultvalue\".\n\nSigned-off-by:  Henry Zongaro <zongaro@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1ODY3NTY1", "url": "https://github.com/eclipse-openj9/openj9/pull/9030#pullrequestreview-385867565", "createdAt": "2020-04-01T19:02:55Z", "commit": {"oid": "3035978a9c3537369135101af6f1a232a4316e05"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxOTowMjo1NVrOF_Ohpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxOTowMjo1NVrOF_Ohpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg0MjU5OQ==", "bodyText": "Minor nitpick:  We usually avoid // comments in vm code even though they'll compile on all platforms in c++\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // VALHALLA_TODO:  Need to return a J9_NATIVE_TYPE_VALUE for 'Q' in future\n          \n          \n            \n            \t\t\tcase 'Q': /* FALLTHROUGH */\n          \n          \n            \n            \t\t\tcase 'Q': \n          \n          \n            \n            \t\t\t\t/* VALHALLA_TODO:  Need to return a J9_NATIVE_TYPE_VALUE for 'Q' in future */\n          \n          \n            \n            \t\t\t\t/* FALLTHROUGH */", "url": "https://github.com/eclipse-openj9/openj9/pull/9030#discussion_r401842599", "createdAt": "2020-04-01T19:02:55Z", "author": {"login": "DanHeidinga"}, "path": "runtime/jit_vm/ctsupport.cpp", "diffHunk": "@@ -202,6 +202,8 @@ jitParseSignature (const J9UTF8 *signature, U_8 *paramBuffer, UDATA *paramElemen\n \t\t\tstate = returnValue;\n \t\t} else {\n \t\t\tswitch (*sigChar) {\n+// VALHALLA_TODO:  Need to return a J9_NATIVE_TYPE_VALUE for 'Q' in future\n+\t\t\tcase 'Q': /* FALLTHROUGH */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3035978a9c3537369135101af6f1a232a4316e05"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1ODY4MDg1", "url": "https://github.com/eclipse-openj9/openj9/pull/9030#pullrequestreview-385868085", "createdAt": "2020-04-01T19:03:45Z", "commit": {"oid": "3035978a9c3537369135101af6f1a232a4316e05"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxOTowMzo0NVrOF_OjWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxOTowMzo0NVrOF_OjWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg0MzAzNQ==", "bodyText": "Should this Q have a similar comment added?", "url": "https://github.com/eclipse-openj9/openj9/pull/9030#discussion_r401843035", "createdAt": "2020-04-01T19:03:45Z", "author": {"login": "DanHeidinga"}, "path": "runtime/compiler/env/J9ClassEnv.cpp", "diffHunk": "@@ -449,7 +449,8 @@ J9::ClassEnv::enumerateFields(TR::Region& region, TR_OpaqueClassBlock * opaqueCl\n             dataType = TR::Double;\n             break;\n             }\n-         case 'L': \n+         case 'L':\n+         case 'Q':", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3035978a9c3537369135101af6f1a232a4316e05"}, "originalPosition": 6}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3035978a9c3537369135101af6f1a232a4316e05", "author": {"user": {"login": "hzongaro", "name": "Henry Zongaro"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/3035978a9c3537369135101af6f1a232a4316e05", "committedDate": "2020-04-01T18:52:55Z", "message": "Add TODO comment"}, "afterCommit": {"oid": "2af5c522e64c8f873dc1dff34a0d59390fbb8444", "author": {"user": {"login": "hzongaro", "name": "Henry Zongaro"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/2af5c522e64c8f873dc1dff34a0d59390fbb8444", "committedDate": "2020-04-01T19:05:55Z", "message": "Prototype ILGen for defaultvalue bytecode\n\nFor a defaultvalue bytecode, if the class is resolved, generate a\nnewvalue instruction with default values for the fields as operands.\nRecursively generate a newvalue for any fields that are themselves\nvalue types.\n\nThe JIT compiler is not yet able to handle the case of an unresolved\nclass used in a defaultvalue bytecode instruction.  Simply fail the\ncompilation during ILGen if an unresolved class is encountered in that\nsituation.  The failure is reported as an\nUnsupportedValueTypeOperation exception.  The intention is that these\ncan be replaced with OSR points in the future.\n\nIn order to track the frequency with which we are failing compilations\ndue to encountering unresolved classes during IL generation for the\ndefaultvalue bytecode, use static debug counters that begin with\nthe string \"ilgen.abort/unresolved/defaultvalue\".\n\nSigned-off-by:  Henry Zongaro <zongaro@ca.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ee52776a8d558c3cc5035146d868a5bb9fbcce3", "author": {"user": {"login": "hzongaro", "name": "Henry Zongaro"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/4ee52776a8d558c3cc5035146d868a5bb9fbcce3", "committedDate": "2020-04-01T19:28:47Z", "message": "Check for Q as prefix for value type classes\n\nThe experimental value types support uses the letter Q before the class\nname for a value type class.  This change handles the following cases:\n\n1) In building a TR:TypeLayout in J9ClassEnv.cpp, treat a field that\n   has Q before a class name as being of type TR::Address.\n\n2) The code in TR_J9VM::getClassFromSignature strips off any leading 'L'\n   and trailing semicolon from the signature string for a class that it\n   is looking up.  For value types, it also needs to strip off any\n   leading 'Q'.\n\n3) In jitParseSignature in ctsupport.cpp, allow for the letter Q before\n   a class name in parsing signatures.\n\nSigned-off-by:  Henry Zongaro <zongaro@ca.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c34da9ec317791a4733b51daf927311507d49f01", "author": {"user": {"login": "hzongaro", "name": "Henry Zongaro"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/c34da9ec317791a4733b51daf927311507d49f01", "committedDate": "2020-04-01T19:28:54Z", "message": "Prototype ILGen for defaultvalue bytecode\n\nFor a defaultvalue bytecode, if the class is resolved, generate a\nnewvalue instruction with default values for the fields as operands.\nRecursively generate a newvalue for any fields that are themselves\nvalue types.\n\nThe JIT compiler is not yet able to handle the case of an unresolved\nclass used in a defaultvalue bytecode instruction.  Simply fail the\ncompilation during ILGen if an unresolved class is encountered in that\nsituation.  The failure is reported as an\nUnsupportedValueTypeOperation exception.  The intention is that these\ncan be replaced with OSR points in the future.\n\nIn order to track the frequency with which we are failing compilations\ndue to encountering unresolved classes during IL generation for the\ndefaultvalue bytecode, use static debug counters that begin with\nthe string \"ilgen.abort/unresolved/defaultvalue\".\n\nSigned-off-by:  Henry Zongaro <zongaro@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2af5c522e64c8f873dc1dff34a0d59390fbb8444", "author": {"user": {"login": "hzongaro", "name": "Henry Zongaro"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/2af5c522e64c8f873dc1dff34a0d59390fbb8444", "committedDate": "2020-04-01T19:05:55Z", "message": "Prototype ILGen for defaultvalue bytecode\n\nFor a defaultvalue bytecode, if the class is resolved, generate a\nnewvalue instruction with default values for the fields as operands.\nRecursively generate a newvalue for any fields that are themselves\nvalue types.\n\nThe JIT compiler is not yet able to handle the case of an unresolved\nclass used in a defaultvalue bytecode instruction.  Simply fail the\ncompilation during ILGen if an unresolved class is encountered in that\nsituation.  The failure is reported as an\nUnsupportedValueTypeOperation exception.  The intention is that these\ncan be replaced with OSR points in the future.\n\nIn order to track the frequency with which we are failing compilations\ndue to encountering unresolved classes during IL generation for the\ndefaultvalue bytecode, use static debug counters that begin with\nthe string \"ilgen.abort/unresolved/defaultvalue\".\n\nSigned-off-by:  Henry Zongaro <zongaro@ca.ibm.com>"}, "afterCommit": {"oid": "c34da9ec317791a4733b51daf927311507d49f01", "author": {"user": {"login": "hzongaro", "name": "Henry Zongaro"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/c34da9ec317791a4733b51daf927311507d49f01", "committedDate": "2020-04-01T19:28:54Z", "message": "Prototype ILGen for defaultvalue bytecode\n\nFor a defaultvalue bytecode, if the class is resolved, generate a\nnewvalue instruction with default values for the fields as operands.\nRecursively generate a newvalue for any fields that are themselves\nvalue types.\n\nThe JIT compiler is not yet able to handle the case of an unresolved\nclass used in a defaultvalue bytecode instruction.  Simply fail the\ncompilation during ILGen if an unresolved class is encountered in that\nsituation.  The failure is reported as an\nUnsupportedValueTypeOperation exception.  The intention is that these\ncan be replaced with OSR points in the future.\n\nIn order to track the frequency with which we are failing compilations\ndue to encountering unresolved classes during IL generation for the\ndefaultvalue bytecode, use static debug counters that begin with\nthe string \"ilgen.abort/unresolved/defaultvalue\".\n\nSigned-off-by:  Henry Zongaro <zongaro@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1ODg5MTU1", "url": "https://github.com/eclipse-openj9/openj9/pull/9030#pullrequestreview-385889155", "createdAt": "2020-04-01T19:34:32Z", "commit": {"oid": "c34da9ec317791a4733b51daf927311507d49f01"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1356, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}