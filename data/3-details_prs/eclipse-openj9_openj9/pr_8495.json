{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwOTEzNjAw", "number": 8495, "title": "JEP358 extended NPE message part 1 - result of this NPE", "bodyText": "JEP358 extended NPE message part 1 - result of this NPE\n\nVM_GetExtendedNPEMessage() is updated to invoke iterateStackTrace() with getStackTraceElementIterator() to get the romClass/romMethod/bytecodeOffset of first frame of the exception object then invoke getCompleteNPEMessage() for message generation;\nAdded getCompleteNPEMessage() in a new file vm/ExtendedMessageNPE.cpp to compute NPE message according to the\nbytecode itself for aload/astore, arraylength, athrow, monitorenter/monitorexit, the bytecode and field index for getfield/putfield, the bytecode and method index for invokeinterface/invokespecial/invokevirtual;\nAdded a runtime flag J9_EXTENDED_RUNTIME2_SHOW_EXTENDED_NPEMSG to specify the command line option -XX:{+|-}ShowCodeDetailsInExceptionMessages;\nAdded trace messages.\n\nSample NPE messages (-Xint or -Xjit:count=0):\njava.lang.NullPointerException: Cannot load from int array\n\tat a.se.java_lang_npe.NullPointerExceptionTest.testFailedAction(NullPointerExceptionTest.java:143)\n\njava.lang.NullPointerException: Cannot store to object array\n\tat a.se.java_lang_npe.NullPointerExceptionTest.testFailedAction(NullPointerExceptionTest.java:254)\n\njava.lang.NullPointerException: Cannot read the array length\n\tat a.se.java_lang_npe.NullPointerExceptionTest.testFailedAction(NullPointerExceptionTest.java:325)\n\njava.lang.NullPointerException: Cannot enter synchronized block\n\tat a.se.java_lang_npe.NullPointerExceptionTest.testFailedAction(NullPointerExceptionTest.java:344)\n\njava.lang.NullPointerException: Cannot read field \"nullInstanceField\"\n\tat a.se.java_lang_npe.NullPointerExceptionTest.testFailedAction(NullPointerExceptionTest.java:357)\n\nOutput:\njava.lang.NullPointerException: Cannot assign field \"i\"\n\tat a.se.java_lang_npe.NullPointerExceptionTest.test_aload(NullPointerExceptionTest.java:622)\n\njava.lang.NullPointerException: Cannot invoke \"a/se/java_lang_npe/G.m2(Ljava/lang/String;)Ljava/lang/String;\"\n\tat a.se.java_lang_npe.NullPointerExceptionTest.testFailedAction(NullPointerExceptionTest.java:412)\n\njava.lang.NullPointerException: Cannot invoke \"a/se/java_lang_npe/NullPointerExceptionTest$A.getB()La/se/java_lang_npe/NullPointerExceptionTest$B;\"\n\tat a.se.java_lang_npe.NullPointerExceptionTest.testMixedChasing(NullPointerExceptionTest.java:860)\n\n\nrelated: #8450\nIssue: #7500\nReviewer: @DanHeidinga\nFYI: @gacholio\nSigned-off-by: Jason Feng fengj@ca.ibm.com", "createdAt": "2020-02-04T15:54:26Z", "url": "https://github.com/eclipse-openj9/openj9/pull/8495", "merged": true, "mergeCommit": {"oid": "0b99c68aca0968b411f5129182e92940468a00d3"}, "closed": true, "closedAt": "2020-05-15T01:57:07Z", "author": {"login": "JasonFengJ9"}, "timelineItems": {"totalCount": 40, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcBD6IagFqTM1MzEwNTk3NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABchXynSgBqjMzMzg5OTQ2NTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzMTA1OTc0", "url": "https://github.com/eclipse-openj9/openj9/pull/8495#pullrequestreview-353105974", "createdAt": "2020-02-04T16:13:12Z", "commit": {"oid": "6c712e3c2b3cffafe3a085eb8defac7879b87325"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNjoxMzoxM1rOFlaIag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNjoxMzoxM1rOFlaIag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc2OTc3MA==", "bodyText": "Might be better to simply pass _currentThread to the message helper and let it fetch the data that's required.\nAlso need to verify that every path here has not incremented the pc (I suspect this is already true).", "url": "https://github.com/eclipse-openj9/openj9/pull/8495#discussion_r374769770", "createdAt": "2020-02-04T16:13:13Z", "author": {"login": "gacholio"}, "path": "runtime/vm/BytecodeInterpreter.hpp", "diffHunk": "@@ -9621,6 +9623,13 @@ runMethodHandle: {\n \tVMStructHasBeenUpdated(REGISTER_ARGS);\n \tgoto throwCurrentException;\n \n+nullPointerWithExtendedMsg:\n+\tupdateVMStruct(REGISTER_ARGS);\n+\tprepareForExceptionThrow(_currentThread);\n+\tsetCurrentExceptionUTF(_currentThread, J9VMCONSTANTPOOL_JAVALANGNULLPOINTEREXCEPTION, getExtendedNPEMessage(_currentThread, *_pc, *(U_16*)(_pc + 1), J9_CP_FROM_METHOD(_literals)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c712e3c2b3cffafe3a085eb8defac7879b87325"}, "originalPosition": 284}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6c712e3c2b3cffafe3a085eb8defac7879b87325", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/6c712e3c2b3cffafe3a085eb8defac7879b87325", "committedDate": "2020-02-04T15:42:11Z", "message": "JEP358 extended NPE message part 1 - result of this NPE\n\nAdded a VM_BytecodeAction THROW_NPE_WITH_MSG;\nGoto nullPointerWithExtendedMsg when throwing NPE at selected bytecodes;\nConstructing NPE message according to the bytecode itself for\naload/astore, arraylength, athrow, monitorenter/monitorexit;\nConstructing NPE message according to the bytecode and field index for\ngetfield/putfield;\nConstructing NPE message according to the bytecode and method index for\ninvokeinterface/invokespecial/invokevirtual;\nAdded a runtime flag J9_EXTENDED_RUNTIME2_SHOW_EXTENDED_NPEMSG to\nspecify the command line option\n-XX:{+|-}ShowCodeDetailsInExceptionMessages;\nAdded NLS and trace messages.\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}, "afterCommit": {"oid": "06eb85ebedd25c960783ca75117251c8ae4a59fc", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/06eb85ebedd25c960783ca75117251c8ae4a59fc", "committedDate": "2020-02-13T22:17:38Z", "message": "JEP358 extended NPE message part 1 - result of this NPE\n\nModified iterateStackTrace callback_func_t to return methodPC and\nRAM constantPool, also added an additional parameter to indicated the\nnumber of cache items;\nCreated two helper methods walkStackFramesWithSelectedFlags and\nsetWalkbackAfterWalkStackFrames to remove some code duplication;\nSpecified J9_STACKWALK_CACHE_CPS for NPE when JEP358 feature is enabled;\nJVM_GetExtendedNPEMessage is going to construct NPE extended message\non-demand;\nConstructing NPE message according to the bytecode itself for\naload/astore, arraylength, athrow, monitorenter/monitorexit;\nConstructing NPE message according to the bytecode and field index for\ngetfield/putfield;\nConstructing NPE message according to the bytecode and method index for\ninvokeinterface/invokespecial/invokevirtual;\nAdded a runtime flag J9_EXTENDED_RUNTIME2_SHOW_EXTENDED_NPEMSG to\nspecify the command line option\n-XX:{+|-}ShowCodeDetailsInExceptionMessages;\nAdded NLS and trace messages.\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "06eb85ebedd25c960783ca75117251c8ae4a59fc", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/06eb85ebedd25c960783ca75117251c8ae4a59fc", "committedDate": "2020-02-13T22:17:38Z", "message": "JEP358 extended NPE message part 1 - result of this NPE\n\nModified iterateStackTrace callback_func_t to return methodPC and\nRAM constantPool, also added an additional parameter to indicated the\nnumber of cache items;\nCreated two helper methods walkStackFramesWithSelectedFlags and\nsetWalkbackAfterWalkStackFrames to remove some code duplication;\nSpecified J9_STACKWALK_CACHE_CPS for NPE when JEP358 feature is enabled;\nJVM_GetExtendedNPEMessage is going to construct NPE extended message\non-demand;\nConstructing NPE message according to the bytecode itself for\naload/astore, arraylength, athrow, monitorenter/monitorexit;\nConstructing NPE message according to the bytecode and field index for\ngetfield/putfield;\nConstructing NPE message according to the bytecode and method index for\ninvokeinterface/invokespecial/invokevirtual;\nAdded a runtime flag J9_EXTENDED_RUNTIME2_SHOW_EXTENDED_NPEMSG to\nspecify the command line option\n-XX:{+|-}ShowCodeDetailsInExceptionMessages;\nAdded NLS and trace messages.\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}, "afterCommit": {"oid": "ff1f62896f2d2faef7616a0390c87312acc1d607", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/ff1f62896f2d2faef7616a0390c87312acc1d607", "committedDate": "2020-02-16T16:24:52Z", "message": "JEP358 extended NPE message part 1 - result of this NPE\n\nModified iterateStackTrace callback_func_t to return methodPC and\nRAM constantPool, also added an additional parameter to indicated the\nnumber of cache items;\nCreated two helper methods walkStackFramesWithSelectedFlags and\nsetWalkbackAfterWalkStackFrames to remove some code duplication;\nSpecified J9_STACKWALK_CACHE_CPS for NPE when JEP358 feature is enabled;\nJVM_GetExtendedNPEMessage is going to construct NPE extended message\non-demand;\nConstructing NPE message according to the bytecode itself for\naload/astore, arraylength, athrow, monitorenter/monitorexit;\nConstructing NPE message according to the bytecode and field index for\ngetfield/putfield;\nConstructing NPE message according to the bytecode and method index for\ninvokeinterface/invokespecial/invokevirtual;\nAdded a runtime flag J9_EXTENDED_RUNTIME2_SHOW_EXTENDED_NPEMSG to\nspecify the command line option\n-XX:{+|-}ShowCodeDetailsInExceptionMessages;\nAdded NLS and trace messages.\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwNTgwNDk5", "url": "https://github.com/eclipse-openj9/openj9/pull/8495#pullrequestreview-360580499", "createdAt": "2020-02-18T18:42:18Z", "commit": {"oid": "ff1f62896f2d2faef7616a0390c87312acc1d607"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxODo0MjoxOFrOFrN-Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxODo1NzoxN1rOFrOdkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg2MjAyNw==", "bodyText": "The benefit of this being a local var is that we knew what it meant.  Better than seeing 0, 1.  Can you restore this as and make it const?", "url": "https://github.com/eclipse-openj9/openj9/pull/8495#discussion_r380862027", "createdAt": "2020-02-18T18:42:18Z", "author": {"login": "DanHeidinga"}, "path": "runtime/j9vm/j7vmi.c", "diffHunk": "@@ -1358,13 +1358,11 @@ jint JNICALL\n JVM_GetStackTraceDepth(JNIEnv* env, jobject throwable)\n {\n \tJ9VMThread* currentThread = (J9VMThread*) env;\n-\tJ9JavaVM * vm = currentThread->javaVM;\n-\tJ9InternalVMFunctions * vmfns = vm->internalVMFunctions;\n-\tjint numberOfFrames;\n-\tUDATA pruneConstructors = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff1f62896f2d2faef7616a0390c87312acc1d607"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg2MjUyMQ==", "bodyText": "please add a new line to the end of the file", "url": "https://github.com/eclipse-openj9/openj9/pull/8495#discussion_r380862521", "createdAt": "2020-02-18T18:43:15Z", "author": {"login": "DanHeidinga"}, "path": "runtime/j9vm/j9scar.tdf", "diffHunk": "@@ -338,3 +338,8 @@ TraceEvent=Trc_SC_LoadSystemLibrary_LoadFailed NoEnv Overhead=1 Level=1 Template\n TraceEntry=Trc_SC_RegisterSignal_Entry Overhead=1 Level=1 Template=\"JVM_RegisterSignal(signal=%d, handler=%p)\"\n TraceExit=Trc_SC_RegisterSignal_Exit Overhead=1 Level=1 Template=\"JVM_RegisterSignal -- return old OS handler = %p\"\n TraceException=Trc_SC_RegisterSignal_FailedToRegisterHandler Overhead=1 Level=1 Template=\"Failed to register handler: OS signal value = %d, new signal handler = %p, old signal handler = %p\"\n+\n+TraceEntry=Trc_SC_GetExtendedNPEMessage_Entry Overhead=1 Level=3 Template=\"JVM_GetExtendedNPEMessage for throwableObj(%p)\"\n+TraceEntry=Trc_SC_GetExtendedNPEMessage_Entry2 Overhead=1 Level=1 Template=\"JVM_GetExtendedNPEMessage for throwableObj(%p)\"\n+TraceEvent=Trc_SC_GetExtendedNPEMessage_NULLMETHODPC Overhead=1 Level=1 Template=\"JVM_GetExtendedNPEMessage iterateStackTrace returns a NULL methodPC.\"\n+TraceExit=Trc_SC_GetExtendedNPEMessage_Exit Overhead=1 Level=3 Template=\"JVM_GetExtendedNPEMessage returns msgObjectRef(%p)\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff1f62896f2d2faef7616a0390c87312acc1d607"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg2MzQ3Mw==", "bodyText": "Why are some of these level 3 vs 1?", "url": "https://github.com/eclipse-openj9/openj9/pull/8495#discussion_r380863473", "createdAt": "2020-02-18T18:45:03Z", "author": {"login": "DanHeidinga"}, "path": "runtime/j9vm/j9scar.tdf", "diffHunk": "@@ -338,3 +338,8 @@ TraceEvent=Trc_SC_LoadSystemLibrary_LoadFailed NoEnv Overhead=1 Level=1 Template\n TraceEntry=Trc_SC_RegisterSignal_Entry Overhead=1 Level=1 Template=\"JVM_RegisterSignal(signal=%d, handler=%p)\"\n TraceExit=Trc_SC_RegisterSignal_Exit Overhead=1 Level=1 Template=\"JVM_RegisterSignal -- return old OS handler = %p\"\n TraceException=Trc_SC_RegisterSignal_FailedToRegisterHandler Overhead=1 Level=1 Template=\"Failed to register handler: OS signal value = %d, new signal handler = %p, old signal handler = %p\"\n+\n+TraceEntry=Trc_SC_GetExtendedNPEMessage_Entry Overhead=1 Level=3 Template=\"JVM_GetExtendedNPEMessage for throwableObj(%p)\"\n+TraceEntry=Trc_SC_GetExtendedNPEMessage_Entry2 Overhead=1 Level=1 Template=\"JVM_GetExtendedNPEMessage for throwableObj(%p)\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff1f62896f2d2faef7616a0390c87312acc1d607"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg2MzY2MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            TraceEvent=Trc_SC_GetExtendedNPEMessage_NULLMETHODPC Overhead=1 Level=1 Template=\"JVM_GetExtendedNPEMessage iterateStackTrace returns a NULL methodPC.\"\n          \n          \n            \n            TraceEvent=Trc_SC_GetExtendedNPEMessage_NullMethodPC Overhead=1 Level=1 Template=\"JVM_GetExtendedNPEMessage iterateStackTrace returns a NULL methodPC.\"", "url": "https://github.com/eclipse-openj9/openj9/pull/8495#discussion_r380863661", "createdAt": "2020-02-18T18:45:25Z", "author": {"login": "DanHeidinga"}, "path": "runtime/j9vm/j9scar.tdf", "diffHunk": "@@ -338,3 +338,8 @@ TraceEvent=Trc_SC_LoadSystemLibrary_LoadFailed NoEnv Overhead=1 Level=1 Template\n TraceEntry=Trc_SC_RegisterSignal_Entry Overhead=1 Level=1 Template=\"JVM_RegisterSignal(signal=%d, handler=%p)\"\n TraceExit=Trc_SC_RegisterSignal_Exit Overhead=1 Level=1 Template=\"JVM_RegisterSignal -- return old OS handler = %p\"\n TraceException=Trc_SC_RegisterSignal_FailedToRegisterHandler Overhead=1 Level=1 Template=\"Failed to register handler: OS signal value = %d, new signal handler = %p, old signal handler = %p\"\n+\n+TraceEntry=Trc_SC_GetExtendedNPEMessage_Entry Overhead=1 Level=3 Template=\"JVM_GetExtendedNPEMessage for throwableObj(%p)\"\n+TraceEntry=Trc_SC_GetExtendedNPEMessage_Entry2 Overhead=1 Level=1 Template=\"JVM_GetExtendedNPEMessage for throwableObj(%p)\"\n+TraceEvent=Trc_SC_GetExtendedNPEMessage_NULLMETHODPC Overhead=1 Level=1 Template=\"JVM_GetExtendedNPEMessage iterateStackTrace returns a NULL methodPC.\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff1f62896f2d2faef7616a0390c87312acc1d607"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg2OTM4NQ==", "bodyText": "I don't think these messages should be documented and we wouldn't want to use the message codes in the messages", "url": "https://github.com/eclipse-openj9/openj9/pull/8495#discussion_r380869385", "createdAt": "2020-02-18T18:56:10Z", "author": {"login": "DanHeidinga"}, "path": "runtime/nls/j9vm/j9vm.nls", "diffHunk": "@@ -1953,3 +1953,94 @@ J9NLS_VM_CLASS_RELATIONSHIP_INVALID.explanation=The specified child class fails\n J9NLS_VM_CLASS_RELATIONSHIP_INVALID.system_action=The JVM will throw a java/lang/VerifyError.\n J9NLS_VM_CLASS_RELATIONSHIP_INVALID.user_response=Ensure that all class relationships are valid.\n # END NON-TRANSLATABLE\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff1f62896f2d2faef7616a0390c87312acc1d607"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg3MDAzNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            iterateStackTrace(J9VMThread * vmThread, j9object_t* exception,  UDATA  (*callback) (J9VMThread * vmThread, void * userData, U_8 *methodPC, J9ConstantPool *constantPool, J9ROMClass * romClass, J9ROMMethod * romMethod, J9UTF8 * fileName, UDATA lineNumber, J9ClassLoader* classLoader), void * userData, UDATA pruneConstructors, U_32 nbrCacheItems);\n          \n          \n            \n            iterateStackTrace(J9VMThread * vmThread, j9object_t* exception,  UDATA  (*callback) (J9VMThread * vmThread, void * userData, U_8 *methodPC, J9ConstantPool *constantPool, J9ROMClass * romClass, J9ROMMethod * romMethod, J9UTF8 * fileName, UDATA lineNumber, J9ClassLoader* classLoader), void * userData, UDATA pruneConstructors, U_32 numCacheItems);", "url": "https://github.com/eclipse-openj9/openj9/pull/8495#discussion_r380870034", "createdAt": "2020-02-18T18:57:17Z", "author": {"login": "DanHeidinga"}, "path": "runtime/oti/vm_api.h", "diffHunk": "@@ -554,10 +554,11 @@ internalExceptionDescribe(J9VMThread *vmThread);\n * @param lineNumber)\n * @param userData\n * @param pruneConstructors\n+* @param nbrCacheItems\n * @return UDATA\n */\n UDATA\n-iterateStackTrace(J9VMThread * vmThread, j9object_t* exception,  UDATA  (*callback) (J9VMThread * vmThread, void * userData, J9ROMClass * romClass, J9ROMMethod * romMethod, J9UTF8 * fileName, UDATA lineNumber, J9ClassLoader* classLoader), void * userData, UDATA pruneConstructors);\n+iterateStackTrace(J9VMThread * vmThread, j9object_t* exception,  UDATA  (*callback) (J9VMThread * vmThread, void * userData, U_8 *methodPC, J9ConstantPool *constantPool, J9ROMClass * romClass, J9ROMMethod * romMethod, J9UTF8 * fileName, UDATA lineNumber, J9ClassLoader* classLoader), void * userData, UDATA pruneConstructors, U_32 nbrCacheItems);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff1f62896f2d2faef7616a0390c87312acc1d607"}, "originalPosition": 9}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ff1f62896f2d2faef7616a0390c87312acc1d607", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/ff1f62896f2d2faef7616a0390c87312acc1d607", "committedDate": "2020-02-16T16:24:52Z", "message": "JEP358 extended NPE message part 1 - result of this NPE\n\nModified iterateStackTrace callback_func_t to return methodPC and\nRAM constantPool, also added an additional parameter to indicated the\nnumber of cache items;\nCreated two helper methods walkStackFramesWithSelectedFlags and\nsetWalkbackAfterWalkStackFrames to remove some code duplication;\nSpecified J9_STACKWALK_CACHE_CPS for NPE when JEP358 feature is enabled;\nJVM_GetExtendedNPEMessage is going to construct NPE extended message\non-demand;\nConstructing NPE message according to the bytecode itself for\naload/astore, arraylength, athrow, monitorenter/monitorexit;\nConstructing NPE message according to the bytecode and field index for\ngetfield/putfield;\nConstructing NPE message according to the bytecode and method index for\ninvokeinterface/invokespecial/invokevirtual;\nAdded a runtime flag J9_EXTENDED_RUNTIME2_SHOW_EXTENDED_NPEMSG to\nspecify the command line option\n-XX:{+|-}ShowCodeDetailsInExceptionMessages;\nAdded NLS and trace messages.\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}, "afterCommit": {"oid": "d69ddc97e590804134d4d1dd0f8e3b8314536eb2", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/d69ddc97e590804134d4d1dd0f8e3b8314536eb2", "committedDate": "2020-02-19T03:44:37Z", "message": "JEP358 extended NPE message part 1 - result of this NPE\n\nModified iterateStackTrace callback_func_t to return methodPC and\nRAM constantPool, also added an additional parameter to indicated the\nnumber of cache items;\nCreated two helper methods walkStackFramesWithSelectedFlags and\nsetWalkbackAfterWalkStackFrames to remove some code duplication;\nSpecified J9_STACKWALK_CACHE_CPS for NPE when JEP358 feature is enabled;\nJVM_GetExtendedNPEMessage is going to construct NPE extended message\non-demand;\nConstructing NPE message according to the bytecode itself for\naload/astore, arraylength, athrow, monitorenter/monitorexit;\nConstructing NPE message according to the bytecode and field index for\ngetfield/putfield;\nConstructing NPE message according to the bytecode and method index for\ninvokeinterface/invokespecial/invokevirtual;\nAdded a runtime flag J9_EXTENDED_RUNTIME2_SHOW_EXTENDED_NPEMSG to\nspecify the command line option\n-XX:{+|-}ShowCodeDetailsInExceptionMessages;\nAdded trace messages.\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d69ddc97e590804134d4d1dd0f8e3b8314536eb2", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/d69ddc97e590804134d4d1dd0f8e3b8314536eb2", "committedDate": "2020-02-19T03:44:37Z", "message": "JEP358 extended NPE message part 1 - result of this NPE\n\nModified iterateStackTrace callback_func_t to return methodPC and\nRAM constantPool, also added an additional parameter to indicated the\nnumber of cache items;\nCreated two helper methods walkStackFramesWithSelectedFlags and\nsetWalkbackAfterWalkStackFrames to remove some code duplication;\nSpecified J9_STACKWALK_CACHE_CPS for NPE when JEP358 feature is enabled;\nJVM_GetExtendedNPEMessage is going to construct NPE extended message\non-demand;\nConstructing NPE message according to the bytecode itself for\naload/astore, arraylength, athrow, monitorenter/monitorexit;\nConstructing NPE message according to the bytecode and field index for\ngetfield/putfield;\nConstructing NPE message according to the bytecode and method index for\ninvokeinterface/invokespecial/invokevirtual;\nAdded a runtime flag J9_EXTENDED_RUNTIME2_SHOW_EXTENDED_NPEMSG to\nspecify the command line option\n-XX:{+|-}ShowCodeDetailsInExceptionMessages;\nAdded trace messages.\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}, "afterCommit": {"oid": "e35a31786487ee181011127eb86e545061480083", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/e35a31786487ee181011127eb86e545061480083", "committedDate": "2020-02-19T03:50:46Z", "message": "JEP358 extended NPE message part 1 - result of this NPE\n\nModified iterateStackTrace callback_func_t to return methodPC and\nRAM constantPool, also added an additional parameter to indicated the\nnumber of cache items;\nCreated two helper methods walkStackFramesWithSelectedFlags and\nsetWalkbackAfterWalkStackFrames to remove some code duplication;\nSpecified J9_STACKWALK_CACHE_CPS for NPE when JEP358 feature is enabled;\nJVM_GetExtendedNPEMessage is going to construct NPE extended message\non-demand;\nConstructing NPE message according to the bytecode itself for\naload/astore, arraylength, athrow, monitorenter/monitorexit;\nConstructing NPE message according to the bytecode and field index for\ngetfield/putfield;\nConstructing NPE message according to the bytecode and method index for\ninvokeinterface/invokespecial/invokevirtual;\nAdded a runtime flag J9_EXTENDED_RUNTIME2_SHOW_EXTENDED_NPEMSG to\nspecify the command line option\n-XX:{+|-}ShowCodeDetailsInExceptionMessages;\nAdded trace messages.\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e35a31786487ee181011127eb86e545061480083", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/e35a31786487ee181011127eb86e545061480083", "committedDate": "2020-02-19T03:50:46Z", "message": "JEP358 extended NPE message part 1 - result of this NPE\n\nModified iterateStackTrace callback_func_t to return methodPC and\nRAM constantPool, also added an additional parameter to indicated the\nnumber of cache items;\nCreated two helper methods walkStackFramesWithSelectedFlags and\nsetWalkbackAfterWalkStackFrames to remove some code duplication;\nSpecified J9_STACKWALK_CACHE_CPS for NPE when JEP358 feature is enabled;\nJVM_GetExtendedNPEMessage is going to construct NPE extended message\non-demand;\nConstructing NPE message according to the bytecode itself for\naload/astore, arraylength, athrow, monitorenter/monitorexit;\nConstructing NPE message according to the bytecode and field index for\ngetfield/putfield;\nConstructing NPE message according to the bytecode and method index for\ninvokeinterface/invokespecial/invokevirtual;\nAdded a runtime flag J9_EXTENDED_RUNTIME2_SHOW_EXTENDED_NPEMSG to\nspecify the command line option\n-XX:{+|-}ShowCodeDetailsInExceptionMessages;\nAdded trace messages.\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}, "afterCommit": {"oid": "4927cbb6901ec5233188abd6bea51a0d7e680470", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/4927cbb6901ec5233188abd6bea51a0d7e680470", "committedDate": "2020-02-19T21:20:57Z", "message": "JEP358 extended NPE message part 1 - result of this NPE\n\nModified iterateStackTrace callback_func_t to return methodPC and\nRAM constantPool;\nCreated two helper methods walkStackFramesWithSelectedFlags and\nsetWalkbackAfterWalkStackFrames to remove some code duplication;\nAdded a helper isNPEMsgEnabled to indicate if JEP358 is enabled for NPE;\nSpecified J9_STACKWALK_CACHE_CPS for NPE when JEP358 feature is enabled;\nJVM_GetExtendedNPEMessage is going to construct NPE extended message\non-demand;\nConstructing NPE message according to the bytecode itself for\naload/astore, arraylength, athrow, monitorenter/monitorexit;\nConstructing NPE message according to the bytecode and field index for\ngetfield/putfield;\nConstructing NPE message according to the bytecode and method index for\ninvokeinterface/invokespecial/invokevirtual;\nAdded a runtime flag J9_EXTENDED_RUNTIME2_SHOW_EXTENDED_NPEMSG to\nspecify the command line option\n-XX:{+|-}ShowCodeDetailsInExceptionMessages;\nAdded trace messages.\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4927cbb6901ec5233188abd6bea51a0d7e680470", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/4927cbb6901ec5233188abd6bea51a0d7e680470", "committedDate": "2020-02-19T21:20:57Z", "message": "JEP358 extended NPE message part 1 - result of this NPE\n\nModified iterateStackTrace callback_func_t to return methodPC and\nRAM constantPool;\nCreated two helper methods walkStackFramesWithSelectedFlags and\nsetWalkbackAfterWalkStackFrames to remove some code duplication;\nAdded a helper isNPEMsgEnabled to indicate if JEP358 is enabled for NPE;\nSpecified J9_STACKWALK_CACHE_CPS for NPE when JEP358 feature is enabled;\nJVM_GetExtendedNPEMessage is going to construct NPE extended message\non-demand;\nConstructing NPE message according to the bytecode itself for\naload/astore, arraylength, athrow, monitorenter/monitorexit;\nConstructing NPE message according to the bytecode and field index for\ngetfield/putfield;\nConstructing NPE message according to the bytecode and method index for\ninvokeinterface/invokespecial/invokevirtual;\nAdded a runtime flag J9_EXTENDED_RUNTIME2_SHOW_EXTENDED_NPEMSG to\nspecify the command line option\n-XX:{+|-}ShowCodeDetailsInExceptionMessages;\nAdded trace messages.\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}, "afterCommit": {"oid": "f09497bd21932d79192fda0e71e59cba18c858d7", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/f09497bd21932d79192fda0e71e59cba18c858d7", "committedDate": "2020-02-24T15:22:24Z", "message": "JEP358 extended NPE message part 1 - result of this NPE\n\nModified iterateStackTrace callback_func_t to return methodPC and\nRAM constantPool;\nCreated two helper methods walkStackFramesWithSelectedFlags and\nsetWalkbackAfterWalkStackFrames to remove some code duplication;\nAdded a helper isNPEMsgEnabled to indicate if JEP358 is enabled for NPE;\nSpecified J9_STACKWALK_CACHE_CPS for NPE when JEP358 feature is enabled;\nJVM_GetExtendedNPEMessage is going to construct NPE extended message\non-demand;\nConstructing NPE message according to the bytecode itself for\naload/astore, arraylength, athrow, monitorenter/monitorexit;\nConstructing NPE message according to the bytecode and field index for\ngetfield/putfield;\nConstructing NPE message according to the bytecode and method index for\ninvokeinterface/invokespecial/invokevirtual;\nAdded a runtime flag J9_EXTENDED_RUNTIME2_SHOW_EXTENDED_NPEMSG to\nspecify the command line option\n-XX:{+|-}ShowCodeDetailsInExceptionMessages;\nAdded trace messages.\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f09497bd21932d79192fda0e71e59cba18c858d7", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/f09497bd21932d79192fda0e71e59cba18c858d7", "committedDate": "2020-02-24T15:22:24Z", "message": "JEP358 extended NPE message part 1 - result of this NPE\n\nModified iterateStackTrace callback_func_t to return methodPC and\nRAM constantPool;\nCreated two helper methods walkStackFramesWithSelectedFlags and\nsetWalkbackAfterWalkStackFrames to remove some code duplication;\nAdded a helper isNPEMsgEnabled to indicate if JEP358 is enabled for NPE;\nSpecified J9_STACKWALK_CACHE_CPS for NPE when JEP358 feature is enabled;\nJVM_GetExtendedNPEMessage is going to construct NPE extended message\non-demand;\nConstructing NPE message according to the bytecode itself for\naload/astore, arraylength, athrow, monitorenter/monitorexit;\nConstructing NPE message according to the bytecode and field index for\ngetfield/putfield;\nConstructing NPE message according to the bytecode and method index for\ninvokeinterface/invokespecial/invokevirtual;\nAdded a runtime flag J9_EXTENDED_RUNTIME2_SHOW_EXTENDED_NPEMSG to\nspecify the command line option\n-XX:{+|-}ShowCodeDetailsInExceptionMessages;\nAdded trace messages.\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}, "afterCommit": {"oid": "a019c474a5188629460c8e02b62afc3acf99c16a", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/a019c474a5188629460c8e02b62afc3acf99c16a", "committedDate": "2020-02-29T12:54:44Z", "message": "JEP358 extended NPE message part 1 - result of this NPE\n\nAdded iterateStackTraceHelper to iterate the top stack only, and returns\nmethodPC and RAM constantPool;\nThere is no change to existing iterateStackTrace calls;\nCreated two helper methods walkStackFramesWithSelectedFlags and\nsetWalkbackAfterWalkStackFrames to remove some code duplication;\nAdded a helper isNPEMsgEnabled to indicate if JEP358 is enabled for NPE;\nSpecified J9_STACKWALK_CACHE_CPS for NPE when JEP358 feature is enabled;\nJVM_GetExtendedNPEMessage is going to construct NPE extended message\non-demand;\nConstructing NPE message according to the bytecode itself for\naload/astore, arraylength, athrow, monitorenter/monitorexit;\nConstructing NPE message according to the bytecode and field index for\ngetfield/putfield;\nConstructing NPE message according to the bytecode and method index for\ninvokeinterface/invokespecial/invokevirtual;\nAdded a runtime flag J9_EXTENDED_RUNTIME2_SHOW_EXTENDED_NPEMSG to\nspecify the command line option\n-XX:{+|-}ShowCodeDetailsInExceptionMessages;\nAdded trace messages.\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a019c474a5188629460c8e02b62afc3acf99c16a", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/a019c474a5188629460c8e02b62afc3acf99c16a", "committedDate": "2020-02-29T12:54:44Z", "message": "JEP358 extended NPE message part 1 - result of this NPE\n\nAdded iterateStackTraceHelper to iterate the top stack only, and returns\nmethodPC and RAM constantPool;\nThere is no change to existing iterateStackTrace calls;\nCreated two helper methods walkStackFramesWithSelectedFlags and\nsetWalkbackAfterWalkStackFrames to remove some code duplication;\nAdded a helper isNPEMsgEnabled to indicate if JEP358 is enabled for NPE;\nSpecified J9_STACKWALK_CACHE_CPS for NPE when JEP358 feature is enabled;\nJVM_GetExtendedNPEMessage is going to construct NPE extended message\non-demand;\nConstructing NPE message according to the bytecode itself for\naload/astore, arraylength, athrow, monitorenter/monitorexit;\nConstructing NPE message according to the bytecode and field index for\ngetfield/putfield;\nConstructing NPE message according to the bytecode and method index for\ninvokeinterface/invokespecial/invokevirtual;\nAdded a runtime flag J9_EXTENDED_RUNTIME2_SHOW_EXTENDED_NPEMSG to\nspecify the command line option\n-XX:{+|-}ShowCodeDetailsInExceptionMessages;\nAdded trace messages.\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}, "afterCommit": {"oid": "f50558cd2b9737b8f47beacf4616b2c2d0a96a22", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/f50558cd2b9737b8f47beacf4616b2c2d0a96a22", "committedDate": "2020-04-27T10:42:54Z", "message": "JEP358 extended NPE message part 1 - result of this NPE\n\nJVM_GetExtendedNPEMessage is updated to invoke vmFuncs\ngetExtendedNPEMessage() which gets first methodPC of the exception\nwalkback object then invoke j9bcv_verifyBytecodes() for message\ngeneration;\nVerifier functions j9bcv_verifyBytecodes() & verifyBytecodes() are\nmodified to take extra parameter and invoke getCompleteNPEMessage() to\ncompute extended NPE messages;\nAdded getCompleteNPEMessage() to compute NPE message according to the\nbytecode itself for aload/astore, arraylength, athrow,\nmonitorenter/monitorexit, the bytecode and field index for\ngetfield/putfield, the bytecode and method index for\ninvokeinterface/invokespecial/invokevirtual;\nAdded a runtime flag J9_EXTENDED_RUNTIME2_SHOW_EXTENDED_NPEMSG to\nspecify the command line option\n-XX:{+|-}ShowCodeDetailsInExceptionMessages;\nAdded NLS and trace messages.\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f50558cd2b9737b8f47beacf4616b2c2d0a96a22", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/f50558cd2b9737b8f47beacf4616b2c2d0a96a22", "committedDate": "2020-04-27T10:42:54Z", "message": "JEP358 extended NPE message part 1 - result of this NPE\n\nJVM_GetExtendedNPEMessage is updated to invoke vmFuncs\ngetExtendedNPEMessage() which gets first methodPC of the exception\nwalkback object then invoke j9bcv_verifyBytecodes() for message\ngeneration;\nVerifier functions j9bcv_verifyBytecodes() & verifyBytecodes() are\nmodified to take extra parameter and invoke getCompleteNPEMessage() to\ncompute extended NPE messages;\nAdded getCompleteNPEMessage() to compute NPE message according to the\nbytecode itself for aload/astore, arraylength, athrow,\nmonitorenter/monitorexit, the bytecode and field index for\ngetfield/putfield, the bytecode and method index for\ninvokeinterface/invokespecial/invokevirtual;\nAdded a runtime flag J9_EXTENDED_RUNTIME2_SHOW_EXTENDED_NPEMSG to\nspecify the command line option\n-XX:{+|-}ShowCodeDetailsInExceptionMessages;\nAdded NLS and trace messages.\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}, "afterCommit": {"oid": "215e4f65894de847eab2cbb9915b599985ba847a", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/215e4f65894de847eab2cbb9915b599985ba847a", "committedDate": "2020-04-27T12:56:13Z", "message": "JEP358 extended NPE message part 1 - result of this NPE\n\nJVM_GetExtendedNPEMessage is updated to invoke vmFuncs\ngetExtendedNPEMessage() which gets first methodPC of the exception\nwalkback object then invoke j9bcv_verifyBytecodes() for message\ngeneration;\nVerifier functions j9bcv_verifyBytecodes() & verifyBytecodes() are\nmodified to take extra parameter and invoke getCompleteNPEMessage() to\ncompute extended NPE messages;\nAdded getCompleteNPEMessage() to compute NPE message according to the\nbytecode itself for aload/astore, arraylength, athrow,\nmonitorenter/monitorexit, the bytecode and field index for\ngetfield/putfield, the bytecode and method index for\ninvokeinterface/invokespecial/invokevirtual;\nAdded a runtime flag J9_EXTENDED_RUNTIME2_SHOW_EXTENDED_NPEMSG to\nspecify the command line option\n-XX:{+|-}ShowCodeDetailsInExceptionMessages;\nAdded NLS and trace messages.\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "215e4f65894de847eab2cbb9915b599985ba847a", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/215e4f65894de847eab2cbb9915b599985ba847a", "committedDate": "2020-04-27T12:56:13Z", "message": "JEP358 extended NPE message part 1 - result of this NPE\n\nJVM_GetExtendedNPEMessage is updated to invoke vmFuncs\ngetExtendedNPEMessage() which gets first methodPC of the exception\nwalkback object then invoke j9bcv_verifyBytecodes() for message\ngeneration;\nVerifier functions j9bcv_verifyBytecodes() & verifyBytecodes() are\nmodified to take extra parameter and invoke getCompleteNPEMessage() to\ncompute extended NPE messages;\nAdded getCompleteNPEMessage() to compute NPE message according to the\nbytecode itself for aload/astore, arraylength, athrow,\nmonitorenter/monitorexit, the bytecode and field index for\ngetfield/putfield, the bytecode and method index for\ninvokeinterface/invokespecial/invokevirtual;\nAdded a runtime flag J9_EXTENDED_RUNTIME2_SHOW_EXTENDED_NPEMSG to\nspecify the command line option\n-XX:{+|-}ShowCodeDetailsInExceptionMessages;\nAdded NLS and trace messages.\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}, "afterCommit": {"oid": "e2728f60f91ad721c7a41ba4d2c88dcd8bb08b29", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/e2728f60f91ad721c7a41ba4d2c88dcd8bb08b29", "committedDate": "2020-04-27T21:42:59Z", "message": "JEP358 extended NPE message part 1 - result of this NPE\n\nJVM_GetExtendedNPEMessage is updated to invoke iterateStackTrace() with\ngetStackTraceElementIterator to get the\nromClass/romMethod/bytecodeOffset of first frame of the exception object\nthen invoke j9bcv_verifyBytecodes() for message\ngeneration;\nVerifier functions j9bcv_verifyBytecodes() & verifyBytecodes() are\nmodified to take extra parameter and invoke getCompleteNPEMessage() to\ncompute extended NPE messages;\nAdded getCompleteNPEMessage() to compute NPE message according to the\nbytecode itself for aload/astore, arraylength, athrow,\nmonitorenter/monitorexit, the bytecode and field index for\ngetfield/putfield, the bytecode and method index for\ninvokeinterface/invokespecial/invokevirtual;\nAdded a runtime flag J9_EXTENDED_RUNTIME2_SHOW_EXTENDED_NPEMSG to\nspecify the command line option\n-XX:{+|-}ShowCodeDetailsInExceptionMessages;\nAdded NLS and trace messages.\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxNDM3MzIx", "url": "https://github.com/eclipse-openj9/openj9/pull/8495#pullrequestreview-401437321", "createdAt": "2020-04-28T01:29:26Z", "commit": {"oid": "e2728f60f91ad721c7a41ba4d2c88dcd8bb08b29"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwMToyOToyNlrOGM-lew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwMToyOToyNlrOGM-lew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI2MTQ5OQ==", "bodyText": "Do not use ! on non-booleans - do the compare properly please, or create a boolean local.", "url": "https://github.com/eclipse-openj9/openj9/pull/8495#discussion_r416261499", "createdAt": "2020-04-28T01:29:26Z", "author": {"login": "gacholio"}, "path": "runtime/bcverify/bcverify.c", "diffHunk": "@@ -2404,15 +2397,20 @@ j9bcv_verifyBytecodes (J9PortLibrary * portLib, J9Class * clazz, J9ROMClass * ro\n \n \tromMethod = (J9ROMMethod *) J9ROMCLASS_ROMMETHODS(romClass);\n \n-\tif (verboseVerification) {\n+\tif (verboseVerification && !isNPEMsg) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2728f60f91ad721c7a41ba4d2c88dcd8bb08b29"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyNzUzMDM5", "url": "https://github.com/eclipse-openj9/openj9/pull/8495#pullrequestreview-402753039", "createdAt": "2020-04-29T14:57:34Z", "commit": {"oid": "e2728f60f91ad721c7a41ba4d2c88dcd8bb08b29"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNDo1NzozNFrOGODBTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNDo1NzozNFrOGODBTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM4MjczMw==", "bodyText": "returning -> returned", "url": "https://github.com/eclipse-openj9/openj9/pull/8495#discussion_r417382733", "createdAt": "2020-04-29T14:57:34Z", "author": {"login": "gacholio"}, "path": "runtime/bcverify/rtverify.c", "diffHunk": "@@ -401,17 +400,187 @@ matchStack(J9BytecodeVerificationData * verifyData, J9BranchTargetStack *liveSta\n \tgoto _finished;\n }\n \n-\n-/* \n-\tWalk the bytecodes linearly and verify that the recorded stack maps match.\n-\n-\treturns BCV_SUCCESS on success\n-\treturns BCV_ERR_INTERNAL_ERROR on verification error\n-\treturns BCV_ERR_INSUFFICIENT_MEMORY on OOM\n+/**\n+* Return an extended NPE message.\n+*\n+* Note: the caller is responsible for freeing the returning string if it is not NULL.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2728f60f91ad721c7a41ba4d2c88dcd8bb08b29"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyNzUzNzI4", "url": "https://github.com/eclipse-openj9/openj9/pull/8495#pullrequestreview-402753728", "createdAt": "2020-04-29T14:58:13Z", "commit": {"oid": "e2728f60f91ad721c7a41ba4d2c88dcd8bb08b29"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNDo1ODoxM1rOGODDbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNDo1ODoxM1rOGODDbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM4MzI3Ng==", "bodyText": "The \"part 2\" is confusing, and please don't mention \"another PR\".", "url": "https://github.com/eclipse-openj9/openj9/pull/8495#discussion_r417383276", "createdAt": "2020-04-29T14:58:13Z", "author": {"login": "gacholio"}, "path": "runtime/bcverify/rtverify.c", "diffHunk": "@@ -401,17 +400,187 @@ matchStack(J9BytecodeVerificationData * verifyData, J9BranchTargetStack *liveSta\n \tgoto _finished;\n }\n \n-\n-/* \n-\tWalk the bytecodes linearly and verify that the recorded stack maps match.\n-\n-\treturns BCV_SUCCESS on success\n-\treturns BCV_ERR_INTERNAL_ERROR on verification error\n-\treturns BCV_ERR_INSUFFICIENT_MEMORY on OOM\n+/**\n+* Return an extended NPE message.\n+*\n+* Note: the caller is responsible for freeing the returning string if it is not NULL.\n+*\n+* @param vmThread The current J9VMThread\n+* @param bcCurrentPtr The pointer to the bytecode being executed and caused the NPE\n+* @param romClass The romClass of the bytecode\n+* @param constantPool The J9RomClass constant pool for the romClass\n+* @param npeCauseMsg The extended NPE message part 2 (to be provided by another PR)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2728f60f91ad721c7a41ba4d2c88dcd8bb08b29"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyNzYwMDE2", "url": "https://github.com/eclipse-openj9/openj9/pull/8495#pullrequestreview-402760016", "createdAt": "2020-04-29T15:04:36Z", "commit": {"oid": "e2728f60f91ad721c7a41ba4d2c88dcd8bb08b29"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNTowNDozNlrOGODWKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNTowNDozNlrOGODWKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM4ODA3Mg==", "bodyText": "Looks like you've lost the comment for verifyBytecodes.", "url": "https://github.com/eclipse-openj9/openj9/pull/8495#discussion_r417388072", "createdAt": "2020-04-29T15:04:36Z", "author": {"login": "gacholio"}, "path": "runtime/bcverify/rtverify.c", "diffHunk": "@@ -401,17 +400,187 @@ matchStack(J9BytecodeVerificationData * verifyData, J9BranchTargetStack *liveSta\n \tgoto _finished;\n }\n \n-\n-/* \n-\tWalk the bytecodes linearly and verify that the recorded stack maps match.\n-\n-\treturns BCV_SUCCESS on success\n-\treturns BCV_ERR_INTERNAL_ERROR on verification error\n-\treturns BCV_ERR_INSUFFICIENT_MEMORY on OOM", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2728f60f91ad721c7a41ba4d2c88dcd8bb08b29"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyNzYxMTE3", "url": "https://github.com/eclipse-openj9/openj9/pull/8495#pullrequestreview-402761117", "createdAt": "2020-04-29T15:05:45Z", "commit": {"oid": "e2728f60f91ad721c7a41ba4d2c88dcd8bb08b29"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNTowNTo0NVrOGODZOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNTowNTo0NVrOGODZOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM4ODg1OQ==", "bodyText": "Why >= ? Should this not be == ?", "url": "https://github.com/eclipse-openj9/openj9/pull/8495#discussion_r417388859", "createdAt": "2020-04-29T15:05:45Z", "author": {"login": "gacholio"}, "path": "runtime/bcverify/rtverify.c", "diffHunk": "@@ -526,6 +714,11 @@ verifyBytecodes (J9BytecodeVerificationData * verifyData)\n \n \t/* walk the bytecodes linearly */\n \twhile (pc < length) {\n+\t\tif (isNPEMsg && pc >= npePC) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2728f60f91ad721c7a41ba4d2c88dcd8bb08b29"}, "originalPosition": 337}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyNzYyMzU5", "url": "https://github.com/eclipse-openj9/openj9/pull/8495#pullrequestreview-402762359", "createdAt": "2020-04-29T15:07:02Z", "commit": {"oid": "e2728f60f91ad721c7a41ba4d2c88dcd8bb08b29"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNTowNzowMlrOGODc6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNTowNzowMlrOGODc6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM4OTgwMg==", "bodyText": "Blank line please.", "url": "https://github.com/eclipse-openj9/openj9/pull/8495#discussion_r417389802", "createdAt": "2020-04-29T15:07:02Z", "author": {"login": "gacholio"}, "path": "runtime/j9vm/javanextvmi.c", "diffHunk": "@@ -32,10 +36,87 @@ JVM_InitializeFromArchive(JNIEnv *env, jclass clz)\n #endif /* JAVA_SPEC_VERSION >= 11 */\n \n #if JAVA_SPEC_VERSION >= 14\n+typedef struct GetStackTraceElementUserData {\n+\tJ9ROMClass *romClass;\n+\tJ9ROMMethod *romMethod;\n+\tUDATA bytecodeOffset;\n+} GetStackTraceElementUserData;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2728f60f91ad721c7a41ba4d2c88dcd8bb08b29"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyNzYyNDU0", "url": "https://github.com/eclipse-openj9/openj9/pull/8495#pullrequestreview-402762454", "createdAt": "2020-04-29T15:07:08Z", "commit": {"oid": "e2728f60f91ad721c7a41ba4d2c88dcd8bb08b29"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNTowNzowOVrOGODdJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNTowNzowOVrOGODdJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM4OTg2MA==", "bodyText": "Blank line please.", "url": "https://github.com/eclipse-openj9/openj9/pull/8495#discussion_r417389860", "createdAt": "2020-04-29T15:07:09Z", "author": {"login": "gacholio"}, "path": "runtime/j9vm/javanextvmi.c", "diffHunk": "@@ -32,10 +36,87 @@ JVM_InitializeFromArchive(JNIEnv *env, jclass clz)\n #endif /* JAVA_SPEC_VERSION >= 11 */\n \n #if JAVA_SPEC_VERSION >= 14\n+typedef struct GetStackTraceElementUserData {\n+\tJ9ROMClass *romClass;\n+\tJ9ROMMethod *romMethod;\n+\tUDATA bytecodeOffset;\n+} GetStackTraceElementUserData;\n+static UDATA\n+getStackTraceElementIterator(J9VMThread *vmThread, void *voidUserData, UDATA bytecodeOffset, J9ROMClass *romClass, J9ROMMethod *romMethod, J9UTF8 *fileName, UDATA lineNumber, J9ClassLoader *classLoader)\n+{\n+\tGetStackTraceElementUserData *userData = voidUserData;\n+\n+\t/* We are done, only first stack frame is needed. */\n+\tuserData->romClass = romClass;\n+\tuserData->romMethod = romMethod;\n+\tuserData->bytecodeOffset = bytecodeOffset;\n+\n+\treturn FALSE;\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2728f60f91ad721c7a41ba4d2c88dcd8bb08b29"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyNzYzNzM3", "url": "https://github.com/eclipse-openj9/openj9/pull/8495#pullrequestreview-402763737", "createdAt": "2020-04-29T15:08:31Z", "commit": {"oid": "e2728f60f91ad721c7a41ba4d2c88dcd8bb08b29"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNTowODozMVrOGODg2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNTowODozMVrOGODg2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM5MDgxMQ==", "bodyText": "Comment seems misplaced.", "url": "https://github.com/eclipse-openj9/openj9/pull/8495#discussion_r417390811", "createdAt": "2020-04-29T15:08:31Z", "author": {"login": "gacholio"}, "path": "runtime/j9vm/javanextvmi.c", "diffHunk": "@@ -32,10 +36,87 @@ JVM_InitializeFromArchive(JNIEnv *env, jclass clz)\n #endif /* JAVA_SPEC_VERSION >= 11 */\n \n #if JAVA_SPEC_VERSION >= 14\n+typedef struct GetStackTraceElementUserData {\n+\tJ9ROMClass *romClass;\n+\tJ9ROMMethod *romMethod;\n+\tUDATA bytecodeOffset;\n+} GetStackTraceElementUserData;\n+static UDATA\n+getStackTraceElementIterator(J9VMThread *vmThread, void *voidUserData, UDATA bytecodeOffset, J9ROMClass *romClass, J9ROMMethod *romMethod, J9UTF8 *fileName, UDATA lineNumber, J9ClassLoader *classLoader)\n+{\n+\tGetStackTraceElementUserData *userData = voidUserData;\n+\n+\t/* We are done, only first stack frame is needed. */\n+\tuserData->romClass = romClass;\n+\tuserData->romMethod = romMethod;\n+\tuserData->bytecodeOffset = bytecodeOffset;\n+\n+\treturn FALSE;\n+}\n+static void cfdumpBytecodePrintFunction(void *userData, char *format, ...)\n+{\n+\tPORT_ACCESS_FROM_PORT((J9PortLibrary*)userData);\n+\tva_list args;\n+\tchar outputBuffer[512] = {0};\n+\n+\tva_start(args, format);\n+\tj9str_vprintf(outputBuffer, 512, format, args);\n+\tva_end(args);\n+\tj9tty_printf(PORTLIB, \"%s\", outputBuffer);\n+}\n+\n JNIEXPORT jstring JNICALL\n JVM_GetExtendedNPEMessage(JNIEnv *env, jthrowable throwableObj)\n {\n-\t/* Returning NULL to allow JDK14 compilation, https://github.com/eclipse/openj9/issues/7500 */\n-\treturn NULL;\n+\tJ9VMThread *vmThread = (J9VMThread *)env;\n+\tJ9JavaVM *vm = vmThread->javaVM;\n+\tjobject msgObjectRef = NULL;\n+\t\n+\tTrc_SC_GetExtendedNPEMessage_Entry(vmThread, throwableObj);\n+\tif (J9_ARE_ANY_BITS_SET(vm->extendedRuntimeFlags2, J9_EXTENDED_RUNTIME2_SHOW_EXTENDED_NPEMSG)) {\n+\t\tJ9InternalVMFunctions const * const vmFuncs = vm->internalVMFunctions;\n+\t\tchar *npeMsg = NULL;\n+\t\tGetStackTraceElementUserData userData = {0}; /* only first frame is needed */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2728f60f91ad721c7a41ba4d2c88dcd8bb08b29"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyNzY0ODcw", "url": "https://github.com/eclipse-openj9/openj9/pull/8495#pullrequestreview-402764870", "createdAt": "2020-04-29T15:09:41Z", "commit": {"oid": "e2728f60f91ad721c7a41ba4d2c88dcd8bb08b29"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNTowOTo0MlrOGODkgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNTowOTo0MlrOGODkgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM5MTc0Ng==", "bodyText": "This needs to be null-checked.", "url": "https://github.com/eclipse-openj9/openj9/pull/8495#discussion_r417391746", "createdAt": "2020-04-29T15:09:42Z", "author": {"login": "gacholio"}, "path": "runtime/j9vm/javanextvmi.c", "diffHunk": "@@ -32,10 +36,87 @@ JVM_InitializeFromArchive(JNIEnv *env, jclass clz)\n #endif /* JAVA_SPEC_VERSION >= 11 */\n \n #if JAVA_SPEC_VERSION >= 14\n+typedef struct GetStackTraceElementUserData {\n+\tJ9ROMClass *romClass;\n+\tJ9ROMMethod *romMethod;\n+\tUDATA bytecodeOffset;\n+} GetStackTraceElementUserData;\n+static UDATA\n+getStackTraceElementIterator(J9VMThread *vmThread, void *voidUserData, UDATA bytecodeOffset, J9ROMClass *romClass, J9ROMMethod *romMethod, J9UTF8 *fileName, UDATA lineNumber, J9ClassLoader *classLoader)\n+{\n+\tGetStackTraceElementUserData *userData = voidUserData;\n+\n+\t/* We are done, only first stack frame is needed. */\n+\tuserData->romClass = romClass;\n+\tuserData->romMethod = romMethod;\n+\tuserData->bytecodeOffset = bytecodeOffset;\n+\n+\treturn FALSE;\n+}\n+static void cfdumpBytecodePrintFunction(void *userData, char *format, ...)\n+{\n+\tPORT_ACCESS_FROM_PORT((J9PortLibrary*)userData);\n+\tva_list args;\n+\tchar outputBuffer[512] = {0};\n+\n+\tva_start(args, format);\n+\tj9str_vprintf(outputBuffer, 512, format, args);\n+\tva_end(args);\n+\tj9tty_printf(PORTLIB, \"%s\", outputBuffer);\n+}\n+\n JNIEXPORT jstring JNICALL\n JVM_GetExtendedNPEMessage(JNIEnv *env, jthrowable throwableObj)\n {\n-\t/* Returning NULL to allow JDK14 compilation, https://github.com/eclipse/openj9/issues/7500 */\n-\treturn NULL;\n+\tJ9VMThread *vmThread = (J9VMThread *)env;\n+\tJ9JavaVM *vm = vmThread->javaVM;\n+\tjobject msgObjectRef = NULL;\n+\t\n+\tTrc_SC_GetExtendedNPEMessage_Entry(vmThread, throwableObj);\n+\tif (J9_ARE_ANY_BITS_SET(vm->extendedRuntimeFlags2, J9_EXTENDED_RUNTIME2_SHOW_EXTENDED_NPEMSG)) {\n+\t\tJ9InternalVMFunctions const * const vmFuncs = vm->internalVMFunctions;\n+\t\tchar *npeMsg = NULL;\n+\t\tGetStackTraceElementUserData userData = {0}; /* only first frame is needed */\n+\t\t\n+\t\tTrc_SC_GetExtendedNPEMessage_Entry2(vmThread, throwableObj);\n+\t\tvmFuncs->internalEnterVMFromJNI(vmThread);\n+\t\tuserData.bytecodeOffset = UDATA_MAX;\n+\t\tvmFuncs->iterateStackTrace(vmThread, (j9object_t*)throwableObj, getStackTraceElementIterator, &userData, FALSE);\n+\t\tif ((NULL != userData.romClass) && (NULL != userData.romMethod) && (UDATA_MAX != userData.bytecodeOffset)) {\n+\t\t\tJ9BytecodeVerificationData *bcvd = vm->bytecodeVerificationData;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2728f60f91ad721c7a41ba4d2c88dcd8bb08b29"}, "originalPosition": 75}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyNzcxNzU2", "url": "https://github.com/eclipse-openj9/openj9/pull/8495#pullrequestreview-402771756", "createdAt": "2020-04-29T15:16:49Z", "commit": {"oid": "e2728f60f91ad721c7a41ba4d2c88dcd8bb08b29"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNToxNjo0OVrOGOD51A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNToxNjo0OVrOGOD51A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM5NzIwNA==", "bodyText": "This should move a bit further out - if the internal string allocation fails, you should also set this. Suggest moving to after the memory free.", "url": "https://github.com/eclipse-openj9/openj9/pull/8495#discussion_r417397204", "createdAt": "2020-04-29T15:16:49Z", "author": {"login": "gacholio"}, "path": "runtime/j9vm/javanextvmi.c", "diffHunk": "@@ -32,10 +36,87 @@ JVM_InitializeFromArchive(JNIEnv *env, jclass clz)\n #endif /* JAVA_SPEC_VERSION >= 11 */\n \n #if JAVA_SPEC_VERSION >= 14\n+typedef struct GetStackTraceElementUserData {\n+\tJ9ROMClass *romClass;\n+\tJ9ROMMethod *romMethod;\n+\tUDATA bytecodeOffset;\n+} GetStackTraceElementUserData;\n+static UDATA\n+getStackTraceElementIterator(J9VMThread *vmThread, void *voidUserData, UDATA bytecodeOffset, J9ROMClass *romClass, J9ROMMethod *romMethod, J9UTF8 *fileName, UDATA lineNumber, J9ClassLoader *classLoader)\n+{\n+\tGetStackTraceElementUserData *userData = voidUserData;\n+\n+\t/* We are done, only first stack frame is needed. */\n+\tuserData->romClass = romClass;\n+\tuserData->romMethod = romMethod;\n+\tuserData->bytecodeOffset = bytecodeOffset;\n+\n+\treturn FALSE;\n+}\n+static void cfdumpBytecodePrintFunction(void *userData, char *format, ...)\n+{\n+\tPORT_ACCESS_FROM_PORT((J9PortLibrary*)userData);\n+\tva_list args;\n+\tchar outputBuffer[512] = {0};\n+\n+\tva_start(args, format);\n+\tj9str_vprintf(outputBuffer, 512, format, args);\n+\tva_end(args);\n+\tj9tty_printf(PORTLIB, \"%s\", outputBuffer);\n+}\n+\n JNIEXPORT jstring JNICALL\n JVM_GetExtendedNPEMessage(JNIEnv *env, jthrowable throwableObj)\n {\n-\t/* Returning NULL to allow JDK14 compilation, https://github.com/eclipse/openj9/issues/7500 */\n-\treturn NULL;\n+\tJ9VMThread *vmThread = (J9VMThread *)env;\n+\tJ9JavaVM *vm = vmThread->javaVM;\n+\tjobject msgObjectRef = NULL;\n+\t\n+\tTrc_SC_GetExtendedNPEMessage_Entry(vmThread, throwableObj);\n+\tif (J9_ARE_ANY_BITS_SET(vm->extendedRuntimeFlags2, J9_EXTENDED_RUNTIME2_SHOW_EXTENDED_NPEMSG)) {\n+\t\tJ9InternalVMFunctions const * const vmFuncs = vm->internalVMFunctions;\n+\t\tchar *npeMsg = NULL;\n+\t\tGetStackTraceElementUserData userData = {0}; /* only first frame is needed */\n+\t\t\n+\t\tTrc_SC_GetExtendedNPEMessage_Entry2(vmThread, throwableObj);\n+\t\tvmFuncs->internalEnterVMFromJNI(vmThread);\n+\t\tuserData.bytecodeOffset = UDATA_MAX;\n+\t\tvmFuncs->iterateStackTrace(vmThread, (j9object_t*)throwableObj, getStackTraceElementIterator, &userData, FALSE);\n+\t\tif ((NULL != userData.romClass) && (NULL != userData.romMethod) && (UDATA_MAX != userData.bytecodeOffset)) {\n+\t\t\tJ9BytecodeVerificationData *bcvd = vm->bytecodeVerificationData;\n+\n+\t\t\tif (TrcEnabled_Trc_SC_GetExtendedNPEMessage_Dump_Bytecode) {\n+\t\t\t\tPORT_ACCESS_FROM_VMC(vmThread);\n+\t\t\t\tU_8 *bytecodes = J9_BYTECODE_START_FROM_ROM_METHOD(userData.romMethod);\n+\t\t\t\tU_32 flags = 0;\n+\n+#ifdef J9VM_ENV_LITTLE_ENDIAN\n+\t\t\t\tflags |= BCT_LittleEndianOutput;\n+#else\n+\t\t\t\tflags |= BCT_BigEndianOutput;\n+#endif\n+\t\t\t\tj9bcutil_dumpBytecodes(PORTLIB, userData.romClass, bytecodes, 0, userData.bytecodeOffset, flags, (void *)cfdumpBytecodePrintFunction, PORTLIB, \"\");\n+\t\t\t}\n+\t\t\tbcvd->vmStruct = vmThread;\n+\t\t\tj9bcv_verifyBytecodes(vm->portLibrary, NULL, userData.romClass, bcvd, userData.romMethod, userData.bytecodeOffset, &npeMsg);\n+\t\t\tif (NULL != npeMsg) {\n+\t\t\t\tPORT_ACCESS_FROM_VMC(vmThread);\n+\t\t\t\tj9object_t msgObject = vm->memoryManagerFunctions->j9gc_createJavaLangString(vmThread, (U_8 *)npeMsg, strlen(npeMsg), 0);\n+\t\t\t\tif (NULL != msgObject) {\n+\t\t\t\t\tmsgObjectRef = vmFuncs->j9jni_createLocalRef(env, msgObject);\n+\t\t\t\t\tif (NULL == msgObjectRef) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2728f60f91ad721c7a41ba4d2c88dcd8bb08b29"}, "originalPosition": 96}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyNzc0NjQ0", "url": "https://github.com/eclipse-openj9/openj9/pull/8495#pullrequestreview-402774644", "createdAt": "2020-04-29T15:19:48Z", "commit": {"oid": "e2728f60f91ad721c7a41ba4d2c88dcd8bb08b29"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNToxOTo0OFrOGOECng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNToxOTo0OFrOGOECng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM5OTQ1NA==", "bodyText": "What is the purpose of this? It's controlled by a tracepoint, which is very odd.\nIf this was just debug, I suggest you remove it as it's going to link in unnecessary code.", "url": "https://github.com/eclipse-openj9/openj9/pull/8495#discussion_r417399454", "createdAt": "2020-04-29T15:19:48Z", "author": {"login": "gacholio"}, "path": "runtime/j9vm/javanextvmi.c", "diffHunk": "@@ -32,10 +36,87 @@ JVM_InitializeFromArchive(JNIEnv *env, jclass clz)\n #endif /* JAVA_SPEC_VERSION >= 11 */\n \n #if JAVA_SPEC_VERSION >= 14\n+typedef struct GetStackTraceElementUserData {\n+\tJ9ROMClass *romClass;\n+\tJ9ROMMethod *romMethod;\n+\tUDATA bytecodeOffset;\n+} GetStackTraceElementUserData;\n+static UDATA\n+getStackTraceElementIterator(J9VMThread *vmThread, void *voidUserData, UDATA bytecodeOffset, J9ROMClass *romClass, J9ROMMethod *romMethod, J9UTF8 *fileName, UDATA lineNumber, J9ClassLoader *classLoader)\n+{\n+\tGetStackTraceElementUserData *userData = voidUserData;\n+\n+\t/* We are done, only first stack frame is needed. */\n+\tuserData->romClass = romClass;\n+\tuserData->romMethod = romMethod;\n+\tuserData->bytecodeOffset = bytecodeOffset;\n+\n+\treturn FALSE;\n+}\n+static void cfdumpBytecodePrintFunction(void *userData, char *format, ...)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2728f60f91ad721c7a41ba4d2c88dcd8bb08b29"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyODY3Mzc2", "url": "https://github.com/eclipse-openj9/openj9/pull/8495#pullrequestreview-402867376", "createdAt": "2020-04-29T17:06:21Z", "commit": {"oid": "e2728f60f91ad721c7a41ba4d2c88dcd8bb08b29"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNzowNjoyMVrOGOIkEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNzowNjoyMVrOGOIkEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ3MzU1NQ==", "bodyText": "Please bracket the >=", "url": "https://github.com/eclipse-openj9/openj9/pull/8495#discussion_r417473555", "createdAt": "2020-04-29T17:06:21Z", "author": {"login": "gacholio"}, "path": "runtime/bcverify/rtverify.c", "diffHunk": "@@ -526,6 +714,11 @@ verifyBytecodes (J9BytecodeVerificationData * verifyData)\n \n \t/* walk the bytecodes linearly */\n \twhile (pc < length) {\n+\t\tif (isNPEMsg && pc >= npePC) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2728f60f91ad721c7a41ba4d2c88dcd8bb08b29"}, "originalPosition": 337}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e2728f60f91ad721c7a41ba4d2c88dcd8bb08b29", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/e2728f60f91ad721c7a41ba4d2c88dcd8bb08b29", "committedDate": "2020-04-27T21:42:59Z", "message": "JEP358 extended NPE message part 1 - result of this NPE\n\nJVM_GetExtendedNPEMessage is updated to invoke iterateStackTrace() with\ngetStackTraceElementIterator to get the\nromClass/romMethod/bytecodeOffset of first frame of the exception object\nthen invoke j9bcv_verifyBytecodes() for message\ngeneration;\nVerifier functions j9bcv_verifyBytecodes() & verifyBytecodes() are\nmodified to take extra parameter and invoke getCompleteNPEMessage() to\ncompute extended NPE messages;\nAdded getCompleteNPEMessage() to compute NPE message according to the\nbytecode itself for aload/astore, arraylength, athrow,\nmonitorenter/monitorexit, the bytecode and field index for\ngetfield/putfield, the bytecode and method index for\ninvokeinterface/invokespecial/invokevirtual;\nAdded a runtime flag J9_EXTENDED_RUNTIME2_SHOW_EXTENDED_NPEMSG to\nspecify the command line option\n-XX:{+|-}ShowCodeDetailsInExceptionMessages;\nAdded NLS and trace messages.\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}, "afterCommit": {"oid": "585a6ae2c445a967f58a4007ffe96e0feccffe4e", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/585a6ae2c445a967f58a4007ffe96e0feccffe4e", "committedDate": "2020-04-29T17:05:38Z", "message": "JEP358 extended NPE message part 1 - result of this NPE\n\nJVM_GetExtendedNPEMessage is updated to invoke iterateStackTrace() with\ngetStackTraceElementIterator to get the\nromClass/romMethod/bytecodeOffset of first frame of the exception object\nthen invoke j9bcv_verifyBytecodes() for message\ngeneration;\nVerifier functions j9bcv_verifyBytecodes() & verifyBytecodes() are\nmodified to take extra parameter and invoke getCompleteNPEMessage() to\ncompute extended NPE messages;\nAdded getCompleteNPEMessage() to compute NPE message according to the\nbytecode itself for aload/astore, arraylength, athrow,\nmonitorenter/monitorexit, the bytecode and field index for\ngetfield/putfield, the bytecode and method index for\ninvokeinterface/invokespecial/invokevirtual;\nAdded a runtime flag J9_EXTENDED_RUNTIME2_SHOW_EXTENDED_NPEMSG to\nspecify the command line option\n-XX:{+|-}ShowCodeDetailsInExceptionMessages;\nAdded NLS and trace messages.\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "585a6ae2c445a967f58a4007ffe96e0feccffe4e", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/585a6ae2c445a967f58a4007ffe96e0feccffe4e", "committedDate": "2020-04-29T17:05:38Z", "message": "JEP358 extended NPE message part 1 - result of this NPE\n\nJVM_GetExtendedNPEMessage is updated to invoke iterateStackTrace() with\ngetStackTraceElementIterator to get the\nromClass/romMethod/bytecodeOffset of first frame of the exception object\nthen invoke j9bcv_verifyBytecodes() for message\ngeneration;\nVerifier functions j9bcv_verifyBytecodes() & verifyBytecodes() are\nmodified to take extra parameter and invoke getCompleteNPEMessage() to\ncompute extended NPE messages;\nAdded getCompleteNPEMessage() to compute NPE message according to the\nbytecode itself for aload/astore, arraylength, athrow,\nmonitorenter/monitorexit, the bytecode and field index for\ngetfield/putfield, the bytecode and method index for\ninvokeinterface/invokespecial/invokevirtual;\nAdded a runtime flag J9_EXTENDED_RUNTIME2_SHOW_EXTENDED_NPEMSG to\nspecify the command line option\n-XX:{+|-}ShowCodeDetailsInExceptionMessages;\nAdded NLS and trace messages.\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}, "afterCommit": {"oid": "c5537048efbeb7c497be079f933a740562f7c454", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/c5537048efbeb7c497be079f933a740562f7c454", "committedDate": "2020-04-29T17:12:30Z", "message": "JEP358 extended NPE message part 1 - result of this NPE\n\nJVM_GetExtendedNPEMessage is updated to invoke iterateStackTrace() with\ngetStackTraceElementIterator to get the\nromClass/romMethod/bytecodeOffset of first frame of the exception object\nthen invoke j9bcv_verifyBytecodes() for message\ngeneration;\nVerifier functions j9bcv_verifyBytecodes() & verifyBytecodes() are\nmodified to take extra parameter and invoke getCompleteNPEMessage() to\ncompute extended NPE messages;\nAdded getCompleteNPEMessage() to compute NPE message according to the\nbytecode itself for aload/astore, arraylength, athrow,\nmonitorenter/monitorexit, the bytecode and field index for\ngetfield/putfield, the bytecode and method index for\ninvokeinterface/invokespecial/invokevirtual;\nAdded a runtime flag J9_EXTENDED_RUNTIME2_SHOW_EXTENDED_NPEMSG to\nspecify the command line option\n-XX:{+|-}ShowCodeDetailsInExceptionMessages;\nAdded NLS and trace messages.\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyOTEzMTYy", "url": "https://github.com/eclipse-openj9/openj9/pull/8495#pullrequestreview-402913162", "createdAt": "2020-04-29T18:05:42Z", "commit": {"oid": "c5537048efbeb7c497be079f933a740562f7c454"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxODowNTo0MlrOGOK0nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxODowNTo0MlrOGOK0nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUxMDU1Nw==", "bodyText": "Please use #if defined rather than #ifdef, and please comment the else and endif directives (for all ifdefs in this file and any others you may have added).", "url": "https://github.com/eclipse-openj9/openj9/pull/8495#discussion_r417510557", "createdAt": "2020-04-29T18:05:42Z", "author": {"login": "gacholio"}, "path": "runtime/j9vm/javanextvmi.c", "diffHunk": "@@ -32,10 +40,96 @@ JVM_InitializeFromArchive(JNIEnv *env, jclass clz)\n #endif /* JAVA_SPEC_VERSION >= 11 */\n \n #if JAVA_SPEC_VERSION >= 14\n+typedef struct GetStackTraceElementUserData {\n+\tJ9ROMClass *romClass;\n+\tJ9ROMMethod *romMethod;\n+\tUDATA bytecodeOffset;\n+} GetStackTraceElementUserData;\n+\n+static UDATA\n+getStackTraceElementIterator(J9VMThread *vmThread, void *voidUserData, UDATA bytecodeOffset, J9ROMClass *romClass, J9ROMMethod *romMethod, J9UTF8 *fileName, UDATA lineNumber, J9ClassLoader *classLoader)\n+{\n+\tGetStackTraceElementUserData *userData = voidUserData;\n+\n+\t/* We are done, only first stack frame is needed. */\n+\tuserData->romClass = romClass;\n+\tuserData->romMethod = romMethod;\n+\tuserData->bytecodeOffset = bytecodeOffset;\n+\n+\treturn FALSE;\n+}\n+\n+#ifdef DEBUG_BCV\n+static void cfdumpBytecodePrintFunction(void *userData, char *format, ...)\n+{\n+\tPORT_ACCESS_FROM_PORT((J9PortLibrary*)userData);\n+\tva_list args;\n+\tchar outputBuffer[512] = {0};\n+\n+\tva_start(args, format);\n+\tj9str_vprintf(outputBuffer, 512, format, args);\n+\tva_end(args);\n+\tj9tty_printf(PORTLIB, \"%s\", outputBuffer);\n+}\n+#endif\n+\n JNIEXPORT jstring JNICALL\n JVM_GetExtendedNPEMessage(JNIEnv *env, jthrowable throwableObj)\n {\n-\t/* Returning NULL to allow JDK14 compilation, https://github.com/eclipse/openj9/issues/7500 */\n-\treturn NULL;\n+\tJ9VMThread *vmThread = (J9VMThread *)env;\n+\tJ9JavaVM *vm = vmThread->javaVM;\n+\tjobject msgObjectRef = NULL;\n+\t\n+\tTrc_SC_GetExtendedNPEMessage_Entry(vmThread, throwableObj);\n+\tif (J9_ARE_ANY_BITS_SET(vm->extendedRuntimeFlags2, J9_EXTENDED_RUNTIME2_SHOW_EXTENDED_NPEMSG)) {\n+\t\tJ9InternalVMFunctions const * const vmFuncs = vm->internalVMFunctions;\n+\t\tchar *npeMsg = NULL;\n+\t\tGetStackTraceElementUserData userData = {0};\n+\t\tJ9BytecodeVerificationData *bcvd = vm->bytecodeVerificationData;\n+\t\t\n+\t\tTrc_SC_GetExtendedNPEMessage_Entry2(vmThread, throwableObj);\n+\t\tvmFuncs->internalEnterVMFromJNI(vmThread);\n+\t\tuserData.bytecodeOffset = UDATA_MAX;\n+\t\tvmFuncs->iterateStackTrace(vmThread, (j9object_t*)throwableObj, getStackTraceElementIterator, &userData, FALSE);\n+\t\tif ((NULL != userData.romClass)\n+\t\t\t&& (NULL != userData.romMethod)\n+\t\t\t&& (UDATA_MAX != userData.bytecodeOffset)\n+\t\t\t&& (NULL != bcvd)\n+\t\t) {\n+#ifdef DEBUG_BCV", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5537048efbeb7c497be079f933a740562f7c454"}, "originalPosition": 88}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyOTE0MTM3", "url": "https://github.com/eclipse-openj9/openj9/pull/8495#pullrequestreview-402914137", "createdAt": "2020-04-29T18:07:06Z", "commit": {"oid": "c5537048efbeb7c497be079f933a740562f7c454"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c5537048efbeb7c497be079f933a740562f7c454", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/c5537048efbeb7c497be079f933a740562f7c454", "committedDate": "2020-04-29T17:12:30Z", "message": "JEP358 extended NPE message part 1 - result of this NPE\n\nJVM_GetExtendedNPEMessage is updated to invoke iterateStackTrace() with\ngetStackTraceElementIterator to get the\nromClass/romMethod/bytecodeOffset of first frame of the exception object\nthen invoke j9bcv_verifyBytecodes() for message\ngeneration;\nVerifier functions j9bcv_verifyBytecodes() & verifyBytecodes() are\nmodified to take extra parameter and invoke getCompleteNPEMessage() to\ncompute extended NPE messages;\nAdded getCompleteNPEMessage() to compute NPE message according to the\nbytecode itself for aload/astore, arraylength, athrow,\nmonitorenter/monitorexit, the bytecode and field index for\ngetfield/putfield, the bytecode and method index for\ninvokeinterface/invokespecial/invokevirtual;\nAdded a runtime flag J9_EXTENDED_RUNTIME2_SHOW_EXTENDED_NPEMSG to\nspecify the command line option\n-XX:{+|-}ShowCodeDetailsInExceptionMessages;\nAdded NLS and trace messages.\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}, "afterCommit": {"oid": "095c2661048901cde9506ae381c8f0016cc58f1e", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/095c2661048901cde9506ae381c8f0016cc58f1e", "committedDate": "2020-04-29T18:27:06Z", "message": "JEP358 extended NPE message part 1 - result of this NPE\n\nJVM_GetExtendedNPEMessage is updated to invoke iterateStackTrace() with\ngetStackTraceElementIterator to get the\nromClass/romMethod/bytecodeOffset of first frame of the exception object\nthen invoke j9bcv_verifyBytecodes() for message\ngeneration;\nVerifier functions j9bcv_verifyBytecodes() & verifyBytecodes() are\nmodified to take extra parameter and invoke getCompleteNPEMessage() to\ncompute extended NPE messages;\nAdded getCompleteNPEMessage() to compute NPE message according to the\nbytecode itself for aload/astore, arraylength, athrow,\nmonitorenter/monitorexit, the bytecode and field index for\ngetfield/putfield, the bytecode and method index for\ninvokeinterface/invokespecial/invokevirtual;\nAdded a runtime flag J9_EXTENDED_RUNTIME2_SHOW_EXTENDED_NPEMSG to\nspecify the command line option\n-XX:{+|-}ShowCodeDetailsInExceptionMessages;\nAdded NLS and trace messages.\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "095c2661048901cde9506ae381c8f0016cc58f1e", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/095c2661048901cde9506ae381c8f0016cc58f1e", "committedDate": "2020-04-29T18:27:06Z", "message": "JEP358 extended NPE message part 1 - result of this NPE\n\nJVM_GetExtendedNPEMessage is updated to invoke iterateStackTrace() with\ngetStackTraceElementIterator to get the\nromClass/romMethod/bytecodeOffset of first frame of the exception object\nthen invoke j9bcv_verifyBytecodes() for message\ngeneration;\nVerifier functions j9bcv_verifyBytecodes() & verifyBytecodes() are\nmodified to take extra parameter and invoke getCompleteNPEMessage() to\ncompute extended NPE messages;\nAdded getCompleteNPEMessage() to compute NPE message according to the\nbytecode itself for aload/astore, arraylength, athrow,\nmonitorenter/monitorexit, the bytecode and field index for\ngetfield/putfield, the bytecode and method index for\ninvokeinterface/invokespecial/invokevirtual;\nAdded a runtime flag J9_EXTENDED_RUNTIME2_SHOW_EXTENDED_NPEMSG to\nspecify the command line option\n-XX:{+|-}ShowCodeDetailsInExceptionMessages;\nAdded NLS and trace messages.\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}, "afterCommit": {"oid": "3ce5b5a94ae6e15778db31993b1eb9fae4477e6d", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/3ce5b5a94ae6e15778db31993b1eb9fae4477e6d", "committedDate": "2020-05-04T22:06:34Z", "message": "JEP358 extended NPE message part 1 - result of this NPE\n\nJVM_GetExtendedNPEMessage is updated to invoke iterateStackTrace() with\ngetStackTraceElementIterator to get the\nromClass/romMethod/bytecodeOffset of first frame of the exception object\nthen invoke j9bcv_verifyBytecodes() for message\ngeneration;\nVerifier functions j9bcv_verifyBytecodes() & verifyBytecodes() are\nmodified to take extra parameter and invoke getCompleteNPEMessage() to\ncompute extended NPE messages;\nAdded getCompleteNPEMessage() to compute NPE message according to the\nbytecode itself for aload/astore, arraylength, athrow,\nmonitorenter/monitorexit, the bytecode and field index for\ngetfield/putfield, the bytecode and method index for\ninvokeinterface/invokespecial/invokevirtual;\nAdded a runtime flag J9_EXTENDED_RUNTIME2_SHOW_EXTENDED_NPEMSG to\nspecify the command line option\n-XX:{+|-}ShowCodeDetailsInExceptionMessages;\nAdded NLS and trace messages.\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3ce5b5a94ae6e15778db31993b1eb9fae4477e6d", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/3ce5b5a94ae6e15778db31993b1eb9fae4477e6d", "committedDate": "2020-05-04T22:06:34Z", "message": "JEP358 extended NPE message part 1 - result of this NPE\n\nJVM_GetExtendedNPEMessage is updated to invoke iterateStackTrace() with\ngetStackTraceElementIterator to get the\nromClass/romMethod/bytecodeOffset of first frame of the exception object\nthen invoke j9bcv_verifyBytecodes() for message\ngeneration;\nVerifier functions j9bcv_verifyBytecodes() & verifyBytecodes() are\nmodified to take extra parameter and invoke getCompleteNPEMessage() to\ncompute extended NPE messages;\nAdded getCompleteNPEMessage() to compute NPE message according to the\nbytecode itself for aload/astore, arraylength, athrow,\nmonitorenter/monitorexit, the bytecode and field index for\ngetfield/putfield, the bytecode and method index for\ninvokeinterface/invokespecial/invokevirtual;\nAdded a runtime flag J9_EXTENDED_RUNTIME2_SHOW_EXTENDED_NPEMSG to\nspecify the command line option\n-XX:{+|-}ShowCodeDetailsInExceptionMessages;\nAdded NLS and trace messages.\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}, "afterCommit": {"oid": "a01d8f6841134860a831cd60a7a8c72028740871", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/a01d8f6841134860a831cd60a7a8c72028740871", "committedDate": "2020-05-13T10:42:48Z", "message": "JEP358 extended NPE message part 1 - result of this NPE\n\nJVM_GetExtendedNPEMessage is updated to invoke iterateStackTrace() with\ngetStackTraceElementIterator to get the\nromClass/romMethod/bytecodeOffset of first frame of the exception object\nthen invoke getCompleteNPEMessage() for message\ngeneration;\nAdded getCompleteNPEMessage() to compute NPE message according to the\nbytecode itself for aload/astore, arraylength, athrow,\nmonitorenter/monitorexit, the bytecode and field index for\ngetfield/putfield, the bytecode and method index for\ninvokeinterface/invokespecial/invokevirtual;\nAdded a runtime flag J9_EXTENDED_RUNTIME2_SHOW_EXTENDED_NPEMSG to\nspecify the command line option\n-XX:{+|-}ShowCodeDetailsInExceptionMessages;\nAdded trace messages.\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a01d8f6841134860a831cd60a7a8c72028740871", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/a01d8f6841134860a831cd60a7a8c72028740871", "committedDate": "2020-05-13T10:42:48Z", "message": "JEP358 extended NPE message part 1 - result of this NPE\n\nJVM_GetExtendedNPEMessage is updated to invoke iterateStackTrace() with\ngetStackTraceElementIterator to get the\nromClass/romMethod/bytecodeOffset of first frame of the exception object\nthen invoke getCompleteNPEMessage() for message\ngeneration;\nAdded getCompleteNPEMessage() to compute NPE message according to the\nbytecode itself for aload/astore, arraylength, athrow,\nmonitorenter/monitorexit, the bytecode and field index for\ngetfield/putfield, the bytecode and method index for\ninvokeinterface/invokespecial/invokevirtual;\nAdded a runtime flag J9_EXTENDED_RUNTIME2_SHOW_EXTENDED_NPEMSG to\nspecify the command line option\n-XX:{+|-}ShowCodeDetailsInExceptionMessages;\nAdded trace messages.\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}, "afterCommit": {"oid": "b7c3b3bd0721e0b9c3e35cda73780d5110ebe335", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/b7c3b3bd0721e0b9c3e35cda73780d5110ebe335", "committedDate": "2020-05-14T02:54:06Z", "message": "JEP358 extended NPE message part 1 - result of this NPE\n\nJVM_GetExtendedNPEMessage is updated to invoke iterateStackTrace() with\ngetStackTraceElementIterator to get the\nromClass/romMethod/bytecodeOffset of first frame of the exception object\nthen invoke getCompleteNPEMessage() for message\ngeneration;\nAdded getCompleteNPEMessage() to compute NPE message according to the\nbytecode itself for aload/astore, arraylength, athrow,\nmonitorenter/monitorexit, the bytecode and field index for\ngetfield/putfield, the bytecode and method index for\ninvokeinterface/invokespecial/invokevirtual;\nAdded a runtime flag J9_EXTENDED_RUNTIME2_SHOW_EXTENDED_NPEMSG to\nspecify the command line option\n-XX:{+|-}ShowCodeDetailsInExceptionMessages;\nAdded trace messages.\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExNDgyODg2", "url": "https://github.com/eclipse-openj9/openj9/pull/8495#pullrequestreview-411482886", "createdAt": "2020-05-14T05:53:19Z", "commit": {"oid": "b7c3b3bd0721e0b9c3e35cda73780d5110ebe335"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNTo1MzoxOVrOGVM-yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNjoxMzoyOFrOGVNYQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg4NTk2Mg==", "bodyText": "I thought we had a macro for unwrapping jobjects but I can't find it now.  @gacholio do you know what I'm looking for?", "url": "https://github.com/eclipse-openj9/openj9/pull/8495#discussion_r424885962", "createdAt": "2020-05-14T05:53:19Z", "author": {"login": "DanHeidinga"}, "path": "runtime/j9vm/javanextvmi.c", "diffHunk": "@@ -32,10 +40,93 @@ JVM_InitializeFromArchive(JNIEnv *env, jclass clz)\n #endif /* JAVA_SPEC_VERSION >= 11 */\n \n #if JAVA_SPEC_VERSION >= 14\n+typedef struct GetStackTraceElementUserData {\n+\tJ9ROMClass *romClass;\n+\tJ9ROMMethod *romMethod;\n+\tUDATA bytecodeOffset;\n+} GetStackTraceElementUserData;\n+\n+static UDATA\n+getStackTraceElementIterator(J9VMThread *vmThread, void *voidUserData, UDATA bytecodeOffset, J9ROMClass *romClass, J9ROMMethod *romMethod, J9UTF8 *fileName, UDATA lineNumber, J9ClassLoader *classLoader, J9Class* ramClass)\n+{\n+\tGetStackTraceElementUserData *userData = voidUserData;\n+\n+\t/* We are done, only first stack frame is needed. */\n+\tuserData->romClass = romClass;\n+\tuserData->romMethod = romMethod;\n+\tuserData->bytecodeOffset = bytecodeOffset;\n+\n+\treturn FALSE;\n+}\n+\n+#if defined(DEBUG_BCV)\n+static void cfdumpBytecodePrintFunction(void *userData, char *format, ...)\n+{\n+\tPORT_ACCESS_FROM_PORT((J9PortLibrary*)userData);\n+\tva_list args;\n+\tchar outputBuffer[512] = {0};\n+\n+\tva_start(args, format);\n+\tj9str_vprintf(outputBuffer, 512, format, args);\n+\tva_end(args);\n+\tj9tty_printf(PORTLIB, \"%s\", outputBuffer);\n+}\n+#endif /* defined(DEBUG_BCV) */\n+\n JNIEXPORT jstring JNICALL\n JVM_GetExtendedNPEMessage(JNIEnv *env, jthrowable throwableObj)\n {\n-\t/* Returning NULL to allow JDK14 compilation, https://github.com/eclipse/openj9/issues/7500 */\n-\treturn NULL;\n+\tJ9VMThread *vmThread = (J9VMThread *)env;\n+\tJ9JavaVM *vm = vmThread->javaVM;\n+\tjobject msgObjectRef = NULL;\n+\t\n+\tTrc_SC_GetExtendedNPEMessage_Entry(vmThread, throwableObj);\n+\tif (J9_ARE_ANY_BITS_SET(vm->extendedRuntimeFlags2, J9_EXTENDED_RUNTIME2_SHOW_EXTENDED_NPEMSG)) {\n+\t\tJ9InternalVMFunctions const * const vmFuncs = vm->internalVMFunctions;\n+\t\tchar *npeMsg = NULL;\n+\t\tGetStackTraceElementUserData userData = {0};\n+\t\t\n+\t\tTrc_SC_GetExtendedNPEMessage_Entry2(vmThread, throwableObj);\n+\t\tvmFuncs->internalEnterVMFromJNI(vmThread);\n+\t\tuserData.bytecodeOffset = UDATA_MAX;\n+\t\tvmFuncs->iterateStackTrace(vmThread, (j9object_t*)throwableObj, getStackTraceElementIterator, &userData, FALSE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7c3b3bd0721e0b9c3e35cda73780d5110ebe335"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg4NjkwNQ==", "bodyText": "I'd rather keep throwing the NPE without the extra message here.  It's the application error that's the root cause.\nOtherwise, the OOM should have the NPE as its cause", "url": "https://github.com/eclipse-openj9/openj9/pull/8495#discussion_r424886905", "createdAt": "2020-05-14T05:56:22Z", "author": {"login": "DanHeidinga"}, "path": "runtime/j9vm/javanextvmi.c", "diffHunk": "@@ -32,10 +40,93 @@ JVM_InitializeFromArchive(JNIEnv *env, jclass clz)\n #endif /* JAVA_SPEC_VERSION >= 11 */\n \n #if JAVA_SPEC_VERSION >= 14\n+typedef struct GetStackTraceElementUserData {\n+\tJ9ROMClass *romClass;\n+\tJ9ROMMethod *romMethod;\n+\tUDATA bytecodeOffset;\n+} GetStackTraceElementUserData;\n+\n+static UDATA\n+getStackTraceElementIterator(J9VMThread *vmThread, void *voidUserData, UDATA bytecodeOffset, J9ROMClass *romClass, J9ROMMethod *romMethod, J9UTF8 *fileName, UDATA lineNumber, J9ClassLoader *classLoader, J9Class* ramClass)\n+{\n+\tGetStackTraceElementUserData *userData = voidUserData;\n+\n+\t/* We are done, only first stack frame is needed. */\n+\tuserData->romClass = romClass;\n+\tuserData->romMethod = romMethod;\n+\tuserData->bytecodeOffset = bytecodeOffset;\n+\n+\treturn FALSE;\n+}\n+\n+#if defined(DEBUG_BCV)\n+static void cfdumpBytecodePrintFunction(void *userData, char *format, ...)\n+{\n+\tPORT_ACCESS_FROM_PORT((J9PortLibrary*)userData);\n+\tva_list args;\n+\tchar outputBuffer[512] = {0};\n+\n+\tva_start(args, format);\n+\tj9str_vprintf(outputBuffer, 512, format, args);\n+\tva_end(args);\n+\tj9tty_printf(PORTLIB, \"%s\", outputBuffer);\n+}\n+#endif /* defined(DEBUG_BCV) */\n+\n JNIEXPORT jstring JNICALL\n JVM_GetExtendedNPEMessage(JNIEnv *env, jthrowable throwableObj)\n {\n-\t/* Returning NULL to allow JDK14 compilation, https://github.com/eclipse/openj9/issues/7500 */\n-\treturn NULL;\n+\tJ9VMThread *vmThread = (J9VMThread *)env;\n+\tJ9JavaVM *vm = vmThread->javaVM;\n+\tjobject msgObjectRef = NULL;\n+\t\n+\tTrc_SC_GetExtendedNPEMessage_Entry(vmThread, throwableObj);\n+\tif (J9_ARE_ANY_BITS_SET(vm->extendedRuntimeFlags2, J9_EXTENDED_RUNTIME2_SHOW_EXTENDED_NPEMSG)) {\n+\t\tJ9InternalVMFunctions const * const vmFuncs = vm->internalVMFunctions;\n+\t\tchar *npeMsg = NULL;\n+\t\tGetStackTraceElementUserData userData = {0};\n+\t\t\n+\t\tTrc_SC_GetExtendedNPEMessage_Entry2(vmThread, throwableObj);\n+\t\tvmFuncs->internalEnterVMFromJNI(vmThread);\n+\t\tuserData.bytecodeOffset = UDATA_MAX;\n+\t\tvmFuncs->iterateStackTrace(vmThread, (j9object_t*)throwableObj, getStackTraceElementIterator, &userData, FALSE);\n+\t\tif ((NULL != userData.romClass)\n+\t\t\t&& (NULL != userData.romMethod)\n+\t\t\t&& (UDATA_MAX != userData.bytecodeOffset)\n+\t\t) {\n+#if defined(DEBUG_BCV)\n+\t\t\t{\n+\t\t\t\tPORT_ACCESS_FROM_VMC(vmThread);\n+\t\t\t\tU_8 *bytecodes = J9_BYTECODE_START_FROM_ROM_METHOD(userData.romMethod);\n+\t\t\t\tU_32 flags = 0;\n+\n+#if defined(J9VM_ENV_LITTLE_ENDIAN)\n+\t\t\t\tflags |= BCT_LittleEndianOutput;\n+#else /* defined(J9VM_ENV_LITTLE_ENDIAN) */\n+\t\t\t\tflags |= BCT_BigEndianOutput;\n+#endif /* defined(J9VM_ENV_LITTLE_ENDIAN) */\n+\t\t\t\tj9bcutil_dumpBytecodes(PORTLIB, userData.romClass, bytecodes, 0, userData.bytecodeOffset, flags, (void *)cfdumpBytecodePrintFunction, PORTLIB, \"\");\n+\t\t\t}\n+#endif /* defined(DEBUG_BCV) */\n+\t\t\tnpeMsg = vmFuncs->getCompleteNPEMessage(vmThread, J9_BYTECODE_START_FROM_ROM_METHOD(userData.romMethod) + userData.bytecodeOffset, userData.romClass, npeMsg);\n+\t\t\tif (NULL != npeMsg) {\n+\t\t\t\tPORT_ACCESS_FROM_VMC(vmThread);\n+\t\t\t\tj9object_t msgObject = vm->memoryManagerFunctions->j9gc_createJavaLangString(vmThread, (U_8 *)npeMsg, strlen(npeMsg), 0);\n+\t\t\t\tif (NULL != msgObject) {\n+\t\t\t\t\tmsgObjectRef = vmFuncs->j9jni_createLocalRef(env, msgObject);\n+\t\t\t\t}\n+\t\t\t\tj9mem_free_memory(npeMsg);\n+\t\t\t\tif (NULL == msgObjectRef) {\n+\t\t\t\t\tvmFuncs->setNativeOutOfMemoryError(vmThread, 0, 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7c3b3bd0721e0b9c3e35cda73780d5110ebe335"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg4NzY0OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            {\n          \n          \n            \n            \n          \n          \n            \n            \tchar *npeMsg = NULL;\n          \n          \n            \n            {\n          \n          \n            \n            \tchar *npeMsg = NULL;", "url": "https://github.com/eclipse-openj9/openj9/pull/8495#discussion_r424887648", "createdAt": "2020-05-14T05:58:49Z", "author": {"login": "DanHeidinga"}, "path": "runtime/vm/ExtendedMessageNPE.cpp", "diffHunk": "@@ -0,0 +1,201 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+\n+#include \"cfreader.h\"\n+#include \"stackwalk.h\"\n+#include \"ut_j9vm.h\"\n+\n+extern \"C\" {\n+\n+char*\n+getCompleteNPEMessage(J9VMThread *vmThread, U_8 *bcCurrentPtr, J9ROMClass *romClass, const char *npeCauseMsg)\n+{\n+\n+\tchar *npeMsg = NULL;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7c3b3bd0721e0b9c3e35cda73780d5110ebe335"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg4ODI0Ng==", "bodyText": "I'm not clear why this is using defines rather than the string directly?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #define VM_NPE_ALOAD \"Cannot load from %s array\"\n          \n          \n            \n            \t\t\tnlsMessage = VM_NPE_ALOAD;\n          \n          \n            \n            #undef VM_NPE_ALOAD\n          \n          \n            \n            \t\t\tnlsMessage = \"Cannot load from %s array\";", "url": "https://github.com/eclipse-openj9/openj9/pull/8495#discussion_r424888246", "createdAt": "2020-05-14T06:00:38Z", "author": {"login": "DanHeidinga"}, "path": "runtime/vm/ExtendedMessageNPE.cpp", "diffHunk": "@@ -0,0 +1,201 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+\n+#include \"cfreader.h\"\n+#include \"stackwalk.h\"\n+#include \"ut_j9vm.h\"\n+\n+extern \"C\" {\n+\n+char*\n+getCompleteNPEMessage(J9VMThread *vmThread, U_8 *bcCurrentPtr, J9ROMClass *romClass, const char *npeCauseMsg)\n+{\n+\n+\tchar *npeMsg = NULL;\n+\tUDATA msgLen = 0;\n+\tconst char *nlsMessage = NULL;\n+\tU_8 bcCurrent = *bcCurrentPtr;\n+\n+\tPORT_ACCESS_FROM_VMC(vmThread);\n+\tTrc_VM_GetCompleteNPEMessage_Entry(vmThread, bcCurrentPtr, bcCurrent, romClass, npeCauseMsg);\n+\tif (((bcCurrent >= JBiaload) && (bcCurrent <= JBsaload))\n+\t\t|| ((bcCurrent >= JBiastore) && (bcCurrent <= JBsastore))\n+\t) {\n+\t\tconst char *elementType = NULL;\n+\t\tswitch (bcCurrent) {\n+\t\tcase JBiaload: /* FALLTHROUGH */\n+\t\tcase JBiastore:\n+\t\t\telementType = \"int\";\n+\t\t\tbreak;\n+\t\tcase JBlaload: /* FALLTHROUGH */\n+\t\tcase JBlastore:\n+\t\t\telementType = \"long\";\n+\t\t\tbreak;\n+\t\tcase JBfaload: /* FALLTHROUGH */\n+\t\tcase JBfastore:\n+\t\t\telementType = \"float\";\n+\t\t\tbreak;\n+\t\tcase JBdaload: /* FALLTHROUGH */\n+\t\tcase JBdastore:\n+\t\t\telementType = \"double\";\n+\t\t\tbreak;\n+\t\tcase JBaaload: /* FALLTHROUGH */\n+\t\tcase JBaastore:\n+\t\t\telementType = \"object\";\n+\t\t\tbreak;\n+\t\tcase JBbaload: /* FALLTHROUGH */\n+\t\tcase JBbastore:\n+\t\t\telementType = \"byte/boolean\";\n+\t\t\tbreak;\n+\t\tcase JBcaload: /* FALLTHROUGH */\n+\t\tcase JBcastore:\n+\t\t\telementType = \"char\";\n+\t\t\tbreak;\n+\t\tcase JBsaload: /* FALLTHROUGH */\n+\t\tcase JBsastore:\n+\t\t\telementType = \"short\";\n+\t\t\tbreak;\n+\t\tdefault:\n+\t\t\tTrc_VM_GetCompleteNPEMessage_Unreachable(vmThread, bcCurrent);\n+\t\t}\n+\t\tif ((bcCurrent >= JBiaload) && (bcCurrent <= JBsaload)) {\n+#define VM_NPE_ALOAD \"Cannot load from %s array\"\n+\t\t\tnlsMessage = VM_NPE_ALOAD;\n+#undef VM_NPE_ALOAD", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7c3b3bd0721e0b9c3e35cda73780d5110ebe335"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg4ODQxOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #define VM_NPE_ASTORE \"Cannot store to %s array\"\n          \n          \n            \n            \t\t\tnlsMessage = VM_NPE_ASTORE;\n          \n          \n            \n            #undef VM_NPE_ASTORE\n          \n          \n            \n            \t\t\tnlsMessage = \"Cannot store to %s array\";", "url": "https://github.com/eclipse-openj9/openj9/pull/8495#discussion_r424888419", "createdAt": "2020-05-14T06:00:59Z", "author": {"login": "DanHeidinga"}, "path": "runtime/vm/ExtendedMessageNPE.cpp", "diffHunk": "@@ -0,0 +1,201 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+\n+#include \"cfreader.h\"\n+#include \"stackwalk.h\"\n+#include \"ut_j9vm.h\"\n+\n+extern \"C\" {\n+\n+char*\n+getCompleteNPEMessage(J9VMThread *vmThread, U_8 *bcCurrentPtr, J9ROMClass *romClass, const char *npeCauseMsg)\n+{\n+\n+\tchar *npeMsg = NULL;\n+\tUDATA msgLen = 0;\n+\tconst char *nlsMessage = NULL;\n+\tU_8 bcCurrent = *bcCurrentPtr;\n+\n+\tPORT_ACCESS_FROM_VMC(vmThread);\n+\tTrc_VM_GetCompleteNPEMessage_Entry(vmThread, bcCurrentPtr, bcCurrent, romClass, npeCauseMsg);\n+\tif (((bcCurrent >= JBiaload) && (bcCurrent <= JBsaload))\n+\t\t|| ((bcCurrent >= JBiastore) && (bcCurrent <= JBsastore))\n+\t) {\n+\t\tconst char *elementType = NULL;\n+\t\tswitch (bcCurrent) {\n+\t\tcase JBiaload: /* FALLTHROUGH */\n+\t\tcase JBiastore:\n+\t\t\telementType = \"int\";\n+\t\t\tbreak;\n+\t\tcase JBlaload: /* FALLTHROUGH */\n+\t\tcase JBlastore:\n+\t\t\telementType = \"long\";\n+\t\t\tbreak;\n+\t\tcase JBfaload: /* FALLTHROUGH */\n+\t\tcase JBfastore:\n+\t\t\telementType = \"float\";\n+\t\t\tbreak;\n+\t\tcase JBdaload: /* FALLTHROUGH */\n+\t\tcase JBdastore:\n+\t\t\telementType = \"double\";\n+\t\t\tbreak;\n+\t\tcase JBaaload: /* FALLTHROUGH */\n+\t\tcase JBaastore:\n+\t\t\telementType = \"object\";\n+\t\t\tbreak;\n+\t\tcase JBbaload: /* FALLTHROUGH */\n+\t\tcase JBbastore:\n+\t\t\telementType = \"byte/boolean\";\n+\t\t\tbreak;\n+\t\tcase JBcaload: /* FALLTHROUGH */\n+\t\tcase JBcastore:\n+\t\t\telementType = \"char\";\n+\t\t\tbreak;\n+\t\tcase JBsaload: /* FALLTHROUGH */\n+\t\tcase JBsastore:\n+\t\t\telementType = \"short\";\n+\t\t\tbreak;\n+\t\tdefault:\n+\t\t\tTrc_VM_GetCompleteNPEMessage_Unreachable(vmThread, bcCurrent);\n+\t\t}\n+\t\tif ((bcCurrent >= JBiaload) && (bcCurrent <= JBsaload)) {\n+#define VM_NPE_ALOAD \"Cannot load from %s array\"\n+\t\t\tnlsMessage = VM_NPE_ALOAD;\n+#undef VM_NPE_ALOAD\n+\t\t} else {\n+#define VM_NPE_ASTORE \"Cannot store to %s array\"\n+\t\t\tnlsMessage = VM_NPE_ASTORE;\n+#undef VM_NPE_ASTORE", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7c3b3bd0721e0b9c3e35cda73780d5110ebe335"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg4OTI3Mg==", "bodyText": "I'm unclear on why a define is preferable to local variable here.  The local seems to have less \"noise\" when reading the code\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tcase JBarraylength:\n          \n          \n            \n            #define VM_NPE_ARRAYLENGTH \"Cannot read the array length\"\n          \n          \n            \n            \t\t\tmsgLen = j9str_printf(PORTLIB, NULL, 0, VM_NPE_ARRAYLENGTH);\n          \n          \n            \n            \t\t\tnpeMsg = (char *)j9mem_allocate_memory(msgLen + 1, OMRMEM_CATEGORY_VM);\n          \n          \n            \n            \t\t\tj9str_printf(PORTLIB, npeMsg, msgLen, VM_NPE_ARRAYLENGTH);\n          \n          \n            \n            #undef VM_NPE_ARRAYLENGTH\n          \n          \n            \n            \t\tcase JBarraylength:\n          \n          \n            \n            \t\t\tconst char *VM_NPE_ARRAYLENGTH = \"Cannot read the array length\";\n          \n          \n            \n            \t\t\tmsgLen = j9str_printf(PORTLIB, NULL, 0, VM_NPE_ARRAYLENGTH);\n          \n          \n            \n            \t\t\tnpeMsg = (char *)j9mem_allocate_memory(msgLen + 1, OMRMEM_CATEGORY_VM);\n          \n          \n            \n            \t\t\tj9str_printf(PORTLIB, npeMsg, msgLen, VM_NPE_ARRAYLENGTH);", "url": "https://github.com/eclipse-openj9/openj9/pull/8495#discussion_r424889272", "createdAt": "2020-05-14T06:03:48Z", "author": {"login": "DanHeidinga"}, "path": "runtime/vm/ExtendedMessageNPE.cpp", "diffHunk": "@@ -0,0 +1,201 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+\n+#include \"cfreader.h\"\n+#include \"stackwalk.h\"\n+#include \"ut_j9vm.h\"\n+\n+extern \"C\" {\n+\n+char*\n+getCompleteNPEMessage(J9VMThread *vmThread, U_8 *bcCurrentPtr, J9ROMClass *romClass, const char *npeCauseMsg)\n+{\n+\n+\tchar *npeMsg = NULL;\n+\tUDATA msgLen = 0;\n+\tconst char *nlsMessage = NULL;\n+\tU_8 bcCurrent = *bcCurrentPtr;\n+\n+\tPORT_ACCESS_FROM_VMC(vmThread);\n+\tTrc_VM_GetCompleteNPEMessage_Entry(vmThread, bcCurrentPtr, bcCurrent, romClass, npeCauseMsg);\n+\tif (((bcCurrent >= JBiaload) && (bcCurrent <= JBsaload))\n+\t\t|| ((bcCurrent >= JBiastore) && (bcCurrent <= JBsastore))\n+\t) {\n+\t\tconst char *elementType = NULL;\n+\t\tswitch (bcCurrent) {\n+\t\tcase JBiaload: /* FALLTHROUGH */\n+\t\tcase JBiastore:\n+\t\t\telementType = \"int\";\n+\t\t\tbreak;\n+\t\tcase JBlaload: /* FALLTHROUGH */\n+\t\tcase JBlastore:\n+\t\t\telementType = \"long\";\n+\t\t\tbreak;\n+\t\tcase JBfaload: /* FALLTHROUGH */\n+\t\tcase JBfastore:\n+\t\t\telementType = \"float\";\n+\t\t\tbreak;\n+\t\tcase JBdaload: /* FALLTHROUGH */\n+\t\tcase JBdastore:\n+\t\t\telementType = \"double\";\n+\t\t\tbreak;\n+\t\tcase JBaaload: /* FALLTHROUGH */\n+\t\tcase JBaastore:\n+\t\t\telementType = \"object\";\n+\t\t\tbreak;\n+\t\tcase JBbaload: /* FALLTHROUGH */\n+\t\tcase JBbastore:\n+\t\t\telementType = \"byte/boolean\";\n+\t\t\tbreak;\n+\t\tcase JBcaload: /* FALLTHROUGH */\n+\t\tcase JBcastore:\n+\t\t\telementType = \"char\";\n+\t\t\tbreak;\n+\t\tcase JBsaload: /* FALLTHROUGH */\n+\t\tcase JBsastore:\n+\t\t\telementType = \"short\";\n+\t\t\tbreak;\n+\t\tdefault:\n+\t\t\tTrc_VM_GetCompleteNPEMessage_Unreachable(vmThread, bcCurrent);\n+\t\t}\n+\t\tif ((bcCurrent >= JBiaload) && (bcCurrent <= JBsaload)) {\n+#define VM_NPE_ALOAD \"Cannot load from %s array\"\n+\t\t\tnlsMessage = VM_NPE_ALOAD;\n+#undef VM_NPE_ALOAD\n+\t\t} else {\n+#define VM_NPE_ASTORE \"Cannot store to %s array\"\n+\t\t\tnlsMessage = VM_NPE_ASTORE;\n+#undef VM_NPE_ASTORE\n+\t\t}\n+\t\tmsgLen = j9str_printf(PORTLIB, NULL, 0, nlsMessage, elementType);\n+\t\t/* msg NULL check omitted since str_printf accepts NULL (as above) */\n+\t\tnpeMsg = (char *)j9mem_allocate_memory(msgLen + 1, OMRMEM_CATEGORY_VM);\n+\t\tj9str_printf(PORTLIB, npeMsg, msgLen, nlsMessage, elementType);\n+\t} else {\n+\t\tswitch (bcCurrent) {\n+\t\tcase JBarraylength:\n+#define VM_NPE_ARRAYLENGTH \"Cannot read the array length\"\n+\t\t\tmsgLen = j9str_printf(PORTLIB, NULL, 0, VM_NPE_ARRAYLENGTH);\n+\t\t\tnpeMsg = (char *)j9mem_allocate_memory(msgLen + 1, OMRMEM_CATEGORY_VM);\n+\t\t\tj9str_printf(PORTLIB, npeMsg, msgLen, VM_NPE_ARRAYLENGTH);\n+#undef VM_NPE_ARRAYLENGTH", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7c3b3bd0721e0b9c3e35cda73780d5110ebe335"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg5MDQwOQ==", "bodyText": "The locals can be declared at first use as this is a cpp file.  Saves initializing them to null and shortens the life time they need to be reasoned about", "url": "https://github.com/eclipse-openj9/openj9/pull/8495#discussion_r424890409", "createdAt": "2020-05-14T06:07:32Z", "author": {"login": "DanHeidinga"}, "path": "runtime/vm/ExtendedMessageNPE.cpp", "diffHunk": "@@ -0,0 +1,201 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+\n+#include \"cfreader.h\"\n+#include \"stackwalk.h\"\n+#include \"ut_j9vm.h\"\n+\n+extern \"C\" {\n+\n+char*\n+getCompleteNPEMessage(J9VMThread *vmThread, U_8 *bcCurrentPtr, J9ROMClass *romClass, const char *npeCauseMsg)\n+{\n+\n+\tchar *npeMsg = NULL;\n+\tUDATA msgLen = 0;\n+\tconst char *nlsMessage = NULL;\n+\tU_8 bcCurrent = *bcCurrentPtr;\n+\n+\tPORT_ACCESS_FROM_VMC(vmThread);\n+\tTrc_VM_GetCompleteNPEMessage_Entry(vmThread, bcCurrentPtr, bcCurrent, romClass, npeCauseMsg);\n+\tif (((bcCurrent >= JBiaload) && (bcCurrent <= JBsaload))\n+\t\t|| ((bcCurrent >= JBiastore) && (bcCurrent <= JBsastore))\n+\t) {\n+\t\tconst char *elementType = NULL;\n+\t\tswitch (bcCurrent) {\n+\t\tcase JBiaload: /* FALLTHROUGH */\n+\t\tcase JBiastore:\n+\t\t\telementType = \"int\";\n+\t\t\tbreak;\n+\t\tcase JBlaload: /* FALLTHROUGH */\n+\t\tcase JBlastore:\n+\t\t\telementType = \"long\";\n+\t\t\tbreak;\n+\t\tcase JBfaload: /* FALLTHROUGH */\n+\t\tcase JBfastore:\n+\t\t\telementType = \"float\";\n+\t\t\tbreak;\n+\t\tcase JBdaload: /* FALLTHROUGH */\n+\t\tcase JBdastore:\n+\t\t\telementType = \"double\";\n+\t\t\tbreak;\n+\t\tcase JBaaload: /* FALLTHROUGH */\n+\t\tcase JBaastore:\n+\t\t\telementType = \"object\";\n+\t\t\tbreak;\n+\t\tcase JBbaload: /* FALLTHROUGH */\n+\t\tcase JBbastore:\n+\t\t\telementType = \"byte/boolean\";\n+\t\t\tbreak;\n+\t\tcase JBcaload: /* FALLTHROUGH */\n+\t\tcase JBcastore:\n+\t\t\telementType = \"char\";\n+\t\t\tbreak;\n+\t\tcase JBsaload: /* FALLTHROUGH */\n+\t\tcase JBsastore:\n+\t\t\telementType = \"short\";\n+\t\t\tbreak;\n+\t\tdefault:\n+\t\t\tTrc_VM_GetCompleteNPEMessage_Unreachable(vmThread, bcCurrent);\n+\t\t}\n+\t\tif ((bcCurrent >= JBiaload) && (bcCurrent <= JBsaload)) {\n+#define VM_NPE_ALOAD \"Cannot load from %s array\"\n+\t\t\tnlsMessage = VM_NPE_ALOAD;\n+#undef VM_NPE_ALOAD\n+\t\t} else {\n+#define VM_NPE_ASTORE \"Cannot store to %s array\"\n+\t\t\tnlsMessage = VM_NPE_ASTORE;\n+#undef VM_NPE_ASTORE\n+\t\t}\n+\t\tmsgLen = j9str_printf(PORTLIB, NULL, 0, nlsMessage, elementType);\n+\t\t/* msg NULL check omitted since str_printf accepts NULL (as above) */\n+\t\tnpeMsg = (char *)j9mem_allocate_memory(msgLen + 1, OMRMEM_CATEGORY_VM);\n+\t\tj9str_printf(PORTLIB, npeMsg, msgLen, nlsMessage, elementType);\n+\t} else {\n+\t\tswitch (bcCurrent) {\n+\t\tcase JBarraylength:\n+#define VM_NPE_ARRAYLENGTH \"Cannot read the array length\"\n+\t\t\tmsgLen = j9str_printf(PORTLIB, NULL, 0, VM_NPE_ARRAYLENGTH);\n+\t\t\tnpeMsg = (char *)j9mem_allocate_memory(msgLen + 1, OMRMEM_CATEGORY_VM);\n+\t\t\tj9str_printf(PORTLIB, npeMsg, msgLen, VM_NPE_ARRAYLENGTH);\n+#undef VM_NPE_ARRAYLENGTH\n+\t\t\tbreak;\n+\t\tcase JBathrow:\n+#define VM_NPE_ATHROW \"Cannot throw exception\"\n+\t\t\tmsgLen = j9str_printf(PORTLIB, NULL, 0, VM_NPE_ATHROW);\n+\t\t\tnpeMsg = (char *)j9mem_allocate_memory(msgLen + 1, OMRMEM_CATEGORY_VM);\n+\t\t\tj9str_printf(PORTLIB, npeMsg, msgLen, VM_NPE_ATHROW);\n+#undef VM_NPE_ATHROW\n+\t\t\tbreak;\n+\t\tcase JBmonitorenter:\n+#define VM_NPE_MONITORENTER \"Cannot enter synchronized block\"\n+\t\t\tmsgLen = j9str_printf(PORTLIB, NULL, 0, VM_NPE_MONITORENTER);\n+\t\t\tnpeMsg = (char *)j9mem_allocate_memory(msgLen+ 1, OMRMEM_CATEGORY_VM);\n+\t\t\tj9str_printf(PORTLIB, npeMsg, msgLen, VM_NPE_MONITORENTER);\n+#undef VM_NPE_MONITORENTER\n+\t\t\tbreak;\n+\t\tcase JBmonitorexit:\n+#define VM_NPE_MONITOREXIT \"Cannot exit synchronized block\"\n+\t\t\tmsgLen = j9str_printf(PORTLIB, NULL, 0, VM_NPE_MONITOREXIT);\n+\t\t\tnpeMsg = (char *)j9mem_allocate_memory(msgLen + 1, OMRMEM_CATEGORY_VM);\n+\t\t\tj9str_printf(PORTLIB, npeMsg, msgLen, VM_NPE_MONITOREXIT);\n+#undef VM_NPE_MONITOREXIT\n+\t\t\tbreak;\n+\t\tcase JBgetfield: /* FALLTHROUGH */\n+\t\tcase JBputfield:\n+\t\t\t{\n+\t\t\t\tU_16 index = PARAM_16(bcCurrentPtr, 1);\n+\t\t\t\tUDATA cpType = J9_CP_TYPE(J9ROMCLASS_CPSHAPEDESCRIPTION(romClass), index);\n+\n+\t\t\t\tTrc_VM_GetCompleteNPEMessage_Field_Index(vmThread, index);\n+\t\t\t\tif (J9CPTYPE_FIELD == cpType) {\n+\t\t\t\t\tJ9ROMConstantPoolItem *constantPool = J9_ROM_CP_FROM_ROM_CLASS(romClass);\n+\t\t\t\t\tJ9ROMConstantPoolItem *cpItem = constantPool + index;\n+\t\t\t\t\tJ9ROMNameAndSignature *nameAndSig = J9ROMFIELDREF_NAMEANDSIGNATURE((J9ROMFieldRef *) cpItem);\n+\t\t\t\t\tJ9UTF8 *name = J9ROMNAMEANDSIGNATURE_NAME(nameAndSig);\n+\n+\t\t\t\t\tif (JBputfield == bcCurrent) {\n+#define VM_NPE_PUTFIELD \"Cannot assign field \\\"%2$.*1$s\\\"\"\n+\t\t\t\t\t\tnlsMessage = VM_NPE_PUTFIELD;\n+#undef VM_NPE_PUTFIELD\n+\t\t\t\t\t} else {\n+#define VM_NPE_GETFIELD \"Cannot read field \\\"%2$.*1$s\\\"\"\n+\t\t\t\t\t\tnlsMessage = VM_NPE_GETFIELD;\n+#undef VM_NPE_GETFIELD\n+\t\t\t\t\t}\n+\t\t\t\t\tmsgLen = j9str_printf(PORTLIB, NULL, 0, nlsMessage, J9UTF8_LENGTH(name), J9UTF8_DATA(name));\n+\t\t\t\t\tnpeMsg = (char *)j9mem_allocate_memory(msgLen + 1, OMRMEM_CATEGORY_VM);\n+\t\t\t\t\tj9str_printf(PORTLIB, npeMsg, msgLen, nlsMessage, J9UTF8_LENGTH(name), J9UTF8_DATA(name));\n+\t\t\t\t} else {\n+\t\t\t\t\tTrc_VM_GetCompleteNPEMessage_UnexpectedCPType(vmThread, cpType, bcCurrent);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tbreak;\n+\t\tcase JBinvokehandle: /* FALLTHROUGH */\n+\t\tcase JBinvokehandlegeneric: /* FALLTHROUGH */\n+\t\tcase JBinvokeinterface2: /* FALLTHROUGH */\n+\t\tcase JBinvokeinterface: /* FALLTHROUGH */\n+\t\tcase JBinvokespecial: /* FALLTHROUGH */\n+\t\tcase JBinvokedynamic: /* FALLTHROUGH */\n+\t\tcase JBinvokevirtual: /* FALLTHROUGH */\n+\t\tcase JBinvokestatic:\n+\t\t\t{\n+\t\t\t\tU_16 index = 0;\n+\t\t\t\tJ9ROMNameAndSignature *nameAndSig = NULL;\n+\t\t\t\tJ9UTF8 *sig = NULL;\n+\t\t\t\tJ9UTF8 *name = NULL;\n+\t\t\t\tJ9UTF8 *definingUTF = NULL;\n+\t\t\t\tJ9ROMMethodRef *romMethodRef = NULL;\n+\t\t\t\tJ9ROMConstantPoolItem *constantPool = J9_ROM_CP_FROM_ROM_CLASS(romClass);\n+\n+\t\t\t\tif (JBinvokeinterface2 == bcCurrent) {\n+\t\t\t\t\tindex = PARAM_16(bcCurrentPtr + 2, 1); /* get JBinvokeinterface instead */\n+\t\t\t\t} else {\n+\t\t\t\t\tindex = PARAM_16(bcCurrentPtr, 1);\n+\t\t\t\t}\n+\t\t\t\tTrc_VM_GetCompleteNPEMessage_Invoke_Index(vmThread, index);\n+\t\t\t\tromMethodRef = (J9ROMMethodRef *)&constantPool[index];\n+\t\t\t\tnameAndSig = J9ROMMETHODREF_NAMEANDSIGNATURE(romMethodRef);\n+\t\t\t\tsig = J9ROMNAMEANDSIGNATURE_SIGNATURE(nameAndSig);\n+\t\t\t\tname = J9ROMNAMEANDSIGNATURE_NAME(nameAndSig);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7c3b3bd0721e0b9c3e35cda73780d5110ebe335"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg5MjQ4MQ==", "bodyText": "Can you set methodPC = UDATA_MAX; here or before this if statement so the else clauses aren't needed?", "url": "https://github.com/eclipse-openj9/openj9/pull/8495#discussion_r424892481", "createdAt": "2020-05-14T06:13:28Z", "author": {"login": "DanHeidinga"}, "path": "runtime/vm/exceptiondescribe.c", "diffHunk": "@@ -319,7 +319,7 @@ iterateStackTrace(J9VMThread * vmThread, j9object_t* exception, callback_func_t\n \t\t\t\t\t}\n \t\t\t\t\tif (inlineDepth == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7c3b3bd0721e0b9c3e35cda73780d5110ebe335"}, "originalPosition": 20}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b7c3b3bd0721e0b9c3e35cda73780d5110ebe335", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/b7c3b3bd0721e0b9c3e35cda73780d5110ebe335", "committedDate": "2020-05-14T02:54:06Z", "message": "JEP358 extended NPE message part 1 - result of this NPE\n\nJVM_GetExtendedNPEMessage is updated to invoke iterateStackTrace() with\ngetStackTraceElementIterator to get the\nromClass/romMethod/bytecodeOffset of first frame of the exception object\nthen invoke getCompleteNPEMessage() for message\ngeneration;\nAdded getCompleteNPEMessage() to compute NPE message according to the\nbytecode itself for aload/astore, arraylength, athrow,\nmonitorenter/monitorexit, the bytecode and field index for\ngetfield/putfield, the bytecode and method index for\ninvokeinterface/invokespecial/invokevirtual;\nAdded a runtime flag J9_EXTENDED_RUNTIME2_SHOW_EXTENDED_NPEMSG to\nspecify the command line option\n-XX:{+|-}ShowCodeDetailsInExceptionMessages;\nAdded trace messages.\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}, "afterCommit": {"oid": "45c650feaffe8a8b2fce83fcef41a366a031fd19", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/45c650feaffe8a8b2fce83fcef41a366a031fd19", "committedDate": "2020-05-14T11:20:00Z", "message": "JEP358 extended NPE message part 1 - result of this NPE\n\nJVM_GetExtendedNPEMessage is updated to invoke iterateStackTrace() with\ngetStackTraceElementIterator to get the\nromClass/romMethod/bytecodeOffset of first frame of the exception object\nthen invoke getCompleteNPEMessage() for message\ngeneration;\nAdded getCompleteNPEMessage() to compute NPE message according to the\nbytecode itself for aload/astore, arraylength, athrow,\nmonitorenter/monitorexit, the bytecode and field index for\ngetfield/putfield, the bytecode and method index for\ninvokeinterface/invokespecial/invokevirtual;\nAdded a runtime flag J9_EXTENDED_RUNTIME2_SHOW_EXTENDED_NPEMSG to\nspecify the command line option\n-XX:{+|-}ShowCodeDetailsInExceptionMessages;\nAdded trace messages.\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExNzYzNTYx", "url": "https://github.com/eclipse-openj9/openj9/pull/8495#pullrequestreview-411763561", "createdAt": "2020-05-14T12:43:36Z", "commit": {"oid": "45c650feaffe8a8b2fce83fcef41a366a031fd19"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMjo0MzozNlrOGVaZ_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMjo0MzozNlrOGVaZ_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTEwNTkxNw==", "bodyText": "Can you add the new parameter to the @param list above?", "url": "https://github.com/eclipse-openj9/openj9/pull/8495#discussion_r425105917", "createdAt": "2020-05-14T12:43:36Z", "author": {"login": "DanHeidinga"}, "path": "runtime/oti/vm_api.h", "diffHunk": "@@ -558,7 +558,7 @@ internalExceptionDescribe(J9VMThread *vmThread);\n * @return UDATA\n */\n UDATA\n-iterateStackTrace(J9VMThread * vmThread, j9object_t* exception,  UDATA  (*callback) (J9VMThread * vmThread, void * userData, J9ROMClass * romClass, J9ROMMethod * romMethod, J9UTF8 * fileName, UDATA lineNumber, J9ClassLoader* classLoader, J9Class* ramClass), void * userData, UDATA pruneConstructors);\n+iterateStackTrace(J9VMThread * vmThread, j9object_t* exception,  UDATA  (*callback) (J9VMThread * vmThread, void * userData, UDATA bytecodeOffset, J9ROMClass * romClass, J9ROMMethod * romMethod, J9UTF8 * fileName, UDATA lineNumber, J9ClassLoader* classLoader, J9Class* ramClass), void * userData, UDATA pruneConstructors);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45c650feaffe8a8b2fce83fcef41a366a031fd19"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExNzY0MjIx", "url": "https://github.com/eclipse-openj9/openj9/pull/8495#pullrequestreview-411764221", "createdAt": "2020-05-14T12:44:25Z", "commit": {"oid": "45c650feaffe8a8b2fce83fcef41a366a031fd19"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "45c650feaffe8a8b2fce83fcef41a366a031fd19", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/45c650feaffe8a8b2fce83fcef41a366a031fd19", "committedDate": "2020-05-14T11:20:00Z", "message": "JEP358 extended NPE message part 1 - result of this NPE\n\nJVM_GetExtendedNPEMessage is updated to invoke iterateStackTrace() with\ngetStackTraceElementIterator to get the\nromClass/romMethod/bytecodeOffset of first frame of the exception object\nthen invoke getCompleteNPEMessage() for message\ngeneration;\nAdded getCompleteNPEMessage() to compute NPE message according to the\nbytecode itself for aload/astore, arraylength, athrow,\nmonitorenter/monitorexit, the bytecode and field index for\ngetfield/putfield, the bytecode and method index for\ninvokeinterface/invokespecial/invokevirtual;\nAdded a runtime flag J9_EXTENDED_RUNTIME2_SHOW_EXTENDED_NPEMSG to\nspecify the command line option\n-XX:{+|-}ShowCodeDetailsInExceptionMessages;\nAdded trace messages.\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}, "afterCommit": {"oid": "37ae6fb61064a0075a6e427cd1de94b4289cac9a", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/37ae6fb61064a0075a6e427cd1de94b4289cac9a", "committedDate": "2020-05-14T16:13:09Z", "message": "JEP358 extended NPE message part 1 - result of this NPE\n\nJVM_GetExtendedNPEMessage is updated to invoke iterateStackTrace() with\ngetStackTraceElementIterator to get the\nromClass/romMethod/bytecodeOffset of first frame of the exception object\nthen invoke getCompleteNPEMessage() for message\ngeneration;\nAdded getCompleteNPEMessage() to compute NPE message according to the\nbytecode itself for aload/astore, arraylength, athrow,\nmonitorenter/monitorexit, the bytecode and field index for\ngetfield/putfield, the bytecode and method index for\ninvokeinterface/invokespecial/invokevirtual;\nAdded a runtime flag J9_EXTENDED_RUNTIME2_SHOW_EXTENDED_NPEMSG to\nspecify the command line option\n-XX:{+|-}ShowCodeDetailsInExceptionMessages;\nAdded trace messages.\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyMTIxMTg4", "url": "https://github.com/eclipse-openj9/openj9/pull/8495#pullrequestreview-412121188", "createdAt": "2020-05-14T19:31:53Z", "commit": {"oid": "45c650feaffe8a8b2fce83fcef41a366a031fd19"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8744afea364f6a4ef136ca814b3a82df670f08d9", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/8744afea364f6a4ef136ca814b3a82df670f08d9", "committedDate": "2020-05-15T01:28:06Z", "message": "JEP358 extended NPE message part 1 - result of this NPE\n\nJVM_GetExtendedNPEMessage is updated to invoke iterateStackTrace() with\ngetStackTraceElementIterator to get the\nromClass/romMethod/bytecodeOffset of first frame of the exception object\nthen invoke getCompleteNPEMessage() for message\ngeneration;\nAdded getCompleteNPEMessage() to compute NPE message according to the\nbytecode itself for aload/astore, arraylength, athrow,\nmonitorenter/monitorexit, the bytecode and field index for\ngetfield/putfield, the bytecode and method index for\ninvokeinterface/invokespecial/invokevirtual;\nAdded a runtime flag J9_EXTENDED_RUNTIME2_SHOW_EXTENDED_NPEMSG to\nspecify the command line option\n-XX:{+|-}ShowCodeDetailsInExceptionMessages;\nAdded trace messages.\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "37ae6fb61064a0075a6e427cd1de94b4289cac9a", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/37ae6fb61064a0075a6e427cd1de94b4289cac9a", "committedDate": "2020-05-14T16:13:09Z", "message": "JEP358 extended NPE message part 1 - result of this NPE\n\nJVM_GetExtendedNPEMessage is updated to invoke iterateStackTrace() with\ngetStackTraceElementIterator to get the\nromClass/romMethod/bytecodeOffset of first frame of the exception object\nthen invoke getCompleteNPEMessage() for message\ngeneration;\nAdded getCompleteNPEMessage() to compute NPE message according to the\nbytecode itself for aload/astore, arraylength, athrow,\nmonitorenter/monitorexit, the bytecode and field index for\ngetfield/putfield, the bytecode and method index for\ninvokeinterface/invokespecial/invokevirtual;\nAdded a runtime flag J9_EXTENDED_RUNTIME2_SHOW_EXTENDED_NPEMSG to\nspecify the command line option\n-XX:{+|-}ShowCodeDetailsInExceptionMessages;\nAdded trace messages.\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}, "afterCommit": {"oid": "8744afea364f6a4ef136ca814b3a82df670f08d9", "author": {"user": {"login": "JasonFengJ9", "name": "Jason Feng"}}, "url": "https://github.com/eclipse-openj9/openj9/commit/8744afea364f6a4ef136ca814b3a82df670f08d9", "committedDate": "2020-05-15T01:28:06Z", "message": "JEP358 extended NPE message part 1 - result of this NPE\n\nJVM_GetExtendedNPEMessage is updated to invoke iterateStackTrace() with\ngetStackTraceElementIterator to get the\nromClass/romMethod/bytecodeOffset of first frame of the exception object\nthen invoke getCompleteNPEMessage() for message\ngeneration;\nAdded getCompleteNPEMessage() to compute NPE message according to the\nbytecode itself for aload/astore, arraylength, athrow,\nmonitorenter/monitorexit, the bytecode and field index for\ngetfield/putfield, the bytecode and method index for\ninvokeinterface/invokespecial/invokevirtual;\nAdded a runtime flag J9_EXTENDED_RUNTIME2_SHOW_EXTENDED_NPEMSG to\nspecify the command line option\n-XX:{+|-}ShowCodeDetailsInExceptionMessages;\nAdded trace messages.\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 740, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}