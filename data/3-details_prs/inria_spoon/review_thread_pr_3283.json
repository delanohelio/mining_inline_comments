{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzODg5NTY4", "number": 3283, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMTo1NTowNlrODl9C1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNDo0NjoyMVrODmtkLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTI0MDUzOnYy", "diffSide": "RIGHT", "path": "src/test/java/spoon/test/architecture/SpoonArchitectureEnforcerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMTo1NTowNlrOFzIoag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMzo1OTo1MFrOF0QBpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE2MzExNA==", "bodyText": "now this change can be removed :)", "url": "https://github.com/INRIA/spoon/pull/3283#discussion_r389163114", "createdAt": "2020-03-06T21:55:06Z", "author": {"login": "monperrus"}, "path": "src/test/java/spoon/test/architecture/SpoonArchitectureEnforcerTest.java", "diffHunk": "@@ -232,6 +232,9 @@ public void metamodelPackageRule() {\n \n \t@Test\n \tpublic void testGoodTestClassNames() {\n+\t\t//some testclasses are util only and dont have to follow the naming convention for better readability\n+\t\tSet<String> testUtilClasses = new HashSet<>(Arrays.asList(\"spoon.test.GitHubIssue\", \"spoon.test.UnresolvedBug\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ffa818687d51ca5b9a691db08e7710a097d4014"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMzMjgzOQ==", "bodyText": "100% correct. Changed it", "url": "https://github.com/INRIA/spoon/pull/3283#discussion_r390332839", "createdAt": "2020-03-10T13:59:50Z", "author": {"login": "MartinWitt"}, "path": "src/test/java/spoon/test/architecture/SpoonArchitectureEnforcerTest.java", "diffHunk": "@@ -232,6 +232,9 @@ public void metamodelPackageRule() {\n \n \t@Test\n \tpublic void testGoodTestClassNames() {\n+\t\t//some testclasses are util only and dont have to follow the naming convention for better readability\n+\t\tSet<String> testUtilClasses = new HashSet<>(Arrays.asList(\"spoon.test.GitHubIssue\", \"spoon.test.UnresolvedBug\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE2MzExNA=="}, "originalCommit": {"oid": "2ffa818687d51ca5b9a691db08e7710a097d4014"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxODAzMTU2OnYy", "diffSide": "RIGHT", "path": "src/test/java/spoon/test/GitHubIssue.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwOToyNzo1N1rOF0HCYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNDowMTowM1rOF0QFGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE4NTU3MQ==", "bodyText": "what about returning an int instead of a String?", "url": "https://github.com/INRIA/spoon/pull/3283#discussion_r390185571", "createdAt": "2020-03-10T09:27:57Z", "author": {"login": "monperrus"}, "path": "src/test/java/spoon/test/GitHubIssue.java", "diffHunk": "@@ -0,0 +1,18 @@\n+/**\n+ * Copyright (C) 2006-2019 INRIA and contributors\n+ *\n+ * Spoon is available either under the terms of the MIT License (see LICENSE-MIT.txt) of the Cecill-C License (see LICENSE-CECILL-C.txt). You as the user are entitled to choose the terms under which to adopt Spoon.\n+ */\n+package spoon.test;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target(ElementType.METHOD)\n+public @interface GitHubIssue {\n+\tString issueNumber();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ffa818687d51ca5b9a691db08e7710a097d4014"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMzMzcyMA==", "bodyText": "Sounds good to me. We can safely assume github issue numbers fit in int.\nChanged it", "url": "https://github.com/INRIA/spoon/pull/3283#discussion_r390333720", "createdAt": "2020-03-10T14:01:03Z", "author": {"login": "MartinWitt"}, "path": "src/test/java/spoon/test/GitHubIssue.java", "diffHunk": "@@ -0,0 +1,18 @@\n+/**\n+ * Copyright (C) 2006-2019 INRIA and contributors\n+ *\n+ * Spoon is available either under the terms of the MIT License (see LICENSE-MIT.txt) of the Cecill-C License (see LICENSE-CECILL-C.txt). You as the user are entitled to choose the terms under which to adopt Spoon.\n+ */\n+package spoon.test;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target(ElementType.METHOD)\n+public @interface GitHubIssue {\n+\tString issueNumber();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE4NTU3MQ=="}, "originalCommit": {"oid": "2ffa818687d51ca5b9a691db08e7710a097d4014"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTE5MDIwOnYy", "diffSide": "RIGHT", "path": "src/test/java/spoon/test/UnresolvedBugTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNDo0NjoyMVrOF0SMTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNTozMTowN1rOF0UVUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM2ODMzNA==", "bodyText": "+check that the issue is still open? (looks straighforward to do)", "url": "https://github.com/INRIA/spoon/pull/3283#discussion_r390368334", "createdAt": "2020-03-10T14:46:21Z", "author": {"login": "monperrus"}, "path": "src/test/java/spoon/test/UnresolvedBugTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * Copyright (C) 2006-2019 INRIA and contributors\n+ *\n+ * Spoon is available either under the terms of the MIT License (see LICENSE-MIT.txt) of the Cecill-C License (see LICENSE-CECILL-C.txt). You as the user are entitled to choose the terms under which to adopt Spoon.\n+ */\n+package spoon.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.URL;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonObject;\n+\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import spoon.FluentLauncher;\n+import spoon.reflect.declaration.CtMethod;\n+import spoon.reflect.visitor.filter.TypeFilter;\n+\n+public class UnresolvedBugTest {\n+\n+\tprivate List<CtMethod<?>> testMethods = findTestMethods();\n+\tprivate final String githubURL = \"https://api.github.com/repos/INRIA/spoon/issues/\";\n+\n+\t/**\n+\t * Checks if every githubIssue annotation has an github issue.\n+\t */\n+\t@Test\n+\tpublic void checkGithubIssueAnnotations() throws IOException {\n+\t\t// contract: every test GitHubIssue annotation points to a valid issue number.\n+\t\ttestMethods = testMethods.stream()\n+\t\t\t\t.filter(v -> v.hasAnnotation(Test.class) && v.hasAnnotation(GitHubIssue.class))\n+\t\t\t\t.collect(Collectors.toList());\n+\t\tfor (CtMethod<?> ctMethod : testMethods) {\n+\t\t\tint issueNumber = ctMethod.getAnnotation(GitHubIssue.class).issueNumber();\n+\t\t\tURL url = new URL(githubURL + issueNumber);\n+\t\t\t// because readAllBytes is jdk9 only\n+\t\t\tString data = new BufferedReader(new InputStreamReader(url.openStream())).lines().collect(Collectors.joining());\n+\t\t\tJsonObject issue = new Gson().fromJson(data, JsonObject.class);\n+\t\t\tassertTrue(issue.get(\"number\").getAsInt()==issueNumber);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55c99c915b42b2a1dacab75f63937ee6e34884ac"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQwMzQwOA==", "bodyText": "added", "url": "https://github.com/INRIA/spoon/pull/3283#discussion_r390403408", "createdAt": "2020-03-10T15:31:07Z", "author": {"login": "MartinWitt"}, "path": "src/test/java/spoon/test/UnresolvedBugTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * Copyright (C) 2006-2019 INRIA and contributors\n+ *\n+ * Spoon is available either under the terms of the MIT License (see LICENSE-MIT.txt) of the Cecill-C License (see LICENSE-CECILL-C.txt). You as the user are entitled to choose the terms under which to adopt Spoon.\n+ */\n+package spoon.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.URL;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonObject;\n+\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import spoon.FluentLauncher;\n+import spoon.reflect.declaration.CtMethod;\n+import spoon.reflect.visitor.filter.TypeFilter;\n+\n+public class UnresolvedBugTest {\n+\n+\tprivate List<CtMethod<?>> testMethods = findTestMethods();\n+\tprivate final String githubURL = \"https://api.github.com/repos/INRIA/spoon/issues/\";\n+\n+\t/**\n+\t * Checks if every githubIssue annotation has an github issue.\n+\t */\n+\t@Test\n+\tpublic void checkGithubIssueAnnotations() throws IOException {\n+\t\t// contract: every test GitHubIssue annotation points to a valid issue number.\n+\t\ttestMethods = testMethods.stream()\n+\t\t\t\t.filter(v -> v.hasAnnotation(Test.class) && v.hasAnnotation(GitHubIssue.class))\n+\t\t\t\t.collect(Collectors.toList());\n+\t\tfor (CtMethod<?> ctMethod : testMethods) {\n+\t\t\tint issueNumber = ctMethod.getAnnotation(GitHubIssue.class).issueNumber();\n+\t\t\tURL url = new URL(githubURL + issueNumber);\n+\t\t\t// because readAllBytes is jdk9 only\n+\t\t\tString data = new BufferedReader(new InputStreamReader(url.openStream())).lines().collect(Collectors.joining());\n+\t\t\tJsonObject issue = new Gson().fromJson(data, JsonObject.class);\n+\t\t\tassertTrue(issue.get(\"number\").getAsInt()==issueNumber);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM2ODMzNA=="}, "originalCommit": {"oid": "55c99c915b42b2a1dacab75f63937ee6e34884ac"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3696, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}