{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxNDc0NDU0", "number": 3280, "title": "feature: add support for parallel processor", "bodyText": "Fix #2659\nThe new class allows parallel processing for stateless processors. Subtyping processor allows easy usage in launcher and keeps it simple for the user.\nCurrently the are still some problems and needed changes:\n\n writing doc ( and testing)\n easier usage => added constructor with Consumer as argument\n allow usage for non stateless processors => some problems where you need a shared state you could easily share the state between processors by collections. Some problems are never parallel doable. so some work for the user will be left.\n\nwdyt about it?", "createdAt": "2020-02-28T16:24:22Z", "url": "https://github.com/INRIA/spoon/pull/3280", "merged": true, "mergeCommit": {"oid": "a3126ca8756d93f9592fe159833ff848e4e3fc25"}, "closed": true, "closedAt": "2020-03-10T08:53:45Z", "author": {"login": "MartinWitt"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcIyWKMAH2gAyMzgxNDc0NDU0OmI2YzljOWYxOGU0NjZkNjg0Y2RhMTcyNTc0MzYzOTAyY2U4ZjI2ZmQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcLG8s_gH2gAyMzgxNDc0NDU0OjkyMjQ0NGU1Nzg3ODYxMjNjNjhkNzkxMzJkZDBjNzNlNDNlMzRiMTY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b6c9c9f18e466d684cda172574363902ce8f26fd", "author": {"user": {"login": "MartinWitt", "name": null}}, "url": "https://github.com/INRIA/spoon/commit/b6c9c9f18e466d684cda172574363902ce8f26fd", "committedDate": "2020-02-28T16:16:56Z", "message": "add first try for parallel processor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87fc7bc585274d9a3073b0ac7dcd7e00f531b4f4", "author": {"user": {"login": "MartinWitt", "name": null}}, "url": "https://github.com/INRIA/spoon/commit/87fc7bc585274d9a3073b0ac7dcd7e00f531b4f4", "committedDate": "2020-02-28T16:51:47Z", "message": "change add to put"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16e8db1b1ac0cbba9e175fe7826e41c4adfdae15", "author": {"user": {"login": "MartinWitt", "name": null}}, "url": "https://github.com/INRIA/spoon/commit/16e8db1b1ac0cbba9e175fe7826e41c4adfdae15", "committedDate": "2020-02-28T17:22:00Z", "message": "change test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "600806248f3c6d93a3705a47e4804ab732375a0f", "author": {"user": {"login": "MartinWitt", "name": null}}, "url": "https://github.com/INRIA/spoon/commit/600806248f3c6d93a3705a47e4804ab732375a0f", "committedDate": "2020-02-28T18:31:41Z", "message": "add new constructor accepting a consumer and a number"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6584fc15faf35e03a0004b174e226b94cd23045e", "author": {"user": {"login": "MartinWitt", "name": null}}, "url": "https://github.com/INRIA/spoon/commit/6584fc15faf35e03a0004b174e226b94cd23045e", "committedDate": "2020-03-01T12:21:15Z", "message": "add check if some processors are same"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8a46483b547d640fad58a84f118ece0982d6bad", "author": {"user": {"login": "MartinWitt", "name": null}}, "url": "https://github.com/INRIA/spoon/commit/d8a46483b547d640fad58a84f118ece0982d6bad", "committedDate": "2020-03-02T17:08:34Z", "message": "add processorfactory and new constructor. removed distinct check, because it relays on hashcode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29a14c57a5c30281dac0ddfd4aada4d6c19a52b8", "author": {"user": {"login": "MartinWitt", "name": null}}, "url": "https://github.com/INRIA/spoon/commit/29a14c57a5c30281dac0ddfd4aada4d6c19a52b8", "committedDate": "2020-03-03T18:06:02Z", "message": " refactor code and tests. add doc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce1e4f60829f260a0500a65d1cb0e20946d20272", "author": {"user": {"login": "MartinWitt", "name": null}}, "url": "https://github.com/INRIA/spoon/commit/ce1e4f60829f260a0500a65d1cb0e20946d20272", "committedDate": "2020-03-03T18:23:55Z", "message": " fix header"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2a1f48dea87ee2d5c814648ae0974b93702df4d", "author": {"user": {"login": "MartinWitt", "name": null}}, "url": "https://github.com/INRIA/spoon/commit/d2a1f48dea87ee2d5c814648ae0974b93702df4d", "committedDate": "2020-03-03T18:38:31Z", "message": " fix doc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNTc4NDM2", "url": "https://github.com/INRIA/spoon/pull/3280#pullrequestreview-370578436", "createdAt": "2020-03-06T19:38:31Z", "commit": {"oid": "d2a1f48dea87ee2d5c814648ae0974b93702df4d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxOTozODozMVrOFzE87A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxOTozODozMVrOFzE87A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEwMjgyOA==", "bodyText": "neat API!", "url": "https://github.com/INRIA/spoon/pull/3280#discussion_r389102828", "createdAt": "2020-03-06T19:38:31Z", "author": {"login": "monperrus"}, "path": "src/main/java/spoon/processing/AbstractParallelProcessor.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/**\n+ * Copyright (C) 2006-2019 INRIA and contributors\n+ *\n+ * Spoon is available either under the terms of the MIT License (see LICENSE-MIT.txt) of the Cecill-C License (see LICENSE-CECILL-C.txt). You as the user are entitled to choose the terms under which to adopt Spoon.\n+ */\n+package spoon.processing;\n+\n+import java.util.Iterator;\n+import java.util.concurrent.ArrayBlockingQueue;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.function.Consumer;\n+import java.util.stream.StreamSupport;\n+\n+import spoon.SpoonException;\n+import spoon.reflect.declaration.CtElement;\n+\n+/**\n+ * AbstractParallelProcessor allows using multiple threads for concurrent\n+ * processing with {@link AbstractProcessor}.\n+ *\n+ * <b> This class should only be used if all processors do the same.</b>\n+ * Otherwise the result may vary from the expected result. All processors <b>\n+ * must </b> synchronize shared fields like Collections by themselves. Multiple\n+ * constructors exist for different approaches creating this. You can create\n+ * this processor with either a Iterable of processors or a Consumer.\n+ *\n+ * For creating and managing threads a {@link Executors#newFixedThreadPool()} is\n+ * used. Creating more threads then cores can harm the performance. Using a\n+ * different thread pool could increase the performance, but this class should\n+ * be general usage. If you need better performance you may want to use an own\n+ * class with different parallel approach.\n+ */\n+public abstract class AbstractParallelProcessor<E extends CtElement> extends AbstractProcessor<E> {\n+\n+\tprivate ExecutorService service;\n+\tprivate ArrayBlockingQueue<Processor<E>> processorQueue;\n+\n+\t/**\n+\t * Creates a new AbstractParallelProcessor from given iterable. The iterable is\n+\t * fully consumed. Giving an endless iterable of processors will result in\n+\t * errors. The processors must follow the guidelines given in the class\n+\t * description.\n+\t *\n+\t * @param processors iterable of processors.\n+\t * @throws IllegalArgumentException if size of iterable is less than 1.\n+\t *\n+\t */\n+\tpublic AbstractParallelProcessor(Iterable<Processor<E>> processors) {\n+\t\t// added cast because constructors need int\n+\t\tint processorNumber = (int) StreamSupport.stream(processors.spliterator(), false).count();\n+\t\tprocessorQueue = new ArrayBlockingQueue<>(processorNumber);\n+\t\tprocessors.forEach(processorQueue::add);\n+\t\tservice = Executors.newFixedThreadPool(processorNumber);\n+\t}\n+\n+\t/**\n+\t * Creates a new AbstractParallelProcessor from given iterable. The processors\n+\t * must follow the guidelines given in the class description.\n+\t *\n+\t * @param processors         iterable of processors.\n+\t * @param numberOfProcessors number consumed from the iterable added to the\n+\t *                           active processors.\n+\t * @throws SpoonException           if iterable has less values then\n+\t *                                  numberOfProcessors.\n+\t * @throws IllegalArgumentException if numberOfProcessors is less than 1.\n+\t *\n+\t */\n+\tpublic AbstractParallelProcessor(Iterable<Processor<E>> processors, int numberOfProcessors) {\n+\t\tprocessorQueue = new ArrayBlockingQueue<>(numberOfProcessors);\n+\t\tservice = Executors.newFixedThreadPool(numberOfProcessors);\n+\t\tIterator<Processor<E>> it = processors.iterator();\n+\t\tfor (int i = 0; i < numberOfProcessors; i++) {\n+\t\t\tif (!it.hasNext()) {\n+\t\t\t\tthrow new SpoonException(\"not enough elements provided, iterable is already empty\");\n+\t\t\t}\n+\t\t\tprocessorQueue.add(it.next());\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Creates a new AbstractParallelProcessor from given consumer. The processors\n+\t * must follow the guidelines given in the class description.\n+\t *\n+\t * @param processFunction    Represents an operation that accepts a single\n+\t *                           element E and returns no result.\n+\t * @param numberOfProcessors number of concurrent running processors.\n+\t * @throws IllegalArgumentException if numberOfProcessors is less than 1.\n+\t */\n+\tpublic AbstractParallelProcessor(Consumer<E> processFunction, int numberOfProcessors) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2a1f48dea87ee2d5c814648ae0974b93702df4d"}, "originalPosition": 90}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a64dfb402ab9efe6870d51353e0069c3a574536d", "author": {"user": {"login": "MartinWitt", "name": null}}, "url": "https://github.com/INRIA/spoon/commit/a64dfb402ab9efe6870d51353e0069c3a574536d", "committedDate": "2020-03-06T20:57:36Z", "message": "add contracts to test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "922444e578786123c68d79132dd0c73e43e34b16", "author": {"user": {"login": "MartinWitt", "name": null}}, "url": "https://github.com/INRIA/spoon/commit/922444e578786123c68d79132dd0c73e43e34b16", "committedDate": "2020-03-06T21:24:59Z", "message": "add documentation"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1404, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}