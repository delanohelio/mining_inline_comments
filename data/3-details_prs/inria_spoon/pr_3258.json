{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2NzcyOTc0", "number": 3258, "title": "feature: add fluent API for Launcher", "bodyText": "Showcase some code for discussion #1563 . There are still a lot of calls to the environment missing. It's only to showcase the idea.", "createdAt": "2020-02-18T18:36:48Z", "url": "https://github.com/INRIA/spoon/pull/3258", "merged": true, "mergeCommit": {"oid": "b93001b8720042bea72d89b02523823c8107c8b7"}, "closed": true, "closedAt": "2020-02-26T08:54:50Z", "author": {"login": "MartinWitt"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcFR1FGAH2gAyMzc2NzcyOTc0OjUwN2VkNTg5YTA4MTA5Mzg5NWUwM2E0YWRlNmEyNWZjMTI2ZjJlN2E=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcIBK4aAFqTM2NDY1ODM2Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "507ed589a081093895e03a4ade6a25fc126f2e7a", "author": {"user": {"login": "MartinWitt", "name": null}}, "url": "https://github.com/INRIA/spoon/commit/507ed589a081093895e03a4ade6a25fc126f2e7a", "committedDate": "2020-02-17T18:42:04Z", "message": " start first try for fluent launcher"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "225a4868cd2468305332c7f46e4aa7037219863b", "author": {"user": {"login": "MartinWitt", "name": null}}, "url": "https://github.com/INRIA/spoon/commit/225a4868cd2468305332c7f46e4aa7037219863b", "committedDate": "2020-02-17T19:43:36Z", "message": "showcase usecase1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "710a7427790e62f133c355d9baa46e528d359012", "author": {"user": {"login": "MartinWitt", "name": null}}, "url": "https://github.com/INRIA/spoon/commit/710a7427790e62f133c355d9baa46e528d359012", "committedDate": "2020-02-18T18:32:46Z", "message": "showcase first 2 usecases"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxMjM2NTYz", "url": "https://github.com/INRIA/spoon/pull/3258#pullrequestreview-361236563", "createdAt": "2020-02-19T16:25:23Z", "commit": {"oid": "507ed589a081093895e03a4ade6a25fc126f2e7a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjoyNToyNFrOFruB6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjoyNToyNFrOFruB6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4NzI0Mw==", "bodyText": "Can this be private?", "url": "https://github.com/INRIA/spoon/pull/3258#discussion_r381387243", "createdAt": "2020-02-19T16:25:24Z", "author": {"login": "DaveJarvis"}, "path": "src/main/java/spoon/FluentLauncher.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package spoon;\n+\n+import java.io.File;\n+import java.util.List;\n+\n+import spoon.compiler.Environment;\n+import spoon.compiler.SpoonResource;\n+import spoon.processing.Processor;\n+import spoon.reflect.CtModel;\n+import spoon.reflect.declaration.CtElement;\n+import spoon.reflect.declaration.CtType;\n+import spoon.reflect.factory.Factory;\n+import spoon.reflect.visitor.Filter;\n+import spoon.reflect.visitor.PrettyPrinter;\n+import spoon.support.JavaOutputProcessor;\n+\n+/**\n+ * TODO: doc\n+ */\n+public class FluentLauncher {\n+\n+\tLauncher launcher;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "507ed589a081093895e03a4ade6a25fc126f2e7a"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxMjM3NzA3", "url": "https://github.com/INRIA/spoon/pull/3258#pullrequestreview-361237707", "createdAt": "2020-02-19T16:26:38Z", "commit": {"oid": "507ed589a081093895e03a4ade6a25fc126f2e7a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjoyNjozOVrOFruFVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjoyNjozOVrOFruFVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4ODExNg==", "bodyText": "Is there a need for buildModel and buildCtModel?", "url": "https://github.com/INRIA/spoon/pull/3258#discussion_r381388116", "createdAt": "2020-02-19T16:26:39Z", "author": {"login": "DaveJarvis"}, "path": "src/main/java/spoon/FluentLauncher.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package spoon;\n+\n+import java.io.File;\n+import java.util.List;\n+\n+import spoon.compiler.Environment;\n+import spoon.compiler.SpoonResource;\n+import spoon.processing.Processor;\n+import spoon.reflect.CtModel;\n+import spoon.reflect.declaration.CtElement;\n+import spoon.reflect.declaration.CtType;\n+import spoon.reflect.factory.Factory;\n+import spoon.reflect.visitor.Filter;\n+import spoon.reflect.visitor.PrettyPrinter;\n+import spoon.support.JavaOutputProcessor;\n+\n+/**\n+ * TODO: doc\n+ */\n+public class FluentLauncher {\n+\n+\tLauncher launcher;\n+\n+\tpublic FluentLauncher() {\n+\t\tthis.launcher = new Launcher();\n+\t}\n+\n+\t/**\n+\t * @param args\n+\t * @see spoon.Launcher#run(java.lang.String[])\n+\t */\n+\n+\tpublic void run(String[] args) {\n+\t\tlauncher.run(args);\n+\t}\n+\n+\tpublic void printUsage() {\n+\t\tlauncher.printUsage();\n+\t}\n+\n+\tpublic FluentLauncher inputResource(String path) {\n+\t\tlauncher.addInputResource(path);\n+\t\treturn this;\n+\t}\n+\n+\tpublic FluentLauncher inputResource(SpoonResource resource) {\n+\t\tlauncher.addInputResource(resource);\n+\t\treturn this;\n+\t}\n+\n+\tpublic FluentLauncher processor(String name) {\n+\t\tlauncher.addProcessor(name);\n+\t\treturn this;\n+\t}\n+\n+\tpublic <T extends CtElement> FluentLauncher processor(Processor<T> processor) {\n+\t\tlauncher.addProcessor(processor);\n+\t\treturn this;\n+\t}\n+\n+\tpublic FluentLauncher templateResource(SpoonResource resource) {\n+\t\tlauncher.addTemplateResource(resource);\n+\t\treturn this;\n+\t}\n+\n+\t// TODO: das sollte in Methoden zum setzen umgewandelt werden\n+\tpublic Environment getEnvironment() {\n+\t\treturn launcher.getEnvironment();\n+\t}\n+\n+\tpublic String toString() {\n+\t\treturn launcher.toString();\n+\t}\n+\n+\t// needed???\n+\tpublic SpoonModelBuilder compiler(Factory factory) {\n+\t\treturn launcher.createCompiler(factory);\n+\t}\n+\n+\t// needed???\n+\tpublic SpoonModelBuilder compiler(Factory factory, List<SpoonResource> inputSources) {\n+\t\treturn launcher.createCompiler(factory, inputSources);\n+\t}\n+\n+\t// needed???\n+\tpublic SpoonModelBuilder createCompiler(Factory factory, List<SpoonResource> inputSources,\n+\t\t\tList<SpoonResource> templateSources) {\n+\t\treturn launcher.createCompiler(factory, inputSources, templateSources);\n+\t}\n+\n+\t// needed?\n+\tpublic SpoonModelBuilder createCompiler() {\n+\t\treturn launcher.createCompiler();\n+\t}\n+\n+\t// needed?\n+\tpublic SpoonModelBuilder createCompiler(List<SpoonResource> inputSources) {\n+\t\treturn launcher.createCompiler(inputSources);\n+\t}\n+\n+\t// needed?\n+\tpublic Factory createFactory() {\n+\t\treturn launcher.createFactory();\n+\t}\n+\n+\t// needed???\n+\tpublic Factory getFactory() {\n+\t\treturn launcher.getFactory();\n+\t}\n+\n+\t// needed?\n+\tpublic Environment createEnvironment() {\n+\t\treturn launcher.createEnvironment();\n+\t}\n+\n+\tpublic CtModel buildModel() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "507ed589a081093895e03a4ade6a25fc126f2e7a"}, "originalPosition": 116}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxMjM4NDk5", "url": "https://github.com/INRIA/spoon/pull/3258#pullrequestreview-361238499", "createdAt": "2020-02-19T16:27:31Z", "commit": {"oid": "507ed589a081093895e03a4ade6a25fc126f2e7a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjoyNzozMlrOFruHuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjoyNzozMlrOFruHuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4ODczMQ==", "bodyText": "Not part of the fluent interface? This could be confusing for some as it doesn't follow the fluent interface idiom.", "url": "https://github.com/INRIA/spoon/pull/3258#discussion_r381388731", "createdAt": "2020-02-19T16:27:32Z", "author": {"login": "DaveJarvis"}, "path": "src/main/java/spoon/FluentLauncher.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package spoon;\n+\n+import java.io.File;\n+import java.util.List;\n+\n+import spoon.compiler.Environment;\n+import spoon.compiler.SpoonResource;\n+import spoon.processing.Processor;\n+import spoon.reflect.CtModel;\n+import spoon.reflect.declaration.CtElement;\n+import spoon.reflect.declaration.CtType;\n+import spoon.reflect.factory.Factory;\n+import spoon.reflect.visitor.Filter;\n+import spoon.reflect.visitor.PrettyPrinter;\n+import spoon.support.JavaOutputProcessor;\n+\n+/**\n+ * TODO: doc\n+ */\n+public class FluentLauncher {\n+\n+\tLauncher launcher;\n+\n+\tpublic FluentLauncher() {\n+\t\tthis.launcher = new Launcher();\n+\t}\n+\n+\t/**\n+\t * @param args\n+\t * @see spoon.Launcher#run(java.lang.String[])\n+\t */\n+\n+\tpublic void run(String[] args) {\n+\t\tlauncher.run(args);\n+\t}\n+\n+\tpublic void printUsage() {\n+\t\tlauncher.printUsage();\n+\t}\n+\n+\tpublic FluentLauncher inputResource(String path) {\n+\t\tlauncher.addInputResource(path);\n+\t\treturn this;\n+\t}\n+\n+\tpublic FluentLauncher inputResource(SpoonResource resource) {\n+\t\tlauncher.addInputResource(resource);\n+\t\treturn this;\n+\t}\n+\n+\tpublic FluentLauncher processor(String name) {\n+\t\tlauncher.addProcessor(name);\n+\t\treturn this;\n+\t}\n+\n+\tpublic <T extends CtElement> FluentLauncher processor(Processor<T> processor) {\n+\t\tlauncher.addProcessor(processor);\n+\t\treturn this;\n+\t}\n+\n+\tpublic FluentLauncher templateResource(SpoonResource resource) {\n+\t\tlauncher.addTemplateResource(resource);\n+\t\treturn this;\n+\t}\n+\n+\t// TODO: das sollte in Methoden zum setzen umgewandelt werden\n+\tpublic Environment getEnvironment() {\n+\t\treturn launcher.getEnvironment();\n+\t}\n+\n+\tpublic String toString() {\n+\t\treturn launcher.toString();\n+\t}\n+\n+\t// needed???\n+\tpublic SpoonModelBuilder compiler(Factory factory) {\n+\t\treturn launcher.createCompiler(factory);\n+\t}\n+\n+\t// needed???\n+\tpublic SpoonModelBuilder compiler(Factory factory, List<SpoonResource> inputSources) {\n+\t\treturn launcher.createCompiler(factory, inputSources);\n+\t}\n+\n+\t// needed???\n+\tpublic SpoonModelBuilder createCompiler(Factory factory, List<SpoonResource> inputSources,\n+\t\t\tList<SpoonResource> templateSources) {\n+\t\treturn launcher.createCompiler(factory, inputSources, templateSources);\n+\t}\n+\n+\t// needed?\n+\tpublic SpoonModelBuilder createCompiler() {\n+\t\treturn launcher.createCompiler();\n+\t}\n+\n+\t// needed?\n+\tpublic SpoonModelBuilder createCompiler(List<SpoonResource> inputSources) {\n+\t\treturn launcher.createCompiler(inputSources);\n+\t}\n+\n+\t// needed?\n+\tpublic Factory createFactory() {\n+\t\treturn launcher.createFactory();\n+\t}\n+\n+\t// needed???\n+\tpublic Factory getFactory() {\n+\t\treturn launcher.getFactory();\n+\t}\n+\n+\t// needed?\n+\tpublic Environment createEnvironment() {\n+\t\treturn launcher.createEnvironment();\n+\t}\n+\n+\tpublic CtModel buildModel() {\n+\t\tlauncher.run();\n+\t\treturn launcher.getModel();\n+\t}\n+\n+\tpublic FluentLauncher outputDirectory(String path) {\n+\t\tlauncher.setSourceOutputDirectory(path);\n+\t\treturn this;\n+\t}\n+\n+\tpublic void setSourceOutputDirectory(File outputDirectory) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "507ed589a081093895e03a4ade6a25fc126f2e7a"}, "originalPosition": 126}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxMjM4OTIx", "url": "https://github.com/INRIA/spoon/pull/3258#pullrequestreview-361238921", "createdAt": "2020-02-19T16:27:58Z", "commit": {"oid": "507ed589a081093895e03a4ade6a25fc126f2e7a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjoyNzo1OVrOFruJCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjoyNzo1OVrOFruJCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4OTA2Ng==", "bodyText": "Does this need to follow the fluent interface idiom?", "url": "https://github.com/INRIA/spoon/pull/3258#discussion_r381389066", "createdAt": "2020-02-19T16:27:59Z", "author": {"login": "DaveJarvis"}, "path": "src/main/java/spoon/FluentLauncher.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package spoon;\n+\n+import java.io.File;\n+import java.util.List;\n+\n+import spoon.compiler.Environment;\n+import spoon.compiler.SpoonResource;\n+import spoon.processing.Processor;\n+import spoon.reflect.CtModel;\n+import spoon.reflect.declaration.CtElement;\n+import spoon.reflect.declaration.CtType;\n+import spoon.reflect.factory.Factory;\n+import spoon.reflect.visitor.Filter;\n+import spoon.reflect.visitor.PrettyPrinter;\n+import spoon.support.JavaOutputProcessor;\n+\n+/**\n+ * TODO: doc\n+ */\n+public class FluentLauncher {\n+\n+\tLauncher launcher;\n+\n+\tpublic FluentLauncher() {\n+\t\tthis.launcher = new Launcher();\n+\t}\n+\n+\t/**\n+\t * @param args\n+\t * @see spoon.Launcher#run(java.lang.String[])\n+\t */\n+\n+\tpublic void run(String[] args) {\n+\t\tlauncher.run(args);\n+\t}\n+\n+\tpublic void printUsage() {\n+\t\tlauncher.printUsage();\n+\t}\n+\n+\tpublic FluentLauncher inputResource(String path) {\n+\t\tlauncher.addInputResource(path);\n+\t\treturn this;\n+\t}\n+\n+\tpublic FluentLauncher inputResource(SpoonResource resource) {\n+\t\tlauncher.addInputResource(resource);\n+\t\treturn this;\n+\t}\n+\n+\tpublic FluentLauncher processor(String name) {\n+\t\tlauncher.addProcessor(name);\n+\t\treturn this;\n+\t}\n+\n+\tpublic <T extends CtElement> FluentLauncher processor(Processor<T> processor) {\n+\t\tlauncher.addProcessor(processor);\n+\t\treturn this;\n+\t}\n+\n+\tpublic FluentLauncher templateResource(SpoonResource resource) {\n+\t\tlauncher.addTemplateResource(resource);\n+\t\treturn this;\n+\t}\n+\n+\t// TODO: das sollte in Methoden zum setzen umgewandelt werden\n+\tpublic Environment getEnvironment() {\n+\t\treturn launcher.getEnvironment();\n+\t}\n+\n+\tpublic String toString() {\n+\t\treturn launcher.toString();\n+\t}\n+\n+\t// needed???\n+\tpublic SpoonModelBuilder compiler(Factory factory) {\n+\t\treturn launcher.createCompiler(factory);\n+\t}\n+\n+\t// needed???\n+\tpublic SpoonModelBuilder compiler(Factory factory, List<SpoonResource> inputSources) {\n+\t\treturn launcher.createCompiler(factory, inputSources);\n+\t}\n+\n+\t// needed???\n+\tpublic SpoonModelBuilder createCompiler(Factory factory, List<SpoonResource> inputSources,\n+\t\t\tList<SpoonResource> templateSources) {\n+\t\treturn launcher.createCompiler(factory, inputSources, templateSources);\n+\t}\n+\n+\t// needed?\n+\tpublic SpoonModelBuilder createCompiler() {\n+\t\treturn launcher.createCompiler();\n+\t}\n+\n+\t// needed?\n+\tpublic SpoonModelBuilder createCompiler(List<SpoonResource> inputSources) {\n+\t\treturn launcher.createCompiler(inputSources);\n+\t}\n+\n+\t// needed?\n+\tpublic Factory createFactory() {\n+\t\treturn launcher.createFactory();\n+\t}\n+\n+\t// needed???\n+\tpublic Factory getFactory() {\n+\t\treturn launcher.getFactory();\n+\t}\n+\n+\t// needed?\n+\tpublic Environment createEnvironment() {\n+\t\treturn launcher.createEnvironment();\n+\t}\n+\n+\tpublic CtModel buildModel() {\n+\t\tlauncher.run();\n+\t\treturn launcher.getModel();\n+\t}\n+\n+\tpublic FluentLauncher outputDirectory(String path) {\n+\t\tlauncher.setSourceOutputDirectory(path);\n+\t\treturn this;\n+\t}\n+\n+\tpublic void setSourceOutputDirectory(File outputDirectory) {\n+\t\tlauncher.setSourceOutputDirectory(outputDirectory);\n+\t}\n+\n+\tpublic FluentLauncher outputFilter(Filter<CtType<?>> typeFilter) {\n+\t\tlauncher.setOutputFilter(typeFilter);\n+\t\treturn this;\n+\t}\n+\n+\tpublic FluentLauncher outputFilter(String... qualifedNames) {\n+\t\tlauncher.setOutputFilter(qualifedNames);\n+\t\treturn this;\n+\t}\n+\n+\tpublic FluentLauncher binaryOutputDirectory(String path) {\n+\t\tlauncher.setBinaryOutputDirectory(path);\n+\t\treturn this;\n+\t}\n+\n+\tpublic void binaryOutputDirectory(File outputDirectory) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "507ed589a081093895e03a4ade6a25fc126f2e7a"}, "originalPosition": 145}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxMjM5NzE2", "url": "https://github.com/INRIA/spoon/pull/3258#pullrequestreview-361239716", "createdAt": "2020-02-19T16:28:48Z", "commit": {"oid": "507ed589a081093895e03a4ade6a25fc126f2e7a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjoyODo0OVrOFruLZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjoyODo0OVrOFruLZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4OTY2OA==", "bodyText": "How does a Factory differ from the fluent interface? Could mixing metaphors be confusing?", "url": "https://github.com/INRIA/spoon/pull/3258#discussion_r381389668", "createdAt": "2020-02-19T16:28:49Z", "author": {"login": "DaveJarvis"}, "path": "src/main/java/spoon/FluentLauncher.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package spoon;\n+\n+import java.io.File;\n+import java.util.List;\n+\n+import spoon.compiler.Environment;\n+import spoon.compiler.SpoonResource;\n+import spoon.processing.Processor;\n+import spoon.reflect.CtModel;\n+import spoon.reflect.declaration.CtElement;\n+import spoon.reflect.declaration.CtType;\n+import spoon.reflect.factory.Factory;\n+import spoon.reflect.visitor.Filter;\n+import spoon.reflect.visitor.PrettyPrinter;\n+import spoon.support.JavaOutputProcessor;\n+\n+/**\n+ * TODO: doc\n+ */\n+public class FluentLauncher {\n+\n+\tLauncher launcher;\n+\n+\tpublic FluentLauncher() {\n+\t\tthis.launcher = new Launcher();\n+\t}\n+\n+\t/**\n+\t * @param args\n+\t * @see spoon.Launcher#run(java.lang.String[])\n+\t */\n+\n+\tpublic void run(String[] args) {\n+\t\tlauncher.run(args);\n+\t}\n+\n+\tpublic void printUsage() {\n+\t\tlauncher.printUsage();\n+\t}\n+\n+\tpublic FluentLauncher inputResource(String path) {\n+\t\tlauncher.addInputResource(path);\n+\t\treturn this;\n+\t}\n+\n+\tpublic FluentLauncher inputResource(SpoonResource resource) {\n+\t\tlauncher.addInputResource(resource);\n+\t\treturn this;\n+\t}\n+\n+\tpublic FluentLauncher processor(String name) {\n+\t\tlauncher.addProcessor(name);\n+\t\treturn this;\n+\t}\n+\n+\tpublic <T extends CtElement> FluentLauncher processor(Processor<T> processor) {\n+\t\tlauncher.addProcessor(processor);\n+\t\treturn this;\n+\t}\n+\n+\tpublic FluentLauncher templateResource(SpoonResource resource) {\n+\t\tlauncher.addTemplateResource(resource);\n+\t\treturn this;\n+\t}\n+\n+\t// TODO: das sollte in Methoden zum setzen umgewandelt werden\n+\tpublic Environment getEnvironment() {\n+\t\treturn launcher.getEnvironment();\n+\t}\n+\n+\tpublic String toString() {\n+\t\treturn launcher.toString();\n+\t}\n+\n+\t// needed???\n+\tpublic SpoonModelBuilder compiler(Factory factory) {\n+\t\treturn launcher.createCompiler(factory);\n+\t}\n+\n+\t// needed???\n+\tpublic SpoonModelBuilder compiler(Factory factory, List<SpoonResource> inputSources) {\n+\t\treturn launcher.createCompiler(factory, inputSources);\n+\t}\n+\n+\t// needed???\n+\tpublic SpoonModelBuilder createCompiler(Factory factory, List<SpoonResource> inputSources,\n+\t\t\tList<SpoonResource> templateSources) {\n+\t\treturn launcher.createCompiler(factory, inputSources, templateSources);\n+\t}\n+\n+\t// needed?\n+\tpublic SpoonModelBuilder createCompiler() {\n+\t\treturn launcher.createCompiler();\n+\t}\n+\n+\t// needed?\n+\tpublic SpoonModelBuilder createCompiler(List<SpoonResource> inputSources) {\n+\t\treturn launcher.createCompiler(inputSources);\n+\t}\n+\n+\t// needed?\n+\tpublic Factory createFactory() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "507ed589a081093895e03a4ade6a25fc126f2e7a"}, "originalPosition": 102}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxMjQwOTQz", "url": "https://github.com/INRIA/spoon/pull/3258#pullrequestreview-361240943", "createdAt": "2020-02-19T16:30:11Z", "commit": {"oid": "507ed589a081093895e03a4ade6a25fc126f2e7a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjozMDoxMVrOFruO9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjozMDoxMVrOFruO9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM5MDU4Mg==", "bodyText": "How does a SpoonModelBuilder differ from the FluentLauncher? Conceptually, to me, they seem like they are trying to accomplish the same task: using a builder pattern to configure Spoon. Exposing both may lead to some confusion.", "url": "https://github.com/INRIA/spoon/pull/3258#discussion_r381390582", "createdAt": "2020-02-19T16:30:11Z", "author": {"login": "DaveJarvis"}, "path": "src/main/java/spoon/FluentLauncher.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package spoon;\n+\n+import java.io.File;\n+import java.util.List;\n+\n+import spoon.compiler.Environment;\n+import spoon.compiler.SpoonResource;\n+import spoon.processing.Processor;\n+import spoon.reflect.CtModel;\n+import spoon.reflect.declaration.CtElement;\n+import spoon.reflect.declaration.CtType;\n+import spoon.reflect.factory.Factory;\n+import spoon.reflect.visitor.Filter;\n+import spoon.reflect.visitor.PrettyPrinter;\n+import spoon.support.JavaOutputProcessor;\n+\n+/**\n+ * TODO: doc\n+ */\n+public class FluentLauncher {\n+\n+\tLauncher launcher;\n+\n+\tpublic FluentLauncher() {\n+\t\tthis.launcher = new Launcher();\n+\t}\n+\n+\t/**\n+\t * @param args\n+\t * @see spoon.Launcher#run(java.lang.String[])\n+\t */\n+\n+\tpublic void run(String[] args) {\n+\t\tlauncher.run(args);\n+\t}\n+\n+\tpublic void printUsage() {\n+\t\tlauncher.printUsage();\n+\t}\n+\n+\tpublic FluentLauncher inputResource(String path) {\n+\t\tlauncher.addInputResource(path);\n+\t\treturn this;\n+\t}\n+\n+\tpublic FluentLauncher inputResource(SpoonResource resource) {\n+\t\tlauncher.addInputResource(resource);\n+\t\treturn this;\n+\t}\n+\n+\tpublic FluentLauncher processor(String name) {\n+\t\tlauncher.addProcessor(name);\n+\t\treturn this;\n+\t}\n+\n+\tpublic <T extends CtElement> FluentLauncher processor(Processor<T> processor) {\n+\t\tlauncher.addProcessor(processor);\n+\t\treturn this;\n+\t}\n+\n+\tpublic FluentLauncher templateResource(SpoonResource resource) {\n+\t\tlauncher.addTemplateResource(resource);\n+\t\treturn this;\n+\t}\n+\n+\t// TODO: das sollte in Methoden zum setzen umgewandelt werden\n+\tpublic Environment getEnvironment() {\n+\t\treturn launcher.getEnvironment();\n+\t}\n+\n+\tpublic String toString() {\n+\t\treturn launcher.toString();\n+\t}\n+\n+\t// needed???\n+\tpublic SpoonModelBuilder compiler(Factory factory) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "507ed589a081093895e03a4ade6a25fc126f2e7a"}, "originalPosition": 76}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7f8f8279f8f6d6f89ef29f366ef369a3627ea64", "author": {"user": {"login": "MartinWitt", "name": null}}, "url": "https://github.com/INRIA/spoon/commit/b7f8f8279f8f6d6f89ef29f366ef369a3627ea64", "committedDate": "2020-02-19T17:58:34Z", "message": "add comments with levels  to methods to categorize if needed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "baf69e8251a3610a13072a1df681292f2ba5f98a", "author": {"user": {"login": "MartinWitt", "name": null}}, "url": "https://github.com/INRIA/spoon/commit/baf69e8251a3610a13072a1df681292f2ba5f98a", "committedDate": "2020-02-19T18:05:21Z", "message": " remove methods and add usecase3"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33edf5c41ab53e2bd20c5ca7252b105d11545949", "author": {"user": {"login": "MartinWitt", "name": null}}, "url": "https://github.com/INRIA/spoon/commit/33edf5c41ab53e2bd20c5ca7252b105d11545949", "committedDate": "2020-02-20T19:23:27Z", "message": " add license header and removed methods, making it more simple"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "341dfa71f1f38f387f777a00a3d38753548a9b3e", "author": {"user": {"login": "MartinWitt", "name": null}}, "url": "https://github.com/INRIA/spoon/commit/341dfa71f1f38f387f777a00a3d38753548a9b3e", "committedDate": "2020-02-20T19:24:58Z", "message": "add new methods with iterable for processors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f08437e0ed96e5a13359559825ff8d1543fc92d6", "author": {"user": {"login": "MartinWitt", "name": null}}, "url": "https://github.com/INRIA/spoon/commit/f08437e0ed96e5a13359559825ff8d1543fc92d6", "committedDate": "2020-02-20T19:35:19Z", "message": " add encoding method to launcher"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09a883ac46242b99d5fdea530319a0a443b77452", "author": {"user": {"login": "MartinWitt", "name": null}}, "url": "https://github.com/INRIA/spoon/commit/09a883ac46242b99d5fdea530319a0a443b77452", "committedDate": "2020-02-20T20:12:41Z", "message": "copy doc from launcher and environment classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d5a482a475b543172276785882f34dcd1637cf9", "author": {"user": {"login": "MartinWitt", "name": null}}, "url": "https://github.com/INRIA/spoon/commit/5d5a482a475b543172276785882f34dcd1637cf9", "committedDate": "2020-02-21T17:43:42Z", "message": " add new constructor allowing different launchers eg. mavenlauncher"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54fe75b6a062c871a4434b9848ac02315a179936", "author": {"user": {"login": "MartinWitt", "name": null}}, "url": "https://github.com/INRIA/spoon/commit/54fe75b6a062c871a4434b9848ac02315a179936", "committedDate": "2020-02-22T14:37:03Z", "message": "change type to spoonAPI and add final keyword"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d8709200a876cc1ab4c55b5998e006188fd48ae", "author": {"user": {"login": "MartinWitt", "name": null}}, "url": "https://github.com/INRIA/spoon/commit/5d8709200a876cc1ab4c55b5998e006188fd48ae", "committedDate": "2020-02-23T19:47:45Z", "message": "delete showcases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12fe013f56b297aa157ee1b1e5f8a6d059c16c4d", "author": {"user": {"login": "MartinWitt", "name": null}}, "url": "https://github.com/INRIA/spoon/commit/12fe013f56b297aa157ee1b1e5f8a6d059c16c4d", "committedDate": "2020-02-23T19:47:55Z", "message": "add doc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8152a49e27040924daae51bd8d2feb435de99752", "author": {"user": {"login": "MartinWitt", "name": null}}, "url": "https://github.com/INRIA/spoon/commit/8152a49e27040924daae51bd8d2feb435de99752", "committedDate": "2020-02-24T16:59:15Z", "message": "add tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1972e854ad9333350d3cb320c8b6a7c7360124c1", "author": {"user": {"login": "MartinWitt", "name": null}}, "url": "https://github.com/INRIA/spoon/commit/1972e854ad9333350d3cb320c8b6a7c7360124c1", "committedDate": "2020-02-24T16:59:50Z", "message": "add license header"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6cfc5779c5b629fd67c318dc139ca9e066c1a4b3", "author": {"user": {"login": "MartinWitt", "name": null}}, "url": "https://github.com/INRIA/spoon/commit/6cfc5779c5b629fd67c318dc139ca9e066c1a4b3", "committedDate": "2020-02-24T17:21:13Z", "message": " fix for jdk8, because List::of is jdk9"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d8cc92f095d5a5f7346cf38c3b9c92230b77f6c", "author": {"user": {"login": "MartinWitt", "name": null}}, "url": "https://github.com/INRIA/spoon/commit/9d8cc92f095d5a5f7346cf38c3b9c92230b77f6c", "committedDate": "2020-02-25T13:44:22Z", "message": "rerun CI after fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0NjU4MzY3", "url": "https://github.com/INRIA/spoon/pull/3258#pullrequestreview-364658367", "createdAt": "2020-02-26T06:59:16Z", "commit": {"oid": "9d8cc92f095d5a5f7346cf38c3b9c92230b77f6c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1395, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}