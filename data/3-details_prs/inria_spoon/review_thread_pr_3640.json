{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk5MDgxMTgx", "number": 3640, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMDo1NToyM1rOErH4ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMDo1NToyM1rOErH4ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNjUzNDExOnYy", "diffSide": "RIGHT", "path": "src/main/java/spoon/support/comparator/CtLineElementComparator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMDo1NToyM1rOHdttuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMTowMzo0N1rOHdt_IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkxOTczNg==", "bodyText": "If you want to respect the antisymetric property, this line could be replaced with\nreturn o1.equals(o2) ? 0 : ((o1.hashCode() < o2.hashCode()) ? -1 : 1);", "url": "https://github.com/INRIA/spoon/pull/3640#discussion_r500919736", "createdAt": "2020-10-07T10:55:23Z", "author": {"login": "nharrand"}, "path": "src/main/java/spoon/support/comparator/CtLineElementComparator.java", "diffHunk": "@@ -19,14 +19,14 @@\n public class CtLineElementComparator implements Comparator<CtElement>, Serializable {\n \n \t/**\n-\t * Returns 0 if o1 has the same position as o2, or both positions are invalid.\n-\t * Returns -1 if o1 is before o2 in the file, or o1 has no valid position.\n+\t * Returns 0 if o1 has the same position as o2, or both positions are invalid and o1.equals(o2).\n+\t * Returns -1 if o1 is before o2 in the file, or o1 has no valid position or both positions are invalid !o1.equals(o2).\n \t * Returns 1 if o2 is after o1 in the file, or o2 has no valid position.\n \t */\n \t@Override\n \tpublic int compare(CtElement o1, CtElement o2) {\n \t\tif (!o1.getPosition().isValidPosition() && !o2.getPosition().isValidPosition()) {\n-\t\t\treturn 0;\n+\t\t\treturn o1.equals(o2) ? 0 : -1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01cfb2855d710d4107f18249b341f3c2de7af92f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkyNDE5Mw==", "bodyText": "Nice fix. At first glance I see no problem with transitive and antisymmetric property. LGTM.", "url": "https://github.com/INRIA/spoon/pull/3640#discussion_r500924193", "createdAt": "2020-10-07T11:03:47Z", "author": {"login": "MartinWitt"}, "path": "src/main/java/spoon/support/comparator/CtLineElementComparator.java", "diffHunk": "@@ -19,14 +19,14 @@\n public class CtLineElementComparator implements Comparator<CtElement>, Serializable {\n \n \t/**\n-\t * Returns 0 if o1 has the same position as o2, or both positions are invalid.\n-\t * Returns -1 if o1 is before o2 in the file, or o1 has no valid position.\n+\t * Returns 0 if o1 has the same position as o2, or both positions are invalid and o1.equals(o2).\n+\t * Returns -1 if o1 is before o2 in the file, or o1 has no valid position or both positions are invalid !o1.equals(o2).\n \t * Returns 1 if o2 is after o1 in the file, or o2 has no valid position.\n \t */\n \t@Override\n \tpublic int compare(CtElement o1, CtElement o2) {\n \t\tif (!o1.getPosition().isValidPosition() && !o2.getPosition().isValidPosition()) {\n-\t\t\treturn 0;\n+\t\t\treturn o1.equals(o2) ? 0 : -1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkxOTczNg=="}, "originalCommit": {"oid": "01cfb2855d710d4107f18249b341f3c2de7af92f"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3615, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}