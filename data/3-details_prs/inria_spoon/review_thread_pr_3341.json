{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2OTIzNjM0", "number": 3341, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNToyMjozOFrOD0kK3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMToxNzo1MlrOD1ewGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NDQ1MTUwOnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNToyMjozOFrOGJj4fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNToyMjozOFrOGJj4fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY3ODI3MQ==", "bodyText": "The test is in noclasspath mode. Remove this or work in fullclasspath?", "url": "https://github.com/INRIA/spoon/pull/3341#discussion_r412678271", "createdAt": "2020-04-22T05:22:38Z", "author": {"login": "monperrus"}, "path": "pom.xml", "diffHunk": "@@ -159,6 +159,14 @@\n       <artifactId>maven-invoker</artifactId>\n       <version>3.0.1</version>\n     </dependency>\n+    <!-- https://mvnrepository.com/artifact/javax.validation/validation-api -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d92b10a20b07824009bd4bfccc194810bee9965a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NDQ1NDk5OnYy", "diffSide": "RIGHT", "path": "src/test/java/spoon/test/imports/ImportTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNToyMzo0OVrOGJj6Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNToyMzo0OVrOGJj6Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY3ODcyMg==", "bodyText": "In Spoon, the tests come with a one-line contract describing the test intention, something like\n// contract: annotations are not added on import statements\ncould you add the contract that is tested? Thanks!", "url": "https://github.com/INRIA/spoon/pull/3341#discussion_r412678722", "createdAt": "2020-04-22T05:23:49Z", "author": {"login": "monperrus"}, "path": "src/test/java/spoon/test/imports/ImportTest.java", "diffHunk": "@@ -1777,4 +1778,22 @@ public void testImportByJavaDoc() throws Exception {\n \t\t}\n \t}\n \n+\t@Test\n+\tpublic void testThatCorrectImportsAreGeneratedForJavaxAnnotatedElements() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d92b10a20b07824009bd4bfccc194810bee9965a"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NDQ1NTU1OnYy", "diffSide": "RIGHT", "path": "src/test/java/spoon/test/imports/ImportTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNToyNDowMlrOGJj6jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNToyNDowMlrOGJj6jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY3ODc5Nw==", "bodyText": "Remove System.out from tests.", "url": "https://github.com/INRIA/spoon/pull/3341#discussion_r412678797", "createdAt": "2020-04-22T05:24:02Z", "author": {"login": "monperrus"}, "path": "src/test/java/spoon/test/imports/ImportTest.java", "diffHunk": "@@ -1777,4 +1778,22 @@ public void testImportByJavaDoc() throws Exception {\n \t\t}\n \t}\n \n+\t@Test\n+\tpublic void testThatCorrectImportsAreGeneratedForJavaxAnnotatedElements() {\n+\t\tfinal Launcher l = new Launcher();\n+\t\tEnvironment e = l.getEnvironment();\n+\n+\t\te.setNoClasspath(true);\n+\t\te.setAutoImports(true);\n+\t\tl.addInputResource(\"src/test/java/spoon/test/imports/testclasses/badimportissue3320/source/TestSource.java\");\n+\t\tl.run();\n+\n+\t\tCtType<TestSource> objectCtType = l.getFactory().Type().get(TestSource.class);\n+\t\tCompilationUnit compilationUnit = l.getFactory().CompilationUnit().getOrCreate(objectCtType);\n+\n+\t\tfor (CtImport anImport : compilationUnit.getImports()) {\n+\t\t\tSystem.out.println(anImport.prettyprint());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d92b10a20b07824009bd4bfccc194810bee9965a"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDAyOTYyOnYy", "diffSide": "RIGHT", "path": "src/test/java/spoon/test/imports/testclasses/badimportissue3320/source/TestSource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMToxMzowOVrOGK8XWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMToxMzowOVrOGK8XWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDEyNzk2MQ==", "bodyText": "Personally i hate reading this. It feels like useless information, which get outdated easily. Git can provide this information better. Maybe remove it?", "url": "https://github.com/INRIA/spoon/pull/3341#discussion_r414127961", "createdAt": "2020-04-23T21:13:09Z", "author": {"login": "MartinWitt"}, "path": "src/test/java/spoon/test/imports/testclasses/badimportissue3320/source/TestSource.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package spoon.test.imports.testclasses.badimportissue3320.source;\n+\n+import spoon.test.imports.testclasses.badimportissue3320.source.other.SomeObjectDto;\n+import spoon.test.imports.testclasses.badimportissue3320.source.other.TestAnnotation;\n+\n+/**\n+ * @author Gibah Joseph\n+ * Email: gibahjoe@gmail.com\n+ * Apr, 2020\n+ **/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbb03134d4f2c770426526abac6e7df50d2e6855"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDAyOTgxOnYy", "diffSide": "RIGHT", "path": "src/test/java/spoon/test/imports/testclasses/badimportissue3320/source/other/SomeObjectDto.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMToxMzoxM1rOGK8XfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMToxMzoxM1rOGK8XfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDEyNzk5Nw==", "bodyText": "see other comment", "url": "https://github.com/INRIA/spoon/pull/3341#discussion_r414127997", "createdAt": "2020-04-23T21:13:13Z", "author": {"login": "MartinWitt"}, "path": "src/test/java/spoon/test/imports/testclasses/badimportissue3320/source/other/SomeObjectDto.java", "diffHunk": "@@ -0,0 +1,9 @@\n+package spoon.test.imports.testclasses.badimportissue3320.source.other;\n+\n+/**\n+ * @author Gibah Joseph\n+ * Email: gibahjoe@gmail.com\n+ * Apr, 2020\n+ **/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbb03134d4f2c770426526abac6e7df50d2e6855"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDAzMDgxOnYy", "diffSide": "RIGHT", "path": "src/test/java/spoon/test/imports/testclasses/badimportissue3320/source/other/TestAnnotation.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMToxMzoyNlrOGK8YAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMToxMzoyNlrOGK8YAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDEyODEzMA==", "bodyText": "see other comment", "url": "https://github.com/INRIA/spoon/pull/3341#discussion_r414128130", "createdAt": "2020-04-23T21:13:26Z", "author": {"login": "MartinWitt"}, "path": "src/test/java/spoon/test/imports/testclasses/badimportissue3320/source/other/TestAnnotation.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package spoon.test.imports.testclasses.badimportissue3320.source.other;\n+\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.Target;\n+\n+import static java.lang.annotation.ElementType.*;\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n+/**\n+ * @author Gibah Joseph\n+ * email: gibahjoe@gmail.com\n+ * Apr, 2020\n+ **/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbb03134d4f2c770426526abac6e7df50d2e6855"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDAzODQ4OnYy", "diffSide": "RIGHT", "path": "src/test/java/spoon/test/imports/ImportTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMToxNToxOFrOGK8cag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMToxNToxOFrOGK8cag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDEyOTI1OA==", "bodyText": "maybe a pit \"picky\", but short names like e and l makes reading hard.", "url": "https://github.com/INRIA/spoon/pull/3341#discussion_r414129258", "createdAt": "2020-04-23T21:15:18Z", "author": {"login": "MartinWitt"}, "path": "src/test/java/spoon/test/imports/ImportTest.java", "diffHunk": "@@ -1777,4 +1778,20 @@ public void testImportByJavaDoc() throws Exception {\n \t\t}\n \t}\n \n+\t@Test\n+\tpublic void testImportsForElementsAnnotatedWithTypeUseAnnotations() {\n+\t\t// contract: correct import generated for method parameters annotated with TYPE_USE annotations\n+\t\tfinal Launcher l = new Launcher();\n+\t\tEnvironment e = l.getEnvironment();\n+\n+\t\te.setNoClasspath(true);\n+\t\te.setAutoImports(true);\n+\t\tl.addInputResource(\"src/test/java/spoon/test/imports/testclasses/badimportissue3320/source/TestSource.java\");\n+\t\tl.run();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbb03134d4f2c770426526abac6e7df50d2e6855"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDA0OTU1OnYy", "diffSide": "RIGHT", "path": "src/test/java/spoon/test/imports/ImportTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMToxNzo1MlrOGK8ibw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMToxNzo1MlrOGK8ibw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDEzMDc5OQ==", "bodyText": "maybe a linebreak, but not mandatory", "url": "https://github.com/INRIA/spoon/pull/3341#discussion_r414130799", "createdAt": "2020-04-23T21:17:52Z", "author": {"login": "MartinWitt"}, "path": "src/test/java/spoon/test/imports/ImportTest.java", "diffHunk": "@@ -1777,4 +1778,20 @@ public void testImportByJavaDoc() throws Exception {\n \t\t}\n \t}\n \n+\t@Test\n+\tpublic void testImportsForElementsAnnotatedWithTypeUseAnnotations() {\n+\t\t// contract: correct import generated for method parameters annotated with TYPE_USE annotations\n+\t\tfinal Launcher l = new Launcher();\n+\t\tEnvironment e = l.getEnvironment();\n+\n+\t\te.setNoClasspath(true);\n+\t\te.setAutoImports(true);\n+\t\tl.addInputResource(\"src/test/java/spoon/test/imports/testclasses/badimportissue3320/source/TestSource.java\");\n+\t\tl.run();\n+\n+\t\tCtType<TestSource> objectCtType = l.getFactory().Type().get(TestSource.class);\n+\t\tCompilationUnit compilationUnit = l.getFactory().CompilationUnit().getOrCreate(objectCtType);\n+\n+\t\tassertEquals(1, compilationUnit.getImports().stream().filter(ctImport -> ctImport.prettyprint().equals(\"import spoon.test.imports.testclasses.badimportissue3320.source.other.SomeObjectDto;\")).count());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbb03134d4f2c770426526abac6e7df50d2e6855"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3663, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}