{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2NzcyOTc0", "number": 3258, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjoyNToyNFrODhIO_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjozMDoxMVrODhIXPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MDY0NTA4OnYy", "diffSide": "RIGHT", "path": "src/main/java/spoon/FluentLauncher.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjoyNToyNFrOFruB6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjo1OTo0N1rOFrveeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4NzI0Mw==", "bodyText": "Can this be private?", "url": "https://github.com/INRIA/spoon/pull/3258#discussion_r381387243", "createdAt": "2020-02-19T16:25:24Z", "author": {"login": "DaveJarvis"}, "path": "src/main/java/spoon/FluentLauncher.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package spoon;\n+\n+import java.io.File;\n+import java.util.List;\n+\n+import spoon.compiler.Environment;\n+import spoon.compiler.SpoonResource;\n+import spoon.processing.Processor;\n+import spoon.reflect.CtModel;\n+import spoon.reflect.declaration.CtElement;\n+import spoon.reflect.declaration.CtType;\n+import spoon.reflect.factory.Factory;\n+import spoon.reflect.visitor.Filter;\n+import spoon.reflect.visitor.PrettyPrinter;\n+import spoon.support.JavaOutputProcessor;\n+\n+/**\n+ * TODO: doc\n+ */\n+public class FluentLauncher {\n+\n+\tLauncher launcher;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "507ed589a081093895e03a4ade6a25fc126f2e7a"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQxMDkzNg==", "bodyText": "yes 100%.", "url": "https://github.com/INRIA/spoon/pull/3258#discussion_r381410936", "createdAt": "2020-02-19T16:59:47Z", "author": {"login": "MartinWitt"}, "path": "src/main/java/spoon/FluentLauncher.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package spoon;\n+\n+import java.io.File;\n+import java.util.List;\n+\n+import spoon.compiler.Environment;\n+import spoon.compiler.SpoonResource;\n+import spoon.processing.Processor;\n+import spoon.reflect.CtModel;\n+import spoon.reflect.declaration.CtElement;\n+import spoon.reflect.declaration.CtType;\n+import spoon.reflect.factory.Factory;\n+import spoon.reflect.visitor.Filter;\n+import spoon.reflect.visitor.PrettyPrinter;\n+import spoon.support.JavaOutputProcessor;\n+\n+/**\n+ * TODO: doc\n+ */\n+public class FluentLauncher {\n+\n+\tLauncher launcher;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4NzI0Mw=="}, "originalCommit": {"oid": "507ed589a081093895e03a4ade6a25fc126f2e7a"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MDY1MDY1OnYy", "diffSide": "RIGHT", "path": "src/main/java/spoon/FluentLauncher.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjoyNjozOVrOFruFVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNjoyODoxNVrOFs83Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4ODExNg==", "bodyText": "Is there a need for buildModel and buildCtModel?", "url": "https://github.com/INRIA/spoon/pull/3258#discussion_r381388116", "createdAt": "2020-02-19T16:26:39Z", "author": {"login": "DaveJarvis"}, "path": "src/main/java/spoon/FluentLauncher.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package spoon;\n+\n+import java.io.File;\n+import java.util.List;\n+\n+import spoon.compiler.Environment;\n+import spoon.compiler.SpoonResource;\n+import spoon.processing.Processor;\n+import spoon.reflect.CtModel;\n+import spoon.reflect.declaration.CtElement;\n+import spoon.reflect.declaration.CtType;\n+import spoon.reflect.factory.Factory;\n+import spoon.reflect.visitor.Filter;\n+import spoon.reflect.visitor.PrettyPrinter;\n+import spoon.support.JavaOutputProcessor;\n+\n+/**\n+ * TODO: doc\n+ */\n+public class FluentLauncher {\n+\n+\tLauncher launcher;\n+\n+\tpublic FluentLauncher() {\n+\t\tthis.launcher = new Launcher();\n+\t}\n+\n+\t/**\n+\t * @param args\n+\t * @see spoon.Launcher#run(java.lang.String[])\n+\t */\n+\n+\tpublic void run(String[] args) {\n+\t\tlauncher.run(args);\n+\t}\n+\n+\tpublic void printUsage() {\n+\t\tlauncher.printUsage();\n+\t}\n+\n+\tpublic FluentLauncher inputResource(String path) {\n+\t\tlauncher.addInputResource(path);\n+\t\treturn this;\n+\t}\n+\n+\tpublic FluentLauncher inputResource(SpoonResource resource) {\n+\t\tlauncher.addInputResource(resource);\n+\t\treturn this;\n+\t}\n+\n+\tpublic FluentLauncher processor(String name) {\n+\t\tlauncher.addProcessor(name);\n+\t\treturn this;\n+\t}\n+\n+\tpublic <T extends CtElement> FluentLauncher processor(Processor<T> processor) {\n+\t\tlauncher.addProcessor(processor);\n+\t\treturn this;\n+\t}\n+\n+\tpublic FluentLauncher templateResource(SpoonResource resource) {\n+\t\tlauncher.addTemplateResource(resource);\n+\t\treturn this;\n+\t}\n+\n+\t// TODO: das sollte in Methoden zum setzen umgewandelt werden\n+\tpublic Environment getEnvironment() {\n+\t\treturn launcher.getEnvironment();\n+\t}\n+\n+\tpublic String toString() {\n+\t\treturn launcher.toString();\n+\t}\n+\n+\t// needed???\n+\tpublic SpoonModelBuilder compiler(Factory factory) {\n+\t\treturn launcher.createCompiler(factory);\n+\t}\n+\n+\t// needed???\n+\tpublic SpoonModelBuilder compiler(Factory factory, List<SpoonResource> inputSources) {\n+\t\treturn launcher.createCompiler(factory, inputSources);\n+\t}\n+\n+\t// needed???\n+\tpublic SpoonModelBuilder createCompiler(Factory factory, List<SpoonResource> inputSources,\n+\t\t\tList<SpoonResource> templateSources) {\n+\t\treturn launcher.createCompiler(factory, inputSources, templateSources);\n+\t}\n+\n+\t// needed?\n+\tpublic SpoonModelBuilder createCompiler() {\n+\t\treturn launcher.createCompiler();\n+\t}\n+\n+\t// needed?\n+\tpublic SpoonModelBuilder createCompiler(List<SpoonResource> inputSources) {\n+\t\treturn launcher.createCompiler(inputSources);\n+\t}\n+\n+\t// needed?\n+\tpublic Factory createFactory() {\n+\t\treturn launcher.createFactory();\n+\t}\n+\n+\t// needed???\n+\tpublic Factory getFactory() {\n+\t\treturn launcher.getFactory();\n+\t}\n+\n+\t// needed?\n+\tpublic Environment createEnvironment() {\n+\t\treturn launcher.createEnvironment();\n+\t}\n+\n+\tpublic CtModel buildModel() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "507ed589a081093895e03a4ade6a25fc126f2e7a"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjIxOTEzNw==", "bodyText": "i can't find buildCtModel anywhere. SpoonAPI has the method buildModel in the interface.\nCould you show where the term buildCtModel is used?", "url": "https://github.com/INRIA/spoon/pull/3258#discussion_r382219137", "createdAt": "2020-02-20T19:44:50Z", "author": {"login": "MartinWitt"}, "path": "src/main/java/spoon/FluentLauncher.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package spoon;\n+\n+import java.io.File;\n+import java.util.List;\n+\n+import spoon.compiler.Environment;\n+import spoon.compiler.SpoonResource;\n+import spoon.processing.Processor;\n+import spoon.reflect.CtModel;\n+import spoon.reflect.declaration.CtElement;\n+import spoon.reflect.declaration.CtType;\n+import spoon.reflect.factory.Factory;\n+import spoon.reflect.visitor.Filter;\n+import spoon.reflect.visitor.PrettyPrinter;\n+import spoon.support.JavaOutputProcessor;\n+\n+/**\n+ * TODO: doc\n+ */\n+public class FluentLauncher {\n+\n+\tLauncher launcher;\n+\n+\tpublic FluentLauncher() {\n+\t\tthis.launcher = new Launcher();\n+\t}\n+\n+\t/**\n+\t * @param args\n+\t * @see spoon.Launcher#run(java.lang.String[])\n+\t */\n+\n+\tpublic void run(String[] args) {\n+\t\tlauncher.run(args);\n+\t}\n+\n+\tpublic void printUsage() {\n+\t\tlauncher.printUsage();\n+\t}\n+\n+\tpublic FluentLauncher inputResource(String path) {\n+\t\tlauncher.addInputResource(path);\n+\t\treturn this;\n+\t}\n+\n+\tpublic FluentLauncher inputResource(SpoonResource resource) {\n+\t\tlauncher.addInputResource(resource);\n+\t\treturn this;\n+\t}\n+\n+\tpublic FluentLauncher processor(String name) {\n+\t\tlauncher.addProcessor(name);\n+\t\treturn this;\n+\t}\n+\n+\tpublic <T extends CtElement> FluentLauncher processor(Processor<T> processor) {\n+\t\tlauncher.addProcessor(processor);\n+\t\treturn this;\n+\t}\n+\n+\tpublic FluentLauncher templateResource(SpoonResource resource) {\n+\t\tlauncher.addTemplateResource(resource);\n+\t\treturn this;\n+\t}\n+\n+\t// TODO: das sollte in Methoden zum setzen umgewandelt werden\n+\tpublic Environment getEnvironment() {\n+\t\treturn launcher.getEnvironment();\n+\t}\n+\n+\tpublic String toString() {\n+\t\treturn launcher.toString();\n+\t}\n+\n+\t// needed???\n+\tpublic SpoonModelBuilder compiler(Factory factory) {\n+\t\treturn launcher.createCompiler(factory);\n+\t}\n+\n+\t// needed???\n+\tpublic SpoonModelBuilder compiler(Factory factory, List<SpoonResource> inputSources) {\n+\t\treturn launcher.createCompiler(factory, inputSources);\n+\t}\n+\n+\t// needed???\n+\tpublic SpoonModelBuilder createCompiler(Factory factory, List<SpoonResource> inputSources,\n+\t\t\tList<SpoonResource> templateSources) {\n+\t\treturn launcher.createCompiler(factory, inputSources, templateSources);\n+\t}\n+\n+\t// needed?\n+\tpublic SpoonModelBuilder createCompiler() {\n+\t\treturn launcher.createCompiler();\n+\t}\n+\n+\t// needed?\n+\tpublic SpoonModelBuilder createCompiler(List<SpoonResource> inputSources) {\n+\t\treturn launcher.createCompiler(inputSources);\n+\t}\n+\n+\t// needed?\n+\tpublic Factory createFactory() {\n+\t\treturn launcher.createFactory();\n+\t}\n+\n+\t// needed???\n+\tpublic Factory getFactory() {\n+\t\treturn launcher.getFactory();\n+\t}\n+\n+\t// needed?\n+\tpublic Environment createEnvironment() {\n+\t\treturn launcher.createEnvironment();\n+\t}\n+\n+\tpublic CtModel buildModel() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4ODExNg=="}, "originalCommit": {"oid": "507ed589a081093895e03a4ade6a25fc126f2e7a"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY3ODgxNA==", "bodyText": "I was wondering if there's a Model and a CtModel that can be built. If there's no Model class to build, then the question is moot.", "url": "https://github.com/INRIA/spoon/pull/3258#discussion_r382678814", "createdAt": "2020-02-21T16:28:15Z", "author": {"login": "DaveJarvis"}, "path": "src/main/java/spoon/FluentLauncher.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package spoon;\n+\n+import java.io.File;\n+import java.util.List;\n+\n+import spoon.compiler.Environment;\n+import spoon.compiler.SpoonResource;\n+import spoon.processing.Processor;\n+import spoon.reflect.CtModel;\n+import spoon.reflect.declaration.CtElement;\n+import spoon.reflect.declaration.CtType;\n+import spoon.reflect.factory.Factory;\n+import spoon.reflect.visitor.Filter;\n+import spoon.reflect.visitor.PrettyPrinter;\n+import spoon.support.JavaOutputProcessor;\n+\n+/**\n+ * TODO: doc\n+ */\n+public class FluentLauncher {\n+\n+\tLauncher launcher;\n+\n+\tpublic FluentLauncher() {\n+\t\tthis.launcher = new Launcher();\n+\t}\n+\n+\t/**\n+\t * @param args\n+\t * @see spoon.Launcher#run(java.lang.String[])\n+\t */\n+\n+\tpublic void run(String[] args) {\n+\t\tlauncher.run(args);\n+\t}\n+\n+\tpublic void printUsage() {\n+\t\tlauncher.printUsage();\n+\t}\n+\n+\tpublic FluentLauncher inputResource(String path) {\n+\t\tlauncher.addInputResource(path);\n+\t\treturn this;\n+\t}\n+\n+\tpublic FluentLauncher inputResource(SpoonResource resource) {\n+\t\tlauncher.addInputResource(resource);\n+\t\treturn this;\n+\t}\n+\n+\tpublic FluentLauncher processor(String name) {\n+\t\tlauncher.addProcessor(name);\n+\t\treturn this;\n+\t}\n+\n+\tpublic <T extends CtElement> FluentLauncher processor(Processor<T> processor) {\n+\t\tlauncher.addProcessor(processor);\n+\t\treturn this;\n+\t}\n+\n+\tpublic FluentLauncher templateResource(SpoonResource resource) {\n+\t\tlauncher.addTemplateResource(resource);\n+\t\treturn this;\n+\t}\n+\n+\t// TODO: das sollte in Methoden zum setzen umgewandelt werden\n+\tpublic Environment getEnvironment() {\n+\t\treturn launcher.getEnvironment();\n+\t}\n+\n+\tpublic String toString() {\n+\t\treturn launcher.toString();\n+\t}\n+\n+\t// needed???\n+\tpublic SpoonModelBuilder compiler(Factory factory) {\n+\t\treturn launcher.createCompiler(factory);\n+\t}\n+\n+\t// needed???\n+\tpublic SpoonModelBuilder compiler(Factory factory, List<SpoonResource> inputSources) {\n+\t\treturn launcher.createCompiler(factory, inputSources);\n+\t}\n+\n+\t// needed???\n+\tpublic SpoonModelBuilder createCompiler(Factory factory, List<SpoonResource> inputSources,\n+\t\t\tList<SpoonResource> templateSources) {\n+\t\treturn launcher.createCompiler(factory, inputSources, templateSources);\n+\t}\n+\n+\t// needed?\n+\tpublic SpoonModelBuilder createCompiler() {\n+\t\treturn launcher.createCompiler();\n+\t}\n+\n+\t// needed?\n+\tpublic SpoonModelBuilder createCompiler(List<SpoonResource> inputSources) {\n+\t\treturn launcher.createCompiler(inputSources);\n+\t}\n+\n+\t// needed?\n+\tpublic Factory createFactory() {\n+\t\treturn launcher.createFactory();\n+\t}\n+\n+\t// needed???\n+\tpublic Factory getFactory() {\n+\t\treturn launcher.getFactory();\n+\t}\n+\n+\t// needed?\n+\tpublic Environment createEnvironment() {\n+\t\treturn launcher.createEnvironment();\n+\t}\n+\n+\tpublic CtModel buildModel() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4ODExNg=="}, "originalCommit": {"oid": "507ed589a081093895e03a4ade6a25fc126f2e7a"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MDY1NDc1OnYy", "diffSide": "RIGHT", "path": "src/main/java/spoon/FluentLauncher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjoyNzozMlrOFruHuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjoyNzozMlrOFruHuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4ODczMQ==", "bodyText": "Not part of the fluent interface? This could be confusing for some as it doesn't follow the fluent interface idiom.", "url": "https://github.com/INRIA/spoon/pull/3258#discussion_r381388731", "createdAt": "2020-02-19T16:27:32Z", "author": {"login": "DaveJarvis"}, "path": "src/main/java/spoon/FluentLauncher.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package spoon;\n+\n+import java.io.File;\n+import java.util.List;\n+\n+import spoon.compiler.Environment;\n+import spoon.compiler.SpoonResource;\n+import spoon.processing.Processor;\n+import spoon.reflect.CtModel;\n+import spoon.reflect.declaration.CtElement;\n+import spoon.reflect.declaration.CtType;\n+import spoon.reflect.factory.Factory;\n+import spoon.reflect.visitor.Filter;\n+import spoon.reflect.visitor.PrettyPrinter;\n+import spoon.support.JavaOutputProcessor;\n+\n+/**\n+ * TODO: doc\n+ */\n+public class FluentLauncher {\n+\n+\tLauncher launcher;\n+\n+\tpublic FluentLauncher() {\n+\t\tthis.launcher = new Launcher();\n+\t}\n+\n+\t/**\n+\t * @param args\n+\t * @see spoon.Launcher#run(java.lang.String[])\n+\t */\n+\n+\tpublic void run(String[] args) {\n+\t\tlauncher.run(args);\n+\t}\n+\n+\tpublic void printUsage() {\n+\t\tlauncher.printUsage();\n+\t}\n+\n+\tpublic FluentLauncher inputResource(String path) {\n+\t\tlauncher.addInputResource(path);\n+\t\treturn this;\n+\t}\n+\n+\tpublic FluentLauncher inputResource(SpoonResource resource) {\n+\t\tlauncher.addInputResource(resource);\n+\t\treturn this;\n+\t}\n+\n+\tpublic FluentLauncher processor(String name) {\n+\t\tlauncher.addProcessor(name);\n+\t\treturn this;\n+\t}\n+\n+\tpublic <T extends CtElement> FluentLauncher processor(Processor<T> processor) {\n+\t\tlauncher.addProcessor(processor);\n+\t\treturn this;\n+\t}\n+\n+\tpublic FluentLauncher templateResource(SpoonResource resource) {\n+\t\tlauncher.addTemplateResource(resource);\n+\t\treturn this;\n+\t}\n+\n+\t// TODO: das sollte in Methoden zum setzen umgewandelt werden\n+\tpublic Environment getEnvironment() {\n+\t\treturn launcher.getEnvironment();\n+\t}\n+\n+\tpublic String toString() {\n+\t\treturn launcher.toString();\n+\t}\n+\n+\t// needed???\n+\tpublic SpoonModelBuilder compiler(Factory factory) {\n+\t\treturn launcher.createCompiler(factory);\n+\t}\n+\n+\t// needed???\n+\tpublic SpoonModelBuilder compiler(Factory factory, List<SpoonResource> inputSources) {\n+\t\treturn launcher.createCompiler(factory, inputSources);\n+\t}\n+\n+\t// needed???\n+\tpublic SpoonModelBuilder createCompiler(Factory factory, List<SpoonResource> inputSources,\n+\t\t\tList<SpoonResource> templateSources) {\n+\t\treturn launcher.createCompiler(factory, inputSources, templateSources);\n+\t}\n+\n+\t// needed?\n+\tpublic SpoonModelBuilder createCompiler() {\n+\t\treturn launcher.createCompiler();\n+\t}\n+\n+\t// needed?\n+\tpublic SpoonModelBuilder createCompiler(List<SpoonResource> inputSources) {\n+\t\treturn launcher.createCompiler(inputSources);\n+\t}\n+\n+\t// needed?\n+\tpublic Factory createFactory() {\n+\t\treturn launcher.createFactory();\n+\t}\n+\n+\t// needed???\n+\tpublic Factory getFactory() {\n+\t\treturn launcher.getFactory();\n+\t}\n+\n+\t// needed?\n+\tpublic Environment createEnvironment() {\n+\t\treturn launcher.createEnvironment();\n+\t}\n+\n+\tpublic CtModel buildModel() {\n+\t\tlauncher.run();\n+\t\treturn launcher.getModel();\n+\t}\n+\n+\tpublic FluentLauncher outputDirectory(String path) {\n+\t\tlauncher.setSourceOutputDirectory(path);\n+\t\treturn this;\n+\t}\n+\n+\tpublic void setSourceOutputDirectory(File outputDirectory) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "507ed589a081093895e03a4ade6a25fc126f2e7a"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MDY1NjgzOnYy", "diffSide": "RIGHT", "path": "src/main/java/spoon/FluentLauncher.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjoyNzo1OVrOFruJCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjo1NDo0N1rOFrvRXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4OTA2Ng==", "bodyText": "Does this need to follow the fluent interface idiom?", "url": "https://github.com/INRIA/spoon/pull/3258#discussion_r381389066", "createdAt": "2020-02-19T16:27:59Z", "author": {"login": "DaveJarvis"}, "path": "src/main/java/spoon/FluentLauncher.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package spoon;\n+\n+import java.io.File;\n+import java.util.List;\n+\n+import spoon.compiler.Environment;\n+import spoon.compiler.SpoonResource;\n+import spoon.processing.Processor;\n+import spoon.reflect.CtModel;\n+import spoon.reflect.declaration.CtElement;\n+import spoon.reflect.declaration.CtType;\n+import spoon.reflect.factory.Factory;\n+import spoon.reflect.visitor.Filter;\n+import spoon.reflect.visitor.PrettyPrinter;\n+import spoon.support.JavaOutputProcessor;\n+\n+/**\n+ * TODO: doc\n+ */\n+public class FluentLauncher {\n+\n+\tLauncher launcher;\n+\n+\tpublic FluentLauncher() {\n+\t\tthis.launcher = new Launcher();\n+\t}\n+\n+\t/**\n+\t * @param args\n+\t * @see spoon.Launcher#run(java.lang.String[])\n+\t */\n+\n+\tpublic void run(String[] args) {\n+\t\tlauncher.run(args);\n+\t}\n+\n+\tpublic void printUsage() {\n+\t\tlauncher.printUsage();\n+\t}\n+\n+\tpublic FluentLauncher inputResource(String path) {\n+\t\tlauncher.addInputResource(path);\n+\t\treturn this;\n+\t}\n+\n+\tpublic FluentLauncher inputResource(SpoonResource resource) {\n+\t\tlauncher.addInputResource(resource);\n+\t\treturn this;\n+\t}\n+\n+\tpublic FluentLauncher processor(String name) {\n+\t\tlauncher.addProcessor(name);\n+\t\treturn this;\n+\t}\n+\n+\tpublic <T extends CtElement> FluentLauncher processor(Processor<T> processor) {\n+\t\tlauncher.addProcessor(processor);\n+\t\treturn this;\n+\t}\n+\n+\tpublic FluentLauncher templateResource(SpoonResource resource) {\n+\t\tlauncher.addTemplateResource(resource);\n+\t\treturn this;\n+\t}\n+\n+\t// TODO: das sollte in Methoden zum setzen umgewandelt werden\n+\tpublic Environment getEnvironment() {\n+\t\treturn launcher.getEnvironment();\n+\t}\n+\n+\tpublic String toString() {\n+\t\treturn launcher.toString();\n+\t}\n+\n+\t// needed???\n+\tpublic SpoonModelBuilder compiler(Factory factory) {\n+\t\treturn launcher.createCompiler(factory);\n+\t}\n+\n+\t// needed???\n+\tpublic SpoonModelBuilder compiler(Factory factory, List<SpoonResource> inputSources) {\n+\t\treturn launcher.createCompiler(factory, inputSources);\n+\t}\n+\n+\t// needed???\n+\tpublic SpoonModelBuilder createCompiler(Factory factory, List<SpoonResource> inputSources,\n+\t\t\tList<SpoonResource> templateSources) {\n+\t\treturn launcher.createCompiler(factory, inputSources, templateSources);\n+\t}\n+\n+\t// needed?\n+\tpublic SpoonModelBuilder createCompiler() {\n+\t\treturn launcher.createCompiler();\n+\t}\n+\n+\t// needed?\n+\tpublic SpoonModelBuilder createCompiler(List<SpoonResource> inputSources) {\n+\t\treturn launcher.createCompiler(inputSources);\n+\t}\n+\n+\t// needed?\n+\tpublic Factory createFactory() {\n+\t\treturn launcher.createFactory();\n+\t}\n+\n+\t// needed???\n+\tpublic Factory getFactory() {\n+\t\treturn launcher.getFactory();\n+\t}\n+\n+\t// needed?\n+\tpublic Environment createEnvironment() {\n+\t\treturn launcher.createEnvironment();\n+\t}\n+\n+\tpublic CtModel buildModel() {\n+\t\tlauncher.run();\n+\t\treturn launcher.getModel();\n+\t}\n+\n+\tpublic FluentLauncher outputDirectory(String path) {\n+\t\tlauncher.setSourceOutputDirectory(path);\n+\t\treturn this;\n+\t}\n+\n+\tpublic void setSourceOutputDirectory(File outputDirectory) {\n+\t\tlauncher.setSourceOutputDirectory(outputDirectory);\n+\t}\n+\n+\tpublic FluentLauncher outputFilter(Filter<CtType<?>> typeFilter) {\n+\t\tlauncher.setOutputFilter(typeFilter);\n+\t\treturn this;\n+\t}\n+\n+\tpublic FluentLauncher outputFilter(String... qualifedNames) {\n+\t\tlauncher.setOutputFilter(qualifedNames);\n+\t\treturn this;\n+\t}\n+\n+\tpublic FluentLauncher binaryOutputDirectory(String path) {\n+\t\tlauncher.setBinaryOutputDirectory(path);\n+\t\treturn this;\n+\t}\n+\n+\tpublic void binaryOutputDirectory(File outputDirectory) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "507ed589a081093895e03a4ade6a25fc126f2e7a"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQwNzU4Mw==", "bodyText": "yes needs to be changed.", "url": "https://github.com/INRIA/spoon/pull/3258#discussion_r381407583", "createdAt": "2020-02-19T16:54:47Z", "author": {"login": "MartinWitt"}, "path": "src/main/java/spoon/FluentLauncher.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package spoon;\n+\n+import java.io.File;\n+import java.util.List;\n+\n+import spoon.compiler.Environment;\n+import spoon.compiler.SpoonResource;\n+import spoon.processing.Processor;\n+import spoon.reflect.CtModel;\n+import spoon.reflect.declaration.CtElement;\n+import spoon.reflect.declaration.CtType;\n+import spoon.reflect.factory.Factory;\n+import spoon.reflect.visitor.Filter;\n+import spoon.reflect.visitor.PrettyPrinter;\n+import spoon.support.JavaOutputProcessor;\n+\n+/**\n+ * TODO: doc\n+ */\n+public class FluentLauncher {\n+\n+\tLauncher launcher;\n+\n+\tpublic FluentLauncher() {\n+\t\tthis.launcher = new Launcher();\n+\t}\n+\n+\t/**\n+\t * @param args\n+\t * @see spoon.Launcher#run(java.lang.String[])\n+\t */\n+\n+\tpublic void run(String[] args) {\n+\t\tlauncher.run(args);\n+\t}\n+\n+\tpublic void printUsage() {\n+\t\tlauncher.printUsage();\n+\t}\n+\n+\tpublic FluentLauncher inputResource(String path) {\n+\t\tlauncher.addInputResource(path);\n+\t\treturn this;\n+\t}\n+\n+\tpublic FluentLauncher inputResource(SpoonResource resource) {\n+\t\tlauncher.addInputResource(resource);\n+\t\treturn this;\n+\t}\n+\n+\tpublic FluentLauncher processor(String name) {\n+\t\tlauncher.addProcessor(name);\n+\t\treturn this;\n+\t}\n+\n+\tpublic <T extends CtElement> FluentLauncher processor(Processor<T> processor) {\n+\t\tlauncher.addProcessor(processor);\n+\t\treturn this;\n+\t}\n+\n+\tpublic FluentLauncher templateResource(SpoonResource resource) {\n+\t\tlauncher.addTemplateResource(resource);\n+\t\treturn this;\n+\t}\n+\n+\t// TODO: das sollte in Methoden zum setzen umgewandelt werden\n+\tpublic Environment getEnvironment() {\n+\t\treturn launcher.getEnvironment();\n+\t}\n+\n+\tpublic String toString() {\n+\t\treturn launcher.toString();\n+\t}\n+\n+\t// needed???\n+\tpublic SpoonModelBuilder compiler(Factory factory) {\n+\t\treturn launcher.createCompiler(factory);\n+\t}\n+\n+\t// needed???\n+\tpublic SpoonModelBuilder compiler(Factory factory, List<SpoonResource> inputSources) {\n+\t\treturn launcher.createCompiler(factory, inputSources);\n+\t}\n+\n+\t// needed???\n+\tpublic SpoonModelBuilder createCompiler(Factory factory, List<SpoonResource> inputSources,\n+\t\t\tList<SpoonResource> templateSources) {\n+\t\treturn launcher.createCompiler(factory, inputSources, templateSources);\n+\t}\n+\n+\t// needed?\n+\tpublic SpoonModelBuilder createCompiler() {\n+\t\treturn launcher.createCompiler();\n+\t}\n+\n+\t// needed?\n+\tpublic SpoonModelBuilder createCompiler(List<SpoonResource> inputSources) {\n+\t\treturn launcher.createCompiler(inputSources);\n+\t}\n+\n+\t// needed?\n+\tpublic Factory createFactory() {\n+\t\treturn launcher.createFactory();\n+\t}\n+\n+\t// needed???\n+\tpublic Factory getFactory() {\n+\t\treturn launcher.getFactory();\n+\t}\n+\n+\t// needed?\n+\tpublic Environment createEnvironment() {\n+\t\treturn launcher.createEnvironment();\n+\t}\n+\n+\tpublic CtModel buildModel() {\n+\t\tlauncher.run();\n+\t\treturn launcher.getModel();\n+\t}\n+\n+\tpublic FluentLauncher outputDirectory(String path) {\n+\t\tlauncher.setSourceOutputDirectory(path);\n+\t\treturn this;\n+\t}\n+\n+\tpublic void setSourceOutputDirectory(File outputDirectory) {\n+\t\tlauncher.setSourceOutputDirectory(outputDirectory);\n+\t}\n+\n+\tpublic FluentLauncher outputFilter(Filter<CtType<?>> typeFilter) {\n+\t\tlauncher.setOutputFilter(typeFilter);\n+\t\treturn this;\n+\t}\n+\n+\tpublic FluentLauncher outputFilter(String... qualifedNames) {\n+\t\tlauncher.setOutputFilter(qualifedNames);\n+\t\treturn this;\n+\t}\n+\n+\tpublic FluentLauncher binaryOutputDirectory(String path) {\n+\t\tlauncher.setBinaryOutputDirectory(path);\n+\t\treturn this;\n+\t}\n+\n+\tpublic void binaryOutputDirectory(File outputDirectory) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4OTA2Ng=="}, "originalCommit": {"oid": "507ed589a081093895e03a4ade6a25fc126f2e7a"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MDY2MDgwOnYy", "diffSide": "RIGHT", "path": "src/main/java/spoon/FluentLauncher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjoyODo0OVrOFruLZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjo1NzozOVrOFrvY4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4OTY2OA==", "bodyText": "How does a Factory differ from the fluent interface? Could mixing metaphors be confusing?", "url": "https://github.com/INRIA/spoon/pull/3258#discussion_r381389668", "createdAt": "2020-02-19T16:28:49Z", "author": {"login": "DaveJarvis"}, "path": "src/main/java/spoon/FluentLauncher.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package spoon;\n+\n+import java.io.File;\n+import java.util.List;\n+\n+import spoon.compiler.Environment;\n+import spoon.compiler.SpoonResource;\n+import spoon.processing.Processor;\n+import spoon.reflect.CtModel;\n+import spoon.reflect.declaration.CtElement;\n+import spoon.reflect.declaration.CtType;\n+import spoon.reflect.factory.Factory;\n+import spoon.reflect.visitor.Filter;\n+import spoon.reflect.visitor.PrettyPrinter;\n+import spoon.support.JavaOutputProcessor;\n+\n+/**\n+ * TODO: doc\n+ */\n+public class FluentLauncher {\n+\n+\tLauncher launcher;\n+\n+\tpublic FluentLauncher() {\n+\t\tthis.launcher = new Launcher();\n+\t}\n+\n+\t/**\n+\t * @param args\n+\t * @see spoon.Launcher#run(java.lang.String[])\n+\t */\n+\n+\tpublic void run(String[] args) {\n+\t\tlauncher.run(args);\n+\t}\n+\n+\tpublic void printUsage() {\n+\t\tlauncher.printUsage();\n+\t}\n+\n+\tpublic FluentLauncher inputResource(String path) {\n+\t\tlauncher.addInputResource(path);\n+\t\treturn this;\n+\t}\n+\n+\tpublic FluentLauncher inputResource(SpoonResource resource) {\n+\t\tlauncher.addInputResource(resource);\n+\t\treturn this;\n+\t}\n+\n+\tpublic FluentLauncher processor(String name) {\n+\t\tlauncher.addProcessor(name);\n+\t\treturn this;\n+\t}\n+\n+\tpublic <T extends CtElement> FluentLauncher processor(Processor<T> processor) {\n+\t\tlauncher.addProcessor(processor);\n+\t\treturn this;\n+\t}\n+\n+\tpublic FluentLauncher templateResource(SpoonResource resource) {\n+\t\tlauncher.addTemplateResource(resource);\n+\t\treturn this;\n+\t}\n+\n+\t// TODO: das sollte in Methoden zum setzen umgewandelt werden\n+\tpublic Environment getEnvironment() {\n+\t\treturn launcher.getEnvironment();\n+\t}\n+\n+\tpublic String toString() {\n+\t\treturn launcher.toString();\n+\t}\n+\n+\t// needed???\n+\tpublic SpoonModelBuilder compiler(Factory factory) {\n+\t\treturn launcher.createCompiler(factory);\n+\t}\n+\n+\t// needed???\n+\tpublic SpoonModelBuilder compiler(Factory factory, List<SpoonResource> inputSources) {\n+\t\treturn launcher.createCompiler(factory, inputSources);\n+\t}\n+\n+\t// needed???\n+\tpublic SpoonModelBuilder createCompiler(Factory factory, List<SpoonResource> inputSources,\n+\t\t\tList<SpoonResource> templateSources) {\n+\t\treturn launcher.createCompiler(factory, inputSources, templateSources);\n+\t}\n+\n+\t// needed?\n+\tpublic SpoonModelBuilder createCompiler() {\n+\t\treturn launcher.createCompiler();\n+\t}\n+\n+\t// needed?\n+\tpublic SpoonModelBuilder createCompiler(List<SpoonResource> inputSources) {\n+\t\treturn launcher.createCompiler(inputSources);\n+\t}\n+\n+\t// needed?\n+\tpublic Factory createFactory() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "507ed589a081093895e03a4ade6a25fc126f2e7a"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQwOTUwNg==", "bodyText": "the createFactory method was part of the spoonAPI interface, which i tried to implement first. But the interface has setter and getter, which are not good for the fluent idom", "url": "https://github.com/INRIA/spoon/pull/3258#discussion_r381409506", "createdAt": "2020-02-19T16:57:39Z", "author": {"login": "MartinWitt"}, "path": "src/main/java/spoon/FluentLauncher.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package spoon;\n+\n+import java.io.File;\n+import java.util.List;\n+\n+import spoon.compiler.Environment;\n+import spoon.compiler.SpoonResource;\n+import spoon.processing.Processor;\n+import spoon.reflect.CtModel;\n+import spoon.reflect.declaration.CtElement;\n+import spoon.reflect.declaration.CtType;\n+import spoon.reflect.factory.Factory;\n+import spoon.reflect.visitor.Filter;\n+import spoon.reflect.visitor.PrettyPrinter;\n+import spoon.support.JavaOutputProcessor;\n+\n+/**\n+ * TODO: doc\n+ */\n+public class FluentLauncher {\n+\n+\tLauncher launcher;\n+\n+\tpublic FluentLauncher() {\n+\t\tthis.launcher = new Launcher();\n+\t}\n+\n+\t/**\n+\t * @param args\n+\t * @see spoon.Launcher#run(java.lang.String[])\n+\t */\n+\n+\tpublic void run(String[] args) {\n+\t\tlauncher.run(args);\n+\t}\n+\n+\tpublic void printUsage() {\n+\t\tlauncher.printUsage();\n+\t}\n+\n+\tpublic FluentLauncher inputResource(String path) {\n+\t\tlauncher.addInputResource(path);\n+\t\treturn this;\n+\t}\n+\n+\tpublic FluentLauncher inputResource(SpoonResource resource) {\n+\t\tlauncher.addInputResource(resource);\n+\t\treturn this;\n+\t}\n+\n+\tpublic FluentLauncher processor(String name) {\n+\t\tlauncher.addProcessor(name);\n+\t\treturn this;\n+\t}\n+\n+\tpublic <T extends CtElement> FluentLauncher processor(Processor<T> processor) {\n+\t\tlauncher.addProcessor(processor);\n+\t\treturn this;\n+\t}\n+\n+\tpublic FluentLauncher templateResource(SpoonResource resource) {\n+\t\tlauncher.addTemplateResource(resource);\n+\t\treturn this;\n+\t}\n+\n+\t// TODO: das sollte in Methoden zum setzen umgewandelt werden\n+\tpublic Environment getEnvironment() {\n+\t\treturn launcher.getEnvironment();\n+\t}\n+\n+\tpublic String toString() {\n+\t\treturn launcher.toString();\n+\t}\n+\n+\t// needed???\n+\tpublic SpoonModelBuilder compiler(Factory factory) {\n+\t\treturn launcher.createCompiler(factory);\n+\t}\n+\n+\t// needed???\n+\tpublic SpoonModelBuilder compiler(Factory factory, List<SpoonResource> inputSources) {\n+\t\treturn launcher.createCompiler(factory, inputSources);\n+\t}\n+\n+\t// needed???\n+\tpublic SpoonModelBuilder createCompiler(Factory factory, List<SpoonResource> inputSources,\n+\t\t\tList<SpoonResource> templateSources) {\n+\t\treturn launcher.createCompiler(factory, inputSources, templateSources);\n+\t}\n+\n+\t// needed?\n+\tpublic SpoonModelBuilder createCompiler() {\n+\t\treturn launcher.createCompiler();\n+\t}\n+\n+\t// needed?\n+\tpublic SpoonModelBuilder createCompiler(List<SpoonResource> inputSources) {\n+\t\treturn launcher.createCompiler(inputSources);\n+\t}\n+\n+\t// needed?\n+\tpublic Factory createFactory() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4OTY2OA=="}, "originalCommit": {"oid": "507ed589a081093895e03a4ade6a25fc126f2e7a"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MDY2NjIxOnYy", "diffSide": "RIGHT", "path": "src/main/java/spoon/FluentLauncher.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjozMDoxMVrOFruO9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjo1OToyNFrOFrvdmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM5MDU4Mg==", "bodyText": "How does a SpoonModelBuilder differ from the FluentLauncher? Conceptually, to me, they seem like they are trying to accomplish the same task: using a builder pattern to configure Spoon. Exposing both may lead to some confusion.", "url": "https://github.com/INRIA/spoon/pull/3258#discussion_r381390582", "createdAt": "2020-02-19T16:30:11Z", "author": {"login": "DaveJarvis"}, "path": "src/main/java/spoon/FluentLauncher.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package spoon;\n+\n+import java.io.File;\n+import java.util.List;\n+\n+import spoon.compiler.Environment;\n+import spoon.compiler.SpoonResource;\n+import spoon.processing.Processor;\n+import spoon.reflect.CtModel;\n+import spoon.reflect.declaration.CtElement;\n+import spoon.reflect.declaration.CtType;\n+import spoon.reflect.factory.Factory;\n+import spoon.reflect.visitor.Filter;\n+import spoon.reflect.visitor.PrettyPrinter;\n+import spoon.support.JavaOutputProcessor;\n+\n+/**\n+ * TODO: doc\n+ */\n+public class FluentLauncher {\n+\n+\tLauncher launcher;\n+\n+\tpublic FluentLauncher() {\n+\t\tthis.launcher = new Launcher();\n+\t}\n+\n+\t/**\n+\t * @param args\n+\t * @see spoon.Launcher#run(java.lang.String[])\n+\t */\n+\n+\tpublic void run(String[] args) {\n+\t\tlauncher.run(args);\n+\t}\n+\n+\tpublic void printUsage() {\n+\t\tlauncher.printUsage();\n+\t}\n+\n+\tpublic FluentLauncher inputResource(String path) {\n+\t\tlauncher.addInputResource(path);\n+\t\treturn this;\n+\t}\n+\n+\tpublic FluentLauncher inputResource(SpoonResource resource) {\n+\t\tlauncher.addInputResource(resource);\n+\t\treturn this;\n+\t}\n+\n+\tpublic FluentLauncher processor(String name) {\n+\t\tlauncher.addProcessor(name);\n+\t\treturn this;\n+\t}\n+\n+\tpublic <T extends CtElement> FluentLauncher processor(Processor<T> processor) {\n+\t\tlauncher.addProcessor(processor);\n+\t\treturn this;\n+\t}\n+\n+\tpublic FluentLauncher templateResource(SpoonResource resource) {\n+\t\tlauncher.addTemplateResource(resource);\n+\t\treturn this;\n+\t}\n+\n+\t// TODO: das sollte in Methoden zum setzen umgewandelt werden\n+\tpublic Environment getEnvironment() {\n+\t\treturn launcher.getEnvironment();\n+\t}\n+\n+\tpublic String toString() {\n+\t\treturn launcher.toString();\n+\t}\n+\n+\t// needed???\n+\tpublic SpoonModelBuilder compiler(Factory factory) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "507ed589a081093895e03a4ade6a25fc126f2e7a"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQxMDcxMw==", "bodyText": "The SpoonModelBuilder interface doesn't expose a fluent api.", "url": "https://github.com/INRIA/spoon/pull/3258#discussion_r381410713", "createdAt": "2020-02-19T16:59:24Z", "author": {"login": "MartinWitt"}, "path": "src/main/java/spoon/FluentLauncher.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package spoon;\n+\n+import java.io.File;\n+import java.util.List;\n+\n+import spoon.compiler.Environment;\n+import spoon.compiler.SpoonResource;\n+import spoon.processing.Processor;\n+import spoon.reflect.CtModel;\n+import spoon.reflect.declaration.CtElement;\n+import spoon.reflect.declaration.CtType;\n+import spoon.reflect.factory.Factory;\n+import spoon.reflect.visitor.Filter;\n+import spoon.reflect.visitor.PrettyPrinter;\n+import spoon.support.JavaOutputProcessor;\n+\n+/**\n+ * TODO: doc\n+ */\n+public class FluentLauncher {\n+\n+\tLauncher launcher;\n+\n+\tpublic FluentLauncher() {\n+\t\tthis.launcher = new Launcher();\n+\t}\n+\n+\t/**\n+\t * @param args\n+\t * @see spoon.Launcher#run(java.lang.String[])\n+\t */\n+\n+\tpublic void run(String[] args) {\n+\t\tlauncher.run(args);\n+\t}\n+\n+\tpublic void printUsage() {\n+\t\tlauncher.printUsage();\n+\t}\n+\n+\tpublic FluentLauncher inputResource(String path) {\n+\t\tlauncher.addInputResource(path);\n+\t\treturn this;\n+\t}\n+\n+\tpublic FluentLauncher inputResource(SpoonResource resource) {\n+\t\tlauncher.addInputResource(resource);\n+\t\treturn this;\n+\t}\n+\n+\tpublic FluentLauncher processor(String name) {\n+\t\tlauncher.addProcessor(name);\n+\t\treturn this;\n+\t}\n+\n+\tpublic <T extends CtElement> FluentLauncher processor(Processor<T> processor) {\n+\t\tlauncher.addProcessor(processor);\n+\t\treturn this;\n+\t}\n+\n+\tpublic FluentLauncher templateResource(SpoonResource resource) {\n+\t\tlauncher.addTemplateResource(resource);\n+\t\treturn this;\n+\t}\n+\n+\t// TODO: das sollte in Methoden zum setzen umgewandelt werden\n+\tpublic Environment getEnvironment() {\n+\t\treturn launcher.getEnvironment();\n+\t}\n+\n+\tpublic String toString() {\n+\t\treturn launcher.toString();\n+\t}\n+\n+\t// needed???\n+\tpublic SpoonModelBuilder compiler(Factory factory) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM5MDU4Mg=="}, "originalCommit": {"oid": "507ed589a081093895e03a4ade6a25fc126f2e7a"}, "originalPosition": 76}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3684, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}