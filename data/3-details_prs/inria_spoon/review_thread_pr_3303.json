{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3MTg3NTQz", "number": 3303, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMjoxOTo0OFrODncWSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMjoxOTo0OFrODncWSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNjg1NTEzOnYy", "diffSide": "RIGHT", "path": "src/test/java/spoon/test/UnresolvedBugTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMjoxOTo0OFrOF1cSfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMjoyMzozMFrOF1cZvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU4MjMzNQ==", "bodyText": "how about https://docs.oracle.com/javase/7/docs/api/java/lang/String.html#equalsIgnoreCase(java.lang.String) instead of equals?", "url": "https://github.com/INRIA/spoon/pull/3303#discussion_r391582335", "createdAt": "2020-03-12T12:19:48Z", "author": {"login": "MartinWitt"}, "path": "src/test/java/spoon/test/UnresolvedBugTest.java", "diffHunk": "@@ -12,31 +12,52 @@\n import java.io.IOException;\n import java.io.InputStreamReader;\n import java.net.URL;\n+import java.util.ArrayList;\n import java.util.List;\n import java.util.stream.Collectors;\n \n import com.google.gson.Gson;\n import com.google.gson.JsonObject;\n \n+import org.junit.BeforeClass;\n+import org.junit.Ignore;\n import org.junit.Test;\n-import org.junit.experimental.categories.Category;\n \n+import org.junit.runner.Description;\n+import org.junit.runner.JUnitCore;\n+import org.junit.runner.notification.Failure;\n+import org.junit.runner.notification.RunListener;\n+import org.junit.runner.notification.RunNotifier;\n+import org.junit.runners.BlockJUnit4ClassRunner;\n+import org.junit.runners.model.FrameworkMethod;\n+import org.junit.runners.model.InitializationError;\n import spoon.FluentLauncher;\n import spoon.reflect.declaration.CtMethod;\n import spoon.reflect.visitor.filter.TypeFilter;\n \n public class UnresolvedBugTest {\n \n \tprivate static final String OPEN_ISSUE_TEXT = \"open\";\n-\tprivate List<CtMethod<?>> testMethods = findTestMethods();\n+\tprivate static List<CtMethod<?>> testMethods = findTestMethods();\n \tprivate final String githubURL = \"https://api.github.com/repos/INRIA/spoon/issues/\";\n \n+\n+\t@BeforeClass\n+\tpublic static void setup() {\n+\t\ttestMethods = testMethods.stream()\n+\t\t\t\t.filter(v -> v.hasAnnotation(Test.class) &&  v.hasAnnotation(Ignore.class)\n+\t\t\t\t\t\t&& v.getAnnotation(Ignore.class).value().equals(\"UnresolvedBug\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4309b8fb07efa987b5e7ddafc0e9eccd63aa5126"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU4NDE5MQ==", "bodyText": "Sure! Why not!", "url": "https://github.com/INRIA/spoon/pull/3303#discussion_r391584191", "createdAt": "2020-03-12T12:23:30Z", "author": {"login": "nharrand"}, "path": "src/test/java/spoon/test/UnresolvedBugTest.java", "diffHunk": "@@ -12,31 +12,52 @@\n import java.io.IOException;\n import java.io.InputStreamReader;\n import java.net.URL;\n+import java.util.ArrayList;\n import java.util.List;\n import java.util.stream.Collectors;\n \n import com.google.gson.Gson;\n import com.google.gson.JsonObject;\n \n+import org.junit.BeforeClass;\n+import org.junit.Ignore;\n import org.junit.Test;\n-import org.junit.experimental.categories.Category;\n \n+import org.junit.runner.Description;\n+import org.junit.runner.JUnitCore;\n+import org.junit.runner.notification.Failure;\n+import org.junit.runner.notification.RunListener;\n+import org.junit.runner.notification.RunNotifier;\n+import org.junit.runners.BlockJUnit4ClassRunner;\n+import org.junit.runners.model.FrameworkMethod;\n+import org.junit.runners.model.InitializationError;\n import spoon.FluentLauncher;\n import spoon.reflect.declaration.CtMethod;\n import spoon.reflect.visitor.filter.TypeFilter;\n \n public class UnresolvedBugTest {\n \n \tprivate static final String OPEN_ISSUE_TEXT = \"open\";\n-\tprivate List<CtMethod<?>> testMethods = findTestMethods();\n+\tprivate static List<CtMethod<?>> testMethods = findTestMethods();\n \tprivate final String githubURL = \"https://api.github.com/repos/INRIA/spoon/issues/\";\n \n+\n+\t@BeforeClass\n+\tpublic static void setup() {\n+\t\ttestMethods = testMethods.stream()\n+\t\t\t\t.filter(v -> v.hasAnnotation(Test.class) &&  v.hasAnnotation(Ignore.class)\n+\t\t\t\t\t\t&& v.getAnnotation(Ignore.class).value().equals(\"UnresolvedBug\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU4MjMzNQ=="}, "originalCommit": {"oid": "4309b8fb07efa987b5e7ddafc0e9eccd63aa5126"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3699, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}