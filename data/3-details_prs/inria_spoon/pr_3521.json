{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1MDA4OTg3", "number": 3521, "title": "fix: fix handling of intersection types for lambda parameters", "bodyText": "#3520", "createdAt": "2020-08-08T09:19:13Z", "url": "https://github.com/INRIA/spoon/pull/3521", "merged": true, "mergeCommit": {"oid": "f8e0c6970a35a29e1cc3465adf19f4c1d01b6611"}, "closed": true, "closedAt": "2020-08-17T16:16:07Z", "author": {"login": "quentinLeDilavrec"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc81WymAH2gAyNDY1MDA4OTg3OmZhYmU2OTQ3ZmZjYzk0ZTYxMmI5YThjYTgyNDhhMDQ2YzVjNzM0YzE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc_0WHkAH2gAyNDY1MDA4OTg3Ojk0NzBjMzJkNGY0ZGM3NjIxODBjMmVmMDc4MzM3MGMzMWM5NGU1OTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "fabe6947ffcc94e612b9a8ca8248a046c5c734c1", "author": {"user": {"login": "quentinLeDilavrec", "name": "Quentin LE DILAVREC"}}, "url": "https://github.com/INRIA/spoon/commit/fabe6947ffcc94e612b9a8ca8248a046c5c734c1", "committedDate": "2020-08-08T09:11:24Z", "message": "test case for  #3520"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d816c9fe1ad55486267b051e2ce934ddf6e266e2", "author": {"user": {"login": "quentinLeDilavrec", "name": "Quentin LE DILAVREC"}}, "url": "https://github.com/INRIA/spoon/commit/d816c9fe1ad55486267b051e2ce934ddf6e266e2", "committedDate": "2020-08-08T09:16:11Z", "message": "possible fix for #3520"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzODA0MDky", "url": "https://github.com/INRIA/spoon/pull/3521#pullrequestreview-463804092", "createdAt": "2020-08-08T13:46:11Z", "commit": {"oid": "d816c9fe1ad55486267b051e2ce934ddf6e266e2"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxMzo0NjoxMVrOG9z5Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxMzo0OToxNFrOG9z6Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ2NjU3MA==", "bodyText": "refactor the else block in getOverriddenMethodForIntersectionType?", "url": "https://github.com/INRIA/spoon/pull/3521#discussion_r467466570", "createdAt": "2020-08-08T13:46:11Z", "author": {"login": "monperrus"}, "path": "src/main/java/spoon/support/reflect/code/CtLambdaImpl.java", "diffHunk": "@@ -101,7 +105,32 @@ public String getSimpleName() {\n \t\t\t//it can be null in noclasspath mode, so we do not know which method is called, by lambda\n \t\t\treturn null;\n \t\t}\n-\t\tCtType<T> lambdaType = lambdaTypeRef.getTypeDeclaration();\n+\t\tCtMethod<?> lambdaExecutableMethod = null;\n+\t\tif (!(lambdaTypeRef instanceof CtIntersectionTypeReference)) {\n+\t\t\treturn getOverriddenAux(lambdaTypeRef);\n+\t\t} else {\n+\t\t\tCtElement parent = lambdaTypeRef.getParent();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d816c9fe1ad55486267b051e2ce934ddf6e266e2"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ2NjY1NQ==", "bodyText": "do we need to move this check here? could we keep it at the previous place?", "url": "https://github.com/INRIA/spoon/pull/3521#discussion_r467466655", "createdAt": "2020-08-08T13:47:15Z", "author": {"login": "monperrus"}, "path": "src/main/java/spoon/support/reflect/code/CtLambdaImpl.java", "diffHunk": "@@ -101,7 +105,32 @@ public String getSimpleName() {\n \t\t\t//it can be null in noclasspath mode, so we do not know which method is called, by lambda\n \t\t\treturn null;\n \t\t}\n-\t\tCtType<T> lambdaType = lambdaTypeRef.getTypeDeclaration();\n+\t\tCtMethod<?> lambdaExecutableMethod = null;\n+\t\tif (!(lambdaTypeRef instanceof CtIntersectionTypeReference)) {\n+\t\t\treturn getOverriddenAux(lambdaTypeRef);\n+\t\t} else {\n+\t\t\tCtElement parent = lambdaTypeRef.getParent();\n+\t\t\tCtTypeReference<?> parentTypeReference = null;\n+\t\t\tif (parent != null && parent instanceof CtLocalVariable) {\n+\t\t\t\tparentTypeReference = ((CtLocalVariable) parent).getType();\n+\t\t\t} else if (parent != null && parent instanceof CtAssignment) {\n+\t\t\t\tparentTypeReference = ((CtAssignment) parent).getAssigned().getType();\n+\t\t\t}\n+\t\t\tfor (CtTypeReference<?> ctTypeReference : ((CtIntersectionTypeReference<?>) lambdaTypeRef).getBounds()) {\n+\t\t\t\tCtMethod<?> tmp = getOverriddenAux(ctTypeReference);\n+\t\t\t\tif (tmp != null && (lambdaExecutableMethod == null || ctTypeReference.equals(parentTypeReference))) {\n+\t\t\t\t\tlambdaExecutableMethod = tmp;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\tif (lambdaExecutableMethod == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d816c9fe1ad55486267b051e2ce934ddf6e266e2"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ2NjgzNQ==", "bodyText": "could you add a one line comment stating the test intention in natural language:\n// contract: intersection types on lambda parameters are supported", "url": "https://github.com/INRIA/spoon/pull/3521#discussion_r467466835", "createdAt": "2020-08-08T13:49:14Z", "author": {"login": "monperrus"}, "path": "src/test/java/spoon/test/lambda/LambdaTest.java", "diffHunk": "@@ -458,6 +458,16 @@ public void testLambdaWithGenericExtendingMultipleInterfaces() {\n \t\tassertIsWellPrinted(\"( elt) -> elt.test()\", lambda);\n \t}\n \n+\t@Test\n+\tpublic void testCastLambdaWithIntersection() {\n+\t\tfinal CtLambda<?> lambda1 = intersection.getElements(new TypeFilter<CtLambda<?>>(CtLambda.class)).get(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d816c9fe1ad55486267b051e2ce934ddf6e266e2"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c969acd74ea7e0ed70bcd3cd21c81f62ecd1ae51", "author": {"user": null}, "url": "https://github.com/INRIA/spoon/commit/c969acd74ea7e0ed70bcd3cd21c81f62ecd1ae51", "committedDate": "2020-08-14T12:34:50Z", "message": "3521#discussion_r467466570"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8fc666094466e27b9a217187ce7b5f5bfd4cbbe6", "author": {"user": null}, "url": "https://github.com/INRIA/spoon/commit/8fc666094466e27b9a217187ce7b5f5bfd4cbbe6", "committedDate": "2020-08-14T12:35:11Z", "message": "3521#discussion_r467466835"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3OTYwMTYz", "url": "https://github.com/INRIA/spoon/pull/3521#pullrequestreview-467960163", "createdAt": "2020-08-15T09:24:17Z", "commit": {"oid": "8fc666094466e27b9a217187ce7b5f5bfd4cbbe6"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4a8b4024501586f2454024279365ba072b009c1", "author": {"user": {"login": "quentinLeDilavrec", "name": "Quentin LE DILAVREC"}}, "url": "https://github.com/INRIA/spoon/commit/b4a8b4024501586f2454024279365ba072b009c1", "committedDate": "2020-08-15T11:32:50Z", "message": "rename auxilary\nfrom getOverriddenMethodAux\nto getOverriddenMethodForIntersectionType"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9470c32d4f4dc762180c2ef0783370c31c94e592", "author": {"user": {"login": "nharrand", "name": "Nicolas Harrand"}}, "url": "https://github.com/INRIA/spoon/commit/9470c32d4f4dc762180c2ef0783370c31c94e592", "committedDate": "2020-08-17T15:42:32Z", "message": "please checkstyle"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1342, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}