{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA0NzM5NTU4", "number": 3655, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNTowOTo1NlrOEwmRJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMzo0MDo1MlrOExBTbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5Mzk0MDg2OnYy", "diffSide": "RIGHT", "path": "src/test/java/spoon/support/visitor/java/JavaReflectionTreeBuilderTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNTowOTo1NlrOHmQyww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNDozNjowOFrOHmlBgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg4MzA3NQ==", "bodyText": "could you add a comment \"contract: ...\" in natural language where you describe the intention of the test? Thanks", "url": "https://github.com/INRIA/spoon/pull/3655#discussion_r509883075", "createdAt": "2020-10-22T05:09:56Z", "author": {"login": "monperrus"}, "path": "src/test/java/spoon/support/visitor/java/JavaReflectionTreeBuilderTest.java", "diffHunk": "@@ -682,4 +683,14 @@ public boolean matches(CtType element) {\n \t\tassertEquals(true, ctClass.isShadow());\n \t\tassertEquals(\"foo\", ctClass.getMethods().toArray(new CtMethod[0])[0].getSimpleName());\n \t}\n+\n+\t@Test\n+\tpublic void testExpectedExceptionInInitializerError() {\n+\t\ttry {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c8fbcf8e97f2f298a94f5f6b2f5d4c1be1466e1"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDIxNDUyOA==", "bodyText": "ok", "url": "https://github.com/INRIA/spoon/pull/3655#discussion_r510214528", "createdAt": "2020-10-22T14:36:08Z", "author": {"login": "BuzzMS"}, "path": "src/test/java/spoon/support/visitor/java/JavaReflectionTreeBuilderTest.java", "diffHunk": "@@ -682,4 +683,14 @@ public boolean matches(CtType element) {\n \t\tassertEquals(true, ctClass.isShadow());\n \t\tassertEquals(\"foo\", ctClass.getMethods().toArray(new CtMethod[0])[0].getSimpleName());\n \t}\n+\n+\t@Test\n+\tpublic void testExpectedExceptionInInitializerError() {\n+\t\ttry {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg4MzA3NQ=="}, "originalCommit": {"oid": "4c8fbcf8e97f2f298a94f5f6b2f5d4c1be1466e1"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5ODM3MDM3OnYy", "diffSide": "LEFT", "path": "src/main/java/spoon/support/visitor/java/JavaReflectionTreeBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMzo0MDo1MlrOHm7Glw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMzo0MDo1MlrOHm7Glw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU3NjI3OQ==", "bodyText": "What about catching \"IllegalAccessException | ExceptionInInitializerError\"?\nThanks a lot for the changes!", "url": "https://github.com/INRIA/spoon/pull/3655#discussion_r510576279", "createdAt": "2020-10-23T03:40:52Z", "author": {"login": "monperrus"}, "path": "src/main/java/spoon/support/visitor/java/JavaReflectionTreeBuilder.java", "diffHunk": "@@ -296,7 +296,7 @@ public void visitField(Field field) {\n \t\t\t\tCtLiteral<Object> defaultExpression = factory.createLiteral(field.get(null));\n \t\t\t\tctField.setDefaultExpression(defaultExpression);\n \t\t\t}\n-\t\t} catch (IllegalAccessException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c090ca97b3281bd19559843251de7a12b26a1976"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3620, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}