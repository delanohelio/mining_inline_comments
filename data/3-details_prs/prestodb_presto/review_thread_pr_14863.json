{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU0MDUzMTAy", "number": 14863, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwMzowNToyMlrOEQcfVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDo0ODo0OVrOERTV2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1Njc5NDQ1OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/query/TestPinotPlanOptimizerSql.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwMzowNToyMlrOG0mZ3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDo0MjozN1rOG0n3VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgwODM1MA==", "bodyText": "I didn't follow why distinct limit generates the same PQL as a regular limit ?", "url": "https://github.com/prestodb/presto/pull/14863#discussion_r457808350", "createdAt": "2020-07-21T03:05:22Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/query/TestPinotPlanOptimizerSql.java", "diffHunk": "@@ -30,4 +39,28 @@ public void assertUsingSqlSyntax()\n     {\n         Assert.assertEquals(defaultSessionHolder.getConnectorSession().getProperty(\"use_pinot_sql_for_broker_queries\", Boolean.class).booleanValue(), true);\n     }\n+\n+    @Test\n+    public void testDistinctLimitPushdown()\n+    {\n+        PlanBuilder planBuilder = createPlanBuilder(defaultSessionHolder);\n+        PlanNode originalPlan = distinctLimit(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "381af86befc65279b3298eea36006f4a3f1fb422"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgwOTAzMw==", "bodyText": "It's adding group by", "url": "https://github.com/prestodb/presto/pull/14863#discussion_r457809033", "createdAt": "2020-07-21T03:08:20Z", "author": {"login": "xiangfu0"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/query/TestPinotPlanOptimizerSql.java", "diffHunk": "@@ -30,4 +39,28 @@ public void assertUsingSqlSyntax()\n     {\n         Assert.assertEquals(defaultSessionHolder.getConnectorSession().getProperty(\"use_pinot_sql_for_broker_queries\", Boolean.class).booleanValue(), true);\n     }\n+\n+    @Test\n+    public void testDistinctLimitPushdown()\n+    {\n+        PlanBuilder planBuilder = createPlanBuilder(defaultSessionHolder);\n+        PlanNode originalPlan = distinctLimit(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgwODM1MA=="}, "originalCommit": {"oid": "381af86befc65279b3298eea36006f4a3f1fb422"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgzMjI3Nw==", "bodyText": "basically convert SELECT DISTINCT col FROM myTable LIMIT 10 to SELECT col FROM myTable GROUP BY col LIMIT 10", "url": "https://github.com/prestodb/presto/pull/14863#discussion_r457832277", "createdAt": "2020-07-21T04:42:37Z", "author": {"login": "xiangfu0"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/query/TestPinotPlanOptimizerSql.java", "diffHunk": "@@ -30,4 +39,28 @@ public void assertUsingSqlSyntax()\n     {\n         Assert.assertEquals(defaultSessionHolder.getConnectorSession().getProperty(\"use_pinot_sql_for_broker_queries\", Boolean.class).booleanValue(), true);\n     }\n+\n+    @Test\n+    public void testDistinctLimitPushdown()\n+    {\n+        PlanBuilder planBuilder = createPlanBuilder(defaultSessionHolder);\n+        PlanNode originalPlan = distinctLimit(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgwODM1MA=="}, "originalCommit": {"oid": "381af86befc65279b3298eea36006f4a3f1fb422"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NzE2NDU1OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGenerator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNjoyMzoyNFrOG0pw8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxODo1Mzo1MVrOG1FgVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg2MzQwOQ==", "bodyText": "I think I have forgotten your old Pinot-SQL PR :-) -- but didn't we have a special derived class for the SQL generation ? Instead of using  if useSqlSyntax", "url": "https://github.com/prestodb/presto/pull/14863#discussion_r457863409", "createdAt": "2020-07-21T06:23:24Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGenerator.java", "diffHunk": "@@ -516,5 +518,27 @@ public PinotQueryGeneratorContext visitTopN(TopNNode node, PinotQueryGeneratorCo\n             checkSupported(node.getStep().equals(TopNNode.Step.SINGLE), \"Can only push single logical topn in\");\n             return context.withTopN(getOrderingScheme(node), node.getCount()).withOutputColumns(node.getOutputVariables());\n         }\n+\n+        @Override\n+        public PinotQueryGeneratorContext visitDistinctLimit(DistinctLimitNode node, PinotQueryGeneratorContext context)\n+        {\n+            context = node.getSource().accept(this, context);\n+            requireNonNull(context, \"context is null\");\n+            checkSupported(!forbidBrokerQueries, \"Cannot push distinctLimit in segment mode\");\n+            LinkedHashSet<VariableReferenceExpression> groupByColumns = new LinkedHashSet<>(node.getDistinctVariables());\n+            if (!useSqlSyntax) {\n+                // Handling PQL by adding hidden expression: count(*)\n+                // E.g. `SELECT DISTINCT A, B FROM myTable LIMIT 10`\n+                // In Pql mode, the generated pql is `SELECT count(*) FROM myTable GROUP BY A, B LIMIT 10`;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95768433ec320141f07c53eabfd3b90a04a9484b"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzkwNzkwNg==", "bodyText": "This is for pushing down a new PlanNode: DistinctLimitPlanNode.\nQuery SELECT DISTINCT colA will be parsed to an AggregationPlanNode,\nQuery SELECT DISTINCT colA LIMIT X will be parsed to a DistinctLimitPlanNode.\nFor PQL side, since we still need to use the hidden column count(*), so I use withAggregation(...) for setting.\nFor SQL side, use withDistinctLimit to set groupbycolumns and limit.", "url": "https://github.com/prestodb/presto/pull/14863#discussion_r457907906", "createdAt": "2020-07-21T07:56:40Z", "author": {"login": "xiangfu0"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGenerator.java", "diffHunk": "@@ -516,5 +518,27 @@ public PinotQueryGeneratorContext visitTopN(TopNNode node, PinotQueryGeneratorCo\n             checkSupported(node.getStep().equals(TopNNode.Step.SINGLE), \"Can only push single logical topn in\");\n             return context.withTopN(getOrderingScheme(node), node.getCount()).withOutputColumns(node.getOutputVariables());\n         }\n+\n+        @Override\n+        public PinotQueryGeneratorContext visitDistinctLimit(DistinctLimitNode node, PinotQueryGeneratorContext context)\n+        {\n+            context = node.getSource().accept(this, context);\n+            requireNonNull(context, \"context is null\");\n+            checkSupported(!forbidBrokerQueries, \"Cannot push distinctLimit in segment mode\");\n+            LinkedHashSet<VariableReferenceExpression> groupByColumns = new LinkedHashSet<>(node.getDistinctVariables());\n+            if (!useSqlSyntax) {\n+                // Handling PQL by adding hidden expression: count(*)\n+                // E.g. `SELECT DISTINCT A, B FROM myTable LIMIT 10`\n+                // In Pql mode, the generated pql is `SELECT count(*) FROM myTable GROUP BY A, B LIMIT 10`;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg2MzQwOQ=="}, "originalCommit": {"oid": "95768433ec320141f07c53eabfd3b90a04a9484b"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMxNzkwOA==", "bodyText": "PinotQueryGeneratorContext.withAggregation has some special handling for the case when distinctCount is already pushed down. (Search for PINOT_DISTINCT_COUNT_FUNCTION_NAME). Can you make sure that this doesn't conflict with that. Thanks", "url": "https://github.com/prestodb/presto/pull/14863#discussion_r458317908", "createdAt": "2020-07-21T18:53:51Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGenerator.java", "diffHunk": "@@ -516,5 +518,27 @@ public PinotQueryGeneratorContext visitTopN(TopNNode node, PinotQueryGeneratorCo\n             checkSupported(node.getStep().equals(TopNNode.Step.SINGLE), \"Can only push single logical topn in\");\n             return context.withTopN(getOrderingScheme(node), node.getCount()).withOutputColumns(node.getOutputVariables());\n         }\n+\n+        @Override\n+        public PinotQueryGeneratorContext visitDistinctLimit(DistinctLimitNode node, PinotQueryGeneratorContext context)\n+        {\n+            context = node.getSource().accept(this, context);\n+            requireNonNull(context, \"context is null\");\n+            checkSupported(!forbidBrokerQueries, \"Cannot push distinctLimit in segment mode\");\n+            LinkedHashSet<VariableReferenceExpression> groupByColumns = new LinkedHashSet<>(node.getDistinctVariables());\n+            if (!useSqlSyntax) {\n+                // Handling PQL by adding hidden expression: count(*)\n+                // E.g. `SELECT DISTINCT A, B FROM myTable LIMIT 10`\n+                // In Pql mode, the generated pql is `SELECT count(*) FROM myTable GROUP BY A, B LIMIT 10`;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg2MzQwOQ=="}, "originalCommit": {"oid": "95768433ec320141f07c53eabfd3b90a04a9484b"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NzE2NTIwOnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNjoyMzo0MFrOG0pxVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNzowNTowOVrOG0q1XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg2MzUwOA==", "bodyText": "What about the old group by columns already in the context ? If you don't expect them please assert accordingly", "url": "https://github.com/prestodb/presto/pull/14863#discussion_r457863508", "createdAt": "2020-07-21T06:23:40Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGenerator.java", "diffHunk": "@@ -516,5 +518,27 @@ public PinotQueryGeneratorContext visitTopN(TopNNode node, PinotQueryGeneratorCo\n             checkSupported(node.getStep().equals(TopNNode.Step.SINGLE), \"Can only push single logical topn in\");\n             return context.withTopN(getOrderingScheme(node), node.getCount()).withOutputColumns(node.getOutputVariables());\n         }\n+\n+        @Override\n+        public PinotQueryGeneratorContext visitDistinctLimit(DistinctLimitNode node, PinotQueryGeneratorContext context)\n+        {\n+            context = node.getSource().accept(this, context);\n+            requireNonNull(context, \"context is null\");\n+            checkSupported(!forbidBrokerQueries, \"Cannot push distinctLimit in segment mode\");\n+            LinkedHashSet<VariableReferenceExpression> groupByColumns = new LinkedHashSet<>(node.getDistinctVariables());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95768433ec320141f07c53eabfd3b90a04a9484b"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg4MDkyNA==", "bodyText": "Will add assertion, distinct column shouldn't come with groupbys.", "url": "https://github.com/prestodb/presto/pull/14863#discussion_r457880924", "createdAt": "2020-07-21T07:05:09Z", "author": {"login": "xiangfu0"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGenerator.java", "diffHunk": "@@ -516,5 +518,27 @@ public PinotQueryGeneratorContext visitTopN(TopNNode node, PinotQueryGeneratorCo\n             checkSupported(node.getStep().equals(TopNNode.Step.SINGLE), \"Can only push single logical topn in\");\n             return context.withTopN(getOrderingScheme(node), node.getCount()).withOutputColumns(node.getOutputVariables());\n         }\n+\n+        @Override\n+        public PinotQueryGeneratorContext visitDistinctLimit(DistinctLimitNode node, PinotQueryGeneratorContext context)\n+        {\n+            context = node.getSource().accept(this, context);\n+            requireNonNull(context, \"context is null\");\n+            checkSupported(!forbidBrokerQueries, \"Cannot push distinctLimit in segment mode\");\n+            LinkedHashSet<VariableReferenceExpression> groupByColumns = new LinkedHashSet<>(node.getDistinctVariables());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg2MzUwOA=="}, "originalCommit": {"oid": "95768433ec320141f07c53eabfd3b90a04a9484b"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NzE2OTMwOnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/query/TestPinotQueryGenerator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNjoyNToyMFrOG0pzrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwODoxNzoyM1rOG0tMiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg2NDEwOQ==", "bodyText": "Again pardon my ignorance on the Pinot-SQL PR: But wasn't there a special derived test class to test the PQL one alone. This looks to be testing the PQL flow -- should it go in its own class ?", "url": "https://github.com/prestodb/presto/pull/14863#discussion_r457864109", "createdAt": "2020-07-21T06:25:20Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/query/TestPinotQueryGenerator.java", "diffHunk": "@@ -374,4 +377,26 @@ public void testAggregationWithOrderByPushDownInTopN()\n         TopNNode topN = new TopNNode(planBuilder.getIdAllocator().getNextId(), agg, 50L, new OrderingScheme(ImmutableList.of(new Ordering(variable(\"city\"), SortOrder.DESC_NULLS_FIRST))), TopNNode.Step.FINAL);\n         testPinotQuery(pinotConfig, topN, \"\", defaultSessionHolder, ImmutableMap.of());\n     }\n+\n+    @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95768433ec320141f07c53eabfd3b90a04a9484b"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzkxNTQ3OA==", "bodyText": "you are right, will merge the tests.", "url": "https://github.com/prestodb/presto/pull/14863#discussion_r457915478", "createdAt": "2020-07-21T08:10:13Z", "author": {"login": "xiangfu0"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/query/TestPinotQueryGenerator.java", "diffHunk": "@@ -374,4 +377,26 @@ public void testAggregationWithOrderByPushDownInTopN()\n         TopNNode topN = new TopNNode(planBuilder.getIdAllocator().getNextId(), agg, 50L, new OrderingScheme(ImmutableList.of(new Ordering(variable(\"city\"), SortOrder.DESC_NULLS_FIRST))), TopNNode.Step.FINAL);\n         testPinotQuery(pinotConfig, topN, \"\", defaultSessionHolder, ImmutableMap.of());\n     }\n+\n+    @Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg2NDEwOQ=="}, "originalCommit": {"oid": "95768433ec320141f07c53eabfd3b90a04a9484b"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzkxOTYyNA==", "bodyText": "done", "url": "https://github.com/prestodb/presto/pull/14863#discussion_r457919624", "createdAt": "2020-07-21T08:17:23Z", "author": {"login": "xiangfu0"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/query/TestPinotQueryGenerator.java", "diffHunk": "@@ -374,4 +377,26 @@ public void testAggregationWithOrderByPushDownInTopN()\n         TopNNode topN = new TopNNode(planBuilder.getIdAllocator().getNextId(), agg, 50L, new OrderingScheme(ImmutableList.of(new Ordering(variable(\"city\"), SortOrder.DESC_NULLS_FIRST))), TopNNode.Step.FINAL);\n         testPinotQuery(pinotConfig, topN, \"\", defaultSessionHolder, ImmutableMap.of());\n     }\n+\n+    @Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg2NDEwOQ=="}, "originalCommit": {"oid": "95768433ec320141f07c53eabfd3b90a04a9484b"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NzE3MzU0OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/query/TestPinotQueryGeneratorSql.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNjoyNjo0MFrOG0p15Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwODoxNDo1MlrOG0tGuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg2NDY3Nw==", "bodyText": "How about testing something with a distinct limit on top of an existing group by ? What about on top of an existing global aggregation ?", "url": "https://github.com/prestodb/presto/pull/14863#discussion_r457864677", "createdAt": "2020-07-21T06:26:40Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/query/TestPinotQueryGeneratorSql.java", "diffHunk": "@@ -211,4 +216,27 @@ public void testDistinctSelection()\n                 defaultSessionHolder,\n                 ImmutableMap.of());\n     }\n+\n+    @Override\n+    @Test\n+    public void testDistinctLimitPushdown()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95768433ec320141f07c53eabfd3b90a04a9484b"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzkxODEzNw==", "bodyText": "adding assertions on existing aggregations/groupbys.", "url": "https://github.com/prestodb/presto/pull/14863#discussion_r457918137", "createdAt": "2020-07-21T08:14:52Z", "author": {"login": "xiangfu0"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/query/TestPinotQueryGeneratorSql.java", "diffHunk": "@@ -211,4 +216,27 @@ public void testDistinctSelection()\n                 defaultSessionHolder,\n                 ImmutableMap.of());\n     }\n+\n+    @Override\n+    @Test\n+    public void testDistinctLimitPushdown()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg2NDY3Nw=="}, "originalCommit": {"oid": "95768433ec320141f07c53eabfd3b90a04a9484b"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDA0MjQxOnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxODo1NToyMFrOG1Fjqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDo1MTowM1rOG1JSHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMxODc2Mg==", "bodyText": "nit: I somehow prefer having a clean else block here to denote that the SQL and PQL handling is different. I somehow missed that in my first read.", "url": "https://github.com/prestodb/presto/pull/14863#discussion_r458318762", "createdAt": "2020-07-21T18:55:20Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGenerator.java", "diffHunk": "@@ -516,5 +518,27 @@ public PinotQueryGeneratorContext visitTopN(TopNNode node, PinotQueryGeneratorCo\n             checkSupported(node.getStep().equals(TopNNode.Step.SINGLE), \"Can only push single logical topn in\");\n             return context.withTopN(getOrderingScheme(node), node.getCount()).withOutputColumns(node.getOutputVariables());\n         }\n+\n+        @Override\n+        public PinotQueryGeneratorContext visitDistinctLimit(DistinctLimitNode node, PinotQueryGeneratorContext context)\n+        {\n+            context = node.getSource().accept(this, context);\n+            requireNonNull(context, \"context is null\");\n+            checkSupported(!forbidBrokerQueries, \"Cannot push distinctLimit in segment mode\");\n+            LinkedHashSet<VariableReferenceExpression> groupByColumns = new LinkedHashSet<>(node.getDistinctVariables());\n+            if (!useSqlSyntax) {\n+                // Handling PQL by adding hidden expression: count(*)\n+                // E.g. `SELECT DISTINCT A, B FROM myTable LIMIT 10`\n+                // In Pql mode, the generated pql is `SELECT count(*) FROM myTable GROUP BY A, B LIMIT 10`;\n+                // In Sql mode, the generated sql is still `SELECT A, B FROM myTable GROUP BY A, B LIMIT 10`.\n+                VariableReferenceExpression hidden = new VariableReferenceExpression(UUID.randomUUID().toString(), BigintType.BIGINT);\n+                Map<VariableReferenceExpression, Selection> newSelections = new HashMap<>(context.getSelections());\n+                newSelections.put(hidden, new Selection(\"count(*)\", DERIVED));\n+                LinkedHashSet<VariableReferenceExpression> newOutputs = new LinkedHashSet<>(groupByColumns);\n+                newOutputs.add(hidden);\n+                return context.withAggregation(newSelections, newOutputs, groupByColumns, 1, ImmutableSet.of(hidden)).withLimit(node.getLimit());\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f26ce010b760e016a470567b1b72adb829bbaa25"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM3OTgwNg==", "bodyText": "done.", "url": "https://github.com/prestodb/presto/pull/14863#discussion_r458379806", "createdAt": "2020-07-21T20:51:03Z", "author": {"login": "xiangfu0"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGenerator.java", "diffHunk": "@@ -516,5 +518,27 @@ public PinotQueryGeneratorContext visitTopN(TopNNode node, PinotQueryGeneratorCo\n             checkSupported(node.getStep().equals(TopNNode.Step.SINGLE), \"Can only push single logical topn in\");\n             return context.withTopN(getOrderingScheme(node), node.getCount()).withOutputColumns(node.getOutputVariables());\n         }\n+\n+        @Override\n+        public PinotQueryGeneratorContext visitDistinctLimit(DistinctLimitNode node, PinotQueryGeneratorContext context)\n+        {\n+            context = node.getSource().accept(this, context);\n+            requireNonNull(context, \"context is null\");\n+            checkSupported(!forbidBrokerQueries, \"Cannot push distinctLimit in segment mode\");\n+            LinkedHashSet<VariableReferenceExpression> groupByColumns = new LinkedHashSet<>(node.getDistinctVariables());\n+            if (!useSqlSyntax) {\n+                // Handling PQL by adding hidden expression: count(*)\n+                // E.g. `SELECT DISTINCT A, B FROM myTable LIMIT 10`\n+                // In Pql mode, the generated pql is `SELECT count(*) FROM myTable GROUP BY A, B LIMIT 10`;\n+                // In Sql mode, the generated sql is still `SELECT A, B FROM myTable GROUP BY A, B LIMIT 10`.\n+                VariableReferenceExpression hidden = new VariableReferenceExpression(UUID.randomUUID().toString(), BigintType.BIGINT);\n+                Map<VariableReferenceExpression, Selection> newSelections = new HashMap<>(context.getSelections());\n+                newSelections.put(hidden, new Selection(\"count(*)\", DERIVED));\n+                LinkedHashSet<VariableReferenceExpression> newOutputs = new LinkedHashSet<>(groupByColumns);\n+                newOutputs.add(hidden);\n+                return context.withAggregation(newSelections, newOutputs, groupByColumns, 1, ImmutableSet.of(hidden)).withLimit(node.getLimit());\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMxODc2Mg=="}, "originalCommit": {"oid": "f26ce010b760e016a470567b1b72adb829bbaa25"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDA0MjY0OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxODo1NToyM1rOG1Fjzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDo1MTozMFrOG1JS6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMxODc5OA==", "bodyText": "nit: Should we omit adding a helper method when it is used only once ? I think this can be inlined ?", "url": "https://github.com/prestodb/presto/pull/14863#discussion_r458318798", "createdAt": "2020-07-21T18:55:23Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "diffHunk": "@@ -553,6 +558,26 @@ public PinotQueryGeneratorContext withVariablesInAggregation(Set<VariableReferen\n                 useSqlSyntax);\n     }\n \n+    public PinotQueryGeneratorContext withDistinctLimit(LinkedHashSet<VariableReferenceExpression> newGroupByColumns, long limit)\n+    {\n+        int intLimit = checkForValidLimit(limit);\n+        checkSupported(!hasLimit(), \"Limit already exists. Pinot doesn't support limit on top of another limit\");\n+        checkSupported(!hasGroupBy(), \"GroupBy already exists. Pinot doesn't support Distinct on top of another Group By\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f26ce010b760e016a470567b1b72adb829bbaa25"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM4MDAxMA==", "bodyText": "there are many other places uses this, I replaces all of them using hasGroupBy().", "url": "https://github.com/prestodb/presto/pull/14863#discussion_r458380010", "createdAt": "2020-07-21T20:51:30Z", "author": {"login": "xiangfu0"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "diffHunk": "@@ -553,6 +558,26 @@ public PinotQueryGeneratorContext withVariablesInAggregation(Set<VariableReferen\n                 useSqlSyntax);\n     }\n \n+    public PinotQueryGeneratorContext withDistinctLimit(LinkedHashSet<VariableReferenceExpression> newGroupByColumns, long limit)\n+    {\n+        int intLimit = checkForValidLimit(limit);\n+        checkSupported(!hasLimit(), \"Limit already exists. Pinot doesn't support limit on top of another limit\");\n+        checkSupported(!hasGroupBy(), \"GroupBy already exists. Pinot doesn't support Distinct on top of another Group By\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMxODc5OA=="}, "originalCommit": {"oid": "f26ce010b760e016a470567b1b72adb829bbaa25"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDA0NDg5OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxODo1NjowMFrOG1FlIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDo1MTozNFrOG1JTDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMxOTEzNw==", "bodyText": "Is it worth asserting that we are in sql mode here ?", "url": "https://github.com/prestodb/presto/pull/14863#discussion_r458319137", "createdAt": "2020-07-21T18:56:00Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "diffHunk": "@@ -553,6 +558,26 @@ public PinotQueryGeneratorContext withVariablesInAggregation(Set<VariableReferen\n                 useSqlSyntax);\n     }\n \n+    public PinotQueryGeneratorContext withDistinctLimit(LinkedHashSet<VariableReferenceExpression> newGroupByColumns, long limit)\n+    {\n+        int intLimit = checkForValidLimit(limit);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f26ce010b760e016a470567b1b72adb829bbaa25"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM4MDA0Ng==", "bodyText": "done.", "url": "https://github.com/prestodb/presto/pull/14863#discussion_r458380046", "createdAt": "2020-07-21T20:51:34Z", "author": {"login": "xiangfu0"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "diffHunk": "@@ -553,6 +558,26 @@ public PinotQueryGeneratorContext withVariablesInAggregation(Set<VariableReferen\n                 useSqlSyntax);\n     }\n \n+    public PinotQueryGeneratorContext withDistinctLimit(LinkedHashSet<VariableReferenceExpression> newGroupByColumns, long limit)\n+    {\n+        int intLimit = checkForValidLimit(limit);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMxOTEzNw=="}, "originalCommit": {"oid": "f26ce010b760e016a470567b1b72adb829bbaa25"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDU1Nzk2OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMTozMjo1OVrOG1KlWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzozODozN1rOG1NivQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQwMTExNQ==", "bodyText": "Correct me if I am wrong: But is this block of code duplicated ? If so, can we DRY it ?", "url": "https://github.com/prestodb/presto/pull/14863#discussion_r458401115", "createdAt": "2020-07-21T21:32:59Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGenerator.java", "diffHunk": "@@ -516,5 +518,33 @@ public PinotQueryGeneratorContext visitTopN(TopNNode node, PinotQueryGeneratorCo\n             checkSupported(node.getStep().equals(TopNNode.Step.SINGLE), \"Can only push single logical topn in\");\n             return context.withTopN(getOrderingScheme(node), node.getCount()).withOutputColumns(node.getOutputVariables());\n         }\n+\n+        @Override\n+        public PinotQueryGeneratorContext visitDistinctLimit(DistinctLimitNode node, PinotQueryGeneratorContext context)\n+        {\n+            context = node.getSource().accept(this, context);\n+            requireNonNull(context, \"context is null\");\n+            checkSupported(!forbidBrokerQueries, \"Cannot push distinctLimit in segment mode\");\n+            LinkedHashSet<VariableReferenceExpression> groupByColumns = new LinkedHashSet<>(node.getDistinctVariables());\n+            if (!useSqlSyntax) {\n+                // Handling PQL by adding hidden expression: count(*)\n+                // E.g. `SELECT DISTINCT A, B FROM myTable LIMIT 10`\n+                // In Pql mode, the generated pql is `SELECT count(*) FROM myTable GROUP BY A, B LIMIT 10`.\n+                checkSupported(!context.hasAggregation(), \"Aggregation already exists. Pinot doesn't support DistinctLimit with existing Aggregation\");\n+                checkSupported(!context.hasGroupBy(), \"GroupBy already exists. Pinot doesn't support DistinctLimit with existing GroupBy\");\n+                VariableReferenceExpression hidden = new VariableReferenceExpression(UUID.randomUUID().toString(), BigintType.BIGINT);\n+                Map<VariableReferenceExpression, Selection> newSelections = new HashMap<>(context.getSelections());\n+                newSelections.put(hidden, new Selection(\"count(*)\", DERIVED));\n+                LinkedHashSet<VariableReferenceExpression> newOutputs = new LinkedHashSet<>(groupByColumns);\n+                newOutputs.add(hidden);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81e5af0b8332c342617bdbfc7f16420fa265d437"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0OTU5Nw==", "bodyText": "extract to a method to set hiden column", "url": "https://github.com/prestodb/presto/pull/14863#discussion_r458449597", "createdAt": "2020-07-21T23:38:37Z", "author": {"login": "xiangfu0"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGenerator.java", "diffHunk": "@@ -516,5 +518,33 @@ public PinotQueryGeneratorContext visitTopN(TopNNode node, PinotQueryGeneratorCo\n             checkSupported(node.getStep().equals(TopNNode.Step.SINGLE), \"Can only push single logical topn in\");\n             return context.withTopN(getOrderingScheme(node), node.getCount()).withOutputColumns(node.getOutputVariables());\n         }\n+\n+        @Override\n+        public PinotQueryGeneratorContext visitDistinctLimit(DistinctLimitNode node, PinotQueryGeneratorContext context)\n+        {\n+            context = node.getSource().accept(this, context);\n+            requireNonNull(context, \"context is null\");\n+            checkSupported(!forbidBrokerQueries, \"Cannot push distinctLimit in segment mode\");\n+            LinkedHashSet<VariableReferenceExpression> groupByColumns = new LinkedHashSet<>(node.getDistinctVariables());\n+            if (!useSqlSyntax) {\n+                // Handling PQL by adding hidden expression: count(*)\n+                // E.g. `SELECT DISTINCT A, B FROM myTable LIMIT 10`\n+                // In Pql mode, the generated pql is `SELECT count(*) FROM myTable GROUP BY A, B LIMIT 10`.\n+                checkSupported(!context.hasAggregation(), \"Aggregation already exists. Pinot doesn't support DistinctLimit with existing Aggregation\");\n+                checkSupported(!context.hasGroupBy(), \"GroupBy already exists. Pinot doesn't support DistinctLimit with existing GroupBy\");\n+                VariableReferenceExpression hidden = new VariableReferenceExpression(UUID.randomUUID().toString(), BigintType.BIGINT);\n+                Map<VariableReferenceExpression, Selection> newSelections = new HashMap<>(context.getSelections());\n+                newSelections.put(hidden, new Selection(\"count(*)\", DERIVED));\n+                LinkedHashSet<VariableReferenceExpression> newOutputs = new LinkedHashSet<>(groupByColumns);\n+                newOutputs.add(hidden);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQwMTExNQ=="}, "originalCommit": {"oid": "81e5af0b8332c342617bdbfc7f16420fa265d437"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDU2MDgxOnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/query/TestPinotPlanOptimizerSql.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMTozMzo1MVrOG1KnBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzozODo0MlrOG1Ni3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQwMTU0MQ==", "bodyText": "nit: split this into multiple lines if possible please.", "url": "https://github.com/prestodb/presto/pull/14863#discussion_r458401541", "createdAt": "2020-07-21T21:33:51Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/query/TestPinotPlanOptimizerSql.java", "diffHunk": "@@ -30,4 +39,28 @@ public void assertUsingSqlSyntax()\n     {\n         Assert.assertEquals(defaultSessionHolder.getConnectorSession().getProperty(\"use_pinot_sql_for_broker_queries\", Boolean.class).booleanValue(), true);\n     }\n+\n+    @Test\n+    public void testDistinctLimitPushdown()\n+    {\n+        PlanBuilder planBuilder = createPlanBuilder(defaultSessionHolder);\n+        PlanNode originalPlan = distinctLimit(\n+                planBuilder,\n+                ImmutableList.of(new VariableReferenceExpression(\"regionid\", BIGINT)),\n+                50L,\n+                tableScan(planBuilder, pinotTable, regionId));\n+        PlanNode optimized = getOptimizedPlan(planBuilder, originalPlan);\n+        assertPlanMatch(optimized, PinotTableScanMatcher.match(pinotTable, Optional.of(\"SELECT regionId FROM hybrid GROUP BY regionId LIMIT 50\"), Optional.of(false), originalPlan.getOutputVariables(), useSqlSyntax()), typeProvider);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81e5af0b8332c342617bdbfc7f16420fa265d437"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0OTYyOA==", "bodyText": "done", "url": "https://github.com/prestodb/presto/pull/14863#discussion_r458449628", "createdAt": "2020-07-21T23:38:42Z", "author": {"login": "xiangfu0"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/query/TestPinotPlanOptimizerSql.java", "diffHunk": "@@ -30,4 +39,28 @@ public void assertUsingSqlSyntax()\n     {\n         Assert.assertEquals(defaultSessionHolder.getConnectorSession().getProperty(\"use_pinot_sql_for_broker_queries\", Boolean.class).booleanValue(), true);\n     }\n+\n+    @Test\n+    public void testDistinctLimitPushdown()\n+    {\n+        PlanBuilder planBuilder = createPlanBuilder(defaultSessionHolder);\n+        PlanNode originalPlan = distinctLimit(\n+                planBuilder,\n+                ImmutableList.of(new VariableReferenceExpression(\"regionid\", BIGINT)),\n+                50L,\n+                tableScan(planBuilder, pinotTable, regionId));\n+        PlanNode optimized = getOptimizedPlan(planBuilder, originalPlan);\n+        assertPlanMatch(optimized, PinotTableScanMatcher.match(pinotTable, Optional.of(\"SELECT regionId FROM hybrid GROUP BY regionId LIMIT 50\"), Optional.of(false), originalPlan.getOutputVariables(), useSqlSyntax()), typeProvider);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQwMTU0MQ=="}, "originalCommit": {"oid": "81e5af0b8332c342617bdbfc7f16420fa265d437"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDU2MTA5OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/query/TestPinotPlanOptimizerSql.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMTozMzo1N1rOG1KnMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMTozMzo1N1rOG1KnMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQwMTU4NQ==", "bodyText": "ditto", "url": "https://github.com/prestodb/presto/pull/14863#discussion_r458401585", "createdAt": "2020-07-21T21:33:57Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/query/TestPinotPlanOptimizerSql.java", "diffHunk": "@@ -30,4 +39,28 @@ public void assertUsingSqlSyntax()\n     {\n         Assert.assertEquals(defaultSessionHolder.getConnectorSession().getProperty(\"use_pinot_sql_for_broker_queries\", Boolean.class).booleanValue(), true);\n     }\n+\n+    @Test\n+    public void testDistinctLimitPushdown()\n+    {\n+        PlanBuilder planBuilder = createPlanBuilder(defaultSessionHolder);\n+        PlanNode originalPlan = distinctLimit(\n+                planBuilder,\n+                ImmutableList.of(new VariableReferenceExpression(\"regionid\", BIGINT)),\n+                50L,\n+                tableScan(planBuilder, pinotTable, regionId));\n+        PlanNode optimized = getOptimizedPlan(planBuilder, originalPlan);\n+        assertPlanMatch(optimized, PinotTableScanMatcher.match(pinotTable, Optional.of(\"SELECT regionId FROM hybrid GROUP BY regionId LIMIT 50\"), Optional.of(false), originalPlan.getOutputVariables(), useSqlSyntax()), typeProvider);\n+\n+        planBuilder = createPlanBuilder(defaultSessionHolder);\n+        originalPlan = distinctLimit(\n+                planBuilder,\n+                ImmutableList.of(\n+                        new VariableReferenceExpression(\"regionid\", BIGINT),\n+                        new VariableReferenceExpression(\"city\", VARCHAR)),\n+                50L,\n+                tableScan(planBuilder, pinotTable, regionId, city));\n+        optimized = getOptimizedPlan(planBuilder, originalPlan);\n+        assertPlanMatch(optimized, PinotTableScanMatcher.match(pinotTable, Optional.of(\"SELECT regionId, city FROM hybrid GROUP BY regionId, city LIMIT 50\"), Optional.of(false), originalPlan.getOutputVariables(), useSqlSyntax()), typeProvider);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81e5af0b8332c342617bdbfc7f16420fa265d437"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDU2NTcwOnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/query/TestPinotQueryGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMTozNToxOFrOG1KpzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzozOTowMVrOG1NjOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQwMjI1Mg==", "bodyText": "I think getExpectedDistinctOutput should only take the group by keys, because the aggregation is always unconditionally \"count()\". ie, this method should just return \"count()\".", "url": "https://github.com/prestodb/presto/pull/14863#discussion_r458402252", "createdAt": "2020-07-21T21:35:18Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/query/TestPinotQueryGenerator.java", "diffHunk": "@@ -374,4 +377,41 @@ public void testAggregationWithOrderByPushDownInTopN()\n         TopNNode topN = new TopNNode(planBuilder.getIdAllocator().getNextId(), agg, 50L, new OrderingScheme(ImmutableList.of(new Ordering(variable(\"city\"), SortOrder.DESC_NULLS_FIRST))), TopNNode.Step.FINAL);\n         testPinotQuery(pinotConfig, topN, \"\", defaultSessionHolder, ImmutableMap.of());\n     }\n+\n+    @Test\n+    public void testDistinctLimitPushdown()\n+    {\n+        PlanBuilder planBuilder = createPlanBuilder(defaultSessionHolder);\n+        DistinctLimitNode distinctLimitNode = distinctLimit(\n+                planBuilder,\n+                ImmutableList.of(new VariableReferenceExpression(\"regionid\", BIGINT)),\n+                50L,\n+                tableScan(planBuilder, pinotTable, regionId));\n+        testPinotQuery(\n+                pinotConfig,\n+                distinctLimitNode,\n+                String.format(\"SELECT %s FROM realtimeOnly GROUP BY regionId %s 50\", getExpectedDistinctOutput(\"count(*)\", \"regionId\"), getGroupByLimitKey()),\n+                defaultSessionHolder,\n+                ImmutableMap.of());\n+\n+        planBuilder = createPlanBuilder(defaultSessionHolder);\n+        distinctLimitNode = distinctLimit(\n+                planBuilder,\n+                ImmutableList.of(\n+                        new VariableReferenceExpression(\"regionid\", BIGINT),\n+                        new VariableReferenceExpression(\"city\", VARCHAR)),\n+                50L,\n+                tableScan(planBuilder, pinotTable, regionId, city));\n+        testPinotQuery(\n+                pinotConfig,\n+                distinctLimitNode,\n+                String.format(\"SELECT %s FROM realtimeOnly GROUP BY regionId, city %s 50\", getExpectedDistinctOutput(\"count(*)\", \"regionId, city\"), getGroupByLimitKey()),\n+                defaultSessionHolder,\n+                ImmutableMap.of());\n+    }\n+\n+    protected String getExpectedDistinctOutput(String aggregation, String groupKeys)\n+    {\n+        return aggregation;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81e5af0b8332c342617bdbfc7f16420fa265d437"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0OTcyMw==", "bodyText": "make sense. Changed.", "url": "https://github.com/prestodb/presto/pull/14863#discussion_r458449723", "createdAt": "2020-07-21T23:39:01Z", "author": {"login": "xiangfu0"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/query/TestPinotQueryGenerator.java", "diffHunk": "@@ -374,4 +377,41 @@ public void testAggregationWithOrderByPushDownInTopN()\n         TopNNode topN = new TopNNode(planBuilder.getIdAllocator().getNextId(), agg, 50L, new OrderingScheme(ImmutableList.of(new Ordering(variable(\"city\"), SortOrder.DESC_NULLS_FIRST))), TopNNode.Step.FINAL);\n         testPinotQuery(pinotConfig, topN, \"\", defaultSessionHolder, ImmutableMap.of());\n     }\n+\n+    @Test\n+    public void testDistinctLimitPushdown()\n+    {\n+        PlanBuilder planBuilder = createPlanBuilder(defaultSessionHolder);\n+        DistinctLimitNode distinctLimitNode = distinctLimit(\n+                planBuilder,\n+                ImmutableList.of(new VariableReferenceExpression(\"regionid\", BIGINT)),\n+                50L,\n+                tableScan(planBuilder, pinotTable, regionId));\n+        testPinotQuery(\n+                pinotConfig,\n+                distinctLimitNode,\n+                String.format(\"SELECT %s FROM realtimeOnly GROUP BY regionId %s 50\", getExpectedDistinctOutput(\"count(*)\", \"regionId\"), getGroupByLimitKey()),\n+                defaultSessionHolder,\n+                ImmutableMap.of());\n+\n+        planBuilder = createPlanBuilder(defaultSessionHolder);\n+        distinctLimitNode = distinctLimit(\n+                planBuilder,\n+                ImmutableList.of(\n+                        new VariableReferenceExpression(\"regionid\", BIGINT),\n+                        new VariableReferenceExpression(\"city\", VARCHAR)),\n+                50L,\n+                tableScan(planBuilder, pinotTable, regionId, city));\n+        testPinotQuery(\n+                pinotConfig,\n+                distinctLimitNode,\n+                String.format(\"SELECT %s FROM realtimeOnly GROUP BY regionId, city %s 50\", getExpectedDistinctOutput(\"count(*)\", \"regionId, city\"), getGroupByLimitKey()),\n+                defaultSessionHolder,\n+                ImmutableMap.of());\n+    }\n+\n+    protected String getExpectedDistinctOutput(String aggregation, String groupKeys)\n+    {\n+        return aggregation;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQwMjI1Mg=="}, "originalCommit": {"oid": "81e5af0b8332c342617bdbfc7f16420fa265d437"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDU2ODMzOnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMTozNjowNVrOG1KrTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzozODo1MFrOG1NjDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQwMjYzOQ==", "bodyText": "nit: !hasAggregations()", "url": "https://github.com/prestodb/presto/pull/14863#discussion_r458402639", "createdAt": "2020-07-21T21:36:05Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "diffHunk": "@@ -553,6 +558,27 @@ public PinotQueryGeneratorContext withVariablesInAggregation(Set<VariableReferen\n                 useSqlSyntax);\n     }\n \n+    public PinotQueryGeneratorContext withDistinctLimit(LinkedHashSet<VariableReferenceExpression> newGroupByColumns, long limit)\n+    {\n+        int intLimit = checkForValidLimit(limit);\n+        checkSupported(useSqlSyntax, \"DistinctLimit is only supported in SQL mode\");\n+        checkSupported(!hasLimit(), \"Limit already exists. Pinot doesn't support limit on top of another limit\");\n+        checkSupported(!hasGroupBy(), \"GroupBy already exists. Pinot doesn't support Distinct on top of another Group By\");\n+        checkSupported(aggregations == 0, \"Aggregation already exists. Pinot doesn't support Distinct Limit on top of Aggregation\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81e5af0b8332c342617bdbfc7f16420fa265d437"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0OTY3Nw==", "bodyText": "done.", "url": "https://github.com/prestodb/presto/pull/14863#discussion_r458449677", "createdAt": "2020-07-21T23:38:50Z", "author": {"login": "xiangfu0"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "diffHunk": "@@ -553,6 +558,27 @@ public PinotQueryGeneratorContext withVariablesInAggregation(Set<VariableReferen\n                 useSqlSyntax);\n     }\n \n+    public PinotQueryGeneratorContext withDistinctLimit(LinkedHashSet<VariableReferenceExpression> newGroupByColumns, long limit)\n+    {\n+        int intLimit = checkForValidLimit(limit);\n+        checkSupported(useSqlSyntax, \"DistinctLimit is only supported in SQL mode\");\n+        checkSupported(!hasLimit(), \"Limit already exists. Pinot doesn't support limit on top of another limit\");\n+        checkSupported(!hasGroupBy(), \"GroupBy already exists. Pinot doesn't support Distinct on top of another Group By\");\n+        checkSupported(aggregations == 0, \"Aggregation already exists. Pinot doesn't support Distinct Limit on top of Aggregation\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQwMjYzOQ=="}, "originalCommit": {"oid": "81e5af0b8332c342617bdbfc7f16420fa265d437"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTc4MTM2OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGenerator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDo0ODo0OVrOG18HZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwODo0NDoxMFrOG2BcIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIxMjY0Ng==", "bodyText": "Remove this else {. Just directly return", "url": "https://github.com/prestodb/presto/pull/14863#discussion_r459212646", "createdAt": "2020-07-23T04:48:49Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGenerator.java", "diffHunk": "@@ -516,5 +514,42 @@ public PinotQueryGeneratorContext visitTopN(TopNNode node, PinotQueryGeneratorCo\n             checkSupported(node.getStep().equals(TopNNode.Step.SINGLE), \"Can only push single logical topn in\");\n             return context.withTopN(getOrderingScheme(node), node.getCount()).withOutputColumns(node.getOutputVariables());\n         }\n+\n+        @Override\n+        public PinotQueryGeneratorContext visitDistinctLimit(DistinctLimitNode node, PinotQueryGeneratorContext context)\n+        {\n+            context = node.getSource().accept(this, context);\n+            requireNonNull(context, \"context is null\");\n+            checkSupported(!forbidBrokerQueries, \"Cannot push distinctLimit in segment mode\");\n+            LinkedHashSet<VariableReferenceExpression> groupByColumns = new LinkedHashSet<>(node.getDistinctVariables());\n+            if (!useSqlSyntax) {\n+                // Handling PQL by adding hidden expression: count(*)\n+                // E.g. `SELECT DISTINCT A, B FROM myTable LIMIT 10`\n+                // In Pql mode, the generated pql is `SELECT count(*) FROM myTable GROUP BY A, B LIMIT 10`.\n+                checkSupported(!context.hasAggregation(), \"Aggregation already exists. Pinot doesn't support DistinctLimit with existing Aggregation\");\n+                checkSupported(!context.hasGroupBy(), \"GroupBy already exists. Pinot doesn't support DistinctLimit with existing GroupBy\");\n+                Map<VariableReferenceExpression, Selection> newSelections = new HashMap<>(context.getSelections());\n+                LinkedHashSet<VariableReferenceExpression> newOutputs = new LinkedHashSet<>(groupByColumns);\n+                Set<VariableReferenceExpression> hiddenColumnSet = new HashSet<>();\n+                setHiddenField(newSelections, newOutputs, hiddenColumnSet);\n+                return context.withAggregation(newSelections, newOutputs, groupByColumns, 1, hiddenColumnSet).withLimit(node.getLimit());\n+            }\n+            else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc25ce127f36de908ed162afb4f4f8f4a004d0de"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIyODM3NA==", "bodyText": "Sorry @fx19880617 -- I made you add this else. But then @highker knows how \"well\" I have learnt Presto's style guide :-)\n\u00af\\_(\u30c4)_/\u00af", "url": "https://github.com/prestodb/presto/pull/14863#discussion_r459228374", "createdAt": "2020-07-23T05:56:54Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGenerator.java", "diffHunk": "@@ -516,5 +514,42 @@ public PinotQueryGeneratorContext visitTopN(TopNNode node, PinotQueryGeneratorCo\n             checkSupported(node.getStep().equals(TopNNode.Step.SINGLE), \"Can only push single logical topn in\");\n             return context.withTopN(getOrderingScheme(node), node.getCount()).withOutputColumns(node.getOutputVariables());\n         }\n+\n+        @Override\n+        public PinotQueryGeneratorContext visitDistinctLimit(DistinctLimitNode node, PinotQueryGeneratorContext context)\n+        {\n+            context = node.getSource().accept(this, context);\n+            requireNonNull(context, \"context is null\");\n+            checkSupported(!forbidBrokerQueries, \"Cannot push distinctLimit in segment mode\");\n+            LinkedHashSet<VariableReferenceExpression> groupByColumns = new LinkedHashSet<>(node.getDistinctVariables());\n+            if (!useSqlSyntax) {\n+                // Handling PQL by adding hidden expression: count(*)\n+                // E.g. `SELECT DISTINCT A, B FROM myTable LIMIT 10`\n+                // In Pql mode, the generated pql is `SELECT count(*) FROM myTable GROUP BY A, B LIMIT 10`.\n+                checkSupported(!context.hasAggregation(), \"Aggregation already exists. Pinot doesn't support DistinctLimit with existing Aggregation\");\n+                checkSupported(!context.hasGroupBy(), \"GroupBy already exists. Pinot doesn't support DistinctLimit with existing GroupBy\");\n+                Map<VariableReferenceExpression, Selection> newSelections = new HashMap<>(context.getSelections());\n+                LinkedHashSet<VariableReferenceExpression> newOutputs = new LinkedHashSet<>(groupByColumns);\n+                Set<VariableReferenceExpression> hiddenColumnSet = new HashSet<>();\n+                setHiddenField(newSelections, newOutputs, hiddenColumnSet);\n+                return context.withAggregation(newSelections, newOutputs, groupByColumns, 1, hiddenColumnSet).withLimit(node.getLimit());\n+            }\n+            else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIxMjY0Ng=="}, "originalCommit": {"oid": "bc25ce127f36de908ed162afb4f4f8f4a004d0de"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI5OTg3Mg==", "bodyText": "Updated :)", "url": "https://github.com/prestodb/presto/pull/14863#discussion_r459299872", "createdAt": "2020-07-23T08:44:10Z", "author": {"login": "xiangfu0"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGenerator.java", "diffHunk": "@@ -516,5 +514,42 @@ public PinotQueryGeneratorContext visitTopN(TopNNode node, PinotQueryGeneratorCo\n             checkSupported(node.getStep().equals(TopNNode.Step.SINGLE), \"Can only push single logical topn in\");\n             return context.withTopN(getOrderingScheme(node), node.getCount()).withOutputColumns(node.getOutputVariables());\n         }\n+\n+        @Override\n+        public PinotQueryGeneratorContext visitDistinctLimit(DistinctLimitNode node, PinotQueryGeneratorContext context)\n+        {\n+            context = node.getSource().accept(this, context);\n+            requireNonNull(context, \"context is null\");\n+            checkSupported(!forbidBrokerQueries, \"Cannot push distinctLimit in segment mode\");\n+            LinkedHashSet<VariableReferenceExpression> groupByColumns = new LinkedHashSet<>(node.getDistinctVariables());\n+            if (!useSqlSyntax) {\n+                // Handling PQL by adding hidden expression: count(*)\n+                // E.g. `SELECT DISTINCT A, B FROM myTable LIMIT 10`\n+                // In Pql mode, the generated pql is `SELECT count(*) FROM myTable GROUP BY A, B LIMIT 10`.\n+                checkSupported(!context.hasAggregation(), \"Aggregation already exists. Pinot doesn't support DistinctLimit with existing Aggregation\");\n+                checkSupported(!context.hasGroupBy(), \"GroupBy already exists. Pinot doesn't support DistinctLimit with existing GroupBy\");\n+                Map<VariableReferenceExpression, Selection> newSelections = new HashMap<>(context.getSelections());\n+                LinkedHashSet<VariableReferenceExpression> newOutputs = new LinkedHashSet<>(groupByColumns);\n+                Set<VariableReferenceExpression> hiddenColumnSet = new HashSet<>();\n+                setHiddenField(newSelections, newOutputs, hiddenColumnSet);\n+                return context.withAggregation(newSelections, newOutputs, groupByColumns, 1, hiddenColumnSet).withLimit(node.getLimit());\n+            }\n+            else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIxMjY0Ng=="}, "originalCommit": {"oid": "bc25ce127f36de908ed162afb4f4f8f4a004d0de"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2385, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}