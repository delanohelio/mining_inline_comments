{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4NzU1MzYx", "number": 14541, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMDo1Nzo0N1rOD9jOkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxOTozMDowNFrOEApNtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODY2ODk5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/rewrite/ShowQueriesRewrite.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMDo1Nzo0N1rOGXHQpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMDo1Nzo0N1rOGXHQpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg4OTM4MQ==", "bodyText": "Would predicate = node.getLikePattern.map(pattern -> new LikePredicate(...)) work?", "url": "https://github.com/prestodb/presto/pull/14541#discussion_r426889381", "createdAt": "2020-05-18T20:57:47Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/rewrite/ShowQueriesRewrite.java", "diffHunk": "@@ -629,20 +629,30 @@ protected Node visitShowFunctions(ShowFunctions node, Void context)\n                     .put(\"language\", \"Language\")\n                     .build();\n \n+            Optional<Expression> predicate = Optional.empty();\n+            Optional<String> likePattern = node.getLikePattern();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ec9b3788ce62c5d49b19a5953b2bdcaf796394a"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODY4NDI1OnYy", "diffSide": "RIGHT", "path": "presto-parser/src/main/java/com/facebook/presto/sql/SqlFormatter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMTowMzoxOFrOGXHaOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMTowMzoxOFrOGXHaOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg5MTgzMw==", "bodyText": "nit: () is unnecessary around value", "url": "https://github.com/prestodb/presto/pull/14541#discussion_r426891833", "createdAt": "2020-05-18T21:03:18Z", "author": {"login": "caithagoras"}, "path": "presto-parser/src/main/java/com/facebook/presto/sql/SqlFormatter.java", "diffHunk": "@@ -761,6 +761,14 @@ protected Void visitShowFunctions(ShowFunctions node, Integer context)\n         {\n             builder.append(\"SHOW FUNCTIONS\");\n \n+            node.getLikePattern().ifPresent((value) ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ec9b3788ce62c5d49b19a5953b2bdcaf796394a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODY4NDM2OnYy", "diffSide": "RIGHT", "path": "presto-parser/src/main/java/com/facebook/presto/sql/SqlFormatter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMTowMzoyMVrOGXHaSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMTowMzoyMVrOGXHaSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg5MTg1MQ==", "bodyText": "nit: () is unnecessary around value", "url": "https://github.com/prestodb/presto/pull/14541#discussion_r426891851", "createdAt": "2020-05-18T21:03:21Z", "author": {"login": "caithagoras"}, "path": "presto-parser/src/main/java/com/facebook/presto/sql/SqlFormatter.java", "diffHunk": "@@ -761,6 +761,14 @@ protected Void visitShowFunctions(ShowFunctions node, Integer context)\n         {\n             builder.append(\"SHOW FUNCTIONS\");\n \n+            node.getLikePattern().ifPresent((value) ->\n+                    builder.append(\" LIKE \")\n+                            .append(formatStringLiteral(value)));\n+\n+            node.getEscape().ifPresent((value) ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ec9b3788ce62c5d49b19a5953b2bdcaf796394a"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MTEwNzEwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/rewrite/ShowQueriesRewrite.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxOTozMDowNFrOGcDeIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxOTozMDowNFrOGcDeIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA3MDE3Nw==", "bodyText": "I would break this into multiple lines for readability.\nnode.getLikePattern().map(pattern -> new LikePredicate(\n    identifier(\"function_name\"),\n    new StringLiteral(pattern),\n    node.getEscape().map(StringLiteral::new))),", "url": "https://github.com/prestodb/presto/pull/14541#discussion_r432070177", "createdAt": "2020-05-28T19:30:04Z", "author": {"login": "caithagoras"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/rewrite/ShowQueriesRewrite.java", "diffHunk": "@@ -629,21 +629,12 @@ protected Node visitShowFunctions(ShowFunctions node, Void context)\n                     .put(\"language\", \"Language\")\n                     .build();\n \n-            Optional<Expression> predicate = Optional.empty();\n-            Optional<String> likePattern = node.getLikePattern();\n-            if (likePattern.isPresent()) {\n-                predicate = Optional.of(new LikePredicate(\n-                        identifier(\"function_name\"),\n-                        new StringLiteral(likePattern.get()),\n-                        node.getEscape().map(StringLiteral::new)));\n-            }\n-\n             return simpleQuery(\n                     selectAll(columns.entrySet().stream()\n                             .map(entry -> aliasedName(entry.getKey(), entry.getValue()))\n                             .collect(toImmutableList())),\n                     aliased(new Values(rows.build()), \"functions\", ImmutableList.copyOf(columns.keySet())),\n-                    predicate,\n+                    node.getLikePattern().map(pattern -> new LikePredicate(identifier(\"function_name\"), new StringLiteral(pattern), node.getEscape().map(StringLiteral::new))),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b2600df7b92851d979563a10ad1336d455eebe5"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2648, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}