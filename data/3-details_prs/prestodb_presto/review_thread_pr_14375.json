{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyMTA1ODQy", "number": 14375, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMzozNDoxMlrODytkaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMzo0Nzo0OFrODytvDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTAxOTkzOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/FilteringPageSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMzozNDoxMlrOGG6zhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMzozNDoxMlrOGG6zhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkwODEwMQ==", "bodyText": "move session.getSqlFunctionProperties() to its own line", "url": "https://github.com/prestodb/presto/pull/14375#discussion_r409908101", "createdAt": "2020-04-16T23:34:12Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/FilteringPageSource.java", "diffHunk": "@@ -119,7 +119,7 @@ public FilteringPageSource(\n         }\n         else {\n             RowExpression expression = replaceExpression(optimizedRemainingPredicate, variableToInput);\n-            this.filterFunction = new FilterFunction(session,\n+            this.filterFunction = new FilterFunction(session.getSqlFunctionProperties(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9c2afc5633e5e64a173b18ca931b7167e62eb3b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTAyOTkzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/BuiltInScalarFunctionImplementation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMzozODo1NlrOGG65Ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMzozODo1NlrOGG65Ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkwOTU4Ng==", "bodyText": "hasProperties; same for the stack var", "url": "https://github.com/prestodb/presto/pull/14375#discussion_r409909586", "createdAt": "2020-04-16T23:38:56Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/BuiltInScalarFunctionImplementation.java", "diffHunk": "@@ -131,13 +131,13 @@ public ScalarImplementationChoice(\n \n             List<Class<?>> parameterList = methodHandle.type().parameterList();\n             boolean hasSession = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9c2afc5633e5e64a173b18ca931b7167e62eb3b"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTA0NzE5OnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/com/facebook/presto/spi/function/SqlFunctionProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMzo0Nzo0OFrOGG7D4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMzo0Nzo0OFrOGG7D4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkxMjI5MA==", "bodyText": "requireNonNull", "url": "https://github.com/prestodb/presto/pull/14375#discussion_r409912290", "createdAt": "2020-04-16T23:47:48Z", "author": {"login": "highker"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/function/SqlFunctionProperties.java", "diffHunk": "@@ -26,19 +27,28 @@\n     private final TimeZoneKey timeZoneKey;\n     private final boolean legacyTimestamp;\n     private final boolean legacyMapSubscript;\n+    private final long sessionStartTime;\n+    private final Locale sessionLocale;\n+    private String sessionUser;\n \n     private SqlFunctionProperties(\n             boolean parseDecimalLiteralAsDouble,\n             boolean legacyRowFieldOrdinalAccessEnabled,\n             TimeZoneKey timeZoneKey,\n             boolean legacyTimestamp,\n-            boolean legacyMapSubscript)\n+            boolean legacyMapSubscript,\n+            long sessionStartTime,\n+            Locale sessionLocale,\n+            String sessionUser)\n     {\n         this.parseDecimalLiteralAsDouble = parseDecimalLiteralAsDouble;\n         this.legacyRowFieldOrdinalAccessEnabled = legacyRowFieldOrdinalAccessEnabled;\n         this.timeZoneKey = requireNonNull(timeZoneKey, \"timeZoneKey is null\");\n         this.legacyTimestamp = legacyTimestamp;\n         this.legacyMapSubscript = legacyMapSubscript;\n+        this.sessionStartTime = sessionStartTime;\n+        this.sessionLocale = sessionLocale;\n+        this.sessionUser = sessionUser;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c29b9cd85e4729b1106daabbf29654e644bfd3e"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2777, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}