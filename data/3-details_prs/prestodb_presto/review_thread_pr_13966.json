{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyOTA2MzA1", "number": 13966, "reviewThreads": {"totalCount": 64, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNjo0MDoyNVrODYkZSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwOTozODo1MlrODfehcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MDg4NzE1OnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/com/facebook/presto/spi/StandardErrorCode.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNjo0MDoyNVrOFegDWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNjo0MDoyNVrOFegDWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUyNjc0Ng==", "bodyText": "nit: What about SPLIT_SCHEDULE_STRATEGY_NOT_SUPPORTED. \"schedule\" itself is an umbrella word so might want to be more specific in error code :)", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r367526746", "createdAt": "2020-01-16T16:40:25Z", "author": {"login": "wenleix"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/StandardErrorCode.java", "diffHunk": "@@ -94,6 +94,7 @@\n     TOO_MANY_TASK_FAILED(0x0001_001B, INTERNAL_ERROR),\n     INDEX_LOADER_TIMEOUT(0x0001_001C, INTERNAL_ERROR),\n     EXCEEDED_TASK_UPDATE_SIZE_LIMIT(0x0001_001D, INTERNAL_ERROR),\n+    SCHEDULE_NOT_SUPPORTED(0x0001_001E, INTERNAL_ERROR),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d43ecc1c73d71dee01e35b2b4e2a04eab4ae3ac"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNTg3NTc2OnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/com/facebook/presto/spi/schedule/NodeSelectionStrategy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNToxMjozNVrOFlIR3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNToxMjozNVrOFlIR3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ3NzI3Nw==", "bodyText": "We should have the following enums: RANDOM, SOFT_AFFINITY, and HARD_AFFINITY", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r374477277", "createdAt": "2020-02-04T05:12:35Z", "author": {"login": "highker"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/schedule/NodeSelectionStrategy.java", "diffHunk": "@@ -0,0 +1,19 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.spi.schedule;\n+\n+public enum NodeSelectionStrategy\n+{\n+    AFFINITY", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6751a20a414f66e04a13b5077eac46a3abbc42b2"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNTg3NzExOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveClientConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNToxMzozM1rOFlISoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxOToyOToxM1rOFlgpvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ3NzQ3Mw==", "bodyText": "This shouldn't be a set; rather, it should just take the enum NodeSelectionStrategy", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r374477473", "createdAt": "2020-02-04T05:13:33Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveClientConfig.java", "diffHunk": "@@ -64,6 +70,7 @@\n     private int domainCompactionThreshold = 100;\n     private DataSize writerSortBufferSize = new DataSize(64, MEGABYTE);\n     private boolean forceLocalScheduling;\n+    private Set<NodeSelectionStrategy> supportedNodeSelectionStrategies = ImmutableSet.of();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6751a20a414f66e04a13b5077eac46a3abbc42b2"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg3NjYwNQ==", "bodyText": "@highker: By reading the name of the config, I think this is trying to represent what is supported by Hive connector, in which case a set seems reasonable. I might be wrong though.\nI'm actually a bit confused for this being a config. I think whether some node selection strategies are supported should be a property of a connector, rather than a configuration. Does this sound reasonable?", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r374876605", "createdAt": "2020-02-04T19:29:13Z", "author": {"login": "shixuan-fan"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveClientConfig.java", "diffHunk": "@@ -64,6 +70,7 @@\n     private int domainCompactionThreshold = 100;\n     private DataSize writerSortBufferSize = new DataSize(64, MEGABYTE);\n     private boolean forceLocalScheduling;\n+    private Set<NodeSelectionStrategy> supportedNodeSelectionStrategies = ImmutableSet.of();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ3NzQ3Mw=="}, "originalCommit": {"oid": "6751a20a414f66e04a13b5077eac46a3abbc42b2"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNTg3NzYxOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSessionProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNToxMzo1M1rOFlIS5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNToxMzo1M1rOFlIS5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ3NzU0MA==", "bodyText": "Same, this should just be the enum", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r374477540", "createdAt": "2020-02-04T05:13:53Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSessionProperties.java", "diffHunk": "@@ -438,6 +452,11 @@ public static boolean isForceLocalScheduling(ConnectorSession session)\n         return session.getProperty(FORCE_LOCAL_SCHEDULING, Boolean.class);\n     }\n \n+    public static Set<NodeSelectionStrategy> supportedNodeSelectionStrategies(ConnectorSession session)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6751a20a414f66e04a13b5077eac46a3abbc42b2"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNTg3OTYwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/NodeSchedulerConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNToxNTozNVrOFlIUHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNjozNDowMlrOFl-qUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ3Nzg1NQ==", "bodyText": "Remove the change in this file. Not useful.", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r374477855", "createdAt": "2020-02-04T05:15:35Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/NodeSchedulerConfig.java", "diffHunk": "@@ -30,11 +34,14 @@\n         public static final String BENCHMARK = \"benchmark\";\n     }\n \n+    private static final Logger log = Logger.get(NodeSchedulerConfig.class);\n+\n     private int minCandidates = 10;\n     private boolean includeCoordinator = true;\n     private int maxSplitsPerNode = 100;\n     private int maxPendingSplitsPerTask = 10;\n     private String networkTopology = NetworkTopologyType.LEGACY;\n+    private Optional<NodeSelectionStrategy> splitScheduleStrategy = Optional.empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6751a20a414f66e04a13b5077eac46a3abbc42b2"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM2ODI3NA==", "bodyText": "Agreed. This commit alone does not seem to be useful. Even if this is used later, we might as well merge with the other commit.", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r375368274", "createdAt": "2020-02-05T16:34:02Z", "author": {"login": "shixuan-fan"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/NodeSchedulerConfig.java", "diffHunk": "@@ -30,11 +34,14 @@\n         public static final String BENCHMARK = \"benchmark\";\n     }\n \n+    private static final Logger log = Logger.get(NodeSchedulerConfig.class);\n+\n     private int minCandidates = 10;\n     private boolean includeCoordinator = true;\n     private int maxSplitsPerNode = 100;\n     private int maxPendingSplitsPerTask = 10;\n     private String networkTopology = NetworkTopologyType.LEGACY;\n+    private Optional<NodeSelectionStrategy> splitScheduleStrategy = Optional.empty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ3Nzg1NQ=="}, "originalCommit": {"oid": "6751a20a414f66e04a13b5077eac46a3abbc42b2"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNTg4MTkxOnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/com/facebook/presto/spi/ConnectorSplit.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNToxNjo0NFrOFlIVUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNjozOTo0MlrOFl-30A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ3ODE2Mw==", "bodyText": "default NodeSelectionStrategy getNodeSelectionStrategy()\n{\n    return RANDOM;\n}\nActually, having a default interface here is bad. Let's manually implement each of them for every connector.", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r374478163", "createdAt": "2020-02-04T05:16:44Z", "author": {"login": "highker"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/ConnectorSplit.java", "diffHunk": "@@ -22,4 +29,14 @@\n     List<HostAddress> getAddresses();\n \n     Object getInfo();\n+\n+    default Set<NodeSelectionStrategy> supportedScheduleStrategies()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6751a20a414f66e04a13b5077eac46a3abbc42b2"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM3MTcyOA==", "bodyText": "From another perspective, having a default interface would be less disruptive for other private connector. However, given that we are also making other substantial changes to this interface (including removing methods), this is going to be disruptive any way, so I don't have a strong opinion either way.", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r375371728", "createdAt": "2020-02-05T16:39:42Z", "author": {"login": "shixuan-fan"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/ConnectorSplit.java", "diffHunk": "@@ -22,4 +29,14 @@\n     List<HostAddress> getAddresses();\n \n     Object getInfo();\n+\n+    default Set<NodeSelectionStrategy> supportedScheduleStrategies()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ3ODE2Mw=="}, "originalCommit": {"oid": "6751a20a414f66e04a13b5077eac46a3abbc42b2"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNTg4NTU2OnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/com/facebook/presto/spi/ConnectorSplit.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNToxOTo0M1rOFlIXiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNToxOTo0M1rOFlIXiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ3ODcyOA==", "bodyText": "/**\n * Provide a list of preferred nodes for scheduler to pick.\n * Empty list indicates no preference.\n * The scheduler will respect the preference is the strategy is `HARD_AFFINITY`.\n * Otherwise, the scheduler will prioritize the provided nodes;\n * but there is no guarantee that the scheduler will pick them if the provided nodes are busy.\n */\ndefault List<HostAddress> getPreferredNodes(List<HostAddress> candidates)\n{\n    return ImmutableList.of();\n}\nAlso, having a default interface here is bad. Let's implement it for every connector.", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r374478728", "createdAt": "2020-02-04T05:19:43Z", "author": {"login": "highker"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/ConnectorSplit.java", "diffHunk": "@@ -22,4 +29,14 @@\n     List<HostAddress> getAddresses();\n \n     Object getInfo();\n+\n+    default Set<NodeSelectionStrategy> supportedScheduleStrategies()\n+    {\n+        return Collections.unmodifiableSet(new HashSet<>());\n+    }\n+\n+    default int getAffinityIdentifier()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6751a20a414f66e04a13b5077eac46a3abbc42b2"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNTg4NjcxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/HashAffinityNodeSelection.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNToyMDoyOFrOFlIYLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNToyMDoyOFrOFlIYLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ3ODg5Mw==", "bodyText": "Rather than doing the compute here, move it to hive connector. Check my comment below.", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r374478893", "createdAt": "2020-02-04T05:20:28Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/HashAffinityNodeSelection.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.execution.scheduler.nodeSelection;\n+\n+import com.facebook.presto.execution.scheduler.NodeMap;\n+import com.facebook.presto.metadata.InternalNode;\n+import com.facebook.presto.metadata.Split;\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.List;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.lang.Math.abs;\n+import static java.util.Comparator.comparing;\n+\n+public class HashAffinityNodeSelection\n+        implements NodeSelection\n+{\n+    private final NodeMap nodeMap;\n+\n+    public HashAffinityNodeSelection(NodeMap nodeMap)\n+    {\n+        this.nodeMap = nodeMap;\n+    }\n+\n+    @Override\n+    public List<InternalNode> pickNodes(Split split)\n+    {\n+        List<InternalNode> nodes = sortedNodes();\n+        return ImmutableList.of(nodes.get(abs(split.getAffinityIdentifier() % nodes.size())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6751a20a414f66e04a13b5077eac46a3abbc42b2"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNTg4OTI4OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplit.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNToyMjozMlrOFlIZ1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNzo0MjowOFrOFmBAGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ3OTMxOQ==", "bodyText": "public List<HostAddress> getPreferredNodes(List<HostAddress> candidates)\n{\n    if (getNodeSelectionStrategy() == SOFT_AFFINITY) {\n        return ImmutableList.of(candidates.get(abs(path.hashCode() % candidates.size())), ... /* secondary hashing */);\n    }\n    if (getNodeSelectionStrategy() == RANDOM || getNodeSelectionStrategy() == HARD_AFFINITY) {\n        // although we could return `candidates`,\n        // this interface is meant to hint the scheduler what is preferred\n        return addresses;\n    }\n    throw ....\n}\ntwo hash functions should be good enough. cc: @shixuan-fan\nAlso, we might need to replace the input List<HostAddress> candidates with some hints like PriorityQueue<HostAddress> candidates to indicate that the input is sorted. That has a downside; so maybe a List is good enough.", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r374479319", "createdAt": "2020-02-04T05:22:32Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplit.java", "diffHunk": "@@ -226,6 +239,12 @@ public boolean isS3SelectPushdownEnabled()\n         return extraFileInfo;\n     }\n \n+    @Override\n+    public int getAffinityIdentifier()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6751a20a414f66e04a13b5077eac46a3abbc42b2"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM4NzkwMw==", "bodyText": "Yeah two hash function sounds reasonable.\nList seems better than PriorityQueue. If we want to indicate that candidates is sorted, we should probably rename the variable to sortedCandidates or orderedCandidates.\nA side question is that this interface kind of assumes that we would always pass in the all nodes. Would this conflict with the resource manager and multiple coordinator initiative? Should we consider making the interface align with it given the fact that we might not be able to get a full list of candidate nodes here? If that's the case, we probably need to know the total number of nodes, and the list of candidates (maybe they should be in a map?) should have associated integer ids. Maybe this is a bit overthinking and premature optimization, but want to think out loud in case this was missed.", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r375387903", "createdAt": "2020-02-05T17:06:55Z", "author": {"login": "shixuan-fan"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplit.java", "diffHunk": "@@ -226,6 +239,12 @@ public boolean isS3SelectPushdownEnabled()\n         return extraFileInfo;\n     }\n \n+    @Override\n+    public int getAffinityIdentifier()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ3OTMxOQ=="}, "originalCommit": {"oid": "6751a20a414f66e04a13b5077eac46a3abbc42b2"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQwNjYxOQ==", "bodyText": "That is a reasonable assumption. In the worst case, we might need to pass in an ordered map with all nodes as the keys and active/inactive as values.", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r375406619", "createdAt": "2020-02-05T17:42:08Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplit.java", "diffHunk": "@@ -226,6 +239,12 @@ public boolean isS3SelectPushdownEnabled()\n         return extraFileInfo;\n     }\n \n+    @Override\n+    public int getAffinityIdentifier()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ3OTMxOQ=="}, "originalCommit": {"oid": "6751a20a414f66e04a13b5077eac46a3abbc42b2"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNTg5Mjc2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNToyNDo0MFrOFlIbvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNToyNDo0MFrOFlIbvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ3OTgwNw==", "bodyText": "The if/else shouldn't happen here. splits may contain splits from different connectors. Rather, make the decision in the following for (Split split : splits) loop.", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r374479807", "createdAt": "2020-02-04T05:24:40Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "diffHunk": "@@ -111,18 +116,27 @@ public SplitPlacementResult computeAssignments(Set<Split> splits, List<RemoteTas\n         NodeMap nodeMap = this.nodeMap.get().get();\n         NodeAssignmentStats assignmentStats = new NodeAssignmentStats(nodeTaskMap, nodeMap, existingTasks);\n \n-        ResettableRandomizedIterator<InternalNode> randomCandidates = getRandomCandidates(maxTasksPerStage, nodeMap, existingTasks);\n+        NodeSelection nodeSelection;\n+        if (splits.size() > 0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6751a20a414f66e04a13b5077eac46a3abbc42b2"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNTg5ODkwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/HashAffinityNodeSelection.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNToyOTowNVrOFlIfQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNzoxMzo0MFrOFmAGJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ4MDcwNg==", "bodyText": "Sorting this on the fly is very inefficient. Do it once and save it", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r374480706", "createdAt": "2020-02-04T05:29:05Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/HashAffinityNodeSelection.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.execution.scheduler.nodeSelection;\n+\n+import com.facebook.presto.execution.scheduler.NodeMap;\n+import com.facebook.presto.metadata.InternalNode;\n+import com.facebook.presto.metadata.Split;\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.List;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.lang.Math.abs;\n+import static java.util.Comparator.comparing;\n+\n+public class HashAffinityNodeSelection\n+        implements NodeSelection\n+{\n+    private final NodeMap nodeMap;\n+\n+    public HashAffinityNodeSelection(NodeMap nodeMap)\n+    {\n+        this.nodeMap = nodeMap;\n+    }\n+\n+    @Override\n+    public List<InternalNode> pickNodes(Split split)\n+    {\n+        List<InternalNode> nodes = sortedNodes();\n+        return ImmutableList.of(nodes.get(abs(split.getAffinityIdentifier() % nodes.size())));\n+    }\n+\n+    private List<InternalNode> sortedNodes()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6751a20a414f66e04a13b5077eac46a3abbc42b2"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM5MTc4MQ==", "bodyText": "According to the comment in getRandomCandidates:\nnodes may sporadically disappear from the nodeMap if the announcement is delayed\n\nI'm not entirely sure if it's valid to save the sorted result here. Probably it should be handled in NodeMap.", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r375391781", "createdAt": "2020-02-05T17:13:40Z", "author": {"login": "shixuan-fan"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/HashAffinityNodeSelection.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.execution.scheduler.nodeSelection;\n+\n+import com.facebook.presto.execution.scheduler.NodeMap;\n+import com.facebook.presto.metadata.InternalNode;\n+import com.facebook.presto.metadata.Split;\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.List;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.lang.Math.abs;\n+import static java.util.Comparator.comparing;\n+\n+public class HashAffinityNodeSelection\n+        implements NodeSelection\n+{\n+    private final NodeMap nodeMap;\n+\n+    public HashAffinityNodeSelection(NodeMap nodeMap)\n+    {\n+        this.nodeMap = nodeMap;\n+    }\n+\n+    @Override\n+    public List<InternalNode> pickNodes(Split split)\n+    {\n+        List<InternalNode> nodes = sortedNodes();\n+        return ImmutableList.of(nodes.get(abs(split.getAffinityIdentifier() % nodes.size())));\n+    }\n+\n+    private List<InternalNode> sortedNodes()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ4MDcwNg=="}, "originalCommit": {"oid": "6751a20a414f66e04a13b5077eac46a3abbc42b2"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNTk0MjgyOnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/com/facebook/presto/spi/ConnectorSplit.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNjowMTowMFrOFlI5vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNjowMTowMFrOFlI5vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ4NzQ4NA==", "bodyText": "Remove isRemotelyAccessible interface; replace it with NodeSelectionStrategy = HARD_AFFINITY ;", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r374487484", "createdAt": "2020-02-04T06:01:00Z", "author": {"login": "highker"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/ConnectorSplit.java", "diffHunk": "@@ -13,7 +13,14 @@\n  */\n package com.facebook.presto.spi;\n \n+import com.facebook.presto.spi.schedule.NodeSelectionStrategy;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n import java.util.List;\n+import java.util.Set;\n+\n+import static com.facebook.presto.spi.StandardErrorCode.NODE_SELECTION_STATEGY_NOT_SUPPORTED;\n \n public interface ConnectorSplit", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6751a20a414f66e04a13b5077eac46a3abbc42b2"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNTk1MTAyOnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/com/facebook/presto/spi/ConnectorSplit.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNjowNjozM1rOFlI-iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNjowNjozM1rOFlI-iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ4ODcxMg==", "bodyText": "Remove this interface; replace this with getPreferredNodes", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r374488712", "createdAt": "2020-02-04T06:06:33Z", "author": {"login": "highker"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/ConnectorSplit.java", "diffHunk": "@@ -22,4 +29,14 @@\n     List<HostAddress> getAddresses();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6751a20a414f66e04a13b5077eac46a3abbc42b2"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNTk3NzMyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNjoyNjoxMFrOFlJOyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNzoxNDo0N1rOFmAItA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ5Mjg3Mg==", "bodyText": "if (split.getNodeSelectionStrategy() == HARD_AFFINITY) {\n    ....\n    // this is where you call getPreferredNodeIndices and only use the nodes returned\n}\nelse if (split.getNodeSelectionStrategy() == RANDOM) {\n    ...\n}\nelse if (split.getNodeSelectionStrategy() == SOFT_AFFINITY) {\n    ...\n    // this is where you call getPreferredNodeIndices;\n    // getPreferredNodeIndices should return a list of preferred nodes (primary node, second node, etc);\n    // but that is not enough; you need soft affinity; meaning if primary and second nodes are busy,\n    // always provide extra random nodes as backup.\n}\nelse {\n    throw\n}", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r374492872", "createdAt": "2020-02-04T06:26:10Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "diffHunk": "@@ -111,18 +116,27 @@ public SplitPlacementResult computeAssignments(Set<Split> splits, List<RemoteTas\n         NodeMap nodeMap = this.nodeMap.get().get();\n         NodeAssignmentStats assignmentStats = new NodeAssignmentStats(nodeTaskMap, nodeMap, existingTasks);\n \n-        ResettableRandomizedIterator<InternalNode> randomCandidates = getRandomCandidates(maxTasksPerStage, nodeMap, existingTasks);\n+        NodeSelection nodeSelection;\n+        if (splits.size() > 0\n+                && nodeSelectionStrategy.isPresent()\n+                && splits.iterator().next().isRemotelyAccessible()\n+                && splits.iterator().next().supportedScheduleStrategies().contains(nodeSelectionStrategy.get())\n+                && nodeSelectionStrategy.get() == NodeSelectionStrategy.AFFINITY) {\n+            nodeSelection = new HashAffinityNodeSelection(nodeMap);\n+        }\n+        else {\n+            nodeSelection = new RandomNodeSelection(nodeMap, includeCoordinator, minCandidates, maxTasksPerStage, existingTasks);\n+        }\n+\n         Set<InternalNode> blockedExactNodes = new HashSet<>();\n         boolean splitWaitingForAnyNode = false;\n         for (Split split : splits) {\n-            randomCandidates.reset();\n-\n             List<InternalNode> candidateNodes;\n             if (!split.isRemotelyAccessible()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6751a20a414f66e04a13b5077eac46a3abbc42b2"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM5MjQzNg==", "bodyText": "nit on @highker's suggestion, use switch statement instead.", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r375392436", "createdAt": "2020-02-05T17:14:47Z", "author": {"login": "shixuan-fan"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "diffHunk": "@@ -111,18 +116,27 @@ public SplitPlacementResult computeAssignments(Set<Split> splits, List<RemoteTas\n         NodeMap nodeMap = this.nodeMap.get().get();\n         NodeAssignmentStats assignmentStats = new NodeAssignmentStats(nodeTaskMap, nodeMap, existingTasks);\n \n-        ResettableRandomizedIterator<InternalNode> randomCandidates = getRandomCandidates(maxTasksPerStage, nodeMap, existingTasks);\n+        NodeSelection nodeSelection;\n+        if (splits.size() > 0\n+                && nodeSelectionStrategy.isPresent()\n+                && splits.iterator().next().isRemotelyAccessible()\n+                && splits.iterator().next().supportedScheduleStrategies().contains(nodeSelectionStrategy.get())\n+                && nodeSelectionStrategy.get() == NodeSelectionStrategy.AFFINITY) {\n+            nodeSelection = new HashAffinityNodeSelection(nodeMap);\n+        }\n+        else {\n+            nodeSelection = new RandomNodeSelection(nodeMap, includeCoordinator, minCandidates, maxTasksPerStage, existingTasks);\n+        }\n+\n         Set<InternalNode> blockedExactNodes = new HashSet<>();\n         boolean splitWaitingForAnyNode = false;\n         for (Split split : splits) {\n-            randomCandidates.reset();\n-\n             List<InternalNode> candidateNodes;\n             if (!split.isRemotelyAccessible()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ5Mjg3Mg=="}, "originalCommit": {"oid": "6751a20a414f66e04a13b5077eac46a3abbc42b2"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNTk4ODk5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/NodePartitioningManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNjozMzozM1rOFlJVzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNjozMzozM1rOFlJVzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ5NDY2OA==", "bodyText": "partitioningProvider.getNodeSelectionStrategy()", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r374494668", "createdAt": "2020-02-04T06:33:33Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/NodePartitioningManager.java", "diffHunk": "@@ -226,4 +224,30 @@ private ConnectorBucketNodeMap getConnectorBucketNodeMap(Session session, Partit\n         }\n         return distribution.build();\n     }\n+\n+    private static List<InternalNode> createAffinityBucketToNode(List<InternalNode> nodes, int bucketCount)\n+    {\n+        List<InternalNode> sortedNodes = nodes.stream()\n+                .sorted(comparing(InternalNode::getNodeIdentifier))\n+                .collect(toImmutableList());\n+        return Stream.generate(() -> sortedNodes).flatMap(List::stream).limit(bucketCount).collect(toImmutableList());\n+    }\n+\n+    private List<InternalNode> calculateBucketToNode(ConnectorBucketNodeMap connectorBucketNodeMap, PartitioningHandle partitioningHandle, Session session)\n+    {\n+        ConnectorId connectorId = partitioningHandle.getConnectorId()\n+                .orElseThrow(() -> new IllegalArgumentException(\"No connector ID for partitioning handle: \" + partitioningHandle));\n+\n+        ConnectorNodePartitioningProvider partitioningProvider = partitioningProviderManager.getPartitioningProvider(connectorId);\n+        Set<NodeSelectionStrategy> supportedNodeSelectionStrategies = partitioningProvider.listSupportedNodeSelectionStrategies(session.toConnectorSession(connectorId));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6751a20a414f66e04a13b5077eac46a3abbc42b2"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNTk5ODQ3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/NodePartitioningManager.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNjozOTowOFrOFlJbXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNzo0NDoxNVrOFmBEKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ5NjA5Mg==", "bodyText": "I was originally thinking how to deal with this; but this was already an issue for existing connectors with non-isRemoteAccessible like Raptor. So for SOFT_/HARD_AFFINITY case, we may use the old allNodes().\ncc: @wenleix @arhimondr @shixuan-fan", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r374496092", "createdAt": "2020-02-04T06:39:08Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/NodePartitioningManager.java", "diffHunk": "@@ -226,4 +224,30 @@ private ConnectorBucketNodeMap getConnectorBucketNodeMap(Session session, Partit\n         }\n         return distribution.build();\n     }\n+\n+    private static List<InternalNode> createAffinityBucketToNode(List<InternalNode> nodes, int bucketCount)\n+    {\n+        List<InternalNode> sortedNodes = nodes.stream()\n+                .sorted(comparing(InternalNode::getNodeIdentifier))\n+                .collect(toImmutableList());\n+        return Stream.generate(() -> sortedNodes).flatMap(List::stream).limit(bucketCount).collect(toImmutableList());\n+    }\n+\n+    private List<InternalNode> calculateBucketToNode(ConnectorBucketNodeMap connectorBucketNodeMap, PartitioningHandle partitioningHandle, Session session)\n+    {\n+        ConnectorId connectorId = partitioningHandle.getConnectorId()\n+                .orElseThrow(() -> new IllegalArgumentException(\"No connector ID for partitioning handle: \" + partitioningHandle));\n+\n+        ConnectorNodePartitioningProvider partitioningProvider = partitioningProviderManager.getPartitioningProvider(connectorId);\n+        Set<NodeSelectionStrategy> supportedNodeSelectionStrategies = partitioningProvider.listSupportedNodeSelectionStrategies(session.toConnectorSession(connectorId));\n+        Optional<NodeSelectionStrategy> nodeSelectionStrategy = nodeScheduler.getNodeSelectionStrategy();\n+        if (nodeSelectionStrategy.isPresent()\n+                && nodeSelectionStrategy.get() == NodeSelectionStrategy.AFFINITY\n+                && supportedNodeSelectionStrategies.contains(nodeSelectionStrategy.get())) {\n+            return createAffinityBucketToNode(nodeScheduler.createNodeSelector(connectorId).selectRandomNodes(getMaxTasksPerStage(session)), connectorBucketNodeMap.getBucketCount());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6751a20a414f66e04a13b5077eac46a3abbc42b2"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM5NTQzNg==", "bodyText": "I'm a bit confused. What do you mean by \"this\" in \"deal with this\"?", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r375395436", "createdAt": "2020-02-05T17:20:02Z", "author": {"login": "shixuan-fan"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/NodePartitioningManager.java", "diffHunk": "@@ -226,4 +224,30 @@ private ConnectorBucketNodeMap getConnectorBucketNodeMap(Session session, Partit\n         }\n         return distribution.build();\n     }\n+\n+    private static List<InternalNode> createAffinityBucketToNode(List<InternalNode> nodes, int bucketCount)\n+    {\n+        List<InternalNode> sortedNodes = nodes.stream()\n+                .sorted(comparing(InternalNode::getNodeIdentifier))\n+                .collect(toImmutableList());\n+        return Stream.generate(() -> sortedNodes).flatMap(List::stream).limit(bucketCount).collect(toImmutableList());\n+    }\n+\n+    private List<InternalNode> calculateBucketToNode(ConnectorBucketNodeMap connectorBucketNodeMap, PartitioningHandle partitioningHandle, Session session)\n+    {\n+        ConnectorId connectorId = partitioningHandle.getConnectorId()\n+                .orElseThrow(() -> new IllegalArgumentException(\"No connector ID for partitioning handle: \" + partitioningHandle));\n+\n+        ConnectorNodePartitioningProvider partitioningProvider = partitioningProviderManager.getPartitioningProvider(connectorId);\n+        Set<NodeSelectionStrategy> supportedNodeSelectionStrategies = partitioningProvider.listSupportedNodeSelectionStrategies(session.toConnectorSession(connectorId));\n+        Optional<NodeSelectionStrategy> nodeSelectionStrategy = nodeScheduler.getNodeSelectionStrategy();\n+        if (nodeSelectionStrategy.isPresent()\n+                && nodeSelectionStrategy.get() == NodeSelectionStrategy.AFFINITY\n+                && supportedNodeSelectionStrategies.contains(nodeSelectionStrategy.get())) {\n+            return createAffinityBucketToNode(nodeScheduler.createNodeSelector(connectorId).selectRandomNodes(getMaxTasksPerStage(session)), connectorBucketNodeMap.getBucketCount());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ5NjA5Mg=="}, "originalCommit": {"oid": "6751a20a414f66e04a13b5077eac46a3abbc42b2"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQwNzY1OA==", "bodyText": "I mean max task per stage for nodes picking.", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r375407658", "createdAt": "2020-02-05T17:44:15Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/NodePartitioningManager.java", "diffHunk": "@@ -226,4 +224,30 @@ private ConnectorBucketNodeMap getConnectorBucketNodeMap(Session session, Partit\n         }\n         return distribution.build();\n     }\n+\n+    private static List<InternalNode> createAffinityBucketToNode(List<InternalNode> nodes, int bucketCount)\n+    {\n+        List<InternalNode> sortedNodes = nodes.stream()\n+                .sorted(comparing(InternalNode::getNodeIdentifier))\n+                .collect(toImmutableList());\n+        return Stream.generate(() -> sortedNodes).flatMap(List::stream).limit(bucketCount).collect(toImmutableList());\n+    }\n+\n+    private List<InternalNode> calculateBucketToNode(ConnectorBucketNodeMap connectorBucketNodeMap, PartitioningHandle partitioningHandle, Session session)\n+    {\n+        ConnectorId connectorId = partitioningHandle.getConnectorId()\n+                .orElseThrow(() -> new IllegalArgumentException(\"No connector ID for partitioning handle: \" + partitioningHandle));\n+\n+        ConnectorNodePartitioningProvider partitioningProvider = partitioningProviderManager.getPartitioningProvider(connectorId);\n+        Set<NodeSelectionStrategy> supportedNodeSelectionStrategies = partitioningProvider.listSupportedNodeSelectionStrategies(session.toConnectorSession(connectorId));\n+        Optional<NodeSelectionStrategy> nodeSelectionStrategy = nodeScheduler.getNodeSelectionStrategy();\n+        if (nodeSelectionStrategy.isPresent()\n+                && nodeSelectionStrategy.get() == NodeSelectionStrategy.AFFINITY\n+                && supportedNodeSelectionStrategies.contains(nodeSelectionStrategy.get())) {\n+            return createAffinityBucketToNode(nodeScheduler.createNodeSelector(connectorId).selectRandomNodes(getMaxTasksPerStage(session)), connectorBucketNodeMap.getBucketCount());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ5NjA5Mg=="}, "originalCommit": {"oid": "6751a20a414f66e04a13b5077eac46a3abbc42b2"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxODM5NjY4OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveClientConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxOToyNTo1NlrOFlgjKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxOToyNTo1NlrOFlgjKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg3NDkyMA==", "bodyText": "Having a logger in config class feels kinda weird to me, should we just fail?", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r374874920", "createdAt": "2020-02-04T19:25:56Z", "author": {"login": "shixuan-fan"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveClientConfig.java", "diffHunk": "@@ -49,6 +54,7 @@\n         \"hive.optimized-reader.enabled\"})\n public class HiveClientConfig\n {\n+    private static final Logger log = Logger.get(HiveClientConfig.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "982da2a243b060670d5abf9c4d2f0ee3738d6745"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxODQxMTA0OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveClientConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxOTozMDozNlrOFlgsVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxOTozMDozNlrOFlgsVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg3NzI3MQ==", "bodyText": "nit: if this is still needed, maybe use a comma?", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r374877271", "createdAt": "2020-02-04T19:30:36Z", "author": {"login": "shixuan-fan"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveClientConfig.java", "diffHunk": "@@ -1266,4 +1285,24 @@ public HiveClientConfig setAdaptiveFilterReorderingEnabled(boolean adaptiveFilte\n         this.adaptiveFilterReorderingEnabled = adaptiveFilterReorderingEnabled;\n         return this;\n     }\n+\n+    static Set<NodeSelectionStrategy> convertToStrategiesSet(String supportedNodeSelectionStrategiesConfig)\n+    {\n+        Set<NodeSelectionStrategy> strategies = new HashSet<>();\n+        Splitter.on(\":\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "982da2a243b060670d5abf9c4d2f0ee3738d6745"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTUzNDU2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/NodeSchedulerConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNjozMjo1NVrOFl-ntg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNjozMjo1NVrOFl-ntg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM2NzYwNg==", "bodyText": "nit: You could directly use enum", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r375367606", "createdAt": "2020-02-05T16:32:55Z", "author": {"login": "shixuan-fan"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/NodeSchedulerConfig.java", "diffHunk": "@@ -49,6 +56,24 @@ public NodeSchedulerConfig setNetworkTopology(String networkTopology)\n         return this;\n     }\n \n+    @NotNull\n+    public Optional<NodeSelectionStrategy> getNodeSelectionStrategy()\n+    {\n+        return splitScheduleStrategy;\n+    }\n+\n+    @Config(\"node-scheduler.node-selection-strategy\")\n+    public NodeSchedulerConfig setNodeSelectionStrategy(String nodeSelectionStrategy)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a4ae023bdb4bc17bfd5b9591e7114455ac3bbf4"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTU2NzI3OnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/com/facebook/presto/spi/StandardErrorCode.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNjo0MTo0OFrOFl-8xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNjo0MTo0OFrOFl-8xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM3Mjk5Nw==", "bodyText": "Let's remove this. I don't think we should fail the query simply because node selection strategy is not supported.", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r375372997", "createdAt": "2020-02-05T16:41:48Z", "author": {"login": "shixuan-fan"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/StandardErrorCode.java", "diffHunk": "@@ -95,6 +95,7 @@\n     TOO_MANY_TASK_FAILED(0x0001_001B, INTERNAL_ERROR),\n     INDEX_LOADER_TIMEOUT(0x0001_001C, INTERNAL_ERROR),\n     EXCEEDED_TASK_UPDATE_SIZE_LIMIT(0x0001_001D, INTERNAL_ERROR),\n+    NODE_SELECTION_STATEGY_NOT_SUPPORTED(0x0001_001E, INTERNAL_ERROR),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3656f36301b176dd8e03acffd80a03bcd11160c5"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTY5Mjc1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNzoxNjoxM1rOFmAL0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNzoxNjoxM1rOFmAL0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM5MzIzMw==", "bodyText": "I was under the impression that we put logical operator at the end of the line rather than beginning of the line.", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r375393233", "createdAt": "2020-02-05T17:16:13Z", "author": {"login": "shixuan-fan"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "diffHunk": "@@ -116,18 +116,27 @@ public SplitPlacementResult computeAssignments(Set<Split> splits, List<RemoteTas\n         NodeMap nodeMap = this.nodeMap.get().get();\n         NodeAssignmentStats assignmentStats = new NodeAssignmentStats(nodeTaskMap, nodeMap, existingTasks);\n \n-        ResettableRandomizedIterator<InternalNode> randomCandidates = getRandomCandidates(maxTasksPerStage, nodeMap, existingTasks);\n+        NodeSelection nodeSelection;\n+        if (splits.size() > 0\n+                && nodeSelectionStrategy.isPresent()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0545fa19a5e547438c5434289f92c889431fa90"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNTMyMjY2OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveClientConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwODoxNjoyMFrOFoAGPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwODoxNjoyMFrOFoAGPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ4ODk1Nw==", "bodyText": "remove", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r377488957", "createdAt": "2020-02-11T08:16:20Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveClientConfig.java", "diffHunk": "@@ -49,6 +51,7 @@\n         \"hive.optimized-reader.enabled\"})\n public class HiveClientConfig\n {\n+    private static final Logger log = Logger.get(HiveClientConfig.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "913188ec5c836c825faa8fbc5cfd6a6aa93e80ff"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNTMyNDg3OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplit.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwODoxNzowOVrOFoAHfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxODo1MDoyN1rOFoU3WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ4OTI3Nw==", "bodyText": "Let's put two addresses here", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r377489277", "createdAt": "2020-02-11T08:17:09Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplit.java", "diffHunk": "@@ -166,12 +173,20 @@ public Storage getStorage()\n     }\n \n     @JsonProperty\n-    @Override\n     public List<HostAddress> getAddresses()\n     {\n         return addresses;\n     }\n \n+    @Override\n+    public List<HostAddress> getPreferredNodes(List<HostAddress> sortedCandidates)\n+    {\n+        if (getNodeSelectionStrategy() == SOFT_AFFINITY) {\n+            return ImmutableList.of(sortedCandidates.get(abs(path.hashCode() % sortedCandidates.size())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "913188ec5c836c825faa8fbc5cfd6a6aa93e80ff"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgyOTIwOA==", "bodyText": "sortedCandidates.get(abs((path.hashCode() + 1) % sortedCandidates.size())));\nAlso, consider the overflow when + 1", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r377829208", "createdAt": "2020-02-11T18:50:27Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplit.java", "diffHunk": "@@ -166,12 +173,20 @@ public Storage getStorage()\n     }\n \n     @JsonProperty\n-    @Override\n     public List<HostAddress> getAddresses()\n     {\n         return addresses;\n     }\n \n+    @Override\n+    public List<HostAddress> getPreferredNodes(List<HostAddress> sortedCandidates)\n+    {\n+        if (getNodeSelectionStrategy() == SOFT_AFFINITY) {\n+            return ImmutableList.of(sortedCandidates.get(abs(path.hashCode() % sortedCandidates.size())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ4OTI3Nw=="}, "originalCommit": {"oid": "913188ec5c836c825faa8fbc5cfd6a6aa93e80ff"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNTMyNzk3OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwODoxODowNVrOFoAJJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwODoxODowNVrOFoAJJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ4OTcwMA==", "bodyText": "hard code \"HARD_AFFINITY\"", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r377489700", "createdAt": "2020-02-11T08:18:05Z", "author": {"login": "highker"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientConfig.java", "diffHunk": "@@ -160,6 +162,7 @@ public void testExplicitPropertyMappings()\n                 .put(\"hive.max-open-sort-files\", \"333\")\n                 .put(\"hive.write-validation-threads\", \"11\")\n                 .put(\"hive.force-local-scheduling\", \"true\")\n+                .put(\"hive.node-selection-strategy\", NodeSelectionStrategy.HARD_AFFINITY.name())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "913188ec5c836c825faa8fbc5cfd6a6aa93e80ff"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNTMzMzA5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwODoyMDoxOVrOFoAMOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwODoyMDoxOVrOFoAMOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ5MDQ4OA==", "bodyText": "case NO_PREREFERENCE:\n    candidateNodes = randomNodeSelection.pickNodes(split);\ndefault:\n    throw .. // unsupported node selection strategy", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r377490488", "createdAt": "2020-02-11T08:20:19Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "diffHunk": "@@ -111,19 +114,22 @@ public SplitPlacementResult computeAssignments(Set<Split> splits, List<RemoteTas\n         NodeMap nodeMap = this.nodeMap.get().get();\n         NodeAssignmentStats assignmentStats = new NodeAssignmentStats(nodeTaskMap, nodeMap, existingTasks);\n \n-        ResettableRandomizedIterator<InternalNode> randomCandidates = getRandomCandidates(maxTasksPerStage, nodeMap, existingTasks);\n+        NodeSelection randomNodeSelection = new RandomNodeSelection(nodeMap, includeCoordinator, minCandidates, maxTasksPerStage, existingTasks);\n         Set<InternalNode> blockedExactNodes = new HashSet<>();\n         boolean splitWaitingForAnyNode = false;\n+        List<HostAddress> sortedCandidates = NodeSelector.sortedNodes(nodeMap);\n         for (Split split : splits) {\n-            randomCandidates.reset();\n-\n             List<InternalNode> candidateNodes;\n-            if (!split.isRemotelyAccessible()) {\n-                candidateNodes = selectExactNodes(nodeMap, split.getAddresses(), includeCoordinator);\n-            }\n-            else {\n-                candidateNodes = selectNodes(minCandidates, randomCandidates);\n+            switch (split.getNodeSelectionStrategy()) {\n+                case HARD_AFFINITY:\n+                    candidateNodes = selectExactNodes(nodeMap, split.getPreferredNodes(sortedCandidates), includeCoordinator);\n+                    break;\n+                case SOFT_AFFINITY:\n+                    candidateNodes = convertToInternalNode(nodeMap, split.getPreferredNodes(sortedCandidates));\n+                    break;\n+                default: candidateNodes = randomNodeSelection.pickNodes(split);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "913188ec5c836c825faa8fbc5cfd6a6aa93e80ff"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNTM0MTI1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwODoyMzozOVrOFoARFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwODoyMzozOVrOFoARFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ5MTczNQ==", "bodyText": "Need to concat a list of random nodes to the end. The logic below if (totalSplitCount < min && totalSplitCount < maxSplitsPerNode) { needs to be adjusted accordingly so that we always pick the first two nodes unless they are busy. Otherwise, just select one from the concat'ed random nodes.", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r377491735", "createdAt": "2020-02-11T08:23:39Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "diffHunk": "@@ -111,19 +114,22 @@ public SplitPlacementResult computeAssignments(Set<Split> splits, List<RemoteTas\n         NodeMap nodeMap = this.nodeMap.get().get();\n         NodeAssignmentStats assignmentStats = new NodeAssignmentStats(nodeTaskMap, nodeMap, existingTasks);\n \n-        ResettableRandomizedIterator<InternalNode> randomCandidates = getRandomCandidates(maxTasksPerStage, nodeMap, existingTasks);\n+        NodeSelection randomNodeSelection = new RandomNodeSelection(nodeMap, includeCoordinator, minCandidates, maxTasksPerStage, existingTasks);\n         Set<InternalNode> blockedExactNodes = new HashSet<>();\n         boolean splitWaitingForAnyNode = false;\n+        List<HostAddress> sortedCandidates = NodeSelector.sortedNodes(nodeMap);\n         for (Split split : splits) {\n-            randomCandidates.reset();\n-\n             List<InternalNode> candidateNodes;\n-            if (!split.isRemotelyAccessible()) {\n-                candidateNodes = selectExactNodes(nodeMap, split.getAddresses(), includeCoordinator);\n-            }\n-            else {\n-                candidateNodes = selectNodes(minCandidates, randomCandidates);\n+            switch (split.getNodeSelectionStrategy()) {\n+                case HARD_AFFINITY:\n+                    candidateNodes = selectExactNodes(nodeMap, split.getPreferredNodes(sortedCandidates), includeCoordinator);\n+                    break;\n+                case SOFT_AFFINITY:\n+                    candidateNodes = convertToInternalNode(nodeMap, split.getPreferredNodes(sortedCandidates));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "913188ec5c836c825faa8fbc5cfd6a6aa93e80ff"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNzQ3MTMxOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSessionProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxODo0NjowMVrOFoUtvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxODo0NjowMVrOFoUtvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgyNjc0OQ==", "bodyText": "\"select node selection strategy\"", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r377826749", "createdAt": "2020-02-11T18:46:01Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSessionProperties.java", "diffHunk": "@@ -134,6 +136,15 @@ public HiveSessionProperties(HiveClientConfig hiveClientConfig, OrcFileWriterCon\n                         \"Only schedule splits on workers colocated with data node\",\n                         hiveClientConfig.isForceLocalScheduling(),\n                         false),\n+                new PropertyMetadata<>(\n+                        NODE_SELECTION_STRATEGY,\n+                        \"Hive Connector supported node selection strategies\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "913188ec5c836c825faa8fbc5cfd6a6aa93e80ff"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNzQ5MTA5OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxODo1MTo0OFrOFoU6Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxODo1MTo0OFrOFoU6Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgyOTk1MQ==", "bodyText": "\"NO_PREFER\"", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r377829951", "createdAt": "2020-02-11T18:51:48Z", "author": {"login": "highker"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientConfig.java", "diffHunk": "@@ -56,6 +57,7 @@ public void testDefaults()\n                 .setDomainCompactionThreshold(100)\n                 .setWriterSortBufferSize(new DataSize(64, Unit.MEGABYTE))\n                 .setForceLocalScheduling(false)\n+                .setNodeSelectionStrategy(\"\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "913188ec5c836c825faa8fbc5cfd6a6aa93e80ff"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNzQ5MjE0OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/util/InternalHiveSplitFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxODo1MjowN1rOFoU60A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDoyMTo1NVrOFod68g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgzMDA5Ng==", "bodyText": "ask @shixuan-fan", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r377830096", "createdAt": "2020-02-11T18:52:07Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/util/InternalHiveSplitFactory.java", "diffHunk": "@@ -181,6 +185,7 @@ public InternalHiveSplitFactory(\n                 tableBucketNumber,\n                 splittable,\n                 forceLocalScheduling && allBlocksHaveRealAddress(blocks),\n+                (nodeSelectionStrategy == NodeSelectionStrategy.HARD_AFFINITY && !allBlocksHaveRealAddress(blocks)) ? NodeSelectionStrategy.NO_PREFERENCE : nodeSelectionStrategy,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "913188ec5c836c825faa8fbc5cfd6a6aa93e80ff"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk3NzU4Ng==", "bodyText": "allBlocksHaveRealAddress is used mainly to distinguish localhost cases. I don't think it has production impact but might break some tests and local testing environment. Yet this was introduced before my time so I cannot say for sure.", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r377977586", "createdAt": "2020-02-12T00:21:55Z", "author": {"login": "shixuan-fan"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/util/InternalHiveSplitFactory.java", "diffHunk": "@@ -181,6 +185,7 @@ public InternalHiveSplitFactory(\n                 tableBucketNumber,\n                 splittable,\n                 forceLocalScheduling && allBlocksHaveRealAddress(blocks),\n+                (nodeSelectionStrategy == NodeSelectionStrategy.HARD_AFFINITY && !allBlocksHaveRealAddress(blocks)) ? NodeSelectionStrategy.NO_PREFERENCE : nodeSelectionStrategy,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgzMDA5Ng=="}, "originalCommit": {"oid": "913188ec5c836c825faa8fbc5cfd6a6aa93e80ff"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNzQ5ODU3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/NodeSelection.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxODo1Mzo1MFrOFoU-tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxODo1Mzo1MFrOFoU-tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgzMTA5NQ==", "bodyText": "add a javadoc", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r377831095", "createdAt": "2020-02-11T18:53:50Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/NodeSelection.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.execution.scheduler.nodeSelection;\n+\n+import com.facebook.presto.metadata.InternalNode;\n+import com.facebook.presto.metadata.Split;\n+\n+import java.util.List;\n+\n+public interface NodeSelection\n+{\n+    List<InternalNode> pickNodes(Split split);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "913188ec5c836c825faa8fbc5cfd6a6aa93e80ff"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNzUwMTI1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/NodeSelector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxODo1NDozNlrOFoVASA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxODo1NDozNlrOFoVASA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgzMTQ5Ng==", "bodyText": "InternalNode::getHostAndPort", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r377831496", "createdAt": "2020-02-11T18:54:36Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/NodeSelector.java", "diffHunk": "@@ -55,4 +62,11 @@\n      * to reattempt scheduling of this batch of splits, if some of them could not be scheduled.\n      */\n     SplitPlacementResult computeAssignments(Set<Split> splits, List<RemoteTask> existingTasks, BucketNodeMap bucketNodeMap);\n+\n+    static List<HostAddress> sortedNodes(NodeMap nodeMap)\n+    {\n+        return nodeMap.getNodesByHostAndPort().values().stream()\n+                .sorted(comparing(InternalNode::getNodeIdentifier)).map(node -> node.getHostAndPort())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "913188ec5c836c825faa8fbc5cfd6a6aa93e80ff"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNzUwOTU4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/RandomNodeSelection.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxODo1Njo0OFrOFoVFQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxODo1Nzo0MFrOFoVHIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgzMjc3MA==", "bodyText": "this.", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r377832770", "createdAt": "2020-02-11T18:56:48Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/RandomNodeSelection.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.execution.scheduler.nodeSelection;\n+\n+import com.facebook.presto.execution.RemoteTask;\n+import com.facebook.presto.execution.scheduler.NodeMap;\n+import com.facebook.presto.execution.scheduler.ResettableRandomizedIterator;\n+import com.facebook.presto.metadata.InternalNode;\n+import com.facebook.presto.metadata.Split;\n+\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static com.facebook.presto.execution.scheduler.NodeScheduler.randomizedNodes;\n+import static com.facebook.presto.execution.scheduler.NodeScheduler.selectNodes;\n+import static com.google.common.base.Verify.verify;\n+import static com.google.common.collect.Sets.newHashSet;\n+import static java.util.stream.Collectors.toList;\n+\n+public class RandomNodeSelection\n+        implements NodeSelection\n+{\n+    private final NodeMap nodeMap;\n+    private final boolean includeCoordinator;\n+    private final int minCandidates;\n+\n+    private ResettableRandomizedIterator<InternalNode> randomCandidates;\n+\n+    public RandomNodeSelection(\n+            NodeMap nodeMap,\n+            boolean includeCoordinator,\n+            int minCandidates,\n+            int maxTasksPerStage,\n+            List<RemoteTask> existingTasks)\n+    {\n+        this.nodeMap = nodeMap;\n+        this.includeCoordinator = includeCoordinator;\n+        this.minCandidates = minCandidates;\n+        randomCandidates = getRandomCandidates(maxTasksPerStage, this.nodeMap, existingTasks);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "913188ec5c836c825faa8fbc5cfd6a6aa93e80ff"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgzMzI1MQ==", "bodyText": "requireNonNull for nodeMap and existingTasks", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r377833251", "createdAt": "2020-02-11T18:57:40Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/RandomNodeSelection.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.execution.scheduler.nodeSelection;\n+\n+import com.facebook.presto.execution.RemoteTask;\n+import com.facebook.presto.execution.scheduler.NodeMap;\n+import com.facebook.presto.execution.scheduler.ResettableRandomizedIterator;\n+import com.facebook.presto.metadata.InternalNode;\n+import com.facebook.presto.metadata.Split;\n+\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static com.facebook.presto.execution.scheduler.NodeScheduler.randomizedNodes;\n+import static com.facebook.presto.execution.scheduler.NodeScheduler.selectNodes;\n+import static com.google.common.base.Verify.verify;\n+import static com.google.common.collect.Sets.newHashSet;\n+import static java.util.stream.Collectors.toList;\n+\n+public class RandomNodeSelection\n+        implements NodeSelection\n+{\n+    private final NodeMap nodeMap;\n+    private final boolean includeCoordinator;\n+    private final int minCandidates;\n+\n+    private ResettableRandomizedIterator<InternalNode> randomCandidates;\n+\n+    public RandomNodeSelection(\n+            NodeMap nodeMap,\n+            boolean includeCoordinator,\n+            int minCandidates,\n+            int maxTasksPerStage,\n+            List<RemoteTask> existingTasks)\n+    {\n+        this.nodeMap = nodeMap;\n+        this.includeCoordinator = includeCoordinator;\n+        this.minCandidates = minCandidates;\n+        randomCandidates = getRandomCandidates(maxTasksPerStage, this.nodeMap, existingTasks);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgzMjc3MA=="}, "originalCommit": {"oid": "913188ec5c836c825faa8fbc5cfd6a6aa93e80ff"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNzUxMDY2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/RandomNodeSelection.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxODo1NzowNFrOFoVF6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxODo1NzowNFrOFoVF6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgzMjkzOQ==", "bodyText": "local variable", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r377832939", "createdAt": "2020-02-11T18:57:04Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/RandomNodeSelection.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.execution.scheduler.nodeSelection;\n+\n+import com.facebook.presto.execution.RemoteTask;\n+import com.facebook.presto.execution.scheduler.NodeMap;\n+import com.facebook.presto.execution.scheduler.ResettableRandomizedIterator;\n+import com.facebook.presto.metadata.InternalNode;\n+import com.facebook.presto.metadata.Split;\n+\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static com.facebook.presto.execution.scheduler.NodeScheduler.randomizedNodes;\n+import static com.facebook.presto.execution.scheduler.NodeScheduler.selectNodes;\n+import static com.google.common.base.Verify.verify;\n+import static com.google.common.collect.Sets.newHashSet;\n+import static java.util.stream.Collectors.toList;\n+\n+public class RandomNodeSelection\n+        implements NodeSelection\n+{\n+    private final NodeMap nodeMap;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "913188ec5c836c825faa8fbc5cfd6a6aa93e80ff"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNzUxMzU4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/RandomNodeSelection.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxODo1ODowMFrOFoVHzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxODo1ODowMFrOFoVHzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgzMzQyMQ==", "bodyText": "oneline", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r377833421", "createdAt": "2020-02-11T18:58:00Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/RandomNodeSelection.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.execution.scheduler.nodeSelection;\n+\n+import com.facebook.presto.execution.RemoteTask;\n+import com.facebook.presto.execution.scheduler.NodeMap;\n+import com.facebook.presto.execution.scheduler.ResettableRandomizedIterator;\n+import com.facebook.presto.metadata.InternalNode;\n+import com.facebook.presto.metadata.Split;\n+\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static com.facebook.presto.execution.scheduler.NodeScheduler.randomizedNodes;\n+import static com.facebook.presto.execution.scheduler.NodeScheduler.selectNodes;\n+import static com.google.common.base.Verify.verify;\n+import static com.google.common.collect.Sets.newHashSet;\n+import static java.util.stream.Collectors.toList;\n+\n+public class RandomNodeSelection\n+        implements NodeSelection\n+{\n+    private final NodeMap nodeMap;\n+    private final boolean includeCoordinator;\n+    private final int minCandidates;\n+\n+    private ResettableRandomizedIterator<InternalNode> randomCandidates;\n+\n+    public RandomNodeSelection(\n+            NodeMap nodeMap,\n+            boolean includeCoordinator,\n+            int minCandidates,\n+            int maxTasksPerStage,\n+            List<RemoteTask> existingTasks)\n+    {\n+        this.nodeMap = nodeMap;\n+        this.includeCoordinator = includeCoordinator;\n+        this.minCandidates = minCandidates;\n+        randomCandidates = getRandomCandidates(maxTasksPerStage, this.nodeMap, existingTasks);\n+    }\n+\n+    @Override\n+    public List<InternalNode> pickNodes(Split split)\n+    {\n+        randomCandidates.reset();\n+        return selectNodes(minCandidates, randomCandidates);\n+    }\n+\n+    private ResettableRandomizedIterator<InternalNode> getRandomCandidates(int limit, NodeMap nodeMap, List<RemoteTask> existingTasks)\n+    {\n+        List<InternalNode> existingNodes = existingTasks.stream()\n+                .map(remoteTask -> nodeMap.getNodesByNodeId().get(remoteTask.getNodeId()))\n+                // nodes may sporadically disappear from the nodeMap if the announcement is delayed\n+                .filter(Objects::nonNull)\n+                .collect(toList());\n+\n+        int alreadySelectedNodeCount = existingNodes.size();\n+        int nodeCount = nodeMap.getNodesByNodeId().size();\n+\n+        if (alreadySelectedNodeCount < limit && alreadySelectedNodeCount < nodeCount) {\n+            List<InternalNode> moreNodes =\n+                    selectNodes(limit - alreadySelectedNodeCount, randomizedNodes(nodeMap, includeCoordinator, newHashSet(existingNodes)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "913188ec5c836c825faa8fbc5cfd6a6aa93e80ff"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNzUxNjIwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxODo1ODo1MFrOFoVJjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDoyNjo1N1rOFoeArg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgzMzg2OQ==", "bodyText": "chat with @shixuan-fan to see how to avoid sorting if we know we don't need soft affinity", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r377833869", "createdAt": "2020-02-11T18:58:50Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "diffHunk": "@@ -111,19 +114,22 @@ public SplitPlacementResult computeAssignments(Set<Split> splits, List<RemoteTas\n         NodeMap nodeMap = this.nodeMap.get().get();\n         NodeAssignmentStats assignmentStats = new NodeAssignmentStats(nodeTaskMap, nodeMap, existingTasks);\n \n-        ResettableRandomizedIterator<InternalNode> randomCandidates = getRandomCandidates(maxTasksPerStage, nodeMap, existingTasks);\n+        NodeSelection randomNodeSelection = new RandomNodeSelection(nodeMap, includeCoordinator, minCandidates, maxTasksPerStage, existingTasks);\n         Set<InternalNode> blockedExactNodes = new HashSet<>();\n         boolean splitWaitingForAnyNode = false;\n+        List<HostAddress> sortedCandidates = NodeSelector.sortedNodes(nodeMap);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "913188ec5c836c825faa8fbc5cfd6a6aa93e80ff"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk3OTA1NA==", "bodyText": "I guess we should just move this sorting inside case SOFT_AFFINITY: to avoid unnecessary sorting?", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r377979054", "createdAt": "2020-02-12T00:26:57Z", "author": {"login": "shixuan-fan"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "diffHunk": "@@ -111,19 +114,22 @@ public SplitPlacementResult computeAssignments(Set<Split> splits, List<RemoteTas\n         NodeMap nodeMap = this.nodeMap.get().get();\n         NodeAssignmentStats assignmentStats = new NodeAssignmentStats(nodeTaskMap, nodeMap, existingTasks);\n \n-        ResettableRandomizedIterator<InternalNode> randomCandidates = getRandomCandidates(maxTasksPerStage, nodeMap, existingTasks);\n+        NodeSelection randomNodeSelection = new RandomNodeSelection(nodeMap, includeCoordinator, minCandidates, maxTasksPerStage, existingTasks);\n         Set<InternalNode> blockedExactNodes = new HashSet<>();\n         boolean splitWaitingForAnyNode = false;\n+        List<HostAddress> sortedCandidates = NodeSelector.sortedNodes(nodeMap);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgzMzg2OQ=="}, "originalCommit": {"oid": "913188ec5c836c825faa8fbc5cfd6a6aa93e80ff"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNzUyMTIzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxOTowMDoyMVrOFoVM2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxOTowMDoyMVrOFoVM2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgzNDcxNQ==", "bodyText": "static", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r377834715", "createdAt": "2020-02-11T19:00:21Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "diffHunk": "@@ -174,29 +180,16 @@ else if (!splitWaitingForAnyNode) {\n         return new SplitPlacementResult(blocked, assignment);\n     }\n \n-    private ResettableRandomizedIterator<InternalNode> getRandomCandidates(int limit, NodeMap nodeMap, List<RemoteTask> existingTasks)\n-    {\n-        List<InternalNode> existingNodes = existingTasks.stream()\n-                .map(remoteTask -> nodeMap.getNodesByNodeId().get(remoteTask.getNodeId()))\n-                // nodes may sporadically disappear from the nodeMap if the announcement is delayed\n-                .filter(Objects::nonNull)\n-                .collect(toList());\n-\n-        int alreadySelectedNodeCount = existingNodes.size();\n-        int nodeCount = nodeMap.getNodesByNodeId().size();\n-\n-        if (alreadySelectedNodeCount < limit && alreadySelectedNodeCount < nodeCount) {\n-            List<InternalNode> moreNodes =\n-                    selectNodes(limit - alreadySelectedNodeCount, randomizedNodes(nodeMap, includeCoordinator, newHashSet(existingNodes)));\n-            existingNodes.addAll(moreNodes);\n-        }\n-        verify(existingNodes.stream().allMatch(Objects::nonNull), \"existingNodes list must not contain any nulls\");\n-        return new ResettableRandomizedIterator<>(existingNodes);\n-    }\n-\n     @Override\n     public SplitPlacementResult computeAssignments(Set<Split> splits, List<RemoteTask> existingTasks, BucketNodeMap bucketNodeMap)\n     {\n         return selectDistributionNodes(nodeMap.get().get(), nodeTaskMap, maxSplitsPerNode, maxPendingSplitsPerTask, splits, existingTasks, bucketNodeMap);\n     }\n+\n+    private List<InternalNode> convertToInternalNode(NodeMap nodeMap, List<HostAddress> preferredNodes)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "913188ec5c836c825faa8fbc5cfd6a6aa93e80ff"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNzUzNzU3OnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/com/facebook/presto/spi/ConnectorSplit.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxOTowNTowOFrOFoVXOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxOTowNTowOFrOFoVXOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgzNzM2OQ==", "bodyText": "connector split provides a list of preferred nodes for engine to pick from but not mandatory.", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r377837369", "createdAt": "2020-02-11T19:05:08Z", "author": {"login": "highker"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/ConnectorSplit.java", "diffHunk": "@@ -13,13 +13,28 @@\n  */\n package com.facebook.presto.spi;\n \n+import com.facebook.presto.spi.schedule.NodeSelectionStrategy;\n+\n import java.util.List;\n \n public interface ConnectorSplit\n {\n-    boolean isRemotelyAccessible();\n+    /**\n+     * Indicate the node affinity of a Split\n+     * 1. HARD_AFFINITY: Split is NOT remotely accessible and has to be on specific nodes\n+     * 2. SOFT_AFFINITY: Connector level cache", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "913188ec5c836c825faa8fbc5cfd6a6aa93e80ff"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODQxMTE3OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveClientConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDoxODoxOFrOFod2sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDoxODoxOFrOFod2sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk3NjQ5OA==", "bodyText": "nit: NodeSelectionStrategy nodeSelectionStrategy, and remove the String -> Enum handling below.", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r377976498", "createdAt": "2020-02-12T00:18:18Z", "author": {"login": "shixuan-fan"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveClientConfig.java", "diffHunk": "@@ -235,6 +239,20 @@ public HiveClientConfig setForceLocalScheduling(boolean forceLocalScheduling)\n         return this;\n     }\n \n+    public NodeSelectionStrategy getNodeSelectionStrategy()\n+    {\n+        return nodeSelectionStrategy;\n+    }\n+\n+    @Config(\"hive.node-selection-strategy\")\n+    public HiveClientConfig setNodeSelectionStrategy(String nodeSelectionStrategy)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "913188ec5c836c825faa8fbc5cfd6a6aa93e80ff"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODQxNjA3OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/util/InternalHiveSplitFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDoyMDo1NFrOFod5sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDoyMDo1NFrOFod5sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk3NzI2Ng==", "bodyText": "nit: static import enums in NodeSelectionStrategy.", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r377977266", "createdAt": "2020-02-12T00:20:54Z", "author": {"login": "shixuan-fan"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/util/InternalHiveSplitFactory.java", "diffHunk": "@@ -181,6 +185,7 @@ public InternalHiveSplitFactory(\n                 tableBucketNumber,\n                 splittable,\n                 forceLocalScheduling && allBlocksHaveRealAddress(blocks),\n+                (nodeSelectionStrategy == NodeSelectionStrategy.HARD_AFFINITY && !allBlocksHaveRealAddress(blocks)) ? NodeSelectionStrategy.NO_PREFERENCE : nodeSelectionStrategy,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "913188ec5c836c825faa8fbc5cfd6a6aa93e80ff"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODQyMDI2OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDoyMjo1OVrOFod8MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDoyMjo1OVrOFod8MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk3NzkwNA==", "bodyText": "static import HARD_AFFINITY, and remove .name() if changed signature according to previous comment.", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r377977904", "createdAt": "2020-02-12T00:22:59Z", "author": {"login": "shixuan-fan"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientConfig.java", "diffHunk": "@@ -230,6 +233,7 @@ public void testExplicitPropertyMappings()\n                 .setDomainCompactionThreshold(42)\n                 .setWriterSortBufferSize(new DataSize(13, Unit.MEGABYTE))\n                 .setForceLocalScheduling(true)\n+                .setNodeSelectionStrategy(NodeSelectionStrategy.HARD_AFFINITY.name())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "913188ec5c836c825faa8fbc5cfd6a6aa93e80ff"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODQyMTE2OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHivePageSink.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDoyMzoyM1rOFod8rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDoyMzoyM1rOFod8rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk3ODAyOA==", "bodyText": "static import?", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r377978028", "createdAt": "2020-02-12T00:23:23Z", "author": {"login": "shixuan-fan"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHivePageSink.java", "diffHunk": "@@ -236,6 +237,7 @@ private static ConnectorPageSource createPageSource(HiveTransactionHandle transa\n                 OptionalInt.empty(),\n                 OptionalInt.empty(),\n                 false,\n+                NodeSelectionStrategy.NO_PREFERENCE,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "913188ec5c836c825faa8fbc5cfd6a6aa93e80ff"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODQyMTMyOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveSessionProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDoyMzoyOVrOFod80A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDoyMzoyOVrOFod80A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk3ODA2NA==", "bodyText": "static import?", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r377978064", "createdAt": "2020-02-12T00:23:29Z", "author": {"login": "shixuan-fan"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveSessionProperties.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.spi.ConnectorSession;\n+import com.facebook.presto.spi.schedule.NodeSelectionStrategy;\n+import com.facebook.presto.testing.TestingConnectorSession;\n+import org.testng.annotations.Test;\n+\n+import static com.facebook.presto.hive.HiveSessionProperties.getNodeSelectionStrategy;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestHiveSessionProperties\n+{\n+    @Test\n+    public void testEmptyNodeSelectionStrategyConfig()\n+    {\n+        ConnectorSession connectorSession = new TestingConnectorSession(\n+                new HiveSessionProperties(\n+                        new HiveClientConfig(),\n+                        new OrcFileWriterConfig(),\n+                        new ParquetFileWriterConfig()).getSessionProperties());\n+        assertEquals(getNodeSelectionStrategy(connectorSession), NodeSelectionStrategy.NO_PREFERENCE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "913188ec5c836c825faa8fbc5cfd6a6aa93e80ff"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODQyMTUyOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveSplit.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDoyMzozN1rOFod88g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDoyMzozN1rOFod88g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk3ODA5OA==", "bodyText": "static import?", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r377978098", "createdAt": "2020-02-12T00:23:37Z", "author": {"login": "shixuan-fan"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveSplit.java", "diffHunk": "@@ -80,6 +81,7 @@ public void testJsonRoundTrip()\n                 OptionalInt.empty(),\n                 OptionalInt.empty(),\n                 true,\n+                NodeSelectionStrategy.NO_PREFERENCE,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "913188ec5c836c825faa8fbc5cfd6a6aa93e80ff"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODQyMTg5OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveSplitSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDoyMzo0N1rOFod9Jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDoyMzo0N1rOFod9Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk3ODE1MA==", "bodyText": "static import", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r377978150", "createdAt": "2020-02-12T00:23:47Z", "author": {"login": "shixuan-fan"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveSplitSource.java", "diffHunk": "@@ -427,6 +428,7 @@ private TestSplit(int id, OptionalInt bucketNumber)\n                     bucketNumber,\n                     true,\n                     false,\n+                    NodeSelectionStrategy.NO_PREFERENCE,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "913188ec5c836c825faa8fbc5cfd6a6aa93e80ff"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODQyMjE0OnYy", "diffSide": "RIGHT", "path": "presto-jmx/src/main/java/com/facebook/presto/connector/jmx/JmxSplit.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDoyMzo1NlrOFod9TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDoyMzo1NlrOFod9TQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk3ODE4OQ==", "bodyText": "static import", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r377978189", "createdAt": "2020-02-12T00:23:56Z", "author": {"login": "shixuan-fan"}, "path": "presto-jmx/src/main/java/com/facebook/presto/connector/jmx/JmxSplit.java", "diffHunk": "@@ -45,18 +46,23 @@ public JmxTableHandle getTableHandle()\n     }\n \n     @Override\n-    public boolean isRemotelyAccessible()\n+    public NodeSelectionStrategy getNodeSelectionStrategy()\n     {\n-        return false;\n+        return NodeSelectionStrategy.HARD_AFFINITY;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "913188ec5c836c825faa8fbc5cfd6a6aa93e80ff"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODQyMzAxOnYy", "diffSide": "RIGHT", "path": "presto-jmx/src/test/java/com/facebook/presto/connector/jmx/TestJmxSplitManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDoyNDoyNVrOFod94Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDoyNDoyNVrOFod94Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk3ODMzNw==", "bodyText": "Why do we need this casting?", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r377978337", "createdAt": "2020-02-12T00:24:25Z", "author": {"login": "shixuan-fan"}, "path": "presto-jmx/src/test/java/com/facebook/presto/connector/jmx/TestJmxSplitManager.java", "diffHunk": "@@ -111,8 +111,8 @@ public void testPredicatePushdown()\n             List<ConnectorSplit> allSplits = getAllSplits(splitSource);\n \n             assertEquals(allSplits.size(), 1);\n-            assertEquals(allSplits.get(0).getAddresses().size(), 1);\n-            assertEquals(allSplits.get(0).getAddresses().get(0).getHostText(), nodeIdentifier);\n+            assertEquals(((JmxSplit) allSplits.get(0)).getAddresses().size(), 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "913188ec5c836c825faa8fbc5cfd6a6aa93e80ff"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODQ0NTk1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDozNTo1MVrOFoeLXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMDo1NjoxMVrOFo-RTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4MTc5MQ==", "bodyText": "I think in HARD_AFFINITY situation, getPreferredNodes is not a good name because preferred indicates it is not mandatory.\nIn fact, nodeSelectionStrategy and preferredNodes are so coupled that I was thinking if we should return an object with a boolean and a list. The boolean would indicate whether the node list is a preference (best effort, for soft affinity) or requirement (for hard affinity). Then I think we probably don't even need to expose getNodeSelectionStrategy. WDYT? cc @highker", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r377981791", "createdAt": "2020-02-12T00:35:51Z", "author": {"login": "shixuan-fan"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "diffHunk": "@@ -111,19 +114,22 @@ public SplitPlacementResult computeAssignments(Set<Split> splits, List<RemoteTas\n         NodeMap nodeMap = this.nodeMap.get().get();\n         NodeAssignmentStats assignmentStats = new NodeAssignmentStats(nodeTaskMap, nodeMap, existingTasks);\n \n-        ResettableRandomizedIterator<InternalNode> randomCandidates = getRandomCandidates(maxTasksPerStage, nodeMap, existingTasks);\n+        NodeSelection randomNodeSelection = new RandomNodeSelection(nodeMap, includeCoordinator, minCandidates, maxTasksPerStage, existingTasks);\n         Set<InternalNode> blockedExactNodes = new HashSet<>();\n         boolean splitWaitingForAnyNode = false;\n+        List<HostAddress> sortedCandidates = NodeSelector.sortedNodes(nodeMap);\n         for (Split split : splits) {\n-            randomCandidates.reset();\n-\n             List<InternalNode> candidateNodes;\n-            if (!split.isRemotelyAccessible()) {\n-                candidateNodes = selectExactNodes(nodeMap, split.getAddresses(), includeCoordinator);\n-            }\n-            else {\n-                candidateNodes = selectNodes(minCandidates, randomCandidates);\n+            switch (split.getNodeSelectionStrategy()) {\n+                case HARD_AFFINITY:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "913188ec5c836c825faa8fbc5cfd6a6aa93e80ff"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUwNzU5OQ==", "bodyText": "I agree with a single interface can make things easier to understand. We can have two interfaces for this PR I guess and move to a unified interface in the next one.", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r378507599", "createdAt": "2020-02-12T20:56:11Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "diffHunk": "@@ -111,19 +114,22 @@ public SplitPlacementResult computeAssignments(Set<Split> splits, List<RemoteTas\n         NodeMap nodeMap = this.nodeMap.get().get();\n         NodeAssignmentStats assignmentStats = new NodeAssignmentStats(nodeTaskMap, nodeMap, existingTasks);\n \n-        ResettableRandomizedIterator<InternalNode> randomCandidates = getRandomCandidates(maxTasksPerStage, nodeMap, existingTasks);\n+        NodeSelection randomNodeSelection = new RandomNodeSelection(nodeMap, includeCoordinator, minCandidates, maxTasksPerStage, existingTasks);\n         Set<InternalNode> blockedExactNodes = new HashSet<>();\n         boolean splitWaitingForAnyNode = false;\n+        List<HostAddress> sortedCandidates = NodeSelector.sortedNodes(nodeMap);\n         for (Split split : splits) {\n-            randomCandidates.reset();\n-\n             List<InternalNode> candidateNodes;\n-            if (!split.isRemotelyAccessible()) {\n-                candidateNodes = selectExactNodes(nodeMap, split.getAddresses(), includeCoordinator);\n-            }\n-            else {\n-                candidateNodes = selectNodes(minCandidates, randomCandidates);\n+            switch (split.getNodeSelectionStrategy()) {\n+                case HARD_AFFINITY:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4MTc5MQ=="}, "originalCommit": {"oid": "913188ec5c836c825faa8fbc5cfd6a6aa93e80ff"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTc4Mzg0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMDo1NjozNFrOFo-SBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMDo1NjozNFrOFo-SBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUwNzc4MQ==", "bodyText": "+ split.getNodeSelectionStrategy()", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r378507781", "createdAt": "2020-02-12T20:56:34Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "diffHunk": "@@ -111,19 +116,30 @@ public SplitPlacementResult computeAssignments(Set<Split> splits, List<RemoteTas\n         NodeMap nodeMap = this.nodeMap.get().get();\n         NodeAssignmentStats assignmentStats = new NodeAssignmentStats(nodeTaskMap, nodeMap, existingTasks);\n \n-        ResettableRandomizedIterator<InternalNode> randomCandidates = getRandomCandidates(maxTasksPerStage, nodeMap, existingTasks);\n+        NodeSelection randomNodeSelection = new RandomNodeSelection(nodeMap, includeCoordinator, minCandidates, maxTasksPerStage, existingTasks);\n         Set<InternalNode> blockedExactNodes = new HashSet<>();\n         boolean splitWaitingForAnyNode = false;\n-        for (Split split : splits) {\n-            randomCandidates.reset();\n+        List<HostAddress> sortedCandidates = NodeSelector.sortedNodes(nodeMap);\n \n+        OptionalInt preferredNodeCount = OptionalInt.empty();\n+        for (Split split : splits) {\n             List<InternalNode> candidateNodes;\n-            if (!split.isRemotelyAccessible()) {\n-                candidateNodes = selectExactNodes(nodeMap, split.getAddresses(), includeCoordinator);\n-            }\n-            else {\n-                candidateNodes = selectNodes(minCandidates, randomCandidates);\n+            switch (split.getNodeSelectionStrategy()) {\n+                case HARD_AFFINITY:\n+                    candidateNodes = selectExactNodes(nodeMap, split.getPreferredNodes(sortedCandidates), includeCoordinator);\n+                    break;\n+                case SOFT_AFFINITY:\n+                    candidateNodes = convertToInternalNode(nodeMap, split.getPreferredNodes(sortedCandidates));\n+                    preferredNodeCount = OptionalInt.of(candidateNodes.size());\n+                    candidateNodes = new ImmutableList.Builder<InternalNode>().addAll(candidateNodes).addAll(randomNodeSelection.pickNodes(split)).build();\n+                    break;\n+                case NO_PREFERENCE:\n+                    candidateNodes = randomNodeSelection.pickNodes(split);\n+                    break;\n+                default:\n+                    throw new PrestoException(NODE_SELECTION_NOT_SUPPORTED, \"Unsupported node selection strategy\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e1b7ddea44894ef489968ad7e107110943416dc"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTc4NjExOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMDo1NzoxOVrOFo-Tcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMDo1NzoxOVrOFo-Tcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUwODE0Nw==", "bodyText": "Use ImmutableList.<InternalNode>builder()", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r378508147", "createdAt": "2020-02-12T20:57:19Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "diffHunk": "@@ -111,19 +116,30 @@ public SplitPlacementResult computeAssignments(Set<Split> splits, List<RemoteTas\n         NodeMap nodeMap = this.nodeMap.get().get();\n         NodeAssignmentStats assignmentStats = new NodeAssignmentStats(nodeTaskMap, nodeMap, existingTasks);\n \n-        ResettableRandomizedIterator<InternalNode> randomCandidates = getRandomCandidates(maxTasksPerStage, nodeMap, existingTasks);\n+        NodeSelection randomNodeSelection = new RandomNodeSelection(nodeMap, includeCoordinator, minCandidates, maxTasksPerStage, existingTasks);\n         Set<InternalNode> blockedExactNodes = new HashSet<>();\n         boolean splitWaitingForAnyNode = false;\n-        for (Split split : splits) {\n-            randomCandidates.reset();\n+        List<HostAddress> sortedCandidates = NodeSelector.sortedNodes(nodeMap);\n \n+        OptionalInt preferredNodeCount = OptionalInt.empty();\n+        for (Split split : splits) {\n             List<InternalNode> candidateNodes;\n-            if (!split.isRemotelyAccessible()) {\n-                candidateNodes = selectExactNodes(nodeMap, split.getAddresses(), includeCoordinator);\n-            }\n-            else {\n-                candidateNodes = selectNodes(minCandidates, randomCandidates);\n+            switch (split.getNodeSelectionStrategy()) {\n+                case HARD_AFFINITY:\n+                    candidateNodes = selectExactNodes(nodeMap, split.getPreferredNodes(sortedCandidates), includeCoordinator);\n+                    break;\n+                case SOFT_AFFINITY:\n+                    candidateNodes = convertToInternalNode(nodeMap, split.getPreferredNodes(sortedCandidates));\n+                    preferredNodeCount = OptionalInt.of(candidateNodes.size());\n+                    candidateNodes = new ImmutableList.Builder<InternalNode>().addAll(candidateNodes).addAll(randomNodeSelection.pickNodes(split)).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e1b7ddea44894ef489968ad7e107110943416dc"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTc4OTAyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMDo1ODoyM1rOFo-VXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMDo1ODoyM1rOFo-VXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUwODYzOQ==", "bodyText": "Add comment to explain what you try to achieve here.", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r378508639", "createdAt": "2020-02-12T20:58:23Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "diffHunk": "@@ -132,8 +148,13 @@ public SplitPlacementResult computeAssignments(Set<Split> splits, List<RemoteTas\n             InternalNode chosenNode = null;\n             int min = Integer.MAX_VALUE;\n \n-            for (InternalNode node : candidateNodes) {\n+            for (int i = 0; i < candidateNodes.size(); i++) {\n+                InternalNode node = candidateNodes.get(i);\n                 int totalSplitCount = assignmentStats.getTotalSplitCount(node);\n+                if (preferredNodeCount.isPresent() && i < preferredNodeCount.getAsInt() && totalSplitCount < maxSplitsPerNode) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e1b7ddea44894ef489968ad7e107110943416dc"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0Mjc3Nzk4OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplit.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNTo1MzowMFrOFpHxgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNTo1MzowMFrOFpHxgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY2MzI5Ng==", "bodyText": "Add a comment to explain the logic.\nAlso explain if path.hashCode() + 1 is safe or not: Integer.MAX_VALUE + 1 == Integer.MIN_VALUE\nAlso explain why these two nodes are always distinct, i.e., why they won't return the same node.", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r378663296", "createdAt": "2020-02-13T05:53:00Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplit.java", "diffHunk": "@@ -166,12 +172,20 @@ public Storage getStorage()\n     }\n \n     @JsonProperty\n-    @Override\n     public List<HostAddress> getAddresses()\n     {\n         return addresses;\n     }\n \n+    @Override\n+    public List<HostAddress> getPreferredNodes(List<HostAddress> sortedCandidates)\n+    {\n+        if (getNodeSelectionStrategy() == SOFT_AFFINITY) {\n+            return ImmutableList.of(sortedCandidates.get(path.hashCode() % sortedCandidates.size()), sortedCandidates.get((path.hashCode() + 1) % sortedCandidates.size()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5623cb75a0035dc65993c7bae9b4fd0597e2049e"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0Mjc4OTQyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/NodeSelector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNTo1OTo1NFrOFpH4Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNTo1OTo1NFrOFpH4Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY2NTAwMg==", "bodyText": "Move this to a util class NodeSelectionUtils", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r378665002", "createdAt": "2020-02-13T05:59:54Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/NodeSelector.java", "diffHunk": "@@ -55,4 +62,11 @@\n      * to reattempt scheduling of this batch of splits, if some of them could not be scheduled.\n      */\n     SplitPlacementResult computeAssignments(Set<Split> splits, List<RemoteTask> existingTasks, BucketNodeMap bucketNodeMap);\n+\n+    static List<HostAddress> sortedNodes(NodeMap nodeMap)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5623cb75a0035dc65993c7bae9b4fd0597e2049e"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0Mjc5NjQxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/RandomNodeSelection.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNjowNDoyMVrOFpH8aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNjowNDoyMVrOFpH8aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY2NjA4OQ==", "bodyText": "I don't see a need to make this abstract anymore. There is only one implementation.", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r378666089", "createdAt": "2020-02-13T06:04:21Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/RandomNodeSelection.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.execution.scheduler.nodeSelection;\n+\n+import com.facebook.presto.execution.RemoteTask;\n+import com.facebook.presto.execution.scheduler.NodeMap;\n+import com.facebook.presto.execution.scheduler.ResettableRandomizedIterator;\n+import com.facebook.presto.metadata.InternalNode;\n+import com.facebook.presto.metadata.Split;\n+\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static com.facebook.presto.execution.scheduler.NodeScheduler.randomizedNodes;\n+import static com.facebook.presto.execution.scheduler.NodeScheduler.selectNodes;\n+import static com.google.common.base.Verify.verify;\n+import static com.google.common.collect.Sets.newHashSet;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.stream.Collectors.toList;\n+\n+public class RandomNodeSelection\n+        implements NodeSelection", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5623cb75a0035dc65993c7bae9b4fd0597e2049e"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0Mjc5ODk2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNjowNTo1MFrOFpH92w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNzoyODo1N1rOFpJYPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY2NjQ1OQ==", "bodyText": "Sort only if if (splits.stream().anyMatch(split -> split.getNodeSelectionStrategy() != NO_PREFERENCE))", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r378666459", "createdAt": "2020-02-13T06:05:50Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "diffHunk": "@@ -111,19 +117,30 @@ public SplitPlacementResult computeAssignments(Set<Split> splits, List<RemoteTas\n         NodeMap nodeMap = this.nodeMap.get().get();\n         NodeAssignmentStats assignmentStats = new NodeAssignmentStats(nodeTaskMap, nodeMap, existingTasks);\n \n-        ResettableRandomizedIterator<InternalNode> randomCandidates = getRandomCandidates(maxTasksPerStage, nodeMap, existingTasks);\n+        NodeSelection randomNodeSelection = new RandomNodeSelection(nodeMap, includeCoordinator, minCandidates, maxTasksPerStage, existingTasks);\n         Set<InternalNode> blockedExactNodes = new HashSet<>();\n         boolean splitWaitingForAnyNode = false;\n-        for (Split split : splits) {\n-            randomCandidates.reset();\n+        List<HostAddress> sortedCandidates = NodeSelector.sortedNodes(nodeMap);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5623cb75a0035dc65993c7bae9b4fd0597e2049e"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY4OTU5OQ==", "bodyText": "Shixuan and I had a discussion offline, the splits number may be way bigger than nodes number, so iterating through splits is not necessarily faster than sorting.\nWill leave a todo and will think of a way to fix it once we can confirm a bottleneck this causes", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r378689599", "createdAt": "2020-02-13T07:28:57Z", "author": {"login": "kewang1024"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "diffHunk": "@@ -111,19 +117,30 @@ public SplitPlacementResult computeAssignments(Set<Split> splits, List<RemoteTas\n         NodeMap nodeMap = this.nodeMap.get().get();\n         NodeAssignmentStats assignmentStats = new NodeAssignmentStats(nodeTaskMap, nodeMap, existingTasks);\n \n-        ResettableRandomizedIterator<InternalNode> randomCandidates = getRandomCandidates(maxTasksPerStage, nodeMap, existingTasks);\n+        NodeSelection randomNodeSelection = new RandomNodeSelection(nodeMap, includeCoordinator, minCandidates, maxTasksPerStage, existingTasks);\n         Set<InternalNode> blockedExactNodes = new HashSet<>();\n         boolean splitWaitingForAnyNode = false;\n-        for (Split split : splits) {\n-            randomCandidates.reset();\n+        List<HostAddress> sortedCandidates = NodeSelector.sortedNodes(nodeMap);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY2NjQ1OQ=="}, "originalCommit": {"oid": "5623cb75a0035dc65993c7bae9b4fd0597e2049e"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjgwNDE0OnYy", "diffSide": "LEFT", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNjowOToyMFrOFpIA9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNjowOToyMFrOFpIA9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY2NzI1Mw==", "bodyText": "Could you merge the for loop with the above one into a helper? They good almost the same.", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r378667253", "createdAt": "2020-02-13T06:09:20Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "diffHunk": "@@ -132,17 +149,32 @@ public SplitPlacementResult computeAssignments(Set<Split> splits, List<RemoteTas\n             InternalNode chosenNode = null;\n             int min = Integer.MAX_VALUE;\n \n-            for (InternalNode node : candidateNodes) {\n+            for (int i = 0; i < candidateNodes.size(); i++) {\n+                InternalNode node = candidateNodes.get(i);\n                 int totalSplitCount = assignmentStats.getTotalSplitCount(node);\n+\n+                // choose the preferred node first as long as they're not busy\n+                if (preferredNodeCount.isPresent() && i < preferredNodeCount.getAsInt() && totalSplitCount < maxSplitsPerNode) {\n+                    chosenNode = node;\n+                    break;\n+                }\n+                // fallback to choosing the least busy nodes\n                 if (totalSplitCount < min && totalSplitCount < maxSplitsPerNode) {\n                     chosenNode = node;\n                     min = totalSplitCount;\n                 }\n             }\n             if (chosenNode == null) {\n                 // min is guaranteed to be MAX_VALUE at this line\n-                for (InternalNode node : candidateNodes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5623cb75a0035dc65993c7bae9b4fd0597e2049e"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjgwNTIxOnYy", "diffSide": "LEFT", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNjoxMDowNVrOFpIBnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwODoyOToxM1rOFpKvVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY2NzQyMQ==", "bodyText": "Frankly, I don't think we need class RandomNodeSelection given the abstraction NodeSelection is not there anymore. Just keep this function.", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r378667421", "createdAt": "2020-02-13T06:10:05Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "diffHunk": "@@ -174,29 +206,16 @@ else if (!splitWaitingForAnyNode) {\n         return new SplitPlacementResult(blocked, assignment);\n     }\n \n-    private ResettableRandomizedIterator<InternalNode> getRandomCandidates(int limit, NodeMap nodeMap, List<RemoteTask> existingTasks)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5623cb75a0035dc65993c7bae9b4fd0597e2049e"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODcxMTg5Mw==", "bodyText": "It can separate the logic from SimpleNodeSelector\nIf we revert this change, every time we pick nodes, we have to manually call randomCandidates.reset(); which would be error-prone\nThere is a high chance that we might implement resource-aware nodeSelection , which will be another implementation of NodeSelector", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r378711893", "createdAt": "2020-02-13T08:29:13Z", "author": {"login": "kewang1024"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "diffHunk": "@@ -174,29 +206,16 @@ else if (!splitWaitingForAnyNode) {\n         return new SplitPlacementResult(blocked, assignment);\n     }\n \n-    private ResettableRandomizedIterator<InternalNode> getRandomCandidates(int limit, NodeMap nodeMap, List<RemoteTask> existingTasks)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY2NzQyMQ=="}, "originalCommit": {"oid": "5623cb75a0035dc65993c7bae9b4fd0597e2049e"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjgwOTkyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/TopologyAwareNodeSelector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNjoxMjo0NlrOFpIEWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNjoxMjo0NlrOFpIEWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY2ODEyMQ==", "bodyText": "This is wrong, we should say split.getNodeSelectionStrategy() == HARD_AFFINITY", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r378668121", "createdAt": "2020-02-13T06:12:46Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/TopologyAwareNodeSelector.java", "diffHunk": "@@ -123,9 +131,10 @@ public SplitPlacementResult computeAssignments(Set<Split> splits, List<RemoteTas\n         Set<NetworkLocation> filledLocations = new HashSet<>();\n         Set<InternalNode> blockedExactNodes = new HashSet<>();\n         boolean splitWaitingForAnyNode = false;\n+        List<HostAddress> sortedCandidates = NodeSelector.sortedNodes(nodeMap);\n         for (Split split : splits) {\n-            if (!split.isRemotelyAccessible()) {\n-                List<InternalNode> candidateNodes = selectExactNodes(nodeMap, split.getAddresses(), includeCoordinator);\n+            if (split.getNodeSelectionStrategy() != NO_PREFERENCE) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5623cb75a0035dc65993c7bae9b4fd0597e2049e"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjgxMjgwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNjoxNDoxOVrOFpIGBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNjoxNDoxOVrOFpIGBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY2ODU0OQ==", "bodyText": "split.getNodeSelectionStrategy() != HARD_AFFINITY", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r378668549", "createdAt": "2020-02-13T06:14:19Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "diffHunk": "@@ -154,7 +186,7 @@ public SplitPlacementResult computeAssignments(Set<Split> splits, List<RemoteTas\n                 assignmentStats.addAssignedSplit(chosenNode);\n             }\n             else {\n-                if (split.isRemotelyAccessible()) {\n+                if (split.getNodeSelectionStrategy() == NO_PREFERENCE) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5623cb75a0035dc65993c7bae9b4fd0597e2049e"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MzIzMDI5OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplit.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwOToxMTo1MVrOFpMAPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwOToxMTo1MVrOFpMAPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODczMjYwNg==", "bodyText": "Coding style is incorrect\nreturn ImmutableList.of(\n        sortedCandidates.get(path.hashCode() % sortedCandidates.size()),\n        sortedCandidates.get((path.hashCode() + 1) % sortedCandidates.size()));", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r378732606", "createdAt": "2020-02-13T09:11:51Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplit.java", "diffHunk": "@@ -166,12 +172,24 @@ public Storage getStorage()\n     }\n \n     @JsonProperty\n-    @Override\n     public List<HostAddress> getAddresses()\n     {\n         return addresses;\n     }\n \n+    @Override\n+    public List<HostAddress> getPreferredNodes(List<HostAddress> sortedCandidates)\n+    {\n+        if (getNodeSelectionStrategy() == SOFT_AFFINITY) {\n+            // Use + 1 as secondary hash for now, would always get a diffrent position from the first hash.\n+            // When + 1 overflow, will circle back to starting point: Integer.MAX_VALUE + 1 == Integer.MIN_VALUE\n+            return ImmutableList.of(sortedCandidates.get(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ea965f9ea0d6f51ce1e3986e4dcc418c1921cf0"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MzIzMjkyOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplit.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwOToxMjo0M1rOFpMB0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwOToxMjo0M1rOFpMB0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODczMzAxMQ==", "bodyText": "check argument !sortedCandidates.isEmpty()", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r378733011", "createdAt": "2020-02-13T09:12:43Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplit.java", "diffHunk": "@@ -166,12 +172,24 @@ public Storage getStorage()\n     }\n \n     @JsonProperty\n-    @Override\n     public List<HostAddress> getAddresses()\n     {\n         return addresses;\n     }\n \n+    @Override\n+    public List<HostAddress> getPreferredNodes(List<HostAddress> sortedCandidates)\n+    {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ea965f9ea0d6f51ce1e3986e4dcc418c1921cf0"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MzI0NjcyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/LimitationType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwOToxNjo1NlrOFpMKTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwOToxNjo1NlrOFpMKTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODczNTE4MQ==", "bodyText": "remove this class; check my comment below", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r378735181", "createdAt": "2020-02-13T09:16:56Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/LimitationType.java", "diffHunk": "@@ -0,0 +1,19 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.execution.scheduler.nodeSelection;\n+\n+public enum LimitationType", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ea965f9ea0d6f51ce1e3986e4dcc418c1921cf0"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MzI2ODQxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwOToyMjo1OFrOFpMXaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwOToyMjo1OFrOFpMXaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODczODUzOQ==", "bodyText": "Instead of having assignmentStats and LimitationType, what you need is Function<InternalNode, Integer> splitCountProvider\nnit: limitation -> maxSplitCount", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r378738539", "createdAt": "2020-02-13T09:22:58Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/SimpleNodeSelector.java", "diffHunk": "@@ -174,29 +180,44 @@ else if (!splitWaitingForAnyNode) {\n         return new SplitPlacementResult(blocked, assignment);\n     }\n \n-    private ResettableRandomizedIterator<InternalNode> getRandomCandidates(int limit, NodeMap nodeMap, List<RemoteTask> existingTasks)\n-    {\n-        List<InternalNode> existingNodes = existingTasks.stream()\n-                .map(remoteTask -> nodeMap.getNodesByNodeId().get(remoteTask.getNodeId()))\n-                // nodes may sporadically disappear from the nodeMap if the announcement is delayed\n-                .filter(Objects::nonNull)\n-                .collect(toList());\n-\n-        int alreadySelectedNodeCount = existingNodes.size();\n-        int nodeCount = nodeMap.getNodesByNodeId().size();\n-\n-        if (alreadySelectedNodeCount < limit && alreadySelectedNodeCount < nodeCount) {\n-            List<InternalNode> moreNodes =\n-                    selectNodes(limit - alreadySelectedNodeCount, randomizedNodes(nodeMap, includeCoordinator, newHashSet(existingNodes)));\n-            existingNodes.addAll(moreNodes);\n-        }\n-        verify(existingNodes.stream().allMatch(Objects::nonNull), \"existingNodes list must not contain any nulls\");\n-        return new ResettableRandomizedIterator<>(existingNodes);\n-    }\n-\n     @Override\n     public SplitPlacementResult computeAssignments(Set<Split> splits, List<RemoteTask> existingTasks, BucketNodeMap bucketNodeMap)\n     {\n         return selectDistributionNodes(nodeMap.get().get(), nodeTaskMap, maxSplitsPerNode, maxPendingSplitsPerTask, splits, existingTasks, bucketNodeMap);\n     }\n+\n+    private static List<InternalNode> convertToInternalNode(NodeMap nodeMap, List<HostAddress> preferredNodes)\n+    {\n+        List<InternalNode> internalNodes = new ArrayList<>();\n+        preferredNodes.forEach(node -> internalNodes.addAll(nodeMap.getNodesByHostAndPort().get(node)));\n+        return ImmutableList.copyOf(internalNodes);\n+    }\n+\n+    private static InternalNode chooseLeastBusyNode(List<InternalNode> candidateNodes, NodeAssignmentStats assignmentStats, OptionalInt preferredNodeCount, LimitationType limitationType, int limitation)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ea965f9ea0d6f51ce1e3986e4dcc418c1921cf0"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MzI3MDc2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/TopologyAwareNodeSelector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwOToyMzozN1rOFpMYug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwOToyMzozN1rOFpMYug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODczODg3NA==", "bodyText": "add same todo", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r378738874", "createdAt": "2020-02-13T09:23:37Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/nodeSelection/TopologyAwareNodeSelector.java", "diffHunk": "@@ -123,9 +132,10 @@ public SplitPlacementResult computeAssignments(Set<Split> splits, List<RemoteTas\n         Set<NetworkLocation> filledLocations = new HashSet<>();\n         Set<InternalNode> blockedExactNodes = new HashSet<>();\n         boolean splitWaitingForAnyNode = false;\n+        List<HostAddress> sortedCandidates = sortedNodes(nodeMap);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ea965f9ea0d6f51ce1e3986e4dcc418c1921cf0"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MzMyNTMwOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/BackgroundHiveSplitLoader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwOTozODo1MlrOFpM56g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxODoyMjowMVrOFpelFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc0NzM3MA==", "bodyText": "We don't need this anymore. We don't need config isForceLocalScheduling also. isForceLocalScheduling will be the same as getNodeSelectionStrategy(session) == HARD_AFFINITY", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r378747370", "createdAt": "2020-02-13T09:38:52Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/BackgroundHiveSplitLoader.java", "diffHunk": "@@ -315,6 +316,7 @@ private void invokeNoMoreSplitsIfNecessary()\n                         inputFormat,\n                         pathDomain,\n                         isForceLocalScheduling(session),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ea965f9ea0d6f51ce1e3986e4dcc418c1921cf0"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAzNjk1MQ==", "bodyText": "Yes, I plan to remove it in the next PR", "url": "https://github.com/prestodb/presto/pull/13966#discussion_r379036951", "createdAt": "2020-02-13T18:22:01Z", "author": {"login": "kewang1024"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/BackgroundHiveSplitLoader.java", "diffHunk": "@@ -315,6 +316,7 @@ private void invokeNoMoreSplitsIfNecessary()\n                         inputFormat,\n                         pathDomain,\n                         isForceLocalScheduling(session),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc0NzM3MA=="}, "originalCommit": {"oid": "9ea965f9ea0d6f51ce1e3986e4dcc418c1921cf0"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3140, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}