{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIzNjQ3MDI0", "number": 15460, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNToyNjoxMFrOE64Zmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNTozOToxM1rOE64j1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTc2OTIyOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveManifestUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNToyNjoxMFrOH2NQ_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNToyNjoxMFrOH2NQ_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYwMjQ5NA==", "bodyText": "make it 7 maybe", "url": "https://github.com/prestodb/presto/pull/15460#discussion_r526602494", "createdAt": "2020-11-19T05:26:10Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveManifestUtils.java", "diffHunk": "@@ -17,21 +17,43 @@\n import com.facebook.presto.common.PageBuilder;\n import com.facebook.presto.common.block.BlockBuilder;\n import com.facebook.presto.spi.PrestoException;\n+import com.github.luben.zstd.Zstd;\n+import com.google.common.base.Joiner;\n import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.roaringbitmap.RoaringBitmap;\n \n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n import java.util.Optional;\n \n import static com.facebook.presto.common.type.BigintType.BIGINT;\n import static com.facebook.presto.common.type.VarcharType.VARCHAR;\n import static com.facebook.presto.hive.HiveErrorCode.MALFORMED_HIVE_FILE_STATISTICS;\n import static com.facebook.presto.hive.PartitionUpdate.FileWriteInfo;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n import static io.airlift.slice.Slices.utf8Slice;\n import static java.lang.String.format;\n \n public class HiveManifestUtils\n {\n     private static final int FILE_SIZE_CHANNEL = 0;\n     private static final int ROW_COUNT_CHANNEL = 1;\n+    private static final String CHARSET_NAME = \"ISO-8859-1\";\n+    private static final int COMPRESSION_LEVEL = 3; // default level", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec3352a3f9fb2e971e22ebdf3c49d4a15b279371"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTc3Njg3OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveManifestUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNToyOTo1OFrOH2NVWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNzo1OTo0NVrOH2QxBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYwMzYxMQ==", "bodyText": "I think can blindly compressing with roaring bitmap. It compress continuous range very well.", "url": "https://github.com/prestodb/presto/pull/15460#discussion_r526603611", "createdAt": "2020-11-19T05:29:58Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveManifestUtils.java", "diffHunk": "@@ -85,4 +107,122 @@ public static long getFileSize(Page statisticsPage, int position)\n         }\n         return Optional.of(manifestBuilder.build());\n     }\n+\n+    public static Map<String, String> updatePartitionMetadataWithFileNamesAndSizes(PartitionUpdate partitionUpdate, Map<String, String> metadata)\n+    {\n+        ImmutableMap.Builder<String, String> partitionMetadata = ImmutableMap.builder();\n+        List<FileWriteInfo> fileWriteInfos = new ArrayList<>(partitionUpdate.getFileWriteInfos());\n+\n+        // Sort the file infos based on fileName\n+        fileWriteInfos.sort(Comparator.comparing(info -> Integer.valueOf(info.getWriteFileName())));\n+\n+        // Compress the file names into a consolidated string\n+        String fileNames = compressFileNames(fileWriteInfos.stream().map(FileWriteInfo::getWriteFileName).collect(toImmutableList()));\n+\n+        // Compress the file sizes\n+        String fileSizes = compressFileSizes(fileWriteInfos.stream().map(FileWriteInfo::getFileSize).map(Optional::get).collect(toImmutableList()));\n+\n+        partitionMetadata.put(FILE_NAMES, fileNames);\n+        partitionMetadata.put(FILE_SIZES, fileSizes);\n+        partitionMetadata.put(MANIFEST_VERSION, VERSION_1);\n+        partitionMetadata.putAll(metadata);\n+\n+        return partitionMetadata.build();\n+    }\n+\n+    static String compressFileNames(List<String> fileNames)\n+    {\n+        if (fileNames.size() == 1) {\n+            return fileNames.get(0);\n+        }\n+\n+        boolean isContinuousSequence = true;\n+        int start = 0;\n+        for (String name : fileNames) {\n+            if (start != Integer.parseInt(name)) {\n+                isContinuousSequence = false;\n+                break;\n+            }\n+            start++;\n+        }\n+\n+        if (isContinuousSequence) {\n+            return fileNames.get(fileNames.size() - 1);\n+        }\n+\n+        return compressFileNamesUsingRoaringBitmap(fileNames);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec3352a3f9fb2e971e22ebdf3c49d4a15b279371"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY1OTg0NA==", "bodyText": "Not really. For a list of continuous 100 numbers, RoaringBitMap is taking 218 bytes. But where as \"100\" takes 3 bytes. So the current code is more memory efficient.", "url": "https://github.com/prestodb/presto/pull/15460#discussion_r526659844", "createdAt": "2020-11-19T07:59:45Z", "author": {"login": "NikhilCollooru"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveManifestUtils.java", "diffHunk": "@@ -85,4 +107,122 @@ public static long getFileSize(Page statisticsPage, int position)\n         }\n         return Optional.of(manifestBuilder.build());\n     }\n+\n+    public static Map<String, String> updatePartitionMetadataWithFileNamesAndSizes(PartitionUpdate partitionUpdate, Map<String, String> metadata)\n+    {\n+        ImmutableMap.Builder<String, String> partitionMetadata = ImmutableMap.builder();\n+        List<FileWriteInfo> fileWriteInfos = new ArrayList<>(partitionUpdate.getFileWriteInfos());\n+\n+        // Sort the file infos based on fileName\n+        fileWriteInfos.sort(Comparator.comparing(info -> Integer.valueOf(info.getWriteFileName())));\n+\n+        // Compress the file names into a consolidated string\n+        String fileNames = compressFileNames(fileWriteInfos.stream().map(FileWriteInfo::getWriteFileName).collect(toImmutableList()));\n+\n+        // Compress the file sizes\n+        String fileSizes = compressFileSizes(fileWriteInfos.stream().map(FileWriteInfo::getFileSize).map(Optional::get).collect(toImmutableList()));\n+\n+        partitionMetadata.put(FILE_NAMES, fileNames);\n+        partitionMetadata.put(FILE_SIZES, fileSizes);\n+        partitionMetadata.put(MANIFEST_VERSION, VERSION_1);\n+        partitionMetadata.putAll(metadata);\n+\n+        return partitionMetadata.build();\n+    }\n+\n+    static String compressFileNames(List<String> fileNames)\n+    {\n+        if (fileNames.size() == 1) {\n+            return fileNames.get(0);\n+        }\n+\n+        boolean isContinuousSequence = true;\n+        int start = 0;\n+        for (String name : fileNames) {\n+            if (start != Integer.parseInt(name)) {\n+                isContinuousSequence = false;\n+                break;\n+            }\n+            start++;\n+        }\n+\n+        if (isContinuousSequence) {\n+            return fileNames.get(fileNames.size() - 1);\n+        }\n+\n+        return compressFileNamesUsingRoaringBitmap(fileNames);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYwMzYxMQ=="}, "originalCommit": {"oid": "ec3352a3f9fb2e971e22ebdf3c49d4a15b279371"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTc4NTcyOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveManifestUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNTozNDoxNlrOH2NafA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNTozNDoxNlrOH2NafA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYwNDkyNA==", "bodyText": "parseLong", "url": "https://github.com/prestodb/presto/pull/15460#discussion_r526604924", "createdAt": "2020-11-19T05:34:16Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveManifestUtils.java", "diffHunk": "@@ -85,4 +107,122 @@ public static long getFileSize(Page statisticsPage, int position)\n         }\n         return Optional.of(manifestBuilder.build());\n     }\n+\n+    public static Map<String, String> updatePartitionMetadataWithFileNamesAndSizes(PartitionUpdate partitionUpdate, Map<String, String> metadata)\n+    {\n+        ImmutableMap.Builder<String, String> partitionMetadata = ImmutableMap.builder();\n+        List<FileWriteInfo> fileWriteInfos = new ArrayList<>(partitionUpdate.getFileWriteInfos());\n+\n+        // Sort the file infos based on fileName\n+        fileWriteInfos.sort(Comparator.comparing(info -> Integer.valueOf(info.getWriteFileName())));\n+\n+        // Compress the file names into a consolidated string\n+        String fileNames = compressFileNames(fileWriteInfos.stream().map(FileWriteInfo::getWriteFileName).collect(toImmutableList()));\n+\n+        // Compress the file sizes\n+        String fileSizes = compressFileSizes(fileWriteInfos.stream().map(FileWriteInfo::getFileSize).map(Optional::get).collect(toImmutableList()));\n+\n+        partitionMetadata.put(FILE_NAMES, fileNames);\n+        partitionMetadata.put(FILE_SIZES, fileSizes);\n+        partitionMetadata.put(MANIFEST_VERSION, VERSION_1);\n+        partitionMetadata.putAll(metadata);\n+\n+        return partitionMetadata.build();\n+    }\n+\n+    static String compressFileNames(List<String> fileNames)\n+    {\n+        if (fileNames.size() == 1) {\n+            return fileNames.get(0);\n+        }\n+\n+        boolean isContinuousSequence = true;\n+        int start = 0;\n+        for (String name : fileNames) {\n+            if (start != Integer.parseInt(name)) {\n+                isContinuousSequence = false;\n+                break;\n+            }\n+            start++;\n+        }\n+\n+        if (isContinuousSequence) {\n+            return fileNames.get(fileNames.size() - 1);\n+        }\n+\n+        return compressFileNamesUsingRoaringBitmap(fileNames);\n+    }\n+\n+    static List<String> decompressFileNames(String compressedFileNames)\n+    {\n+        // Check if the compressed fileNames string is a number\n+        if (compressedFileNames.matches(\"\\\\d+\")) {\n+            long end = Long.valueOf(compressedFileNames);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec3352a3f9fb2e971e22ebdf3c49d4a15b279371"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTc4NjkwOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveManifestUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNTozNDo0NFrOH2NbHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNTozNDo0NFrOH2NbHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYwNTA4Ng==", "bodyText": "ImmutableList.of(\"0\")?", "url": "https://github.com/prestodb/presto/pull/15460#discussion_r526605086", "createdAt": "2020-11-19T05:34:44Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveManifestUtils.java", "diffHunk": "@@ -85,4 +107,122 @@ public static long getFileSize(Page statisticsPage, int position)\n         }\n         return Optional.of(manifestBuilder.build());\n     }\n+\n+    public static Map<String, String> updatePartitionMetadataWithFileNamesAndSizes(PartitionUpdate partitionUpdate, Map<String, String> metadata)\n+    {\n+        ImmutableMap.Builder<String, String> partitionMetadata = ImmutableMap.builder();\n+        List<FileWriteInfo> fileWriteInfos = new ArrayList<>(partitionUpdate.getFileWriteInfos());\n+\n+        // Sort the file infos based on fileName\n+        fileWriteInfos.sort(Comparator.comparing(info -> Integer.valueOf(info.getWriteFileName())));\n+\n+        // Compress the file names into a consolidated string\n+        String fileNames = compressFileNames(fileWriteInfos.stream().map(FileWriteInfo::getWriteFileName).collect(toImmutableList()));\n+\n+        // Compress the file sizes\n+        String fileSizes = compressFileSizes(fileWriteInfos.stream().map(FileWriteInfo::getFileSize).map(Optional::get).collect(toImmutableList()));\n+\n+        partitionMetadata.put(FILE_NAMES, fileNames);\n+        partitionMetadata.put(FILE_SIZES, fileSizes);\n+        partitionMetadata.put(MANIFEST_VERSION, VERSION_1);\n+        partitionMetadata.putAll(metadata);\n+\n+        return partitionMetadata.build();\n+    }\n+\n+    static String compressFileNames(List<String> fileNames)\n+    {\n+        if (fileNames.size() == 1) {\n+            return fileNames.get(0);\n+        }\n+\n+        boolean isContinuousSequence = true;\n+        int start = 0;\n+        for (String name : fileNames) {\n+            if (start != Integer.parseInt(name)) {\n+                isContinuousSequence = false;\n+                break;\n+            }\n+            start++;\n+        }\n+\n+        if (isContinuousSequence) {\n+            return fileNames.get(fileNames.size() - 1);\n+        }\n+\n+        return compressFileNamesUsingRoaringBitmap(fileNames);\n+    }\n+\n+    static List<String> decompressFileNames(String compressedFileNames)\n+    {\n+        // Check if the compressed fileNames string is a number\n+        if (compressedFileNames.matches(\"\\\\d+\")) {\n+            long end = Long.valueOf(compressedFileNames);\n+\n+            if (end == 0) {\n+                return Collections.singletonList(\"0\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec3352a3f9fb2e971e22ebdf3c49d4a15b279371"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTc5MzgwOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveManifestUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNTozODoxM1rOH2Ne_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNTozODoxM1rOH2Ne_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYwNjA3OA==", "bodyText": "return LongStream.range(0, end + 1).mapToObj(String::valueOf).collect(toImmutableList());", "url": "https://github.com/prestodb/presto/pull/15460#discussion_r526606078", "createdAt": "2020-11-19T05:38:13Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveManifestUtils.java", "diffHunk": "@@ -85,4 +107,122 @@ public static long getFileSize(Page statisticsPage, int position)\n         }\n         return Optional.of(manifestBuilder.build());\n     }\n+\n+    public static Map<String, String> updatePartitionMetadataWithFileNamesAndSizes(PartitionUpdate partitionUpdate, Map<String, String> metadata)\n+    {\n+        ImmutableMap.Builder<String, String> partitionMetadata = ImmutableMap.builder();\n+        List<FileWriteInfo> fileWriteInfos = new ArrayList<>(partitionUpdate.getFileWriteInfos());\n+\n+        // Sort the file infos based on fileName\n+        fileWriteInfos.sort(Comparator.comparing(info -> Integer.valueOf(info.getWriteFileName())));\n+\n+        // Compress the file names into a consolidated string\n+        String fileNames = compressFileNames(fileWriteInfos.stream().map(FileWriteInfo::getWriteFileName).collect(toImmutableList()));\n+\n+        // Compress the file sizes\n+        String fileSizes = compressFileSizes(fileWriteInfos.stream().map(FileWriteInfo::getFileSize).map(Optional::get).collect(toImmutableList()));\n+\n+        partitionMetadata.put(FILE_NAMES, fileNames);\n+        partitionMetadata.put(FILE_SIZES, fileSizes);\n+        partitionMetadata.put(MANIFEST_VERSION, VERSION_1);\n+        partitionMetadata.putAll(metadata);\n+\n+        return partitionMetadata.build();\n+    }\n+\n+    static String compressFileNames(List<String> fileNames)\n+    {\n+        if (fileNames.size() == 1) {\n+            return fileNames.get(0);\n+        }\n+\n+        boolean isContinuousSequence = true;\n+        int start = 0;\n+        for (String name : fileNames) {\n+            if (start != Integer.parseInt(name)) {\n+                isContinuousSequence = false;\n+                break;\n+            }\n+            start++;\n+        }\n+\n+        if (isContinuousSequence) {\n+            return fileNames.get(fileNames.size() - 1);\n+        }\n+\n+        return compressFileNamesUsingRoaringBitmap(fileNames);\n+    }\n+\n+    static List<String> decompressFileNames(String compressedFileNames)\n+    {\n+        // Check if the compressed fileNames string is a number\n+        if (compressedFileNames.matches(\"\\\\d+\")) {\n+            long end = Long.valueOf(compressedFileNames);\n+\n+            if (end == 0) {\n+                return Collections.singletonList(\"0\");\n+            }\n+\n+            ImmutableList.Builder<String> fileNames = ImmutableList.builder();\n+            for (long i = 0; i <= end; i++) {\n+                fileNames.add(String.valueOf(i));\n+            }\n+\n+            return fileNames.build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec3352a3f9fb2e971e22ebdf3c49d4a15b279371"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTc5NTQyOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveManifestUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNTozOToxM1rOH2NgEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNTozOToxM1rOH2NgEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYwNjM1Mw==", "bodyText": "Maybe also add one after this by randomly generating a sequence of numbers. Same like the one you did in testFileSizesCompression", "url": "https://github.com/prestodb/presto/pull/15460#discussion_r526606353", "createdAt": "2020-11-19T05:39:13Z", "author": {"login": "highker"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveManifestUtils.java", "diffHunk": "@@ -76,6 +82,45 @@ public void testCreatePartitionManifest()\n         assertEquals(manifestPage.get().getPositionCount(), 1);\n     }\n \n+    @Test\n+    public void testFileNamesCompression()\n+    {\n+        List<String> fileNames = new ArrayList<>();\n+\n+        // File names are continuous and sequential\n+        for (int i = 0; i <= 100; i++) {\n+            fileNames.add(String.valueOf(i));\n+        }\n+\n+        String compressedSequentialFileNames = compressFileNames(fileNames);\n+        assertEquals(fileNames, decompressFileNames(compressedSequentialFileNames));\n+\n+        // File names NOT sequential\n+        fileNames.clear();\n+        for (int i = 0; i <= 100; i++) {\n+            if (i % 10 == 0) {\n+                continue;\n+            }\n+            fileNames.add(String.valueOf(i));\n+        }\n+\n+        String compressedNonSequentialFileNames = compressFileNames(fileNames);\n+        assertEquals(fileNames, decompressFileNames(compressedNonSequentialFileNames));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec3352a3f9fb2e971e22ebdf3c49d4a15b279371"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3415, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}