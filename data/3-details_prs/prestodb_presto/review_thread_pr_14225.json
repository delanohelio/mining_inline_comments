{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1MDc4MDc0", "number": 14225, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxOTowMjo1N1rODnNXeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxOTowMjo1N1rODnNXeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDQwMDU4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/PageBufferClient.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxOTowMjo1N1rOF1EzMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMzoxMToyN1rOF1y4Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE5NzQ5MA==", "bodyText": "Is this the correct semantic when the RpcShuffleClient is Thrift based?  More generally, should this change be implemented in the HttpClient (the future it returns won't support cancellation?)", "url": "https://github.com/prestodb/presto/pull/14225#discussion_r391197490", "createdAt": "2020-03-11T19:02:57Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/PageBufferClient.java", "diffHunk": "@@ -197,23 +196,17 @@ public synchronized boolean isRunning()\n     public void close()\n     {\n         boolean shouldSendDelete;\n-        Future<?> future;\n         synchronized (this) {\n             shouldSendDelete = !closed;\n \n             closed = true;\n \n-            future = this.future;\n-\n+            // do not cancel the request to avoid closing a pooled connection", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ff655b1cf89f34b3007910d311d36abced34a0f"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkxMjA1NA==", "bodyText": "That's the way it is implemented in Drift. Basically the future it returns is not cancelled (cancellation of the future does not cancel the request).\nIt has it's own pros and cons.\nBasically the pros are that the connection is never closed, the cons is that if the request is large - it is never cancelled, and in theory the request / response can be in megabytes.", "url": "https://github.com/prestodb/presto/pull/14225#discussion_r391912054", "createdAt": "2020-03-12T21:36:51Z", "author": {"login": "arhimondr"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/PageBufferClient.java", "diffHunk": "@@ -197,23 +196,17 @@ public synchronized boolean isRunning()\n     public void close()\n     {\n         boolean shouldSendDelete;\n-        Future<?> future;\n         synchronized (this) {\n             shouldSendDelete = !closed;\n \n             closed = true;\n \n-            future = this.future;\n-\n+            // do not cancel the request to avoid closing a pooled connection", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE5NzQ5MA=="}, "originalCommit": {"oid": "3ff655b1cf89f34b3007910d311d36abced34a0f"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkxNDMzNQ==", "bodyText": "I'm thinking about a compromise. The Future#cancel() method takes a boolean parameter, the mayInterruptIfRunning. Currently this flag is unused, and no matter what's the value the request is always cancelled. What do you think about changing this behavior to \"cancel only if the mayInterruptIfRunning flag is set\"?\ne.g.: https://github.com/prestodb/airlift/blob/master/http-client/src/main/java/com/facebook/airlift/http/client/jetty/JettyResponseFuture.java#L59", "url": "https://github.com/prestodb/presto/pull/14225#discussion_r391914335", "createdAt": "2020-03-12T21:39:53Z", "author": {"login": "arhimondr"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/PageBufferClient.java", "diffHunk": "@@ -197,23 +196,17 @@ public synchronized boolean isRunning()\n     public void close()\n     {\n         boolean shouldSendDelete;\n-        Future<?> future;\n         synchronized (this) {\n             shouldSendDelete = !closed;\n \n             closed = true;\n \n-            future = this.future;\n-\n+            // do not cancel the request to avoid closing a pooled connection", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE5NzQ5MA=="}, "originalCommit": {"oid": "3ff655b1cf89f34b3007910d311d36abced34a0f"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkzNDU2NA==", "bodyText": "When it's becoming even more interesting - is when the HTTP2 comes into play. With HTTP/2 it is possible to terminate the request without closing the connection. Thus the decision whether to terminate or not to terminate depends on the underlying protocol as well.\nBut anyhow, I don't think there's a real downside for Presto specifically in not terminating requests. The requests are small, and the termination is inherently racy. Thus I would argue it is fine to not to terminate the requests for our usecase.", "url": "https://github.com/prestodb/presto/pull/14225#discussion_r391934564", "createdAt": "2020-03-12T22:14:12Z", "author": {"login": "arhimondr"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/PageBufferClient.java", "diffHunk": "@@ -197,23 +196,17 @@ public synchronized boolean isRunning()\n     public void close()\n     {\n         boolean shouldSendDelete;\n-        Future<?> future;\n         synchronized (this) {\n             shouldSendDelete = !closed;\n \n             closed = true;\n \n-            future = this.future;\n-\n+            // do not cancel the request to avoid closing a pooled connection", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE5NzQ5MA=="}, "originalCommit": {"oid": "3ff655b1cf89f34b3007910d311d36abced34a0f"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkzNDg2MQ==", "bodyText": "@tdcmeehan @wenleix\nHow about next proposal:\n\nI change the implementation of the Future#cancel() in Airlift so when mayInterruptIfRunning set to false - the request won't be terminated.\nFrom Presto we will be calling #cancel(false)", "url": "https://github.com/prestodb/presto/pull/14225#discussion_r391934861", "createdAt": "2020-03-12T22:15:10Z", "author": {"login": "arhimondr"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/PageBufferClient.java", "diffHunk": "@@ -197,23 +196,17 @@ public synchronized boolean isRunning()\n     public void close()\n     {\n         boolean shouldSendDelete;\n-        Future<?> future;\n         synchronized (this) {\n             shouldSendDelete = !closed;\n \n             closed = true;\n \n-            future = this.future;\n-\n+            // do not cancel the request to avoid closing a pooled connection", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE5NzQ5MA=="}, "originalCommit": {"oid": "3ff655b1cf89f34b3007910d311d36abced34a0f"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkzNjk3MQ==", "bodyText": "I think it's reasonable.", "url": "https://github.com/prestodb/presto/pull/14225#discussion_r391936971", "createdAt": "2020-03-12T22:21:13Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/PageBufferClient.java", "diffHunk": "@@ -197,23 +196,17 @@ public synchronized boolean isRunning()\n     public void close()\n     {\n         boolean shouldSendDelete;\n-        Future<?> future;\n         synchronized (this) {\n             shouldSendDelete = !closed;\n \n             closed = true;\n \n-            future = this.future;\n-\n+            // do not cancel the request to avoid closing a pooled connection", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE5NzQ5MA=="}, "originalCommit": {"oid": "3ff655b1cf89f34b3007910d311d36abced34a0f"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk1MjQ3NA==", "bodyText": "prestodb/airlift#16", "url": "https://github.com/prestodb/presto/pull/14225#discussion_r391952474", "createdAt": "2020-03-12T23:11:27Z", "author": {"login": "arhimondr"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/PageBufferClient.java", "diffHunk": "@@ -197,23 +196,17 @@ public synchronized boolean isRunning()\n     public void close()\n     {\n         boolean shouldSendDelete;\n-        Future<?> future;\n         synchronized (this) {\n             shouldSendDelete = !closed;\n \n             closed = true;\n \n-            future = this.future;\n-\n+            // do not cancel the request to avoid closing a pooled connection", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE5NzQ5MA=="}, "originalCommit": {"oid": "3ff655b1cf89f34b3007910d311d36abced34a0f"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2886, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}