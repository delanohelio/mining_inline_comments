{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczNzQzMzI5", "number": 14083, "title": "Balance ArbitraryOutputbuffer distribution over clients", "bodyText": "Cross port of trinodb/trino#2788\nPreviously, the order that client buffers were polled was always started with the first ClientBuffer, which could lead to data skew when the master buffer drained before all clients could be polled since the client buffer traversal order was stable (but arbitrary).\nThis change stores the stop index of client buffer iteration to ensure that subsequent polling loops don't overload the first client buffer.\nThis is an alternative, simpler solution to the problem described in trinodb/trino#2225 which does a much better job of documenting the existing issue. Shuffling the order is certainly preferable to skewing data, but the extra allocations and shuffling work shouldn't be necessary to produce a more fair output distribution.\n== RELEASE NOTES ==\n\nGeneral Changes\n* Fix ArbitraryOutputBuffer to avoid skewing output data distribution", "createdAt": "2020-02-11T16:05:48Z", "url": "https://github.com/prestodb/presto/pull/14083", "merged": true, "mergeCommit": {"oid": "4a914eb7512ee48699a2493c6604f232ce40384d"}, "closed": true, "closedAt": "2020-02-18T02:02:43Z", "author": {"login": "pettyjamesm"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcDVj7JABqjMwMjc1OTYxNTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcFYIXpAFqTM2MDAzMjUxMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3afeb9a6eae132b9e7de421df9836d33f42d2c58", "author": {"user": {"login": "pettyjamesm", "name": "James Petty"}}, "url": "https://github.com/prestodb/presto/commit/3afeb9a6eae132b9e7de421df9836d33f42d2c58", "committedDate": "2020-02-11T16:01:57Z", "message": "Balance ArbitraryOutputbuffer distribution over clients\n\nPreviously, the order that client buffers were polled was always\nstarted with the first ClientBuffer, which could lead to data skew\nwhen the master buffer drained before all clients could be polled\nsince the client buffer traversal order was stable (but arbitrary).\n\nThis change stores the stop index of client buffer iteration to\nensure that subsequent polling loops don't overload the first client\nbuffer."}, "afterCommit": {"oid": "dd87c17860bf544f12cfb2fa3cf367be8c7d939a", "author": {"user": {"login": "pettyjamesm", "name": "James Petty"}}, "url": "https://github.com/prestodb/presto/commit/dd87c17860bf544f12cfb2fa3cf367be8c7d939a", "committedDate": "2020-02-11T17:55:00Z", "message": "Balance ArbitraryOutputbuffer distribution over clients\n\nPreviously, the order that client buffers were polled was always\nstarted with the first ClientBuffer, which could lead to data skew\nwhen the master buffer drained before all clients could be polled\nsince the client buffer traversal order was stable (but arbitrary).\n\nThis change stores the stop index of client buffer iteration to\nensure that subsequent polling loops don't overload the first client\nbuffer."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dd87c17860bf544f12cfb2fa3cf367be8c7d939a", "author": {"user": {"login": "pettyjamesm", "name": "James Petty"}}, "url": "https://github.com/prestodb/presto/commit/dd87c17860bf544f12cfb2fa3cf367be8c7d939a", "committedDate": "2020-02-11T17:55:00Z", "message": "Balance ArbitraryOutputbuffer distribution over clients\n\nPreviously, the order that client buffers were polled was always\nstarted with the first ClientBuffer, which could lead to data skew\nwhen the master buffer drained before all clients could be polled\nsince the client buffer traversal order was stable (but arbitrary).\n\nThis change stores the stop index of client buffer iteration to\nensure that subsequent polling loops don't overload the first client\nbuffer."}, "afterCommit": {"oid": "31b3faa17ee8c6b0270a65358b7d2bedc0028ac7", "author": {"user": {"login": "pettyjamesm", "name": "James Petty"}}, "url": "https://github.com/prestodb/presto/commit/31b3faa17ee8c6b0270a65358b7d2bedc0028ac7", "committedDate": "2020-02-11T21:55:26Z", "message": "Balance ArbitraryOutputbuffer distribution over clients\n\nPreviously, the order that client buffers were polled was always\nstarted with the first ClientBuffer, which could lead to data skew\nwhen the master buffer drained before all clients could be polled\nsince the client buffer traversal order was stable (but arbitrary).\n\nThis change stores the stop index of client buffer iteration to\nensure that subsequent polling loops don't overload the first client\nbuffer."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "31b3faa17ee8c6b0270a65358b7d2bedc0028ac7", "author": {"user": {"login": "pettyjamesm", "name": "James Petty"}}, "url": "https://github.com/prestodb/presto/commit/31b3faa17ee8c6b0270a65358b7d2bedc0028ac7", "committedDate": "2020-02-11T21:55:26Z", "message": "Balance ArbitraryOutputbuffer distribution over clients\n\nPreviously, the order that client buffers were polled was always\nstarted with the first ClientBuffer, which could lead to data skew\nwhen the master buffer drained before all clients could be polled\nsince the client buffer traversal order was stable (but arbitrary).\n\nThis change stores the stop index of client buffer iteration to\nensure that subsequent polling loops don't overload the first client\nbuffer."}, "afterCommit": {"oid": "bdcd004e94fe322ac4e3db46af2da182857a3c30", "author": {"user": {"login": "pettyjamesm", "name": "James Petty"}}, "url": "https://github.com/prestodb/presto/commit/bdcd004e94fe322ac4e3db46af2da182857a3c30", "committedDate": "2020-02-11T22:16:20Z", "message": "Balance ArbitraryOutputbuffer distribution over clients\n\nPreviously, the order that client buffers were polled was always\nstarted with the first ClientBuffer, which could lead to data skew\nwhen the master buffer drained before all clients could be polled\nsince the client buffer traversal order was stable (but arbitrary).\n\nThis change stores the stop index of client buffer iteration to\nensure that subsequent polling loops don't overload the first client\nbuffer."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3MDY4ODk2", "url": "https://github.com/prestodb/presto/pull/14083#pullrequestreview-357068896", "createdAt": "2020-02-11T23:21:11Z", "commit": {"oid": "dd87c17860bf544f12cfb2fa3cf367be8c7d939a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMzoyNTowMFrOFoc1pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMzoyOToxMFrOFoc7OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk1OTg0NQ==", "bodyText": "Is enqueue called from multiple threads? IOW do multiple threads enter this loop and fetch nextClientBufferIndex?", "url": "https://github.com/prestodb/presto/pull/14083#discussion_r377959845", "createdAt": "2020-02-11T23:25:00Z", "author": {"login": "aweisberg"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/buffer/ArbitraryOutputBuffer.java", "diffHunk": "@@ -248,11 +253,20 @@ public void enqueue(Lifespan lifespan, List<SerializedPage> pages)\n         masterBuffer.addPages(serializedPageReferences);\n \n         // process any pending reads from the client buffers\n-        for (ClientBuffer clientBuffer : safeGetBuffersSnapshot()) {\n+        List<ClientBuffer> buffers = safeGetBuffersSnapshot();\n+        if (buffers.isEmpty()) {\n+            return;\n+        }\n+        // handle potential for racy update of next index and client buffers present\n+        int index = nextClientBufferIndex.get() % buffers.size();\n+        for (int i = 0; i < buffers.size(); i++) {\n+            buffers.get(index).loadPagesIfNecessary(masterBuffer);\n+            index = (index + 1) % buffers.size();\n             if (masterBuffer.isEmpty()) {\n+                // Resume from the next client buffer on the next iteration\n+                nextClientBufferIndex.set(index);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdcd004e94fe322ac4e3db46af2da182857a3c30"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk1OTkyMg==", "bodyText": "Given the current usage you don't need nextClientBufferIndex to be an AtomicLong. volatile would suffice.", "url": "https://github.com/prestodb/presto/pull/14083#discussion_r377959922", "createdAt": "2020-02-11T23:25:13Z", "author": {"login": "aweisberg"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/buffer/ArbitraryOutputBuffer.java", "diffHunk": "@@ -73,6 +73,9 @@\n     @GuardedBy(\"this\")\n     private final ConcurrentMap<OutputBufferId, ClientBuffer> buffers = new ConcurrentHashMap<>();\n \n+    //  The index of the first client buffer that should be polled\n+    private final AtomicInteger nextClientBufferIndex = new AtomicInteger(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdcd004e94fe322ac4e3db46af2da182857a3c30"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk2MDgxNA==", "bodyText": "This reordered checking if the masterBuffer is empty before loading the client. Depending on which case is more common this results in a bunch of extra lock acquisitions inside a client.\nI think this also means that the index is incremented even if no data is loaded into it which might be undesirable?", "url": "https://github.com/prestodb/presto/pull/14083#discussion_r377960814", "createdAt": "2020-02-11T23:27:47Z", "author": {"login": "aweisberg"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/buffer/ArbitraryOutputBuffer.java", "diffHunk": "@@ -248,11 +253,20 @@ public void enqueue(Lifespan lifespan, List<SerializedPage> pages)\n         masterBuffer.addPages(serializedPageReferences);\n \n         // process any pending reads from the client buffers\n-        for (ClientBuffer clientBuffer : safeGetBuffersSnapshot()) {\n+        List<ClientBuffer> buffers = safeGetBuffersSnapshot();\n+        if (buffers.isEmpty()) {\n+            return;\n+        }\n+        // handle potential for racy update of next index and client buffers present\n+        int index = nextClientBufferIndex.get() % buffers.size();\n+        for (int i = 0; i < buffers.size(); i++) {\n+            buffers.get(index).loadPagesIfNecessary(masterBuffer);\n+            index = (index + 1) % buffers.size();\n             if (masterBuffer.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdcd004e94fe322ac4e3db46af2da182857a3c30"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk2MTI3Mg==", "bodyText": "I'm not sure why this is written this way. Why materialize this list on read every time? Why not materialize it only when the set of buffers changes?\nOrthogonal to your set of changes though.", "url": "https://github.com/prestodb/presto/pull/14083#discussion_r377961272", "createdAt": "2020-02-11T23:29:10Z", "author": {"login": "aweisberg"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/buffer/ArbitraryOutputBuffer.java", "diffHunk": "@@ -395,7 +409,7 @@ private synchronized ClientBuffer getBuffer(OutputBufferId id)\n         return buffer;\n     }\n \n-    private synchronized Collection<ClientBuffer> safeGetBuffersSnapshot()\n+    private synchronized List<ClientBuffer> safeGetBuffersSnapshot()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdcd004e94fe322ac4e3db46af2da182857a3c30"}, "originalPosition": 47}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bdcd004e94fe322ac4e3db46af2da182857a3c30", "author": {"user": {"login": "pettyjamesm", "name": "James Petty"}}, "url": "https://github.com/prestodb/presto/commit/bdcd004e94fe322ac4e3db46af2da182857a3c30", "committedDate": "2020-02-11T22:16:20Z", "message": "Balance ArbitraryOutputbuffer distribution over clients\n\nPreviously, the order that client buffers were polled was always\nstarted with the first ClientBuffer, which could lead to data skew\nwhen the master buffer drained before all clients could be polled\nsince the client buffer traversal order was stable (but arbitrary).\n\nThis change stores the stop index of client buffer iteration to\nensure that subsequent polling loops don't overload the first client\nbuffer."}, "afterCommit": {"oid": "1b35750d80ea5c85d6cd0aa002440ee72d59ab2f", "author": {"user": {"login": "pettyjamesm", "name": "James Petty"}}, "url": "https://github.com/prestodb/presto/commit/1b35750d80ea5c85d6cd0aa002440ee72d59ab2f", "committedDate": "2020-02-12T16:15:32Z", "message": "Balance ArbitraryOutputbuffer distribution over clients\n\nPreviously, the order that client buffers were polled was always\nstarted with the first ClientBuffer, which could lead to data skew\nwhen the master buffer drained before all clients could be polled\nsince the client buffer traversal order was stable (but arbitrary).\n\nThis change stores the stop index of client buffer iteration to\nensure that subsequent polling loops don't overload the first client\nbuffer."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3NzQzMzUz", "url": "https://github.com/prestodb/presto/pull/14083#pullrequestreview-357743353", "createdAt": "2020-02-12T19:54:08Z", "commit": {"oid": "1b35750d80ea5c85d6cd0aa002440ee72d59ab2f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1b35750d80ea5c85d6cd0aa002440ee72d59ab2f", "author": {"user": {"login": "pettyjamesm", "name": "James Petty"}}, "url": "https://github.com/prestodb/presto/commit/1b35750d80ea5c85d6cd0aa002440ee72d59ab2f", "committedDate": "2020-02-12T16:15:32Z", "message": "Balance ArbitraryOutputbuffer distribution over clients\n\nPreviously, the order that client buffers were polled was always\nstarted with the first ClientBuffer, which could lead to data skew\nwhen the master buffer drained before all clients could be polled\nsince the client buffer traversal order was stable (but arbitrary).\n\nThis change stores the stop index of client buffer iteration to\nensure that subsequent polling loops don't overload the first client\nbuffer."}, "afterCommit": {"oid": "748def67479939e0a89dbbcb781958961dfcb8b3", "author": {"user": {"login": "pettyjamesm", "name": "James Petty"}}, "url": "https://github.com/prestodb/presto/commit/748def67479939e0a89dbbcb781958961dfcb8b3", "committedDate": "2020-02-13T15:18:08Z", "message": "Balance ArbitraryOutputbuffer distribution over clients\n\nPreviously, the order that client buffers were polled was always\nstarted with the first ClientBuffer, which could lead to data skew\nwhen the master buffer drained before all clients could be polled\nsince the client buffer traversal order was stable (but arbitrary).\n\nThis change stores the stop index of client buffer iteration to\nensure that subsequent polling loops don't overload the first client\nbuffer."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "766bbf23ba75231d61710a556aa08edc43eff5a9", "author": {"user": {"login": "pettyjamesm", "name": "James Petty"}}, "url": "https://github.com/prestodb/presto/commit/766bbf23ba75231d61710a556aa08edc43eff5a9", "committedDate": "2020-02-13T17:28:48Z", "message": "Balance ArbitraryOutputbuffer distribution over clients\n\nPreviously, the order that client buffers were polled was always\nstarted with the first ClientBuffer, which could lead to data skew\nwhen the master buffer drained before all clients could be polled\nsince the client buffer traversal order was stable (but arbitrary).\n\nThis change stores the stop index of client buffer iteration to\nensure that subsequent polling loops don't overload the first client\nbuffer."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "748def67479939e0a89dbbcb781958961dfcb8b3", "author": {"user": {"login": "pettyjamesm", "name": "James Petty"}}, "url": "https://github.com/prestodb/presto/commit/748def67479939e0a89dbbcb781958961dfcb8b3", "committedDate": "2020-02-13T15:18:08Z", "message": "Balance ArbitraryOutputbuffer distribution over clients\n\nPreviously, the order that client buffers were polled was always\nstarted with the first ClientBuffer, which could lead to data skew\nwhen the master buffer drained before all clients could be polled\nsince the client buffer traversal order was stable (but arbitrary).\n\nThis change stores the stop index of client buffer iteration to\nensure that subsequent polling loops don't overload the first client\nbuffer."}, "afterCommit": {"oid": "766bbf23ba75231d61710a556aa08edc43eff5a9", "author": {"user": {"login": "pettyjamesm", "name": "James Petty"}}, "url": "https://github.com/prestodb/presto/commit/766bbf23ba75231d61710a556aa08edc43eff5a9", "committedDate": "2020-02-13T17:28:48Z", "message": "Balance ArbitraryOutputbuffer distribution over clients\n\nPreviously, the order that client buffers were polled was always\nstarted with the first ClientBuffer, which could lead to data skew\nwhen the master buffer drained before all clients could be polled\nsince the client buffer traversal order was stable (but arbitrary).\n\nThis change stores the stop index of client buffer iteration to\nensure that subsequent polling loops don't overload the first client\nbuffer."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4NDM0NTk1", "url": "https://github.com/prestodb/presto/pull/14083#pullrequestreview-358434595", "createdAt": "2020-02-13T18:03:02Z", "commit": {"oid": "748def67479939e0a89dbbcb781958961dfcb8b3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4ODAyNTgx", "url": "https://github.com/prestodb/presto/pull/14083#pullrequestreview-358802581", "createdAt": "2020-02-14T09:17:14Z", "commit": {"oid": "766bbf23ba75231d61710a556aa08edc43eff5a9"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwOToxNzoxNFrOFpwAug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwOTo0MjozNlrOFpwuzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTMyMjU1NA==", "bodyText": "Why do you need to do  % buffers.size() here since you already did index = (index + 1) % buffers.size(); when setting the value of it in the loop?", "url": "https://github.com/prestodb/presto/pull/14083#discussion_r379322554", "createdAt": "2020-02-14T09:17:14Z", "author": {"login": "yingsu00"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/buffer/ArbitraryOutputBuffer.java", "diffHunk": "@@ -248,11 +253,20 @@ public void enqueue(Lifespan lifespan, List<SerializedPage> pages)\n         masterBuffer.addPages(serializedPageReferences);\n \n         // process any pending reads from the client buffers\n-        for (ClientBuffer clientBuffer : safeGetBuffersSnapshot()) {\n+        List<ClientBuffer> buffers = safeGetBuffersSnapshot();\n+        if (buffers.isEmpty()) {\n+            return;\n+        }\n+        // handle potential for racy update of next index and client buffers present\n+        int index = nextClientBufferIndex.get() % buffers.size();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "766bbf23ba75231d61710a556aa08edc43eff5a9"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTMzMDU3OA==", "bodyText": "Since you added the isEmpty() check and a new comment below, this comment line seems to be only for the section\nList<ClientBuffer> buffers = safeGetBuffersSnapshot();\n        if (buffers.isEmpty()) {\n            return;\n        }\n\nAnd this may cause confusion. Would it be better to move it to above line 268??", "url": "https://github.com/prestodb/presto/pull/14083#discussion_r379330578", "createdAt": "2020-02-14T09:34:44Z", "author": {"login": "yingsu00"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/buffer/ArbitraryOutputBuffer.java", "diffHunk": "@@ -248,11 +253,20 @@ public void enqueue(Lifespan lifespan, List<SerializedPage> pages)\n         masterBuffer.addPages(serializedPageReferences);\n \n         // process any pending reads from the client buffers", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "766bbf23ba75231d61710a556aa08edc43eff5a9"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTMzNDM0OQ==", "bodyText": "Maybe it's because I'm not a native English speaker, but I don't quite understand this sentence. What does client buffers present refer to? I saw you only updated the next index, but not the client buffers. What is **for** racy update? Would handle potential racy update of next index be enough?", "url": "https://github.com/prestodb/presto/pull/14083#discussion_r379334349", "createdAt": "2020-02-14T09:42:36Z", "author": {"login": "yingsu00"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/buffer/ArbitraryOutputBuffer.java", "diffHunk": "@@ -248,11 +253,20 @@ public void enqueue(Lifespan lifespan, List<SerializedPage> pages)\n         masterBuffer.addPages(serializedPageReferences);\n \n         // process any pending reads from the client buffers\n-        for (ClientBuffer clientBuffer : safeGetBuffersSnapshot()) {\n+        List<ClientBuffer> buffers = safeGetBuffersSnapshot();\n+        if (buffers.isEmpty()) {\n+            return;\n+        }\n+        // handle potential for racy update of next index and client buffers present", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "766bbf23ba75231d61710a556aa08edc43eff5a9"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MjcyODU5", "url": "https://github.com/prestodb/presto/pull/14083#pullrequestreview-359272859", "createdAt": "2020-02-14T23:29:21Z", "commit": {"oid": "766bbf23ba75231d61710a556aa08edc43eff5a9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwMDMwMDcz", "url": "https://github.com/prestodb/presto/pull/14083#pullrequestreview-360030073", "createdAt": "2020-02-18T01:51:07Z", "commit": {"oid": "766bbf23ba75231d61710a556aa08edc43eff5a9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwMTo1MTowN1rOFqzBuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwMTo1MTowN1rOFqzBuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQyMDUzNg==", "bodyText": "It looks to me the only difference with trinodb/trino#2788 is the position of these two lines (line 268 - line 269). In trinodb/trino#2788, these two lines are at the beginning of for-loop (before the if (masterBuffer.isEmpty())) statement).\nCurious what's the discussion over this? :)", "url": "https://github.com/prestodb/presto/pull/14083#discussion_r380420536", "createdAt": "2020-02-18T01:51:07Z", "author": {"login": "wenleix"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/buffer/ArbitraryOutputBuffer.java", "diffHunk": "@@ -248,11 +253,20 @@ public void enqueue(Lifespan lifespan, List<SerializedPage> pages)\n         masterBuffer.addPages(serializedPageReferences);\n \n         // process any pending reads from the client buffers\n-        for (ClientBuffer clientBuffer : safeGetBuffersSnapshot()) {\n+        List<ClientBuffer> buffers = safeGetBuffersSnapshot();\n+        if (buffers.isEmpty()) {\n+            return;\n+        }\n+        // handle potential for racy update of next index and client buffers present\n+        int index = nextClientBufferIndex.get() % buffers.size();\n+        for (int i = 0; i < buffers.size(); i++) {\n             if (masterBuffer.isEmpty()) {\n+                // Resume from the current client buffer on the next iteration\n+                nextClientBufferIndex.set(index);\n                 break;\n             }\n-            clientBuffer.loadPagesIfNecessary(masterBuffer);\n+            buffers.get(index).loadPagesIfNecessary(masterBuffer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "766bbf23ba75231d61710a556aa08edc43eff5a9"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwMDMyNTEw", "url": "https://github.com/prestodb/presto/pull/14083#pullrequestreview-360032510", "createdAt": "2020-02-18T02:02:34Z", "commit": {"oid": "766bbf23ba75231d61710a556aa08edc43eff5a9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2175, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}