{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3ODg3Njk5", "number": 14608, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMjo0OTozNVrOECwpCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxOToyOToyOVrOEDmPow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzI5NTQ1OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/functions/qdigest.rst", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMjo0OTozNVrOGfakiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxODoxNjoyMVrOGf4urw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU5NDM3Nw==", "bodyText": "...  -> quantile number between 0 and 1", "url": "https://github.com/prestodb/presto/pull/14608#discussion_r435594377", "createdAt": "2020-06-04T22:49:35Z", "author": {"login": "viczhang861"}, "path": "presto-docs/src/main/sphinx/functions/qdigest.rst", "diffHunk": "@@ -30,6 +30,11 @@ Functions\n     Returns the approximate percentile values from the quantile digest given\n     the number ``quantile`` between 0 and 1.\n \n+.. function:: quantile_at_value(qdigest(T), T) -> quantile", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24dfe1da79d0d2116b097bb32ae0bdc79403449f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA4ODQ5NQ==", "bodyText": "Previous change is lost after last push.", "url": "https://github.com/prestodb/presto/pull/14608#discussion_r436088495", "createdAt": "2020-06-05T18:16:21Z", "author": {"login": "viczhang861"}, "path": "presto-docs/src/main/sphinx/functions/qdigest.rst", "diffHunk": "@@ -30,6 +30,11 @@ Functions\n     Returns the approximate percentile values from the quantile digest given\n     the number ``quantile`` between 0 and 1.\n \n+.. function:: quantile_at_value(qdigest(T), T) -> quantile", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU5NDM3Nw=="}, "originalCommit": {"oid": "24dfe1da79d0d2116b097bb32ae0bdc79403449f"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzMyOTk0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/com/facebook/presto/operator/scalar/TestQuantileDigestFunctions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMzowNTozM1rOGfa5Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMzowNTozM1rOGfa5Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU5OTY3NA==", "bodyText": "You don't need two extra functions, you can put them together to reuse the same qdigest.\nassertFunction( .. value 6 )\nassertFunction( .. value 20 )\nassertFunction( .. value -1 )", "url": "https://github.com/prestodb/presto/pull/14608#discussion_r435599674", "createdAt": "2020-06-04T23:05:33Z", "author": {"login": "viczhang861"}, "path": "presto-main/src/test/java/com/facebook/presto/operator/scalar/TestQuantileDigestFunctions.java", "diffHunk": "@@ -82,6 +92,16 @@ public void testQuantileAtValueBigint()\n                 1.0);\n     }\n \n+    @Test\n+    public void testQuantileAtValueBigintSmallerThanMin()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1afbff658014f8f13751bf7460bec9afbf1412df"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzM1MzYwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/QuantileDigestFunctions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMzoxNzo1N1rOGfbHuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMzoxNzo1N1rOGfbHuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYwMzM4Nw==", "bodyText": "We always use braces for if statement,  here is example of code style https://github.com/airlift/codestyle", "url": "https://github.com/prestodb/presto/pull/14608#discussion_r435603387", "createdAt": "2020-06-04T23:17:57Z", "author": {"login": "viczhang861"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/QuantileDigestFunctions.java", "diffHunk": "@@ -63,6 +67,31 @@ public static long valueAtQuantileBigint(@SqlType(\"qdigest(bigint)\") Slice input\n         return new QuantileDigest(input).getQuantile(quantile);\n     }\n \n+    @ScalarFunction(\"quantile_at_value\")\n+    @Description(\"Given an input x between min/max values of qdigest, find which quantile is represented by that value\")\n+    @SqlType(StandardTypes.DOUBLE)\n+    public static double quantileAtValueDouble(@SqlType(\"qdigest(double)\") Slice input, @SqlType(StandardTypes.DOUBLE) double value) {\n+        return quantileAtValueBigint(input, doubleToSortableLong(value));\n+    }\n+\n+    @ScalarFunction(\"quantile_at_value\")\n+    @Description(\"Given an input x between min/max values of qdigest, find which quantile is represented by that value\")\n+    @SqlType(StandardTypes.DOUBLE)\n+    public static double quantileAtValueReal(@SqlType(\"qdigest(real)\") Slice input, @SqlType(StandardTypes.REAL) long value) {\n+        return quantileAtValueBigint(input, floatToSortableInt(intBitsToFloat((int) value)));\n+    }\n+\n+    @ScalarFunction(\"quantile_at_value\")\n+    @Description(\"Given an input x between min/max values of qdigest, find which quantile is represented by that value\")\n+    @SqlType(StandardTypes.DOUBLE)\n+    public static double quantileAtValueBigint(@SqlType(\"qdigest(bigint)\") Slice input, @SqlType(StandardTypes.BIGINT) long value) {\n+        QuantileDigest digest = new QuantileDigest(input);\n+        // when qdigest is empty, return the upper bound quantile to be consistent with non-empty scenarios\n+        if (digest.getCount() == 0) return 1.0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bbfec54ac21f35985ef89794e4200b2fa0daf69"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzM2MTMyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/QuantileDigestFunctions.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMzoyMjoyMlrOGfbMuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNToyNjo1NVrOGfzGOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYwNDY2NA==", "bodyText": "Could you explain what the non-empty scenario is ?", "url": "https://github.com/prestodb/presto/pull/14608#discussion_r435604664", "createdAt": "2020-06-04T23:22:22Z", "author": {"login": "viczhang861"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/QuantileDigestFunctions.java", "diffHunk": "@@ -63,6 +67,31 @@ public static long valueAtQuantileBigint(@SqlType(\"qdigest(bigint)\") Slice input\n         return new QuantileDigest(input).getQuantile(quantile);\n     }\n \n+    @ScalarFunction(\"quantile_at_value\")\n+    @Description(\"Given an input x between min/max values of qdigest, find which quantile is represented by that value\")\n+    @SqlType(StandardTypes.DOUBLE)\n+    public static double quantileAtValueDouble(@SqlType(\"qdigest(double)\") Slice input, @SqlType(StandardTypes.DOUBLE) double value) {\n+        return quantileAtValueBigint(input, doubleToSortableLong(value));\n+    }\n+\n+    @ScalarFunction(\"quantile_at_value\")\n+    @Description(\"Given an input x between min/max values of qdigest, find which quantile is represented by that value\")\n+    @SqlType(StandardTypes.DOUBLE)\n+    public static double quantileAtValueReal(@SqlType(\"qdigest(real)\") Slice input, @SqlType(StandardTypes.REAL) long value) {\n+        return quantileAtValueBigint(input, floatToSortableInt(intBitsToFloat((int) value)));\n+    }\n+\n+    @ScalarFunction(\"quantile_at_value\")\n+    @Description(\"Given an input x between min/max values of qdigest, find which quantile is represented by that value\")\n+    @SqlType(StandardTypes.DOUBLE)\n+    public static double quantileAtValueBigint(@SqlType(\"qdigest(bigint)\") Slice input, @SqlType(StandardTypes.BIGINT) long value) {\n+        QuantileDigest digest = new QuantileDigest(input);\n+        // when qdigest is empty, return the upper bound quantile to be consistent with non-empty scenarios", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bbfec54ac21f35985ef89794e4200b2fa0daf69"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY1NTA2NA==", "bodyText": "For non-empty scenarios, suppose there are 100 values with 40 of them smaller than value X, then the quantile number returned is 0.4\nI think maybe it is better to set empty scenario to return 0.0 instead of 1.0? because for non-empty scenario, if no values in the digest is smaller than X, it will return 0.0", "url": "https://github.com/prestodb/presto/pull/14608#discussion_r435655064", "createdAt": "2020-06-05T02:21:44Z", "author": {"login": "pguofb"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/QuantileDigestFunctions.java", "diffHunk": "@@ -63,6 +67,31 @@ public static long valueAtQuantileBigint(@SqlType(\"qdigest(bigint)\") Slice input\n         return new QuantileDigest(input).getQuantile(quantile);\n     }\n \n+    @ScalarFunction(\"quantile_at_value\")\n+    @Description(\"Given an input x between min/max values of qdigest, find which quantile is represented by that value\")\n+    @SqlType(StandardTypes.DOUBLE)\n+    public static double quantileAtValueDouble(@SqlType(\"qdigest(double)\") Slice input, @SqlType(StandardTypes.DOUBLE) double value) {\n+        return quantileAtValueBigint(input, doubleToSortableLong(value));\n+    }\n+\n+    @ScalarFunction(\"quantile_at_value\")\n+    @Description(\"Given an input x between min/max values of qdigest, find which quantile is represented by that value\")\n+    @SqlType(StandardTypes.DOUBLE)\n+    public static double quantileAtValueReal(@SqlType(\"qdigest(real)\") Slice input, @SqlType(StandardTypes.REAL) long value) {\n+        return quantileAtValueBigint(input, floatToSortableInt(intBitsToFloat((int) value)));\n+    }\n+\n+    @ScalarFunction(\"quantile_at_value\")\n+    @Description(\"Given an input x between min/max values of qdigest, find which quantile is represented by that value\")\n+    @SqlType(StandardTypes.DOUBLE)\n+    public static double quantileAtValueBigint(@SqlType(\"qdigest(bigint)\") Slice input, @SqlType(StandardTypes.BIGINT) long value) {\n+        QuantileDigest digest = new QuantileDigest(input);\n+        // when qdigest is empty, return the upper bound quantile to be consistent with non-empty scenarios", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYwNDY2NA=="}, "originalCommit": {"oid": "1bbfec54ac21f35985ef89794e4200b2fa0daf69"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk5NjIxNg==", "bodyText": "Yes, return 0 for empty qdigest makes more sense.\nCould you combine to a single commit for better readability in commit history?", "url": "https://github.com/prestodb/presto/pull/14608#discussion_r435996216", "createdAt": "2020-06-05T15:26:55Z", "author": {"login": "viczhang861"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/QuantileDigestFunctions.java", "diffHunk": "@@ -63,6 +67,31 @@ public static long valueAtQuantileBigint(@SqlType(\"qdigest(bigint)\") Slice input\n         return new QuantileDigest(input).getQuantile(quantile);\n     }\n \n+    @ScalarFunction(\"quantile_at_value\")\n+    @Description(\"Given an input x between min/max values of qdigest, find which quantile is represented by that value\")\n+    @SqlType(StandardTypes.DOUBLE)\n+    public static double quantileAtValueDouble(@SqlType(\"qdigest(double)\") Slice input, @SqlType(StandardTypes.DOUBLE) double value) {\n+        return quantileAtValueBigint(input, doubleToSortableLong(value));\n+    }\n+\n+    @ScalarFunction(\"quantile_at_value\")\n+    @Description(\"Given an input x between min/max values of qdigest, find which quantile is represented by that value\")\n+    @SqlType(StandardTypes.DOUBLE)\n+    public static double quantileAtValueReal(@SqlType(\"qdigest(real)\") Slice input, @SqlType(StandardTypes.REAL) long value) {\n+        return quantileAtValueBigint(input, floatToSortableInt(intBitsToFloat((int) value)));\n+    }\n+\n+    @ScalarFunction(\"quantile_at_value\")\n+    @Description(\"Given an input x between min/max values of qdigest, find which quantile is represented by that value\")\n+    @SqlType(StandardTypes.DOUBLE)\n+    public static double quantileAtValueBigint(@SqlType(\"qdigest(bigint)\") Slice input, @SqlType(StandardTypes.BIGINT) long value) {\n+        QuantileDigest digest = new QuantileDigest(input);\n+        // when qdigest is empty, return the upper bound quantile to be consistent with non-empty scenarios", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYwNDY2NA=="}, "originalCommit": {"oid": "1bbfec54ac21f35985ef89794e4200b2fa0daf69"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjQxOTAxOnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/functions/qdigest.rst", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxODozMjowN1rOGf5MgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxODozMjowN1rOGf5MgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA5NjEyOQ==", "bodyText": "Returns the approximate quantile number between 0 and 1 from the quantile digest given an input value. If quantile digest is empty, return 0.", "url": "https://github.com/prestodb/presto/pull/14608#discussion_r436096129", "createdAt": "2020-06-05T18:32:07Z", "author": {"login": "viczhang861"}, "path": "presto-docs/src/main/sphinx/functions/qdigest.rst", "diffHunk": "@@ -30,6 +30,11 @@ Functions\n     Returns the approximate percentile values from the quantile digest given\n     the number ``quantile`` between 0 and 1.\n \n+.. function:: quantile_at_value(qdigest(T), T) -> quantile\n+\n+    Returns the approximate ``quantile`` number between 0 and 1\n+    from the quantile digest given an input value.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5dcc028179581ea706595b2ce53a867a133ce793"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjQ4MDQ5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/QuantileDigestFunctions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxODo1Mjo1OVrOGf5zgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxODo1Mjo1OVrOGf5zgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEwNjExMg==", "bodyText": "When no value in the non-empty qdigest is larger than the input value,  we actually return 1. Thus, I recommend to remove this comment and just document the behavior in qdigest.rst file is enough. Zero is chosen since it is more like empty.\n\n\nThrow an error for empty qdigest is also not ideal,  since value_at_quantile function doesn't throw error for empty qdigest.", "url": "https://github.com/prestodb/presto/pull/14608#discussion_r436106112", "createdAt": "2020-06-05T18:52:59Z", "author": {"login": "viczhang861"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/QuantileDigestFunctions.java", "diffHunk": "@@ -63,6 +67,36 @@ public static long valueAtQuantileBigint(@SqlType(\"qdigest(bigint)\") Slice input\n         return new QuantileDigest(input).getQuantile(quantile);\n     }\n \n+    @ScalarFunction(\"quantile_at_value\")\n+    @Description(\"Given an input x between min/max values of qdigest, find which quantile is represented by that value\")\n+    @SqlType(StandardTypes.DOUBLE)\n+    public static double quantileAtValueDouble(@SqlType(\"qdigest(double)\") Slice input, @SqlType(StandardTypes.DOUBLE) double value)\n+    {\n+        return quantileAtValueBigint(input, doubleToSortableLong(value));\n+    }\n+\n+    @ScalarFunction(\"quantile_at_value\")\n+    @Description(\"Given an input x between min/max values of qdigest, find which quantile is represented by that value\")\n+    @SqlType(StandardTypes.DOUBLE)\n+    public static double quantileAtValueReal(@SqlType(\"qdigest(real)\") Slice input, @SqlType(StandardTypes.REAL) long value)\n+    {\n+        return quantileAtValueBigint(input, floatToSortableInt(intBitsToFloat((int) value)));\n+    }\n+\n+    @ScalarFunction(\"quantile_at_value\")\n+    @Description(\"Given an input x between min/max values of qdigest, find which quantile is represented by that value\")\n+    @SqlType(StandardTypes.DOUBLE)\n+    public static double quantileAtValueBigint(@SqlType(\"qdigest(bigint)\") Slice input, @SqlType(StandardTypes.BIGINT) long value)\n+    {\n+        QuantileDigest digest = new QuantileDigest(input);\n+        // to be consistent with non-empty scenarios. When no value in the digest is smaller than the input, always return 0.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5dcc028179581ea706595b2ce53a867a133ce793"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjcwODQwOnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/functions/qdigest.rst", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMDoxMzo0NVrOGf8Dtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMDoxMzo0NVrOGf8Dtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE0MzAzMQ==", "bodyText": "Let's also document the behavior when the value is outside of the range of the qdigest.", "url": "https://github.com/prestodb/presto/pull/14608#discussion_r436143031", "createdAt": "2020-06-05T20:13:45Z", "author": {"login": "tdcmeehan"}, "path": "presto-docs/src/main/sphinx/functions/qdigest.rst", "diffHunk": "@@ -30,6 +30,11 @@ Functions\n     Returns the approximate percentile values from the quantile digest given\n     the number ``quantile`` between 0 and 1.\n \n+.. function:: quantile_at_value(qdigest(T), T) -> quantile\n+\n+    Returns the approximate ``quantile`` number between 0 and 1 from the\n+    quantile digest given an input value. If quantile digest is empty, return 0.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4360e42e3413a08a9bcd1a5d78632ac718cb1819"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjcyMTM5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/com/facebook/presto/operator/scalar/TestQuantileDigestFunctions.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMDoxOToxMlrOGf8MBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMjozNjoyMVrOGf_LSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE0NTE1OA==", "bodyText": "I see some surprising results here when adding additional test cases for doubles:\n\nDouble.NaN as the input value returns 1.0\n(Edit: Double.MIN_VALUE is fine, I forgot this was just slightly greater than 0)", "url": "https://github.com/prestodb/presto/pull/14608#discussion_r436145158", "createdAt": "2020-06-05T20:19:12Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/test/java/com/facebook/presto/operator/scalar/TestQuantileDigestFunctions.java", "diffHunk": "@@ -71,6 +72,31 @@ public void testValueAtQuantileBigint()\n                 5L);\n     }\n \n+    @Test\n+    public void testQuantileAtValueBigint()\n+    {\n+        QuantileDigest qdigest = new QuantileDigest(1);\n+        addAll(qdigest, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4360e42e3413a08a9bcd1a5d78632ac718cb1819"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE1MTA0Mw==", "bodyText": "Yes, this is expected. The Double type is not directly interfaced with the qdigest, but encoded in a special way. If you try to test the already existing value_at_quantile function, e.g., something like\n@Test\n    public void testValueAtQuantileDouble()\n    {\n        QuantileDigest qdigest = new QuantileDigest(1);\n        addAll(qdigest, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9);\n        functionAssertions.assertFunction(format(\"value_at_quantile(CAST(X'%s' AS qdigest(double)), 0.5)\", toHexString(qdigest)),\n                DOUBLE,\n                5L);\n    }\n\nyou will find that the output is 2.5E-323, not 5.0", "url": "https://github.com/prestodb/presto/pull/14608#discussion_r436151043", "createdAt": "2020-06-05T20:33:18Z", "author": {"login": "pguofb"}, "path": "presto-main/src/test/java/com/facebook/presto/operator/scalar/TestQuantileDigestFunctions.java", "diffHunk": "@@ -71,6 +72,31 @@ public void testValueAtQuantileBigint()\n                 5L);\n     }\n \n+    @Test\n+    public void testQuantileAtValueBigint()\n+    {\n+        QuantileDigest qdigest = new QuantileDigest(1);\n+        addAll(qdigest, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE0NTE1OA=="}, "originalCommit": {"oid": "4360e42e3413a08a9bcd1a5d78632ac718cb1819"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE1NDA2Nw==", "bodyText": "Suppose you were to wrap each of those integer literals into doubleToSortableLong, as the QDigest aggregation function does, you'll still see this result.", "url": "https://github.com/prestodb/presto/pull/14608#discussion_r436154067", "createdAt": "2020-06-05T20:40:27Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/test/java/com/facebook/presto/operator/scalar/TestQuantileDigestFunctions.java", "diffHunk": "@@ -71,6 +72,31 @@ public void testValueAtQuantileBigint()\n                 5L);\n     }\n \n+    @Test\n+    public void testQuantileAtValueBigint()\n+    {\n+        QuantileDigest qdigest = new QuantileDigest(1);\n+        addAll(qdigest, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE0NTE1OA=="}, "originalCommit": {"oid": "4360e42e3413a08a9bcd1a5d78632ac718cb1819"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE1OTMyMg==", "bodyText": "I tried this example:\n@Test\n    public void testQuantileAtValueDouble()\n    {\n        QuantileDigest qdigest = new QuantileDigest(1);\n        addAll(qdigest, doubleToSortableLong(0.0),doubleToSortableLong(1),doubleToSortableLong(2),doubleToSortableLong(3),doubleToSortableLong(4),doubleToSortableLong(5),doubleToSortableLong(6),doubleToSortableLong(7),doubleToSortableLong(8),doubleToSortableLong(9));\n        functionAssertions.assertFunction(format(\"quantile_at_value(CAST(X'%s' AS qdigest(double)), 6)\", toHexString(qdigest)),\n                DOUBLE,\n                0.6);\n    }\n\nAnd it gives me the right output 0.6 as expected.", "url": "https://github.com/prestodb/presto/pull/14608#discussion_r436159322", "createdAt": "2020-06-05T20:53:33Z", "author": {"login": "pguofb"}, "path": "presto-main/src/test/java/com/facebook/presto/operator/scalar/TestQuantileDigestFunctions.java", "diffHunk": "@@ -71,6 +72,31 @@ public void testValueAtQuantileBigint()\n                 5L);\n     }\n \n+    @Test\n+    public void testQuantileAtValueBigint()\n+    {\n+        QuantileDigest qdigest = new QuantileDigest(1);\n+        addAll(qdigest, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE0NTE1OA=="}, "originalCommit": {"oid": "4360e42e3413a08a9bcd1a5d78632ac718cb1819"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE2MDc4Mg==", "bodyText": "Yes, that's expected.  However, if you try to replace 0.6 with nan() in the assert above, it will return 1.0--this is strange because it implies NaN is greater than all of the values in the digest.", "url": "https://github.com/prestodb/presto/pull/14608#discussion_r436160782", "createdAt": "2020-06-05T20:57:04Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/test/java/com/facebook/presto/operator/scalar/TestQuantileDigestFunctions.java", "diffHunk": "@@ -71,6 +72,31 @@ public void testValueAtQuantileBigint()\n                 5L);\n     }\n \n+    @Test\n+    public void testQuantileAtValueBigint()\n+    {\n+        QuantileDigest qdigest = new QuantileDigest(1);\n+        addAll(qdigest, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE0NTE1OA=="}, "originalCommit": {"oid": "4360e42e3413a08a9bcd1a5d78632ac718cb1819"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE2NDEwMg==", "bodyText": "Ok, I see you point. I'm not quite familiar with the internals of QDigest data structure, do you have any suggestion on what is the min/max range for it? I have a rough guess of [-2^63,  2^63 - 1] ?", "url": "https://github.com/prestodb/presto/pull/14608#discussion_r436164102", "createdAt": "2020-06-05T21:05:39Z", "author": {"login": "pguofb"}, "path": "presto-main/src/test/java/com/facebook/presto/operator/scalar/TestQuantileDigestFunctions.java", "diffHunk": "@@ -71,6 +72,31 @@ public void testValueAtQuantileBigint()\n                 5L);\n     }\n \n+    @Test\n+    public void testQuantileAtValueBigint()\n+    {\n+        QuantileDigest qdigest = new QuantileDigest(1);\n+        addAll(qdigest, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE0NTE1OA=="}, "originalCommit": {"oid": "4360e42e3413a08a9bcd1a5d78632ac718cb1819"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE2NTA3Mg==", "bodyText": "There is a getMax and getMin on the data structure which will tell you what is the max/min for the specific one you are using.", "url": "https://github.com/prestodb/presto/pull/14608#discussion_r436165072", "createdAt": "2020-06-05T21:08:32Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/test/java/com/facebook/presto/operator/scalar/TestQuantileDigestFunctions.java", "diffHunk": "@@ -71,6 +72,31 @@ public void testValueAtQuantileBigint()\n                 5L);\n     }\n \n+    @Test\n+    public void testQuantileAtValueBigint()\n+    {\n+        QuantileDigest qdigest = new QuantileDigest(1);\n+        addAll(qdigest, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE0NTE1OA=="}, "originalCommit": {"oid": "4360e42e3413a08a9bcd1a5d78632ac718cb1819"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE5NDEyMQ==", "bodyText": "Added checking on current min/max range of the QDigest, and will return null when the input value is beyond the range. And also added the nan() test case in the unit test, and verified it is now returning null.", "url": "https://github.com/prestodb/presto/pull/14608#discussion_r436194121", "createdAt": "2020-06-05T22:36:21Z", "author": {"login": "pguofb"}, "path": "presto-main/src/test/java/com/facebook/presto/operator/scalar/TestQuantileDigestFunctions.java", "diffHunk": "@@ -71,6 +72,31 @@ public void testValueAtQuantileBigint()\n                 5L);\n     }\n \n+    @Test\n+    public void testQuantileAtValueBigint()\n+    {\n+        QuantileDigest qdigest = new QuantileDigest(1);\n+        addAll(qdigest, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE0NTE1OA=="}, "originalCommit": {"oid": "4360e42e3413a08a9bcd1a5d78632ac718cb1819"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjA2MjI4OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/functions/qdigest.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxOToyNDo1MlrOGgtLWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxOToyNDo1MlrOGgtLWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk0NzgwMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                If input value is beyond the min/max range of the quantile digest, return null.\n          \n          \n            \n                Null is returned if the input value is outside of the range of the quantile digest.", "url": "https://github.com/prestodb/presto/pull/14608#discussion_r436947800", "createdAt": "2020-06-08T19:24:52Z", "author": {"login": "tdcmeehan"}, "path": "presto-docs/src/main/sphinx/functions/qdigest.rst", "diffHunk": "@@ -30,6 +30,12 @@ Functions\n     Returns the approximate percentile values from the quantile digest given\n     the number ``quantile`` between 0 and 1.\n \n+.. function:: quantile_at_value(qdigest(T), T) -> quantile\n+\n+    Returns the approximate ``quantile`` number between 0 and 1 from the\n+    quantile digest given an input value. If quantile digest is empty, return 0.\n+    If input value is beyond the min/max range of the quantile digest, return null.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c573acab680c607c119c639e1c02087443c2d686"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjA2NjE5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/QuantileDigestFunctions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxOToyNTo1OVrOGgtNxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMDoxODowMVrOGgu1qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk0ODQyMA==", "bodyText": "I think this should be treated like a value outside of the range of the qdigest (null), because really this is just a special case of the below check.  Actually, we could just remove this first check, because when it's empty the digest's max value is Long.MIN_VALUE and its min value is Long.MAX_VALUE.", "url": "https://github.com/prestodb/presto/pull/14608#discussion_r436948420", "createdAt": "2020-06-08T19:25:59Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/QuantileDigestFunctions.java", "diffHunk": "@@ -63,6 +68,41 @@ public static long valueAtQuantileBigint(@SqlType(\"qdigest(bigint)\") Slice input\n         return new QuantileDigest(input).getQuantile(quantile);\n     }\n \n+    @ScalarFunction(\"quantile_at_value\")\n+    @Description(\"Given an input x between min/max values of qdigest, find which quantile is represented by that value\")\n+    @SqlType(StandardTypes.DOUBLE)\n+    @SqlNullable\n+    public static Double quantileAtValueDouble(@SqlType(\"qdigest(double)\") Slice input, @SqlType(StandardTypes.DOUBLE) double value)\n+    {\n+        return quantileAtValueBigint(input, doubleToSortableLong(value));\n+    }\n+\n+    @ScalarFunction(\"quantile_at_value\")\n+    @Description(\"Given an input x between min/max values of qdigest, find which quantile is represented by that value\")\n+    @SqlType(StandardTypes.DOUBLE)\n+    @SqlNullable\n+    public static Double quantileAtValueReal(@SqlType(\"qdigest(real)\") Slice input, @SqlType(StandardTypes.REAL) long value)\n+    {\n+        return quantileAtValueBigint(input, floatToSortableInt(intBitsToFloat((int) value)));\n+    }\n+\n+    @ScalarFunction(\"quantile_at_value\")\n+    @Description(\"Given an input x between min/max values of qdigest, find which quantile is represented by that value\")\n+    @SqlType(StandardTypes.DOUBLE)\n+    @SqlNullable\n+    public static Double quantileAtValueBigint(@SqlType(\"qdigest(bigint)\") Slice input, @SqlType(StandardTypes.BIGINT) long value)\n+    {\n+        QuantileDigest digest = new QuantileDigest(input);\n+        if (digest.getCount() == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c573acab680c607c119c639e1c02087443c2d686"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk3NTAxNg==", "bodyText": "Sure, I agree returning null for empty digest, and merged into one if-block check.", "url": "https://github.com/prestodb/presto/pull/14608#discussion_r436975016", "createdAt": "2020-06-08T20:18:01Z", "author": {"login": "pguofb"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/QuantileDigestFunctions.java", "diffHunk": "@@ -63,6 +68,41 @@ public static long valueAtQuantileBigint(@SqlType(\"qdigest(bigint)\") Slice input\n         return new QuantileDigest(input).getQuantile(quantile);\n     }\n \n+    @ScalarFunction(\"quantile_at_value\")\n+    @Description(\"Given an input x between min/max values of qdigest, find which quantile is represented by that value\")\n+    @SqlType(StandardTypes.DOUBLE)\n+    @SqlNullable\n+    public static Double quantileAtValueDouble(@SqlType(\"qdigest(double)\") Slice input, @SqlType(StandardTypes.DOUBLE) double value)\n+    {\n+        return quantileAtValueBigint(input, doubleToSortableLong(value));\n+    }\n+\n+    @ScalarFunction(\"quantile_at_value\")\n+    @Description(\"Given an input x between min/max values of qdigest, find which quantile is represented by that value\")\n+    @SqlType(StandardTypes.DOUBLE)\n+    @SqlNullable\n+    public static Double quantileAtValueReal(@SqlType(\"qdigest(real)\") Slice input, @SqlType(StandardTypes.REAL) long value)\n+    {\n+        return quantileAtValueBigint(input, floatToSortableInt(intBitsToFloat((int) value)));\n+    }\n+\n+    @ScalarFunction(\"quantile_at_value\")\n+    @Description(\"Given an input x between min/max values of qdigest, find which quantile is represented by that value\")\n+    @SqlType(StandardTypes.DOUBLE)\n+    @SqlNullable\n+    public static Double quantileAtValueBigint(@SqlType(\"qdigest(bigint)\") Slice input, @SqlType(StandardTypes.BIGINT) long value)\n+    {\n+        QuantileDigest digest = new QuantileDigest(input);\n+        if (digest.getCount() == 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk0ODQyMA=="}, "originalCommit": {"oid": "c573acab680c607c119c639e1c02087443c2d686"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjA3Nzc5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/com/facebook/presto/operator/scalar/TestQuantileDigestFunctions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxOToyOToyOVrOGgtVQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxOToyOToyOVrOGgtVQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk1MDMzOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    QuantileDigest qdigest = new QuantileDigest(1);\n          \n          \n            \n                    addAll(qdigest, doubleToSortableLong(0), doubleToSortableLong(1), doubleToSortableLong(2),\n          \n          \n            \n                            doubleToSortableLong(3), doubleToSortableLong(4), doubleToSortableLong(5),\n          \n          \n            \n                            doubleToSortableLong(6), doubleToSortableLong(7), doubleToSortableLong(8),\n          \n          \n            \n                            doubleToSortableLong(9));\n          \n          \n            \n                    QuantileDigest qdigest = new QuantileDigest(1);\n          \n          \n            \n                            ImmutableList.of(0, 1, 2, 3, 4, 5, 6, 7, 8, 9).stream()\n          \n          \n            \n                                    .mapToLong(FloatingPointBitsConverterUtil::doubleToSortableLong)\n          \n          \n            \n                                    .forEach(qdigest::add);", "url": "https://github.com/prestodb/presto/pull/14608#discussion_r436950338", "createdAt": "2020-06-08T19:29:29Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/test/java/com/facebook/presto/operator/scalar/TestQuantileDigestFunctions.java", "diffHunk": "@@ -71,6 +73,53 @@ public void testValueAtQuantileBigint()\n                 5L);\n     }\n \n+    @Test\n+    public void testQuantileAtValueBigint()\n+    {\n+        QuantileDigest qdigest = new QuantileDigest(1);\n+        addAll(qdigest, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9);\n+        functionAssertions.assertFunction(format(\"quantile_at_value(CAST(X'%s' AS qdigest(bigint)), 20)\", toHexString(qdigest)),\n+                DOUBLE,\n+                null);\n+        functionAssertions.assertFunction(format(\"quantile_at_value(CAST(X'%s' AS qdigest(bigint)), 6)\", toHexString(qdigest)),\n+                DOUBLE,\n+                0.6);\n+        functionAssertions.assertFunction(format(\"quantile_at_value(CAST(X'%s' AS qdigest(bigint)), -1)\", toHexString(qdigest)),\n+                DOUBLE,\n+                null);\n+    }\n+\n+    @Test\n+    public void testQuantileAtValueDouble()\n+    {\n+        QuantileDigest qdigest = new QuantileDigest(1);\n+        addAll(qdigest, doubleToSortableLong(0), doubleToSortableLong(1), doubleToSortableLong(2),\n+                doubleToSortableLong(3), doubleToSortableLong(4), doubleToSortableLong(5),\n+                doubleToSortableLong(6), doubleToSortableLong(7), doubleToSortableLong(8),\n+                doubleToSortableLong(9));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c573acab680c607c119c639e1c02087443c2d686"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2725, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}