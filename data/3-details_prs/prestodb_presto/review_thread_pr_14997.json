{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1MjkxMjcz", "number": 14997, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNjoyNjo1NlrOEWq0Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDo1MDoyNFrOEXYIMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMjA1NTcxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/RemoveUnsupportedDynamicFilters.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNjoyNjo1NlrOG-CnDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNjoyNjo1NlrOG-CnDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcwNzY2MQ==", "bodyText": "This can be merged with visitJoin's common part just like how you did for the impl part.", "url": "https://github.com/prestodb/presto/pull/14997#discussion_r467707661", "createdAt": "2020-08-10T06:26:56Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/RemoveUnsupportedDynamicFilters.java", "diffHunk": "@@ -144,6 +145,45 @@ public PlanWithConsumedDynamicFilters visitJoin(JoinNode node, Set<String> allow\n             return new PlanWithConsumedDynamicFilters(node, ImmutableSet.copyOf(consumed));\n         }\n \n+        @Override\n+        public PlanWithConsumedDynamicFilters visitSemiJoin(SemiJoinNode node, Set<String> allowedDynamicFilterIds)\n+        {\n+            ImmutableSet<String> allowedDynamicFilterIdsProbeSide = ImmutableSet.<String>builder()\n+                    .addAll(node.getDynamicFilters().keySet())\n+                    .addAll(allowedDynamicFilterIds)\n+                    .build();\n+\n+            PlanWithConsumedDynamicFilters leftResult = node.getSource().accept(this, allowedDynamicFilterIdsProbeSide);\n+            Set<String> consumedProbeSide = leftResult.getConsumedDynamicFilterIds();\n+            Map<String, VariableReferenceExpression> dynamicFilters = node.getDynamicFilters().entrySet().stream()\n+                    .filter(entry -> consumedProbeSide.contains(entry.getKey()))\n+                    .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n+\n+            PlanWithConsumedDynamicFilters rightResult = node.getFilteringSource().accept(this, allowedDynamicFilterIds);\n+            Set<String> consumed = new HashSet<>(rightResult.getConsumedDynamicFilterIds());\n+            consumed.addAll(consumedProbeSide);\n+            consumed.removeAll(dynamicFilters.keySet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b74d4edf8b455aba3a8edaf54edee3a6b8100f6e"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMjA2ODI5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/sanity/DynamicFiltersChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNjozMjo0M1rOG-CuEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNjozMjo0M1rOG-CuEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcwOTQ1OA==", "bodyText": "Same, you can merge them with visitJoin with a common helper", "url": "https://github.com/prestodb/presto/pull/14997#discussion_r467709458", "createdAt": "2020-08-10T06:32:43Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/sanity/DynamicFiltersChecker.java", "diffHunk": "@@ -82,6 +83,24 @@ public void validate(PlanNode plan, Session session, Metadata metadata, SqlParse\n                 return ImmutableSet.copyOf(unmatched);\n             }\n \n+            @Override\n+            public Set<String> visitSemiJoin(SemiJoinNode node, Void context)\n+            {\n+                Set<String> currentJoinDynamicFilters = node.getDynamicFilters().keySet();\n+                Set<String> consumedProbeSide = node.getSource().accept(this, context);\n+                verify(\n+                        difference(currentJoinDynamicFilters, consumedProbeSide).isEmpty(),\n+                        \"Dynamic filters present in join were not fully consumed by it's probe side.\");\n+\n+                Set<String> consumedBuildSide = node.getFilteringSource().accept(this, context);\n+                verify(intersection(currentJoinDynamicFilters, consumedBuildSide).isEmpty());\n+\n+                Set<String> unmatched = new HashSet<>(consumedBuildSide);\n+                unmatched.addAll(consumedProbeSide);\n+                unmatched.removeAll(currentJoinDynamicFilters);\n+                return ImmutableSet.copyOf(unmatched);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b74d4edf8b455aba3a8edaf54edee3a6b8100f6e"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMjA5MTQ1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/plan/NodeWithDynamicFilter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNjo0Mzo0OVrOG-C7kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxODowODowNFrOG-Zs_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcxMjkxMg==", "bodyText": "You should have all XXXJoinNode to inherit this including spatial, index, etc.\npublic abstract class AbstractJoinNode\n        extends PlanNode\n{\n    protected AbstractJoinNode(PlanNodeId id)\n    {\n        super(id);\n    }\n\n    public abstract Map<String, VariableReferenceExpression> getDynamicFilters();\n\n    public abstract PlanNode getLeft();\n\n    public abstract PlanNode getRight();\n}", "url": "https://github.com/prestodb/presto/pull/14997#discussion_r467712912", "createdAt": "2020-08-10T06:43:49Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/plan/NodeWithDynamicFilter.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.planner.plan;\n+\n+import com.facebook.presto.spi.plan.PlanNode;\n+import com.facebook.presto.spi.relation.VariableReferenceExpression;\n+\n+import java.util.Map;\n+\n+public interface NodeWithDynamicFilter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51c68635db9c7257787b3177118d1fe1e6ba1639"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA4NTM2MA==", "bodyText": "actually because JoinNode, SemiNode has to extends InternalPlanNode, I'm not sure if we want AbstractJoinNode  to extend InternalPlanNode?", "url": "https://github.com/prestodb/presto/pull/14997#discussion_r468085360", "createdAt": "2020-08-10T18:06:51Z", "author": {"login": "kewang1024"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/plan/NodeWithDynamicFilter.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.planner.plan;\n+\n+import com.facebook.presto.spi.plan.PlanNode;\n+import com.facebook.presto.spi.relation.VariableReferenceExpression;\n+\n+import java.util.Map;\n+\n+public interface NodeWithDynamicFilter", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcxMjkxMg=="}, "originalCommit": {"oid": "51c68635db9c7257787b3177118d1fe1e6ba1639"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA4NjAxNQ==", "bodyText": "Correct", "url": "https://github.com/prestodb/presto/pull/14997#discussion_r468086015", "createdAt": "2020-08-10T18:08:04Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/plan/NodeWithDynamicFilter.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.planner.plan;\n+\n+import com.facebook.presto.spi.plan.PlanNode;\n+import com.facebook.presto.spi.relation.VariableReferenceExpression;\n+\n+import java.util.Map;\n+\n+public interface NodeWithDynamicFilter", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcxMjkxMg=="}, "originalCommit": {"oid": "51c68635db9c7257787b3177118d1fe1e6ba1639"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMjA5MjI5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/plan/SemiJoinNode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNjo0NDoxM1rOG-C8Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNjo0NDoxM1rOG-C8Bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcxMzAzMA==", "bodyText": "extends AbstractJoinNode", "url": "https://github.com/prestodb/presto/pull/14997#discussion_r467713030", "createdAt": "2020-08-10T06:44:13Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/plan/SemiJoinNode.java", "diffHunk": "@@ -32,6 +32,7 @@\n @Immutable\n public class SemiJoinNode\n         extends InternalPlanNode\n+        implements NodeWithDynamicFilter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51c68635db9c7257787b3177118d1fe1e6ba1639"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMjA5MjUwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/plan/JoinNode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNjo0NDoyM1rOG-C8Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNjo0NDoyM1rOG-C8Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcxMzA2Ng==", "bodyText": "extends AbstractJoinNode", "url": "https://github.com/prestodb/presto/pull/14997#discussion_r467713066", "createdAt": "2020-08-10T06:44:23Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/plan/JoinNode.java", "diffHunk": "@@ -50,6 +50,7 @@\n @Immutable\n public class JoinNode\n         extends InternalPlanNode\n+        implements NodeWithDynamicFilter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51c68635db9c7257787b3177118d1fe1e6ba1639"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTE3MTY0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/plan/JoinNodeInterface.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMToxNDoyOVrOG-gBzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMToxNDoyOVrOG-gBzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE4OTY0Ng==", "bodyText": "Remove Side. A single word is good enough.", "url": "https://github.com/prestodb/presto/pull/14997#discussion_r468189646", "createdAt": "2020-08-10T21:14:29Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/plan/JoinNodeInterface.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.planner.plan;\n+\n+import com.facebook.presto.spi.plan.PlanNode;\n+import com.facebook.presto.spi.relation.VariableReferenceExpression;\n+\n+import java.util.Map;\n+\n+public interface JoinNodeInterface\n+{\n+    Map<String, VariableReferenceExpression> getDynamicFilters();\n+\n+    PlanNode getProbeSide();\n+\n+    PlanNode getBuildSide();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2eed7a0d32d3f24f299f5e79720f7701b9cf1fe6"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTE3NDM4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/plan/JoinNodeInterface.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMToxNToxN1rOG-gDbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMToxNToxN1rOG-gDbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE5MDA2MQ==", "bodyText": "This should inherit InternalPlanNode rather than being a new interface.", "url": "https://github.com/prestodb/presto/pull/14997#discussion_r468190061", "createdAt": "2020-08-10T21:15:17Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/plan/JoinNodeInterface.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.planner.plan;\n+\n+import com.facebook.presto.spi.plan.PlanNode;\n+import com.facebook.presto.spi.relation.VariableReferenceExpression;\n+\n+import java.util.Map;\n+\n+public interface JoinNodeInterface", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2eed7a0d32d3f24f299f5e79720f7701b9cf1fe6"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyOTQ2NjYxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/RemoveUnsupportedDynamicFilters.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDo0NjoyNlrOG_Inmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDo0NjoyNlrOG_Inmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg1NDY4Mg==", "bodyText": "extractDynamicFilterFromJoin", "url": "https://github.com/prestodb/presto/pull/14997#discussion_r468854682", "createdAt": "2020-08-11T20:46:26Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/RemoveUnsupportedDynamicFilters.java", "diffHunk": "@@ -106,42 +109,72 @@ public PlanWithConsumedDynamicFilters visitPlan(PlanNode node, Set<String> allow\n \n         @Override\n         public PlanWithConsumedDynamicFilters visitJoin(JoinNode node, Set<String> allowedDynamicFilterIds)\n+        {\n+            JoinDynamicFilterResult joinDynamicFilterResult = visitJoinUtil(node, allowedDynamicFilterIds);\n+            if (!joinDynamicFilterResult.getProbe().equals(node.getLeft()) || !joinDynamicFilterResult.getBuild().equals(node.getRight()) || !joinDynamicFilterResult.getDynamicFilters().equals(node.getDynamicFilters())) {\n+                return new PlanWithConsumedDynamicFilters(\n+                        new JoinNode(\n+                            node.getId(),\n+                            node.getType(),\n+                                joinDynamicFilterResult.getProbe(),\n+                                joinDynamicFilterResult.getBuild(),\n+                            node.getCriteria(),\n+                            node.getOutputVariables(),\n+                            node.getFilter(),\n+                            node.getLeftHashVariable(),\n+                            node.getRightHashVariable(),\n+                            node.getDistributionType(),\n+                                joinDynamicFilterResult.getDynamicFilters()),\n+                        ImmutableSet.copyOf(joinDynamicFilterResult.getConsumed()));\n+            }\n+            return new PlanWithConsumedDynamicFilters(node, ImmutableSet.copyOf(joinDynamicFilterResult.getConsumed()));\n+        }\n+\n+        @Override\n+        public PlanWithConsumedDynamicFilters visitSemiJoin(SemiJoinNode node, Set<String> allowedDynamicFilterIds)\n+        {\n+            JoinDynamicFilterResult joinDynamicFilterResult = visitJoinUtil(node, allowedDynamicFilterIds);\n+            if (!joinDynamicFilterResult.getProbe().equals(node.getSource())\n+                    || !joinDynamicFilterResult.getBuild().equals(node.getFilteringSource())\n+                    || !joinDynamicFilterResult.getDynamicFilters().equals(node.getDynamicFilters())) {\n+                return new PlanWithConsumedDynamicFilters(\n+                        new SemiJoinNode(\n+                                node.getId(),\n+                                joinDynamicFilterResult.getProbe(),\n+                                joinDynamicFilterResult.getBuild(),\n+                                node.getSourceJoinVariable(),\n+                                node.getFilteringSourceJoinVariable(),\n+                                node.getSemiJoinOutput(),\n+                                node.getSourceHashVariable(),\n+                                node.getFilteringSourceHashVariable(),\n+                                node.getDistributionType(),\n+                                joinDynamicFilterResult.getDynamicFilters()),\n+                        ImmutableSet.copyOf(joinDynamicFilterResult.getConsumed()));\n+            }\n+            return new PlanWithConsumedDynamicFilters(node, ImmutableSet.copyOf(joinDynamicFilterResult.getConsumed()));\n+        }\n+\n+        private JoinDynamicFilterResult visitJoinUtil(AbstractJoinNode node, Set<String> allowedDynamicFilterIds)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9991a46d701a242ef2d023213a8f545f9853888d"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyOTQ3MjY5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/plan/JoinNode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDo0ODoyMlrOG_Irgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDo0ODoyMlrOG_Irgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg1NTY4Mw==", "bodyText": "This is not a JsonProperty. It's an Override. Same for the one below", "url": "https://github.com/prestodb/presto/pull/14997#discussion_r468855683", "createdAt": "2020-08-11T20:48:22Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/plan/JoinNode.java", "diffHunk": "@@ -231,12 +231,24 @@ public PlanNode getLeft()\n         return left;\n     }\n \n+    @JsonProperty", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9991a46d701a242ef2d023213a8f545f9853888d"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyOTQ3NDU0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/plan/SemiJoinNode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDo0ODo1NVrOG_Islg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDo0ODo1NVrOG_Islg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg1NTk1OA==", "bodyText": "same", "url": "https://github.com/prestodb/presto/pull/14997#discussion_r468855958", "createdAt": "2020-08-11T20:48:55Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/plan/SemiJoinNode.java", "diffHunk": "@@ -78,12 +82,24 @@ public PlanNode getSource()\n         return source;\n     }\n \n+    @JsonProperty", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9991a46d701a242ef2d023213a8f545f9853888d"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyOTQ3NDc4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/plan/SemiJoinNode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDo0ODo1OVrOG_IsuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDo0ODo1OVrOG_IsuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg1NTk5Mw==", "bodyText": "same", "url": "https://github.com/prestodb/presto/pull/14997#discussion_r468855993", "createdAt": "2020-08-11T20:48:59Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/plan/SemiJoinNode.java", "diffHunk": "@@ -78,12 +82,24 @@ public PlanNode getSource()\n         return source;\n     }\n \n+    @JsonProperty\n+    public PlanNode getProbe()\n+    {\n+        return source;\n+    }\n+\n     @JsonProperty\n     public PlanNode getFilteringSource()\n     {\n         return filteringSource;\n     }\n \n+    @JsonProperty", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9991a46d701a242ef2d023213a8f545f9853888d"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyOTQ4MDE4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/sanity/DynamicFiltersChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDo1MDoyNFrOG_Iv3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDo1MDoyNFrOG_Iv3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg1Njc5OA==", "bodyText": "extractUnmatchedDynamicFIlters\nprivate", "url": "https://github.com/prestodb/presto/pull/14997#discussion_r468856798", "createdAt": "2020-08-11T20:50:24Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/sanity/DynamicFiltersChecker.java", "diffHunk": "@@ -66,14 +68,25 @@ public void validate(PlanNode plan, Session session, Metadata metadata, SqlParse\n \n             @Override\n             public Set<String> visitJoin(JoinNode node, Void context)\n+            {\n+                return visitJoinUtil(node, context);\n+            }\n+\n+            @Override\n+            public Set<String> visitSemiJoin(SemiJoinNode node, Void context)\n+            {\n+                return visitJoinUtil(node, context);\n+            }\n+\n+            public Set<String> visitJoinUtil(AbstractJoinNode node, Void context)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9991a46d701a242ef2d023213a8f545f9853888d"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2282, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}