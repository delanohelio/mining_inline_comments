{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2NTg0Mzc5", "number": 14005, "title": "Move PushdownSubfields below logical optimization", "bodyText": "Ready for review. Looking for ideas on how to test this.\n== NO RELEASE NOTE ==", "createdAt": "2020-01-23T21:50:55Z", "url": "https://github.com/prestodb/presto/pull/14005", "merged": true, "mergeCommit": {"oid": "8296be0c8610858ac9bdca31477be46fa900ec5c"}, "closed": true, "closedAt": "2020-01-28T20:24:55Z", "author": {"login": "sachdevs"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb9R5CqAFqTM0NzY0MzkzMw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABb9jjC-ABqjI5NzgyMzkxMTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3NjQzOTMz", "url": "https://github.com/prestodb/presto/pull/14005#pullrequestreview-347643933", "createdAt": "2020-01-23T22:12:34Z", "commit": {"oid": "cf6181546718c7f8d96dc36492ad223e33d49d45"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMjoxMjozNVrOFhOXxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMjoxNDo1MlrOFhObUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM4Mjc4OA==", "bodyText": "This is the main function that was kind of rewritten. The rest of the file's logic was essentially untouched in this refactor. This implementation is nearly identical to SubfieldExtractor.toSubfield in presto-hive as the functionality is identical from my understanding of the old code.", "url": "https://github.com/prestodb/presto/pull/14005#discussion_r370382788", "createdAt": "2020-01-23T22:12:35Z", "author": {"login": "sachdevs"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/PushdownSubfields.java", "diffHunk": "@@ -478,48 +476,66 @@ private static String getColumnName(Session session, Metadata metadata, TableHan\n             return metadata.getColumnMetadata(session, tableHandle, columnHandle).getName();\n         }\n \n-        private static Optional<Subfield> toSubfield(Node expression)\n+        private static Optional<Subfield> toSubfield(\n+                RowExpression expression,\n+                StandardFunctionResolution functionResolution,\n+                ExpressionOptimizer expressionOptimizer,\n+                ConnectorSession connectorSession)\n         {\n             ImmutableList.Builder<Subfield.PathElement> elements = ImmutableList.builder();\n             while (true) {\n-                if (expression instanceof SymbolReference) {\n-                    return Optional.of(new Subfield(((SymbolReference) expression).getName(), elements.build().reverse()));\n+                if (expression instanceof VariableReferenceExpression) {\n+                    return Optional.of(new Subfield(((VariableReferenceExpression) expression).getName(), elements.build().reverse()));\n                 }\n \n-                if (expression instanceof DereferenceExpression) {\n-                    DereferenceExpression dereference = (DereferenceExpression) expression;\n-                    elements.add(nestedField(dereference.getField().getValue()));\n-                    expression = dereference.getBase();\n-                }\n-                else if (expression instanceof SubscriptExpression) {\n-                    SubscriptExpression subscript = (SubscriptExpression) expression;\n-                    Expression index = subscript.getIndex();\n-                    if (index instanceof Cast) {\n-                        index = ((Cast) index).getExpression();\n-                    }\n-                    if (index instanceof LongLiteral) {\n-                        elements.add(new Subfield.LongSubscript(((LongLiteral) index).getValue()));\n-                    }\n-                    else if (index instanceof StringLiteral) {\n-                        elements.add(new Subfield.StringSubscript(((StringLiteral) index).getValue()));\n+                if (expression instanceof SpecialFormExpression && ((SpecialFormExpression) expression).getForm() == DEREFERENCE) {\n+                    SpecialFormExpression dereference = (SpecialFormExpression) expression;\n+                    RowExpression base = dereference.getArguments().get(0);\n+                    RowType baseType = (RowType) base.getType();\n+\n+                    RowExpression indexExpression = expressionOptimizer.optimize(\n+                            dereference.getArguments().get(1),\n+                            ExpressionOptimizer.Level.OPTIMIZED,\n+                            connectorSession);\n+\n+                    if (indexExpression instanceof ConstantExpression) {\n+                        Object index = ((ConstantExpression) indexExpression).getValue();\n+                        if (index instanceof Number) {\n+                            Optional<String> fieldName = baseType.getFields().get(((Number) index).intValue()).getName();\n+                            if (fieldName.isPresent()) {\n+                                elements.add(nestedField(fieldName.get()));\n+                                expression = base;\n+                                continue;\n+                            }\n+                        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf6181546718c7f8d96dc36492ad223e33d49d45"}, "originalPosition": 235}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM4MzY5Nw==", "bodyText": "This class has also been modified significantly since we do not have such fine granularity visits for RowExpressions. Hence, on \"default\" visits, we simply visit the RowExpression's children.", "url": "https://github.com/prestodb/presto/pull/14005#discussion_r370383697", "createdAt": "2020-01-23T22:14:52Z", "author": {"login": "sachdevs"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/PushdownSubfields.java", "diffHunk": "@@ -529,47 +545,60 @@ private static NestedField nestedField(String name)\n         }\n \n         private static final class SubfieldExtractor\n-                extends DefaultExpressionTraversalVisitor<Void, Context>\n+                extends DefaultRowExpressionTraversalVisitor<Context>\n         {\n-            private final TypeProvider typeProvider;\n+            private final StandardFunctionResolution functionResolution;\n+            private final ExpressionOptimizer expressionOptimizer;\n+            private final ConnectorSession connectorSession;\n \n-            private SubfieldExtractor(TypeProvider typeProvider)\n+            private SubfieldExtractor(StandardFunctionResolution functionResolution, ExpressionOptimizer expressionOptimizer, ConnectorSession connectorSession)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf6181546718c7f8d96dc36492ad223e33d49d45"}, "originalPosition": 292}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3NzE4ODk1", "url": "https://github.com/prestodb/presto/pull/14005#pullrequestreview-347718895", "createdAt": "2020-01-24T02:00:02Z", "commit": {"oid": "cf6181546718c7f8d96dc36492ad223e33d49d45"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwMjowMDowMlrOFhSMfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwMjowMDowMlrOFhSMfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ0NTQzOQ==", "bodyText": "checkState", "url": "https://github.com/prestodb/presto/pull/14005#discussion_r370445439", "createdAt": "2020-01-24T02:00:02Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/PushdownSubfields.java", "diffHunk": "@@ -140,14 +140,14 @@ public PlanNode visitAggregation(AggregationNode node, RewriteContext<Context> c\n                 // Allow sub-field pruning to pass through the arbitrary() aggregation\n                 QualifiedFunctionName aggregateName = metadata.getFunctionManager().getFunctionMetadata(aggregation.getCall().getFunctionHandle()).getName();\n                 if (ARBITRARY_AGGREGATE_FUNCTION.equals(aggregateName)) {\n-                    SymbolReference argument = (SymbolReference) castToExpression(aggregation.getArguments().get(0));\n-                    context.get().addAssignment(variable, new VariableReferenceExpression(argument.getName(), types.get(argument)));\n+                    checkArgument(aggregation.getArguments().get(0) instanceof VariableReferenceExpression);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf6181546718c7f8d96dc36492ad223e33d49d45"}, "originalPosition": 104}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3ODIyMDE0", "url": "https://github.com/prestodb/presto/pull/14005#pullrequestreview-347822014", "createdAt": "2020-01-24T09:09:42Z", "commit": {"oid": "cf6181546718c7f8d96dc36492ad223e33d49d45"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b2dd4f3925d48ddedd6899ee62df350e810b569", "author": {"user": {"login": "sachdevs", "name": "Saksham"}}, "url": "https://github.com/prestodb/presto/commit/0b2dd4f3925d48ddedd6899ee62df350e810b569", "committedDate": "2020-01-24T18:49:00Z", "message": "Move PushdownSubfields below logical optimization"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cf6181546718c7f8d96dc36492ad223e33d49d45", "author": {"user": {"login": "sachdevs", "name": "Saksham"}}, "url": "https://github.com/prestodb/presto/commit/cf6181546718c7f8d96dc36492ad223e33d49d45", "committedDate": "2020-01-23T21:50:13Z", "message": "Move PushdownSubfields below logical optimization"}, "afterCommit": {"oid": "0b2dd4f3925d48ddedd6899ee62df350e810b569", "author": {"user": {"login": "sachdevs", "name": "Saksham"}}, "url": "https://github.com/prestodb/presto/commit/0b2dd4f3925d48ddedd6899ee62df350e810b569", "committedDate": "2020-01-24T18:49:00Z", "message": "Move PushdownSubfields below logical optimization"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2484, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}