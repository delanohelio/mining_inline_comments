{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1MjQ1NTA4", "number": 15250, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNTo1NTo1M1rOEpGPAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNTo1NTo1M1rOEpGPAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNTI5MjE5OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HivePartitionManager.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNTo1NTo1M1rOHakcGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxOTo1OToxMFrOHatMzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzYyMjA0MA==", "bodyText": "wouldn't this still return Optional.empty() if shouldIgnoreTableBucketing is true, since that condition is checked first?", "url": "https://github.com/prestodb/presto/pull/15250#discussion_r497622040", "createdAt": "2020-09-30T15:55:53Z", "author": {"login": "rschlussel"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HivePartitionManager.java", "diffHunk": "@@ -246,24 +246,31 @@ public HivePartitionResult getPartitions(SemiTransactionalHiveMetastore metastor\n                 bucketFilter);\n     }\n \n-    private Optional<HiveBucketHandle> getBucketHandle(Table table, ConnectorSession session)\n+    private Optional<HiveBucketHandle> getBucketHandle(\n+            Table table,\n+            ConnectorSession session,\n+            TupleDomain<ColumnHandle> effectivePredicate)\n     {\n         // never ignore table bucketing for temporary tables as those are created such explicitly by the engine request\n         if (table.getTableType().equals(TEMPORARY_TABLE)) {\n             return getHiveBucketHandle(table);\n         }\n \n         Optional<HiveBucketHandle> hiveBucketHandle = getHiveBucketHandle(table);\n-        if (!hiveBucketHandle.isPresent()) {\n+        if (!hiveBucketHandle.isPresent() || shouldIgnoreTableBucketing(session)) {\n             return Optional.empty();\n         }\n \n+        if (queryUsesHiveBucketColumn(effectivePredicate)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9990d780dfad04b5cb90f59cb0221ca7f2975489"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc1ODExMQ==", "bodyText": "Yes, this scenario is covered by TestHiveIntegrationSmokeTest::testIgnoreTableBucketing. Query will fail if it uses bucket column when shouldIgnoreTableBucketing is true.", "url": "https://github.com/prestodb/presto/pull/15250#discussion_r497758111", "createdAt": "2020-09-30T19:45:00Z", "author": {"login": "viczhang861"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HivePartitionManager.java", "diffHunk": "@@ -246,24 +246,31 @@ public HivePartitionResult getPartitions(SemiTransactionalHiveMetastore metastor\n                 bucketFilter);\n     }\n \n-    private Optional<HiveBucketHandle> getBucketHandle(Table table, ConnectorSession session)\n+    private Optional<HiveBucketHandle> getBucketHandle(\n+            Table table,\n+            ConnectorSession session,\n+            TupleDomain<ColumnHandle> effectivePredicate)\n     {\n         // never ignore table bucketing for temporary tables as those are created such explicitly by the engine request\n         if (table.getTableType().equals(TEMPORARY_TABLE)) {\n             return getHiveBucketHandle(table);\n         }\n \n         Optional<HiveBucketHandle> hiveBucketHandle = getHiveBucketHandle(table);\n-        if (!hiveBucketHandle.isPresent()) {\n+        if (!hiveBucketHandle.isPresent() || shouldIgnoreTableBucketing(session)) {\n             return Optional.empty();\n         }\n \n+        if (queryUsesHiveBucketColumn(effectivePredicate)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzYyMjA0MA=="}, "originalCommit": {"oid": "9990d780dfad04b5cb90f59cb0221ca7f2975489"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc2MDkyNA==", "bodyText": "sorry, I misunderstood the purpose of this pr.  I thought this PR was so that it would succeed in that case, but now I see it's only for when the table bucket count is small.", "url": "https://github.com/prestodb/presto/pull/15250#discussion_r497760924", "createdAt": "2020-09-30T19:50:16Z", "author": {"login": "rschlussel"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HivePartitionManager.java", "diffHunk": "@@ -246,24 +246,31 @@ public HivePartitionResult getPartitions(SemiTransactionalHiveMetastore metastor\n                 bucketFilter);\n     }\n \n-    private Optional<HiveBucketHandle> getBucketHandle(Table table, ConnectorSession session)\n+    private Optional<HiveBucketHandle> getBucketHandle(\n+            Table table,\n+            ConnectorSession session,\n+            TupleDomain<ColumnHandle> effectivePredicate)\n     {\n         // never ignore table bucketing for temporary tables as those are created such explicitly by the engine request\n         if (table.getTableType().equals(TEMPORARY_TABLE)) {\n             return getHiveBucketHandle(table);\n         }\n \n         Optional<HiveBucketHandle> hiveBucketHandle = getHiveBucketHandle(table);\n-        if (!hiveBucketHandle.isPresent()) {\n+        if (!hiveBucketHandle.isPresent() || shouldIgnoreTableBucketing(session)) {\n             return Optional.empty();\n         }\n \n+        if (queryUsesHiveBucketColumn(effectivePredicate)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzYyMjA0MA=="}, "originalCommit": {"oid": "9990d780dfad04b5cb90f59cb0221ca7f2975489"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc2NTU4Mg==", "bodyText": "You are right, the purpose of this PR is to not ignore table bucketing when bucket count is small and shouldIgnoreTableBucketing is false.\nThere are two configs hive.ignore-table-bucketing and hive.min-bucket-count-to-not-ignore-table-bucketing.  If hive.ignore-table-bucketing is true, tables are always ignored. Otherwise (like in this PR), if depends on hive.min-bucket-count-to-not-ignore-table-bucketing and whether bucket column is being used.", "url": "https://github.com/prestodb/presto/pull/15250#discussion_r497765582", "createdAt": "2020-09-30T19:59:10Z", "author": {"login": "viczhang861"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HivePartitionManager.java", "diffHunk": "@@ -246,24 +246,31 @@ public HivePartitionResult getPartitions(SemiTransactionalHiveMetastore metastor\n                 bucketFilter);\n     }\n \n-    private Optional<HiveBucketHandle> getBucketHandle(Table table, ConnectorSession session)\n+    private Optional<HiveBucketHandle> getBucketHandle(\n+            Table table,\n+            ConnectorSession session,\n+            TupleDomain<ColumnHandle> effectivePredicate)\n     {\n         // never ignore table bucketing for temporary tables as those are created such explicitly by the engine request\n         if (table.getTableType().equals(TEMPORARY_TABLE)) {\n             return getHiveBucketHandle(table);\n         }\n \n         Optional<HiveBucketHandle> hiveBucketHandle = getHiveBucketHandle(table);\n-        if (!hiveBucketHandle.isPresent()) {\n+        if (!hiveBucketHandle.isPresent() || shouldIgnoreTableBucketing(session)) {\n             return Optional.empty();\n         }\n \n+        if (queryUsesHiveBucketColumn(effectivePredicate)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzYyMjA0MA=="}, "originalCommit": {"oid": "9990d780dfad04b5cb90f59cb0221ca7f2975489"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3456, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}