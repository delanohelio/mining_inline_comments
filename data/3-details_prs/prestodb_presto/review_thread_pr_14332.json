{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4MzY3NTk4", "number": 14332, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMTozODozM1rODumg4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMTozODozM1rODumg4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMTkyMDk2OnYy", "diffSide": "RIGHT", "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/rewrite/VerificationQueryRewriterFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMTozODozM1rOGAqedw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMTo1MDo0OVrOGAqwKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM0OTExMQ==", "bodyText": "I'm confused about the changes here as I lacked a lot of context. Why did we remove QueryRewriteConfig and use prefix?", "url": "https://github.com/prestodb/presto/pull/14332#discussion_r403349111", "createdAt": "2020-04-03T21:38:33Z", "author": {"login": "shixuan-fan"}, "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/rewrite/VerificationQueryRewriterFactory.java", "diffHunk": "@@ -15,42 +15,54 @@\n \n import com.facebook.presto.spi.type.TypeManager;\n import com.facebook.presto.sql.parser.SqlParser;\n+import com.facebook.presto.sql.tree.BooleanLiteral;\n+import com.facebook.presto.sql.tree.DoubleLiteral;\n+import com.facebook.presto.sql.tree.Identifier;\n+import com.facebook.presto.sql.tree.LongLiteral;\n import com.facebook.presto.sql.tree.Property;\n+import com.facebook.presto.sql.tree.QualifiedName;\n+import com.facebook.presto.sql.tree.StringLiteral;\n import com.facebook.presto.verifier.annotation.ForControl;\n import com.facebook.presto.verifier.annotation.ForTest;\n import com.facebook.presto.verifier.prestoaction.PrestoAction;\n+import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableMap;\n \n import javax.inject.Inject;\n \n import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n \n+import static com.facebook.presto.sql.tree.BooleanLiteral.FALSE_LITERAL;\n import static com.facebook.presto.verifier.framework.ClusterType.CONTROL;\n import static com.facebook.presto.verifier.framework.ClusterType.TEST;\n+import static java.lang.String.format;\n import static java.util.Objects.requireNonNull;\n \n public class VerificationQueryRewriterFactory\n         implements QueryRewriterFactory\n {\n     private final SqlParser sqlParser;\n     private final TypeManager typeManager;\n-    private final List<Property> tablePropertyOverrides;\n-    private final QueryRewriteConfig controlConfig;\n-    private final QueryRewriteConfig testConfig;\n+    private final QualifiedName controlTablePrefix;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fac6a290cdec84db5e707bdd2864ec4a3347899c"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM1MzY0Mw==", "bodyText": "QueryRewriteConfig used to have only 1 field: tablePrefix. Instead of storing the QueryRewriteConfig object, the change here is to extract and store that field directly.\nA new field tableProperties is added to QueryRewriteConfig in this PR. In the constructor, we're converting it from Map<String, Object> to List<Property> and store it list. If these is any Exception thrown in constructProperties, I want it to throw in the constructor so that injection will fail and verification will not start. Otherwise, if the Exception is thrown in the create method, verification is already started and all verifications will complete but with FAILED status.", "url": "https://github.com/prestodb/presto/pull/14332#discussion_r403353643", "createdAt": "2020-04-03T21:50:49Z", "author": {"login": "caithagoras"}, "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/rewrite/VerificationQueryRewriterFactory.java", "diffHunk": "@@ -15,42 +15,54 @@\n \n import com.facebook.presto.spi.type.TypeManager;\n import com.facebook.presto.sql.parser.SqlParser;\n+import com.facebook.presto.sql.tree.BooleanLiteral;\n+import com.facebook.presto.sql.tree.DoubleLiteral;\n+import com.facebook.presto.sql.tree.Identifier;\n+import com.facebook.presto.sql.tree.LongLiteral;\n import com.facebook.presto.sql.tree.Property;\n+import com.facebook.presto.sql.tree.QualifiedName;\n+import com.facebook.presto.sql.tree.StringLiteral;\n import com.facebook.presto.verifier.annotation.ForControl;\n import com.facebook.presto.verifier.annotation.ForTest;\n import com.facebook.presto.verifier.prestoaction.PrestoAction;\n+import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableMap;\n \n import javax.inject.Inject;\n \n import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n \n+import static com.facebook.presto.sql.tree.BooleanLiteral.FALSE_LITERAL;\n import static com.facebook.presto.verifier.framework.ClusterType.CONTROL;\n import static com.facebook.presto.verifier.framework.ClusterType.TEST;\n+import static java.lang.String.format;\n import static java.util.Objects.requireNonNull;\n \n public class VerificationQueryRewriterFactory\n         implements QueryRewriterFactory\n {\n     private final SqlParser sqlParser;\n     private final TypeManager typeManager;\n-    private final List<Property> tablePropertyOverrides;\n-    private final QueryRewriteConfig controlConfig;\n-    private final QueryRewriteConfig testConfig;\n+    private final QualifiedName controlTablePrefix;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM0OTExMQ=="}, "originalCommit": {"oid": "fac6a290cdec84db5e707bdd2864ec4a3347899c"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2738, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}