{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3OTI0NzQw", "number": 14329, "title": "Simple PageFile format", "bodyText": "There is no split support yet. All pages are written continuously to a single file.\nExisting tests in HiveIntegrationSmokeTes and TestHivePageSink cover new formats.\nAttached benchmark result shows much faster read/write compared with ORC format. Reading from PageFile format is 4X faster; Writing PageFile format is 40X faster.", "createdAt": "2020-04-03T04:10:57Z", "url": "https://github.com/prestodb/presto/pull/14329", "merged": true, "mergeCommit": {"oid": "d9d839837afa086c600b5493f23544e70085cc6d"}, "closed": true, "closedAt": "2020-04-13T19:43:54Z", "author": {"login": "viczhang861"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcUHWeTgBqjMxOTc5ODU1NjY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcXSz-SABqjMyMjc5ODgyNDQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f2a18b92b5044f308d93f00672c85ebe8bd4a341", "author": {"user": {"login": "viczhang861", "name": "Vic Zhang"}}, "url": "https://github.com/prestodb/presto/commit/f2a18b92b5044f308d93f00672c85ebe8bd4a341", "committedDate": "2020-04-03T04:03:20Z", "message": "Add PageFile format in HiveFileFormatBenchmark"}, "afterCommit": {"oid": "e4657f36696936988659544bb20b3c8c2433b005", "author": {"user": {"login": "viczhang861", "name": "Vic Zhang"}}, "url": "https://github.com/prestodb/presto/commit/e4657f36696936988659544bb20b3c8c2433b005", "committedDate": "2020-04-03T20:46:31Z", "message": "Add PageFile format in HiveFileFormatBenchmark"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e4657f36696936988659544bb20b3c8c2433b005", "author": {"user": {"login": "viczhang861", "name": "Vic Zhang"}}, "url": "https://github.com/prestodb/presto/commit/e4657f36696936988659544bb20b3c8c2433b005", "committedDate": "2020-04-03T20:46:31Z", "message": "Add PageFile format in HiveFileFormatBenchmark"}, "afterCommit": {"oid": "70afa50d217c79c63292f1da7b14dc673ff27db2", "author": {"user": {"login": "viczhang861", "name": "Vic Zhang"}}, "url": "https://github.com/prestodb/presto/commit/70afa50d217c79c63292f1da7b14dc673ff27db2", "committedDate": "2020-04-06T00:35:53Z", "message": "Add PageFile format into HiveFileFormatBenchmark"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4NzQyMjQ5", "url": "https://github.com/prestodb/presto/pull/14329#pullrequestreview-388742249", "createdAt": "2020-04-07T02:22:44Z", "commit": {"oid": "70afa50d217c79c63292f1da7b14dc673ff27db2"}, "state": "COMMENTED", "comments": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwMjoyMjo0NFrOGBwn9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwMzozMzowNlrOGBxqDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ5ODQyMA==", "bodyText": "Why not something like PageInputSerde? It theory we shouldn't rely that this class ever exist in Hive.", "url": "https://github.com/prestodb/presto/pull/14329#discussion_r404498420", "createdAt": "2020-04-07T02:22:44Z", "author": {"login": "arhimondr"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/HiveStorageFormat.java", "diffHunk": "@@ -83,6 +83,11 @@\n             LazySimpleSerDe.class.getName(),\n             TextInputFormat.class.getName(),\n             HiveIgnoreKeyTextOutputFormat.class.getName(),\n+            new DataSize(8, Unit.MEGABYTE)),\n+    PAGEFILE(\n+            LazySimpleSerDe.class.getName(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70afa50d217c79c63292f1da7b14dc673ff27db2"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ5OTE2Nw==", "bodyText": "This is only applicable for RecordWriter. We fall back to RecordWriter only if the native writer is not available. Shouldn't be applicable for this format. Maybe leave a comment that new DataSize(8, Unit.MEGABYTE) is effectively just a stub.", "url": "https://github.com/prestodb/presto/pull/14329#discussion_r404499167", "createdAt": "2020-04-07T02:25:30Z", "author": {"login": "arhimondr"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/HiveStorageFormat.java", "diffHunk": "@@ -83,6 +83,11 @@\n             LazySimpleSerDe.class.getName(),\n             TextInputFormat.class.getName(),\n             HiveIgnoreKeyTextOutputFormat.class.getName(),\n+            new DataSize(8, Unit.MEGABYTE)),\n+    PAGEFILE(\n+            LazySimpleSerDe.class.getName(),\n+            \"PageInputFormat\",\n+            \"PageOutputFormat\",\n             new DataSize(8, Unit.MEGABYTE));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70afa50d217c79c63292f1da7b14dc673ff27db2"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ5OTg5NA==", "bodyText": "maybe throw UnsupportedOperationException()?", "url": "https://github.com/prestodb/presto/pull/14329#discussion_r404499894", "createdAt": "2020-04-07T02:28:11Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageInputFormat.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.pagefile;\n+\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.io.NullWritable;\n+import org.apache.hadoop.mapred.FileInputFormat;\n+import org.apache.hadoop.mapred.InputSplit;\n+import org.apache.hadoop.mapred.JobConf;\n+import org.apache.hadoop.mapred.RecordReader;\n+import org.apache.hadoop.mapred.Reporter;\n+\n+public class PageInputFormat\n+        extends FileInputFormat<NullWritable, NullWritable>\n+{\n+    @Override\n+    public RecordReader<NullWritable, NullWritable> getRecordReader(InputSplit inputSplit, JobConf jobConf, Reporter reporter)\n+    {\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70afa50d217c79c63292f1da7b14dc673ff27db2"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUwNDYyMA==", "bodyText": "This is potentially unsafe. I see that this method is only used by the generateZeroRowFile. Instead of adding this potentially error prone branch here i would rather handle the page file as a special case in the generateZeroRowFile.", "url": "https://github.com/prestodb/presto/pull/14329#discussion_r404504620", "createdAt": "2020-04-07T02:48:03Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveWriteUtils.java", "diffHunk": "@@ -168,6 +169,24 @@ public static RecordWriter createRecordWriter(Path target, JobConf conf, Propert\n             if (outputFormatName.equals(MapredParquetOutputFormat.class.getName())) {\n                 return createParquetWriter(target, conf, properties, compress, session);\n             }\n+            if (outputFormatName.equals(HiveStorageFormat.PAGEFILE.getOutputFormat())) {\n+                FSDataOutputStream outputStream = target.getFileSystem(conf).create(target);\n+                return new RecordWriter()\n+                {\n+                    @Override\n+                    public void write(Writable value)\n+                    {\n+                        // do nothing", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70afa50d217c79c63292f1da7b14dc673ff27db2"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUwNzU2Mw==", "bodyText": "From what I understand this interface is added by analogy to the OrcDataSink.\nThe main difference that I see right now is that the OrcDataSink accepts the data for the entire block in a single call. In other words the buffering of the block is happening before calling the OrcDataSink#write. The buffering happens in the OrcWriter.\nFrom one side it leads to somehow tricky and not very obvious \"side effects\" or implications of the ORC stripe size. By changing the stripe size we are effectively changing the block size of the underlying file system. Thus in some sense it feels like this logic must be pushed down to the PageDataSink interface, so the buffering and block size configuration happens there. But then I realize that if we want to add the meta-information to make the format splittable, we don't wanna add check points in a middle of a block. And if the block buffering is hidden behind the PageDataSink interface there will be no way to know where are the block breaking point.\nBased on this thoughts it feels like we should stick with the existing ORC model, when the entire block is supplied. We can make this method to accept a List<Page>.", "url": "https://github.com/prestodb/presto/pull/14329#discussion_r404507563", "createdAt": "2020-04-07T03:00:14Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageDataSink.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.pagefile;\n+\n+import com.facebook.presto.spi.Page;\n+\n+import java.io.IOException;\n+\n+public interface PageDataSink\n+{\n+    /**\n+     * Number of bytes written to this sink so far.\n+     */\n+    long size();\n+\n+    /**\n+     * Gets the size of the memory buffers.\n+     */\n+    long getRetainedSizeInBytes();\n+\n+    /**\n+     * Write a page\n+     */\n+    void write(Page dataPage)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70afa50d217c79c63292f1da7b14dc673ff27db2"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUwNzk2Nw==", "bodyText": "Also it feels like this method should accept SerializedPage. The OrcDataSink interface accepts OrcDataOutput, that is effective a \"lazy\" serialized representation. I don't think that we need the laziness in our case though.", "url": "https://github.com/prestodb/presto/pull/14329#discussion_r404507967", "createdAt": "2020-04-07T03:02:00Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageDataSink.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.pagefile;\n+\n+import com.facebook.presto.spi.Page;\n+\n+import java.io.IOException;\n+\n+public interface PageDataSink\n+{\n+    /**\n+     * Number of bytes written to this sink so far.\n+     */\n+    long size();\n+\n+    /**\n+     * Gets the size of the memory buffers.\n+     */\n+    long getRetainedSizeInBytes();\n+\n+    /**\n+     * Write a page\n+     */\n+    void write(Page dataPage)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70afa50d217c79c63292f1da7b14dc673ff27db2"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUwODA3NA==", "bodyText": "Doesn't it flush automatically on close?", "url": "https://github.com/prestodb/presto/pull/14329#discussion_r404508074", "createdAt": "2020-04-07T03:02:29Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/OutputStreamPageDataSink.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.pagefile;\n+\n+import com.facebook.presto.spi.Page;\n+import com.facebook.presto.spi.page.PagesSerde;\n+import io.airlift.slice.OutputStreamSliceOutput;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+\n+import static com.facebook.presto.spi.page.PagesSerdeUtil.writeSerializedPage;\n+import static java.util.Objects.requireNonNull;\n+\n+public class OutputStreamPageDataSink\n+        implements PageDataSink\n+{\n+    private static final int INSTANCE_SIZE = ClassLayout.parseClass(OutputStreamPageDataSink.class).instanceSize();\n+\n+    private final OutputStreamSliceOutput output;\n+    private final PagesSerde pagesSerde;\n+\n+    public OutputStreamPageDataSink(OutputStream outputStream, PagesSerde pagesSerde)\n+    {\n+        this.output = new OutputStreamSliceOutput(requireNonNull(outputStream, \"outputStream is null\"));\n+        this.pagesSerde = requireNonNull(pagesSerde, \"pagesSerde is null\");\n+    }\n+\n+    @Override\n+    public long size()\n+    {\n+        return output.longSize();\n+    }\n+\n+    @Override\n+    public long getRetainedSizeInBytes()\n+    {\n+        return INSTANCE_SIZE + output.getRetainedSize();\n+    }\n+\n+    @Override\n+    public void write(Page dataPage)\n+    {\n+        writeSerializedPage(output, pagesSerde.serialize(dataPage));\n+    }\n+\n+    @Override\n+    public void close()\n+            throws IOException\n+    {\n+        output.flush();\n+        output.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70afa50d217c79c63292f1da7b14dc673ff27db2"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUwOTI0Mg==", "bodyText": "This method is unused", "url": "https://github.com/prestodb/presto/pull/14329#discussion_r404509242", "createdAt": "2020-04-07T03:07:22Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageWriter.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.pagefile;\n+\n+import com.facebook.presto.spi.Page;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class PageWriter\n+        implements Closeable\n+{\n+    private static final int INSTANCE_SIZE = ClassLayout.parseClass(PageWriter.class).instanceSize();\n+\n+    private final PageDataSink pageDataSink;\n+\n+    public PageWriter(PageDataSink pageDataSink)\n+    {\n+        this.pageDataSink = requireNonNull(pageDataSink, \"pageDataSink is null\");\n+    }\n+\n+    private boolean closed;\n+    /**\n+     * Number of bytes already flushed to the data sink.\n+     */\n+    public long getWrittenBytes()\n+    {\n+        return pageDataSink.size();\n+    }\n+\n+    public long getRetainedBytes()\n+    {\n+        return INSTANCE_SIZE + pageDataSink.getRetainedSizeInBytes();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70afa50d217c79c63292f1da7b14dc673ff27db2"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUwOTI3NQ==", "bodyText": "This is effectively unused", "url": "https://github.com/prestodb/presto/pull/14329#discussion_r404509275", "createdAt": "2020-04-07T03:07:30Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageWriter.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.pagefile;\n+\n+import com.facebook.presto.spi.Page;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class PageWriter\n+        implements Closeable\n+{\n+    private static final int INSTANCE_SIZE = ClassLayout.parseClass(PageWriter.class).instanceSize();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70afa50d217c79c63292f1da7b14dc673ff27db2"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUwOTQyMQ==", "bodyText": "This is unused", "url": "https://github.com/prestodb/presto/pull/14329#discussion_r404509421", "createdAt": "2020-04-07T03:08:10Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFileWriter.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.pagefile;\n+\n+import com.facebook.presto.hive.HiveFileWriter;\n+import com.facebook.presto.spi.Page;\n+import com.facebook.presto.spi.PrestoException;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.concurrent.Callable;\n+\n+import static com.facebook.presto.hive.HiveErrorCode.HIVE_WRITER_CLOSE_ERROR;\n+import static com.facebook.presto.hive.HiveErrorCode.HIVE_WRITER_DATA_ERROR;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PageFileWriter\n+        implements HiveFileWriter\n+{\n+    private static final int INSTANCE_SIZE = ClassLayout.parseClass(PageFileWriter.class).instanceSize();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70afa50d217c79c63292f1da7b14dc673ff27db2"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUwOTQ1NA==", "bodyText": "This is unused", "url": "https://github.com/prestodb/presto/pull/14329#discussion_r404509454", "createdAt": "2020-04-07T03:08:18Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFileWriter.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.pagefile;\n+\n+import com.facebook.presto.hive.HiveFileWriter;\n+import com.facebook.presto.spi.Page;\n+import com.facebook.presto.spi.PrestoException;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.concurrent.Callable;\n+\n+import static com.facebook.presto.hive.HiveErrorCode.HIVE_WRITER_CLOSE_ERROR;\n+import static com.facebook.presto.hive.HiveErrorCode.HIVE_WRITER_DATA_ERROR;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PageFileWriter\n+        implements HiveFileWriter\n+{\n+    private static final int INSTANCE_SIZE = ClassLayout.parseClass(PageFileWriter.class).instanceSize();\n+\n+    private final PageWriter pageWriter;\n+    private final Callable<Void> rollbackAction;\n+\n+    private long validationCpuNanos;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70afa50d217c79c63292f1da7b14dc673ff27db2"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUwOTc1MA==", "bodyText": "Should this be implemented?", "url": "https://github.com/prestodb/presto/pull/14329#discussion_r404509750", "createdAt": "2020-04-07T03:09:28Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFileWriter.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.pagefile;\n+\n+import com.facebook.presto.hive.HiveFileWriter;\n+import com.facebook.presto.spi.Page;\n+import com.facebook.presto.spi.PrestoException;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.concurrent.Callable;\n+\n+import static com.facebook.presto.hive.HiveErrorCode.HIVE_WRITER_CLOSE_ERROR;\n+import static com.facebook.presto.hive.HiveErrorCode.HIVE_WRITER_DATA_ERROR;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PageFileWriter\n+        implements HiveFileWriter\n+{\n+    private static final int INSTANCE_SIZE = ClassLayout.parseClass(PageFileWriter.class).instanceSize();\n+\n+    private final PageWriter pageWriter;\n+    private final Callable<Void> rollbackAction;\n+\n+    private long validationCpuNanos;\n+\n+    public PageFileWriter(\n+            PageDataSink pageDataSink,\n+            Callable<Void> rollbackAction)\n+    {\n+        pageWriter = new PageWriter(pageDataSink);\n+        this.rollbackAction = requireNonNull(rollbackAction, \"rollbackAction is null\");\n+    }\n+\n+    @Override\n+    public long getWrittenBytes()\n+    {\n+        return pageWriter.getWrittenBytes();\n+    }\n+\n+    @Override\n+    public long getSystemMemoryUsage()\n+    {\n+        return 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70afa50d217c79c63292f1da7b14dc673ff27db2"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUxMDA3OQ==", "bodyText": "note: Generally having a composition based factory is preferred. However since the ORC writer is already implemented this way - let's keep it so for consistency.", "url": "https://github.com/prestodb/presto/pull/14329#discussion_r404510079", "createdAt": "2020-04-07T03:10:54Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFileWriterFactory.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.pagefile;\n+\n+import com.facebook.presto.hive.HdfsEnvironment;\n+import com.facebook.presto.hive.HiveFileWriter;\n+import com.facebook.presto.hive.HiveFileWriterFactory;\n+import com.facebook.presto.hive.metastore.StorageFormat;\n+import com.facebook.presto.spi.ConnectorSession;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.block.BlockEncodingSerde;\n+import com.facebook.presto.spi.page.PagesSerde;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.mapred.JobConf;\n+\n+import javax.inject.Inject;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.concurrent.Callable;\n+\n+import static com.facebook.presto.hive.HiveErrorCode.HIVE_WRITER_OPEN_ERROR;\n+import static com.facebook.presto.hive.HiveStorageFormat.PAGEFILE;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PageFileWriterFactory\n+        implements HiveFileWriterFactory\n+{\n+    private final HdfsEnvironment hdfsEnvironment;\n+    private final PagesSerde pagesSerde;\n+\n+    @Inject\n+    public PageFileWriterFactory(\n+            HdfsEnvironment hdfsEnvironment,\n+            BlockEncodingSerde blockEncodingSerde)\n+    {\n+        this.hdfsEnvironment = requireNonNull(hdfsEnvironment, \"hdfsEnvironment is null\");\n+\n+        pagesSerde = new PagesSerde(\n+                requireNonNull(blockEncodingSerde, \"blockEncodingSerde is null\"),\n+                Optional.empty(),\n+                Optional.empty(),\n+                Optional.empty());\n+    }\n+\n+    @Override\n+    public Optional<HiveFileWriter> createFileWriter(\n+            Path path,\n+            List<String> inputColumnNames,\n+            StorageFormat storageFormat,\n+            Properties schema,\n+            JobConf configuration,\n+            ConnectorSession session)\n+    {\n+        if (!storageFormat.getOutputFormat().equals(PAGEFILE.getOutputFormat())) {\n+            return Optional.empty();\n+        }\n+\n+        try {\n+            FileSystem fileSystem = hdfsEnvironment.getFileSystem(session.getUser(), path, configuration);\n+            PageDataSink pageDataSink = createPageDataSink(fileSystem, path);\n+\n+            Callable<Void> rollbackAction = () -> {\n+                fileSystem.delete(path, false);\n+                return null;\n+            };\n+            return Optional.of(new PageFileWriter(pageDataSink, rollbackAction));\n+        }\n+        catch (IOException e) {\n+            throw new PrestoException(HIVE_WRITER_OPEN_ERROR, \"Error creating pagefile\", e);\n+        }\n+    }\n+\n+    protected PageDataSink createPageDataSink(FileSystem fileSystem, Path path)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70afa50d217c79c63292f1da7b14dc673ff27db2"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUxMDI4MQ==", "bodyText": "It should support date", "url": "https://github.com/prestodb/presto/pull/14329#discussion_r404510281", "createdAt": "2020-04-07T03:11:51Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/benchmark/FileFormat.java", "diffHunk": "@@ -202,6 +207,36 @@ public boolean supportsDate()\n         }\n     },\n \n+    PRESTO_PAGE {\n+        @Override\n+        public ConnectorPageSource createFileFormatReader(ConnectorSession session, HdfsEnvironment hdfsEnvironment, File targetFile, List<String> columnNames, List<Type> columnTypes)\n+        {\n+            HiveBatchPageSourceFactory pageSourceFactory = new PageFilePageSourceFactory(\n+                    hdfsEnvironment,\n+                    new HadoopFileOpener(),\n+                    new BlockEncodingManager(TYPE_MANAGER));\n+            return createPageSource(pageSourceFactory, session, targetFile, columnNames, columnTypes, HiveStorageFormat.PAGEFILE);\n+        }\n+\n+        @Override\n+        public FormatWriter createFileFormatWriter(\n+                ConnectorSession session,\n+                File targetFile,\n+                List<String> columnNames,\n+                List<Type> columnTypes,\n+                HiveCompressionCodec compressionCodec)\n+                throws IOException\n+        {\n+            return new PrestoPageFormatWriter(targetFile);\n+        }\n+\n+        @Override\n+        public boolean supportsDate()\n+        {\n+            return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70afa50d217c79c63292f1da7b14dc673ff27db2"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUxNTE0Mw==", "bodyText": "It should be pretty simple to implement schema evolution. However since it is not needed I aggree we shouldn't be doing this. The only recommendation I have is to add a specific error message (currently we are failing with ArrayOutOfBound)\nCaused by: java.lang.ArrayIndexOutOfBoundsException: 13\n\tat com.facebook.presto.spi.Page.getBlock(Page.java:103)\n\tat com.facebook.presto.hive.pagefile.PageFilePageSource.getNextPage(PageFilePageSource.java:99)\n\tat com.facebook.presto.hive.HivePageSource.getNextPage(HivePageSource.java:126)\n\t... 29 more", "url": "https://github.com/prestodb/presto/pull/14329#discussion_r404515143", "createdAt": "2020-04-07T03:32:17Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveClient.java", "diffHunk": "@@ -1278,8 +1280,8 @@ public void testMismatchSchemaTable()\n         boolean pushdownFilterEnabled = getHiveClientConfig().isPushdownFilterEnabled();\n \n         for (HiveStorageFormat storageFormat : createTableFormats) {\n-            // TODO: fix coercion for JSON\n-            if (storageFormat == JSON) {\n+            // TODO: fix coercion for JSON or PAGEFILE\n+            if (storageFormat == JSON || storageFormat == PAGEFILE) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70afa50d217c79c63292f1da7b14dc673ff27db2"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUxNTM0Mw==", "bodyText": "It is fine to do not add compression support in this PR. However we should add the compression. Writing temporary files without any compression might be too costly IOPS wise.", "url": "https://github.com/prestodb/presto/pull/14329#discussion_r404515343", "createdAt": "2020-04-07T03:33:06Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHivePageSink.java", "diffHunk": "@@ -122,6 +123,10 @@ public void testAllFormats()\n                     if (codec == NONE || !codec.isSupportedStorageFormat(format)) {\n                         continue;\n                     }\n+                    // No compression support needed for PAGEFILE\n+                    if (format == PAGEFILE) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70afa50d217c79c63292f1da7b14dc673ff27db2"}, "originalPosition": 13}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "70afa50d217c79c63292f1da7b14dc673ff27db2", "author": {"user": {"login": "viczhang861", "name": "Vic Zhang"}}, "url": "https://github.com/prestodb/presto/commit/70afa50d217c79c63292f1da7b14dc673ff27db2", "committedDate": "2020-04-06T00:35:53Z", "message": "Add PageFile format into HiveFileFormatBenchmark"}, "afterCommit": {"oid": "23b5b76ea0f55997c53d570b27cbb8c5294396ba", "author": {"user": {"login": "viczhang861", "name": "Vic Zhang"}}, "url": "https://github.com/prestodb/presto/commit/23b5b76ea0f55997c53d570b27cbb8c5294396ba", "committedDate": "2020-04-08T04:54:13Z", "message": "Add PageFile format into HiveFileFormatBenchmark"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "23b5b76ea0f55997c53d570b27cbb8c5294396ba", "author": {"user": {"login": "viczhang861", "name": "Vic Zhang"}}, "url": "https://github.com/prestodb/presto/commit/23b5b76ea0f55997c53d570b27cbb8c5294396ba", "committedDate": "2020-04-08T04:54:13Z", "message": "Add PageFile format into HiveFileFormatBenchmark"}, "afterCommit": {"oid": "c5c448c79d7c0b3af8788c3adc62be7d0f0941a3", "author": {"user": {"login": "viczhang861", "name": "Vic Zhang"}}, "url": "https://github.com/prestodb/presto/commit/c5c448c79d7c0b3af8788c3adc62be7d0f0941a3", "committedDate": "2020-04-08T05:42:05Z", "message": "Add PageFile format into HiveFileFormatBenchmark"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c5c448c79d7c0b3af8788c3adc62be7d0f0941a3", "author": {"user": {"login": "viczhang861", "name": "Vic Zhang"}}, "url": "https://github.com/prestodb/presto/commit/c5c448c79d7c0b3af8788c3adc62be7d0f0941a3", "committedDate": "2020-04-08T05:42:05Z", "message": "Add PageFile format into HiveFileFormatBenchmark"}, "afterCommit": {"oid": "ea3438b45ebcbd6b885f067f3eeb9e7ee2eb2ddf", "author": {"user": {"login": "viczhang861", "name": "Vic Zhang"}}, "url": "https://github.com/prestodb/presto/commit/ea3438b45ebcbd6b885f067f3eeb9e7ee2eb2ddf", "committedDate": "2020-04-08T07:27:56Z", "message": "Add PageFile format into HiveFileFormatBenchmark"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ea3438b45ebcbd6b885f067f3eeb9e7ee2eb2ddf", "author": {"user": {"login": "viczhang861", "name": "Vic Zhang"}}, "url": "https://github.com/prestodb/presto/commit/ea3438b45ebcbd6b885f067f3eeb9e7ee2eb2ddf", "committedDate": "2020-04-08T07:27:56Z", "message": "Add PageFile format into HiveFileFormatBenchmark"}, "afterCommit": {"oid": "f55389b3347d1e1d797aee8403358282b75f3cb8", "author": {"user": {"login": "viczhang861", "name": "Vic Zhang"}}, "url": "https://github.com/prestodb/presto/commit/f55389b3347d1e1d797aee8403358282b75f3cb8", "committedDate": "2020-04-08T17:07:45Z", "message": "Add PageFile format into HiveFileFormatBenchmark"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f55389b3347d1e1d797aee8403358282b75f3cb8", "author": {"user": {"login": "viczhang861", "name": "Vic Zhang"}}, "url": "https://github.com/prestodb/presto/commit/f55389b3347d1e1d797aee8403358282b75f3cb8", "committedDate": "2020-04-08T17:07:45Z", "message": "Add PageFile format into HiveFileFormatBenchmark"}, "afterCommit": {"oid": "1490e0965a1c348c502a64291addfd29f8d9b982", "author": {"user": {"login": "viczhang861", "name": "Vic Zhang"}}, "url": "https://github.com/prestodb/presto/commit/1490e0965a1c348c502a64291addfd29f8d9b982", "committedDate": "2020-04-09T00:38:53Z", "message": "Add PageFile format in HiveFileFormatBenchmark"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1490e0965a1c348c502a64291addfd29f8d9b982", "author": {"user": {"login": "viczhang861", "name": "Vic Zhang"}}, "url": "https://github.com/prestodb/presto/commit/1490e0965a1c348c502a64291addfd29f8d9b982", "committedDate": "2020-04-09T00:38:53Z", "message": "Add PageFile format in HiveFileFormatBenchmark"}, "afterCommit": {"oid": "03195391a822501e3810570b59053d7c49c1c2c4", "author": {"user": {"login": "viczhang861", "name": "Vic Zhang"}}, "url": "https://github.com/prestodb/presto/commit/03195391a822501e3810570b59053d7c49c1c2c4", "committedDate": "2020-04-09T22:45:24Z", "message": "Add PageFile format in HiveFileFormatBenchmark"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMjI4MDcz", "url": "https://github.com/prestodb/presto/pull/14329#pullrequestreview-391228073", "createdAt": "2020-04-10T01:46:03Z", "commit": {"oid": "03195391a822501e3810570b59053d7c49c1c2c4"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMTo0NjowM1rOGDusqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMTo1NTowOVrOGDu1Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2NDAwOA==", "bodyText": "We call it schema evolution. Let's change it to schema evolution is not supported for page file format", "url": "https://github.com/prestodb/presto/pull/14329#discussion_r406564008", "createdAt": "2020-04-10T01:46:03Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFilePageSource.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.pagefile;\n+\n+import com.facebook.presto.hive.HiveColumnHandle;\n+import com.facebook.presto.spi.ConnectorPageSource;\n+import com.facebook.presto.spi.Page;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.block.Block;\n+import com.facebook.presto.spi.page.PagesSerde;\n+import io.airlift.slice.InputStreamSliceInput;\n+import org.apache.hadoop.fs.FSDataInputStream;\n+\n+import java.io.IOException;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import static com.facebook.presto.spi.StandardErrorCode.NOT_SUPPORTED;\n+import static com.facebook.presto.spi.page.PagesSerdeUtil.readPages;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PageFilePageSource\n+        implements ConnectorPageSource\n+{\n+    private final FSDataInputStream inputStream;\n+    private final Iterator<Page> pageReader;\n+    private final int[] hiveColumnIndexes;\n+\n+    private boolean closed;\n+    private long completedPositions;\n+    private long completedBytes;\n+    private long readTimeNanos;\n+    private long memoryUsageBytes;\n+\n+    public PageFilePageSource(\n+            FSDataInputStream inputStream,\n+            PagesSerde pagesSerde,\n+            List<HiveColumnHandle> columns)\n+    {\n+        this.inputStream = requireNonNull(inputStream, \"inputStream is null\");\n+        pageReader = readPages(\n+                requireNonNull(pagesSerde, \"pagesSerdeis null\"),\n+                new InputStreamSliceInput(inputStream));\n+\n+        int size = requireNonNull(columns, \"columns is null\").size();\n+        this.hiveColumnIndexes = new int[size];\n+\n+        for (int columnIndex = 0; columnIndex < size; columnIndex++) {\n+            HiveColumnHandle column = columns.get(columnIndex);\n+            hiveColumnIndexes[columnIndex] = column.getHiveColumnIndex();\n+        }\n+    }\n+\n+    @Override\n+    public long getCompletedBytes()\n+    {\n+        return completedBytes;\n+    }\n+\n+    @Override\n+    public long getCompletedPositions()\n+    {\n+        return completedPositions;\n+    }\n+\n+    @Override\n+    public long getReadTimeNanos()\n+    {\n+        return readTimeNanos;\n+    }\n+\n+    @Override\n+    public boolean isFinished()\n+    {\n+        return closed || !pageReader.hasNext();\n+    }\n+\n+    @Override\n+    public Page getNextPage()\n+    {\n+        if (isFinished()) {\n+            return null;\n+        }\n+        long start = System.nanoTime();\n+\n+        Page page = pageReader.next();\n+\n+        Block[] blocks = new Block[hiveColumnIndexes.length];\n+        for (int fieldId = 0; fieldId < blocks.length; fieldId++) {\n+            if (hiveColumnIndexes[fieldId] >= page.getChannelCount()) {\n+                throw new PrestoException(\n+                        NOT_SUPPORTED,\n+                        \"schema mismatched table is not supported for PageFile format\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03195391a822501e3810570b59053d7c49c1c2c4"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2NDQyNQ==", "bodyText": "I'm assuming this logic is transferred here from the Orc format", "url": "https://github.com/prestodb/presto/pull/14329#discussion_r406564425", "createdAt": "2020-04-10T01:47:53Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFilePageSourceFactory.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.pagefile;\n+\n+import com.facebook.presto.hive.HdfsEnvironment;\n+import com.facebook.presto.hive.HiveBatchPageSourceFactory;\n+import com.facebook.presto.hive.HiveColumnHandle;\n+import com.facebook.presto.hive.HiveFileContext;\n+import com.facebook.presto.hive.metastore.Storage;\n+import com.facebook.presto.spi.ConnectorPageSource;\n+import com.facebook.presto.spi.ConnectorSession;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.block.BlockEncodingSerde;\n+import com.facebook.presto.spi.page.PagesSerde;\n+import com.facebook.presto.spi.predicate.TupleDomain;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FSDataInputStream;\n+import org.apache.hadoop.fs.Path;\n+import org.joda.time.DateTimeZone;\n+\n+import javax.inject.Inject;\n+\n+import java.io.FileNotFoundException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.hive.HiveErrorCode.HIVE_CANNOT_OPEN_SPLIT;\n+import static com.google.common.base.Strings.nullToEmpty;\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PageFilePageSourceFactory\n+        implements HiveBatchPageSourceFactory\n+{\n+    private final HdfsEnvironment hdfsEnvironment;\n+    private final PagesSerde pagesSerde;\n+\n+    @Inject\n+    public PageFilePageSourceFactory(\n+            HdfsEnvironment hdfsEnvironment,\n+            BlockEncodingSerde blockEncodingSerde)\n+    {\n+        this.hdfsEnvironment = requireNonNull(hdfsEnvironment, \"hdfsEnvironment is null\");\n+        pagesSerde = new PagesSerde(\n+                requireNonNull(blockEncodingSerde, \"blockEncodingSerde is null\"),\n+                Optional.empty(),\n+                Optional.empty(),\n+                Optional.empty());\n+    }\n+\n+    @Override\n+    public Optional<? extends ConnectorPageSource> createPageSource(\n+            Configuration configuration,\n+            ConnectorSession session,\n+            Path path,\n+            long start,\n+            long length,\n+            long fileSize,\n+            Storage storage,\n+            Map<String, String> tableParameters,\n+            List<HiveColumnHandle> columns,\n+            TupleDomain<HiveColumnHandle> effectivePredicate,\n+            DateTimeZone hiveStorageTimeZone,\n+            HiveFileContext hiveFileContext)\n+    {\n+        if (!PageInputFormat.class.getSimpleName().equals(storage.getStorageFormat().getInputFormat())) {\n+            return Optional.empty();\n+        }\n+\n+        FSDataInputStream inputStream;\n+        try {\n+            inputStream = hdfsEnvironment.getFileSystem(session.getUser(), path, configuration).openFile(path, hiveFileContext);\n+        }\n+        catch (Exception e) {\n+            if (nullToEmpty(e.getMessage()).trim().equals(\"Filesystem closed\") ||", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03195391a822501e3810570b59053d7c49c1c2c4"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2NDc2Mg==", "bodyText": "Should the rollback action be run here as well?", "url": "https://github.com/prestodb/presto/pull/14329#discussion_r406564762", "createdAt": "2020-04-10T01:49:17Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFileWriter.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.pagefile;\n+\n+import com.facebook.presto.hive.HiveFileWriter;\n+import com.facebook.presto.orc.OrcDataSink;\n+import com.facebook.presto.spi.Page;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.page.PagesSerde;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.concurrent.Callable;\n+\n+import static com.facebook.presto.hive.HiveErrorCode.HIVE_WRITER_CLOSE_ERROR;\n+import static com.facebook.presto.hive.HiveErrorCode.HIVE_WRITER_DATA_ERROR;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PageFileWriter\n+        implements HiveFileWriter\n+{\n+    private static final int INSTANCE_SIZE = ClassLayout.parseClass(PageFileWriter.class).instanceSize();\n+\n+    private final PageWriter pageWriter;\n+    private final Callable<Void> rollbackAction;\n+    private final PagesSerde pagesSerde;\n+\n+    public PageFileWriter(\n+            OrcDataSink dataSink,\n+            PagesSerde pagesSerde,\n+            Callable<Void> rollbackAction)\n+    {\n+        pageWriter = new PageWriter(dataSink);\n+        this.pagesSerde = requireNonNull(pagesSerde, \"pagesSerde is null\");\n+        this.rollbackAction = requireNonNull(rollbackAction, \"rollbackAction is null\");\n+    }\n+\n+    @Override\n+    public long getWrittenBytes()\n+    {\n+        return pageWriter.getWrittenBytes();\n+    }\n+\n+    @Override\n+    public long getSystemMemoryUsage()\n+    {\n+        return INSTANCE_SIZE + pageWriter.getRetainedBytes();\n+    }\n+\n+    @Override\n+    public void appendRows(Page dataPage)\n+    {\n+        try {\n+            pageWriter.write(pagesSerde.serialize(dataPage));\n+        }\n+        catch (IOException | UncheckedIOException e) {\n+            throw new PrestoException(HIVE_WRITER_DATA_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public void commit()\n+    {\n+        try {\n+            pageWriter.close();\n+        }\n+        catch (IOException | UncheckedIOException e) {\n+            try {\n+                rollbackAction.call();\n+            }\n+            catch (Exception ignored) {\n+                // ignore\n+            }\n+            throw new PrestoException(HIVE_WRITER_CLOSE_ERROR, \"Error committing write to Hive\", e);\n+        }\n+    }\n+\n+    @Override\n+    public void rollback()\n+    {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03195391a822501e3810570b59053d7c49c1c2c4"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2NTA5Mw==", "bodyText": "Remove ( and ). Ideally we should also  make it configurable (with a session and configuration property, similarly to ORC).", "url": "https://github.com/prestodb/presto/pull/14329#discussion_r406565093", "createdAt": "2020-04-10T01:50:50Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageWriter.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.pagefile;\n+\n+import com.facebook.presto.orc.OrcDataSink;\n+import com.facebook.presto.orc.stream.OrcDataOutput;\n+import com.facebook.presto.spi.page.SerializedPage;\n+import io.airlift.units.DataSize;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static io.airlift.units.DataSize.Unit.MEGABYTE;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PageWriter\n+        implements Closeable\n+{\n+    private static final int INSTANCE_SIZE = ClassLayout.parseClass(PageWriter.class).instanceSize();\n+\n+    private final OrcDataSink dataSink;\n+    private long bufferedBytes;\n+    private long retainedBytes;\n+    private long maxBufferedBytes = (new DataSize(128, MEGABYTE)).toBytes();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03195391a822501e3810570b59053d7c49c1c2c4"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2NTE4MQ==", "bodyText": "let's move it to the other fields (before the constructor)", "url": "https://github.com/prestodb/presto/pull/14329#discussion_r406565181", "createdAt": "2020-04-10T01:51:20Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageWriter.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.pagefile;\n+\n+import com.facebook.presto.orc.OrcDataSink;\n+import com.facebook.presto.orc.stream.OrcDataOutput;\n+import com.facebook.presto.spi.page.SerializedPage;\n+import io.airlift.units.DataSize;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static io.airlift.units.DataSize.Unit.MEGABYTE;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PageWriter\n+        implements Closeable\n+{\n+    private static final int INSTANCE_SIZE = ClassLayout.parseClass(PageWriter.class).instanceSize();\n+\n+    private final OrcDataSink dataSink;\n+    private long bufferedBytes;\n+    private long retainedBytes;\n+    private long maxBufferedBytes = (new DataSize(128, MEGABYTE)).toBytes();\n+    private List<OrcDataOutput> bufferedPages;\n+\n+    public PageWriter(OrcDataSink dataSink)\n+    {\n+        this.dataSink = requireNonNull(dataSink, \"pageDataSink is null\");\n+        bufferedPages = new ArrayList<>();\n+    }\n+\n+    private boolean closed;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03195391a822501e3810570b59053d7c49c1c2c4"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2NTYyNQ==", "bodyText": "Isn't the current page being lost?", "url": "https://github.com/prestodb/presto/pull/14329#discussion_r406565625", "createdAt": "2020-04-10T01:53:05Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageWriter.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.pagefile;\n+\n+import com.facebook.presto.orc.OrcDataSink;\n+import com.facebook.presto.orc.stream.OrcDataOutput;\n+import com.facebook.presto.spi.page.SerializedPage;\n+import io.airlift.units.DataSize;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static io.airlift.units.DataSize.Unit.MEGABYTE;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PageWriter\n+        implements Closeable\n+{\n+    private static final int INSTANCE_SIZE = ClassLayout.parseClass(PageWriter.class).instanceSize();\n+\n+    private final OrcDataSink dataSink;\n+    private long bufferedBytes;\n+    private long retainedBytes;\n+    private long maxBufferedBytes = (new DataSize(128, MEGABYTE)).toBytes();\n+    private List<OrcDataOutput> bufferedPages;\n+\n+    public PageWriter(OrcDataSink dataSink)\n+    {\n+        this.dataSink = requireNonNull(dataSink, \"pageDataSink is null\");\n+        bufferedPages = new ArrayList<>();\n+    }\n+\n+    private boolean closed;\n+    /**\n+     * Number of bytes already flushed to the data sink.\n+     */\n+    public long getWrittenBytes()\n+    {\n+        return dataSink.size();\n+    }\n+\n+    public void write(SerializedPage page)\n+            throws IOException\n+    {\n+        retainedBytes += page.getRetainedSizeInBytes();\n+        PageDataOutput pageDataOutput = new PageDataOutput(page);\n+        long writtenSize = pageDataOutput.size();\n+        if (maxBufferedBytes - bufferedBytes < writtenSize) {\n+            dataSink.write(bufferedPages);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03195391a822501e3810570b59053d7c49c1c2c4"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2NTcyMg==", "bodyText": "Why to recreate it if it is already created?", "url": "https://github.com/prestodb/presto/pull/14329#discussion_r406565722", "createdAt": "2020-04-10T01:53:24Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageWriter.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.pagefile;\n+\n+import com.facebook.presto.orc.OrcDataSink;\n+import com.facebook.presto.orc.stream.OrcDataOutput;\n+import com.facebook.presto.spi.page.SerializedPage;\n+import io.airlift.units.DataSize;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static io.airlift.units.DataSize.Unit.MEGABYTE;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PageWriter\n+        implements Closeable\n+{\n+    private static final int INSTANCE_SIZE = ClassLayout.parseClass(PageWriter.class).instanceSize();\n+\n+    private final OrcDataSink dataSink;\n+    private long bufferedBytes;\n+    private long retainedBytes;\n+    private long maxBufferedBytes = (new DataSize(128, MEGABYTE)).toBytes();\n+    private List<OrcDataOutput> bufferedPages;\n+\n+    public PageWriter(OrcDataSink dataSink)\n+    {\n+        this.dataSink = requireNonNull(dataSink, \"pageDataSink is null\");\n+        bufferedPages = new ArrayList<>();\n+    }\n+\n+    private boolean closed;\n+    /**\n+     * Number of bytes already flushed to the data sink.\n+     */\n+    public long getWrittenBytes()\n+    {\n+        return dataSink.size();\n+    }\n+\n+    public void write(SerializedPage page)\n+            throws IOException\n+    {\n+        retainedBytes += page.getRetainedSizeInBytes();\n+        PageDataOutput pageDataOutput = new PageDataOutput(page);\n+        long writtenSize = pageDataOutput.size();\n+        if (maxBufferedBytes - bufferedBytes < writtenSize) {\n+            dataSink.write(bufferedPages);\n+            bufferedPages.clear();\n+            bufferedBytes = 0;\n+            retainedBytes = 0;\n+        }\n+        else {\n+            bufferedPages.add(new PageDataOutput(page));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03195391a822501e3810570b59053d7c49c1c2c4"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2NjIwNg==", "bodyText": "Given that this bug wasn't caught by test I would suggest improving the test (or adding a unit test) to cover this case.", "url": "https://github.com/prestodb/presto/pull/14329#discussion_r406566206", "createdAt": "2020-04-10T01:55:09Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageWriter.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.pagefile;\n+\n+import com.facebook.presto.orc.OrcDataSink;\n+import com.facebook.presto.orc.stream.OrcDataOutput;\n+import com.facebook.presto.spi.page.SerializedPage;\n+import io.airlift.units.DataSize;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static io.airlift.units.DataSize.Unit.MEGABYTE;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PageWriter\n+        implements Closeable\n+{\n+    private static final int INSTANCE_SIZE = ClassLayout.parseClass(PageWriter.class).instanceSize();\n+\n+    private final OrcDataSink dataSink;\n+    private long bufferedBytes;\n+    private long retainedBytes;\n+    private long maxBufferedBytes = (new DataSize(128, MEGABYTE)).toBytes();\n+    private List<OrcDataOutput> bufferedPages;\n+\n+    public PageWriter(OrcDataSink dataSink)\n+    {\n+        this.dataSink = requireNonNull(dataSink, \"pageDataSink is null\");\n+        bufferedPages = new ArrayList<>();\n+    }\n+\n+    private boolean closed;\n+    /**\n+     * Number of bytes already flushed to the data sink.\n+     */\n+    public long getWrittenBytes()\n+    {\n+        return dataSink.size();\n+    }\n+\n+    public void write(SerializedPage page)\n+            throws IOException\n+    {\n+        retainedBytes += page.getRetainedSizeInBytes();\n+        PageDataOutput pageDataOutput = new PageDataOutput(page);\n+        long writtenSize = pageDataOutput.size();\n+        if (maxBufferedBytes - bufferedBytes < writtenSize) {\n+            dataSink.write(bufferedPages);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2NTYyNQ=="}, "originalCommit": {"oid": "03195391a822501e3810570b59053d7c49c1c2c4"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMjMxNzA4", "url": "https://github.com/prestodb/presto/pull/14329#pullrequestreview-391231708", "createdAt": "2020-04-10T02:01:58Z", "commit": {"oid": "03195391a822501e3810570b59053d7c49c1c2c4"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMjowMTo1OFrOGDu7NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMjowOToxMFrOGDvB8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2NzczMg==", "bodyText": "pageSerde is null", "url": "https://github.com/prestodb/presto/pull/14329#discussion_r406567732", "createdAt": "2020-04-10T02:01:58Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFilePageSource.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.pagefile;\n+\n+import com.facebook.presto.hive.HiveColumnHandle;\n+import com.facebook.presto.spi.ConnectorPageSource;\n+import com.facebook.presto.spi.Page;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.block.Block;\n+import com.facebook.presto.spi.page.PagesSerde;\n+import io.airlift.slice.InputStreamSliceInput;\n+import org.apache.hadoop.fs.FSDataInputStream;\n+\n+import java.io.IOException;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import static com.facebook.presto.spi.StandardErrorCode.NOT_SUPPORTED;\n+import static com.facebook.presto.spi.page.PagesSerdeUtil.readPages;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PageFilePageSource\n+        implements ConnectorPageSource\n+{\n+    private final FSDataInputStream inputStream;\n+    private final Iterator<Page> pageReader;\n+    private final int[] hiveColumnIndexes;\n+\n+    private boolean closed;\n+    private long completedPositions;\n+    private long completedBytes;\n+    private long readTimeNanos;\n+    private long memoryUsageBytes;\n+\n+    public PageFilePageSource(\n+            FSDataInputStream inputStream,\n+            PagesSerde pagesSerde,\n+            List<HiveColumnHandle> columns)\n+    {\n+        this.inputStream = requireNonNull(inputStream, \"inputStream is null\");\n+        pageReader = readPages(\n+                requireNonNull(pagesSerde, \"pagesSerdeis null\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03195391a822501e3810570b59053d7c49c1c2c4"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2ODg2Ng==", "bodyText": "It looks like the OrcFileWriter does both, it closes the output file by closing the pageWriter and also runs the rollback action: https://github.com/prestodb/presto/blob/master/presto-hive/src/main/java/com/facebook/presto/hive/OrcFileWriter.java#L176", "url": "https://github.com/prestodb/presto/pull/14329#discussion_r406568866", "createdAt": "2020-04-10T02:06:36Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFileWriter.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.pagefile;\n+\n+import com.facebook.presto.hive.HiveFileWriter;\n+import com.facebook.presto.orc.OrcDataSink;\n+import com.facebook.presto.spi.Page;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.page.PagesSerde;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.concurrent.Callable;\n+\n+import static com.facebook.presto.hive.HiveErrorCode.HIVE_WRITER_CLOSE_ERROR;\n+import static com.facebook.presto.hive.HiveErrorCode.HIVE_WRITER_DATA_ERROR;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PageFileWriter\n+        implements HiveFileWriter\n+{\n+    private static final int INSTANCE_SIZE = ClassLayout.parseClass(PageFileWriter.class).instanceSize();\n+\n+    private final PageWriter pageWriter;\n+    private final Callable<Void> rollbackAction;\n+    private final PagesSerde pagesSerde;\n+\n+    public PageFileWriter(\n+            OrcDataSink dataSink,\n+            PagesSerde pagesSerde,\n+            Callable<Void> rollbackAction)\n+    {\n+        pageWriter = new PageWriter(dataSink);\n+        this.pagesSerde = requireNonNull(pagesSerde, \"pagesSerde is null\");\n+        this.rollbackAction = requireNonNull(rollbackAction, \"rollbackAction is null\");\n+    }\n+\n+    @Override\n+    public long getWrittenBytes()\n+    {\n+        return pageWriter.getWrittenBytes();\n+    }\n+\n+    @Override\n+    public long getSystemMemoryUsage()\n+    {\n+        return INSTANCE_SIZE + pageWriter.getRetainedBytes();\n+    }\n+\n+    @Override\n+    public void appendRows(Page dataPage)\n+    {\n+        try {\n+            pageWriter.write(pagesSerde.serialize(dataPage));\n+        }\n+        catch (IOException | UncheckedIOException e) {\n+            throw new PrestoException(HIVE_WRITER_DATA_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public void commit()\n+    {\n+        try {\n+            pageWriter.close();\n+        }\n+        catch (IOException | UncheckedIOException e) {\n+            try {\n+                rollbackAction.call();\n+            }\n+            catch (Exception ignored) {\n+                // ignore\n+            }\n+            throw new PrestoException(HIVE_WRITER_CLOSE_ERROR, \"Error committing write to Hive\", e);\n+        }\n+    }\n+\n+    @Override\n+    public void rollback()\n+    {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2NDc2Mg=="}, "originalCommit": {"oid": "03195391a822501e3810570b59053d7c49c1c2c4"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2OTExMg==", "bodyText": "Could you please remind me why this class is needed?", "url": "https://github.com/prestodb/presto/pull/14329#discussion_r406569112", "createdAt": "2020-04-10T02:07:43Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageInputFormat.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.pagefile;\n+\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.io.NullWritable;\n+import org.apache.hadoop.mapred.FileInputFormat;\n+import org.apache.hadoop.mapred.InputSplit;\n+import org.apache.hadoop.mapred.JobConf;\n+import org.apache.hadoop.mapred.RecordReader;\n+import org.apache.hadoop.mapred.Reporter;\n+\n+public class PageInputFormat", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03195391a822501e3810570b59053d7c49c1c2c4"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2OTE4Nw==", "bodyText": "Could you please remind me why this change is needed?", "url": "https://github.com/prestodb/presto/pull/14329#discussion_r406569187", "createdAt": "2020-04-10T02:07:58Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveUtil.java", "diffHunk": "@@ -311,6 +312,10 @@ public static void setReadColumns(Configuration configuration, List<Integer> rea\n             return MapredParquetInputFormat.class;\n         }\n \n+        if (PageInputFormat.class.getSimpleName().equals(inputFormatName)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03195391a822501e3810570b59053d7c49c1c2c4"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2OTQ1Nw==", "bodyText": "Why do we need both, buffered and retained?", "url": "https://github.com/prestodb/presto/pull/14329#discussion_r406569457", "createdAt": "2020-04-10T02:09:10Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageWriter.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.pagefile;\n+\n+import com.facebook.presto.orc.OrcDataSink;\n+import com.facebook.presto.orc.stream.OrcDataOutput;\n+import com.facebook.presto.spi.page.SerializedPage;\n+import io.airlift.units.DataSize;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static io.airlift.units.DataSize.Unit.MEGABYTE;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PageWriter\n+        implements Closeable\n+{\n+    private static final int INSTANCE_SIZE = ClassLayout.parseClass(PageWriter.class).instanceSize();\n+\n+    private final OrcDataSink dataSink;\n+    private long bufferedBytes;\n+    private long retainedBytes;\n+    private long maxBufferedBytes = (new DataSize(128, MEGABYTE)).toBytes();\n+    private List<OrcDataOutput> bufferedPages;\n+\n+    public PageWriter(OrcDataSink dataSink)\n+    {\n+        this.dataSink = requireNonNull(dataSink, \"pageDataSink is null\");\n+        bufferedPages = new ArrayList<>();\n+    }\n+\n+    private boolean closed;\n+    /**\n+     * Number of bytes already flushed to the data sink.\n+     */\n+    public long getWrittenBytes()\n+    {\n+        return dataSink.size();\n+    }\n+\n+    public void write(SerializedPage page)\n+            throws IOException\n+    {\n+        retainedBytes += page.getRetainedSizeInBytes();\n+        PageDataOutput pageDataOutput = new PageDataOutput(page);\n+        long writtenSize = pageDataOutput.size();\n+        if (maxBufferedBytes - bufferedBytes < writtenSize) {\n+            dataSink.write(bufferedPages);\n+            bufferedPages.clear();\n+            bufferedBytes = 0;\n+            retainedBytes = 0;\n+        }\n+        else {\n+            bufferedPages.add(new PageDataOutput(page));\n+            bufferedBytes += writtenSize;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03195391a822501e3810570b59053d7c49c1c2c4"}, "originalPosition": 70}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "03195391a822501e3810570b59053d7c49c1c2c4", "author": {"user": {"login": "viczhang861", "name": "Vic Zhang"}}, "url": "https://github.com/prestodb/presto/commit/03195391a822501e3810570b59053d7c49c1c2c4", "committedDate": "2020-04-09T22:45:24Z", "message": "Add PageFile format in HiveFileFormatBenchmark"}, "afterCommit": {"oid": "0e854781f5273e8c313d59557c42a6e018913ff4", "author": {"user": {"login": "viczhang861", "name": "Vic Zhang"}}, "url": "https://github.com/prestodb/presto/commit/0e854781f5273e8c313d59557c42a6e018913ff4", "committedDate": "2020-04-10T05:19:14Z", "message": "Add PageFile format in HiveFileFormatBenchmark"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0e854781f5273e8c313d59557c42a6e018913ff4", "author": {"user": {"login": "viczhang861", "name": "Vic Zhang"}}, "url": "https://github.com/prestodb/presto/commit/0e854781f5273e8c313d59557c42a6e018913ff4", "committedDate": "2020-04-10T05:19:14Z", "message": "Add PageFile format in HiveFileFormatBenchmark"}, "afterCommit": {"oid": "1f81651668f56ff0aa1c99c4a6c60b8ec39bd528", "author": {"user": {"login": "viczhang861", "name": "Vic Zhang"}}, "url": "https://github.com/prestodb/presto/commit/1f81651668f56ff0aa1c99c4a6c60b8ec39bd528", "committedDate": "2020-04-10T05:59:34Z", "message": "Add PageFile format in HiveFileFormatBenchmark"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMzA0MDA1", "url": "https://github.com/prestodb/presto/pull/14329#pullrequestreview-391304005", "createdAt": "2020-04-10T07:22:20Z", "commit": {"oid": "1f81651668f56ff0aa1c99c4a6c60b8ec39bd528"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1f81651668f56ff0aa1c99c4a6c60b8ec39bd528", "author": {"user": {"login": "viczhang861", "name": "Vic Zhang"}}, "url": "https://github.com/prestodb/presto/commit/1f81651668f56ff0aa1c99c4a6c60b8ec39bd528", "committedDate": "2020-04-10T05:59:34Z", "message": "Add PageFile format in HiveFileFormatBenchmark"}, "afterCommit": {"oid": "a518260b649e7f5807f476f957fba0a2bfcc0d55", "author": {"user": {"login": "viczhang861", "name": "Vic Zhang"}}, "url": "https://github.com/prestodb/presto/commit/a518260b649e7f5807f476f957fba0a2bfcc0d55", "committedDate": "2020-04-10T18:25:56Z", "message": "Add PageFile format in HiveFileFormatBenchmark"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "440bfbd50c4fcc1d8c087d1baba4be36a022fc3d", "author": {"user": {"login": "viczhang861", "name": "Vic Zhang"}}, "url": "https://github.com/prestodb/presto/commit/440bfbd50c4fcc1d8c087d1baba4be36a022fc3d", "committedDate": "2020-04-13T17:11:02Z", "message": "Add BlockEncodingSerde to ConnectorContext"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "531f5b96149b463eb8dca972a9d45bb5999dce5e", "author": {"user": {"login": "viczhang861", "name": "Vic Zhang"}}, "url": "https://github.com/prestodb/presto/commit/531f5b96149b463eb8dca972a9d45bb5999dce5e", "committedDate": "2020-04-13T17:29:05Z", "message": "Support write serialized pages to PageFile format\n\nA naive version of file with pages only."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48e86a9724167ed8d43caebc673c78ec58c9433d", "author": {"user": {"login": "viczhang861", "name": "Vic Zhang"}}, "url": "https://github.com/prestodb/presto/commit/48e86a9724167ed8d43caebc673c78ec58c9433d", "committedDate": "2020-04-13T17:29:14Z", "message": "Create PageFilePageSource to read PageFile\n\nSimply non-splittable read."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "69107517852af7013d1bf65656edff5f15f5a165", "author": {"user": {"login": "viczhang861", "name": "Vic Zhang"}}, "url": "https://github.com/prestodb/presto/commit/69107517852af7013d1bf65656edff5f15f5a165", "committedDate": "2020-04-13T17:42:08Z", "message": "Add control property for PageFile stripe max size\n\n - Add configuration property.\n - Add session property.\n - Test pagefile writer with small stripe size."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8956a999770ea71fd52d277169343190a7e6a735", "author": {"user": {"login": "viczhang861", "name": "Vic Zhang"}}, "url": "https://github.com/prestodb/presto/commit/8956a999770ea71fd52d277169343190a7e6a735", "committedDate": "2020-04-13T17:42:14Z", "message": "Disable unnecessary test for PageFile format\n\nCompression and schema evolution is not supported yet."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a518260b649e7f5807f476f957fba0a2bfcc0d55", "author": {"user": {"login": "viczhang861", "name": "Vic Zhang"}}, "url": "https://github.com/prestodb/presto/commit/a518260b649e7f5807f476f957fba0a2bfcc0d55", "committedDate": "2020-04-10T18:25:56Z", "message": "Add PageFile format in HiveFileFormatBenchmark"}, "afterCommit": {"oid": "e9f28ef3c395e778b49e1cfde759a62f350a73de", "author": {"user": {"login": "viczhang861", "name": "Vic Zhang"}}, "url": "https://github.com/prestodb/presto/commit/e9f28ef3c395e778b49e1cfde759a62f350a73de", "committedDate": "2020-04-13T17:42:15Z", "message": "Add PageFile format in HiveFileFormatBenchmark"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3ef607a6a5e6a4b6fbe3a5dee124cdc75433f44", "author": {"user": {"login": "viczhang861", "name": "Vic Zhang"}}, "url": "https://github.com/prestodb/presto/commit/c3ef607a6a5e6a4b6fbe3a5dee124cdc75433f44", "committedDate": "2020-04-13T18:01:07Z", "message": "Add PageFile format in HiveFileFormatBenchmark"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e9f28ef3c395e778b49e1cfde759a62f350a73de", "author": {"user": {"login": "viczhang861", "name": "Vic Zhang"}}, "url": "https://github.com/prestodb/presto/commit/e9f28ef3c395e778b49e1cfde759a62f350a73de", "committedDate": "2020-04-13T17:42:15Z", "message": "Add PageFile format in HiveFileFormatBenchmark"}, "afterCommit": {"oid": "c3ef607a6a5e6a4b6fbe3a5dee124cdc75433f44", "author": {"user": {"login": "viczhang861", "name": "Vic Zhang"}}, "url": "https://github.com/prestodb/presto/commit/c3ef607a6a5e6a4b6fbe3a5dee124cdc75433f44", "committedDate": "2020-04-13T18:01:07Z", "message": "Add PageFile format in HiveFileFormatBenchmark"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2163, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}