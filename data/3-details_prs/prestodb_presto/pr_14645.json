{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzNzg4NDgx", "number": 14645, "title": "Add data validation to Alluxio data caching", "bodyText": "== NO RELEASE NOTE ==", "createdAt": "2020-06-12T16:51:06Z", "url": "https://github.com/prestodb/presto/pull/14645", "merged": true, "mergeCommit": {"oid": "ae77e90a24683f5e2ad3c0b697f208c8c073f630"}, "closed": true, "closedAt": "2020-06-16T03:40:08Z", "author": {"login": "zhiyua-git"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcql4f5ABqjM0MzkyNDIwODg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcrsfnhgFqTQzMTEzMDg5OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "da2a81ea24d15f9f49c735d14d9e0de9424f51a2", "author": {"user": {"login": "zhiyua-git", "name": null}}, "url": "https://github.com/prestodb/presto/commit/da2a81ea24d15f9f49c735d14d9e0de9424f51a2", "committedDate": "2020-06-12T16:35:27Z", "message": "Add data validation to Alluxio data caching"}, "afterCommit": {"oid": "2e4f74aef221e0185d47e6fa1c8b70d7ae49b835", "author": {"user": {"login": "zhiyua-git", "name": null}}, "url": "https://github.com/prestodb/presto/commit/2e4f74aef221e0185d47e6fa1c8b70d7ae49b835", "committedDate": "2020-06-12T16:58:36Z", "message": "Add data validation to Alluxio data caching"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5ODk2NjI2", "url": "https://github.com/prestodb/presto/pull/14645#pullrequestreview-429896626", "createdAt": "2020-06-12T16:54:10Z", "commit": {"oid": "da2a81ea24d15f9f49c735d14d9e0de9424f51a2"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNjo1NDoxMFrOGjLFhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNjo1OTo0NVrOGjLQoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUzNDk4Mg==", "bodyText": "put FileInStream inputStream to its own line", "url": "https://github.com/prestodb/presto/pull/14645#discussion_r439534982", "createdAt": "2020-06-12T16:54:10Z", "author": {"login": "highker"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/alluxio/AlluxioCachingHdfsFileInputStream.java", "diffHunk": "@@ -15,36 +15,62 @@\n \n import alluxio.client.file.FileInStream;\n import alluxio.exception.ExceptionMessage;\n+import org.apache.hadoop.fs.FSDataInputStream;\n import org.apache.hadoop.fs.PositionedReadable;\n import org.apache.hadoop.fs.Seekable;\n \n import java.io.EOFException;\n import java.io.IOException;\n import java.io.InputStream;\n \n+import static com.google.common.base.Verify.verify;\n+\n public class AlluxioCachingHdfsFileInputStream\n         extends InputStream\n         implements Seekable, PositionedReadable\n {\n     private final FileInStream inputStream;\n+    private final FSDataInputStream originInputStream;\n+    private final boolean cacheValidationEnabled;\n \n     public AlluxioCachingHdfsFileInputStream(FileInStream inputStream)\n+    {\n+        this(inputStream, null, false);\n+    }\n+\n+    public AlluxioCachingHdfsFileInputStream(FileInStream inputStream,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da2a81ea24d15f9f49c735d14d9e0de9424f51a2"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUzNjg4MA==", "bodyText": "Let's remove this so that the query runner can test the original IO path.", "url": "https://github.com/prestodb/presto/pull/14645#discussion_r439536880", "createdAt": "2020-06-12T16:57:56Z", "author": {"login": "highker"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/HiveQueryRunner.java", "diffHunk": "@@ -157,6 +157,11 @@ public static DistributedQueryRunner createQueryRunner(\n                     .put(\"hive.assume-canonical-partition-keys\", \"true\")\n                     .put(\"hive.collect-column-statistics-on-write\", \"true\")\n                     .put(\"hive.temporary-table-schema\", TEMPORARY_TABLE_SCHEMA)\n+                    .put(\"hive.node-selection-strategy\", \"SOFT_AFFINITY\")\n+                    .put(\"cache.enabled\", \"true\")\n+                    .put(\"cache.type\", \"ALLUXIO\")\n+                    .put(\"cache.base-directory\", \"file://\" + new File(\"/tmp\", \"cache\").getAbsolutePath())\n+                    .put(\"cache.validation-enabled\", \"true\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da2a81ea24d15f9f49c735d14d9e0de9424f51a2"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUzNzE4Mg==", "bodyText": "bytes", "url": "https://github.com/prestodb/presto/pull/14645#discussion_r439537182", "createdAt": "2020-06-12T16:58:34Z", "author": {"login": "highker"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/alluxio/AlluxioCachingHdfsFileInputStream.java", "diffHunk": "@@ -15,36 +15,62 @@\n \n import alluxio.client.file.FileInStream;\n import alluxio.exception.ExceptionMessage;\n+import org.apache.hadoop.fs.FSDataInputStream;\n import org.apache.hadoop.fs.PositionedReadable;\n import org.apache.hadoop.fs.Seekable;\n \n import java.io.EOFException;\n import java.io.IOException;\n import java.io.InputStream;\n \n+import static com.google.common.base.Verify.verify;\n+\n public class AlluxioCachingHdfsFileInputStream\n         extends InputStream\n         implements Seekable, PositionedReadable\n {\n     private final FileInStream inputStream;\n+    private final FSDataInputStream originInputStream;\n+    private final boolean cacheValidationEnabled;\n \n     public AlluxioCachingHdfsFileInputStream(FileInStream inputStream)\n+    {\n+        this(inputStream, null, false);\n+    }\n+\n+    public AlluxioCachingHdfsFileInputStream(FileInStream inputStream,\n+            FSDataInputStream originInputStream,\n+            boolean cacheValidationEnabled)\n     {\n         this.inputStream = inputStream;\n+        this.originInputStream = originInputStream;\n+        this.cacheValidationEnabled = cacheValidationEnabled;\n     }\n \n     @Override\n     public int read()\n             throws IOException\n     {\n-        return inputStream.read();\n+        int outByte = inputStream.read();\n+        if (cacheValidationEnabled) {\n+            verify(originInputStream.read() == outByte, \"corrupted buffer at position \" + getPos());\n+        }\n+        return outByte;\n     }\n \n     @Override\n     public int read(long position, byte[] buffer, int offset, int length)\n             throws IOException\n     {\n-        return inputStream.positionedRead(position, buffer, offset, length);\n+        int bytesRead = inputStream.positionedRead(position, buffer, offset, length);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da2a81ea24d15f9f49c735d14d9e0de9424f51a2"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUzNzM0MQ==", "bodyText": "bytes", "url": "https://github.com/prestodb/presto/pull/14645#discussion_r439537341", "createdAt": "2020-06-12T16:58:51Z", "author": {"login": "highker"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/alluxio/AlluxioCachingHdfsFileInputStream.java", "diffHunk": "@@ -15,36 +15,62 @@\n \n import alluxio.client.file.FileInStream;\n import alluxio.exception.ExceptionMessage;\n+import org.apache.hadoop.fs.FSDataInputStream;\n import org.apache.hadoop.fs.PositionedReadable;\n import org.apache.hadoop.fs.Seekable;\n \n import java.io.EOFException;\n import java.io.IOException;\n import java.io.InputStream;\n \n+import static com.google.common.base.Verify.verify;\n+\n public class AlluxioCachingHdfsFileInputStream\n         extends InputStream\n         implements Seekable, PositionedReadable\n {\n     private final FileInStream inputStream;\n+    private final FSDataInputStream originInputStream;\n+    private final boolean cacheValidationEnabled;\n \n     public AlluxioCachingHdfsFileInputStream(FileInStream inputStream)\n+    {\n+        this(inputStream, null, false);\n+    }\n+\n+    public AlluxioCachingHdfsFileInputStream(FileInStream inputStream,\n+            FSDataInputStream originInputStream,\n+            boolean cacheValidationEnabled)\n     {\n         this.inputStream = inputStream;\n+        this.originInputStream = originInputStream;\n+        this.cacheValidationEnabled = cacheValidationEnabled;\n     }\n \n     @Override\n     public int read()\n             throws IOException\n     {\n-        return inputStream.read();\n+        int outByte = inputStream.read();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da2a81ea24d15f9f49c735d14d9e0de9424f51a2"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUzNzgyNQ==", "bodyText": "requireNonNull for both", "url": "https://github.com/prestodb/presto/pull/14645#discussion_r439537825", "createdAt": "2020-06-12T16:59:45Z", "author": {"login": "highker"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/alluxio/AlluxioCachingHdfsFileInputStream.java", "diffHunk": "@@ -15,36 +15,62 @@\n \n import alluxio.client.file.FileInStream;\n import alluxio.exception.ExceptionMessage;\n+import org.apache.hadoop.fs.FSDataInputStream;\n import org.apache.hadoop.fs.PositionedReadable;\n import org.apache.hadoop.fs.Seekable;\n \n import java.io.EOFException;\n import java.io.IOException;\n import java.io.InputStream;\n \n+import static com.google.common.base.Verify.verify;\n+\n public class AlluxioCachingHdfsFileInputStream\n         extends InputStream\n         implements Seekable, PositionedReadable\n {\n     private final FileInStream inputStream;\n+    private final FSDataInputStream originInputStream;\n+    private final boolean cacheValidationEnabled;\n \n     public AlluxioCachingHdfsFileInputStream(FileInStream inputStream)\n+    {\n+        this(inputStream, null, false);\n+    }\n+\n+    public AlluxioCachingHdfsFileInputStream(FileInStream inputStream,\n+            FSDataInputStream originInputStream,\n+            boolean cacheValidationEnabled)\n     {\n         this.inputStream = inputStream;\n+        this.originInputStream = originInputStream;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e4f74aef221e0185d47e6fa1c8b70d7ae49b835"}, "originalPosition": 32}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2e4f74aef221e0185d47e6fa1c8b70d7ae49b835", "author": {"user": {"login": "zhiyua-git", "name": null}}, "url": "https://github.com/prestodb/presto/commit/2e4f74aef221e0185d47e6fa1c8b70d7ae49b835", "committedDate": "2020-06-12T16:58:36Z", "message": "Add data validation to Alluxio data caching"}, "afterCommit": {"oid": "78822262694586930eb474784d5c509108727543", "author": {"user": {"login": "zhiyua-git", "name": null}}, "url": "https://github.com/prestodb/presto/commit/78822262694586930eb474784d5c509108727543", "committedDate": "2020-06-12T17:06:43Z", "message": "Add data validation to Alluxio data caching"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "78822262694586930eb474784d5c509108727543", "author": {"user": {"login": "zhiyua-git", "name": null}}, "url": "https://github.com/prestodb/presto/commit/78822262694586930eb474784d5c509108727543", "committedDate": "2020-06-12T17:06:43Z", "message": "Add data validation to Alluxio data caching"}, "afterCommit": {"oid": "89cac81b8a33c9aa7151300cc75373ff2d6ca489", "author": {"user": {"login": "zhiyua-git", "name": null}}, "url": "https://github.com/prestodb/presto/commit/89cac81b8a33c9aa7151300cc75373ff2d6ca489", "committedDate": "2020-06-12T17:09:46Z", "message": "Add data validation to Alluxio data caching"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5OTI0NTc1", "url": "https://github.com/prestodb/presto/pull/14645#pullrequestreview-429924575", "createdAt": "2020-06-12T17:39:02Z", "commit": {"oid": "89cac81b8a33c9aa7151300cc75373ff2d6ca489"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozOTowMlrOGjMakA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozOTowMlrOGjMakA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1Njc1Mg==", "bodyText": "We should avoid fileSystem.openFile in case validation is disabled.", "url": "https://github.com/prestodb/presto/pull/14645#discussion_r439556752", "createdAt": "2020-06-12T17:39:02Z", "author": {"login": "jainxrohit"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/alluxio/AlluxioCachingFileSystem.java", "diffHunk": "@@ -117,7 +126,7 @@ public FSDataInputStream openFile(Path path, HiveFileContext hiveFileContext)\n             URIStatus uriStatus = mFileSystem.getStatus(getAlluxioPath(path));\n             AlluxioURIStatus alluxioURIStatus = new AlluxioURIStatus(uriStatus.getFileInfo(), hiveFileContext);\n             FileInStream fileInStream = mFileSystem.openFile(alluxioURIStatus, OpenFilePOptions.getDefaultInstance());\n-            return new FSDataInputStream(new AlluxioCachingHdfsFileInputStream(fileInStream));\n+            return new FSDataInputStream(new AlluxioCachingHdfsFileInputStream(fileInStream, fileSystem.openFile(path, hiveFileContext), cacheValidationEnabled));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89cac81b8a33c9aa7151300cc75373ff2d6ca489"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5OTI1NTk3", "url": "https://github.com/prestodb/presto/pull/14645#pullrequestreview-429925597", "createdAt": "2020-06-12T17:40:52Z", "commit": {"oid": "89cac81b8a33c9aa7151300cc75373ff2d6ca489"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo0MDo1MlrOGjMdnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo0MDo1MlrOGjMdnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1NzUzMg==", "bodyText": "nit: Can you rename originInputStream to dataTierInputStream? We are using dataTier to represent the origin source, makes it easy to think what it is.", "url": "https://github.com/prestodb/presto/pull/14645#discussion_r439557532", "createdAt": "2020-06-12T17:40:52Z", "author": {"login": "jainxrohit"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/alluxio/AlluxioCachingHdfsFileInputStream.java", "diffHunk": "@@ -15,36 +15,64 @@\n \n import alluxio.client.file.FileInStream;\n import alluxio.exception.ExceptionMessage;\n+import org.apache.hadoop.fs.FSDataInputStream;\n import org.apache.hadoop.fs.PositionedReadable;\n import org.apache.hadoop.fs.Seekable;\n \n import java.io.EOFException;\n import java.io.IOException;\n import java.io.InputStream;\n \n+import static com.google.common.base.Verify.verify;\n+import static java.util.Objects.requireNonNull;\n+\n public class AlluxioCachingHdfsFileInputStream\n         extends InputStream\n         implements Seekable, PositionedReadable\n {\n     private final FileInStream inputStream;\n+    private final FSDataInputStream originInputStream;\n+    private final boolean cacheValidationEnabled;\n \n     public AlluxioCachingHdfsFileInputStream(FileInStream inputStream)\n     {\n-        this.inputStream = inputStream;\n+        this(inputStream, null, false);\n+    }\n+\n+    public AlluxioCachingHdfsFileInputStream(\n+            FileInStream inputStream,\n+            FSDataInputStream originInputStream,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89cac81b8a33c9aa7151300cc75373ff2d6ca489"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5OTI2ODQ4", "url": "https://github.com/prestodb/presto/pull/14645#pullrequestreview-429926848", "createdAt": "2020-06-12T17:42:56Z", "commit": {"oid": "89cac81b8a33c9aa7151300cc75373ff2d6ca489"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo0Mjo1NlrOGjMhhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo0Mjo1NlrOGjMhhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1ODUzNQ==", "bodyText": "Should only be done if validation is enabled.", "url": "https://github.com/prestodb/presto/pull/14645#discussion_r439558535", "createdAt": "2020-06-12T17:42:56Z", "author": {"login": "jainxrohit"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/alluxio/AlluxioCachingHdfsFileInputStream.java", "diffHunk": "@@ -77,6 +105,7 @@ public void seek(long position)\n             throws IOException\n     {\n         inputStream.seek(position);\n+        originInputStream.seek(position);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89cac81b8a33c9aa7151300cc75373ff2d6ca489"}, "originalPosition": 72}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5OTI3MDkz", "url": "https://github.com/prestodb/presto/pull/14645#pullrequestreview-429927093", "createdAt": "2020-06-12T17:43:20Z", "commit": {"oid": "89cac81b8a33c9aa7151300cc75373ff2d6ca489"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo0MzoyMFrOGjMiUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo0MzoyMFrOGjMiUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1ODczNw==", "bodyText": "Lets create this as optional, as it may not be present when validation is disabled.", "url": "https://github.com/prestodb/presto/pull/14645#discussion_r439558737", "createdAt": "2020-06-12T17:43:20Z", "author": {"login": "jainxrohit"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/alluxio/AlluxioCachingHdfsFileInputStream.java", "diffHunk": "@@ -15,36 +15,64 @@\n \n import alluxio.client.file.FileInStream;\n import alluxio.exception.ExceptionMessage;\n+import org.apache.hadoop.fs.FSDataInputStream;\n import org.apache.hadoop.fs.PositionedReadable;\n import org.apache.hadoop.fs.Seekable;\n \n import java.io.EOFException;\n import java.io.IOException;\n import java.io.InputStream;\n \n+import static com.google.common.base.Verify.verify;\n+import static java.util.Objects.requireNonNull;\n+\n public class AlluxioCachingHdfsFileInputStream\n         extends InputStream\n         implements Seekable, PositionedReadable\n {\n     private final FileInStream inputStream;\n+    private final FSDataInputStream originInputStream;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89cac81b8a33c9aa7151300cc75373ff2d6ca489"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5OTI3NzA1", "url": "https://github.com/prestodb/presto/pull/14645#pullrequestreview-429927705", "createdAt": "2020-06-12T17:44:18Z", "commit": {"oid": "89cac81b8a33c9aa7151300cc75373ff2d6ca489"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64a3035f8678e9ae805eefef34ac967280492f3a", "author": {"user": {"login": "zhiyua-git", "name": null}}, "url": "https://github.com/prestodb/presto/commit/64a3035f8678e9ae805eefef34ac967280492f3a", "committedDate": "2020-06-12T17:58:57Z", "message": "Add data validation to Alluxio data caching"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "89cac81b8a33c9aa7151300cc75373ff2d6ca489", "author": {"user": {"login": "zhiyua-git", "name": null}}, "url": "https://github.com/prestodb/presto/commit/89cac81b8a33c9aa7151300cc75373ff2d6ca489", "committedDate": "2020-06-12T17:09:46Z", "message": "Add data validation to Alluxio data caching"}, "afterCommit": {"oid": "64a3035f8678e9ae805eefef34ac967280492f3a", "author": {"user": {"login": "zhiyua-git", "name": null}}, "url": "https://github.com/prestodb/presto/commit/64a3035f8678e9ae805eefef34ac967280492f3a", "committedDate": "2020-06-12T17:58:57Z", "message": "Add data validation to Alluxio data caching"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ca98627820e0419ee3a7496593859bfbf90526c3", "author": {"user": {"login": "zhiyua-git", "name": null}}, "url": "https://github.com/prestodb/presto/commit/ca98627820e0419ee3a7496593859bfbf90526c3", "committedDate": "2020-06-13T04:43:12Z", "message": "Add unit test for Alluxio data validation\n\n1. Add unit teste for data validation logic in AlluxioCachingHdfsFileInputStream\n2. Refactor ByteArraySeekableStream class out for reuse."}, "afterCommit": {"oid": "876d02b4c8f000c8aa2040edb75133b9094b7ffe", "author": {"user": {"login": "zhiyua-git", "name": null}}, "url": "https://github.com/prestodb/presto/commit/876d02b4c8f000c8aa2040edb75133b9094b7ffe", "committedDate": "2020-06-14T06:09:33Z", "message": "Add unit test for Alluxio data validation\n\n1. Add unit teste for data validation logic in AlluxioCachingHdfsFileInputStream\n2. Refactor ByteArraySeekableStream class out for reuse."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwODMwMTk3", "url": "https://github.com/prestodb/presto/pull/14645#pullrequestreview-430830197", "createdAt": "2020-06-15T17:01:06Z", "commit": {"oid": "876d02b4c8f000c8aa2040edb75133b9094b7ffe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNzowMTowNlrOGj65_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNzowMTowNlrOGj65_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMxODQ2Mg==", "bodyText": "Shouldn't this be offset insted of 0?\nCan you please test it with a bigger table e.g. order?", "url": "https://github.com/prestodb/presto/pull/14645#discussion_r440318462", "createdAt": "2020-06-15T17:01:06Z", "author": {"login": "jainxrohit"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/alluxio/AlluxioCachingHdfsFileInputStream.java", "diffHunk": "@@ -15,36 +15,66 @@\n \n import alluxio.client.file.FileInStream;\n import alluxio.exception.ExceptionMessage;\n+import org.apache.hadoop.fs.FSDataInputStream;\n import org.apache.hadoop.fs.PositionedReadable;\n import org.apache.hadoop.fs.Seekable;\n \n import java.io.EOFException;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Verify.verify;\n+import static java.util.Objects.requireNonNull;\n \n public class AlluxioCachingHdfsFileInputStream\n         extends InputStream\n         implements Seekable, PositionedReadable\n {\n     private final FileInStream inputStream;\n+    private final Optional<FSDataInputStream> dataTierInputStream;\n+    private final boolean cacheValidationEnabled;\n \n     public AlluxioCachingHdfsFileInputStream(FileInStream inputStream)\n     {\n-        this.inputStream = inputStream;\n+        this(inputStream, Optional.empty(), false);\n+    }\n+\n+    public AlluxioCachingHdfsFileInputStream(\n+            FileInStream inputStream,\n+            Optional<FSDataInputStream> dataTierInputStream,\n+            boolean cacheValidationEnabled)\n+    {\n+        this.inputStream = requireNonNull(inputStream);\n+        this.dataTierInputStream = requireNonNull(dataTierInputStream);\n+        verify(!cacheValidationEnabled || dataTierInputStream.isPresent(), \"data tier input need to be non-null for data validation.\");\n+        this.cacheValidationEnabled = cacheValidationEnabled;\n     }\n \n     @Override\n     public int read()\n             throws IOException\n     {\n-        return inputStream.read();\n+        int outByte = inputStream.read();\n+        if (cacheValidationEnabled) {\n+            verify(dataTierInputStream.get().read() == outByte, \"corrupted buffer at position \" + getPos());\n+        }\n+        return outByte;\n     }\n \n     @Override\n     public int read(long position, byte[] buffer, int offset, int length)\n             throws IOException\n     {\n-        return inputStream.positionedRead(position, buffer, offset, length);\n+        int bytes = inputStream.positionedRead(position, buffer, offset, length);\n+        if (cacheValidationEnabled) {\n+            byte[] validationBuffer = new byte[bytes];\n+            dataTierInputStream.get().read(position, validationBuffer, 0, bytes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "876d02b4c8f000c8aa2040edb75133b9094b7ffe"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwODk2NjQw", "url": "https://github.com/prestodb/presto/pull/14645#pullrequestreview-430896640", "createdAt": "2020-06-15T18:36:14Z", "commit": {"oid": "876d02b4c8f000c8aa2040edb75133b9094b7ffe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxODozNjoxNFrOGj-Dsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxODozNjoxNFrOGj-Dsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM3MDA5OA==", "bodyText": "Not really sure what got changed here? If nothing, then can you please fix the format to make sure it does not show in diff?", "url": "https://github.com/prestodb/presto/pull/14645#discussion_r440370098", "createdAt": "2020-06-15T18:36:14Z", "author": {"login": "jainxrohit"}, "path": "presto-cache/src/test/java/com/facebook/presto/cache/alluxio/TestAlluxioCachingFileSystem.java", "diffHunk": "@@ -93,11 +87,47 @@ public void setupMethod()\n     @Test(timeOut = 30_000)\n     public void testBasic()\n             throws Exception\n+    {\n+        testWithDataValidation(false);\n+    }\n+\n+    @Test(timeOut = 30_000)\n+    public void testBasicWithDataValidationEnabled()\n+            throws Exception\n+    {\n+        testWithDataValidation(true);\n+    }\n+\n+    @Test(invocationCount = 10)\n+    public void testStress()\n+            throws ExecutionException, InterruptedException, URISyntaxException, IOException\n     {\n         CacheConfig cacheConfig = new CacheConfig()\n                 .setCacheType(ALLUXIO)\n                 .setCachingEnabled(true)\n                 .setBaseDirectory(cacheDirectory);\n+        AlluxioCacheConfig alluxioCacheConfig = new AlluxioCacheConfig()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "876d02b4c8f000c8aa2040edb75133b9094b7ffe"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwODk3MzE3", "url": "https://github.com/prestodb/presto/pull/14645#pullrequestreview-430897317", "createdAt": "2020-06-15T18:37:17Z", "commit": {"oid": "876d02b4c8f000c8aa2040edb75133b9094b7ffe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxODozNzoxOFrOGj-Fwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxODozNzoxOFrOGj-Fwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM3MDYyNg==", "bodyText": "Can we keep the base method name as testBasic and use it to leverage validation on/off?", "url": "https://github.com/prestodb/presto/pull/14645#discussion_r440370626", "createdAt": "2020-06-15T18:37:18Z", "author": {"login": "jainxrohit"}, "path": "presto-cache/src/test/java/com/facebook/presto/cache/alluxio/TestAlluxioCachingFileSystem.java", "diffHunk": "@@ -93,11 +87,47 @@ public void setupMethod()\n     @Test(timeOut = 30_000)\n     public void testBasic()\n             throws Exception\n+    {\n+        testWithDataValidation(false);\n+    }\n+\n+    @Test(timeOut = 30_000)\n+    public void testBasicWithDataValidationEnabled()\n+            throws Exception\n+    {\n+        testWithDataValidation(true);\n+    }\n+\n+    @Test(invocationCount = 10)\n+    public void testStress()\n+            throws ExecutionException, InterruptedException, URISyntaxException, IOException\n     {\n         CacheConfig cacheConfig = new CacheConfig()\n                 .setCacheType(ALLUXIO)\n                 .setCachingEnabled(true)\n                 .setBaseDirectory(cacheDirectory);\n+        AlluxioCacheConfig alluxioCacheConfig = new AlluxioCacheConfig()\n+                .setMaxCacheSize(new DataSize(10, KILOBYTE));\n+\n+        AlluxioCachingFileSystem cachingFileSystem = cachingFileSystem(cacheConfig, alluxioCacheConfig);\n+        stressTest(data, (position, buffer, offset, length) -> {\n+            try {\n+                readFully(cachingFileSystem, position, buffer, offset, length);\n+            }\n+            catch (Exception e) {\n+                e.printStackTrace();\n+            }\n+        });\n+    }\n+\n+    private void testWithDataValidation(boolean validationEnabled)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "876d02b4c8f000c8aa2040edb75133b9094b7ffe"}, "originalPosition": 65}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "876d02b4c8f000c8aa2040edb75133b9094b7ffe", "author": {"user": {"login": "zhiyua-git", "name": null}}, "url": "https://github.com/prestodb/presto/commit/876d02b4c8f000c8aa2040edb75133b9094b7ffe", "committedDate": "2020-06-14T06:09:33Z", "message": "Add unit test for Alluxio data validation\n\n1. Add unit teste for data validation logic in AlluxioCachingHdfsFileInputStream\n2. Refactor ByteArraySeekableStream class out for reuse."}, "afterCommit": {"oid": "5c3f173c582d39b7e2108d8ea0ef90d946f95a8d", "author": {"user": {"login": "zhiyua-git", "name": null}}, "url": "https://github.com/prestodb/presto/commit/5c3f173c582d39b7e2108d8ea0ef90d946f95a8d", "committedDate": "2020-06-15T19:19:34Z", "message": "Add unit test for Alluxio data validation\n\n1. Add unit teste for data validation logic in AlluxioCachingHdfsFileInputStream\n2. Refactor ByteArraySeekableStream class out for reuse."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwOTI5NDkz", "url": "https://github.com/prestodb/presto/pull/14645#pullrequestreview-430929493", "createdAt": "2020-06-15T19:25:48Z", "commit": {"oid": "5c3f173c582d39b7e2108d8ea0ef90d946f95a8d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxMDY5MzQ1", "url": "https://github.com/prestodb/presto/pull/14645#pullrequestreview-431069345", "createdAt": "2020-06-15T23:57:21Z", "commit": {"oid": "5c3f173c582d39b7e2108d8ea0ef90d946f95a8d"}, "state": "COMMENTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMzo1NzoyMVrOGkGlAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMDoyMzo0M1rOGkHCpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUwOTY5Nw==", "bodyText": "put fileInStream to its own line", "url": "https://github.com/prestodb/presto/pull/14645#discussion_r440509697", "createdAt": "2020-06-15T23:57:21Z", "author": {"login": "highker"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/alluxio/AlluxioCachingFileSystem.java", "diffHunk": "@@ -117,7 +127,9 @@ public FSDataInputStream openFile(Path path, HiveFileContext hiveFileContext)\n             URIStatus uriStatus = mFileSystem.getStatus(getAlluxioPath(path));\n             AlluxioURIStatus alluxioURIStatus = new AlluxioURIStatus(uriStatus.getFileInfo(), hiveFileContext);\n             FileInStream fileInStream = mFileSystem.openFile(alluxioURIStatus, OpenFilePOptions.getDefaultInstance());\n-            return new FSDataInputStream(new AlluxioCachingHdfsFileInputStream(fileInStream));\n+            return new FSDataInputStream(new AlluxioCachingHdfsFileInputStream(fileInStream,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c3f173c582d39b7e2108d8ea0ef90d946f95a8d"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUxMDE3NA==", "bodyText": "this.inputStream = requireNonNull(inputStream, \"inputStream is null\");\nSame for the other", "url": "https://github.com/prestodb/presto/pull/14645#discussion_r440510174", "createdAt": "2020-06-15T23:59:07Z", "author": {"login": "highker"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/alluxio/AlluxioCachingHdfsFileInputStream.java", "diffHunk": "@@ -15,36 +15,66 @@\n \n import alluxio.client.file.FileInStream;\n import alluxio.exception.ExceptionMessage;\n+import org.apache.hadoop.fs.FSDataInputStream;\n import org.apache.hadoop.fs.PositionedReadable;\n import org.apache.hadoop.fs.Seekable;\n \n import java.io.EOFException;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Verify.verify;\n+import static java.util.Objects.requireNonNull;\n \n public class AlluxioCachingHdfsFileInputStream\n         extends InputStream\n         implements Seekable, PositionedReadable\n {\n     private final FileInStream inputStream;\n+    private final Optional<FSDataInputStream> dataTierInputStream;\n+    private final boolean cacheValidationEnabled;\n \n     public AlluxioCachingHdfsFileInputStream(FileInStream inputStream)\n     {\n-        this.inputStream = inputStream;\n+        this(inputStream, Optional.empty(), false);\n+    }\n+\n+    public AlluxioCachingHdfsFileInputStream(\n+            FileInStream inputStream,\n+            Optional<FSDataInputStream> dataTierInputStream,\n+            boolean cacheValidationEnabled)\n+    {\n+        this.inputStream = requireNonNull(inputStream);\n+        this.dataTierInputStream = requireNonNull(dataTierInputStream);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c3f173c582d39b7e2108d8ea0ef90d946f95a8d"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUxNDA1Mg==", "bodyText": "add requireNonNull for bytes", "url": "https://github.com/prestodb/presto/pull/14645#discussion_r440514052", "createdAt": "2020-06-16T00:12:26Z", "author": {"login": "highker"}, "path": "presto-cache/src/test/java/com/facebook/presto/cache/alluxio/ByteArraySeekableStream.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.cache.alluxio;\n+\n+import alluxio.exception.ExceptionMessage;\n+import org.apache.hadoop.fs.PositionedReadable;\n+import org.apache.hadoop.fs.Seekable;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.EOFException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+class ByteArraySeekableStream\n+        extends InputStream\n+        implements Seekable, PositionedReadable\n+{\n+    private final ByteArrayInputStream inputStream;\n+    private final int length;\n+\n+    public ByteArraySeekableStream(byte[] bytes)\n+    {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c3f173c582d39b7e2108d8ea0ef90d946f95a8d"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUxNjU5MQ==", "bodyText": "spell out buffer", "url": "https://github.com/prestodb/presto/pull/14645#discussion_r440516591", "createdAt": "2020-06-16T00:21:30Z", "author": {"login": "highker"}, "path": "presto-cache/src/test/java/com/facebook/presto/cache/alluxio/TestAlluxioCachingHdfsFileInputStream.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.cache.alluxio;\n+\n+import alluxio.client.file.FileInStream;\n+import com.google.common.base.VerifyException;\n+import org.apache.hadoop.fs.FSDataInputStream;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.cache.TestingCacheUtils.validateBuffer;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.fail;\n+\n+@Test(singleThreaded = true)\n+public class TestAlluxioCachingHdfsFileInputStream\n+{\n+    @Test\n+    public void testConstructor()\n+    {\n+        FSDataInputStream dataTierInputStream = new TestFSDataInputStream(new byte[] {});\n+        FileInStream fileInStream = new TestFileInStream(new byte[] {});\n+        new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.empty(), false);\n+        new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.of(dataTierInputStream), false);\n+        new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.of(dataTierInputStream), true);\n+        try {\n+            new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.empty(), true);\n+            fail();\n+        }\n+        catch (VerifyException ex) {\n+            assertEquals(ex.getMessage(), \"data tier input need to be non-null for data validation.\");\n+        }\n+    }\n+\n+    @Test\n+    public void testValidateDataEnabledWithDataMismatch()\n+            throws IOException\n+    {\n+        byte[] inputData = new byte[] {1, 2, 3};\n+        byte[] corruptedData = new byte[] {1, 3, 3};\n+        FSDataInputStream dataTierInputStream = new TestFSDataInputStream(inputData);\n+        FileInStream fileInStream = new TestFileInStream(corruptedData);\n+        AlluxioCachingHdfsFileInputStream fileInputStream = new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.of(dataTierInputStream), true);\n+        byte[] buf = new byte[3];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c3f173c582d39b7e2108d8ea0ef90d946f95a8d"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUxNjY3NA==", "bodyText": "same", "url": "https://github.com/prestodb/presto/pull/14645#discussion_r440516674", "createdAt": "2020-06-16T00:21:46Z", "author": {"login": "highker"}, "path": "presto-cache/src/test/java/com/facebook/presto/cache/alluxio/TestAlluxioCachingHdfsFileInputStream.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.cache.alluxio;\n+\n+import alluxio.client.file.FileInStream;\n+import com.google.common.base.VerifyException;\n+import org.apache.hadoop.fs.FSDataInputStream;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.cache.TestingCacheUtils.validateBuffer;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.fail;\n+\n+@Test(singleThreaded = true)\n+public class TestAlluxioCachingHdfsFileInputStream\n+{\n+    @Test\n+    public void testConstructor()\n+    {\n+        FSDataInputStream dataTierInputStream = new TestFSDataInputStream(new byte[] {});\n+        FileInStream fileInStream = new TestFileInStream(new byte[] {});\n+        new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.empty(), false);\n+        new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.of(dataTierInputStream), false);\n+        new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.of(dataTierInputStream), true);\n+        try {\n+            new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.empty(), true);\n+            fail();\n+        }\n+        catch (VerifyException ex) {\n+            assertEquals(ex.getMessage(), \"data tier input need to be non-null for data validation.\");\n+        }\n+    }\n+\n+    @Test\n+    public void testValidateDataEnabledWithDataMismatch()\n+            throws IOException\n+    {\n+        byte[] inputData = new byte[] {1, 2, 3};\n+        byte[] corruptedData = new byte[] {1, 3, 3};\n+        FSDataInputStream dataTierInputStream = new TestFSDataInputStream(inputData);\n+        FileInStream fileInStream = new TestFileInStream(corruptedData);\n+        AlluxioCachingHdfsFileInputStream fileInputStream = new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.of(dataTierInputStream), true);\n+        byte[] buf = new byte[3];\n+        try {\n+            fileInputStream.readFully(0, buf, 0, buf.length);\n+            fail(\"Data validation didn't work for mismatched data.\");\n+        }\n+        catch (VerifyException ex) {\n+            assertEquals(ex.getMessage(), \"corrupted buffer at position 1\");\n+        }\n+    }\n+\n+    @Test\n+    public void testValidateDataEnabledWithDataMatched()\n+            throws IOException\n+    {\n+        byte[] inputData = new byte[] {1, 2, 3};\n+        FSDataInputStream dataTierInputStream = new TestFSDataInputStream(inputData);\n+        FileInStream fileInStream = new TestFileInStream(inputData);\n+        AlluxioCachingHdfsFileInputStream fileInputStream = new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.of(dataTierInputStream), true);\n+        byte[] buf = new byte[3];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c3f173c582d39b7e2108d8ea0ef90d946f95a8d"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUxNjY5Ng==", "bodyText": "same", "url": "https://github.com/prestodb/presto/pull/14645#discussion_r440516696", "createdAt": "2020-06-16T00:21:50Z", "author": {"login": "highker"}, "path": "presto-cache/src/test/java/com/facebook/presto/cache/alluxio/TestAlluxioCachingHdfsFileInputStream.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.cache.alluxio;\n+\n+import alluxio.client.file.FileInStream;\n+import com.google.common.base.VerifyException;\n+import org.apache.hadoop.fs.FSDataInputStream;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.cache.TestingCacheUtils.validateBuffer;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.fail;\n+\n+@Test(singleThreaded = true)\n+public class TestAlluxioCachingHdfsFileInputStream\n+{\n+    @Test\n+    public void testConstructor()\n+    {\n+        FSDataInputStream dataTierInputStream = new TestFSDataInputStream(new byte[] {});\n+        FileInStream fileInStream = new TestFileInStream(new byte[] {});\n+        new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.empty(), false);\n+        new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.of(dataTierInputStream), false);\n+        new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.of(dataTierInputStream), true);\n+        try {\n+            new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.empty(), true);\n+            fail();\n+        }\n+        catch (VerifyException ex) {\n+            assertEquals(ex.getMessage(), \"data tier input need to be non-null for data validation.\");\n+        }\n+    }\n+\n+    @Test\n+    public void testValidateDataEnabledWithDataMismatch()\n+            throws IOException\n+    {\n+        byte[] inputData = new byte[] {1, 2, 3};\n+        byte[] corruptedData = new byte[] {1, 3, 3};\n+        FSDataInputStream dataTierInputStream = new TestFSDataInputStream(inputData);\n+        FileInStream fileInStream = new TestFileInStream(corruptedData);\n+        AlluxioCachingHdfsFileInputStream fileInputStream = new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.of(dataTierInputStream), true);\n+        byte[] buf = new byte[3];\n+        try {\n+            fileInputStream.readFully(0, buf, 0, buf.length);\n+            fail(\"Data validation didn't work for mismatched data.\");\n+        }\n+        catch (VerifyException ex) {\n+            assertEquals(ex.getMessage(), \"corrupted buffer at position 1\");\n+        }\n+    }\n+\n+    @Test\n+    public void testValidateDataEnabledWithDataMatched()\n+            throws IOException\n+    {\n+        byte[] inputData = new byte[] {1, 2, 3};\n+        FSDataInputStream dataTierInputStream = new TestFSDataInputStream(inputData);\n+        FileInStream fileInStream = new TestFileInStream(inputData);\n+        AlluxioCachingHdfsFileInputStream fileInputStream = new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.of(dataTierInputStream), true);\n+        byte[] buf = new byte[3];\n+        fileInputStream.readFully(0, buf, 0, buf.length);\n+        validateBuffer(inputData, 0, buf, 0, inputData.length);\n+    }\n+\n+    @Test\n+    public void testValidateDataDisabledWithDataMismatch()\n+            throws IOException\n+    {\n+        byte[] inputData = new byte[] {1, 2, 3};\n+        byte[] corruptedData = new byte[] {1, 3, 3};\n+        FSDataInputStream dataTierInputStream = new TestFSDataInputStream(inputData);\n+        FileInStream fileInStream = new TestFileInStream(corruptedData);\n+        AlluxioCachingHdfsFileInputStream fileInputStream = new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.of(dataTierInputStream), false);\n+        byte[] buf = new byte[3];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c3f173c582d39b7e2108d8ea0ef90d946f95a8d"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUxNjg3Mw==", "bodyText": "spell out position", "url": "https://github.com/prestodb/presto/pull/14645#discussion_r440516873", "createdAt": "2020-06-16T00:22:25Z", "author": {"login": "highker"}, "path": "presto-cache/src/test/java/com/facebook/presto/cache/alluxio/TestAlluxioCachingHdfsFileInputStream.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.cache.alluxio;\n+\n+import alluxio.client.file.FileInStream;\n+import com.google.common.base.VerifyException;\n+import org.apache.hadoop.fs.FSDataInputStream;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.cache.TestingCacheUtils.validateBuffer;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.fail;\n+\n+@Test(singleThreaded = true)\n+public class TestAlluxioCachingHdfsFileInputStream\n+{\n+    @Test\n+    public void testConstructor()\n+    {\n+        FSDataInputStream dataTierInputStream = new TestFSDataInputStream(new byte[] {});\n+        FileInStream fileInStream = new TestFileInStream(new byte[] {});\n+        new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.empty(), false);\n+        new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.of(dataTierInputStream), false);\n+        new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.of(dataTierInputStream), true);\n+        try {\n+            new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.empty(), true);\n+            fail();\n+        }\n+        catch (VerifyException ex) {\n+            assertEquals(ex.getMessage(), \"data tier input need to be non-null for data validation.\");\n+        }\n+    }\n+\n+    @Test\n+    public void testValidateDataEnabledWithDataMismatch()\n+            throws IOException\n+    {\n+        byte[] inputData = new byte[] {1, 2, 3};\n+        byte[] corruptedData = new byte[] {1, 3, 3};\n+        FSDataInputStream dataTierInputStream = new TestFSDataInputStream(inputData);\n+        FileInStream fileInStream = new TestFileInStream(corruptedData);\n+        AlluxioCachingHdfsFileInputStream fileInputStream = new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.of(dataTierInputStream), true);\n+        byte[] buf = new byte[3];\n+        try {\n+            fileInputStream.readFully(0, buf, 0, buf.length);\n+            fail(\"Data validation didn't work for mismatched data.\");\n+        }\n+        catch (VerifyException ex) {\n+            assertEquals(ex.getMessage(), \"corrupted buffer at position 1\");\n+        }\n+    }\n+\n+    @Test\n+    public void testValidateDataEnabledWithDataMatched()\n+            throws IOException\n+    {\n+        byte[] inputData = new byte[] {1, 2, 3};\n+        FSDataInputStream dataTierInputStream = new TestFSDataInputStream(inputData);\n+        FileInStream fileInStream = new TestFileInStream(inputData);\n+        AlluxioCachingHdfsFileInputStream fileInputStream = new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.of(dataTierInputStream), true);\n+        byte[] buf = new byte[3];\n+        fileInputStream.readFully(0, buf, 0, buf.length);\n+        validateBuffer(inputData, 0, buf, 0, inputData.length);\n+    }\n+\n+    @Test\n+    public void testValidateDataDisabledWithDataMismatch()\n+            throws IOException\n+    {\n+        byte[] inputData = new byte[] {1, 2, 3};\n+        byte[] corruptedData = new byte[] {1, 3, 3};\n+        FSDataInputStream dataTierInputStream = new TestFSDataInputStream(inputData);\n+        FileInStream fileInStream = new TestFileInStream(corruptedData);\n+        AlluxioCachingHdfsFileInputStream fileInputStream = new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.of(dataTierInputStream), false);\n+        byte[] buf = new byte[3];\n+        fileInputStream.readFully(0, buf, 0, buf.length);\n+        validateBuffer(corruptedData, 0, buf, 0, corruptedData.length);\n+    }\n+\n+    @Test\n+    public void testInteractionWithDataTierInputStream()\n+            throws IOException\n+    {\n+        byte[] inputData = new byte[] {1, 2, 3};\n+        FSDataInputStream dataTierInputStream = new TestFSDataInputStream(inputData);\n+        FileInStream fileInStream = new TestFileInStream(inputData);\n+        AlluxioCachingHdfsFileInputStream validationEnabledInputStream = new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.of(dataTierInputStream), true);\n+        AlluxioCachingHdfsFileInputStream validationDisabledInputStream = new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.of(dataTierInputStream), false);\n+\n+        // Seek on multiple positions on validationDisabledInputStream, it should not affect data tier\n+        validationDisabledInputStream.seek(2L);\n+        assertEquals(dataTierInputStream.getPos(), 0L);\n+        assertEquals(fileInStream.getPos(), 2L);\n+        validationDisabledInputStream.seek(1L);\n+        assertEquals(dataTierInputStream.getPos(), 0L);\n+        assertEquals(fileInStream.getPos(), 1L);\n+\n+        // Seek on multiple positions on validationEnabledInputStream, it should also seek for same position in data tier\n+        validationEnabledInputStream.seek(2L);\n+        assertEquals(dataTierInputStream.getPos(), 2L);\n+        assertEquals(fileInStream.getPos(), 2L);\n+        validationEnabledInputStream.seek(1L);\n+        assertEquals(dataTierInputStream.getPos(), 1L);\n+        assertEquals(fileInStream.getPos(), 1L);\n+    }\n+\n+    private static class TestFileInStream\n+            extends FileInStream\n+    {\n+        private final byte[] data;\n+        private long pos;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c3f173c582d39b7e2108d8ea0ef90d946f95a8d"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUxNzA0MQ==", "bodyText": "seek(long position)\nPresto codebase doesn't use abbreivations", "url": "https://github.com/prestodb/presto/pull/14645#discussion_r440517041", "createdAt": "2020-06-16T00:22:55Z", "author": {"login": "highker"}, "path": "presto-cache/src/test/java/com/facebook/presto/cache/alluxio/TestAlluxioCachingHdfsFileInputStream.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.cache.alluxio;\n+\n+import alluxio.client.file.FileInStream;\n+import com.google.common.base.VerifyException;\n+import org.apache.hadoop.fs.FSDataInputStream;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.cache.TestingCacheUtils.validateBuffer;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.fail;\n+\n+@Test(singleThreaded = true)\n+public class TestAlluxioCachingHdfsFileInputStream\n+{\n+    @Test\n+    public void testConstructor()\n+    {\n+        FSDataInputStream dataTierInputStream = new TestFSDataInputStream(new byte[] {});\n+        FileInStream fileInStream = new TestFileInStream(new byte[] {});\n+        new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.empty(), false);\n+        new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.of(dataTierInputStream), false);\n+        new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.of(dataTierInputStream), true);\n+        try {\n+            new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.empty(), true);\n+            fail();\n+        }\n+        catch (VerifyException ex) {\n+            assertEquals(ex.getMessage(), \"data tier input need to be non-null for data validation.\");\n+        }\n+    }\n+\n+    @Test\n+    public void testValidateDataEnabledWithDataMismatch()\n+            throws IOException\n+    {\n+        byte[] inputData = new byte[] {1, 2, 3};\n+        byte[] corruptedData = new byte[] {1, 3, 3};\n+        FSDataInputStream dataTierInputStream = new TestFSDataInputStream(inputData);\n+        FileInStream fileInStream = new TestFileInStream(corruptedData);\n+        AlluxioCachingHdfsFileInputStream fileInputStream = new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.of(dataTierInputStream), true);\n+        byte[] buf = new byte[3];\n+        try {\n+            fileInputStream.readFully(0, buf, 0, buf.length);\n+            fail(\"Data validation didn't work for mismatched data.\");\n+        }\n+        catch (VerifyException ex) {\n+            assertEquals(ex.getMessage(), \"corrupted buffer at position 1\");\n+        }\n+    }\n+\n+    @Test\n+    public void testValidateDataEnabledWithDataMatched()\n+            throws IOException\n+    {\n+        byte[] inputData = new byte[] {1, 2, 3};\n+        FSDataInputStream dataTierInputStream = new TestFSDataInputStream(inputData);\n+        FileInStream fileInStream = new TestFileInStream(inputData);\n+        AlluxioCachingHdfsFileInputStream fileInputStream = new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.of(dataTierInputStream), true);\n+        byte[] buf = new byte[3];\n+        fileInputStream.readFully(0, buf, 0, buf.length);\n+        validateBuffer(inputData, 0, buf, 0, inputData.length);\n+    }\n+\n+    @Test\n+    public void testValidateDataDisabledWithDataMismatch()\n+            throws IOException\n+    {\n+        byte[] inputData = new byte[] {1, 2, 3};\n+        byte[] corruptedData = new byte[] {1, 3, 3};\n+        FSDataInputStream dataTierInputStream = new TestFSDataInputStream(inputData);\n+        FileInStream fileInStream = new TestFileInStream(corruptedData);\n+        AlluxioCachingHdfsFileInputStream fileInputStream = new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.of(dataTierInputStream), false);\n+        byte[] buf = new byte[3];\n+        fileInputStream.readFully(0, buf, 0, buf.length);\n+        validateBuffer(corruptedData, 0, buf, 0, corruptedData.length);\n+    }\n+\n+    @Test\n+    public void testInteractionWithDataTierInputStream()\n+            throws IOException\n+    {\n+        byte[] inputData = new byte[] {1, 2, 3};\n+        FSDataInputStream dataTierInputStream = new TestFSDataInputStream(inputData);\n+        FileInStream fileInStream = new TestFileInStream(inputData);\n+        AlluxioCachingHdfsFileInputStream validationEnabledInputStream = new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.of(dataTierInputStream), true);\n+        AlluxioCachingHdfsFileInputStream validationDisabledInputStream = new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.of(dataTierInputStream), false);\n+\n+        // Seek on multiple positions on validationDisabledInputStream, it should not affect data tier\n+        validationDisabledInputStream.seek(2L);\n+        assertEquals(dataTierInputStream.getPos(), 0L);\n+        assertEquals(fileInStream.getPos(), 2L);\n+        validationDisabledInputStream.seek(1L);\n+        assertEquals(dataTierInputStream.getPos(), 0L);\n+        assertEquals(fileInStream.getPos(), 1L);\n+\n+        // Seek on multiple positions on validationEnabledInputStream, it should also seek for same position in data tier\n+        validationEnabledInputStream.seek(2L);\n+        assertEquals(dataTierInputStream.getPos(), 2L);\n+        assertEquals(fileInStream.getPos(), 2L);\n+        validationEnabledInputStream.seek(1L);\n+        assertEquals(dataTierInputStream.getPos(), 1L);\n+        assertEquals(fileInStream.getPos(), 1L);\n+    }\n+\n+    private static class TestFileInStream\n+            extends FileInStream\n+    {\n+        private final byte[] data;\n+        private long pos;\n+\n+        private TestFileInStream(byte[] data)\n+        {\n+            this.data = data;\n+            pos = 0;\n+        }\n+\n+        @Override\n+        public void seek(long l)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c3f173c582d39b7e2108d8ea0ef90d946f95a8d"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUxNzEwNg==", "bodyText": "throws IOException is redundant", "url": "https://github.com/prestodb/presto/pull/14645#discussion_r440517106", "createdAt": "2020-06-16T00:23:08Z", "author": {"login": "highker"}, "path": "presto-cache/src/test/java/com/facebook/presto/cache/alluxio/TestAlluxioCachingHdfsFileInputStream.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.cache.alluxio;\n+\n+import alluxio.client.file.FileInStream;\n+import com.google.common.base.VerifyException;\n+import org.apache.hadoop.fs.FSDataInputStream;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.cache.TestingCacheUtils.validateBuffer;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.fail;\n+\n+@Test(singleThreaded = true)\n+public class TestAlluxioCachingHdfsFileInputStream\n+{\n+    @Test\n+    public void testConstructor()\n+    {\n+        FSDataInputStream dataTierInputStream = new TestFSDataInputStream(new byte[] {});\n+        FileInStream fileInStream = new TestFileInStream(new byte[] {});\n+        new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.empty(), false);\n+        new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.of(dataTierInputStream), false);\n+        new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.of(dataTierInputStream), true);\n+        try {\n+            new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.empty(), true);\n+            fail();\n+        }\n+        catch (VerifyException ex) {\n+            assertEquals(ex.getMessage(), \"data tier input need to be non-null for data validation.\");\n+        }\n+    }\n+\n+    @Test\n+    public void testValidateDataEnabledWithDataMismatch()\n+            throws IOException\n+    {\n+        byte[] inputData = new byte[] {1, 2, 3};\n+        byte[] corruptedData = new byte[] {1, 3, 3};\n+        FSDataInputStream dataTierInputStream = new TestFSDataInputStream(inputData);\n+        FileInStream fileInStream = new TestFileInStream(corruptedData);\n+        AlluxioCachingHdfsFileInputStream fileInputStream = new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.of(dataTierInputStream), true);\n+        byte[] buf = new byte[3];\n+        try {\n+            fileInputStream.readFully(0, buf, 0, buf.length);\n+            fail(\"Data validation didn't work for mismatched data.\");\n+        }\n+        catch (VerifyException ex) {\n+            assertEquals(ex.getMessage(), \"corrupted buffer at position 1\");\n+        }\n+    }\n+\n+    @Test\n+    public void testValidateDataEnabledWithDataMatched()\n+            throws IOException\n+    {\n+        byte[] inputData = new byte[] {1, 2, 3};\n+        FSDataInputStream dataTierInputStream = new TestFSDataInputStream(inputData);\n+        FileInStream fileInStream = new TestFileInStream(inputData);\n+        AlluxioCachingHdfsFileInputStream fileInputStream = new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.of(dataTierInputStream), true);\n+        byte[] buf = new byte[3];\n+        fileInputStream.readFully(0, buf, 0, buf.length);\n+        validateBuffer(inputData, 0, buf, 0, inputData.length);\n+    }\n+\n+    @Test\n+    public void testValidateDataDisabledWithDataMismatch()\n+            throws IOException\n+    {\n+        byte[] inputData = new byte[] {1, 2, 3};\n+        byte[] corruptedData = new byte[] {1, 3, 3};\n+        FSDataInputStream dataTierInputStream = new TestFSDataInputStream(inputData);\n+        FileInStream fileInStream = new TestFileInStream(corruptedData);\n+        AlluxioCachingHdfsFileInputStream fileInputStream = new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.of(dataTierInputStream), false);\n+        byte[] buf = new byte[3];\n+        fileInputStream.readFully(0, buf, 0, buf.length);\n+        validateBuffer(corruptedData, 0, buf, 0, corruptedData.length);\n+    }\n+\n+    @Test\n+    public void testInteractionWithDataTierInputStream()\n+            throws IOException\n+    {\n+        byte[] inputData = new byte[] {1, 2, 3};\n+        FSDataInputStream dataTierInputStream = new TestFSDataInputStream(inputData);\n+        FileInStream fileInStream = new TestFileInStream(inputData);\n+        AlluxioCachingHdfsFileInputStream validationEnabledInputStream = new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.of(dataTierInputStream), true);\n+        AlluxioCachingHdfsFileInputStream validationDisabledInputStream = new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.of(dataTierInputStream), false);\n+\n+        // Seek on multiple positions on validationDisabledInputStream, it should not affect data tier\n+        validationDisabledInputStream.seek(2L);\n+        assertEquals(dataTierInputStream.getPos(), 0L);\n+        assertEquals(fileInStream.getPos(), 2L);\n+        validationDisabledInputStream.seek(1L);\n+        assertEquals(dataTierInputStream.getPos(), 0L);\n+        assertEquals(fileInStream.getPos(), 1L);\n+\n+        // Seek on multiple positions on validationEnabledInputStream, it should also seek for same position in data tier\n+        validationEnabledInputStream.seek(2L);\n+        assertEquals(dataTierInputStream.getPos(), 2L);\n+        assertEquals(fileInStream.getPos(), 2L);\n+        validationEnabledInputStream.seek(1L);\n+        assertEquals(dataTierInputStream.getPos(), 1L);\n+        assertEquals(fileInStream.getPos(), 1L);\n+    }\n+\n+    private static class TestFileInStream\n+            extends FileInStream\n+    {\n+        private final byte[] data;\n+        private long pos;\n+\n+        private TestFileInStream(byte[] data)\n+        {\n+            this.data = data;\n+            pos = 0;\n+        }\n+\n+        @Override\n+        public void seek(long l)\n+                throws IOException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c3f173c582d39b7e2108d8ea0ef90d946f95a8d"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUxNzE0Nw==", "bodyText": "same", "url": "https://github.com/prestodb/presto/pull/14645#discussion_r440517147", "createdAt": "2020-06-16T00:23:16Z", "author": {"login": "highker"}, "path": "presto-cache/src/test/java/com/facebook/presto/cache/alluxio/TestAlluxioCachingHdfsFileInputStream.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.cache.alluxio;\n+\n+import alluxio.client.file.FileInStream;\n+import com.google.common.base.VerifyException;\n+import org.apache.hadoop.fs.FSDataInputStream;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.cache.TestingCacheUtils.validateBuffer;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.fail;\n+\n+@Test(singleThreaded = true)\n+public class TestAlluxioCachingHdfsFileInputStream\n+{\n+    @Test\n+    public void testConstructor()\n+    {\n+        FSDataInputStream dataTierInputStream = new TestFSDataInputStream(new byte[] {});\n+        FileInStream fileInStream = new TestFileInStream(new byte[] {});\n+        new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.empty(), false);\n+        new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.of(dataTierInputStream), false);\n+        new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.of(dataTierInputStream), true);\n+        try {\n+            new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.empty(), true);\n+            fail();\n+        }\n+        catch (VerifyException ex) {\n+            assertEquals(ex.getMessage(), \"data tier input need to be non-null for data validation.\");\n+        }\n+    }\n+\n+    @Test\n+    public void testValidateDataEnabledWithDataMismatch()\n+            throws IOException\n+    {\n+        byte[] inputData = new byte[] {1, 2, 3};\n+        byte[] corruptedData = new byte[] {1, 3, 3};\n+        FSDataInputStream dataTierInputStream = new TestFSDataInputStream(inputData);\n+        FileInStream fileInStream = new TestFileInStream(corruptedData);\n+        AlluxioCachingHdfsFileInputStream fileInputStream = new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.of(dataTierInputStream), true);\n+        byte[] buf = new byte[3];\n+        try {\n+            fileInputStream.readFully(0, buf, 0, buf.length);\n+            fail(\"Data validation didn't work for mismatched data.\");\n+        }\n+        catch (VerifyException ex) {\n+            assertEquals(ex.getMessage(), \"corrupted buffer at position 1\");\n+        }\n+    }\n+\n+    @Test\n+    public void testValidateDataEnabledWithDataMatched()\n+            throws IOException\n+    {\n+        byte[] inputData = new byte[] {1, 2, 3};\n+        FSDataInputStream dataTierInputStream = new TestFSDataInputStream(inputData);\n+        FileInStream fileInStream = new TestFileInStream(inputData);\n+        AlluxioCachingHdfsFileInputStream fileInputStream = new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.of(dataTierInputStream), true);\n+        byte[] buf = new byte[3];\n+        fileInputStream.readFully(0, buf, 0, buf.length);\n+        validateBuffer(inputData, 0, buf, 0, inputData.length);\n+    }\n+\n+    @Test\n+    public void testValidateDataDisabledWithDataMismatch()\n+            throws IOException\n+    {\n+        byte[] inputData = new byte[] {1, 2, 3};\n+        byte[] corruptedData = new byte[] {1, 3, 3};\n+        FSDataInputStream dataTierInputStream = new TestFSDataInputStream(inputData);\n+        FileInStream fileInStream = new TestFileInStream(corruptedData);\n+        AlluxioCachingHdfsFileInputStream fileInputStream = new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.of(dataTierInputStream), false);\n+        byte[] buf = new byte[3];\n+        fileInputStream.readFully(0, buf, 0, buf.length);\n+        validateBuffer(corruptedData, 0, buf, 0, corruptedData.length);\n+    }\n+\n+    @Test\n+    public void testInteractionWithDataTierInputStream()\n+            throws IOException\n+    {\n+        byte[] inputData = new byte[] {1, 2, 3};\n+        FSDataInputStream dataTierInputStream = new TestFSDataInputStream(inputData);\n+        FileInStream fileInStream = new TestFileInStream(inputData);\n+        AlluxioCachingHdfsFileInputStream validationEnabledInputStream = new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.of(dataTierInputStream), true);\n+        AlluxioCachingHdfsFileInputStream validationDisabledInputStream = new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.of(dataTierInputStream), false);\n+\n+        // Seek on multiple positions on validationDisabledInputStream, it should not affect data tier\n+        validationDisabledInputStream.seek(2L);\n+        assertEquals(dataTierInputStream.getPos(), 0L);\n+        assertEquals(fileInStream.getPos(), 2L);\n+        validationDisabledInputStream.seek(1L);\n+        assertEquals(dataTierInputStream.getPos(), 0L);\n+        assertEquals(fileInStream.getPos(), 1L);\n+\n+        // Seek on multiple positions on validationEnabledInputStream, it should also seek for same position in data tier\n+        validationEnabledInputStream.seek(2L);\n+        assertEquals(dataTierInputStream.getPos(), 2L);\n+        assertEquals(fileInStream.getPos(), 2L);\n+        validationEnabledInputStream.seek(1L);\n+        assertEquals(dataTierInputStream.getPos(), 1L);\n+        assertEquals(fileInStream.getPos(), 1L);\n+    }\n+\n+    private static class TestFileInStream\n+            extends FileInStream\n+    {\n+        private final byte[] data;\n+        private long pos;\n+\n+        private TestFileInStream(byte[] data)\n+        {\n+            this.data = data;\n+            pos = 0;\n+        }\n+\n+        @Override\n+        public void seek(long l)\n+                throws IOException\n+        {\n+            pos = l;\n+        }\n+\n+        @Override\n+        public long getPos()\n+                throws IOException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c3f173c582d39b7e2108d8ea0ef90d946f95a8d"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUxNzE2Nw==", "bodyText": "same", "url": "https://github.com/prestodb/presto/pull/14645#discussion_r440517167", "createdAt": "2020-06-16T00:23:22Z", "author": {"login": "highker"}, "path": "presto-cache/src/test/java/com/facebook/presto/cache/alluxio/TestAlluxioCachingHdfsFileInputStream.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.cache.alluxio;\n+\n+import alluxio.client.file.FileInStream;\n+import com.google.common.base.VerifyException;\n+import org.apache.hadoop.fs.FSDataInputStream;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.cache.TestingCacheUtils.validateBuffer;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.fail;\n+\n+@Test(singleThreaded = true)\n+public class TestAlluxioCachingHdfsFileInputStream\n+{\n+    @Test\n+    public void testConstructor()\n+    {\n+        FSDataInputStream dataTierInputStream = new TestFSDataInputStream(new byte[] {});\n+        FileInStream fileInStream = new TestFileInStream(new byte[] {});\n+        new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.empty(), false);\n+        new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.of(dataTierInputStream), false);\n+        new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.of(dataTierInputStream), true);\n+        try {\n+            new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.empty(), true);\n+            fail();\n+        }\n+        catch (VerifyException ex) {\n+            assertEquals(ex.getMessage(), \"data tier input need to be non-null for data validation.\");\n+        }\n+    }\n+\n+    @Test\n+    public void testValidateDataEnabledWithDataMismatch()\n+            throws IOException\n+    {\n+        byte[] inputData = new byte[] {1, 2, 3};\n+        byte[] corruptedData = new byte[] {1, 3, 3};\n+        FSDataInputStream dataTierInputStream = new TestFSDataInputStream(inputData);\n+        FileInStream fileInStream = new TestFileInStream(corruptedData);\n+        AlluxioCachingHdfsFileInputStream fileInputStream = new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.of(dataTierInputStream), true);\n+        byte[] buf = new byte[3];\n+        try {\n+            fileInputStream.readFully(0, buf, 0, buf.length);\n+            fail(\"Data validation didn't work for mismatched data.\");\n+        }\n+        catch (VerifyException ex) {\n+            assertEquals(ex.getMessage(), \"corrupted buffer at position 1\");\n+        }\n+    }\n+\n+    @Test\n+    public void testValidateDataEnabledWithDataMatched()\n+            throws IOException\n+    {\n+        byte[] inputData = new byte[] {1, 2, 3};\n+        FSDataInputStream dataTierInputStream = new TestFSDataInputStream(inputData);\n+        FileInStream fileInStream = new TestFileInStream(inputData);\n+        AlluxioCachingHdfsFileInputStream fileInputStream = new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.of(dataTierInputStream), true);\n+        byte[] buf = new byte[3];\n+        fileInputStream.readFully(0, buf, 0, buf.length);\n+        validateBuffer(inputData, 0, buf, 0, inputData.length);\n+    }\n+\n+    @Test\n+    public void testValidateDataDisabledWithDataMismatch()\n+            throws IOException\n+    {\n+        byte[] inputData = new byte[] {1, 2, 3};\n+        byte[] corruptedData = new byte[] {1, 3, 3};\n+        FSDataInputStream dataTierInputStream = new TestFSDataInputStream(inputData);\n+        FileInStream fileInStream = new TestFileInStream(corruptedData);\n+        AlluxioCachingHdfsFileInputStream fileInputStream = new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.of(dataTierInputStream), false);\n+        byte[] buf = new byte[3];\n+        fileInputStream.readFully(0, buf, 0, buf.length);\n+        validateBuffer(corruptedData, 0, buf, 0, corruptedData.length);\n+    }\n+\n+    @Test\n+    public void testInteractionWithDataTierInputStream()\n+            throws IOException\n+    {\n+        byte[] inputData = new byte[] {1, 2, 3};\n+        FSDataInputStream dataTierInputStream = new TestFSDataInputStream(inputData);\n+        FileInStream fileInStream = new TestFileInStream(inputData);\n+        AlluxioCachingHdfsFileInputStream validationEnabledInputStream = new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.of(dataTierInputStream), true);\n+        AlluxioCachingHdfsFileInputStream validationDisabledInputStream = new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.of(dataTierInputStream), false);\n+\n+        // Seek on multiple positions on validationDisabledInputStream, it should not affect data tier\n+        validationDisabledInputStream.seek(2L);\n+        assertEquals(dataTierInputStream.getPos(), 0L);\n+        assertEquals(fileInStream.getPos(), 2L);\n+        validationDisabledInputStream.seek(1L);\n+        assertEquals(dataTierInputStream.getPos(), 0L);\n+        assertEquals(fileInStream.getPos(), 1L);\n+\n+        // Seek on multiple positions on validationEnabledInputStream, it should also seek for same position in data tier\n+        validationEnabledInputStream.seek(2L);\n+        assertEquals(dataTierInputStream.getPos(), 2L);\n+        assertEquals(fileInStream.getPos(), 2L);\n+        validationEnabledInputStream.seek(1L);\n+        assertEquals(dataTierInputStream.getPos(), 1L);\n+        assertEquals(fileInStream.getPos(), 1L);\n+    }\n+\n+    private static class TestFileInStream\n+            extends FileInStream\n+    {\n+        private final byte[] data;\n+        private long pos;\n+\n+        private TestFileInStream(byte[] data)\n+        {\n+            this.data = data;\n+            pos = 0;\n+        }\n+\n+        @Override\n+        public void seek(long l)\n+                throws IOException\n+        {\n+            pos = l;\n+        }\n+\n+        @Override\n+        public long getPos()\n+                throws IOException\n+        {\n+            return pos;\n+        }\n+\n+        @Override\n+        public long remaining()\n+        {\n+            return data.length - pos;\n+        }\n+\n+        @Override\n+        public int positionedRead(long pos, byte[] b, int off, int len)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c3f173c582d39b7e2108d8ea0ef90d946f95a8d"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUxNzE4NQ==", "bodyText": "same", "url": "https://github.com/prestodb/presto/pull/14645#discussion_r440517185", "createdAt": "2020-06-16T00:23:27Z", "author": {"login": "highker"}, "path": "presto-cache/src/test/java/com/facebook/presto/cache/alluxio/TestAlluxioCachingHdfsFileInputStream.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.cache.alluxio;\n+\n+import alluxio.client.file.FileInStream;\n+import com.google.common.base.VerifyException;\n+import org.apache.hadoop.fs.FSDataInputStream;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.cache.TestingCacheUtils.validateBuffer;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.fail;\n+\n+@Test(singleThreaded = true)\n+public class TestAlluxioCachingHdfsFileInputStream\n+{\n+    @Test\n+    public void testConstructor()\n+    {\n+        FSDataInputStream dataTierInputStream = new TestFSDataInputStream(new byte[] {});\n+        FileInStream fileInStream = new TestFileInStream(new byte[] {});\n+        new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.empty(), false);\n+        new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.of(dataTierInputStream), false);\n+        new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.of(dataTierInputStream), true);\n+        try {\n+            new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.empty(), true);\n+            fail();\n+        }\n+        catch (VerifyException ex) {\n+            assertEquals(ex.getMessage(), \"data tier input need to be non-null for data validation.\");\n+        }\n+    }\n+\n+    @Test\n+    public void testValidateDataEnabledWithDataMismatch()\n+            throws IOException\n+    {\n+        byte[] inputData = new byte[] {1, 2, 3};\n+        byte[] corruptedData = new byte[] {1, 3, 3};\n+        FSDataInputStream dataTierInputStream = new TestFSDataInputStream(inputData);\n+        FileInStream fileInStream = new TestFileInStream(corruptedData);\n+        AlluxioCachingHdfsFileInputStream fileInputStream = new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.of(dataTierInputStream), true);\n+        byte[] buf = new byte[3];\n+        try {\n+            fileInputStream.readFully(0, buf, 0, buf.length);\n+            fail(\"Data validation didn't work for mismatched data.\");\n+        }\n+        catch (VerifyException ex) {\n+            assertEquals(ex.getMessage(), \"corrupted buffer at position 1\");\n+        }\n+    }\n+\n+    @Test\n+    public void testValidateDataEnabledWithDataMatched()\n+            throws IOException\n+    {\n+        byte[] inputData = new byte[] {1, 2, 3};\n+        FSDataInputStream dataTierInputStream = new TestFSDataInputStream(inputData);\n+        FileInStream fileInStream = new TestFileInStream(inputData);\n+        AlluxioCachingHdfsFileInputStream fileInputStream = new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.of(dataTierInputStream), true);\n+        byte[] buf = new byte[3];\n+        fileInputStream.readFully(0, buf, 0, buf.length);\n+        validateBuffer(inputData, 0, buf, 0, inputData.length);\n+    }\n+\n+    @Test\n+    public void testValidateDataDisabledWithDataMismatch()\n+            throws IOException\n+    {\n+        byte[] inputData = new byte[] {1, 2, 3};\n+        byte[] corruptedData = new byte[] {1, 3, 3};\n+        FSDataInputStream dataTierInputStream = new TestFSDataInputStream(inputData);\n+        FileInStream fileInStream = new TestFileInStream(corruptedData);\n+        AlluxioCachingHdfsFileInputStream fileInputStream = new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.of(dataTierInputStream), false);\n+        byte[] buf = new byte[3];\n+        fileInputStream.readFully(0, buf, 0, buf.length);\n+        validateBuffer(corruptedData, 0, buf, 0, corruptedData.length);\n+    }\n+\n+    @Test\n+    public void testInteractionWithDataTierInputStream()\n+            throws IOException\n+    {\n+        byte[] inputData = new byte[] {1, 2, 3};\n+        FSDataInputStream dataTierInputStream = new TestFSDataInputStream(inputData);\n+        FileInStream fileInStream = new TestFileInStream(inputData);\n+        AlluxioCachingHdfsFileInputStream validationEnabledInputStream = new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.of(dataTierInputStream), true);\n+        AlluxioCachingHdfsFileInputStream validationDisabledInputStream = new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.of(dataTierInputStream), false);\n+\n+        // Seek on multiple positions on validationDisabledInputStream, it should not affect data tier\n+        validationDisabledInputStream.seek(2L);\n+        assertEquals(dataTierInputStream.getPos(), 0L);\n+        assertEquals(fileInStream.getPos(), 2L);\n+        validationDisabledInputStream.seek(1L);\n+        assertEquals(dataTierInputStream.getPos(), 0L);\n+        assertEquals(fileInStream.getPos(), 1L);\n+\n+        // Seek on multiple positions on validationEnabledInputStream, it should also seek for same position in data tier\n+        validationEnabledInputStream.seek(2L);\n+        assertEquals(dataTierInputStream.getPos(), 2L);\n+        assertEquals(fileInStream.getPos(), 2L);\n+        validationEnabledInputStream.seek(1L);\n+        assertEquals(dataTierInputStream.getPos(), 1L);\n+        assertEquals(fileInStream.getPos(), 1L);\n+    }\n+\n+    private static class TestFileInStream\n+            extends FileInStream\n+    {\n+        private final byte[] data;\n+        private long pos;\n+\n+        private TestFileInStream(byte[] data)\n+        {\n+            this.data = data;\n+            pos = 0;\n+        }\n+\n+        @Override\n+        public void seek(long l)\n+                throws IOException\n+        {\n+            pos = l;\n+        }\n+\n+        @Override\n+        public long getPos()\n+                throws IOException\n+        {\n+            return pos;\n+        }\n+\n+        @Override\n+        public long remaining()\n+        {\n+            return data.length - pos;\n+        }\n+\n+        @Override\n+        public int positionedRead(long pos, byte[] b, int off, int len)\n+                throws IOException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c3f173c582d39b7e2108d8ea0ef90d946f95a8d"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUxNzI4NA==", "bodyText": "just return -1;", "url": "https://github.com/prestodb/presto/pull/14645#discussion_r440517284", "createdAt": "2020-06-16T00:23:43Z", "author": {"login": "highker"}, "path": "presto-cache/src/test/java/com/facebook/presto/cache/alluxio/TestAlluxioCachingHdfsFileInputStream.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.cache.alluxio;\n+\n+import alluxio.client.file.FileInStream;\n+import com.google.common.base.VerifyException;\n+import org.apache.hadoop.fs.FSDataInputStream;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.cache.TestingCacheUtils.validateBuffer;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.fail;\n+\n+@Test(singleThreaded = true)\n+public class TestAlluxioCachingHdfsFileInputStream\n+{\n+    @Test\n+    public void testConstructor()\n+    {\n+        FSDataInputStream dataTierInputStream = new TestFSDataInputStream(new byte[] {});\n+        FileInStream fileInStream = new TestFileInStream(new byte[] {});\n+        new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.empty(), false);\n+        new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.of(dataTierInputStream), false);\n+        new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.of(dataTierInputStream), true);\n+        try {\n+            new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.empty(), true);\n+            fail();\n+        }\n+        catch (VerifyException ex) {\n+            assertEquals(ex.getMessage(), \"data tier input need to be non-null for data validation.\");\n+        }\n+    }\n+\n+    @Test\n+    public void testValidateDataEnabledWithDataMismatch()\n+            throws IOException\n+    {\n+        byte[] inputData = new byte[] {1, 2, 3};\n+        byte[] corruptedData = new byte[] {1, 3, 3};\n+        FSDataInputStream dataTierInputStream = new TestFSDataInputStream(inputData);\n+        FileInStream fileInStream = new TestFileInStream(corruptedData);\n+        AlluxioCachingHdfsFileInputStream fileInputStream = new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.of(dataTierInputStream), true);\n+        byte[] buf = new byte[3];\n+        try {\n+            fileInputStream.readFully(0, buf, 0, buf.length);\n+            fail(\"Data validation didn't work for mismatched data.\");\n+        }\n+        catch (VerifyException ex) {\n+            assertEquals(ex.getMessage(), \"corrupted buffer at position 1\");\n+        }\n+    }\n+\n+    @Test\n+    public void testValidateDataEnabledWithDataMatched()\n+            throws IOException\n+    {\n+        byte[] inputData = new byte[] {1, 2, 3};\n+        FSDataInputStream dataTierInputStream = new TestFSDataInputStream(inputData);\n+        FileInStream fileInStream = new TestFileInStream(inputData);\n+        AlluxioCachingHdfsFileInputStream fileInputStream = new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.of(dataTierInputStream), true);\n+        byte[] buf = new byte[3];\n+        fileInputStream.readFully(0, buf, 0, buf.length);\n+        validateBuffer(inputData, 0, buf, 0, inputData.length);\n+    }\n+\n+    @Test\n+    public void testValidateDataDisabledWithDataMismatch()\n+            throws IOException\n+    {\n+        byte[] inputData = new byte[] {1, 2, 3};\n+        byte[] corruptedData = new byte[] {1, 3, 3};\n+        FSDataInputStream dataTierInputStream = new TestFSDataInputStream(inputData);\n+        FileInStream fileInStream = new TestFileInStream(corruptedData);\n+        AlluxioCachingHdfsFileInputStream fileInputStream = new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.of(dataTierInputStream), false);\n+        byte[] buf = new byte[3];\n+        fileInputStream.readFully(0, buf, 0, buf.length);\n+        validateBuffer(corruptedData, 0, buf, 0, corruptedData.length);\n+    }\n+\n+    @Test\n+    public void testInteractionWithDataTierInputStream()\n+            throws IOException\n+    {\n+        byte[] inputData = new byte[] {1, 2, 3};\n+        FSDataInputStream dataTierInputStream = new TestFSDataInputStream(inputData);\n+        FileInStream fileInStream = new TestFileInStream(inputData);\n+        AlluxioCachingHdfsFileInputStream validationEnabledInputStream = new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.of(dataTierInputStream), true);\n+        AlluxioCachingHdfsFileInputStream validationDisabledInputStream = new AlluxioCachingHdfsFileInputStream(fileInStream, Optional.of(dataTierInputStream), false);\n+\n+        // Seek on multiple positions on validationDisabledInputStream, it should not affect data tier\n+        validationDisabledInputStream.seek(2L);\n+        assertEquals(dataTierInputStream.getPos(), 0L);\n+        assertEquals(fileInStream.getPos(), 2L);\n+        validationDisabledInputStream.seek(1L);\n+        assertEquals(dataTierInputStream.getPos(), 0L);\n+        assertEquals(fileInStream.getPos(), 1L);\n+\n+        // Seek on multiple positions on validationEnabledInputStream, it should also seek for same position in data tier\n+        validationEnabledInputStream.seek(2L);\n+        assertEquals(dataTierInputStream.getPos(), 2L);\n+        assertEquals(fileInStream.getPos(), 2L);\n+        validationEnabledInputStream.seek(1L);\n+        assertEquals(dataTierInputStream.getPos(), 1L);\n+        assertEquals(fileInStream.getPos(), 1L);\n+    }\n+\n+    private static class TestFileInStream\n+            extends FileInStream\n+    {\n+        private final byte[] data;\n+        private long pos;\n+\n+        private TestFileInStream(byte[] data)\n+        {\n+            this.data = data;\n+            pos = 0;\n+        }\n+\n+        @Override\n+        public void seek(long l)\n+                throws IOException\n+        {\n+            pos = l;\n+        }\n+\n+        @Override\n+        public long getPos()\n+                throws IOException\n+        {\n+            return pos;\n+        }\n+\n+        @Override\n+        public long remaining()\n+        {\n+            return data.length - pos;\n+        }\n+\n+        @Override\n+        public int positionedRead(long pos, byte[] b, int off, int len)\n+                throws IOException\n+        {\n+            if (len == 0) {\n+                return 0;\n+            }\n+            else if (pos >= 0L && pos < data.length) {\n+                int lengthToRead = Math.min(len, data.length - (int) pos);\n+                System.arraycopy(data, (int) pos, b, off, lengthToRead);\n+                return lengthToRead;\n+            }\n+            else {\n+                return -1;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c3f173c582d39b7e2108d8ea0ef90d946f95a8d"}, "originalPosition": 167}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1672100c03fa0a5d23c9c2c8a620381776e2077b", "author": {"user": {"login": "zhiyua-git", "name": null}}, "url": "https://github.com/prestodb/presto/commit/1672100c03fa0a5d23c9c2c8a620381776e2077b", "committedDate": "2020-06-16T01:31:42Z", "message": "Add unit test for Alluxio data validation\n\n1. Add unit teste for data validation logic in AlluxioCachingHdfsFileInputStream\n2. Refactor ByteArraySeekableStream class out for reuse."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5c3f173c582d39b7e2108d8ea0ef90d946f95a8d", "author": {"user": {"login": "zhiyua-git", "name": null}}, "url": "https://github.com/prestodb/presto/commit/5c3f173c582d39b7e2108d8ea0ef90d946f95a8d", "committedDate": "2020-06-15T19:19:34Z", "message": "Add unit test for Alluxio data validation\n\n1. Add unit teste for data validation logic in AlluxioCachingHdfsFileInputStream\n2. Refactor ByteArraySeekableStream class out for reuse."}, "afterCommit": {"oid": "1672100c03fa0a5d23c9c2c8a620381776e2077b", "author": {"user": {"login": "zhiyua-git", "name": null}}, "url": "https://github.com/prestodb/presto/commit/1672100c03fa0a5d23c9c2c8a620381776e2077b", "committedDate": "2020-06-16T01:31:42Z", "message": "Add unit test for Alluxio data validation\n\n1. Add unit teste for data validation logic in AlluxioCachingHdfsFileInputStream\n2. Refactor ByteArraySeekableStream class out for reuse."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxMTMwODk5", "url": "https://github.com/prestodb/presto/pull/14645#pullrequestreview-431130899", "createdAt": "2020-06-16T03:15:12Z", "commit": {"oid": "1672100c03fa0a5d23c9c2c8a620381776e2077b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1369, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}