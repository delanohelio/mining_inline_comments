{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3ODg3Njk5", "number": 14608, "title": "Create quantile_at_value function for QDigest type", "bodyText": "This commit fixes #14423. It creates a quantile_at_value function for QDigest type. When given an input value X, quantile_at_value(qdigest(T), X) will return an approximate quantile of X.\n== NO RELEASE NOTE ==", "createdAt": "2020-06-04T14:43:42Z", "url": "https://github.com/prestodb/presto/pull/14608", "merged": true, "mergeCommit": {"oid": "3121083e9ce9239b5882541f6c4141d0cd3c280f"}, "closed": true, "closedAt": "2020-06-09T14:23:51Z", "author": {"login": "pguofb"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcoHKCSgFqTQyNDg4NzA1NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcpXsgCAFqTQyNjY0ODQxOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0ODg3MDU0", "url": "https://github.com/prestodb/presto/pull/14608#pullrequestreview-424887054", "createdAt": "2020-06-04T22:49:34Z", "commit": {"oid": "24dfe1da79d0d2116b097bb32ae0bdc79403449f"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMjo0OTozNVrOGfakiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMzoyMjoyMlrOGfbMuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU5NDM3Nw==", "bodyText": "...  -> quantile number between 0 and 1", "url": "https://github.com/prestodb/presto/pull/14608#discussion_r435594377", "createdAt": "2020-06-04T22:49:35Z", "author": {"login": "viczhang861"}, "path": "presto-docs/src/main/sphinx/functions/qdigest.rst", "diffHunk": "@@ -30,6 +30,11 @@ Functions\n     Returns the approximate percentile values from the quantile digest given\n     the number ``quantile`` between 0 and 1.\n \n+.. function:: quantile_at_value(qdigest(T), T) -> quantile", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24dfe1da79d0d2116b097bb32ae0bdc79403449f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU5OTY3NA==", "bodyText": "You don't need two extra functions, you can put them together to reuse the same qdigest.\nassertFunction( .. value 6 )\nassertFunction( .. value 20 )\nassertFunction( .. value -1 )", "url": "https://github.com/prestodb/presto/pull/14608#discussion_r435599674", "createdAt": "2020-06-04T23:05:33Z", "author": {"login": "viczhang861"}, "path": "presto-main/src/test/java/com/facebook/presto/operator/scalar/TestQuantileDigestFunctions.java", "diffHunk": "@@ -82,6 +92,16 @@ public void testQuantileAtValueBigint()\n                 1.0);\n     }\n \n+    @Test\n+    public void testQuantileAtValueBigintSmallerThanMin()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1afbff658014f8f13751bf7460bec9afbf1412df"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYwMzM4Nw==", "bodyText": "We always use braces for if statement,  here is example of code style https://github.com/airlift/codestyle", "url": "https://github.com/prestodb/presto/pull/14608#discussion_r435603387", "createdAt": "2020-06-04T23:17:57Z", "author": {"login": "viczhang861"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/QuantileDigestFunctions.java", "diffHunk": "@@ -63,6 +67,31 @@ public static long valueAtQuantileBigint(@SqlType(\"qdigest(bigint)\") Slice input\n         return new QuantileDigest(input).getQuantile(quantile);\n     }\n \n+    @ScalarFunction(\"quantile_at_value\")\n+    @Description(\"Given an input x between min/max values of qdigest, find which quantile is represented by that value\")\n+    @SqlType(StandardTypes.DOUBLE)\n+    public static double quantileAtValueDouble(@SqlType(\"qdigest(double)\") Slice input, @SqlType(StandardTypes.DOUBLE) double value) {\n+        return quantileAtValueBigint(input, doubleToSortableLong(value));\n+    }\n+\n+    @ScalarFunction(\"quantile_at_value\")\n+    @Description(\"Given an input x between min/max values of qdigest, find which quantile is represented by that value\")\n+    @SqlType(StandardTypes.DOUBLE)\n+    public static double quantileAtValueReal(@SqlType(\"qdigest(real)\") Slice input, @SqlType(StandardTypes.REAL) long value) {\n+        return quantileAtValueBigint(input, floatToSortableInt(intBitsToFloat((int) value)));\n+    }\n+\n+    @ScalarFunction(\"quantile_at_value\")\n+    @Description(\"Given an input x between min/max values of qdigest, find which quantile is represented by that value\")\n+    @SqlType(StandardTypes.DOUBLE)\n+    public static double quantileAtValueBigint(@SqlType(\"qdigest(bigint)\") Slice input, @SqlType(StandardTypes.BIGINT) long value) {\n+        QuantileDigest digest = new QuantileDigest(input);\n+        // when qdigest is empty, return the upper bound quantile to be consistent with non-empty scenarios\n+        if (digest.getCount() == 0) return 1.0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bbfec54ac21f35985ef89794e4200b2fa0daf69"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYwNDY2NA==", "bodyText": "Could you explain what the non-empty scenario is ?", "url": "https://github.com/prestodb/presto/pull/14608#discussion_r435604664", "createdAt": "2020-06-04T23:22:22Z", "author": {"login": "viczhang861"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/QuantileDigestFunctions.java", "diffHunk": "@@ -63,6 +67,31 @@ public static long valueAtQuantileBigint(@SqlType(\"qdigest(bigint)\") Slice input\n         return new QuantileDigest(input).getQuantile(quantile);\n     }\n \n+    @ScalarFunction(\"quantile_at_value\")\n+    @Description(\"Given an input x between min/max values of qdigest, find which quantile is represented by that value\")\n+    @SqlType(StandardTypes.DOUBLE)\n+    public static double quantileAtValueDouble(@SqlType(\"qdigest(double)\") Slice input, @SqlType(StandardTypes.DOUBLE) double value) {\n+        return quantileAtValueBigint(input, doubleToSortableLong(value));\n+    }\n+\n+    @ScalarFunction(\"quantile_at_value\")\n+    @Description(\"Given an input x between min/max values of qdigest, find which quantile is represented by that value\")\n+    @SqlType(StandardTypes.DOUBLE)\n+    public static double quantileAtValueReal(@SqlType(\"qdigest(real)\") Slice input, @SqlType(StandardTypes.REAL) long value) {\n+        return quantileAtValueBigint(input, floatToSortableInt(intBitsToFloat((int) value)));\n+    }\n+\n+    @ScalarFunction(\"quantile_at_value\")\n+    @Description(\"Given an input x between min/max values of qdigest, find which quantile is represented by that value\")\n+    @SqlType(StandardTypes.DOUBLE)\n+    public static double quantileAtValueBigint(@SqlType(\"qdigest(bigint)\") Slice input, @SqlType(StandardTypes.BIGINT) long value) {\n+        QuantileDigest digest = new QuantileDigest(input);\n+        // when qdigest is empty, return the upper bound quantile to be consistent with non-empty scenarios", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bbfec54ac21f35985ef89794e4200b2fa0daf69"}, "originalPosition": 44}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8676aef64a29c2fba7b44108b23476cbf906dec7", "author": {"user": {"login": "pguofb", "name": "Peizhen Guo"}}, "url": "https://github.com/prestodb/presto/commit/8676aef64a29c2fba7b44108b23476cbf906dec7", "committedDate": "2020-06-04T16:46:39Z", "message": "fix code formatting problem."}, "afterCommit": {"oid": "8f4a02c850869ba8cd1b19e74890763783c90d48", "author": {"user": {"login": "pguofb", "name": "Peizhen Guo"}}, "url": "https://github.com/prestodb/presto/commit/8f4a02c850869ba8cd1b19e74890763783c90d48", "committedDate": "2020-06-05T02:35:39Z", "message": "adjust function description, fix empty digest behavior, and merge unit tests in one test function."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8f4a02c850869ba8cd1b19e74890763783c90d48", "author": {"user": {"login": "pguofb", "name": "Peizhen Guo"}}, "url": "https://github.com/prestodb/presto/commit/8f4a02c850869ba8cd1b19e74890763783c90d48", "committedDate": "2020-06-05T02:35:39Z", "message": "adjust function description, fix empty digest behavior, and merge unit tests in one test function."}, "afterCommit": {"oid": "5dcc028179581ea706595b2ce53a867a133ce793", "author": {"user": {"login": "pguofb", "name": "Peizhen Guo"}}, "url": "https://github.com/prestodb/presto/commit/5dcc028179581ea706595b2ce53a867a133ce793", "committedDate": "2020-06-05T18:06:33Z", "message": "add quantile_at_value function and unit tests."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NTI0NDE4", "url": "https://github.com/prestodb/presto/pull/14608#pullrequestreview-425524418", "createdAt": "2020-06-05T18:16:21Z", "commit": {"oid": "5dcc028179581ea706595b2ce53a867a133ce793"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxODoxNjoyMVrOGf4urw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxODozMjowN1rOGf5MgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA4ODQ5NQ==", "bodyText": "Previous change is lost after last push.", "url": "https://github.com/prestodb/presto/pull/14608#discussion_r436088495", "createdAt": "2020-06-05T18:16:21Z", "author": {"login": "viczhang861"}, "path": "presto-docs/src/main/sphinx/functions/qdigest.rst", "diffHunk": "@@ -30,6 +30,11 @@ Functions\n     Returns the approximate percentile values from the quantile digest given\n     the number ``quantile`` between 0 and 1.\n \n+.. function:: quantile_at_value(qdigest(T), T) -> quantile", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU5NDM3Nw=="}, "originalCommit": {"oid": "24dfe1da79d0d2116b097bb32ae0bdc79403449f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA5NjEyOQ==", "bodyText": "Returns the approximate quantile number between 0 and 1 from the quantile digest given an input value. If quantile digest is empty, return 0.", "url": "https://github.com/prestodb/presto/pull/14608#discussion_r436096129", "createdAt": "2020-06-05T18:32:07Z", "author": {"login": "viczhang861"}, "path": "presto-docs/src/main/sphinx/functions/qdigest.rst", "diffHunk": "@@ -30,6 +30,11 @@ Functions\n     Returns the approximate percentile values from the quantile digest given\n     the number ``quantile`` between 0 and 1.\n \n+.. function:: quantile_at_value(qdigest(T), T) -> quantile\n+\n+    Returns the approximate ``quantile`` number between 0 and 1\n+    from the quantile digest given an input value.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5dcc028179581ea706595b2ce53a867a133ce793"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NTQ2OTc0", "url": "https://github.com/prestodb/presto/pull/14608#pullrequestreview-425546974", "createdAt": "2020-06-05T18:52:59Z", "commit": {"oid": "5dcc028179581ea706595b2ce53a867a133ce793"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxODo1Mjo1OVrOGf5zgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxODo1Mjo1OVrOGf5zgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEwNjExMg==", "bodyText": "When no value in the non-empty qdigest is larger than the input value,  we actually return 1. Thus, I recommend to remove this comment and just document the behavior in qdigest.rst file is enough. Zero is chosen since it is more like empty.\n\n\nThrow an error for empty qdigest is also not ideal,  since value_at_quantile function doesn't throw error for empty qdigest.", "url": "https://github.com/prestodb/presto/pull/14608#discussion_r436106112", "createdAt": "2020-06-05T18:52:59Z", "author": {"login": "viczhang861"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/QuantileDigestFunctions.java", "diffHunk": "@@ -63,6 +67,36 @@ public static long valueAtQuantileBigint(@SqlType(\"qdigest(bigint)\") Slice input\n         return new QuantileDigest(input).getQuantile(quantile);\n     }\n \n+    @ScalarFunction(\"quantile_at_value\")\n+    @Description(\"Given an input x between min/max values of qdigest, find which quantile is represented by that value\")\n+    @SqlType(StandardTypes.DOUBLE)\n+    public static double quantileAtValueDouble(@SqlType(\"qdigest(double)\") Slice input, @SqlType(StandardTypes.DOUBLE) double value)\n+    {\n+        return quantileAtValueBigint(input, doubleToSortableLong(value));\n+    }\n+\n+    @ScalarFunction(\"quantile_at_value\")\n+    @Description(\"Given an input x between min/max values of qdigest, find which quantile is represented by that value\")\n+    @SqlType(StandardTypes.DOUBLE)\n+    public static double quantileAtValueReal(@SqlType(\"qdigest(real)\") Slice input, @SqlType(StandardTypes.REAL) long value)\n+    {\n+        return quantileAtValueBigint(input, floatToSortableInt(intBitsToFloat((int) value)));\n+    }\n+\n+    @ScalarFunction(\"quantile_at_value\")\n+    @Description(\"Given an input x between min/max values of qdigest, find which quantile is represented by that value\")\n+    @SqlType(StandardTypes.DOUBLE)\n+    public static double quantileAtValueBigint(@SqlType(\"qdigest(bigint)\") Slice input, @SqlType(StandardTypes.BIGINT) long value)\n+    {\n+        QuantileDigest digest = new QuantileDigest(input);\n+        // to be consistent with non-empty scenarios. When no value in the digest is smaller than the input, always return 0.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5dcc028179581ea706595b2ce53a867a133ce793"}, "originalPosition": 47}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5dcc028179581ea706595b2ce53a867a133ce793", "author": {"user": {"login": "pguofb", "name": "Peizhen Guo"}}, "url": "https://github.com/prestodb/presto/commit/5dcc028179581ea706595b2ce53a867a133ce793", "committedDate": "2020-06-05T18:06:33Z", "message": "add quantile_at_value function and unit tests."}, "afterCommit": {"oid": "4360e42e3413a08a9bcd1a5d78632ac718cb1819", "author": {"user": {"login": "pguofb", "name": "Peizhen Guo"}}, "url": "https://github.com/prestodb/presto/commit/4360e42e3413a08a9bcd1a5d78632ac718cb1819", "committedDate": "2020-06-05T19:59:16Z", "message": "Add quantile_at_value function"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NTk3ODI5", "url": "https://github.com/prestodb/presto/pull/14608#pullrequestreview-425597829", "createdAt": "2020-06-05T20:13:45Z", "commit": {"oid": "4360e42e3413a08a9bcd1a5d78632ac718cb1819"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMDoxMzo0NVrOGf8Dtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMDoxOToxMlrOGf8MBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE0MzAzMQ==", "bodyText": "Let's also document the behavior when the value is outside of the range of the qdigest.", "url": "https://github.com/prestodb/presto/pull/14608#discussion_r436143031", "createdAt": "2020-06-05T20:13:45Z", "author": {"login": "tdcmeehan"}, "path": "presto-docs/src/main/sphinx/functions/qdigest.rst", "diffHunk": "@@ -30,6 +30,11 @@ Functions\n     Returns the approximate percentile values from the quantile digest given\n     the number ``quantile`` between 0 and 1.\n \n+.. function:: quantile_at_value(qdigest(T), T) -> quantile\n+\n+    Returns the approximate ``quantile`` number between 0 and 1 from the\n+    quantile digest given an input value. If quantile digest is empty, return 0.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4360e42e3413a08a9bcd1a5d78632ac718cb1819"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE0NTE1OA==", "bodyText": "I see some surprising results here when adding additional test cases for doubles:\n\nDouble.NaN as the input value returns 1.0\n(Edit: Double.MIN_VALUE is fine, I forgot this was just slightly greater than 0)", "url": "https://github.com/prestodb/presto/pull/14608#discussion_r436145158", "createdAt": "2020-06-05T20:19:12Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/test/java/com/facebook/presto/operator/scalar/TestQuantileDigestFunctions.java", "diffHunk": "@@ -71,6 +72,31 @@ public void testValueAtQuantileBigint()\n                 5L);\n     }\n \n+    @Test\n+    public void testQuantileAtValueBigint()\n+    {\n+        QuantileDigest qdigest = new QuantileDigest(1);\n+        addAll(qdigest, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4360e42e3413a08a9bcd1a5d78632ac718cb1819"}, "originalPosition": 16}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4360e42e3413a08a9bcd1a5d78632ac718cb1819", "author": {"user": {"login": "pguofb", "name": "Peizhen Guo"}}, "url": "https://github.com/prestodb/presto/commit/4360e42e3413a08a9bcd1a5d78632ac718cb1819", "committedDate": "2020-06-05T19:59:16Z", "message": "Add quantile_at_value function"}, "afterCommit": {"oid": "c573acab680c607c119c639e1c02087443c2d686", "author": {"user": {"login": "pguofb", "name": "Peizhen Guo"}}, "url": "https://github.com/prestodb/presto/commit/c573acab680c607c119c639e1c02087443c2d686", "committedDate": "2020-06-05T22:30:13Z", "message": "Add quantile_at_value function"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2NTUyNDgw", "url": "https://github.com/prestodb/presto/pull/14608#pullrequestreview-426552480", "createdAt": "2020-06-08T19:24:52Z", "commit": {"oid": "c573acab680c607c119c639e1c02087443c2d686"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxOToyNDo1MlrOGgtLWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxOToyOToyOVrOGgtVQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk0NzgwMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                If input value is beyond the min/max range of the quantile digest, return null.\n          \n          \n            \n                Null is returned if the input value is outside of the range of the quantile digest.", "url": "https://github.com/prestodb/presto/pull/14608#discussion_r436947800", "createdAt": "2020-06-08T19:24:52Z", "author": {"login": "tdcmeehan"}, "path": "presto-docs/src/main/sphinx/functions/qdigest.rst", "diffHunk": "@@ -30,6 +30,12 @@ Functions\n     Returns the approximate percentile values from the quantile digest given\n     the number ``quantile`` between 0 and 1.\n \n+.. function:: quantile_at_value(qdigest(T), T) -> quantile\n+\n+    Returns the approximate ``quantile`` number between 0 and 1 from the\n+    quantile digest given an input value. If quantile digest is empty, return 0.\n+    If input value is beyond the min/max range of the quantile digest, return null.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c573acab680c607c119c639e1c02087443c2d686"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk0ODQyMA==", "bodyText": "I think this should be treated like a value outside of the range of the qdigest (null), because really this is just a special case of the below check.  Actually, we could just remove this first check, because when it's empty the digest's max value is Long.MIN_VALUE and its min value is Long.MAX_VALUE.", "url": "https://github.com/prestodb/presto/pull/14608#discussion_r436948420", "createdAt": "2020-06-08T19:25:59Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/QuantileDigestFunctions.java", "diffHunk": "@@ -63,6 +68,41 @@ public static long valueAtQuantileBigint(@SqlType(\"qdigest(bigint)\") Slice input\n         return new QuantileDigest(input).getQuantile(quantile);\n     }\n \n+    @ScalarFunction(\"quantile_at_value\")\n+    @Description(\"Given an input x between min/max values of qdigest, find which quantile is represented by that value\")\n+    @SqlType(StandardTypes.DOUBLE)\n+    @SqlNullable\n+    public static Double quantileAtValueDouble(@SqlType(\"qdigest(double)\") Slice input, @SqlType(StandardTypes.DOUBLE) double value)\n+    {\n+        return quantileAtValueBigint(input, doubleToSortableLong(value));\n+    }\n+\n+    @ScalarFunction(\"quantile_at_value\")\n+    @Description(\"Given an input x between min/max values of qdigest, find which quantile is represented by that value\")\n+    @SqlType(StandardTypes.DOUBLE)\n+    @SqlNullable\n+    public static Double quantileAtValueReal(@SqlType(\"qdigest(real)\") Slice input, @SqlType(StandardTypes.REAL) long value)\n+    {\n+        return quantileAtValueBigint(input, floatToSortableInt(intBitsToFloat((int) value)));\n+    }\n+\n+    @ScalarFunction(\"quantile_at_value\")\n+    @Description(\"Given an input x between min/max values of qdigest, find which quantile is represented by that value\")\n+    @SqlType(StandardTypes.DOUBLE)\n+    @SqlNullable\n+    public static Double quantileAtValueBigint(@SqlType(\"qdigest(bigint)\") Slice input, @SqlType(StandardTypes.BIGINT) long value)\n+    {\n+        QuantileDigest digest = new QuantileDigest(input);\n+        if (digest.getCount() == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c573acab680c607c119c639e1c02087443c2d686"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk1MDMzOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    QuantileDigest qdigest = new QuantileDigest(1);\n          \n          \n            \n                    addAll(qdigest, doubleToSortableLong(0), doubleToSortableLong(1), doubleToSortableLong(2),\n          \n          \n            \n                            doubleToSortableLong(3), doubleToSortableLong(4), doubleToSortableLong(5),\n          \n          \n            \n                            doubleToSortableLong(6), doubleToSortableLong(7), doubleToSortableLong(8),\n          \n          \n            \n                            doubleToSortableLong(9));\n          \n          \n            \n                    QuantileDigest qdigest = new QuantileDigest(1);\n          \n          \n            \n                            ImmutableList.of(0, 1, 2, 3, 4, 5, 6, 7, 8, 9).stream()\n          \n          \n            \n                                    .mapToLong(FloatingPointBitsConverterUtil::doubleToSortableLong)\n          \n          \n            \n                                    .forEach(qdigest::add);", "url": "https://github.com/prestodb/presto/pull/14608#discussion_r436950338", "createdAt": "2020-06-08T19:29:29Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/test/java/com/facebook/presto/operator/scalar/TestQuantileDigestFunctions.java", "diffHunk": "@@ -71,6 +73,53 @@ public void testValueAtQuantileBigint()\n                 5L);\n     }\n \n+    @Test\n+    public void testQuantileAtValueBigint()\n+    {\n+        QuantileDigest qdigest = new QuantileDigest(1);\n+        addAll(qdigest, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9);\n+        functionAssertions.assertFunction(format(\"quantile_at_value(CAST(X'%s' AS qdigest(bigint)), 20)\", toHexString(qdigest)),\n+                DOUBLE,\n+                null);\n+        functionAssertions.assertFunction(format(\"quantile_at_value(CAST(X'%s' AS qdigest(bigint)), 6)\", toHexString(qdigest)),\n+                DOUBLE,\n+                0.6);\n+        functionAssertions.assertFunction(format(\"quantile_at_value(CAST(X'%s' AS qdigest(bigint)), -1)\", toHexString(qdigest)),\n+                DOUBLE,\n+                null);\n+    }\n+\n+    @Test\n+    public void testQuantileAtValueDouble()\n+    {\n+        QuantileDigest qdigest = new QuantileDigest(1);\n+        addAll(qdigest, doubleToSortableLong(0), doubleToSortableLong(1), doubleToSortableLong(2),\n+                doubleToSortableLong(3), doubleToSortableLong(4), doubleToSortableLong(5),\n+                doubleToSortableLong(6), doubleToSortableLong(7), doubleToSortableLong(8),\n+                doubleToSortableLong(9));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c573acab680c607c119c639e1c02087443c2d686"}, "originalPosition": 37}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4dd8d4c981c8c411cb1c388eba32ba88b9bea636", "author": {"user": {"login": "pguofb", "name": "Peizhen Guo"}}, "url": "https://github.com/prestodb/presto/commit/4dd8d4c981c8c411cb1c388eba32ba88b9bea636", "committedDate": "2020-06-08T20:15:09Z", "message": "Add quantile_at_value function"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c573acab680c607c119c639e1c02087443c2d686", "author": {"user": {"login": "pguofb", "name": "Peizhen Guo"}}, "url": "https://github.com/prestodb/presto/commit/c573acab680c607c119c639e1c02087443c2d686", "committedDate": "2020-06-05T22:30:13Z", "message": "Add quantile_at_value function"}, "afterCommit": {"oid": "4dd8d4c981c8c411cb1c388eba32ba88b9bea636", "author": {"user": {"login": "pguofb", "name": "Peizhen Guo"}}, "url": "https://github.com/prestodb/presto/commit/4dd8d4c981c8c411cb1c388eba32ba88b9bea636", "committedDate": "2020-06-08T20:15:09Z", "message": "Add quantile_at_value function"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2NjQ4NDE5", "url": "https://github.com/prestodb/presto/pull/14608#pullrequestreview-426648419", "createdAt": "2020-06-08T21:53:24Z", "commit": {"oid": "4dd8d4c981c8c411cb1c388eba32ba88b9bea636"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1760, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}