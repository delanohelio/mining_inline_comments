{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4ODE3Njc0", "number": 15187, "title": "Consider predicate columns for encryption", "bodyText": "In encryption we pass the list of columns that are being read to help with\ngetting the credentials only for those columns and allow for more granular\naccess control.\nUptil now, only the columns being requested in the select statement were\nthe only ones being considered. This commit adds support for columns in\nthe predicate as well. We now consider the predicate columns as well.\nA special case to callout is ROW. Presto currently supports encryption\ngranularity of a subfield, however, it is non-trivial to get the exact\nsubfields being accessed for a ROW. This PR puts the whole ROW column\nif any subfield is being used in the predicate. This is a limitation for\nnow.\nTest plan - It is very difficult to test this change in a unit test in its current format. A\nbigger refactor is needed to be able to create tables with dummy encryption providers.\nFor this specific PR, I performed extensive tests against Facebook infrastructure and\nensured that all specific situations are succeeding.", "createdAt": "2020-09-17T17:18:52Z", "url": "https://github.com/prestodb/presto/pull/15187", "merged": true, "mergeCommit": {"oid": "fa513e2fe824845676c2299f12754853a83547e4"}, "closed": true, "closedAt": "2020-09-21T16:33:51Z", "author": {"login": "mayankgarg1990"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdKKgqIAFqTQ5MTYyODIxMA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdLZ6uFAFqTQ5MzYwMTEzNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxNjI4MjEw", "url": "https://github.com/prestodb/presto/pull/15187#pullrequestreview-491628210", "createdAt": "2020-09-18T16:49:20Z", "commit": {"oid": "87d4e2e8554c8bf5e61bbb410f567a838b6d01ab"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNjo0OToyMFrOHUUrpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxOToxMDoxM1rOHUY3Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA3MjQyMg==", "bodyText": "can you remind me again why requested columns is optional?  requested columns being optional and predicate columns not makes the logic here kind of confusing. Is it possible to always provide it?", "url": "https://github.com/prestodb/presto/pull/15187#discussion_r491072422", "createdAt": "2020-09-18T16:49:20Z", "author": {"login": "rschlussel"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitManager.java", "diffHunk": "@@ -470,6 +481,43 @@ public CounterStat getHighMemorySplitSource()\n         return concat(partitionBatches);\n     }\n \n+    private static Optional<Set<HiveColumnHandle>> mergeRequestedAndPredicateColumns(Optional<Set<HiveColumnHandle>> requestedColumns, Set<HiveColumnHandle> predicateColumns)\n+    {\n+        if (!requestedColumns.isPresent() || predicateColumns.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87d4e2e8554c8bf5e61bbb410f567a838b6d01ab"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTEzMjU1OQ==", "bodyText": "You can use the groupingBy collector https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html#groupingBy-java.util.function.Function-java.util.stream.Collector-", "url": "https://github.com/prestodb/presto/pull/15187#discussion_r491132559", "createdAt": "2020-09-18T18:51:34Z", "author": {"login": "rschlussel"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitManager.java", "diffHunk": "@@ -470,6 +481,43 @@ public CounterStat getHighMemorySplitSource()\n         return concat(partitionBatches);\n     }\n \n+    private static Optional<Set<HiveColumnHandle>> mergeRequestedAndPredicateColumns(Optional<Set<HiveColumnHandle>> requestedColumns, Set<HiveColumnHandle> predicateColumns)\n+    {\n+        if (!requestedColumns.isPresent() || predicateColumns.isEmpty()) {\n+            return requestedColumns;\n+        }\n+\n+        Map<String, Set<HiveColumnHandle>> nameToColumnHandles = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87d4e2e8554c8bf5e61bbb410f567a838b6d01ab"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTEzODQ4NA==", "bodyText": "why can we short circuit for non-structs?  is it because there will never be any subfields?  I think the shortcircuiting is more confusing.", "url": "https://github.com/prestodb/presto/pull/15187#discussion_r491138484", "createdAt": "2020-09-18T19:04:35Z", "author": {"login": "rschlussel"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitManager.java", "diffHunk": "@@ -470,6 +481,43 @@ public CounterStat getHighMemorySplitSource()\n         return concat(partitionBatches);\n     }\n \n+    private static Optional<Set<HiveColumnHandle>> mergeRequestedAndPredicateColumns(Optional<Set<HiveColumnHandle>> requestedColumns, Set<HiveColumnHandle> predicateColumns)\n+    {\n+        if (!requestedColumns.isPresent() || predicateColumns.isEmpty()) {\n+            return requestedColumns;\n+        }\n+\n+        Map<String, Set<HiveColumnHandle>> nameToColumnHandles = new HashMap<>();\n+        Stream.concat(requestedColumns.get().stream(), predicateColumns.stream())\n+                .filter(column -> column.getColumnType() == REGULAR)\n+                .forEach(column -> nameToColumnHandles.computeIfAbsent(column.getName(), (key) -> new HashSet<>()).add(column));\n+\n+        return Optional.of(nameToColumnHandles.values().stream()\n+                .map(columnHandles -> {\n+                    HiveColumnHandle finalHandle = null;\n+                    for (HiveColumnHandle columnHandle : columnHandles) {\n+                        if (finalHandle == null) {\n+                            finalHandle = columnHandle;\n+                            continue;\n+                        }\n+\n+                        if (finalHandle.getHiveType().getCategory() != STRUCT || finalHandle.getRequiredSubfields().isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87d4e2e8554c8bf5e61bbb410f567a838b6d01ab"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE0MDkzNQ==", "bodyText": "Can this whole section be simplified to\nif (finalHandle == null || finalHandle.getRequiredSubfields.isEmpty() || columnHandle.getRequiredSubfields.isEmpty()) {\n   finalHandle = columnHandle;\n}\nelse {\n   finalHandle = (HiveColumnHandle) finalHandle.withRequiredSubfields(ImmutableList.copyOf(ImmutableSet.copyOf(\n                                    ImmutableList.<Subfield>builder().addAll(finalHandle.getRequiredSubfields()).addAll(columnHandle.getRequiredSubfields()).build())));\n}\n\nAlso, can we do it as a reduce on the stream instead of having a forloop inside the stream? (if we use groupingBy, don't even need to collect to map first)", "url": "https://github.com/prestodb/presto/pull/15187#discussion_r491140935", "createdAt": "2020-09-18T19:10:13Z", "author": {"login": "rschlussel"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitManager.java", "diffHunk": "@@ -470,6 +481,43 @@ public CounterStat getHighMemorySplitSource()\n         return concat(partitionBatches);\n     }\n \n+    private static Optional<Set<HiveColumnHandle>> mergeRequestedAndPredicateColumns(Optional<Set<HiveColumnHandle>> requestedColumns, Set<HiveColumnHandle> predicateColumns)\n+    {\n+        if (!requestedColumns.isPresent() || predicateColumns.isEmpty()) {\n+            return requestedColumns;\n+        }\n+\n+        Map<String, Set<HiveColumnHandle>> nameToColumnHandles = new HashMap<>();\n+        Stream.concat(requestedColumns.get().stream(), predicateColumns.stream())\n+                .filter(column -> column.getColumnType() == REGULAR)\n+                .forEach(column -> nameToColumnHandles.computeIfAbsent(column.getName(), (key) -> new HashSet<>()).add(column));\n+\n+        return Optional.of(nameToColumnHandles.values().stream()\n+                .map(columnHandles -> {\n+                    HiveColumnHandle finalHandle = null;\n+                    for (HiveColumnHandle columnHandle : columnHandles) {\n+                        if (finalHandle == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87d4e2e8554c8bf5e61bbb410f567a838b6d01ab"}, "originalPosition": 107}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "87d4e2e8554c8bf5e61bbb410f567a838b6d01ab", "author": {"user": {"login": "mayankgarg1990", "name": null}}, "url": "https://github.com/prestodb/presto/commit/87d4e2e8554c8bf5e61bbb410f567a838b6d01ab", "committedDate": "2020-09-17T17:06:30Z", "message": "Consider predicate columns for encryption\n\nIn encryption we pass the list of columns that are being read to help with\ngetting the credentials only for those columns and allow for more granular\naccess control.\n\nUptil now, only the columns being requested in the select statement were\nthe only ones being considered. This commit adds support for columns in\nthe predicate as well. We now consider the predicate columns as well.\n\nA special case to callout is `ROW`. Presto currently supports encryption\ngranularity of a subfield, however, it is non-trivial to get the exact\nsubfields being accessed for a `ROW`. This PR puts the whole `ROW` column\nif any subfield is being used in the predicate. This is a limitation for\nnow."}, "afterCommit": {"oid": "eec44beab826c865f85bd7167365766c39bd0196", "author": {"user": {"login": "mayankgarg1990", "name": null}}, "url": "https://github.com/prestodb/presto/commit/eec44beab826c865f85bd7167365766c39bd0196", "committedDate": "2020-09-18T20:39:29Z", "message": "Consider predicate columns for encryption\n\nIn encryption we pass the list of columns that are being read to help with\ngetting the credentials only for those columns and allow for more granular\naccess control.\n\nUptil now, only the columns being requested in the select statement were\nthe only ones being considered. This commit adds support for columns in\nthe predicate as well. We now consider the predicate columns as well.\n\nA special case to callout is `ROW`. Presto currently supports encryption\ngranularity of a subfield, however, it is non-trivial to get the exact\nsubfields being accessed for a `ROW`. This PR puts the whole `ROW` column\nif any subfield is being used in the predicate. This is a limitation for\nnow."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f86b23a3e5ec123c9b0a4c4a8932fc5f0c2ecdc", "author": {"user": {"login": "mayankgarg1990", "name": null}}, "url": "https://github.com/prestodb/presto/commit/4f86b23a3e5ec123c9b0a4c4a8932fc5f0c2ecdc", "committedDate": "2020-09-18T20:42:03Z", "message": "Consider predicate columns for encryption\n\nIn encryption we pass the list of columns that are being read to help with\ngetting the credentials only for those columns and allow for more granular\naccess control.\n\nUptil now, only the columns being requested in the select statement were\nthe only ones being considered. This commit adds support for columns in\nthe predicate as well. We now consider the predicate columns as well.\n\nA special case to callout is `ROW`. Presto currently supports encryption\ngranularity of a subfield, however, it is non-trivial to get the exact\nsubfields being accessed for a `ROW`. This PR puts the whole `ROW` column\nif any subfield is being used in the predicate. This is a limitation for\nnow."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "eec44beab826c865f85bd7167365766c39bd0196", "author": {"user": {"login": "mayankgarg1990", "name": null}}, "url": "https://github.com/prestodb/presto/commit/eec44beab826c865f85bd7167365766c39bd0196", "committedDate": "2020-09-18T20:39:29Z", "message": "Consider predicate columns for encryption\n\nIn encryption we pass the list of columns that are being read to help with\ngetting the credentials only for those columns and allow for more granular\naccess control.\n\nUptil now, only the columns being requested in the select statement were\nthe only ones being considered. This commit adds support for columns in\nthe predicate as well. We now consider the predicate columns as well.\n\nA special case to callout is `ROW`. Presto currently supports encryption\ngranularity of a subfield, however, it is non-trivial to get the exact\nsubfields being accessed for a `ROW`. This PR puts the whole `ROW` column\nif any subfield is being used in the predicate. This is a limitation for\nnow."}, "afterCommit": {"oid": "4f86b23a3e5ec123c9b0a4c4a8932fc5f0c2ecdc", "author": {"user": {"login": "mayankgarg1990", "name": null}}, "url": "https://github.com/prestodb/presto/commit/4f86b23a3e5ec123c9b0a4c4a8932fc5f0c2ecdc", "committedDate": "2020-09-18T20:42:03Z", "message": "Consider predicate columns for encryption\n\nIn encryption we pass the list of columns that are being read to help with\ngetting the credentials only for those columns and allow for more granular\naccess control.\n\nUptil now, only the columns being requested in the select statement were\nthe only ones being considered. This commit adds support for columns in\nthe predicate as well. We now consider the predicate columns as well.\n\nA special case to callout is `ROW`. Presto currently supports encryption\ngranularity of a subfield, however, it is non-trivial to get the exact\nsubfields being accessed for a `ROW`. This PR puts the whole `ROW` column\nif any subfield is being used in the predicate. This is a limitation for\nnow."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyNzM3NTY3", "url": "https://github.com/prestodb/presto/pull/15187#pullrequestreview-492737567", "createdAt": "2020-09-21T15:31:47Z", "commit": {"oid": "4f86b23a3e5ec123c9b0a4c4a8932fc5f0c2ecdc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzNjAxMTM3", "url": "https://github.com/prestodb/presto/pull/15187#pullrequestreview-493601137", "createdAt": "2020-09-22T15:42:10Z", "commit": {"oid": "4f86b23a3e5ec123c9b0a4c4a8932fc5f0c2ecdc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNTo0MjoxMFrOHWAo5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNTo0MjoxMFrOHWAo5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg0MTE4OA==", "bodyText": "@mayankgarg1990 Is this the right logic? For a SELECT count(*) FROM t WHERE a > 10 we can have requestedColumns empty and predicateColumns containing \"a\". In this case, don't we need to make sure user has access to \"a\" ?", "url": "https://github.com/prestodb/presto/pull/15187#discussion_r492841188", "createdAt": "2020-09-22T15:42:10Z", "author": {"login": "mbasmanova"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitManager.java", "diffHunk": "@@ -470,6 +481,37 @@ public CounterStat getHighMemorySplitSource()\n         return concat(partitionBatches);\n     }\n \n+    @VisibleForTesting\n+    static Optional<Set<HiveColumnHandle>> mergeRequestedAndPredicateColumns(Optional<Set<HiveColumnHandle>> requestedColumns, Set<HiveColumnHandle> predicateColumns)\n+    {\n+        if (!requestedColumns.isPresent() || predicateColumns.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f86b23a3e5ec123c9b0a4c4a8932fc5f0c2ecdc"}, "originalPosition": 91}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 150, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}