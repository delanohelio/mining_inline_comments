{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwMzU0MjY5", "number": 15295, "title": "Restore #15130 with null handling fix", "bodyText": "#15130 was reverted due to a bug handling nulls. It introduced a nullsCount variable that intended to early return a RunLengthEncodedBlock when all output positions are null even when allNulls is false. This was theoretically possible: suppose outputPositions = [1, 3], outputPositionCount = 2, but both position 1 and 3 are null,\nthen there is no need to create the normal block. However there are some cases that the outputPositionCount was dropped after applying filter functions. In such cases, if the dropped outputPositionCount happens to be equal to nullsCount, a RunLengthEncodedBlock of all nulls would be incorrectly created.\nThis PR restores #15130, and fixed the above mentioned bug. It just removes this optimization and only return the RunLengthEncodedBlock of nulls when allNulls is true.\n== NO RELEASE NOTE ==", "createdAt": "2020-10-09T05:30:29Z", "url": "https://github.com/prestodb/presto/pull/15295", "merged": true, "mergeCommit": {"oid": "a90d97a17e576ed5e0edf42a7ad09ffe740f4a88"}, "closed": true, "closedAt": "2020-10-30T08:42:36Z", "author": {"login": "yingsu00"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdQvJZ3AH2gAyNTAwMzU0MjY5OjAyNDIzM2JlM2JhNWM2Zjg5NjU0N2RiZGM5MWRmNzU2ODNkOWIwZmY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdXePgdgBqjM5MzkzMTk5MjA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "024233be3ba5c6f896547dbdc91df75683d9b0ff", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/024233be3ba5c6f896547dbdc91df75683d9b0ff", "committedDate": "2020-10-09T05:15:50Z", "message": "Revert \"Revert \"Defer the creation of dictionary in SliceDictionarySelectiveReader\"\"\n\nThis reverts commit 8ab725f37277ae91e7218d156ba8158778e86704."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "482d415619503ff8bef3d3a2351700de102e4ad3", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/482d415619503ff8bef3d3a2351700de102e4ad3", "committedDate": "2020-10-09T05:15:50Z", "message": "Revert \"Revert \"Remove stripeDictionaryData buffer in SliceDictionarySelectiveReader\"\"\n\nThis reverts commit 460a4d064bc9ac547e938a98267f651b7e0dd638."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1Njc2NTE4", "url": "https://github.com/prestodb/presto/pull/15295#pullrequestreview-505676518", "createdAt": "2020-10-09T13:33:24Z", "commit": {"oid": "45ba5e12cde0067def3681727caeed30180b75a5"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0MDY1NTE2", "url": "https://github.com/prestodb/presto/pull/15295#pullrequestreview-514065516", "createdAt": "2020-10-21T18:33:26Z", "commit": {"oid": "45ba5e12cde0067def3681727caeed30180b75a5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "45ba5e12cde0067def3681727caeed30180b75a5", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/45ba5e12cde0067def3681727caeed30180b75a5", "committedDate": "2020-10-09T05:15:50Z", "message": "Fix null handling bug in SliceDictionarySelectiveReader\n\n219c7d76e introduced a nullsCount variable that intended to early return\na RunLengthEncodedBlock when all output positions are null even when\nallNulls is false. This was theoretically possible: suppose outputPositions\n= [1, 3], outputPositionCount = 2, but both position 1 and 3 are null,\nthen there is no need to create the normal block. However there are some\nrare cases that the outputPositionCount was dropped after applying filter\nfunctions. In such cases, if the dropped outputPositionCount happens to\nbe equal to nullsCount, a RunLengthEncodedBlock of all nulls would be\nincorrectly created. This commit just removes this optimization and only\nreturn the RunLengthEncodedBlock of nulls when allNulls is true."}, "afterCommit": {"oid": "444357ee6e98b1bcaca8d76d2e1b6c9ec779efa7", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/444357ee6e98b1bcaca8d76d2e1b6c9ec779efa7", "committedDate": "2020-10-22T01:05:40Z", "message": "Introduce large dictionary mode in SliceDictionarySelectiveReader\n\nPreviously we always allocate a dictionary for every rowgroup. When\nthese dictionaries are humongous, the allocations could cause reliability\nand performance issues. This commit materializes the dictionaries if\nthey are too large. Instead of outputting a DictionaryBlock, it will\noutput a plain VariableWidthBlock if the dictionaries size is above\ncertain threshold. The experiment on user reported query shows over 10x\nreduction in allocations and over 2x CPU reduction in scan."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0NjA5Njc0", "url": "https://github.com/prestodb/presto/pull/15295#pullrequestreview-514609674", "createdAt": "2020-10-22T11:07:23Z", "commit": {"oid": "444357ee6e98b1bcaca8d76d2e1b6c9ec779efa7"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMTowNzoyNFrOHmceTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMToxMDozMVrOHmck8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA3NDQ0Ng==", "bodyText": "Compaction logic is somewhat difficult to get right, hence, it would be better to re-use it by calling compactValues. Also, blockSizeInBytes and nullCount can be computed in separate loops for readability.\n        compactValues(positions, positionCount);\n\n        long blockSizeInBytes = 0;\n        for (int i = 0; i < positionCount; i++) {\n            int id = values[i];\n            blockSizeInBytes += dictionaryOffsetVector[id + 1] - dictionaryOffsetVector[id];\n        }\n\n        int nullCount = 0;  // the nulls count for selected positions\n        for (int i = 0; i < positionCount; i++) {\n            int id = values[i];\n            nullCount += (id == currentDictionarySize - 1 ? 1 : 0);\n        }", "url": "https://github.com/prestodb/presto/pull/15295#discussion_r510074446", "createdAt": "2020-10-22T11:07:24Z", "author": {"login": "mbasmanova"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDictionarySelectiveReader.java", "diffHunk": "@@ -384,32 +388,41 @@ public Block getBlock(int[] positions, int positionCount)\n             return new RunLengthEncodedBlock(outputType.createBlockBuilder(null, 1).appendNull().build(), positionCount);\n         }\n \n-        wrapDictionaryIfNecessary();\n+        // compact values(ids) array, and calculate 1) the slice sizeInBytes if materialized, and 2) number of nulls", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "444357ee6e98b1bcaca8d76d2e1b6c9ec779efa7"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA3NDczNg==", "bodyText": "This doesn't seem right. I think it should be nullCount == positionCount.", "url": "https://github.com/prestodb/presto/pull/15295#discussion_r510074736", "createdAt": "2020-10-22T11:07:53Z", "author": {"login": "mbasmanova"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDictionarySelectiveReader.java", "diffHunk": "@@ -384,32 +388,41 @@ public Block getBlock(int[] positions, int positionCount)\n             return new RunLengthEncodedBlock(outputType.createBlockBuilder(null, 1).appendNull().build(), positionCount);\n         }\n \n-        wrapDictionaryIfNecessary();\n+        // compact values(ids) array, and calculate 1) the slice sizeInBytes if materialized, and 2) number of nulls\n+        long blockSizeInBytes = 0;\n+        int nullsCount = 0;  // the nulls count for selected positions\n+        int i = 0;\n+        int j = 0;\n+        while (i < positionCount && j < outputPositionCount) {\n+            if (positions[i] != outputPositions[j]) {\n+                j++;\n+                continue;\n+            }\n \n-        if (positionCount == outputPositionCount) {\n-            DictionaryBlock block = new DictionaryBlock(positionCount, dictionary, values);\n+            int id = this.values[j];\n+            values[i] = id;\n \n-            values = null;\n-            return block;\n+            blockSizeInBytes += dictionaryOffsetVector[id + 1] - dictionaryOffsetVector[id];\n+            nullsCount += (id == currentDictionarySize - 1 ? 1 : 0);\n+\n+            i++;\n+            j++;\n         }\n \n-        int[] valuesCopy = new int[positionCount];\n+        // If all selected positions are null, just return RLE block.\n+        if (nullsCount == outputPositionCount) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "444357ee6e98b1bcaca8d76d2e1b6c9ec779efa7"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA3NDk5NA==", "bodyText": "naming consistency: nullsCount -> nullCount (to match positionCount and outputPositionCount)", "url": "https://github.com/prestodb/presto/pull/15295#discussion_r510074994", "createdAt": "2020-10-22T11:08:26Z", "author": {"login": "mbasmanova"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDictionarySelectiveReader.java", "diffHunk": "@@ -384,32 +388,41 @@ public Block getBlock(int[] positions, int positionCount)\n             return new RunLengthEncodedBlock(outputType.createBlockBuilder(null, 1).appendNull().build(), positionCount);\n         }\n \n-        wrapDictionaryIfNecessary();\n+        // compact values(ids) array, and calculate 1) the slice sizeInBytes if materialized, and 2) number of nulls\n+        long blockSizeInBytes = 0;\n+        int nullsCount = 0;  // the nulls count for selected positions", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "444357ee6e98b1bcaca8d76d2e1b6c9ec779efa7"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA3NTQyNQ==", "bodyText": "nullsCount -> nullCount", "url": "https://github.com/prestodb/presto/pull/15295#discussion_r510075425", "createdAt": "2020-10-22T11:09:08Z", "author": {"login": "mbasmanova"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDictionarySelectiveReader.java", "diffHunk": "@@ -691,4 +704,33 @@ private BlockLease newLease(Block block)\n         valuesInUse = true;\n         return ClosingBlockLease.newLease(block, () -> valuesInUse = false);\n     }\n+\n+    private Block getMaterializedBlock(int positionCount, long blockSizeInBytes, int nullsCount)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "444357ee6e98b1bcaca8d76d2e1b6c9ec779efa7"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA3NjEwNA==", "bodyText": "k -> i", "url": "https://github.com/prestodb/presto/pull/15295#discussion_r510076104", "createdAt": "2020-10-22T11:10:26Z", "author": {"login": "mbasmanova"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDictionarySelectiveReader.java", "diffHunk": "@@ -691,4 +704,33 @@ private BlockLease newLease(Block block)\n         valuesInUse = true;\n         return ClosingBlockLease.newLease(block, () -> valuesInUse = false);\n     }\n+\n+    private Block getMaterializedBlock(int positionCount, long blockSizeInBytes, int nullsCount)\n+    {\n+        byte[] sliceData = new byte[toIntExact(blockSizeInBytes)];\n+        int[] offsetVector = new int[positionCount + 1];\n+        int currentOffset = 0;\n+        for (int k = 0; k < positionCount; k++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "444357ee6e98b1bcaca8d76d2e1b6c9ec779efa7"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA3NjE0Ng==", "bodyText": "k -> i", "url": "https://github.com/prestodb/presto/pull/15295#discussion_r510076146", "createdAt": "2020-10-22T11:10:31Z", "author": {"login": "mbasmanova"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDictionarySelectiveReader.java", "diffHunk": "@@ -691,4 +704,33 @@ private BlockLease newLease(Block block)\n         valuesInUse = true;\n         return ClosingBlockLease.newLease(block, () -> valuesInUse = false);\n     }\n+\n+    private Block getMaterializedBlock(int positionCount, long blockSizeInBytes, int nullsCount)\n+    {\n+        byte[] sliceData = new byte[toIntExact(blockSizeInBytes)];\n+        int[] offsetVector = new int[positionCount + 1];\n+        int currentOffset = 0;\n+        for (int k = 0; k < positionCount; k++) {\n+            int id = values[k];\n+            int offset = dictionaryOffsetVector[id];\n+            int length = dictionaryOffsetVector[id + 1] - offset;\n+            System.arraycopy(dictionaryData, offset, sliceData, currentOffset, length);\n+\n+            currentOffset += length;\n+            offsetVector[k + 1] = currentOffset;\n+        }\n+\n+        if (nullsCount > 0) {\n+            boolean[] isNullVector = new boolean[positionCount];\n+            for (int k = 0; k < positionCount; k++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "444357ee6e98b1bcaca8d76d2e1b6c9ec779efa7"}, "originalPosition": 103}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "444357ee6e98b1bcaca8d76d2e1b6c9ec779efa7", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/444357ee6e98b1bcaca8d76d2e1b6c9ec779efa7", "committedDate": "2020-10-22T01:05:40Z", "message": "Introduce large dictionary mode in SliceDictionarySelectiveReader\n\nPreviously we always allocate a dictionary for every rowgroup. When\nthese dictionaries are humongous, the allocations could cause reliability\nand performance issues. This commit materializes the dictionaries if\nthey are too large. Instead of outputting a DictionaryBlock, it will\noutput a plain VariableWidthBlock if the dictionaries size is above\ncertain threshold. The experiment on user reported query shows over 10x\nreduction in allocations and over 2x CPU reduction in scan."}, "afterCommit": {"oid": "d6c3822fbf760f263afbe57e9e9aa458f1a19e1a", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/d6c3822fbf760f263afbe57e9e9aa458f1a19e1a", "committedDate": "2020-10-22T22:00:30Z", "message": "Introduce large dictionary mode in SliceDictionarySelectiveReader\n\nPreviously we always allocate a dictionary for every rowgroup. When\nthese dictionaries are humongous, the allocations could cause reliability\nand performance issues. This commit materializes the dictionaries if\nthey are too large. Instead of outputting a DictionaryBlock, it will\noutput a plain VariableWidthBlock if the dictionaries size is above\ncertain threshold. The experiment on user reported query shows over 10x\nreduction in allocations and over 2x CPU reduction in scan."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1NjcyOTMw", "url": "https://github.com/prestodb/presto/pull/15295#pullrequestreview-515672930", "createdAt": "2020-10-23T13:36:24Z", "commit": {"oid": "d6c3822fbf760f263afbe57e9e9aa458f1a19e1a"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMzozNjoyNFrOHnOKlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMzozNjoyNFrOHnOKlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg4ODU5OA==", "bodyText": "k -> i", "url": "https://github.com/prestodb/presto/pull/15295#discussion_r510888598", "createdAt": "2020-10-23T13:36:24Z", "author": {"login": "mbasmanova"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDictionarySelectiveReader.java", "diffHunk": "@@ -691,4 +694,33 @@ private BlockLease newLease(Block block)\n         valuesInUse = true;\n         return ClosingBlockLease.newLease(block, () -> valuesInUse = false);\n     }\n+\n+    private Block getMaterializedBlock(int positionCount, long blockSizeInBytes, int nullCount)\n+    {\n+        byte[] sliceData = new byte[toIntExact(blockSizeInBytes)];\n+        int[] offsetVector = new int[positionCount + 1];\n+        int currentOffset = 0;\n+        for (int i = 0; i < positionCount; i++) {\n+            int id = values[i];\n+            int offset = dictionaryOffsetVector[id];\n+            int length = dictionaryOffsetVector[id + 1] - offset;\n+            System.arraycopy(dictionaryData, offset, sliceData, currentOffset, length);\n+\n+            currentOffset += length;\n+            offsetVector[i + 1] = currentOffset;\n+        }\n+\n+        if (nullCount > 0) {\n+            boolean[] isNullVector = new boolean[positionCount];\n+            for (int k = 0; k < positionCount; k++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6c3822fbf760f263afbe57e9e9aa458f1a19e1a"}, "originalPosition": 94}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb8dbd85a5e5e21d2976987986d34902afbdeed6", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/cb8dbd85a5e5e21d2976987986d34902afbdeed6", "committedDate": "2020-10-30T03:31:20Z", "message": "Introduce large dictionary mode in SliceDictionarySelectiveReader\n\nPreviously we always allocate a dictionary for every rowgroup. When\nthese dictionaries are humongous, the allocations could cause reliability\nand performance issues. This commit materializes the dictionaries if\nthey are too large. Instead of outputting a DictionaryBlock, it will\noutput a plain VariableWidthBlock if the dictionaries size is above\ncertain threshold. The experiment on user reported query shows over 10x\nreduction in allocations and over 2x CPU reduction in scan."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d6c3822fbf760f263afbe57e9e9aa458f1a19e1a", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/d6c3822fbf760f263afbe57e9e9aa458f1a19e1a", "committedDate": "2020-10-22T22:00:30Z", "message": "Introduce large dictionary mode in SliceDictionarySelectiveReader\n\nPreviously we always allocate a dictionary for every rowgroup. When\nthese dictionaries are humongous, the allocations could cause reliability\nand performance issues. This commit materializes the dictionaries if\nthey are too large. Instead of outputting a DictionaryBlock, it will\noutput a plain VariableWidthBlock if the dictionaries size is above\ncertain threshold. The experiment on user reported query shows over 10x\nreduction in allocations and over 2x CPU reduction in scan."}, "afterCommit": {"oid": "cb8dbd85a5e5e21d2976987986d34902afbdeed6", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/cb8dbd85a5e5e21d2976987986d34902afbdeed6", "committedDate": "2020-10-30T03:31:20Z", "message": "Introduce large dictionary mode in SliceDictionarySelectiveReader\n\nPreviously we always allocate a dictionary for every rowgroup. When\nthese dictionaries are humongous, the allocations could cause reliability\nand performance issues. This commit materializes the dictionaries if\nthey are too large. Instead of outputting a DictionaryBlock, it will\noutput a plain VariableWidthBlock if the dictionaries size is above\ncertain threshold. The experiment on user reported query shows over 10x\nreduction in allocations and over 2x CPU reduction in scan."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4884, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}