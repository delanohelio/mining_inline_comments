{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2NTAwMTE3", "number": 14674, "title": "Avoid wrapping iterators", "bodyText": "Wrapping iterators results is large stacks when all method invocations are virtual potentially degrading the performance when the average row size is tiny.\nAdditionally it makes much harder to \"downcast\" the iterator provided by Spark if some further optimizations are needed.\nIf release note is NOT required, use:\n== NO RELEASE NOTE ==", "createdAt": "2020-06-18T14:10:44Z", "url": "https://github.com/prestodb/presto/pull/14674", "merged": true, "mergeCommit": {"oid": "b7ceddfb52ec3d381afd41f18cf19b2d604a6c5e"}, "closed": true, "closedAt": "2020-06-19T16:46:41Z", "author": {"login": "arhimondr"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcsiA4UgBqjM0NTkzNTMzODA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcs14UZAFqTQzNDIxNDgwNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ba885ebff180c12eb4374560e5faaa310e245c48", "author": {"user": {"login": "arhimondr", "name": "Andrii Rosa"}}, "url": "https://github.com/prestodb/presto/commit/ba885ebff180c12eb4374560e5faaa310e245c48", "committedDate": "2020-06-18T14:08:42Z", "message": "Avoid wrapping iterators"}, "afterCommit": {"oid": "c799fe9b201651abc4b937e1701e234293e4c060", "author": {"user": {"login": "arhimondr", "name": "Andrii Rosa"}}, "url": "https://github.com/prestodb/presto/commit/c799fe9b201651abc4b937e1701e234293e4c060", "committedDate": "2020-06-18T17:36:16Z", "message": "Avoid wrapping iterators"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNTQ0MDI2", "url": "https://github.com/prestodb/presto/pull/14674#pullrequestreview-433544026", "createdAt": "2020-06-18T18:31:04Z", "commit": {"oid": "c799fe9b201651abc4b937e1701e234293e4c060"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODozMTowNVrOGl7XJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxOToyMjozMVrOGl8_wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQyMzA3Nw==", "bodyText": "I would prefer this way\nif (currentIterator.hasNext()) {\n    prestoSparkSerializedPage = currentIterator.next();\n}\nelse {\n    currentIteratorIndex++;\n}", "url": "https://github.com/prestodb/presto/pull/14674#discussion_r442423077", "createdAt": "2020-06-18T18:31:05Z", "author": {"login": "viczhang861"}, "path": "presto-spark-base/src/main/java/com/facebook/presto/spark/execution/PrestoSparkSerializedPageInput.java", "diffHunk": "@@ -26,23 +29,33 @@\n         implements PrestoSparkPageInput\n {\n     private final PagesSerde pagesSerde;\n-    private final Iterator<PrestoSparkSerializedPage> serializedPageIterator;\n+    @GuardedBy(\"this\")\n+    private final List<Iterator<PrestoSparkSerializedPage>> serializedPageIterators;\n+    @GuardedBy(\"this\")\n+    private int currentIteratorIndex;\n \n-    public PrestoSparkSerializedPageInput(PagesSerde pagesSerde, Iterator<PrestoSparkSerializedPage> serializedPageIterator)\n+    public PrestoSparkSerializedPageInput(PagesSerde pagesSerde, List<Iterator<PrestoSparkSerializedPage>> serializedPageIterators)\n     {\n         this.pagesSerde = requireNonNull(pagesSerde, \"pagesSerde is null\");\n-        this.serializedPageIterator = requireNonNull(serializedPageIterator, \"serializedPageIterator is null\");\n+        this.serializedPageIterators = requireNonNull(serializedPageIterators, \"serializedPageIterator is null\");\n     }\n \n     @Override\n     public Page getNextPage()\n     {\n-        PrestoSparkSerializedPage prestoSparkSerializedPage;\n-        synchronized (serializedPageIterator) {\n-            if (!serializedPageIterator.hasNext()) {\n-                return null;\n+        PrestoSparkSerializedPage prestoSparkSerializedPage = null;\n+        synchronized (this) {\n+            while (prestoSparkSerializedPage == null) {\n+                if (currentIteratorIndex >= serializedPageIterators.size()) {\n+                    return null;\n+                }\n+                Iterator<PrestoSparkSerializedPage> currentIterator = serializedPageIterators.get(currentIteratorIndex);\n+                if (!currentIterator.hasNext()) {\n+                    currentIteratorIndex++;\n+                    continue;\n+                }\n+                prestoSparkSerializedPage = currentIterator.next();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c799fe9b201651abc4b937e1701e234293e4c060"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQyNzkzNg==", "bodyText": "same here, if (currentIterator.hasNext()) {} else {}", "url": "https://github.com/prestodb/presto/pull/14674#discussion_r442427936", "createdAt": "2020-06-18T18:40:25Z", "author": {"login": "viczhang861"}, "path": "presto-spark-base/src/main/java/com/facebook/presto/spark/execution/PrestoSparkMutableRowPageInput.java", "diffHunk": "@@ -38,45 +42,72 @@\n     private static final int MAX_ROWS_PER_ZERO_COLUMN_PAGE = 10_000;\n \n     private final List<Type> types;\n-    private final Iterator<PrestoSparkMutableRow> rowsIterator;\n+    @GuardedBy(\"this\")\n+    private final List<Iterator<Tuple2<MutablePartitionId, PrestoSparkMutableRow>>> rowIterators;\n+    @GuardedBy(\"this\")\n+    private int currentIteratorIndex;\n \n-    public PrestoSparkMutableRowPageInput(List<Type> types, Iterator<PrestoSparkMutableRow> rowsIterator)\n+    public PrestoSparkMutableRowPageInput(List<Type> types, List<Iterator<Tuple2<MutablePartitionId, PrestoSparkMutableRow>>> rowIterators)\n     {\n         this.types = ImmutableList.copyOf(requireNonNull(types, \"types is null\"));\n-        this.rowsIterator = requireNonNull(rowsIterator, \"rowsIterator is null\");\n+        this.rowIterators = requireNonNull(rowIterators, \"rowIterators is null\");\n     }\n \n     @Override\n     public Page getNextPage()\n     {\n         // zero columns page\n         if (types.isEmpty()) {\n-            int rowsCount = 0;\n-            synchronized (rowsIterator) {\n-                if (!rowsIterator.hasNext()) {\n-                    return null;\n-                }\n-                while (rowsIterator.hasNext() && rowsCount < MAX_ROWS_PER_ZERO_COLUMN_PAGE) {\n-                    rowsIterator.next();\n-                    rowsCount++;\n+            int rowCount = 0;\n+            synchronized (this) {\n+                while (true) {\n+                    if (currentIteratorIndex >= rowIterators.size()) {\n+                        break;\n+                    }\n+                    if (rowCount >= MAX_ROWS_PER_ZERO_COLUMN_PAGE) {\n+                        break;\n+                    }\n+                    Iterator<Tuple2<MutablePartitionId, PrestoSparkMutableRow>> currentIterator = rowIterators.get(currentIteratorIndex);\n+                    if (!currentIterator.hasNext()) {\n+                        currentIteratorIndex++;\n+                        continue;\n+                    }\n+                    currentIterator.next();\n+                    rowCount++;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c799fe9b201651abc4b937e1701e234293e4c060"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQyOTU1OQ==", "bodyText": "while (currentIteratorIndex < rowIterators.size() && rowCount < MAX_ROWS_PER_ZERO_COLUMN_PAGE)", "url": "https://github.com/prestodb/presto/pull/14674#discussion_r442429559", "createdAt": "2020-06-18T18:43:22Z", "author": {"login": "viczhang861"}, "path": "presto-spark-base/src/main/java/com/facebook/presto/spark/execution/PrestoSparkMutableRowPageInput.java", "diffHunk": "@@ -38,45 +42,72 @@\n     private static final int MAX_ROWS_PER_ZERO_COLUMN_PAGE = 10_000;\n \n     private final List<Type> types;\n-    private final Iterator<PrestoSparkMutableRow> rowsIterator;\n+    @GuardedBy(\"this\")\n+    private final List<Iterator<Tuple2<MutablePartitionId, PrestoSparkMutableRow>>> rowIterators;\n+    @GuardedBy(\"this\")\n+    private int currentIteratorIndex;\n \n-    public PrestoSparkMutableRowPageInput(List<Type> types, Iterator<PrestoSparkMutableRow> rowsIterator)\n+    public PrestoSparkMutableRowPageInput(List<Type> types, List<Iterator<Tuple2<MutablePartitionId, PrestoSparkMutableRow>>> rowIterators)\n     {\n         this.types = ImmutableList.copyOf(requireNonNull(types, \"types is null\"));\n-        this.rowsIterator = requireNonNull(rowsIterator, \"rowsIterator is null\");\n+        this.rowIterators = requireNonNull(rowIterators, \"rowIterators is null\");\n     }\n \n     @Override\n     public Page getNextPage()\n     {\n         // zero columns page\n         if (types.isEmpty()) {\n-            int rowsCount = 0;\n-            synchronized (rowsIterator) {\n-                if (!rowsIterator.hasNext()) {\n-                    return null;\n-                }\n-                while (rowsIterator.hasNext() && rowsCount < MAX_ROWS_PER_ZERO_COLUMN_PAGE) {\n-                    rowsIterator.next();\n-                    rowsCount++;\n+            int rowCount = 0;\n+            synchronized (this) {\n+                while (true) {\n+                    if (currentIteratorIndex >= rowIterators.size()) {\n+                        break;\n+                    }\n+                    if (rowCount >= MAX_ROWS_PER_ZERO_COLUMN_PAGE) {\n+                        break;\n+                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c799fe9b201651abc4b937e1701e234293e4c060"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzMTMwMA==", "bodyText": "nit, one line using ternary operator", "url": "https://github.com/prestodb/presto/pull/14674#discussion_r442431300", "createdAt": "2020-06-18T18:46:38Z", "author": {"login": "viczhang861"}, "path": "presto-spark-base/src/main/java/com/facebook/presto/spark/execution/PrestoSparkMutableRowPageInput.java", "diffHunk": "@@ -38,45 +42,72 @@\n     private static final int MAX_ROWS_PER_ZERO_COLUMN_PAGE = 10_000;\n \n     private final List<Type> types;\n-    private final Iterator<PrestoSparkMutableRow> rowsIterator;\n+    @GuardedBy(\"this\")\n+    private final List<Iterator<Tuple2<MutablePartitionId, PrestoSparkMutableRow>>> rowIterators;\n+    @GuardedBy(\"this\")\n+    private int currentIteratorIndex;\n \n-    public PrestoSparkMutableRowPageInput(List<Type> types, Iterator<PrestoSparkMutableRow> rowsIterator)\n+    public PrestoSparkMutableRowPageInput(List<Type> types, List<Iterator<Tuple2<MutablePartitionId, PrestoSparkMutableRow>>> rowIterators)\n     {\n         this.types = ImmutableList.copyOf(requireNonNull(types, \"types is null\"));\n-        this.rowsIterator = requireNonNull(rowsIterator, \"rowsIterator is null\");\n+        this.rowIterators = requireNonNull(rowIterators, \"rowIterators is null\");\n     }\n \n     @Override\n     public Page getNextPage()\n     {\n         // zero columns page\n         if (types.isEmpty()) {\n-            int rowsCount = 0;\n-            synchronized (rowsIterator) {\n-                if (!rowsIterator.hasNext()) {\n-                    return null;\n-                }\n-                while (rowsIterator.hasNext() && rowsCount < MAX_ROWS_PER_ZERO_COLUMN_PAGE) {\n-                    rowsIterator.next();\n-                    rowsCount++;\n+            int rowCount = 0;\n+            synchronized (this) {\n+                while (true) {\n+                    if (currentIteratorIndex >= rowIterators.size()) {\n+                        break;\n+                    }\n+                    if (rowCount >= MAX_ROWS_PER_ZERO_COLUMN_PAGE) {\n+                        break;\n+                    }\n+                    Iterator<Tuple2<MutablePartitionId, PrestoSparkMutableRow>> currentIterator = rowIterators.get(currentIteratorIndex);\n+                    if (!currentIterator.hasNext()) {\n+                        currentIteratorIndex++;\n+                        continue;\n+                    }\n+                    currentIterator.next();\n+                    rowCount++;\n                 }\n             }\n-            return new Page(rowsCount);\n+            if (rowCount == 0) {\n+                return null;\n+            }\n+            return new Page(rowCount);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c799fe9b201651abc4b937e1701e234293e4c060"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzMTYzOA==", "bodyText": "ditto", "url": "https://github.com/prestodb/presto/pull/14674#discussion_r442431638", "createdAt": "2020-06-18T18:47:20Z", "author": {"login": "viczhang861"}, "path": "presto-spark-base/src/main/java/com/facebook/presto/spark/execution/PrestoSparkMutableRowPageInput.java", "diffHunk": "@@ -38,45 +42,72 @@\n     private static final int MAX_ROWS_PER_ZERO_COLUMN_PAGE = 10_000;\n \n     private final List<Type> types;\n-    private final Iterator<PrestoSparkMutableRow> rowsIterator;\n+    @GuardedBy(\"this\")\n+    private final List<Iterator<Tuple2<MutablePartitionId, PrestoSparkMutableRow>>> rowIterators;\n+    @GuardedBy(\"this\")\n+    private int currentIteratorIndex;\n \n-    public PrestoSparkMutableRowPageInput(List<Type> types, Iterator<PrestoSparkMutableRow> rowsIterator)\n+    public PrestoSparkMutableRowPageInput(List<Type> types, List<Iterator<Tuple2<MutablePartitionId, PrestoSparkMutableRow>>> rowIterators)\n     {\n         this.types = ImmutableList.copyOf(requireNonNull(types, \"types is null\"));\n-        this.rowsIterator = requireNonNull(rowsIterator, \"rowsIterator is null\");\n+        this.rowIterators = requireNonNull(rowIterators, \"rowIterators is null\");\n     }\n \n     @Override\n     public Page getNextPage()\n     {\n         // zero columns page\n         if (types.isEmpty()) {\n-            int rowsCount = 0;\n-            synchronized (rowsIterator) {\n-                if (!rowsIterator.hasNext()) {\n-                    return null;\n-                }\n-                while (rowsIterator.hasNext() && rowsCount < MAX_ROWS_PER_ZERO_COLUMN_PAGE) {\n-                    rowsIterator.next();\n-                    rowsCount++;\n+            int rowCount = 0;\n+            synchronized (this) {\n+                while (true) {\n+                    if (currentIteratorIndex >= rowIterators.size()) {\n+                        break;\n+                    }\n+                    if (rowCount >= MAX_ROWS_PER_ZERO_COLUMN_PAGE) {\n+                        break;\n+                    }\n+                    Iterator<Tuple2<MutablePartitionId, PrestoSparkMutableRow>> currentIterator = rowIterators.get(currentIteratorIndex);\n+                    if (!currentIterator.hasNext()) {\n+                        currentIteratorIndex++;\n+                        continue;\n+                    }\n+                    currentIterator.next();\n+                    rowCount++;\n                 }\n             }\n-            return new Page(rowsCount);\n+            if (rowCount == 0) {\n+                return null;\n+            }\n+            return new Page(rowCount);\n         }\n \n         SliceOutput output = new DynamicSliceOutput(BUFFER_SIZE);\n         int rowCount = 0;\n-        synchronized (rowsIterator) {\n-            if (!rowsIterator.hasNext()) {\n-                return null;\n-            }\n-            while (rowsIterator.hasNext() && output.size() < TARGET_SIZE) {\n-                PrestoSparkMutableRow row = rowsIterator.next();\n+        synchronized (this) {\n+            while (true) {\n+                if (currentIteratorIndex >= rowIterators.size()) {\n+                    break;\n+                }\n+                if (output.size() >= TARGET_SIZE) {\n+                    break;\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c799fe9b201651abc4b937e1701e234293e4c060"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzNDU2Mw==", "bodyText": "ditto, avoid continue will make code cleaner", "url": "https://github.com/prestodb/presto/pull/14674#discussion_r442434563", "createdAt": "2020-06-18T18:52:41Z", "author": {"login": "viczhang861"}, "path": "presto-spark-base/src/main/java/com/facebook/presto/spark/execution/PrestoSparkMutableRowPageInput.java", "diffHunk": "@@ -38,45 +42,72 @@\n     private static final int MAX_ROWS_PER_ZERO_COLUMN_PAGE = 10_000;\n \n     private final List<Type> types;\n-    private final Iterator<PrestoSparkMutableRow> rowsIterator;\n+    @GuardedBy(\"this\")\n+    private final List<Iterator<Tuple2<MutablePartitionId, PrestoSparkMutableRow>>> rowIterators;\n+    @GuardedBy(\"this\")\n+    private int currentIteratorIndex;\n \n-    public PrestoSparkMutableRowPageInput(List<Type> types, Iterator<PrestoSparkMutableRow> rowsIterator)\n+    public PrestoSparkMutableRowPageInput(List<Type> types, List<Iterator<Tuple2<MutablePartitionId, PrestoSparkMutableRow>>> rowIterators)\n     {\n         this.types = ImmutableList.copyOf(requireNonNull(types, \"types is null\"));\n-        this.rowsIterator = requireNonNull(rowsIterator, \"rowsIterator is null\");\n+        this.rowIterators = requireNonNull(rowIterators, \"rowIterators is null\");\n     }\n \n     @Override\n     public Page getNextPage()\n     {\n         // zero columns page\n         if (types.isEmpty()) {\n-            int rowsCount = 0;\n-            synchronized (rowsIterator) {\n-                if (!rowsIterator.hasNext()) {\n-                    return null;\n-                }\n-                while (rowsIterator.hasNext() && rowsCount < MAX_ROWS_PER_ZERO_COLUMN_PAGE) {\n-                    rowsIterator.next();\n-                    rowsCount++;\n+            int rowCount = 0;\n+            synchronized (this) {\n+                while (true) {\n+                    if (currentIteratorIndex >= rowIterators.size()) {\n+                        break;\n+                    }\n+                    if (rowCount >= MAX_ROWS_PER_ZERO_COLUMN_PAGE) {\n+                        break;\n+                    }\n+                    Iterator<Tuple2<MutablePartitionId, PrestoSparkMutableRow>> currentIterator = rowIterators.get(currentIteratorIndex);\n+                    if (!currentIterator.hasNext()) {\n+                        currentIteratorIndex++;\n+                        continue;\n+                    }\n+                    currentIterator.next();\n+                    rowCount++;\n                 }\n             }\n-            return new Page(rowsCount);\n+            if (rowCount == 0) {\n+                return null;\n+            }\n+            return new Page(rowCount);\n         }\n \n         SliceOutput output = new DynamicSliceOutput(BUFFER_SIZE);\n         int rowCount = 0;\n-        synchronized (rowsIterator) {\n-            if (!rowsIterator.hasNext()) {\n-                return null;\n-            }\n-            while (rowsIterator.hasNext() && output.size() < TARGET_SIZE) {\n-                PrestoSparkMutableRow row = rowsIterator.next();\n+        synchronized (this) {\n+            while (true) {\n+                if (currentIteratorIndex >= rowIterators.size()) {\n+                    break;\n+                }\n+                if (output.size() >= TARGET_SIZE) {\n+                    break;\n+                }\n+                Iterator<Tuple2<MutablePartitionId, PrestoSparkMutableRow>> currentIterator = rowIterators.get(currentIteratorIndex);\n+                if (!currentIterator.hasNext()) {\n+                    currentIteratorIndex++;\n+                    continue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c799fe9b201651abc4b937e1701e234293e4c060"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ0OTg1Nw==", "bodyText": "Duplicated as that in PrestoSparkUtils.java", "url": "https://github.com/prestodb/presto/pull/14674#discussion_r442449857", "createdAt": "2020-06-18T19:22:31Z", "author": {"login": "viczhang861"}, "path": "presto-spark-classloader-interface/src/main/java/com/facebook/presto/spark/classloader_interface/PrestoSparkTaskRdd.java", "diffHunk": "@@ -124,15 +123,36 @@ private PrestoSparkTaskRdd(\n         for (int inputIndex = 0; inputIndex < shuffleInputRdds.size(); inputIndex++) {\n             shuffleInputIterators.put(\n                     shuffleInputFragmentIds.get(inputIndex),\n-                    asJavaIterator(shuffleInputRdds.get(inputIndex).iterator(partitions.get(inputIndex), context)));\n+                    shuffleInputRdds.get(inputIndex).iterator(partitions.get(inputIndex), context));\n         }\n \n-        Iterator<SerializedPrestoSparkTaskSource> taskSourceIterator = emptyIterator();\n+        Iterator<SerializedPrestoSparkTaskSource> taskSourceIterator;\n         if (taskSourceRdd != null) {\n-            taskSourceIterator = asJavaIterator(taskSourceRdd.iterator(partitions.get(partitions.size() - 1), context));\n+            taskSourceIterator = taskSourceRdd.iterator(partitions.get(partitions.size() - 1), context);\n         }\n+        else {\n+            taskSourceIterator = emptyScalaIterator();\n+        }\n+\n+        return taskProcessor.process(taskSourceIterator, unmodifiableMap(shuffleInputIterators));\n+    }\n+\n+    private static <T> Iterator<T> emptyScalaIterator()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c799fe9b201651abc4b937e1701e234293e4c060"}, "originalPosition": 57}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af4688e186b24569f50867b1f4e9e64a775f0424", "author": {"user": {"login": "arhimondr", "name": "Andrii Rosa"}}, "url": "https://github.com/prestodb/presto/commit/af4688e186b24569f50867b1f4e9e64a775f0424", "committedDate": "2020-06-19T13:50:23Z", "message": "Avoid wrapping iterators"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c799fe9b201651abc4b937e1701e234293e4c060", "author": {"user": {"login": "arhimondr", "name": "Andrii Rosa"}}, "url": "https://github.com/prestodb/presto/commit/c799fe9b201651abc4b937e1701e234293e4c060", "committedDate": "2020-06-18T17:36:16Z", "message": "Avoid wrapping iterators"}, "afterCommit": {"oid": "af4688e186b24569f50867b1f4e9e64a775f0424", "author": {"user": {"login": "arhimondr", "name": "Andrii Rosa"}}, "url": "https://github.com/prestodb/presto/commit/af4688e186b24569f50867b1f4e9e64a775f0424", "committedDate": "2020-06-19T13:50:23Z", "message": "Avoid wrapping iterators"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0MjE0ODA1", "url": "https://github.com/prestodb/presto/pull/14674#pullrequestreview-434214805", "createdAt": "2020-06-19T16:45:14Z", "commit": {"oid": "af4688e186b24569f50867b1f4e9e64a775f0424"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1406, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}