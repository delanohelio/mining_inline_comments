{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwMjM4NzY1", "number": 15292, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMzo1MDoyOVrOEwD57w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNDo0MDo1NlrOEwEarA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4ODMxMDg3OnYy", "diffSide": "RIGHT", "path": "presto-parser/src/main/antlr4/com/facebook/presto/sql/parser/SqlBase.g4", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMzo1MDoyOVrOHlZPyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMzo1MDoyOVrOHlZPyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk3MzAwMA==", "bodyText": "What I'm hesitating on is CREATE MATERIALIZED VIEW statement is actually not in SQL standard. However, Oracle, MS, postgres, snowflake, sybase, BigQuery, etc all use this syntax. So likely it will be in standard some day in the future. cc: @rongrong", "url": "https://github.com/prestodb/presto/pull/15292#discussion_r508973000", "createdAt": "2020-10-21T03:50:29Z", "author": {"login": "highker"}, "path": "presto-parser/src/main/antlr4/com/facebook/presto/sql/parser/SqlBase.g4", "diffHunk": "@@ -61,6 +61,9 @@ statement\n     | CREATE (OR REPLACE)? VIEW qualifiedName\n             (SECURITY (DEFINER | INVOKER))? AS query                       #createView\n     | DROP VIEW (IF EXISTS)? qualifiedName                             #dropView\n+    | CREATE MATERIALIZED VIEW (IF NOT EXISTS)? qualifiedName", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a95b356ed30889688f20ae88e972306c6271a907"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4ODMxNzcwOnYy", "diffSide": "RIGHT", "path": "presto-parser/src/main/antlr4/com/facebook/presto/sql/parser/SqlBase.g4", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMzo1NDo1M1rOHlZTqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMzo1NDo1M1rOHlZTqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk3Mzk5Mw==", "bodyText": "Could you help to fix #createMaterializedView's indentation by moving it forward 1 space?", "url": "https://github.com/prestodb/presto/pull/15292#discussion_r508973993", "createdAt": "2020-10-21T03:54:53Z", "author": {"login": "highker"}, "path": "presto-parser/src/main/antlr4/com/facebook/presto/sql/parser/SqlBase.g4", "diffHunk": "@@ -61,6 +61,9 @@ statement\n     | CREATE (OR REPLACE)? VIEW qualifiedName\n             (SECURITY (DEFINER | INVOKER))? AS query                       #createView\n     | DROP VIEW (IF EXISTS)? qualifiedName                             #dropView\n+    | CREATE MATERIALIZED VIEW (IF NOT EXISTS)? qualifiedName\n+        (COMMENT string)?\n+        (WITH properties)? AS (query | '('query')')                     #createMaterializedView", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a95b356ed30889688f20ae88e972306c6271a907"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4ODMyMTE2OnYy", "diffSide": "RIGHT", "path": "presto-parser/src/main/java/com/facebook/presto/sql/SqlFormatter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMzo1NjozMVrOHlZVgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMzo1NjozMVrOHlZVgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk3NDQ2NA==", "bodyText": "break a line after this.", "url": "https://github.com/prestodb/presto/pull/15292#discussion_r508974464", "createdAt": "2020-10-21T03:56:31Z", "author": {"login": "highker"}, "path": "presto-parser/src/main/java/com/facebook/presto/sql/SqlFormatter.java", "diffHunk": "@@ -558,6 +559,25 @@ protected Void visitCreateView(CreateView node, Integer indent)\n             return null;\n         }\n \n+        @Override\n+        protected Void visitCreateMaterializedView(CreateMaterializedView node, Integer indent)\n+        {\n+            builder.append(\"CREATE MATERIALIZED VIEW \");\n+            if (node.isNotExists()) {\n+                builder.append(\"IF NOT EXISTS \");\n+            }\n+            builder.append(formatName(node.getName()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a95b356ed30889688f20ae88e972306c6271a907"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4ODMyMzI5OnYy", "diffSide": "RIGHT", "path": "presto-parser/src/main/java/com/facebook/presto/sql/SqlFormatter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMzo1Nzo1NlrOHlZWxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMzo1Nzo1NlrOHlZWxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk3NDc4OA==", "bodyText": "builder.append(\" AS \");", "url": "https://github.com/prestodb/presto/pull/15292#discussion_r508974788", "createdAt": "2020-10-21T03:57:56Z", "author": {"login": "highker"}, "path": "presto-parser/src/main/java/com/facebook/presto/sql/SqlFormatter.java", "diffHunk": "@@ -558,6 +559,25 @@ protected Void visitCreateView(CreateView node, Integer indent)\n             return null;\n         }\n \n+        @Override\n+        protected Void visitCreateMaterializedView(CreateMaterializedView node, Integer indent)\n+        {\n+            builder.append(\"CREATE MATERIALIZED VIEW \");\n+            if (node.isNotExists()) {\n+                builder.append(\"IF NOT EXISTS \");\n+            }\n+            builder.append(formatName(node.getName()));\n+            if (node.getComment().isPresent()) {\n+                builder.append(\"\\nCOMMENT \" + formatStringLiteral(node.getComment().get()));\n+            }\n+            builder.append(formatPropertiesMultiLine(node.getProperties()));\n+\n+            builder.append(\" AS\\n\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a95b356ed30889688f20ae88e972306c6271a907"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4ODM4OTU2OnYy", "diffSide": "RIGHT", "path": "presto-parser/src/main/java/com/facebook/presto/sql/tree/CreateMaterializedView.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNDozODowNlrOHlZ9Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNDozODowNlrOHlZ9Ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk4NDYxMA==", "bodyText": "remove this as we don't use it", "url": "https://github.com/prestodb/presto/pull/15292#discussion_r508984610", "createdAt": "2020-10-21T04:38:06Z", "author": {"login": "highker"}, "path": "presto-parser/src/main/java/com/facebook/presto/sql/tree/CreateMaterializedView.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.tree;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static java.util.Objects.requireNonNull;\n+\n+public class CreateMaterializedView\n+        extends Statement\n+{\n+    private final QualifiedName name;\n+    private final Query query;\n+    private final boolean notExists;\n+    private final List<Property> properties;\n+    private final Optional<String> comment;\n+\n+    public CreateMaterializedView(QualifiedName name, Query query, boolean notExists, List<Property> properties, Optional<String> comment)\n+    {\n+        this(Optional.empty(), name, query, notExists, properties, comment);\n+    }\n+\n+    public CreateMaterializedView(NodeLocation location, QualifiedName name, Query query, boolean notExists, List<Property> properties, Optional<String> comment)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a95b356ed30889688f20ae88e972306c6271a907"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4ODM5MDM4OnYy", "diffSide": "RIGHT", "path": "presto-parser/src/main/java/com/facebook/presto/sql/tree/CreateMaterializedView.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNDozODozN1rOHlZ9nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNDozODozN1rOHlZ9nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk4NDczMg==", "bodyText": "I would move this to a static helper in the test", "url": "https://github.com/prestodb/presto/pull/15292#discussion_r508984732", "createdAt": "2020-10-21T04:38:37Z", "author": {"login": "highker"}, "path": "presto-parser/src/main/java/com/facebook/presto/sql/tree/CreateMaterializedView.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.tree;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static java.util.Objects.requireNonNull;\n+\n+public class CreateMaterializedView\n+        extends Statement\n+{\n+    private final QualifiedName name;\n+    private final Query query;\n+    private final boolean notExists;\n+    private final List<Property> properties;\n+    private final Optional<String> comment;\n+\n+    public CreateMaterializedView(QualifiedName name, Query query, boolean notExists, List<Property> properties, Optional<String> comment)\n+    {\n+        this(Optional.empty(), name, query, notExists, properties, comment);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a95b356ed30889688f20ae88e972306c6271a907"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4ODM5MTUwOnYy", "diffSide": "RIGHT", "path": "presto-parser/src/main/java/com/facebook/presto/sql/tree/CreateMaterializedView.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNDozOTowOVrOHlZ-Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNDozOTowOVrOHlZ-Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk4NDg4Mg==", "bodyText": "requireNonNull", "url": "https://github.com/prestodb/presto/pull/15292#discussion_r508984882", "createdAt": "2020-10-21T04:39:09Z", "author": {"login": "highker"}, "path": "presto-parser/src/main/java/com/facebook/presto/sql/tree/CreateMaterializedView.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.tree;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static java.util.Objects.requireNonNull;\n+\n+public class CreateMaterializedView\n+        extends Statement\n+{\n+    private final QualifiedName name;\n+    private final Query query;\n+    private final boolean notExists;\n+    private final List<Property> properties;\n+    private final Optional<String> comment;\n+\n+    public CreateMaterializedView(QualifiedName name, Query query, boolean notExists, List<Property> properties, Optional<String> comment)\n+    {\n+        this(Optional.empty(), name, query, notExists, properties, comment);\n+    }\n+\n+    public CreateMaterializedView(NodeLocation location, QualifiedName name, Query query, boolean notExists, List<Property> properties, Optional<String> comment)\n+    {\n+        this(Optional.of(location), name, query, notExists, properties, comment);\n+    }\n+\n+    public CreateMaterializedView(Optional<NodeLocation> location, QualifiedName name, Query query, boolean notExists, List<Property> properties, Optional<String> comment)\n+    {\n+        super(location);\n+        this.name = requireNonNull(name, \"name is null\");\n+        this.query = requireNonNull(query, \"query is null\");\n+        this.notExists = notExists;\n+        this.properties = ImmutableList.copyOf(requireNonNull(properties, \"properties is null\"));\n+        this.comment = comment;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a95b356ed30889688f20ae88e972306c6271a907"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4ODM5NDY4OnYy", "diffSide": "RIGHT", "path": "presto-parser/src/test/java/com/facebook/presto/sql/parser/TestSqlParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNDo0MDo1NlrOHlaABA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNDo0MDo1NlrOHlaABA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk4NTM0OA==", "bodyText": "Use ImmutableList.of() instead of new ArrayList<>(); same for other places", "url": "https://github.com/prestodb/presto/pull/15292#discussion_r508985348", "createdAt": "2020-10-21T04:40:56Z", "author": {"login": "highker"}, "path": "presto-parser/src/test/java/com/facebook/presto/sql/parser/TestSqlParser.java", "diffHunk": "@@ -1485,6 +1487,43 @@ public void testCreateView()\n         assertStatement(\"CREATE VIEW \\\"awesome schema\\\".\\\"awesome view\\\" AS SELECT * FROM t\", new CreateView(QualifiedName.of(\"awesome schema\", \"awesome view\"), query, false, Optional.empty()));\n     }\n \n+    @Test\n+    public void testCreateMaterializedView()\n+    {\n+        Query query = simpleQuery(selectList(new AllColumns()), table(QualifiedName.of(\"t\")));\n+        assertStatement(\n+                \"CREATE MATERIALIZED VIEW mv\" +\n+                        \" AS SELECT * FROM t\",\n+                new CreateMaterializedView(QualifiedName.of(\"mv\"), query, false, new ArrayList<>(), Optional.empty()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a95b356ed30889688f20ae88e972306c6271a907"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3496, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}