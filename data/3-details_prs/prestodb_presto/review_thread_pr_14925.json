{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4Nzg5MjQ1", "number": 14925, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMjo1OToyNVrOET6c2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjo1ODowM1rOEUrthg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MzE2MDU2OnYy", "diffSide": "RIGHT", "path": "presto-expressions/src/main/java/com/facebook/presto/expressions/DynamicFilters.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMjo1OToyNVrOG56fsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMjo1OToyNVrOG56fsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM4MDQwMQ==", "bodyText": "placeholder", "url": "https://github.com/prestodb/presto/pull/14925#discussion_r463380401", "createdAt": "2020-07-31T02:59:25Z", "author": {"login": "highker"}, "path": "presto-expressions/src/main/java/com/facebook/presto/expressions/DynamicFilters.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.expressions;\n+\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.type.VarcharType;\n+import com.facebook.presto.spi.function.ScalarFunction;\n+import com.facebook.presto.spi.function.SqlType;\n+import com.facebook.presto.spi.function.TypeParameter;\n+import com.facebook.presto.spi.relation.CallExpression;\n+import com.facebook.presto.spi.relation.ConstantExpression;\n+import com.facebook.presto.spi.relation.RowExpression;\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.slice.Slice;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.common.type.StandardTypes.BOOLEAN;\n+import static com.facebook.presto.common.type.StandardTypes.VARCHAR;\n+import static com.facebook.presto.expressions.LogicalRowExpressions.extractConjuncts;\n+import static com.facebook.presto.spi.function.SqlFunctionVisibility.HIDDEN;\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+public final class DynamicFilters\n+{\n+    private DynamicFilters() {}\n+\n+    public static DynamicFilterExtractResult extractDynamicFilters(RowExpression expression)\n+    {\n+        List<RowExpression> conjuncts = extractConjuncts(expression);\n+\n+        ImmutableList.Builder<RowExpression> staticConjuncts = ImmutableList.builder();\n+        ImmutableList.Builder<DynamicFilterPlaceholder> dynamicConjuncts = ImmutableList.builder();\n+\n+        for (RowExpression conjunct : conjuncts) {\n+            Optional<DynamicFilterPlaceholder> descriptor = getPlaceholder(conjunct);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58a7947fea4e168dba17e797683bfe25cd908a36"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MzUwNTUwOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/FilteringPageSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNjozNjowN1rOG59lJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNjozNjowN1rOG59lJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQzMDk1MQ==", "bodyText": "Remove this", "url": "https://github.com/prestodb/presto/pull/14925#discussion_r463430951", "createdAt": "2020-07-31T06:36:07Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/FilteringPageSource.java", "diffHunk": "@@ -119,6 +122,19 @@ public FilteringPageSource(\n         }\n         else {\n             RowExpression expression = replaceExpression(optimizedRemainingPredicate, variableToInput);\n+\n+            DynamicFilters.DynamicFilterExtractResult extractDynamicFilterResult = extractDynamicFilters(expression);\n+\n+            // Extract the static ones\n+            // TODO: james, and() is a short cut hack\n+            expression = and(extractDynamicFilterResult.getStaticConjuncts());\n+\n+            // TODO: Execution must be plugged in here\n+            List<DynamicFilters.DynamicFilterPlaceholder> dynamicFilters = extractDynamicFilterResult.getDynamicConjuncts();\n+            if (!dynamicFilters.isEmpty()) {\n+                // translate filter function\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a53deab5bcd6241699920006d4dcaaecc121a5a5"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MzUwNjg5OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/FilteringPageSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNjozNjo0MVrOG59l4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNjozNjo0MVrOG59l4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQzMTEzOQ==", "bodyText": "Remove the comment; just leave the following line. Add a comment: \"dynamic filter will be added through subfield pushdown\"", "url": "https://github.com/prestodb/presto/pull/14925#discussion_r463431139", "createdAt": "2020-07-31T06:36:41Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/FilteringPageSource.java", "diffHunk": "@@ -119,6 +122,19 @@ public FilteringPageSource(\n         }\n         else {\n             RowExpression expression = replaceExpression(optimizedRemainingPredicate, variableToInput);\n+\n+            DynamicFilters.DynamicFilterExtractResult extractDynamicFilterResult = extractDynamicFilters(expression);\n+\n+            // Extract the static ones\n+            // TODO: james, and() is a short cut hack", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a53deab5bcd6241699920006d4dcaaecc121a5a5"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MzUwNzcyOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/orc/OrcSelectivePageSourceFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNjozNjo1OFrOG59mUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNjozNjo1OFrOG59mUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQzMTI1MA==", "bodyText": "Remove", "url": "https://github.com/prestodb/presto/pull/14925#discussion_r463431250", "createdAt": "2020-07-31T06:36:58Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/orc/OrcSelectivePageSourceFactory.java", "diffHunk": "@@ -625,6 +629,18 @@ private static OrcPredicate toOrcPredicate(TupleDomain<Subfield> domainPredicate\n             return filterFunctions.build();\n         }\n \n+        DynamicFilterExtractResult extractDynamicFilterResult = extractDynamicFilters(filter);\n+\n+        // Extract the static ones\n+        // TODO: james, and() is a short cut hack\n+        filter = and(extractDynamicFilterResult.getStaticConjuncts());\n+\n+        // TODO: Execution must be plugged in here\n+        List<DynamicFilterPlaceholder> dynamicFilters = extractDynamicFilterResult.getDynamicConjuncts();\n+        if (!dynamicFilters.isEmpty()) {\n+            // translate filter function\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a53deab5bcd6241699920006d4dcaaecc121a5a5"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MzUwODAwOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/orc/OrcSelectivePageSourceFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNjozNzowOFrOG59mhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNjozNzowOFrOG59mhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQzMTMwMQ==", "bodyText": "Remove the comment; just leave the following line. Add a comment: \"dynamic filter will be added through subfield pushdown\"", "url": "https://github.com/prestodb/presto/pull/14925#discussion_r463431301", "createdAt": "2020-07-31T06:37:08Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/orc/OrcSelectivePageSourceFactory.java", "diffHunk": "@@ -625,6 +629,18 @@ private static OrcPredicate toOrcPredicate(TupleDomain<Subfield> domainPredicate\n             return filterFunctions.build();\n         }\n \n+        DynamicFilterExtractResult extractDynamicFilterResult = extractDynamicFilters(filter);\n+\n+        // Extract the static ones\n+        // TODO: james, and() is a short cut hack", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a53deab5bcd6241699920006d4dcaaecc121a5a5"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MzUxNDg0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/com/facebook/presto/sql/planner/assertions/DynamicFilterMatcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNjo0MDozMFrOG59qwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNjo0MDozMFrOG59qwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQzMjM4NA==", "bodyText": "We nee to fix that. We need an extra commit to address RowExpressionVerifier", "url": "https://github.com/prestodb/presto/pull/14925#discussion_r463432384", "createdAt": "2020-07-31T06:40:30Z", "author": {"login": "highker"}, "path": "presto-main/src/test/java/com/facebook/presto/sql/planner/assertions/DynamicFilterMatcher.java", "diffHunk": "@@ -63,12 +71,26 @@ public MatchResult match(JoinNode joinNode, SymbolAliases symbolAliases)\n         return new MatchResult(match());\n     }\n \n-    public MatchResult match(FilterNode filterNode, SymbolAliases symbolAliases)\n+    private MatchResult match(FilterNode filterNode, Session session, Metadata metadata, SymbolAliases symbolAliases)\n     {\n         checkState(this.filterNode == null, \"filterNode must be null at this point\");\n         this.filterNode = filterNode;\n         this.symbolAliases = symbolAliases;\n-        return new MatchResult(match());\n+\n+        LogicalRowExpressions logicalRowExpressions = new LogicalRowExpressions(\n+                new RowExpressionDeterminismEvaluator(metadata.getFunctionManager()),\n+                new FunctionResolution(metadata.getFunctionManager()),\n+                metadata.getFunctionManager());\n+        boolean staticFilterMatches = expectedStaticFilter.map(filter -> {\n+            RowExpressionVerifier verifier = new RowExpressionVerifier(symbolAliases, metadata, session);\n+            RowExpression staticFilter = logicalRowExpressions.combineConjuncts(extractDynamicFilters(filterNode.getPredicate()).getStaticConjuncts());\n+\n+            // TODO: figure out translation\n+            // return verifier.process(staticFilter, filter);\n+            return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ad7354fa2347321360a91ec378e46c7cfe9ae61"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTE2NjUxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/com/facebook/presto/sql/planner/TestDynamicFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjozOToyMVrOG7Aosg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjozOToyMVrOG7Aosg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUyOTU4Ng==", "bodyText": "missing package statement package com.facebook.presto.sql.planner;", "url": "https://github.com/prestodb/presto/pull/14925#discussion_r464529586", "createdAt": "2020-08-03T16:39:21Z", "author": {"login": "highker"}, "path": "presto-main/src/test/java/com/facebook/presto/sql/planner/TestDynamicFilter.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d051eb86709c45c21ff76b7e35ca8f8c12c16f8"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTE3NDIyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/com/facebook/presto/sql/planner/TestDynamicFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjo0MTozOVrOG7AteA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjo0MTozOVrOG7AteA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUzMDgwOA==", "bodyText": "one param per line", "url": "https://github.com/prestodb/presto/pull/14925#discussion_r464530808", "createdAt": "2020-08-03T16:41:39Z", "author": {"login": "highker"}, "path": "presto-main/src/test/java/com/facebook/presto/sql/planner/TestDynamicFilter.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import com.facebook.presto.spi.plan.FilterNode;\n+import com.facebook.presto.sql.planner.assertions.BasePlanTest;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import java.util.Optional;\n+\n+import static com.facebook.presto.SystemSessionProperties.ENABLE_DYNAMIC_FILTERING;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.any;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.anyNot;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.anyTree;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.equiJoinClause;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.exchange;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.filter;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.join;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.node;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.project;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.semiJoin;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.tableScan;\n+import static com.facebook.presto.sql.planner.plan.JoinNode.Type.INNER;\n+import static com.facebook.presto.sql.planner.plan.JoinNode.Type.LEFT;\n+\n+public class TestDynamicFilter\n+        extends BasePlanTest\n+{\n+    TestDynamicFilter()\n+    {\n+        // in order to test testUncorrelatedSubqueries with Dynamic Filtering, enable it\n+        super(ImmutableMap.of(ENABLE_DYNAMIC_FILTERING, \"true\"));\n+    }\n+\n+    @Test\n+    public void testNonInnerJoin()\n+    {\n+        assertPlan(\"SELECT o.orderkey FROM orders o LEFT JOIN lineitem l ON l.orderkey = o.orderkey\",\n+                anyTree(\n+                        join(LEFT,\n+                                ImmutableList.of(equiJoinClause(\"ORDERS_OK\", \"LINEITEM_OK\")),\n+                                project(\n+                                        tableScan(\"orders\", ImmutableMap.of(\"ORDERS_OK\", \"orderkey\"))),\n+                                exchange(\n+                                        project(\n+                                                tableScan(\"lineitem\", ImmutableMap.of(\"LINEITEM_OK\", \"orderkey\")))))));\n+    }\n+\n+    @Test\n+    public void testEmptyJoinCriteria()\n+    {\n+        assertPlan(\"SELECT o.orderkey FROM orders o CROSS JOIN lineitem l\",\n+                anyTree(\n+                        join(INNER, ImmutableList.of(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d051eb86709c45c21ff76b7e35ca8f8c12c16f8"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTE3NDY3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/com/facebook/presto/sql/planner/TestDynamicFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjo0MTo0NVrOG7Atug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjo0MTo0NVrOG7Atug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUzMDg3NA==", "bodyText": "one param per line", "url": "https://github.com/prestodb/presto/pull/14925#discussion_r464530874", "createdAt": "2020-08-03T16:41:45Z", "author": {"login": "highker"}, "path": "presto-main/src/test/java/com/facebook/presto/sql/planner/TestDynamicFilter.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import com.facebook.presto.spi.plan.FilterNode;\n+import com.facebook.presto.sql.planner.assertions.BasePlanTest;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import java.util.Optional;\n+\n+import static com.facebook.presto.SystemSessionProperties.ENABLE_DYNAMIC_FILTERING;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.any;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.anyNot;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.anyTree;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.equiJoinClause;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.exchange;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.filter;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.join;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.node;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.project;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.semiJoin;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.tableScan;\n+import static com.facebook.presto.sql.planner.plan.JoinNode.Type.INNER;\n+import static com.facebook.presto.sql.planner.plan.JoinNode.Type.LEFT;\n+\n+public class TestDynamicFilter\n+        extends BasePlanTest\n+{\n+    TestDynamicFilter()\n+    {\n+        // in order to test testUncorrelatedSubqueries with Dynamic Filtering, enable it\n+        super(ImmutableMap.of(ENABLE_DYNAMIC_FILTERING, \"true\"));\n+    }\n+\n+    @Test\n+    public void testNonInnerJoin()\n+    {\n+        assertPlan(\"SELECT o.orderkey FROM orders o LEFT JOIN lineitem l ON l.orderkey = o.orderkey\",\n+                anyTree(\n+                        join(LEFT,\n+                                ImmutableList.of(equiJoinClause(\"ORDERS_OK\", \"LINEITEM_OK\")),\n+                                project(\n+                                        tableScan(\"orders\", ImmutableMap.of(\"ORDERS_OK\", \"orderkey\"))),\n+                                exchange(\n+                                        project(\n+                                                tableScan(\"lineitem\", ImmutableMap.of(\"LINEITEM_OK\", \"orderkey\")))))));\n+    }\n+\n+    @Test\n+    public void testEmptyJoinCriteria()\n+    {\n+        assertPlan(\"SELECT o.orderkey FROM orders o CROSS JOIN lineitem l\",\n+                anyTree(\n+                        join(INNER, ImmutableList.of(),\n+                                tableScan(\"orders\"),\n+                                exchange(\n+                                        tableScan(\"lineitem\")))));\n+    }\n+\n+    @Test\n+    public void testJoin()\n+    {\n+        assertPlan(\"SELECT o.orderkey FROM orders o, lineitem l WHERE l.orderkey = o.orderkey\",\n+                anyTree(\n+                        join(INNER, ImmutableList.of(equiJoinClause(\"ORDERS_OK\", \"LINEITEM_OK\")),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d051eb86709c45c21ff76b7e35ca8f8c12c16f8"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTE3NTQ5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/com/facebook/presto/sql/planner/TestDynamicFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjo0MTo1OFrOG7AuNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjo0MTo1OFrOG7AuNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUzMDk5Nw==", "bodyText": "one param per line; same for the entire class", "url": "https://github.com/prestodb/presto/pull/14925#discussion_r464530997", "createdAt": "2020-08-03T16:41:58Z", "author": {"login": "highker"}, "path": "presto-main/src/test/java/com/facebook/presto/sql/planner/TestDynamicFilter.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import com.facebook.presto.spi.plan.FilterNode;\n+import com.facebook.presto.sql.planner.assertions.BasePlanTest;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import java.util.Optional;\n+\n+import static com.facebook.presto.SystemSessionProperties.ENABLE_DYNAMIC_FILTERING;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.any;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.anyNot;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.anyTree;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.equiJoinClause;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.exchange;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.filter;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.join;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.node;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.project;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.semiJoin;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.tableScan;\n+import static com.facebook.presto.sql.planner.plan.JoinNode.Type.INNER;\n+import static com.facebook.presto.sql.planner.plan.JoinNode.Type.LEFT;\n+\n+public class TestDynamicFilter\n+        extends BasePlanTest\n+{\n+    TestDynamicFilter()\n+    {\n+        // in order to test testUncorrelatedSubqueries with Dynamic Filtering, enable it\n+        super(ImmutableMap.of(ENABLE_DYNAMIC_FILTERING, \"true\"));\n+    }\n+\n+    @Test\n+    public void testNonInnerJoin()\n+    {\n+        assertPlan(\"SELECT o.orderkey FROM orders o LEFT JOIN lineitem l ON l.orderkey = o.orderkey\",\n+                anyTree(\n+                        join(LEFT,\n+                                ImmutableList.of(equiJoinClause(\"ORDERS_OK\", \"LINEITEM_OK\")),\n+                                project(\n+                                        tableScan(\"orders\", ImmutableMap.of(\"ORDERS_OK\", \"orderkey\"))),\n+                                exchange(\n+                                        project(\n+                                                tableScan(\"lineitem\", ImmutableMap.of(\"LINEITEM_OK\", \"orderkey\")))))));\n+    }\n+\n+    @Test\n+    public void testEmptyJoinCriteria()\n+    {\n+        assertPlan(\"SELECT o.orderkey FROM orders o CROSS JOIN lineitem l\",\n+                anyTree(\n+                        join(INNER, ImmutableList.of(),\n+                                tableScan(\"orders\"),\n+                                exchange(\n+                                        tableScan(\"lineitem\")))));\n+    }\n+\n+    @Test\n+    public void testJoin()\n+    {\n+        assertPlan(\"SELECT o.orderkey FROM orders o, lineitem l WHERE l.orderkey = o.orderkey\",\n+                anyTree(\n+                        join(INNER, ImmutableList.of(equiJoinClause(\"ORDERS_OK\", \"LINEITEM_OK\")),\n+                                any(\n+                                        node(FilterNode.class,\n+                                                tableScan(\"orders\", ImmutableMap.of(\"ORDERS_OK\", \"orderkey\")))),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d051eb86709c45c21ff76b7e35ca8f8c12c16f8"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTE3ODMzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/com/facebook/presto/sql/planner/TestPredicatePushdown.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjo0Mjo0NVrOG7Avzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNToxMjoyOFrOG7RWCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUzMTQwNw==", "bodyText": "why this empty constructor?", "url": "https://github.com/prestodb/presto/pull/14925#discussion_r464531407", "createdAt": "2020-08-03T16:42:45Z", "author": {"login": "highker"}, "path": "presto-main/src/test/java/com/facebook/presto/sql/planner/TestPredicatePushdown.java", "diffHunk": "@@ -53,6 +54,15 @@\n public class TestPredicatePushdown\n         extends BasePlanTest\n {\n+    public TestPredicatePushdown()\n+    {\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d051eb86709c45c21ff76b7e35ca8f8c12c16f8"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDgwMzMzNw==", "bodyText": "Its original was the implicit default empty constructor\nAfter adding the constructor with parameter, it will make empty constructor disappear if we don't explicitly define it, which would cause our test unable to run", "url": "https://github.com/prestodb/presto/pull/14925#discussion_r464803337", "createdAt": "2020-08-04T05:12:28Z", "author": {"login": "kewang1024"}, "path": "presto-main/src/test/java/com/facebook/presto/sql/planner/TestPredicatePushdown.java", "diffHunk": "@@ -53,6 +54,15 @@\n public class TestPredicatePushdown\n         extends BasePlanTest\n {\n+    public TestPredicatePushdown()\n+    {\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUzMTQwNw=="}, "originalCommit": {"oid": "4d051eb86709c45c21ff76b7e35ca8f8c12c16f8"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTE3OTU5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/com/facebook/presto/sql/planner/TestPredicatePushdownWithDynamicFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjo0MzowOVrOG7Awkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjo0MzowOVrOG7Awkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUzMTYwMw==", "bodyText": "one param per line", "url": "https://github.com/prestodb/presto/pull/14925#discussion_r464531603", "createdAt": "2020-08-03T16:43:09Z", "author": {"login": "highker"}, "path": "presto-main/src/test/java/com/facebook/presto/sql/planner/TestPredicatePushdownWithDynamicFilter.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.planner;\n+\n+import com.facebook.presto.common.function.OperatorType;\n+import com.facebook.presto.sql.planner.assertions.BasePlanTest;\n+import com.facebook.presto.sql.planner.assertions.PlanMatchPattern;\n+import com.facebook.presto.sql.planner.iterative.rule.test.RuleTester;\n+import com.facebook.presto.sql.planner.optimizations.PlanOptimizer;\n+import com.facebook.presto.sql.planner.optimizations.PredicatePushDown;\n+import com.facebook.presto.sql.planner.plan.ExchangeNode;\n+import com.facebook.presto.sql.planner.plan.JoinNode.EquiJoinClause;\n+import com.facebook.presto.sql.planner.plan.WindowNode;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.SystemSessionProperties.ENABLE_DYNAMIC_FILTERING;\n+import static com.facebook.presto.common.type.IntegerType.INTEGER;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.any;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.anyTree;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.assignUniqueId;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.equiJoinClause;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.exchange;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.expression;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.filter;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.join;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.node;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.output;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.project;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.semiJoin;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.tableScan;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.values;\n+import static com.facebook.presto.sql.planner.plan.JoinNode.DistributionType.PARTITIONED;\n+import static com.facebook.presto.sql.planner.plan.JoinNode.DistributionType.REPLICATED;\n+import static com.facebook.presto.sql.planner.plan.JoinNode.Type.INNER;\n+import static com.facebook.presto.sql.planner.plan.JoinNode.Type.LEFT;\n+import static com.facebook.presto.sql.relational.Expressions.constant;\n+\n+public class TestPredicatePushdownWithDynamicFilter\n+        extends TestPredicatePushdown\n+{\n+    TestPredicatePushdownWithDynamicFilter()\n+    {\n+        super(ImmutableMap.of(ENABLE_DYNAMIC_FILTERING, \"true\"));\n+    }\n+\n+    @Test\n+    @Override\n+    public void testNonStraddlingJoinExpression()\n+    {\n+        assertPlan(\"SELECT * FROM orders JOIN lineitem ON orders.orderkey = lineitem.orderkey AND cast(lineitem.linenumber AS varchar) = '2'\",\n+                anyTree(\n+                        join(INNER, ImmutableList.of(equiJoinClause(\"ORDERS_OK\", \"LINEITEM_OK\")),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d051eb86709c45c21ff76b7e35ca8f8c12c16f8"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTIzMTQyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/sanity/DynamicFiltersChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjo1ODowM1rOG7BQDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjo1ODowM1rOG7BQDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUzOTY2MQ==", "bodyText": "one param per line", "url": "https://github.com/prestodb/presto/pull/14925#discussion_r464539661", "createdAt": "2020-08-03T16:58:03Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/sanity/DynamicFiltersChecker.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.planner.sanity;\n+\n+import com.facebook.presto.Session;\n+import com.facebook.presto.execution.warnings.WarningCollector;\n+import com.facebook.presto.expressions.DynamicFilters.DynamicFilterPlaceholder;\n+import com.facebook.presto.metadata.Metadata;\n+import com.facebook.presto.spi.plan.FilterNode;\n+import com.facebook.presto.spi.plan.PlanNode;\n+import com.facebook.presto.sql.parser.SqlParser;\n+import com.facebook.presto.sql.planner.TypeProvider;\n+import com.facebook.presto.sql.planner.plan.InternalPlanVisitor;\n+import com.facebook.presto.sql.planner.plan.JoinNode;\n+import com.facebook.presto.sql.planner.plan.OutputNode;\n+import com.google.common.collect.ImmutableSet;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import static com.facebook.presto.expressions.DynamicFilters.extractDynamicFilters;\n+import static com.google.common.base.Verify.verify;\n+import static com.google.common.collect.Sets.difference;\n+import static com.google.common.collect.Sets.intersection;\n+\n+/**\n+ * When dynamic filter assignments are present on a Join node, they should be consumed by a Filter node on it's probe side\n+ */\n+public class DynamicFiltersChecker\n+        implements PlanChecker.Checker\n+{\n+    @Override\n+    public void validate(PlanNode plan, Session session, Metadata metadata, SqlParser sqlParser, TypeProvider types, WarningCollector warningCollector)\n+    {\n+        plan.accept(new InternalPlanVisitor<Set<String>, Void>()\n+        {\n+            @Override\n+            public Set<String> visitPlan(PlanNode node, Void context)\n+            {\n+                Set<String> consumed = new HashSet<>();\n+                for (PlanNode source : node.getSources()) {\n+                    consumed.addAll(source.accept(this, context));\n+                }\n+                return consumed;\n+            }\n+\n+            @Override\n+            public Set<String> visitOutput(OutputNode node, Void context)\n+            {\n+                Set<String> unmatched = visitPlan(node, context);\n+                verify(unmatched.isEmpty(), \"All consumed dynamic filters could not be matched with a join.\");\n+                return unmatched;\n+            }\n+\n+            @Override\n+            public Set<String> visitJoin(JoinNode node, Void context)\n+            {\n+                Set<String> currentJoinDynamicFilters = node.getDynamicFilters().keySet();\n+                Set<String> consumedProbeSide = node.getLeft().accept(this, context);\n+                verify(difference(currentJoinDynamicFilters, consumedProbeSide).isEmpty(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d0855b69eba23af25ea77682f4c3cb2061668c3"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2211, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}