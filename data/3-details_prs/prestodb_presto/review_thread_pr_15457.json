{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIzNTk5NTkx", "number": 15457, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMDo1MzoyOFrOFCEHZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMDo1Nzo0OFrOFCEMNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NzA4OTAxOnYy", "diffSide": "RIGHT", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/SqlFunctionExecutors.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMDo1MzoyOFrOIBBxSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMDo1MzoyOFrOIBBxSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk0ODQ5MA==", "bodyText": "Is it possible to inject Optional? If it is not possible to inject Optional could we inject it via a setter and make the field Optional at least?", "url": "https://github.com/prestodb/presto/pull/15457#discussion_r537948490", "createdAt": "2020-12-08T00:53:28Z", "author": {"login": "arhimondr"}, "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/SqlFunctionExecutors.java", "diffHunk": "@@ -41,7 +42,7 @@\n     public SqlFunctionExecutors(Map<Language, FunctionImplementationType> supportedLanguages, ThriftSqlFunctionExecutor thriftSqlFunctionExecutor)\n     {\n         this.supportedLanguages = requireNonNull(supportedLanguages, \"supportedLanguages is null\");\n-        this.thriftSqlFunctionExecutor = requireNonNull(thriftSqlFunctionExecutor, \"thriftSqlFunctionExecutor is null\");\n+        this.thriftSqlFunctionExecutor = thriftSqlFunctionExecutor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5566a4752e3a7d4cd22d26e60613b42b28d78a94"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NzA5MTI2OnYy", "diffSide": "RIGHT", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/thrift/ThriftSqlFunctionExecutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMDo1NDoyMVrOIBBymg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMDo1NDoyMVrOIBBymg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk0ODgyNg==", "bodyText": "PagesSerde is not thread safe", "url": "https://github.com/prestodb/presto/pull/15457#discussion_r537948826", "createdAt": "2020-12-08T00:54:21Z", "author": {"login": "arhimondr"}, "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/thrift/ThriftSqlFunctionExecutor.java", "diffHunk": "@@ -17,49 +17,60 @@\n import com.facebook.drift.client.DriftClient;\n import com.facebook.presto.common.Page;\n import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.BlockEncodingSerde;\n import com.facebook.presto.common.type.Type;\n import com.facebook.presto.common.type.TypeSignature;\n import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.function.RoutineCharacteristics.Language;\n import com.facebook.presto.spi.function.SqlFunctionHandle;\n import com.facebook.presto.spi.function.SqlFunctionId;\n import com.facebook.presto.spi.function.ThriftScalarFunctionImplementation;\n+import com.facebook.presto.spi.page.PagesSerde;\n import com.facebook.presto.thrift.api.datatypes.PrestoThriftBlock;\n import com.facebook.presto.thrift.api.udf.ThriftFunctionHandle;\n+import com.facebook.presto.thrift.api.udf.ThriftUdfPage;\n+import com.facebook.presto.thrift.api.udf.ThriftUdfPageFormat;\n+import com.facebook.presto.thrift.api.udf.ThriftUdfResult;\n import com.facebook.presto.thrift.api.udf.ThriftUdfService;\n import com.facebook.presto.thrift.api.udf.ThriftUdfServiceException;\n import com.google.common.collect.ImmutableList;\n import com.google.inject.Inject;\n \n import java.util.List;\n+import java.util.Map;\n import java.util.Optional;\n import java.util.concurrent.CompletableFuture;\n \n import static com.facebook.airlift.concurrent.MoreFutures.toCompletableFuture;\n+import static com.facebook.presto.common.Page.wrapBlocksWithoutCopy;\n import static com.facebook.presto.spi.StandardErrorCode.GENERIC_INTERNAL_ERROR;\n+import static com.facebook.presto.thrift.api.udf.ThriftUdfPage.prestoPage;\n import static com.facebook.presto.thrift.api.udf.ThriftUdfPage.thriftPage;\n import static com.google.common.collect.ImmutableList.toImmutableList;\n import static com.google.common.collect.Iterables.getOnlyElement;\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n \n public class ThriftSqlFunctionExecutor\n {\n     private final DriftClient<ThriftUdfService> thriftUdfClient;\n+    private final PagesSerde pagesSerde;\n+    private final Map<Language, ThriftSqlFunctionExecutionConfig> executionConfigs;\n \n     @Inject\n-    public ThriftSqlFunctionExecutor(DriftClient<ThriftUdfService> thriftUdfClient)\n+    public ThriftSqlFunctionExecutor(DriftClient<ThriftUdfService> thriftUdfClient, BlockEncodingSerde blockEncodingSerde, Map<Language, ThriftSqlFunctionExecutionConfig> executionConfigs)\n     {\n-        this.thriftUdfClient = thriftUdfClient;\n+        this.thriftUdfClient = requireNonNull(thriftUdfClient, \"thriftUdfClient is null\");\n+        this.pagesSerde = new PagesSerde(requireNonNull(blockEncodingSerde, \"blockEncodingSerde is null\"), Optional.empty(), Optional.empty(), Optional.empty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5566a4752e3a7d4cd22d26e60613b42b28d78a94"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NzA5MzQyOnYy", "diffSide": "RIGHT", "path": "presto-thrift-api/src/main/java/com/facebook/presto/thrift/api/udf/ThriftUdfPage.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMDo1NTowMlrOIBBzvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMzowMDoyMlrOIDm77Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk0OTExOA==", "bodyText": "It should be possible to make it Optional", "url": "https://github.com/prestodb/presto/pull/15457#discussion_r537949118", "createdAt": "2020-12-08T00:55:02Z", "author": {"login": "arhimondr"}, "path": "presto-thrift-api/src/main/java/com/facebook/presto/thrift/api/udf/ThriftUdfPage.java", "diffHunk": "@@ -24,21 +25,25 @@\n import java.util.Objects;\n \n import static com.facebook.drift.annotations.ThriftField.Requiredness.OPTIONAL;\n+import static com.facebook.presto.thrift.api.udf.ThriftUdfPageFormat.PRESTO_SERIALIZED;\n import static com.facebook.presto.thrift.api.udf.ThriftUdfPageFormat.PRESTO_THRIFT;\n \n @ThriftStruct(\"UdfPage\")\n public class ThriftUdfPage\n {\n     private final ThriftUdfPageFormat pageFormat;\n     private final List<PrestoThriftBlock> thriftBlocks;\n+    private final ThriftSerializedPage prestoPage;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5566a4752e3a7d4cd22d26e60613b42b28d78a94"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY1NDU3Mw==", "bodyText": "I didn't see any of the thrift structs using Optional though.", "url": "https://github.com/prestodb/presto/pull/15457#discussion_r540654573", "createdAt": "2020-12-11T03:00:22Z", "author": {"login": "rongrong"}, "path": "presto-thrift-api/src/main/java/com/facebook/presto/thrift/api/udf/ThriftUdfPage.java", "diffHunk": "@@ -24,21 +25,25 @@\n import java.util.Objects;\n \n import static com.facebook.drift.annotations.ThriftField.Requiredness.OPTIONAL;\n+import static com.facebook.presto.thrift.api.udf.ThriftUdfPageFormat.PRESTO_SERIALIZED;\n import static com.facebook.presto.thrift.api.udf.ThriftUdfPageFormat.PRESTO_THRIFT;\n \n @ThriftStruct(\"UdfPage\")\n public class ThriftUdfPage\n {\n     private final ThriftUdfPageFormat pageFormat;\n     private final List<PrestoThriftBlock> thriftBlocks;\n+    private final ThriftSerializedPage prestoPage;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk0OTExOA=="}, "originalCommit": {"oid": "5566a4752e3a7d4cd22d26e60613b42b28d78a94"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NzA5MzYzOnYy", "diffSide": "RIGHT", "path": "presto-thrift-api/src/main/java/com/facebook/presto/thrift/api/udf/ThriftUdfPage.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMDo1NTowOFrOIBBz3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMDo1NTowOFrOIBBz3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk0OTE0OA==", "bodyText": "Ditto", "url": "https://github.com/prestodb/presto/pull/15457#discussion_r537949148", "createdAt": "2020-12-08T00:55:08Z", "author": {"login": "arhimondr"}, "path": "presto-thrift-api/src/main/java/com/facebook/presto/thrift/api/udf/ThriftUdfPage.java", "diffHunk": "@@ -54,6 +59,13 @@ public ThriftUdfPageFormat getPageFormat()\n         return thriftBlocks;\n     }\n \n+    @Nullable\n+    @ThriftField(value = 3, requiredness = OPTIONAL)\n+    public ThriftSerializedPage getPrestoPage()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5566a4752e3a7d4cd22d26e60613b42b28d78a94"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NzA5NTk0OnYy", "diffSide": "RIGHT", "path": "presto-thrift-testing-udf-server/src/main/java/com/facebook/presto/udf/thrift/EchoFirstInputThriftUdfService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMDo1NjowMFrOIBB1Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMDo1NjowMFrOIBB1Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk0OTQ4Ng==", "bodyText": "PagesSerde is not thread safe", "url": "https://github.com/prestodb/presto/pull/15457#discussion_r537949486", "createdAt": "2020-12-08T00:56:00Z", "author": {"login": "arhimondr"}, "path": "presto-thrift-testing-udf-server/src/main/java/com/facebook/presto/udf/thrift/EchoFirstInputThriftUdfService.java", "diffHunk": "@@ -13,35 +13,54 @@\n  */\n package com.facebook.presto.udf.thrift;\n \n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.common.block.BlockEncodingSerde;\n+import com.facebook.presto.spi.page.PagesSerde;\n import com.facebook.presto.thrift.api.udf.ThriftFunctionHandle;\n import com.facebook.presto.thrift.api.udf.ThriftUdfPage;\n import com.facebook.presto.thrift.api.udf.ThriftUdfResult;\n import com.facebook.presto.thrift.api.udf.ThriftUdfService;\n import com.facebook.presto.thrift.api.udf.ThriftUdfStats;\n import com.google.common.collect.ImmutableList;\n import com.google.common.util.concurrent.ListenableFuture;\n-import com.google.common.util.concurrent.ListeningExecutorService;\n+import com.google.inject.Inject;\n \n-import static com.facebook.airlift.concurrent.Threads.threadsNamed;\n-import static com.facebook.presto.thrift.api.udf.ThriftUdfPageFormat.PRESTO_THRIFT;\n-import static com.google.common.base.Preconditions.checkArgument;\n-import static com.google.common.util.concurrent.MoreExecutors.listeningDecorator;\n-import static java.util.concurrent.Executors.newFixedThreadPool;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.thrift.api.udf.ThriftUdfPage.prestoPage;\n+import static com.facebook.presto.thrift.api.udf.ThriftUdfPage.thriftPage;\n+import static com.google.common.util.concurrent.Futures.immediateFuture;\n \n public class EchoFirstInputThriftUdfService\n         implements ThriftUdfService\n {\n-    private final ListeningExecutorService executor = listeningDecorator(\n-            newFixedThreadPool(Runtime.getRuntime().availableProcessors(), threadsNamed(\"udf-thrift-%s\")));\n+    private final PagesSerde pagesSerde;\n+\n+    @Inject\n+    public EchoFirstInputThriftUdfService(BlockEncodingSerde blockEncodingSerde)\n+    {\n+        this.pagesSerde = new PagesSerde(blockEncodingSerde, Optional.empty(), Optional.empty(), Optional.empty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5566a4752e3a7d4cd22d26e60613b42b28d78a94"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NzEwMTMyOnYy", "diffSide": "RIGHT", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/thrift/SimpleAddressThriftSqlFunctionExecutionModule.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMDo1Nzo0OFrOIBB38g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQwMjozNTo1MFrOIQDnDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk1MDE5NA==", "bodyText": "question: Is this going to bind a new instance? Should we reuse the instance bound and initialized in the presto-main? Connectors are free to register custom block serializer. We should make sure that for function namespace the same instance, where the custom serializers are bound, is used", "url": "https://github.com/prestodb/presto/pull/15457#discussion_r537950194", "createdAt": "2020-12-08T00:57:48Z", "author": {"login": "arhimondr"}, "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/thrift/SimpleAddressThriftSqlFunctionExecutionModule.java", "diffHunk": "@@ -41,6 +43,8 @@ public SimpleAddressThriftSqlFunctionExecutionModule(Map<Language, SimpleAddress\n     public void configure(Binder binder)\n     {\n         binder.bind(ThriftSqlFunctionExecutor.class).in(SINGLETON);\n+        binder.bind(BlockEncodingManager.class).in(SINGLETON);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5566a4752e3a7d4cd22d26e60613b42b28d78a94"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY1MzkxNQ==", "bodyText": "I think this binds the singleton instance of the class so it should be the same one bound to FunctionAndTypeManager. But I don't know guice well. Anyone I should reach out for confirmation?", "url": "https://github.com/prestodb/presto/pull/15457#discussion_r540653915", "createdAt": "2020-12-11T02:58:29Z", "author": {"login": "rongrong"}, "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/thrift/SimpleAddressThriftSqlFunctionExecutionModule.java", "diffHunk": "@@ -41,6 +43,8 @@ public SimpleAddressThriftSqlFunctionExecutionModule(Map<Language, SimpleAddress\n     public void configure(Binder binder)\n     {\n         binder.bind(ThriftSqlFunctionExecutor.class).in(SINGLETON);\n+        binder.bind(BlockEncodingManager.class).in(SINGLETON);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk1MDE5NA=="}, "originalCommit": {"oid": "5566a4752e3a7d4cd22d26e60613b42b28d78a94"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQwNjI1OQ==", "bodyText": "This will be a different object, because the module is eventually installed by classes like MySqlFunctionNamespaceManagerFactory, which creates a new Bootstrap object. Singleton only applies to a same injector, instances are different across injectors.\nIn order to use an existing BlockEncodingManager object, we'll need to modify FunctionNamespaceManagerFactory.create, so that the object can gets passed in and binded.", "url": "https://github.com/prestodb/presto/pull/15457#discussion_r541406259", "createdAt": "2020-12-11T23:24:20Z", "author": {"login": "caithagoras"}, "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/thrift/SimpleAddressThriftSqlFunctionExecutionModule.java", "diffHunk": "@@ -41,6 +43,8 @@ public SimpleAddressThriftSqlFunctionExecutionModule(Map<Language, SimpleAddress\n     public void configure(Binder binder)\n     {\n         binder.bind(ThriftSqlFunctionExecutor.class).in(SINGLETON);\n+        binder.bind(BlockEncodingManager.class).in(SINGLETON);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk1MDE5NA=="}, "originalCommit": {"oid": "5566a4752e3a7d4cd22d26e60613b42b28d78a94"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ5NDI1Mw==", "bodyText": "I'll do a follow up PR to fix this then. Thanks!", "url": "https://github.com/prestodb/presto/pull/15457#discussion_r541494253", "createdAt": "2020-12-12T04:02:08Z", "author": {"login": "rongrong"}, "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/thrift/SimpleAddressThriftSqlFunctionExecutionModule.java", "diffHunk": "@@ -41,6 +43,8 @@ public SimpleAddressThriftSqlFunctionExecutionModule(Map<Language, SimpleAddress\n     public void configure(Binder binder)\n     {\n         binder.bind(ThriftSqlFunctionExecutor.class).in(SINGLETON);\n+        binder.bind(BlockEncodingManager.class).in(SINGLETON);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk1MDE5NA=="}, "originalCommit": {"oid": "5566a4752e3a7d4cd22d26e60613b42b28d78a94"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzcwNzI3Nw==", "bodyText": "Fixed in #15595", "url": "https://github.com/prestodb/presto/pull/15457#discussion_r553707277", "createdAt": "2021-01-08T02:35:50Z", "author": {"login": "rongrong"}, "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/execution/thrift/SimpleAddressThriftSqlFunctionExecutionModule.java", "diffHunk": "@@ -41,6 +43,8 @@ public SimpleAddressThriftSqlFunctionExecutionModule(Map<Language, SimpleAddress\n     public void configure(Binder binder)\n     {\n         binder.bind(ThriftSqlFunctionExecutor.class).in(SINGLETON);\n+        binder.bind(BlockEncodingManager.class).in(SINGLETON);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk1MDE5NA=="}, "originalCommit": {"oid": "5566a4752e3a7d4cd22d26e60613b42b28d78a94"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3411, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}