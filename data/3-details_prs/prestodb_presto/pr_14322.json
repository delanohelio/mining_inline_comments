{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2ODU3NjQ2", "number": 14322, "title": "Adding more support for  Pinot types to Presto type conversion", "bodyText": "== RELEASE NOTES ==\n\nPinot Connector Changes\n* Support mapping Pinot `BYTES` data type to Presto `VARBINARY` type\n* Support mapping Pinot time fields with days since epoch value to Presto `DATE` type\n* Support mapping Pinot time fields with milliseconds since epoch value to Presto `TIMESTAMP` type\n* Put Pinot Field type in to column comment field shown as DIMENSTION, METRIC, TIME, DATETIME, to provide more information.\n* Adding configs 'pinot.infer-date-type-in-schema' and 'pinot.infer-timestamp-type-in-schema' to switch on/off the type conversion. Default is OFF.", "createdAt": "2020-04-01T09:00:13Z", "url": "https://github.com/prestodb/presto/pull/14322", "merged": true, "mergeCommit": {"oid": "a1d0999c83b193f305a15cb5a5127dd17496c197"}, "closed": true, "closedAt": "2020-04-03T02:49:06Z", "author": {"login": "xiangfu0"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcTUDaGABqjMxODY5NTg5MzU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcT2ySvgBqjMxOTQ1MTk1Mzc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6c0657a17f33b7e4af4aa28772812aebe5b7283c", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/6c0657a17f33b7e4af4aa28772812aebe5b7283c", "committedDate": "2020-04-01T08:56:12Z", "message": "Adding support for Date and Timestamp data type support for Pinot"}, "afterCommit": {"oid": "ceaf2b48df4b7ddb951d0151259939ae7a97a618", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/ceaf2b48df4b7ddb951d0151259939ae7a97a618", "committedDate": "2020-04-01T09:12:12Z", "message": "Adding support for Date and Timestamp data type support for Pinot"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ceaf2b48df4b7ddb951d0151259939ae7a97a618", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/ceaf2b48df4b7ddb951d0151259939ae7a97a618", "committedDate": "2020-04-01T09:12:12Z", "message": "Adding support for Date and Timestamp data type support for Pinot"}, "afterCommit": {"oid": "69dd97561f6c67f89d821e3f0f55e02eec69cf2f", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/69dd97561f6c67f89d821e3f0f55e02eec69cf2f", "committedDate": "2020-04-01T09:17:40Z", "message": "Adding support for Date and Timestamp data type support for Pinot"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1ODUzNjc3", "url": "https://github.com/prestodb/presto/pull/14322#pullrequestreview-385853677", "createdAt": "2020-04-01T18:43:46Z", "commit": {"oid": "69dd97561f6c67f89d821e3f0f55e02eec69cf2f"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxODo0Mzo0NlrOF_N11w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxODo0NzoyOFrOF_N-YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgzMTM4Mw==", "bodyText": "Maybe this can go outside the switch block ?", "url": "https://github.com/prestodb/presto/pull/14322#discussion_r401831383", "createdAt": "2020-04-01T18:43:46Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotColumnUtils.java", "diffHunk": "@@ -39,14 +51,60 @@ private PinotColumnUtils()\n     {\n         return pinotTableSchema.getColumnNames().stream()\n                 .filter(columnName -> !columnName.startsWith(\"$\")) // Hidden columns starts with \"$\", ignore them as we can't use them in PQL\n-                .map(columnName -> new PinotColumn(columnName, getPrestoTypeFromPinotType(pinotTableSchema.getFieldSpecFor(columnName))))\n+                .map(columnName -> new PinotColumn(columnName, getPrestoTypeFromPinotType(pinotTableSchema.getFieldSpecFor(columnName)), isNullableColumnFromPinotType(pinotTableSchema.getFieldSpecFor(columnName)),\n+                        getCommentFromPinotType(pinotTableSchema.getFieldSpecFor(columnName))))\n                 .collect(toImmutableList());\n     }\n \n+    private static String getCommentFromPinotType(FieldSpec field)\n+    {\n+        return field.getFieldType().name();\n+    }\n+\n+    private static boolean isNullableColumnFromPinotType(FieldSpec field)\n+    {\n+        return DEFAULT_PINOT_COLUMN_IS_NULLABLE;\n+    }\n+\n     public static Type getPrestoTypeFromPinotType(FieldSpec field)\n     {\n         if (field.isSingleValueField()) {\n-            return getPrestoTypeFromPinotType(field.getDataType());\n+            switch (field.getFieldType()) {\n+                case TIME:\n+                    TimeFieldSpec timeFieldSpec = (TimeFieldSpec) field;\n+                    TimeGranularitySpec outSpec = timeFieldSpec.getOutgoingGranularitySpec();\n+                    if (outSpec != null) {\n+                        if (outSpec.getTimeFormat().equalsIgnoreCase(TimeGranularitySpec.TimeFormat.EPOCH.name())) {\n+                            if ((TimeUnit.DAYS == outSpec.getTimeType()) && (outSpec.getTimeUnitSize() == 1)) {\n+                                return DateType.DATE;\n+                            }\n+                            if ((TimeUnit.MILLISECONDS == outSpec.getTimeType()) && (outSpec.getTimeUnitSize() == 1)) {\n+                                return TimestampType.TIMESTAMP;\n+                            }\n+                        }\n+                    }\n+                    else {\n+                        TimeGranularitySpec inSpec = timeFieldSpec.getIncomingGranularitySpec();\n+                        if ((TimeUnit.DAYS == inSpec.getTimeType()) && (inSpec.getTimeUnitSize() == 1)) {\n+                            return DateType.DATE;\n+                        }\n+                        if ((TimeUnit.MILLISECONDS == inSpec.getTimeType()) && (inSpec.getTimeUnitSize() == 1)) {\n+                            return TimestampType.TIMESTAMP;\n+                        }\n+                    }\n+                    return getPrestoTypeFromPinotType(field.getDataType());\n+                case DATE_TIME:\n+                    DateTimeFieldSpec dateTimeFieldSpec = (DateTimeFieldSpec) field;\n+                    if (dateTimeFieldSpec.getFormat().equalsIgnoreCase(DAYS_SINCE_EPOCH_TIME_FORMAT)) {\n+                        return DateType.DATE;\n+                    }\n+                    if (dateTimeFieldSpec.getFormat().equalsIgnoreCase(MILLISECONDS_SINCE_EPOCH_TIME_FORMAT)) {\n+                        return TimestampType.TIMESTAMP;\n+                    }\n+                case DIMENSION:\n+                case METRIC:\n+                    return getPrestoTypeFromPinotType(field.getDataType());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69dd97561f6c67f89d821e3f0f55e02eec69cf2f"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgzMjIzNw==", "bodyText": "If we don't match the constraints above, should this be a bug ? Should we fail or should we continue to treat a time/date as an int ?", "url": "https://github.com/prestodb/presto/pull/14322#discussion_r401832237", "createdAt": "2020-04-01T18:45:12Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotColumnUtils.java", "diffHunk": "@@ -39,14 +51,60 @@ private PinotColumnUtils()\n     {\n         return pinotTableSchema.getColumnNames().stream()\n                 .filter(columnName -> !columnName.startsWith(\"$\")) // Hidden columns starts with \"$\", ignore them as we can't use them in PQL\n-                .map(columnName -> new PinotColumn(columnName, getPrestoTypeFromPinotType(pinotTableSchema.getFieldSpecFor(columnName))))\n+                .map(columnName -> new PinotColumn(columnName, getPrestoTypeFromPinotType(pinotTableSchema.getFieldSpecFor(columnName)), isNullableColumnFromPinotType(pinotTableSchema.getFieldSpecFor(columnName)),\n+                        getCommentFromPinotType(pinotTableSchema.getFieldSpecFor(columnName))))\n                 .collect(toImmutableList());\n     }\n \n+    private static String getCommentFromPinotType(FieldSpec field)\n+    {\n+        return field.getFieldType().name();\n+    }\n+\n+    private static boolean isNullableColumnFromPinotType(FieldSpec field)\n+    {\n+        return DEFAULT_PINOT_COLUMN_IS_NULLABLE;\n+    }\n+\n     public static Type getPrestoTypeFromPinotType(FieldSpec field)\n     {\n         if (field.isSingleValueField()) {\n-            return getPrestoTypeFromPinotType(field.getDataType());\n+            switch (field.getFieldType()) {\n+                case TIME:\n+                    TimeFieldSpec timeFieldSpec = (TimeFieldSpec) field;\n+                    TimeGranularitySpec outSpec = timeFieldSpec.getOutgoingGranularitySpec();\n+                    if (outSpec != null) {\n+                        if (outSpec.getTimeFormat().equalsIgnoreCase(TimeGranularitySpec.TimeFormat.EPOCH.name())) {\n+                            if ((TimeUnit.DAYS == outSpec.getTimeType()) && (outSpec.getTimeUnitSize() == 1)) {\n+                                return DateType.DATE;\n+                            }\n+                            if ((TimeUnit.MILLISECONDS == outSpec.getTimeType()) && (outSpec.getTimeUnitSize() == 1)) {\n+                                return TimestampType.TIMESTAMP;\n+                            }\n+                        }\n+                    }\n+                    else {\n+                        TimeGranularitySpec inSpec = timeFieldSpec.getIncomingGranularitySpec();\n+                        if ((TimeUnit.DAYS == inSpec.getTimeType()) && (inSpec.getTimeUnitSize() == 1)) {\n+                            return DateType.DATE;\n+                        }\n+                        if ((TimeUnit.MILLISECONDS == inSpec.getTimeType()) && (inSpec.getTimeUnitSize() == 1)) {\n+                            return TimestampType.TIMESTAMP;\n+                        }\n+                    }\n+                    return getPrestoTypeFromPinotType(field.getDataType());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69dd97561f6c67f89d821e3f0f55e02eec69cf2f"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgzMzU2OA==", "bodyText": "I am missing how the \"comment\" and \"nullable\" flag are being used eventually ? I didn't catch that.", "url": "https://github.com/prestodb/presto/pull/14322#discussion_r401833568", "createdAt": "2020-04-01T18:47:28Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotColumnUtils.java", "diffHunk": "@@ -39,14 +51,60 @@ private PinotColumnUtils()\n     {\n         return pinotTableSchema.getColumnNames().stream()\n                 .filter(columnName -> !columnName.startsWith(\"$\")) // Hidden columns starts with \"$\", ignore them as we can't use them in PQL\n-                .map(columnName -> new PinotColumn(columnName, getPrestoTypeFromPinotType(pinotTableSchema.getFieldSpecFor(columnName))))\n+                .map(columnName -> new PinotColumn(columnName, getPrestoTypeFromPinotType(pinotTableSchema.getFieldSpecFor(columnName)), isNullableColumnFromPinotType(pinotTableSchema.getFieldSpecFor(columnName)),\n+                        getCommentFromPinotType(pinotTableSchema.getFieldSpecFor(columnName))))\n                 .collect(toImmutableList());\n     }\n \n+    private static String getCommentFromPinotType(FieldSpec field)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69dd97561f6c67f89d821e3f0f55e02eec69cf2f"}, "originalPosition": 45}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "69dd97561f6c67f89d821e3f0f55e02eec69cf2f", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/69dd97561f6c67f89d821e3f0f55e02eec69cf2f", "committedDate": "2020-04-01T09:17:40Z", "message": "Adding support for Date and Timestamp data type support for Pinot"}, "afterCommit": {"oid": "8401f4f02911f32a907f5b9067035572d3937ee0", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/8401f4f02911f32a907f5b9067035572d3937ee0", "committedDate": "2020-04-01T18:55:30Z", "message": "Adding support for Date and Timestamp data type support for Pinot"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1OTAyNTQ1", "url": "https://github.com/prestodb/presto/pull/14322#pullrequestreview-385902545", "createdAt": "2020-04-01T19:54:45Z", "commit": {"oid": "8401f4f02911f32a907f5b9067035572d3937ee0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxOTo1NDo0NVrOF_QR9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxOTo1NDo0NVrOF_QR9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg3MTM1MQ==", "bodyText": "I am wondering if there should be a config flag to guard this behavior ? It may break Uber's use case. I hate adding extra flags but I think it would help with the rollout: the schema perceived by a user would now change post a rollout of this diff.", "url": "https://github.com/prestodb/presto/pull/14322#discussion_r401871351", "createdAt": "2020-04-01T19:54:45Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotColumnUtils.java", "diffHunk": "@@ -39,13 +51,57 @@ private PinotColumnUtils()\n     {\n         return pinotTableSchema.getColumnNames().stream()\n                 .filter(columnName -> !columnName.startsWith(\"$\")) // Hidden columns starts with \"$\", ignore them as we can't use them in PQL\n-                .map(columnName -> new PinotColumn(columnName, getPrestoTypeFromPinotType(pinotTableSchema.getFieldSpecFor(columnName))))\n+                .map(columnName -> new PinotColumn(columnName, getPrestoTypeFromPinotType(pinotTableSchema.getFieldSpecFor(columnName)), isNullableColumnFromPinotType(pinotTableSchema.getFieldSpecFor(columnName)),\n+                        getCommentFromPinotType(pinotTableSchema.getFieldSpecFor(columnName))))\n                 .collect(toImmutableList());\n     }\n \n+    private static String getCommentFromPinotType(FieldSpec field)\n+    {\n+        return field.getFieldType().name();\n+    }\n+\n+    private static boolean isNullableColumnFromPinotType(FieldSpec field)\n+    {\n+        return DEFAULT_PINOT_COLUMN_IS_NULLABLE;\n+    }\n+\n     public static Type getPrestoTypeFromPinotType(FieldSpec field)\n     {\n         if (field.isSingleValueField()) {\n+            switch (field.getFieldType()) {\n+                case TIME:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8401f4f02911f32a907f5b9067035572d3937ee0"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1OTYwNjM1", "url": "https://github.com/prestodb/presto/pull/14322#pullrequestreview-385960635", "createdAt": "2020-04-01T21:25:32Z", "commit": {"oid": "4077b533c4cb2080460ca6aea19a2968eb2b2176"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MDg3MTcx", "url": "https://github.com/prestodb/presto/pull/14322#pullrequestreview-386087171", "createdAt": "2020-04-02T03:33:16Z", "commit": {"oid": "4077b533c4cb2080460ca6aea19a2968eb2b2176"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwMzozMzoxNlrOF_aI3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwMzozNjo0NlrOF_aMKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjAzMjg2Mw==", "bodyText": "all parameters in a single line, or each parameter in separate line", "url": "https://github.com/prestodb/presto/pull/14322#discussion_r402032863", "createdAt": "2020-04-02T03:33:16Z", "author": {"login": "zhenxiao"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotColumnUtils.java", "diffHunk": "@@ -15,37 +15,91 @@\n \n import com.facebook.presto.spi.type.BigintType;\n import com.facebook.presto.spi.type.BooleanType;\n+import com.facebook.presto.spi.type.DateType;\n import com.facebook.presto.spi.type.DoubleType;\n import com.facebook.presto.spi.type.IntegerType;\n+import com.facebook.presto.spi.type.TimestampType;\n import com.facebook.presto.spi.type.Type;\n+import com.facebook.presto.spi.type.VarbinaryType;\n import com.facebook.presto.spi.type.VarcharType;\n+import org.apache.pinot.common.data.DateTimeFieldSpec;\n import org.apache.pinot.common.data.FieldSpec;\n import org.apache.pinot.common.data.FieldSpec.DataType;\n import org.apache.pinot.common.data.Schema;\n+import org.apache.pinot.common.data.TimeFieldSpec;\n+import org.apache.pinot.common.data.TimeGranularitySpec;\n \n import java.util.List;\n import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n \n import static com.facebook.presto.pinot.PinotErrorCode.PINOT_UNSUPPORTED_COLUMN_TYPE;\n import static com.google.common.collect.ImmutableList.toImmutableList;\n \n public class PinotColumnUtils\n {\n+    private static final String DAYS_SINCE_EPOCH_TIME_FORMAT = \"1:DAYS:EPOCH\";\n+    private static final String MILLISECONDS_SINCE_EPOCH_TIME_FORMAT = \"1:MILLISECONDS:EPOCH\";\n+\n     private PinotColumnUtils()\n     {\n     }\n \n-    public static List<PinotColumn> getPinotColumnsForPinotSchema(Schema pinotTableSchema)\n+    public static List<PinotColumn> getPinotColumnsForPinotSchema(Schema pinotTableSchema, boolean inferDateType, boolean inferTimestampType)\n     {\n         return pinotTableSchema.getColumnNames().stream()\n                 .filter(columnName -> !columnName.startsWith(\"$\")) // Hidden columns starts with \"$\", ignore them as we can't use them in PQL\n-                .map(columnName -> new PinotColumn(columnName, getPrestoTypeFromPinotType(pinotTableSchema.getFieldSpecFor(columnName))))\n+                .map(columnName -> new PinotColumn(columnName, getPrestoTypeFromPinotType(pinotTableSchema.getFieldSpecFor(columnName), inferDateType, inferTimestampType), isNullableColumnFromPinotType(pinotTableSchema.getFieldSpecFor(columnName)),\n+                        getCommentFromPinotType(pinotTableSchema.getFieldSpecFor(columnName))))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4077b533c4cb2080460ca6aea19a2968eb2b2176"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjAzMzE3OQ==", "bodyText": "static import EPOCH", "url": "https://github.com/prestodb/presto/pull/14322#discussion_r402033179", "createdAt": "2020-04-02T03:34:26Z", "author": {"login": "zhenxiao"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotColumnUtils.java", "diffHunk": "@@ -15,37 +15,91 @@\n \n import com.facebook.presto.spi.type.BigintType;\n import com.facebook.presto.spi.type.BooleanType;\n+import com.facebook.presto.spi.type.DateType;\n import com.facebook.presto.spi.type.DoubleType;\n import com.facebook.presto.spi.type.IntegerType;\n+import com.facebook.presto.spi.type.TimestampType;\n import com.facebook.presto.spi.type.Type;\n+import com.facebook.presto.spi.type.VarbinaryType;\n import com.facebook.presto.spi.type.VarcharType;\n+import org.apache.pinot.common.data.DateTimeFieldSpec;\n import org.apache.pinot.common.data.FieldSpec;\n import org.apache.pinot.common.data.FieldSpec.DataType;\n import org.apache.pinot.common.data.Schema;\n+import org.apache.pinot.common.data.TimeFieldSpec;\n+import org.apache.pinot.common.data.TimeGranularitySpec;\n \n import java.util.List;\n import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n \n import static com.facebook.presto.pinot.PinotErrorCode.PINOT_UNSUPPORTED_COLUMN_TYPE;\n import static com.google.common.collect.ImmutableList.toImmutableList;\n \n public class PinotColumnUtils\n {\n+    private static final String DAYS_SINCE_EPOCH_TIME_FORMAT = \"1:DAYS:EPOCH\";\n+    private static final String MILLISECONDS_SINCE_EPOCH_TIME_FORMAT = \"1:MILLISECONDS:EPOCH\";\n+\n     private PinotColumnUtils()\n     {\n     }\n \n-    public static List<PinotColumn> getPinotColumnsForPinotSchema(Schema pinotTableSchema)\n+    public static List<PinotColumn> getPinotColumnsForPinotSchema(Schema pinotTableSchema, boolean inferDateType, boolean inferTimestampType)\n     {\n         return pinotTableSchema.getColumnNames().stream()\n                 .filter(columnName -> !columnName.startsWith(\"$\")) // Hidden columns starts with \"$\", ignore them as we can't use them in PQL\n-                .map(columnName -> new PinotColumn(columnName, getPrestoTypeFromPinotType(pinotTableSchema.getFieldSpecFor(columnName))))\n+                .map(columnName -> new PinotColumn(columnName, getPrestoTypeFromPinotType(pinotTableSchema.getFieldSpecFor(columnName), inferDateType, inferTimestampType), isNullableColumnFromPinotType(pinotTableSchema.getFieldSpecFor(columnName)),\n+                        getCommentFromPinotType(pinotTableSchema.getFieldSpecFor(columnName))))\n                 .collect(toImmutableList());\n     }\n \n-    public static Type getPrestoTypeFromPinotType(FieldSpec field)\n+    private static String getCommentFromPinotType(FieldSpec field)\n+    {\n+        return field.getFieldType().name();\n+    }\n+\n+    private static boolean isNullableColumnFromPinotType(FieldSpec field)\n+    {\n+        return false;\n+    }\n+\n+    public static Type getPrestoTypeFromPinotType(FieldSpec field, boolean inferDateType, boolean inferTimestampType)\n     {\n         if (field.isSingleValueField()) {\n+            switch (field.getFieldType()) {\n+                case TIME:\n+                    TimeFieldSpec timeFieldSpec = (TimeFieldSpec) field;\n+                    TimeGranularitySpec outSpec = timeFieldSpec.getOutgoingGranularitySpec();\n+                    if (outSpec != null) {\n+                        if (outSpec.getTimeFormat().equalsIgnoreCase(TimeGranularitySpec.TimeFormat.EPOCH.name())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4077b533c4cb2080460ca6aea19a2968eb2b2176"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjAzMzI3Mw==", "bodyText": "static import DAYS, MILLISECONDS", "url": "https://github.com/prestodb/presto/pull/14322#discussion_r402033273", "createdAt": "2020-04-02T03:34:47Z", "author": {"login": "zhenxiao"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotColumnUtils.java", "diffHunk": "@@ -15,37 +15,91 @@\n \n import com.facebook.presto.spi.type.BigintType;\n import com.facebook.presto.spi.type.BooleanType;\n+import com.facebook.presto.spi.type.DateType;\n import com.facebook.presto.spi.type.DoubleType;\n import com.facebook.presto.spi.type.IntegerType;\n+import com.facebook.presto.spi.type.TimestampType;\n import com.facebook.presto.spi.type.Type;\n+import com.facebook.presto.spi.type.VarbinaryType;\n import com.facebook.presto.spi.type.VarcharType;\n+import org.apache.pinot.common.data.DateTimeFieldSpec;\n import org.apache.pinot.common.data.FieldSpec;\n import org.apache.pinot.common.data.FieldSpec.DataType;\n import org.apache.pinot.common.data.Schema;\n+import org.apache.pinot.common.data.TimeFieldSpec;\n+import org.apache.pinot.common.data.TimeGranularitySpec;\n \n import java.util.List;\n import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n \n import static com.facebook.presto.pinot.PinotErrorCode.PINOT_UNSUPPORTED_COLUMN_TYPE;\n import static com.google.common.collect.ImmutableList.toImmutableList;\n \n public class PinotColumnUtils\n {\n+    private static final String DAYS_SINCE_EPOCH_TIME_FORMAT = \"1:DAYS:EPOCH\";\n+    private static final String MILLISECONDS_SINCE_EPOCH_TIME_FORMAT = \"1:MILLISECONDS:EPOCH\";\n+\n     private PinotColumnUtils()\n     {\n     }\n \n-    public static List<PinotColumn> getPinotColumnsForPinotSchema(Schema pinotTableSchema)\n+    public static List<PinotColumn> getPinotColumnsForPinotSchema(Schema pinotTableSchema, boolean inferDateType, boolean inferTimestampType)\n     {\n         return pinotTableSchema.getColumnNames().stream()\n                 .filter(columnName -> !columnName.startsWith(\"$\")) // Hidden columns starts with \"$\", ignore them as we can't use them in PQL\n-                .map(columnName -> new PinotColumn(columnName, getPrestoTypeFromPinotType(pinotTableSchema.getFieldSpecFor(columnName))))\n+                .map(columnName -> new PinotColumn(columnName, getPrestoTypeFromPinotType(pinotTableSchema.getFieldSpecFor(columnName), inferDateType, inferTimestampType), isNullableColumnFromPinotType(pinotTableSchema.getFieldSpecFor(columnName)),\n+                        getCommentFromPinotType(pinotTableSchema.getFieldSpecFor(columnName))))\n                 .collect(toImmutableList());\n     }\n \n-    public static Type getPrestoTypeFromPinotType(FieldSpec field)\n+    private static String getCommentFromPinotType(FieldSpec field)\n+    {\n+        return field.getFieldType().name();\n+    }\n+\n+    private static boolean isNullableColumnFromPinotType(FieldSpec field)\n+    {\n+        return false;\n+    }\n+\n+    public static Type getPrestoTypeFromPinotType(FieldSpec field, boolean inferDateType, boolean inferTimestampType)\n     {\n         if (field.isSingleValueField()) {\n+            switch (field.getFieldType()) {\n+                case TIME:\n+                    TimeFieldSpec timeFieldSpec = (TimeFieldSpec) field;\n+                    TimeGranularitySpec outSpec = timeFieldSpec.getOutgoingGranularitySpec();\n+                    if (outSpec != null) {\n+                        if (outSpec.getTimeFormat().equalsIgnoreCase(TimeGranularitySpec.TimeFormat.EPOCH.name())) {\n+                            if (inferDateType && (TimeUnit.DAYS == outSpec.getTimeType()) && (outSpec.getTimeUnitSize() == 1)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4077b533c4cb2080460ca6aea19a2968eb2b2176"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjAzMzcwNA==", "bodyText": "shall we add documentation in:\n./presto-docs/src/main/sphinx/connector/pinot.rst", "url": "https://github.com/prestodb/presto/pull/14322#discussion_r402033704", "createdAt": "2020-04-02T03:36:46Z", "author": {"login": "zhenxiao"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotConfig.java", "diffHunk": "@@ -416,4 +418,28 @@ public PinotConfig setNonAggregateLimitForBrokerQueries(int nonAggregateLimitFor\n         this.nonAggregateLimitForBrokerQueries = nonAggregateLimitForBrokerQueries;\n         return this;\n     }\n+\n+    public boolean isInferDateTypeInSchema()\n+    {\n+        return inferDateTypeInSchema;\n+    }\n+\n+    @Config(\"pinot.infer-date-type-in-schema\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4077b533c4cb2080460ca6aea19a2968eb2b2176"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MDA0NDEz", "url": "https://github.com/prestodb/presto/pull/14322#pullrequestreview-386004413", "createdAt": "2020-04-01T22:54:16Z", "commit": {"oid": "8401f4f02911f32a907f5b9067035572d3937ee0"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMjo1NDoxNlrOF_Vfug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNToxODowMlrOF_bmMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1Njc5NA==", "bodyText": "Use ImmutableMap.of()", "url": "https://github.com/prestodb/presto/pull/14322#discussion_r401956794", "createdAt": "2020-04-01T22:54:16Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotColumnMetadata.java", "diffHunk": "@@ -27,9 +28,9 @@\n     // We need to preserve the case sensitivity of the column, store it here as the super class stores the value after lower-casing it\n     private final String name;\n \n-    public PinotColumnMetadata(String name, Type type)\n+    public PinotColumnMetadata(String name, Type type, boolean inNullable, String comment)\n     {\n-        super(requireNonNull(name, \"name is null\"), requireNonNull(type, \"type is null\"));\n+        super(requireNonNull(name, \"name is null\"), requireNonNull(type, \"type is null\"), inNullable, comment, null, false, emptyMap());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8401f4f02911f32a907f5b9067035572d3937ee0"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA1NjE5OQ==", "bodyText": "column", "url": "https://github.com/prestodb/presto/pull/14322#discussion_r402056199", "createdAt": "2020-04-02T05:16:09Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/TestPinotColumnMetadata.java", "diffHunk": "@@ -0,0 +1,287 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.pinot;\n+\n+import com.facebook.presto.spi.type.DateType;\n+import com.facebook.presto.spi.type.DoubleType;\n+import com.facebook.presto.spi.type.TimestampType;\n+import com.facebook.presto.spi.type.Type;\n+import com.google.common.collect.ImmutableMap;\n+import org.apache.pinot.common.data.FieldSpec;\n+import org.apache.pinot.common.data.Schema;\n+import org.apache.pinot.common.data.TimeGranularitySpec;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+import static com.facebook.presto.spi.type.BigintType.BIGINT;\n+import static com.facebook.presto.spi.type.IntegerType.INTEGER;\n+import static com.facebook.presto.spi.type.VarbinaryType.VARBINARY;\n+import static com.facebook.presto.spi.type.VarcharType.VARCHAR;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestPinotColumnMetadata\n+{\n+    @Test\n+    public void testParsePinotSchemaToPinotColumns()\n+    {\n+        PinotConfig pinotConfig = new PinotConfig();\n+        pinotConfig.setInferDateTypeInSchema(true);\n+        pinotConfig.setInferTimestampTypeInSchema(true);\n+\n+        Schema testPinotSchema = new Schema.SchemaBuilder()\n+                .addSingleValueDimension(\"singleValueIntDimension\", FieldSpec.DataType.INT)\n+                .addSingleValueDimension(\"singleValueLongDimension\", FieldSpec.DataType.LONG)\n+                .addSingleValueDimension(\"singleValueFloatDimension\", FieldSpec.DataType.FLOAT)\n+                .addSingleValueDimension(\"singleValueDoubleDimension\", FieldSpec.DataType.DOUBLE)\n+                .addSingleValueDimension(\"singleValueBytesDimension\", FieldSpec.DataType.BYTES)\n+                .addSingleValueDimension(\"singleValueBooleanDimension\", FieldSpec.DataType.BOOLEAN)\n+                .addSingleValueDimension(\"singleValueStringDimension\", FieldSpec.DataType.STRING)\n+                .addMultiValueDimension(\"multiValueIntDimension\", FieldSpec.DataType.INT)\n+                .addMultiValueDimension(\"multiValueLongDimension\", FieldSpec.DataType.LONG)\n+                .addMultiValueDimension(\"multiValueFloatDimension\", FieldSpec.DataType.FLOAT)\n+                .addMultiValueDimension(\"multiValueDoubleDimension\", FieldSpec.DataType.DOUBLE)\n+                .addMultiValueDimension(\"multiValueBytesDimension\", FieldSpec.DataType.BYTES)\n+                .addMultiValueDimension(\"multiValueBooleanDimension\", FieldSpec.DataType.BOOLEAN)\n+                .addMultiValueDimension(\"multiValueStringDimension\", FieldSpec.DataType.STRING)\n+                .addMetric(\"intMetric\", FieldSpec.DataType.INT)\n+                .addMetric(\"longMetric\", FieldSpec.DataType.LONG)\n+                .addMetric(\"floatMetric\", FieldSpec.DataType.FLOAT)\n+                .addMetric(\"doubleMetric\", FieldSpec.DataType.DOUBLE)\n+                .addMetric(\"bytesMetric\", FieldSpec.DataType.BYTES)\n+                .addTime(new TimeGranularitySpec(FieldSpec.DataType.INT, TimeUnit.DAYS, \"daysSinceEpoch\"))\n+                .addDateTime(\"epochDayDateTime\", FieldSpec.DataType.INT, \"1:DAYS:EPOCH\", \"1:DAYS\")\n+                .addDateTime(\"epochMillisDateTime\", FieldSpec.DataType.LONG, \"1:MILLISECONDS:EPOCH\", \"1:SECONDS\")\n+                .addDateTime(\"epochTenDayDateTime\", FieldSpec.DataType.INT, \"10:DAYS:EPOCH\", \"1:DAYS\")\n+                .addDateTime(\"epochSecondsDateTime\", FieldSpec.DataType.LONG, \"1:SECONDS:EPOCH\", \"1:SECONDS\")\n+                .build();\n+\n+        Map<String, Type> expectedTypeMap = new ImmutableMap.Builder<String, Type>()\n+                .put(\"singleValueIntDimension\", INTEGER)\n+                .put(\"singleValueLongDimension\", BIGINT)\n+                .put(\"singleValueFloatDimension\", DoubleType.DOUBLE)\n+                .put(\"singleValueDoubleDimension\", DoubleType.DOUBLE)\n+                .put(\"singleValueBytesDimension\", VARBINARY)\n+                .put(\"singleValueBooleanDimension\", VARCHAR)\n+                .put(\"singleValueStringDimension\", VARCHAR)\n+                .put(\"multiValueIntDimension\", VARCHAR)\n+                .put(\"multiValueLongDimension\", VARCHAR)\n+                .put(\"multiValueFloatDimension\", VARCHAR)\n+                .put(\"multiValueDoubleDimension\", VARCHAR)\n+                .put(\"multiValueBytesDimension\", VARCHAR)\n+                .put(\"multiValueBooleanDimension\", VARCHAR)\n+                .put(\"multiValueStringDimension\", VARCHAR)\n+                .put(\"intMetric\", INTEGER)\n+                .put(\"longMetric\", BIGINT)\n+                .put(\"floatMetric\", DoubleType.DOUBLE)\n+                .put(\"doubleMetric\", DoubleType.DOUBLE)\n+                .put(\"bytesMetric\", VARBINARY)\n+                .put(\"daysSinceEpoch\", DateType.DATE)\n+                .put(\"epochDayDateTime\", DateType.DATE)\n+                .put(\"epochMillisDateTime\", TimestampType.TIMESTAMP)\n+                .put(\"epochTenDayDateTime\", INTEGER)\n+                .put(\"epochSecondsDateTime\", BIGINT)\n+                .build();\n+        Map<String, String> expectedComment = new ImmutableMap.Builder<String, String>()\n+                .put(\"sd1\", FieldSpec.FieldType.DIMENSION.name())\n+                .put(\"singleValueIntDimension\", FieldSpec.FieldType.DIMENSION.name())\n+                .put(\"singleValueLongDimension\", FieldSpec.FieldType.DIMENSION.name())\n+                .put(\"singleValueFloatDimension\", FieldSpec.FieldType.DIMENSION.name())\n+                .put(\"singleValueDoubleDimension\", FieldSpec.FieldType.DIMENSION.name())\n+                .put(\"singleValueBytesDimension\", FieldSpec.FieldType.DIMENSION.name())\n+                .put(\"singleValueBooleanDimension\", FieldSpec.FieldType.DIMENSION.name())\n+                .put(\"singleValueStringDimension\", FieldSpec.FieldType.DIMENSION.name())\n+                .put(\"multiValueIntDimension\", FieldSpec.FieldType.DIMENSION.name())\n+                .put(\"multiValueLongDimension\", FieldSpec.FieldType.DIMENSION.name())\n+                .put(\"multiValueFloatDimension\", FieldSpec.FieldType.DIMENSION.name())\n+                .put(\"multiValueDoubleDimension\", FieldSpec.FieldType.DIMENSION.name())\n+                .put(\"multiValueBytesDimension\", FieldSpec.FieldType.DIMENSION.name())\n+                .put(\"multiValueBooleanDimension\", FieldSpec.FieldType.DIMENSION.name())\n+                .put(\"multiValueStringDimension\", FieldSpec.FieldType.DIMENSION.name())\n+                .put(\"intMetric\", FieldSpec.FieldType.METRIC.name())\n+                .put(\"longMetric\", FieldSpec.FieldType.METRIC.name())\n+                .put(\"floatMetric\", FieldSpec.FieldType.METRIC.name())\n+                .put(\"doubleMetric\", FieldSpec.FieldType.METRIC.name())\n+                .put(\"bytesMetric\", FieldSpec.FieldType.METRIC.name())\n+                .put(\"daysSinceEpoch\", FieldSpec.FieldType.TIME.name())\n+                .put(\"epochDayDateTime\", FieldSpec.FieldType.DATE_TIME.name())\n+                .put(\"epochMillisDateTime\", FieldSpec.FieldType.DATE_TIME.name())\n+                .put(\"epochTenDayDateTime\", FieldSpec.FieldType.DATE_TIME.name())\n+                .put(\"epochSecondsDateTime\", FieldSpec.FieldType.DATE_TIME.name())\n+                .build();\n+\n+        List<PinotColumn> pinotColumns = PinotColumnUtils.getPinotColumnsForPinotSchema(testPinotSchema, pinotConfig.isInferDateTypeInSchema(), pinotConfig.isInferTimestampTypeInSchema());\n+        for (PinotColumn col : pinotColumns) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4077b533c4cb2080460ca6aea19a2968eb2b2176"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA1NjYzNw==", "bodyText": "column", "url": "https://github.com/prestodb/presto/pull/14322#discussion_r402056637", "createdAt": "2020-04-02T05:17:35Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/TestPinotColumnMetadata.java", "diffHunk": "@@ -0,0 +1,287 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.pinot;\n+\n+import com.facebook.presto.spi.type.DateType;\n+import com.facebook.presto.spi.type.DoubleType;\n+import com.facebook.presto.spi.type.TimestampType;\n+import com.facebook.presto.spi.type.Type;\n+import com.google.common.collect.ImmutableMap;\n+import org.apache.pinot.common.data.FieldSpec;\n+import org.apache.pinot.common.data.Schema;\n+import org.apache.pinot.common.data.TimeGranularitySpec;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+import static com.facebook.presto.spi.type.BigintType.BIGINT;\n+import static com.facebook.presto.spi.type.IntegerType.INTEGER;\n+import static com.facebook.presto.spi.type.VarbinaryType.VARBINARY;\n+import static com.facebook.presto.spi.type.VarcharType.VARCHAR;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestPinotColumnMetadata\n+{\n+    @Test\n+    public void testParsePinotSchemaToPinotColumns()\n+    {\n+        PinotConfig pinotConfig = new PinotConfig();\n+        pinotConfig.setInferDateTypeInSchema(true);\n+        pinotConfig.setInferTimestampTypeInSchema(true);\n+\n+        Schema testPinotSchema = new Schema.SchemaBuilder()\n+                .addSingleValueDimension(\"singleValueIntDimension\", FieldSpec.DataType.INT)\n+                .addSingleValueDimension(\"singleValueLongDimension\", FieldSpec.DataType.LONG)\n+                .addSingleValueDimension(\"singleValueFloatDimension\", FieldSpec.DataType.FLOAT)\n+                .addSingleValueDimension(\"singleValueDoubleDimension\", FieldSpec.DataType.DOUBLE)\n+                .addSingleValueDimension(\"singleValueBytesDimension\", FieldSpec.DataType.BYTES)\n+                .addSingleValueDimension(\"singleValueBooleanDimension\", FieldSpec.DataType.BOOLEAN)\n+                .addSingleValueDimension(\"singleValueStringDimension\", FieldSpec.DataType.STRING)\n+                .addMultiValueDimension(\"multiValueIntDimension\", FieldSpec.DataType.INT)\n+                .addMultiValueDimension(\"multiValueLongDimension\", FieldSpec.DataType.LONG)\n+                .addMultiValueDimension(\"multiValueFloatDimension\", FieldSpec.DataType.FLOAT)\n+                .addMultiValueDimension(\"multiValueDoubleDimension\", FieldSpec.DataType.DOUBLE)\n+                .addMultiValueDimension(\"multiValueBytesDimension\", FieldSpec.DataType.BYTES)\n+                .addMultiValueDimension(\"multiValueBooleanDimension\", FieldSpec.DataType.BOOLEAN)\n+                .addMultiValueDimension(\"multiValueStringDimension\", FieldSpec.DataType.STRING)\n+                .addMetric(\"intMetric\", FieldSpec.DataType.INT)\n+                .addMetric(\"longMetric\", FieldSpec.DataType.LONG)\n+                .addMetric(\"floatMetric\", FieldSpec.DataType.FLOAT)\n+                .addMetric(\"doubleMetric\", FieldSpec.DataType.DOUBLE)\n+                .addMetric(\"bytesMetric\", FieldSpec.DataType.BYTES)\n+                .addTime(new TimeGranularitySpec(FieldSpec.DataType.INT, TimeUnit.DAYS, \"daysSinceEpoch\"))\n+                .addDateTime(\"epochDayDateTime\", FieldSpec.DataType.INT, \"1:DAYS:EPOCH\", \"1:DAYS\")\n+                .addDateTime(\"epochMillisDateTime\", FieldSpec.DataType.LONG, \"1:MILLISECONDS:EPOCH\", \"1:SECONDS\")\n+                .addDateTime(\"epochTenDayDateTime\", FieldSpec.DataType.INT, \"10:DAYS:EPOCH\", \"1:DAYS\")\n+                .addDateTime(\"epochSecondsDateTime\", FieldSpec.DataType.LONG, \"1:SECONDS:EPOCH\", \"1:SECONDS\")\n+                .build();\n+\n+        Map<String, Type> expectedTypeMap = new ImmutableMap.Builder<String, Type>()\n+                .put(\"singleValueIntDimension\", INTEGER)\n+                .put(\"singleValueLongDimension\", BIGINT)\n+                .put(\"singleValueFloatDimension\", DoubleType.DOUBLE)\n+                .put(\"singleValueDoubleDimension\", DoubleType.DOUBLE)\n+                .put(\"singleValueBytesDimension\", VARBINARY)\n+                .put(\"singleValueBooleanDimension\", VARCHAR)\n+                .put(\"singleValueStringDimension\", VARCHAR)\n+                .put(\"multiValueIntDimension\", VARCHAR)\n+                .put(\"multiValueLongDimension\", VARCHAR)\n+                .put(\"multiValueFloatDimension\", VARCHAR)\n+                .put(\"multiValueDoubleDimension\", VARCHAR)\n+                .put(\"multiValueBytesDimension\", VARCHAR)\n+                .put(\"multiValueBooleanDimension\", VARCHAR)\n+                .put(\"multiValueStringDimension\", VARCHAR)\n+                .put(\"intMetric\", INTEGER)\n+                .put(\"longMetric\", BIGINT)\n+                .put(\"floatMetric\", DoubleType.DOUBLE)\n+                .put(\"doubleMetric\", DoubleType.DOUBLE)\n+                .put(\"bytesMetric\", VARBINARY)\n+                .put(\"daysSinceEpoch\", DateType.DATE)\n+                .put(\"epochDayDateTime\", DateType.DATE)\n+                .put(\"epochMillisDateTime\", TimestampType.TIMESTAMP)\n+                .put(\"epochTenDayDateTime\", INTEGER)\n+                .put(\"epochSecondsDateTime\", BIGINT)\n+                .build();\n+        Map<String, String> expectedComment = new ImmutableMap.Builder<String, String>()\n+                .put(\"sd1\", FieldSpec.FieldType.DIMENSION.name())\n+                .put(\"singleValueIntDimension\", FieldSpec.FieldType.DIMENSION.name())\n+                .put(\"singleValueLongDimension\", FieldSpec.FieldType.DIMENSION.name())\n+                .put(\"singleValueFloatDimension\", FieldSpec.FieldType.DIMENSION.name())\n+                .put(\"singleValueDoubleDimension\", FieldSpec.FieldType.DIMENSION.name())\n+                .put(\"singleValueBytesDimension\", FieldSpec.FieldType.DIMENSION.name())\n+                .put(\"singleValueBooleanDimension\", FieldSpec.FieldType.DIMENSION.name())\n+                .put(\"singleValueStringDimension\", FieldSpec.FieldType.DIMENSION.name())\n+                .put(\"multiValueIntDimension\", FieldSpec.FieldType.DIMENSION.name())\n+                .put(\"multiValueLongDimension\", FieldSpec.FieldType.DIMENSION.name())\n+                .put(\"multiValueFloatDimension\", FieldSpec.FieldType.DIMENSION.name())\n+                .put(\"multiValueDoubleDimension\", FieldSpec.FieldType.DIMENSION.name())\n+                .put(\"multiValueBytesDimension\", FieldSpec.FieldType.DIMENSION.name())\n+                .put(\"multiValueBooleanDimension\", FieldSpec.FieldType.DIMENSION.name())\n+                .put(\"multiValueStringDimension\", FieldSpec.FieldType.DIMENSION.name())\n+                .put(\"intMetric\", FieldSpec.FieldType.METRIC.name())\n+                .put(\"longMetric\", FieldSpec.FieldType.METRIC.name())\n+                .put(\"floatMetric\", FieldSpec.FieldType.METRIC.name())\n+                .put(\"doubleMetric\", FieldSpec.FieldType.METRIC.name())\n+                .put(\"bytesMetric\", FieldSpec.FieldType.METRIC.name())\n+                .put(\"daysSinceEpoch\", FieldSpec.FieldType.TIME.name())\n+                .put(\"epochDayDateTime\", FieldSpec.FieldType.DATE_TIME.name())\n+                .put(\"epochMillisDateTime\", FieldSpec.FieldType.DATE_TIME.name())\n+                .put(\"epochTenDayDateTime\", FieldSpec.FieldType.DATE_TIME.name())\n+                .put(\"epochSecondsDateTime\", FieldSpec.FieldType.DATE_TIME.name())\n+                .build();\n+\n+        List<PinotColumn> pinotColumns = PinotColumnUtils.getPinotColumnsForPinotSchema(testPinotSchema, pinotConfig.isInferDateTypeInSchema(), pinotConfig.isInferTimestampTypeInSchema());\n+        for (PinotColumn col : pinotColumns) {\n+            assertEquals(col.getType(), expectedTypeMap.get(col.getName()), \"Failed to compare column type for field - \" + col.getName());\n+            assertEquals(col.getComment(), expectedComment.get(col.getName()), \"Failed to compare column comment for field - \" + col.getName());\n+            assertEquals(col.isNullable(), false);\n+        }\n+    }\n+\n+    @Test\n+    public void testTimeFieldInPinotSchemaToPinotColumns()\n+    {\n+        PinotConfig pinotConfig = new PinotConfig();\n+        pinotConfig.setInferDateTypeInSchema(true);\n+        pinotConfig.setInferTimestampTypeInSchema(true);\n+\n+        // Test Date\n+        Schema testSchema = new Schema.SchemaBuilder()\n+                .addTime(new TimeGranularitySpec(FieldSpec.DataType.INT, TimeUnit.DAYS, \"daysSinceEpoch\"))\n+                .build();\n+        List<PinotColumn> pinotColumns = PinotColumnUtils.getPinotColumnsForPinotSchema(testSchema, pinotConfig.isInferDateTypeInSchema(), pinotConfig.isInferTimestampTypeInSchema());\n+        PinotColumn col = pinotColumns.get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4077b533c4cb2080460ca6aea19a2968eb2b2176"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA1Njc1Mg==", "bodyText": "same", "url": "https://github.com/prestodb/presto/pull/14322#discussion_r402056752", "createdAt": "2020-04-02T05:18:02Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/TestPinotColumnMetadata.java", "diffHunk": "@@ -0,0 +1,287 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.pinot;\n+\n+import com.facebook.presto.spi.type.DateType;\n+import com.facebook.presto.spi.type.DoubleType;\n+import com.facebook.presto.spi.type.TimestampType;\n+import com.facebook.presto.spi.type.Type;\n+import com.google.common.collect.ImmutableMap;\n+import org.apache.pinot.common.data.FieldSpec;\n+import org.apache.pinot.common.data.Schema;\n+import org.apache.pinot.common.data.TimeGranularitySpec;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+import static com.facebook.presto.spi.type.BigintType.BIGINT;\n+import static com.facebook.presto.spi.type.IntegerType.INTEGER;\n+import static com.facebook.presto.spi.type.VarbinaryType.VARBINARY;\n+import static com.facebook.presto.spi.type.VarcharType.VARCHAR;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestPinotColumnMetadata\n+{\n+    @Test\n+    public void testParsePinotSchemaToPinotColumns()\n+    {\n+        PinotConfig pinotConfig = new PinotConfig();\n+        pinotConfig.setInferDateTypeInSchema(true);\n+        pinotConfig.setInferTimestampTypeInSchema(true);\n+\n+        Schema testPinotSchema = new Schema.SchemaBuilder()\n+                .addSingleValueDimension(\"singleValueIntDimension\", FieldSpec.DataType.INT)\n+                .addSingleValueDimension(\"singleValueLongDimension\", FieldSpec.DataType.LONG)\n+                .addSingleValueDimension(\"singleValueFloatDimension\", FieldSpec.DataType.FLOAT)\n+                .addSingleValueDimension(\"singleValueDoubleDimension\", FieldSpec.DataType.DOUBLE)\n+                .addSingleValueDimension(\"singleValueBytesDimension\", FieldSpec.DataType.BYTES)\n+                .addSingleValueDimension(\"singleValueBooleanDimension\", FieldSpec.DataType.BOOLEAN)\n+                .addSingleValueDimension(\"singleValueStringDimension\", FieldSpec.DataType.STRING)\n+                .addMultiValueDimension(\"multiValueIntDimension\", FieldSpec.DataType.INT)\n+                .addMultiValueDimension(\"multiValueLongDimension\", FieldSpec.DataType.LONG)\n+                .addMultiValueDimension(\"multiValueFloatDimension\", FieldSpec.DataType.FLOAT)\n+                .addMultiValueDimension(\"multiValueDoubleDimension\", FieldSpec.DataType.DOUBLE)\n+                .addMultiValueDimension(\"multiValueBytesDimension\", FieldSpec.DataType.BYTES)\n+                .addMultiValueDimension(\"multiValueBooleanDimension\", FieldSpec.DataType.BOOLEAN)\n+                .addMultiValueDimension(\"multiValueStringDimension\", FieldSpec.DataType.STRING)\n+                .addMetric(\"intMetric\", FieldSpec.DataType.INT)\n+                .addMetric(\"longMetric\", FieldSpec.DataType.LONG)\n+                .addMetric(\"floatMetric\", FieldSpec.DataType.FLOAT)\n+                .addMetric(\"doubleMetric\", FieldSpec.DataType.DOUBLE)\n+                .addMetric(\"bytesMetric\", FieldSpec.DataType.BYTES)\n+                .addTime(new TimeGranularitySpec(FieldSpec.DataType.INT, TimeUnit.DAYS, \"daysSinceEpoch\"))\n+                .addDateTime(\"epochDayDateTime\", FieldSpec.DataType.INT, \"1:DAYS:EPOCH\", \"1:DAYS\")\n+                .addDateTime(\"epochMillisDateTime\", FieldSpec.DataType.LONG, \"1:MILLISECONDS:EPOCH\", \"1:SECONDS\")\n+                .addDateTime(\"epochTenDayDateTime\", FieldSpec.DataType.INT, \"10:DAYS:EPOCH\", \"1:DAYS\")\n+                .addDateTime(\"epochSecondsDateTime\", FieldSpec.DataType.LONG, \"1:SECONDS:EPOCH\", \"1:SECONDS\")\n+                .build();\n+\n+        Map<String, Type> expectedTypeMap = new ImmutableMap.Builder<String, Type>()\n+                .put(\"singleValueIntDimension\", INTEGER)\n+                .put(\"singleValueLongDimension\", BIGINT)\n+                .put(\"singleValueFloatDimension\", DoubleType.DOUBLE)\n+                .put(\"singleValueDoubleDimension\", DoubleType.DOUBLE)\n+                .put(\"singleValueBytesDimension\", VARBINARY)\n+                .put(\"singleValueBooleanDimension\", VARCHAR)\n+                .put(\"singleValueStringDimension\", VARCHAR)\n+                .put(\"multiValueIntDimension\", VARCHAR)\n+                .put(\"multiValueLongDimension\", VARCHAR)\n+                .put(\"multiValueFloatDimension\", VARCHAR)\n+                .put(\"multiValueDoubleDimension\", VARCHAR)\n+                .put(\"multiValueBytesDimension\", VARCHAR)\n+                .put(\"multiValueBooleanDimension\", VARCHAR)\n+                .put(\"multiValueStringDimension\", VARCHAR)\n+                .put(\"intMetric\", INTEGER)\n+                .put(\"longMetric\", BIGINT)\n+                .put(\"floatMetric\", DoubleType.DOUBLE)\n+                .put(\"doubleMetric\", DoubleType.DOUBLE)\n+                .put(\"bytesMetric\", VARBINARY)\n+                .put(\"daysSinceEpoch\", DateType.DATE)\n+                .put(\"epochDayDateTime\", DateType.DATE)\n+                .put(\"epochMillisDateTime\", TimestampType.TIMESTAMP)\n+                .put(\"epochTenDayDateTime\", INTEGER)\n+                .put(\"epochSecondsDateTime\", BIGINT)\n+                .build();\n+        Map<String, String> expectedComment = new ImmutableMap.Builder<String, String>()\n+                .put(\"sd1\", FieldSpec.FieldType.DIMENSION.name())\n+                .put(\"singleValueIntDimension\", FieldSpec.FieldType.DIMENSION.name())\n+                .put(\"singleValueLongDimension\", FieldSpec.FieldType.DIMENSION.name())\n+                .put(\"singleValueFloatDimension\", FieldSpec.FieldType.DIMENSION.name())\n+                .put(\"singleValueDoubleDimension\", FieldSpec.FieldType.DIMENSION.name())\n+                .put(\"singleValueBytesDimension\", FieldSpec.FieldType.DIMENSION.name())\n+                .put(\"singleValueBooleanDimension\", FieldSpec.FieldType.DIMENSION.name())\n+                .put(\"singleValueStringDimension\", FieldSpec.FieldType.DIMENSION.name())\n+                .put(\"multiValueIntDimension\", FieldSpec.FieldType.DIMENSION.name())\n+                .put(\"multiValueLongDimension\", FieldSpec.FieldType.DIMENSION.name())\n+                .put(\"multiValueFloatDimension\", FieldSpec.FieldType.DIMENSION.name())\n+                .put(\"multiValueDoubleDimension\", FieldSpec.FieldType.DIMENSION.name())\n+                .put(\"multiValueBytesDimension\", FieldSpec.FieldType.DIMENSION.name())\n+                .put(\"multiValueBooleanDimension\", FieldSpec.FieldType.DIMENSION.name())\n+                .put(\"multiValueStringDimension\", FieldSpec.FieldType.DIMENSION.name())\n+                .put(\"intMetric\", FieldSpec.FieldType.METRIC.name())\n+                .put(\"longMetric\", FieldSpec.FieldType.METRIC.name())\n+                .put(\"floatMetric\", FieldSpec.FieldType.METRIC.name())\n+                .put(\"doubleMetric\", FieldSpec.FieldType.METRIC.name())\n+                .put(\"bytesMetric\", FieldSpec.FieldType.METRIC.name())\n+                .put(\"daysSinceEpoch\", FieldSpec.FieldType.TIME.name())\n+                .put(\"epochDayDateTime\", FieldSpec.FieldType.DATE_TIME.name())\n+                .put(\"epochMillisDateTime\", FieldSpec.FieldType.DATE_TIME.name())\n+                .put(\"epochTenDayDateTime\", FieldSpec.FieldType.DATE_TIME.name())\n+                .put(\"epochSecondsDateTime\", FieldSpec.FieldType.DATE_TIME.name())\n+                .build();\n+\n+        List<PinotColumn> pinotColumns = PinotColumnUtils.getPinotColumnsForPinotSchema(testPinotSchema, pinotConfig.isInferDateTypeInSchema(), pinotConfig.isInferTimestampTypeInSchema());\n+        for (PinotColumn col : pinotColumns) {\n+            assertEquals(col.getType(), expectedTypeMap.get(col.getName()), \"Failed to compare column type for field - \" + col.getName());\n+            assertEquals(col.getComment(), expectedComment.get(col.getName()), \"Failed to compare column comment for field - \" + col.getName());\n+            assertEquals(col.isNullable(), false);\n+        }\n+    }\n+\n+    @Test\n+    public void testTimeFieldInPinotSchemaToPinotColumns()\n+    {\n+        PinotConfig pinotConfig = new PinotConfig();\n+        pinotConfig.setInferDateTypeInSchema(true);\n+        pinotConfig.setInferTimestampTypeInSchema(true);\n+\n+        // Test Date\n+        Schema testSchema = new Schema.SchemaBuilder()\n+                .addTime(new TimeGranularitySpec(FieldSpec.DataType.INT, TimeUnit.DAYS, \"daysSinceEpoch\"))\n+                .build();\n+        List<PinotColumn> pinotColumns = PinotColumnUtils.getPinotColumnsForPinotSchema(testSchema, pinotConfig.isInferDateTypeInSchema(), pinotConfig.isInferTimestampTypeInSchema());\n+        PinotColumn col = pinotColumns.get(0);\n+        assertEquals(col.getName(), \"daysSinceEpoch\");\n+        assertEquals(col.getType(), DateType.DATE);\n+        assertEquals(col.getComment(), FieldSpec.FieldType.TIME.name());\n+\n+        testSchema = new Schema.SchemaBuilder()\n+                .addTime(new TimeGranularitySpec(FieldSpec.DataType.LONG, TimeUnit.MILLISECONDS, \"millisSinceEpoch\"),\n+                        new TimeGranularitySpec(FieldSpec.DataType.INT, TimeUnit.DAYS, \"daysSinceEpoch\"))\n+                .build();\n+        pinotColumns = PinotColumnUtils.getPinotColumnsForPinotSchema(testSchema, pinotConfig.isInferDateTypeInSchema(), pinotConfig.isInferTimestampTypeInSchema());\n+        col = pinotColumns.get(0);\n+        assertEquals(col.getName(), \"daysSinceEpoch\");\n+        assertEquals(col.getType(), DateType.DATE);\n+        assertEquals(col.getComment(), FieldSpec.FieldType.TIME.name());\n+\n+        // Test Timestamp\n+        testSchema = new Schema.SchemaBuilder()\n+                .addTime(new TimeGranularitySpec(FieldSpec.DataType.LONG, TimeUnit.MILLISECONDS, \"millisSinceEpoch\"))\n+                .build();\n+        pinotColumns = PinotColumnUtils.getPinotColumnsForPinotSchema(testSchema, pinotConfig.isInferDateTypeInSchema(), pinotConfig.isInferTimestampTypeInSchema());\n+        col = pinotColumns.get(0);\n+        assertEquals(col.getName(), \"millisSinceEpoch\");\n+        assertEquals(col.getType(), TimestampType.TIMESTAMP);\n+        assertEquals(col.getComment(), FieldSpec.FieldType.TIME.name());\n+\n+        testSchema = new Schema.SchemaBuilder()\n+                .addTime(new TimeGranularitySpec(FieldSpec.DataType.INT, TimeUnit.DAYS, \"daysSinceEpoch\"),\n+                        new TimeGranularitySpec(FieldSpec.DataType.LONG, TimeUnit.MILLISECONDS, \"millisSinceEpoch\"))\n+                .build();\n+        pinotColumns = PinotColumnUtils.getPinotColumnsForPinotSchema(testSchema, pinotConfig.isInferDateTypeInSchema(), pinotConfig.isInferTimestampTypeInSchema());\n+        col = pinotColumns.get(0);\n+        assertEquals(col.getName(), \"millisSinceEpoch\");\n+        assertEquals(col.getType(), TimestampType.TIMESTAMP);\n+        assertEquals(col.getComment(), FieldSpec.FieldType.TIME.name());\n+\n+        // Test fallback to BIGINT\n+        testSchema = new Schema.SchemaBuilder()\n+                .addTime(new TimeGranularitySpec(FieldSpec.DataType.LONG, TimeUnit.SECONDS, \"secondsSinceEpoch\"))\n+                .build();\n+        pinotColumns = PinotColumnUtils.getPinotColumnsForPinotSchema(testSchema, pinotConfig.isInferDateTypeInSchema(), pinotConfig.isInferTimestampTypeInSchema());\n+        col = pinotColumns.get(0);\n+        assertEquals(col.getName(), \"secondsSinceEpoch\");\n+        assertEquals(col.getType(), BIGINT);\n+        assertEquals(col.getComment(), FieldSpec.FieldType.TIME.name());\n+\n+        testSchema = new Schema.SchemaBuilder()\n+                .addTime(new TimeGranularitySpec(FieldSpec.DataType.LONG, TimeUnit.MILLISECONDS, \"millisSinceEpoch\"),\n+                        new TimeGranularitySpec(FieldSpec.DataType.LONG, TimeUnit.SECONDS, \"secondsSinceEpoch\"))\n+                .build();\n+        pinotColumns = PinotColumnUtils.getPinotColumnsForPinotSchema(testSchema, pinotConfig.isInferDateTypeInSchema(), pinotConfig.isInferTimestampTypeInSchema());\n+        col = pinotColumns.get(0);\n+        assertEquals(col.getName(), \"secondsSinceEpoch\");\n+        assertEquals(col.getType(), BIGINT);\n+        assertEquals(col.getComment(), FieldSpec.FieldType.TIME.name());\n+\n+        testSchema = new Schema.SchemaBuilder()\n+                .addTime(new TimeGranularitySpec(FieldSpec.DataType.INT, TimeUnit.DAYS, \"daysSinceEpoch\"),\n+                        new TimeGranularitySpec(FieldSpec.DataType.LONG, TimeUnit.SECONDS, \"secondsSinceEpoch\"))\n+                .build();\n+        pinotColumns = PinotColumnUtils.getPinotColumnsForPinotSchema(testSchema, pinotConfig.isInferDateTypeInSchema(), pinotConfig.isInferTimestampTypeInSchema());\n+        col = pinotColumns.get(0);\n+        assertEquals(col.getName(), \"secondsSinceEpoch\");\n+        assertEquals(col.getType(), BIGINT);\n+        assertEquals(col.getComment(), FieldSpec.FieldType.TIME.name());\n+    }\n+\n+    @Test\n+    public void testConversionWithoutConfigSwitchOn()\n+    {\n+        PinotConfig pinotConfig = new PinotConfig();\n+\n+        // Test Date\n+        Schema testSchema = new Schema.SchemaBuilder()\n+                .addTime(new TimeGranularitySpec(FieldSpec.DataType.INT, TimeUnit.DAYS, \"daysSinceEpoch\"))\n+                .build();\n+        List<PinotColumn> pinotColumns = PinotColumnUtils.getPinotColumnsForPinotSchema(testSchema, pinotConfig.isInferDateTypeInSchema(), pinotConfig.isInferTimestampTypeInSchema());\n+        PinotColumn col = pinotColumns.get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4077b533c4cb2080460ca6aea19a2968eb2b2176"}, "originalPosition": 222}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2ODI0NDgz", "url": "https://github.com/prestodb/presto/pull/14322#pullrequestreview-386824483", "createdAt": "2020-04-02T22:34:23Z", "commit": {"oid": "b2e63ad752eea45971ad9a5e1fe2d7340fdb2db7"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQyMjozNDoyM1rOF_-4Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQyMjozNDoyM1rOF_-4Jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYzNDc5MQ==", "bodyText": "I'd prefer not putting commands in documentation. The example could just contains pinot schema and presto schema", "url": "https://github.com/prestodb/presto/pull/14322#discussion_r402634791", "createdAt": "2020-04-02T22:34:23Z", "author": {"login": "zhenxiao"}, "path": "presto-docs/src/main/sphinx/connector/pinot.rst", "diffHunk": "@@ -32,6 +32,129 @@ with a different name (making sure it ends in ``.properties``). For\n example, if you name the property file ``sales.properties``, Presto\n will create a catalog named ``sales`` using the configured connector.\n \n+Map Pinot Schema to Presto Schema\n+---------------------------------\n+\n+In general Pinot schema to Presto schema mapping are pretty straight forward.\n+By default, the data type mapping follows the table below.\n+\n+.. list-table::\n+   :widths: 100 100\n+   :header-rows: 1\n+\n+   * - Pinot Data Type\n+     - Presto Data Type\n+   * - INT\n+     - INTEGER\n+   * - LONG\n+     - BIGINT\n+   * - FLOAT\n+     - DOUBLE\n+   * - DOUBLE\n+     - DOUBLE\n+   * - BYTES\n+     - VARBINARY\n+   * - STRING\n+     - VARCHAR\n+\n+Since Pinot defines each field as dimension, metric or time(date_time) field,\n+it's possible to infer Presto data type ``DATE`` and ``TIMESTAMP``:\n+\n+- A Pinot ``TIME`` field with timeGranularity ``{ \"TimeFormat\":\"EPOCH\", \"TimeUnit\":\"DAYS\", \"TimeUnitSize\": 1 }`` could be map to a ``DATE`` type.\n+- A Pinot ``TIME`` field with timeGranularity ``{ \"TimeFormat\":\"EPOCH\", \"TimeUnit\":\"MILLISECONDS\", \"TimeUnitSize\": 1 }`` could be map to a ``TIMESTAMP`` type.\n+- A Pinot ``DATE_TIME`` field with format ``1:DAYS:EPOCH`` could be map to a ``DATE`` type.\n+- A Pinot ``DATE_TIME`` field with format ``1:MILLISECONDS:EPOCH`` could be map to a ``TIMESTAMP`` type.\n+\n+There are a few configurations that control this behavior:\n+\n+* ``pinot.infer-date-type-in-schema``: This config is false by default.\n+  Setting it to true will infer a Pinot ``TIME``/``DATE_TIME`` field to ``DATE`` in Presto if possible.\n+\n+* ``pinot.infer-timestamp-type-in-schema``: This config is false by default.\n+  Setting it to true will infer a Pinot ``TIME``/``DATE_TIME`` field to ``TIMESTAMP`` in Presto if possible.\n+\n+Below is an example with config: ``pinot.infer-timestamp-type-in-schema=true``.\n+\n+Sample Pinot Schema:\n+\n+.. code-block:: JSON\n+\n+  {\n+    \"schemaName\": \"meetupRsvp\",\n+    \"dimensionFieldSpecs\": [\n+      {\n+        \"name\": \"venue_name\",\n+        \"dataType\": \"STRING\"\n+      },\n+      {\n+        \"name\": \"event_name\",\n+        \"dataType\": \"STRING\"\n+      },\n+      {\n+        \"name\": \"event_id\",\n+        \"dataType\": \"STRING\"\n+      },\n+      {\n+        \"name\": \"event_time\",\n+        \"dataType\": \"LONG\"\n+      },\n+      {\n+        \"name\": \"group_city\",\n+        \"dataType\": \"STRING\"\n+      },\n+      {\n+        \"name\": \"group_country\",\n+        \"dataType\": \"STRING\"\n+      },\n+      {\n+        \"name\": \"group_id\",\n+        \"dataType\": \"LONG\"\n+      },\n+      {\n+        \"name\": \"group_name\",\n+        \"dataType\": \"STRING\"\n+      }\n+    ],\n+    \"metricFieldSpecs\": [\n+      {\n+        \"name\": \"rsvp_count\",\n+        \"dataType\": \"INT\"\n+      }\n+    ],\n+    \"timeFieldSpec\": {\n+      \"incomingGranularitySpec\": {\n+        \"name\": \"mtime\",\n+        \"dataType\": \"LONG\",\n+        \"timeType\": \"MILLISECONDS\"\n+      }\n+    }\n+  }\n+\n+Sample Presto Schema:\n+\n+.. code-block:: none\n+\n+  $ ./presto-cli --catalog pinot --schema default", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2e63ad752eea45971ad9a5e1fe2d7340fdb2db7"}, "originalPosition": 106}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bac6f1ed80f66d95c01c1ab2d2dc1d281475f19b", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/bac6f1ed80f66d95c01c1ab2d2dc1d281475f19b", "committedDate": "2020-04-03T01:39:46Z", "message": "Adding support for Date and Timestamp data type support for Pinot"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70829cdf89a1abe6457dba22608db87f9ed55328", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/70829cdf89a1abe6457dba22608db87f9ed55328", "committedDate": "2020-04-03T01:39:46Z", "message": "Adding config to swtich on/off date type and timestamp type inferral"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f741aab57047d2333782b0ee308473f966ada0cc", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/f741aab57047d2333782b0ee308473f966ada0cc", "committedDate": "2020-04-03T01:39:46Z", "message": "Address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "748fac5e23b4cc75eb36e9cadf228d101a60e513", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/748fac5e23b4cc75eb36e9cadf228d101a60e513", "committedDate": "2020-04-03T01:39:46Z", "message": "Update Presto schema example in pinot connector doc"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c772a649e8a59f28c465a7e4d960834e6cb9f92d", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/c772a649e8a59f28c465a7e4d960834e6cb9f92d", "committedDate": "2020-04-02T22:40:03Z", "message": "Update Presto schema example in pinot connector doc"}, "afterCommit": {"oid": "748fac5e23b4cc75eb36e9cadf228d101a60e513", "author": {"user": {"login": "xiangfu0", "name": "Xiang Fu"}}, "url": "https://github.com/prestodb/presto/commit/748fac5e23b4cc75eb36e9cadf228d101a60e513", "committedDate": "2020-04-03T01:39:46Z", "message": "Update Presto schema example in pinot connector doc"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2152, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}