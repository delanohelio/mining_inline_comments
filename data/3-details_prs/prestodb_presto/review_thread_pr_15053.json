{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwMzM2MDMy", "number": 15053, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMDo1MToxMlrOEaJRlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMDo0MTo1NlrOEaPaMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1ODUwMzg5OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMDo1MToxMlrOHDYm2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMjoyOTo0NVrOHDdXhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzMxMDkzNw==", "bodyText": "I understand the fix, but I wanted to discuss a counter proposal: What if selections changes from being the list of final projections to simply being a map that maps a variable to its Pinot selection. That is, it contains all of the selections ever encountered.\nAnd we introduce another notion of a Final project list: List.\nThe problem that is happening is that selections is being overwritten and it no longer contains the ordering variables. What if we always union new things into it instead of overwriting it ?\nI am not sure whether this would pan out or perhaps regress something else.\nIf you think my counter proposal is too much work, then just a note on naming: What do you think of foldinging topNColumnSelections and topNColumnOrderings into one ? Perhaps create a class OrderingInformation that contains (SortOrder, Selection) ? I find the name topNColumnSelections ambiguous and I wonder if fusing it with topNColumnOrderingMap would elide that concern.", "url": "https://github.com/prestodb/presto/pull/15053#discussion_r473310937", "createdAt": "2020-08-19T20:51:12Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "diffHunk": "@@ -62,6 +62,7 @@\n     private final LinkedHashSet<VariableReferenceExpression> outputs;\n     private final LinkedHashSet<VariableReferenceExpression> groupByColumns;\n     private final LinkedHashMap<VariableReferenceExpression, SortOrder> topNColumnOrderingMap;\n+    private final LinkedHashMap<VariableReferenceExpression, Selection> topNColumnSelections;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "143c00921744458a3d34ad1ebf5175e67f0f8d41"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM4ODkzNQ==", "bodyText": "Both seem better ideas to me then having two maps.\nSince we have not encountered any other case like this, in favor of less invasion I would prefer going with merging topNColumnSelections and topNColumnOrderings. Making the change", "url": "https://github.com/prestodb/presto/pull/15053#discussion_r473388935", "createdAt": "2020-08-19T22:29:45Z", "author": {"login": "dharakk"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "diffHunk": "@@ -62,6 +62,7 @@\n     private final LinkedHashSet<VariableReferenceExpression> outputs;\n     private final LinkedHashSet<VariableReferenceExpression> groupByColumns;\n     private final LinkedHashMap<VariableReferenceExpression, SortOrder> topNColumnOrderingMap;\n+    private final LinkedHashMap<VariableReferenceExpression, Selection> topNColumnSelections;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzMxMDkzNw=="}, "originalCommit": {"oid": "143c00921744458a3d34ad1ebf5175e67f0f8d41"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1ODUwOTMwOnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/query/TestPinotQueryGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMDo1MjozN1rOHDYp6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMjo0MToyOFrOHDd41w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzMxMTcyMw==", "bodyText": "Any idea whether this issue also impacts the Pinot-SQL query generation logic added by @fx19880617 recently ? Perhaps we need to fix it and add a test for this there as well ?", "url": "https://github.com/prestodb/presto/pull/15053#discussion_r473311723", "createdAt": "2020-08-19T20:52:37Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/query/TestPinotQueryGenerator.java", "diffHunk": "@@ -366,6 +367,8 @@ public void testSimpleSelectWithTopN()\n                 \"SELECT regionId, city, fare FROM realtimeOnly ORDER BY fare, city DESC LIMIT 50\",\n                 defaultSessionHolder,\n                 ImmutableMap.of());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "143c00921744458a3d34ad1ebf5175e67f0f8d41"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM5NzQ2Mw==", "bodyText": "For order by clause SQL generation also follows the same path via generatePinotQueryHelper so this logic gets added to SQL generation too.\nGood catch on test, I missed the new TestPinotQueryGeneratorSql file. Adding a test there too", "url": "https://github.com/prestodb/presto/pull/15053#discussion_r473397463", "createdAt": "2020-08-19T22:41:28Z", "author": {"login": "dharakk"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/query/TestPinotQueryGenerator.java", "diffHunk": "@@ -366,6 +367,8 @@ public void testSimpleSelectWithTopN()\n                 \"SELECT regionId, city, fare FROM realtimeOnly ORDER BY fare, city DESC LIMIT 50\",\n                 defaultSessionHolder,\n                 ImmutableMap.of());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzMxMTcyMw=="}, "originalCommit": {"oid": "143c00921744458a3d34ad1ebf5175e67f0f8d41"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1OTE2MDQ4OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMzoxMzo1OFrOHDfVYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMzoxMzo1OFrOHDfVYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQyMTE1NQ==", "bodyText": "Can this class be a private instead of public ? Or package local ?", "url": "https://github.com/prestodb/presto/pull/15053#discussion_r473421155", "createdAt": "2020-08-19T23:13:58Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "diffHunk": "@@ -617,4 +623,27 @@ public String toString()\n             return definition;\n         }\n     }\n+\n+    // Columns definitions and ordering information for OrderBy Columns\n+    public static class OrderingColumnInformation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23a8495e0818f4629ea88facf77a18e6af9a5be2"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1OTE2MTgzOnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMzoxNDoxN1rOHDfWSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMzoxNDoxN1rOHDfWSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQyMTM4NQ==", "bodyText": "requireNonNull on the input arguments ?", "url": "https://github.com/prestodb/presto/pull/15053#discussion_r473421385", "createdAt": "2020-08-19T23:14:17Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "diffHunk": "@@ -617,4 +623,27 @@ public String toString()\n             return definition;\n         }\n     }\n+\n+    // Columns definitions and ordering information for OrderBy Columns\n+    public static class OrderingColumnInformation\n+    {\n+        private final SortOrder sortOrder;\n+        private final Selection selection;\n+\n+        public OrderingColumnInformation(SortOrder sortOrder, Selection selection)\n+        {\n+            this.sortOrder = sortOrder;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23a8495e0818f4629ea88facf77a18e6af9a5be2"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1OTIxNTE5OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/query/TestPinotQueryGeneratorSql.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMzoyNzoyNVrOHDf6Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMzo0NzoxOVrOHDgw9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQzMDU0Ng==", "bodyText": "How about an ascending order test query here for the Pinot sql case ... Since pinot pql only supports order by desc I believe. (Not sure at all !)", "url": "https://github.com/prestodb/presto/pull/15053#discussion_r473430546", "createdAt": "2020-08-19T23:27:25Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/query/TestPinotQueryGeneratorSql.java", "diffHunk": "@@ -182,6 +182,14 @@ public void testSelectionWithOrderBy()\n                 defaultSessionHolder,\n                 ImmutableMap.of());\n \n+        TopNNode topNNode = topN(planBuilder, 50L, ImmutableList.of(\"fare\", \"city\"), ImmutableList.of(false, false), tableScanNode);\n+        testPinotQuery(\n+                pinotConfig,\n+                project(planBuilder, topNNode, ImmutableList.of(\"regionid\", \"city\")),\n+                \"SELECT regionId, city FROM realtimeOnly ORDER BY fare DESC, city DESC LIMIT 50\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23a8495e0818f4629ea88facf77a18e6af9a5be2"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ0NDU5Nw==", "bodyText": "I think it supports as I see asc cases above, made sort order for one of the columns ascending", "url": "https://github.com/prestodb/presto/pull/15053#discussion_r473444597", "createdAt": "2020-08-19T23:47:19Z", "author": {"login": "dharakk"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/query/TestPinotQueryGeneratorSql.java", "diffHunk": "@@ -182,6 +182,14 @@ public void testSelectionWithOrderBy()\n                 defaultSessionHolder,\n                 ImmutableMap.of());\n \n+        TopNNode topNNode = topN(planBuilder, 50L, ImmutableList.of(\"fare\", \"city\"), ImmutableList.of(false, false), tableScanNode);\n+        testPinotQuery(\n+                pinotConfig,\n+                project(planBuilder, topNNode, ImmutableList.of(\"regionid\", \"city\")),\n+                \"SELECT regionId, city FROM realtimeOnly ORDER BY fare DESC, city DESC LIMIT 50\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQzMDU0Ng=="}, "originalCommit": {"oid": "23a8495e0818f4629ea88facf77a18e6af9a5be2"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1OTIxODg5OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/query/TestPinotQueryGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMzoyODoyMFrOHDf8gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMzo1ODoxMFrOHDhN-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQzMTE3MA==", "bodyText": "What about Pinot TOP queries (ie aggregation-order-by-limit-desc queries). Do that change too with this PR ?", "url": "https://github.com/prestodb/presto/pull/15053#discussion_r473431170", "createdAt": "2020-08-19T23:28:20Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/query/TestPinotQueryGenerator.java", "diffHunk": "@@ -366,6 +367,8 @@ public void testSimpleSelectWithTopN()\n                 \"SELECT regionId, city, fare FROM realtimeOnly ORDER BY fare, city DESC LIMIT 50\",\n                 defaultSessionHolder,\n                 ImmutableMap.of());\n+        ProjectNode projectNode = project(planBuilder, topnFareAndCity, ImmutableList.of(\"regionid\", \"city\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23a8495e0818f4629ea88facf77a18e6af9a5be2"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ1MjAyNw==", "bodyText": "For PQL we don't allow this (ordering on aggregated data) to be pushed down and we do topN operation in Presto so not impacted.\nFor SQL this is allowed and there are test cases which are passing. With aggregation it is not syntactically supported that a order by column doesn't appear in final selections so no need to add that test case.", "url": "https://github.com/prestodb/presto/pull/15053#discussion_r473452027", "createdAt": "2020-08-19T23:58:10Z", "author": {"login": "dharakk"}, "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/query/TestPinotQueryGenerator.java", "diffHunk": "@@ -366,6 +367,8 @@ public void testSimpleSelectWithTopN()\n                 \"SELECT regionId, city, fare FROM realtimeOnly ORDER BY fare, city DESC LIMIT 50\",\n                 defaultSessionHolder,\n                 ImmutableMap.of());\n+        ProjectNode projectNode = project(planBuilder, topnFareAndCity, ImmutableList.of(\"regionid\", \"city\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQzMTE3MA=="}, "originalCommit": {"oid": "23a8495e0818f4629ea88facf77a18e6af9a5be2"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1OTUwMzk0OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMDo0MDo0MVrOHDi7TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNDoxNjozNVrOHDo74Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ4MDAxMw==", "bodyText": "LinkedHashMap is an implementation, use Map in declaration:\nMap<VariableReferenceExpression, OrderingColumnInformation> orderByColumnInformation = new LinkedHashMap<>();", "url": "https://github.com/prestodb/presto/pull/15053#discussion_r473480013", "createdAt": "2020-08-20T00:40:41Z", "author": {"login": "zhenxiao"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "diffHunk": "@@ -254,14 +255,18 @@ public PinotQueryGeneratorContext withTopN(LinkedHashMap<VariableReferenceExpres\n             checkSupported(!hasAggregation(), \"Pinot doesn't support ordering on top of the aggregated data\");\n         }\n         int intLimit = checkForValidLimit(limit);\n+\n+        LinkedHashMap<VariableReferenceExpression, OrderingColumnInformation> orderByColumnInformation = new LinkedHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dd23025aa79c546523f33db727727b68e87e194"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ4NTIwNQ==", "bodyText": "I disagree with this :-) I prefer LinkedHashMap as a static type because it conveys the order sensitiveness. It signifies that order is important and that is indeed the approach we have taken with other field variables of this class.", "url": "https://github.com/prestodb/presto/pull/15053#discussion_r473485205", "createdAt": "2020-08-20T00:48:51Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "diffHunk": "@@ -254,14 +255,18 @@ public PinotQueryGeneratorContext withTopN(LinkedHashMap<VariableReferenceExpres\n             checkSupported(!hasAggregation(), \"Pinot doesn't support ordering on top of the aggregated data\");\n         }\n         int intLimit = checkForValidLimit(limit);\n+\n+        LinkedHashMap<VariableReferenceExpression, OrderingColumnInformation> orderByColumnInformation = new LinkedHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ4MDAxMw=="}, "originalCommit": {"oid": "3dd23025aa79c546523f33db727727b68e87e194"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ5MTc3MA==", "bodyText": "could be a separate discussion: just see a number of LinkedHashMap in this class for declaration.\nare we using LinkedHashMap's order sensitiveness anywhere? I think make LinkedHashMap as an implementation is a strong indication that we would like to keep the order sensitiveness. what do you think?", "url": "https://github.com/prestodb/presto/pull/15053#discussion_r473491770", "createdAt": "2020-08-20T00:59:12Z", "author": {"login": "zhenxiao"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "diffHunk": "@@ -254,14 +255,18 @@ public PinotQueryGeneratorContext withTopN(LinkedHashMap<VariableReferenceExpres\n             checkSupported(!hasAggregation(), \"Pinot doesn't support ordering on top of the aggregated data\");\n         }\n         int intLimit = checkForValidLimit(limit);\n+\n+        LinkedHashMap<VariableReferenceExpression, OrderingColumnInformation> orderByColumnInformation = new LinkedHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ4MDAxMw=="}, "originalCommit": {"oid": "3dd23025aa79c546523f33db727727b68e87e194"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzUyODI4OA==", "bodyText": "I think it is not a strong guarantee of type safety: The caller can easily pass in a simple Map to the underlying type instead of a LinkedHashMap and that could mess up the order.\nI wish Java had some sort of an interface for iteration sensitive Maps, since it doesn't I am advocating for letting the static type of the field remain LinkedHashMap to avoid stamping into it a non LinkedHashMap that messes up the order.\nYou would agree that such sort of bugs can be hard to track down and that having strong static type safety here would prevent them.", "url": "https://github.com/prestodb/presto/pull/15053#discussion_r473528288", "createdAt": "2020-08-20T01:55:24Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "diffHunk": "@@ -254,14 +255,18 @@ public PinotQueryGeneratorContext withTopN(LinkedHashMap<VariableReferenceExpres\n             checkSupported(!hasAggregation(), \"Pinot doesn't support ordering on top of the aggregated data\");\n         }\n         int intLimit = checkForValidLimit(limit);\n+\n+        LinkedHashMap<VariableReferenceExpression, OrderingColumnInformation> orderByColumnInformation = new LinkedHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ4MDAxMw=="}, "originalCommit": {"oid": "3dd23025aa79c546523f33db727727b68e87e194"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzUzNDMyNQ==", "bodyText": "could you please add more details, or some example code to show why order is important and needs to be kept here? I did not find LinkedHashMap's order sensitiveness is used in this class", "url": "https://github.com/prestodb/presto/pull/15053#discussion_r473534325", "createdAt": "2020-08-20T02:04:49Z", "author": {"login": "zhenxiao"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "diffHunk": "@@ -254,14 +255,18 @@ public PinotQueryGeneratorContext withTopN(LinkedHashMap<VariableReferenceExpres\n             checkSupported(!hasAggregation(), \"Pinot doesn't support ordering on top of the aggregated data\");\n         }\n         int intLimit = checkForValidLimit(limit);\n+\n+        LinkedHashMap<VariableReferenceExpression, OrderingColumnInformation> orderByColumnInformation = new LinkedHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ4MDAxMw=="}, "originalCommit": {"oid": "3dd23025aa79c546523f33db727727b68e87e194"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU0NTIwMA==", "bodyText": "I think the orderby columns stored here in orderByColumnInformation itself is a valid example as we would need to sort in the order we are seeing the columns. i.e. for  order by secondsSinceEpoch desc, 1 desc we need to preserve order of secondsSinceEpoch and city to satisfy the comparison requirement in sorting\nString orderByExpressions = topNColumnInformationMap.entrySet().stream().map(entry -> (entry.getValue().getSelection().getDefinition()) + (entry.getValue().getSortOrder().isAscending() ? \"\" : \" DESC\")).collect(Collectors.joining(\", \"));", "url": "https://github.com/prestodb/presto/pull/15053#discussion_r473545200", "createdAt": "2020-08-20T02:22:18Z", "author": {"login": "dharakk"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "diffHunk": "@@ -254,14 +255,18 @@ public PinotQueryGeneratorContext withTopN(LinkedHashMap<VariableReferenceExpres\n             checkSupported(!hasAggregation(), \"Pinot doesn't support ordering on top of the aggregated data\");\n         }\n         int intLimit = checkForValidLimit(limit);\n+\n+        LinkedHashMap<VariableReferenceExpression, OrderingColumnInformation> orderByColumnInformation = new LinkedHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ4MDAxMw=="}, "originalCommit": {"oid": "3dd23025aa79c546523f33db727727b68e87e194"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU3ODQ2NQ==", "bodyText": "get it. Do you think SortedMap and TreeMap could be a candidate to keep the order? We could do it in followup PR.", "url": "https://github.com/prestodb/presto/pull/15053#discussion_r473578465", "createdAt": "2020-08-20T04:16:35Z", "author": {"login": "zhenxiao"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "diffHunk": "@@ -254,14 +255,18 @@ public PinotQueryGeneratorContext withTopN(LinkedHashMap<VariableReferenceExpres\n             checkSupported(!hasAggregation(), \"Pinot doesn't support ordering on top of the aggregated data\");\n         }\n         int intLimit = checkForValidLimit(limit);\n+\n+        LinkedHashMap<VariableReferenceExpression, OrderingColumnInformation> orderByColumnInformation = new LinkedHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ4MDAxMw=="}, "originalCommit": {"oid": "3dd23025aa79c546523f33db727727b68e87e194"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1OTUwNzE4OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMDo0MTozMFrOHDi9kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMDo0MTozMFrOHDi9kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ4MDU5NQ==", "bodyText": "do we need this blank line?", "url": "https://github.com/prestodb/presto/pull/15053#discussion_r473480595", "createdAt": "2020-08-20T00:41:30Z", "author": {"login": "zhenxiao"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "diffHunk": "@@ -538,8 +543,9 @@ public PinotQueryGeneratorContext withOutputColumns(List<VariableReferenceExpres\n         LinkedHashSet<VariableReferenceExpression> newOutputs = new LinkedHashSet<>(outputColumns);\n         outputColumns.forEach(o -> requireNonNull(selections.get(o), String.format(\"Cannot find the selection %s in the original context %s\", o, this)));\n         // Hidden columns flow as is from the previous\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dd23025aa79c546523f33db727727b68e87e194"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1OTUwODk3OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMDo0MTo1NlrOHDi-pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMDo0OToxNlrOHDjQow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ4MDg2OQ==", "bodyText": "use Set for declaration", "url": "https://github.com/prestodb/presto/pull/15053#discussion_r473480869", "createdAt": "2020-08-20T00:41:56Z", "author": {"login": "zhenxiao"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "diffHunk": "@@ -538,8 +543,9 @@ public PinotQueryGeneratorContext withOutputColumns(List<VariableReferenceExpres\n         LinkedHashSet<VariableReferenceExpression> newOutputs = new LinkedHashSet<>(outputColumns);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dd23025aa79c546523f33db727727b68e87e194"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ4NTQ3NQ==", "bodyText": "I disagree for the same reason here.", "url": "https://github.com/prestodb/presto/pull/15053#discussion_r473485475", "createdAt": "2020-08-20T00:49:16Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "diffHunk": "@@ -538,8 +543,9 @@ public PinotQueryGeneratorContext withOutputColumns(List<VariableReferenceExpres\n         LinkedHashSet<VariableReferenceExpression> newOutputs = new LinkedHashSet<>(outputColumns);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ4MDg2OQ=="}, "originalCommit": {"oid": "3dd23025aa79c546523f33db727727b68e87e194"}, "originalPosition": 115}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3773, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}