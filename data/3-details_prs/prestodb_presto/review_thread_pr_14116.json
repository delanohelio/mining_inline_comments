{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2ODQzNzIx", "number": 14116, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwMzozMToyNVrODhVbhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMDo1NDoxMFrODiAmjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MjgwNzA5OnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/StructSelectiveStreamReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwMzozMToyNVrOFsB5Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwMzozMToyNVrOFsB5Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTcxMjc0Mw==", "bodyText": "Is there any reason for making an instance of MissingFieldStreamReader if output type is missing? I think not. If so, let's change the constructor to take Type (not Optional) and add requireNotNull.", "url": "https://github.com/prestodb/presto/pull/14116#discussion_r381712743", "createdAt": "2020-02-20T03:31:25Z", "author": {"login": "mbasmanova"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/StructSelectiveStreamReader.java", "diffHunk": "@@ -751,4 +766,78 @@ public long getRetainedSizeInBytes()\n             return INSTANCE_SIZE + sizeOf(outputPositions);\n         }\n     }\n+\n+    private static final class MissingFieldStreamReader\n+            implements SelectiveStreamReader\n+    {\n+        private static final int INSTANCE_SIZE = ClassLayout.parseClass(MissingFieldStreamReader.class).instanceSize();\n+        private final Type outputType;\n+        private int[] outputPositions;\n+        private int outputPositionCount;\n+\n+        MissingFieldStreamReader(Optional<Type> type)\n+        {\n+            this.outputType = type.isPresent() ? type.get() : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a2c9aa869825f4737ca7e29aed4202fee869079"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MjgxMDI4OnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/StructSelectiveStreamReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwMzozMjoxN1rOFsB66w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxOToyMTo1NlrOFsgELA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTcxMzEzMQ==", "bodyText": "Is this every used? Can it be implemented to throw NotImplementedException? Then, outputPositions variable can be removed and getRetainedSizeInBytes can become empty.", "url": "https://github.com/prestodb/presto/pull/14116#discussion_r381713131", "createdAt": "2020-02-20T03:32:17Z", "author": {"login": "mbasmanova"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/StructSelectiveStreamReader.java", "diffHunk": "@@ -751,4 +766,78 @@ public long getRetainedSizeInBytes()\n             return INSTANCE_SIZE + sizeOf(outputPositions);\n         }\n     }\n+\n+    private static final class MissingFieldStreamReader\n+            implements SelectiveStreamReader\n+    {\n+        private static final int INSTANCE_SIZE = ClassLayout.parseClass(MissingFieldStreamReader.class).instanceSize();\n+        private final Type outputType;\n+        private int[] outputPositions;\n+        private int outputPositionCount;\n+\n+        MissingFieldStreamReader(Optional<Type> type)\n+        {\n+            this.outputType = type.isPresent() ? type.get() : null;\n+        }\n+\n+        @Override\n+        public int read(int offset, int[] positions, int positionCount)\n+        {\n+            outputPositions = initializeOutputPositions(outputPositions, positions, positionCount);\n+            outputPositionCount = positionCount;\n+            return outputPositionCount;\n+        }\n+\n+        @Override\n+        public int[] getReadPositions()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a2c9aa869825f4737ca7e29aed4202fee869079"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjIwNzAyMA==", "bodyText": "This method is called for all the fields, so we will need it", "url": "https://github.com/prestodb/presto/pull/14116#discussion_r382207020", "createdAt": "2020-02-20T19:21:56Z", "author": {"login": "bhhari"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/StructSelectiveStreamReader.java", "diffHunk": "@@ -751,4 +766,78 @@ public long getRetainedSizeInBytes()\n             return INSTANCE_SIZE + sizeOf(outputPositions);\n         }\n     }\n+\n+    private static final class MissingFieldStreamReader\n+            implements SelectiveStreamReader\n+    {\n+        private static final int INSTANCE_SIZE = ClassLayout.parseClass(MissingFieldStreamReader.class).instanceSize();\n+        private final Type outputType;\n+        private int[] outputPositions;\n+        private int outputPositionCount;\n+\n+        MissingFieldStreamReader(Optional<Type> type)\n+        {\n+            this.outputType = type.isPresent() ? type.get() : null;\n+        }\n+\n+        @Override\n+        public int read(int offset, int[] positions, int positionCount)\n+        {\n+            outputPositions = initializeOutputPositions(outputPositions, positions, positionCount);\n+            outputPositionCount = positionCount;\n+            return outputPositionCount;\n+        }\n+\n+        @Override\n+        public int[] getReadPositions()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTcxMzEzMQ=="}, "originalCommit": {"oid": "5a2c9aa869825f4737ca7e29aed4202fee869079"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MjgxMzA4OnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/StructSelectiveStreamReader.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwMzozMjo1N1rOFsB8LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMToxMjoyN1rOFsoqhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTcxMzQ1Mg==", "bodyText": "use Optional.ofNullable", "url": "https://github.com/prestodb/presto/pull/14116#discussion_r381713452", "createdAt": "2020-02-20T03:32:57Z", "author": {"login": "mbasmanova"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/StructSelectiveStreamReader.java", "diffHunk": "@@ -143,34 +147,45 @@ public StructSelectiveStreamReader(\n                 .map(Subfield.NestedField::getName)\n                 .collect(toImmutableSet());\n \n-        if (!checkMissingFieldFilters(nestedStreams, filters)) {\n+        if (!checkMissingFieldFilters(nestedStreams.values(), filters)) {\n             this.missingFieldFilterIsFalse = true;\n             this.nestedReaders = ImmutableMap.of();\n             this.orderedNestedReaders = new SelectiveStreamReader[0];\n         }\n         else if (outputRequired || !fieldsWithFilters.isEmpty()) {\n             ImmutableMap.Builder<String, SelectiveStreamReader> nestedReaders = ImmutableMap.builder();\n-            for (int i = 0; i < nestedStreams.size(); i++) {\n-                StreamDescriptor nestedStream = nestedStreams.get(i);\n-                String fieldName = nestedStream.getFieldName().toLowerCase(Locale.ENGLISH);\n-                Optional<Type> fieldOutputType = nestedTypes.isPresent() ? Optional.of(nestedTypes.get().get(i)) : Optional.empty();\n+            Map<String, Field> nestedTypes = outputType.isPresent() ? ((RowType) this.outputType).getFields().stream()\n+                    .collect(toImmutableMap((f) -> f.getName()\n+                            .orElseThrow(() -> new IllegalArgumentException(\n+                                    \"ROW type does not have field names declared: \" + this.outputType))\n+                            .toLowerCase(Locale.ENGLISH), Function.identity()))\n+                    : ImmutableMap.of();\n+            Set<String> structFields = outputType.isPresent() ? nestedTypes.keySet() : nestedStreams.keySet();\n+            for (String fieldName : structFields) {\n+                StreamDescriptor nestedStream = nestedStreams.get(fieldName);\n                 boolean requiredField = requiredFields.map(names -> names.containsKey(fieldName)).orElse(outputRequired);\n+                Optional<Type> fieldOutputType = nestedTypes.get(fieldName) != null ? Optional.of(nestedTypes.get(fieldName).getType()) : Optional.empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a2c9aa869825f4737ca7e29aed4202fee869079"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMyMjA2MA==", "bodyText": "the Optional.empty is based on nestedTypes containing the fieldName, if its present then I m retrieving the subfield type. nestesTypes.get(field).geType", "url": "https://github.com/prestodb/presto/pull/14116#discussion_r382322060", "createdAt": "2020-02-20T23:43:03Z", "author": {"login": "bhhari"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/StructSelectiveStreamReader.java", "diffHunk": "@@ -143,34 +147,45 @@ public StructSelectiveStreamReader(\n                 .map(Subfield.NestedField::getName)\n                 .collect(toImmutableSet());\n \n-        if (!checkMissingFieldFilters(nestedStreams, filters)) {\n+        if (!checkMissingFieldFilters(nestedStreams.values(), filters)) {\n             this.missingFieldFilterIsFalse = true;\n             this.nestedReaders = ImmutableMap.of();\n             this.orderedNestedReaders = new SelectiveStreamReader[0];\n         }\n         else if (outputRequired || !fieldsWithFilters.isEmpty()) {\n             ImmutableMap.Builder<String, SelectiveStreamReader> nestedReaders = ImmutableMap.builder();\n-            for (int i = 0; i < nestedStreams.size(); i++) {\n-                StreamDescriptor nestedStream = nestedStreams.get(i);\n-                String fieldName = nestedStream.getFieldName().toLowerCase(Locale.ENGLISH);\n-                Optional<Type> fieldOutputType = nestedTypes.isPresent() ? Optional.of(nestedTypes.get().get(i)) : Optional.empty();\n+            Map<String, Field> nestedTypes = outputType.isPresent() ? ((RowType) this.outputType).getFields().stream()\n+                    .collect(toImmutableMap((f) -> f.getName()\n+                            .orElseThrow(() -> new IllegalArgumentException(\n+                                    \"ROW type does not have field names declared: \" + this.outputType))\n+                            .toLowerCase(Locale.ENGLISH), Function.identity()))\n+                    : ImmutableMap.of();\n+            Set<String> structFields = outputType.isPresent() ? nestedTypes.keySet() : nestedStreams.keySet();\n+            for (String fieldName : structFields) {\n+                StreamDescriptor nestedStream = nestedStreams.get(fieldName);\n                 boolean requiredField = requiredFields.map(names -> names.containsKey(fieldName)).orElse(outputRequired);\n+                Optional<Type> fieldOutputType = nestedTypes.get(fieldName) != null ? Optional.of(nestedTypes.get(fieldName).getType()) : Optional.empty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTcxMzQ1Mg=="}, "originalCommit": {"oid": "5a2c9aa869825f4737ca7e29aed4202fee869079"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM0NzkxMQ==", "bodyText": "Optional.ofNullable(nestedTypes.get(fieldName)).map(Field::getType)", "url": "https://github.com/prestodb/presto/pull/14116#discussion_r382347911", "createdAt": "2020-02-21T01:12:27Z", "author": {"login": "mbasmanova"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/StructSelectiveStreamReader.java", "diffHunk": "@@ -143,34 +147,45 @@ public StructSelectiveStreamReader(\n                 .map(Subfield.NestedField::getName)\n                 .collect(toImmutableSet());\n \n-        if (!checkMissingFieldFilters(nestedStreams, filters)) {\n+        if (!checkMissingFieldFilters(nestedStreams.values(), filters)) {\n             this.missingFieldFilterIsFalse = true;\n             this.nestedReaders = ImmutableMap.of();\n             this.orderedNestedReaders = new SelectiveStreamReader[0];\n         }\n         else if (outputRequired || !fieldsWithFilters.isEmpty()) {\n             ImmutableMap.Builder<String, SelectiveStreamReader> nestedReaders = ImmutableMap.builder();\n-            for (int i = 0; i < nestedStreams.size(); i++) {\n-                StreamDescriptor nestedStream = nestedStreams.get(i);\n-                String fieldName = nestedStream.getFieldName().toLowerCase(Locale.ENGLISH);\n-                Optional<Type> fieldOutputType = nestedTypes.isPresent() ? Optional.of(nestedTypes.get().get(i)) : Optional.empty();\n+            Map<String, Field> nestedTypes = outputType.isPresent() ? ((RowType) this.outputType).getFields().stream()\n+                    .collect(toImmutableMap((f) -> f.getName()\n+                            .orElseThrow(() -> new IllegalArgumentException(\n+                                    \"ROW type does not have field names declared: \" + this.outputType))\n+                            .toLowerCase(Locale.ENGLISH), Function.identity()))\n+                    : ImmutableMap.of();\n+            Set<String> structFields = outputType.isPresent() ? nestedTypes.keySet() : nestedStreams.keySet();\n+            for (String fieldName : structFields) {\n+                StreamDescriptor nestedStream = nestedStreams.get(fieldName);\n                 boolean requiredField = requiredFields.map(names -> names.containsKey(fieldName)).orElse(outputRequired);\n+                Optional<Type> fieldOutputType = nestedTypes.get(fieldName) != null ? Optional.of(nestedTypes.get(fieldName).getType()) : Optional.empty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTcxMzQ1Mg=="}, "originalCommit": {"oid": "5a2c9aa869825f4737ca7e29aed4202fee869079"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MjgxODc0OnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/StructSelectiveStreamReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwMzozNDoxNVrOFsB-yQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwMzozNDoxNVrOFsB-yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTcxNDEyMQ==", "bodyText": "f -> field\nremove parenthesis around f: (f) -> field", "url": "https://github.com/prestodb/presto/pull/14116#discussion_r381714121", "createdAt": "2020-02-20T03:34:15Z", "author": {"login": "mbasmanova"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/StructSelectiveStreamReader.java", "diffHunk": "@@ -143,34 +147,45 @@ public StructSelectiveStreamReader(\n                 .map(Subfield.NestedField::getName)\n                 .collect(toImmutableSet());\n \n-        if (!checkMissingFieldFilters(nestedStreams, filters)) {\n+        if (!checkMissingFieldFilters(nestedStreams.values(), filters)) {\n             this.missingFieldFilterIsFalse = true;\n             this.nestedReaders = ImmutableMap.of();\n             this.orderedNestedReaders = new SelectiveStreamReader[0];\n         }\n         else if (outputRequired || !fieldsWithFilters.isEmpty()) {\n             ImmutableMap.Builder<String, SelectiveStreamReader> nestedReaders = ImmutableMap.builder();\n-            for (int i = 0; i < nestedStreams.size(); i++) {\n-                StreamDescriptor nestedStream = nestedStreams.get(i);\n-                String fieldName = nestedStream.getFieldName().toLowerCase(Locale.ENGLISH);\n-                Optional<Type> fieldOutputType = nestedTypes.isPresent() ? Optional.of(nestedTypes.get().get(i)) : Optional.empty();\n+            Map<String, Field> nestedTypes = outputType.isPresent() ? ((RowType) this.outputType).getFields().stream()\n+                    .collect(toImmutableMap((f) -> f.getName()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a2c9aa869825f4737ca7e29aed4202fee869079"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2Njk3NzUzOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHivePushdownFilterQueries.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMTowMzozOVrOFsoiFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMTowMzozOVrOFsoiFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM0NTc0OA==", "bodyText": "Thanks for adding a test. I have some suggestions to make the test a little easier to read.\n\nCREATE and INSERT queries can be combined using CREATE TABLE AS SELECT (CTAS)\nfilePathOld -> oldFilePath\nfilePathNew -> newFilePath\ngetSinglePath -> getOnlyPath to match Guava naming\nMaterializedResult -> assertQuery\n\n        getQueryRunner().execute(\"CREATE TABLE test_struct(x) AS SELECT CAST(ROW(1, 2) AS ROW(a int, b int)) AS x\");\n        getQueryRunner().execute(\"CREATE TABLE test_struct_add_column(x) AS SELECT CAST(ROW(1, 2, 3) AS ROW(a int, b int, c int)) AS x\");\n        Path oldFilePath = getOnlyPath(\"test_struct\");\n        Path newDirectoryPath = getOnlyPath(\"test_struct_add_column\").getParent();\n        Files.move(oldFilePath, Paths.get(newDirectoryPath.toString(), \"old_file\"), ATOMIC_MOVE);\n\n        assertQuery(\"SELECT * FROM test_struct_add_column\", \"SELECT (1, 2, 3) UNION ALL SELECT (1, 2, null)\");", "url": "https://github.com/prestodb/presto/pull/14116#discussion_r382345748", "createdAt": "2020-02-21T01:03:39Z", "author": {"login": "mbasmanova"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHivePushdownFilterQueries.java", "diffHunk": "@@ -864,6 +872,25 @@ public void testSchemaEvolution()\n         assertUpdate(\"DROP TABLE test_schema_evolution\");\n     }\n \n+    @Test\n+    public void testStructSchemaEvolution()\n+            throws IOException\n+    {\n+        assertUpdate(\"CREATE TABLE struct_test(field0 ROW(a int, b int))\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07f6f22edee7c5b60e6167cdc26deb9cd9ee4c7b"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2Njk3OTMxOnYy", "diffSide": "RIGHT", "path": "presto-orc/src/test/java/com/facebook/presto/orc/TestMapFlatSelectiveStreamReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMTowNDo0MFrOFsojNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMTowNDo0MFrOFsojNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM0NjAzNg==", "bodyText": "static import TestMapFlatSelectiveStreamReader.ExpectedValuesBuilder.Frequency.SOME", "url": "https://github.com/prestodb/presto/pull/14116#discussion_r382346036", "createdAt": "2020-02-21T01:04:40Z", "author": {"login": "mbasmanova"}, "path": "presto-orc/src/test/java/com/facebook/presto/orc/TestMapFlatSelectiveStreamReader.java", "diffHunk": "@@ -275,8 +287,8 @@ public void testStructWithNull()\n         runTest(\n                 \"test_flat_map/flat_map_struct_with_null.dwrf\",\n                 INTEGER,\n-                rowType(INTEGER, INTEGER, INTEGER),\n-                ExpectedValuesBuilder.get(Function.identity(), TestMapFlatSelectiveStreamReader::intToList).setNullValuesFrequency(SOME));\n+                STRUCT_TYPE,\n+                ExpectedValuesBuilder.get(Function.identity(), TestMapFlatSelectiveStreamReader::intToList).setNullValuesFrequency(TestMapFlatSelectiveStreamReader.ExpectedValuesBuilder.Frequency.SOME));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07f6f22edee7c5b60e6167cdc26deb9cd9ee4c7b"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2Njk4Mzg1OnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/StructSelectiveStreamReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMTowNzoyNVrOFsomAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMTowNzoyNVrOFsomAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM0Njc1Mg==", "bodyText": "return createNullBlock(outputType, positionCount);", "url": "https://github.com/prestodb/presto/pull/14116#discussion_r382346752", "createdAt": "2020-02-21T01:07:25Z", "author": {"login": "mbasmanova"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/StructSelectiveStreamReader.java", "diffHunk": "@@ -751,4 +766,79 @@ public long getRetainedSizeInBytes()\n             return INSTANCE_SIZE + sizeOf(outputPositions);\n         }\n     }\n+\n+    private static final class MissingFieldStreamReader\n+            implements SelectiveStreamReader\n+    {\n+        private static final int INSTANCE_SIZE = ClassLayout.parseClass(MissingFieldStreamReader.class).instanceSize();\n+        private final Type outputType;\n+        private int[] outputPositions;\n+        private int outputPositionCount;\n+\n+        MissingFieldStreamReader(Type type)\n+        {\n+            requireNonNull(type, \"type is required\");\n+            this.outputType = type;\n+        }\n+\n+        @Override\n+        public int read(int offset, int[] positions, int positionCount)\n+        {\n+            outputPositions = initializeOutputPositions(outputPositions, positions, positionCount);\n+            outputPositionCount = positionCount;\n+            return outputPositionCount;\n+        }\n+\n+        @Override\n+        public int[] getReadPositions()\n+        {\n+            return outputPositions;\n+        }\n+\n+        @Override\n+        public Block getBlock(int[] positions, int positionCount)\n+        {\n+            checkState(outputType != null, \"This stream reader produces null block \");\n+            return RunLengthEncodedBlock.create(outputType, null, positionCount);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07f6f22edee7c5b60e6167cdc26deb9cd9ee4c7b"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2Njk4NDExOnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/StructSelectiveStreamReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMTowNzozNFrOFsomIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMTowNzozNFrOFsomIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM0Njc4NA==", "bodyText": "return ClosingBlockLease.newLease(createNullBlock(outputType, positionCount));", "url": "https://github.com/prestodb/presto/pull/14116#discussion_r382346784", "createdAt": "2020-02-21T01:07:34Z", "author": {"login": "mbasmanova"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/StructSelectiveStreamReader.java", "diffHunk": "@@ -751,4 +766,79 @@ public long getRetainedSizeInBytes()\n             return INSTANCE_SIZE + sizeOf(outputPositions);\n         }\n     }\n+\n+    private static final class MissingFieldStreamReader\n+            implements SelectiveStreamReader\n+    {\n+        private static final int INSTANCE_SIZE = ClassLayout.parseClass(MissingFieldStreamReader.class).instanceSize();\n+        private final Type outputType;\n+        private int[] outputPositions;\n+        private int outputPositionCount;\n+\n+        MissingFieldStreamReader(Type type)\n+        {\n+            requireNonNull(type, \"type is required\");\n+            this.outputType = type;\n+        }\n+\n+        @Override\n+        public int read(int offset, int[] positions, int positionCount)\n+        {\n+            outputPositions = initializeOutputPositions(outputPositions, positions, positionCount);\n+            outputPositionCount = positionCount;\n+            return outputPositionCount;\n+        }\n+\n+        @Override\n+        public int[] getReadPositions()\n+        {\n+            return outputPositions;\n+        }\n+\n+        @Override\n+        public Block getBlock(int[] positions, int positionCount)\n+        {\n+            checkState(outputType != null, \"This stream reader produces null block \");\n+            return RunLengthEncodedBlock.create(outputType, null, positionCount);\n+        }\n+\n+        @Override\n+        public BlockLease getBlockView(int[] positions, int positionCount)\n+        {\n+            checkState(outputType != null, \"This stream reader produces null block\");\n+            return ClosingBlockLease.newLease(RunLengthEncodedBlock.create(outputType, null, positionCount));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07f6f22edee7c5b60e6167cdc26deb9cd9ee4c7b"}, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2Njk4NTAyOnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/StructSelectiveStreamReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMTowODoxMVrOFsomsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMTowODoxMVrOFsomsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM0NjkyOQ==", "bodyText": "This check can never fail. Remove.", "url": "https://github.com/prestodb/presto/pull/14116#discussion_r382346929", "createdAt": "2020-02-21T01:08:11Z", "author": {"login": "mbasmanova"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/StructSelectiveStreamReader.java", "diffHunk": "@@ -751,4 +766,79 @@ public long getRetainedSizeInBytes()\n             return INSTANCE_SIZE + sizeOf(outputPositions);\n         }\n     }\n+\n+    private static final class MissingFieldStreamReader\n+            implements SelectiveStreamReader\n+    {\n+        private static final int INSTANCE_SIZE = ClassLayout.parseClass(MissingFieldStreamReader.class).instanceSize();\n+        private final Type outputType;\n+        private int[] outputPositions;\n+        private int outputPositionCount;\n+\n+        MissingFieldStreamReader(Type type)\n+        {\n+            requireNonNull(type, \"type is required\");\n+            this.outputType = type;\n+        }\n+\n+        @Override\n+        public int read(int offset, int[] positions, int positionCount)\n+        {\n+            outputPositions = initializeOutputPositions(outputPositions, positions, positionCount);\n+            outputPositionCount = positionCount;\n+            return outputPositionCount;\n+        }\n+\n+        @Override\n+        public int[] getReadPositions()\n+        {\n+            return outputPositions;\n+        }\n+\n+        @Override\n+        public Block getBlock(int[] positions, int positionCount)\n+        {\n+            checkState(outputType != null, \"This stream reader produces null block \");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07f6f22edee7c5b60e6167cdc26deb9cd9ee4c7b"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2Njk4NTkwOnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/StructSelectiveStreamReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMTowODozOFrOFsonIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMTowODozOFrOFsonIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM0NzA0Mw==", "bodyText": "combine with assignment\nthis.outputType = requireNonNull(type, \"type is required\");", "url": "https://github.com/prestodb/presto/pull/14116#discussion_r382347043", "createdAt": "2020-02-21T01:08:38Z", "author": {"login": "mbasmanova"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/StructSelectiveStreamReader.java", "diffHunk": "@@ -751,4 +766,79 @@ public long getRetainedSizeInBytes()\n             return INSTANCE_SIZE + sizeOf(outputPositions);\n         }\n     }\n+\n+    private static final class MissingFieldStreamReader\n+            implements SelectiveStreamReader\n+    {\n+        private static final int INSTANCE_SIZE = ClassLayout.parseClass(MissingFieldStreamReader.class).instanceSize();\n+        private final Type outputType;\n+        private int[] outputPositions;\n+        private int outputPositionCount;\n+\n+        MissingFieldStreamReader(Type type)\n+        {\n+            requireNonNull(type, \"type is required\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07f6f22edee7c5b60e6167cdc26deb9cd9ee4c7b"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2Njk4NzEyOnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/StructSelectiveStreamReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMTowOToxOVrOFsonzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMTowOToxOVrOFsonzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM0NzIxMw==", "bodyText": "This check can never fail. Remove.", "url": "https://github.com/prestodb/presto/pull/14116#discussion_r382347213", "createdAt": "2020-02-21T01:09:19Z", "author": {"login": "mbasmanova"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/StructSelectiveStreamReader.java", "diffHunk": "@@ -751,4 +766,79 @@ public long getRetainedSizeInBytes()\n             return INSTANCE_SIZE + sizeOf(outputPositions);\n         }\n     }\n+\n+    private static final class MissingFieldStreamReader\n+            implements SelectiveStreamReader\n+    {\n+        private static final int INSTANCE_SIZE = ClassLayout.parseClass(MissingFieldStreamReader.class).instanceSize();\n+        private final Type outputType;\n+        private int[] outputPositions;\n+        private int outputPositionCount;\n+\n+        MissingFieldStreamReader(Type type)\n+        {\n+            requireNonNull(type, \"type is required\");\n+            this.outputType = type;\n+        }\n+\n+        @Override\n+        public int read(int offset, int[] positions, int positionCount)\n+        {\n+            outputPositions = initializeOutputPositions(outputPositions, positions, positionCount);\n+            outputPositionCount = positionCount;\n+            return outputPositionCount;\n+        }\n+\n+        @Override\n+        public int[] getReadPositions()\n+        {\n+            return outputPositions;\n+        }\n+\n+        @Override\n+        public Block getBlock(int[] positions, int positionCount)\n+        {\n+            checkState(outputType != null, \"This stream reader produces null block \");\n+            return RunLengthEncodedBlock.create(outputType, null, positionCount);\n+        }\n+\n+        @Override\n+        public BlockLease getBlockView(int[] positions, int positionCount)\n+        {\n+            checkState(outputType != null, \"This stream reader produces null block\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07f6f22edee7c5b60e6167cdc26deb9cd9ee4c7b"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2Njk4ODQ1OnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/StructSelectiveStreamReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMToxMDoxOFrOFsoomA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMToxMDoxOFrOFsoomA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM0NzQxNg==", "bodyText": "outputPositionCount variable is not used; remove it\nreturn positionCount;", "url": "https://github.com/prestodb/presto/pull/14116#discussion_r382347416", "createdAt": "2020-02-21T01:10:18Z", "author": {"login": "mbasmanova"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/StructSelectiveStreamReader.java", "diffHunk": "@@ -751,4 +766,79 @@ public long getRetainedSizeInBytes()\n             return INSTANCE_SIZE + sizeOf(outputPositions);\n         }\n     }\n+\n+    private static final class MissingFieldStreamReader\n+            implements SelectiveStreamReader\n+    {\n+        private static final int INSTANCE_SIZE = ClassLayout.parseClass(MissingFieldStreamReader.class).instanceSize();\n+        private final Type outputType;\n+        private int[] outputPositions;\n+        private int outputPositionCount;\n+\n+        MissingFieldStreamReader(Type type)\n+        {\n+            requireNonNull(type, \"type is required\");\n+            this.outputType = type;\n+        }\n+\n+        @Override\n+        public int read(int offset, int[] positions, int positionCount)\n+        {\n+            outputPositions = initializeOutputPositions(outputPositions, positions, positionCount);\n+            outputPositionCount = positionCount;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07f6f22edee7c5b60e6167cdc26deb9cd9ee4c7b"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTg4MDQ2OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHivePushdownFilterQueries.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMDo1NDoxMFrOFtET4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMDo1NDoxMFrOFtET4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgwMDg2NA==", "bodyText": "nit: getOnlyPath might be a better name - https://guava.dev/releases/20.0/api/docs/com/google/common/collect/Iterables.html#getOnlyElement-java.lang.Iterable-T-", "url": "https://github.com/prestodb/presto/pull/14116#discussion_r382800864", "createdAt": "2020-02-21T20:54:10Z", "author": {"login": "mbasmanova"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHivePushdownFilterQueries.java", "diffHunk": "@@ -1055,6 +1068,12 @@ private Path getPartitionDirectory(String tableName, String partitionClause)\n         return Paths.get(filePath).getParent();\n     }\n \n+\n+    private Path getSinglePath(String tableName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97d0a35c50a5ba673ed9851f684c34888e296e5f"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3036, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}