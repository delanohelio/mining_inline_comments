{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4MDQzNjg3", "number": 14833, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwMToxMDo0N1rOERqrlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwMToxMToxMlrOERqr6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTYwNTM1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/server/protocol/QueryProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwMToxMDo0N1rOG2gfgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNDo1Mjo0MFrOG2jFEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgwODY0Mw==", "bodyText": "Do we need abstraction if there is only one implementation?", "url": "https://github.com/prestodb/presto/pull/14833#discussion_r459808643", "createdAt": "2020-07-24T01:10:47Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/server/protocol/QueryProvider.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.server.protocol;\n+\n+import com.facebook.presto.spi.QueryId;\n+\n+public interface QueryProvider", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47a34d776355161adbb36aed04bfacf237e15a0e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg1MTAyNg==", "bodyText": "It will be used later, but I'll remove it since there's no immediate need for it now.", "url": "https://github.com/prestodb/presto/pull/14833#discussion_r459851026", "createdAt": "2020-07-24T04:52:40Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/main/java/com/facebook/presto/server/protocol/QueryProvider.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.server.protocol;\n+\n+import com.facebook.presto.spi.QueryId;\n+\n+public interface QueryProvider", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgwODY0Mw=="}, "originalCommit": {"oid": "47a34d776355161adbb36aed04bfacf237e15a0e"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTYwNjE4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/server/protocol/LocalQueryProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwMToxMToxMlrOG2gf7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwMToxMToxMlrOG2gf7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgwODc1MA==", "bodyText": "Many consts here seem to be unused.", "url": "https://github.com/prestodb/presto/pull/14833#discussion_r459808750", "createdAt": "2020-07-24T01:11:12Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/server/protocol/LocalQueryProvider.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.server.protocol;\n+\n+import com.facebook.airlift.concurrent.BoundedExecutor;\n+import com.facebook.airlift.log.Logger;\n+import com.facebook.presto.Session;\n+import com.facebook.presto.common.block.BlockEncodingSerde;\n+import com.facebook.presto.execution.QueryManager;\n+import com.facebook.presto.memory.context.SimpleLocalMemoryContext;\n+import com.facebook.presto.operator.ExchangeClient;\n+import com.facebook.presto.operator.ExchangeClientSupplier;\n+import com.facebook.presto.server.ForStatementResource;\n+import com.facebook.presto.spi.QueryId;\n+import com.google.common.collect.Ordering;\n+import io.airlift.units.DataSize;\n+import io.airlift.units.Duration;\n+\n+import javax.annotation.PostConstruct;\n+import javax.annotation.PreDestroy;\n+import javax.inject.Inject;\n+import javax.ws.rs.WebApplicationException;\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.core.Response.Status;\n+\n+import java.util.Map.Entry;\n+import java.util.NoSuchElementException;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.concurrent.ScheduledExecutorService;\n+\n+import static com.facebook.airlift.concurrent.Threads.threadsNamed;\n+import static com.facebook.presto.memory.context.AggregatedMemoryContext.newSimpleAggregatedMemoryContext;\n+import static io.airlift.units.DataSize.Unit.MEGABYTE;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.Executors.newSingleThreadScheduledExecutor;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static javax.ws.rs.core.MediaType.TEXT_PLAIN_TYPE;\n+\n+public class LocalQueryProvider\n+        implements QueryProvider\n+{\n+    private static final Logger log = Logger.get(LocalQueryProvider.class);\n+    private static final Duration MAX_WAIT_TIME = new Duration(1, SECONDS);\n+    private static final Ordering<Comparable<Duration>> WAIT_ORDERING = Ordering.natural().nullsLast();\n+\n+    private static final DataSize DEFAULT_TARGET_RESULT_SIZE = new DataSize(1, MEGABYTE);\n+    private static final DataSize MAX_TARGET_RESULT_SIZE = new DataSize(128, MEGABYTE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47a34d776355161adbb36aed04bfacf237e15a0e"}, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2358, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}