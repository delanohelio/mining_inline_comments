{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3NTA5NDAy", "number": 14119, "reviewThreads": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQyMDo0MDoyOFrODiGsuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQyMjowMjoxOVrODmIBlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDg3OTI5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/metadata/BuiltInFunctionNamespaceManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQyMDo0MDoyOFrOFtMzbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQyMDo0MDoyOFrOFtMzbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk0MDAxNA==", "bodyText": "This takes in a vararg, so you can group the scalars and aggregates in one line", "url": "https://github.com/prestodb/presto/pull/14119#discussion_r382940014", "createdAt": "2020-02-22T20:40:28Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/main/java/com/facebook/presto/metadata/BuiltInFunctionNamespaceManager.java", "diffHunk": "@@ -670,6 +674,10 @@ public BuiltInFunctionNamespaceManager(\n                 .aggregate(BuildSetDigestAggregation.class)\n                 .scalars(SetDigestFunctions.class)\n                 .scalars(SetDigestOperators.class)\n+                .aggregates(MergeKHyperLogLogAggregation.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10eed0c050d85b68972b40e12ea43456f88e6f44"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDg4MDEzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/type/TypeRegistry.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQyMDo0MTo0OFrOFtMz0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNzoyNDoxOFrOFxiUug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk0MDExMg==", "bodyText": "Can you explain the purpose of this refactoring?", "url": "https://github.com/prestodb/presto/pull/14119#discussion_r382940112", "createdAt": "2020-02-22T20:41:48Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/main/java/com/facebook/presto/type/TypeRegistry.java", "diffHunk": "@@ -169,6 +170,40 @@ public TypeRegistry(Set<Type> types, FeaturesConfig featuresConfig)\n                 .build(CacheLoader.from(this::instantiateParametricType));\n     }\n \n+    private static Type getCommonSuperTypeForDecimal(DecimalType firstType, DecimalType secondType)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10eed0c050d85b68972b40e12ea43456f88e6f44"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ2MzM3NA==", "bodyText": "I ran an automatic refactor on IntelliJ complying to Airlift style, and this change was made. Should I revert?", "url": "https://github.com/prestodb/presto/pull/14119#discussion_r383463374", "createdAt": "2020-02-24T19:21:02Z", "author": {"login": "mcorreaiz"}, "path": "presto-main/src/main/java/com/facebook/presto/type/TypeRegistry.java", "diffHunk": "@@ -169,6 +170,40 @@ public TypeRegistry(Set<Type> types, FeaturesConfig featuresConfig)\n                 .build(CacheLoader.from(this::instantiateParametricType));\n     }\n \n+    private static Type getCommonSuperTypeForDecimal(DecimalType firstType, DecimalType secondType)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk0MDExMg=="}, "originalCommit": {"oid": "10eed0c050d85b68972b40e12ea43456f88e6f44"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4NjkwNg==", "bodyText": "Yes, please revert the unrelated change", "url": "https://github.com/prestodb/presto/pull/14119#discussion_r387486906", "createdAt": "2020-03-04T07:24:18Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/main/java/com/facebook/presto/type/TypeRegistry.java", "diffHunk": "@@ -169,6 +170,40 @@ public TypeRegistry(Set<Type> types, FeaturesConfig featuresConfig)\n                 .build(CacheLoader.from(this::instantiateParametricType));\n     }\n \n+    private static Type getCommonSuperTypeForDecimal(DecimalType firstType, DecimalType secondType)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk0MDExMg=="}, "originalCommit": {"oid": "10eed0c050d85b68972b40e12ea43456f88e6f44"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDg4MDIxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/type/TypeRegistry.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQyMDo0MjowM1rOFtMz3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQyMDo0MjowM1rOFtMz3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk0MDEyNA==", "bodyText": "You can leave the set digest position how it was", "url": "https://github.com/prestodb/presto/pull/14119#discussion_r382940124", "createdAt": "2020-02-22T20:42:03Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/main/java/com/facebook/presto/type/TypeRegistry.java", "diffHunk": "@@ -464,11 +476,12 @@ public void addParametricType(ParametricType parametricType)\n                     case StandardTypes.TIMESTAMP:\n                     case StandardTypes.TIMESTAMP_WITH_TIME_ZONE:\n                     case StandardTypes.HYPER_LOG_LOG:\n-                    case SetDigestType.NAME:\n                     case StandardTypes.P4_HYPER_LOG_LOG:\n                     case StandardTypes.JSON:\n                     case StandardTypes.INTERVAL_YEAR_TO_MONTH:\n                     case StandardTypes.INTERVAL_DAY_TO_SECOND:\n+                    case SetDigestType.NAME:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10eed0c050d85b68972b40e12ea43456f88e6f44"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDg4MDQ2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/type/khyperloglog/BuildKHyperLogLogAggregation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQyMDo0Mjo0MVrOFtMz-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQyMDo0Mjo0MVrOFtMz-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk0MDE1NQ==", "bodyText": "I would call this kyperloglog_agg", "url": "https://github.com/prestodb/presto/pull/14119#discussion_r382940155", "createdAt": "2020-02-22T20:42:41Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/main/java/com/facebook/presto/type/khyperloglog/BuildKHyperLogLogAggregation.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.facebook.presto.type.khyperloglog;\n+\n+import com.facebook.presto.spi.block.BlockBuilder;\n+import com.facebook.presto.spi.function.AggregationFunction;\n+import com.facebook.presto.spi.function.AggregationState;\n+import com.facebook.presto.spi.function.CombineFunction;\n+import com.facebook.presto.spi.function.InputFunction;\n+import com.facebook.presto.spi.function.LiteralParameters;\n+import com.facebook.presto.spi.function.OutputFunction;\n+import com.facebook.presto.spi.function.SqlType;\n+import com.facebook.presto.spi.type.StandardTypes;\n+import io.airlift.slice.Murmur3Hash128;\n+import io.airlift.slice.Slice;\n+\n+@AggregationFunction(\"make_khyperloglog\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10eed0c050d85b68972b40e12ea43456f88e6f44"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDg4NDc0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/type/khyperloglog/BuildKHyperLogLogAggregation.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQyMDo1MTo0MFrOFtM2EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMTowMTozM1rOFtvtAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk0MDY4OA==", "bodyText": "Have you considered xxhash?", "url": "https://github.com/prestodb/presto/pull/14119#discussion_r382940688", "createdAt": "2020-02-22T20:51:40Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/main/java/com/facebook/presto/type/khyperloglog/BuildKHyperLogLogAggregation.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.facebook.presto.type.khyperloglog;\n+\n+import com.facebook.presto.spi.block.BlockBuilder;\n+import com.facebook.presto.spi.function.AggregationFunction;\n+import com.facebook.presto.spi.function.AggregationState;\n+import com.facebook.presto.spi.function.CombineFunction;\n+import com.facebook.presto.spi.function.InputFunction;\n+import com.facebook.presto.spi.function.LiteralParameters;\n+import com.facebook.presto.spi.function.OutputFunction;\n+import com.facebook.presto.spi.function.SqlType;\n+import com.facebook.presto.spi.type.StandardTypes;\n+import io.airlift.slice.Murmur3Hash128;\n+import io.airlift.slice.Slice;\n+\n+@AggregationFunction(\"make_khyperloglog\")\n+public final class BuildKHyperLogLogAggregation\n+{\n+    private static final KHyperLogLogStateSerializer SERIALIZER = new KHyperLogLogStateSerializer();\n+\n+    private BuildKHyperLogLogAggregation() {}\n+\n+    @InputFunction\n+    public static void input(@AggregationState KHyperLogLogState state, @SqlType(StandardTypes.BIGINT) long value, @SqlType(StandardTypes.BIGINT) long uii)\n+    {\n+        if (state.getKHLL() == null) {\n+            state.setKHLL(new KHyperLogLog());\n+        }\n+        state.getKHLL().add(value, uii);\n+    }\n+\n+    @InputFunction\n+    @LiteralParameters(\"x\")\n+    public static void input(@AggregationState KHyperLogLogState state, @SqlType(\"varchar(x)\") Slice value, @SqlType(StandardTypes.BIGINT) long uii)\n+    {\n+        if (state.getKHLL() == null) {\n+            state.setKHLL(new KHyperLogLog());\n+        }\n+        state.getKHLL().add(value, uii);\n+    }\n+\n+    @InputFunction\n+    public static void input(@AggregationState KHyperLogLogState state, @SqlType(StandardTypes.DOUBLE) double value, @SqlType(StandardTypes.BIGINT) long uii)\n+    {\n+        input(state, Double.doubleToLongBits(value), uii);\n+    }\n+\n+    @InputFunction\n+    @LiteralParameters(\"x\")\n+    public static void input(@AggregationState KHyperLogLogState state, @SqlType(StandardTypes.BIGINT) long value, @SqlType(\"varchar(x)\") Slice uii)\n+    {\n+        input(state, value, Murmur3Hash128.hash64(uii));\n+    }\n+\n+    @InputFunction\n+    @LiteralParameters({\"x\", \"y\"})\n+    public static void input(@AggregationState KHyperLogLogState state, @SqlType(\"varchar(x)\") Slice value, @SqlType(\"varchar(y)\") Slice uii)\n+    {\n+        input(state, value, Murmur3Hash128.hash64(uii));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10eed0c050d85b68972b40e12ea43456f88e6f44"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ1Njg2Nw==", "bodyText": "I had not, but makes absolute sense.", "url": "https://github.com/prestodb/presto/pull/14119#discussion_r383456867", "createdAt": "2020-02-24T19:08:03Z", "author": {"login": "mcorreaiz"}, "path": "presto-main/src/main/java/com/facebook/presto/type/khyperloglog/BuildKHyperLogLogAggregation.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.facebook.presto.type.khyperloglog;\n+\n+import com.facebook.presto.spi.block.BlockBuilder;\n+import com.facebook.presto.spi.function.AggregationFunction;\n+import com.facebook.presto.spi.function.AggregationState;\n+import com.facebook.presto.spi.function.CombineFunction;\n+import com.facebook.presto.spi.function.InputFunction;\n+import com.facebook.presto.spi.function.LiteralParameters;\n+import com.facebook.presto.spi.function.OutputFunction;\n+import com.facebook.presto.spi.function.SqlType;\n+import com.facebook.presto.spi.type.StandardTypes;\n+import io.airlift.slice.Murmur3Hash128;\n+import io.airlift.slice.Slice;\n+\n+@AggregationFunction(\"make_khyperloglog\")\n+public final class BuildKHyperLogLogAggregation\n+{\n+    private static final KHyperLogLogStateSerializer SERIALIZER = new KHyperLogLogStateSerializer();\n+\n+    private BuildKHyperLogLogAggregation() {}\n+\n+    @InputFunction\n+    public static void input(@AggregationState KHyperLogLogState state, @SqlType(StandardTypes.BIGINT) long value, @SqlType(StandardTypes.BIGINT) long uii)\n+    {\n+        if (state.getKHLL() == null) {\n+            state.setKHLL(new KHyperLogLog());\n+        }\n+        state.getKHLL().add(value, uii);\n+    }\n+\n+    @InputFunction\n+    @LiteralParameters(\"x\")\n+    public static void input(@AggregationState KHyperLogLogState state, @SqlType(\"varchar(x)\") Slice value, @SqlType(StandardTypes.BIGINT) long uii)\n+    {\n+        if (state.getKHLL() == null) {\n+            state.setKHLL(new KHyperLogLog());\n+        }\n+        state.getKHLL().add(value, uii);\n+    }\n+\n+    @InputFunction\n+    public static void input(@AggregationState KHyperLogLogState state, @SqlType(StandardTypes.DOUBLE) double value, @SqlType(StandardTypes.BIGINT) long uii)\n+    {\n+        input(state, Double.doubleToLongBits(value), uii);\n+    }\n+\n+    @InputFunction\n+    @LiteralParameters(\"x\")\n+    public static void input(@AggregationState KHyperLogLogState state, @SqlType(StandardTypes.BIGINT) long value, @SqlType(\"varchar(x)\") Slice uii)\n+    {\n+        input(state, value, Murmur3Hash128.hash64(uii));\n+    }\n+\n+    @InputFunction\n+    @LiteralParameters({\"x\", \"y\"})\n+    public static void input(@AggregationState KHyperLogLogState state, @SqlType(\"varchar(x)\") Slice value, @SqlType(\"varchar(y)\") Slice uii)\n+    {\n+        input(state, value, Murmur3Hash128.hash64(uii));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk0MDY4OA=="}, "originalCommit": {"oid": "10eed0c050d85b68972b40e12ea43456f88e6f44"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUxMTgwOQ==", "bodyText": "I had not, but makes sense.", "url": "https://github.com/prestodb/presto/pull/14119#discussion_r383511809", "createdAt": "2020-02-24T21:01:33Z", "author": {"login": "mcorreaiz"}, "path": "presto-main/src/main/java/com/facebook/presto/type/khyperloglog/BuildKHyperLogLogAggregation.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.facebook.presto.type.khyperloglog;\n+\n+import com.facebook.presto.spi.block.BlockBuilder;\n+import com.facebook.presto.spi.function.AggregationFunction;\n+import com.facebook.presto.spi.function.AggregationState;\n+import com.facebook.presto.spi.function.CombineFunction;\n+import com.facebook.presto.spi.function.InputFunction;\n+import com.facebook.presto.spi.function.LiteralParameters;\n+import com.facebook.presto.spi.function.OutputFunction;\n+import com.facebook.presto.spi.function.SqlType;\n+import com.facebook.presto.spi.type.StandardTypes;\n+import io.airlift.slice.Murmur3Hash128;\n+import io.airlift.slice.Slice;\n+\n+@AggregationFunction(\"make_khyperloglog\")\n+public final class BuildKHyperLogLogAggregation\n+{\n+    private static final KHyperLogLogStateSerializer SERIALIZER = new KHyperLogLogStateSerializer();\n+\n+    private BuildKHyperLogLogAggregation() {}\n+\n+    @InputFunction\n+    public static void input(@AggregationState KHyperLogLogState state, @SqlType(StandardTypes.BIGINT) long value, @SqlType(StandardTypes.BIGINT) long uii)\n+    {\n+        if (state.getKHLL() == null) {\n+            state.setKHLL(new KHyperLogLog());\n+        }\n+        state.getKHLL().add(value, uii);\n+    }\n+\n+    @InputFunction\n+    @LiteralParameters(\"x\")\n+    public static void input(@AggregationState KHyperLogLogState state, @SqlType(\"varchar(x)\") Slice value, @SqlType(StandardTypes.BIGINT) long uii)\n+    {\n+        if (state.getKHLL() == null) {\n+            state.setKHLL(new KHyperLogLog());\n+        }\n+        state.getKHLL().add(value, uii);\n+    }\n+\n+    @InputFunction\n+    public static void input(@AggregationState KHyperLogLogState state, @SqlType(StandardTypes.DOUBLE) double value, @SqlType(StandardTypes.BIGINT) long uii)\n+    {\n+        input(state, Double.doubleToLongBits(value), uii);\n+    }\n+\n+    @InputFunction\n+    @LiteralParameters(\"x\")\n+    public static void input(@AggregationState KHyperLogLogState state, @SqlType(StandardTypes.BIGINT) long value, @SqlType(\"varchar(x)\") Slice uii)\n+    {\n+        input(state, value, Murmur3Hash128.hash64(uii));\n+    }\n+\n+    @InputFunction\n+    @LiteralParameters({\"x\", \"y\"})\n+    public static void input(@AggregationState KHyperLogLogState state, @SqlType(\"varchar(x)\") Slice value, @SqlType(\"varchar(y)\") Slice uii)\n+    {\n+        input(state, value, Murmur3Hash128.hash64(uii));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk0MDY4OA=="}, "originalCommit": {"oid": "10eed0c050d85b68972b40e12ea43456f88e6f44"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDg4Nzg5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/type/khyperloglog/KHyperLogLog.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQyMDo1OTowMVrOFtM3qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQyMTowMDo0MVrOFtM4DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk0MTA5OQ==", "bodyText": "For the serialization format, I would consider first serializing the total bytes for all of the HLLs, then serializing the minhashSize, then serializing a vector of individual HLL lengths.  That way you can allocate one large Slice for the entire block of memory with all of the HLLs fitting contiguously, and then iterate over the vector of individual lengths to create slices on this slab of memory for each individual HLL.  It should speed of the serialization/deserialization.", "url": "https://github.com/prestodb/presto/pull/14119#discussion_r382941099", "createdAt": "2020-02-22T20:59:01Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/main/java/com/facebook/presto/type/khyperloglog/KHyperLogLog.java", "diffHunk": "@@ -0,0 +1,285 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.facebook.presto.type.khyperloglog;\n+\n+import com.facebook.airlift.stats.cardinality.HyperLogLog;\n+import com.google.common.collect.Sets;\n+import io.airlift.slice.DynamicSliceOutput;\n+import io.airlift.slice.Murmur3Hash128;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.SliceInput;\n+import io.airlift.slice.SliceOutput;\n+import io.airlift.slice.Slices;\n+import it.unimi.dsi.fastutil.longs.Long2ObjectRBTreeMap;\n+import it.unimi.dsi.fastutil.longs.Long2ObjectSortedMap;\n+import it.unimi.dsi.fastutil.longs.LongBidirectionalIterator;\n+import it.unimi.dsi.fastutil.longs.LongRBTreeSet;\n+import it.unimi.dsi.fastutil.longs.LongSortedSet;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.stream.LongStream;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static io.airlift.slice.SizeOf.SIZE_OF_BYTE;\n+import static io.airlift.slice.SizeOf.SIZE_OF_INT;\n+import static io.airlift.slice.SizeOf.SIZE_OF_LONG;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * For reference on KHyperLogLog, see \"KHyperLogLog: Estimating Reidentifiability and\n+ * Joinability of Large Data at Scale\" by Chia et al., 2019.\n+ */\n+public class KHyperLogLog\n+{\n+    public static final int DEFAULT_HLL_BUCKETS = 256;\n+    public static final int DEFAULT_MAX_SIZE = 4096;\n+    private static final byte UNCOMPRESSED_FORMAT = 1;\n+    private static final long HASH_OUTPUT_HALF_RANGE = Long.MAX_VALUE;\n+    private static final int SIZE_OF_KHYPERLOGLOG = ClassLayout.parseClass(KHyperLogLog.class).instanceSize();\n+    private static final int SIZE_OF_RBTREEMAP = ClassLayout.parseClass(Long2ObjectRBTreeMap.class).instanceSize();\n+\n+    private final Long2ObjectSortedMap<HyperLogLog> minhash;\n+    private final int maxSize;\n+    private final int hllBuckets;\n+\n+    public KHyperLogLog()\n+    {\n+        this(DEFAULT_MAX_SIZE, DEFAULT_HLL_BUCKETS, new Long2ObjectRBTreeMap<>());\n+    }\n+\n+    public KHyperLogLog(int maxSize, int hllBuckets)\n+    {\n+        this(maxSize, hllBuckets, new Long2ObjectRBTreeMap<>());\n+    }\n+\n+    public KHyperLogLog(int maxSize, int hllBuckets, Long2ObjectSortedMap<HyperLogLog> minhash)\n+    {\n+        this.maxSize = maxSize;\n+        this.hllBuckets = hllBuckets;\n+        this.minhash = requireNonNull(minhash, \"minhash is null\");\n+    }\n+\n+    public static KHyperLogLog newInstance(Slice serialized)\n+    {\n+        requireNonNull(serialized, \"serialized is null\");\n+        SliceInput input = serialized.getInput();\n+        checkArgument(input.readByte() == UNCOMPRESSED_FORMAT, \"Unexpected version\");\n+\n+        int maxSize = input.readInt();\n+        int hllBuckets = input.readInt();\n+        int minhashSize = input.readInt();\n+\n+        Long2ObjectRBTreeMap<HyperLogLog> minhash = new Long2ObjectRBTreeMap<>();\n+        // The values are stored after the keys\n+        SliceInput valuesInput = serialized.getInput();\n+        valuesInput.setPosition(input.position() + minhashSize * SIZE_OF_LONG);\n+\n+        int hllLength;\n+        Slice serializedHll;\n+        for (int i = 0; i < minhashSize; i++) {\n+            hllLength = valuesInput.readInt();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10eed0c050d85b68972b40e12ea43456f88e6f44"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk0MTE5Ng==", "bodyText": "You can also deserialize the vector of HLL lengths in one shot via:\nint[] values = ...\nvaluesInput.readBytes(wrappedIntArray(values))", "url": "https://github.com/prestodb/presto/pull/14119#discussion_r382941196", "createdAt": "2020-02-22T21:00:41Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/main/java/com/facebook/presto/type/khyperloglog/KHyperLogLog.java", "diffHunk": "@@ -0,0 +1,285 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.facebook.presto.type.khyperloglog;\n+\n+import com.facebook.airlift.stats.cardinality.HyperLogLog;\n+import com.google.common.collect.Sets;\n+import io.airlift.slice.DynamicSliceOutput;\n+import io.airlift.slice.Murmur3Hash128;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.SliceInput;\n+import io.airlift.slice.SliceOutput;\n+import io.airlift.slice.Slices;\n+import it.unimi.dsi.fastutil.longs.Long2ObjectRBTreeMap;\n+import it.unimi.dsi.fastutil.longs.Long2ObjectSortedMap;\n+import it.unimi.dsi.fastutil.longs.LongBidirectionalIterator;\n+import it.unimi.dsi.fastutil.longs.LongRBTreeSet;\n+import it.unimi.dsi.fastutil.longs.LongSortedSet;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.stream.LongStream;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static io.airlift.slice.SizeOf.SIZE_OF_BYTE;\n+import static io.airlift.slice.SizeOf.SIZE_OF_INT;\n+import static io.airlift.slice.SizeOf.SIZE_OF_LONG;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * For reference on KHyperLogLog, see \"KHyperLogLog: Estimating Reidentifiability and\n+ * Joinability of Large Data at Scale\" by Chia et al., 2019.\n+ */\n+public class KHyperLogLog\n+{\n+    public static final int DEFAULT_HLL_BUCKETS = 256;\n+    public static final int DEFAULT_MAX_SIZE = 4096;\n+    private static final byte UNCOMPRESSED_FORMAT = 1;\n+    private static final long HASH_OUTPUT_HALF_RANGE = Long.MAX_VALUE;\n+    private static final int SIZE_OF_KHYPERLOGLOG = ClassLayout.parseClass(KHyperLogLog.class).instanceSize();\n+    private static final int SIZE_OF_RBTREEMAP = ClassLayout.parseClass(Long2ObjectRBTreeMap.class).instanceSize();\n+\n+    private final Long2ObjectSortedMap<HyperLogLog> minhash;\n+    private final int maxSize;\n+    private final int hllBuckets;\n+\n+    public KHyperLogLog()\n+    {\n+        this(DEFAULT_MAX_SIZE, DEFAULT_HLL_BUCKETS, new Long2ObjectRBTreeMap<>());\n+    }\n+\n+    public KHyperLogLog(int maxSize, int hllBuckets)\n+    {\n+        this(maxSize, hllBuckets, new Long2ObjectRBTreeMap<>());\n+    }\n+\n+    public KHyperLogLog(int maxSize, int hllBuckets, Long2ObjectSortedMap<HyperLogLog> minhash)\n+    {\n+        this.maxSize = maxSize;\n+        this.hllBuckets = hllBuckets;\n+        this.minhash = requireNonNull(minhash, \"minhash is null\");\n+    }\n+\n+    public static KHyperLogLog newInstance(Slice serialized)\n+    {\n+        requireNonNull(serialized, \"serialized is null\");\n+        SliceInput input = serialized.getInput();\n+        checkArgument(input.readByte() == UNCOMPRESSED_FORMAT, \"Unexpected version\");\n+\n+        int maxSize = input.readInt();\n+        int hllBuckets = input.readInt();\n+        int minhashSize = input.readInt();\n+\n+        Long2ObjectRBTreeMap<HyperLogLog> minhash = new Long2ObjectRBTreeMap<>();\n+        // The values are stored after the keys\n+        SliceInput valuesInput = serialized.getInput();\n+        valuesInput.setPosition(input.position() + minhashSize * SIZE_OF_LONG);\n+\n+        int hllLength;\n+        Slice serializedHll;\n+        for (int i = 0; i < minhashSize; i++) {\n+            hllLength = valuesInput.readInt();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk0MTA5OQ=="}, "originalCommit": {"oid": "10eed0c050d85b68972b40e12ea43456f88e6f44"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDg5MDUzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/type/khyperloglog/KHyperLogLog.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQyMTowNDowNlrOFtM5Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMjozNTo1MVrOFtyY4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk0MTQ0Mw==", "bodyText": "This will end up promoting the primitive longs into java.lang.Long, let's find a way that avoids this.", "url": "https://github.com/prestodb/presto/pull/14119#discussion_r382941443", "createdAt": "2020-02-22T21:04:06Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/main/java/com/facebook/presto/type/khyperloglog/KHyperLogLog.java", "diffHunk": "@@ -0,0 +1,285 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.facebook.presto.type.khyperloglog;\n+\n+import com.facebook.airlift.stats.cardinality.HyperLogLog;\n+import com.google.common.collect.Sets;\n+import io.airlift.slice.DynamicSliceOutput;\n+import io.airlift.slice.Murmur3Hash128;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.SliceInput;\n+import io.airlift.slice.SliceOutput;\n+import io.airlift.slice.Slices;\n+import it.unimi.dsi.fastutil.longs.Long2ObjectRBTreeMap;\n+import it.unimi.dsi.fastutil.longs.Long2ObjectSortedMap;\n+import it.unimi.dsi.fastutil.longs.LongBidirectionalIterator;\n+import it.unimi.dsi.fastutil.longs.LongRBTreeSet;\n+import it.unimi.dsi.fastutil.longs.LongSortedSet;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.stream.LongStream;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static io.airlift.slice.SizeOf.SIZE_OF_BYTE;\n+import static io.airlift.slice.SizeOf.SIZE_OF_INT;\n+import static io.airlift.slice.SizeOf.SIZE_OF_LONG;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * For reference on KHyperLogLog, see \"KHyperLogLog: Estimating Reidentifiability and\n+ * Joinability of Large Data at Scale\" by Chia et al., 2019.\n+ */\n+public class KHyperLogLog\n+{\n+    public static final int DEFAULT_HLL_BUCKETS = 256;\n+    public static final int DEFAULT_MAX_SIZE = 4096;\n+    private static final byte UNCOMPRESSED_FORMAT = 1;\n+    private static final long HASH_OUTPUT_HALF_RANGE = Long.MAX_VALUE;\n+    private static final int SIZE_OF_KHYPERLOGLOG = ClassLayout.parseClass(KHyperLogLog.class).instanceSize();\n+    private static final int SIZE_OF_RBTREEMAP = ClassLayout.parseClass(Long2ObjectRBTreeMap.class).instanceSize();\n+\n+    private final Long2ObjectSortedMap<HyperLogLog> minhash;\n+    private final int maxSize;\n+    private final int hllBuckets;\n+\n+    public KHyperLogLog()\n+    {\n+        this(DEFAULT_MAX_SIZE, DEFAULT_HLL_BUCKETS, new Long2ObjectRBTreeMap<>());\n+    }\n+\n+    public KHyperLogLog(int maxSize, int hllBuckets)\n+    {\n+        this(maxSize, hllBuckets, new Long2ObjectRBTreeMap<>());\n+    }\n+\n+    public KHyperLogLog(int maxSize, int hllBuckets, Long2ObjectSortedMap<HyperLogLog> minhash)\n+    {\n+        this.maxSize = maxSize;\n+        this.hllBuckets = hllBuckets;\n+        this.minhash = requireNonNull(minhash, \"minhash is null\");\n+    }\n+\n+    public static KHyperLogLog newInstance(Slice serialized)\n+    {\n+        requireNonNull(serialized, \"serialized is null\");\n+        SliceInput input = serialized.getInput();\n+        checkArgument(input.readByte() == UNCOMPRESSED_FORMAT, \"Unexpected version\");\n+\n+        int maxSize = input.readInt();\n+        int hllBuckets = input.readInt();\n+        int minhashSize = input.readInt();\n+\n+        Long2ObjectRBTreeMap<HyperLogLog> minhash = new Long2ObjectRBTreeMap<>();\n+        // The values are stored after the keys\n+        SliceInput valuesInput = serialized.getInput();\n+        valuesInput.setPosition(input.position() + minhashSize * SIZE_OF_LONG);\n+\n+        int hllLength;\n+        Slice serializedHll;\n+        for (int i = 0; i < minhashSize; i++) {\n+            hllLength = valuesInput.readInt();\n+            serializedHll = Slices.allocate(hllLength);\n+            valuesInput.readBytes(serializedHll, hllLength);\n+            minhash.put(input.readLong(), HyperLogLog.newInstance(serializedHll));\n+        }\n+\n+        return new KHyperLogLog(maxSize, hllBuckets, minhash);\n+    }\n+\n+    public static long exactIntersectionCardinality(KHyperLogLog a, KHyperLogLog b)\n+    {\n+        checkState(a.isExact(), \"exact intersection cannot operate on approximate sets\");\n+        checkArgument(b.isExact(), \"exact intersection cannot operate on approximate sets\");\n+\n+        return Sets.intersection(a.minhash.keySet(), b.minhash.keySet()).size();\n+    }\n+\n+    public static double jaccardIndex(KHyperLogLog a, KHyperLogLog b)\n+    {\n+        int sizeOfSmallerSet = Math.min(a.minhash.size(), b.minhash.size());\n+        LongSortedSet minUnion = new LongRBTreeSet(a.minhash.keySet());\n+        minUnion.addAll(b.minhash.keySet());\n+\n+        int intersection = 0;\n+        int i = 0;\n+        for (long key : minUnion) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10eed0c050d85b68972b40e12ea43456f88e6f44"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU1NTgwOA==", "bodyText": "Changed implementation to follow mergeWith style.", "url": "https://github.com/prestodb/presto/pull/14119#discussion_r383555808", "createdAt": "2020-02-24T22:35:51Z", "author": {"login": "mcorreaiz"}, "path": "presto-main/src/main/java/com/facebook/presto/type/khyperloglog/KHyperLogLog.java", "diffHunk": "@@ -0,0 +1,285 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.facebook.presto.type.khyperloglog;\n+\n+import com.facebook.airlift.stats.cardinality.HyperLogLog;\n+import com.google.common.collect.Sets;\n+import io.airlift.slice.DynamicSliceOutput;\n+import io.airlift.slice.Murmur3Hash128;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.SliceInput;\n+import io.airlift.slice.SliceOutput;\n+import io.airlift.slice.Slices;\n+import it.unimi.dsi.fastutil.longs.Long2ObjectRBTreeMap;\n+import it.unimi.dsi.fastutil.longs.Long2ObjectSortedMap;\n+import it.unimi.dsi.fastutil.longs.LongBidirectionalIterator;\n+import it.unimi.dsi.fastutil.longs.LongRBTreeSet;\n+import it.unimi.dsi.fastutil.longs.LongSortedSet;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.stream.LongStream;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static io.airlift.slice.SizeOf.SIZE_OF_BYTE;\n+import static io.airlift.slice.SizeOf.SIZE_OF_INT;\n+import static io.airlift.slice.SizeOf.SIZE_OF_LONG;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * For reference on KHyperLogLog, see \"KHyperLogLog: Estimating Reidentifiability and\n+ * Joinability of Large Data at Scale\" by Chia et al., 2019.\n+ */\n+public class KHyperLogLog\n+{\n+    public static final int DEFAULT_HLL_BUCKETS = 256;\n+    public static final int DEFAULT_MAX_SIZE = 4096;\n+    private static final byte UNCOMPRESSED_FORMAT = 1;\n+    private static final long HASH_OUTPUT_HALF_RANGE = Long.MAX_VALUE;\n+    private static final int SIZE_OF_KHYPERLOGLOG = ClassLayout.parseClass(KHyperLogLog.class).instanceSize();\n+    private static final int SIZE_OF_RBTREEMAP = ClassLayout.parseClass(Long2ObjectRBTreeMap.class).instanceSize();\n+\n+    private final Long2ObjectSortedMap<HyperLogLog> minhash;\n+    private final int maxSize;\n+    private final int hllBuckets;\n+\n+    public KHyperLogLog()\n+    {\n+        this(DEFAULT_MAX_SIZE, DEFAULT_HLL_BUCKETS, new Long2ObjectRBTreeMap<>());\n+    }\n+\n+    public KHyperLogLog(int maxSize, int hllBuckets)\n+    {\n+        this(maxSize, hllBuckets, new Long2ObjectRBTreeMap<>());\n+    }\n+\n+    public KHyperLogLog(int maxSize, int hllBuckets, Long2ObjectSortedMap<HyperLogLog> minhash)\n+    {\n+        this.maxSize = maxSize;\n+        this.hllBuckets = hllBuckets;\n+        this.minhash = requireNonNull(minhash, \"minhash is null\");\n+    }\n+\n+    public static KHyperLogLog newInstance(Slice serialized)\n+    {\n+        requireNonNull(serialized, \"serialized is null\");\n+        SliceInput input = serialized.getInput();\n+        checkArgument(input.readByte() == UNCOMPRESSED_FORMAT, \"Unexpected version\");\n+\n+        int maxSize = input.readInt();\n+        int hllBuckets = input.readInt();\n+        int minhashSize = input.readInt();\n+\n+        Long2ObjectRBTreeMap<HyperLogLog> minhash = new Long2ObjectRBTreeMap<>();\n+        // The values are stored after the keys\n+        SliceInput valuesInput = serialized.getInput();\n+        valuesInput.setPosition(input.position() + minhashSize * SIZE_OF_LONG);\n+\n+        int hllLength;\n+        Slice serializedHll;\n+        for (int i = 0; i < minhashSize; i++) {\n+            hllLength = valuesInput.readInt();\n+            serializedHll = Slices.allocate(hllLength);\n+            valuesInput.readBytes(serializedHll, hllLength);\n+            minhash.put(input.readLong(), HyperLogLog.newInstance(serializedHll));\n+        }\n+\n+        return new KHyperLogLog(maxSize, hllBuckets, minhash);\n+    }\n+\n+    public static long exactIntersectionCardinality(KHyperLogLog a, KHyperLogLog b)\n+    {\n+        checkState(a.isExact(), \"exact intersection cannot operate on approximate sets\");\n+        checkArgument(b.isExact(), \"exact intersection cannot operate on approximate sets\");\n+\n+        return Sets.intersection(a.minhash.keySet(), b.minhash.keySet()).size();\n+    }\n+\n+    public static double jaccardIndex(KHyperLogLog a, KHyperLogLog b)\n+    {\n+        int sizeOfSmallerSet = Math.min(a.minhash.size(), b.minhash.size());\n+        LongSortedSet minUnion = new LongRBTreeSet(a.minhash.keySet());\n+        minUnion.addAll(b.minhash.keySet());\n+\n+        int intersection = 0;\n+        int i = 0;\n+        for (long key : minUnion) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk0MTQ0Mw=="}, "originalCommit": {"oid": "10eed0c050d85b68972b40e12ea43456f88e6f44"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDg5MDk1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/type/khyperloglog/KHyperLogLog.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQyMTowNTowM1rOFtM5Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQyMTowNTowM1rOFtM5Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk0MTQ5NA==", "bodyText": "Let's add a version byte in case we change our mind on the serialization format", "url": "https://github.com/prestodb/presto/pull/14119#discussion_r382941494", "createdAt": "2020-02-22T21:05:03Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/main/java/com/facebook/presto/type/khyperloglog/KHyperLogLog.java", "diffHunk": "@@ -0,0 +1,285 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.facebook.presto.type.khyperloglog;\n+\n+import com.facebook.airlift.stats.cardinality.HyperLogLog;\n+import com.google.common.collect.Sets;\n+import io.airlift.slice.DynamicSliceOutput;\n+import io.airlift.slice.Murmur3Hash128;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.SliceInput;\n+import io.airlift.slice.SliceOutput;\n+import io.airlift.slice.Slices;\n+import it.unimi.dsi.fastutil.longs.Long2ObjectRBTreeMap;\n+import it.unimi.dsi.fastutil.longs.Long2ObjectSortedMap;\n+import it.unimi.dsi.fastutil.longs.LongBidirectionalIterator;\n+import it.unimi.dsi.fastutil.longs.LongRBTreeSet;\n+import it.unimi.dsi.fastutil.longs.LongSortedSet;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.stream.LongStream;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static io.airlift.slice.SizeOf.SIZE_OF_BYTE;\n+import static io.airlift.slice.SizeOf.SIZE_OF_INT;\n+import static io.airlift.slice.SizeOf.SIZE_OF_LONG;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * For reference on KHyperLogLog, see \"KHyperLogLog: Estimating Reidentifiability and\n+ * Joinability of Large Data at Scale\" by Chia et al., 2019.\n+ */\n+public class KHyperLogLog\n+{\n+    public static final int DEFAULT_HLL_BUCKETS = 256;\n+    public static final int DEFAULT_MAX_SIZE = 4096;\n+    private static final byte UNCOMPRESSED_FORMAT = 1;\n+    private static final long HASH_OUTPUT_HALF_RANGE = Long.MAX_VALUE;\n+    private static final int SIZE_OF_KHYPERLOGLOG = ClassLayout.parseClass(KHyperLogLog.class).instanceSize();\n+    private static final int SIZE_OF_RBTREEMAP = ClassLayout.parseClass(Long2ObjectRBTreeMap.class).instanceSize();\n+\n+    private final Long2ObjectSortedMap<HyperLogLog> minhash;\n+    private final int maxSize;\n+    private final int hllBuckets;\n+\n+    public KHyperLogLog()\n+    {\n+        this(DEFAULT_MAX_SIZE, DEFAULT_HLL_BUCKETS, new Long2ObjectRBTreeMap<>());\n+    }\n+\n+    public KHyperLogLog(int maxSize, int hllBuckets)\n+    {\n+        this(maxSize, hllBuckets, new Long2ObjectRBTreeMap<>());\n+    }\n+\n+    public KHyperLogLog(int maxSize, int hllBuckets, Long2ObjectSortedMap<HyperLogLog> minhash)\n+    {\n+        this.maxSize = maxSize;\n+        this.hllBuckets = hllBuckets;\n+        this.minhash = requireNonNull(minhash, \"minhash is null\");\n+    }\n+\n+    public static KHyperLogLog newInstance(Slice serialized)\n+    {\n+        requireNonNull(serialized, \"serialized is null\");\n+        SliceInput input = serialized.getInput();\n+        checkArgument(input.readByte() == UNCOMPRESSED_FORMAT, \"Unexpected version\");\n+\n+        int maxSize = input.readInt();\n+        int hllBuckets = input.readInt();\n+        int minhashSize = input.readInt();\n+\n+        Long2ObjectRBTreeMap<HyperLogLog> minhash = new Long2ObjectRBTreeMap<>();\n+        // The values are stored after the keys\n+        SliceInput valuesInput = serialized.getInput();\n+        valuesInput.setPosition(input.position() + minhashSize * SIZE_OF_LONG);\n+\n+        int hllLength;\n+        Slice serializedHll;\n+        for (int i = 0; i < minhashSize; i++) {\n+            hllLength = valuesInput.readInt();\n+            serializedHll = Slices.allocate(hllLength);\n+            valuesInput.readBytes(serializedHll, hllLength);\n+            minhash.put(input.readLong(), HyperLogLog.newInstance(serializedHll));\n+        }\n+\n+        return new KHyperLogLog(maxSize, hllBuckets, minhash);\n+    }\n+\n+    public static long exactIntersectionCardinality(KHyperLogLog a, KHyperLogLog b)\n+    {\n+        checkState(a.isExact(), \"exact intersection cannot operate on approximate sets\");\n+        checkArgument(b.isExact(), \"exact intersection cannot operate on approximate sets\");\n+\n+        return Sets.intersection(a.minhash.keySet(), b.minhash.keySet()).size();\n+    }\n+\n+    public static double jaccardIndex(KHyperLogLog a, KHyperLogLog b)\n+    {\n+        int sizeOfSmallerSet = Math.min(a.minhash.size(), b.minhash.size());\n+        LongSortedSet minUnion = new LongRBTreeSet(a.minhash.keySet());\n+        minUnion.addAll(b.minhash.keySet());\n+\n+        int intersection = 0;\n+        int i = 0;\n+        for (long key : minUnion) {\n+            if (a.minhash.containsKey(key) && b.minhash.containsKey(key)) {\n+                intersection++;\n+            }\n+            i++;\n+            if (i >= sizeOfSmallerSet) {\n+                break;\n+            }\n+        }\n+        return intersection / (double) sizeOfSmallerSet;\n+    }\n+\n+    public static KHyperLogLog merge(KHyperLogLog khll1, KHyperLogLog khll2)\n+    {\n+        /*\n+        Return the one with smallest K so resolution is not lost. This loss would happen in the case\n+        one merged a smaller KHLL into a bigger one because the former's minhash struct won't\n+        cover all of the latter's minhash space.\n+         */\n+        if (khll1.maxSize <= khll2.maxSize) {\n+            return khll1.mergeWith(khll2);\n+        }\n+        return khll2.mergeWith(khll1);\n+    }\n+\n+    public boolean isExact()\n+    {\n+        return minhash.size() < maxSize;\n+    }\n+\n+    public long getMinhashSize()\n+    {\n+        return minhash.size();\n+    }\n+\n+    public Slice serialize()\n+    {\n+        try (SliceOutput output = new DynamicSliceOutput(estimatedSerializedSize())) {\n+            output.appendByte(UNCOMPRESSED_FORMAT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10eed0c050d85b68972b40e12ea43456f88e6f44"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDg5MTExOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/type/khyperloglog/KHyperLogLog.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQyMTowNTozNlrOFtM5SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMToxMDozOVrOFtv9dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk0MTUxMw==", "bodyText": "As we discussed, we want to try to compute this as we go rather than in this method.", "url": "https://github.com/prestodb/presto/pull/14119#discussion_r382941513", "createdAt": "2020-02-22T21:05:36Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/main/java/com/facebook/presto/type/khyperloglog/KHyperLogLog.java", "diffHunk": "@@ -0,0 +1,285 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.facebook.presto.type.khyperloglog;\n+\n+import com.facebook.airlift.stats.cardinality.HyperLogLog;\n+import com.google.common.collect.Sets;\n+import io.airlift.slice.DynamicSliceOutput;\n+import io.airlift.slice.Murmur3Hash128;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.SliceInput;\n+import io.airlift.slice.SliceOutput;\n+import io.airlift.slice.Slices;\n+import it.unimi.dsi.fastutil.longs.Long2ObjectRBTreeMap;\n+import it.unimi.dsi.fastutil.longs.Long2ObjectSortedMap;\n+import it.unimi.dsi.fastutil.longs.LongBidirectionalIterator;\n+import it.unimi.dsi.fastutil.longs.LongRBTreeSet;\n+import it.unimi.dsi.fastutil.longs.LongSortedSet;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.stream.LongStream;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static io.airlift.slice.SizeOf.SIZE_OF_BYTE;\n+import static io.airlift.slice.SizeOf.SIZE_OF_INT;\n+import static io.airlift.slice.SizeOf.SIZE_OF_LONG;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * For reference on KHyperLogLog, see \"KHyperLogLog: Estimating Reidentifiability and\n+ * Joinability of Large Data at Scale\" by Chia et al., 2019.\n+ */\n+public class KHyperLogLog\n+{\n+    public static final int DEFAULT_HLL_BUCKETS = 256;\n+    public static final int DEFAULT_MAX_SIZE = 4096;\n+    private static final byte UNCOMPRESSED_FORMAT = 1;\n+    private static final long HASH_OUTPUT_HALF_RANGE = Long.MAX_VALUE;\n+    private static final int SIZE_OF_KHYPERLOGLOG = ClassLayout.parseClass(KHyperLogLog.class).instanceSize();\n+    private static final int SIZE_OF_RBTREEMAP = ClassLayout.parseClass(Long2ObjectRBTreeMap.class).instanceSize();\n+\n+    private final Long2ObjectSortedMap<HyperLogLog> minhash;\n+    private final int maxSize;\n+    private final int hllBuckets;\n+\n+    public KHyperLogLog()\n+    {\n+        this(DEFAULT_MAX_SIZE, DEFAULT_HLL_BUCKETS, new Long2ObjectRBTreeMap<>());\n+    }\n+\n+    public KHyperLogLog(int maxSize, int hllBuckets)\n+    {\n+        this(maxSize, hllBuckets, new Long2ObjectRBTreeMap<>());\n+    }\n+\n+    public KHyperLogLog(int maxSize, int hllBuckets, Long2ObjectSortedMap<HyperLogLog> minhash)\n+    {\n+        this.maxSize = maxSize;\n+        this.hllBuckets = hllBuckets;\n+        this.minhash = requireNonNull(minhash, \"minhash is null\");\n+    }\n+\n+    public static KHyperLogLog newInstance(Slice serialized)\n+    {\n+        requireNonNull(serialized, \"serialized is null\");\n+        SliceInput input = serialized.getInput();\n+        checkArgument(input.readByte() == UNCOMPRESSED_FORMAT, \"Unexpected version\");\n+\n+        int maxSize = input.readInt();\n+        int hllBuckets = input.readInt();\n+        int minhashSize = input.readInt();\n+\n+        Long2ObjectRBTreeMap<HyperLogLog> minhash = new Long2ObjectRBTreeMap<>();\n+        // The values are stored after the keys\n+        SliceInput valuesInput = serialized.getInput();\n+        valuesInput.setPosition(input.position() + minhashSize * SIZE_OF_LONG);\n+\n+        int hllLength;\n+        Slice serializedHll;\n+        for (int i = 0; i < minhashSize; i++) {\n+            hllLength = valuesInput.readInt();\n+            serializedHll = Slices.allocate(hllLength);\n+            valuesInput.readBytes(serializedHll, hllLength);\n+            minhash.put(input.readLong(), HyperLogLog.newInstance(serializedHll));\n+        }\n+\n+        return new KHyperLogLog(maxSize, hllBuckets, minhash);\n+    }\n+\n+    public static long exactIntersectionCardinality(KHyperLogLog a, KHyperLogLog b)\n+    {\n+        checkState(a.isExact(), \"exact intersection cannot operate on approximate sets\");\n+        checkArgument(b.isExact(), \"exact intersection cannot operate on approximate sets\");\n+\n+        return Sets.intersection(a.minhash.keySet(), b.minhash.keySet()).size();\n+    }\n+\n+    public static double jaccardIndex(KHyperLogLog a, KHyperLogLog b)\n+    {\n+        int sizeOfSmallerSet = Math.min(a.minhash.size(), b.minhash.size());\n+        LongSortedSet minUnion = new LongRBTreeSet(a.minhash.keySet());\n+        minUnion.addAll(b.minhash.keySet());\n+\n+        int intersection = 0;\n+        int i = 0;\n+        for (long key : minUnion) {\n+            if (a.minhash.containsKey(key) && b.minhash.containsKey(key)) {\n+                intersection++;\n+            }\n+            i++;\n+            if (i >= sizeOfSmallerSet) {\n+                break;\n+            }\n+        }\n+        return intersection / (double) sizeOfSmallerSet;\n+    }\n+\n+    public static KHyperLogLog merge(KHyperLogLog khll1, KHyperLogLog khll2)\n+    {\n+        /*\n+        Return the one with smallest K so resolution is not lost. This loss would happen in the case\n+        one merged a smaller KHLL into a bigger one because the former's minhash struct won't\n+        cover all of the latter's minhash space.\n+         */\n+        if (khll1.maxSize <= khll2.maxSize) {\n+            return khll1.mergeWith(khll2);\n+        }\n+        return khll2.mergeWith(khll1);\n+    }\n+\n+    public boolean isExact()\n+    {\n+        return minhash.size() < maxSize;\n+    }\n+\n+    public long getMinhashSize()\n+    {\n+        return minhash.size();\n+    }\n+\n+    public Slice serialize()\n+    {\n+        try (SliceOutput output = new DynamicSliceOutput(estimatedSerializedSize())) {\n+            output.appendByte(UNCOMPRESSED_FORMAT);\n+            output.appendInt(maxSize);\n+            output.appendInt(hllBuckets);\n+            output.appendInt(minhash.size());\n+            for (long key : minhash.keySet()) {\n+                output.appendLong(key);\n+            }\n+            Slice serializedHll;\n+            for (HyperLogLog hll : minhash.values()) {\n+                serializedHll = hll.serialize();\n+                output.appendInt(serializedHll.length());\n+                output.appendBytes(serializedHll);\n+            }\n+\n+            return output.slice();\n+        }\n+        catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    public int estimatedInMemorySize()\n+    {\n+        return SIZE_OF_KHYPERLOGLOG +\n+                SIZE_OF_RBTREEMAP +\n+                minhash.size() * SIZE_OF_LONG +\n+                minhash.values().stream().mapToInt(HyperLogLog::estimatedInMemorySize).sum();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10eed0c050d85b68972b40e12ea43456f88e6f44"}, "originalPosition": 186}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUxNjAyMg==", "bodyText": "Right, that's being implemented. Will be included in upcoming version", "url": "https://github.com/prestodb/presto/pull/14119#discussion_r383516022", "createdAt": "2020-02-24T21:10:39Z", "author": {"login": "mcorreaiz"}, "path": "presto-main/src/main/java/com/facebook/presto/type/khyperloglog/KHyperLogLog.java", "diffHunk": "@@ -0,0 +1,285 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.facebook.presto.type.khyperloglog;\n+\n+import com.facebook.airlift.stats.cardinality.HyperLogLog;\n+import com.google.common.collect.Sets;\n+import io.airlift.slice.DynamicSliceOutput;\n+import io.airlift.slice.Murmur3Hash128;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.SliceInput;\n+import io.airlift.slice.SliceOutput;\n+import io.airlift.slice.Slices;\n+import it.unimi.dsi.fastutil.longs.Long2ObjectRBTreeMap;\n+import it.unimi.dsi.fastutil.longs.Long2ObjectSortedMap;\n+import it.unimi.dsi.fastutil.longs.LongBidirectionalIterator;\n+import it.unimi.dsi.fastutil.longs.LongRBTreeSet;\n+import it.unimi.dsi.fastutil.longs.LongSortedSet;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.stream.LongStream;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static io.airlift.slice.SizeOf.SIZE_OF_BYTE;\n+import static io.airlift.slice.SizeOf.SIZE_OF_INT;\n+import static io.airlift.slice.SizeOf.SIZE_OF_LONG;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * For reference on KHyperLogLog, see \"KHyperLogLog: Estimating Reidentifiability and\n+ * Joinability of Large Data at Scale\" by Chia et al., 2019.\n+ */\n+public class KHyperLogLog\n+{\n+    public static final int DEFAULT_HLL_BUCKETS = 256;\n+    public static final int DEFAULT_MAX_SIZE = 4096;\n+    private static final byte UNCOMPRESSED_FORMAT = 1;\n+    private static final long HASH_OUTPUT_HALF_RANGE = Long.MAX_VALUE;\n+    private static final int SIZE_OF_KHYPERLOGLOG = ClassLayout.parseClass(KHyperLogLog.class).instanceSize();\n+    private static final int SIZE_OF_RBTREEMAP = ClassLayout.parseClass(Long2ObjectRBTreeMap.class).instanceSize();\n+\n+    private final Long2ObjectSortedMap<HyperLogLog> minhash;\n+    private final int maxSize;\n+    private final int hllBuckets;\n+\n+    public KHyperLogLog()\n+    {\n+        this(DEFAULT_MAX_SIZE, DEFAULT_HLL_BUCKETS, new Long2ObjectRBTreeMap<>());\n+    }\n+\n+    public KHyperLogLog(int maxSize, int hllBuckets)\n+    {\n+        this(maxSize, hllBuckets, new Long2ObjectRBTreeMap<>());\n+    }\n+\n+    public KHyperLogLog(int maxSize, int hllBuckets, Long2ObjectSortedMap<HyperLogLog> minhash)\n+    {\n+        this.maxSize = maxSize;\n+        this.hllBuckets = hllBuckets;\n+        this.minhash = requireNonNull(minhash, \"minhash is null\");\n+    }\n+\n+    public static KHyperLogLog newInstance(Slice serialized)\n+    {\n+        requireNonNull(serialized, \"serialized is null\");\n+        SliceInput input = serialized.getInput();\n+        checkArgument(input.readByte() == UNCOMPRESSED_FORMAT, \"Unexpected version\");\n+\n+        int maxSize = input.readInt();\n+        int hllBuckets = input.readInt();\n+        int minhashSize = input.readInt();\n+\n+        Long2ObjectRBTreeMap<HyperLogLog> minhash = new Long2ObjectRBTreeMap<>();\n+        // The values are stored after the keys\n+        SliceInput valuesInput = serialized.getInput();\n+        valuesInput.setPosition(input.position() + minhashSize * SIZE_OF_LONG);\n+\n+        int hllLength;\n+        Slice serializedHll;\n+        for (int i = 0; i < minhashSize; i++) {\n+            hllLength = valuesInput.readInt();\n+            serializedHll = Slices.allocate(hllLength);\n+            valuesInput.readBytes(serializedHll, hllLength);\n+            minhash.put(input.readLong(), HyperLogLog.newInstance(serializedHll));\n+        }\n+\n+        return new KHyperLogLog(maxSize, hllBuckets, minhash);\n+    }\n+\n+    public static long exactIntersectionCardinality(KHyperLogLog a, KHyperLogLog b)\n+    {\n+        checkState(a.isExact(), \"exact intersection cannot operate on approximate sets\");\n+        checkArgument(b.isExact(), \"exact intersection cannot operate on approximate sets\");\n+\n+        return Sets.intersection(a.minhash.keySet(), b.minhash.keySet()).size();\n+    }\n+\n+    public static double jaccardIndex(KHyperLogLog a, KHyperLogLog b)\n+    {\n+        int sizeOfSmallerSet = Math.min(a.minhash.size(), b.minhash.size());\n+        LongSortedSet minUnion = new LongRBTreeSet(a.minhash.keySet());\n+        minUnion.addAll(b.minhash.keySet());\n+\n+        int intersection = 0;\n+        int i = 0;\n+        for (long key : minUnion) {\n+            if (a.minhash.containsKey(key) && b.minhash.containsKey(key)) {\n+                intersection++;\n+            }\n+            i++;\n+            if (i >= sizeOfSmallerSet) {\n+                break;\n+            }\n+        }\n+        return intersection / (double) sizeOfSmallerSet;\n+    }\n+\n+    public static KHyperLogLog merge(KHyperLogLog khll1, KHyperLogLog khll2)\n+    {\n+        /*\n+        Return the one with smallest K so resolution is not lost. This loss would happen in the case\n+        one merged a smaller KHLL into a bigger one because the former's minhash struct won't\n+        cover all of the latter's minhash space.\n+         */\n+        if (khll1.maxSize <= khll2.maxSize) {\n+            return khll1.mergeWith(khll2);\n+        }\n+        return khll2.mergeWith(khll1);\n+    }\n+\n+    public boolean isExact()\n+    {\n+        return minhash.size() < maxSize;\n+    }\n+\n+    public long getMinhashSize()\n+    {\n+        return minhash.size();\n+    }\n+\n+    public Slice serialize()\n+    {\n+        try (SliceOutput output = new DynamicSliceOutput(estimatedSerializedSize())) {\n+            output.appendByte(UNCOMPRESSED_FORMAT);\n+            output.appendInt(maxSize);\n+            output.appendInt(hllBuckets);\n+            output.appendInt(minhash.size());\n+            for (long key : minhash.keySet()) {\n+                output.appendLong(key);\n+            }\n+            Slice serializedHll;\n+            for (HyperLogLog hll : minhash.values()) {\n+                serializedHll = hll.serialize();\n+                output.appendInt(serializedHll.length());\n+                output.appendBytes(serializedHll);\n+            }\n+\n+            return output.slice();\n+        }\n+        catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    public int estimatedInMemorySize()\n+    {\n+        return SIZE_OF_KHYPERLOGLOG +\n+                SIZE_OF_RBTREEMAP +\n+                minhash.size() * SIZE_OF_LONG +\n+                minhash.values().stream().mapToInt(HyperLogLog::estimatedInMemorySize).sum();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk0MTUxMw=="}, "originalCommit": {"oid": "10eed0c050d85b68972b40e12ea43456f88e6f44"}, "originalPosition": 186}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDg5MTk3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/type/khyperloglog/KHyperLogLog.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQyMTowNzowOVrOFtM5rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMzoxMzowMFrOFtzRLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk0MTYxMg==", "bodyText": "Let's find a way to do this without boxed types", "url": "https://github.com/prestodb/presto/pull/14119#discussion_r382941612", "createdAt": "2020-02-22T21:07:09Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/main/java/com/facebook/presto/type/khyperloglog/KHyperLogLog.java", "diffHunk": "@@ -0,0 +1,285 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.facebook.presto.type.khyperloglog;\n+\n+import com.facebook.airlift.stats.cardinality.HyperLogLog;\n+import com.google.common.collect.Sets;\n+import io.airlift.slice.DynamicSliceOutput;\n+import io.airlift.slice.Murmur3Hash128;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.SliceInput;\n+import io.airlift.slice.SliceOutput;\n+import io.airlift.slice.Slices;\n+import it.unimi.dsi.fastutil.longs.Long2ObjectRBTreeMap;\n+import it.unimi.dsi.fastutil.longs.Long2ObjectSortedMap;\n+import it.unimi.dsi.fastutil.longs.LongBidirectionalIterator;\n+import it.unimi.dsi.fastutil.longs.LongRBTreeSet;\n+import it.unimi.dsi.fastutil.longs.LongSortedSet;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.stream.LongStream;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static io.airlift.slice.SizeOf.SIZE_OF_BYTE;\n+import static io.airlift.slice.SizeOf.SIZE_OF_INT;\n+import static io.airlift.slice.SizeOf.SIZE_OF_LONG;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * For reference on KHyperLogLog, see \"KHyperLogLog: Estimating Reidentifiability and\n+ * Joinability of Large Data at Scale\" by Chia et al., 2019.\n+ */\n+public class KHyperLogLog\n+{\n+    public static final int DEFAULT_HLL_BUCKETS = 256;\n+    public static final int DEFAULT_MAX_SIZE = 4096;\n+    private static final byte UNCOMPRESSED_FORMAT = 1;\n+    private static final long HASH_OUTPUT_HALF_RANGE = Long.MAX_VALUE;\n+    private static final int SIZE_OF_KHYPERLOGLOG = ClassLayout.parseClass(KHyperLogLog.class).instanceSize();\n+    private static final int SIZE_OF_RBTREEMAP = ClassLayout.parseClass(Long2ObjectRBTreeMap.class).instanceSize();\n+\n+    private final Long2ObjectSortedMap<HyperLogLog> minhash;\n+    private final int maxSize;\n+    private final int hllBuckets;\n+\n+    public KHyperLogLog()\n+    {\n+        this(DEFAULT_MAX_SIZE, DEFAULT_HLL_BUCKETS, new Long2ObjectRBTreeMap<>());\n+    }\n+\n+    public KHyperLogLog(int maxSize, int hllBuckets)\n+    {\n+        this(maxSize, hllBuckets, new Long2ObjectRBTreeMap<>());\n+    }\n+\n+    public KHyperLogLog(int maxSize, int hllBuckets, Long2ObjectSortedMap<HyperLogLog> minhash)\n+    {\n+        this.maxSize = maxSize;\n+        this.hllBuckets = hllBuckets;\n+        this.minhash = requireNonNull(minhash, \"minhash is null\");\n+    }\n+\n+    public static KHyperLogLog newInstance(Slice serialized)\n+    {\n+        requireNonNull(serialized, \"serialized is null\");\n+        SliceInput input = serialized.getInput();\n+        checkArgument(input.readByte() == UNCOMPRESSED_FORMAT, \"Unexpected version\");\n+\n+        int maxSize = input.readInt();\n+        int hllBuckets = input.readInt();\n+        int minhashSize = input.readInt();\n+\n+        Long2ObjectRBTreeMap<HyperLogLog> minhash = new Long2ObjectRBTreeMap<>();\n+        // The values are stored after the keys\n+        SliceInput valuesInput = serialized.getInput();\n+        valuesInput.setPosition(input.position() + minhashSize * SIZE_OF_LONG);\n+\n+        int hllLength;\n+        Slice serializedHll;\n+        for (int i = 0; i < minhashSize; i++) {\n+            hllLength = valuesInput.readInt();\n+            serializedHll = Slices.allocate(hllLength);\n+            valuesInput.readBytes(serializedHll, hllLength);\n+            minhash.put(input.readLong(), HyperLogLog.newInstance(serializedHll));\n+        }\n+\n+        return new KHyperLogLog(maxSize, hllBuckets, minhash);\n+    }\n+\n+    public static long exactIntersectionCardinality(KHyperLogLog a, KHyperLogLog b)\n+    {\n+        checkState(a.isExact(), \"exact intersection cannot operate on approximate sets\");\n+        checkArgument(b.isExact(), \"exact intersection cannot operate on approximate sets\");\n+\n+        return Sets.intersection(a.minhash.keySet(), b.minhash.keySet()).size();\n+    }\n+\n+    public static double jaccardIndex(KHyperLogLog a, KHyperLogLog b)\n+    {\n+        int sizeOfSmallerSet = Math.min(a.minhash.size(), b.minhash.size());\n+        LongSortedSet minUnion = new LongRBTreeSet(a.minhash.keySet());\n+        minUnion.addAll(b.minhash.keySet());\n+\n+        int intersection = 0;\n+        int i = 0;\n+        for (long key : minUnion) {\n+            if (a.minhash.containsKey(key) && b.minhash.containsKey(key)) {\n+                intersection++;\n+            }\n+            i++;\n+            if (i >= sizeOfSmallerSet) {\n+                break;\n+            }\n+        }\n+        return intersection / (double) sizeOfSmallerSet;\n+    }\n+\n+    public static KHyperLogLog merge(KHyperLogLog khll1, KHyperLogLog khll2)\n+    {\n+        /*\n+        Return the one with smallest K so resolution is not lost. This loss would happen in the case\n+        one merged a smaller KHLL into a bigger one because the former's minhash struct won't\n+        cover all of the latter's minhash space.\n+         */\n+        if (khll1.maxSize <= khll2.maxSize) {\n+            return khll1.mergeWith(khll2);\n+        }\n+        return khll2.mergeWith(khll1);\n+    }\n+\n+    public boolean isExact()\n+    {\n+        return minhash.size() < maxSize;\n+    }\n+\n+    public long getMinhashSize()\n+    {\n+        return minhash.size();\n+    }\n+\n+    public Slice serialize()\n+    {\n+        try (SliceOutput output = new DynamicSliceOutput(estimatedSerializedSize())) {\n+            output.appendByte(UNCOMPRESSED_FORMAT);\n+            output.appendInt(maxSize);\n+            output.appendInt(hllBuckets);\n+            output.appendInt(minhash.size());\n+            for (long key : minhash.keySet()) {\n+                output.appendLong(key);\n+            }\n+            Slice serializedHll;\n+            for (HyperLogLog hll : minhash.values()) {\n+                serializedHll = hll.serialize();\n+                output.appendInt(serializedHll.length());\n+                output.appendBytes(serializedHll);\n+            }\n+\n+            return output.slice();\n+        }\n+        catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    public int estimatedInMemorySize()\n+    {\n+        return SIZE_OF_KHYPERLOGLOG +\n+                SIZE_OF_RBTREEMAP +\n+                minhash.size() * SIZE_OF_LONG +\n+                minhash.values().stream().mapToInt(HyperLogLog::estimatedInMemorySize).sum();\n+    }\n+\n+    public int estimatedSerializedSize()\n+    {\n+        return SIZE_OF_BYTE +\n+                3 * SIZE_OF_INT +\n+                minhash.size() * (SIZE_OF_LONG + SIZE_OF_INT) +\n+                minhash.values().stream().mapToInt(HyperLogLog::estimatedSerializedSize).sum();\n+    }\n+\n+    public void add(long value, long uii)\n+    {\n+        update(Murmur3Hash128.hash64(value), uii);\n+    }\n+\n+    public void add(Slice value, long uii)\n+    {\n+        update(Murmur3Hash128.hash64(value), uii);\n+    }\n+\n+    private void update(long hash, long uii)\n+    {\n+        if (minhash.containsKey(hash)) {\n+            minhash.get(hash).add(uii);\n+        }\n+        else if (isExact() || hash < minhash.lastLongKey()) {\n+            HyperLogLog hll = HyperLogLog.newInstance(hllBuckets);\n+            hll.add(uii);\n+            minhash.put(hash, hll);\n+            removeOverflowEntries();\n+        }\n+    }\n+\n+    public long cardinality()\n+    {\n+        if (isExact()) {\n+            return minhash.size();\n+        }\n+\n+        // Intuition is: get the stored hashes' density, and extrapolate to the whole Hash output range.\n+        // Since Hash output range (2^64) cannot be stored in long type, I use half of the range\n+        // via Long.MAX_VALUE and also divide the hash values' density by 2. The \"-1\" is bias correction\n+        // detailed in \"On Synopses for Distinct-Value Estimation Under Multiset Operations\" by Beyer et. al.\n+        long hashesRange = minhash.lastLongKey() - Long.MIN_VALUE;\n+        double halfDensity = Long.divideUnsigned(hashesRange, minhash.size()) / 2D;\n+        return (long) (HASH_OUTPUT_HALF_RANGE / halfDensity);\n+    }\n+\n+    public KHyperLogLog mergeWith(KHyperLogLog other)\n+    {\n+        LongBidirectionalIterator iterator = other.minhash.keySet().iterator();\n+        while (iterator.hasNext()) {\n+            long key = iterator.nextLong();\n+            if (minhash.containsKey(key)) {\n+                minhash.get(key).mergeWith(other.minhash.get(key));\n+            }\n+            else {\n+                minhash.put(key, other.minhash.get(key));\n+            }\n+        }\n+        removeOverflowEntries();\n+        return this;\n+    }\n+\n+    public double reidentificationPotential(long threshold)\n+    {\n+        int highlyUniqueValues = 0;\n+        for (HyperLogLog hll : minhash.values()) {\n+            if (hll.cardinality() <= threshold) {\n+                highlyUniqueValues++;\n+            }\n+        }\n+        return (double) highlyUniqueValues / minhash.size();\n+    }\n+\n+    public Map<Long, Double> uniquenessDistribution()\n+    {\n+        return uniquenessDistribution(minhash.size());\n+    }\n+\n+    public Map<Long, Double> uniquenessDistribution(long histogramSize)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10eed0c050d85b68972b40e12ea43456f88e6f44"}, "originalPosition": 267}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU3MDIyMA==", "bodyText": "Using fastutil Long2DoubleMap", "url": "https://github.com/prestodb/presto/pull/14119#discussion_r383570220", "createdAt": "2020-02-24T23:13:00Z", "author": {"login": "mcorreaiz"}, "path": "presto-main/src/main/java/com/facebook/presto/type/khyperloglog/KHyperLogLog.java", "diffHunk": "@@ -0,0 +1,285 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.facebook.presto.type.khyperloglog;\n+\n+import com.facebook.airlift.stats.cardinality.HyperLogLog;\n+import com.google.common.collect.Sets;\n+import io.airlift.slice.DynamicSliceOutput;\n+import io.airlift.slice.Murmur3Hash128;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.SliceInput;\n+import io.airlift.slice.SliceOutput;\n+import io.airlift.slice.Slices;\n+import it.unimi.dsi.fastutil.longs.Long2ObjectRBTreeMap;\n+import it.unimi.dsi.fastutil.longs.Long2ObjectSortedMap;\n+import it.unimi.dsi.fastutil.longs.LongBidirectionalIterator;\n+import it.unimi.dsi.fastutil.longs.LongRBTreeSet;\n+import it.unimi.dsi.fastutil.longs.LongSortedSet;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.stream.LongStream;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static io.airlift.slice.SizeOf.SIZE_OF_BYTE;\n+import static io.airlift.slice.SizeOf.SIZE_OF_INT;\n+import static io.airlift.slice.SizeOf.SIZE_OF_LONG;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * For reference on KHyperLogLog, see \"KHyperLogLog: Estimating Reidentifiability and\n+ * Joinability of Large Data at Scale\" by Chia et al., 2019.\n+ */\n+public class KHyperLogLog\n+{\n+    public static final int DEFAULT_HLL_BUCKETS = 256;\n+    public static final int DEFAULT_MAX_SIZE = 4096;\n+    private static final byte UNCOMPRESSED_FORMAT = 1;\n+    private static final long HASH_OUTPUT_HALF_RANGE = Long.MAX_VALUE;\n+    private static final int SIZE_OF_KHYPERLOGLOG = ClassLayout.parseClass(KHyperLogLog.class).instanceSize();\n+    private static final int SIZE_OF_RBTREEMAP = ClassLayout.parseClass(Long2ObjectRBTreeMap.class).instanceSize();\n+\n+    private final Long2ObjectSortedMap<HyperLogLog> minhash;\n+    private final int maxSize;\n+    private final int hllBuckets;\n+\n+    public KHyperLogLog()\n+    {\n+        this(DEFAULT_MAX_SIZE, DEFAULT_HLL_BUCKETS, new Long2ObjectRBTreeMap<>());\n+    }\n+\n+    public KHyperLogLog(int maxSize, int hllBuckets)\n+    {\n+        this(maxSize, hllBuckets, new Long2ObjectRBTreeMap<>());\n+    }\n+\n+    public KHyperLogLog(int maxSize, int hllBuckets, Long2ObjectSortedMap<HyperLogLog> minhash)\n+    {\n+        this.maxSize = maxSize;\n+        this.hllBuckets = hllBuckets;\n+        this.minhash = requireNonNull(minhash, \"minhash is null\");\n+    }\n+\n+    public static KHyperLogLog newInstance(Slice serialized)\n+    {\n+        requireNonNull(serialized, \"serialized is null\");\n+        SliceInput input = serialized.getInput();\n+        checkArgument(input.readByte() == UNCOMPRESSED_FORMAT, \"Unexpected version\");\n+\n+        int maxSize = input.readInt();\n+        int hllBuckets = input.readInt();\n+        int minhashSize = input.readInt();\n+\n+        Long2ObjectRBTreeMap<HyperLogLog> minhash = new Long2ObjectRBTreeMap<>();\n+        // The values are stored after the keys\n+        SliceInput valuesInput = serialized.getInput();\n+        valuesInput.setPosition(input.position() + minhashSize * SIZE_OF_LONG);\n+\n+        int hllLength;\n+        Slice serializedHll;\n+        for (int i = 0; i < minhashSize; i++) {\n+            hllLength = valuesInput.readInt();\n+            serializedHll = Slices.allocate(hllLength);\n+            valuesInput.readBytes(serializedHll, hllLength);\n+            minhash.put(input.readLong(), HyperLogLog.newInstance(serializedHll));\n+        }\n+\n+        return new KHyperLogLog(maxSize, hllBuckets, minhash);\n+    }\n+\n+    public static long exactIntersectionCardinality(KHyperLogLog a, KHyperLogLog b)\n+    {\n+        checkState(a.isExact(), \"exact intersection cannot operate on approximate sets\");\n+        checkArgument(b.isExact(), \"exact intersection cannot operate on approximate sets\");\n+\n+        return Sets.intersection(a.minhash.keySet(), b.minhash.keySet()).size();\n+    }\n+\n+    public static double jaccardIndex(KHyperLogLog a, KHyperLogLog b)\n+    {\n+        int sizeOfSmallerSet = Math.min(a.minhash.size(), b.minhash.size());\n+        LongSortedSet minUnion = new LongRBTreeSet(a.minhash.keySet());\n+        minUnion.addAll(b.minhash.keySet());\n+\n+        int intersection = 0;\n+        int i = 0;\n+        for (long key : minUnion) {\n+            if (a.minhash.containsKey(key) && b.minhash.containsKey(key)) {\n+                intersection++;\n+            }\n+            i++;\n+            if (i >= sizeOfSmallerSet) {\n+                break;\n+            }\n+        }\n+        return intersection / (double) sizeOfSmallerSet;\n+    }\n+\n+    public static KHyperLogLog merge(KHyperLogLog khll1, KHyperLogLog khll2)\n+    {\n+        /*\n+        Return the one with smallest K so resolution is not lost. This loss would happen in the case\n+        one merged a smaller KHLL into a bigger one because the former's minhash struct won't\n+        cover all of the latter's minhash space.\n+         */\n+        if (khll1.maxSize <= khll2.maxSize) {\n+            return khll1.mergeWith(khll2);\n+        }\n+        return khll2.mergeWith(khll1);\n+    }\n+\n+    public boolean isExact()\n+    {\n+        return minhash.size() < maxSize;\n+    }\n+\n+    public long getMinhashSize()\n+    {\n+        return minhash.size();\n+    }\n+\n+    public Slice serialize()\n+    {\n+        try (SliceOutput output = new DynamicSliceOutput(estimatedSerializedSize())) {\n+            output.appendByte(UNCOMPRESSED_FORMAT);\n+            output.appendInt(maxSize);\n+            output.appendInt(hllBuckets);\n+            output.appendInt(minhash.size());\n+            for (long key : minhash.keySet()) {\n+                output.appendLong(key);\n+            }\n+            Slice serializedHll;\n+            for (HyperLogLog hll : minhash.values()) {\n+                serializedHll = hll.serialize();\n+                output.appendInt(serializedHll.length());\n+                output.appendBytes(serializedHll);\n+            }\n+\n+            return output.slice();\n+        }\n+        catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    public int estimatedInMemorySize()\n+    {\n+        return SIZE_OF_KHYPERLOGLOG +\n+                SIZE_OF_RBTREEMAP +\n+                minhash.size() * SIZE_OF_LONG +\n+                minhash.values().stream().mapToInt(HyperLogLog::estimatedInMemorySize).sum();\n+    }\n+\n+    public int estimatedSerializedSize()\n+    {\n+        return SIZE_OF_BYTE +\n+                3 * SIZE_OF_INT +\n+                minhash.size() * (SIZE_OF_LONG + SIZE_OF_INT) +\n+                minhash.values().stream().mapToInt(HyperLogLog::estimatedSerializedSize).sum();\n+    }\n+\n+    public void add(long value, long uii)\n+    {\n+        update(Murmur3Hash128.hash64(value), uii);\n+    }\n+\n+    public void add(Slice value, long uii)\n+    {\n+        update(Murmur3Hash128.hash64(value), uii);\n+    }\n+\n+    private void update(long hash, long uii)\n+    {\n+        if (minhash.containsKey(hash)) {\n+            minhash.get(hash).add(uii);\n+        }\n+        else if (isExact() || hash < minhash.lastLongKey()) {\n+            HyperLogLog hll = HyperLogLog.newInstance(hllBuckets);\n+            hll.add(uii);\n+            minhash.put(hash, hll);\n+            removeOverflowEntries();\n+        }\n+    }\n+\n+    public long cardinality()\n+    {\n+        if (isExact()) {\n+            return minhash.size();\n+        }\n+\n+        // Intuition is: get the stored hashes' density, and extrapolate to the whole Hash output range.\n+        // Since Hash output range (2^64) cannot be stored in long type, I use half of the range\n+        // via Long.MAX_VALUE and also divide the hash values' density by 2. The \"-1\" is bias correction\n+        // detailed in \"On Synopses for Distinct-Value Estimation Under Multiset Operations\" by Beyer et. al.\n+        long hashesRange = minhash.lastLongKey() - Long.MIN_VALUE;\n+        double halfDensity = Long.divideUnsigned(hashesRange, minhash.size()) / 2D;\n+        return (long) (HASH_OUTPUT_HALF_RANGE / halfDensity);\n+    }\n+\n+    public KHyperLogLog mergeWith(KHyperLogLog other)\n+    {\n+        LongBidirectionalIterator iterator = other.minhash.keySet().iterator();\n+        while (iterator.hasNext()) {\n+            long key = iterator.nextLong();\n+            if (minhash.containsKey(key)) {\n+                minhash.get(key).mergeWith(other.minhash.get(key));\n+            }\n+            else {\n+                minhash.put(key, other.minhash.get(key));\n+            }\n+        }\n+        removeOverflowEntries();\n+        return this;\n+    }\n+\n+    public double reidentificationPotential(long threshold)\n+    {\n+        int highlyUniqueValues = 0;\n+        for (HyperLogLog hll : minhash.values()) {\n+            if (hll.cardinality() <= threshold) {\n+                highlyUniqueValues++;\n+            }\n+        }\n+        return (double) highlyUniqueValues / minhash.size();\n+    }\n+\n+    public Map<Long, Double> uniquenessDistribution()\n+    {\n+        return uniquenessDistribution(minhash.size());\n+    }\n+\n+    public Map<Long, Double> uniquenessDistribution(long histogramSize)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk0MTYxMg=="}, "originalCommit": {"oid": "10eed0c050d85b68972b40e12ea43456f88e6f44"}, "originalPosition": 267}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDU2NjE2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/type/khyperloglog/KHyperLogLog.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNzoyNjo0MFrOFxiYGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOTozNDo1NVrOFx61Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4Nzc2OQ==", "bodyText": "You can just have one method which takes in the memory size in bytes.  We can pass in the negative value to subtract and positive value to add.", "url": "https://github.com/prestodb/presto/pull/14119#discussion_r387487769", "createdAt": "2020-03-04T07:26:40Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/main/java/com/facebook/presto/type/khyperloglog/KHyperLogLog.java", "diffHunk": "@@ -0,0 +1,351 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.facebook.presto.type.khyperloglog;\n+\n+import com.facebook.airlift.stats.cardinality.HyperLogLog;\n+import com.google.common.collect.Sets;\n+import io.airlift.slice.DynamicSliceOutput;\n+import io.airlift.slice.Murmur3Hash128;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.SliceInput;\n+import io.airlift.slice.SliceOutput;\n+import it.unimi.dsi.fastutil.ints.IntArrayList;\n+import it.unimi.dsi.fastutil.ints.IntList;\n+import it.unimi.dsi.fastutil.longs.Long2DoubleMap;\n+import it.unimi.dsi.fastutil.longs.Long2DoubleOpenHashMap;\n+import it.unimi.dsi.fastutil.longs.Long2ObjectRBTreeMap;\n+import it.unimi.dsi.fastutil.longs.Long2ObjectSortedMap;\n+import it.unimi.dsi.fastutil.longs.LongIterator;\n+import it.unimi.dsi.fastutil.longs.LongRBTreeSet;\n+import it.unimi.dsi.fastutil.longs.LongSortedSet;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.PrimitiveIterator;\n+import java.util.stream.LongStream;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static io.airlift.slice.SizeOf.SIZE_OF_BYTE;\n+import static io.airlift.slice.SizeOf.SIZE_OF_INT;\n+import static io.airlift.slice.SizeOf.SIZE_OF_LONG;\n+import static io.airlift.slice.Slices.wrappedIntArray;\n+import static io.airlift.slice.Slices.wrappedLongArray;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * For reference on KHyperLogLog, see \"KHyperLogLog: Estimating Reidentifiability and\n+ * Joinability of Large Data at Scale\" by Chia et al., 2019.\n+ */\n+public class KHyperLogLog\n+{\n+    public static final int DEFAULT_HLL_BUCKETS = 256;\n+    public static final int DEFAULT_MAX_SIZE = 4096;\n+    private static final byte VERSION_BYTE = 1;\n+    private static final long HASH_OUTPUT_HALF_RANGE = Long.MAX_VALUE;\n+    private static final int SIZE_OF_KHYPERLOGLOG = ClassLayout.parseClass(KHyperLogLog.class).instanceSize();\n+    private static final int SIZE_OF_RBTREEMAP = ClassLayout.parseClass(Long2ObjectRBTreeMap.class).instanceSize();\n+\n+    private final Long2ObjectSortedMap<HyperLogLog> minhash;\n+    private final int maxSize;\n+    private final int hllBuckets;\n+\n+    private int hllsTotalEstimatedInMemorySize;\n+    private int hllsTotalEstimatedSerializedSize;\n+\n+    public KHyperLogLog()\n+    {\n+        this(DEFAULT_MAX_SIZE, DEFAULT_HLL_BUCKETS, new Long2ObjectRBTreeMap<>());\n+    }\n+\n+    public KHyperLogLog(int maxSize, int hllBuckets)\n+    {\n+        this(maxSize, hllBuckets, new Long2ObjectRBTreeMap<>());\n+    }\n+\n+    public KHyperLogLog(int maxSize, int hllBuckets, Long2ObjectSortedMap<HyperLogLog> minhash)\n+    {\n+        this.maxSize = maxSize;\n+        this.hllBuckets = hllBuckets;\n+        this.minhash = requireNonNull(minhash, \"minhash is null\");\n+        hllsTotalEstimatedInMemorySize = 0;\n+        hllsTotalEstimatedSerializedSize = 0;\n+\n+        for (HyperLogLog hll : minhash.values()) {\n+            increaseTotalHllSize(hll);\n+        }\n+    }\n+\n+    public static KHyperLogLog newInstance(Slice serialized)\n+    {\n+        requireNonNull(serialized, \"serialized is null\");\n+        SliceInput input = serialized.getInput();\n+        checkArgument(input.readByte() == VERSION_BYTE, \"Unexpected version\");\n+        Long2ObjectRBTreeMap<HyperLogLog> minhash = new Long2ObjectRBTreeMap<>();\n+\n+        int maxSize = input.readInt();\n+        int hllBuckets = input.readInt();\n+        int minhashSize = input.readInt();\n+        int totalHllSize = input.readInt();\n+\n+        int[] hllSizes = new int[minhashSize];\n+        long[] keys = new long[minhashSize];\n+        input.readBytes(wrappedIntArray(hllSizes));\n+        input.readBytes(wrappedLongArray(keys));\n+\n+        Slice allSerializedHlls = input.readSlice(totalHllSize);\n+\n+        int hllLength;\n+        int index = 0;\n+        Slice serializedHll;\n+        for (int i = 0; i < minhashSize; i++) {\n+            hllLength = hllSizes[i];\n+            serializedHll = allSerializedHlls.slice(index, hllLength);\n+            index += hllLength;\n+            minhash.put(keys[i], HyperLogLog.newInstance(serializedHll));\n+        }\n+\n+        return new KHyperLogLog(maxSize, hllBuckets, minhash);\n+    }\n+\n+    public Slice serialize()\n+    {\n+        try (SliceOutput output = new DynamicSliceOutput(estimatedSerializedSize())) {\n+            Slice serializedHll;\n+            List<Slice> hllSlices = new ArrayList<>();\n+            IntList hllSizes = new IntArrayList();\n+            int totalHllSize = 0;\n+\n+            for (HyperLogLog hll : minhash.values()) {\n+                serializedHll = hll.serialize();\n+                hllSlices.add(serializedHll);\n+                totalHllSize += serializedHll.length();\n+                hllSizes.add(serializedHll.length());\n+            }\n+\n+            Slice hashesSlice = wrappedLongArray(minhash.keySet().toLongArray());\n+            Slice hllSizesSlice = wrappedIntArray(hllSizes.toIntArray());\n+\n+            output.appendByte(VERSION_BYTE);\n+            output.appendInt(maxSize);\n+            output.appendInt(hllBuckets);\n+            output.appendInt(minhash.size());\n+            output.appendInt(totalHllSize);\n+            output.appendBytes(hllSizesSlice);\n+            output.appendBytes(hashesSlice);\n+            for (Slice hllSlice : hllSlices) {\n+                output.appendBytes(hllSlice);\n+            }\n+\n+            return output.slice();\n+        }\n+        catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    public static long exactIntersectionCardinality(KHyperLogLog a, KHyperLogLog b)\n+    {\n+        checkState(a.isExact(), \"exact intersection cannot operate on approximate sets\");\n+        checkArgument(b.isExact(), \"exact intersection cannot operate on approximate sets\");\n+\n+        return Sets.intersection(a.minhash.keySet(), b.minhash.keySet()).size();\n+    }\n+\n+    public static double jaccardIndex(KHyperLogLog a, KHyperLogLog b)\n+    {\n+        int sizeOfSmallerSet = Math.min(a.minhash.size(), b.minhash.size());\n+        LongSortedSet minUnion = new LongRBTreeSet(a.minhash.keySet());\n+        minUnion.addAll(b.minhash.keySet());\n+\n+        int intersection = 0;\n+        int i = 0;\n+\n+        LongIterator iterator = minUnion.iterator();\n+        while (iterator.hasNext()) {\n+            long key = iterator.nextLong();\n+            if (a.minhash.containsKey(key) && b.minhash.containsKey(key)) {\n+                intersection++;\n+            }\n+            i++;\n+            if (i >= sizeOfSmallerSet) {\n+                break;\n+            }\n+        }\n+        return intersection / (double) sizeOfSmallerSet;\n+    }\n+\n+    public static KHyperLogLog merge(KHyperLogLog khll1, KHyperLogLog khll2)\n+    {\n+        /*\n+        Return the one with smallest K so resolution is not lost. This loss would happen in the case\n+        one merged a smaller KHLL into a bigger one because the former's minhash struct won't\n+        cover all of the latter's minhash space.\n+         */\n+        if (khll1.maxSize <= khll2.maxSize) {\n+            return khll1.mergeWith(khll2);\n+        }\n+        return khll2.mergeWith(khll1);\n+    }\n+\n+    public boolean isExact()\n+    {\n+        return minhash.size() < maxSize;\n+    }\n+\n+    public long getMinhashSize()\n+    {\n+        return minhash.size();\n+    }\n+\n+    public int estimatedInMemorySize()\n+    {\n+        return SIZE_OF_KHYPERLOGLOG +\n+                SIZE_OF_RBTREEMAP +\n+                minhash.size() * SIZE_OF_LONG +\n+                hllsTotalEstimatedInMemorySize * SIZE_OF_BYTE;\n+    }\n+\n+    public int estimatedSerializedSize()\n+    {\n+        return SIZE_OF_BYTE +\n+                4 * SIZE_OF_INT +\n+                minhash.size() * (SIZE_OF_LONG + SIZE_OF_INT) +\n+                hllsTotalEstimatedSerializedSize * SIZE_OF_BYTE;\n+    }\n+\n+    public void add(long value, long uii)\n+    {\n+        update(Murmur3Hash128.hash64(value), uii);\n+    }\n+\n+    public void add(Slice value, long uii)\n+    {\n+        update(Murmur3Hash128.hash64(value), uii);\n+    }\n+\n+    private void update(long hash, long uii)\n+    {\n+        if (!(minhash.containsKey(hash) || isExact() || hash < minhash.lastLongKey())) {\n+            return;\n+        }\n+\n+        HyperLogLog hll = minhash.computeIfAbsent(hash, k -> {\n+            HyperLogLog newHll = HyperLogLog.newInstance(hllBuckets);\n+            increaseTotalHllSize(newHll);\n+            return newHll;\n+        });\n+\n+        decreaseTotalHllSize(hll);\n+        hll.add(uii);\n+        increaseTotalHllSize(hll);\n+\n+        removeOverflowEntries();\n+    }\n+\n+    public long cardinality()\n+    {\n+        if (isExact()) {\n+            return minhash.size();\n+        }\n+\n+        // Intuition is: get the stored hashes' density, and extrapolate to the whole Hash output range.\n+        // Since Hash output range (2^64) cannot be stored in long type, I use half of the range\n+        // via Long.MAX_VALUE and also divide the hash values' density by 2. The \"-1\" is bias correction\n+        // detailed in \"On Synopses for Distinct-Value Estimation Under Multiset Operations\" by Beyer et. al.\n+        long hashesRange = minhash.lastLongKey() - Long.MIN_VALUE;\n+        double halfDensity = Long.divideUnsigned(hashesRange, minhash.size()) / 2D;\n+        return (long) (HASH_OUTPUT_HALF_RANGE / halfDensity);\n+    }\n+\n+    public KHyperLogLog mergeWith(KHyperLogLog other)\n+    {\n+        LongIterator iterator = other.minhash.keySet().iterator();\n+        while (iterator.hasNext()) {\n+            long key = iterator.nextLong();\n+            HyperLogLog thisHll = minhash.get(key);\n+            HyperLogLog otherHll = other.minhash.get(key);\n+            if (minhash.containsKey(key)) {\n+                decreaseTotalHllSize(thisHll);\n+                thisHll.mergeWith(otherHll);\n+                increaseTotalHllSize(thisHll);\n+            }\n+            else {\n+                minhash.put(key, otherHll);\n+                increaseTotalHllSize(otherHll);\n+            }\n+        }\n+\n+        removeOverflowEntries();\n+\n+        return this;\n+    }\n+\n+    public double reidentificationPotential(long threshold)\n+    {\n+        int highlyUniqueValues = 0;\n+        for (HyperLogLog hll : minhash.values()) {\n+            if (hll.cardinality() <= threshold) {\n+                highlyUniqueValues++;\n+            }\n+        }\n+        return (double) highlyUniqueValues / minhash.size();\n+    }\n+\n+    public Long2DoubleMap uniquenessDistribution()\n+    {\n+        return uniquenessDistribution(minhash.size());\n+    }\n+\n+    public Long2DoubleMap uniquenessDistribution(long histogramSize)\n+    {\n+        Long2DoubleMap out = new Long2DoubleOpenHashMap();\n+        PrimitiveIterator.OfLong iterator = LongStream.rangeClosed(1, histogramSize).iterator();\n+        while (iterator.hasNext()) {\n+            // Initialize all entries to zero\n+            out.put(iterator.nextLong(), 0D);\n+        }\n+\n+        int size = minhash.size();\n+        for (HyperLogLog hll : minhash.values()) {\n+            long bucket = Math.min(hll.cardinality(), histogramSize);\n+            out.merge(bucket, (double) 1 / size, Double::sum);\n+        }\n+        return out;\n+    }\n+\n+    private void removeOverflowEntries()\n+    {\n+        while (minhash.size() > maxSize) {\n+            HyperLogLog hll = minhash.remove(minhash.lastLongKey());\n+            decreaseTotalHllSize(hll);\n+        }\n+    }\n+\n+    private void decreaseTotalHllSize(HyperLogLog hll)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "488aa18b8f637ccd46b6253158476826d2c69cde"}, "originalPosition": 340}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4ODQzMA==", "bodyText": "But then we would need one method call for InMemory size and one method call for serialized size", "url": "https://github.com/prestodb/presto/pull/14119#discussion_r387888430", "createdAt": "2020-03-04T19:34:55Z", "author": {"login": "mcorreaiz"}, "path": "presto-main/src/main/java/com/facebook/presto/type/khyperloglog/KHyperLogLog.java", "diffHunk": "@@ -0,0 +1,351 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.facebook.presto.type.khyperloglog;\n+\n+import com.facebook.airlift.stats.cardinality.HyperLogLog;\n+import com.google.common.collect.Sets;\n+import io.airlift.slice.DynamicSliceOutput;\n+import io.airlift.slice.Murmur3Hash128;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.SliceInput;\n+import io.airlift.slice.SliceOutput;\n+import it.unimi.dsi.fastutil.ints.IntArrayList;\n+import it.unimi.dsi.fastutil.ints.IntList;\n+import it.unimi.dsi.fastutil.longs.Long2DoubleMap;\n+import it.unimi.dsi.fastutil.longs.Long2DoubleOpenHashMap;\n+import it.unimi.dsi.fastutil.longs.Long2ObjectRBTreeMap;\n+import it.unimi.dsi.fastutil.longs.Long2ObjectSortedMap;\n+import it.unimi.dsi.fastutil.longs.LongIterator;\n+import it.unimi.dsi.fastutil.longs.LongRBTreeSet;\n+import it.unimi.dsi.fastutil.longs.LongSortedSet;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.PrimitiveIterator;\n+import java.util.stream.LongStream;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static io.airlift.slice.SizeOf.SIZE_OF_BYTE;\n+import static io.airlift.slice.SizeOf.SIZE_OF_INT;\n+import static io.airlift.slice.SizeOf.SIZE_OF_LONG;\n+import static io.airlift.slice.Slices.wrappedIntArray;\n+import static io.airlift.slice.Slices.wrappedLongArray;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * For reference on KHyperLogLog, see \"KHyperLogLog: Estimating Reidentifiability and\n+ * Joinability of Large Data at Scale\" by Chia et al., 2019.\n+ */\n+public class KHyperLogLog\n+{\n+    public static final int DEFAULT_HLL_BUCKETS = 256;\n+    public static final int DEFAULT_MAX_SIZE = 4096;\n+    private static final byte VERSION_BYTE = 1;\n+    private static final long HASH_OUTPUT_HALF_RANGE = Long.MAX_VALUE;\n+    private static final int SIZE_OF_KHYPERLOGLOG = ClassLayout.parseClass(KHyperLogLog.class).instanceSize();\n+    private static final int SIZE_OF_RBTREEMAP = ClassLayout.parseClass(Long2ObjectRBTreeMap.class).instanceSize();\n+\n+    private final Long2ObjectSortedMap<HyperLogLog> minhash;\n+    private final int maxSize;\n+    private final int hllBuckets;\n+\n+    private int hllsTotalEstimatedInMemorySize;\n+    private int hllsTotalEstimatedSerializedSize;\n+\n+    public KHyperLogLog()\n+    {\n+        this(DEFAULT_MAX_SIZE, DEFAULT_HLL_BUCKETS, new Long2ObjectRBTreeMap<>());\n+    }\n+\n+    public KHyperLogLog(int maxSize, int hllBuckets)\n+    {\n+        this(maxSize, hllBuckets, new Long2ObjectRBTreeMap<>());\n+    }\n+\n+    public KHyperLogLog(int maxSize, int hllBuckets, Long2ObjectSortedMap<HyperLogLog> minhash)\n+    {\n+        this.maxSize = maxSize;\n+        this.hllBuckets = hllBuckets;\n+        this.minhash = requireNonNull(minhash, \"minhash is null\");\n+        hllsTotalEstimatedInMemorySize = 0;\n+        hllsTotalEstimatedSerializedSize = 0;\n+\n+        for (HyperLogLog hll : minhash.values()) {\n+            increaseTotalHllSize(hll);\n+        }\n+    }\n+\n+    public static KHyperLogLog newInstance(Slice serialized)\n+    {\n+        requireNonNull(serialized, \"serialized is null\");\n+        SliceInput input = serialized.getInput();\n+        checkArgument(input.readByte() == VERSION_BYTE, \"Unexpected version\");\n+        Long2ObjectRBTreeMap<HyperLogLog> minhash = new Long2ObjectRBTreeMap<>();\n+\n+        int maxSize = input.readInt();\n+        int hllBuckets = input.readInt();\n+        int minhashSize = input.readInt();\n+        int totalHllSize = input.readInt();\n+\n+        int[] hllSizes = new int[minhashSize];\n+        long[] keys = new long[minhashSize];\n+        input.readBytes(wrappedIntArray(hllSizes));\n+        input.readBytes(wrappedLongArray(keys));\n+\n+        Slice allSerializedHlls = input.readSlice(totalHllSize);\n+\n+        int hllLength;\n+        int index = 0;\n+        Slice serializedHll;\n+        for (int i = 0; i < minhashSize; i++) {\n+            hllLength = hllSizes[i];\n+            serializedHll = allSerializedHlls.slice(index, hllLength);\n+            index += hllLength;\n+            minhash.put(keys[i], HyperLogLog.newInstance(serializedHll));\n+        }\n+\n+        return new KHyperLogLog(maxSize, hllBuckets, minhash);\n+    }\n+\n+    public Slice serialize()\n+    {\n+        try (SliceOutput output = new DynamicSliceOutput(estimatedSerializedSize())) {\n+            Slice serializedHll;\n+            List<Slice> hllSlices = new ArrayList<>();\n+            IntList hllSizes = new IntArrayList();\n+            int totalHllSize = 0;\n+\n+            for (HyperLogLog hll : minhash.values()) {\n+                serializedHll = hll.serialize();\n+                hllSlices.add(serializedHll);\n+                totalHllSize += serializedHll.length();\n+                hllSizes.add(serializedHll.length());\n+            }\n+\n+            Slice hashesSlice = wrappedLongArray(minhash.keySet().toLongArray());\n+            Slice hllSizesSlice = wrappedIntArray(hllSizes.toIntArray());\n+\n+            output.appendByte(VERSION_BYTE);\n+            output.appendInt(maxSize);\n+            output.appendInt(hllBuckets);\n+            output.appendInt(minhash.size());\n+            output.appendInt(totalHllSize);\n+            output.appendBytes(hllSizesSlice);\n+            output.appendBytes(hashesSlice);\n+            for (Slice hllSlice : hllSlices) {\n+                output.appendBytes(hllSlice);\n+            }\n+\n+            return output.slice();\n+        }\n+        catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    public static long exactIntersectionCardinality(KHyperLogLog a, KHyperLogLog b)\n+    {\n+        checkState(a.isExact(), \"exact intersection cannot operate on approximate sets\");\n+        checkArgument(b.isExact(), \"exact intersection cannot operate on approximate sets\");\n+\n+        return Sets.intersection(a.minhash.keySet(), b.minhash.keySet()).size();\n+    }\n+\n+    public static double jaccardIndex(KHyperLogLog a, KHyperLogLog b)\n+    {\n+        int sizeOfSmallerSet = Math.min(a.minhash.size(), b.minhash.size());\n+        LongSortedSet minUnion = new LongRBTreeSet(a.minhash.keySet());\n+        minUnion.addAll(b.minhash.keySet());\n+\n+        int intersection = 0;\n+        int i = 0;\n+\n+        LongIterator iterator = minUnion.iterator();\n+        while (iterator.hasNext()) {\n+            long key = iterator.nextLong();\n+            if (a.minhash.containsKey(key) && b.minhash.containsKey(key)) {\n+                intersection++;\n+            }\n+            i++;\n+            if (i >= sizeOfSmallerSet) {\n+                break;\n+            }\n+        }\n+        return intersection / (double) sizeOfSmallerSet;\n+    }\n+\n+    public static KHyperLogLog merge(KHyperLogLog khll1, KHyperLogLog khll2)\n+    {\n+        /*\n+        Return the one with smallest K so resolution is not lost. This loss would happen in the case\n+        one merged a smaller KHLL into a bigger one because the former's minhash struct won't\n+        cover all of the latter's minhash space.\n+         */\n+        if (khll1.maxSize <= khll2.maxSize) {\n+            return khll1.mergeWith(khll2);\n+        }\n+        return khll2.mergeWith(khll1);\n+    }\n+\n+    public boolean isExact()\n+    {\n+        return minhash.size() < maxSize;\n+    }\n+\n+    public long getMinhashSize()\n+    {\n+        return minhash.size();\n+    }\n+\n+    public int estimatedInMemorySize()\n+    {\n+        return SIZE_OF_KHYPERLOGLOG +\n+                SIZE_OF_RBTREEMAP +\n+                minhash.size() * SIZE_OF_LONG +\n+                hllsTotalEstimatedInMemorySize * SIZE_OF_BYTE;\n+    }\n+\n+    public int estimatedSerializedSize()\n+    {\n+        return SIZE_OF_BYTE +\n+                4 * SIZE_OF_INT +\n+                minhash.size() * (SIZE_OF_LONG + SIZE_OF_INT) +\n+                hllsTotalEstimatedSerializedSize * SIZE_OF_BYTE;\n+    }\n+\n+    public void add(long value, long uii)\n+    {\n+        update(Murmur3Hash128.hash64(value), uii);\n+    }\n+\n+    public void add(Slice value, long uii)\n+    {\n+        update(Murmur3Hash128.hash64(value), uii);\n+    }\n+\n+    private void update(long hash, long uii)\n+    {\n+        if (!(minhash.containsKey(hash) || isExact() || hash < minhash.lastLongKey())) {\n+            return;\n+        }\n+\n+        HyperLogLog hll = minhash.computeIfAbsent(hash, k -> {\n+            HyperLogLog newHll = HyperLogLog.newInstance(hllBuckets);\n+            increaseTotalHllSize(newHll);\n+            return newHll;\n+        });\n+\n+        decreaseTotalHllSize(hll);\n+        hll.add(uii);\n+        increaseTotalHllSize(hll);\n+\n+        removeOverflowEntries();\n+    }\n+\n+    public long cardinality()\n+    {\n+        if (isExact()) {\n+            return minhash.size();\n+        }\n+\n+        // Intuition is: get the stored hashes' density, and extrapolate to the whole Hash output range.\n+        // Since Hash output range (2^64) cannot be stored in long type, I use half of the range\n+        // via Long.MAX_VALUE and also divide the hash values' density by 2. The \"-1\" is bias correction\n+        // detailed in \"On Synopses for Distinct-Value Estimation Under Multiset Operations\" by Beyer et. al.\n+        long hashesRange = minhash.lastLongKey() - Long.MIN_VALUE;\n+        double halfDensity = Long.divideUnsigned(hashesRange, minhash.size()) / 2D;\n+        return (long) (HASH_OUTPUT_HALF_RANGE / halfDensity);\n+    }\n+\n+    public KHyperLogLog mergeWith(KHyperLogLog other)\n+    {\n+        LongIterator iterator = other.minhash.keySet().iterator();\n+        while (iterator.hasNext()) {\n+            long key = iterator.nextLong();\n+            HyperLogLog thisHll = minhash.get(key);\n+            HyperLogLog otherHll = other.minhash.get(key);\n+            if (minhash.containsKey(key)) {\n+                decreaseTotalHllSize(thisHll);\n+                thisHll.mergeWith(otherHll);\n+                increaseTotalHllSize(thisHll);\n+            }\n+            else {\n+                minhash.put(key, otherHll);\n+                increaseTotalHllSize(otherHll);\n+            }\n+        }\n+\n+        removeOverflowEntries();\n+\n+        return this;\n+    }\n+\n+    public double reidentificationPotential(long threshold)\n+    {\n+        int highlyUniqueValues = 0;\n+        for (HyperLogLog hll : minhash.values()) {\n+            if (hll.cardinality() <= threshold) {\n+                highlyUniqueValues++;\n+            }\n+        }\n+        return (double) highlyUniqueValues / minhash.size();\n+    }\n+\n+    public Long2DoubleMap uniquenessDistribution()\n+    {\n+        return uniquenessDistribution(minhash.size());\n+    }\n+\n+    public Long2DoubleMap uniquenessDistribution(long histogramSize)\n+    {\n+        Long2DoubleMap out = new Long2DoubleOpenHashMap();\n+        PrimitiveIterator.OfLong iterator = LongStream.rangeClosed(1, histogramSize).iterator();\n+        while (iterator.hasNext()) {\n+            // Initialize all entries to zero\n+            out.put(iterator.nextLong(), 0D);\n+        }\n+\n+        int size = minhash.size();\n+        for (HyperLogLog hll : minhash.values()) {\n+            long bucket = Math.min(hll.cardinality(), histogramSize);\n+            out.merge(bucket, (double) 1 / size, Double::sum);\n+        }\n+        return out;\n+    }\n+\n+    private void removeOverflowEntries()\n+    {\n+        while (minhash.size() > maxSize) {\n+            HyperLogLog hll = minhash.remove(minhash.lastLongKey());\n+            decreaseTotalHllSize(hll);\n+        }\n+    }\n+\n+    private void decreaseTotalHllSize(HyperLogLog hll)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4Nzc2OQ=="}, "originalCommit": {"oid": "488aa18b8f637ccd46b6253158476826d2c69cde"}, "originalPosition": 340}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDU4MTMxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/type/khyperloglog/KHyperLogLogStateFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNzozMzoxNlrOFxihLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOTozNjoyOFrOFx64Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ5MDA5NQ==", "bodyText": "Let's throw a PrestoException(NOT_SUPPORTED, as IllegalArgumentException will surface as an internal error in Presto.", "url": "https://github.com/prestodb/presto/pull/14119#discussion_r387490095", "createdAt": "2020-03-04T07:33:16Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/main/java/com/facebook/presto/type/khyperloglog/KHyperLogLogStateFactory.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.facebook.presto.type.khyperloglog;\n+\n+import com.facebook.presto.array.ObjectBigArray;\n+import com.facebook.presto.spi.function.AccumulatorStateFactory;\n+import com.facebook.presto.spi.function.GroupedAccumulatorState;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+public class KHyperLogLogStateFactory\n+        implements AccumulatorStateFactory<KHyperLogLogState>\n+{\n+    private static final int SIZE_OF_SINGLE = ClassLayout.parseClass(SingleKHyperLogLogState.class).instanceSize();\n+    private static final int SIZE_OF_GROUPED = ClassLayout.parseClass(GroupedKHyperLogLogState.class).instanceSize();\n+\n+    @Override\n+    public KHyperLogLogState createSingleState()\n+    {\n+        return new SingleKHyperLogLogState();\n+    }\n+\n+    @Override\n+    public Class<? extends KHyperLogLogState> getSingleStateClass()\n+    {\n+        return SingleKHyperLogLogState.class;\n+    }\n+\n+    @Override\n+    public KHyperLogLogState createGroupedState()\n+    {\n+        throw new IllegalArgumentException(\"GROUP BY of KHyperLogLog is not supported.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "488aa18b8f637ccd46b6253158476826d2c69cde"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4OTI1NA==", "bodyText": "OK!", "url": "https://github.com/prestodb/presto/pull/14119#discussion_r387889254", "createdAt": "2020-03-04T19:36:28Z", "author": {"login": "mcorreaiz"}, "path": "presto-main/src/main/java/com/facebook/presto/type/khyperloglog/KHyperLogLogStateFactory.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.facebook.presto.type.khyperloglog;\n+\n+import com.facebook.presto.array.ObjectBigArray;\n+import com.facebook.presto.spi.function.AccumulatorStateFactory;\n+import com.facebook.presto.spi.function.GroupedAccumulatorState;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+public class KHyperLogLogStateFactory\n+        implements AccumulatorStateFactory<KHyperLogLogState>\n+{\n+    private static final int SIZE_OF_SINGLE = ClassLayout.parseClass(SingleKHyperLogLogState.class).instanceSize();\n+    private static final int SIZE_OF_GROUPED = ClassLayout.parseClass(GroupedKHyperLogLogState.class).instanceSize();\n+\n+    @Override\n+    public KHyperLogLogState createSingleState()\n+    {\n+        return new SingleKHyperLogLogState();\n+    }\n+\n+    @Override\n+    public Class<? extends KHyperLogLogState> getSingleStateClass()\n+    {\n+        return SingleKHyperLogLogState.class;\n+    }\n+\n+    @Override\n+    public KHyperLogLogState createGroupedState()\n+    {\n+        throw new IllegalArgumentException(\"GROUP BY of KHyperLogLog is not supported.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ5MDA5NQ=="}, "originalCommit": {"oid": "488aa18b8f637ccd46b6253158476826d2c69cde"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDU4NDY5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/type/khyperloglog/KHyperLogLog.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNzozNDo1OFrOFxijWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMTo1Njo0OVrOFx_HVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ5MDY0OA==", "bodyText": "Formatting is off here", "url": "https://github.com/prestodb/presto/pull/14119#discussion_r387490648", "createdAt": "2020-03-04T07:34:58Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/main/java/com/facebook/presto/type/khyperloglog/KHyperLogLog.java", "diffHunk": "@@ -0,0 +1,351 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.facebook.presto.type.khyperloglog;\n+\n+import com.facebook.airlift.stats.cardinality.HyperLogLog;\n+import com.google.common.collect.Sets;\n+import io.airlift.slice.DynamicSliceOutput;\n+import io.airlift.slice.Murmur3Hash128;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.SliceInput;\n+import io.airlift.slice.SliceOutput;\n+import it.unimi.dsi.fastutil.ints.IntArrayList;\n+import it.unimi.dsi.fastutil.ints.IntList;\n+import it.unimi.dsi.fastutil.longs.Long2DoubleMap;\n+import it.unimi.dsi.fastutil.longs.Long2DoubleOpenHashMap;\n+import it.unimi.dsi.fastutil.longs.Long2ObjectRBTreeMap;\n+import it.unimi.dsi.fastutil.longs.Long2ObjectSortedMap;\n+import it.unimi.dsi.fastutil.longs.LongIterator;\n+import it.unimi.dsi.fastutil.longs.LongRBTreeSet;\n+import it.unimi.dsi.fastutil.longs.LongSortedSet;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.PrimitiveIterator;\n+import java.util.stream.LongStream;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static io.airlift.slice.SizeOf.SIZE_OF_BYTE;\n+import static io.airlift.slice.SizeOf.SIZE_OF_INT;\n+import static io.airlift.slice.SizeOf.SIZE_OF_LONG;\n+import static io.airlift.slice.Slices.wrappedIntArray;\n+import static io.airlift.slice.Slices.wrappedLongArray;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * For reference on KHyperLogLog, see \"KHyperLogLog: Estimating Reidentifiability and\n+ * Joinability of Large Data at Scale\" by Chia et al., 2019.\n+ */\n+public class KHyperLogLog\n+{\n+    public static final int DEFAULT_HLL_BUCKETS = 256;\n+    public static final int DEFAULT_MAX_SIZE = 4096;\n+    private static final byte VERSION_BYTE = 1;\n+    private static final long HASH_OUTPUT_HALF_RANGE = Long.MAX_VALUE;\n+    private static final int SIZE_OF_KHYPERLOGLOG = ClassLayout.parseClass(KHyperLogLog.class).instanceSize();\n+    private static final int SIZE_OF_RBTREEMAP = ClassLayout.parseClass(Long2ObjectRBTreeMap.class).instanceSize();\n+\n+    private final Long2ObjectSortedMap<HyperLogLog> minhash;\n+    private final int maxSize;\n+    private final int hllBuckets;\n+\n+    private int hllsTotalEstimatedInMemorySize;\n+    private int hllsTotalEstimatedSerializedSize;\n+\n+    public KHyperLogLog()\n+    {\n+        this(DEFAULT_MAX_SIZE, DEFAULT_HLL_BUCKETS, new Long2ObjectRBTreeMap<>());\n+    }\n+\n+    public KHyperLogLog(int maxSize, int hllBuckets)\n+    {\n+        this(maxSize, hllBuckets, new Long2ObjectRBTreeMap<>());\n+    }\n+\n+    public KHyperLogLog(int maxSize, int hllBuckets, Long2ObjectSortedMap<HyperLogLog> minhash)\n+    {\n+        this.maxSize = maxSize;\n+        this.hllBuckets = hllBuckets;\n+        this.minhash = requireNonNull(minhash, \"minhash is null\");\n+        hllsTotalEstimatedInMemorySize = 0;\n+        hllsTotalEstimatedSerializedSize = 0;\n+\n+        for (HyperLogLog hll : minhash.values()) {\n+            increaseTotalHllSize(hll);\n+        }\n+    }\n+\n+    public static KHyperLogLog newInstance(Slice serialized)\n+    {\n+        requireNonNull(serialized, \"serialized is null\");\n+        SliceInput input = serialized.getInput();\n+        checkArgument(input.readByte() == VERSION_BYTE, \"Unexpected version\");\n+        Long2ObjectRBTreeMap<HyperLogLog> minhash = new Long2ObjectRBTreeMap<>();\n+\n+        int maxSize = input.readInt();\n+        int hllBuckets = input.readInt();\n+        int minhashSize = input.readInt();\n+        int totalHllSize = input.readInt();\n+\n+        int[] hllSizes = new int[minhashSize];\n+        long[] keys = new long[minhashSize];\n+        input.readBytes(wrappedIntArray(hllSizes));\n+        input.readBytes(wrappedLongArray(keys));\n+\n+        Slice allSerializedHlls = input.readSlice(totalHllSize);\n+\n+        int hllLength;\n+        int index = 0;\n+        Slice serializedHll;\n+        for (int i = 0; i < minhashSize; i++) {\n+            hllLength = hllSizes[i];\n+            serializedHll = allSerializedHlls.slice(index, hllLength);\n+            index += hllLength;\n+            minhash.put(keys[i], HyperLogLog.newInstance(serializedHll));\n+        }\n+\n+        return new KHyperLogLog(maxSize, hllBuckets, minhash);\n+    }\n+\n+    public Slice serialize()\n+    {\n+        try (SliceOutput output = new DynamicSliceOutput(estimatedSerializedSize())) {\n+            Slice serializedHll;\n+            List<Slice> hllSlices = new ArrayList<>();\n+            IntList hllSizes = new IntArrayList();\n+            int totalHllSize = 0;\n+\n+            for (HyperLogLog hll : minhash.values()) {\n+                serializedHll = hll.serialize();\n+                hllSlices.add(serializedHll);\n+                totalHllSize += serializedHll.length();\n+                hllSizes.add(serializedHll.length());\n+            }\n+\n+            Slice hashesSlice = wrappedLongArray(minhash.keySet().toLongArray());\n+            Slice hllSizesSlice = wrappedIntArray(hllSizes.toIntArray());\n+\n+            output.appendByte(VERSION_BYTE);\n+            output.appendInt(maxSize);\n+            output.appendInt(hllBuckets);\n+            output.appendInt(minhash.size());\n+            output.appendInt(totalHllSize);\n+            output.appendBytes(hllSizesSlice);\n+            output.appendBytes(hashesSlice);\n+            for (Slice hllSlice : hllSlices) {\n+                output.appendBytes(hllSlice);\n+            }\n+\n+            return output.slice();\n+        }\n+        catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    public static long exactIntersectionCardinality(KHyperLogLog a, KHyperLogLog b)\n+    {\n+        checkState(a.isExact(), \"exact intersection cannot operate on approximate sets\");\n+        checkArgument(b.isExact(), \"exact intersection cannot operate on approximate sets\");\n+\n+        return Sets.intersection(a.minhash.keySet(), b.minhash.keySet()).size();\n+    }\n+\n+    public static double jaccardIndex(KHyperLogLog a, KHyperLogLog b)\n+    {\n+        int sizeOfSmallerSet = Math.min(a.minhash.size(), b.minhash.size());\n+        LongSortedSet minUnion = new LongRBTreeSet(a.minhash.keySet());\n+        minUnion.addAll(b.minhash.keySet());\n+\n+        int intersection = 0;\n+        int i = 0;\n+\n+        LongIterator iterator = minUnion.iterator();\n+        while (iterator.hasNext()) {\n+            long key = iterator.nextLong();\n+            if (a.minhash.containsKey(key) && b.minhash.containsKey(key)) {\n+                intersection++;\n+            }\n+            i++;\n+            if (i >= sizeOfSmallerSet) {\n+                break;\n+            }\n+        }\n+        return intersection / (double) sizeOfSmallerSet;\n+    }\n+\n+    public static KHyperLogLog merge(KHyperLogLog khll1, KHyperLogLog khll2)\n+    {\n+        /*\n+        Return the one with smallest K so resolution is not lost. This loss would happen in the case", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "488aa18b8f637ccd46b6253158476826d2c69cde"}, "originalPosition": 196}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk1ODYxNQ==", "bodyText": "Got it", "url": "https://github.com/prestodb/presto/pull/14119#discussion_r387958615", "createdAt": "2020-03-04T21:56:49Z", "author": {"login": "mcorreaiz"}, "path": "presto-main/src/main/java/com/facebook/presto/type/khyperloglog/KHyperLogLog.java", "diffHunk": "@@ -0,0 +1,351 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.facebook.presto.type.khyperloglog;\n+\n+import com.facebook.airlift.stats.cardinality.HyperLogLog;\n+import com.google.common.collect.Sets;\n+import io.airlift.slice.DynamicSliceOutput;\n+import io.airlift.slice.Murmur3Hash128;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.SliceInput;\n+import io.airlift.slice.SliceOutput;\n+import it.unimi.dsi.fastutil.ints.IntArrayList;\n+import it.unimi.dsi.fastutil.ints.IntList;\n+import it.unimi.dsi.fastutil.longs.Long2DoubleMap;\n+import it.unimi.dsi.fastutil.longs.Long2DoubleOpenHashMap;\n+import it.unimi.dsi.fastutil.longs.Long2ObjectRBTreeMap;\n+import it.unimi.dsi.fastutil.longs.Long2ObjectSortedMap;\n+import it.unimi.dsi.fastutil.longs.LongIterator;\n+import it.unimi.dsi.fastutil.longs.LongRBTreeSet;\n+import it.unimi.dsi.fastutil.longs.LongSortedSet;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.PrimitiveIterator;\n+import java.util.stream.LongStream;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static io.airlift.slice.SizeOf.SIZE_OF_BYTE;\n+import static io.airlift.slice.SizeOf.SIZE_OF_INT;\n+import static io.airlift.slice.SizeOf.SIZE_OF_LONG;\n+import static io.airlift.slice.Slices.wrappedIntArray;\n+import static io.airlift.slice.Slices.wrappedLongArray;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * For reference on KHyperLogLog, see \"KHyperLogLog: Estimating Reidentifiability and\n+ * Joinability of Large Data at Scale\" by Chia et al., 2019.\n+ */\n+public class KHyperLogLog\n+{\n+    public static final int DEFAULT_HLL_BUCKETS = 256;\n+    public static final int DEFAULT_MAX_SIZE = 4096;\n+    private static final byte VERSION_BYTE = 1;\n+    private static final long HASH_OUTPUT_HALF_RANGE = Long.MAX_VALUE;\n+    private static final int SIZE_OF_KHYPERLOGLOG = ClassLayout.parseClass(KHyperLogLog.class).instanceSize();\n+    private static final int SIZE_OF_RBTREEMAP = ClassLayout.parseClass(Long2ObjectRBTreeMap.class).instanceSize();\n+\n+    private final Long2ObjectSortedMap<HyperLogLog> minhash;\n+    private final int maxSize;\n+    private final int hllBuckets;\n+\n+    private int hllsTotalEstimatedInMemorySize;\n+    private int hllsTotalEstimatedSerializedSize;\n+\n+    public KHyperLogLog()\n+    {\n+        this(DEFAULT_MAX_SIZE, DEFAULT_HLL_BUCKETS, new Long2ObjectRBTreeMap<>());\n+    }\n+\n+    public KHyperLogLog(int maxSize, int hllBuckets)\n+    {\n+        this(maxSize, hllBuckets, new Long2ObjectRBTreeMap<>());\n+    }\n+\n+    public KHyperLogLog(int maxSize, int hllBuckets, Long2ObjectSortedMap<HyperLogLog> minhash)\n+    {\n+        this.maxSize = maxSize;\n+        this.hllBuckets = hllBuckets;\n+        this.minhash = requireNonNull(minhash, \"minhash is null\");\n+        hllsTotalEstimatedInMemorySize = 0;\n+        hllsTotalEstimatedSerializedSize = 0;\n+\n+        for (HyperLogLog hll : minhash.values()) {\n+            increaseTotalHllSize(hll);\n+        }\n+    }\n+\n+    public static KHyperLogLog newInstance(Slice serialized)\n+    {\n+        requireNonNull(serialized, \"serialized is null\");\n+        SliceInput input = serialized.getInput();\n+        checkArgument(input.readByte() == VERSION_BYTE, \"Unexpected version\");\n+        Long2ObjectRBTreeMap<HyperLogLog> minhash = new Long2ObjectRBTreeMap<>();\n+\n+        int maxSize = input.readInt();\n+        int hllBuckets = input.readInt();\n+        int minhashSize = input.readInt();\n+        int totalHllSize = input.readInt();\n+\n+        int[] hllSizes = new int[minhashSize];\n+        long[] keys = new long[minhashSize];\n+        input.readBytes(wrappedIntArray(hllSizes));\n+        input.readBytes(wrappedLongArray(keys));\n+\n+        Slice allSerializedHlls = input.readSlice(totalHllSize);\n+\n+        int hllLength;\n+        int index = 0;\n+        Slice serializedHll;\n+        for (int i = 0; i < minhashSize; i++) {\n+            hllLength = hllSizes[i];\n+            serializedHll = allSerializedHlls.slice(index, hllLength);\n+            index += hllLength;\n+            minhash.put(keys[i], HyperLogLog.newInstance(serializedHll));\n+        }\n+\n+        return new KHyperLogLog(maxSize, hllBuckets, minhash);\n+    }\n+\n+    public Slice serialize()\n+    {\n+        try (SliceOutput output = new DynamicSliceOutput(estimatedSerializedSize())) {\n+            Slice serializedHll;\n+            List<Slice> hllSlices = new ArrayList<>();\n+            IntList hllSizes = new IntArrayList();\n+            int totalHllSize = 0;\n+\n+            for (HyperLogLog hll : minhash.values()) {\n+                serializedHll = hll.serialize();\n+                hllSlices.add(serializedHll);\n+                totalHllSize += serializedHll.length();\n+                hllSizes.add(serializedHll.length());\n+            }\n+\n+            Slice hashesSlice = wrappedLongArray(minhash.keySet().toLongArray());\n+            Slice hllSizesSlice = wrappedIntArray(hllSizes.toIntArray());\n+\n+            output.appendByte(VERSION_BYTE);\n+            output.appendInt(maxSize);\n+            output.appendInt(hllBuckets);\n+            output.appendInt(minhash.size());\n+            output.appendInt(totalHllSize);\n+            output.appendBytes(hllSizesSlice);\n+            output.appendBytes(hashesSlice);\n+            for (Slice hllSlice : hllSlices) {\n+                output.appendBytes(hllSlice);\n+            }\n+\n+            return output.slice();\n+        }\n+        catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    public static long exactIntersectionCardinality(KHyperLogLog a, KHyperLogLog b)\n+    {\n+        checkState(a.isExact(), \"exact intersection cannot operate on approximate sets\");\n+        checkArgument(b.isExact(), \"exact intersection cannot operate on approximate sets\");\n+\n+        return Sets.intersection(a.minhash.keySet(), b.minhash.keySet()).size();\n+    }\n+\n+    public static double jaccardIndex(KHyperLogLog a, KHyperLogLog b)\n+    {\n+        int sizeOfSmallerSet = Math.min(a.minhash.size(), b.minhash.size());\n+        LongSortedSet minUnion = new LongRBTreeSet(a.minhash.keySet());\n+        minUnion.addAll(b.minhash.keySet());\n+\n+        int intersection = 0;\n+        int i = 0;\n+\n+        LongIterator iterator = minUnion.iterator();\n+        while (iterator.hasNext()) {\n+            long key = iterator.nextLong();\n+            if (a.minhash.containsKey(key) && b.minhash.containsKey(key)) {\n+                intersection++;\n+            }\n+            i++;\n+            if (i >= sizeOfSmallerSet) {\n+                break;\n+            }\n+        }\n+        return intersection / (double) sizeOfSmallerSet;\n+    }\n+\n+    public static KHyperLogLog merge(KHyperLogLog khll1, KHyperLogLog khll2)\n+    {\n+        /*\n+        Return the one with smallest K so resolution is not lost. This loss would happen in the case", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ5MDY0OA=="}, "originalCommit": {"oid": "488aa18b8f637ccd46b6253158476826d2c69cde"}, "originalPosition": 196}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDU5MTg4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/type/khyperloglog/KHyperLogLogStateFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNzozODoyNFrOFxinvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOTo0ODoyMFrOFx7SHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ5MTc3NA==", "bodyText": "Can we remove this class entirely?", "url": "https://github.com/prestodb/presto/pull/14119#discussion_r387491774", "createdAt": "2020-03-04T07:38:24Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/main/java/com/facebook/presto/type/khyperloglog/KHyperLogLogStateFactory.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.facebook.presto.type.khyperloglog;\n+\n+import com.facebook.presto.array.ObjectBigArray;\n+import com.facebook.presto.spi.function.AccumulatorStateFactory;\n+import com.facebook.presto.spi.function.GroupedAccumulatorState;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+public class KHyperLogLogStateFactory\n+        implements AccumulatorStateFactory<KHyperLogLogState>\n+{\n+    private static final int SIZE_OF_SINGLE = ClassLayout.parseClass(SingleKHyperLogLogState.class).instanceSize();\n+    private static final int SIZE_OF_GROUPED = ClassLayout.parseClass(GroupedKHyperLogLogState.class).instanceSize();\n+\n+    @Override\n+    public KHyperLogLogState createSingleState()\n+    {\n+        return new SingleKHyperLogLogState();\n+    }\n+\n+    @Override\n+    public Class<? extends KHyperLogLogState> getSingleStateClass()\n+    {\n+        return SingleKHyperLogLogState.class;\n+    }\n+\n+    @Override\n+    public KHyperLogLogState createGroupedState()\n+    {\n+        throw new IllegalArgumentException(\"GROUP BY of KHyperLogLog is not supported.\");\n+    }\n+\n+    @Override\n+    public Class<? extends KHyperLogLogState> getGroupedStateClass()\n+    {\n+        return GroupedKHyperLogLogState.class;\n+    }\n+\n+    public static class GroupedKHyperLogLogState", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "488aa18b8f637ccd46b6253158476826d2c69cde"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg5NTgzNw==", "bodyText": "Will do", "url": "https://github.com/prestodb/presto/pull/14119#discussion_r387895837", "createdAt": "2020-03-04T19:48:20Z", "author": {"login": "mcorreaiz"}, "path": "presto-main/src/main/java/com/facebook/presto/type/khyperloglog/KHyperLogLogStateFactory.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.facebook.presto.type.khyperloglog;\n+\n+import com.facebook.presto.array.ObjectBigArray;\n+import com.facebook.presto.spi.function.AccumulatorStateFactory;\n+import com.facebook.presto.spi.function.GroupedAccumulatorState;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+public class KHyperLogLogStateFactory\n+        implements AccumulatorStateFactory<KHyperLogLogState>\n+{\n+    private static final int SIZE_OF_SINGLE = ClassLayout.parseClass(SingleKHyperLogLogState.class).instanceSize();\n+    private static final int SIZE_OF_GROUPED = ClassLayout.parseClass(GroupedKHyperLogLogState.class).instanceSize();\n+\n+    @Override\n+    public KHyperLogLogState createSingleState()\n+    {\n+        return new SingleKHyperLogLogState();\n+    }\n+\n+    @Override\n+    public Class<? extends KHyperLogLogState> getSingleStateClass()\n+    {\n+        return SingleKHyperLogLogState.class;\n+    }\n+\n+    @Override\n+    public KHyperLogLogState createGroupedState()\n+    {\n+        throw new IllegalArgumentException(\"GROUP BY of KHyperLogLog is not supported.\");\n+    }\n+\n+    @Override\n+    public Class<? extends KHyperLogLogState> getGroupedStateClass()\n+    {\n+        return GroupedKHyperLogLogState.class;\n+    }\n+\n+    public static class GroupedKHyperLogLogState", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ5MTc3NA=="}, "originalCommit": {"oid": "488aa18b8f637ccd46b6253158476826d2c69cde"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjYyMzcyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/type/khyperloglog/BuildKHyperLogLogAggregation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzoyNDoxMVrOFyczyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzoyNDoxMVrOFyczyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ0NTEzMQ==", "bodyText": "Nit: I would call this KHyperLogLogAggregationFunction", "url": "https://github.com/prestodb/presto/pull/14119#discussion_r388445131", "createdAt": "2020-03-05T17:24:11Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/main/java/com/facebook/presto/type/khyperloglog/BuildKHyperLogLogAggregation.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.facebook.presto.type.khyperloglog;\n+\n+import com.facebook.presto.spi.block.BlockBuilder;\n+import com.facebook.presto.spi.function.AggregationFunction;\n+import com.facebook.presto.spi.function.AggregationState;\n+import com.facebook.presto.spi.function.CombineFunction;\n+import com.facebook.presto.spi.function.InputFunction;\n+import com.facebook.presto.spi.function.LiteralParameters;\n+import com.facebook.presto.spi.function.OutputFunction;\n+import com.facebook.presto.spi.function.SqlType;\n+import com.facebook.presto.spi.type.StandardTypes;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.XxHash64;\n+\n+@AggregationFunction(\"khyperloglog_agg\")\n+public final class BuildKHyperLogLogAggregation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bedbf65b5ba0f6e80c8d8ada8d09e7a67b5b6ad"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzE0MTIyOnYy", "diffSide": "RIGHT", "path": ".gitignore", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTo1NDo1M1rOFyh3JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMDowMTo0MVrOFzK17g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUyNzkwOA==", "bodyText": "what's this? :)", "url": "https://github.com/prestodb/presto/pull/14119#discussion_r388527908", "createdAt": "2020-03-05T19:54:53Z", "author": {"login": "wenleix"}, "path": ".gitignore", "diffHunk": "@@ -25,3 +25,4 @@ benchmark_outputs\n .mvn/timing.properties\n .editorconfig\n node_modules\n+out/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "caa0320efafc6730c92a21a6aaa44a0fbd882899"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUzODU4Nw==", "bodyText": "IntelliJ output directory. Maybe I should just change Intellij config to output somewhere else?", "url": "https://github.com/prestodb/presto/pull/14119#discussion_r388538587", "createdAt": "2020-03-05T20:15:40Z", "author": {"login": "mcorreaiz"}, "path": ".gitignore", "diffHunk": "@@ -25,3 +25,4 @@ benchmark_outputs\n .mvn/timing.properties\n .editorconfig\n node_modules\n+out/", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUyNzkwOA=="}, "originalCommit": {"oid": "caa0320efafc6730c92a21a6aaa44a0fbd882899"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE5OTM0Mg==", "bodyText": "Let's remove this as this seems irrelevant.", "url": "https://github.com/prestodb/presto/pull/14119#discussion_r389199342", "createdAt": "2020-03-07T00:01:41Z", "author": {"login": "shixuan-fan"}, "path": ".gitignore", "diffHunk": "@@ -25,3 +25,4 @@ benchmark_outputs\n .mvn/timing.properties\n .editorconfig\n node_modules\n+out/", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUyNzkwOA=="}, "originalCommit": {"oid": "caa0320efafc6730c92a21a6aaa44a0fbd882899"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzc4OTc2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/type/TypeRegistry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMzozMjoyMVrOFyn3xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMzo1Njo1OVrOFyoTkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYyNjM3Mw==", "bodyText": "Seems unrelated change but it does not bother me as much.", "url": "https://github.com/prestodb/presto/pull/14119#discussion_r388626373", "createdAt": "2020-03-05T23:32:21Z", "author": {"login": "shixuan-fan"}, "path": "presto-main/src/main/java/com/facebook/presto/type/TypeRegistry.java", "diffHunk": "@@ -103,10 +105,8 @@\n     private final ConcurrentMap<TypeSignature, Type> types = new ConcurrentHashMap<>();\n     private final ConcurrentMap<String, ParametricType> parametricTypes = new ConcurrentHashMap<>();\n     private final FeaturesConfig featuresConfig;\n-\n-    private FunctionManager functionManager;\n-\n     private final LoadingCache<TypeSignature, Type> parametricTypeCache;\n+    private FunctionManager functionManager;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3667f0ef1628dc0e910a8ecd00deaee16bd246f"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYzMzQ4OQ==", "bodyText": "Reverted.", "url": "https://github.com/prestodb/presto/pull/14119#discussion_r388633489", "createdAt": "2020-03-05T23:56:59Z", "author": {"login": "mcorreaiz"}, "path": "presto-main/src/main/java/com/facebook/presto/type/TypeRegistry.java", "diffHunk": "@@ -103,10 +105,8 @@\n     private final ConcurrentMap<TypeSignature, Type> types = new ConcurrentHashMap<>();\n     private final ConcurrentMap<String, ParametricType> parametricTypes = new ConcurrentHashMap<>();\n     private final FeaturesConfig featuresConfig;\n-\n-    private FunctionManager functionManager;\n-\n     private final LoadingCache<TypeSignature, Type> parametricTypeCache;\n+    private FunctionManager functionManager;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYyNjM3Mw=="}, "originalCommit": {"oid": "d3667f0ef1628dc0e910a8ecd00deaee16bd246f"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzc5MTUxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/type/TypeRegistry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMzozMzoyMFrOFyn4yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMzo1NzoyMFrOFyoT8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYyNjYzNQ==", "bodyText": "nit: unrelated code move?", "url": "https://github.com/prestodb/presto/pull/14119#discussion_r388626635", "createdAt": "2020-03-05T23:33:20Z", "author": {"login": "shixuan-fan"}, "path": "presto-main/src/main/java/com/facebook/presto/type/TypeRegistry.java", "diffHunk": "@@ -362,6 +363,17 @@ private static Type getCommonSuperTypeForChar(CharType firstType, CharType secon\n         return createCharType(Math.max(firstType.getLength(), secondType.getLength()));\n     }\n \n+    private static boolean isCovariantParametrizedType(Type type)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3667f0ef1628dc0e910a8ecd00deaee16bd246f"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYzMzU4NA==", "bodyText": "Reverted (it was made by IntelliJ autoformat)", "url": "https://github.com/prestodb/presto/pull/14119#discussion_r388633584", "createdAt": "2020-03-05T23:57:20Z", "author": {"login": "mcorreaiz"}, "path": "presto-main/src/main/java/com/facebook/presto/type/TypeRegistry.java", "diffHunk": "@@ -362,6 +363,17 @@ private static Type getCommonSuperTypeForChar(CharType firstType, CharType secon\n         return createCharType(Math.max(firstType.getLength(), secondType.getLength()));\n     }\n \n+    private static boolean isCovariantParametrizedType(Type type)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYyNjYzNQ=="}, "originalCommit": {"oid": "d3667f0ef1628dc0e910a8ecd00deaee16bd246f"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzgwODc0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/type/khyperloglog/KHyperLogLog.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMzo0MjoyMVrOFyoC9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMDoxNjowMlrOFzLA5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYyOTIzNw==", "bodyText": "Out of curiosity, where does this -1 bias correction kick in within the code?", "url": "https://github.com/prestodb/presto/pull/14119#discussion_r388629237", "createdAt": "2020-03-05T23:42:21Z", "author": {"login": "shixuan-fan"}, "path": "presto-main/src/main/java/com/facebook/presto/type/khyperloglog/KHyperLogLog.java", "diffHunk": "@@ -0,0 +1,349 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.facebook.presto.type.khyperloglog;\n+\n+import com.facebook.airlift.stats.cardinality.HyperLogLog;\n+import com.google.common.collect.Sets;\n+import io.airlift.slice.DynamicSliceOutput;\n+import io.airlift.slice.Murmur3Hash128;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.SliceInput;\n+import io.airlift.slice.SliceOutput;\n+import it.unimi.dsi.fastutil.ints.IntArrayList;\n+import it.unimi.dsi.fastutil.ints.IntList;\n+import it.unimi.dsi.fastutil.longs.Long2DoubleMap;\n+import it.unimi.dsi.fastutil.longs.Long2DoubleOpenHashMap;\n+import it.unimi.dsi.fastutil.longs.Long2ObjectRBTreeMap;\n+import it.unimi.dsi.fastutil.longs.Long2ObjectSortedMap;\n+import it.unimi.dsi.fastutil.longs.LongIterator;\n+import it.unimi.dsi.fastutil.longs.LongRBTreeSet;\n+import it.unimi.dsi.fastutil.longs.LongSortedSet;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.PrimitiveIterator;\n+import java.util.stream.LongStream;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static io.airlift.slice.SizeOf.SIZE_OF_BYTE;\n+import static io.airlift.slice.SizeOf.SIZE_OF_INT;\n+import static io.airlift.slice.SizeOf.SIZE_OF_LONG;\n+import static io.airlift.slice.Slices.wrappedIntArray;\n+import static io.airlift.slice.Slices.wrappedLongArray;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * For reference on KHyperLogLog, see \"KHyperLogLog: Estimating Reidentifiability and\n+ * Joinability of Large Data at Scale\" by Chia et al., 2019.\n+ */\n+public class KHyperLogLog\n+{\n+    public static final int DEFAULT_HLL_BUCKETS = 256;\n+    public static final int DEFAULT_MAX_SIZE = 4096;\n+    private static final byte VERSION_BYTE = 1;\n+    private static final long HASH_OUTPUT_HALF_RANGE = Long.MAX_VALUE;\n+    private static final int SIZE_OF_KHYPERLOGLOG = ClassLayout.parseClass(KHyperLogLog.class).instanceSize();\n+    private static final int SIZE_OF_RBTREEMAP = ClassLayout.parseClass(Long2ObjectRBTreeMap.class).instanceSize();\n+\n+    private final Long2ObjectSortedMap<HyperLogLog> minhash;\n+    private final int maxSize;\n+    private final int hllBuckets;\n+\n+    private int hllsTotalEstimatedInMemorySize;\n+    private int hllsTotalEstimatedSerializedSize;\n+\n+    public KHyperLogLog()\n+    {\n+        this(DEFAULT_MAX_SIZE, DEFAULT_HLL_BUCKETS, new Long2ObjectRBTreeMap<>());\n+    }\n+\n+    public KHyperLogLog(int maxSize, int hllBuckets)\n+    {\n+        this(maxSize, hllBuckets, new Long2ObjectRBTreeMap<>());\n+    }\n+\n+    public KHyperLogLog(int maxSize, int hllBuckets, Long2ObjectSortedMap<HyperLogLog> minhash)\n+    {\n+        this.maxSize = maxSize;\n+        this.hllBuckets = hllBuckets;\n+        this.minhash = requireNonNull(minhash, \"minhash is null\");\n+        hllsTotalEstimatedInMemorySize = 0;\n+        hllsTotalEstimatedSerializedSize = 0;\n+\n+        for (HyperLogLog hll : minhash.values()) {\n+            increaseTotalHllSize(hll);\n+        }\n+    }\n+\n+    public static KHyperLogLog newInstance(Slice serialized)\n+    {\n+        requireNonNull(serialized, \"serialized is null\");\n+        SliceInput input = serialized.getInput();\n+        checkArgument(input.readByte() == VERSION_BYTE, \"Unexpected version\");\n+        Long2ObjectRBTreeMap<HyperLogLog> minhash = new Long2ObjectRBTreeMap<>();\n+\n+        int maxSize = input.readInt();\n+        int hllBuckets = input.readInt();\n+        int minhashSize = input.readInt();\n+        int totalHllSize = input.readInt();\n+\n+        int[] hllSizes = new int[minhashSize];\n+        long[] keys = new long[minhashSize];\n+        input.readBytes(wrappedIntArray(hllSizes));\n+        input.readBytes(wrappedLongArray(keys));\n+\n+        Slice allSerializedHlls = input.readSlice(totalHllSize);\n+\n+        int hllLength;\n+        int index = 0;\n+        Slice serializedHll;\n+        for (int i = 0; i < minhashSize; i++) {\n+            hllLength = hllSizes[i];\n+            serializedHll = allSerializedHlls.slice(index, hllLength);\n+            index += hllLength;\n+            minhash.put(keys[i], HyperLogLog.newInstance(serializedHll));\n+        }\n+\n+        return new KHyperLogLog(maxSize, hllBuckets, minhash);\n+    }\n+\n+    public Slice serialize()\n+    {\n+        try (SliceOutput output = new DynamicSliceOutput(estimatedSerializedSize())) {\n+            Slice serializedHll;\n+            List<Slice> hllSlices = new ArrayList<>();\n+            IntList hllSizes = new IntArrayList();\n+            int totalHllSize = 0;\n+\n+            for (HyperLogLog hll : minhash.values()) {\n+                serializedHll = hll.serialize();\n+                hllSlices.add(serializedHll);\n+                totalHllSize += serializedHll.length();\n+                hllSizes.add(serializedHll.length());\n+            }\n+\n+            Slice hashesSlice = wrappedLongArray(minhash.keySet().toLongArray());\n+            Slice hllSizesSlice = wrappedIntArray(hllSizes.toIntArray());\n+\n+            output.appendByte(VERSION_BYTE);\n+            output.appendInt(maxSize);\n+            output.appendInt(hllBuckets);\n+            output.appendInt(minhash.size());\n+            output.appendInt(totalHllSize);\n+            output.appendBytes(hllSizesSlice);\n+            output.appendBytes(hashesSlice);\n+            for (Slice hllSlice : hllSlices) {\n+                output.appendBytes(hllSlice);\n+            }\n+\n+            return output.slice();\n+        }\n+        catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    public static long exactIntersectionCardinality(KHyperLogLog a, KHyperLogLog b)\n+    {\n+        checkState(a.isExact(), \"exact intersection cannot operate on approximate sets\");\n+        checkArgument(b.isExact(), \"exact intersection cannot operate on approximate sets\");\n+\n+        return Sets.intersection(a.minhash.keySet(), b.minhash.keySet()).size();\n+    }\n+\n+    public static double jaccardIndex(KHyperLogLog a, KHyperLogLog b)\n+    {\n+        int sizeOfSmallerSet = Math.min(a.minhash.size(), b.minhash.size());\n+        LongSortedSet minUnion = new LongRBTreeSet(a.minhash.keySet());\n+        minUnion.addAll(b.minhash.keySet());\n+\n+        int intersection = 0;\n+        int i = 0;\n+\n+        LongIterator iterator = minUnion.iterator();\n+        while (iterator.hasNext()) {\n+            long key = iterator.nextLong();\n+            if (a.minhash.containsKey(key) && b.minhash.containsKey(key)) {\n+                intersection++;\n+            }\n+            i++;\n+            if (i >= sizeOfSmallerSet) {\n+                break;\n+            }\n+        }\n+        return intersection / (double) sizeOfSmallerSet;\n+    }\n+\n+    public static KHyperLogLog merge(KHyperLogLog khll1, KHyperLogLog khll2)\n+    {\n+         // Return the one with smallest K so resolution is not lost. This loss would happen in the case\n+         // one merged a smaller KHLL into a bigger one because the former's minhash struct won't\n+         // cover all of the latter's minhash space.\n+        if (khll1.maxSize <= khll2.maxSize) {\n+            return khll1.mergeWith(khll2);\n+        }\n+        return khll2.mergeWith(khll1);\n+    }\n+\n+    public boolean isExact()\n+    {\n+        return minhash.size() < maxSize;\n+    }\n+\n+    public long getMinhashSize()\n+    {\n+        return minhash.size();\n+    }\n+\n+    public int estimatedInMemorySize()\n+    {\n+        return SIZE_OF_KHYPERLOGLOG +\n+                SIZE_OF_RBTREEMAP +\n+                minhash.size() * SIZE_OF_LONG +\n+                hllsTotalEstimatedInMemorySize * SIZE_OF_BYTE;\n+    }\n+\n+    public int estimatedSerializedSize()\n+    {\n+        return SIZE_OF_BYTE +\n+                4 * SIZE_OF_INT +\n+                minhash.size() * (SIZE_OF_LONG + SIZE_OF_INT) +\n+                hllsTotalEstimatedSerializedSize * SIZE_OF_BYTE;\n+    }\n+\n+    public void add(long value, long uii)\n+    {\n+        update(Murmur3Hash128.hash64(value), uii);\n+    }\n+\n+    public void add(Slice value, long uii)\n+    {\n+        update(Murmur3Hash128.hash64(value), uii);\n+    }\n+\n+    private void update(long hash, long uii)\n+    {\n+        if (!(minhash.containsKey(hash) || isExact() || hash < minhash.lastLongKey())) {\n+            return;\n+        }\n+\n+        HyperLogLog hll = minhash.computeIfAbsent(hash, k -> {\n+            HyperLogLog newHll = HyperLogLog.newInstance(hllBuckets);\n+            increaseTotalHllSize(newHll);\n+            return newHll;\n+        });\n+\n+        decreaseTotalHllSize(hll);\n+        hll.add(uii);\n+        increaseTotalHllSize(hll);\n+\n+        removeOverflowEntries();\n+    }\n+\n+    public long cardinality()\n+    {\n+        if (isExact()) {\n+            return minhash.size();\n+        }\n+\n+        // Intuition is: get the stored hashes' density, and extrapolate to the whole Hash output range.\n+        // Since Hash output range (2^64) cannot be stored in long type, I use half of the range\n+        // via Long.MAX_VALUE and also divide the hash values' density by 2. The \"-1\" is bias correction", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3667f0ef1628dc0e910a8ecd00deaee16bd246f"}, "originalPosition": 267}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYzMzg4OQ==", "bodyText": "Thanks for pointing out! Must've missed it in some revision. I included it back.", "url": "https://github.com/prestodb/presto/pull/14119#discussion_r388633889", "createdAt": "2020-03-05T23:58:11Z", "author": {"login": "mcorreaiz"}, "path": "presto-main/src/main/java/com/facebook/presto/type/khyperloglog/KHyperLogLog.java", "diffHunk": "@@ -0,0 +1,349 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.facebook.presto.type.khyperloglog;\n+\n+import com.facebook.airlift.stats.cardinality.HyperLogLog;\n+import com.google.common.collect.Sets;\n+import io.airlift.slice.DynamicSliceOutput;\n+import io.airlift.slice.Murmur3Hash128;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.SliceInput;\n+import io.airlift.slice.SliceOutput;\n+import it.unimi.dsi.fastutil.ints.IntArrayList;\n+import it.unimi.dsi.fastutil.ints.IntList;\n+import it.unimi.dsi.fastutil.longs.Long2DoubleMap;\n+import it.unimi.dsi.fastutil.longs.Long2DoubleOpenHashMap;\n+import it.unimi.dsi.fastutil.longs.Long2ObjectRBTreeMap;\n+import it.unimi.dsi.fastutil.longs.Long2ObjectSortedMap;\n+import it.unimi.dsi.fastutil.longs.LongIterator;\n+import it.unimi.dsi.fastutil.longs.LongRBTreeSet;\n+import it.unimi.dsi.fastutil.longs.LongSortedSet;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.PrimitiveIterator;\n+import java.util.stream.LongStream;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static io.airlift.slice.SizeOf.SIZE_OF_BYTE;\n+import static io.airlift.slice.SizeOf.SIZE_OF_INT;\n+import static io.airlift.slice.SizeOf.SIZE_OF_LONG;\n+import static io.airlift.slice.Slices.wrappedIntArray;\n+import static io.airlift.slice.Slices.wrappedLongArray;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * For reference on KHyperLogLog, see \"KHyperLogLog: Estimating Reidentifiability and\n+ * Joinability of Large Data at Scale\" by Chia et al., 2019.\n+ */\n+public class KHyperLogLog\n+{\n+    public static final int DEFAULT_HLL_BUCKETS = 256;\n+    public static final int DEFAULT_MAX_SIZE = 4096;\n+    private static final byte VERSION_BYTE = 1;\n+    private static final long HASH_OUTPUT_HALF_RANGE = Long.MAX_VALUE;\n+    private static final int SIZE_OF_KHYPERLOGLOG = ClassLayout.parseClass(KHyperLogLog.class).instanceSize();\n+    private static final int SIZE_OF_RBTREEMAP = ClassLayout.parseClass(Long2ObjectRBTreeMap.class).instanceSize();\n+\n+    private final Long2ObjectSortedMap<HyperLogLog> minhash;\n+    private final int maxSize;\n+    private final int hllBuckets;\n+\n+    private int hllsTotalEstimatedInMemorySize;\n+    private int hllsTotalEstimatedSerializedSize;\n+\n+    public KHyperLogLog()\n+    {\n+        this(DEFAULT_MAX_SIZE, DEFAULT_HLL_BUCKETS, new Long2ObjectRBTreeMap<>());\n+    }\n+\n+    public KHyperLogLog(int maxSize, int hllBuckets)\n+    {\n+        this(maxSize, hllBuckets, new Long2ObjectRBTreeMap<>());\n+    }\n+\n+    public KHyperLogLog(int maxSize, int hllBuckets, Long2ObjectSortedMap<HyperLogLog> minhash)\n+    {\n+        this.maxSize = maxSize;\n+        this.hllBuckets = hllBuckets;\n+        this.minhash = requireNonNull(minhash, \"minhash is null\");\n+        hllsTotalEstimatedInMemorySize = 0;\n+        hllsTotalEstimatedSerializedSize = 0;\n+\n+        for (HyperLogLog hll : minhash.values()) {\n+            increaseTotalHllSize(hll);\n+        }\n+    }\n+\n+    public static KHyperLogLog newInstance(Slice serialized)\n+    {\n+        requireNonNull(serialized, \"serialized is null\");\n+        SliceInput input = serialized.getInput();\n+        checkArgument(input.readByte() == VERSION_BYTE, \"Unexpected version\");\n+        Long2ObjectRBTreeMap<HyperLogLog> minhash = new Long2ObjectRBTreeMap<>();\n+\n+        int maxSize = input.readInt();\n+        int hllBuckets = input.readInt();\n+        int minhashSize = input.readInt();\n+        int totalHllSize = input.readInt();\n+\n+        int[] hllSizes = new int[minhashSize];\n+        long[] keys = new long[minhashSize];\n+        input.readBytes(wrappedIntArray(hllSizes));\n+        input.readBytes(wrappedLongArray(keys));\n+\n+        Slice allSerializedHlls = input.readSlice(totalHllSize);\n+\n+        int hllLength;\n+        int index = 0;\n+        Slice serializedHll;\n+        for (int i = 0; i < minhashSize; i++) {\n+            hllLength = hllSizes[i];\n+            serializedHll = allSerializedHlls.slice(index, hllLength);\n+            index += hllLength;\n+            minhash.put(keys[i], HyperLogLog.newInstance(serializedHll));\n+        }\n+\n+        return new KHyperLogLog(maxSize, hllBuckets, minhash);\n+    }\n+\n+    public Slice serialize()\n+    {\n+        try (SliceOutput output = new DynamicSliceOutput(estimatedSerializedSize())) {\n+            Slice serializedHll;\n+            List<Slice> hllSlices = new ArrayList<>();\n+            IntList hllSizes = new IntArrayList();\n+            int totalHllSize = 0;\n+\n+            for (HyperLogLog hll : minhash.values()) {\n+                serializedHll = hll.serialize();\n+                hllSlices.add(serializedHll);\n+                totalHllSize += serializedHll.length();\n+                hllSizes.add(serializedHll.length());\n+            }\n+\n+            Slice hashesSlice = wrappedLongArray(minhash.keySet().toLongArray());\n+            Slice hllSizesSlice = wrappedIntArray(hllSizes.toIntArray());\n+\n+            output.appendByte(VERSION_BYTE);\n+            output.appendInt(maxSize);\n+            output.appendInt(hllBuckets);\n+            output.appendInt(minhash.size());\n+            output.appendInt(totalHllSize);\n+            output.appendBytes(hllSizesSlice);\n+            output.appendBytes(hashesSlice);\n+            for (Slice hllSlice : hllSlices) {\n+                output.appendBytes(hllSlice);\n+            }\n+\n+            return output.slice();\n+        }\n+        catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    public static long exactIntersectionCardinality(KHyperLogLog a, KHyperLogLog b)\n+    {\n+        checkState(a.isExact(), \"exact intersection cannot operate on approximate sets\");\n+        checkArgument(b.isExact(), \"exact intersection cannot operate on approximate sets\");\n+\n+        return Sets.intersection(a.minhash.keySet(), b.minhash.keySet()).size();\n+    }\n+\n+    public static double jaccardIndex(KHyperLogLog a, KHyperLogLog b)\n+    {\n+        int sizeOfSmallerSet = Math.min(a.minhash.size(), b.minhash.size());\n+        LongSortedSet minUnion = new LongRBTreeSet(a.minhash.keySet());\n+        minUnion.addAll(b.minhash.keySet());\n+\n+        int intersection = 0;\n+        int i = 0;\n+\n+        LongIterator iterator = minUnion.iterator();\n+        while (iterator.hasNext()) {\n+            long key = iterator.nextLong();\n+            if (a.minhash.containsKey(key) && b.minhash.containsKey(key)) {\n+                intersection++;\n+            }\n+            i++;\n+            if (i >= sizeOfSmallerSet) {\n+                break;\n+            }\n+        }\n+        return intersection / (double) sizeOfSmallerSet;\n+    }\n+\n+    public static KHyperLogLog merge(KHyperLogLog khll1, KHyperLogLog khll2)\n+    {\n+         // Return the one with smallest K so resolution is not lost. This loss would happen in the case\n+         // one merged a smaller KHLL into a bigger one because the former's minhash struct won't\n+         // cover all of the latter's minhash space.\n+        if (khll1.maxSize <= khll2.maxSize) {\n+            return khll1.mergeWith(khll2);\n+        }\n+        return khll2.mergeWith(khll1);\n+    }\n+\n+    public boolean isExact()\n+    {\n+        return minhash.size() < maxSize;\n+    }\n+\n+    public long getMinhashSize()\n+    {\n+        return minhash.size();\n+    }\n+\n+    public int estimatedInMemorySize()\n+    {\n+        return SIZE_OF_KHYPERLOGLOG +\n+                SIZE_OF_RBTREEMAP +\n+                minhash.size() * SIZE_OF_LONG +\n+                hllsTotalEstimatedInMemorySize * SIZE_OF_BYTE;\n+    }\n+\n+    public int estimatedSerializedSize()\n+    {\n+        return SIZE_OF_BYTE +\n+                4 * SIZE_OF_INT +\n+                minhash.size() * (SIZE_OF_LONG + SIZE_OF_INT) +\n+                hllsTotalEstimatedSerializedSize * SIZE_OF_BYTE;\n+    }\n+\n+    public void add(long value, long uii)\n+    {\n+        update(Murmur3Hash128.hash64(value), uii);\n+    }\n+\n+    public void add(Slice value, long uii)\n+    {\n+        update(Murmur3Hash128.hash64(value), uii);\n+    }\n+\n+    private void update(long hash, long uii)\n+    {\n+        if (!(minhash.containsKey(hash) || isExact() || hash < minhash.lastLongKey())) {\n+            return;\n+        }\n+\n+        HyperLogLog hll = minhash.computeIfAbsent(hash, k -> {\n+            HyperLogLog newHll = HyperLogLog.newInstance(hllBuckets);\n+            increaseTotalHllSize(newHll);\n+            return newHll;\n+        });\n+\n+        decreaseTotalHllSize(hll);\n+        hll.add(uii);\n+        increaseTotalHllSize(hll);\n+\n+        removeOverflowEntries();\n+    }\n+\n+    public long cardinality()\n+    {\n+        if (isExact()) {\n+            return minhash.size();\n+        }\n+\n+        // Intuition is: get the stored hashes' density, and extrapolate to the whole Hash output range.\n+        // Since Hash output range (2^64) cannot be stored in long type, I use half of the range\n+        // via Long.MAX_VALUE and also divide the hash values' density by 2. The \"-1\" is bias correction", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYyOTIzNw=="}, "originalCommit": {"oid": "d3667f0ef1628dc0e910a8ecd00deaee16bd246f"}, "originalPosition": 267}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwMjE0OQ==", "bodyText": "Is it possible to have a test that could catch this? Sorry I'm not familiar with HLL so if it is not possible then that's fine.", "url": "https://github.com/prestodb/presto/pull/14119#discussion_r389202149", "createdAt": "2020-03-07T00:16:02Z", "author": {"login": "shixuan-fan"}, "path": "presto-main/src/main/java/com/facebook/presto/type/khyperloglog/KHyperLogLog.java", "diffHunk": "@@ -0,0 +1,349 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.facebook.presto.type.khyperloglog;\n+\n+import com.facebook.airlift.stats.cardinality.HyperLogLog;\n+import com.google.common.collect.Sets;\n+import io.airlift.slice.DynamicSliceOutput;\n+import io.airlift.slice.Murmur3Hash128;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.SliceInput;\n+import io.airlift.slice.SliceOutput;\n+import it.unimi.dsi.fastutil.ints.IntArrayList;\n+import it.unimi.dsi.fastutil.ints.IntList;\n+import it.unimi.dsi.fastutil.longs.Long2DoubleMap;\n+import it.unimi.dsi.fastutil.longs.Long2DoubleOpenHashMap;\n+import it.unimi.dsi.fastutil.longs.Long2ObjectRBTreeMap;\n+import it.unimi.dsi.fastutil.longs.Long2ObjectSortedMap;\n+import it.unimi.dsi.fastutil.longs.LongIterator;\n+import it.unimi.dsi.fastutil.longs.LongRBTreeSet;\n+import it.unimi.dsi.fastutil.longs.LongSortedSet;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.PrimitiveIterator;\n+import java.util.stream.LongStream;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static io.airlift.slice.SizeOf.SIZE_OF_BYTE;\n+import static io.airlift.slice.SizeOf.SIZE_OF_INT;\n+import static io.airlift.slice.SizeOf.SIZE_OF_LONG;\n+import static io.airlift.slice.Slices.wrappedIntArray;\n+import static io.airlift.slice.Slices.wrappedLongArray;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * For reference on KHyperLogLog, see \"KHyperLogLog: Estimating Reidentifiability and\n+ * Joinability of Large Data at Scale\" by Chia et al., 2019.\n+ */\n+public class KHyperLogLog\n+{\n+    public static final int DEFAULT_HLL_BUCKETS = 256;\n+    public static final int DEFAULT_MAX_SIZE = 4096;\n+    private static final byte VERSION_BYTE = 1;\n+    private static final long HASH_OUTPUT_HALF_RANGE = Long.MAX_VALUE;\n+    private static final int SIZE_OF_KHYPERLOGLOG = ClassLayout.parseClass(KHyperLogLog.class).instanceSize();\n+    private static final int SIZE_OF_RBTREEMAP = ClassLayout.parseClass(Long2ObjectRBTreeMap.class).instanceSize();\n+\n+    private final Long2ObjectSortedMap<HyperLogLog> minhash;\n+    private final int maxSize;\n+    private final int hllBuckets;\n+\n+    private int hllsTotalEstimatedInMemorySize;\n+    private int hllsTotalEstimatedSerializedSize;\n+\n+    public KHyperLogLog()\n+    {\n+        this(DEFAULT_MAX_SIZE, DEFAULT_HLL_BUCKETS, new Long2ObjectRBTreeMap<>());\n+    }\n+\n+    public KHyperLogLog(int maxSize, int hllBuckets)\n+    {\n+        this(maxSize, hllBuckets, new Long2ObjectRBTreeMap<>());\n+    }\n+\n+    public KHyperLogLog(int maxSize, int hllBuckets, Long2ObjectSortedMap<HyperLogLog> minhash)\n+    {\n+        this.maxSize = maxSize;\n+        this.hllBuckets = hllBuckets;\n+        this.minhash = requireNonNull(minhash, \"minhash is null\");\n+        hllsTotalEstimatedInMemorySize = 0;\n+        hllsTotalEstimatedSerializedSize = 0;\n+\n+        for (HyperLogLog hll : minhash.values()) {\n+            increaseTotalHllSize(hll);\n+        }\n+    }\n+\n+    public static KHyperLogLog newInstance(Slice serialized)\n+    {\n+        requireNonNull(serialized, \"serialized is null\");\n+        SliceInput input = serialized.getInput();\n+        checkArgument(input.readByte() == VERSION_BYTE, \"Unexpected version\");\n+        Long2ObjectRBTreeMap<HyperLogLog> minhash = new Long2ObjectRBTreeMap<>();\n+\n+        int maxSize = input.readInt();\n+        int hllBuckets = input.readInt();\n+        int minhashSize = input.readInt();\n+        int totalHllSize = input.readInt();\n+\n+        int[] hllSizes = new int[minhashSize];\n+        long[] keys = new long[minhashSize];\n+        input.readBytes(wrappedIntArray(hllSizes));\n+        input.readBytes(wrappedLongArray(keys));\n+\n+        Slice allSerializedHlls = input.readSlice(totalHllSize);\n+\n+        int hllLength;\n+        int index = 0;\n+        Slice serializedHll;\n+        for (int i = 0; i < minhashSize; i++) {\n+            hllLength = hllSizes[i];\n+            serializedHll = allSerializedHlls.slice(index, hllLength);\n+            index += hllLength;\n+            minhash.put(keys[i], HyperLogLog.newInstance(serializedHll));\n+        }\n+\n+        return new KHyperLogLog(maxSize, hllBuckets, minhash);\n+    }\n+\n+    public Slice serialize()\n+    {\n+        try (SliceOutput output = new DynamicSliceOutput(estimatedSerializedSize())) {\n+            Slice serializedHll;\n+            List<Slice> hllSlices = new ArrayList<>();\n+            IntList hllSizes = new IntArrayList();\n+            int totalHllSize = 0;\n+\n+            for (HyperLogLog hll : minhash.values()) {\n+                serializedHll = hll.serialize();\n+                hllSlices.add(serializedHll);\n+                totalHllSize += serializedHll.length();\n+                hllSizes.add(serializedHll.length());\n+            }\n+\n+            Slice hashesSlice = wrappedLongArray(minhash.keySet().toLongArray());\n+            Slice hllSizesSlice = wrappedIntArray(hllSizes.toIntArray());\n+\n+            output.appendByte(VERSION_BYTE);\n+            output.appendInt(maxSize);\n+            output.appendInt(hllBuckets);\n+            output.appendInt(minhash.size());\n+            output.appendInt(totalHllSize);\n+            output.appendBytes(hllSizesSlice);\n+            output.appendBytes(hashesSlice);\n+            for (Slice hllSlice : hllSlices) {\n+                output.appendBytes(hllSlice);\n+            }\n+\n+            return output.slice();\n+        }\n+        catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    public static long exactIntersectionCardinality(KHyperLogLog a, KHyperLogLog b)\n+    {\n+        checkState(a.isExact(), \"exact intersection cannot operate on approximate sets\");\n+        checkArgument(b.isExact(), \"exact intersection cannot operate on approximate sets\");\n+\n+        return Sets.intersection(a.minhash.keySet(), b.minhash.keySet()).size();\n+    }\n+\n+    public static double jaccardIndex(KHyperLogLog a, KHyperLogLog b)\n+    {\n+        int sizeOfSmallerSet = Math.min(a.minhash.size(), b.minhash.size());\n+        LongSortedSet minUnion = new LongRBTreeSet(a.minhash.keySet());\n+        minUnion.addAll(b.minhash.keySet());\n+\n+        int intersection = 0;\n+        int i = 0;\n+\n+        LongIterator iterator = minUnion.iterator();\n+        while (iterator.hasNext()) {\n+            long key = iterator.nextLong();\n+            if (a.minhash.containsKey(key) && b.minhash.containsKey(key)) {\n+                intersection++;\n+            }\n+            i++;\n+            if (i >= sizeOfSmallerSet) {\n+                break;\n+            }\n+        }\n+        return intersection / (double) sizeOfSmallerSet;\n+    }\n+\n+    public static KHyperLogLog merge(KHyperLogLog khll1, KHyperLogLog khll2)\n+    {\n+         // Return the one with smallest K so resolution is not lost. This loss would happen in the case\n+         // one merged a smaller KHLL into a bigger one because the former's minhash struct won't\n+         // cover all of the latter's minhash space.\n+        if (khll1.maxSize <= khll2.maxSize) {\n+            return khll1.mergeWith(khll2);\n+        }\n+        return khll2.mergeWith(khll1);\n+    }\n+\n+    public boolean isExact()\n+    {\n+        return minhash.size() < maxSize;\n+    }\n+\n+    public long getMinhashSize()\n+    {\n+        return minhash.size();\n+    }\n+\n+    public int estimatedInMemorySize()\n+    {\n+        return SIZE_OF_KHYPERLOGLOG +\n+                SIZE_OF_RBTREEMAP +\n+                minhash.size() * SIZE_OF_LONG +\n+                hllsTotalEstimatedInMemorySize * SIZE_OF_BYTE;\n+    }\n+\n+    public int estimatedSerializedSize()\n+    {\n+        return SIZE_OF_BYTE +\n+                4 * SIZE_OF_INT +\n+                minhash.size() * (SIZE_OF_LONG + SIZE_OF_INT) +\n+                hllsTotalEstimatedSerializedSize * SIZE_OF_BYTE;\n+    }\n+\n+    public void add(long value, long uii)\n+    {\n+        update(Murmur3Hash128.hash64(value), uii);\n+    }\n+\n+    public void add(Slice value, long uii)\n+    {\n+        update(Murmur3Hash128.hash64(value), uii);\n+    }\n+\n+    private void update(long hash, long uii)\n+    {\n+        if (!(minhash.containsKey(hash) || isExact() || hash < minhash.lastLongKey())) {\n+            return;\n+        }\n+\n+        HyperLogLog hll = minhash.computeIfAbsent(hash, k -> {\n+            HyperLogLog newHll = HyperLogLog.newInstance(hllBuckets);\n+            increaseTotalHllSize(newHll);\n+            return newHll;\n+        });\n+\n+        decreaseTotalHllSize(hll);\n+        hll.add(uii);\n+        increaseTotalHllSize(hll);\n+\n+        removeOverflowEntries();\n+    }\n+\n+    public long cardinality()\n+    {\n+        if (isExact()) {\n+            return minhash.size();\n+        }\n+\n+        // Intuition is: get the stored hashes' density, and extrapolate to the whole Hash output range.\n+        // Since Hash output range (2^64) cannot be stored in long type, I use half of the range\n+        // via Long.MAX_VALUE and also divide the hash values' density by 2. The \"-1\" is bias correction", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYyOTIzNw=="}, "originalCommit": {"oid": "d3667f0ef1628dc0e910a8ecd00deaee16bd246f"}, "originalPosition": 267}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTQ4MDYwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/type/khyperloglog/KHyperLogLog.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMDowNzo1MFrOFzK6eQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMDo0MDo0M1rOFzLSXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwMDUwNQ==", "bodyText": "Maybe initialize these two to 0 here instead of in the constructor?", "url": "https://github.com/prestodb/presto/pull/14119#discussion_r389200505", "createdAt": "2020-03-07T00:07:50Z", "author": {"login": "shixuan-fan"}, "path": "presto-main/src/main/java/com/facebook/presto/type/khyperloglog/KHyperLogLog.java", "diffHunk": "@@ -0,0 +1,349 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.facebook.presto.type.khyperloglog;\n+\n+import com.facebook.airlift.stats.cardinality.HyperLogLog;\n+import com.google.common.collect.Sets;\n+import io.airlift.slice.DynamicSliceOutput;\n+import io.airlift.slice.Murmur3Hash128;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.SliceInput;\n+import io.airlift.slice.SliceOutput;\n+import it.unimi.dsi.fastutil.ints.IntArrayList;\n+import it.unimi.dsi.fastutil.ints.IntList;\n+import it.unimi.dsi.fastutil.longs.Long2DoubleMap;\n+import it.unimi.dsi.fastutil.longs.Long2DoubleOpenHashMap;\n+import it.unimi.dsi.fastutil.longs.Long2ObjectRBTreeMap;\n+import it.unimi.dsi.fastutil.longs.Long2ObjectSortedMap;\n+import it.unimi.dsi.fastutil.longs.LongIterator;\n+import it.unimi.dsi.fastutil.longs.LongRBTreeSet;\n+import it.unimi.dsi.fastutil.longs.LongSortedSet;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.PrimitiveIterator;\n+import java.util.stream.LongStream;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static io.airlift.slice.SizeOf.SIZE_OF_BYTE;\n+import static io.airlift.slice.SizeOf.SIZE_OF_INT;\n+import static io.airlift.slice.SizeOf.SIZE_OF_LONG;\n+import static io.airlift.slice.Slices.wrappedIntArray;\n+import static io.airlift.slice.Slices.wrappedLongArray;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * For reference on KHyperLogLog, see \"KHyperLogLog: Estimating Reidentifiability and\n+ * Joinability of Large Data at Scale\" by Chia et al., 2019.\n+ */\n+public class KHyperLogLog\n+{\n+    public static final int DEFAULT_HLL_BUCKETS = 256;\n+    public static final int DEFAULT_MAX_SIZE = 4096;\n+    private static final byte VERSION_BYTE = 1;\n+    private static final long HASH_OUTPUT_HALF_RANGE = Long.MAX_VALUE;\n+    private static final int SIZE_OF_KHYPERLOGLOG = ClassLayout.parseClass(KHyperLogLog.class).instanceSize();\n+    private static final int SIZE_OF_RBTREEMAP = ClassLayout.parseClass(Long2ObjectRBTreeMap.class).instanceSize();\n+\n+    private final Long2ObjectSortedMap<HyperLogLog> minhash;\n+    private final int maxSize;\n+    private final int hllBuckets;\n+\n+    private int hllsTotalEstimatedInMemorySize;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18e507419eb8c7d4e32b575963d0b8926461776d"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwNjYyMw==", "bodyText": "Ok, looks cleaner", "url": "https://github.com/prestodb/presto/pull/14119#discussion_r389206623", "createdAt": "2020-03-07T00:40:43Z", "author": {"login": "mcorreaiz"}, "path": "presto-main/src/main/java/com/facebook/presto/type/khyperloglog/KHyperLogLog.java", "diffHunk": "@@ -0,0 +1,349 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.facebook.presto.type.khyperloglog;\n+\n+import com.facebook.airlift.stats.cardinality.HyperLogLog;\n+import com.google.common.collect.Sets;\n+import io.airlift.slice.DynamicSliceOutput;\n+import io.airlift.slice.Murmur3Hash128;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.SliceInput;\n+import io.airlift.slice.SliceOutput;\n+import it.unimi.dsi.fastutil.ints.IntArrayList;\n+import it.unimi.dsi.fastutil.ints.IntList;\n+import it.unimi.dsi.fastutil.longs.Long2DoubleMap;\n+import it.unimi.dsi.fastutil.longs.Long2DoubleOpenHashMap;\n+import it.unimi.dsi.fastutil.longs.Long2ObjectRBTreeMap;\n+import it.unimi.dsi.fastutil.longs.Long2ObjectSortedMap;\n+import it.unimi.dsi.fastutil.longs.LongIterator;\n+import it.unimi.dsi.fastutil.longs.LongRBTreeSet;\n+import it.unimi.dsi.fastutil.longs.LongSortedSet;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.PrimitiveIterator;\n+import java.util.stream.LongStream;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static io.airlift.slice.SizeOf.SIZE_OF_BYTE;\n+import static io.airlift.slice.SizeOf.SIZE_OF_INT;\n+import static io.airlift.slice.SizeOf.SIZE_OF_LONG;\n+import static io.airlift.slice.Slices.wrappedIntArray;\n+import static io.airlift.slice.Slices.wrappedLongArray;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * For reference on KHyperLogLog, see \"KHyperLogLog: Estimating Reidentifiability and\n+ * Joinability of Large Data at Scale\" by Chia et al., 2019.\n+ */\n+public class KHyperLogLog\n+{\n+    public static final int DEFAULT_HLL_BUCKETS = 256;\n+    public static final int DEFAULT_MAX_SIZE = 4096;\n+    private static final byte VERSION_BYTE = 1;\n+    private static final long HASH_OUTPUT_HALF_RANGE = Long.MAX_VALUE;\n+    private static final int SIZE_OF_KHYPERLOGLOG = ClassLayout.parseClass(KHyperLogLog.class).instanceSize();\n+    private static final int SIZE_OF_RBTREEMAP = ClassLayout.parseClass(Long2ObjectRBTreeMap.class).instanceSize();\n+\n+    private final Long2ObjectSortedMap<HyperLogLog> minhash;\n+    private final int maxSize;\n+    private final int hllBuckets;\n+\n+    private int hllsTotalEstimatedInMemorySize;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwMDUwNQ=="}, "originalCommit": {"oid": "18e507419eb8c7d4e32b575963d0b8926461776d"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTQ4MTg2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/type/khyperloglog/KHyperLogLog.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMDowODozOFrOFzK7OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMDo1Njo1NlrOFzLcBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwMDY5Nw==", "bodyText": "nit: how about minhash.values().stream().forEach(this:: increaseTotalHllSize)?", "url": "https://github.com/prestodb/presto/pull/14119#discussion_r389200697", "createdAt": "2020-03-07T00:08:38Z", "author": {"login": "shixuan-fan"}, "path": "presto-main/src/main/java/com/facebook/presto/type/khyperloglog/KHyperLogLog.java", "diffHunk": "@@ -0,0 +1,349 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.facebook.presto.type.khyperloglog;\n+\n+import com.facebook.airlift.stats.cardinality.HyperLogLog;\n+import com.google.common.collect.Sets;\n+import io.airlift.slice.DynamicSliceOutput;\n+import io.airlift.slice.Murmur3Hash128;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.SliceInput;\n+import io.airlift.slice.SliceOutput;\n+import it.unimi.dsi.fastutil.ints.IntArrayList;\n+import it.unimi.dsi.fastutil.ints.IntList;\n+import it.unimi.dsi.fastutil.longs.Long2DoubleMap;\n+import it.unimi.dsi.fastutil.longs.Long2DoubleOpenHashMap;\n+import it.unimi.dsi.fastutil.longs.Long2ObjectRBTreeMap;\n+import it.unimi.dsi.fastutil.longs.Long2ObjectSortedMap;\n+import it.unimi.dsi.fastutil.longs.LongIterator;\n+import it.unimi.dsi.fastutil.longs.LongRBTreeSet;\n+import it.unimi.dsi.fastutil.longs.LongSortedSet;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.PrimitiveIterator;\n+import java.util.stream.LongStream;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static io.airlift.slice.SizeOf.SIZE_OF_BYTE;\n+import static io.airlift.slice.SizeOf.SIZE_OF_INT;\n+import static io.airlift.slice.SizeOf.SIZE_OF_LONG;\n+import static io.airlift.slice.Slices.wrappedIntArray;\n+import static io.airlift.slice.Slices.wrappedLongArray;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * For reference on KHyperLogLog, see \"KHyperLogLog: Estimating Reidentifiability and\n+ * Joinability of Large Data at Scale\" by Chia et al., 2019.\n+ */\n+public class KHyperLogLog\n+{\n+    public static final int DEFAULT_HLL_BUCKETS = 256;\n+    public static final int DEFAULT_MAX_SIZE = 4096;\n+    private static final byte VERSION_BYTE = 1;\n+    private static final long HASH_OUTPUT_HALF_RANGE = Long.MAX_VALUE;\n+    private static final int SIZE_OF_KHYPERLOGLOG = ClassLayout.parseClass(KHyperLogLog.class).instanceSize();\n+    private static final int SIZE_OF_RBTREEMAP = ClassLayout.parseClass(Long2ObjectRBTreeMap.class).instanceSize();\n+\n+    private final Long2ObjectSortedMap<HyperLogLog> minhash;\n+    private final int maxSize;\n+    private final int hllBuckets;\n+\n+    private int hllsTotalEstimatedInMemorySize;\n+    private int hllsTotalEstimatedSerializedSize;\n+\n+    public KHyperLogLog()\n+    {\n+        this(DEFAULT_MAX_SIZE, DEFAULT_HLL_BUCKETS, new Long2ObjectRBTreeMap<>());\n+    }\n+\n+    public KHyperLogLog(int maxSize, int hllBuckets)\n+    {\n+        this(maxSize, hllBuckets, new Long2ObjectRBTreeMap<>());\n+    }\n+\n+    public KHyperLogLog(int maxSize, int hllBuckets, Long2ObjectSortedMap<HyperLogLog> minhash)\n+    {\n+        this.maxSize = maxSize;\n+        this.hllBuckets = hllBuckets;\n+        this.minhash = requireNonNull(minhash, \"minhash is null\");\n+        hllsTotalEstimatedInMemorySize = 0;\n+        hllsTotalEstimatedSerializedSize = 0;\n+\n+        for (HyperLogLog hll : minhash.values()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18e507419eb8c7d4e32b575963d0b8926461776d"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwODY0MA==", "bodyText": "Would minhash.values().forEach(this::increaseTotalHllSize) be better?", "url": "https://github.com/prestodb/presto/pull/14119#discussion_r389208640", "createdAt": "2020-03-07T00:54:00Z", "author": {"login": "mcorreaiz"}, "path": "presto-main/src/main/java/com/facebook/presto/type/khyperloglog/KHyperLogLog.java", "diffHunk": "@@ -0,0 +1,349 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.facebook.presto.type.khyperloglog;\n+\n+import com.facebook.airlift.stats.cardinality.HyperLogLog;\n+import com.google.common.collect.Sets;\n+import io.airlift.slice.DynamicSliceOutput;\n+import io.airlift.slice.Murmur3Hash128;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.SliceInput;\n+import io.airlift.slice.SliceOutput;\n+import it.unimi.dsi.fastutil.ints.IntArrayList;\n+import it.unimi.dsi.fastutil.ints.IntList;\n+import it.unimi.dsi.fastutil.longs.Long2DoubleMap;\n+import it.unimi.dsi.fastutil.longs.Long2DoubleOpenHashMap;\n+import it.unimi.dsi.fastutil.longs.Long2ObjectRBTreeMap;\n+import it.unimi.dsi.fastutil.longs.Long2ObjectSortedMap;\n+import it.unimi.dsi.fastutil.longs.LongIterator;\n+import it.unimi.dsi.fastutil.longs.LongRBTreeSet;\n+import it.unimi.dsi.fastutil.longs.LongSortedSet;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.PrimitiveIterator;\n+import java.util.stream.LongStream;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static io.airlift.slice.SizeOf.SIZE_OF_BYTE;\n+import static io.airlift.slice.SizeOf.SIZE_OF_INT;\n+import static io.airlift.slice.SizeOf.SIZE_OF_LONG;\n+import static io.airlift.slice.Slices.wrappedIntArray;\n+import static io.airlift.slice.Slices.wrappedLongArray;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * For reference on KHyperLogLog, see \"KHyperLogLog: Estimating Reidentifiability and\n+ * Joinability of Large Data at Scale\" by Chia et al., 2019.\n+ */\n+public class KHyperLogLog\n+{\n+    public static final int DEFAULT_HLL_BUCKETS = 256;\n+    public static final int DEFAULT_MAX_SIZE = 4096;\n+    private static final byte VERSION_BYTE = 1;\n+    private static final long HASH_OUTPUT_HALF_RANGE = Long.MAX_VALUE;\n+    private static final int SIZE_OF_KHYPERLOGLOG = ClassLayout.parseClass(KHyperLogLog.class).instanceSize();\n+    private static final int SIZE_OF_RBTREEMAP = ClassLayout.parseClass(Long2ObjectRBTreeMap.class).instanceSize();\n+\n+    private final Long2ObjectSortedMap<HyperLogLog> minhash;\n+    private final int maxSize;\n+    private final int hllBuckets;\n+\n+    private int hllsTotalEstimatedInMemorySize;\n+    private int hllsTotalEstimatedSerializedSize;\n+\n+    public KHyperLogLog()\n+    {\n+        this(DEFAULT_MAX_SIZE, DEFAULT_HLL_BUCKETS, new Long2ObjectRBTreeMap<>());\n+    }\n+\n+    public KHyperLogLog(int maxSize, int hllBuckets)\n+    {\n+        this(maxSize, hllBuckets, new Long2ObjectRBTreeMap<>());\n+    }\n+\n+    public KHyperLogLog(int maxSize, int hllBuckets, Long2ObjectSortedMap<HyperLogLog> minhash)\n+    {\n+        this.maxSize = maxSize;\n+        this.hllBuckets = hllBuckets;\n+        this.minhash = requireNonNull(minhash, \"minhash is null\");\n+        hllsTotalEstimatedInMemorySize = 0;\n+        hllsTotalEstimatedSerializedSize = 0;\n+\n+        for (HyperLogLog hll : minhash.values()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwMDY5Nw=="}, "originalCommit": {"oid": "18e507419eb8c7d4e32b575963d0b8926461776d"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwOTA5NQ==", "bodyText": "Nice catch. Definitely :D", "url": "https://github.com/prestodb/presto/pull/14119#discussion_r389209095", "createdAt": "2020-03-07T00:56:56Z", "author": {"login": "shixuan-fan"}, "path": "presto-main/src/main/java/com/facebook/presto/type/khyperloglog/KHyperLogLog.java", "diffHunk": "@@ -0,0 +1,349 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.facebook.presto.type.khyperloglog;\n+\n+import com.facebook.airlift.stats.cardinality.HyperLogLog;\n+import com.google.common.collect.Sets;\n+import io.airlift.slice.DynamicSliceOutput;\n+import io.airlift.slice.Murmur3Hash128;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.SliceInput;\n+import io.airlift.slice.SliceOutput;\n+import it.unimi.dsi.fastutil.ints.IntArrayList;\n+import it.unimi.dsi.fastutil.ints.IntList;\n+import it.unimi.dsi.fastutil.longs.Long2DoubleMap;\n+import it.unimi.dsi.fastutil.longs.Long2DoubleOpenHashMap;\n+import it.unimi.dsi.fastutil.longs.Long2ObjectRBTreeMap;\n+import it.unimi.dsi.fastutil.longs.Long2ObjectSortedMap;\n+import it.unimi.dsi.fastutil.longs.LongIterator;\n+import it.unimi.dsi.fastutil.longs.LongRBTreeSet;\n+import it.unimi.dsi.fastutil.longs.LongSortedSet;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.PrimitiveIterator;\n+import java.util.stream.LongStream;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static io.airlift.slice.SizeOf.SIZE_OF_BYTE;\n+import static io.airlift.slice.SizeOf.SIZE_OF_INT;\n+import static io.airlift.slice.SizeOf.SIZE_OF_LONG;\n+import static io.airlift.slice.Slices.wrappedIntArray;\n+import static io.airlift.slice.Slices.wrappedLongArray;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * For reference on KHyperLogLog, see \"KHyperLogLog: Estimating Reidentifiability and\n+ * Joinability of Large Data at Scale\" by Chia et al., 2019.\n+ */\n+public class KHyperLogLog\n+{\n+    public static final int DEFAULT_HLL_BUCKETS = 256;\n+    public static final int DEFAULT_MAX_SIZE = 4096;\n+    private static final byte VERSION_BYTE = 1;\n+    private static final long HASH_OUTPUT_HALF_RANGE = Long.MAX_VALUE;\n+    private static final int SIZE_OF_KHYPERLOGLOG = ClassLayout.parseClass(KHyperLogLog.class).instanceSize();\n+    private static final int SIZE_OF_RBTREEMAP = ClassLayout.parseClass(Long2ObjectRBTreeMap.class).instanceSize();\n+\n+    private final Long2ObjectSortedMap<HyperLogLog> minhash;\n+    private final int maxSize;\n+    private final int hllBuckets;\n+\n+    private int hllsTotalEstimatedInMemorySize;\n+    private int hllsTotalEstimatedSerializedSize;\n+\n+    public KHyperLogLog()\n+    {\n+        this(DEFAULT_MAX_SIZE, DEFAULT_HLL_BUCKETS, new Long2ObjectRBTreeMap<>());\n+    }\n+\n+    public KHyperLogLog(int maxSize, int hllBuckets)\n+    {\n+        this(maxSize, hllBuckets, new Long2ObjectRBTreeMap<>());\n+    }\n+\n+    public KHyperLogLog(int maxSize, int hllBuckets, Long2ObjectSortedMap<HyperLogLog> minhash)\n+    {\n+        this.maxSize = maxSize;\n+        this.hllBuckets = hllBuckets;\n+        this.minhash = requireNonNull(minhash, \"minhash is null\");\n+        hllsTotalEstimatedInMemorySize = 0;\n+        hllsTotalEstimatedSerializedSize = 0;\n+\n+        for (HyperLogLog hll : minhash.values()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwMDY5Nw=="}, "originalCommit": {"oid": "18e507419eb8c7d4e32b575963d0b8926461776d"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTQ4NTYxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/type/khyperloglog/KHyperLogLog.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMDoxMTozM1rOFzK9hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMDoxMTozM1rOFzK9hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwMTI4Nw==", "bodyText": "nit: this could be a local variable in the for loop I think.", "url": "https://github.com/prestodb/presto/pull/14119#discussion_r389201287", "createdAt": "2020-03-07T00:11:33Z", "author": {"login": "shixuan-fan"}, "path": "presto-main/src/main/java/com/facebook/presto/type/khyperloglog/KHyperLogLog.java", "diffHunk": "@@ -0,0 +1,349 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.facebook.presto.type.khyperloglog;\n+\n+import com.facebook.airlift.stats.cardinality.HyperLogLog;\n+import com.google.common.collect.Sets;\n+import io.airlift.slice.DynamicSliceOutput;\n+import io.airlift.slice.Murmur3Hash128;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.SliceInput;\n+import io.airlift.slice.SliceOutput;\n+import it.unimi.dsi.fastutil.ints.IntArrayList;\n+import it.unimi.dsi.fastutil.ints.IntList;\n+import it.unimi.dsi.fastutil.longs.Long2DoubleMap;\n+import it.unimi.dsi.fastutil.longs.Long2DoubleOpenHashMap;\n+import it.unimi.dsi.fastutil.longs.Long2ObjectRBTreeMap;\n+import it.unimi.dsi.fastutil.longs.Long2ObjectSortedMap;\n+import it.unimi.dsi.fastutil.longs.LongIterator;\n+import it.unimi.dsi.fastutil.longs.LongRBTreeSet;\n+import it.unimi.dsi.fastutil.longs.LongSortedSet;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.PrimitiveIterator;\n+import java.util.stream.LongStream;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static io.airlift.slice.SizeOf.SIZE_OF_BYTE;\n+import static io.airlift.slice.SizeOf.SIZE_OF_INT;\n+import static io.airlift.slice.SizeOf.SIZE_OF_LONG;\n+import static io.airlift.slice.Slices.wrappedIntArray;\n+import static io.airlift.slice.Slices.wrappedLongArray;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * For reference on KHyperLogLog, see \"KHyperLogLog: Estimating Reidentifiability and\n+ * Joinability of Large Data at Scale\" by Chia et al., 2019.\n+ */\n+public class KHyperLogLog\n+{\n+    public static final int DEFAULT_HLL_BUCKETS = 256;\n+    public static final int DEFAULT_MAX_SIZE = 4096;\n+    private static final byte VERSION_BYTE = 1;\n+    private static final long HASH_OUTPUT_HALF_RANGE = Long.MAX_VALUE;\n+    private static final int SIZE_OF_KHYPERLOGLOG = ClassLayout.parseClass(KHyperLogLog.class).instanceSize();\n+    private static final int SIZE_OF_RBTREEMAP = ClassLayout.parseClass(Long2ObjectRBTreeMap.class).instanceSize();\n+\n+    private final Long2ObjectSortedMap<HyperLogLog> minhash;\n+    private final int maxSize;\n+    private final int hllBuckets;\n+\n+    private int hllsTotalEstimatedInMemorySize;\n+    private int hllsTotalEstimatedSerializedSize;\n+\n+    public KHyperLogLog()\n+    {\n+        this(DEFAULT_MAX_SIZE, DEFAULT_HLL_BUCKETS, new Long2ObjectRBTreeMap<>());\n+    }\n+\n+    public KHyperLogLog(int maxSize, int hllBuckets)\n+    {\n+        this(maxSize, hllBuckets, new Long2ObjectRBTreeMap<>());\n+    }\n+\n+    public KHyperLogLog(int maxSize, int hllBuckets, Long2ObjectSortedMap<HyperLogLog> minhash)\n+    {\n+        this.maxSize = maxSize;\n+        this.hllBuckets = hllBuckets;\n+        this.minhash = requireNonNull(minhash, \"minhash is null\");\n+        hllsTotalEstimatedInMemorySize = 0;\n+        hllsTotalEstimatedSerializedSize = 0;\n+\n+        for (HyperLogLog hll : minhash.values()) {\n+            increaseTotalHllSize(hll);\n+        }\n+    }\n+\n+    public static KHyperLogLog newInstance(Slice serialized)\n+    {\n+        requireNonNull(serialized, \"serialized is null\");\n+        SliceInput input = serialized.getInput();\n+        checkArgument(input.readByte() == VERSION_BYTE, \"Unexpected version\");\n+        Long2ObjectRBTreeMap<HyperLogLog> minhash = new Long2ObjectRBTreeMap<>();\n+\n+        int maxSize = input.readInt();\n+        int hllBuckets = input.readInt();\n+        int minhashSize = input.readInt();\n+        int totalHllSize = input.readInt();\n+\n+        int[] hllSizes = new int[minhashSize];\n+        long[] keys = new long[minhashSize];\n+        input.readBytes(wrappedIntArray(hllSizes));\n+        input.readBytes(wrappedLongArray(keys));\n+\n+        Slice allSerializedHlls = input.readSlice(totalHllSize);\n+\n+        int hllLength;\n+        int index = 0;\n+        Slice serializedHll;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18e507419eb8c7d4e32b575963d0b8926461776d"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTQ4NjA4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/type/khyperloglog/KHyperLogLog.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMDoxMTo1OFrOFzK93Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMDoxMTo1OFrOFzK93Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwMTM3Mw==", "bodyText": "nit: put this into for loop below.", "url": "https://github.com/prestodb/presto/pull/14119#discussion_r389201373", "createdAt": "2020-03-07T00:11:58Z", "author": {"login": "shixuan-fan"}, "path": "presto-main/src/main/java/com/facebook/presto/type/khyperloglog/KHyperLogLog.java", "diffHunk": "@@ -0,0 +1,349 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.facebook.presto.type.khyperloglog;\n+\n+import com.facebook.airlift.stats.cardinality.HyperLogLog;\n+import com.google.common.collect.Sets;\n+import io.airlift.slice.DynamicSliceOutput;\n+import io.airlift.slice.Murmur3Hash128;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.SliceInput;\n+import io.airlift.slice.SliceOutput;\n+import it.unimi.dsi.fastutil.ints.IntArrayList;\n+import it.unimi.dsi.fastutil.ints.IntList;\n+import it.unimi.dsi.fastutil.longs.Long2DoubleMap;\n+import it.unimi.dsi.fastutil.longs.Long2DoubleOpenHashMap;\n+import it.unimi.dsi.fastutil.longs.Long2ObjectRBTreeMap;\n+import it.unimi.dsi.fastutil.longs.Long2ObjectSortedMap;\n+import it.unimi.dsi.fastutil.longs.LongIterator;\n+import it.unimi.dsi.fastutil.longs.LongRBTreeSet;\n+import it.unimi.dsi.fastutil.longs.LongSortedSet;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.PrimitiveIterator;\n+import java.util.stream.LongStream;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static io.airlift.slice.SizeOf.SIZE_OF_BYTE;\n+import static io.airlift.slice.SizeOf.SIZE_OF_INT;\n+import static io.airlift.slice.SizeOf.SIZE_OF_LONG;\n+import static io.airlift.slice.Slices.wrappedIntArray;\n+import static io.airlift.slice.Slices.wrappedLongArray;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * For reference on KHyperLogLog, see \"KHyperLogLog: Estimating Reidentifiability and\n+ * Joinability of Large Data at Scale\" by Chia et al., 2019.\n+ */\n+public class KHyperLogLog\n+{\n+    public static final int DEFAULT_HLL_BUCKETS = 256;\n+    public static final int DEFAULT_MAX_SIZE = 4096;\n+    private static final byte VERSION_BYTE = 1;\n+    private static final long HASH_OUTPUT_HALF_RANGE = Long.MAX_VALUE;\n+    private static final int SIZE_OF_KHYPERLOGLOG = ClassLayout.parseClass(KHyperLogLog.class).instanceSize();\n+    private static final int SIZE_OF_RBTREEMAP = ClassLayout.parseClass(Long2ObjectRBTreeMap.class).instanceSize();\n+\n+    private final Long2ObjectSortedMap<HyperLogLog> minhash;\n+    private final int maxSize;\n+    private final int hllBuckets;\n+\n+    private int hllsTotalEstimatedInMemorySize;\n+    private int hllsTotalEstimatedSerializedSize;\n+\n+    public KHyperLogLog()\n+    {\n+        this(DEFAULT_MAX_SIZE, DEFAULT_HLL_BUCKETS, new Long2ObjectRBTreeMap<>());\n+    }\n+\n+    public KHyperLogLog(int maxSize, int hllBuckets)\n+    {\n+        this(maxSize, hllBuckets, new Long2ObjectRBTreeMap<>());\n+    }\n+\n+    public KHyperLogLog(int maxSize, int hllBuckets, Long2ObjectSortedMap<HyperLogLog> minhash)\n+    {\n+        this.maxSize = maxSize;\n+        this.hllBuckets = hllBuckets;\n+        this.minhash = requireNonNull(minhash, \"minhash is null\");\n+        hllsTotalEstimatedInMemorySize = 0;\n+        hllsTotalEstimatedSerializedSize = 0;\n+\n+        for (HyperLogLog hll : minhash.values()) {\n+            increaseTotalHllSize(hll);\n+        }\n+    }\n+\n+    public static KHyperLogLog newInstance(Slice serialized)\n+    {\n+        requireNonNull(serialized, \"serialized is null\");\n+        SliceInput input = serialized.getInput();\n+        checkArgument(input.readByte() == VERSION_BYTE, \"Unexpected version\");\n+        Long2ObjectRBTreeMap<HyperLogLog> minhash = new Long2ObjectRBTreeMap<>();\n+\n+        int maxSize = input.readInt();\n+        int hllBuckets = input.readInt();\n+        int minhashSize = input.readInt();\n+        int totalHllSize = input.readInt();\n+\n+        int[] hllSizes = new int[minhashSize];\n+        long[] keys = new long[minhashSize];\n+        input.readBytes(wrappedIntArray(hllSizes));\n+        input.readBytes(wrappedLongArray(keys));\n+\n+        Slice allSerializedHlls = input.readSlice(totalHllSize);\n+\n+        int hllLength;\n+        int index = 0;\n+        Slice serializedHll;\n+        for (int i = 0; i < minhashSize; i++) {\n+            hllLength = hllSizes[i];\n+            serializedHll = allSerializedHlls.slice(index, hllLength);\n+            index += hllLength;\n+            minhash.put(keys[i], HyperLogLog.newInstance(serializedHll));\n+        }\n+\n+        return new KHyperLogLog(maxSize, hllBuckets, minhash);\n+    }\n+\n+    public Slice serialize()\n+    {\n+        try (SliceOutput output = new DynamicSliceOutput(estimatedSerializedSize())) {\n+            Slice serializedHll;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18e507419eb8c7d4e32b575963d0b8926461776d"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTQ5NTgwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/type/khyperloglog/KHyperLogLog.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMDoyMDowNFrOFzLDtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMDoyMDowNFrOFzLDtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwMjg2OQ==", "bodyText": "nit: how about\nint highlyUniqueValues = minhash.values().stream()\n    .map(HyperLogLog::cardinality)\n    .filter(cardinality -> cardinality <= threshold)\n    .count();", "url": "https://github.com/prestodb/presto/pull/14119#discussion_r389202869", "createdAt": "2020-03-07T00:20:04Z", "author": {"login": "shixuan-fan"}, "path": "presto-main/src/main/java/com/facebook/presto/type/khyperloglog/KHyperLogLog.java", "diffHunk": "@@ -0,0 +1,349 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.facebook.presto.type.khyperloglog;\n+\n+import com.facebook.airlift.stats.cardinality.HyperLogLog;\n+import com.google.common.collect.Sets;\n+import io.airlift.slice.DynamicSliceOutput;\n+import io.airlift.slice.Murmur3Hash128;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.SliceInput;\n+import io.airlift.slice.SliceOutput;\n+import it.unimi.dsi.fastutil.ints.IntArrayList;\n+import it.unimi.dsi.fastutil.ints.IntList;\n+import it.unimi.dsi.fastutil.longs.Long2DoubleMap;\n+import it.unimi.dsi.fastutil.longs.Long2DoubleOpenHashMap;\n+import it.unimi.dsi.fastutil.longs.Long2ObjectRBTreeMap;\n+import it.unimi.dsi.fastutil.longs.Long2ObjectSortedMap;\n+import it.unimi.dsi.fastutil.longs.LongIterator;\n+import it.unimi.dsi.fastutil.longs.LongRBTreeSet;\n+import it.unimi.dsi.fastutil.longs.LongSortedSet;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.PrimitiveIterator;\n+import java.util.stream.LongStream;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static io.airlift.slice.SizeOf.SIZE_OF_BYTE;\n+import static io.airlift.slice.SizeOf.SIZE_OF_INT;\n+import static io.airlift.slice.SizeOf.SIZE_OF_LONG;\n+import static io.airlift.slice.Slices.wrappedIntArray;\n+import static io.airlift.slice.Slices.wrappedLongArray;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * For reference on KHyperLogLog, see \"KHyperLogLog: Estimating Reidentifiability and\n+ * Joinability of Large Data at Scale\" by Chia et al., 2019.\n+ */\n+public class KHyperLogLog\n+{\n+    public static final int DEFAULT_HLL_BUCKETS = 256;\n+    public static final int DEFAULT_MAX_SIZE = 4096;\n+    private static final byte VERSION_BYTE = 1;\n+    private static final long HASH_OUTPUT_HALF_RANGE = Long.MAX_VALUE;\n+    private static final int SIZE_OF_KHYPERLOGLOG = ClassLayout.parseClass(KHyperLogLog.class).instanceSize();\n+    private static final int SIZE_OF_RBTREEMAP = ClassLayout.parseClass(Long2ObjectRBTreeMap.class).instanceSize();\n+\n+    private final Long2ObjectSortedMap<HyperLogLog> minhash;\n+    private final int maxSize;\n+    private final int hllBuckets;\n+\n+    private int hllsTotalEstimatedInMemorySize;\n+    private int hllsTotalEstimatedSerializedSize;\n+\n+    public KHyperLogLog()\n+    {\n+        this(DEFAULT_MAX_SIZE, DEFAULT_HLL_BUCKETS, new Long2ObjectRBTreeMap<>());\n+    }\n+\n+    public KHyperLogLog(int maxSize, int hllBuckets)\n+    {\n+        this(maxSize, hllBuckets, new Long2ObjectRBTreeMap<>());\n+    }\n+\n+    public KHyperLogLog(int maxSize, int hllBuckets, Long2ObjectSortedMap<HyperLogLog> minhash)\n+    {\n+        this.maxSize = maxSize;\n+        this.hllBuckets = hllBuckets;\n+        this.minhash = requireNonNull(minhash, \"minhash is null\");\n+        hllsTotalEstimatedInMemorySize = 0;\n+        hllsTotalEstimatedSerializedSize = 0;\n+\n+        for (HyperLogLog hll : minhash.values()) {\n+            increaseTotalHllSize(hll);\n+        }\n+    }\n+\n+    public static KHyperLogLog newInstance(Slice serialized)\n+    {\n+        requireNonNull(serialized, \"serialized is null\");\n+        SliceInput input = serialized.getInput();\n+        checkArgument(input.readByte() == VERSION_BYTE, \"Unexpected version\");\n+        Long2ObjectRBTreeMap<HyperLogLog> minhash = new Long2ObjectRBTreeMap<>();\n+\n+        int maxSize = input.readInt();\n+        int hllBuckets = input.readInt();\n+        int minhashSize = input.readInt();\n+        int totalHllSize = input.readInt();\n+\n+        int[] hllSizes = new int[minhashSize];\n+        long[] keys = new long[minhashSize];\n+        input.readBytes(wrappedIntArray(hllSizes));\n+        input.readBytes(wrappedLongArray(keys));\n+\n+        Slice allSerializedHlls = input.readSlice(totalHllSize);\n+\n+        int hllLength;\n+        int index = 0;\n+        Slice serializedHll;\n+        for (int i = 0; i < minhashSize; i++) {\n+            hllLength = hllSizes[i];\n+            serializedHll = allSerializedHlls.slice(index, hllLength);\n+            index += hllLength;\n+            minhash.put(keys[i], HyperLogLog.newInstance(serializedHll));\n+        }\n+\n+        return new KHyperLogLog(maxSize, hllBuckets, minhash);\n+    }\n+\n+    public Slice serialize()\n+    {\n+        try (SliceOutput output = new DynamicSliceOutput(estimatedSerializedSize())) {\n+            Slice serializedHll;\n+            List<Slice> hllSlices = new ArrayList<>();\n+            IntList hllSizes = new IntArrayList();\n+            int totalHllSize = 0;\n+\n+            for (HyperLogLog hll : minhash.values()) {\n+                serializedHll = hll.serialize();\n+                hllSlices.add(serializedHll);\n+                totalHllSize += serializedHll.length();\n+                hllSizes.add(serializedHll.length());\n+            }\n+\n+            Slice hashesSlice = wrappedLongArray(minhash.keySet().toLongArray());\n+            Slice hllSizesSlice = wrappedIntArray(hllSizes.toIntArray());\n+\n+            output.appendByte(VERSION_BYTE);\n+            output.appendInt(maxSize);\n+            output.appendInt(hllBuckets);\n+            output.appendInt(minhash.size());\n+            output.appendInt(totalHllSize);\n+            output.appendBytes(hllSizesSlice);\n+            output.appendBytes(hashesSlice);\n+            for (Slice hllSlice : hllSlices) {\n+                output.appendBytes(hllSlice);\n+            }\n+\n+            return output.slice();\n+        }\n+        catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    public static long exactIntersectionCardinality(KHyperLogLog a, KHyperLogLog b)\n+    {\n+        checkState(a.isExact(), \"exact intersection cannot operate on approximate sets\");\n+        checkArgument(b.isExact(), \"exact intersection cannot operate on approximate sets\");\n+\n+        return Sets.intersection(a.minhash.keySet(), b.minhash.keySet()).size();\n+    }\n+\n+    public static double jaccardIndex(KHyperLogLog a, KHyperLogLog b)\n+    {\n+        int sizeOfSmallerSet = Math.min(a.minhash.size(), b.minhash.size());\n+        LongSortedSet minUnion = new LongRBTreeSet(a.minhash.keySet());\n+        minUnion.addAll(b.minhash.keySet());\n+\n+        int intersection = 0;\n+        int i = 0;\n+\n+        LongIterator iterator = minUnion.iterator();\n+        while (iterator.hasNext()) {\n+            long key = iterator.nextLong();\n+            if (a.minhash.containsKey(key) && b.minhash.containsKey(key)) {\n+                intersection++;\n+            }\n+            i++;\n+            if (i >= sizeOfSmallerSet) {\n+                break;\n+            }\n+        }\n+        return intersection / (double) sizeOfSmallerSet;\n+    }\n+\n+    public static KHyperLogLog merge(KHyperLogLog khll1, KHyperLogLog khll2)\n+    {\n+         // Return the one with smallest K so resolution is not lost. This loss would happen in the case\n+         // one merged a smaller KHLL into a bigger one because the former's minhash struct won't\n+         // cover all of the latter's minhash space.\n+        if (khll1.maxSize <= khll2.maxSize) {\n+            return khll1.mergeWith(khll2);\n+        }\n+        return khll2.mergeWith(khll1);\n+    }\n+\n+    public boolean isExact()\n+    {\n+        return minhash.size() < maxSize;\n+    }\n+\n+    public long getMinhashSize()\n+    {\n+        return minhash.size();\n+    }\n+\n+    public int estimatedInMemorySize()\n+    {\n+        return SIZE_OF_KHYPERLOGLOG +\n+                SIZE_OF_RBTREEMAP +\n+                minhash.size() * SIZE_OF_LONG +\n+                hllsTotalEstimatedInMemorySize * SIZE_OF_BYTE;\n+    }\n+\n+    public int estimatedSerializedSize()\n+    {\n+        return SIZE_OF_BYTE +\n+                4 * SIZE_OF_INT +\n+                minhash.size() * (SIZE_OF_LONG + SIZE_OF_INT) +\n+                hllsTotalEstimatedSerializedSize * SIZE_OF_BYTE;\n+    }\n+\n+    public void add(long value, long uii)\n+    {\n+        update(Murmur3Hash128.hash64(value), uii);\n+    }\n+\n+    public void add(Slice value, long uii)\n+    {\n+        update(Murmur3Hash128.hash64(value), uii);\n+    }\n+\n+    private void update(long hash, long uii)\n+    {\n+        if (!(minhash.containsKey(hash) || isExact() || hash < minhash.lastLongKey())) {\n+            return;\n+        }\n+\n+        HyperLogLog hll = minhash.computeIfAbsent(hash, k -> {\n+            HyperLogLog newHll = HyperLogLog.newInstance(hllBuckets);\n+            increaseTotalHllSize(newHll);\n+            return newHll;\n+        });\n+\n+        decreaseTotalHllSize(hll);\n+        hll.add(uii);\n+        increaseTotalHllSize(hll);\n+\n+        removeOverflowEntries();\n+    }\n+\n+    public long cardinality()\n+    {\n+        if (isExact()) {\n+            return minhash.size();\n+        }\n+\n+        // Intuition is: get the stored hashes' density, and extrapolate to the whole Hash output range.\n+        // Since Hash output range (2^64) cannot be stored in long type, I use half of the range\n+        // via Long.MAX_VALUE and also divide the hash values' density by 2. The \"-1\" is bias correction\n+        // detailed in \"On Synopses for Distinct-Value Estimation Under Multiset Operations\" by Beyer et. al.\n+        long hashesRange = minhash.lastLongKey() - Long.MIN_VALUE;\n+        double halfDensity = Long.divideUnsigned(hashesRange, minhash.size() - 1) / 2D;\n+        return (long) (HASH_OUTPUT_HALF_RANGE / halfDensity);\n+    }\n+\n+    public KHyperLogLog mergeWith(KHyperLogLog other)\n+    {\n+        LongIterator iterator = other.minhash.keySet().iterator();\n+        while (iterator.hasNext()) {\n+            long key = iterator.nextLong();\n+            HyperLogLog thisHll = minhash.get(key);\n+            HyperLogLog otherHll = other.minhash.get(key);\n+            if (minhash.containsKey(key)) {\n+                decreaseTotalHllSize(thisHll);\n+                thisHll.mergeWith(otherHll);\n+                increaseTotalHllSize(thisHll);\n+            }\n+            else {\n+                minhash.put(key, otherHll);\n+                increaseTotalHllSize(otherHll);\n+            }\n+        }\n+\n+        removeOverflowEntries();\n+\n+        return this;\n+    }\n+\n+    public double reidentificationPotential(long threshold)\n+    {\n+        int highlyUniqueValues = 0;\n+        for (HyperLogLog hll : minhash.values()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18e507419eb8c7d4e32b575963d0b8926461776d"}, "originalPosition": 300}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzAzMjY4OnYy", "diffSide": "RIGHT", "path": ".gitignore", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQyMTo1MjowOFrOFzXnoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQyMzoxNDo1NlrOFzYGDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQwODY3Mg==", "bodyText": "Do we need to change this?", "url": "https://github.com/prestodb/presto/pull/14119#discussion_r389408672", "createdAt": "2020-03-08T21:52:08Z", "author": {"login": "rongrong"}, "path": ".gitignore", "diffHunk": "@@ -24,4 +24,4 @@ benchmark_outputs\n .checkstyle\n .mvn/timing.properties\n .editorconfig\n-node_modules\n+node_modules", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb6e367faf849dd9bcc4f79e922670f10184477d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQxNjQ2Mw==", "bodyText": "Accidentally removed the newline at the end. I put it back", "url": "https://github.com/prestodb/presto/pull/14119#discussion_r389416463", "createdAt": "2020-03-08T23:14:56Z", "author": {"login": "mcorreaiz"}, "path": ".gitignore", "diffHunk": "@@ -24,4 +24,4 @@ benchmark_outputs\n .checkstyle\n .mvn/timing.properties\n .editorconfig\n-node_modules\n+node_modules", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQwODY3Mg=="}, "originalCommit": {"oid": "cb6e367faf849dd9bcc4f79e922670f10184477d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzAzNTMyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/type/khyperloglog/KHyperLogLog.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQyMTo1Njo1M1rOFzXo7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNzo0MjoxMVrOFzyyzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQwOTAwNQ==", "bodyText": "I think we normally call static methods create or createXXX. Though this one might be deserialize?", "url": "https://github.com/prestodb/presto/pull/14119#discussion_r389409005", "createdAt": "2020-03-08T21:56:53Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/type/khyperloglog/KHyperLogLog.java", "diffHunk": "@@ -0,0 +1,344 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.facebook.presto.type.khyperloglog;\n+\n+import com.facebook.airlift.stats.cardinality.HyperLogLog;\n+import com.google.common.collect.Sets;\n+import io.airlift.slice.DynamicSliceOutput;\n+import io.airlift.slice.Murmur3Hash128;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.SliceInput;\n+import io.airlift.slice.SliceOutput;\n+import it.unimi.dsi.fastutil.ints.IntArrayList;\n+import it.unimi.dsi.fastutil.ints.IntList;\n+import it.unimi.dsi.fastutil.longs.Long2DoubleMap;\n+import it.unimi.dsi.fastutil.longs.Long2DoubleOpenHashMap;\n+import it.unimi.dsi.fastutil.longs.Long2ObjectRBTreeMap;\n+import it.unimi.dsi.fastutil.longs.Long2ObjectSortedMap;\n+import it.unimi.dsi.fastutil.longs.LongIterator;\n+import it.unimi.dsi.fastutil.longs.LongRBTreeSet;\n+import it.unimi.dsi.fastutil.longs.LongSortedSet;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.PrimitiveIterator;\n+import java.util.stream.LongStream;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static io.airlift.slice.SizeOf.SIZE_OF_BYTE;\n+import static io.airlift.slice.SizeOf.SIZE_OF_INT;\n+import static io.airlift.slice.SizeOf.SIZE_OF_LONG;\n+import static io.airlift.slice.Slices.wrappedIntArray;\n+import static io.airlift.slice.Slices.wrappedLongArray;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * For reference on KHyperLogLog, see \"KHyperLogLog: Estimating Reidentifiability and\n+ * Joinability of Large Data at Scale\" by Chia et al., 2019.\n+ */\n+public class KHyperLogLog\n+{\n+    public static final int DEFAULT_HLL_BUCKETS = 256;\n+    public static final int DEFAULT_MAX_SIZE = 4096;\n+    public static final long DEFAULT_HISTOGRAM_SIZE = 256;\n+    private static final byte VERSION_BYTE = 1;\n+    private static final long HASH_OUTPUT_HALF_RANGE = Long.MAX_VALUE;\n+    private static final int SIZE_OF_KHYPERLOGLOG = ClassLayout.parseClass(KHyperLogLog.class).instanceSize();\n+    private static final int SIZE_OF_RBTREEMAP = ClassLayout.parseClass(Long2ObjectRBTreeMap.class).instanceSize();\n+\n+    private final Long2ObjectSortedMap<HyperLogLog> minhash;\n+    private final int maxSize;\n+    private final int hllBuckets;\n+\n+    private int hllsTotalEstimatedInMemorySize;\n+    private int hllsTotalEstimatedSerializedSize;\n+\n+    public KHyperLogLog()\n+    {\n+        this(DEFAULT_MAX_SIZE, DEFAULT_HLL_BUCKETS, new Long2ObjectRBTreeMap<>());\n+    }\n+\n+    public KHyperLogLog(int maxSize, int hllBuckets)\n+    {\n+        this(maxSize, hllBuckets, new Long2ObjectRBTreeMap<>());\n+    }\n+\n+    public KHyperLogLog(int maxSize, int hllBuckets, Long2ObjectSortedMap<HyperLogLog> minhash)\n+    {\n+        this.maxSize = maxSize;\n+        this.hllBuckets = hllBuckets;\n+        this.minhash = requireNonNull(minhash, \"minhash is null\");\n+\n+        minhash.values().forEach(this::increaseTotalHllSize);\n+    }\n+\n+    public static KHyperLogLog newInstance(Slice serialized)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb6e367faf849dd9bcc4f79e922670f10184477d"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQxNjc3OQ==", "bodyText": "This method follows HyperLogLog's equivalent newInstance(Slice)  method signature. What do you think? Should I leave it as it is or change to deserialize?", "url": "https://github.com/prestodb/presto/pull/14119#discussion_r389416779", "createdAt": "2020-03-08T23:18:06Z", "author": {"login": "mcorreaiz"}, "path": "presto-main/src/main/java/com/facebook/presto/type/khyperloglog/KHyperLogLog.java", "diffHunk": "@@ -0,0 +1,344 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.facebook.presto.type.khyperloglog;\n+\n+import com.facebook.airlift.stats.cardinality.HyperLogLog;\n+import com.google.common.collect.Sets;\n+import io.airlift.slice.DynamicSliceOutput;\n+import io.airlift.slice.Murmur3Hash128;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.SliceInput;\n+import io.airlift.slice.SliceOutput;\n+import it.unimi.dsi.fastutil.ints.IntArrayList;\n+import it.unimi.dsi.fastutil.ints.IntList;\n+import it.unimi.dsi.fastutil.longs.Long2DoubleMap;\n+import it.unimi.dsi.fastutil.longs.Long2DoubleOpenHashMap;\n+import it.unimi.dsi.fastutil.longs.Long2ObjectRBTreeMap;\n+import it.unimi.dsi.fastutil.longs.Long2ObjectSortedMap;\n+import it.unimi.dsi.fastutil.longs.LongIterator;\n+import it.unimi.dsi.fastutil.longs.LongRBTreeSet;\n+import it.unimi.dsi.fastutil.longs.LongSortedSet;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.PrimitiveIterator;\n+import java.util.stream.LongStream;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static io.airlift.slice.SizeOf.SIZE_OF_BYTE;\n+import static io.airlift.slice.SizeOf.SIZE_OF_INT;\n+import static io.airlift.slice.SizeOf.SIZE_OF_LONG;\n+import static io.airlift.slice.Slices.wrappedIntArray;\n+import static io.airlift.slice.Slices.wrappedLongArray;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * For reference on KHyperLogLog, see \"KHyperLogLog: Estimating Reidentifiability and\n+ * Joinability of Large Data at Scale\" by Chia et al., 2019.\n+ */\n+public class KHyperLogLog\n+{\n+    public static final int DEFAULT_HLL_BUCKETS = 256;\n+    public static final int DEFAULT_MAX_SIZE = 4096;\n+    public static final long DEFAULT_HISTOGRAM_SIZE = 256;\n+    private static final byte VERSION_BYTE = 1;\n+    private static final long HASH_OUTPUT_HALF_RANGE = Long.MAX_VALUE;\n+    private static final int SIZE_OF_KHYPERLOGLOG = ClassLayout.parseClass(KHyperLogLog.class).instanceSize();\n+    private static final int SIZE_OF_RBTREEMAP = ClassLayout.parseClass(Long2ObjectRBTreeMap.class).instanceSize();\n+\n+    private final Long2ObjectSortedMap<HyperLogLog> minhash;\n+    private final int maxSize;\n+    private final int hllBuckets;\n+\n+    private int hllsTotalEstimatedInMemorySize;\n+    private int hllsTotalEstimatedSerializedSize;\n+\n+    public KHyperLogLog()\n+    {\n+        this(DEFAULT_MAX_SIZE, DEFAULT_HLL_BUCKETS, new Long2ObjectRBTreeMap<>());\n+    }\n+\n+    public KHyperLogLog(int maxSize, int hllBuckets)\n+    {\n+        this(maxSize, hllBuckets, new Long2ObjectRBTreeMap<>());\n+    }\n+\n+    public KHyperLogLog(int maxSize, int hllBuckets, Long2ObjectSortedMap<HyperLogLog> minhash)\n+    {\n+        this.maxSize = maxSize;\n+        this.hllBuckets = hllBuckets;\n+        this.minhash = requireNonNull(minhash, \"minhash is null\");\n+\n+        minhash.values().forEach(this::increaseTotalHllSize);\n+    }\n+\n+    public static KHyperLogLog newInstance(Slice serialized)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQwOTAwNQ=="}, "originalCommit": {"oid": "cb6e367faf849dd9bcc4f79e922670f10184477d"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg1MzkwMw==", "bodyText": "I don't have strong opinions on this. newInstance is ok. Thanks!", "url": "https://github.com/prestodb/presto/pull/14119#discussion_r389853903", "createdAt": "2020-03-09T17:42:11Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/type/khyperloglog/KHyperLogLog.java", "diffHunk": "@@ -0,0 +1,344 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.facebook.presto.type.khyperloglog;\n+\n+import com.facebook.airlift.stats.cardinality.HyperLogLog;\n+import com.google.common.collect.Sets;\n+import io.airlift.slice.DynamicSliceOutput;\n+import io.airlift.slice.Murmur3Hash128;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.SliceInput;\n+import io.airlift.slice.SliceOutput;\n+import it.unimi.dsi.fastutil.ints.IntArrayList;\n+import it.unimi.dsi.fastutil.ints.IntList;\n+import it.unimi.dsi.fastutil.longs.Long2DoubleMap;\n+import it.unimi.dsi.fastutil.longs.Long2DoubleOpenHashMap;\n+import it.unimi.dsi.fastutil.longs.Long2ObjectRBTreeMap;\n+import it.unimi.dsi.fastutil.longs.Long2ObjectSortedMap;\n+import it.unimi.dsi.fastutil.longs.LongIterator;\n+import it.unimi.dsi.fastutil.longs.LongRBTreeSet;\n+import it.unimi.dsi.fastutil.longs.LongSortedSet;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.PrimitiveIterator;\n+import java.util.stream.LongStream;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static io.airlift.slice.SizeOf.SIZE_OF_BYTE;\n+import static io.airlift.slice.SizeOf.SIZE_OF_INT;\n+import static io.airlift.slice.SizeOf.SIZE_OF_LONG;\n+import static io.airlift.slice.Slices.wrappedIntArray;\n+import static io.airlift.slice.Slices.wrappedLongArray;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * For reference on KHyperLogLog, see \"KHyperLogLog: Estimating Reidentifiability and\n+ * Joinability of Large Data at Scale\" by Chia et al., 2019.\n+ */\n+public class KHyperLogLog\n+{\n+    public static final int DEFAULT_HLL_BUCKETS = 256;\n+    public static final int DEFAULT_MAX_SIZE = 4096;\n+    public static final long DEFAULT_HISTOGRAM_SIZE = 256;\n+    private static final byte VERSION_BYTE = 1;\n+    private static final long HASH_OUTPUT_HALF_RANGE = Long.MAX_VALUE;\n+    private static final int SIZE_OF_KHYPERLOGLOG = ClassLayout.parseClass(KHyperLogLog.class).instanceSize();\n+    private static final int SIZE_OF_RBTREEMAP = ClassLayout.parseClass(Long2ObjectRBTreeMap.class).instanceSize();\n+\n+    private final Long2ObjectSortedMap<HyperLogLog> minhash;\n+    private final int maxSize;\n+    private final int hllBuckets;\n+\n+    private int hllsTotalEstimatedInMemorySize;\n+    private int hllsTotalEstimatedSerializedSize;\n+\n+    public KHyperLogLog()\n+    {\n+        this(DEFAULT_MAX_SIZE, DEFAULT_HLL_BUCKETS, new Long2ObjectRBTreeMap<>());\n+    }\n+\n+    public KHyperLogLog(int maxSize, int hllBuckets)\n+    {\n+        this(maxSize, hllBuckets, new Long2ObjectRBTreeMap<>());\n+    }\n+\n+    public KHyperLogLog(int maxSize, int hllBuckets, Long2ObjectSortedMap<HyperLogLog> minhash)\n+    {\n+        this.maxSize = maxSize;\n+        this.hllBuckets = hllBuckets;\n+        this.minhash = requireNonNull(minhash, \"minhash is null\");\n+\n+        minhash.values().forEach(this::increaseTotalHllSize);\n+    }\n+\n+    public static KHyperLogLog newInstance(Slice serialized)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQwOTAwNQ=="}, "originalCommit": {"oid": "cb6e367faf849dd9bcc4f79e922670f10184477d"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzAzOTU3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/type/khyperloglog/KHyperLogLog.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQyMjowMjoxOVrOFzXq_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQyMjowMjoxOVrOFzXq_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQwOTUzMg==", "bodyText": "Can you add comment on what each of these are? Thanks!", "url": "https://github.com/prestodb/presto/pull/14119#discussion_r389409532", "createdAt": "2020-03-08T22:02:19Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/type/khyperloglog/KHyperLogLog.java", "diffHunk": "@@ -0,0 +1,344 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.facebook.presto.type.khyperloglog;\n+\n+import com.facebook.airlift.stats.cardinality.HyperLogLog;\n+import com.google.common.collect.Sets;\n+import io.airlift.slice.DynamicSliceOutput;\n+import io.airlift.slice.Murmur3Hash128;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.SliceInput;\n+import io.airlift.slice.SliceOutput;\n+import it.unimi.dsi.fastutil.ints.IntArrayList;\n+import it.unimi.dsi.fastutil.ints.IntList;\n+import it.unimi.dsi.fastutil.longs.Long2DoubleMap;\n+import it.unimi.dsi.fastutil.longs.Long2DoubleOpenHashMap;\n+import it.unimi.dsi.fastutil.longs.Long2ObjectRBTreeMap;\n+import it.unimi.dsi.fastutil.longs.Long2ObjectSortedMap;\n+import it.unimi.dsi.fastutil.longs.LongIterator;\n+import it.unimi.dsi.fastutil.longs.LongRBTreeSet;\n+import it.unimi.dsi.fastutil.longs.LongSortedSet;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.PrimitiveIterator;\n+import java.util.stream.LongStream;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static io.airlift.slice.SizeOf.SIZE_OF_BYTE;\n+import static io.airlift.slice.SizeOf.SIZE_OF_INT;\n+import static io.airlift.slice.SizeOf.SIZE_OF_LONG;\n+import static io.airlift.slice.Slices.wrappedIntArray;\n+import static io.airlift.slice.Slices.wrappedLongArray;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * For reference on KHyperLogLog, see \"KHyperLogLog: Estimating Reidentifiability and\n+ * Joinability of Large Data at Scale\" by Chia et al., 2019.\n+ */\n+public class KHyperLogLog\n+{\n+    public static final int DEFAULT_HLL_BUCKETS = 256;\n+    public static final int DEFAULT_MAX_SIZE = 4096;\n+    public static final long DEFAULT_HISTOGRAM_SIZE = 256;\n+    private static final byte VERSION_BYTE = 1;\n+    private static final long HASH_OUTPUT_HALF_RANGE = Long.MAX_VALUE;\n+    private static final int SIZE_OF_KHYPERLOGLOG = ClassLayout.parseClass(KHyperLogLog.class).instanceSize();\n+    private static final int SIZE_OF_RBTREEMAP = ClassLayout.parseClass(Long2ObjectRBTreeMap.class).instanceSize();\n+\n+    private final Long2ObjectSortedMap<HyperLogLog> minhash;\n+    private final int maxSize;\n+    private final int hllBuckets;\n+\n+    private int hllsTotalEstimatedInMemorySize;\n+    private int hllsTotalEstimatedSerializedSize;\n+\n+    public KHyperLogLog()\n+    {\n+        this(DEFAULT_MAX_SIZE, DEFAULT_HLL_BUCKETS, new Long2ObjectRBTreeMap<>());\n+    }\n+\n+    public KHyperLogLog(int maxSize, int hllBuckets)\n+    {\n+        this(maxSize, hllBuckets, new Long2ObjectRBTreeMap<>());\n+    }\n+\n+    public KHyperLogLog(int maxSize, int hllBuckets, Long2ObjectSortedMap<HyperLogLog> minhash)\n+    {\n+        this.maxSize = maxSize;\n+        this.hllBuckets = hllBuckets;\n+        this.minhash = requireNonNull(minhash, \"minhash is null\");\n+\n+        minhash.values().forEach(this::increaseTotalHllSize);\n+    }\n+\n+    public static KHyperLogLog newInstance(Slice serialized)\n+    {\n+        requireNonNull(serialized, \"serialized is null\");\n+        SliceInput input = serialized.getInput();\n+        checkArgument(input.readByte() == VERSION_BYTE, \"Unexpected version\");\n+        Long2ObjectRBTreeMap<HyperLogLog> minhash = new Long2ObjectRBTreeMap<>();\n+\n+        int maxSize = input.readInt();\n+        int hllBuckets = input.readInt();\n+        int minhashSize = input.readInt();\n+        int totalHllSize = input.readInt();\n+\n+        int[] hllSizes = new int[minhashSize];\n+        long[] keys = new long[minhashSize];\n+        input.readBytes(wrappedIntArray(hllSizes));\n+        input.readBytes(wrappedLongArray(keys));\n+\n+        Slice allSerializedHlls = input.readSlice(totalHllSize);\n+\n+        int hllLength;\n+        int index = 0;\n+        for (int i = 0; i < minhashSize; i++) {\n+            Slice serializedHll;\n+            hllLength = hllSizes[i];\n+            serializedHll = allSerializedHlls.slice(index, hllLength);\n+            index += hllLength;\n+            minhash.put(keys[i], HyperLogLog.newInstance(serializedHll));\n+        }\n+\n+        return new KHyperLogLog(maxSize, hllBuckets, minhash);\n+    }\n+\n+    public Slice serialize()\n+    {\n+        try (SliceOutput output = new DynamicSliceOutput(estimatedSerializedSize())) {\n+            List<Slice> hllSlices = new ArrayList<>();\n+            IntList hllSizes = new IntArrayList();\n+            int totalHllSize = 0;\n+\n+            for (HyperLogLog hll : minhash.values()) {\n+                Slice serializedHll = hll.serialize();\n+                hllSlices.add(serializedHll);\n+                totalHllSize += serializedHll.length();\n+                hllSizes.add(serializedHll.length());\n+            }\n+\n+            Slice hashesSlice = wrappedLongArray(minhash.keySet().toLongArray());\n+            Slice hllSizesSlice = wrappedIntArray(hllSizes.toIntArray());\n+\n+            output.appendByte(VERSION_BYTE);\n+            output.appendInt(maxSize);\n+            output.appendInt(hllBuckets);\n+            output.appendInt(minhash.size());\n+            output.appendInt(totalHllSize);\n+            output.appendBytes(hllSizesSlice);\n+            output.appendBytes(hashesSlice);\n+            for (Slice hllSlice : hllSlices) {\n+                output.appendBytes(hllSlice);\n+            }\n+\n+            return output.slice();\n+        }\n+        catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    public static long exactIntersectionCardinality(KHyperLogLog a, KHyperLogLog b)\n+    {\n+        checkState(a.isExact(), \"exact intersection cannot operate on approximate sets\");\n+        checkArgument(b.isExact(), \"exact intersection cannot operate on approximate sets\");\n+\n+        return Sets.intersection(a.minhash.keySet(), b.minhash.keySet()).size();\n+    }\n+\n+    public static double jaccardIndex(KHyperLogLog a, KHyperLogLog b)\n+    {\n+        int sizeOfSmallerSet = Math.min(a.minhash.size(), b.minhash.size());\n+        LongSortedSet minUnion = new LongRBTreeSet(a.minhash.keySet());\n+        minUnion.addAll(b.minhash.keySet());\n+\n+        int intersection = 0;\n+        int i = 0;\n+\n+        LongIterator iterator = minUnion.iterator();\n+        while (iterator.hasNext()) {\n+            long key = iterator.nextLong();\n+            if (a.minhash.containsKey(key) && b.minhash.containsKey(key)) {\n+                intersection++;\n+            }\n+            i++;\n+            if (i >= sizeOfSmallerSet) {\n+                break;\n+            }\n+        }\n+        return intersection / (double) sizeOfSmallerSet;\n+    }\n+\n+    public static KHyperLogLog merge(KHyperLogLog khll1, KHyperLogLog khll2)\n+    {\n+         // Return the one with smallest K so resolution is not lost. This loss would happen in the case\n+         // one merged a smaller KHLL into a bigger one because the former's minhash struct won't\n+         // cover all of the latter's minhash space.\n+        if (khll1.maxSize <= khll2.maxSize) {\n+            return khll1.mergeWith(khll2);\n+        }\n+        return khll2.mergeWith(khll1);\n+    }\n+\n+    public boolean isExact()\n+    {\n+        return minhash.size() < maxSize;\n+    }\n+\n+    public long getMinhashSize()\n+    {\n+        return minhash.size();\n+    }\n+\n+    public int estimatedInMemorySize()\n+    {\n+        return SIZE_OF_KHYPERLOGLOG +\n+                SIZE_OF_RBTREEMAP +\n+                minhash.size() * SIZE_OF_LONG +\n+                hllsTotalEstimatedInMemorySize * SIZE_OF_BYTE;\n+    }\n+\n+    public int estimatedSerializedSize()\n+    {\n+        return SIZE_OF_BYTE +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb6e367faf849dd9bcc4f79e922670f10184477d"}, "originalPosition": 220}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3039, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}