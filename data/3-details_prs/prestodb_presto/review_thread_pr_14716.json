{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5NDA2MzQy", "number": 14716, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxOTozMzo0NVrOEIgDCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxOTozNjoxNVrOEIgGVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzQ5MTI4OnYy", "diffSide": "RIGHT", "path": "presto-tests/src/test/java/com/facebook/presto/tests/TestQueryManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxOTozMzo0NVrOGogOdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxOTozMzo0NVrOGogOdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEyNDIxMw==", "bodyText": "We don't print to console", "url": "https://github.com/prestodb/presto/pull/14716#discussion_r445124213", "createdAt": "2020-06-24T19:33:45Z", "author": {"login": "tdcmeehan"}, "path": "presto-tests/src/test/java/com/facebook/presto/tests/TestQueryManager.java", "diffHunk": "@@ -90,6 +92,39 @@ public void testFailQuery()\n         assertEquals(queryInfo.getErrorCode(), GENERIC_INTERNAL_ERROR.toErrorCode());\n         assertNotNull(queryInfo.getFailureInfo());\n         assertEquals(queryInfo.getFailureInfo().getMessage(), \"mock exception\");\n+        assertEquals(0, queryManager.getStats().getQueuedQueries());\n+    }\n+\n+    @Test(timeOut = 60_000L)\n+    public void testFailQueryPrerun()\n+            throws Exception\n+    {\n+        DispatchManager dispatchManager = queryRunner.getCoordinator().getDispatchManager();\n+        QueryId queryId = dispatchManager.createQueryId();\n+        dispatchManager.createQuery(\n+                queryId,\n+                \"slug\",\n+                new TestingSessionContext(TEST_SESSION),\n+                \"SELECT * FROM lineitem\")\n+                .get();\n+\n+        // wait until it's admitted but fail it before it starts\n+        while (true) {\n+            QueryState state = dispatchManager.getQueryInfo(queryId).getState();\n+            if (state.ordinal() >= RUNNING.ordinal()) {\n+                fail(\"unexpected query state: \" + state);\n+            }\n+            if (state.ordinal() >= DISPATCHING.ordinal()) {\n+                System.out.println(\"Breaking on state:\" + state);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e6c5a243c645e27a59ffd87bcd5b1ca93fcbbe5"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzQ5Njg4OnYy", "diffSide": "RIGHT", "path": "presto-tests/src/test/java/com/facebook/presto/tests/TestQueryManager.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxOTozNToyMVrOGogR1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxOTo1NzoxOFrOGog-bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEyNTA3Nw==", "bodyText": "Also add a check here to make sure we're not killing an already-running query.", "url": "https://github.com/prestodb/presto/pull/14716#discussion_r445125077", "createdAt": "2020-06-24T19:35:21Z", "author": {"login": "tdcmeehan"}, "path": "presto-tests/src/test/java/com/facebook/presto/tests/TestQueryManager.java", "diffHunk": "@@ -90,6 +92,39 @@ public void testFailQuery()\n         assertEquals(queryInfo.getErrorCode(), GENERIC_INTERNAL_ERROR.toErrorCode());\n         assertNotNull(queryInfo.getFailureInfo());\n         assertEquals(queryInfo.getFailureInfo().getMessage(), \"mock exception\");\n+        assertEquals(0, queryManager.getStats().getQueuedQueries());\n+    }\n+\n+    @Test(timeOut = 60_000L)\n+    public void testFailQueryPrerun()\n+            throws Exception\n+    {\n+        DispatchManager dispatchManager = queryRunner.getCoordinator().getDispatchManager();\n+        QueryId queryId = dispatchManager.createQueryId();\n+        dispatchManager.createQuery(\n+                queryId,\n+                \"slug\",\n+                new TestingSessionContext(TEST_SESSION),\n+                \"SELECT * FROM lineitem\")\n+                .get();\n+\n+        // wait until it's admitted but fail it before it starts\n+        while (true) {\n+            QueryState state = dispatchManager.getQueryInfo(queryId).getState();\n+            if (state.ordinal() >= RUNNING.ordinal()) {\n+                fail(\"unexpected query state: \" + state);\n+            }\n+            if (state.ordinal() >= DISPATCHING.ordinal()) {\n+                System.out.println(\"Breaking on state:\" + state);\n+                break;\n+            }\n+            Thread.sleep(10);\n+        }\n+\n+        // cancel query\n+        QueryManager queryManager = queryRunner.getCoordinator().getQueryManager();\n+        queryManager.failQuery(queryId, new PrestoException(GENERIC_USER_ERROR, \"mock exception\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e6c5a243c645e27a59ffd87bcd5b1ca93fcbbe5"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzMzkwNw==", "bodyText": "Not sure why that should be necessary; the test will fail on line 115 if it gets as far as RUNNING", "url": "https://github.com/prestodb/presto/pull/14716#discussion_r445133907", "createdAt": "2020-06-24T19:52:19Z", "author": {"login": "jeremy-degroot"}, "path": "presto-tests/src/test/java/com/facebook/presto/tests/TestQueryManager.java", "diffHunk": "@@ -90,6 +92,39 @@ public void testFailQuery()\n         assertEquals(queryInfo.getErrorCode(), GENERIC_INTERNAL_ERROR.toErrorCode());\n         assertNotNull(queryInfo.getFailureInfo());\n         assertEquals(queryInfo.getFailureInfo().getMessage(), \"mock exception\");\n+        assertEquals(0, queryManager.getStats().getQueuedQueries());\n+    }\n+\n+    @Test(timeOut = 60_000L)\n+    public void testFailQueryPrerun()\n+            throws Exception\n+    {\n+        DispatchManager dispatchManager = queryRunner.getCoordinator().getDispatchManager();\n+        QueryId queryId = dispatchManager.createQueryId();\n+        dispatchManager.createQuery(\n+                queryId,\n+                \"slug\",\n+                new TestingSessionContext(TEST_SESSION),\n+                \"SELECT * FROM lineitem\")\n+                .get();\n+\n+        // wait until it's admitted but fail it before it starts\n+        while (true) {\n+            QueryState state = dispatchManager.getQueryInfo(queryId).getState();\n+            if (state.ordinal() >= RUNNING.ordinal()) {\n+                fail(\"unexpected query state: \" + state);\n+            }\n+            if (state.ordinal() >= DISPATCHING.ordinal()) {\n+                System.out.println(\"Breaking on state:\" + state);\n+                break;\n+            }\n+            Thread.sleep(10);\n+        }\n+\n+        // cancel query\n+        QueryManager queryManager = queryRunner.getCoordinator().getQueryManager();\n+        queryManager.failQuery(queryId, new PrestoException(GENERIC_USER_ERROR, \"mock exception\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEyNTA3Nw=="}, "originalCommit": {"oid": "4e6c5a243c645e27a59ffd87bcd5b1ca93fcbbe5"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzNTIzMA==", "bodyText": "Query execution is proceeding in the background, so this is a last-moment check that the presumptions still hold.", "url": "https://github.com/prestodb/presto/pull/14716#discussion_r445135230", "createdAt": "2020-06-24T19:54:57Z", "author": {"login": "tdcmeehan"}, "path": "presto-tests/src/test/java/com/facebook/presto/tests/TestQueryManager.java", "diffHunk": "@@ -90,6 +92,39 @@ public void testFailQuery()\n         assertEquals(queryInfo.getErrorCode(), GENERIC_INTERNAL_ERROR.toErrorCode());\n         assertNotNull(queryInfo.getFailureInfo());\n         assertEquals(queryInfo.getFailureInfo().getMessage(), \"mock exception\");\n+        assertEquals(0, queryManager.getStats().getQueuedQueries());\n+    }\n+\n+    @Test(timeOut = 60_000L)\n+    public void testFailQueryPrerun()\n+            throws Exception\n+    {\n+        DispatchManager dispatchManager = queryRunner.getCoordinator().getDispatchManager();\n+        QueryId queryId = dispatchManager.createQueryId();\n+        dispatchManager.createQuery(\n+                queryId,\n+                \"slug\",\n+                new TestingSessionContext(TEST_SESSION),\n+                \"SELECT * FROM lineitem\")\n+                .get();\n+\n+        // wait until it's admitted but fail it before it starts\n+        while (true) {\n+            QueryState state = dispatchManager.getQueryInfo(queryId).getState();\n+            if (state.ordinal() >= RUNNING.ordinal()) {\n+                fail(\"unexpected query state: \" + state);\n+            }\n+            if (state.ordinal() >= DISPATCHING.ordinal()) {\n+                System.out.println(\"Breaking on state:\" + state);\n+                break;\n+            }\n+            Thread.sleep(10);\n+        }\n+\n+        // cancel query\n+        QueryManager queryManager = queryRunner.getCoordinator().getQueryManager();\n+        queryManager.failQuery(queryId, new PrestoException(GENERIC_USER_ERROR, \"mock exception\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEyNTA3Nw=="}, "originalCommit": {"oid": "4e6c5a243c645e27a59ffd87bcd5b1ca93fcbbe5"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzNjQ5NA==", "bodyText": "Fair enough", "url": "https://github.com/prestodb/presto/pull/14716#discussion_r445136494", "createdAt": "2020-06-24T19:57:18Z", "author": {"login": "jeremy-degroot"}, "path": "presto-tests/src/test/java/com/facebook/presto/tests/TestQueryManager.java", "diffHunk": "@@ -90,6 +92,39 @@ public void testFailQuery()\n         assertEquals(queryInfo.getErrorCode(), GENERIC_INTERNAL_ERROR.toErrorCode());\n         assertNotNull(queryInfo.getFailureInfo());\n         assertEquals(queryInfo.getFailureInfo().getMessage(), \"mock exception\");\n+        assertEquals(0, queryManager.getStats().getQueuedQueries());\n+    }\n+\n+    @Test(timeOut = 60_000L)\n+    public void testFailQueryPrerun()\n+            throws Exception\n+    {\n+        DispatchManager dispatchManager = queryRunner.getCoordinator().getDispatchManager();\n+        QueryId queryId = dispatchManager.createQueryId();\n+        dispatchManager.createQuery(\n+                queryId,\n+                \"slug\",\n+                new TestingSessionContext(TEST_SESSION),\n+                \"SELECT * FROM lineitem\")\n+                .get();\n+\n+        // wait until it's admitted but fail it before it starts\n+        while (true) {\n+            QueryState state = dispatchManager.getQueryInfo(queryId).getState();\n+            if (state.ordinal() >= RUNNING.ordinal()) {\n+                fail(\"unexpected query state: \" + state);\n+            }\n+            if (state.ordinal() >= DISPATCHING.ordinal()) {\n+                System.out.println(\"Breaking on state:\" + state);\n+                break;\n+            }\n+            Thread.sleep(10);\n+        }\n+\n+        // cancel query\n+        QueryManager queryManager = queryRunner.getCoordinator().getQueryManager();\n+        queryManager.failQuery(queryId, new PrestoException(GENERIC_USER_ERROR, \"mock exception\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEyNTA3Nw=="}, "originalCommit": {"oid": "4e6c5a243c645e27a59ffd87bcd5b1ca93fcbbe5"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzQ5ODMzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryManagerStats.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxOTozNTo1MFrOGogSug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxOTozNTo1MFrOGogSug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEyNTMwNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                } else {\n          \n          \n            \n                                    queryDequeued();\n          \n          \n            \n                                } \n          \n          \n            \n                                else {\n          \n          \n            \n                                    queryDequeued();", "url": "https://github.com/prestodb/presto/pull/14716#discussion_r445125306", "createdAt": "2020-06-24T19:35:50Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryManagerStats.java", "diffHunk": "@@ -169,6 +173,8 @@ public void stateChanged(QueryState newValue)\n                     stopped = true;\n                     if (started) {\n                         queryStopped();\n+                    } else {\n+                        queryDequeued();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e6c5a243c645e27a59ffd87bcd5b1ca93fcbbe5"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzQ5OTcyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryManagerStats.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxOTozNjoxNVrOGogTlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxOTozNjoxNVrOGogTlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEyNTUyNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private void queryDequeued()\n          \n          \n            \n            \n          \n          \n            \n                private void queryDequeued()", "url": "https://github.com/prestodb/presto/pull/14716#discussion_r445125527", "createdAt": "2020-06-24T19:36:15Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryManagerStats.java", "diffHunk": "@@ -76,13 +76,17 @@ private void queryStarted()\n     {\n         startedQueries.update(1);\n         runningQueries.incrementAndGet();\n-        queuedQueries.decrementAndGet();\n+        queryDequeued();\n     }\n \n     private void queryStopped()\n     {\n         runningQueries.decrementAndGet();\n     }\n+    private void queryDequeued()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e6c5a243c645e27a59ffd87bcd5b1ca93fcbbe5"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2525, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}