{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0NTY4NTg4", "number": 14783, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMzozMzo0NVrOENFy4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMToyNjowOFrOETbvAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMTYxODg5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/com/facebook/presto/operator/scalar/TestMathFunctions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMzozMzo0NVrOGvlKag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxODozMjozMFrOGwOeWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0NTEzMA==", "bodyText": "I would put this into a new test case, let's call it testTruncateWithPrecision", "url": "https://github.com/prestodb/presto/pull/14783#discussion_r452545130", "createdAt": "2020-07-09T23:33:45Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/test/java/com/facebook/presto/operator/scalar/TestMathFunctions.java", "diffHunk": "@@ -268,6 +268,27 @@ public void testTruncate()\n         assertFunction(\"truncate(DECIMAL '1234567890123456789012.999')\", createDecimalType(22, 0), SqlDecimal.of(\"1234567890123456789012\"));\n         assertFunction(\"truncate(DECIMAL '-1234567890123456789012.999')\", createDecimalType(22, 0), SqlDecimal.of(\"-1234567890123456789012\"));\n \n+        // TRUNCATE DOUBLE -> DOUBLE", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea31d849cf1e9143ac21cbb108c357e98a07964"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIyMTk3Nw==", "bodyText": "sure will do, thanks", "url": "https://github.com/prestodb/presto/pull/14783#discussion_r453221977", "createdAt": "2020-07-11T18:32:30Z", "author": {"login": "fgwang7w"}, "path": "presto-main/src/test/java/com/facebook/presto/operator/scalar/TestMathFunctions.java", "diffHunk": "@@ -268,6 +268,27 @@ public void testTruncate()\n         assertFunction(\"truncate(DECIMAL '1234567890123456789012.999')\", createDecimalType(22, 0), SqlDecimal.of(\"1234567890123456789012\"));\n         assertFunction(\"truncate(DECIMAL '-1234567890123456789012.999')\", createDecimalType(22, 0), SqlDecimal.of(\"-1234567890123456789012\"));\n \n+        // TRUNCATE DOUBLE -> DOUBLE", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0NTEzMA=="}, "originalCommit": {"oid": "7ea31d849cf1e9143ac21cbb108c357e98a07964"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMTYyMTQ4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/MathFunctions.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMzozNDo1OFrOGvlL5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQyMDo0MTozOVrOGwPJNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0NTUwOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return floatToRawIntBits(new BigDecimal(Float.toString(numBitsToFloats)).setScale((int) decimals, BigDecimal.ROUND_DOWN).floatValue());\n          \n          \n            \n                    return floatToRawIntBits(new BigDecimal(numBitsToFloats).setScale((int) decimals, BigDecimal.ROUND_DOWN).floatValue());\n          \n      \n    \n    \n  \n\nAny reason why this had to be converted to a string?  The test cases pass with the above.", "url": "https://github.com/prestodb/presto/pull/14783#discussion_r452545509", "createdAt": "2020-07-09T23:34:58Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/MathFunctions.java", "diffHunk": "@@ -327,6 +331,69 @@ public static long truncate(@SqlType(StandardTypes.REAL) long num)\n         return floatToRawIntBits((float) (Math.signum(numInFloat) * Math.floor(Math.abs(numInFloat))));\n     }\n \n+    @Description(\"truncate to double by dropping digits after decimal point\")\n+    @ScalarFunction\n+    @SqlType(StandardTypes.DOUBLE)\n+    public static double truncate(@SqlType(StandardTypes.DOUBLE) double num, @SqlType(StandardTypes.BIGINT) long decimals)\n+    {\n+        if (Double.isNaN(num) || Double.isInfinite(num)) {\n+            // compatible with truncate(DOUBLE)\n+            return num;\n+        }\n+        if (decimals == 0) {\n+            if (num >= 0) {\n+                return Math.floor(num);\n+            }\n+            else {\n+                return Math.ceil(num);\n+            }\n+        }\n+\n+        if (decimals < 0) {\n+            if (decimals < -NUMBER_LENGTH) {\n+                decimals = -NUMBER_LENGTH;\n+            }\n+        }\n+        else {\n+            if (decimals >= NUMBER_LENGTH) {\n+                decimals = NUMBER_LENGTH;\n+            }\n+        }\n+        return BigDecimal.valueOf(num).setScale((int) decimals, BigDecimal.ROUND_DOWN).doubleValue();\n+    }\n+\n+    @Description(\"truncate to float by dropping digits after decimal point\")\n+    @ScalarFunction\n+    @SqlType(StandardTypes.REAL)\n+    public static long truncate(@SqlType(StandardTypes.REAL) long num, @SqlType(StandardTypes.BIGINT) long decimals)\n+    {\n+        float numBitsToFloats = intBitsToFloat((int) num);\n+        if (Float.isNaN(numBitsToFloats) || Float.isInfinite(numBitsToFloats)) {\n+            // compatible with truncate(REAL)\n+            return num;\n+        }\n+        if (decimals == 0) {\n+            if (numBitsToFloats >= 0) {\n+                return floatToRawIntBits((float) Math.floor(numBitsToFloats));\n+            }\n+            else {\n+                return floatToRawIntBits((float) Math.ceil(numBitsToFloats));\n+            }\n+        }\n+\n+        if (decimals < 0) {\n+            if (decimals < -NUMBER_LENGTH) {\n+                decimals = -NUMBER_LENGTH;\n+            }\n+        }\n+        else {\n+            if (decimals >= NUMBER_LENGTH) {\n+                decimals = NUMBER_LENGTH;\n+            }\n+        }\n+        return floatToRawIntBits(new BigDecimal(Float.toString(numBitsToFloats)).setScale((int) decimals, BigDecimal.ROUND_DOWN).floatValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea31d849cf1e9143ac21cbb108c357e98a07964"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIzMjk0OA==", "bodyText": "BigDecimal takes type of DOUBLE not FLOAT so use String as a safe cast value to return.", "url": "https://github.com/prestodb/presto/pull/14783#discussion_r453232948", "createdAt": "2020-07-11T20:41:39Z", "author": {"login": "fgwang7w"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/MathFunctions.java", "diffHunk": "@@ -327,6 +331,69 @@ public static long truncate(@SqlType(StandardTypes.REAL) long num)\n         return floatToRawIntBits((float) (Math.signum(numInFloat) * Math.floor(Math.abs(numInFloat))));\n     }\n \n+    @Description(\"truncate to double by dropping digits after decimal point\")\n+    @ScalarFunction\n+    @SqlType(StandardTypes.DOUBLE)\n+    public static double truncate(@SqlType(StandardTypes.DOUBLE) double num, @SqlType(StandardTypes.BIGINT) long decimals)\n+    {\n+        if (Double.isNaN(num) || Double.isInfinite(num)) {\n+            // compatible with truncate(DOUBLE)\n+            return num;\n+        }\n+        if (decimals == 0) {\n+            if (num >= 0) {\n+                return Math.floor(num);\n+            }\n+            else {\n+                return Math.ceil(num);\n+            }\n+        }\n+\n+        if (decimals < 0) {\n+            if (decimals < -NUMBER_LENGTH) {\n+                decimals = -NUMBER_LENGTH;\n+            }\n+        }\n+        else {\n+            if (decimals >= NUMBER_LENGTH) {\n+                decimals = NUMBER_LENGTH;\n+            }\n+        }\n+        return BigDecimal.valueOf(num).setScale((int) decimals, BigDecimal.ROUND_DOWN).doubleValue();\n+    }\n+\n+    @Description(\"truncate to float by dropping digits after decimal point\")\n+    @ScalarFunction\n+    @SqlType(StandardTypes.REAL)\n+    public static long truncate(@SqlType(StandardTypes.REAL) long num, @SqlType(StandardTypes.BIGINT) long decimals)\n+    {\n+        float numBitsToFloats = intBitsToFloat((int) num);\n+        if (Float.isNaN(numBitsToFloats) || Float.isInfinite(numBitsToFloats)) {\n+            // compatible with truncate(REAL)\n+            return num;\n+        }\n+        if (decimals == 0) {\n+            if (numBitsToFloats >= 0) {\n+                return floatToRawIntBits((float) Math.floor(numBitsToFloats));\n+            }\n+            else {\n+                return floatToRawIntBits((float) Math.ceil(numBitsToFloats));\n+            }\n+        }\n+\n+        if (decimals < 0) {\n+            if (decimals < -NUMBER_LENGTH) {\n+                decimals = -NUMBER_LENGTH;\n+            }\n+        }\n+        else {\n+            if (decimals >= NUMBER_LENGTH) {\n+                decimals = NUMBER_LENGTH;\n+            }\n+        }\n+        return floatToRawIntBits(new BigDecimal(Float.toString(numBitsToFloats)).setScale((int) decimals, BigDecimal.ROUND_DOWN).floatValue());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0NTUwOQ=="}, "originalCommit": {"oid": "7ea31d849cf1e9143ac21cbb108c357e98a07964"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMTYyOTI3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/MathFunctions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMzozODoyNVrOGvlQZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQyMDo0MjoxOFrOGwPJYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0NjY2MQ==", "bodyText": "How about MAX_DECIMAL_PLACES?", "url": "https://github.com/prestodb/presto/pull/14783#discussion_r452546661", "createdAt": "2020-07-09T23:38:25Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/MathFunctions.java", "diffHunk": "@@ -66,6 +67,9 @@\n {\n     public static final SqlScalarFunction DECIMAL_MOD_FUNCTION = decimalModFunction();\n \n+    // double's precision not exceed this limit\n+    private static final int NUMBER_LENGTH = 400;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea31d849cf1e9143ac21cbb108c357e98a07964"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIzMjk5Mw==", "bodyText": "sure, fixed", "url": "https://github.com/prestodb/presto/pull/14783#discussion_r453232993", "createdAt": "2020-07-11T20:42:18Z", "author": {"login": "fgwang7w"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/MathFunctions.java", "diffHunk": "@@ -66,6 +67,9 @@\n {\n     public static final SqlScalarFunction DECIMAL_MOD_FUNCTION = decimalModFunction();\n \n+    // double's precision not exceed this limit\n+    private static final int NUMBER_LENGTH = 400;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0NjY2MQ=="}, "originalCommit": {"oid": "7ea31d849cf1e9143ac21cbb108c357e98a07964"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMTY0NzA1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/MathFunctions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMzo0NzoyNVrOGvlayg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQyMDo0MzozMFrOGwPJxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0OTMyMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (decimals < 0) {\n          \n          \n            \n                        if (decimals < -NUMBER_LENGTH) {\n          \n          \n            \n                            decimals = -NUMBER_LENGTH;\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                    else {\n          \n          \n            \n                        if (decimals >= NUMBER_LENGTH) {\n          \n          \n            \n                            decimals = NUMBER_LENGTH;\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                    decimals = Math.max(Math.min(decimals, NUMBER_LENGTH), -NUMBER_LENGTH);", "url": "https://github.com/prestodb/presto/pull/14783#discussion_r452549322", "createdAt": "2020-07-09T23:47:25Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/MathFunctions.java", "diffHunk": "@@ -327,6 +331,69 @@ public static long truncate(@SqlType(StandardTypes.REAL) long num)\n         return floatToRawIntBits((float) (Math.signum(numInFloat) * Math.floor(Math.abs(numInFloat))));\n     }\n \n+    @Description(\"truncate to double by dropping digits after decimal point\")\n+    @ScalarFunction\n+    @SqlType(StandardTypes.DOUBLE)\n+    public static double truncate(@SqlType(StandardTypes.DOUBLE) double num, @SqlType(StandardTypes.BIGINT) long decimals)\n+    {\n+        if (Double.isNaN(num) || Double.isInfinite(num)) {\n+            // compatible with truncate(DOUBLE)\n+            return num;\n+        }\n+        if (decimals == 0) {\n+            if (num >= 0) {\n+                return Math.floor(num);\n+            }\n+            else {\n+                return Math.ceil(num);\n+            }\n+        }\n+\n+        if (decimals < 0) {\n+            if (decimals < -NUMBER_LENGTH) {\n+                decimals = -NUMBER_LENGTH;\n+            }\n+        }\n+        else {\n+            if (decimals >= NUMBER_LENGTH) {\n+                decimals = NUMBER_LENGTH;\n+            }\n+        }\n+        return BigDecimal.valueOf(num).setScale((int) decimals, BigDecimal.ROUND_DOWN).doubleValue();\n+    }\n+\n+    @Description(\"truncate to float by dropping digits after decimal point\")\n+    @ScalarFunction\n+    @SqlType(StandardTypes.REAL)\n+    public static long truncate(@SqlType(StandardTypes.REAL) long num, @SqlType(StandardTypes.BIGINT) long decimals)\n+    {\n+        float numBitsToFloats = intBitsToFloat((int) num);\n+        if (Float.isNaN(numBitsToFloats) || Float.isInfinite(numBitsToFloats)) {\n+            // compatible with truncate(REAL)\n+            return num;\n+        }\n+        if (decimals == 0) {\n+            if (numBitsToFloats >= 0) {\n+                return floatToRawIntBits((float) Math.floor(numBitsToFloats));\n+            }\n+            else {\n+                return floatToRawIntBits((float) Math.ceil(numBitsToFloats));\n+            }\n+        }\n+\n+        if (decimals < 0) {\n+            if (decimals < -NUMBER_LENGTH) {\n+                decimals = -NUMBER_LENGTH;\n+            }\n+        }\n+        else {\n+            if (decimals >= NUMBER_LENGTH) {\n+                decimals = NUMBER_LENGTH;\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea31d849cf1e9143ac21cbb108c357e98a07964"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIzMzA5Mg==", "bodyText": "sounds good, thanks", "url": "https://github.com/prestodb/presto/pull/14783#discussion_r453233092", "createdAt": "2020-07-11T20:43:30Z", "author": {"login": "fgwang7w"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/MathFunctions.java", "diffHunk": "@@ -327,6 +331,69 @@ public static long truncate(@SqlType(StandardTypes.REAL) long num)\n         return floatToRawIntBits((float) (Math.signum(numInFloat) * Math.floor(Math.abs(numInFloat))));\n     }\n \n+    @Description(\"truncate to double by dropping digits after decimal point\")\n+    @ScalarFunction\n+    @SqlType(StandardTypes.DOUBLE)\n+    public static double truncate(@SqlType(StandardTypes.DOUBLE) double num, @SqlType(StandardTypes.BIGINT) long decimals)\n+    {\n+        if (Double.isNaN(num) || Double.isInfinite(num)) {\n+            // compatible with truncate(DOUBLE)\n+            return num;\n+        }\n+        if (decimals == 0) {\n+            if (num >= 0) {\n+                return Math.floor(num);\n+            }\n+            else {\n+                return Math.ceil(num);\n+            }\n+        }\n+\n+        if (decimals < 0) {\n+            if (decimals < -NUMBER_LENGTH) {\n+                decimals = -NUMBER_LENGTH;\n+            }\n+        }\n+        else {\n+            if (decimals >= NUMBER_LENGTH) {\n+                decimals = NUMBER_LENGTH;\n+            }\n+        }\n+        return BigDecimal.valueOf(num).setScale((int) decimals, BigDecimal.ROUND_DOWN).doubleValue();\n+    }\n+\n+    @Description(\"truncate to float by dropping digits after decimal point\")\n+    @ScalarFunction\n+    @SqlType(StandardTypes.REAL)\n+    public static long truncate(@SqlType(StandardTypes.REAL) long num, @SqlType(StandardTypes.BIGINT) long decimals)\n+    {\n+        float numBitsToFloats = intBitsToFloat((int) num);\n+        if (Float.isNaN(numBitsToFloats) || Float.isInfinite(numBitsToFloats)) {\n+            // compatible with truncate(REAL)\n+            return num;\n+        }\n+        if (decimals == 0) {\n+            if (numBitsToFloats >= 0) {\n+                return floatToRawIntBits((float) Math.floor(numBitsToFloats));\n+            }\n+            else {\n+                return floatToRawIntBits((float) Math.ceil(numBitsToFloats));\n+            }\n+        }\n+\n+        if (decimals < 0) {\n+            if (decimals < -NUMBER_LENGTH) {\n+                decimals = -NUMBER_LENGTH;\n+            }\n+        }\n+        else {\n+            if (decimals >= NUMBER_LENGTH) {\n+                decimals = NUMBER_LENGTH;\n+            }\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0OTMyMg=="}, "originalCommit": {"oid": "7ea31d849cf1e9143ac21cbb108c357e98a07964"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMTY0NzgzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/MathFunctions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMzo0Nzo0OVrOGvlbQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMzo0Nzo0OVrOGvlbQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0OTQ0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (decimals < 0) {\n          \n          \n            \n                        if (decimals < -NUMBER_LENGTH) {\n          \n          \n            \n                            decimals = -NUMBER_LENGTH;\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                    else {\n          \n          \n            \n                        if (decimals >= NUMBER_LENGTH) {\n          \n          \n            \n                            decimals = NUMBER_LENGTH;\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                    decimals = Math.max(Math.min(decimals, NUMBER_LENGTH), -NUMBER_LENGTH);", "url": "https://github.com/prestodb/presto/pull/14783#discussion_r452549443", "createdAt": "2020-07-09T23:47:49Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/MathFunctions.java", "diffHunk": "@@ -327,6 +331,69 @@ public static long truncate(@SqlType(StandardTypes.REAL) long num)\n         return floatToRawIntBits((float) (Math.signum(numInFloat) * Math.floor(Math.abs(numInFloat))));\n     }\n \n+    @Description(\"truncate to double by dropping digits after decimal point\")\n+    @ScalarFunction\n+    @SqlType(StandardTypes.DOUBLE)\n+    public static double truncate(@SqlType(StandardTypes.DOUBLE) double num, @SqlType(StandardTypes.BIGINT) long decimals)\n+    {\n+        if (Double.isNaN(num) || Double.isInfinite(num)) {\n+            // compatible with truncate(DOUBLE)\n+            return num;\n+        }\n+        if (decimals == 0) {\n+            if (num >= 0) {\n+                return Math.floor(num);\n+            }\n+            else {\n+                return Math.ceil(num);\n+            }\n+        }\n+\n+        if (decimals < 0) {\n+            if (decimals < -NUMBER_LENGTH) {\n+                decimals = -NUMBER_LENGTH;\n+            }\n+        }\n+        else {\n+            if (decimals >= NUMBER_LENGTH) {\n+                decimals = NUMBER_LENGTH;\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea31d849cf1e9143ac21cbb108c357e98a07964"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMTY0OTM3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/com/facebook/presto/operator/scalar/TestMathFunctions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMzo0ODo0M1rOGvlcNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQyMDo1MjoxOFrOGwPMqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0OTY4Ng==", "bodyText": "Let's add some test cases for infinity and NaN.", "url": "https://github.com/prestodb/presto/pull/14783#discussion_r452549686", "createdAt": "2020-07-09T23:48:43Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/test/java/com/facebook/presto/operator/scalar/TestMathFunctions.java", "diffHunk": "@@ -268,6 +268,27 @@ public void testTruncate()\n         assertFunction(\"truncate(DECIMAL '1234567890123456789012.999')\", createDecimalType(22, 0), SqlDecimal.of(\"1234567890123456789012\"));\n         assertFunction(\"truncate(DECIMAL '-1234567890123456789012.999')\", createDecimalType(22, 0), SqlDecimal.of(\"-1234567890123456789012\"));\n \n+        // TRUNCATE DOUBLE -> DOUBLE\n+        assertFunction(\"truncate(nan(),-1)\", DOUBLE, Double.NaN);\n+        assertFunction(\"truncate(DOUBLE '17.1', -1)\", DOUBLE, 10.0);\n+        assertFunction(\"truncate(DOUBLE '1234.56', 1)\", DOUBLE, 1234.5);\n+        assertFunction(\"truncate(DOUBLE '1234.56', 0)\", DOUBLE, 1234.0);\n+        assertFunction(\"truncate(DOUBLE '-1234.56', 0)\", DOUBLE, -1234.0);\n+        assertFunction(\"truncate(DOUBLE '-1234.56', -500)\", DOUBLE, 0.0);\n+        assertFunction(\"truncate(DOUBLE '1234.567', 2)\", DOUBLE, 1234.56);\n+        assertFunction(\"truncate(DOUBLE '1234.567', 2)\", DOUBLE, 1234.56);\n+        assertFunction(\"truncate(DOUBLE '\" + Double.MAX_VALUE + \"', -408)\", DOUBLE, 0.0);\n+        assertFunction(\"truncate(DOUBLE '\" + -Double.MAX_VALUE / 10 + \"', 408)\", DOUBLE, -Double.MAX_VALUE / 10);\n+        assertFunction(\"truncate(DOUBLE '\" + (double) Long.MAX_VALUE + \"', -15)\", DOUBLE, 9.223E18);\n+\n+        // TRUNCATE REAL -> REAL\n+        assertFunction(\"truncate(REAL '12.333', 0)\", REAL, 12.0f);\n+        assertFunction(\"truncate(REAL '-12.333', 0)\", REAL, -12.0f);\n+        assertFunction(\"truncate(REAL '12.333', -500)\", REAL, 0.0f);\n+        assertFunction(\"truncate(REAL '3.40287e37', -35)\", REAL, 3.4E37f);\n+        assertFunction(\"truncate(REAL '3.40287e37', -488)\", REAL, 0.0f);\n+        assertFunction(\"truncate(REAL '\" + (float) Long.MAX_VALUE + \"', -15)\", REAL, 9.223E18f);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea31d849cf1e9143ac21cbb108c357e98a07964"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIzMzgzNQ==", "bodyText": "infinity and NaN cases may land up in DOUBLE case, testcases added", "url": "https://github.com/prestodb/presto/pull/14783#discussion_r453233835", "createdAt": "2020-07-11T20:52:18Z", "author": {"login": "fgwang7w"}, "path": "presto-main/src/test/java/com/facebook/presto/operator/scalar/TestMathFunctions.java", "diffHunk": "@@ -268,6 +268,27 @@ public void testTruncate()\n         assertFunction(\"truncate(DECIMAL '1234567890123456789012.999')\", createDecimalType(22, 0), SqlDecimal.of(\"1234567890123456789012\"));\n         assertFunction(\"truncate(DECIMAL '-1234567890123456789012.999')\", createDecimalType(22, 0), SqlDecimal.of(\"-1234567890123456789012\"));\n \n+        // TRUNCATE DOUBLE -> DOUBLE\n+        assertFunction(\"truncate(nan(),-1)\", DOUBLE, Double.NaN);\n+        assertFunction(\"truncate(DOUBLE '17.1', -1)\", DOUBLE, 10.0);\n+        assertFunction(\"truncate(DOUBLE '1234.56', 1)\", DOUBLE, 1234.5);\n+        assertFunction(\"truncate(DOUBLE '1234.56', 0)\", DOUBLE, 1234.0);\n+        assertFunction(\"truncate(DOUBLE '-1234.56', 0)\", DOUBLE, -1234.0);\n+        assertFunction(\"truncate(DOUBLE '-1234.56', -500)\", DOUBLE, 0.0);\n+        assertFunction(\"truncate(DOUBLE '1234.567', 2)\", DOUBLE, 1234.56);\n+        assertFunction(\"truncate(DOUBLE '1234.567', 2)\", DOUBLE, 1234.56);\n+        assertFunction(\"truncate(DOUBLE '\" + Double.MAX_VALUE + \"', -408)\", DOUBLE, 0.0);\n+        assertFunction(\"truncate(DOUBLE '\" + -Double.MAX_VALUE / 10 + \"', 408)\", DOUBLE, -Double.MAX_VALUE / 10);\n+        assertFunction(\"truncate(DOUBLE '\" + (double) Long.MAX_VALUE + \"', -15)\", DOUBLE, 9.223E18);\n+\n+        // TRUNCATE REAL -> REAL\n+        assertFunction(\"truncate(REAL '12.333', 0)\", REAL, 12.0f);\n+        assertFunction(\"truncate(REAL '-12.333', 0)\", REAL, -12.0f);\n+        assertFunction(\"truncate(REAL '12.333', -500)\", REAL, 0.0f);\n+        assertFunction(\"truncate(REAL '3.40287e37', -35)\", REAL, 3.4E37f);\n+        assertFunction(\"truncate(REAL '3.40287e37', -488)\", REAL, 0.0f);\n+        assertFunction(\"truncate(REAL '\" + (float) Long.MAX_VALUE + \"', -15)\", REAL, 9.223E18f);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0OTY4Ng=="}, "originalCommit": {"oid": "7ea31d849cf1e9143ac21cbb108c357e98a07964"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMTY1Mzk0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/MathFunctions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMzo1MDo0OVrOGvlexg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQyMToyMzozN1rOGwPXCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU1MDM0Mg==", "bodyText": "We should probably change the type to be INTEGER since we're downcasting to int below.  Actually, why not make this TINYINT (max range is [-127, 128])?  If that's not sufficient precision, we could make it SMALLINT (range > 400) and safely downcast.", "url": "https://github.com/prestodb/presto/pull/14783#discussion_r452550342", "createdAt": "2020-07-09T23:50:49Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/MathFunctions.java", "diffHunk": "@@ -327,6 +331,69 @@ public static long truncate(@SqlType(StandardTypes.REAL) long num)\n         return floatToRawIntBits((float) (Math.signum(numInFloat) * Math.floor(Math.abs(numInFloat))));\n     }\n \n+    @Description(\"truncate to double by dropping digits after decimal point\")\n+    @ScalarFunction\n+    @SqlType(StandardTypes.DOUBLE)\n+    public static double truncate(@SqlType(StandardTypes.DOUBLE) double num, @SqlType(StandardTypes.BIGINT) long decimals)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea31d849cf1e9143ac21cbb108c357e98a07964"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIzNjQ5MQ==", "bodyText": "are you referring to the type for decimals?it may not be sufficient to use TINYINT because truncate precision could have a long decimal precision. I  switch toINTEGER for now", "url": "https://github.com/prestodb/presto/pull/14783#discussion_r453236491", "createdAt": "2020-07-11T21:23:37Z", "author": {"login": "fgwang7w"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/MathFunctions.java", "diffHunk": "@@ -327,6 +331,69 @@ public static long truncate(@SqlType(StandardTypes.REAL) long num)\n         return floatToRawIntBits((float) (Math.signum(numInFloat) * Math.floor(Math.abs(numInFloat))));\n     }\n \n+    @Description(\"truncate to double by dropping digits after decimal point\")\n+    @ScalarFunction\n+    @SqlType(StandardTypes.DOUBLE)\n+    public static double truncate(@SqlType(StandardTypes.DOUBLE) double num, @SqlType(StandardTypes.BIGINT) long decimals)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU1MDM0Mg=="}, "originalCommit": {"oid": "7ea31d849cf1e9143ac21cbb108c357e98a07964"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODEyODAwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/MathFunctions.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMToyNjowOFrOG5KzYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMjoxOToxOFrOHDmyUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU5OTAxMA==", "bodyText": "If there's a limit for decimal point, I think we should be explicit about it and mention in description and in documentation. We should probably also fail the query if an out-of-range number is given, rather than silently changing the behavior.", "url": "https://github.com/prestodb/presto/pull/14783#discussion_r462599010", "createdAt": "2020-07-29T21:26:08Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/MathFunctions.java", "diffHunk": "@@ -327,6 +331,51 @@ public static long truncate(@SqlType(StandardTypes.REAL) long num)\n         return floatToRawIntBits((float) (Math.signum(numInFloat) * Math.floor(Math.abs(numInFloat))));\n     }\n \n+    @Description(\"truncate to double by dropping digits after decimal point\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9d578c198d6b5cdefbd7a64661924e8b5ba031f"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYxMDczNQ==", "bodyText": "Though if the limit is actually limitation of double then this behavior is fine. But in that case I think we also don't have to special handle the max?", "url": "https://github.com/prestodb/presto/pull/14783#discussion_r462610735", "createdAt": "2020-07-29T21:51:04Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/MathFunctions.java", "diffHunk": "@@ -327,6 +331,51 @@ public static long truncate(@SqlType(StandardTypes.REAL) long num)\n         return floatToRawIntBits((float) (Math.signum(numInFloat) * Math.floor(Math.abs(numInFloat))));\n     }\n \n+    @Description(\"truncate to double by dropping digits after decimal point\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU5OTAxMA=="}, "originalCommit": {"oid": "d9d578c198d6b5cdefbd7a64661924e8b5ba031f"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIyNTQ0NA==", "bodyText": "Thanks for the review. Are you suggesting to document the max number of precision for double type in alignment with MAX_DECIMAL_PLACES value? Yes the limit only handles the double/real type behavior. If the max limit reaches/exceeded, the outcome should be either 0.0 or negative value. I have 2 tests covered that:\nassertFunction(\"truncate(DOUBLE '\" + Double.MAX_VALUE + \"', -408)\", DOUBLE, 0.0); assertFunction(\"truncate(DOUBLE '\" + -Double.MAX_VALUE / 10 + \"', 408)\", DOUBLE, -Double.MAX_VALUE / 10); \nIs this what you were thinking to cover? @rongrong", "url": "https://github.com/prestodb/presto/pull/14783#discussion_r463225444", "createdAt": "2020-07-30T19:35:38Z", "author": {"login": "fgwang7w"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/MathFunctions.java", "diffHunk": "@@ -327,6 +331,51 @@ public static long truncate(@SqlType(StandardTypes.REAL) long num)\n         return floatToRawIntBits((float) (Math.signum(numInFloat) * Math.floor(Math.abs(numInFloat))));\n     }\n \n+    @Description(\"truncate to double by dropping digits after decimal point\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU5OTAxMA=="}, "originalCommit": {"oid": "d9d578c198d6b5cdefbd7a64661924e8b5ba031f"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzMwNzgwMw==", "bodyText": "I mean add this to the rst file. Maybe also add it to the function description. So people know the maximum value for decimals should be within 400. Also document the behavior if the provided decimal is larger than 400. Why do we choose 400 as the max digit though? What's the logic behind this?", "url": "https://github.com/prestodb/presto/pull/14783#discussion_r473307803", "createdAt": "2020-08-19T20:45:11Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/MathFunctions.java", "diffHunk": "@@ -327,6 +331,51 @@ public static long truncate(@SqlType(StandardTypes.REAL) long num)\n         return floatToRawIntBits((float) (Math.signum(numInFloat) * Math.floor(Math.abs(numInFloat))));\n     }\n \n+    @Description(\"truncate to double by dropping digits after decimal point\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU5OTAxMA=="}, "originalCommit": {"oid": "d9d578c198d6b5cdefbd7a64661924e8b5ba031f"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU0MzI1MQ==", "bodyText": "Actually I double-checked the oracle doc which indicates that the scale of the decimal points ranges from -84 to 127. I will change 400 to 127 to align with oracle's behavior and document it in rst file.", "url": "https://github.com/prestodb/presto/pull/14783#discussion_r473543251", "createdAt": "2020-08-20T02:19:18Z", "author": {"login": "fgwang7w"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/MathFunctions.java", "diffHunk": "@@ -327,6 +331,51 @@ public static long truncate(@SqlType(StandardTypes.REAL) long num)\n         return floatToRawIntBits((float) (Math.signum(numInFloat) * Math.floor(Math.abs(numInFloat))));\n     }\n \n+    @Description(\"truncate to double by dropping digits after decimal point\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU5OTAxMA=="}, "originalCommit": {"oid": "d9d578c198d6b5cdefbd7a64661924e8b5ba031f"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2313, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}