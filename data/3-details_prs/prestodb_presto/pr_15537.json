{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxNTA3ODU5", "number": 15537, "title": "Deprecate Joda library for Presto Teradata functions", "bodyText": "Test plan - (Please fill in how you tested your changes)\n# make sure all test scenarios are covered\nmvn clean test\n\nPlease make sure your submission complies with our Development, Formatting, and Commit Message guidelines. Don't forget to follow our attribution guidelines for any code copied from other projects.\nFill in the release notes towards the bottom of the PR description.\nSee Release Notes Guidelines for details.\n== NO RELEASE NOTE ==", "createdAt": "2020-12-16T23:51:09Z", "url": "https://github.com/prestodb/presto/pull/15537", "merged": true, "mergeCommit": {"oid": "87e84b2040554cc8981b85b43c9cd941bf2215da"}, "closed": true, "closedAt": "2021-03-08T21:13:23Z", "author": {"login": "rk13"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdnGQlzABqjQxMjYwMDczMjQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABeBOuasgFqTYwNjcxMTY4OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6c8ad4398f63ddf50dcbfd84b03cb5043cdd75a3", "author": {"user": {"login": "rk13", "name": "Vladimirs Kotovs"}}, "url": "https://github.com/prestodb/presto/commit/6c8ad4398f63ddf50dcbfd84b03cb5043cdd75a3", "committedDate": "2020-12-14T10:42:13Z", "message": "Deprecate Joda library for Presto Teradata functions"}, "afterCommit": {"oid": "025073af7012a3f4d134458b9ebfd7ff445b5547", "author": {"user": {"login": "rk13", "name": "Vladimirs Kotovs"}}, "url": "https://github.com/prestodb/presto/commit/025073af7012a3f4d134458b9ebfd7ff445b5547", "committedDate": "2020-12-17T16:31:43Z", "message": "Deprecate Joda library for Presto Teradata functions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2ODQ2NjU1", "url": "https://github.com/prestodb/presto/pull/15537#pullrequestreview-556846655", "createdAt": "2020-12-22T06:27:25Z", "commit": {"oid": "025073af7012a3f4d134458b9ebfd7ff445b5547"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNjoyNzoyNVrOIJv4RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNjoyNzoyNVrOIJv4RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA5MjU0OQ==", "bodyText": "lets add a comment telling why we need a different parser and formatter", "url": "https://github.com/prestodb/presto/pull/15537#discussion_r547092549", "createdAt": "2020-12-22T06:27:25Z", "author": {"login": "ajaygeorge"}, "path": "presto-teradata-functions/src/main/java/com/facebook/presto/teradata/functions/TeradataDateFunctions.java", "diffHunk": "@@ -35,23 +39,30 @@\n import static com.facebook.presto.common.type.TimeZoneKey.getTimeZoneKeys;\n import static com.facebook.presto.spi.StandardErrorCode.GENERIC_INTERNAL_ERROR;\n import static com.facebook.presto.spi.StandardErrorCode.INVALID_FUNCTION_ARGUMENT;\n-import static com.facebook.presto.teradata.functions.dateformat.DateFormatParser.createDateTimeFormatter;\n import static com.google.common.base.Throwables.throwIfInstanceOf;\n import static io.airlift.slice.Slices.utf8Slice;\n import static java.nio.charset.StandardCharsets.UTF_8;\n import static java.util.concurrent.TimeUnit.MILLISECONDS;\n \n public final class TeradataDateFunctions\n {\n+    private static final ThreadLocalCache<Slice, DateTimeFormatter> DATETIME_PARSER_CACHE =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "025073af7012a3f4d134458b9ebfd7ff445b5547"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2ODQ2ODMy", "url": "https://github.com/prestodb/presto/pull/15537#pullrequestreview-556846832", "createdAt": "2020-12-22T06:27:59Z", "commit": {"oid": "025073af7012a3f4d134458b9ebfd7ff445b5547"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNjoyODowMFrOIJv44Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNjoyODowMFrOIJv44Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA5MjcwNQ==", "bodyText": "Is this comment still valid ?", "url": "https://github.com/prestodb/presto/pull/15537#discussion_r547092705", "createdAt": "2020-12-22T06:28:00Z", "author": {"login": "ajaygeorge"}, "path": "presto-teradata-functions/src/main/java/com/facebook/presto/teradata/functions/dateformat/DateFormatParser.java", "diffHunk": "@@ -40,28 +70,29 @@ public static DateTimeFormatter createDateTimeFormatter(String format)\n                     builder.appendLiteral(token.getText());\n                     break;\n                 case DateFormat.DD:\n-                    builder.appendDayOfMonth(2);\n+                    builder.appendValue(ChronoField.DAY_OF_MONTH, mode.minTwoPositionFieldWidth, 2, SignStyle.NOT_NEGATIVE);\n                     break;\n                 case DateFormat.HH24:\n-                    builder.appendHourOfDay(2);\n+                    builder.appendValue(ChronoField.HOUR_OF_DAY, mode.minTwoPositionFieldWidth, 2, SignStyle.NOT_NEGATIVE);\n                     break;\n                 case DateFormat.HH:\n-                    builder.appendHourOfHalfday(2);\n+                    // ChronoField.HOUR_OF_AMPM should be used for HH after format extended to include AM/PM token", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "025073af7012a3f4d134458b9ebfd7ff445b5547"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2ODQ3NjA3", "url": "https://github.com/prestodb/presto/pull/15537#pullrequestreview-556847607", "createdAt": "2020-12-22T06:30:18Z", "commit": {"oid": "025073af7012a3f4d134458b9ebfd7ff445b5547"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNjozMDoxOFrOIJv7vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNjozMDoxOFrOIJv7vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA5MzQzNw==", "bodyText": "aren't these all testing the same thing?", "url": "https://github.com/prestodb/presto/pull/15537#discussion_r547093437", "createdAt": "2020-12-22T06:30:18Z", "author": {"login": "ajaygeorge"}, "path": "presto-teradata-functions/src/test/java/com/facebook/presto/teradata/functions/TestTeradataDateFunctions.java", "diffHunk": "@@ -93,16 +93,23 @@ public void testYY()\n         assertVarchar(\"to_char(TIMESTAMP '1988-04-08','yy')\", \"88\");\n         assertTimestamp(\"to_timestamp('88/04/08','yy/mm/dd')\", 2088, 4, 8, 0, 0, 0);\n         assertDate(\"to_date('88/04/08','yy/mm/dd')\", 2088, 4, 8);\n+\n+        assertTimestamp(\"to_timestamp('00/04/08','yy/mm/dd')\", 2000, 4, 8, 0, 0, 0);\n+        assertTimestamp(\"to_timestamp('20/04/08','yy/mm/dd')\", 2020, 4, 8, 0, 0, 0);\n+        assertTimestamp(\"to_timestamp('40/04/08','yy/mm/dd')\", 2040, 4, 8, 0, 0, 0);\n+        assertTimestamp(\"to_timestamp('60/04/08','yy/mm/dd')\", 2060, 4, 8, 0, 0, 0);\n+        assertTimestamp(\"to_timestamp('80/04/08','yy/mm/dd')\", 2080, 4, 8, 0, 0, 0);\n+        assertTimestamp(\"to_timestamp('99/04/08','yy/mm/dd')\", 2099, 4, 8, 0, 0, 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "025073af7012a3f4d134458b9ebfd7ff445b5547"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2ODQ4MTE1", "url": "https://github.com/prestodb/presto/pull/15537#pullrequestreview-556848115", "createdAt": "2020-12-22T06:31:52Z", "commit": {"oid": "025073af7012a3f4d134458b9ebfd7ff445b5547"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNjozMTo1MlrOIJv9gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNjozMTo1MlrOIJv9gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA5Mzg5MQ==", "bodyText": "ZoneRulesException is a runtime exception.\nIf we are catching it let us log the error so that we are not silently moving on.", "url": "https://github.com/prestodb/presto/pull/15537#discussion_r547093891", "createdAt": "2020-12-22T06:31:52Z", "author": {"login": "ajaygeorge"}, "path": "presto-teradata-functions/src/main/java/com/facebook/presto/teradata/functions/TeradataDateFunctions.java", "diffHunk": "@@ -35,23 +39,30 @@\n import static com.facebook.presto.common.type.TimeZoneKey.getTimeZoneKeys;\n import static com.facebook.presto.spi.StandardErrorCode.GENERIC_INTERNAL_ERROR;\n import static com.facebook.presto.spi.StandardErrorCode.INVALID_FUNCTION_ARGUMENT;\n-import static com.facebook.presto.teradata.functions.dateformat.DateFormatParser.createDateTimeFormatter;\n import static com.google.common.base.Throwables.throwIfInstanceOf;\n import static io.airlift.slice.Slices.utf8Slice;\n import static java.nio.charset.StandardCharsets.UTF_8;\n import static java.util.concurrent.TimeUnit.MILLISECONDS;\n \n public final class TeradataDateFunctions\n {\n+    private static final ThreadLocalCache<Slice, DateTimeFormatter> DATETIME_PARSER_CACHE =\n+            new ThreadLocalCache<>(100, format -> DateFormatParser.createDateTimeParser(format.toStringUtf8()));\n+\n     private static final ThreadLocalCache<Slice, DateTimeFormatter> DATETIME_FORMATTER_CACHE =\n-            new ThreadLocalCache<>(100, format -> createDateTimeFormatter(format.toStringUtf8()));\n+            new ThreadLocalCache<>(100, format -> DateFormatParser.createDateTimeFormatter(format.toStringUtf8()));\n \n-    private static final ISOChronology[] CHRONOLOGIES = new ISOChronology[MAX_TIME_ZONE_KEY + 1];\n+    private static final ZoneId[] ZONE_IDS = new ZoneId[MAX_TIME_ZONE_KEY + 1];\n \n     static {\n         for (TimeZoneKey timeZoneKey : getTimeZoneKeys()) {\n-            DateTimeZone dateTimeZone = DateTimeZone.forID(timeZoneKey.getId());\n-            CHRONOLOGIES[timeZoneKey.getKey()] = ISOChronology.getInstance(dateTimeZone);\n+            try {\n+                ZONE_IDS[timeZoneKey.getKey()] = ZoneId.of(timeZoneKey.getId());\n+            }\n+            catch (ZoneRulesException ignored) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "025073af7012a3f4d134458b9ebfd7ff445b5547"}, "originalPosition": 48}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "025073af7012a3f4d134458b9ebfd7ff445b5547", "author": {"user": {"login": "rk13", "name": "Vladimirs Kotovs"}}, "url": "https://github.com/prestodb/presto/commit/025073af7012a3f4d134458b9ebfd7ff445b5547", "committedDate": "2020-12-17T16:31:43Z", "message": "Deprecate Joda library for Presto Teradata functions"}, "afterCommit": {"oid": "2b89c16c48091e5d9b71b81270ae7ea21bfdd918", "author": {"user": {"login": "rk13", "name": "Vladimirs Kotovs"}}, "url": "https://github.com/prestodb/presto/commit/2b89c16c48091e5d9b71b81270ae7ea21bfdd918", "committedDate": "2020-12-22T13:37:58Z", "message": "Add additional improvements for deprecating Joda library in Presto Teradata functions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2b89c16c48091e5d9b71b81270ae7ea21bfdd918", "author": {"user": {"login": "rk13", "name": "Vladimirs Kotovs"}}, "url": "https://github.com/prestodb/presto/commit/2b89c16c48091e5d9b71b81270ae7ea21bfdd918", "committedDate": "2020-12-22T13:37:58Z", "message": "Add additional improvements for deprecating Joda library in Presto Teradata functions"}, "afterCommit": {"oid": "3e88847c691fcd6fd26f347d64f64eb6a840e08d", "author": {"user": {"login": "rk13", "name": "Vladimirs Kotovs"}}, "url": "https://github.com/prestodb/presto/commit/3e88847c691fcd6fd26f347d64f64eb6a840e08d", "committedDate": "2020-12-23T07:32:47Z", "message": "Add additional improvements for deprecating Joda-Time library in Presto Teradata functions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3e88847c691fcd6fd26f347d64f64eb6a840e08d", "author": {"user": {"login": "rk13", "name": "Vladimirs Kotovs"}}, "url": "https://github.com/prestodb/presto/commit/3e88847c691fcd6fd26f347d64f64eb6a840e08d", "committedDate": "2020-12-23T07:32:47Z", "message": "Add additional improvements for deprecating Joda-Time library in Presto Teradata functions"}, "afterCommit": {"oid": "db480f36b0f5b431c9e8c0c4d5dc022a8949f5c3", "author": {"user": {"login": "rk13", "name": "Vladimirs Kotovs"}}, "url": "https://github.com/prestodb/presto/commit/db480f36b0f5b431c9e8c0c4d5dc022a8949f5c3", "committedDate": "2020-12-23T15:38:32Z", "message": "Add additional improvements for deprecating Joda-Time library in Presto Teradata functions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "db480f36b0f5b431c9e8c0c4d5dc022a8949f5c3", "author": {"user": {"login": "rk13", "name": "Vladimirs Kotovs"}}, "url": "https://github.com/prestodb/presto/commit/db480f36b0f5b431c9e8c0c4d5dc022a8949f5c3", "committedDate": "2020-12-23T15:38:32Z", "message": "Add additional improvements for deprecating Joda-Time library in Presto Teradata functions"}, "afterCommit": {"oid": "b5aee06525dcf26c833371433f655eda9d135358", "author": {"user": {"login": "rk13", "name": "Vladimirs Kotovs"}}, "url": "https://github.com/prestodb/presto/commit/b5aee06525dcf26c833371433f655eda9d135358", "committedDate": "2020-12-24T00:13:17Z", "message": "Add additional improvements for deprecating Joda-Time library in Presto Teradata functions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYyMjAxMjcw", "url": "https://github.com/prestodb/presto/pull/15537#pullrequestreview-562201270", "createdAt": "2021-01-05T23:05:54Z", "commit": {"oid": "b5aee06525dcf26c833371433f655eda9d135358"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMzowNTo1NFrOIOqxFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMzoyMjoyMVrOIOrH4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI1MTY2OQ==", "bodyText": "static import DAY_OF_MONTH and all the various ChronoFields you use here.\nstatic import NOT_NEGATIVE", "url": "https://github.com/prestodb/presto/pull/15537#discussion_r552251669", "createdAt": "2021-01-05T23:05:54Z", "author": {"login": "rschlussel"}, "path": "presto-teradata-functions/src/main/java/com/facebook/presto/teradata/functions/dateformat/DateFormatParser.java", "diffHunk": "@@ -18,50 +18,82 @@\n import com.facebook.presto.teradata.functions.DateFormat;\n import org.antlr.v4.runtime.ANTLRInputStream;\n import org.antlr.v4.runtime.Token;\n-import org.joda.time.format.DateTimeFormatter;\n-import org.joda.time.format.DateTimeFormatterBuilder;\n \n+import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeFormatterBuilder;\n+import java.time.format.SignStyle;\n+import java.time.temporal.ChronoField;\n import java.util.List;\n \n import static com.facebook.presto.spi.StandardErrorCode.INVALID_FUNCTION_ARGUMENT;\n \n public class DateFormatParser\n {\n+    private enum Mode\n+    {\n+        // Do not require leading zero for parsing two position date fields (MM, DD, HH, HH24, MI, SS)\n+        // E.g. \"to_timestamp('1988/4/8 2:3:4','yyyy/mm/dd hh24:mi:ss')\"\n+        PARSER(1),\n+\n+        // Add leading zero for formatting single valued two position date fields (MM, DD, HH, HH24, MI, SS)\n+        // E.g. \"to_char(TIMESTAMP '1988-4-8 2:3:4','yyyy/mm/dd hh24:mi:ss')\" evaluates to \"1988/04/08 02:03:04\"\n+        FORMATTER(2);\n+\n+        final int minTwoPositionFieldWidth;\n+\n+        Mode(int value)\n+        {\n+            this.minTwoPositionFieldWidth = value;\n+        }\n+    }\n+\n     private DateFormatParser()\n     {\n     }\n \n     public static DateTimeFormatter createDateTimeFormatter(String format)\n+    {\n+        return createDateTimeFormatterImpl(format, Mode.FORMATTER);\n+    }\n+\n+    public static DateTimeFormatter createDateTimeParser(String format)\n+    {\n+        return createDateTimeFormatterImpl(format, Mode.PARSER);\n+    }\n+\n+    private static DateTimeFormatter createDateTimeFormatterImpl(String format, Mode mode)\n     {\n         DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();\n+        boolean formatContainsHourOfAMPM = false;\n         for (Token token : tokenize(format)) {\n             switch (token.getType()) {\n                 case DateFormat.TEXT:\n                     builder.appendLiteral(token.getText());\n                     break;\n                 case DateFormat.DD:\n-                    builder.appendDayOfMonth(2);\n+                    builder.appendValue(ChronoField.DAY_OF_MONTH, mode.minTwoPositionFieldWidth, 2, SignStyle.NOT_NEGATIVE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5aee06525dcf26c833371433f655eda9d135358"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI1NTY1Nw==", "bodyText": "Could we set all three of the parseDefaultings regardless of whether the format contains hour of AMPM (if a format doesn't have HOUR_OF_AMPM, then this won't be relevant, and similarly for HOUR_OF_DAY if it does have HOUR_OF_AMPM)?", "url": "https://github.com/prestodb/presto/pull/15537#discussion_r552255657", "createdAt": "2021-01-05T23:17:09Z", "author": {"login": "rschlussel"}, "path": "presto-teradata-functions/src/main/java/com/facebook/presto/teradata/functions/dateformat/DateFormatParser.java", "diffHunk": "@@ -70,9 +102,22 @@ public static DateTimeFormatter createDateTimeFormatter(String format)\n                             String.format(\"Failed to tokenize string [%s] at offset [%d]\", token.getText(), token.getCharPositionInLine()));\n             }\n         }\n-\n         try {\n-            return builder.toFormatter();\n+            // Append default values(0) for time fields(HH24, HH, MI, SS) because JSR-310 does not accept bare Date value as DateTime\n+\n+            if (formatContainsHourOfAMPM) {\n+                // At the moment format does not allow to include AM/PM token, thus it was never possible to specify PM hours using 'HH' token in format\n+                // Keep existing behaviour by defaulting to 0(AM) for AMPM_OF_DAY if format string contains 'HH'\n+                builder.parseDefaulting(ChronoField.HOUR_OF_AMPM, 0)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5aee06525dcf26c833371433f655eda9d135358"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI1NjM2Ng==", "bodyText": "Personally, I find these extra methods don't add much.  I would just have a single method createDateTimeFormatter(String format, Mode mode), i.e. just what's called createDateTimeFormatterImpl() here.", "url": "https://github.com/prestodb/presto/pull/15537#discussion_r552256366", "createdAt": "2021-01-05T23:18:57Z", "author": {"login": "rschlussel"}, "path": "presto-teradata-functions/src/main/java/com/facebook/presto/teradata/functions/dateformat/DateFormatParser.java", "diffHunk": "@@ -18,50 +18,82 @@\n import com.facebook.presto.teradata.functions.DateFormat;\n import org.antlr.v4.runtime.ANTLRInputStream;\n import org.antlr.v4.runtime.Token;\n-import org.joda.time.format.DateTimeFormatter;\n-import org.joda.time.format.DateTimeFormatterBuilder;\n \n+import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeFormatterBuilder;\n+import java.time.format.SignStyle;\n+import java.time.temporal.ChronoField;\n import java.util.List;\n \n import static com.facebook.presto.spi.StandardErrorCode.INVALID_FUNCTION_ARGUMENT;\n \n public class DateFormatParser\n {\n+    private enum Mode\n+    {\n+        // Do not require leading zero for parsing two position date fields (MM, DD, HH, HH24, MI, SS)\n+        // E.g. \"to_timestamp('1988/4/8 2:3:4','yyyy/mm/dd hh24:mi:ss')\"\n+        PARSER(1),\n+\n+        // Add leading zero for formatting single valued two position date fields (MM, DD, HH, HH24, MI, SS)\n+        // E.g. \"to_char(TIMESTAMP '1988-4-8 2:3:4','yyyy/mm/dd hh24:mi:ss')\" evaluates to \"1988/04/08 02:03:04\"\n+        FORMATTER(2);\n+\n+        final int minTwoPositionFieldWidth;\n+\n+        Mode(int value)\n+        {\n+            this.minTwoPositionFieldWidth = value;\n+        }\n+    }\n+\n     private DateFormatParser()\n     {\n     }\n \n     public static DateTimeFormatter createDateTimeFormatter(String format)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5aee06525dcf26c833371433f655eda9d135358"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI1NjY1OA==", "bodyText": "static import createDateTimeFormatter", "url": "https://github.com/prestodb/presto/pull/15537#discussion_r552256658", "createdAt": "2021-01-05T23:19:49Z", "author": {"login": "rschlussel"}, "path": "presto-teradata-functions/src/main/java/com/facebook/presto/teradata/functions/TeradataDateFunctions.java", "diffHunk": "@@ -35,23 +40,38 @@\n import static com.facebook.presto.common.type.TimeZoneKey.getTimeZoneKeys;\n import static com.facebook.presto.spi.StandardErrorCode.GENERIC_INTERNAL_ERROR;\n import static com.facebook.presto.spi.StandardErrorCode.INVALID_FUNCTION_ARGUMENT;\n-import static com.facebook.presto.teradata.functions.dateformat.DateFormatParser.createDateTimeFormatter;\n import static com.google.common.base.Throwables.throwIfInstanceOf;\n import static io.airlift.slice.Slices.utf8Slice;\n import static java.nio.charset.StandardCharsets.UTF_8;\n import static java.util.concurrent.TimeUnit.MILLISECONDS;\n \n public final class TeradataDateFunctions\n {\n+    // Separate DateTimeFormatter instance caches (for formatting and parsing) in order to keep support the following use cases:\n+    // 1. Do not require leading zero for parsing two position date fields (MM, DD, HH, HH24, MI, SS)\n+    //    e.g. allow \"to_timestamp('1988/4/8 2:3:4','yyyy/mm/dd hh24:mi:ss')\"\n+    // 2. Always add leading zero for formatting single valued two position date fields (MM, DD, HH, HH24, MI, SS)\n+    //    e.g. evaluate \"to_char(TIMESTAMP '1988-4-8 2:3:4','yyyy/mm/dd hh24:mi:ss')\" to \"1988/04/08 02:03:04\"\n+\n+    private static final ThreadLocalCache<Slice, DateTimeFormatter> DATETIME_PARSER_CACHE =\n+            new ThreadLocalCache<>(100, format -> DateFormatParser.createDateTimeParser(format.toStringUtf8()));\n+\n     private static final ThreadLocalCache<Slice, DateTimeFormatter> DATETIME_FORMATTER_CACHE =\n-            new ThreadLocalCache<>(100, format -> createDateTimeFormatter(format.toStringUtf8()));\n+            new ThreadLocalCache<>(100, format -> DateFormatParser.createDateTimeFormatter(format.toStringUtf8()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5aee06525dcf26c833371433f655eda9d135358"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI1Njc4OA==", "bodyText": "static import createDateTimeParser", "url": "https://github.com/prestodb/presto/pull/15537#discussion_r552256788", "createdAt": "2021-01-05T23:20:10Z", "author": {"login": "rschlussel"}, "path": "presto-teradata-functions/src/main/java/com/facebook/presto/teradata/functions/TeradataDateFunctions.java", "diffHunk": "@@ -35,23 +40,38 @@\n import static com.facebook.presto.common.type.TimeZoneKey.getTimeZoneKeys;\n import static com.facebook.presto.spi.StandardErrorCode.GENERIC_INTERNAL_ERROR;\n import static com.facebook.presto.spi.StandardErrorCode.INVALID_FUNCTION_ARGUMENT;\n-import static com.facebook.presto.teradata.functions.dateformat.DateFormatParser.createDateTimeFormatter;\n import static com.google.common.base.Throwables.throwIfInstanceOf;\n import static io.airlift.slice.Slices.utf8Slice;\n import static java.nio.charset.StandardCharsets.UTF_8;\n import static java.util.concurrent.TimeUnit.MILLISECONDS;\n \n public final class TeradataDateFunctions\n {\n+    // Separate DateTimeFormatter instance caches (for formatting and parsing) in order to keep support the following use cases:\n+    // 1. Do not require leading zero for parsing two position date fields (MM, DD, HH, HH24, MI, SS)\n+    //    e.g. allow \"to_timestamp('1988/4/8 2:3:4','yyyy/mm/dd hh24:mi:ss')\"\n+    // 2. Always add leading zero for formatting single valued two position date fields (MM, DD, HH, HH24, MI, SS)\n+    //    e.g. evaluate \"to_char(TIMESTAMP '1988-4-8 2:3:4','yyyy/mm/dd hh24:mi:ss')\" to \"1988/04/08 02:03:04\"\n+\n+    private static final ThreadLocalCache<Slice, DateTimeFormatter> DATETIME_PARSER_CACHE =\n+            new ThreadLocalCache<>(100, format -> DateFormatParser.createDateTimeParser(format.toStringUtf8()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5aee06525dcf26c833371433f655eda9d135358"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI1NzI2NA==", "bodyText": "Is there any reason we couldn't  or shouldn't support an AM/PM token?", "url": "https://github.com/prestodb/presto/pull/15537#discussion_r552257264", "createdAt": "2021-01-05T23:21:39Z", "author": {"login": "rschlussel"}, "path": "presto-teradata-functions/src/main/java/com/facebook/presto/teradata/functions/dateformat/DateFormatParser.java", "diffHunk": "@@ -70,9 +102,22 @@ public static DateTimeFormatter createDateTimeFormatter(String format)\n                             String.format(\"Failed to tokenize string [%s] at offset [%d]\", token.getText(), token.getCharPositionInLine()));\n             }\n         }\n-\n         try {\n-            return builder.toFormatter();\n+            // Append default values(0) for time fields(HH24, HH, MI, SS) because JSR-310 does not accept bare Date value as DateTime\n+\n+            if (formatContainsHourOfAMPM) {\n+                // At the moment format does not allow to include AM/PM token, thus it was never possible to specify PM hours using 'HH' token in format", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5aee06525dcf26c833371433f655eda9d135358"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI1NzUwNA==", "bodyText": "make this private and add a getter", "url": "https://github.com/prestodb/presto/pull/15537#discussion_r552257504", "createdAt": "2021-01-05T23:22:21Z", "author": {"login": "rschlussel"}, "path": "presto-teradata-functions/src/main/java/com/facebook/presto/teradata/functions/dateformat/DateFormatParser.java", "diffHunk": "@@ -18,50 +18,82 @@\n import com.facebook.presto.teradata.functions.DateFormat;\n import org.antlr.v4.runtime.ANTLRInputStream;\n import org.antlr.v4.runtime.Token;\n-import org.joda.time.format.DateTimeFormatter;\n-import org.joda.time.format.DateTimeFormatterBuilder;\n \n+import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeFormatterBuilder;\n+import java.time.format.SignStyle;\n+import java.time.temporal.ChronoField;\n import java.util.List;\n \n import static com.facebook.presto.spi.StandardErrorCode.INVALID_FUNCTION_ARGUMENT;\n \n public class DateFormatParser\n {\n+    private enum Mode\n+    {\n+        // Do not require leading zero for parsing two position date fields (MM, DD, HH, HH24, MI, SS)\n+        // E.g. \"to_timestamp('1988/4/8 2:3:4','yyyy/mm/dd hh24:mi:ss')\"\n+        PARSER(1),\n+\n+        // Add leading zero for formatting single valued two position date fields (MM, DD, HH, HH24, MI, SS)\n+        // E.g. \"to_char(TIMESTAMP '1988-4-8 2:3:4','yyyy/mm/dd hh24:mi:ss')\" evaluates to \"1988/04/08 02:03:04\"\n+        FORMATTER(2);\n+\n+        final int minTwoPositionFieldWidth;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5aee06525dcf26c833371433f655eda9d135358"}, "originalPosition": 27}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b5aee06525dcf26c833371433f655eda9d135358", "author": {"user": {"login": "rk13", "name": "Vladimirs Kotovs"}}, "url": "https://github.com/prestodb/presto/commit/b5aee06525dcf26c833371433f655eda9d135358", "committedDate": "2020-12-24T00:13:17Z", "message": "Add additional improvements for deprecating Joda-Time library in Presto Teradata functions"}, "afterCommit": {"oid": "63a5fa32d98e18d92f63f3f8d6c80e20b52466b8", "author": {"user": {"login": "rk13", "name": "Vladimirs Kotovs"}}, "url": "https://github.com/prestodb/presto/commit/63a5fa32d98e18d92f63f3f8d6c80e20b52466b8", "committedDate": "2021-01-07T13:42:43Z", "message": "Deprecate Joda library for Presto Teradata functions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "63a5fa32d98e18d92f63f3f8d6c80e20b52466b8", "author": {"user": {"login": "rk13", "name": "Vladimirs Kotovs"}}, "url": "https://github.com/prestodb/presto/commit/63a5fa32d98e18d92f63f3f8d6c80e20b52466b8", "committedDate": "2021-01-07T13:42:43Z", "message": "Deprecate Joda library for Presto Teradata functions"}, "afterCommit": {"oid": "3779262c735b7e6eb6a8e8af056d914aa783eb1c", "author": {"user": {"login": "rk13", "name": "Vladimirs Kotovs"}}, "url": "https://github.com/prestodb/presto/commit/3779262c735b7e6eb6a8e8af056d914aa783eb1c", "committedDate": "2021-01-07T15:20:41Z", "message": "Deprecate Joda library in Presto Teradata functions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8dddaae96c9e25e01abe6892e6b0851b8ac1961", "author": {"user": {"login": "rk13", "name": "Vladimirs Kotovs"}}, "url": "https://github.com/prestodb/presto/commit/e8dddaae96c9e25e01abe6892e6b0851b8ac1961", "committedDate": "2021-02-03T23:35:23Z", "message": "Deprecate Joda library in Presto Teradata functions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3779262c735b7e6eb6a8e8af056d914aa783eb1c", "author": {"user": {"login": "rk13", "name": "Vladimirs Kotovs"}}, "url": "https://github.com/prestodb/presto/commit/3779262c735b7e6eb6a8e8af056d914aa783eb1c", "committedDate": "2021-01-07T15:20:41Z", "message": "Deprecate Joda library in Presto Teradata functions"}, "afterCommit": {"oid": "e8dddaae96c9e25e01abe6892e6b0851b8ac1961", "author": {"user": {"login": "rk13", "name": "Vladimirs Kotovs"}}, "url": "https://github.com/prestodb/presto/commit/e8dddaae96c9e25e01abe6892e6b0851b8ac1961", "committedDate": "2021-02-03T23:35:23Z", "message": "Deprecate Joda library in Presto Teradata functions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjA2NzExNjg5", "url": "https://github.com/prestodb/presto/pull/15537#pullrequestreview-606711689", "createdAt": "2021-03-08T21:11:41Z", "commit": {"oid": "e8dddaae96c9e25e01abe6892e6b0851b8ac1961"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4579, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}