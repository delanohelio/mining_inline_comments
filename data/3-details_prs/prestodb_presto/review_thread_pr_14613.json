{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI4MDg0MzEw", "number": 14613, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNzo1NDoyNVrOEC2rnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNzo1NDoyNVrOEC2rnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNDI4NTExOnYy", "diffSide": "RIGHT", "path": "presto-spark-classloader-interface/src/main/java/com/facebook/presto/spark/classloader_interface/PrestoSparkConfInitializer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNzo1NDoyNVrOGfkIpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNToxODozMVrOGfyyEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc1MTA3OQ==", "bodyText": "is this the standard trick in SparkConf? (set a marker )", "url": "https://github.com/prestodb/presto/pull/14613#discussion_r435751079", "createdAt": "2020-06-05T07:54:25Z", "author": {"login": "wenleix"}, "path": "presto-spark-classloader-interface/src/main/java/com/facebook/presto/spark/classloader_interface/PrestoSparkConfInitializer.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.spark.classloader_interface;\n+\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.SparkContext;\n+\n+public class PrestoSparkConfInitializer\n+{\n+    private static final String INITIALIZED_MARKER = \"presto.spark.conf.initialized\";\n+\n+    private PrestoSparkConfInitializer() {}\n+\n+    public static void initialize(SparkConf sparkConf)\n+    {\n+        if (sparkConf.get(INITIALIZED_MARKER, null) != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84774806752a84b23b965b12345a702f7f9066cb"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk5MTA1Nw==", "bodyText": "I don't know.\nLet me elaborate on the problem I'm trying to solve.\nThe SparkConf must be initialized before the SparkContext is created. The PrestoSparkRunner accepts the SparkContext itself. The SparkContext must be pre-initialized. This check is needed to enforce that the SparkConf is properly initialized prior creating the SparkContext", "url": "https://github.com/prestodb/presto/pull/14613#discussion_r435991057", "createdAt": "2020-06-05T15:18:31Z", "author": {"login": "arhimondr"}, "path": "presto-spark-classloader-interface/src/main/java/com/facebook/presto/spark/classloader_interface/PrestoSparkConfInitializer.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.spark.classloader_interface;\n+\n+import org.apache.spark.SparkConf;\n+import org.apache.spark.SparkContext;\n+\n+public class PrestoSparkConfInitializer\n+{\n+    private static final String INITIALIZED_MARKER = \"presto.spark.conf.initialized\";\n+\n+    private PrestoSparkConfInitializer() {}\n+\n+    public static void initialize(SparkConf sparkConf)\n+    {\n+        if (sparkConf.get(INITIALIZED_MARKER, null) != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc1MTA3OQ=="}, "originalCommit": {"oid": "84774806752a84b23b965b12345a702f7f9066cb"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2729, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}