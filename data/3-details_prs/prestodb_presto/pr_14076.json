{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyOTY2NzQz", "number": 14076, "title": "Fix like pattern interpretation", "bodyText": "like pattern constant folding happens only when the optimization level\nis above SERIALIZABLE. However, RowExpressionInterpreter::tryHandleLike\nhandles like function in a way that it will take the constant folded\nlike pattern result together with the original arguments. Under such\ncase, tryHandleLike expects the given constant folded like pattern\nshould always be a compiled Regex but is not in the above case.\nThe patch relaxes the restriction on the like pattern to be more\ngeneric. As long as the return type is Regex, tryHandleLike should be\nable to handle it.\n== RELEASE NOTES ==\n\nGeneral Changes\n* Fix an optimizer failure introduced since 0.229, where a `LIKE` pattern can be deduced into a constant. For example, `col LIKE 'a' and col = 'b'`", "createdAt": "2020-02-10T06:45:24Z", "url": "https://github.com/prestodb/presto/pull/14076", "merged": true, "mergeCommit": {"oid": "ecb9167d40630f173625082a14d3a0b694c3ce4a"}, "closed": true, "closedAt": "2020-02-12T19:59:35Z", "author": {"login": "highker"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcDC2ahAFqTM1NjIyMzk2Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcDr313AFqTM1Nzc0MzAwNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2MjIzOTYz", "url": "https://github.com/prestodb/presto/pull/14076#pullrequestreview-356223963", "createdAt": "2020-02-10T20:02:38Z", "commit": {"oid": "b54f5e10c18731a57f7462656aa26e199680ce36"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMDowMjozOFrOFnzutw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMDowNjo1OVrOFnz2PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI4NjMyNw==", "bodyText": "I might use escape != null rather than hasEscape. I actually don't understand why hasEscape has to exist. \ud83d\ude02Also I think it's easier to read if you write write an if-else block with two different functionInvoker.invoke calls rather than this.", "url": "https://github.com/prestodb/presto/pull/14076#discussion_r377286327", "createdAt": "2020-02-10T20:02:38Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/RowExpressionInterpreter.java", "diffHunk": "@@ -883,8 +883,13 @@ private SpecialCallResult tryHandleLike(CallExpression callExpression, List<Obje\n                 if (possibleCompiledPattern == null) {\n                     return changed(null);\n                 }\n-                checkState((resolution.isCastFunction(((CallExpression) possibleCompiledPattern).getFunctionHandle())));\n-                possibleCompiledPattern = functionInvoker.invoke(((CallExpression) possibleCompiledPattern).getFunctionHandle(), session, nonCompiledPattern);\n+\n+                checkState(possibleCompiledPattern instanceof CallExpression);\n+                // this corresponds to ExpressionInterpreter::getConstantPattern\n+                Object[] arguments = hasEscape ? new Object[] {nonCompiledPattern, escape} : new Object[] {nonCompiledPattern};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b54f5e10c18731a57f7462656aa26e199680ce36"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI4ODI1Mw==", "bodyText": "I'm looking at the implementation of this function and I'm confused. What's the difference between nonCompiledPattern and value? It might be simpler to follow the logic if you just re-interpret the argument values unconditionally rather than sometimes do it and some times don't. If there's benefit in using both the processed and unprocessed versions of the arguments, could you document the differences and why this is needed?", "url": "https://github.com/prestodb/presto/pull/14076#discussion_r377288253", "createdAt": "2020-02-10T20:06:59Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/RowExpressionInterpreter.java", "diffHunk": "@@ -883,8 +883,13 @@ private SpecialCallResult tryHandleLike(CallExpression callExpression, List<Obje\n                 if (possibleCompiledPattern == null) {\n                     return changed(null);\n                 }\n-                checkState((resolution.isCastFunction(((CallExpression) possibleCompiledPattern).getFunctionHandle())));\n-                possibleCompiledPattern = functionInvoker.invoke(((CallExpression) possibleCompiledPattern).getFunctionHandle(), session, nonCompiledPattern);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b54f5e10c18731a57f7462656aa26e199680ce36"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e238b052d8539f99d27ea115666be1990babb50", "author": {"user": {"login": "highker", "name": "James Sun"}}, "url": "https://github.com/prestodb/presto/commit/6e238b052d8539f99d27ea115666be1990babb50", "committedDate": "2020-02-11T03:27:14Z", "message": "Fix like pattern interpretation\n\nlike pattern constant folding happens only when the optimization level\nis above SERIALIZABLE. However, RowExpressionInterpreter::tryHandleLike\nhandles like function in a way that it will take the constant folded\nlike pattern result together with the original arguments. Under such\ncase, tryHandleLike expects the given constant folded like pattern\nshould always be a compiled Regex but is not in the above case.\n\nThe patch relaxes the restriction on the like pattern to be more\ngeneric. As long as the return type is Regex, tryHandleLike should be\nable to handle it."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b54f5e10c18731a57f7462656aa26e199680ce36", "author": {"user": {"login": "highker", "name": "James Sun"}}, "url": "https://github.com/prestodb/presto/commit/b54f5e10c18731a57f7462656aa26e199680ce36", "committedDate": "2020-02-10T06:32:30Z", "message": "Fix like pattern interpretation\n\nlike pattern constant folding happens only when the optimization level\nis above SERIALIZABLE. However, RowExpressionInterpreter::tryHandleLike\nhandles like function in a way that it will take the constant folded\nlike pattern result together with the original arguments. Under such\ncase, tryHandleLike expects the given constant folded like pattern\nshould always be a compiled Regex but is not in the above case.\n\nThe patch relaxes the restriction on the like pattern to be more\ngeneric. As long as the return type is Regex, tryHandleLike should be\nable to handle it."}, "afterCommit": {"oid": "6e238b052d8539f99d27ea115666be1990babb50", "author": {"user": {"login": "highker", "name": "James Sun"}}, "url": "https://github.com/prestodb/presto/commit/6e238b052d8539f99d27ea115666be1990babb50", "committedDate": "2020-02-11T03:27:14Z", "message": "Fix like pattern interpretation\n\nlike pattern constant folding happens only when the optimization level\nis above SERIALIZABLE. However, RowExpressionInterpreter::tryHandleLike\nhandles like function in a way that it will take the constant folded\nlike pattern result together with the original arguments. Under such\ncase, tryHandleLike expects the given constant folded like pattern\nshould always be a compiled Regex but is not in the above case.\n\nThe patch relaxes the restriction on the like pattern to be more\ngeneric. As long as the return type is Regex, tryHandleLike should be\nable to handle it."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3NzQzMDA0", "url": "https://github.com/prestodb/presto/pull/14076#pullrequestreview-357743004", "createdAt": "2020-02-12T19:53:36Z", "commit": {"oid": "6e238b052d8539f99d27ea115666be1990babb50"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTo1MzozNlrOFo8fFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTo1MzozNlrOFo8fFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3ODM1OQ==", "bodyText": "So you mean even when hasEscape == true, escape can still be null?", "url": "https://github.com/prestodb/presto/pull/14076#discussion_r378478359", "createdAt": "2020-02-12T19:53:36Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/RowExpressionInterpreter.java", "diffHunk": "@@ -883,8 +883,19 @@ private SpecialCallResult tryHandleLike(CallExpression callExpression, List<Obje\n                 if (possibleCompiledPattern == null) {\n                     return changed(null);\n                 }\n-                checkState((resolution.isCastFunction(((CallExpression) possibleCompiledPattern).getFunctionHandle())));\n-                possibleCompiledPattern = functionInvoker.invoke(((CallExpression) possibleCompiledPattern).getFunctionHandle(), session, nonCompiledPattern);\n+\n+                checkState(possibleCompiledPattern instanceof CallExpression);\n+                // this corresponds to ExpressionInterpreter::getConstantPattern\n+                if (hasEscape) {\n+                    // like_pattern(pattern, escape)\n+                    possibleCompiledPattern = functionInvoker.invoke(((CallExpression) possibleCompiledPattern).getFunctionHandle(), session, nonCompiledPattern, escape);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e238b052d8539f99d27ea115666be1990babb50"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2582, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}