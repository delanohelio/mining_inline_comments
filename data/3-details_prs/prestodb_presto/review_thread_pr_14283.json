{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyNzQyOTQw", "number": 14283, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzoxOTo0MVrODq5KYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMDo1ODoyNVrODq98nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzAzMzMwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/buffer/ThriftSerializedPage.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzoxOTo0MVrOF66_Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzoxOTo0MVrOF66_Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMyODIyMg==", "bodyText": "private", "url": "https://github.com/prestodb/presto/pull/14283#discussion_r397328222", "createdAt": "2020-03-24T17:19:41Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/buffer/ThriftSerializedPage.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.execution.buffer;\n+\n+import com.facebook.drift.annotations.ThriftConstructor;\n+import com.facebook.drift.annotations.ThriftField;\n+import com.facebook.drift.annotations.ThriftStruct;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.Slices;\n+\n+import static com.facebook.presto.execution.buffer.PageCodecMarker.COMPRESSED;\n+import static com.facebook.presto.execution.buffer.PageCodecMarker.ENCRYPTED;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.util.Objects.requireNonNull;\n+\n+@ThriftStruct\n+public class ThriftSerializedPage\n+{\n+    private final Slice slice;\n+    private final int positionCount;\n+    private final int uncompressedSizeInBytes;\n+    private final byte pageCodecMarkers;\n+\n+    public ThriftSerializedPage(SerializedPage serializedPage)\n+    {\n+        this(serializedPage.getSlice(), serializedPage.getPageCodecMarkers(), serializedPage.getPositionCount(), serializedPage.getUncompressedSizeInBytes());\n+    }\n+\n+    public ThriftSerializedPage(Slice slice, byte pageCodecMarkers, int positionCount, int uncompressedSizeInBytes)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e802b5298dd5632754b1c198d8a861550182ef4"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzA2MzAwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/buffer/ThriftBufferResult.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzoyNjo0MFrOF67Sjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMDo1NjoxNlrOF7Cv4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMzMzEzNQ==", "bodyText": "Add javadoc to denote there should be no explicit call on this method.", "url": "https://github.com/prestodb/presto/pull/14283#discussion_r397333135", "createdAt": "2020-03-24T17:26:40Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/buffer/ThriftBufferResult.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.execution.buffer;\n+\n+import com.facebook.drift.annotations.ThriftConstructor;\n+import com.facebook.drift.annotations.ThriftField;\n+import com.facebook.drift.annotations.ThriftStruct;\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Strings.isNullOrEmpty;\n+import static java.util.Objects.requireNonNull;\n+\n+@ThriftStruct\n+public class ThriftBufferResult\n+{\n+    private final String taskInstanceId;\n+    private final long token;\n+    private final long nextToken;\n+    private final boolean bufferComplete;\n+    private final List<ThriftSerializedPage> thriftSerializedPages;\n+\n+    public static ThriftBufferResult createThriftBufferResult(BufferResult bufferResult)\n+    {\n+        requireNonNull(bufferResult, \"bufferResult is null\");\n+\n+        List<ThriftSerializedPage> thriftSerializedPages = bufferResult.getSerializedPages().stream()\n+                .map(ThriftSerializedPage::new)\n+                .collect(Collectors.toList());\n+        return new ThriftBufferResult(\n+                bufferResult.getTaskInstanceId(),\n+                bufferResult.getToken(),\n+                bufferResult.getNextToken(),\n+                bufferResult.isBufferComplete(),\n+                thriftSerializedPages);\n+    }\n+\n+    @ThriftConstructor\n+    public ThriftBufferResult(String taskInstanceId, long token, long nextToken, boolean bufferComplete, List<ThriftSerializedPage> thriftSerializedPages)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e802b5298dd5632754b1c198d8a861550182ef4"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ1NTMyOQ==", "bodyText": "nit: one line per parameter", "url": "https://github.com/prestodb/presto/pull/14283#discussion_r397455329", "createdAt": "2020-03-24T20:56:16Z", "author": {"login": "wenleix"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/buffer/ThriftBufferResult.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.execution.buffer;\n+\n+import com.facebook.drift.annotations.ThriftConstructor;\n+import com.facebook.drift.annotations.ThriftField;\n+import com.facebook.drift.annotations.ThriftStruct;\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Strings.isNullOrEmpty;\n+import static java.util.Objects.requireNonNull;\n+\n+@ThriftStruct\n+public class ThriftBufferResult\n+{\n+    private final String taskInstanceId;\n+    private final long token;\n+    private final long nextToken;\n+    private final boolean bufferComplete;\n+    private final List<ThriftSerializedPage> thriftSerializedPages;\n+\n+    public static ThriftBufferResult createThriftBufferResult(BufferResult bufferResult)\n+    {\n+        requireNonNull(bufferResult, \"bufferResult is null\");\n+\n+        List<ThriftSerializedPage> thriftSerializedPages = bufferResult.getSerializedPages().stream()\n+                .map(ThriftSerializedPage::new)\n+                .collect(Collectors.toList());\n+        return new ThriftBufferResult(\n+                bufferResult.getTaskInstanceId(),\n+                bufferResult.getToken(),\n+                bufferResult.getNextToken(),\n+                bufferResult.isBufferComplete(),\n+                thriftSerializedPages);\n+    }\n+\n+    @ThriftConstructor\n+    public ThriftBufferResult(String taskInstanceId, long token, long nextToken, boolean bufferComplete, List<ThriftSerializedPage> thriftSerializedPages)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMzMzEzNQ=="}, "originalCommit": {"oid": "3e802b5298dd5632754b1c198d8a861550182ef4"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzgxNzI0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/buffer/ThriftBufferResult.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMDo1ODoyNVrOF7C0gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMDo1ODoyNVrOF7C0gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ1NjUxMw==", "bodyText": "nit: what about from or fromBufferResult?  This seems to be the convention for factory method name in Presto, for example, see RowType::from, FieldId::from, etc :)", "url": "https://github.com/prestodb/presto/pull/14283#discussion_r397456513", "createdAt": "2020-03-24T20:58:25Z", "author": {"login": "wenleix"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/buffer/ThriftBufferResult.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.execution.buffer;\n+\n+import com.facebook.drift.annotations.ThriftConstructor;\n+import com.facebook.drift.annotations.ThriftField;\n+import com.facebook.drift.annotations.ThriftStruct;\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Strings.isNullOrEmpty;\n+import static java.util.Objects.requireNonNull;\n+\n+@ThriftStruct\n+public class ThriftBufferResult\n+{\n+    private final String taskInstanceId;\n+    private final long token;\n+    private final long nextToken;\n+    private final boolean bufferComplete;\n+    private final List<ThriftSerializedPage> thriftSerializedPages;\n+\n+    public static ThriftBufferResult createThriftBufferResult(BufferResult bufferResult)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e802b5298dd5632754b1c198d8a861550182ef4"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2934, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}