{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxNTAxODc0", "number": 15535, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxODowMzoxNVrOFG1ehw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxODoxODozN1rOFG13QA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNzExOTQzOnYy", "diffSide": "RIGHT", "path": "presto-thrift-testing-udf-server/src/main/java/com/facebook/presto/udf/thrift/EchoFirstInputThriftUdfService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxODowMzoxNVrOIICDGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxODowMzoxNVrOIICDGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI5MzA4MA==", "bodyText": "Since this is an example to help people write their own UDF service, maybe we should show a working case for no-arg UDFs, since there might be some confusion on how to properly handle it? It's not obvious what needs to be done for that situation. For example, need to write back results equal to number of input rows, etc.", "url": "https://github.com/prestodb/presto/pull/15535#discussion_r545293080", "createdAt": "2020-12-17T18:03:15Z", "author": {"login": "prithvip"}, "path": "presto-thrift-testing-udf-server/src/main/java/com/facebook/presto/udf/thrift/EchoFirstInputThriftUdfService.java", "diffHunk": "@@ -50,7 +51,11 @@ public EchoFirstInputThriftUdfService(BlockEncodingSerde blockEncodingSerde)\n         ThriftUdfPage result;\n         switch (inputs.getPageFormat()) {\n             case PRESTO_THRIFT:\n-                result = thriftPage(ImmutableList.of(inputs.getThriftBlocks().get(0)));\n+                PrestoThriftPage thriftPage = inputs.getThriftPage();\n+                if (thriftPage.getThriftBlocks().isEmpty()) {\n+                    throw new UnsupportedOperationException(\"No input to echo\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e83abe570c265f6ebeb3bca8e7073e9324b861b"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNzE4MjcyOnYy", "diffSide": "RIGHT", "path": "presto-thrift-api/src/main/java/com/facebook/presto/thrift/api/udf/ThriftUdfPage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxODoxODozN1rOIIComA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMDozOTowOVrOIIH5hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMwMjY4MA==", "bodyText": "I think we should model this as a ThriftUnion, since it is an either/or with ThriftSerializedPage vs PrestoThriftPage. Clients won't have to write guard code to check to make sure that one of these is non-empty, and it would clarify the API.", "url": "https://github.com/prestodb/presto/pull/15535#discussion_r545302680", "createdAt": "2020-12-17T18:18:37Z", "author": {"login": "prithvip"}, "path": "presto-thrift-api/src/main/java/com/facebook/presto/thrift/api/udf/ThriftUdfPage.java", "diffHunk": "@@ -54,9 +52,9 @@ public ThriftUdfPageFormat getPageFormat()\n \n     @Nullable\n     @ThriftField(value = 2, requiredness = OPTIONAL)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e83abe570c265f6ebeb3bca8e7073e9324b861b"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM4ODkzNA==", "bodyText": "The problem is that we Java doesn't have that so there's not really a natural way to do it. The Thrift connector API also just used this model, which is why I did this too. But I agree with you on principal.", "url": "https://github.com/prestodb/presto/pull/15535#discussion_r545388934", "createdAt": "2020-12-17T20:39:09Z", "author": {"login": "rongrong"}, "path": "presto-thrift-api/src/main/java/com/facebook/presto/thrift/api/udf/ThriftUdfPage.java", "diffHunk": "@@ -54,9 +52,9 @@ public ThriftUdfPageFormat getPageFormat()\n \n     @Nullable\n     @ThriftField(value = 2, requiredness = OPTIONAL)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMwMjY4MA=="}, "originalCommit": {"oid": "2e83abe570c265f6ebeb3bca8e7073e9324b861b"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3293, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}