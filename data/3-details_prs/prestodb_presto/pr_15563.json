{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ2MjEyODgx", "number": 15563, "title": "Introduce UserDefinedType", "bodyText": "Depended by facebookexternal/presto-facebook#1372\nIntroduce the concept of UserDefinedType as spedified in spec16. User defined\ntypes are managed by FunctionNamespaceManager.\nThe spec has more metadata specified for user defined types but we currently\nonly add\n<user-defined type definition> ::= CREATE TYPE <user-defined type body>\n<user-defined type body> ::= <schema-resolved user-defined type name>\n    [ AS <representation> ]\n<representation> ::=\n    <predefined type>\n  | <collection type>\n  | <member list>\n\nFor , we use TypeSignature to represent all options above.\nEnum type signature format is changed from typename(enum:type{enum_map}) to\nenumtype(typename{enum_map}) so enum types can behave the same way as other\nbuiltin parametric types that's fully managed by\nBuiltInTypeAndFunctionNamespaceManager.\nTest plan - Travis\n== NO RELEASE NOTE ==", "createdAt": "2020-12-28T19:37:34Z", "url": "https://github.com/prestodb/presto/pull/15563", "merged": true, "mergeCommit": {"oid": "5974c564dc6175b67482bdb93cdeaf4ead71cff2"}, "closed": true, "closedAt": "2021-01-22T03:32:04Z", "author": {"login": "rongrong"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdqt2tCABqjQxNTMxOTUzNzk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdyfWGtgFqTU3Mzg5OTE5Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b1a7a22733819115ce5df8314bdc5502de296990", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/b1a7a22733819115ce5df8314bdc5502de296990", "committedDate": "2020-12-24T03:27:56Z", "message": "Introduce SemanticType\n\nExternal dynamic types supported through FunctionNamespaceManager should only\nmanage semantic types because the external system cannot provide block level\nAPIs. Introduce the concept of SemanticType and only expose this to\nFunctionNamespaceManager.\n\nSemanticType is named type that's based on an actual physical type. We use\nTypeSignature to represent the physical type. It should be verified that\nthis TypeSignature represents a static type."}, "afterCommit": {"oid": "778544c9379d07a8e168bbb9613751b53020a0a2", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/778544c9379d07a8e168bbb9613751b53020a0a2", "committedDate": "2020-12-28T22:27:12Z", "message": "Introduce SemanticType\n\nExternal dynamic types supported through FunctionNamespaceManager should only\nmanage semantic types because the external system cannot provide block level\nAPIs. Introduce the concept of SemanticType and only expose this to\nFunctionNamespaceManager.\n\nSemanticType is named type that's based on an actual physical type. We use\nTypeSignature to represent the physical type. It should be verified that\nthis TypeSignature represents a static type."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "778544c9379d07a8e168bbb9613751b53020a0a2", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/778544c9379d07a8e168bbb9613751b53020a0a2", "committedDate": "2020-12-28T22:27:12Z", "message": "Introduce SemanticType\n\nExternal dynamic types supported through FunctionNamespaceManager should only\nmanage semantic types because the external system cannot provide block level\nAPIs. Introduce the concept of SemanticType and only expose this to\nFunctionNamespaceManager.\n\nSemanticType is named type that's based on an actual physical type. We use\nTypeSignature to represent the physical type. It should be verified that\nthis TypeSignature represents a static type."}, "afterCommit": {"oid": "ada75697f3cc93f54317160fc3c15d97ad2f661d", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/ada75697f3cc93f54317160fc3c15d97ad2f661d", "committedDate": "2020-12-28T22:29:51Z", "message": "Introduce SemanticType\n\nExternal dynamic types supported through FunctionNamespaceManager should only\nmanage semantic types because the external system cannot provide block level\nAPIs. Introduce the concept of SemanticType and only expose this to\nFunctionNamespaceManager.\n\nSemanticType is named type that's based on an actual physical type. We use\nTypeSignature to represent the physical type. It should be verified that\nthis TypeSignature represents a static type."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ada75697f3cc93f54317160fc3c15d97ad2f661d", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/ada75697f3cc93f54317160fc3c15d97ad2f661d", "committedDate": "2020-12-28T22:29:51Z", "message": "Introduce SemanticType\n\nExternal dynamic types supported through FunctionNamespaceManager should only\nmanage semantic types because the external system cannot provide block level\nAPIs. Introduce the concept of SemanticType and only expose this to\nFunctionNamespaceManager.\n\nSemanticType is named type that's based on an actual physical type. We use\nTypeSignature to represent the physical type. It should be verified that\nthis TypeSignature represents a static type."}, "afterCommit": {"oid": "1d99bdac40cc211e75f15cb55e06dd1a527d2506", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/1d99bdac40cc211e75f15cb55e06dd1a527d2506", "committedDate": "2020-12-30T23:00:12Z", "message": "Introduce SemanticType\n\nExternal dynamic types supported through FunctionNamespaceManager should only\nmanage semantic types because the external system cannot provide block level\nAPIs. Introduce the concept of SemanticType and only expose this to\nFunctionNamespaceManager.\n\nSemanticType is named type that's based on an actual physical type. We use\nTypeSignature to represent the physical type. It should be verified that\nthis TypeSignature represents a static type.\n\nWe also changed the format of enum type signature from\n`typename(enum:type{enum_map})` to `enumtype(typename{enum_map})` so enum types\ncan behave the same way as other builtin parametric types that's fully managed\nby BuiltInTypeAndFunctionNamespaceManager."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1d99bdac40cc211e75f15cb55e06dd1a527d2506", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/1d99bdac40cc211e75f15cb55e06dd1a527d2506", "committedDate": "2020-12-30T23:00:12Z", "message": "Introduce SemanticType\n\nExternal dynamic types supported through FunctionNamespaceManager should only\nmanage semantic types because the external system cannot provide block level\nAPIs. Introduce the concept of SemanticType and only expose this to\nFunctionNamespaceManager.\n\nSemanticType is named type that's based on an actual physical type. We use\nTypeSignature to represent the physical type. It should be verified that\nthis TypeSignature represents a static type.\n\nWe also changed the format of enum type signature from\n`typename(enum:type{enum_map})` to `enumtype(typename{enum_map})` so enum types\ncan behave the same way as other builtin parametric types that's fully managed\nby BuiltInTypeAndFunctionNamespaceManager."}, "afterCommit": {"oid": "8b10ac847fc321149cfb43b1d7b51e1289359b0c", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/8b10ac847fc321149cfb43b1d7b51e1289359b0c", "committedDate": "2020-12-30T23:23:04Z", "message": "Rename LongEnumType to BigintEnumType\n\nChange the type name to be more consistent with the standard type names\nbecause the type name could show up in user-facing error messages."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8b10ac847fc321149cfb43b1d7b51e1289359b0c", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/8b10ac847fc321149cfb43b1d7b51e1289359b0c", "committedDate": "2020-12-30T23:23:04Z", "message": "Rename LongEnumType to BigintEnumType\n\nChange the type name to be more consistent with the standard type names\nbecause the type name could show up in user-facing error messages."}, "afterCommit": {"oid": "140703d4824b34746f484a9334c053bcf286097b", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/140703d4824b34746f484a9334c053bcf286097b", "committedDate": "2020-12-30T23:33:06Z", "message": "Rename LongEnumType to BigintEnumType\n\nChange the type name to be more consistent with the standard type names\nbecause the type name could show up in user-facing error messages."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "140703d4824b34746f484a9334c053bcf286097b", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/140703d4824b34746f484a9334c053bcf286097b", "committedDate": "2020-12-30T23:33:06Z", "message": "Rename LongEnumType to BigintEnumType\n\nChange the type name to be more consistent with the standard type names\nbecause the type name could show up in user-facing error messages."}, "afterCommit": {"oid": "3074bdfbd2610817a184e8555f86eeb21651851f", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/3074bdfbd2610817a184e8555f86eeb21651851f", "committedDate": "2020-12-31T00:25:17Z", "message": "Rename LongEnumType to BigintEnumType\n\nChange the type name to be more consistent with the standard type names\nbecause the type name could show up in user-facing error messages."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwNDg4NDI4", "url": "https://github.com/prestodb/presto/pull/15563#pullrequestreview-560488428", "createdAt": "2020-12-31T15:44:02Z", "commit": {"oid": "954d1a280209d2ff92bc83b472dc7b923661a137"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQxNTo0NDowMlrOINAVNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQxNTo0NDowMlrOINAVNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDUwNzgyOQ==", "bodyText": "since it's really just a type + a name, should we call this a NamedType instead?\n(semantic implies that it's a type that contains info about the meaning of your data, but you could have a  semantic type that is anonymous)", "url": "https://github.com/prestodb/presto/pull/15563#discussion_r550507829", "createdAt": "2020-12-31T15:44:02Z", "author": {"login": "daniel-ohayon"}, "path": "presto-common/src/main/java/com/facebook/presto/common/type/SemanticType.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.common.type;\n+\n+import com.facebook.presto.common.QualifiedObjectName;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class SemanticType", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "954d1a280209d2ff92bc83b472dc7b923661a137"}, "originalPosition": 20}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3074bdfbd2610817a184e8555f86eeb21651851f", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/3074bdfbd2610817a184e8555f86eeb21651851f", "committedDate": "2020-12-31T00:25:17Z", "message": "Rename LongEnumType to BigintEnumType\n\nChange the type name to be more consistent with the standard type names\nbecause the type name could show up in user-facing error messages."}, "afterCommit": {"oid": "63096db1c1c5a469228ad0e09ff8e1db62ba5102", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/63096db1c1c5a469228ad0e09ff8e1db62ba5102", "committedDate": "2021-01-06T19:55:28Z", "message": "Rename LongEnumType to BigintEnumType\n\nChange the type name to be more consistent with the standard type names\nbecause the type name could show up in user-facing error messages."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "63096db1c1c5a469228ad0e09ff8e1db62ba5102", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/63096db1c1c5a469228ad0e09ff8e1db62ba5102", "committedDate": "2021-01-06T19:55:28Z", "message": "Rename LongEnumType to BigintEnumType\n\nChange the type name to be more consistent with the standard type names\nbecause the type name could show up in user-facing error messages."}, "afterCommit": {"oid": "b63372ff174a78da5691ddf6d69f601a98112af2", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/b63372ff174a78da5691ddf6d69f601a98112af2", "committedDate": "2021-01-06T20:42:58Z", "message": "Rename LongEnumType to BigintEnumType\n\nChange the type name to be more consistent with the standard type names\nbecause the type name could show up in user-facing error messages."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b63372ff174a78da5691ddf6d69f601a98112af2", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/b63372ff174a78da5691ddf6d69f601a98112af2", "committedDate": "2021-01-06T20:42:58Z", "message": "Rename LongEnumType to BigintEnumType\n\nChange the type name to be more consistent with the standard type names\nbecause the type name could show up in user-facing error messages."}, "afterCommit": {"oid": "5601d76c4cd0c16a1fffd577b05d4664449251d3", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/5601d76c4cd0c16a1fffd577b05d4664449251d3", "committedDate": "2021-01-06T20:50:39Z", "message": "Rename LongEnumType to BigintEnumType\n\nChange the type name to be more consistent with the standard type names\nbecause the type name could show up in user-facing error messages."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5601d76c4cd0c16a1fffd577b05d4664449251d3", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/5601d76c4cd0c16a1fffd577b05d4664449251d3", "committedDate": "2021-01-06T20:50:39Z", "message": "Rename LongEnumType to BigintEnumType\n\nChange the type name to be more consistent with the standard type names\nbecause the type name could show up in user-facing error messages."}, "afterCommit": {"oid": "4f24c041bbcadc2a845b43d38bbef04fc89da27e", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/4f24c041bbcadc2a845b43d38bbef04fc89da27e", "committedDate": "2021-01-06T20:53:24Z", "message": "Rename LongEnumType to BigintEnumType\n\nChange the type name to be more consistent with the standard type names\nbecause the type name could show up in user-facing error messages."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4f24c041bbcadc2a845b43d38bbef04fc89da27e", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/4f24c041bbcadc2a845b43d38bbef04fc89da27e", "committedDate": "2021-01-06T20:53:24Z", "message": "Rename LongEnumType to BigintEnumType\n\nChange the type name to be more consistent with the standard type names\nbecause the type name could show up in user-facing error messages."}, "afterCommit": {"oid": "9ffa4452ac12e643fe36608dc82f8cb444d262a1", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/9ffa4452ac12e643fe36608dc82f8cb444d262a1", "committedDate": "2021-01-08T03:04:52Z", "message": "Add array_intersect SQL function that accepts array of array\n\narray_intersect(array<array<bigint>>) -> array<bigint>\narray_intersect(array<array<double>>) -> array<double>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9ffa4452ac12e643fe36608dc82f8cb444d262a1", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/9ffa4452ac12e643fe36608dc82f8cb444d262a1", "committedDate": "2021-01-08T03:04:52Z", "message": "Add array_intersect SQL function that accepts array of array\n\narray_intersect(array<array<bigint>>) -> array<bigint>\narray_intersect(array<array<double>>) -> array<double>"}, "afterCommit": {"oid": "07006481764d6b1f348615e7c3c960b6dfb31f2e", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/07006481764d6b1f348615e7c3c960b6dfb31f2e", "committedDate": "2021-01-08T03:04:52Z", "message": "Rename LongEnumType to BigintEnumType\n\nChange the type name to be more consistent with the standard type names\nbecause the type name could show up in user-facing error messages."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY0NTc1NDUy", "url": "https://github.com/prestodb/presto/pull/15563#pullrequestreview-564575452", "createdAt": "2021-01-08T20:54:30Z", "commit": {"oid": "365f5df443e2357574ee86fe3e57c81a5e8a4dc9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQyMDo1NDozMFrOIQg1Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQyMDo1NDozMFrOIQg1Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDE4NTk5NQ==", "bodyText": "Maybe I don't have the full picture. Why is this changed from start to end?", "url": "https://github.com/prestodb/presto/pull/15563#discussion_r554185995", "createdAt": "2021-01-08T20:54:30Z", "author": {"login": "caithagoras"}, "path": "presto-common/src/main/java/com/facebook/presto/common/type/TypeSignature.java", "diffHunk": "@@ -252,7 +260,7 @@ VarcharEnumMap getVarcharEnumMap()\n         Set<Integer> indices = new HashSet<>();\n         Matcher enumMatcher = ENUM_PREFIX.matcher(signature);\n         while (enumMatcher.find()) {\n-            indices.add(enumMatcher.start());\n+            indices.add(enumMatcher.end());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "365f5df443e2357574ee86fe3e57c81a5e8a4dc9"}, "originalPosition": 97}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY0NTg5NDAw", "url": "https://github.com/prestodb/presto/pull/15563#pullrequestreview-564589400", "createdAt": "2021-01-08T21:21:00Z", "commit": {"oid": "07006481764d6b1f348615e7c3c960b6dfb31f2e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "07006481764d6b1f348615e7c3c960b6dfb31f2e", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/07006481764d6b1f348615e7c3c960b6dfb31f2e", "committedDate": "2021-01-08T03:04:52Z", "message": "Rename LongEnumType to BigintEnumType\n\nChange the type name to be more consistent with the standard type names\nbecause the type name could show up in user-facing error messages."}, "afterCommit": {"oid": "66e0b80a6239a5cc383831449452de367272ae39", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/66e0b80a6239a5cc383831449452de367272ae39", "committedDate": "2021-01-12T00:07:24Z", "message": "Rename LongEnumType to BigintEnumType\n\nChange the type name to be more consistent with the standard type names\nbecause the type name could show up in user-facing error messages."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY2NDk3NDYy", "url": "https://github.com/prestodb/presto/pull/15563#pullrequestreview-566497462", "createdAt": "2021-01-12T17:18:57Z", "commit": {"oid": "07006481764d6b1f348615e7c3c960b6dfb31f2e"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxNzoxOTo1NVrOISMCZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxNzoyNzo0M1rOISMWwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTk0MjUwMA==", "bodyText": "Is case sensitivity taken care of here?", "url": "https://github.com/prestodb/presto/pull/15563#discussion_r555942500", "createdAt": "2021-01-12T17:19:55Z", "author": {"login": "kaikalur"}, "path": "presto-common/src/main/java/com/facebook/presto/common/type/BigintEnumType.java", "diffHunk": "@@ -157,7 +162,7 @@ public boolean equals(Object o)\n             return false;\n         }\n \n-        LongEnumType other = (LongEnumType) o;\n+        BigintEnumType other = (BigintEnumType) o;\n \n         return Objects.equals(getTypeSignature().getBase(), other.getTypeSignature().getBase())\n                 && Objects.equals(getEnumMap(), other.getEnumMap());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66e0b80a6239a5cc383831449452de367272ae39"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTk0MzY2Mw==", "bodyText": "Is this user visible? The names are a bit odd. Not sure if  enum will work better", "url": "https://github.com/prestodb/presto/pull/15563#discussion_r555943663", "createdAt": "2021-01-12T17:21:43Z", "author": {"login": "kaikalur"}, "path": "presto-common/src/main/java/com/facebook/presto/common/type/StandardTypes.java", "diffHunk": "@@ -45,6 +45,8 @@\n     public static final String IPPREFIX = \"ipprefix\";\n     public static final String GEOMETRY = \"Geometry\";\n     public static final String BING_TILE = \"BingTile\";\n+    public static final String BIGINT_ENUM = \"BigintEnum\";\n+    public static final String VARCHAR_ENUM = \"VarcharEnum\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66e0b80a6239a5cc383831449452de367272ae39"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTk0NDA5MQ==", "bodyText": "Why ENGLISH?", "url": "https://github.com/prestodb/presto/pull/15563#discussion_r555944091", "createdAt": "2021-01-12T17:22:22Z", "author": {"login": "kaikalur"}, "path": "presto-common/src/main/java/com/facebook/presto/common/type/TypeSignature.java", "diffHunk": "@@ -219,31 +222,36 @@ else if (c == ',') {\n     private static class EnumMapParsingData\n     {\n         final int mapEndIndex;\n+        private final String typeName;\n         private final Map<String, String> map;\n-        final boolean isLongEnum;\n+        private final boolean isBigintEnum;\n \n-        EnumMapParsingData(int mapEndIndex, Map<String, String> map, boolean isLongEnum)\n+        EnumMapParsingData(int mapEndIndex, String typeName, Map<String, String> map, boolean isBigintEnum)\n         {\n             this.mapEndIndex = mapEndIndex;\n+            this.typeName = typeName;\n             this.map = map;\n-            this.isLongEnum = isLongEnum;\n+            this.isBigintEnum = isBigintEnum;\n         }\n \n         LongEnumMap getLongEnumMap()\n         {\n-            checkArgument(isLongEnum, \"Invalid enum map format\");\n+            checkArgument(isBigintEnum, \"Invalid enum map format\");\n             return new LongEnumMap(\n+                    typeName,\n                     map.entrySet().stream()\n                             .collect(Collectors.toMap(Map.Entry::getKey, e -> Long.parseLong(e.getValue()))));\n         }\n \n         VarcharEnumMap getVarcharEnumMap()\n         {\n-            checkArgument(!isLongEnum, \"Invalid enum map format\");\n+            checkArgument(!isBigintEnum, \"Invalid enum map format\");\n             // Varchar enum values are base32-encoded so that they are case-insensitive, which is expected of TypeSigntures\n             Base32 base32 = new Base32();\n-            return new VarcharEnumMap(map.entrySet().stream()\n-                    .collect(Collectors.toMap(Map.Entry::getKey, e -> new String(base32.decode(e.getValue().toUpperCase(ENGLISH))))));\n+            return new VarcharEnumMap(\n+                    typeName,\n+                    map.entrySet().stream()\n+                            .collect(Collectors.toMap(Map.Entry::getKey, e -> new String(base32.decode(e.getValue().toUpperCase(ENGLISH))))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66e0b80a6239a5cc383831449452de367272ae39"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTk0NDcyOA==", "bodyText": "Is the signature already case normalized?", "url": "https://github.com/prestodb/presto/pull/15563#discussion_r555944728", "createdAt": "2021-01-12T17:23:20Z", "author": {"login": "kaikalur"}, "path": "presto-common/src/main/java/com/facebook/presto/common/type/TypeSignature.java", "diffHunk": "@@ -273,13 +281,14 @@ VarcharEnumMap getVarcharEnumMap()\n     private static EnumMapParsingData parseEnumMap(String signature, int startIndex)\n     {\n         EnumMapParsingState state = EnumMapParsingState.EXPECT_KEY;\n-        boolean isLongEnum = signature.substring(startIndex).trim().toLowerCase(ENGLISH).startsWith(LONG_ENUM_PREFIX);\n-        int openBracketIndex = startIndex + (isLongEnum ? LONG_ENUM_PREFIX.length() : VARCHAR_ENUM_PREFIX.length()) + 1;\n+        boolean isBigintEnum = signature.startsWith(BIGINT_ENUM_PREFIX, startIndex - BIGINT_ENUM_PREFIX.length() - 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66e0b80a6239a5cc383831449452de367272ae39"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTk0NTUwMg==", "bodyText": "Why qualified? Can it be just a simple id?", "url": "https://github.com/prestodb/presto/pull/15563#discussion_r555945502", "createdAt": "2021-01-12T17:24:30Z", "author": {"login": "kaikalur"}, "path": "presto-common/src/main/java/com/facebook/presto/common/type/UserDefinedType.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.common.type;\n+\n+import com.facebook.presto.common.QualifiedObjectName;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class UserDefinedType\n+{\n+    private final QualifiedObjectName name;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66e0b80a6239a5cc383831449452de367272ae39"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTk0NzcxMw==", "bodyText": "What is a \"static type\"?", "url": "https://github.com/prestodb/presto/pull/15563#discussion_r555947713", "createdAt": "2021-01-12T17:27:43Z", "author": {"login": "kaikalur"}, "path": "presto-main/src/main/java/com/facebook/presto/metadata/FunctionAndTypeManager.java", "diffHunk": "@@ -199,18 +191,16 @@ public Type getType(TypeSignature signature)\n             if (type.isPresent()) {\n                 return type.get();\n             }\n-            try {\n-                return parametricTypeCache.getUnchecked(signature);\n-            }\n-            catch (UncheckedExecutionException e) {\n-                throwIfUnchecked(e.getCause());\n-                throw new RuntimeException(e.getCause());\n-            }\n         }\n \n         Optional<FunctionNamespaceManager<?>> functionNamespaceManager = getServingFunctionNamespaceManager(signature.getTypeSignatureBase());\n         checkArgument(functionNamespaceManager.isPresent(), \"Cannot find function namespace for type '%s'\", signature.getBase());\n-        return instantiateParametricType(signature, functionNamespaceManager.get());\n+        Optional<UserDefinedType> userDefinedType = functionNamespaceManager.get().getUserDefinedType(signature.getTypeSignatureBase().getQualifiedObjectName());\n+        if (!userDefinedType.isPresent()) {\n+            throw new IllegalArgumentException(\"Unknown type \" + signature);\n+        }\n+        checkArgument(userDefinedType.get().getPhysicalTypeSignature().getTypeSignatureBase().isStandardType(), \"UserDefinedType must be based on static types.\");\n+        return getType(userDefinedType.get().getPhysicalTypeSignature());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66e0b80a6239a5cc383831449452de367272ae39"}, "originalPosition": 76}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "66e0b80a6239a5cc383831449452de367272ae39", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/66e0b80a6239a5cc383831449452de367272ae39", "committedDate": "2021-01-12T00:07:24Z", "message": "Rename LongEnumType to BigintEnumType\n\nChange the type name to be more consistent with the standard type names\nbecause the type name could show up in user-facing error messages."}, "afterCommit": {"oid": "f5f9c004cc66a000f98af3b5bc631176fba9b676", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/f5f9c004cc66a000f98af3b5bc631176fba9b676", "committedDate": "2021-01-14T04:13:08Z", "message": "Rename LongEnumType to BigintEnumType\n\nChange the type name to be more consistent with the standard type names\nbecause the type name could show up in user-facing error messages."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f5f9c004cc66a000f98af3b5bc631176fba9b676", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/f5f9c004cc66a000f98af3b5bc631176fba9b676", "committedDate": "2021-01-14T04:13:08Z", "message": "Rename LongEnumType to BigintEnumType\n\nChange the type name to be more consistent with the standard type names\nbecause the type name could show up in user-facing error messages."}, "afterCommit": {"oid": "20b63c6e149ab3fca53377b1ab2ded3edfba65ce", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/20b63c6e149ab3fca53377b1ab2ded3edfba65ce", "committedDate": "2021-01-20T23:47:53Z", "message": "Rename LongEnumType to BigintEnumType\n\nChange the type name to be more consistent with the standard type names\nbecause the type name could show up in user-facing error messages."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcyODE5NzA1", "url": "https://github.com/prestodb/presto/pull/15563#pullrequestreview-572819705", "createdAt": "2021-01-21T00:59:49Z", "commit": {"oid": "f91639d87cddb531f812798c6d6b1dc942c533fa"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwMDo1OTo0OVrOIXb47Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwMDo1OTo0OVrOIXb47Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTQ0NTEwMQ==", "bodyText": "Is the order the same as the user given? That might be good.", "url": "https://github.com/prestodb/presto/pull/15563#discussion_r561445101", "createdAt": "2021-01-21T00:59:49Z", "author": {"login": "kaikalur"}, "path": "presto-common/src/main/java/com/facebook/presto/common/type/LongEnumType.java", "diffHunk": "@@ -114,25 +123,22 @@ public boolean equals(Object o)\n \n             LongEnumMap other = (LongEnumMap) o;\n \n-            return Objects.equals(this.enumMap, other.enumMap);\n+            return Objects.equals(typeName, other.typeName) && Objects.equals(enumMap, other.enumMap);\n         }\n \n         @Override\n         public String toString()\n         {\n-            return \"enum:bigint{\"\n-                    + enumMap.entrySet()\n-                    .stream()\n+            return format(\"%s{%s}\", typeName, enumMap.entrySet().stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f91639d87cddb531f812798c6d6b1dc942c533fa"}, "originalPosition": 78}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3e69ae2bb0a7bd7a22e883417b991cd89b17e8a", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/c3e69ae2bb0a7bd7a22e883417b991cd89b17e8a", "committedDate": "2021-01-21T02:36:51Z", "message": "Introduce UserDefinedType\n\nIntroduce the concept of UserDefinedType as spedified in spec16. User defined\ntypes are managed by FunctionNamespaceManager.\n\nThe spec has more metadata specified for user defined types but we currently\nonly add\n```\n<user-defined type definition> ::= CREATE TYPE <user-defined type body>\n<user-defined type body> ::= <schema-resolved user-defined type name>\n    [ AS <representation> ]\n<representation> ::=\n    <predefined type>\n  | <collection type>\n  | <member list>\n```\nFor <representation>, we use TypeSignature to represent all options above.\n\nEnum type signature format is changed from `typename(enum:type{enum_map})` to\n`enumtype(typename{enum_map})` so enum types can behave the same way as other\nbuiltin parametric types that's fully managed by\nBuiltInTypeAndFunctionNamespaceManager."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f569008a2b2d5bf11457b165867d3349feac2d31", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/f569008a2b2d5bf11457b165867d3349feac2d31", "committedDate": "2021-01-21T02:36:56Z", "message": "Rename LongEnumType to BigintEnumType\n\nChange the type name to be more consistent with the standard type names\nbecause the type name could show up in user-facing error messages."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "20b63c6e149ab3fca53377b1ab2ded3edfba65ce", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/20b63c6e149ab3fca53377b1ab2ded3edfba65ce", "committedDate": "2021-01-20T23:47:53Z", "message": "Rename LongEnumType to BigintEnumType\n\nChange the type name to be more consistent with the standard type names\nbecause the type name could show up in user-facing error messages."}, "afterCommit": {"oid": "f569008a2b2d5bf11457b165867d3349feac2d31", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/f569008a2b2d5bf11457b165867d3349feac2d31", "committedDate": "2021-01-21T02:36:56Z", "message": "Rename LongEnumType to BigintEnumType\n\nChange the type name to be more consistent with the standard type names\nbecause the type name could show up in user-facing error messages."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTczODk5MTky", "url": "https://github.com/prestodb/presto/pull/15563#pullrequestreview-573899192", "createdAt": "2021-01-22T02:04:39Z", "commit": {"oid": "f569008a2b2d5bf11457b165867d3349feac2d31"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4603, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}