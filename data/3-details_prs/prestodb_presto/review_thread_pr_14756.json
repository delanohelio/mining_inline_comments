{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyNDQxODAw", "number": 14756, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMjoyOToyNVrOEKfZ0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMjozMDoxN1rOEKfbDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NDM1NzI5OnYy", "diffSide": "RIGHT", "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMjoyOToyNVrOGrj0uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNToyNjozMlrOG4SKXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMyODg5MQ==", "bodyText": "In my opinion we should log and throw until and unless we are confident it is OK to retry and also that retry can fix things. If we get into a situation that 1 eentry is causing problems and that is causing this executor to always exit midway, then dying and complaining is probably a better solution.", "url": "https://github.com/prestodb/presto/pull/14756#discussion_r448328891", "createdAt": "2020-07-01T12:29:25Z", "author": {"login": "mayankgarg1990"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "diffHunk": "@@ -153,8 +153,13 @@ public FileMergeCacheManager(\n \n         this.cacheSizeCalculateExecutor.scheduleAtFixedRate(\n                 () -> {\n-                    cacheScopeFiles.keySet().forEach(cacheIdentifier -> cacheScopeSizeInBytes.put(cacheIdentifier, getCacheScopeSizeInBytes(cacheIdentifier)));\n-                    cacheScopeSizeInBytes.keySet().removeIf(key -> !cacheScopeFiles.containsKey(key));\n+                    try {\n+                        cacheScopeFiles.keySet().forEach(cacheIdentifier -> cacheScopeSizeInBytes.put(cacheIdentifier, getCacheScopeSizeInBytes(cacheIdentifier)));\n+                        cacheScopeSizeInBytes.keySet().removeIf(key -> !cacheScopeFiles.containsKey(key));\n+                    }\n+                    catch (Throwable t) {\n+                        log.error(t, \"Error calculating cache size\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0273d18de07b64b150a682162f6c54aeb795945"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY0MTYwMA==", "bodyText": "It looks like it is pretty consistent in our codebase to log and let it retry. Do you think we should stop retrying for this specific case? Or in general?", "url": "https://github.com/prestodb/presto/pull/14756#discussion_r448641600", "createdAt": "2020-07-01T22:08:55Z", "author": {"login": "arhimondr"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "diffHunk": "@@ -153,8 +153,13 @@ public FileMergeCacheManager(\n \n         this.cacheSizeCalculateExecutor.scheduleAtFixedRate(\n                 () -> {\n-                    cacheScopeFiles.keySet().forEach(cacheIdentifier -> cacheScopeSizeInBytes.put(cacheIdentifier, getCacheScopeSizeInBytes(cacheIdentifier)));\n-                    cacheScopeSizeInBytes.keySet().removeIf(key -> !cacheScopeFiles.containsKey(key));\n+                    try {\n+                        cacheScopeFiles.keySet().forEach(cacheIdentifier -> cacheScopeSizeInBytes.put(cacheIdentifier, getCacheScopeSizeInBytes(cacheIdentifier)));\n+                        cacheScopeSizeInBytes.keySet().removeIf(key -> !cacheScopeFiles.containsKey(key));\n+                    }\n+                    catch (Throwable t) {\n+                        log.error(t, \"Error calculating cache size\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMyODg5MQ=="}, "originalCommit": {"oid": "e0273d18de07b64b150a682162f6c54aeb795945"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkzOTM3Nw==", "bodyText": "In this case and in general for most cases until and unless the underlying logic involves RPC calls. Here this thread is modifying class members and if the error is non-recoverable, then it is possible that we get half of the state in the variable and we think that things are working - so better screw it up well", "url": "https://github.com/prestodb/presto/pull/14756#discussion_r452939377", "createdAt": "2020-07-10T16:12:14Z", "author": {"login": "mayankgarg1990"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "diffHunk": "@@ -153,8 +153,13 @@ public FileMergeCacheManager(\n \n         this.cacheSizeCalculateExecutor.scheduleAtFixedRate(\n                 () -> {\n-                    cacheScopeFiles.keySet().forEach(cacheIdentifier -> cacheScopeSizeInBytes.put(cacheIdentifier, getCacheScopeSizeInBytes(cacheIdentifier)));\n-                    cacheScopeSizeInBytes.keySet().removeIf(key -> !cacheScopeFiles.containsKey(key));\n+                    try {\n+                        cacheScopeFiles.keySet().forEach(cacheIdentifier -> cacheScopeSizeInBytes.put(cacheIdentifier, getCacheScopeSizeInBytes(cacheIdentifier)));\n+                        cacheScopeSizeInBytes.keySet().removeIf(key -> !cacheScopeFiles.containsKey(key));\n+                    }\n+                    catch (Throwable t) {\n+                        log.error(t, \"Error calculating cache size\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMyODg5MQ=="}, "originalCommit": {"oid": "e0273d18de07b64b150a682162f6c54aeb795945"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY3MTAwNg==", "bodyText": "Currently the code doesn't have any RPC calls, but in theory it might at some point. Logging and retrying is the standard way of handling problems in scheduled tasks. Further, when we build alerting, we are going to be able to detect them quickly. It feels like killing the JVM is too drastic measure, and it might be potentially unsafe as somebody might not realize how the error is handled and add some code that is potentially recoverable.\nThoughts?", "url": "https://github.com/prestodb/presto/pull/14756#discussion_r461671006", "createdAt": "2020-07-28T15:26:32Z", "author": {"login": "arhimondr"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "diffHunk": "@@ -153,8 +153,13 @@ public FileMergeCacheManager(\n \n         this.cacheSizeCalculateExecutor.scheduleAtFixedRate(\n                 () -> {\n-                    cacheScopeFiles.keySet().forEach(cacheIdentifier -> cacheScopeSizeInBytes.put(cacheIdentifier, getCacheScopeSizeInBytes(cacheIdentifier)));\n-                    cacheScopeSizeInBytes.keySet().removeIf(key -> !cacheScopeFiles.containsKey(key));\n+                    try {\n+                        cacheScopeFiles.keySet().forEach(cacheIdentifier -> cacheScopeSizeInBytes.put(cacheIdentifier, getCacheScopeSizeInBytes(cacheIdentifier)));\n+                        cacheScopeSizeInBytes.keySet().removeIf(key -> !cacheScopeFiles.containsKey(key));\n+                    }\n+                    catch (Throwable t) {\n+                        log.error(t, \"Error calculating cache size\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMyODg5MQ=="}, "originalCommit": {"oid": "e0273d18de07b64b150a682162f6c54aeb795945"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NDM2MDQ2OnYy", "diffSide": "LEFT", "path": "presto-main/src/main/java/com/facebook/presto/execution/resourceGroups/InternalResourceGroupManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMjozMDoxN1rOGrj2mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMjowOToyNVrOGr267Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMyOTM3MQ==", "bodyText": "It is better to not to schedule rather than to die midway everytime. Detecting and fixing no scheduling is easier than partial scheduling.", "url": "https://github.com/prestodb/presto/pull/14756#discussion_r448329371", "createdAt": "2020-07-01T12:30:17Z", "author": {"login": "mayankgarg1990"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/resourceGroups/InternalResourceGroupManager.java", "diffHunk": "@@ -200,7 +200,6 @@ public void start()\n                 }\n                 catch (Throwable t) {\n                     log.error(t, \"Error while executing refreshAndStartQueries\");\n-                    throw t;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0273d18de07b64b150a682162f6c54aeb795945"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY0MTc3Mw==", "bodyText": "Makes sense, let me revert it then", "url": "https://github.com/prestodb/presto/pull/14756#discussion_r448641773", "createdAt": "2020-07-01T22:09:25Z", "author": {"login": "arhimondr"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/resourceGroups/InternalResourceGroupManager.java", "diffHunk": "@@ -200,7 +200,6 @@ public void start()\n                 }\n                 catch (Throwable t) {\n                     log.error(t, \"Error while executing refreshAndStartQueries\");\n-                    throw t;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMyOTM3MQ=="}, "originalCommit": {"oid": "e0273d18de07b64b150a682162f6c54aeb795945"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2290, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}