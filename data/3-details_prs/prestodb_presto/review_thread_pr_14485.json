{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzNzgxOTQ4", "number": 14485, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMjowNDo1NlrOD6A0ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMjozMDoxNVrOD6BOhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMTU3NDE4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/ExtractSpatialJoins.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMjowNDo1NlrOGRnGNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMjowNDo1NlrOGRnGNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTExOTU0MQ==", "bodyText": "The implementation doesn't actually allow this yet", "url": "https://github.com/prestodb/presto/pull/14485#discussion_r421119541", "createdAt": "2020-05-06T22:04:56Z", "author": {"login": "aweisberg"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/ExtractSpatialJoins.java", "diffHunk": "@@ -456,6 +460,41 @@ else if (alignment < 0) {\n                 kdbTree.map(KdbTreeUtils::toJson)));\n     }\n \n+    private static boolean isSphericalJoin(Metadata metadata, RowExpression firstArgument, RowExpression secondArgument)\n+    {\n+        Type sphericalGeographyType = metadata.getType(SPHERICAL_GEOGRAPHY_TYPE_SIGNATURE);\n+        return firstArgument.getType().equals(sphericalGeographyType) || secondArgument.getType().equals(sphericalGeographyType);\n+    }\n+\n+    private static boolean canPartitionSpatialJoin(JoinNode joinNode)\n+    {\n+        /*\n+         * A fundamental limitation in distributing joins (broadcast or partitioned)\n+         * is when a side is an outer join, and a row in that side is on more than one worker.\n+         * This is because you cannot determine if that row has no matches given the\n+         * local information (another worker may have found a match), so the worker\n+         * doesn't know whether to emit a NULL for the non-match.\n+         *\n+         * This can happen if:\n+         * 1. A side is broadcast, and it's OUTER on that side (including FULL).\n+         * 2. A side is partitioned, the object is extended (ie, not a Point),\n+         *    and it's OUTER on that side (including FULL).\n+         *\n+         * We assume that the right node is the build side.  The CBO is disabled\n+         * for spatial joins, so this should be a good assumption.  Then we have:\n+         * 1. INNER joins are OK.\n+         * 2. LEFT joins when the left node is a Point are OK.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fcc79bf9f61200d7cef1ed8f9bdffbc83ff222a"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMTY0MTAxOnYy", "diffSide": "RIGHT", "path": "presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/SpatialPartitioningInternalAggregateFunction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMjozMDoxNVrOGRnt3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMjozMDoxNVrOGRnt3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEyOTY5NA==", "bodyText": "Comment is now wrong", "url": "https://github.com/prestodb/presto/pull/14485#discussion_r421129694", "createdAt": "2020-05-06T22:30:15Z", "author": {"login": "aweisberg"}, "path": "presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/SpatialPartitioningInternalAggregateFunction.java", "diffHunk": "@@ -101,7 +101,7 @@ public static void output(SpatialPartitioningState state, BlockBuilder out)\n         Rectangle envelope = state.getExtent();\n \n         // Add a small buffer on the right and upper sides", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79a9c8a705b1c3875435759ec0b97c2783bdde28"}, "originalPosition": 3}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2580, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}