{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3OTIwNTg5", "number": 14908, "reviewThreads": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNzo0MDowMFrOES6xrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzo0MDowM1rOEWTLcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MjcyODE1OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNzo0MDowMFrOG4XcOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNzo0MDowMFrOG4XcOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc1NzQ5Ng==", "bodyText": "I updated the description with the release note for this PR for #14800 but I can't seem to open a PR against your repo to update it here.", "url": "https://github.com/prestodb/presto/pull/14908#discussion_r461757496", "createdAt": "2020-07-28T17:40:00Z", "author": {"login": "aweisberg"}, "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "diffHunk": "@@ -0,0 +1,51 @@\n+=============\n+Release 0.239\n+=============\n+\n+General Changes\n+_______________\n+* Fix  :func:`classification_miss_rate` and :func:`classification_fall_out` functions (:pr:`14740`).\n+* Fix NPE in `/v1/thread` end point.\n+* Fix an issue where the property ``ignore_stats_calculator_failures`` would not be honored for certain queries that had filters pushed down to the table scan.\n+* Fix missing query completion events for queries which fail prior to dispatching.\n+* Fix potential infinite loop when the setting ``use_legacy_scheduler`` is set to false.\n+* Add aggregation function SET_UNION.\n+* Add local disk spilling support for `ORDER BY` syntax.\n+* Add local disk spilling support for aggregation functions with `ORDER BY` or `DISTINCT` syntax.\n+* Add optimization for cursor projection & filter by extract and compute common subexpressions among all projections & filter first. This optimization can be turned off by session property ``optimize_common_sub_expressions``.\n+* Add support for 2 security modes for views. The default `DEFINER` security mode is the same as the previous behavior. Tables referenced in the view are accessed using the permissions of the view owner (the **creator** or.\n+* Add support for warning on unfiltered partition keys using `partition-keys-to-warn-on-no-filtering` system property.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df474ca8a7e076fea0234290c66fe6c46c2fa4c7"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4Mjg4MDA3OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxODoyMTowMVrOG4Y7OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxODoyMTowMVrOG4Y7OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc4MTgxNg==", "bodyText": "sorry for the confusion.  The commit for Remove experimental feature to perform grouped execution for eligible table scans ... was merged after this one, so this note should just say\nEnable ``grouped-execution-for-aggregation`` by default.", "url": "https://github.com/prestodb/presto/pull/14908#discussion_r461781816", "createdAt": "2020-07-28T18:21:01Z", "author": {"login": "rschlussel"}, "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "diffHunk": "@@ -0,0 +1,51 @@\n+=============\n+Release 0.239\n+=============\n+\n+General Changes\n+_______________\n+* Fix  :func:`classification_miss_rate` and :func:`classification_fall_out` functions (:pr:`14740`).\n+* Fix NPE in `/v1/thread` end point.\n+* Fix an issue where the property ``ignore_stats_calculator_failures`` would not be honored for certain queries that had filters pushed down to the table scan.\n+* Fix missing query completion events for queries which fail prior to dispatching.\n+* Fix potential infinite loop when the setting ``use_legacy_scheduler`` is set to false.\n+* Add aggregation function SET_UNION.\n+* Add local disk spilling support for `ORDER BY` syntax.\n+* Add local disk spilling support for aggregation functions with `ORDER BY` or `DISTINCT` syntax.\n+* Add optimization for cursor projection & filter by extract and compute common subexpressions among all projections & filter first. This optimization can be turned off by session property ``optimize_common_sub_expressions``.\n+* Add support for 2 security modes for views. The default `DEFINER` security mode is the same as the previous behavior. Tables referenced in the view are accessed using the permissions of the view owner (the **creator** or.\n+* Add support for warning on unfiltered partition keys using `partition-keys-to-warn-on-no-filtering` system property.\n+* Add support to optimize min/max only metadata query. This is controlled by existing config ``optimizer.optimize-metadata-queries`` and session property ``optimize_metadata_queries``. Note that enabling this config/session property might change query result if there are metadata that refers to empty data, e.g. empty hive partition.\n+* Remove experimental feature to perform grouped execution for eligible table scans and its associated configuration property ``experimental.grouped-execution-for-elligible-table-scans`` and session property ``grouped_execution_for_eligible_table_scans``.\n+* Definer** of the view) rather than the user executing the query. In the `INVOKER` security mode, tables referenced in the view are accessed using the permissions of the query user (the **invoker** of the view).\n+* Enable ``dynamic-schedule-for-grouped-execution`` by default.  In future releases, we will remove this property, and grouped execution will always use dynamic scheduling.\n+* Enable ``grouped-execution-for-aggregation`` and ``experimental.grouped-execution-for-eligible-table-scans`` by default.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df474ca8a7e076fea0234290c66fe6c46c2fa4c7"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4Mjg4MzEzOnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxODoyMTo0OVrOG4Y9Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxODoyMTo0OVrOG4Y9Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc4MjI5MA==", "bodyText": "remove experimental.grouped-execution-for-eligilbe-table-scans from this list, as we decided to get rid of this feature entirely instead.", "url": "https://github.com/prestodb/presto/pull/14908#discussion_r461782290", "createdAt": "2020-07-28T18:21:49Z", "author": {"login": "rschlussel"}, "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "diffHunk": "@@ -0,0 +1,51 @@\n+=============\n+Release 0.239\n+=============\n+\n+General Changes\n+_______________\n+* Fix  :func:`classification_miss_rate` and :func:`classification_fall_out` functions (:pr:`14740`).\n+* Fix NPE in `/v1/thread` end point.\n+* Fix an issue where the property ``ignore_stats_calculator_failures`` would not be honored for certain queries that had filters pushed down to the table scan.\n+* Fix missing query completion events for queries which fail prior to dispatching.\n+* Fix potential infinite loop when the setting ``use_legacy_scheduler`` is set to false.\n+* Add aggregation function SET_UNION.\n+* Add local disk spilling support for `ORDER BY` syntax.\n+* Add local disk spilling support for aggregation functions with `ORDER BY` or `DISTINCT` syntax.\n+* Add optimization for cursor projection & filter by extract and compute common subexpressions among all projections & filter first. This optimization can be turned off by session property ``optimize_common_sub_expressions``.\n+* Add support for 2 security modes for views. The default `DEFINER` security mode is the same as the previous behavior. Tables referenced in the view are accessed using the permissions of the view owner (the **creator** or.\n+* Add support for warning on unfiltered partition keys using `partition-keys-to-warn-on-no-filtering` system property.\n+* Add support to optimize min/max only metadata query. This is controlled by existing config ``optimizer.optimize-metadata-queries`` and session property ``optimize_metadata_queries``. Note that enabling this config/session property might change query result if there are metadata that refers to empty data, e.g. empty hive partition.\n+* Remove experimental feature to perform grouped execution for eligible table scans and its associated configuration property ``experimental.grouped-execution-for-elligible-table-scans`` and session property ``grouped_execution_for_eligible_table_scans``.\n+* Definer** of the view) rather than the user executing the query. In the `INVOKER` security mode, tables referenced in the view are accessed using the permissions of the query user (the **invoker** of the view).\n+* Enable ``dynamic-schedule-for-grouped-execution`` by default.  In future releases, we will remove this property, and grouped execution will always use dynamic scheduling.\n+* Enable ``grouped-execution-for-aggregation`` and ``experimental.grouped-execution-for-eligible-table-scans`` by default.\n+* Enable async page transport with non-blocking IO by default. This can be disabled by setting ``exchange.async-page-transport-enabled`` configuration property to false.\n+* Introduce new configuration property ``grouped-execution-enabled`` and session property ``grouped_execution`` to turn grouped execution on or off.  This property is true by default.  If set to false, it is equivalent to setting all of ``grouped-execution-for-aggregation``, ``grouped-execution-for-join``, and ``experimental.grouped-execution-for-eligible-table-scans`` to false.  In future releases we will remove these other properties and only have a single switch for enabling and disabling grouped execution.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df474ca8a7e076fea0234290c66fe6c46c2fa4c7"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4Mjg4OTc4OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxODoyMzo0N1rOG4ZBmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxODoyMzo0N1rOG4ZBmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc4MzQ0OA==", "bodyText": "this should be part of the note Add support for 2 security modes for views.  Looks like somehow some other bullets came in between.", "url": "https://github.com/prestodb/presto/pull/14908#discussion_r461783448", "createdAt": "2020-07-28T18:23:47Z", "author": {"login": "rschlussel"}, "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "diffHunk": "@@ -0,0 +1,51 @@\n+=============\n+Release 0.239\n+=============\n+\n+General Changes\n+_______________\n+* Fix  :func:`classification_miss_rate` and :func:`classification_fall_out` functions (:pr:`14740`).\n+* Fix NPE in `/v1/thread` end point.\n+* Fix an issue where the property ``ignore_stats_calculator_failures`` would not be honored for certain queries that had filters pushed down to the table scan.\n+* Fix missing query completion events for queries which fail prior to dispatching.\n+* Fix potential infinite loop when the setting ``use_legacy_scheduler`` is set to false.\n+* Add aggregation function SET_UNION.\n+* Add local disk spilling support for `ORDER BY` syntax.\n+* Add local disk spilling support for aggregation functions with `ORDER BY` or `DISTINCT` syntax.\n+* Add optimization for cursor projection & filter by extract and compute common subexpressions among all projections & filter first. This optimization can be turned off by session property ``optimize_common_sub_expressions``.\n+* Add support for 2 security modes for views. The default `DEFINER` security mode is the same as the previous behavior. Tables referenced in the view are accessed using the permissions of the view owner (the **creator** or.\n+* Add support for warning on unfiltered partition keys using `partition-keys-to-warn-on-no-filtering` system property.\n+* Add support to optimize min/max only metadata query. This is controlled by existing config ``optimizer.optimize-metadata-queries`` and session property ``optimize_metadata_queries``. Note that enabling this config/session property might change query result if there are metadata that refers to empty data, e.g. empty hive partition.\n+* Remove experimental feature to perform grouped execution for eligible table scans and its associated configuration property ``experimental.grouped-execution-for-elligible-table-scans`` and session property ``grouped_execution_for_eligible_table_scans``.\n+* Definer** of the view) rather than the user executing the query. In the `INVOKER` security mode, tables referenced in the view are accessed using the permissions of the query user (the **invoker** of the view).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df474ca8a7e076fea0234290c66fe6c46c2fa4c7"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4Mjg5MzExOnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxODoyNDo0N1rOG4ZDtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxODoyNDo0N1rOG4ZDtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc4Mzk5MQ==", "bodyText": "can we get more information about what this means?", "url": "https://github.com/prestodb/presto/pull/14908#discussion_r461783991", "createdAt": "2020-07-28T18:24:47Z", "author": {"login": "rschlussel"}, "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "diffHunk": "@@ -0,0 +1,51 @@\n+=============\n+Release 0.239\n+=============\n+\n+General Changes\n+_______________\n+* Fix  :func:`classification_miss_rate` and :func:`classification_fall_out` functions (:pr:`14740`).\n+* Fix NPE in `/v1/thread` end point.\n+* Fix an issue where the property ``ignore_stats_calculator_failures`` would not be honored for certain queries that had filters pushed down to the table scan.\n+* Fix missing query completion events for queries which fail prior to dispatching.\n+* Fix potential infinite loop when the setting ``use_legacy_scheduler`` is set to false.\n+* Add aggregation function SET_UNION.\n+* Add local disk spilling support for `ORDER BY` syntax.\n+* Add local disk spilling support for aggregation functions with `ORDER BY` or `DISTINCT` syntax.\n+* Add optimization for cursor projection & filter by extract and compute common subexpressions among all projections & filter first. This optimization can be turned off by session property ``optimize_common_sub_expressions``.\n+* Add support for 2 security modes for views. The default `DEFINER` security mode is the same as the previous behavior. Tables referenced in the view are accessed using the permissions of the view owner (the **creator** or.\n+* Add support for warning on unfiltered partition keys using `partition-keys-to-warn-on-no-filtering` system property.\n+* Add support to optimize min/max only metadata query. This is controlled by existing config ``optimizer.optimize-metadata-queries`` and session property ``optimize_metadata_queries``. Note that enabling this config/session property might change query result if there are metadata that refers to empty data, e.g. empty hive partition.\n+* Remove experimental feature to perform grouped execution for eligible table scans and its associated configuration property ``experimental.grouped-execution-for-elligible-table-scans`` and session property ``grouped_execution_for_eligible_table_scans``.\n+* Definer** of the view) rather than the user executing the query. In the `INVOKER` security mode, tables referenced in the view are accessed using the permissions of the query user (the **invoker** of the view).\n+* Enable ``dynamic-schedule-for-grouped-execution`` by default.  In future releases, we will remove this property, and grouped execution will always use dynamic scheduling.\n+* Enable ``grouped-execution-for-aggregation`` and ``experimental.grouped-execution-for-eligible-table-scans`` by default.\n+* Enable async page transport with non-blocking IO by default. This can be disabled by setting ``exchange.async-page-transport-enabled`` configuration property to false.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df474ca8a7e076fea0234290c66fe6c46c2fa4c7"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MjkwODcwOnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxODoyOTowN1rOG4ZNeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxODoyOTowN1rOG4ZNeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc4NjQ4OQ==", "bodyText": "needs more information and to be in proper release note format.", "url": "https://github.com/prestodb/presto/pull/14908#discussion_r461786489", "createdAt": "2020-07-28T18:29:07Z", "author": {"login": "rschlussel"}, "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "diffHunk": "@@ -0,0 +1,51 @@\n+=============\n+Release 0.239\n+=============\n+\n+General Changes\n+_______________\n+* Fix  :func:`classification_miss_rate` and :func:`classification_fall_out` functions (:pr:`14740`).\n+* Fix NPE in `/v1/thread` end point.\n+* Fix an issue where the property ``ignore_stats_calculator_failures`` would not be honored for certain queries that had filters pushed down to the table scan.\n+* Fix missing query completion events for queries which fail prior to dispatching.\n+* Fix potential infinite loop when the setting ``use_legacy_scheduler`` is set to false.\n+* Add aggregation function SET_UNION.\n+* Add local disk spilling support for `ORDER BY` syntax.\n+* Add local disk spilling support for aggregation functions with `ORDER BY` or `DISTINCT` syntax.\n+* Add optimization for cursor projection & filter by extract and compute common subexpressions among all projections & filter first. This optimization can be turned off by session property ``optimize_common_sub_expressions``.\n+* Add support for 2 security modes for views. The default `DEFINER` security mode is the same as the previous behavior. Tables referenced in the view are accessed using the permissions of the view owner (the **creator** or.\n+* Add support for warning on unfiltered partition keys using `partition-keys-to-warn-on-no-filtering` system property.\n+* Add support to optimize min/max only metadata query. This is controlled by existing config ``optimizer.optimize-metadata-queries`` and session property ``optimize_metadata_queries``. Note that enabling this config/session property might change query result if there are metadata that refers to empty data, e.g. empty hive partition.\n+* Remove experimental feature to perform grouped execution for eligible table scans and its associated configuration property ``experimental.grouped-execution-for-elligible-table-scans`` and session property ``grouped_execution_for_eligible_table_scans``.\n+* Definer** of the view) rather than the user executing the query. In the `INVOKER` security mode, tables referenced in the view are accessed using the permissions of the query user (the **invoker** of the view).\n+* Enable ``dynamic-schedule-for-grouped-execution`` by default.  In future releases, we will remove this property, and grouped execution will always use dynamic scheduling.\n+* Enable ``grouped-execution-for-aggregation`` and ``experimental.grouped-execution-for-eligible-table-scans`` by default.\n+* Enable async page transport with non-blocking IO by default. This can be disabled by setting ``exchange.async-page-transport-enabled`` configuration property to false.\n+* Introduce new configuration property ``grouped-execution-enabled`` and session property ``grouped_execution`` to turn grouped execution on or off.  This property is true by default.  If set to false, it is equivalent to setting all of ``grouped-execution-for-aggregation``, ``grouped-execution-for-join``, and ``experimental.grouped-execution-for-eligible-table-scans`` to false.  In future releases we will remove these other properties and only have a single switch for enabling and disabling grouped execution.\n+* Reverting Reliable Resource Group Versioning.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df474ca8a7e076fea0234290c66fe6c46c2fa4c7"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MjkwOTgyOnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxODoyOToyNVrOG4ZOIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMDo1NzoxOFrOG4ejxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc4NjY1Ng==", "bodyText": "needs to be fleshed out", "url": "https://github.com/prestodb/presto/pull/14908#discussion_r461786656", "createdAt": "2020-07-28T18:29:25Z", "author": {"login": "rschlussel"}, "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "diffHunk": "@@ -0,0 +1,51 @@\n+=============\n+Release 0.239\n+=============\n+\n+General Changes\n+_______________\n+* Fix  :func:`classification_miss_rate` and :func:`classification_fall_out` functions (:pr:`14740`).\n+* Fix NPE in `/v1/thread` end point.\n+* Fix an issue where the property ``ignore_stats_calculator_failures`` would not be honored for certain queries that had filters pushed down to the table scan.\n+* Fix missing query completion events for queries which fail prior to dispatching.\n+* Fix potential infinite loop when the setting ``use_legacy_scheduler`` is set to false.\n+* Add aggregation function SET_UNION.\n+* Add local disk spilling support for `ORDER BY` syntax.\n+* Add local disk spilling support for aggregation functions with `ORDER BY` or `DISTINCT` syntax.\n+* Add optimization for cursor projection & filter by extract and compute common subexpressions among all projections & filter first. This optimization can be turned off by session property ``optimize_common_sub_expressions``.\n+* Add support for 2 security modes for views. The default `DEFINER` security mode is the same as the previous behavior. Tables referenced in the view are accessed using the permissions of the view owner (the **creator** or.\n+* Add support for warning on unfiltered partition keys using `partition-keys-to-warn-on-no-filtering` system property.\n+* Add support to optimize min/max only metadata query. This is controlled by existing config ``optimizer.optimize-metadata-queries`` and session property ``optimize_metadata_queries``. Note that enabling this config/session property might change query result if there are metadata that refers to empty data, e.g. empty hive partition.\n+* Remove experimental feature to perform grouped execution for eligible table scans and its associated configuration property ``experimental.grouped-execution-for-elligible-table-scans`` and session property ``grouped_execution_for_eligible_table_scans``.\n+* Definer** of the view) rather than the user executing the query. In the `INVOKER` security mode, tables referenced in the view are accessed using the permissions of the query user (the **invoker** of the view).\n+* Enable ``dynamic-schedule-for-grouped-execution`` by default.  In future releases, we will remove this property, and grouped execution will always use dynamic scheduling.\n+* Enable ``grouped-execution-for-aggregation`` and ``experimental.grouped-execution-for-eligible-table-scans`` by default.\n+* Enable async page transport with non-blocking IO by default. This can be disabled by setting ``exchange.async-page-transport-enabled`` configuration property to false.\n+* Introduce new configuration property ``grouped-execution-enabled`` and session property ``grouped_execution`` to turn grouped execution on or off.  This property is true by default.  If set to false, it is equivalent to setting all of ``grouped-execution-for-aggregation``, ``grouped-execution-for-join``, and ``experimental.grouped-execution-for-eligible-table-scans`` to false.  In future releases we will remove these other properties and only have a single switch for enabling and disabling grouped execution.\n+* Reverting Reliable Resource Group Versioning.\n+* Specify allowed roles for HTTP endpoints.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df474ca8a7e076fea0234290c66fe6c46c2fa4c7"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg3NDExNg==", "bodyText": "I will introduce this point once we have the proper documentation for this feature.", "url": "https://github.com/prestodb/presto/pull/14908#discussion_r461874116", "createdAt": "2020-07-28T20:57:18Z", "author": {"login": "mayankgarg1990"}, "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "diffHunk": "@@ -0,0 +1,51 @@\n+=============\n+Release 0.239\n+=============\n+\n+General Changes\n+_______________\n+* Fix  :func:`classification_miss_rate` and :func:`classification_fall_out` functions (:pr:`14740`).\n+* Fix NPE in `/v1/thread` end point.\n+* Fix an issue where the property ``ignore_stats_calculator_failures`` would not be honored for certain queries that had filters pushed down to the table scan.\n+* Fix missing query completion events for queries which fail prior to dispatching.\n+* Fix potential infinite loop when the setting ``use_legacy_scheduler`` is set to false.\n+* Add aggregation function SET_UNION.\n+* Add local disk spilling support for `ORDER BY` syntax.\n+* Add local disk spilling support for aggregation functions with `ORDER BY` or `DISTINCT` syntax.\n+* Add optimization for cursor projection & filter by extract and compute common subexpressions among all projections & filter first. This optimization can be turned off by session property ``optimize_common_sub_expressions``.\n+* Add support for 2 security modes for views. The default `DEFINER` security mode is the same as the previous behavior. Tables referenced in the view are accessed using the permissions of the view owner (the **creator** or.\n+* Add support for warning on unfiltered partition keys using `partition-keys-to-warn-on-no-filtering` system property.\n+* Add support to optimize min/max only metadata query. This is controlled by existing config ``optimizer.optimize-metadata-queries`` and session property ``optimize_metadata_queries``. Note that enabling this config/session property might change query result if there are metadata that refers to empty data, e.g. empty hive partition.\n+* Remove experimental feature to perform grouped execution for eligible table scans and its associated configuration property ``experimental.grouped-execution-for-elligible-table-scans`` and session property ``grouped_execution_for_eligible_table_scans``.\n+* Definer** of the view) rather than the user executing the query. In the `INVOKER` security mode, tables referenced in the view are accessed using the permissions of the query user (the **invoker** of the view).\n+* Enable ``dynamic-schedule-for-grouped-execution`` by default.  In future releases, we will remove this property, and grouped execution will always use dynamic scheduling.\n+* Enable ``grouped-execution-for-aggregation`` and ``experimental.grouped-execution-for-eligible-table-scans`` by default.\n+* Enable async page transport with non-blocking IO by default. This can be disabled by setting ``exchange.async-page-transport-enabled`` configuration property to false.\n+* Introduce new configuration property ``grouped-execution-enabled`` and session property ``grouped_execution`` to turn grouped execution on or off.  This property is true by default.  If set to false, it is equivalent to setting all of ``grouped-execution-for-aggregation``, ``grouped-execution-for-join``, and ``experimental.grouped-execution-for-eligible-table-scans`` to false.  In future releases we will remove these other properties and only have a single switch for enabling and disabling grouped execution.\n+* Reverting Reliable Resource Group Versioning.\n+* Specify allowed roles for HTTP endpoints.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc4NjY1Ng=="}, "originalCommit": {"oid": "df474ca8a7e076fea0234290c66fe6c46c2fa4c7"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MjkxNDQ5OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxODozMDo0M1rOG4ZRGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxODozMDo0M1rOG4ZRGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc4NzQxOA==", "bodyText": "Something like\nFix a bug where the UI for the worker's thread snapshot wouldn't display the stack trace.\nAlso, should be in a separate Web UI section.", "url": "https://github.com/prestodb/presto/pull/14908#discussion_r461787418", "createdAt": "2020-07-28T18:30:43Z", "author": {"login": "rschlussel"}, "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "diffHunk": "@@ -0,0 +1,51 @@\n+=============\n+Release 0.239\n+=============\n+\n+General Changes\n+_______________\n+* Fix  :func:`classification_miss_rate` and :func:`classification_fall_out` functions (:pr:`14740`).\n+* Fix NPE in `/v1/thread` end point.\n+* Fix an issue where the property ``ignore_stats_calculator_failures`` would not be honored for certain queries that had filters pushed down to the table scan.\n+* Fix missing query completion events for queries which fail prior to dispatching.\n+* Fix potential infinite loop when the setting ``use_legacy_scheduler`` is set to false.\n+* Add aggregation function SET_UNION.\n+* Add local disk spilling support for `ORDER BY` syntax.\n+* Add local disk spilling support for aggregation functions with `ORDER BY` or `DISTINCT` syntax.\n+* Add optimization for cursor projection & filter by extract and compute common subexpressions among all projections & filter first. This optimization can be turned off by session property ``optimize_common_sub_expressions``.\n+* Add support for 2 security modes for views. The default `DEFINER` security mode is the same as the previous behavior. Tables referenced in the view are accessed using the permissions of the view owner (the **creator** or.\n+* Add support for warning on unfiltered partition keys using `partition-keys-to-warn-on-no-filtering` system property.\n+* Add support to optimize min/max only metadata query. This is controlled by existing config ``optimizer.optimize-metadata-queries`` and session property ``optimize_metadata_queries``. Note that enabling this config/session property might change query result if there are metadata that refers to empty data, e.g. empty hive partition.\n+* Remove experimental feature to perform grouped execution for eligible table scans and its associated configuration property ``experimental.grouped-execution-for-elligible-table-scans`` and session property ``grouped_execution_for_eligible_table_scans``.\n+* Definer** of the view) rather than the user executing the query. In the `INVOKER` security mode, tables referenced in the view are accessed using the permissions of the query user (the **invoker** of the view).\n+* Enable ``dynamic-schedule-for-grouped-execution`` by default.  In future releases, we will remove this property, and grouped execution will always use dynamic scheduling.\n+* Enable ``grouped-execution-for-aggregation`` and ``experimental.grouped-execution-for-eligible-table-scans`` by default.\n+* Enable async page transport with non-blocking IO by default. This can be disabled by setting ``exchange.async-page-transport-enabled`` configuration property to false.\n+* Introduce new configuration property ``grouped-execution-enabled`` and session property ``grouped_execution`` to turn grouped execution on or off.  This property is true by default.  If set to false, it is equivalent to setting all of ``grouped-execution-for-aggregation``, ``grouped-execution-for-join``, and ``experimental.grouped-execution-for-eligible-table-scans`` to false.  In future releases we will remove these other properties and only have a single switch for enabling and disabling grouped execution.\n+* Reverting Reliable Resource Group Versioning.\n+* Specify allowed roles for HTTP endpoints.\n+* The worker page's thread snapshot UI does not work (no stack trace displayed on click) when there is active query load (tested under Chrome). This patch fixes an uninitialized variable in client JS that was causing this UI behavior.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df474ca8a7e076fea0234290c66fe6c46c2fa4c7"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MjkyNjExOnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxODozMzo0NlrOG4ZYQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMDo0MTozMlrOG4eBvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc4OTI0OA==", "bodyText": "We should add a release note for encryption at rest @mayankgarg1990\n\nAdd support for reading and writing DWRF files with encryption.  To create a table with encrypted columns....", "url": "https://github.com/prestodb/presto/pull/14908#discussion_r461789248", "createdAt": "2020-07-28T18:33:46Z", "author": {"login": "rschlussel"}, "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "diffHunk": "@@ -0,0 +1,51 @@\n+=============\n+Release 0.239\n+=============\n+\n+General Changes\n+_______________\n+* Fix  :func:`classification_miss_rate` and :func:`classification_fall_out` functions (:pr:`14740`).\n+* Fix NPE in `/v1/thread` end point.\n+* Fix an issue where the property ``ignore_stats_calculator_failures`` would not be honored for certain queries that had filters pushed down to the table scan.\n+* Fix missing query completion events for queries which fail prior to dispatching.\n+* Fix potential infinite loop when the setting ``use_legacy_scheduler`` is set to false.\n+* Add aggregation function SET_UNION.\n+* Add local disk spilling support for `ORDER BY` syntax.\n+* Add local disk spilling support for aggregation functions with `ORDER BY` or `DISTINCT` syntax.\n+* Add optimization for cursor projection & filter by extract and compute common subexpressions among all projections & filter first. This optimization can be turned off by session property ``optimize_common_sub_expressions``.\n+* Add support for 2 security modes for views. The default `DEFINER` security mode is the same as the previous behavior. Tables referenced in the view are accessed using the permissions of the view owner (the **creator** or.\n+* Add support for warning on unfiltered partition keys using `partition-keys-to-warn-on-no-filtering` system property.\n+* Add support to optimize min/max only metadata query. This is controlled by existing config ``optimizer.optimize-metadata-queries`` and session property ``optimize_metadata_queries``. Note that enabling this config/session property might change query result if there are metadata that refers to empty data, e.g. empty hive partition.\n+* Remove experimental feature to perform grouped execution for eligible table scans and its associated configuration property ``experimental.grouped-execution-for-elligible-table-scans`` and session property ``grouped_execution_for_eligible_table_scans``.\n+* Definer** of the view) rather than the user executing the query. In the `INVOKER` security mode, tables referenced in the view are accessed using the permissions of the query user (the **invoker** of the view).\n+* Enable ``dynamic-schedule-for-grouped-execution`` by default.  In future releases, we will remove this property, and grouped execution will always use dynamic scheduling.\n+* Enable ``grouped-execution-for-aggregation`` and ``experimental.grouped-execution-for-eligible-table-scans`` by default.\n+* Enable async page transport with non-blocking IO by default. This can be disabled by setting ``exchange.async-page-transport-enabled`` configuration property to false.\n+* Introduce new configuration property ``grouped-execution-enabled`` and session property ``grouped_execution`` to turn grouped execution on or off.  This property is true by default.  If set to false, it is equivalent to setting all of ``grouped-execution-for-aggregation``, ``grouped-execution-for-join``, and ``experimental.grouped-execution-for-eligible-table-scans`` to false.  In future releases we will remove these other properties and only have a single switch for enabling and disabling grouped execution.\n+* Reverting Reliable Resource Group Versioning.\n+* Specify allowed roles for HTTP endpoints.\n+* The worker page's thread snapshot UI does not work (no stack trace displayed on click) when there is active query load (tested under Chrome). This patch fixes an uninitialized variable in client JS that was causing this UI behavior.\n+* Update JTS to 1.17.0. This changes the implementation of ST_Buffer: the output might change by a small (1e-10) amount.\n+\n+SPI Changes\n+___________\n+* Move `DistinctLimitNode` to `presto-spi` module for connectors to push down.\n+\n+Elasticsearch Changes\n+_____________________\n+* Add configurations to improve concurrency in Elasticsearch.\n+* Support Elasticsearch numeric keyword.\n+* Support composite publish_address in Elasticsearch.\n+\n+Hive Changes\n+____________\n+* Add support for caching the Glue metastore.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df474ca8a7e076fea0234290c66fe6c46c2fa4c7"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg2NTQwNA==", "bodyText": "Given that encryption cannot be used readily and neither do we have a user guide for how to set it up - my opinion is that we don't publish it in the release notes.", "url": "https://github.com/prestodb/presto/pull/14908#discussion_r461865404", "createdAt": "2020-07-28T20:41:32Z", "author": {"login": "mayankgarg1990"}, "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "diffHunk": "@@ -0,0 +1,51 @@\n+=============\n+Release 0.239\n+=============\n+\n+General Changes\n+_______________\n+* Fix  :func:`classification_miss_rate` and :func:`classification_fall_out` functions (:pr:`14740`).\n+* Fix NPE in `/v1/thread` end point.\n+* Fix an issue where the property ``ignore_stats_calculator_failures`` would not be honored for certain queries that had filters pushed down to the table scan.\n+* Fix missing query completion events for queries which fail prior to dispatching.\n+* Fix potential infinite loop when the setting ``use_legacy_scheduler`` is set to false.\n+* Add aggregation function SET_UNION.\n+* Add local disk spilling support for `ORDER BY` syntax.\n+* Add local disk spilling support for aggregation functions with `ORDER BY` or `DISTINCT` syntax.\n+* Add optimization for cursor projection & filter by extract and compute common subexpressions among all projections & filter first. This optimization can be turned off by session property ``optimize_common_sub_expressions``.\n+* Add support for 2 security modes for views. The default `DEFINER` security mode is the same as the previous behavior. Tables referenced in the view are accessed using the permissions of the view owner (the **creator** or.\n+* Add support for warning on unfiltered partition keys using `partition-keys-to-warn-on-no-filtering` system property.\n+* Add support to optimize min/max only metadata query. This is controlled by existing config ``optimizer.optimize-metadata-queries`` and session property ``optimize_metadata_queries``. Note that enabling this config/session property might change query result if there are metadata that refers to empty data, e.g. empty hive partition.\n+* Remove experimental feature to perform grouped execution for eligible table scans and its associated configuration property ``experimental.grouped-execution-for-elligible-table-scans`` and session property ``grouped_execution_for_eligible_table_scans``.\n+* Definer** of the view) rather than the user executing the query. In the `INVOKER` security mode, tables referenced in the view are accessed using the permissions of the query user (the **invoker** of the view).\n+* Enable ``dynamic-schedule-for-grouped-execution`` by default.  In future releases, we will remove this property, and grouped execution will always use dynamic scheduling.\n+* Enable ``grouped-execution-for-aggregation`` and ``experimental.grouped-execution-for-eligible-table-scans`` by default.\n+* Enable async page transport with non-blocking IO by default. This can be disabled by setting ``exchange.async-page-transport-enabled`` configuration property to false.\n+* Introduce new configuration property ``grouped-execution-enabled`` and session property ``grouped_execution`` to turn grouped execution on or off.  This property is true by default.  If set to false, it is equivalent to setting all of ``grouped-execution-for-aggregation``, ``grouped-execution-for-join``, and ``experimental.grouped-execution-for-eligible-table-scans`` to false.  In future releases we will remove these other properties and only have a single switch for enabling and disabling grouped execution.\n+* Reverting Reliable Resource Group Versioning.\n+* Specify allowed roles for HTTP endpoints.\n+* The worker page's thread snapshot UI does not work (no stack trace displayed on click) when there is active query load (tested under Chrome). This patch fixes an uninitialized variable in client JS that was causing this UI behavior.\n+* Update JTS to 1.17.0. This changes the implementation of ST_Buffer: the output might change by a small (1e-10) amount.\n+\n+SPI Changes\n+___________\n+* Move `DistinctLimitNode` to `presto-spi` module for connectors to push down.\n+\n+Elasticsearch Changes\n+_____________________\n+* Add configurations to improve concurrency in Elasticsearch.\n+* Support Elasticsearch numeric keyword.\n+* Support composite publish_address in Elasticsearch.\n+\n+Hive Changes\n+____________\n+* Add support for caching the Glue metastore.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc4OTI0OA=="}, "originalCommit": {"oid": "df474ca8a7e076fea0234290c66fe6c46c2fa4c7"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MjkzNDYzOnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxODozNjoxMVrOG4Zduw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMDo1Nzo0OVrOG4elBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc5MDY1MQ==", "bodyText": "also, can this be moved above the previous note so that all the grouped execution property changes are next to each other.", "url": "https://github.com/prestodb/presto/pull/14908#discussion_r461790651", "createdAt": "2020-07-28T18:36:11Z", "author": {"login": "rschlussel"}, "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "diffHunk": "@@ -0,0 +1,51 @@\n+=============\n+Release 0.239\n+=============\n+\n+General Changes\n+_______________\n+* Fix  :func:`classification_miss_rate` and :func:`classification_fall_out` functions (:pr:`14740`).\n+* Fix NPE in `/v1/thread` end point.\n+* Fix an issue where the property ``ignore_stats_calculator_failures`` would not be honored for certain queries that had filters pushed down to the table scan.\n+* Fix missing query completion events for queries which fail prior to dispatching.\n+* Fix potential infinite loop when the setting ``use_legacy_scheduler`` is set to false.\n+* Add aggregation function SET_UNION.\n+* Add local disk spilling support for `ORDER BY` syntax.\n+* Add local disk spilling support for aggregation functions with `ORDER BY` or `DISTINCT` syntax.\n+* Add optimization for cursor projection & filter by extract and compute common subexpressions among all projections & filter first. This optimization can be turned off by session property ``optimize_common_sub_expressions``.\n+* Add support for 2 security modes for views. The default `DEFINER` security mode is the same as the previous behavior. Tables referenced in the view are accessed using the permissions of the view owner (the **creator** or.\n+* Add support for warning on unfiltered partition keys using `partition-keys-to-warn-on-no-filtering` system property.\n+* Add support to optimize min/max only metadata query. This is controlled by existing config ``optimizer.optimize-metadata-queries`` and session property ``optimize_metadata_queries``. Note that enabling this config/session property might change query result if there are metadata that refers to empty data, e.g. empty hive partition.\n+* Remove experimental feature to perform grouped execution for eligible table scans and its associated configuration property ``experimental.grouped-execution-for-elligible-table-scans`` and session property ``grouped_execution_for_eligible_table_scans``.\n+* Definer** of the view) rather than the user executing the query. In the `INVOKER` security mode, tables referenced in the view are accessed using the permissions of the query user (the **invoker** of the view).\n+* Enable ``dynamic-schedule-for-grouped-execution`` by default.  In future releases, we will remove this property, and grouped execution will always use dynamic scheduling.\n+* Enable ``grouped-execution-for-aggregation`` and ``experimental.grouped-execution-for-eligible-table-scans`` by default.\n+* Enable async page transport with non-blocking IO by default. This can be disabled by setting ``exchange.async-page-transport-enabled`` configuration property to false.\n+* Introduce new configuration property ``grouped-execution-enabled`` and session property ``grouped_execution`` to turn grouped execution on or off.  This property is true by default.  If set to false, it is equivalent to setting all of ``grouped-execution-for-aggregation``, ``grouped-execution-for-join``, and ``experimental.grouped-execution-for-eligible-table-scans`` to false.  In future releases we will remove these other properties and only have a single switch for enabling and disabling grouped execution.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df474ca8a7e076fea0234290c66fe6c46c2fa4c7"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg3NDQzOA==", "bodyText": "I have done some overall re-formatting - will let you review the final version.", "url": "https://github.com/prestodb/presto/pull/14908#discussion_r461874438", "createdAt": "2020-07-28T20:57:49Z", "author": {"login": "mayankgarg1990"}, "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "diffHunk": "@@ -0,0 +1,51 @@\n+=============\n+Release 0.239\n+=============\n+\n+General Changes\n+_______________\n+* Fix  :func:`classification_miss_rate` and :func:`classification_fall_out` functions (:pr:`14740`).\n+* Fix NPE in `/v1/thread` end point.\n+* Fix an issue where the property ``ignore_stats_calculator_failures`` would not be honored for certain queries that had filters pushed down to the table scan.\n+* Fix missing query completion events for queries which fail prior to dispatching.\n+* Fix potential infinite loop when the setting ``use_legacy_scheduler`` is set to false.\n+* Add aggregation function SET_UNION.\n+* Add local disk spilling support for `ORDER BY` syntax.\n+* Add local disk spilling support for aggregation functions with `ORDER BY` or `DISTINCT` syntax.\n+* Add optimization for cursor projection & filter by extract and compute common subexpressions among all projections & filter first. This optimization can be turned off by session property ``optimize_common_sub_expressions``.\n+* Add support for 2 security modes for views. The default `DEFINER` security mode is the same as the previous behavior. Tables referenced in the view are accessed using the permissions of the view owner (the **creator** or.\n+* Add support for warning on unfiltered partition keys using `partition-keys-to-warn-on-no-filtering` system property.\n+* Add support to optimize min/max only metadata query. This is controlled by existing config ``optimizer.optimize-metadata-queries`` and session property ``optimize_metadata_queries``. Note that enabling this config/session property might change query result if there are metadata that refers to empty data, e.g. empty hive partition.\n+* Remove experimental feature to perform grouped execution for eligible table scans and its associated configuration property ``experimental.grouped-execution-for-elligible-table-scans`` and session property ``grouped_execution_for_eligible_table_scans``.\n+* Definer** of the view) rather than the user executing the query. In the `INVOKER` security mode, tables referenced in the view are accessed using the permissions of the query user (the **invoker** of the view).\n+* Enable ``dynamic-schedule-for-grouped-execution`` by default.  In future releases, we will remove this property, and grouped execution will always use dynamic scheduling.\n+* Enable ``grouped-execution-for-aggregation`` and ``experimental.grouped-execution-for-eligible-table-scans`` by default.\n+* Enable async page transport with non-blocking IO by default. This can be disabled by setting ``exchange.async-page-transport-enabled`` configuration property to false.\n+* Introduce new configuration property ``grouped-execution-enabled`` and session property ``grouped_execution`` to turn grouped execution on or off.  This property is true by default.  If set to false, it is equivalent to setting all of ``grouped-execution-for-aggregation``, ``grouped-execution-for-join``, and ``experimental.grouped-execution-for-eligible-table-scans`` to false.  In future releases we will remove these other properties and only have a single switch for enabling and disabling grouped execution.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc5MDY1MQ=="}, "originalCommit": {"oid": "df474ca8a7e076fea0234290c66fe6c46c2fa4c7"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4Mzc0NDc5OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMjowNDo1MFrOG4hE2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMjowNDo1MFrOG4hE2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkxNTM1Mg==", "bodyText": "just realized the property is called grouped-execution-for-aggregation-enabled.", "url": "https://github.com/prestodb/presto/pull/14908#discussion_r461915352", "createdAt": "2020-07-28T22:04:50Z", "author": {"login": "rschlussel"}, "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "diffHunk": "@@ -0,0 +1,73 @@\n+=============\n+Release 0.239\n+=============\n+\n+**Highlights**\n+==============\n+* Add support for ``DEFINER`` and ``INVOKER`` view security models.\n+* Add support for caching Glue metastore in Hive connector.\n+* Add Pinot SQL endpoint support.\n+\n+General Changes\n+_______________\n+* Fix :func:`classification_miss_rate` and :func:`classification_fall_out` (:pr:`14740`).\n+* Fix ``NullPointerException`` in ``/v1/thread`` end point.\n+* Fix an issue where the property ``ignore_stats_calculator_failures`` would not be honored\n+  for certain queries that had filters pushed down to the table scan.\n+* Fix missing query completion events for queries which fail prior to dispatching.\n+* Fix potential infinite loop when the setting ``use_legacy_scheduler`` is set to ``false``.\n+* Optimize cursor projection and filter by extracting and computing common subexpressions\n+  among all projections and filter first. This can be disabled by the session property\n+  ``optimize_common_sub_expressions``.\n+* Add aggregation function :func:`set_union`.\n+* Add local disk spilling support for queries with ``ORDER BY`` or ``DISTINCT``.\n+* Add support to optimize min/max only metadata query. This is controlled by configuration\n+  property ``optimizer.optimize-metadata-queries`` and session property ``optimize_metadata_queries``.\n+  Note: Enabling this optimization might change query result if there are metadata that refers to\n+  empty data, see :pr:`14845` for examples.\n+* Add new unified grouped execution configuration property ``grouped-execution-enabled`` and\n+  session property ``grouped_execution`` with default set to ``true`` (:pr:`14886`).\n+* Remove experimental feature to perform grouped execution for eligible table scans and its\n+  associated configuration property ``experimental.grouped-execution-for-eligible-table-scans``\n+  and session property ``grouped_execution_for_eligible_table_scans``.\n+* Enable ``dynamic-schedule-for-grouped-execution`` by default.  This property will be removed\n+  in a future release.\n+* Enable ``grouped-execution-for-aggregation`` by default.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "855901d3b0281c526507198e1bcecd00ebee9ac1"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4Mzc1Mjc0OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMjowNjoxNlrOG4hJZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMzoxODo1M1rOG65LFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkxNjUxOA==", "bodyText": "Can you also mention here that grouped-execution-for-aggregation-enabled and grouped-execution-for-join-enabled will be removed in a future release.", "url": "https://github.com/prestodb/presto/pull/14908#discussion_r461916518", "createdAt": "2020-07-28T22:06:16Z", "author": {"login": "rschlussel"}, "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "diffHunk": "@@ -0,0 +1,73 @@\n+=============\n+Release 0.239\n+=============\n+\n+**Highlights**\n+==============\n+* Add support for ``DEFINER`` and ``INVOKER`` view security models.\n+* Add support for caching Glue metastore in Hive connector.\n+* Add Pinot SQL endpoint support.\n+\n+General Changes\n+_______________\n+* Fix :func:`classification_miss_rate` and :func:`classification_fall_out` (:pr:`14740`).\n+* Fix ``NullPointerException`` in ``/v1/thread`` end point.\n+* Fix an issue where the property ``ignore_stats_calculator_failures`` would not be honored\n+  for certain queries that had filters pushed down to the table scan.\n+* Fix missing query completion events for queries which fail prior to dispatching.\n+* Fix potential infinite loop when the setting ``use_legacy_scheduler`` is set to ``false``.\n+* Optimize cursor projection and filter by extracting and computing common subexpressions\n+  among all projections and filter first. This can be disabled by the session property\n+  ``optimize_common_sub_expressions``.\n+* Add aggregation function :func:`set_union`.\n+* Add local disk spilling support for queries with ``ORDER BY`` or ``DISTINCT``.\n+* Add support to optimize min/max only metadata query. This is controlled by configuration\n+  property ``optimizer.optimize-metadata-queries`` and session property ``optimize_metadata_queries``.\n+  Note: Enabling this optimization might change query result if there are metadata that refers to\n+  empty data, see :pr:`14845` for examples.\n+* Add new unified grouped execution configuration property ``grouped-execution-enabled`` and", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "855901d3b0281c526507198e1bcecd00ebee9ac1"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQwNzMxOA==", "bodyText": "mentioned grouped-execution-for-aggregation-enabled next to the point below where I say that it is enabled by default. Added the point about join one here", "url": "https://github.com/prestodb/presto/pull/14908#discussion_r464407318", "createdAt": "2020-08-03T13:18:53Z", "author": {"login": "mayankgarg1990"}, "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "diffHunk": "@@ -0,0 +1,73 @@\n+=============\n+Release 0.239\n+=============\n+\n+**Highlights**\n+==============\n+* Add support for ``DEFINER`` and ``INVOKER`` view security models.\n+* Add support for caching Glue metastore in Hive connector.\n+* Add Pinot SQL endpoint support.\n+\n+General Changes\n+_______________\n+* Fix :func:`classification_miss_rate` and :func:`classification_fall_out` (:pr:`14740`).\n+* Fix ``NullPointerException`` in ``/v1/thread`` end point.\n+* Fix an issue where the property ``ignore_stats_calculator_failures`` would not be honored\n+  for certain queries that had filters pushed down to the table scan.\n+* Fix missing query completion events for queries which fail prior to dispatching.\n+* Fix potential infinite loop when the setting ``use_legacy_scheduler`` is set to ``false``.\n+* Optimize cursor projection and filter by extracting and computing common subexpressions\n+  among all projections and filter first. This can be disabled by the session property\n+  ``optimize_common_sub_expressions``.\n+* Add aggregation function :func:`set_union`.\n+* Add local disk spilling support for queries with ``ORDER BY`` or ``DISTINCT``.\n+* Add support to optimize min/max only metadata query. This is controlled by configuration\n+  property ``optimizer.optimize-metadata-queries`` and session property ``optimize_metadata_queries``.\n+  Note: Enabling this optimization might change query result if there are metadata that refers to\n+  empty data, see :pr:`14845` for examples.\n+* Add new unified grouped execution configuration property ``grouped-execution-enabled`` and", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkxNjUxOA=="}, "originalCommit": {"oid": "855901d3b0281c526507198e1bcecd00ebee9ac1"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4Mzc1NjAyOnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMjowNjo1OVrOG4hLig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMzoyMjo0OFrOG65Tsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkxNzA2Ng==", "bodyText": "what are the configurations?", "url": "https://github.com/prestodb/presto/pull/14908#discussion_r461917066", "createdAt": "2020-07-28T22:06:59Z", "author": {"login": "rschlussel"}, "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "diffHunk": "@@ -0,0 +1,73 @@\n+=============\n+Release 0.239\n+=============\n+\n+**Highlights**\n+==============\n+* Add support for ``DEFINER`` and ``INVOKER`` view security models.\n+* Add support for caching Glue metastore in Hive connector.\n+* Add Pinot SQL endpoint support.\n+\n+General Changes\n+_______________\n+* Fix :func:`classification_miss_rate` and :func:`classification_fall_out` (:pr:`14740`).\n+* Fix ``NullPointerException`` in ``/v1/thread`` end point.\n+* Fix an issue where the property ``ignore_stats_calculator_failures`` would not be honored\n+  for certain queries that had filters pushed down to the table scan.\n+* Fix missing query completion events for queries which fail prior to dispatching.\n+* Fix potential infinite loop when the setting ``use_legacy_scheduler`` is set to ``false``.\n+* Optimize cursor projection and filter by extracting and computing common subexpressions\n+  among all projections and filter first. This can be disabled by the session property\n+  ``optimize_common_sub_expressions``.\n+* Add aggregation function :func:`set_union`.\n+* Add local disk spilling support for queries with ``ORDER BY`` or ``DISTINCT``.\n+* Add support to optimize min/max only metadata query. This is controlled by configuration\n+  property ``optimizer.optimize-metadata-queries`` and session property ``optimize_metadata_queries``.\n+  Note: Enabling this optimization might change query result if there are metadata that refers to\n+  empty data, see :pr:`14845` for examples.\n+* Add new unified grouped execution configuration property ``grouped-execution-enabled`` and\n+  session property ``grouped_execution`` with default set to ``true`` (:pr:`14886`).\n+* Remove experimental feature to perform grouped execution for eligible table scans and its\n+  associated configuration property ``experimental.grouped-execution-for-eligible-table-scans``\n+  and session property ``grouped_execution_for_eligible_table_scans``.\n+* Enable ``dynamic-schedule-for-grouped-execution`` by default.  This property will be removed\n+  in a future release.\n+* Enable ``grouped-execution-for-aggregation`` by default.\n+* Enable async page transport with non-blocking IO for exchange by default. This can be disabled by\n+  setting the configuration property ``exchange.async-page-transport-enabled`` to ``false``.\n+\n+\n+Security Changes\n+----------------\n+* Add support for ``DEFINER`` and ``INVOKER`` view security modes. While querying a view the former\n+  uses the permissions of the view owner and the latter uses the query runner's permissions.\n+  See :doc:`/sql/create-view`.\n+\n+JDBC Changes\n+____________\n+* Implemented ``DatabaseMetaData#getClientInfoProperties`` API.\n+\n+Web UI Changes\n+--------------\n+*  Fix a bug where the UI for the worker's thread snapshot wouldn't display the stack trace.\n+\n+Hive Changes\n+____________\n+* Add support for caching the Glue metastore.\n+* Add support for warning on unfiltered partition keys. This can be enabled using the configuration\n+  property ``partition-keys-to-warn-on-no-filtering``.\n+\n+Elasticsearch Changes\n+_____________________\n+* Add configurations to improve concurrency.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "855901d3b0281c526507198e1bcecd00ebee9ac1"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkyNzgwOA==", "bodyText": "elasticsearch.max-http-connections : Maximum number of persistent HTTP connections to Elasticsearch.\nelasticsearch.http-thread-count : Number of threads handling HTTP connections to Elasticsearch", "url": "https://github.com/prestodb/presto/pull/14908#discussion_r461927808", "createdAt": "2020-07-28T22:24:35Z", "author": {"login": "zhenxiao"}, "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "diffHunk": "@@ -0,0 +1,73 @@\n+=============\n+Release 0.239\n+=============\n+\n+**Highlights**\n+==============\n+* Add support for ``DEFINER`` and ``INVOKER`` view security models.\n+* Add support for caching Glue metastore in Hive connector.\n+* Add Pinot SQL endpoint support.\n+\n+General Changes\n+_______________\n+* Fix :func:`classification_miss_rate` and :func:`classification_fall_out` (:pr:`14740`).\n+* Fix ``NullPointerException`` in ``/v1/thread`` end point.\n+* Fix an issue where the property ``ignore_stats_calculator_failures`` would not be honored\n+  for certain queries that had filters pushed down to the table scan.\n+* Fix missing query completion events for queries which fail prior to dispatching.\n+* Fix potential infinite loop when the setting ``use_legacy_scheduler`` is set to ``false``.\n+* Optimize cursor projection and filter by extracting and computing common subexpressions\n+  among all projections and filter first. This can be disabled by the session property\n+  ``optimize_common_sub_expressions``.\n+* Add aggregation function :func:`set_union`.\n+* Add local disk spilling support for queries with ``ORDER BY`` or ``DISTINCT``.\n+* Add support to optimize min/max only metadata query. This is controlled by configuration\n+  property ``optimizer.optimize-metadata-queries`` and session property ``optimize_metadata_queries``.\n+  Note: Enabling this optimization might change query result if there are metadata that refers to\n+  empty data, see :pr:`14845` for examples.\n+* Add new unified grouped execution configuration property ``grouped-execution-enabled`` and\n+  session property ``grouped_execution`` with default set to ``true`` (:pr:`14886`).\n+* Remove experimental feature to perform grouped execution for eligible table scans and its\n+  associated configuration property ``experimental.grouped-execution-for-eligible-table-scans``\n+  and session property ``grouped_execution_for_eligible_table_scans``.\n+* Enable ``dynamic-schedule-for-grouped-execution`` by default.  This property will be removed\n+  in a future release.\n+* Enable ``grouped-execution-for-aggregation`` by default.\n+* Enable async page transport with non-blocking IO for exchange by default. This can be disabled by\n+  setting the configuration property ``exchange.async-page-transport-enabled`` to ``false``.\n+\n+\n+Security Changes\n+----------------\n+* Add support for ``DEFINER`` and ``INVOKER`` view security modes. While querying a view the former\n+  uses the permissions of the view owner and the latter uses the query runner's permissions.\n+  See :doc:`/sql/create-view`.\n+\n+JDBC Changes\n+____________\n+* Implemented ``DatabaseMetaData#getClientInfoProperties`` API.\n+\n+Web UI Changes\n+--------------\n+*  Fix a bug where the UI for the worker's thread snapshot wouldn't display the stack trace.\n+\n+Hive Changes\n+____________\n+* Add support for caching the Glue metastore.\n+* Add support for warning on unfiltered partition keys. This can be enabled using the configuration\n+  property ``partition-keys-to-warn-on-no-filtering``.\n+\n+Elasticsearch Changes\n+_____________________\n+* Add configurations to improve concurrency.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkxNzA2Ng=="}, "originalCommit": {"oid": "855901d3b0281c526507198e1bcecd00ebee9ac1"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQwOTUyMg==", "bodyText": "added the detailed configuration information", "url": "https://github.com/prestodb/presto/pull/14908#discussion_r464409522", "createdAt": "2020-08-03T13:22:48Z", "author": {"login": "mayankgarg1990"}, "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "diffHunk": "@@ -0,0 +1,73 @@\n+=============\n+Release 0.239\n+=============\n+\n+**Highlights**\n+==============\n+* Add support for ``DEFINER`` and ``INVOKER`` view security models.\n+* Add support for caching Glue metastore in Hive connector.\n+* Add Pinot SQL endpoint support.\n+\n+General Changes\n+_______________\n+* Fix :func:`classification_miss_rate` and :func:`classification_fall_out` (:pr:`14740`).\n+* Fix ``NullPointerException`` in ``/v1/thread`` end point.\n+* Fix an issue where the property ``ignore_stats_calculator_failures`` would not be honored\n+  for certain queries that had filters pushed down to the table scan.\n+* Fix missing query completion events for queries which fail prior to dispatching.\n+* Fix potential infinite loop when the setting ``use_legacy_scheduler`` is set to ``false``.\n+* Optimize cursor projection and filter by extracting and computing common subexpressions\n+  among all projections and filter first. This can be disabled by the session property\n+  ``optimize_common_sub_expressions``.\n+* Add aggregation function :func:`set_union`.\n+* Add local disk spilling support for queries with ``ORDER BY`` or ``DISTINCT``.\n+* Add support to optimize min/max only metadata query. This is controlled by configuration\n+  property ``optimizer.optimize-metadata-queries`` and session property ``optimize_metadata_queries``.\n+  Note: Enabling this optimization might change query result if there are metadata that refers to\n+  empty data, see :pr:`14845` for examples.\n+* Add new unified grouped execution configuration property ``grouped-execution-enabled`` and\n+  session property ``grouped_execution`` with default set to ``true`` (:pr:`14886`).\n+* Remove experimental feature to perform grouped execution for eligible table scans and its\n+  associated configuration property ``experimental.grouped-execution-for-eligible-table-scans``\n+  and session property ``grouped_execution_for_eligible_table_scans``.\n+* Enable ``dynamic-schedule-for-grouped-execution`` by default.  This property will be removed\n+  in a future release.\n+* Enable ``grouped-execution-for-aggregation`` by default.\n+* Enable async page transport with non-blocking IO for exchange by default. This can be disabled by\n+  setting the configuration property ``exchange.async-page-transport-enabled`` to ``false``.\n+\n+\n+Security Changes\n+----------------\n+* Add support for ``DEFINER`` and ``INVOKER`` view security modes. While querying a view the former\n+  uses the permissions of the view owner and the latter uses the query runner's permissions.\n+  See :doc:`/sql/create-view`.\n+\n+JDBC Changes\n+____________\n+* Implemented ``DatabaseMetaData#getClientInfoProperties`` API.\n+\n+Web UI Changes\n+--------------\n+*  Fix a bug where the UI for the worker's thread snapshot wouldn't display the stack trace.\n+\n+Hive Changes\n+____________\n+* Add support for caching the Glue metastore.\n+* Add support for warning on unfiltered partition keys. This can be enabled using the configuration\n+  property ``partition-keys-to-warn-on-no-filtering``.\n+\n+Elasticsearch Changes\n+_____________________\n+* Add configurations to improve concurrency.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkxNzA2Ng=="}, "originalCommit": {"oid": "855901d3b0281c526507198e1bcecd00ebee9ac1"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4Mzc1OTY2OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMjowNzo0NFrOG4hNjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMzoyNjo1MFrOG65c6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkxNzU4Mw==", "bodyText": "what's a composite publish_address? (maybe this is just because I don't know elasticsearch)", "url": "https://github.com/prestodb/presto/pull/14908#discussion_r461917583", "createdAt": "2020-07-28T22:07:44Z", "author": {"login": "rschlussel"}, "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "diffHunk": "@@ -0,0 +1,73 @@\n+=============\n+Release 0.239\n+=============\n+\n+**Highlights**\n+==============\n+* Add support for ``DEFINER`` and ``INVOKER`` view security models.\n+* Add support for caching Glue metastore in Hive connector.\n+* Add Pinot SQL endpoint support.\n+\n+General Changes\n+_______________\n+* Fix :func:`classification_miss_rate` and :func:`classification_fall_out` (:pr:`14740`).\n+* Fix ``NullPointerException`` in ``/v1/thread`` end point.\n+* Fix an issue where the property ``ignore_stats_calculator_failures`` would not be honored\n+  for certain queries that had filters pushed down to the table scan.\n+* Fix missing query completion events for queries which fail prior to dispatching.\n+* Fix potential infinite loop when the setting ``use_legacy_scheduler`` is set to ``false``.\n+* Optimize cursor projection and filter by extracting and computing common subexpressions\n+  among all projections and filter first. This can be disabled by the session property\n+  ``optimize_common_sub_expressions``.\n+* Add aggregation function :func:`set_union`.\n+* Add local disk spilling support for queries with ``ORDER BY`` or ``DISTINCT``.\n+* Add support to optimize min/max only metadata query. This is controlled by configuration\n+  property ``optimizer.optimize-metadata-queries`` and session property ``optimize_metadata_queries``.\n+  Note: Enabling this optimization might change query result if there are metadata that refers to\n+  empty data, see :pr:`14845` for examples.\n+* Add new unified grouped execution configuration property ``grouped-execution-enabled`` and\n+  session property ``grouped_execution`` with default set to ``true`` (:pr:`14886`).\n+* Remove experimental feature to perform grouped execution for eligible table scans and its\n+  associated configuration property ``experimental.grouped-execution-for-eligible-table-scans``\n+  and session property ``grouped_execution_for_eligible_table_scans``.\n+* Enable ``dynamic-schedule-for-grouped-execution`` by default.  This property will be removed\n+  in a future release.\n+* Enable ``grouped-execution-for-aggregation`` by default.\n+* Enable async page transport with non-blocking IO for exchange by default. This can be disabled by\n+  setting the configuration property ``exchange.async-page-transport-enabled`` to ``false``.\n+\n+\n+Security Changes\n+----------------\n+* Add support for ``DEFINER`` and ``INVOKER`` view security modes. While querying a view the former\n+  uses the permissions of the view owner and the latter uses the query runner's permissions.\n+  See :doc:`/sql/create-view`.\n+\n+JDBC Changes\n+____________\n+* Implemented ``DatabaseMetaData#getClientInfoProperties`` API.\n+\n+Web UI Changes\n+--------------\n+*  Fix a bug where the UI for the worker's thread snapshot wouldn't display the stack trace.\n+\n+Hive Changes\n+____________\n+* Add support for caching the Glue metastore.\n+* Add support for warning on unfiltered partition keys. This can be enabled using the configuration\n+  property ``partition-keys-to-warn-on-no-filtering``.\n+\n+Elasticsearch Changes\n+_____________________\n+* Add configurations to improve concurrency.\n+* Add support for numeric keyword.\n+* Add support for composite publish_address.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "855901d3b0281c526507198e1bcecd00ebee9ac1"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkyODM3MQ==", "bodyText": "publish_address field can contain addresses of the following form:\ncname/ip:port\nip:port\n\nIf the CNAME is present, elasticsearch connector will use the CNAME and port.\nOtherwise, it will use the IP and port.", "url": "https://github.com/prestodb/presto/pull/14908#discussion_r461928371", "createdAt": "2020-07-28T22:26:02Z", "author": {"login": "zhenxiao"}, "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "diffHunk": "@@ -0,0 +1,73 @@\n+=============\n+Release 0.239\n+=============\n+\n+**Highlights**\n+==============\n+* Add support for ``DEFINER`` and ``INVOKER`` view security models.\n+* Add support for caching Glue metastore in Hive connector.\n+* Add Pinot SQL endpoint support.\n+\n+General Changes\n+_______________\n+* Fix :func:`classification_miss_rate` and :func:`classification_fall_out` (:pr:`14740`).\n+* Fix ``NullPointerException`` in ``/v1/thread`` end point.\n+* Fix an issue where the property ``ignore_stats_calculator_failures`` would not be honored\n+  for certain queries that had filters pushed down to the table scan.\n+* Fix missing query completion events for queries which fail prior to dispatching.\n+* Fix potential infinite loop when the setting ``use_legacy_scheduler`` is set to ``false``.\n+* Optimize cursor projection and filter by extracting and computing common subexpressions\n+  among all projections and filter first. This can be disabled by the session property\n+  ``optimize_common_sub_expressions``.\n+* Add aggregation function :func:`set_union`.\n+* Add local disk spilling support for queries with ``ORDER BY`` or ``DISTINCT``.\n+* Add support to optimize min/max only metadata query. This is controlled by configuration\n+  property ``optimizer.optimize-metadata-queries`` and session property ``optimize_metadata_queries``.\n+  Note: Enabling this optimization might change query result if there are metadata that refers to\n+  empty data, see :pr:`14845` for examples.\n+* Add new unified grouped execution configuration property ``grouped-execution-enabled`` and\n+  session property ``grouped_execution`` with default set to ``true`` (:pr:`14886`).\n+* Remove experimental feature to perform grouped execution for eligible table scans and its\n+  associated configuration property ``experimental.grouped-execution-for-eligible-table-scans``\n+  and session property ``grouped_execution_for_eligible_table_scans``.\n+* Enable ``dynamic-schedule-for-grouped-execution`` by default.  This property will be removed\n+  in a future release.\n+* Enable ``grouped-execution-for-aggregation`` by default.\n+* Enable async page transport with non-blocking IO for exchange by default. This can be disabled by\n+  setting the configuration property ``exchange.async-page-transport-enabled`` to ``false``.\n+\n+\n+Security Changes\n+----------------\n+* Add support for ``DEFINER`` and ``INVOKER`` view security modes. While querying a view the former\n+  uses the permissions of the view owner and the latter uses the query runner's permissions.\n+  See :doc:`/sql/create-view`.\n+\n+JDBC Changes\n+____________\n+* Implemented ``DatabaseMetaData#getClientInfoProperties`` API.\n+\n+Web UI Changes\n+--------------\n+*  Fix a bug where the UI for the worker's thread snapshot wouldn't display the stack trace.\n+\n+Hive Changes\n+____________\n+* Add support for caching the Glue metastore.\n+* Add support for warning on unfiltered partition keys. This can be enabled using the configuration\n+  property ``partition-keys-to-warn-on-no-filtering``.\n+\n+Elasticsearch Changes\n+_____________________\n+* Add configurations to improve concurrency.\n+* Add support for numeric keyword.\n+* Add support for composite publish_address.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkxNzU4Mw=="}, "originalCommit": {"oid": "855901d3b0281c526507198e1bcecd00ebee9ac1"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQxMTg4Mw==", "bodyText": "Updated publish_address to be back quoted and also linked to the PR for context", "url": "https://github.com/prestodb/presto/pull/14908#discussion_r464411883", "createdAt": "2020-08-03T13:26:50Z", "author": {"login": "mayankgarg1990"}, "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "diffHunk": "@@ -0,0 +1,73 @@\n+=============\n+Release 0.239\n+=============\n+\n+**Highlights**\n+==============\n+* Add support for ``DEFINER`` and ``INVOKER`` view security models.\n+* Add support for caching Glue metastore in Hive connector.\n+* Add Pinot SQL endpoint support.\n+\n+General Changes\n+_______________\n+* Fix :func:`classification_miss_rate` and :func:`classification_fall_out` (:pr:`14740`).\n+* Fix ``NullPointerException`` in ``/v1/thread`` end point.\n+* Fix an issue where the property ``ignore_stats_calculator_failures`` would not be honored\n+  for certain queries that had filters pushed down to the table scan.\n+* Fix missing query completion events for queries which fail prior to dispatching.\n+* Fix potential infinite loop when the setting ``use_legacy_scheduler`` is set to ``false``.\n+* Optimize cursor projection and filter by extracting and computing common subexpressions\n+  among all projections and filter first. This can be disabled by the session property\n+  ``optimize_common_sub_expressions``.\n+* Add aggregation function :func:`set_union`.\n+* Add local disk spilling support for queries with ``ORDER BY`` or ``DISTINCT``.\n+* Add support to optimize min/max only metadata query. This is controlled by configuration\n+  property ``optimizer.optimize-metadata-queries`` and session property ``optimize_metadata_queries``.\n+  Note: Enabling this optimization might change query result if there are metadata that refers to\n+  empty data, see :pr:`14845` for examples.\n+* Add new unified grouped execution configuration property ``grouped-execution-enabled`` and\n+  session property ``grouped_execution`` with default set to ``true`` (:pr:`14886`).\n+* Remove experimental feature to perform grouped execution for eligible table scans and its\n+  associated configuration property ``experimental.grouped-execution-for-eligible-table-scans``\n+  and session property ``grouped_execution_for_eligible_table_scans``.\n+* Enable ``dynamic-schedule-for-grouped-execution`` by default.  This property will be removed\n+  in a future release.\n+* Enable ``grouped-execution-for-aggregation`` by default.\n+* Enable async page transport with non-blocking IO for exchange by default. This can be disabled by\n+  setting the configuration property ``exchange.async-page-transport-enabled`` to ``false``.\n+\n+\n+Security Changes\n+----------------\n+* Add support for ``DEFINER`` and ``INVOKER`` view security modes. While querying a view the former\n+  uses the permissions of the view owner and the latter uses the query runner's permissions.\n+  See :doc:`/sql/create-view`.\n+\n+JDBC Changes\n+____________\n+* Implemented ``DatabaseMetaData#getClientInfoProperties`` API.\n+\n+Web UI Changes\n+--------------\n+*  Fix a bug where the UI for the worker's thread snapshot wouldn't display the stack trace.\n+\n+Hive Changes\n+____________\n+* Add support for caching the Glue metastore.\n+* Add support for warning on unfiltered partition keys. This can be enabled using the configuration\n+  property ``partition-keys-to-warn-on-no-filtering``.\n+\n+Elasticsearch Changes\n+_____________________\n+* Add configurations to improve concurrency.\n+* Add support for numeric keyword.\n+* Add support for composite publish_address.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkxNzU4Mw=="}, "originalCommit": {"oid": "855901d3b0281c526507198e1bcecd00ebee9ac1"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MzgwNDUxOnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMjoxNzoxMlrOG4hpDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMjoxNzoxMlrOG4hpDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkyNDYyMA==", "bodyText": "This description is a bit too technical. If this is accurate, maybe say\nOptimize queries with repeated expressions in filters or projections by computing the common expressions only once.  This can be disabled by the session property\n  ``optimize_common_sub_expressions``.", "url": "https://github.com/prestodb/presto/pull/14908#discussion_r461924620", "createdAt": "2020-07-28T22:17:12Z", "author": {"login": "rschlussel"}, "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "diffHunk": "@@ -0,0 +1,73 @@\n+=============\n+Release 0.239\n+=============\n+\n+**Highlights**\n+==============\n+* Add support for ``DEFINER`` and ``INVOKER`` view security models.\n+* Add support for caching Glue metastore in Hive connector.\n+* Add Pinot SQL endpoint support.\n+\n+General Changes\n+_______________\n+* Fix :func:`classification_miss_rate` and :func:`classification_fall_out` (:pr:`14740`).\n+* Fix ``NullPointerException`` in ``/v1/thread`` end point.\n+* Fix an issue where the property ``ignore_stats_calculator_failures`` would not be honored\n+  for certain queries that had filters pushed down to the table scan.\n+* Fix missing query completion events for queries which fail prior to dispatching.\n+* Fix potential infinite loop when the setting ``use_legacy_scheduler`` is set to ``false``.\n+* Optimize cursor projection and filter by extracting and computing common subexpressions", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "855901d3b0281c526507198e1bcecd00ebee9ac1"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MzgxNDIxOnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMjoyMDowNVrOG4huxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMzo0NDoyMVrOG66FWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkyNjA4NA==", "bodyText": "what's a min/max only metadata query?", "url": "https://github.com/prestodb/presto/pull/14908#discussion_r461926084", "createdAt": "2020-07-28T22:20:05Z", "author": {"login": "rschlussel"}, "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "diffHunk": "@@ -0,0 +1,73 @@\n+=============\n+Release 0.239\n+=============\n+\n+**Highlights**\n+==============\n+* Add support for ``DEFINER`` and ``INVOKER`` view security models.\n+* Add support for caching Glue metastore in Hive connector.\n+* Add Pinot SQL endpoint support.\n+\n+General Changes\n+_______________\n+* Fix :func:`classification_miss_rate` and :func:`classification_fall_out` (:pr:`14740`).\n+* Fix ``NullPointerException`` in ``/v1/thread`` end point.\n+* Fix an issue where the property ``ignore_stats_calculator_failures`` would not be honored\n+  for certain queries that had filters pushed down to the table scan.\n+* Fix missing query completion events for queries which fail prior to dispatching.\n+* Fix potential infinite loop when the setting ``use_legacy_scheduler`` is set to ``false``.\n+* Optimize cursor projection and filter by extracting and computing common subexpressions\n+  among all projections and filter first. This can be disabled by the session property\n+  ``optimize_common_sub_expressions``.\n+* Add aggregation function :func:`set_union`.\n+* Add local disk spilling support for queries with ``ORDER BY`` or ``DISTINCT``.\n+* Add support to optimize min/max only metadata query. This is controlled by configuration", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "855901d3b0281c526507198e1bcecd00ebee9ac1"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQwNTI3OA==", "bodyText": "Queries that are doing min(), max() only kind of operations", "url": "https://github.com/prestodb/presto/pull/14908#discussion_r464405278", "createdAt": "2020-08-03T13:15:12Z", "author": {"login": "mayankgarg1990"}, "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "diffHunk": "@@ -0,0 +1,73 @@\n+=============\n+Release 0.239\n+=============\n+\n+**Highlights**\n+==============\n+* Add support for ``DEFINER`` and ``INVOKER`` view security models.\n+* Add support for caching Glue metastore in Hive connector.\n+* Add Pinot SQL endpoint support.\n+\n+General Changes\n+_______________\n+* Fix :func:`classification_miss_rate` and :func:`classification_fall_out` (:pr:`14740`).\n+* Fix ``NullPointerException`` in ``/v1/thread`` end point.\n+* Fix an issue where the property ``ignore_stats_calculator_failures`` would not be honored\n+  for certain queries that had filters pushed down to the table scan.\n+* Fix missing query completion events for queries which fail prior to dispatching.\n+* Fix potential infinite loop when the setting ``use_legacy_scheduler`` is set to ``false``.\n+* Optimize cursor projection and filter by extracting and computing common subexpressions\n+  among all projections and filter first. This can be disabled by the session property\n+  ``optimize_common_sub_expressions``.\n+* Add aggregation function :func:`set_union`.\n+* Add local disk spilling support for queries with ``ORDER BY`` or ``DISTINCT``.\n+* Add support to optimize min/max only metadata query. This is controlled by configuration", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkyNjA4NA=="}, "originalCommit": {"oid": "855901d3b0281c526507198e1bcecd00ebee9ac1"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQyMjIzNQ==", "bodyText": "I have reworded this to be more clear (hopefully)", "url": "https://github.com/prestodb/presto/pull/14908#discussion_r464422235", "createdAt": "2020-08-03T13:44:21Z", "author": {"login": "mayankgarg1990"}, "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "diffHunk": "@@ -0,0 +1,73 @@\n+=============\n+Release 0.239\n+=============\n+\n+**Highlights**\n+==============\n+* Add support for ``DEFINER`` and ``INVOKER`` view security models.\n+* Add support for caching Glue metastore in Hive connector.\n+* Add Pinot SQL endpoint support.\n+\n+General Changes\n+_______________\n+* Fix :func:`classification_miss_rate` and :func:`classification_fall_out` (:pr:`14740`).\n+* Fix ``NullPointerException`` in ``/v1/thread`` end point.\n+* Fix an issue where the property ``ignore_stats_calculator_failures`` would not be honored\n+  for certain queries that had filters pushed down to the table scan.\n+* Fix missing query completion events for queries which fail prior to dispatching.\n+* Fix potential infinite loop when the setting ``use_legacy_scheduler`` is set to ``false``.\n+* Optimize cursor projection and filter by extracting and computing common subexpressions\n+  among all projections and filter first. This can be disabled by the session property\n+  ``optimize_common_sub_expressions``.\n+* Add aggregation function :func:`set_union`.\n+* Add local disk spilling support for queries with ``ORDER BY`` or ``DISTINCT``.\n+* Add support to optimize min/max only metadata query. This is controlled by configuration", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkyNjA4NA=="}, "originalCommit": {"oid": "855901d3b0281c526507198e1bcecd00ebee9ac1"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTI0Nzg2OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNzowMjozNlrOG7BZ_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNzowMjozNlrOG7BZ_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU0MjIwNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Fix ``NullPointerException`` in ``/v1/thread`` end point.\n          \n          \n            \n            * Fix error in ``/v1/thread`` end point.", "url": "https://github.com/prestodb/presto/pull/14908#discussion_r464542206", "createdAt": "2020-08-03T17:02:36Z", "author": {"login": "tdcmeehan"}, "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "diffHunk": "@@ -0,0 +1,79 @@\n+=============\n+Release 0.239\n+=============\n+\n+**Highlights**\n+==============\n+* Add support for ``DEFINER`` and ``INVOKER`` view security models.\n+* Add support for caching Glue metastore in Hive connector.\n+* Add Pinot SQL endpoint support.\n+\n+General Changes\n+_______________\n+* Fix :func:`classification_miss_rate` and :func:`classification_fall_out` (:pr:`14740`).\n+* Fix ``NullPointerException`` in ``/v1/thread`` end point.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa23eed765646168d0e3b1dba456f1a8b896f650"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTI3NjY5OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNzoxMToxMlrOG7BrYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNzoxMToxMlrOG7BrYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU0NjY1Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              for certain queries that had filters pushed down to the table scan.\n          \n          \n            \n              for certain queries.", "url": "https://github.com/prestodb/presto/pull/14908#discussion_r464546657", "createdAt": "2020-08-03T17:11:12Z", "author": {"login": "tdcmeehan"}, "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "diffHunk": "@@ -0,0 +1,79 @@\n+=============\n+Release 0.239\n+=============\n+\n+**Highlights**\n+==============\n+* Add support for ``DEFINER`` and ``INVOKER`` view security models.\n+* Add support for caching Glue metastore in Hive connector.\n+* Add Pinot SQL endpoint support.\n+\n+General Changes\n+_______________\n+* Fix :func:`classification_miss_rate` and :func:`classification_fall_out` (:pr:`14740`).\n+* Fix ``NullPointerException`` in ``/v1/thread`` end point.\n+* Fix an issue where the property ``ignore_stats_calculator_failures`` would not be honored\n+  for certain queries that had filters pushed down to the table scan.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa23eed765646168d0e3b1dba456f1a8b896f650"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTI3ODQ4OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNzoxMTo0MVrOG7Bsaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNzoxMTo0MVrOG7Bsaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU0NjkyMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Fix missing query completion events for queries which fail prior to dispatching.\n          \n          \n            \n            * Fix missing query completion events for queries which fail prior to execution.", "url": "https://github.com/prestodb/presto/pull/14908#discussion_r464546923", "createdAt": "2020-08-03T17:11:41Z", "author": {"login": "tdcmeehan"}, "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "diffHunk": "@@ -0,0 +1,79 @@\n+=============\n+Release 0.239\n+=============\n+\n+**Highlights**\n+==============\n+* Add support for ``DEFINER`` and ``INVOKER`` view security models.\n+* Add support for caching Glue metastore in Hive connector.\n+* Add Pinot SQL endpoint support.\n+\n+General Changes\n+_______________\n+* Fix :func:`classification_miss_rate` and :func:`classification_fall_out` (:pr:`14740`).\n+* Fix ``NullPointerException`` in ``/v1/thread`` end point.\n+* Fix an issue where the property ``ignore_stats_calculator_failures`` would not be honored\n+  for certain queries that had filters pushed down to the table scan.\n+* Fix missing query completion events for queries which fail prior to dispatching.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa23eed765646168d0e3b1dba456f1a8b896f650"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTI3OTk0OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNzoxMjowNFrOG7BtQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNzoxMjowNFrOG7BtQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU0NzEzNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Fix potential infinite loop when the setting ``use_legacy_scheduler`` is set to ``false``.\n          \n          \n            \n            * Fix potential performance regression when setting ``use_legacy_scheduler`` is set to ``false``.", "url": "https://github.com/prestodb/presto/pull/14908#discussion_r464547136", "createdAt": "2020-08-03T17:12:04Z", "author": {"login": "tdcmeehan"}, "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "diffHunk": "@@ -0,0 +1,79 @@\n+=============\n+Release 0.239\n+=============\n+\n+**Highlights**\n+==============\n+* Add support for ``DEFINER`` and ``INVOKER`` view security models.\n+* Add support for caching Glue metastore in Hive connector.\n+* Add Pinot SQL endpoint support.\n+\n+General Changes\n+_______________\n+* Fix :func:`classification_miss_rate` and :func:`classification_fall_out` (:pr:`14740`).\n+* Fix ``NullPointerException`` in ``/v1/thread`` end point.\n+* Fix an issue where the property ``ignore_stats_calculator_failures`` would not be honored\n+  for certain queries that had filters pushed down to the table scan.\n+* Fix missing query completion events for queries which fail prior to dispatching.\n+* Fix potential infinite loop when the setting ``use_legacy_scheduler`` is set to ``false``.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa23eed765646168d0e3b1dba456f1a8b896f650"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTI5Mjk0OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNzoxNTo0M1rOG7B0tQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNzoxNTo0M1rOG7B0tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU0OTA0NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            *  Fix a bug where the UI for the worker's thread snapshot wouldn't display the stack trace.\n          \n          \n            \n            *  Fix worker thread snapshot UI to correctly display the stack trace.", "url": "https://github.com/prestodb/presto/pull/14908#discussion_r464549045", "createdAt": "2020-08-03T17:15:43Z", "author": {"login": "tdcmeehan"}, "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "diffHunk": "@@ -0,0 +1,79 @@\n+=============\n+Release 0.239\n+=============\n+\n+**Highlights**\n+==============\n+* Add support for ``DEFINER`` and ``INVOKER`` view security models.\n+* Add support for caching Glue metastore in Hive connector.\n+* Add Pinot SQL endpoint support.\n+\n+General Changes\n+_______________\n+* Fix :func:`classification_miss_rate` and :func:`classification_fall_out` (:pr:`14740`).\n+* Fix ``NullPointerException`` in ``/v1/thread`` end point.\n+* Fix an issue where the property ``ignore_stats_calculator_failures`` would not be honored\n+  for certain queries that had filters pushed down to the table scan.\n+* Fix missing query completion events for queries which fail prior to dispatching.\n+* Fix potential infinite loop when the setting ``use_legacy_scheduler`` is set to ``false``.\n+* Optimize queries with repeated expressions in filters or projections by computing the\n+  common expressions only once. This can be disabled by the session property\n+  ``optimize_common_sub_expressions``.\n+* Optimize queries containing only :func:`min` and :func:`max` on columns that can be\n+  evaluated using metadata (e.g., Hive partitions). This is controlled by configuration property\n+  ``optimizer.optimize-metadata-queries`` and session property ``optimize_metadata_queries``.\n+  Note: Enabling this optimization might change query result if there are metadata that refers to\n+  empty data, see :pr:`14845` for examples.\n+* Add aggregation function :func:`set_union`.\n+* Add local disk spilling support for queries with ``ORDER BY`` or ``DISTINCT``.\n+* Add new unified grouped execution configuration property ``grouped-execution-enabled`` and\n+  session property ``grouped_execution`` with default set to ``true``. The property\n+  ``grouped-execution-for-join-enabled`` will be removed in a future release (:pr:`14886`).\n+* Remove experimental feature to perform grouped execution for eligible table scans and its\n+  associated configuration property ``experimental.grouped-execution-for-eligible-table-scans``\n+  and session property ``grouped_execution_for_eligible_table_scans``.\n+* Enable ``dynamic-schedule-for-grouped-execution`` by default.  This property will be removed\n+  in a future release.\n+* Enable ``grouped-execution-for-aggregation-enabled`` by default. This property will be removed in\n+  a future release.\n+* Enable async page transport with non-blocking IO for exchange by default. This can be disabled by\n+  setting the configuration property ``exchange.async-page-transport-enabled`` to ``false``.\n+\n+\n+Security Changes\n+----------------\n+* Add support for ``DEFINER`` and ``INVOKER`` view security modes. While querying a view the former\n+  uses the permissions of the view owner and the latter uses the query runner's permissions.\n+  See :doc:`/sql/create-view`.\n+\n+JDBC Changes\n+____________\n+* Implemented ``DatabaseMetaData#getClientInfoProperties`` API.\n+\n+Web UI Changes\n+--------------\n+*  Fix a bug where the UI for the worker's thread snapshot wouldn't display the stack trace.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa23eed765646168d0e3b1dba456f1a8b896f650"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTI5NjU0OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNzoxNjo0OFrOG7B28g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNzoyNToxNVrOG7CImw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU0OTYxOA==", "bodyText": "What is the default setting?", "url": "https://github.com/prestodb/presto/pull/14908#discussion_r464549618", "createdAt": "2020-08-03T17:16:48Z", "author": {"login": "tdcmeehan"}, "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "diffHunk": "@@ -0,0 +1,79 @@\n+=============\n+Release 0.239\n+=============\n+\n+**Highlights**\n+==============\n+* Add support for ``DEFINER`` and ``INVOKER`` view security models.\n+* Add support for caching Glue metastore in Hive connector.\n+* Add Pinot SQL endpoint support.\n+\n+General Changes\n+_______________\n+* Fix :func:`classification_miss_rate` and :func:`classification_fall_out` (:pr:`14740`).\n+* Fix ``NullPointerException`` in ``/v1/thread`` end point.\n+* Fix an issue where the property ``ignore_stats_calculator_failures`` would not be honored\n+  for certain queries that had filters pushed down to the table scan.\n+* Fix missing query completion events for queries which fail prior to dispatching.\n+* Fix potential infinite loop when the setting ``use_legacy_scheduler`` is set to ``false``.\n+* Optimize queries with repeated expressions in filters or projections by computing the\n+  common expressions only once. This can be disabled by the session property\n+  ``optimize_common_sub_expressions``.\n+* Optimize queries containing only :func:`min` and :func:`max` on columns that can be\n+  evaluated using metadata (e.g., Hive partitions). This is controlled by configuration property\n+  ``optimizer.optimize-metadata-queries`` and session property ``optimize_metadata_queries``.\n+  Note: Enabling this optimization might change query result if there are metadata that refers to\n+  empty data, see :pr:`14845` for examples.\n+* Add aggregation function :func:`set_union`.\n+* Add local disk spilling support for queries with ``ORDER BY`` or ``DISTINCT``.\n+* Add new unified grouped execution configuration property ``grouped-execution-enabled`` and\n+  session property ``grouped_execution`` with default set to ``true``. The property\n+  ``grouped-execution-for-join-enabled`` will be removed in a future release (:pr:`14886`).\n+* Remove experimental feature to perform grouped execution for eligible table scans and its\n+  associated configuration property ``experimental.grouped-execution-for-eligible-table-scans``\n+  and session property ``grouped_execution_for_eligible_table_scans``.\n+* Enable ``dynamic-schedule-for-grouped-execution`` by default.  This property will be removed\n+  in a future release.\n+* Enable ``grouped-execution-for-aggregation-enabled`` by default. This property will be removed in\n+  a future release.\n+* Enable async page transport with non-blocking IO for exchange by default. This can be disabled by\n+  setting the configuration property ``exchange.async-page-transport-enabled`` to ``false``.\n+\n+\n+Security Changes\n+----------------\n+* Add support for ``DEFINER`` and ``INVOKER`` view security modes. While querying a view the former\n+  uses the permissions of the view owner and the latter uses the query runner's permissions.\n+  See :doc:`/sql/create-view`.\n+\n+JDBC Changes\n+____________\n+* Implemented ``DatabaseMetaData#getClientInfoProperties`` API.\n+\n+Web UI Changes\n+--------------\n+*  Fix a bug where the UI for the worker's thread snapshot wouldn't display the stack trace.\n+\n+Hive Changes\n+____________\n+* Add support for caching the Glue metastore.\n+* Add support for warning on unfiltered partition keys. This can be enabled using the configuration\n+  property ``partition-keys-to-warn-on-no-filtering``.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa23eed765646168d0e3b1dba456f1a8b896f650"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU1NDEzOQ==", "bodyText": "Generally when we say enable using, my assumption is that it is disabled by default.", "url": "https://github.com/prestodb/presto/pull/14908#discussion_r464554139", "createdAt": "2020-08-03T17:25:15Z", "author": {"login": "mayankgarg1990"}, "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "diffHunk": "@@ -0,0 +1,79 @@\n+=============\n+Release 0.239\n+=============\n+\n+**Highlights**\n+==============\n+* Add support for ``DEFINER`` and ``INVOKER`` view security models.\n+* Add support for caching Glue metastore in Hive connector.\n+* Add Pinot SQL endpoint support.\n+\n+General Changes\n+_______________\n+* Fix :func:`classification_miss_rate` and :func:`classification_fall_out` (:pr:`14740`).\n+* Fix ``NullPointerException`` in ``/v1/thread`` end point.\n+* Fix an issue where the property ``ignore_stats_calculator_failures`` would not be honored\n+  for certain queries that had filters pushed down to the table scan.\n+* Fix missing query completion events for queries which fail prior to dispatching.\n+* Fix potential infinite loop when the setting ``use_legacy_scheduler`` is set to ``false``.\n+* Optimize queries with repeated expressions in filters or projections by computing the\n+  common expressions only once. This can be disabled by the session property\n+  ``optimize_common_sub_expressions``.\n+* Optimize queries containing only :func:`min` and :func:`max` on columns that can be\n+  evaluated using metadata (e.g., Hive partitions). This is controlled by configuration property\n+  ``optimizer.optimize-metadata-queries`` and session property ``optimize_metadata_queries``.\n+  Note: Enabling this optimization might change query result if there are metadata that refers to\n+  empty data, see :pr:`14845` for examples.\n+* Add aggregation function :func:`set_union`.\n+* Add local disk spilling support for queries with ``ORDER BY`` or ``DISTINCT``.\n+* Add new unified grouped execution configuration property ``grouped-execution-enabled`` and\n+  session property ``grouped_execution`` with default set to ``true``. The property\n+  ``grouped-execution-for-join-enabled`` will be removed in a future release (:pr:`14886`).\n+* Remove experimental feature to perform grouped execution for eligible table scans and its\n+  associated configuration property ``experimental.grouped-execution-for-eligible-table-scans``\n+  and session property ``grouped_execution_for_eligible_table_scans``.\n+* Enable ``dynamic-schedule-for-grouped-execution`` by default.  This property will be removed\n+  in a future release.\n+* Enable ``grouped-execution-for-aggregation-enabled`` by default. This property will be removed in\n+  a future release.\n+* Enable async page transport with non-blocking IO for exchange by default. This can be disabled by\n+  setting the configuration property ``exchange.async-page-transport-enabled`` to ``false``.\n+\n+\n+Security Changes\n+----------------\n+* Add support for ``DEFINER`` and ``INVOKER`` view security modes. While querying a view the former\n+  uses the permissions of the view owner and the latter uses the query runner's permissions.\n+  See :doc:`/sql/create-view`.\n+\n+JDBC Changes\n+____________\n+* Implemented ``DatabaseMetaData#getClientInfoProperties`` API.\n+\n+Web UI Changes\n+--------------\n+*  Fix a bug where the UI for the worker's thread snapshot wouldn't display the stack trace.\n+\n+Hive Changes\n+____________\n+* Add support for caching the Glue metastore.\n+* Add support for warning on unfiltered partition keys. This can be enabled using the configuration\n+  property ``partition-keys-to-warn-on-no-filtering``.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU0OTYxOA=="}, "originalCommit": {"oid": "aa23eed765646168d0e3b1dba456f1a8b896f650"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjY2MjA3OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMjoxNzoxOFrOG7OqAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMjoxNzoxOFrOG7OqAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc1OTI5Ng==", "bodyText": "Fix incorrect results from :func:classification_miss_rate, :func:classification_fall_out, and :func:classification_precision (:pr:14740).", "url": "https://github.com/prestodb/presto/pull/14908#discussion_r464759296", "createdAt": "2020-08-04T02:17:18Z", "author": {"login": "viczhang861"}, "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "diffHunk": "@@ -0,0 +1,79 @@\n+=============\n+Release 0.239\n+=============\n+\n+**Highlights**\n+==============\n+* Add support for ``DEFINER`` and ``INVOKER`` view security models.\n+* Add support for caching Glue metastore in Hive connector.\n+* Add Pinot SQL endpoint support.\n+\n+General Changes\n+_______________\n+* Fix :func:`classification_miss_rate` and :func:`classification_fall_out` (:pr:`14740`).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f119c4d146901dd8ace1ee39ca96f5b18f78c5a4"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODEyNTM1OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzoyMTowM1rOG9h0EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzoyMTowM1rOG9h0EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE3MDMyMA==", "bodyText": "We may be to add a heading (e.g. **Details** or **Notes**) in parallel with **Highlights** so that it doesn't looks like the sections below are sub-sections of the highlights. We're also missing this with 0.238 release notes, so I'm ok with fixing this later.", "url": "https://github.com/prestodb/presto/pull/14908#discussion_r467170320", "createdAt": "2020-08-07T17:21:03Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "diffHunk": "@@ -0,0 +1,80 @@\n+=============\n+Release 0.239\n+=============\n+\n+**Highlights**\n+==============\n+* Add support for ``DEFINER`` and ``INVOKER`` view security models.\n+* Add support for caching Glue metastore in Hive connector.\n+* Add Pinot SQL endpoint support.\n+\n+General Changes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6f2c373519d0ea7d1b5e913c4aad83d92989589"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODE4MzU1OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzo0MDowM1rOG9iYXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzo0MDowM1rOG9iYXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE3OTYxNA==", "bodyText": "I think you need\n:pr:`14740`\n\nCould you visually check the other content of the html by running\ncd presto-docs\nmake clean\nmake html", "url": "https://github.com/prestodb/presto/pull/14908#discussion_r467179614", "createdAt": "2020-08-07T17:40:03Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/release/release-0.239.rst", "diffHunk": "@@ -0,0 +1,83 @@\n+=============\n+Release 0.239\n+=============\n+\n+**Highlights**\n+==============\n+* Add support for ``DEFINER`` and ``INVOKER`` view security models.\n+* Add support for caching Glue metastore in Hive connector.\n+* Add Pinot SQL endpoint support.\n+\n+**Details**\n+==============\n+\n+General Changes\n+_______________\n+* Fix incorrect results from :func:`classification_miss_rate`, :func:`classification_fall_out`\n+  and :func:`classification_precision` (:pr:14740).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12429af1ef6a3d086e43a76d3fe4e84e66f3eed4"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2193, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}