{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyODM3Mzkw", "number": 14634, "title": "Optimize shuffle efficiency for Presto on Spark", "bodyText": "If release note is NOT required, use:\n== NO RELEASE NOTE ==", "createdAt": "2020-06-11T04:52:11Z", "url": "https://github.com/prestodb/presto/pull/14634", "merged": true, "mergeCommit": {"oid": "5d20801c400de01f5614db638114bd9ed197f583"}, "closed": true, "closedAt": "2020-06-18T14:07:33Z", "author": {"login": "arhimondr"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcqgbUPABqjM0Mzc4ODkwMjk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcse_fXgBqjM0NTgyOTY2MjU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fe5e00ba7f9b572cd63576693f1d67eb59d6753c", "author": {"user": {"login": "arhimondr", "name": "Andrii Rosa"}}, "url": "https://github.com/prestodb/presto/commit/fe5e00ba7f9b572cd63576693f1d67eb59d6753c", "committedDate": "2020-06-11T04:44:10Z", "message": "tmp"}, "afterCommit": {"oid": "b7ac2fbb14356fed0e148f483cc68e68e1a5eb55", "author": {"user": {"login": "arhimondr", "name": "Andrii Rosa"}}, "url": "https://github.com/prestodb/presto/commit/b7ac2fbb14356fed0e148f483cc68e68e1a5eb55", "committedDate": "2020-06-12T10:35:54Z", "message": "Add PrestoSparkMaterializedRow"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b7ac2fbb14356fed0e148f483cc68e68e1a5eb55", "author": {"user": {"login": "arhimondr", "name": "Andrii Rosa"}}, "url": "https://github.com/prestodb/presto/commit/b7ac2fbb14356fed0e148f483cc68e68e1a5eb55", "committedDate": "2020-06-12T10:35:54Z", "message": "Add PrestoSparkMaterializedRow"}, "afterCommit": {"oid": "cfb34d3c2ee3e20c9860b464714f56d50615ca2d", "author": {"user": {"login": "arhimondr", "name": "Andrii Rosa"}}, "url": "https://github.com/prestodb/presto/commit/cfb34d3c2ee3e20c9860b464714f56d50615ca2d", "committedDate": "2020-06-12T10:59:58Z", "message": "Add PrestoSparkMaterializedRow"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cfb34d3c2ee3e20c9860b464714f56d50615ca2d", "author": {"user": {"login": "arhimondr", "name": "Andrii Rosa"}}, "url": "https://github.com/prestodb/presto/commit/cfb34d3c2ee3e20c9860b464714f56d50615ca2d", "committedDate": "2020-06-12T10:59:58Z", "message": "Add PrestoSparkMaterializedRow"}, "afterCommit": {"oid": "53942effc737a79000776da1978623f8db24a3a7", "author": {"user": {"login": "arhimondr", "name": "Andrii Rosa"}}, "url": "https://github.com/prestodb/presto/commit/53942effc737a79000776da1978623f8db24a3a7", "committedDate": "2020-06-15T22:25:08Z", "message": "Optimize PrestoSparkOutputOperator\n\nAvoid allocating a lot of small objects"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "53942effc737a79000776da1978623f8db24a3a7", "author": {"user": {"login": "arhimondr", "name": "Andrii Rosa"}}, "url": "https://github.com/prestodb/presto/commit/53942effc737a79000776da1978623f8db24a3a7", "committedDate": "2020-06-15T22:25:08Z", "message": "Optimize PrestoSparkOutputOperator\n\nAvoid allocating a lot of small objects"}, "afterCommit": {"oid": "fa003ce7647ea3693882870a3979aae77c509af2", "author": {"user": {"login": "arhimondr", "name": "Andrii Rosa"}}, "url": "https://github.com/prestodb/presto/commit/fa003ce7647ea3693882870a3979aae77c509af2", "committedDate": "2020-06-15T22:29:54Z", "message": "Optimize PrestoSparkOutputOperator\n\nAvoid allocating a lot of small objects"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fa003ce7647ea3693882870a3979aae77c509af2", "author": {"user": {"login": "arhimondr", "name": "Andrii Rosa"}}, "url": "https://github.com/prestodb/presto/commit/fa003ce7647ea3693882870a3979aae77c509af2", "committedDate": "2020-06-15T22:29:54Z", "message": "Optimize PrestoSparkOutputOperator\n\nAvoid allocating a lot of small objects"}, "afterCommit": {"oid": "a1bd2a27ea149a5f23bd4c6edc5fabd9f56fb802", "author": {"user": {"login": "arhimondr", "name": "Andrii Rosa"}}, "url": "https://github.com/prestodb/presto/commit/a1bd2a27ea149a5f23bd4c6edc5fabd9f56fb802", "committedDate": "2020-06-16T14:20:31Z", "message": "Avoid unnecessary page to row conversions\n\nConvert to row only if shuffle is needed"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxNzM2NzM2", "url": "https://github.com/prestodb/presto/pull/14634#pullrequestreview-431736736", "createdAt": "2020-06-16T17:31:36Z", "commit": {"oid": "4925720e2dd6c5b42bc8726e3a292a4d599fc620"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNzozMTozNlrOGkl7cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNzozMjo0MFrOGkl9vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAyMzM0NA==", "bodyText": "nit: i think this class should be renamed to be something like PrestoSparkPartitioner now \ud83d\ude03", "url": "https://github.com/prestodb/presto/pull/14634#discussion_r441023344", "createdAt": "2020-06-16T17:31:36Z", "author": {"login": "wenleix"}, "path": "presto-spark-classloader-interface/src/main/java/com/facebook/presto/spark/classloader_interface/IntegerIdentityPartitioner.java", "diffHunk": "@@ -37,7 +37,9 @@ public int numPartitions()\n     @Override\n     public int getPartition(Object key)\n     {\n-        int partition = requireNonNull((Integer) key, \"key is null\");\n+        requireNonNull(key, \"key is null\");\n+        MutablePartitionId mutablePartitionId = (MutablePartitionId) key;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4925720e2dd6c5b42bc8726e3a292a4d599fc620"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAyMzkzNQ==", "bodyText": "actually use MutablePartitionId instead of Integer make generic type parameters slightly easier to understand ;)", "url": "https://github.com/prestodb/presto/pull/14634#discussion_r441023935", "createdAt": "2020-06-16T17:32:40Z", "author": {"login": "wenleix"}, "path": "presto-spark-classloader-interface/src/main/java/com/facebook/presto/spark/classloader_interface/PrestoSparkTaskInputs.java", "diffHunk": "@@ -27,18 +27,18 @@\n public class PrestoSparkTaskInputs\n {\n     // fragmentId -> Iterator<[partitionId, page]>\n-    private final Map<String, Iterator<Tuple2<Integer, PrestoSparkRow>>> shuffleInputs;\n+    private final Map<String, Iterator<Tuple2<MutablePartitionId, PrestoSparkRow>>> shuffleInputs;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4925720e2dd6c5b42bc8726e3a292a4d599fc620"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxNzU0NjA5", "url": "https://github.com/prestodb/presto/pull/14634#pullrequestreview-431754609", "createdAt": "2020-06-16T17:55:11Z", "commit": {"oid": "a1bd2a27ea149a5f23bd4c6edc5fabd9f56fb802"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxNzc4MjAy", "url": "https://github.com/prestodb/presto/pull/14634#pullrequestreview-431778202", "createdAt": "2020-06-16T18:20:54Z", "commit": {"oid": "659f49113904133e527181bc097a18a90c40cae2"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxODoyMDo1NVrOGknw2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxODo1MjoyMFrOGko5LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA1MzQwMA==", "bodyText": "At this moment you we still allocate one PrestoSparkMutableRow per row. Is this going to be addressed in later commit? (or in the future? :)", "url": "https://github.com/prestodb/presto/pull/14634#discussion_r441053400", "createdAt": "2020-06-16T18:20:55Z", "author": {"login": "wenleix"}, "path": "presto-spark-base/src/main/java/com/facebook/presto/spark/execution/PrestoSparkOutputOperator.java", "diffHunk": "@@ -259,13 +260,19 @@ public void addInput(Page page)\n             byte[] rowBytes = output.size() == 0 ? new byte[0] : output.getUnderlyingSlice().byteArray();\n             if (shouldReplicate) {\n                 for (int i = 0; i < partitionFunction.getPartitionCount(); i++) {\n-                    appendRow(new PrestoSparkMutableRow(i, output.size(), rowBytes));\n+                    PrestoSparkMutableRow row = new PrestoSparkMutableRow();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "659f49113904133e527181bc097a18a90c40cae2"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA1NzI2Mg==", "bodyText": "Now I understand why @sameeragarwal  once recommended to use Scala. Spark JavaRDD API is much more restricted so we often have to \"unwrap\" JavaRDD , do something on Scala RDD, and then \"re-wrap\" into a Java RDD...", "url": "https://github.com/prestodb/presto/pull/14634#discussion_r441057262", "createdAt": "2020-06-16T18:26:17Z", "author": {"login": "wenleix"}, "path": "presto-spark-base/src/main/java/com/facebook/presto/spark/planner/PrestoSparkRddFactory.java", "diffHunk": "@@ -206,6 +208,17 @@ private PlanFragment configureOutputPartitioning(Session session, PlanFragment f\n         return fragment;\n     }\n \n+    private static JavaPairRDD<MutablePartitionId, PrestoSparkMutableRow> partitionBy(JavaPairRDD<MutablePartitionId, PrestoSparkMutableRow> rdd, Partitioner partitioner)\n+    {\n+        JavaPairRDD<MutablePartitionId, PrestoSparkMutableRow> javaPairRdd = rdd.partitionBy(partitioner);\n+        ShuffledRDD<MutablePartitionId, PrestoSparkMutableRow, PrestoSparkMutableRow> shuffledRdd = (ShuffledRDD<MutablePartitionId, PrestoSparkMutableRow, PrestoSparkMutableRow>) javaPairRdd.rdd();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "659f49113904133e527181bc097a18a90c40cae2"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA2OTM4OQ==", "bodyText": "the data byte array is not copied here.\nSo , if we have a PrestoSparkMaterializedRow r1 and convert to PrestoSparkMutableRow r2, and then do changes over r2, would that affect data in r1?", "url": "https://github.com/prestodb/presto/pull/14634#discussion_r441069389", "createdAt": "2020-06-16T18:47:45Z", "author": {"login": "wenleix"}, "path": "presto-spark-classloader-interface/src/main/java/com/facebook/presto/spark/classloader_interface/PrestoSparkMaterializedRow.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.spark.classloader_interface;\n+\n+import java.io.Serializable;\n+import java.nio.ByteBuffer;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class PrestoSparkMaterializedRow\n+        implements Serializable\n+{\n+    private final byte[] data;\n+\n+    public PrestoSparkMaterializedRow(byte[] data)\n+    {\n+        this.data = requireNonNull(data, \"data is null\");\n+    }\n+\n+    public byte[] getData()\n+    {\n+        return data;\n+    }\n+\n+    public PrestoSparkMutableRow toPrestoSparkMutableRow()\n+    {\n+        PrestoSparkMutableRow prestoSparkMutableRow = new PrestoSparkMutableRow();\n+        prestoSparkMutableRow.setBuffer(ByteBuffer.wrap(data));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "659f49113904133e527181bc097a18a90c40cae2"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA3MDA3Mg==", "bodyText": "nit: PrestoSparkMutableRow , also for line 95 and 97.", "url": "https://github.com/prestodb/presto/pull/14634#discussion_r441070072", "createdAt": "2020-06-16T18:49:00Z", "author": {"login": "wenleix"}, "path": "presto-spark-classloader-interface/src/main/java/com/facebook/presto/spark/classloader_interface/PrestoSparkMutableRow.java", "diffHunk": "@@ -13,48 +13,87 @@\n  */\n package com.facebook.presto.spark.classloader_interface;\n \n-import java.io.Serializable;\n+import com.esotericsoftware.kryo.Kryo;\n+import com.esotericsoftware.kryo.KryoSerializable;\n+import com.esotericsoftware.kryo.io.Input;\n+import com.esotericsoftware.kryo.io.Output;\n \n-import static java.util.Objects.requireNonNull;\n+import java.io.Externalizable;\n+import java.io.ObjectInput;\n+import java.io.ObjectOutput;\n+import java.nio.ByteBuffer;\n \n public class PrestoSparkMutableRow\n-        implements Serializable\n+        implements Externalizable, KryoSerializable\n {\n-    private static final int INSTANCE_SIZE = Long.BYTES * 2 /* headers */\n-            + Integer.BYTES /* partition */\n-            + Integer.BYTES /* length */\n-            + Long.BYTES /* bytes pointer */\n-            + Long.BYTES * 2 /* bytes headers */\n-            + Integer.BYTES /* bytes length */;\n+    private int partition;\n+    private ByteBuffer buffer;\n \n-    private final int partition;\n-    private final int length;\n-    private final byte[] bytes;\n+    public int getPartition()\n+    {\n+        return partition;\n+    }\n \n-    public PrestoSparkMutableRow(int partition, int length, byte[] bytes)\n+    public void setPartition(int partition)\n     {\n         this.partition = partition;\n-        this.length = length;\n-        this.bytes = requireNonNull(bytes, \"bytes is null\");\n     }\n \n-    public int getPartition()\n+    public ByteBuffer getBuffer()\n     {\n-        return partition;\n+        return buffer;\n+    }\n+\n+    public void setBuffer(ByteBuffer buffer)\n+    {\n+        this.buffer = buffer;\n+    }\n+\n+    /**\n+     * TODO: Transitional method. Will be removed in the next commit.\n+     */\n+    public int getRetainedSize()\n+    {\n+        return Integer.SIZE + buffer.remaining();\n+    }\n+\n+    public PrestoSparkMaterializedRow toMaterializedRow()\n+    {\n+        byte[] copy = new byte[buffer.remaining()];\n+        System.arraycopy(buffer.array(), buffer.arrayOffset() + buffer.position(), copy, 0, buffer.remaining());\n+        return new PrestoSparkMaterializedRow(copy);\n+    }\n+\n+    @Override\n+    public void write(Kryo kryo, Output output)\n+    {\n+        throw serializationNotSupportedException();\n+    }\n+\n+    @Override\n+    public void read(Kryo kryo, Input input)\n+    {\n+        throw serializationNotSupportedException();\n     }\n \n-    public int getLength()\n+    @Override\n+    public void writeExternal(ObjectOutput output)\n     {\n-        return length;\n+        throw serializationNotSupportedException();\n     }\n \n-    public byte[] getBytes()\n+    @Override\n+    public void readExternal(ObjectInput input)\n     {\n-        return bytes;\n+        throw serializationNotSupportedException();\n     }\n \n-    public long getRetainedSize()\n+    private static RuntimeException serializationNotSupportedException()\n     {\n-        return INSTANCE_SIZE + bytes.length;\n+        // PrestoSparkUnsafeRow is expected to be serialized only during shuffle.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "659f49113904133e527181bc097a18a90c40cae2"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA3MDcwMA==", "bodyText": "curious: in that case what's the motivation of having both PrestoSparkMutableRow and PrestoSparkMaterializedRow? :)  ? For example, can we have one type and both have customized shuffle serializer , and Kyro serialization?", "url": "https://github.com/prestodb/presto/pull/14634#discussion_r441070700", "createdAt": "2020-06-16T18:50:10Z", "author": {"login": "wenleix"}, "path": "presto-spark-classloader-interface/src/main/java/com/facebook/presto/spark/classloader_interface/PrestoSparkMutableRow.java", "diffHunk": "@@ -13,48 +13,87 @@\n  */\n package com.facebook.presto.spark.classloader_interface;\n \n-import java.io.Serializable;\n+import com.esotericsoftware.kryo.Kryo;\n+import com.esotericsoftware.kryo.KryoSerializable;\n+import com.esotericsoftware.kryo.io.Input;\n+import com.esotericsoftware.kryo.io.Output;\n \n-import static java.util.Objects.requireNonNull;\n+import java.io.Externalizable;\n+import java.io.ObjectInput;\n+import java.io.ObjectOutput;\n+import java.nio.ByteBuffer;\n \n public class PrestoSparkMutableRow\n-        implements Serializable\n+        implements Externalizable, KryoSerializable\n {\n-    private static final int INSTANCE_SIZE = Long.BYTES * 2 /* headers */\n-            + Integer.BYTES /* partition */\n-            + Integer.BYTES /* length */\n-            + Long.BYTES /* bytes pointer */\n-            + Long.BYTES * 2 /* bytes headers */\n-            + Integer.BYTES /* bytes length */;\n+    private int partition;\n+    private ByteBuffer buffer;\n \n-    private final int partition;\n-    private final int length;\n-    private final byte[] bytes;\n+    public int getPartition()\n+    {\n+        return partition;\n+    }\n \n-    public PrestoSparkMutableRow(int partition, int length, byte[] bytes)\n+    public void setPartition(int partition)\n     {\n         this.partition = partition;\n-        this.length = length;\n-        this.bytes = requireNonNull(bytes, \"bytes is null\");\n     }\n \n-    public int getPartition()\n+    public ByteBuffer getBuffer()\n     {\n-        return partition;\n+        return buffer;\n+    }\n+\n+    public void setBuffer(ByteBuffer buffer)\n+    {\n+        this.buffer = buffer;\n+    }\n+\n+    /**\n+     * TODO: Transitional method. Will be removed in the next commit.\n+     */\n+    public int getRetainedSize()\n+    {\n+        return Integer.SIZE + buffer.remaining();\n+    }\n+\n+    public PrestoSparkMaterializedRow toMaterializedRow()\n+    {\n+        byte[] copy = new byte[buffer.remaining()];\n+        System.arraycopy(buffer.array(), buffer.arrayOffset() + buffer.position(), copy, 0, buffer.remaining());\n+        return new PrestoSparkMaterializedRow(copy);\n+    }\n+\n+    @Override\n+    public void write(Kryo kryo, Output output)\n+    {\n+        throw serializationNotSupportedException();\n+    }\n+\n+    @Override\n+    public void read(Kryo kryo, Input input)\n+    {\n+        throw serializationNotSupportedException();\n     }\n \n-    public int getLength()\n+    @Override\n+    public void writeExternal(ObjectOutput output)\n     {\n-        return length;\n+        throw serializationNotSupportedException();\n     }\n \n-    public byte[] getBytes()\n+    @Override\n+    public void readExternal(ObjectInput input)\n     {\n-        return bytes;\n+        throw serializationNotSupportedException();\n     }\n \n-    public long getRetainedSize()\n+    private static RuntimeException serializationNotSupportedException()\n     {\n-        return INSTANCE_SIZE + bytes.length;\n+        // PrestoSparkUnsafeRow is expected to be serialized only during shuffle.\n+        // Shuffle rows are always serialized with PrestoSparkShuffleSerializer.\n+        // PrestoSparkUnsafeRow must be converted to PrestoSparkMaterializedRow before", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "659f49113904133e527181bc097a18a90c40cae2"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA3MTIwMw==", "bodyText": "So essentially, although PrestoSparkMutableRow claims it implements KryoSerializable interface, it just tricks the type system. As the serialization is actually done by PrestoSparkShuffleSerializer", "url": "https://github.com/prestodb/presto/pull/14634#discussion_r441071203", "createdAt": "2020-06-16T18:51:03Z", "author": {"login": "wenleix"}, "path": "presto-spark-classloader-interface/src/main/java/com/facebook/presto/spark/classloader_interface/PrestoSparkMutableRow.java", "diffHunk": "@@ -13,48 +13,87 @@\n  */\n package com.facebook.presto.spark.classloader_interface;\n \n-import java.io.Serializable;\n+import com.esotericsoftware.kryo.Kryo;\n+import com.esotericsoftware.kryo.KryoSerializable;\n+import com.esotericsoftware.kryo.io.Input;\n+import com.esotericsoftware.kryo.io.Output;\n \n-import static java.util.Objects.requireNonNull;\n+import java.io.Externalizable;\n+import java.io.ObjectInput;\n+import java.io.ObjectOutput;\n+import java.nio.ByteBuffer;\n \n public class PrestoSparkMutableRow\n-        implements Serializable\n+        implements Externalizable, KryoSerializable\n {\n-    private static final int INSTANCE_SIZE = Long.BYTES * 2 /* headers */\n-            + Integer.BYTES /* partition */\n-            + Integer.BYTES /* length */\n-            + Long.BYTES /* bytes pointer */\n-            + Long.BYTES * 2 /* bytes headers */\n-            + Integer.BYTES /* bytes length */;\n+    private int partition;\n+    private ByteBuffer buffer;\n \n-    private final int partition;\n-    private final int length;\n-    private final byte[] bytes;\n+    public int getPartition()\n+    {\n+        return partition;\n+    }\n \n-    public PrestoSparkMutableRow(int partition, int length, byte[] bytes)\n+    public void setPartition(int partition)\n     {\n         this.partition = partition;\n-        this.length = length;\n-        this.bytes = requireNonNull(bytes, \"bytes is null\");\n     }\n \n-    public int getPartition()\n+    public ByteBuffer getBuffer()\n     {\n-        return partition;\n+        return buffer;\n+    }\n+\n+    public void setBuffer(ByteBuffer buffer)\n+    {\n+        this.buffer = buffer;\n+    }\n+\n+    /**\n+     * TODO: Transitional method. Will be removed in the next commit.\n+     */\n+    public int getRetainedSize()\n+    {\n+        return Integer.SIZE + buffer.remaining();\n+    }\n+\n+    public PrestoSparkMaterializedRow toMaterializedRow()\n+    {\n+        byte[] copy = new byte[buffer.remaining()];\n+        System.arraycopy(buffer.array(), buffer.arrayOffset() + buffer.position(), copy, 0, buffer.remaining());\n+        return new PrestoSparkMaterializedRow(copy);\n+    }\n+\n+    @Override\n+    public void write(Kryo kryo, Output output)\n+    {\n+        throw serializationNotSupportedException();\n+    }\n+\n+    @Override\n+    public void read(Kryo kryo, Input input)\n+    {\n+        throw serializationNotSupportedException();\n     }\n \n-    public int getLength()\n+    @Override\n+    public void writeExternal(ObjectOutput output)\n     {\n-        return length;\n+        throw serializationNotSupportedException();\n     }\n \n-    public byte[] getBytes()\n+    @Override\n+    public void readExternal(ObjectInput input)\n     {\n-        return bytes;\n+        throw serializationNotSupportedException();\n     }\n \n-    public long getRetainedSize()\n+    private static RuntimeException serializationNotSupportedException()\n     {\n-        return INSTANCE_SIZE + bytes.length;\n+        // PrestoSparkUnsafeRow is expected to be serialized only during shuffle.\n+        // Shuffle rows are always serialized with PrestoSparkShuffleSerializer.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "659f49113904133e527181bc097a18a90c40cae2"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA3MTkxNw==", "bodyText": "What's this default key?", "url": "https://github.com/prestodb/presto/pull/14634#discussion_r441071917", "createdAt": "2020-06-16T18:52:20Z", "author": {"login": "wenleix"}, "path": "presto-spark-classloader-interface/src/main/java/com/facebook/presto/spark/classloader_interface/PrestoSparkShuffleSerializer.java", "diffHunk": "@@ -0,0 +1,289 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.spark.classloader_interface;\n+\n+import org.apache.spark.serializer.DeserializationStream;\n+import org.apache.spark.serializer.SerializationStream;\n+import org.apache.spark.serializer.Serializer;\n+import org.apache.spark.serializer.SerializerInstance;\n+import scala.Tuple2;\n+import scala.collection.Iterator;\n+import scala.reflect.ClassTag;\n+\n+import java.io.DataInputStream;\n+import java.io.DataOutputStream;\n+import java.io.EOFException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.io.Serializable;\n+import java.io.UncheckedIOException;\n+import java.nio.ByteBuffer;\n+import java.util.NoSuchElementException;\n+\n+import static java.util.Objects.requireNonNull;\n+import static scala.collection.JavaConversions.asScalaIterator;\n+\n+public class PrestoSparkShuffleSerializer\n+        extends Serializer\n+        implements Serializable\n+{\n+    private static final Integer DEFAULT_KEY = -1;\n+\n+    @Override\n+    public SerializerInstance newInstance()\n+    {\n+        return new PrestoSparkShuffleSerializerInstance();\n+    }\n+\n+    @Override\n+    public boolean supportsRelocationOfSerializedObjects()\n+    {\n+        return true;\n+    }\n+\n+    public static class PrestoSparkShuffleSerializerInstance\n+            extends SerializerInstance\n+    {\n+        @Override\n+        public SerializationStream serializeStream(OutputStream outputStream)\n+        {\n+            return new PrestoSparkShuffleSerializationStream(outputStream);\n+        }\n+\n+        @Override\n+        public DeserializationStream deserializeStream(InputStream inputStream)\n+        {\n+            return new PrestoSparkShuffleDeserializationStream(inputStream);\n+        }\n+\n+        @Override\n+        public <T> ByteBuffer serialize(T tuple, ClassTag<T> classTag)\n+        {\n+            throw new UnsupportedOperationException(\"this method is never used by shuffle\");\n+        }\n+\n+        @Override\n+        public <T> T deserialize(ByteBuffer buffer, ClassTag<T> classTag)\n+        {\n+            throw new UnsupportedOperationException(\"this method is never used by shuffle\");\n+        }\n+\n+        @Override\n+        public <T> T deserialize(ByteBuffer bytes, ClassLoader loader, ClassTag<T> classTag)\n+        {\n+            throw new UnsupportedOperationException(\"this method is never used by shuffle\");\n+        }\n+    }\n+\n+    public static class PrestoSparkShuffleSerializationStream\n+            extends SerializationStream\n+    {\n+        private final DataOutputStream outputStream;\n+\n+        public PrestoSparkShuffleSerializationStream(OutputStream outputStream)\n+        {\n+            this.outputStream = new DataOutputStream(requireNonNull(outputStream, \"outputStream is null\"));\n+        }\n+\n+        @Override\n+        public <T> SerializationStream writeKey(T key, ClassTag<T> classTag)\n+        {\n+            // key is only needed to select partition\n+            return this;\n+        }\n+\n+        @Override\n+        public <T> SerializationStream writeValue(T value, ClassTag<T> classTag)\n+        {\n+            PrestoSparkMutableRow row = (PrestoSparkMutableRow) value;\n+            ByteBuffer buffer = row.getBuffer();\n+            int length = buffer.remaining();\n+            try {\n+                outputStream.writeInt(length);\n+                outputStream.write(buffer.array(), buffer.arrayOffset() + buffer.position(), length);\n+            }\n+            catch (IOException e) {\n+                throw new UncheckedIOException(e);\n+            }\n+            return this;\n+        }\n+\n+        @Override\n+        public void flush()\n+        {\n+            try {\n+                outputStream.flush();\n+            }\n+            catch (IOException e) {\n+                throw new UncheckedIOException(e);\n+            }\n+        }\n+\n+        @Override\n+        public void close()\n+        {\n+            try {\n+                outputStream.close();\n+            }\n+            catch (IOException e) {\n+                throw new UncheckedIOException(e);\n+            }\n+        }\n+\n+        @Override\n+        public <T> SerializationStream writeObject(T tuple, ClassTag<T> classTag)\n+        {\n+            throw new UnsupportedOperationException(\"this method is never used by shuffle\");\n+        }\n+\n+        @Override\n+        public <T> SerializationStream writeAll(Iterator<T> iterator, ClassTag<T> classTag)\n+        {\n+            throw new UnsupportedOperationException(\"this method is never used by shuffle\");\n+        }\n+    }\n+\n+    public static class PrestoSparkShuffleDeserializationStream\n+            extends DeserializationStream\n+    {\n+        private final DataInputStream inputStream;\n+\n+        private final MutablePartitionId mutablePartitionId = new MutablePartitionId();\n+        private final PrestoSparkMutableRow row = new PrestoSparkMutableRow();\n+        private final Tuple2<Object, Object> tuple = new Tuple2<>(mutablePartitionId, row);\n+\n+        private byte[] bytes;\n+        private ByteBuffer buffer;\n+\n+        public PrestoSparkShuffleDeserializationStream(InputStream inputStream)\n+        {\n+            this.inputStream = new DataInputStream(requireNonNull(inputStream, \"inputStream is null\"));\n+        }\n+\n+        @Override\n+        public Iterator<Tuple2<Object, Object>> asKeyValueIterator()\n+        {\n+            return asScalaIterator(new java.util.Iterator<Tuple2<Object, Object>>()\n+            {\n+                private Tuple2<Object, Object> next;\n+\n+                @Override\n+                public boolean hasNext()\n+                {\n+                    if (next == null) {\n+                        next = tryComputeNext();\n+                    }\n+                    return next != null;\n+                }\n+\n+                @Override\n+                public Tuple2<Object, Object> next()\n+                {\n+                    if (next == null) {\n+                        next = tryComputeNext();\n+                    }\n+                    if (next == null) {\n+                        throw new NoSuchElementException();\n+                    }\n+                    Tuple2<Object, Object> result = next;\n+                    next = null;\n+                    return result;\n+                }\n+\n+                private Tuple2<Object, Object> tryComputeNext()\n+                {\n+                    int length;\n+                    try {\n+                        length = inputStream.readInt();\n+                    }\n+                    catch (EOFException e) {\n+                        return null;\n+                    }\n+                    catch (IOException e) {\n+                        throw new UncheckedIOException(e);\n+                    }\n+\n+                    try {\n+                        readRowData(length);\n+                    }\n+                    catch (IOException e) {\n+                        throw new UncheckedIOException(e);\n+                    }\n+                    return tuple;\n+                }\n+            });\n+        }\n+\n+        @Override\n+        public <T> T readKey(ClassTag<T> classTag)\n+        {\n+            return (T) DEFAULT_KEY;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "659f49113904133e527181bc097a18a90c40cae2"}, "originalPosition": 232}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxODUwODU5", "url": "https://github.com/prestodb/presto/pull/14634#pullrequestreview-431850859", "createdAt": "2020-06-16T20:05:08Z", "commit": {"oid": "ce30ae12c53bc950b0e243eb315371b31e7d118c"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMDowNTowOVrOGkrPEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMzowNDo0MlrOGkwFOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTExMDI5MA==", "bodyText": "nit : why not output.slice().getInput()? (I learned this pattern from your previous commits.. )", "url": "https://github.com/prestodb/presto/pull/14634#discussion_r441110290", "createdAt": "2020-06-16T20:05:09Z", "author": {"login": "wenleix"}, "path": "presto-spark-base/src/main/java/com/facebook/presto/spark/execution/PrestoSparkMutableRowPageInput.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.spark.execution;\n+\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.common.PageBuilder;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.spark.classloader_interface.PrestoSparkMutableRow;\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.slice.BasicSliceInput;\n+import io.airlift.slice.DynamicSliceOutput;\n+import io.airlift.slice.SliceInput;\n+import io.airlift.slice.SliceOutput;\n+\n+import java.nio.ByteBuffer;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import static com.google.common.base.Verify.verify;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PrestoSparkMutableRowPageInput\n+        implements PrestoSparkPageInput\n+{\n+    private static final int TARGET_SIZE = 1024 * 1024;\n+    private static final int BUFFER_SIZE = (int) (TARGET_SIZE * 1.2f);\n+    private static final int MAX_ROWS_PER_ZERO_COLUMN_PAGE = 10_000;\n+\n+    private final List<Type> types;\n+    private final Iterator<PrestoSparkMutableRow> rowsIterator;\n+\n+    public PrestoSparkMutableRowPageInput(List<Type> types, Iterator<PrestoSparkMutableRow> rowsIterator)\n+    {\n+        this.types = ImmutableList.copyOf(requireNonNull(types, \"types is null\"));\n+        this.rowsIterator = requireNonNull(rowsIterator, \"rowsIterator is null\");\n+    }\n+\n+    @Override\n+    public Page getNextPage()\n+    {\n+        // zero columns page\n+        if (types.isEmpty()) {\n+            int rowsCount = 0;\n+            synchronized (rowsIterator) {\n+                if (!rowsIterator.hasNext()) {\n+                    return null;\n+                }\n+                while (rowsIterator.hasNext() && rowsCount < MAX_ROWS_PER_ZERO_COLUMN_PAGE) {\n+                    rowsIterator.next();\n+                    rowsCount++;\n+                }\n+            }\n+            return new Page(rowsCount);\n+        }\n+\n+        SliceOutput output = new DynamicSliceOutput(BUFFER_SIZE);\n+        int rowCount = 0;\n+        synchronized (rowsIterator) {\n+            if (!rowsIterator.hasNext()) {\n+                return null;\n+            }\n+            while (rowsIterator.hasNext() && output.size() < TARGET_SIZE) {\n+                PrestoSparkMutableRow row = rowsIterator.next();\n+                ByteBuffer buffer = row.getBuffer();\n+                output.writeBytes(buffer.array(), buffer.arrayOffset() + buffer.position(), buffer.remaining());\n+                rowCount++;\n+            }\n+        }\n+        SliceInput sliceInput = new BasicSliceInput(output.slice());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce30ae12c53bc950b0e243eb315371b31e7d118c"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE4OTY5MQ==", "bodyText": "A nice refactor to have named PrestoSparkPageInput class (instead of a general iterator).\nCurious why now syntonization is not required?", "url": "https://github.com/prestodb/presto/pull/14634#discussion_r441189691", "createdAt": "2020-06-16T23:04:42Z", "author": {"login": "wenleix"}, "path": "presto-spark-base/src/main/java/com/facebook/presto/spark/execution/PrestoSparkRemoteSourceOperator.java", "diffHunk": "@@ -70,13 +69,12 @@ public Page getOutput()\n             return null;\n         }\n \n-        synchronized (iterator) {\n-            if (!iterator.hasNext()) {\n-                finished = true;\n-                return null;\n-            }\n-            return iterator.next();\n+        Page page = pageInput.getNextPage();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce30ae12c53bc950b0e243eb315371b31e7d118c"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMDczMzY2", "url": "https://github.com/prestodb/presto/pull/14634#pullrequestreview-432073366", "createdAt": "2020-06-17T05:42:30Z", "commit": {"oid": "b938ed175cfe80e8851fff6388ab1abb1a7b33a0"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNTo0MjozMVrOGk2YAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNjowMzoxNFrOGk2yig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI5MjgwMg==", "bodyText": "Instead of setting rowPartitions[rowCount] to a special negative value, I personally prefer to have a separate replicate boolean array. This also aligns with the null bit design in Block.", "url": "https://github.com/prestodb/presto/pull/14634#discussion_r441292802", "createdAt": "2020-06-17T05:42:31Z", "author": {"login": "wenleix"}, "path": "presto-spark-base/src/main/java/com/facebook/presto/spark/execution/PrestoSparkRowBatch.java", "diffHunk": "@@ -0,0 +1,216 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.spark.execution;\n+\n+import com.facebook.presto.spark.classloader_interface.MutablePartitionId;\n+import com.facebook.presto.spark.classloader_interface.PrestoSparkMutableRow;\n+import com.google.common.collect.AbstractIterator;\n+import io.airlift.slice.DynamicSliceOutput;\n+import io.airlift.slice.SliceOutput;\n+import org.openjdk.jol.info.ClassLayout;\n+import scala.Tuple2;\n+\n+import java.nio.ByteBuffer;\n+import java.util.Arrays;\n+import java.util.Iterator;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static io.airlift.slice.SizeOf.sizeOf;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PrestoSparkRowBatch\n+{\n+    private static final int INSTANCE_SIZE = ClassLayout.parseClass(PrestoSparkRowBatch.class).instanceSize();\n+\n+    private static final int DEFAULT_TARGET_SIZE = 1024 * 1024;\n+    private static final int DEFAULT_EXPECTED_ROWS_COUNT = 10000;\n+\n+    private final int rowCount;\n+    private final byte[] rowData;\n+    private final int[] rowPartitions;\n+    private final int[] rowSizes;\n+    private final long retainedSizeInBytes;\n+\n+    public PrestoSparkRowBatch(int rowCount, byte[] rowData, int[] rowPartitions, int[] rowSizes)\n+    {\n+        this.rowCount = rowCount;\n+        this.rowData = requireNonNull(rowData, \"rowData is null\");\n+        this.rowPartitions = requireNonNull(rowPartitions, \"rowPartitions is null\");\n+        this.rowSizes = requireNonNull(rowSizes, \"rowSizes is null\");\n+        this.retainedSizeInBytes = INSTANCE_SIZE\n+                + sizeOf(rowData)\n+                + sizeOf(rowPartitions)\n+                + sizeOf(rowSizes);\n+    }\n+\n+    public Iterator<Tuple2<MutablePartitionId, PrestoSparkMutableRow>> createRowTupleIterator()\n+    {\n+        return new RowTupleIterator(rowCount, rowData, rowPartitions, rowSizes);\n+    }\n+\n+    public long getRetainedSizeInBytes()\n+    {\n+        return retainedSizeInBytes;\n+    }\n+\n+    public static PrestoSparkRowBatchBuilder builder()\n+    {\n+        return new PrestoSparkRowBatchBuilder(DEFAULT_TARGET_SIZE, DEFAULT_EXPECTED_ROWS_COUNT);\n+    }\n+\n+    public static PrestoSparkRowBatchBuilder builder(int targetSizeInBytes, int expectedRowsCount)\n+    {\n+        return new PrestoSparkRowBatchBuilder(targetSizeInBytes, expectedRowsCount);\n+    }\n+\n+    public static class PrestoSparkRowBatchBuilder\n+    {\n+        private static final int BUILDER_INSTANCE_SIZE = ClassLayout.parseClass(PrestoSparkRowBatchBuilder.class).instanceSize();\n+\n+        private final int targetSizeInBytes;\n+        private final DynamicSliceOutput sliceOutput;\n+        private int[] rowSizes;\n+        private int[] rowPartitions;\n+        private int rowCount;\n+\n+        private int currentRowOffset;\n+        private boolean openEntry;\n+\n+        public PrestoSparkRowBatchBuilder(int targetSizeInBytes, int expectedRowsCount)\n+        {\n+            this.targetSizeInBytes = targetSizeInBytes;\n+            sliceOutput = new DynamicSliceOutput((int) (targetSizeInBytes * 1.2f));\n+            rowSizes = new int[expectedRowsCount];\n+            rowPartitions = new int[expectedRowsCount];\n+        }\n+\n+        public long getRetainedSizeInBytes()\n+        {\n+            return BUILDER_INSTANCE_SIZE + sliceOutput.getRetainedSize() + sizeOf(rowSizes) + sizeOf(rowPartitions);\n+        }\n+\n+        public boolean isFull()\n+        {\n+            return sliceOutput.size() >= targetSizeInBytes;\n+        }\n+\n+        public boolean isEmpty()\n+        {\n+            return rowCount == 0;\n+        }\n+\n+        public SliceOutput beginRowEntry()\n+        {\n+            checkState(!openEntry, \"previous entry must be closed before creating a new entry\");\n+            openEntry = true;\n+            currentRowOffset = sliceOutput.size();\n+            return sliceOutput;\n+        }\n+\n+        public void closeEntry(int partition, int partitionCount, boolean replicate)\n+        {\n+            checkState(openEntry, \"entry must be opened first\");\n+            openEntry = false;\n+\n+            rowSizes = ensureCapacity(rowSizes, rowCount + 1);\n+            rowSizes[rowCount] = sliceOutput.size() - currentRowOffset;\n+\n+            rowPartitions = ensureCapacity(rowPartitions, rowCount + 1);\n+            if (replicate) {\n+                checkArgument(partitionCount > 0, \"partitionCount must be greater then zero: %s\", partitionCount);\n+                rowPartitions[rowCount] = -partitionCount;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b938ed175cfe80e8851fff6388ab1abb1a7b33a0"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI5Mjg2Mw==", "bodyText": "Can we pass in the partitionCount when creating the PrestoSparkRowBatchBuilder? -- thus we don't need to pass partitionCount in closeEntry.", "url": "https://github.com/prestodb/presto/pull/14634#discussion_r441292863", "createdAt": "2020-06-17T05:42:44Z", "author": {"login": "wenleix"}, "path": "presto-spark-base/src/main/java/com/facebook/presto/spark/execution/PrestoSparkRowBatch.java", "diffHunk": "@@ -0,0 +1,216 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.spark.execution;\n+\n+import com.facebook.presto.spark.classloader_interface.MutablePartitionId;\n+import com.facebook.presto.spark.classloader_interface.PrestoSparkMutableRow;\n+import com.google.common.collect.AbstractIterator;\n+import io.airlift.slice.DynamicSliceOutput;\n+import io.airlift.slice.SliceOutput;\n+import org.openjdk.jol.info.ClassLayout;\n+import scala.Tuple2;\n+\n+import java.nio.ByteBuffer;\n+import java.util.Arrays;\n+import java.util.Iterator;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static io.airlift.slice.SizeOf.sizeOf;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PrestoSparkRowBatch\n+{\n+    private static final int INSTANCE_SIZE = ClassLayout.parseClass(PrestoSparkRowBatch.class).instanceSize();\n+\n+    private static final int DEFAULT_TARGET_SIZE = 1024 * 1024;\n+    private static final int DEFAULT_EXPECTED_ROWS_COUNT = 10000;\n+\n+    private final int rowCount;\n+    private final byte[] rowData;\n+    private final int[] rowPartitions;\n+    private final int[] rowSizes;\n+    private final long retainedSizeInBytes;\n+\n+    public PrestoSparkRowBatch(int rowCount, byte[] rowData, int[] rowPartitions, int[] rowSizes)\n+    {\n+        this.rowCount = rowCount;\n+        this.rowData = requireNonNull(rowData, \"rowData is null\");\n+        this.rowPartitions = requireNonNull(rowPartitions, \"rowPartitions is null\");\n+        this.rowSizes = requireNonNull(rowSizes, \"rowSizes is null\");\n+        this.retainedSizeInBytes = INSTANCE_SIZE\n+                + sizeOf(rowData)\n+                + sizeOf(rowPartitions)\n+                + sizeOf(rowSizes);\n+    }\n+\n+    public Iterator<Tuple2<MutablePartitionId, PrestoSparkMutableRow>> createRowTupleIterator()\n+    {\n+        return new RowTupleIterator(rowCount, rowData, rowPartitions, rowSizes);\n+    }\n+\n+    public long getRetainedSizeInBytes()\n+    {\n+        return retainedSizeInBytes;\n+    }\n+\n+    public static PrestoSparkRowBatchBuilder builder()\n+    {\n+        return new PrestoSparkRowBatchBuilder(DEFAULT_TARGET_SIZE, DEFAULT_EXPECTED_ROWS_COUNT);\n+    }\n+\n+    public static PrestoSparkRowBatchBuilder builder(int targetSizeInBytes, int expectedRowsCount)\n+    {\n+        return new PrestoSparkRowBatchBuilder(targetSizeInBytes, expectedRowsCount);\n+    }\n+\n+    public static class PrestoSparkRowBatchBuilder\n+    {\n+        private static final int BUILDER_INSTANCE_SIZE = ClassLayout.parseClass(PrestoSparkRowBatchBuilder.class).instanceSize();\n+\n+        private final int targetSizeInBytes;\n+        private final DynamicSliceOutput sliceOutput;\n+        private int[] rowSizes;\n+        private int[] rowPartitions;\n+        private int rowCount;\n+\n+        private int currentRowOffset;\n+        private boolean openEntry;\n+\n+        public PrestoSparkRowBatchBuilder(int targetSizeInBytes, int expectedRowsCount)\n+        {\n+            this.targetSizeInBytes = targetSizeInBytes;\n+            sliceOutput = new DynamicSliceOutput((int) (targetSizeInBytes * 1.2f));\n+            rowSizes = new int[expectedRowsCount];\n+            rowPartitions = new int[expectedRowsCount];\n+        }\n+\n+        public long getRetainedSizeInBytes()\n+        {\n+            return BUILDER_INSTANCE_SIZE + sliceOutput.getRetainedSize() + sizeOf(rowSizes) + sizeOf(rowPartitions);\n+        }\n+\n+        public boolean isFull()\n+        {\n+            return sliceOutput.size() >= targetSizeInBytes;\n+        }\n+\n+        public boolean isEmpty()\n+        {\n+            return rowCount == 0;\n+        }\n+\n+        public SliceOutput beginRowEntry()\n+        {\n+            checkState(!openEntry, \"previous entry must be closed before creating a new entry\");\n+            openEntry = true;\n+            currentRowOffset = sliceOutput.size();\n+            return sliceOutput;\n+        }\n+\n+        public void closeEntry(int partition, int partitionCount, boolean replicate)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b938ed175cfe80e8851fff6388ab1abb1a7b33a0"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI5Mjg4NA==", "bodyText": "Also note partition parameter is only useful when replicate is set to be false. Another thought is seperating closeEntry for replicate and non-replicate row:\n\ncloseEntryForReplicateRow()\ncloseEntryForNonReplicateRow(int partition)\n\nFeel free to consider this a a possible future refactor.", "url": "https://github.com/prestodb/presto/pull/14634#discussion_r441292884", "createdAt": "2020-06-17T05:42:47Z", "author": {"login": "wenleix"}, "path": "presto-spark-base/src/main/java/com/facebook/presto/spark/execution/PrestoSparkRowBatch.java", "diffHunk": "@@ -0,0 +1,216 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.spark.execution;\n+\n+import com.facebook.presto.spark.classloader_interface.MutablePartitionId;\n+import com.facebook.presto.spark.classloader_interface.PrestoSparkMutableRow;\n+import com.google.common.collect.AbstractIterator;\n+import io.airlift.slice.DynamicSliceOutput;\n+import io.airlift.slice.SliceOutput;\n+import org.openjdk.jol.info.ClassLayout;\n+import scala.Tuple2;\n+\n+import java.nio.ByteBuffer;\n+import java.util.Arrays;\n+import java.util.Iterator;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static io.airlift.slice.SizeOf.sizeOf;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PrestoSparkRowBatch\n+{\n+    private static final int INSTANCE_SIZE = ClassLayout.parseClass(PrestoSparkRowBatch.class).instanceSize();\n+\n+    private static final int DEFAULT_TARGET_SIZE = 1024 * 1024;\n+    private static final int DEFAULT_EXPECTED_ROWS_COUNT = 10000;\n+\n+    private final int rowCount;\n+    private final byte[] rowData;\n+    private final int[] rowPartitions;\n+    private final int[] rowSizes;\n+    private final long retainedSizeInBytes;\n+\n+    public PrestoSparkRowBatch(int rowCount, byte[] rowData, int[] rowPartitions, int[] rowSizes)\n+    {\n+        this.rowCount = rowCount;\n+        this.rowData = requireNonNull(rowData, \"rowData is null\");\n+        this.rowPartitions = requireNonNull(rowPartitions, \"rowPartitions is null\");\n+        this.rowSizes = requireNonNull(rowSizes, \"rowSizes is null\");\n+        this.retainedSizeInBytes = INSTANCE_SIZE\n+                + sizeOf(rowData)\n+                + sizeOf(rowPartitions)\n+                + sizeOf(rowSizes);\n+    }\n+\n+    public Iterator<Tuple2<MutablePartitionId, PrestoSparkMutableRow>> createRowTupleIterator()\n+    {\n+        return new RowTupleIterator(rowCount, rowData, rowPartitions, rowSizes);\n+    }\n+\n+    public long getRetainedSizeInBytes()\n+    {\n+        return retainedSizeInBytes;\n+    }\n+\n+    public static PrestoSparkRowBatchBuilder builder()\n+    {\n+        return new PrestoSparkRowBatchBuilder(DEFAULT_TARGET_SIZE, DEFAULT_EXPECTED_ROWS_COUNT);\n+    }\n+\n+    public static PrestoSparkRowBatchBuilder builder(int targetSizeInBytes, int expectedRowsCount)\n+    {\n+        return new PrestoSparkRowBatchBuilder(targetSizeInBytes, expectedRowsCount);\n+    }\n+\n+    public static class PrestoSparkRowBatchBuilder\n+    {\n+        private static final int BUILDER_INSTANCE_SIZE = ClassLayout.parseClass(PrestoSparkRowBatchBuilder.class).instanceSize();\n+\n+        private final int targetSizeInBytes;\n+        private final DynamicSliceOutput sliceOutput;\n+        private int[] rowSizes;\n+        private int[] rowPartitions;\n+        private int rowCount;\n+\n+        private int currentRowOffset;\n+        private boolean openEntry;\n+\n+        public PrestoSparkRowBatchBuilder(int targetSizeInBytes, int expectedRowsCount)\n+        {\n+            this.targetSizeInBytes = targetSizeInBytes;\n+            sliceOutput = new DynamicSliceOutput((int) (targetSizeInBytes * 1.2f));\n+            rowSizes = new int[expectedRowsCount];\n+            rowPartitions = new int[expectedRowsCount];\n+        }\n+\n+        public long getRetainedSizeInBytes()\n+        {\n+            return BUILDER_INSTANCE_SIZE + sliceOutput.getRetainedSize() + sizeOf(rowSizes) + sizeOf(rowPartitions);\n+        }\n+\n+        public boolean isFull()\n+        {\n+            return sliceOutput.size() >= targetSizeInBytes;\n+        }\n+\n+        public boolean isEmpty()\n+        {\n+            return rowCount == 0;\n+        }\n+\n+        public SliceOutput beginRowEntry()\n+        {\n+            checkState(!openEntry, \"previous entry must be closed before creating a new entry\");\n+            openEntry = true;\n+            currentRowOffset = sliceOutput.size();\n+            return sliceOutput;\n+        }\n+\n+        public void closeEntry(int partition, int partitionCount, boolean replicate)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI5Mjg2Mw=="}, "originalCommit": {"oid": "b938ed175cfe80e8851fff6388ab1abb1a7b33a0"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI5MzI4OA==", "bodyText": "When partition is negative, it also encodes the number of total partitions. Can we just pass the number of total partitions in constructor so it doesn't have to be encoded in partition? \ud83d\ude03", "url": "https://github.com/prestodb/presto/pull/14634#discussion_r441293288", "createdAt": "2020-06-17T05:44:07Z", "author": {"login": "wenleix"}, "path": "presto-spark-base/src/main/java/com/facebook/presto/spark/execution/PrestoSparkRowBatch.java", "diffHunk": "@@ -0,0 +1,216 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.spark.execution;\n+\n+import com.facebook.presto.spark.classloader_interface.MutablePartitionId;\n+import com.facebook.presto.spark.classloader_interface.PrestoSparkMutableRow;\n+import com.google.common.collect.AbstractIterator;\n+import io.airlift.slice.DynamicSliceOutput;\n+import io.airlift.slice.SliceOutput;\n+import org.openjdk.jol.info.ClassLayout;\n+import scala.Tuple2;\n+\n+import java.nio.ByteBuffer;\n+import java.util.Arrays;\n+import java.util.Iterator;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static io.airlift.slice.SizeOf.sizeOf;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PrestoSparkRowBatch\n+{\n+    private static final int INSTANCE_SIZE = ClassLayout.parseClass(PrestoSparkRowBatch.class).instanceSize();\n+\n+    private static final int DEFAULT_TARGET_SIZE = 1024 * 1024;\n+    private static final int DEFAULT_EXPECTED_ROWS_COUNT = 10000;\n+\n+    private final int rowCount;\n+    private final byte[] rowData;\n+    private final int[] rowPartitions;\n+    private final int[] rowSizes;\n+    private final long retainedSizeInBytes;\n+\n+    public PrestoSparkRowBatch(int rowCount, byte[] rowData, int[] rowPartitions, int[] rowSizes)\n+    {\n+        this.rowCount = rowCount;\n+        this.rowData = requireNonNull(rowData, \"rowData is null\");\n+        this.rowPartitions = requireNonNull(rowPartitions, \"rowPartitions is null\");\n+        this.rowSizes = requireNonNull(rowSizes, \"rowSizes is null\");\n+        this.retainedSizeInBytes = INSTANCE_SIZE\n+                + sizeOf(rowData)\n+                + sizeOf(rowPartitions)\n+                + sizeOf(rowSizes);\n+    }\n+\n+    public Iterator<Tuple2<MutablePartitionId, PrestoSparkMutableRow>> createRowTupleIterator()\n+    {\n+        return new RowTupleIterator(rowCount, rowData, rowPartitions, rowSizes);\n+    }\n+\n+    public long getRetainedSizeInBytes()\n+    {\n+        return retainedSizeInBytes;\n+    }\n+\n+    public static PrestoSparkRowBatchBuilder builder()\n+    {\n+        return new PrestoSparkRowBatchBuilder(DEFAULT_TARGET_SIZE, DEFAULT_EXPECTED_ROWS_COUNT);\n+    }\n+\n+    public static PrestoSparkRowBatchBuilder builder(int targetSizeInBytes, int expectedRowsCount)\n+    {\n+        return new PrestoSparkRowBatchBuilder(targetSizeInBytes, expectedRowsCount);\n+    }\n+\n+    public static class PrestoSparkRowBatchBuilder\n+    {\n+        private static final int BUILDER_INSTANCE_SIZE = ClassLayout.parseClass(PrestoSparkRowBatchBuilder.class).instanceSize();\n+\n+        private final int targetSizeInBytes;\n+        private final DynamicSliceOutput sliceOutput;\n+        private int[] rowSizes;\n+        private int[] rowPartitions;\n+        private int rowCount;\n+\n+        private int currentRowOffset;\n+        private boolean openEntry;\n+\n+        public PrestoSparkRowBatchBuilder(int targetSizeInBytes, int expectedRowsCount)\n+        {\n+            this.targetSizeInBytes = targetSizeInBytes;\n+            sliceOutput = new DynamicSliceOutput((int) (targetSizeInBytes * 1.2f));\n+            rowSizes = new int[expectedRowsCount];\n+            rowPartitions = new int[expectedRowsCount];\n+        }\n+\n+        public long getRetainedSizeInBytes()\n+        {\n+            return BUILDER_INSTANCE_SIZE + sliceOutput.getRetainedSize() + sizeOf(rowSizes) + sizeOf(rowPartitions);\n+        }\n+\n+        public boolean isFull()\n+        {\n+            return sliceOutput.size() >= targetSizeInBytes;\n+        }\n+\n+        public boolean isEmpty()\n+        {\n+            return rowCount == 0;\n+        }\n+\n+        public SliceOutput beginRowEntry()\n+        {\n+            checkState(!openEntry, \"previous entry must be closed before creating a new entry\");\n+            openEntry = true;\n+            currentRowOffset = sliceOutput.size();\n+            return sliceOutput;\n+        }\n+\n+        public void closeEntry(int partition, int partitionCount, boolean replicate)\n+        {\n+            checkState(openEntry, \"entry must be opened first\");\n+            openEntry = false;\n+\n+            rowSizes = ensureCapacity(rowSizes, rowCount + 1);\n+            rowSizes[rowCount] = sliceOutput.size() - currentRowOffset;\n+\n+            rowPartitions = ensureCapacity(rowPartitions, rowCount + 1);\n+            if (replicate) {\n+                checkArgument(partitionCount > 0, \"partitionCount must be greater then zero: %s\", partitionCount);\n+                rowPartitions[rowCount] = -partitionCount;\n+            }\n+            else {\n+                rowPartitions[rowCount] = partition;\n+            }\n+\n+            rowCount++;\n+        }\n+\n+        private static int[] ensureCapacity(int[] array, int capacity)\n+        {\n+            if (array.length >= capacity) {\n+                return array;\n+            }\n+            return Arrays.copyOf(array, capacity * 2);\n+        }\n+\n+        public PrestoSparkRowBatch build()\n+        {\n+            checkState(!openEntry, \"entry must be closed before creating a row batch\");\n+            return new PrestoSparkRowBatch(rowCount, sliceOutput.getUnderlyingSlice().byteArray(), rowPartitions, rowSizes);\n+        }\n+    }\n+\n+    private static class RowTupleIterator\n+            extends AbstractIterator<Tuple2<MutablePartitionId, PrestoSparkMutableRow>>\n+    {\n+        private final int rowCount;\n+        private final int[] rowPartitions;\n+        private final int[] rowSizes;\n+\n+        private int replicatePartition = -1;\n+        private int currentRow;\n+        private int currentOffset;\n+        private final ByteBuffer rowData;\n+        private final MutablePartitionId mutablePartitionId;\n+        private final Tuple2<MutablePartitionId, PrestoSparkMutableRow> tuple;\n+\n+        private RowTupleIterator(int rowCount, byte[] rowData, int[] rowPartitions, int[] rowSizes)\n+        {\n+            this.rowCount = rowCount;\n+            this.rowPartitions = requireNonNull(rowPartitions, \"rowPartitions is null\");\n+            this.rowSizes = requireNonNull(rowSizes, \"rowSizes is null\");\n+\n+            this.rowData = ByteBuffer.wrap(requireNonNull(rowData, \"rowData is null\"));\n+            mutablePartitionId = new MutablePartitionId();\n+            PrestoSparkMutableRow row = new PrestoSparkMutableRow();\n+            row.setBuffer(this.rowData);\n+            tuple = new Tuple2<>(mutablePartitionId, row);\n+        }\n+\n+        @Override\n+        protected Tuple2<MutablePartitionId, PrestoSparkMutableRow> computeNext()\n+        {\n+            if (currentRow >= rowCount) {\n+                return endOfData();\n+            }\n+\n+            int rowSize = rowSizes[currentRow];\n+            rowData.limit(currentOffset + rowSize);\n+            rowData.position(currentOffset);\n+\n+            int partition = rowPartitions[currentRow];\n+            if (partition < 0) {\n+                if (replicatePartition < 0) {\n+                    replicatePartition = -partition;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b938ed175cfe80e8851fff6388ab1abb1a7b33a0"}, "originalPosition": 198}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI5MzgyOA==", "bodyText": "nit: What about remainingReplicantCount? And make the default value to be 0 instead of -1", "url": "https://github.com/prestodb/presto/pull/14634#discussion_r441293828", "createdAt": "2020-06-17T05:45:44Z", "author": {"login": "wenleix"}, "path": "presto-spark-base/src/main/java/com/facebook/presto/spark/execution/PrestoSparkRowBatch.java", "diffHunk": "@@ -0,0 +1,216 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.spark.execution;\n+\n+import com.facebook.presto.spark.classloader_interface.MutablePartitionId;\n+import com.facebook.presto.spark.classloader_interface.PrestoSparkMutableRow;\n+import com.google.common.collect.AbstractIterator;\n+import io.airlift.slice.DynamicSliceOutput;\n+import io.airlift.slice.SliceOutput;\n+import org.openjdk.jol.info.ClassLayout;\n+import scala.Tuple2;\n+\n+import java.nio.ByteBuffer;\n+import java.util.Arrays;\n+import java.util.Iterator;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static io.airlift.slice.SizeOf.sizeOf;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PrestoSparkRowBatch\n+{\n+    private static final int INSTANCE_SIZE = ClassLayout.parseClass(PrestoSparkRowBatch.class).instanceSize();\n+\n+    private static final int DEFAULT_TARGET_SIZE = 1024 * 1024;\n+    private static final int DEFAULT_EXPECTED_ROWS_COUNT = 10000;\n+\n+    private final int rowCount;\n+    private final byte[] rowData;\n+    private final int[] rowPartitions;\n+    private final int[] rowSizes;\n+    private final long retainedSizeInBytes;\n+\n+    public PrestoSparkRowBatch(int rowCount, byte[] rowData, int[] rowPartitions, int[] rowSizes)\n+    {\n+        this.rowCount = rowCount;\n+        this.rowData = requireNonNull(rowData, \"rowData is null\");\n+        this.rowPartitions = requireNonNull(rowPartitions, \"rowPartitions is null\");\n+        this.rowSizes = requireNonNull(rowSizes, \"rowSizes is null\");\n+        this.retainedSizeInBytes = INSTANCE_SIZE\n+                + sizeOf(rowData)\n+                + sizeOf(rowPartitions)\n+                + sizeOf(rowSizes);\n+    }\n+\n+    public Iterator<Tuple2<MutablePartitionId, PrestoSparkMutableRow>> createRowTupleIterator()\n+    {\n+        return new RowTupleIterator(rowCount, rowData, rowPartitions, rowSizes);\n+    }\n+\n+    public long getRetainedSizeInBytes()\n+    {\n+        return retainedSizeInBytes;\n+    }\n+\n+    public static PrestoSparkRowBatchBuilder builder()\n+    {\n+        return new PrestoSparkRowBatchBuilder(DEFAULT_TARGET_SIZE, DEFAULT_EXPECTED_ROWS_COUNT);\n+    }\n+\n+    public static PrestoSparkRowBatchBuilder builder(int targetSizeInBytes, int expectedRowsCount)\n+    {\n+        return new PrestoSparkRowBatchBuilder(targetSizeInBytes, expectedRowsCount);\n+    }\n+\n+    public static class PrestoSparkRowBatchBuilder\n+    {\n+        private static final int BUILDER_INSTANCE_SIZE = ClassLayout.parseClass(PrestoSparkRowBatchBuilder.class).instanceSize();\n+\n+        private final int targetSizeInBytes;\n+        private final DynamicSliceOutput sliceOutput;\n+        private int[] rowSizes;\n+        private int[] rowPartitions;\n+        private int rowCount;\n+\n+        private int currentRowOffset;\n+        private boolean openEntry;\n+\n+        public PrestoSparkRowBatchBuilder(int targetSizeInBytes, int expectedRowsCount)\n+        {\n+            this.targetSizeInBytes = targetSizeInBytes;\n+            sliceOutput = new DynamicSliceOutput((int) (targetSizeInBytes * 1.2f));\n+            rowSizes = new int[expectedRowsCount];\n+            rowPartitions = new int[expectedRowsCount];\n+        }\n+\n+        public long getRetainedSizeInBytes()\n+        {\n+            return BUILDER_INSTANCE_SIZE + sliceOutput.getRetainedSize() + sizeOf(rowSizes) + sizeOf(rowPartitions);\n+        }\n+\n+        public boolean isFull()\n+        {\n+            return sliceOutput.size() >= targetSizeInBytes;\n+        }\n+\n+        public boolean isEmpty()\n+        {\n+            return rowCount == 0;\n+        }\n+\n+        public SliceOutput beginRowEntry()\n+        {\n+            checkState(!openEntry, \"previous entry must be closed before creating a new entry\");\n+            openEntry = true;\n+            currentRowOffset = sliceOutput.size();\n+            return sliceOutput;\n+        }\n+\n+        public void closeEntry(int partition, int partitionCount, boolean replicate)\n+        {\n+            checkState(openEntry, \"entry must be opened first\");\n+            openEntry = false;\n+\n+            rowSizes = ensureCapacity(rowSizes, rowCount + 1);\n+            rowSizes[rowCount] = sliceOutput.size() - currentRowOffset;\n+\n+            rowPartitions = ensureCapacity(rowPartitions, rowCount + 1);\n+            if (replicate) {\n+                checkArgument(partitionCount > 0, \"partitionCount must be greater then zero: %s\", partitionCount);\n+                rowPartitions[rowCount] = -partitionCount;\n+            }\n+            else {\n+                rowPartitions[rowCount] = partition;\n+            }\n+\n+            rowCount++;\n+        }\n+\n+        private static int[] ensureCapacity(int[] array, int capacity)\n+        {\n+            if (array.length >= capacity) {\n+                return array;\n+            }\n+            return Arrays.copyOf(array, capacity * 2);\n+        }\n+\n+        public PrestoSparkRowBatch build()\n+        {\n+            checkState(!openEntry, \"entry must be closed before creating a row batch\");\n+            return new PrestoSparkRowBatch(rowCount, sliceOutput.getUnderlyingSlice().byteArray(), rowPartitions, rowSizes);\n+        }\n+    }\n+\n+    private static class RowTupleIterator\n+            extends AbstractIterator<Tuple2<MutablePartitionId, PrestoSparkMutableRow>>\n+    {\n+        private final int rowCount;\n+        private final int[] rowPartitions;\n+        private final int[] rowSizes;\n+\n+        private int replicatePartition = -1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b938ed175cfe80e8851fff6388ab1abb1a7b33a0"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI5NDMzMQ==", "bodyText": "With this replicatePartition--, today the semantic is:\n\nThere will be no more replicant when replicatePartition == -1\n\nIf we don't have this replicatePartition--, does the semantic change to\n\nThere will be no more replicant when replicatePartition == 0\n\nWould this be easier to understand? :)", "url": "https://github.com/prestodb/presto/pull/14634#discussion_r441294331", "createdAt": "2020-06-17T05:47:22Z", "author": {"login": "wenleix"}, "path": "presto-spark-base/src/main/java/com/facebook/presto/spark/execution/PrestoSparkRowBatch.java", "diffHunk": "@@ -0,0 +1,216 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.spark.execution;\n+\n+import com.facebook.presto.spark.classloader_interface.MutablePartitionId;\n+import com.facebook.presto.spark.classloader_interface.PrestoSparkMutableRow;\n+import com.google.common.collect.AbstractIterator;\n+import io.airlift.slice.DynamicSliceOutput;\n+import io.airlift.slice.SliceOutput;\n+import org.openjdk.jol.info.ClassLayout;\n+import scala.Tuple2;\n+\n+import java.nio.ByteBuffer;\n+import java.util.Arrays;\n+import java.util.Iterator;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static io.airlift.slice.SizeOf.sizeOf;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PrestoSparkRowBatch\n+{\n+    private static final int INSTANCE_SIZE = ClassLayout.parseClass(PrestoSparkRowBatch.class).instanceSize();\n+\n+    private static final int DEFAULT_TARGET_SIZE = 1024 * 1024;\n+    private static final int DEFAULT_EXPECTED_ROWS_COUNT = 10000;\n+\n+    private final int rowCount;\n+    private final byte[] rowData;\n+    private final int[] rowPartitions;\n+    private final int[] rowSizes;\n+    private final long retainedSizeInBytes;\n+\n+    public PrestoSparkRowBatch(int rowCount, byte[] rowData, int[] rowPartitions, int[] rowSizes)\n+    {\n+        this.rowCount = rowCount;\n+        this.rowData = requireNonNull(rowData, \"rowData is null\");\n+        this.rowPartitions = requireNonNull(rowPartitions, \"rowPartitions is null\");\n+        this.rowSizes = requireNonNull(rowSizes, \"rowSizes is null\");\n+        this.retainedSizeInBytes = INSTANCE_SIZE\n+                + sizeOf(rowData)\n+                + sizeOf(rowPartitions)\n+                + sizeOf(rowSizes);\n+    }\n+\n+    public Iterator<Tuple2<MutablePartitionId, PrestoSparkMutableRow>> createRowTupleIterator()\n+    {\n+        return new RowTupleIterator(rowCount, rowData, rowPartitions, rowSizes);\n+    }\n+\n+    public long getRetainedSizeInBytes()\n+    {\n+        return retainedSizeInBytes;\n+    }\n+\n+    public static PrestoSparkRowBatchBuilder builder()\n+    {\n+        return new PrestoSparkRowBatchBuilder(DEFAULT_TARGET_SIZE, DEFAULT_EXPECTED_ROWS_COUNT);\n+    }\n+\n+    public static PrestoSparkRowBatchBuilder builder(int targetSizeInBytes, int expectedRowsCount)\n+    {\n+        return new PrestoSparkRowBatchBuilder(targetSizeInBytes, expectedRowsCount);\n+    }\n+\n+    public static class PrestoSparkRowBatchBuilder\n+    {\n+        private static final int BUILDER_INSTANCE_SIZE = ClassLayout.parseClass(PrestoSparkRowBatchBuilder.class).instanceSize();\n+\n+        private final int targetSizeInBytes;\n+        private final DynamicSliceOutput sliceOutput;\n+        private int[] rowSizes;\n+        private int[] rowPartitions;\n+        private int rowCount;\n+\n+        private int currentRowOffset;\n+        private boolean openEntry;\n+\n+        public PrestoSparkRowBatchBuilder(int targetSizeInBytes, int expectedRowsCount)\n+        {\n+            this.targetSizeInBytes = targetSizeInBytes;\n+            sliceOutput = new DynamicSliceOutput((int) (targetSizeInBytes * 1.2f));\n+            rowSizes = new int[expectedRowsCount];\n+            rowPartitions = new int[expectedRowsCount];\n+        }\n+\n+        public long getRetainedSizeInBytes()\n+        {\n+            return BUILDER_INSTANCE_SIZE + sliceOutput.getRetainedSize() + sizeOf(rowSizes) + sizeOf(rowPartitions);\n+        }\n+\n+        public boolean isFull()\n+        {\n+            return sliceOutput.size() >= targetSizeInBytes;\n+        }\n+\n+        public boolean isEmpty()\n+        {\n+            return rowCount == 0;\n+        }\n+\n+        public SliceOutput beginRowEntry()\n+        {\n+            checkState(!openEntry, \"previous entry must be closed before creating a new entry\");\n+            openEntry = true;\n+            currentRowOffset = sliceOutput.size();\n+            return sliceOutput;\n+        }\n+\n+        public void closeEntry(int partition, int partitionCount, boolean replicate)\n+        {\n+            checkState(openEntry, \"entry must be opened first\");\n+            openEntry = false;\n+\n+            rowSizes = ensureCapacity(rowSizes, rowCount + 1);\n+            rowSizes[rowCount] = sliceOutput.size() - currentRowOffset;\n+\n+            rowPartitions = ensureCapacity(rowPartitions, rowCount + 1);\n+            if (replicate) {\n+                checkArgument(partitionCount > 0, \"partitionCount must be greater then zero: %s\", partitionCount);\n+                rowPartitions[rowCount] = -partitionCount;\n+            }\n+            else {\n+                rowPartitions[rowCount] = partition;\n+            }\n+\n+            rowCount++;\n+        }\n+\n+        private static int[] ensureCapacity(int[] array, int capacity)\n+        {\n+            if (array.length >= capacity) {\n+                return array;\n+            }\n+            return Arrays.copyOf(array, capacity * 2);\n+        }\n+\n+        public PrestoSparkRowBatch build()\n+        {\n+            checkState(!openEntry, \"entry must be closed before creating a row batch\");\n+            return new PrestoSparkRowBatch(rowCount, sliceOutput.getUnderlyingSlice().byteArray(), rowPartitions, rowSizes);\n+        }\n+    }\n+\n+    private static class RowTupleIterator\n+            extends AbstractIterator<Tuple2<MutablePartitionId, PrestoSparkMutableRow>>\n+    {\n+        private final int rowCount;\n+        private final int[] rowPartitions;\n+        private final int[] rowSizes;\n+\n+        private int replicatePartition = -1;\n+        private int currentRow;\n+        private int currentOffset;\n+        private final ByteBuffer rowData;\n+        private final MutablePartitionId mutablePartitionId;\n+        private final Tuple2<MutablePartitionId, PrestoSparkMutableRow> tuple;\n+\n+        private RowTupleIterator(int rowCount, byte[] rowData, int[] rowPartitions, int[] rowSizes)\n+        {\n+            this.rowCount = rowCount;\n+            this.rowPartitions = requireNonNull(rowPartitions, \"rowPartitions is null\");\n+            this.rowSizes = requireNonNull(rowSizes, \"rowSizes is null\");\n+\n+            this.rowData = ByteBuffer.wrap(requireNonNull(rowData, \"rowData is null\"));\n+            mutablePartitionId = new MutablePartitionId();\n+            PrestoSparkMutableRow row = new PrestoSparkMutableRow();\n+            row.setBuffer(this.rowData);\n+            tuple = new Tuple2<>(mutablePartitionId, row);\n+        }\n+\n+        @Override\n+        protected Tuple2<MutablePartitionId, PrestoSparkMutableRow> computeNext()\n+        {\n+            if (currentRow >= rowCount) {\n+                return endOfData();\n+            }\n+\n+            int rowSize = rowSizes[currentRow];\n+            rowData.limit(currentOffset + rowSize);\n+            rowData.position(currentOffset);\n+\n+            int partition = rowPartitions[currentRow];\n+            if (partition < 0) {\n+                if (replicatePartition < 0) {\n+                    replicatePartition = -partition;\n+                    replicatePartition--;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b938ed175cfe80e8851fff6388ab1abb1a7b33a0"}, "originalPosition": 199}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI5NTA4Mg==", "bodyText": "nit: why change the variable name? I thought shouldReplicate is a good name? ;)", "url": "https://github.com/prestodb/presto/pull/14634#discussion_r441295082", "createdAt": "2020-06-17T05:49:44Z", "author": {"login": "wenleix"}, "path": "presto-spark-base/src/main/java/com/facebook/presto/spark/execution/PrestoSparkOutputOperator.java", "diffHunk": "@@ -244,53 +233,44 @@ public boolean needsInput()\n     public void addInput(Page page)\n     {\n         page = pagePreprocessor.apply(page);\n+\n         int positionCount = page.getPositionCount();\n+        if (positionCount == 0) {\n+            return;\n+        }\n+\n+        if (rowBatchBuilder == null) {\n+            rowBatchBuilder = PrestoSparkRowBatch.builder();\n+        }\n+\n         int channelCount = page.getChannelCount();\n-        int averageRowSizeInBytes = min(toIntExact(page.getLogicalSizeInBytes() / positionCount), 10);\n         Page partitionFunctionArguments = getPartitionFunctionArguments(page);\n+        int partitionCount = partitionFunction.getPartitionCount();\n         for (int position = 0; position < positionCount; position++) {\n-            SliceOutput output = new DynamicSliceOutput(averageRowSizeInBytes * 2);\n+            if (rowBatchBuilder.isFull()) {\n+                rowBuffer.enqueue(rowBatchBuilder.build());\n+                rowBatchBuilder = PrestoSparkRowBatch.builder();\n+            }\n+\n+            SliceOutput output = rowBatchBuilder.beginRowEntry();\n             for (int channel = 0; channel < channelCount; channel++) {\n                 Block block = page.getBlock(channel);\n                 block.writePositionTo(position, output);\n             }\n-\n-            boolean shouldReplicate = (replicateNullsAndAny && !hasAnyRowBeenReplicated) ||\n+            boolean replicate = (replicateNullsAndAny && !hasAnyRowBeenReplicated) ||", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b938ed175cfe80e8851fff6388ab1abb1a7b33a0"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI5NjcxMw==", "bodyText": "nit: should this constructor be private or package private? since it should only get constructed by the builder.", "url": "https://github.com/prestodb/presto/pull/14634#discussion_r441296713", "createdAt": "2020-06-17T05:54:44Z", "author": {"login": "wenleix"}, "path": "presto-spark-base/src/main/java/com/facebook/presto/spark/execution/PrestoSparkRowBatch.java", "diffHunk": "@@ -0,0 +1,216 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.spark.execution;\n+\n+import com.facebook.presto.spark.classloader_interface.MutablePartitionId;\n+import com.facebook.presto.spark.classloader_interface.PrestoSparkMutableRow;\n+import com.google.common.collect.AbstractIterator;\n+import io.airlift.slice.DynamicSliceOutput;\n+import io.airlift.slice.SliceOutput;\n+import org.openjdk.jol.info.ClassLayout;\n+import scala.Tuple2;\n+\n+import java.nio.ByteBuffer;\n+import java.util.Arrays;\n+import java.util.Iterator;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static io.airlift.slice.SizeOf.sizeOf;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PrestoSparkRowBatch\n+{\n+    private static final int INSTANCE_SIZE = ClassLayout.parseClass(PrestoSparkRowBatch.class).instanceSize();\n+\n+    private static final int DEFAULT_TARGET_SIZE = 1024 * 1024;\n+    private static final int DEFAULT_EXPECTED_ROWS_COUNT = 10000;\n+\n+    private final int rowCount;\n+    private final byte[] rowData;\n+    private final int[] rowPartitions;\n+    private final int[] rowSizes;\n+    private final long retainedSizeInBytes;\n+\n+    public PrestoSparkRowBatch(int rowCount, byte[] rowData, int[] rowPartitions, int[] rowSizes)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b938ed175cfe80e8851fff6388ab1abb1a7b33a0"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI5OTU5NA==", "bodyText": "This is unrelated to this PR: but maybe add some comments explain it is intended that we reduce the memory accounting eagerly when the rowBatch is polled.  But at most one single row batch will be under counted with about ~1MB so it's a good enough approximation. (as discussed in #14522 (comment))", "url": "https://github.com/prestodb/presto/pull/14634#discussion_r441299594", "createdAt": "2020-06-17T06:03:14Z", "author": {"login": "wenleix"}, "path": "presto-spark-base/src/main/java/com/facebook/presto/spark/execution/PrestoSparkRowBuffer.java", "diffHunk": "@@ -66,48 +62,21 @@ public void setNoMoreRows()\n         }\n     }\n \n-    public List<PrestoSparkMutableRow> get()\n+    public PrestoSparkRowBatch get()\n             throws InterruptedException\n     {\n-        BufferedRows bufferedRows = null;\n+        PrestoSparkRowBatch rowBatch = null;\n         synchronized (monitor) {\n             while (buffer.isEmpty() && !finished) {\n                 monitor.wait();\n             }\n             if (!buffer.isEmpty()) {\n-                bufferedRows = buffer.poll();\n+                rowBatch = buffer.poll();\n             }\n-            if (bufferedRows != null) {\n-                memoryManager.updateMemoryUsage(-bufferedRows.getRetainedSizeInBytes());\n+            if (rowBatch != null) {\n+                memoryManager.updateMemoryUsage(-rowBatch.getRetainedSizeInBytes());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b938ed175cfe80e8851fff6388ab1abb1a7b33a0"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMDgzNTIw", "url": "https://github.com/prestodb/presto/pull/14634#pullrequestreview-432083520", "createdAt": "2020-06-17T06:07:08Z", "commit": {"oid": "a1bd2a27ea149a5f23bd4c6edc5fabd9f56fb802"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNjowNzowOFrOGk23dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNjoyMDozOFrOGk3KhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMwMDg1Mw==", "bodyText": "I prefer the old variable name (shuffleInputs and broadcastInputs). Otherwise, it's not immediately clear why we need two type of inputs.", "url": "https://github.com/prestodb/presto/pull/14634#discussion_r441300853", "createdAt": "2020-06-17T06:07:08Z", "author": {"login": "wenleix"}, "path": "presto-spark-base/src/main/java/com/facebook/presto/spark/execution/PrestoSparkRemoteSourceFactory.java", "diffHunk": "@@ -36,38 +36,38 @@\n         implements RemoteSourceFactory\n {\n     private final PagesSerde pagesSerde;\n-    private final Map<PlanNodeId, Iterator<PrestoSparkMutableRow>> shuffleInputs;\n-    private final Map<PlanNodeId, Iterator<PrestoSparkSerializedPage>> broadcastInputs;\n+    private final Map<PlanNodeId, Iterator<PrestoSparkMutableRow>> rowInputs;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1bd2a27ea149a5f23bd4c6edc5fabd9f56fb802"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMwMzA1Nw==", "bodyText": "ditto", "url": "https://github.com/prestodb/presto/pull/14634#discussion_r441303057", "createdAt": "2020-06-17T06:13:19Z", "author": {"login": "wenleix"}, "path": "presto-spark-base/src/main/java/com/facebook/presto/spark/execution/PrestoSparkTaskExecutorFactory.java", "diffHunk": "@@ -276,59 +281,74 @@ public IPrestoSparkTaskExecutor doCreate(\n                 allocationTrackingEnabled,\n                 false);\n \n-        OutputBufferMemoryManager memoryManager = new OutputBufferMemoryManager(\n-                sinkMaxBufferSize.toBytes(),\n-                () -> queryContext.getTaskContextByTaskId(taskId).localSystemMemoryContext(),\n-                notificationExecutor);\n-        PrestoSparkRowBuffer rowBuffer = new PrestoSparkRowBuffer(memoryManager);\n-\n-        ImmutableMap.Builder<PlanNodeId, Iterator<PrestoSparkMutableRow>> shuffleInputs = ImmutableMap.builder();\n-        ImmutableMap.Builder<PlanNodeId, Iterator<PrestoSparkSerializedPage>> broadcastInputs = ImmutableMap.builder();\n+        ImmutableMap.Builder<PlanNodeId, Iterator<PrestoSparkMutableRow>> rowInputs = ImmutableMap.builder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1bd2a27ea149a5f23bd4c6edc5fabd9f56fb802"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMwMzI3MQ==", "bodyText": "what's local input? Input from \"VALUES\" node? -- maybe add a comment to it.", "url": "https://github.com/prestodb/presto/pull/14634#discussion_r441303271", "createdAt": "2020-06-17T06:13:57Z", "author": {"login": "wenleix"}, "path": "presto-spark-base/src/main/java/com/facebook/presto/spark/execution/PrestoSparkTaskExecutorFactory.java", "diffHunk": "@@ -276,59 +281,74 @@ public IPrestoSparkTaskExecutor doCreate(\n                 allocationTrackingEnabled,\n                 false);\n \n-        OutputBufferMemoryManager memoryManager = new OutputBufferMemoryManager(\n-                sinkMaxBufferSize.toBytes(),\n-                () -> queryContext.getTaskContextByTaskId(taskId).localSystemMemoryContext(),\n-                notificationExecutor);\n-        PrestoSparkRowBuffer rowBuffer = new PrestoSparkRowBuffer(memoryManager);\n-\n-        ImmutableMap.Builder<PlanNodeId, Iterator<PrestoSparkMutableRow>> shuffleInputs = ImmutableMap.builder();\n-        ImmutableMap.Builder<PlanNodeId, Iterator<PrestoSparkSerializedPage>> broadcastInputs = ImmutableMap.builder();\n+        ImmutableMap.Builder<PlanNodeId, Iterator<PrestoSparkMutableRow>> rowInputs = ImmutableMap.builder();\n+        ImmutableMap.Builder<PlanNodeId, Iterator<PrestoSparkSerializedPage>> pageInputs = ImmutableMap.builder();\n         for (RemoteSourceNode remoteSource : fragment.getRemoteSourceNodes()) {\n-            List<Iterator<PrestoSparkMutableRow>> shuffleRemoteSourceInputs = new ArrayList<>();\n-            List<Iterator<PrestoSparkSerializedPage>> broadcastRemoteSourceInputs = new ArrayList<>();\n+            List<Iterator<PrestoSparkMutableRow>> remoteSourceRowInputs = new ArrayList<>();\n+            List<Iterator<PrestoSparkSerializedPage>> remoteSourcePageInputs = new ArrayList<>();\n             for (PlanFragmentId sourceFragmentId : remoteSource.getSourceFragmentIds()) {\n                 Iterator<Tuple2<MutablePartitionId, PrestoSparkMutableRow>> shuffleInput = inputs.getShuffleInputs().get(sourceFragmentId.toString());\n                 Broadcast<List<PrestoSparkSerializedPage>> broadcastInput = inputs.getBroadcastInputs().get(sourceFragmentId.toString());\n-                checkArgument(shuffleInput != null || broadcastInput != null, \"Input not found for sourceFragmentId: %s\", sourceFragmentId);\n-                checkArgument(shuffleInput == null || broadcastInput == null, \"Single remote source cannot accept both, broadcast and shuffle inputs\");\n+                List<PrestoSparkSerializedPage> localInput = inputs.getLocalInputs().get(sourceFragmentId.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1bd2a27ea149a5f23bd4c6edc5fabd9f56fb802"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMwMzc3OA==", "bodyText": "Any reason why this block of code is now moved after the for-loop?", "url": "https://github.com/prestodb/presto/pull/14634#discussion_r441303778", "createdAt": "2020-06-17T06:15:21Z", "author": {"login": "wenleix"}, "path": "presto-spark-base/src/main/java/com/facebook/presto/spark/execution/PrestoSparkTaskExecutorFactory.java", "diffHunk": "@@ -276,59 +281,74 @@ public IPrestoSparkTaskExecutor doCreate(\n                 allocationTrackingEnabled,\n                 false);\n \n-        OutputBufferMemoryManager memoryManager = new OutputBufferMemoryManager(\n-                sinkMaxBufferSize.toBytes(),\n-                () -> queryContext.getTaskContextByTaskId(taskId).localSystemMemoryContext(),\n-                notificationExecutor);\n-        PrestoSparkRowBuffer rowBuffer = new PrestoSparkRowBuffer(memoryManager);\n-\n-        ImmutableMap.Builder<PlanNodeId, Iterator<PrestoSparkMutableRow>> shuffleInputs = ImmutableMap.builder();\n-        ImmutableMap.Builder<PlanNodeId, Iterator<PrestoSparkSerializedPage>> broadcastInputs = ImmutableMap.builder();\n+        ImmutableMap.Builder<PlanNodeId, Iterator<PrestoSparkMutableRow>> rowInputs = ImmutableMap.builder();\n+        ImmutableMap.Builder<PlanNodeId, Iterator<PrestoSparkSerializedPage>> pageInputs = ImmutableMap.builder();\n         for (RemoteSourceNode remoteSource : fragment.getRemoteSourceNodes()) {\n-            List<Iterator<PrestoSparkMutableRow>> shuffleRemoteSourceInputs = new ArrayList<>();\n-            List<Iterator<PrestoSparkSerializedPage>> broadcastRemoteSourceInputs = new ArrayList<>();\n+            List<Iterator<PrestoSparkMutableRow>> remoteSourceRowInputs = new ArrayList<>();\n+            List<Iterator<PrestoSparkSerializedPage>> remoteSourcePageInputs = new ArrayList<>();\n             for (PlanFragmentId sourceFragmentId : remoteSource.getSourceFragmentIds()) {\n                 Iterator<Tuple2<MutablePartitionId, PrestoSparkMutableRow>> shuffleInput = inputs.getShuffleInputs().get(sourceFragmentId.toString());\n                 Broadcast<List<PrestoSparkSerializedPage>> broadcastInput = inputs.getBroadcastInputs().get(sourceFragmentId.toString());\n-                checkArgument(shuffleInput != null || broadcastInput != null, \"Input not found for sourceFragmentId: %s\", sourceFragmentId);\n-                checkArgument(shuffleInput == null || broadcastInput == null, \"Single remote source cannot accept both, broadcast and shuffle inputs\");\n+                List<PrestoSparkSerializedPage> localInput = inputs.getLocalInputs().get(sourceFragmentId.toString());\n+\n                 if (shuffleInput != null) {\n-                    shuffleRemoteSourceInputs.add(Iterators.transform(shuffleInput, tuple -> tuple._2));\n+                    checkArgument(broadcastInput == null, \"single remote source is not expected to accept different kind of inputs\");\n+                    checkArgument(localInput == null, \"single remote source is not expected to accept different kind of inputs\");\n+                    remoteSourceRowInputs.add(Iterators.transform(shuffleInput, tuple -> tuple._2));\n+                    continue;\n                 }\n+\n                 if (broadcastInput != null) {\n+                    checkArgument(localInput == null, \"single remote source is not expected to accept different kind of inputs\");\n                     // TODO: Enable NullifyingIterator once migrated to one task per JVM model\n                     // NullifyingIterator removes element from the list upon return\n                     // This allows GC to gradually reclaim memory\n-                    // broadcastRemoteSourceInputs.add(getNullifyingIterator(broadcastInput.value()));\n-                    broadcastRemoteSourceInputs.add(broadcastInput.value().iterator());\n+                    // remoteSourcePageInputs.add(getNullifyingIterator(broadcastInput.value()));\n+                    remoteSourcePageInputs.add(broadcastInput.value().iterator());\n+                    continue;\n                 }\n+\n+                if (localInput != null) {\n+                    remoteSourcePageInputs.add(localInput.iterator());\n+                    continue;\n+                }\n+\n+                throw new IllegalArgumentException(\"Input not found for sourceFragmentId: \" + sourceFragmentId);\n             }\n-            if (!shuffleRemoteSourceInputs.isEmpty()) {\n-                shuffleInputs.put(remoteSource.getId(), Iterators.concat(shuffleRemoteSourceInputs.iterator()));\n+            if (!remoteSourceRowInputs.isEmpty()) {\n+                rowInputs.put(remoteSource.getId(), Iterators.concat(remoteSourceRowInputs.iterator()));\n             }\n-            if (!broadcastRemoteSourceInputs.isEmpty()) {\n-                broadcastInputs.put(remoteSource.getId(), Iterators.concat(broadcastRemoteSourceInputs.iterator()));\n+            if (!remoteSourcePageInputs.isEmpty()) {\n+                pageInputs.put(remoteSource.getId(), Iterators.concat(remoteSourcePageInputs.iterator()));\n             }\n         }\n \n+        OutputBufferMemoryManager memoryManager = new OutputBufferMemoryManager(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1bd2a27ea149a5f23bd4c6edc5fabd9f56fb802"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMwNDgwNg==", "bodyText": "nit: why not toImmutableList()?", "url": "https://github.com/prestodb/presto/pull/14634#discussion_r441304806", "createdAt": "2020-06-17T06:18:08Z", "author": {"login": "wenleix"}, "path": "presto-spark-base/src/main/java/com/facebook/presto/spark/PrestoSparkQueryExecutionFactory.java", "diffHunk": "@@ -443,76 +437,68 @@ private PrestoSparkQueryExecution(\n                         tableWriteInfo);\n                 SerializedPrestoSparkTaskDescriptor serializedTaskDescriptor = new SerializedPrestoSparkTaskDescriptor(sparkTaskDescriptorJsonCodec.toJsonBytes(taskDescriptor));\n \n-                Map<PlanFragmentId, RddAndMore> inputRdds = root.getChildren().stream()\n-                        .collect(toImmutableMap(child -> child.getFragment().getId(), this::createRdd));\n+                Map<PlanFragmentId, RddAndMore<PrestoSparkSerializedPage>> inputRdds = root.getChildren().stream()\n+                        .collect(toImmutableMap(child -> child.getFragment().getId(), child -> createRdd(child, PrestoSparkSerializedPage.class)));\n \n-                Map<String, Future<List<Tuple2<MutablePartitionId, PrestoSparkMaterializedRow>>>> inputFutures = inputRdds.entrySet().stream()\n-                        .collect(toImmutableMap(\n-                                entry -> entry.getKey().toString(),\n-                                entry -> entry.getValue().getRdd()\n-                                        .mapValues(new PrestoSparkToMaterializedRowFunction())\n-                                        .collectAsync()));\n+                Map<String, Future<List<Tuple2<MutablePartitionId, PrestoSparkSerializedPage>>>> inputFutures = inputRdds.entrySet().stream()\n+                        .collect(toImmutableMap(entry -> entry.getKey().toString(), entry -> entry.getValue().getRdd().collectAsync()));\n \n                 waitFor(inputFutures.values());\n \n-                Map<String, Iterator<Tuple2<MutablePartitionId, PrestoSparkMutableRow>>> inputs = inputFutures.entrySet().stream()\n+                Map<String, List<PrestoSparkSerializedPage>> inputs = inputFutures.entrySet().stream()\n                         .collect(toImmutableMap(\n                                 Map.Entry::getKey,\n-                                entry -> transform(\n-                                        getUnchecked(entry.getValue()).iterator(),\n-                                        tuple -> new Tuple2<>(tuple._1, tuple._2.toPrestoSparkMutableRow()))));\n+                                entry -> getUnchecked(entry.getValue()).stream().map(Tuple2::_2).collect(toImmutableList())));\n \n-                IPrestoSparkTaskExecutor prestoSparkTaskExecutor = executorFactoryProvider.get(SparkProcessType.DRIVER).create(\n+                IPrestoSparkTaskExecutor<PrestoSparkSerializedPage> prestoSparkTaskExecutor = executorFactoryProvider.get(SparkProcessType.DRIVER).create(\n                         0,\n                         0,\n                         serializedTaskDescriptor,\n                         emptyIterator(),\n-                        new PrestoSparkTaskInputs(inputs, ImmutableMap.of()),\n-                        taskStatsCollector);\n-                return ImmutableList.copyOf(transform(prestoSparkTaskExecutor, tuple -> new Tuple2<>(tuple._1, tuple._2.toMaterializedRow())));\n+                        new PrestoSparkTaskInputs(ImmutableMap.of(), ImmutableMap.of(), inputs),\n+                        taskStatsCollector,\n+                        PrestoSparkSerializedPage.class);\n+                return ImmutableList.copyOf(prestoSparkTaskExecutor);\n             }\n \n-            RddAndMore rootRdd = createRdd(root);\n+            RddAndMore<PrestoSparkSerializedPage> rootRdd = createRdd(root, PrestoSparkSerializedPage.class);\n             return rootRdd.collectAndDestroyDependencies();\n         }\n \n-        private RddAndMore createRdd(SubPlan subPlan)\n+        private <T> RddAndMore<T> createRdd(SubPlan subPlan, Class<T> outputType)\n         {\n             ImmutableMap.Builder<PlanFragmentId, JavaPairRDD<MutablePartitionId, PrestoSparkMutableRow>> rddInputs = ImmutableMap.builder();\n             ImmutableMap.Builder<PlanFragmentId, Broadcast<List<PrestoSparkSerializedPage>>> broadcastInputs = ImmutableMap.builder();\n             ImmutableList.Builder<Broadcast<?>> broadcastDependencies = ImmutableList.builder();\n \n             for (SubPlan child : subPlan.getChildren()) {\n                 PlanFragment childFragment = child.getFragment();\n-                RddAndMore childRdd = createRdd(child);\n                 if (childFragment.getPartitioningScheme().getPartitioning().getHandle().equals(FIXED_BROADCAST_DISTRIBUTION)) {\n-                    List<Tuple2<MutablePartitionId, PrestoSparkMaterializedRow>> broadcastRows = childRdd.collectAndDestroyDependencies();\n-                    // TODO: Transform rows to pages on executors (using `RDD#map` function)\n-                    // TODO: Transforming it on coordinator results in 2x memory utilization as both,\n-                    // TODO: rows and pages have to be kept in memory all at the same time\n-                    Iterator<Page> pagesIterator = transformMaterializedRowsToPages(transform(broadcastRows.iterator(), Tuple2::_2), childFragment.getTypes());\n-                    Iterator<PrestoSparkSerializedPage> serializedPagesIterator = transform(transform(pagesIterator, pagesSerde::serialize), PrestoSparkUtils::toPrestoSparkSerializedPage);\n-                    List<PrestoSparkSerializedPage> serializedPages = new ArrayList<>();\n-                    serializedPagesIterator.forEachRemaining(serializedPages::add);\n-                    Broadcast<List<PrestoSparkSerializedPage>> broadcast = sparkContext.broadcast(serializedPages);\n+                    RddAndMore<PrestoSparkSerializedPage> childRdd = createRdd(child, PrestoSparkSerializedPage.class);\n+                    List<PrestoSparkSerializedPage> broadcastPages = childRdd.collectAndDestroyDependencies().stream()\n+                            .map(Tuple2::_2)\n+                            .collect(toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1bd2a27ea149a5f23bd4c6edc5fabd9f56fb802"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMwNTMwOA==", "bodyText": "Add a comment that T should only be PrestoSparkMutableRow or PrestoSparkSerializedPage when in use.", "url": "https://github.com/prestodb/presto/pull/14634#discussion_r441305308", "createdAt": "2020-06-17T06:19:35Z", "author": {"login": "wenleix"}, "path": "presto-spark-classloader-interface/src/main/java/com/facebook/presto/spark/classloader_interface/IPrestoSparkTaskExecutor.java", "diffHunk": "@@ -17,7 +17,7 @@\n \n import java.util.Iterator;\n \n-public interface IPrestoSparkTaskExecutor\n-        extends Iterator<Tuple2<MutablePartitionId, PrestoSparkMutableRow>>\n+public interface IPrestoSparkTaskExecutor<T>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1bd2a27ea149a5f23bd4c6edc5fabd9f56fb802"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMwNTczMw==", "bodyText": "Add a comment that T should only be PrestoSparkMutableRow or PrestoSparkSerializedPage when in use.", "url": "https://github.com/prestodb/presto/pull/14634#discussion_r441305733", "createdAt": "2020-06-17T06:20:38Z", "author": {"login": "wenleix"}, "path": "presto-spark-classloader-interface/src/main/java/com/facebook/presto/spark/classloader_interface/PrestoSparkTaskRdd.java", "diffHunk": "@@ -56,20 +56,20 @@\n  * <p>\n  * The broadcast inputs are encapsulated in taskProcessor.\n  */\n-public class PrestoSparkTaskRdd\n-        extends ZippedPartitionsBaseRDD<Tuple2<MutablePartitionId, PrestoSparkMutableRow>>\n+public class PrestoSparkTaskRdd<T>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1bd2a27ea149a5f23bd4c6edc5fabd9f56fb802"}, "originalPosition": 6}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a1bd2a27ea149a5f23bd4c6edc5fabd9f56fb802", "author": {"user": {"login": "arhimondr", "name": "Andrii Rosa"}}, "url": "https://github.com/prestodb/presto/commit/a1bd2a27ea149a5f23bd4c6edc5fabd9f56fb802", "committedDate": "2020-06-16T14:20:31Z", "message": "Avoid unnecessary page to row conversions\n\nConvert to row only if shuffle is needed"}, "afterCommit": {"oid": "de0bc338361d5206205709fea1f1683c0516072e", "author": {"user": {"login": "arhimondr", "name": "Andrii Rosa"}}, "url": "https://github.com/prestodb/presto/commit/de0bc338361d5206205709fea1f1683c0516072e", "committedDate": "2020-06-17T16:23:42Z", "message": "Avoid unnecessary page to row conversions\n\nConvert to row only if shuffle is needed"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyOTYxODUw", "url": "https://github.com/prestodb/presto/pull/14634#pullrequestreview-432961850", "createdAt": "2020-06-18T05:59:11Z", "commit": {"oid": "de0bc338361d5206205709fea1f1683c0516072e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNTo1OToxMVrOGlgpBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNTo1OToxMVrOGlgpBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk4NTI4Nw==", "bodyText": "maybe add a comment about what is \"inMemoryInputinPrestoSparkTaskInputs.java\" ? (you explained in #14634 (comment))", "url": "https://github.com/prestodb/presto/pull/14634#discussion_r441985287", "createdAt": "2020-06-18T05:59:11Z", "author": {"login": "wenleix"}, "path": "presto-spark-base/src/main/java/com/facebook/presto/spark/execution/PrestoSparkTaskExecutorFactory.java", "diffHunk": "@@ -276,59 +282,74 @@ public IPrestoSparkTaskExecutor doCreate(\n                 allocationTrackingEnabled,\n                 false);\n \n-        OutputBufferMemoryManager memoryManager = new OutputBufferMemoryManager(\n-                sinkMaxBufferSize.toBytes(),\n-                () -> queryContext.getTaskContextByTaskId(taskId).localSystemMemoryContext(),\n-                notificationExecutor);\n-        PrestoSparkRowBuffer rowBuffer = new PrestoSparkRowBuffer(memoryManager);\n-\n-        ImmutableMap.Builder<PlanNodeId, Iterator<PrestoSparkMutableRow>> shuffleInputs = ImmutableMap.builder();\n-        ImmutableMap.Builder<PlanNodeId, Iterator<PrestoSparkSerializedPage>> broadcastInputs = ImmutableMap.builder();\n+        ImmutableMap.Builder<PlanNodeId, Iterator<PrestoSparkMutableRow>> rowInputs = ImmutableMap.builder();\n+        ImmutableMap.Builder<PlanNodeId, Iterator<PrestoSparkSerializedPage>> pageInputs = ImmutableMap.builder();\n         for (RemoteSourceNode remoteSource : fragment.getRemoteSourceNodes()) {\n-            List<Iterator<PrestoSparkMutableRow>> shuffleRemoteSourceInputs = new ArrayList<>();\n-            List<Iterator<PrestoSparkSerializedPage>> broadcastRemoteSourceInputs = new ArrayList<>();\n+            List<Iterator<PrestoSparkMutableRow>> remoteSourceRowInputs = new ArrayList<>();\n+            List<Iterator<PrestoSparkSerializedPage>> remoteSourcePageInputs = new ArrayList<>();\n             for (PlanFragmentId sourceFragmentId : remoteSource.getSourceFragmentIds()) {\n                 Iterator<Tuple2<MutablePartitionId, PrestoSparkMutableRow>> shuffleInput = inputs.getShuffleInputs().get(sourceFragmentId.toString());\n                 Broadcast<List<PrestoSparkSerializedPage>> broadcastInput = inputs.getBroadcastInputs().get(sourceFragmentId.toString());\n-                checkArgument(shuffleInput != null || broadcastInput != null, \"Input not found for sourceFragmentId: %s\", sourceFragmentId);\n-                checkArgument(shuffleInput == null || broadcastInput == null, \"Single remote source cannot accept both, broadcast and shuffle inputs\");\n+                List<PrestoSparkSerializedPage> inMemoryInput = inputs.getInMemoryInputs().get(sourceFragmentId.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de0bc338361d5206205709fea1f1683c0516072e"}, "originalPosition": 91}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyOTYxOTc4", "url": "https://github.com/prestodb/presto/pull/14634#pullrequestreview-432961978", "createdAt": "2020-06-18T05:59:30Z", "commit": {"oid": "de0bc338361d5206205709fea1f1683c0516072e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNTo1OTozMFrOGlgpaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNTo1OTozMFrOGlgpaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk4NTM4NA==", "bodyText": "Is this comment still relevant?", "url": "https://github.com/prestodb/presto/pull/14634#discussion_r441985384", "createdAt": "2020-06-18T05:59:30Z", "author": {"login": "wenleix"}, "path": "presto-spark-base/src/main/java/com/facebook/presto/spark/execution/PrestoSparkTaskExecutorFactory.java", "diffHunk": "@@ -276,59 +282,74 @@ public IPrestoSparkTaskExecutor doCreate(\n                 allocationTrackingEnabled,\n                 false);\n \n-        OutputBufferMemoryManager memoryManager = new OutputBufferMemoryManager(\n-                sinkMaxBufferSize.toBytes(),\n-                () -> queryContext.getTaskContextByTaskId(taskId).localSystemMemoryContext(),\n-                notificationExecutor);\n-        PrestoSparkRowBuffer rowBuffer = new PrestoSparkRowBuffer(memoryManager);\n-\n-        ImmutableMap.Builder<PlanNodeId, Iterator<PrestoSparkMutableRow>> shuffleInputs = ImmutableMap.builder();\n-        ImmutableMap.Builder<PlanNodeId, Iterator<PrestoSparkSerializedPage>> broadcastInputs = ImmutableMap.builder();\n+        ImmutableMap.Builder<PlanNodeId, Iterator<PrestoSparkMutableRow>> rowInputs = ImmutableMap.builder();\n+        ImmutableMap.Builder<PlanNodeId, Iterator<PrestoSparkSerializedPage>> pageInputs = ImmutableMap.builder();\n         for (RemoteSourceNode remoteSource : fragment.getRemoteSourceNodes()) {\n-            List<Iterator<PrestoSparkMutableRow>> shuffleRemoteSourceInputs = new ArrayList<>();\n-            List<Iterator<PrestoSparkSerializedPage>> broadcastRemoteSourceInputs = new ArrayList<>();\n+            List<Iterator<PrestoSparkMutableRow>> remoteSourceRowInputs = new ArrayList<>();\n+            List<Iterator<PrestoSparkSerializedPage>> remoteSourcePageInputs = new ArrayList<>();\n             for (PlanFragmentId sourceFragmentId : remoteSource.getSourceFragmentIds()) {\n                 Iterator<Tuple2<MutablePartitionId, PrestoSparkMutableRow>> shuffleInput = inputs.getShuffleInputs().get(sourceFragmentId.toString());\n                 Broadcast<List<PrestoSparkSerializedPage>> broadcastInput = inputs.getBroadcastInputs().get(sourceFragmentId.toString());\n-                checkArgument(shuffleInput != null || broadcastInput != null, \"Input not found for sourceFragmentId: %s\", sourceFragmentId);\n-                checkArgument(shuffleInput == null || broadcastInput == null, \"Single remote source cannot accept both, broadcast and shuffle inputs\");\n+                List<PrestoSparkSerializedPage> inMemoryInput = inputs.getInMemoryInputs().get(sourceFragmentId.toString());\n+\n                 if (shuffleInput != null) {\n-                    shuffleRemoteSourceInputs.add(Iterators.transform(shuffleInput, tuple -> tuple._2));\n+                    checkArgument(broadcastInput == null, \"single remote source is not expected to accept different kind of inputs\");\n+                    checkArgument(inMemoryInput == null, \"single remote source is not expected to accept different kind of inputs\");\n+                    remoteSourceRowInputs.add(Iterators.transform(shuffleInput, tuple -> tuple._2));\n+                    continue;\n                 }\n+\n                 if (broadcastInput != null) {\n+                    checkArgument(inMemoryInput == null, \"single remote source is not expected to accept different kind of inputs\");\n                     // TODO: Enable NullifyingIterator once migrated to one task per JVM model", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de0bc338361d5206205709fea1f1683c0516072e"}, "originalPosition": 103}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyOTYzODAx", "url": "https://github.com/prestodb/presto/pull/14634#pullrequestreview-432963801", "createdAt": "2020-06-18T06:04:06Z", "commit": {"oid": "de0bc338361d5206205709fea1f1683c0516072e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2bfc2a8398d002ecfe5ec36f9ef2fadeda1e851", "author": {"user": {"login": "arhimondr", "name": "Andrii Rosa"}}, "url": "https://github.com/prestodb/presto/commit/d2bfc2a8398d002ecfe5ec36f9ef2fadeda1e851", "committedDate": "2020-06-18T13:51:48Z", "message": "Implement MutablePartitionId\n\nTo avoid allocating new Integer for every row"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77bc66c8255b2c3a0ddc7b9cc0b1f7ad0ffd5bc9", "author": {"user": {"login": "arhimondr", "name": "Andrii Rosa"}}, "url": "https://github.com/prestodb/presto/commit/77bc66c8255b2c3a0ddc7b9cc0b1f7ad0ffd5bc9", "committedDate": "2020-06-18T13:51:48Z", "message": "Rename PrestoSparkRow to PrestoSparkMutableRow\n\nIn next commits an unsafe serialization algorithm will be introduced for\nbetter efficiency. The unsafe serialization algorithm tries to avoid\nunnecessary allocations by mutating an existing instance of the\nPrestoSparkMutableRow."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e5f42f65152da306767da69958880054831d062", "author": {"user": {"login": "arhimondr", "name": "Andrii Rosa"}}, "url": "https://github.com/prestodb/presto/commit/1e5f42f65152da306767da69958880054831d062", "committedDate": "2020-06-18T13:51:48Z", "message": "Add custom shuffle serialization for Presto on Spark"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16c7279b733e4d773be580402ae3239ca6d06986", "author": {"user": {"login": "arhimondr", "name": "Andrii Rosa"}}, "url": "https://github.com/prestodb/presto/commit/16c7279b733e4d773be580402ae3239ca6d06986", "committedDate": "2020-06-18T13:51:48Z", "message": "Optimize PrestoSparkRemoteSourceOperator\n\nAvoid rows decoding under the lock"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0f39096a18749f2bb49d651d73a5086d957c121", "author": {"user": {"login": "arhimondr", "name": "Andrii Rosa"}}, "url": "https://github.com/prestodb/presto/commit/b0f39096a18749f2bb49d651d73a5086d957c121", "committedDate": "2020-06-18T13:51:48Z", "message": "Optimize PrestoSparkOutputOperator\n\nAvoid allocating a lot of small objects"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ff668e515219a4b52c69c64cb269d19fa7ccbe6", "author": {"user": {"login": "arhimondr", "name": "Andrii Rosa"}}, "url": "https://github.com/prestodb/presto/commit/5ff668e515219a4b52c69c64cb269d19fa7ccbe6", "committedDate": "2020-06-18T14:03:42Z", "message": "Avoid unnecessary page to row conversions\n\nConvert to row only if shuffle is needed"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "de0bc338361d5206205709fea1f1683c0516072e", "author": {"user": {"login": "arhimondr", "name": "Andrii Rosa"}}, "url": "https://github.com/prestodb/presto/commit/de0bc338361d5206205709fea1f1683c0516072e", "committedDate": "2020-06-17T16:23:42Z", "message": "Avoid unnecessary page to row conversions\n\nConvert to row only if shuffle is needed"}, "afterCommit": {"oid": "5ff668e515219a4b52c69c64cb269d19fa7ccbe6", "author": {"user": {"login": "arhimondr", "name": "Andrii Rosa"}}, "url": "https://github.com/prestodb/presto/commit/5ff668e515219a4b52c69c64cb269d19fa7ccbe6", "committedDate": "2020-06-18T14:03:42Z", "message": "Avoid unnecessary page to row conversions\n\nConvert to row only if shuffle is needed"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1348, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}