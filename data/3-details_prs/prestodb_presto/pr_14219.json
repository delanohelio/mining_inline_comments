{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0NTMyOTc4", "number": 14219, "title": "Add syntax support for external function", "bodyText": "#resolves #14218\n== RELEASE NOTES ==\n\nGeneral Changes\n* Add support to create external function (this does not include external function execution).", "createdAt": "2020-03-05T22:29:19Z", "url": "https://github.com/prestodb/presto/pull/14219", "merged": true, "mergeCommit": {"oid": "f209297a6cb02a0a02415c48db15724547e3e0de"}, "closed": true, "closedAt": "2020-06-25T01:08:19Z", "author": {"login": "rongrong"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcK2A3wgBqjMxMDM1NTEwMTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcuh3ktABqjM0Nzk2MzUwOTM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9617a63faeb5f1b1bc34a1c43a7ee1a5bab8d77c", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/9617a63faeb5f1b1bc34a1c43a7ee1a5bab8d77c", "committedDate": "2020-03-05T22:26:34Z", "message": "Add syntax support for external function"}, "afterCommit": {"oid": "99d7327d85fd2a90ae09f25303556af3562e87bc", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/99d7327d85fd2a90ae09f25303556af3562e87bc", "committedDate": "2020-03-06T01:40:49Z", "message": "Add syntax support for external function"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMjEyNjE3", "url": "https://github.com/prestodb/presto/pull/14219#pullrequestreview-372212617", "createdAt": "2020-03-10T18:24:16Z", "commit": {"oid": "99d7327d85fd2a90ae09f25303556af3562e87bc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxODoyNDoxNlrOF0bj5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxODoyNDoxNlrOF0bj5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUyMTgzMA==", "bodyText": "equals or compatible? For example return 0 will work for a double return type?", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r390521830", "createdAt": "2020-03-10T18:24:16Z", "author": {"login": "kaikalur"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -580,14 +580,17 @@ protected Scope visitCreateFunction(CreateFunction node, Optional<Scope> scope)\n             Scope functionScope = Scope.builder()\n                     .withRelationType(RelationId.anonymous(), new RelationType(fields))\n                     .build();\n-            Type bodyType = analyzeExpression(node.getBody().getExpression(), functionScope).getExpressionTypes().get(NodeRef.of(node.getBody().getExpression()));\n-            if (!bodyType.equals(returnType)) {\n-                throw new SemanticException(TYPE_MISMATCH, node, \"Function implementation type '%s' does not match declared return type '%s'\", bodyType, returnType);\n-            }\n+            if (node.getBody().getReturnExpression().isPresent()) {\n+                Expression returnExpression = node.getBody().getReturnExpression().get();\n+                Type bodyType = analyzeExpression(returnExpression, functionScope).getExpressionTypes().get(NodeRef.of(returnExpression));\n+                if (!bodyType.equals(returnType)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99d7327d85fd2a90ae09f25303556af3562e87bc"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMjEzNzQ3", "url": "https://github.com/prestodb/presto/pull/14219#pullrequestreview-372213747", "createdAt": "2020-03-10T18:25:44Z", "commit": {"oid": "99d7327d85fd2a90ae09f25303556af3562e87bc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxODoyNTo0NFrOF0bncg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxODoyNTo0NFrOF0bncg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUyMjczOA==", "bodyText": "It's a reserved word now?", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r390522738", "createdAt": "2020-03-10T18:25:44Z", "author": {"login": "kaikalur"}, "path": "presto-parser/src/main/antlr4/com/facebook/presto/sql/parser/SqlBase.g4", "diffHunk": "@@ -647,6 +658,7 @@ INTO: 'INTO';\n IO: 'IO';\n IS: 'IS';\n ISOLATION: 'ISOLATION';\n+JAVA: 'JAVA';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99d7327d85fd2a90ae09f25303556af3562e87bc"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMjE0MDEz", "url": "https://github.com/prestodb/presto/pull/14219#pullrequestreview-372214013", "createdAt": "2020-03-10T18:26:09Z", "commit": {"oid": "99d7327d85fd2a90ae09f25303556af3562e87bc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxODoyNjowOVrOF0bobg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxODoyNjowOVrOF0bobg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUyMjk5MA==", "bodyText": "Same here", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r390522990", "createdAt": "2020-03-10T18:26:09Z", "author": {"login": "kaikalur"}, "path": "presto-parser/src/main/antlr4/com/facebook/presto/sql/parser/SqlBase.g4", "diffHunk": "@@ -662,6 +674,7 @@ LOGICAL: 'LOGICAL';\n MAP: 'MAP';\n MINUTE: 'MINUTE';\n MONTH: 'MONTH';\n+NAME: 'NAME';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99d7327d85fd2a90ae09f25303556af3562e87bc"}, "originalPosition": 71}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczMDEwMzIz", "url": "https://github.com/prestodb/presto/pull/14219#pullrequestreview-373010323", "createdAt": "2020-03-11T18:15:17Z", "commit": {"oid": "99d7327d85fd2a90ae09f25303556af3562e87bc"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxODoxNToxN1rOF1DJ1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxODozNjoyN1rOF1D56w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MDUxNw==", "bodyText": "RoutineBody is a Node, not a Statement. See comments below.", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r391170517", "createdAt": "2020-03-11T18:15:17Z", "author": {"login": "caithagoras"}, "path": "presto-parser/src/main/java/com/facebook/presto/sql/tree/RoutineBody.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.tree;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+public class RoutineBody\n+        extends Statement", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99d7327d85fd2a90ae09f25303556af3562e87bc"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3Mzk1OQ==", "bodyText": "Return statement is a first-class citizen as defined in the SQL-spec. It is a SQL control statement similar to Call. I think we'll still need it in this PR. See comments below.", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r391173959", "createdAt": "2020-03-11T18:20:49Z", "author": {"login": "caithagoras"}, "path": "presto-parser/src/main/java/com/facebook/presto/sql/tree/Return.java", "diffHunk": "@@ -1,89 +0,0 @@\n-/*\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package com.facebook.presto.sql.tree;\n-\n-import com.google.common.collect.ImmutableList;\n-\n-import java.util.List;\n-import java.util.Objects;\n-import java.util.Optional;\n-\n-import static com.google.common.base.MoreObjects.toStringHelper;\n-import static java.util.Objects.requireNonNull;\n-\n-public class Return", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99d7327d85fd2a90ae09f25303556af3562e87bc"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE4MjgyNw==", "bodyText": "Either a return expression (SQL routine spec) or an externalBodyReference should be specified as a routine body, but not both. Although constructor has enforced this, this is where inheritance should be used (similar to what we're doing with other parts of the AST).\nBy doing so, AstVisitor will have methods visitRoutineSpecification and visitExternalBodyReference, and if/else shouldn't be needed in many places.\npublic class RoutineBody extends Node {}\npublic class RoutineSpecification extends RoutineBody  {}\npublic class ExternalBodyReference extends RoutineBody  {}\n\npublic class RoutineSpecification {\n    private final Return return;  // Officially, this should be \"private final ProcedureStatement statement;\"\n}\nSimplification\nSince we're (1) not supporting rights clause, (2) only support Return in SQL routine specification, (3) not using Return in other cases, I'm ok to simplify this a bit by temporarily avoiding RoutineSpecification, and just do\npublic class Return extends RoutineBody;\nAlthough the structure I mentioned at the beginning is more locally correct and closer to SQL spec.\nSQL-2016 reference\n<routine body> ::=\n<SQL routine spec>\n| <external body reference>\n| <polymorphic table function body>\n\n<SQL routine spec>\n[ <rights clause> ] <SQL routine body>\n\n<SQL routine body> ::=\n   <SQL procedure statement>", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r391182827", "createdAt": "2020-03-11T18:36:27Z", "author": {"login": "caithagoras"}, "path": "presto-parser/src/main/java/com/facebook/presto/sql/tree/RoutineBody.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.tree;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+public class RoutineBody\n+        extends Statement\n+{\n+    private final Optional<Expression> returnExpression;\n+    private final Optional<ExternalBodyReference> externalBodyReference;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99d7327d85fd2a90ae09f25303556af3562e87bc"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczMDgwNTU2", "url": "https://github.com/prestodb/presto/pull/14219#pullrequestreview-373080556", "createdAt": "2020-03-11T19:54:06Z", "commit": {"oid": "99d7327d85fd2a90ae09f25303556af3562e87bc"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxOTo1NDowNlrOF1GbjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMDowNTowN1rOF1HA9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIyNDIwNQ==", "bodyText": "As according to SQL-2016 11.60 9(i), pg. 1009\nAn <SQL-invoked routine> that specifies or implies LANGUAGE SQL is called an SQL routine;\nan <SQL-invoked routine> that does not specify LANGUAGE SQL is called an external routine.\n\nLet's add this additional check.", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r391224205", "createdAt": "2020-03-11T19:54:06Z", "author": {"login": "caithagoras"}, "path": "presto-parser/src/main/java/com/facebook/presto/sql/parser/AstBuilder.java", "diffHunk": "@@ -428,7 +429,7 @@ public Node visitCreateFunction(SqlBaseParser.CreateFunctionContext context)\n                 getType(context.returnType),\n                 comment,\n                 getRoutineCharacteristics(context.routineCharacteristics()),\n-                (Return) visit(context.routineBody()));\n+                (RoutineBody) visit(context.routineBody()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99d7327d85fd2a90ae09f25303556af3562e87bc"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIyNTc1OA==", "bodyText": "See comment in RoutineBody.java, separate visit method should be implemented and this if block would unnecessary.", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r391225758", "createdAt": "2020-03-11T19:55:43Z", "author": {"login": "caithagoras"}, "path": "presto-parser/src/main/java/com/facebook/presto/sql/parser/AstBuilder.java", "diffHunk": "@@ -452,13 +453,28 @@ public Node visitDropFunction(SqlBaseParser.DropFunctionContext context)\n     @Override\n     public Node visitRoutineBody(SqlBaseParser.RoutineBodyContext context)\n     {\n-        return visit(context.returnStatement());\n+        if (context.returnStatement() != null) {\n+            return visit(context.returnStatement());\n+        }\n+        return visit(context.externalBodyReference());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99d7327d85fd2a90ae09f25303556af3562e87bc"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIyOTQwMw==", "bodyText": "We are allowing both identifier and string literal in the syntax, but we don't need to store them as is since we only care about the text. Instead, I think an Optional<String> name would be better, since the identifier/string literal are not used in an expression and hence no semantic difference.\nSee similar example in CallArgument.java and AstBuilder.visitNamedArgument", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r391229403", "createdAt": "2020-03-11T20:00:01Z", "author": {"login": "caithagoras"}, "path": "presto-parser/src/main/java/com/facebook/presto/sql/tree/ExternalBodyReference.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.tree;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static java.util.Objects.requireNonNull;\n+\n+public class ExternalBodyReference\n+        extends Node\n+{\n+    private final Optional<Identifier> identifier;\n+    private final Optional<StringLiteral> stringLiteral;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99d7327d85fd2a90ae09f25303556af3562e87bc"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIzMjY5OA==", "bodyText": "nit: add a line break after line 187.", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r391232698", "createdAt": "2020-03-11T20:03:49Z", "author": {"login": "caithagoras"}, "path": "pom.xml", "diffHunk": "@@ -180,6 +180,11 @@\n                 <type>test-jar</type>\n             </dependency>\n \n+            <dependency>\n+                <groupId>com.facebook.presto</groupId>\n+                <artifactId>presto-function-namespace-managers</artifactId>\n+                <version>${project.version}</version>\n+            </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99d7327d85fd2a90ae09f25303556af3562e87bc"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIzMzQ4NQ==", "bodyText": "Remove public for methods annotated with @VisibleForTesting.", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r391233485", "createdAt": "2020-03-11T20:04:48Z", "author": {"login": "caithagoras"}, "path": "presto-main/src/main/java/com/facebook/presto/metadata/FunctionManager.java", "diffHunk": "@@ -169,6 +169,15 @@ public void loadFunctionNamespaceManager(\n         }\n     }\n \n+    @VisibleForTesting\n+    public void addTestFunctionNamespace(String catalogName, FunctionNamespaceManager functionNamespaceManager)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99d7327d85fd2a90ae09f25303556af3562e87bc"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIzMzc4Mw==", "bodyText": "checkArgument?", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r391233783", "createdAt": "2020-03-11T20:05:07Z", "author": {"login": "caithagoras"}, "path": "presto-main/src/main/java/com/facebook/presto/metadata/FunctionManager.java", "diffHunk": "@@ -169,6 +169,15 @@ public void loadFunctionNamespaceManager(\n         }\n     }\n \n+    @VisibleForTesting\n+    public void addTestFunctionNamespace(String catalogName, FunctionNamespaceManager functionNamespaceManager)\n+    {\n+        transactionManager.registerFunctionNamespaceManager(catalogName, functionNamespaceManager);\n+        if (functionNamespaceManagers.putIfAbsent(catalogName, functionNamespaceManager) != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99d7327d85fd2a90ae09f25303556af3562e87bc"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczMDg4NzYx", "url": "https://github.com/prestodb/presto/pull/14219#pullrequestreview-373088761", "createdAt": "2020-03-11T20:07:28Z", "commit": {"oid": "99d7327d85fd2a90ae09f25303556af3562e87bc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMDowNzoyOVrOF1HJ-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMDowNzoyOVrOF1HJ-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIzNjA4OQ==", "bodyText": "Using a static map would be easier?", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r391236089", "createdAt": "2020-03-11T20:07:29Z", "author": {"login": "caithagoras"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/function/SqlInvokedFunction.java", "diffHunk": "@@ -141,7 +141,14 @@ public SqlFunctionId getFunctionId()\n \n     public FunctionImplementationType getFunctionImplementationType()\n     {\n-        return FunctionImplementationType.SQL;\n+        switch (routineCharacteristics.getLanguage()) {\n+            case SQL:\n+                return FunctionImplementationType.SQL;\n+            case JAVA:\n+                return FunctionImplementationType.THRIFT;\n+            default:\n+                throw new UnsupportedOperationException(format(\"Unsupported language %s\", routineCharacteristics.getLanguage()));\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99d7327d85fd2a90ae09f25303556af3562e87bc"}, "originalPosition": 12}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "99d7327d85fd2a90ae09f25303556af3562e87bc", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/99d7327d85fd2a90ae09f25303556af3562e87bc", "committedDate": "2020-03-06T01:40:49Z", "message": "Add syntax support for external function"}, "afterCommit": {"oid": "cb5b77c0cd5797078c477cb3505c409753e9e696", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/cb5b77c0cd5797078c477cb3505c409753e9e696", "committedDate": "2020-03-12T00:55:26Z", "message": "Add syntax support for external function"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cb5b77c0cd5797078c477cb3505c409753e9e696", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/cb5b77c0cd5797078c477cb3505c409753e9e696", "committedDate": "2020-03-12T00:55:26Z", "message": "Add syntax support for external function"}, "afterCommit": {"oid": "ad6ff34411abc5819ee83b067bfc1b825e2169e3", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/ad6ff34411abc5819ee83b067bfc1b825e2169e3", "committedDate": "2020-06-11T02:31:01Z", "message": "Add support for creating external function"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ad6ff34411abc5819ee83b067bfc1b825e2169e3", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/ad6ff34411abc5819ee83b067bfc1b825e2169e3", "committedDate": "2020-06-11T02:31:01Z", "message": "Add support for creating external function"}, "afterCommit": {"oid": "a54e0a26ae78750c1e1d0f1ff1d07a16702598cd", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/a54e0a26ae78750c1e1d0f1ff1d07a16702598cd", "committedDate": "2020-06-11T22:26:14Z", "message": "Add support for creating external function"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a54e0a26ae78750c1e1d0f1ff1d07a16702598cd", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/a54e0a26ae78750c1e1d0f1ff1d07a16702598cd", "committedDate": "2020-06-11T22:26:14Z", "message": "Add support for creating external function"}, "afterCommit": {"oid": "91d6a8cb931fb1af8ba29bdb8435427c04e951e3", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/91d6a8cb931fb1af8ba29bdb8435427c04e951e3", "committedDate": "2020-06-12T01:42:41Z", "message": "Add support for creating external function"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwMDQxMjM5", "url": "https://github.com/prestodb/presto/pull/14219#pullrequestreview-430041239", "createdAt": "2020-06-12T21:14:10Z", "commit": {"oid": "91d6a8cb931fb1af8ba29bdb8435427c04e951e3"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQyMToxNDoxMFrOGjRy-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQyMjowMzoyMVrOGjStww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY0NDkyMQ==", "bodyText": "We need test coverage for those cases, and also need to take a look at the spec what the expected behavior is:\n\nCREATE FUNCTION ... LANGUAGE SQL EXTERNAL\nCREATE FUNCTION ... LANGUAGE SQL EXTERNAL NAME\nCREATE FUNCTION ... LANGUAGE JAVA RETURN \n\nhttps://github.com/prestodb/presto/pull/14219/files#r391879785 may have some useful references to the spec.", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r439644921", "createdAt": "2020-06-12T21:14:10Z", "author": {"login": "caithagoras"}, "path": "presto-tests/src/test/java/com/facebook/presto/tests/TestSqlFunctions.java", "diffHunk": "@@ -97,6 +97,18 @@ public void testCreateFunctionInvalidSemantics()\n                 \".*CREATE FUNCTION body cannot contain aggregations, window functions or grouping operations:.*\");\n     }\n \n+    @Test\n+    public void testCreateFunctionExternal()\n+    {\n+        assertQuerySucceeds(\"CREATE FUNCTION testing.test.foo(x varchar) RETURNS varchar LANGUAGE JAVA EXTERNAL\");\n+        assertQuerySucceeds(\"CREATE FUNCTION testing.test.foo(x int) RETURNS bigint LANGUAGE JAVA EXTERNAL NAME foo_from_another_library\");\n+        assertQuerySucceeds(\"CREATE FUNCTION testing.test.foo(x bigint) RETURNS bigint LANGUAGE JAVA EXTERNAL NAME \\\"foo.from.another.library\\\"\");\n+        assertQuerySucceeds(\"CREATE FUNCTION testing.test.foo(x smallint) RETURNS bigint LANGUAGE JAVA EXTERNAL NAME 'foo.from.another.library'\");\n+        assertQuerySucceeds(\"CREATE FUNCTION testing.test.foo(x double) RETURNS double LANGUAGE \\\"JAVA\\\" EXTERNAL\");\n+\n+        assertQueryFails(\"CREATE FUNCTION testing.test.foo(x varchar) RETURNS varchar LANGUAGE UNSUPPORTED EXTERNAL\", \"Catalog testing does not support functions implemented in language UNSUPPORTED\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91d6a8cb931fb1af8ba29bdb8435427c04e951e3"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY0ODcxNA==", "bodyText": "I guess the reason we are adding those annotation is that we want to serialize the enum, but a Language can just be mapped to a JSON scalar, instead of a JSON map with always one single key.\nWe can do that using @JsonValue. There're plenty of examples. e.g. TransactionId.java.", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r439648714", "createdAt": "2020-06-12T21:25:45Z", "author": {"login": "caithagoras"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/function/RoutineCharacteristics.java", "diffHunk": "@@ -28,9 +28,48 @@\n \n public class RoutineCharacteristics\n {\n-    public enum Language\n+    public static class Language\n     {\n-        SQL;\n+        public static final Language SQL = new Language(\"SQL\");\n+\n+        private final String language;\n+\n+        @JsonCreator\n+        public Language(@JsonProperty(\"language\") String language)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91d6a8cb931fb1af8ba29bdb8435427c04e951e3"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY1MjAzMg==", "bodyText": "Both have the same semantic meaning, so the remaining of the system don't care about whether the routine name was specified using StringLiteral or Identifier. This level of information should be encapsulated by the syntax layer and should be opaque to the users of the AST node. e.g. all that semantic analyzer, planner, execution cared about is \"give me the optional name of external routine\".\n\n\nThe class is not self-contained. From the caller perspective, there is nothing to guarantee that getIdentifier and getStringLiteral won't be both present. It requires additional checking at each caller. But again, this is less important than the first bullet point.\n\n\nWe don't name variables using their types - we give them descriptive names. In many places, we just call a StringLiteral value.", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r439652032", "createdAt": "2020-06-12T21:36:16Z", "author": {"login": "caithagoras"}, "path": "presto-parser/src/main/java/com/facebook/presto/sql/tree/ExternalBodyReference.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.tree;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static java.util.Objects.requireNonNull;\n+\n+public class ExternalBodyReference\n+        extends Node\n+{\n+    private final Optional<Identifier> identifier;\n+    private final Optional<StringLiteral> stringLiteral;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIyOTQwMw=="}, "originalCommit": {"oid": "99d7327d85fd2a90ae09f25303556af3562e87bc"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY1MjY2NQ==", "bodyText": "I think I haven't read thoroughly about the spec. Could you enlighten me what it means for not providing an external routine name? How would engine know what to execute then? Oh, maybe it would be default to the function name?", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r439652665", "createdAt": "2020-06-12T21:38:16Z", "author": {"login": "caithagoras"}, "path": "presto-parser/src/main/antlr4/com/facebook/presto/sql/parser/SqlBase.g4", "diffHunk": "@@ -177,14 +177,20 @@ alterRoutineCharacteristic\n \n routineBody\n     : returnStatement\n+    | externalBodyReference\n     ;\n \n returnStatement\n     : RETURN expression\n     ;\n \n+externalBodyReference\n+    : EXTERNAL (NAME externalRoutineName)?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91d6a8cb931fb1af8ba29bdb8435427c04e951e3"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY1OTk3MQ==", "bodyText": "This doesn't seems to be related to syntax support, and I suggest to move this to engine: CreateFunctionTask.\nIf I'm a community user and admins of some Presto clusters, I would prefer less configuration parameters to set and tune.\ne.g. I want to use remote UDFs. I set up the UDF server, added the end points to the Presto engine config properties, and I already have function namespace manager setup from before. Why can't it \"just work\"? Can't the engine just figure out the support languages, like talking to the UDF server?\nIf engine and remote UDF server supports SQL, JAVA, JS, it is meaningless for me as an admin to configure the support language \"python\" anyway. So all I do here is mechanically set this configuration to match with whatever is available on the UDF server, because Presto requires me to?\nWell, for the first step, if the engine cannot yet automatically determine what languages the UDF server support, can we have engine level configuration instead? If user truely wants different supported languages on different function namespace managers, they can extend for their own FSM. If that's the case, we cannot even predict what user wants at this point. Maybe user wants a blacklist instead of a whitelist. Maybe they want a regex? Who knows?\nAlso, throw Exception if we're creating or executing functions with unsupported language, and I think it would creating a new error code to formalize this error path?", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r439659971", "createdAt": "2020-06-12T22:03:21Z", "author": {"login": "caithagoras"}, "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/SqlInvokedFunctionNamespaceManagerConfig.java", "diffHunk": "@@ -14,16 +14,25 @@\n package com.facebook.presto.functionNamespace;\n \n import com.facebook.airlift.configuration.Config;\n+import com.facebook.presto.spi.function.RoutineCharacteristics;\n+import com.google.common.base.Splitter;\n+import com.google.common.collect.ImmutableSet;\n import io.airlift.units.Duration;\n import io.airlift.units.MinDuration;\n \n+import java.util.Set;\n+\n+import static com.facebook.presto.spi.function.RoutineCharacteristics.Language.SQL;\n import static java.util.concurrent.TimeUnit.HOURS;\n import static java.util.concurrent.TimeUnit.MINUTES;\n \n public class SqlInvokedFunctionNamespaceManagerConfig\n {\n+    private static final Splitter LANGUAGE_SPLITTER = Splitter.on(',').omitEmptyStrings().trimResults();\n+\n     private Duration functionCacheExpiration = new Duration(5, MINUTES);\n     private Duration functionInstanceCacheExpiration = new Duration(8, HOURS);\n+    private Set<RoutineCharacteristics.Language> supportedFunctionLanguages = ImmutableSet.of(SQL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91d6a8cb931fb1af8ba29bdb8435427c04e951e3"}, "originalPosition": 22}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "91d6a8cb931fb1af8ba29bdb8435427c04e951e3", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/91d6a8cb931fb1af8ba29bdb8435427c04e951e3", "committedDate": "2020-06-12T01:42:41Z", "message": "Add support for creating external function"}, "afterCommit": {"oid": "a9d2a04e5ba79cd8ab047afaef933ba8db52da78", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/a9d2a04e5ba79cd8ab047afaef933ba8db52da78", "committedDate": "2020-06-23T23:47:56Z", "message": "Add support for creating external function"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a9d2a04e5ba79cd8ab047afaef933ba8db52da78", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/a9d2a04e5ba79cd8ab047afaef933ba8db52da78", "committedDate": "2020-06-23T23:47:56Z", "message": "Add support for creating external function"}, "afterCommit": {"oid": "7542fea4c4dd9bbd39d24e256a5db62596102a07", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/7542fea4c4dd9bbd39d24e256a5db62596102a07", "committedDate": "2020-06-24T21:54:06Z", "message": "Add support for creating external function"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7542fea4c4dd9bbd39d24e256a5db62596102a07", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/7542fea4c4dd9bbd39d24e256a5db62596102a07", "committedDate": "2020-06-24T21:54:06Z", "message": "Add support for creating external function"}, "afterCommit": {"oid": "7c7cf908b428e3d9bce4b79989f1a19e65b86c84", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/7c7cf908b428e3d9bce4b79989f1a19e65b86c84", "committedDate": "2020-06-24T21:54:53Z", "message": "Add support for creating external function"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MDQxOTI3", "url": "https://github.com/prestodb/presto/pull/14219#pullrequestreview-437041927", "createdAt": "2020-06-24T22:11:15Z", "commit": {"oid": "7c7cf908b428e3d9bce4b79989f1a19e65b86c84"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MDQ2OTI4", "url": "https://github.com/prestodb/presto/pull/14219#pullrequestreview-437046928", "createdAt": "2020-06-24T22:22:18Z", "commit": {"oid": "7c7cf908b428e3d9bce4b79989f1a19e65b86c84"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMjoyMjoxOVrOGolHXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMjoyMjoxOVrOGolHXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIwNDMxOQ==", "bodyText": "Isn't an identifier required?", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r445204319", "createdAt": "2020-06-24T22:22:19Z", "author": {"login": "kaikalur"}, "path": "presto-parser/src/main/java/com/facebook/presto/sql/tree/ExternalBodyReference.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.tree;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.google.common.base.MoreObjects.ToStringHelper;\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static java.util.Objects.requireNonNull;\n+\n+public class ExternalBodyReference\n+        extends RoutineBody\n+{\n+    private final Optional<Identifier> identifier;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c7cf908b428e3d9bce4b79989f1a19e65b86c84"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MDQ3NjE3", "url": "https://github.com/prestodb/presto/pull/14219#pullrequestreview-437047617", "createdAt": "2020-06-24T22:23:56Z", "commit": {"oid": "7c7cf908b428e3d9bce4b79989f1a19e65b86c84"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MDQ4MDU2", "url": "https://github.com/prestodb/presto/pull/14219#pullrequestreview-437048056", "createdAt": "2020-06-24T22:24:57Z", "commit": {"oid": "7c7cf908b428e3d9bce4b79989f1a19e65b86c84"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMjoyNDo1OFrOGolLNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMjoyNDo1OFrOGolLNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIwNTMwMQ==", "bodyText": "Actually, shouldn't this be just identifier now to match our AST?", "url": "https://github.com/prestodb/presto/pull/14219#discussion_r445205301", "createdAt": "2020-06-24T22:24:58Z", "author": {"login": "kaikalur"}, "path": "presto-docs/src/main/sphinx/sql/create-function.rst", "diffHunk": "@@ -14,10 +14,10 @@ Synopsis\n     )\n     RETURNS return_type\n     [ COMMENT function_description ]\n-    [ LANGUAGE SQL ]\n+    [ LANGUAGE [ SQL | identifier] ]\n     [ DETERMINISTIC | NOT DETERMINISTIC ]\n     [ RETURNS NULL ON NULL INPUT | CALLED ON NULL INPUT ]\n-    [ RETURN expression ]\n+    [ RETURN expression | EXTERNAL [NAME [identifier | string] ] ]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c7cf908b428e3d9bce4b79989f1a19e65b86c84"}, "originalPosition": 9}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ec90a897599896b4e4192341bcaaf7c87de6904", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/1ec90a897599896b4e4192341bcaaf7c87de6904", "committedDate": "2020-06-24T22:28:44Z", "message": "Add support for creating external function"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7c7cf908b428e3d9bce4b79989f1a19e65b86c84", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/7c7cf908b428e3d9bce4b79989f1a19e65b86c84", "committedDate": "2020-06-24T21:54:53Z", "message": "Add support for creating external function"}, "afterCommit": {"oid": "1ec90a897599896b4e4192341bcaaf7c87de6904", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/1ec90a897599896b4e4192341bcaaf7c87de6904", "committedDate": "2020-06-24T22:28:44Z", "message": "Add support for creating external function"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2002, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}