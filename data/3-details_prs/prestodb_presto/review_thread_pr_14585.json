{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0MjcyNzE3", "number": 14585, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxOToyNDoyNVrOEApG9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxOTozNDozNlrOEUK0Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MTA4OTgxOnYy", "diffSide": "RIGHT", "path": "presto-client/src/main/java/com/facebook/presto/client/GCSOAuthInterceptor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxOToyNDoyNVrOGcDSvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxODo0NjoyMVrOGcoMKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA2NzI2Mw==", "bodyText": "Do we need to hardcode the URL here? Maybe we can move it to a static variable.", "url": "https://github.com/prestodb/presto/pull/14585#discussion_r432067263", "createdAt": "2020-05-28T19:24:25Z", "author": {"login": "ChunxuTang"}, "path": "presto-client/src/main/java/com/facebook/presto/client/GCSOAuthInterceptor.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.client;\n+\n+import com.google.auth.oauth2.AccessToken;\n+import com.google.auth.oauth2.GoogleCredentials;\n+import okhttp3.Interceptor;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.util.Collections;\n+\n+import static com.facebook.presto.client.PrestoHeaders.PRESTO_EXTRA_CREDENTIAL;\n+import static java.util.Objects.requireNonNull;\n+\n+public class GCSOAuthInterceptor\n+        implements Interceptor\n+{\n+    public static final String GCS_CREDENTIALS_PATH_KEY = \"hive.gcs.credentials.path\";\n+    private static final String GCS_CREDENTIALS_OAUTH_TOKEN_KEY = \"hive.gcs.oauth\";\n+\n+    private String credentialsFilePath;\n+\n+    private GoogleCredentials credentials;\n+\n+    public GCSOAuthInterceptor(String credentialPath)\n+    {\n+        this.credentialsFilePath = requireNonNull(credentialPath);\n+    }\n+\n+    @Override\n+    public Response intercept(Chain chain)\n+            throws IOException\n+    {\n+        return chain.proceed(attachGCSAccessToken(chain.request()));\n+    }\n+\n+    private Request attachGCSAccessToken(Request request)\n+    {\n+        AccessToken token = getCredentials().getAccessToken();\n+        return request.newBuilder()\n+                .addHeader(PRESTO_EXTRA_CREDENTIAL, GCS_CREDENTIALS_OAUTH_TOKEN_KEY + \"=\" + token.getTokenValue())\n+                .build();\n+    }\n+\n+    private synchronized GoogleCredentials getCredentials()\n+    {\n+        if (credentials == null) {\n+            credentials = createCredentials();\n+        }\n+        try {\n+            credentials.refreshIfExpired();\n+        }\n+        catch (IOException e) {\n+            throw new ClientException(\"Google credential refreshing error\", e);\n+        }\n+        return credentials;\n+    }\n+\n+    private GoogleCredentials createCredentials()\n+    {\n+        try {\n+            return GoogleCredentials.fromStream(new FileInputStream(credentialsFilePath)).createScoped(Collections.singleton(\"https://www.googleapis.com/auth/devstorage.read_only\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e3b2d647675badb8df03c3d5cf78f72ff184f40"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY3MTc4Nw==", "bodyText": "Good catch,  will extract it as a constant val", "url": "https://github.com/prestodb/presto/pull/14585#discussion_r432671787", "createdAt": "2020-05-29T18:46:21Z", "author": {"login": "beinan"}, "path": "presto-client/src/main/java/com/facebook/presto/client/GCSOAuthInterceptor.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.client;\n+\n+import com.google.auth.oauth2.AccessToken;\n+import com.google.auth.oauth2.GoogleCredentials;\n+import okhttp3.Interceptor;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.util.Collections;\n+\n+import static com.facebook.presto.client.PrestoHeaders.PRESTO_EXTRA_CREDENTIAL;\n+import static java.util.Objects.requireNonNull;\n+\n+public class GCSOAuthInterceptor\n+        implements Interceptor\n+{\n+    public static final String GCS_CREDENTIALS_PATH_KEY = \"hive.gcs.credentials.path\";\n+    private static final String GCS_CREDENTIALS_OAUTH_TOKEN_KEY = \"hive.gcs.oauth\";\n+\n+    private String credentialsFilePath;\n+\n+    private GoogleCredentials credentials;\n+\n+    public GCSOAuthInterceptor(String credentialPath)\n+    {\n+        this.credentialsFilePath = requireNonNull(credentialPath);\n+    }\n+\n+    @Override\n+    public Response intercept(Chain chain)\n+            throws IOException\n+    {\n+        return chain.proceed(attachGCSAccessToken(chain.request()));\n+    }\n+\n+    private Request attachGCSAccessToken(Request request)\n+    {\n+        AccessToken token = getCredentials().getAccessToken();\n+        return request.newBuilder()\n+                .addHeader(PRESTO_EXTRA_CREDENTIAL, GCS_CREDENTIALS_OAUTH_TOKEN_KEY + \"=\" + token.getTokenValue())\n+                .build();\n+    }\n+\n+    private synchronized GoogleCredentials getCredentials()\n+    {\n+        if (credentials == null) {\n+            credentials = createCredentials();\n+        }\n+        try {\n+            credentials.refreshIfExpired();\n+        }\n+        catch (IOException e) {\n+            throw new ClientException(\"Google credential refreshing error\", e);\n+        }\n+        return credentials;\n+    }\n+\n+    private GoogleCredentials createCredentials()\n+    {\n+        try {\n+            return GoogleCredentials.fromStream(new FileInputStream(credentialsFilePath)).createScoped(Collections.singleton(\"https://www.googleapis.com/auth/devstorage.read_only\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA2NzI2Mw=="}, "originalCommit": {"oid": "4e3b2d647675badb8df03c3d5cf78f72ff184f40"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MTA5NjcxOnYy", "diffSide": "RIGHT", "path": "presto-client/src/main/java/com/facebook/presto/client/GCSOAuthInterceptor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxOToyNjozNFrOGcDXIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxODo0NToxMFrOGcoJ4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA2ODM4NA==", "bodyText": "The GCP documentation here (https://developers.google.com/identity/protocols/oauth2) recommends creating a signed JWT with the client ID and a private key from the GCP credential. Is this step automatically covered in the Google OAuth libs?", "url": "https://github.com/prestodb/presto/pull/14585#discussion_r432068384", "createdAt": "2020-05-28T19:26:34Z", "author": {"login": "ChunxuTang"}, "path": "presto-client/src/main/java/com/facebook/presto/client/GCSOAuthInterceptor.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.client;\n+\n+import com.google.auth.oauth2.AccessToken;\n+import com.google.auth.oauth2.GoogleCredentials;\n+import okhttp3.Interceptor;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.util.Collections;\n+\n+import static com.facebook.presto.client.PrestoHeaders.PRESTO_EXTRA_CREDENTIAL;\n+import static java.util.Objects.requireNonNull;\n+\n+public class GCSOAuthInterceptor\n+        implements Interceptor\n+{\n+    public static final String GCS_CREDENTIALS_PATH_KEY = \"hive.gcs.credentials.path\";\n+    private static final String GCS_CREDENTIALS_OAUTH_TOKEN_KEY = \"hive.gcs.oauth\";\n+\n+    private String credentialsFilePath;\n+\n+    private GoogleCredentials credentials;\n+\n+    public GCSOAuthInterceptor(String credentialPath)\n+    {\n+        this.credentialsFilePath = requireNonNull(credentialPath);\n+    }\n+\n+    @Override\n+    public Response intercept(Chain chain)\n+            throws IOException\n+    {\n+        return chain.proceed(attachGCSAccessToken(chain.request()));\n+    }\n+\n+    private Request attachGCSAccessToken(Request request)\n+    {\n+        AccessToken token = getCredentials().getAccessToken();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e3b2d647675badb8df03c3d5cf78f72ff184f40"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY3MTIwMg==", "bodyText": "Good call, I guess not.  I will post another commit or PR to support JWT with a given client ID", "url": "https://github.com/prestodb/presto/pull/14585#discussion_r432671202", "createdAt": "2020-05-29T18:45:10Z", "author": {"login": "beinan"}, "path": "presto-client/src/main/java/com/facebook/presto/client/GCSOAuthInterceptor.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.client;\n+\n+import com.google.auth.oauth2.AccessToken;\n+import com.google.auth.oauth2.GoogleCredentials;\n+import okhttp3.Interceptor;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.util.Collections;\n+\n+import static com.facebook.presto.client.PrestoHeaders.PRESTO_EXTRA_CREDENTIAL;\n+import static java.util.Objects.requireNonNull;\n+\n+public class GCSOAuthInterceptor\n+        implements Interceptor\n+{\n+    public static final String GCS_CREDENTIALS_PATH_KEY = \"hive.gcs.credentials.path\";\n+    private static final String GCS_CREDENTIALS_OAUTH_TOKEN_KEY = \"hive.gcs.oauth\";\n+\n+    private String credentialsFilePath;\n+\n+    private GoogleCredentials credentials;\n+\n+    public GCSOAuthInterceptor(String credentialPath)\n+    {\n+        this.credentialsFilePath = requireNonNull(credentialPath);\n+    }\n+\n+    @Override\n+    public Response intercept(Chain chain)\n+            throws IOException\n+    {\n+        return chain.proceed(attachGCSAccessToken(chain.request()));\n+    }\n+\n+    private Request attachGCSAccessToken(Request request)\n+    {\n+        AccessToken token = getCredentials().getAccessToken();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA2ODM4NA=="}, "originalCommit": {"oid": "4e3b2d647675badb8df03c3d5cf78f72ff184f40"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MTEwOTQyOnYy", "diffSide": "RIGHT", "path": "presto-client/src/main/java/com/facebook/presto/client/GCSOAuthInterceptor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxOTozMDo0OFrOGcDflQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxODo0OTozNVrOGcoSPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA3MDU0OQ==", "bodyText": "Is the synchronized keyword necessary here? Will this function be invoked in a multi-threaded situation?", "url": "https://github.com/prestodb/presto/pull/14585#discussion_r432070549", "createdAt": "2020-05-28T19:30:48Z", "author": {"login": "ChunxuTang"}, "path": "presto-client/src/main/java/com/facebook/presto/client/GCSOAuthInterceptor.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.client;\n+\n+import com.google.auth.oauth2.AccessToken;\n+import com.google.auth.oauth2.GoogleCredentials;\n+import okhttp3.Interceptor;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.util.Collections;\n+\n+import static com.facebook.presto.client.PrestoHeaders.PRESTO_EXTRA_CREDENTIAL;\n+import static java.util.Objects.requireNonNull;\n+\n+public class GCSOAuthInterceptor\n+        implements Interceptor\n+{\n+    public static final String GCS_CREDENTIALS_PATH_KEY = \"hive.gcs.credentials.path\";\n+    private static final String GCS_CREDENTIALS_OAUTH_TOKEN_KEY = \"hive.gcs.oauth\";\n+\n+    private String credentialsFilePath;\n+\n+    private GoogleCredentials credentials;\n+\n+    public GCSOAuthInterceptor(String credentialPath)\n+    {\n+        this.credentialsFilePath = requireNonNull(credentialPath);\n+    }\n+\n+    @Override\n+    public Response intercept(Chain chain)\n+            throws IOException\n+    {\n+        return chain.proceed(attachGCSAccessToken(chain.request()));\n+    }\n+\n+    private Request attachGCSAccessToken(Request request)\n+    {\n+        AccessToken token = getCredentials().getAccessToken();\n+        return request.newBuilder()\n+                .addHeader(PRESTO_EXTRA_CREDENTIAL, GCS_CREDENTIALS_OAUTH_TOKEN_KEY + \"=\" + token.getTokenValue())\n+                .build();\n+    }\n+\n+    private synchronized GoogleCredentials getCredentials()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e3b2d647675badb8df03c3d5cf78f72ff184f40"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY2NzYzNw==", "bodyText": "Good call.  This interceptor is used by presto-cli and presto-jdbc.  I think presto-jdbc might have some queries running in parallel.  Even for a single query, during the http conversation,  there are still multiple http calls, some of which might be triggered in an asynchronous way.", "url": "https://github.com/prestodb/presto/pull/14585#discussion_r432667637", "createdAt": "2020-05-29T18:37:42Z", "author": {"login": "beinan"}, "path": "presto-client/src/main/java/com/facebook/presto/client/GCSOAuthInterceptor.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.client;\n+\n+import com.google.auth.oauth2.AccessToken;\n+import com.google.auth.oauth2.GoogleCredentials;\n+import okhttp3.Interceptor;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.util.Collections;\n+\n+import static com.facebook.presto.client.PrestoHeaders.PRESTO_EXTRA_CREDENTIAL;\n+import static java.util.Objects.requireNonNull;\n+\n+public class GCSOAuthInterceptor\n+        implements Interceptor\n+{\n+    public static final String GCS_CREDENTIALS_PATH_KEY = \"hive.gcs.credentials.path\";\n+    private static final String GCS_CREDENTIALS_OAUTH_TOKEN_KEY = \"hive.gcs.oauth\";\n+\n+    private String credentialsFilePath;\n+\n+    private GoogleCredentials credentials;\n+\n+    public GCSOAuthInterceptor(String credentialPath)\n+    {\n+        this.credentialsFilePath = requireNonNull(credentialPath);\n+    }\n+\n+    @Override\n+    public Response intercept(Chain chain)\n+            throws IOException\n+    {\n+        return chain.proceed(attachGCSAccessToken(chain.request()));\n+    }\n+\n+    private Request attachGCSAccessToken(Request request)\n+    {\n+        AccessToken token = getCredentials().getAccessToken();\n+        return request.newBuilder()\n+                .addHeader(PRESTO_EXTRA_CREDENTIAL, GCS_CREDENTIALS_OAUTH_TOKEN_KEY + \"=\" + token.getTokenValue())\n+                .build();\n+    }\n+\n+    private synchronized GoogleCredentials getCredentials()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA3MDU0OQ=="}, "originalCommit": {"oid": "4e3b2d647675badb8df03c3d5cf78f72ff184f40"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY3MzM0MA==", "bodyText": "Gotcha. Thanks for your explanation.", "url": "https://github.com/prestodb/presto/pull/14585#discussion_r432673340", "createdAt": "2020-05-29T18:49:35Z", "author": {"login": "ChunxuTang"}, "path": "presto-client/src/main/java/com/facebook/presto/client/GCSOAuthInterceptor.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.client;\n+\n+import com.google.auth.oauth2.AccessToken;\n+import com.google.auth.oauth2.GoogleCredentials;\n+import okhttp3.Interceptor;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.util.Collections;\n+\n+import static com.facebook.presto.client.PrestoHeaders.PRESTO_EXTRA_CREDENTIAL;\n+import static java.util.Objects.requireNonNull;\n+\n+public class GCSOAuthInterceptor\n+        implements Interceptor\n+{\n+    public static final String GCS_CREDENTIALS_PATH_KEY = \"hive.gcs.credentials.path\";\n+    private static final String GCS_CREDENTIALS_OAUTH_TOKEN_KEY = \"hive.gcs.oauth\";\n+\n+    private String credentialsFilePath;\n+\n+    private GoogleCredentials credentials;\n+\n+    public GCSOAuthInterceptor(String credentialPath)\n+    {\n+        this.credentialsFilePath = requireNonNull(credentialPath);\n+    }\n+\n+    @Override\n+    public Response intercept(Chain chain)\n+            throws IOException\n+    {\n+        return chain.proceed(attachGCSAccessToken(chain.request()));\n+    }\n+\n+    private Request attachGCSAccessToken(Request request)\n+    {\n+        AccessToken token = getCredentials().getAccessToken();\n+        return request.newBuilder()\n+                .addHeader(PRESTO_EXTRA_CREDENTIAL, GCS_CREDENTIALS_OAUTH_TOKEN_KEY + \"=\" + token.getTokenValue())\n+                .build();\n+    }\n+\n+    private synchronized GoogleCredentials getCredentials()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA3MDU0OQ=="}, "originalCommit": {"oid": "4e3b2d647675badb8df03c3d5cf78f72ff184f40"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTY0OTkzOnYy", "diffSide": "RIGHT", "path": "presto-client/src/main/java/com/facebook/presto/client/GCSOAuthHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQwMTo1MzowM1rOGcv_Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwODowOTowNlrOG5_zJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc5OTUxOA==", "bodyText": "add one blank line between private static final and private final", "url": "https://github.com/prestodb/presto/pull/14585#discussion_r432799518", "createdAt": "2020-05-30T01:53:03Z", "author": {"login": "zhenxiao"}, "path": "presto-client/src/main/java/com/facebook/presto/client/GCSOAuthHandler.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.client;\n+\n+import com.google.auth.oauth2.AccessToken;\n+import com.google.auth.oauth2.GoogleCredentials;\n+import okhttp3.Authenticator;\n+import okhttp3.Interceptor;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+import okhttp3.Route;\n+\n+import javax.annotation.Nullable;\n+\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.util.Collections;\n+\n+import static com.facebook.presto.client.PrestoHeaders.PRESTO_EXTRA_CREDENTIAL;\n+import static java.util.Objects.requireNonNull;\n+\n+public class GCSOAuthHandler\n+        implements Interceptor, Authenticator\n+{\n+\n+    public static final String GCS_CREDENTIALS_PATH_KEY = \"hive.gcs.credentials.path\";\n+    private static final String GCS_CREDENTIALS_OAUTH_TOKEN_KEY = \"hive.gcs.oauth\";\n+    private final ClientSession session;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "745a04286c14c3827ac79c378eaa2d1f1eb65484"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ2NzMwMg==", "bodyText": "done", "url": "https://github.com/prestodb/presto/pull/14585#discussion_r463467302", "createdAt": "2020-07-31T08:09:06Z", "author": {"login": "beinan"}, "path": "presto-client/src/main/java/com/facebook/presto/client/GCSOAuthHandler.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.client;\n+\n+import com.google.auth.oauth2.AccessToken;\n+import com.google.auth.oauth2.GoogleCredentials;\n+import okhttp3.Authenticator;\n+import okhttp3.Interceptor;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+import okhttp3.Route;\n+\n+import javax.annotation.Nullable;\n+\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.util.Collections;\n+\n+import static com.facebook.presto.client.PrestoHeaders.PRESTO_EXTRA_CREDENTIAL;\n+import static java.util.Objects.requireNonNull;\n+\n+public class GCSOAuthHandler\n+        implements Interceptor, Authenticator\n+{\n+\n+    public static final String GCS_CREDENTIALS_PATH_KEY = \"hive.gcs.credentials.path\";\n+    private static final String GCS_CREDENTIALS_OAUTH_TOKEN_KEY = \"hive.gcs.oauth\";\n+    private final ClientSession session;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc5OTUxOA=="}, "originalCommit": {"oid": "745a04286c14c3827ac79c378eaa2d1f1eb65484"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTY1MDAyOnYy", "diffSide": "RIGHT", "path": "presto-client/src/main/java/com/facebook/presto/client/GCSOAuthHandler.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQwMTo1MzoyMFrOGcv_LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxOTo1Mjo1MlrOG5xlhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc5OTUzMw==", "bodyText": "shall we keep hive here? kind of misleading. If the session property is already defined, could we import the string from other class?", "url": "https://github.com/prestodb/presto/pull/14585#discussion_r432799533", "createdAt": "2020-05-30T01:53:20Z", "author": {"login": "zhenxiao"}, "path": "presto-client/src/main/java/com/facebook/presto/client/GCSOAuthHandler.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.client;\n+\n+import com.google.auth.oauth2.AccessToken;\n+import com.google.auth.oauth2.GoogleCredentials;\n+import okhttp3.Authenticator;\n+import okhttp3.Interceptor;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+import okhttp3.Route;\n+\n+import javax.annotation.Nullable;\n+\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.util.Collections;\n+\n+import static com.facebook.presto.client.PrestoHeaders.PRESTO_EXTRA_CREDENTIAL;\n+import static java.util.Objects.requireNonNull;\n+\n+public class GCSOAuthHandler\n+        implements Interceptor, Authenticator\n+{\n+\n+    public static final String GCS_CREDENTIALS_PATH_KEY = \"hive.gcs.credentials.path\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "745a04286c14c3827ac79c378eaa2d1f1eb65484"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY4MzUzNA==", "bodyText": "The \"hive.gcs.credentials.path\" is the key I newly added.   The other 'hive.gcs.oauth' is an existing one, which can be also found in presto-hive.\npresto-hive/src/main/java/com/facebook/presto/hive/gcs/GcsConfigurationProvider.java\n28:    private static final String GCS_OAUTH_KEY = \"hive.gcs.oauth\";\nIf we imported the constant \"hive.gcs.oauth\" from presto-hive,  we might introduce a new dependency from presto-client to presto-hive.  Shall we do that?\nI'm just thinking the name of these two keys need to be consistent.", "url": "https://github.com/prestodb/presto/pull/14585#discussion_r462683534", "createdAt": "2020-07-30T01:37:09Z", "author": {"login": "beinan"}, "path": "presto-client/src/main/java/com/facebook/presto/client/GCSOAuthHandler.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.client;\n+\n+import com.google.auth.oauth2.AccessToken;\n+import com.google.auth.oauth2.GoogleCredentials;\n+import okhttp3.Authenticator;\n+import okhttp3.Interceptor;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+import okhttp3.Route;\n+\n+import javax.annotation.Nullable;\n+\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.util.Collections;\n+\n+import static com.facebook.presto.client.PrestoHeaders.PRESTO_EXTRA_CREDENTIAL;\n+import static java.util.Objects.requireNonNull;\n+\n+public class GCSOAuthHandler\n+        implements Interceptor, Authenticator\n+{\n+\n+    public static final String GCS_CREDENTIALS_PATH_KEY = \"hive.gcs.credentials.path\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc5OTUzMw=="}, "originalCommit": {"oid": "745a04286c14c3827ac79c378eaa2d1f1eb65484"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIzNDQzNg==", "bodyText": "get it. no need to have dependency from presto-hive\nkeep hive.gcs.credentials.path is fine", "url": "https://github.com/prestodb/presto/pull/14585#discussion_r463234436", "createdAt": "2020-07-30T19:52:52Z", "author": {"login": "zhenxiao"}, "path": "presto-client/src/main/java/com/facebook/presto/client/GCSOAuthHandler.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.client;\n+\n+import com.google.auth.oauth2.AccessToken;\n+import com.google.auth.oauth2.GoogleCredentials;\n+import okhttp3.Authenticator;\n+import okhttp3.Interceptor;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+import okhttp3.Route;\n+\n+import javax.annotation.Nullable;\n+\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.util.Collections;\n+\n+import static com.facebook.presto.client.PrestoHeaders.PRESTO_EXTRA_CREDENTIAL;\n+import static java.util.Objects.requireNonNull;\n+\n+public class GCSOAuthHandler\n+        implements Interceptor, Authenticator\n+{\n+\n+    public static final String GCS_CREDENTIALS_PATH_KEY = \"hive.gcs.credentials.path\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc5OTUzMw=="}, "originalCommit": {"oid": "745a04286c14c3827ac79c378eaa2d1f1eb65484"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTY1MDE3OnYy", "diffSide": "RIGHT", "path": "presto-client/src/main/java/com/facebook/presto/client/GCSOAuthHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQwMTo1MzozM1rOGcv_Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwODowODo1NFrOG5_y0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc5OTU1NA==", "bodyText": "remove this blank line", "url": "https://github.com/prestodb/presto/pull/14585#discussion_r432799554", "createdAt": "2020-05-30T01:53:33Z", "author": {"login": "zhenxiao"}, "path": "presto-client/src/main/java/com/facebook/presto/client/GCSOAuthHandler.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.client;\n+\n+import com.google.auth.oauth2.AccessToken;\n+import com.google.auth.oauth2.GoogleCredentials;\n+import okhttp3.Authenticator;\n+import okhttp3.Interceptor;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+import okhttp3.Route;\n+\n+import javax.annotation.Nullable;\n+\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.util.Collections;\n+\n+import static com.facebook.presto.client.PrestoHeaders.PRESTO_EXTRA_CREDENTIAL;\n+import static java.util.Objects.requireNonNull;\n+\n+public class GCSOAuthHandler\n+        implements Interceptor, Authenticator\n+{\n+\n+    public static final String GCS_CREDENTIALS_PATH_KEY = \"hive.gcs.credentials.path\";\n+    private static final String GCS_CREDENTIALS_OAUTH_TOKEN_KEY = \"hive.gcs.oauth\";\n+    private final ClientSession session;\n+\n+    private String credentialsFilePath;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "745a04286c14c3827ac79c378eaa2d1f1eb65484"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ2NzIxOQ==", "bodyText": "done", "url": "https://github.com/prestodb/presto/pull/14585#discussion_r463467219", "createdAt": "2020-07-31T08:08:54Z", "author": {"login": "beinan"}, "path": "presto-client/src/main/java/com/facebook/presto/client/GCSOAuthHandler.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.client;\n+\n+import com.google.auth.oauth2.AccessToken;\n+import com.google.auth.oauth2.GoogleCredentials;\n+import okhttp3.Authenticator;\n+import okhttp3.Interceptor;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+import okhttp3.Route;\n+\n+import javax.annotation.Nullable;\n+\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.util.Collections;\n+\n+import static com.facebook.presto.client.PrestoHeaders.PRESTO_EXTRA_CREDENTIAL;\n+import static java.util.Objects.requireNonNull;\n+\n+public class GCSOAuthHandler\n+        implements Interceptor, Authenticator\n+{\n+\n+    public static final String GCS_CREDENTIALS_PATH_KEY = \"hive.gcs.credentials.path\";\n+    private static final String GCS_CREDENTIALS_OAUTH_TOKEN_KEY = \"hive.gcs.oauth\";\n+    private final ClientSession session;\n+\n+    private String credentialsFilePath;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc5OTU1NA=="}, "originalCommit": {"oid": "745a04286c14c3827ac79c378eaa2d1f1eb65484"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTY1MTI5OnYy", "diffSide": "RIGHT", "path": "presto-client/src/main/java/com/facebook/presto/client/GCSOAuthHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQwMTo1NTo0NFrOGcv_4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwODowODozNVrOG5_ySQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc5OTcxMw==", "bodyText": "make constant:\nhttps://www.googleapis.com/auth/devstorage.read_only", "url": "https://github.com/prestodb/presto/pull/14585#discussion_r432799713", "createdAt": "2020-05-30T01:55:44Z", "author": {"login": "zhenxiao"}, "path": "presto-client/src/main/java/com/facebook/presto/client/GCSOAuthHandler.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.client;\n+\n+import com.google.auth.oauth2.AccessToken;\n+import com.google.auth.oauth2.GoogleCredentials;\n+import okhttp3.Authenticator;\n+import okhttp3.Interceptor;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+import okhttp3.Route;\n+\n+import javax.annotation.Nullable;\n+\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.util.Collections;\n+\n+import static com.facebook.presto.client.PrestoHeaders.PRESTO_EXTRA_CREDENTIAL;\n+import static java.util.Objects.requireNonNull;\n+\n+public class GCSOAuthHandler\n+        implements Interceptor, Authenticator\n+{\n+\n+    public static final String GCS_CREDENTIALS_PATH_KEY = \"hive.gcs.credentials.path\";\n+    private static final String GCS_CREDENTIALS_OAUTH_TOKEN_KEY = \"hive.gcs.oauth\";\n+    private final ClientSession session;\n+\n+    private String credentialsFilePath;\n+\n+    private GoogleCredentials credentials;\n+\n+    public GCSOAuthHandler(ClientSession session)\n+    {\n+        this.session = requireNonNull(session);\n+        this.credentialsFilePath = session.getExtraCredentials().get(GCS_CREDENTIALS_PATH_KEY);\n+    }\n+\n+    @Nullable\n+    @Override\n+    public Request authenticate(Route route, Response response)\n+            throws IOException\n+    {\n+        return attachGCSAccessToken(response.request());\n+    }\n+\n+    @Override\n+    public Response intercept(Chain chain)\n+            throws IOException\n+    {\n+        try {\n+            return chain.proceed(attachGCSAccessToken(chain.request()));\n+        }\n+        catch (ClientException ignored) {\n+            return chain.proceed(chain.request());\n+        }\n+    }\n+\n+    private Request attachGCSAccessToken(Request request)\n+    {\n+        AccessToken token = getCredentials().getAccessToken();\n+        return request.newBuilder()\n+                .addHeader(PRESTO_EXTRA_CREDENTIAL, GCS_CREDENTIALS_OAUTH_TOKEN_KEY + \"=\" + token.getTokenValue())\n+                .build();\n+    }\n+\n+    private synchronized GoogleCredentials getCredentials()\n+    {\n+        if (credentials == null) {\n+            credentials = createCredentials();\n+        }\n+        try {\n+            credentials.refreshIfExpired();\n+        }\n+        catch (IOException e) {\n+            throw new ClientException(\"Google credential refreshing error\", e);\n+        }\n+        return credentials;\n+    }\n+\n+    private GoogleCredentials createCredentials()\n+    {\n+        try {\n+            return GoogleCredentials.fromStream(new FileInputStream(credentialsFilePath)).createScoped(Collections.singleton(\"https://www.googleapis.com/auth/devstorage.read_only\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "745a04286c14c3827ac79c378eaa2d1f1eb65484"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ2NzA4MQ==", "bodyText": "done", "url": "https://github.com/prestodb/presto/pull/14585#discussion_r463467081", "createdAt": "2020-07-31T08:08:35Z", "author": {"login": "beinan"}, "path": "presto-client/src/main/java/com/facebook/presto/client/GCSOAuthHandler.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.client;\n+\n+import com.google.auth.oauth2.AccessToken;\n+import com.google.auth.oauth2.GoogleCredentials;\n+import okhttp3.Authenticator;\n+import okhttp3.Interceptor;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+import okhttp3.Route;\n+\n+import javax.annotation.Nullable;\n+\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.util.Collections;\n+\n+import static com.facebook.presto.client.PrestoHeaders.PRESTO_EXTRA_CREDENTIAL;\n+import static java.util.Objects.requireNonNull;\n+\n+public class GCSOAuthHandler\n+        implements Interceptor, Authenticator\n+{\n+\n+    public static final String GCS_CREDENTIALS_PATH_KEY = \"hive.gcs.credentials.path\";\n+    private static final String GCS_CREDENTIALS_OAUTH_TOKEN_KEY = \"hive.gcs.oauth\";\n+    private final ClientSession session;\n+\n+    private String credentialsFilePath;\n+\n+    private GoogleCredentials credentials;\n+\n+    public GCSOAuthHandler(ClientSession session)\n+    {\n+        this.session = requireNonNull(session);\n+        this.credentialsFilePath = session.getExtraCredentials().get(GCS_CREDENTIALS_PATH_KEY);\n+    }\n+\n+    @Nullable\n+    @Override\n+    public Request authenticate(Route route, Response response)\n+            throws IOException\n+    {\n+        return attachGCSAccessToken(response.request());\n+    }\n+\n+    @Override\n+    public Response intercept(Chain chain)\n+            throws IOException\n+    {\n+        try {\n+            return chain.proceed(attachGCSAccessToken(chain.request()));\n+        }\n+        catch (ClientException ignored) {\n+            return chain.proceed(chain.request());\n+        }\n+    }\n+\n+    private Request attachGCSAccessToken(Request request)\n+    {\n+        AccessToken token = getCredentials().getAccessToken();\n+        return request.newBuilder()\n+                .addHeader(PRESTO_EXTRA_CREDENTIAL, GCS_CREDENTIALS_OAUTH_TOKEN_KEY + \"=\" + token.getTokenValue())\n+                .build();\n+    }\n+\n+    private synchronized GoogleCredentials getCredentials()\n+    {\n+        if (credentials == null) {\n+            credentials = createCredentials();\n+        }\n+        try {\n+            credentials.refreshIfExpired();\n+        }\n+        catch (IOException e) {\n+            throw new ClientException(\"Google credential refreshing error\", e);\n+        }\n+        return credentials;\n+    }\n+\n+    private GoogleCredentials createCredentials()\n+    {\n+        try {\n+            return GoogleCredentials.fromStream(new FileInputStream(credentialsFilePath)).createScoped(Collections.singleton(\"https://www.googleapis.com/auth/devstorage.read_only\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc5OTcxMw=="}, "originalCommit": {"oid": "745a04286c14c3827ac79c378eaa2d1f1eb65484"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTY1MTk1OnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQwMTo1NjoyOFrOGcwALg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwODowODoyNFrOG5_x8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc5OTc5MA==", "bodyText": "oh, this PR is a dependency of:\nprestodb/presto-hadoop-apache2#43", "url": "https://github.com/prestodb/presto/pull/14585#discussion_r432799790", "createdAt": "2020-05-30T01:56:28Z", "author": {"login": "zhenxiao"}, "path": "pom.xml", "diffHunk": "@@ -548,7 +548,7 @@\n             <dependency>\n                 <groupId>com.facebook.presto.hadoop</groupId>\n                 <artifactId>hadoop-apache2</artifactId>\n-                <version>2.7.4-7</version>\n+                <version>2.7.4-8-beinan</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddfb2d3f7e3fc09070625b8fd8dac59426c9c3c7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ2Njk5Mg==", "bodyText": "We have updated the version to 2.7.4-8 in another pr", "url": "https://github.com/prestodb/presto/pull/14585#discussion_r463466992", "createdAt": "2020-07-31T08:08:24Z", "author": {"login": "beinan"}, "path": "pom.xml", "diffHunk": "@@ -548,7 +548,7 @@\n             <dependency>\n                 <groupId>com.facebook.presto.hadoop</groupId>\n                 <artifactId>hadoop-apache2</artifactId>\n-                <version>2.7.4-7</version>\n+                <version>2.7.4-8-beinan</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc5OTc5MA=="}, "originalCommit": {"oid": "ddfb2d3f7e3fc09070625b8fd8dac59426c9c3c7"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTY1MjgwOnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/main/java/com/facebook/presto/jdbc/PrestoDriverUri.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQwMTo1NzozMlrOGcwAqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwODowNzo0NVrOG5_wow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc5OTkxNA==", "bodyText": "static import GCSOAuthInterceptor.GCS_CREDENTIALS_PATH_KEY", "url": "https://github.com/prestodb/presto/pull/14585#discussion_r432799914", "createdAt": "2020-05-30T01:57:32Z", "author": {"login": "zhenxiao"}, "path": "presto-jdbc/src/main/java/com/facebook/presto/jdbc/PrestoDriverUri.java", "diffHunk": "@@ -186,6 +188,10 @@ public void setupClient(OkHttpClient.Builder builder)\n                                 .orElseGet(() -> defaultCredentialCachePath().map(File::new).orElse(null))));\n             }\n \n+            Map<String, String> extraCredentials = EXTRA_CREDENTIALS.getValue(properties).orElse(ImmutableMap.of());\n+            Optional.ofNullable(extraCredentials.get(GCSOAuthInterceptor.GCS_CREDENTIALS_PATH_KEY))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cd37a79efb808264f56aab5e25cecbaad6595ff"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ2NjY1OQ==", "bodyText": "done", "url": "https://github.com/prestodb/presto/pull/14585#discussion_r463466659", "createdAt": "2020-07-31T08:07:45Z", "author": {"login": "beinan"}, "path": "presto-jdbc/src/main/java/com/facebook/presto/jdbc/PrestoDriverUri.java", "diffHunk": "@@ -186,6 +188,10 @@ public void setupClient(OkHttpClient.Builder builder)\n                                 .orElseGet(() -> defaultCredentialCachePath().map(File::new).orElse(null))));\n             }\n \n+            Map<String, String> extraCredentials = EXTRA_CREDENTIALS.getValue(properties).orElse(ImmutableMap.of());\n+            Optional.ofNullable(extraCredentials.get(GCSOAuthInterceptor.GCS_CREDENTIALS_PATH_KEY))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc5OTkxNA=="}, "originalCommit": {"oid": "8cd37a79efb808264f56aab5e25cecbaad6595ff"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NTg0MTMxOnYy", "diffSide": "LEFT", "path": "pom.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxOTozNDoyMVrOG6Tybg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMDozMzoyOFrOG6Vdnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc5NDc5OA==", "bodyText": "shall we keep the blank line?", "url": "https://github.com/prestodb/presto/pull/14585#discussion_r463794798", "createdAt": "2020-07-31T19:34:21Z", "author": {"login": "zhenxiao"}, "path": "pom.xml", "diffHunk": "@@ -1174,7 +1185,6 @@\n                     </exclusion>\n                 </exclusions>\n             </dependency>\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e852a2b6791288ed358354d987c6d5ac57815fc2"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgyMjIzOQ==", "bodyText": "done", "url": "https://github.com/prestodb/presto/pull/14585#discussion_r463822239", "createdAt": "2020-07-31T20:33:28Z", "author": {"login": "beinan"}, "path": "pom.xml", "diffHunk": "@@ -1174,7 +1185,6 @@\n                     </exclusion>\n                 </exclusions>\n             </dependency>\n-", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc5NDc5OA=="}, "originalCommit": {"oid": "e852a2b6791288ed358354d987c6d5ac57815fc2"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NTg0MTc5OnYy", "diffSide": "LEFT", "path": "pom.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxOTozNDozNlrOG6TyzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMDozMzoyNlrOG6Vdjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc5NDg5Mw==", "bodyText": "keep the blank line for format", "url": "https://github.com/prestodb/presto/pull/14585#discussion_r463794893", "createdAt": "2020-07-31T19:34:36Z", "author": {"login": "zhenxiao"}, "path": "pom.xml", "diffHunk": "@@ -1158,7 +1170,6 @@\n                     </exclusion>\n                 </exclusions>\n             </dependency>\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e852a2b6791288ed358354d987c6d5ac57815fc2"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgyMjIyMg==", "bodyText": "done", "url": "https://github.com/prestodb/presto/pull/14585#discussion_r463822222", "createdAt": "2020-07-31T20:33:26Z", "author": {"login": "beinan"}, "path": "pom.xml", "diffHunk": "@@ -1158,7 +1170,6 @@\n                     </exclusion>\n                 </exclusions>\n             </dependency>\n-", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc5NDg5Mw=="}, "originalCommit": {"oid": "e852a2b6791288ed358354d987c6d5ac57815fc2"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2689, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}