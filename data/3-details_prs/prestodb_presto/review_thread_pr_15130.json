{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgxNjg1MTA0", "number": 15130, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMDo0MToyMFrOEhdmaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxOTowNzozN1rOEh0KQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNTIzNDM1OnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDictionarySelectiveReader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMDo0MToyMFrOHOyklA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwODowNToxNVrOHO7iXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI3MDY3Ng==", "bodyText": "nit: can we give it a more meaningful name?", "url": "https://github.com/prestodb/presto/pull/15130#discussion_r485270676", "createdAt": "2020-09-09T00:41:20Z", "author": {"login": "sujay-jain"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDictionarySelectiveReader.java", "diffHunk": "@@ -87,16 +92,17 @@\n     private final int maxCodePointCount;\n     private final boolean isCharType;\n \n-    private byte[] stripeDictionaryData = EMPTY_DICTIONARY_DATA;\n-    private int[] stripeDictionaryOffsetVector = EMPTY_DICTIONARY_OFFSETS;\n-    private byte[] currentDictionaryData = EMPTY_DICTIONARY_DATA;\n+    private byte[] dictionaryData = EMPTY_DICTIONARY_DATA;\n+    private int[] dictionaryOffsetVector = EMPTY_DICTIONARY_OFFSETS;\n     private int[] stripeDictionaryLength = new int[0];\n     private int[] rowGroupDictionaryLength = new int[0];\n     private byte[] evaluationStatus;\n+    private byte[] tempValue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90ef6a5070ed69288fdd5135a6e4b1dd7dcf89a2"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQxNzU2Ng==", "bodyText": "Renamed it to valueWithPadding", "url": "https://github.com/prestodb/presto/pull/15130#discussion_r485417566", "createdAt": "2020-09-09T08:05:15Z", "author": {"login": "yingsu00"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDictionarySelectiveReader.java", "diffHunk": "@@ -87,16 +92,17 @@\n     private final int maxCodePointCount;\n     private final boolean isCharType;\n \n-    private byte[] stripeDictionaryData = EMPTY_DICTIONARY_DATA;\n-    private int[] stripeDictionaryOffsetVector = EMPTY_DICTIONARY_OFFSETS;\n-    private byte[] currentDictionaryData = EMPTY_DICTIONARY_DATA;\n+    private byte[] dictionaryData = EMPTY_DICTIONARY_DATA;\n+    private int[] dictionaryOffsetVector = EMPTY_DICTIONARY_OFFSETS;\n     private int[] stripeDictionaryLength = new int[0];\n     private int[] rowGroupDictionaryLength = new int[0];\n     private byte[] evaluationStatus;\n+    private byte[] tempValue;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI3MDY3Ng=="}, "originalCommit": {"oid": "90ef6a5070ed69288fdd5135a6e4b1dd7dcf89a2"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNTIzNTc3OnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDictionarySelectiveReader.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMDo0MjowNlrOHOylWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwODoxODo1M1rOHO8CNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI3MDg3Mw==", "bodyText": "Could you elaborate on where the numbers came from? Is this something that's standard and well known?", "url": "https://github.com/prestodb/presto/pull/15130#discussion_r485270873", "createdAt": "2020-09-09T00:42:06Z", "author": {"login": "sujay-jain"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDictionarySelectiveReader.java", "diffHunk": "@@ -78,6 +79,10 @@\n     // add one extra entry for null after stripe/rowGroup dictionary\n     private static final int[] EMPTY_DICTIONARY_OFFSETS = new int[2];\n \n+    // Each rowgroup has roughly 10K rows, and each batch reads 1K rows. So there're about 10 batches in a rowgroup.\n+    private static final int BATCHES_PER_ROWGROUP = 10;\n+    private static final float MATERIALIZATION_RATIO = 2.0f;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90ef6a5070ed69288fdd5135a6e4b1dd7dcf89a2"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM3Njg1MQ==", "bodyText": "https://orc.apache.org/specification/ORCv1/ states that the default row group has 10,000 rows. Since each batch has at most 1024 rows, the BATCHES_PER_ROWGROUP is roughly 10.\nMATERIALIZATION_RATIO should be a value greater than 1.0f to account for extra CPU required to materialize the VariableWidthBlock. I picked 2.0f here which is a safe choice, so that it doesn't over-radically materialize blocks. This value can be adjusted in the future, but I think it's over-kill to introduce configuration properties because this is too technical and users won't know how to configure it.", "url": "https://github.com/prestodb/presto/pull/15130#discussion_r485376851", "createdAt": "2020-09-09T06:49:11Z", "author": {"login": "yingsu00"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDictionarySelectiveReader.java", "diffHunk": "@@ -78,6 +79,10 @@\n     // add one extra entry for null after stripe/rowGroup dictionary\n     private static final int[] EMPTY_DICTIONARY_OFFSETS = new int[2];\n \n+    // Each rowgroup has roughly 10K rows, and each batch reads 1K rows. So there're about 10 batches in a rowgroup.\n+    private static final int BATCHES_PER_ROWGROUP = 10;\n+    private static final float MATERIALIZATION_RATIO = 2.0f;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI3MDg3Mw=="}, "originalCommit": {"oid": "90ef6a5070ed69288fdd5135a6e4b1dd7dcf89a2"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQyNTcxNg==", "bodyText": "I added the following comments\n// MATERIALIZATION_RATIO should be greater than or equal to 1.0f to compensate the extra CPU to materialize blocks.", "url": "https://github.com/prestodb/presto/pull/15130#discussion_r485425716", "createdAt": "2020-09-09T08:18:53Z", "author": {"login": "yingsu00"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDictionarySelectiveReader.java", "diffHunk": "@@ -78,6 +79,10 @@\n     // add one extra entry for null after stripe/rowGroup dictionary\n     private static final int[] EMPTY_DICTIONARY_OFFSETS = new int[2];\n \n+    // Each rowgroup has roughly 10K rows, and each batch reads 1K rows. So there're about 10 batches in a rowgroup.\n+    private static final int BATCHES_PER_ROWGROUP = 10;\n+    private static final float MATERIALIZATION_RATIO = 2.0f;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI3MDg3Mw=="}, "originalCommit": {"oid": "90ef6a5070ed69288fdd5135a6e4b1dd7dcf89a2"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNTMwMDc4OnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDictionarySelectiveReader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMToxODowNlrOHOzK4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNjo1NDoyMlrOHO5NKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI4MDQ4MA==", "bodyText": "curious why just allNulls check won't be sufficient here", "url": "https://github.com/prestodb/presto/pull/15130#discussion_r485280480", "createdAt": "2020-09-09T01:18:06Z", "author": {"login": "sujay-jain"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDictionarySelectiveReader.java", "diffHunk": "@@ -365,33 +386,69 @@ public Block getBlock(int[] positions, int positionCount)\n         checkState(positionCount <= outputPositionCount, \"Not enough values\");\n         checkState(!valuesInUse, \"BlockLease hasn't been closed yet\");\n \n-        if (allNulls) {\n+        if (allNulls || nullsCount == outputPositionCount) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90ef6a5070ed69288fdd5135a6e4b1dd7dcf89a2"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM3OTM3MQ==", "bodyText": "allNulls is set true when dataStream == null && presentStream != null. When this condition is false, it's still possible that all the selected positions after read() is finished are null. Think of the starting batches where batchSize == 1 or some small numbers. It's possible this value is null.", "url": "https://github.com/prestodb/presto/pull/15130#discussion_r485379371", "createdAt": "2020-09-09T06:54:22Z", "author": {"login": "yingsu00"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDictionarySelectiveReader.java", "diffHunk": "@@ -365,33 +386,69 @@ public Block getBlock(int[] positions, int positionCount)\n         checkState(positionCount <= outputPositionCount, \"Not enough values\");\n         checkState(!valuesInUse, \"BlockLease hasn't been closed yet\");\n \n-        if (allNulls) {\n+        if (allNulls || nullsCount == outputPositionCount) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI4MDQ4MA=="}, "originalCommit": {"oid": "90ef6a5070ed69288fdd5135a6e4b1dd7dcf89a2"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNTMxMTcyOnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDictionarySelectiveReader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMToyNDoxNVrOHOzRPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwODowNTowNlrOHO7iBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI4MjExMA==", "bodyText": "do you think we could extract some of this into functions and have some unit tests for them? there's a lot going on and it is easy to make mistake. Extracting into a function whose name describes what we're doing would also make it more readable :) What do you think? (L394- L411, and L422-L32.. etc)", "url": "https://github.com/prestodb/presto/pull/15130#discussion_r485282110", "createdAt": "2020-09-09T01:24:15Z", "author": {"login": "sujay-jain"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDictionarySelectiveReader.java", "diffHunk": "@@ -365,33 +386,69 @@ public Block getBlock(int[] positions, int positionCount)\n         checkState(positionCount <= outputPositionCount, \"Not enough values\");\n         checkState(!valuesInUse, \"BlockLease hasn't been closed yet\");\n \n-        if (allNulls) {\n+        if (allNulls || nullsCount == outputPositionCount) {\n             return new RunLengthEncodedBlock(outputType.createBlockBuilder(null, 1).appendNull().build(), positionCount);\n         }\n \n-        if (positionCount == outputPositionCount) {\n-            DictionaryBlock block = new DictionaryBlock(positionCount, dictionary, values);\n-            values = null;\n-            return block;\n+        // compact values(ids) array, and calculate 1) the slice sizeInBytes if materialized, and 2) number of nulls\n+        long blockSizeInBytes = 0;\n+        int nullsCount = 0;  // the nulls count for selected positions\n+        int i = 0;\n+        int j = 0;\n+        while (i < positionCount && j < outputPositionCount) {\n+            if (positions[i] != outputPositions[j]) {\n+                j++;\n+                continue;\n+            }\n+\n+            int id = this.values[j];\n+            values[i] = id;\n+\n+            blockSizeInBytes += dictionaryOffsetVector[id + 1] - dictionaryOffsetVector[id];\n+            nullsCount += id == currentDictionarySize - 1 ? 1 : 0;\n+\n+            i++;\n+            j++;\n         }\n \n-        int[] valuesCopy = new int[positionCount];\n+        // If all selected positions are null, just return RLE block.\n+        if (nullsCount == outputPositionCount) {\n+            return new RunLengthEncodedBlock(outputType.createBlockBuilder(null, 1).appendNull().build(), positionCount);\n+        }\n \n-        int positionIndex = 0;\n-        int nextPosition = positions[positionIndex];\n-        for (int i = 0; i < outputPositionCount; i++) {\n-            if (outputPositions[i] < nextPosition) {\n-                continue;\n+        // If the expected materialized size of the output block is smaller than a certain ratio of the dictionary size, we will materialize the values\n+        int dictionarySizeInBytes = dictionaryOffsetVector[currentDictionarySize - 1];\n+        if (blockSizeInBytes * BATCHES_PER_ROWGROUP < dictionarySizeInBytes / MATERIALIZATION_RATIO) {\n+            byte[] sliceData = new byte[toIntExact(blockSizeInBytes)];\n+            int[] offsetVector = new int[positionCount + 1];\n+            int currentOffset = 0;\n+            for (int k = 0; k < positionCount; k++) {\n+                int id = values[k];\n+                int offset = dictionaryOffsetVector[id];\n+                int length = dictionaryOffsetVector[id + 1] - offset;\n+                System.arraycopy(dictionaryData, offset, sliceData, currentOffset, length);\n+\n+                currentOffset += length;\n+                offsetVector[k + 1] = currentOffset;\n             }\n-            assert outputPositions[i] == nextPosition;\n-            valuesCopy[positionIndex] = this.values[i];\n-            positionIndex++;\n-            if (positionIndex >= positionCount) {\n-                break;\n+\n+            if (nullsCount > 0) {\n+                boolean[] isNullVector = new boolean[positionCount];\n+                for (int k = 0; k < positionCount; k++) {\n+                    if (values[k] == currentDictionarySize - 1) {\n+                        isNullVector[k] = true;\n+                    }\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90ef6a5070ed69288fdd5135a6e4b1dd7dcf89a2"}, "originalPosition": 199}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQxNzQ3OA==", "bodyText": "@sujay-jain Thanks for the suggestion. I extracted getMaterializedBlock() since it's a relatively self-explanatory unit. L394- L411 was just a rewrite of original L380-L393 which was inlined in getBlock(). I think it's easier for readers to understand if we keep it that way. This piece is not as isolated as getMaterializedBlock(), and jumping between the methods would make readers have context switches back and forth.\nOur testing framework uses OrcTester and tests round trips and match the input and output. The new code logic is already covered in TestSelectiveOrcReader. I updated the comments in testVarchars() there. There is no testing framework that can test each individual functions and building one from ground is beyond this PR. We can't just call getBlock() by itself without first calling read(). And if we call both, it's the same as what the current OrcTester does.", "url": "https://github.com/prestodb/presto/pull/15130#discussion_r485417478", "createdAt": "2020-09-09T08:05:06Z", "author": {"login": "yingsu00"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDictionarySelectiveReader.java", "diffHunk": "@@ -365,33 +386,69 @@ public Block getBlock(int[] positions, int positionCount)\n         checkState(positionCount <= outputPositionCount, \"Not enough values\");\n         checkState(!valuesInUse, \"BlockLease hasn't been closed yet\");\n \n-        if (allNulls) {\n+        if (allNulls || nullsCount == outputPositionCount) {\n             return new RunLengthEncodedBlock(outputType.createBlockBuilder(null, 1).appendNull().build(), positionCount);\n         }\n \n-        if (positionCount == outputPositionCount) {\n-            DictionaryBlock block = new DictionaryBlock(positionCount, dictionary, values);\n-            values = null;\n-            return block;\n+        // compact values(ids) array, and calculate 1) the slice sizeInBytes if materialized, and 2) number of nulls\n+        long blockSizeInBytes = 0;\n+        int nullsCount = 0;  // the nulls count for selected positions\n+        int i = 0;\n+        int j = 0;\n+        while (i < positionCount && j < outputPositionCount) {\n+            if (positions[i] != outputPositions[j]) {\n+                j++;\n+                continue;\n+            }\n+\n+            int id = this.values[j];\n+            values[i] = id;\n+\n+            blockSizeInBytes += dictionaryOffsetVector[id + 1] - dictionaryOffsetVector[id];\n+            nullsCount += id == currentDictionarySize - 1 ? 1 : 0;\n+\n+            i++;\n+            j++;\n         }\n \n-        int[] valuesCopy = new int[positionCount];\n+        // If all selected positions are null, just return RLE block.\n+        if (nullsCount == outputPositionCount) {\n+            return new RunLengthEncodedBlock(outputType.createBlockBuilder(null, 1).appendNull().build(), positionCount);\n+        }\n \n-        int positionIndex = 0;\n-        int nextPosition = positions[positionIndex];\n-        for (int i = 0; i < outputPositionCount; i++) {\n-            if (outputPositions[i] < nextPosition) {\n-                continue;\n+        // If the expected materialized size of the output block is smaller than a certain ratio of the dictionary size, we will materialize the values\n+        int dictionarySizeInBytes = dictionaryOffsetVector[currentDictionarySize - 1];\n+        if (blockSizeInBytes * BATCHES_PER_ROWGROUP < dictionarySizeInBytes / MATERIALIZATION_RATIO) {\n+            byte[] sliceData = new byte[toIntExact(blockSizeInBytes)];\n+            int[] offsetVector = new int[positionCount + 1];\n+            int currentOffset = 0;\n+            for (int k = 0; k < positionCount; k++) {\n+                int id = values[k];\n+                int offset = dictionaryOffsetVector[id];\n+                int length = dictionaryOffsetVector[id + 1] - offset;\n+                System.arraycopy(dictionaryData, offset, sliceData, currentOffset, length);\n+\n+                currentOffset += length;\n+                offsetVector[k + 1] = currentOffset;\n             }\n-            assert outputPositions[i] == nextPosition;\n-            valuesCopy[positionIndex] = this.values[i];\n-            positionIndex++;\n-            if (positionIndex >= positionCount) {\n-                break;\n+\n+            if (nullsCount > 0) {\n+                boolean[] isNullVector = new boolean[positionCount];\n+                for (int k = 0; k < positionCount; k++) {\n+                    if (values[k] == currentDictionarySize - 1) {\n+                        isNullVector[k] = true;\n+                    }\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI4MjExMA=="}, "originalCommit": {"oid": "90ef6a5070ed69288fdd5135a6e4b1dd7dcf89a2"}, "originalPosition": 199}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODg2NjIyOnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDictionarySelectiveReader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODo0ODozNVrOHPVN0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwOToxOTo1NlrOHPqzIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgzODI5MA==", "bodyText": "Should probably be a checkState and not an assert", "url": "https://github.com/prestodb/presto/pull/15130#discussion_r485838290", "createdAt": "2020-09-09T18:48:35Z", "author": {"login": "sachdevs"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDictionarySelectiveReader.java", "diffHunk": "@@ -286,12 +294,21 @@ private int readWithFilter(int[] positions, int positionCount)\n     private byte evaluateFilter(int position, int index, int length)\n     {\n         if (filter.testLength(length)) {\n-            int currentLength = dictionary.getSliceLength(index);\n-            Slice data = dictionary.getSlice(index, 0, currentLength);\n+            int currentLength = currentDictionaryOffsetVector[index + 1] - currentDictionaryOffsetVector[index];\n+\n+            boolean pass;\n             if (isCharType && length != currentLength) {\n-                data = Chars.padSpaces(data, maxCodePointCount);\n+                assert currentLength <= length;\n+                assert valueWithPadding != null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aebb0e5020f0d1cd24b748bfe8f875dbe435b88"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE5MTkwNw==", "bodyText": "This is in performance critical loops. Asserts doesn't execute in production. I would rather remove the asserts than changing it to checkState.", "url": "https://github.com/prestodb/presto/pull/15130#discussion_r486191907", "createdAt": "2020-09-10T09:19:56Z", "author": {"login": "yingsu00"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDictionarySelectiveReader.java", "diffHunk": "@@ -286,12 +294,21 @@ private int readWithFilter(int[] positions, int positionCount)\n     private byte evaluateFilter(int position, int index, int length)\n     {\n         if (filter.testLength(length)) {\n-            int currentLength = dictionary.getSliceLength(index);\n-            Slice data = dictionary.getSlice(index, 0, currentLength);\n+            int currentLength = currentDictionaryOffsetVector[index + 1] - currentDictionaryOffsetVector[index];\n+\n+            boolean pass;\n             if (isCharType && length != currentLength) {\n-                data = Chars.padSpaces(data, maxCodePointCount);\n+                assert currentLength <= length;\n+                assert valueWithPadding != null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgzODI5MA=="}, "originalCommit": {"oid": "7aebb0e5020f0d1cd24b748bfe8f875dbe435b88"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODg5NDY3OnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDictionarySelectiveReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODo1Njo1NFrOHPVfbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODo1Njo1NFrOHPVfbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0Mjc5OA==", "bodyText": "nit: if (dictionaryWrapped) return;, bring the rest out of the if block.", "url": "https://github.com/prestodb/presto/pull/15130#discussion_r485842798", "createdAt": "2020-09-09T18:56:54Z", "author": {"login": "sachdevs"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDictionarySelectiveReader.java", "diffHunk": "@@ -409,9 +429,26 @@ public BlockLease getBlockView(int[] positions, int positionCount)\n         if (positionCount < outputPositionCount) {\n             compactValues(positions, positionCount);\n         }\n+        wrapDictionaryIfNecessary();\n         return newLease(new DictionaryBlock(positionCount, dictionary, values));\n     }\n \n+    private void wrapDictionaryIfNecessary()\n+    {\n+        if (!dictionaryWrapped) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aebb0e5020f0d1cd24b748bfe8f875dbe435b88"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODkyMzc2OnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDictionarySelectiveReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxOTowNTo0MFrOHPVxiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxOTowNTo0MFrOHPVxiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0NzQzNQ==", "bodyText": "This logic needs some refactoring in order to be easier to read. We are making 3 different tests here:\n\nfilter.testLength(length)\nfilter.testBytes(valueWithPadding, 0, length); in the case of charType\nfilter.testBytes(currentDictionaryData, currentDictionaryOffsetVector[index], length); in case of non-charType\n\nIf any of these filters fail, we return FILTER_FAILED and in case of pass we return FILTER_PASSED. Using this information we can flatten this logic as follows:\nif (!filter.testLength(length))\n    return FILTER_FAILED;\nif (isCharType && length != currentLength) {\n    //...\n    if (!filter.testBytes(valueWithPadding, 0, length))\n        return FILTER_FAILED;\n} else if (!filter.testBytes(currentDictionaryData, currentDictionaryOffsetVector[index], length)) {\n    return FILTER_FAILED;\n}\n\n// the stuff you do once if(pass) {...}.\n\n\nNow we don't need the pass state variable and branches are clearer.", "url": "https://github.com/prestodb/presto/pull/15130#discussion_r485847435", "createdAt": "2020-09-09T19:05:40Z", "author": {"login": "sachdevs"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDictionarySelectiveReader.java", "diffHunk": "@@ -286,12 +294,21 @@ private int readWithFilter(int[] positions, int positionCount)\n     private byte evaluateFilter(int position, int index, int length)\n     {\n         if (filter.testLength(length)) {\n-            int currentLength = dictionary.getSliceLength(index);\n-            Slice data = dictionary.getSlice(index, 0, currentLength);\n+            int currentLength = currentDictionaryOffsetVector[index + 1] - currentDictionaryOffsetVector[index];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aebb0e5020f0d1cd24b748bfe8f875dbe435b88"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODkzMDU3OnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDictionarySelectiveReader.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxOTowNzozN1rOHPV12w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNzoyMjoyNlrOHRfRNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0ODUzOQ==", "bodyText": "Not a huge fan of this dictionaryWrapped state variable. Makes this hard to read and we now need to account manually when we create the dictionary and it is not wrapped. This makes it prone to future bugs if devs don't know when this var is required to be updated. We already have a flag for stripeDictionaryOpen and this adds extra states. Let's put this beside the currentDictionarySize variable and add a comment for when to update this variable?", "url": "https://github.com/prestodb/presto/pull/15130#discussion_r485848539", "createdAt": "2020-09-09T19:07:37Z", "author": {"login": "sachdevs"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDictionarySelectiveReader.java", "diffHunk": "@@ -89,14 +90,19 @@\n \n     private byte[] stripeDictionaryData = EMPTY_DICTIONARY_DATA;\n     private int[] stripeDictionaryOffsetVector = EMPTY_DICTIONARY_OFFSETS;\n+    private byte[] rowGroupDictionaryData = EMPTY_DICTIONARY_DATA;\n+    private int[] rowGroupDictionaryOffsetVector = EMPTY_DICTIONARY_OFFSETS;\n     private byte[] currentDictionaryData = EMPTY_DICTIONARY_DATA;\n+    private int[] currentDictionaryOffsetVector;\n     private int[] stripeDictionaryLength = new int[0];\n     private int[] rowGroupDictionaryLength = new int[0];\n     private byte[] evaluationStatus;\n+    private byte[] valueWithPadding;\n \n     private int readOffset;\n \n     private VariableWidthBlock dictionary = new VariableWidthBlock(1, wrappedBuffer(EMPTY_DICTIONARY_DATA), EMPTY_DICTIONARY_OFFSETS, Optional.of(new boolean[] {true}));\n+    private boolean dictionaryWrapped;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aebb0e5020f0d1cd24b748bfe8f875dbe435b88"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcxNjA0NA==", "bodyText": "@sachdevs I added the following comments:\n private boolean stripeDictionaryOpen;\n    // The dictionaries will be wrapped in getBlock(). It's set to false when opening a new dictionary (be it stripe dictionary or rowgroup dictionary). When there is only stripe\n    // dictionary but no rowgroup dictionaries, we shall set it to false only when opening the stripe dictionary while not for every rowgroup. It is set to true when the dictionary\n    // is wrapped up in wrapDictionaryIfNecessary().\n    private boolean dictionaryWrapped;\n\n\nMakes this hard to read and we now need to account manually when we create the dictionary and it is not wrapped.\n\nCorrection: It's not \" when we create the dictionary\". The dictionary was not created but just read from the input streams in openRowGroup().\nThis variable is required because we don't want to do memory allocation for every rowgroup unless absolutely required(ie. if no rows are selected for the current block then no need to create the dictionary). Furthermore, it needs to be set false explicitly because we don't want to allocate memory for each row group when there is no rowgroup dictionary but only stripe dictionary. A stripe contains multiple rowgroups, and a rowgroup can produce multiple blocks. Dictionaries are only read once from the input streams, but we don't want to copy the read data into a real dictionary for every block/rowgroup. There has to be a state telling us if the DictionaryBlock has been constructed or not for the current output block. The idea is like a state flag: when a new dictionary data is read, set to false; At the first time of DictionaryBlock creation, set it to true. Do you have better idea to not use the state variable without refactoring the whole class too much?", "url": "https://github.com/prestodb/presto/pull/15130#discussion_r486716044", "createdAt": "2020-09-11T01:10:57Z", "author": {"login": "yingsu00"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDictionarySelectiveReader.java", "diffHunk": "@@ -89,14 +90,19 @@\n \n     private byte[] stripeDictionaryData = EMPTY_DICTIONARY_DATA;\n     private int[] stripeDictionaryOffsetVector = EMPTY_DICTIONARY_OFFSETS;\n+    private byte[] rowGroupDictionaryData = EMPTY_DICTIONARY_DATA;\n+    private int[] rowGroupDictionaryOffsetVector = EMPTY_DICTIONARY_OFFSETS;\n     private byte[] currentDictionaryData = EMPTY_DICTIONARY_DATA;\n+    private int[] currentDictionaryOffsetVector;\n     private int[] stripeDictionaryLength = new int[0];\n     private int[] rowGroupDictionaryLength = new int[0];\n     private byte[] evaluationStatus;\n+    private byte[] valueWithPadding;\n \n     private int readOffset;\n \n     private VariableWidthBlock dictionary = new VariableWidthBlock(1, wrappedBuffer(EMPTY_DICTIONARY_DATA), EMPTY_DICTIONARY_OFFSETS, Optional.of(new boolean[] {true}));\n+    private boolean dictionaryWrapped;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0ODUzOQ=="}, "originalCommit": {"oid": "7aebb0e5020f0d1cd24b748bfe8f875dbe435b88"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEwMDE0OA==", "bodyText": "Thanks for the detailed explanation.\n\nThis variable is required because we don't want to do memory allocation for every rowgroup unless absolutely required\n\nYeah I agree that it is necessary. Without refactoring it's hard to get rid of this (I would refactor this into two separate classes probably, no other way to get rid of the var) - which is why I think adding a comment is sufficient for now.", "url": "https://github.com/prestodb/presto/pull/15130#discussion_r488100148", "createdAt": "2020-09-14T17:22:26Z", "author": {"login": "sachdevs"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/reader/SliceDictionarySelectiveReader.java", "diffHunk": "@@ -89,14 +90,19 @@\n \n     private byte[] stripeDictionaryData = EMPTY_DICTIONARY_DATA;\n     private int[] stripeDictionaryOffsetVector = EMPTY_DICTIONARY_OFFSETS;\n+    private byte[] rowGroupDictionaryData = EMPTY_DICTIONARY_DATA;\n+    private int[] rowGroupDictionaryOffsetVector = EMPTY_DICTIONARY_OFFSETS;\n     private byte[] currentDictionaryData = EMPTY_DICTIONARY_DATA;\n+    private int[] currentDictionaryOffsetVector;\n     private int[] stripeDictionaryLength = new int[0];\n     private int[] rowGroupDictionaryLength = new int[0];\n     private byte[] evaluationStatus;\n+    private byte[] valueWithPadding;\n \n     private int readOffset;\n \n     private VariableWidthBlock dictionary = new VariableWidthBlock(1, wrappedBuffer(EMPTY_DICTIONARY_DATA), EMPTY_DICTIONARY_OFFSETS, Optional.of(new boolean[] {true}));\n+    private boolean dictionaryWrapped;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0ODUzOQ=="}, "originalCommit": {"oid": "7aebb0e5020f0d1cd24b748bfe8f875dbe435b88"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3629, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}