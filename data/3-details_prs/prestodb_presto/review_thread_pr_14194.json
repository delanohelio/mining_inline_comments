{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyNzA3MjYz", "number": 14194, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMTo0NDozNFrODk4n2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNzo0NjozMVrODnLtOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDAzMDMyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMTo0NDozNFrOFxdTYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMTo0NDozNFrOFxdTYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQwNDY0Mw==", "bodyText": "get -> is?", "url": "https://github.com/prestodb/presto/pull/14194#discussion_r387404643", "createdAt": "2020-03-04T01:44:34Z", "author": {"login": "mbasmanova"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java", "diffHunk": "@@ -258,6 +259,19 @@ public int getMaxQueryRunningTaskCount()\n         return maxQueryRunningTaskCount;\n     }\n \n+    @Config(\"enqueue-query-when-task-limit-exceeded\")\n+    @ConfigDescription(\"Keep queries in queue if max-total-running-task-count is violated\")\n+    public QueryManagerConfig setEnqueueQueryWhenTaskLimitExceeded(boolean enqueueQueryWhenTaskLimitExceeded)\n+    {\n+        this.enqueueQueryWhenTaskLimitExceeded = enqueueQueryWhenTaskLimitExceeded;\n+        return this;\n+    }\n+\n+    public boolean getEnqueueQueryWhenTaskLimitExceeded()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f32bdd9e1373a882011241863ac4c0ac65ead1b4"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDI1NTY2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryTracker.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNDowODo1NlrOFxfbPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxODo0OTo1N1rOFx5Vaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzOTQyMQ==", "bodyText": "This is going to be really tough to fix once we move to a world where resource manager is out of process.  I would prefer that we think of a way of accomplishing this without having to set an atomic boolean on the resource group manager itself.", "url": "https://github.com/prestodb/presto/pull/14194#discussion_r387439421", "createdAt": "2020-03-04T04:08:56Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryTracker.java", "diffHunk": "@@ -68,20 +70,26 @@\n \n     private final Duration clientTimeout;\n \n+    private final ResourceGroupManager<?> resourceGroupManager;\n     private final ScheduledExecutorService queryManagementExecutor;\n \n     @GuardedBy(\"this\")\n     private ScheduledFuture<?> backgroundTask;\n \n-    public QueryTracker(QueryManagerConfig queryManagerConfig, ScheduledExecutorService queryManagementExecutor)\n+    public QueryTracker(\n+            QueryManagerConfig queryManagerConfig,\n+            ResourceGroupManager resourceGroupManager,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44f73eae4ecaafbde5632a8bfe36ad57668cc540"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgwNTg2NA==", "bodyText": "@tdcmeehan Eventually, we should use CPU/Memory/IO as resource budget inside each resource group (currently it is simply query count?).  Before that happens, task count is a proxy to fix deficiency in resource group manager. A global task count limit prevents scheduling a burst of new queries when cluster load is high, similar to total query count limit but more powerful.    The added boolean value taskLimitExceeded is light weighted and could be easily deprecated whenever there is better solution.", "url": "https://github.com/prestodb/presto/pull/14194#discussion_r387805864", "createdAt": "2020-03-04T17:03:58Z", "author": {"login": "viczhang861"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryTracker.java", "diffHunk": "@@ -68,20 +70,26 @@\n \n     private final Duration clientTimeout;\n \n+    private final ResourceGroupManager<?> resourceGroupManager;\n     private final ScheduledExecutorService queryManagementExecutor;\n \n     @GuardedBy(\"this\")\n     private ScheduledFuture<?> backgroundTask;\n \n-    public QueryTracker(QueryManagerConfig queryManagerConfig, ScheduledExecutorService queryManagementExecutor)\n+    public QueryTracker(\n+            QueryManagerConfig queryManagerConfig,\n+            ResourceGroupManager resourceGroupManager,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzOTQyMQ=="}, "originalCommit": {"oid": "44f73eae4ecaafbde5632a8bfe36ad57668cc540"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgyMjE2Nw==", "bodyText": "I understand that the flag is lightweight, and it makes sense that we should keep it as a flag to avoid having to deprecate the field once we move to smarter resource placement.  That being said, there doesn't seem to be a good reason to introduce this dependency in QueryTracker.  Resource groups already keep track of all running queries and have the full information of the running task count, we just need to access it.  Why make the decision on whether or not to globally prevent dispatching in QueryTracker when we can keep it local to resource groups?", "url": "https://github.com/prestodb/presto/pull/14194#discussion_r387822167", "createdAt": "2020-03-04T17:32:35Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryTracker.java", "diffHunk": "@@ -68,20 +70,26 @@\n \n     private final Duration clientTimeout;\n \n+    private final ResourceGroupManager<?> resourceGroupManager;\n     private final ScheduledExecutorService queryManagementExecutor;\n \n     @GuardedBy(\"this\")\n     private ScheduledFuture<?> backgroundTask;\n \n-    public QueryTracker(QueryManagerConfig queryManagerConfig, ScheduledExecutorService queryManagementExecutor)\n+    public QueryTracker(\n+            QueryManagerConfig queryManagerConfig,\n+            ResourceGroupManager resourceGroupManager,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzOTQyMQ=="}, "originalCommit": {"oid": "44f73eae4ecaafbde5632a8bfe36ad57668cc540"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg2MzkxNQ==", "bodyText": "I got your point.\n\nTraversing resource group tree while taking lock to calculate total number of tasks is more expensive than doing the same thing inside QueryTracker. It is duplicated calculation since QueryTracker already has that information.\nThe dependency is already there between SqlQueryManager and ResourceGroupManager,  what you suggested is to migrate some functionalities of SqlQueryManager to ResourceGroupManager, which is nice.  Given this is how currently it is designed, I still think QueryTracker is the best fit and clean implementation.", "url": "https://github.com/prestodb/presto/pull/14194#discussion_r387863915", "createdAt": "2020-03-04T18:49:57Z", "author": {"login": "viczhang861"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryTracker.java", "diffHunk": "@@ -68,20 +70,26 @@\n \n     private final Duration clientTimeout;\n \n+    private final ResourceGroupManager<?> resourceGroupManager;\n     private final ScheduledExecutorService queryManagementExecutor;\n \n     @GuardedBy(\"this\")\n     private ScheduledFuture<?> backgroundTask;\n \n-    public QueryTracker(QueryManagerConfig queryManagerConfig, ScheduledExecutorService queryManagementExecutor)\n+    public QueryTracker(\n+            QueryManagerConfig queryManagerConfig,\n+            ResourceGroupManager resourceGroupManager,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzOTQyMQ=="}, "originalCommit": {"oid": "44f73eae4ecaafbde5632a8bfe36ad57668cc540"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDI2NTg1OnYy", "diffSide": "LEFT", "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNDoxNjo0OVrOFxfhhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNjo0NjozM1rOFx1IoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0MTAzMQ==", "bodyText": "This very PR is changing the semantics of this field.  Isn't it premature to rename this?", "url": "https://github.com/prestodb/presto/pull/14194#discussion_r387441031", "createdAt": "2020-03-04T04:16:49Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java", "diffHunk": "@@ -258,8 +258,8 @@ public int getMaxQueryRunningTaskCount()\n         return maxQueryRunningTaskCount;\n     }\n \n-    @Config(\"experimental.max-query-running-task-count\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a1c7b6866abd120b9b2e37d0feace184cc7d3bc"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0NDA3NQ==", "bodyText": "Backing Tim's point - should we use the @LegacyConfig() flag for this for a while?", "url": "https://github.com/prestodb/presto/pull/14194#discussion_r387444075", "createdAt": "2020-03-04T04:32:31Z", "author": {"login": "mayankgarg1990"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java", "diffHunk": "@@ -258,8 +258,8 @@ public int getMaxQueryRunningTaskCount()\n         return maxQueryRunningTaskCount;\n     }\n \n-    @Config(\"experimental.max-query-running-task-count\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0MTAzMQ=="}, "originalCommit": {"oid": "3a1c7b6866abd120b9b2e37d0feace184cc7d3bc"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc5NTEwNQ==", "bodyText": "@mayankgarg1990  @tdcmeehan   I changed the new config introduced in this PR to experimental.max-total-running-task-count-to-halt-scheduling and added @LegacyConfig() for old ones, which were introduced in v0.225 and would continue to exist.", "url": "https://github.com/prestodb/presto/pull/14194#discussion_r387795105", "createdAt": "2020-03-04T16:46:33Z", "author": {"login": "viczhang861"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java", "diffHunk": "@@ -258,8 +258,8 @@ public int getMaxQueryRunningTaskCount()\n         return maxQueryRunningTaskCount;\n     }\n \n-    @Config(\"experimental.max-query-running-task-count\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0MTAzMQ=="}, "originalCommit": {"oid": "3a1c7b6866abd120b9b2e37d0feace184cc7d3bc"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDI4NzE5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNDozNDozMVrOFxfu9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNDozNDozMVrOFxfu9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0NDQ3MQ==", "bodyText": "should we rename this to haltQuerySchedulingWhenTaskLimitExceeded -> we are not really queuing the queries, we are just not picking the queries from the existing queue.", "url": "https://github.com/prestodb/presto/pull/14194#discussion_r387444471", "createdAt": "2020-03-04T04:34:31Z", "author": {"login": "mayankgarg1990"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java", "diffHunk": "@@ -51,6 +51,7 @@\n     private int stageCountWarningThreshold = 50;\n     private int maxTotalRunningTaskCount = Integer.MAX_VALUE;\n     private int maxQueryRunningTaskCount = Integer.MAX_VALUE;\n+    private boolean enqueueQueryWhenTaskLimitExceeded;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44f73eae4ecaafbde5632a8bfe36ad57668cc540"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDMwNzg2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryTracker.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNDo1MToxN1rOFxf71w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNjo0Nzo1MFrOFx1Lvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0Nzc2Nw==", "bodyText": "Should this logic be simplified? Can we just say something like:\nif (enqueueQueryWhenTaskLimitExceeded) {\n    resourceGroupManager.setTaskLimitExceeded(totalRunningTaskCount <= maxTotalRunningTaskCount);\n}", "url": "https://github.com/prestodb/presto/pull/14194#discussion_r387447767", "createdAt": "2020-03-04T04:51:17Z", "author": {"login": "mayankgarg1990"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryTracker.java", "diffHunk": "@@ -235,12 +245,19 @@ private void enforceTaskLimits()\n             }\n             int runningTaskCount = query.getRunningTaskCount();\n             totalRunningTaskCount += runningTaskCount;\n+            if (enqueueQueryWhenTaskLimitExceeded && totalRunningTaskCount > maxTotalRunningTaskCount) {\n+                resourceGroupManager.setTaskLimitExceeded(true);\n+            }\n             if (runningTaskCount > highestRunningTaskCount) {\n                 highestRunningTaskCount = runningTaskCount;\n                 highestRunningTaskQuery = Optional.of(query);\n             }\n         }\n \n+        if (enqueueQueryWhenTaskLimitExceeded && totalRunningTaskCount <= maxTotalRunningTaskCount) {\n+            resourceGroupManager.setTaskLimitExceeded(false);\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44f73eae4ecaafbde5632a8bfe36ad57668cc540"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc5NTkwMw==", "bodyText": "Thanks,  good point,  early decision is not needed here, this for loop is fast enough.", "url": "https://github.com/prestodb/presto/pull/14194#discussion_r387795903", "createdAt": "2020-03-04T16:47:50Z", "author": {"login": "viczhang861"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryTracker.java", "diffHunk": "@@ -235,12 +245,19 @@ private void enforceTaskLimits()\n             }\n             int runningTaskCount = query.getRunningTaskCount();\n             totalRunningTaskCount += runningTaskCount;\n+            if (enqueueQueryWhenTaskLimitExceeded && totalRunningTaskCount > maxTotalRunningTaskCount) {\n+                resourceGroupManager.setTaskLimitExceeded(true);\n+            }\n             if (runningTaskCount > highestRunningTaskCount) {\n                 highestRunningTaskCount = runningTaskCount;\n                 highestRunningTaskQuery = Optional.of(query);\n             }\n         }\n \n+        if (enqueueQueryWhenTaskLimitExceeded && totalRunningTaskCount <= maxTotalRunningTaskCount) {\n+            resourceGroupManager.setTaskLimitExceeded(false);\n+        }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0Nzc2Nw=="}, "originalCommit": {"oid": "44f73eae4ecaafbde5632a8bfe36ad57668cc540"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDMwODIxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryTracker.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNDo1MTozM1rOFxf8DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNDo1MTozM1rOFxf8DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0NzgyMQ==", "bodyText": "I am curious, why have this in the middle of the loop ?", "url": "https://github.com/prestodb/presto/pull/14194#discussion_r387447821", "createdAt": "2020-03-04T04:51:33Z", "author": {"login": "mayankgarg1990"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryTracker.java", "diffHunk": "@@ -235,12 +245,19 @@ private void enforceTaskLimits()\n             }\n             int runningTaskCount = query.getRunningTaskCount();\n             totalRunningTaskCount += runningTaskCount;\n+            if (enqueueQueryWhenTaskLimitExceeded && totalRunningTaskCount > maxTotalRunningTaskCount) {\n+                resourceGroupManager.setTaskLimitExceeded(true);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44f73eae4ecaafbde5632a8bfe36ad57668cc540"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDM2NjM0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/resourceGroups/InternalResourceGroup.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNTozNDo1OFrOFxgfzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNTozNDo1OFrOFxgfzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ1Njk3NA==", "bodyText": "I don't think this is the correct semantic. If isResourceLimitExceeded is expected to be a root level property, then we should just prevent running internalStartNext from RootInternalResourceGroup.processQueuedQueries. As of now I feel there is too much plumbing done through the resource groups which can be completely avoided.", "url": "https://github.com/prestodb/presto/pull/14194#discussion_r387456974", "createdAt": "2020-03-04T05:34:58Z", "author": {"login": "mayankgarg1990"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/resourceGroups/InternalResourceGroup.java", "diffHunk": "@@ -862,6 +863,10 @@ private boolean canRunMore()\n                 return false;\n             }\n \n+            if (((RootInternalResourceGroup) root).isResourceLimitExceeded()) {\n+                return false;\n+            }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44f73eae4ecaafbde5632a8bfe36ad57668cc540"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDM2ODUxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/resourceGroups/InternalResourceGroup.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNTozNjoyOVrOFxghHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNTozNjoyOVrOFxghHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ1NzMxMQ==", "bodyText": "If we follow my suggestion above, we can avoid this call. I will say that the plumbing is not worth it and we should just implement it when we have a concrete use case.", "url": "https://github.com/prestodb/presto/pull/14194#discussion_r387457311", "createdAt": "2020-03-04T05:36:29Z", "author": {"login": "mayankgarg1990"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/resourceGroups/InternalResourceGroup.java", "diffHunk": "@@ -935,5 +942,16 @@ public synchronized void generateCpuQuota(long elapsedSeconds)\n                 internalGenerateCpuQuota(elapsedSeconds);\n             }\n         }\n+\n+        public void setTaskLimitExceeded(boolean exceeded)\n+        {\n+            this.taskLimitExceeded.set(exceeded);\n+        }\n+\n+        private boolean isResourceLimitExceeded()\n+        {\n+            // can be expanded to include other metrics\n+            return taskLimitExceeded.get();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44f73eae4ecaafbde5632a8bfe36ad57668cc540"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjY4OTc4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzo0MjoyNVrOFydb1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTowMzo1NVrOFygGrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ1NTM4MA==", "bodyText": "Maybe it makes sense to make this optional, so we don't need a magic number (MAX_VALUE).", "url": "https://github.com/prestodb/presto/pull/14194#discussion_r388455380", "createdAt": "2020-03-05T17:42:25Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java", "diffHunk": "@@ -51,6 +51,7 @@\n     private int stageCountWarningThreshold = 50;\n     private int maxTotalRunningTaskCount = Integer.MAX_VALUE;\n     private int maxQueryRunningTaskCount = Integer.MAX_VALUE;\n+    private int maxTotalRunningTaskCountToHaltScheduling = Integer.MAX_VALUE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1be727d48083657cae4513d33af4759455339de"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ1NjE1Ng==", "bodyText": "Alternatively, a negative number would never make sense here, so instead of MAX_VALUE we could simply check if it's non-negative.", "url": "https://github.com/prestodb/presto/pull/14194#discussion_r388456156", "createdAt": "2020-03-05T17:44:00Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java", "diffHunk": "@@ -51,6 +51,7 @@\n     private int stageCountWarningThreshold = 50;\n     private int maxTotalRunningTaskCount = Integer.MAX_VALUE;\n     private int maxQueryRunningTaskCount = Integer.MAX_VALUE;\n+    private int maxTotalRunningTaskCountToHaltScheduling = Integer.MAX_VALUE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ1NTM4MA=="}, "originalCommit": {"oid": "e1be727d48083657cae4513d33af4759455339de"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5OTExNw==", "bodyText": "We use MAX_VALUE for some other defaulted values, e.g. maxDriversPerTask :)", "url": "https://github.com/prestodb/presto/pull/14194#discussion_r388499117", "createdAt": "2020-03-05T19:03:55Z", "author": {"login": "viczhang861"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java", "diffHunk": "@@ -51,6 +51,7 @@\n     private int stageCountWarningThreshold = 50;\n     private int maxTotalRunningTaskCount = Integer.MAX_VALUE;\n     private int maxQueryRunningTaskCount = Integer.MAX_VALUE;\n+    private int maxTotalRunningTaskCountToHaltScheduling = Integer.MAX_VALUE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ1NTM4MA=="}, "originalCommit": {"oid": "e1be727d48083657cae4513d33af4759455339de"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjcyNDQxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/resourceGroups/InternalResourceGroupManager.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzo1MzoxN1rOFydxvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTowNDowOVrOFygHJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ2MDk4OA==", "bodyText": "This might conflict with what @mayankgarg1990 was suggesting, but for consistency with how we compute other stats I think we could move this into InternalResourceGroup", "url": "https://github.com/prestodb/presto/pull/14194#discussion_r388460988", "createdAt": "2020-03-05T17:53:17Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/resourceGroups/InternalResourceGroupManager.java", "diffHunk": "@@ -278,6 +295,46 @@ private static int getQueriesQueuedOnInternal(InternalResourceGroup resourceGrou\n         return queriesQueuedInternal;\n     }\n \n+    @Managed\n+    public int getTaskLimitExceeded()\n+    {\n+        return taskLimitExceeded.get() ? 1 : 0;\n+    }\n+\n+    private int calculateRunningTaskCount()\n+    {\n+        int taskCount = 0;\n+        for (RootInternalResourceGroup rootGroup : rootGroups) {\n+            synchronized (rootGroup) {\n+                taskCount += calculateRunningTaskCount(rootGroup);\n+            }\n+        }\n+        return taskCount;\n+    }\n+\n+    private int calculateRunningTaskCount(InternalResourceGroup resourceGroup)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1be727d48083657cae4513d33af4759455339de"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5NjkyOA==", "bodyText": "If we are moving num running tasks to be a stat like cpuUsageMillis then yes, lets move it in to the InternalResourceGroup class. If we want to have some kind of Supplier which indicates to pause scheduling to InternalResourceGroupManager then lets just operate at the root level. So I am fine either ways - just not with mixing them together", "url": "https://github.com/prestodb/presto/pull/14194#discussion_r388496928", "createdAt": "2020-03-05T18:59:49Z", "author": {"login": "mayankgarg1990"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/resourceGroups/InternalResourceGroupManager.java", "diffHunk": "@@ -278,6 +295,46 @@ private static int getQueriesQueuedOnInternal(InternalResourceGroup resourceGrou\n         return queriesQueuedInternal;\n     }\n \n+    @Managed\n+    public int getTaskLimitExceeded()\n+    {\n+        return taskLimitExceeded.get() ? 1 : 0;\n+    }\n+\n+    private int calculateRunningTaskCount()\n+    {\n+        int taskCount = 0;\n+        for (RootInternalResourceGroup rootGroup : rootGroups) {\n+            synchronized (rootGroup) {\n+                taskCount += calculateRunningTaskCount(rootGroup);\n+            }\n+        }\n+        return taskCount;\n+    }\n+\n+    private int calculateRunningTaskCount(InternalResourceGroup resourceGroup)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ2MDk4OA=="}, "originalCommit": {"oid": "e1be727d48083657cae4513d33af4759455339de"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5OTIzOA==", "bodyText": "Moved to InternalResourceGroup", "url": "https://github.com/prestodb/presto/pull/14194#discussion_r388499238", "createdAt": "2020-03-05T19:04:09Z", "author": {"login": "viczhang861"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/resourceGroups/InternalResourceGroupManager.java", "diffHunk": "@@ -278,6 +295,46 @@ private static int getQueriesQueuedOnInternal(InternalResourceGroup resourceGrou\n         return queriesQueuedInternal;\n     }\n \n+    @Managed\n+    public int getTaskLimitExceeded()\n+    {\n+        return taskLimitExceeded.get() ? 1 : 0;\n+    }\n+\n+    private int calculateRunningTaskCount()\n+    {\n+        int taskCount = 0;\n+        for (RootInternalResourceGroup rootGroup : rootGroups) {\n+            synchronized (rootGroup) {\n+                taskCount += calculateRunningTaskCount(rootGroup);\n+            }\n+        }\n+        return taskCount;\n+    }\n+\n+    private int calculateRunningTaskCount(InternalResourceGroup resourceGroup)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ2MDk4OA=="}, "originalCommit": {"oid": "e1be727d48083657cae4513d33af4759455339de"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjczMzY0OnYy", "diffSide": "RIGHT", "path": "presto-tests/src/test/java/com/facebook/presto/tests/TestQueryTaskLimit.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzo1NjowN1rOFyd3rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTowNToyMFrOFygJxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ2MjUxMQ==", "bodyText": "Unrelated change?", "url": "https://github.com/prestodb/presto/pull/14194#discussion_r388462511", "createdAt": "2020-03-05T17:56:07Z", "author": {"login": "tdcmeehan"}, "path": "presto-tests/src/test/java/com/facebook/presto/tests/TestQueryTaskLimit.java", "diffHunk": "@@ -26,42 +28,55 @@\n import java.util.concurrent.ExecutorService;\n import java.util.concurrent.Future;\n \n+import static com.facebook.presto.execution.QueryState.FAILED;\n+import static com.facebook.presto.execution.QueryState.QUEUED;\n+import static com.facebook.presto.execution.QueryState.RUNNING;\n+import static com.facebook.presto.execution.TestQueryRunnerUtil.cancelQuery;\n+import static com.facebook.presto.execution.TestQueryRunnerUtil.createQuery;\n+import static com.facebook.presto.execution.TestQueryRunnerUtil.waitForQueryState;\n+import static com.facebook.presto.execution.TestQueues.LONG_LASTING_QUERY;\n+import static com.facebook.presto.execution.TestQueues.newSession;\n import static com.facebook.presto.spi.StandardErrorCode.QUERY_HAS_TOO_MANY_STAGES;\n import static com.facebook.presto.testing.TestingSession.testSessionBuilder;\n import static java.util.concurrent.Executors.newCachedThreadPool;\n import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n import static org.testng.Assert.assertEquals;\n import static org.testng.Assert.assertNotNull;\n+import static org.testng.Assert.assertTrue;\n \n+@Test(singleThreaded = true)\n public class TestQueryTaskLimit\n {\n     private ExecutorService executor;\n+    private Session defaultSession;\n \n     @BeforeClass\n     public void setUp()\n     {\n         executor = newCachedThreadPool();\n+        defaultSession = testSessionBuilder()\n+                .setCatalog(\"tpch\")\n+                .setSchema(\"sf1000\")\n+                .build();\n     }\n \n     @AfterClass(alwaysRun = true)\n     public void shutdown()\n+            throws Exception\n     {\n         executor.shutdownNow();\n+        assertTrue(executor.awaitTermination(10, SECONDS));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1be727d48083657cae4513d33af4759455339de"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5OTkxMA==", "bodyText": "Not directly related to queueing test,  I created a separate PR to avoid confusion", "url": "https://github.com/prestodb/presto/pull/14194#discussion_r388499910", "createdAt": "2020-03-05T19:05:20Z", "author": {"login": "viczhang861"}, "path": "presto-tests/src/test/java/com/facebook/presto/tests/TestQueryTaskLimit.java", "diffHunk": "@@ -26,42 +28,55 @@\n import java.util.concurrent.ExecutorService;\n import java.util.concurrent.Future;\n \n+import static com.facebook.presto.execution.QueryState.FAILED;\n+import static com.facebook.presto.execution.QueryState.QUEUED;\n+import static com.facebook.presto.execution.QueryState.RUNNING;\n+import static com.facebook.presto.execution.TestQueryRunnerUtil.cancelQuery;\n+import static com.facebook.presto.execution.TestQueryRunnerUtil.createQuery;\n+import static com.facebook.presto.execution.TestQueryRunnerUtil.waitForQueryState;\n+import static com.facebook.presto.execution.TestQueues.LONG_LASTING_QUERY;\n+import static com.facebook.presto.execution.TestQueues.newSession;\n import static com.facebook.presto.spi.StandardErrorCode.QUERY_HAS_TOO_MANY_STAGES;\n import static com.facebook.presto.testing.TestingSession.testSessionBuilder;\n import static java.util.concurrent.Executors.newCachedThreadPool;\n import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n import static org.testng.Assert.assertEquals;\n import static org.testng.Assert.assertNotNull;\n+import static org.testng.Assert.assertTrue;\n \n+@Test(singleThreaded = true)\n public class TestQueryTaskLimit\n {\n     private ExecutorService executor;\n+    private Session defaultSession;\n \n     @BeforeClass\n     public void setUp()\n     {\n         executor = newCachedThreadPool();\n+        defaultSession = testSessionBuilder()\n+                .setCatalog(\"tpch\")\n+                .setSchema(\"sf1000\")\n+                .build();\n     }\n \n     @AfterClass(alwaysRun = true)\n     public void shutdown()\n+            throws Exception\n     {\n         executor.shutdownNow();\n+        assertTrue(executor.awaitTermination(10, SECONDS));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ2MjUxMQ=="}, "originalCommit": {"oid": "e1be727d48083657cae4513d33af4759455339de"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTkxMjUyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNzoyNToxMVrOF0ZR0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNzoyNToxMVrOF0ZR0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ4NDQzNQ==", "bodyText": "Isn't the idea of \"experimental\" configs is that they can change without notice and therefore don't require @LegacyConfig-style transition?", "url": "https://github.com/prestodb/presto/pull/14194#discussion_r390484435", "createdAt": "2020-03-10T17:25:11Z", "author": {"login": "mbasmanova"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java", "diffHunk": "@@ -244,7 +244,8 @@ public int getMaxTotalRunningTaskCount()\n         return maxTotalRunningTaskCount;\n     }\n \n-    @Config(\"experimental.max-total-running-task-count\")\n+    @Config(\"max-total-running-task-count-to-kill-query\")\n+    @LegacyConfig(\"experimental.max-total-running-task-count\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d58987a1234098575b081b1fdab4a7601345aa76"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTkyMjI3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNzoyNzoyN1rOF0ZX7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNzoyNzoyN1rOF0ZX7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ4NTk5OA==", "bodyText": "nit: I suggest to not repeat the property name in the description: Keep queries in the queue if total task count exceeds this threshold", "url": "https://github.com/prestodb/presto/pull/14194#discussion_r390485998", "createdAt": "2020-03-10T17:27:27Z", "author": {"login": "mbasmanova"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java", "diffHunk": "@@ -259,6 +260,19 @@ public int getMaxQueryRunningTaskCount()\n         return maxQueryRunningTaskCount;\n     }\n \n+    @Config(\"experimental.max-total-running-task-count-to-halt-scheduling\")\n+    @ConfigDescription(\"Keep queries in the queue if total task count exceeds experimental.max-total-running-task-count-to-halt-scheduling\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "517eef2a7ab33c74afe9abdab17b66aa18f406a7"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTkzMDE0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/resourceGroups/InternalResourceGroup.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNzoyOToyM1rOF0ZdHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNzoyOToyM1rOF0ZdHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ4NzMyNA==", "bodyText": "nit: SqlQueryExecution.class::isInstance", "url": "https://github.com/prestodb/presto/pull/14194#discussion_r390487324", "createdAt": "2020-03-10T17:29:23Z", "author": {"login": "mbasmanova"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/resourceGroups/InternalResourceGroup.java", "diffHunk": "@@ -581,6 +583,23 @@ public InternalResourceGroup getOrCreateSubGroup(String name)\n         }\n     }\n \n+    public int getRunningTaskCount()\n+    {\n+        if (subGroups().isEmpty()) {\n+            return runningQueries.stream()\n+                    .filter(query -> query instanceof SqlQueryExecution)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09677ca34e36ee1056d14cf065aa77f0a2856f08"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTkzMjY2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/resourceGroups/InternalResourceGroup.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNzozMDowOVrOF0Ze4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNzozMDowOVrOF0Ze4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ4Nzc3Ng==", "bodyText": "nit: drop \"this.\"", "url": "https://github.com/prestodb/presto/pull/14194#discussion_r390487776", "createdAt": "2020-03-10T17:30:09Z", "author": {"login": "mbasmanova"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/resourceGroups/InternalResourceGroup.java", "diffHunk": "@@ -935,5 +960,15 @@ public synchronized void generateCpuQuota(long elapsedSeconds)\n                 internalGenerateCpuQuota(elapsedSeconds);\n             }\n         }\n+\n+        public void setTaskLimitExceeded(boolean exceeded)\n+        {\n+            this.taskLimitExceeded.set(exceeded);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09677ca34e36ee1056d14cf065aa77f0a2856f08"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDEyODU5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNzo0NjozMVrOF1CFtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMDo0NDo0MFrOF1IdAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE1MzA3Ng==", "bodyText": "nit: scheduling usually means task scheduling or stage scheduling in Presto. What about\nexperimental.max-total-running-task-count-for-new-query-execution", "url": "https://github.com/prestodb/presto/pull/14194#discussion_r391153076", "createdAt": "2020-03-11T17:46:31Z", "author": {"login": "wenleix"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java", "diffHunk": "@@ -258,6 +259,19 @@ public int getMaxQueryRunningTaskCount()\n         return maxQueryRunningTaskCount;\n     }\n \n+    @Config(\"experimental.max-total-running-task-count-to-halt-scheduling\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb3c98cd0b2d6249b49b54765fb381c5da5f599f"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI1NzM0NQ==", "bodyText": "experimental.max-total-running-task-count-for-new-query-execution\n\nChanged to experimental.max-total-running-task-count-to-not-execute-new-query", "url": "https://github.com/prestodb/presto/pull/14194#discussion_r391257345", "createdAt": "2020-03-11T20:44:40Z", "author": {"login": "viczhang861"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java", "diffHunk": "@@ -258,6 +259,19 @@ public int getMaxQueryRunningTaskCount()\n         return maxQueryRunningTaskCount;\n     }\n \n+    @Config(\"experimental.max-total-running-task-count-to-halt-scheduling\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE1MzA3Ng=="}, "originalCommit": {"oid": "cb3c98cd0b2d6249b49b54765fb381c5da5f599f"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3134, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}