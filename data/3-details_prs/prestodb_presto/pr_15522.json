{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQwMzQ4NTAw", "number": 15522, "title": "Initialize memory limits once", "bodyText": "Synchronizing on the QueryContext as part of every task update adds contention to the already heavily contended QueryContext instance lock (since each memory tracking update must synchronize as well). This change checks whether the memory limit initialization is necessary before synchronizing to avoid adding the extra contention after they\nhave been set at least once successfully.\n== NO RELEASE NOTE ==", "createdAt": "2020-12-15T15:48:57Z", "url": "https://github.com/prestodb/presto/pull/15522", "merged": true, "mergeCommit": {"oid": "abdbd68f56011b439f71e5657f56b721620b0ee0"}, "closed": true, "closedAt": "2020-12-23T20:05:38Z", "author": {"login": "pettyjamesm"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdmdrwiAFqTU1MjY5MTIyNA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdpEyfbAFqTU1ODIwNDE3NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyNjkxMjI0", "url": "https://github.com/prestodb/presto/pull/15522#pullrequestreview-552691224", "createdAt": "2020-12-15T17:21:24Z", "commit": {"oid": "54b228185dc305e51bf21f77633ce22c0e7e4408"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNzoyMToyNFrOIGW1EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNzoyMToyNFrOIGW1EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUzNjQwMA==", "bodyText": "It's unclear to me if it's intentional (or desirable) that a task update would previously cause these values to change once a query was promoted to the reserved pool. If so, it's easy enough to modify this PR to handle that as well- just need to know the intended behavior in that situation.", "url": "https://github.com/prestodb/presto/pull/15522#discussion_r543536400", "createdAt": "2020-12-15T17:21:24Z", "author": {"login": "pettyjamesm"}, "path": "presto-main/src/main/java/com/facebook/presto/memory/QueryContext.java", "diffHunk": "@@ -129,13 +131,20 @@ public QueryContext(\n                 newRootAggregatedMemoryContext(new QueryMemoryReservationHandler(this::updateSystemMemory, this::tryReserveMemoryNotSupported, this::updateBroadcastMemory, this::tryUpdateBroadcastMemory), 0L));\n     }\n \n+    public boolean needsMemoryLimitsInitialized()\n+    {\n+        return needsMemoryLimitsInitialized;\n+    }\n+\n     // TODO: This method should be removed, and the correct limit set in the constructor. However, due to the way QueryContext is constructed the memory limit is not known in advance\n     public synchronized void setResourceOvercommit()\n     {\n         // Allow the query to use the entire pool. This way the worker will kill the query, if it uses the entire local general pool.\n         // The coordinator will kill the query if the cluster runs out of memory.\n         maxUserMemory = memoryPool.getMaxBytes();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54b228185dc305e51bf21f77633ce22c0e7e4408"}, "originalPosition": 25}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "54b228185dc305e51bf21f77633ce22c0e7e4408", "author": {"user": {"login": "pettyjamesm", "name": "James Petty"}}, "url": "https://github.com/prestodb/presto/commit/54b228185dc305e51bf21f77633ce22c0e7e4408", "committedDate": "2020-12-15T15:47:35Z", "message": "Fix typo in ConcurrentHashMap creation"}, "afterCommit": {"oid": "2aa92bfd6bdd8fe46624d9519102b4158e8c14ad", "author": {"user": {"login": "pettyjamesm", "name": "James Petty"}}, "url": "https://github.com/prestodb/presto/commit/2aa92bfd6bdd8fe46624d9519102b4158e8c14ad", "committedDate": "2020-12-15T17:52:49Z", "message": "Fix typo in ConcurrentHashMap creation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyNzg0NzQz", "url": "https://github.com/prestodb/presto/pull/15522#pullrequestreview-552784743", "createdAt": "2020-12-15T19:11:50Z", "commit": {"oid": "2aa92bfd6bdd8fe46624d9519102b4158e8c14ad"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxOToxMTo1MFrOIGbqXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxOToxMTo1MFrOIGbqXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzYxNTU4Mg==", "bodyText": "Would this need to be volatile for needsMemoryLimitsInitialized to return an up to date value without synchronization with other threads?", "url": "https://github.com/prestodb/presto/pull/15522#discussion_r543615582", "createdAt": "2020-12-15T19:11:50Z", "author": {"login": "aweisberg"}, "path": "presto-main/src/main/java/com/facebook/presto/memory/QueryContext.java", "diffHunk": "@@ -72,7 +72,11 @@\n     private final ScheduledExecutorService yieldExecutor;\n     private final long maxSpill;\n     private final SpillSpaceTracker spillSpaceTracker;\n-    private final Map<TaskId, TaskContext> taskContexts = new ConcurrentHashMap();\n+    private final Map<TaskId, TaskContext> taskContexts = new ConcurrentHashMap<>();\n+\n+    @GuardedBy(\"this\")\n+    private boolean isResourceOverCommit;\n+    private boolean needsMemoryLimitsInitialized = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2aa92bfd6bdd8fe46624d9519102b4158e8c14ad"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyODMyODE5", "url": "https://github.com/prestodb/presto/pull/15522#pullrequestreview-552832819", "createdAt": "2020-12-15T20:15:28Z", "commit": {"oid": "2aa92bfd6bdd8fe46624d9519102b4158e8c14ad"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2aa92bfd6bdd8fe46624d9519102b4158e8c14ad", "author": {"user": {"login": "pettyjamesm", "name": "James Petty"}}, "url": "https://github.com/prestodb/presto/commit/2aa92bfd6bdd8fe46624d9519102b4158e8c14ad", "committedDate": "2020-12-15T17:52:49Z", "message": "Fix typo in ConcurrentHashMap creation"}, "afterCommit": {"oid": "acde0bb5c2c154538e3ec23f16909098fc234889", "author": {"user": {"login": "pettyjamesm", "name": "James Petty"}}, "url": "https://github.com/prestodb/presto/commit/acde0bb5c2c154538e3ec23f16909098fc234889", "committedDate": "2020-12-15T21:53:04Z", "message": "Fix typo in ConcurrentHashMap creation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzMTg0MTc2", "url": "https://github.com/prestodb/presto/pull/15522#pullrequestreview-553184176", "createdAt": "2020-12-16T00:36:58Z", "commit": {"oid": "ae92bdd1d0fd69983e2aadc0022e6b5094431914"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwMDozNjo1OFrOIGmT4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwMDozNjo1OFrOIGmT4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc5MDA1MA==", "bodyText": "isMemoryLimitsInitialized()", "url": "https://github.com/prestodb/presto/pull/15522#discussion_r543790050", "createdAt": "2020-12-16T00:36:58Z", "author": {"login": "viczhang861"}, "path": "presto-main/src/main/java/com/facebook/presto/memory/QueryContext.java", "diffHunk": "@@ -129,13 +133,21 @@ public QueryContext(\n                 newRootAggregatedMemoryContext(new QueryMemoryReservationHandler(this::updateSystemMemory, this::tryReserveMemoryNotSupported, this::updateBroadcastMemory, this::tryUpdateBroadcastMemory), 0L));\n     }\n \n+    public boolean needsMemoryLimitsInitialized()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae92bdd1d0fd69983e2aadc0022e6b5094431914"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzMTkxMzYw", "url": "https://github.com/prestodb/presto/pull/15522#pullrequestreview-553191360", "createdAt": "2020-12-16T00:41:46Z", "commit": {"oid": "ae92bdd1d0fd69983e2aadc0022e6b5094431914"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwMDo0MTo0NlrOIGma6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwMDo0MTo0NlrOIGma6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc5MTg1MA==", "bodyText": "if (!queryContext.isMemoryLimitsInitialized())", "url": "https://github.com/prestodb/presto/pull/15522#discussion_r543791850", "createdAt": "2020-12-16T00:41:46Z", "author": {"login": "viczhang861"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/SqlTaskManager.java", "diffHunk": "@@ -389,19 +389,21 @@ public TaskInfo updateTask(\n         requireNonNull(sources, \"sources is null\");\n         requireNonNull(outputBuffers, \"outputBuffers is null\");\n \n-        if (resourceOvercommit(session)) {\n-            // TODO: This should have been done when the QueryContext was created. However, the session isn't available at that point.\n-            queryContexts.getUnchecked(taskId.getQueryId()).setResourceOvercommit();\n-        }\n-        else {\n-            queryContexts.getUnchecked(\n-                    taskId.getQueryId()).setMemoryLimits(\n-                    getQueryMaxMemoryPerNode(session),\n-                    getQueryMaxTotalMemoryPerNode(session),\n-                    getQueryMaxBroadcastMemory(session));\n+        SqlTask sqlTask = tasks.getUnchecked(taskId);\n+        QueryContext queryContext = sqlTask.getQueryContext();\n+        if (queryContext.needsMemoryLimitsInitialized()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae92bdd1d0fd69983e2aadc0022e6b5094431914"}, "originalPosition": 16}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "acde0bb5c2c154538e3ec23f16909098fc234889", "author": {"user": {"login": "pettyjamesm", "name": "James Petty"}}, "url": "https://github.com/prestodb/presto/commit/acde0bb5c2c154538e3ec23f16909098fc234889", "committedDate": "2020-12-15T21:53:04Z", "message": "Fix typo in ConcurrentHashMap creation"}, "afterCommit": {"oid": "a8312b1792f6e583fb6054e0d7929cdc050f7605", "author": {"user": {"login": "pettyjamesm", "name": "James Petty"}}, "url": "https://github.com/prestodb/presto/commit/a8312b1792f6e583fb6054e0d7929cdc050f7605", "committedDate": "2020-12-16T14:31:42Z", "message": "Fix javadoc method reference"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c0aba81cbd558158706696c02f993f7c272e4af", "author": {"user": {"login": "pettyjamesm", "name": "James Petty"}}, "url": "https://github.com/prestodb/presto/commit/3c0aba81cbd558158706696c02f993f7c272e4af", "committedDate": "2020-12-16T14:40:04Z", "message": "Avoid repeatedly setting memory limits in QueryContext\n\nSynchronizing on the QueryContext as part of every task update adds\ncontention to the already heavily contended QueryContext instance\n(since each memory tracking update must synchronize as well). This\nchange checks whether the memory limit initialization is necessary\nbefore synchronizing to avoid adding the extra contention after they\nhave been set at least once successfully."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1e15200c802a1da3db7c406203b994a3e281358", "author": {"user": {"login": "pettyjamesm", "name": "James Petty"}}, "url": "https://github.com/prestodb/presto/commit/d1e15200c802a1da3db7c406203b994a3e281358", "committedDate": "2020-12-16T14:40:04Z", "message": "Fix typo in ConcurrentHashMap creation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "924740ad3d15588b777ca33e48838b703bfc1054", "author": {"user": {"login": "pettyjamesm", "name": "James Petty"}}, "url": "https://github.com/prestodb/presto/commit/924740ad3d15588b777ca33e48838b703bfc1054", "committedDate": "2020-12-16T14:40:26Z", "message": "Fix javadoc method reference"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a8312b1792f6e583fb6054e0d7929cdc050f7605", "author": {"user": {"login": "pettyjamesm", "name": "James Petty"}}, "url": "https://github.com/prestodb/presto/commit/a8312b1792f6e583fb6054e0d7929cdc050f7605", "committedDate": "2020-12-16T14:31:42Z", "message": "Fix javadoc method reference"}, "afterCommit": {"oid": "924740ad3d15588b777ca33e48838b703bfc1054", "author": {"user": {"login": "pettyjamesm", "name": "James Petty"}}, "url": "https://github.com/prestodb/presto/commit/924740ad3d15588b777ca33e48838b703bfc1054", "committedDate": "2020-12-16T14:40:26Z", "message": "Fix javadoc method reference"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4MjAzMzU3", "url": "https://github.com/prestodb/presto/pull/15522#pullrequestreview-558203357", "createdAt": "2020-12-23T20:00:47Z", "commit": {"oid": "924740ad3d15588b777ca33e48838b703bfc1054"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QyMDowMDo0N1rOIKy1wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QyMDowMDo0N1rOIKy1wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODE4OTYzNA==", "bodyText": "This statement looks quite weird.  if resource resourceOverCommit is true, then `setResourceOvercommit? -- looks unnecessary?\nMy understanding is we call setResourceOvercommit() to reset memory limits based on the pool assignment. If that's the case maybe elaborate a bit in the comment? e.g.\nWhile resourceOverCommit is already set to true, we still call setResourceOvercommit() to \nreset the memory limits based on the new pool assignment\n\n-- Just want to double check on this. I can edit the comment when merging it, since it's a very small change.", "url": "https://github.com/prestodb/presto/pull/15522#discussion_r548189634", "createdAt": "2020-12-23T20:00:47Z", "author": {"login": "wenleix"}, "path": "presto-main/src/main/java/com/facebook/presto/memory/QueryContext.java", "diffHunk": "@@ -278,6 +290,10 @@ public synchronized void setMemoryPool(MemoryPool newMemoryPool)\n         }\n         ListenableFuture<?> future = memoryPool.moveQuery(queryId, newMemoryPool);\n         memoryPool = newMemoryPool;\n+        if (resourceOverCommit) {\n+            // Reset the memory limits based on the new pool assignment\n+            setResourceOvercommit();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "924740ad3d15588b777ca33e48838b703bfc1054"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4MjA0MDE0", "url": "https://github.com/prestodb/presto/pull/15522#pullrequestreview-558204014", "createdAt": "2020-12-23T20:02:29Z", "commit": {"oid": "924740ad3d15588b777ca33e48838b703bfc1054"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QyMDowMjoyOVrOIKy62A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QyMDowMjoyOVrOIKy62A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODE5MDkzNg==", "bodyText": "curious: is this also Guarded this? -- or we are based on benign data race?", "url": "https://github.com/prestodb/presto/pull/15522#discussion_r548190936", "createdAt": "2020-12-23T20:02:29Z", "author": {"login": "wenleix"}, "path": "presto-main/src/main/java/com/facebook/presto/memory/QueryContext.java", "diffHunk": "@@ -72,7 +72,11 @@\n     private final ScheduledExecutorService yieldExecutor;\n     private final long maxSpill;\n     private final SpillSpaceTracker spillSpaceTracker;\n-    private final Map<TaskId, TaskContext> taskContexts = new ConcurrentHashMap();\n+    private final Map<TaskId, TaskContext> taskContexts = new ConcurrentHashMap<>();\n+\n+    @GuardedBy(\"this\")\n+    private boolean resourceOverCommit;\n+    private volatile boolean memoryLimitsInitialized;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "924740ad3d15588b777ca33e48838b703bfc1054"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4MjA0MTc0", "url": "https://github.com/prestodb/presto/pull/15522#pullrequestreview-558204174", "createdAt": "2020-12-23T20:02:54Z", "commit": {"oid": "924740ad3d15588b777ca33e48838b703bfc1054"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4549, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}