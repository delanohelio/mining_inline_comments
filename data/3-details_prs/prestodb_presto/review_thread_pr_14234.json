{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2MDQzNzIx", "number": 14234, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMTozMTozNVrODprzPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNzoxMTo1MFrODqeQ5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDM1ODM5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/repartition/OptimizedPartitionedOutputOperator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMTozMTozNVrOF5BHRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMTozMTozNVrOF5BHRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMzMTM5OQ==", "bodyText": "Math.min(buffer.length, capacity) -> buffer.length since buffer.length is known to be less than capacity", "url": "https://github.com/prestodb/presto/pull/14234#discussion_r395331399", "createdAt": "2020-03-19T21:31:35Z", "author": {"login": "mbasmanova"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/repartition/OptimizedPartitionedOutputOperator.java", "diffHunk": "@@ -224,6 +226,32 @@ static DecodedBlockNode decodeBlock(BlockFlattener flattener, Closer blockLeaseC\n         return new DecodedBlockNode(decodedBlock, ImmutableList.of());\n     }\n \n+    static int[] ensureCapacityWithAllocator(int[] buffer, int capacity, ExpansionFactor expansionFactor, Arrays.ExpansionOption expansionOption, ArrayAllocator allocator)\n+    {\n+        int newCapacity = (int) (capacity * expansionFactor.getExpansionFactor());\n+\n+        int[] newBuffer;\n+        if (buffer == null) {\n+            newBuffer = allocator.borrowIntArray(newCapacity);\n+        }\n+        else if (buffer.length < capacity) {\n+            newBuffer = allocator.borrowIntArray(newCapacity);\n+            if (expansionOption == PRESERVE) {\n+                System.arraycopy(buffer, 0, newBuffer, 0, Math.min(buffer.length, capacity));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9743c8390914a2d4063d1c797f636855397b21"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDM2NDg2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/repartition/OptimizedPartitionedOutputOperator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMTozMzo1NVrOF5BLRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMTozMzo1NVrOF5BLRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMzMjQyMw==", "bodyText": "Any reason not to put this method into Arrays class (and drop WithAllocator suffix)?\n\nstatic import Arrays.ExpansionOption", "url": "https://github.com/prestodb/presto/pull/14234#discussion_r395332423", "createdAt": "2020-03-19T21:33:55Z", "author": {"login": "mbasmanova"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/repartition/OptimizedPartitionedOutputOperator.java", "diffHunk": "@@ -224,6 +226,32 @@ static DecodedBlockNode decodeBlock(BlockFlattener flattener, Closer blockLeaseC\n         return new DecodedBlockNode(decodedBlock, ImmutableList.of());\n     }\n \n+    static int[] ensureCapacityWithAllocator(int[] buffer, int capacity, ExpansionFactor expansionFactor, Arrays.ExpansionOption expansionOption, ArrayAllocator allocator)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9743c8390914a2d4063d1c797f636855397b21"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDM2NzAzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/repartition/OptimizedPartitionedOutputOperator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMTozNDo0M1rOF5BMrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwNjowNzo1OFrOF5teZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMzMjc4Mg==", "bodyText": "Would it be possible to reuse existing arrayAllocator ?\n\n10000 -> 10_000 for readability", "url": "https://github.com/prestodb/presto/pull/14234#discussion_r395332782", "createdAt": "2020-03-19T21:34:43Z", "author": {"login": "mbasmanova"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/repartition/OptimizedPartitionedOutputOperator.java", "diffHunk": "@@ -364,6 +392,7 @@ public OperatorFactory duplicate()\n         private final ArrayAllocator arrayAllocator = new SimpleArrayAllocator(5000);\n         private final BlockFlattener flattener = new BlockFlattener(arrayAllocator);\n         private final Closer blockLeaseCloser = Closer.create();\n+        private final ArrayAllocator bufferAllocator = new SimpleArrayAllocator(10000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9743c8390914a2d4063d1c797f636855397b21"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA1ODIxNA==", "bodyText": "@mbasmanova The difficulty using existing arrayAllocator is counting memory becomes a bit more difficult. The existing arrayAllocator is only used by BlockFlattener, and this part of memory borrowed would be still counted in DecodedBlock#getRetainedSizeInBytes(). Thus when we add a new bufferAllocator, we can simply add its retained size. If we merge the two allocators, then the counting of the dictionary ids array borrowed by BlockFlattener would be double counted in arrayAllocator and decodedBlocks. How about renaming original arrayAllocator to  blockDecodingAllocator and remain using bufferAllocator for reusing the buffers?", "url": "https://github.com/prestodb/presto/pull/14234#discussion_r396058214", "createdAt": "2020-03-22T06:07:58Z", "author": {"login": "yingsu00"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/repartition/OptimizedPartitionedOutputOperator.java", "diffHunk": "@@ -364,6 +392,7 @@ public OperatorFactory duplicate()\n         private final ArrayAllocator arrayAllocator = new SimpleArrayAllocator(5000);\n         private final BlockFlattener flattener = new BlockFlattener(arrayAllocator);\n         private final Closer blockLeaseCloser = Closer.create();\n+        private final ArrayAllocator bufferAllocator = new SimpleArrayAllocator(10000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMzMjc4Mg=="}, "originalCommit": {"oid": "7f9743c8390914a2d4063d1c797f636855397b21"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDM2OTc2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/repartition/OptimizedPartitionedOutputOperator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMTozNTo0NVrOF5BOfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwNjoyNTo0NlrOF5th7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMzMzI0NQ==", "bodyText": "this comment is now confusing (because bufferAllocator is an array allocator)", "url": "https://github.com/prestodb/presto/pull/14234#discussion_r395333245", "createdAt": "2020-03-19T21:35:45Z", "author": {"login": "mbasmanova"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/repartition/OptimizedPartitionedOutputOperator.java", "diffHunk": "@@ -494,7 +523,7 @@ public long getRetainedSizeInBytes()\n             // When called in addInput(), the arrays have been returned to the arrayAllocator already,\n             // but they're still owned by the decodedBlock which will be counted as part of the decodedBlock.\n             // In both cases, the arrayAllocator doesn't need to be counted.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9743c8390914a2d4063d1c797f636855397b21"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA1OTExOA==", "bodyText": "@mbasmanova For now I'm using blockDecodingAllocator and bufferAllocator in PagePartitioner, and changed this comment to the following:\n// When called by the operator constructor, the blockDecodingAllocator was empty at the moment.\n            // When called in addInput(), the arrays have been returned to the blockDecodingAllocator already,\n            // but they're still owned by the decodedBlock which will be counted as part of the decodedBlock.\n            // In both cases, the blockDecodingAllocator doesn't need to be counted. But we need to count\n            // bufferAllocator which contains buffers used during partitioning, e.g. serializedRowSizes,\n            // mappedPositions, etc.\n            long size = bufferAllocator.getEstimatedSizeInBytes();\n\nDoes this looks better? Or if you have better idea to count the memory using a single ArrayAllocator, we can remove this comment.", "url": "https://github.com/prestodb/presto/pull/14234#discussion_r396059118", "createdAt": "2020-03-22T06:25:46Z", "author": {"login": "yingsu00"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/repartition/OptimizedPartitionedOutputOperator.java", "diffHunk": "@@ -494,7 +523,7 @@ public long getRetainedSizeInBytes()\n             // When called in addInput(), the arrays have been returned to the arrayAllocator already,\n             // but they're still owned by the decodedBlock which will be counted as part of the decodedBlock.\n             // In both cases, the arrayAllocator doesn't need to be counted.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMzMzI0NQ=="}, "originalCommit": {"oid": "7f9743c8390914a2d4063d1c797f636855397b21"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDM3MDY3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/repartition/OptimizedPartitionedOutputOperator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMTozNjowOFrOF5BPIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwNjozMjo1NVrOF5tjjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMzMzQwOA==", "bodyText": "allocator -> arrayAllocator", "url": "https://github.com/prestodb/presto/pull/14234#discussion_r395333408", "createdAt": "2020-03-19T21:36:08Z", "author": {"login": "mbasmanova"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/repartition/OptimizedPartitionedOutputOperator.java", "diffHunk": "@@ -544,6 +573,7 @@ private static int getFixedWidthTypeSize(Type type)\n         private final Lifespan lifespan;\n         private final int capacity;\n         private final int channelCount;\n+        private final ArrayAllocator allocator;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9743c8390914a2d4063d1c797f636855397b21"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA1OTUzNA==", "bodyText": "@mbasmanova I renamed it to bufferAllocator to be consistent with the one in PagePartitioner. Let me know if you prefer other names.", "url": "https://github.com/prestodb/presto/pull/14234#discussion_r396059534", "createdAt": "2020-03-22T06:32:55Z", "author": {"login": "yingsu00"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/repartition/OptimizedPartitionedOutputOperator.java", "diffHunk": "@@ -544,6 +573,7 @@ private static int getFixedWidthTypeSize(Type type)\n         private final Lifespan lifespan;\n         private final int capacity;\n         private final int channelCount;\n+        private final ArrayAllocator allocator;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMzMzQwOA=="}, "originalCommit": {"oid": "7f9743c8390914a2d4063d1c797f636855397b21"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDM4OTk5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/repartition/OptimizedPartitionedOutputOperator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMTo0MzoyMlrOF5BblA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwOTo0NzoxOVrOF5ubHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMzNjU5Ng==", "bodyText": "This logic is confusing to me. calculateNextBatchSize is called in a do-while loop and therefore it is not clear that it won't be called anymore. I think it would be clearer to move allocation and freeing of the serializedRowSizes into appendData and change serializedRowSizes into a local variable:\n            int[] serializedRowSizes = ensureCapacityWithAllocator(null, positionCount, SMALL, INITIALIZE, allocator);\n            try {\n\n                populateSerializedRowSizes(fixedWidthRowSize, variableWidthChannels, serializedRowSizes);\n\n                // Due to the limitation of buffer size, we append the data batch by batch\n                int offset = 0;\n                do {\n                    int batchSize = calculateNextBatchSize(fixedWidthRowSize, variableWidthChannels, offset, serializedRowSizes);\n                    boolean lastBatchInPage = offset + batchSize >= positionCount;\n\n                    for (int i = 0; i < channelCount; i++) {\n                        blockEncodingBuffers[i].setNextBatch(offset, batchSize);\n                        blockEncodingBuffers[i].appendDataInBatch(lastBatchInPage);\n                    }\n\n                    bufferedRowCount += batchSize;\n                    offset += batchSize;\n\n                    if (bufferFull) {\n                        flush(outputBuffer);\n                        bufferFull = false;\n                    }\n                }\n                while (offset < positionCount);\n            }\n            finally {\n                // Return the borrowed array for serializedRowSizes when the current page will be finished in this batch.\n                // At this point the batchSize was already calculated and we don't need the serializedRowSizes any more.\n                allocator.returnArray(serializedRowSizes);\n            }", "url": "https://github.com/prestodb/presto/pull/14234#discussion_r395336596", "createdAt": "2020-03-19T21:43:22Z", "author": {"login": "mbasmanova"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/repartition/OptimizedPartitionedOutputOperator.java", "diffHunk": "@@ -675,6 +706,11 @@ private int calculateNextBatchSize(int fixedWidthRowSize, List<Integer> variable\n                 }\n             }\n \n+            // Return the borrowed array for serializedRowSizes when the current page will be finished in this batch.\n+            // At this point the batchSize was already calculated and we don't need the serializedRowSizes any more.\n+            allocator.returnArray(serializedRowSizes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9743c8390914a2d4063d1c797f636855397b21"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk0NjQxOQ==", "bodyText": "@mbasmanova The original logic was to release the serializedRowSizes after the size of the last batch of the page was calculated. For that purpose the returnArray() happens before the last line of calculateNextBatchSize(). If it's not the last batch in page, the code would have returned before reaching that point. I was doing it this way because I thought serializedRowSizes is an internal thing only used for calculating batchSize, therefore it was better to be confined inside of populateSerializedRowSizes() and calculateNextBatchSize(). As the caller of these two methods, appendData() doesn't need to care about how the serializedRowSizes is used. What's your opinion on this? If you think this is not important, I'll change it the way you suggested. Thanks!", "url": "https://github.com/prestodb/presto/pull/14234#discussion_r395946419", "createdAt": "2020-03-21T01:10:19Z", "author": {"login": "yingsu00"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/repartition/OptimizedPartitionedOutputOperator.java", "diffHunk": "@@ -675,6 +706,11 @@ private int calculateNextBatchSize(int fixedWidthRowSize, List<Integer> variable\n                 }\n             }\n \n+            // Return the borrowed array for serializedRowSizes when the current page will be finished in this batch.\n+            // At this point the batchSize was already calculated and we don't need the serializedRowSizes any more.\n+            allocator.returnArray(serializedRowSizes);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMzNjU5Ng=="}, "originalCommit": {"oid": "7f9743c8390914a2d4063d1c797f636855397b21"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA3Mzc1OQ==", "bodyText": "Masha, I updated the code as you suggested.", "url": "https://github.com/prestodb/presto/pull/14234#discussion_r396073759", "createdAt": "2020-03-22T09:47:19Z", "author": {"login": "yingsu00"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/repartition/OptimizedPartitionedOutputOperator.java", "diffHunk": "@@ -675,6 +706,11 @@ private int calculateNextBatchSize(int fixedWidthRowSize, List<Integer> variable\n                 }\n             }\n \n+            // Return the borrowed array for serializedRowSizes when the current page will be finished in this batch.\n+            // At this point the batchSize was already calculated and we don't need the serializedRowSizes any more.\n+            allocator.returnArray(serializedRowSizes);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMzNjU5Ng=="}, "originalCommit": {"oid": "7f9743c8390914a2d4063d1c797f636855397b21"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDM5NzM2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/repartition/AbstractBlockEncodingBuffer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMTo0NjoyMlrOF5Bgjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMTo0NjoyMlrOF5Bgjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMzNzg3MA==", "bodyText": "Make it final and add a constructor that takes ArrayAllocator.", "url": "https://github.com/prestodb/presto/pull/14234#discussion_r395337870", "createdAt": "2020-03-19T21:46:22Z", "author": {"login": "mbasmanova"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/repartition/AbstractBlockEncodingBuffer.java", "diffHunk": "@@ -82,6 +83,9 @@\n     // Whether the positions array has already been mapped to mappedPositions\n     protected boolean positionsMapped;\n \n+    // The allocator for internal buffers\n+    protected ArrayAllocator allocator;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "222f1b3cceab79a0a71401f91bbbb308018b751d"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDQwNDcxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/repartition/ArrayBlockEncodingBuffer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMTo0OTowM1rOF5BlGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMTo0OTowM1rOF5BlGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMzOTAzNA==", "bodyText": "Make offsetsCopy a local variable:\n        int[] offsetsCopy = ensureCapacityWithAllocator(null, positionCount + 1, SMALL, NONE, allocator);\n        try {\n            System.arraycopy(offsets, 0, offsetsCopy, 0, positionCount + 1);\n\n            ((AbstractBlockEncodingBuffer) valuesBuffers).accumulateSerializedRowSizes(offsetsCopy, positionCount, serializedRowSizes);\n        }\n        finally {\n            allocator.returnArray(offsetsCopy);   \n        }", "url": "https://github.com/prestodb/presto/pull/14234#discussion_r395339034", "createdAt": "2020-03-19T21:49:03Z", "author": {"login": "mbasmanova"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/repartition/ArrayBlockEncodingBuffer.java", "diffHunk": "@@ -83,10 +86,13 @@ public void accumulateSerializedRowSizes(int[] serializedRowSizes)\n             serializedRowSizes[i] += POSITION_SIZE;\n         }\n \n-        offsetsCopy = ensureCapacity(offsetsCopy, positionCount + 1);\n+        offsetsCopy = ensureCapacityWithAllocator(offsetsCopy, positionCount + 1, SMALL, NONE, allocator);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c8fe4bf7cd74e5aa0794bd6a91cdb3b263895ee"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDQwODQzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/repartition/AbstractBlockEncodingBuffer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMTo1MDoyOVrOF5BnZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMTo1MDoyOVrOF5BnZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMzOTYyMg==", "bodyText": "Make this final and add constructor that takes isNested flag.", "url": "https://github.com/prestodb/presto/pull/14234#discussion_r395339622", "createdAt": "2020-03-19T21:50:29Z", "author": {"login": "mbasmanova"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/repartition/AbstractBlockEncodingBuffer.java", "diffHunk": "@@ -64,6 +64,9 @@\n public abstract class AbstractBlockEncodingBuffer\n         implements BlockEncodingBuffer\n {\n+    // Boolean indicating whether this is a buffer for a nested level block.\n+    protected boolean isNested;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80940bd10dd719d1377f4c7f46d19b699ac9f5f9"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDQzMDkwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/repartition/OptimizedPartitionedOutputOperator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMTo1ODo0OFrOF5B0zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMTo1ODo0OFrOF5B0zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0MzA1Mg==", "bodyText": "Debugging? Remove.", "url": "https://github.com/prestodb/presto/pull/14234#discussion_r395343052", "createdAt": "2020-03-19T21:58:48Z", "author": {"login": "mbasmanova"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/repartition/OptimizedPartitionedOutputOperator.java", "diffHunk": "@@ -171,6 +171,8 @@ public void addInput(Page page)\n         page = pagePreprocessor.apply(page);\n         pagePartitioner.partitionPage(page);\n \n+        System.out.println(pagePartitioner.getRetainedSizeInBytes());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd79bc1dd191bacc169ba708458ac08b2a412405"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDQ0NjM4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/repartition/OptimizedPartitionedOutputOperator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMjowNDo0NlrOF5B-NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwOTo0Njo0MVrOF5ua7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0NTQ2MA==", "bodyText": "I'm wondering if it would be clearer to add separate API to signal that there will be no more batches and call it at the same time you call allocator.returnArray(serializedRowSizes). Also, it would be helpful to update documentation for BlockEncodingBuffer to explain in which order the methods are being called.\nint[] serializedRowSizes = ensureCapacityWithAllocator(null, positionCount, SMALL, INITIALIZE, allocator);\n            try {\n\n                populateSerializedRowSizes(fixedWidthRowSize, variableWidthChannels, serializedRowSizes);\n\n                // Due to the limitation of buffer size, we append the data batch by batch\n                int offset = 0;\n                do {\n                    int batchSize = calculateNextBatchSize(fixedWidthRowSize, variableWidthChannels, offset, serializedRowSizes);\n\n                    for (int i = 0; i < channelCount; i++) {\n                        blockEncodingBuffers[i].setNextBatch(offset, batchSize);\n                        blockEncodingBuffers[i].appendDataInBatch();\n                    }\n\n                    bufferedRowCount += batchSize;\n                    offset += batchSize;\n\n                    if (bufferFull) {\n                        flush(outputBuffer);\n                        bufferFull = false;\n                    }\n                }\n                while (offset < positionCount);\n            }\n            finally {\n                // Return the borrowed array for serializedRowSizes when the current page will be finished in this batch.\n                // At this point the batchSize was already calculated and we don't need the serializedRowSizes any more.\n                allocator.returnArray(serializedRowSizes);\n                for (int i = 0; i < channelCount; i++) {\n                    blockEncodingBuffers[i].noMoreBatches();\n                }\n            }", "url": "https://github.com/prestodb/presto/pull/14234#discussion_r395345460", "createdAt": "2020-03-19T22:04:46Z", "author": {"login": "mbasmanova"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/repartition/OptimizedPartitionedOutputOperator.java", "diffHunk": "@@ -634,10 +636,11 @@ private void appendData(DecodedBlockNode[] decodedBlocks, int fixedWidthRowSize,\n             int offset = 0;\n             do {\n                 int batchSize = calculateNextBatchSize(fixedWidthRowSize, variableWidthChannels, offset);\n+                boolean lastBatchInPage = offset + batchSize >= positionCount;\n \n                 for (int i = 0; i < channelCount; i++) {\n                     blockEncodingBuffers[i].setNextBatch(offset, batchSize);\n-                    blockEncodingBuffers[i].appendDataInBatch();\n+                    blockEncodingBuffers[i].appendDataInBatch(lastBatchInPage);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd79bc1dd191bacc169ba708458ac08b2a412405"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA3MzcxMQ==", "bodyText": "@mbasmanova Masha, thanks for the suggestion. I changed the code as you suggested. If in the future we want to share buffers among blockEncodingBuffers, we will need to do it in the   for (int i = 0; i < channelCount; i++) loop. Related issue #14274", "url": "https://github.com/prestodb/presto/pull/14234#discussion_r396073711", "createdAt": "2020-03-22T09:46:41Z", "author": {"login": "yingsu00"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/repartition/OptimizedPartitionedOutputOperator.java", "diffHunk": "@@ -634,10 +636,11 @@ private void appendData(DecodedBlockNode[] decodedBlocks, int fixedWidthRowSize,\n             int offset = 0;\n             do {\n                 int batchSize = calculateNextBatchSize(fixedWidthRowSize, variableWidthChannels, offset);\n+                boolean lastBatchInPage = offset + batchSize >= positionCount;\n \n                 for (int i = 0; i < channelCount; i++) {\n                     blockEncodingBuffers[i].setNextBatch(offset, batchSize);\n-                    blockEncodingBuffers[i].appendDataInBatch();\n+                    blockEncodingBuffers[i].appendDataInBatch(lastBatchInPage);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0NTQ2MA=="}, "originalCommit": {"oid": "cd79bc1dd191bacc169ba708458ac08b2a412405"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODE2Mjg4OnYy", "diffSide": "RIGHT", "path": "presto-array/src/main/java/com/facebook/presto/array/Arrays.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNToyOToyOFrOF6Kyfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNToyOToyOFrOF6Kyfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUzODQ5NQ==", "bodyText": "Arrays.ExpansionOption -> ExpansionOption", "url": "https://github.com/prestodb/presto/pull/14234#discussion_r396538495", "createdAt": "2020-03-23T15:29:28Z", "author": {"login": "mbasmanova"}, "path": "presto-array/src/main/java/com/facebook/presto/array/Arrays.java", "diffHunk": "@@ -49,6 +51,32 @@ else if (expansionOption == INITIALIZE) {\n         return buffer;\n     }\n \n+    public static int[] ensureCapacity(int[] buffer, int capacity, ExpansionFactor expansionFactor, Arrays.ExpansionOption expansionOption, ArrayAllocator allocator)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a536e2fcb0479659a1d7e18588a86b86eafd6d09"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODE3MDA0OnYy", "diffSide": "RIGHT", "path": "presto-array/src/main/java/com/facebook/presto/array/Arrays.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNTozMTowMFrOF6K3Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNTozMTowMFrOF6K3Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUzOTY5MQ==", "bodyText": "this method is not needed; just use expansionFactor.expansionFactor", "url": "https://github.com/prestodb/presto/pull/14234#discussion_r396539691", "createdAt": "2020-03-23T15:31:00Z", "author": {"login": "mbasmanova"}, "path": "presto-array/src/main/java/com/facebook/presto/array/Arrays.java", "diffHunk": "@@ -128,6 +156,11 @@ else if (expansionOption == INITIALIZE) {\n         {\n             this.expansionFactor = expansionFactor;\n         }\n+\n+        public double getExpansionFactor()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a536e2fcb0479659a1d7e18588a86b86eafd6d09"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODYyNjI4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/repartition/OptimizedPartitionedOutputOperator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNzoxMTo1MFrOF6PfMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNzoxMTo1MFrOF6PfMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYxNTQ3NQ==", "bodyText": "this variable is not used; remove", "url": "https://github.com/prestodb/presto/pull/14234#discussion_r396615475", "createdAt": "2020-03-23T17:11:50Z", "author": {"login": "mbasmanova"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/repartition/OptimizedPartitionedOutputOperator.java", "diffHunk": "@@ -612,6 +612,7 @@ private void appendData(DecodedBlockNode[] decodedBlocks, int fixedWidthRowSize,\n                 int offset = 0;\n                 do {\n                     int batchSize = calculateNextBatchSize(fixedWidthRowSize, variableWidthChannels, offset, serializedRowSizes);\n+                    boolean lastBatchInPage = offset + batchSize >= positionCount;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9cd46f7787729826f5b1828a5719bc1e28857a99"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2892, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}