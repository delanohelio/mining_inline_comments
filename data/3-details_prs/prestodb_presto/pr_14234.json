{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2MDQzNzIx", "number": 14234, "title": "Reuse buffers in OptimizedPartitionedOutputOperator - part 1 serializedRowSizes, offsetsCopy, positions, mappedPositions and offsets", "bodyText": "Partially resolves #14162\nOptimizedPartitionedOutputOperator persists a set of local buffers. For example, each PartitionBuffer has a serializedRowSizes array to hold the estimated sizes for each row. Each BlockEncodingBuffer has a offsetsCopy that holds the adjusted offsets for the whole block. These buffers can be reused under some circumstances. This PR reuses serializedRowSizes between different PartitionBuffers, reuse offsetsCopy between different BlockEncodingBuffers, reuse positions, mappedPositions and offsets between BlockEncodingBuffers. For pages with nested type columns like array, map and row with high cardinality, or the block is DictionaryBlock, these optimizations can save over 30% memory.\n== NO RELEASE NOTE ==", "createdAt": "2020-03-10T10:13:13Z", "url": "https://github.com/prestodb/presto/pull/14234", "merged": true, "mergeCommit": {"oid": "e90fd6baf9b47701ab8346df054ebf58878a43c2"}, "closed": true, "closedAt": "2020-03-23T22:34:27Z", "author": {"login": "yingsu00"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcMwF49gBqjMxMjA5NDI1MDc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcQinDdABqjMxNTY1MjMzOTk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "76ca4b1270e92d8765aaa60abd07b12135df9838", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/76ca4b1270e92d8765aaa60abd07b12135df9838", "committedDate": "2020-03-10T08:53:58Z", "message": "Add GC profile to BenchmarkPartitionedOutputOperator"}, "afterCommit": {"oid": "fba950636c6d10b74ed95f800d196da515ae7de9", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/fba950636c6d10b74ed95f800d196da515ae7de9", "committedDate": "2020-03-11T23:54:47Z", "message": "Add GC profile to BenchmarkPartitionedOutputOperator"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fba950636c6d10b74ed95f800d196da515ae7de9", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/fba950636c6d10b74ed95f800d196da515ae7de9", "committedDate": "2020-03-11T23:54:47Z", "message": "Add GC profile to BenchmarkPartitionedOutputOperator"}, "afterCommit": {"oid": "c7a467b1327e1d915d0a02d63626bdb1643c145b", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/c7a467b1327e1d915d0a02d63626bdb1643c145b", "committedDate": "2020-03-12T06:48:40Z", "message": "Add GC profile to BenchmarkPartitionedOutputOperator"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c7a467b1327e1d915d0a02d63626bdb1643c145b", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/c7a467b1327e1d915d0a02d63626bdb1643c145b", "committedDate": "2020-03-12T06:48:40Z", "message": "Add GC profile to BenchmarkPartitionedOutputOperator"}, "afterCommit": {"oid": "8d8308660e87e6fd7f6196e52867b130a696ce57", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/8d8308660e87e6fd7f6196e52867b130a696ce57", "committedDate": "2020-03-16T08:23:14Z", "message": "Reuse positions, mappedPositions and offsets in BlockEncodingBuffer\n\nThe positions and offsets arrays for composite blocks and mappedPositions\nfor DictionaryBlock can be reused after appending the last batch in this\ncolumn to the BlockEncodingBuffers. For pages with two level nested array\ncolumns, this optimization can save 30% memory."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8d8308660e87e6fd7f6196e52867b130a696ce57", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/8d8308660e87e6fd7f6196e52867b130a696ce57", "committedDate": "2020-03-16T08:23:14Z", "message": "Reuse positions, mappedPositions and offsets in BlockEncodingBuffer\n\nThe positions and offsets arrays for composite blocks and mappedPositions\nfor DictionaryBlock can be reused after appending the last batch in this\ncolumn to the BlockEncodingBuffers. For pages with two level nested array\ncolumns, this optimization can save 30% memory."}, "afterCommit": {"oid": "1a4373eaf3c291ce90444c2e8b97b77d331c60ca", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/1a4373eaf3c291ce90444c2e8b97b77d331c60ca", "committedDate": "2020-03-17T10:19:37Z", "message": "Reuse positions, mappedPositions and offsets in BlockEncodingBuffer\n\nThe positions and offsets arrays for composite blocks and mappedPositions\nfor DictionaryBlock can be reused after appending the last batch in this\ncolumn to the BlockEncodingBuffers. For pages with two level nested array\ncolumns, this optimization can save 30% memory."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1a4373eaf3c291ce90444c2e8b97b77d331c60ca", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/1a4373eaf3c291ce90444c2e8b97b77d331c60ca", "committedDate": "2020-03-17T10:19:37Z", "message": "Reuse positions, mappedPositions and offsets in BlockEncodingBuffer\n\nThe positions and offsets arrays for composite blocks and mappedPositions\nfor DictionaryBlock can be reused after appending the last batch in this\ncolumn to the BlockEncodingBuffers. For pages with two level nested array\ncolumns, this optimization can save 30% memory."}, "afterCommit": {"oid": "cd79bc1dd191bacc169ba708458ac08b2a412405", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/cd79bc1dd191bacc169ba708458ac08b2a412405", "committedDate": "2020-03-17T23:29:26Z", "message": "Reuse positions, mappedPositions and offsets in BlockEncodingBuffer\n\nThe positions and offsets arrays for composite blocks and mappedPositions\nfor DictionaryBlock can be reused after appending the last batch in this\ncolumn to the BlockEncodingBuffers. For pages with two level nested array\ncolumns, this optimization can save 30% memory."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MTA4NTQ0", "url": "https://github.com/prestodb/presto/pull/14234#pullrequestreview-378108544", "createdAt": "2020-03-19T21:31:35Z", "commit": {"oid": "7f9743c8390914a2d4063d1c797f636855397b21"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMTozMTozNVrOF5BHRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMTo0MzoyMlrOF5BblA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMzMTM5OQ==", "bodyText": "Math.min(buffer.length, capacity) -> buffer.length since buffer.length is known to be less than capacity", "url": "https://github.com/prestodb/presto/pull/14234#discussion_r395331399", "createdAt": "2020-03-19T21:31:35Z", "author": {"login": "mbasmanova"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/repartition/OptimizedPartitionedOutputOperator.java", "diffHunk": "@@ -224,6 +226,32 @@ static DecodedBlockNode decodeBlock(BlockFlattener flattener, Closer blockLeaseC\n         return new DecodedBlockNode(decodedBlock, ImmutableList.of());\n     }\n \n+    static int[] ensureCapacityWithAllocator(int[] buffer, int capacity, ExpansionFactor expansionFactor, Arrays.ExpansionOption expansionOption, ArrayAllocator allocator)\n+    {\n+        int newCapacity = (int) (capacity * expansionFactor.getExpansionFactor());\n+\n+        int[] newBuffer;\n+        if (buffer == null) {\n+            newBuffer = allocator.borrowIntArray(newCapacity);\n+        }\n+        else if (buffer.length < capacity) {\n+            newBuffer = allocator.borrowIntArray(newCapacity);\n+            if (expansionOption == PRESERVE) {\n+                System.arraycopy(buffer, 0, newBuffer, 0, Math.min(buffer.length, capacity));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9743c8390914a2d4063d1c797f636855397b21"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMzMjQyMw==", "bodyText": "Any reason not to put this method into Arrays class (and drop WithAllocator suffix)?\n\nstatic import Arrays.ExpansionOption", "url": "https://github.com/prestodb/presto/pull/14234#discussion_r395332423", "createdAt": "2020-03-19T21:33:55Z", "author": {"login": "mbasmanova"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/repartition/OptimizedPartitionedOutputOperator.java", "diffHunk": "@@ -224,6 +226,32 @@ static DecodedBlockNode decodeBlock(BlockFlattener flattener, Closer blockLeaseC\n         return new DecodedBlockNode(decodedBlock, ImmutableList.of());\n     }\n \n+    static int[] ensureCapacityWithAllocator(int[] buffer, int capacity, ExpansionFactor expansionFactor, Arrays.ExpansionOption expansionOption, ArrayAllocator allocator)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9743c8390914a2d4063d1c797f636855397b21"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMzMjc4Mg==", "bodyText": "Would it be possible to reuse existing arrayAllocator ?\n\n10000 -> 10_000 for readability", "url": "https://github.com/prestodb/presto/pull/14234#discussion_r395332782", "createdAt": "2020-03-19T21:34:43Z", "author": {"login": "mbasmanova"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/repartition/OptimizedPartitionedOutputOperator.java", "diffHunk": "@@ -364,6 +392,7 @@ public OperatorFactory duplicate()\n         private final ArrayAllocator arrayAllocator = new SimpleArrayAllocator(5000);\n         private final BlockFlattener flattener = new BlockFlattener(arrayAllocator);\n         private final Closer blockLeaseCloser = Closer.create();\n+        private final ArrayAllocator bufferAllocator = new SimpleArrayAllocator(10000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9743c8390914a2d4063d1c797f636855397b21"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMzMzI0NQ==", "bodyText": "this comment is now confusing (because bufferAllocator is an array allocator)", "url": "https://github.com/prestodb/presto/pull/14234#discussion_r395333245", "createdAt": "2020-03-19T21:35:45Z", "author": {"login": "mbasmanova"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/repartition/OptimizedPartitionedOutputOperator.java", "diffHunk": "@@ -494,7 +523,7 @@ public long getRetainedSizeInBytes()\n             // When called in addInput(), the arrays have been returned to the arrayAllocator already,\n             // but they're still owned by the decodedBlock which will be counted as part of the decodedBlock.\n             // In both cases, the arrayAllocator doesn't need to be counted.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9743c8390914a2d4063d1c797f636855397b21"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMzMzQwOA==", "bodyText": "allocator -> arrayAllocator", "url": "https://github.com/prestodb/presto/pull/14234#discussion_r395333408", "createdAt": "2020-03-19T21:36:08Z", "author": {"login": "mbasmanova"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/repartition/OptimizedPartitionedOutputOperator.java", "diffHunk": "@@ -544,6 +573,7 @@ private static int getFixedWidthTypeSize(Type type)\n         private final Lifespan lifespan;\n         private final int capacity;\n         private final int channelCount;\n+        private final ArrayAllocator allocator;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9743c8390914a2d4063d1c797f636855397b21"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMzNjU5Ng==", "bodyText": "This logic is confusing to me. calculateNextBatchSize is called in a do-while loop and therefore it is not clear that it won't be called anymore. I think it would be clearer to move allocation and freeing of the serializedRowSizes into appendData and change serializedRowSizes into a local variable:\n            int[] serializedRowSizes = ensureCapacityWithAllocator(null, positionCount, SMALL, INITIALIZE, allocator);\n            try {\n\n                populateSerializedRowSizes(fixedWidthRowSize, variableWidthChannels, serializedRowSizes);\n\n                // Due to the limitation of buffer size, we append the data batch by batch\n                int offset = 0;\n                do {\n                    int batchSize = calculateNextBatchSize(fixedWidthRowSize, variableWidthChannels, offset, serializedRowSizes);\n                    boolean lastBatchInPage = offset + batchSize >= positionCount;\n\n                    for (int i = 0; i < channelCount; i++) {\n                        blockEncodingBuffers[i].setNextBatch(offset, batchSize);\n                        blockEncodingBuffers[i].appendDataInBatch(lastBatchInPage);\n                    }\n\n                    bufferedRowCount += batchSize;\n                    offset += batchSize;\n\n                    if (bufferFull) {\n                        flush(outputBuffer);\n                        bufferFull = false;\n                    }\n                }\n                while (offset < positionCount);\n            }\n            finally {\n                // Return the borrowed array for serializedRowSizes when the current page will be finished in this batch.\n                // At this point the batchSize was already calculated and we don't need the serializedRowSizes any more.\n                allocator.returnArray(serializedRowSizes);\n            }", "url": "https://github.com/prestodb/presto/pull/14234#discussion_r395336596", "createdAt": "2020-03-19T21:43:22Z", "author": {"login": "mbasmanova"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/repartition/OptimizedPartitionedOutputOperator.java", "diffHunk": "@@ -675,6 +706,11 @@ private int calculateNextBatchSize(int fixedWidthRowSize, List<Integer> variable\n                 }\n             }\n \n+            // Return the borrowed array for serializedRowSizes when the current page will be finished in this batch.\n+            // At this point the batchSize was already calculated and we don't need the serializedRowSizes any more.\n+            allocator.returnArray(serializedRowSizes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9743c8390914a2d4063d1c797f636855397b21"}, "originalPosition": 108}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MTE2NzI2", "url": "https://github.com/prestodb/presto/pull/14234#pullrequestreview-378116726", "createdAt": "2020-03-19T21:46:22Z", "commit": {"oid": "222f1b3cceab79a0a71401f91bbbb308018b751d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMTo0NjoyMlrOF5Bgjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMTo0NjoyMlrOF5Bgjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMzNzg3MA==", "bodyText": "Make it final and add a constructor that takes ArrayAllocator.", "url": "https://github.com/prestodb/presto/pull/14234#discussion_r395337870", "createdAt": "2020-03-19T21:46:22Z", "author": {"login": "mbasmanova"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/repartition/AbstractBlockEncodingBuffer.java", "diffHunk": "@@ -82,6 +83,9 @@\n     // Whether the positions array has already been mapped to mappedPositions\n     protected boolean positionsMapped;\n \n+    // The allocator for internal buffers\n+    protected ArrayAllocator allocator;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "222f1b3cceab79a0a71401f91bbbb308018b751d"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MTE4MTMy", "url": "https://github.com/prestodb/presto/pull/14234#pullrequestreview-378118132", "createdAt": "2020-03-19T21:49:03Z", "commit": {"oid": "7c8fe4bf7cd74e5aa0794bd6a91cdb3b263895ee"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMTo0OTowM1rOF5BlGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMTo0OTowM1rOF5BlGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMzOTAzNA==", "bodyText": "Make offsetsCopy a local variable:\n        int[] offsetsCopy = ensureCapacityWithAllocator(null, positionCount + 1, SMALL, NONE, allocator);\n        try {\n            System.arraycopy(offsets, 0, offsetsCopy, 0, positionCount + 1);\n\n            ((AbstractBlockEncodingBuffer) valuesBuffers).accumulateSerializedRowSizes(offsetsCopy, positionCount, serializedRowSizes);\n        }\n        finally {\n            allocator.returnArray(offsetsCopy);   \n        }", "url": "https://github.com/prestodb/presto/pull/14234#discussion_r395339034", "createdAt": "2020-03-19T21:49:03Z", "author": {"login": "mbasmanova"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/repartition/ArrayBlockEncodingBuffer.java", "diffHunk": "@@ -83,10 +86,13 @@ public void accumulateSerializedRowSizes(int[] serializedRowSizes)\n             serializedRowSizes[i] += POSITION_SIZE;\n         }\n \n-        offsetsCopy = ensureCapacity(offsetsCopy, positionCount + 1);\n+        offsetsCopy = ensureCapacityWithAllocator(offsetsCopy, positionCount + 1, SMALL, NONE, allocator);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c8fe4bf7cd74e5aa0794bd6a91cdb3b263895ee"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MTE4ODcz", "url": "https://github.com/prestodb/presto/pull/14234#pullrequestreview-378118873", "createdAt": "2020-03-19T21:50:29Z", "commit": {"oid": "80940bd10dd719d1377f4c7f46d19b699ac9f5f9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMTo1MDoyOVrOF5BnZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMTo1MDoyOVrOF5BnZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMzOTYyMg==", "bodyText": "Make this final and add constructor that takes isNested flag.", "url": "https://github.com/prestodb/presto/pull/14234#discussion_r395339622", "createdAt": "2020-03-19T21:50:29Z", "author": {"login": "mbasmanova"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/repartition/AbstractBlockEncodingBuffer.java", "diffHunk": "@@ -64,6 +64,9 @@\n public abstract class AbstractBlockEncodingBuffer\n         implements BlockEncodingBuffer\n {\n+    // Boolean indicating whether this is a buffer for a nested level block.\n+    protected boolean isNested;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80940bd10dd719d1377f4c7f46d19b699ac9f5f9"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MTIyOTc4", "url": "https://github.com/prestodb/presto/pull/14234#pullrequestreview-378122978", "createdAt": "2020-03-19T21:58:48Z", "commit": {"oid": "cd79bc1dd191bacc169ba708458ac08b2a412405"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMTo1ODo0OFrOF5B0zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMjowNDo0NlrOF5B-NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0MzA1Mg==", "bodyText": "Debugging? Remove.", "url": "https://github.com/prestodb/presto/pull/14234#discussion_r395343052", "createdAt": "2020-03-19T21:58:48Z", "author": {"login": "mbasmanova"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/repartition/OptimizedPartitionedOutputOperator.java", "diffHunk": "@@ -171,6 +171,8 @@ public void addInput(Page page)\n         page = pagePreprocessor.apply(page);\n         pagePartitioner.partitionPage(page);\n \n+        System.out.println(pagePartitioner.getRetainedSizeInBytes());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd79bc1dd191bacc169ba708458ac08b2a412405"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0NTQ2MA==", "bodyText": "I'm wondering if it would be clearer to add separate API to signal that there will be no more batches and call it at the same time you call allocator.returnArray(serializedRowSizes). Also, it would be helpful to update documentation for BlockEncodingBuffer to explain in which order the methods are being called.\nint[] serializedRowSizes = ensureCapacityWithAllocator(null, positionCount, SMALL, INITIALIZE, allocator);\n            try {\n\n                populateSerializedRowSizes(fixedWidthRowSize, variableWidthChannels, serializedRowSizes);\n\n                // Due to the limitation of buffer size, we append the data batch by batch\n                int offset = 0;\n                do {\n                    int batchSize = calculateNextBatchSize(fixedWidthRowSize, variableWidthChannels, offset, serializedRowSizes);\n\n                    for (int i = 0; i < channelCount; i++) {\n                        blockEncodingBuffers[i].setNextBatch(offset, batchSize);\n                        blockEncodingBuffers[i].appendDataInBatch();\n                    }\n\n                    bufferedRowCount += batchSize;\n                    offset += batchSize;\n\n                    if (bufferFull) {\n                        flush(outputBuffer);\n                        bufferFull = false;\n                    }\n                }\n                while (offset < positionCount);\n            }\n            finally {\n                // Return the borrowed array for serializedRowSizes when the current page will be finished in this batch.\n                // At this point the batchSize was already calculated and we don't need the serializedRowSizes any more.\n                allocator.returnArray(serializedRowSizes);\n                for (int i = 0; i < channelCount; i++) {\n                    blockEncodingBuffers[i].noMoreBatches();\n                }\n            }", "url": "https://github.com/prestodb/presto/pull/14234#discussion_r395345460", "createdAt": "2020-03-19T22:04:46Z", "author": {"login": "mbasmanova"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/repartition/OptimizedPartitionedOutputOperator.java", "diffHunk": "@@ -634,10 +636,11 @@ private void appendData(DecodedBlockNode[] decodedBlocks, int fixedWidthRowSize,\n             int offset = 0;\n             do {\n                 int batchSize = calculateNextBatchSize(fixedWidthRowSize, variableWidthChannels, offset);\n+                boolean lastBatchInPage = offset + batchSize >= positionCount;\n \n                 for (int i = 0; i < channelCount; i++) {\n                     blockEncodingBuffers[i].setNextBatch(offset, batchSize);\n-                    blockEncodingBuffers[i].appendDataInBatch();\n+                    blockEncodingBuffers[i].appendDataInBatch(lastBatchInPage);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd79bc1dd191bacc169ba708458ac08b2a412405"}, "originalPosition": 18}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cd79bc1dd191bacc169ba708458ac08b2a412405", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/cd79bc1dd191bacc169ba708458ac08b2a412405", "committedDate": "2020-03-17T23:29:26Z", "message": "Reuse positions, mappedPositions and offsets in BlockEncodingBuffer\n\nThe positions and offsets arrays for composite blocks and mappedPositions\nfor DictionaryBlock can be reused after appending the last batch in this\ncolumn to the BlockEncodingBuffers. For pages with two level nested array\ncolumns, this optimization can save 30% memory."}, "afterCommit": {"oid": "9cd46f7787729826f5b1828a5719bc1e28857a99", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/9cd46f7787729826f5b1828a5719bc1e28857a99", "committedDate": "2020-03-22T09:31:29Z", "message": "Reuse positions, mappedPositions and offsets in BlockEncodingBuffer\n\nThe positions and offsets arrays for composite blocks and mappedPositions\nfor DictionaryBlock can be reused after appending the last batch in this\ncolumn to the BlockEncodingBuffers. For pages with two level nested array\ncolumns, this optimization can save 30% memory."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5NTQyMTY4", "url": "https://github.com/prestodb/presto/pull/14234#pullrequestreview-379542168", "createdAt": "2020-03-23T15:29:28Z", "commit": {"oid": "a536e2fcb0479659a1d7e18588a86b86eafd6d09"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNToyOToyOFrOF6Kyfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNTozMTowMFrOF6K3Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUzODQ5NQ==", "bodyText": "Arrays.ExpansionOption -> ExpansionOption", "url": "https://github.com/prestodb/presto/pull/14234#discussion_r396538495", "createdAt": "2020-03-23T15:29:28Z", "author": {"login": "mbasmanova"}, "path": "presto-array/src/main/java/com/facebook/presto/array/Arrays.java", "diffHunk": "@@ -49,6 +51,32 @@ else if (expansionOption == INITIALIZE) {\n         return buffer;\n     }\n \n+    public static int[] ensureCapacity(int[] buffer, int capacity, ExpansionFactor expansionFactor, Arrays.ExpansionOption expansionOption, ArrayAllocator allocator)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a536e2fcb0479659a1d7e18588a86b86eafd6d09"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUzOTY5MQ==", "bodyText": "this method is not needed; just use expansionFactor.expansionFactor", "url": "https://github.com/prestodb/presto/pull/14234#discussion_r396539691", "createdAt": "2020-03-23T15:31:00Z", "author": {"login": "mbasmanova"}, "path": "presto-array/src/main/java/com/facebook/presto/array/Arrays.java", "diffHunk": "@@ -128,6 +156,11 @@ else if (expansionOption == INITIALIZE) {\n         {\n             this.expansionFactor = expansionFactor;\n         }\n+\n+        public double getExpansionFactor()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a536e2fcb0479659a1d7e18588a86b86eafd6d09"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5NjM2OTk1", "url": "https://github.com/prestodb/presto/pull/14234#pullrequestreview-379636995", "createdAt": "2020-03-23T17:08:20Z", "commit": {"oid": "9cd46f7787729826f5b1828a5719bc1e28857a99"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5NjM3OTI2", "url": "https://github.com/prestodb/presto/pull/14234#pullrequestreview-379637926", "createdAt": "2020-03-23T17:09:21Z", "commit": {"oid": "9cd46f7787729826f5b1828a5719bc1e28857a99"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5NjM4MzU3", "url": "https://github.com/prestodb/presto/pull/14234#pullrequestreview-379638357", "createdAt": "2020-03-23T17:09:52Z", "commit": {"oid": "9cd46f7787729826f5b1828a5719bc1e28857a99"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5NjQwMTEw", "url": "https://github.com/prestodb/presto/pull/14234#pullrequestreview-379640110", "createdAt": "2020-03-23T17:11:50Z", "commit": {"oid": "9cd46f7787729826f5b1828a5719bc1e28857a99"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNzoxMTo1MFrOF6PfMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNzoxMTo1MFrOF6PfMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYxNTQ3NQ==", "bodyText": "this variable is not used; remove", "url": "https://github.com/prestodb/presto/pull/14234#discussion_r396615475", "createdAt": "2020-03-23T17:11:50Z", "author": {"login": "mbasmanova"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/repartition/OptimizedPartitionedOutputOperator.java", "diffHunk": "@@ -612,6 +612,7 @@ private void appendData(DecodedBlockNode[] decodedBlocks, int fixedWidthRowSize,\n                 int offset = 0;\n                 do {\n                     int batchSize = calculateNextBatchSize(fixedWidthRowSize, variableWidthChannels, offset, serializedRowSizes);\n+                    boolean lastBatchInPage = offset + batchSize >= positionCount;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9cd46f7787729826f5b1828a5719bc1e28857a99"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5NjQwNzM4", "url": "https://github.com/prestodb/presto/pull/14234#pullrequestreview-379640738", "createdAt": "2020-03-23T17:12:32Z", "commit": {"oid": "9cd46f7787729826f5b1828a5719bc1e28857a99"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af751dd2067a72d5c15a90e00ed5432245a0d6ec", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/af751dd2067a72d5c15a90e00ed5432245a0d6ec", "committedDate": "2020-03-23T18:27:09Z", "message": "Reuse serializedRowSizes buffer between different PartitionBuffers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cdc37ee8b220e97234db8cc2aecb344a1e6bd721", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/cdc37ee8b220e97234db8cc2aecb344a1e6bd721", "committedDate": "2020-03-23T18:27:16Z", "message": "Add ArrayAllocator to BlockEncodingBuffer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2437894fb0cf2744e178461b8856bdcc7d41d75e", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/2437894fb0cf2744e178461b8856bdcc7d41d75e", "committedDate": "2020-03-23T18:27:16Z", "message": "Reuse offsetsCopy in BlockEncodingBuffer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d4c57cb92bce69690a37fb3d3707240e3fded78", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/7d4c57cb92bce69690a37fb3d3707240e3fded78", "committedDate": "2020-03-23T18:27:16Z", "message": "Add isNested flag to BlockEncodingBuffer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d31e75307b837480c99a0794eec36582f6bd3fa8", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/d31e75307b837480c99a0794eec36582f6bd3fa8", "committedDate": "2020-03-23T18:27:55Z", "message": "Reuse positions, mappedPositions and offsets in BlockEncodingBuffer\n\nThe positions and offsets arrays for composite blocks and mappedPositions\nfor DictionaryBlock can be reused after appending the last batch in this\ncolumn to the BlockEncodingBuffers. For pages with two level nested array\ncolumns, this optimization can save 30% memory."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9cd46f7787729826f5b1828a5719bc1e28857a99", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/9cd46f7787729826f5b1828a5719bc1e28857a99", "committedDate": "2020-03-22T09:31:29Z", "message": "Reuse positions, mappedPositions and offsets in BlockEncodingBuffer\n\nThe positions and offsets arrays for composite blocks and mappedPositions\nfor DictionaryBlock can be reused after appending the last batch in this\ncolumn to the BlockEncodingBuffers. For pages with two level nested array\ncolumns, this optimization can save 30% memory."}, "afterCommit": {"oid": "d31e75307b837480c99a0794eec36582f6bd3fa8", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/d31e75307b837480c99a0794eec36582f6bd3fa8", "committedDate": "2020-03-23T18:27:55Z", "message": "Reuse positions, mappedPositions and offsets in BlockEncodingBuffer\n\nThe positions and offsets arrays for composite blocks and mappedPositions\nfor DictionaryBlock can be reused after appending the last batch in this\ncolumn to the BlockEncodingBuffers. For pages with two level nested array\ncolumns, this optimization can save 30% memory."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2027, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}