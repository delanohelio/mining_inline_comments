{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3ODM0NzAy", "number": 14123, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwMTowOTo0N1rODiDXWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwMToxMjozNlrODiDYRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDMzMzA2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/AccumulatorCompiler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwMTowOTo0N1rOFtIkaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwMToyMjo0MFrOFtIqGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3MDYzNQ==", "bodyText": "nit: what about if (!(%s ... (basically add a space", "url": "https://github.com/prestodb/presto/pull/14123#discussion_r382870635", "createdAt": "2020-02-22T01:09:47Z", "author": {"login": "wenleix"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/AccumulatorCompiler.java", "diffHunk": "@@ -543,14 +545,32 @@ private static BytecodeBlock generateInputForLoop(\n                         .invokeStatic(CompilerOperations.class, \"testMask\", boolean.class, Block.class, int.class))\n                 .ifTrue(loopBody);\n \n-        block.append(new ForLoop()\n+        BytecodeNode forLoop = new ForLoop()\n                 .initialize(new BytecodeBlock().putVariable(positionVariable, 0))\n                 .condition(new BytecodeBlock()\n                         .getVariable(positionVariable)\n                         .getVariable(rowsVariable)\n                         .invokeStatic(CompilerOperations.class, \"lessThan\", boolean.class, int.class, int.class))\n                 .update(new BytecodeBlock().incrementVariable(positionVariable, (byte) 1))\n-                .body(loopBody));\n+                .body(loopBody);\n+\n+        for (int i = 0; i < parameterVariables.size(); i++) {\n+            if (!nullable.get(i)) {\n+                Variable variableDefinition = parameterVariables.get(i);\n+                forLoop = new IfStatement(\"if(!(%s instanceof RunLengthEncodedBlock && %s.isNull(0)))\", variableDefinition.getName(), variableDefinition.getName())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8957d8603c015528bfa95a9f7dedd347fbade048"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3MjA4OA==", "bodyText": "@wenleix I was matching other comments in this file. They don't have space.\nloopBody = new IfStatement(\"if(testMask(%s, position))\", masksBlock.getName())\n\nloopBody = new IfStatement(\"if(!%s.isNull(position))\", variableDefinition.getName())", "url": "https://github.com/prestodb/presto/pull/14123#discussion_r382872088", "createdAt": "2020-02-22T01:22:40Z", "author": {"login": "mbasmanova"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/AccumulatorCompiler.java", "diffHunk": "@@ -543,14 +545,32 @@ private static BytecodeBlock generateInputForLoop(\n                         .invokeStatic(CompilerOperations.class, \"testMask\", boolean.class, Block.class, int.class))\n                 .ifTrue(loopBody);\n \n-        block.append(new ForLoop()\n+        BytecodeNode forLoop = new ForLoop()\n                 .initialize(new BytecodeBlock().putVariable(positionVariable, 0))\n                 .condition(new BytecodeBlock()\n                         .getVariable(positionVariable)\n                         .getVariable(rowsVariable)\n                         .invokeStatic(CompilerOperations.class, \"lessThan\", boolean.class, int.class, int.class))\n                 .update(new BytecodeBlock().incrementVariable(positionVariable, (byte) 1))\n-                .body(loopBody));\n+                .body(loopBody);\n+\n+        for (int i = 0; i < parameterVariables.size(); i++) {\n+            if (!nullable.get(i)) {\n+                Variable variableDefinition = parameterVariables.get(i);\n+                forLoop = new IfStatement(\"if(!(%s instanceof RunLengthEncodedBlock && %s.isNull(0)))\", variableDefinition.getName(), variableDefinition.getName())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3MDYzNQ=="}, "originalCommit": {"oid": "8957d8603c015528bfa95a9f7dedd347fbade048"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDMzNTQwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/AccumulatorCompiler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwMToxMjozNlrOFtIlvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwMToyNDowNFrOFtIqvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3MDk3NA==", "bodyText": "My understanding is this if-statement is required in case the RLE block has 0 position count, so the block.isNull(0)  on line 560 will fail.\nDoes it make sense to do the empty block check in the line 560 check? i.e.\n   if (!(block instanceof RunLengthEncodedBlock && block.getPositionCount() != 0 && block.isNull(0))) {\n        // for loop....\n   }", "url": "https://github.com/prestodb/presto/pull/14123#discussion_r382870974", "createdAt": "2020-02-22T01:12:36Z", "author": {"login": "wenleix"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/AccumulatorCompiler.java", "diffHunk": "@@ -543,14 +545,32 @@ private static BytecodeBlock generateInputForLoop(\n                         .invokeStatic(CompilerOperations.class, \"testMask\", boolean.class, Block.class, int.class))\n                 .ifTrue(loopBody);\n \n-        block.append(new ForLoop()\n+        BytecodeNode forLoop = new ForLoop()\n                 .initialize(new BytecodeBlock().putVariable(positionVariable, 0))\n                 .condition(new BytecodeBlock()\n                         .getVariable(positionVariable)\n                         .getVariable(rowsVariable)\n                         .invokeStatic(CompilerOperations.class, \"lessThan\", boolean.class, int.class, int.class))\n                 .update(new BytecodeBlock().incrementVariable(positionVariable, (byte) 1))\n-                .body(loopBody));\n+                .body(loopBody);\n+\n+        for (int i = 0; i < parameterVariables.size(); i++) {\n+            if (!nullable.get(i)) {\n+                Variable variableDefinition = parameterVariables.get(i);\n+                forLoop = new IfStatement(\"if(!(%s instanceof RunLengthEncodedBlock && %s.isNull(0)))\", variableDefinition.getName(), variableDefinition.getName())\n+                        .condition(and(\n+                                variableDefinition.instanceOf(RunLengthEncodedBlock.class),\n+                                variableDefinition.invoke(\"isNull\", boolean.class, constantInt(0))))\n+                        .ifFalse(forLoop);\n+            }\n+        }\n+\n+        block.append(new IfStatement(\"if(%s > 0)\", rowsVariable.getName())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8957d8603c015528bfa95a9f7dedd347fbade048"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3MjI1NA==", "bodyText": "this if-statement is required in case the RLE block has 0 position count, so the block.isNull(0) on line 560 will fail.\n\nThis is correct.\n\nDoes it make sense to do the empty block check in the line 560 check?\n\nI don't have any particular preference, but it seems like empty page check applies even if block not an RLE.", "url": "https://github.com/prestodb/presto/pull/14123#discussion_r382872254", "createdAt": "2020-02-22T01:24:04Z", "author": {"login": "mbasmanova"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/aggregation/AccumulatorCompiler.java", "diffHunk": "@@ -543,14 +545,32 @@ private static BytecodeBlock generateInputForLoop(\n                         .invokeStatic(CompilerOperations.class, \"testMask\", boolean.class, Block.class, int.class))\n                 .ifTrue(loopBody);\n \n-        block.append(new ForLoop()\n+        BytecodeNode forLoop = new ForLoop()\n                 .initialize(new BytecodeBlock().putVariable(positionVariable, 0))\n                 .condition(new BytecodeBlock()\n                         .getVariable(positionVariable)\n                         .getVariable(rowsVariable)\n                         .invokeStatic(CompilerOperations.class, \"lessThan\", boolean.class, int.class, int.class))\n                 .update(new BytecodeBlock().incrementVariable(positionVariable, (byte) 1))\n-                .body(loopBody));\n+                .body(loopBody);\n+\n+        for (int i = 0; i < parameterVariables.size(); i++) {\n+            if (!nullable.get(i)) {\n+                Variable variableDefinition = parameterVariables.get(i);\n+                forLoop = new IfStatement(\"if(!(%s instanceof RunLengthEncodedBlock && %s.isNull(0)))\", variableDefinition.getName(), variableDefinition.getName())\n+                        .condition(and(\n+                                variableDefinition.instanceOf(RunLengthEncodedBlock.class),\n+                                variableDefinition.invoke(\"isNull\", boolean.class, constantInt(0))))\n+                        .ifFalse(forLoop);\n+            }\n+        }\n+\n+        block.append(new IfStatement(\"if(%s > 0)\", rowsVariable.getName())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3MDk3NA=="}, "originalCommit": {"oid": "8957d8603c015528bfa95a9f7dedd347fbade048"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3048, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}