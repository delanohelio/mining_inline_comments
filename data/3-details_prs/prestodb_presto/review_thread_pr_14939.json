{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU5NzkyMDA0", "number": 14939, "reviewThreads": {"totalCount": 31, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQwMzo1NjoyOFrOEUQOtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNTo0MTowN1rOEfQfvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NjcyODg2OnYy", "diffSide": "RIGHT", "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/HiveWarningCode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQwMzo1NjoyOFrOG6bTEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQwMzo1NjoyOFrOG6bTEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkxNzg0Mw==", "bodyText": "Just use 1. Check HiveErrorCode", "url": "https://github.com/prestodb/presto/pull/14939#discussion_r463917843", "createdAt": "2020-08-01T03:56:28Z", "author": {"login": "highker"}, "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/HiveWarningCode.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.spi.WarningCode;\n+import com.facebook.presto.spi.WarningCodeSupplier;\n+\n+public enum HiveWarningCode\n+        implements WarningCodeSupplier\n+{\n+    PARTITION_NOT_READABLE(0x0000_0001),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96d5dd724669854734d021d58c9bdcaf779424e9"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NjcyOTUxOnYy", "diffSide": "RIGHT", "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/HiveWarningCode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQwMzo1NzoxMFrOG6bTXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQwMzo1NzoxMFrOG6bTXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkxNzkxOQ==", "bodyText": "break lines between these constants with different modifier", "url": "https://github.com/prestodb/presto/pull/14939#discussion_r463917919", "createdAt": "2020-08-01T03:57:10Z", "author": {"login": "highker"}, "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/HiveWarningCode.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.spi.WarningCode;\n+import com.facebook.presto.spi.WarningCodeSupplier;\n+\n+public enum HiveWarningCode\n+        implements WarningCodeSupplier\n+{\n+    PARTITION_NOT_READABLE(0x0000_0001),\n+    /**/;\n+    private final WarningCode warningCode;\n+    public static final int WARNING_CODE_MASK = 0x0100_1000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96d5dd724669854734d021d58c9bdcaf779424e9"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NjcyOTkzOnYy", "diffSide": "RIGHT", "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/HiveWarningCode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQwMzo1ODoyMVrOG6bTlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQwMzo1ODoyMVrOG6bTlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkxNzk3Mw==", "bodyText": "Use 0x0100_0000 as the starting offset", "url": "https://github.com/prestodb/presto/pull/14939#discussion_r463917973", "createdAt": "2020-08-01T03:58:21Z", "author": {"login": "highker"}, "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/HiveWarningCode.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.spi.WarningCode;\n+import com.facebook.presto.spi.WarningCodeSupplier;\n+\n+public enum HiveWarningCode\n+        implements WarningCodeSupplier\n+{\n+    PARTITION_NOT_READABLE(0x0000_0001),\n+    /**/;\n+    private final WarningCode warningCode;\n+    public static final int WARNING_CODE_MASK = 0x0100_1000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96d5dd724669854734d021d58c9bdcaf779424e9"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NjczMDMwOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQwMzo1ODo1NlrOG6bTwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQwMzo1ODo1NlrOG6bTwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkxODAxNw==", "bodyText": "one param per line with the first line without any param", "url": "https://github.com/prestodb/presto/pull/14939#discussion_r463918017", "createdAt": "2020-08-01T03:58:56Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitManager.java", "diffHunk": "@@ -223,7 +225,8 @@ public ConnectorSplitSource getSplits(\n         // sort partitions\n         partitions = Ordering.natural().onResultOf(HivePartition::getPartitionId).reverse().sortedCopy(partitions);\n \n-        Iterable<HivePartitionMetadata> hivePartitions = getPartitionMetadata(metastore, table, tableName, partitions, bucketHandle, session, layout.getRequestedColumns());\n+        Iterable<HivePartitionMetadata> hivePartitions = getPartitionMetadata(metastore, table, tableName, partitions, bucketHandle,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96d5dd724669854734d021d58c9bdcaf779424e9"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NjczMjIyOnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/com/facebook/presto/spi/connector/ConnectorSplitManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQwNDowMTozNlrOG6bUlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQwNDowMTozNlrOG6bUlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkxODIyOQ==", "bodyText": "Just move WarningCollector to spi and tunnel it here.", "url": "https://github.com/prestodb/presto/pull/14939#discussion_r463918229", "createdAt": "2020-08-01T04:01:36Z", "author": {"login": "highker"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/connector/ConnectorSplitManager.java", "diffHunk": "@@ -47,10 +51,11 @@ ConnectorSplitSource getSplits(\n          * splits without any performance loss.  Non-remotely accessible splits always\n          * need to provide host addresses.\n          */\n-        public SplitSchedulingContext(SplitSchedulingStrategy splitSchedulingStrategy, boolean schedulerUsesHostAddresses)\n+        public SplitSchedulingContext(SplitSchedulingStrategy splitSchedulingStrategy, boolean schedulerUsesHostAddresses, List<PrestoWarning> warnings)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96d5dd724669854734d021d58c9bdcaf779424e9"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NjczMzIxOnYy", "diffSide": "RIGHT", "path": "presto-raptor/src/test/java/com/facebook/presto/raptor/metadata/TestRaptorSplitManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQwNDowMzowNVrOG6bVCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQwNDowMzowNVrOG6bVCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkxODM0NA==", "bodyText": "We don't usually use list to denote a collector. We use explicit collectors. Objects in our codebase are mostly immutable whenever necessary.", "url": "https://github.com/prestodb/presto/pull/14939#discussion_r463918344", "createdAt": "2020-08-01T04:03:05Z", "author": {"login": "highker"}, "path": "presto-raptor/src/test/java/com/facebook/presto/raptor/metadata/TestRaptorSplitManager.java", "diffHunk": "@@ -215,7 +217,8 @@ private void deleteShardNodes()\n     private static ConnectorSplitSource getSplits(RaptorSplitManager splitManager, ConnectorTableLayoutResult layout)\n     {\n         ConnectorTransactionHandle transaction = new RaptorTransactionHandle();\n-        return splitManager.getSplits(transaction, SESSION, layout.getTableLayout().getHandle(), new SplitSchedulingContext(UNGROUPED_SCHEDULING, true));\n+        List<PrestoWarning> warningList = new ArrayList<PrestoWarning>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96d5dd724669854734d021d58c9bdcaf779424e9"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MzA5OTI5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/split/SplitSourceProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxOTo1MjowMVrOHCjkPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxOTo1MjowMVrOHCjkPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ0MTkxNw==", "bodyText": "This doesn't seem to be used anywhere?", "url": "https://github.com/prestodb/presto/pull/14939#discussion_r472441917", "createdAt": "2020-08-18T19:52:01Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/split/SplitSourceProvider.java", "diffHunk": "@@ -15,9 +15,15 @@\n \n import com.facebook.presto.Session;\n import com.facebook.presto.spi.TableHandle;\n+import com.facebook.presto.spi.WarningCollector;\n import com.facebook.presto.spi.connector.ConnectorSplitManager.SplitSchedulingStrategy;\n \n public interface SplitSourceProvider\n {\n     SplitSource getSplits(Session session, TableHandle tableHandle, SplitSchedulingStrategy splitSchedulingStrategy);\n+\n+    default SplitSource getSplits(Session session, WarningCollector warningCollector, TableHandle tableHandle, SplitSchedulingStrategy splitSchedulingStrategy)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "616565945a1a97fc4886bb50136f6b0aa0a1276b"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MzEzNDU2OnYy", "diffSide": "LEFT", "path": "presto-main/src/test/java/com/facebook/presto/sql/planner/iterative/rule/test/PlanBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMDowMjozOVrOHCj6NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMDowMjozOVrOHCj6NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ0NzU0MQ==", "bodyText": "I see a lot of unrelated changes in this PR. We need to leave them untouched. Given there are too many of them, we could either create a new PR or clean up this one. Feel free to pick whichever one is easier. Given the WarningCollector move will cause a lot of file changes, also feel free to do it first (either a new PR or a new commit in a PR). Then, we can follow with the actual change.", "url": "https://github.com/prestodb/presto/pull/14939#discussion_r472447541", "createdAt": "2020-08-18T20:02:39Z", "author": {"login": "highker"}, "path": "presto-main/src/test/java/com/facebook/presto/sql/planner/iterative/rule/test/PlanBuilder.java", "diffHunk": "@@ -302,147 +306,6 @@ public CallExpression comparison(OperatorType operatorType, RowExpression left,\n         return call(operatorType.getOperator(), functionHandle, left.getType(), left, right);\n     }\n \n-    public class AggregationBuilder\n-    {\n-        private final TypeProvider types;\n-        private PlanNode source;\n-        private Map<VariableReferenceExpression, Aggregation> assignments = new HashMap<>();\n-        private AggregationNode.GroupingSetDescriptor groupingSets;\n-        private List<VariableReferenceExpression> preGroupedVariables = new ArrayList<>();\n-        private Step step = Step.SINGLE;\n-        private Optional<VariableReferenceExpression> hashVariable = Optional.empty();\n-        private Optional<VariableReferenceExpression> groupIdVariable = Optional.empty();\n-        private Session session = testSessionBuilder().build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "616565945a1a97fc4886bb50136f6b0aa0a1276b"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MDM5Nzc0OnYy", "diffSide": "LEFT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSessionProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QwNDo1MDoxNVrOHFKFTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QwNDo1MDoxNVrOHFKFTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE3MDEyNw==", "bodyText": "Keep the original code", "url": "https://github.com/prestodb/presto/pull/14939#discussion_r475170127", "createdAt": "2020-08-23T04:50:15Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSessionProperties.java", "diffHunk": "@@ -102,10 +102,11 @@\n     public static final String OFFLINE_DATA_DEBUG_MODE_ENABLED = \"offline_data_debug_mode_enabled\";\n     public static final String FAIL_FAST_ON_INSERT_INTO_IMMUTABLE_PARTITIONS_ENABLED = \"fail_fast_on_insert_into_immutable_partitions_enabled\";\n     public static final String USE_LIST_DIRECTORY_CACHE = \"use_list_directory_cache\";\n+    public static final String PARQUET_DEREFERENCE_PUSHDOWN_ENABLED = \"parquet_dereference_pushdown_enabled\";\n     private static final String PARQUET_BATCH_READ_OPTIMIZATION_ENABLED = \"parquet_batch_read_optimization_enabled\";\n     private static final String PARQUET_BATCH_READER_VERIFICATION_ENABLED = \"parquet_batch_reader_verification_enabled\";\n     private static final String BUCKET_FUNCTION_TYPE_FOR_EXCHANGE = \"bucket_function_type_for_exchange\";\n-    public static final String PARQUET_DEREFERENCE_PUSHDOWN_ENABLED = \"parquet_dereference_pushdown_enabled\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b45e2e229c4249da2ab9a5b8fbdd2f78325af17a"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MDM5ODQwOnYy", "diffSide": "LEFT", "path": "presto-raptor/src/test/java/com/facebook/presto/raptor/metadata/TestRaptorSplitManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QwNDo1MTozMlrOHFKFlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QwNDo1MTozMlrOHFKFlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE3MDE5OA==", "bodyText": "Leave the original code as is", "url": "https://github.com/prestodb/presto/pull/14939#discussion_r475170198", "createdAt": "2020-08-23T04:51:32Z", "author": {"login": "highker"}, "path": "presto-raptor/src/test/java/com/facebook/presto/raptor/metadata/TestRaptorSplitManager.java", "diffHunk": "@@ -211,15 +223,4 @@ private void deleteShardNodes()\n         dummyHandle.execute(\"DELETE FROM shard_nodes\");\n         dummyHandle.execute(format(\"UPDATE %s SET node_ids = ''\", shardIndexTable(tableId)));\n     }\n-\n-    private static ConnectorSplitSource getSplits(RaptorSplitManager splitManager, ConnectorTableLayoutResult layout)\n-    {\n-        ConnectorTransactionHandle transaction = new RaptorTransactionHandle();\n-        return splitManager.getSplits(transaction, SESSION, layout.getTableLayout().getHandle(), new SplitSchedulingContext(UNGROUPED_SCHEDULING, true));\n-    }\n-\n-    private static List<ConnectorSplit> getSplits(ConnectorSplitSource source, int maxSize)\n-    {\n-        return getFutureValue(source.getNextBatch(NOT_PARTITIONED, maxSize)).getSplits();\n-    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b45e2e229c4249da2ab9a5b8fbdd2f78325af17a"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MDM5OTg1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/split/SplitManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QwNDo1NDowM1rOHFKGOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QwNDo1NDowM1rOHFKGOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE3MDM2Mg==", "bodyText": "The method is not used anywhere\nWe should merge this function with the above one", "url": "https://github.com/prestodb/presto/pull/14939#discussion_r475170362", "createdAt": "2020-08-23T04:54:03Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/split/SplitManager.java", "diffHunk": "@@ -88,7 +89,36 @@ public SplitSource getSplits(Session session, TableHandle table, SplitScheduling\n                 table.getTransaction(),\n                 connectorSession,\n                 layout,\n-                new SplitSchedulingContext(splitSchedulingStrategy, preferSplitHostAddresses));\n+                new SplitSchedulingContext(splitSchedulingStrategy, preferSplitHostAddresses, WarningCollector.NOOP));\n+        SplitSource splitSource = new ConnectorAwareSplitSource(connectorId, table.getTransaction(), source);\n+        if (minScheduleSplitBatchSize > 1) {\n+            splitSource = new BufferingSplitSource(splitSource, minScheduleSplitBatchSize);\n+        }\n+        return splitSource;\n+    }\n+\n+    public SplitSource getSplits(Session session, WarningCollector warningCollector, TableHandle table, SplitSchedulingStrategy splitSchedulingStrategy)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b45e2e229c4249da2ab9a5b8fbdd2f78325af17a"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MDQwMTIzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/split/SplitSourceProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QwNDo1NTo0N1rOHFKG1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QwNDo1NTo0N1rOHFKG1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE3MDUxOQ==", "bodyText": "This ignores the warningCollector, doesn't it?\nWe need to combine these two interfaces into one. Put warningCollector as the last param", "url": "https://github.com/prestodb/presto/pull/14939#discussion_r475170519", "createdAt": "2020-08-23T04:55:47Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/split/SplitSourceProvider.java", "diffHunk": "@@ -15,9 +15,15 @@\n \n import com.facebook.presto.Session;\n import com.facebook.presto.spi.TableHandle;\n+import com.facebook.presto.spi.WarningCollector;\n import com.facebook.presto.spi.connector.ConnectorSplitManager.SplitSchedulingStrategy;\n \n public interface SplitSourceProvider\n {\n     SplitSource getSplits(Session session, TableHandle tableHandle, SplitSchedulingStrategy splitSchedulingStrategy);\n+\n+    default SplitSource getSplits(Session session, WarningCollector warningCollector, TableHandle tableHandle, SplitSchedulingStrategy splitSchedulingStrategy)\n+    {\n+        return this.getSplits(session, tableHandle, splitSchedulingStrategy);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b45e2e229c4249da2ab9a5b8fbdd2f78325af17a"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTkxMjY5OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNjozMTowOFrOHFWQSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNjozMTowOFrOHFWQSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM2OTU0NQ==", "bodyText": "move the first param to it's own line\nstatic import PARTITION_NOT_READABLE\nCan we add a unit test for this path?", "url": "https://github.com/prestodb/presto/pull/14939#discussion_r475369545", "createdAt": "2020-08-24T06:31:08Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitManager.java", "diffHunk": "@@ -369,7 +381,12 @@ public CounterStat getHighMemorySplitSource()\n                     // verify partition is not marked as non-readable\n                     String partitionNotReadable = partition.getParameters().get(OBJECT_NOT_READABLE);\n                     if (!isNullOrEmpty(partitionNotReadable)) {\n-                        throw new HiveNotReadableException(tableName, Optional.of(partName), partitionNotReadable);\n+                        if (!shouldIgnoreUnreadablePartition(session)) {\n+                            throw new HiveNotReadableException(tableName, Optional.of(partName), partitionNotReadable);\n+                        }\n+                        warningCollector.add(new PrestoWarning(HiveWarningCode.PARTITION_NOT_READABLE,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "853fab7b0db2aacfe94954c1019260d76082f7a2"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTkxMzYzOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNjozMTozMlrOHFWQ2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNjozMTozMlrOHFWQ2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM2OTY5MQ==", "bodyText": "just partName. Optional.of(partName).get() === partName", "url": "https://github.com/prestodb/presto/pull/14939#discussion_r475369691", "createdAt": "2020-08-24T06:31:32Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitManager.java", "diffHunk": "@@ -369,7 +381,12 @@ public CounterStat getHighMemorySplitSource()\n                     // verify partition is not marked as non-readable\n                     String partitionNotReadable = partition.getParameters().get(OBJECT_NOT_READABLE);\n                     if (!isNullOrEmpty(partitionNotReadable)) {\n-                        throw new HiveNotReadableException(tableName, Optional.of(partName), partitionNotReadable);\n+                        if (!shouldIgnoreUnreadablePartition(session)) {\n+                            throw new HiveNotReadableException(tableName, Optional.of(partName), partitionNotReadable);\n+                        }\n+                        warningCollector.add(new PrestoWarning(HiveWarningCode.PARTITION_NOT_READABLE,\n+                                format(\"Table '%s' partition '%s' is not readable: %s\", tableName, Optional.of(partName).get(), partitionNotReadable)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "853fab7b0db2aacfe94954c1019260d76082f7a2"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjM5NTU4OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNTo1NjowM1rOHG85HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNTo1NjowM1rOHG85HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA1MTE2NQ==", "bodyText": "warningCollector.add(new PrestoWarning(\n                                PARTITION_NOT_READABLE,\n                                format(\"Table '%s' partition '%s' is not readable: %s\", tableName, partName, partitionNotReadable)));", "url": "https://github.com/prestodb/presto/pull/14939#discussion_r477051165", "createdAt": "2020-08-26T05:56:03Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitManager.java", "diffHunk": "@@ -369,7 +382,13 @@ public CounterStat getHighMemorySplitSource()\n                     // verify partition is not marked as non-readable\n                     String partitionNotReadable = partition.getParameters().get(OBJECT_NOT_READABLE);\n                     if (!isNullOrEmpty(partitionNotReadable)) {\n-                        throw new HiveNotReadableException(tableName, Optional.of(partName), partitionNotReadable);\n+                        if (!shouldIgnoreUnreadablePartition(session)) {\n+                            throw new HiveNotReadableException(tableName, Optional.of(partName), partitionNotReadable);\n+                        }\n+                        warningCollector.add(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d2bd6376c21f6391e768678417a435ecdba933e"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjQyMTc0OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjowNzo0OFrOHG9I6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjowNzo0OFrOHG9I6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA1NTIwOQ==", "bodyText": "Map<.., ..>", "url": "https://github.com/prestodb/presto/pull/14939#discussion_r477055209", "createdAt": "2020-08-26T06:07:48Z", "author": {"login": "highker"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java", "diffHunk": "@@ -66,4 +105,117 @@ public void testTransactionDeleteInsert()\n     {\n         // FileHiveMetastore has various incompatibilities\n     }\n+\n+    @Test\n+    public void testPartitionNotReadable()\n+            throws Exception\n+    {\n+        SchemaTableName tableName = temporaryTable(tempTable);\n+        ImmutableMap dynamicPartitionParameters = ImmutableMap.of(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d89a1dda42622a914ce9450488eac7b046685926"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMDc5OTg1OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwNjozNzo1OFrOHJsOGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwNjozNzo1OFrOHJsOGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkyMzczNg==", "bodyText": "inline this const", "url": "https://github.com/prestodb/presto/pull/14939#discussion_r479923736", "createdAt": "2020-08-31T06:37:58Z", "author": {"login": "highker"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java", "diffHunk": "@@ -13,17 +13,56 @@\n  */\n package com.facebook.presto.hive;\n \n+import com.facebook.presto.execution.warnings.DefaultWarningCollector;\n+import com.facebook.presto.execution.warnings.WarningCollectorConfig;\n+import com.facebook.presto.execution.warnings.WarningHandlingLevel;\n import com.facebook.presto.hive.authentication.NoHdfsAuthentication;\n import com.facebook.presto.hive.metastore.ExtendedHiveMetastore;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.PartitionStatistics;\n+import com.facebook.presto.hive.metastore.PartitionWithStatistics;\n+import com.facebook.presto.hive.metastore.Table;\n import com.facebook.presto.hive.metastore.file.FileHiveMetastore;\n+import com.facebook.presto.spi.ColumnHandle;\n+import com.facebook.presto.spi.ColumnMetadata;\n+import com.facebook.presto.spi.ConnectorSession;\n+import com.facebook.presto.spi.ConnectorTableHandle;\n+import com.facebook.presto.spi.ConnectorTableLayout;\n+import com.facebook.presto.spi.Constraint;\n+import com.facebook.presto.spi.SchemaTableName;\n+import com.facebook.presto.spi.TableNotFoundException;\n+import com.facebook.presto.spi.connector.ConnectorMetadata;\n+import com.facebook.presto.spi.connector.ConnectorSplitManager;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n import com.google.common.collect.ImmutableSet;\n import org.testng.SkipException;\n+import org.testng.annotations.Test;\n \n import java.io.File;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.hive.HiveMetadata.PRESTO_VERSION_NAME;\n+import static com.facebook.presto.hive.HiveStorageFormat.ORC;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.PRESTO_QUERY_ID_NAME;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.toPartitionValues;\n+import static com.facebook.presto.hive.metastore.StorageFormat.fromHiveStorageFormat;\n+import static com.facebook.presto.spi.connector.ConnectorSplitManager.SplitSchedulingStrategy.UNGROUPED_SCHEDULING;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static org.apache.hadoop.hive.common.FileUtils.makePartName;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotNull;\n+import static org.testng.Assert.fail;\n \n public class TestHiveClientFileMetastore\n         extends AbstractTestHiveClientLocal\n {\n+    private final String tempTable = \"tempTable\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d89a1dda42622a914ce9450488eac7b046685926"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMDgwMTQ0OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwNjozODozOFrOHJsPEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwNjozODozOFrOHJsPEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkyMzk4Ng==", "bodyText": "One param per line and leave the first line empty\nstatic import SplitSchedulingContext", "url": "https://github.com/prestodb/presto/pull/14939#discussion_r479923986", "createdAt": "2020-08-31T06:38:38Z", "author": {"login": "highker"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java", "diffHunk": "@@ -13,17 +13,56 @@\n  */\n package com.facebook.presto.hive;\n \n+import com.facebook.presto.execution.warnings.DefaultWarningCollector;\n+import com.facebook.presto.execution.warnings.WarningCollectorConfig;\n+import com.facebook.presto.execution.warnings.WarningHandlingLevel;\n import com.facebook.presto.hive.authentication.NoHdfsAuthentication;\n import com.facebook.presto.hive.metastore.ExtendedHiveMetastore;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.PartitionStatistics;\n+import com.facebook.presto.hive.metastore.PartitionWithStatistics;\n+import com.facebook.presto.hive.metastore.Table;\n import com.facebook.presto.hive.metastore.file.FileHiveMetastore;\n+import com.facebook.presto.spi.ColumnHandle;\n+import com.facebook.presto.spi.ColumnMetadata;\n+import com.facebook.presto.spi.ConnectorSession;\n+import com.facebook.presto.spi.ConnectorTableHandle;\n+import com.facebook.presto.spi.ConnectorTableLayout;\n+import com.facebook.presto.spi.Constraint;\n+import com.facebook.presto.spi.SchemaTableName;\n+import com.facebook.presto.spi.TableNotFoundException;\n+import com.facebook.presto.spi.connector.ConnectorMetadata;\n+import com.facebook.presto.spi.connector.ConnectorSplitManager;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n import com.google.common.collect.ImmutableSet;\n import org.testng.SkipException;\n+import org.testng.annotations.Test;\n \n import java.io.File;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.hive.HiveMetadata.PRESTO_VERSION_NAME;\n+import static com.facebook.presto.hive.HiveStorageFormat.ORC;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.PRESTO_QUERY_ID_NAME;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.toPartitionValues;\n+import static com.facebook.presto.hive.metastore.StorageFormat.fromHiveStorageFormat;\n+import static com.facebook.presto.spi.connector.ConnectorSplitManager.SplitSchedulingStrategy.UNGROUPED_SCHEDULING;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static org.apache.hadoop.hive.common.FileUtils.makePartName;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotNull;\n+import static org.testng.Assert.fail;\n \n public class TestHiveClientFileMetastore\n         extends AbstractTestHiveClientLocal\n {\n+    private final String tempTable = \"tempTable\";\n+    public static final ConnectorSplitManager.SplitSchedulingContext SPLIT_SCHEDULING_CONTEXT = new ConnectorSplitManager.SplitSchedulingContext(UNGROUPED_SCHEDULING,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d89a1dda42622a914ce9450488eac7b046685926"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMDgwNjYwOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwNjo0MDoyOFrOHJsR6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwNjo0MDoyOFrOHJsR6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkyNDcxNA==", "bodyText": "add a catch here and fail the test", "url": "https://github.com/prestodb/presto/pull/14939#discussion_r479924714", "createdAt": "2020-08-31T06:40:28Z", "author": {"login": "highker"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java", "diffHunk": "@@ -66,4 +105,117 @@ public void testTransactionDeleteInsert()\n     {\n         // FileHiveMetastore has various incompatibilities\n     }\n+\n+    @Test\n+    public void testPartitionNotReadable()\n+            throws Exception\n+    {\n+        SchemaTableName tableName = temporaryTable(tempTable);\n+        ImmutableMap dynamicPartitionParameters = ImmutableMap.of(\n+                HiveSplitManager.OBJECT_NOT_READABLE, \"Testing Unreadable Partition\");\n+        try {\n+            createDummyPartitionedTable(tableName, STATISTICS_PARTITIONED_TABLE_COLUMNS, dynamicPartitionParameters);\n+\n+            try (Transaction transaction = newTransaction()) {\n+                ConnectorMetadata metadata = transaction.getMetadata();\n+                ConnectorSession session = newSession();\n+\n+                ConnectorTableHandle tableHandle = getTableHandle(metadata, tableName);\n+                assertNotNull(tableHandle);\n+\n+                ColumnHandle dsColumn = metadata.getColumnHandles(session, tableHandle).get(\"ds\");\n+                assertNotNull(dsColumn);\n+\n+                ConnectorTableLayout tableLayout = getTableLayout(session, metadata, tableHandle, Constraint.alwaysTrue(), transaction);\n+                try {\n+                    getSplitCount(splitManager.getSplits(transaction.getTransactionHandle(), session, tableLayout.getHandle(), SPLIT_SCHEDULING_CONTEXT));\n+                    fail(\"Expected HiveNotReadableException\");\n+                }\n+                catch (HiveNotReadableException e) {\n+                    assertEquals(e.getTableName(), tableName);\n+                    assertNotNull(SPLIT_SCHEDULING_CONTEXT.getWarningCollector());\n+                    assertEquals(SPLIT_SCHEDULING_CONTEXT.getWarningCollector().getWarnings().size(), 0);\n+                }\n+            }\n+\n+            try (Transaction transaction = newTransaction()) {\n+                ConnectorMetadata metadata = transaction.getMetadata();\n+                ConnectorSession session = newSession(ImmutableMap.of(HiveSessionProperties.IGNORE_UNREADABLE_PARTITION, true));\n+\n+                ConnectorTableHandle tableHandle = getTableHandle(metadata, tableName);\n+                assertNotNull(tableHandle);\n+\n+                ColumnHandle dsColumn = metadata.getColumnHandles(session, tableHandle).get(\"ds\");\n+                assertNotNull(dsColumn);\n+\n+                ConnectorTableLayout tableLayout = getTableLayout(session, metadata, tableHandle, Constraint.alwaysTrue(), transaction);\n+                splitManager.getSplits(transaction.getTransactionHandle(), session, tableLayout.getHandle(), SPLIT_SCHEDULING_CONTEXT);\n+                assertNotNull(SPLIT_SCHEDULING_CONTEXT.getWarningCollector());\n+                assertEquals(SPLIT_SCHEDULING_CONTEXT.getWarningCollector().getWarnings().size(), 1);\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d89a1dda42622a914ce9450488eac7b046685926"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMDgwODEzOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwNjo0MTowMVrOHJsS3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwNjo0MTowMVrOHJsS3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkyNDk1Ng==", "bodyText": "static import OBJECT_NOT_READABLE\nmove this together with the previous line", "url": "https://github.com/prestodb/presto/pull/14939#discussion_r479924956", "createdAt": "2020-08-31T06:41:01Z", "author": {"login": "highker"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java", "diffHunk": "@@ -66,4 +105,117 @@ public void testTransactionDeleteInsert()\n     {\n         // FileHiveMetastore has various incompatibilities\n     }\n+\n+    @Test\n+    public void testPartitionNotReadable()\n+            throws Exception\n+    {\n+        SchemaTableName tableName = temporaryTable(tempTable);\n+        ImmutableMap dynamicPartitionParameters = ImmutableMap.of(\n+                HiveSplitManager.OBJECT_NOT_READABLE, \"Testing Unreadable Partition\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d89a1dda42622a914ce9450488eac7b046685926"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMDgwOTM4OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwNjo0MTozMlrOHJsTpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwNjo0MTozMlrOHJsTpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkyNTE1OA==", "bodyText": "private; same for the ones below.", "url": "https://github.com/prestodb/presto/pull/14939#discussion_r479925158", "createdAt": "2020-08-31T06:41:32Z", "author": {"login": "highker"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java", "diffHunk": "@@ -66,4 +105,117 @@ public void testTransactionDeleteInsert()\n     {\n         // FileHiveMetastore has various incompatibilities\n     }\n+\n+    @Test\n+    public void testPartitionNotReadable()\n+            throws Exception\n+    {\n+        SchemaTableName tableName = temporaryTable(tempTable);\n+        ImmutableMap dynamicPartitionParameters = ImmutableMap.of(\n+                HiveSplitManager.OBJECT_NOT_READABLE, \"Testing Unreadable Partition\");\n+        try {\n+            createDummyPartitionedTable(tableName, STATISTICS_PARTITIONED_TABLE_COLUMNS, dynamicPartitionParameters);\n+\n+            try (Transaction transaction = newTransaction()) {\n+                ConnectorMetadata metadata = transaction.getMetadata();\n+                ConnectorSession session = newSession();\n+\n+                ConnectorTableHandle tableHandle = getTableHandle(metadata, tableName);\n+                assertNotNull(tableHandle);\n+\n+                ColumnHandle dsColumn = metadata.getColumnHandles(session, tableHandle).get(\"ds\");\n+                assertNotNull(dsColumn);\n+\n+                ConnectorTableLayout tableLayout = getTableLayout(session, metadata, tableHandle, Constraint.alwaysTrue(), transaction);\n+                try {\n+                    getSplitCount(splitManager.getSplits(transaction.getTransactionHandle(), session, tableLayout.getHandle(), SPLIT_SCHEDULING_CONTEXT));\n+                    fail(\"Expected HiveNotReadableException\");\n+                }\n+                catch (HiveNotReadableException e) {\n+                    assertEquals(e.getTableName(), tableName);\n+                    assertNotNull(SPLIT_SCHEDULING_CONTEXT.getWarningCollector());\n+                    assertEquals(SPLIT_SCHEDULING_CONTEXT.getWarningCollector().getWarnings().size(), 0);\n+                }\n+            }\n+\n+            try (Transaction transaction = newTransaction()) {\n+                ConnectorMetadata metadata = transaction.getMetadata();\n+                ConnectorSession session = newSession(ImmutableMap.of(HiveSessionProperties.IGNORE_UNREADABLE_PARTITION, true));\n+\n+                ConnectorTableHandle tableHandle = getTableHandle(metadata, tableName);\n+                assertNotNull(tableHandle);\n+\n+                ColumnHandle dsColumn = metadata.getColumnHandles(session, tableHandle).get(\"ds\");\n+                assertNotNull(dsColumn);\n+\n+                ConnectorTableLayout tableLayout = getTableLayout(session, metadata, tableHandle, Constraint.alwaysTrue(), transaction);\n+                splitManager.getSplits(transaction.getTransactionHandle(), session, tableLayout.getHandle(), SPLIT_SCHEDULING_CONTEXT);\n+                assertNotNull(SPLIT_SCHEDULING_CONTEXT.getWarningCollector());\n+                assertEquals(SPLIT_SCHEDULING_CONTEXT.getWarningCollector().getWarnings().size(), 1);\n+            }\n+        }\n+        finally {\n+            dropTable(tableName);\n+        }\n+    }\n+\n+    protected void createDummyPartitionedTable(SchemaTableName tableName, List<ColumnMetadata> columns, ImmutableMap dynamicPartitionParameters)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d89a1dda42622a914ce9450488eac7b046685926"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMDgxMTM3OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwNjo0MjoxNlrOHJsU1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwNjo0MjoxNlrOHJsU1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkyNTQ2Mw==", "bodyText": "typo Reable", "url": "https://github.com/prestodb/presto/pull/14939#discussion_r479925463", "createdAt": "2020-08-31T06:42:16Z", "author": {"login": "highker"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java", "diffHunk": "@@ -66,4 +105,117 @@ public void testTransactionDeleteInsert()\n     {\n         // FileHiveMetastore has various incompatibilities\n     }\n+\n+    @Test\n+    public void testPartitionNotReadable()\n+            throws Exception\n+    {\n+        SchemaTableName tableName = temporaryTable(tempTable);\n+        ImmutableMap dynamicPartitionParameters = ImmutableMap.of(\n+                HiveSplitManager.OBJECT_NOT_READABLE, \"Testing Unreadable Partition\");\n+        try {\n+            createDummyPartitionedTable(tableName, STATISTICS_PARTITIONED_TABLE_COLUMNS, dynamicPartitionParameters);\n+\n+            try (Transaction transaction = newTransaction()) {\n+                ConnectorMetadata metadata = transaction.getMetadata();\n+                ConnectorSession session = newSession();\n+\n+                ConnectorTableHandle tableHandle = getTableHandle(metadata, tableName);\n+                assertNotNull(tableHandle);\n+\n+                ColumnHandle dsColumn = metadata.getColumnHandles(session, tableHandle).get(\"ds\");\n+                assertNotNull(dsColumn);\n+\n+                ConnectorTableLayout tableLayout = getTableLayout(session, metadata, tableHandle, Constraint.alwaysTrue(), transaction);\n+                try {\n+                    getSplitCount(splitManager.getSplits(transaction.getTransactionHandle(), session, tableLayout.getHandle(), SPLIT_SCHEDULING_CONTEXT));\n+                    fail(\"Expected HiveNotReadableException\");\n+                }\n+                catch (HiveNotReadableException e) {\n+                    assertEquals(e.getTableName(), tableName);\n+                    assertNotNull(SPLIT_SCHEDULING_CONTEXT.getWarningCollector());\n+                    assertEquals(SPLIT_SCHEDULING_CONTEXT.getWarningCollector().getWarnings().size(), 0);\n+                }\n+            }\n+\n+            try (Transaction transaction = newTransaction()) {\n+                ConnectorMetadata metadata = transaction.getMetadata();\n+                ConnectorSession session = newSession(ImmutableMap.of(HiveSessionProperties.IGNORE_UNREADABLE_PARTITION, true));\n+\n+                ConnectorTableHandle tableHandle = getTableHandle(metadata, tableName);\n+                assertNotNull(tableHandle);\n+\n+                ColumnHandle dsColumn = metadata.getColumnHandles(session, tableHandle).get(\"ds\");\n+                assertNotNull(dsColumn);\n+\n+                ConnectorTableLayout tableLayout = getTableLayout(session, metadata, tableHandle, Constraint.alwaysTrue(), transaction);\n+                splitManager.getSplits(transaction.getTransactionHandle(), session, tableLayout.getHandle(), SPLIT_SCHEDULING_CONTEXT);\n+                assertNotNull(SPLIT_SCHEDULING_CONTEXT.getWarningCollector());\n+                assertEquals(SPLIT_SCHEDULING_CONTEXT.getWarningCollector().getWarnings().size(), 1);\n+            }\n+        }\n+        finally {\n+            dropTable(tableName);\n+        }\n+    }\n+\n+    protected void createDummyPartitionedTable(SchemaTableName tableName, List<ColumnMetadata> columns, ImmutableMap dynamicPartitionParameters)\n+            throws Exception\n+    {\n+        doCreateEmptyTable(tableName, ORC, columns);\n+\n+        ExtendedHiveMetastore metastoreClient = getMetastoreClient();\n+        Table table = metastoreClient.getTable(tableName.getSchemaName(), tableName.getTableName())\n+                .orElseThrow(() -> new TableNotFoundException(tableName));\n+\n+        List<String> firstPartitionValues = ImmutableList.of(\"2020-01-01\");\n+        List<String> secondPartitionValues = ImmutableList.of(\"2020-01-02\");\n+        List<String> thirdPartitionValues = ImmutableList.of(\"2020-01-03\");\n+\n+        String firstPartitionName = makePartName(ImmutableList.of(\"ds\"), firstPartitionValues);\n+        String secondPartitionName = makePartName(ImmutableList.of(\"ds\"), secondPartitionValues);\n+        String thirdPartitionName = makePartName(ImmutableList.of(\"ds\"), thirdPartitionValues);\n+\n+        List<PartitionWithStatistics> partitions = ImmutableList.of(firstPartitionName, secondPartitionName)\n+                .stream()\n+                .map(partitionName -> new PartitionWithStatistics(createDummyPartition(table, partitionName), partitionName, PartitionStatistics.empty()))\n+                .collect(toImmutableList());\n+        metastoreClient.addPartitions(tableName.getSchemaName(), tableName.getTableName(), partitions);\n+        metastoreClient.updatePartitionStatistics(tableName.getSchemaName(), tableName.getTableName(), firstPartitionName, currentStatistics -> EMPTY_TABLE_STATISTICS);\n+        metastoreClient.updatePartitionStatistics(tableName.getSchemaName(), tableName.getTableName(), secondPartitionName, currentStatistics -> EMPTY_TABLE_STATISTICS);\n+\n+        List<PartitionWithStatistics> partitionsNotReable = ImmutableList.of(thirdPartitionName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d89a1dda42622a914ce9450488eac7b046685926"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMDgxMjMzOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwNjo0Mjo0MlrOHJsVbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwNjo0Mjo0MlrOHJsVbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkyNTYxMg==", "bodyText": "Map<..., ..>", "url": "https://github.com/prestodb/presto/pull/14939#discussion_r479925612", "createdAt": "2020-08-31T06:42:42Z", "author": {"login": "highker"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java", "diffHunk": "@@ -66,4 +105,117 @@ public void testTransactionDeleteInsert()\n     {\n         // FileHiveMetastore has various incompatibilities\n     }\n+\n+    @Test\n+    public void testPartitionNotReadable()\n+            throws Exception\n+    {\n+        SchemaTableName tableName = temporaryTable(tempTable);\n+        ImmutableMap dynamicPartitionParameters = ImmutableMap.of(\n+                HiveSplitManager.OBJECT_NOT_READABLE, \"Testing Unreadable Partition\");\n+        try {\n+            createDummyPartitionedTable(tableName, STATISTICS_PARTITIONED_TABLE_COLUMNS, dynamicPartitionParameters);\n+\n+            try (Transaction transaction = newTransaction()) {\n+                ConnectorMetadata metadata = transaction.getMetadata();\n+                ConnectorSession session = newSession();\n+\n+                ConnectorTableHandle tableHandle = getTableHandle(metadata, tableName);\n+                assertNotNull(tableHandle);\n+\n+                ColumnHandle dsColumn = metadata.getColumnHandles(session, tableHandle).get(\"ds\");\n+                assertNotNull(dsColumn);\n+\n+                ConnectorTableLayout tableLayout = getTableLayout(session, metadata, tableHandle, Constraint.alwaysTrue(), transaction);\n+                try {\n+                    getSplitCount(splitManager.getSplits(transaction.getTransactionHandle(), session, tableLayout.getHandle(), SPLIT_SCHEDULING_CONTEXT));\n+                    fail(\"Expected HiveNotReadableException\");\n+                }\n+                catch (HiveNotReadableException e) {\n+                    assertEquals(e.getTableName(), tableName);\n+                    assertNotNull(SPLIT_SCHEDULING_CONTEXT.getWarningCollector());\n+                    assertEquals(SPLIT_SCHEDULING_CONTEXT.getWarningCollector().getWarnings().size(), 0);\n+                }\n+            }\n+\n+            try (Transaction transaction = newTransaction()) {\n+                ConnectorMetadata metadata = transaction.getMetadata();\n+                ConnectorSession session = newSession(ImmutableMap.of(HiveSessionProperties.IGNORE_UNREADABLE_PARTITION, true));\n+\n+                ConnectorTableHandle tableHandle = getTableHandle(metadata, tableName);\n+                assertNotNull(tableHandle);\n+\n+                ColumnHandle dsColumn = metadata.getColumnHandles(session, tableHandle).get(\"ds\");\n+                assertNotNull(dsColumn);\n+\n+                ConnectorTableLayout tableLayout = getTableLayout(session, metadata, tableHandle, Constraint.alwaysTrue(), transaction);\n+                splitManager.getSplits(transaction.getTransactionHandle(), session, tableLayout.getHandle(), SPLIT_SCHEDULING_CONTEXT);\n+                assertNotNull(SPLIT_SCHEDULING_CONTEXT.getWarningCollector());\n+                assertEquals(SPLIT_SCHEDULING_CONTEXT.getWarningCollector().getWarnings().size(), 1);\n+            }\n+        }\n+        finally {\n+            dropTable(tableName);\n+        }\n+    }\n+\n+    protected void createDummyPartitionedTable(SchemaTableName tableName, List<ColumnMetadata> columns, ImmutableMap dynamicPartitionParameters)\n+            throws Exception\n+    {\n+        doCreateEmptyTable(tableName, ORC, columns);\n+\n+        ExtendedHiveMetastore metastoreClient = getMetastoreClient();\n+        Table table = metastoreClient.getTable(tableName.getSchemaName(), tableName.getTableName())\n+                .orElseThrow(() -> new TableNotFoundException(tableName));\n+\n+        List<String> firstPartitionValues = ImmutableList.of(\"2020-01-01\");\n+        List<String> secondPartitionValues = ImmutableList.of(\"2020-01-02\");\n+        List<String> thirdPartitionValues = ImmutableList.of(\"2020-01-03\");\n+\n+        String firstPartitionName = makePartName(ImmutableList.of(\"ds\"), firstPartitionValues);\n+        String secondPartitionName = makePartName(ImmutableList.of(\"ds\"), secondPartitionValues);\n+        String thirdPartitionName = makePartName(ImmutableList.of(\"ds\"), thirdPartitionValues);\n+\n+        List<PartitionWithStatistics> partitions = ImmutableList.of(firstPartitionName, secondPartitionName)\n+                .stream()\n+                .map(partitionName -> new PartitionWithStatistics(createDummyPartition(table, partitionName), partitionName, PartitionStatistics.empty()))\n+                .collect(toImmutableList());\n+        metastoreClient.addPartitions(tableName.getSchemaName(), tableName.getTableName(), partitions);\n+        metastoreClient.updatePartitionStatistics(tableName.getSchemaName(), tableName.getTableName(), firstPartitionName, currentStatistics -> EMPTY_TABLE_STATISTICS);\n+        metastoreClient.updatePartitionStatistics(tableName.getSchemaName(), tableName.getTableName(), secondPartitionName, currentStatistics -> EMPTY_TABLE_STATISTICS);\n+\n+        List<PartitionWithStatistics> partitionsNotReable = ImmutableList.of(thirdPartitionName)\n+                .stream()\n+                .map(partitionName -> new PartitionWithStatistics(createDummyPartition(table, partitionName, dynamicPartitionParameters), partitionName, PartitionStatistics.empty()))\n+                .collect(toImmutableList());\n+        metastoreClient.addPartitions(tableName.getSchemaName(), tableName.getTableName(), partitionsNotReable);\n+        metastoreClient.updatePartitionStatistics(tableName.getSchemaName(), tableName.getTableName(), thirdPartitionName, currentStatistics -> EMPTY_TABLE_STATISTICS);\n+    }\n+\n+    protected Partition createDummyPartition(Table table, String partitionName, ImmutableMap dynamicPartitionParameters)\n+    {\n+        return createDummyPartition(table, partitionName, Optional.empty(), dynamicPartitionParameters);\n+    }\n+\n+    protected Partition createDummyPartition(Table table, String partitionName, Optional<HiveBucketProperty> bucketProperty, ImmutableMap dynamicPartitionParameters)\n+    {\n+        ImmutableMap staticPartitionParameters = ImmutableMap.of(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d89a1dda42622a914ce9450488eac7b046685926"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMjA5NjU5OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNTozODowMFrOHLalYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNTozODowMFrOHLalYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTczMTkzNw==", "bodyText": "Map<String, String>", "url": "https://github.com/prestodb/presto/pull/14939#discussion_r481731937", "createdAt": "2020-09-02T05:38:00Z", "author": {"login": "highker"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java", "diffHunk": "@@ -66,4 +106,119 @@ public void testTransactionDeleteInsert()\n     {\n         // FileHiveMetastore has various incompatibilities\n     }\n+\n+    @Test\n+    public void testPartitionNotReadable()\n+            throws Exception\n+    {\n+        SchemaTableName tableName = temporaryTable(\"tempTable\");\n+        ImmutableMap<String, String> dynamicPartitionParameters = ImmutableMap.of(OBJECT_NOT_READABLE, \"Testing Unreadable Partition\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0cc53dbd080e052ae94fcffdded57cdf80ab7b8"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMjA5NzgzOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNTozODoxNFrOHLamOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNTozODoxNFrOHLamOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTczMjE1Mw==", "bodyText": "private", "url": "https://github.com/prestodb/presto/pull/14939#discussion_r481732153", "createdAt": "2020-09-02T05:38:14Z", "author": {"login": "highker"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java", "diffHunk": "@@ -13,17 +13,57 @@\n  */\n package com.facebook.presto.hive;\n \n+import com.facebook.presto.execution.warnings.DefaultWarningCollector;\n+import com.facebook.presto.execution.warnings.WarningCollectorConfig;\n+import com.facebook.presto.execution.warnings.WarningHandlingLevel;\n import com.facebook.presto.hive.authentication.NoHdfsAuthentication;\n import com.facebook.presto.hive.metastore.ExtendedHiveMetastore;\n+import com.facebook.presto.hive.metastore.Partition;\n+import com.facebook.presto.hive.metastore.PartitionStatistics;\n+import com.facebook.presto.hive.metastore.PartitionWithStatistics;\n+import com.facebook.presto.hive.metastore.Table;\n import com.facebook.presto.hive.metastore.file.FileHiveMetastore;\n+import com.facebook.presto.spi.ColumnHandle;\n+import com.facebook.presto.spi.ColumnMetadata;\n+import com.facebook.presto.spi.ConnectorSession;\n+import com.facebook.presto.spi.ConnectorTableHandle;\n+import com.facebook.presto.spi.ConnectorTableLayout;\n+import com.facebook.presto.spi.Constraint;\n+import com.facebook.presto.spi.SchemaTableName;\n+import com.facebook.presto.spi.TableNotFoundException;\n+import com.facebook.presto.spi.connector.ConnectorMetadata;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n import com.google.common.collect.ImmutableSet;\n import org.testng.SkipException;\n+import org.testng.annotations.Test;\n \n import java.io.File;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.hive.HiveMetadata.PRESTO_VERSION_NAME;\n+import static com.facebook.presto.hive.HiveSplitManager.OBJECT_NOT_READABLE;\n+import static com.facebook.presto.hive.HiveStorageFormat.ORC;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.PRESTO_QUERY_ID_NAME;\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.toPartitionValues;\n+import static com.facebook.presto.hive.metastore.StorageFormat.fromHiveStorageFormat;\n+import static com.facebook.presto.spi.connector.ConnectorSplitManager.SplitSchedulingContext;\n+import static com.facebook.presto.spi.connector.ConnectorSplitManager.SplitSchedulingStrategy.UNGROUPED_SCHEDULING;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static org.apache.hadoop.hive.common.FileUtils.makePartName;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotNull;\n+import static org.testng.Assert.fail;\n \n public class TestHiveClientFileMetastore\n         extends AbstractTestHiveClientLocal\n {\n+    public static final SplitSchedulingContext SPLIT_SCHEDULING_CONTEXT = new SplitSchedulingContext(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0cc53dbd080e052ae94fcffdded57cdf80ab7b8"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMjEwMDkxOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNTozODo0OFrOHLaoQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNTozODo0OFrOHLaoQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTczMjY3Mg==", "bodyText": "this is redundant", "url": "https://github.com/prestodb/presto/pull/14939#discussion_r481732672", "createdAt": "2020-09-02T05:38:48Z", "author": {"login": "highker"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java", "diffHunk": "@@ -66,4 +106,119 @@ public void testTransactionDeleteInsert()\n     {\n         // FileHiveMetastore has various incompatibilities\n     }\n+\n+    @Test\n+    public void testPartitionNotReadable()\n+            throws Exception", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0cc53dbd080e052ae94fcffdded57cdf80ab7b8"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMjEwNzc5OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNTozOTo0NFrOHLaspw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNTozOTo0NFrOHLaspw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTczMzc5OQ==", "bodyText": "ImmutableMap -> Map<String, String>", "url": "https://github.com/prestodb/presto/pull/14939#discussion_r481733799", "createdAt": "2020-09-02T05:39:44Z", "author": {"login": "highker"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java", "diffHunk": "@@ -66,4 +106,119 @@ public void testTransactionDeleteInsert()\n     {\n         // FileHiveMetastore has various incompatibilities\n     }\n+\n+    @Test\n+    public void testPartitionNotReadable()\n+            throws Exception\n+    {\n+        SchemaTableName tableName = temporaryTable(\"tempTable\");\n+        ImmutableMap<String, String> dynamicPartitionParameters = ImmutableMap.of(OBJECT_NOT_READABLE, \"Testing Unreadable Partition\");\n+        try {\n+            createDummyPartitionedTable(tableName, STATISTICS_PARTITIONED_TABLE_COLUMNS, dynamicPartitionParameters);\n+\n+            try (Transaction transaction = newTransaction()) {\n+                ConnectorMetadata metadata = transaction.getMetadata();\n+                ConnectorSession session = newSession();\n+\n+                ConnectorTableHandle tableHandle = getTableHandle(metadata, tableName);\n+                assertNotNull(tableHandle);\n+\n+                ColumnHandle dsColumn = metadata.getColumnHandles(session, tableHandle).get(\"ds\");\n+                assertNotNull(dsColumn);\n+\n+                ConnectorTableLayout tableLayout = getTableLayout(session, metadata, tableHandle, Constraint.alwaysTrue(), transaction);\n+                try {\n+                    getSplitCount(splitManager.getSplits(transaction.getTransactionHandle(), session, tableLayout.getHandle(), SPLIT_SCHEDULING_CONTEXT));\n+                    fail(\"Expected HiveNotReadableException\");\n+                }\n+                catch (HiveNotReadableException e) {\n+                    assertEquals(e.getTableName(), tableName);\n+                    assertNotNull(SPLIT_SCHEDULING_CONTEXT.getWarningCollector());\n+                    assertEquals(SPLIT_SCHEDULING_CONTEXT.getWarningCollector().getWarnings().size(), 0);\n+                }\n+            }\n+\n+            try (Transaction transaction = newTransaction()) {\n+                ConnectorMetadata metadata = transaction.getMetadata();\n+                ConnectorSession session = newSession(ImmutableMap.of(HiveSessionProperties.IGNORE_UNREADABLE_PARTITION, true));\n+\n+                ConnectorTableHandle tableHandle = getTableHandle(metadata, tableName);\n+                assertNotNull(tableHandle);\n+\n+                ColumnHandle dsColumn = metadata.getColumnHandles(session, tableHandle).get(\"ds\");\n+                assertNotNull(dsColumn);\n+\n+                ConnectorTableLayout tableLayout = getTableLayout(session, metadata, tableHandle, Constraint.alwaysTrue(), transaction);\n+                splitManager.getSplits(transaction.getTransactionHandle(), session, tableLayout.getHandle(), SPLIT_SCHEDULING_CONTEXT);\n+                assertNotNull(SPLIT_SCHEDULING_CONTEXT.getWarningCollector());\n+                assertEquals(SPLIT_SCHEDULING_CONTEXT.getWarningCollector().getWarnings().size(), 1);\n+            }\n+        }\n+        catch (Exception e) {\n+            fail(\"Exception not expected\");\n+        }\n+        finally {\n+            dropTable(tableName);\n+        }\n+    }\n+\n+    private void createDummyPartitionedTable(SchemaTableName tableName, List<ColumnMetadata> columns, ImmutableMap dynamicPartitionParameters)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0cc53dbd080e052ae94fcffdded57cdf80ab7b8"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMjEwOTg3OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNTo0MDowM1rOHLat9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNTo0MDowM1rOHLat9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTczNDEzNA==", "bodyText": "ImmutableMap -> Map<String, String>", "url": "https://github.com/prestodb/presto/pull/14939#discussion_r481734134", "createdAt": "2020-09-02T05:40:03Z", "author": {"login": "highker"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java", "diffHunk": "@@ -66,4 +106,119 @@ public void testTransactionDeleteInsert()\n     {\n         // FileHiveMetastore has various incompatibilities\n     }\n+\n+    @Test\n+    public void testPartitionNotReadable()\n+            throws Exception\n+    {\n+        SchemaTableName tableName = temporaryTable(\"tempTable\");\n+        ImmutableMap<String, String> dynamicPartitionParameters = ImmutableMap.of(OBJECT_NOT_READABLE, \"Testing Unreadable Partition\");\n+        try {\n+            createDummyPartitionedTable(tableName, STATISTICS_PARTITIONED_TABLE_COLUMNS, dynamicPartitionParameters);\n+\n+            try (Transaction transaction = newTransaction()) {\n+                ConnectorMetadata metadata = transaction.getMetadata();\n+                ConnectorSession session = newSession();\n+\n+                ConnectorTableHandle tableHandle = getTableHandle(metadata, tableName);\n+                assertNotNull(tableHandle);\n+\n+                ColumnHandle dsColumn = metadata.getColumnHandles(session, tableHandle).get(\"ds\");\n+                assertNotNull(dsColumn);\n+\n+                ConnectorTableLayout tableLayout = getTableLayout(session, metadata, tableHandle, Constraint.alwaysTrue(), transaction);\n+                try {\n+                    getSplitCount(splitManager.getSplits(transaction.getTransactionHandle(), session, tableLayout.getHandle(), SPLIT_SCHEDULING_CONTEXT));\n+                    fail(\"Expected HiveNotReadableException\");\n+                }\n+                catch (HiveNotReadableException e) {\n+                    assertEquals(e.getTableName(), tableName);\n+                    assertNotNull(SPLIT_SCHEDULING_CONTEXT.getWarningCollector());\n+                    assertEquals(SPLIT_SCHEDULING_CONTEXT.getWarningCollector().getWarnings().size(), 0);\n+                }\n+            }\n+\n+            try (Transaction transaction = newTransaction()) {\n+                ConnectorMetadata metadata = transaction.getMetadata();\n+                ConnectorSession session = newSession(ImmutableMap.of(HiveSessionProperties.IGNORE_UNREADABLE_PARTITION, true));\n+\n+                ConnectorTableHandle tableHandle = getTableHandle(metadata, tableName);\n+                assertNotNull(tableHandle);\n+\n+                ColumnHandle dsColumn = metadata.getColumnHandles(session, tableHandle).get(\"ds\");\n+                assertNotNull(dsColumn);\n+\n+                ConnectorTableLayout tableLayout = getTableLayout(session, metadata, tableHandle, Constraint.alwaysTrue(), transaction);\n+                splitManager.getSplits(transaction.getTransactionHandle(), session, tableLayout.getHandle(), SPLIT_SCHEDULING_CONTEXT);\n+                assertNotNull(SPLIT_SCHEDULING_CONTEXT.getWarningCollector());\n+                assertEquals(SPLIT_SCHEDULING_CONTEXT.getWarningCollector().getWarnings().size(), 1);\n+            }\n+        }\n+        catch (Exception e) {\n+            fail(\"Exception not expected\");\n+        }\n+        finally {\n+            dropTable(tableName);\n+        }\n+    }\n+\n+    private void createDummyPartitionedTable(SchemaTableName tableName, List<ColumnMetadata> columns, ImmutableMap dynamicPartitionParameters)\n+            throws Exception\n+    {\n+        doCreateEmptyTable(tableName, ORC, columns);\n+\n+        ExtendedHiveMetastore metastoreClient = getMetastoreClient();\n+        Table table = metastoreClient.getTable(tableName.getSchemaName(), tableName.getTableName())\n+                .orElseThrow(() -> new TableNotFoundException(tableName));\n+\n+        List<String> firstPartitionValues = ImmutableList.of(\"2020-01-01\");\n+        List<String> secondPartitionValues = ImmutableList.of(\"2020-01-02\");\n+        List<String> thirdPartitionValues = ImmutableList.of(\"2020-01-03\");\n+\n+        String firstPartitionName = makePartName(ImmutableList.of(\"ds\"), firstPartitionValues);\n+        String secondPartitionName = makePartName(ImmutableList.of(\"ds\"), secondPartitionValues);\n+        String thirdPartitionName = makePartName(ImmutableList.of(\"ds\"), thirdPartitionValues);\n+\n+        List<PartitionWithStatistics> partitions = ImmutableList.of(firstPartitionName, secondPartitionName)\n+                .stream()\n+                .map(partitionName -> new PartitionWithStatistics(createDummyPartition(table, partitionName), partitionName, PartitionStatistics.empty()))\n+                .collect(toImmutableList());\n+        metastoreClient.addPartitions(tableName.getSchemaName(), tableName.getTableName(), partitions);\n+        metastoreClient.updatePartitionStatistics(tableName.getSchemaName(), tableName.getTableName(), firstPartitionName, currentStatistics -> EMPTY_TABLE_STATISTICS);\n+        metastoreClient.updatePartitionStatistics(tableName.getSchemaName(), tableName.getTableName(), secondPartitionName, currentStatistics -> EMPTY_TABLE_STATISTICS);\n+\n+        List<PartitionWithStatistics> partitionsNotReadable = ImmutableList.of(thirdPartitionName)\n+                .stream()\n+                .map(partitionName -> new PartitionWithStatistics(createDummyPartition(table, partitionName, dynamicPartitionParameters), partitionName, PartitionStatistics.empty()))\n+                .collect(toImmutableList());\n+        metastoreClient.addPartitions(tableName.getSchemaName(), tableName.getTableName(), partitionsNotReadable);\n+        metastoreClient.updatePartitionStatistics(tableName.getSchemaName(), tableName.getTableName(), thirdPartitionName, currentStatistics -> EMPTY_TABLE_STATISTICS);\n+    }\n+\n+    private Partition createDummyPartition(Table table, String partitionName, ImmutableMap dynamicPartitionParameters)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0cc53dbd080e052ae94fcffdded57cdf80ab7b8"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMjExMDE5OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNTo0MDowN1rOHLauMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNTo0MDowN1rOHLauMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTczNDE5Mg==", "bodyText": "ImmutableMap -> Map<String, String>", "url": "https://github.com/prestodb/presto/pull/14939#discussion_r481734192", "createdAt": "2020-09-02T05:40:07Z", "author": {"login": "highker"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java", "diffHunk": "@@ -66,4 +106,119 @@ public void testTransactionDeleteInsert()\n     {\n         // FileHiveMetastore has various incompatibilities\n     }\n+\n+    @Test\n+    public void testPartitionNotReadable()\n+            throws Exception\n+    {\n+        SchemaTableName tableName = temporaryTable(\"tempTable\");\n+        ImmutableMap<String, String> dynamicPartitionParameters = ImmutableMap.of(OBJECT_NOT_READABLE, \"Testing Unreadable Partition\");\n+        try {\n+            createDummyPartitionedTable(tableName, STATISTICS_PARTITIONED_TABLE_COLUMNS, dynamicPartitionParameters);\n+\n+            try (Transaction transaction = newTransaction()) {\n+                ConnectorMetadata metadata = transaction.getMetadata();\n+                ConnectorSession session = newSession();\n+\n+                ConnectorTableHandle tableHandle = getTableHandle(metadata, tableName);\n+                assertNotNull(tableHandle);\n+\n+                ColumnHandle dsColumn = metadata.getColumnHandles(session, tableHandle).get(\"ds\");\n+                assertNotNull(dsColumn);\n+\n+                ConnectorTableLayout tableLayout = getTableLayout(session, metadata, tableHandle, Constraint.alwaysTrue(), transaction);\n+                try {\n+                    getSplitCount(splitManager.getSplits(transaction.getTransactionHandle(), session, tableLayout.getHandle(), SPLIT_SCHEDULING_CONTEXT));\n+                    fail(\"Expected HiveNotReadableException\");\n+                }\n+                catch (HiveNotReadableException e) {\n+                    assertEquals(e.getTableName(), tableName);\n+                    assertNotNull(SPLIT_SCHEDULING_CONTEXT.getWarningCollector());\n+                    assertEquals(SPLIT_SCHEDULING_CONTEXT.getWarningCollector().getWarnings().size(), 0);\n+                }\n+            }\n+\n+            try (Transaction transaction = newTransaction()) {\n+                ConnectorMetadata metadata = transaction.getMetadata();\n+                ConnectorSession session = newSession(ImmutableMap.of(HiveSessionProperties.IGNORE_UNREADABLE_PARTITION, true));\n+\n+                ConnectorTableHandle tableHandle = getTableHandle(metadata, tableName);\n+                assertNotNull(tableHandle);\n+\n+                ColumnHandle dsColumn = metadata.getColumnHandles(session, tableHandle).get(\"ds\");\n+                assertNotNull(dsColumn);\n+\n+                ConnectorTableLayout tableLayout = getTableLayout(session, metadata, tableHandle, Constraint.alwaysTrue(), transaction);\n+                splitManager.getSplits(transaction.getTransactionHandle(), session, tableLayout.getHandle(), SPLIT_SCHEDULING_CONTEXT);\n+                assertNotNull(SPLIT_SCHEDULING_CONTEXT.getWarningCollector());\n+                assertEquals(SPLIT_SCHEDULING_CONTEXT.getWarningCollector().getWarnings().size(), 1);\n+            }\n+        }\n+        catch (Exception e) {\n+            fail(\"Exception not expected\");\n+        }\n+        finally {\n+            dropTable(tableName);\n+        }\n+    }\n+\n+    private void createDummyPartitionedTable(SchemaTableName tableName, List<ColumnMetadata> columns, ImmutableMap dynamicPartitionParameters)\n+            throws Exception\n+    {\n+        doCreateEmptyTable(tableName, ORC, columns);\n+\n+        ExtendedHiveMetastore metastoreClient = getMetastoreClient();\n+        Table table = metastoreClient.getTable(tableName.getSchemaName(), tableName.getTableName())\n+                .orElseThrow(() -> new TableNotFoundException(tableName));\n+\n+        List<String> firstPartitionValues = ImmutableList.of(\"2020-01-01\");\n+        List<String> secondPartitionValues = ImmutableList.of(\"2020-01-02\");\n+        List<String> thirdPartitionValues = ImmutableList.of(\"2020-01-03\");\n+\n+        String firstPartitionName = makePartName(ImmutableList.of(\"ds\"), firstPartitionValues);\n+        String secondPartitionName = makePartName(ImmutableList.of(\"ds\"), secondPartitionValues);\n+        String thirdPartitionName = makePartName(ImmutableList.of(\"ds\"), thirdPartitionValues);\n+\n+        List<PartitionWithStatistics> partitions = ImmutableList.of(firstPartitionName, secondPartitionName)\n+                .stream()\n+                .map(partitionName -> new PartitionWithStatistics(createDummyPartition(table, partitionName), partitionName, PartitionStatistics.empty()))\n+                .collect(toImmutableList());\n+        metastoreClient.addPartitions(tableName.getSchemaName(), tableName.getTableName(), partitions);\n+        metastoreClient.updatePartitionStatistics(tableName.getSchemaName(), tableName.getTableName(), firstPartitionName, currentStatistics -> EMPTY_TABLE_STATISTICS);\n+        metastoreClient.updatePartitionStatistics(tableName.getSchemaName(), tableName.getTableName(), secondPartitionName, currentStatistics -> EMPTY_TABLE_STATISTICS);\n+\n+        List<PartitionWithStatistics> partitionsNotReadable = ImmutableList.of(thirdPartitionName)\n+                .stream()\n+                .map(partitionName -> new PartitionWithStatistics(createDummyPartition(table, partitionName, dynamicPartitionParameters), partitionName, PartitionStatistics.empty()))\n+                .collect(toImmutableList());\n+        metastoreClient.addPartitions(tableName.getSchemaName(), tableName.getTableName(), partitionsNotReadable);\n+        metastoreClient.updatePartitionStatistics(tableName.getSchemaName(), tableName.getTableName(), thirdPartitionName, currentStatistics -> EMPTY_TABLE_STATISTICS);\n+    }\n+\n+    private Partition createDummyPartition(Table table, String partitionName, ImmutableMap dynamicPartitionParameters)\n+    {\n+        return createDummyPartition(table, partitionName, Optional.empty(), dynamicPartitionParameters);\n+    }\n+\n+    private Partition createDummyPartition(Table table, String partitionName, Optional<HiveBucketProperty> bucketProperty, ImmutableMap dynamicPartitionParameters)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0cc53dbd080e052ae94fcffdded57cdf80ab7b8"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMjExMzgwOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNTo0MDo0NVrOHLawhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNTo0MDo0NVrOHLawhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTczNDc5MA==", "bodyText": "Map<String, String>", "url": "https://github.com/prestodb/presto/pull/14939#discussion_r481734790", "createdAt": "2020-09-02T05:40:45Z", "author": {"login": "highker"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java", "diffHunk": "@@ -66,4 +106,119 @@ public void testTransactionDeleteInsert()\n     {\n         // FileHiveMetastore has various incompatibilities\n     }\n+\n+    @Test\n+    public void testPartitionNotReadable()\n+            throws Exception\n+    {\n+        SchemaTableName tableName = temporaryTable(\"tempTable\");\n+        ImmutableMap<String, String> dynamicPartitionParameters = ImmutableMap.of(OBJECT_NOT_READABLE, \"Testing Unreadable Partition\");\n+        try {\n+            createDummyPartitionedTable(tableName, STATISTICS_PARTITIONED_TABLE_COLUMNS, dynamicPartitionParameters);\n+\n+            try (Transaction transaction = newTransaction()) {\n+                ConnectorMetadata metadata = transaction.getMetadata();\n+                ConnectorSession session = newSession();\n+\n+                ConnectorTableHandle tableHandle = getTableHandle(metadata, tableName);\n+                assertNotNull(tableHandle);\n+\n+                ColumnHandle dsColumn = metadata.getColumnHandles(session, tableHandle).get(\"ds\");\n+                assertNotNull(dsColumn);\n+\n+                ConnectorTableLayout tableLayout = getTableLayout(session, metadata, tableHandle, Constraint.alwaysTrue(), transaction);\n+                try {\n+                    getSplitCount(splitManager.getSplits(transaction.getTransactionHandle(), session, tableLayout.getHandle(), SPLIT_SCHEDULING_CONTEXT));\n+                    fail(\"Expected HiveNotReadableException\");\n+                }\n+                catch (HiveNotReadableException e) {\n+                    assertEquals(e.getTableName(), tableName);\n+                    assertNotNull(SPLIT_SCHEDULING_CONTEXT.getWarningCollector());\n+                    assertEquals(SPLIT_SCHEDULING_CONTEXT.getWarningCollector().getWarnings().size(), 0);\n+                }\n+            }\n+\n+            try (Transaction transaction = newTransaction()) {\n+                ConnectorMetadata metadata = transaction.getMetadata();\n+                ConnectorSession session = newSession(ImmutableMap.of(HiveSessionProperties.IGNORE_UNREADABLE_PARTITION, true));\n+\n+                ConnectorTableHandle tableHandle = getTableHandle(metadata, tableName);\n+                assertNotNull(tableHandle);\n+\n+                ColumnHandle dsColumn = metadata.getColumnHandles(session, tableHandle).get(\"ds\");\n+                assertNotNull(dsColumn);\n+\n+                ConnectorTableLayout tableLayout = getTableLayout(session, metadata, tableHandle, Constraint.alwaysTrue(), transaction);\n+                splitManager.getSplits(transaction.getTransactionHandle(), session, tableLayout.getHandle(), SPLIT_SCHEDULING_CONTEXT);\n+                assertNotNull(SPLIT_SCHEDULING_CONTEXT.getWarningCollector());\n+                assertEquals(SPLIT_SCHEDULING_CONTEXT.getWarningCollector().getWarnings().size(), 1);\n+            }\n+        }\n+        catch (Exception e) {\n+            fail(\"Exception not expected\");\n+        }\n+        finally {\n+            dropTable(tableName);\n+        }\n+    }\n+\n+    private void createDummyPartitionedTable(SchemaTableName tableName, List<ColumnMetadata> columns, ImmutableMap dynamicPartitionParameters)\n+            throws Exception\n+    {\n+        doCreateEmptyTable(tableName, ORC, columns);\n+\n+        ExtendedHiveMetastore metastoreClient = getMetastoreClient();\n+        Table table = metastoreClient.getTable(tableName.getSchemaName(), tableName.getTableName())\n+                .orElseThrow(() -> new TableNotFoundException(tableName));\n+\n+        List<String> firstPartitionValues = ImmutableList.of(\"2020-01-01\");\n+        List<String> secondPartitionValues = ImmutableList.of(\"2020-01-02\");\n+        List<String> thirdPartitionValues = ImmutableList.of(\"2020-01-03\");\n+\n+        String firstPartitionName = makePartName(ImmutableList.of(\"ds\"), firstPartitionValues);\n+        String secondPartitionName = makePartName(ImmutableList.of(\"ds\"), secondPartitionValues);\n+        String thirdPartitionName = makePartName(ImmutableList.of(\"ds\"), thirdPartitionValues);\n+\n+        List<PartitionWithStatistics> partitions = ImmutableList.of(firstPartitionName, secondPartitionName)\n+                .stream()\n+                .map(partitionName -> new PartitionWithStatistics(createDummyPartition(table, partitionName), partitionName, PartitionStatistics.empty()))\n+                .collect(toImmutableList());\n+        metastoreClient.addPartitions(tableName.getSchemaName(), tableName.getTableName(), partitions);\n+        metastoreClient.updatePartitionStatistics(tableName.getSchemaName(), tableName.getTableName(), firstPartitionName, currentStatistics -> EMPTY_TABLE_STATISTICS);\n+        metastoreClient.updatePartitionStatistics(tableName.getSchemaName(), tableName.getTableName(), secondPartitionName, currentStatistics -> EMPTY_TABLE_STATISTICS);\n+\n+        List<PartitionWithStatistics> partitionsNotReadable = ImmutableList.of(thirdPartitionName)\n+                .stream()\n+                .map(partitionName -> new PartitionWithStatistics(createDummyPartition(table, partitionName, dynamicPartitionParameters), partitionName, PartitionStatistics.empty()))\n+                .collect(toImmutableList());\n+        metastoreClient.addPartitions(tableName.getSchemaName(), tableName.getTableName(), partitionsNotReadable);\n+        metastoreClient.updatePartitionStatistics(tableName.getSchemaName(), tableName.getTableName(), thirdPartitionName, currentStatistics -> EMPTY_TABLE_STATISTICS);\n+    }\n+\n+    private Partition createDummyPartition(Table table, String partitionName, ImmutableMap dynamicPartitionParameters)\n+    {\n+        return createDummyPartition(table, partitionName, Optional.empty(), dynamicPartitionParameters);\n+    }\n+\n+    private Partition createDummyPartition(Table table, String partitionName, Optional<HiveBucketProperty> bucketProperty, ImmutableMap dynamicPartitionParameters)\n+    {\n+        ImmutableMap<String, String> staticPartitionParameters = ImmutableMap.of(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0cc53dbd080e052ae94fcffdded57cdf80ab7b8"}, "originalPosition": 158}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMjExNTgyOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNTo0MTowN1rOHLax0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNTo0MTowN1rOHLax0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTczNTEyMw==", "bodyText": "Map<String, String>", "url": "https://github.com/prestodb/presto/pull/14939#discussion_r481735123", "createdAt": "2020-09-02T05:41:07Z", "author": {"login": "highker"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFileMetastore.java", "diffHunk": "@@ -66,4 +106,119 @@ public void testTransactionDeleteInsert()\n     {\n         // FileHiveMetastore has various incompatibilities\n     }\n+\n+    @Test\n+    public void testPartitionNotReadable()\n+            throws Exception\n+    {\n+        SchemaTableName tableName = temporaryTable(\"tempTable\");\n+        ImmutableMap<String, String> dynamicPartitionParameters = ImmutableMap.of(OBJECT_NOT_READABLE, \"Testing Unreadable Partition\");\n+        try {\n+            createDummyPartitionedTable(tableName, STATISTICS_PARTITIONED_TABLE_COLUMNS, dynamicPartitionParameters);\n+\n+            try (Transaction transaction = newTransaction()) {\n+                ConnectorMetadata metadata = transaction.getMetadata();\n+                ConnectorSession session = newSession();\n+\n+                ConnectorTableHandle tableHandle = getTableHandle(metadata, tableName);\n+                assertNotNull(tableHandle);\n+\n+                ColumnHandle dsColumn = metadata.getColumnHandles(session, tableHandle).get(\"ds\");\n+                assertNotNull(dsColumn);\n+\n+                ConnectorTableLayout tableLayout = getTableLayout(session, metadata, tableHandle, Constraint.alwaysTrue(), transaction);\n+                try {\n+                    getSplitCount(splitManager.getSplits(transaction.getTransactionHandle(), session, tableLayout.getHandle(), SPLIT_SCHEDULING_CONTEXT));\n+                    fail(\"Expected HiveNotReadableException\");\n+                }\n+                catch (HiveNotReadableException e) {\n+                    assertEquals(e.getTableName(), tableName);\n+                    assertNotNull(SPLIT_SCHEDULING_CONTEXT.getWarningCollector());\n+                    assertEquals(SPLIT_SCHEDULING_CONTEXT.getWarningCollector().getWarnings().size(), 0);\n+                }\n+            }\n+\n+            try (Transaction transaction = newTransaction()) {\n+                ConnectorMetadata metadata = transaction.getMetadata();\n+                ConnectorSession session = newSession(ImmutableMap.of(HiveSessionProperties.IGNORE_UNREADABLE_PARTITION, true));\n+\n+                ConnectorTableHandle tableHandle = getTableHandle(metadata, tableName);\n+                assertNotNull(tableHandle);\n+\n+                ColumnHandle dsColumn = metadata.getColumnHandles(session, tableHandle).get(\"ds\");\n+                assertNotNull(dsColumn);\n+\n+                ConnectorTableLayout tableLayout = getTableLayout(session, metadata, tableHandle, Constraint.alwaysTrue(), transaction);\n+                splitManager.getSplits(transaction.getTransactionHandle(), session, tableLayout.getHandle(), SPLIT_SCHEDULING_CONTEXT);\n+                assertNotNull(SPLIT_SCHEDULING_CONTEXT.getWarningCollector());\n+                assertEquals(SPLIT_SCHEDULING_CONTEXT.getWarningCollector().getWarnings().size(), 1);\n+            }\n+        }\n+        catch (Exception e) {\n+            fail(\"Exception not expected\");\n+        }\n+        finally {\n+            dropTable(tableName);\n+        }\n+    }\n+\n+    private void createDummyPartitionedTable(SchemaTableName tableName, List<ColumnMetadata> columns, ImmutableMap dynamicPartitionParameters)\n+            throws Exception\n+    {\n+        doCreateEmptyTable(tableName, ORC, columns);\n+\n+        ExtendedHiveMetastore metastoreClient = getMetastoreClient();\n+        Table table = metastoreClient.getTable(tableName.getSchemaName(), tableName.getTableName())\n+                .orElseThrow(() -> new TableNotFoundException(tableName));\n+\n+        List<String> firstPartitionValues = ImmutableList.of(\"2020-01-01\");\n+        List<String> secondPartitionValues = ImmutableList.of(\"2020-01-02\");\n+        List<String> thirdPartitionValues = ImmutableList.of(\"2020-01-03\");\n+\n+        String firstPartitionName = makePartName(ImmutableList.of(\"ds\"), firstPartitionValues);\n+        String secondPartitionName = makePartName(ImmutableList.of(\"ds\"), secondPartitionValues);\n+        String thirdPartitionName = makePartName(ImmutableList.of(\"ds\"), thirdPartitionValues);\n+\n+        List<PartitionWithStatistics> partitions = ImmutableList.of(firstPartitionName, secondPartitionName)\n+                .stream()\n+                .map(partitionName -> new PartitionWithStatistics(createDummyPartition(table, partitionName), partitionName, PartitionStatistics.empty()))\n+                .collect(toImmutableList());\n+        metastoreClient.addPartitions(tableName.getSchemaName(), tableName.getTableName(), partitions);\n+        metastoreClient.updatePartitionStatistics(tableName.getSchemaName(), tableName.getTableName(), firstPartitionName, currentStatistics -> EMPTY_TABLE_STATISTICS);\n+        metastoreClient.updatePartitionStatistics(tableName.getSchemaName(), tableName.getTableName(), secondPartitionName, currentStatistics -> EMPTY_TABLE_STATISTICS);\n+\n+        List<PartitionWithStatistics> partitionsNotReadable = ImmutableList.of(thirdPartitionName)\n+                .stream()\n+                .map(partitionName -> new PartitionWithStatistics(createDummyPartition(table, partitionName, dynamicPartitionParameters), partitionName, PartitionStatistics.empty()))\n+                .collect(toImmutableList());\n+        metastoreClient.addPartitions(tableName.getSchemaName(), tableName.getTableName(), partitionsNotReadable);\n+        metastoreClient.updatePartitionStatistics(tableName.getSchemaName(), tableName.getTableName(), thirdPartitionName, currentStatistics -> EMPTY_TABLE_STATISTICS);\n+    }\n+\n+    private Partition createDummyPartition(Table table, String partitionName, ImmutableMap dynamicPartitionParameters)\n+    {\n+        return createDummyPartition(table, partitionName, Optional.empty(), dynamicPartitionParameters);\n+    }\n+\n+    private Partition createDummyPartition(Table table, String partitionName, Optional<HiveBucketProperty> bucketProperty, ImmutableMap dynamicPartitionParameters)\n+    {\n+        ImmutableMap<String, String> staticPartitionParameters = ImmutableMap.of(\n+                PRESTO_VERSION_NAME, \"testversion\",\n+                PRESTO_QUERY_ID_NAME, \"20200101_123456_00001_x1y2z\");\n+        ImmutableMap<String, String> partitionParameters = ImmutableMap.<String, String>builder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0cc53dbd080e052ae94fcffdded57cdf80ab7b8"}, "originalPosition": 161}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2223, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}