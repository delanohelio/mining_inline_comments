{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyOTAwODgz", "number": 15076, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMTozNjo1OVrOEcQZ4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNTozMDo1NFrOEcaxqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MDY0MzU1OnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/com/facebook/presto/orc/CachingOrcDataSource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMTozNjo1OVrOHGrGXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwNTo0NzozOFrOHJq7DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc1OTY0NQ==", "bodyText": "What is the maximal possible cacheLength?  is it tinyStripeThreshold (default 8MB) ?\nHow about initialize cache size as maximal possible stripe size (8MB at most for tiny stripe?)\nIf memory accounting is only off by 8MB, it is probably ok. Is creating new cache too fast caused GC ?", "url": "https://github.com/prestodb/presto/pull/15076#discussion_r476759645", "createdAt": "2020-08-25T21:36:59Z", "author": {"login": "viczhang861"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/CachingOrcDataSource.java", "diffHunk": "@@ -73,6 +75,7 @@ void readCacheAt(long offset)\n         cacheLength = newCacheRange.getLength();\n         if (cache.length < cacheLength) {\n             cache = new byte[cacheLength];\n+            systemMemoryContext.setBytes(cacheLength);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5cf9ecc46a40d04c9cfcabd206cc62fc858e585"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkwMjQ3Nw==", "bodyText": "@viczhang861 The cacheLength is the min of tinyStripeThreshold and the size of the file. We don't want to make it always 8MB because the files may well be smaller than that. This 8MB is not small because the cache is allocated for each PageSource(typically a file) in each OrcRecordReader. Considering worker parallelism and query parallelism, this amount could be quite high.", "url": "https://github.com/prestodb/presto/pull/15076#discussion_r479902477", "createdAt": "2020-08-31T05:47:38Z", "author": {"login": "yingsu00"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/CachingOrcDataSource.java", "diffHunk": "@@ -73,6 +75,7 @@ void readCacheAt(long offset)\n         cacheLength = newCacheRange.getLength();\n         if (cache.length < cacheLength) {\n             cache = new byte[cacheLength];\n+            systemMemoryContext.setBytes(cacheLength);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc1OTY0NQ=="}, "originalCommit": {"oid": "e5cf9ecc46a40d04c9cfcabd206cc62fc858e585"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjM0MjIyOnYy", "diffSide": "RIGHT", "path": "presto-orc/src/test/java/com/facebook/presto/orc/TestCachingOrcDataSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNTozMDozN1rOHG8aEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNTozMDozN1rOHG8aEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA0MzIxNw==", "bodyText": "Can we assert assertEquals(systemMemoryContext.getBytes(), 8 * 1048576); after this?", "url": "https://github.com/prestodb/presto/pull/15076#discussion_r477043217", "createdAt": "2020-08-26T05:30:37Z", "author": {"login": "highker"}, "path": "presto-orc/src/test/java/com/facebook/presto/orc/TestCachingOrcDataSource.java", "diffHunk": "@@ -146,13 +153,16 @@ public void testTinyStripesReadCacheAt()\n         DataSize maxMergeDistance = new DataSize(1, Unit.MEGABYTE);\n         DataSize tinyStripeThreshold = new DataSize(8, Unit.MEGABYTE);\n \n+        OrcAggregatedMemoryContext systemMemoryContext = new TestingHiveOrcAggregatedMemoryContext();\n+\n         TestingOrcDataSource testingOrcDataSource = new TestingOrcDataSource(FakeOrcDataSource.INSTANCE);\n         CachingOrcDataSource cachingOrcDataSource = new CachingOrcDataSource(\n                 testingOrcDataSource,\n                 createTinyStripesRangeFinder(\n                         ImmutableList.of(new StripeInformation(123, 3, 10, 10, 10, ImmutableList.of()), new StripeInformation(123, 33, 10, 10, 10, ImmutableList.of()), new StripeInformation(123, 63, 1048576 * 8 - 20, 10, 10, ImmutableList.of())),\n                         maxMergeDistance,\n-                        tinyStripeThreshold));\n+                        tinyStripeThreshold),\n+                systemMemoryContext.newOrcLocalMemoryContext(CachingOrcDataSource.class.getSimpleName()));\n         cachingOrcDataSource.readCacheAt(3);\n         assertEquals(testingOrcDataSource.getLastReadRanges(), ImmutableList.of(new DiskRange(3, 60)));\n         cachingOrcDataSource.readCacheAt(63);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5cf9ecc46a40d04c9cfcabd206cc62fc858e585"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjM0MjY2OnYy", "diffSide": "RIGHT", "path": "presto-orc/src/test/java/com/facebook/presto/orc/TestCachingOrcDataSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNTozMDo0OVrOHG8aSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNTozMDo0OVrOHG8aSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA0MzI3NQ==", "bodyText": "same, can we add an assertion?", "url": "https://github.com/prestodb/presto/pull/15076#discussion_r477043275", "createdAt": "2020-08-26T05:30:49Z", "author": {"login": "highker"}, "path": "presto-orc/src/test/java/com/facebook/presto/orc/TestCachingOrcDataSource.java", "diffHunk": "@@ -167,7 +177,8 @@ public void testTinyStripesReadCacheAt()\n                                 new StripeInformation(123, 33, 10, 10, 10, ImmutableList.of()),\n                                 new StripeInformation(123, 63, 1048576 * 8 - 20, 10, 10, ImmutableList.of())),\n                         maxMergeDistance,\n-                        tinyStripeThreshold));\n+                        tinyStripeThreshold),\n+                systemMemoryContext.newOrcLocalMemoryContext(CachingOrcDataSource.class.getSimpleName()));\n         cachingOrcDataSource.readCacheAt(62); // read at the end of a stripe\n         assertEquals(testingOrcDataSource.getLastReadRanges(), ImmutableList.of(new DiskRange(3, 60)));\n         cachingOrcDataSource.readCacheAt(63);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5cf9ecc46a40d04c9cfcabd206cc62fc858e585"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjM0MjgwOnYy", "diffSide": "RIGHT", "path": "presto-orc/src/test/java/com/facebook/presto/orc/TestCachingOrcDataSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNTozMDo1NFrOHG8aZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNTozMDo1NFrOHG8aZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA0MzMwMA==", "bodyText": "same", "url": "https://github.com/prestodb/presto/pull/15076#discussion_r477043300", "createdAt": "2020-08-26T05:30:54Z", "author": {"login": "highker"}, "path": "presto-orc/src/test/java/com/facebook/presto/orc/TestCachingOrcDataSource.java", "diffHunk": "@@ -182,7 +193,8 @@ public void testTinyStripesReadCacheAt()\n                                 new StripeInformation(123, 4, 1048576, 1048576, 1048576 * 3, ImmutableList.of()),\n                                 new StripeInformation(123, 4 + 1048576 * 5, 1048576, 1048576, 1048576, ImmutableList.of())),\n                         maxMergeDistance,\n-                        tinyStripeThreshold));\n+                        tinyStripeThreshold),\n+                systemMemoryContext.newOrcLocalMemoryContext(CachingOrcDataSource.class.getSimpleName()));\n         cachingOrcDataSource.readCacheAt(3);\n         assertEquals(testingOrcDataSource.getLastReadRanges(), ImmutableList.of(new DiskRange(3, 1 + 1048576 * 5)));\n         cachingOrcDataSource.readCacheAt(4 + 1048576 * 5);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5cf9ecc46a40d04c9cfcabd206cc62fc858e585"}, "originalPosition": 103}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3568, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}