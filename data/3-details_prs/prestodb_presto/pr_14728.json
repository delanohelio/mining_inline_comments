{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwMzI5NDM3", "number": 14728, "title": "Enums support #1: base types and operators", "bodyText": "This PR is the first in a series that aims to introduce support for user-defined types, and specifically user-defined enums, into Presto (see #14691 for an overview of the work).\nThis one focuses specifically on introducing the base types and generic operators that apply to enums.\nWe support\n\nenum literals, eg Mood.HAPPY\ncast to and from base types\n=, != and IS_DISTINCT\nhash operator used for IN (...) and APPROX_DISTINCT()\ncast to and from JSON\ncomparisons and ordering (using the rules of the underlying types)\n\nImplementation notes\n\nEnum literals like Mood.HAPPY are parsed as Dereferences in the AST (like my_table.my_col) and they are then rewritten as EnumLiterals in the TranslationMap's rewriter.\nI added a new type bound constraint to express that we want a given type to be a long enum or varchar enum, so that we can have enum operator signatures like <T extends LongEnumType> equals(T, T): bool . This constraint is similar to the orderable and comparable constraint we use to define the type signature of functions like the equal operator on arrays.\n\nIn future PRs, I will introduce\n\nthe ability to register enum types from plugins\nthe ability to serialize enum data to the client", "createdAt": "2020-06-26T01:07:54Z", "url": "https://github.com/prestodb/presto/pull/14728", "merged": true, "mergeCommit": {"oid": "99e67bc9d490d51920473999cb43905037bb7ee5"}, "closed": true, "closedAt": "2020-08-31T17:56:07Z", "author": {"login": "daniel-ohayon"}, "timelineItems": {"totalCount": 54, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc0nIbjgBqjM1NDExMDAxNTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdEWpPCgFqTQ3ODgyMjQxNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "aa24b45c7b356360ac4e06efbf395e985d4b36aa", "author": {"user": {"login": "daniel-ohayon", "name": "Daniel Ohayon"}}, "url": "https://github.com/prestodb/presto/commit/aa24b45c7b356360ac4e06efbf395e985d4b36aa", "committedDate": "2020-07-09T17:16:05Z", "message": "enum tests for row cast and array UDFs"}, "afterCommit": {"oid": "fc41856743963f584268a49352beb72cbb883ef6", "author": {"user": {"login": "daniel-ohayon", "name": "Daniel Ohayon"}}, "url": "https://github.com/prestodb/presto/commit/fc41856743963f584268a49352beb72cbb883ef6", "committedDate": "2020-07-13T19:58:02Z", "message": "enum tests for row cast and array UDFs"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fc41856743963f584268a49352beb72cbb883ef6", "author": {"user": {"login": "daniel-ohayon", "name": "Daniel Ohayon"}}, "url": "https://github.com/prestodb/presto/commit/fc41856743963f584268a49352beb72cbb883ef6", "committedDate": "2020-07-13T19:58:02Z", "message": "enum tests for row cast and array UDFs"}, "afterCommit": {"oid": "7115366b16cd445f997a3e957e8dab545157c0c3", "author": {"user": {"login": "daniel-ohayon", "name": "Daniel Ohayon"}}, "url": "https://github.com/prestodb/presto/commit/7115366b16cd445f997a3e957e8dab545157c0c3", "committedDate": "2020-07-13T20:07:21Z", "message": "Enum tests for row cast and array UDFs"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7115366b16cd445f997a3e957e8dab545157c0c3", "author": {"user": {"login": "daniel-ohayon", "name": "Daniel Ohayon"}}, "url": "https://github.com/prestodb/presto/commit/7115366b16cd445f997a3e957e8dab545157c0c3", "committedDate": "2020-07-13T20:07:21Z", "message": "Enum tests for row cast and array UDFs"}, "afterCommit": {"oid": "29d596ce6706ef4baf8bd5bb479d37b1b0048696", "author": {"user": {"login": "daniel-ohayon", "name": "Daniel Ohayon"}}, "url": "https://github.com/prestodb/presto/commit/29d596ce6706ef4baf8bd5bb479d37b1b0048696", "committedDate": "2020-07-16T02:17:45Z", "message": "Support enum <> JSON cast"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2OTE2NDQ3", "url": "https://github.com/prestodb/presto/pull/14728#pullrequestreview-446916447", "createdAt": "2020-07-12T22:57:05Z", "commit": {"oid": "761326b12b510d5cbda825a5b9db02295d8c4800"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQyMjo1NzowNVrOGwXuKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwMzoxMjowMFrOGyYhOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM3MzQ4MA==", "bodyText": "We don't normally use null. In general the codebase assumed all objects are not null. If an object could be null, use Optional<T> explicitly.", "url": "https://github.com/prestodb/presto/pull/14728#discussion_r453373480", "createdAt": "2020-07-12T22:57:05Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/type/EnumOperators.java", "diffHunk": "@@ -0,0 +1,349 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.type;\n+\n+import com.facebook.presto.annotation.UsedByGeneratedCode;\n+import com.facebook.presto.common.function.OperatorType;\n+import com.facebook.presto.common.type.AbstractLongType;\n+import com.facebook.presto.common.type.BigintType;\n+import com.facebook.presto.common.type.BooleanType;\n+import com.facebook.presto.common.type.EnumType;\n+import com.facebook.presto.common.type.IntegerEnumType;\n+import com.facebook.presto.common.type.IntegerType;\n+import com.facebook.presto.common.type.SmallintType;\n+import com.facebook.presto.common.type.StandardTypes;\n+import com.facebook.presto.common.type.StringEnumType;\n+import com.facebook.presto.common.type.TinyintType;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeSignature;\n+import com.facebook.presto.metadata.PolymorphicScalarFunctionBuilder;\n+import com.facebook.presto.metadata.SignatureBuilder;\n+import com.facebook.presto.metadata.SqlScalarFunction;\n+import com.facebook.presto.operator.scalar.BuiltInScalarFunctionImplementation;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.function.Signature;\n+import com.facebook.presto.spi.function.SqlFunction;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Sets;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.Slices;\n+import io.airlift.slice.XxHash64;\n+\n+import javax.annotation.Nullable;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static com.facebook.presto.common.function.OperatorType.CAST;\n+import static com.facebook.presto.operator.scalar.BuiltInScalarFunctionImplementation.ArgumentProperty.valueTypeArgumentProperty;\n+import static com.facebook.presto.operator.scalar.BuiltInScalarFunctionImplementation.NullConvention.USE_NULL_FLAG;\n+import static com.facebook.presto.spi.StandardErrorCode.INVALID_CAST_ARGUMENT;\n+import static com.facebook.presto.spi.function.FunctionKind.SCALAR;\n+import static java.util.Objects.requireNonNull;\n+\n+public final class EnumOperators\n+{\n+    private static final TypeSignature BOOLEAN_TYPE_SIGNATURE = BooleanType.BOOLEAN.getTypeSignature();\n+\n+    private EnumOperators() {}\n+\n+    private static final Set<TypeSignature> INTEGER_TYPES = Sets.newHashSet(\n+            Stream.of(TinyintType.TINYINT, SmallintType.SMALLINT, IntegerType.INTEGER, BigintType.BIGINT)\n+                    .map(Type::getTypeSignature).collect(Collectors.toSet()));\n+\n+    public static Optional<SqlFunction> makeOperator(OperatorType operatorType, List<Type> argTypes, @Nullable Type returnType)\n+    {\n+        if (!(returnType instanceof EnumType) && argTypes.stream().noneMatch(t -> t instanceof EnumType)) {\n+            return Optional.empty();\n+        }\n+\n+        boolean isInt = !argTypes.isEmpty() && argTypes.get(0) instanceof IntegerEnumType;\n+        List<TypeSignature> argTypeSignatures = argTypes.stream()\n+                .map(Type::getTypeSignature)\n+                .collect(Collectors.toList());\n+\n+        switch (operatorType) {\n+            case CAST:\n+                requireNonNull(returnType);  // return type must be provided for CAST function lookup\n+                if (returnType instanceof EnumType) {\n+                    return makeCastToEnum(argTypes.get(0).getTypeSignature(), (EnumType) returnType);\n+                }\n+                if (argTypes.get(0) instanceof EnumType) {\n+                    return makeCastFromEnum((EnumType) argTypes.get(0), returnType.getTypeSignature());\n+                }\n+                return Optional.empty();\n+            case EQUAL:\n+            case NOT_EQUAL:\n+                if (!(argTypes.get(0) instanceof EnumType) || !argTypes.get(0).equals(argTypes.get(1))) {\n+                    return Optional.empty();\n+                }\n+                return buildFunction(\n+                        operatorType,\n+                        argTypeSignatures,\n+                        BOOLEAN_TYPE_SIGNATURE,\n+                        true,\n+                        isInt ? \"integerEnumCompare\" : \"stringEnumCompare\",\n+                        ImmutableList.of(OperatorType.NOT_EQUAL.equals(operatorType)));\n+            case IS_DISTINCT_FROM:\n+                if (!(argTypes.get(0) instanceof EnumType) || !argTypes.get(0).equals(argTypes.get(1))) {\n+                    return Optional.empty();\n+                }\n+                return buildFunction(\n+                        operatorType,\n+                        argTypeSignatures,\n+                        BOOLEAN_TYPE_SIGNATURE,\n+                        false,\n+                        isInt ? \"integerEnumIsDistinct\" : \"stringEnumIsDistinct\",\n+                        ImmutableList.of(),\n+                        new BuiltInScalarFunctionImplementation.ArgumentProperty[] {\n+                                valueTypeArgumentProperty(USE_NULL_FLAG),\n+                                valueTypeArgumentProperty(USE_NULL_FLAG)\n+                        });\n+            case HASH_CODE:\n+                return buildFunction(\n+                        operatorType,\n+                        argTypeSignatures,\n+                        BigintType.BIGINT.getTypeSignature(),\n+                        false,\n+                        isInt ? \"integerEnumHash\" : \"stringEnumHash\",\n+                        ImmutableList.of());\n+            case XX_HASH_64:\n+                return buildFunction(\n+                        operatorType,\n+                        argTypeSignatures,\n+                        BigintType.BIGINT.getTypeSignature(),\n+                        false,\n+                        isInt ? \"integerEnumXxHash64\" : \"stringEnumHash\",\n+                        ImmutableList.of());\n+            case INDETERMINATE:\n+                return buildFunction(\n+                        operatorType,\n+                        argTypeSignatures,\n+                        BOOLEAN_TYPE_SIGNATURE,\n+                        false,\n+                        isInt ? \"integerEnumIndeterminate\" : \"stringEnumIndeterminate\",\n+                        ImmutableList.of(),\n+                        new BuiltInScalarFunctionImplementation.ArgumentProperty[] {\n+                                valueTypeArgumentProperty(USE_NULL_FLAG)\n+                        });\n+            default:\n+                return Optional.empty();\n+        }\n+    }\n+\n+    private static Optional<SqlFunction> makeCastToEnum(TypeSignature fromType, EnumType toType)\n+    {\n+        if (toType instanceof IntegerEnumType) {\n+            if (INTEGER_TYPES.contains(fromType)) {\n+                return buildCastToEnum(fromType, toType, \"integerEnumValueLookup\");\n+            }\n+            if (StandardTypes.VARCHAR.equals(fromType.getBase())) {\n+                return buildCastToEnum(fromType, toType, \"integerEnumKeyLookup\");\n+            }\n+        }\n+        if (toType instanceof StringEnumType) {\n+            if (StandardTypes.VARCHAR.equals(fromType.getBase())) {\n+                return buildCastToEnum(fromType, toType, \"stringEnumKeyOrValueLookup\");\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    private static Optional<SqlFunction> makeCastFromEnum(EnumType fromType, TypeSignature toType)\n+    {\n+        if (fromType instanceof IntegerEnumType) {\n+            if (BigintType.BIGINT.getTypeSignature().equals(toType)) {\n+                return buildCastFromEnum(fromType, toType, \"integerEnumAsPrimitive\");\n+            }\n+        }\n+        if (fromType instanceof StringEnumType) {\n+            if (StandardTypes.VARCHAR.equals(toType.getBase())) {\n+                return buildCastFromEnum(fromType, toType, \"stringEnumAsPrimitive\");\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    private static Optional<SqlFunction> buildCastToEnum(TypeSignature fromType, EnumType toType, String methodName)\n+    {\n+        return buildFunction(\n+                CAST,\n+                ImmutableList.of(fromType),\n+                toType.getTypeSignature(),\n+                false,\n+                methodName,\n+                ImmutableList.of(toType));\n+    }\n+\n+    private static Optional<SqlFunction> buildCastFromEnum(EnumType fromType, TypeSignature toType, String methodName)\n+    {\n+        return buildFunction(\n+                CAST,\n+                ImmutableList.of(fromType.getTypeSignature()),\n+                toType,\n+                false,\n+                methodName,\n+                ImmutableList.of());\n+    }\n+\n+    private static Optional<SqlFunction> buildFunction(OperatorType operatorType, List<TypeSignature> argTypes, TypeSignature returnType,\n+            boolean nullableResult, String methodName, List<Object> extraParams)\n+    {\n+        return buildFunction(operatorType, argTypes, returnType, nullableResult, methodName, extraParams, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "761326b12b510d5cbda825a5b9db02295d8c4800"}, "originalPosition": 206}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ4MDEzMg==", "bodyText": "Do you really want a bounded varchar type of max length? I think either an unbounded varchar type (UNBOUNDED_LENGTH) or get the max length of all values from enumMap and use varchar(maxValueLength) would make more sense. Also, static import from AbstractVarcharType.", "url": "https://github.com/prestodb/presto/pull/14728#discussion_r455480132", "createdAt": "2020-07-16T02:58:30Z", "author": {"login": "rongrong"}, "path": "presto-common/src/main/java/com/facebook/presto/common/type/VarcharEnumType.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.common.type;\n+\n+import java.util.Map;\n+\n+public class VarcharEnumType\n+        extends AbstractVarcharType\n+        implements EnumType<String>\n+{\n+    private final Map<String, String> enumMap;\n+\n+    public VarcharEnumType(String name, Map<String, String> enumMap)\n+    {\n+        super(VarcharType.MAX_LENGTH, TypeSignature.parseTypeSignature(name));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ee1e6ace7a9da12094f056c7a577bdff90fa042"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ4MDI5NA==", "bodyText": "each parameter on a separate line.\n    super(\n            length,\n            new TypeSignature(...", "url": "https://github.com/prestodb/presto/pull/14728#discussion_r455480294", "createdAt": "2020-07-16T02:59:10Z", "author": {"login": "rongrong"}, "path": "presto-common/src/main/java/com/facebook/presto/common/type/VarcharType.java", "diffHunk": "@@ -49,163 +39,10 @@ public static TypeSignature getParametrizedVarcharSignature(String param)\n         return new TypeSignature(StandardTypes.VARCHAR, TypeSignatureParameter.of(param));\n     }\n \n-    private final int length;\n-\n     private VarcharType(int length)\n     {\n-        super(\n-                new TypeSignature(\n-                        StandardTypes.VARCHAR,\n-                        singletonList(TypeSignatureParameter.of((long) length))),\n-                Slice.class);\n-\n-        if (length < 0) {\n-            throw new IllegalArgumentException(\"Invalid VARCHAR length \" + length);\n-        }\n-        this.length = length;\n-    }\n-\n-    @Deprecated\n-    public int getLength()\n-    {\n-        return length;\n-    }\n-\n-    public int getLengthSafe()\n-    {\n-        if (isUnbounded()) {\n-            throw new IllegalStateException(\"Cannot get size of unbounded VARCHAR.\");\n-        }\n-        return length;\n-    }\n-\n-    public boolean isUnbounded()\n-    {\n-        return length == UNBOUNDED_LENGTH;\n-    }\n-\n-    @Override\n-    public boolean isComparable()\n-    {\n-        return true;\n-    }\n-\n-    @Override\n-    public boolean isOrderable()\n-    {\n-        return true;\n-    }\n-\n-    @Override\n-    public Object getObjectValue(SqlFunctionProperties properties, Block block, int position)\n-    {\n-        if (block.isNull(position)) {\n-            return null;\n-        }\n-\n-        return block.getSlice(position, 0, block.getSliceLength(position)).toStringUtf8();\n-    }\n-\n-    @Override\n-    public boolean equalTo(Block leftBlock, int leftPosition, Block rightBlock, int rightPosition)\n-    {\n-        int leftLength = leftBlock.getSliceLength(leftPosition);\n-        int rightLength = rightBlock.getSliceLength(rightPosition);\n-        if (leftLength != rightLength) {\n-            return false;\n-        }\n-        return leftBlock.equals(leftPosition, 0, rightBlock, rightPosition, 0, leftLength);\n-    }\n-\n-    @Override\n-    public long hash(Block block, int position)\n-    {\n-        return block.hash(position, 0, block.getSliceLength(position));\n-    }\n-\n-    @Override\n-    public int compareTo(Block leftBlock, int leftPosition, Block rightBlock, int rightPosition)\n-    {\n-        int leftLength = leftBlock.getSliceLength(leftPosition);\n-        int rightLength = rightBlock.getSliceLength(rightPosition);\n-        return leftBlock.compareTo(leftPosition, 0, leftLength, rightBlock, rightPosition, 0, rightLength);\n-    }\n-\n-    @Override\n-    public void appendTo(Block block, int position, BlockBuilder blockBuilder)\n-    {\n-        if (block.isNull(position)) {\n-            blockBuilder.appendNull();\n-        }\n-        else {\n-            block.writeBytesTo(position, 0, block.getSliceLength(position), blockBuilder);\n-            blockBuilder.closeEntry();\n-        }\n-    }\n-\n-    @Override\n-    public Slice getSlice(Block block, int position)\n-    {\n-        return block.getSlice(position, 0, block.getSliceLength(position));\n-    }\n-\n-    @Override\n-    public Slice getSliceUnchecked(Block block, int internalPosition)\n-    {\n-        return block.getSliceUnchecked(internalPosition, 0, block.getSliceLengthUnchecked(internalPosition));\n-    }\n-\n-    public void writeString(BlockBuilder blockBuilder, String value)\n-    {\n-        writeSlice(blockBuilder, Slices.utf8Slice(value));\n-    }\n-\n-    @Override\n-    public void writeSlice(BlockBuilder blockBuilder, Slice value)\n-    {\n-        writeSlice(blockBuilder, value, 0, value.length());\n-    }\n-\n-    @Override\n-    public void writeSlice(BlockBuilder blockBuilder, Slice value, int offset, int length)\n-    {\n-        blockBuilder.writeBytes(value, offset, length).closeEntry();\n-    }\n-\n-    @Override\n-    public boolean equals(Object o)\n-    {\n-        if (this == o) {\n-            return true;\n-        }\n-        if (o == null || getClass() != o.getClass()) {\n-            return false;\n-        }\n-\n-        VarcharType other = (VarcharType) o;\n-\n-        return Objects.equals(this.length, other.length);\n-    }\n-\n-    @Override\n-    public int hashCode()\n-    {\n-        return Objects.hash(length);\n-    }\n-\n-    @Override\n-    public String getDisplayName()\n-    {\n-        if (length == UNBOUNDED_LENGTH) {\n-            return getTypeSignature().getBase();\n-        }\n-\n-        return getTypeSignature().toString();\n-    }\n-\n-    @Override\n-    public String toString()\n-    {\n-        return getDisplayName();\n+        super(length, new TypeSignature(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ee1e6ace7a9da12094f056c7a577bdff90fa042"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ4MDg2Mw==", "bodyText": "remove this.", "url": "https://github.com/prestodb/presto/pull/14728#discussion_r455480863", "createdAt": "2020-07-16T03:01:08Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/metadata/BuiltInFunctionNamespaceManager.java", "diffHunk": "@@ -901,6 +904,7 @@ private SpecializedFunctionKey doGetSpecializedFunctionKey(Signature signature)\n         Iterable<SqlFunction> candidates = getFunctions(null, signature.getName());\n         // search for exact match\n         Type returnType = typeManager.getType(signature.getReturnType());\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da9cb046a909bcef151b4f6f76d0e9ab0e32aa2e"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ4MjAyNg==", "bodyText": "This logic should be in BuiltInFunctionNamespaceManager. FunctionManager should delegate function resolution to the FunctionNamespaceManager managing the specific function namespace. There should be no special handling necessary.", "url": "https://github.com/prestodb/presto/pull/14728#discussion_r455482026", "createdAt": "2020-07-16T03:05:22Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/metadata/FunctionManager.java", "diffHunk": "@@ -306,6 +306,15 @@ private FunctionHandle resolveFunctionInternal(Optional<TransactionId> transacti\n             return new BuiltInFunctionHandle(getMagicLiteralFunctionSignature(type));\n         }\n \n+        Optional<SqlFunction> udtFunction = builtInFunctionNamespaceManager.getUdtFunctionImplementation(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da9cb046a909bcef151b4f6f76d0e9ab0e32aa2e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ4MjI5MQ==", "bodyText": "I don't like special cases. It doesn't feel necessary. For database people, this behavior would be very unexpected. Either support orderable, or not. I think both are reasonable. The result of enum'A' > enum'B' might not make sense but that's ok I think.", "url": "https://github.com/prestodb/presto/pull/14728#discussion_r455482291", "createdAt": "2020-07-16T03:06:26Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/metadata/MetadataManager.java", "diffHunk": "@@ -236,7 +237,9 @@ public final void verifyComparableOrderableContract()\n                     missingOperators.put(type, NOT_EQUAL);\n                 }\n             }\n-            if (type.isOrderable()) {\n+            if (type.isOrderable() && !(type instanceof EnumType)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da9cb046a909bcef151b4f6f76d0e9ab0e32aa2e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ4MzcwNw==", "bodyText": "First of all, what is udt? I guess it's \"user defined type\". But the abbreviation is not obvious at all. So do not use it. Also FunctionImplementation has special meanings. If you search in this class, function implementation for builtin function means a java method handle. This is not a function implementation. This logic should be wrapped in BuiltinFunctionNamespaceManager.getFunctions. That way the function resolution for enum operators work the same way as function resolution works for all other functions. Just put the logic there, you don't need a function for this (thus avoid the naming issues).", "url": "https://github.com/prestodb/presto/pull/14728#discussion_r455483707", "createdAt": "2020-07-16T03:12:00Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/metadata/BuiltInFunctionNamespaceManager.java", "diffHunk": "@@ -962,9 +966,31 @@ private SpecializedFunctionKey doGetSpecializedFunctionKey(Signature signature)\n                     1);\n         }\n \n+        Optional<SqlFunction> udtFunction = getUdtFunctionImplementation(signature.getName(), signature.getArgumentTypes(), returnType);\n+        if (udtFunction.isPresent()) {\n+            return new SpecializedFunctionKey(udtFunction.get(), BoundVariables.builder().build(), argumentTypes.size());\n+        }\n+\n         throw new PrestoException(FUNCTION_IMPLEMENTATION_MISSING, format(\"%s not found\", signature));\n     }\n \n+    Optional<SqlFunction> getUdtFunctionImplementation(QualifiedFunctionName functionName, List<TypeSignature> argTypes, @Nullable Type returnType)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da9cb046a909bcef151b4f6f76d0e9ab0e32aa2e"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5NDc5MTM5", "url": "https://github.com/prestodb/presto/pull/14728#pullrequestreview-449479139", "createdAt": "2020-07-16T03:16:54Z", "commit": {"oid": "da9cb046a909bcef151b4f6f76d0e9ab0e32aa2e"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwMzoxNjo1NVrOGyYmZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwMzozMDozOFrOGyYznA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ4NTAzMQ==", "bodyText": "We normally use static import, so static import TINYINT, SMALLINT, etc.", "url": "https://github.com/prestodb/presto/pull/14728#discussion_r455485031", "createdAt": "2020-07-16T03:16:55Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/type/EnumOperators.java", "diffHunk": "@@ -0,0 +1,349 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.type;\n+\n+import com.facebook.presto.annotation.UsedByGeneratedCode;\n+import com.facebook.presto.common.function.OperatorType;\n+import com.facebook.presto.common.type.AbstractLongType;\n+import com.facebook.presto.common.type.BigintType;\n+import com.facebook.presto.common.type.BooleanType;\n+import com.facebook.presto.common.type.EnumType;\n+import com.facebook.presto.common.type.LongEnumType;\n+import com.facebook.presto.common.type.IntegerType;\n+import com.facebook.presto.common.type.SmallintType;\n+import com.facebook.presto.common.type.StandardTypes;\n+import com.facebook.presto.common.type.VarcharEnumType;\n+import com.facebook.presto.common.type.TinyintType;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeSignature;\n+import com.facebook.presto.metadata.PolymorphicScalarFunctionBuilder;\n+import com.facebook.presto.metadata.SignatureBuilder;\n+import com.facebook.presto.metadata.SqlScalarFunction;\n+import com.facebook.presto.operator.scalar.BuiltInScalarFunctionImplementation;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.function.Signature;\n+import com.facebook.presto.spi.function.SqlFunction;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Sets;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.Slices;\n+import io.airlift.slice.XxHash64;\n+\n+import javax.annotation.Nullable;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static com.facebook.presto.common.function.OperatorType.CAST;\n+import static com.facebook.presto.operator.scalar.BuiltInScalarFunctionImplementation.ArgumentProperty.valueTypeArgumentProperty;\n+import static com.facebook.presto.operator.scalar.BuiltInScalarFunctionImplementation.NullConvention.USE_NULL_FLAG;\n+import static com.facebook.presto.spi.StandardErrorCode.INVALID_CAST_ARGUMENT;\n+import static com.facebook.presto.spi.function.FunctionKind.SCALAR;\n+import static java.util.Objects.requireNonNull;\n+\n+public final class EnumOperators\n+{\n+    private static final TypeSignature BOOLEAN_TYPE_SIGNATURE = BooleanType.BOOLEAN.getTypeSignature();\n+\n+    private EnumOperators() {}\n+\n+    private static final Set<TypeSignature> INTEGER_TYPES = Sets.newHashSet(\n+            Stream.of(TinyintType.TINYINT, SmallintType.SMALLINT, IntegerType.INTEGER, BigintType.BIGINT)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da9cb046a909bcef151b4f6f76d0e9ab0e32aa2e"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ4NTM2Mg==", "bodyText": "I think you can just do\n... = ImmutableSet.of(\n            TINYINT.getTypeSignature(),\n            SMALLINT.getTypeSignature(),\n            INTEGER.getTypeSignature(),\n            BIGINT.getTypeSignature());", "url": "https://github.com/prestodb/presto/pull/14728#discussion_r455485362", "createdAt": "2020-07-16T03:18:14Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/type/EnumOperators.java", "diffHunk": "@@ -0,0 +1,349 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.type;\n+\n+import com.facebook.presto.annotation.UsedByGeneratedCode;\n+import com.facebook.presto.common.function.OperatorType;\n+import com.facebook.presto.common.type.AbstractLongType;\n+import com.facebook.presto.common.type.BigintType;\n+import com.facebook.presto.common.type.BooleanType;\n+import com.facebook.presto.common.type.EnumType;\n+import com.facebook.presto.common.type.LongEnumType;\n+import com.facebook.presto.common.type.IntegerType;\n+import com.facebook.presto.common.type.SmallintType;\n+import com.facebook.presto.common.type.StandardTypes;\n+import com.facebook.presto.common.type.VarcharEnumType;\n+import com.facebook.presto.common.type.TinyintType;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeSignature;\n+import com.facebook.presto.metadata.PolymorphicScalarFunctionBuilder;\n+import com.facebook.presto.metadata.SignatureBuilder;\n+import com.facebook.presto.metadata.SqlScalarFunction;\n+import com.facebook.presto.operator.scalar.BuiltInScalarFunctionImplementation;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.function.Signature;\n+import com.facebook.presto.spi.function.SqlFunction;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Sets;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.Slices;\n+import io.airlift.slice.XxHash64;\n+\n+import javax.annotation.Nullable;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static com.facebook.presto.common.function.OperatorType.CAST;\n+import static com.facebook.presto.operator.scalar.BuiltInScalarFunctionImplementation.ArgumentProperty.valueTypeArgumentProperty;\n+import static com.facebook.presto.operator.scalar.BuiltInScalarFunctionImplementation.NullConvention.USE_NULL_FLAG;\n+import static com.facebook.presto.spi.StandardErrorCode.INVALID_CAST_ARGUMENT;\n+import static com.facebook.presto.spi.function.FunctionKind.SCALAR;\n+import static java.util.Objects.requireNonNull;\n+\n+public final class EnumOperators\n+{\n+    private static final TypeSignature BOOLEAN_TYPE_SIGNATURE = BooleanType.BOOLEAN.getTypeSignature();\n+\n+    private EnumOperators() {}\n+\n+    private static final Set<TypeSignature> INTEGER_TYPES = Sets.newHashSet(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da9cb046a909bcef151b4f6f76d0e9ab0e32aa2e"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ4NTgxMQ==", "bodyText": "We don't normally use nullable parameters. Use Optional<Type> instead.", "url": "https://github.com/prestodb/presto/pull/14728#discussion_r455485811", "createdAt": "2020-07-16T03:19:54Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/type/EnumOperators.java", "diffHunk": "@@ -0,0 +1,349 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.type;\n+\n+import com.facebook.presto.annotation.UsedByGeneratedCode;\n+import com.facebook.presto.common.function.OperatorType;\n+import com.facebook.presto.common.type.AbstractLongType;\n+import com.facebook.presto.common.type.BigintType;\n+import com.facebook.presto.common.type.BooleanType;\n+import com.facebook.presto.common.type.EnumType;\n+import com.facebook.presto.common.type.LongEnumType;\n+import com.facebook.presto.common.type.IntegerType;\n+import com.facebook.presto.common.type.SmallintType;\n+import com.facebook.presto.common.type.StandardTypes;\n+import com.facebook.presto.common.type.VarcharEnumType;\n+import com.facebook.presto.common.type.TinyintType;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeSignature;\n+import com.facebook.presto.metadata.PolymorphicScalarFunctionBuilder;\n+import com.facebook.presto.metadata.SignatureBuilder;\n+import com.facebook.presto.metadata.SqlScalarFunction;\n+import com.facebook.presto.operator.scalar.BuiltInScalarFunctionImplementation;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.function.Signature;\n+import com.facebook.presto.spi.function.SqlFunction;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Sets;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.Slices;\n+import io.airlift.slice.XxHash64;\n+\n+import javax.annotation.Nullable;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static com.facebook.presto.common.function.OperatorType.CAST;\n+import static com.facebook.presto.operator.scalar.BuiltInScalarFunctionImplementation.ArgumentProperty.valueTypeArgumentProperty;\n+import static com.facebook.presto.operator.scalar.BuiltInScalarFunctionImplementation.NullConvention.USE_NULL_FLAG;\n+import static com.facebook.presto.spi.StandardErrorCode.INVALID_CAST_ARGUMENT;\n+import static com.facebook.presto.spi.function.FunctionKind.SCALAR;\n+import static java.util.Objects.requireNonNull;\n+\n+public final class EnumOperators\n+{\n+    private static final TypeSignature BOOLEAN_TYPE_SIGNATURE = BooleanType.BOOLEAN.getTypeSignature();\n+\n+    private EnumOperators() {}\n+\n+    private static final Set<TypeSignature> INTEGER_TYPES = Sets.newHashSet(\n+            Stream.of(TinyintType.TINYINT, SmallintType.SMALLINT, IntegerType.INTEGER, BigintType.BIGINT)\n+                    .map(Type::getTypeSignature).collect(Collectors.toSet()));\n+\n+    public static Optional<SqlFunction> makeOperator(OperatorType operatorType, List<Type> argTypes, @Nullable Type returnType)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da9cb046a909bcef151b4f6f76d0e9ab0e32aa2e"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ4NjIwOA==", "bodyText": "noneMatch(EnumType.class::isInstance)", "url": "https://github.com/prestodb/presto/pull/14728#discussion_r455486208", "createdAt": "2020-07-16T03:21:20Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/type/EnumOperators.java", "diffHunk": "@@ -0,0 +1,349 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.type;\n+\n+import com.facebook.presto.annotation.UsedByGeneratedCode;\n+import com.facebook.presto.common.function.OperatorType;\n+import com.facebook.presto.common.type.AbstractLongType;\n+import com.facebook.presto.common.type.BigintType;\n+import com.facebook.presto.common.type.BooleanType;\n+import com.facebook.presto.common.type.EnumType;\n+import com.facebook.presto.common.type.LongEnumType;\n+import com.facebook.presto.common.type.IntegerType;\n+import com.facebook.presto.common.type.SmallintType;\n+import com.facebook.presto.common.type.StandardTypes;\n+import com.facebook.presto.common.type.VarcharEnumType;\n+import com.facebook.presto.common.type.TinyintType;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeSignature;\n+import com.facebook.presto.metadata.PolymorphicScalarFunctionBuilder;\n+import com.facebook.presto.metadata.SignatureBuilder;\n+import com.facebook.presto.metadata.SqlScalarFunction;\n+import com.facebook.presto.operator.scalar.BuiltInScalarFunctionImplementation;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.function.Signature;\n+import com.facebook.presto.spi.function.SqlFunction;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Sets;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.Slices;\n+import io.airlift.slice.XxHash64;\n+\n+import javax.annotation.Nullable;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static com.facebook.presto.common.function.OperatorType.CAST;\n+import static com.facebook.presto.operator.scalar.BuiltInScalarFunctionImplementation.ArgumentProperty.valueTypeArgumentProperty;\n+import static com.facebook.presto.operator.scalar.BuiltInScalarFunctionImplementation.NullConvention.USE_NULL_FLAG;\n+import static com.facebook.presto.spi.StandardErrorCode.INVALID_CAST_ARGUMENT;\n+import static com.facebook.presto.spi.function.FunctionKind.SCALAR;\n+import static java.util.Objects.requireNonNull;\n+\n+public final class EnumOperators\n+{\n+    private static final TypeSignature BOOLEAN_TYPE_SIGNATURE = BooleanType.BOOLEAN.getTypeSignature();\n+\n+    private EnumOperators() {}\n+\n+    private static final Set<TypeSignature> INTEGER_TYPES = Sets.newHashSet(\n+            Stream.of(TinyintType.TINYINT, SmallintType.SMALLINT, IntegerType.INTEGER, BigintType.BIGINT)\n+                    .map(Type::getTypeSignature).collect(Collectors.toSet()));\n+\n+    public static Optional<SqlFunction> makeOperator(OperatorType operatorType, List<Type> argTypes, @Nullable Type returnType)\n+    {\n+        if (!(returnType instanceof EnumType) && argTypes.stream().noneMatch(t -> t instanceof EnumType)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da9cb046a909bcef151b4f6f76d0e9ab0e32aa2e"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ4ODQxMg==", "bodyText": "I don't think you need PolymorphicScalarFunction here. This is for special cases where there are multiple physical implementation of the same logical function (the same function signature has multiple java implementations). I don't think you need that for enum operator functions. So I think you can just create an abstract EnumSqlScalarFunction and override specialize to provide the implementation.", "url": "https://github.com/prestodb/presto/pull/14728#discussion_r455488412", "createdAt": "2020-07-16T03:30:38Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/type/EnumOperators.java", "diffHunk": "@@ -0,0 +1,349 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.type;\n+\n+import com.facebook.presto.annotation.UsedByGeneratedCode;\n+import com.facebook.presto.common.function.OperatorType;\n+import com.facebook.presto.common.type.AbstractLongType;\n+import com.facebook.presto.common.type.BigintType;\n+import com.facebook.presto.common.type.BooleanType;\n+import com.facebook.presto.common.type.EnumType;\n+import com.facebook.presto.common.type.LongEnumType;\n+import com.facebook.presto.common.type.IntegerType;\n+import com.facebook.presto.common.type.SmallintType;\n+import com.facebook.presto.common.type.StandardTypes;\n+import com.facebook.presto.common.type.VarcharEnumType;\n+import com.facebook.presto.common.type.TinyintType;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeSignature;\n+import com.facebook.presto.metadata.PolymorphicScalarFunctionBuilder;\n+import com.facebook.presto.metadata.SignatureBuilder;\n+import com.facebook.presto.metadata.SqlScalarFunction;\n+import com.facebook.presto.operator.scalar.BuiltInScalarFunctionImplementation;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.function.Signature;\n+import com.facebook.presto.spi.function.SqlFunction;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Sets;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.Slices;\n+import io.airlift.slice.XxHash64;\n+\n+import javax.annotation.Nullable;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static com.facebook.presto.common.function.OperatorType.CAST;\n+import static com.facebook.presto.operator.scalar.BuiltInScalarFunctionImplementation.ArgumentProperty.valueTypeArgumentProperty;\n+import static com.facebook.presto.operator.scalar.BuiltInScalarFunctionImplementation.NullConvention.USE_NULL_FLAG;\n+import static com.facebook.presto.spi.StandardErrorCode.INVALID_CAST_ARGUMENT;\n+import static com.facebook.presto.spi.function.FunctionKind.SCALAR;\n+import static java.util.Objects.requireNonNull;\n+\n+public final class EnumOperators\n+{\n+    private static final TypeSignature BOOLEAN_TYPE_SIGNATURE = BooleanType.BOOLEAN.getTypeSignature();\n+\n+    private EnumOperators() {}\n+\n+    private static final Set<TypeSignature> INTEGER_TYPES = Sets.newHashSet(\n+            Stream.of(TinyintType.TINYINT, SmallintType.SMALLINT, IntegerType.INTEGER, BigintType.BIGINT)\n+                    .map(Type::getTypeSignature).collect(Collectors.toSet()));\n+\n+    public static Optional<SqlFunction> makeOperator(OperatorType operatorType, List<Type> argTypes, @Nullable Type returnType)\n+    {\n+        if (!(returnType instanceof EnumType) && argTypes.stream().noneMatch(t -> t instanceof EnumType)) {\n+            return Optional.empty();\n+        }\n+\n+        boolean isInt = !argTypes.isEmpty() && argTypes.get(0) instanceof LongEnumType;\n+        List<TypeSignature> argTypeSignatures = argTypes.stream()\n+                .map(Type::getTypeSignature)\n+                .collect(Collectors.toList());\n+\n+        switch (operatorType) {\n+            case CAST:\n+                requireNonNull(returnType);  // return type must be provided for CAST function lookup\n+                if (returnType instanceof EnumType) {\n+                    return makeCastToEnum(argTypes.get(0).getTypeSignature(), (EnumType) returnType);\n+                }\n+                if (argTypes.get(0) instanceof EnumType) {\n+                    return makeCastFromEnum((EnumType) argTypes.get(0), returnType.getTypeSignature());\n+                }\n+                return Optional.empty();\n+            case EQUAL:\n+            case NOT_EQUAL:\n+                if (!(argTypes.get(0) instanceof EnumType) || !argTypes.get(0).equals(argTypes.get(1))) {\n+                    return Optional.empty();\n+                }\n+                return buildFunction(\n+                        operatorType,\n+                        argTypeSignatures,\n+                        BOOLEAN_TYPE_SIGNATURE,\n+                        true,\n+                        isInt ? \"integerEnumCompare\" : \"stringEnumCompare\",\n+                        ImmutableList.of(OperatorType.NOT_EQUAL.equals(operatorType)));\n+            case IS_DISTINCT_FROM:\n+                if (!(argTypes.get(0) instanceof EnumType) || !argTypes.get(0).equals(argTypes.get(1))) {\n+                    return Optional.empty();\n+                }\n+                return buildFunction(\n+                        operatorType,\n+                        argTypeSignatures,\n+                        BOOLEAN_TYPE_SIGNATURE,\n+                        false,\n+                        isInt ? \"integerEnumIsDistinct\" : \"stringEnumIsDistinct\",\n+                        ImmutableList.of(),\n+                        new BuiltInScalarFunctionImplementation.ArgumentProperty[] {\n+                                valueTypeArgumentProperty(USE_NULL_FLAG),\n+                                valueTypeArgumentProperty(USE_NULL_FLAG)\n+                        });\n+            case HASH_CODE:\n+                return buildFunction(\n+                        operatorType,\n+                        argTypeSignatures,\n+                        BigintType.BIGINT.getTypeSignature(),\n+                        false,\n+                        isInt ? \"integerEnumHash\" : \"stringEnumHash\",\n+                        ImmutableList.of());\n+            case XX_HASH_64:\n+                return buildFunction(\n+                        operatorType,\n+                        argTypeSignatures,\n+                        BigintType.BIGINT.getTypeSignature(),\n+                        false,\n+                        isInt ? \"integerEnumXxHash64\" : \"stringEnumHash\",\n+                        ImmutableList.of());\n+            case INDETERMINATE:\n+                return buildFunction(\n+                        operatorType,\n+                        argTypeSignatures,\n+                        BOOLEAN_TYPE_SIGNATURE,\n+                        false,\n+                        isInt ? \"integerEnumIndeterminate\" : \"stringEnumIndeterminate\",\n+                        ImmutableList.of(),\n+                        new BuiltInScalarFunctionImplementation.ArgumentProperty[] {\n+                                valueTypeArgumentProperty(USE_NULL_FLAG)\n+                        });\n+            default:\n+                return Optional.empty();\n+        }\n+    }\n+\n+    private static Optional<SqlFunction> makeCastToEnum(TypeSignature fromType, EnumType toType)\n+    {\n+        if (toType instanceof LongEnumType) {\n+            if (INTEGER_TYPES.contains(fromType)) {\n+                return buildCastToEnum(fromType, toType, \"integerEnumValueLookup\");\n+            }\n+            if (StandardTypes.VARCHAR.equals(fromType.getBase())) {\n+                return buildCastToEnum(fromType, toType, \"integerEnumKeyLookup\");\n+            }\n+        }\n+        if (toType instanceof VarcharEnumType) {\n+            if (StandardTypes.VARCHAR.equals(fromType.getBase())) {\n+                return buildCastToEnum(fromType, toType, \"stringEnumKeyOrValueLookup\");\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    private static Optional<SqlFunction> makeCastFromEnum(EnumType fromType, TypeSignature toType)\n+    {\n+        if (fromType instanceof LongEnumType) {\n+            if (BigintType.BIGINT.getTypeSignature().equals(toType)) {\n+                return buildCastFromEnum(fromType, toType, \"integerEnumAsPrimitive\");\n+            }\n+        }\n+        if (fromType instanceof VarcharEnumType) {\n+            if (StandardTypes.VARCHAR.equals(toType.getBase())) {\n+                return buildCastFromEnum(fromType, toType, \"stringEnumAsPrimitive\");\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    private static Optional<SqlFunction> buildCastToEnum(TypeSignature fromType, EnumType toType, String methodName)\n+    {\n+        return buildFunction(\n+                CAST,\n+                ImmutableList.of(fromType),\n+                toType.getTypeSignature(),\n+                false,\n+                methodName,\n+                ImmutableList.of(toType));\n+    }\n+\n+    private static Optional<SqlFunction> buildCastFromEnum(EnumType fromType, TypeSignature toType, String methodName)\n+    {\n+        return buildFunction(\n+                CAST,\n+                ImmutableList.of(fromType.getTypeSignature()),\n+                toType,\n+                false,\n+                methodName,\n+                ImmutableList.of());\n+    }\n+\n+    private static Optional<SqlFunction> buildFunction(OperatorType operatorType, List<TypeSignature> argTypes, TypeSignature returnType,\n+            boolean nullableResult, String methodName, List<Object> extraParams)\n+    {\n+        return buildFunction(operatorType, argTypes, returnType, nullableResult, methodName, extraParams, null);\n+    }\n+\n+    private static Optional<SqlFunction> buildFunction(OperatorType operatorType, List<TypeSignature> argTypes, TypeSignature returnType,\n+            boolean nullableResult, String methodName, List<Object> extraParams, BuiltInScalarFunctionImplementation.ArgumentProperty[] argumentProperties)\n+    {\n+        Signature signature = SignatureBuilder.builder()\n+                .kind(SCALAR)\n+                .operatorType(operatorType)\n+                .argumentTypes(argTypes)\n+                .returnType(returnType)\n+                .build();\n+\n+        return Optional.of(SqlScalarFunction.builder(EnumOperators.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da9cb046a909bcef151b4f6f76d0e9ab0e32aa2e"}, "originalPosition": 219}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "29d596ce6706ef4baf8bd5bb479d37b1b0048696", "author": {"user": {"login": "daniel-ohayon", "name": "Daniel Ohayon"}}, "url": "https://github.com/prestodb/presto/commit/29d596ce6706ef4baf8bd5bb479d37b1b0048696", "committedDate": "2020-07-16T02:17:45Z", "message": "Support enum <> JSON cast"}, "afterCommit": {"oid": "e163179061d68640267bd9e1988d927a2e657f18", "author": {"user": {"login": "daniel-ohayon", "name": "Daniel Ohayon"}}, "url": "https://github.com/prestodb/presto/commit/e163179061d68640267bd9e1988d927a2e657f18", "committedDate": "2020-07-22T01:09:52Z", "message": "Support enum <> JSON cast"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e163179061d68640267bd9e1988d927a2e657f18", "author": {"user": {"login": "daniel-ohayon", "name": "Daniel Ohayon"}}, "url": "https://github.com/prestodb/presto/commit/e163179061d68640267bd9e1988d927a2e657f18", "committedDate": "2020-07-22T01:09:52Z", "message": "Support enum <> JSON cast"}, "afterCommit": {"oid": "cf37c7ddedb2e17908f2d718a935c6d789dc53cd", "author": {"user": {"login": "daniel-ohayon", "name": "Daniel Ohayon"}}, "url": "https://github.com/prestodb/presto/commit/cf37c7ddedb2e17908f2d718a935c6d789dc53cd", "committedDate": "2020-07-22T01:26:06Z", "message": "Support enum <> JSON cast"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cf37c7ddedb2e17908f2d718a935c6d789dc53cd", "author": {"user": {"login": "daniel-ohayon", "name": "Daniel Ohayon"}}, "url": "https://github.com/prestodb/presto/commit/cf37c7ddedb2e17908f2d718a935c6d789dc53cd", "committedDate": "2020-07-22T01:26:06Z", "message": "Support enum <> JSON cast"}, "afterCommit": {"oid": "cf63560655a0ab742252e62ef2e3981e3a8a4622", "author": {"user": {"login": "daniel-ohayon", "name": "Daniel Ohayon"}}, "url": "https://github.com/prestodb/presto/commit/cf63560655a0ab742252e62ef2e3981e3a8a4622", "committedDate": "2020-07-22T03:20:14Z", "message": "Support enum <> JSON cast"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzNTQ0NTQz", "url": "https://github.com/prestodb/presto/pull/14728#pullrequestreview-453544543", "createdAt": "2020-07-22T17:43:05Z", "commit": {"oid": "de1f2122db58b7065eb99d84202d4452d957aad1"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNzo0MzowNlrOG1tVbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNzo1MTozMlrOG1tprg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3MDQ3OQ==", "bodyText": "What does NONE mean?", "url": "https://github.com/prestodb/presto/pull/14728#discussion_r458970479", "createdAt": "2020-07-22T17:43:06Z", "author": {"login": "rongrong"}, "path": "presto-common/src/main/java/com/facebook/presto/common/type/EnumTypeConstraint.java", "diffHunk": "@@ -0,0 +1,21 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.common.type;\n+\n+public enum EnumTypeConstraint\n+{\n+    NONE,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de1f2122db58b7065eb99d84202d4452d957aad1"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3MDkxMg==", "bodyText": "Static import.", "url": "https://github.com/prestodb/presto/pull/14728#discussion_r458970912", "createdAt": "2020-07-22T17:43:48Z", "author": {"login": "rongrong"}, "path": "presto-common/src/main/java/com/facebook/presto/common/type/LongEnumType.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.common.type;\n+\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.function.SqlFunctionProperties;\n+\n+import java.util.Map;\n+\n+public class LongEnumType\n+        extends AbstractLongType\n+        implements EnumType<Long>\n+{\n+    private final Map<String, Long> enumMap;\n+\n+    public LongEnumType(String name, Map<String, Long> enumMap)\n+    {\n+        super(new TypeSignature(name));\n+        TypeUtils.validateEnumEntries(name, enumMap);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de1f2122db58b7065eb99d84202d4452d957aad1"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3MTI3Mw==", "bodyText": "Static import", "url": "https://github.com/prestodb/presto/pull/14728#discussion_r458971273", "createdAt": "2020-07-22T17:44:24Z", "author": {"login": "rongrong"}, "path": "presto-common/src/main/java/com/facebook/presto/common/type/VarcharEnumType.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.common.type;\n+\n+import java.util.Map;\n+\n+public class VarcharEnumType\n+        extends AbstractVarcharType\n+        implements EnumType<String>\n+{\n+    private final Map<String, String> enumMap;\n+\n+    public VarcharEnumType(String name, Map<String, String> enumMap)\n+    {\n+        super(VarcharType.UNBOUNDED_LENGTH, TypeSignature.parseTypeSignature(name));\n+        TypeUtils.validateEnumEntries(name, enumMap);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de1f2122db58b7065eb99d84202d4452d957aad1"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3NTY2Mg==", "bodyText": "This can be simplified as\ncheckArgument(entries.values().stream().filter(value -> value != null).collect(toImmutableSet()).size() == entries.size(), format(\"Enum %s cannot contain null or duplicate values\", enumName));\n\nYou can use checkArgument for null check on key as well. These should be IllegalArgumentException.", "url": "https://github.com/prestodb/presto/pull/14728#discussion_r458975662", "createdAt": "2020-07-22T17:51:32Z", "author": {"login": "rongrong"}, "path": "presto-common/src/main/java/com/facebook/presto/common/type/TypeUtils.java", "diffHunk": "@@ -101,4 +107,23 @@ static void checkElementNotNull(boolean isNull, String errorMsg)\n             throw new NotSupportedException(errorMsg);\n         }\n     }\n+\n+    static <V> void validateEnumEntries(String enumName, Map<String, V> entries)\n+    {\n+        requireNonNull(enumName, \"Enum name cannot be null\");\n+        requireNonNull(entries, \"Enum entries cannot be null\");\n+        if (entries.containsKey(null)) {\n+            throw new NotSupportedException(String.format(\"Enum %s cannot contain null key\", enumName));\n+        }\n+        Set<V> visited = new HashSet<>();\n+        for (V value : entries.values()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de1f2122db58b7065eb99d84202d4452d957aad1"}, "originalPosition": 26}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cf63560655a0ab742252e62ef2e3981e3a8a4622", "author": {"user": {"login": "daniel-ohayon", "name": "Daniel Ohayon"}}, "url": "https://github.com/prestodb/presto/commit/cf63560655a0ab742252e62ef2e3981e3a8a4622", "committedDate": "2020-07-22T03:20:14Z", "message": "Support enum <> JSON cast"}, "afterCommit": {"oid": "ca2a73106c5538189e11403ad04ee403dd26cfcf", "author": {"user": {"login": "daniel-ohayon", "name": "Daniel Ohayon"}}, "url": "https://github.com/prestodb/presto/commit/ca2a73106c5538189e11403ad04ee403dd26cfcf", "committedDate": "2020-07-22T18:46:27Z", "message": "Support enum <> JSON cast"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ca2a73106c5538189e11403ad04ee403dd26cfcf", "author": {"user": {"login": "daniel-ohayon", "name": "Daniel Ohayon"}}, "url": "https://github.com/prestodb/presto/commit/ca2a73106c5538189e11403ad04ee403dd26cfcf", "committedDate": "2020-07-22T18:46:27Z", "message": "Support enum <> JSON cast"}, "afterCommit": {"oid": "11636eab4dbcf5faa1b31a39ae8f6df6b19bd17a", "author": {"user": {"login": "daniel-ohayon", "name": "Daniel Ohayon"}}, "url": "https://github.com/prestodb/presto/commit/11636eab4dbcf5faa1b31a39ae8f6df6b19bd17a", "committedDate": "2020-07-23T16:57:06Z", "message": "Support enum <> JSON cast"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "11636eab4dbcf5faa1b31a39ae8f6df6b19bd17a", "author": {"user": {"login": "daniel-ohayon", "name": "Daniel Ohayon"}}, "url": "https://github.com/prestodb/presto/commit/11636eab4dbcf5faa1b31a39ae8f6df6b19bd17a", "committedDate": "2020-07-23T16:57:06Z", "message": "Support enum <> JSON cast"}, "afterCommit": {"oid": "98331516d1e0e804f5ed638c637e90002fb2d334", "author": {"user": {"login": "daniel-ohayon", "name": "Daniel Ohayon"}}, "url": "https://github.com/prestodb/presto/commit/98331516d1e0e804f5ed638c637e90002fb2d334", "committedDate": "2020-07-24T21:43:17Z", "message": "Support enum <> JSON cast"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MzAzNzg3", "url": "https://github.com/prestodb/presto/pull/14728#pullrequestreview-455303787", "createdAt": "2020-07-25T19:04:59Z", "commit": {"oid": "98331516d1e0e804f5ed638c637e90002fb2d334"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQxOTowNDo1OVrOG3Grgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQxOTowNDo1OVrOG3Grgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzNDMwNw==", "bodyText": "Would this allow casting from other numeric types to LongEnumType ? eg. CAST(1.01 AS Country). It will get tricky if there is implicit casting", "url": "https://github.com/prestodb/presto/pull/14728#discussion_r460434307", "createdAt": "2020-07-25T19:04:59Z", "author": {"login": "tejasapatil"}, "path": "presto-common/src/main/java/com/facebook/presto/common/type/LongEnumType.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.common.type;\n+\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.function.SqlFunctionProperties;\n+\n+import java.util.Map;\n+\n+import static com.facebook.presto.common.type.BigintType.BIGINT;\n+import static com.facebook.presto.common.type.TypeUtils.validateEnumEntries;\n+\n+public class LongEnumType\n+        extends AbstractLongType", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98331516d1e0e804f5ed638c637e90002fb2d334"}, "originalPosition": 25}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "98331516d1e0e804f5ed638c637e90002fb2d334", "author": {"user": {"login": "daniel-ohayon", "name": "Daniel Ohayon"}}, "url": "https://github.com/prestodb/presto/commit/98331516d1e0e804f5ed638c637e90002fb2d334", "committedDate": "2020-07-24T21:43:17Z", "message": "Support enum <> JSON cast"}, "afterCommit": {"oid": "d0491d5e529e409721cbb548b23026e7bd198759", "author": {"user": {"login": "daniel-ohayon", "name": "Daniel Ohayon"}}, "url": "https://github.com/prestodb/presto/commit/d0491d5e529e409721cbb548b23026e7bd198759", "committedDate": "2020-07-26T21:19:28Z", "message": "Support enum <> JSON cast"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d0491d5e529e409721cbb548b23026e7bd198759", "author": {"user": {"login": "daniel-ohayon", "name": "Daniel Ohayon"}}, "url": "https://github.com/prestodb/presto/commit/d0491d5e529e409721cbb548b23026e7bd198759", "committedDate": "2020-07-26T21:19:28Z", "message": "Support enum <> JSON cast"}, "afterCommit": {"oid": "7da5d10e9938adf11f1ef793c7db4fca71d7e15c", "author": {"user": {"login": "daniel-ohayon", "name": "Daniel Ohayon"}}, "url": "https://github.com/prestodb/presto/commit/7da5d10e9938adf11f1ef793c7db4fca71d7e15c", "committedDate": "2020-07-26T23:54:43Z", "message": "Support enum <> JSON cast"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7da5d10e9938adf11f1ef793c7db4fca71d7e15c", "author": {"user": {"login": "daniel-ohayon", "name": "Daniel Ohayon"}}, "url": "https://github.com/prestodb/presto/commit/7da5d10e9938adf11f1ef793c7db4fca71d7e15c", "committedDate": "2020-07-26T23:54:43Z", "message": "Support enum <> JSON cast"}, "afterCommit": {"oid": "88a0f147343f20082bc7e3ad1015ceec1103ceea", "author": {"user": {"login": "daniel-ohayon", "name": "Daniel Ohayon"}}, "url": "https://github.com/prestodb/presto/commit/88a0f147343f20082bc7e3ad1015ceec1103ceea", "committedDate": "2020-07-27T02:42:51Z", "message": "Support enum <> JSON cast"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2MDQyMTk2", "url": "https://github.com/prestodb/presto/pull/14728#pullrequestreview-456042196", "createdAt": "2020-07-27T18:43:56Z", "commit": {"oid": "29110d852fb3707ae959b7d80c7010525932e99b"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxODo0Mzo1NlrOG3u-wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxOToxNzo0NlrOG3wGHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5NDU5Mg==", "bodyText": "Can we just use the generic is-a description rather than referring to specific syntax in Java?", "url": "https://github.com/prestodb/presto/pull/14728#discussion_r461094592", "createdAt": "2020-07-27T18:43:56Z", "author": {"login": "rongrong"}, "path": "presto-docs/src/main/sphinx/develop/functions.rst", "diffHunk": "@@ -116,8 +116,12 @@ To make our previous example work with any type we need the following:\n   The ``@TypeParameter`` annotation is used to declare a type parameter which can\n   be used in the argument types ``@SqlType`` annotation, or return type of the function.\n   It can also be used to annotate a parameter of type ``Type``. At runtime, the engine\n-  will bind the concrete type to this parameter. ``@OperatorDependency`` may be used\n-  to declare that an additional function for operating on the given type parameter is needed.\n+  will bind the concrete type to this parameter. Optionally, the type parameter\n+  can be constrained to descendants of a particular type by providing a ``typeBound``\n+  to ``@TypeParameter``. This constraint is similar to the bounded type parameter construct", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29110d852fb3707ae959b7d80c7010525932e99b"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5NjkwOA==", "bodyText": "If you prefer to use the word bound, I think this is better named as boundTo / boundedBy. (Only for annotation, you can keep typeBound in TypeVariableConstraint.", "url": "https://github.com/prestodb/presto/pull/14728#discussion_r461096908", "createdAt": "2020-07-27T18:48:09Z", "author": {"login": "rongrong"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/function/TypeParameter.java", "diffHunk": "@@ -28,4 +30,6 @@\n public @interface TypeParameter\n {\n     String value();\n+\n+    Class<? extends Type> typeBound() default Type.class;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29110d852fb3707ae959b7d80c7010525932e99b"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTEwODA4OA==", "bodyText": "You might want to modify the comment on line 433 as well. Maybe just change it to something generic as // Handle qualified name. Then add additional comment for // Check whether the qualifiedName is a column reference and here you can just say // Check whether the qualifiedName is an enum literal", "url": "https://github.com/prestodb/presto/pull/14728#discussion_r461108088", "createdAt": "2020-07-27T19:08:41Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/ExpressionAnalyzer.java", "diffHunk": "@@ -437,6 +438,11 @@ protected Type visitDereferenceExpression(DereferenceExpression node, StackableA\n                     return handleResolvedField(node, resolvedField.get(), context);\n                 }\n                 if (!scope.isColumnReference(qualifiedName)) {\n+                    // try to match it to an enum literal (eg Mood.HAPPY)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b4af2cdd6917e4642a9683229579672b9771b86"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTEwOTMzNA==", "bodyText": "Also the error thrown probably need to be changed as well. If you look at missingAttributeException it says \"column .. cannot be resolved\", which is no longer accurate.", "url": "https://github.com/prestodb/presto/pull/14728#discussion_r461109334", "createdAt": "2020-07-27T19:10:54Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/ExpressionAnalyzer.java", "diffHunk": "@@ -437,6 +438,11 @@ protected Type visitDereferenceExpression(DereferenceExpression node, StackableA\n                     return handleResolvedField(node, resolvedField.get(), context);\n                 }\n                 if (!scope.isColumnReference(qualifiedName)) {\n+                    // try to match it to an enum literal (eg Mood.HAPPY)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTEwODA4OA=="}, "originalCommit": {"oid": "1b4af2cdd6917e4642a9683229579672b9771b86"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTExMDQ5Mw==", "bodyText": "the function should directly take qualifiedName rather than the node.", "url": "https://github.com/prestodb/presto/pull/14728#discussion_r461110493", "createdAt": "2020-07-27T19:13:06Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/ExpressionAnalyzer.java", "diffHunk": "@@ -437,6 +438,11 @@ protected Type visitDereferenceExpression(DereferenceExpression node, StackableA\n                     return handleResolvedField(node, resolvedField.get(), context);\n                 }\n                 if (!scope.isColumnReference(qualifiedName)) {\n+                    // try to match it to an enum literal (eg Mood.HAPPY)\n+                    Optional<EnumType> enumType = ExpressionTreeUtils.maybeGetEnumTypeFromLiteral(node, typeManager);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b4af2cdd6917e4642a9683229579672b9771b86"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTExMTExMw==", "bodyText": "toString is not safe here. node.getBase() potentially can be any expression. So you really want the input of this function to be just the QualifiedName and you want to use QualifiedName.getPrefix() here.", "url": "https://github.com/prestodb/presto/pull/14728#discussion_r461111113", "createdAt": "2020-07-27T19:14:21Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/ExpressionTreeUtils.java", "diffHunk": "@@ -112,4 +122,33 @@ public static boolean isEqualComparisonExpression(Expression expression)\n     {\n         return expression instanceof ComparisonExpression && ((ComparisonExpression) expression).getOperator() == ComparisonExpression.Operator.EQUAL;\n     }\n+\n+    public static Optional<EnumType> maybeGetEnumTypeFromLiteral(DereferenceExpression node, TypeManager typeManager)\n+    {\n+        try {\n+            Type baseType = typeManager.getType(parseTypeSignature(node.getBase().toString()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b4af2cdd6917e4642a9683229579672b9771b86"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTExMTkwNA==", "bodyText": "These functions ideally should all just take QualifiedName if DereferenceExpression is used, either get QualifiedName from it, or you need to check the base is an Identifier. Blindly use toString is error prune.", "url": "https://github.com/prestodb/presto/pull/14728#discussion_r461111904", "createdAt": "2020-07-27T19:15:54Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/ExpressionTreeUtils.java", "diffHunk": "@@ -112,4 +122,33 @@ public static boolean isEqualComparisonExpression(Expression expression)\n     {\n         return expression instanceof ComparisonExpression && ((ComparisonExpression) expression).getOperator() == ComparisonExpression.Operator.EQUAL;\n     }\n+\n+    public static Optional<EnumType> maybeGetEnumTypeFromLiteral(DereferenceExpression node, TypeManager typeManager)\n+    {\n+        try {\n+            Type baseType = typeManager.getType(parseTypeSignature(node.getBase().toString()));\n+            if (baseType instanceof EnumType) {\n+                return Optional.of((EnumType) baseType);\n+            }\n+        }\n+        catch (IllegalArgumentException e) {\n+            return Optional.empty();\n+        }\n+        return Optional.empty();\n+    }\n+\n+    public static boolean isEnumLiteral(DereferenceExpression node, Type nodeType)\n+    {\n+        return nodeType instanceof EnumType && node.getBase().toString().equalsIgnoreCase(nodeType.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b4af2cdd6917e4642a9683229579672b9771b86"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTExMjg2Mg==", "bodyText": "Either put validation that the node is a valid enum, or make sure only valid enum can be used to call this. I think this function should call isEnumLiteral.", "url": "https://github.com/prestodb/presto/pull/14728#discussion_r461112862", "createdAt": "2020-07-27T19:17:46Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/ExpressionTreeUtils.java", "diffHunk": "@@ -112,4 +122,33 @@ public static boolean isEqualComparisonExpression(Expression expression)\n     {\n         return expression instanceof ComparisonExpression && ((ComparisonExpression) expression).getOperator() == ComparisonExpression.Operator.EQUAL;\n     }\n+\n+    public static Optional<EnumType> maybeGetEnumTypeFromLiteral(DereferenceExpression node, TypeManager typeManager)\n+    {\n+        try {\n+            Type baseType = typeManager.getType(parseTypeSignature(node.getBase().toString()));\n+            if (baseType instanceof EnumType) {\n+                return Optional.of((EnumType) baseType);\n+            }\n+        }\n+        catch (IllegalArgumentException e) {\n+            return Optional.empty();\n+        }\n+        return Optional.empty();\n+    }\n+\n+    public static boolean isEnumLiteral(DereferenceExpression node, Type nodeType)\n+    {\n+        return nodeType instanceof EnumType && node.getBase().toString().equalsIgnoreCase(nodeType.toString());\n+    }\n+\n+    public static Object resolveEnumLiteral(DereferenceExpression literal, EnumType enumType)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b4af2cdd6917e4642a9683229579672b9771b86"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2MDY3Nzcw", "url": "https://github.com/prestodb/presto/pull/14728#pullrequestreview-456067770", "createdAt": "2020-07-27T19:22:34Z", "commit": {"oid": "88a0f147343f20082bc7e3ad1015ceec1103ceea"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "88a0f147343f20082bc7e3ad1015ceec1103ceea", "author": {"user": {"login": "daniel-ohayon", "name": "Daniel Ohayon"}}, "url": "https://github.com/prestodb/presto/commit/88a0f147343f20082bc7e3ad1015ceec1103ceea", "committedDate": "2020-07-27T02:42:51Z", "message": "Support enum <> JSON cast"}, "afterCommit": {"oid": "8faecd0e3aa8b8a06e66d652d65f4039752ffa59", "author": {"user": {"login": "daniel-ohayon", "name": "Daniel Ohayon"}}, "url": "https://github.com/prestodb/presto/commit/8faecd0e3aa8b8a06e66d652d65f4039752ffa59", "committedDate": "2020-07-28T04:22:52Z", "message": "Support enum <> JSON cast"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8faecd0e3aa8b8a06e66d652d65f4039752ffa59", "author": {"user": {"login": "daniel-ohayon", "name": "Daniel Ohayon"}}, "url": "https://github.com/prestodb/presto/commit/8faecd0e3aa8b8a06e66d652d65f4039752ffa59", "committedDate": "2020-07-28T04:22:52Z", "message": "Support enum <> JSON cast"}, "afterCommit": {"oid": "0b8e3e180887c08f68a1cde23a3e7f3f1db3bf54", "author": {"user": {"login": "daniel-ohayon", "name": "Daniel Ohayon"}}, "url": "https://github.com/prestodb/presto/commit/0b8e3e180887c08f68a1cde23a3e7f3f1db3bf54", "committedDate": "2020-07-28T15:42:53Z", "message": "Support enum <> JSON cast"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0b8e3e180887c08f68a1cde23a3e7f3f1db3bf54", "author": {"user": {"login": "daniel-ohayon", "name": "Daniel Ohayon"}}, "url": "https://github.com/prestodb/presto/commit/0b8e3e180887c08f68a1cde23a3e7f3f1db3bf54", "committedDate": "2020-07-28T15:42:53Z", "message": "Support enum <> JSON cast"}, "afterCommit": {"oid": "603c113f76754142a4127d0a6086aaaadf374b37", "author": {"user": {"login": "daniel-ohayon", "name": "Daniel Ohayon"}}, "url": "https://github.com/prestodb/presto/commit/603c113f76754142a4127d0a6086aaaadf374b37", "committedDate": "2020-07-29T01:06:51Z", "message": "Support enum <> JSON cast"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MDk2NzE1", "url": "https://github.com/prestodb/presto/pull/14728#pullrequestreview-457096715", "createdAt": "2020-07-28T23:28:03Z", "commit": {"oid": "01bee5b6de6374dc1d42cfb9dc18bf4e379f9737"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMzoyODowM1rOG4jN9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMzoyODowM1rOG4jN9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk1MDQ1NA==", "bodyText": "Do we foresee more usage of these newly added helper functions? If the only place we will need this is in FunctionParserHelper I prefer to directly inline this rather than defining more helper functions. Also Signature is in spi so these functions will be visible for all connectors as well.", "url": "https://github.com/prestodb/presto/pull/14728#discussion_r461950454", "createdAt": "2020-07-28T23:28:03Z", "author": {"login": "rongrong"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/function/Signature.java", "diffHunk": "@@ -174,6 +175,11 @@ public static TypeVariableConstraint typeVariable(String name)\n         return new TypeVariableConstraint(name, false, false, null);\n     }\n \n+    public static TypeVariableConstraint typeVariable(String name, Class<? extends Type> typeBound)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01bee5b6de6374dc1d42cfb9dc18bf4e379f9737"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MTQ0Mzg1", "url": "https://github.com/prestodb/presto/pull/14728#pullrequestreview-457144385", "createdAt": "2020-07-29T02:01:38Z", "commit": {"oid": "0fea9ac43f4c7a15c0a02889f3062cf9d9f6a89d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMjowMTozOFrOG4l2nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMjowMTozOFrOG4l2nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk5MzYzMQ==", "bodyText": "Let's not do this. You can add a flag to enable / disable this at the very least. This logic doesn't belong here. Please keep interfaces clean.\nThe way I prefer would be to change the implementation of rewriteIdentifiersToSymbolReferences and add a rewriteDereference to check if (base instanceof Identifier) return node;", "url": "https://github.com/prestodb/presto/pull/14728#discussion_r461993631", "createdAt": "2020-07-29T02:01:38Z", "author": {"login": "rongrong"}, "path": "presto-main/src/test/java/com/facebook/presto/operator/scalar/FunctionAssertions.java", "diffHunk": "@@ -751,7 +752,13 @@ public static Expression createExpression(Session session, String expression, Me\n     {\n         Expression parsedExpression = SQL_PARSER.createExpression(expression, createParsingOptions(session));\n \n-        parsedExpression = rewriteIdentifiersToSymbolReferences(parsedExpression);\n+        if (metadata.getTypeManager().getTypes().stream().noneMatch(EnumType.class::isInstance)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fea9ac43f4c7a15c0a02889f3062cf9d9f6a89d"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MTU2OTY5", "url": "https://github.com/prestodb/presto/pull/14728#pullrequestreview-457156969", "createdAt": "2020-07-29T02:44:15Z", "commit": {"oid": "0fea9ac43f4c7a15c0a02889f3062cf9d9f6a89d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMjo0NDoxNVrOG4miNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMjo0NDoxNVrOG4miNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAwNDc5MA==", "bodyText": "I think our naming convention would be to name this class AbstractTestEnum", "url": "https://github.com/prestodb/presto/pull/14728#discussion_r462004790", "createdAt": "2020-07-29T02:44:15Z", "author": {"login": "rongrong"}, "path": "presto-main/src/test/java/com/facebook/presto/type/TestEnumBase.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.type;\n+\n+import com.facebook.presto.common.type.LongEnumType;\n+import com.facebook.presto.common.type.VarcharEnumType;\n+import com.facebook.presto.operator.scalar.AbstractTestFunctions;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.Assert.ThrowingRunnable;\n+import org.testng.annotations.BeforeClass;\n+\n+import static com.facebook.presto.sql.analyzer.SemanticErrorCode.INVALID_LITERAL;\n+import static org.testng.Assert.assertThrows;\n+\n+public abstract class TestEnumBase", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fea9ac43f4c7a15c0a02889f3062cf9d9f6a89d"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MTU3MjE2", "url": "https://github.com/prestodb/presto/pull/14728#pullrequestreview-457157216", "createdAt": "2020-07-29T02:45:01Z", "commit": {"oid": "0fea9ac43f4c7a15c0a02889f3062cf9d9f6a89d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMjo0NTowMVrOG4mjMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMjo0NTowMVrOG4mjMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAwNTA0Mg==", "bodyText": "These are not functions, so why are we using assertFunction \ud83d\ude02", "url": "https://github.com/prestodb/presto/pull/14728#discussion_r462005042", "createdAt": "2020-07-29T02:45:01Z", "author": {"login": "rongrong"}, "path": "presto-main/src/test/java/com/facebook/presto/type/TestEnumLiterals.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.type;\n+\n+import com.facebook.presto.common.type.VarcharEnumType;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+public class TestEnumLiterals\n+        extends TestEnumBase\n+{\n+    @Test\n+    public void testLongEnumLiterals()\n+    {\n+        assertFunction(\"Mood.HAPPY\", MOOD_ENUM, 0L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fea9ac43f4c7a15c0a02889f3062cf9d9f6a89d"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MTU3OTA2", "url": "https://github.com/prestodb/presto/pull/14728#pullrequestreview-457157906", "createdAt": "2020-07-29T02:47:16Z", "commit": {"oid": "0fea9ac43f4c7a15c0a02889f3062cf9d9f6a89d"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMjo1MDo1OFrOG4mpFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMjo1OTo1MlrOG4mykg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAwNjU0OQ==", "bodyText": "Also add tests to test case-sensitivity of the types (Mood, mood, MOOD, MoOd etc)", "url": "https://github.com/prestodb/presto/pull/14728#discussion_r462006549", "createdAt": "2020-07-29T02:50:58Z", "author": {"login": "rongrong"}, "path": "presto-main/src/test/java/com/facebook/presto/type/TestEnumLiterals.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.type;\n+\n+import com.facebook.presto.common.type.VarcharEnumType;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+public class TestEnumLiterals", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fea9ac43f4c7a15c0a02889f3062cf9d9f6a89d"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAwNzM0NQ==", "bodyText": "Hmm, so if enum types are qualified, as in catalog.schema.enumtype.enumvalue the part you should get is size()-2, not 0.", "url": "https://github.com/prestodb/presto/pull/14728#discussion_r462007345", "createdAt": "2020-07-29T02:54:03Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/ExpressionTreeUtils.java", "diffHunk": "@@ -112,4 +123,47 @@ public static boolean isEqualComparisonExpression(Expression expression)\n     {\n         return expression instanceof ComparisonExpression && ((ComparisonExpression) expression).getOperator() == ComparisonExpression.Operator.EQUAL;\n     }\n+\n+    static Optional<EnumType> maybeGetEnumTypeFromLiteral(QualifiedName qualifiedName, TypeManager typeManager)\n+    {\n+        if (qualifiedName.getParts().size() < 2) {\n+            // an enum literal should be of the form `MyEnum.my_key`\n+            return Optional.empty();\n+        }\n+        try {\n+            Type baseType = typeManager.getType(parseTypeSignature(qualifiedName.getParts().get(0)));\n+            if (baseType instanceof EnumType) {\n+                return Optional.of((EnumType) baseType);\n+            }\n+        }\n+        catch (IllegalArgumentException e) {\n+            return Optional.empty();\n+        }\n+        return Optional.empty();\n+    }\n+\n+    public static boolean isEnumLiteral(DereferenceExpression node, Type nodeType)\n+    {\n+        if (!(nodeType instanceof EnumType)) {\n+            return false;\n+        }\n+        QualifiedName qualifiedName = DereferenceExpression.getQualifiedName(node);\n+        return qualifiedName != null\n+                && qualifiedName.getParts().size() >= 2", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fea9ac43f4c7a15c0a02889f3062cf9d9f6a89d"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAwNzQ1Mw==", "bodyText": "This should be getSuffix()", "url": "https://github.com/prestodb/presto/pull/14728#discussion_r462007453", "createdAt": "2020-07-29T02:54:30Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/ExpressionTreeUtils.java", "diffHunk": "@@ -112,4 +123,47 @@ public static boolean isEqualComparisonExpression(Expression expression)\n     {\n         return expression instanceof ComparisonExpression && ((ComparisonExpression) expression).getOperator() == ComparisonExpression.Operator.EQUAL;\n     }\n+\n+    static Optional<EnumType> maybeGetEnumTypeFromLiteral(QualifiedName qualifiedName, TypeManager typeManager)\n+    {\n+        if (qualifiedName.getParts().size() < 2) {\n+            // an enum literal should be of the form `MyEnum.my_key`\n+            return Optional.empty();\n+        }\n+        try {\n+            Type baseType = typeManager.getType(parseTypeSignature(qualifiedName.getParts().get(0)));\n+            if (baseType instanceof EnumType) {\n+                return Optional.of((EnumType) baseType);\n+            }\n+        }\n+        catch (IllegalArgumentException e) {\n+            return Optional.empty();\n+        }\n+        return Optional.empty();\n+    }\n+\n+    public static boolean isEnumLiteral(DereferenceExpression node, Type nodeType)\n+    {\n+        if (!(nodeType instanceof EnumType)) {\n+            return false;\n+        }\n+        QualifiedName qualifiedName = DereferenceExpression.getQualifiedName(node);\n+        return qualifiedName != null\n+                && qualifiedName.getParts().size() >= 2\n+                && qualifiedName.getParts().get(0).equalsIgnoreCase(nodeType.toString());\n+    }\n+\n+    public static Object resolveEnumLiteral(DereferenceExpression node, EnumType enumType)\n+    {\n+        QualifiedName qualifiedName = DereferenceExpression.getQualifiedName(node);\n+        if (qualifiedName == null || !isEnumLiteral(node, enumType)) {\n+            throw new SemanticException(INVALID_LITERAL, node, \"Node is not an enum literal\");\n+        }\n+        String enumKey = qualifiedName.getParts().get(1).toLowerCase(ENGLISH);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fea9ac43f4c7a15c0a02889f3062cf9d9f6a89d"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAwODEzOA==", "bodyText": "It's the second to the last part that you are looking for. I'd do qualifiedName.getPrefix().getSuffix() here. Or get the size of get(size - 2).", "url": "https://github.com/prestodb/presto/pull/14728#discussion_r462008138", "createdAt": "2020-07-29T02:56:50Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/ExpressionTreeUtils.java", "diffHunk": "@@ -112,4 +123,47 @@ public static boolean isEqualComparisonExpression(Expression expression)\n     {\n         return expression instanceof ComparisonExpression && ((ComparisonExpression) expression).getOperator() == ComparisonExpression.Operator.EQUAL;\n     }\n+\n+    static Optional<EnumType> maybeGetEnumTypeFromLiteral(QualifiedName qualifiedName, TypeManager typeManager)\n+    {\n+        if (qualifiedName.getParts().size() < 2) {\n+            // an enum literal should be of the form `MyEnum.my_key`\n+            return Optional.empty();\n+        }\n+        try {\n+            Type baseType = typeManager.getType(parseTypeSignature(qualifiedName.getParts().get(0)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fea9ac43f4c7a15c0a02889f3062cf9d9f6a89d"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAwODk3OA==", "bodyText": "use tryResolveEnumLiteral to be consistent with tryResolveField", "url": "https://github.com/prestodb/presto/pull/14728#discussion_r462008978", "createdAt": "2020-07-29T02:59:52Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/ExpressionAnalyzer.java", "diffHunk": "@@ -429,14 +431,20 @@ protected Type visitDereferenceExpression(DereferenceExpression node, StackableA\n         {\n             QualifiedName qualifiedName = DereferenceExpression.getQualifiedName(node);\n \n-            // If this Dereference looks like column reference, try match it to column first.\n+            // Handle qualified name\n             if (qualifiedName != null) {\n+                // first, try to match it to a column name\n                 Scope scope = context.getContext().getScope();\n                 Optional<ResolvedField> resolvedField = scope.tryResolveField(node, qualifiedName);\n                 if (resolvedField.isPresent()) {\n                     return handleResolvedField(node, resolvedField.get(), context);\n                 }\n+                // otherwise, try to match it to an enum literal (eg Mood.HAPPY)\n                 if (!scope.isColumnReference(qualifiedName)) {\n+                    Optional<EnumType> enumType = maybeGetEnumTypeFromLiteral(qualifiedName, typeManager);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fea9ac43f4c7a15c0a02889f3062cf9d9f6a89d"}, "originalPosition": 31}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "603c113f76754142a4127d0a6086aaaadf374b37", "author": {"user": {"login": "daniel-ohayon", "name": "Daniel Ohayon"}}, "url": "https://github.com/prestodb/presto/commit/603c113f76754142a4127d0a6086aaaadf374b37", "committedDate": "2020-07-29T01:06:51Z", "message": "Support enum <> JSON cast"}, "afterCommit": {"oid": "144ed1ac8fb17ccf9a2b616a83fb897da02b848f", "author": {"user": {"login": "daniel-ohayon", "name": "Daniel Ohayon"}}, "url": "https://github.com/prestodb/presto/commit/144ed1ac8fb17ccf9a2b616a83fb897da02b848f", "committedDate": "2020-07-29T18:59:51Z", "message": "Support enum <> JSON cast"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "144ed1ac8fb17ccf9a2b616a83fb897da02b848f", "author": {"user": {"login": "daniel-ohayon", "name": "Daniel Ohayon"}}, "url": "https://github.com/prestodb/presto/commit/144ed1ac8fb17ccf9a2b616a83fb897da02b848f", "committedDate": "2020-07-29T18:59:51Z", "message": "Support enum <> JSON cast"}, "afterCommit": {"oid": "b8bf2cb86229774921e7cc1e62be0df1e51e59bb", "author": {"user": {"login": "daniel-ohayon", "name": "Daniel Ohayon"}}, "url": "https://github.com/prestodb/presto/commit/b8bf2cb86229774921e7cc1e62be0df1e51e59bb", "committedDate": "2020-07-30T15:42:54Z", "message": "Support client-side enum rendering\n\nWe want clients to know about enums so that they can pretty-print them, and so we can serialize varchar enum values correctly."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b8bf2cb86229774921e7cc1e62be0df1e51e59bb", "author": {"user": {"login": "daniel-ohayon", "name": "Daniel Ohayon"}}, "url": "https://github.com/prestodb/presto/commit/b8bf2cb86229774921e7cc1e62be0df1e51e59bb", "committedDate": "2020-07-30T15:42:54Z", "message": "Support client-side enum rendering\n\nWe want clients to know about enums so that they can pretty-print them, and so we can serialize varchar enum values correctly."}, "afterCommit": {"oid": "b56e3efdb9e609be7876ef5320fc1d0c1672836b", "author": {"user": {"login": "daniel-ohayon", "name": "Daniel Ohayon"}}, "url": "https://github.com/prestodb/presto/commit/b56e3efdb9e609be7876ef5320fc1d0c1672836b", "committedDate": "2020-07-31T00:21:51Z", "message": "Support client-side enum rendering\n\nWe want clients to know about enums so that they can pretty-print them, and so we can serialize varchar enum values correctly."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b56e3efdb9e609be7876ef5320fc1d0c1672836b", "author": {"user": {"login": "daniel-ohayon", "name": "Daniel Ohayon"}}, "url": "https://github.com/prestodb/presto/commit/b56e3efdb9e609be7876ef5320fc1d0c1672836b", "committedDate": "2020-07-31T00:21:51Z", "message": "Support client-side enum rendering\n\nWe want clients to know about enums so that they can pretty-print them, and so we can serialize varchar enum values correctly."}, "afterCommit": {"oid": "d0e29b71f7c96bde6a5a91463e152a9cbddf8fd5", "author": {"user": {"login": "daniel-ohayon", "name": "Daniel Ohayon"}}, "url": "https://github.com/prestodb/presto/commit/d0e29b71f7c96bde6a5a91463e152a9cbddf8fd5", "committedDate": "2020-07-31T00:35:59Z", "message": "Support client-side enum rendering\n\nWe want clients to know about enums so that they can pretty-print them, and so we can serialize varchar enum values correctly."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5NDQ0NzYw", "url": "https://github.com/prestodb/presto/pull/14728#pullrequestreview-459444760", "createdAt": "2020-07-31T20:16:47Z", "commit": {"oid": "50ee9682086ced09b9c7beb3c6ba05d58c7db226"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMDoxNjo0N1rOG6VC5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMDozMjoyMlrOG6Vb6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgxNTM5OA==", "bodyText": "Sorry, my previous recommendation was wrong. You actually should just use parseTypeSignature(qualifiedName.getPrefix()) here. If the enum literal is of the form catalog.schema.EnumType.EnumValue, then the type should be catalog.schema.EnumType, rather than just EnumType alone.", "url": "https://github.com/prestodb/presto/pull/14728#discussion_r463815398", "createdAt": "2020-07-31T20:16:47Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/ExpressionTreeUtils.java", "diffHunk": "@@ -112,4 +123,51 @@ public static boolean isEqualComparisonExpression(Expression expression)\n     {\n         return expression instanceof ComparisonExpression && ((ComparisonExpression) expression).getOperator() == ComparisonExpression.Operator.EQUAL;\n     }\n+\n+    static Optional<EnumType> tryResolveEnumLiteralType(QualifiedName qualifiedName, TypeManager typeManager)\n+    {\n+        int nParts = qualifiedName.getParts().size();\n+        if (nParts < 2) {\n+            // an enum literal should be of the form `MyEnum.my_key`\n+            return Optional.empty();\n+        }\n+        try {\n+            Type baseType = typeManager.getType(parseTypeSignature(qualifiedName.getParts().get(nParts - 2)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50ee9682086ced09b9c7beb3c6ba05d58c7db226"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgxNjE4MA==", "bodyText": "In what situation would the nodeType be enum but qualifiedName is null or of the wrong format?", "url": "https://github.com/prestodb/presto/pull/14728#discussion_r463816180", "createdAt": "2020-07-31T20:18:53Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/ExpressionTreeUtils.java", "diffHunk": "@@ -112,4 +123,51 @@ public static boolean isEqualComparisonExpression(Expression expression)\n     {\n         return expression instanceof ComparisonExpression && ((ComparisonExpression) expression).getOperator() == ComparisonExpression.Operator.EQUAL;\n     }\n+\n+    static Optional<EnumType> tryResolveEnumLiteralType(QualifiedName qualifiedName, TypeManager typeManager)\n+    {\n+        int nParts = qualifiedName.getParts().size();\n+        if (nParts < 2) {\n+            // an enum literal should be of the form `MyEnum.my_key`\n+            return Optional.empty();\n+        }\n+        try {\n+            Type baseType = typeManager.getType(parseTypeSignature(qualifiedName.getParts().get(nParts - 2)));\n+            if (baseType instanceof EnumType) {\n+                return Optional.of((EnumType) baseType);\n+            }\n+        }\n+        catch (IllegalArgumentException e) {\n+            return Optional.empty();\n+        }\n+        return Optional.empty();\n+    }\n+\n+    public static boolean isEnumLiteral(DereferenceExpression node, Type nodeType)\n+    {\n+        if (!(nodeType instanceof EnumType)) {\n+            return false;\n+        }\n+        QualifiedName qualifiedName = DereferenceExpression.getQualifiedName(node);\n+        if (qualifiedName == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50ee9682086ced09b9c7beb3c6ba05d58c7db226"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgxODQ2Mw==", "bodyText": "This function is too low level to throw an SemanticException. If you expect this function to be only called when node is a valid enum, it should throw IllegalArgumentException. You can change these logic to a checkArgument.", "url": "https://github.com/prestodb/presto/pull/14728#discussion_r463818463", "createdAt": "2020-07-31T20:24:21Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/ExpressionTreeUtils.java", "diffHunk": "@@ -112,4 +123,51 @@ public static boolean isEqualComparisonExpression(Expression expression)\n     {\n         return expression instanceof ComparisonExpression && ((ComparisonExpression) expression).getOperator() == ComparisonExpression.Operator.EQUAL;\n     }\n+\n+    static Optional<EnumType> tryResolveEnumLiteralType(QualifiedName qualifiedName, TypeManager typeManager)\n+    {\n+        int nParts = qualifiedName.getParts().size();\n+        if (nParts < 2) {\n+            // an enum literal should be of the form `MyEnum.my_key`\n+            return Optional.empty();\n+        }\n+        try {\n+            Type baseType = typeManager.getType(parseTypeSignature(qualifiedName.getParts().get(nParts - 2)));\n+            if (baseType instanceof EnumType) {\n+                return Optional.of((EnumType) baseType);\n+            }\n+        }\n+        catch (IllegalArgumentException e) {\n+            return Optional.empty();\n+        }\n+        return Optional.empty();\n+    }\n+\n+    public static boolean isEnumLiteral(DereferenceExpression node, Type nodeType)\n+    {\n+        if (!(nodeType instanceof EnumType)) {\n+            return false;\n+        }\n+        QualifiedName qualifiedName = DereferenceExpression.getQualifiedName(node);\n+        if (qualifiedName == null) {\n+            return false;\n+        }\n+        int nParts = qualifiedName.getParts().size();\n+        return nParts >= 2\n+                && qualifiedName.getParts().get(nParts - 2).equalsIgnoreCase(nodeType.toString());\n+    }\n+\n+    public static Object resolveEnumLiteral(DereferenceExpression node, EnumType enumType)\n+    {\n+        QualifiedName qualifiedName = DereferenceExpression.getQualifiedName(node);\n+        if (qualifiedName == null || !isEnumLiteral(node, enumType)) {\n+            throw new SemanticException(INVALID_LITERAL, node, \"Node is not an enum literal\");\n+        }\n+        String enumKey = qualifiedName.getSuffix().toLowerCase(ENGLISH);\n+        Object enumValue = enumType.getEnumMap().get(enumKey);\n+        if (enumValue == null) {\n+            throw new SemanticException(INVALID_LITERAL, node, format(\"No key '%s' in enum '%s'\", enumKey, enumType.getDisplayName()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50ee9682086ced09b9c7beb3c6ba05d58c7db226"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgxODk2Nw==", "bodyText": "nit: Either put the whole statement in one line or break at both ? and :.", "url": "https://github.com/prestodb/presto/pull/14728#discussion_r463818967", "createdAt": "2020-07-31T20:25:27Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/SemanticExceptions.java", "diffHunk": "@@ -29,7 +29,12 @@ private SemanticExceptions() {}\n \n     public static SemanticException missingAttributeException(Expression node, QualifiedName name)\n     {\n-        throw new SemanticException(MISSING_ATTRIBUTE, node, \"Column '%s' cannot be resolved\", name);\n+        throw new SemanticException(\n+                MISSING_ATTRIBUTE,\n+                node,\n+                name.getPrefix().isPresent() ? \"'%s' cannot be resolved\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50ee9682086ced09b9c7beb3c6ba05d58c7db226"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgyMDYyNg==", "bodyText": "I think you should just have a checkArgument(enumType instanceof LongEnumType || enumType instanceof VarcharEnumType, format(\"Unsupported enumType '%s (%s)'\", enumType, enumType.class)) at the beginning of the function. We normally do validation first.", "url": "https://github.com/prestodb/presto/pull/14728#discussion_r463820626", "createdAt": "2020-07-31T20:29:42Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/TranslationMap.java", "diffHunk": "@@ -270,6 +284,22 @@ private Expression coerceIfNecessary(Expression original, Expression rewritten)\n                 }\n                 return rewritten;\n             }\n+\n+            private Expression rewriteEnumLiteral(DereferenceExpression original, EnumType enumType)\n+            {\n+                Object enumValue = resolveEnumLiteral(original, enumType);\n+                if (enumType instanceof LongEnumType) {\n+                    return new Cast(\n+                            new LongLiteral(((Long) enumValue).toString()),\n+                            enumType.getTypeSignature().getBase());\n+                }\n+                if (enumType instanceof VarcharEnumType) {\n+                    return new Cast(\n+                            new StringLiteral(((Slice) enumValue).toStringUtf8()),\n+                            enumType.getTypeSignature().getBase());\n+                }\n+                throw new IllegalArgumentException(\"Unsupported enum type\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50ee9682086ced09b9c7beb3c6ba05d58c7db226"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgyMDc3Mg==", "bodyText": "Why are we removing a plan sanity checker?", "url": "https://github.com/prestodb/presto/pull/14728#discussion_r463820772", "createdAt": "2020-07-31T20:30:02Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/sanity/PlanChecker.java", "diffHunk": "@@ -47,7 +47,6 @@ public PlanChecker(FeaturesConfig featuresConfig, boolean forceSingleNode)\n                         new NoDuplicatePlanNodeIdsChecker(),\n                         new TypeValidator(),\n                         new NoSubqueryExpressionLeftChecker(),\n-                        new NoIdentifierLeftChecker(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50ee9682086ced09b9c7beb3c6ba05d58c7db226"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgyMTgwMA==", "bodyText": "Why don't we just return a GenericLiteral here, or if necessary, create a Literal that suits enum. It's a literal, why are we rewriting it to cast?", "url": "https://github.com/prestodb/presto/pull/14728#discussion_r463821800", "createdAt": "2020-07-31T20:32:22Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/TranslationMap.java", "diffHunk": "@@ -270,6 +284,22 @@ private Expression coerceIfNecessary(Expression original, Expression rewritten)\n                 }\n                 return rewritten;\n             }\n+\n+            private Expression rewriteEnumLiteral(DereferenceExpression original, EnumType enumType)\n+            {\n+                Object enumValue = resolveEnumLiteral(original, enumType);\n+                if (enumType instanceof LongEnumType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50ee9682086ced09b9c7beb3c6ba05d58c7db226"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5NDU1MDQ3", "url": "https://github.com/prestodb/presto/pull/14728#pullrequestreview-459455047", "createdAt": "2020-07-31T20:36:58Z", "commit": {"oid": "52cdeee359daa54038e9cdbc9adc7d410800f1a8"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMDozNjo1OFrOG6Vjog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMDo0MzoxNFrOG6VtMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgyMzc3OA==", "bodyText": "Let's remove this?", "url": "https://github.com/prestodb/presto/pull/14728#discussion_r463823778", "createdAt": "2020-07-31T20:36:58Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/metadata/MetadataManager.java", "diffHunk": "@@ -242,7 +243,9 @@ public final void verifyComparableOrderableContract()\n                     missingOperators.put(type, NOT_EQUAL);\n                 }\n             }\n-            if (type.isOrderable()) {\n+            if (type.isOrderable() && !(type instanceof EnumType)) {\n+                // Enum types can be used in ORDER BY clauses for convenience,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52cdeee359daa54038e9cdbc9adc7d410800f1a8"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgyNTAyNg==", "bodyText": "I think we should make the TypeSignature of enum types to include the information that they are enums.", "url": "https://github.com/prestodb/presto/pull/14728#discussion_r463825026", "createdAt": "2020-07-31T20:40:08Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/util/JsonUtil.java", "diffHunk": "@@ -201,7 +210,9 @@ private static boolean isValidJsonObjectKeyType(Type type)\n                 baseType.equals(StandardTypes.REAL) ||\n                 baseType.equals(StandardTypes.DOUBLE) ||\n                 baseType.equals(StandardTypes.DECIMAL) ||\n-                baseType.equals(StandardTypes.VARCHAR);\n+                baseType.equals(StandardTypes.VARCHAR) ||\n+                type instanceof LongEnumType ||", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52cdeee359daa54038e9cdbc9adc7d410800f1a8"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgyNjIyNA==", "bodyText": "Conceptually this should not be in default... TypeSignature for enum types should work properly.", "url": "https://github.com/prestodb/presto/pull/14728#discussion_r463826224", "createdAt": "2020-07-31T20:43:14Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/util/JsonUtil.java", "diffHunk": "@@ -239,6 +250,12 @@ static ObjectKeyProvider createObjectKeyProvider(Type type)\n                 case StandardTypes.VARCHAR:\n                     return (block, position) -> type.getSlice(block, position).toStringUtf8();\n                 default:\n+                    if (type instanceof LongEnumType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52cdeee359daa54038e9cdbc9adc7d410800f1a8"}, "originalPosition": 50}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d0e29b71f7c96bde6a5a91463e152a9cbddf8fd5", "author": {"user": {"login": "daniel-ohayon", "name": "Daniel Ohayon"}}, "url": "https://github.com/prestodb/presto/commit/d0e29b71f7c96bde6a5a91463e152a9cbddf8fd5", "committedDate": "2020-07-31T00:35:59Z", "message": "Support client-side enum rendering\n\nWe want clients to know about enums so that they can pretty-print them, and so we can serialize varchar enum values correctly."}, "afterCommit": {"oid": "555ed466db30c2e0bef330ea0defb399283195d9", "author": {"user": {"login": "daniel-ohayon", "name": "Daniel Ohayon"}}, "url": "https://github.com/prestodb/presto/commit/555ed466db30c2e0bef330ea0defb399283195d9", "committedDate": "2020-08-18T03:45:55Z", "message": "Fix client-side string enum rendering"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "555ed466db30c2e0bef330ea0defb399283195d9", "author": {"user": {"login": "daniel-ohayon", "name": "Daniel Ohayon"}}, "url": "https://github.com/prestodb/presto/commit/555ed466db30c2e0bef330ea0defb399283195d9", "committedDate": "2020-08-18T03:45:55Z", "message": "Fix client-side string enum rendering"}, "afterCommit": {"oid": "444ee9a4b2816c9cde18b4a9737c3aa0d5f750d9", "author": {"user": {"login": "daniel-ohayon", "name": "Daniel Ohayon"}}, "url": "https://github.com/prestodb/presto/commit/444ee9a4b2816c9cde18b4a9737c3aa0d5f750d9", "committedDate": "2020-08-18T14:42:31Z", "message": "Fix client-side string enum rendering"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "444ee9a4b2816c9cde18b4a9737c3aa0d5f750d9", "author": {"user": {"login": "daniel-ohayon", "name": "Daniel Ohayon"}}, "url": "https://github.com/prestodb/presto/commit/444ee9a4b2816c9cde18b4a9737c3aa0d5f750d9", "committedDate": "2020-08-18T14:42:31Z", "message": "Fix client-side string enum rendering"}, "afterCommit": {"oid": "3f444ae412da626d6c552c1315629fee4a64ead7", "author": {"user": {"login": "daniel-ohayon", "name": "Daniel Ohayon"}}, "url": "https://github.com/prestodb/presto/commit/3f444ae412da626d6c552c1315629fee4a64ead7", "committedDate": "2020-08-18T22:58:35Z", "message": "Add enum operators\n\nSupport common operators like `=` on enum types"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3f444ae412da626d6c552c1315629fee4a64ead7", "author": {"user": {"login": "daniel-ohayon", "name": "Daniel Ohayon"}}, "url": "https://github.com/prestodb/presto/commit/3f444ae412da626d6c552c1315629fee4a64ead7", "committedDate": "2020-08-18T22:58:35Z", "message": "Add enum operators\n\nSupport common operators like `=` on enum types"}, "afterCommit": {"oid": "ba082183547190173c1aa873c3af3d0fafed6a26", "author": {"user": {"login": "daniel-ohayon", "name": "Daniel Ohayon"}}, "url": "https://github.com/prestodb/presto/commit/ba082183547190173c1aa873c3af3d0fafed6a26", "committedDate": "2020-08-18T23:53:55Z", "message": "Add enum operators\n\nSupport common operators like `=` on enum types"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ba082183547190173c1aa873c3af3d0fafed6a26", "author": {"user": {"login": "daniel-ohayon", "name": "Daniel Ohayon"}}, "url": "https://github.com/prestodb/presto/commit/ba082183547190173c1aa873c3af3d0fafed6a26", "committedDate": "2020-08-18T23:53:55Z", "message": "Add enum operators\n\nSupport common operators like `=` on enum types"}, "afterCommit": {"oid": "dfd4d95dbfe585c984a4c1fde39b96c2c170efdd", "author": {"user": {"login": "daniel-ohayon", "name": "Daniel Ohayon"}}, "url": "https://github.com/prestodb/presto/commit/dfd4d95dbfe585c984a4c1fde39b96c2c170efdd", "committedDate": "2020-08-19T16:26:19Z", "message": "Add enum operators\n\nSupport common operators like `=` on enum types"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwNzcwOTY4", "url": "https://github.com/prestodb/presto/pull/14728#pullrequestreview-470770968", "createdAt": "2020-08-19T19:27:42Z", "commit": {"oid": "fdc4855b1d7a0acd3348b9dfe2f3a71406817c8c"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxOToyNzo0M1rOHDWAlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxOTo1OTozM1rOHDXAeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI2ODM3NA==", "bodyText": "This is not necessary. Optional<> would be either empty (null) or non-null.", "url": "https://github.com/prestodb/presto/pull/14728#discussion_r473268374", "createdAt": "2020-08-19T19:27:43Z", "author": {"login": "rongrong"}, "path": "presto-common/src/main/java/com/facebook/presto/common/type/TypeUtils.java", "diffHunk": "@@ -101,4 +111,28 @@ static void checkElementNotNull(boolean isNull, String errorMsg)\n             throw new NotSupportedException(errorMsg);\n         }\n     }\n+\n+    static <V> Map<String, V> normalizeEnumEntries(Optional<String> enumName, Map<String, V> entries)\n+    {\n+        enumName.ifPresent(name -> requireNonNull(name, \"Enum name cannot be null\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdc4855b1d7a0acd3348b9dfe2f3a71406817c8c"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI2OTU2MA==", "bodyText": "We usually just assume input are non-null. Usually we only check requireNonNull at constructor. Functions that expect null would use Optional. Otherwise it should not be invoked with null input.", "url": "https://github.com/prestodb/presto/pull/14728#discussion_r473269560", "createdAt": "2020-08-19T19:30:02Z", "author": {"login": "rongrong"}, "path": "presto-common/src/main/java/com/facebook/presto/common/type/TypeUtils.java", "diffHunk": "@@ -101,4 +111,28 @@ static void checkElementNotNull(boolean isNull, String errorMsg)\n             throw new NotSupportedException(errorMsg);\n         }\n     }\n+\n+    static <V> Map<String, V> normalizeEnumEntries(Optional<String> enumName, Map<String, V> entries)\n+    {\n+        enumName.ifPresent(name -> requireNonNull(name, \"Enum name cannot be null\"));\n+        String maybeEnumName = enumName.isPresent() ? enumName + \" \" : \"\";\n+        requireNonNull(entries, \"Enum entries cannot be null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdc4855b1d7a0acd3348b9dfe2f3a71406817c8c"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI3MDkwMQ==", "bodyText": "Probably should check this in the constructor rather than here. Making sure the enum map is valid is the job of enum type constructor. It's fine if you want to have a separate utility function to check that. But for normalizeEnumEntries, it should just assume the input is already a valid enum.", "url": "https://github.com/prestodb/presto/pull/14728#discussion_r473270901", "createdAt": "2020-08-19T19:32:39Z", "author": {"login": "rongrong"}, "path": "presto-common/src/main/java/com/facebook/presto/common/type/TypeUtils.java", "diffHunk": "@@ -101,4 +111,28 @@ static void checkElementNotNull(boolean isNull, String errorMsg)\n             throw new NotSupportedException(errorMsg);\n         }\n     }\n+\n+    static <V> Map<String, V> normalizeEnumEntries(Optional<String> enumName, Map<String, V> entries)\n+    {\n+        enumName.ifPresent(name -> requireNonNull(name, \"Enum name cannot be null\"));\n+        String maybeEnumName = enumName.isPresent() ? enumName + \" \" : \"\";\n+        requireNonNull(entries, \"Enum entries cannot be null\");\n+        if (entries.containsKey(null)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdc4855b1d7a0acd3348b9dfe2f3a71406817c8c"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI3MTIyMA==", "bodyText": "Same here. Maybe you want to just add a validateEnum utility function.", "url": "https://github.com/prestodb/presto/pull/14728#discussion_r473271220", "createdAt": "2020-08-19T19:33:18Z", "author": {"login": "rongrong"}, "path": "presto-common/src/main/java/com/facebook/presto/common/type/TypeUtils.java", "diffHunk": "@@ -101,4 +111,28 @@ static void checkElementNotNull(boolean isNull, String errorMsg)\n             throw new NotSupportedException(errorMsg);\n         }\n     }\n+\n+    static <V> Map<String, V> normalizeEnumEntries(Optional<String> enumName, Map<String, V> entries)\n+    {\n+        enumName.ifPresent(name -> requireNonNull(name, \"Enum name cannot be null\"));\n+        String maybeEnumName = enumName.isPresent() ? enumName + \" \" : \"\";\n+        requireNonNull(entries, \"Enum entries cannot be null\");\n+        if (entries.containsKey(null)) {\n+            throw new IllegalArgumentException(format(\"Enum %scannot contain null key\", enumName.isPresent() ? enumName + \" \" : \"\"));\n+        }\n+        int nUniqueAndNotNull = entries.values().stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdc4855b1d7a0acd3348b9dfe2f3a71406817c8c"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI3MTY5Nw==", "bodyText": "Feels that upper case makes more sense? Most enum names are defined in uppercase right?", "url": "https://github.com/prestodb/presto/pull/14728#discussion_r473271697", "createdAt": "2020-08-19T19:34:10Z", "author": {"login": "rongrong"}, "path": "presto-common/src/main/java/com/facebook/presto/common/type/TypeUtils.java", "diffHunk": "@@ -101,4 +111,28 @@ static void checkElementNotNull(boolean isNull, String errorMsg)\n             throw new NotSupportedException(errorMsg);\n         }\n     }\n+\n+    static <V> Map<String, V> normalizeEnumEntries(Optional<String> enumName, Map<String, V> entries)\n+    {\n+        enumName.ifPresent(name -> requireNonNull(name, \"Enum name cannot be null\"));\n+        String maybeEnumName = enumName.isPresent() ? enumName + \" \" : \"\";\n+        requireNonNull(entries, \"Enum entries cannot be null\");\n+        if (entries.containsKey(null)) {\n+            throw new IllegalArgumentException(format(\"Enum %scannot contain null key\", enumName.isPresent() ? enumName + \" \" : \"\"));\n+        }\n+        int nUniqueAndNotNull = entries.values().stream()\n+                .filter(Objects::nonNull).collect(toSet()).size();\n+        if (nUniqueAndNotNull != entries.size()) {\n+            throw new IllegalArgumentException(\n+                    format(\"Enum %scannot contain null or duplicate values\", maybeEnumName));\n+        }\n+        try {\n+            return entries.entrySet().stream()\n+                    .collect(toMap(e -> e.getKey().toLowerCase(ENGLISH), Map.Entry::getValue));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdc4855b1d7a0acd3348b9dfe2f3a71406817c8c"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI3MTk5NA==", "bodyText": "space after %s before cannot", "url": "https://github.com/prestodb/presto/pull/14728#discussion_r473271994", "createdAt": "2020-08-19T19:34:47Z", "author": {"login": "rongrong"}, "path": "presto-common/src/main/java/com/facebook/presto/common/type/TypeUtils.java", "diffHunk": "@@ -101,4 +111,28 @@ static void checkElementNotNull(boolean isNull, String errorMsg)\n             throw new NotSupportedException(errorMsg);\n         }\n     }\n+\n+    static <V> Map<String, V> normalizeEnumEntries(Optional<String> enumName, Map<String, V> entries)\n+    {\n+        enumName.ifPresent(name -> requireNonNull(name, \"Enum name cannot be null\"));\n+        String maybeEnumName = enumName.isPresent() ? enumName + \" \" : \"\";\n+        requireNonNull(entries, \"Enum entries cannot be null\");\n+        if (entries.containsKey(null)) {\n+            throw new IllegalArgumentException(format(\"Enum %scannot contain null key\", enumName.isPresent() ? enumName + \" \" : \"\"));\n+        }\n+        int nUniqueAndNotNull = entries.values().stream()\n+                .filter(Objects::nonNull).collect(toSet()).size();\n+        if (nUniqueAndNotNull != entries.size()) {\n+            throw new IllegalArgumentException(\n+                    format(\"Enum %scannot contain null or duplicate values\", maybeEnumName));\n+        }\n+        try {\n+            return entries.entrySet().stream()\n+                    .collect(toMap(e -> e.getKey().toLowerCase(ENGLISH), Map.Entry::getValue));\n+        }\n+        catch (IllegalStateException e) {\n+            throw new IllegalArgumentException(\n+                    format(\"Enum %scannot contain case-insensitive duplicate keys: %s\", maybeEnumName, e.getMessage()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdc4855b1d7a0acd3348b9dfe2f3a71406817c8c"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI3MjYwMQ==", "bodyText": "Feels like this class and the LongEnumMap should be inner class of VarcharEnumType and LongEnumType respectively (or maybe the parametric type versions). They don't make much sense as standalone classes.", "url": "https://github.com/prestodb/presto/pull/14728#discussion_r473272601", "createdAt": "2020-08-19T19:36:05Z", "author": {"login": "rongrong"}, "path": "presto-common/src/main/java/com/facebook/presto/common/type/VarcharEnumMap.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.common.type;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import java.util.Comparator;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.common.type.TypeUtils.normalizeEnumEntries;\n+import static java.lang.String.format;\n+\n+public class VarcharEnumMap", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdc4855b1d7a0acd3348b9dfe2f3a71406817c8c"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI3NTA5OQ==", "bodyText": "It might be cleaner VarcharEnumType and LongEnumType should directly take VarcharEnumMap and LongEnumMap as input. That way you can wrap the validation into those classes and there's no need to validate them again.", "url": "https://github.com/prestodb/presto/pull/14728#discussion_r473275099", "createdAt": "2020-08-19T19:41:05Z", "author": {"login": "rongrong"}, "path": "presto-common/src/main/java/com/facebook/presto/common/type/VarcharEnumType.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.common.type;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.common.type.TypeUtils.normalizeEnumEntries;\n+import static com.facebook.presto.common.type.VarcharType.VARCHAR;\n+\n+public class VarcharEnumType\n+        extends AbstractVarcharType\n+        implements EnumType<String>\n+{\n+    private final Map<String, String> enumMap;\n+\n+    public VarcharEnumType(String name, Map<String, String> enumMap)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdc4855b1d7a0acd3348b9dfe2f3a71406817c8c"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI4NDcyOQ==", "bodyText": "The enum name probably should be just LONG_ENUM and VARCHAR_ENUM", "url": "https://github.com/prestodb/presto/pull/14728#discussion_r473284729", "createdAt": "2020-08-19T19:59:33Z", "author": {"login": "rongrong"}, "path": "presto-common/src/main/java/com/facebook/presto/common/type/ParameterKind.java", "diffHunk": "@@ -23,7 +23,9 @@\n     TYPE(Optional.of(\"TYPE_SIGNATURE\")),\n     NAMED_TYPE(Optional.of(\"NAMED_TYPE_SIGNATURE\")),\n     LONG(Optional.of(\"LONG_LITERAL\")),\n-    VARIABLE(Optional.empty());\n+    VARIABLE(Optional.empty()),\n+    LONG_ENUM_MAP(Optional.of(\"LONG_ENUM_MAP\")),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdc4855b1d7a0acd3348b9dfe2f3a71406817c8c"}, "originalPosition": 6}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dfd4d95dbfe585c984a4c1fde39b96c2c170efdd", "author": {"user": {"login": "daniel-ohayon", "name": "Daniel Ohayon"}}, "url": "https://github.com/prestodb/presto/commit/dfd4d95dbfe585c984a4c1fde39b96c2c170efdd", "committedDate": "2020-08-19T16:26:19Z", "message": "Add enum operators\n\nSupport common operators like `=` on enum types"}, "afterCommit": {"oid": "1c07c547b741173ffa342d2711dd761e700af180", "author": {"user": {"login": "daniel-ohayon", "name": "Daniel Ohayon"}}, "url": "https://github.com/prestodb/presto/commit/1c07c547b741173ffa342d2711dd761e700af180", "committedDate": "2020-08-20T23:07:18Z", "message": "Add enum operators\n\nSupport common operators like `=` on enum types"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1c07c547b741173ffa342d2711dd761e700af180", "author": {"user": {"login": "daniel-ohayon", "name": "Daniel Ohayon"}}, "url": "https://github.com/prestodb/presto/commit/1c07c547b741173ffa342d2711dd761e700af180", "committedDate": "2020-08-20T23:07:18Z", "message": "Add enum operators\n\nSupport common operators like `=` on enum types"}, "afterCommit": {"oid": "90e139c1660d0bec1c24a3624e645c3a148adc06", "author": {"user": {"login": "daniel-ohayon", "name": "Daniel Ohayon"}}, "url": "https://github.com/prestodb/presto/commit/90e139c1660d0bec1c24a3624e645c3a148adc06", "committedDate": "2020-08-23T23:11:50Z", "message": "Add enum operators\n\nSupport common operators like `=` on enum types"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "90e139c1660d0bec1c24a3624e645c3a148adc06", "author": {"user": {"login": "daniel-ohayon", "name": "Daniel Ohayon"}}, "url": "https://github.com/prestodb/presto/commit/90e139c1660d0bec1c24a3624e645c3a148adc06", "committedDate": "2020-08-23T23:11:50Z", "message": "Add enum operators\n\nSupport common operators like `=` on enum types"}, "afterCommit": {"oid": "74e8a69f115f7b89d27f0b7e995ffec38418852a", "author": {"user": {"login": "daniel-ohayon", "name": "Daniel Ohayon"}}, "url": "https://github.com/prestodb/presto/commit/74e8a69f115f7b89d27f0b7e995ffec38418852a", "committedDate": "2020-08-23T23:33:09Z", "message": "Add enum operators\n\nSupport common operators like `=` on enum types"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczNzU4MzU3", "url": "https://github.com/prestodb/presto/pull/14728#pullrequestreview-473758357", "createdAt": "2020-08-24T18:34:26Z", "commit": {"oid": "92554b83a8e87d842f8ed5afe8be8081cbba5d08"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxODozNDoyN1rOHFxgDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxODozODoyOVrOHFxoNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgxNTk1MA==", "bodyText": "Let's import the sub classes directly.", "url": "https://github.com/prestodb/presto/pull/14728#discussion_r475815950", "createdAt": "2020-08-24T18:34:27Z", "author": {"login": "rongrong"}, "path": "presto-common/src/main/java/com/facebook/presto/common/type/TypeParameter.java", "diffHunk": "@@ -98,6 +112,16 @@ public Long getLongLiteral()\n         return getValue(ParameterKind.LONG, Long.class);\n     }\n \n+    public LongEnumType.LongEnumMap getLongEnumMap()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92554b83a8e87d842f8ed5afe8be8081cbba5d08"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgxNjU4Mw==", "bodyText": "Import subclass directly.", "url": "https://github.com/prestodb/presto/pull/14728#discussion_r475816583", "createdAt": "2020-08-24T18:35:37Z", "author": {"login": "rongrong"}, "path": "presto-common/src/main/java/com/facebook/presto/common/type/TypeSignatureParameter.java", "diffHunk": "@@ -44,6 +44,16 @@ public static TypeSignatureParameter of(String variable)\n         return new TypeSignatureParameter(ParameterKind.VARIABLE, variable);\n     }\n \n+    public static TypeSignatureParameter of(LongEnumType.LongEnumMap enumMap)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92554b83a8e87d842f8ed5afe8be8081cbba5d08"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgxNjkwNQ==", "bodyText": "isLongEnum and isVarcharEnum maybe?", "url": "https://github.com/prestodb/presto/pull/14728#discussion_r475816905", "createdAt": "2020-08-24T18:36:16Z", "author": {"login": "rongrong"}, "path": "presto-common/src/main/java/com/facebook/presto/common/type/TypeSignatureParameter.java", "diffHunk": "@@ -81,6 +91,16 @@ public boolean isVariable()\n         return kind == ParameterKind.VARIABLE;\n     }\n \n+    public boolean isLongEnumMap()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92554b83a8e87d842f8ed5afe8be8081cbba5d08"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgxNzMwNw==", "bodyText": "Import sub class directly.", "url": "https://github.com/prestodb/presto/pull/14728#discussion_r475817307", "createdAt": "2020-08-24T18:37:01Z", "author": {"login": "rongrong"}, "path": "presto-common/src/test/java/com/facebook/presto/common/type/TestTypeSignature.java", "diffHunk": "@@ -289,6 +290,53 @@ public void testIsCalculated()\n         assertFalse(parseTypeSignature(\"row(a decimal(2,1),b decimal(3,2))\").isCalculated());\n     }\n \n+    @Test\n+    public void testEnumSignature()\n+    {\n+        assertEquals(\n+                parseTypeSignature(\"test_enum(enum:varchar{\\\"test\\\" :\\\"\\\"\\\"\\\", \\\"hello\\\": \\\" \\\" , \\\"a\\\":\\\"}{{\\\" })\"),\n+                new VarcharEnumType(\"test_enum\", new VarcharEnumType.VarcharEnumMap(ImmutableMap.of(\"a\", \"}{{\", \"hello\", \" \", \"test\", \"\\\"\"))).getTypeSignature());\n+\n+        assertEquals(\n+                parseTypeSignature(\"test_enum(enum:varchar{\\\"my  key\\\" :\\\"\u092e\u0942\u0932\u094d\u092f\\\"})\"),\n+                new VarcharEnumType(\"test_enum\", new VarcharEnumType.VarcharEnumMap(ImmutableMap.of(\"my  key\", \"\u092e\u0942\u0932\u094d\u092f\"))).getTypeSignature());\n+\n+        assertEquals(\n+                parseTypeSignature(\"other_enum(ENUM:bigint{\\\"hello\\\" :  -5, \\\"AaA\\\"  : 9999 })\"),\n+                new LongEnumType(\"other_enum\", new LongEnumType.LongEnumMap(ImmutableMap.of(\"hello\", -5L, \"AAA\", 9999L))).getTypeSignature());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92554b83a8e87d842f8ed5afe8be8081cbba5d08"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgxNzkwMg==", "bodyText": "Import subclass directly.", "url": "https://github.com/prestodb/presto/pull/14728#discussion_r475817902", "createdAt": "2020-08-24T18:38:14Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/type/LongEnumParametricType.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.type;\n+\n+import com.facebook.presto.common.type.LongEnumType;\n+import com.facebook.presto.common.type.ParameterKind;\n+import com.facebook.presto.common.type.ParametricType;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeManager;\n+import com.facebook.presto.common.type.TypeParameter;\n+\n+import java.util.List;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+public final class LongEnumParametricType\n+        implements ParametricType\n+{\n+    private final String name;\n+    private final LongEnumType.LongEnumMap enumMap;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92554b83a8e87d842f8ed5afe8be8081cbba5d08"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgxODAzNg==", "bodyText": "Import subclass directly.", "url": "https://github.com/prestodb/presto/pull/14728#discussion_r475818036", "createdAt": "2020-08-24T18:38:29Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/type/VarcharEnumParametricType.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.type;\n+\n+import com.facebook.presto.common.type.ParameterKind;\n+import com.facebook.presto.common.type.ParametricType;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeManager;\n+import com.facebook.presto.common.type.TypeParameter;\n+import com.facebook.presto.common.type.VarcharEnumType;\n+\n+import java.util.List;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+public final class VarcharEnumParametricType\n+        implements ParametricType\n+{\n+    private final String name;\n+    private final VarcharEnumType.VarcharEnumMap enumMap;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92554b83a8e87d842f8ed5afe8be8081cbba5d08"}, "originalPosition": 31}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "507127b5f78811e95c658a5ffc20cb1604e9908a", "author": {"user": {"login": "daniel-ohayon", "name": "Daniel Ohayon"}}, "url": "https://github.com/prestodb/presto/commit/507127b5f78811e95c658a5ffc20cb1604e9908a", "committedDate": "2020-08-24T22:33:36Z", "message": "Add long and varchar enum types"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d6ea3bc17b47e84e5f1523a5496c32f4c59fda4", "author": {"user": {"login": "daniel-ohayon", "name": "Daniel Ohayon"}}, "url": "https://github.com/prestodb/presto/commit/1d6ea3bc17b47e84e5f1523a5496c32f4c59fda4", "committedDate": "2020-08-24T22:33:36Z", "message": "Support type bound in TypeVariableConstraint\n\nAdd an is-a constraint for type variables, so we can describe generic types of a certain kind."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "74e8a69f115f7b89d27f0b7e995ffec38418852a", "author": {"user": {"login": "daniel-ohayon", "name": "Daniel Ohayon"}}, "url": "https://github.com/prestodb/presto/commit/74e8a69f115f7b89d27f0b7e995ffec38418852a", "committedDate": "2020-08-23T23:33:09Z", "message": "Add enum operators\n\nSupport common operators like `=` on enum types"}, "afterCommit": {"oid": "237f05b4d2c7361308b111295fceab8f78a5adb8", "author": {"user": {"login": "daniel-ohayon", "name": "Daniel Ohayon"}}, "url": "https://github.com/prestodb/presto/commit/237f05b4d2c7361308b111295fceab8f78a5adb8", "committedDate": "2020-08-24T22:33:36Z", "message": "Add enum operators\n\nSupport common operators like `=` on enum types"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3MTU1NjUy", "url": "https://github.com/prestodb/presto/pull/14728#pullrequestreview-477155652", "createdAt": "2020-08-27T23:49:11Z", "commit": {"oid": "bfea2539fc64a95cb178adac62412b7b722b9e38"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMzo0OToxMVrOHIk7nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMzo0OToxMVrOHIk7nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc1NTc0MA==", "bodyText": "This is a minor issue: Seems like you are always calling isEnumLiteral and resolveEnumLiteral together and then you can checking isEnumLiteral here again. So maybe worth have a tryResolveEnumLiteral that returns a Optional<Object> to avoid calling isEnumLiteral twice.", "url": "https://github.com/prestodb/presto/pull/14728#discussion_r478755740", "createdAt": "2020-08-27T23:49:11Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/ExpressionTreeUtils.java", "diffHunk": "@@ -112,4 +123,45 @@ public static boolean isEqualComparisonExpression(Expression expression)\n     {\n         return expression instanceof ComparisonExpression && ((ComparisonExpression) expression).getOperator() == ComparisonExpression.Operator.EQUAL;\n     }\n+\n+    static Optional<EnumType> tryResolveEnumLiteralType(QualifiedName qualifiedName, TypeManager typeManager)\n+    {\n+        Optional<QualifiedName> prefix = qualifiedName.getPrefix();\n+        if (!prefix.isPresent()) {\n+            // an enum literal should be of the form `MyEnum.my_key`\n+            return Optional.empty();\n+        }\n+        try {\n+            Type baseType = typeManager.getType(parseTypeSignature(prefix.get().toString()));\n+            if (baseType instanceof EnumType) {\n+                return Optional.of((EnumType) baseType);\n+            }\n+        }\n+        catch (IllegalArgumentException e) {\n+            return Optional.empty();\n+        }\n+        return Optional.empty();\n+    }\n+\n+    public static boolean isEnumLiteral(DereferenceExpression node, Type nodeType)\n+    {\n+        if (!(nodeType instanceof EnumType)) {\n+            return false;\n+        }\n+        QualifiedName qualifiedName = DereferenceExpression.getQualifiedName(node);\n+        requireNonNull(qualifiedName, \"qualifiedName is null\");\n+        Optional<QualifiedName> prefix = qualifiedName.getPrefix();\n+        return prefix.isPresent()\n+                && prefix.get().toString().equalsIgnoreCase(nodeType.getTypeSignature().getBase());\n+    }\n+\n+    public static Object resolveEnumLiteral(DereferenceExpression node, EnumType enumType)\n+    {\n+        QualifiedName qualifiedName = DereferenceExpression.getQualifiedName(node);\n+        checkArgument(qualifiedName != null && isEnumLiteral(node, enumType), \"Node is not an enum literal\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfea2539fc64a95cb178adac62412b7b722b9e38"}, "originalPosition": 74}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3MTU2MTg3", "url": "https://github.com/prestodb/presto/pull/14728#pullrequestreview-477156187", "createdAt": "2020-08-27T23:50:59Z", "commit": {"oid": "237f05b4d2c7361308b111295fceab8f78a5adb8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMzo1MDo1OVrOHIk9lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMzo1MDo1OVrOHIk9lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc1NjI0NQ==", "bodyText": "Maybe you can incorporate this into the switch (baseType) part now?", "url": "https://github.com/prestodb/presto/pull/14728#discussion_r478756245", "createdAt": "2020-08-27T23:50:59Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/util/JsonUtil.java", "diffHunk": "@@ -211,7 +221,14 @@ private static boolean isValidJsonObjectKeyType(Type type)\n \n         static ObjectKeyProvider createObjectKeyProvider(Type type)\n         {\n-            String baseType = type.getTypeSignature().getBase();\n+            TypeSignature signature = type.getTypeSignature();\n+            String baseType = signature.getBase();\n+            if (signature.isLongEnum()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "237f05b4d2c7361308b111295fceab8f78a5adb8"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3MTU2NzUx", "url": "https://github.com/prestodb/presto/pull/14728#pullrequestreview-477156751", "createdAt": "2020-08-27T23:52:48Z", "commit": {"oid": "237f05b4d2c7361308b111295fceab8f78a5adb8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMzo1Mjo0OVrOHIk_pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMzo1Mjo0OVrOHIk_pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc1Njc3Mg==", "bodyText": "Can we add tests for all enum operators?", "url": "https://github.com/prestodb/presto/pull/14728#discussion_r478756772", "createdAt": "2020-08-27T23:52:49Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/type/VarcharEnumOperators.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.type;\n+\n+import com.facebook.presto.common.type.StandardTypes;\n+import com.facebook.presto.common.type.VarcharEnumType;\n+import com.facebook.presto.spi.function.IsNull;\n+import com.facebook.presto.spi.function.ScalarOperator;\n+import com.facebook.presto.spi.function.SqlNullable;\n+import com.facebook.presto.spi.function.SqlType;\n+import com.facebook.presto.spi.function.TypeParameter;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.XxHash64;\n+\n+import static com.facebook.presto.common.function.OperatorType.BETWEEN;\n+import static com.facebook.presto.common.function.OperatorType.EQUAL;\n+import static com.facebook.presto.common.function.OperatorType.GREATER_THAN;\n+import static com.facebook.presto.common.function.OperatorType.GREATER_THAN_OR_EQUAL;\n+import static com.facebook.presto.common.function.OperatorType.HASH_CODE;\n+import static com.facebook.presto.common.function.OperatorType.INDETERMINATE;\n+import static com.facebook.presto.common.function.OperatorType.IS_DISTINCT_FROM;\n+import static com.facebook.presto.common.function.OperatorType.LESS_THAN;\n+import static com.facebook.presto.common.function.OperatorType.LESS_THAN_OR_EQUAL;\n+import static com.facebook.presto.common.function.OperatorType.NOT_EQUAL;\n+import static com.facebook.presto.common.function.OperatorType.XX_HASH_64;\n+import static com.facebook.presto.common.type.StandardTypes.BIGINT;\n+import static com.facebook.presto.common.type.StandardTypes.BOOLEAN;\n+\n+public final class VarcharEnumOperators", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "237f05b4d2c7361308b111295fceab8f78a5adb8"}, "originalPosition": 40}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "237f05b4d2c7361308b111295fceab8f78a5adb8", "author": {"user": {"login": "daniel-ohayon", "name": "Daniel Ohayon"}}, "url": "https://github.com/prestodb/presto/commit/237f05b4d2c7361308b111295fceab8f78a5adb8", "committedDate": "2020-08-24T22:33:36Z", "message": "Add enum operators\n\nSupport common operators like `=` on enum types"}, "afterCommit": {"oid": "252b098a3bff2d78a8d93f0975655bcf8644e041", "author": {"user": {"login": "daniel-ohayon", "name": "Daniel Ohayon"}}, "url": "https://github.com/prestodb/presto/commit/252b098a3bff2d78a8d93f0975655bcf8644e041", "committedDate": "2020-08-28T16:28:06Z", "message": "Add enum operators\n\nSupport common operators like `=` on enum types"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3OTUzMjUy", "url": "https://github.com/prestodb/presto/pull/14728#pullrequestreview-477953252", "createdAt": "2020-08-28T18:47:57Z", "commit": {"oid": "252b098a3bff2d78a8d93f0975655bcf8644e041"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxODo0Nzo1N1rOHJRBKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxODo0Nzo1N1rOHJRBKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ3ODA1Ng==", "bodyText": "You can remove this. the isEnumLiteral function already checks this. Or move it after the if statement.", "url": "https://github.com/prestodb/presto/pull/14728#discussion_r479478056", "createdAt": "2020-08-28T18:47:57Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/ExpressionTreeUtils.java", "diffHunk": "@@ -112,4 +123,49 @@ public static boolean isEqualComparisonExpression(Expression expression)\n     {\n         return expression instanceof ComparisonExpression && ((ComparisonExpression) expression).getOperator() == ComparisonExpression.Operator.EQUAL;\n     }\n+\n+    static Optional<EnumType> tryResolveEnumLiteralType(QualifiedName qualifiedName, TypeManager typeManager)\n+    {\n+        Optional<QualifiedName> prefix = qualifiedName.getPrefix();\n+        if (!prefix.isPresent()) {\n+            // an enum literal should be of the form `MyEnum.my_key`\n+            return Optional.empty();\n+        }\n+        try {\n+            Type baseType = typeManager.getType(parseTypeSignature(prefix.get().toString()));\n+            if (baseType instanceof EnumType) {\n+                return Optional.of((EnumType) baseType);\n+            }\n+        }\n+        catch (IllegalArgumentException e) {\n+            return Optional.empty();\n+        }\n+        return Optional.empty();\n+    }\n+\n+    private static boolean isEnumLiteral(DereferenceExpression node, Type nodeType)\n+    {\n+        if (!(nodeType instanceof EnumType)) {\n+            return false;\n+        }\n+        QualifiedName qualifiedName = DereferenceExpression.getQualifiedName(node);\n+        requireNonNull(qualifiedName, \"qualifiedName is null\");\n+        Optional<QualifiedName> prefix = qualifiedName.getPrefix();\n+        return prefix.isPresent()\n+                && prefix.get().toString().equalsIgnoreCase(nodeType.getTypeSignature().getBase());\n+    }\n+\n+    public static Optional<Object> tryResolveEnumLiteral(DereferenceExpression node, Type nodeType)\n+    {\n+        QualifiedName qualifiedName = DereferenceExpression.getQualifiedName(node);\n+        checkArgument(qualifiedName != null, \"qualifiedName is null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "252b098a3bff2d78a8d93f0975655bcf8644e041"}, "originalPosition": 74}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db53af7c6c56e69b74da0b59826b326ccec635cd", "author": {"user": {"login": "daniel-ohayon", "name": "Daniel Ohayon"}}, "url": "https://github.com/prestodb/presto/commit/db53af7c6c56e69b74da0b59826b326ccec635cd", "committedDate": "2020-08-28T19:48:36Z", "message": "Support enum literals in queries"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a60a66b37c12719c9ec46b00de9063de8da221f", "author": {"user": {"login": "daniel-ohayon", "name": "Daniel Ohayon"}}, "url": "https://github.com/prestodb/presto/commit/4a60a66b37c12719c9ec46b00de9063de8da221f", "committedDate": "2020-08-28T19:48:36Z", "message": "Add enum operators\n\nSupport common operators like `=` on enum types"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "252b098a3bff2d78a8d93f0975655bcf8644e041", "author": {"user": {"login": "daniel-ohayon", "name": "Daniel Ohayon"}}, "url": "https://github.com/prestodb/presto/commit/252b098a3bff2d78a8d93f0975655bcf8644e041", "committedDate": "2020-08-28T16:28:06Z", "message": "Add enum operators\n\nSupport common operators like `=` on enum types"}, "afterCommit": {"oid": "4a60a66b37c12719c9ec46b00de9063de8da221f", "author": {"user": {"login": "daniel-ohayon", "name": "Daniel Ohayon"}}, "url": "https://github.com/prestodb/presto/commit/4a60a66b37c12719c9ec46b00de9063de8da221f", "committedDate": "2020-08-28T19:48:36Z", "message": "Add enum operators\n\nSupport common operators like `=` on enum types"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4ODIyNDE1", "url": "https://github.com/prestodb/presto/pull/14728#pullrequestreview-478822415", "createdAt": "2020-08-31T17:55:53Z", "commit": {"oid": "4a60a66b37c12719c9ec46b00de9063de8da221f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1513, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}