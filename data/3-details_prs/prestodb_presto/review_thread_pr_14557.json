{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5OTUxNzQ1", "number": 14557, "reviewThreads": {"totalCount": 62, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNzo1NDoxM1rOD96Ktw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMToyMToyM1rOEB-GQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MjQyNzQzOnYy", "diffSide": "RIGHT", "path": "presto-cache/src/main/java/com/facebook/presto/cache/CacheManager.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNzo1NDoxM1rOGXsAyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMTowMzoyOFrOGX3x7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ5MTUzMQ==", "bodyText": "Given we have three states here, have we considered using enum as opposed to Optional<Boolean>.", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r427491531", "createdAt": "2020-05-19T17:54:13Z", "author": {"login": "shixuan-fan"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/CacheManager.java", "diffHunk": "@@ -13,22 +13,27 @@\n  */\n package com.facebook.presto.cache;\n \n+import com.facebook.presto.hive.HiveFileContext;\n import io.airlift.slice.Slice;\n \n import javax.annotation.concurrent.ThreadSafe;\n \n+import java.util.Optional;\n+\n @ThreadSafe\n public interface CacheManager\n {\n     /**\n      * Given {@param request}, check if the data is in cache.\n-     * If it is not in cache, return false.\n-     * Otherwise, save the data in {@param buffer} starting at {@param offset} and return true.\n+     * If it is in cache, save the data in {@param buffer} starting at {@param offset} and return Optional.of(True).\n+     * If it is not in cache:\n+     *      1. If there is still cache quota for this table, return Optional.of(False)\n+     *      2. Otherwise, return Optional.empty()\n      */\n-    boolean get(FileReadRequest request, byte[] buffer, int offset);\n+    Optional<Boolean> get(HiveFileContext hiveFileContext, FileReadRequest request, byte[] buffer, int offset);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f3c64fe6ffa3b76c1ccb8eefb6b18aa92142193"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY4Mzg4MA==", "bodyText": "I agree, the usage of optional is confusing. Let's use proper states.", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r427683880", "createdAt": "2020-05-20T01:01:35Z", "author": {"login": "jainxrohit"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/CacheManager.java", "diffHunk": "@@ -13,22 +13,27 @@\n  */\n package com.facebook.presto.cache;\n \n+import com.facebook.presto.hive.HiveFileContext;\n import io.airlift.slice.Slice;\n \n import javax.annotation.concurrent.ThreadSafe;\n \n+import java.util.Optional;\n+\n @ThreadSafe\n public interface CacheManager\n {\n     /**\n      * Given {@param request}, check if the data is in cache.\n-     * If it is not in cache, return false.\n-     * Otherwise, save the data in {@param buffer} starting at {@param offset} and return true.\n+     * If it is in cache, save the data in {@param buffer} starting at {@param offset} and return Optional.of(True).\n+     * If it is not in cache:\n+     *      1. If there is still cache quota for this table, return Optional.of(False)\n+     *      2. Otherwise, return Optional.empty()\n      */\n-    boolean get(FileReadRequest request, byte[] buffer, int offset);\n+    Optional<Boolean> get(HiveFileContext hiveFileContext, FileReadRequest request, byte[] buffer, int offset);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ5MTUzMQ=="}, "originalCommit": {"oid": "8f3c64fe6ffa3b76c1ccb8eefb6b18aa92142193"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY4NDMzMw==", "bodyText": "I also think, we should not use hiveFileContext in the cacheManager. Lets keep the cacheManage simple and should not be aware of HiveFileContext", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r427684333", "createdAt": "2020-05-20T01:03:28Z", "author": {"login": "jainxrohit"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/CacheManager.java", "diffHunk": "@@ -13,22 +13,27 @@\n  */\n package com.facebook.presto.cache;\n \n+import com.facebook.presto.hive.HiveFileContext;\n import io.airlift.slice.Slice;\n \n import javax.annotation.concurrent.ThreadSafe;\n \n+import java.util.Optional;\n+\n @ThreadSafe\n public interface CacheManager\n {\n     /**\n      * Given {@param request}, check if the data is in cache.\n-     * If it is not in cache, return false.\n-     * Otherwise, save the data in {@param buffer} starting at {@param offset} and return true.\n+     * If it is in cache, save the data in {@param buffer} starting at {@param offset} and return Optional.of(True).\n+     * If it is not in cache:\n+     *      1. If there is still cache quota for this table, return Optional.of(False)\n+     *      2. Otherwise, return Optional.empty()\n      */\n-    boolean get(FileReadRequest request, byte[] buffer, int offset);\n+    Optional<Boolean> get(HiveFileContext hiveFileContext, FileReadRequest request, byte[] buffer, int offset);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ5MTUzMQ=="}, "originalCommit": {"oid": "8f3c64fe6ffa3b76c1ccb8eefb6b18aa92142193"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MjQzMTQ3OnYy", "diffSide": "RIGHT", "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNzo1NTowNlrOGXsDNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNzo1NTowNlrOGXsDNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ5MjE0OA==", "bodyText": "Shouldn't this be a DataSize instead?", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r427492148", "createdAt": "2020-05-19T17:55:06Z", "author": {"login": "shixuan-fan"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "diffHunk": "@@ -76,6 +79,7 @@\n     private static final String EXTENSION = \".cache\";\n \n     private static final int FILE_MERGE_BUFFER_SIZE = toIntExact(new DataSize(8, MEGABYTE).toBytes());\n+    private static final long perTableCacheQuota = 100;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f3c64fe6ffa3b76c1ccb8eefb6b18aa92142193"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MjQzNTg5OnYy", "diffSide": "RIGHT", "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNzo1NjowOFrOGXsGDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMzozNTowNFrOGYhYwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ5Mjg3OA==", "bodyText": "Probably extract this to a method so we don't need to add the comment below.", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r427492878", "createdAt": "2020-05-19T17:56:08Z", "author": {"login": "shixuan-fan"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "diffHunk": "@@ -161,17 +166,43 @@ public boolean get(FileReadRequest request, byte[] buffer, int offset)\n             stats.incrementCacheMiss();\n         }\n \n-        return result;\n+        if (!result && hiveFileContext.getQuota().isPresent() && getCacheSize(hiveFileContext.getTable()) + request.getLength() > hiveFileContext.getQuota().getAsLong()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f3c64fe6ffa3b76c1ccb8eefb6b18aa92142193"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY4MzA0NA==", "bodyText": "+1", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r427683044", "createdAt": "2020-05-20T00:58:18Z", "author": {"login": "jainxrohit"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "diffHunk": "@@ -161,17 +166,43 @@ public boolean get(FileReadRequest request, byte[] buffer, int offset)\n             stats.incrementCacheMiss();\n         }\n \n-        return result;\n+        if (!result && hiveFileContext.getQuota().isPresent() && getCacheSize(hiveFileContext.getTable()) + request.getLength() > hiveFileContext.getQuota().getAsLong()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ5Mjg3OA=="}, "originalCommit": {"oid": "8f3c64fe6ffa3b76c1ccb8eefb6b18aa92142193"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY4NjM4Nw==", "bodyText": "I dont think I understand this logic. Why get method has anything to do with cache quota?\nGet method should just return the data if the data is present in the cache?\nIt is the put method responsibility to put the data in the cache or not. While putting more data to the cache, it should be checked if the new data can be accommodated in the cache or not.", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r427686387", "createdAt": "2020-05-20T01:11:45Z", "author": {"login": "jainxrohit"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "diffHunk": "@@ -161,17 +166,43 @@ public boolean get(FileReadRequest request, byte[] buffer, int offset)\n             stats.incrementCacheMiss();\n         }\n \n-        return result;\n+        if (!result && hiveFileContext.getQuota().isPresent() && getCacheSize(hiveFileContext.getTable()) + request.getLength() > hiveFileContext.getQuota().getAsLong()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ5Mjg3OA=="}, "originalCommit": {"oid": "8f3c64fe6ffa3b76c1ccb8eefb6b18aa92142193"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc5MDQ1NA==", "bodyText": "Same, we don't wanna check quota on read. Move the checking and persisting cache logic to write.", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r427790454", "createdAt": "2020-05-20T07:16:29Z", "author": {"login": "highker"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "diffHunk": "@@ -161,17 +166,43 @@ public boolean get(FileReadRequest request, byte[] buffer, int offset)\n             stats.incrementCacheMiss();\n         }\n \n-        return result;\n+        if (!result && hiveFileContext.getQuota().isPresent() && getCacheSize(hiveFileContext.getTable()) + request.getLength() > hiveFileContext.getQuota().getAsLong()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ5Mjg3OA=="}, "originalCommit": {"oid": "8f3c64fe6ffa3b76c1ccb8eefb6b18aa92142193"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM2NjAxNg==", "bodyText": "@jainxrohit @highker\nOriginally we use\n// hint the cache no matter what cache.get(request.getPath(), () -> true);\nbecause we need to update the cache so that it can be marked as recently accessed.\nbut if it exceeds the cache quota, we can\u2019t put it in cache any more\nand we rely on read result to decide if we want to read and put to cache, that\u2019s why we have those logic in read path", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r428366016", "createdAt": "2020-05-20T23:35:04Z", "author": {"login": "kewang1024"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "diffHunk": "@@ -161,17 +166,43 @@ public boolean get(FileReadRequest request, byte[] buffer, int offset)\n             stats.incrementCacheMiss();\n         }\n \n-        return result;\n+        if (!result && hiveFileContext.getQuota().isPresent() && getCacheSize(hiveFileContext.getTable()) + request.getLength() > hiveFileContext.getQuota().getAsLong()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ5Mjg3OA=="}, "originalCommit": {"oid": "8f3c64fe6ffa3b76c1ccb8eefb6b18aa92142193"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MjQ0MTQ0OnYy", "diffSide": "RIGHT", "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNzo1NzozOFrOGXsJtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMzozOTo0N1rOGYhehw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ5MzgxNQ==", "bodyText": "Maybe we should update the current cache usage here given there is an eviction event?", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r427493815", "createdAt": "2020-05-19T17:57:38Z", "author": {"login": "shixuan-fan"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "diffHunk": "@@ -472,13 +495,14 @@ public ReadWriteLock getLock()\n     }\n \n     private class CacheRemovalListener\n-            implements RemovalListener<Path, Boolean>\n+            implements RemovalListener<Path, String>\n     {\n         @Override\n-        public void onRemoval(RemovalNotification<Path, Boolean> notification)\n+        public void onRemoval(RemovalNotification<Path, String> notification)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f3c64fe6ffa3b76c1ccb8eefb6b18aa92142193"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM2NzQ5NQ==", "bodyText": "I added\ntableFiles.remove(notification.getValue());\ndo you mean this one?", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r428367495", "createdAt": "2020-05-20T23:39:47Z", "author": {"login": "kewang1024"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "diffHunk": "@@ -472,13 +495,14 @@ public ReadWriteLock getLock()\n     }\n \n     private class CacheRemovalListener\n-            implements RemovalListener<Path, Boolean>\n+            implements RemovalListener<Path, String>\n     {\n         @Override\n-        public void onRemoval(RemovalNotification<Path, Boolean> notification)\n+        public void onRemoval(RemovalNotification<Path, String> notification)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ5MzgxNQ=="}, "originalCommit": {"oid": "8f3c64fe6ffa3b76c1ccb8eefb6b18aa92142193"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MzY1NTk5OnYy", "diffSide": "RIGHT", "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCachingInputStream.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMToxOToyMlrOGX4BTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNzoxNTo1OFrOGX-PZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY4ODI3MQ==", "bodyText": "I think we should not introduce cache quota here, we can leave this as it is. The only part which should worry about cacheQuota is cache writing methods(put).", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r427688271", "createdAt": "2020-05-20T01:19:22Z", "author": {"login": "jainxrohit"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCachingInputStream.java", "diffHunk": "@@ -51,9 +55,16 @@ public void readFully(long position, byte[] buffer, int offset, int length)\n     {\n         FileReadRequest key = new FileReadRequest(path, position, length);\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f3c64fe6ffa3b76c1ccb8eefb6b18aa92142193"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc5MDE4MA==", "bodyText": "Agree. We should not have cache quota check on any read path. We only check cache quota on put.", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r427790180", "createdAt": "2020-05-20T07:15:58Z", "author": {"login": "highker"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCachingInputStream.java", "diffHunk": "@@ -51,9 +55,16 @@ public void readFully(long position, byte[] buffer, int offset, int length)\n     {\n         FileReadRequest key = new FileReadRequest(path, position, length);\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY4ODI3MQ=="}, "originalCommit": {"oid": "8f3c64fe6ffa3b76c1ccb8eefb6b18aa92142193"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MzY2MDAzOnYy", "diffSide": "RIGHT", "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/HiveFileContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMToyMTo0NVrOGX4Dvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMToyMTo0NVrOGX4Dvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY4ODg5NQ==", "bodyText": "qutoa => tableQuota?", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r427688895", "createdAt": "2020-05-20T01:21:45Z", "author": {"login": "jainxrohit"}, "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/HiveFileContext.java", "diffHunk": "@@ -14,19 +14,24 @@\n package com.facebook.presto.hive;\n \n import java.util.Optional;\n+import java.util.OptionalLong;\n \n import static java.util.Objects.requireNonNull;\n \n public class HiveFileContext\n {\n-    public static final HiveFileContext DEFAULT_HIVE_FILE_CONTEXT = new HiveFileContext(false, Optional.empty());\n+    public static final HiveFileContext DEFAULT_HIVE_FILE_CONTEXT = new HiveFileContext(false, \"dummy\", OptionalLong.of(0), Optional.empty());\n \n     private final boolean cacheable;\n+    private final String table;\n+    private final OptionalLong quota;\n     private final Optional<ExtraHiveFileInfo<?>> extraFileInfo;\n \n-    public HiveFileContext(boolean cacheable, Optional<ExtraHiveFileInfo<?>> extraFileInfo)\n+    public HiveFileContext(boolean cacheable, String table, OptionalLong quota, Optional<ExtraHiveFileInfo<?>> extraFileInfo)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f3c64fe6ffa3b76c1ccb8eefb6b18aa92142193"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MzY2NDQ0OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplit.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMToyNDoyNlrOGX4Geg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMToyNDoyNlrOGX4Geg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY4OTU5NA==", "bodyText": "This looks off. Doesn't seem like a correct place.", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r427689594", "createdAt": "2020-05-20T01:24:26Z", "author": {"login": "jainxrohit"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplit.java", "diffHunk": "@@ -62,6 +64,7 @@\n     public HiveSplit(\n             @JsonProperty(\"database\") String database,\n             @JsonProperty(\"table\") String table,\n+            @JsonProperty(\"tableCacheQuota\") OptionalLong tableCacheQuota,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f3c64fe6ffa3b76c1ccb8eefb6b18aa92142193"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2Mzc5MzQ3OnYy", "diffSide": "RIGHT", "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/HiveFileContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMjo0MDoxMlrOGX5VEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMjo0MDoxMlrOGX5VEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcwOTcxNA==", "bodyText": "Rather than fixing this to be \"table\", we can generalize this to be schema, catalog, global, partition, etc. This means that we could have per-table, per-schema, per-catalog, per-partition, global quota etc. I'm not good at naming but potentially we could call schema, catalog, global, partition, table as \"CacheScope\" and this to be \"CacheScopeHandle\". Note that a \"Scope\" should have a distinct set of files so we don't over or under count. That means we won't be able to handle more fine-grained quota like per-user quota. But that should be fine for many use cases already.\nenum CacheScope\n{\n    GLOBAL, CATALOG, SCHEMA, TABLE, PARTITION\n}\n\nabstract class CacheScopeHandle<T>\n{\n    private final T identity;\n\n    long getIdentifier();\n}\nWith this approach, you could unify the global quota and per-XXX quota", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r427709714", "createdAt": "2020-05-20T02:40:12Z", "author": {"login": "highker"}, "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/HiveFileContext.java", "diffHunk": "@@ -14,19 +14,24 @@\n package com.facebook.presto.hive;\n \n import java.util.Optional;\n+import java.util.OptionalLong;\n \n import static java.util.Objects.requireNonNull;\n \n public class HiveFileContext\n {\n-    public static final HiveFileContext DEFAULT_HIVE_FILE_CONTEXT = new HiveFileContext(false, Optional.empty());\n+    public static final HiveFileContext DEFAULT_HIVE_FILE_CONTEXT = new HiveFileContext(false, \"dummy\", OptionalLong.of(0), Optional.empty());\n \n     private final boolean cacheable;\n+    private final String table;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f3c64fe6ffa3b76c1ccb8eefb6b18aa92142193"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2Mzc5NDYxOnYy", "diffSide": "RIGHT", "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/HiveFileContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMjo0MTowNFrOGX5V3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMjo0MTowNFrOGX5V3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcwOTkxOA==", "bodyText": "Actually, we should always have quota instead of optional. We could potentially set it to be infinite to indicate there is no limit.", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r427709918", "createdAt": "2020-05-20T02:41:04Z", "author": {"login": "highker"}, "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/HiveFileContext.java", "diffHunk": "@@ -14,19 +14,24 @@\n package com.facebook.presto.hive;\n \n import java.util.Optional;\n+import java.util.OptionalLong;\n \n import static java.util.Objects.requireNonNull;\n \n public class HiveFileContext\n {\n-    public static final HiveFileContext DEFAULT_HIVE_FILE_CONTEXT = new HiveFileContext(false, Optional.empty());\n+    public static final HiveFileContext DEFAULT_HIVE_FILE_CONTEXT = new HiveFileContext(false, \"dummy\", OptionalLong.of(0), Optional.empty());\n \n     private final boolean cacheable;\n+    private final String table;\n+    private final OptionalLong quota;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f3c64fe6ffa3b76c1ccb8eefb6b18aa92142193"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NDI3ODgwOnYy", "diffSide": "RIGHT", "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNzowODo0OVrOGX-CaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNzowODo0OVrOGX-CaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc4Njg1Ng==", "bodyText": "private final Map<Long, Set<Path>> scopeFiles = new ConcurrentHashMap<>();, where Long is gotten from CacheScopeHandle.getIdentifier()", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r427786856", "createdAt": "2020-05-20T07:08:49Z", "author": {"login": "highker"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "diffHunk": "@@ -85,7 +89,8 @@\n     // a mapping from remote file `F` to a range map `M`; the corresponding local cache file for each range in `M` represents the cached chunk of `F`\n     private final Map<Path, CacheRange> persistedRanges = new ConcurrentHashMap<>();\n     // a local cache only to control the lifecycle of persisted\n-    private final Cache<Path, Boolean> cache;\n+    private final Cache<Path, String> cache;\n+    private final Map<String, Set<Path>> tableFiles = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f3c64fe6ffa3b76c1ccb8eefb6b18aa92142193"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NDI4ODQxOnYy", "diffSide": "RIGHT", "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNzoxMjoyN1rOGX-Isg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNzoxMjoyN1rOGX-Isg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc4ODQ2Ng==", "bodyText": "You need to grab the read lock for range cacheRange.getLock().readLock(). CacheRange is not thread safe without lock.", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r427788466", "createdAt": "2020-05-20T07:12:27Z", "author": {"login": "highker"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "diffHunk": "@@ -161,17 +166,43 @@ public boolean get(FileReadRequest request, byte[] buffer, int offset)\n             stats.incrementCacheMiss();\n         }\n \n-        return result;\n+        if (!result && hiveFileContext.getQuota().isPresent() && getCacheSize(hiveFileContext.getTable()) + request.getLength() > hiveFileContext.getQuota().getAsLong()) {\n+            // it is not cached and we don't have enough cache quota to store\n+            return Optional.empty();\n+        }\n+\n+        try {\n+            // hint the cache\n+            cache.get(request.getPath(), hiveFileContext::getTable);\n+        }\n+        catch (ExecutionException e) {\n+            // ignore\n+        }\n+        return Optional.of(result);\n+    }\n+\n+    private long getCacheSize(String table)\n+    {\n+        long sum = 0;\n+        for (Path path : tableFiles.get(table)) {\n+            for (Range<Long> range : persistedRanges.get(path).getRange().asDescendingMapOfRanges().keySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f3c64fe6ffa3b76c1ccb8eefb6b18aa92142193"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3Njc3MjQxOnYy", "diffSide": "RIGHT", "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/CacheResult.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNjo0MjozMlrOGZ2Qsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNjo0MjozMlrOGZ2Qsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc1NjU5NQ==", "bodyText": "Put javadoc for each entry inline. Check QueryState as an example.", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r429756595", "createdAt": "2020-05-25T06:42:32Z", "author": {"login": "highker"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/CacheResult.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.cache.filemerge;\n+\n+/**\n+ * IN_CACHE represents the data we're reading is in cache", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "146e2a735dda64c3acb8259a56f94a8f2ec2687c"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3Njc3NDI4OnYy", "diffSide": "RIGHT", "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNjo0MzoyM1rOGZ2Ryg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNjo0MzoyM1rOGZ2Ryg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc1Njg3NA==", "bodyText": "Not used?", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r429756874", "createdAt": "2020-05-25T06:43:23Z", "author": {"login": "highker"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "diffHunk": "@@ -76,6 +79,7 @@\n     private static final String EXTENSION = \".cache\";\n \n     private static final int FILE_MERGE_BUFFER_SIZE = toIntExact(new DataSize(8, MEGABYTE).toBytes());\n+    private static final DataSize perTableCacheQuota = DataSize.succinctBytes(100);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "146e2a735dda64c3acb8259a56f94a8f2ec2687c"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3Njc3NTIyOnYy", "diffSide": "RIGHT", "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNjo0Mzo1MlrOGZ2ScQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNjo0Mzo1MlrOGZ2ScQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc1NzA0MQ==", "bodyText": "else { is redundant", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r429757041", "createdAt": "2020-05-25T06:43:52Z", "author": {"login": "highker"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "diffHunk": "@@ -161,17 +168,64 @@ public boolean get(FileReadRequest request, byte[] buffer, int offset)\n             stats.incrementCacheMiss();\n         }\n \n-        return result;\n+        if (!result && ifExceedQuota(cacheQuota, request)) {\n+            return CacheResult.CACHE_QUOTA_EXCEED;\n+        }\n+\n+        try {\n+            // hint the cache\n+            cache.get(request.getPath(), cacheQuota::getIdentifier);\n+        }\n+        catch (ExecutionException e) {\n+            // ignore\n+        }\n+\n+        if (result) {\n+            return CacheResult.IN_CACHE;\n+        }\n+        else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "146e2a735dda64c3acb8259a56f94a8f2ec2687c"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3Njc3NTkxOnYy", "diffSide": "RIGHT", "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNjo0NDoxMVrOGZ2S6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxOToxMjozNVrOGaIQAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc1NzE2MQ==", "bodyText": "static", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r429757161", "createdAt": "2020-05-25T06:44:11Z", "author": {"login": "highker"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "diffHunk": "@@ -161,17 +168,64 @@ public boolean get(FileReadRequest request, byte[] buffer, int offset)\n             stats.incrementCacheMiss();\n         }\n \n-        return result;\n+        if (!result && ifExceedQuota(cacheQuota, request)) {\n+            return CacheResult.CACHE_QUOTA_EXCEED;\n+        }\n+\n+        try {\n+            // hint the cache\n+            cache.get(request.getPath(), cacheQuota::getIdentifier);\n+        }\n+        catch (ExecutionException e) {\n+            // ignore\n+        }\n+\n+        if (result) {\n+            return CacheResult.IN_CACHE;\n+        }\n+        else {\n+            return CacheResult.NOT_IN_CACHE;\n+        }\n+    }\n+\n+    private boolean ifExceedQuota(CacheQuota cacheQuota, FileReadRequest request)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "146e2a735dda64c3acb8259a56f94a8f2ec2687c"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA1MTMyOA==", "bodyText": "it could make calls to instance variable", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r430051328", "createdAt": "2020-05-25T19:12:35Z", "author": {"login": "kewang1024"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "diffHunk": "@@ -161,17 +168,64 @@ public boolean get(FileReadRequest request, byte[] buffer, int offset)\n             stats.incrementCacheMiss();\n         }\n \n-        return result;\n+        if (!result && ifExceedQuota(cacheQuota, request)) {\n+            return CacheResult.CACHE_QUOTA_EXCEED;\n+        }\n+\n+        try {\n+            // hint the cache\n+            cache.get(request.getPath(), cacheQuota::getIdentifier);\n+        }\n+        catch (ExecutionException e) {\n+            // ignore\n+        }\n+\n+        if (result) {\n+            return CacheResult.IN_CACHE;\n+        }\n+        else {\n+            return CacheResult.NOT_IN_CACHE;\n+        }\n+    }\n+\n+    private boolean ifExceedQuota(CacheQuota cacheQuota, FileReadRequest request)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc1NzE2MQ=="}, "originalCommit": {"oid": "146e2a735dda64c3acb8259a56f94a8f2ec2687c"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3Njc3Njg2OnYy", "diffSide": "RIGHT", "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNjo0NDozN1rOGZ2Tfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNjo0NDozN1rOGZ2Tfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc1NzMxMQ==", "bodyText": "long\ngetCacheScopeSizeInBytes\nThis is an extremely expensive call that should not be tested for every read that misses a cache. Rather, we should have a single background thread populating the cache size for each scope and save it in Map<Long, Long>.", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r429757311", "createdAt": "2020-05-25T06:44:37Z", "author": {"login": "highker"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "diffHunk": "@@ -161,17 +168,64 @@ public boolean get(FileReadRequest request, byte[] buffer, int offset)\n             stats.incrementCacheMiss();\n         }\n \n-        return result;\n+        if (!result && ifExceedQuota(cacheQuota, request)) {\n+            return CacheResult.CACHE_QUOTA_EXCEED;\n+        }\n+\n+        try {\n+            // hint the cache\n+            cache.get(request.getPath(), cacheQuota::getIdentifier);\n+        }\n+        catch (ExecutionException e) {\n+            // ignore\n+        }\n+\n+        if (result) {\n+            return CacheResult.IN_CACHE;\n+        }\n+        else {\n+            return CacheResult.NOT_IN_CACHE;\n+        }\n+    }\n+\n+    private boolean ifExceedQuota(CacheQuota cacheQuota, FileReadRequest request)\n+    {\n+        DataSize cacheSize = DataSize.succinctBytes(getCacheScopeSize(cacheQuota.getIdentifier()) + request.getLength());\n+        Optional<DataSize> quota = cacheQuota.getQuota();\n+        return quota.isPresent() && (cacheSize.compareTo(quota.get()) > 0);\n+    }\n+\n+    private long getCacheScopeSize(Long cacheScopeIdentifier)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "146e2a735dda64c3acb8259a56f94a8f2ec2687c"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3Njc4NjgwOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveClientConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNjo0ODo1NlrOGZ2Zjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNjo0ODo1NlrOGZ2Zjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc1ODg2Mw==", "bodyText": "Move it to CacheConfig", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r429758863", "createdAt": "2020-05-25T06:48:56Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveClientConfig.java", "diffHunk": "@@ -167,6 +168,7 @@\n     private List<String> fileStatusCacheTables = ImmutableList.of();\n \n     private DataSize pageFileStripeMaxSize = new DataSize(24, MEGABYTE);\n+    private CacheQuotaScope cacheQuotaScope = GLOBAL;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "146e2a735dda64c3acb8259a56f94a8f2ec2687c"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3Njc4OTcyOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSessionProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNjo1MDoxM1rOGZ2bRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNjo1MDoxM1rOGZ2bRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc1OTMwMw==", "bodyText": "Remove this session property. Scope is from config directly.", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r429759303", "createdAt": "2020-05-25T06:50:13Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSessionProperties.java", "diffHunk": "@@ -100,6 +100,7 @@\n     public static final String OFFLINE_DATA_DEBUG_MODE_ENABLED = \"offline_data_debug_mode_enabled\";\n     public static final String FAIL_FAST_ON_INSERT_INTO_IMMUTABLE_PARTITIONS_ENABLED = \"fail_fast_on_insert_into_immutable_partitions_enabled\";\n     public static final String USE_LIST_DIRECTORY_CACHE = \"use_list_directory_cache\";\n+    public static final String CACHE_QUOTA_SCOPE = \"cache_quota_scope\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "146e2a735dda64c3acb8259a56f94a8f2ec2687c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3Njc5Mzk5OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNjo1MjowNVrOGZ2d2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNjo1MjowNVrOGZ2d2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc1OTk2MQ==", "bodyText": "Create a default value in CacheConfig and get the value from there", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r429759961", "createdAt": "2020-05-25T06:52:05Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitSource.java", "diffHunk": "@@ -465,9 +480,23 @@ void fail(Throwable e)\n                     splitBytes = internalSplit.getEnd() - internalSplit.getStart();\n                 }\n \n+                CacheQuota cacheQuota;\n+                // todo: read from config\n+                DataSize cacheQuotaSize = DataSize.succinctDataSize(10, DataSize.Unit.GIGABYTE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "146e2a735dda64c3acb8259a56f94a8f2ec2687c"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjgwMzU3OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNjo1NjoxN1rOGZ2j3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNjo1NjoxN1rOGZ2j3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc2MTUwMQ==", "bodyText": "We don't have to have this logic in this PR. If we do wanna have it, make it map to denote what special scopes as what quota.", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r429761501", "createdAt": "2020-05-25T06:56:17Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitSource.java", "diffHunk": "@@ -465,9 +480,23 @@ void fail(Throwable e)\n                     splitBytes = internalSplit.getEnd() - internalSplit.getStart();\n                 }\n \n+                CacheQuota cacheQuota;\n+                // todo: read from config\n+                DataSize cacheQuotaSize = DataSize.succinctDataSize(10, DataSize.Unit.GIGABYTE);\n+                Set<String> cacheQuotaWhiteList = ImmutableSet.of();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "146e2a735dda64c3acb8259a56f94a8f2ec2687c"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjgwNTEzOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitSource.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNjo1NzowNFrOGZ2k3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNjozMzozMlrOGaQXBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc2MTc1Nw==", "bodyText": "We should have logic for other scopes", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r429761757", "createdAt": "2020-05-25T06:57:04Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitSource.java", "diffHunk": "@@ -465,9 +480,23 @@ void fail(Throwable e)\n                     splitBytes = internalSplit.getEnd() - internalSplit.getStart();\n                 }\n \n+                CacheQuota cacheQuota;\n+                // todo: read from config\n+                DataSize cacheQuotaSize = DataSize.succinctDataSize(10, DataSize.Unit.GIGABYTE);\n+                Set<String> cacheQuotaWhiteList = ImmutableSet.of();\n+                switch(cacheQuotaScope) {\n+                    case TABLE:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "146e2a735dda64c3acb8259a56f94a8f2ec2687c"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE1MzU5Nw==", "bodyText": "Currently we can add logic for PARTITION directly, but it requires additional changes to add support for SCHEMA / CATALOG\nI'm thinking having a minimal viable version and adding those support when needed", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r430153597", "createdAt": "2020-05-26T04:48:13Z", "author": {"login": "kewang1024"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitSource.java", "diffHunk": "@@ -465,9 +480,23 @@ void fail(Throwable e)\n                     splitBytes = internalSplit.getEnd() - internalSplit.getStart();\n                 }\n \n+                CacheQuota cacheQuota;\n+                // todo: read from config\n+                DataSize cacheQuotaSize = DataSize.succinctDataSize(10, DataSize.Unit.GIGABYTE);\n+                Set<String> cacheQuotaWhiteList = ImmutableSet.of();\n+                switch(cacheQuotaScope) {\n+                    case TABLE:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc2MTc1Nw=="}, "originalCommit": {"oid": "146e2a735dda64c3acb8259a56f94a8f2ec2687c"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE4NDE5OA==", "bodyText": "You don't need to do any refactoring to achieve this:\n\nGLOBAL: \".\"\nSCHEMA: databaseName\nTABLE: databaseName + \".\" + tableName \nPARTITION: databaseName + \".\" + tableName + \".\" + internalSplit.getPartitionName()\n\nIt is very important to keep in mind that without fully qualified names, subscopes can have duplication even they are not.", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r430184198", "createdAt": "2020-05-26T06:33:32Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitSource.java", "diffHunk": "@@ -465,9 +480,23 @@ void fail(Throwable e)\n                     splitBytes = internalSplit.getEnd() - internalSplit.getStart();\n                 }\n \n+                CacheQuota cacheQuota;\n+                // todo: read from config\n+                DataSize cacheQuotaSize = DataSize.succinctDataSize(10, DataSize.Unit.GIGABYTE);\n+                Set<String> cacheQuotaWhiteList = ImmutableSet.of();\n+                switch(cacheQuotaScope) {\n+                    case TABLE:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc2MTc1Nw=="}, "originalCommit": {"oid": "146e2a735dda64c3acb8259a56f94a8f2ec2687c"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjgxMjgzOnYy", "diffSide": "RIGHT", "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/HiveFileContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNzowMDoyOVrOGZ2pjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNzowMDoyOVrOGZ2pjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc2Mjk1OQ==", "bodyText": "CacheQuota<?> cacheQuota;", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r429762959", "createdAt": "2020-05-25T07:00:29Z", "author": {"login": "highker"}, "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/HiveFileContext.java", "diffHunk": "@@ -15,18 +15,21 @@\n \n import java.util.Optional;\n \n+import static com.facebook.presto.hive.CacheQuotaScope.TABLE;\n import static java.util.Objects.requireNonNull;\n \n public class HiveFileContext\n {\n-    public static final HiveFileContext DEFAULT_HIVE_FILE_CONTEXT = new HiveFileContext(false, Optional.empty());\n+    public static final HiveFileContext DEFAULT_HIVE_FILE_CONTEXT = new HiveFileContext(false, new CacheQuota(TABLE, \"test\", Optional.empty()), Optional.empty());\n \n     private final boolean cacheable;\n+    private final CacheQuota cacheQuota;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "146e2a735dda64c3acb8259a56f94a8f2ec2687c"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjgxNDU1OnYy", "diffSide": "RIGHT", "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuota.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNzowMTowOFrOGZ2qlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNzowMTowOFrOGZ2qlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc2MzIyMA==", "bodyText": "This class has to be serializable. I can't quite recall if generic T can be serialized. (Maybe it could; but I can't find a good example). If it's too complicated, just make identity of type String so we don't have to worry about it.", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r429763220", "createdAt": "2020-05-25T07:01:08Z", "author": {"login": "highker"}, "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuota.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import io.airlift.units.DataSize;\n+\n+import java.util.Optional;\n+\n+import static com.facebook.presto.hive.CacheQuotaScope.GLOBAL;\n+import static com.google.common.hash.Hashing.md5;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+\n+public class CacheQuota<T>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "146e2a735dda64c3acb8259a56f94a8f2ec2687c"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjgzMjQ2OnYy", "diffSide": "RIGHT", "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNzowODozOVrOGZ21lA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNzowODozOVrOGZ21lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc2NjAzNg==", "bodyText": "Remove the first TODO in this class: TODO: Make cache eviction based on cache...", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r429766036", "createdAt": "2020-05-25T07:08:39Z", "author": {"login": "highker"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "diffHunk": "@@ -13,11 +13,13 @@\n  */\n package com.facebook.presto.cache.filemerge;\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "146e2a735dda64c3acb8259a56f94a8f2ec2687c"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3Njg1OTQwOnYy", "diffSide": "RIGHT", "path": "presto-cache/src/main/java/com/facebook/presto/cache/CacheManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNzoxOTo0NlrOGZ3GcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNzoxOTo0NlrOGZ3GcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc3MDM1Mw==", "bodyText": "We should use CacheQuota as well to match the one in get\nMove cacheQuota to the last param", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r429770353", "createdAt": "2020-05-25T07:19:46Z", "author": {"login": "highker"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/CacheManager.java", "diffHunk": "@@ -22,13 +24,16 @@\n {\n     /**\n      * Given {@param request}, check if the data is in cache.\n-     * If it is not in cache, return false.\n-     * Otherwise, save the data in {@param buffer} starting at {@param offset} and return true.\n+     * If it is in cache, save the data in {@param buffer} starting at {@param offset} and return IN_CACHE.\n+     * If it is not in cache:\n+     *      1. If there is still cache quota for this table, return NOT_IN_CACHE\n+     *      2. Otherwise, return CACHE_QUOTA_EXCEED\n+     * @return CacheResult\n      */\n-    boolean get(FileReadRequest request, byte[] buffer, int offset);\n+    CacheResult get(CacheQuota cacheQuota, FileReadRequest request, byte[] buffer, int offset);\n \n     /**\n      * Save data in cache\n      */\n-    void put(FileReadRequest request, Slice data);\n+    void put(long cacheScopeIdentifier, FileReadRequest request, Slice data);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "146e2a735dda64c3acb8259a56f94a8f2ec2687c"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3Njg2MDczOnYy", "diffSide": "RIGHT", "path": "presto-cache/src/main/java/com/facebook/presto/cache/CacheManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNzoyMDoxNFrOGZ3HOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNzoyMDoxNFrOGZ3HOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc3MDU1Mw==", "bodyText": "Move cacheQuota to the last param", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r429770553", "createdAt": "2020-05-25T07:20:14Z", "author": {"login": "highker"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/CacheManager.java", "diffHunk": "@@ -22,13 +24,16 @@\n {\n     /**\n      * Given {@param request}, check if the data is in cache.\n-     * If it is not in cache, return false.\n-     * Otherwise, save the data in {@param buffer} starting at {@param offset} and return true.\n+     * If it is in cache, save the data in {@param buffer} starting at {@param offset} and return IN_CACHE.\n+     * If it is not in cache:\n+     *      1. If there is still cache quota for this table, return NOT_IN_CACHE\n+     *      2. Otherwise, return CACHE_QUOTA_EXCEED\n+     * @return CacheResult\n      */\n-    boolean get(FileReadRequest request, byte[] buffer, int offset);\n+    CacheResult get(CacheQuota cacheQuota, FileReadRequest request, byte[] buffer, int offset);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "146e2a735dda64c3acb8259a56f94a8f2ec2687c"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3Njg2NzY4OnYy", "diffSide": "RIGHT", "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNzoyMjo0M1rOGZ3Ldw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNzoyMjo0M1rOGZ3Ldw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc3MTYzOQ==", "bodyText": "We should have stats for this state", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r429771639", "createdAt": "2020-05-25T07:22:43Z", "author": {"login": "highker"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "diffHunk": "@@ -161,17 +168,64 @@ public boolean get(FileReadRequest request, byte[] buffer, int offset)\n             stats.incrementCacheMiss();\n         }\n \n-        return result;\n+        if (!result && ifExceedQuota(cacheQuota, request)) {\n+            return CacheResult.CACHE_QUOTA_EXCEED;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "146e2a735dda64c3acb8259a56f94a8f2ec2687c"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3Njg3MTk1OnYy", "diffSide": "RIGHT", "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNzoyNDowOFrOGZ3OHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNzoyNDowOFrOGZ3OHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc3MjMxOQ==", "bodyText": "typo Scopre", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r429772319", "createdAt": "2020-05-25T07:24:08Z", "author": {"login": "highker"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "diffHunk": "@@ -85,7 +89,10 @@\n     // a mapping from remote file `F` to a range map `M`; the corresponding local cache file for each range in `M` represents the cached chunk of `F`\n     private final Map<Path, CacheRange> persistedRanges = new ConcurrentHashMap<>();\n     // a local cache only to control the lifecycle of persisted\n-    private final Cache<Path, Boolean> cache;\n+    // Path and its corresponding cacheScope identifier\n+    private final Cache<Path, Long> cache;\n+    // CacheScopeHandle identifier to its cached files mapping\n+    private final Map<Long, Set<Path>> cacheScopreFiles = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "146e2a735dda64c3acb8259a56f94a8f2ec2687c"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3OTQ4NTI3OnYy", "diffSide": "RIGHT", "path": "presto-cache/src/main/java/com/facebook/presto/cache/CacheConfig.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNjoxOTo1M1rOGaQCSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQwMDowMzoxNFrOGcvQOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE3ODg5MQ==", "bodyText": "AlluxioCacheConfig.getMaxCacheSize() can be superseded by this call.", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r430178891", "createdAt": "2020-05-26T06:19:53Z", "author": {"login": "highker"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/CacheConfig.java", "diffHunk": "@@ -76,4 +83,26 @@ public CacheType getCacheType()\n     {\n         return cacheType;\n     }\n+\n+    public CacheQuotaScope getCacheQuotaScope()\n+    {\n+        return cacheQuotaScope;\n+    }\n+\n+    @Config(\"cache.cache-scope\")\n+    public void setCacheQuotaScope(CacheQuotaScope cacheQuotaScope)\n+    {\n+        this.cacheQuotaScope = cacheQuotaScope;\n+    }\n+\n+    public Optional<DataSize> getDefaultCacheQuota()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e23bcf5a043e46f5a7002d8907917375f5c1750e"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc0OTk1Mg==", "bodyText": "What does DefaultCacheQuota represents? Per table quota? If yes then CacheSize(which is worker level cache size for all tables) and this is different.", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r430749952", "createdAt": "2020-05-26T22:51:07Z", "author": {"login": "jainxrohit"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/CacheConfig.java", "diffHunk": "@@ -76,4 +83,26 @@ public CacheType getCacheType()\n     {\n         return cacheType;\n     }\n+\n+    public CacheQuotaScope getCacheQuotaScope()\n+    {\n+        return cacheQuotaScope;\n+    }\n+\n+    @Config(\"cache.cache-scope\")\n+    public void setCacheQuotaScope(CacheQuotaScope cacheQuotaScope)\n+    {\n+        this.cacheQuotaScope = cacheQuotaScope;\n+    }\n+\n+    public Optional<DataSize> getDefaultCacheQuota()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE3ODg5MQ=="}, "originalCommit": {"oid": "e23bcf5a043e46f5a7002d8907917375f5c1750e"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc1NDcxMQ==", "bodyText": "AlluxioCacheConfig.getMaxCacheSize() is equivalent to getDefaultCacheQuota() with getCacheQuotaScope == GLOBAL", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r430754711", "createdAt": "2020-05-26T23:05:04Z", "author": {"login": "highker"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/CacheConfig.java", "diffHunk": "@@ -76,4 +83,26 @@ public CacheType getCacheType()\n     {\n         return cacheType;\n     }\n+\n+    public CacheQuotaScope getCacheQuotaScope()\n+    {\n+        return cacheQuotaScope;\n+    }\n+\n+    @Config(\"cache.cache-scope\")\n+    public void setCacheQuotaScope(CacheQuotaScope cacheQuotaScope)\n+    {\n+        this.cacheQuotaScope = cacheQuotaScope;\n+    }\n+\n+    public Optional<DataSize> getDefaultCacheQuota()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE3ODg5MQ=="}, "originalCommit": {"oid": "e23bcf5a043e46f5a7002d8907917375f5c1750e"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc1ODg4OQ==", "bodyText": "Can we bring AlluxioCacheConfig.getMaxCacheSize to CacheConfig?  Its not used in the File_Merge but CacheConfig seems like a home for it.", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r430758889", "createdAt": "2020-05-26T23:18:26Z", "author": {"login": "jainxrohit"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/CacheConfig.java", "diffHunk": "@@ -76,4 +83,26 @@ public CacheType getCacheType()\n     {\n         return cacheType;\n     }\n+\n+    public CacheQuotaScope getCacheQuotaScope()\n+    {\n+        return cacheQuotaScope;\n+    }\n+\n+    @Config(\"cache.cache-scope\")\n+    public void setCacheQuotaScope(CacheQuotaScope cacheQuotaScope)\n+    {\n+        this.cacheQuotaScope = cacheQuotaScope;\n+    }\n+\n+    public Optional<DataSize> getDefaultCacheQuota()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE3ODg5MQ=="}, "originalCommit": {"oid": "e23bcf5a043e46f5a7002d8907917375f5c1750e"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc4NzUxMg==", "bodyText": "It seems different to me, because DefaultCacheQuota can mean different thing depending on  CacheQuotaScope", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r432787512", "createdAt": "2020-05-30T00:03:14Z", "author": {"login": "kewang1024"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/CacheConfig.java", "diffHunk": "@@ -76,4 +83,26 @@ public CacheType getCacheType()\n     {\n         return cacheType;\n     }\n+\n+    public CacheQuotaScope getCacheQuotaScope()\n+    {\n+        return cacheQuotaScope;\n+    }\n+\n+    @Config(\"cache.cache-scope\")\n+    public void setCacheQuotaScope(CacheQuotaScope cacheQuotaScope)\n+    {\n+        this.cacheQuotaScope = cacheQuotaScope;\n+    }\n+\n+    public Optional<DataSize> getDefaultCacheQuota()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE3ODg5MQ=="}, "originalCommit": {"oid": "e23bcf5a043e46f5a7002d8907917375f5c1750e"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3OTQ4OTE1OnYy", "diffSide": "RIGHT", "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNjoyMTozNFrOGaQEpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNjoyMTozNFrOGaQEpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE3OTQ5Mg==", "bodyText": "remove this as well", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r430179492", "createdAt": "2020-05-26T06:21:34Z", "author": {"login": "highker"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "diffHunk": "@@ -65,7 +70,6 @@\n import static java.util.concurrent.TimeUnit.MILLISECONDS;\n \n // 3 major TODOs for this class:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e23bcf5a043e46f5a7002d8907917375f5c1750e"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3OTQ5MDIyOnYy", "diffSide": "RIGHT", "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNjoyMTo1N1rOGaQFQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNjoyMTo1N1rOGaQFQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE3OTY0OA==", "bodyText": "cacheScopeSizeInBytes", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r430179648", "createdAt": "2020-05-26T06:21:57Z", "author": {"login": "highker"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "diffHunk": "@@ -81,11 +85,16 @@\n \n     private final ExecutorService cacheFlushExecutor;\n     private final ExecutorService cacheRemovalExecutor;\n+    private final ScheduledExecutorService cacheSizeCalculateExecutor;\n \n     // a mapping from remote file `F` to a range map `M`; the corresponding local cache file for each range in `M` represents the cached chunk of `F`\n     private final Map<Path, CacheRange> persistedRanges = new ConcurrentHashMap<>();\n     // a local cache only to control the lifecycle of persisted\n-    private final Cache<Path, Boolean> cache;\n+    // Path and its corresponding cacheScope identifier\n+    private final Cache<Path, Long> cache;\n+    // CacheScopeHandle identifier to its cached files mapping\n+    private final Map<Long, Set<Path>> cacheScopeFiles = new ConcurrentHashMap<>();\n+    private final Map<Long, Long> cacheScopeSize = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e23bcf5a043e46f5a7002d8907917375f5c1750e"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3OTQ5NDY0OnYy", "diffSide": "RIGHT", "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNjoyMzo0MlrOGaQH5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNjoyMzo0MlrOGaQH5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE4MDMyNA==", "bodyText": "you don't need { }", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r430180324", "createdAt": "2020-05-26T06:23:42Z", "author": {"login": "highker"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "diffHunk": "@@ -140,6 +151,11 @@ public FileMergeCacheManager(\n                 }\n             }));\n         }\n+\n+        this.cacheSizeCalculateExecutor.schedule(\n+                () -> { cacheScopeFiles.keySet().forEach(cacheIdentifier -> cacheScopeSize.put(cacheIdentifier, getCacheScopeSizeInBytes(cacheIdentifier))); },", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e23bcf5a043e46f5a7002d8907917375f5c1750e"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3OTUwMDU3OnYy", "diffSide": "RIGHT", "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuota.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNjoyNTo1N1rOGaQLYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNjoyNTo1N1rOGaQLYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE4MTIxNw==", "bodyText": "toString() is redundant", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r430181217", "createdAt": "2020-05-26T06:25:57Z", "author": {"login": "highker"}, "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuota.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import io.airlift.units.DataSize;\n+\n+import java.util.Optional;\n+\n+import static com.facebook.presto.hive.CacheQuotaScope.GLOBAL;\n+import static com.google.common.hash.Hashing.md5;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+\n+public class CacheQuota\n+{\n+    private CacheQuotaScope cacheQuotaScope;\n+    private final String identity;\n+    private final Optional<DataSize> quota;\n+\n+    public static final CacheQuota NO_CACHE_CONSTRAINS = new CacheQuota(GLOBAL, \"NO_IDENTITY\", Optional.empty());\n+\n+    public CacheQuota(CacheQuotaScope cacheQuotaScope, String identity, Optional<DataSize> quota)\n+    {\n+        this.cacheQuotaScope = requireNonNull(cacheQuotaScope, \"cacheScope is null\");\n+        this.identity = requireNonNull(identity, \"identity is null\");\n+        this.quota = requireNonNull(quota, \"quota is null\");\n+    }\n+\n+    public CacheQuotaScope getCacheQuotaScope()\n+    {\n+        return cacheQuotaScope;\n+    }\n+\n+    public long getIdentifier()\n+    {\n+        return md5().hashString(identity.toString(), UTF_8).asLong();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e23bcf5a043e46f5a7002d8907917375f5c1750e"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3OTUwOTM0OnYy", "diffSide": "RIGHT", "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuotaScope.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNjoyOTo0MFrOGaQRBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNzozOTo0M1rOGapLIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE4MjY2MQ==", "bodyText": "Remove CATALOG given it's only for hive catalog", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r430182661", "createdAt": "2020-05-26T06:29:40Z", "author": {"login": "highker"}, "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuotaScope.java", "diffHunk": "@@ -0,0 +1,19 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+public enum CacheQuotaScope\n+{\n+    GLOBAL, CATALOG, SCHEMA, TABLE, PARTITION", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e23bcf5a043e46f5a7002d8907917375f5c1750e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU5MDc1NA==", "bodyText": "I'm not particularly sure because it is possible to have multiple hive connectors under different connector names, and thus multiple catalogs.", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r430590754", "createdAt": "2020-05-26T17:39:43Z", "author": {"login": "shixuan-fan"}, "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuotaScope.java", "diffHunk": "@@ -0,0 +1,19 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+public enum CacheQuotaScope\n+{\n+    GLOBAL, CATALOG, SCHEMA, TABLE, PARTITION", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE4MjY2MQ=="}, "originalCommit": {"oid": "e23bcf5a043e46f5a7002d8907917375f5c1750e"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3OTUyMTgxOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNjozNDoyM1rOGaQYWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNjozNDoyM1rOGaQYWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE4NDUzNw==", "bodyText": "throw exception", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r430184537", "createdAt": "2020-05-26T06:34:23Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitSource.java", "diffHunk": "@@ -465,9 +487,23 @@ void fail(Throwable e)\n                     splitBytes = internalSplit.getEnd() - internalSplit.getStart();\n                 }\n \n+                CacheQuota cacheQuota;\n+                switch (cacheQuotaScope) {\n+                    case TABLE:\n+                        cacheQuota = new CacheQuota(TABLE, tableName, defaultCacheQuota);\n+                        break;\n+                    case PARTITION:\n+                        cacheQuota = new CacheQuota(PARTITION, internalSplit.getPartitionName(), defaultCacheQuota);\n+                        break;\n+                    default:\n+                        // todo: add cache quota support for other scope\n+                        cacheQuota = NO_CACHE_CONSTRAINS;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e23bcf5a043e46f5a7002d8907917375f5c1750e"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MjAxMjU4OnYy", "diffSide": "RIGHT", "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/CacheResult.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNzozMzowM1rOGao7_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMzoyMDowOVrOGazd4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU4Njg3OA==", "bodyText": "nit: Did you mean to say \"write them to cache\"?", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r430586878", "createdAt": "2020-05-26T17:33:03Z", "author": {"login": "shixuan-fan"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/CacheResult.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.cache.filemerge;\n+\n+public enum CacheResult\n+{\n+    /**\n+     * The data we're reading is in cache\n+     */\n+    IN_CACHE,\n+    /**\n+     * The data we're reading is not in cache and we have quota to read them to cache", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e23bcf5a043e46f5a7002d8907917375f5c1750e"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc1OTM5NQ==", "bodyText": "I would prefer these to be standard names, HIT, MISS, etc.", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r430759395", "createdAt": "2020-05-26T23:20:09Z", "author": {"login": "jainxrohit"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/CacheResult.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.cache.filemerge;\n+\n+public enum CacheResult\n+{\n+    /**\n+     * The data we're reading is in cache\n+     */\n+    IN_CACHE,\n+    /**\n+     * The data we're reading is not in cache and we have quota to read them to cache", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU4Njg3OA=="}, "originalCommit": {"oid": "e23bcf5a043e46f5a7002d8907917375f5c1750e"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MjAzMjI4OnYy", "diffSide": "RIGHT", "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuota.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNzozODozNFrOGapIcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNzozODozNFrOGapIcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU5MDA2Ng==", "bodyText": "nit: NO_CACHE_CONSTRAINTS?", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r430590066", "createdAt": "2020-05-26T17:38:34Z", "author": {"login": "shixuan-fan"}, "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuota.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import io.airlift.units.DataSize;\n+\n+import java.util.Optional;\n+\n+import static com.facebook.presto.hive.CacheQuotaScope.GLOBAL;\n+import static com.google.common.hash.Hashing.md5;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+\n+public class CacheQuota\n+{\n+    private CacheQuotaScope cacheQuotaScope;\n+    private final String identity;\n+    private final Optional<DataSize> quota;\n+\n+    public static final CacheQuota NO_CACHE_CONSTRAINS = new CacheQuota(GLOBAL, \"NO_IDENTITY\", Optional.empty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e23bcf5a043e46f5a7002d8907917375f5c1750e"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MjA0NTEwOnYy", "diffSide": "RIGHT", "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuota.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNzo0MjoyMFrOGapRDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNzo0MjoyMFrOGapRDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU5MjI3MQ==", "bodyText": "You probably need jackson annotation given this would be used in HiveSplit to pass from coordinator to worker.", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r430592271", "createdAt": "2020-05-26T17:42:20Z", "author": {"login": "shixuan-fan"}, "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuota.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import io.airlift.units.DataSize;\n+\n+import java.util.Optional;\n+\n+import static com.facebook.presto.hive.CacheQuotaScope.GLOBAL;\n+import static com.google.common.hash.Hashing.md5;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+\n+public class CacheQuota", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e23bcf5a043e46f5a7002d8907917375f5c1750e"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NjU3MDQ5OnYy", "diffSide": "RIGHT", "path": "presto-cache/src/main/java/com/facebook/presto/cache/CacheConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzo1Mjo0NFrOGbWfuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxODo0Nzo1OVrOGcoPTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMzMzMwNQ==", "bodyText": "Why it is called default? Isn't it the cacheQuota allocated for this config, it could be default or the one configured?", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r431333305", "createdAt": "2020-05-27T17:52:44Z", "author": {"login": "jainxrohit"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/CacheConfig.java", "diffHunk": "@@ -15,15 +15,22 @@\n \n import com.facebook.airlift.configuration.Config;\n import com.facebook.airlift.configuration.ConfigDescription;\n+import com.facebook.presto.hive.CacheQuotaScope;\n+import io.airlift.units.DataSize;\n \n import java.net.URI;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.hive.CacheQuotaScope.GLOBAL;\n \n public class CacheConfig\n {\n     private boolean cachingEnabled;\n     private CacheType cacheType;\n     private URI baseDirectory;\n     private boolean validationEnabled;\n+    private CacheQuotaScope cacheQuotaScope = GLOBAL;\n+    private Optional<DataSize> defaultCacheQuota = Optional.empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e23bcf5a043e46f5a7002d8907917375f5c1750e"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY3MjU4OQ==", "bodyText": "I just updated the project doc link and explained it there", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r432672589", "createdAt": "2020-05-29T18:47:59Z", "author": {"login": "kewang1024"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/CacheConfig.java", "diffHunk": "@@ -15,15 +15,22 @@\n \n import com.facebook.airlift.configuration.Config;\n import com.facebook.airlift.configuration.ConfigDescription;\n+import com.facebook.presto.hive.CacheQuotaScope;\n+import io.airlift.units.DataSize;\n \n import java.net.URI;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.hive.CacheQuotaScope.GLOBAL;\n \n public class CacheConfig\n {\n     private boolean cachingEnabled;\n     private CacheType cacheType;\n     private URI baseDirectory;\n     private boolean validationEnabled;\n+    private CacheQuotaScope cacheQuotaScope = GLOBAL;\n+    private Optional<DataSize> defaultCacheQuota = Optional.empty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMzMzMwNQ=="}, "originalCommit": {"oid": "e23bcf5a043e46f5a7002d8907917375f5c1750e"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NjYzODU1OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveClientModule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxODowODozOVrOGbXKcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxODowODozOVrOGbXKcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM0NDI0Mw==", "bodyText": "Do we need this? I thought it was already injected via CachingModule?", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r431344243", "createdAt": "2020-05-27T18:08:39Z", "author": {"login": "jainxrohit"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveClientModule.java", "diffHunk": "@@ -97,6 +98,7 @@ public void configure(Binder binder)\n         binder.bind(HdfsConfigurationInitializer.class).in(Scopes.SINGLETON);\n         newSetBinder(binder, DynamicConfigurationProvider.class);\n         configBinder(binder).bindConfig(HiveClientConfig.class);\n+        configBinder(binder).bindConfig(CacheConfig.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e23bcf5a043e46f5a7002d8907917375f5c1750e"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NjY2MTc4OnYy", "diffSide": "RIGHT", "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuota.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxODoxNToxNVrOGbXZhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxODoxNToxNVrOGbXZhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM0ODEwMA==", "bodyText": "I think we should just create hash at the initialization time.", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r431348100", "createdAt": "2020-05-27T18:15:15Z", "author": {"login": "jainxrohit"}, "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuota.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import io.airlift.units.DataSize;\n+\n+import java.util.Optional;\n+\n+import static com.facebook.presto.hive.CacheQuotaScope.GLOBAL;\n+import static com.google.common.hash.Hashing.md5;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+\n+public class CacheQuota\n+{\n+    private CacheQuotaScope cacheQuotaScope;\n+    private final String identity;\n+    private final Optional<DataSize> quota;\n+\n+    public static final CacheQuota NO_CACHE_CONSTRAINS = new CacheQuota(GLOBAL, \"NO_IDENTITY\", Optional.empty());\n+\n+    public CacheQuota(CacheQuotaScope cacheQuotaScope, String identity, Optional<DataSize> quota)\n+    {\n+        this.cacheQuotaScope = requireNonNull(cacheQuotaScope, \"cacheScope is null\");\n+        this.identity = requireNonNull(identity, \"identity is null\");\n+        this.quota = requireNonNull(quota, \"quota is null\");\n+    }\n+\n+    public CacheQuotaScope getCacheQuotaScope()\n+    {\n+        return cacheQuotaScope;\n+    }\n+\n+    public long getIdentifier()\n+    {\n+        return md5().hashString(identity.toString(), UTF_8).asLong();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e23bcf5a043e46f5a7002d8907917375f5c1750e"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4Njc5NTc3OnYy", "diffSide": "RIGHT", "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxODo1NDo1NFrOGbYvlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxOToxMTowNlrOGcC4IA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM3MDEzMg==", "bodyText": "I think we discussed this. Didn't we think it would be better if we calculate these during put operation?", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r431370132", "createdAt": "2020-05-27T18:54:54Z", "author": {"login": "jainxrohit"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "diffHunk": "@@ -151,27 +167,69 @@ public void destroy()\n     }\n \n     @Override\n-    public boolean get(FileReadRequest request, byte[] buffer, int offset)\n+    public CacheResult get(FileReadRequest request, byte[] buffer, int offset, CacheQuota cacheQuota)\n     {\n         boolean result = read(request, buffer, offset);\n+\n+        if (!result && ifExceedQuota(cacheQuota, request)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e23bcf5a043e46f5a7002d8907917375f5c1750e"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAyNjUxMA==", "bodyText": "Yes, I thought we had an agreement back then? because in read method, we always hint the guava Cache, which is by the original design of our cache system.\nThat's why we have to check in the read operation if it exceeds quota to decide if we really want to hint the cache\nAnd if we have checked in the read, checking again in put would be excessive", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r432026510", "createdAt": "2020-05-28T18:09:06Z", "author": {"login": "kewang1024"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "diffHunk": "@@ -151,27 +167,69 @@ public void destroy()\n     }\n \n     @Override\n-    public boolean get(FileReadRequest request, byte[] buffer, int offset)\n+    public CacheResult get(FileReadRequest request, byte[] buffer, int offset, CacheQuota cacheQuota)\n     {\n         boolean result = read(request, buffer, offset);\n+\n+        if (!result && ifExceedQuota(cacheQuota, request)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM3MDEzMg=="}, "originalCommit": {"oid": "e23bcf5a043e46f5a7002d8907917375f5c1750e"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA2MDQ0OA==", "bodyText": "Sounds good.", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r432060448", "createdAt": "2020-05-28T19:11:06Z", "author": {"login": "jainxrohit"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "diffHunk": "@@ -151,27 +167,69 @@ public void destroy()\n     }\n \n     @Override\n-    public boolean get(FileReadRequest request, byte[] buffer, int offset)\n+    public CacheResult get(FileReadRequest request, byte[] buffer, int offset, CacheQuota cacheQuota)\n     {\n         boolean result = read(request, buffer, offset);\n+\n+        if (!result && ifExceedQuota(cacheQuota, request)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM3MDEzMg=="}, "originalCommit": {"oid": "e23bcf5a043e46f5a7002d8907917375f5c1750e"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTYwMDA1OnYy", "diffSide": "RIGHT", "path": "presto-cache/src/main/java/com/facebook/presto/cache/CacheErrorCode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQwMDozODozNlrOGcvjRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQwMDozODozNlrOGcvjRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc5MjM4OQ==", "bodyText": "remove this class; check my comment below", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r432792389", "createdAt": "2020-05-30T00:38:36Z", "author": {"login": "highker"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/CacheErrorCode.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.cache;\n+\n+import com.facebook.presto.spi.ErrorCode;\n+import com.facebook.presto.spi.ErrorCodeSupplier;\n+import com.facebook.presto.spi.ErrorType;\n+\n+import static com.facebook.presto.spi.ErrorType.INTERNAL_ERROR;\n+\n+public enum CacheErrorCode", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a757b55fb32a06ce674facb113857be6fbac2eab"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTYwMDY2OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitSource.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQwMDozOTozMVrOGcvjpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNzoxNDo0OFrOGdA8TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc5MjQ4Ng==", "bodyText": "Use HIVE_UNKNOWN_ERROR", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r432792486", "createdAt": "2020-05-30T00:39:31Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitSource.java", "diffHunk": "@@ -465,6 +485,23 @@ void fail(Throwable e)\n                     splitBytes = internalSplit.getEnd() - internalSplit.getStart();\n                 }\n \n+                CacheQuota cacheQuota;\n+                switch (cacheQuotaScope) {\n+                    case GLOBAL:\n+                        cacheQuota = new CacheQuota(\".\", configuredCacheQuota);\n+                        break;\n+                    case SCHEMA:\n+                        cacheQuota = new CacheQuota(databaseName, configuredCacheQuota);\n+                        break;\n+                    case TABLE:\n+                        cacheQuota = new CacheQuota(databaseName + \".\" + tableName, configuredCacheQuota);\n+                        break;\n+                    case PARTITION:\n+                        cacheQuota = new CacheQuota(databaseName + \".\" + tableName + \".\" + internalSplit.getPartitionName(), configuredCacheQuota);\n+                        break;\n+                    default:\n+                        throw new PrestoException(CACHE_SCOPE_NOT_SUPPORTED, format(\"%s is not supported\", cacheQuotaScope));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a757b55fb32a06ce674facb113857be6fbac2eab"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg4MTUzMw==", "bodyText": "I think it's more related to cache config not being supported, HIVE_UNKNOWN_ERROR   seems to be used more often for hive data related issues.\nAlso our next step might be breaking presto-cache and presto-hive, we need to add CACHE_SCOPE_NOT_SUPPORTED  back once that happens\nThus I think we can keep CACHE_SCOPE_NOT_SUPPORTED  but make it EXTERNAL like HIVE_UNKNOWN_ERROR", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r432881533", "createdAt": "2020-05-30T19:42:24Z", "author": {"login": "kewang1024"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitSource.java", "diffHunk": "@@ -465,6 +485,23 @@ void fail(Throwable e)\n                     splitBytes = internalSplit.getEnd() - internalSplit.getStart();\n                 }\n \n+                CacheQuota cacheQuota;\n+                switch (cacheQuotaScope) {\n+                    case GLOBAL:\n+                        cacheQuota = new CacheQuota(\".\", configuredCacheQuota);\n+                        break;\n+                    case SCHEMA:\n+                        cacheQuota = new CacheQuota(databaseName, configuredCacheQuota);\n+                        break;\n+                    case TABLE:\n+                        cacheQuota = new CacheQuota(databaseName + \".\" + tableName, configuredCacheQuota);\n+                        break;\n+                    case PARTITION:\n+                        cacheQuota = new CacheQuota(databaseName + \".\" + tableName + \".\" + internalSplit.getPartitionName(), configuredCacheQuota);\n+                        break;\n+                    default:\n+                        throw new PrestoException(CACHE_SCOPE_NOT_SUPPORTED, format(\"%s is not supported\", cacheQuotaScope));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc5MjQ4Ng=="}, "originalCommit": {"oid": "a757b55fb32a06ce674facb113857be6fbac2eab"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3NzMyNA==", "bodyText": "We shouldn't create error codes for utilities. Error codes are meant for main engine or connectors. Check https://github.com/prestodb/presto/wiki/Error-Codes to see how we allocate error code space. If you really need to add a new error code, it should belong to HiveErrorCode", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r433077324", "createdAt": "2020-06-01T07:14:48Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitSource.java", "diffHunk": "@@ -465,6 +485,23 @@ void fail(Throwable e)\n                     splitBytes = internalSplit.getEnd() - internalSplit.getStart();\n                 }\n \n+                CacheQuota cacheQuota;\n+                switch (cacheQuotaScope) {\n+                    case GLOBAL:\n+                        cacheQuota = new CacheQuota(\".\", configuredCacheQuota);\n+                        break;\n+                    case SCHEMA:\n+                        cacheQuota = new CacheQuota(databaseName, configuredCacheQuota);\n+                        break;\n+                    case TABLE:\n+                        cacheQuota = new CacheQuota(databaseName + \".\" + tableName, configuredCacheQuota);\n+                        break;\n+                    case PARTITION:\n+                        cacheQuota = new CacheQuota(databaseName + \".\" + tableName + \".\" + internalSplit.getPartitionName(), configuredCacheQuota);\n+                        break;\n+                    default:\n+                        throw new PrestoException(CACHE_SCOPE_NOT_SUPPORTED, format(\"%s is not supported\", cacheQuotaScope));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc5MjQ4Ng=="}, "originalCommit": {"oid": "a757b55fb32a06ce674facb113857be6fbac2eab"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTYxMTI1OnYy", "diffSide": "RIGHT", "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuota.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQwMDo1MjoxN1rOGcvp1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQyMToxMTowNFrOGc1X1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc5NDA2OQ==", "bodyText": "This will be called on the coordinator. One concern is the complexity of md5(). I'm not sure if md5() is more expensive or shipping the identity is..... To be save, I would just move this part of logic to getIdentifier() call.", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r432794069", "createdAt": "2020-05-30T00:52:17Z", "author": {"login": "highker"}, "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuota.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.airlift.units.DataSize;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.google.common.hash.Hashing.md5;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+\n+public class CacheQuota\n+{\n+    private final long identifier;\n+    private final Optional<DataSize> quota;\n+\n+    public static final CacheQuota NO_CACHE_CONSTRAINTS = new CacheQuota(\"NO_IDENTITY\", Optional.empty());\n+\n+    public CacheQuota(String identity, Optional<DataSize> quota)\n+    {\n+        this(md5().hashString(identity, UTF_8).asLong(), quota);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a757b55fb32a06ce674facb113857be6fbac2eab"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg4Nzc2NQ==", "bodyText": "Valid point.\nSince HiveSplit already has all the identity information we need, instead of passing Identity(could be expensive) we just pass the Scope info to worker and let worker reuse identity from HiveSplit and calculate the identifier there", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r432887765", "createdAt": "2020-05-30T21:11:04Z", "author": {"login": "kewang1024"}, "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuota.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.airlift.units.DataSize;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.google.common.hash.Hashing.md5;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+\n+public class CacheQuota\n+{\n+    private final long identifier;\n+    private final Optional<DataSize> quota;\n+\n+    public static final CacheQuota NO_CACHE_CONSTRAINTS = new CacheQuota(\"NO_IDENTITY\", Optional.empty());\n+\n+    public CacheQuota(String identity, Optional<DataSize> quota)\n+    {\n+        this(md5().hashString(identity, UTF_8).asLong(), quota);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc5NDA2OQ=="}, "originalCommit": {"oid": "a757b55fb32a06ce674facb113857be6fbac2eab"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTU0NTQzOnYy", "diffSide": "RIGHT", "path": "presto-cache/src/main/java/com/facebook/presto/cache/CacheConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNzoyNDo1NFrOGdTSTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNzoyNDo1NFrOGdTSTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM3Nzg3MQ==", "bodyText": "nit: cache.cache-quota-scope?", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r433377871", "createdAt": "2020-06-01T17:24:54Z", "author": {"login": "shixuan-fan"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/CacheConfig.java", "diffHunk": "@@ -76,4 +83,30 @@ public CacheType getCacheType()\n     {\n         return cacheType;\n     }\n+\n+    public CacheQuotaScope getCacheQuotaScope()\n+    {\n+        return cacheQuotaScope;\n+    }\n+\n+    @Config(\"cache.cache-scope\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8da29640dd0ca7fa926b43a7177707901fadad15"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTU2NTY4OnYy", "diffSide": "RIGHT", "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNzozMToxM1rOGdTflg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNzozMToxM1rOGdTflg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM4MTI3MA==", "bodyText": "nit: How about return cacheQuota.getQuota().map(quota -> cacheSize.compareTo(quota) > 0).orElse(false)?", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r433381270", "createdAt": "2020-06-01T17:31:13Z", "author": {"login": "shixuan-fan"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "diffHunk": "@@ -151,27 +167,69 @@ public void destroy()\n     }\n \n     @Override\n-    public boolean get(FileReadRequest request, byte[] buffer, int offset)\n+    public CacheResult get(FileReadRequest request, byte[] buffer, int offset, CacheQuota cacheQuota)\n     {\n         boolean result = read(request, buffer, offset);\n+\n+        if (!result && ifExceedQuota(cacheQuota, request)) {\n+            stats.incrementQuotaExceed();\n+            return CacheResult.CACHE_QUOTA_EXCEED;\n+        }\n+\n+        try {\n+            // hint the cache\n+            cache.get(request.getPath(), cacheQuota::getIdentifier);\n+        }\n+        catch (ExecutionException e) {\n+            // ignore\n+        }\n+\n         if (result) {\n             stats.incrementCacheHit();\n+            return CacheResult.HIT;\n         }\n-        else {\n-            stats.incrementCacheMiss();\n-        }\n \n-        return result;\n+        stats.incrementCacheMiss();\n+        return CacheResult.MISS;\n+    }\n+\n+    private boolean ifExceedQuota(CacheQuota cacheQuota, FileReadRequest request)\n+    {\n+        DataSize cacheSize = DataSize.succinctBytes(cacheScopeSizeInBytes.getOrDefault(cacheQuota.getIdentifier(), 0L) + request.getLength());\n+        Optional<DataSize> quota = cacheQuota.getQuota();\n+        return quota.isPresent() && (cacheSize.compareTo(quota.get()) > 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8da29640dd0ca7fa926b43a7177707901fadad15"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMDQ2Nzc5OnYy", "diffSide": "RIGHT", "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjo0MDo0MVrOGdcZLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNjowODo1OVrOGdjUBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUyNzA4NQ==", "bodyText": "Nice, we changed it from schedule!\nIn general, do we know how many files exist in the cache directory? It would be worthwhile to know the impact of building this in every few seconds. I would have preferred to do this asynchronously whenever we write any files to cache.", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r433527085", "createdAt": "2020-06-01T22:40:41Z", "author": {"login": "jainxrohit"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "diffHunk": "@@ -140,6 +150,15 @@ public FileMergeCacheManager(\n                 }\n             }));\n         }\n+\n+        this.cacheSizeCalculateExecutor.scheduleAtFixedRate(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0881b9d4454ed07368b8cfa0961fd0a5c2791c55"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY0MDQ1NQ==", "bodyText": "Actually we don't and also it should vary from different use case. I can try to see if we can add any indicator for us to tell the impact", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r433640455", "createdAt": "2020-06-02T06:08:59Z", "author": {"login": "kewang1024"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "diffHunk": "@@ -140,6 +150,15 @@ public FileMergeCacheManager(\n                 }\n             }));\n         }\n+\n+        this.cacheSizeCalculateExecutor.scheduleAtFixedRate(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUyNzA4NQ=="}, "originalCommit": {"oid": "0881b9d4454ed07368b8cfa0961fd0a5c2791c55"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMDc3NDQyOnYy", "diffSide": "RIGHT", "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwMTozNzoxNFrOGdfTag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNjowNjozMVrOGdjQwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU3NDc2Mg==", "bodyText": "what is CacheScopeHandle? is this a typo?", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r433574762", "createdAt": "2020-06-02T01:37:14Z", "author": {"login": "apc999"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "diffHunk": "@@ -81,11 +84,16 @@\n \n     private final ExecutorService cacheFlushExecutor;\n     private final ExecutorService cacheRemovalExecutor;\n+    private final ScheduledExecutorService cacheSizeCalculateExecutor;\n \n     // a mapping from remote file `F` to a range map `M`; the corresponding local cache file for each range in `M` represents the cached chunk of `F`\n     private final Map<Path, CacheRange> persistedRanges = new ConcurrentHashMap<>();\n     // a local cache only to control the lifecycle of persisted\n-    private final Cache<Path, Boolean> cache;\n+    // Path and its corresponding cacheScope identifier\n+    private final Cache<Path, Long> cache;\n+    // CacheScopeHandle identifier to its cached files mapping", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0881b9d4454ed07368b8cfa0961fd0a5c2791c55"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYzOTYxNg==", "bodyText": "It actually means the handle that's extract from CacheScope, but seems a bit confusing then, I can change it", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r433639616", "createdAt": "2020-06-02T06:06:31Z", "author": {"login": "kewang1024"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "diffHunk": "@@ -81,11 +84,16 @@\n \n     private final ExecutorService cacheFlushExecutor;\n     private final ExecutorService cacheRemovalExecutor;\n+    private final ScheduledExecutorService cacheSizeCalculateExecutor;\n \n     // a mapping from remote file `F` to a range map `M`; the corresponding local cache file for each range in `M` represents the cached chunk of `F`\n     private final Map<Path, CacheRange> persistedRanges = new ConcurrentHashMap<>();\n     // a local cache only to control the lifecycle of persisted\n-    private final Cache<Path, Boolean> cache;\n+    // Path and its corresponding cacheScope identifier\n+    private final Cache<Path, Long> cache;\n+    // CacheScopeHandle identifier to its cached files mapping", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU3NDc2Mg=="}, "originalCommit": {"oid": "0881b9d4454ed07368b8cfa0961fd0a5c2791c55"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMDc5MzA2OnYy", "diffSide": "RIGHT", "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwMTo0ODoyNlrOGdfelA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNToxMjowMFrOGdiR_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU3NzYyMA==", "bodyText": "is this intentional to hard-code the cache recalculation rate?", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r433577620", "createdAt": "2020-06-02T01:48:26Z", "author": {"login": "apc999"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "diffHunk": "@@ -140,6 +150,15 @@ public FileMergeCacheManager(\n                 }\n             }));\n         }\n+\n+        this.cacheSizeCalculateExecutor.scheduleAtFixedRate(\n+                () -> {\n+                    cacheScopeFiles.keySet().forEach(cacheIdentifier -> cacheScopeSizeInBytes.put(cacheIdentifier, getCacheScopeSizeInBytes(cacheIdentifier)));\n+                    cacheScopeSizeInBytes.keySet().removeIf(key -> !cacheScopeFiles.containsKey(key));\n+                },\n+                0,\n+                15,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0881b9d4454ed07368b8cfa0961fd0a5c2791c55"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYyMzU1MQ==", "bodyText": "It is not. Because this is more of an experimental feature to foresee all the work we would need from alluxio and also finalize on the communication protocol and configs from our side", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r433623551", "createdAt": "2020-06-02T05:12:00Z", "author": {"login": "kewang1024"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "diffHunk": "@@ -140,6 +150,15 @@ public FileMergeCacheManager(\n                 }\n             }));\n         }\n+\n+        this.cacheSizeCalculateExecutor.scheduleAtFixedRate(\n+                () -> {\n+                    cacheScopeFiles.keySet().forEach(cacheIdentifier -> cacheScopeSizeInBytes.put(cacheIdentifier, getCacheScopeSizeInBytes(cacheIdentifier)));\n+                    cacheScopeSizeInBytes.keySet().removeIf(key -> !cacheScopeFiles.containsKey(key));\n+                },\n+                0,\n+                15,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU3NzYyMA=="}, "originalCommit": {"oid": "0881b9d4454ed07368b8cfa0961fd0a5c2791c55"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMDgwMjkwOnYy", "diffSide": "RIGHT", "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwMTo1NDo0MFrOGdfkjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNTozNzowNFrOGditoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU3OTE1MA==", "bodyText": "Though cacheScopeFiles and cacheScopeSizeInBytes are threadsafe, the operations on these two data structures are not really atomic to each other.  E.g., the recalculation executor can run concurrently with ifExceedQuota, and leave operations on cacheScopeFiles and cacheScopeSizeInBytes interleaved in multiple threads.\nI don't see an immediate thread-safety risk on this in addition to some calculation that might be a bit \"off\".\nJust make sure we are aware of it --- the cache capacity & quota calculation may not be fully accurate", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r433579150", "createdAt": "2020-06-02T01:54:40Z", "author": {"login": "apc999"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "diffHunk": "@@ -81,11 +84,16 @@\n \n     private final ExecutorService cacheFlushExecutor;\n     private final ExecutorService cacheRemovalExecutor;\n+    private final ScheduledExecutorService cacheSizeCalculateExecutor;\n \n     // a mapping from remote file `F` to a range map `M`; the corresponding local cache file for each range in `M` represents the cached chunk of `F`\n     private final Map<Path, CacheRange> persistedRanges = new ConcurrentHashMap<>();\n     // a local cache only to control the lifecycle of persisted\n-    private final Cache<Path, Boolean> cache;\n+    // Path and its corresponding cacheScope identifier\n+    private final Cache<Path, Long> cache;\n+    // CacheScopeHandle identifier to its cached files mapping\n+    private final Map<Long, Set<Path>> cacheScopeFiles = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0881b9d4454ed07368b8cfa0961fd0a5c2791c55"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYzMDYyNA==", "bodyText": "You're right, here, the cache capacity & quota calculation would be an estimation, like I said it would an experimental feature, it would be served more as an evaluation and provide basic protection from bad table data abusing the system", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r433630624", "createdAt": "2020-06-02T05:37:04Z", "author": {"login": "kewang1024"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "diffHunk": "@@ -81,11 +84,16 @@\n \n     private final ExecutorService cacheFlushExecutor;\n     private final ExecutorService cacheRemovalExecutor;\n+    private final ScheduledExecutorService cacheSizeCalculateExecutor;\n \n     // a mapping from remote file `F` to a range map `M`; the corresponding local cache file for each range in `M` represents the cached chunk of `F`\n     private final Map<Path, CacheRange> persistedRanges = new ConcurrentHashMap<>();\n     // a local cache only to control the lifecycle of persisted\n-    private final Cache<Path, Boolean> cache;\n+    // Path and its corresponding cacheScope identifier\n+    private final Cache<Path, Long> cache;\n+    // CacheScopeHandle identifier to its cached files mapping\n+    private final Map<Long, Set<Path>> cacheScopeFiles = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU3OTE1MA=="}, "originalCommit": {"oid": "0881b9d4454ed07368b8cfa0961fd0a5c2791c55"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMDgwNDc0OnYy", "diffSide": "LEFT", "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwMTo1NTo0MVrOGdflpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNjowNzo0M1rOGdjSUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU3OTQzMA==", "bodyText": "is this change independent?", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r433579430", "createdAt": "2020-06-02T01:55:41Z", "author": {"login": "apc999"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "diffHunk": "@@ -192,14 +252,6 @@ private boolean read(FileReadRequest request, byte[] buffer, int offset)\n             return true;\n         }\n \n-        try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0881b9d4454ed07368b8cfa0961fd0a5c2791c55"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY0MDAxOQ==", "bodyText": "it's related to our change; because we don't want to hint the cache if we already reached our limitation", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r433640019", "createdAt": "2020-06-02T06:07:43Z", "author": {"login": "kewang1024"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "diffHunk": "@@ -192,14 +252,6 @@ private boolean read(FileReadRequest request, byte[] buffer, int offset)\n             return true;\n         }\n \n-        try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU3OTQzMA=="}, "originalCommit": {"oid": "0881b9d4454ed07368b8cfa0961fd0a5c2791c55"}, "originalPosition": 161}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMDk0NjYyOnYy", "diffSide": "RIGHT", "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuota.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwMzozNTozOFrOGdg9gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNTowNjo1M1rOGdiNJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYwMTkyMg==", "bodyText": "do you document anywhere what it means by returning Optiona.empty()? assuming it means no limitation?", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r433601922", "createdAt": "2020-06-02T03:35:38Z", "author": {"login": "apc999"}, "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuota.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import io.airlift.units.DataSize;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.google.common.hash.Hashing.md5;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+\n+public class CacheQuota\n+{\n+    public static final CacheQuota NO_CACHE_CONSTRAINTS = new CacheQuota(\"NO_IDENTITY\", Optional.empty());\n+\n+    private final long identifier;\n+    private final Optional<DataSize> quota;\n+\n+    public CacheQuota(String identity, Optional<DataSize> quota)\n+    {\n+        this.identifier = md5().hashString(identity, UTF_8).asLong();\n+        this.quota = requireNonNull(quota, \"quota is null\");\n+    }\n+\n+    public long getIdentifier()\n+    {\n+        return identifier;\n+    }\n+\n+    public Optional<DataSize> getQuota()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0881b9d4454ed07368b8cfa0961fd0a5c2791c55"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYyMjMwOQ==", "bodyText": "I plan to add those things to the requirement doc later on, yes, it means no limitation", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r433622309", "createdAt": "2020-06-02T05:06:53Z", "author": {"login": "kewang1024"}, "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuota.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import io.airlift.units.DataSize;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.google.common.hash.Hashing.md5;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+\n+public class CacheQuota\n+{\n+    public static final CacheQuota NO_CACHE_CONSTRAINTS = new CacheQuota(\"NO_IDENTITY\", Optional.empty());\n+\n+    private final long identifier;\n+    private final Optional<DataSize> quota;\n+\n+    public CacheQuota(String identity, Optional<DataSize> quota)\n+    {\n+        this.identifier = md5().hashString(identity, UTF_8).asLong();\n+        this.quota = requireNonNull(quota, \"quota is null\");\n+    }\n+\n+    public long getIdentifier()\n+    {\n+        return identifier;\n+    }\n+\n+    public Optional<DataSize> getQuota()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYwMTkyMg=="}, "originalCommit": {"oid": "0881b9d4454ed07368b8cfa0961fd0a5c2791c55"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDM5NDk4OnYy", "diffSide": "RIGHT", "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuota.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDozNToyNlrOGeDBRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMjo0NjowN1rOGeGbhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE1OTk0MA==", "bodyText": "This class needs to be JSON serializable.", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r434159940", "createdAt": "2020-06-02T20:35:26Z", "author": {"login": "highker"}, "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuota.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import io.airlift.units.DataSize;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.google.common.hash.Hashing.md5;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+\n+public class CacheQuota", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25d1e735a3739dfacefb4ab48281c0ac96e3fddd"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIxNTgxMw==", "bodyText": "So I have changed the design to address the issue of calculating identifier in coodirnator. Basically what we're serializing now is CacheQuotaRequirement", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r434215813", "createdAt": "2020-06-02T22:46:07Z", "author": {"login": "kewang1024"}, "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuota.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import io.airlift.units.DataSize;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.google.common.hash.Hashing.md5;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+\n+public class CacheQuota", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE1OTk0MA=="}, "originalCommit": {"oid": "25d1e735a3739dfacefb4ab48281c0ac96e3fddd"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDM5NzU1OnYy", "diffSide": "RIGHT", "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuota.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDozNjoxNlrOGeDC7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMjo0NzoxNlrOGeGcxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE2MDM2NQ==", "bodyText": "I thought we gonna move this to getIdentifier() method?", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r434160365", "createdAt": "2020-06-02T20:36:16Z", "author": {"login": "highker"}, "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuota.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import io.airlift.units.DataSize;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.google.common.hash.Hashing.md5;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+\n+public class CacheQuota\n+{\n+    public static final CacheQuota NO_CACHE_CONSTRAINTS = new CacheQuota(\"NO_IDENTITY\", Optional.empty());\n+\n+    private final long identifier;\n+    private final Optional<DataSize> quota;\n+\n+    public CacheQuota(String identity, Optional<DataSize> quota)\n+    {\n+        this.identifier = md5().hashString(identity, UTF_8).asLong();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25d1e735a3739dfacefb4ab48281c0ac96e3fddd"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIxNjEzNA==", "bodyText": "I thought we gonna move this to getIdentifier() method?\n\nI have changed the design, so now this happens on workers now", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r434216134", "createdAt": "2020-06-02T22:47:16Z", "author": {"login": "kewang1024"}, "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuota.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import io.airlift.units.DataSize;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.google.common.hash.Hashing.md5;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+\n+public class CacheQuota\n+{\n+    public static final CacheQuota NO_CACHE_CONSTRAINTS = new CacheQuota(\"NO_IDENTITY\", Optional.empty());\n+\n+    private final long identifier;\n+    private final Optional<DataSize> quota;\n+\n+    public CacheQuota(String identity, Optional<DataSize> quota)\n+    {\n+        this.identifier = md5().hashString(identity, UTF_8).asLong();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE2MDM2NQ=="}, "originalCommit": {"oid": "25d1e735a3739dfacefb4ab48281c0ac96e3fddd"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDM5ODM2OnYy", "diffSide": "RIGHT", "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuota.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDozNjozNFrOGeDDeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMjo1MDoxMlrOGeGgtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE2MDUwNQ==", "bodyText": "Just store raw String identity", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r434160505", "createdAt": "2020-06-02T20:36:34Z", "author": {"login": "highker"}, "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuota.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import io.airlift.units.DataSize;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.google.common.hash.Hashing.md5;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+\n+public class CacheQuota\n+{\n+    public static final CacheQuota NO_CACHE_CONSTRAINTS = new CacheQuota(\"NO_IDENTITY\", Optional.empty());\n+\n+    private final long identifier;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25d1e735a3739dfacefb4ab48281c0ac96e3fddd"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIxNzE0Mg==", "bodyText": "Just store raw String identity\n\nI already changed the design", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r434217142", "createdAt": "2020-06-02T22:50:12Z", "author": {"login": "kewang1024"}, "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuota.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import io.airlift.units.DataSize;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.google.common.hash.Hashing.md5;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+\n+public class CacheQuota\n+{\n+    public static final CacheQuota NO_CACHE_CONSTRAINTS = new CacheQuota(\"NO_IDENTITY\", Optional.empty());\n+\n+    private final long identifier;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE2MDUwNQ=="}, "originalCommit": {"oid": "25d1e735a3739dfacefb4ab48281c0ac96e3fddd"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDM5OTI5OnYy", "diffSide": "RIGHT", "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuota.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDozNjo1M1rOGeDEHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDozNjo1M1rOGeDEHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE2MDY3MA==", "bodyText": "Use Objects.equals", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r434160670", "createdAt": "2020-06-02T20:36:53Z", "author": {"login": "highker"}, "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuota.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import io.airlift.units.DataSize;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.google.common.hash.Hashing.md5;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+\n+public class CacheQuota\n+{\n+    public static final CacheQuota NO_CACHE_CONSTRAINTS = new CacheQuota(\"NO_IDENTITY\", Optional.empty());\n+\n+    private final long identifier;\n+    private final Optional<DataSize> quota;\n+\n+    public CacheQuota(String identity, Optional<DataSize> quota)\n+    {\n+        this.identifier = md5().hashString(identity, UTF_8).asLong();\n+        this.quota = requireNonNull(quota, \"quota is null\");\n+    }\n+\n+    public long getIdentifier()\n+    {\n+        return identifier;\n+    }\n+\n+    public Optional<DataSize> getQuota()\n+    {\n+        return quota;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o)\n+    {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        CacheQuota that = (CacheQuota) o;\n+        return identifier == that.identifier && Objects.equals(quota, that.quota);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25d1e735a3739dfacefb4ab48281c0ac96e3fddd"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDQwMzYyOnYy", "diffSide": "RIGHT", "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDozODoxNVrOGeDG8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDozODoxNVrOGeDG8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE2MTM5NA==", "bodyText": "Need to destroy this after shutdown.", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r434161394", "createdAt": "2020-06-02T20:38:15Z", "author": {"login": "highker"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "diffHunk": "@@ -81,11 +84,16 @@\n \n     private final ExecutorService cacheFlushExecutor;\n     private final ExecutorService cacheRemovalExecutor;\n+    private final ScheduledExecutorService cacheSizeCalculateExecutor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25d1e735a3739dfacefb4ab48281c0ac96e3fddd"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDQwOTA3OnYy", "diffSide": "RIGHT", "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDo0MDowNlrOGeDKpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDo0MDowNlrOGeDKpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE2MjM0MA==", "bodyText": "bytes", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r434162340", "createdAt": "2020-06-02T20:40:06Z", "author": {"login": "highker"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "diffHunk": "@@ -151,27 +170,68 @@ public void destroy()\n     }\n \n     @Override\n-    public boolean get(FileReadRequest request, byte[] buffer, int offset)\n+    public CacheResult get(FileReadRequest request, byte[] buffer, int offset, CacheQuota cacheQuota)\n     {\n         boolean result = read(request, buffer, offset);\n+\n+        if (!result && ifExceedQuota(cacheQuota, request)) {\n+            stats.incrementQuotaExceed();\n+            return CacheResult.CACHE_QUOTA_EXCEED;\n+        }\n+\n+        try {\n+            // hint the cache\n+            cache.get(request.getPath(), cacheQuota::getIdentifier);\n+        }\n+        catch (ExecutionException e) {\n+            // ignore\n+        }\n+\n         if (result) {\n             stats.incrementCacheHit();\n+            return CacheResult.HIT;\n         }\n-        else {\n-            stats.incrementCacheMiss();\n-        }\n \n-        return result;\n+        stats.incrementCacheMiss();\n+        return CacheResult.MISS;\n+    }\n+\n+    private boolean ifExceedQuota(CacheQuota cacheQuota, FileReadRequest request)\n+    {\n+        DataSize cacheSize = DataSize.succinctBytes(cacheScopeSizeInBytes.getOrDefault(cacheQuota.getIdentifier(), 0L) + request.getLength());\n+        return cacheQuota.getQuota().map(quota -> cacheSize.compareTo(quota) > 0).orElse(false);\n+    }\n+\n+    private long getCacheScopeSizeInBytes(long cacheScopeIdentifier)\n+    {\n+        long sum = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25d1e735a3739dfacefb4ab48281c0ac96e3fddd"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTAwNjYzOnYy", "diffSide": "RIGHT", "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMToxNTo0NlrOGeI9WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMToxNTo0NlrOGeI9WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI1NzI0MA==", "bodyText": "use isEmpty()", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r434257240", "createdAt": "2020-06-03T01:15:46Z", "author": {"login": "highker"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCacheManager.java", "diffHunk": "@@ -472,13 +525,18 @@ public ReadWriteLock getLock()\n     }\n \n     private class CacheRemovalListener\n-            implements RemovalListener<Path, Boolean>\n+            implements RemovalListener<Path, Long>\n     {\n         @Override\n-        public void onRemoval(RemovalNotification<Path, Boolean> notification)\n+        public void onRemoval(RemovalNotification<Path, Long> notification)\n         {\n             Path path = notification.getKey();\n             CacheRange cacheRange = persistedRanges.remove(path);\n+            cacheScopeFiles.get(notification.getValue()).remove(path);\n+            if (cacheScopeFiles.get(notification.getValue()).size() == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c63fae405ccffe210e484e165fcd057f998bd05"}, "originalPosition": 191}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTAxMzY4OnYy", "diffSide": "RIGHT", "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuotaRequirement.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMToyMDo1MFrOGeJBzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMToyMDo1MFrOGeJBzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI1ODM4MQ==", "bodyText": "Use toStringHelper", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r434258381", "createdAt": "2020-06-03T01:20:50Z", "author": {"login": "highker"}, "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuotaRequirement.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.airlift.units.DataSize;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.hive.CacheQuotaScope.GLOBAL;\n+import static java.util.Objects.requireNonNull;\n+\n+public class CacheQuotaRequirement\n+{\n+    public static final CacheQuotaRequirement NO_CACHE_REQUIREMENT = new CacheQuotaRequirement(GLOBAL, Optional.empty());\n+\n+    private final CacheQuotaScope cacheQuotaScope;\n+    private final Optional<DataSize> quota;\n+\n+    @JsonCreator\n+    public CacheQuotaRequirement(\n+            @JsonProperty(\"cacheQuotaScope\") CacheQuotaScope cacheQuotaScope,\n+            @JsonProperty(\"quota\") Optional<DataSize> quota)\n+    {\n+        this.cacheQuotaScope = requireNonNull(cacheQuotaScope, \"cacheQuotaScope\");\n+        this.quota = quota;\n+    }\n+\n+    @JsonProperty\n+    public CacheQuotaScope getCacheQuotaScope()\n+    {\n+        return cacheQuotaScope;\n+    }\n+\n+    @JsonProperty\n+    public Optional<DataSize> getQuota()\n+    {\n+        return quota;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o)\n+    {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+\n+        CacheQuotaRequirement that = (CacheQuotaRequirement) o;\n+        return cacheQuotaScope == that.cacheQuotaScope && Objects.equals(quota, that.quota);\n+    }\n+\n+    @Override\n+    public int hashCode()\n+    {\n+        return Objects.hash(cacheQuotaScope, quota);\n+    }\n+\n+    @Override\n+    public String toString()\n+    {\n+        return \"CacheQuotaRequirement{\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c63fae405ccffe210e484e165fcd057f998bd05"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTAxNDQwOnYy", "diffSide": "RIGHT", "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuotaRequirement.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMToyMToyM1rOGeJCTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMToyMToyM1rOGeJCTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI1ODUwOA==", "bodyText": "Use Objects.equals for cacheQuotaScope", "url": "https://github.com/prestodb/presto/pull/14557#discussion_r434258508", "createdAt": "2020-06-03T01:21:23Z", "author": {"login": "highker"}, "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/CacheQuotaRequirement.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.airlift.units.DataSize;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.hive.CacheQuotaScope.GLOBAL;\n+import static java.util.Objects.requireNonNull;\n+\n+public class CacheQuotaRequirement\n+{\n+    public static final CacheQuotaRequirement NO_CACHE_REQUIREMENT = new CacheQuotaRequirement(GLOBAL, Optional.empty());\n+\n+    private final CacheQuotaScope cacheQuotaScope;\n+    private final Optional<DataSize> quota;\n+\n+    @JsonCreator\n+    public CacheQuotaRequirement(\n+            @JsonProperty(\"cacheQuotaScope\") CacheQuotaScope cacheQuotaScope,\n+            @JsonProperty(\"quota\") Optional<DataSize> quota)\n+    {\n+        this.cacheQuotaScope = requireNonNull(cacheQuotaScope, \"cacheQuotaScope\");\n+        this.quota = quota;\n+    }\n+\n+    @JsonProperty\n+    public CacheQuotaScope getCacheQuotaScope()\n+    {\n+        return cacheQuotaScope;\n+    }\n+\n+    @JsonProperty\n+    public Optional<DataSize> getQuota()\n+    {\n+        return quota;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o)\n+    {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+\n+        CacheQuotaRequirement that = (CacheQuotaRequirement) o;\n+        return cacheQuotaScope == that.cacheQuotaScope && Objects.equals(quota, that.quota);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c63fae405ccffe210e484e165fcd057f998bd05"}, "originalPosition": 65}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2668, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}