{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxNDAyOTg5", "number": 14625, "title": "Enforce memory limits on broadcasted tables for lookup join", "bodyText": "Background: we want to prevent people from exceeding the lower local memory limits supported by certain types of hardware even if they are running on hardware that is configured with a higher local memory limit while doing broadcast join.\nIf the build side of the broadcast join exceeds the memory limits it will generate an ExceededMemoryLimitException that terminates the query.\n== RELEASE NOTES ==\nGeneral Changes\n\na new session property query_max_broadcast_memory that allows for specifying the maximum amount of memory a query can use for broadcast join.", "createdAt": "2020-06-08T21:19:59Z", "url": "https://github.com/prestodb/presto/pull/14625", "merged": true, "mergeCommit": {"oid": "79b4a1872c63ae13dcb7a232210ba7dd085f17f9"}, "closed": true, "closedAt": "2020-06-15T14:20:42Z", "author": {"login": "pguofb"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcpYT-ZgBqjM0MjIyNzg5NjE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcrg7L1AFqTQzMDY1ODc0NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fb9701782673feadfdd911f5c3439c8e14acc99b", "author": {"user": {"login": "pguofb", "name": "Peizhen Guo"}}, "url": "https://github.com/prestodb/presto/commit/fb9701782673feadfdd911f5c3439c8e14acc99b", "committedDate": "2020-06-08T21:06:51Z", "message": "Enforce memory limits on broadcasted tables for lookup join"}, "afterCommit": {"oid": "c50f0633e38a5a3f562c79fcc9863d5b29d6405d", "author": {"user": {"login": "pguofb", "name": "Peizhen Guo"}}, "url": "https://github.com/prestodb/presto/commit/c50f0633e38a5a3f562c79fcc9863d5b29d6405d", "committedDate": "2020-06-08T22:31:34Z", "message": "Enforce memory limits on broadcasted tables for lookup join"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3NDg5MTc2", "url": "https://github.com/prestodb/presto/pull/14625#pullrequestreview-427489176", "createdAt": "2020-06-09T19:49:48Z", "commit": {"oid": "c50f0633e38a5a3f562c79fcc9863d5b29d6405d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxOTo0OTo0OFrOGhZwoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMjo0ODo1NlrOGiIzyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY3ODI0MQ==", "bodyText": "You should create a new configuration property in NodeMemoryConfig for query-max-broadcast-memory.  You'll also need to add it to the test in TestNodeMemoryConfig.", "url": "https://github.com/prestodb/presto/pull/14625#discussion_r437678241", "createdAt": "2020-06-09T19:49:48Z", "author": {"login": "rschlussel"}, "path": "presto-main/src/main/java/com/facebook/presto/SystemSessionProperties.java", "diffHunk": "@@ -377,6 +378,15 @@ public SystemSessionProperties(\n                         true,\n                         value -> DataSize.valueOf((String) value),\n                         DataSize::toString),\n+                new PropertyMetadata<>(\n+                        QUERY_MAX_BROADCAST_MEMORY,\n+                        \"Maximum amount of memory a query can use for broadcast join\",\n+                        VARCHAR,\n+                        DataSize.class,\n+                        nodeMemoryConfig.getSoftMaxQueryMemoryPerNode(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c50f0633e38a5a3f562c79fcc9863d5b29d6405d"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY3ODk1NQ==", "bodyText": "you should add another argument maxBroadcastMemory and use that for this setting", "url": "https://github.com/prestodb/presto/pull/14625#discussion_r437678955", "createdAt": "2020-06-09T19:51:06Z", "author": {"login": "rschlussel"}, "path": "presto-main/src/main/java/com/facebook/presto/memory/QueryContext.java", "diffHunk": "@@ -106,6 +112,7 @@ public QueryContext(\n                 newRootAggregatedMemoryContext(new QueryMemoryReservationHandler(this::updateUserMemory, this::tryUpdateUserMemory), GUARANTEED_MEMORY),\n                 newRootAggregatedMemoryContext(new QueryMemoryReservationHandler(this::updateRevocableMemory, this::tryReserveMemoryNotSupported), 0L),\n                 newRootAggregatedMemoryContext(new QueryMemoryReservationHandler(this::updateSystemMemory, this::tryReserveMemoryNotSupported), 0L));\n+        this.maxBroadcastUsedMemory = maxUserMemory.toBytes();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c50f0633e38a5a3f562c79fcc9863d5b29d6405d"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY4MDI1OA==", "bodyText": "move this field up by maxUserMemory and maxTotalMemory", "url": "https://github.com/prestodb/presto/pull/14625#discussion_r437680258", "createdAt": "2020-06-09T19:53:40Z", "author": {"login": "rschlussel"}, "path": "presto-main/src/main/java/com/facebook/presto/memory/QueryContext.java", "diffHunk": "@@ -82,6 +83,11 @@\n     @GuardedBy(\"this\")\n     private long spillUsed;\n \n+    @GuardedBy(\"this\")\n+    private long broadcastUsed;\n+    @GuardedBy(\"this\")\n+    private long maxBroadcastUsedMemory;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c50f0633e38a5a3f562c79fcc9863d5b29d6405d"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY4MDY2Nw==", "bodyText": "Instead of having a separate method, update the broadcast limit in setMemoryLimits", "url": "https://github.com/prestodb/presto/pull/14625#discussion_r437680667", "createdAt": "2020-06-09T19:54:30Z", "author": {"login": "rschlussel"}, "path": "presto-main/src/main/java/com/facebook/presto/memory/QueryContext.java", "diffHunk": "@@ -313,6 +328,11 @@ public synchronized void setMemoryLimits(DataSize queryMaxTaskMemory, DataSize q\n         maxTotalMemory = Math.min(maxTotalMemory, queryMaxTotalTaskMemory.toBytes());\n     }\n \n+    public synchronized void setBroadcastMemoryLimits(DataSize queryMaxBroadcastMemory)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c50f0633e38a5a3f562c79fcc9863d5b29d6405d"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY4MTcyMw==", "bodyText": "I would just require every caller to pass in the field rather than having an overload.", "url": "https://github.com/prestodb/presto/pull/14625#discussion_r437681723", "createdAt": "2020-06-09T19:56:25Z", "author": {"login": "rschlussel"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/HashBuilderOperator.java", "diffHunk": "@@ -106,6 +107,44 @@ public HashBuilderOperatorFactory(\n             this.singleStreamSpillerFactory = requireNonNull(singleStreamSpillerFactory, \"singleStreamSpillerFactory is null\");\n \n             this.expectedPositions = expectedPositions;\n+            this.enforceBroadcastMemoryLimit = false;\n+        }\n+\n+        public HashBuilderOperatorFactory(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c50f0633e38a5a3f562c79fcc9863d5b29d6405d"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ0NjI1NQ==", "bodyText": "we actually want to do this as part of trySetBytes so that we compact the index if needed.  I would recommend having an overload of trySetbytes and setBytes (and then tryUpdateBytes and updateBytes) that takes in a boolean of whether to enforce the broadcast limit.\nAdditionally rather than calling the full chain of operatorContext.getDriverContext()... here, this should be done through the localUserMemoryContext", "url": "https://github.com/prestodb/presto/pull/14625#discussion_r438446255", "createdAt": "2020-06-10T22:40:23Z", "author": {"login": "rschlussel"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/HashBuilderOperator.java", "diffHunk": "@@ -341,10 +385,15 @@ private void updateIndex(Page page)\n             localRevocableMemoryContext.setBytes(index.getEstimatedSize().toBytes());\n         }\n         else {\n+            long currentMemoryUsage = localUserMemoryContext.getBytes();\n             if (!localUserMemoryContext.trySetBytes(index.getEstimatedSize().toBytes())) {\n                 index.compact();\n                 localUserMemoryContext.setBytes(index.getEstimatedSize().toBytes());\n             }\n+            if (enforceBroadcastMemoryLimit) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c50f0633e38a5a3f562c79fcc9863d5b29d6405d"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ0NzIzOA==", "bodyText": "you can make this one line\nisBroadcastJoin = distributionType.siPresent() && distributionType.get() == REPLICATED\nalso, static import JoinNode.DistributionType.REPLICATED", "url": "https://github.com/prestodb/presto/pull/14625#discussion_r438447238", "createdAt": "2020-06-10T22:43:17Z", "author": {"login": "rschlussel"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java", "diffHunk": "@@ -2050,6 +2051,14 @@ private PhysicalOperation createLookupJoin(JoinNode node,\n                 PhysicalOperation probeSource,\n                 LocalExecutionPlanContext context)\n         {\n+            // Determine if planning broadcast join\n+            boolean isBroadcastJoin = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c50f0633e38a5a3f562c79fcc9863d5b29d6405d"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ0OTA5Ng==", "bodyText": "this should be final and go up with the other final fields.", "url": "https://github.com/prestodb/presto/pull/14625#discussion_r438449096", "createdAt": "2020-06-10T22:48:56Z", "author": {"login": "rschlussel"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/HashBuilderOperator.java", "diffHunk": "@@ -225,6 +265,8 @@ private int getAndIncrementPartitionIndex(Lifespan lifespan)\n \n     private Optional<Runnable> finishMemoryRevoke = Optional.empty();\n \n+    private boolean enforceBroadcastMemoryLimit;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c50f0633e38a5a3f562c79fcc9863d5b29d6405d"}, "originalPosition": 67}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c50f0633e38a5a3f562c79fcc9863d5b29d6405d", "author": {"user": {"login": "pguofb", "name": "Peizhen Guo"}}, "url": "https://github.com/prestodb/presto/commit/c50f0633e38a5a3f562c79fcc9863d5b29d6405d", "committedDate": "2020-06-08T22:31:34Z", "message": "Enforce memory limits on broadcasted tables for lookup join"}, "afterCommit": {"oid": "0ac05a67ec6a3ebfe9f886d7e3e7c1c7cedebec0", "author": {"user": {"login": "pguofb", "name": "Peizhen Guo"}}, "url": "https://github.com/prestodb/presto/commit/0ac05a67ec6a3ebfe9f886d7e3e7c1c7cedebec0", "committedDate": "2020-06-11T19:24:45Z", "message": "Refactor checking broadcast memory usage against limit via LocalMemoryContext."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5Nzc5MTE5", "url": "https://github.com/prestodb/presto/pull/14625#pullrequestreview-429779119", "createdAt": "2020-06-12T14:17:42Z", "commit": {"oid": "0ac05a67ec6a3ebfe9f886d7e3e7c1c7cedebec0"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNDoxNzo0MlrOGjFtCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNDoyNTozNlrOGjF_hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ0Njc5Mw==", "bodyText": "nit: move this argument up by maxUserMemory and maxTotalMemory (doing refactor -> changeSignature in intellij can reorder the arguments for you)", "url": "https://github.com/prestodb/presto/pull/14625#discussion_r439446793", "createdAt": "2020-06-12T14:17:42Z", "author": {"login": "rschlussel"}, "path": "presto-main/src/main/java/com/facebook/presto/memory/QueryContext.java", "diffHunk": "@@ -91,7 +99,8 @@ public QueryContext(\n             Executor notificationExecutor,\n             ScheduledExecutorService yieldExecutor,\n             DataSize maxSpill,\n-            SpillSpaceTracker spillSpaceTracker)\n+            SpillSpaceTracker spillSpaceTracker,\n+            DataSize maxBroadcastUsedMemory)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ac05a67ec6a3ebfe9f886d7e3e7c1c7cedebec0"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ0NzAzMQ==", "bodyText": "nit: move this up by maxUserMemory and maxTotalMemory", "url": "https://github.com/prestodb/presto/pull/14625#discussion_r439447031", "createdAt": "2020-06-12T14:18:04Z", "author": {"login": "rschlussel"}, "path": "presto-main/src/main/java/com/facebook/presto/memory/QueryContext.java", "diffHunk": "@@ -103,9 +112,10 @@ public QueryContext(\n         this.maxSpill = requireNonNull(maxSpill, \"maxSpill is null\").toBytes();\n         this.spillSpaceTracker = requireNonNull(spillSpaceTracker, \"spillSpaceTracker is null\");\n         this.queryMemoryContext = new MemoryTrackingContext(\n-                newRootAggregatedMemoryContext(new QueryMemoryReservationHandler(this::updateUserMemory, this::tryUpdateUserMemory), GUARANTEED_MEMORY),\n-                newRootAggregatedMemoryContext(new QueryMemoryReservationHandler(this::updateRevocableMemory, this::tryReserveMemoryNotSupported), 0L),\n-                newRootAggregatedMemoryContext(new QueryMemoryReservationHandler(this::updateSystemMemory, this::tryReserveMemoryNotSupported), 0L));\n+                newRootAggregatedMemoryContext(new QueryMemoryReservationHandler(this::updateUserMemory, this::tryUpdateUserMemory, this::updateBroadcastMemory, this::tryUpdateBroadcastMemory), GUARANTEED_MEMORY),\n+                newRootAggregatedMemoryContext(new QueryMemoryReservationHandler(this::updateRevocableMemory, this::tryReserveMemoryNotSupported, this::updateBroadcastMemory, this::tryUpdateBroadcastMemory), 0L),\n+                newRootAggregatedMemoryContext(new QueryMemoryReservationHandler(this::updateSystemMemory, this::tryReserveMemoryNotSupported, this::updateBroadcastMemory, this::tryUpdateBroadcastMemory), 0L));\n+        this.maxBroadcastUsedMemory = requireNonNull(maxBroadcastUsedMemory, \"maxBroadcastUsedMemory is null\").toBytes();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ac05a67ec6a3ebfe9f886d7e3e7c1c7cedebec0"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ0Nzk3NQ==", "bodyText": "put this after tryReserveMemoryFunctinon.test()... so that local memory limit errors will be thrown first", "url": "https://github.com/prestodb/presto/pull/14625#discussion_r439447975", "createdAt": "2020-06-12T14:19:37Z", "author": {"login": "rschlussel"}, "path": "presto-main/src/main/java/com/facebook/presto/memory/QueryContext.java", "diffHunk": "@@ -306,36 +337,49 @@ public QueryId getQueryId()\n         return queryId;\n     }\n \n-    public synchronized void setMemoryLimits(DataSize queryMaxTaskMemory, DataSize queryMaxTotalTaskMemory)\n+    public synchronized void setMemoryLimits(DataSize queryMaxTaskMemory, DataSize queryMaxTotalTaskMemory, DataSize queryMaxBroadcastMemory)\n     {\n         // Don't allow session properties to increase memory beyond configured limits\n         maxUserMemory = Math.min(maxUserMemory, queryMaxTaskMemory.toBytes());\n         maxTotalMemory = Math.min(maxTotalMemory, queryMaxTotalTaskMemory.toBytes());\n+        maxBroadcastUsedMemory = Math.min(maxBroadcastUsedMemory, queryMaxBroadcastMemory.toBytes());\n     }\n \n     private static class QueryMemoryReservationHandler\n             implements MemoryReservationHandler\n     {\n         private final BiFunction<String, Long, ListenableFuture<?>> reserveMemoryFunction;\n         private final BiPredicate<String, Long> tryReserveMemoryFunction;\n+        private final Consumer<Long> updateBroadcastMemoryFunction;\n+        private final Predicate<Long> tryUpdateBroadcastMemoryFunction;\n \n         public QueryMemoryReservationHandler(\n                 BiFunction<String, Long, ListenableFuture<?>> reserveMemoryFunction,\n-                BiPredicate<String, Long> tryReserveMemoryFunction)\n+                BiPredicate<String, Long> tryReserveMemoryFunction,\n+                Consumer<Long> updateBroadcastMemoryFunction,\n+                Predicate<Long> tryUpdateBroadcastMemoryFunction)\n         {\n             this.reserveMemoryFunction = requireNonNull(reserveMemoryFunction, \"reserveMemoryFunction is null\");\n             this.tryReserveMemoryFunction = requireNonNull(tryReserveMemoryFunction, \"tryReserveMemoryFunction is null\");\n+            this.updateBroadcastMemoryFunction = requireNonNull(updateBroadcastMemoryFunction, \"updateBroadcastMemoryFunction is null\");\n+            this.tryUpdateBroadcastMemoryFunction = requireNonNull(tryUpdateBroadcastMemoryFunction, \"tryUpdateBroadcastMemoryFunction is null\");\n         }\n \n         @Override\n-        public ListenableFuture<?> reserveMemory(String allocationTag, long delta)\n+        public ListenableFuture<?> reserveMemory(String allocationTag, long delta, boolean enforceBroadcastMemoryLimit)\n         {\n+            if (enforceBroadcastMemoryLimit) {\n+                updateBroadcastMemoryFunction.accept(delta);\n+            }\n             return reserveMemoryFunction.apply(allocationTag, delta);\n         }\n \n         @Override\n-        public boolean tryReserveMemory(String allocationTag, long delta)\n+        public boolean tryReserveMemory(String allocationTag, long delta, boolean enforceBroadcastMemoryLimit)\n         {\n+            if (enforceBroadcastMemoryLimit && !tryUpdateBroadcastMemoryFunction.test(delta)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ac05a67ec6a3ebfe9f886d7e3e7c1c7cedebec0"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ0ODUzNQ==", "bodyText": "same... do the reserveMemoryFucntion.apply() first.", "url": "https://github.com/prestodb/presto/pull/14625#discussion_r439448535", "createdAt": "2020-06-12T14:20:36Z", "author": {"login": "rschlussel"}, "path": "presto-main/src/main/java/com/facebook/presto/memory/QueryContext.java", "diffHunk": "@@ -306,36 +337,49 @@ public QueryId getQueryId()\n         return queryId;\n     }\n \n-    public synchronized void setMemoryLimits(DataSize queryMaxTaskMemory, DataSize queryMaxTotalTaskMemory)\n+    public synchronized void setMemoryLimits(DataSize queryMaxTaskMemory, DataSize queryMaxTotalTaskMemory, DataSize queryMaxBroadcastMemory)\n     {\n         // Don't allow session properties to increase memory beyond configured limits\n         maxUserMemory = Math.min(maxUserMemory, queryMaxTaskMemory.toBytes());\n         maxTotalMemory = Math.min(maxTotalMemory, queryMaxTotalTaskMemory.toBytes());\n+        maxBroadcastUsedMemory = Math.min(maxBroadcastUsedMemory, queryMaxBroadcastMemory.toBytes());\n     }\n \n     private static class QueryMemoryReservationHandler\n             implements MemoryReservationHandler\n     {\n         private final BiFunction<String, Long, ListenableFuture<?>> reserveMemoryFunction;\n         private final BiPredicate<String, Long> tryReserveMemoryFunction;\n+        private final Consumer<Long> updateBroadcastMemoryFunction;\n+        private final Predicate<Long> tryUpdateBroadcastMemoryFunction;\n \n         public QueryMemoryReservationHandler(\n                 BiFunction<String, Long, ListenableFuture<?>> reserveMemoryFunction,\n-                BiPredicate<String, Long> tryReserveMemoryFunction)\n+                BiPredicate<String, Long> tryReserveMemoryFunction,\n+                Consumer<Long> updateBroadcastMemoryFunction,\n+                Predicate<Long> tryUpdateBroadcastMemoryFunction)\n         {\n             this.reserveMemoryFunction = requireNonNull(reserveMemoryFunction, \"reserveMemoryFunction is null\");\n             this.tryReserveMemoryFunction = requireNonNull(tryReserveMemoryFunction, \"tryReserveMemoryFunction is null\");\n+            this.updateBroadcastMemoryFunction = requireNonNull(updateBroadcastMemoryFunction, \"updateBroadcastMemoryFunction is null\");\n+            this.tryUpdateBroadcastMemoryFunction = requireNonNull(tryUpdateBroadcastMemoryFunction, \"tryUpdateBroadcastMemoryFunction is null\");\n         }\n \n         @Override\n-        public ListenableFuture<?> reserveMemory(String allocationTag, long delta)\n+        public ListenableFuture<?> reserveMemory(String allocationTag, long delta, boolean enforceBroadcastMemoryLimit)\n         {\n+            if (enforceBroadcastMemoryLimit) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ac05a67ec6a3ebfe9f886d7e3e7c1c7cedebec0"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ1MDI5OQ==", "bodyText": "have setBytes(long Bytes) call setBytes(bytes, false) so that the logic of setting bytes isn't duplicated.  same for trySetBytes", "url": "https://github.com/prestodb/presto/pull/14625#discussion_r439450299", "createdAt": "2020-06-12T14:23:33Z", "author": {"login": "rschlussel"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/OperatorContext.java", "diffHunk": "@@ -609,6 +609,15 @@ public long getBytes()\n             return blocked;\n         }\n \n+        @Override\n+        public ListenableFuture<?> setBytes(long bytes, boolean enforceBroadcastMemoryLimit)\n+        {\n+            ListenableFuture<?> blocked = delegate.setBytes(bytes, enforceBroadcastMemoryLimit);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ac05a67ec6a3ebfe9f886d7e3e7c1c7cedebec0"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ1MTUyNA==", "bodyText": "nit: static import REPLICATED", "url": "https://github.com/prestodb/presto/pull/14625#discussion_r439451524", "createdAt": "2020-06-12T14:25:36Z", "author": {"login": "rschlussel"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java", "diffHunk": "@@ -2050,6 +2050,10 @@ private PhysicalOperation createLookupJoin(JoinNode node,\n                 PhysicalOperation probeSource,\n                 LocalExecutionPlanContext context)\n         {\n+            // Determine if planning broadcast join\n+            Optional<JoinNode.DistributionType> distributionType = node.getDistributionType();\n+            boolean isBroadcastJoin = distributionType.isPresent() && distributionType.get() == JoinNode.DistributionType.REPLICATED;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ac05a67ec6a3ebfe9f886d7e3e7c1c7cedebec0"}, "originalPosition": 6}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fd0487627ac0f7c9363835ec3b7e9cfb76513592", "author": {"user": {"login": "pguofb", "name": "Peizhen Guo"}}, "url": "https://github.com/prestodb/presto/commit/fd0487627ac0f7c9363835ec3b7e9cfb76513592", "committedDate": "2020-06-12T17:46:10Z", "message": "Redirect original setBytes and trySetBytes functions to call the new version with an additional boolean argument."}, "afterCommit": {"oid": "40e8878b66679b5ce17245d894e29a00215f4d2e", "author": {"user": {"login": "pguofb", "name": "Peizhen Guo"}}, "url": "https://github.com/prestodb/presto/commit/40e8878b66679b5ce17245d894e29a00215f4d2e", "committedDate": "2020-06-12T20:21:35Z", "message": "Enforce memory limits on broadcasted tables for lookup join"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwMDQwNjQ5", "url": "https://github.com/prestodb/presto/pull/14625#pullrequestreview-430040649", "createdAt": "2020-06-12T21:12:49Z", "commit": {"oid": "40e8878b66679b5ce17245d894e29a00215f4d2e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQyMToxMjo0OVrOGjRxXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQyMToxMjo0OVrOGjRxXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY0NDUxMQ==", "bodyText": "This default when nothing is specified won't match maxQueryMemoryPerNode if that is set to some other value and principle of least surprise wise it seems like you would expect them to be the same.\n@rschlussel  WDYT?", "url": "https://github.com/prestodb/presto/pull/14625#discussion_r439644511", "createdAt": "2020-06-12T21:12:49Z", "author": {"login": "aweisberg"}, "path": "presto-main/src/main/java/com/facebook/presto/memory/NodeMemoryConfig.java", "diffHunk": "@@ -25,13 +25,15 @@\n public class NodeMemoryConfig\n {\n     public static final long AVAILABLE_HEAP_MEMORY = Runtime.getRuntime().maxMemory();\n+    public static final String QUERY_MAX_BROADCAST_MEMORY_CONFIG = \"query.max-broadcast-memory\";\n     public static final String QUERY_MAX_MEMORY_PER_NODE_CONFIG = \"query.max-memory-per-node\";\n     public static final String QUERY_SOFT_MAX_MEMORY_PER_NODE_CONFIG = \"query.soft-max-memory-per-node\";\n     public static final String QUERY_MAX_TOTAL_MEMORY_PER_NODE_CONFIG = \"query.max-total-memory-per-node\";\n     public static final String QUERY_SOFT_MAX_TOTAL_MEMORY_PER_NODE_CONFIG = \"query.soft-max-total-memory-per-node\";\n \n     private boolean isReservedPoolEnabled = true;\n \n+    private DataSize maxQueryBroadcastMemory = new DataSize(AVAILABLE_HEAP_MEMORY * 0.1, BYTE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40e8878b66679b5ce17245d894e29a00215f4d2e"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwMDQ4MjEy", "url": "https://github.com/prestodb/presto/pull/14625#pullrequestreview-430048212", "createdAt": "2020-06-12T21:30:46Z", "commit": {"oid": "40e8878b66679b5ce17245d894e29a00215f4d2e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d16c22c3dfd77a3f4e3ff85f300bf085f7a7f01", "author": {"user": {"login": "pguofb", "name": "Peizhen Guo"}}, "url": "https://github.com/prestodb/presto/commit/3d16c22c3dfd77a3f4e3ff85f300bf085f7a7f01", "committedDate": "2020-06-12T22:42:25Z", "message": "Enforce memory limits on broadcasted tables for lookup join"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "40e8878b66679b5ce17245d894e29a00215f4d2e", "author": {"user": {"login": "pguofb", "name": "Peizhen Guo"}}, "url": "https://github.com/prestodb/presto/commit/40e8878b66679b5ce17245d894e29a00215f4d2e", "committedDate": "2020-06-12T20:21:35Z", "message": "Enforce memory limits on broadcasted tables for lookup join"}, "afterCommit": {"oid": "3d16c22c3dfd77a3f4e3ff85f300bf085f7a7f01", "author": {"user": {"login": "pguofb", "name": "Peizhen Guo"}}, "url": "https://github.com/prestodb/presto/commit/3d16c22c3dfd77a3f4e3ff85f300bf085f7a7f01", "committedDate": "2020-06-12T22:42:25Z", "message": "Enforce memory limits on broadcasted tables for lookup join"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwNjUxMTIz", "url": "https://github.com/prestodb/presto/pull/14625#pullrequestreview-430651123", "createdAt": "2020-06-15T13:37:50Z", "commit": {"oid": "40e8878b66679b5ce17245d894e29a00215f4d2e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwNjU4NzQ1", "url": "https://github.com/prestodb/presto/pull/14625#pullrequestreview-430658745", "createdAt": "2020-06-15T13:46:26Z", "commit": {"oid": "3d16c22c3dfd77a3f4e3ff85f300bf085f7a7f01"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1325, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}