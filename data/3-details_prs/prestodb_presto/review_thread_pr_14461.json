{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwOTU1ODc5", "number": 14461, "reviewThreads": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMToyMDoxMlrOD3230Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNDo0MDo0OFrOD5bz-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5ODk3Mjk3OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFileWriterFactory.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMToyMDoxMlrOGOWkNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMzozOToxMFrOGPJ7dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcwMjk2NA==", "bodyText": "Throwing an error as default behaviour caused test failures: com.facebook.presto.spi.PrestoException: GZIP compression is not supported with PAGEFILE   because these tests use GZIP as default file compression method.  For unsupported HiveCompressionCodec,  should the default behaviour be no compression or SNAPPY rather than throwing an error?", "url": "https://github.com/prestodb/presto/pull/14461#discussion_r417702964", "createdAt": "2020-04-30T01:20:12Z", "author": {"login": "viczhang861"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFileWriterFactory.java", "diffHunk": "@@ -104,6 +111,43 @@ public static void createEmptyPageFile(\n         }\n     }\n \n+    public static HiveCompressionCodec getCompressionCodec(String compression)\n+    {\n+        try {\n+            return HiveCompressionCodec.valueOf(compression);\n+        }\n+        catch (IllegalArgumentException | NullPointerException e) {\n+            throw new PrestoException(GENERIC_INTERNAL_ERROR, format(\"Unrecognized compression name %s\", compression), e);\n+        }\n+    }\n+\n+    public static PagesSerde createPagesSerdeForPageFile(BlockEncodingSerde blockEncodingSerde, HiveCompressionCodec compressionCodec)\n+    {\n+        if (!compressionCodec.isSupportedStorageFormat(PAGEFILE)) {\n+            throw new PrestoException(\n+                    GENERIC_USER_ERROR,\n+                    format(\"%s compression is not supported for %s\", compressionCodec.name(), PAGEFILE.getOutputFormat()));\n+        }\n+\n+        PageCompressor pageCompressor = null;\n+        PageDecompressor pageDecompressor = null;\n+\n+        switch (compressionCodec) {\n+            case NONE:\n+                break;\n+            case SNAPPY:\n+                pageCompressor = new BasicPageCompressor(new SnappyCompressor());\n+                pageDecompressor = new BasicPageDecompressor(new SnappyDecompressor());\n+                break;\n+            default:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1e4d77ea3007200bb8e5029a42b9d312c7c51cb"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI3MzM5OA==", "bodyText": "Let's throw an error. Also it feels like it should be simple to implement GZIP, since it is our default for now. That would prevent us from fixing all the failing tests due to that.", "url": "https://github.com/prestodb/presto/pull/14461#discussion_r418273398", "createdAt": "2020-04-30T20:35:26Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFileWriterFactory.java", "diffHunk": "@@ -104,6 +111,43 @@ public static void createEmptyPageFile(\n         }\n     }\n \n+    public static HiveCompressionCodec getCompressionCodec(String compression)\n+    {\n+        try {\n+            return HiveCompressionCodec.valueOf(compression);\n+        }\n+        catch (IllegalArgumentException | NullPointerException e) {\n+            throw new PrestoException(GENERIC_INTERNAL_ERROR, format(\"Unrecognized compression name %s\", compression), e);\n+        }\n+    }\n+\n+    public static PagesSerde createPagesSerdeForPageFile(BlockEncodingSerde blockEncodingSerde, HiveCompressionCodec compressionCodec)\n+    {\n+        if (!compressionCodec.isSupportedStorageFormat(PAGEFILE)) {\n+            throw new PrestoException(\n+                    GENERIC_USER_ERROR,\n+                    format(\"%s compression is not supported for %s\", compressionCodec.name(), PAGEFILE.getOutputFormat()));\n+        }\n+\n+        PageCompressor pageCompressor = null;\n+        PageDecompressor pageDecompressor = null;\n+\n+        switch (compressionCodec) {\n+            case NONE:\n+                break;\n+            case SNAPPY:\n+                pageCompressor = new BasicPageCompressor(new SnappyCompressor());\n+                pageDecompressor = new BasicPageDecompressor(new SnappyDecompressor());\n+                break;\n+            default:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcwMjk2NA=="}, "originalCommit": {"oid": "c1e4d77ea3007200bb8e5029a42b9d312c7c51cb"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM5NTI5NA==", "bodyText": "This seems a good solution to not changing the default setting for hive.compression-codec", "url": "https://github.com/prestodb/presto/pull/14461#discussion_r418395294", "createdAt": "2020-05-01T02:58:21Z", "author": {"login": "viczhang861"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFileWriterFactory.java", "diffHunk": "@@ -104,6 +111,43 @@ public static void createEmptyPageFile(\n         }\n     }\n \n+    public static HiveCompressionCodec getCompressionCodec(String compression)\n+    {\n+        try {\n+            return HiveCompressionCodec.valueOf(compression);\n+        }\n+        catch (IllegalArgumentException | NullPointerException e) {\n+            throw new PrestoException(GENERIC_INTERNAL_ERROR, format(\"Unrecognized compression name %s\", compression), e);\n+        }\n+    }\n+\n+    public static PagesSerde createPagesSerdeForPageFile(BlockEncodingSerde blockEncodingSerde, HiveCompressionCodec compressionCodec)\n+    {\n+        if (!compressionCodec.isSupportedStorageFormat(PAGEFILE)) {\n+            throw new PrestoException(\n+                    GENERIC_USER_ERROR,\n+                    format(\"%s compression is not supported for %s\", compressionCodec.name(), PAGEFILE.getOutputFormat()));\n+        }\n+\n+        PageCompressor pageCompressor = null;\n+        PageDecompressor pageDecompressor = null;\n+\n+        switch (compressionCodec) {\n+            case NONE:\n+                break;\n+            case SNAPPY:\n+                pageCompressor = new BasicPageCompressor(new SnappyCompressor());\n+                pageDecompressor = new BasicPageDecompressor(new SnappyDecompressor());\n+                break;\n+            default:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcwMjk2NA=="}, "originalCommit": {"oid": "c1e4d77ea3007200bb8e5029a42b9d312c7c51cb"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQwNTk3Ng==", "bodyText": "May be you should have a separate compression config for pageFileStorage, that way you can have your own default. It would also allow you to configure on clusters without touching compression for other storage.", "url": "https://github.com/prestodb/presto/pull/14461#discussion_r418405976", "createdAt": "2020-05-01T03:56:18Z", "author": {"login": "jainxrohit"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFileWriterFactory.java", "diffHunk": "@@ -104,6 +111,43 @@ public static void createEmptyPageFile(\n         }\n     }\n \n+    public static HiveCompressionCodec getCompressionCodec(String compression)\n+    {\n+        try {\n+            return HiveCompressionCodec.valueOf(compression);\n+        }\n+        catch (IllegalArgumentException | NullPointerException e) {\n+            throw new PrestoException(GENERIC_INTERNAL_ERROR, format(\"Unrecognized compression name %s\", compression), e);\n+        }\n+    }\n+\n+    public static PagesSerde createPagesSerdeForPageFile(BlockEncodingSerde blockEncodingSerde, HiveCompressionCodec compressionCodec)\n+    {\n+        if (!compressionCodec.isSupportedStorageFormat(PAGEFILE)) {\n+            throw new PrestoException(\n+                    GENERIC_USER_ERROR,\n+                    format(\"%s compression is not supported for %s\", compressionCodec.name(), PAGEFILE.getOutputFormat()));\n+        }\n+\n+        PageCompressor pageCompressor = null;\n+        PageDecompressor pageDecompressor = null;\n+\n+        switch (compressionCodec) {\n+            case NONE:\n+                break;\n+            case SNAPPY:\n+                pageCompressor = new BasicPageCompressor(new SnappyCompressor());\n+                pageDecompressor = new BasicPageDecompressor(new SnappyDecompressor());\n+                break;\n+            default:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcwMjk2NA=="}, "originalCommit": {"oid": "c1e4d77ea3007200bb8e5029a42b9d312c7c51cb"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUyNjg4NA==", "bodyText": "May be you should have a separate compression config for pageFileStorage, that way you can have your own default. It would also allow you to configure on clusters without touching compression for other storage.\n\ncc @arhimondr This is also a good solution. Is there a need to support GZIP for page file?", "url": "https://github.com/prestodb/presto/pull/14461#discussion_r418526884", "createdAt": "2020-05-01T12:47:26Z", "author": {"login": "viczhang861"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFileWriterFactory.java", "diffHunk": "@@ -104,6 +111,43 @@ public static void createEmptyPageFile(\n         }\n     }\n \n+    public static HiveCompressionCodec getCompressionCodec(String compression)\n+    {\n+        try {\n+            return HiveCompressionCodec.valueOf(compression);\n+        }\n+        catch (IllegalArgumentException | NullPointerException e) {\n+            throw new PrestoException(GENERIC_INTERNAL_ERROR, format(\"Unrecognized compression name %s\", compression), e);\n+        }\n+    }\n+\n+    public static PagesSerde createPagesSerdeForPageFile(BlockEncodingSerde blockEncodingSerde, HiveCompressionCodec compressionCodec)\n+    {\n+        if (!compressionCodec.isSupportedStorageFormat(PAGEFILE)) {\n+            throw new PrestoException(\n+                    GENERIC_USER_ERROR,\n+                    format(\"%s compression is not supported for %s\", compressionCodec.name(), PAGEFILE.getOutputFormat()));\n+        }\n+\n+        PageCompressor pageCompressor = null;\n+        PageDecompressor pageDecompressor = null;\n+\n+        switch (compressionCodec) {\n+            case NONE:\n+                break;\n+            case SNAPPY:\n+                pageCompressor = new BasicPageCompressor(new SnappyCompressor());\n+                pageDecompressor = new BasicPageDecompressor(new SnappyDecompressor());\n+                break;\n+            default:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcwMjk2NA=="}, "originalCommit": {"oid": "c1e4d77ea3007200bb8e5029a42b9d312c7c51cb"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU0NDUwMg==", "bodyText": "In practice the pagefile format is going to be used only for temporary tables. There's a configuration property for temporary tables already: https://github.com/prestodb/presto/blob/master/presto-hive/src/main/java/com/facebook/presto/hive/HiveClientConfig.java#L158. Exploding properties is generally not desirable, as it makes the configuration process not straightforward. Unless there's a clear justification for adding more properties I would suggest to restrain from it.\n@viczhang861 If you think that implementing GZIP will take too much time feel free not to do this. I just thought that it might be a simple change.", "url": "https://github.com/prestodb/presto/pull/14461#discussion_r418544502", "createdAt": "2020-05-01T13:39:10Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFileWriterFactory.java", "diffHunk": "@@ -104,6 +111,43 @@ public static void createEmptyPageFile(\n         }\n     }\n \n+    public static HiveCompressionCodec getCompressionCodec(String compression)\n+    {\n+        try {\n+            return HiveCompressionCodec.valueOf(compression);\n+        }\n+        catch (IllegalArgumentException | NullPointerException e) {\n+            throw new PrestoException(GENERIC_INTERNAL_ERROR, format(\"Unrecognized compression name %s\", compression), e);\n+        }\n+    }\n+\n+    public static PagesSerde createPagesSerdeForPageFile(BlockEncodingSerde blockEncodingSerde, HiveCompressionCodec compressionCodec)\n+    {\n+        if (!compressionCodec.isSupportedStorageFormat(PAGEFILE)) {\n+            throw new PrestoException(\n+                    GENERIC_USER_ERROR,\n+                    format(\"%s compression is not supported for %s\", compressionCodec.name(), PAGEFILE.getOutputFormat()));\n+        }\n+\n+        PageCompressor pageCompressor = null;\n+        PageDecompressor pageDecompressor = null;\n+\n+        switch (compressionCodec) {\n+            case NONE:\n+                break;\n+            case SNAPPY:\n+                pageCompressor = new BasicPageCompressor(new SnappyCompressor());\n+                pageDecompressor = new BasicPageDecompressor(new SnappyDecompressor());\n+                break;\n+            default:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcwMjk2NA=="}, "originalCommit": {"oid": "c1e4d77ea3007200bb8e5029a42b9d312c7c51cb"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjQ1MTkzOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/BasicPageCompressor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDowOToxN1rOGO4jLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDowOToxN1rOGO4jLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI1OTc1OA==", "bodyText": "private final", "url": "https://github.com/prestodb/presto/pull/14461#discussion_r418259758", "createdAt": "2020-04-30T20:09:17Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/BasicPageCompressor.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.pagefile;\n+\n+import com.facebook.presto.spi.page.PageCompressor;\n+import io.airlift.compress.Compressor;\n+\n+import java.nio.ByteBuffer;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class BasicPageCompressor\n+        implements PageCompressor\n+{\n+    Compressor compressor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d41f18d205ab4b4764b28f4dd6cccfe4ab7abc"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjQ1Mzg2OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/BasicPageCompressor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDowOTo0OVrOGO4kVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDowOTo0OVrOGO4kVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2MDA1NA==", "bodyText": "It is just an adapter for aircompressor. How about calling it AirliftCompressorAdapter?", "url": "https://github.com/prestodb/presto/pull/14461#discussion_r418260054", "createdAt": "2020-04-30T20:09:49Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/BasicPageCompressor.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.pagefile;\n+\n+import com.facebook.presto.spi.page.PageCompressor;\n+import io.airlift.compress.Compressor;\n+\n+import java.nio.ByteBuffer;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class BasicPageCompressor", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d41f18d205ab4b4764b28f4dd6cccfe4ab7abc"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjQ1NDQxOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/BasicPageDecompressor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDowOTo1OVrOGO4kqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDowOTo1OVrOGO4kqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2MDEzOQ==", "bodyText": "private final", "url": "https://github.com/prestodb/presto/pull/14461#discussion_r418260139", "createdAt": "2020-04-30T20:09:59Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/BasicPageDecompressor.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.pagefile;\n+\n+import com.facebook.presto.spi.page.PageDecompressor;\n+import io.airlift.compress.Decompressor;\n+\n+import java.nio.ByteBuffer;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class BasicPageDecompressor\n+        implements PageDecompressor\n+{\n+    Decompressor decompressor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d41f18d205ab4b4764b28f4dd6cccfe4ab7abc"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjQ1NDg2OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/BasicPageDecompressor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDoxMDowOVrOGO4k9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDoxMDowOVrOGO4k9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2MDIxMw==", "bodyText": "It is just an adapter for aircompressor. How about calling it AirliftDecompressorAdapter?", "url": "https://github.com/prestodb/presto/pull/14461#discussion_r418260213", "createdAt": "2020-04-30T20:10:09Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/BasicPageDecompressor.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.pagefile;\n+\n+import com.facebook.presto.spi.page.PageDecompressor;\n+import io.airlift.compress.Decompressor;\n+\n+import java.nio.ByteBuffer;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class BasicPageDecompressor", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d41f18d205ab4b4764b28f4dd6cccfe4ab7abc"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjQ3OTI2OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDoxNzo1NlrOGO40gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDoxNzo1NlrOGO40gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2NDE5Mw==", "bodyText": "Why do we have to reset it here? Is it because the standard, GZIP compression is not supported? How hard is it to simply support it?", "url": "https://github.com/prestodb/presto/pull/14461#discussion_r418264193", "createdAt": "2020-04-30T20:17:56Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -4884,7 +4921,13 @@ private static ConnectorSession getConnectorSession(Session session)\n     private void testWithAllStorageFormats(BiConsumer<Session, HiveStorageFormat> test)\n     {\n         for (HiveStorageFormat storageFormat : HiveStorageFormat.values()) {\n-            test.accept(getSession(), storageFormat);\n+            Session session = getSession();\n+            if (storageFormat == PAGEFILE) {\n+                session = Session.builder(getSession())\n+                        .setCatalogSessionProperty(catalog, \"compression_codec\", \"SNAPPY\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d41f18d205ab4b4764b28f4dd6cccfe4ab7abc"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjQ4MjA4OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveCompressionCodec.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDoxODo0NVrOGO42QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNTo0MDowNFrOGQGIJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2NDY0MA==", "bodyText": "I wonder if it makes sense to support one more compression codec. Generally speaking both LZ4 and SNAPPY are pretty close in their compression characteristics.", "url": "https://github.com/prestodb/presto/pull/14461#discussion_r418264640", "createdAt": "2020-04-30T20:18:45Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveCompressionCodec.java", "diffHunk": "@@ -24,13 +24,15 @@\n \n import static com.facebook.presto.hive.HiveStorageFormat.DWRF;\n import static com.facebook.presto.hive.HiveStorageFormat.ORC;\n+import static com.facebook.presto.hive.HiveStorageFormat.PAGEFILE;\n import static java.util.Objects.requireNonNull;\n \n public enum HiveCompressionCodec\n {\n     NONE(null, CompressionKind.NONE, CompressionCodecName.UNCOMPRESSED, f -> true),\n     SNAPPY(SnappyCodec.class, CompressionKind.SNAPPY, CompressionCodecName.SNAPPY, f -> true),\n-    GZIP(GzipCodec.class, CompressionKind.ZLIB, CompressionCodecName.GZIP, f -> true),\n+    LZ4(null, CompressionKind.NONE, null, f -> f == PAGEFILE),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d41f18d205ab4b4764b28f4dd6cccfe4ab7abc"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2ODU0NA==", "bodyText": "Why do we need another compression? ZSTD with lower levels should be able to achieve comparable speed with much better compression.", "url": "https://github.com/prestodb/presto/pull/14461#discussion_r418368544", "createdAt": "2020-05-01T00:54:19Z", "author": {"login": "jainxrohit"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveCompressionCodec.java", "diffHunk": "@@ -24,13 +24,15 @@\n \n import static com.facebook.presto.hive.HiveStorageFormat.DWRF;\n import static com.facebook.presto.hive.HiveStorageFormat.ORC;\n+import static com.facebook.presto.hive.HiveStorageFormat.PAGEFILE;\n import static java.util.Objects.requireNonNull;\n \n public enum HiveCompressionCodec\n {\n     NONE(null, CompressionKind.NONE, CompressionCodecName.UNCOMPRESSED, f -> true),\n     SNAPPY(SnappyCodec.class, CompressionKind.SNAPPY, CompressionCodecName.SNAPPY, f -> true),\n-    GZIP(GzipCodec.class, CompressionKind.ZLIB, CompressionCodecName.GZIP, f -> true),\n+    LZ4(null, CompressionKind.NONE, null, f -> f == PAGEFILE),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2NDY0MA=="}, "originalCommit": {"oid": "49d41f18d205ab4b4764b28f4dd6cccfe4ab7abc"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM3MTAzOQ==", "bodyText": "We use LZ4 for shuffle. Because we care performance more rather than storage saving. The temp tables are short-living.", "url": "https://github.com/prestodb/presto/pull/14461#discussion_r418371039", "createdAt": "2020-05-01T01:04:38Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveCompressionCodec.java", "diffHunk": "@@ -24,13 +24,15 @@\n \n import static com.facebook.presto.hive.HiveStorageFormat.DWRF;\n import static com.facebook.presto.hive.HiveStorageFormat.ORC;\n+import static com.facebook.presto.hive.HiveStorageFormat.PAGEFILE;\n import static java.util.Objects.requireNonNull;\n \n public enum HiveCompressionCodec\n {\n     NONE(null, CompressionKind.NONE, CompressionCodecName.UNCOMPRESSED, f -> true),\n     SNAPPY(SnappyCodec.class, CompressionKind.SNAPPY, CompressionCodecName.SNAPPY, f -> true),\n-    GZIP(GzipCodec.class, CompressionKind.ZLIB, CompressionCodecName.GZIP, f -> true),\n+    LZ4(null, CompressionKind.NONE, null, f -> f == PAGEFILE),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2NDY0MA=="}, "originalCommit": {"oid": "49d41f18d205ab4b4764b28f4dd6cccfe4ab7abc"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM3MjI0MA==", "bodyText": "How about not using any compression?", "url": "https://github.com/prestodb/presto/pull/14461#discussion_r418372240", "createdAt": "2020-05-01T01:09:49Z", "author": {"login": "jainxrohit"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveCompressionCodec.java", "diffHunk": "@@ -24,13 +24,15 @@\n \n import static com.facebook.presto.hive.HiveStorageFormat.DWRF;\n import static com.facebook.presto.hive.HiveStorageFormat.ORC;\n+import static com.facebook.presto.hive.HiveStorageFormat.PAGEFILE;\n import static java.util.Objects.requireNonNull;\n \n public enum HiveCompressionCodec\n {\n     NONE(null, CompressionKind.NONE, CompressionCodecName.UNCOMPRESSED, f -> true),\n     SNAPPY(SnappyCodec.class, CompressionKind.SNAPPY, CompressionCodecName.SNAPPY, f -> true),\n-    GZIP(GzipCodec.class, CompressionKind.ZLIB, CompressionCodecName.GZIP, f -> true),\n+    LZ4(null, CompressionKind.NONE, null, f -> f == PAGEFILE),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2NDY0MA=="}, "originalCommit": {"oid": "49d41f18d205ab4b4764b28f4dd6cccfe4ab7abc"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM3MzQyMQ==", "bodyText": "That is also considered in our exchange client buffer; if after compression we find the size is larger than the original bytes, we will send the original bytes. The flag is located in the header of a serialized page. Check PagesSerde.", "url": "https://github.com/prestodb/presto/pull/14461#discussion_r418373421", "createdAt": "2020-05-01T01:15:06Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveCompressionCodec.java", "diffHunk": "@@ -24,13 +24,15 @@\n \n import static com.facebook.presto.hive.HiveStorageFormat.DWRF;\n import static com.facebook.presto.hive.HiveStorageFormat.ORC;\n+import static com.facebook.presto.hive.HiveStorageFormat.PAGEFILE;\n import static java.util.Objects.requireNonNull;\n \n public enum HiveCompressionCodec\n {\n     NONE(null, CompressionKind.NONE, CompressionCodecName.UNCOMPRESSED, f -> true),\n     SNAPPY(SnappyCodec.class, CompressionKind.SNAPPY, CompressionCodecName.SNAPPY, f -> true),\n-    GZIP(GzipCodec.class, CompressionKind.ZLIB, CompressionCodecName.GZIP, f -> true),\n+    LZ4(null, CompressionKind.NONE, null, f -> f == PAGEFILE),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2NDY0MA=="}, "originalCommit": {"oid": "49d41f18d205ab4b4764b28f4dd6cccfe4ab7abc"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM5MzIyMA==", "bodyText": "We use LZ4 for shuffle. Because we care performance more rather than storage saving. The temp tables are short-living.\n\nRight, that's why I added LZ4 option. I am thinking about adding ZSTD too, but I haven't done any benchmark on real queries yet. In my impression, SNAPPY and LZ4 are faster.", "url": "https://github.com/prestodb/presto/pull/14461#discussion_r418393220", "createdAt": "2020-05-01T02:47:21Z", "author": {"login": "viczhang861"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveCompressionCodec.java", "diffHunk": "@@ -24,13 +24,15 @@\n \n import static com.facebook.presto.hive.HiveStorageFormat.DWRF;\n import static com.facebook.presto.hive.HiveStorageFormat.ORC;\n+import static com.facebook.presto.hive.HiveStorageFormat.PAGEFILE;\n import static java.util.Objects.requireNonNull;\n \n public enum HiveCompressionCodec\n {\n     NONE(null, CompressionKind.NONE, CompressionCodecName.UNCOMPRESSED, f -> true),\n     SNAPPY(SnappyCodec.class, CompressionKind.SNAPPY, CompressionCodecName.SNAPPY, f -> true),\n-    GZIP(GzipCodec.class, CompressionKind.ZLIB, CompressionCodecName.GZIP, f -> true),\n+    LZ4(null, CompressionKind.NONE, null, f -> f == PAGEFILE),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2NDY0MA=="}, "originalCommit": {"oid": "49d41f18d205ab4b4764b28f4dd6cccfe4ab7abc"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQwNjMzMQ==", "bodyText": "SNAPPY and LZ4 are indeed faster for text data. But I think with the combination of no compression + ZSTD level 1 should be good enough. Needs to be experimented for our data.", "url": "https://github.com/prestodb/presto/pull/14461#discussion_r418406331", "createdAt": "2020-05-01T03:58:22Z", "author": {"login": "jainxrohit"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveCompressionCodec.java", "diffHunk": "@@ -24,13 +24,15 @@\n \n import static com.facebook.presto.hive.HiveStorageFormat.DWRF;\n import static com.facebook.presto.hive.HiveStorageFormat.ORC;\n+import static com.facebook.presto.hive.HiveStorageFormat.PAGEFILE;\n import static java.util.Objects.requireNonNull;\n \n public enum HiveCompressionCodec\n {\n     NONE(null, CompressionKind.NONE, CompressionCodecName.UNCOMPRESSED, f -> true),\n     SNAPPY(SnappyCodec.class, CompressionKind.SNAPPY, CompressionCodecName.SNAPPY, f -> true),\n-    GZIP(GzipCodec.class, CompressionKind.ZLIB, CompressionCodecName.GZIP, f -> true),\n+    LZ4(null, CompressionKind.NONE, null, f -> f == PAGEFILE),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2NDY0MA=="}, "originalCommit": {"oid": "49d41f18d205ab4b4764b28f4dd6cccfe4ab7abc"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUzMDc5MA==", "bodyText": "SNAPPY and LZ4 are faster, but provide lower level of compression. My question is why do we need both, LZ4 and SNAPPY? SNAPPY and LZ4 are very similar characteristics wise. I wonder if it makes sense to leave only SNAPPY for now, as it already exist and supported by all storage formats.", "url": "https://github.com/prestodb/presto/pull/14461#discussion_r419530790", "createdAt": "2020-05-04T15:40:04Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveCompressionCodec.java", "diffHunk": "@@ -24,13 +24,15 @@\n \n import static com.facebook.presto.hive.HiveStorageFormat.DWRF;\n import static com.facebook.presto.hive.HiveStorageFormat.ORC;\n+import static com.facebook.presto.hive.HiveStorageFormat.PAGEFILE;\n import static java.util.Objects.requireNonNull;\n \n public enum HiveCompressionCodec\n {\n     NONE(null, CompressionKind.NONE, CompressionCodecName.UNCOMPRESSED, f -> true),\n     SNAPPY(SnappyCodec.class, CompressionKind.SNAPPY, CompressionCodecName.SNAPPY, f -> true),\n-    GZIP(GzipCodec.class, CompressionKind.ZLIB, CompressionCodecName.GZIP, f -> true),\n+    LZ4(null, CompressionKind.NONE, null, f -> f == PAGEFILE),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2NDY0MA=="}, "originalCommit": {"oid": "49d41f18d205ab4b4764b28f4dd6cccfe4ab7abc"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjQ5NTU4OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFileFooterOutput.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDoyMzowNVrOGO4-tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDoyMzowNVrOGO4-tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2NjgwNw==", "bodyText": "#size could be called before writeData . The size should be pre-computed", "url": "https://github.com/prestodb/presto/pull/14461#discussion_r418266807", "createdAt": "2020-04-30T20:23:05Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFileFooterOutput.java", "diffHunk": "@@ -13,45 +13,67 @@\n  */\n package com.facebook.presto.hive.pagefile;\n \n+import com.facebook.presto.hive.HiveCompressionCodec;\n import com.facebook.presto.orc.stream.DataOutput;\n import com.google.common.collect.ImmutableList;\n+import io.airlift.slice.Slice;\n import io.airlift.slice.SliceOutput;\n \n import java.util.List;\n \n import static io.airlift.slice.SizeOf.SIZE_OF_INT;\n import static io.airlift.slice.SizeOf.SIZE_OF_LONG;\n+import static io.airlift.slice.Slices.utf8Slice;\n import static java.lang.Math.toIntExact;\n import static java.util.Objects.requireNonNull;\n \n public class PageFileFooterOutput\n         implements DataOutput\n {\n     public static final int FOOTER_LENGTH_IN_BYTES = SIZE_OF_INT;\n+\n     private final List<Long> stripeOffsets;\n+    private final HiveCompressionCodec compressionCodec;\n+    private long size;\n \n-    public PageFileFooterOutput(List<Long> stripeOffsets)\n+    public PageFileFooterOutput(List<Long> stripeOffsets, HiveCompressionCodec compressionCodec)\n     {\n         this.stripeOffsets = ImmutableList.copyOf(requireNonNull(stripeOffsets, \"stripeOffsets is null\"));\n+        this.compressionCodec = requireNonNull(compressionCodec, \"compressionCodec is null\");\n     }\n \n     @Override\n     public long size()\n     {\n-        return SIZE_OF_LONG * stripeOffsets.size() + FOOTER_LENGTH_IN_BYTES;\n+        return size;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d41f18d205ab4b4764b28f4dd6cccfe4ab7abc"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjQ5NzMzOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFileFooterOutput.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDoyMzo0MFrOGO4_2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNDozOTo0OVrOGQDeMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2NzA5Ng==", "bodyText": "Writing a string here makes it harder to pre-compute the footer size. What do you think about writing an integer instead of a string?", "url": "https://github.com/prestodb/presto/pull/14461#discussion_r418267096", "createdAt": "2020-04-30T20:23:40Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFileFooterOutput.java", "diffHunk": "@@ -13,45 +13,67 @@\n  */\n package com.facebook.presto.hive.pagefile;\n \n+import com.facebook.presto.hive.HiveCompressionCodec;\n import com.facebook.presto.orc.stream.DataOutput;\n import com.google.common.collect.ImmutableList;\n+import io.airlift.slice.Slice;\n import io.airlift.slice.SliceOutput;\n \n import java.util.List;\n \n import static io.airlift.slice.SizeOf.SIZE_OF_INT;\n import static io.airlift.slice.SizeOf.SIZE_OF_LONG;\n+import static io.airlift.slice.Slices.utf8Slice;\n import static java.lang.Math.toIntExact;\n import static java.util.Objects.requireNonNull;\n \n public class PageFileFooterOutput\n         implements DataOutput\n {\n     public static final int FOOTER_LENGTH_IN_BYTES = SIZE_OF_INT;\n+\n     private final List<Long> stripeOffsets;\n+    private final HiveCompressionCodec compressionCodec;\n+    private long size;\n \n-    public PageFileFooterOutput(List<Long> stripeOffsets)\n+    public PageFileFooterOutput(List<Long> stripeOffsets, HiveCompressionCodec compressionCodec)\n     {\n         this.stripeOffsets = ImmutableList.copyOf(requireNonNull(stripeOffsets, \"stripeOffsets is null\"));\n+        this.compressionCodec = requireNonNull(compressionCodec, \"compressionCodec is null\");\n     }\n \n     @Override\n     public long size()\n     {\n-        return SIZE_OF_LONG * stripeOffsets.size() + FOOTER_LENGTH_IN_BYTES;\n+        return size;\n     }\n \n     @Override\n     public void writeData(SliceOutput sliceOutput)\n     {\n-        for (long offset : stripeOffsets) {\n-            sliceOutput.writeLong(offset);\n+        if (!stripeOffsets.isEmpty()) {\n+            // write compression information\n+            Slice compressionSlice = utf8Slice(compressionCodec.name());\n+            sliceOutput.writeInt(compressionSlice.length());\n+            size += SIZE_OF_INT;\n+            sliceOutput.writeBytes(compressionSlice);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d41f18d205ab4b4764b28f4dd6cccfe4ab7abc"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ4NzI4MA==", "bodyText": "Code is refactored to precompute size.\nJust in case page formate could be a permanent storage in the future,  having a string name makes it self-explanatory and backward compatible if new enum name is added into HiveCompressionCodec", "url": "https://github.com/prestodb/presto/pull/14461#discussion_r419487280", "createdAt": "2020-05-04T14:39:49Z", "author": {"login": "viczhang861"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFileFooterOutput.java", "diffHunk": "@@ -13,45 +13,67 @@\n  */\n package com.facebook.presto.hive.pagefile;\n \n+import com.facebook.presto.hive.HiveCompressionCodec;\n import com.facebook.presto.orc.stream.DataOutput;\n import com.google.common.collect.ImmutableList;\n+import io.airlift.slice.Slice;\n import io.airlift.slice.SliceOutput;\n \n import java.util.List;\n \n import static io.airlift.slice.SizeOf.SIZE_OF_INT;\n import static io.airlift.slice.SizeOf.SIZE_OF_LONG;\n+import static io.airlift.slice.Slices.utf8Slice;\n import static java.lang.Math.toIntExact;\n import static java.util.Objects.requireNonNull;\n \n public class PageFileFooterOutput\n         implements DataOutput\n {\n     public static final int FOOTER_LENGTH_IN_BYTES = SIZE_OF_INT;\n+\n     private final List<Long> stripeOffsets;\n+    private final HiveCompressionCodec compressionCodec;\n+    private long size;\n \n-    public PageFileFooterOutput(List<Long> stripeOffsets)\n+    public PageFileFooterOutput(List<Long> stripeOffsets, HiveCompressionCodec compressionCodec)\n     {\n         this.stripeOffsets = ImmutableList.copyOf(requireNonNull(stripeOffsets, \"stripeOffsets is null\"));\n+        this.compressionCodec = requireNonNull(compressionCodec, \"compressionCodec is null\");\n     }\n \n     @Override\n     public long size()\n     {\n-        return SIZE_OF_LONG * stripeOffsets.size() + FOOTER_LENGTH_IN_BYTES;\n+        return size;\n     }\n \n     @Override\n     public void writeData(SliceOutput sliceOutput)\n     {\n-        for (long offset : stripeOffsets) {\n-            sliceOutput.writeLong(offset);\n+        if (!stripeOffsets.isEmpty()) {\n+            // write compression information\n+            Slice compressionSlice = utf8Slice(compressionCodec.name());\n+            sliceOutput.writeInt(compressionSlice.length());\n+            size += SIZE_OF_INT;\n+            sliceOutput.writeBytes(compressionSlice);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2NzA5Ng=="}, "originalCommit": {"oid": "49d41f18d205ab4b4764b28f4dd6cccfe4ab7abc"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjUxMzA2OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFileWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDoyODoyNVrOGO5JfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDoyODoyNVrOGO5JfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2OTU2NQ==", "bodyText": "Let's move it to the ConfigurationUtils.", "url": "https://github.com/prestodb/presto/pull/14461#discussion_r418269565", "createdAt": "2020-04-30T20:28:25Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFileWriter.java", "diffHunk": "@@ -32,19 +33,21 @@\n public class PageFileWriter\n         implements HiveFileWriter\n {\n+    public static final String PAGE_FILE_COMPRESS = \"pagefile.output.compress\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d41f18d205ab4b4764b28f4dd6cccfe4ab7abc"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjUxMzkzOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFileWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDoyODo0N1rOGO5KGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDoyODo0N1rOGO5KGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2OTcyMA==", "bodyText": "Also maybe PAGE_FILE_COMPRESSION = \"pagefile.output.compression\"?", "url": "https://github.com/prestodb/presto/pull/14461#discussion_r418269720", "createdAt": "2020-04-30T20:28:47Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFileWriter.java", "diffHunk": "@@ -32,19 +33,21 @@\n public class PageFileWriter\n         implements HiveFileWriter\n {\n+    public static final String PAGE_FILE_COMPRESS = \"pagefile.output.compress\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d41f18d205ab4b4764b28f4dd6cccfe4ab7abc"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjUzMDcwOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFileWriterFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDozMzo0MlrOGO5UYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDozMzo0MlrOGO5UYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI3MjM1Mg==", "bodyText": "For this class I would simply inline the HiveCompressionCodec.valueOf(compression). Incorrect compression set in the configuration is a programming error. Simple IllegalArgumentException thrown by the valueOf should be fine.\nIt has to be handled more carefully when reading the file, and decoding the compression stored in the footer. But in that case the exception should be EXTERNAL, and not INTERNAL.", "url": "https://github.com/prestodb/presto/pull/14461#discussion_r418272352", "createdAt": "2020-04-30T20:33:42Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFileWriterFactory.java", "diffHunk": "@@ -104,6 +113,47 @@ public static void createEmptyPageFile(\n         }\n     }\n \n+    public static HiveCompressionCodec getCompressionCodec(String compression)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d41f18d205ab4b4764b28f4dd6cccfe4ab7abc"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTQ0OTAzOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFileCorruptionException.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNTo0MzoyMFrOGQGQsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxOToyOTowM1rOGQO6kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUzMjk3Nw==", "bodyText": "Why do we need a special exception? Why not simply PrestoException?", "url": "https://github.com/prestodb/presto/pull/14461#discussion_r419532977", "createdAt": "2020-05-04T15:43:20Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFileCorruptionException.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.pagefile;\n+\n+import java.io.IOException;\n+\n+import static java.lang.String.format;\n+\n+public class PageFileCorruptionException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf8bedf02869f5f41c2d3114d7a4133a314cf40"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY3NDc3MQ==", "bodyText": "Similar as RcFileCorruptionException to make it clear,  do you prefer to throw HIVE_BAD_DATA error directly?", "url": "https://github.com/prestodb/presto/pull/14461#discussion_r419674771", "createdAt": "2020-05-04T19:29:03Z", "author": {"login": "viczhang861"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFileCorruptionException.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.pagefile;\n+\n+import java.io.IOException;\n+\n+import static java.lang.String.format;\n+\n+public class PageFileCorruptionException", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUzMjk3Nw=="}, "originalCommit": {"oid": "6bf8bedf02869f5f41c2d3114d7a4133a314cf40"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTQ1OTIxOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFileFooterReader.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNTo0NTozMVrOGQGW0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxODoyODowOVrOGQMvsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUzNDU0Nw==", "bodyText": "else if (footerOffset > 0) { is not needed", "url": "https://github.com/prestodb/presto/pull/14461#discussion_r419534547", "createdAt": "2020-05-04T15:45:31Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFileFooterReader.java", "diffHunk": "@@ -48,24 +54,46 @@ public PageFileFooterReader(\n         int footerSize = Slices.wrappedBuffer(buffer, buffer.length - FOOTER_LENGTH_IN_BYTES, FOOTER_LENGTH_IN_BYTES).getInt(0);\n \n         footerOffset = fileSize - footerSize;\n+        HiveCompressionCodec compression;\n         if (footerOffset < 0) {\n-            throw new IOException(\"Malformed PageFile format, incorrect footer length.\");\n+            throw new PageFileCorruptionException(\"Malformed PageFile format, incorrect footer length.\");\n         }\n         else if (footerOffset > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf8bedf02869f5f41c2d3114d7a4133a314cf40"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYxODg0MQ==", "bodyText": "else if (footerOffset > 0) { is not needed\n\nThis is needed because for empty file, ,footerOffset = 0", "url": "https://github.com/prestodb/presto/pull/14461#discussion_r419618841", "createdAt": "2020-05-04T17:54:44Z", "author": {"login": "viczhang861"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFileFooterReader.java", "diffHunk": "@@ -48,24 +54,46 @@ public PageFileFooterReader(\n         int footerSize = Slices.wrappedBuffer(buffer, buffer.length - FOOTER_LENGTH_IN_BYTES, FOOTER_LENGTH_IN_BYTES).getInt(0);\n \n         footerOffset = fileSize - footerSize;\n+        HiveCompressionCodec compression;\n         if (footerOffset < 0) {\n-            throw new IOException(\"Malformed PageFile format, incorrect footer length.\");\n+            throw new PageFileCorruptionException(\"Malformed PageFile format, incorrect footer length.\");\n         }\n         else if (footerOffset > 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUzNDU0Nw=="}, "originalCommit": {"oid": "6bf8bedf02869f5f41c2d3114d7a4133a314cf40"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYzOTIxNw==", "bodyText": "Oh, right. Nevermind then.", "url": "https://github.com/prestodb/presto/pull/14461#discussion_r419639217", "createdAt": "2020-05-04T18:28:09Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFileFooterReader.java", "diffHunk": "@@ -48,24 +54,46 @@ public PageFileFooterReader(\n         int footerSize = Slices.wrappedBuffer(buffer, buffer.length - FOOTER_LENGTH_IN_BYTES, FOOTER_LENGTH_IN_BYTES).getInt(0);\n \n         footerOffset = fileSize - footerSize;\n+        HiveCompressionCodec compression;\n         if (footerOffset < 0) {\n-            throw new IOException(\"Malformed PageFile format, incorrect footer length.\");\n+            throw new PageFileCorruptionException(\"Malformed PageFile format, incorrect footer length.\");\n         }\n         else if (footerOffset > 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUzNDU0Nw=="}, "originalCommit": {"oid": "6bf8bedf02869f5f41c2d3114d7a4133a314cf40"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTQ3MTAxOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFilePageSourceFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNTo0ODoxNFrOGQGeLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNTo0ODoxNFrOGQGeLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUzNjQyOA==", "bodyText": "Why not to throw this exception directly?", "url": "https://github.com/prestodb/presto/pull/14461#discussion_r419536428", "createdAt": "2020-05-04T15:48:14Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFilePageSourceFactory.java", "diffHunk": "@@ -93,7 +88,25 @@ public PageFilePageSourceFactory(\n             throw new PrestoException(HIVE_CANNOT_OPEN_SPLIT, splitError(e, path, start, length), e);\n         }\n \n-        return Optional.of(pageFilePageSource);\n+        try {\n+            PageFilePageSource pageFilePageSource = new PageFilePageSource(inputStream, start, length, fileSize, blockEncodingSerde, columns);\n+            return Optional.of(pageFilePageSource);\n+        }\n+        catch (Throwable e) {\n+            try {\n+                inputStream.close();\n+            }\n+            catch (IOException ignored) {\n+            }\n+            if (e instanceof PrestoException) {\n+                throw (PrestoException) e;\n+            }\n+            String message = splitError(e, path, start, length);\n+            if (e instanceof PageFileCorruptionException) {\n+                throw new PrestoException(HIVE_BAD_DATA, message, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf8bedf02869f5f41c2d3114d7a4133a314cf40"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTQ3NTUyOnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/com/facebook/presto/orc/zlib/DeflateCompressor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNTo0OToxOFrOGQGhAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNTo0OToxOFrOGQGhAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUzNzE1Mg==", "bodyText": "IllegalArgumentException", "url": "https://github.com/prestodb/presto/pull/14461#discussion_r419537152", "createdAt": "2020-05-04T15:49:18Z", "author": {"login": "arhimondr"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/zlib/DeflateCompressor.java", "diffHunk": "@@ -60,6 +60,30 @@ public int compress(byte[] input, int inputOffset, int inputLength, byte[] outpu\n     @Override\n     public void compress(ByteBuffer input, ByteBuffer output)\n     {\n-        throw new UnsupportedOperationException(\"Compression of byte buffer not supported for deflate\");\n+        if (input.isDirect() || output.isDirect()) {\n+            throw new UnsupportedOperationException(\"Compression of direct byte buffer not supported\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf8bedf02869f5f41c2d3114d7a4133a314cf40"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTQ3ODE5OnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/com/facebook/presto/orc/zlib/DeflateCompressor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNTo0OTo1MFrOGQGimA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNTo0OTo1MFrOGQGimA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUzNzU2MA==", "bodyText": "This branch is not needed", "url": "https://github.com/prestodb/presto/pull/14461#discussion_r419537560", "createdAt": "2020-05-04T15:49:50Z", "author": {"login": "arhimondr"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/zlib/DeflateCompressor.java", "diffHunk": "@@ -60,6 +60,30 @@ public int compress(byte[] input, int inputOffset, int inputLength, byte[] outpu\n     @Override\n     public void compress(ByteBuffer input, ByteBuffer output)\n     {\n-        throw new UnsupportedOperationException(\"Compression of byte buffer not supported for deflate\");\n+        if (input.isDirect() || output.isDirect()) {\n+            throw new UnsupportedOperationException(\"Compression of direct byte buffer not supported\");\n+        }\n+        byte[] inputArray;\n+        int inputOffset;\n+        if (input.hasArray()) {\n+            inputArray = input.array();\n+            inputOffset = input.arrayOffset() + input.position();\n+        }\n+        else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf8bedf02869f5f41c2d3114d7a4133a314cf40"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTQ4MDQ3OnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/com/facebook/presto/orc/zlib/DeflateCompressor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNTo1MDoyNVrOGQGkCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNTo1MDoyNVrOGQGkCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUzNzkyOA==", "bodyText": "this branch is not needed", "url": "https://github.com/prestodb/presto/pull/14461#discussion_r419537928", "createdAt": "2020-05-04T15:50:25Z", "author": {"login": "arhimondr"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/zlib/DeflateCompressor.java", "diffHunk": "@@ -60,6 +60,30 @@ public int compress(byte[] input, int inputOffset, int inputLength, byte[] outpu\n     @Override\n     public void compress(ByteBuffer input, ByteBuffer output)\n     {\n-        throw new UnsupportedOperationException(\"Compression of byte buffer not supported for deflate\");\n+        if (input.isDirect() || output.isDirect()) {\n+            throw new UnsupportedOperationException(\"Compression of direct byte buffer not supported\");\n+        }\n+        byte[] inputArray;\n+        int inputOffset;\n+        if (input.hasArray()) {\n+            inputArray = input.array();\n+            inputOffset = input.arrayOffset() + input.position();\n+        }\n+        else {\n+            throw new IllegalArgumentException(\"Unsupported input ByteBuffer implementation \" + input.getClass().getName());\n+        }\n+\n+        byte[] outputArray;\n+        int outputOffset;\n+        if (output.hasArray()) {\n+            outputArray = output.array();\n+            outputOffset = output.arrayOffset() + output.position();\n+        }\n+        else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf8bedf02869f5f41c2d3114d7a4133a314cf40"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTQ4NzM1OnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/com/facebook/presto/orc/zlib/InflateDecompressor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNTo1MTo1N1rOGQGoSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNTo1MTo1N1rOGQGoSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUzOTAxOA==", "bodyText": "IllegalArgumentException?", "url": "https://github.com/prestodb/presto/pull/14461#discussion_r419539018", "createdAt": "2020-05-04T15:51:57Z", "author": {"login": "arhimondr"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/zlib/InflateDecompressor.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.orc.zlib;\n+\n+import io.airlift.compress.Decompressor;\n+import io.airlift.compress.MalformedInputException;\n+\n+import java.nio.ByteBuffer;\n+import java.util.zip.DataFormatException;\n+import java.util.zip.Inflater;\n+\n+public class InflateDecompressor\n+        implements Decompressor\n+{\n+    @Override\n+    public int decompress(byte[] input, int inputOffset, int inputLength, byte[] output, int outputOffset, int maxOutputLength)\n+            throws MalformedInputException\n+    {\n+        Inflater inflater = new Inflater(true);\n+        inflater.setInput(input, inputOffset, inputLength);\n+        int uncompressedLength = 0;\n+        try {\n+            uncompressedLength = inflater.inflate(output, outputOffset, maxOutputLength);\n+            if (!inflater.finished()) {\n+                throw new IllegalStateException(\"maxCompressedLength formula is incorrect, because deflate produced more data\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf8bedf02869f5f41c2d3114d7a4133a314cf40"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTQ4ODY4OnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/com/facebook/presto/orc/zlib/InflateDecompressor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNTo1MjoxN1rOGQGpGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNTo1MjoxN1rOGQGpGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUzOTIyNQ==", "bodyText": "IllegalArgumentException", "url": "https://github.com/prestodb/presto/pull/14461#discussion_r419539225", "createdAt": "2020-05-04T15:52:17Z", "author": {"login": "arhimondr"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/zlib/InflateDecompressor.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.orc.zlib;\n+\n+import io.airlift.compress.Decompressor;\n+import io.airlift.compress.MalformedInputException;\n+\n+import java.nio.ByteBuffer;\n+import java.util.zip.DataFormatException;\n+import java.util.zip.Inflater;\n+\n+public class InflateDecompressor\n+        implements Decompressor\n+{\n+    @Override\n+    public int decompress(byte[] input, int inputOffset, int inputLength, byte[] output, int outputOffset, int maxOutputLength)\n+            throws MalformedInputException\n+    {\n+        Inflater inflater = new Inflater(true);\n+        inflater.setInput(input, inputOffset, inputLength);\n+        int uncompressedLength = 0;\n+        try {\n+            uncompressedLength = inflater.inflate(output, outputOffset, maxOutputLength);\n+            if (!inflater.finished()) {\n+                throw new IllegalStateException(\"maxCompressedLength formula is incorrect, because deflate produced more data\");\n+            }\n+        }\n+        catch (DataFormatException e) {\n+            throw new MalformedInputException(inputOffset, e.getMessage());\n+        }\n+        finally {\n+            inflater.end();\n+        }\n+        return uncompressedLength;\n+    }\n+\n+    @Override\n+    public void decompress(ByteBuffer input, ByteBuffer output)\n+            throws MalformedInputException\n+    {\n+        if (input.isDirect() || output.isDirect()) {\n+            throw new UnsupportedOperationException(\"Decompression of direct byte buffer not supported\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf8bedf02869f5f41c2d3114d7a4133a314cf40"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTQ4OTM3OnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/com/facebook/presto/orc/zlib/InflateDecompressor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNTo1MjoyOFrOGQGpiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNTo1MjoyOFrOGQGpiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUzOTMzOQ==", "bodyText": "remove", "url": "https://github.com/prestodb/presto/pull/14461#discussion_r419539339", "createdAt": "2020-05-04T15:52:28Z", "author": {"login": "arhimondr"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/zlib/InflateDecompressor.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.orc.zlib;\n+\n+import io.airlift.compress.Decompressor;\n+import io.airlift.compress.MalformedInputException;\n+\n+import java.nio.ByteBuffer;\n+import java.util.zip.DataFormatException;\n+import java.util.zip.Inflater;\n+\n+public class InflateDecompressor\n+        implements Decompressor\n+{\n+    @Override\n+    public int decompress(byte[] input, int inputOffset, int inputLength, byte[] output, int outputOffset, int maxOutputLength)\n+            throws MalformedInputException\n+    {\n+        Inflater inflater = new Inflater(true);\n+        inflater.setInput(input, inputOffset, inputLength);\n+        int uncompressedLength = 0;\n+        try {\n+            uncompressedLength = inflater.inflate(output, outputOffset, maxOutputLength);\n+            if (!inflater.finished()) {\n+                throw new IllegalStateException(\"maxCompressedLength formula is incorrect, because deflate produced more data\");\n+            }\n+        }\n+        catch (DataFormatException e) {\n+            throw new MalformedInputException(inputOffset, e.getMessage());\n+        }\n+        finally {\n+            inflater.end();\n+        }\n+        return uncompressedLength;\n+    }\n+\n+    @Override\n+    public void decompress(ByteBuffer input, ByteBuffer output)\n+            throws MalformedInputException\n+    {\n+        if (input.isDirect() || output.isDirect()) {\n+            throw new UnsupportedOperationException(\"Decompression of direct byte buffer not supported\");\n+        }\n+        byte[] inputArray;\n+        int inputOffset;\n+        if (input.hasArray()) {\n+            inputArray = input.array();\n+            inputOffset = input.arrayOffset() + input.position();\n+        }\n+        else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf8bedf02869f5f41c2d3114d7a4133a314cf40"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTQ5MDI1OnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/com/facebook/presto/orc/zlib/InflateDecompressor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNTo1MjozOVrOGQGqFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNTo1MjozOVrOGQGqFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUzOTQ3OA==", "bodyText": "remove", "url": "https://github.com/prestodb/presto/pull/14461#discussion_r419539478", "createdAt": "2020-05-04T15:52:39Z", "author": {"login": "arhimondr"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/zlib/InflateDecompressor.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.orc.zlib;\n+\n+import io.airlift.compress.Decompressor;\n+import io.airlift.compress.MalformedInputException;\n+\n+import java.nio.ByteBuffer;\n+import java.util.zip.DataFormatException;\n+import java.util.zip.Inflater;\n+\n+public class InflateDecompressor\n+        implements Decompressor\n+{\n+    @Override\n+    public int decompress(byte[] input, int inputOffset, int inputLength, byte[] output, int outputOffset, int maxOutputLength)\n+            throws MalformedInputException\n+    {\n+        Inflater inflater = new Inflater(true);\n+        inflater.setInput(input, inputOffset, inputLength);\n+        int uncompressedLength = 0;\n+        try {\n+            uncompressedLength = inflater.inflate(output, outputOffset, maxOutputLength);\n+            if (!inflater.finished()) {\n+                throw new IllegalStateException(\"maxCompressedLength formula is incorrect, because deflate produced more data\");\n+            }\n+        }\n+        catch (DataFormatException e) {\n+            throw new MalformedInputException(inputOffset, e.getMessage());\n+        }\n+        finally {\n+            inflater.end();\n+        }\n+        return uncompressedLength;\n+    }\n+\n+    @Override\n+    public void decompress(ByteBuffer input, ByteBuffer output)\n+            throws MalformedInputException\n+    {\n+        if (input.isDirect() || output.isDirect()) {\n+            throw new UnsupportedOperationException(\"Decompression of direct byte buffer not supported\");\n+        }\n+        byte[] inputArray;\n+        int inputOffset;\n+        if (input.hasArray()) {\n+            inputArray = input.array();\n+            inputOffset = input.arrayOffset() + input.position();\n+        }\n+        else {\n+            throw new IllegalArgumentException(\"Unsupported input ByteBuffer implementation \" + input.getClass().getName());\n+        }\n+\n+        byte[] outputArray;\n+        int outputOffset;\n+        if (output.hasArray()) {\n+            outputArray = output.array();\n+            outputOffset = output.arrayOffset() + output.position();\n+        }\n+        else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf8bedf02869f5f41c2d3114d7a4133a314cf40"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTQ5MTk5OnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/com/facebook/presto/orc/zlib/DeflateCompressor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNTo1MzowNVrOGQGrPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNTo1MzowNVrOGQGrPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUzOTc3Mw==", "bodyText": "check for hasArray here", "url": "https://github.com/prestodb/presto/pull/14461#discussion_r419539773", "createdAt": "2020-05-04T15:53:05Z", "author": {"login": "arhimondr"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/zlib/DeflateCompressor.java", "diffHunk": "@@ -60,6 +60,30 @@ public int compress(byte[] input, int inputOffset, int inputLength, byte[] outpu\n     @Override\n     public void compress(ByteBuffer input, ByteBuffer output)\n     {\n-        throw new UnsupportedOperationException(\"Compression of byte buffer not supported for deflate\");\n+        if (input.isDirect() || output.isDirect()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf8bedf02869f5f41c2d3114d7a4133a314cf40"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTQ5MzIyOnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/com/facebook/presto/orc/zlib/InflateDecompressor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNTo1MzoyMVrOGQGsDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNTo1MzoyMVrOGQGsDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUzOTk4MA==", "bodyText": "check for hasArray here", "url": "https://github.com/prestodb/presto/pull/14461#discussion_r419539980", "createdAt": "2020-05-04T15:53:21Z", "author": {"login": "arhimondr"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/zlib/InflateDecompressor.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.orc.zlib;\n+\n+import io.airlift.compress.Decompressor;\n+import io.airlift.compress.MalformedInputException;\n+\n+import java.nio.ByteBuffer;\n+import java.util.zip.DataFormatException;\n+import java.util.zip.Inflater;\n+\n+public class InflateDecompressor\n+        implements Decompressor\n+{\n+    @Override\n+    public int decompress(byte[] input, int inputOffset, int inputLength, byte[] output, int outputOffset, int maxOutputLength)\n+            throws MalformedInputException\n+    {\n+        Inflater inflater = new Inflater(true);\n+        inflater.setInput(input, inputOffset, inputLength);\n+        int uncompressedLength = 0;\n+        try {\n+            uncompressedLength = inflater.inflate(output, outputOffset, maxOutputLength);\n+            if (!inflater.finished()) {\n+                throw new IllegalStateException(\"maxCompressedLength formula is incorrect, because deflate produced more data\");\n+            }\n+        }\n+        catch (DataFormatException e) {\n+            throw new MalformedInputException(inputOffset, e.getMessage());\n+        }\n+        finally {\n+            inflater.end();\n+        }\n+        return uncompressedLength;\n+    }\n+\n+    @Override\n+    public void decompress(ByteBuffer input, ByteBuffer output)\n+            throws MalformedInputException\n+    {\n+        if (input.isDirect() || output.isDirect()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf8bedf02869f5f41c2d3114d7a4133a314cf40"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNTUxMDk3OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFilePageSourceFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNDo0MDo0OFrOGQssUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNDo0MDo0OFrOGQssUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE2MjY0Mg==", "bodyText": "propagateIfPossible", "url": "https://github.com/prestodb/presto/pull/14461#discussion_r420162642", "createdAt": "2020-05-05T14:40:48Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/pagefile/PageFilePageSourceFactory.java", "diffHunk": "@@ -93,7 +87,21 @@ public PageFilePageSourceFactory(\n             throw new PrestoException(HIVE_CANNOT_OPEN_SPLIT, splitError(e, path, start, length), e);\n         }\n \n-        return Optional.of(pageFilePageSource);\n+        try {\n+            PageFilePageSource pageFilePageSource = new PageFilePageSource(inputStream, start, length, fileSize, blockEncodingSerde, columns);\n+            return Optional.of(pageFilePageSource);\n+        }\n+        catch (Throwable e) {\n+            try {\n+                inputStream.close();\n+            }\n+            catch (IOException ignored) {\n+            }\n+            if (e instanceof PrestoException) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "222f79cf5314ea7152cde7abecfac752dd792df8"}, "originalPosition": 64}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2835, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}