{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4MjIyNzQ5", "number": 15034, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QwMjoyNDowMlrOEbRV7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxODowODoxNVrOEfklXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MDMxMTUxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/server/SimpleHttpResponseHandlerStats.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QwMjoyNDowMlrOHFJeyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxODozMTo0MFrOHFxacg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE2MDI2Ng==", "bodyText": "should these counters be marked as volatile as well? Wondering if these are thread safe.", "url": "https://github.com/prestodb/presto/pull/15034#discussion_r475160266", "createdAt": "2020-08-23T02:24:02Z", "author": {"login": "ajaygeorge"}, "path": "presto-main/src/main/java/com/facebook/presto/server/SimpleHttpResponseHandlerStats.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.server;\n+\n+import org.weakref.jmx.Managed;\n+\n+import javax.annotation.concurrent.GuardedBy;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+public class SimpleHttpResponseHandlerStats\n+{\n+    private final IncrementalAverage responseSizeBytes = new IncrementalAverage();\n+    private long requestSuccess;\n+    private long requestFailure;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03e4ba25484976522f11060b6a85b8264330d85a"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgxNDUxNA==", "bodyText": "Good catch, this was an existing problem too.  Making them AtomicLong.", "url": "https://github.com/prestodb/presto/pull/15034#discussion_r475814514", "createdAt": "2020-08-24T18:31:40Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/main/java/com/facebook/presto/server/SimpleHttpResponseHandlerStats.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.server;\n+\n+import org.weakref.jmx.Managed;\n+\n+import javax.annotation.concurrent.GuardedBy;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+public class SimpleHttpResponseHandlerStats\n+{\n+    private final IncrementalAverage responseSizeBytes = new IncrementalAverage();\n+    private long requestSuccess;\n+    private long requestFailure;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE2MDI2Ng=="}, "originalCommit": {"oid": "03e4ba25484976522f11060b6a85b8264330d85a"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MDMxMzc5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/server/RequestErrorTracker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QwMjoyNzoyNlrOHFJfyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxODozNDo0OFrOHFxg2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE2MDUyMA==", "bodyText": "Since this a generic class now, wondering if this should be still private.\nIf I want to track errors in some other area other than tasks, I won't be able to get access to this class unless I write another utility method.", "url": "https://github.com/prestodb/presto/pull/15034#discussion_r475160520", "createdAt": "2020-08-23T02:27:26Z", "author": {"login": "ajaygeorge"}, "path": "presto-main/src/main/java/com/facebook/presto/server/RequestErrorTracker.java", "diffHunk": "@@ -47,27 +48,36 @@\n import static java.util.concurrent.TimeUnit.SECONDS;\n \n @ThreadSafe\n-class RequestErrorTracker\n+public class RequestErrorTracker\n {\n     private static final Logger log = Logger.get(RequestErrorTracker.class);\n \n-    private final TaskId taskId;\n-    private final URI taskUri;\n+    private final Object id;\n+    private final URI uri;\n+    private ErrorCodeSupplier errorCode;\n+    private String nodeErrorMessage;\n     private final ScheduledExecutorService scheduledExecutor;\n     private final String jobDescription;\n     private final Backoff backoff;\n \n     private final Queue<Throwable> errorsSinceLastSuccess = new ConcurrentLinkedQueue<>();\n \n-    public RequestErrorTracker(TaskId taskId, URI taskUri, Duration maxErrorDuration, ScheduledExecutorService scheduledExecutor, String jobDescription)\n+    private RequestErrorTracker(Object id, URI uri, ErrorCodeSupplier errorCode, String nodeErrorMessage, Duration maxErrorDuration, ScheduledExecutorService scheduledExecutor, String jobDescription)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03e4ba25484976522f11060b6a85b8264330d85a"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgxNjE1Mw==", "bodyText": "My intention was to only create this class via a factory.  The rationale is, there's only ever going to be a small handful of factory methods, and IMO the constructor is a bit unwieldy/difficult to configure..", "url": "https://github.com/prestodb/presto/pull/15034#discussion_r475816153", "createdAt": "2020-08-24T18:34:48Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/main/java/com/facebook/presto/server/RequestErrorTracker.java", "diffHunk": "@@ -47,27 +48,36 @@\n import static java.util.concurrent.TimeUnit.SECONDS;\n \n @ThreadSafe\n-class RequestErrorTracker\n+public class RequestErrorTracker\n {\n     private static final Logger log = Logger.get(RequestErrorTracker.class);\n \n-    private final TaskId taskId;\n-    private final URI taskUri;\n+    private final Object id;\n+    private final URI uri;\n+    private ErrorCodeSupplier errorCode;\n+    private String nodeErrorMessage;\n     private final ScheduledExecutorService scheduledExecutor;\n     private final String jobDescription;\n     private final Backoff backoff;\n \n     private final Queue<Throwable> errorsSinceLastSuccess = new ConcurrentLinkedQueue<>();\n \n-    public RequestErrorTracker(TaskId taskId, URI taskUri, Duration maxErrorDuration, ScheduledExecutorService scheduledExecutor, String jobDescription)\n+    private RequestErrorTracker(Object id, URI uri, ErrorCodeSupplier errorCode, String nodeErrorMessage, Duration maxErrorDuration, ScheduledExecutorService scheduledExecutor, String jobDescription)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE2MDUyMA=="}, "originalCommit": {"oid": "03e4ba25484976522f11060b6a85b8264330d85a"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MDMxNjAwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/server/SimpleHttpResponseHandlerStats.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QwMjozMTowNlrOHFJgxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxODoxMjowM1rOHFwtEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE2MDc3Mg==", "bodyText": "maybe rename this as a simpler HttpResponseStats ?", "url": "https://github.com/prestodb/presto/pull/15034#discussion_r475160772", "createdAt": "2020-08-23T02:31:06Z", "author": {"login": "ajaygeorge"}, "path": "presto-main/src/main/java/com/facebook/presto/server/SimpleHttpResponseHandlerStats.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.server;\n+\n+import org.weakref.jmx.Managed;\n+\n+import javax.annotation.concurrent.GuardedBy;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+public class SimpleHttpResponseHandlerStats", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03e4ba25484976522f11060b6a85b8264330d85a"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgwMjg5Nw==", "bodyText": "It is named by correlation to SimpleHttpResponseHandler", "url": "https://github.com/prestodb/presto/pull/15034#discussion_r475802897", "createdAt": "2020-08-24T18:12:03Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/main/java/com/facebook/presto/server/SimpleHttpResponseHandlerStats.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.server;\n+\n+import org.weakref.jmx.Managed;\n+\n+import javax.annotation.concurrent.GuardedBy;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+public class SimpleHttpResponseHandlerStats", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE2MDc3Mg=="}, "originalCommit": {"oid": "03e4ba25484976522f11060b6a85b8264330d85a"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzc3Mjg2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/server/remotetask/RemoteTaskStats.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMDozMDowNlrOHKIKng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMzo0NzoyNVrOHKN_hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM4MTU5OA==", "bodyText": "Should we use @Flatten instead of @Nested ? That would ensure that the metrics exported remain in the same format.", "url": "https://github.com/prestodb/presto/pull/15034#discussion_r480381598", "createdAt": "2020-08-31T20:30:06Z", "author": {"login": "mayankgarg1990"}, "path": "presto-main/src/main/java/com/facebook/presto/server/remotetask/RemoteTaskStats.java", "diffHunk": "@@ -72,9 +55,10 @@ public void updateWithoutPlanSize(long bytes)\n     }\n \n     @Managed\n-    public double getResponseSizeBytes()\n+    @Nested", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfeef74640041c48c6c35f530a1d0e644f66b0a5"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ3NzA2Mw==", "bodyText": "Good catch.", "url": "https://github.com/prestodb/presto/pull/15034#discussion_r480477063", "createdAt": "2020-08-31T23:47:25Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/main/java/com/facebook/presto/server/remotetask/RemoteTaskStats.java", "diffHunk": "@@ -72,9 +55,10 @@ public void updateWithoutPlanSize(long bytes)\n     }\n \n     @Managed\n-    public double getResponseSizeBytes()\n+    @Nested", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM4MTU5OA=="}, "originalCommit": {"oid": "dfeef74640041c48c6c35f530a1d0e644f66b0a5"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNTQwNTY2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/server/RequestErrorTracker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxODowNzo0OVrOHL7N_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxOToxMDowMlrOHL-g5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI2NjYyMw==", "bodyText": "curious if the motivation of moving taskId to a more general id can be explained a bit in PR?", "url": "https://github.com/prestodb/presto/pull/15034#discussion_r482266623", "createdAt": "2020-09-02T18:07:49Z", "author": {"login": "wenleix"}, "path": "presto-main/src/main/java/com/facebook/presto/server/RequestErrorTracker.java", "diffHunk": "@@ -47,27 +48,36 @@\n import static java.util.concurrent.TimeUnit.SECONDS;\n \n @ThreadSafe\n-class RequestErrorTracker\n+public class RequestErrorTracker\n {\n     private static final Logger log = Logger.get(RequestErrorTracker.class);\n \n-    private final TaskId taskId;\n-    private final URI taskUri;\n+    private final Object id;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff19508aa0622f6424156319d3f25049391558a4"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMyMDYxMw==", "bodyText": "Updated the PR description.", "url": "https://github.com/prestodb/presto/pull/15034#discussion_r482320613", "createdAt": "2020-09-02T19:10:02Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/main/java/com/facebook/presto/server/RequestErrorTracker.java", "diffHunk": "@@ -47,27 +48,36 @@\n import static java.util.concurrent.TimeUnit.SECONDS;\n \n @ThreadSafe\n-class RequestErrorTracker\n+public class RequestErrorTracker\n {\n     private static final Logger log = Logger.get(RequestErrorTracker.class);\n \n-    private final TaskId taskId;\n-    private final URI taskUri;\n+    private final Object id;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI2NjYyMw=="}, "originalCommit": {"oid": "ff19508aa0622f6424156319d3f25049391558a4"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNTQwNzAxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/server/RequestErrorTracker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxODowODoxNVrOHL7O1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxODoxMTo1N1rOHL7WjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI2NjgzNg==", "bodyText": "curious: why need to use ErrorCodeSupplier instead of ErrorCode?", "url": "https://github.com/prestodb/presto/pull/15034#discussion_r482266836", "createdAt": "2020-09-02T18:08:15Z", "author": {"login": "wenleix"}, "path": "presto-main/src/main/java/com/facebook/presto/server/RequestErrorTracker.java", "diffHunk": "@@ -47,27 +48,36 @@\n import static java.util.concurrent.TimeUnit.SECONDS;\n \n @ThreadSafe\n-class RequestErrorTracker\n+public class RequestErrorTracker\n {\n     private static final Logger log = Logger.get(RequestErrorTracker.class);\n \n-    private final TaskId taskId;\n-    private final URI taskUri;\n+    private final Object id;\n+    private final URI uri;\n+    private ErrorCodeSupplier errorCode;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff19508aa0622f6424156319d3f25049391558a4"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI2ODgxMg==", "bodyText": "Actually, never mind, StandardErrorCode implments ErrorCodeSupplier", "url": "https://github.com/prestodb/presto/pull/15034#discussion_r482268812", "createdAt": "2020-09-02T18:11:57Z", "author": {"login": "wenleix"}, "path": "presto-main/src/main/java/com/facebook/presto/server/RequestErrorTracker.java", "diffHunk": "@@ -47,27 +48,36 @@\n import static java.util.concurrent.TimeUnit.SECONDS;\n \n @ThreadSafe\n-class RequestErrorTracker\n+public class RequestErrorTracker\n {\n     private static final Logger log = Logger.get(RequestErrorTracker.class);\n \n-    private final TaskId taskId;\n-    private final URI taskUri;\n+    private final Object id;\n+    private final URI uri;\n+    private ErrorCodeSupplier errorCode;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI2NjgzNg=="}, "originalCommit": {"oid": "ff19508aa0622f6424156319d3f25049391558a4"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3755, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}