{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0NDA4MTQy", "number": 15236, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMzo0NDoxNlrOEoTDOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMjo1Mjo1NlrOEo2a9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNjkwNjE2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/TDigestFunctions.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMzo0NDoxNlrOHZTcQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMjoyMToxN1rOHaLEGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5NDk3Nw==", "bodyText": "The other functions in this class are all experimental. We should either make this function experimental, or have a plan to productionize the other functions.\nOn another point, since all functions are experimental, they're missing documentation.", "url": "https://github.com/prestodb/presto/pull/15236#discussion_r496294977", "createdAt": "2020-09-28T23:44:16Z", "author": {"login": "caithagoras"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/TDigestFunctions.java", "diffHunk": "@@ -73,4 +75,20 @@ public static Block quantilesAtValuesDouble(@SqlType(\"tdigest(double)\") Slice in\n         }\n         return output.build();\n     }\n+\n+    @ScalarFunction(\"scale_tdigest\")\n+    @Description(\"Scale a t-digest according to a new weight\")\n+    @SqlType(\"tdigest(double)\")\n+    public static Slice scaleTDigestDouble(@SqlType(\"tdigest(double)\") Slice input, @SqlType(StandardTypes.DOUBLE) double scale)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69618282ffcf35d0f9307200530fdf390623d013"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5NTQ2NA==", "bodyText": "@caithagoras we can probably remove the experimental tag now.", "url": "https://github.com/prestodb/presto/pull/15236#discussion_r496295464", "createdAt": "2020-09-28T23:45:50Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/TDigestFunctions.java", "diffHunk": "@@ -73,4 +75,20 @@ public static Block quantilesAtValuesDouble(@SqlType(\"tdigest(double)\") Slice in\n         }\n         return output.build();\n     }\n+\n+    @ScalarFunction(\"scale_tdigest\")\n+    @Description(\"Scale a t-digest according to a new weight\")\n+    @SqlType(\"tdigest(double)\")\n+    public static Slice scaleTDigestDouble(@SqlType(\"tdigest(double)\") Slice input, @SqlType(StandardTypes.DOUBLE) double scale)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5NDk3Nw=="}, "originalCommit": {"oid": "69618282ffcf35d0f9307200530fdf390623d013"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIwNjI5Ng==", "bodyText": "I added the EXPERIMENTAL tag to this new function (and will push a separate change to take it off all the functions here, and add documentation). I also removed the private scaleTDigest method since it isn't very relevant here where we support only one DOUBLE type\ncc: @tdcmeehan", "url": "https://github.com/prestodb/presto/pull/15236#discussion_r497206296", "createdAt": "2020-09-30T02:21:17Z", "author": {"login": "leonpanokarren"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/TDigestFunctions.java", "diffHunk": "@@ -73,4 +75,20 @@ public static Block quantilesAtValuesDouble(@SqlType(\"tdigest(double)\") Slice in\n         }\n         return output.build();\n     }\n+\n+    @ScalarFunction(\"scale_tdigest\")\n+    @Description(\"Scale a t-digest according to a new weight\")\n+    @SqlType(\"tdigest(double)\")\n+    public static Slice scaleTDigestDouble(@SqlType(\"tdigest(double)\") Slice input, @SqlType(StandardTypes.DOUBLE) double scale)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5NDk3Nw=="}, "originalCommit": {"oid": "69618282ffcf35d0f9307200530fdf390623d013"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMjcwMTMyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/tdigest/TDigest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMjo1Mjo1NlrOHaLhYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMzoyOTozOVrOHa5T2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIxMzc5Mw==", "bodyText": "We should probably compress first, then scale.  If there's any uncompressed weights then this won't factor those in.", "url": "https://github.com/prestodb/presto/pull/15236#discussion_r497213793", "createdAt": "2020-09-30T02:52:56Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/main/java/com/facebook/presto/tdigest/TDigest.java", "diffHunk": "@@ -665,6 +665,22 @@ public double getMax()\n         return max;\n     }\n \n+    /**\n+     * Scale all the counts by the given scale factor.\n+     */\n+    public void scale(double scaleFactor)\n+    {\n+        checkArgument(scaleFactor > 0, \"scale factor must be > 0\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53f888db9f9f771c2894df218e7ef73bc1e15166"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzk2Mzk5NA==", "bodyText": "Changed the order", "url": "https://github.com/prestodb/presto/pull/15236#discussion_r497963994", "createdAt": "2020-10-01T03:29:39Z", "author": {"login": "leonpanokarren"}, "path": "presto-main/src/main/java/com/facebook/presto/tdigest/TDigest.java", "diffHunk": "@@ -665,6 +665,22 @@ public double getMax()\n         return max;\n     }\n \n+    /**\n+     * Scale all the counts by the given scale factor.\n+     */\n+    public void scale(double scaleFactor)\n+    {\n+        checkArgument(scaleFactor > 0, \"scale factor must be > 0\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIxMzc5Mw=="}, "originalCommit": {"oid": "53f888db9f9f771c2894df218e7ef73bc1e15166"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3450, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}