{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4NzY0MDY5", "number": 15421, "title": "Reduce parquet metadata read request count", "bodyText": "Attempts to reduce the number of reads required for parquet footers by pre-reading up to 16KiB from the end of the file. If the metadata section ends up being < 16KiB long, then one additional round trip has been saved. When the metadata section is longer, the additional read occurs to load the remaining portion of the metadata section.\n== RELEASE NOTES ==\nHive Changes\n* Improve parquet metadata reader by pre-loading 16KiB from the end of the file. When the metadata section is smaller than the prefetch size, only a single read is performed compared to the previous two.", "createdAt": "2020-11-10T21:06:20Z", "url": "https://github.com/prestodb/presto/pull/15421", "merged": true, "mergeCommit": {"oid": "1b842223640f2e6595e72e5f8b26d0f74662b8f8"}, "closed": true, "closedAt": "2020-11-12T20:02:24Z", "author": {"login": "pettyjamesm"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdb2208gFqTUyOTM2ODkwNQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdb4Mu_gFqTUyOTQ0OTM0OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5MzY4OTA1", "url": "https://github.com/prestodb/presto/pull/15421#pullrequestreview-529368905", "createdAt": "2020-11-12T18:23:58Z", "commit": {"oid": "4aca1e11c46219fc92a9ec75fdb266eb91706309"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxODoyMzo1OVrOHyH9mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxODoyNzoyNFrOHyIF_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMyMTMwNg==", "bodyText": "static import wrappedBuffer?", "url": "https://github.com/prestodb/presto/pull/15421#discussion_r522321306", "createdAt": "2020-11-12T18:23:59Z", "author": {"login": "zhenxiao"}, "path": "presto-parquet/src/main/java/com/facebook/presto/parquet/cache/MetadataReader.java", "diffHunk": "@@ -56,15 +55,17 @@\n import java.util.Set;\n \n import static com.facebook.presto.parquet.ParquetValidationUtils.validateParquet;\n+import static java.lang.Math.min;\n import static java.lang.Math.toIntExact;\n import static java.nio.charset.StandardCharsets.US_ASCII;\n import static org.apache.parquet.format.Util.readFileMetaData;\n \n public final class MetadataReader\n         implements ParquetMetadataSource\n {\n-    private static final int PARQUET_METADATA_LENGTH = 4;\n-    private static final byte[] MAGIC = \"PAR1\".getBytes(US_ASCII);\n+    private static final Slice MAGIC = Slices.wrappedBuffer(\"PAR1\".getBytes(US_ASCII));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4aca1e11c46219fc92a9ec75fdb266eb91706309"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMyMjg2MA==", "bodyText": "either validateParquet(), or\nthrow ParquetCorruptionException after the if condition", "url": "https://github.com/prestodb/presto/pull/15421#discussion_r522322860", "createdAt": "2020-11-12T18:26:31Z", "author": {"login": "zhenxiao"}, "path": "presto-parquet/src/main/java/com/facebook/presto/parquet/cache/MetadataReader.java", "diffHunk": "@@ -87,24 +88,34 @@ public static ParquetFileMetadata readFooter(FSDataInputStream inputStream, Path\n         // 4 bytes: MetadataLength\n         // MAGIC\n \n-        validateParquet(fileSize >= MAGIC.length + PARQUET_METADATA_LENGTH + MAGIC.length, \"%s is not a valid Parquet File\", file);\n-        long metadataLengthIndex = fileSize - PARQUET_METADATA_LENGTH - MAGIC.length;\n+        validateParquet(fileSize >= MAGIC.length() + POST_SCRIPT_SIZE, \"%s is not a valid Parquet File\", file);\n \n-        InputStream footerStream = readFully(inputStream, metadataLengthIndex, PARQUET_METADATA_LENGTH + MAGIC.length);\n-        int metadataLength = readIntLittleEndian(footerStream);\n+        //  EXPECTED_FOOTER_SIZE is an int, so this will never fail\n+        byte[] buffer = new byte[toIntExact(min(fileSize, EXPECTED_FOOTER_SIZE))];\n+        inputStream.readFully(fileSize - buffer.length, buffer);\n+        Slice tailSlice = Slices.wrappedBuffer(buffer);\n \n-        byte[] magic = new byte[MAGIC.length];\n-        footerStream.read(magic);\n-        validateParquet(Arrays.equals(MAGIC, magic), \"Not valid Parquet file: %s expected magic number: %s got: %s\", file, Arrays.toString(MAGIC), Arrays.toString(magic));\n+        Slice magic = tailSlice.slice(tailSlice.length() - MAGIC.length(), MAGIC.length());\n+        if (!MAGIC.equals(magic)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4aca1e11c46219fc92a9ec75fdb266eb91706309"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMyMzIyMw==", "bodyText": "one line for validateParquet?", "url": "https://github.com/prestodb/presto/pull/15421#discussion_r522323223", "createdAt": "2020-11-12T18:27:02Z", "author": {"login": "zhenxiao"}, "path": "presto-parquet/src/main/java/com/facebook/presto/parquet/cache/MetadataReader.java", "diffHunk": "@@ -87,24 +88,34 @@ public static ParquetFileMetadata readFooter(FSDataInputStream inputStream, Path\n         // 4 bytes: MetadataLength\n         // MAGIC\n \n-        validateParquet(fileSize >= MAGIC.length + PARQUET_METADATA_LENGTH + MAGIC.length, \"%s is not a valid Parquet File\", file);\n-        long metadataLengthIndex = fileSize - PARQUET_METADATA_LENGTH - MAGIC.length;\n+        validateParquet(fileSize >= MAGIC.length() + POST_SCRIPT_SIZE, \"%s is not a valid Parquet File\", file);\n \n-        InputStream footerStream = readFully(inputStream, metadataLengthIndex, PARQUET_METADATA_LENGTH + MAGIC.length);\n-        int metadataLength = readIntLittleEndian(footerStream);\n+        //  EXPECTED_FOOTER_SIZE is an int, so this will never fail\n+        byte[] buffer = new byte[toIntExact(min(fileSize, EXPECTED_FOOTER_SIZE))];\n+        inputStream.readFully(fileSize - buffer.length, buffer);\n+        Slice tailSlice = Slices.wrappedBuffer(buffer);\n \n-        byte[] magic = new byte[MAGIC.length];\n-        footerStream.read(magic);\n-        validateParquet(Arrays.equals(MAGIC, magic), \"Not valid Parquet file: %s expected magic number: %s got: %s\", file, Arrays.toString(MAGIC), Arrays.toString(magic));\n+        Slice magic = tailSlice.slice(tailSlice.length() - MAGIC.length(), MAGIC.length());\n+        if (!MAGIC.equals(magic)) {\n+            validateParquet(MAGIC.equals(magic), \"Not valid Parquet file: %s expected magic number: %s got: %s\", file, Arrays.toString(MAGIC.getBytes()), Arrays.toString(magic.getBytes()));\n+        }\n+\n+        int metadataLength = tailSlice.getInt(tailSlice.length() - POST_SCRIPT_SIZE);\n+        int completeFooterSize = metadataLength + POST_SCRIPT_SIZE;\n+\n+        long metadataFileOffset = fileSize - completeFooterSize;\n+        validateParquet(metadataFileOffset >= MAGIC.length() && metadataFileOffset + POST_SCRIPT_SIZE < fileSize,\n+                \"Corrupted Parquet file: %s metadata index: %s out of range\", file, metadataFileOffset);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4aca1e11c46219fc92a9ec75fdb266eb91706309"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMyMzQ1Mw==", "bodyText": "s/newBuffer/footerBuffer/g", "url": "https://github.com/prestodb/presto/pull/15421#discussion_r522323453", "createdAt": "2020-11-12T18:27:24Z", "author": {"login": "zhenxiao"}, "path": "presto-parquet/src/main/java/com/facebook/presto/parquet/cache/MetadataReader.java", "diffHunk": "@@ -87,24 +88,34 @@ public static ParquetFileMetadata readFooter(FSDataInputStream inputStream, Path\n         // 4 bytes: MetadataLength\n         // MAGIC\n \n-        validateParquet(fileSize >= MAGIC.length + PARQUET_METADATA_LENGTH + MAGIC.length, \"%s is not a valid Parquet File\", file);\n-        long metadataLengthIndex = fileSize - PARQUET_METADATA_LENGTH - MAGIC.length;\n+        validateParquet(fileSize >= MAGIC.length() + POST_SCRIPT_SIZE, \"%s is not a valid Parquet File\", file);\n \n-        InputStream footerStream = readFully(inputStream, metadataLengthIndex, PARQUET_METADATA_LENGTH + MAGIC.length);\n-        int metadataLength = readIntLittleEndian(footerStream);\n+        //  EXPECTED_FOOTER_SIZE is an int, so this will never fail\n+        byte[] buffer = new byte[toIntExact(min(fileSize, EXPECTED_FOOTER_SIZE))];\n+        inputStream.readFully(fileSize - buffer.length, buffer);\n+        Slice tailSlice = Slices.wrappedBuffer(buffer);\n \n-        byte[] magic = new byte[MAGIC.length];\n-        footerStream.read(magic);\n-        validateParquet(Arrays.equals(MAGIC, magic), \"Not valid Parquet file: %s expected magic number: %s got: %s\", file, Arrays.toString(MAGIC), Arrays.toString(magic));\n+        Slice magic = tailSlice.slice(tailSlice.length() - MAGIC.length(), MAGIC.length());\n+        if (!MAGIC.equals(magic)) {\n+            validateParquet(MAGIC.equals(magic), \"Not valid Parquet file: %s expected magic number: %s got: %s\", file, Arrays.toString(MAGIC.getBytes()), Arrays.toString(magic.getBytes()));\n+        }\n+\n+        int metadataLength = tailSlice.getInt(tailSlice.length() - POST_SCRIPT_SIZE);\n+        int completeFooterSize = metadataLength + POST_SCRIPT_SIZE;\n+\n+        long metadataFileOffset = fileSize - completeFooterSize;\n+        validateParquet(metadataFileOffset >= MAGIC.length() && metadataFileOffset + POST_SCRIPT_SIZE < fileSize,\n+                \"Corrupted Parquet file: %s metadata index: %s out of range\", file, metadataFileOffset);\n+        //  Ensure the slice covers the entire metadata range\n+        if (tailSlice.length() < completeFooterSize) {\n+            byte[] newBuffer = new byte[completeFooterSize];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4aca1e11c46219fc92a9ec75fdb266eb91706309"}, "originalPosition": 71}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71a3a05ded1f63a4cb9b65b0a20e5646ed300107", "author": {"user": {"login": "pettyjamesm", "name": "James Petty"}}, "url": "https://github.com/prestodb/presto/commit/71a3a05ded1f63a4cb9b65b0a20e5646ed300107", "committedDate": "2020-11-12T18:33:42Z", "message": "Add pre-read hueristic to parquet MetadataReader\n\nAttempts to reduce the number of reads required for parquet footers\nby pre-reading up to 16KiB from the end of the file. If the metadata\nsection ends up being < 16KiB long, then one additional round trip\nhas been saved. When the metadata section is longer, the additional\nread occurs to load the remaining portion of the metadata section."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4aca1e11c46219fc92a9ec75fdb266eb91706309", "author": {"user": {"login": "pettyjamesm", "name": "James Petty"}}, "url": "https://github.com/prestodb/presto/commit/4aca1e11c46219fc92a9ec75fdb266eb91706309", "committedDate": "2020-11-10T20:50:55Z", "message": "Add pre-read hueristic to parquet MetadataReader\n\nAttempts to reduce the number of reads required for parquet footers\nby pre-reading up to 16KiB from the end of the file. If the metadata\nsection ends up being < 16KiB long, then one additional round trip\nhas been saved. When the metadata section is longer, the additional\nread occurs to load the remaining portion of the metadata section."}, "afterCommit": {"oid": "71a3a05ded1f63a4cb9b65b0a20e5646ed300107", "author": {"user": {"login": "pettyjamesm", "name": "James Petty"}}, "url": "https://github.com/prestodb/presto/commit/71a3a05ded1f63a4cb9b65b0a20e5646ed300107", "committedDate": "2020-11-12T18:33:42Z", "message": "Add pre-read hueristic to parquet MetadataReader\n\nAttempts to reduce the number of reads required for parquet footers\nby pre-reading up to 16KiB from the end of the file. If the metadata\nsection ends up being < 16KiB long, then one additional round trip\nhas been saved. When the metadata section is longer, the additional\nread occurs to load the remaining portion of the metadata section."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5NDQ5MzQ4", "url": "https://github.com/prestodb/presto/pull/15421#pullrequestreview-529449348", "createdAt": "2020-11-12T20:01:47Z", "commit": {"oid": "71a3a05ded1f63a4cb9b65b0a20e5646ed300107"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4685, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}