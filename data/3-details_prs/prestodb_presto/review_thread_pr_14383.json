{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyOTI4MDQ0", "number": 14383, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNDowOTo0NFrODx6BHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwMTo0NDoxNlrODyTh5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNjU3MzczOnYy", "diffSide": "RIGHT", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/file/TableMetadata.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNDowOTo0NFrOGFpFeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzoyNzowM1rOGGEEVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU2OTIwOQ==", "bodyText": "Shall we make the stack variable the same as the constructor param? Having one with Optional and the other not is kinda confusing. If empty list means no preferred sorting, then we can just drop Optional.", "url": "https://github.com/prestodb/presto/pull/14383#discussion_r408569209", "createdAt": "2020-04-15T04:09:44Z", "author": {"login": "highker"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/file/TableMetadata.java", "diffHunk": "@@ -75,7 +78,7 @@ public TableMetadata(\n         this.dataColumns = ImmutableList.copyOf(requireNonNull(dataColumns, \"dataColumns is null\"));\n         this.partitionColumns = ImmutableList.copyOf(requireNonNull(partitionColumns, \"partitionColumns is null\"));\n         this.parameters = ImmutableMap.copyOf(requireNonNull(parameters, \"parameters is null\"));\n-\n+        this.preferredOrderingColumns = ImmutableList.copyOf(requireNonNull(preferredOrderingColumns.orElse(ImmutableList.of()), \"preferredOrderingColumns is null\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e392fda382366040101fdf595cd27d8c78fe7c6"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAxMTI4NA==", "bodyText": "That was exactly what I started off with and then realized since it is also a JsonCreator, you will hit NPE when you decode something without this field :(\nEDIT: Added firstNonNull to handle this case :D", "url": "https://github.com/prestodb/presto/pull/14383#discussion_r409011284", "createdAt": "2020-04-15T17:27:03Z", "author": {"login": "shixuan-fan"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/file/TableMetadata.java", "diffHunk": "@@ -75,7 +78,7 @@ public TableMetadata(\n         this.dataColumns = ImmutableList.copyOf(requireNonNull(dataColumns, \"dataColumns is null\"));\n         this.partitionColumns = ImmutableList.copyOf(requireNonNull(partitionColumns, \"partitionColumns is null\"));\n         this.parameters = ImmutableMap.copyOf(requireNonNull(parameters, \"parameters is null\"));\n-\n+        this.preferredOrderingColumns = ImmutableList.copyOf(requireNonNull(preferredOrderingColumns.orElse(ImmutableList.of()), \"preferredOrderingColumns is null\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU2OTIwOQ=="}, "originalCommit": {"oid": "8e392fda382366040101fdf595cd27d8c78fe7c6"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNjU3NDQxOnYy", "diffSide": "RIGHT", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/file/TableMetadata.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNDoxMDowM1rOGFpF0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNDoxMDowM1rOGFpF0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU2OTI5Nw==", "bodyText": "We should just pass preferredOrderingColumns to make it consistent", "url": "https://github.com/prestodb/presto/pull/14383#discussion_r408569297", "createdAt": "2020-04-15T04:10:03Z", "author": {"login": "highker"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/file/TableMetadata.java", "diffHunk": "@@ -222,6 +232,7 @@ public TableMetadata withDataColumns(List<Column> dataColumns)\n                 parameters,\n                 storageFormat,\n                 bucketProperty,\n+                Optional.of(preferredOrderingColumns),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e392fda382366040101fdf595cd27d8c78fe7c6"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDYyNDkxOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwMDozNjowM1rOGGQXQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwMDozNjowM1rOGGQXQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIxMjczNw==", "bodyText": "Make \",\" a const and add a comment to state that comma is not a reserved keyword even with quotes (https://cwiki.apache.org/confluence/display/Hive/LanguageManual+DDL)", "url": "https://github.com/prestodb/presto/pull/14383#discussion_r409212737", "createdAt": "2020-04-16T00:36:03Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -2559,6 +2581,43 @@ private static HiveStorageFormat extractHiveStorageFormat(Table table)\n         throw new PrestoException(HIVE_UNSUPPORTED_FORMAT, format(\"Output format %s with SerDe %s is not supported\", outputFormat, serde));\n     }\n \n+    private static String encodePreferredOrderingColumns(List<SortingColumn> preferredOrderingColumns)\n+    {\n+        return Joiner.on(',').join(preferredOrderingColumns.stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31d5cbe4fb62efe29aa12c5d3d0c3d53ca081c90"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDYzNDcwOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveWriterFactory.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwMDo0MTowNFrOGGQdAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwMDo1MDo1OFrOGGQn9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIxNDIxMQ==", "bodyText": "what if two writers write to the same fileNumber?", "url": "https://github.com/prestodb/presto/pull/14383#discussion_r409214211", "createdAt": "2020-04-16T00:41:04Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveWriterFactory.java", "diffHunk": "@@ -366,11 +369,10 @@ public HiveWriter createWriter(Page partitionColumns, int position, OptionalInt\n         }\n \n         if (sortingFileWriterFactory.isPresent()) {\n-            checkState(bucketNumber.isPresent(), \"missing bucket number for sorted table write\");\n             hiveFileWriter = sortingFileWriterFactory.get().createSortingFileWriter(\n                     path,\n                     hiveFileWriter,\n-                    bucketNumber.getAsInt(),\n+                    bucketNumber.orElse(random.nextInt()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31d5cbe4fb62efe29aa12c5d3d0c3d53ca081c90"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIxNjE4Nw==", "bodyText": "That is okay because this fileNumber is only used to determine which temp subdirectory we should write temp file into.\nFrom another perspective, temp file name is generated by appending the generated prefix with uuid, so we would not write to the same file.", "url": "https://github.com/prestodb/presto/pull/14383#discussion_r409216187", "createdAt": "2020-04-16T00:48:16Z", "author": {"login": "shixuan-fan"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveWriterFactory.java", "diffHunk": "@@ -366,11 +369,10 @@ public HiveWriter createWriter(Page partitionColumns, int position, OptionalInt\n         }\n \n         if (sortingFileWriterFactory.isPresent()) {\n-            checkState(bucketNumber.isPresent(), \"missing bucket number for sorted table write\");\n             hiveFileWriter = sortingFileWriterFactory.get().createSortingFileWriter(\n                     path,\n                     hiveFileWriter,\n-                    bucketNumber.getAsInt(),\n+                    bucketNumber.orElse(random.nextInt()),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIxNDIxMQ=="}, "originalCommit": {"oid": "31d5cbe4fb62efe29aa12c5d3d0c3d53ca081c90"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIxNjc4MQ==", "bodyText": "To make it less confusing, maybe we should directly pass the subdirectory number instead of file number?", "url": "https://github.com/prestodb/presto/pull/14383#discussion_r409216781", "createdAt": "2020-04-16T00:50:12Z", "author": {"login": "shixuan-fan"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveWriterFactory.java", "diffHunk": "@@ -366,11 +369,10 @@ public HiveWriter createWriter(Page partitionColumns, int position, OptionalInt\n         }\n \n         if (sortingFileWriterFactory.isPresent()) {\n-            checkState(bucketNumber.isPresent(), \"missing bucket number for sorted table write\");\n             hiveFileWriter = sortingFileWriterFactory.get().createSortingFileWriter(\n                     path,\n                     hiveFileWriter,\n-                    bucketNumber.getAsInt(),\n+                    bucketNumber.orElse(random.nextInt()),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIxNDIxMQ=="}, "originalCommit": {"oid": "31d5cbe4fb62efe29aa12c5d3d0c3d53ca081c90"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIxNzAxMw==", "bodyText": "It might be better to make a comment on this and make sure the number is between 0 to some small numbers (rather than 2^31).", "url": "https://github.com/prestodb/presto/pull/14383#discussion_r409217013", "createdAt": "2020-04-16T00:50:58Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveWriterFactory.java", "diffHunk": "@@ -366,11 +369,10 @@ public HiveWriter createWriter(Page partitionColumns, int position, OptionalInt\n         }\n \n         if (sortingFileWriterFactory.isPresent()) {\n-            checkState(bucketNumber.isPresent(), \"missing bucket number for sorted table write\");\n             hiveFileWriter = sortingFileWriterFactory.get().createSortingFileWriter(\n                     path,\n                     hiveFileWriter,\n-                    bucketNumber.getAsInt(),\n+                    bucketNumber.orElse(random.nextInt()),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIxNDIxMQ=="}, "originalCommit": {"oid": "31d5cbe4fb62efe29aa12c5d3d0c3d53ca081c90"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDczODA1OnYy", "diffSide": "RIGHT", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/thrift/ThriftMetastoreUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwMTozNjoyNVrOGGRYrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMzozMDo0OVrOGG6vZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIyOTQ4Nw==", "bodyText": "Can it be null (similarly to serdeInfo.getParameters()?)", "url": "https://github.com/prestodb/presto/pull/14383#discussion_r409229487", "createdAt": "2020-04-16T01:36:25Z", "author": {"login": "arhimondr"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/thrift/ThriftMetastoreUtil.java", "diffHunk": "@@ -625,7 +625,8 @@ public static void fromMetastoreApiStorageDescriptor(StorageDescriptor storageDe\n                 .setLocation(nullToEmpty(storageDescriptor.getLocation()))\n                 .setBucketProperty(HiveBucketProperty.fromStorageDescriptor(storageDescriptor, tablePartitionName))\n                 .setSkewed(storageDescriptor.isSetSkewedInfo() && storageDescriptor.getSkewedInfo().isSetSkewedColNames() && !storageDescriptor.getSkewedInfo().getSkewedColNames().isEmpty())\n-                .setSerdeParameters(serdeInfo.getParameters() == null ? ImmutableMap.of() : serdeInfo.getParameters());\n+                .setSerdeParameters(serdeInfo.getParameters() == null ? ImmutableMap.of() : serdeInfo.getParameters())\n+                .setParameters(storageDescriptor.getParameters());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31d5cbe4fb62efe29aa12c5d3d0c3d53ca081c90"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkwNzA0Ng==", "bodyText": "Good point. I would err on the safe side and do similar null handling.", "url": "https://github.com/prestodb/presto/pull/14383#discussion_r409907046", "createdAt": "2020-04-16T23:30:49Z", "author": {"login": "shixuan-fan"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/thrift/ThriftMetastoreUtil.java", "diffHunk": "@@ -625,7 +625,8 @@ public static void fromMetastoreApiStorageDescriptor(StorageDescriptor storageDe\n                 .setLocation(nullToEmpty(storageDescriptor.getLocation()))\n                 .setBucketProperty(HiveBucketProperty.fromStorageDescriptor(storageDescriptor, tablePartitionName))\n                 .setSkewed(storageDescriptor.isSetSkewedInfo() && storageDescriptor.getSkewedInfo().isSetSkewedColNames() && !storageDescriptor.getSkewedInfo().getSkewedColNames().isEmpty())\n-                .setSerdeParameters(serdeInfo.getParameters() == null ? ImmutableMap.of() : serdeInfo.getParameters());\n+                .setSerdeParameters(serdeInfo.getParameters() == null ? ImmutableMap.of() : serdeInfo.getParameters())\n+                .setParameters(storageDescriptor.getParameters());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIyOTQ4Nw=="}, "originalCommit": {"oid": "31d5cbe4fb62efe29aa12c5d3d0c3d53ca081c90"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDc0OTUxOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwMTo0MjoxNlrOGGRfPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwMTo0MjoxNlrOGGRfPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIzMTE2Ng==", "bodyText": "I would recommend adding a unit test. Try to check for corner cases.", "url": "https://github.com/prestodb/presto/pull/14383#discussion_r409231166", "createdAt": "2020-04-16T01:42:16Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -2559,6 +2581,43 @@ private static HiveStorageFormat extractHiveStorageFormat(Table table)\n         throw new PrestoException(HIVE_UNSUPPORTED_FORMAT, format(\"Output format %s with SerDe %s is not supported\", outputFormat, serde));\n     }\n \n+    private static String encodePreferredOrderingColumns(List<SortingColumn> preferredOrderingColumns)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31d5cbe4fb62efe29aa12c5d3d0c3d53ca081c90"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDc1MDg4OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwMTo0MzowMlrOGGRgEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwMTo0MzowMlrOGGRgEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIzMTM3Nw==", "bodyText": "upper?", "url": "https://github.com/prestodb/presto/pull/14383#discussion_r409231377", "createdAt": "2020-04-16T01:43:02Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -2559,6 +2581,43 @@ private static HiveStorageFormat extractHiveStorageFormat(Table table)\n         throw new PrestoException(HIVE_UNSUPPORTED_FORMAT, format(\"Output format %s with SerDe %s is not supported\", outputFormat, serde));\n     }\n \n+    private static String encodePreferredOrderingColumns(List<SortingColumn> preferredOrderingColumns)\n+    {\n+        return Joiner.on(',').join(preferredOrderingColumns.stream()\n+                .map(HiveMetadata::sortingColumnToString)\n+                .collect(toImmutableList()));\n+    }\n+\n+    private static List<SortingColumn> decodePreferredOrderingColumnsFromStorage(Storage storage)\n+    {\n+        if (!storage.getParameters().containsKey(PREFERRED_ORDERING_COLUMNS)) {\n+            return ImmutableList.of();\n+        }\n+\n+        return Splitter.on(',').trimResults().omitEmptyStrings().splitToList(storage.getParameters().get(PREFERRED_ORDERING_COLUMNS)).stream()\n+                .map(HiveMetadata::sortingColumnFromString)\n+                .collect(toImmutableList());\n+    }\n+\n+    private static SortingColumn sortingColumnFromString(String name)\n+    {\n+        SortingColumn.Order order = ASCENDING;\n+        String lower = name.toUpperCase(ENGLISH);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31d5cbe4fb62efe29aa12c5d3d0c3d53ca081c90"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDc1MTg5OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwMTo0MzoyOVrOGGRgnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMToxMDowOVrOGG8e9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIzMTUxNg==", "bodyText": "Why do we still need trim?", "url": "https://github.com/prestodb/presto/pull/14383#discussion_r409231516", "createdAt": "2020-04-16T01:43:29Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -2559,6 +2581,43 @@ private static HiveStorageFormat extractHiveStorageFormat(Table table)\n         throw new PrestoException(HIVE_UNSUPPORTED_FORMAT, format(\"Output format %s with SerDe %s is not supported\", outputFormat, serde));\n     }\n \n+    private static String encodePreferredOrderingColumns(List<SortingColumn> preferredOrderingColumns)\n+    {\n+        return Joiner.on(',').join(preferredOrderingColumns.stream()\n+                .map(HiveMetadata::sortingColumnToString)\n+                .collect(toImmutableList()));\n+    }\n+\n+    private static List<SortingColumn> decodePreferredOrderingColumnsFromStorage(Storage storage)\n+    {\n+        if (!storage.getParameters().containsKey(PREFERRED_ORDERING_COLUMNS)) {\n+            return ImmutableList.of();\n+        }\n+\n+        return Splitter.on(',').trimResults().omitEmptyStrings().splitToList(storage.getParameters().get(PREFERRED_ORDERING_COLUMNS)).stream()\n+                .map(HiveMetadata::sortingColumnFromString)\n+                .collect(toImmutableList());\n+    }\n+\n+    private static SortingColumn sortingColumnFromString(String name)\n+    {\n+        SortingColumn.Order order = ASCENDING;\n+        String lower = name.toUpperCase(ENGLISH);\n+        if (lower.endsWith(\" ASC\")) {\n+            name = name.substring(0, name.length() - 4).trim();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31d5cbe4fb62efe29aa12c5d3d0c3d53ca081c90"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkwNzgwNA==", "bodyText": "These two methods are actually copied from HiveTableProperties#sortingColumnFromString and HiveTableProperties#sortingColumnToString. We could also make it a public static method so we don't need to copy around. What do you think?\nSeparating them has the benefit of not binding the SerDe to how we specify them in table properties, though that might mean some code duplication.", "url": "https://github.com/prestodb/presto/pull/14383#discussion_r409907804", "createdAt": "2020-04-16T23:33:16Z", "author": {"login": "shixuan-fan"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -2559,6 +2581,43 @@ private static HiveStorageFormat extractHiveStorageFormat(Table table)\n         throw new PrestoException(HIVE_UNSUPPORTED_FORMAT, format(\"Output format %s with SerDe %s is not supported\", outputFormat, serde));\n     }\n \n+    private static String encodePreferredOrderingColumns(List<SortingColumn> preferredOrderingColumns)\n+    {\n+        return Joiner.on(',').join(preferredOrderingColumns.stream()\n+                .map(HiveMetadata::sortingColumnToString)\n+                .collect(toImmutableList()));\n+    }\n+\n+    private static List<SortingColumn> decodePreferredOrderingColumnsFromStorage(Storage storage)\n+    {\n+        if (!storage.getParameters().containsKey(PREFERRED_ORDERING_COLUMNS)) {\n+            return ImmutableList.of();\n+        }\n+\n+        return Splitter.on(',').trimResults().omitEmptyStrings().splitToList(storage.getParameters().get(PREFERRED_ORDERING_COLUMNS)).stream()\n+                .map(HiveMetadata::sortingColumnFromString)\n+                .collect(toImmutableList());\n+    }\n+\n+    private static SortingColumn sortingColumnFromString(String name)\n+    {\n+        SortingColumn.Order order = ASCENDING;\n+        String lower = name.toUpperCase(ENGLISH);\n+        if (lower.endsWith(\" ASC\")) {\n+            name = name.substring(0, name.length() - 4).trim();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIzMTUxNg=="}, "originalCommit": {"oid": "31d5cbe4fb62efe29aa12c5d3d0c3d53ca081c90"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkzNTYwNQ==", "bodyText": "Per offline discussion, we moved these methods into SortingColumn.", "url": "https://github.com/prestodb/presto/pull/14383#discussion_r409935605", "createdAt": "2020-04-17T01:10:09Z", "author": {"login": "shixuan-fan"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -2559,6 +2581,43 @@ private static HiveStorageFormat extractHiveStorageFormat(Table table)\n         throw new PrestoException(HIVE_UNSUPPORTED_FORMAT, format(\"Output format %s with SerDe %s is not supported\", outputFormat, serde));\n     }\n \n+    private static String encodePreferredOrderingColumns(List<SortingColumn> preferredOrderingColumns)\n+    {\n+        return Joiner.on(',').join(preferredOrderingColumns.stream()\n+                .map(HiveMetadata::sortingColumnToString)\n+                .collect(toImmutableList()));\n+    }\n+\n+    private static List<SortingColumn> decodePreferredOrderingColumnsFromStorage(Storage storage)\n+    {\n+        if (!storage.getParameters().containsKey(PREFERRED_ORDERING_COLUMNS)) {\n+            return ImmutableList.of();\n+        }\n+\n+        return Splitter.on(',').trimResults().omitEmptyStrings().splitToList(storage.getParameters().get(PREFERRED_ORDERING_COLUMNS)).stream()\n+                .map(HiveMetadata::sortingColumnFromString)\n+                .collect(toImmutableList());\n+    }\n+\n+    private static SortingColumn sortingColumnFromString(String name)\n+    {\n+        SortingColumn.Order order = ASCENDING;\n+        String lower = name.toUpperCase(ENGLISH);\n+        if (lower.endsWith(\" ASC\")) {\n+            name = name.substring(0, name.length() - 4).trim();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIzMTUxNg=="}, "originalCommit": {"oid": "31d5cbe4fb62efe29aa12c5d3d0c3d53ca081c90"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDc1MzY0OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwMTo0NDoxNlrOGGRhmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwMTo0NDoxNlrOGGRhmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIzMTc3MQ==", "bodyText": "Maybe also specify ASC explicitly to be consistent", "url": "https://github.com/prestodb/presto/pull/14383#discussion_r409231771", "createdAt": "2020-04-16T01:44:16Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -2559,6 +2581,43 @@ private static HiveStorageFormat extractHiveStorageFormat(Table table)\n         throw new PrestoException(HIVE_UNSUPPORTED_FORMAT, format(\"Output format %s with SerDe %s is not supported\", outputFormat, serde));\n     }\n \n+    private static String encodePreferredOrderingColumns(List<SortingColumn> preferredOrderingColumns)\n+    {\n+        return Joiner.on(',').join(preferredOrderingColumns.stream()\n+                .map(HiveMetadata::sortingColumnToString)\n+                .collect(toImmutableList()));\n+    }\n+\n+    private static List<SortingColumn> decodePreferredOrderingColumnsFromStorage(Storage storage)\n+    {\n+        if (!storage.getParameters().containsKey(PREFERRED_ORDERING_COLUMNS)) {\n+            return ImmutableList.of();\n+        }\n+\n+        return Splitter.on(',').trimResults().omitEmptyStrings().splitToList(storage.getParameters().get(PREFERRED_ORDERING_COLUMNS)).stream()\n+                .map(HiveMetadata::sortingColumnFromString)\n+                .collect(toImmutableList());\n+    }\n+\n+    private static SortingColumn sortingColumnFromString(String name)\n+    {\n+        SortingColumn.Order order = ASCENDING;\n+        String lower = name.toUpperCase(ENGLISH);\n+        if (lower.endsWith(\" ASC\")) {\n+            name = name.substring(0, name.length() - 4).trim();\n+        }\n+        else if (lower.endsWith(\" DESC\")) {\n+            name = name.substring(0, name.length() - 5).trim();\n+            order = DESCENDING;\n+        }\n+        return new SortingColumn(name, order);\n+    }\n+\n+    private static String sortingColumnToString(SortingColumn column)\n+    {\n+        return column.getColumnName() + ((column.getOrder() == DESCENDING) ? \" DESC\" : \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31d5cbe4fb62efe29aa12c5d3d0c3d53ca081c90"}, "originalPosition": 151}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2781, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}