{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzNzgxOTQ4", "number": 14485, "title": "Fix partitioned spatial joins with small spatial index", "bodyText": "In a partitioned spatial join, rows with geometries are assigned 0, 1, or\nmore partition indexes via the KdbTree spatial partition.  The geometry\nis assigned one index for each leaf node rectangle it intersects.\nCurrently, if a geometry is outside the bounding box of a KdbTree, it is\ndropped: it's assigned an empty partition index array, which is\nunnested, resulting in the row being dropped.  This can be an efficiency\nmeasure: if one side of the join is much smaller than the other, then\nthe bounds will drop many rows before they are sent to the join worker.\nHowever, if the bounds are less than both the build- and probe-side of\nthe join, then rows that would have matched in a non-partitioned join\nwill be dropped when you partition the join.  This makes the correctness\nof the partitioned join dependent on the partition chosen, which can\nlead to some surprising output changes that could be reasonably viewed\nas data loss.\nThis change makes the KdbTree \"open\": its outer boundaries extend to\ninfinity.  This means all points in the plane belong to exactly one leaf node\nof the KdbTree.\n== RELEASE NOTES ==\n\nGeospatial Changes\n* Allow geometries outside of the spatial partitioning to match in a partitioned spatial join.", "createdAt": "2020-05-05T22:20:27Z", "url": "https://github.com/prestodb/presto/pull/14485", "merged": true, "mergeCommit": {"oid": "63565a9381adf51422d083a64e2602bed11f733f"}, "closed": true, "closedAt": "2020-10-07T14:38:19Z", "author": {"login": "jagill"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcet10DgFqTQwNjkyMTcyNA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdPq8NygFqTUwMjQ0NDgyOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2OTIxNzI0", "url": "https://github.com/prestodb/presto/pull/14485#pullrequestreview-406921724", "createdAt": "2020-05-06T19:28:19Z", "commit": {"oid": "586775590883cb09ad8d7f6c27d3f4fc6aed74c7"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3MDIwMDY5", "url": "https://github.com/prestodb/presto/pull/14485#pullrequestreview-407020069", "createdAt": "2020-05-06T22:04:56Z", "commit": {"oid": "3fcc79bf9f61200d7cef1ed8f9bdffbc83ff222a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMjowNDo1NlrOGRnGNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMjowNDo1NlrOGRnGNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTExOTU0MQ==", "bodyText": "The implementation doesn't actually allow this yet", "url": "https://github.com/prestodb/presto/pull/14485#discussion_r421119541", "createdAt": "2020-05-06T22:04:56Z", "author": {"login": "aweisberg"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/ExtractSpatialJoins.java", "diffHunk": "@@ -456,6 +460,41 @@ else if (alignment < 0) {\n                 kdbTree.map(KdbTreeUtils::toJson)));\n     }\n \n+    private static boolean isSphericalJoin(Metadata metadata, RowExpression firstArgument, RowExpression secondArgument)\n+    {\n+        Type sphericalGeographyType = metadata.getType(SPHERICAL_GEOGRAPHY_TYPE_SIGNATURE);\n+        return firstArgument.getType().equals(sphericalGeographyType) || secondArgument.getType().equals(sphericalGeographyType);\n+    }\n+\n+    private static boolean canPartitionSpatialJoin(JoinNode joinNode)\n+    {\n+        /*\n+         * A fundamental limitation in distributing joins (broadcast or partitioned)\n+         * is when a side is an outer join, and a row in that side is on more than one worker.\n+         * This is because you cannot determine if that row has no matches given the\n+         * local information (another worker may have found a match), so the worker\n+         * doesn't know whether to emit a NULL for the non-match.\n+         *\n+         * This can happen if:\n+         * 1. A side is broadcast, and it's OUTER on that side (including FULL).\n+         * 2. A side is partitioned, the object is extended (ie, not a Point),\n+         *    and it's OUTER on that side (including FULL).\n+         *\n+         * We assume that the right node is the build side.  The CBO is disabled\n+         * for spatial joins, so this should be a good assumption.  Then we have:\n+         * 1. INNER joins are OK.\n+         * 2. LEFT joins when the left node is a Point are OK.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fcc79bf9f61200d7cef1ed8f9bdffbc83ff222a"}, "originalPosition": 84}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3MDMxNzU1", "url": "https://github.com/prestodb/presto/pull/14485#pullrequestreview-407031755", "createdAt": "2020-05-06T22:30:15Z", "commit": {"oid": "79a9c8a705b1c3875435759ec0b97c2783bdde28"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMjozMDoxNVrOGRnt3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMjozMDoxNVrOGRnt3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEyOTY5NA==", "bodyText": "Comment is now wrong", "url": "https://github.com/prestodb/presto/pull/14485#discussion_r421129694", "createdAt": "2020-05-06T22:30:15Z", "author": {"login": "aweisberg"}, "path": "presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/SpatialPartitioningInternalAggregateFunction.java", "diffHunk": "@@ -101,7 +101,7 @@ public static void output(SpatialPartitioningState state, BlockBuilder out)\n         Rectangle envelope = state.getExtent();\n \n         // Add a small buffer on the right and upper sides", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79a9c8a705b1c3875435759ec0b97c2783bdde28"}, "originalPosition": 3}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3MDY4NDA0", "url": "https://github.com/prestodb/presto/pull/14485#pullrequestreview-407068404", "createdAt": "2020-05-07T00:08:27Z", "commit": {"oid": "586775590883cb09ad8d7f6c27d3f4fc6aed74c7"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "586775590883cb09ad8d7f6c27d3f4fc6aed74c7", "author": {"user": {"login": "jagill", "name": "James Gill"}}, "url": "https://github.com/prestodb/presto/commit/586775590883cb09ad8d7f6c27d3f4fc6aed74c7", "committedDate": "2020-05-05T22:06:57Z", "message": "Assign partition index to geometries outside of KdbTree\n\nCurrently, if a geometry is outside the bounding box of a KdbTree, it is\ndropped: it's assigned an empty partition index array, which is\nunnested, resulting in the row being dropped.  This can be an efficiency\nmeasure: if one side of the join is much smaller than the other, then\nthe bounds will drop many rows before they are sent to the join worker.\n\nHowever, if the bounds are less than both the build- and probe-side of\nthe join, then rows that would have matched in a non-partitioned join\nwill be dropped when you partition the join.  This makes the correctness\nof the partitioned join dependent on the partition chosen, which can\nlead to some surprising output changes that could be reasonably viewed\nas data loss.\n\nThis change adds a special partition index (-1) to any geometry that\nintersects the outside of the KdbTree: in effect, making one additional\n\"outside\" partition.  This trades a potential correctness issue for one\nof skew, that in the worst case will fail the query.  The user can then\nmake a more appropriate spatial partitioning."}, "afterCommit": {"oid": "022badef3843f8317345b4bfa0f3be0d696527bb", "author": {"user": {"login": "jagill", "name": "James Gill"}}, "url": "https://github.com/prestodb/presto/commit/022badef3843f8317345b4bfa0f3be0d696527bb", "committedDate": "2020-05-17T14:07:14Z", "message": "Assign partition index to geometries outside of KdbTree\n\nCurrently, if a geometry is outside the bounding box of a KdbTree, it is\ndropped: it's assigned an empty partition index array, which is\nunnested, resulting in the row being dropped.  This can be an efficiency\nmeasure: if one side of the join is much smaller than the other, then\nthe bounds will drop many rows before they are sent to the join worker.\n\nHowever, if the bounds are less than both the build- and probe-side of\nthe join, then rows that would have matched in a non-partitioned join\nwill be dropped when you partition the join.  This makes the correctness\nof the partitioned join dependent on the partition chosen, which can\nlead to some surprising output changes that could be reasonably viewed\nas data loss.\n\nThis change adds a special partition index (-1) to any geometry that\nintersects the outside of the KdbTree: in effect, making one additional\n\"outside\" partition.  This trades a potential correctness issue for one\nof skew, that in the worst case will fail the query.  The user can then\nmake a more appropriate spatial partitioning."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "022badef3843f8317345b4bfa0f3be0d696527bb", "author": {"user": {"login": "jagill", "name": "James Gill"}}, "url": "https://github.com/prestodb/presto/commit/022badef3843f8317345b4bfa0f3be0d696527bb", "committedDate": "2020-05-17T14:07:14Z", "message": "Assign partition index to geometries outside of KdbTree\n\nCurrently, if a geometry is outside the bounding box of a KdbTree, it is\ndropped: it's assigned an empty partition index array, which is\nunnested, resulting in the row being dropped.  This can be an efficiency\nmeasure: if one side of the join is much smaller than the other, then\nthe bounds will drop many rows before they are sent to the join worker.\n\nHowever, if the bounds are less than both the build- and probe-side of\nthe join, then rows that would have matched in a non-partitioned join\nwill be dropped when you partition the join.  This makes the correctness\nof the partitioned join dependent on the partition chosen, which can\nlead to some surprising output changes that could be reasonably viewed\nas data loss.\n\nThis change adds a special partition index (-1) to any geometry that\nintersects the outside of the KdbTree: in effect, making one additional\n\"outside\" partition.  This trades a potential correctness issue for one\nof skew, that in the worst case will fail the query.  The user can then\nmake a more appropriate spatial partitioning."}, "afterCommit": {"oid": "309b201d8dcbae131946b293a84fec23b76d7f2a", "author": {"user": {"login": "jagill", "name": "James Gill"}}, "url": "https://github.com/prestodb/presto/commit/309b201d8dcbae131946b293a84fec23b76d7f2a", "committedDate": "2020-06-02T13:06:09Z", "message": "Assign partition index to geometries outside of KdbTree\n\nCurrently, if a geometry is outside the bounding box of a KdbTree, it is\ndropped: it's assigned an empty partition index array, which is\nunnested, resulting in the row being dropped.  This can be an efficiency\nmeasure: if one side of the join is much smaller than the other, then\nthe bounds will drop many rows before they are sent to the join worker.\n\nHowever, if the bounds are less than both the build- and probe-side of\nthe join, then rows that would have matched in a non-partitioned join\nwill be dropped when you partition the join.  This makes the correctness\nof the partitioned join dependent on the partition chosen, which can\nlead to some surprising output changes that could be reasonably viewed\nas data loss.\n\nThis commit changes the bounding box of the KdbTree to extend from\n-Infinity to +Infinity, so that all (non-empty) geometries will get\nat least one partition.\n\nAdditionally, make the internal intersection/containement checks for\neach KdbTree node use strict equality for upper/right borders, which\nmakes points intersect only one node."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "309b201d8dcbae131946b293a84fec23b76d7f2a", "author": {"user": {"login": "jagill", "name": "James Gill"}}, "url": "https://github.com/prestodb/presto/commit/309b201d8dcbae131946b293a84fec23b76d7f2a", "committedDate": "2020-06-02T13:06:09Z", "message": "Assign partition index to geometries outside of KdbTree\n\nCurrently, if a geometry is outside the bounding box of a KdbTree, it is\ndropped: it's assigned an empty partition index array, which is\nunnested, resulting in the row being dropped.  This can be an efficiency\nmeasure: if one side of the join is much smaller than the other, then\nthe bounds will drop many rows before they are sent to the join worker.\n\nHowever, if the bounds are less than both the build- and probe-side of\nthe join, then rows that would have matched in a non-partitioned join\nwill be dropped when you partition the join.  This makes the correctness\nof the partitioned join dependent on the partition chosen, which can\nlead to some surprising output changes that could be reasonably viewed\nas data loss.\n\nThis commit changes the bounding box of the KdbTree to extend from\n-Infinity to +Infinity, so that all (non-empty) geometries will get\nat least one partition.\n\nAdditionally, make the internal intersection/containement checks for\neach KdbTree node use strict equality for upper/right borders, which\nmakes points intersect only one node."}, "afterCommit": {"oid": "bfb52c6f55a8a75cb87c5b5e79a4951535558b70", "author": {"user": {"login": "jagill", "name": "James Gill"}}, "url": "https://github.com/prestodb/presto/commit/bfb52c6f55a8a75cb87c5b5e79a4951535558b70", "committedDate": "2020-06-02T15:22:02Z", "message": "Assign partition index to geometries outside of KdbTree\n\nCurrently, if a geometry is outside the bounding box of a KdbTree, it is\ndropped: it's assigned an empty partition index array, which is\nunnested, resulting in the row being dropped.  This can be an efficiency\nmeasure: if one side of the join is much smaller than the other, then\nthe bounds will drop many rows before they are sent to the join worker.\n\nHowever, if the bounds are less than both the build- and probe-side of\nthe join, then rows that would have matched in a non-partitioned join\nwill be dropped when you partition the join.  This makes the correctness\nof the partitioned join dependent on the partition chosen, which can\nlead to some surprising output changes that could be reasonably viewed\nas data loss.\n\nThis commit changes the bounding box of the KdbTree to extend from\n-Infinity to +Infinity, so that all (non-empty) geometries will get\nat least one partition.\n\nAdditionally, make the internal intersection/containement checks for\neach KdbTree node use strict equality for upper/right borders, which\nmakes points intersect only one node."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bfb52c6f55a8a75cb87c5b5e79a4951535558b70", "author": {"user": {"login": "jagill", "name": "James Gill"}}, "url": "https://github.com/prestodb/presto/commit/bfb52c6f55a8a75cb87c5b5e79a4951535558b70", "committedDate": "2020-06-02T15:22:02Z", "message": "Assign partition index to geometries outside of KdbTree\n\nCurrently, if a geometry is outside the bounding box of a KdbTree, it is\ndropped: it's assigned an empty partition index array, which is\nunnested, resulting in the row being dropped.  This can be an efficiency\nmeasure: if one side of the join is much smaller than the other, then\nthe bounds will drop many rows before they are sent to the join worker.\n\nHowever, if the bounds are less than both the build- and probe-side of\nthe join, then rows that would have matched in a non-partitioned join\nwill be dropped when you partition the join.  This makes the correctness\nof the partitioned join dependent on the partition chosen, which can\nlead to some surprising output changes that could be reasonably viewed\nas data loss.\n\nThis commit changes the bounding box of the KdbTree to extend from\n-Infinity to +Infinity, so that all (non-empty) geometries will get\nat least one partition.\n\nAdditionally, make the internal intersection/containement checks for\neach KdbTree node use strict equality for upper/right borders, which\nmakes points intersect only one node."}, "afterCommit": {"oid": "c9f8ba18eba45f138f009f370705f79a49586e95", "author": {"user": {"login": "jagill", "name": "James Gill"}}, "url": "https://github.com/prestodb/presto/commit/c9f8ba18eba45f138f009f370705f79a49586e95", "committedDate": "2020-06-10T14:44:37Z", "message": "Assign partition index to geometries outside of KdbTree\n\nCurrently, if a geometry is outside the bounding box of a KdbTree, it is\ndropped: it's assigned an empty partition index array, which is\nunnested, resulting in the row being dropped.  This can be an efficiency\nmeasure: if one side of the join is much smaller than the other, then\nthe bounds will drop many rows before they are sent to the join worker.\n\nHowever, if the bounds are less than both the build- and probe-side of\nthe join, then rows that would have matched in a non-partitioned join\nwill be dropped when you partition the join.  This makes the correctness\nof the partitioned join dependent on the partition chosen, which can\nlead to some surprising output changes that could be reasonably viewed\nas data loss.\n\nThis commit changes the bounding box of the KdbTree to extend from\n-Infinity to +Infinity, so that all (non-empty) geometries will get\nat least one partition.\n\nAdditionally, make the internal intersection/containement checks for\neach KdbTree node use strict equality for upper/right borders, which\nmakes points intersect only one node."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c9f8ba18eba45f138f009f370705f79a49586e95", "author": {"user": {"login": "jagill", "name": "James Gill"}}, "url": "https://github.com/prestodb/presto/commit/c9f8ba18eba45f138f009f370705f79a49586e95", "committedDate": "2020-06-10T14:44:37Z", "message": "Assign partition index to geometries outside of KdbTree\n\nCurrently, if a geometry is outside the bounding box of a KdbTree, it is\ndropped: it's assigned an empty partition index array, which is\nunnested, resulting in the row being dropped.  This can be an efficiency\nmeasure: if one side of the join is much smaller than the other, then\nthe bounds will drop many rows before they are sent to the join worker.\n\nHowever, if the bounds are less than both the build- and probe-side of\nthe join, then rows that would have matched in a non-partitioned join\nwill be dropped when you partition the join.  This makes the correctness\nof the partitioned join dependent on the partition chosen, which can\nlead to some surprising output changes that could be reasonably viewed\nas data loss.\n\nThis commit changes the bounding box of the KdbTree to extend from\n-Infinity to +Infinity, so that all (non-empty) geometries will get\nat least one partition.\n\nAdditionally, make the internal intersection/containement checks for\neach KdbTree node use strict equality for upper/right borders, which\nmakes points intersect only one node."}, "afterCommit": {"oid": "bd88ff1b7c2868e9b6fb2c82e97501fb0fd91b44", "author": {"user": {"login": "jagill", "name": "James Gill"}}, "url": "https://github.com/prestodb/presto/commit/bd88ff1b7c2868e9b6fb2c82e97501fb0fd91b44", "committedDate": "2020-07-06T15:35:42Z", "message": "Improve spatial join tests\n\nThis commit adds more data to the spatial join tests, to test cases\nwhere geometries may be outside the range of those geometries used\nto build the spatial index."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bd88ff1b7c2868e9b6fb2c82e97501fb0fd91b44", "author": {"user": {"login": "jagill", "name": "James Gill"}}, "url": "https://github.com/prestodb/presto/commit/bd88ff1b7c2868e9b6fb2c82e97501fb0fd91b44", "committedDate": "2020-07-06T15:35:42Z", "message": "Improve spatial join tests\n\nThis commit adds more data to the spatial join tests, to test cases\nwhere geometries may be outside the range of those geometries used\nto build the spatial index."}, "afterCommit": {"oid": "1e250ef026fb98775b2ab2a2fb64534b704530e6", "author": {"user": {"login": "jagill", "name": "James Gill"}}, "url": "https://github.com/prestodb/presto/commit/1e250ef026fb98775b2ab2a2fb64534b704530e6", "committedDate": "2020-07-18T11:16:37Z", "message": "Improve spatial join tests\n\nThis commit adds more data to the spatial join tests, to test cases\nwhere geometries may be outside the range of those geometries used\nto build the spatial index."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1e250ef026fb98775b2ab2a2fb64534b704530e6", "author": {"user": {"login": "jagill", "name": "James Gill"}}, "url": "https://github.com/prestodb/presto/commit/1e250ef026fb98775b2ab2a2fb64534b704530e6", "committedDate": "2020-07-18T11:16:37Z", "message": "Improve spatial join tests\n\nThis commit adds more data to the spatial join tests, to test cases\nwhere geometries may be outside the range of those geometries used\nto build the spatial index."}, "afterCommit": {"oid": "5e5cf8b90d2d414a1d48210a2d49383f4e04f653", "author": {"user": {"login": "jagill", "name": "James Gill"}}, "url": "https://github.com/prestodb/presto/commit/5e5cf8b90d2d414a1d48210a2d49383f4e04f653", "committedDate": "2020-07-18T11:30:19Z", "message": "Improve spatial join tests\n\nThis commit adds more data to the spatial join tests, to test cases\nwhere geometries may be outside the range of those geometries used\nto build the spatial index."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzNzQwNDU0", "url": "https://github.com/prestodb/presto/pull/14485#pullrequestreview-453740454", "createdAt": "2020-07-22T22:56:39Z", "commit": {"oid": "5e5cf8b90d2d414a1d48210a2d49383f4e04f653"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5128256a5fc0057c8acffb90e6b37f2026b2ba5", "author": {"user": {"login": "jagill", "name": "James Gill"}}, "url": "https://github.com/prestodb/presto/commit/b5128256a5fc0057c8acffb90e6b37f2026b2ba5", "committedDate": "2020-07-31T20:05:07Z", "message": "Assign partition index to geometries outside of KdbTree\n\nCurrently, if a geometry is outside the bounding box of a KdbTree, it is\ndropped: it's assigned an empty partition index array, which is\nunnested, resulting in the row being dropped.  This can be an efficiency\nmeasure: if one side of the join is much smaller than the other, then\nthe bounds will drop many rows before they are sent to the join worker.\n\nHowever, if the bounds are less than both the build- and probe-side of\nthe join, then rows that would have matched in a non-partitioned join\nwill be dropped when you partition the join.  This makes the correctness\nof the partitioned join dependent on the partition chosen, which can\nlead to some surprising output changes that could be reasonably viewed\nas data loss.\n\nThis commit changes the bounding box of the KdbTree to extend from\n-Infinity to +Infinity, so that all (non-empty) geometries will get\nat least one partition."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0df9cda03db9e10d062441c7cc87a5762bd480c", "author": {"user": {"login": "jagill", "name": "James Gill"}}, "url": "https://github.com/prestodb/presto/commit/b0df9cda03db9e10d062441c7cc87a5762bd480c", "committedDate": "2020-07-31T20:05:07Z", "message": "Improve spatial join tests\n\nThis commit adds more data to the spatial join tests, to test cases\nwhere geometries may be outside the range of those geometries used\nto build the spatial index."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5e5cf8b90d2d414a1d48210a2d49383f4e04f653", "author": {"user": {"login": "jagill", "name": "James Gill"}}, "url": "https://github.com/prestodb/presto/commit/5e5cf8b90d2d414a1d48210a2d49383f4e04f653", "committedDate": "2020-07-18T11:30:19Z", "message": "Improve spatial join tests\n\nThis commit adds more data to the spatial join tests, to test cases\nwhere geometries may be outside the range of those geometries used\nto build the spatial index."}, "afterCommit": {"oid": "b0df9cda03db9e10d062441c7cc87a5762bd480c", "author": {"user": {"login": "jagill", "name": "James Gill"}}, "url": "https://github.com/prestodb/presto/commit/b0df9cda03db9e10d062441c7cc87a5762bd480c", "committedDate": "2020-07-31T20:05:07Z", "message": "Improve spatial join tests\n\nThis commit adds more data to the spatial join tests, to test cases\nwhere geometries may be outside the range of those geometries used\nto build the spatial index."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyNDQ0ODI5", "url": "https://github.com/prestodb/presto/pull/14485#pullrequestreview-502444829", "createdAt": "2020-10-05T21:47:53Z", "commit": {"oid": "b0df9cda03db9e10d062441c7cc87a5762bd480c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1579, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}