{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk2NzQ5Mzg2", "number": 15260, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxODozMzoxOFrOEp6Txw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxODozMDo0OFrOEqHMRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzgyNDA3OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotAggregationProjectConverter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxODozMzoxOFrOHb3vCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwNzo1MDoyNFrOHcAPNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4Njc2Mg==", "bodyText": "nit: PRESTO_TO_PINOT_ARRAY_AGGREGATIONS ?\nJust something verbose to state what is it a map of (ie, what is the key/value).", "url": "https://github.com/prestodb/presto/pull/15260#discussion_r498986762", "createdAt": "2020-10-02T18:33:18Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotAggregationProjectConverter.java", "diffHunk": "@@ -51,14 +51,28 @@\n             \"/\", \"DIV\");\n     private static final String FROM_UNIXTIME = \"from_unixtime\";\n \n+    private static final Map<String, String> ARRAY_AGGREGATION_ALLOWED_PUSHDOWN_MAP = ImmutableMap.<String, String>builder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "492b7b6a593f6beaf38e5326ea5bb71c2cf53842"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEyNjA2OA==", "bodyText": "done.", "url": "https://github.com/prestodb/presto/pull/15260#discussion_r499126068", "createdAt": "2020-10-03T07:50:24Z", "author": {"login": "xiangfu0"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotAggregationProjectConverter.java", "diffHunk": "@@ -51,14 +51,28 @@\n             \"/\", \"DIV\");\n     private static final String FROM_UNIXTIME = \"from_unixtime\";\n \n+    private static final Map<String, String> ARRAY_AGGREGATION_ALLOWED_PUSHDOWN_MAP = ImmutableMap.<String, String>builder()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4Njc2Mg=="}, "originalCommit": {"oid": "492b7b6a593f6beaf38e5326ea5bb71c2cf53842"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzgzMDEyOnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotAggregationProjectConverter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxODozNTowN1rOHb3yuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwNzo1MDoxMVrOHcAPKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4NzcwNQ==", "bodyText": "Should we require that the .get does not return a null here ?", "url": "https://github.com/prestodb/presto/pull/15260#discussion_r498987705", "createdAt": "2020-10-02T18:35:07Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotAggregationProjectConverter.java", "diffHunk": "@@ -217,17 +231,45 @@ private PinotExpression handleFunction(\n             CallExpression function,\n             Map<VariableReferenceExpression, PinotQueryGeneratorContext.Selection> context)\n     {\n-        switch (function.getDisplayName().toLowerCase(ENGLISH)) {\n+        String functionName = function.getDisplayName().toLowerCase(ENGLISH);\n+        switch (functionName) {\n             case \"date_trunc\":\n                 boolean useDateTruncation = PinotSessionProperties.isUseDateTruncation(session);\n                 return useDateTruncation ?\n                         handleDateTruncationViaDateTruncation(function, context) :\n                         handleDateTruncationViaDateTimeConvert(function, context);\n+            case \"array_max\":\n+            case \"array_min\":\n+                return derived(String.format(\"%s(%s)\",\n+                        ARRAY_AGGREGATION_ALLOWED_PUSHDOWN_MAP.get(functionName),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "492b7b6a593f6beaf38e5326ea5bb71c2cf53842"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEyNjA1OQ==", "bodyText": "done.", "url": "https://github.com/prestodb/presto/pull/15260#discussion_r499126059", "createdAt": "2020-10-03T07:50:11Z", "author": {"login": "xiangfu0"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotAggregationProjectConverter.java", "diffHunk": "@@ -217,17 +231,45 @@ private PinotExpression handleFunction(\n             CallExpression function,\n             Map<VariableReferenceExpression, PinotQueryGeneratorContext.Selection> context)\n     {\n-        switch (function.getDisplayName().toLowerCase(ENGLISH)) {\n+        String functionName = function.getDisplayName().toLowerCase(ENGLISH);\n+        switch (functionName) {\n             case \"date_trunc\":\n                 boolean useDateTruncation = PinotSessionProperties.isUseDateTruncation(session);\n                 return useDateTruncation ?\n                         handleDateTruncationViaDateTruncation(function, context) :\n                         handleDateTruncationViaDateTimeConvert(function, context);\n+            case \"array_max\":\n+            case \"array_min\":\n+                return derived(String.format(\"%s(%s)\",\n+                        ARRAY_AGGREGATION_ALLOWED_PUSHDOWN_MAP.get(functionName),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4NzcwNQ=="}, "originalCommit": {"oid": "492b7b6a593f6beaf38e5326ea5bb71c2cf53842"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzgzNTI5OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotAggregationProjectConverter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxODozNjo1NFrOHb315w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwNzo1MDoxOFrOHcAPMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4ODUxOQ==", "bodyText": "I feel we should do a stronger check here: Like that the split length should not be more than 3 perhaps ? Just vary of doing the wrong thing if say we get something weird like array_sum_1_3 :-P", "url": "https://github.com/prestodb/presto/pull/15260#discussion_r498988519", "createdAt": "2020-10-02T18:36:54Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotAggregationProjectConverter.java", "diffHunk": "@@ -217,17 +231,45 @@ private PinotExpression handleFunction(\n             CallExpression function,\n             Map<VariableReferenceExpression, PinotQueryGeneratorContext.Selection> context)\n     {\n-        switch (function.getDisplayName().toLowerCase(ENGLISH)) {\n+        String functionName = function.getDisplayName().toLowerCase(ENGLISH);\n+        switch (functionName) {\n             case \"date_trunc\":\n                 boolean useDateTruncation = PinotSessionProperties.isUseDateTruncation(session);\n                 return useDateTruncation ?\n                         handleDateTruncationViaDateTruncation(function, context) :\n                         handleDateTruncationViaDateTimeConvert(function, context);\n+            case \"array_max\":\n+            case \"array_min\":\n+                return derived(String.format(\"%s(%s)\",\n+                        ARRAY_AGGREGATION_ALLOWED_PUSHDOWN_MAP.get(functionName),\n+                        function.getArguments().get(0).accept(this, context).getDefinition()));\n+            // array_sum and array_reduce are translated to a reduce function with lambda functions, so we pass in\n+            // this arrayVariableHint to help determine which array function it is.\n+            case \"reduce\":\n+                if (arrayVariableHint != null) {\n+                    String arrayFunctionName = getArrayFunctionName(arrayVariableHint);\n+                    if (arrayFunctionName != null) {\n+                        String inputColumn = function.getArguments().get(0).accept(this, context).getDefinition();\n+                        return derived(String.format(\"%s(%s)\", arrayFunctionName, inputColumn));\n+                    }\n+                }\n             default:\n                 throw new PinotException(PINOT_UNSUPPORTED_EXPRESSION, Optional.empty(), format(\"function %s not supported yet\", function.getDisplayName()));\n         }\n     }\n \n+    // The array function variable names are in the format of `array_sum`, `array_average_0`, `array_sum_1`.\n+    // So we can parse the array function name based on variable name.\n+    private String getArrayFunctionName(VariableReferenceExpression variable)\n+    {\n+        String[] variableNameSplits = variable.getName().split(\"_\");\n+        if (variableNameSplits.length < 2) {\n+            return null;\n+        }\n+        String arrayFunctionName = String.format(\"%s_%s\", variableNameSplits[0], variableNameSplits[1]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "492b7b6a593f6beaf38e5326ea5bb71c2cf53842"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEyNjA2NA==", "bodyText": "done", "url": "https://github.com/prestodb/presto/pull/15260#discussion_r499126064", "createdAt": "2020-10-03T07:50:18Z", "author": {"login": "xiangfu0"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotAggregationProjectConverter.java", "diffHunk": "@@ -217,17 +231,45 @@ private PinotExpression handleFunction(\n             CallExpression function,\n             Map<VariableReferenceExpression, PinotQueryGeneratorContext.Selection> context)\n     {\n-        switch (function.getDisplayName().toLowerCase(ENGLISH)) {\n+        String functionName = function.getDisplayName().toLowerCase(ENGLISH);\n+        switch (functionName) {\n             case \"date_trunc\":\n                 boolean useDateTruncation = PinotSessionProperties.isUseDateTruncation(session);\n                 return useDateTruncation ?\n                         handleDateTruncationViaDateTruncation(function, context) :\n                         handleDateTruncationViaDateTimeConvert(function, context);\n+            case \"array_max\":\n+            case \"array_min\":\n+                return derived(String.format(\"%s(%s)\",\n+                        ARRAY_AGGREGATION_ALLOWED_PUSHDOWN_MAP.get(functionName),\n+                        function.getArguments().get(0).accept(this, context).getDefinition()));\n+            // array_sum and array_reduce are translated to a reduce function with lambda functions, so we pass in\n+            // this arrayVariableHint to help determine which array function it is.\n+            case \"reduce\":\n+                if (arrayVariableHint != null) {\n+                    String arrayFunctionName = getArrayFunctionName(arrayVariableHint);\n+                    if (arrayFunctionName != null) {\n+                        String inputColumn = function.getArguments().get(0).accept(this, context).getDefinition();\n+                        return derived(String.format(\"%s(%s)\", arrayFunctionName, inputColumn));\n+                    }\n+                }\n             default:\n                 throw new PinotException(PINOT_UNSUPPORTED_EXPRESSION, Optional.empty(), format(\"function %s not supported yet\", function.getDisplayName()));\n         }\n     }\n \n+    // The array function variable names are in the format of `array_sum`, `array_average_0`, `array_sum_1`.\n+    // So we can parse the array function name based on variable name.\n+    private String getArrayFunctionName(VariableReferenceExpression variable)\n+    {\n+        String[] variableNameSplits = variable.getName().split(\"_\");\n+        if (variableNameSplits.length < 2) {\n+            return null;\n+        }\n+        String arrayFunctionName = String.format(\"%s_%s\", variableNameSplits[0], variableNameSplits[1]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4ODUxOQ=="}, "originalCommit": {"oid": "492b7b6a593f6beaf38e5326ea5bb71c2cf53842"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNTAyMjM0OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotAggregationProjectConverter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QxNTo1NDo0OVrOHcCQtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QyMToyNzoyM1rOHcDuLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE1OTIyMQ==", "bodyText": "I could not see any unit tests for this reduce codepath. Are they indeed there ?", "url": "https://github.com/prestodb/presto/pull/15260#discussion_r499159221", "createdAt": "2020-10-03T15:54:49Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotAggregationProjectConverter.java", "diffHunk": "@@ -217,17 +231,46 @@ private PinotExpression handleFunction(\n             CallExpression function,\n             Map<VariableReferenceExpression, PinotQueryGeneratorContext.Selection> context)\n     {\n-        switch (function.getDisplayName().toLowerCase(ENGLISH)) {\n+        String functionName = function.getDisplayName().toLowerCase(ENGLISH);\n+        switch (functionName) {\n             case \"date_trunc\":\n                 boolean useDateTruncation = PinotSessionProperties.isUseDateTruncation(session);\n                 return useDateTruncation ?\n                         handleDateTruncationViaDateTruncation(function, context) :\n                         handleDateTruncationViaDateTimeConvert(function, context);\n+            case \"array_max\":\n+            case \"array_min\":\n+                String pinotArrayFunctionName = PRESTO_TO_PINOT_ARRAY_AGGREGATIONS.get(functionName);\n+                requireNonNull(pinotArrayFunctionName, \"Converted Pinot array function is null for - \" + functionName);\n+                return derived(String.format(\"%s(%s)\", pinotArrayFunctionName,\n+                        function.getArguments().get(0).accept(this, context).getDefinition()));\n+            // array_sum and array_reduce are translated to a reduce function with lambda functions, so we pass in\n+            // this arrayVariableHint to help determine which array function it is.\n+            case \"reduce\":", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0301b8e60e9e541b9640268d8457d4bee8d5a6f1"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE4MzE1MA==", "bodyText": "I'm just too lazy to write reduce functions for average and sum :)\nAdded those tests.", "url": "https://github.com/prestodb/presto/pull/15260#discussion_r499183150", "createdAt": "2020-10-03T21:27:23Z", "author": {"login": "xiangfu0"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotAggregationProjectConverter.java", "diffHunk": "@@ -217,17 +231,46 @@ private PinotExpression handleFunction(\n             CallExpression function,\n             Map<VariableReferenceExpression, PinotQueryGeneratorContext.Selection> context)\n     {\n-        switch (function.getDisplayName().toLowerCase(ENGLISH)) {\n+        String functionName = function.getDisplayName().toLowerCase(ENGLISH);\n+        switch (functionName) {\n             case \"date_trunc\":\n                 boolean useDateTruncation = PinotSessionProperties.isUseDateTruncation(session);\n                 return useDateTruncation ?\n                         handleDateTruncationViaDateTruncation(function, context) :\n                         handleDateTruncationViaDateTimeConvert(function, context);\n+            case \"array_max\":\n+            case \"array_min\":\n+                String pinotArrayFunctionName = PRESTO_TO_PINOT_ARRAY_AGGREGATIONS.get(functionName);\n+                requireNonNull(pinotArrayFunctionName, \"Converted Pinot array function is null for - \" + functionName);\n+                return derived(String.format(\"%s(%s)\", pinotArrayFunctionName,\n+                        function.getArguments().get(0).accept(this, context).getDefinition()));\n+            // array_sum and array_reduce are translated to a reduce function with lambda functions, so we pass in\n+            // this arrayVariableHint to help determine which array function it is.\n+            case \"reduce\":", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE1OTIyMQ=="}, "originalCommit": {"oid": "0301b8e60e9e541b9640268d8457d4bee8d5a6f1"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNTI5MTM3OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotFilterExpressionConverter.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQwMDoxNzowMFrOHcETiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQwNjo0Mjo1NlrOHcFfgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE5MjcxMg==", "bodyText": "Should one side be a literal here ? What happens if I do a: array_col1 contains array_col2 ?\nWould presto ensure that array_col2 is a literal ?\nWhat happens when array_col2 is a non literal scalar ? Would that be supported by Pinot ?", "url": "https://github.com/prestodb/presto/pull/15260#discussion_r499192712", "createdAt": "2020-10-04T00:17:00Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotFilterExpressionConverter.java", "diffHunk": "@@ -201,6 +201,23 @@ else if (timeFieldExpression instanceof ConstantExpression) {\n         return Optional.of(timeValueString);\n     }\n \n+    private PinotExpression handleContains(\n+            CallExpression contains,\n+            Function<VariableReferenceExpression, Selection> context)\n+    {\n+        if (contains.getArguments().size() == 2) {\n+            RowExpression left = contains.getArguments().get(0);\n+            RowExpression right = contains.getArguments().get(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83f91eef61b60f3e6f9d435e94a89d798824ed73"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE5NDY1Ng==", "bodyText": "The BuiltInFunctionNamespaceHandleResolver will handle the type check.\nIt will throw exception if the second argument is an array.", "url": "https://github.com/prestodb/presto/pull/15260#discussion_r499194656", "createdAt": "2020-10-04T00:57:16Z", "author": {"login": "xiangfu0"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotFilterExpressionConverter.java", "diffHunk": "@@ -201,6 +201,23 @@ else if (timeFieldExpression instanceof ConstantExpression) {\n         return Optional.of(timeValueString);\n     }\n \n+    private PinotExpression handleContains(\n+            CallExpression contains,\n+            Function<VariableReferenceExpression, Selection> context)\n+    {\n+        if (contains.getArguments().size() == 2) {\n+            RowExpression left = contains.getArguments().get(0);\n+            RowExpression right = contains.getArguments().get(1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE5MjcxMg=="}, "originalCommit": {"oid": "83f91eef61b60f3e6f9d435e94a89d798824ed73"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE5NDgwNA==", "bodyText": "The builtin array functions has strict type check: https://prestodb.io/docs/current/functions/array.html", "url": "https://github.com/prestodb/presto/pull/15260#discussion_r499194804", "createdAt": "2020-10-04T01:00:16Z", "author": {"login": "xiangfu0"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotFilterExpressionConverter.java", "diffHunk": "@@ -201,6 +201,23 @@ else if (timeFieldExpression instanceof ConstantExpression) {\n         return Optional.of(timeValueString);\n     }\n \n+    private PinotExpression handleContains(\n+            CallExpression contains,\n+            Function<VariableReferenceExpression, Selection> context)\n+    {\n+        if (contains.getArguments().size() == 2) {\n+            RowExpression left = contains.getArguments().get(0);\n+            RowExpression right = contains.getArguments().get(1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE5MjcxMg=="}, "originalCommit": {"oid": "83f91eef61b60f3e6f9d435e94a89d798824ed73"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE5NTY1MA==", "bodyText": "E.g.\npresto:default> explain select sum(array_sum(divwheelsons)) from airlinestats WHERE contains(divwheelsons, divwheelsoffs);\nQuery 20201004_011726_00000_xdccd failed: line 1:69: Unexpected parameters (array(integer), array(integer)) for function contains. Expected: contains(array(T), T) T:comparable\nexplain select sum(array_sum(divwheelsons)) from airlinestats WHERE contains(divwheelsons, divwheelsoffs)", "url": "https://github.com/prestodb/presto/pull/15260#discussion_r499195650", "createdAt": "2020-10-04T01:17:41Z", "author": {"login": "xiangfu0"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotFilterExpressionConverter.java", "diffHunk": "@@ -201,6 +201,23 @@ else if (timeFieldExpression instanceof ConstantExpression) {\n         return Optional.of(timeValueString);\n     }\n \n+    private PinotExpression handleContains(\n+            CallExpression contains,\n+            Function<VariableReferenceExpression, Selection> context)\n+    {\n+        if (contains.getArguments().size() == 2) {\n+            RowExpression left = contains.getArguments().get(0);\n+            RowExpression right = contains.getArguments().get(1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE5MjcxMg=="}, "originalCommit": {"oid": "83f91eef61b60f3e6f9d435e94a89d798824ed73"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIxMDEyMA==", "bodyText": "So should one of the arguments be a literal here ?", "url": "https://github.com/prestodb/presto/pull/15260#discussion_r499210120", "createdAt": "2020-10-04T06:11:34Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotFilterExpressionConverter.java", "diffHunk": "@@ -201,6 +201,23 @@ else if (timeFieldExpression instanceof ConstantExpression) {\n         return Optional.of(timeValueString);\n     }\n \n+    private PinotExpression handleContains(\n+            CallExpression contains,\n+            Function<VariableReferenceExpression, Selection> context)\n+    {\n+        if (contains.getArguments().size() == 2) {\n+            RowExpression left = contains.getArguments().get(0);\n+            RowExpression right = contains.getArguments().get(1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE5MjcxMg=="}, "originalCommit": {"oid": "83f91eef61b60f3e6f9d435e94a89d798824ed73"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIxMTc0OQ==", "bodyText": "right, arg[1] should be a literal", "url": "https://github.com/prestodb/presto/pull/15260#discussion_r499211749", "createdAt": "2020-10-04T06:37:06Z", "author": {"login": "xiangfu0"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotFilterExpressionConverter.java", "diffHunk": "@@ -201,6 +201,23 @@ else if (timeFieldExpression instanceof ConstantExpression) {\n         return Optional.of(timeValueString);\n     }\n \n+    private PinotExpression handleContains(\n+            CallExpression contains,\n+            Function<VariableReferenceExpression, Selection> context)\n+    {\n+        if (contains.getArguments().size() == 2) {\n+            RowExpression left = contains.getArguments().get(0);\n+            RowExpression right = contains.getArguments().get(1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE5MjcxMg=="}, "originalCommit": {"oid": "83f91eef61b60f3e6f9d435e94a89d798824ed73"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIxMjE2Mw==", "bodyText": "added a check on arg[1] to ensure it's a ConstantExpression.", "url": "https://github.com/prestodb/presto/pull/15260#discussion_r499212163", "createdAt": "2020-10-04T06:42:56Z", "author": {"login": "xiangfu0"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotFilterExpressionConverter.java", "diffHunk": "@@ -201,6 +201,23 @@ else if (timeFieldExpression instanceof ConstantExpression) {\n         return Optional.of(timeValueString);\n     }\n \n+    private PinotExpression handleContains(\n+            CallExpression contains,\n+            Function<VariableReferenceExpression, Selection> context)\n+    {\n+        if (contains.getArguments().size() == 2) {\n+            RowExpression left = contains.getArguments().get(0);\n+            RowExpression right = contains.getArguments().get(1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE5MjcxMg=="}, "originalCommit": {"oid": "83f91eef61b60f3e6f9d435e94a89d798824ed73"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNTI5MTU2OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotFilterExpressionConverter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQwMDoxNzozNlrOHcETpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQwMDo1NzoyOFrOHcEbKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE5Mjc0MA==", "bodyText": "Its a bit weird to have a single case switch.", "url": "https://github.com/prestodb/presto/pull/15260#discussion_r499192740", "createdAt": "2020-10-04T00:17:36Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotFilterExpressionConverter.java", "diffHunk": "@@ -294,6 +311,10 @@ public PinotExpression visitCall(CallExpression call, Function<VariableReference\n                 return handleLogicalBinary(operatorType.getOperator(), call, context);\n             }\n         }\n+        switch (functionMetadata.getName().getFunctionName()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83f91eef61b60f3e6f9d435e94a89d798824ed73"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE5NDY2Ng==", "bodyText": "let me change it to string compare", "url": "https://github.com/prestodb/presto/pull/15260#discussion_r499194666", "createdAt": "2020-10-04T00:57:28Z", "author": {"login": "xiangfu0"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotFilterExpressionConverter.java", "diffHunk": "@@ -294,6 +311,10 @@ public PinotExpression visitCall(CallExpression call, Function<VariableReference\n                 return handleLogicalBinary(operatorType.getOperator(), call, context);\n             }\n         }\n+        switch (functionMetadata.getName().getFunctionName()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE5Mjc0MA=="}, "originalCommit": {"oid": "83f91eef61b60f3e6f9d435e94a89d798824ed73"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNTgwNTc3OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotFilterExpressionConverter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxNToyNTowNlrOHcITPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxNzoyNjozNVrOHcI93Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI1ODE3Mg==", "bodyText": "How about a simple Pinot unsupported exception here ?\nOr is this a bug in presto ? Like does presto (over hive) allow a non literal here ? If it allows and we merely want to forbid pushdown then, Pinot connector should use unsupported exception here.", "url": "https://github.com/prestodb/presto/pull/15260#discussion_r499258172", "createdAt": "2020-10-04T15:25:06Z", "author": {"login": "agrawaldevesh"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotFilterExpressionConverter.java", "diffHunk": "@@ -201,6 +202,24 @@ else if (timeFieldExpression instanceof ConstantExpression) {\n         return Optional.of(timeValueString);\n     }\n \n+    private PinotExpression handleContains(\n+            CallExpression contains,\n+            Function<VariableReferenceExpression, Selection> context)\n+    {\n+        if (contains.getArguments().size() == 2) {\n+            RowExpression left = contains.getArguments().get(0);\n+            RowExpression right = contains.getArguments().get(1);\n+            Preconditions.checkState(right instanceof ConstantExpression, format(\"Contains operator can not push down non-literal value: %s\", right));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81ca2d2c6d850349ed552bd46fa93d4c4c8408ef"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI2ODk1Mw==", "bodyText": "Not only literal, it can also be and identifier, e.g. a column, so I can check if this array field contains another single value column value in the same row.", "url": "https://github.com/prestodb/presto/pull/15260#discussion_r499268953", "createdAt": "2020-10-04T17:25:21Z", "author": {"login": "xiangfu0"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotFilterExpressionConverter.java", "diffHunk": "@@ -201,6 +202,24 @@ else if (timeFieldExpression instanceof ConstantExpression) {\n         return Optional.of(timeValueString);\n     }\n \n+    private PinotExpression handleContains(\n+            CallExpression contains,\n+            Function<VariableReferenceExpression, Selection> context)\n+    {\n+        if (contains.getArguments().size() == 2) {\n+            RowExpression left = contains.getArguments().get(0);\n+            RowExpression right = contains.getArguments().get(1);\n+            Preconditions.checkState(right instanceof ConstantExpression, format(\"Contains operator can not push down non-literal value: %s\", right));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI1ODE3Mg=="}, "originalCommit": {"oid": "81ca2d2c6d850349ed552bd46fa93d4c4c8408ef"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI2OTA4NQ==", "bodyText": "updated the exception", "url": "https://github.com/prestodb/presto/pull/15260#discussion_r499269085", "createdAt": "2020-10-04T17:26:35Z", "author": {"login": "xiangfu0"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotFilterExpressionConverter.java", "diffHunk": "@@ -201,6 +202,24 @@ else if (timeFieldExpression instanceof ConstantExpression) {\n         return Optional.of(timeValueString);\n     }\n \n+    private PinotExpression handleContains(\n+            CallExpression contains,\n+            Function<VariableReferenceExpression, Selection> context)\n+    {\n+        if (contains.getArguments().size() == 2) {\n+            RowExpression left = contains.getArguments().get(0);\n+            RowExpression right = contains.getArguments().get(1);\n+            Preconditions.checkState(right instanceof ConstantExpression, format(\"Contains operator can not push down non-literal value: %s\", right));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI1ODE3Mg=="}, "originalCommit": {"oid": "81ca2d2c6d850349ed552bd46fa93d4c4c8408ef"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNTkzMzU4OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotFilterExpressionConverter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxODoyODo0OFrOHcJUNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxOTo0MDo0OFrOHcJuDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI3NDgwNA==", "bodyText": "if (contains.getArguments().size() != 2) {\n    throw new PinotException(PINOT_UNSUPPORTED_EXPRESSION, Optional.empty(), format(\"Contains operator not supported: %s\", contains));\n}\n\n...", "url": "https://github.com/prestodb/presto/pull/15260#discussion_r499274804", "createdAt": "2020-10-04T18:28:48Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotFilterExpressionConverter.java", "diffHunk": "@@ -201,6 +201,26 @@ else if (timeFieldExpression instanceof ConstantExpression) {\n         return Optional.of(timeValueString);\n     }\n \n+    private PinotExpression handleContains(\n+            CallExpression contains,\n+            Function<VariableReferenceExpression, Selection> context)\n+    {\n+        if (contains.getArguments().size() == 2) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "442e0bcf59ab6da0536801c7089fe426feaaf6ed"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI4MTQyMA==", "bodyText": "done.", "url": "https://github.com/prestodb/presto/pull/15260#discussion_r499281420", "createdAt": "2020-10-04T19:40:48Z", "author": {"login": "xiangfu0"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotFilterExpressionConverter.java", "diffHunk": "@@ -201,6 +201,26 @@ else if (timeFieldExpression instanceof ConstantExpression) {\n         return Optional.of(timeValueString);\n     }\n \n+    private PinotExpression handleContains(\n+            CallExpression contains,\n+            Function<VariableReferenceExpression, Selection> context)\n+    {\n+        if (contains.getArguments().size() == 2) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI3NDgwNA=="}, "originalCommit": {"oid": "442e0bcf59ab6da0536801c7089fe426feaaf6ed"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNTkzNDc3OnYy", "diffSide": "RIGHT", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotAggregationProjectConverter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxODozMDo0OFrOHcJU3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxOTo0MDo0MlrOHcJuCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI3NDk3Mg==", "bodyText": "one param per line", "url": "https://github.com/prestodb/presto/pull/15260#discussion_r499274972", "createdAt": "2020-10-04T18:30:48Z", "author": {"login": "highker"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotAggregationProjectConverter.java", "diffHunk": "@@ -217,17 +231,46 @@ private PinotExpression handleFunction(\n             CallExpression function,\n             Map<VariableReferenceExpression, PinotQueryGeneratorContext.Selection> context)\n     {\n-        switch (function.getDisplayName().toLowerCase(ENGLISH)) {\n+        String functionName = function.getDisplayName().toLowerCase(ENGLISH);\n+        switch (functionName) {\n             case \"date_trunc\":\n                 boolean useDateTruncation = PinotSessionProperties.isUseDateTruncation(session);\n                 return useDateTruncation ?\n                         handleDateTruncationViaDateTruncation(function, context) :\n                         handleDateTruncationViaDateTimeConvert(function, context);\n+            case \"array_max\":\n+            case \"array_min\":\n+                String pinotArrayFunctionName = PRESTO_TO_PINOT_ARRAY_AGGREGATIONS.get(functionName);\n+                requireNonNull(pinotArrayFunctionName, \"Converted Pinot array function is null for - \" + functionName);\n+                return derived(String.format(\"%s(%s)\", pinotArrayFunctionName,\n+                        function.getArguments().get(0).accept(this, context).getDefinition()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "442e0bcf59ab6da0536801c7089fe426feaaf6ed"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI4MTQxNw==", "bodyText": "done.", "url": "https://github.com/prestodb/presto/pull/15260#discussion_r499281417", "createdAt": "2020-10-04T19:40:42Z", "author": {"login": "xiangfu0"}, "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotAggregationProjectConverter.java", "diffHunk": "@@ -217,17 +231,46 @@ private PinotExpression handleFunction(\n             CallExpression function,\n             Map<VariableReferenceExpression, PinotQueryGeneratorContext.Selection> context)\n     {\n-        switch (function.getDisplayName().toLowerCase(ENGLISH)) {\n+        String functionName = function.getDisplayName().toLowerCase(ENGLISH);\n+        switch (functionName) {\n             case \"date_trunc\":\n                 boolean useDateTruncation = PinotSessionProperties.isUseDateTruncation(session);\n                 return useDateTruncation ?\n                         handleDateTruncationViaDateTruncation(function, context) :\n                         handleDateTruncationViaDateTimeConvert(function, context);\n+            case \"array_max\":\n+            case \"array_min\":\n+                String pinotArrayFunctionName = PRESTO_TO_PINOT_ARRAY_AGGREGATIONS.get(functionName);\n+                requireNonNull(pinotArrayFunctionName, \"Converted Pinot array function is null for - \" + functionName);\n+                return derived(String.format(\"%s(%s)\", pinotArrayFunctionName,\n+                        function.getArguments().get(0).accept(this, context).getDefinition()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI3NDk3Mg=="}, "originalCommit": {"oid": "442e0bcf59ab6da0536801c7089fe426feaaf6ed"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3471, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}