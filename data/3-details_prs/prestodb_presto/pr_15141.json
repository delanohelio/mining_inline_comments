{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgyMzcyODE0", "number": 15141, "title": "Add test infrastructure to run queries using native workers", "bodyText": "Extend HiveQueryRunner and DistributedQueryRunner to allow for setting up a Java-based coordinator and a set of native workers. Native workers are created by launching separate processes using native binary. The path to the binary is specified using PRESTO_SERVER environment variable. The new test that uses this infrastructure, TestHiveNativeWorkersQueries.java, is disabled by default. In the future, we'll figure out how to get native worker binary on a CI machine to enable this test.\nThe new test passed locally.\n\nCC: @andrewmc-facebook\n== NO RELEASE NOTE ==", "createdAt": "2020-09-08T23:56:14Z", "url": "https://github.com/prestodb/presto/pull/15141", "merged": true, "mergeCommit": {"oid": "f3a43a8cc0a3e3cdb65deb48a24b949f5b999600"}, "closed": true, "closedAt": "2020-09-10T18:18:58Z", "author": {"login": "mbasmanova"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdHAzGNgBqjM3NDMyODEyOTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdHkTTHAFqTQ4NjE1OTUxOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dab69857f4d4c5589b46e76449fe0458157e9036", "author": {"user": {"login": "mbasmanova", "name": "Maria Basmanova"}}, "url": "https://github.com/prestodb/presto/commit/dab69857f4d4c5589b46e76449fe0458157e9036", "committedDate": "2020-09-08T23:50:47Z", "message": "Run with native worker"}, "afterCommit": {"oid": "7f15e975a794f4f608caaf92c298bfe8e9b5a174", "author": {"user": {"login": "mbasmanova", "name": "Maria Basmanova"}}, "url": "https://github.com/prestodb/presto/commit/7f15e975a794f4f608caaf92c298bfe8e9b5a174", "committedDate": "2020-09-09T00:10:21Z", "message": "Run with native worker"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7f15e975a794f4f608caaf92c298bfe8e9b5a174", "author": {"user": {"login": "mbasmanova", "name": "Maria Basmanova"}}, "url": "https://github.com/prestodb/presto/commit/7f15e975a794f4f608caaf92c298bfe8e9b5a174", "committedDate": "2020-09-09T00:10:21Z", "message": "Run with native worker"}, "afterCommit": {"oid": "c959c386ddd015103d10b18789f4e343345734c8", "author": {"user": {"login": "mbasmanova", "name": "Maria Basmanova"}}, "url": "https://github.com/prestodb/presto/commit/c959c386ddd015103d10b18789f4e343345734c8", "committedDate": "2020-09-09T00:21:59Z", "message": "Add test infrastructure to run queries using native workers\n\nExtend HiveQueryRunner and DistributedQueryRunner to allow for setting up a\nJava-based coordinator and a set of native workers. Native workers are created\nby launching separate processes using native binary. The path to the binary is\nspecified using PRESTO_SERVER environment variable. The new test that uses\nthis infrastructure, TestHiveNativeWorkersQueries.java, is disabled by\ndefault. In the future, we'll figure out how to get native worker binary on a\nCI machine to enable this test.\n\nThe new test passed locally."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1MTk1MzY4", "url": "https://github.com/prestodb/presto/pull/15141#pullrequestreview-485195368", "createdAt": "2020-09-09T16:28:40Z", "commit": {"oid": "c959c386ddd015103d10b18789f4e343345734c8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1MjAzMDgx", "url": "https://github.com/prestodb/presto/pull/15141#pullrequestreview-485203081", "createdAt": "2020-09-09T16:38:19Z", "commit": {"oid": "c959c386ddd015103d10b18789f4e343345734c8"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNjozODoxOVrOHPQbVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNjo1ODo0NFrOHPRebg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc1OTgyOQ==", "bodyText": "Should we call nativeWorker* => externalWorker*?", "url": "https://github.com/prestodb/presto/pull/15141#discussion_r485759829", "createdAt": "2020-09-09T16:38:19Z", "author": {"login": "tdcmeehan"}, "path": "presto-tests/src/main/java/com/facebook/presto/tests/DistributedQueryRunner.java", "diffHunk": "@@ -136,19 +139,42 @@ private DistributedQueryRunner(\n             discoveryServer = new TestingDiscoveryServer(environment);\n             closer.register(() -> closeUnchecked(discoveryServer));\n             log.info(\"Created TestingDiscoveryServer in %s\", nanosSince(start).convertToMostSuccinctTimeUnit());\n+            URI discoveryUrl = discoveryServer.getBaseUrl();\n+            log.info(\"Discovery URL %s\", discoveryUrl);\n+\n+            if (nativeWorkerLauncher.isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c959c386ddd015103d10b18789f4e343345734c8"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc2NjI5Mg==", "bodyText": "It feels like we can fairly easily squash these three checks on nativeWorkerLauncher into one?", "url": "https://github.com/prestodb/presto/pull/15141#discussion_r485766292", "createdAt": "2020-09-09T16:46:02Z", "author": {"login": "tdcmeehan"}, "path": "presto-tests/src/main/java/com/facebook/presto/tests/DistributedQueryRunner.java", "diffHunk": "@@ -136,19 +139,42 @@ private DistributedQueryRunner(\n             discoveryServer = new TestingDiscoveryServer(environment);\n             closer.register(() -> closeUnchecked(discoveryServer));\n             log.info(\"Created TestingDiscoveryServer in %s\", nanosSince(start).convertToMostSuccinctTimeUnit());\n+            URI discoveryUrl = discoveryServer.getBaseUrl();\n+            log.info(\"Discovery URL %s\", discoveryUrl);\n+\n+            if (nativeWorkerLauncher.isPresent()) {\n+                ImmutableList.Builder<Process> nativeWorkersBuilder = ImmutableList.builder();\n+                for (int i = 0; i < nodeCount; i++) {\n+                    nativeWorkersBuilder.add(nativeWorkerLauncher.get().apply(i, discoveryUrl));\n+                }\n+                nativeWorkers = nativeWorkersBuilder.build();\n+                closer.register(() -> {\n+                    for (Process nativeWorker : nativeWorkers) {\n+                        nativeWorker.destroyForcibly();\n+                    }\n+                });\n+            }\n+            else {\n+                nativeWorkers = ImmutableList.of();\n+            }\n \n             ImmutableList.Builder<TestingPrestoServer> servers = ImmutableList.builder();\n-\n-            for (int i = 1; i < nodeCount; i++) {\n-                TestingPrestoServer worker = closer.register(createTestingPrestoServer(discoveryServer.getBaseUrl(), false, extraProperties, parserOptions, environment, baseDataDir));\n-                servers.add(worker);\n+            if (!nativeWorkerLauncher.isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c959c386ddd015103d10b18789f4e343345734c8"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc2ODE4Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                String.format(\"discovery.uri=%s\\n\", discoveryUrl).getBytes());\n          \n          \n            \n                                                format(\"discovery.uri=%s\\n\", discoveryUrl).getBytes());", "url": "https://github.com/prestodb/presto/pull/15141#discussion_r485768186", "createdAt": "2020-09-09T16:48:25Z", "author": {"login": "tdcmeehan"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveNativeWorkersQueries.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.testing.QueryRunner;\n+import com.facebook.presto.tests.AbstractTestQueryFramework;\n+import com.facebook.presto.tests.DistributedQueryRunner;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static io.airlift.tpch.TpchTable.NATION;\n+\n+public class TestHiveNativeWorkersQueries\n+        extends AbstractTestQueryFramework\n+{\n+    protected TestHiveNativeWorkersQueries()\n+    {\n+        super(TestHiveNativeWorkersQueries::createQueryRunner);\n+    }\n+\n+    private static QueryRunner createQueryRunner()\n+            throws Exception\n+    {\n+        String prestoServerPath = System.getenv(\"PRESTO_SERVER\");\n+        checkArgument(prestoServerPath != null,\n+                \"Path to native Presto server binary is missing. Specify it using PRESTO_SERVER environment variable.\");\n+\n+        String baseDataDir = System.getenv(\"DATA_DIR\");\n+        checkArgument(baseDataDir != null,\n+                \"Path to data files is missing. Specify it using DATA_DIR environment variable\");\n+\n+        // Make TPC-H tables in DWRF format using Java-based workers\n+        HiveQueryRunner.createQueryRunner(ImmutableList.of(NATION),\n+                ImmutableMap.of(),\n+                \"sql-standard\",\n+                ImmutableMap.of(\"hive.storage-format\", \"DWRF\"),\n+                Optional.of(Paths.get(baseDataDir))).close();\n+\n+        // Make query runner with native workers for tests\n+        DistributedQueryRunner queryRunner = HiveQueryRunner.createQueryRunner(ImmutableList.of(NATION),\n+                ImmutableMap.of(\"optimizer.optimize-hash-generation\", \"false\"),\n+                ImmutableMap.of(),\n+                \"sql-standard\",\n+                ImmutableMap.of(),\n+                Optional.of(1),\n+                Optional.of(Paths.get(baseDataDir)),\n+                Optional.of((workerIndex, discoveryUrl) -> {\n+                    try {\n+                        if (workerIndex == 0) {\n+                            // Write discovery URL to /tmp/config.properties\n+                            Files.write(Paths.get(\"/tmp/config.properties\"),\n+                                    String.format(\"discovery.uri=%s\\n\", discoveryUrl).getBytes());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c959c386ddd015103d10b18789f4e343345734c8"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc2ODMzNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            Optional.of((workerIndex, discoveryUrl) -> {\n          \n          \n            \n                            Optional.of((workerIndex, discoveryUri) -> {", "url": "https://github.com/prestodb/presto/pull/15141#discussion_r485768337", "createdAt": "2020-09-09T16:48:34Z", "author": {"login": "tdcmeehan"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveNativeWorkersQueries.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.testing.QueryRunner;\n+import com.facebook.presto.tests.AbstractTestQueryFramework;\n+import com.facebook.presto.tests.DistributedQueryRunner;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static io.airlift.tpch.TpchTable.NATION;\n+\n+public class TestHiveNativeWorkersQueries\n+        extends AbstractTestQueryFramework\n+{\n+    protected TestHiveNativeWorkersQueries()\n+    {\n+        super(TestHiveNativeWorkersQueries::createQueryRunner);\n+    }\n+\n+    private static QueryRunner createQueryRunner()\n+            throws Exception\n+    {\n+        String prestoServerPath = System.getenv(\"PRESTO_SERVER\");\n+        checkArgument(prestoServerPath != null,\n+                \"Path to native Presto server binary is missing. Specify it using PRESTO_SERVER environment variable.\");\n+\n+        String baseDataDir = System.getenv(\"DATA_DIR\");\n+        checkArgument(baseDataDir != null,\n+                \"Path to data files is missing. Specify it using DATA_DIR environment variable\");\n+\n+        // Make TPC-H tables in DWRF format using Java-based workers\n+        HiveQueryRunner.createQueryRunner(ImmutableList.of(NATION),\n+                ImmutableMap.of(),\n+                \"sql-standard\",\n+                ImmutableMap.of(\"hive.storage-format\", \"DWRF\"),\n+                Optional.of(Paths.get(baseDataDir))).close();\n+\n+        // Make query runner with native workers for tests\n+        DistributedQueryRunner queryRunner = HiveQueryRunner.createQueryRunner(ImmutableList.of(NATION),\n+                ImmutableMap.of(\"optimizer.optimize-hash-generation\", \"false\"),\n+                ImmutableMap.of(),\n+                \"sql-standard\",\n+                ImmutableMap.of(),\n+                Optional.of(1),\n+                Optional.of(Paths.get(baseDataDir)),\n+                Optional.of((workerIndex, discoveryUrl) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c959c386ddd015103d10b18789f4e343345734c8"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc2ODkwNg==", "bodyText": "Any reason we can't do this just once outside of the lambda?", "url": "https://github.com/prestodb/presto/pull/15141#discussion_r485768906", "createdAt": "2020-09-09T16:49:19Z", "author": {"login": "tdcmeehan"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveNativeWorkersQueries.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.testing.QueryRunner;\n+import com.facebook.presto.tests.AbstractTestQueryFramework;\n+import com.facebook.presto.tests.DistributedQueryRunner;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static io.airlift.tpch.TpchTable.NATION;\n+\n+public class TestHiveNativeWorkersQueries\n+        extends AbstractTestQueryFramework\n+{\n+    protected TestHiveNativeWorkersQueries()\n+    {\n+        super(TestHiveNativeWorkersQueries::createQueryRunner);\n+    }\n+\n+    private static QueryRunner createQueryRunner()\n+            throws Exception\n+    {\n+        String prestoServerPath = System.getenv(\"PRESTO_SERVER\");\n+        checkArgument(prestoServerPath != null,\n+                \"Path to native Presto server binary is missing. Specify it using PRESTO_SERVER environment variable.\");\n+\n+        String baseDataDir = System.getenv(\"DATA_DIR\");\n+        checkArgument(baseDataDir != null,\n+                \"Path to data files is missing. Specify it using DATA_DIR environment variable\");\n+\n+        // Make TPC-H tables in DWRF format using Java-based workers\n+        HiveQueryRunner.createQueryRunner(ImmutableList.of(NATION),\n+                ImmutableMap.of(),\n+                \"sql-standard\",\n+                ImmutableMap.of(\"hive.storage-format\", \"DWRF\"),\n+                Optional.of(Paths.get(baseDataDir))).close();\n+\n+        // Make query runner with native workers for tests\n+        DistributedQueryRunner queryRunner = HiveQueryRunner.createQueryRunner(ImmutableList.of(NATION),\n+                ImmutableMap.of(\"optimizer.optimize-hash-generation\", \"false\"),\n+                ImmutableMap.of(),\n+                \"sql-standard\",\n+                ImmutableMap.of(),\n+                Optional.of(1),\n+                Optional.of(Paths.get(baseDataDir)),\n+                Optional.of((workerIndex, discoveryUrl) -> {\n+                    try {\n+                        if (workerIndex == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c959c386ddd015103d10b18789f4e343345734c8"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc2OTk3Mg==", "bodyText": "Rather than presuming the existence of /tmp, can we just use Files.createTempDirectory(prefix);?  We could also tag the prefix with the test class name of this test (for discoverability, in case it accidentally creates too many local temp directories).", "url": "https://github.com/prestodb/presto/pull/15141#discussion_r485769972", "createdAt": "2020-09-09T16:50:37Z", "author": {"login": "tdcmeehan"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveNativeWorkersQueries.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.testing.QueryRunner;\n+import com.facebook.presto.tests.AbstractTestQueryFramework;\n+import com.facebook.presto.tests.DistributedQueryRunner;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static io.airlift.tpch.TpchTable.NATION;\n+\n+public class TestHiveNativeWorkersQueries\n+        extends AbstractTestQueryFramework\n+{\n+    protected TestHiveNativeWorkersQueries()\n+    {\n+        super(TestHiveNativeWorkersQueries::createQueryRunner);\n+    }\n+\n+    private static QueryRunner createQueryRunner()\n+            throws Exception\n+    {\n+        String prestoServerPath = System.getenv(\"PRESTO_SERVER\");\n+        checkArgument(prestoServerPath != null,\n+                \"Path to native Presto server binary is missing. Specify it using PRESTO_SERVER environment variable.\");\n+\n+        String baseDataDir = System.getenv(\"DATA_DIR\");\n+        checkArgument(baseDataDir != null,\n+                \"Path to data files is missing. Specify it using DATA_DIR environment variable\");\n+\n+        // Make TPC-H tables in DWRF format using Java-based workers\n+        HiveQueryRunner.createQueryRunner(ImmutableList.of(NATION),\n+                ImmutableMap.of(),\n+                \"sql-standard\",\n+                ImmutableMap.of(\"hive.storage-format\", \"DWRF\"),\n+                Optional.of(Paths.get(baseDataDir))).close();\n+\n+        // Make query runner with native workers for tests\n+        DistributedQueryRunner queryRunner = HiveQueryRunner.createQueryRunner(ImmutableList.of(NATION),\n+                ImmutableMap.of(\"optimizer.optimize-hash-generation\", \"false\"),\n+                ImmutableMap.of(),\n+                \"sql-standard\",\n+                ImmutableMap.of(),\n+                Optional.of(1),\n+                Optional.of(Paths.get(baseDataDir)),\n+                Optional.of((workerIndex, discoveryUrl) -> {\n+                    try {\n+                        if (workerIndex == 0) {\n+                            // Write discovery URL to /tmp/config.properties\n+                            Files.write(Paths.get(\"/tmp/config.properties\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c959c386ddd015103d10b18789f4e343345734c8"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc3NjY1NQ==", "bodyText": "This is a small nit, but I think it would be preferable to make it clear these come from the environment, but having two methods, one which takes these as arguments, and an outer one which passes them in from the environment.", "url": "https://github.com/prestodb/presto/pull/15141#discussion_r485776655", "createdAt": "2020-09-09T16:58:10Z", "author": {"login": "tdcmeehan"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveNativeWorkersQueries.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.testing.QueryRunner;\n+import com.facebook.presto.tests.AbstractTestQueryFramework;\n+import com.facebook.presto.tests.DistributedQueryRunner;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static io.airlift.tpch.TpchTable.NATION;\n+\n+public class TestHiveNativeWorkersQueries\n+        extends AbstractTestQueryFramework\n+{\n+    protected TestHiveNativeWorkersQueries()\n+    {\n+        super(TestHiveNativeWorkersQueries::createQueryRunner);\n+    }\n+\n+    private static QueryRunner createQueryRunner()\n+            throws Exception\n+    {\n+        String prestoServerPath = System.getenv(\"PRESTO_SERVER\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c959c386ddd015103d10b18789f4e343345734c8"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc3NzAwNg==", "bodyText": "Maybe annotate this as @Experimental so people who are unawares don't try to run it locally (I presume there's no well known way to get this to work right now?)", "url": "https://github.com/prestodb/presto/pull/15141#discussion_r485777006", "createdAt": "2020-09-09T16:58:44Z", "author": {"login": "tdcmeehan"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveNativeWorkersQueries.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.testing.QueryRunner;\n+import com.facebook.presto.tests.AbstractTestQueryFramework;\n+import com.facebook.presto.tests.DistributedQueryRunner;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static io.airlift.tpch.TpchTable.NATION;\n+\n+public class TestHiveNativeWorkersQueries", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c959c386ddd015103d10b18789f4e343345734c8"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1MjI0NDI5", "url": "https://github.com/prestodb/presto/pull/15141#pullrequestreview-485224429", "createdAt": "2020-09-09T17:04:10Z", "commit": {"oid": "c959c386ddd015103d10b18789f4e343345734c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNzowNDoxMFrOHPRrJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNzowNDoxMFrOHPRrJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc4MDI2Mw==", "bodyText": "It would be nice to have a default which just loads up Presto Java workers.  That would ensure this test actually works, and potentially spot and document discrepancies between Java vs. custom workers. (Also, it would allow us to include at least that version in our CI system.)", "url": "https://github.com/prestodb/presto/pull/15141#discussion_r485780263", "createdAt": "2020-09-09T17:04:10Z", "author": {"login": "tdcmeehan"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveNativeWorkersQueries.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.testing.QueryRunner;\n+import com.facebook.presto.tests.AbstractTestQueryFramework;\n+import com.facebook.presto.tests.DistributedQueryRunner;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static io.airlift.tpch.TpchTable.NATION;\n+\n+public class TestHiveNativeWorkersQueries", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c959c386ddd015103d10b18789f4e343345734c8"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1Mjc0NzE4", "url": "https://github.com/prestodb/presto/pull/15141#pullrequestreview-485274718", "createdAt": "2020-09-09T18:09:04Z", "commit": {"oid": "c959c386ddd015103d10b18789f4e343345734c8"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODowOTowNFrOHPT60g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODoxNTozNFrOHPUIEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgxNzA0Mg==", "bodyText": "Maybe use createTempDirectory. Some OS doesn't have /tmp dir.", "url": "https://github.com/prestodb/presto/pull/15141#discussion_r485817042", "createdAt": "2020-09-09T18:09:04Z", "author": {"login": "highker"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveNativeWorkersQueries.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.testing.QueryRunner;\n+import com.facebook.presto.tests.AbstractTestQueryFramework;\n+import com.facebook.presto.tests.DistributedQueryRunner;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static io.airlift.tpch.TpchTable.NATION;\n+\n+public class TestHiveNativeWorkersQueries\n+        extends AbstractTestQueryFramework\n+{\n+    protected TestHiveNativeWorkersQueries()\n+    {\n+        super(TestHiveNativeWorkersQueries::createQueryRunner);\n+    }\n+\n+    private static QueryRunner createQueryRunner()\n+            throws Exception\n+    {\n+        String prestoServerPath = System.getenv(\"PRESTO_SERVER\");\n+        checkArgument(prestoServerPath != null,\n+                \"Path to native Presto server binary is missing. Specify it using PRESTO_SERVER environment variable.\");\n+\n+        String baseDataDir = System.getenv(\"DATA_DIR\");\n+        checkArgument(baseDataDir != null,\n+                \"Path to data files is missing. Specify it using DATA_DIR environment variable\");\n+\n+        // Make TPC-H tables in DWRF format using Java-based workers\n+        HiveQueryRunner.createQueryRunner(ImmutableList.of(NATION),\n+                ImmutableMap.of(),\n+                \"sql-standard\",\n+                ImmutableMap.of(\"hive.storage-format\", \"DWRF\"),\n+                Optional.of(Paths.get(baseDataDir))).close();\n+\n+        // Make query runner with native workers for tests\n+        DistributedQueryRunner queryRunner = HiveQueryRunner.createQueryRunner(ImmutableList.of(NATION),\n+                ImmutableMap.of(\"optimizer.optimize-hash-generation\", \"false\"),\n+                ImmutableMap.of(),\n+                \"sql-standard\",\n+                ImmutableMap.of(),\n+                Optional.of(1),\n+                Optional.of(Paths.get(baseDataDir)),\n+                Optional.of((workerIndex, discoveryUrl) -> {\n+                    try {\n+                        if (workerIndex == 0) {\n+                            // Write discovery URL to /tmp/config.properties\n+                            Files.write(Paths.get(\"/tmp/config.properties\"),\n+                                    String.format(\"discovery.uri=%s\\n\", discoveryUrl).getBytes());\n+                        }\n+                        return new ProcessBuilder(prestoServerPath, \"--logtostderr=1\", \"--v=1\")\n+                                .directory(Paths.get(\"/tmp\").toFile())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c959c386ddd015103d10b18789f4e343345734c8"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgxOTcwNg==", "bodyText": "maybe just fail it hard and force the caller to set \"node-scheduler.include-coordinator\", \"false\"?", "url": "https://github.com/prestodb/presto/pull/15141#discussion_r485819706", "createdAt": "2020-09-09T18:14:14Z", "author": {"login": "highker"}, "path": "presto-tests/src/main/java/com/facebook/presto/tests/DistributedQueryRunner.java", "diffHunk": "@@ -136,19 +139,42 @@ private DistributedQueryRunner(\n             discoveryServer = new TestingDiscoveryServer(environment);\n             closer.register(() -> closeUnchecked(discoveryServer));\n             log.info(\"Created TestingDiscoveryServer in %s\", nanosSince(start).convertToMostSuccinctTimeUnit());\n+            URI discoveryUrl = discoveryServer.getBaseUrl();\n+            log.info(\"Discovery URL %s\", discoveryUrl);\n+\n+            if (nativeWorkerLauncher.isPresent()) {\n+                ImmutableList.Builder<Process> nativeWorkersBuilder = ImmutableList.builder();\n+                for (int i = 0; i < nodeCount; i++) {\n+                    nativeWorkersBuilder.add(nativeWorkerLauncher.get().apply(i, discoveryUrl));\n+                }\n+                nativeWorkers = nativeWorkersBuilder.build();\n+                closer.register(() -> {\n+                    for (Process nativeWorker : nativeWorkers) {\n+                        nativeWorker.destroyForcibly();\n+                    }\n+                });\n+            }\n+            else {\n+                nativeWorkers = ImmutableList.of();\n+            }\n \n             ImmutableList.Builder<TestingPrestoServer> servers = ImmutableList.builder();\n-\n-            for (int i = 1; i < nodeCount; i++) {\n-                TestingPrestoServer worker = closer.register(createTestingPrestoServer(discoveryServer.getBaseUrl(), false, extraProperties, parserOptions, environment, baseDataDir));\n-                servers.add(worker);\n+            if (!nativeWorkerLauncher.isPresent()) {\n+                for (int i = 1; i < nodeCount; i++) {\n+                    TestingPrestoServer worker = closer.register(createTestingPrestoServer(discoveryUrl, false, extraProperties, parserOptions, environment, baseDataDir));\n+                    servers.add(worker);\n+                }\n             }\n \n             Map<String, String> extraCoordinatorProperties = new HashMap<>();\n+            if (nativeWorkerLauncher.isPresent()) {\n+                // Don't use coordinator as worker\n+                extraCoordinatorProperties.put(\"node-scheduler.include-coordinator\", \"false\");\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c959c386ddd015103d10b18789f4e343345734c8"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgyMDQzMg==", "bodyText": "Move the first param to its own line", "url": "https://github.com/prestodb/presto/pull/15141#discussion_r485820432", "createdAt": "2020-09-09T18:15:34Z", "author": {"login": "highker"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveNativeWorkersQueries.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.testing.QueryRunner;\n+import com.facebook.presto.tests.AbstractTestQueryFramework;\n+import com.facebook.presto.tests.DistributedQueryRunner;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static io.airlift.tpch.TpchTable.NATION;\n+\n+public class TestHiveNativeWorkersQueries\n+        extends AbstractTestQueryFramework\n+{\n+    protected TestHiveNativeWorkersQueries()\n+    {\n+        super(TestHiveNativeWorkersQueries::createQueryRunner);\n+    }\n+\n+    private static QueryRunner createQueryRunner()\n+            throws Exception\n+    {\n+        String prestoServerPath = System.getenv(\"PRESTO_SERVER\");\n+        checkArgument(prestoServerPath != null,\n+                \"Path to native Presto server binary is missing. Specify it using PRESTO_SERVER environment variable.\");\n+\n+        String baseDataDir = System.getenv(\"DATA_DIR\");\n+        checkArgument(baseDataDir != null,\n+                \"Path to data files is missing. Specify it using DATA_DIR environment variable\");\n+\n+        // Make TPC-H tables in DWRF format using Java-based workers\n+        HiveQueryRunner.createQueryRunner(ImmutableList.of(NATION),\n+                ImmutableMap.of(),\n+                \"sql-standard\",\n+                ImmutableMap.of(\"hive.storage-format\", \"DWRF\"),\n+                Optional.of(Paths.get(baseDataDir))).close();\n+\n+        // Make query runner with native workers for tests\n+        DistributedQueryRunner queryRunner = HiveQueryRunner.createQueryRunner(ImmutableList.of(NATION),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c959c386ddd015103d10b18789f4e343345734c8"}, "originalPosition": 59}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c959c386ddd015103d10b18789f4e343345734c8", "author": {"user": {"login": "mbasmanova", "name": "Maria Basmanova"}}, "url": "https://github.com/prestodb/presto/commit/c959c386ddd015103d10b18789f4e343345734c8", "committedDate": "2020-09-09T00:21:59Z", "message": "Add test infrastructure to run queries using native workers\n\nExtend HiveQueryRunner and DistributedQueryRunner to allow for setting up a\nJava-based coordinator and a set of native workers. Native workers are created\nby launching separate processes using native binary. The path to the binary is\nspecified using PRESTO_SERVER environment variable. The new test that uses\nthis infrastructure, TestHiveNativeWorkersQueries.java, is disabled by\ndefault. In the future, we'll figure out how to get native worker binary on a\nCI machine to enable this test.\n\nThe new test passed locally."}, "afterCommit": {"oid": "703ea3e574c51ca54da82cfca3dfb84f60bfba34", "author": {"user": {"login": "mbasmanova", "name": "Maria Basmanova"}}, "url": "https://github.com/prestodb/presto/commit/703ea3e574c51ca54da82cfca3dfb84f60bfba34", "committedDate": "2020-09-09T19:38:57Z", "message": "Add test infrastructure to run queries using native workers\n\nExtend HiveQueryRunner and DistributedQueryRunner to allow for setting up a\nJava-based coordinator and a set of native workers. Native workers are created\nby launching separate processes using native binary. The path to the binary is\nspecified using PRESTO_SERVER environment variable. The new test that uses\nthis infrastructure, TestHiveNativeWorkersQueries.java, is disabled by\ndefault. In the future, we'll figure out how to get native worker binary on a\nCI machine to enable this test.\n\nThe new test passed locally."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76946cb802b580fdb80fff9ed48dea826aef8538", "author": {"user": {"login": "mbasmanova", "name": "Maria Basmanova"}}, "url": "https://github.com/prestodb/presto/commit/76946cb802b580fdb80fff9ed48dea826aef8538", "committedDate": "2020-09-09T20:30:36Z", "message": "Add test infrastructure to run queries using native workers\n\nExtend HiveQueryRunner and DistributedQueryRunner to allow for setting up a\nJava-based coordinator and a set of native workers. Native workers are created\nby launching separate processes using native binary. The path to the binary is\nspecified using PRESTO_SERVER environment variable. The new test that uses\nthis infrastructure, TestHiveNativeWorkersQueries.java, is disabled by\ndefault. In the future, we'll figure out how to get native worker binary on a\nCI machine to enable this test.\n\nThe new test passed locally."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "703ea3e574c51ca54da82cfca3dfb84f60bfba34", "author": {"user": {"login": "mbasmanova", "name": "Maria Basmanova"}}, "url": "https://github.com/prestodb/presto/commit/703ea3e574c51ca54da82cfca3dfb84f60bfba34", "committedDate": "2020-09-09T19:38:57Z", "message": "Add test infrastructure to run queries using native workers\n\nExtend HiveQueryRunner and DistributedQueryRunner to allow for setting up a\nJava-based coordinator and a set of native workers. Native workers are created\nby launching separate processes using native binary. The path to the binary is\nspecified using PRESTO_SERVER environment variable. The new test that uses\nthis infrastructure, TestHiveNativeWorkersQueries.java, is disabled by\ndefault. In the future, we'll figure out how to get native worker binary on a\nCI machine to enable this test.\n\nThe new test passed locally."}, "afterCommit": {"oid": "76946cb802b580fdb80fff9ed48dea826aef8538", "author": {"user": {"login": "mbasmanova", "name": "Maria Basmanova"}}, "url": "https://github.com/prestodb/presto/commit/76946cb802b580fdb80fff9ed48dea826aef8538", "committedDate": "2020-09-09T20:30:36Z", "message": "Add test infrastructure to run queries using native workers\n\nExtend HiveQueryRunner and DistributedQueryRunner to allow for setting up a\nJava-based coordinator and a set of native workers. Native workers are created\nby launching separate processes using native binary. The path to the binary is\nspecified using PRESTO_SERVER environment variable. The new test that uses\nthis infrastructure, TestHiveNativeWorkersQueries.java, is disabled by\ndefault. In the future, we'll figure out how to get native worker binary on a\nCI machine to enable this test.\n\nThe new test passed locally."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1NDExNTEx", "url": "https://github.com/prestodb/presto/pull/15141#pullrequestreview-485411511", "createdAt": "2020-09-09T21:19:42Z", "commit": {"oid": "76946cb802b580fdb80fff9ed48dea826aef8538"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MTU5NTE4", "url": "https://github.com/prestodb/presto/pull/15141#pullrequestreview-486159518", "createdAt": "2020-09-10T17:32:22Z", "commit": {"oid": "76946cb802b580fdb80fff9ed48dea826aef8538"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 91, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}