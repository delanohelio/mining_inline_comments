{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxNjEzNzM3", "number": 14181, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxODowNzowOFrODkwn2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMDowODowOFrODkzGPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODcxOTYxOnYy", "diffSide": "RIGHT", "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/framework/LimitQueryDeterminismAnalyzer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxODowNzowOFrOFxQw0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxODowNzowOFrOFxQw0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE5OTE4NA==", "bodyText": "javadoc maybe?", "url": "https://github.com/prestodb/presto/pull/14181#discussion_r387199184", "createdAt": "2020-03-03T18:07:08Z", "author": {"login": "mbasmanova"}, "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/framework/LimitQueryDeterminismAnalyzer.java", "diffHunk": "@@ -126,20 +142,82 @@ private LimitQueryDeterminismAnalysis analyzeQuery(Query query)\n         }\n         long limit = parseLong(query.getLimit().get());\n         Optional<String> newLimit = Optional.of(Long.toString(limit + 1));\n+\n         Query newLimitQuery = new Query(query.getWith(), query.getQueryBody(), Optional.empty(), newLimit);\n         return analyzeLimitNoOrderBy(newLimitQuery, limit);\n     }\n \n+    // To check whether all ORDER BY columns are matching between the n-th and the (n+1)-th row, we", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b21cd3caaf1ff2d7ddef492b166e2cc15f051f48"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODkxODA1OnYy", "diffSide": "RIGHT", "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/framework/LimitQueryDeterminismAnalyzer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxOTowNjoxN1rOFxSuyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxOTowNjoxN1rOFxSuyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIzMTQzMg==", "bodyText": "it is too late to check name and index for null; if they were nulls the checkState would already fail with NPE; consider moving checkState after assignments", "url": "https://github.com/prestodb/presto/pull/14181#discussion_r387231432", "createdAt": "2020-03-03T19:06:17Z", "author": {"login": "mbasmanova"}, "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/framework/LimitQueryDeterminismAnalyzer.java", "diffHunk": "@@ -175,8 +253,89 @@ private LimitQueryDeterminismAnalysis analyzeLimitNoOrderBy(Query newLimitQuery,\n         return FAILED_DATA_CHANGED;\n     }\n \n+    private LimitQueryDeterminismAnalysis analyzeLimitOrderBy(Query tieInspectorQuery, List<ColumnNameOrIndex> orderByKeys, long limit)\n+    {\n+        QueryResult<List<Object>> result = callWithQueryStatsConsumer(\n+                () -> prestoAction.execute(tieInspectorQuery, DETERMINISM_ANALYSIS, new TieInspector(limit)),\n+                stats -> verificationContext.setLimitQueryAnalysisQueryId(stats.getQueryId()));\n+        if (result.getResults().isEmpty()) {\n+            return FAILED_DATA_CHANGED;\n+        }\n+        if (result.getResults().size() == 1) {\n+            return DETERMINISTIC;\n+        }\n+\n+        List<Object> row1 = result.getResults().get(0);\n+        List<Object> row2 = result.getResults().get(1);\n+        checkState(row1.size() == row2.size(), \"Rows have different sizes: %s %s\", row1.size(), row2.size());\n+        for (ColumnNameOrIndex orderByKey : orderByKeys) {\n+            int columnIndex = orderByKey.getIndex().isPresent()\n+                    ? orderByKey.getIndex().get()\n+                    : result.getColumnIndex(orderByKey.getName().orElseThrow(() -> new IllegalArgumentException(format(\"Invalid orderByKey: %s\", orderByKey))));\n+            if (!Objects.equals(row1.get(columnIndex), row2.get(columnIndex))) {\n+                return DETERMINISTIC;\n+            }\n+        }\n+        return NON_DETERMINISTIC;\n+    }\n+\n     private static boolean isLimitAll(String limitClause)\n     {\n         return limitClause.toLowerCase(ENGLISH).equals(\"all\");\n     }\n+\n+    private static class ColumnNameOrIndex\n+    {\n+        private final Optional<String> name;\n+        private final Optional<Integer> index;\n+\n+        private ColumnNameOrIndex(Optional<String> name, Optional<Integer> index)\n+        {\n+            checkState(name.isPresent() ^ index.isPresent(), \"Exactly one of name and index must be present: %s %s\", name, index);\n+            this.name = requireNonNull(name, \"name is null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b21cd3caaf1ff2d7ddef492b166e2cc15f051f48"}, "originalPosition": 175}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTEyNTExOnYy", "diffSide": "RIGHT", "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/framework/LimitQueryDeterminismAnalyzer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMDowODowOFrOFxUwJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMDowODowOFrOFxUwJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI2NDU0OA==", "bodyText": "nit: .filter(SingleColumn.class::isInstance)", "url": "https://github.com/prestodb/presto/pull/14181#discussion_r387264548", "createdAt": "2020-03-03T20:08:08Z", "author": {"login": "mbasmanova"}, "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/framework/LimitQueryDeterminismAnalyzer.java", "diffHunk": "@@ -126,20 +142,82 @@ private LimitQueryDeterminismAnalysis analyzeQuery(Query query)\n         }\n         long limit = parseLong(query.getLimit().get());\n         Optional<String> newLimit = Optional.of(Long.toString(limit + 1));\n+\n         Query newLimitQuery = new Query(query.getWith(), query.getQueryBody(), Optional.empty(), newLimit);\n         return analyzeLimitNoOrderBy(newLimitQuery, limit);\n     }\n \n+    // To check whether all ORDER BY columns are matching between the n-th and the (n+1)-th row, we\n+    // may need to project additional columns.\n+    // Takes in the list of SelectItems of the original query and append additional SelectItems to\n+    // the list. Return the a list ColumnNameOrIndex, which tells us how to find the ORDER BY columns\n+    // from the query result.\n+    private List<ColumnNameOrIndex> populateSelectItems(List<SelectItem> selectItems, OrderBy orderBy)\n+    {\n+        Set<String> aliases = selectItems.stream()\n+                .filter(item -> item instanceof SingleColumn)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b21cd3caaf1ff2d7ddef492b166e2cc15f051f48"}, "originalPosition": 65}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3121, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}