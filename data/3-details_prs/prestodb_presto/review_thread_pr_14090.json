{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0NDc5MDI2", "number": 14090, "reviewThreads": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMzozOToyMFrODfvDng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMzoyMzowOFrODghhKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NjAzNDIyOnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/functions/ip.rst", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMzozOToyMFrOFpnUGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMzo0MzozOVrOFpnZ2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE4MDA1OA==", "bodyText": "you can do IPADDRESS'192.168.255.255'.", "url": "https://github.com/prestodb/presto/pull/14090#discussion_r379180058", "createdAt": "2020-02-13T23:39:20Z", "author": {"login": "rongrong"}, "path": "presto-docs/src/main/sphinx/functions/ip.rst", "diffHunk": "@@ -10,3 +10,42 @@ IP Functions\n         SELECT ip_prefix(CAST('192.168.255.255' AS IPADDRESS), 9); -- {192.128.0.0/9}\n         SELECT ip_prefix('2001:0db8:85a3:0001:0001:8a2e:0370:7334', 48); -- {2001:db8:85a3::/48}\n \n+.. function:: ip_subnet_min(ip_prefix) -> ip_address\n+\n+    Returns the first/smallest IP address of type ``IPADDRESS`` in the subnet\n+    specified by ``ip_prefix``. ::\n+\n+        SELECT ip_subnet_min(ip_prefix(CAST('192.168.255.255' AS IPADDRESS), 9)); -- {192.128.0.0}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1509128a9f55fdcf9efd68be443d377f10e2fae7"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE4MTUzMQ==", "bodyText": "Or just use IPPREFIX'192.168.255.255/9'", "url": "https://github.com/prestodb/presto/pull/14090#discussion_r379181531", "createdAt": "2020-02-13T23:43:39Z", "author": {"login": "rongrong"}, "path": "presto-docs/src/main/sphinx/functions/ip.rst", "diffHunk": "@@ -10,3 +10,42 @@ IP Functions\n         SELECT ip_prefix(CAST('192.168.255.255' AS IPADDRESS), 9); -- {192.128.0.0/9}\n         SELECT ip_prefix('2001:0db8:85a3:0001:0001:8a2e:0370:7334', 48); -- {2001:db8:85a3::/48}\n \n+.. function:: ip_subnet_min(ip_prefix) -> ip_address\n+\n+    Returns the first/smallest IP address of type ``IPADDRESS`` in the subnet\n+    specified by ``ip_prefix``. ::\n+\n+        SELECT ip_subnet_min(ip_prefix(CAST('192.168.255.255' AS IPADDRESS), 9)); -- {192.128.0.0}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE4MDA1OA=="}, "originalCommit": {"oid": "1509128a9f55fdcf9efd68be443d377f10e2fae7"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NjA0MTEzOnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/functions/ip.rst", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMzo0MTo1MlrOFpnX8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxODowMzowOVrOFp_DyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE4MTA0Mw==", "bodyText": "Just use smallest. I'm not sure what does \"first\" mean here. Is the term used in IP subnet?", "url": "https://github.com/prestodb/presto/pull/14090#discussion_r379181043", "createdAt": "2020-02-13T23:41:52Z", "author": {"login": "rongrong"}, "path": "presto-docs/src/main/sphinx/functions/ip.rst", "diffHunk": "@@ -10,3 +10,42 @@ IP Functions\n         SELECT ip_prefix(CAST('192.168.255.255' AS IPADDRESS), 9); -- {192.128.0.0/9}\n         SELECT ip_prefix('2001:0db8:85a3:0001:0001:8a2e:0370:7334', 48); -- {2001:db8:85a3::/48}\n \n+.. function:: ip_subnet_min(ip_prefix) -> ip_address\n+\n+    Returns the first/smallest IP address of type ``IPADDRESS`` in the subnet", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1509128a9f55fdcf9efd68be443d377f10e2fae7"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU2OTA5Ng==", "bodyText": "I dont know either. Lets just go ahead with smallest.", "url": "https://github.com/prestodb/presto/pull/14090#discussion_r379569096", "createdAt": "2020-02-14T18:03:09Z", "author": {"login": "NikhilCollooru"}, "path": "presto-docs/src/main/sphinx/functions/ip.rst", "diffHunk": "@@ -10,3 +10,42 @@ IP Functions\n         SELECT ip_prefix(CAST('192.168.255.255' AS IPADDRESS), 9); -- {192.128.0.0/9}\n         SELECT ip_prefix('2001:0db8:85a3:0001:0001:8a2e:0370:7334', 48); -- {2001:db8:85a3::/48}\n \n+.. function:: ip_subnet_min(ip_prefix) -> ip_address\n+\n+    Returns the first/smallest IP address of type ``IPADDRESS`` in the subnet", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE4MTA0Mw=="}, "originalCommit": {"oid": "1509128a9f55fdcf9efd68be443d377f10e2fae7"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NjA0MjA1OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/functions/ip.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMzo0MjoyNFrOFpnYfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMzo0MjoyNFrOFpnYfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE4MTE4Mw==", "bodyText": "use \"largest\" corresponding to \"smallest\" in ip_subnet_min", "url": "https://github.com/prestodb/presto/pull/14090#discussion_r379181183", "createdAt": "2020-02-13T23:42:24Z", "author": {"login": "rongrong"}, "path": "presto-docs/src/main/sphinx/functions/ip.rst", "diffHunk": "@@ -10,3 +10,42 @@ IP Functions\n         SELECT ip_prefix(CAST('192.168.255.255' AS IPADDRESS), 9); -- {192.128.0.0/9}\n         SELECT ip_prefix('2001:0db8:85a3:0001:0001:8a2e:0370:7334', 48); -- {2001:db8:85a3::/48}\n \n+.. function:: ip_subnet_min(ip_prefix) -> ip_address\n+\n+    Returns the first/smallest IP address of type ``IPADDRESS`` in the subnet\n+    specified by ``ip_prefix``. ::\n+\n+        SELECT ip_subnet_min(ip_prefix(CAST('192.168.255.255' AS IPADDRESS), 9)); -- {192.128.0.0}\n+        SELECT ip_subnet_min(ip_prefix('2001:0db8:85a3:0001:0001:8a2e:0370:7334', 48)); -- {2001:db8:85a3::}\n+\n+.. function:: ip_subnet_max(ip_prefix) -> ip_address\n+\n+    Returns the last/maximum IP address of type ``IPADDRESS`` in the subnet", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1509128a9f55fdcf9efd68be443d377f10e2fae7"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NjA0NjkyOnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/functions/ip.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMzo0NToxMlrOFpnbmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMzo0NToxMlrOFpnbmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE4MTk3OA==", "bodyText": "use two different variable to the description is clearer. is_subnet_of(ip_prefix1, ip_prefix2) -> boolean", "url": "https://github.com/prestodb/presto/pull/14090#discussion_r379181978", "createdAt": "2020-02-13T23:45:12Z", "author": {"login": "rongrong"}, "path": "presto-docs/src/main/sphinx/functions/ip.rst", "diffHunk": "@@ -10,3 +10,42 @@ IP Functions\n         SELECT ip_prefix(CAST('192.168.255.255' AS IPADDRESS), 9); -- {192.128.0.0/9}\n         SELECT ip_prefix('2001:0db8:85a3:0001:0001:8a2e:0370:7334', 48); -- {2001:db8:85a3::/48}\n \n+.. function:: ip_subnet_min(ip_prefix) -> ip_address\n+\n+    Returns the first/smallest IP address of type ``IPADDRESS`` in the subnet\n+    specified by ``ip_prefix``. ::\n+\n+        SELECT ip_subnet_min(ip_prefix(CAST('192.168.255.255' AS IPADDRESS), 9)); -- {192.128.0.0}\n+        SELECT ip_subnet_min(ip_prefix('2001:0db8:85a3:0001:0001:8a2e:0370:7334', 48)); -- {2001:db8:85a3::}\n+\n+.. function:: ip_subnet_max(ip_prefix) -> ip_address\n+\n+    Returns the last/maximum IP address of type ``IPADDRESS`` in the subnet\n+    specified by ``ip_prefix``. ::\n+\n+        SELECT ip_subnet_max(ip_prefix(CAST('192.64.0.0' AS IPADDRESS), 9)); -- {192.127.255.255}\n+        SELECT ip_subnet_max(ip_prefix('2001:0db8:85a3:0001:0001:8a2e:0370:7334', 48)); -- {2001:db8:85a3:ffff:ffff:ffff:ffff:ffff}\n+\n+.. function:: ip_subnet_range(ip_prefix) -> array(ip_address)\n+\n+    Returns an array of ``ip_address`` of size 2 and of type ``IPADDRESS``.\n+    It contains the first/smallest IP address and the last/maximum IP address\n+    of the subnet specified by ``ip_prefix``. ::\n+\n+        SELECT ip_subnet_range(ip_prefix('1.2.3.160', 24)); -- [{1.2.3.0}, {1.2.3.255}]\n+        SELECT ip_subnet_range(ip_prefix('64:ff9b::52f4', 120)); -- [{64:ff9b::5200}, {64:ff9b::52ff}]\n+\n+.. function:: is_subnet_of(ip_prefix, ip_address) -> boolean\n+\n+    Returns ``true`` if the ``ip_address`` lies within the subnet of ``ip_prefix``. ::\n+\n+        SELECT is_subnet_of(ip_prefix('1.2.3.128', 26), ipaddress '1.2.3.129'); -- true\n+        SELECT is_subnet_of(ip_prefix('64:fa9b::17', 64), ipaddress '64:ffff::17'); -- false\n+\n+.. function:: is_prefix_subnet_of(ip_prefix, ip_prefix) -> boolean", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1509128a9f55fdcf9efd68be443d377f10e2fae7"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NjA1NTI2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/IpPrefixFunctions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMzo0OTozNFrOFpng9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxODowNTowN1rOFp_HCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE4MzM1MQ==", "bodyText": "I don't understand this description. The grammar doesn't compute to me... -_-", "url": "https://github.com/prestodb/presto/pull/14090#discussion_r379183351", "createdAt": "2020-02-13T23:49:34Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/IpPrefixFunctions.java", "diffHunk": "@@ -40,16 +50,101 @@ private IpPrefixFunctions() {}\n     @ScalarFunction(\"ip_prefix\")\n     @SqlType(StandardTypes.IPPREFIX)\n     public static Slice ipPrefix(@SqlType(StandardTypes.IPADDRESS) Slice value, @SqlType(StandardTypes.BIGINT) long subnetSize)\n+    {\n+        InetAddress address = validateIpAddress(value);\n+        validateSubnetSize(address.getAddress(), subnetSize);\n+\n+        return castFromVarcharToIpPrefix(utf8Slice(InetAddresses.toAddrString(address) + \"/\" + subnetSize));\n+    }\n+\n+    @Description(\"IP prefix for a given IP address and subnet size\")\n+    @ScalarFunction(\"ip_prefix\")\n+    @LiteralParameters(\"x\")\n+    @SqlType(StandardTypes.IPPREFIX)\n+    public static Slice stringIpPrefix(@SqlType(\"varchar(x)\") Slice slice, @SqlType(StandardTypes.BIGINT) long subnetSize)\n+    {\n+        return ipPrefix(castFromVarcharToIpAddress(slice), subnetSize);\n+    }\n+\n+    @Description(\"First/Smallest subnet IP address for a given IP prefix\")\n+    @ScalarFunction(\"ip_subnet_min\")\n+    @SqlType(StandardTypes.IPADDRESS)\n+    public static Slice ipSubnetMin(@SqlType(StandardTypes.IPPREFIX) Slice value)\n+    {\n+        validateIpPrefixAndGetBytes(value);\n+        return castFromIpPrefixToIpAddress(value);\n+    }\n+\n+    @Description(\"Last/Maximum subnet IP address for a given IP prefix\")\n+    @ScalarFunction(\"ip_subnet_max\")\n+    @SqlType(StandardTypes.IPADDRESS)\n+    public static Slice ipSubnetMax(@SqlType(StandardTypes.IPPREFIX) Slice value)\n+    {\n+        byte[] address = validateIpPrefixAndGetBytes(value);\n+        int subnetSize = value.getByte(IPPREFIX.getFixedSize() - 1) & 0xFF;\n+\n+        if (address.length == 4) {\n+            for (int i = 0; i < 4; i++) {\n+                address[3 - i] |= (byte) ~(~0 << min(max((32 - subnetSize) - 8 * i, 0), 8));\n+            }\n+            byte[] bytes = new byte[16];\n+            bytes[10] = (byte) 0xff;\n+            bytes[11] = (byte) 0xff;\n+            arraycopy(address, 0, bytes, 12, 4);\n+            address = bytes;\n+        }\n+        else if (address.length == 16) {\n+            for (int i = 0; i < 16; i++) {\n+                address[15 - i] |= (byte) ~(~0 << min(max((128 - subnetSize) - 8 * i, 0), 8));\n+            }\n+        }\n+        return wrappedBuffer(address);\n+    }\n+\n+    @Description(\"Range of IP address's in the subnet of the IP prefix\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1509128a9f55fdcf9efd68be443d377f10e2fae7"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU2OTkzMA==", "bodyText": "Changed it to\n\"Array of smallest and largest IP address in the subnet of the given IP prefix\"", "url": "https://github.com/prestodb/presto/pull/14090#discussion_r379569930", "createdAt": "2020-02-14T18:05:07Z", "author": {"login": "NikhilCollooru"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/IpPrefixFunctions.java", "diffHunk": "@@ -40,16 +50,101 @@ private IpPrefixFunctions() {}\n     @ScalarFunction(\"ip_prefix\")\n     @SqlType(StandardTypes.IPPREFIX)\n     public static Slice ipPrefix(@SqlType(StandardTypes.IPADDRESS) Slice value, @SqlType(StandardTypes.BIGINT) long subnetSize)\n+    {\n+        InetAddress address = validateIpAddress(value);\n+        validateSubnetSize(address.getAddress(), subnetSize);\n+\n+        return castFromVarcharToIpPrefix(utf8Slice(InetAddresses.toAddrString(address) + \"/\" + subnetSize));\n+    }\n+\n+    @Description(\"IP prefix for a given IP address and subnet size\")\n+    @ScalarFunction(\"ip_prefix\")\n+    @LiteralParameters(\"x\")\n+    @SqlType(StandardTypes.IPPREFIX)\n+    public static Slice stringIpPrefix(@SqlType(\"varchar(x)\") Slice slice, @SqlType(StandardTypes.BIGINT) long subnetSize)\n+    {\n+        return ipPrefix(castFromVarcharToIpAddress(slice), subnetSize);\n+    }\n+\n+    @Description(\"First/Smallest subnet IP address for a given IP prefix\")\n+    @ScalarFunction(\"ip_subnet_min\")\n+    @SqlType(StandardTypes.IPADDRESS)\n+    public static Slice ipSubnetMin(@SqlType(StandardTypes.IPPREFIX) Slice value)\n+    {\n+        validateIpPrefixAndGetBytes(value);\n+        return castFromIpPrefixToIpAddress(value);\n+    }\n+\n+    @Description(\"Last/Maximum subnet IP address for a given IP prefix\")\n+    @ScalarFunction(\"ip_subnet_max\")\n+    @SqlType(StandardTypes.IPADDRESS)\n+    public static Slice ipSubnetMax(@SqlType(StandardTypes.IPPREFIX) Slice value)\n+    {\n+        byte[] address = validateIpPrefixAndGetBytes(value);\n+        int subnetSize = value.getByte(IPPREFIX.getFixedSize() - 1) & 0xFF;\n+\n+        if (address.length == 4) {\n+            for (int i = 0; i < 4; i++) {\n+                address[3 - i] |= (byte) ~(~0 << min(max((32 - subnetSize) - 8 * i, 0), 8));\n+            }\n+            byte[] bytes = new byte[16];\n+            bytes[10] = (byte) 0xff;\n+            bytes[11] = (byte) 0xff;\n+            arraycopy(address, 0, bytes, 12, 4);\n+            address = bytes;\n+        }\n+        else if (address.length == 16) {\n+            for (int i = 0; i < 16; i++) {\n+                address[15 - i] |= (byte) ~(~0 << min(max((128 - subnetSize) - 8 * i, 0), 8));\n+            }\n+        }\n+        return wrappedBuffer(address);\n+    }\n+\n+    @Description(\"Range of IP address's in the subnet of the IP prefix\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE4MzM1MQ=="}, "originalCommit": {"oid": "1509128a9f55fdcf9efd68be443d377f10e2fae7"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NjA1Nzg1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/IpPrefixFunctions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMzo1MTowNVrOFpnisw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMzo1MTowNVrOFpnisw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE4Mzc5NQ==", "bodyText": "You can annotate this with `@ScalarFunction(\"is_subnet_of\") so the name of the function is consistent with the other one.", "url": "https://github.com/prestodb/presto/pull/14090#discussion_r379183795", "createdAt": "2020-02-13T23:51:05Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/IpPrefixFunctions.java", "diffHunk": "@@ -40,16 +50,101 @@ private IpPrefixFunctions() {}\n     @ScalarFunction(\"ip_prefix\")\n     @SqlType(StandardTypes.IPPREFIX)\n     public static Slice ipPrefix(@SqlType(StandardTypes.IPADDRESS) Slice value, @SqlType(StandardTypes.BIGINT) long subnetSize)\n+    {\n+        InetAddress address = validateIpAddress(value);\n+        validateSubnetSize(address.getAddress(), subnetSize);\n+\n+        return castFromVarcharToIpPrefix(utf8Slice(InetAddresses.toAddrString(address) + \"/\" + subnetSize));\n+    }\n+\n+    @Description(\"IP prefix for a given IP address and subnet size\")\n+    @ScalarFunction(\"ip_prefix\")\n+    @LiteralParameters(\"x\")\n+    @SqlType(StandardTypes.IPPREFIX)\n+    public static Slice stringIpPrefix(@SqlType(\"varchar(x)\") Slice slice, @SqlType(StandardTypes.BIGINT) long subnetSize)\n+    {\n+        return ipPrefix(castFromVarcharToIpAddress(slice), subnetSize);\n+    }\n+\n+    @Description(\"First/Smallest subnet IP address for a given IP prefix\")\n+    @ScalarFunction(\"ip_subnet_min\")\n+    @SqlType(StandardTypes.IPADDRESS)\n+    public static Slice ipSubnetMin(@SqlType(StandardTypes.IPPREFIX) Slice value)\n+    {\n+        validateIpPrefixAndGetBytes(value);\n+        return castFromIpPrefixToIpAddress(value);\n+    }\n+\n+    @Description(\"Last/Maximum subnet IP address for a given IP prefix\")\n+    @ScalarFunction(\"ip_subnet_max\")\n+    @SqlType(StandardTypes.IPADDRESS)\n+    public static Slice ipSubnetMax(@SqlType(StandardTypes.IPPREFIX) Slice value)\n+    {\n+        byte[] address = validateIpPrefixAndGetBytes(value);\n+        int subnetSize = value.getByte(IPPREFIX.getFixedSize() - 1) & 0xFF;\n+\n+        if (address.length == 4) {\n+            for (int i = 0; i < 4; i++) {\n+                address[3 - i] |= (byte) ~(~0 << min(max((32 - subnetSize) - 8 * i, 0), 8));\n+            }\n+            byte[] bytes = new byte[16];\n+            bytes[10] = (byte) 0xff;\n+            bytes[11] = (byte) 0xff;\n+            arraycopy(address, 0, bytes, 12, 4);\n+            address = bytes;\n+        }\n+        else if (address.length == 16) {\n+            for (int i = 0; i < 16; i++) {\n+                address[15 - i] |= (byte) ~(~0 << min(max((128 - subnetSize) - 8 * i, 0), 8));\n+            }\n+        }\n+        return wrappedBuffer(address);\n+    }\n+\n+    @Description(\"Range of IP address's in the subnet of the IP prefix\")\n+    @ScalarFunction(\"ip_subnet_range\")\n+    @SqlType(\"array(IPADDRESS)\")\n+    public static Block ipSubnetRange(@SqlType(StandardTypes.IPPREFIX) Slice value)\n+    {\n+        validateIpPrefixAndGetBytes(value);\n+        BlockBuilder blockBuilder = IPADDRESS.createBlockBuilder(null, 2);\n+        IPADDRESS.writeSlice(blockBuilder, ipSubnetMin(value));\n+        IPADDRESS.writeSlice(blockBuilder, ipSubnetMax(value));\n+        return blockBuilder.build();\n+    }\n+\n+    @Description(\"Is the IP address in the subnet of IP prefix\")\n+    @ScalarFunction(\"is_subnet_of\")\n+    @SqlType(StandardTypes.BOOLEAN)\n+    public static boolean isSubnetOf(@SqlType(StandardTypes.IPPREFIX) Slice left, @SqlType(StandardTypes.IPADDRESS) Slice right)\n+    {\n+        validateIpAddress(right);\n+        return between(right, ipSubnetMin(left), ipSubnetMax(left));\n+    }\n+\n+    @Description(\"Is the second IP prefix argument within the subnet of the first IP prefix argument\")\n+    @ScalarFunction(\"is_prefix_subnet_of\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1509128a9f55fdcf9efd68be443d377f10e2fae7"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NjA2MzE0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/IpPrefixFunctions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMzo1NDowOFrOFpnl6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMzo1NDowOFrOFpnl6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE4NDYxNw==", "bodyText": "You can just name the variable ipAddress. The function should be named toInetAddress.", "url": "https://github.com/prestodb/presto/pull/14090#discussion_r379184617", "createdAt": "2020-02-13T23:54:08Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/IpPrefixFunctions.java", "diffHunk": "@@ -40,16 +50,101 @@ private IpPrefixFunctions() {}\n     @ScalarFunction(\"ip_prefix\")\n     @SqlType(StandardTypes.IPPREFIX)\n     public static Slice ipPrefix(@SqlType(StandardTypes.IPADDRESS) Slice value, @SqlType(StandardTypes.BIGINT) long subnetSize)\n+    {\n+        InetAddress address = validateIpAddress(value);\n+        validateSubnetSize(address.getAddress(), subnetSize);\n+\n+        return castFromVarcharToIpPrefix(utf8Slice(InetAddresses.toAddrString(address) + \"/\" + subnetSize));\n+    }\n+\n+    @Description(\"IP prefix for a given IP address and subnet size\")\n+    @ScalarFunction(\"ip_prefix\")\n+    @LiteralParameters(\"x\")\n+    @SqlType(StandardTypes.IPPREFIX)\n+    public static Slice stringIpPrefix(@SqlType(\"varchar(x)\") Slice slice, @SqlType(StandardTypes.BIGINT) long subnetSize)\n+    {\n+        return ipPrefix(castFromVarcharToIpAddress(slice), subnetSize);\n+    }\n+\n+    @Description(\"First/Smallest subnet IP address for a given IP prefix\")\n+    @ScalarFunction(\"ip_subnet_min\")\n+    @SqlType(StandardTypes.IPADDRESS)\n+    public static Slice ipSubnetMin(@SqlType(StandardTypes.IPPREFIX) Slice value)\n+    {\n+        validateIpPrefixAndGetBytes(value);\n+        return castFromIpPrefixToIpAddress(value);\n+    }\n+\n+    @Description(\"Last/Maximum subnet IP address for a given IP prefix\")\n+    @ScalarFunction(\"ip_subnet_max\")\n+    @SqlType(StandardTypes.IPADDRESS)\n+    public static Slice ipSubnetMax(@SqlType(StandardTypes.IPPREFIX) Slice value)\n+    {\n+        byte[] address = validateIpPrefixAndGetBytes(value);\n+        int subnetSize = value.getByte(IPPREFIX.getFixedSize() - 1) & 0xFF;\n+\n+        if (address.length == 4) {\n+            for (int i = 0; i < 4; i++) {\n+                address[3 - i] |= (byte) ~(~0 << min(max((32 - subnetSize) - 8 * i, 0), 8));\n+            }\n+            byte[] bytes = new byte[16];\n+            bytes[10] = (byte) 0xff;\n+            bytes[11] = (byte) 0xff;\n+            arraycopy(address, 0, bytes, 12, 4);\n+            address = bytes;\n+        }\n+        else if (address.length == 16) {\n+            for (int i = 0; i < 16; i++) {\n+                address[15 - i] |= (byte) ~(~0 << min(max((128 - subnetSize) - 8 * i, 0), 8));\n+            }\n+        }\n+        return wrappedBuffer(address);\n+    }\n+\n+    @Description(\"Range of IP address's in the subnet of the IP prefix\")\n+    @ScalarFunction(\"ip_subnet_range\")\n+    @SqlType(\"array(IPADDRESS)\")\n+    public static Block ipSubnetRange(@SqlType(StandardTypes.IPPREFIX) Slice value)\n+    {\n+        validateIpPrefixAndGetBytes(value);\n+        BlockBuilder blockBuilder = IPADDRESS.createBlockBuilder(null, 2);\n+        IPADDRESS.writeSlice(blockBuilder, ipSubnetMin(value));\n+        IPADDRESS.writeSlice(blockBuilder, ipSubnetMax(value));\n+        return blockBuilder.build();\n+    }\n+\n+    @Description(\"Is the IP address in the subnet of IP prefix\")\n+    @ScalarFunction(\"is_subnet_of\")\n+    @SqlType(StandardTypes.BOOLEAN)\n+    public static boolean isSubnetOf(@SqlType(StandardTypes.IPPREFIX) Slice left, @SqlType(StandardTypes.IPADDRESS) Slice right)\n+    {\n+        validateIpAddress(right);\n+        return between(right, ipSubnetMin(left), ipSubnetMax(left));\n+    }\n+\n+    @Description(\"Is the second IP prefix argument within the subnet of the first IP prefix argument\")\n+    @ScalarFunction(\"is_prefix_subnet_of\")\n+    @SqlType(StandardTypes.BOOLEAN)\n+    public static boolean isPrefixSubnetOf(@SqlType(StandardTypes.IPPREFIX) Slice left, @SqlType(StandardTypes.IPPREFIX) Slice right)\n+    {\n+        return between(ipSubnetMin(right), ipSubnetMin(left), ipSubnetMax(left)) && between(ipSubnetMax(right), ipSubnetMin(left), ipSubnetMax(left));\n+    }\n+\n+    private static InetAddress validateIpAddress(Slice ipAddressSlice)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1509128a9f55fdcf9efd68be443d377f10e2fae7"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NjA3MDEwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/IpPrefixFunctions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMzo1Nzo0NFrOFpnqGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMzo1Nzo0NFrOFpnqGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE4NTY4OA==", "bodyText": "Maybe just \"Smallest IP address for a given IP prefix\"", "url": "https://github.com/prestodb/presto/pull/14090#discussion_r379185688", "createdAt": "2020-02-13T23:57:44Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/IpPrefixFunctions.java", "diffHunk": "@@ -40,16 +50,101 @@ private IpPrefixFunctions() {}\n     @ScalarFunction(\"ip_prefix\")\n     @SqlType(StandardTypes.IPPREFIX)\n     public static Slice ipPrefix(@SqlType(StandardTypes.IPADDRESS) Slice value, @SqlType(StandardTypes.BIGINT) long subnetSize)\n+    {\n+        InetAddress address = validateIpAddress(value);\n+        validateSubnetSize(address.getAddress(), subnetSize);\n+\n+        return castFromVarcharToIpPrefix(utf8Slice(InetAddresses.toAddrString(address) + \"/\" + subnetSize));\n+    }\n+\n+    @Description(\"IP prefix for a given IP address and subnet size\")\n+    @ScalarFunction(\"ip_prefix\")\n+    @LiteralParameters(\"x\")\n+    @SqlType(StandardTypes.IPPREFIX)\n+    public static Slice stringIpPrefix(@SqlType(\"varchar(x)\") Slice slice, @SqlType(StandardTypes.BIGINT) long subnetSize)\n+    {\n+        return ipPrefix(castFromVarcharToIpAddress(slice), subnetSize);\n+    }\n+\n+    @Description(\"First/Smallest subnet IP address for a given IP prefix\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1509128a9f55fdcf9efd68be443d377f10e2fae7"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NjEwOTg5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/IpPrefixFunctions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwMDoxOTo0OFrOFpoCQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxODowNTo0N1rOFp_IFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE5MTg3NA==", "bodyText": "The value is validated 3 times in this function.", "url": "https://github.com/prestodb/presto/pull/14090#discussion_r379191874", "createdAt": "2020-02-14T00:19:48Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/IpPrefixFunctions.java", "diffHunk": "@@ -40,16 +50,101 @@ private IpPrefixFunctions() {}\n     @ScalarFunction(\"ip_prefix\")\n     @SqlType(StandardTypes.IPPREFIX)\n     public static Slice ipPrefix(@SqlType(StandardTypes.IPADDRESS) Slice value, @SqlType(StandardTypes.BIGINT) long subnetSize)\n+    {\n+        InetAddress address = validateIpAddress(value);\n+        validateSubnetSize(address.getAddress(), subnetSize);\n+\n+        return castFromVarcharToIpPrefix(utf8Slice(InetAddresses.toAddrString(address) + \"/\" + subnetSize));\n+    }\n+\n+    @Description(\"IP prefix for a given IP address and subnet size\")\n+    @ScalarFunction(\"ip_prefix\")\n+    @LiteralParameters(\"x\")\n+    @SqlType(StandardTypes.IPPREFIX)\n+    public static Slice stringIpPrefix(@SqlType(\"varchar(x)\") Slice slice, @SqlType(StandardTypes.BIGINT) long subnetSize)\n+    {\n+        return ipPrefix(castFromVarcharToIpAddress(slice), subnetSize);\n+    }\n+\n+    @Description(\"First/Smallest subnet IP address for a given IP prefix\")\n+    @ScalarFunction(\"ip_subnet_min\")\n+    @SqlType(StandardTypes.IPADDRESS)\n+    public static Slice ipSubnetMin(@SqlType(StandardTypes.IPPREFIX) Slice value)\n+    {\n+        validateIpPrefixAndGetBytes(value);\n+        return castFromIpPrefixToIpAddress(value);\n+    }\n+\n+    @Description(\"Last/Maximum subnet IP address for a given IP prefix\")\n+    @ScalarFunction(\"ip_subnet_max\")\n+    @SqlType(StandardTypes.IPADDRESS)\n+    public static Slice ipSubnetMax(@SqlType(StandardTypes.IPPREFIX) Slice value)\n+    {\n+        byte[] address = validateIpPrefixAndGetBytes(value);\n+        int subnetSize = value.getByte(IPPREFIX.getFixedSize() - 1) & 0xFF;\n+\n+        if (address.length == 4) {\n+            for (int i = 0; i < 4; i++) {\n+                address[3 - i] |= (byte) ~(~0 << min(max((32 - subnetSize) - 8 * i, 0), 8));\n+            }\n+            byte[] bytes = new byte[16];\n+            bytes[10] = (byte) 0xff;\n+            bytes[11] = (byte) 0xff;\n+            arraycopy(address, 0, bytes, 12, 4);\n+            address = bytes;\n+        }\n+        else if (address.length == 16) {\n+            for (int i = 0; i < 16; i++) {\n+                address[15 - i] |= (byte) ~(~0 << min(max((128 - subnetSize) - 8 * i, 0), 8));\n+            }\n+        }\n+        return wrappedBuffer(address);\n+    }\n+\n+    @Description(\"Range of IP address's in the subnet of the IP prefix\")\n+    @ScalarFunction(\"ip_subnet_range\")\n+    @SqlType(\"array(IPADDRESS)\")\n+    public static Block ipSubnetRange(@SqlType(StandardTypes.IPPREFIX) Slice value)\n+    {\n+        validateIpPrefixAndGetBytes(value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1509128a9f55fdcf9efd68be443d377f10e2fae7"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU3MDE5OA==", "bodyText": "Removed the validation part. Since the IPREFIX input will always be valid.", "url": "https://github.com/prestodb/presto/pull/14090#discussion_r379570198", "createdAt": "2020-02-14T18:05:47Z", "author": {"login": "NikhilCollooru"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/IpPrefixFunctions.java", "diffHunk": "@@ -40,16 +50,101 @@ private IpPrefixFunctions() {}\n     @ScalarFunction(\"ip_prefix\")\n     @SqlType(StandardTypes.IPPREFIX)\n     public static Slice ipPrefix(@SqlType(StandardTypes.IPADDRESS) Slice value, @SqlType(StandardTypes.BIGINT) long subnetSize)\n+    {\n+        InetAddress address = validateIpAddress(value);\n+        validateSubnetSize(address.getAddress(), subnetSize);\n+\n+        return castFromVarcharToIpPrefix(utf8Slice(InetAddresses.toAddrString(address) + \"/\" + subnetSize));\n+    }\n+\n+    @Description(\"IP prefix for a given IP address and subnet size\")\n+    @ScalarFunction(\"ip_prefix\")\n+    @LiteralParameters(\"x\")\n+    @SqlType(StandardTypes.IPPREFIX)\n+    public static Slice stringIpPrefix(@SqlType(\"varchar(x)\") Slice slice, @SqlType(StandardTypes.BIGINT) long subnetSize)\n+    {\n+        return ipPrefix(castFromVarcharToIpAddress(slice), subnetSize);\n+    }\n+\n+    @Description(\"First/Smallest subnet IP address for a given IP prefix\")\n+    @ScalarFunction(\"ip_subnet_min\")\n+    @SqlType(StandardTypes.IPADDRESS)\n+    public static Slice ipSubnetMin(@SqlType(StandardTypes.IPPREFIX) Slice value)\n+    {\n+        validateIpPrefixAndGetBytes(value);\n+        return castFromIpPrefixToIpAddress(value);\n+    }\n+\n+    @Description(\"Last/Maximum subnet IP address for a given IP prefix\")\n+    @ScalarFunction(\"ip_subnet_max\")\n+    @SqlType(StandardTypes.IPADDRESS)\n+    public static Slice ipSubnetMax(@SqlType(StandardTypes.IPPREFIX) Slice value)\n+    {\n+        byte[] address = validateIpPrefixAndGetBytes(value);\n+        int subnetSize = value.getByte(IPPREFIX.getFixedSize() - 1) & 0xFF;\n+\n+        if (address.length == 4) {\n+            for (int i = 0; i < 4; i++) {\n+                address[3 - i] |= (byte) ~(~0 << min(max((32 - subnetSize) - 8 * i, 0), 8));\n+            }\n+            byte[] bytes = new byte[16];\n+            bytes[10] = (byte) 0xff;\n+            bytes[11] = (byte) 0xff;\n+            arraycopy(address, 0, bytes, 12, 4);\n+            address = bytes;\n+        }\n+        else if (address.length == 16) {\n+            for (int i = 0; i < 16; i++) {\n+                address[15 - i] |= (byte) ~(~0 << min(max((128 - subnetSize) - 8 * i, 0), 8));\n+            }\n+        }\n+        return wrappedBuffer(address);\n+    }\n+\n+    @Description(\"Range of IP address's in the subnet of the IP prefix\")\n+    @ScalarFunction(\"ip_subnet_range\")\n+    @SqlType(\"array(IPADDRESS)\")\n+    public static Block ipSubnetRange(@SqlType(StandardTypes.IPPREFIX) Slice value)\n+    {\n+        validateIpPrefixAndGetBytes(value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE5MTg3NA=="}, "originalCommit": {"oid": "1509128a9f55fdcf9efd68be443d377f10e2fae7"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NjExMDgzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/IpPrefixFunctions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwMDoyMDozNFrOFpoC4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwMDoyMDozNFrOFpoC4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE5MjAzNA==", "bodyText": "The input has to be a valid ipprefix so you don't need to validate it.", "url": "https://github.com/prestodb/presto/pull/14090#discussion_r379192034", "createdAt": "2020-02-14T00:20:34Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/IpPrefixFunctions.java", "diffHunk": "@@ -40,16 +50,101 @@ private IpPrefixFunctions() {}\n     @ScalarFunction(\"ip_prefix\")\n     @SqlType(StandardTypes.IPPREFIX)\n     public static Slice ipPrefix(@SqlType(StandardTypes.IPADDRESS) Slice value, @SqlType(StandardTypes.BIGINT) long subnetSize)\n+    {\n+        InetAddress address = validateIpAddress(value);\n+        validateSubnetSize(address.getAddress(), subnetSize);\n+\n+        return castFromVarcharToIpPrefix(utf8Slice(InetAddresses.toAddrString(address) + \"/\" + subnetSize));\n+    }\n+\n+    @Description(\"IP prefix for a given IP address and subnet size\")\n+    @ScalarFunction(\"ip_prefix\")\n+    @LiteralParameters(\"x\")\n+    @SqlType(StandardTypes.IPPREFIX)\n+    public static Slice stringIpPrefix(@SqlType(\"varchar(x)\") Slice slice, @SqlType(StandardTypes.BIGINT) long subnetSize)\n+    {\n+        return ipPrefix(castFromVarcharToIpAddress(slice), subnetSize);\n+    }\n+\n+    @Description(\"First/Smallest subnet IP address for a given IP prefix\")\n+    @ScalarFunction(\"ip_subnet_min\")\n+    @SqlType(StandardTypes.IPADDRESS)\n+    public static Slice ipSubnetMin(@SqlType(StandardTypes.IPPREFIX) Slice value)\n+    {\n+        validateIpPrefixAndGetBytes(value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1509128a9f55fdcf9efd68be443d377f10e2fae7"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Mzk3NTM3OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/functions/ip.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxOTo1NTo1N1rOFqujxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxOTo1NTo1N1rOFqujxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM0NzMzMg==", "bodyText": "Double back quotes around ip_prefix2 and ip_prefix1", "url": "https://github.com/prestodb/presto/pull/14090#discussion_r380347332", "createdAt": "2020-02-17T19:55:57Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/functions/ip.rst", "diffHunk": "@@ -10,3 +10,42 @@ IP Functions\n         SELECT ip_prefix(CAST('192.168.255.255' AS IPADDRESS), 9); -- {192.128.0.0/9}\n         SELECT ip_prefix('2001:0db8:85a3:0001:0001:8a2e:0370:7334', 48); -- {2001:db8:85a3::/48}\n \n+.. function:: ip_subnet_min(ip_prefix) -> ip_address\n+\n+    Returns the smallest IP address of type ``IPADDRESS`` in the subnet\n+    specified by ``ip_prefix``. ::\n+\n+        SELECT ip_subnet_min(IPPREFIX '192.168.255.255/9'); -- {192.128.0.0}\n+        SELECT ip_subnet_min(IPPREFIX '2001:0db8:85a3:0001:0001:8a2e:0370:7334/48'); -- {2001:db8:85a3::}\n+\n+.. function:: ip_subnet_max(ip_prefix) -> ip_address\n+\n+    Returns the largest IP address of type ``IPADDRESS`` in the subnet\n+    specified by ``ip_prefix``. ::\n+\n+        SELECT ip_subnet_max(IPPREFIX '192.64.0.0/9'); -- {192.127.255.255}\n+        SELECT ip_subnet_max(IPPREFIX '2001:0db8:85a3:0001:0001:8a2e:0370:7334/48'); -- {2001:db8:85a3:ffff:ffff:ffff:ffff:ffff}\n+\n+.. function:: ip_subnet_range(ip_prefix) -> array(ip_address)\n+\n+    Returns an array of ``ip_address`` of size 2 and of type ``IPADDRESS``.\n+    It contains the smallest IP address and the largest IP address\n+    of the subnet specified by ``ip_prefix``. ::\n+\n+        SELECT ip_subnet_range(IPPREFIX '1.2.3.160/24'); -- [{1.2.3.0}, {1.2.3.255}]\n+        SELECT ip_subnet_range(IPPREFIX '64:ff9b::52f4/120'); -- [{64:ff9b::5200}, {64:ff9b::52ff}]\n+\n+.. function:: is_subnet_of(ip_prefix, ip_address) -> boolean\n+\n+    Returns ``true`` if the ``ip_address`` lies within the subnet of ``ip_prefix``. ::\n+\n+        SELECT is_subnet_of(IPPREFIX '1.2.3.128/26', IPADDRESS '1.2.3.129'); -- true\n+        SELECT is_subnet_of(IPPREFIX '64:fa9b::17/64', IPADDRESS '64:ffff::17'); -- false\n+\n+.. function:: is_subnet_of(ip_prefix1, ip_prefix2) -> boolean\n+\n+    Returns ``true`` if ip_prefix2 is a subnet of ip_prefix1. ::", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40fc1302ce768ee1a677f204e1f06552f309b487"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Mzk3NjkzOnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/functions/ip.rst", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxOTo1Njo0MVrOFqukow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMjoyNzoyNVrOFqw2bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM0NzU1NQ==", "bodyText": "\"lies within the subnet of\" -> \"is in the subnet of\"\nhttp://www.differencebetween.net/language/differences-between-in-and-within/", "url": "https://github.com/prestodb/presto/pull/14090#discussion_r380347555", "createdAt": "2020-02-17T19:56:41Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/functions/ip.rst", "diffHunk": "@@ -10,3 +10,42 @@ IP Functions\n         SELECT ip_prefix(CAST('192.168.255.255' AS IPADDRESS), 9); -- {192.128.0.0/9}\n         SELECT ip_prefix('2001:0db8:85a3:0001:0001:8a2e:0370:7334', 48); -- {2001:db8:85a3::/48}\n \n+.. function:: ip_subnet_min(ip_prefix) -> ip_address\n+\n+    Returns the smallest IP address of type ``IPADDRESS`` in the subnet\n+    specified by ``ip_prefix``. ::\n+\n+        SELECT ip_subnet_min(IPPREFIX '192.168.255.255/9'); -- {192.128.0.0}\n+        SELECT ip_subnet_min(IPPREFIX '2001:0db8:85a3:0001:0001:8a2e:0370:7334/48'); -- {2001:db8:85a3::}\n+\n+.. function:: ip_subnet_max(ip_prefix) -> ip_address\n+\n+    Returns the largest IP address of type ``IPADDRESS`` in the subnet\n+    specified by ``ip_prefix``. ::\n+\n+        SELECT ip_subnet_max(IPPREFIX '192.64.0.0/9'); -- {192.127.255.255}\n+        SELECT ip_subnet_max(IPPREFIX '2001:0db8:85a3:0001:0001:8a2e:0370:7334/48'); -- {2001:db8:85a3:ffff:ffff:ffff:ffff:ffff}\n+\n+.. function:: ip_subnet_range(ip_prefix) -> array(ip_address)\n+\n+    Returns an array of ``ip_address`` of size 2 and of type ``IPADDRESS``.\n+    It contains the smallest IP address and the largest IP address\n+    of the subnet specified by ``ip_prefix``. ::\n+\n+        SELECT ip_subnet_range(IPPREFIX '1.2.3.160/24'); -- [{1.2.3.0}, {1.2.3.255}]\n+        SELECT ip_subnet_range(IPPREFIX '64:ff9b::52f4/120'); -- [{64:ff9b::5200}, {64:ff9b::52ff}]\n+\n+.. function:: is_subnet_of(ip_prefix, ip_address) -> boolean\n+\n+    Returns ``true`` if the ``ip_address`` lies within the subnet of ``ip_prefix``. ::", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40fc1302ce768ee1a677f204e1f06552f309b487"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM4NDg3OQ==", "bodyText": ":) good one.", "url": "https://github.com/prestodb/presto/pull/14090#discussion_r380384879", "createdAt": "2020-02-17T22:27:25Z", "author": {"login": "NikhilCollooru"}, "path": "presto-docs/src/main/sphinx/functions/ip.rst", "diffHunk": "@@ -10,3 +10,42 @@ IP Functions\n         SELECT ip_prefix(CAST('192.168.255.255' AS IPADDRESS), 9); -- {192.128.0.0/9}\n         SELECT ip_prefix('2001:0db8:85a3:0001:0001:8a2e:0370:7334', 48); -- {2001:db8:85a3::/48}\n \n+.. function:: ip_subnet_min(ip_prefix) -> ip_address\n+\n+    Returns the smallest IP address of type ``IPADDRESS`` in the subnet\n+    specified by ``ip_prefix``. ::\n+\n+        SELECT ip_subnet_min(IPPREFIX '192.168.255.255/9'); -- {192.128.0.0}\n+        SELECT ip_subnet_min(IPPREFIX '2001:0db8:85a3:0001:0001:8a2e:0370:7334/48'); -- {2001:db8:85a3::}\n+\n+.. function:: ip_subnet_max(ip_prefix) -> ip_address\n+\n+    Returns the largest IP address of type ``IPADDRESS`` in the subnet\n+    specified by ``ip_prefix``. ::\n+\n+        SELECT ip_subnet_max(IPPREFIX '192.64.0.0/9'); -- {192.127.255.255}\n+        SELECT ip_subnet_max(IPPREFIX '2001:0db8:85a3:0001:0001:8a2e:0370:7334/48'); -- {2001:db8:85a3:ffff:ffff:ffff:ffff:ffff}\n+\n+.. function:: ip_subnet_range(ip_prefix) -> array(ip_address)\n+\n+    Returns an array of ``ip_address`` of size 2 and of type ``IPADDRESS``.\n+    It contains the smallest IP address and the largest IP address\n+    of the subnet specified by ``ip_prefix``. ::\n+\n+        SELECT ip_subnet_range(IPPREFIX '1.2.3.160/24'); -- [{1.2.3.0}, {1.2.3.255}]\n+        SELECT ip_subnet_range(IPPREFIX '64:ff9b::52f4/120'); -- [{64:ff9b::5200}, {64:ff9b::52ff}]\n+\n+.. function:: is_subnet_of(ip_prefix, ip_address) -> boolean\n+\n+    Returns ``true`` if the ``ip_address`` lies within the subnet of ``ip_prefix``. ::", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM0NzU1NQ=="}, "originalCommit": {"oid": "40fc1302ce768ee1a677f204e1f06552f309b487"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Mzk3NzgwOnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/functions/ip.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxOTo1NzoxM1rOFqulKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxOTo1NzoxM1rOFqulKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM0NzY5MQ==", "bodyText": "Return an array of 2 IP addresses.\nThe array contains the smallest and the largest IP address\nin the subnet specified by ``ip_prefix``.", "url": "https://github.com/prestodb/presto/pull/14090#discussion_r380347691", "createdAt": "2020-02-17T19:57:13Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/functions/ip.rst", "diffHunk": "@@ -10,3 +10,42 @@ IP Functions\n         SELECT ip_prefix(CAST('192.168.255.255' AS IPADDRESS), 9); -- {192.128.0.0/9}\n         SELECT ip_prefix('2001:0db8:85a3:0001:0001:8a2e:0370:7334', 48); -- {2001:db8:85a3::/48}\n \n+.. function:: ip_subnet_min(ip_prefix) -> ip_address\n+\n+    Returns the smallest IP address of type ``IPADDRESS`` in the subnet\n+    specified by ``ip_prefix``. ::\n+\n+        SELECT ip_subnet_min(IPPREFIX '192.168.255.255/9'); -- {192.128.0.0}\n+        SELECT ip_subnet_min(IPPREFIX '2001:0db8:85a3:0001:0001:8a2e:0370:7334/48'); -- {2001:db8:85a3::}\n+\n+.. function:: ip_subnet_max(ip_prefix) -> ip_address\n+\n+    Returns the largest IP address of type ``IPADDRESS`` in the subnet\n+    specified by ``ip_prefix``. ::\n+\n+        SELECT ip_subnet_max(IPPREFIX '192.64.0.0/9'); -- {192.127.255.255}\n+        SELECT ip_subnet_max(IPPREFIX '2001:0db8:85a3:0001:0001:8a2e:0370:7334/48'); -- {2001:db8:85a3:ffff:ffff:ffff:ffff:ffff}\n+\n+.. function:: ip_subnet_range(ip_prefix) -> array(ip_address)\n+\n+    Returns an array of ``ip_address`` of size 2 and of type ``IPADDRESS``.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40fc1302ce768ee1a677f204e1f06552f309b487"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NDAwMjkxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/IpPrefixFunctions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMDoxMToyMFrOFquzoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMDoxMToyMFrOFquzoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM1MTM5Mg==", "bodyText": "What about: Is the second IP prefix in the subnet of the first IP prefix", "url": "https://github.com/prestodb/presto/pull/14090#discussion_r380351392", "createdAt": "2020-02-17T20:11:20Z", "author": {"login": "caithagoras"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/IpPrefixFunctions.java", "diffHunk": "@@ -71,4 +74,78 @@ public static Slice stringIpPrefix(@SqlType(\"varchar(x)\") Slice slice, @SqlType(\n     {\n         return ipPrefix(castFromVarcharToIpAddress(slice), subnetSize);\n     }\n+\n+    @Description(\"Smallest IP address for a given IP prefix\")\n+    @ScalarFunction(\"ip_subnet_min\")\n+    @SqlType(StandardTypes.IPADDRESS)\n+    public static Slice ipSubnetMin(@SqlType(StandardTypes.IPPREFIX) Slice value)\n+    {\n+        return castFromIpPrefixToIpAddress(value);\n+    }\n+\n+    @Description(\"Largest IP address for a given IP prefix\")\n+    @ScalarFunction(\"ip_subnet_max\")\n+    @SqlType(StandardTypes.IPADDRESS)\n+    public static Slice ipSubnetMax(@SqlType(StandardTypes.IPPREFIX) Slice value)\n+    {\n+        byte[] address = toInetAddress(value.slice(0, IPADDRESS.getFixedSize())).getAddress();\n+        int subnetSize = value.getByte(IPPREFIX.getFixedSize() - 1) & 0xFF;\n+\n+        if (address.length == 4) {\n+            for (int i = 0; i < 4; i++) {\n+                address[3 - i] |= (byte) ~(~0 << min(max((32 - subnetSize) - 8 * i, 0), 8));\n+            }\n+            byte[] bytes = new byte[16];\n+            bytes[10] = (byte) 0xff;\n+            bytes[11] = (byte) 0xff;\n+            arraycopy(address, 0, bytes, 12, 4);\n+            address = bytes;\n+        }\n+        else if (address.length == 16) {\n+            for (int i = 0; i < 16; i++) {\n+                address[15 - i] |= (byte) ~(~0 << min(max((128 - subnetSize) - 8 * i, 0), 8));\n+            }\n+        }\n+        return wrappedBuffer(address);\n+    }\n+\n+    @Description(\"Array of smallest and largest IP address in the subnet of the given IP prefix\")\n+    @ScalarFunction(\"ip_subnet_range\")\n+    @SqlType(\"array(IPADDRESS)\")\n+    public static Block ipSubnetRange(@SqlType(StandardTypes.IPPREFIX) Slice value)\n+    {\n+        BlockBuilder blockBuilder = IPADDRESS.createBlockBuilder(null, 2);\n+        IPADDRESS.writeSlice(blockBuilder, ipSubnetMin(value));\n+        IPADDRESS.writeSlice(blockBuilder, ipSubnetMax(value));\n+        return blockBuilder.build();\n+    }\n+\n+    @Description(\"Is the IP address in the subnet of IP prefix\")\n+    @ScalarFunction(\"is_subnet_of\")\n+    @SqlType(StandardTypes.BOOLEAN)\n+    public static boolean isSubnetOf(@SqlType(StandardTypes.IPPREFIX) Slice left, @SqlType(StandardTypes.IPADDRESS) Slice right)\n+    {\n+        toInetAddress(right);\n+        return between(right, ipSubnetMin(left), ipSubnetMax(left));\n+    }\n+\n+    @Description(\"Is the second IP prefix argument within the subnet of the first IP prefix argument\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40fc1302ce768ee1a677f204e1f06552f309b487"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NDAxMTk3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/IpPrefixFunctions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMDoxNjo0OFrOFqu5Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMDoxNjo0OFrOFqu5Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM1Mjc4Nw==", "bodyText": "Now that this is a standalone function. You can just do return InetAdress.get... here, and remove the temporary variable.", "url": "https://github.com/prestodb/presto/pull/14090#discussion_r380352787", "createdAt": "2020-02-17T20:16:48Z", "author": {"login": "caithagoras"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/IpPrefixFunctions.java", "diffHunk": "@@ -71,4 +74,78 @@ public static Slice stringIpPrefix(@SqlType(\"varchar(x)\") Slice slice, @SqlType(\n     {\n         return ipPrefix(castFromVarcharToIpAddress(slice), subnetSize);\n     }\n+\n+    @Description(\"Smallest IP address for a given IP prefix\")\n+    @ScalarFunction(\"ip_subnet_min\")\n+    @SqlType(StandardTypes.IPADDRESS)\n+    public static Slice ipSubnetMin(@SqlType(StandardTypes.IPPREFIX) Slice value)\n+    {\n+        return castFromIpPrefixToIpAddress(value);\n+    }\n+\n+    @Description(\"Largest IP address for a given IP prefix\")\n+    @ScalarFunction(\"ip_subnet_max\")\n+    @SqlType(StandardTypes.IPADDRESS)\n+    public static Slice ipSubnetMax(@SqlType(StandardTypes.IPPREFIX) Slice value)\n+    {\n+        byte[] address = toInetAddress(value.slice(0, IPADDRESS.getFixedSize())).getAddress();\n+        int subnetSize = value.getByte(IPPREFIX.getFixedSize() - 1) & 0xFF;\n+\n+        if (address.length == 4) {\n+            for (int i = 0; i < 4; i++) {\n+                address[3 - i] |= (byte) ~(~0 << min(max((32 - subnetSize) - 8 * i, 0), 8));\n+            }\n+            byte[] bytes = new byte[16];\n+            bytes[10] = (byte) 0xff;\n+            bytes[11] = (byte) 0xff;\n+            arraycopy(address, 0, bytes, 12, 4);\n+            address = bytes;\n+        }\n+        else if (address.length == 16) {\n+            for (int i = 0; i < 16; i++) {\n+                address[15 - i] |= (byte) ~(~0 << min(max((128 - subnetSize) - 8 * i, 0), 8));\n+            }\n+        }\n+        return wrappedBuffer(address);\n+    }\n+\n+    @Description(\"Array of smallest and largest IP address in the subnet of the given IP prefix\")\n+    @ScalarFunction(\"ip_subnet_range\")\n+    @SqlType(\"array(IPADDRESS)\")\n+    public static Block ipSubnetRange(@SqlType(StandardTypes.IPPREFIX) Slice value)\n+    {\n+        BlockBuilder blockBuilder = IPADDRESS.createBlockBuilder(null, 2);\n+        IPADDRESS.writeSlice(blockBuilder, ipSubnetMin(value));\n+        IPADDRESS.writeSlice(blockBuilder, ipSubnetMax(value));\n+        return blockBuilder.build();\n+    }\n+\n+    @Description(\"Is the IP address in the subnet of IP prefix\")\n+    @ScalarFunction(\"is_subnet_of\")\n+    @SqlType(StandardTypes.BOOLEAN)\n+    public static boolean isSubnetOf(@SqlType(StandardTypes.IPPREFIX) Slice left, @SqlType(StandardTypes.IPADDRESS) Slice right)\n+    {\n+        toInetAddress(right);\n+        return between(right, ipSubnetMin(left), ipSubnetMax(left));\n+    }\n+\n+    @Description(\"Is the second IP prefix argument within the subnet of the first IP prefix argument\")\n+    @ScalarFunction(\"is_subnet_of\")\n+    @SqlType(StandardTypes.BOOLEAN)\n+    public static boolean isPrefixSubnetOf(@SqlType(StandardTypes.IPPREFIX) Slice left, @SqlType(StandardTypes.IPPREFIX) Slice right)\n+    {\n+        return between(ipSubnetMin(right), ipSubnetMin(left), ipSubnetMax(left)) && between(ipSubnetMax(right), ipSubnetMin(left), ipSubnetMax(left));\n+    }\n+\n+    private static InetAddress toInetAddress(Slice ipAddress)\n+    {\n+        InetAddress address;\n+        try {\n+            address = InetAddress.getByAddress(ipAddress.getBytes());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40fc1302ce768ee1a677f204e1f06552f309b487"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NDAxNDQwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/IpPrefixFunctions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMDoxODoyNVrOFqu6fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMDoxODoyNVrOFqu6fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM1MzE0OA==", "bodyText": "nit: what about naming the parameters as (prefix, address), or (ipPrefix, ipAddress).", "url": "https://github.com/prestodb/presto/pull/14090#discussion_r380353148", "createdAt": "2020-02-17T20:18:25Z", "author": {"login": "caithagoras"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/IpPrefixFunctions.java", "diffHunk": "@@ -71,4 +74,78 @@ public static Slice stringIpPrefix(@SqlType(\"varchar(x)\") Slice slice, @SqlType(\n     {\n         return ipPrefix(castFromVarcharToIpAddress(slice), subnetSize);\n     }\n+\n+    @Description(\"Smallest IP address for a given IP prefix\")\n+    @ScalarFunction(\"ip_subnet_min\")\n+    @SqlType(StandardTypes.IPADDRESS)\n+    public static Slice ipSubnetMin(@SqlType(StandardTypes.IPPREFIX) Slice value)\n+    {\n+        return castFromIpPrefixToIpAddress(value);\n+    }\n+\n+    @Description(\"Largest IP address for a given IP prefix\")\n+    @ScalarFunction(\"ip_subnet_max\")\n+    @SqlType(StandardTypes.IPADDRESS)\n+    public static Slice ipSubnetMax(@SqlType(StandardTypes.IPPREFIX) Slice value)\n+    {\n+        byte[] address = toInetAddress(value.slice(0, IPADDRESS.getFixedSize())).getAddress();\n+        int subnetSize = value.getByte(IPPREFIX.getFixedSize() - 1) & 0xFF;\n+\n+        if (address.length == 4) {\n+            for (int i = 0; i < 4; i++) {\n+                address[3 - i] |= (byte) ~(~0 << min(max((32 - subnetSize) - 8 * i, 0), 8));\n+            }\n+            byte[] bytes = new byte[16];\n+            bytes[10] = (byte) 0xff;\n+            bytes[11] = (byte) 0xff;\n+            arraycopy(address, 0, bytes, 12, 4);\n+            address = bytes;\n+        }\n+        else if (address.length == 16) {\n+            for (int i = 0; i < 16; i++) {\n+                address[15 - i] |= (byte) ~(~0 << min(max((128 - subnetSize) - 8 * i, 0), 8));\n+            }\n+        }\n+        return wrappedBuffer(address);\n+    }\n+\n+    @Description(\"Array of smallest and largest IP address in the subnet of the given IP prefix\")\n+    @ScalarFunction(\"ip_subnet_range\")\n+    @SqlType(\"array(IPADDRESS)\")\n+    public static Block ipSubnetRange(@SqlType(StandardTypes.IPPREFIX) Slice value)\n+    {\n+        BlockBuilder blockBuilder = IPADDRESS.createBlockBuilder(null, 2);\n+        IPADDRESS.writeSlice(blockBuilder, ipSubnetMin(value));\n+        IPADDRESS.writeSlice(blockBuilder, ipSubnetMax(value));\n+        return blockBuilder.build();\n+    }\n+\n+    @Description(\"Is the IP address in the subnet of IP prefix\")\n+    @ScalarFunction(\"is_subnet_of\")\n+    @SqlType(StandardTypes.BOOLEAN)\n+    public static boolean isSubnetOf(@SqlType(StandardTypes.IPPREFIX) Slice left, @SqlType(StandardTypes.IPADDRESS) Slice right)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40fc1302ce768ee1a677f204e1f06552f309b487"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NDAxNTk3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/IpPrefixFunctions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMDoxOToyMVrOFqu7aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMDoxOToyMVrOFqu7aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM1MzM4NQ==", "bodyText": "nit: What about naming those variables as first and second, as corresponding to the description.", "url": "https://github.com/prestodb/presto/pull/14090#discussion_r380353385", "createdAt": "2020-02-17T20:19:21Z", "author": {"login": "caithagoras"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/IpPrefixFunctions.java", "diffHunk": "@@ -71,4 +74,78 @@ public static Slice stringIpPrefix(@SqlType(\"varchar(x)\") Slice slice, @SqlType(\n     {\n         return ipPrefix(castFromVarcharToIpAddress(slice), subnetSize);\n     }\n+\n+    @Description(\"Smallest IP address for a given IP prefix\")\n+    @ScalarFunction(\"ip_subnet_min\")\n+    @SqlType(StandardTypes.IPADDRESS)\n+    public static Slice ipSubnetMin(@SqlType(StandardTypes.IPPREFIX) Slice value)\n+    {\n+        return castFromIpPrefixToIpAddress(value);\n+    }\n+\n+    @Description(\"Largest IP address for a given IP prefix\")\n+    @ScalarFunction(\"ip_subnet_max\")\n+    @SqlType(StandardTypes.IPADDRESS)\n+    public static Slice ipSubnetMax(@SqlType(StandardTypes.IPPREFIX) Slice value)\n+    {\n+        byte[] address = toInetAddress(value.slice(0, IPADDRESS.getFixedSize())).getAddress();\n+        int subnetSize = value.getByte(IPPREFIX.getFixedSize() - 1) & 0xFF;\n+\n+        if (address.length == 4) {\n+            for (int i = 0; i < 4; i++) {\n+                address[3 - i] |= (byte) ~(~0 << min(max((32 - subnetSize) - 8 * i, 0), 8));\n+            }\n+            byte[] bytes = new byte[16];\n+            bytes[10] = (byte) 0xff;\n+            bytes[11] = (byte) 0xff;\n+            arraycopy(address, 0, bytes, 12, 4);\n+            address = bytes;\n+        }\n+        else if (address.length == 16) {\n+            for (int i = 0; i < 16; i++) {\n+                address[15 - i] |= (byte) ~(~0 << min(max((128 - subnetSize) - 8 * i, 0), 8));\n+            }\n+        }\n+        return wrappedBuffer(address);\n+    }\n+\n+    @Description(\"Array of smallest and largest IP address in the subnet of the given IP prefix\")\n+    @ScalarFunction(\"ip_subnet_range\")\n+    @SqlType(\"array(IPADDRESS)\")\n+    public static Block ipSubnetRange(@SqlType(StandardTypes.IPPREFIX) Slice value)\n+    {\n+        BlockBuilder blockBuilder = IPADDRESS.createBlockBuilder(null, 2);\n+        IPADDRESS.writeSlice(blockBuilder, ipSubnetMin(value));\n+        IPADDRESS.writeSlice(blockBuilder, ipSubnetMax(value));\n+        return blockBuilder.build();\n+    }\n+\n+    @Description(\"Is the IP address in the subnet of IP prefix\")\n+    @ScalarFunction(\"is_subnet_of\")\n+    @SqlType(StandardTypes.BOOLEAN)\n+    public static boolean isSubnetOf(@SqlType(StandardTypes.IPPREFIX) Slice left, @SqlType(StandardTypes.IPADDRESS) Slice right)\n+    {\n+        toInetAddress(right);\n+        return between(right, ipSubnetMin(left), ipSubnetMax(left));\n+    }\n+\n+    @Description(\"Is the second IP prefix argument within the subnet of the first IP prefix argument\")\n+    @ScalarFunction(\"is_subnet_of\")\n+    @SqlType(StandardTypes.BOOLEAN)\n+    public static boolean isPrefixSubnetOf(@SqlType(StandardTypes.IPPREFIX) Slice left, @SqlType(StandardTypes.IPPREFIX) Slice right)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40fc1302ce768ee1a677f204e1f06552f309b487"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NDAyMDYwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/com/facebook/presto/operator/scalar/TestIpPrefixFunctions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMDoyMTo1OVrOFqu-KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMjoyODoyOVrOFqw3XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM1NDA4OQ==", "bodyText": "Those 2 test cases do not belong to this test method. Unlike the IP_PREFIX, which can take VARCHAR  as the input, those 2 test cases are not testing the behavior of IP_SUBNET_MIN, but the behavior of casting VARCHAR to IPPREFIX.", "url": "https://github.com/prestodb/presto/pull/14090#discussion_r380354089", "createdAt": "2020-02-17T20:21:59Z", "author": {"login": "caithagoras"}, "path": "presto-main/src/test/java/com/facebook/presto/operator/scalar/TestIpPrefixFunctions.java", "diffHunk": "@@ -57,4 +61,65 @@ public void testStringIpPrefix()\n         assertInvalidCast(\"IP_PREFIX('64:face:book::10', 24)\", \"Cannot cast value to IPADDRESS: 64:face:book::10\");\n         assertInvalidCast(\"IP_PREFIX('123.456.789.012', 24)\", \"Cannot cast value to IPADDRESS: 123.456.789.012\");\n     }\n+\n+    @Test\n+    public void testIpSubnetMin()\n+    {\n+        assertFunction(\"IP_SUBNET_MIN(IPPREFIX '1.2.3.4/24')\", IPADDRESS, \"1.2.3.0\");\n+        assertFunction(\"IP_SUBNET_MIN(IPPREFIX '1.2.3.4/32')\", IPADDRESS, \"1.2.3.4\");\n+        assertFunction(\"IP_SUBNET_MIN(IPPREFIX '64:ff9b::17/64')\", IPADDRESS, \"64:ff9b::\");\n+        assertFunction(\"IP_SUBNET_MIN(IPPREFIX '64:ff9b::17/127')\", IPADDRESS, \"64:ff9b::16\");\n+        assertFunction(\"IP_SUBNET_MIN(IPPREFIX '64:ff9b::17/128')\", IPADDRESS, \"64:ff9b::17\");\n+        assertFunction(\"IP_SUBNET_MIN(IPPREFIX '64:ff9b::17/0')\", IPADDRESS, \"::\");\n+        assertInvalidCast(\"IP_SUBNET_MIN(IPPREFIX '64::ff9b::10/48')\", \"Cannot cast value to IPPREFIX: 64::ff9b::10/48\");\n+        assertInvalidCast(\"IP_SUBNET_MIN(IPPREFIX '123.456.789.012/24')\", \"Cannot cast value to IPPREFIX: 123.456.789.012/24\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40fc1302ce768ee1a677f204e1f06552f309b487"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM4NTExNw==", "bodyText": "I added these tests based on Rongrong's earlier comment. But i agree that they do not test the IP_SUBNET_MIN  function. If the argument IPPREFIX is always valid then we need not test the invalid input cases.", "url": "https://github.com/prestodb/presto/pull/14090#discussion_r380385117", "createdAt": "2020-02-17T22:28:29Z", "author": {"login": "NikhilCollooru"}, "path": "presto-main/src/test/java/com/facebook/presto/operator/scalar/TestIpPrefixFunctions.java", "diffHunk": "@@ -57,4 +61,65 @@ public void testStringIpPrefix()\n         assertInvalidCast(\"IP_PREFIX('64:face:book::10', 24)\", \"Cannot cast value to IPADDRESS: 64:face:book::10\");\n         assertInvalidCast(\"IP_PREFIX('123.456.789.012', 24)\", \"Cannot cast value to IPADDRESS: 123.456.789.012\");\n     }\n+\n+    @Test\n+    public void testIpSubnetMin()\n+    {\n+        assertFunction(\"IP_SUBNET_MIN(IPPREFIX '1.2.3.4/24')\", IPADDRESS, \"1.2.3.0\");\n+        assertFunction(\"IP_SUBNET_MIN(IPPREFIX '1.2.3.4/32')\", IPADDRESS, \"1.2.3.4\");\n+        assertFunction(\"IP_SUBNET_MIN(IPPREFIX '64:ff9b::17/64')\", IPADDRESS, \"64:ff9b::\");\n+        assertFunction(\"IP_SUBNET_MIN(IPPREFIX '64:ff9b::17/127')\", IPADDRESS, \"64:ff9b::16\");\n+        assertFunction(\"IP_SUBNET_MIN(IPPREFIX '64:ff9b::17/128')\", IPADDRESS, \"64:ff9b::17\");\n+        assertFunction(\"IP_SUBNET_MIN(IPPREFIX '64:ff9b::17/0')\", IPADDRESS, \"::\");\n+        assertInvalidCast(\"IP_SUBNET_MIN(IPPREFIX '64::ff9b::10/48')\", \"Cannot cast value to IPPREFIX: 64::ff9b::10/48\");\n+        assertInvalidCast(\"IP_SUBNET_MIN(IPPREFIX '123.456.789.012/24')\", \"Cannot cast value to IPPREFIX: 123.456.789.012/24\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM1NDA4OQ=="}, "originalCommit": {"oid": "40fc1302ce768ee1a677f204e1f06552f309b487"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NDAyMTE5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/com/facebook/presto/operator/scalar/TestIpPrefixFunctions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMDoyMjoyMlrOFqu-iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMDoyMjoyMlrOFqu-iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM1NDE4Nw==", "bodyText": "Same here, remove.", "url": "https://github.com/prestodb/presto/pull/14090#discussion_r380354187", "createdAt": "2020-02-17T20:22:22Z", "author": {"login": "caithagoras"}, "path": "presto-main/src/test/java/com/facebook/presto/operator/scalar/TestIpPrefixFunctions.java", "diffHunk": "@@ -57,4 +61,65 @@ public void testStringIpPrefix()\n         assertInvalidCast(\"IP_PREFIX('64:face:book::10', 24)\", \"Cannot cast value to IPADDRESS: 64:face:book::10\");\n         assertInvalidCast(\"IP_PREFIX('123.456.789.012', 24)\", \"Cannot cast value to IPADDRESS: 123.456.789.012\");\n     }\n+\n+    @Test\n+    public void testIpSubnetMin()\n+    {\n+        assertFunction(\"IP_SUBNET_MIN(IPPREFIX '1.2.3.4/24')\", IPADDRESS, \"1.2.3.0\");\n+        assertFunction(\"IP_SUBNET_MIN(IPPREFIX '1.2.3.4/32')\", IPADDRESS, \"1.2.3.4\");\n+        assertFunction(\"IP_SUBNET_MIN(IPPREFIX '64:ff9b::17/64')\", IPADDRESS, \"64:ff9b::\");\n+        assertFunction(\"IP_SUBNET_MIN(IPPREFIX '64:ff9b::17/127')\", IPADDRESS, \"64:ff9b::16\");\n+        assertFunction(\"IP_SUBNET_MIN(IPPREFIX '64:ff9b::17/128')\", IPADDRESS, \"64:ff9b::17\");\n+        assertFunction(\"IP_SUBNET_MIN(IPPREFIX '64:ff9b::17/0')\", IPADDRESS, \"::\");\n+        assertInvalidCast(\"IP_SUBNET_MIN(IPPREFIX '64::ff9b::10/48')\", \"Cannot cast value to IPPREFIX: 64::ff9b::10/48\");\n+        assertInvalidCast(\"IP_SUBNET_MIN(IPPREFIX '123.456.789.012/24')\", \"Cannot cast value to IPPREFIX: 123.456.789.012/24\");\n+    }\n+\n+    @Test\n+    public void testIpSubnetMax()\n+    {\n+        assertFunction(\"IP_SUBNET_MAX(IPPREFIX '1.2.3.128/26')\", IPADDRESS, \"1.2.3.191\");\n+        assertFunction(\"IP_SUBNET_MAX(IPPREFIX '192.168.128.4/32')\", IPADDRESS, \"192.168.128.4\");\n+        assertFunction(\"IP_SUBNET_MAX(IPPREFIX '10.1.16.3/9')\", IPADDRESS, \"10.127.255.255\");\n+        assertFunction(\"IP_SUBNET_MAX(IPPREFIX '2001:db8::16/127')\", IPADDRESS, \"2001:db8::17\");\n+        assertFunction(\"IP_SUBNET_MAX(IPPREFIX '2001:db8::16/128')\", IPADDRESS, \"2001:db8::16\");\n+        assertFunction(\"IP_SUBNET_MAX(IPPREFIX '64:ff9b::17/64')\", IPADDRESS, \"64:ff9b::ffff:ffff:ffff:ffff\");\n+        assertFunction(\"IP_SUBNET_MAX(IPPREFIX '64:ff9b::17/72')\", IPADDRESS, \"64:ff9b::ff:ffff:ffff:ffff\");\n+        assertFunction(\"IP_SUBNET_MAX(IPPREFIX '64:ff9b::17/0')\", IPADDRESS, \"ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff\");\n+        assertInvalidCast(\"IP_SUBNET_MAX(IPPREFIX '64::ff9b::10/24')\", \"Cannot cast value to IPPREFIX: 64::ff9b::10/24\");\n+        assertInvalidCast(\"IP_SUBNET_MAX(IPPREFIX '123.456.789.012/-1')\", \"Cannot cast value to IPPREFIX: 123.456.789.012/-1\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40fc1302ce768ee1a677f204e1f06552f309b487"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NDAyMTQxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/com/facebook/presto/operator/scalar/TestIpPrefixFunctions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMDoyMjoyOFrOFqu-sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMDoyMjoyOFrOFqu-sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM1NDIyNg==", "bodyText": "Same here.", "url": "https://github.com/prestodb/presto/pull/14090#discussion_r380354226", "createdAt": "2020-02-17T20:22:28Z", "author": {"login": "caithagoras"}, "path": "presto-main/src/test/java/com/facebook/presto/operator/scalar/TestIpPrefixFunctions.java", "diffHunk": "@@ -57,4 +61,65 @@ public void testStringIpPrefix()\n         assertInvalidCast(\"IP_PREFIX('64:face:book::10', 24)\", \"Cannot cast value to IPADDRESS: 64:face:book::10\");\n         assertInvalidCast(\"IP_PREFIX('123.456.789.012', 24)\", \"Cannot cast value to IPADDRESS: 123.456.789.012\");\n     }\n+\n+    @Test\n+    public void testIpSubnetMin()\n+    {\n+        assertFunction(\"IP_SUBNET_MIN(IPPREFIX '1.2.3.4/24')\", IPADDRESS, \"1.2.3.0\");\n+        assertFunction(\"IP_SUBNET_MIN(IPPREFIX '1.2.3.4/32')\", IPADDRESS, \"1.2.3.4\");\n+        assertFunction(\"IP_SUBNET_MIN(IPPREFIX '64:ff9b::17/64')\", IPADDRESS, \"64:ff9b::\");\n+        assertFunction(\"IP_SUBNET_MIN(IPPREFIX '64:ff9b::17/127')\", IPADDRESS, \"64:ff9b::16\");\n+        assertFunction(\"IP_SUBNET_MIN(IPPREFIX '64:ff9b::17/128')\", IPADDRESS, \"64:ff9b::17\");\n+        assertFunction(\"IP_SUBNET_MIN(IPPREFIX '64:ff9b::17/0')\", IPADDRESS, \"::\");\n+        assertInvalidCast(\"IP_SUBNET_MIN(IPPREFIX '64::ff9b::10/48')\", \"Cannot cast value to IPPREFIX: 64::ff9b::10/48\");\n+        assertInvalidCast(\"IP_SUBNET_MIN(IPPREFIX '123.456.789.012/24')\", \"Cannot cast value to IPPREFIX: 123.456.789.012/24\");\n+    }\n+\n+    @Test\n+    public void testIpSubnetMax()\n+    {\n+        assertFunction(\"IP_SUBNET_MAX(IPPREFIX '1.2.3.128/26')\", IPADDRESS, \"1.2.3.191\");\n+        assertFunction(\"IP_SUBNET_MAX(IPPREFIX '192.168.128.4/32')\", IPADDRESS, \"192.168.128.4\");\n+        assertFunction(\"IP_SUBNET_MAX(IPPREFIX '10.1.16.3/9')\", IPADDRESS, \"10.127.255.255\");\n+        assertFunction(\"IP_SUBNET_MAX(IPPREFIX '2001:db8::16/127')\", IPADDRESS, \"2001:db8::17\");\n+        assertFunction(\"IP_SUBNET_MAX(IPPREFIX '2001:db8::16/128')\", IPADDRESS, \"2001:db8::16\");\n+        assertFunction(\"IP_SUBNET_MAX(IPPREFIX '64:ff9b::17/64')\", IPADDRESS, \"64:ff9b::ffff:ffff:ffff:ffff\");\n+        assertFunction(\"IP_SUBNET_MAX(IPPREFIX '64:ff9b::17/72')\", IPADDRESS, \"64:ff9b::ff:ffff:ffff:ffff\");\n+        assertFunction(\"IP_SUBNET_MAX(IPPREFIX '64:ff9b::17/0')\", IPADDRESS, \"ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff\");\n+        assertInvalidCast(\"IP_SUBNET_MAX(IPPREFIX '64::ff9b::10/24')\", \"Cannot cast value to IPPREFIX: 64::ff9b::10/24\");\n+        assertInvalidCast(\"IP_SUBNET_MAX(IPPREFIX '123.456.789.012/-1')\", \"Cannot cast value to IPPREFIX: 123.456.789.012/-1\");\n+    }\n+\n+    @Test\n+    public void testIpSubnetRange()\n+    {\n+        assertFunction(\"IP_SUBNET_RANGE(IPPREFIX '1.2.3.160/24')\", new ArrayType(IPADDRESS), ImmutableList.of(\"1.2.3.0\", \"1.2.3.255\"));\n+        assertFunction(\"IP_SUBNET_RANGE(IPPREFIX '1.2.3.128/31')\", new ArrayType(IPADDRESS), ImmutableList.of(\"1.2.3.128\", \"1.2.3.129\"));\n+        assertFunction(\"IP_SUBNET_RANGE(IPPREFIX '10.1.6.46/32')\", new ArrayType(IPADDRESS), ImmutableList.of(\"10.1.6.46\", \"10.1.6.46\"));\n+        assertFunction(\"IP_SUBNET_RANGE(IPPREFIX '10.1.6.46/0')\", new ArrayType(IPADDRESS), ImmutableList.of(\"0.0.0.0\", \"255.255.255.255\"));\n+        assertFunction(\"IP_SUBNET_RANGE(IPPREFIX '64:ff9b::17/64')\", new ArrayType(IPADDRESS), ImmutableList.of(\"64:ff9b::\", \"64:ff9b::ffff:ffff:ffff:ffff\"));\n+        assertFunction(\"IP_SUBNET_RANGE(IPPREFIX '64:ff9b::52f4/120')\", new ArrayType(IPADDRESS), ImmutableList.of(\"64:ff9b::5200\", \"64:ff9b::52ff\"));\n+        assertFunction(\"IP_SUBNET_RANGE(IPPREFIX '64:ff9b::17/128')\", new ArrayType(IPADDRESS), ImmutableList.of(\"64:ff9b::17\", \"64:ff9b::17\"));\n+        assertInvalidCast(\"IP_SUBNET_RANGE(IPPREFIX '64::ff9b::10/24')\", \"Cannot cast value to IPPREFIX: 64::ff9b::10/24\");\n+        assertInvalidCast(\"IP_SUBNET_RANGE(IPPREFIX '123.456.789.012/-1')\", \"Cannot cast value to IPPREFIX: 123.456.789.012/-1\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40fc1302ce768ee1a677f204e1f06552f309b487"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NDAyMTU0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/com/facebook/presto/operator/scalar/TestIpPrefixFunctions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMDoyMjozNVrOFqu-yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMDoyMjozNVrOFqu-yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM1NDI1MA==", "bodyText": "Same here.", "url": "https://github.com/prestodb/presto/pull/14090#discussion_r380354250", "createdAt": "2020-02-17T20:22:35Z", "author": {"login": "caithagoras"}, "path": "presto-main/src/test/java/com/facebook/presto/operator/scalar/TestIpPrefixFunctions.java", "diffHunk": "@@ -57,4 +61,65 @@ public void testStringIpPrefix()\n         assertInvalidCast(\"IP_PREFIX('64:face:book::10', 24)\", \"Cannot cast value to IPADDRESS: 64:face:book::10\");\n         assertInvalidCast(\"IP_PREFIX('123.456.789.012', 24)\", \"Cannot cast value to IPADDRESS: 123.456.789.012\");\n     }\n+\n+    @Test\n+    public void testIpSubnetMin()\n+    {\n+        assertFunction(\"IP_SUBNET_MIN(IPPREFIX '1.2.3.4/24')\", IPADDRESS, \"1.2.3.0\");\n+        assertFunction(\"IP_SUBNET_MIN(IPPREFIX '1.2.3.4/32')\", IPADDRESS, \"1.2.3.4\");\n+        assertFunction(\"IP_SUBNET_MIN(IPPREFIX '64:ff9b::17/64')\", IPADDRESS, \"64:ff9b::\");\n+        assertFunction(\"IP_SUBNET_MIN(IPPREFIX '64:ff9b::17/127')\", IPADDRESS, \"64:ff9b::16\");\n+        assertFunction(\"IP_SUBNET_MIN(IPPREFIX '64:ff9b::17/128')\", IPADDRESS, \"64:ff9b::17\");\n+        assertFunction(\"IP_SUBNET_MIN(IPPREFIX '64:ff9b::17/0')\", IPADDRESS, \"::\");\n+        assertInvalidCast(\"IP_SUBNET_MIN(IPPREFIX '64::ff9b::10/48')\", \"Cannot cast value to IPPREFIX: 64::ff9b::10/48\");\n+        assertInvalidCast(\"IP_SUBNET_MIN(IPPREFIX '123.456.789.012/24')\", \"Cannot cast value to IPPREFIX: 123.456.789.012/24\");\n+    }\n+\n+    @Test\n+    public void testIpSubnetMax()\n+    {\n+        assertFunction(\"IP_SUBNET_MAX(IPPREFIX '1.2.3.128/26')\", IPADDRESS, \"1.2.3.191\");\n+        assertFunction(\"IP_SUBNET_MAX(IPPREFIX '192.168.128.4/32')\", IPADDRESS, \"192.168.128.4\");\n+        assertFunction(\"IP_SUBNET_MAX(IPPREFIX '10.1.16.3/9')\", IPADDRESS, \"10.127.255.255\");\n+        assertFunction(\"IP_SUBNET_MAX(IPPREFIX '2001:db8::16/127')\", IPADDRESS, \"2001:db8::17\");\n+        assertFunction(\"IP_SUBNET_MAX(IPPREFIX '2001:db8::16/128')\", IPADDRESS, \"2001:db8::16\");\n+        assertFunction(\"IP_SUBNET_MAX(IPPREFIX '64:ff9b::17/64')\", IPADDRESS, \"64:ff9b::ffff:ffff:ffff:ffff\");\n+        assertFunction(\"IP_SUBNET_MAX(IPPREFIX '64:ff9b::17/72')\", IPADDRESS, \"64:ff9b::ff:ffff:ffff:ffff\");\n+        assertFunction(\"IP_SUBNET_MAX(IPPREFIX '64:ff9b::17/0')\", IPADDRESS, \"ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff\");\n+        assertInvalidCast(\"IP_SUBNET_MAX(IPPREFIX '64::ff9b::10/24')\", \"Cannot cast value to IPPREFIX: 64::ff9b::10/24\");\n+        assertInvalidCast(\"IP_SUBNET_MAX(IPPREFIX '123.456.789.012/-1')\", \"Cannot cast value to IPPREFIX: 123.456.789.012/-1\");\n+    }\n+\n+    @Test\n+    public void testIpSubnetRange()\n+    {\n+        assertFunction(\"IP_SUBNET_RANGE(IPPREFIX '1.2.3.160/24')\", new ArrayType(IPADDRESS), ImmutableList.of(\"1.2.3.0\", \"1.2.3.255\"));\n+        assertFunction(\"IP_SUBNET_RANGE(IPPREFIX '1.2.3.128/31')\", new ArrayType(IPADDRESS), ImmutableList.of(\"1.2.3.128\", \"1.2.3.129\"));\n+        assertFunction(\"IP_SUBNET_RANGE(IPPREFIX '10.1.6.46/32')\", new ArrayType(IPADDRESS), ImmutableList.of(\"10.1.6.46\", \"10.1.6.46\"));\n+        assertFunction(\"IP_SUBNET_RANGE(IPPREFIX '10.1.6.46/0')\", new ArrayType(IPADDRESS), ImmutableList.of(\"0.0.0.0\", \"255.255.255.255\"));\n+        assertFunction(\"IP_SUBNET_RANGE(IPPREFIX '64:ff9b::17/64')\", new ArrayType(IPADDRESS), ImmutableList.of(\"64:ff9b::\", \"64:ff9b::ffff:ffff:ffff:ffff\"));\n+        assertFunction(\"IP_SUBNET_RANGE(IPPREFIX '64:ff9b::52f4/120')\", new ArrayType(IPADDRESS), ImmutableList.of(\"64:ff9b::5200\", \"64:ff9b::52ff\"));\n+        assertFunction(\"IP_SUBNET_RANGE(IPPREFIX '64:ff9b::17/128')\", new ArrayType(IPADDRESS), ImmutableList.of(\"64:ff9b::17\", \"64:ff9b::17\"));\n+        assertInvalidCast(\"IP_SUBNET_RANGE(IPPREFIX '64::ff9b::10/24')\", \"Cannot cast value to IPPREFIX: 64::ff9b::10/24\");\n+        assertInvalidCast(\"IP_SUBNET_RANGE(IPPREFIX '123.456.789.012/-1')\", \"Cannot cast value to IPPREFIX: 123.456.789.012/-1\");\n+    }\n+\n+    @Test\n+    public void testIsSubnetOf()\n+    {\n+        assertFunction(\"IS_SUBNET_OF(IPPREFIX '1.2.3.128/26', IPADDRESS '1.2.3.129')\", BOOLEAN, true);\n+        assertFunction(\"IS_SUBNET_OF(IPPREFIX '1.2.3.128/26', IPADDRESS '1.2.5.1')\", BOOLEAN, false);\n+        assertFunction(\"IS_SUBNET_OF(IPPREFIX '1.2.3.128/32', IPADDRESS '1.2.3.128')\", BOOLEAN, true);\n+        assertFunction(\"IS_SUBNET_OF(IPPREFIX '1.2.3.128/0', IPADDRESS '192.168.5.1')\", BOOLEAN, true);\n+        assertFunction(\"IS_SUBNET_OF(IPPREFIX '64:ff9b::17/64', IPADDRESS '64:ff9b::ffff:ff')\", BOOLEAN, true);\n+        assertFunction(\"IS_SUBNET_OF(IPPREFIX '64:ff9b::17/64', IPADDRESS '64:ffff::17')\", BOOLEAN, false);\n+        assertFunction(\"IS_SUBNET_OF(IPPREFIX '192.168.3.131/26', IPPREFIX '192.168.3.144/30')\", BOOLEAN, true);\n+        assertFunction(\"IS_SUBNET_OF(IPPREFIX '1.2.3.128/26', IPPREFIX '1.2.5.1/30')\", BOOLEAN, false);\n+        assertFunction(\"IS_SUBNET_OF(IPPREFIX '1.2.3.128/26', IPPREFIX '1.2.3.128/26')\", BOOLEAN, true);\n+        assertFunction(\"IS_SUBNET_OF(IPPREFIX '64:ff9b::17/64', IPPREFIX '64:ff9b::ff:25/80')\", BOOLEAN, true);\n+        assertFunction(\"IS_SUBNET_OF(IPPREFIX '64:ff9b::17/64', IPPREFIX '64:ffff::17/64')\", BOOLEAN, false);\n+        assertInvalidCast(\"IS_SUBNET_OF(IPPREFIX '64:ff9b::17/64', IPPREFIX '64::ffff::17/64')\", \"Cannot cast value to IPPREFIX: 64::ffff::17/64\");\n+        assertInvalidCast(\"IS_SUBNET_OF(IPPREFIX '123.456.789.012/-1', IPPREFIX '10.1.1.10/20')\", \"Cannot cast value to IPPREFIX: 123.456.789.012/-1\");\n+        assertInvalidCast(\"IS_SUBNET_OF(IPPREFIX '123.456.789.012/-1', IPPREFIX '10.1.1.10/99')\", \"Cannot cast value to IPPREFIX: 123.456.789.012/-1\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40fc1302ce768ee1a677f204e1f06552f309b487"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NDAzMDkxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/IpPrefixFunctions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMDoyNzo1M1rOFqvEUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMjoyOTowMlrOFqw37A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM1NTY2NA==", "bodyText": "@rongrong Correct me if I'm wrong here: I believe the second between is redundant?\nIf\nbetween(ipSubnetMin(right), ipSubnetMin(left), ipSubnetMax(left))\n\nis true,\nbetween(ipSubnetMax(right), ipSubnetMin(left), ipSubnetMax(left))\n\nmust be true, and vice versa.", "url": "https://github.com/prestodb/presto/pull/14090#discussion_r380355664", "createdAt": "2020-02-17T20:27:53Z", "author": {"login": "caithagoras"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/IpPrefixFunctions.java", "diffHunk": "@@ -71,4 +74,78 @@ public static Slice stringIpPrefix(@SqlType(\"varchar(x)\") Slice slice, @SqlType(\n     {\n         return ipPrefix(castFromVarcharToIpAddress(slice), subnetSize);\n     }\n+\n+    @Description(\"Smallest IP address for a given IP prefix\")\n+    @ScalarFunction(\"ip_subnet_min\")\n+    @SqlType(StandardTypes.IPADDRESS)\n+    public static Slice ipSubnetMin(@SqlType(StandardTypes.IPPREFIX) Slice value)\n+    {\n+        return castFromIpPrefixToIpAddress(value);\n+    }\n+\n+    @Description(\"Largest IP address for a given IP prefix\")\n+    @ScalarFunction(\"ip_subnet_max\")\n+    @SqlType(StandardTypes.IPADDRESS)\n+    public static Slice ipSubnetMax(@SqlType(StandardTypes.IPPREFIX) Slice value)\n+    {\n+        byte[] address = toInetAddress(value.slice(0, IPADDRESS.getFixedSize())).getAddress();\n+        int subnetSize = value.getByte(IPPREFIX.getFixedSize() - 1) & 0xFF;\n+\n+        if (address.length == 4) {\n+            for (int i = 0; i < 4; i++) {\n+                address[3 - i] |= (byte) ~(~0 << min(max((32 - subnetSize) - 8 * i, 0), 8));\n+            }\n+            byte[] bytes = new byte[16];\n+            bytes[10] = (byte) 0xff;\n+            bytes[11] = (byte) 0xff;\n+            arraycopy(address, 0, bytes, 12, 4);\n+            address = bytes;\n+        }\n+        else if (address.length == 16) {\n+            for (int i = 0; i < 16; i++) {\n+                address[15 - i] |= (byte) ~(~0 << min(max((128 - subnetSize) - 8 * i, 0), 8));\n+            }\n+        }\n+        return wrappedBuffer(address);\n+    }\n+\n+    @Description(\"Array of smallest and largest IP address in the subnet of the given IP prefix\")\n+    @ScalarFunction(\"ip_subnet_range\")\n+    @SqlType(\"array(IPADDRESS)\")\n+    public static Block ipSubnetRange(@SqlType(StandardTypes.IPPREFIX) Slice value)\n+    {\n+        BlockBuilder blockBuilder = IPADDRESS.createBlockBuilder(null, 2);\n+        IPADDRESS.writeSlice(blockBuilder, ipSubnetMin(value));\n+        IPADDRESS.writeSlice(blockBuilder, ipSubnetMax(value));\n+        return blockBuilder.build();\n+    }\n+\n+    @Description(\"Is the IP address in the subnet of IP prefix\")\n+    @ScalarFunction(\"is_subnet_of\")\n+    @SqlType(StandardTypes.BOOLEAN)\n+    public static boolean isSubnetOf(@SqlType(StandardTypes.IPPREFIX) Slice left, @SqlType(StandardTypes.IPADDRESS) Slice right)\n+    {\n+        toInetAddress(right);\n+        return between(right, ipSubnetMin(left), ipSubnetMax(left));\n+    }\n+\n+    @Description(\"Is the second IP prefix argument within the subnet of the first IP prefix argument\")\n+    @ScalarFunction(\"is_subnet_of\")\n+    @SqlType(StandardTypes.BOOLEAN)\n+    public static boolean isPrefixSubnetOf(@SqlType(StandardTypes.IPPREFIX) Slice left, @SqlType(StandardTypes.IPPREFIX) Slice right)\n+    {\n+        return between(ipSubnetMin(right), ipSubnetMin(left), ipSubnetMax(left)) && between(ipSubnetMax(right), ipSubnetMin(left), ipSubnetMax(left));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40fc1302ce768ee1a677f204e1f06552f309b487"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM4NTI2MA==", "bodyText": "Agree. I thought about it but added the redundant check just to be sure. Anyways we can remove it.", "url": "https://github.com/prestodb/presto/pull/14090#discussion_r380385260", "createdAt": "2020-02-17T22:29:02Z", "author": {"login": "NikhilCollooru"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/IpPrefixFunctions.java", "diffHunk": "@@ -71,4 +74,78 @@ public static Slice stringIpPrefix(@SqlType(\"varchar(x)\") Slice slice, @SqlType(\n     {\n         return ipPrefix(castFromVarcharToIpAddress(slice), subnetSize);\n     }\n+\n+    @Description(\"Smallest IP address for a given IP prefix\")\n+    @ScalarFunction(\"ip_subnet_min\")\n+    @SqlType(StandardTypes.IPADDRESS)\n+    public static Slice ipSubnetMin(@SqlType(StandardTypes.IPPREFIX) Slice value)\n+    {\n+        return castFromIpPrefixToIpAddress(value);\n+    }\n+\n+    @Description(\"Largest IP address for a given IP prefix\")\n+    @ScalarFunction(\"ip_subnet_max\")\n+    @SqlType(StandardTypes.IPADDRESS)\n+    public static Slice ipSubnetMax(@SqlType(StandardTypes.IPPREFIX) Slice value)\n+    {\n+        byte[] address = toInetAddress(value.slice(0, IPADDRESS.getFixedSize())).getAddress();\n+        int subnetSize = value.getByte(IPPREFIX.getFixedSize() - 1) & 0xFF;\n+\n+        if (address.length == 4) {\n+            for (int i = 0; i < 4; i++) {\n+                address[3 - i] |= (byte) ~(~0 << min(max((32 - subnetSize) - 8 * i, 0), 8));\n+            }\n+            byte[] bytes = new byte[16];\n+            bytes[10] = (byte) 0xff;\n+            bytes[11] = (byte) 0xff;\n+            arraycopy(address, 0, bytes, 12, 4);\n+            address = bytes;\n+        }\n+        else if (address.length == 16) {\n+            for (int i = 0; i < 16; i++) {\n+                address[15 - i] |= (byte) ~(~0 << min(max((128 - subnetSize) - 8 * i, 0), 8));\n+            }\n+        }\n+        return wrappedBuffer(address);\n+    }\n+\n+    @Description(\"Array of smallest and largest IP address in the subnet of the given IP prefix\")\n+    @ScalarFunction(\"ip_subnet_range\")\n+    @SqlType(\"array(IPADDRESS)\")\n+    public static Block ipSubnetRange(@SqlType(StandardTypes.IPPREFIX) Slice value)\n+    {\n+        BlockBuilder blockBuilder = IPADDRESS.createBlockBuilder(null, 2);\n+        IPADDRESS.writeSlice(blockBuilder, ipSubnetMin(value));\n+        IPADDRESS.writeSlice(blockBuilder, ipSubnetMax(value));\n+        return blockBuilder.build();\n+    }\n+\n+    @Description(\"Is the IP address in the subnet of IP prefix\")\n+    @ScalarFunction(\"is_subnet_of\")\n+    @SqlType(StandardTypes.BOOLEAN)\n+    public static boolean isSubnetOf(@SqlType(StandardTypes.IPPREFIX) Slice left, @SqlType(StandardTypes.IPADDRESS) Slice right)\n+    {\n+        toInetAddress(right);\n+        return between(right, ipSubnetMin(left), ipSubnetMax(left));\n+    }\n+\n+    @Description(\"Is the second IP prefix argument within the subnet of the first IP prefix argument\")\n+    @ScalarFunction(\"is_subnet_of\")\n+    @SqlType(StandardTypes.BOOLEAN)\n+    public static boolean isPrefixSubnetOf(@SqlType(StandardTypes.IPPREFIX) Slice left, @SqlType(StandardTypes.IPPREFIX) Slice right)\n+    {\n+        return between(ipSubnetMin(right), ipSubnetMin(left), ipSubnetMax(left)) && between(ipSubnetMax(right), ipSubnetMin(left), ipSubnetMax(left));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM1NTY2NA=="}, "originalCommit": {"oid": "40fc1302ce768ee1a677f204e1f06552f309b487"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NDMwMTg0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/com/facebook/presto/operator/scalar/TestIpPrefixFunctions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMzoyMzowOFrOFqxiHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMzoyMzowOFrOFqxiHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM5NjA2Mg==", "bodyText": "nit: Add a line break between line 109 and line 110 for readability.", "url": "https://github.com/prestodb/presto/pull/14090#discussion_r380396062", "createdAt": "2020-02-17T23:23:08Z", "author": {"login": "caithagoras"}, "path": "presto-main/src/test/java/com/facebook/presto/operator/scalar/TestIpPrefixFunctions.java", "diffHunk": "@@ -57,4 +61,56 @@ public void testStringIpPrefix()\n         assertInvalidCast(\"IP_PREFIX('64:face:book::10', 24)\", \"Cannot cast value to IPADDRESS: 64:face:book::10\");\n         assertInvalidCast(\"IP_PREFIX('123.456.789.012', 24)\", \"Cannot cast value to IPADDRESS: 123.456.789.012\");\n     }\n+\n+    @Test\n+    public void testIpSubnetMin()\n+    {\n+        assertFunction(\"IP_SUBNET_MIN(IPPREFIX '1.2.3.4/24')\", IPADDRESS, \"1.2.3.0\");\n+        assertFunction(\"IP_SUBNET_MIN(IPPREFIX '1.2.3.4/32')\", IPADDRESS, \"1.2.3.4\");\n+        assertFunction(\"IP_SUBNET_MIN(IPPREFIX '64:ff9b::17/64')\", IPADDRESS, \"64:ff9b::\");\n+        assertFunction(\"IP_SUBNET_MIN(IPPREFIX '64:ff9b::17/127')\", IPADDRESS, \"64:ff9b::16\");\n+        assertFunction(\"IP_SUBNET_MIN(IPPREFIX '64:ff9b::17/128')\", IPADDRESS, \"64:ff9b::17\");\n+        assertFunction(\"IP_SUBNET_MIN(IPPREFIX '64:ff9b::17/0')\", IPADDRESS, \"::\");\n+    }\n+\n+    @Test\n+    public void testIpSubnetMax()\n+    {\n+        assertFunction(\"IP_SUBNET_MAX(IPPREFIX '1.2.3.128/26')\", IPADDRESS, \"1.2.3.191\");\n+        assertFunction(\"IP_SUBNET_MAX(IPPREFIX '192.168.128.4/32')\", IPADDRESS, \"192.168.128.4\");\n+        assertFunction(\"IP_SUBNET_MAX(IPPREFIX '10.1.16.3/9')\", IPADDRESS, \"10.127.255.255\");\n+        assertFunction(\"IP_SUBNET_MAX(IPPREFIX '2001:db8::16/127')\", IPADDRESS, \"2001:db8::17\");\n+        assertFunction(\"IP_SUBNET_MAX(IPPREFIX '2001:db8::16/128')\", IPADDRESS, \"2001:db8::16\");\n+        assertFunction(\"IP_SUBNET_MAX(IPPREFIX '64:ff9b::17/64')\", IPADDRESS, \"64:ff9b::ffff:ffff:ffff:ffff\");\n+        assertFunction(\"IP_SUBNET_MAX(IPPREFIX '64:ff9b::17/72')\", IPADDRESS, \"64:ff9b::ff:ffff:ffff:ffff\");\n+        assertFunction(\"IP_SUBNET_MAX(IPPREFIX '64:ff9b::17/0')\", IPADDRESS, \"ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff\");\n+    }\n+\n+    @Test\n+    public void testIpSubnetRange()\n+    {\n+        assertFunction(\"IP_SUBNET_RANGE(IPPREFIX '1.2.3.160/24')\", new ArrayType(IPADDRESS), ImmutableList.of(\"1.2.3.0\", \"1.2.3.255\"));\n+        assertFunction(\"IP_SUBNET_RANGE(IPPREFIX '1.2.3.128/31')\", new ArrayType(IPADDRESS), ImmutableList.of(\"1.2.3.128\", \"1.2.3.129\"));\n+        assertFunction(\"IP_SUBNET_RANGE(IPPREFIX '10.1.6.46/32')\", new ArrayType(IPADDRESS), ImmutableList.of(\"10.1.6.46\", \"10.1.6.46\"));\n+        assertFunction(\"IP_SUBNET_RANGE(IPPREFIX '10.1.6.46/0')\", new ArrayType(IPADDRESS), ImmutableList.of(\"0.0.0.0\", \"255.255.255.255\"));\n+        assertFunction(\"IP_SUBNET_RANGE(IPPREFIX '64:ff9b::17/64')\", new ArrayType(IPADDRESS), ImmutableList.of(\"64:ff9b::\", \"64:ff9b::ffff:ffff:ffff:ffff\"));\n+        assertFunction(\"IP_SUBNET_RANGE(IPPREFIX '64:ff9b::52f4/120')\", new ArrayType(IPADDRESS), ImmutableList.of(\"64:ff9b::5200\", \"64:ff9b::52ff\"));\n+        assertFunction(\"IP_SUBNET_RANGE(IPPREFIX '64:ff9b::17/128')\", new ArrayType(IPADDRESS), ImmutableList.of(\"64:ff9b::17\", \"64:ff9b::17\"));\n+    }\n+\n+    @Test\n+    public void testIsSubnetOf()\n+    {\n+        assertFunction(\"IS_SUBNET_OF(IPPREFIX '1.2.3.128/26', IPADDRESS '1.2.3.129')\", BOOLEAN, true);\n+        assertFunction(\"IS_SUBNET_OF(IPPREFIX '1.2.3.128/26', IPADDRESS '1.2.5.1')\", BOOLEAN, false);\n+        assertFunction(\"IS_SUBNET_OF(IPPREFIX '1.2.3.128/32', IPADDRESS '1.2.3.128')\", BOOLEAN, true);\n+        assertFunction(\"IS_SUBNET_OF(IPPREFIX '1.2.3.128/0', IPADDRESS '192.168.5.1')\", BOOLEAN, true);\n+        assertFunction(\"IS_SUBNET_OF(IPPREFIX '64:ff9b::17/64', IPADDRESS '64:ff9b::ffff:ff')\", BOOLEAN, true);\n+        assertFunction(\"IS_SUBNET_OF(IPPREFIX '64:ff9b::17/64', IPADDRESS '64:ffff::17')\", BOOLEAN, false);\n+        assertFunction(\"IS_SUBNET_OF(IPPREFIX '192.168.3.131/26', IPPREFIX '192.168.3.144/30')\", BOOLEAN, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "905a033fe7122a993ccb7093c8ece30118ddd75d"}, "originalPosition": 63}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2995, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}