{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3NjA1MjI3", "number": 14904, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMjoxMTowNVrOETBK4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMjoxMjo0NFrOETBODA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4Mzc3NTY4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/GatherAndMergeWindows.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMjoxMTowNVrOG4hXVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMjozNjoyMFrOG4manA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkyMDA4Ng==", "bodyText": "This return statement is very hard to read...Though I understand it is a copy-paste, maybe consider using variable name to represent each disjunctions?", "url": "https://github.com/prestodb/presto/pull/14904#discussion_r461920086", "createdAt": "2020-07-28T22:11:05Z", "author": {"login": "shixuan-fan"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/GatherAndMergeWindows.java", "diffHunk": "@@ -176,10 +170,21 @@ public Result apply(WindowNode parent, Captures captures, Context context)\n         }\n     }\n \n-    private static Set<VariableReferenceExpression> extractUnique(Assignments assignments, TypeProvider types)\n+    private static Set<VariableReferenceExpression> extractUnique(Assignments assignments)\n     {\n         Collection<RowExpression> expressions = assignments.getExpressions();\n-        return VariablesExtractor.extractUnique(expressions.stream().map(OriginalExpressionUtils::castToExpression).collect(toImmutableList()), types);\n+        return VariablesExtractor.extractUnique(expressions);\n+    }\n+\n+    private static boolean dependsOn(WindowNode parent, WindowNode child)\n+    {\n+        return parent.getPartitionBy().stream().anyMatch(child.getCreatedVariable()::contains)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e86d968a5d8f054b205576572e44dd4edb0a9fd"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk2OTk3MQ==", "bodyText": "This is a bit complicated.... I'm not sure if I understand the logic here correctly as well.", "url": "https://github.com/prestodb/presto/pull/14904#discussion_r461969971", "createdAt": "2020-07-29T00:31:57Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/GatherAndMergeWindows.java", "diffHunk": "@@ -176,10 +170,21 @@ public Result apply(WindowNode parent, Captures captures, Context context)\n         }\n     }\n \n-    private static Set<VariableReferenceExpression> extractUnique(Assignments assignments, TypeProvider types)\n+    private static Set<VariableReferenceExpression> extractUnique(Assignments assignments)\n     {\n         Collection<RowExpression> expressions = assignments.getExpressions();\n-        return VariablesExtractor.extractUnique(expressions.stream().map(OriginalExpressionUtils::castToExpression).collect(toImmutableList()), types);\n+        return VariablesExtractor.extractUnique(expressions);\n+    }\n+\n+    private static boolean dependsOn(WindowNode parent, WindowNode child)\n+    {\n+        return parent.getPartitionBy().stream().anyMatch(child.getCreatedVariable()::contains)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkyMDA4Ng=="}, "originalCommit": {"oid": "8e86d968a5d8f054b205576572e44dd4edb0a9fd"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk3NDUxOA==", "bodyText": "Let's keep it as is then :(", "url": "https://github.com/prestodb/presto/pull/14904#discussion_r461974518", "createdAt": "2020-07-29T00:49:20Z", "author": {"login": "shixuan-fan"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/GatherAndMergeWindows.java", "diffHunk": "@@ -176,10 +170,21 @@ public Result apply(WindowNode parent, Captures captures, Context context)\n         }\n     }\n \n-    private static Set<VariableReferenceExpression> extractUnique(Assignments assignments, TypeProvider types)\n+    private static Set<VariableReferenceExpression> extractUnique(Assignments assignments)\n     {\n         Collection<RowExpression> expressions = assignments.getExpressions();\n-        return VariablesExtractor.extractUnique(expressions.stream().map(OriginalExpressionUtils::castToExpression).collect(toImmutableList()), types);\n+        return VariablesExtractor.extractUnique(expressions);\n+    }\n+\n+    private static boolean dependsOn(WindowNode parent, WindowNode child)\n+    {\n+        return parent.getPartitionBy().stream().anyMatch(child.getCreatedVariable()::contains)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkyMDA4Ng=="}, "originalCommit": {"oid": "8e86d968a5d8f054b205576572e44dd4edb0a9fd"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAwMjg0NA==", "bodyText": "Ya, a clearer way of writing it might be to extract all variables of parent into a collection, and then call anyMatch(child.getCreatedVariable()::contains) once. But I don't have strong opinions.", "url": "https://github.com/prestodb/presto/pull/14904#discussion_r462002844", "createdAt": "2020-07-29T02:36:20Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/GatherAndMergeWindows.java", "diffHunk": "@@ -176,10 +170,21 @@ public Result apply(WindowNode parent, Captures captures, Context context)\n         }\n     }\n \n-    private static Set<VariableReferenceExpression> extractUnique(Assignments assignments, TypeProvider types)\n+    private static Set<VariableReferenceExpression> extractUnique(Assignments assignments)\n     {\n         Collection<RowExpression> expressions = assignments.getExpressions();\n-        return VariablesExtractor.extractUnique(expressions.stream().map(OriginalExpressionUtils::castToExpression).collect(toImmutableList()), types);\n+        return VariablesExtractor.extractUnique(expressions);\n+    }\n+\n+    private static boolean dependsOn(WindowNode parent, WindowNode child)\n+    {\n+        return parent.getPartitionBy().stream().anyMatch(child.getCreatedVariable()::contains)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkyMDA4Ng=="}, "originalCommit": {"oid": "8e86d968a5d8f054b205576572e44dd4edb0a9fd"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4Mzc4MzgwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/WindowFilterPushDown.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMjoxMjo0NFrOG4hcRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMjoxMjo0NFrOG4hcRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkyMTM1MA==", "bodyText": "nit: static import?", "url": "https://github.com/prestodb/presto/pull/14904#discussion_r461921350", "createdAt": "2020-07-28T22:12:44Z", "author": {"login": "shixuan-fan"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/WindowFilterPushDown.java", "diffHunk": "@@ -180,46 +183,46 @@ else if (source instanceof WindowNode && canOptimizeWindowFunction((WindowNode)\n \n         private PlanNode rewriteFilterSource(FilterNode filterNode, PlanNode source, VariableReferenceExpression rowNumberVariable, int upperBound)\n         {\n-            ExtractionResult extractionResult = fromPredicate(metadata, session, castToExpression(filterNode.getPredicate()), types);\n-            TupleDomain<String> tupleDomain = extractionResult.getTupleDomain();\n+            DomainTranslator.ExtractionResult<VariableReferenceExpression> extractionResult = domainTranslator.fromPredicate(session.toConnectorSession(), filterNode.getPredicate());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc66f18da5e987304e0bd557293c71ed36edb21b"}, "originalPosition": 111}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2182, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}