{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2MDc4ODM0", "number": 14312, "title": "Add documentation for KHyperLogLog", "bodyText": "== NO RELEASE NOTE ==", "createdAt": "2020-03-31T05:17:58Z", "url": "https://github.com/prestodb/presto/pull/14312", "merged": true, "mergeCommit": {"oid": "719823f92aea236bd7f7627014e5c384ef969e22"}, "closed": true, "closedAt": "2020-04-06T20:07:24Z", "author": {"login": "tdcmeehan"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcS8romgFqTM4NDQxNzIwNw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcTJXxKgFqTM4NTA5MTE0Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0NDE3MjA3", "url": "https://github.com/prestodb/presto/pull/14312#pullrequestreview-384417207", "createdAt": "2020-03-31T05:45:41Z", "commit": {"oid": "09b74ae349570a70af6b58768215c6f2088e3ecf"}, "state": "COMMENTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNTo0NTo0MVrOF-GJ_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNTo1ODoyNlrOF-GY_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY1Njg5NQ==", "bodyText": "nit: remove function. Usually we just reference the function with the link.", "url": "https://github.com/prestodb/presto/pull/14312#discussion_r400656895", "createdAt": "2020-03-31T05:45:41Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/functions/khyperloglog.rst", "diffHunk": "@@ -0,0 +1,75 @@\n+======================\n+KHyperLogLog Functions\n+======================\n+\n+Presto implements the `KHyperLogLog <https://research.google/pubs/pub47664/>`_\n+algorithm and data structure. KHyperLogLog data structure can be created\n+through :func:`khyperloglog_agg` function.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09b74ae349570a70af6b58768215c6f2088e3ecf"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY1NzAxNQ==", "bodyText": "Double backquotes:\n``MinHash``\n``HyperLogLog``", "url": "https://github.com/prestodb/presto/pull/14312#discussion_r400657015", "createdAt": "2020-03-31T05:46:04Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/functions/khyperloglog.rst", "diffHunk": "@@ -0,0 +1,75 @@\n+======================\n+KHyperLogLog Functions\n+======================\n+\n+Presto implements the `KHyperLogLog <https://research.google/pubs/pub47664/>`_\n+algorithm and data structure. KHyperLogLog data structure can be created\n+through :func:`khyperloglog_agg` function.\n+\n+\n+Data Structures\n+---------------\n+\n+KHyperLogLog is a data sketch that compactly represents the association of two\n+columns. It is implemented in Presto as a two-level data structure composed of\n+a MinHash structure whose entries map to HyperLogLog sketches.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09b74ae349570a70af6b58768215c6f2088e3ecf"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY1Nzg0MQ==", "bodyText": "Similar to HyperLogLog and P4HyperLogLog, create an entry with label in language/types.rst\n:ref:`hyperloglog_type` can be cast to and from ``varbinary`` ...", "url": "https://github.com/prestodb/presto/pull/14312#discussion_r400657841", "createdAt": "2020-03-31T05:48:45Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/functions/khyperloglog.rst", "diffHunk": "@@ -0,0 +1,75 @@\n+======================\n+KHyperLogLog Functions\n+======================\n+\n+Presto implements the `KHyperLogLog <https://research.google/pubs/pub47664/>`_\n+algorithm and data structure. KHyperLogLog data structure can be created\n+through :func:`khyperloglog_agg` function.\n+\n+\n+Data Structures\n+---------------\n+\n+KHyperLogLog is a data sketch that compactly represents the association of two\n+columns. It is implemented in Presto as a two-level data structure composed of\n+a MinHash structure whose entries map to HyperLogLog sketches.\n+\n+Serialization\n+-------------\n+\n+KHyperLogLog sketches can be cast to and from ``varbinary``. This allows them to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09b74ae349570a70af6b58768215c6f2088e3ecf"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY1ODA1NA==", "bodyText": "``HyperLogLog``", "url": "https://github.com/prestodb/presto/pull/14312#discussion_r400658054", "createdAt": "2020-03-31T05:49:28Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/functions/khyperloglog.rst", "diffHunk": "@@ -0,0 +1,75 @@\n+======================\n+KHyperLogLog Functions\n+======================\n+\n+Presto implements the `KHyperLogLog <https://research.google/pubs/pub47664/>`_\n+algorithm and data structure. KHyperLogLog data structure can be created\n+through :func:`khyperloglog_agg` function.\n+\n+\n+Data Structures\n+---------------\n+\n+KHyperLogLog is a data sketch that compactly represents the association of two\n+columns. It is implemented in Presto as a two-level data structure composed of\n+a MinHash structure whose entries map to HyperLogLog sketches.\n+\n+Serialization\n+-------------\n+\n+KHyperLogLog sketches can be cast to and from ``varbinary``. This allows them to\n+be stored for later use.\n+\n+Functions\n+---------\n+\n+.. function:: khyperloglog_agg(x, y) -> KHyperLogLog\n+\n+    Returns the KHyperLogLog sketch that represents the relationship between\n+    columns ``x`` and ``y``. The MinHash structure summarizes ``x`` and the HyperLogLog\n+    sketches represent ``y`` values linked to ``x`` values.\n+\n+.. function:: cardinality(khll) -> bigint\n+    :noindex:\n+\n+    This calculates the cardinality of the MinHash sketch, i.e. ``x``'s cardinality\n+\n+.. function:: intersection_cardinality(khll1, khll2) ->  bigint\n+\n+    Returns the set intersection cardinality of the data represented by the MinHash\n+    structures of ``khll1`` and ``khll2``.\n+\n+.. function:: jaccard_index(khll1, khll2) ->  double\n+\n+    Returns the Jaccard index of the data represented by the MinHash structures of\n+    ``khll1`` and ``khll2``.\n+\n+.. function:: uniqueness_distribution(khll) ->  map<bigint,double>\n+\n+    For a certain value ``x'``, uniqueness is understood as how many ``y'`` values are\n+    associated to it in the source dataset. This is obtained with the cardinality\n+    of the HyperLogLog that is mapped from the MinHash bucket that corresponds to\n+    ``x'``. This function returns a histogram that represents the uniqueness\n+    distribution, the X-axis being ``uniqueness`` and the Y-axis being relative\n+    frequency of ``x`` values.\n+\n+.. function:: uniqueness_distribution(khll, histogramSize) ->  map<bigint,double>\n+\n+    Returns the uniqueness histogram with the given amount of buckets. If omitted,\n+    the value defaults to 256. All ``uniqueness``es greater than ``histogramSize`` are\n+    accumulated in the last bucket.\n+\n+.. function:: reidentification_potential(khll, threshold) ->  double\n+\n+    The reidentification potential is the ratio of ``x`` values that have a\n+    ``uniqueness`` under the given ``threshold``.\n+\n+.. function:: merge(khll) -> KHyperLogLog\n+    :noindex:\n+\n+    Returns the KHyperLogLog of the aggregate union of the individual KHyperLogLog\n+    structures.\n+\n+.. function:: merge_khll(array(khll)) -> HKyperLogLog\n+\n+    Returns the KHyperLogLog of the union of an array of KHyperLogLog structures.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09b74ae349570a70af6b58768215c6f2088e3ecf"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY1ODA3OA==", "bodyText": "``HyperLogLog``", "url": "https://github.com/prestodb/presto/pull/14312#discussion_r400658078", "createdAt": "2020-03-31T05:49:32Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/functions/khyperloglog.rst", "diffHunk": "@@ -0,0 +1,75 @@\n+======================\n+KHyperLogLog Functions\n+======================\n+\n+Presto implements the `KHyperLogLog <https://research.google/pubs/pub47664/>`_\n+algorithm and data structure. KHyperLogLog data structure can be created\n+through :func:`khyperloglog_agg` function.\n+\n+\n+Data Structures\n+---------------\n+\n+KHyperLogLog is a data sketch that compactly represents the association of two\n+columns. It is implemented in Presto as a two-level data structure composed of\n+a MinHash structure whose entries map to HyperLogLog sketches.\n+\n+Serialization\n+-------------\n+\n+KHyperLogLog sketches can be cast to and from ``varbinary``. This allows them to\n+be stored for later use.\n+\n+Functions\n+---------\n+\n+.. function:: khyperloglog_agg(x, y) -> KHyperLogLog\n+\n+    Returns the KHyperLogLog sketch that represents the relationship between\n+    columns ``x`` and ``y``. The MinHash structure summarizes ``x`` and the HyperLogLog\n+    sketches represent ``y`` values linked to ``x`` values.\n+\n+.. function:: cardinality(khll) -> bigint\n+    :noindex:\n+\n+    This calculates the cardinality of the MinHash sketch, i.e. ``x``'s cardinality\n+\n+.. function:: intersection_cardinality(khll1, khll2) ->  bigint\n+\n+    Returns the set intersection cardinality of the data represented by the MinHash\n+    structures of ``khll1`` and ``khll2``.\n+\n+.. function:: jaccard_index(khll1, khll2) ->  double\n+\n+    Returns the Jaccard index of the data represented by the MinHash structures of\n+    ``khll1`` and ``khll2``.\n+\n+.. function:: uniqueness_distribution(khll) ->  map<bigint,double>\n+\n+    For a certain value ``x'``, uniqueness is understood as how many ``y'`` values are\n+    associated to it in the source dataset. This is obtained with the cardinality\n+    of the HyperLogLog that is mapped from the MinHash bucket that corresponds to\n+    ``x'``. This function returns a histogram that represents the uniqueness\n+    distribution, the X-axis being ``uniqueness`` and the Y-axis being relative\n+    frequency of ``x`` values.\n+\n+.. function:: uniqueness_distribution(khll, histogramSize) ->  map<bigint,double>\n+\n+    Returns the uniqueness histogram with the given amount of buckets. If omitted,\n+    the value defaults to 256. All ``uniqueness``es greater than ``histogramSize`` are\n+    accumulated in the last bucket.\n+\n+.. function:: reidentification_potential(khll, threshold) ->  double\n+\n+    The reidentification potential is the ratio of ``x`` values that have a\n+    ``uniqueness`` under the given ``threshold``.\n+\n+.. function:: merge(khll) -> KHyperLogLog\n+    :noindex:\n+\n+    Returns the KHyperLogLog of the aggregate union of the individual KHyperLogLog", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09b74ae349570a70af6b58768215c6f2088e3ecf"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY1ODU1OA==", "bodyText": "nit: associated with", "url": "https://github.com/prestodb/presto/pull/14312#discussion_r400658558", "createdAt": "2020-03-31T05:51:05Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/functions/khyperloglog.rst", "diffHunk": "@@ -0,0 +1,75 @@\n+======================\n+KHyperLogLog Functions\n+======================\n+\n+Presto implements the `KHyperLogLog <https://research.google/pubs/pub47664/>`_\n+algorithm and data structure. KHyperLogLog data structure can be created\n+through :func:`khyperloglog_agg` function.\n+\n+\n+Data Structures\n+---------------\n+\n+KHyperLogLog is a data sketch that compactly represents the association of two\n+columns. It is implemented in Presto as a two-level data structure composed of\n+a MinHash structure whose entries map to HyperLogLog sketches.\n+\n+Serialization\n+-------------\n+\n+KHyperLogLog sketches can be cast to and from ``varbinary``. This allows them to\n+be stored for later use.\n+\n+Functions\n+---------\n+\n+.. function:: khyperloglog_agg(x, y) -> KHyperLogLog\n+\n+    Returns the KHyperLogLog sketch that represents the relationship between\n+    columns ``x`` and ``y``. The MinHash structure summarizes ``x`` and the HyperLogLog\n+    sketches represent ``y`` values linked to ``x`` values.\n+\n+.. function:: cardinality(khll) -> bigint\n+    :noindex:\n+\n+    This calculates the cardinality of the MinHash sketch, i.e. ``x``'s cardinality\n+\n+.. function:: intersection_cardinality(khll1, khll2) ->  bigint\n+\n+    Returns the set intersection cardinality of the data represented by the MinHash\n+    structures of ``khll1`` and ``khll2``.\n+\n+.. function:: jaccard_index(khll1, khll2) ->  double\n+\n+    Returns the Jaccard index of the data represented by the MinHash structures of\n+    ``khll1`` and ``khll2``.\n+\n+.. function:: uniqueness_distribution(khll) ->  map<bigint,double>\n+\n+    For a certain value ``x'``, uniqueness is understood as how many ``y'`` values are\n+    associated to it in the source dataset. This is obtained with the cardinality", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09b74ae349570a70af6b58768215c6f2088e3ecf"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY1ODc1Mg==", "bodyText": "looks like typo", "url": "https://github.com/prestodb/presto/pull/14312#discussion_r400658752", "createdAt": "2020-03-31T05:51:47Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/functions/khyperloglog.rst", "diffHunk": "@@ -0,0 +1,75 @@\n+======================\n+KHyperLogLog Functions\n+======================\n+\n+Presto implements the `KHyperLogLog <https://research.google/pubs/pub47664/>`_\n+algorithm and data structure. KHyperLogLog data structure can be created\n+through :func:`khyperloglog_agg` function.\n+\n+\n+Data Structures\n+---------------\n+\n+KHyperLogLog is a data sketch that compactly represents the association of two\n+columns. It is implemented in Presto as a two-level data structure composed of\n+a MinHash structure whose entries map to HyperLogLog sketches.\n+\n+Serialization\n+-------------\n+\n+KHyperLogLog sketches can be cast to and from ``varbinary``. This allows them to\n+be stored for later use.\n+\n+Functions\n+---------\n+\n+.. function:: khyperloglog_agg(x, y) -> KHyperLogLog\n+\n+    Returns the KHyperLogLog sketch that represents the relationship between\n+    columns ``x`` and ``y``. The MinHash structure summarizes ``x`` and the HyperLogLog\n+    sketches represent ``y`` values linked to ``x`` values.\n+\n+.. function:: cardinality(khll) -> bigint\n+    :noindex:\n+\n+    This calculates the cardinality of the MinHash sketch, i.e. ``x``'s cardinality\n+\n+.. function:: intersection_cardinality(khll1, khll2) ->  bigint\n+\n+    Returns the set intersection cardinality of the data represented by the MinHash\n+    structures of ``khll1`` and ``khll2``.\n+\n+.. function:: jaccard_index(khll1, khll2) ->  double\n+\n+    Returns the Jaccard index of the data represented by the MinHash structures of\n+    ``khll1`` and ``khll2``.\n+\n+.. function:: uniqueness_distribution(khll) ->  map<bigint,double>\n+\n+    For a certain value ``x'``, uniqueness is understood as how many ``y'`` values are\n+    associated to it in the source dataset. This is obtained with the cardinality\n+    of the HyperLogLog that is mapped from the MinHash bucket that corresponds to\n+    ``x'``. This function returns a histogram that represents the uniqueness\n+    distribution, the X-axis being ``uniqueness`` and the Y-axis being relative\n+    frequency of ``x`` values.\n+\n+.. function:: uniqueness_distribution(khll, histogramSize) ->  map<bigint,double>\n+\n+    Returns the uniqueness histogram with the given amount of buckets. If omitted,\n+    the value defaults to 256. All ``uniqueness``es greater than ``histogramSize`` are", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09b74ae349570a70af6b58768215c6f2088e3ecf"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY1ODk0MA==", "bodyText": "nit:\nthe ``uniqueness``\nthe relative frequency", "url": "https://github.com/prestodb/presto/pull/14312#discussion_r400658940", "createdAt": "2020-03-31T05:52:30Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/functions/khyperloglog.rst", "diffHunk": "@@ -0,0 +1,75 @@\n+======================\n+KHyperLogLog Functions\n+======================\n+\n+Presto implements the `KHyperLogLog <https://research.google/pubs/pub47664/>`_\n+algorithm and data structure. KHyperLogLog data structure can be created\n+through :func:`khyperloglog_agg` function.\n+\n+\n+Data Structures\n+---------------\n+\n+KHyperLogLog is a data sketch that compactly represents the association of two\n+columns. It is implemented in Presto as a two-level data structure composed of\n+a MinHash structure whose entries map to HyperLogLog sketches.\n+\n+Serialization\n+-------------\n+\n+KHyperLogLog sketches can be cast to and from ``varbinary``. This allows them to\n+be stored for later use.\n+\n+Functions\n+---------\n+\n+.. function:: khyperloglog_agg(x, y) -> KHyperLogLog\n+\n+    Returns the KHyperLogLog sketch that represents the relationship between\n+    columns ``x`` and ``y``. The MinHash structure summarizes ``x`` and the HyperLogLog\n+    sketches represent ``y`` values linked to ``x`` values.\n+\n+.. function:: cardinality(khll) -> bigint\n+    :noindex:\n+\n+    This calculates the cardinality of the MinHash sketch, i.e. ``x``'s cardinality\n+\n+.. function:: intersection_cardinality(khll1, khll2) ->  bigint\n+\n+    Returns the set intersection cardinality of the data represented by the MinHash\n+    structures of ``khll1`` and ``khll2``.\n+\n+.. function:: jaccard_index(khll1, khll2) ->  double\n+\n+    Returns the Jaccard index of the data represented by the MinHash structures of\n+    ``khll1`` and ``khll2``.\n+\n+.. function:: uniqueness_distribution(khll) ->  map<bigint,double>\n+\n+    For a certain value ``x'``, uniqueness is understood as how many ``y'`` values are\n+    associated to it in the source dataset. This is obtained with the cardinality\n+    of the HyperLogLog that is mapped from the MinHash bucket that corresponds to\n+    ``x'``. This function returns a histogram that represents the uniqueness\n+    distribution, the X-axis being ``uniqueness`` and the Y-axis being relative", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09b74ae349570a70af6b58768215c6f2088e3ecf"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY1OTA2Nw==", "bodyText": "``MinHash``", "url": "https://github.com/prestodb/presto/pull/14312#discussion_r400659067", "createdAt": "2020-03-31T05:52:53Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/functions/khyperloglog.rst", "diffHunk": "@@ -0,0 +1,75 @@\n+======================\n+KHyperLogLog Functions\n+======================\n+\n+Presto implements the `KHyperLogLog <https://research.google/pubs/pub47664/>`_\n+algorithm and data structure. KHyperLogLog data structure can be created\n+through :func:`khyperloglog_agg` function.\n+\n+\n+Data Structures\n+---------------\n+\n+KHyperLogLog is a data sketch that compactly represents the association of two\n+columns. It is implemented in Presto as a two-level data structure composed of\n+a MinHash structure whose entries map to HyperLogLog sketches.\n+\n+Serialization\n+-------------\n+\n+KHyperLogLog sketches can be cast to and from ``varbinary``. This allows them to\n+be stored for later use.\n+\n+Functions\n+---------\n+\n+.. function:: khyperloglog_agg(x, y) -> KHyperLogLog\n+\n+    Returns the KHyperLogLog sketch that represents the relationship between\n+    columns ``x`` and ``y``. The MinHash structure summarizes ``x`` and the HyperLogLog\n+    sketches represent ``y`` values linked to ``x`` values.\n+\n+.. function:: cardinality(khll) -> bigint\n+    :noindex:\n+\n+    This calculates the cardinality of the MinHash sketch, i.e. ``x``'s cardinality\n+\n+.. function:: intersection_cardinality(khll1, khll2) ->  bigint\n+\n+    Returns the set intersection cardinality of the data represented by the MinHash", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09b74ae349570a70af6b58768215c6f2088e3ecf"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY1OTE0MQ==", "bodyText": "``HyperLogLog``", "url": "https://github.com/prestodb/presto/pull/14312#discussion_r400659141", "createdAt": "2020-03-31T05:53:14Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/functions/khyperloglog.rst", "diffHunk": "@@ -0,0 +1,75 @@\n+======================\n+KHyperLogLog Functions\n+======================\n+\n+Presto implements the `KHyperLogLog <https://research.google/pubs/pub47664/>`_\n+algorithm and data structure. KHyperLogLog data structure can be created\n+through :func:`khyperloglog_agg` function.\n+\n+\n+Data Structures\n+---------------\n+\n+KHyperLogLog is a data sketch that compactly represents the association of two\n+columns. It is implemented in Presto as a two-level data structure composed of\n+a MinHash structure whose entries map to HyperLogLog sketches.\n+\n+Serialization\n+-------------\n+\n+KHyperLogLog sketches can be cast to and from ``varbinary``. This allows them to\n+be stored for later use.\n+\n+Functions\n+---------\n+\n+.. function:: khyperloglog_agg(x, y) -> KHyperLogLog\n+\n+    Returns the KHyperLogLog sketch that represents the relationship between\n+    columns ``x`` and ``y``. The MinHash structure summarizes ``x`` and the HyperLogLog\n+    sketches represent ``y`` values linked to ``x`` values.\n+\n+.. function:: cardinality(khll) -> bigint\n+    :noindex:\n+\n+    This calculates the cardinality of the MinHash sketch, i.e. ``x``'s cardinality\n+\n+.. function:: intersection_cardinality(khll1, khll2) ->  bigint\n+\n+    Returns the set intersection cardinality of the data represented by the MinHash\n+    structures of ``khll1`` and ``khll2``.\n+\n+.. function:: jaccard_index(khll1, khll2) ->  double\n+\n+    Returns the Jaccard index of the data represented by the MinHash structures of\n+    ``khll1`` and ``khll2``.\n+\n+.. function:: uniqueness_distribution(khll) ->  map<bigint,double>\n+\n+    For a certain value ``x'``, uniqueness is understood as how many ``y'`` values are\n+    associated to it in the source dataset. This is obtained with the cardinality\n+    of the HyperLogLog that is mapped from the MinHash bucket that corresponds to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09b74ae349570a70af6b58768215c6f2088e3ecf"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY1OTI2Mw==", "bodyText": "``MinHash``", "url": "https://github.com/prestodb/presto/pull/14312#discussion_r400659263", "createdAt": "2020-03-31T05:53:36Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/functions/khyperloglog.rst", "diffHunk": "@@ -0,0 +1,75 @@\n+======================\n+KHyperLogLog Functions\n+======================\n+\n+Presto implements the `KHyperLogLog <https://research.google/pubs/pub47664/>`_\n+algorithm and data structure. KHyperLogLog data structure can be created\n+through :func:`khyperloglog_agg` function.\n+\n+\n+Data Structures\n+---------------\n+\n+KHyperLogLog is a data sketch that compactly represents the association of two\n+columns. It is implemented in Presto as a two-level data structure composed of\n+a MinHash structure whose entries map to HyperLogLog sketches.\n+\n+Serialization\n+-------------\n+\n+KHyperLogLog sketches can be cast to and from ``varbinary``. This allows them to\n+be stored for later use.\n+\n+Functions\n+---------\n+\n+.. function:: khyperloglog_agg(x, y) -> KHyperLogLog\n+\n+    Returns the KHyperLogLog sketch that represents the relationship between\n+    columns ``x`` and ``y``. The MinHash structure summarizes ``x`` and the HyperLogLog\n+    sketches represent ``y`` values linked to ``x`` values.\n+\n+.. function:: cardinality(khll) -> bigint\n+    :noindex:\n+\n+    This calculates the cardinality of the MinHash sketch, i.e. ``x``'s cardinality\n+\n+.. function:: intersection_cardinality(khll1, khll2) ->  bigint\n+\n+    Returns the set intersection cardinality of the data represented by the MinHash\n+    structures of ``khll1`` and ``khll2``.\n+\n+.. function:: jaccard_index(khll1, khll2) ->  double\n+\n+    Returns the Jaccard index of the data represented by the MinHash structures of", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09b74ae349570a70af6b58768215c6f2088e3ecf"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY2MDYwMg==", "bodyText": "MinHash\nAdd a period (\".\") at the end of the line.", "url": "https://github.com/prestodb/presto/pull/14312#discussion_r400660602", "createdAt": "2020-03-31T05:57:59Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/functions/khyperloglog.rst", "diffHunk": "@@ -0,0 +1,75 @@\n+======================\n+KHyperLogLog Functions\n+======================\n+\n+Presto implements the `KHyperLogLog <https://research.google/pubs/pub47664/>`_\n+algorithm and data structure. KHyperLogLog data structure can be created\n+through :func:`khyperloglog_agg` function.\n+\n+\n+Data Structures\n+---------------\n+\n+KHyperLogLog is a data sketch that compactly represents the association of two\n+columns. It is implemented in Presto as a two-level data structure composed of\n+a MinHash structure whose entries map to HyperLogLog sketches.\n+\n+Serialization\n+-------------\n+\n+KHyperLogLog sketches can be cast to and from ``varbinary``. This allows them to\n+be stored for later use.\n+\n+Functions\n+---------\n+\n+.. function:: khyperloglog_agg(x, y) -> KHyperLogLog\n+\n+    Returns the KHyperLogLog sketch that represents the relationship between\n+    columns ``x`` and ``y``. The MinHash structure summarizes ``x`` and the HyperLogLog\n+    sketches represent ``y`` values linked to ``x`` values.\n+\n+.. function:: cardinality(khll) -> bigint\n+    :noindex:\n+\n+    This calculates the cardinality of the MinHash sketch, i.e. ``x``'s cardinality", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09b74ae349570a70af6b58768215c6f2088e3ecf"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY2MDY3Mg==", "bodyText": "HyperLogLog", "url": "https://github.com/prestodb/presto/pull/14312#discussion_r400660672", "createdAt": "2020-03-31T05:58:14Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/functions/khyperloglog.rst", "diffHunk": "@@ -0,0 +1,75 @@\n+======================\n+KHyperLogLog Functions\n+======================\n+\n+Presto implements the `KHyperLogLog <https://research.google/pubs/pub47664/>`_\n+algorithm and data structure. KHyperLogLog data structure can be created\n+through :func:`khyperloglog_agg` function.\n+\n+\n+Data Structures\n+---------------\n+\n+KHyperLogLog is a data sketch that compactly represents the association of two\n+columns. It is implemented in Presto as a two-level data structure composed of\n+a MinHash structure whose entries map to HyperLogLog sketches.\n+\n+Serialization\n+-------------\n+\n+KHyperLogLog sketches can be cast to and from ``varbinary``. This allows them to\n+be stored for later use.\n+\n+Functions\n+---------\n+\n+.. function:: khyperloglog_agg(x, y) -> KHyperLogLog\n+\n+    Returns the KHyperLogLog sketch that represents the relationship between", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09b74ae349570a70af6b58768215c6f2088e3ecf"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY2MDczNQ==", "bodyText": "MinHash", "url": "https://github.com/prestodb/presto/pull/14312#discussion_r400660735", "createdAt": "2020-03-31T05:58:26Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/functions/khyperloglog.rst", "diffHunk": "@@ -0,0 +1,75 @@\n+======================\n+KHyperLogLog Functions\n+======================\n+\n+Presto implements the `KHyperLogLog <https://research.google/pubs/pub47664/>`_\n+algorithm and data structure. KHyperLogLog data structure can be created\n+through :func:`khyperloglog_agg` function.\n+\n+\n+Data Structures\n+---------------\n+\n+KHyperLogLog is a data sketch that compactly represents the association of two\n+columns. It is implemented in Presto as a two-level data structure composed of\n+a MinHash structure whose entries map to HyperLogLog sketches.\n+\n+Serialization\n+-------------\n+\n+KHyperLogLog sketches can be cast to and from ``varbinary``. This allows them to\n+be stored for later use.\n+\n+Functions\n+---------\n+\n+.. function:: khyperloglog_agg(x, y) -> KHyperLogLog\n+\n+    Returns the KHyperLogLog sketch that represents the relationship between\n+    columns ``x`` and ``y``. The MinHash structure summarizes ``x`` and the HyperLogLog", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09b74ae349570a70af6b58768215c6f2088e3ecf"}, "originalPosition": 29}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "09b74ae349570a70af6b58768215c6f2088e3ecf", "author": {"user": {"login": "tdcmeehan", "name": "Timothy Meehan"}}, "url": "https://github.com/prestodb/presto/commit/09b74ae349570a70af6b58768215c6f2088e3ecf", "committedDate": "2020-03-31T05:16:03Z", "message": "Add documentation for KHyperLogLog\n\nCo-authored-by: Sundar Jeyaraman <sundarj@fb.com>"}, "afterCommit": {"oid": "3f19b3a44a71f0b82eeda0b02d94cdecd6b1f326", "author": {"user": {"login": "tdcmeehan", "name": "Timothy Meehan"}}, "url": "https://github.com/prestodb/presto/commit/3f19b3a44a71f0b82eeda0b02d94cdecd6b1f326", "committedDate": "2020-03-31T16:41:22Z", "message": "Add documentation for KHyperLogLog\n\nCo-authored-by: Sundar Jeyaraman <sundarj@fb.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3f19b3a44a71f0b82eeda0b02d94cdecd6b1f326", "author": {"user": {"login": "tdcmeehan", "name": "Timothy Meehan"}}, "url": "https://github.com/prestodb/presto/commit/3f19b3a44a71f0b82eeda0b02d94cdecd6b1f326", "committedDate": "2020-03-31T16:41:22Z", "message": "Add documentation for KHyperLogLog\n\nCo-authored-by: Sundar Jeyaraman <sundarj@fb.com>"}, "afterCommit": {"oid": "0c69199dd799c2f0b10969ef4d227869346ec151", "author": {"user": {"login": "tdcmeehan", "name": "Timothy Meehan"}}, "url": "https://github.com/prestodb/presto/commit/0c69199dd799c2f0b10969ef4d227869346ec151", "committedDate": "2020-03-31T16:51:42Z", "message": "Add documentation for KHyperLogLog\n\nCo-authored-by: Sundar Jeyaraman <sundarj@fb.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1MDMwOTA1", "url": "https://github.com/prestodb/presto/pull/14312#pullrequestreview-385030905", "createdAt": "2020-03-31T19:16:40Z", "commit": {"oid": "0c69199dd799c2f0b10969ef4d227869346ec151"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOToxNjo0MFrOF-kfqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOToyMjo1NFrOF-ktUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE1Mzk2MQ==", "bodyText": "I believe you need to add the label before the KHperLogLog heading. See example right above.", "url": "https://github.com/prestodb/presto/pull/14312#discussion_r401153961", "createdAt": "2020-03-31T19:16:40Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/language/types.rst", "diffHunk": "@@ -279,6 +279,14 @@ Calculating the approximate distinct count can be done much more cheaply than an\n     A P4HyperLogLog sketch is similar to :ref:`hyperloglog_type`, but it starts (and remains)\n     in the dense representation.\n \n+KHyperLogLog\n+------------\n+\n+KHyperLogLog is a data sketch that can be used to compactly represents the association of two\n+columns. See :doc:`/functions/khyperloglog`.\n+\n+.. _khyperloglog_type:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c69199dd799c2f0b10969ef4d227869346ec151"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE1NzQ1OA==", "bodyText": "This line is not updated yet. You can replace KHyperLogLog sketches  with\n:ref:`hyperloglog_type`", "url": "https://github.com/prestodb/presto/pull/14312#discussion_r401157458", "createdAt": "2020-03-31T19:22:54Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/functions/khyperloglog.rst", "diffHunk": "@@ -0,0 +1,75 @@\n+======================\n+KHyperLogLog Functions\n+======================\n+\n+Presto implements the `KHyperLogLog <https://research.google/pubs/pub47664/>`_\n+algorithm and data structure. KHyperLogLog data structure can be created\n+through :func:`khyperloglog_agg` function.\n+\n+\n+Data Structures\n+---------------\n+\n+KHyperLogLog is a data sketch that compactly represents the association of two\n+columns. It is implemented in Presto as a two-level data structure composed of\n+a MinHash structure whose entries map to HyperLogLog sketches.\n+\n+Serialization\n+-------------\n+\n+KHyperLogLog sketches can be cast to and from ``varbinary``. This allows them to", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY1Nzg0MQ=="}, "originalCommit": {"oid": "09b74ae349570a70af6b58768215c6f2088e3ecf"}, "originalPosition": 20}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7195b3dfd7fb6c24b4ecdea91eb4857bc8369ddb", "author": {"user": {"login": "tdcmeehan", "name": "Timothy Meehan"}}, "url": "https://github.com/prestodb/presto/commit/7195b3dfd7fb6c24b4ecdea91eb4857bc8369ddb", "committedDate": "2020-03-31T20:25:07Z", "message": "Add documentation for KHyperLogLog\n\nCo-authored-by: Sundar Jeyaraman <sundarj@fb.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0c69199dd799c2f0b10969ef4d227869346ec151", "author": {"user": {"login": "tdcmeehan", "name": "Timothy Meehan"}}, "url": "https://github.com/prestodb/presto/commit/0c69199dd799c2f0b10969ef4d227869346ec151", "committedDate": "2020-03-31T16:51:42Z", "message": "Add documentation for KHyperLogLog\n\nCo-authored-by: Sundar Jeyaraman <sundarj@fb.com>"}, "afterCommit": {"oid": "7195b3dfd7fb6c24b4ecdea91eb4857bc8369ddb", "author": {"user": {"login": "tdcmeehan", "name": "Timothy Meehan"}}, "url": "https://github.com/prestodb/presto/commit/7195b3dfd7fb6c24b4ecdea91eb4857bc8369ddb", "committedDate": "2020-03-31T20:25:07Z", "message": "Add documentation for KHyperLogLog\n\nCo-authored-by: Sundar Jeyaraman <sundarj@fb.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1MDkxMTQz", "url": "https://github.com/prestodb/presto/pull/14312#pullrequestreview-385091143", "createdAt": "2020-03-31T20:45:45Z", "commit": {"oid": "7195b3dfd7fb6c24b4ecdea91eb4857bc8369ddb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2135, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}