{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzNDI5Njcw", "number": 14292, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNzowODoyOFrODrT_Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMjo1Mzo1NlrODrbczA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NzQyNzkwOnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/com/facebook/presto/spi/block/BlockSerdeUtil.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNzowODoyOFrOF7lbDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMzoyOTozOFrOF7yKNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAyMzQzOA==", "bodyText": "I would throw something like AssertionError, to assure it is never caught.", "url": "https://github.com/prestodb/presto/pull/14292#discussion_r398023438", "createdAt": "2020-03-25T17:08:28Z", "author": {"login": "arhimondr"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/block/BlockSerdeUtil.java", "diffHunk": "@@ -11,21 +11,29 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package com.facebook.presto.block;\n+package com.facebook.presto.spi.block;\n \n-import com.facebook.presto.spi.block.Block;\n-import com.facebook.presto.spi.block.BlockEncodingSerde;\n+import com.facebook.presto.spi.PrestoException;\n import io.airlift.slice.Slice;\n import io.airlift.slice.SliceInput;\n import io.airlift.slice.SliceOutput;\n \n import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n \n-import static com.facebook.presto.util.Reflection.methodHandle;\n+import static com.facebook.presto.spi.StandardErrorCode.GENERIC_INTERNAL_ERROR;\n \n public final class BlockSerdeUtil\n {\n-    public static final MethodHandle READ_BLOCK = methodHandle(BlockSerdeUtil.class, \"readBlock\", BlockEncodingSerde.class, Slice.class);\n+    public static final MethodHandle READ_BLOCK;\n+    static {\n+        try {\n+            READ_BLOCK = MethodHandles.lookup().unreflect(BlockSerdeUtil.class.getMethod(\"readBlock\", BlockEncodingSerde.class, Slice.class));\n+        }\n+        catch (IllegalAccessException | NoSuchMethodException e) {\n+            throw new PrestoException(GENERIC_INTERNAL_ERROR, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab23f55f2ae49191100063dd98698b1260a8b54c"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAzMjQyMA==", "bodyText": "I keep the logics unchanged as before,  just remove the dependency.", "url": "https://github.com/prestodb/presto/pull/14292#discussion_r398032420", "createdAt": "2020-03-25T17:20:20Z", "author": {"login": "viczhang861"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/block/BlockSerdeUtil.java", "diffHunk": "@@ -11,21 +11,29 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package com.facebook.presto.block;\n+package com.facebook.presto.spi.block;\n \n-import com.facebook.presto.spi.block.Block;\n-import com.facebook.presto.spi.block.BlockEncodingSerde;\n+import com.facebook.presto.spi.PrestoException;\n import io.airlift.slice.Slice;\n import io.airlift.slice.SliceInput;\n import io.airlift.slice.SliceOutput;\n \n import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n \n-import static com.facebook.presto.util.Reflection.methodHandle;\n+import static com.facebook.presto.spi.StandardErrorCode.GENERIC_INTERNAL_ERROR;\n \n public final class BlockSerdeUtil\n {\n-    public static final MethodHandle READ_BLOCK = methodHandle(BlockSerdeUtil.class, \"readBlock\", BlockEncodingSerde.class, Slice.class);\n+    public static final MethodHandle READ_BLOCK;\n+    static {\n+        try {\n+            READ_BLOCK = MethodHandles.lookup().unreflect(BlockSerdeUtil.class.getMethod(\"readBlock\", BlockEncodingSerde.class, Slice.class));\n+        }\n+        catch (IllegalAccessException | NoSuchMethodException e) {\n+            throw new PrestoException(GENERIC_INTERNAL_ERROR, e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAyMzQzOA=="}, "originalCommit": {"oid": "ab23f55f2ae49191100063dd98698b1260a8b54c"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIxODkwOQ==", "bodyText": "Curious: why need to use static code block here ( instead of keeping the previous static variable initialization ?)", "url": "https://github.com/prestodb/presto/pull/14292#discussion_r398218909", "createdAt": "2020-03-25T22:52:09Z", "author": {"login": "wenleix"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/block/BlockSerdeUtil.java", "diffHunk": "@@ -11,21 +11,29 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package com.facebook.presto.block;\n+package com.facebook.presto.spi.block;\n \n-import com.facebook.presto.spi.block.Block;\n-import com.facebook.presto.spi.block.BlockEncodingSerde;\n+import com.facebook.presto.spi.PrestoException;\n import io.airlift.slice.Slice;\n import io.airlift.slice.SliceInput;\n import io.airlift.slice.SliceOutput;\n \n import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n \n-import static com.facebook.presto.util.Reflection.methodHandle;\n+import static com.facebook.presto.spi.StandardErrorCode.GENERIC_INTERNAL_ERROR;\n \n public final class BlockSerdeUtil\n {\n-    public static final MethodHandle READ_BLOCK = methodHandle(BlockSerdeUtil.class, \"readBlock\", BlockEncodingSerde.class, Slice.class);\n+    public static final MethodHandle READ_BLOCK;\n+    static {\n+        try {\n+            READ_BLOCK = MethodHandles.lookup().unreflect(BlockSerdeUtil.class.getMethod(\"readBlock\", BlockEncodingSerde.class, Slice.class));\n+        }\n+        catch (IllegalAccessException | NoSuchMethodException e) {\n+            throw new PrestoException(GENERIC_INTERNAL_ERROR, e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAyMzQzOA=="}, "originalCommit": {"oid": "ab23f55f2ae49191100063dd98698b1260a8b54c"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIzMjExOQ==", "bodyText": "Curious: why need to use static code block here ( instead of keeping the previous static variable initialization ?)\n\nTo avoid dependency,  the previous static initialization uses a function from package com.facebook.presto.util.Reflection inpresto-main", "url": "https://github.com/prestodb/presto/pull/14292#discussion_r398232119", "createdAt": "2020-03-25T23:29:38Z", "author": {"login": "viczhang861"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/block/BlockSerdeUtil.java", "diffHunk": "@@ -11,21 +11,29 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package com.facebook.presto.block;\n+package com.facebook.presto.spi.block;\n \n-import com.facebook.presto.spi.block.Block;\n-import com.facebook.presto.spi.block.BlockEncodingSerde;\n+import com.facebook.presto.spi.PrestoException;\n import io.airlift.slice.Slice;\n import io.airlift.slice.SliceInput;\n import io.airlift.slice.SliceOutput;\n \n import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n \n-import static com.facebook.presto.util.Reflection.methodHandle;\n+import static com.facebook.presto.spi.StandardErrorCode.GENERIC_INTERNAL_ERROR;\n \n public final class BlockSerdeUtil\n {\n-    public static final MethodHandle READ_BLOCK = methodHandle(BlockSerdeUtil.class, \"readBlock\", BlockEncodingSerde.class, Slice.class);\n+    public static final MethodHandle READ_BLOCK;\n+    static {\n+        try {\n+            READ_BLOCK = MethodHandles.lookup().unreflect(BlockSerdeUtil.class.getMethod(\"readBlock\", BlockEncodingSerde.class, Slice.class));\n+        }\n+        catch (IllegalAccessException | NoSuchMethodException e) {\n+            throw new PrestoException(GENERIC_INTERNAL_ERROR, e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAyMzQzOA=="}, "originalCommit": {"oid": "ab23f55f2ae49191100063dd98698b1260a8b54c"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NzQzMTI0OnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/com/facebook/presto/spi/page/SerializedPage.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNzowOToxMFrOF7ldIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNzoxNjoxOFrOF7lypA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAyMzk3MA==", "bodyText": "Why to replace toString with the equals and hashCode pair?", "url": "https://github.com/prestodb/presto/pull/14292#discussion_r398023970", "createdAt": "2020-03-25T17:09:10Z", "author": {"login": "arhimondr"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/page/SerializedPage.java", "diffHunk": "@@ -84,13 +85,31 @@ public Slice getSlice()\n     }\n \n     @Override\n-    public String toString()\n+    public boolean equals(Object o)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab23f55f2ae49191100063dd98698b1260a8b54c"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAyOTQ3Ng==", "bodyText": "toString() is not used, removed to avoid using guava\nequals() and hashCode() is actually missing in test and should be added, for example,  BufferResult::equals() would be wrong without SerializedPage::equals()", "url": "https://github.com/prestodb/presto/pull/14292#discussion_r398029476", "createdAt": "2020-03-25T17:16:18Z", "author": {"login": "viczhang861"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/page/SerializedPage.java", "diffHunk": "@@ -84,13 +85,31 @@ public Slice getSlice()\n     }\n \n     @Override\n-    public String toString()\n+    public boolean equals(Object o)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAyMzk3MA=="}, "originalCommit": {"oid": "ab23f55f2ae49191100063dd98698b1260a8b54c"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2ODY1MTAwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/buffer/SerializedPage.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMjo1Mzo1NlrOF7xZJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMzozMDoyNVrOF7yLSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIxOTU1OA==", "bodyText": "equals and hashCode didn't exist in SerializedPage previously , right?", "url": "https://github.com/prestodb/presto/pull/14292#discussion_r398219558", "createdAt": "2020-03-25T22:53:56Z", "author": {"login": "wenleix"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/buffer/SerializedPage.java", "diffHunk": "@@ -85,13 +85,31 @@ public Slice getSlice()\n     }\n \n     @Override\n-    public String toString()\n+    public boolean equals(Object o)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1910b43d202f4ab9e6628450fa17f724c75657c"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIzMjM5Mw==", "bodyText": "equals and hashCode didn't exist in SerializedPage previously , right?\n\nRight", "url": "https://github.com/prestodb/presto/pull/14292#discussion_r398232393", "createdAt": "2020-03-25T23:30:25Z", "author": {"login": "viczhang861"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/buffer/SerializedPage.java", "diffHunk": "@@ -85,13 +85,31 @@ public Slice getSlice()\n     }\n \n     @Override\n-    public String toString()\n+    public boolean equals(Object o)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIxOTU1OA=="}, "originalCommit": {"oid": "c1910b43d202f4ab9e6628450fa17f724c75657c"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2943, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}