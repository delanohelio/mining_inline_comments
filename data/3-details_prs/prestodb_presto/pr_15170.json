{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2OTU2NDAy", "number": 15170, "title": "Supporting instance count in ARRAY_POSITION", "bodyText": "Test plan - Added new tests in TestArrayOperators . Also ran the existing test suites.\n== RELEASE NOTES ==\n\nGeneral Changes\n* Add support for ``ARRAY_POSITION(array, element, instance)``", "createdAt": "2020-09-15T00:16:58Z", "url": "https://github.com/prestodb/presto/pull/15170", "merged": true, "mergeCommit": {"oid": "837809473de077bc85203b93c371916b5155dbf9"}, "closed": true, "closedAt": "2021-06-22T17:22:17Z", "author": {"login": "ssaumitra"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdI8jJBgBqjM3NjU4NjI3NTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABejDwTogFqTY4ODk0NDc0NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c8d37afe9b3a50030cf3301d8f0bf08bf8ad965e", "author": {"user": {"login": "ssaumitra", "name": null}}, "url": "https://github.com/prestodb/presto/commit/c8d37afe9b3a50030cf3301d8f0bf08bf8ad965e", "committedDate": "2020-09-15T00:02:24Z", "message": "Supporting instance count in ARRAY_POSITION"}, "afterCommit": {"oid": "d479587c76950b1754d2e9a3a8cd68681fcfc53e", "author": {"user": {"login": "ssaumitra", "name": null}}, "url": "https://github.com/prestodb/presto/commit/d479587c76950b1754d2e9a3a8cd68681fcfc53e", "committedDate": "2020-09-15T00:20:55Z", "message": "Supporting instance count in ARRAY_POSITION"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4MjUwNjQ2", "url": "https://github.com/prestodb/presto/pull/15170#pullrequestreview-488250646", "createdAt": "2020-09-15T00:56:48Z", "commit": {"oid": "d479587c76950b1754d2e9a3a8cd68681fcfc53e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMDo1Njo0OFrOHRsnyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMDo1NzoyM1rOHRsoYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMxODkyMA==", "bodyText": "We had 5 separate implementations so we can avoid boxing primitive types and avoid invoke dynamic. So Let's keep the 5 separate implementations. Performance is more important in this case.", "url": "https://github.com/prestodb/presto/pull/15170#discussion_r488318920", "createdAt": "2020-09-15T00:56:48Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/ArrayPositionWithIndexFunction.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.operator.scalar;\n+\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.type.StandardTypes;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.function.Description;\n+import com.facebook.presto.spi.function.OperatorDependency;\n+import com.facebook.presto.spi.function.ScalarFunction;\n+import com.facebook.presto.spi.function.SqlType;\n+import com.facebook.presto.spi.function.TypeParameter;\n+import io.airlift.slice.Slice;\n+\n+import java.lang.invoke.MethodHandle;\n+\n+import static com.facebook.presto.common.function.OperatorType.EQUAL;\n+import static com.facebook.presto.spi.StandardErrorCode.INVALID_FUNCTION_ARGUMENT;\n+import static com.facebook.presto.spi.StandardErrorCode.NOT_SUPPORTED;\n+import static com.facebook.presto.util.Failures.internalError;\n+\n+@Description(\"Returns the position of the Nth occurrence of the given value in array (or 0 if not found)\")\n+@ScalarFunction(\"array_position\")\n+public class ArrayPositionWithIndexFunction\n+{\n+    protected ArrayPositionWithIndexFunction() {}\n+\n+    @TypeParameter(\"T\")\n+    @SqlType(StandardTypes.BIGINT)\n+    public static long arrayPositionWithIndex(\n+            @TypeParameter(\"T\") Type type,\n+            @OperatorDependency(operator = EQUAL, argumentTypes = {\"T\", \"T\"}) MethodHandle equalMethodHandle,\n+            @SqlType(\"array(T)\") Block array,\n+            @SqlType(\"T\") boolean element,\n+            @SqlType(StandardTypes.BIGINT) long instance)\n+    {\n+        return arrayPositionWithIndexInternal(type::getBoolean, equalMethodHandle, array, element, instance);\n+    }\n+\n+    @TypeParameter(\"T\")\n+    @SqlType(StandardTypes.BIGINT)\n+    public static long arrayPositionWithIndex(\n+            @TypeParameter(\"T\") Type type,\n+            @OperatorDependency(operator = EQUAL, argumentTypes = {\"T\", \"T\"}) MethodHandle equalMethodHandle,\n+            @SqlType(\"array(T)\") Block array,\n+            @SqlType(\"T\") long element,\n+            @SqlType(StandardTypes.BIGINT) long instance)\n+    {\n+        return arrayPositionWithIndexInternal(type::getLong, equalMethodHandle, array, element, instance);\n+    }\n+\n+    @TypeParameter(\"T\")\n+    @SqlType(StandardTypes.BIGINT)\n+    public static long arrayPositionWithIndex(\n+            @TypeParameter(\"T\") Type type,\n+            @OperatorDependency(operator = EQUAL, argumentTypes = {\"T\", \"T\"}) MethodHandle equalMethodHandle,\n+            @SqlType(\"array(T)\") Block array,\n+            @SqlType(\"T\") double element,\n+            @SqlType(StandardTypes.BIGINT) long instance)\n+    {\n+        return arrayPositionWithIndexInternal(type::getDouble, equalMethodHandle, array, element, instance);\n+    }\n+\n+    @TypeParameter(\"T\")\n+    @SqlType(StandardTypes.BIGINT)\n+    public static long arrayPositionWithIndex(\n+            @TypeParameter(\"T\") Type type,\n+            @OperatorDependency(operator = EQUAL, argumentTypes = {\"T\", \"T\"}) MethodHandle equalMethodHandle,\n+            @SqlType(\"array(T)\") Block array,\n+            @SqlType(\"T\") Slice element,\n+            @SqlType(StandardTypes.BIGINT) long instance)\n+    {\n+        return arrayPositionWithIndexInternal(type::getSlice, equalMethodHandle, array, element, instance);\n+    }\n+\n+    @TypeParameter(\"T\")\n+    @SqlType(StandardTypes.BIGINT)\n+    public static long arrayPositionWithIndex(\n+            @TypeParameter(\"T\") Type type,\n+            @OperatorDependency(operator = EQUAL, argumentTypes = {\"T\", \"T\"}) MethodHandle equalMethodHandle,\n+            @SqlType(\"array(T)\") Block array,\n+            @SqlType(\"T\") Block element,\n+            @SqlType(StandardTypes.BIGINT) long instance)\n+    {\n+        return arrayPositionWithIndexInternal(type::getObject, equalMethodHandle, array, element, instance);\n+    }\n+\n+    protected static long arrayPositionWithIndexInternal(TypeValueExtractor extractor, MethodHandle equalMethodHandle, Block array, Object element, long instance)\n+    {\n+        int size = array.getPositionCount();\n+        int instancesFound = 0;\n+\n+        if (instance == 0) {\n+            throw new PrestoException(INVALID_FUNCTION_ARGUMENT, \"array_position cannot take a 0-valued instance argument.\");\n+        }\n+\n+        int startIndex = instance > 0 ? 0 : size - 1;\n+        int stopIndex = instance > 0 ? size : -1;\n+        int stepSize = instance > 0 ? 1 : -1;\n+        instance = Math.abs(instance);\n+\n+        for (int i = startIndex; i != stopIndex; i += stepSize) {\n+            if (!array.isNull(i)) {\n+                try {\n+                    Object arrayValue = extractor.extract(array, i);\n+                    Boolean result = (Boolean) equalMethodHandle.invoke(arrayValue, element);\n+                    checkNotIndeterminate(result);\n+                    if (result) {\n+                        instancesFound++;\n+                        if (instancesFound == instance) {\n+                            return i + 1; // result is 1-based (instead of 0)\n+                        }\n+                    }\n+                }\n+                catch (Throwable t) {\n+                    throw internalError(t);\n+                }\n+            }\n+        }\n+        return 0;\n+    }\n+\n+    protected interface TypeValueExtractor\n+    {\n+        Object extract(Block array, int index);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d479587c76950b1754d2e9a3a8cd68681fcfc53e"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMxOTA3NA==", "bodyText": "Do we need to have 2 separate classes? Can we put all functions in one? Just curious.", "url": "https://github.com/prestodb/presto/pull/15170#discussion_r488319074", "createdAt": "2020-09-15T00:57:23Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/ArrayPositionWithIndexFunction.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.operator.scalar;\n+\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.type.StandardTypes;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.function.Description;\n+import com.facebook.presto.spi.function.OperatorDependency;\n+import com.facebook.presto.spi.function.ScalarFunction;\n+import com.facebook.presto.spi.function.SqlType;\n+import com.facebook.presto.spi.function.TypeParameter;\n+import io.airlift.slice.Slice;\n+\n+import java.lang.invoke.MethodHandle;\n+\n+import static com.facebook.presto.common.function.OperatorType.EQUAL;\n+import static com.facebook.presto.spi.StandardErrorCode.INVALID_FUNCTION_ARGUMENT;\n+import static com.facebook.presto.spi.StandardErrorCode.NOT_SUPPORTED;\n+import static com.facebook.presto.util.Failures.internalError;\n+\n+@Description(\"Returns the position of the Nth occurrence of the given value in array (or 0 if not found)\")\n+@ScalarFunction(\"array_position\")\n+public class ArrayPositionWithIndexFunction", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d479587c76950b1754d2e9a3a8cd68681fcfc53e"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5NzI4MzQx", "url": "https://github.com/prestodb/presto/pull/15170#pullrequestreview-489728341", "createdAt": "2020-09-16T15:10:17Z", "commit": {"oid": "d479587c76950b1754d2e9a3a8cd68681fcfc53e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNToxMDoxN1rOHS1mpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNToxMDoxN1rOHS1mpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUxNDY2MQ==", "bodyText": "Hmm - I think we can just return null. Consider this a short hand for an OR which will return null in that situation.", "url": "https://github.com/prestodb/presto/pull/15170#discussion_r489514661", "createdAt": "2020-09-16T15:10:17Z", "author": {"login": "kaikalur"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/ArrayPositionWithIndexFunction.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.operator.scalar;\n+\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.type.StandardTypes;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.function.Description;\n+import com.facebook.presto.spi.function.OperatorDependency;\n+import com.facebook.presto.spi.function.ScalarFunction;\n+import com.facebook.presto.spi.function.SqlType;\n+import com.facebook.presto.spi.function.TypeParameter;\n+import io.airlift.slice.Slice;\n+\n+import java.lang.invoke.MethodHandle;\n+\n+import static com.facebook.presto.common.function.OperatorType.EQUAL;\n+import static com.facebook.presto.spi.StandardErrorCode.INVALID_FUNCTION_ARGUMENT;\n+import static com.facebook.presto.spi.StandardErrorCode.NOT_SUPPORTED;\n+import static com.facebook.presto.util.Failures.internalError;\n+\n+@Description(\"Returns the position of the Nth occurrence of the given value in array (or 0 if not found)\")\n+@ScalarFunction(\"array_position\")\n+public class ArrayPositionWithIndexFunction\n+{\n+    protected ArrayPositionWithIndexFunction() {}\n+\n+    @TypeParameter(\"T\")\n+    @SqlType(StandardTypes.BIGINT)\n+    public static long arrayPositionWithIndex(\n+            @TypeParameter(\"T\") Type type,\n+            @OperatorDependency(operator = EQUAL, argumentTypes = {\"T\", \"T\"}) MethodHandle equalMethodHandle,\n+            @SqlType(\"array(T)\") Block array,\n+            @SqlType(\"T\") boolean element,\n+            @SqlType(StandardTypes.BIGINT) long instance)\n+    {\n+        return arrayPositionWithIndexInternal(type::getBoolean, equalMethodHandle, array, element, instance);\n+    }\n+\n+    @TypeParameter(\"T\")\n+    @SqlType(StandardTypes.BIGINT)\n+    public static long arrayPositionWithIndex(\n+            @TypeParameter(\"T\") Type type,\n+            @OperatorDependency(operator = EQUAL, argumentTypes = {\"T\", \"T\"}) MethodHandle equalMethodHandle,\n+            @SqlType(\"array(T)\") Block array,\n+            @SqlType(\"T\") long element,\n+            @SqlType(StandardTypes.BIGINT) long instance)\n+    {\n+        return arrayPositionWithIndexInternal(type::getLong, equalMethodHandle, array, element, instance);\n+    }\n+\n+    @TypeParameter(\"T\")\n+    @SqlType(StandardTypes.BIGINT)\n+    public static long arrayPositionWithIndex(\n+            @TypeParameter(\"T\") Type type,\n+            @OperatorDependency(operator = EQUAL, argumentTypes = {\"T\", \"T\"}) MethodHandle equalMethodHandle,\n+            @SqlType(\"array(T)\") Block array,\n+            @SqlType(\"T\") double element,\n+            @SqlType(StandardTypes.BIGINT) long instance)\n+    {\n+        return arrayPositionWithIndexInternal(type::getDouble, equalMethodHandle, array, element, instance);\n+    }\n+\n+    @TypeParameter(\"T\")\n+    @SqlType(StandardTypes.BIGINT)\n+    public static long arrayPositionWithIndex(\n+            @TypeParameter(\"T\") Type type,\n+            @OperatorDependency(operator = EQUAL, argumentTypes = {\"T\", \"T\"}) MethodHandle equalMethodHandle,\n+            @SqlType(\"array(T)\") Block array,\n+            @SqlType(\"T\") Slice element,\n+            @SqlType(StandardTypes.BIGINT) long instance)\n+    {\n+        return arrayPositionWithIndexInternal(type::getSlice, equalMethodHandle, array, element, instance);\n+    }\n+\n+    @TypeParameter(\"T\")\n+    @SqlType(StandardTypes.BIGINT)\n+    public static long arrayPositionWithIndex(\n+            @TypeParameter(\"T\") Type type,\n+            @OperatorDependency(operator = EQUAL, argumentTypes = {\"T\", \"T\"}) MethodHandle equalMethodHandle,\n+            @SqlType(\"array(T)\") Block array,\n+            @SqlType(\"T\") Block element,\n+            @SqlType(StandardTypes.BIGINT) long instance)\n+    {\n+        return arrayPositionWithIndexInternal(type::getObject, equalMethodHandle, array, element, instance);\n+    }\n+\n+    protected static long arrayPositionWithIndexInternal(TypeValueExtractor extractor, MethodHandle equalMethodHandle, Block array, Object element, long instance)\n+    {\n+        int size = array.getPositionCount();\n+        int instancesFound = 0;\n+\n+        if (instance == 0) {\n+            throw new PrestoException(INVALID_FUNCTION_ARGUMENT, \"array_position cannot take a 0-valued instance argument.\");\n+        }\n+\n+        int startIndex = instance > 0 ? 0 : size - 1;\n+        int stopIndex = instance > 0 ? size : -1;\n+        int stepSize = instance > 0 ? 1 : -1;\n+        instance = Math.abs(instance);\n+\n+        for (int i = startIndex; i != stopIndex; i += stepSize) {\n+            if (!array.isNull(i)) {\n+                try {\n+                    Object arrayValue = extractor.extract(array, i);\n+                    Boolean result = (Boolean) equalMethodHandle.invoke(arrayValue, element);\n+                    checkNotIndeterminate(result);\n+                    if (result) {\n+                        instancesFound++;\n+                        if (instancesFound == instance) {\n+                            return i + 1; // result is 1-based (instead of 0)\n+                        }\n+                    }\n+                }\n+                catch (Throwable t) {\n+                    throw internalError(t);\n+                }\n+            }\n+        }\n+        return 0;\n+    }\n+\n+    protected interface TypeValueExtractor\n+    {\n+        Object extract(Block array, int index);\n+    }\n+\n+    private static void checkNotIndeterminate(Boolean equalsResult)\n+    {\n+        if (equalsResult == null) {\n+            throw new PrestoException(NOT_SUPPORTED, \"array_position does not support arrays with elements that are null or contain null\");\n+        }\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d479587c76950b1754d2e9a3a8cd68681fcfc53e"}, "originalPosition": 146}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5NzMwODQx", "url": "https://github.com/prestodb/presto/pull/15170#pullrequestreview-489730841", "createdAt": "2020-09-16T15:12:55Z", "commit": {"oid": "d479587c76950b1754d2e9a3a8cd68681fcfc53e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d479587c76950b1754d2e9a3a8cd68681fcfc53e", "author": {"user": {"login": "ssaumitra", "name": null}}, "url": "https://github.com/prestodb/presto/commit/d479587c76950b1754d2e9a3a8cd68681fcfc53e", "committedDate": "2020-09-15T00:20:55Z", "message": "Supporting instance count in ARRAY_POSITION"}, "afterCommit": {"oid": "a8e9c4c03d66b85281a944c7bb7354d5127d9380", "author": {"user": {"login": "ssaumitra", "name": null}}, "url": "https://github.com/prestodb/presto/commit/a8e9c4c03d66b85281a944c7bb7354d5127d9380", "committedDate": "2020-09-18T01:00:30Z", "message": "Supporting instance count in ARRAY_POSITION"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a8e9c4c03d66b85281a944c7bb7354d5127d9380", "author": {"user": {"login": "ssaumitra", "name": null}}, "url": "https://github.com/prestodb/presto/commit/a8e9c4c03d66b85281a944c7bb7354d5127d9380", "committedDate": "2020-09-18T01:00:30Z", "message": "Supporting instance count in ARRAY_POSITION"}, "afterCommit": {"oid": "9418ab2dbf4358451d9362d8a49238abc24fa8b5", "author": {"user": {"login": "ssaumitra", "name": null}}, "url": "https://github.com/prestodb/presto/commit/9418ab2dbf4358451d9362d8a49238abc24fa8b5", "committedDate": "2021-06-13T10:18:06Z", "message": "Supporting instance count in ARRAY_POSITION"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9418ab2dbf4358451d9362d8a49238abc24fa8b5", "author": {"user": {"login": "ssaumitra", "name": null}}, "url": "https://github.com/prestodb/presto/commit/9418ab2dbf4358451d9362d8a49238abc24fa8b5", "committedDate": "2021-06-13T10:18:06Z", "message": "Supporting instance count in ARRAY_POSITION"}, "afterCommit": {"oid": "e6b6fa06abf228567a1d591ee92515d804c04344", "author": {"user": {"login": "ssaumitra", "name": null}}, "url": "https://github.com/prestodb/presto/commit/e6b6fa06abf228567a1d591ee92515d804c04344", "committedDate": "2021-06-13T21:39:21Z", "message": "Supporting instance count in ARRAY_POSITION"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e6b6fa06abf228567a1d591ee92515d804c04344", "author": {"user": {"login": "ssaumitra", "name": null}}, "url": "https://github.com/prestodb/presto/commit/e6b6fa06abf228567a1d591ee92515d804c04344", "committedDate": "2021-06-13T21:39:21Z", "message": "Supporting instance count in ARRAY_POSITION"}, "afterCommit": {"oid": "4ab7a46513c95bd5b4b71040e48f938e96f73cb8", "author": {"user": {"login": "ssaumitra", "name": null}}, "url": "https://github.com/prestodb/presto/commit/4ab7a46513c95bd5b4b71040e48f938e96f73cb8", "committedDate": "2021-06-15T22:49:39Z", "message": "Supporting instance count in ARRAY_POSITION"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njg4OTI2OTg5", "url": "https://github.com/prestodb/presto/pull/15170#pullrequestreview-688926989", "createdAt": "2021-06-21T23:05:47Z", "commit": {"oid": "4ab7a46513c95bd5b4b71040e48f938e96f73cb8"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0yMVQyMzowNTo0N1rOJxYXaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0yMVQyMzowNTo0N1rOJxYXaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NTc1OTIwOQ==", "bodyText": "Maybe just change the error message to something like 0 is an invalid instance number for array_position or something more obviously stating that 0 is invalid. \"cannot take\" sounds like \"not supported\", but I think here we actually mean it's not valid.", "url": "https://github.com/prestodb/presto/pull/15170#discussion_r655759209", "createdAt": "2021-06-21T23:05:47Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/ArrayPositionWithIndexFunction.java", "diffHunk": "@@ -0,0 +1,256 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.operator.scalar;\n+\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.type.StandardTypes;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.function.Description;\n+import com.facebook.presto.spi.function.OperatorDependency;\n+import com.facebook.presto.spi.function.ScalarFunction;\n+import com.facebook.presto.spi.function.SqlType;\n+import com.facebook.presto.spi.function.TypeParameter;\n+import io.airlift.slice.Slice;\n+\n+import java.lang.invoke.MethodHandle;\n+\n+import static com.facebook.presto.common.function.OperatorType.EQUAL;\n+import static com.facebook.presto.spi.StandardErrorCode.INVALID_FUNCTION_ARGUMENT;\n+import static com.facebook.presto.spi.StandardErrorCode.NOT_SUPPORTED;\n+import static com.facebook.presto.util.Failures.internalError;\n+\n+@Description(\"Returns the position of the first occurrence of the given value in array (or 0 if not found)\")\n+@ScalarFunction(\"array_position\")\n+public class ArrayPositionWithIndexFunction\n+{\n+    protected ArrayPositionWithIndexFunction() {}\n+\n+    @TypeParameter(\"T\")\n+    @SqlType(StandardTypes.BIGINT)\n+    public static long arrayPositionWithIndex(\n+            @TypeParameter(\"T\") Type type,\n+            @OperatorDependency(operator = EQUAL, argumentTypes = {\"T\", \"T\"}) MethodHandle equalMethodHandle,\n+            @SqlType(\"array(T)\") Block array,\n+            @SqlType(\"T\") boolean element,\n+            @SqlType(StandardTypes.BIGINT) long instance)\n+    {\n+        int size = array.getPositionCount();\n+        int instancesFound = 0;\n+\n+        if (instance == 0) {\n+            throw new PrestoException(INVALID_FUNCTION_ARGUMENT, \"array_position cannot take a 0-valued instance argument.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ab7a46513c95bd5b4b71040e48f938e96f73cb8"}, "originalPosition": 53}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f83d2f4ea4ba2cca079be222a670129e9d64e779", "author": {"user": {"login": "ssaumitra", "name": null}}, "url": "https://github.com/prestodb/presto/commit/f83d2f4ea4ba2cca079be222a670129e9d64e779", "committedDate": "2021-06-21T23:36:15Z", "message": "Supporting instance count in ARRAY_POSITION"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4ab7a46513c95bd5b4b71040e48f938e96f73cb8", "author": {"user": {"login": "ssaumitra", "name": null}}, "url": "https://github.com/prestodb/presto/commit/4ab7a46513c95bd5b4b71040e48f938e96f73cb8", "committedDate": "2021-06-15T22:49:39Z", "message": "Supporting instance count in ARRAY_POSITION"}, "afterCommit": {"oid": "f83d2f4ea4ba2cca079be222a670129e9d64e779", "author": {"user": {"login": "ssaumitra", "name": null}}, "url": "https://github.com/prestodb/presto/commit/f83d2f4ea4ba2cca079be222a670129e9d64e779", "committedDate": "2021-06-21T23:36:15Z", "message": "Supporting instance count in ARRAY_POSITION"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njg4OTQ0NzQ0", "url": "https://github.com/prestodb/presto/pull/15170#pullrequestreview-688944744", "createdAt": "2021-06-21T23:38:13Z", "commit": {"oid": "f83d2f4ea4ba2cca079be222a670129e9d64e779"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 131, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}