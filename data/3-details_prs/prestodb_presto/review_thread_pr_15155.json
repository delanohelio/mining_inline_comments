{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgzMjQ4MzQ5", "number": 15155, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNjo0NzoyNlrOEindvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwNTozNDo1NVrOE1833A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NzMzNjI4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/Driver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNjo0NzoyN1rOHQmQ9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxODozNzoxMVrOHQppkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE2NjE5Nw==", "bodyText": "put FragmentResultCacheManager & fragmentResultCachingEnabled in dirverContext?", "url": "https://github.com/prestodb/presto/pull/15155#discussion_r487166197", "createdAt": "2020-09-11T16:47:27Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/Driver.java", "diffHunk": "@@ -90,22 +95,27 @@\n \n     private final AtomicReference<SettableFuture<?>> driverBlockedFuture = new AtomicReference<>();\n \n+    private final AtomicReference<Optional<Iterator<Page>>> cachedResult = new AtomicReference<>(Optional.empty());\n+    private final AtomicReference<Split> split = new AtomicReference<>();\n+    private final List<Page> outputPages = new ArrayList<>();\n+\n     private enum State\n     {\n         ALIVE, NEED_DESTRUCTION, DESTROYED\n     }\n \n-    public static Driver createDriver(DriverContext driverContext, List<Operator> operators)\n+    public static Driver createDriver(DriverContext driverContext, FragmentResultCacheManager fragmentResultCacheManager, boolean fragmentResultCachingEnabled, List<Operator> operators)\n     {\n         requireNonNull(driverContext, \"driverContext is null\");\n+        requireNonNull(fragmentResultCacheManager, \"fragmentResultCacheManager is null\");\n         requireNonNull(operators, \"operators is null\");\n-        Driver driver = new Driver(driverContext, operators);\n+        Driver driver = new Driver(driverContext, fragmentResultCacheManager, fragmentResultCachingEnabled, operators);\n         driver.initialize();\n         return driver;\n     }\n \n     @VisibleForTesting\n-    public static Driver createDriver(DriverContext driverContext, Operator firstOperator, Operator... otherOperators)\n+    public static Driver createDriver(DriverContext driverContext, FragmentResultCacheManager fragmentResultCacheManager, boolean fragmentResultCachingEnabled, Operator firstOperator, Operator... otherOperators)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6fd95be91c302c93139d028ce5e29cb8ecafa82"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIyMTY0OA==", "bodyText": "I thought about it and then felt this would impact how the Driver works so it is more than a context. But since we already have plan in the context, maybe it does not hurt to put these into context as well. I'll take a look.", "url": "https://github.com/prestodb/presto/pull/15155#discussion_r487221648", "createdAt": "2020-09-11T18:37:11Z", "author": {"login": "shixuan-fan"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/Driver.java", "diffHunk": "@@ -90,22 +95,27 @@\n \n     private final AtomicReference<SettableFuture<?>> driverBlockedFuture = new AtomicReference<>();\n \n+    private final AtomicReference<Optional<Iterator<Page>>> cachedResult = new AtomicReference<>(Optional.empty());\n+    private final AtomicReference<Split> split = new AtomicReference<>();\n+    private final List<Page> outputPages = new ArrayList<>();\n+\n     private enum State\n     {\n         ALIVE, NEED_DESTRUCTION, DESTROYED\n     }\n \n-    public static Driver createDriver(DriverContext driverContext, List<Operator> operators)\n+    public static Driver createDriver(DriverContext driverContext, FragmentResultCacheManager fragmentResultCacheManager, boolean fragmentResultCachingEnabled, List<Operator> operators)\n     {\n         requireNonNull(driverContext, \"driverContext is null\");\n+        requireNonNull(fragmentResultCacheManager, \"fragmentResultCacheManager is null\");\n         requireNonNull(operators, \"operators is null\");\n-        Driver driver = new Driver(driverContext, operators);\n+        Driver driver = new Driver(driverContext, fragmentResultCacheManager, fragmentResultCachingEnabled, operators);\n         driver.initialize();\n         return driver;\n     }\n \n     @VisibleForTesting\n-    public static Driver createDriver(DriverContext driverContext, Operator firstOperator, Operator... otherOperators)\n+    public static Driver createDriver(DriverContext driverContext, FragmentResultCacheManager fragmentResultCacheManager, boolean fragmentResultCachingEnabled, Operator firstOperator, Operator... otherOperators)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE2NjE5Nw=="}, "originalCommit": {"oid": "e6fd95be91c302c93139d028ce5e29cb8ecafa82"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MTA3MjM2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/Driver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwNTo1OToyMFrOHRE42Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODowNzowN1rOHRgzDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY2NzkyOQ==", "bodyText": "Since this cache is on the driver's side, is there any sanity check in protection from oom? just curious if this cache size can be stored for monitoring so caching on the driver is in a controlled manner.", "url": "https://github.com/prestodb/presto/pull/15155#discussion_r487667929", "createdAt": "2020-09-14T05:59:20Z", "author": {"login": "fgwang7w"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/Driver.java", "diffHunk": "@@ -412,6 +449,12 @@ private OperationTimer createTimer()\n                         throwIfUnchecked(throwable);\n                         throw new RuntimeException(throwable);\n                     }\n+\n+                    if (fragmentResultCachingEnabled) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85bb0de782aea7272b46d2248e4b825e0f165885"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEyNTE5OA==", "bodyText": "Good point. FragmentResultCacheManager would be a singleton on each Presto worker, and cache instrumentation would be  part of the FragmentResultCacheManager implementation (which is still work-in-progress).\nCurrently the plan is to store the map keys (plan-split pair) in memory and actual result pages in local disk. We should be able to set configuration to limit the cache entries so that we could keep memory usage in check.", "url": "https://github.com/prestodb/presto/pull/15155#discussion_r488125198", "createdAt": "2020-09-14T18:07:07Z", "author": {"login": "shixuan-fan"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/Driver.java", "diffHunk": "@@ -412,6 +449,12 @@ private OperationTimer createTimer()\n                         throwIfUnchecked(throwable);\n                         throw new RuntimeException(throwable);\n                     }\n+\n+                    if (fragmentResultCachingEnabled) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY2NzkyOQ=="}, "originalCommit": {"oid": "85bb0de782aea7272b46d2248e4b825e0f165885"}, "originalPosition": 176}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMTY3ODgyOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveTableLayoutHandle.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QwMzo0MzozNFrOHYkW8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QwMzo0MzozNFrOHYkW8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUyMzU2OQ==", "bodyText": "Maybe add a comment to explain we don't we need the whole stack of variables", "url": "https://github.com/prestodb/presto/pull/15155#discussion_r495523569", "createdAt": "2020-09-27T03:43:34Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveTableLayoutHandle.java", "diffHunk": "@@ -226,4 +226,15 @@ public boolean isPartialAggregationsPushedDown()\n     {\n         return partialAggregationsPushedDown;\n     }\n+\n+    @Override\n+    public Object getIdentifier()\n+    {\n+        return ImmutableMap.builder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a85ad67e9ea3c025e9110bf266263110c199d3e5"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMTcyMjIxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/CanonicalPartitioningScheme.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QwNDo1MDo1OFrOHYkqIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMzoxNTowMVrOHaGSYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUyODQ4Mg==", "bodyText": "We have a lot of CanonicalXXX counter part in this commit. Shall we add some tests to make sure the canonical part is in sync with the original class? Meaning that if the original class changes, we should fail some tests or automatically fix the CanonicalXXX", "url": "https://github.com/prestodb/presto/pull/15155#discussion_r495528482", "createdAt": "2020-09-27T04:50:58Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/CanonicalPartitioningScheme.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.planner;\n+\n+import com.facebook.presto.spi.ConnectorId;\n+import com.facebook.presto.spi.connector.ConnectorPartitioningHandle;\n+import com.facebook.presto.spi.relation.RowExpression;\n+import com.facebook.presto.spi.relation.VariableReferenceExpression;\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.sql.planner.RowExpressionVariableInliner.inlineVariables;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.util.Objects.requireNonNull;\n+\n+public class CanonicalPartitioningScheme", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a85ad67e9ea3c025e9110bf266263110c199d3e5"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5MzQ0NQ==", "bodyText": "Great idea. Let me try to add some tests for this.", "url": "https://github.com/prestodb/presto/pull/15155#discussion_r496293445", "createdAt": "2020-09-28T23:38:57Z", "author": {"login": "shixuan-fan"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/CanonicalPartitioningScheme.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.planner;\n+\n+import com.facebook.presto.spi.ConnectorId;\n+import com.facebook.presto.spi.connector.ConnectorPartitioningHandle;\n+import com.facebook.presto.spi.relation.RowExpression;\n+import com.facebook.presto.spi.relation.VariableReferenceExpression;\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.sql.planner.RowExpressionVariableInliner.inlineVariables;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.util.Objects.requireNonNull;\n+\n+public class CanonicalPartitioningScheme", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUyODQ4Mg=="}, "originalCommit": {"oid": "a85ad67e9ea3c025e9110bf266263110c199d3e5"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzEyODAzMg==", "bodyText": "Added some field assertion tests in TestCanonicalPlanGenerator", "url": "https://github.com/prestodb/presto/pull/15155#discussion_r497128032", "createdAt": "2020-09-29T23:15:01Z", "author": {"login": "shixuan-fan"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/CanonicalPartitioningScheme.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.planner;\n+\n+import com.facebook.presto.spi.ConnectorId;\n+import com.facebook.presto.spi.connector.ConnectorPartitioningHandle;\n+import com.facebook.presto.spi.relation.RowExpression;\n+import com.facebook.presto.spi.relation.VariableReferenceExpression;\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.sql.planner.RowExpressionVariableInliner.inlineVariables;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.util.Objects.requireNonNull;\n+\n+public class CanonicalPartitioningScheme", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUyODQ4Mg=="}, "originalCommit": {"oid": "a85ad67e9ea3c025e9110bf266263110c199d3e5"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMTcyMzI4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/CacheStats.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QwNDo1MzowMVrOHYkqlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDoyMzo1MFrOHZUHWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUyODU5OA==", "bodyText": "This collides with the one in presto-cache. Maybe call it FragmentCacheStats or just merge with existing class", "url": "https://github.com/prestodb/presto/pull/15155#discussion_r495528598", "createdAt": "2020-09-27T04:53:01Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/CacheStats.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.operator;\n+\n+import org.weakref.jmx.Managed;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+public class CacheStats", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71e2e413bd9ad233e842f20d5a6d39680cf1954c"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwNjAxMQ==", "bodyText": "I'll rename it to FragmentCacheStats. There are two reasons:\n\nThe fields actually are different, and quotaExceed might not make sense for FragmentCacheStats.\npresto-common and presto-main are independent and I don't want to introduce this dependency, unless we want to move this to spi.", "url": "https://github.com/prestodb/presto/pull/15155#discussion_r496306011", "createdAt": "2020-09-29T00:23:50Z", "author": {"login": "shixuan-fan"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/CacheStats.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.operator;\n+\n+import org.weakref.jmx.Managed;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+public class CacheStats", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUyODU5OA=="}, "originalCommit": {"oid": "71e2e413bd9ad233e842f20d5a6d39680cf1954c"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMTcyNzM1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/FileFragmentResultCacheManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QwNTowMDoxN1rOHYksZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QwNTowMDoxN1rOHYksZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUyOTA2MA==", "bodyText": "put it into finally incase tryDeleteFile directly throws", "url": "https://github.com/prestodb/presto/pull/15155#discussion_r495529060", "createdAt": "2020-09-27T05:00:17Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/FileFragmentResultCacheManager.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.operator;\n+\n+import com.facebook.airlift.log.Logger;\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.common.block.BlockEncodingSerde;\n+import com.facebook.presto.execution.buffer.PagesSerdeFactory;\n+import com.facebook.presto.metadata.Split;\n+import com.facebook.presto.metadata.Split.SplitIdentifier;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.page.PagesSerde;\n+import com.facebook.presto.sql.planner.CanonicalPlanFragment;\n+import com.google.common.cache.Cache;\n+import com.google.common.cache.CacheBuilder;\n+import com.google.common.cache.RemovalListener;\n+import com.google.common.cache.RemovalNotification;\n+import io.airlift.slice.InputStreamSliceInput;\n+import io.airlift.slice.OutputStreamSliceOutput;\n+import io.airlift.slice.SliceOutput;\n+\n+import javax.inject.Inject;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+\n+import static com.facebook.presto.spi.StandardErrorCode.GENERIC_INTERNAL_ERROR;\n+import static com.facebook.presto.spi.page.PagesSerdeUtil.readPages;\n+import static com.facebook.presto.spi.page.PagesSerdeUtil.writePages;\n+import static com.google.common.util.concurrent.Futures.immediateFuture;\n+import static java.nio.file.Files.newInputStream;\n+import static java.nio.file.Files.newOutputStream;\n+import static java.nio.file.StandardOpenOption.APPEND;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.UUID.randomUUID;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+public class FileFragmentResultCacheManager\n+        implements FragmentResultCacheManager\n+{\n+    private static final Logger log = Logger.get(FileFragmentResultCacheManager.class);\n+\n+    private final Path baseDirectory;\n+    private final long maxInFlightBytes;\n+    private final PagesSerde pagesSerde;\n+    private final CacheStats cacheStats;\n+    private final ExecutorService flushExecutor;\n+    private final ExecutorService removalExecutor;\n+\n+    private final Cache<CacheKey, Path> cache;\n+\n+    // TODO: Decouple CacheKey by encoding PlanNode and SplitIdentifier separately so we don't have to keep too many objects in memory\n+    @Inject\n+    public FileFragmentResultCacheManager(\n+            FileFragmentResultCacheConfig cacheConfig,\n+            BlockEncodingSerde blockEncodingSerde,\n+            CacheStats cacheStats,\n+            ExecutorService flushExecutor,\n+            ExecutorService removalExecutor)\n+    {\n+        requireNonNull(cacheConfig, \"cacheConfig is null\");\n+        requireNonNull(blockEncodingSerde, \"blockEncodingSerde is null\");\n+\n+        this.baseDirectory = Paths.get(cacheConfig.getBaseDirectory());\n+        this.maxInFlightBytes = cacheConfig.getMaxInFlightSize().toBytes();\n+        this.pagesSerde = new PagesSerdeFactory(blockEncodingSerde, cacheConfig.isBlockEncodingCompressionEnabled()).createPagesSerde();\n+        this.cacheStats = requireNonNull(cacheStats, \"cacheStats is null\");\n+        this.flushExecutor = requireNonNull(flushExecutor, \"flushExecutor is null\");\n+        this.removalExecutor = requireNonNull(removalExecutor, \"removalExecutor is null\");\n+        this.cache = CacheBuilder.newBuilder()\n+                .maximumSize(cacheConfig.getMaxCachedEntries())\n+                .expireAfterAccess(cacheConfig.getCacheTtl().toMillis(), MILLISECONDS)\n+                .removalListener(new CacheRemovalListener())\n+                .recordStats()\n+                .build();\n+\n+        File target = new File(baseDirectory.toUri());\n+        if (!target.exists()) {\n+            try {\n+                Files.createDirectories(target.toPath());\n+            }\n+            catch (IOException e) {\n+                throw new PrestoException(GENERIC_INTERNAL_ERROR, \"cannot create cache directory \" + target, e);\n+            }\n+        }\n+        else {\n+            File[] files = target.listFiles();\n+            if (files == null) {\n+                return;\n+            }\n+\n+            this.removalExecutor.submit(() -> Arrays.stream(files).forEach(file -> {\n+                try {\n+                    Files.delete(file.toPath());\n+                }\n+                catch (IOException e) {\n+                    // ignore\n+                }\n+            }));\n+        }\n+    }\n+\n+    @Override\n+    public Future<?> put(CanonicalPlanFragment plan, Split split, List<Page> result)\n+    {\n+        CacheKey key = new CacheKey(plan, split.getSplitIdentifier());\n+        long resultSize = getPagesSize(result);\n+        if (cacheStats.getInFlightBytes() + resultSize > maxInFlightBytes || cache.getIfPresent(key) != null) {\n+            return immediateFuture(null);\n+        }\n+\n+        cacheStats.addInFlightBytes(resultSize);\n+        Path path = baseDirectory.resolve(randomUUID().toString().replaceAll(\"-\", \"_\"));\n+        return flushExecutor.submit(() -> cachePages(key, path, result));\n+    }\n+\n+    private static long getPagesSize(List<Page> pages)\n+    {\n+        return pages.stream()\n+                .mapToLong(Page::getSizeInBytes)\n+                .sum();\n+    }\n+\n+    private void cachePages(CacheKey key, Path path, List<Page> pages)\n+    {\n+        // TODO: To support both memory and disk limit, we should check cache size before putting to cache and use written bytes as weight for cache\n+        try {\n+            Files.createFile(path);\n+            try (SliceOutput output = new OutputStreamSliceOutput(newOutputStream(path, APPEND))) {\n+                writePages(pagesSerde, output, pages.iterator());\n+                cache.put(key, path);\n+            }\n+            catch (UncheckedIOException | IOException e) {\n+                log.warn(e, \"%s encountered an error while writing to path %s\", Thread.currentThread().getName(), path);\n+                tryDeleteFile(path);\n+            }\n+        }\n+        catch (UncheckedIOException | IOException e) {\n+            log.warn(e, \"%s encountered an error while writing to path %s\", Thread.currentThread().getName(), path);\n+            tryDeleteFile(path);\n+        }\n+        cacheStats.addInFlightBytes(-getPagesSize(pages));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71e2e413bd9ad233e842f20d5a6d39680cf1954c"}, "originalPosition": 165}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMTcyODkzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/FragmentResultCacheContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QwNTowMjo0OFrOHYktIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDozOToyOFrOHZUXIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUyOTI0OA==", "bodyText": "No AggregationNode?\nSet<Class<? extends PlanNode>>", "url": "https://github.com/prestodb/presto/pull/15155#discussion_r495529248", "createdAt": "2020-09-27T05:02:48Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/FragmentResultCacheContext.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.execution;\n+\n+import com.facebook.presto.Session;\n+import com.facebook.presto.SystemSessionProperties;\n+import com.facebook.presto.operator.FragmentResultCacheManager;\n+import com.facebook.presto.spi.plan.AggregationNode;\n+import com.facebook.presto.spi.plan.FilterNode;\n+import com.facebook.presto.spi.plan.PlanNode;\n+import com.facebook.presto.spi.plan.ProjectNode;\n+import com.facebook.presto.spi.plan.TableScanNode;\n+import com.facebook.presto.sql.planner.CanonicalPlanFragment;\n+import com.facebook.presto.sql.planner.PartitioningScheme;\n+import com.facebook.presto.sql.planner.plan.GroupIdNode;\n+import com.google.common.collect.ImmutableSet;\n+\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import static com.facebook.presto.spi.plan.AggregationNode.Step.PARTIAL;\n+import static com.facebook.presto.sql.planner.CanonicalPlanGenerator.generateCanonicalPlan;\n+import static java.util.Objects.requireNonNull;\n+\n+public class FragmentResultCacheContext\n+{\n+    private static final Set<Class> ALLOWED_NODES = ImmutableSet.of(TableScanNode.class, FilterNode.class, ProjectNode.class, GroupIdNode.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a421eb99586f6d7d0296de4129786436659ed344"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxMDA0OA==", "bodyText": "No AggregationNode?\n\nAggregationNode is a bit different and right now we require it to be the root in isEligibleForFragmentResultCaching. ALLOWED_NODES here is for the children of AggregationNode. I'll rename this constant to ALLOWED_CHILDREN_NODES\n\nSet<Class<? extends PlanNode>>\n\nGood point :)", "url": "https://github.com/prestodb/presto/pull/15155#discussion_r496310048", "createdAt": "2020-09-29T00:39:28Z", "author": {"login": "shixuan-fan"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/FragmentResultCacheContext.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.execution;\n+\n+import com.facebook.presto.Session;\n+import com.facebook.presto.SystemSessionProperties;\n+import com.facebook.presto.operator.FragmentResultCacheManager;\n+import com.facebook.presto.spi.plan.AggregationNode;\n+import com.facebook.presto.spi.plan.FilterNode;\n+import com.facebook.presto.spi.plan.PlanNode;\n+import com.facebook.presto.spi.plan.ProjectNode;\n+import com.facebook.presto.spi.plan.TableScanNode;\n+import com.facebook.presto.sql.planner.CanonicalPlanFragment;\n+import com.facebook.presto.sql.planner.PartitioningScheme;\n+import com.facebook.presto.sql.planner.plan.GroupIdNode;\n+import com.google.common.collect.ImmutableSet;\n+\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import static com.facebook.presto.spi.plan.AggregationNode.Step.PARTIAL;\n+import static com.facebook.presto.sql.planner.CanonicalPlanGenerator.generateCanonicalPlan;\n+import static java.util.Objects.requireNonNull;\n+\n+public class FragmentResultCacheContext\n+{\n+    private static final Set<Class> ALLOWED_NODES = ImmutableSet.of(TableScanNode.class, FilterNode.class, ProjectNode.class, GroupIdNode.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUyOTI0OA=="}, "originalCommit": {"oid": "a421eb99586f6d7d0296de4129786436659ed344"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MDA3MzI0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/FileFragmentResultCacheManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwNTozNDo1NVrOHuguZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwNTozNDo1NVrOHuguZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUzMjcxMA==", "bodyText": "this part of code looks so similar to FileSingleStreamSpiller lol.", "url": "https://github.com/prestodb/presto/pull/15155#discussion_r518532710", "createdAt": "2020-11-06T05:34:55Z", "author": {"login": "wenleix"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/FileFragmentResultCacheManager.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.operator;\n+\n+import com.facebook.airlift.log.Logger;\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.common.block.BlockEncodingSerde;\n+import com.facebook.presto.execution.buffer.PagesSerdeFactory;\n+import com.facebook.presto.metadata.Split;\n+import com.facebook.presto.metadata.Split.SplitIdentifier;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.page.PagesSerde;\n+import com.facebook.presto.sql.planner.CanonicalPlanFragment;\n+import com.google.common.cache.Cache;\n+import com.google.common.cache.CacheBuilder;\n+import com.google.common.cache.RemovalListener;\n+import com.google.common.cache.RemovalNotification;\n+import com.google.common.collect.AbstractIterator;\n+import io.airlift.slice.InputStreamSliceInput;\n+import io.airlift.slice.OutputStreamSliceOutput;\n+import io.airlift.slice.SliceOutput;\n+\n+import javax.inject.Inject;\n+\n+import java.io.Closeable;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+\n+import static com.facebook.presto.spi.StandardErrorCode.GENERIC_INTERNAL_ERROR;\n+import static com.facebook.presto.spi.page.PagesSerdeUtil.readPages;\n+import static com.facebook.presto.spi.page.PagesSerdeUtil.writePages;\n+import static com.google.common.util.concurrent.Futures.immediateFuture;\n+import static java.nio.file.Files.newInputStream;\n+import static java.nio.file.Files.newOutputStream;\n+import static java.nio.file.StandardOpenOption.APPEND;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.UUID.randomUUID;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+public class FileFragmentResultCacheManager\n+        implements FragmentResultCacheManager\n+{\n+    private static final Logger log = Logger.get(FileFragmentResultCacheManager.class);\n+\n+    private final Path baseDirectory;\n+    private final long maxInFlightBytes;\n+    private final PagesSerde pagesSerde;\n+    private final FragmentCacheStats fragmentCacheStats;\n+    private final ExecutorService flushExecutor;\n+    private final ExecutorService removalExecutor;\n+\n+    private final Cache<CacheKey, Path> cache;\n+\n+    // TODO: Decouple CacheKey by encoding PlanNode and SplitIdentifier separately so we don't have to keep too many objects in memory\n+    @Inject\n+    public FileFragmentResultCacheManager(\n+            FileFragmentResultCacheConfig cacheConfig,\n+            BlockEncodingSerde blockEncodingSerde,\n+            FragmentCacheStats fragmentCacheStats,\n+            ExecutorService flushExecutor,\n+            ExecutorService removalExecutor)\n+    {\n+        requireNonNull(cacheConfig, \"cacheConfig is null\");\n+        requireNonNull(blockEncodingSerde, \"blockEncodingSerde is null\");\n+\n+        this.baseDirectory = Paths.get(cacheConfig.getBaseDirectory());\n+        this.maxInFlightBytes = cacheConfig.getMaxInFlightSize().toBytes();\n+        this.pagesSerde = new PagesSerdeFactory(blockEncodingSerde, cacheConfig.isBlockEncodingCompressionEnabled()).createPagesSerde();\n+        this.fragmentCacheStats = requireNonNull(fragmentCacheStats, \"fragmentCacheStats is null\");\n+        this.flushExecutor = requireNonNull(flushExecutor, \"flushExecutor is null\");\n+        this.removalExecutor = requireNonNull(removalExecutor, \"removalExecutor is null\");\n+        this.cache = CacheBuilder.newBuilder()\n+                .maximumSize(cacheConfig.getMaxCachedEntries())\n+                .expireAfterAccess(cacheConfig.getCacheTtl().toMillis(), MILLISECONDS)\n+                .removalListener(new CacheRemovalListener())\n+                .recordStats()\n+                .build();\n+\n+        File target = new File(baseDirectory.toUri());\n+        if (!target.exists()) {\n+            try {\n+                Files.createDirectories(target.toPath());\n+            }\n+            catch (IOException e) {\n+                throw new PrestoException(GENERIC_INTERNAL_ERROR, \"cannot create cache directory \" + target, e);\n+            }\n+        }\n+        else {\n+            File[] files = target.listFiles();\n+            if (files == null) {\n+                return;\n+            }\n+\n+            this.removalExecutor.submit(() -> Arrays.stream(files).forEach(file -> {\n+                try {\n+                    Files.delete(file.toPath());\n+                }\n+                catch (IOException e) {\n+                    // ignore\n+                }\n+            }));\n+        }\n+    }\n+\n+    @Override\n+    public Future<?> put(CanonicalPlanFragment plan, Split split, List<Page> result)\n+    {\n+        CacheKey key = new CacheKey(plan, split.getSplitIdentifier());\n+        long resultSize = getPagesSize(result);\n+        if (fragmentCacheStats.getInFlightBytes() + resultSize > maxInFlightBytes || cache.getIfPresent(key) != null) {\n+            return immediateFuture(null);\n+        }\n+\n+        fragmentCacheStats.addInFlightBytes(resultSize);\n+        Path path = baseDirectory.resolve(randomUUID().toString().replaceAll(\"-\", \"_\"));\n+        return flushExecutor.submit(() -> cachePages(key, path, result));\n+    }\n+\n+    private static long getPagesSize(List<Page> pages)\n+    {\n+        return pages.stream()\n+                .mapToLong(Page::getSizeInBytes)\n+                .sum();\n+    }\n+\n+    private void cachePages(CacheKey key, Path path, List<Page> pages)\n+    {\n+        // TODO: To support both memory and disk limit, we should check cache size before putting to cache and use written bytes as weight for cache\n+        try {\n+            Files.createFile(path);\n+            try (SliceOutput output = new OutputStreamSliceOutput(newOutputStream(path, APPEND))) {\n+                writePages(pagesSerde, output, pages.iterator());\n+                cache.put(key, path);\n+            }\n+            catch (UncheckedIOException | IOException e) {\n+                log.warn(e, \"%s encountered an error while writing to path %s\", Thread.currentThread().getName(), path);\n+                tryDeleteFile(path);\n+            }\n+        }\n+        catch (UncheckedIOException | IOException e) {\n+            log.warn(e, \"%s encountered an error while writing to path %s\", Thread.currentThread().getName(), path);\n+            tryDeleteFile(path);\n+        }\n+        finally {\n+            fragmentCacheStats.addInFlightBytes(-getPagesSize(pages));\n+        }\n+    }\n+\n+    private static void tryDeleteFile(Path path)\n+    {\n+        try {\n+            File file = new File(path.toUri());\n+            if (file.exists()) {\n+                Files.delete(file.toPath());\n+            }\n+        }\n+        catch (IOException e) {\n+            // ignore\n+        }\n+    }\n+\n+    @Override\n+    public Optional<Iterator<Page>> get(CanonicalPlanFragment plan, Split split)\n+    {\n+        CacheKey key = new CacheKey(plan, split.getSplitIdentifier());\n+        Path path = cache.getIfPresent(key);\n+        if (path == null) {\n+            fragmentCacheStats.incrementCacheMiss();\n+            return Optional.empty();\n+        }\n+\n+        try {\n+            InputStream inputStream = newInputStream(path);\n+            Iterator<Page> result = readPages(pagesSerde, new InputStreamSliceInput(inputStream));\n+            fragmentCacheStats.incrementCacheHit();\n+            return Optional.of(closeWhenExhausted(result, inputStream));\n+        }\n+        catch (UncheckedIOException | IOException e) {\n+            // there might be a chance the file has been deleted. We would return cache miss in this case.\n+            fragmentCacheStats.incrementCacheMiss();\n+            return Optional.empty();\n+        }\n+    }\n+\n+    private static <T> Iterator<T> closeWhenExhausted(Iterator<T> iterator, Closeable resource)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f1ef09c90ee10f6ae23cb1f0a238d887fa8e328"}, "originalPosition": 208}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3648, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}