{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4NzY0MDY5", "number": 15421, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxODoyMzo1OVrOE4SoIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxODoyNzoyNFrOE4Sthg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NDYwODk3OnYy", "diffSide": "RIGHT", "path": "presto-parquet/src/main/java/com/facebook/presto/parquet/cache/MetadataReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxODoyMzo1OVrOHyH9mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxODoyMzo1OVrOHyH9mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMyMTMwNg==", "bodyText": "static import wrappedBuffer?", "url": "https://github.com/prestodb/presto/pull/15421#discussion_r522321306", "createdAt": "2020-11-12T18:23:59Z", "author": {"login": "zhenxiao"}, "path": "presto-parquet/src/main/java/com/facebook/presto/parquet/cache/MetadataReader.java", "diffHunk": "@@ -56,15 +55,17 @@\n import java.util.Set;\n \n import static com.facebook.presto.parquet.ParquetValidationUtils.validateParquet;\n+import static java.lang.Math.min;\n import static java.lang.Math.toIntExact;\n import static java.nio.charset.StandardCharsets.US_ASCII;\n import static org.apache.parquet.format.Util.readFileMetaData;\n \n public final class MetadataReader\n         implements ParquetMetadataSource\n {\n-    private static final int PARQUET_METADATA_LENGTH = 4;\n-    private static final byte[] MAGIC = \"PAR1\".getBytes(US_ASCII);\n+    private static final Slice MAGIC = Slices.wrappedBuffer(\"PAR1\".getBytes(US_ASCII));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4aca1e11c46219fc92a9ec75fdb266eb91706309"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NDYxODY5OnYy", "diffSide": "RIGHT", "path": "presto-parquet/src/main/java/com/facebook/presto/parquet/cache/MetadataReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxODoyNjozMVrOHyIDrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxODozMjozOFrOHyISZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMyMjg2MA==", "bodyText": "either validateParquet(), or\nthrow ParquetCorruptionException after the if condition", "url": "https://github.com/prestodb/presto/pull/15421#discussion_r522322860", "createdAt": "2020-11-12T18:26:31Z", "author": {"login": "zhenxiao"}, "path": "presto-parquet/src/main/java/com/facebook/presto/parquet/cache/MetadataReader.java", "diffHunk": "@@ -87,24 +88,34 @@ public static ParquetFileMetadata readFooter(FSDataInputStream inputStream, Path\n         // 4 bytes: MetadataLength\n         // MAGIC\n \n-        validateParquet(fileSize >= MAGIC.length + PARQUET_METADATA_LENGTH + MAGIC.length, \"%s is not a valid Parquet File\", file);\n-        long metadataLengthIndex = fileSize - PARQUET_METADATA_LENGTH - MAGIC.length;\n+        validateParquet(fileSize >= MAGIC.length() + POST_SCRIPT_SIZE, \"%s is not a valid Parquet File\", file);\n \n-        InputStream footerStream = readFully(inputStream, metadataLengthIndex, PARQUET_METADATA_LENGTH + MAGIC.length);\n-        int metadataLength = readIntLittleEndian(footerStream);\n+        //  EXPECTED_FOOTER_SIZE is an int, so this will never fail\n+        byte[] buffer = new byte[toIntExact(min(fileSize, EXPECTED_FOOTER_SIZE))];\n+        inputStream.readFully(fileSize - buffer.length, buffer);\n+        Slice tailSlice = Slices.wrappedBuffer(buffer);\n \n-        byte[] magic = new byte[MAGIC.length];\n-        footerStream.read(magic);\n-        validateParquet(Arrays.equals(MAGIC, magic), \"Not valid Parquet file: %s expected magic number: %s got: %s\", file, Arrays.toString(MAGIC), Arrays.toString(magic));\n+        Slice magic = tailSlice.slice(tailSlice.length() - MAGIC.length(), MAGIC.length());\n+        if (!MAGIC.equals(magic)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4aca1e11c46219fc92a9ec75fdb266eb91706309"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMyNjYyOA==", "bodyText": "I wanted to avoid generating string representations per invocation when the magic values match. Will make it an explicit throw ParquetCorruptionException call instead.", "url": "https://github.com/prestodb/presto/pull/15421#discussion_r522326628", "createdAt": "2020-11-12T18:32:38Z", "author": {"login": "pettyjamesm"}, "path": "presto-parquet/src/main/java/com/facebook/presto/parquet/cache/MetadataReader.java", "diffHunk": "@@ -87,24 +88,34 @@ public static ParquetFileMetadata readFooter(FSDataInputStream inputStream, Path\n         // 4 bytes: MetadataLength\n         // MAGIC\n \n-        validateParquet(fileSize >= MAGIC.length + PARQUET_METADATA_LENGTH + MAGIC.length, \"%s is not a valid Parquet File\", file);\n-        long metadataLengthIndex = fileSize - PARQUET_METADATA_LENGTH - MAGIC.length;\n+        validateParquet(fileSize >= MAGIC.length() + POST_SCRIPT_SIZE, \"%s is not a valid Parquet File\", file);\n \n-        InputStream footerStream = readFully(inputStream, metadataLengthIndex, PARQUET_METADATA_LENGTH + MAGIC.length);\n-        int metadataLength = readIntLittleEndian(footerStream);\n+        //  EXPECTED_FOOTER_SIZE is an int, so this will never fail\n+        byte[] buffer = new byte[toIntExact(min(fileSize, EXPECTED_FOOTER_SIZE))];\n+        inputStream.readFully(fileSize - buffer.length, buffer);\n+        Slice tailSlice = Slices.wrappedBuffer(buffer);\n \n-        byte[] magic = new byte[MAGIC.length];\n-        footerStream.read(magic);\n-        validateParquet(Arrays.equals(MAGIC, magic), \"Not valid Parquet file: %s expected magic number: %s got: %s\", file, Arrays.toString(MAGIC), Arrays.toString(magic));\n+        Slice magic = tailSlice.slice(tailSlice.length() - MAGIC.length(), MAGIC.length());\n+        if (!MAGIC.equals(magic)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMyMjg2MA=="}, "originalCommit": {"oid": "4aca1e11c46219fc92a9ec75fdb266eb91706309"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NDYyMTMyOnYy", "diffSide": "RIGHT", "path": "presto-parquet/src/main/java/com/facebook/presto/parquet/cache/MetadataReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxODoyNzowMlrOHyIFFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxODoyNzowMlrOHyIFFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMyMzIyMw==", "bodyText": "one line for validateParquet?", "url": "https://github.com/prestodb/presto/pull/15421#discussion_r522323223", "createdAt": "2020-11-12T18:27:02Z", "author": {"login": "zhenxiao"}, "path": "presto-parquet/src/main/java/com/facebook/presto/parquet/cache/MetadataReader.java", "diffHunk": "@@ -87,24 +88,34 @@ public static ParquetFileMetadata readFooter(FSDataInputStream inputStream, Path\n         // 4 bytes: MetadataLength\n         // MAGIC\n \n-        validateParquet(fileSize >= MAGIC.length + PARQUET_METADATA_LENGTH + MAGIC.length, \"%s is not a valid Parquet File\", file);\n-        long metadataLengthIndex = fileSize - PARQUET_METADATA_LENGTH - MAGIC.length;\n+        validateParquet(fileSize >= MAGIC.length() + POST_SCRIPT_SIZE, \"%s is not a valid Parquet File\", file);\n \n-        InputStream footerStream = readFully(inputStream, metadataLengthIndex, PARQUET_METADATA_LENGTH + MAGIC.length);\n-        int metadataLength = readIntLittleEndian(footerStream);\n+        //  EXPECTED_FOOTER_SIZE is an int, so this will never fail\n+        byte[] buffer = new byte[toIntExact(min(fileSize, EXPECTED_FOOTER_SIZE))];\n+        inputStream.readFully(fileSize - buffer.length, buffer);\n+        Slice tailSlice = Slices.wrappedBuffer(buffer);\n \n-        byte[] magic = new byte[MAGIC.length];\n-        footerStream.read(magic);\n-        validateParquet(Arrays.equals(MAGIC, magic), \"Not valid Parquet file: %s expected magic number: %s got: %s\", file, Arrays.toString(MAGIC), Arrays.toString(magic));\n+        Slice magic = tailSlice.slice(tailSlice.length() - MAGIC.length(), MAGIC.length());\n+        if (!MAGIC.equals(magic)) {\n+            validateParquet(MAGIC.equals(magic), \"Not valid Parquet file: %s expected magic number: %s got: %s\", file, Arrays.toString(MAGIC.getBytes()), Arrays.toString(magic.getBytes()));\n+        }\n+\n+        int metadataLength = tailSlice.getInt(tailSlice.length() - POST_SCRIPT_SIZE);\n+        int completeFooterSize = metadataLength + POST_SCRIPT_SIZE;\n+\n+        long metadataFileOffset = fileSize - completeFooterSize;\n+        validateParquet(metadataFileOffset >= MAGIC.length() && metadataFileOffset + POST_SCRIPT_SIZE < fileSize,\n+                \"Corrupted Parquet file: %s metadata index: %s out of range\", file, metadataFileOffset);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4aca1e11c46219fc92a9ec75fdb266eb91706309"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NDYyMjc4OnYy", "diffSide": "RIGHT", "path": "presto-parquet/src/main/java/com/facebook/presto/parquet/cache/MetadataReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxODoyNzoyNFrOHyIF_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxODoyNzoyNFrOHyIF_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMyMzQ1Mw==", "bodyText": "s/newBuffer/footerBuffer/g", "url": "https://github.com/prestodb/presto/pull/15421#discussion_r522323453", "createdAt": "2020-11-12T18:27:24Z", "author": {"login": "zhenxiao"}, "path": "presto-parquet/src/main/java/com/facebook/presto/parquet/cache/MetadataReader.java", "diffHunk": "@@ -87,24 +88,34 @@ public static ParquetFileMetadata readFooter(FSDataInputStream inputStream, Path\n         // 4 bytes: MetadataLength\n         // MAGIC\n \n-        validateParquet(fileSize >= MAGIC.length + PARQUET_METADATA_LENGTH + MAGIC.length, \"%s is not a valid Parquet File\", file);\n-        long metadataLengthIndex = fileSize - PARQUET_METADATA_LENGTH - MAGIC.length;\n+        validateParquet(fileSize >= MAGIC.length() + POST_SCRIPT_SIZE, \"%s is not a valid Parquet File\", file);\n \n-        InputStream footerStream = readFully(inputStream, metadataLengthIndex, PARQUET_METADATA_LENGTH + MAGIC.length);\n-        int metadataLength = readIntLittleEndian(footerStream);\n+        //  EXPECTED_FOOTER_SIZE is an int, so this will never fail\n+        byte[] buffer = new byte[toIntExact(min(fileSize, EXPECTED_FOOTER_SIZE))];\n+        inputStream.readFully(fileSize - buffer.length, buffer);\n+        Slice tailSlice = Slices.wrappedBuffer(buffer);\n \n-        byte[] magic = new byte[MAGIC.length];\n-        footerStream.read(magic);\n-        validateParquet(Arrays.equals(MAGIC, magic), \"Not valid Parquet file: %s expected magic number: %s got: %s\", file, Arrays.toString(MAGIC), Arrays.toString(magic));\n+        Slice magic = tailSlice.slice(tailSlice.length() - MAGIC.length(), MAGIC.length());\n+        if (!MAGIC.equals(magic)) {\n+            validateParquet(MAGIC.equals(magic), \"Not valid Parquet file: %s expected magic number: %s got: %s\", file, Arrays.toString(MAGIC.getBytes()), Arrays.toString(magic.getBytes()));\n+        }\n+\n+        int metadataLength = tailSlice.getInt(tailSlice.length() - POST_SCRIPT_SIZE);\n+        int completeFooterSize = metadataLength + POST_SCRIPT_SIZE;\n+\n+        long metadataFileOffset = fileSize - completeFooterSize;\n+        validateParquet(metadataFileOffset >= MAGIC.length() && metadataFileOffset + POST_SCRIPT_SIZE < fileSize,\n+                \"Corrupted Parquet file: %s metadata index: %s out of range\", file, metadataFileOffset);\n+        //  Ensure the slice covers the entire metadata range\n+        if (tailSlice.length() < completeFooterSize) {\n+            byte[] newBuffer = new byte[completeFooterSize];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4aca1e11c46219fc92a9ec75fdb266eb91706309"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3374, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}