{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3NTUyODM4", "number": 14825, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMDo0MDo1MVrOENaLuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMjoyMTozMFrOEOEwtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDk1OTMxOnYy", "diffSide": "RIGHT", "path": "presto-spark-base/src/main/java/com/facebook/presto/spark/PrestoSparkModule.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMDo0MDo1MVrOGwFByw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNjo1NTo1NFrOGwxS9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA2NzIxMQ==", "bodyText": "I think it's right to use TaskInfo instead of TaskStats. Just curious why previous TaskStats is chosen?", "url": "https://github.com/prestodb/presto/pull/14825#discussion_r453067211", "createdAt": "2020-07-10T20:40:51Z", "author": {"login": "wenleix"}, "path": "presto-spark-base/src/main/java/com/facebook/presto/spark/PrestoSparkModule.java", "diffHunk": "@@ -206,7 +206,7 @@ protected void setup(Binder binder)\n \n         // json codecs\n         jsonCodecBinder(binder).bindJsonCodec(ViewDefinition.class);\n-        jsonCodecBinder(binder).bindJsonCodec(TaskStats.class);\n+        jsonCodecBinder(binder).bindJsonCodec(TaskInfo.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "239e5b3f42fbbab413c86809826e44fe3ebde84e"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc5MjUwMA==", "bodyText": "Just curious why previous TaskStats is chosen?\n\nJust some premature coding. I was trying to prototype something, and hadn't finish =)", "url": "https://github.com/prestodb/presto/pull/14825#discussion_r453792500", "createdAt": "2020-07-13T16:55:54Z", "author": {"login": "arhimondr"}, "path": "presto-spark-base/src/main/java/com/facebook/presto/spark/PrestoSparkModule.java", "diffHunk": "@@ -206,7 +206,7 @@ protected void setup(Binder binder)\n \n         // json codecs\n         jsonCodecBinder(binder).bindJsonCodec(ViewDefinition.class);\n-        jsonCodecBinder(binder).bindJsonCodec(TaskStats.class);\n+        jsonCodecBinder(binder).bindJsonCodec(TaskInfo.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA2NzIxMQ=="}, "originalCommit": {"oid": "239e5b3f42fbbab413c86809826e44fe3ebde84e"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDczMjA4OnYy", "diffSide": "RIGHT", "path": "presto-spark-base/src/main/java/com/facebook/presto/spark/execution/PrestoSparkOutputBuffer.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxOTozMDoxNFrOGw2wyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDozOTozNlrOGxWy9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg4MjA1Ng==", "bodyText": "nit: looks like only \"ROW\" and \"PAGE\" can be valid input to this String, what about make it to be an enum?\nI am asking this because I originally thought it's a Presto type (e..g  BIGINT, ARRAY(VARCHAR) )", "url": "https://github.com/prestodb/presto/pull/14825#discussion_r453882056", "createdAt": "2020-07-13T19:30:14Z", "author": {"login": "wenleix"}, "path": "presto-spark-base/src/main/java/com/facebook/presto/spark/execution/PrestoSparkOutputBuffer.java", "diffHunk": "@@ -33,8 +35,12 @@\n     @GuardedBy(\"monitor\")\n     private boolean finished;\n \n-    public PrestoSparkOutputBuffer(OutputBufferMemoryManager memoryManager)\n+    private final AtomicLong totalRowsProcessed = new AtomicLong();\n+    private final AtomicLong totalPagesProcessed = new AtomicLong();\n+\n+    public PrestoSparkOutputBuffer(String type, OutputBufferMemoryManager memoryManager)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5542710ee5adc1fe0eefc4b1f435b669914e433c"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAyMTE2Nw==", "bodyText": "Technically it can accept anything that implements PrestoSparkBufferedResult. What do you think about renaming type to something like description?", "url": "https://github.com/prestodb/presto/pull/14825#discussion_r454021167", "createdAt": "2020-07-14T00:15:09Z", "author": {"login": "arhimondr"}, "path": "presto-spark-base/src/main/java/com/facebook/presto/spark/execution/PrestoSparkOutputBuffer.java", "diffHunk": "@@ -33,8 +35,12 @@\n     @GuardedBy(\"monitor\")\n     private boolean finished;\n \n-    public PrestoSparkOutputBuffer(OutputBufferMemoryManager memoryManager)\n+    private final AtomicLong totalRowsProcessed = new AtomicLong();\n+    private final AtomicLong totalPagesProcessed = new AtomicLong();\n+\n+    public PrestoSparkOutputBuffer(String type, OutputBufferMemoryManager memoryManager)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg4MjA1Ng=="}, "originalCommit": {"oid": "5542710ee5adc1fe0eefc4b1f435b669914e433c"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQwNjkwMw==", "bodyText": "Actually I removed this fields from the PrestoSparkOutputBuffer class and added private enum OutputBufferType in the PrestoSparkTaskExecutorFactory", "url": "https://github.com/prestodb/presto/pull/14825#discussion_r454406903", "createdAt": "2020-07-14T14:39:36Z", "author": {"login": "arhimondr"}, "path": "presto-spark-base/src/main/java/com/facebook/presto/spark/execution/PrestoSparkOutputBuffer.java", "diffHunk": "@@ -33,8 +35,12 @@\n     @GuardedBy(\"monitor\")\n     private boolean finished;\n \n-    public PrestoSparkOutputBuffer(OutputBufferMemoryManager memoryManager)\n+    private final AtomicLong totalRowsProcessed = new AtomicLong();\n+    private final AtomicLong totalPagesProcessed = new AtomicLong();\n+\n+    public PrestoSparkOutputBuffer(String type, OutputBufferMemoryManager memoryManager)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg4MjA1Ng=="}, "originalCommit": {"oid": "5542710ee5adc1fe0eefc4b1f435b669914e433c"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDgxOTc5OnYy", "diffSide": "RIGHT", "path": "presto-spark-classloader-interface/src/main/java/com/facebook/presto/spark/classloader_interface/SerializedTaskInfo.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxOTo1NjoxOFrOGw3l0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMDoxMTo1M1rOGw_MYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg5NTYzNA==", "bodyText": "is this for debug?", "url": "https://github.com/prestodb/presto/pull/14825#discussion_r453895634", "createdAt": "2020-07-13T19:56:18Z", "author": {"login": "wenleix"}, "path": "presto-spark-classloader-interface/src/main/java/com/facebook/presto/spark/classloader_interface/SerializedTaskInfo.java", "diffHunk": "@@ -20,15 +20,25 @@\n public class SerializedTaskInfo\n         implements Serializable\n {\n+    private final int fragmentId;\n+    private final int taskId;\n     private final byte[] bytes;\n \n-    public SerializedTaskInfo(byte[] bytes)\n+    public SerializedTaskInfo(int fragmentId, int taskId, byte[] bytes)\n     {\n+        this.fragmentId = fragmentId;\n+        this.taskId = taskId;\n         this.bytes = requireNonNull(bytes, \"bytes is null\");\n     }\n \n     public byte[] getBytes()\n     {\n         return bytes;\n     }\n+\n+    @Override\n+    public String toString()\n+    {\n+        return fragmentId + \".\" + taskId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5542710ee5adc1fe0eefc4b1f435b669914e433c"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAyMDE5NA==", "bodyText": "This is to avoid byte[] being displayed on the Spark UI", "url": "https://github.com/prestodb/presto/pull/14825#discussion_r454020194", "createdAt": "2020-07-14T00:11:53Z", "author": {"login": "arhimondr"}, "path": "presto-spark-classloader-interface/src/main/java/com/facebook/presto/spark/classloader_interface/SerializedTaskInfo.java", "diffHunk": "@@ -20,15 +20,25 @@\n public class SerializedTaskInfo\n         implements Serializable\n {\n+    private final int fragmentId;\n+    private final int taskId;\n     private final byte[] bytes;\n \n-    public SerializedTaskInfo(byte[] bytes)\n+    public SerializedTaskInfo(int fragmentId, int taskId, byte[] bytes)\n     {\n+        this.fragmentId = fragmentId;\n+        this.taskId = taskId;\n         this.bytes = requireNonNull(bytes, \"bytes is null\");\n     }\n \n     public byte[] getBytes()\n     {\n         return bytes;\n     }\n+\n+    @Override\n+    public String toString()\n+    {\n+        return fragmentId + \".\" + taskId;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg5NTYzNA=="}, "originalCommit": {"oid": "5542710ee5adc1fe0eefc4b1f435b669914e433c"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMTI3NTIxOnYy", "diffSide": "RIGHT", "path": "presto-spark-base/src/main/java/com/facebook/presto/spark/execution/PrestoSparkTaskExecutorFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMjowMzoyNVrOGw7xcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMDoxMjowMVrOGw_MkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk2NDE0Nw==", "bodyText": "curious: how do we avoid byte[] being displayed on Spark UI?", "url": "https://github.com/prestodb/presto/pull/14825#discussion_r453964147", "createdAt": "2020-07-13T22:03:25Z", "author": {"login": "wenleix"}, "path": "presto-spark-base/src/main/java/com/facebook/presto/spark/execution/PrestoSparkTaskExecutorFactory.java", "diffHunk": "@@ -478,14 +496,17 @@ public boolean hasNext()\n                 return output;\n             }\n \n-            //  TODO: Implement task stats collection\n-            //  TaskStats taskStats = taskContext.getTaskStats();\n-            //  byte[] taskStatsSerialized = taskInfoJsonCodec.toJsonBytes(taskStats);\n-            //  taskStatsCollector.add(new SerializedTaskStats(taskStatsSerialized));\n-\n             // task finished\n             TaskState taskState = taskStateMachine.getState();\n             checkState(taskState.isDone(), \"task is expected to be done\");\n+\n+            TaskInfo taskInfo = createTaskInfo(taskContext, taskStateMachine, taskInstanceId, outputBuffer);\n+            SerializedTaskInfo serializedTaskInfo = new SerializedTaskInfo(\n+                    taskInfo.getTaskId().getStageExecutionId().getStageId().getId(),\n+                    taskInfo.getTaskId().getId(),\n+                    compress(taskInfoJsonCodec.toJsonBytes(taskInfo)));\n+            taskInfoCollector.add(serializedTaskInfo);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5542710ee5adc1fe0eefc4b1f435b669914e433c"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAyMDI0MA==", "bodyText": "Answered in the previous comment", "url": "https://github.com/prestodb/presto/pull/14825#discussion_r454020240", "createdAt": "2020-07-14T00:12:01Z", "author": {"login": "arhimondr"}, "path": "presto-spark-base/src/main/java/com/facebook/presto/spark/execution/PrestoSparkTaskExecutorFactory.java", "diffHunk": "@@ -478,14 +496,17 @@ public boolean hasNext()\n                 return output;\n             }\n \n-            //  TODO: Implement task stats collection\n-            //  TaskStats taskStats = taskContext.getTaskStats();\n-            //  byte[] taskStatsSerialized = taskInfoJsonCodec.toJsonBytes(taskStats);\n-            //  taskStatsCollector.add(new SerializedTaskStats(taskStatsSerialized));\n-\n             // task finished\n             TaskState taskState = taskStateMachine.getState();\n             checkState(taskState.isDone(), \"task is expected to be done\");\n+\n+            TaskInfo taskInfo = createTaskInfo(taskContext, taskStateMachine, taskInstanceId, outputBuffer);\n+            SerializedTaskInfo serializedTaskInfo = new SerializedTaskInfo(\n+                    taskInfo.getTaskId().getStageExecutionId().getStageId().getId(),\n+                    taskInfo.getTaskId().getId(),\n+                    compress(taskInfoJsonCodec.toJsonBytes(taskInfo)));\n+            taskInfoCollector.add(serializedTaskInfo);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk2NDE0Nw=="}, "originalCommit": {"oid": "5542710ee5adc1fe0eefc4b1f435b669914e433c"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMTI5MjAxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryStats.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMjowNjozN1rOGw76DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMjowNjozN1rOGw76DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk2NjM0OQ==", "bodyText": "Assume it's copied from QueryStateMachine#getQueryStats.", "url": "https://github.com/prestodb/presto/pull/14825#discussion_r453966349", "createdAt": "2020-07-13T22:06:37Z", "author": {"login": "wenleix"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryStats.java", "diffHunk": "@@ -240,6 +246,207 @@ public QueryStats(\n         this.operatorSummaries = ImmutableList.copyOf(requireNonNull(operatorSummaries, \"operatorSummaries is null\"));\n     }\n \n+    public static QueryStats create(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27d88f04c6454b8aa63b36d0eec9e86049d6e86f"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMTM3Mjk3OnYy", "diffSide": "RIGHT", "path": "presto-spark-base/src/main/java/com/facebook/presto/spark/PrestoSparkInjectorFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMjoyMjoyOVrOGw8jjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMDoxNjo0NVrOGw_R8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk3Njk3Mg==", "bodyText": "I personally don't prefer to have Optional<Collection<>> as configuration, as the semantic difference between \"not present\" and \"presented but empty\" can be very tricky. Can we enforce eventListenerProperties always have to present? (EVENT_LISTENER_PROPERTY_NAME can be set to a special value such as \"NO_EVENT_LISTENER\")  ?", "url": "https://github.com/prestodb/presto/pull/14825#discussion_r453976972", "createdAt": "2020-07-13T22:22:29Z", "author": {"login": "wenleix"}, "path": "presto-spark-base/src/main/java/com/facebook/presto/spark/PrestoSparkInjectorFactory.java", "diffHunk": "@@ -46,29 +46,33 @@\n     private final SparkProcessType sparkProcessType;\n     private final Map<String, String> configProperties;\n     private final Map<String, Map<String, String>> catalogProperties;\n+    private final Optional<Map<String, String>> eventListenerProperties;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cd44517170115bd7d9deb0a0cebfcc87d3d4694"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAyMTYxNg==", "bodyText": "I would rather prefer it to be explicitly. One can read it as event listener is not configured - eventListenerProperties = Optional.empty(). Or event listener is configured - the the Optional contains configuration properties for event listener.", "url": "https://github.com/prestodb/presto/pull/14825#discussion_r454021616", "createdAt": "2020-07-14T00:16:45Z", "author": {"login": "arhimondr"}, "path": "presto-spark-base/src/main/java/com/facebook/presto/spark/PrestoSparkInjectorFactory.java", "diffHunk": "@@ -46,29 +46,33 @@\n     private final SparkProcessType sparkProcessType;\n     private final Map<String, String> configProperties;\n     private final Map<String, Map<String, String>> catalogProperties;\n+    private final Optional<Map<String, String>> eventListenerProperties;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk3Njk3Mg=="}, "originalCommit": {"oid": "2cd44517170115bd7d9deb0a0cebfcc87d3d4694"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMTQwODg4OnYy", "diffSide": "RIGHT", "path": "presto-spark-base/src/main/java/com/facebook/presto/spark/execution/PrestoSparkOutputBuffer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMjozMDoxMVrOGw82Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMDoxNzozNVrOGw_S1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk4MTc5OQ==", "bodyText": "Is it possible for rowBatch to be Type PrestoSparkBufferedSerializedPage,  then we can just call it batch.", "url": "https://github.com/prestodb/presto/pull/14825#discussion_r453981799", "createdAt": "2020-07-13T22:30:11Z", "author": {"login": "viczhang861"}, "path": "presto-spark-base/src/main/java/com/facebook/presto/spark/execution/PrestoSparkOutputBuffer.java", "diffHunk": "@@ -79,6 +85,25 @@ public T get()\n                 memoryManager.updateMemoryUsage(-rowBatch.getRetainedSizeInBytes());\n             }\n         }\n+        if (rowBatch != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5542710ee5adc1fe0eefc4b1f435b669914e433c"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAyMTg0NA==", "bodyText": "PrestoSparkBufferedSerializedPage is technically still a batch of rows, just encoded in a columnar fashion", "url": "https://github.com/prestodb/presto/pull/14825#discussion_r454021844", "createdAt": "2020-07-14T00:17:35Z", "author": {"login": "arhimondr"}, "path": "presto-spark-base/src/main/java/com/facebook/presto/spark/execution/PrestoSparkOutputBuffer.java", "diffHunk": "@@ -79,6 +85,25 @@ public T get()\n                 memoryManager.updateMemoryUsage(-rowBatch.getRetainedSizeInBytes());\n             }\n         }\n+        if (rowBatch != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk4MTc5OQ=="}, "originalCommit": {"oid": "5542710ee5adc1fe0eefc4b1f435b669914e433c"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMTQxNTc0OnYy", "diffSide": "RIGHT", "path": "presto-spark-launcher/src/main/java/com/facebook/presto/spark/launcher/PrestoSparkLauncherCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMjozMToxOFrOGw85uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMjozMToxOFrOGw85uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk4MjY1MQ==", "bodyText": "nit: one line per parameter.", "url": "https://github.com/prestodb/presto/pull/14825#discussion_r453982651", "createdAt": "2020-07-13T22:31:18Z", "author": {"login": "wenleix"}, "path": "presto-spark-launcher/src/main/java/com/facebook/presto/spark/launcher/PrestoSparkLauncherCommand.java", "diffHunk": "@@ -62,7 +62,7 @@ public void run()\n         String query = readFileUtf8(checkFile(new File(clientOptions.file)));\n \n         try (PrestoSparkRunner runner = new PrestoSparkRunner(distribution)) {\n-            runner.run(clientOptions.catalog, clientOptions.schema, query, ImmutableMap.of(), ImmutableMap.of());\n+            runner.run(clientOptions.catalog, clientOptions.schema, query, ImmutableMap.of(), ImmutableMap.of(), Optional.empty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "572b05208f9c684b6ce5a0ac15b9ca491b41c09d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMTQ3ODI3OnYy", "diffSide": "RIGHT", "path": "presto-spark-base/src/main/java/com/facebook/presto/spark/execution/PrestoSparkTaskExecutorFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMjo1MDo1OFrOGw9cgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMjo1MDo1OFrOGw9cgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk5MTU1NA==", "bodyText": "There is a constant in TaskStatus to use STARTING_VERSION", "url": "https://github.com/prestodb/presto/pull/14825#discussion_r453991554", "createdAt": "2020-07-13T22:50:58Z", "author": {"login": "viczhang861"}, "path": "presto-spark-base/src/main/java/com/facebook/presto/spark/execution/PrestoSparkTaskExecutorFactory.java", "diffHunk": "@@ -497,6 +518,60 @@ public boolean hasNext()\n             propagateIfPossible(failure, InterruptedException.class);\n             throw new RuntimeException(failure);\n         }\n+\n+        private static TaskInfo createTaskInfo(\n+                TaskContext taskContext,\n+                TaskStateMachine taskStateMachine,\n+                UUID taskInstanceId,\n+                PrestoSparkOutputBuffer<?> outputBuffer)\n+        {\n+            TaskId taskId = taskContext.getTaskId();\n+            TaskState taskState = taskContext.getState();\n+            TaskStats taskStats = taskContext.getTaskStats();\n+\n+            List<ExecutionFailureInfo> failures = ImmutableList.of();\n+            if (taskState == FAILED) {\n+                failures = toFailures(taskStateMachine.getFailureCauses());\n+            }\n+\n+            TaskStatus taskStatus = new TaskStatus(\n+                    taskInstanceId.getLeastSignificantBits(),\n+                    taskInstanceId.getMostSignificantBits(),\n+                    1,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5542710ee5adc1fe0eefc4b1f435b669914e433c"}, "originalPosition": 162}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMTc2MDU2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryStats.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMDo1MToxOFrOGw_8gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMDo1MToxOFrOGw_8gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAzMjUxNQ==", "bodyText": "nit, this can be inlined", "url": "https://github.com/prestodb/presto/pull/14825#discussion_r454032515", "createdAt": "2020-07-14T00:51:18Z", "author": {"login": "viczhang861"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryStats.java", "diffHunk": "@@ -240,6 +246,207 @@ public QueryStats(\n         this.operatorSummaries = ImmutableList.copyOf(requireNonNull(operatorSummaries, \"operatorSummaries is null\"));\n     }\n \n+    public static QueryStats create(\n+            QueryStateTimer queryStateTimer,\n+            Optional<StageInfo> rootStage,\n+            int peakRunningTasks,\n+            DataSize peakUserMemoryReservation,\n+            DataSize peakTotalMemoryReservation,\n+            DataSize peakTaskUserMemory,\n+            DataSize peakTaskTotalMemory)\n+    {\n+        int totalTasks = 0;\n+        int runningTasks = 0;\n+        int completedTasks = 0;\n+\n+        int totalDrivers = 0;\n+        int queuedDrivers = 0;\n+        int runningDrivers = 0;\n+        int blockedDrivers = 0;\n+        int completedDrivers = 0;\n+\n+        long cumulativeUserMemory = 0;\n+        long userMemoryReservation = 0;\n+        long totalMemoryReservation = 0;\n+\n+        long totalScheduledTime = 0;\n+        long totalCpuTime = 0;\n+        long retriedCpuTime = 0;\n+        long totalBlockedTime = 0;\n+\n+        long totalAllocation = 0;\n+\n+        long rawInputDataSize = 0;\n+        long rawInputPositions = 0;\n+\n+        long processedInputDataSize = 0;\n+        long processedInputPositions = 0;\n+\n+        long outputDataSize = 0;\n+        long outputPositions = 0;\n+\n+        long writtenOutputPositions = 0;\n+        long writtenOutputLogicalDataSize = 0;\n+        long writtenOutputPhysicalDataSize = 0;\n+\n+        long writtenIntermediatePhysicalDataSize = 0;\n+\n+        ImmutableList.Builder<StageGcStatistics> stageGcStatistics = ImmutableList.builder();\n+\n+        boolean fullyBlocked = rootStage.isPresent();\n+        Set<BlockedReason> blockedReasons = new HashSet<>();\n+\n+        ImmutableList.Builder<OperatorStats> operatorStatsSummary = ImmutableList.builder();\n+        boolean completeInfo = true;\n+        for (StageInfo stageInfo : getAllStages(rootStage)) {\n+            StageExecutionStats stageExecutionStats = stageInfo.getLatestAttemptExecutionInfo().getStats();\n+            totalTasks += stageExecutionStats.getTotalTasks();\n+            runningTasks += stageExecutionStats.getRunningTasks();\n+            completedTasks += stageExecutionStats.getCompletedTasks();\n+\n+            totalDrivers += stageExecutionStats.getTotalDrivers();\n+            queuedDrivers += stageExecutionStats.getQueuedDrivers();\n+            runningDrivers += stageExecutionStats.getRunningDrivers();\n+            blockedDrivers += stageExecutionStats.getBlockedDrivers();\n+            completedDrivers += stageExecutionStats.getCompletedDrivers();\n+\n+            cumulativeUserMemory += stageExecutionStats.getCumulativeUserMemory();\n+            userMemoryReservation += stageExecutionStats.getUserMemoryReservation().toBytes();\n+            totalMemoryReservation += stageExecutionStats.getTotalMemoryReservation().toBytes();\n+            totalScheduledTime += stageExecutionStats.getTotalScheduledTime().roundTo(MILLISECONDS);\n+            totalCpuTime += stageExecutionStats.getTotalCpuTime().roundTo(MILLISECONDS);\n+            retriedCpuTime += computeRetriedCpuTime(stageInfo);\n+            totalBlockedTime += stageExecutionStats.getTotalBlockedTime().roundTo(MILLISECONDS);\n+            if (!stageInfo.getLatestAttemptExecutionInfo().getState().isDone()) {\n+                fullyBlocked &= stageExecutionStats.isFullyBlocked();\n+                blockedReasons.addAll(stageExecutionStats.getBlockedReasons());\n+            }\n+\n+            totalAllocation += stageExecutionStats.getTotalAllocation().toBytes();\n+\n+            if (stageInfo.getPlan().isPresent()) {\n+                PlanFragment plan = stageInfo.getPlan().get();\n+                if (!plan.getTableScanSchedulingOrder().isEmpty()) {\n+                    rawInputDataSize += stageExecutionStats.getRawInputDataSize().toBytes();\n+                    rawInputPositions += stageExecutionStats.getRawInputPositions();\n+\n+                    processedInputDataSize += stageExecutionStats.getProcessedInputDataSize().toBytes();\n+                    processedInputPositions += stageExecutionStats.getProcessedInputPositions();\n+                }\n+\n+                if (plan.isOutputTableWriterFragment()) {\n+                    writtenOutputPositions += stageExecutionStats.getOperatorSummaries().stream()\n+                            .filter(stats -> stats.getOperatorType().equals(TableWriterOperator.class.getSimpleName()))\n+                            .mapToLong(OperatorStats::getInputPositions)\n+                            .sum();\n+                    writtenOutputLogicalDataSize += stageExecutionStats.getOperatorSummaries().stream()\n+                            .filter(stats -> stats.getOperatorType().equals(TableWriterOperator.class.getSimpleName()))\n+                            .mapToLong(stats -> stats.getInputDataSize().toBytes())\n+                            .sum();\n+                    writtenOutputPhysicalDataSize += stageExecutionStats.getPhysicalWrittenDataSize().toBytes();\n+                }\n+                else {\n+                    writtenIntermediatePhysicalDataSize += stageExecutionStats.getPhysicalWrittenDataSize().toBytes();\n+                }\n+            }\n+\n+            stageGcStatistics.add(stageExecutionStats.getGcInfo());\n+\n+            completeInfo = completeInfo && stageInfo.isFinalStageInfo();\n+            operatorStatsSummary.addAll(stageExecutionStats.getOperatorSummaries());\n+        }\n+\n+        if (rootStage.isPresent()) {\n+            StageExecutionStats outputStageStats = rootStage.get().getLatestAttemptExecutionInfo().getStats();\n+            outputDataSize += outputStageStats.getOutputDataSize().toBytes();\n+            outputPositions += outputStageStats.getOutputPositions();\n+        }\n+\n+        boolean isScheduled = isScheduled(rootStage);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27d88f04c6454b8aa63b36d0eec9e86049d6e86f"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMTkwODE1OnYy", "diffSide": "RIGHT", "path": "presto-spark-base/src/main/java/com/facebook/presto/spark/PrestoSparkQueryExecutionFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMjowNjo0NFrOGxBRcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMjo1NTo0MVrOGxCIGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA1NDI1OA==", "bodyText": "flatMap", "url": "https://github.com/prestodb/presto/pull/14825#discussion_r454054258", "createdAt": "2020-07-14T02:06:44Z", "author": {"login": "viczhang861"}, "path": "presto-spark-base/src/main/java/com/facebook/presto/spark/PrestoSparkQueryExecutionFactory.java", "diffHunk": "@@ -310,6 +369,122 @@ private static TransactionInfo getTransactionInfo(Session session, TransactionMa\n         return transaction.get();\n     }\n \n+    private static QueryInfo createQueryInfo(\n+            Session session,\n+            String query,\n+            QueryState queryState,\n+            Optional<PlanAndMore> planAndMore,\n+            Optional<ExecutionFailureInfo> failureInfo,\n+            QueryStateTimer queryStateTimer,\n+            Optional<StageInfo> rootStage,\n+            WarningCollector warningCollector)\n+    {\n+        checkArgument(failureInfo.isPresent() || queryState != FAILED, \"unexpected query state: %s\", queryState);\n+\n+        int peakRunningTasks = 0;\n+        long peakUserMemoryReservationInBytes = 0;\n+        long peakTotalMemoryReservationInBytes = 0;\n+        long peakTaskUserMemoryInBytes = 0;\n+        long peakTaskTotalMemoryInBytes = 0;\n+\n+        for (StageInfo stageInfo : getAllStages(rootStage)) {\n+            StageExecutionInfo stageExecutionInfo = stageInfo.getLatestAttemptExecutionInfo();\n+            for (TaskInfo taskInfo : stageExecutionInfo.getTasks()) {\n+                // there's no way to know how many tasks were running in parallel in Spark\n+                // for now let's assume that all the tasks were running in parallel\n+                peakRunningTasks++;\n+                long taskPeakUserMemoryInBytes = taskInfo.getStats().getUserMemoryReservation().toBytes();\n+                long taskPeakTotalMemoryInBytes = taskInfo.getStats().getPeakTotalMemoryInBytes();\n+                peakUserMemoryReservationInBytes += taskPeakUserMemoryInBytes;\n+                peakTotalMemoryReservationInBytes += taskPeakTotalMemoryInBytes;\n+                peakTaskUserMemoryInBytes = max(peakTaskUserMemoryInBytes, taskPeakUserMemoryInBytes);\n+                peakTaskTotalMemoryInBytes = max(peakTaskTotalMemoryInBytes, taskPeakTotalMemoryInBytes);\n+            }\n+        }\n+\n+        QueryStats queryStats = QueryStats.create(\n+                queryStateTimer,\n+                rootStage,\n+                peakRunningTasks,\n+                succinctBytes(peakUserMemoryReservationInBytes),\n+                succinctBytes(peakTotalMemoryReservationInBytes),\n+                succinctBytes(peakTaskUserMemoryInBytes),\n+                succinctBytes(peakTaskTotalMemoryInBytes));\n+\n+        return new QueryInfo(\n+                session.getQueryId(),\n+                session.toSessionRepresentation(),\n+                queryState,\n+                new MemoryPoolId(\"spark-memory-pool\"),\n+                queryStats.isScheduled(),\n+                URI.create(\"http://fake.invalid/query/\" + session.getQueryId()),\n+                planAndMore.map(PlanAndMore::getFieldNames).orElse(ImmutableList.of()),\n+                query,\n+                queryStats,\n+                Optional.empty(),\n+                Optional.empty(),\n+                ImmutableMap.of(),\n+                ImmutableSet.of(),\n+                ImmutableMap.of(),\n+                ImmutableMap.of(),\n+                ImmutableSet.of(),\n+                Optional.empty(),\n+                false,\n+                planAndMore.flatMap(PlanAndMore::getUpdateType).orElse(null),\n+                rootStage,\n+                failureInfo.orElse(null),\n+                failureInfo.map(ExecutionFailureInfo::getErrorCode).orElse(null),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27d88f04c6454b8aa63b36d0eec9e86049d6e86f"}, "originalPosition": 288}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA2ODI0OQ==", "bodyText": "Nevermind, ErrorCode is nullable in ExecutionFailureInfo", "url": "https://github.com/prestodb/presto/pull/14825#discussion_r454068249", "createdAt": "2020-07-14T02:55:41Z", "author": {"login": "viczhang861"}, "path": "presto-spark-base/src/main/java/com/facebook/presto/spark/PrestoSparkQueryExecutionFactory.java", "diffHunk": "@@ -310,6 +369,122 @@ private static TransactionInfo getTransactionInfo(Session session, TransactionMa\n         return transaction.get();\n     }\n \n+    private static QueryInfo createQueryInfo(\n+            Session session,\n+            String query,\n+            QueryState queryState,\n+            Optional<PlanAndMore> planAndMore,\n+            Optional<ExecutionFailureInfo> failureInfo,\n+            QueryStateTimer queryStateTimer,\n+            Optional<StageInfo> rootStage,\n+            WarningCollector warningCollector)\n+    {\n+        checkArgument(failureInfo.isPresent() || queryState != FAILED, \"unexpected query state: %s\", queryState);\n+\n+        int peakRunningTasks = 0;\n+        long peakUserMemoryReservationInBytes = 0;\n+        long peakTotalMemoryReservationInBytes = 0;\n+        long peakTaskUserMemoryInBytes = 0;\n+        long peakTaskTotalMemoryInBytes = 0;\n+\n+        for (StageInfo stageInfo : getAllStages(rootStage)) {\n+            StageExecutionInfo stageExecutionInfo = stageInfo.getLatestAttemptExecutionInfo();\n+            for (TaskInfo taskInfo : stageExecutionInfo.getTasks()) {\n+                // there's no way to know how many tasks were running in parallel in Spark\n+                // for now let's assume that all the tasks were running in parallel\n+                peakRunningTasks++;\n+                long taskPeakUserMemoryInBytes = taskInfo.getStats().getUserMemoryReservation().toBytes();\n+                long taskPeakTotalMemoryInBytes = taskInfo.getStats().getPeakTotalMemoryInBytes();\n+                peakUserMemoryReservationInBytes += taskPeakUserMemoryInBytes;\n+                peakTotalMemoryReservationInBytes += taskPeakTotalMemoryInBytes;\n+                peakTaskUserMemoryInBytes = max(peakTaskUserMemoryInBytes, taskPeakUserMemoryInBytes);\n+                peakTaskTotalMemoryInBytes = max(peakTaskTotalMemoryInBytes, taskPeakTotalMemoryInBytes);\n+            }\n+        }\n+\n+        QueryStats queryStats = QueryStats.create(\n+                queryStateTimer,\n+                rootStage,\n+                peakRunningTasks,\n+                succinctBytes(peakUserMemoryReservationInBytes),\n+                succinctBytes(peakTotalMemoryReservationInBytes),\n+                succinctBytes(peakTaskUserMemoryInBytes),\n+                succinctBytes(peakTaskTotalMemoryInBytes));\n+\n+        return new QueryInfo(\n+                session.getQueryId(),\n+                session.toSessionRepresentation(),\n+                queryState,\n+                new MemoryPoolId(\"spark-memory-pool\"),\n+                queryStats.isScheduled(),\n+                URI.create(\"http://fake.invalid/query/\" + session.getQueryId()),\n+                planAndMore.map(PlanAndMore::getFieldNames).orElse(ImmutableList.of()),\n+                query,\n+                queryStats,\n+                Optional.empty(),\n+                Optional.empty(),\n+                ImmutableMap.of(),\n+                ImmutableSet.of(),\n+                ImmutableMap.of(),\n+                ImmutableMap.of(),\n+                ImmutableSet.of(),\n+                Optional.empty(),\n+                false,\n+                planAndMore.flatMap(PlanAndMore::getUpdateType).orElse(null),\n+                rootStage,\n+                failureInfo.orElse(null),\n+                failureInfo.map(ExecutionFailureInfo::getErrorCode).orElse(null),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA1NDI1OA=="}, "originalCommit": {"oid": "27d88f04c6454b8aa63b36d0eec9e86049d6e86f"}, "originalPosition": 288}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMTkzNTI1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/eventlistener/EventListenerManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMjoyMTozMFrOGxBhhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDowNzoyOFrOGxVU6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA1ODM3NQ==", "bodyText": "Why not simply get(EVENT_LISTENER_PROPERTY_NAME) ?", "url": "https://github.com/prestodb/presto/pull/14825#discussion_r454058375", "createdAt": "2020-07-14T02:21:30Z", "author": {"login": "viczhang861"}, "path": "presto-main/src/main/java/com/facebook/presto/eventlistener/EventListenerManager.java", "diffHunk": "@@ -59,16 +59,24 @@ public void loadConfiguredEventListener()\n             throws Exception\n     {\n         if (EVENT_LISTENER_CONFIGURATION.exists()) {\n-            Map<String, String> properties = new HashMap<>(loadProperties(EVENT_LISTENER_CONFIGURATION));\n-\n-            String eventListenerName = properties.remove(EVENT_LISTENER_PROPERTY_NAME);\n-            checkArgument(!isNullOrEmpty(eventListenerName),\n-                    \"Access control configuration %s does not contain %s\", EVENT_LISTENER_CONFIGURATION.getAbsoluteFile(), EVENT_LISTENER_PROPERTY_NAME);\n-\n-            setConfiguredEventListener(eventListenerName, properties);\n+            Map<String, String> properties = loadProperties(EVENT_LISTENER_CONFIGURATION);\n+            checkArgument(\n+                    !isNullOrEmpty(properties.get(EVENT_LISTENER_PROPERTY_NAME)),\n+                    \"Access control configuration %s does not contain %s\",\n+                    EVENT_LISTENER_CONFIGURATION.getAbsoluteFile(),\n+                    EVENT_LISTENER_PROPERTY_NAME);\n+            loadConfiguredEventListener(properties);\n         }\n     }\n \n+    public void loadConfiguredEventListener(Map<String, String> properties)\n+    {\n+        properties = new HashMap<>(properties);\n+        String eventListenerName = properties.remove(EVENT_LISTENER_PROPERTY_NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cd44517170115bd7d9deb0a0cebfcc87d3d4694"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM4MjgyNg==", "bodyText": "This is per convention. One of the properties defines what event listener provider to use, the other properties is the actual configuration that must be passed to the provider. The property that defines what provider to use must be removed, as the provider itself doesn't understand it.", "url": "https://github.com/prestodb/presto/pull/14825#discussion_r454382826", "createdAt": "2020-07-14T14:07:28Z", "author": {"login": "arhimondr"}, "path": "presto-main/src/main/java/com/facebook/presto/eventlistener/EventListenerManager.java", "diffHunk": "@@ -59,16 +59,24 @@ public void loadConfiguredEventListener()\n             throws Exception\n     {\n         if (EVENT_LISTENER_CONFIGURATION.exists()) {\n-            Map<String, String> properties = new HashMap<>(loadProperties(EVENT_LISTENER_CONFIGURATION));\n-\n-            String eventListenerName = properties.remove(EVENT_LISTENER_PROPERTY_NAME);\n-            checkArgument(!isNullOrEmpty(eventListenerName),\n-                    \"Access control configuration %s does not contain %s\", EVENT_LISTENER_CONFIGURATION.getAbsoluteFile(), EVENT_LISTENER_PROPERTY_NAME);\n-\n-            setConfiguredEventListener(eventListenerName, properties);\n+            Map<String, String> properties = loadProperties(EVENT_LISTENER_CONFIGURATION);\n+            checkArgument(\n+                    !isNullOrEmpty(properties.get(EVENT_LISTENER_PROPERTY_NAME)),\n+                    \"Access control configuration %s does not contain %s\",\n+                    EVENT_LISTENER_CONFIGURATION.getAbsoluteFile(),\n+                    EVENT_LISTENER_PROPERTY_NAME);\n+            loadConfiguredEventListener(properties);\n         }\n     }\n \n+    public void loadConfiguredEventListener(Map<String, String> properties)\n+    {\n+        properties = new HashMap<>(properties);\n+        String eventListenerName = properties.remove(EVENT_LISTENER_PROPERTY_NAME);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA1ODM3NQ=="}, "originalCommit": {"oid": "2cd44517170115bd7d9deb0a0cebfcc87d3d4694"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2351, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}