{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwMzgzMTQx", "number": 15360, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMjo1MToyOFrOEzB-6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMjo1NDowMVrOEzCBNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTQ1MzIwOnYy", "diffSide": "RIGHT", "path": "presto-common/src/main/java/com/facebook/presto/common/block/BlockUtil.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMjo1MToyOFrOHqAXfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwODowNjozNVrOHrEtCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzgwODI1NQ==", "bodyText": "Having currentSize currentPositionCount parameters is confusing. In the original calculateBlockResetSize method currentSize is current-position-count, but here it is not. Maybe renaming the method to calculateNestedBlockResetSize would help. Parameter still need to be renamed, but I don't have any specific suggestions just yet.", "url": "https://github.com/prestodb/presto/pull/15360#discussion_r513808255", "createdAt": "2020-10-28T22:51:28Z", "author": {"login": "mbasmanova"}, "path": "presto-common/src/main/java/com/facebook/presto/common/block/BlockUtil.java", "diffHunk": "@@ -106,6 +108,17 @@ else if (newSize > MAX_ARRAY_SIZE) {\n         return (int) newSize;\n     }\n \n+    static int calculateBlockResetSize(int currentSize, int currentPositionCount, int expectedPositionCount)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b72ee3be202642b00092e9286ed1da3ea97b780"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzNjk0Nw==", "bodyText": "Thanks @mbasmanova for the suggestions. This method is intended to be used in calculating either the nested block position count, or VariableWidthBlockBuilder's slice size. So I renamed it calculateNestedStructureResetSize and renamed the parameters as well:\nstatic int calculateNestedStructureResetSize(int currentNestedStructureSize, int currentNestedStructurePositionCount, int expectedPositionCount)\n    {\n        long newSize = max(\n                (long) ceil(currentNestedStructureSize * BLOCK_RESET_SKEW),\n                currentNestedStructurePositionCount == 0 ? currentNestedStructureSize : (long) currentNestedStructureSize * expectedPositionCount / currentNestedStructurePositionCount);\n        if (newSize > MAX_ARRAY_SIZE) {\n            return MAX_ARRAY_SIZE;\n        }\n        return toIntExact(newSize);\n    }\n\nDo you think this is easier to understand?\nbtw.There were two existing overload methods\nstatic int calculateBlockResetSize(int currentSize)\n    {\n        long newSize = (long) ceil(currentSize * BLOCK_RESET_SKEW);\n\n        // verify new size is within reasonable bounds\n        if (newSize < DEFAULT_CAPACITY) {\n            newSize = DEFAULT_CAPACITY;\n        }\n        else if (newSize > MAX_ARRAY_SIZE) {\n            newSize = MAX_ARRAY_SIZE;\n        }\n        return (int) newSize;\n    }\n\n    static int calculateBlockResetBytes(int currentBytes)\n    {\n        long newBytes = (long) ceil(currentBytes * BLOCK_RESET_SKEW);\n        if (newBytes > MAX_ARRAY_SIZE) {\n            return MAX_ARRAY_SIZE;\n        }\n        return (int) newBytes;\n    }\n\nBut they're doing the same thing and I actually think the calculateBlockResetBytes(currentBytes) should be removed.", "url": "https://github.com/prestodb/presto/pull/15360#discussion_r514636947", "createdAt": "2020-10-30T00:11:02Z", "author": {"login": "yingsu00"}, "path": "presto-common/src/main/java/com/facebook/presto/common/block/BlockUtil.java", "diffHunk": "@@ -106,6 +108,17 @@ else if (newSize > MAX_ARRAY_SIZE) {\n         return (int) newSize;\n     }\n \n+    static int calculateBlockResetSize(int currentSize, int currentPositionCount, int expectedPositionCount)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzgwODI1NQ=="}, "originalCommit": {"oid": "6b72ee3be202642b00092e9286ed1da3ea97b780"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzNzY3Ng==", "bodyText": "But they're doing the same thing and I actually think the calculateBlockResetBytes(currentBytes) should be removed.\n\n@yingsu00 I agree.", "url": "https://github.com/prestodb/presto/pull/15360#discussion_r514637676", "createdAt": "2020-10-30T00:14:02Z", "author": {"login": "mbasmanova"}, "path": "presto-common/src/main/java/com/facebook/presto/common/block/BlockUtil.java", "diffHunk": "@@ -106,6 +108,17 @@ else if (newSize > MAX_ARRAY_SIZE) {\n         return (int) newSize;\n     }\n \n+    static int calculateBlockResetSize(int currentSize, int currentPositionCount, int expectedPositionCount)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzgwODI1NQ=="}, "originalCommit": {"oid": "6b72ee3be202642b00092e9286ed1da3ea97b780"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkyNzg4Mg==", "bodyText": "But they're doing the same thing and I actually think the calculateBlockResetBytes(currentBytes) should be removed.\n\n@yingsu00 I agree.\n\n@mbasmanova ok, I added a new commit \"Remove calculateBlockResetBytes in BlockUtil\" to this PR that removes it.\nHow do you like the new calculateNestedStructureResetSize(int currentNestedStructureSize, int currentNestedStructurePositionCount, int expectedPositionCount)  naming?", "url": "https://github.com/prestodb/presto/pull/15360#discussion_r514927882", "createdAt": "2020-10-30T08:06:35Z", "author": {"login": "yingsu00"}, "path": "presto-common/src/main/java/com/facebook/presto/common/block/BlockUtil.java", "diffHunk": "@@ -106,6 +108,17 @@ else if (newSize > MAX_ARRAY_SIZE) {\n         return (int) newSize;\n     }\n \n+    static int calculateBlockResetSize(int currentSize, int currentPositionCount, int expectedPositionCount)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzgwODI1NQ=="}, "originalCommit": {"oid": "6b72ee3be202642b00092e9286ed1da3ea97b780"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTQ1OTEwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/com/facebook/presto/block/TestBlockBuilder.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMjo1NDowMVrOHqAbBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwNzo1ODowMVrOHrEeqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzgwOTE1OA==", "bodyText": "The need to add these separators suggests that this test needs to be split into multiple.", "url": "https://github.com/prestodb/presto/pull/15360#discussion_r513809158", "createdAt": "2020-10-28T22:54:01Z", "author": {"login": "mbasmanova"}, "path": "presto-main/src/test/java/com/facebook/presto/block/TestBlockBuilder.java", "diffHunk": "@@ -108,6 +112,24 @@ public void testNewBlockBuilderLike()\n         assertEquals(newArrayBlockBuilder.getPositionCount(), 1);\n         // Reserved 200 ARRAY(ARRAY(BIGINT)), and 201 ints for offsets and 200 booleans for nulls\n         assertEquals(newArrayBlockBuilder.getRetainedSizeInBytes(), 5848);\n+\n+        //------------------------- Test newBlockBuilderLike(BlockBuilderStatus, int) on large BlockBuilders so that there is no Integer overflow-------------------------", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b72ee3be202642b00092e9286ed1da3ea97b780"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzODE2Mg==", "bodyText": "Sure. I created a new test testNewBlockBuilderLikeWithExpectedEntries for the last two sections separated by the separators.\n@Test\n    public void testNewBlockBuilderLikeWithExpectedEntries()\n    {\n        ArrayType longArrayType = new ArrayType(BIGINT);\n        ArrayType arrayType = new ArrayType(longArrayType);\n        List<Type> channels = ImmutableList.of(BIGINT, VARCHAR, arrayType);\n        PageBuilder pageBuilder = new PageBuilder(channels);\n        BlockBuilder bigintBlockBuilder = pageBuilder.getBlockBuilder(0);\n        BlockBuilder varcharBlockBuilder = pageBuilder.getBlockBuilder(1);\n        BlockBuilder arrayBlockBuilder = pageBuilder.getBlockBuilder(2);\n\n        BlockBuilder newBigintBlockBuilder = bigintBlockBuilder.newBlockBuilderLike(null, 200);\n        assertEquals(newBigintBlockBuilder.getPositionCount(), 0);\n        assertEquals(newBigintBlockBuilder.getRetainedSizeInBytes(), 80);\n        newBigintBlockBuilder.writeLong(0);\n        assertEquals(newBigintBlockBuilder.getPositionCount(), 1);\n        // Reserved 200 longs and booleans for nulls array\n        assertEquals(newBigintBlockBuilder.getRetainedSizeInBytes(), 1880);\n\n        BlockBuilder newVarcharBlockBuilder = varcharBlockBuilder.newBlockBuilderLike(null, 200);\n        assertEquals(newVarcharBlockBuilder.getPositionCount(), 0);\n        assertEquals(newVarcharBlockBuilder.getRetainedSizeInBytes(), 164);\n        newVarcharBlockBuilder.writeLong(0);\n        newVarcharBlockBuilder.closeEntry();\n        assertEquals(newVarcharBlockBuilder.getPositionCount(), 1);\n        // Reserved 200 varchars of average length 5.9, and 201 ints for offsets and 200 booleans for nulls\n        assertEquals(newVarcharBlockBuilder.getRetainedSizeInBytes(), 2360);\n\n        BlockBuilder newArrayBlockBuilder = arrayBlockBuilder.newBlockBuilderLike(null, 200);\n        assertEquals(newArrayBlockBuilder.getPositionCount(), 0);\n        assertEquals(newArrayBlockBuilder.getRetainedSizeInBytes(), 248);\n        newArrayBlockBuilder.appendStructure(fromElementBlock(1, Optional.empty(), IntStream.range(0, 2).toArray(), newBigintBlockBuilder.build()));\n        assertEquals(newArrayBlockBuilder.getPositionCount(), 1);\n        // Reserved 200 ARRAY(ARRAY(BIGINT)), and 201 ints for offsets and 200 booleans for nulls\n        assertEquals(newArrayBlockBuilder.getRetainedSizeInBytes(), 5848);\n\n        // Test large nested BlockBuilders so that there is no Integer overflow\n\n        pageBuilder.reset();\n        BlockBuilder largeVarcharBlockBuilder = pageBuilder.getBlockBuilder(1);\n\n        // Construct a string of 64 * 16 = 2^11 bytes\n        Slice largeSlice = Slices.utf8Slice(String.join(\"\", Collections.nCopies(64, \"CowMonsterKing:)\")));\n        // Write the string to the largeVarcharBlockBuilder for 2^20 times\n        for (int i = 0; i < 1_048_576; i++) {\n            VARCHAR.writeSlice(largeVarcharBlockBuilder, largeSlice);\n            pageBuilder.declarePosition();\n        }\n        newVarcharBlockBuilder = largeVarcharBlockBuilder.newBlockBuilderLike(null, 1_048_576 * 8);\n        assertEquals(newVarcharBlockBuilder.getPositionCount(), 0);\n        assertEquals(newVarcharBlockBuilder.getRetainedSizeInBytes(), 164);\n\n        // We are not going to test real reservation here because allocating large amount of memory fails the Travis.\n    }", "url": "https://github.com/prestodb/presto/pull/15360#discussion_r514638162", "createdAt": "2020-10-30T00:15:36Z", "author": {"login": "yingsu00"}, "path": "presto-main/src/test/java/com/facebook/presto/block/TestBlockBuilder.java", "diffHunk": "@@ -108,6 +112,24 @@ public void testNewBlockBuilderLike()\n         assertEquals(newArrayBlockBuilder.getPositionCount(), 1);\n         // Reserved 200 ARRAY(ARRAY(BIGINT)), and 201 ints for offsets and 200 booleans for nulls\n         assertEquals(newArrayBlockBuilder.getRetainedSizeInBytes(), 5848);\n+\n+        //------------------------- Test newBlockBuilderLike(BlockBuilderStatus, int) on large BlockBuilders so that there is no Integer overflow-------------------------", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzgwOTE1OA=="}, "originalCommit": {"oid": "6b72ee3be202642b00092e9286ed1da3ea97b780"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkyNDIwMQ==", "bodyText": "Masha, I just noticed the tests on the new newBlockBuilderLike() with expectedEntries need to be called on the previously existing BlockBuilders. So I put the tests back and created a new one\ntestNewBlockBuilderLikeForLargeBlockBuilder just for testing the integer overflow.\n@Test\n    public void testNewBlockBuilderLikeForLargeBlockBuilder()\n    {\n        List<Type> channels = ImmutableList.of(VARCHAR);\n        PageBuilder pageBuilder = new PageBuilder(channels);\n        BlockBuilder largeVarcharBlockBuilder = pageBuilder.getBlockBuilder(0);\n\n        // Construct a string of 64 * 16 = 2^11 bytes\n        Slice largeSlice = Slices.utf8Slice(String.join(\"\", Collections.nCopies(64, \"CowMonsterKing:)\")));\n        // Write the string to the largeVarcharBlockBuilder for 2^20 times\n        for (int i = 0; i < 1_048_576; i++) {\n            VARCHAR.writeSlice(largeVarcharBlockBuilder, largeSlice);\n            pageBuilder.declarePosition();\n        }\n        BlockBuilder newVarcharBlockBuilder = largeVarcharBlockBuilder.newBlockBuilderLike(null, 1_048_576 * 8);\n        assertEquals(newVarcharBlockBuilder.getPositionCount(), 0);\n        assertEquals(newVarcharBlockBuilder.getRetainedSizeInBytes(), 164);\n\n        // We are not going to test real reservation here because allocating large amount of memory fails the Travis.\n    }", "url": "https://github.com/prestodb/presto/pull/15360#discussion_r514924201", "createdAt": "2020-10-30T07:58:01Z", "author": {"login": "yingsu00"}, "path": "presto-main/src/test/java/com/facebook/presto/block/TestBlockBuilder.java", "diffHunk": "@@ -108,6 +112,24 @@ public void testNewBlockBuilderLike()\n         assertEquals(newArrayBlockBuilder.getPositionCount(), 1);\n         // Reserved 200 ARRAY(ARRAY(BIGINT)), and 201 ints for offsets and 200 booleans for nulls\n         assertEquals(newArrayBlockBuilder.getRetainedSizeInBytes(), 5848);\n+\n+        //------------------------- Test newBlockBuilderLike(BlockBuilderStatus, int) on large BlockBuilders so that there is no Integer overflow-------------------------", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzgwOTE1OA=="}, "originalCommit": {"oid": "6b72ee3be202642b00092e9286ed1da3ea97b780"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3341, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}