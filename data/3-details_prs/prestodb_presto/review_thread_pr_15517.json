{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM3MTY0ODI2", "number": 15517, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMDowODowNlrOFEKfyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMzo1NjozNVrOFIVmXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5OTEwNjAyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/PagesIndex.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMDowODowNlrOIEKQMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwMToxNToyMVrOIJq-pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTIzMzIwMQ==", "bodyText": "Reorder to put it below other final members?", "url": "https://github.com/prestodb/presto/pull/15517#discussion_r541233201", "createdAt": "2020-12-11T20:08:06Z", "author": {"login": "viczhang861"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/PagesIndex.java", "diffHunk": "@@ -84,7 +84,7 @@\n     private final boolean groupByUsesEqualTo;\n \n     private final List<Type> types;\n-    private final LongArrayList valueAddresses;\n+    private LongBigArray valueAddresses;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7d01e635f5a96718cb54c6d191a75591579671f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzAxMjI2MQ==", "bodyText": "Made it final", "url": "https://github.com/prestodb/presto/pull/15517#discussion_r547012261", "createdAt": "2020-12-22T01:15:21Z", "author": {"login": "arhimondr"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/PagesIndex.java", "diffHunk": "@@ -84,7 +84,7 @@\n     private final boolean groupByUsesEqualTo;\n \n     private final List<Type> types;\n-    private final LongArrayList valueAddresses;\n+    private LongBigArray valueAddresses;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTIzMzIwMQ=="}, "originalCommit": {"oid": "d7d01e635f5a96718cb54c6d191a75591579671f"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5OTM1OTk5OnYy", "diffSide": "RIGHT", "path": "presto-array/src/main/java/com/facebook/presto/array/LongBigArray.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMDo0OToxN1rOIEMv3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMDo0OToxN1rOIEMv3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI3NDA3Nw==", "bodyText": "Typical array expanding is based on existing size Math.max(toIntExact(round(array.length * 1.5)), requiredSegments)", "url": "https://github.com/prestodb/presto/pull/15517#discussion_r541274077", "createdAt": "2020-12-11T20:49:17Z", "author": {"login": "viczhang861"}, "path": "presto-array/src/main/java/com/facebook/presto/array/LongBigArray.java", "diffHunk": "@@ -125,7 +147,7 @@ private void grow(long length)\n \n         // grow base array if necessary\n         if (array.length < requiredSegments) {\n-            array = Arrays.copyOf(array, requiredSegments);\n+            array = Arrays.copyOf(array, toIntExact(round(requiredSegments * 1.5)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f4c7136df4d1b34198471e6a3fc3dab7c4ba94c"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5OTM3MDk1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/PagesIndex.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMDo1MToxMlrOIEM2zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwMToxNTo1M1rOIJq_Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI3NTg1Mg==", "bodyText": "Wonder why 256K ?  valueAddresses.ensureCapacity(expectedPositions)", "url": "https://github.com/prestodb/presto/pull/15517#discussion_r541275852", "createdAt": "2020-12-11T20:51:12Z", "author": {"login": "viczhang861"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/PagesIndex.java", "diffHunk": "@@ -107,7 +107,9 @@ private PagesIndex(\n         this.functionAndTypeManager = requireNonNull(functionAndTypeManager, \"functionManager is null\");\n         this.groupByUsesEqualTo = groupByUsesEqualTo;\n         this.types = ImmutableList.copyOf(requireNonNull(types, \"types is null\"));\n-        this.valueAddresses = new LongBigArray();\n+        // Take the next closed power of 2 as the segment size\n+        int segmentSize = Integer.highestOneBit(expectedPositions) << 1;\n+        this.valueAddresses = new LongBigArray(0, segmentSize);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f4c7136df4d1b34198471e6a3fc3dab7c4ba94c"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzAxMjQzOA==", "bodyText": "Done", "url": "https://github.com/prestodb/presto/pull/15517#discussion_r547012438", "createdAt": "2020-12-22T01:15:53Z", "author": {"login": "arhimondr"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/PagesIndex.java", "diffHunk": "@@ -107,7 +107,9 @@ private PagesIndex(\n         this.functionAndTypeManager = requireNonNull(functionAndTypeManager, \"functionManager is null\");\n         this.groupByUsesEqualTo = groupByUsesEqualTo;\n         this.types = ImmutableList.copyOf(requireNonNull(types, \"types is null\"));\n-        this.valueAddresses = new LongBigArray();\n+        // Take the next closed power of 2 as the segment size\n+        int segmentSize = Integer.highestOneBit(expectedPositions) << 1;\n+        this.valueAddresses = new LongBigArray(0, segmentSize);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI3NTg1Mg=="}, "originalCommit": {"oid": "9f4c7136df4d1b34198471e6a3fc3dab7c4ba94c"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNTk4NTA0OnYy", "diffSide": "RIGHT", "path": "presto-array/src/main/java/com/facebook/presto/array/AdaptiveLongBigArray.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNjoxODowOVrOIFBb4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNjoxODowOVrOIFBb4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEzNzMxNA==", "bodyText": "convention: Rename to getRetainedSizeInBytes()?", "url": "https://github.com/prestodb/presto/pull/15517#discussion_r542137314", "createdAt": "2020-12-14T06:18:09Z", "author": {"login": "yingsu00"}, "path": "presto-array/src/main/java/com/facebook/presto/array/AdaptiveLongBigArray.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.array;\n+\n+import io.airlift.slice.SizeOf;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.util.Arrays;\n+\n+import static io.airlift.slice.SizeOf.sizeOfLongArray;\n+import static java.lang.StrictMath.toIntExact;\n+\n+/**\n+ * This variation of BigArray is designed to expand segments up to some reasonable extend\n+ * and add more segments if the maximum segment capacity is reached\n+ * This implementation allows to keep the redirection table small so it does fit into L1 CPU cache\n+ */\n+public class AdaptiveLongBigArray\n+{\n+    // visible for testing\n+    static final int INSTANCE_SIZE = ClassLayout.parseClass(AdaptiveLongBigArray.class).instanceSize();\n+\n+    // settings are constants due to efficiency considerations\n+    static final int INITIAL_SEGMENT_LENGTH = 16 * 1024; // 128KB\n+    static final int MAX_SEGMENT_LENGTH = 32 * 1024 * 1024; // 256MB\n+    static final int MAX_SEGMENT_SIZE_IN_BYTES = toIntExact(sizeOfLongArray(MAX_SEGMENT_LENGTH));\n+    static final int INITIAL_SEGMENTS = 10;\n+    static final int SEGMENT_SHIFT = 25;\n+    static final int SEGMENT_MASK = MAX_SEGMENT_LENGTH - 1;\n+\n+    private long[][] array;\n+    private int segments;\n+    private int capacity;\n+\n+    public AdaptiveLongBigArray()\n+    {\n+        array = new long[INITIAL_SEGMENTS][];\n+    }\n+\n+    public long sizeOf()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e06a68500404939b3de6084d17c77da164087409"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNTk5MTIyOnYy", "diffSide": "RIGHT", "path": "presto-array/src/main/java/com/facebook/presto/array/AdaptiveLongBigArray.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNjoyMDo1MFrOIFBfKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNjoyMDo1MFrOIFBfKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEzODE1Mw==", "bodyText": "static import sizeOf", "url": "https://github.com/prestodb/presto/pull/15517#discussion_r542138153", "createdAt": "2020-12-14T06:20:50Z", "author": {"login": "yingsu00"}, "path": "presto-array/src/main/java/com/facebook/presto/array/AdaptiveLongBigArray.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.array;\n+\n+import io.airlift.slice.SizeOf;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.util.Arrays;\n+\n+import static io.airlift.slice.SizeOf.sizeOfLongArray;\n+import static java.lang.StrictMath.toIntExact;\n+\n+/**\n+ * This variation of BigArray is designed to expand segments up to some reasonable extend\n+ * and add more segments if the maximum segment capacity is reached\n+ * This implementation allows to keep the redirection table small so it does fit into L1 CPU cache\n+ */\n+public class AdaptiveLongBigArray\n+{\n+    // visible for testing\n+    static final int INSTANCE_SIZE = ClassLayout.parseClass(AdaptiveLongBigArray.class).instanceSize();\n+\n+    // settings are constants due to efficiency considerations\n+    static final int INITIAL_SEGMENT_LENGTH = 16 * 1024; // 128KB\n+    static final int MAX_SEGMENT_LENGTH = 32 * 1024 * 1024; // 256MB\n+    static final int MAX_SEGMENT_SIZE_IN_BYTES = toIntExact(sizeOfLongArray(MAX_SEGMENT_LENGTH));\n+    static final int INITIAL_SEGMENTS = 10;\n+    static final int SEGMENT_SHIFT = 25;\n+    static final int SEGMENT_MASK = MAX_SEGMENT_LENGTH - 1;\n+\n+    private long[][] array;\n+    private int segments;\n+    private int capacity;\n+\n+    public AdaptiveLongBigArray()\n+    {\n+        array = new long[INITIAL_SEGMENTS][];\n+    }\n+\n+    public long sizeOf()\n+    {\n+        long result = INSTANCE_SIZE + SizeOf.sizeOf(array);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e06a68500404939b3de6084d17c77da164087409"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MjgwODQ2OnYy", "diffSide": "RIGHT", "path": "presto-array/src/main/java/com/facebook/presto/array/AdaptiveLongBigArray.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMzoyNToyNFrOIKMGYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMzoyNToyNFrOIKMGYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU1NDkxNQ==", "bodyText": "It'll be nice to add some comments about the segments and capacity, e.g what's the unit of the capacity? And how the array is allocated.", "url": "https://github.com/prestodb/presto/pull/15517#discussion_r547554915", "createdAt": "2020-12-22T23:25:24Z", "author": {"login": "yingsu00"}, "path": "presto-array/src/main/java/com/facebook/presto/array/AdaptiveLongBigArray.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.array;\n+\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.util.Arrays;\n+\n+import static io.airlift.slice.SizeOf.sizeOf;\n+import static io.airlift.slice.SizeOf.sizeOfLongArray;\n+\n+/**\n+ * This variation of BigArray is designed to expand segments up to some reasonable extend\n+ * and add more segments if the maximum segment capacity is reached\n+ * This implementation allows to keep the redirection table small so it does fit into L1 CPU cache\n+ */\n+public class AdaptiveLongBigArray\n+{\n+    // visible for testing\n+    static final int INSTANCE_SIZE = ClassLayout.parseClass(AdaptiveLongBigArray.class).instanceSize();\n+\n+    // settings are constants due to efficiency considerations\n+    static final int INITIAL_SEGMENT_LENGTH = 16 * 1024; // 128KB\n+    static final int MAX_SEGMENT_LENGTH = 32 * 1024 * 1024; // 256MB\n+    static final long MAX_SEGMENT_SIZE_IN_BYTES = sizeOfLongArray(MAX_SEGMENT_LENGTH);\n+    static final int INITIAL_SEGMENTS = 10;\n+    static final int SEGMENT_SHIFT = 25;\n+    static final int SEGMENT_MASK = MAX_SEGMENT_LENGTH - 1;\n+\n+    private long[][] array;\n+    private int segments;\n+    private int capacity;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46bb00d9267e1e8d0965f23a13f5af77ecc9602b"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0Mjg2ODE0OnYy", "diffSide": "RIGHT", "path": "presto-array/src/main/java/com/facebook/presto/array/AdaptiveLongBigArray.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMzo1NjozNVrOIKMnYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMzo1NjozNVrOIKMnYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU2MzM2Mw==", "bodyText": "This can just be segmentLength *= 2; which is easier to understand. The compiler should be able to compile it to bit shifting.", "url": "https://github.com/prestodb/presto/pull/15517#discussion_r547563363", "createdAt": "2020-12-22T23:56:35Z", "author": {"login": "yingsu00"}, "path": "presto-array/src/main/java/com/facebook/presto/array/AdaptiveLongBigArray.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.array;\n+\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.util.Arrays;\n+\n+import static io.airlift.slice.SizeOf.sizeOf;\n+import static io.airlift.slice.SizeOf.sizeOfLongArray;\n+\n+/**\n+ * This variation of BigArray is designed to expand segments up to some reasonable extend\n+ * and add more segments if the maximum segment capacity is reached\n+ * This implementation allows to keep the redirection table small so it does fit into L1 CPU cache\n+ */\n+public class AdaptiveLongBigArray\n+{\n+    // visible for testing\n+    static final int INSTANCE_SIZE = ClassLayout.parseClass(AdaptiveLongBigArray.class).instanceSize();\n+\n+    // settings are constants due to efficiency considerations\n+    static final int INITIAL_SEGMENT_LENGTH = 16 * 1024; // 128KB\n+    static final int MAX_SEGMENT_LENGTH = 32 * 1024 * 1024; // 256MB\n+    static final long MAX_SEGMENT_SIZE_IN_BYTES = sizeOfLongArray(MAX_SEGMENT_LENGTH);\n+    static final int INITIAL_SEGMENTS = 10;\n+    static final int SEGMENT_SHIFT = 25;\n+    static final int SEGMENT_MASK = MAX_SEGMENT_LENGTH - 1;\n+\n+    private long[][] array;\n+    private int segments;\n+    private int capacity;\n+\n+    public AdaptiveLongBigArray()\n+    {\n+        array = new long[INITIAL_SEGMENTS][];\n+    }\n+\n+    public long getRetainedSizeInBytes()\n+    {\n+        long result = INSTANCE_SIZE + sizeOf(array);\n+        if (segments == 1) {\n+            result += sizeOfLongArray(array[0].length);\n+        }\n+        else if (segments > 1) {\n+            result += segments * MAX_SEGMENT_SIZE_IN_BYTES;\n+        }\n+        return result;\n+    }\n+\n+    public long get(int index)\n+    {\n+        return array[segment(index)][offset(index)];\n+    }\n+\n+    public void set(int index, long value)\n+    {\n+        array[segment(index)][offset(index)] = value;\n+    }\n+\n+    public void swap(int first, int second)\n+    {\n+        long[] firstSegment = array[segment(first)];\n+        int firstOffset = offset(first);\n+\n+        long[] secondSegment = array[segment(first)];\n+        int secondOffset = offset(second);\n+\n+        long tmp = firstSegment[firstOffset];\n+        firstSegment[firstOffset] = secondSegment[secondOffset];\n+        secondSegment[secondOffset] = tmp;\n+    }\n+\n+    public void ensureCapacity(int length)\n+    {\n+        if (capacity >= length) {\n+            return;\n+        }\n+\n+        int lastIndex = length - 1;\n+        int segment = segment(lastIndex);\n+        int offset = offset(lastIndex);\n+\n+        // expand segments array if needed\n+        if (segment >= array.length) {\n+            array = Arrays.copyOf(array, array.length * 2);\n+        }\n+\n+        if (segment == 0) {\n+            if (array[0] == null) {\n+                array[0] = new long[INITIAL_SEGMENT_LENGTH];\n+            }\n+            // expand segment if needed\n+            if (offset >= array[0].length) {\n+                int segmentLength = array[0].length;\n+                while (offset >= segmentLength) {\n+                    segmentLength <<= 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46bb00d9267e1e8d0965f23a13f5af77ecc9602b"}, "originalPosition": 108}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3272, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}