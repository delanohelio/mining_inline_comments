{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxMTYyNjQ2", "number": 14176, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwOTo1OToyMVrODjwbhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMDowMzo1NlrODjwhwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4ODIwMjMxOnYy", "diffSide": "RIGHT", "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/framework/LimitQueryDeterminismAnalyzer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwOTo1OToyMVrOFvvceg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwOTo1OToyMVrOFvvceg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYwNDczMA==", "bodyText": "nit: check that rowCount > 0", "url": "https://github.com/prestodb/presto/pull/14176#discussion_r385604730", "createdAt": "2020-02-28T09:59:21Z", "author": {"login": "mbasmanova"}, "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/framework/LimitQueryDeterminismAnalyzer.java", "diffHunk": "@@ -45,26 +45,37 @@\n     private final PrestoAction prestoAction;\n     private final boolean enabled;\n \n-    public LimitQueryDeterminismAnalyzer(PrestoAction prestoAction, boolean enabled)\n+    private final Statement statement;\n+    private final long rowCount;\n+    private final VerificationContext verificationContext;\n+\n+    public LimitQueryDeterminismAnalyzer(\n+            PrestoAction prestoAction,\n+            boolean enabled,\n+            Statement statement,\n+            long rowCount,\n+            VerificationContext verificationContext)\n     {\n         this.prestoAction = requireNonNull(prestoAction, \"prestoAction is null\");\n         this.enabled = enabled;\n+        this.statement = requireNonNull(statement, \"statement is null\");\n+        this.rowCount = rowCount;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2f984fd6fdc0cdf063d5de1cff6908711ebe17a"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4ODIxMjUwOnYy", "diffSide": "RIGHT", "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/framework/LimitQueryDeterminismAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMDowMjoxMlrOFvviSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMToyNDozMFrOFwDPWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYwNjIxOA==", "bodyText": "nit: move Pattern.compile(\"all\", CASE_INSENSITIVE) into a static variable to avoid re-compiling on each call", "url": "https://github.com/prestodb/presto/pull/14176#discussion_r385606218", "createdAt": "2020-02-28T10:02:12Z", "author": {"login": "mbasmanova"}, "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/framework/LimitQueryDeterminismAnalyzer.java", "diffHunk": "@@ -135,29 +148,34 @@ private LimitQueryDeterminismAnalysis analyzeQuerySpecification(Optional<With> w\n                         querySpecification.getGroupBy(),\n                         querySpecification.getHaving(),\n                         Optional.empty(),\n-                        Optional.empty()),\n+                        newLimit),\n                 Optional.empty(),\n                 Optional.empty());\n-        return analyzeLimitNoOrderBy(queryNoLimit);\n+        return analyzeLimitNoOrderBy(newLimitQuery, limit);\n     }\n \n-    private LimitQueryDeterminismAnalysis analyzeLimitNoOrderBy(Query queryNoLimit)\n+    private LimitQueryDeterminismAnalysis analyzeLimitNoOrderBy(Query newLimitQuery, long limit)\n     {\n         Query rowCountQuery = simpleQuery(\n                 new Select(false, ImmutableList.of(new SingleColumn(new FunctionCall(QualifiedName.of(\"count\"), ImmutableList.of(new LongLiteral(\"1\")))))),\n-                new TableSubquery(queryNoLimit));\n+                new TableSubquery(newLimitQuery));\n \n         QueryResult<Long> result = callWithQueryStatsConsumer(\n                 () -> prestoAction.execute(rowCountQuery, DETERMINISM_ANALYSIS, resultSet -> resultSet.getLong(1)),\n                 stats -> verificationContext.setLimitQueryAnalysisQueryId(stats.getQueryId()));\n \n         long rowCountNoLimit = getOnlyElement(result.getResults());\n-        if (rowCountNoLimit > rowCount) {\n-            return NON_DETERMINISTIC;\n-        }\n         if (rowCountNoLimit == rowCount) {\n             return DETERMINISTIC;\n         }\n+        if (rowCount >= limit && rowCountNoLimit > rowCount) {\n+            return NON_DETERMINISTIC;\n+        }\n         return FAILED_DATA_CHANGED;\n     }\n+\n+    private static boolean isLimitAll(String limitClause)\n+    {\n+        return Pattern.compile(\"all\", CASE_INSENSITIVE).matcher(limitClause).matches();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bd1d7eee241c576eb9e39ed75ffb0bbadcec396"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTkyOTA0OA==", "bodyText": "Replaced with a simpler implementation:\nlimitClause.toLowerCase(ENGLISH).equals(\"all\");", "url": "https://github.com/prestodb/presto/pull/14176#discussion_r385929048", "createdAt": "2020-02-28T21:24:30Z", "author": {"login": "caithagoras"}, "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/framework/LimitQueryDeterminismAnalyzer.java", "diffHunk": "@@ -135,29 +148,34 @@ private LimitQueryDeterminismAnalysis analyzeQuerySpecification(Optional<With> w\n                         querySpecification.getGroupBy(),\n                         querySpecification.getHaving(),\n                         Optional.empty(),\n-                        Optional.empty()),\n+                        newLimit),\n                 Optional.empty(),\n                 Optional.empty());\n-        return analyzeLimitNoOrderBy(queryNoLimit);\n+        return analyzeLimitNoOrderBy(newLimitQuery, limit);\n     }\n \n-    private LimitQueryDeterminismAnalysis analyzeLimitNoOrderBy(Query queryNoLimit)\n+    private LimitQueryDeterminismAnalysis analyzeLimitNoOrderBy(Query newLimitQuery, long limit)\n     {\n         Query rowCountQuery = simpleQuery(\n                 new Select(false, ImmutableList.of(new SingleColumn(new FunctionCall(QualifiedName.of(\"count\"), ImmutableList.of(new LongLiteral(\"1\")))))),\n-                new TableSubquery(queryNoLimit));\n+                new TableSubquery(newLimitQuery));\n \n         QueryResult<Long> result = callWithQueryStatsConsumer(\n                 () -> prestoAction.execute(rowCountQuery, DETERMINISM_ANALYSIS, resultSet -> resultSet.getLong(1)),\n                 stats -> verificationContext.setLimitQueryAnalysisQueryId(stats.getQueryId()));\n \n         long rowCountNoLimit = getOnlyElement(result.getResults());\n-        if (rowCountNoLimit > rowCount) {\n-            return NON_DETERMINISTIC;\n-        }\n         if (rowCountNoLimit == rowCount) {\n             return DETERMINISTIC;\n         }\n+        if (rowCount >= limit && rowCountNoLimit > rowCount) {\n+            return NON_DETERMINISTIC;\n+        }\n         return FAILED_DATA_CHANGED;\n     }\n+\n+    private static boolean isLimitAll(String limitClause)\n+    {\n+        return Pattern.compile(\"all\", CASE_INSENSITIVE).matcher(limitClause).matches();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYwNjIxOA=="}, "originalCommit": {"oid": "6bd1d7eee241c576eb9e39ed75ffb0bbadcec396"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4ODIxODI1OnYy", "diffSide": "RIGHT", "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/framework/LimitQueryDeterminismAnalyzer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMDowMzo1NlrOFvvlug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMDowMzo1NlrOFvvlug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYwNzA5OA==", "bodyText": "nit: perhaps, rename rowCountNoLimit to avoid suggesting that the query had no limit, but rather a higher limit\nrowCountHigherLimit", "url": "https://github.com/prestodb/presto/pull/14176#discussion_r385607098", "createdAt": "2020-02-28T10:03:56Z", "author": {"login": "mbasmanova"}, "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/framework/LimitQueryDeterminismAnalyzer.java", "diffHunk": "@@ -135,29 +148,34 @@ private LimitQueryDeterminismAnalysis analyzeQuerySpecification(Optional<With> w\n                         querySpecification.getGroupBy(),\n                         querySpecification.getHaving(),\n                         Optional.empty(),\n-                        Optional.empty()),\n+                        newLimit),\n                 Optional.empty(),\n                 Optional.empty());\n-        return analyzeLimitNoOrderBy(queryNoLimit);\n+        return analyzeLimitNoOrderBy(newLimitQuery, limit);\n     }\n \n-    private LimitQueryDeterminismAnalysis analyzeLimitNoOrderBy(Query queryNoLimit)\n+    private LimitQueryDeterminismAnalysis analyzeLimitNoOrderBy(Query newLimitQuery, long limit)\n     {\n         Query rowCountQuery = simpleQuery(\n                 new Select(false, ImmutableList.of(new SingleColumn(new FunctionCall(QualifiedName.of(\"count\"), ImmutableList.of(new LongLiteral(\"1\")))))),\n-                new TableSubquery(queryNoLimit));\n+                new TableSubquery(newLimitQuery));\n \n         QueryResult<Long> result = callWithQueryStatsConsumer(\n                 () -> prestoAction.execute(rowCountQuery, DETERMINISM_ANALYSIS, resultSet -> resultSet.getLong(1)),\n                 stats -> verificationContext.setLimitQueryAnalysisQueryId(stats.getQueryId()));\n \n         long rowCountNoLimit = getOnlyElement(result.getResults());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bd1d7eee241c576eb9e39ed75ffb0bbadcec396"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3114, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}