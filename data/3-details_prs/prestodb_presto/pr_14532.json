{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4MjQ2NTU5", "number": 14532, "title": "Analyze table fails for tables with struct columns", "bodyText": "This PR filters out non-primitive column types when creating metastore column statistics. This fixes the issue of ANALYZE failing on tables due to the check here\nFixes #14494\n== RELEASE NOTES ==\n\nHive Changes\n* Fix  ANALYZE table_name failure for tables with map, list or struct columns (:issue:`14494`).", "createdAt": "2020-05-14T21:06:35Z", "url": "https://github.com/prestodb/presto/pull/14532", "merged": true, "mergeCommit": {"oid": "c89a8e3579689fa3ad15cbed245702cc917a169c"}, "closed": true, "closedAt": "2020-05-19T18:04:45Z", "author": {"login": "sujay-jain"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABchVOcdABqjMzMzg2NjAyNTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABci2UcvgBqjMzNTI0Nzg3ODY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "de6fc75d1dd4127898d70cb5997edebbf560ee1b", "author": {"user": {"login": "sujay-jain", "name": null}}, "url": "https://github.com/prestodb/presto/commit/de6fc75d1dd4127898d70cb5997edebbf560ee1b", "committedDate": "2020-05-14T19:09:41Z", "message": "analyze fails for struct columns"}, "afterCommit": {"oid": "5996215ea4cfe09a21194ab26d1c18d23a6f7abb", "author": {"user": {"login": "sujay-jain", "name": null}}, "url": "https://github.com/prestodb/presto/commit/5996215ea4cfe09a21194ab26d1c18d23a6f7abb", "committedDate": "2020-05-14T22:16:58Z", "message": "Allow struct and map types in metastore column statistics\n\nThis commit removes the primitive requirement check and allows\nstruct and map types. This  was causing ANALYZE to fail\non tables with struct columns."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyMjcxNDQ4", "url": "https://github.com/prestodb/presto/pull/14532#pullrequestreview-412271448", "createdAt": "2020-05-15T00:28:05Z", "commit": {"oid": "5996215ea4cfe09a21194ab26d1c18d23a6f7abb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMDoyODowNlrOGVyi9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMDoyODowNlrOGVyi9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUwMTQzMQ==", "bodyText": "this can just be if, as we have a sure return in the top if condition", "url": "https://github.com/prestodb/presto/pull/14532#discussion_r425501431", "createdAt": "2020-05-15T00:28:06Z", "author": {"login": "bhhari"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/thrift/ThriftMetastoreUtil.java", "diffHunk": "@@ -691,32 +693,39 @@ private static StorageDescriptor makeStorageDescriptor(String tableName, List<Co\n     public static ColumnStatisticsObj createMetastoreColumnStatistics(String columnName, HiveType columnType, HiveColumnStatistics statistics, OptionalLong rowCount)\n     {\n         TypeInfo typeInfo = columnType.getTypeInfo();\n-        checkArgument(typeInfo.getCategory() == PRIMITIVE, \"unsupported type: %s\", columnType);\n-        switch (((PrimitiveTypeInfo) typeInfo).getPrimitiveCategory()) {\n-            case BOOLEAN:\n-                return createBooleanStatistics(columnName, columnType, statistics);\n-            case BYTE:\n-            case SHORT:\n-            case INT:\n-            case LONG:\n-                return createLongStatistics(columnName, columnType, statistics);\n-            case FLOAT:\n-            case DOUBLE:\n-                return createDoubleStatistics(columnName, columnType, statistics);\n-            case STRING:\n-            case VARCHAR:\n-            case CHAR:\n-                return createStringStatistics(columnName, columnType, statistics, rowCount);\n-            case DATE:\n-                return createDateStatistics(columnName, columnType, statistics);\n-            case TIMESTAMP:\n-                return createLongStatistics(columnName, columnType, statistics);\n-            case BINARY:\n-                return createBinaryStatistics(columnName, columnType, statistics, rowCount);\n-            case DECIMAL:\n-                return createDecimalStatistics(columnName, columnType, statistics);\n-            default:\n-                throw new IllegalArgumentException(format(\"unsupported type: %s\", columnType));\n+        if (typeInfo.getCategory() == PRIMITIVE) {\n+            switch (((PrimitiveTypeInfo) typeInfo).getPrimitiveCategory()) {\n+                case BOOLEAN:\n+                    return createBooleanStatistics(columnName, columnType, statistics);\n+                case BYTE:\n+                case SHORT:\n+                case INT:\n+                case LONG:\n+                    return createLongStatistics(columnName, columnType, statistics);\n+                case FLOAT:\n+                case DOUBLE:\n+                    return createDoubleStatistics(columnName, columnType, statistics);\n+                case STRING:\n+                case VARCHAR:\n+                case CHAR:\n+                    return createStringStatistics(columnName, columnType, statistics, rowCount);\n+                case DATE:\n+                    return createDateStatistics(columnName, columnType, statistics);\n+                case TIMESTAMP:\n+                    return createLongStatistics(columnName, columnType, statistics);\n+                case BINARY:\n+                    return createBinaryStatistics(columnName, columnType, statistics, rowCount);\n+                case DECIMAL:\n+                    return createDecimalStatistics(columnName, columnType, statistics);\n+                default:\n+                    throw new IllegalArgumentException(format(\"unsupported type: %s\", columnType));\n+            }\n+        }\n+        else if (typeInfo.getCategory() == STRUCT || typeInfo.getCategory() == MAP) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5996215ea4cfe09a21194ab26d1c18d23a6f7abb"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyMjcxNTMy", "url": "https://github.com/prestodb/presto/pull/14532#pullrequestreview-412271532", "createdAt": "2020-05-15T00:28:25Z", "commit": {"oid": "5996215ea4cfe09a21194ab26d1c18d23a6f7abb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMDoyODoyNVrOGVyjNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMDoyODoyNVrOGVyjNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUwMTQ5NQ==", "bodyText": "no need of this else", "url": "https://github.com/prestodb/presto/pull/14532#discussion_r425501495", "createdAt": "2020-05-15T00:28:25Z", "author": {"login": "bhhari"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/thrift/ThriftMetastoreUtil.java", "diffHunk": "@@ -691,32 +693,39 @@ private static StorageDescriptor makeStorageDescriptor(String tableName, List<Co\n     public static ColumnStatisticsObj createMetastoreColumnStatistics(String columnName, HiveType columnType, HiveColumnStatistics statistics, OptionalLong rowCount)\n     {\n         TypeInfo typeInfo = columnType.getTypeInfo();\n-        checkArgument(typeInfo.getCategory() == PRIMITIVE, \"unsupported type: %s\", columnType);\n-        switch (((PrimitiveTypeInfo) typeInfo).getPrimitiveCategory()) {\n-            case BOOLEAN:\n-                return createBooleanStatistics(columnName, columnType, statistics);\n-            case BYTE:\n-            case SHORT:\n-            case INT:\n-            case LONG:\n-                return createLongStatistics(columnName, columnType, statistics);\n-            case FLOAT:\n-            case DOUBLE:\n-                return createDoubleStatistics(columnName, columnType, statistics);\n-            case STRING:\n-            case VARCHAR:\n-            case CHAR:\n-                return createStringStatistics(columnName, columnType, statistics, rowCount);\n-            case DATE:\n-                return createDateStatistics(columnName, columnType, statistics);\n-            case TIMESTAMP:\n-                return createLongStatistics(columnName, columnType, statistics);\n-            case BINARY:\n-                return createBinaryStatistics(columnName, columnType, statistics, rowCount);\n-            case DECIMAL:\n-                return createDecimalStatistics(columnName, columnType, statistics);\n-            default:\n-                throw new IllegalArgumentException(format(\"unsupported type: %s\", columnType));\n+        if (typeInfo.getCategory() == PRIMITIVE) {\n+            switch (((PrimitiveTypeInfo) typeInfo).getPrimitiveCategory()) {\n+                case BOOLEAN:\n+                    return createBooleanStatistics(columnName, columnType, statistics);\n+                case BYTE:\n+                case SHORT:\n+                case INT:\n+                case LONG:\n+                    return createLongStatistics(columnName, columnType, statistics);\n+                case FLOAT:\n+                case DOUBLE:\n+                    return createDoubleStatistics(columnName, columnType, statistics);\n+                case STRING:\n+                case VARCHAR:\n+                case CHAR:\n+                    return createStringStatistics(columnName, columnType, statistics, rowCount);\n+                case DATE:\n+                    return createDateStatistics(columnName, columnType, statistics);\n+                case TIMESTAMP:\n+                    return createLongStatistics(columnName, columnType, statistics);\n+                case BINARY:\n+                    return createBinaryStatistics(columnName, columnType, statistics, rowCount);\n+                case DECIMAL:\n+                    return createDecimalStatistics(columnName, columnType, statistics);\n+                default:\n+                    throw new IllegalArgumentException(format(\"unsupported type: %s\", columnType));\n+            }\n+        }\n+        else if (typeInfo.getCategory() == STRUCT || typeInfo.getCategory() == MAP) {\n+            return new ColumnStatisticsObj();\n+        }\n+        else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5996215ea4cfe09a21194ab26d1c18d23a6f7abb"}, "originalPosition": 71}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyMjcxNjg0", "url": "https://github.com/prestodb/presto/pull/14532#pullrequestreview-412271684", "createdAt": "2020-05-15T00:28:54Z", "commit": {"oid": "5996215ea4cfe09a21194ab26d1c18d23a6f7abb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyMzUxNzE5", "url": "https://github.com/prestodb/presto/pull/14532#pullrequestreview-412351719", "createdAt": "2020-05-15T05:12:20Z", "commit": {"oid": "5996215ea4cfe09a21194ab26d1c18d23a6f7abb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNToxMjoyMFrOGV2t0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNToxMjoyMFrOGV2t0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU2OTc0NA==", "bodyText": "It looks like we only return an empty stats object now. I'm curious if we will be filling up the actual stats for structs and maps? How does the analyze result look like now with this change? Does it just leave that part empty? Is it possible to attach a printout of the result of it here?", "url": "https://github.com/prestodb/presto/pull/14532#discussion_r425569744", "createdAt": "2020-05-15T05:12:20Z", "author": {"login": "yingsu00"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/thrift/ThriftMetastoreUtil.java", "diffHunk": "@@ -691,32 +693,39 @@ private static StorageDescriptor makeStorageDescriptor(String tableName, List<Co\n     public static ColumnStatisticsObj createMetastoreColumnStatistics(String columnName, HiveType columnType, HiveColumnStatistics statistics, OptionalLong rowCount)\n     {\n         TypeInfo typeInfo = columnType.getTypeInfo();\n-        checkArgument(typeInfo.getCategory() == PRIMITIVE, \"unsupported type: %s\", columnType);\n-        switch (((PrimitiveTypeInfo) typeInfo).getPrimitiveCategory()) {\n-            case BOOLEAN:\n-                return createBooleanStatistics(columnName, columnType, statistics);\n-            case BYTE:\n-            case SHORT:\n-            case INT:\n-            case LONG:\n-                return createLongStatistics(columnName, columnType, statistics);\n-            case FLOAT:\n-            case DOUBLE:\n-                return createDoubleStatistics(columnName, columnType, statistics);\n-            case STRING:\n-            case VARCHAR:\n-            case CHAR:\n-                return createStringStatistics(columnName, columnType, statistics, rowCount);\n-            case DATE:\n-                return createDateStatistics(columnName, columnType, statistics);\n-            case TIMESTAMP:\n-                return createLongStatistics(columnName, columnType, statistics);\n-            case BINARY:\n-                return createBinaryStatistics(columnName, columnType, statistics, rowCount);\n-            case DECIMAL:\n-                return createDecimalStatistics(columnName, columnType, statistics);\n-            default:\n-                throw new IllegalArgumentException(format(\"unsupported type: %s\", columnType));\n+        if (typeInfo.getCategory() == PRIMITIVE) {\n+            switch (((PrimitiveTypeInfo) typeInfo).getPrimitiveCategory()) {\n+                case BOOLEAN:\n+                    return createBooleanStatistics(columnName, columnType, statistics);\n+                case BYTE:\n+                case SHORT:\n+                case INT:\n+                case LONG:\n+                    return createLongStatistics(columnName, columnType, statistics);\n+                case FLOAT:\n+                case DOUBLE:\n+                    return createDoubleStatistics(columnName, columnType, statistics);\n+                case STRING:\n+                case VARCHAR:\n+                case CHAR:\n+                    return createStringStatistics(columnName, columnType, statistics, rowCount);\n+                case DATE:\n+                    return createDateStatistics(columnName, columnType, statistics);\n+                case TIMESTAMP:\n+                    return createLongStatistics(columnName, columnType, statistics);\n+                case BINARY:\n+                    return createBinaryStatistics(columnName, columnType, statistics, rowCount);\n+                case DECIMAL:\n+                    return createDecimalStatistics(columnName, columnType, statistics);\n+                default:\n+                    throw new IllegalArgumentException(format(\"unsupported type: %s\", columnType));\n+            }\n+        }\n+        else if (typeInfo.getCategory() == STRUCT || typeInfo.getCategory() == MAP) {\n+            return new ColumnStatisticsObj();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5996215ea4cfe09a21194ab26d1c18d23a6f7abb"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyMzU4OTc4", "url": "https://github.com/prestodb/presto/pull/14532#pullrequestreview-412358978", "createdAt": "2020-05-15T05:36:02Z", "commit": {"oid": "5996215ea4cfe09a21194ab26d1c18d23a6f7abb"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5996215ea4cfe09a21194ab26d1c18d23a6f7abb", "author": {"user": {"login": "sujay-jain", "name": null}}, "url": "https://github.com/prestodb/presto/commit/5996215ea4cfe09a21194ab26d1c18d23a6f7abb", "committedDate": "2020-05-14T22:16:58Z", "message": "Allow struct and map types in metastore column statistics\n\nThis commit removes the primitive requirement check and allows\nstruct and map types. This  was causing ANALYZE to fail\non tables with struct columns."}, "afterCommit": {"oid": "384e8e6e8b5b45820ba0378c9c70a5c79dd4c8c8", "author": {"user": {"login": "sujay-jain", "name": null}}, "url": "https://github.com/prestodb/presto/commit/384e8e6e8b5b45820ba0378c9c70a5c79dd4c8c8", "committedDate": "2020-05-15T16:26:27Z", "message": "Allow struct and map types in metastore column statistics\n\nThis commit removes the primitive requirement check and allows\nstruct and map types. This  was causing ANALYZE to fail\non tables with struct columns."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyODcxMjQy", "url": "https://github.com/prestodb/presto/pull/14532#pullrequestreview-412871242", "createdAt": "2020-05-15T18:23:03Z", "commit": {"oid": "384e8e6e8b5b45820ba0378c9c70a5c79dd4c8c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxODoyMzowNFrOGWPXOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxODoyMzowNFrOGWPXOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk3MzU2Mg==", "bodyText": "@sujay-jain LIST type needs to be handled as well, right? Otherwise ANALYZE will fail on tables with columns of array/list type.", "url": "https://github.com/prestodb/presto/pull/14532#discussion_r425973562", "createdAt": "2020-05-15T18:23:04Z", "author": {"login": "mbasmanova"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/thrift/ThriftMetastoreUtil.java", "diffHunk": "@@ -691,33 +693,40 @@ private static StorageDescriptor makeStorageDescriptor(String tableName, List<Co\n     public static ColumnStatisticsObj createMetastoreColumnStatistics(String columnName, HiveType columnType, HiveColumnStatistics statistics, OptionalLong rowCount)\n     {\n         TypeInfo typeInfo = columnType.getTypeInfo();\n-        checkArgument(typeInfo.getCategory() == PRIMITIVE, \"unsupported type: %s\", columnType);\n-        switch (((PrimitiveTypeInfo) typeInfo).getPrimitiveCategory()) {\n-            case BOOLEAN:\n-                return createBooleanStatistics(columnName, columnType, statistics);\n-            case BYTE:\n-            case SHORT:\n-            case INT:\n-            case LONG:\n-                return createLongStatistics(columnName, columnType, statistics);\n-            case FLOAT:\n-            case DOUBLE:\n-                return createDoubleStatistics(columnName, columnType, statistics);\n-            case STRING:\n-            case VARCHAR:\n-            case CHAR:\n-                return createStringStatistics(columnName, columnType, statistics, rowCount);\n-            case DATE:\n-                return createDateStatistics(columnName, columnType, statistics);\n-            case TIMESTAMP:\n-                return createLongStatistics(columnName, columnType, statistics);\n-            case BINARY:\n-                return createBinaryStatistics(columnName, columnType, statistics, rowCount);\n-            case DECIMAL:\n-                return createDecimalStatistics(columnName, columnType, statistics);\n-            default:\n-                throw new IllegalArgumentException(format(\"unsupported type: %s\", columnType));\n+        if (typeInfo.getCategory() == PRIMITIVE) {\n+            switch (((PrimitiveTypeInfo) typeInfo).getPrimitiveCategory()) {\n+                case BOOLEAN:\n+                    return createBooleanStatistics(columnName, columnType, statistics);\n+                case BYTE:\n+                case SHORT:\n+                case INT:\n+                case LONG:\n+                    return createLongStatistics(columnName, columnType, statistics);\n+                case FLOAT:\n+                case DOUBLE:\n+                    return createDoubleStatistics(columnName, columnType, statistics);\n+                case STRING:\n+                case VARCHAR:\n+                case CHAR:\n+                    return createStringStatistics(columnName, columnType, statistics, rowCount);\n+                case DATE:\n+                    return createDateStatistics(columnName, columnType, statistics);\n+                case TIMESTAMP:\n+                    return createLongStatistics(columnName, columnType, statistics);\n+                case BINARY:\n+                    return createBinaryStatistics(columnName, columnType, statistics, rowCount);\n+                case DECIMAL:\n+                    return createDecimalStatistics(columnName, columnType, statistics);\n+                default:\n+                    throw new IllegalArgumentException(format(\"unsupported type: %s\", columnType));\n+            }\n         }\n+\n+        if (typeInfo.getCategory() == STRUCT || typeInfo.getCategory() == MAP) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "384e8e6e8b5b45820ba0378c9c70a5c79dd4c8c8"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyODcyMzUy", "url": "https://github.com/prestodb/presto/pull/14532#pullrequestreview-412872352", "createdAt": "2020-05-15T18:24:48Z", "commit": {"oid": "384e8e6e8b5b45820ba0378c9c70a5c79dd4c8c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxODoyNDo0OFrOGWPacA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxODoyNDo0OFrOGWPacA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk3NDM4NA==", "bodyText": "@sujay-jain Would you also add end-to-end test to TestHiveTableStatistics?", "url": "https://github.com/prestodb/presto/pull/14532#discussion_r425974384", "createdAt": "2020-05-15T18:24:48Z", "author": {"login": "mbasmanova"}, "path": "presto-hive-metastore/src/test/java/com/facebook/presto/hive/metastore/thrift/TestThriftHiveMetastoreUtil.java", "diffHunk": "@@ -371,6 +373,13 @@ public void testBasicStatisticsRoundTrip()\n         testBasicStatisticsRoundTrip(new HiveBasicStatistics(OptionalLong.of(1), OptionalLong.of(2), OptionalLong.of(3), OptionalLong.of(4)));\n     }\n \n+    @Test\n+    public void testCreateMetastoreColumnStatisticsComplexTypes()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "384e8e6e8b5b45820ba0378c9c70a5c79dd4c8c8"}, "originalPosition": 21}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "384e8e6e8b5b45820ba0378c9c70a5c79dd4c8c8", "author": {"user": {"login": "sujay-jain", "name": null}}, "url": "https://github.com/prestodb/presto/commit/384e8e6e8b5b45820ba0378c9c70a5c79dd4c8c8", "committedDate": "2020-05-15T16:26:27Z", "message": "Allow struct and map types in metastore column statistics\n\nThis commit removes the primitive requirement check and allows\nstruct and map types. This  was causing ANALYZE to fail\non tables with struct columns."}, "afterCommit": {"oid": "28524e24a8e4490cb5c5565e93fee1dff012a224", "author": {"user": {"login": "sujay-jain", "name": null}}, "url": "https://github.com/prestodb/presto/commit/28524e24a8e4490cb5c5565e93fee1dff012a224", "committedDate": "2020-05-19T07:54:20Z", "message": "Filter out non primitive columns when creating metastore column statictics\n\nThis commit filters out columns of non primitive types\nwhich was causing ANALYZE to fail on tables with struct columns."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "28524e24a8e4490cb5c5565e93fee1dff012a224", "author": {"user": {"login": "sujay-jain", "name": null}}, "url": "https://github.com/prestodb/presto/commit/28524e24a8e4490cb5c5565e93fee1dff012a224", "committedDate": "2020-05-19T07:54:20Z", "message": "Filter out non primitive columns when creating metastore column statictics\n\nThis commit filters out columns of non primitive types\nwhich was causing ANALYZE to fail on tables with struct columns."}, "afterCommit": {"oid": "672aa0095574fe0b2b36b0142b66ed4d075e8a43", "author": {"user": {"login": "sujay-jain", "name": null}}, "url": "https://github.com/prestodb/presto/commit/672aa0095574fe0b2b36b0142b66ed4d075e8a43", "committedDate": "2020-05-19T08:03:41Z", "message": "Filter out non primitive columns when creating metastore column statictics\n\nThis commit filters out columns of non primitive types\nwhich was causing ANALYZE to fail on tables with struct columns."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0NDY2OTg3", "url": "https://github.com/prestodb/presto/pull/14532#pullrequestreview-414466987", "createdAt": "2020-05-19T13:52:14Z", "commit": {"oid": "672aa0095574fe0b2b36b0142b66ed4d075e8a43"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0NTU3OTAx", "url": "https://github.com/prestodb/presto/pull/14532#pullrequestreview-414557901", "createdAt": "2020-05-19T15:20:02Z", "commit": {"oid": "672aa0095574fe0b2b36b0142b66ed4d075e8a43"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97d9d307659fc2dbd3263f78ffcbcfe8ec2b0ad5", "author": {"user": {"login": "sujay-jain", "name": null}}, "url": "https://github.com/prestodb/presto/commit/97d9d307659fc2dbd3263f78ffcbcfe8ec2b0ad5", "committedDate": "2020-05-19T15:36:08Z", "message": "Filter out non primitive columns when creating metastore column statictics\n\nThis commit filters out columns of non primitive types\nwhich was causing ANALYZE to fail on tables with struct columns."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "672aa0095574fe0b2b36b0142b66ed4d075e8a43", "author": {"user": {"login": "sujay-jain", "name": null}}, "url": "https://github.com/prestodb/presto/commit/672aa0095574fe0b2b36b0142b66ed4d075e8a43", "committedDate": "2020-05-19T08:03:41Z", "message": "Filter out non primitive columns when creating metastore column statictics\n\nThis commit filters out columns of non primitive types\nwhich was causing ANALYZE to fail on tables with struct columns."}, "afterCommit": {"oid": "97d9d307659fc2dbd3263f78ffcbcfe8ec2b0ad5", "author": {"user": {"login": "sujay-jain", "name": null}}, "url": "https://github.com/prestodb/presto/commit/97d9d307659fc2dbd3263f78ffcbcfe8ec2b0ad5", "committedDate": "2020-05-19T15:36:08Z", "message": "Filter out non primitive columns when creating metastore column statictics\n\nThis commit filters out columns of non primitive types\nwhich was causing ANALYZE to fail on tables with struct columns."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1650, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}