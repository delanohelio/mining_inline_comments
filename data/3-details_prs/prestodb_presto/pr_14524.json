{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3Njg1MTAz", "number": 14524, "title": "canonicalize body of LambdaDefinitionExpression", "bodyText": "For two LambdaDefinitionExpressions if their input argument types are the same and how arguments are used are the same, they should be considered the same and can use the same generated bytecode.\n== NO RELEASE NOTE ==", "createdAt": "2020-05-14T00:39:02Z", "url": "https://github.com/prestodb/presto/pull/14524", "merged": true, "mergeCommit": {"oid": "c6f1cbc8fa318d773b8899f97155a9380d6bea84"}, "closed": true, "closedAt": "2020-06-15T22:01:49Z", "author": {"login": "rongrong"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABchCjLYgFqTQxMTM5MTk4Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcrmHfaABqjM0NDU5MjE2Njk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMzkxOTgz", "url": "https://github.com/prestodb/presto/pull/14524#pullrequestreview-411391983", "createdAt": "2020-05-14T00:43:48Z", "commit": {"oid": "ba1dc02c42a5f57a832d6d89eb3aad3770035b48"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwMDo0Mzo0OVrOGVISkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwMDo0Mzo0OVrOGVISkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDgwOTEwNw==", "bodyText": "literal.toString() doesn't work very well here because it would just write string literals as Slice[...]. I want to preserve the equals trait of literals. Better suggestions are welcome.", "url": "https://github.com/prestodb/presto/pull/14524#discussion_r424809107", "createdAt": "2020-05-14T00:43:49Z", "author": {"login": "rongrong"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/relation/LambdaDefinitionExpression.java", "diffHunk": "@@ -111,4 +115,55 @@ private static void checkArgument(boolean condition, String message, Object... m\n             throw new IllegalArgumentException(format(message, messageArgs));\n         }\n     }\n+    private static class CanonicalizeExpression\n+            implements RowExpressionVisitor<String, Void>\n+{\n+        private final Map<String, String> canonicalizedArguments = new HashMap<>();\n+\n+        public CanonicalizeExpression(List<String> arguments, List<Type> argumentTypes)\n+        {\n+            for (int i = 0; i < arguments.size(); i++) {\n+                canonicalizedArguments.put(arguments.get(i), format(\"%s_%d\", argumentTypes.get(i).toString(), i));\n+            }\n+        }\n+\n+        @Override\n+        public String visitCall(CallExpression call, Void context)\n+        {\n+            return format(\"%s(%s)\", call.getDisplayName(), String.join(\", \", call.getArguments().stream().map(e -> e.accept(this, null)).collect(Collectors.toList())));\n+        }\n+\n+        @Override\n+        public String visitInputReference(InputReferenceExpression reference, Void context)\n+        {\n+            return reference.toString();\n+        }\n+\n+        @Override\n+        public String visitConstant(ConstantExpression literal, Void context)\n+        {\n+            return format(\"%d\", literal.hashCode());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba1dc02c42a5f57a832d6d89eb3aad3770035b48"}, "originalPosition": 76}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ba1dc02c42a5f57a832d6d89eb3aad3770035b48", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/ba1dc02c42a5f57a832d6d89eb3aad3770035b48", "committedDate": "2020-05-14T00:38:41Z", "message": "Canonicalize body of LambdaDefinitionExpression\n\nFor two LambdaDefinitionExpressions if their input argument types are the same and how arguments are used\nare the same, they should be considered the same and can use the same generated bytecode."}, "afterCommit": {"oid": "6029a0a62d98b31d12a23583f0900dc9ba326968", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/6029a0a62d98b31d12a23583f0900dc9ba326968", "committedDate": "2020-05-14T01:00:58Z", "message": "Canonicalize body of LambdaDefinitionExpression\n\nFor two LambdaDefinitionExpressions if their input argument types are the same and how arguments are used\nare the same, they should be considered the same and can use the same generated bytecode."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMTM1NDMy", "url": "https://github.com/prestodb/presto/pull/14524#pullrequestreview-413135432", "createdAt": "2020-05-17T07:36:55Z", "commit": {"oid": "6029a0a62d98b31d12a23583f0900dc9ba326968"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwNzozNjo1NVrOGWe8Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwNzo1MDowOFrOGWfAag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIyODc2Mg==", "bodyText": "This is too dangerous, isn't it? int32 hash collision is pretty high.", "url": "https://github.com/prestodb/presto/pull/14524#discussion_r426228762", "createdAt": "2020-05-17T07:36:55Z", "author": {"login": "highker"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/relation/LambdaDefinitionExpression.java", "diffHunk": "@@ -111,4 +115,55 @@ private static void checkArgument(boolean condition, String message, Object... m\n             throw new IllegalArgumentException(format(message, messageArgs));\n         }\n     }\n+    private static class CanonicalizeExpression\n+            implements RowExpressionVisitor<String, Void>\n+{\n+        private final Map<String, String> canonicalizedArguments = new HashMap<>();\n+\n+        public CanonicalizeExpression(List<String> arguments, List<Type> argumentTypes)\n+        {\n+            for (int i = 0; i < arguments.size(); i++) {\n+                canonicalizedArguments.put(arguments.get(i), format(\"%s_%d\", argumentTypes.get(i).toString(), i));\n+            }\n+        }\n+\n+        @Override\n+        public String visitCall(CallExpression call, Void context)\n+        {\n+            return format(\"%s(%s)\", call.getDisplayName(), String.join(\", \", call.getArguments().stream().map(e -> e.accept(this, null)).collect(Collectors.toList())));\n+        }\n+\n+        @Override\n+        public String visitInputReference(InputReferenceExpression reference, Void context)\n+        {\n+            return reference.toString();\n+        }\n+\n+        @Override\n+        public String visitConstant(ConstantExpression literal, Void context)\n+        {\n+            return format(\"%d\", literal.hashCode());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDgwOTEwNw=="}, "originalCommit": {"oid": "ba1dc02c42a5f57a832d6d89eb3aad3770035b48"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIyOTU4MA==", "bodyText": "Will this handle duplicated variables with the same name in different scopes?\nSELECT\n    TRANSFORM(elements, v -> REDUCE(v, 0, (s, v) -> s + v, s -> s)) AS multiplied_elements\nFROM (\n    VALUES\n        (ARRAY[ARRAY[1, 2]]),\n        (ARRAY[ARRAY[1, 2]]),\n        (ARRAY[ARRAY[1, 2]])\n) AS t(elements)", "url": "https://github.com/prestodb/presto/pull/14524#discussion_r426229580", "createdAt": "2020-05-17T07:46:27Z", "author": {"login": "highker"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/relation/LambdaDefinitionExpression.java", "diffHunk": "@@ -111,4 +115,55 @@ private static void checkArgument(boolean condition, String message, Object... m\n             throw new IllegalArgumentException(format(message, messageArgs));\n         }\n     }\n+    private static class CanonicalizeExpression\n+            implements RowExpressionVisitor<String, Void>\n+    {\n+        private final Map<String, String> canonicalizedArguments = new HashMap<>();\n+\n+        public CanonicalizeExpression(List<String> arguments, List<Type> argumentTypes)\n+        {\n+            for (int i = 0; i < arguments.size(); i++) {\n+                canonicalizedArguments.put(arguments.get(i), format(\"%s_%d\", argumentTypes.get(i).toString(), i));\n+            }\n+        }\n+\n+        @Override\n+        public String visitCall(CallExpression call, Void context)\n+        {\n+            return format(\"%s(%s)\", call.getDisplayName(), String.join(\", \", call.getArguments().stream().map(e -> e.accept(this, null)).collect(Collectors.toList())));\n+        }\n+\n+        @Override\n+        public String visitInputReference(InputReferenceExpression reference, Void context)\n+        {\n+            return reference.toString();\n+        }\n+\n+        @Override\n+        public String visitConstant(ConstantExpression literal, Void context)\n+        {\n+            return format(\"%d\", literal.hashCode());\n+        }\n+\n+        @Override\n+        public String visitLambda(LambdaDefinitionExpression lambda, Void context)\n+        {\n+            return format(\"(%s) -> %s\", String.join(\", \", lambda.argumentTypes.stream().map(Type::toString).collect(Collectors.toList())), lambda.body.accept(this, null));\n+        }\n+\n+        @Override\n+        public String visitVariableReference(VariableReferenceExpression reference, Void context)\n+        {\n+            if (canonicalizedArguments.containsKey(reference.getName())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6029a0a62d98b31d12a23583f0900dc9ba326968"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIyOTg2Ng==", "bodyText": "What if someone defines a variable called bigint_2 in the lambda body. Will that cause a collision?", "url": "https://github.com/prestodb/presto/pull/14524#discussion_r426229866", "createdAt": "2020-05-17T07:50:08Z", "author": {"login": "highker"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/relation/LambdaDefinitionExpression.java", "diffHunk": "@@ -111,4 +115,55 @@ private static void checkArgument(boolean condition, String message, Object... m\n             throw new IllegalArgumentException(format(message, messageArgs));\n         }\n     }\n+    private static class CanonicalizeExpression\n+            implements RowExpressionVisitor<String, Void>\n+    {\n+        private final Map<String, String> canonicalizedArguments = new HashMap<>();\n+\n+        public CanonicalizeExpression(List<String> arguments, List<Type> argumentTypes)\n+        {\n+            for (int i = 0; i < arguments.size(); i++) {\n+                canonicalizedArguments.put(arguments.get(i), format(\"%s_%d\", argumentTypes.get(i).toString(), i));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6029a0a62d98b31d12a23583f0900dc9ba326968"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0MTM0MzUy", "url": "https://github.com/prestodb/presto/pull/14524#pullrequestreview-414134352", "createdAt": "2020-05-19T06:25:22Z", "commit": {"oid": "6029a0a62d98b31d12a23583f0900dc9ba326968"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNjoyNToyMlrOGXRfuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNjoyNToyMlrOGXRfuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA1NzA4MQ==", "bodyText": "Is displayName guarantee to be distinct for each function call? :)\nAlso I personally like to have line breaks when using Stream API. This helps read the code from cellphone \ud83d\ude1b :\n        return format(\n                \"%s(%s)\", \n                call.getDisplayName(), \n                String.join(\", \", call.getArguments().stream()\n                        .map(e -> e.accept(this, null))\n                        .collect(Collectors.toList())));", "url": "https://github.com/prestodb/presto/pull/14524#discussion_r427057081", "createdAt": "2020-05-19T06:25:22Z", "author": {"login": "wenleix"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/relation/LambdaDefinitionExpression.java", "diffHunk": "@@ -111,4 +115,55 @@ private static void checkArgument(boolean condition, String message, Object... m\n             throw new IllegalArgumentException(format(message, messageArgs));\n         }\n     }\n+    private static class CanonicalizeExpression\n+            implements RowExpressionVisitor<String, Void>\n+    {\n+        private final Map<String, String> canonicalizedArguments = new HashMap<>();\n+\n+        public CanonicalizeExpression(List<String> arguments, List<Type> argumentTypes)\n+        {\n+            for (int i = 0; i < arguments.size(); i++) {\n+                canonicalizedArguments.put(arguments.get(i), format(\"%s_%d\", argumentTypes.get(i).toString(), i));\n+            }\n+        }\n+\n+        @Override\n+        public String visitCall(CallExpression call, Void context)\n+        {\n+            return format(\"%s(%s)\", call.getDisplayName(), String.join(\", \", call.getArguments().stream().map(e -> e.accept(this, null)).collect(Collectors.toList())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6029a0a62d98b31d12a23583f0900dc9ba326968"}, "originalPosition": 64}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6029a0a62d98b31d12a23583f0900dc9ba326968", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/6029a0a62d98b31d12a23583f0900dc9ba326968", "committedDate": "2020-05-14T01:00:58Z", "message": "Canonicalize body of LambdaDefinitionExpression\n\nFor two LambdaDefinitionExpressions if their input argument types are the same and how arguments are used\nare the same, they should be considered the same and can use the same generated bytecode."}, "afterCommit": {"oid": "ca0e06862e29e7c171edf47d58e242ad7d5d4501", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/ca0e06862e29e7c171edf47d58e242ad7d5d4501", "committedDate": "2020-05-28T22:19:01Z", "message": "Canonicalize body of LambdaDefinitionExpression\n\nFor two LambdaDefinitionExpressions if their input argument types are the same and how arguments are used\nare the same, they should be considered the same and can use the same generated bytecode."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ca0e06862e29e7c171edf47d58e242ad7d5d4501", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/ca0e06862e29e7c171edf47d58e242ad7d5d4501", "committedDate": "2020-05-28T22:19:01Z", "message": "Canonicalize body of LambdaDefinitionExpression\n\nFor two LambdaDefinitionExpressions if their input argument types are the same and how arguments are used\nare the same, they should be considered the same and can use the same generated bytecode."}, "afterCommit": {"oid": "77bb5344b692f4cf2f9ea8131c118072862c0063", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/77bb5344b692f4cf2f9ea8131c118072862c0063", "committedDate": "2020-06-02T20:53:54Z", "message": "Canonicalize body of LambdaDefinitionExpression\n\nFor two LambdaDefinitionExpressions if their input argument types are the same and how arguments are used\nare the same, they should be considered the same and can use the same generated bytecode."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "77bb5344b692f4cf2f9ea8131c118072862c0063", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/77bb5344b692f4cf2f9ea8131c118072862c0063", "committedDate": "2020-06-02T20:53:54Z", "message": "Canonicalize body of LambdaDefinitionExpression\n\nFor two LambdaDefinitionExpressions if their input argument types are the same and how arguments are used\nare the same, they should be considered the same and can use the same generated bytecode."}, "afterCommit": {"oid": "628f67390e541521dbfb60b68695f701c540697f", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/628f67390e541521dbfb60b68695f701c540697f", "committedDate": "2020-06-05T21:01:42Z", "message": "Canonicalize body of LambdaDefinitionExpression\n\nFor two LambdaDefinitionExpressions if their input argument types are the same and how arguments are used\nare the same, they should be considered the same and can use the same generated bytecode."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwMjk1MzI5", "url": "https://github.com/prestodb/presto/pull/14524#pullrequestreview-430295329", "createdAt": "2020-06-15T03:01:01Z", "commit": {"oid": "628f67390e541521dbfb60b68695f701c540697f"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwMzowMTowMlrOGjh22g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwMzowMTowMlrOGjh22g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkwODA1OA==", "bodyText": "Maybe add a comment to indicate this is the implementation of toBase64", "url": "https://github.com/prestodb/presto/pull/14524#discussion_r439908058", "createdAt": "2020-06-15T03:01:02Z", "author": {"login": "highker"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/relation/LambdaDefinitionExpression.java", "diffHunk": "@@ -111,4 +118,64 @@ private static void checkArgument(boolean condition, String message, Object... m\n             throw new IllegalArgumentException(format(message, messageArgs));\n         }\n     }\n+    private static class CanonicalizeExpression\n+            implements RowExpressionVisitor<String, Void>\n+    {\n+        private final Map<String, String> canonicalizedArguments = new HashMap<>();\n+\n+        public CanonicalizeExpression(List<String> arguments, List<Type> argumentTypes)\n+        {\n+            for (int i = 0; i < arguments.size(); i++) {\n+                canonicalizedArguments.put(arguments.get(i), format(\"%s_%d\", argumentTypes.get(i).toString(), i));\n+            }\n+        }\n+\n+        @Override\n+        public String visitCall(CallExpression call, Void context)\n+        {\n+            return format(\"%s.%s(%s)\", call.getFunctionHandle().getFunctionNamespace(), call.getDisplayName(), String.join(\", \", call.getArguments().stream().map(e -> e.accept(this, null)).collect(Collectors.toList())));\n+        }\n+\n+        @Override\n+        public String visitInputReference(InputReferenceExpression reference, Void context)\n+        {\n+            return reference.toString();\n+        }\n+\n+        @Override\n+        public String visitConstant(ConstantExpression literal, Void context)\n+        {\n+            // Handle varchar constant specifically\n+            if (literal.getValue() instanceof Slice) {\n+                Slice slice = (Slice) literal.getValue();\n+                if (slice.hasByteArray()) {\n+                    return Slices.wrappedBuffer(Base64.getEncoder().encode(slice.toByteBuffer())).toStringUtf8();\n+                }\n+                return Slices.wrappedBuffer(Base64.getEncoder().encode(slice.getBytes())).toStringUtf8();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "628f67390e541521dbfb60b68695f701c540697f"}, "originalPosition": 89}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "928752b32b045ff4c0208e93721435015e6df943", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/928752b32b045ff4c0208e93721435015e6df943", "committedDate": "2020-06-15T19:48:55Z", "message": "Canonicalize body of LambdaDefinitionExpression\n\nFor two LambdaDefinitionExpressions if their input argument types are the same and how arguments are used\nare the same, they should be considered the same and can use the same generated bytecode."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "628f67390e541521dbfb60b68695f701c540697f", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/628f67390e541521dbfb60b68695f701c540697f", "committedDate": "2020-06-05T21:01:42Z", "message": "Canonicalize body of LambdaDefinitionExpression\n\nFor two LambdaDefinitionExpressions if their input argument types are the same and how arguments are used\nare the same, they should be considered the same and can use the same generated bytecode."}, "afterCommit": {"oid": "928752b32b045ff4c0208e93721435015e6df943", "author": {"user": {"login": "rongrong", "name": "Rongrong Zhong"}}, "url": "https://github.com/prestodb/presto/commit/928752b32b045ff4c0208e93721435015e6df943", "committedDate": "2020-06-15T19:48:55Z", "message": "Canonicalize body of LambdaDefinitionExpression\n\nFor two LambdaDefinitionExpressions if their input argument types are the same and how arguments are used\nare the same, they should be considered the same and can use the same generated bytecode."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1636, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}