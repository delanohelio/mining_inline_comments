{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0MTIzMjAw", "number": 14215, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwODo0ODozNVrODlVatA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMTozNDozOVrODno1dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNDc0ODA0OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/release/release-0.233.rst", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwODo0ODozNVrOFyKxFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTo1Mzo0MlrOFyh07Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE0OTUyNw==", "bodyText": "@rschlussel How can we rephrase this? #14098", "url": "https://github.com/prestodb/presto/pull/14215#discussion_r388149527", "createdAt": "2020-03-05T08:48:35Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/release/release-0.233.rst", "diffHunk": "@@ -0,0 +1,79 @@\n+=============\n+Release 0.233\n+=============\n+\n+General Changes\n+_______________\n+* Fix an optimizer failure introduced in ``0.229``, where a ``LIKE`` pattern is deduced into a constant, e.g., ``col LIKE 'a' and col = 'b'``.\n+* Fix ``ArbitraryOutputBuffer`` to avoid skewing output data distribution.\n+* Fix function registration for :func:`classification_fallout function`.\n+* Add configuration property ``exchange.async-page-transport-enabled`` to turn on non-blocking IO for page transport,\n+  and add configuration property ``exchange.async-page-transport-timeout`` to set for server side timeout.\n+  Use URL prefix ``/v1/task/async`` for async page transport request.\n+* Add configuration property ``task.http-timeout-concurrency`` to improve performance of task timeout executors.\n+* Add support for soft affinity scheduling, which makes the best effort to fetch the same piece of data from the same worker,\n+  while allowing fallback to random workers if the preferred workers are too busy to handle additional splits.\n+  The feature can be turned on by ``ConnectorSplit#getNodeSelectionStrategy()``.\n+* Add soft affinity scheduling to bucketed split. It makes the best effort to fetch the same bucket data from the same worker.\n+  When using dynamic group scheduling, if the preferred workers are unavailable to handle the specific bucket splits, it will fallback to random workers.\n+* Add hash functions ``fnv1_32``, ``fnv1_64``, ``fnv1a_32``, and ``fnv1a_64``.\n+* Add IP address function :func:`ip_subnet_min`, :func:`ip_subnet_max`, :func:`ip_subnet_range`, and :func:`is_subnet_of`.\n+* Improve performance of ``StreamingAggregationOperator``.\n+\n+\n+Hive Changes\n+____________\n+* Add directory listing cache for Hive Connector.\n+* Allow server to start when ``hive.s3-file-system-type`` is set to ``HADOOP_DEFAULT``.\n+* Add configuration property ``hive.insert-overwrite-immutable-partitions-enabled`` to allow admin set insert overwrite\n+  as the default insertion behavior for Hive connector.\n+* Add configuration property ``hive.node-selection-strategy`` to choose ``NodeSelectionStrategy``. When ``SOFT_AFFINITY`` is selected,\n+  scheduler will make the best effort to request the same worker to fetch the same file.\n+* Remove configuration property ``hive.force-local-scheduling``. The same functionality can be achieved by setting\n+  ``hive.node-selection-strategy`` to ``HARD_AFFINITY``.\n+* Store column names and types for views in the metastore. Views in the Hive connector can now only use types supported by Hive.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e56413a28b80592ef2aa3b9f15be3a49c72ef3c"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxNDQ1OQ==", "bodyText": "Add support for storing column names and types for views in the Hive metastore. <second sentence>", "url": "https://github.com/prestodb/presto/pull/14215#discussion_r388514459", "createdAt": "2020-03-05T19:30:09Z", "author": {"login": "mayankgarg1990"}, "path": "presto-docs/src/main/sphinx/release/release-0.233.rst", "diffHunk": "@@ -0,0 +1,79 @@\n+=============\n+Release 0.233\n+=============\n+\n+General Changes\n+_______________\n+* Fix an optimizer failure introduced in ``0.229``, where a ``LIKE`` pattern is deduced into a constant, e.g., ``col LIKE 'a' and col = 'b'``.\n+* Fix ``ArbitraryOutputBuffer`` to avoid skewing output data distribution.\n+* Fix function registration for :func:`classification_fallout function`.\n+* Add configuration property ``exchange.async-page-transport-enabled`` to turn on non-blocking IO for page transport,\n+  and add configuration property ``exchange.async-page-transport-timeout`` to set for server side timeout.\n+  Use URL prefix ``/v1/task/async`` for async page transport request.\n+* Add configuration property ``task.http-timeout-concurrency`` to improve performance of task timeout executors.\n+* Add support for soft affinity scheduling, which makes the best effort to fetch the same piece of data from the same worker,\n+  while allowing fallback to random workers if the preferred workers are too busy to handle additional splits.\n+  The feature can be turned on by ``ConnectorSplit#getNodeSelectionStrategy()``.\n+* Add soft affinity scheduling to bucketed split. It makes the best effort to fetch the same bucket data from the same worker.\n+  When using dynamic group scheduling, if the preferred workers are unavailable to handle the specific bucket splits, it will fallback to random workers.\n+* Add hash functions ``fnv1_32``, ``fnv1_64``, ``fnv1a_32``, and ``fnv1a_64``.\n+* Add IP address function :func:`ip_subnet_min`, :func:`ip_subnet_max`, :func:`ip_subnet_range`, and :func:`is_subnet_of`.\n+* Improve performance of ``StreamingAggregationOperator``.\n+\n+\n+Hive Changes\n+____________\n+* Add directory listing cache for Hive Connector.\n+* Allow server to start when ``hive.s3-file-system-type`` is set to ``HADOOP_DEFAULT``.\n+* Add configuration property ``hive.insert-overwrite-immutable-partitions-enabled`` to allow admin set insert overwrite\n+  as the default insertion behavior for Hive connector.\n+* Add configuration property ``hive.node-selection-strategy`` to choose ``NodeSelectionStrategy``. When ``SOFT_AFFINITY`` is selected,\n+  scheduler will make the best effort to request the same worker to fetch the same file.\n+* Remove configuration property ``hive.force-local-scheduling``. The same functionality can be achieved by setting\n+  ``hive.node-selection-strategy`` to ``HARD_AFFINITY``.\n+* Store column names and types for views in the metastore. Views in the Hive connector can now only use types supported by Hive.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE0OTUyNw=="}, "originalCommit": {"oid": "2e56413a28b80592ef2aa3b9f15be3a49c72ef3c"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUyMjIwMA==", "bodyText": "Is this better?:\nInclude column information when storing a view in the metastore so that other tools can see the view definition.  As a result of this change, output column types for Hive views must be supported by the Hive metastore.\nHere's a longer description of what this change is about, in case you have any better suggestions:\nPreviously we didn't fill out the column name/type information when we created hive views in the metastore, we just put a single dummy column.  That meant other tools that aren't Presto had no insight into what a Presto view was.   Now we are storing the actual column information, so other tools can see that information in the metastore just as they can for tables created by Presto.  As a side effect, the output type of Hive views now must be supported hive types. Previously you technically could have your view return some random Presto type (e.g. hll) not supported by hive tables because we didn't tell the metastore about it.", "url": "https://github.com/prestodb/presto/pull/14215#discussion_r388522200", "createdAt": "2020-03-05T19:44:43Z", "author": {"login": "rschlussel"}, "path": "presto-docs/src/main/sphinx/release/release-0.233.rst", "diffHunk": "@@ -0,0 +1,79 @@\n+=============\n+Release 0.233\n+=============\n+\n+General Changes\n+_______________\n+* Fix an optimizer failure introduced in ``0.229``, where a ``LIKE`` pattern is deduced into a constant, e.g., ``col LIKE 'a' and col = 'b'``.\n+* Fix ``ArbitraryOutputBuffer`` to avoid skewing output data distribution.\n+* Fix function registration for :func:`classification_fallout function`.\n+* Add configuration property ``exchange.async-page-transport-enabled`` to turn on non-blocking IO for page transport,\n+  and add configuration property ``exchange.async-page-transport-timeout`` to set for server side timeout.\n+  Use URL prefix ``/v1/task/async`` for async page transport request.\n+* Add configuration property ``task.http-timeout-concurrency`` to improve performance of task timeout executors.\n+* Add support for soft affinity scheduling, which makes the best effort to fetch the same piece of data from the same worker,\n+  while allowing fallback to random workers if the preferred workers are too busy to handle additional splits.\n+  The feature can be turned on by ``ConnectorSplit#getNodeSelectionStrategy()``.\n+* Add soft affinity scheduling to bucketed split. It makes the best effort to fetch the same bucket data from the same worker.\n+  When using dynamic group scheduling, if the preferred workers are unavailable to handle the specific bucket splits, it will fallback to random workers.\n+* Add hash functions ``fnv1_32``, ``fnv1_64``, ``fnv1a_32``, and ``fnv1a_64``.\n+* Add IP address function :func:`ip_subnet_min`, :func:`ip_subnet_max`, :func:`ip_subnet_range`, and :func:`is_subnet_of`.\n+* Improve performance of ``StreamingAggregationOperator``.\n+\n+\n+Hive Changes\n+____________\n+* Add directory listing cache for Hive Connector.\n+* Allow server to start when ``hive.s3-file-system-type`` is set to ``HADOOP_DEFAULT``.\n+* Add configuration property ``hive.insert-overwrite-immutable-partitions-enabled`` to allow admin set insert overwrite\n+  as the default insertion behavior for Hive connector.\n+* Add configuration property ``hive.node-selection-strategy`` to choose ``NodeSelectionStrategy``. When ``SOFT_AFFINITY`` is selected,\n+  scheduler will make the best effort to request the same worker to fetch the same file.\n+* Remove configuration property ``hive.force-local-scheduling``. The same functionality can be achieved by setting\n+  ``hive.node-selection-strategy`` to ``HARD_AFFINITY``.\n+* Store column names and types for views in the metastore. Views in the Hive connector can now only use types supported by Hive.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE0OTUyNw=="}, "originalCommit": {"oid": "2e56413a28b80592ef2aa3b9f15be3a49c72ef3c"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUyNzM0MQ==", "bodyText": "oh didn't see @mayankgarg1990's suggestion.  that works too.", "url": "https://github.com/prestodb/presto/pull/14215#discussion_r388527341", "createdAt": "2020-03-05T19:53:42Z", "author": {"login": "rschlussel"}, "path": "presto-docs/src/main/sphinx/release/release-0.233.rst", "diffHunk": "@@ -0,0 +1,79 @@\n+=============\n+Release 0.233\n+=============\n+\n+General Changes\n+_______________\n+* Fix an optimizer failure introduced in ``0.229``, where a ``LIKE`` pattern is deduced into a constant, e.g., ``col LIKE 'a' and col = 'b'``.\n+* Fix ``ArbitraryOutputBuffer`` to avoid skewing output data distribution.\n+* Fix function registration for :func:`classification_fallout function`.\n+* Add configuration property ``exchange.async-page-transport-enabled`` to turn on non-blocking IO for page transport,\n+  and add configuration property ``exchange.async-page-transport-timeout`` to set for server side timeout.\n+  Use URL prefix ``/v1/task/async`` for async page transport request.\n+* Add configuration property ``task.http-timeout-concurrency`` to improve performance of task timeout executors.\n+* Add support for soft affinity scheduling, which makes the best effort to fetch the same piece of data from the same worker,\n+  while allowing fallback to random workers if the preferred workers are too busy to handle additional splits.\n+  The feature can be turned on by ``ConnectorSplit#getNodeSelectionStrategy()``.\n+* Add soft affinity scheduling to bucketed split. It makes the best effort to fetch the same bucket data from the same worker.\n+  When using dynamic group scheduling, if the preferred workers are unavailable to handle the specific bucket splits, it will fallback to random workers.\n+* Add hash functions ``fnv1_32``, ``fnv1_64``, ``fnv1a_32``, and ``fnv1a_64``.\n+* Add IP address function :func:`ip_subnet_min`, :func:`ip_subnet_max`, :func:`ip_subnet_range`, and :func:`is_subnet_of`.\n+* Improve performance of ``StreamingAggregationOperator``.\n+\n+\n+Hive Changes\n+____________\n+* Add directory listing cache for Hive Connector.\n+* Allow server to start when ``hive.s3-file-system-type`` is set to ``HADOOP_DEFAULT``.\n+* Add configuration property ``hive.insert-overwrite-immutable-partitions-enabled`` to allow admin set insert overwrite\n+  as the default insertion behavior for Hive connector.\n+* Add configuration property ``hive.node-selection-strategy`` to choose ``NodeSelectionStrategy``. When ``SOFT_AFFINITY`` is selected,\n+  scheduler will make the best effort to request the same worker to fetch the same file.\n+* Remove configuration property ``hive.force-local-scheduling``. The same functionality can be achieved by setting\n+  ``hive.node-selection-strategy`` to ``HARD_AFFINITY``.\n+* Store column names and types for views in the metastore. Views in the Hive connector can now only use types supported by Hive.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE0OTUyNw=="}, "originalCommit": {"oid": "2e56413a28b80592ef2aa3b9f15be3a49c72ef3c"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNDc1NTE3OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/release/release-0.233.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwODo1MDo1M1rOFyK1ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwODo1MDo1M1rOFyK1ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE1MDY1MQ==", "bodyText": "Seems a bit too verbose to me. Should we make it more concise? @kewang1024", "url": "https://github.com/prestodb/presto/pull/14215#discussion_r388150651", "createdAt": "2020-03-05T08:50:53Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/release/release-0.233.rst", "diffHunk": "@@ -0,0 +1,79 @@\n+=============\n+Release 0.233\n+=============\n+\n+General Changes\n+_______________\n+* Fix an optimizer failure introduced in ``0.229``, where a ``LIKE`` pattern is deduced into a constant, e.g., ``col LIKE 'a' and col = 'b'``.\n+* Fix ``ArbitraryOutputBuffer`` to avoid skewing output data distribution.\n+* Fix function registration for :func:`classification_fallout function`.\n+* Add configuration property ``exchange.async-page-transport-enabled`` to turn on non-blocking IO for page transport,\n+  and add configuration property ``exchange.async-page-transport-timeout`` to set for server side timeout.\n+  Use URL prefix ``/v1/task/async`` for async page transport request.\n+* Add configuration property ``task.http-timeout-concurrency`` to improve performance of task timeout executors.\n+* Add support for soft affinity scheduling, which makes the best effort to fetch the same piece of data from the same worker,\n+  while allowing fallback to random workers if the preferred workers are too busy to handle additional splits.\n+  The feature can be turned on by ``ConnectorSplit#getNodeSelectionStrategy()``.\n+* Add soft affinity scheduling to bucketed split. It makes the best effort to fetch the same bucket data from the same worker.\n+  When using dynamic group scheduling, if the preferred workers are unavailable to handle the specific bucket splits, it will fallback to random workers.\n+* Add hash functions ``fnv1_32``, ``fnv1_64``, ``fnv1a_32``, and ``fnv1a_64``.\n+* Add IP address function :func:`ip_subnet_min`, :func:`ip_subnet_max`, :func:`ip_subnet_range`, and :func:`is_subnet_of`.\n+* Improve performance of ``StreamingAggregationOperator``.\n+\n+\n+Hive Changes\n+____________\n+* Add directory listing cache for Hive Connector.\n+* Allow server to start when ``hive.s3-file-system-type`` is set to ``HADOOP_DEFAULT``.\n+* Add configuration property ``hive.insert-overwrite-immutable-partitions-enabled`` to allow admin set insert overwrite\n+  as the default insertion behavior for Hive connector.\n+* Add configuration property ``hive.node-selection-strategy`` to choose ``NodeSelectionStrategy``. When ``SOFT_AFFINITY`` is selected,\n+  scheduler will make the best effort to request the same worker to fetch the same file.\n+* Remove configuration property ``hive.force-local-scheduling``. The same functionality can be achieved by setting\n+  ``hive.node-selection-strategy`` to ``HARD_AFFINITY``.\n+* Store column names and types for views in the metastore. Views in the Hive connector can now only use types supported by Hive.\n+\n+\n+Verifier Changes\n+________________\n+* Fix an issue where invalid checksum queries can be generated for certain queries containing columns of ``RowType``.\n+* Fix an issue where checksum query would fail for queries containing map columns whose key or value types are arrays or rows.\n+* Fix incorrect decision for determinism analysis of queries with top-level ``LIMIT`` clause. (:pr:`14176`).\n+* Add checks for keys, values, and cardinality sum when validating a map column.\n+* Add support to disable individual failure resolvers (:pr:`14148`).\n+* Add support to auto-resolve control checksum query failures with ``COMPILER_ERROR``, instead of skipping the verification.\n+* Add support for specifying non-deterministic catalogs by configuration property ``determinism.non-determinism-catalogs``.\n+  Queries explicitly referencing tables from those catalogs are treated as non-deterministic.\n+* Improve query performance during determinism analysis of queries with top-level ``LIMIT`` clause.\n+* Improve correctness check for floating point columns whose mean values of either the control query or the test query is closed to 0.\n+\n+\n+Druid Changes\n+_____________\n+* Add Druid Connector.\n+* Improve query performance with filter pushdown.\n+\n+\n+Geospatial Changes\n+__________________\n+* Improve :func:`ST_Points` to add support for major well-known spatial objects.\n+  :func:`ST_Points` now supports ``POINT``, ``LINESTRING``, ``POLYGON``, ``MULTIPOINT``, ``MULTILINESTRING``, ``MULTIPOLYGON`` and ``GEOMETRYCOLLECTION``.\n+* Improve :func:`ST_IsValid` and :func:`ST_IsSimple` to adhere to the ISO/OGC standards more closely.\n+  The two functions used to return the same result but may now be different. Users should check both functions to be sure their geometries are well-behaved.\n+  :func:`geometry_invalid_reason` will return different but semantically similar strings.\n+* Improve performance of :func:`ST_Intersection` by reduces the cost by returning simply the geometry if it is with an enclosing envelope.\n+  This can reduce the cost by ``10^5x`` or more for complex polygons when this occurs.\n+\n+SPI Changes\n+___________\n+* Add parameter ``NodeSelectionStrategy nodeSelectionStrategy`` in method ``ConnectorBucketNodeMap#createBucketNodeMap`` to indicate\n+  which affinity strategy to use when creating a bucket node map.\n+* Add parameter ``List<Node> sortedNodes`` in method ``ConnectorNodePartitioningProvider#getBucketNodeMap`` to provide\n+  a sorted list of nodes from which a connector can choose to perform affinity scheduling.\n+* Add enum ``NodeSelectionStrategy``. ``NO_PREFERENCE`` indicates data is remotely accessible from workers,\n+  ``HARD_AFFINITY`` to indicate data and workers are collocated, and ``SOFT_AFFINITY`` to indicate data is remotely accessible", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e56413a28b80592ef2aa3b9f15be3a49c72ef3c"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjg2NzY1OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/release/release-0.233.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODozNzowMVrOFyfNZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODozNzowMVrOFyfNZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ4NDQ1Mg==", "bodyText": "Not relevant, we can remove this", "url": "https://github.com/prestodb/presto/pull/14215#discussion_r388484452", "createdAt": "2020-03-05T18:37:01Z", "author": {"login": "tdcmeehan"}, "path": "presto-docs/src/main/sphinx/release/release-0.233.rst", "diffHunk": "@@ -0,0 +1,79 @@\n+=============\n+Release 0.233\n+=============\n+\n+General Changes\n+_______________\n+* Fix an optimizer failure introduced in ``0.229``, where a ``LIKE`` pattern is deduced into a constant, e.g., ``col LIKE 'a' and col = 'b'``.\n+* Fix ``ArbitraryOutputBuffer`` to avoid skewing output data distribution.\n+* Fix function registration for function :func:`classification_fall_out`.\n+* Add configuration property ``exchange.async-page-transport-enabled`` to turn on non-blocking IO for page transport,\n+  and add configuration property ``exchange.async-page-transport-timeout`` to set for server side timeout.\n+  Use URL prefix ``/v1/task/async`` for async page transport request.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6b37f119d3ccd40b4036efbb530313d8da36c4c"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjg3MDk5OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/release/release-0.233.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODozODowOVrOFyfPag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODozODowOVrOFyfPag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ4NDk3MA==", "bodyText": "My sense is we don't need to add this to our release notes, as it will eventually become the default", "url": "https://github.com/prestodb/presto/pull/14215#discussion_r388484970", "createdAt": "2020-03-05T18:38:09Z", "author": {"login": "tdcmeehan"}, "path": "presto-docs/src/main/sphinx/release/release-0.233.rst", "diffHunk": "@@ -0,0 +1,79 @@\n+=============\n+Release 0.233\n+=============\n+\n+General Changes\n+_______________\n+* Fix an optimizer failure introduced in ``0.229``, where a ``LIKE`` pattern is deduced into a constant, e.g., ``col LIKE 'a' and col = 'b'``.\n+* Fix ``ArbitraryOutputBuffer`` to avoid skewing output data distribution.\n+* Fix function registration for function :func:`classification_fall_out`.\n+* Add configuration property ``exchange.async-page-transport-enabled`` to turn on non-blocking IO for page transport,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6b37f119d3ccd40b4036efbb530313d8da36c4c"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjg3MjI1OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/release/release-0.233.rst", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODozODozNVrOFyfQOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwMzoyMjoxN1rOFzaCGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ4NTE3Nw==", "bodyText": "Not clear how one would use this", "url": "https://github.com/prestodb/presto/pull/14215#discussion_r388485177", "createdAt": "2020-03-05T18:38:35Z", "author": {"login": "tdcmeehan"}, "path": "presto-docs/src/main/sphinx/release/release-0.233.rst", "diffHunk": "@@ -0,0 +1,79 @@\n+=============\n+Release 0.233\n+=============\n+\n+General Changes\n+_______________\n+* Fix an optimizer failure introduced in ``0.229``, where a ``LIKE`` pattern is deduced into a constant, e.g., ``col LIKE 'a' and col = 'b'``.\n+* Fix ``ArbitraryOutputBuffer`` to avoid skewing output data distribution.\n+* Fix function registration for function :func:`classification_fall_out`.\n+* Add configuration property ``exchange.async-page-transport-enabled`` to turn on non-blocking IO for page transport,\n+  and add configuration property ``exchange.async-page-transport-timeout`` to set for server side timeout.\n+  Use URL prefix ``/v1/task/async`` for async page transport request.\n+* Add configuration property ``task.http-timeout-concurrency`` to improve performance of task timeout executors.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6b37f119d3ccd40b4036efbb530313d8da36c4c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ0ODIxNw==", "bodyText": "@viczhang861 Could help improving this release note?", "url": "https://github.com/prestodb/presto/pull/14215#discussion_r389448217", "createdAt": "2020-03-09T03:22:17Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/release/release-0.233.rst", "diffHunk": "@@ -0,0 +1,79 @@\n+=============\n+Release 0.233\n+=============\n+\n+General Changes\n+_______________\n+* Fix an optimizer failure introduced in ``0.229``, where a ``LIKE`` pattern is deduced into a constant, e.g., ``col LIKE 'a' and col = 'b'``.\n+* Fix ``ArbitraryOutputBuffer`` to avoid skewing output data distribution.\n+* Fix function registration for function :func:`classification_fall_out`.\n+* Add configuration property ``exchange.async-page-transport-enabled`` to turn on non-blocking IO for page transport,\n+  and add configuration property ``exchange.async-page-transport-timeout`` to set for server side timeout.\n+  Use URL prefix ``/v1/task/async`` for async page transport request.\n+* Add configuration property ``task.http-timeout-concurrency`` to improve performance of task timeout executors.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ4NTE3Nw=="}, "originalCommit": {"oid": "d6b37f119d3ccd40b4036efbb530313d8da36c4c"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjg3OTA1OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/release/release-0.233.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo0MDozOVrOFyfUbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo0MDozOVrOFyfUbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ4NjI1Mg==", "bodyText": "I think we can remove this and refer to the SPI changes section below", "url": "https://github.com/prestodb/presto/pull/14215#discussion_r388486252", "createdAt": "2020-03-05T18:40:39Z", "author": {"login": "tdcmeehan"}, "path": "presto-docs/src/main/sphinx/release/release-0.233.rst", "diffHunk": "@@ -0,0 +1,79 @@\n+=============\n+Release 0.233\n+=============\n+\n+General Changes\n+_______________\n+* Fix an optimizer failure introduced in ``0.229``, where a ``LIKE`` pattern is deduced into a constant, e.g., ``col LIKE 'a' and col = 'b'``.\n+* Fix ``ArbitraryOutputBuffer`` to avoid skewing output data distribution.\n+* Fix function registration for function :func:`classification_fall_out`.\n+* Add configuration property ``exchange.async-page-transport-enabled`` to turn on non-blocking IO for page transport,\n+  and add configuration property ``exchange.async-page-transport-timeout`` to set for server side timeout.\n+  Use URL prefix ``/v1/task/async`` for async page transport request.\n+* Add configuration property ``task.http-timeout-concurrency`` to improve performance of task timeout executors.\n+* Add support for soft affinity scheduling, which makes the best effort to fetch the same piece of data from the same worker,\n+  while allowing fallback to random workers if the preferred workers are too busy to handle additional splits.\n+  The feature can be turned on by ``ConnectorSplit#getNodeSelectionStrategy()``.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6b37f119d3ccd40b4036efbb530313d8da36c4c"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjg4MzU0OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/release/release-0.233.rst", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo0MjowM1rOFyfXQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMDo1MzoyOFrOF0l74g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ4Njk3Nw==", "bodyText": "Should we refer to the connectors documentation?  It will be missed in release notes", "url": "https://github.com/prestodb/presto/pull/14215#discussion_r388486977", "createdAt": "2020-03-05T18:42:03Z", "author": {"login": "tdcmeehan"}, "path": "presto-docs/src/main/sphinx/release/release-0.233.rst", "diffHunk": "@@ -0,0 +1,79 @@\n+=============\n+Release 0.233\n+=============\n+\n+General Changes\n+_______________\n+* Fix an optimizer failure introduced in ``0.229``, where a ``LIKE`` pattern is deduced into a constant, e.g., ``col LIKE 'a' and col = 'b'``.\n+* Fix ``ArbitraryOutputBuffer`` to avoid skewing output data distribution.\n+* Fix function registration for function :func:`classification_fall_out`.\n+* Add configuration property ``exchange.async-page-transport-enabled`` to turn on non-blocking IO for page transport,\n+  and add configuration property ``exchange.async-page-transport-timeout`` to set for server side timeout.\n+  Use URL prefix ``/v1/task/async`` for async page transport request.\n+* Add configuration property ``task.http-timeout-concurrency`` to improve performance of task timeout executors.\n+* Add support for soft affinity scheduling, which makes the best effort to fetch the same piece of data from the same worker,\n+  while allowing fallback to random workers if the preferred workers are too busy to handle additional splits.\n+  The feature can be turned on by ``ConnectorSplit#getNodeSelectionStrategy()``.\n+* Add soft affinity scheduling to bucketed split. It makes the best effort to fetch the same bucket data from the same worker.\n+  When using dynamic group scheduling, if the preferred workers are unavailable to handle the specific bucket splits, it will fallback to random workers.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6b37f119d3ccd40b4036efbb530313d8da36c4c"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ0OTg0Nw==", "bodyText": "@kewang1024 Could you please update the connector documentation? Have a high-level description in the release notes and link to the documentation.", "url": "https://github.com/prestodb/presto/pull/14215#discussion_r389449847", "createdAt": "2020-03-09T03:32:01Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/release/release-0.233.rst", "diffHunk": "@@ -0,0 +1,79 @@\n+=============\n+Release 0.233\n+=============\n+\n+General Changes\n+_______________\n+* Fix an optimizer failure introduced in ``0.229``, where a ``LIKE`` pattern is deduced into a constant, e.g., ``col LIKE 'a' and col = 'b'``.\n+* Fix ``ArbitraryOutputBuffer`` to avoid skewing output data distribution.\n+* Fix function registration for function :func:`classification_fall_out`.\n+* Add configuration property ``exchange.async-page-transport-enabled`` to turn on non-blocking IO for page transport,\n+  and add configuration property ``exchange.async-page-transport-timeout`` to set for server side timeout.\n+  Use URL prefix ``/v1/task/async`` for async page transport request.\n+* Add configuration property ``task.http-timeout-concurrency`` to improve performance of task timeout executors.\n+* Add support for soft affinity scheduling, which makes the best effort to fetch the same piece of data from the same worker,\n+  while allowing fallback to random workers if the preferred workers are too busy to handle additional splits.\n+  The feature can be turned on by ``ConnectorSplit#getNodeSelectionStrategy()``.\n+* Add soft affinity scheduling to bucketed split. It makes the best effort to fetch the same bucket data from the same worker.\n+  When using dynamic group scheduling, if the preferred workers are unavailable to handle the specific bucket splits, it will fallback to random workers.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ4Njk3Nw=="}, "originalCommit": {"oid": "d6b37f119d3ccd40b4036efbb530313d8da36c4c"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY5MTgxMA==", "bodyText": "Add support for soft affinity scheduling for unbucketed split. Refer to connectors documentation.\nAdd soft affinity scheduling to bucketed split. Refer to connectors documentation.", "url": "https://github.com/prestodb/presto/pull/14215#discussion_r390691810", "createdAt": "2020-03-11T00:53:28Z", "author": {"login": "kewang1024"}, "path": "presto-docs/src/main/sphinx/release/release-0.233.rst", "diffHunk": "@@ -0,0 +1,79 @@\n+=============\n+Release 0.233\n+=============\n+\n+General Changes\n+_______________\n+* Fix an optimizer failure introduced in ``0.229``, where a ``LIKE`` pattern is deduced into a constant, e.g., ``col LIKE 'a' and col = 'b'``.\n+* Fix ``ArbitraryOutputBuffer`` to avoid skewing output data distribution.\n+* Fix function registration for function :func:`classification_fall_out`.\n+* Add configuration property ``exchange.async-page-transport-enabled`` to turn on non-blocking IO for page transport,\n+  and add configuration property ``exchange.async-page-transport-timeout`` to set for server side timeout.\n+  Use URL prefix ``/v1/task/async`` for async page transport request.\n+* Add configuration property ``task.http-timeout-concurrency`` to improve performance of task timeout executors.\n+* Add support for soft affinity scheduling, which makes the best effort to fetch the same piece of data from the same worker,\n+  while allowing fallback to random workers if the preferred workers are too busy to handle additional splits.\n+  The feature can be turned on by ``ConnectorSplit#getNodeSelectionStrategy()``.\n+* Add soft affinity scheduling to bucketed split. It makes the best effort to fetch the same bucket data from the same worker.\n+  When using dynamic group scheduling, if the preferred workers are unavailable to handle the specific bucket splits, it will fallback to random workers.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ4Njk3Nw=="}, "originalCommit": {"oid": "d6b37f119d3ccd40b4036efbb530313d8da36c4c"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjg5MjcxOnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/release/release-0.233.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo0NDo0N1rOFyfdBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo0NDo0N1rOFyfdBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ4ODQ1NQ==", "bodyText": "We just added the connector, so it's being introduced with this optimization.  Can't we remove this line then?", "url": "https://github.com/prestodb/presto/pull/14215#discussion_r388488455", "createdAt": "2020-03-05T18:44:47Z", "author": {"login": "tdcmeehan"}, "path": "presto-docs/src/main/sphinx/release/release-0.233.rst", "diffHunk": "@@ -0,0 +1,79 @@\n+=============\n+Release 0.233\n+=============\n+\n+General Changes\n+_______________\n+* Fix an optimizer failure introduced in ``0.229``, where a ``LIKE`` pattern is deduced into a constant, e.g., ``col LIKE 'a' and col = 'b'``.\n+* Fix ``ArbitraryOutputBuffer`` to avoid skewing output data distribution.\n+* Fix function registration for function :func:`classification_fall_out`.\n+* Add configuration property ``exchange.async-page-transport-enabled`` to turn on non-blocking IO for page transport,\n+  and add configuration property ``exchange.async-page-transport-timeout`` to set for server side timeout.\n+  Use URL prefix ``/v1/task/async`` for async page transport request.\n+* Add configuration property ``task.http-timeout-concurrency`` to improve performance of task timeout executors.\n+* Add support for soft affinity scheduling, which makes the best effort to fetch the same piece of data from the same worker,\n+  while allowing fallback to random workers if the preferred workers are too busy to handle additional splits.\n+  The feature can be turned on by ``ConnectorSplit#getNodeSelectionStrategy()``.\n+* Add soft affinity scheduling to bucketed split. It makes the best effort to fetch the same bucket data from the same worker.\n+  When using dynamic group scheduling, if the preferred workers are unavailable to handle the specific bucket splits, it will fallback to random workers.\n+* Add hash functions ``fnv1_32``, ``fnv1_64``, ``fnv1a_32``, and ``fnv1a_64``.\n+* Add IP address function :func:`ip_subnet_min`, :func:`ip_subnet_max`, :func:`ip_subnet_range`, and :func:`is_subnet_of`.\n+* Improve performance of ``StreamingAggregationOperator``.\n+\n+\n+Hive Changes\n+____________\n+* Add directory listing cache for Hive Connector.\n+* Allow server to start when ``hive.s3-file-system-type`` is set to ``HADOOP_DEFAULT``.\n+* Add configuration property ``hive.insert-overwrite-immutable-partitions-enabled`` to allow admin set insert overwrite\n+  as the default insertion behavior for Hive connector.\n+* Add configuration property ``hive.node-selection-strategy`` to choose ``NodeSelectionStrategy``. When ``SOFT_AFFINITY`` is selected,\n+  scheduler will make the best effort to request the same worker to fetch the same file.\n+* Remove configuration property ``hive.force-local-scheduling``. The same functionality can be achieved by setting\n+  ``hive.node-selection-strategy`` to ``HARD_AFFINITY``.\n+* Store column names and types for views in the metastore. Views in the Hive connector can now only use types supported by Hive.\n+\n+\n+Verifier Changes\n+________________\n+* Fix an issue where invalid checksum queries can be generated for certain queries containing columns of ``RowType``.\n+* Fix an issue where checksum query would fail for queries containing map columns whose key or value types are arrays or rows.\n+* Fix incorrect decision for determinism analysis of queries with top-level ``LIMIT`` clause. (:pr:`14176`).\n+* Add checks for keys, values, and cardinality sum when validating a map column.\n+* Add support to disable individual failure resolvers (:pr:`14148`).\n+* Add support to auto-resolve control checksum query failures with ``COMPILER_ERROR``, instead of skipping the verification.\n+* Add support for specifying non-deterministic catalogs by configuration property ``determinism.non-determinism-catalogs``.\n+  Queries explicitly referencing tables from those catalogs are treated as non-deterministic.\n+* Improve query performance during determinism analysis of queries with top-level ``LIMIT`` clause.\n+* Improve correctness check for floating point columns whose mean values of either the control query or the test query is closed to 0.\n+\n+\n+Druid Changes\n+_____________\n+* Add Druid Connector.\n+* Improve query performance with filter pushdown.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6b37f119d3ccd40b4036efbb530313d8da36c4c"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjg5NDcwOnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/release/release-0.233.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo0NToyOVrOFyfeWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo0NToyOVrOFyfeWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ4ODc5Mg==", "bodyText": "Can improve this bullet", "url": "https://github.com/prestodb/presto/pull/14215#discussion_r388488792", "createdAt": "2020-03-05T18:45:29Z", "author": {"login": "tdcmeehan"}, "path": "presto-docs/src/main/sphinx/release/release-0.233.rst", "diffHunk": "@@ -0,0 +1,79 @@\n+=============\n+Release 0.233\n+=============\n+\n+General Changes\n+_______________\n+* Fix an optimizer failure introduced in ``0.229``, where a ``LIKE`` pattern is deduced into a constant, e.g., ``col LIKE 'a' and col = 'b'``.\n+* Fix ``ArbitraryOutputBuffer`` to avoid skewing output data distribution.\n+* Fix function registration for function :func:`classification_fall_out`.\n+* Add configuration property ``exchange.async-page-transport-enabled`` to turn on non-blocking IO for page transport,\n+  and add configuration property ``exchange.async-page-transport-timeout`` to set for server side timeout.\n+  Use URL prefix ``/v1/task/async`` for async page transport request.\n+* Add configuration property ``task.http-timeout-concurrency`` to improve performance of task timeout executors.\n+* Add support for soft affinity scheduling, which makes the best effort to fetch the same piece of data from the same worker,\n+  while allowing fallback to random workers if the preferred workers are too busy to handle additional splits.\n+  The feature can be turned on by ``ConnectorSplit#getNodeSelectionStrategy()``.\n+* Add soft affinity scheduling to bucketed split. It makes the best effort to fetch the same bucket data from the same worker.\n+  When using dynamic group scheduling, if the preferred workers are unavailable to handle the specific bucket splits, it will fallback to random workers.\n+* Add hash functions ``fnv1_32``, ``fnv1_64``, ``fnv1a_32``, and ``fnv1a_64``.\n+* Add IP address function :func:`ip_subnet_min`, :func:`ip_subnet_max`, :func:`ip_subnet_range`, and :func:`is_subnet_of`.\n+* Improve performance of ``StreamingAggregationOperator``.\n+\n+\n+Hive Changes\n+____________\n+* Add directory listing cache for Hive Connector.\n+* Allow server to start when ``hive.s3-file-system-type`` is set to ``HADOOP_DEFAULT``.\n+* Add configuration property ``hive.insert-overwrite-immutable-partitions-enabled`` to allow admin set insert overwrite\n+  as the default insertion behavior for Hive connector.\n+* Add configuration property ``hive.node-selection-strategy`` to choose ``NodeSelectionStrategy``. When ``SOFT_AFFINITY`` is selected,\n+  scheduler will make the best effort to request the same worker to fetch the same file.\n+* Remove configuration property ``hive.force-local-scheduling``. The same functionality can be achieved by setting\n+  ``hive.node-selection-strategy`` to ``HARD_AFFINITY``.\n+* Store column names and types for views in the metastore. Views in the Hive connector can now only use types supported by Hive.\n+\n+\n+Verifier Changes\n+________________\n+* Fix an issue where invalid checksum queries can be generated for certain queries containing columns of ``RowType``.\n+* Fix an issue where checksum query would fail for queries containing map columns whose key or value types are arrays or rows.\n+* Fix incorrect decision for determinism analysis of queries with top-level ``LIMIT`` clause. (:pr:`14176`).\n+* Add checks for keys, values, and cardinality sum when validating a map column.\n+* Add support to disable individual failure resolvers (:pr:`14148`).\n+* Add support to auto-resolve control checksum query failures with ``COMPILER_ERROR``, instead of skipping the verification.\n+* Add support for specifying non-deterministic catalogs by configuration property ``determinism.non-determinism-catalogs``.\n+  Queries explicitly referencing tables from those catalogs are treated as non-deterministic.\n+* Improve query performance during determinism analysis of queries with top-level ``LIMIT`` clause.\n+* Improve correctness check for floating point columns whose mean values of either the control query or the test query is closed to 0.\n+\n+\n+Druid Changes\n+_____________\n+* Add Druid Connector.\n+* Improve query performance with filter pushdown.\n+\n+\n+Geospatial Changes\n+__________________\n+* Improve :func:`ST_Points` to add support for major well-known spatial objects.\n+  :func:`ST_Points` now supports ``POINT``, ``LINESTRING``, ``POLYGON``, ``MULTIPOINT``, ``MULTILINESTRING``, ``MULTIPOLYGON`` and ``GEOMETRYCOLLECTION``.\n+* Improve :func:`ST_IsValid` and :func:`ST_IsSimple` to adhere to the ISO/OGC standards more closely.\n+  The two functions used to return the same result but may now be different. Users should check both functions to be sure their geometries are well-behaved.\n+  :func:`geometry_invalid_reason` will return different but semantically similar strings.\n+* Improve performance of :func:`ST_Intersection` by reduces the cost by returning simply the geometry if it is with an enclosing envelope.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6b37f119d3ccd40b4036efbb530313d8da36c4c"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjg5NzU2OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/release/release-0.233.rst", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo0NjoxNlrOFyfgGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMDozNzoyM1rOF0lsIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ4OTI0MA==", "bodyText": "Hard to interpret this", "url": "https://github.com/prestodb/presto/pull/14215#discussion_r388489240", "createdAt": "2020-03-05T18:46:16Z", "author": {"login": "tdcmeehan"}, "path": "presto-docs/src/main/sphinx/release/release-0.233.rst", "diffHunk": "@@ -0,0 +1,79 @@\n+=============\n+Release 0.233\n+=============\n+\n+General Changes\n+_______________\n+* Fix an optimizer failure introduced in ``0.229``, where a ``LIKE`` pattern is deduced into a constant, e.g., ``col LIKE 'a' and col = 'b'``.\n+* Fix ``ArbitraryOutputBuffer`` to avoid skewing output data distribution.\n+* Fix function registration for function :func:`classification_fall_out`.\n+* Add configuration property ``exchange.async-page-transport-enabled`` to turn on non-blocking IO for page transport,\n+  and add configuration property ``exchange.async-page-transport-timeout`` to set for server side timeout.\n+  Use URL prefix ``/v1/task/async`` for async page transport request.\n+* Add configuration property ``task.http-timeout-concurrency`` to improve performance of task timeout executors.\n+* Add support for soft affinity scheduling, which makes the best effort to fetch the same piece of data from the same worker,\n+  while allowing fallback to random workers if the preferred workers are too busy to handle additional splits.\n+  The feature can be turned on by ``ConnectorSplit#getNodeSelectionStrategy()``.\n+* Add soft affinity scheduling to bucketed split. It makes the best effort to fetch the same bucket data from the same worker.\n+  When using dynamic group scheduling, if the preferred workers are unavailable to handle the specific bucket splits, it will fallback to random workers.\n+* Add hash functions ``fnv1_32``, ``fnv1_64``, ``fnv1a_32``, and ``fnv1a_64``.\n+* Add IP address function :func:`ip_subnet_min`, :func:`ip_subnet_max`, :func:`ip_subnet_range`, and :func:`is_subnet_of`.\n+* Improve performance of ``StreamingAggregationOperator``.\n+\n+\n+Hive Changes\n+____________\n+* Add directory listing cache for Hive Connector.\n+* Allow server to start when ``hive.s3-file-system-type`` is set to ``HADOOP_DEFAULT``.\n+* Add configuration property ``hive.insert-overwrite-immutable-partitions-enabled`` to allow admin set insert overwrite\n+  as the default insertion behavior for Hive connector.\n+* Add configuration property ``hive.node-selection-strategy`` to choose ``NodeSelectionStrategy``. When ``SOFT_AFFINITY`` is selected,\n+  scheduler will make the best effort to request the same worker to fetch the same file.\n+* Remove configuration property ``hive.force-local-scheduling``. The same functionality can be achieved by setting\n+  ``hive.node-selection-strategy`` to ``HARD_AFFINITY``.\n+* Store column names and types for views in the metastore. Views in the Hive connector can now only use types supported by Hive.\n+\n+\n+Verifier Changes\n+________________\n+* Fix an issue where invalid checksum queries can be generated for certain queries containing columns of ``RowType``.\n+* Fix an issue where checksum query would fail for queries containing map columns whose key or value types are arrays or rows.\n+* Fix incorrect decision for determinism analysis of queries with top-level ``LIMIT`` clause. (:pr:`14176`).\n+* Add checks for keys, values, and cardinality sum when validating a map column.\n+* Add support to disable individual failure resolvers (:pr:`14148`).\n+* Add support to auto-resolve control checksum query failures with ``COMPILER_ERROR``, instead of skipping the verification.\n+* Add support for specifying non-deterministic catalogs by configuration property ``determinism.non-determinism-catalogs``.\n+  Queries explicitly referencing tables from those catalogs are treated as non-deterministic.\n+* Improve query performance during determinism analysis of queries with top-level ``LIMIT`` clause.\n+* Improve correctness check for floating point columns whose mean values of either the control query or the test query is closed to 0.\n+\n+\n+Druid Changes\n+_____________\n+* Add Druid Connector.\n+* Improve query performance with filter pushdown.\n+\n+\n+Geospatial Changes\n+__________________\n+* Improve :func:`ST_Points` to add support for major well-known spatial objects.\n+  :func:`ST_Points` now supports ``POINT``, ``LINESTRING``, ``POLYGON``, ``MULTIPOINT``, ``MULTILINESTRING``, ``MULTIPOLYGON`` and ``GEOMETRYCOLLECTION``.\n+* Improve :func:`ST_IsValid` and :func:`ST_IsSimple` to adhere to the ISO/OGC standards more closely.\n+  The two functions used to return the same result but may now be different. Users should check both functions to be sure their geometries are well-behaved.\n+  :func:`geometry_invalid_reason` will return different but semantically similar strings.\n+* Improve performance of :func:`ST_Intersection` by reduces the cost by returning simply the geometry if it is with an enclosing envelope.\n+  This can reduce the cost by ``10^5x`` or more for complex polygons when this occurs.\n+\n+SPI Changes\n+___________\n+* Add parameter ``NodeSelectionStrategy nodeSelectionStrategy`` in method ``ConnectorBucketNodeMap#createBucketNodeMap`` to indicate\n+  which affinity strategy to use when creating a bucket node map.\n+* Add parameter ``List<Node> sortedNodes`` in method ``ConnectorNodePartitioningProvider#getBucketNodeMap`` to provide\n+  a sorted list of nodes from which a connector can choose to perform affinity scheduling.\n+* Add enum ``NodeSelectionStrategy``. ``NO_PREFERENCE`` indicates data is remotely accessible from workers,\n+  ``HARD_AFFINITY`` to indicate data and workers are collocated, and ``SOFT_AFFINITY`` to indicate data is remotely accessible\n+  but scheduler will make the best effort to fetch the same piece of data from the same worker.\n+* Replace ``ConnectorSplit#isRemoteAccessible`` with ``isRemoteAccessible`` is true if and only if ``getNodeSelectionStrategy`` returns ``HARD_AFFINITY``.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6b37f119d3ccd40b4036efbb530313d8da36c4c"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ0OTU5NA==", "bodyText": "@kewang1024 Similar here. If things cannot be explained concisely, just include one release note item and refer to the PR with:\n(:pr:`13966`)", "url": "https://github.com/prestodb/presto/pull/14215#discussion_r389449594", "createdAt": "2020-03-09T03:30:28Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/release/release-0.233.rst", "diffHunk": "@@ -0,0 +1,79 @@\n+=============\n+Release 0.233\n+=============\n+\n+General Changes\n+_______________\n+* Fix an optimizer failure introduced in ``0.229``, where a ``LIKE`` pattern is deduced into a constant, e.g., ``col LIKE 'a' and col = 'b'``.\n+* Fix ``ArbitraryOutputBuffer`` to avoid skewing output data distribution.\n+* Fix function registration for function :func:`classification_fall_out`.\n+* Add configuration property ``exchange.async-page-transport-enabled`` to turn on non-blocking IO for page transport,\n+  and add configuration property ``exchange.async-page-transport-timeout`` to set for server side timeout.\n+  Use URL prefix ``/v1/task/async`` for async page transport request.\n+* Add configuration property ``task.http-timeout-concurrency`` to improve performance of task timeout executors.\n+* Add support for soft affinity scheduling, which makes the best effort to fetch the same piece of data from the same worker,\n+  while allowing fallback to random workers if the preferred workers are too busy to handle additional splits.\n+  The feature can be turned on by ``ConnectorSplit#getNodeSelectionStrategy()``.\n+* Add soft affinity scheduling to bucketed split. It makes the best effort to fetch the same bucket data from the same worker.\n+  When using dynamic group scheduling, if the preferred workers are unavailable to handle the specific bucket splits, it will fallback to random workers.\n+* Add hash functions ``fnv1_32``, ``fnv1_64``, ``fnv1a_32``, and ``fnv1a_64``.\n+* Add IP address function :func:`ip_subnet_min`, :func:`ip_subnet_max`, :func:`ip_subnet_range`, and :func:`is_subnet_of`.\n+* Improve performance of ``StreamingAggregationOperator``.\n+\n+\n+Hive Changes\n+____________\n+* Add directory listing cache for Hive Connector.\n+* Allow server to start when ``hive.s3-file-system-type`` is set to ``HADOOP_DEFAULT``.\n+* Add configuration property ``hive.insert-overwrite-immutable-partitions-enabled`` to allow admin set insert overwrite\n+  as the default insertion behavior for Hive connector.\n+* Add configuration property ``hive.node-selection-strategy`` to choose ``NodeSelectionStrategy``. When ``SOFT_AFFINITY`` is selected,\n+  scheduler will make the best effort to request the same worker to fetch the same file.\n+* Remove configuration property ``hive.force-local-scheduling``. The same functionality can be achieved by setting\n+  ``hive.node-selection-strategy`` to ``HARD_AFFINITY``.\n+* Store column names and types for views in the metastore. Views in the Hive connector can now only use types supported by Hive.\n+\n+\n+Verifier Changes\n+________________\n+* Fix an issue where invalid checksum queries can be generated for certain queries containing columns of ``RowType``.\n+* Fix an issue where checksum query would fail for queries containing map columns whose key or value types are arrays or rows.\n+* Fix incorrect decision for determinism analysis of queries with top-level ``LIMIT`` clause. (:pr:`14176`).\n+* Add checks for keys, values, and cardinality sum when validating a map column.\n+* Add support to disable individual failure resolvers (:pr:`14148`).\n+* Add support to auto-resolve control checksum query failures with ``COMPILER_ERROR``, instead of skipping the verification.\n+* Add support for specifying non-deterministic catalogs by configuration property ``determinism.non-determinism-catalogs``.\n+  Queries explicitly referencing tables from those catalogs are treated as non-deterministic.\n+* Improve query performance during determinism analysis of queries with top-level ``LIMIT`` clause.\n+* Improve correctness check for floating point columns whose mean values of either the control query or the test query is closed to 0.\n+\n+\n+Druid Changes\n+_____________\n+* Add Druid Connector.\n+* Improve query performance with filter pushdown.\n+\n+\n+Geospatial Changes\n+__________________\n+* Improve :func:`ST_Points` to add support for major well-known spatial objects.\n+  :func:`ST_Points` now supports ``POINT``, ``LINESTRING``, ``POLYGON``, ``MULTIPOINT``, ``MULTILINESTRING``, ``MULTIPOLYGON`` and ``GEOMETRYCOLLECTION``.\n+* Improve :func:`ST_IsValid` and :func:`ST_IsSimple` to adhere to the ISO/OGC standards more closely.\n+  The two functions used to return the same result but may now be different. Users should check both functions to be sure their geometries are well-behaved.\n+  :func:`geometry_invalid_reason` will return different but semantically similar strings.\n+* Improve performance of :func:`ST_Intersection` by reduces the cost by returning simply the geometry if it is with an enclosing envelope.\n+  This can reduce the cost by ``10^5x`` or more for complex polygons when this occurs.\n+\n+SPI Changes\n+___________\n+* Add parameter ``NodeSelectionStrategy nodeSelectionStrategy`` in method ``ConnectorBucketNodeMap#createBucketNodeMap`` to indicate\n+  which affinity strategy to use when creating a bucket node map.\n+* Add parameter ``List<Node> sortedNodes`` in method ``ConnectorNodePartitioningProvider#getBucketNodeMap`` to provide\n+  a sorted list of nodes from which a connector can choose to perform affinity scheduling.\n+* Add enum ``NodeSelectionStrategy``. ``NO_PREFERENCE`` indicates data is remotely accessible from workers,\n+  ``HARD_AFFINITY`` to indicate data and workers are collocated, and ``SOFT_AFFINITY`` to indicate data is remotely accessible\n+  but scheduler will make the best effort to fetch the same piece of data from the same worker.\n+* Replace ``ConnectorSplit#isRemoteAccessible`` with ``isRemoteAccessible`` is true if and only if ``getNodeSelectionStrategy`` returns ``HARD_AFFINITY``.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ4OTI0MA=="}, "originalCommit": {"oid": "d6b37f119d3ccd40b4036efbb530313d8da36c4c"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY4Nzc3OQ==", "bodyText": "Add parameter NodeSelectionStrategy nodeSelectionStrategy in method ConnectorBucketNodeMap#createBucketNodeMap to indicate\nwhich affinity strategy to use when creating a bucket node map (:pr:14095).\nAdd parameter List<Node> sortedNodes in method ConnectorNodePartitioningProvider#getBucketNodeMap to provide\na list of nodes from which a connector can choose to perform affinity scheduling (:pr:14095).\nAdd enum NodeSelectionStrategy. NO_PREFERENCE indicates data is remotely accessible from workers,\nHARD_AFFINITY to indicate data and workers are collocated, and SOFT_AFFINITY to indicate data is remotely accessible (:pr:13966).\nReplace ConnectorSplit#isRemoteAccessible with isRemoteAccessible is true if and only if getNodeSelectionStrategy returns HARD_AFFINITY (:pr:13966).\nReplace ConnectorSplit#getAddresses with getPreferredNodes, to provide hints to the scheduler where to schedule splits (:pr:13966).", "url": "https://github.com/prestodb/presto/pull/14215#discussion_r390687779", "createdAt": "2020-03-11T00:37:23Z", "author": {"login": "kewang1024"}, "path": "presto-docs/src/main/sphinx/release/release-0.233.rst", "diffHunk": "@@ -0,0 +1,79 @@\n+=============\n+Release 0.233\n+=============\n+\n+General Changes\n+_______________\n+* Fix an optimizer failure introduced in ``0.229``, where a ``LIKE`` pattern is deduced into a constant, e.g., ``col LIKE 'a' and col = 'b'``.\n+* Fix ``ArbitraryOutputBuffer`` to avoid skewing output data distribution.\n+* Fix function registration for function :func:`classification_fall_out`.\n+* Add configuration property ``exchange.async-page-transport-enabled`` to turn on non-blocking IO for page transport,\n+  and add configuration property ``exchange.async-page-transport-timeout`` to set for server side timeout.\n+  Use URL prefix ``/v1/task/async`` for async page transport request.\n+* Add configuration property ``task.http-timeout-concurrency`` to improve performance of task timeout executors.\n+* Add support for soft affinity scheduling, which makes the best effort to fetch the same piece of data from the same worker,\n+  while allowing fallback to random workers if the preferred workers are too busy to handle additional splits.\n+  The feature can be turned on by ``ConnectorSplit#getNodeSelectionStrategy()``.\n+* Add soft affinity scheduling to bucketed split. It makes the best effort to fetch the same bucket data from the same worker.\n+  When using dynamic group scheduling, if the preferred workers are unavailable to handle the specific bucket splits, it will fallback to random workers.\n+* Add hash functions ``fnv1_32``, ``fnv1_64``, ``fnv1a_32``, and ``fnv1a_64``.\n+* Add IP address function :func:`ip_subnet_min`, :func:`ip_subnet_max`, :func:`ip_subnet_range`, and :func:`is_subnet_of`.\n+* Improve performance of ``StreamingAggregationOperator``.\n+\n+\n+Hive Changes\n+____________\n+* Add directory listing cache for Hive Connector.\n+* Allow server to start when ``hive.s3-file-system-type`` is set to ``HADOOP_DEFAULT``.\n+* Add configuration property ``hive.insert-overwrite-immutable-partitions-enabled`` to allow admin set insert overwrite\n+  as the default insertion behavior for Hive connector.\n+* Add configuration property ``hive.node-selection-strategy`` to choose ``NodeSelectionStrategy``. When ``SOFT_AFFINITY`` is selected,\n+  scheduler will make the best effort to request the same worker to fetch the same file.\n+* Remove configuration property ``hive.force-local-scheduling``. The same functionality can be achieved by setting\n+  ``hive.node-selection-strategy`` to ``HARD_AFFINITY``.\n+* Store column names and types for views in the metastore. Views in the Hive connector can now only use types supported by Hive.\n+\n+\n+Verifier Changes\n+________________\n+* Fix an issue where invalid checksum queries can be generated for certain queries containing columns of ``RowType``.\n+* Fix an issue where checksum query would fail for queries containing map columns whose key or value types are arrays or rows.\n+* Fix incorrect decision for determinism analysis of queries with top-level ``LIMIT`` clause. (:pr:`14176`).\n+* Add checks for keys, values, and cardinality sum when validating a map column.\n+* Add support to disable individual failure resolvers (:pr:`14148`).\n+* Add support to auto-resolve control checksum query failures with ``COMPILER_ERROR``, instead of skipping the verification.\n+* Add support for specifying non-deterministic catalogs by configuration property ``determinism.non-determinism-catalogs``.\n+  Queries explicitly referencing tables from those catalogs are treated as non-deterministic.\n+* Improve query performance during determinism analysis of queries with top-level ``LIMIT`` clause.\n+* Improve correctness check for floating point columns whose mean values of either the control query or the test query is closed to 0.\n+\n+\n+Druid Changes\n+_____________\n+* Add Druid Connector.\n+* Improve query performance with filter pushdown.\n+\n+\n+Geospatial Changes\n+__________________\n+* Improve :func:`ST_Points` to add support for major well-known spatial objects.\n+  :func:`ST_Points` now supports ``POINT``, ``LINESTRING``, ``POLYGON``, ``MULTIPOINT``, ``MULTILINESTRING``, ``MULTIPOLYGON`` and ``GEOMETRYCOLLECTION``.\n+* Improve :func:`ST_IsValid` and :func:`ST_IsSimple` to adhere to the ISO/OGC standards more closely.\n+  The two functions used to return the same result but may now be different. Users should check both functions to be sure their geometries are well-behaved.\n+  :func:`geometry_invalid_reason` will return different but semantically similar strings.\n+* Improve performance of :func:`ST_Intersection` by reduces the cost by returning simply the geometry if it is with an enclosing envelope.\n+  This can reduce the cost by ``10^5x`` or more for complex polygons when this occurs.\n+\n+SPI Changes\n+___________\n+* Add parameter ``NodeSelectionStrategy nodeSelectionStrategy`` in method ``ConnectorBucketNodeMap#createBucketNodeMap`` to indicate\n+  which affinity strategy to use when creating a bucket node map.\n+* Add parameter ``List<Node> sortedNodes`` in method ``ConnectorNodePartitioningProvider#getBucketNodeMap`` to provide\n+  a sorted list of nodes from which a connector can choose to perform affinity scheduling.\n+* Add enum ``NodeSelectionStrategy``. ``NO_PREFERENCE`` indicates data is remotely accessible from workers,\n+  ``HARD_AFFINITY`` to indicate data and workers are collocated, and ``SOFT_AFFINITY`` to indicate data is remotely accessible\n+  but scheduler will make the best effort to fetch the same piece of data from the same worker.\n+* Replace ``ConnectorSplit#isRemoteAccessible`` with ``isRemoteAccessible`` is true if and only if ``getNodeSelectionStrategy`` returns ``HARD_AFFINITY``.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ4OTI0MA=="}, "originalCommit": {"oid": "d6b37f119d3ccd40b4036efbb530313d8da36c4c"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjkxNzIzOnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/release/release-0.233.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo1MTo1OVrOFyfsUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo1MTo1OVrOFyfsUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5MjM2OA==", "bodyText": "Fix function registration for :func:classification_fall_out.", "url": "https://github.com/prestodb/presto/pull/14215#discussion_r388492368", "createdAt": "2020-03-05T18:51:59Z", "author": {"login": "bhhari"}, "path": "presto-docs/src/main/sphinx/release/release-0.233.rst", "diffHunk": "@@ -0,0 +1,79 @@\n+=============\n+Release 0.233\n+=============\n+\n+General Changes\n+_______________\n+* Fix an optimizer failure introduced in ``0.229``, where a ``LIKE`` pattern is deduced into a constant, e.g., ``col LIKE 'a' and col = 'b'``.\n+* Fix ``ArbitraryOutputBuffer`` to avoid skewing output data distribution.\n+* Fix function registration for function :func:`classification_fall_out`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6b37f119d3ccd40b4036efbb530313d8da36c4c"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzAyODIxOnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/release/release-0.233.rst", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOToyMTo1NlrOFygwwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwMzoyMzozNlrOFzaC9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUwOTg5MA==", "bodyText": "Both of these points are too specific - can we talk about the end impact? For ArbitraryOutputBuffer what kind of improvement should we see - errors or performance?\nFor function registration - does this mean the function was not usable?", "url": "https://github.com/prestodb/presto/pull/14215#discussion_r388509890", "createdAt": "2020-03-05T19:21:56Z", "author": {"login": "mayankgarg1990"}, "path": "presto-docs/src/main/sphinx/release/release-0.233.rst", "diffHunk": "@@ -0,0 +1,79 @@\n+=============\n+Release 0.233\n+=============\n+\n+General Changes\n+_______________\n+* Fix an optimizer failure introduced in ``0.229``, where a ``LIKE`` pattern is deduced into a constant, e.g., ``col LIKE 'a' and col = 'b'``.\n+* Fix ``ArbitraryOutputBuffer`` to avoid skewing output data distribution.\n+* Fix function registration for function :func:`classification_fall_out`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6b37f119d3ccd40b4036efbb530313d8da36c4c"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ0ODQzOA==", "bodyText": "@yingsu00 @wenleix Could you help improve this release note?", "url": "https://github.com/prestodb/presto/pull/14215#discussion_r389448438", "createdAt": "2020-03-09T03:23:36Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/release/release-0.233.rst", "diffHunk": "@@ -0,0 +1,79 @@\n+=============\n+Release 0.233\n+=============\n+\n+General Changes\n+_______________\n+* Fix an optimizer failure introduced in ``0.229``, where a ``LIKE`` pattern is deduced into a constant, e.g., ``col LIKE 'a' and col = 'b'``.\n+* Fix ``ArbitraryOutputBuffer`` to avoid skewing output data distribution.\n+* Fix function registration for function :func:`classification_fall_out`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUwOTg5MA=="}, "originalCommit": {"oid": "d6b37f119d3ccd40b4036efbb530313d8da36c4c"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzA0MzM3OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/release/release-0.233.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOToyNjowNVrOFyg57w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOToyNjowNVrOFyg57w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxMjIzOQ==", "bodyText": "nit: Add IP address function->s<-", "url": "https://github.com/prestodb/presto/pull/14215#discussion_r388512239", "createdAt": "2020-03-05T19:26:05Z", "author": {"login": "mayankgarg1990"}, "path": "presto-docs/src/main/sphinx/release/release-0.233.rst", "diffHunk": "@@ -0,0 +1,79 @@\n+=============\n+Release 0.233\n+=============\n+\n+General Changes\n+_______________\n+* Fix an optimizer failure introduced in ``0.229``, where a ``LIKE`` pattern is deduced into a constant, e.g., ``col LIKE 'a' and col = 'b'``.\n+* Fix ``ArbitraryOutputBuffer`` to avoid skewing output data distribution.\n+* Fix function registration for function :func:`classification_fall_out`.\n+* Add configuration property ``exchange.async-page-transport-enabled`` to turn on non-blocking IO for page transport,\n+  and add configuration property ``exchange.async-page-transport-timeout`` to set for server side timeout.\n+  Use URL prefix ``/v1/task/async`` for async page transport request.\n+* Add configuration property ``task.http-timeout-concurrency`` to improve performance of task timeout executors.\n+* Add support for soft affinity scheduling, which makes the best effort to fetch the same piece of data from the same worker,\n+  while allowing fallback to random workers if the preferred workers are too busy to handle additional splits.\n+  The feature can be turned on by ``ConnectorSplit#getNodeSelectionStrategy()``.\n+* Add soft affinity scheduling to bucketed split. It makes the best effort to fetch the same bucket data from the same worker.\n+  When using dynamic group scheduling, if the preferred workers are unavailable to handle the specific bucket splits, it will fallback to random workers.\n+* Add hash functions ``fnv1_32``, ``fnv1_64``, ``fnv1a_32``, and ``fnv1a_64``.\n+* Add IP address function :func:`ip_subnet_min`, :func:`ip_subnet_max`, :func:`ip_subnet_range`, and :func:`is_subnet_of`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6b37f119d3ccd40b4036efbb530313d8da36c4c"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzA0NTY2OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/release/release-0.233.rst", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOToyNjo0M1rOFyg7Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxOTozMTowNFrOF0d7TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxMjU5NQ==", "bodyText": "Is this by default or needs to be enabled?", "url": "https://github.com/prestodb/presto/pull/14215#discussion_r388512595", "createdAt": "2020-03-05T19:26:43Z", "author": {"login": "mayankgarg1990"}, "path": "presto-docs/src/main/sphinx/release/release-0.233.rst", "diffHunk": "@@ -0,0 +1,79 @@\n+=============\n+Release 0.233\n+=============\n+\n+General Changes\n+_______________\n+* Fix an optimizer failure introduced in ``0.229``, where a ``LIKE`` pattern is deduced into a constant, e.g., ``col LIKE 'a' and col = 'b'``.\n+* Fix ``ArbitraryOutputBuffer`` to avoid skewing output data distribution.\n+* Fix function registration for function :func:`classification_fall_out`.\n+* Add configuration property ``exchange.async-page-transport-enabled`` to turn on non-blocking IO for page transport,\n+  and add configuration property ``exchange.async-page-transport-timeout`` to set for server side timeout.\n+  Use URL prefix ``/v1/task/async`` for async page transport request.\n+* Add configuration property ``task.http-timeout-concurrency`` to improve performance of task timeout executors.\n+* Add support for soft affinity scheduling, which makes the best effort to fetch the same piece of data from the same worker,\n+  while allowing fallback to random workers if the preferred workers are too busy to handle additional splits.\n+  The feature can be turned on by ``ConnectorSplit#getNodeSelectionStrategy()``.\n+* Add soft affinity scheduling to bucketed split. It makes the best effort to fetch the same bucket data from the same worker.\n+  When using dynamic group scheduling, if the preferred workers are unavailable to handle the specific bucket splits, it will fallback to random workers.\n+* Add hash functions ``fnv1_32``, ``fnv1_64``, ``fnv1a_32``, and ``fnv1a_64``.\n+* Add IP address function :func:`ip_subnet_min`, :func:`ip_subnet_max`, :func:`ip_subnet_range`, and :func:`is_subnet_of`.\n+* Improve performance of ``StreamingAggregationOperator``.\n+\n+\n+Hive Changes\n+____________\n+* Add directory listing cache for Hive Connector.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6b37f119d3ccd40b4036efbb530313d8da36c4c"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ0ODY5Nw==", "bodyText": "@shixuan-fan Could you help improve this release note?", "url": "https://github.com/prestodb/presto/pull/14215#discussion_r389448697", "createdAt": "2020-03-09T03:25:10Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/release/release-0.233.rst", "diffHunk": "@@ -0,0 +1,79 @@\n+=============\n+Release 0.233\n+=============\n+\n+General Changes\n+_______________\n+* Fix an optimizer failure introduced in ``0.229``, where a ``LIKE`` pattern is deduced into a constant, e.g., ``col LIKE 'a' and col = 'b'``.\n+* Fix ``ArbitraryOutputBuffer`` to avoid skewing output data distribution.\n+* Fix function registration for function :func:`classification_fall_out`.\n+* Add configuration property ``exchange.async-page-transport-enabled`` to turn on non-blocking IO for page transport,\n+  and add configuration property ``exchange.async-page-transport-timeout`` to set for server side timeout.\n+  Use URL prefix ``/v1/task/async`` for async page transport request.\n+* Add configuration property ``task.http-timeout-concurrency`` to improve performance of task timeout executors.\n+* Add support for soft affinity scheduling, which makes the best effort to fetch the same piece of data from the same worker,\n+  while allowing fallback to random workers if the preferred workers are too busy to handle additional splits.\n+  The feature can be turned on by ``ConnectorSplit#getNodeSelectionStrategy()``.\n+* Add soft affinity scheduling to bucketed split. It makes the best effort to fetch the same bucket data from the same worker.\n+  When using dynamic group scheduling, if the preferred workers are unavailable to handle the specific bucket splits, it will fallback to random workers.\n+* Add hash functions ``fnv1_32``, ``fnv1_64``, ``fnv1a_32``, and ``fnv1a_64``.\n+* Add IP address function :func:`ip_subnet_min`, :func:`ip_subnet_max`, :func:`ip_subnet_range`, and :func:`is_subnet_of`.\n+* Improve performance of ``StreamingAggregationOperator``.\n+\n+\n+Hive Changes\n+____________\n+* Add directory listing cache for Hive Connector.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxMjU5NQ=="}, "originalCommit": {"oid": "d6b37f119d3ccd40b4036efbb530313d8da36c4c"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU1MDIxNw==", "bodyText": "How about:\n* Add directory listing cache for Hive Connector. It is disabled by default and could be enabled by setting ``hive.file-status-cache-tables``,  ``hive.file-status-cache-size``, ``hive.file-status-cache-expire-time``.\n\nAlso cc @zhenxiao to see if it could be further improved.", "url": "https://github.com/prestodb/presto/pull/14215#discussion_r390550217", "createdAt": "2020-03-10T19:11:59Z", "author": {"login": "shixuan-fan"}, "path": "presto-docs/src/main/sphinx/release/release-0.233.rst", "diffHunk": "@@ -0,0 +1,79 @@\n+=============\n+Release 0.233\n+=============\n+\n+General Changes\n+_______________\n+* Fix an optimizer failure introduced in ``0.229``, where a ``LIKE`` pattern is deduced into a constant, e.g., ``col LIKE 'a' and col = 'b'``.\n+* Fix ``ArbitraryOutputBuffer`` to avoid skewing output data distribution.\n+* Fix function registration for function :func:`classification_fall_out`.\n+* Add configuration property ``exchange.async-page-transport-enabled`` to turn on non-blocking IO for page transport,\n+  and add configuration property ``exchange.async-page-transport-timeout`` to set for server side timeout.\n+  Use URL prefix ``/v1/task/async`` for async page transport request.\n+* Add configuration property ``task.http-timeout-concurrency`` to improve performance of task timeout executors.\n+* Add support for soft affinity scheduling, which makes the best effort to fetch the same piece of data from the same worker,\n+  while allowing fallback to random workers if the preferred workers are too busy to handle additional splits.\n+  The feature can be turned on by ``ConnectorSplit#getNodeSelectionStrategy()``.\n+* Add soft affinity scheduling to bucketed split. It makes the best effort to fetch the same bucket data from the same worker.\n+  When using dynamic group scheduling, if the preferred workers are unavailable to handle the specific bucket splits, it will fallback to random workers.\n+* Add hash functions ``fnv1_32``, ``fnv1_64``, ``fnv1a_32``, and ``fnv1a_64``.\n+* Add IP address function :func:`ip_subnet_min`, :func:`ip_subnet_max`, :func:`ip_subnet_range`, and :func:`is_subnet_of`.\n+* Improve performance of ``StreamingAggregationOperator``.\n+\n+\n+Hive Changes\n+____________\n+* Add directory listing cache for Hive Connector.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxMjU5NQ=="}, "originalCommit": {"oid": "d6b37f119d3ccd40b4036efbb530313d8da36c4c"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU2MDU4OA==", "bodyText": "looks good to me", "url": "https://github.com/prestodb/presto/pull/14215#discussion_r390560588", "createdAt": "2020-03-10T19:31:04Z", "author": {"login": "zhenxiao"}, "path": "presto-docs/src/main/sphinx/release/release-0.233.rst", "diffHunk": "@@ -0,0 +1,79 @@\n+=============\n+Release 0.233\n+=============\n+\n+General Changes\n+_______________\n+* Fix an optimizer failure introduced in ``0.229``, where a ``LIKE`` pattern is deduced into a constant, e.g., ``col LIKE 'a' and col = 'b'``.\n+* Fix ``ArbitraryOutputBuffer`` to avoid skewing output data distribution.\n+* Fix function registration for function :func:`classification_fall_out`.\n+* Add configuration property ``exchange.async-page-transport-enabled`` to turn on non-blocking IO for page transport,\n+  and add configuration property ``exchange.async-page-transport-timeout`` to set for server side timeout.\n+  Use URL prefix ``/v1/task/async`` for async page transport request.\n+* Add configuration property ``task.http-timeout-concurrency`` to improve performance of task timeout executors.\n+* Add support for soft affinity scheduling, which makes the best effort to fetch the same piece of data from the same worker,\n+  while allowing fallback to random workers if the preferred workers are too busy to handle additional splits.\n+  The feature can be turned on by ``ConnectorSplit#getNodeSelectionStrategy()``.\n+* Add soft affinity scheduling to bucketed split. It makes the best effort to fetch the same bucket data from the same worker.\n+  When using dynamic group scheduling, if the preferred workers are unavailable to handle the specific bucket splits, it will fallback to random workers.\n+* Add hash functions ``fnv1_32``, ``fnv1_64``, ``fnv1a_32``, and ``fnv1a_64``.\n+* Add IP address function :func:`ip_subnet_min`, :func:`ip_subnet_max`, :func:`ip_subnet_range`, and :func:`is_subnet_of`.\n+* Improve performance of ``StreamingAggregationOperator``.\n+\n+\n+Hive Changes\n+____________\n+* Add directory listing cache for Hive Connector.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxMjU5NQ=="}, "originalCommit": {"oid": "d6b37f119d3ccd40b4036efbb530313d8da36c4c"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzA1MjEyOnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/release/release-0.233.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOToyODozN1rOFyg_aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOToyODozN1rOFyg_aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxMzY0Mw==", "bodyText": "to allow admin set insert overwrite -> is the intent to say to allow the admin to set insert overwrite ?", "url": "https://github.com/prestodb/presto/pull/14215#discussion_r388513643", "createdAt": "2020-03-05T19:28:37Z", "author": {"login": "mayankgarg1990"}, "path": "presto-docs/src/main/sphinx/release/release-0.233.rst", "diffHunk": "@@ -0,0 +1,79 @@\n+=============\n+Release 0.233\n+=============\n+\n+General Changes\n+_______________\n+* Fix an optimizer failure introduced in ``0.229``, where a ``LIKE`` pattern is deduced into a constant, e.g., ``col LIKE 'a' and col = 'b'``.\n+* Fix ``ArbitraryOutputBuffer`` to avoid skewing output data distribution.\n+* Fix function registration for function :func:`classification_fall_out`.\n+* Add configuration property ``exchange.async-page-transport-enabled`` to turn on non-blocking IO for page transport,\n+  and add configuration property ``exchange.async-page-transport-timeout`` to set for server side timeout.\n+  Use URL prefix ``/v1/task/async`` for async page transport request.\n+* Add configuration property ``task.http-timeout-concurrency`` to improve performance of task timeout executors.\n+* Add support for soft affinity scheduling, which makes the best effort to fetch the same piece of data from the same worker,\n+  while allowing fallback to random workers if the preferred workers are too busy to handle additional splits.\n+  The feature can be turned on by ``ConnectorSplit#getNodeSelectionStrategy()``.\n+* Add soft affinity scheduling to bucketed split. It makes the best effort to fetch the same bucket data from the same worker.\n+  When using dynamic group scheduling, if the preferred workers are unavailable to handle the specific bucket splits, it will fallback to random workers.\n+* Add hash functions ``fnv1_32``, ``fnv1_64``, ``fnv1a_32``, and ``fnv1a_64``.\n+* Add IP address function :func:`ip_subnet_min`, :func:`ip_subnet_max`, :func:`ip_subnet_range`, and :func:`is_subnet_of`.\n+* Improve performance of ``StreamingAggregationOperator``.\n+\n+\n+Hive Changes\n+____________\n+* Add directory listing cache for Hive Connector.\n+* Allow server to start when ``hive.s3-file-system-type`` is set to ``HADOOP_DEFAULT``.\n+* Add configuration property ``hive.insert-overwrite-immutable-partitions-enabled`` to allow admin set insert overwrite", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6b37f119d3ccd40b4036efbb530313d8da36c4c"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNTYyMjg4OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/release/release-0.233.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNjozMjo0MlrOFzwHvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNjozMjo0MlrOFzwHvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgxMDExMA==", "bodyText": "Add support for async page transport with non-blocking IO. This can be enabled with the exchange.async-page-transport-enabled configuration property.  Server side page transport timeout is controlled with the exchange.async-page-transport-timeout configuration property.\nAdd support to handle timeouts of http requests using multiple thread pools. This can be controlled with the task.http-timeout-concurrency configuration property.", "url": "https://github.com/prestodb/presto/pull/14215#discussion_r389810110", "createdAt": "2020-03-09T16:32:42Z", "author": {"login": "viczhang861"}, "path": "presto-docs/src/main/sphinx/release/release-0.233.rst", "diffHunk": "@@ -0,0 +1,76 @@\n+=============\n+Release 0.233\n+=============\n+\n+General Changes\n+_______________\n+* Fix an optimizer failure introduced in ``0.229``, where a ``LIKE`` pattern is deduced into a constant, e.g., ``col LIKE 'a' and col = 'b'``.\n+* Fix ``ArbitraryOutputBuffer`` to avoid skewing output data distribution.\n+* Fix an issue where :func:`classification_fall_out` cannot be found.\n+* Add configuration property ``exchange.async-page-transport-timeout`` to set for server side timeout.\n+* Add configuration property ``task.http-timeout-concurrency`` to improve performance of task timeout executors.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dfafa907c70db0a0591be0d9c8e4e65868b34db"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODkwMTAzOnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/release/release-0.233.rst", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMTozNDozOVrOF1wTzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMTozNDozOVrOF1wTzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkxMDM1MA==", "bodyText": "Extra space before period.", "url": "https://github.com/prestodb/presto/pull/14215#discussion_r391910350", "createdAt": "2020-03-12T21:34:39Z", "author": {"login": "viczhang861"}, "path": "presto-docs/src/main/sphinx/release/release-0.233.rst", "diffHunk": "@@ -0,0 +1,69 @@\n+=============\n+Release 0.233\n+=============\n+\n+General Changes\n+_______________\n+* Fix an optimizer failure introduced in ``0.229``, where a ``LIKE`` pattern is deduced into a constant, e.g., ``col LIKE 'a' and col = 'b'``.\n+* Fix ``ArbitraryOutputBuffer`` to avoid skewing output data distribution. (:pr:`14083`).\n+* Fix an issue where :func:`classification_fall_out` cannot be found.\n+* Add support for async page transport with non-blocking IO. This can be enabled by the ``exchange.async-page-transport-enabled`` configuration property .", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "161ac34a273220dadbbf91a58ad39db55f6afa31"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2864, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}