{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5OTI2ODgx", "number": 14042, "reviewThreads": {"totalCount": 50, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQyMzoyNDowNVrODcfsDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMDo1ODowOFrODeJi_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjA1OTAyOnYy", "diffSide": "RIGHT", "path": "presto-druid/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQyMzoyNDowNVrOFkkGMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQyMzoyNDowNVrOFkkGMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4NDQ2Nw==", "bodyText": "Add a comment to indicate the start of test deps.", "url": "https://github.com/prestodb/presto/pull/14042#discussion_r373884467", "createdAt": "2020-02-02T23:24:05Z", "author": {"login": "highker"}, "path": "presto-druid/pom.xml", "diffHunk": "@@ -0,0 +1,161 @@\n+<?xml version=\"1.0\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>com.facebook.presto</groupId>\n+        <artifactId>presto-root</artifactId>\n+        <version>0.232-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>presto-druid</artifactId>\n+    <description>Presto - Druid Connector</description>\n+    <packaging>presto-plugin</packaging>\n+\n+    <properties>\n+        <air.main.basedir>${project.parent.basedir}</air.main.basedir>\n+    </properties>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.apache.druid</groupId>\n+            <artifactId>druid-processing</artifactId>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>io.netty</groupId>\n+                    <artifactId>*</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.apache.druid</groupId>\n+            <artifactId>druid-core</artifactId>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>io.netty</groupId>\n+                    <artifactId>*</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>com.facebook.airlift</groupId>\n+            <artifactId>bootstrap</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>com.facebook.airlift</groupId>\n+            <artifactId>configuration</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>com.facebook.airlift</groupId>\n+            <artifactId>log</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>com.facebook.airlift</groupId>\n+            <artifactId>json</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>com.facebook.airlift</groupId>\n+            <artifactId>http-client</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>com.google.guava</groupId>\n+            <artifactId>guava</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>com.google.inject</groupId>\n+            <artifactId>guice</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>com.google.code.findbugs</groupId>\n+            <artifactId>jsr305</artifactId>\n+            <optional>true</optional>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>javax.inject</groupId>\n+            <artifactId>javax.inject</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>javax.validation</groupId>\n+            <artifactId>validation-api</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>joda-time</groupId>\n+            <artifactId>joda-time</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>com.facebook.presto.hadoop</groupId>\n+            <artifactId>hadoop-apache2</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>com.fasterxml.jackson.core</groupId>\n+            <artifactId>jackson-databind</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>com.fasterxml.jackson.core</groupId>\n+            <artifactId>jackson-core</artifactId>\n+        </dependency>\n+\n+        <!-- Presto SPI -->\n+        <dependency>\n+            <groupId>com.facebook.presto</groupId>\n+            <artifactId>presto-spi</artifactId>\n+            <scope>provided</scope>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>io.airlift</groupId>\n+            <artifactId>slice</artifactId>\n+            <scope>provided</scope>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>io.airlift</groupId>\n+            <artifactId>units</artifactId>\n+            <scope>provided</scope>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>com.fasterxml.jackson.core</groupId>\n+            <artifactId>jackson-annotations</artifactId>\n+            <scope>provided</scope>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.openjdk.jol</groupId>\n+            <artifactId>jol-core</artifactId>\n+            <scope>provided</scope>\n+        </dependency>\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d54c2dfa76c5c2ccfc8eef5c38001a5aa1fec71"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjA2NTM4OnYy", "diffSide": "RIGHT", "path": "presto-druid/src/main/java/com/facebook/presto/druid/column/DoubleColumnReader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQyMzozNzo0N1rOFkkJjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQyMzozNzo0N1rOFkkJjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4NTMyNg==", "bodyText": "not needed; same for other readers", "url": "https://github.com/prestodb/presto/pull/14042#discussion_r373885326", "createdAt": "2020-02-02T23:37:47Z", "author": {"login": "highker"}, "path": "presto-druid/src/main/java/com/facebook/presto/druid/column/DoubleColumnReader.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.druid.column;\n+\n+import com.facebook.presto.spi.block.Block;\n+import com.facebook.presto.spi.block.BlockBuilder;\n+import com.facebook.presto.spi.type.Type;\n+import org.apache.druid.segment.ColumnValueSelector;\n+\n+import java.io.IOException;\n+\n+import static com.facebook.presto.spi.type.DoubleType.DOUBLE;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+public class DoubleColumnReader\n+        implements ColumnReader\n+{\n+    private final ColumnValueSelector<Double> valueSelector;\n+\n+    public DoubleColumnReader(ColumnValueSelector valueSelector)\n+    {\n+        this.valueSelector = requireNonNull(valueSelector, \"value selector is null\");\n+    }\n+\n+    @Override\n+    public Block readBlock(Type type, int batchSize)\n+            throws IOException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d54c2dfa76c5c2ccfc8eef5c38001a5aa1fec71"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjA2NTQ4OnYy", "diffSide": "RIGHT", "path": "presto-druid/src/main/java/com/facebook/presto/druid/column/DoubleColumnReader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQyMzozNzo1NVrOFkkJnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQyMzozNzo1NVrOFkkJnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4NTM0MA==", "bodyText": "i++; same for other loops", "url": "https://github.com/prestodb/presto/pull/14042#discussion_r373885340", "createdAt": "2020-02-02T23:37:55Z", "author": {"login": "highker"}, "path": "presto-druid/src/main/java/com/facebook/presto/druid/column/DoubleColumnReader.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.druid.column;\n+\n+import com.facebook.presto.spi.block.Block;\n+import com.facebook.presto.spi.block.BlockBuilder;\n+import com.facebook.presto.spi.type.Type;\n+import org.apache.druid.segment.ColumnValueSelector;\n+\n+import java.io.IOException;\n+\n+import static com.facebook.presto.spi.type.DoubleType.DOUBLE;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+public class DoubleColumnReader\n+        implements ColumnReader\n+{\n+    private final ColumnValueSelector<Double> valueSelector;\n+\n+    public DoubleColumnReader(ColumnValueSelector valueSelector)\n+    {\n+        this.valueSelector = requireNonNull(valueSelector, \"value selector is null\");\n+    }\n+\n+    @Override\n+    public Block readBlock(Type type, int batchSize)\n+            throws IOException\n+    {\n+        checkArgument(type == DOUBLE);\n+        BlockBuilder builder = type.createBlockBuilder(null, batchSize);\n+        for (int i = 0; i < batchSize; ++i) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d54c2dfa76c5c2ccfc8eef5c38001a5aa1fec71"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjA2NTgzOnYy", "diffSide": "RIGHT", "path": "presto-druid/src/main/java/com/facebook/presto/druid/column/ColumnReader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQyMzozODo1N1rOFkkJxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQyMzozODo1N1rOFkkJxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4NTM4Mw==", "bodyText": "not necessary.", "url": "https://github.com/prestodb/presto/pull/14042#discussion_r373885383", "createdAt": "2020-02-02T23:38:57Z", "author": {"login": "highker"}, "path": "presto-druid/src/main/java/com/facebook/presto/druid/column/ColumnReader.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.druid.column;\n+\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.block.Block;\n+import com.facebook.presto.spi.type.Type;\n+import org.apache.druid.segment.ColumnValueSelector;\n+\n+import java.io.IOException;\n+\n+import static com.facebook.presto.druid.DruidErrorCode.DRUID_UNSUPPORTED_TYPE_ERROR;\n+import static com.facebook.presto.spi.type.BigintType.BIGINT;\n+import static com.facebook.presto.spi.type.DoubleType.DOUBLE;\n+import static com.facebook.presto.spi.type.RealType.REAL;\n+import static com.facebook.presto.spi.type.TimestampType.TIMESTAMP;\n+import static com.facebook.presto.spi.type.VarcharType.VARCHAR;\n+import static java.lang.String.format;\n+\n+// TODO: refactor duplicate code in column readers\n+public interface ColumnReader\n+{\n+    Block readBlock(Type type, int batchSize)\n+            throws IOException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d54c2dfa76c5c2ccfc8eef5c38001a5aa1fec71"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjA2ODMzOnYy", "diffSide": "RIGHT", "path": "presto-druid/src/main/java/com/facebook/presto/druid/column/SimpleReadableOffset.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQyMzo0NTozMFrOFkkLUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMjozNDo1M1rOFlqIXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4NTc3OA==", "bodyText": "it's weird to increment row inside getOffset. How about having this class inheriting Offset rather than ReadableOffset?", "url": "https://github.com/prestodb/presto/pull/14042#discussion_r373885778", "createdAt": "2020-02-02T23:45:30Z", "author": {"login": "highker"}, "path": "presto-druid/src/main/java/com/facebook/presto/druid/column/SimpleReadableOffset.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.druid.column;\n+\n+import org.apache.druid.query.monomorphicprocessing.RuntimeShapeInspector;\n+import org.apache.druid.segment.data.ReadableOffset;\n+\n+public class SimpleReadableOffset\n+        implements ReadableOffset\n+{\n+    private int row;\n+\n+    @Override\n+    public int getOffset()\n+    {\n+        int offset = row;\n+        ++row;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d54c2dfa76c5c2ccfc8eef5c38001a5aa1fec71"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAzMTkwMg==", "bodyText": "bad, could not inherit Offset, BaseColumn is requiring ReadableOffset in makeColumnValuesSelector:\nmakeColumnValueSelector(ReadableOffset offset);\nlet me add comment there", "url": "https://github.com/prestodb/presto/pull/14042#discussion_r375031902", "createdAt": "2020-02-05T02:34:53Z", "author": {"login": "zhenxiao"}, "path": "presto-druid/src/main/java/com/facebook/presto/druid/column/SimpleReadableOffset.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.druid.column;\n+\n+import org.apache.druid.query.monomorphicprocessing.RuntimeShapeInspector;\n+import org.apache.druid.segment.data.ReadableOffset;\n+\n+public class SimpleReadableOffset\n+        implements ReadableOffset\n+{\n+    private int row;\n+\n+    @Override\n+    public int getOffset()\n+    {\n+        int offset = row;\n+        ++row;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4NTc3OA=="}, "originalCommit": {"oid": "0d54c2dfa76c5c2ccfc8eef5c38001a5aa1fec71"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjA2ODg5OnYy", "diffSide": "RIGHT", "path": "presto-druid/src/main/java/com/facebook/presto/druid/metadata/DruidColumnInfo.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQyMzo0NjozN1rOFkkLnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwNTowOTozNVrOFmParA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4NTg1Mg==", "bodyText": "camel and lower case them", "url": "https://github.com/prestodb/presto/pull/14042#discussion_r373885852", "createdAt": "2020-02-02T23:46:37Z", "author": {"login": "highker"}, "path": "presto-druid/src/main/java/com/facebook/presto/druid/metadata/DruidColumnInfo.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.druid.metadata;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static java.util.Objects.requireNonNull;\n+\n+public class DruidColumnInfo\n+{\n+    private final String columnName;\n+    private final String dataType;\n+\n+    @JsonCreator\n+    public DruidColumnInfo(\n+            @JsonProperty(\"COLUMN_NAME\") String columnName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d54c2dfa76c5c2ccfc8eef5c38001a5aa1fec71"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY0Mjc5Ng==", "bodyText": "have to be COLUMN_NAME, it is Druid json fixed format", "url": "https://github.com/prestodb/presto/pull/14042#discussion_r375642796", "createdAt": "2020-02-06T05:09:35Z", "author": {"login": "zhenxiao"}, "path": "presto-druid/src/main/java/com/facebook/presto/druid/metadata/DruidColumnInfo.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.druid.metadata;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static java.util.Objects.requireNonNull;\n+\n+public class DruidColumnInfo\n+{\n+    private final String columnName;\n+    private final String dataType;\n+\n+    @JsonCreator\n+    public DruidColumnInfo(\n+            @JsonProperty(\"COLUMN_NAME\") String columnName,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4NTg1Mg=="}, "originalCommit": {"oid": "0d54c2dfa76c5c2ccfc8eef5c38001a5aa1fec71"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjA2OTA3OnYy", "diffSide": "RIGHT", "path": "presto-druid/src/main/java/com/facebook/presto/druid/metadata/DruidSegmentIdWrapper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQyMzo0Njo1NFrOFkkLsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwNTowOTo1N1rOFmPbAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4NTg3Mg==", "bodyText": "camel case", "url": "https://github.com/prestodb/presto/pull/14042#discussion_r373885872", "createdAt": "2020-02-02T23:46:54Z", "author": {"login": "highker"}, "path": "presto-druid/src/main/java/com/facebook/presto/druid/metadata/DruidSegmentIdWrapper.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.druid.metadata;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static java.util.Objects.requireNonNull;\n+\n+public class DruidSegmentIdWrapper\n+{\n+    private final String segmentId;\n+\n+    @JsonCreator\n+    public DruidSegmentIdWrapper(@JsonProperty(\"segment_id\") String segmentId)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d54c2dfa76c5c2ccfc8eef5c38001a5aa1fec71"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY0Mjg4MQ==", "bodyText": "have to be segment_id, druid json metadata fixed format", "url": "https://github.com/prestodb/presto/pull/14042#discussion_r375642881", "createdAt": "2020-02-06T05:09:57Z", "author": {"login": "zhenxiao"}, "path": "presto-druid/src/main/java/com/facebook/presto/druid/metadata/DruidSegmentIdWrapper.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.druid.metadata;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static java.util.Objects.requireNonNull;\n+\n+public class DruidSegmentIdWrapper\n+{\n+    private final String segmentId;\n+\n+    @JsonCreator\n+    public DruidSegmentIdWrapper(@JsonProperty(\"segment_id\") String segmentId)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4NTg3Mg=="}, "originalCommit": {"oid": "0d54c2dfa76c5c2ccfc8eef5c38001a5aa1fec71"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjA2OTI1OnYy", "diffSide": "RIGHT", "path": "presto-druid/src/main/java/com/facebook/presto/druid/metadata/DruidSegmentInfo.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQyMzo0NzoyMlrOFkkLyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQyMzo0NzoyMlrOFkkLyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4NTg5Nw==", "bodyText": "spell out Spec; same for the other one.", "url": "https://github.com/prestodb/presto/pull/14042#discussion_r373885897", "createdAt": "2020-02-02T23:47:22Z", "author": {"login": "highker"}, "path": "presto-druid/src/main/java/com/facebook/presto/druid/metadata/DruidSegmentInfo.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.druid.metadata;\n+\n+import com.facebook.presto.spi.PrestoException;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.joda.time.Interval;\n+\n+import javax.annotation.Nullable;\n+\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.druid.DruidErrorCode.DRUID_METADATA_ERROR;\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+public class DruidSegmentInfo\n+{\n+    private static final String DEEP_STORAGE_TYPE_KEY = \"type\";\n+    private static final String SEGMENT_PATH_KEY = \"path\";\n+\n+    private final String dataSource;\n+    private final Interval interval;\n+    private final String version;\n+    private final Optional<Map<String, String>> loadSpec;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d54c2dfa76c5c2ccfc8eef5c38001a5aa1fec71"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjA2OTU3OnYy", "diffSide": "RIGHT", "path": "presto-druid/src/main/java/com/facebook/presto/druid/metadata/DruidSegmentInfo.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQyMzo0ODowNFrOFkkL9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQyMzo0ODowNFrOFkkL9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4NTk0Mg==", "bodyText": "size can't be null", "url": "https://github.com/prestodb/presto/pull/14042#discussion_r373885942", "createdAt": "2020-02-02T23:48:04Z", "author": {"login": "highker"}, "path": "presto-druid/src/main/java/com/facebook/presto/druid/metadata/DruidSegmentInfo.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.druid.metadata;\n+\n+import com.facebook.presto.spi.PrestoException;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.joda.time.Interval;\n+\n+import javax.annotation.Nullable;\n+\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.druid.DruidErrorCode.DRUID_METADATA_ERROR;\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+public class DruidSegmentInfo\n+{\n+    private static final String DEEP_STORAGE_TYPE_KEY = \"type\";\n+    private static final String SEGMENT_PATH_KEY = \"path\";\n+\n+    private final String dataSource;\n+    private final Interval interval;\n+    private final String version;\n+    private final Optional<Map<String, String>> loadSpec;\n+    private final Optional<Map<String, String>> shardSpec;\n+    private final Integer binaryVersion;\n+    private final long size;\n+\n+    public enum DeepStorageType\n+    {\n+        HDFS(\"hdfs\");\n+\n+        private final String type;\n+\n+        DeepStorageType(String type)\n+        {\n+            this.type = type;\n+        }\n+    }\n+\n+    @JsonCreator\n+    public DruidSegmentInfo(\n+            @JsonProperty(\"dataSource\") String dataSource,\n+            @JsonProperty(\"interval\") Interval interval,\n+            @JsonProperty(\"version\") String version,\n+            @JsonProperty(\"loadSpec\") Optional<Map<String, String>> loadSpec,\n+            @JsonProperty(\"shardSpec\") @Nullable Optional<Map<String, String>> shardSpec,\n+            @JsonProperty(\"binaryVersion\") Integer binaryVersion,\n+            @JsonProperty(\"size\") long size)\n+    {\n+        this.dataSource = requireNonNull(dataSource, \"dataSource is null\");\n+        this.interval = requireNonNull(interval, \"interval is null\");\n+        this.version = requireNonNull(version, \"version is null\");\n+        this.loadSpec = requireNonNull(loadSpec, \"loadSpec is null\");\n+        this.shardSpec = requireNonNull(shardSpec, \"shardSpec is null\");\n+        this.binaryVersion = requireNonNull(binaryVersion, \"binaryVersion is null\");\n+        this.size = requireNonNull(size, \"size is null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d54c2dfa76c5c2ccfc8eef5c38001a5aa1fec71"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjA2OTg2OnYy", "diffSide": "RIGHT", "path": "presto-druid/src/main/java/com/facebook/presto/druid/metadata/DruidTableInfo.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQyMzo0ODo0MVrOFkkMGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwNToxMDoxOFrOFmPbZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4NTk3OQ==", "bodyText": "camel and lower case", "url": "https://github.com/prestodb/presto/pull/14042#discussion_r373885979", "createdAt": "2020-02-02T23:48:41Z", "author": {"login": "highker"}, "path": "presto-druid/src/main/java/com/facebook/presto/druid/metadata/DruidTableInfo.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.druid.metadata;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static java.util.Objects.requireNonNull;\n+\n+public class DruidTableInfo\n+{\n+    private final String tableName;\n+\n+    @JsonCreator\n+    public DruidTableInfo(@JsonProperty(\"TABLE_NAME\") String tableName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d54c2dfa76c5c2ccfc8eef5c38001a5aa1fec71"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY0Mjk4Mg==", "bodyText": "same, have to be TABLE_NAME, druid json fixed format", "url": "https://github.com/prestodb/presto/pull/14042#discussion_r375642982", "createdAt": "2020-02-06T05:10:18Z", "author": {"login": "zhenxiao"}, "path": "presto-druid/src/main/java/com/facebook/presto/druid/metadata/DruidTableInfo.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.druid.metadata;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static java.util.Objects.requireNonNull;\n+\n+public class DruidTableInfo\n+{\n+    private final String tableName;\n+\n+    @JsonCreator\n+    public DruidTableInfo(@JsonProperty(\"TABLE_NAME\") String tableName)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4NTk3OQ=="}, "originalCommit": {"oid": "0d54c2dfa76c5c2ccfc8eef5c38001a5aa1fec71"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjA3MDA0OnYy", "diffSide": "RIGHT", "path": "presto-druid/src/main/java/com/facebook/presto/druid/segment/DruidSegmentReader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQyMzo0ODo1N1rOFkkMMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQyMzo0ODo1N1rOFkkMMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4NjAwMQ==", "bodyText": "convert to local var", "url": "https://github.com/prestodb/presto/pull/14042#discussion_r373886001", "createdAt": "2020-02-02T23:48:57Z", "author": {"login": "highker"}, "path": "presto-druid/src/main/java/com/facebook/presto/druid/segment/DruidSegmentReader.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.druid.segment;\n+\n+import com.facebook.presto.druid.DruidColumnHandle;\n+import com.facebook.presto.druid.column.ColumnReader;\n+import com.facebook.presto.druid.column.SimpleReadableOffset;\n+import com.facebook.presto.spi.ColumnHandle;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.block.Block;\n+import com.facebook.presto.spi.type.Type;\n+import org.apache.druid.segment.ColumnValueSelector;\n+import org.apache.druid.segment.QueryableIndex;\n+import org.apache.druid.segment.column.BaseColumn;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.facebook.presto.druid.DruidErrorCode.DRUID_SEGMENT_LOAD_ERROR;\n+import static com.facebook.presto.druid.column.ColumnReader.createColumnReader;\n+import static java.lang.Math.min;\n+import static java.lang.Math.toIntExact;\n+\n+public class DruidSegmentReader\n+        implements SegmentReader\n+{\n+    private static final int BATCH_SIZE = 1024;\n+\n+    private final QueryableIndex queryableIndex;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d54c2dfa76c5c2ccfc8eef5c38001a5aa1fec71"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjA3MDMzOnYy", "diffSide": "RIGHT", "path": "presto-druid/src/main/java/com/facebook/presto/druid/segment/DruidSegmentReader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQyMzo0OTo0MlrOFkkMWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQyMzo0OTo0MlrOFkkMWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4NjA0Mg==", "bodyText": "Shall we build this with ImmutableMap inside constructor?", "url": "https://github.com/prestodb/presto/pull/14042#discussion_r373886042", "createdAt": "2020-02-02T23:49:42Z", "author": {"login": "highker"}, "path": "presto-druid/src/main/java/com/facebook/presto/druid/segment/DruidSegmentReader.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.druid.segment;\n+\n+import com.facebook.presto.druid.DruidColumnHandle;\n+import com.facebook.presto.druid.column.ColumnReader;\n+import com.facebook.presto.druid.column.SimpleReadableOffset;\n+import com.facebook.presto.spi.ColumnHandle;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.block.Block;\n+import com.facebook.presto.spi.type.Type;\n+import org.apache.druid.segment.ColumnValueSelector;\n+import org.apache.druid.segment.QueryableIndex;\n+import org.apache.druid.segment.column.BaseColumn;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.facebook.presto.druid.DruidErrorCode.DRUID_SEGMENT_LOAD_ERROR;\n+import static com.facebook.presto.druid.column.ColumnReader.createColumnReader;\n+import static java.lang.Math.min;\n+import static java.lang.Math.toIntExact;\n+\n+public class DruidSegmentReader\n+        implements SegmentReader\n+{\n+    private static final int BATCH_SIZE = 1024;\n+\n+    private final QueryableIndex queryableIndex;\n+    private final Map<String, ColumnReader> columnValueSelectors = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d54c2dfa76c5c2ccfc8eef5c38001a5aa1fec71"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjA3MDQxOnYy", "diffSide": "RIGHT", "path": "presto-druid/src/main/java/com/facebook/presto/druid/segment/SegmentReader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQyMzo1MDowMlrOFkkMbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQyMzo1MDowMlrOFkkMbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4NjA2Mg==", "bodyText": "not useful", "url": "https://github.com/prestodb/presto/pull/14042#discussion_r373886062", "createdAt": "2020-02-02T23:50:02Z", "author": {"login": "highker"}, "path": "presto-druid/src/main/java/com/facebook/presto/druid/segment/SegmentReader.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.druid.segment;\n+\n+import com.facebook.presto.spi.block.Block;\n+import com.facebook.presto.spi.type.Type;\n+\n+import java.io.IOException;\n+\n+public interface SegmentReader\n+{\n+    int nextBatch()\n+            throws IOException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d54c2dfa76c5c2ccfc8eef5c38001a5aa1fec71"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjA3MDQ4OnYy", "diffSide": "RIGHT", "path": "presto-druid/src/main/java/com/facebook/presto/druid/segment/SegmentReader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQyMzo1MDoxN1rOFkkMew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQyMzo1MDoxN1rOFkkMew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4NjA3NQ==", "bodyText": "same", "url": "https://github.com/prestodb/presto/pull/14042#discussion_r373886075", "createdAt": "2020-02-02T23:50:17Z", "author": {"login": "highker"}, "path": "presto-druid/src/main/java/com/facebook/presto/druid/segment/SegmentReader.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.druid.segment;\n+\n+import com.facebook.presto.spi.block.Block;\n+import com.facebook.presto.spi.type.Type;\n+\n+import java.io.IOException;\n+\n+public interface SegmentReader\n+{\n+    int nextBatch()\n+            throws IOException;\n+\n+    Block readBlock(Type type, String columnName)\n+            throws IOException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d54c2dfa76c5c2ccfc8eef5c38001a5aa1fec71"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjA3MDY2OnYy", "diffSide": "RIGHT", "path": "presto-druid/src/main/java/com/facebook/presto/druid/segment/HdfsDataInputSource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQyMzo1MDozNVrOFkkMlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQyMzo1MDozNVrOFkkMlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4NjEwMQ==", "bodyText": "never null", "url": "https://github.com/prestodb/presto/pull/14042#discussion_r373886101", "createdAt": "2020-02-02T23:50:35Z", "author": {"login": "highker"}, "path": "presto-druid/src/main/java/com/facebook/presto/druid/segment/HdfsDataInputSource.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.druid.segment;\n+\n+import com.facebook.presto.druid.DataInputSource;\n+import com.facebook.presto.druid.DataInputSourceId;\n+import com.facebook.presto.spi.PrestoException;\n+import org.apache.hadoop.fs.FSDataInputStream;\n+\n+import java.io.IOException;\n+\n+import static com.facebook.presto.druid.DruidErrorCode.DRUID_DEEP_STORAGE_ERROR;\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+public class HdfsDataInputSource\n+        implements DataInputSource\n+{\n+    private final DataInputSourceId id;\n+    private final FSDataInputStream inputStream;\n+    private final long size;\n+    private long readTimeNanos;\n+    private long readBytes;\n+\n+    public HdfsDataInputSource(\n+            DataInputSourceId id,\n+            FSDataInputStream inputStream,\n+            long size)\n+    {\n+        this.id = requireNonNull(id, \"id is null\");\n+        this.inputStream = requireNonNull(inputStream, \"inputStream is null\");\n+        this.size = requireNonNull(size, \"size is null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d54c2dfa76c5c2ccfc8eef5c38001a5aa1fec71"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjA3MTAyOnYy", "diffSide": "RIGHT", "path": "presto-druid/src/main/java/com/facebook/presto/druid/segment/SmooshedColumnSource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQyMzo1MToxM1rOFkkMyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQyMzo1MToxM1rOFkkMyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4NjE1Mw==", "bodyText": "not used", "url": "https://github.com/prestodb/presto/pull/14042#discussion_r373886153", "createdAt": "2020-02-02T23:51:13Z", "author": {"login": "highker"}, "path": "presto-druid/src/main/java/com/facebook/presto/druid/segment/SmooshedColumnSource.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.druid.segment;\n+\n+import com.facebook.presto.spi.PrestoException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.apache.druid.common.utils.SerializerUtils;\n+import org.apache.druid.jackson.DefaultObjectMapper;\n+\n+import java.io.BufferedReader;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+import static com.facebook.presto.druid.DruidErrorCode.DRUID_SEGMENT_LOAD_ERROR;\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+public class SmooshedColumnSource\n+        implements SegmentColumnSource\n+{\n+    private static final String FILE_EXTENSION = \"smoosh\";\n+    private static final String SMOOSH_METADATA_FILE_NAME = makeMetaFileName();\n+    private static final String VERSION_FILE_NAME = \"version.bin\";\n+    private static final String INDEX_METADATA_FILE_NAME = \"index.drd\";\n+    private static final String SEGMENT_METADATA_FILE_NAME = \"metadata.drd\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d54c2dfa76c5c2ccfc8eef5c38001a5aa1fec71"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjA3MTIxOnYy", "diffSide": "RIGHT", "path": "presto-druid/src/main/java/com/facebook/presto/druid/segment/SmooshedColumnSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQyMzo1MTozM1rOFkkM4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQyMzo1MTozM1rOFkkM4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4NjE3Ng==", "bodyText": "not used", "url": "https://github.com/prestodb/presto/pull/14042#discussion_r373886176", "createdAt": "2020-02-02T23:51:33Z", "author": {"login": "highker"}, "path": "presto-druid/src/main/java/com/facebook/presto/druid/segment/SmooshedColumnSource.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.druid.segment;\n+\n+import com.facebook.presto.spi.PrestoException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.apache.druid.common.utils.SerializerUtils;\n+import org.apache.druid.jackson.DefaultObjectMapper;\n+\n+import java.io.BufferedReader;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+import static com.facebook.presto.druid.DruidErrorCode.DRUID_SEGMENT_LOAD_ERROR;\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+public class SmooshedColumnSource\n+        implements SegmentColumnSource\n+{\n+    private static final String FILE_EXTENSION = \"smoosh\";\n+    private static final String SMOOSH_METADATA_FILE_NAME = makeMetaFileName();\n+    private static final String VERSION_FILE_NAME = \"version.bin\";\n+    private static final String INDEX_METADATA_FILE_NAME = \"index.drd\";\n+    private static final String SEGMENT_METADATA_FILE_NAME = \"metadata.drd\";\n+\n+    private static final ObjectMapper JSON_MAPPER = new DefaultObjectMapper();\n+    private static final SerializerUtils SERIALIZER_UTILS = new SerializerUtils();\n+\n+    private final IndexFileSource indexFileSource;\n+    private final Map<String, SmooshFileMetadata> columnSmoosh = new TreeMap<>();\n+\n+    private int numFiles;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d54c2dfa76c5c2ccfc8eef5c38001a5aa1fec71"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMjM3ODQwOnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMDo1Njo1MlrOFmG5mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMDo1Njo1MlrOFmG5mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUwMzI1OQ==", "bodyText": "Hey, since the latest version of druid is 0.17, any plans on upgrading this ?", "url": "https://github.com/prestodb/presto/pull/14042#discussion_r375503259", "createdAt": "2020-02-05T20:56:52Z", "author": {"login": "ChethanUK"}, "path": "pom.xml", "diffHunk": "@@ -64,6 +64,7 @@\n         <dep.gcs.version>1.9.17</dep.gcs.version>\n         <dep.alluxio.version>2.1.1</dep.alluxio.version>\n         <dep.kafka.version>2.3.1</dep.kafka.version>\n+        <dep.druid.version>0.15.0-incubating</dep.druid.version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77d65600491271fee6eff1d23d334c979915d246"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMjkzMDE5OnYy", "diffSide": "RIGHT", "path": "presto-druid/src/main/java/com/facebook/presto/druid/DruidClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMDo1MTozN1rOFmMLKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMTo0Mjo0OVrOFmM90Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU4OTY3NQ==", "bodyText": "wow? So you cannot have predicate like true or false in Druid??", "url": "https://github.com/prestodb/presto/pull/14042#discussion_r375589675", "createdAt": "2020-02-06T00:51:37Z", "author": {"login": "wenleix"}, "path": "presto-druid/src/main/java/com/facebook/presto/druid/DruidClient.java", "diffHunk": "@@ -0,0 +1,216 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.druid;\n+\n+import com.facebook.airlift.http.client.HttpClient;\n+import com.facebook.airlift.http.client.HttpUriBuilder;\n+import com.facebook.airlift.http.client.Request;\n+import com.facebook.airlift.json.JsonCodec;\n+import com.facebook.presto.druid.metadata.DruidColumnInfo;\n+import com.facebook.presto.druid.metadata.DruidSegmentIdWrapper;\n+import com.facebook.presto.druid.metadata.DruidSegmentInfo;\n+import com.facebook.presto.druid.metadata.DruidTableInfo;\n+import com.facebook.presto.spi.predicate.Domain;\n+import com.facebook.presto.spi.predicate.Range;\n+import com.google.common.base.Joiner;\n+import org.joda.time.Instant;\n+\n+import javax.inject.Inject;\n+\n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static com.facebook.airlift.http.client.HttpUriBuilder.uriBuilderFrom;\n+import static com.facebook.airlift.http.client.JsonResponseHandler.createJsonResponseHandler;\n+import static com.facebook.airlift.http.client.Request.Builder.prepareGet;\n+import static com.facebook.airlift.http.client.Request.Builder.preparePost;\n+import static com.facebook.airlift.http.client.StaticBodyGenerator.createStaticBodyGenerator;\n+import static com.facebook.airlift.json.JsonCodec.jsonCodec;\n+import static com.facebook.airlift.json.JsonCodec.listJsonCodec;\n+import static com.facebook.presto.spi.type.TimestampType.TIMESTAMP;\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static com.google.common.net.HttpHeaders.ACCEPT;\n+import static com.google.common.net.HttpHeaders.CONTENT_TYPE;\n+import static com.google.common.net.MediaType.JSON_UTF_8;\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+public class DruidClient\n+{\n+    private static final String ALWAYS_TRUE = \"1=1\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68028485595f3beb7247b9c928bbd5a4c54a1905"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYwMjY0MQ==", "bodyText": "yep, druid does not have boolean type", "url": "https://github.com/prestodb/presto/pull/14042#discussion_r375602641", "createdAt": "2020-02-06T01:42:49Z", "author": {"login": "zhenxiao"}, "path": "presto-druid/src/main/java/com/facebook/presto/druid/DruidClient.java", "diffHunk": "@@ -0,0 +1,216 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.druid;\n+\n+import com.facebook.airlift.http.client.HttpClient;\n+import com.facebook.airlift.http.client.HttpUriBuilder;\n+import com.facebook.airlift.http.client.Request;\n+import com.facebook.airlift.json.JsonCodec;\n+import com.facebook.presto.druid.metadata.DruidColumnInfo;\n+import com.facebook.presto.druid.metadata.DruidSegmentIdWrapper;\n+import com.facebook.presto.druid.metadata.DruidSegmentInfo;\n+import com.facebook.presto.druid.metadata.DruidTableInfo;\n+import com.facebook.presto.spi.predicate.Domain;\n+import com.facebook.presto.spi.predicate.Range;\n+import com.google.common.base.Joiner;\n+import org.joda.time.Instant;\n+\n+import javax.inject.Inject;\n+\n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static com.facebook.airlift.http.client.HttpUriBuilder.uriBuilderFrom;\n+import static com.facebook.airlift.http.client.JsonResponseHandler.createJsonResponseHandler;\n+import static com.facebook.airlift.http.client.Request.Builder.prepareGet;\n+import static com.facebook.airlift.http.client.Request.Builder.preparePost;\n+import static com.facebook.airlift.http.client.StaticBodyGenerator.createStaticBodyGenerator;\n+import static com.facebook.airlift.json.JsonCodec.jsonCodec;\n+import static com.facebook.airlift.json.JsonCodec.listJsonCodec;\n+import static com.facebook.presto.spi.type.TimestampType.TIMESTAMP;\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static com.google.common.net.HttpHeaders.ACCEPT;\n+import static com.google.common.net.HttpHeaders.CONTENT_TYPE;\n+import static com.google.common.net.MediaType.JSON_UTF_8;\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+public class DruidClient\n+{\n+    private static final String ALWAYS_TRUE = \"1=1\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU4OTY3NQ=="}, "originalCommit": {"oid": "68028485595f3beb7247b9c928bbd5a4c54a1905"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMjkzMzgwOnYy", "diffSide": "RIGHT", "path": "presto-druid/src/main/java/com/facebook/presto/druid/DruidSplitManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMDo1Mzo0MFrOFmMNaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMDo1Mzo0MFrOFmMNaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU5MDI1MQ==", "bodyText": "What does this comment mean?", "url": "https://github.com/prestodb/presto/pull/14042#discussion_r375590251", "createdAt": "2020-02-06T00:53:40Z", "author": {"login": "wenleix"}, "path": "presto-druid/src/main/java/com/facebook/presto/druid/DruidSplitManager.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.druid;\n+\n+import com.facebook.presto.spi.ColumnHandle;\n+import com.facebook.presto.spi.ConnectorSession;\n+import com.facebook.presto.spi.ConnectorSplitSource;\n+import com.facebook.presto.spi.ConnectorTableLayoutHandle;\n+import com.facebook.presto.spi.FixedSplitSource;\n+import com.facebook.presto.spi.HostAddress;\n+import com.facebook.presto.spi.connector.ConnectorSplitManager;\n+import com.facebook.presto.spi.connector.ConnectorTransactionHandle;\n+import com.facebook.presto.spi.predicate.Domain;\n+import com.facebook.presto.spi.predicate.TupleDomain;\n+\n+import javax.inject.Inject;\n+\n+import java.util.List;\n+\n+import static com.facebook.presto.spi.type.TimestampType.TIMESTAMP;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.util.Objects.requireNonNull;\n+\n+public class DruidSplitManager\n+        implements ConnectorSplitManager\n+{\n+    private final DruidClient druidClient;\n+\n+    @Inject\n+    public DruidSplitManager(DruidClient druidClient)\n+    {\n+        this.druidClient = requireNonNull(druidClient, \"druid client is null\");\n+    }\n+\n+    @Override\n+    public ConnectorSplitSource getSplits(\n+            ConnectorTransactionHandle transaction,\n+            ConnectorSession session,\n+            ConnectorTableLayoutHandle layout,\n+            SplitSchedulingContext splitSchedulingContext)\n+    {\n+        DruidTableLayoutHandle layoutHandle = (DruidTableLayoutHandle) layout;\n+        DruidTableHandle table = layoutHandle.getTable();\n+        List<String> segmentIds = getSegmentId(table);\n+\n+        // TODO: add scheduling", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68028485595f3beb7247b9c928bbd5a4c54a1905"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMjk0MzA4OnYy", "diffSide": "RIGHT", "path": "presto-druid/src/main/java/com/facebook/presto/druid/segment/ZipIndexFileSource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMDo1OTowNVrOFmMTEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMDo1OTowNVrOFmMTEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU5MTY5Nw==", "bodyText": "nit:\n        while (position - offset < length && bytesRead != -1) {", "url": "https://github.com/prestodb/presto/pull/14042#discussion_r375591697", "createdAt": "2020-02-06T00:59:05Z", "author": {"login": "wenleix"}, "path": "presto-druid/src/main/java/com/facebook/presto/druid/segment/ZipIndexFileSource.java", "diffHunk": "@@ -0,0 +1,286 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.druid.segment;\n+\n+import com.facebook.presto.druid.DataInputSource;\n+import com.facebook.presto.druid.zip.CentralDirectoryFileHeader;\n+import com.facebook.presto.druid.zip.EndOfCentralDirectoryRecord;\n+import com.facebook.presto.druid.zip.LocalFileHeader;\n+import com.facebook.presto.druid.zip.Zip64EndOfCentralDirectory;\n+import com.facebook.presto.druid.zip.Zip64EndOfCentralDirectoryLocator;\n+import com.facebook.presto.druid.zip.ZipFileData;\n+import com.facebook.presto.druid.zip.ZipFileEntry;\n+import com.facebook.presto.druid.zip.ZipUtil;\n+import com.facebook.presto.spi.PrestoException;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import java.util.Collection;\n+import java.util.zip.Inflater;\n+import java.util.zip.InflaterInputStream;\n+import java.util.zip.ZipException;\n+\n+import static com.facebook.presto.druid.DruidErrorCode.DRUID_SEGMENT_LOAD_ERROR;\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.lang.String.format;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+\n+public class ZipIndexFileSource\n+        implements IndexFileSource, Closeable, AutoCloseable\n+{\n+    private final DataInputSource dataInputSource;\n+    private final ZipFileData zipData;\n+\n+    public ZipIndexFileSource(DataInputSource dataInputSource)\n+    {\n+        this.dataInputSource = requireNonNull(dataInputSource, \"dataInputSource is null\");\n+        this.zipData = readCentralDirectory();\n+    }\n+\n+    /**\n+     * Reads file inside a zip archive\n+     */\n+    @Override\n+    public byte[] readFile(String fileName)\n+            throws IOException\n+    {\n+        ZipFileEntry entry = zipData.getEntry(fileName);\n+        if (entry == null) {\n+            throw new PrestoException(DRUID_SEGMENT_LOAD_ERROR, format(\"Zip doesn't contain file: %s\", fileName));\n+        }\n+        byte[] fileData = new byte[(int) entry.getSize()];\n+        readFully(entry, 0, fileData, 0, fileData.length);\n+        return fileData;\n+    }\n+\n+    @Override\n+    public final void readFile(String fileName, long position, byte[] buffer)\n+            throws IOException\n+    {\n+        ZipFileEntry entry = zipData.getEntry(fileName);\n+        if (entry == null) {\n+            throw new PrestoException(DRUID_SEGMENT_LOAD_ERROR, format(\"Zip doesn't contain file: %s\", fileName));\n+        }\n+        readFully(entry, position, buffer, 0, buffer.length);\n+    }\n+\n+    private void readFully(ZipFileEntry entry, long position, byte[] buffer, int bufferOffset, int bufferLength)\n+            throws IOException\n+    {\n+        long offset = entry.getLocalHeaderOffset();\n+        byte[] fileHeader = new byte[LocalFileHeader.FIXED_DATA_SIZE];\n+        dataInputSource.readFully(offset, fileHeader);\n+        offset += fileHeader.length;\n+\n+        if (!ZipUtil.arrayStartsWith(fileHeader, ZipUtil.intToLittleEndian(LocalFileHeader.SIGNATURE))) {\n+            throw new PrestoException(DRUID_SEGMENT_LOAD_ERROR,\n+                    format(\"The file '%s' is not a correctly formatted zip file: Expected a File Header at file offset %d, but was not present.\", entry.getName()));\n+        }\n+\n+        // skip name and extra field\n+        int nameLength = ZipUtil.getUnsignedShort(fileHeader, LocalFileHeader.FILENAME_LENGTH_OFFSET);\n+        int extraFieldLength = ZipUtil.getUnsignedShort(fileHeader, LocalFileHeader.EXTRA_FIELD_LENGTH_OFFSET);\n+        offset += (nameLength + extraFieldLength);\n+\n+        // deflate\n+        int compressedSize = (int) entry.getCompressedSize();\n+        byte[] compressedData = new byte[compressedSize];\n+        dataInputSource.readFully(offset, compressedData);\n+        InflaterInputStream inflaterInputStream = new InflaterInputStream(new ByteArrayInputStream(compressedData), new Inflater(true));\n+\n+        try {\n+            inflaterInputStream.skip(position);\n+            int size = chunkedRead(inflaterInputStream, buffer, bufferOffset, bufferLength);\n+            checkState(size == bufferLength);\n+        }\n+        catch (IOException e) {\n+            throw new PrestoException(DRUID_SEGMENT_LOAD_ERROR, format(\"Malformed zip file: %s\", entry.getName()));\n+        }\n+    }\n+\n+    // read inflater stream chunk by chunk\n+    private static int chunkedRead(InflaterInputStream inflaterInputStream, byte[] buffer, int offset, int length)\n+            throws IOException\n+    {\n+        int position = offset;\n+        int bytesRead = 0;\n+\n+        while (((position - offset) < length) && bytesRead != -1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68028485595f3beb7247b9c928bbd5a4c54a1905"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMjk1MDk2OnYy", "diffSide": "RIGHT", "path": "presto-druid/src/main/java/com/facebook/presto/druid/segment/SmooshedColumnSource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMTowMzozMVrOFmMXtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMTowMzozMVrOFmMXtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU5Mjg4Nw==", "bodyText": "I personally just prefer to have something like\nwhile (true) {\n      line = in.readLine();\n      if (line == null) {\n          break;\n      }\n......\n}\nBut it's just personal preference and not strong opinion here :)", "url": "https://github.com/prestodb/presto/pull/14042#discussion_r375592887", "createdAt": "2020-02-06T01:03:31Z", "author": {"login": "wenleix"}, "path": "presto-druid/src/main/java/com/facebook/presto/druid/segment/SmooshedColumnSource.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.druid.segment;\n+\n+import com.facebook.presto.spi.PrestoException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.apache.druid.common.utils.SerializerUtils;\n+import org.apache.druid.jackson.DefaultObjectMapper;\n+\n+import java.io.BufferedReader;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+import static com.facebook.presto.druid.DruidErrorCode.DRUID_SEGMENT_LOAD_ERROR;\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+public class SmooshedColumnSource\n+        implements SegmentColumnSource\n+{\n+    private static final String FILE_EXTENSION = \"smoosh\";\n+    private static final String SMOOSH_METADATA_FILE_NAME = makeMetaFileName();\n+    private static final String VERSION_FILE_NAME = \"version.bin\";\n+    private static final String INDEX_METADATA_FILE_NAME = \"index.drd\";\n+\n+    private static final ObjectMapper JSON_MAPPER = new DefaultObjectMapper();\n+    private static final SerializerUtils SERIALIZER_UTILS = new SerializerUtils();\n+\n+    private final IndexFileSource indexFileSource;\n+    private final Map<String, SmooshFileMetadata> columnSmoosh = new TreeMap<>();\n+\n+    private int numFiles;\n+\n+    public SmooshedColumnSource(IndexFileSource indexFileSource)\n+    {\n+        this.indexFileSource = requireNonNull(indexFileSource, \"indexFileSource is null\");\n+        loadSmooshFileMetadata();\n+    }\n+\n+    @Override\n+    public int getVersion()\n+    {\n+        try {\n+            return ByteBuffer.wrap(indexFileSource.readFile(VERSION_FILE_NAME)).getInt();\n+        }\n+        catch (IOException e) {\n+            throw new PrestoException(DRUID_SEGMENT_LOAD_ERROR, e);\n+        }\n+    }\n+\n+    @Override\n+    public byte[] getColumnData(String name)\n+    {\n+        SmooshFileMetadata metadata = columnSmoosh.get(name);\n+        if (metadata == null) {\n+            throw new PrestoException(DRUID_SEGMENT_LOAD_ERROR, format(\"Internal file %s doesn't exist\", name));\n+        }\n+        String fileName = makeChunkFileName(metadata.getFileNum());\n+        int fileStart = metadata.getStartOffset();\n+        int fileSize = metadata.getEndOffset() - fileStart;\n+\n+        byte[] buffer = new byte[fileSize];\n+        try {\n+            indexFileSource.readFile(fileName, fileStart, buffer);\n+        }\n+        catch (IOException e) {\n+            throw new PrestoException(DRUID_SEGMENT_LOAD_ERROR, e);\n+        }\n+        return buffer;\n+    }\n+\n+    private void loadSmooshFileMetadata()\n+    {\n+        try {\n+            byte[] metadata = indexFileSource.readFile(SMOOSH_METADATA_FILE_NAME);\n+            BufferedReader in = new BufferedReader(new InputStreamReader(new ByteArrayInputStream(metadata)));\n+            String line = in.readLine();\n+            if (line == null) {\n+                throw new PrestoException(DRUID_SEGMENT_LOAD_ERROR, format(\"Malformed metadata file: first line should be version,maxChunkSize,numChunks, got null.\"));\n+            }\n+\n+            String[] splits = line.split(\",\");\n+            if (!\"v1\".equals(splits[0])) {\n+                throw new PrestoException(DRUID_SEGMENT_LOAD_ERROR, format(\"Malformed metadata file: unknown version[%s], v1 is all I know.\", splits[0]));\n+            }\n+            if (splits.length != 3) {\n+                throw new PrestoException(DRUID_SEGMENT_LOAD_ERROR, format(\"Malformed metadata file: wrong number of splits[%d] in line[%s]\", splits.length,\n+                        line));\n+            }\n+            numFiles = Integer.valueOf(splits[2]);\n+\n+            while ((line = in.readLine()) != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68028485595f3beb7247b9c928bbd5a4c54a1905"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMjk4NzA2OnYy", "diffSide": "RIGHT", "path": "presto-druid/src/test/java/com/facebook/presto/druid/DruidQueryRunnerBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMToyNToyNlrOFmMt8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMToyNToyNlrOFmMt8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU5ODU3Nw==", "bodyText": "Maybe just make it a DruidQueryRunner like what other connectors do.", "url": "https://github.com/prestodb/presto/pull/14042#discussion_r375598577", "createdAt": "2020-02-06T01:25:26Z", "author": {"login": "highker"}, "path": "presto-druid/src/test/java/com/facebook/presto/druid/DruidQueryRunnerBuilder.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.druid;\n+\n+import com.facebook.airlift.log.Logger;\n+import com.facebook.presto.Session;\n+import com.facebook.presto.tests.DistributedQueryRunner;\n+import com.google.common.collect.ImmutableMap;\n+\n+import java.util.Map;\n+\n+import static com.facebook.presto.testing.TestingSession.testSessionBuilder;\n+import static java.lang.String.format;\n+\n+public class DruidQueryRunnerBuilder", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68028485595f3beb7247b9c928bbd5a4c54a1905"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMjk5MDEzOnYy", "diffSide": "RIGHT", "path": "presto-druid/src/main/java/com/facebook/presto/druid/segment/DruidSegmentReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMToyNzoyOVrOFmMv4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMToyNzoyOVrOFmMv4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU5OTA3NQ==", "bodyText": "this can be a local variable", "url": "https://github.com/prestodb/presto/pull/14042#discussion_r375599075", "createdAt": "2020-02-06T01:27:29Z", "author": {"login": "highker"}, "path": "presto-druid/src/main/java/com/facebook/presto/druid/segment/DruidSegmentReader.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.druid.segment;\n+\n+import com.facebook.presto.druid.DruidColumnHandle;\n+import com.facebook.presto.druid.column.ColumnReader;\n+import com.facebook.presto.druid.column.SimpleReadableOffset;\n+import com.facebook.presto.spi.ColumnHandle;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.block.Block;\n+import com.facebook.presto.spi.type.Type;\n+import com.google.common.collect.ImmutableMap;\n+import org.apache.druid.segment.ColumnValueSelector;\n+import org.apache.druid.segment.QueryableIndex;\n+import org.apache.druid.segment.column.BaseColumn;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.facebook.presto.druid.DruidErrorCode.DRUID_SEGMENT_LOAD_ERROR;\n+import static com.facebook.presto.druid.column.ColumnReader.createColumnReader;\n+import static java.lang.Math.min;\n+import static java.lang.Math.toIntExact;\n+\n+public class DruidSegmentReader\n+        implements SegmentReader\n+{\n+    private static final int BATCH_SIZE = 1024;\n+\n+    private final Map<String, ColumnReader> columnValueSelectors;\n+    private final long totalRowCount;\n+\n+    private QueryableIndex queryableIndex;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68028485595f3beb7247b9c928bbd5a4c54a1905"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMjk5MTk3OnYy", "diffSide": "RIGHT", "path": "presto-druid/src/main/java/com/facebook/presto/druid/segment/V9SegmentIndexSource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMToyODo0M1rOFmMw6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMToyODo0M1rOFmMw6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU5OTMzOA==", "bodyText": "remove final and actually this variable is not used.", "url": "https://github.com/prestodb/presto/pull/14042#discussion_r375599338", "createdAt": "2020-02-06T01:28:43Z", "author": {"login": "highker"}, "path": "presto-druid/src/main/java/com/facebook/presto/druid/segment/V9SegmentIndexSource.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.druid.segment;\n+\n+import com.facebook.airlift.log.Logger;\n+import com.facebook.presto.druid.DruidColumnHandle;\n+import com.facebook.presto.spi.ColumnHandle;\n+import com.facebook.presto.spi.PrestoException;\n+import com.fasterxml.jackson.core.JsonParseException;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.base.Supplier;\n+import com.google.common.collect.Streams;\n+import org.apache.druid.common.utils.SerializerUtils;\n+import org.apache.druid.jackson.DefaultObjectMapper;\n+import org.apache.druid.java.util.common.Intervals;\n+import org.apache.druid.segment.Metadata;\n+import org.apache.druid.segment.QueryableIndex;\n+import org.apache.druid.segment.SimpleQueryableIndex;\n+import org.apache.druid.segment.column.ColumnDescriptor;\n+import org.apache.druid.segment.column.ColumnHolder;\n+import org.apache.druid.segment.data.BitmapSerde;\n+import org.apache.druid.segment.data.BitmapSerdeFactory;\n+import org.apache.druid.segment.data.GenericIndexed;\n+import org.joda.time.Interval;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.facebook.presto.druid.DruidErrorCode.DRUID_SEGMENT_LOAD_ERROR;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.util.Objects.requireNonNull;\n+import static org.apache.druid.segment.column.ColumnHolder.TIME_COLUMN_NAME;\n+import static org.apache.druid.segment.data.GenericIndexed.STRING_STRATEGY;\n+\n+// V9 index with version 1 index.drd\n+public class V9SegmentIndexSource\n+        implements SegmentIndexSource\n+{\n+    private static final Logger log = Logger.get(V9SegmentIndexSource.class);\n+\n+    private static final String INDEX_METADATA_FILE_NAME = \"index.drd\";\n+    private static final String SEGMENT_METADATA_FILE_NAME = \"metadata.drd\";\n+\n+    private static final ObjectMapper JSON_MAPPER = new DefaultObjectMapper();\n+    private static final SerializerUtils SERIALIZER_UTILS = new SerializerUtils();\n+\n+    private final SegmentColumnSource segmentColumnSource;\n+\n+    public V9SegmentIndexSource(SegmentColumnSource segmentColumnSource)\n+    {\n+        this.segmentColumnSource = requireNonNull(segmentColumnSource, \"segmentColumnSource is null\");\n+    }\n+\n+    @Override\n+    public QueryableIndex loadIndex(List<ColumnHandle> columnHandles)\n+            throws IOException\n+    {\n+        ByteBuffer indexBuffer = ByteBuffer.wrap(segmentColumnSource.getColumnData(INDEX_METADATA_FILE_NAME));\n+        final GenericIndexed<String> allColumns = GenericIndexed.read(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68028485595f3beb7247b9c928bbd5a4c54a1905"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMjk5Mzg3OnYy", "diffSide": "RIGHT", "path": "presto-druid/src/main/java/com/facebook/presto/druid/segment/V9SegmentIndexSource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMTozMDoxMlrOFmMyLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMTozMDoxMlrOFmMyLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU5OTY2Mg==", "bodyText": "nit columns::containsKey", "url": "https://github.com/prestodb/presto/pull/14042#discussion_r375599662", "createdAt": "2020-02-06T01:30:12Z", "author": {"login": "highker"}, "path": "presto-druid/src/main/java/com/facebook/presto/druid/segment/V9SegmentIndexSource.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.druid.segment;\n+\n+import com.facebook.airlift.log.Logger;\n+import com.facebook.presto.druid.DruidColumnHandle;\n+import com.facebook.presto.spi.ColumnHandle;\n+import com.facebook.presto.spi.PrestoException;\n+import com.fasterxml.jackson.core.JsonParseException;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.base.Supplier;\n+import com.google.common.collect.Streams;\n+import org.apache.druid.common.utils.SerializerUtils;\n+import org.apache.druid.jackson.DefaultObjectMapper;\n+import org.apache.druid.java.util.common.Intervals;\n+import org.apache.druid.segment.Metadata;\n+import org.apache.druid.segment.QueryableIndex;\n+import org.apache.druid.segment.SimpleQueryableIndex;\n+import org.apache.druid.segment.column.ColumnDescriptor;\n+import org.apache.druid.segment.column.ColumnHolder;\n+import org.apache.druid.segment.data.BitmapSerde;\n+import org.apache.druid.segment.data.BitmapSerdeFactory;\n+import org.apache.druid.segment.data.GenericIndexed;\n+import org.joda.time.Interval;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.facebook.presto.druid.DruidErrorCode.DRUID_SEGMENT_LOAD_ERROR;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.util.Objects.requireNonNull;\n+import static org.apache.druid.segment.column.ColumnHolder.TIME_COLUMN_NAME;\n+import static org.apache.druid.segment.data.GenericIndexed.STRING_STRATEGY;\n+\n+// V9 index with version 1 index.drd\n+public class V9SegmentIndexSource\n+        implements SegmentIndexSource\n+{\n+    private static final Logger log = Logger.get(V9SegmentIndexSource.class);\n+\n+    private static final String INDEX_METADATA_FILE_NAME = \"index.drd\";\n+    private static final String SEGMENT_METADATA_FILE_NAME = \"metadata.drd\";\n+\n+    private static final ObjectMapper JSON_MAPPER = new DefaultObjectMapper();\n+    private static final SerializerUtils SERIALIZER_UTILS = new SerializerUtils();\n+\n+    private final SegmentColumnSource segmentColumnSource;\n+\n+    public V9SegmentIndexSource(SegmentColumnSource segmentColumnSource)\n+    {\n+        this.segmentColumnSource = requireNonNull(segmentColumnSource, \"segmentColumnSource is null\");\n+    }\n+\n+    @Override\n+    public QueryableIndex loadIndex(List<ColumnHandle> columnHandles)\n+            throws IOException\n+    {\n+        ByteBuffer indexBuffer = ByteBuffer.wrap(segmentColumnSource.getColumnData(INDEX_METADATA_FILE_NAME));\n+        final GenericIndexed<String> allColumns = GenericIndexed.read(\n+                indexBuffer,\n+                STRING_STRATEGY);\n+        GenericIndexed<String> allDimensions = GenericIndexed.read(\n+                indexBuffer,\n+                STRING_STRATEGY);\n+\n+        Interval dataInterval = Intervals.utc(indexBuffer.getLong(), indexBuffer.getLong());\n+\n+        BitmapSerdeFactory segmentBitmapSerdeFactory;\n+\n+        if (indexBuffer.hasRemaining()) {\n+            segmentBitmapSerdeFactory = JSON_MAPPER.readValue(SERIALIZER_UTILS.readString(indexBuffer), BitmapSerdeFactory.class);\n+        }\n+        else {\n+            segmentBitmapSerdeFactory = new BitmapSerde.LegacyBitmapSerdeFactory();\n+        }\n+\n+        Metadata metadata = null;\n+        ByteBuffer metadataBB = ByteBuffer.wrap(segmentColumnSource.getColumnData(SEGMENT_METADATA_FILE_NAME));\n+        try {\n+            metadata = JSON_MAPPER.readValue(SERIALIZER_UTILS.readBytes(metadataBB, metadataBB.remaining()), Metadata.class);\n+        }\n+        catch (JsonParseException | JsonMappingException e) {\n+            // Any jackson deserialization errors are ignored e.g. if metadata contains some aggregator which\n+            // is no longer supported then it is OK to not use the metadata instead of failing segment loading\n+            log.warn(e, \"Failed to load metadata for segment \");\n+        }\n+\n+        Map<String, Supplier<ColumnHolder>> columns = new HashMap<>();\n+        for (ColumnHandle columnHandle : columnHandles) {\n+            String columnName = ((DruidColumnHandle) columnHandle).getColumnName();\n+            columns.put(columnName, () -> createColumnHolder(columnName));\n+        }\n+\n+        List<String> availableDimensions = Streams.stream(allDimensions.iterator())\n+                .filter(dimension -> columns.containsKey(dimension))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68028485595f3beb7247b9c928bbd5a4c54a1905"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMjk5NDQ4OnYy", "diffSide": "RIGHT", "path": "presto-druid/src/main/java/com/facebook/presto/druid/segment/V9SegmentIndexSource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMTozMDo0M1rOFmMylQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMTozMDo0M1rOFmMylQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU5OTc2NQ==", "bodyText": "spell out metadataBB", "url": "https://github.com/prestodb/presto/pull/14042#discussion_r375599765", "createdAt": "2020-02-06T01:30:43Z", "author": {"login": "highker"}, "path": "presto-druid/src/main/java/com/facebook/presto/druid/segment/V9SegmentIndexSource.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.druid.segment;\n+\n+import com.facebook.airlift.log.Logger;\n+import com.facebook.presto.druid.DruidColumnHandle;\n+import com.facebook.presto.spi.ColumnHandle;\n+import com.facebook.presto.spi.PrestoException;\n+import com.fasterxml.jackson.core.JsonParseException;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.base.Supplier;\n+import com.google.common.collect.Streams;\n+import org.apache.druid.common.utils.SerializerUtils;\n+import org.apache.druid.jackson.DefaultObjectMapper;\n+import org.apache.druid.java.util.common.Intervals;\n+import org.apache.druid.segment.Metadata;\n+import org.apache.druid.segment.QueryableIndex;\n+import org.apache.druid.segment.SimpleQueryableIndex;\n+import org.apache.druid.segment.column.ColumnDescriptor;\n+import org.apache.druid.segment.column.ColumnHolder;\n+import org.apache.druid.segment.data.BitmapSerde;\n+import org.apache.druid.segment.data.BitmapSerdeFactory;\n+import org.apache.druid.segment.data.GenericIndexed;\n+import org.joda.time.Interval;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.facebook.presto.druid.DruidErrorCode.DRUID_SEGMENT_LOAD_ERROR;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.util.Objects.requireNonNull;\n+import static org.apache.druid.segment.column.ColumnHolder.TIME_COLUMN_NAME;\n+import static org.apache.druid.segment.data.GenericIndexed.STRING_STRATEGY;\n+\n+// V9 index with version 1 index.drd\n+public class V9SegmentIndexSource\n+        implements SegmentIndexSource\n+{\n+    private static final Logger log = Logger.get(V9SegmentIndexSource.class);\n+\n+    private static final String INDEX_METADATA_FILE_NAME = \"index.drd\";\n+    private static final String SEGMENT_METADATA_FILE_NAME = \"metadata.drd\";\n+\n+    private static final ObjectMapper JSON_MAPPER = new DefaultObjectMapper();\n+    private static final SerializerUtils SERIALIZER_UTILS = new SerializerUtils();\n+\n+    private final SegmentColumnSource segmentColumnSource;\n+\n+    public V9SegmentIndexSource(SegmentColumnSource segmentColumnSource)\n+    {\n+        this.segmentColumnSource = requireNonNull(segmentColumnSource, \"segmentColumnSource is null\");\n+    }\n+\n+    @Override\n+    public QueryableIndex loadIndex(List<ColumnHandle> columnHandles)\n+            throws IOException\n+    {\n+        ByteBuffer indexBuffer = ByteBuffer.wrap(segmentColumnSource.getColumnData(INDEX_METADATA_FILE_NAME));\n+        final GenericIndexed<String> allColumns = GenericIndexed.read(\n+                indexBuffer,\n+                STRING_STRATEGY);\n+        GenericIndexed<String> allDimensions = GenericIndexed.read(\n+                indexBuffer,\n+                STRING_STRATEGY);\n+\n+        Interval dataInterval = Intervals.utc(indexBuffer.getLong(), indexBuffer.getLong());\n+\n+        BitmapSerdeFactory segmentBitmapSerdeFactory;\n+\n+        if (indexBuffer.hasRemaining()) {\n+            segmentBitmapSerdeFactory = JSON_MAPPER.readValue(SERIALIZER_UTILS.readString(indexBuffer), BitmapSerdeFactory.class);\n+        }\n+        else {\n+            segmentBitmapSerdeFactory = new BitmapSerde.LegacyBitmapSerdeFactory();\n+        }\n+\n+        Metadata metadata = null;\n+        ByteBuffer metadataBB = ByteBuffer.wrap(segmentColumnSource.getColumnData(SEGMENT_METADATA_FILE_NAME));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68028485595f3beb7247b9c928bbd5a4c54a1905"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMjk5NTYyOnYy", "diffSide": "RIGHT", "path": "presto-druid/src/main/java/com/facebook/presto/druid/segment/ZipIndexFileSource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMTozMToyMVrOFmMzMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMTozMToyMVrOFmMzMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU5OTkyMw==", "bodyText": "put this on stack", "url": "https://github.com/prestodb/presto/pull/14042#discussion_r375599923", "createdAt": "2020-02-06T01:31:21Z", "author": {"login": "highker"}, "path": "presto-druid/src/main/java/com/facebook/presto/druid/segment/ZipIndexFileSource.java", "diffHunk": "@@ -0,0 +1,286 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.druid.segment;\n+\n+import com.facebook.presto.druid.DataInputSource;\n+import com.facebook.presto.druid.zip.CentralDirectoryFileHeader;\n+import com.facebook.presto.druid.zip.EndOfCentralDirectoryRecord;\n+import com.facebook.presto.druid.zip.LocalFileHeader;\n+import com.facebook.presto.druid.zip.Zip64EndOfCentralDirectory;\n+import com.facebook.presto.druid.zip.Zip64EndOfCentralDirectoryLocator;\n+import com.facebook.presto.druid.zip.ZipFileData;\n+import com.facebook.presto.druid.zip.ZipFileEntry;\n+import com.facebook.presto.druid.zip.ZipUtil;\n+import com.facebook.presto.spi.PrestoException;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import java.util.Collection;\n+import java.util.zip.Inflater;\n+import java.util.zip.InflaterInputStream;\n+import java.util.zip.ZipException;\n+\n+import static com.facebook.presto.druid.DruidErrorCode.DRUID_SEGMENT_LOAD_ERROR;\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.lang.String.format;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+\n+public class ZipIndexFileSource\n+        implements IndexFileSource, Closeable, AutoCloseable\n+{\n+    private final DataInputSource dataInputSource;\n+    private final ZipFileData zipData;\n+\n+    public ZipIndexFileSource(DataInputSource dataInputSource)\n+    {\n+        this.dataInputSource = requireNonNull(dataInputSource, \"dataInputSource is null\");\n+        this.zipData = readCentralDirectory();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68028485595f3beb7247b9c928bbd5a4c54a1905"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMjk5NjM2OnYy", "diffSide": "RIGHT", "path": "presto-druid/src/main/java/com/facebook/presto/druid/segment/ZipIndexFileSource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMTozMTo0OFrOFmMzpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMTozMTo0OFrOFmMzpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYwMDAzNg==", "bodyText": "format argument does not match.", "url": "https://github.com/prestodb/presto/pull/14042#discussion_r375600036", "createdAt": "2020-02-06T01:31:48Z", "author": {"login": "highker"}, "path": "presto-druid/src/main/java/com/facebook/presto/druid/segment/ZipIndexFileSource.java", "diffHunk": "@@ -0,0 +1,286 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.druid.segment;\n+\n+import com.facebook.presto.druid.DataInputSource;\n+import com.facebook.presto.druid.zip.CentralDirectoryFileHeader;\n+import com.facebook.presto.druid.zip.EndOfCentralDirectoryRecord;\n+import com.facebook.presto.druid.zip.LocalFileHeader;\n+import com.facebook.presto.druid.zip.Zip64EndOfCentralDirectory;\n+import com.facebook.presto.druid.zip.Zip64EndOfCentralDirectoryLocator;\n+import com.facebook.presto.druid.zip.ZipFileData;\n+import com.facebook.presto.druid.zip.ZipFileEntry;\n+import com.facebook.presto.druid.zip.ZipUtil;\n+import com.facebook.presto.spi.PrestoException;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import java.util.Collection;\n+import java.util.zip.Inflater;\n+import java.util.zip.InflaterInputStream;\n+import java.util.zip.ZipException;\n+\n+import static com.facebook.presto.druid.DruidErrorCode.DRUID_SEGMENT_LOAD_ERROR;\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.lang.String.format;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+\n+public class ZipIndexFileSource\n+        implements IndexFileSource, Closeable, AutoCloseable\n+{\n+    private final DataInputSource dataInputSource;\n+    private final ZipFileData zipData;\n+\n+    public ZipIndexFileSource(DataInputSource dataInputSource)\n+    {\n+        this.dataInputSource = requireNonNull(dataInputSource, \"dataInputSource is null\");\n+        this.zipData = readCentralDirectory();\n+    }\n+\n+    /**\n+     * Reads file inside a zip archive\n+     */\n+    @Override\n+    public byte[] readFile(String fileName)\n+            throws IOException\n+    {\n+        ZipFileEntry entry = zipData.getEntry(fileName);\n+        if (entry == null) {\n+            throw new PrestoException(DRUID_SEGMENT_LOAD_ERROR, format(\"Zip doesn't contain file: %s\", fileName));\n+        }\n+        byte[] fileData = new byte[(int) entry.getSize()];\n+        readFully(entry, 0, fileData, 0, fileData.length);\n+        return fileData;\n+    }\n+\n+    @Override\n+    public final void readFile(String fileName, long position, byte[] buffer)\n+            throws IOException\n+    {\n+        ZipFileEntry entry = zipData.getEntry(fileName);\n+        if (entry == null) {\n+            throw new PrestoException(DRUID_SEGMENT_LOAD_ERROR, format(\"Zip doesn't contain file: %s\", fileName));\n+        }\n+        readFully(entry, position, buffer, 0, buffer.length);\n+    }\n+\n+    private void readFully(ZipFileEntry entry, long position, byte[] buffer, int bufferOffset, int bufferLength)\n+            throws IOException\n+    {\n+        long offset = entry.getLocalHeaderOffset();\n+        byte[] fileHeader = new byte[LocalFileHeader.FIXED_DATA_SIZE];\n+        dataInputSource.readFully(offset, fileHeader);\n+        offset += fileHeader.length;\n+\n+        if (!ZipUtil.arrayStartsWith(fileHeader, ZipUtil.intToLittleEndian(LocalFileHeader.SIGNATURE))) {\n+            throw new PrestoException(DRUID_SEGMENT_LOAD_ERROR,\n+                    format(\"The file '%s' is not a correctly formatted zip file: Expected a File Header at file offset %d, but was not present.\", entry.getName()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68028485595f3beb7247b9c928bbd5a4c54a1905"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMjk5NjYyOnYy", "diffSide": "RIGHT", "path": "presto-druid/src/main/java/com/facebook/presto/druid/segment/ZipIndexFileSource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMTozMjowNFrOFmMz1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMTozMjowNFrOFmMz1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYwMDA4NQ==", "bodyText": "move  DRUID_SEGMENT_LOAD_ERROR to its own line", "url": "https://github.com/prestodb/presto/pull/14042#discussion_r375600085", "createdAt": "2020-02-06T01:32:04Z", "author": {"login": "highker"}, "path": "presto-druid/src/main/java/com/facebook/presto/druid/segment/ZipIndexFileSource.java", "diffHunk": "@@ -0,0 +1,286 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.druid.segment;\n+\n+import com.facebook.presto.druid.DataInputSource;\n+import com.facebook.presto.druid.zip.CentralDirectoryFileHeader;\n+import com.facebook.presto.druid.zip.EndOfCentralDirectoryRecord;\n+import com.facebook.presto.druid.zip.LocalFileHeader;\n+import com.facebook.presto.druid.zip.Zip64EndOfCentralDirectory;\n+import com.facebook.presto.druid.zip.Zip64EndOfCentralDirectoryLocator;\n+import com.facebook.presto.druid.zip.ZipFileData;\n+import com.facebook.presto.druid.zip.ZipFileEntry;\n+import com.facebook.presto.druid.zip.ZipUtil;\n+import com.facebook.presto.spi.PrestoException;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import java.util.Collection;\n+import java.util.zip.Inflater;\n+import java.util.zip.InflaterInputStream;\n+import java.util.zip.ZipException;\n+\n+import static com.facebook.presto.druid.DruidErrorCode.DRUID_SEGMENT_LOAD_ERROR;\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.lang.String.format;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+\n+public class ZipIndexFileSource\n+        implements IndexFileSource, Closeable, AutoCloseable\n+{\n+    private final DataInputSource dataInputSource;\n+    private final ZipFileData zipData;\n+\n+    public ZipIndexFileSource(DataInputSource dataInputSource)\n+    {\n+        this.dataInputSource = requireNonNull(dataInputSource, \"dataInputSource is null\");\n+        this.zipData = readCentralDirectory();\n+    }\n+\n+    /**\n+     * Reads file inside a zip archive\n+     */\n+    @Override\n+    public byte[] readFile(String fileName)\n+            throws IOException\n+    {\n+        ZipFileEntry entry = zipData.getEntry(fileName);\n+        if (entry == null) {\n+            throw new PrestoException(DRUID_SEGMENT_LOAD_ERROR, format(\"Zip doesn't contain file: %s\", fileName));\n+        }\n+        byte[] fileData = new byte[(int) entry.getSize()];\n+        readFully(entry, 0, fileData, 0, fileData.length);\n+        return fileData;\n+    }\n+\n+    @Override\n+    public final void readFile(String fileName, long position, byte[] buffer)\n+            throws IOException\n+    {\n+        ZipFileEntry entry = zipData.getEntry(fileName);\n+        if (entry == null) {\n+            throw new PrestoException(DRUID_SEGMENT_LOAD_ERROR, format(\"Zip doesn't contain file: %s\", fileName));\n+        }\n+        readFully(entry, position, buffer, 0, buffer.length);\n+    }\n+\n+    private void readFully(ZipFileEntry entry, long position, byte[] buffer, int bufferOffset, int bufferLength)\n+            throws IOException\n+    {\n+        long offset = entry.getLocalHeaderOffset();\n+        byte[] fileHeader = new byte[LocalFileHeader.FIXED_DATA_SIZE];\n+        dataInputSource.readFully(offset, fileHeader);\n+        offset += fileHeader.length;\n+\n+        if (!ZipUtil.arrayStartsWith(fileHeader, ZipUtil.intToLittleEndian(LocalFileHeader.SIGNATURE))) {\n+            throw new PrestoException(DRUID_SEGMENT_LOAD_ERROR,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68028485595f3beb7247b9c928bbd5a4c54a1905"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMjk5NzQxOnYy", "diffSide": "RIGHT", "path": "presto-druid/src/main/java/com/facebook/presto/druid/segment/ZipIndexFileSource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMTozMjozNVrOFmM0Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMTozMjozNVrOFmM0Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYwMDIxOA==", "bodyText": "not used", "url": "https://github.com/prestodb/presto/pull/14042#discussion_r375600218", "createdAt": "2020-02-06T01:32:35Z", "author": {"login": "highker"}, "path": "presto-druid/src/main/java/com/facebook/presto/druid/segment/ZipIndexFileSource.java", "diffHunk": "@@ -0,0 +1,286 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.druid.segment;\n+\n+import com.facebook.presto.druid.DataInputSource;\n+import com.facebook.presto.druid.zip.CentralDirectoryFileHeader;\n+import com.facebook.presto.druid.zip.EndOfCentralDirectoryRecord;\n+import com.facebook.presto.druid.zip.LocalFileHeader;\n+import com.facebook.presto.druid.zip.Zip64EndOfCentralDirectory;\n+import com.facebook.presto.druid.zip.Zip64EndOfCentralDirectoryLocator;\n+import com.facebook.presto.druid.zip.ZipFileData;\n+import com.facebook.presto.druid.zip.ZipFileEntry;\n+import com.facebook.presto.druid.zip.ZipUtil;\n+import com.facebook.presto.spi.PrestoException;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import java.util.Collection;\n+import java.util.zip.Inflater;\n+import java.util.zip.InflaterInputStream;\n+import java.util.zip.ZipException;\n+\n+import static com.facebook.presto.druid.DruidErrorCode.DRUID_SEGMENT_LOAD_ERROR;\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.lang.String.format;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+\n+public class ZipIndexFileSource\n+        implements IndexFileSource, Closeable, AutoCloseable\n+{\n+    private final DataInputSource dataInputSource;\n+    private final ZipFileData zipData;\n+\n+    public ZipIndexFileSource(DataInputSource dataInputSource)\n+    {\n+        this.dataInputSource = requireNonNull(dataInputSource, \"dataInputSource is null\");\n+        this.zipData = readCentralDirectory();\n+    }\n+\n+    /**\n+     * Reads file inside a zip archive\n+     */\n+    @Override\n+    public byte[] readFile(String fileName)\n+            throws IOException\n+    {\n+        ZipFileEntry entry = zipData.getEntry(fileName);\n+        if (entry == null) {\n+            throw new PrestoException(DRUID_SEGMENT_LOAD_ERROR, format(\"Zip doesn't contain file: %s\", fileName));\n+        }\n+        byte[] fileData = new byte[(int) entry.getSize()];\n+        readFully(entry, 0, fileData, 0, fileData.length);\n+        return fileData;\n+    }\n+\n+    @Override\n+    public final void readFile(String fileName, long position, byte[] buffer)\n+            throws IOException\n+    {\n+        ZipFileEntry entry = zipData.getEntry(fileName);\n+        if (entry == null) {\n+            throw new PrestoException(DRUID_SEGMENT_LOAD_ERROR, format(\"Zip doesn't contain file: %s\", fileName));\n+        }\n+        readFully(entry, position, buffer, 0, buffer.length);\n+    }\n+\n+    private void readFully(ZipFileEntry entry, long position, byte[] buffer, int bufferOffset, int bufferLength)\n+            throws IOException\n+    {\n+        long offset = entry.getLocalHeaderOffset();\n+        byte[] fileHeader = new byte[LocalFileHeader.FIXED_DATA_SIZE];\n+        dataInputSource.readFully(offset, fileHeader);\n+        offset += fileHeader.length;\n+\n+        if (!ZipUtil.arrayStartsWith(fileHeader, ZipUtil.intToLittleEndian(LocalFileHeader.SIGNATURE))) {\n+            throw new PrestoException(DRUID_SEGMENT_LOAD_ERROR,\n+                    format(\"The file '%s' is not a correctly formatted zip file: Expected a File Header at file offset %d, but was not present.\", entry.getName()));\n+        }\n+\n+        // skip name and extra field\n+        int nameLength = ZipUtil.getUnsignedShort(fileHeader, LocalFileHeader.FILENAME_LENGTH_OFFSET);\n+        int extraFieldLength = ZipUtil.getUnsignedShort(fileHeader, LocalFileHeader.EXTRA_FIELD_LENGTH_OFFSET);\n+        offset += (nameLength + extraFieldLength);\n+\n+        // deflate\n+        int compressedSize = (int) entry.getCompressedSize();\n+        byte[] compressedData = new byte[compressedSize];\n+        dataInputSource.readFully(offset, compressedData);\n+        InflaterInputStream inflaterInputStream = new InflaterInputStream(new ByteArrayInputStream(compressedData), new Inflater(true));\n+\n+        try {\n+            inflaterInputStream.skip(position);\n+            int size = chunkedRead(inflaterInputStream, buffer, bufferOffset, bufferLength);\n+            checkState(size == bufferLength);\n+        }\n+        catch (IOException e) {\n+            throw new PrestoException(DRUID_SEGMENT_LOAD_ERROR, format(\"Malformed zip file: %s\", entry.getName()));\n+        }\n+    }\n+\n+    // read inflater stream chunk by chunk\n+    private static int chunkedRead(InflaterInputStream inflaterInputStream, byte[] buffer, int offset, int length)\n+            throws IOException\n+    {\n+        int position = offset;\n+        int bytesRead = 0;\n+\n+        while (((position - offset) < length) && bytesRead != -1) {\n+            bytesRead = inflaterInputStream.read(buffer, position, offset + length - position);\n+            if (bytesRead > 0) {\n+                position += bytesRead;\n+            }\n+        }\n+\n+        return position - offset;\n+    }\n+\n+    public final ZipFileEntry getFileEntry(String fileName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68028485595f3beb7247b9c928bbd5a4c54a1905"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMjk5NzU3OnYy", "diffSide": "RIGHT", "path": "presto-druid/src/main/java/com/facebook/presto/druid/segment/ZipIndexFileSource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMTozMjo0MFrOFmM0bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMTozMjo0MFrOFmM0bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYwMDIzOQ==", "bodyText": "not used", "url": "https://github.com/prestodb/presto/pull/14042#discussion_r375600239", "createdAt": "2020-02-06T01:32:40Z", "author": {"login": "highker"}, "path": "presto-druid/src/main/java/com/facebook/presto/druid/segment/ZipIndexFileSource.java", "diffHunk": "@@ -0,0 +1,286 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.druid.segment;\n+\n+import com.facebook.presto.druid.DataInputSource;\n+import com.facebook.presto.druid.zip.CentralDirectoryFileHeader;\n+import com.facebook.presto.druid.zip.EndOfCentralDirectoryRecord;\n+import com.facebook.presto.druid.zip.LocalFileHeader;\n+import com.facebook.presto.druid.zip.Zip64EndOfCentralDirectory;\n+import com.facebook.presto.druid.zip.Zip64EndOfCentralDirectoryLocator;\n+import com.facebook.presto.druid.zip.ZipFileData;\n+import com.facebook.presto.druid.zip.ZipFileEntry;\n+import com.facebook.presto.druid.zip.ZipUtil;\n+import com.facebook.presto.spi.PrestoException;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import java.util.Collection;\n+import java.util.zip.Inflater;\n+import java.util.zip.InflaterInputStream;\n+import java.util.zip.ZipException;\n+\n+import static com.facebook.presto.druid.DruidErrorCode.DRUID_SEGMENT_LOAD_ERROR;\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.lang.String.format;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+\n+public class ZipIndexFileSource\n+        implements IndexFileSource, Closeable, AutoCloseable\n+{\n+    private final DataInputSource dataInputSource;\n+    private final ZipFileData zipData;\n+\n+    public ZipIndexFileSource(DataInputSource dataInputSource)\n+    {\n+        this.dataInputSource = requireNonNull(dataInputSource, \"dataInputSource is null\");\n+        this.zipData = readCentralDirectory();\n+    }\n+\n+    /**\n+     * Reads file inside a zip archive\n+     */\n+    @Override\n+    public byte[] readFile(String fileName)\n+            throws IOException\n+    {\n+        ZipFileEntry entry = zipData.getEntry(fileName);\n+        if (entry == null) {\n+            throw new PrestoException(DRUID_SEGMENT_LOAD_ERROR, format(\"Zip doesn't contain file: %s\", fileName));\n+        }\n+        byte[] fileData = new byte[(int) entry.getSize()];\n+        readFully(entry, 0, fileData, 0, fileData.length);\n+        return fileData;\n+    }\n+\n+    @Override\n+    public final void readFile(String fileName, long position, byte[] buffer)\n+            throws IOException\n+    {\n+        ZipFileEntry entry = zipData.getEntry(fileName);\n+        if (entry == null) {\n+            throw new PrestoException(DRUID_SEGMENT_LOAD_ERROR, format(\"Zip doesn't contain file: %s\", fileName));\n+        }\n+        readFully(entry, position, buffer, 0, buffer.length);\n+    }\n+\n+    private void readFully(ZipFileEntry entry, long position, byte[] buffer, int bufferOffset, int bufferLength)\n+            throws IOException\n+    {\n+        long offset = entry.getLocalHeaderOffset();\n+        byte[] fileHeader = new byte[LocalFileHeader.FIXED_DATA_SIZE];\n+        dataInputSource.readFully(offset, fileHeader);\n+        offset += fileHeader.length;\n+\n+        if (!ZipUtil.arrayStartsWith(fileHeader, ZipUtil.intToLittleEndian(LocalFileHeader.SIGNATURE))) {\n+            throw new PrestoException(DRUID_SEGMENT_LOAD_ERROR,\n+                    format(\"The file '%s' is not a correctly formatted zip file: Expected a File Header at file offset %d, but was not present.\", entry.getName()));\n+        }\n+\n+        // skip name and extra field\n+        int nameLength = ZipUtil.getUnsignedShort(fileHeader, LocalFileHeader.FILENAME_LENGTH_OFFSET);\n+        int extraFieldLength = ZipUtil.getUnsignedShort(fileHeader, LocalFileHeader.EXTRA_FIELD_LENGTH_OFFSET);\n+        offset += (nameLength + extraFieldLength);\n+\n+        // deflate\n+        int compressedSize = (int) entry.getCompressedSize();\n+        byte[] compressedData = new byte[compressedSize];\n+        dataInputSource.readFully(offset, compressedData);\n+        InflaterInputStream inflaterInputStream = new InflaterInputStream(new ByteArrayInputStream(compressedData), new Inflater(true));\n+\n+        try {\n+            inflaterInputStream.skip(position);\n+            int size = chunkedRead(inflaterInputStream, buffer, bufferOffset, bufferLength);\n+            checkState(size == bufferLength);\n+        }\n+        catch (IOException e) {\n+            throw new PrestoException(DRUID_SEGMENT_LOAD_ERROR, format(\"Malformed zip file: %s\", entry.getName()));\n+        }\n+    }\n+\n+    // read inflater stream chunk by chunk\n+    private static int chunkedRead(InflaterInputStream inflaterInputStream, byte[] buffer, int offset, int length)\n+            throws IOException\n+    {\n+        int position = offset;\n+        int bytesRead = 0;\n+\n+        while (((position - offset) < length) && bytesRead != -1) {\n+            bytesRead = inflaterInputStream.read(buffer, position, offset + length - position);\n+            if (bytesRead > 0) {\n+                position += bytesRead;\n+            }\n+        }\n+\n+        return position - offset;\n+    }\n+\n+    public final ZipFileEntry getFileEntry(String fileName)\n+    {\n+        return zipData.getEntry(fileName);\n+    }\n+\n+    public Collection<ZipFileEntry> getFileEntry()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68028485595f3beb7247b9c928bbd5a4c54a1905"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMjk5ODE1OnYy", "diffSide": "RIGHT", "path": "presto-druid/src/main/java/com/facebook/presto/druid/segment/ZipIndexFileSource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMTozMzowN1rOFmM02g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMTozMzowN1rOFmM02g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYwMDM0Ng==", "bodyText": "spell out eocd", "url": "https://github.com/prestodb/presto/pull/14042#discussion_r375600346", "createdAt": "2020-02-06T01:33:07Z", "author": {"login": "highker"}, "path": "presto-druid/src/main/java/com/facebook/presto/druid/segment/ZipIndexFileSource.java", "diffHunk": "@@ -0,0 +1,286 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.druid.segment;\n+\n+import com.facebook.presto.druid.DataInputSource;\n+import com.facebook.presto.druid.zip.CentralDirectoryFileHeader;\n+import com.facebook.presto.druid.zip.EndOfCentralDirectoryRecord;\n+import com.facebook.presto.druid.zip.LocalFileHeader;\n+import com.facebook.presto.druid.zip.Zip64EndOfCentralDirectory;\n+import com.facebook.presto.druid.zip.Zip64EndOfCentralDirectoryLocator;\n+import com.facebook.presto.druid.zip.ZipFileData;\n+import com.facebook.presto.druid.zip.ZipFileEntry;\n+import com.facebook.presto.druid.zip.ZipUtil;\n+import com.facebook.presto.spi.PrestoException;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import java.util.Collection;\n+import java.util.zip.Inflater;\n+import java.util.zip.InflaterInputStream;\n+import java.util.zip.ZipException;\n+\n+import static com.facebook.presto.druid.DruidErrorCode.DRUID_SEGMENT_LOAD_ERROR;\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.lang.String.format;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+\n+public class ZipIndexFileSource\n+        implements IndexFileSource, Closeable, AutoCloseable\n+{\n+    private final DataInputSource dataInputSource;\n+    private final ZipFileData zipData;\n+\n+    public ZipIndexFileSource(DataInputSource dataInputSource)\n+    {\n+        this.dataInputSource = requireNonNull(dataInputSource, \"dataInputSource is null\");\n+        this.zipData = readCentralDirectory();\n+    }\n+\n+    /**\n+     * Reads file inside a zip archive\n+     */\n+    @Override\n+    public byte[] readFile(String fileName)\n+            throws IOException\n+    {\n+        ZipFileEntry entry = zipData.getEntry(fileName);\n+        if (entry == null) {\n+            throw new PrestoException(DRUID_SEGMENT_LOAD_ERROR, format(\"Zip doesn't contain file: %s\", fileName));\n+        }\n+        byte[] fileData = new byte[(int) entry.getSize()];\n+        readFully(entry, 0, fileData, 0, fileData.length);\n+        return fileData;\n+    }\n+\n+    @Override\n+    public final void readFile(String fileName, long position, byte[] buffer)\n+            throws IOException\n+    {\n+        ZipFileEntry entry = zipData.getEntry(fileName);\n+        if (entry == null) {\n+            throw new PrestoException(DRUID_SEGMENT_LOAD_ERROR, format(\"Zip doesn't contain file: %s\", fileName));\n+        }\n+        readFully(entry, position, buffer, 0, buffer.length);\n+    }\n+\n+    private void readFully(ZipFileEntry entry, long position, byte[] buffer, int bufferOffset, int bufferLength)\n+            throws IOException\n+    {\n+        long offset = entry.getLocalHeaderOffset();\n+        byte[] fileHeader = new byte[LocalFileHeader.FIXED_DATA_SIZE];\n+        dataInputSource.readFully(offset, fileHeader);\n+        offset += fileHeader.length;\n+\n+        if (!ZipUtil.arrayStartsWith(fileHeader, ZipUtil.intToLittleEndian(LocalFileHeader.SIGNATURE))) {\n+            throw new PrestoException(DRUID_SEGMENT_LOAD_ERROR,\n+                    format(\"The file '%s' is not a correctly formatted zip file: Expected a File Header at file offset %d, but was not present.\", entry.getName()));\n+        }\n+\n+        // skip name and extra field\n+        int nameLength = ZipUtil.getUnsignedShort(fileHeader, LocalFileHeader.FILENAME_LENGTH_OFFSET);\n+        int extraFieldLength = ZipUtil.getUnsignedShort(fileHeader, LocalFileHeader.EXTRA_FIELD_LENGTH_OFFSET);\n+        offset += (nameLength + extraFieldLength);\n+\n+        // deflate\n+        int compressedSize = (int) entry.getCompressedSize();\n+        byte[] compressedData = new byte[compressedSize];\n+        dataInputSource.readFully(offset, compressedData);\n+        InflaterInputStream inflaterInputStream = new InflaterInputStream(new ByteArrayInputStream(compressedData), new Inflater(true));\n+\n+        try {\n+            inflaterInputStream.skip(position);\n+            int size = chunkedRead(inflaterInputStream, buffer, bufferOffset, bufferLength);\n+            checkState(size == bufferLength);\n+        }\n+        catch (IOException e) {\n+            throw new PrestoException(DRUID_SEGMENT_LOAD_ERROR, format(\"Malformed zip file: %s\", entry.getName()));\n+        }\n+    }\n+\n+    // read inflater stream chunk by chunk\n+    private static int chunkedRead(InflaterInputStream inflaterInputStream, byte[] buffer, int offset, int length)\n+            throws IOException\n+    {\n+        int position = offset;\n+        int bytesRead = 0;\n+\n+        while (((position - offset) < length) && bytesRead != -1) {\n+            bytesRead = inflaterInputStream.read(buffer, position, offset + length - position);\n+            if (bytesRead > 0) {\n+                position += bytesRead;\n+            }\n+        }\n+\n+        return position - offset;\n+    }\n+\n+    public final ZipFileEntry getFileEntry(String fileName)\n+    {\n+        return zipData.getEntry(fileName);\n+    }\n+\n+    public Collection<ZipFileEntry> getFileEntry()\n+    {\n+        return zipData.getEntries();\n+    }\n+\n+    /**\n+     * Finds, reads and parses ZIP file entries from the central directory.\n+     */\n+    private ZipFileData readCentralDirectory()\n+    {\n+        try {\n+            long eocdLocation = findEndOfCentralDirectoryRecord();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68028485595f3beb7247b9c928bbd5a4c54a1905"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMzAwMDUzOnYy", "diffSide": "RIGHT", "path": "presto-druid/src/main/java/com/facebook/presto/druid/zip/ZipFileData.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMTozNDozN1rOFmM2UQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMTozNDozN1rOFmM2UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYwMDcyMQ==", "bodyText": "nit\n                    int commentLength = ZipUtil.getUnsignedShort(\n                            buffer,\n                            signatureLocation + EndOfCentralDirectoryRecord.COMMENT_LENGTH_OFFSET);", "url": "https://github.com/prestodb/presto/pull/14042#discussion_r375600721", "createdAt": "2020-02-06T01:34:37Z", "author": {"login": "highker"}, "path": "presto-druid/src/main/java/com/facebook/presto/druid/zip/ZipFileData.java", "diffHunk": "@@ -0,0 +1,348 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+// Copyright 2015 The Bazel Authors. All rights reserved.\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+package com.facebook.presto.druid.zip;\n+\n+import com.facebook.presto.druid.DataInputSource;\n+import com.facebook.presto.spi.PrestoException;\n+\n+import javax.annotation.Nullable;\n+\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import java.util.Collection;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.zip.ZipException;\n+\n+import static com.facebook.presto.druid.DruidErrorCode.DRUID_SEGMENT_LOAD_ERROR;\n+import static java.lang.String.format;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * A representation of a ZIP file. Contains the file comment, encoding, and entries. Also contains\n+ * internal information about the structure and location of ZIP file parts.\n+ */\n+public class ZipFileData\n+{\n+    private final Charset charset;\n+    private String comment;\n+\n+    private long centralDirectorySize;\n+    private long centralDirectoryOffset;\n+    private long expectedEntries;\n+    private long numEntries;\n+    private final Map<String, ZipFileEntry> entries;\n+\n+    private boolean maybeZip64;\n+    private boolean isZip64;\n+    private long zip64EndOfCentralDirectoryOffset;\n+\n+    public ZipFileData(Charset charset)\n+    {\n+        if (charset == null) {\n+            throw new NullPointerException();\n+        }\n+        this.charset = charset;\n+        comment = \"\";\n+        entries = new LinkedHashMap<>();\n+    }\n+\n+    public Charset getCharset()\n+    {\n+        return charset;\n+    }\n+\n+    public String getComment()\n+    {\n+        return comment;\n+    }\n+\n+    public void setComment(byte[] comment)\n+    {\n+        if (comment == null) {\n+            throw new NullPointerException();\n+        }\n+        if (comment.length > 0xffff) {\n+            throw new PrestoException(DRUID_SEGMENT_LOAD_ERROR, format(\"File comment too long. Is %d; max %d.\", comment.length, 0xffff));\n+        }\n+        this.comment = fromBytes(comment);\n+    }\n+\n+    public void setComment(String comment)\n+    {\n+        setComment(getBytes(comment));\n+    }\n+\n+    public long getCentralDirectorySize()\n+    {\n+        return centralDirectorySize;\n+    }\n+\n+    public void setCentralDirectorySize(long centralDirectorySize)\n+    {\n+        this.centralDirectorySize = centralDirectorySize;\n+        if (centralDirectorySize > 0xffffffffL) {\n+            setZip64(true);\n+        }\n+    }\n+\n+    public long getCentralDirectoryOffset()\n+    {\n+        return centralDirectoryOffset;\n+    }\n+\n+    public void setCentralDirectoryOffset(long offset)\n+    {\n+        this.centralDirectoryOffset = offset;\n+        if (centralDirectoryOffset > 0xffffffffL) {\n+            setZip64(true);\n+        }\n+    }\n+\n+    public long getExpectedEntries()\n+    {\n+        return expectedEntries;\n+    }\n+\n+    public void setExpectedEntries(long count)\n+    {\n+        this.expectedEntries = count;\n+        if (expectedEntries > 0xffff) {\n+            setZip64(true);\n+        }\n+    }\n+\n+    public long getNumEntries()\n+    {\n+        return numEntries;\n+    }\n+\n+    private void setNumEntries(long numEntries)\n+    {\n+        this.numEntries = numEntries;\n+        if (numEntries > 0xffff) {\n+            setZip64(true);\n+        }\n+    }\n+\n+    public Collection<ZipFileEntry> getEntries()\n+    {\n+        return entries.values();\n+    }\n+\n+    public ZipFileEntry getEntry(@Nullable String name)\n+    {\n+        return entries.get(name);\n+    }\n+\n+    public void addEntry(ZipFileEntry entry)\n+    {\n+        entries.put(entry.getName(), entry);\n+        setNumEntries(numEntries + 1);\n+        if (entry.getFeatureSet().contains(ZipFileEntry.Feature.ZIP64_SIZE)\n+                || entry.getFeatureSet().contains(ZipFileEntry.Feature.ZIP64_CSIZE)\n+                || entry.getFeatureSet().contains(ZipFileEntry.Feature.ZIP64_OFFSET)) {\n+            setZip64(true);\n+        }\n+    }\n+\n+    public boolean isMaybeZip64()\n+    {\n+        return maybeZip64;\n+    }\n+\n+    public void setMaybeZip64(boolean maybeZip64)\n+    {\n+        this.maybeZip64 = maybeZip64;\n+    }\n+\n+    public boolean isZip64()\n+    {\n+        return isZip64;\n+    }\n+\n+    public void setZip64(boolean isZip64)\n+    {\n+        this.isZip64 = isZip64;\n+        setMaybeZip64(true);\n+    }\n+\n+    public long getZip64EndOfCentralDirectoryOffset()\n+    {\n+        return zip64EndOfCentralDirectoryOffset;\n+    }\n+\n+    public void setZip64EndOfCentralDirectoryOffset(long offset)\n+    {\n+        this.zip64EndOfCentralDirectoryOffset = offset;\n+        setZip64(true);\n+    }\n+\n+    public byte[] getBytes(String string)\n+    {\n+        return string.getBytes(charset);\n+    }\n+\n+    public String fromBytes(byte[] bytes)\n+    {\n+        return new String(bytes, charset);\n+    }\n+\n+    /**\n+     * Finds, reads and parses ZIP file entries from the central directory.\n+     */\n+    public ZipFileData createZipFileData(DataInputSource dataInputSource)\n+            throws IOException\n+    {\n+        long eocdLocation = findEndOfCentralDirectoryRecord(dataInputSource);\n+        ZipFileData fileData = new ZipFileData(UTF_8);\n+        EndOfCentralDirectoryRecord.read(fileData, dataInputSource, eocdLocation);\n+\n+        if (fileData.isMaybeZip64()) {\n+            try {\n+                Zip64EndOfCentralDirectoryLocator.read(fileData, dataInputSource, eocdLocation - Zip64EndOfCentralDirectoryLocator.FIXED_DATA_SIZE);\n+                Zip64EndOfCentralDirectory.read(fileData, dataInputSource, fileData.getZip64EndOfCentralDirectoryOffset());\n+            }\n+            catch (ZipException e) {\n+                // expected if not in Zip64 format\n+            }\n+        }\n+\n+        if (fileData.isZip64()) {\n+            // If in Zip64 format or using strict entry numbers, use the parsed information as is to read\n+            // the central directory file headers.\n+            readCentralDirectoryFileHeaders(fileData, dataInputSource, fileData.getCentralDirectoryOffset(), fileData.getCharset(), fileData.getExpectedEntries());\n+        }\n+        else {\n+            // If not in Zip64 format, compute central directory offset by end of central directory record\n+            // offset and central directory size to allow reading large non-compliant Zip32 directories.\n+            long centralDirectoryOffset = eocdLocation - fileData.getCentralDirectorySize();\n+            // If the lower 4 bytes match, the above calculation is correct; otherwise fallback to\n+            // reported offset.\n+            if ((int) centralDirectoryOffset == (int) fileData.getCentralDirectoryOffset()) {\n+                readCentralDirectoryFileHeaders(fileData, dataInputSource, centralDirectoryOffset, fileData.getCharset());\n+            }\n+            else {\n+                readCentralDirectoryFileHeaders(fileData, dataInputSource, fileData.getCentralDirectoryOffset(), fileData.getCharset(), fileData.getExpectedEntries());\n+            }\n+        }\n+        return fileData;\n+    }\n+\n+    /**\n+     * Finds the file offset of the end of central directory record.\n+     */\n+    private long findEndOfCentralDirectoryRecord(DataInputSource dataInputSource)\n+            throws IOException\n+    {\n+        long fileSize = dataInputSource.getSize();\n+        byte[] signature = ZipUtil.intToLittleEndian(EndOfCentralDirectoryRecord.SIGNATURE);\n+        byte[] buffer = new byte[(int) Math.min(64, fileSize)];\n+        int readLength = buffer.length;\n+        if (readLength < EndOfCentralDirectoryRecord.FIXED_DATA_SIZE) {\n+            throw new PrestoException(DRUID_SEGMENT_LOAD_ERROR, format(\"Zip file '%s' is malformed. It does not contain an end of central directory record.\", dataInputSource.getId()));\n+        }\n+\n+        long offset = fileSize - buffer.length;\n+        while (offset >= 0) {\n+            dataInputSource.readFully(offset, buffer, 0, readLength);\n+            int signatureLocation = scanBackwards(signature, buffer, buffer.length);\n+            while (signatureLocation != -1) {\n+                long eocdSize = fileSize - offset - signatureLocation;\n+                if (eocdSize >= EndOfCentralDirectoryRecord.FIXED_DATA_SIZE) {\n+                    int commentLength = ZipUtil.getUnsignedShort(buffer, signatureLocation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68028485595f3beb7247b9c928bbd5a4c54a1905"}, "originalPosition": 277}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMzAwMDk0OnYy", "diffSide": "RIGHT", "path": "presto-druid/src/main/java/com/facebook/presto/druid/zip/ZipFileData.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMTozNDo1M1rOFmM2jA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMTozNDo1M1rOFmM2jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYwMDc4MA==", "bodyText": "i++", "url": "https://github.com/prestodb/presto/pull/14042#discussion_r375600780", "createdAt": "2020-02-06T01:34:53Z", "author": {"login": "highker"}, "path": "presto-druid/src/main/java/com/facebook/presto/druid/zip/ZipFileData.java", "diffHunk": "@@ -0,0 +1,348 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+// Copyright 2015 The Bazel Authors. All rights reserved.\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+package com.facebook.presto.druid.zip;\n+\n+import com.facebook.presto.druid.DataInputSource;\n+import com.facebook.presto.spi.PrestoException;\n+\n+import javax.annotation.Nullable;\n+\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import java.util.Collection;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.zip.ZipException;\n+\n+import static com.facebook.presto.druid.DruidErrorCode.DRUID_SEGMENT_LOAD_ERROR;\n+import static java.lang.String.format;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * A representation of a ZIP file. Contains the file comment, encoding, and entries. Also contains\n+ * internal information about the structure and location of ZIP file parts.\n+ */\n+public class ZipFileData\n+{\n+    private final Charset charset;\n+    private String comment;\n+\n+    private long centralDirectorySize;\n+    private long centralDirectoryOffset;\n+    private long expectedEntries;\n+    private long numEntries;\n+    private final Map<String, ZipFileEntry> entries;\n+\n+    private boolean maybeZip64;\n+    private boolean isZip64;\n+    private long zip64EndOfCentralDirectoryOffset;\n+\n+    public ZipFileData(Charset charset)\n+    {\n+        if (charset == null) {\n+            throw new NullPointerException();\n+        }\n+        this.charset = charset;\n+        comment = \"\";\n+        entries = new LinkedHashMap<>();\n+    }\n+\n+    public Charset getCharset()\n+    {\n+        return charset;\n+    }\n+\n+    public String getComment()\n+    {\n+        return comment;\n+    }\n+\n+    public void setComment(byte[] comment)\n+    {\n+        if (comment == null) {\n+            throw new NullPointerException();\n+        }\n+        if (comment.length > 0xffff) {\n+            throw new PrestoException(DRUID_SEGMENT_LOAD_ERROR, format(\"File comment too long. Is %d; max %d.\", comment.length, 0xffff));\n+        }\n+        this.comment = fromBytes(comment);\n+    }\n+\n+    public void setComment(String comment)\n+    {\n+        setComment(getBytes(comment));\n+    }\n+\n+    public long getCentralDirectorySize()\n+    {\n+        return centralDirectorySize;\n+    }\n+\n+    public void setCentralDirectorySize(long centralDirectorySize)\n+    {\n+        this.centralDirectorySize = centralDirectorySize;\n+        if (centralDirectorySize > 0xffffffffL) {\n+            setZip64(true);\n+        }\n+    }\n+\n+    public long getCentralDirectoryOffset()\n+    {\n+        return centralDirectoryOffset;\n+    }\n+\n+    public void setCentralDirectoryOffset(long offset)\n+    {\n+        this.centralDirectoryOffset = offset;\n+        if (centralDirectoryOffset > 0xffffffffL) {\n+            setZip64(true);\n+        }\n+    }\n+\n+    public long getExpectedEntries()\n+    {\n+        return expectedEntries;\n+    }\n+\n+    public void setExpectedEntries(long count)\n+    {\n+        this.expectedEntries = count;\n+        if (expectedEntries > 0xffff) {\n+            setZip64(true);\n+        }\n+    }\n+\n+    public long getNumEntries()\n+    {\n+        return numEntries;\n+    }\n+\n+    private void setNumEntries(long numEntries)\n+    {\n+        this.numEntries = numEntries;\n+        if (numEntries > 0xffff) {\n+            setZip64(true);\n+        }\n+    }\n+\n+    public Collection<ZipFileEntry> getEntries()\n+    {\n+        return entries.values();\n+    }\n+\n+    public ZipFileEntry getEntry(@Nullable String name)\n+    {\n+        return entries.get(name);\n+    }\n+\n+    public void addEntry(ZipFileEntry entry)\n+    {\n+        entries.put(entry.getName(), entry);\n+        setNumEntries(numEntries + 1);\n+        if (entry.getFeatureSet().contains(ZipFileEntry.Feature.ZIP64_SIZE)\n+                || entry.getFeatureSet().contains(ZipFileEntry.Feature.ZIP64_CSIZE)\n+                || entry.getFeatureSet().contains(ZipFileEntry.Feature.ZIP64_OFFSET)) {\n+            setZip64(true);\n+        }\n+    }\n+\n+    public boolean isMaybeZip64()\n+    {\n+        return maybeZip64;\n+    }\n+\n+    public void setMaybeZip64(boolean maybeZip64)\n+    {\n+        this.maybeZip64 = maybeZip64;\n+    }\n+\n+    public boolean isZip64()\n+    {\n+        return isZip64;\n+    }\n+\n+    public void setZip64(boolean isZip64)\n+    {\n+        this.isZip64 = isZip64;\n+        setMaybeZip64(true);\n+    }\n+\n+    public long getZip64EndOfCentralDirectoryOffset()\n+    {\n+        return zip64EndOfCentralDirectoryOffset;\n+    }\n+\n+    public void setZip64EndOfCentralDirectoryOffset(long offset)\n+    {\n+        this.zip64EndOfCentralDirectoryOffset = offset;\n+        setZip64(true);\n+    }\n+\n+    public byte[] getBytes(String string)\n+    {\n+        return string.getBytes(charset);\n+    }\n+\n+    public String fromBytes(byte[] bytes)\n+    {\n+        return new String(bytes, charset);\n+    }\n+\n+    /**\n+     * Finds, reads and parses ZIP file entries from the central directory.\n+     */\n+    public ZipFileData createZipFileData(DataInputSource dataInputSource)\n+            throws IOException\n+    {\n+        long eocdLocation = findEndOfCentralDirectoryRecord(dataInputSource);\n+        ZipFileData fileData = new ZipFileData(UTF_8);\n+        EndOfCentralDirectoryRecord.read(fileData, dataInputSource, eocdLocation);\n+\n+        if (fileData.isMaybeZip64()) {\n+            try {\n+                Zip64EndOfCentralDirectoryLocator.read(fileData, dataInputSource, eocdLocation - Zip64EndOfCentralDirectoryLocator.FIXED_DATA_SIZE);\n+                Zip64EndOfCentralDirectory.read(fileData, dataInputSource, fileData.getZip64EndOfCentralDirectoryOffset());\n+            }\n+            catch (ZipException e) {\n+                // expected if not in Zip64 format\n+            }\n+        }\n+\n+        if (fileData.isZip64()) {\n+            // If in Zip64 format or using strict entry numbers, use the parsed information as is to read\n+            // the central directory file headers.\n+            readCentralDirectoryFileHeaders(fileData, dataInputSource, fileData.getCentralDirectoryOffset(), fileData.getCharset(), fileData.getExpectedEntries());\n+        }\n+        else {\n+            // If not in Zip64 format, compute central directory offset by end of central directory record\n+            // offset and central directory size to allow reading large non-compliant Zip32 directories.\n+            long centralDirectoryOffset = eocdLocation - fileData.getCentralDirectorySize();\n+            // If the lower 4 bytes match, the above calculation is correct; otherwise fallback to\n+            // reported offset.\n+            if ((int) centralDirectoryOffset == (int) fileData.getCentralDirectoryOffset()) {\n+                readCentralDirectoryFileHeaders(fileData, dataInputSource, centralDirectoryOffset, fileData.getCharset());\n+            }\n+            else {\n+                readCentralDirectoryFileHeaders(fileData, dataInputSource, fileData.getCentralDirectoryOffset(), fileData.getCharset(), fileData.getExpectedEntries());\n+            }\n+        }\n+        return fileData;\n+    }\n+\n+    /**\n+     * Finds the file offset of the end of central directory record.\n+     */\n+    private long findEndOfCentralDirectoryRecord(DataInputSource dataInputSource)\n+            throws IOException\n+    {\n+        long fileSize = dataInputSource.getSize();\n+        byte[] signature = ZipUtil.intToLittleEndian(EndOfCentralDirectoryRecord.SIGNATURE);\n+        byte[] buffer = new byte[(int) Math.min(64, fileSize)];\n+        int readLength = buffer.length;\n+        if (readLength < EndOfCentralDirectoryRecord.FIXED_DATA_SIZE) {\n+            throw new PrestoException(DRUID_SEGMENT_LOAD_ERROR, format(\"Zip file '%s' is malformed. It does not contain an end of central directory record.\", dataInputSource.getId()));\n+        }\n+\n+        long offset = fileSize - buffer.length;\n+        while (offset >= 0) {\n+            dataInputSource.readFully(offset, buffer, 0, readLength);\n+            int signatureLocation = scanBackwards(signature, buffer, buffer.length);\n+            while (signatureLocation != -1) {\n+                long eocdSize = fileSize - offset - signatureLocation;\n+                if (eocdSize >= EndOfCentralDirectoryRecord.FIXED_DATA_SIZE) {\n+                    int commentLength = ZipUtil.getUnsignedShort(buffer, signatureLocation\n+                            + EndOfCentralDirectoryRecord.COMMENT_LENGTH_OFFSET);\n+                    long readCommentLength = eocdSize - EndOfCentralDirectoryRecord.FIXED_DATA_SIZE;\n+                    if (commentLength == readCommentLength) {\n+                        return offset + signatureLocation;\n+                    }\n+                }\n+                signatureLocation = scanBackwards(signature, buffer, signatureLocation - 1);\n+            }\n+            readLength = buffer.length - 3;\n+            buffer[buffer.length - 3] = buffer[0];\n+            buffer[buffer.length - 2] = buffer[1];\n+            buffer[buffer.length - 1] = buffer[2];\n+            offset -= readLength;\n+        }\n+        throw new PrestoException(DRUID_SEGMENT_LOAD_ERROR, format(\"Zip file '%s' is malformed. It does not contain an end of central directory record.\", dataInputSource.getId()));\n+    }\n+\n+    /**\n+     * Reads and parses ZIP file entries from the central directory.\n+     */\n+    private void readCentralDirectoryFileHeaders(ZipFileData fileData, DataInputSource dataInputSource, long fileOffset, Charset charset, long count)\n+            throws IOException\n+    {\n+        try {\n+            long position = fileOffset;\n+            for (long i = 0; i < count; ++i) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68028485595f3beb7247b9c928bbd5a4c54a1905"}, "originalPosition": 303}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMzAwMTExOnYy", "diffSide": "RIGHT", "path": "presto-druid/src/main/java/com/facebook/presto/druid/DruidSegmentPageSource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMTozNTowMVrOFmM2qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMTozNTowMVrOFmM2qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYwMDgxMA==", "bodyText": "same", "url": "https://github.com/prestodb/presto/pull/14042#discussion_r375600810", "createdAt": "2020-02-06T01:35:01Z", "author": {"login": "highker"}, "path": "presto-druid/src/main/java/com/facebook/presto/druid/DruidSegmentPageSource.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.druid;\n+\n+import com.facebook.presto.druid.metadata.DruidSegmentInfo;\n+import com.facebook.presto.druid.segment.DruidSegmentReader;\n+import com.facebook.presto.spi.ColumnHandle;\n+import com.facebook.presto.spi.ConnectorPageSource;\n+import com.facebook.presto.spi.Page;\n+import com.facebook.presto.spi.block.Block;\n+import com.facebook.presto.spi.block.LazyBlock;\n+import com.facebook.presto.spi.block.LazyBlockLoader;\n+import com.facebook.presto.spi.type.Type;\n+\n+import java.util.List;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.util.Objects.requireNonNull;\n+\n+public class DruidSegmentPageSource\n+        implements ConnectorPageSource\n+{\n+    private final DruidSegmentInfo segmentInfo;\n+    private final List<ColumnHandle> columns;\n+    private final DruidSegmentReader segmentReader;\n+\n+    private int batchId;\n+    private boolean closed;\n+    private long completedBytes;\n+    private long completedPositions;\n+\n+    public DruidSegmentPageSource(\n+            DruidSegmentInfo segmentInfo,\n+            List<ColumnHandle> columns,\n+            DruidSegmentReader segmentReader)\n+    {\n+        this.segmentInfo = requireNonNull(segmentInfo, \"segment info is null\");\n+        this.columns = requireNonNull(columns, \"columns is null\");\n+        this.segmentReader = requireNonNull(segmentReader, \"segmentReader is null\");\n+    }\n+\n+    @Override\n+    public long getCompletedBytes()\n+    {\n+        return completedBytes;\n+    }\n+\n+    @Override\n+    public long getCompletedPositions()\n+    {\n+        return completedPositions;\n+    }\n+\n+    @Override\n+    public long getReadTimeNanos()\n+    {\n+        return 0;\n+    }\n+\n+    @Override\n+    public boolean isFinished()\n+    {\n+        return closed;\n+    }\n+\n+    @Override\n+    public Page getNextPage()\n+    {\n+        batchId++;\n+        int batchSize = segmentReader.nextBatch();\n+        if (batchSize <= 0) {\n+            close();\n+            return null;\n+        }\n+        Block[] blocks = new Block[columns.size()];\n+        for (int i = 0; i < blocks.length; ++i) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68028485595f3beb7247b9c928bbd5a4c54a1905"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMzAwMTQwOnYy", "diffSide": "RIGHT", "path": "presto-druid/src/main/java/com/facebook/presto/druid/segment/ZipIndexFileSource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMTozNToxNFrOFmM24w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMTozNToxNFrOFmM24w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYwMDg2Nw==", "bodyText": "same", "url": "https://github.com/prestodb/presto/pull/14042#discussion_r375600867", "createdAt": "2020-02-06T01:35:14Z", "author": {"login": "highker"}, "path": "presto-druid/src/main/java/com/facebook/presto/druid/segment/ZipIndexFileSource.java", "diffHunk": "@@ -0,0 +1,286 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.druid.segment;\n+\n+import com.facebook.presto.druid.DataInputSource;\n+import com.facebook.presto.druid.zip.CentralDirectoryFileHeader;\n+import com.facebook.presto.druid.zip.EndOfCentralDirectoryRecord;\n+import com.facebook.presto.druid.zip.LocalFileHeader;\n+import com.facebook.presto.druid.zip.Zip64EndOfCentralDirectory;\n+import com.facebook.presto.druid.zip.Zip64EndOfCentralDirectoryLocator;\n+import com.facebook.presto.druid.zip.ZipFileData;\n+import com.facebook.presto.druid.zip.ZipFileEntry;\n+import com.facebook.presto.druid.zip.ZipUtil;\n+import com.facebook.presto.spi.PrestoException;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import java.util.Collection;\n+import java.util.zip.Inflater;\n+import java.util.zip.InflaterInputStream;\n+import java.util.zip.ZipException;\n+\n+import static com.facebook.presto.druid.DruidErrorCode.DRUID_SEGMENT_LOAD_ERROR;\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.lang.String.format;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+\n+public class ZipIndexFileSource\n+        implements IndexFileSource, Closeable, AutoCloseable\n+{\n+    private final DataInputSource dataInputSource;\n+    private final ZipFileData zipData;\n+\n+    public ZipIndexFileSource(DataInputSource dataInputSource)\n+    {\n+        this.dataInputSource = requireNonNull(dataInputSource, \"dataInputSource is null\");\n+        this.zipData = readCentralDirectory();\n+    }\n+\n+    /**\n+     * Reads file inside a zip archive\n+     */\n+    @Override\n+    public byte[] readFile(String fileName)\n+            throws IOException\n+    {\n+        ZipFileEntry entry = zipData.getEntry(fileName);\n+        if (entry == null) {\n+            throw new PrestoException(DRUID_SEGMENT_LOAD_ERROR, format(\"Zip doesn't contain file: %s\", fileName));\n+        }\n+        byte[] fileData = new byte[(int) entry.getSize()];\n+        readFully(entry, 0, fileData, 0, fileData.length);\n+        return fileData;\n+    }\n+\n+    @Override\n+    public final void readFile(String fileName, long position, byte[] buffer)\n+            throws IOException\n+    {\n+        ZipFileEntry entry = zipData.getEntry(fileName);\n+        if (entry == null) {\n+            throw new PrestoException(DRUID_SEGMENT_LOAD_ERROR, format(\"Zip doesn't contain file: %s\", fileName));\n+        }\n+        readFully(entry, position, buffer, 0, buffer.length);\n+    }\n+\n+    private void readFully(ZipFileEntry entry, long position, byte[] buffer, int bufferOffset, int bufferLength)\n+            throws IOException\n+    {\n+        long offset = entry.getLocalHeaderOffset();\n+        byte[] fileHeader = new byte[LocalFileHeader.FIXED_DATA_SIZE];\n+        dataInputSource.readFully(offset, fileHeader);\n+        offset += fileHeader.length;\n+\n+        if (!ZipUtil.arrayStartsWith(fileHeader, ZipUtil.intToLittleEndian(LocalFileHeader.SIGNATURE))) {\n+            throw new PrestoException(DRUID_SEGMENT_LOAD_ERROR,\n+                    format(\"The file '%s' is not a correctly formatted zip file: Expected a File Header at file offset %d, but was not present.\", entry.getName()));\n+        }\n+\n+        // skip name and extra field\n+        int nameLength = ZipUtil.getUnsignedShort(fileHeader, LocalFileHeader.FILENAME_LENGTH_OFFSET);\n+        int extraFieldLength = ZipUtil.getUnsignedShort(fileHeader, LocalFileHeader.EXTRA_FIELD_LENGTH_OFFSET);\n+        offset += (nameLength + extraFieldLength);\n+\n+        // deflate\n+        int compressedSize = (int) entry.getCompressedSize();\n+        byte[] compressedData = new byte[compressedSize];\n+        dataInputSource.readFully(offset, compressedData);\n+        InflaterInputStream inflaterInputStream = new InflaterInputStream(new ByteArrayInputStream(compressedData), new Inflater(true));\n+\n+        try {\n+            inflaterInputStream.skip(position);\n+            int size = chunkedRead(inflaterInputStream, buffer, bufferOffset, bufferLength);\n+            checkState(size == bufferLength);\n+        }\n+        catch (IOException e) {\n+            throw new PrestoException(DRUID_SEGMENT_LOAD_ERROR, format(\"Malformed zip file: %s\", entry.getName()));\n+        }\n+    }\n+\n+    // read inflater stream chunk by chunk\n+    private static int chunkedRead(InflaterInputStream inflaterInputStream, byte[] buffer, int offset, int length)\n+            throws IOException\n+    {\n+        int position = offset;\n+        int bytesRead = 0;\n+\n+        while (((position - offset) < length) && bytesRead != -1) {\n+            bytesRead = inflaterInputStream.read(buffer, position, offset + length - position);\n+            if (bytesRead > 0) {\n+                position += bytesRead;\n+            }\n+        }\n+\n+        return position - offset;\n+    }\n+\n+    public final ZipFileEntry getFileEntry(String fileName)\n+    {\n+        return zipData.getEntry(fileName);\n+    }\n+\n+    public Collection<ZipFileEntry> getFileEntry()\n+    {\n+        return zipData.getEntries();\n+    }\n+\n+    /**\n+     * Finds, reads and parses ZIP file entries from the central directory.\n+     */\n+    private ZipFileData readCentralDirectory()\n+    {\n+        try {\n+            long eocdLocation = findEndOfCentralDirectoryRecord();\n+            ZipFileData fileData = new ZipFileData(UTF_8);\n+            EndOfCentralDirectoryRecord.read(fileData, dataInputSource, eocdLocation);\n+\n+            if (fileData.isMaybeZip64()) {\n+                try {\n+                    Zip64EndOfCentralDirectoryLocator.read(fileData, dataInputSource, eocdLocation - Zip64EndOfCentralDirectoryLocator.FIXED_DATA_SIZE);\n+                    Zip64EndOfCentralDirectory.read(fileData, dataInputSource, fileData.getZip64EndOfCentralDirectoryOffset());\n+                }\n+                catch (ZipException e) {\n+                    // expected if not in Zip64 format\n+                }\n+            }\n+\n+            if (fileData.isZip64()) {\n+                // If in Zip64 format or using strict entry numbers, use the parsed information as is to read\n+                // the central directory file headers.\n+                readCentralDirectoryFileHeaders(fileData, dataInputSource, fileData.getCentralDirectoryOffset(), fileData.getCharset(), fileData.getExpectedEntries());\n+            }\n+            else {\n+                // If not in Zip64 format, compute central directory offset by end of central directory record\n+                // offset and central directory size to allow reading large non-compliant Zip32 directories.\n+                long centralDirectoryOffset = eocdLocation - fileData.getCentralDirectorySize();\n+                // If the lower 4 bytes match, the above calculation is correct; otherwise fallback to\n+                // reported offset.\n+                if ((int) centralDirectoryOffset == (int) fileData.getCentralDirectoryOffset()) {\n+                    readCentralDirectoryFileHeaders(fileData, dataInputSource, centralDirectoryOffset, fileData.getCharset());\n+                }\n+                else {\n+                    readCentralDirectoryFileHeaders(fileData, dataInputSource, fileData.getCentralDirectoryOffset(), fileData.getCharset(), fileData.getExpectedEntries());\n+                }\n+            }\n+            return fileData;\n+        }\n+        catch (IOException e) {\n+            throw new PrestoException(DRUID_SEGMENT_LOAD_ERROR, e);\n+        }\n+    }\n+\n+    /**\n+     * Finds the file offset of the end of central directory record.\n+     */\n+    private long findEndOfCentralDirectoryRecord()\n+            throws IOException\n+    {\n+        long fileSize = dataInputSource.getSize();\n+        byte[] signature = ZipUtil.intToLittleEndian(EndOfCentralDirectoryRecord.SIGNATURE);\n+        byte[] buffer = new byte[(int) Math.min(64, fileSize)];\n+        int readLength = buffer.length;\n+        if (readLength < EndOfCentralDirectoryRecord.FIXED_DATA_SIZE) {\n+            throw new PrestoException(DRUID_SEGMENT_LOAD_ERROR, format(\"Zip file '%s' is malformed. It does not contain an end of central directory record.\", dataInputSource.getId()));\n+        }\n+\n+        long offset = fileSize - buffer.length;\n+        while (offset >= 0) {\n+            dataInputSource.readFully(offset, buffer, 0, readLength);\n+            int signatureLocation = scanBackwards(signature, buffer, buffer.length);\n+            while (signatureLocation != -1) {\n+                long eocdSize = fileSize - offset - signatureLocation;\n+                if (eocdSize >= EndOfCentralDirectoryRecord.FIXED_DATA_SIZE) {\n+                    int commentLength = ZipUtil.getUnsignedShort(buffer, signatureLocation\n+                            + EndOfCentralDirectoryRecord.COMMENT_LENGTH_OFFSET);\n+                    long readCommentLength = eocdSize - EndOfCentralDirectoryRecord.FIXED_DATA_SIZE;\n+                    if (commentLength == readCommentLength) {\n+                        return offset + signatureLocation;\n+                    }\n+                }\n+                signatureLocation = scanBackwards(signature, buffer, signatureLocation - 1);\n+            }\n+            readLength = buffer.length - 3;\n+            buffer[buffer.length - 3] = buffer[0];\n+            buffer[buffer.length - 2] = buffer[1];\n+            buffer[buffer.length - 1] = buffer[2];\n+            offset -= readLength;\n+        }\n+        throw new PrestoException(DRUID_SEGMENT_LOAD_ERROR, format(\"Zip file '%s' is malformed. It does not contain an end of central directory record.\", dataInputSource.getId()));\n+    }\n+\n+    /**\n+     * Reads and parses ZIP file entries from the central directory.\n+     */\n+    private void readCentralDirectoryFileHeaders(ZipFileData fileData, DataInputSource dataInputSource, long fileOffset, Charset charset, long count)\n+            throws IOException\n+    {\n+        try {\n+            long position = fileOffset;\n+            for (long i = 0; i < count; ++i) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68028485595f3beb7247b9c928bbd5a4c54a1905"}, "originalPosition": 234}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMzAwMjYwOnYy", "diffSide": "RIGHT", "path": "presto-druid/src/main/java/com/facebook/presto/druid/zip/EndOfCentralDirectoryRecord.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMTozNjowMVrOFmM3nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMTozNjowMVrOFmM3nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYwMTA1Mg==", "bodyText": "not used", "url": "https://github.com/prestodb/presto/pull/14042#discussion_r375601052", "createdAt": "2020-02-06T01:36:01Z", "author": {"login": "highker"}, "path": "presto-druid/src/main/java/com/facebook/presto/druid/zip/EndOfCentralDirectoryRecord.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.druid.zip;\n+\n+import com.facebook.presto.druid.DataInputSource;\n+import com.facebook.presto.spi.PrestoException;\n+\n+import java.io.IOException;\n+\n+import static com.facebook.presto.druid.DruidErrorCode.DRUID_SEGMENT_LOAD_ERROR;\n+import static java.lang.String.format;\n+\n+public class EndOfCentralDirectoryRecord\n+{\n+    public static final int SIGNATURE = 0x06054b50;\n+    public static final int FIXED_DATA_SIZE = 22;\n+    public static final int SIGNATURE_OFFSET = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68028485595f3beb7247b9c928bbd5a4c54a1905"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMzAwMzMwOnYy", "diffSide": "RIGHT", "path": "presto-druid/src/main/java/com/facebook/presto/druid/zip/EndOfCentralDirectoryRecord.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMTozNjozM1rOFmM4JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMTozNjozM1rOFmM4JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYwMTE4OQ==", "bodyText": "why we need this static function throwing an error?", "url": "https://github.com/prestodb/presto/pull/14042#discussion_r375601189", "createdAt": "2020-02-06T01:36:33Z", "author": {"login": "highker"}, "path": "presto-druid/src/main/java/com/facebook/presto/druid/zip/EndOfCentralDirectoryRecord.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.druid.zip;\n+\n+import com.facebook.presto.druid.DataInputSource;\n+import com.facebook.presto.spi.PrestoException;\n+\n+import java.io.IOException;\n+\n+import static com.facebook.presto.druid.DruidErrorCode.DRUID_SEGMENT_LOAD_ERROR;\n+import static java.lang.String.format;\n+\n+public class EndOfCentralDirectoryRecord\n+{\n+    public static final int SIGNATURE = 0x06054b50;\n+    public static final int FIXED_DATA_SIZE = 22;\n+    public static final int SIGNATURE_OFFSET = 0;\n+    public static final int DISK_NUMBER_OFFSET = 4;\n+    public static final int CD_DISK_OFFSET = 6;\n+    public static final int DISK_ENTRIES_OFFSET = 8;\n+    public static final int TOTAL_ENTRIES_OFFSET = 10;\n+    public static final int CD_SIZE_OFFSET = 12;\n+    public static final int CD_OFFSET_OFFSET = 16;\n+    public static final int COMMENT_LENGTH_OFFSET = 20;\n+\n+    private EndOfCentralDirectoryRecord()\n+    {\n+    }\n+\n+    /**\n+     * Read the end of central directory record from the input stream and parse {@link ZipFileData}\n+     * from it.\n+     */\n+    public static void read(ZipFileData zipFileData, DataInputSource dataInputSource, long offset)\n+            throws IOException\n+    {\n+        long position = offset;\n+        byte[] fixedSizeData = new byte[FIXED_DATA_SIZE];\n+\n+        dataInputSource.readFully(position, fixedSizeData, 0, FIXED_DATA_SIZE);\n+        position += FIXED_DATA_SIZE;\n+        if (!ZipUtil.arrayStartsWith(fixedSizeData, ZipUtil.intToLittleEndian(SIGNATURE))) {\n+            throw new PrestoException(DRUID_SEGMENT_LOAD_ERROR, format(\"Malformed End of Central Directory Record; does not start with %08x\", SIGNATURE));\n+        }\n+\n+        byte[] comment = new byte[ZipUtil.getUnsignedShort(fixedSizeData, COMMENT_LENGTH_OFFSET)];\n+        if (comment.length > 0) {\n+            dataInputSource.readFully(position, comment, 0, comment.length);\n+        }\n+        short diskNumber = ZipUtil.get16(fixedSizeData, DISK_NUMBER_OFFSET);\n+        short centralDirectoryDisk = ZipUtil.get16(fixedSizeData, CD_DISK_OFFSET);\n+        short entriesOnDisk = ZipUtil.get16(fixedSizeData, DISK_ENTRIES_OFFSET);\n+        short totalEntries = ZipUtil.get16(fixedSizeData, TOTAL_ENTRIES_OFFSET);\n+        int centralDirectorySize = ZipUtil.get32(fixedSizeData, CD_SIZE_OFFSET);\n+        int centralDirectoryOffset = ZipUtil.get32(fixedSizeData, CD_OFFSET_OFFSET);\n+        if (diskNumber == -1 || centralDirectoryDisk == -1 || entriesOnDisk == -1\n+                || totalEntries == -1 || centralDirectorySize == -1 || centralDirectoryOffset == -1) {\n+            zipFileData.setMaybeZip64(true);\n+        }\n+        zipFileData.setComment(comment);\n+        zipFileData.setCentralDirectorySize(ZipUtil.getUnsignedInt(fixedSizeData, CD_SIZE_OFFSET));\n+        zipFileData.setCentralDirectoryOffset(ZipUtil.getUnsignedInt(fixedSizeData, CD_OFFSET_OFFSET));\n+        zipFileData.setExpectedEntries(ZipUtil.getUnsignedShort(fixedSizeData, TOTAL_ENTRIES_OFFSET));\n+    }\n+\n+    static byte[] create(ZipFileData file, boolean allowZip64)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68028485595f3beb7247b9c928bbd5a4c54a1905"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMzAwNDE5OnYy", "diffSide": "RIGHT", "path": "presto-druid/src/main/java/com/facebook/presto/druid/zip/ExtraData.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMTozNzoxMVrOFmM4vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMTozNzoxMVrOFmM4vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYwMTM0Mg==", "bodyText": "not used", "url": "https://github.com/prestodb/presto/pull/14042#discussion_r375601342", "createdAt": "2020-02-06T01:37:11Z", "author": {"login": "highker"}, "path": "presto-druid/src/main/java/com/facebook/presto/druid/zip/ExtraData.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.druid.zip;\n+\n+import java.util.Arrays;\n+\n+/**\n+ * A holder class for extra data in a ZIP entry.\n+ */\n+final class ExtraData\n+{\n+    static final int ID_OFFSET = 0;\n+    static final int LENGTH_OFFSET = 2;\n+    static final int FIXED_DATA_SIZE = 4;\n+\n+    private final int index;\n+    private final byte[] buffer;\n+\n+    public ExtraData(short id, byte[] data)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68028485595f3beb7247b9c928bbd5a4c54a1905"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMzAwNDUxOnYy", "diffSide": "RIGHT", "path": "presto-druid/src/main/java/com/facebook/presto/druid/zip/ExtraDataList.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMTozNzoyN1rOFmM4-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMTozNzoyN1rOFmM4-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYwMTQwMA==", "bodyText": "most of these are not used", "url": "https://github.com/prestodb/presto/pull/14042#discussion_r375601400", "createdAt": "2020-02-06T01:37:27Z", "author": {"login": "highker"}, "path": "presto-druid/src/main/java/com/facebook/presto/druid/zip/ExtraDataList.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.druid.zip;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+\n+class ExtraDataList\n+{\n+    public static final short ZIP64 = 0x0001;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68028485595f3beb7247b9c928bbd5a4c54a1905"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMzAwNDgyOnYy", "diffSide": "RIGHT", "path": "presto-druid/src/main/java/com/facebook/presto/druid/zip/ExtraDataList.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMTozNzo0M1rOFmM5Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMTozNzo0M1rOFmM5Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYwMTQ1OQ==", "bodyText": "Can we use Map?", "url": "https://github.com/prestodb/presto/pull/14042#discussion_r375601459", "createdAt": "2020-02-06T01:37:43Z", "author": {"login": "highker"}, "path": "presto-druid/src/main/java/com/facebook/presto/druid/zip/ExtraDataList.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.druid.zip;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+\n+class ExtraDataList\n+{\n+    public static final short ZIP64 = 0x0001;\n+    public static final short EXTENDED_TIMESTAMP = 0x5455;\n+    // Some documentation says that this is actually 0x7855, but zip files do not seem to corroborate\n+    // this\n+    public static final short INFOZIP_UNIX_NEW = 0x7875;\n+    private final LinkedHashMap<Short, ExtraData> entries;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68028485595f3beb7247b9c928bbd5a4c54a1905"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMzAwNTUzOnYy", "diffSide": "RIGHT", "path": "presto-druid/src/main/java/com/facebook/presto/druid/zip/LocalFileHeader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMTozODoxMFrOFmM5qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMTozODoxMFrOFmM5qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYwMTU3OQ==", "bodyText": "most consts are not used; same for many other files", "url": "https://github.com/prestodb/presto/pull/14042#discussion_r375601579", "createdAt": "2020-02-06T01:38:10Z", "author": {"login": "highker"}, "path": "presto-druid/src/main/java/com/facebook/presto/druid/zip/LocalFileHeader.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.druid.zip;\n+\n+public class LocalFileHeader\n+{\n+    public static final int SIGNATURE = 0x04034b50;\n+    public static final int FIXED_DATA_SIZE = 30;\n+    public static final int SIGNATURE_OFFSET = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68028485595f3beb7247b9c928bbd5a4c54a1905"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMzAwODE0OnYy", "diffSide": "RIGHT", "path": "presto-druid/src/main/java/com/facebook/presto/druid/DataInputSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMTo0MDowOFrOFmM7cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMTo0MDowOFrOFmM7cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYwMjAzMg==", "bodyText": "These should be used by DruidSegmentPageSource", "url": "https://github.com/prestodb/presto/pull/14042#discussion_r375602032", "createdAt": "2020-02-06T01:40:08Z", "author": {"login": "highker"}, "path": "presto-druid/src/main/java/com/facebook/presto/druid/DataInputSource.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.druid;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+\n+public interface DataInputSource\n+        extends Closeable\n+{\n+    DataInputSourceId getId();\n+\n+    long getReadBytes();\n+\n+    long getReadTimeNanos();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68028485595f3beb7247b9c928bbd5a4c54a1905"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMzAwODUzOnYy", "diffSide": "RIGHT", "path": "presto-druid/src/main/java/com/facebook/presto/druid/DruidSegmentPageSource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMTo0MDoyOVrOFmM7uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMTo0MDoyOVrOFmM7uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYwMjEwNA==", "bodyText": "not used", "url": "https://github.com/prestodb/presto/pull/14042#discussion_r375602104", "createdAt": "2020-02-06T01:40:29Z", "author": {"login": "highker"}, "path": "presto-druid/src/main/java/com/facebook/presto/druid/DruidSegmentPageSource.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.druid;\n+\n+import com.facebook.presto.druid.metadata.DruidSegmentInfo;\n+import com.facebook.presto.druid.segment.DruidSegmentReader;\n+import com.facebook.presto.spi.ColumnHandle;\n+import com.facebook.presto.spi.ConnectorPageSource;\n+import com.facebook.presto.spi.Page;\n+import com.facebook.presto.spi.block.Block;\n+import com.facebook.presto.spi.block.LazyBlock;\n+import com.facebook.presto.spi.block.LazyBlockLoader;\n+import com.facebook.presto.spi.type.Type;\n+\n+import java.util.List;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.util.Objects.requireNonNull;\n+\n+public class DruidSegmentPageSource\n+        implements ConnectorPageSource\n+{\n+    private final DruidSegmentInfo segmentInfo;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68028485595f3beb7247b9c928bbd5a4c54a1905"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMzAwOTY4OnYy", "diffSide": "RIGHT", "path": "presto-druid/src/main/java/com/facebook/presto/druid/DruidSplit.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMTo0MTowNVrOFmM8WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMTo0MTowNVrOFmM8WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYwMjI2NQ==", "bodyText": "Do we wanna return ImmutableList.of(address) or this is intensionally?", "url": "https://github.com/prestodb/presto/pull/14042#discussion_r375602265", "createdAt": "2020-02-06T01:41:05Z", "author": {"login": "highker"}, "path": "presto-druid/src/main/java/com/facebook/presto/druid/DruidSplit.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.druid;\n+\n+import com.facebook.presto.druid.metadata.DruidSegmentInfo;\n+import com.facebook.presto.spi.ConnectorSplit;\n+import com.facebook.presto.spi.HostAddress;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.List;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class DruidSplit\n+        implements ConnectorSplit\n+{\n+    private final DruidSegmentInfo segmentInfo;\n+    private final HostAddress address;\n+\n+    @JsonCreator\n+    public DruidSplit(\n+            @JsonProperty(\"segmentInfo\") DruidSegmentInfo segmentInfo,\n+            @JsonProperty(\"address\") HostAddress address)\n+    {\n+        this.segmentInfo = requireNonNull(segmentInfo, \"segment info is null\");\n+        this.address = requireNonNull(address, \"address info is null\");\n+    }\n+\n+    @JsonProperty\n+    public DruidSegmentInfo getSegmentInfo()\n+    {\n+        return segmentInfo;\n+    }\n+\n+    @JsonProperty\n+    public HostAddress getAddress()\n+    {\n+        return address;\n+    }\n+\n+    @Override\n+    public boolean isRemotelyAccessible()\n+    {\n+        return true;\n+    }\n+\n+    @Override\n+    public List<HostAddress> getAddresses()\n+    {\n+        return ImmutableList.of();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68028485595f3beb7247b9c928bbd5a4c54a1905"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjY2OTc1OnYy", "diffSide": "RIGHT", "path": "presto-druid/src/main/java/com/facebook/presto/druid/DruidClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMTo0NDoyNVrOFmv_2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMjowMzoyMFrOFmwRLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE3NjYwMA==", "bodyText": "Do you want to use the Pushdown framework to push the filters down instead of Tuple Domains ?", "url": "https://github.com/prestodb/presto/pull/14042#discussion_r376176600", "createdAt": "2020-02-07T01:44:25Z", "author": {"login": "agrawaldevesh"}, "path": "presto-druid/src/main/java/com/facebook/presto/druid/DruidClient.java", "diffHunk": "@@ -0,0 +1,216 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.druid;\n+\n+import com.facebook.airlift.http.client.HttpClient;\n+import com.facebook.airlift.http.client.HttpUriBuilder;\n+import com.facebook.airlift.http.client.Request;\n+import com.facebook.airlift.json.JsonCodec;\n+import com.facebook.presto.druid.metadata.DruidColumnInfo;\n+import com.facebook.presto.druid.metadata.DruidSegmentIdWrapper;\n+import com.facebook.presto.druid.metadata.DruidSegmentInfo;\n+import com.facebook.presto.druid.metadata.DruidTableInfo;\n+import com.facebook.presto.spi.predicate.Domain;\n+import com.facebook.presto.spi.predicate.Range;\n+import com.google.common.base.Joiner;\n+import org.joda.time.Instant;\n+\n+import javax.inject.Inject;\n+\n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static com.facebook.airlift.http.client.HttpUriBuilder.uriBuilderFrom;\n+import static com.facebook.airlift.http.client.JsonResponseHandler.createJsonResponseHandler;\n+import static com.facebook.airlift.http.client.Request.Builder.prepareGet;\n+import static com.facebook.airlift.http.client.Request.Builder.preparePost;\n+import static com.facebook.airlift.http.client.StaticBodyGenerator.createStaticBodyGenerator;\n+import static com.facebook.airlift.json.JsonCodec.jsonCodec;\n+import static com.facebook.airlift.json.JsonCodec.listJsonCodec;\n+import static com.facebook.presto.spi.type.TimestampType.TIMESTAMP;\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static com.google.common.net.HttpHeaders.ACCEPT;\n+import static com.google.common.net.HttpHeaders.CONTENT_TYPE;\n+import static com.google.common.net.MediaType.JSON_UTF_8;\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+public class DruidClient\n+{\n+    private static final String ALWAYS_TRUE = \"1=1\";\n+    private static final String ALWAYS_FALSE = \"1=0\";\n+\n+    // Druid coordinator API endpoints\n+    private static final String METADATA_PATH = \"/druid/coordinator/v1/metadata\";\n+    // Druid broker API endpoints\n+    private static final String SQL_ENDPOINT = \"/druid/v2/sql\";\n+\n+    private static final String LIST_TABLE_QUERY = \"SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'druid'\";\n+    private static final String GET_COLUMN_TEMPLATE = \"SELECT COLUMN_NAME, DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = 'druid' AND TABLE_NAME = '%s'\";\n+    private static final String GET_SEGMENTS_ID_TEMPLATE = \"SELECT segment_id FROM sys.segments WHERE datasource = '%s' AND is_published = 1 AND %s\";\n+\n+    // codec\n+    private static final JsonCodec<List<DruidSegmentIdWrapper>> LIST_SEGMENT_ID_CODEC = listJsonCodec(DruidSegmentIdWrapper.class);\n+    private static final JsonCodec<List<DruidColumnInfo>> LIST_COLUMN_INFO_CODEC = listJsonCodec(DruidColumnInfo.class);\n+    private static final JsonCodec<List<DruidTableInfo>> LIST_TABLE_NAME_CODEC = listJsonCodec(DruidTableInfo.class);\n+    private static final JsonCodec<DruidSegmentInfo> SEGMENT_INFO_CODEC = jsonCodec(DruidSegmentInfo.class);\n+\n+    private final HttpClient httpClient;\n+    private final URI druidCoordinator;\n+    private final URI druidBroker;\n+\n+    @Inject\n+    public DruidClient(DruidConfig config, @ForDruidClient HttpClient httpClient)\n+    {\n+        requireNonNull(config, \"config is null\");\n+        this.httpClient = requireNonNull(httpClient, \"httpClient is null\");\n+        this.druidCoordinator = URI.create(config.getDruidCoordinatorUrl());\n+        this.druidBroker = URI.create(config.getDruidBrokerUrl());\n+    }\n+\n+    public URI getDruidBroker()\n+    {\n+        return druidBroker;\n+    }\n+\n+    public List<String> getTables()\n+    {\n+        return httpClient.execute(prepareQuery(LIST_TABLE_QUERY), createJsonResponseHandler(LIST_TABLE_NAME_CODEC)).stream()\n+                .map(DruidTableInfo::getTableName)\n+                .collect(toImmutableList());\n+    }\n+\n+    public List<DruidColumnInfo> getColumnDataType(String tableName)\n+    {\n+        return httpClient.execute(prepareQuery(format(GET_COLUMN_TEMPLATE, tableName)), createJsonResponseHandler(LIST_COLUMN_INFO_CODEC));\n+    }\n+\n+    public List<String> getAllDataSegmentId(String tableName)\n+    {\n+        return getDataSegmentIdInDomain(tableName, Domain.all(TIMESTAMP));\n+    }\n+\n+    public List<String> getDataSegmentIdInDomain(String tableName, Domain domain)\n+    {\n+        return httpClient.execute(prepareQuery(format(GET_SEGMENTS_ID_TEMPLATE, tableName, toPredicate(domain))), createJsonResponseHandler(LIST_SEGMENT_ID_CODEC)).stream()\n+                .map(wrapper -> wrapper.getSegmentId())\n+                .collect(toImmutableList());\n+    }\n+\n+    public DruidSegmentInfo getSingleSegmentInfo(String dataSource, String segmentId)\n+    {\n+        URI uri = uriBuilderFrom(druidCoordinator)\n+                .replacePath(METADATA_PATH)\n+                .appendPath(format(\"datasources/%s/segments/%s\", dataSource, segmentId))\n+                .build();\n+        Request request = setContentTypeHeaders(prepareGet())\n+                .setUri(uri)\n+                .build();\n+\n+        return httpClient.execute(request, createJsonResponseHandler(SEGMENT_INFO_CODEC));\n+    }\n+\n+    private static Request.Builder setContentTypeHeaders(Request.Builder requestBuilder)\n+    {\n+        return requestBuilder\n+                .setHeader(CONTENT_TYPE, JSON_UTF_8.toString())\n+                .setHeader(ACCEPT, JSON_UTF_8.toString());\n+    }\n+\n+    private static byte[] createRequestBody(String query)\n+    {\n+        return format(\"{\\\"query\\\":\\\"%s\\\"}\\n\", query).getBytes();\n+    }\n+\n+    private Request prepareQuery(String query)\n+    {\n+        HttpUriBuilder uriBuilder = uriBuilderFrom(druidBroker).replacePath(SQL_ENDPOINT);\n+\n+        return setContentTypeHeaders(preparePost())\n+                .setUri(uriBuilder.build())\n+                .setBodyGenerator(createStaticBodyGenerator(createRequestBody(query)))\n+                .build();\n+    }\n+\n+    private String toPredicate(Domain domain)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab1680d7ce48406dddf825c5c514935495b0e23b"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE4MTAzNw==", "bodyText": "yep, that's a following step", "url": "https://github.com/prestodb/presto/pull/14042#discussion_r376181037", "createdAt": "2020-02-07T02:03:20Z", "author": {"login": "zhenxiao"}, "path": "presto-druid/src/main/java/com/facebook/presto/druid/DruidClient.java", "diffHunk": "@@ -0,0 +1,216 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.druid;\n+\n+import com.facebook.airlift.http.client.HttpClient;\n+import com.facebook.airlift.http.client.HttpUriBuilder;\n+import com.facebook.airlift.http.client.Request;\n+import com.facebook.airlift.json.JsonCodec;\n+import com.facebook.presto.druid.metadata.DruidColumnInfo;\n+import com.facebook.presto.druid.metadata.DruidSegmentIdWrapper;\n+import com.facebook.presto.druid.metadata.DruidSegmentInfo;\n+import com.facebook.presto.druid.metadata.DruidTableInfo;\n+import com.facebook.presto.spi.predicate.Domain;\n+import com.facebook.presto.spi.predicate.Range;\n+import com.google.common.base.Joiner;\n+import org.joda.time.Instant;\n+\n+import javax.inject.Inject;\n+\n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static com.facebook.airlift.http.client.HttpUriBuilder.uriBuilderFrom;\n+import static com.facebook.airlift.http.client.JsonResponseHandler.createJsonResponseHandler;\n+import static com.facebook.airlift.http.client.Request.Builder.prepareGet;\n+import static com.facebook.airlift.http.client.Request.Builder.preparePost;\n+import static com.facebook.airlift.http.client.StaticBodyGenerator.createStaticBodyGenerator;\n+import static com.facebook.airlift.json.JsonCodec.jsonCodec;\n+import static com.facebook.airlift.json.JsonCodec.listJsonCodec;\n+import static com.facebook.presto.spi.type.TimestampType.TIMESTAMP;\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static com.google.common.net.HttpHeaders.ACCEPT;\n+import static com.google.common.net.HttpHeaders.CONTENT_TYPE;\n+import static com.google.common.net.MediaType.JSON_UTF_8;\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+public class DruidClient\n+{\n+    private static final String ALWAYS_TRUE = \"1=1\";\n+    private static final String ALWAYS_FALSE = \"1=0\";\n+\n+    // Druid coordinator API endpoints\n+    private static final String METADATA_PATH = \"/druid/coordinator/v1/metadata\";\n+    // Druid broker API endpoints\n+    private static final String SQL_ENDPOINT = \"/druid/v2/sql\";\n+\n+    private static final String LIST_TABLE_QUERY = \"SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'druid'\";\n+    private static final String GET_COLUMN_TEMPLATE = \"SELECT COLUMN_NAME, DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = 'druid' AND TABLE_NAME = '%s'\";\n+    private static final String GET_SEGMENTS_ID_TEMPLATE = \"SELECT segment_id FROM sys.segments WHERE datasource = '%s' AND is_published = 1 AND %s\";\n+\n+    // codec\n+    private static final JsonCodec<List<DruidSegmentIdWrapper>> LIST_SEGMENT_ID_CODEC = listJsonCodec(DruidSegmentIdWrapper.class);\n+    private static final JsonCodec<List<DruidColumnInfo>> LIST_COLUMN_INFO_CODEC = listJsonCodec(DruidColumnInfo.class);\n+    private static final JsonCodec<List<DruidTableInfo>> LIST_TABLE_NAME_CODEC = listJsonCodec(DruidTableInfo.class);\n+    private static final JsonCodec<DruidSegmentInfo> SEGMENT_INFO_CODEC = jsonCodec(DruidSegmentInfo.class);\n+\n+    private final HttpClient httpClient;\n+    private final URI druidCoordinator;\n+    private final URI druidBroker;\n+\n+    @Inject\n+    public DruidClient(DruidConfig config, @ForDruidClient HttpClient httpClient)\n+    {\n+        requireNonNull(config, \"config is null\");\n+        this.httpClient = requireNonNull(httpClient, \"httpClient is null\");\n+        this.druidCoordinator = URI.create(config.getDruidCoordinatorUrl());\n+        this.druidBroker = URI.create(config.getDruidBrokerUrl());\n+    }\n+\n+    public URI getDruidBroker()\n+    {\n+        return druidBroker;\n+    }\n+\n+    public List<String> getTables()\n+    {\n+        return httpClient.execute(prepareQuery(LIST_TABLE_QUERY), createJsonResponseHandler(LIST_TABLE_NAME_CODEC)).stream()\n+                .map(DruidTableInfo::getTableName)\n+                .collect(toImmutableList());\n+    }\n+\n+    public List<DruidColumnInfo> getColumnDataType(String tableName)\n+    {\n+        return httpClient.execute(prepareQuery(format(GET_COLUMN_TEMPLATE, tableName)), createJsonResponseHandler(LIST_COLUMN_INFO_CODEC));\n+    }\n+\n+    public List<String> getAllDataSegmentId(String tableName)\n+    {\n+        return getDataSegmentIdInDomain(tableName, Domain.all(TIMESTAMP));\n+    }\n+\n+    public List<String> getDataSegmentIdInDomain(String tableName, Domain domain)\n+    {\n+        return httpClient.execute(prepareQuery(format(GET_SEGMENTS_ID_TEMPLATE, tableName, toPredicate(domain))), createJsonResponseHandler(LIST_SEGMENT_ID_CODEC)).stream()\n+                .map(wrapper -> wrapper.getSegmentId())\n+                .collect(toImmutableList());\n+    }\n+\n+    public DruidSegmentInfo getSingleSegmentInfo(String dataSource, String segmentId)\n+    {\n+        URI uri = uriBuilderFrom(druidCoordinator)\n+                .replacePath(METADATA_PATH)\n+                .appendPath(format(\"datasources/%s/segments/%s\", dataSource, segmentId))\n+                .build();\n+        Request request = setContentTypeHeaders(prepareGet())\n+                .setUri(uri)\n+                .build();\n+\n+        return httpClient.execute(request, createJsonResponseHandler(SEGMENT_INFO_CODEC));\n+    }\n+\n+    private static Request.Builder setContentTypeHeaders(Request.Builder requestBuilder)\n+    {\n+        return requestBuilder\n+                .setHeader(CONTENT_TYPE, JSON_UTF_8.toString())\n+                .setHeader(ACCEPT, JSON_UTF_8.toString());\n+    }\n+\n+    private static byte[] createRequestBody(String query)\n+    {\n+        return format(\"{\\\"query\\\":\\\"%s\\\"}\\n\", query).getBytes();\n+    }\n+\n+    private Request prepareQuery(String query)\n+    {\n+        HttpUriBuilder uriBuilder = uriBuilderFrom(druidBroker).replacePath(SQL_ENDPOINT);\n+\n+        return setContentTypeHeaders(preparePost())\n+                .setUri(uriBuilder.build())\n+                .setBodyGenerator(createStaticBodyGenerator(createRequestBody(query)))\n+                .build();\n+    }\n+\n+    private String toPredicate(Domain domain)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE3NjYwMA=="}, "originalCommit": {"oid": "ab1680d7ce48406dddf825c5c514935495b0e23b"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjY3MzQ5OnYy", "diffSide": "RIGHT", "path": "presto-druid/src/main/java/com/facebook/presto/druid/segment/SmooshedColumnSource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMTo0Njo1MlrOFmwCAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMjowNzo0NFrOFmwVEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE3NzE1NQ==", "bodyText": "Can some of this Druid specific stuff be pushed into its own repo like we did for pinot: https://github.com/prestodb/presto-pinot-driver. For example, this repo abstracts all of the pinot specific intricacies like talking to ZK, merging the server results and what not. I feel that there is some of that going in Druid land as well: you stitch results from hdfs and druid proper.", "url": "https://github.com/prestodb/presto/pull/14042#discussion_r376177155", "createdAt": "2020-02-07T01:46:52Z", "author": {"login": "agrawaldevesh"}, "path": "presto-druid/src/main/java/com/facebook/presto/druid/segment/SmooshedColumnSource.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.druid.segment;\n+\n+import com.facebook.presto.spi.PrestoException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.apache.druid.common.utils.SerializerUtils;\n+import org.apache.druid.jackson.DefaultObjectMapper;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab1680d7ce48406dddf825c5c514935495b0e23b"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE4MjAzNA==", "bodyText": "good idea. We did not separate them out yet. Currently, Druid connector only use Druid for metadata. it is scanning Druid segments files directly from HDFS.", "url": "https://github.com/prestodb/presto/pull/14042#discussion_r376182034", "createdAt": "2020-02-07T02:07:44Z", "author": {"login": "zhenxiao"}, "path": "presto-druid/src/main/java/com/facebook/presto/druid/segment/SmooshedColumnSource.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.druid.segment;\n+\n+import com.facebook.presto.spi.PrestoException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.apache.druid.common.utils.SerializerUtils;\n+import org.apache.druid.jackson.DefaultObjectMapper;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE3NzE1NQ=="}, "originalCommit": {"oid": "ab1680d7ce48406dddf825c5c514935495b0e23b"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyOTM5Nzc2OnYy", "diffSide": "RIGHT", "path": "presto-druid/src/main/java/com/facebook/presto/druid/DataInputSource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMDo1NjoyNlrOFnKDOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMDo1NjoyNlrOFnKDOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYwMzQ0OQ==", "bodyText": "not used", "url": "https://github.com/prestodb/presto/pull/14042#discussion_r376603449", "createdAt": "2020-02-07T20:56:26Z", "author": {"login": "highker"}, "path": "presto-druid/src/main/java/com/facebook/presto/druid/DataInputSource.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.druid;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+\n+public interface DataInputSource\n+        extends Closeable\n+{\n+    DataInputSourceId getId();\n+\n+    long getReadBytes();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0c92a528c61833473b11aeb1cabd2b57b4adfb3"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyOTQwMjg3OnYy", "diffSide": "RIGHT", "path": "presto-druid/src/main/java/com/facebook/presto/druid/DruidErrorCode.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMDo1ODowOVrOFnKGMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMDo1ODowOVrOFnKGMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYwNDIwOQ==", "bodyText": "0x0100 is not the right error code. Check the one for PinotErrorCode and other connectors' error code. It should be something greater than 0x0505.", "url": "https://github.com/prestodb/presto/pull/14042#discussion_r376604209", "createdAt": "2020-02-07T20:58:09Z", "author": {"login": "highker"}, "path": "presto-druid/src/main/java/com/facebook/presto/druid/DruidErrorCode.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.druid;\n+\n+import com.facebook.presto.spi.ErrorCode;\n+import com.facebook.presto.spi.ErrorCodeSupplier;\n+import com.facebook.presto.spi.ErrorType;\n+\n+import static com.facebook.presto.spi.ErrorType.EXTERNAL;\n+\n+public enum DruidErrorCode\n+        implements ErrorCodeSupplier\n+{\n+    DRUID_METADATA_ERROR(0, EXTERNAL),\n+    DRUID_DEEP_STORAGE_ERROR(1, EXTERNAL),\n+    DRUID_SEGMENT_LOAD_ERROR(2, EXTERNAL),\n+    DRUID_UNSUPPORTED_TYPE_ERROR(3, EXTERNAL);\n+\n+    private final ErrorCode errorCode;\n+\n+    DruidErrorCode(int code, ErrorType type)\n+    {\n+        errorCode = new ErrorCode(code + 0x0100_0000, name(), type);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0c92a528c61833473b11aeb1cabd2b57b4adfb3"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3222, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}