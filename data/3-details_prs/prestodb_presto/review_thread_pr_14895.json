{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2NTc5MzI1", "number": 14895, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMToxMDoxMlrOESjyJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMToxNTo1OVrOESj5CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODk2MTAyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/com/facebook/presto/sql/planner/iterative/rule/TestPushLimitThroughUnion.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMToxMDoxMlrOG3zs1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNjoxMTozM1rOG4p8FA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3MTkyNA==", "bodyText": "So, theoretically, this won't fire if the limit here is > 1 either right? Maybe also test that?", "url": "https://github.com/prestodb/presto/pull/14895#discussion_r461171924", "createdAt": "2020-07-27T21:10:12Z", "author": {"login": "rongrong"}, "path": "presto-main/src/test/java/com/facebook/presto/sql/planner/iterative/rule/TestPushLimitThroughUnion.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.planner.iterative.rule;\n+\n+import com.facebook.presto.spi.relation.VariableReferenceExpression;\n+import com.facebook.presto.sql.planner.iterative.rule.test.BaseRuleTest;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableListMultimap;\n+import org.testng.annotations.Test;\n+\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.limit;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.union;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.values;\n+\n+public class TestPushLimitThroughUnion\n+        extends BaseRuleTest\n+{\n+    @Test\n+    public void testPushLimitThroughUnion()\n+    {\n+        tester().assertThat(new PushLimitThroughUnion())\n+                .on(p -> {\n+                    VariableReferenceExpression a = p.variable(\"a\");\n+                    VariableReferenceExpression b = p.variable(\"b\");\n+                    VariableReferenceExpression c = p.variable(\"c\");\n+                    return p.limit(1,\n+                            p.union(\n+                                    ImmutableListMultimap.<VariableReferenceExpression, VariableReferenceExpression>builder()\n+                                            .put(c, a)\n+                                            .put(c, b)\n+                                            .build(),\n+                                    ImmutableList.of(\n+                                            p.values(10, a),\n+                                            p.values(10, b))));\n+                })\n+                .matches(\n+                        limit(1,\n+                                union(\n+                                        limit(1, true, values(\"a\")),\n+                                        limit(1, true, values(\"b\")))));\n+    }\n+\n+    @Test\n+    public void doesNotFire()\n+    {\n+        tester().assertThat(new PushLimitThroughUnion())\n+                .on(p -> {\n+                    VariableReferenceExpression a = p.variable(\"a\");\n+                    VariableReferenceExpression b = p.variable(\"b\");\n+                    VariableReferenceExpression c = p.variable(\"c\");\n+                    return p.limit(1,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1b20f718c3d31dd24badffcb9a2891ec3194939"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA2MDU2NA==", "bodyText": "sure I add another test to cover limit2 case", "url": "https://github.com/prestodb/presto/pull/14895#discussion_r462060564", "createdAt": "2020-07-29T06:11:33Z", "author": {"login": "fgwang7w"}, "path": "presto-main/src/test/java/com/facebook/presto/sql/planner/iterative/rule/TestPushLimitThroughUnion.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.planner.iterative.rule;\n+\n+import com.facebook.presto.spi.relation.VariableReferenceExpression;\n+import com.facebook.presto.sql.planner.iterative.rule.test.BaseRuleTest;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableListMultimap;\n+import org.testng.annotations.Test;\n+\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.limit;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.union;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.values;\n+\n+public class TestPushLimitThroughUnion\n+        extends BaseRuleTest\n+{\n+    @Test\n+    public void testPushLimitThroughUnion()\n+    {\n+        tester().assertThat(new PushLimitThroughUnion())\n+                .on(p -> {\n+                    VariableReferenceExpression a = p.variable(\"a\");\n+                    VariableReferenceExpression b = p.variable(\"b\");\n+                    VariableReferenceExpression c = p.variable(\"c\");\n+                    return p.limit(1,\n+                            p.union(\n+                                    ImmutableListMultimap.<VariableReferenceExpression, VariableReferenceExpression>builder()\n+                                            .put(c, a)\n+                                            .put(c, b)\n+                                            .build(),\n+                                    ImmutableList.of(\n+                                            p.values(10, a),\n+                                            p.values(10, b))));\n+                })\n+                .matches(\n+                        limit(1,\n+                                union(\n+                                        limit(1, true, values(\"a\")),\n+                                        limit(1, true, values(\"b\")))));\n+    }\n+\n+    @Test\n+    public void doesNotFire()\n+    {\n+        tester().assertThat(new PushLimitThroughUnion())\n+                .on(p -> {\n+                    VariableReferenceExpression a = p.variable(\"a\");\n+                    VariableReferenceExpression b = p.variable(\"b\");\n+                    VariableReferenceExpression c = p.variable(\"c\");\n+                    return p.limit(1,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3MTkyNA=="}, "originalCommit": {"oid": "b1b20f718c3d31dd24badffcb9a2891ec3194939"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODk3ODY0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/PushLimitThroughUnion.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMToxNTo1OVrOG3z36A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMToxODozOVrOG72wsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3NDc2MA==", "bodyText": "I prefer a separate check before building the list. Something like\nif (unionNode.getSources().stream().allMatch(source -> isAtMost(source, context.getLookup(), parent.getCount()))) {\n    return Result.empty();\n}\n// build new plan node\n\nIt's slightly more efficient when the rule should not fire, which should happen more often.", "url": "https://github.com/prestodb/presto/pull/14895#discussion_r461174760", "createdAt": "2020-07-27T21:15:59Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/PushLimitThroughUnion.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.planner.iterative.rule;\n+\n+import com.facebook.presto.matching.Capture;\n+import com.facebook.presto.matching.Captures;\n+import com.facebook.presto.matching.Pattern;\n+import com.facebook.presto.spi.plan.LimitNode;\n+import com.facebook.presto.spi.plan.PlanNode;\n+import com.facebook.presto.spi.plan.UnionNode;\n+import com.facebook.presto.sql.planner.iterative.Rule;\n+import com.google.common.collect.ImmutableList;\n+\n+import static com.facebook.presto.matching.Capture.newCapture;\n+import static com.facebook.presto.sql.planner.optimizations.QueryCardinalityUtil.isAtMost;\n+import static com.facebook.presto.sql.planner.plan.Patterns.limit;\n+import static com.facebook.presto.sql.planner.plan.Patterns.source;\n+import static com.facebook.presto.sql.planner.plan.Patterns.union;\n+\n+/**\n+ * Transforms:\n+ * <pre>\n+ * - Limit\n+ *    - Union\n+ *       - relation1\n+ *       - relation2\n+ *       ..\n+ * </pre>\n+ * Into:\n+ * <pre>\n+ * - Limit\n+ *    - Union\n+ *       - Limit\n+ *          - relation1\n+ *       - Limit\n+ *          - relation2\n+ *       ..\n+ * </pre>\n+ * Applies to LimitNode without ties only to avoid optimizer loop.\n+ */\n+public class PushLimitThroughUnion\n+        implements Rule<LimitNode>\n+{\n+    private static final Capture<UnionNode> CHILD = newCapture();\n+\n+    private static final Pattern<LimitNode> PATTERN = limit()\n+            .with(source().matching(union().capturedAs(CHILD)));\n+\n+    @Override\n+    public Pattern<LimitNode> getPattern()\n+    {\n+        return PATTERN;\n+    }\n+\n+    @Override\n+    public Result apply(LimitNode parent, Captures captures, Context context)\n+    {\n+        UnionNode unionNode = captures.get(CHILD);\n+        ImmutableList.Builder<PlanNode> builder = ImmutableList.builder();\n+        boolean shouldApply = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1b20f718c3d31dd24badffcb9a2891ec3194939"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA1OTExNw==", "bodyText": "yes this check makes sense, will incorporate it.", "url": "https://github.com/prestodb/presto/pull/14895#discussion_r462059117", "createdAt": "2020-07-29T06:07:19Z", "author": {"login": "fgwang7w"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/PushLimitThroughUnion.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.planner.iterative.rule;\n+\n+import com.facebook.presto.matching.Capture;\n+import com.facebook.presto.matching.Captures;\n+import com.facebook.presto.matching.Pattern;\n+import com.facebook.presto.spi.plan.LimitNode;\n+import com.facebook.presto.spi.plan.PlanNode;\n+import com.facebook.presto.spi.plan.UnionNode;\n+import com.facebook.presto.sql.planner.iterative.Rule;\n+import com.google.common.collect.ImmutableList;\n+\n+import static com.facebook.presto.matching.Capture.newCapture;\n+import static com.facebook.presto.sql.planner.optimizations.QueryCardinalityUtil.isAtMost;\n+import static com.facebook.presto.sql.planner.plan.Patterns.limit;\n+import static com.facebook.presto.sql.planner.plan.Patterns.source;\n+import static com.facebook.presto.sql.planner.plan.Patterns.union;\n+\n+/**\n+ * Transforms:\n+ * <pre>\n+ * - Limit\n+ *    - Union\n+ *       - relation1\n+ *       - relation2\n+ *       ..\n+ * </pre>\n+ * Into:\n+ * <pre>\n+ * - Limit\n+ *    - Union\n+ *       - Limit\n+ *          - relation1\n+ *       - Limit\n+ *          - relation2\n+ *       ..\n+ * </pre>\n+ * Applies to LimitNode without ties only to avoid optimizer loop.\n+ */\n+public class PushLimitThroughUnion\n+        implements Rule<LimitNode>\n+{\n+    private static final Capture<UnionNode> CHILD = newCapture();\n+\n+    private static final Pattern<LimitNode> PATTERN = limit()\n+            .with(source().matching(union().capturedAs(CHILD)));\n+\n+    @Override\n+    public Pattern<LimitNode> getPattern()\n+    {\n+        return PATTERN;\n+    }\n+\n+    @Override\n+    public Result apply(LimitNode parent, Captures captures, Context context)\n+    {\n+        UnionNode unionNode = captures.get(CHILD);\n+        ImmutableList.Builder<PlanNode> builder = ImmutableList.builder();\n+        boolean shouldApply = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3NDc2MA=="}, "originalCommit": {"oid": "b1b20f718c3d31dd24badffcb9a2891ec3194939"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQxNjM3MA==", "bodyText": "You don't need to check shouldApply anymore after the check. It should always apply if the code gets here.", "url": "https://github.com/prestodb/presto/pull/14895#discussion_r465416370", "createdAt": "2020-08-05T01:18:39Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/PushLimitThroughUnion.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.planner.iterative.rule;\n+\n+import com.facebook.presto.matching.Capture;\n+import com.facebook.presto.matching.Captures;\n+import com.facebook.presto.matching.Pattern;\n+import com.facebook.presto.spi.plan.LimitNode;\n+import com.facebook.presto.spi.plan.PlanNode;\n+import com.facebook.presto.spi.plan.UnionNode;\n+import com.facebook.presto.sql.planner.iterative.Rule;\n+import com.google.common.collect.ImmutableList;\n+\n+import static com.facebook.presto.matching.Capture.newCapture;\n+import static com.facebook.presto.sql.planner.optimizations.QueryCardinalityUtil.isAtMost;\n+import static com.facebook.presto.sql.planner.plan.Patterns.limit;\n+import static com.facebook.presto.sql.planner.plan.Patterns.source;\n+import static com.facebook.presto.sql.planner.plan.Patterns.union;\n+\n+/**\n+ * Transforms:\n+ * <pre>\n+ * - Limit\n+ *    - Union\n+ *       - relation1\n+ *       - relation2\n+ *       ..\n+ * </pre>\n+ * Into:\n+ * <pre>\n+ * - Limit\n+ *    - Union\n+ *       - Limit\n+ *          - relation1\n+ *       - Limit\n+ *          - relation2\n+ *       ..\n+ * </pre>\n+ * Applies to LimitNode without ties only to avoid optimizer loop.\n+ */\n+public class PushLimitThroughUnion\n+        implements Rule<LimitNode>\n+{\n+    private static final Capture<UnionNode> CHILD = newCapture();\n+\n+    private static final Pattern<LimitNode> PATTERN = limit()\n+            .with(source().matching(union().capturedAs(CHILD)));\n+\n+    @Override\n+    public Pattern<LimitNode> getPattern()\n+    {\n+        return PATTERN;\n+    }\n+\n+    @Override\n+    public Result apply(LimitNode parent, Captures captures, Context context)\n+    {\n+        UnionNode unionNode = captures.get(CHILD);\n+        ImmutableList.Builder<PlanNode> builder = ImmutableList.builder();\n+        boolean shouldApply = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3NDc2MA=="}, "originalCommit": {"oid": "b1b20f718c3d31dd24badffcb9a2891ec3194939"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2173, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}