{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA1ODQyODA2", "number": 15330, "title": "Reserve memory for nested BlockBuilders in projection", "bodyText": "In bf4bf6a \"Reserve memory before projecting rows\" we created the\nBlockBuilders new every time. However, nested BlockBuilders for complex\ntypes would lose the status from previously created BlockBuilders such\nthat memory growth increased. For example, for an ARRAY(BIGINT)\nBlockBuilder, the nested LongArrayBlockBuilder would just have the same\nexpectedEntries as the ArrayBlockBuilder although the entries in the\nLongArrayBlockBuilder could be a lot more.\nThis commit uses the newly introduced newBlockBuilderLike() method that\nestimates the expectedEntries for nested BlockBuilders from previously\ncreated BlockBuilders. The following simple ArrayTransform query shows\nthe allocated long[] reduced from 118GB to 93GB on TPCH 100GB.\n    select transform(l_array, x-> x+1) from lineitem_map_array;\n\n== NO RELEASE NOTE ==", "createdAt": "2020-10-19T09:55:00Z", "url": "https://github.com/prestodb/presto/pull/15330", "merged": true, "mergeCommit": {"oid": "b3c49f13b05a226e901b7660c5132af93ba58b64"}, "closed": true, "closedAt": "2020-10-23T23:47:32Z", "author": {"login": "yingsu00"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdUNIGYABqjM4OTU5Njg1NDI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdVfcDygFqTUxNjEwODQwMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d24a43c9a3660757501d2c40e7a7fadd7d3b0664", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/d24a43c9a3660757501d2c40e7a7fadd7d3b0664", "committedDate": "2020-10-19T09:53:32Z", "message": "Reserve memory for nested BlockBuilders in projection\n\nIn bf4bf6a610 \"Reserve memory before projecting rows\" we created the\nBlockBuilders new every time. However, nested BlockBuilders for complex\ntypes would lose the status from previously created BlockBuilders such\nthat memory growth increased. For example, for an ARRAY(BIGINT)\nBlockBuilder, the nested LongArrayBlockBuilder would just have the same\nexpectedEntries as the ArrayBlockBuilder although the entries in the\nLongArrayBlockBuilder could be a lot more.\n\nThis commit uses the newly introduced newBlockBuilderLike() method that\nestimates the expectedEntries for nested BlockBuilders from previously\ncreated BlockBuilders. The following simple ArrayTransform query shows\nthe allocated long[] reduced from 118GB to 93GB on TPCH 100GB.\n\nselect transform(l_array, x-> x+1) from lineitem_map_array;"}, "afterCommit": {"oid": "1070724cbdbbad4a977294d417283b2df4750cc9", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/1070724cbdbbad4a977294d417283b2df4750cc9", "committedDate": "2020-10-19T23:52:57Z", "message": "Reserve memory for nested BlockBuilders in projection\n\nIn bf4bf6a610 \"Reserve memory before projecting rows\" we created the\nBlockBuilders new every time. However, nested BlockBuilders for complex\ntypes would lose the status from previously created BlockBuilders such\nthat memory growth increased. For example, for an ARRAY(BIGINT)\nBlockBuilder, the nested LongArrayBlockBuilder would just have the same\nexpectedEntries as the ArrayBlockBuilder although the entries in the\nLongArrayBlockBuilder could be a lot more.\n\nThis commit uses the newly introduced newBlockBuilderLike() method that\nestimates the expectedEntries for nested BlockBuilders from previously\ncreated BlockBuilders. The following simple ArrayTransform query shows\nthe allocated long[] reduced from 118GB to 93GB on TPCH 100GB.\n\nselect transform(l_array, x-> x+1) from lineitem_map_array;"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1MjI4NzEz", "url": "https://github.com/prestodb/presto/pull/15330#pullrequestreview-515228713", "createdAt": "2020-10-23T01:57:33Z", "commit": {"oid": "1070724cbdbbad4a977294d417283b2df4750cc9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMTo1NzozM1rOHm5ppQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMTo1NzozM1rOHm5ppQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1MjQ4NQ==", "bodyText": "can this lead to int overflow?", "url": "https://github.com/prestodb/presto/pull/15330#discussion_r510552485", "createdAt": "2020-10-23T01:57:33Z", "author": {"login": "bhhari"}, "path": "presto-common/src/main/java/com/facebook/presto/common/block/ArrayBlockBuilder.java", "diffHunk": "@@ -292,6 +292,14 @@ public BlockBuilder newBlockBuilderLike(BlockBuilderStatus blockBuilderStatus)\n         return new ArrayBlockBuilder(blockBuilderStatus, values.newBlockBuilderLike(blockBuilderStatus), newSize);\n     }\n \n+    @Override\n+    public BlockBuilder newBlockBuilderLike(BlockBuilderStatus blockBuilderStatus, int expectedEntries)\n+    {\n+        int newSize = max(calculateBlockResetSize(positionCount), expectedEntries);\n+        int valueExpectedEntries = positionCount == 0 ? expectedEntries : (int) (((long) offsets[positionCount] * expectedEntries) / positionCount);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1070724cbdbbad4a977294d417283b2df4750cc9"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1MjI5MTYx", "url": "https://github.com/prestodb/presto/pull/15330#pullrequestreview-515229161", "createdAt": "2020-10-23T01:59:11Z", "commit": {"oid": "1070724cbdbbad4a977294d417283b2df4750cc9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMTo1OToxMVrOHm5rEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMTo1OToxMVrOHm5rEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1Mjg0OQ==", "bodyText": "int overflow? also use Math.toExactInt", "url": "https://github.com/prestodb/presto/pull/15330#discussion_r510552849", "createdAt": "2020-10-23T01:59:11Z", "author": {"login": "bhhari"}, "path": "presto-common/src/main/java/com/facebook/presto/common/block/VariableWidthBlockBuilder.java", "diffHunk": "@@ -381,6 +382,15 @@ public BlockBuilder newBlockBuilderLike(BlockBuilderStatus blockBuilderStatus)\n         return new VariableWidthBlockBuilder(blockBuilderStatus, calculateBlockResetSize(positions), calculateBlockResetBytes(currentSizeInBytes));\n     }\n \n+    @Override\n+    public BlockBuilder newBlockBuilderLike(BlockBuilderStatus blockBuilderStatus, int expectedEntries)\n+    {\n+        int currentSizeInBytes = offsets[positions];\n+        return new VariableWidthBlockBuilder(blockBuilderStatus,\n+                max(calculateBlockResetSize(positions), expectedEntries),\n+                max(calculateBlockResetBytes(currentSizeInBytes), positions == 0 ? currentSizeInBytes : (int) ((long) currentSizeInBytes * expectedEntries) / positions));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1070724cbdbbad4a977294d417283b2df4750cc9"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1MjI5ODE4", "url": "https://github.com/prestodb/presto/pull/15330#pullrequestreview-515229818", "createdAt": "2020-10-23T02:01:37Z", "commit": {"oid": "1070724cbdbbad4a977294d417283b2df4750cc9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMjowMTozN1rOHm5tWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMjowMTozN1rOHm5tWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1MzQzNA==", "bodyText": "curious, why does 1 long take 1800 bytes?", "url": "https://github.com/prestodb/presto/pull/15330#discussion_r510553434", "createdAt": "2020-10-23T02:01:37Z", "author": {"login": "bhhari"}, "path": "presto-main/src/test/java/com/facebook/presto/block/TestBlockBuilder.java", "diffHunk": "@@ -80,6 +83,28 @@ public void testNewBlockBuilderLike()\n             assertEquals(newPageBuilder.getBlockBuilder(i).getPositionCount(), 0);\n             assertTrue(newPageBuilder.getBlockBuilder(i).getRetainedSizeInBytes() < pageBuilder.getBlockBuilder(i).getRetainedSizeInBytes());\n         }\n+\n+        BlockBuilder newBigintBlockBuilder = bigintBlockBuilder.newBlockBuilderLike(null, 200);\n+        assertEquals(newBigintBlockBuilder.getPositionCount(), 0);\n+        assertEquals(newBigintBlockBuilder.getRetainedSizeInBytes(), 80);\n+        newBigintBlockBuilder.writeLong(0);\n+        assertEquals(newBigintBlockBuilder.getPositionCount(), 1);\n+        assertEquals(newBigintBlockBuilder.getRetainedSizeInBytes(), 1880);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1070724cbdbbad4a977294d417283b2df4750cc9"}, "originalPosition": 23}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1070724cbdbbad4a977294d417283b2df4750cc9", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/1070724cbdbbad4a977294d417283b2df4750cc9", "committedDate": "2020-10-19T23:52:57Z", "message": "Reserve memory for nested BlockBuilders in projection\n\nIn bf4bf6a610 \"Reserve memory before projecting rows\" we created the\nBlockBuilders new every time. However, nested BlockBuilders for complex\ntypes would lose the status from previously created BlockBuilders such\nthat memory growth increased. For example, for an ARRAY(BIGINT)\nBlockBuilder, the nested LongArrayBlockBuilder would just have the same\nexpectedEntries as the ArrayBlockBuilder although the entries in the\nLongArrayBlockBuilder could be a lot more.\n\nThis commit uses the newly introduced newBlockBuilderLike() method that\nestimates the expectedEntries for nested BlockBuilders from previously\ncreated BlockBuilders. The following simple ArrayTransform query shows\nthe allocated long[] reduced from 118GB to 93GB on TPCH 100GB.\n\nselect transform(l_array, x-> x+1) from lineitem_map_array;"}, "afterCommit": {"oid": "5037f3f241aed87bbcd03725d6f6165d06bc7cc2", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/5037f3f241aed87bbcd03725d6f6165d06bc7cc2", "committedDate": "2020-10-23T03:35:31Z", "message": "Reserve memory for nested BlockBuilders in projection\n\nIn bf4bf6a610 \"Reserve memory before projecting rows\" we created the\nBlockBuilders new every time. However, nested BlockBuilders for complex\ntypes would lose the status from previously created BlockBuilders such\nthat memory growth increased. For example, for an ARRAY(BIGINT)\nBlockBuilder, the nested LongArrayBlockBuilder would just have the same\nexpectedEntries as the ArrayBlockBuilder although the entries in the\nLongArrayBlockBuilder could be a lot more.\n\nThis commit uses the newly introduced newBlockBuilderLike() method that\nestimates the expectedEntries for nested BlockBuilders from previously\ncreated BlockBuilders. The following simple ArrayTransform query shows\nthe allocated long[] reduced from 118GB to 93GB on TPCH 100GB.\n\nselect transform(l_array, x-> x+1) from lineitem_map_array;"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ecf2dcbd3c767987080febeec2336642a92b9c6", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/1ecf2dcbd3c767987080febeec2336642a92b9c6", "committedDate": "2020-10-23T03:42:24Z", "message": "Introduce newBlockBuilderLike() with expectedEntries"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1212cfaa8c3e1d31caa5441ffd15fec428c8f28c", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/1212cfaa8c3e1d31caa5441ffd15fec428c8f28c", "committedDate": "2020-10-23T03:42:24Z", "message": "Reserve memory for nested BlockBuilders in projection\n\nIn bf4bf6a610 \"Reserve memory before projecting rows\" we created the\nBlockBuilders new every time. However, nested BlockBuilders for complex\ntypes would lose the status from previously created BlockBuilders such\nthat memory growth increased. For example, for an ARRAY(BIGINT)\nBlockBuilder, the nested LongArrayBlockBuilder would just have the same\nexpectedEntries as the ArrayBlockBuilder although the entries in the\nLongArrayBlockBuilder could be a lot more.\n\nThis commit uses the newly introduced newBlockBuilderLike() method that\nestimates the expectedEntries for nested BlockBuilders from previously\ncreated BlockBuilders. The following simple ArrayTransform query shows\nthe allocated long[] reduced from 118GB to 93GB on TPCH 100GB.\n\nselect transform(l_array, x-> x+1) from lineitem_map_array;"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5037f3f241aed87bbcd03725d6f6165d06bc7cc2", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/5037f3f241aed87bbcd03725d6f6165d06bc7cc2", "committedDate": "2020-10-23T03:35:31Z", "message": "Reserve memory for nested BlockBuilders in projection\n\nIn bf4bf6a610 \"Reserve memory before projecting rows\" we created the\nBlockBuilders new every time. However, nested BlockBuilders for complex\ntypes would lose the status from previously created BlockBuilders such\nthat memory growth increased. For example, for an ARRAY(BIGINT)\nBlockBuilder, the nested LongArrayBlockBuilder would just have the same\nexpectedEntries as the ArrayBlockBuilder although the entries in the\nLongArrayBlockBuilder could be a lot more.\n\nThis commit uses the newly introduced newBlockBuilderLike() method that\nestimates the expectedEntries for nested BlockBuilders from previously\ncreated BlockBuilders. The following simple ArrayTransform query shows\nthe allocated long[] reduced from 118GB to 93GB on TPCH 100GB.\n\nselect transform(l_array, x-> x+1) from lineitem_map_array;"}, "afterCommit": {"oid": "1212cfaa8c3e1d31caa5441ffd15fec428c8f28c", "author": {"user": null}, "url": "https://github.com/prestodb/presto/commit/1212cfaa8c3e1d31caa5441ffd15fec428c8f28c", "committedDate": "2020-10-23T03:42:24Z", "message": "Reserve memory for nested BlockBuilders in projection\n\nIn bf4bf6a610 \"Reserve memory before projecting rows\" we created the\nBlockBuilders new every time. However, nested BlockBuilders for complex\ntypes would lose the status from previously created BlockBuilders such\nthat memory growth increased. For example, for an ARRAY(BIGINT)\nBlockBuilder, the nested LongArrayBlockBuilder would just have the same\nexpectedEntries as the ArrayBlockBuilder although the entries in the\nLongArrayBlockBuilder could be a lot more.\n\nThis commit uses the newly introduced newBlockBuilderLike() method that\nestimates the expectedEntries for nested BlockBuilders from previously\ncreated BlockBuilders. The following simple ArrayTransform query shows\nthe allocated long[] reduced from 118GB to 93GB on TPCH 100GB.\n\nselect transform(l_array, x-> x+1) from lineitem_map_array;"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MTA4NDAx", "url": "https://github.com/prestodb/presto/pull/15330#pullrequestreview-516108401", "createdAt": "2020-10-23T23:46:18Z", "commit": {"oid": "1ecf2dcbd3c767987080febeec2336642a92b9c6"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzo0NjoxOFrOHnhJBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzo0NjoxOFrOHnhJBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE5OTQ5NA==", "bodyText": "Why not just use newSize? Are you trying to account for some fraction of rows being null?", "url": "https://github.com/prestodb/presto/pull/15330#discussion_r511199494", "createdAt": "2020-10-23T23:46:18Z", "author": {"login": "mbasmanova"}, "path": "presto-common/src/main/java/com/facebook/presto/common/block/RowBlockBuilder.java", "diffHunk": "@@ -298,4 +300,16 @@ public BlockBuilder newBlockBuilderLike(BlockBuilderStatus blockBuilderStatus)\n         }\n         return new RowBlockBuilder(blockBuilderStatus, newBlockBuilders, new int[newSize + 1], new boolean[newSize]);\n     }\n+\n+    @Override\n+    public BlockBuilder newBlockBuilderLike(BlockBuilderStatus blockBuilderStatus, int expectedEntries)\n+    {\n+        int newSize = max(calculateBlockResetSize(getPositionCount()), expectedEntries);\n+        BlockBuilder[] newBlockBuilders = new BlockBuilder[numFields];\n+        int nestedExpectedEntries = positionCount == 0 ? expectedEntries : toIntExact((long) fieldBlockOffsets[positionCount] * newSize / positionCount);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ecf2dcbd3c767987080febeec2336642a92b9c6"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4953, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}