{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4NjcwNTYw", "number": 14146, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxOTowNToyMVrOEcNINg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxOToxMDoxNlrOEcNOUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MDEwNjc4OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveWriteUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxOTowNToyMVrOHGl4LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMDo0Njo1NVrOHGpHRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY3NDA5Mg==", "bodyText": "do we need this line?", "url": "https://github.com/prestodb/presto/pull/14146#discussion_r476674092", "createdAt": "2020-08-25T19:05:21Z", "author": {"login": "zhenxiao"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveWriteUtils.java", "diffHunk": "@@ -13,18 +13,25 @@\n  */\n package com.facebook.presto.hive;\n \n+import com.google.common.io.Files;\n import org.apache.hadoop.fs.Path;\n import org.testng.annotations.Test;\n \n+import java.util.UUID;\n+\n+import static com.facebook.presto.hive.HiveTestUtils.SESSION;\n import static com.facebook.presto.hive.HiveTestUtils.createTestHdfsEnvironment;\n+import static com.facebook.presto.hive.HiveWriteUtils.createTemporaryPath;\n import static com.facebook.presto.hive.HiveWriteUtils.isS3FileSystem;\n import static com.facebook.presto.hive.HiveWriteUtils.isViewFileSystem;\n-import static com.facebook.presto.testing.TestingConnectorSession.SESSION;\n+import static org.testng.Assert.assertEquals;\n import static org.testng.Assert.assertFalse;\n import static org.testng.Assert.assertTrue;\n+import static org.testng.Assert.fail;\n \n public class TestHiveWriteUtils\n {\n+    //HdfsContext CONTEXT = new HdfsContext(new ConnectorIdentity(\"test\", Optional.empty(), Optional.empty()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4eae741c7a165d196b6bee3af285f6643b8209dc"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjcyNzEwOA==", "bodyText": "removed", "url": "https://github.com/prestodb/presto/pull/14146#discussion_r476727108", "createdAt": "2020-08-25T20:46:55Z", "author": {"login": "beinan"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveWriteUtils.java", "diffHunk": "@@ -13,18 +13,25 @@\n  */\n package com.facebook.presto.hive;\n \n+import com.google.common.io.Files;\n import org.apache.hadoop.fs.Path;\n import org.testng.annotations.Test;\n \n+import java.util.UUID;\n+\n+import static com.facebook.presto.hive.HiveTestUtils.SESSION;\n import static com.facebook.presto.hive.HiveTestUtils.createTestHdfsEnvironment;\n+import static com.facebook.presto.hive.HiveWriteUtils.createTemporaryPath;\n import static com.facebook.presto.hive.HiveWriteUtils.isS3FileSystem;\n import static com.facebook.presto.hive.HiveWriteUtils.isViewFileSystem;\n-import static com.facebook.presto.testing.TestingConnectorSession.SESSION;\n+import static org.testng.Assert.assertEquals;\n import static org.testng.Assert.assertFalse;\n import static org.testng.Assert.assertTrue;\n+import static org.testng.Assert.fail;\n \n public class TestHiveWriteUtils\n {\n+    //HdfsContext CONTEXT = new HdfsContext(new ConnectorIdentity(\"test\", Optional.empty(), Optional.empty()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY3NDA5Mg=="}, "originalCommit": {"oid": "4eae741c7a165d196b6bee3af285f6643b8209dc"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MDEyMjQzOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveWriteUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxOToxMDoxNlrOHGmCKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMDo0NzowN1rOHGpHoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY3NjY1MA==", "bodyText": "could we have testcases for both targetPath exist and not exist?", "url": "https://github.com/prestodb/presto/pull/14146#discussion_r476676650", "createdAt": "2020-08-25T19:10:16Z", "author": {"login": "zhenxiao"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveWriteUtils.java", "diffHunk": "@@ -48,4 +55,39 @@ public void testIsViewFileSystem()\n         assertTrue(isViewFileSystem(CONTEXT, hdfsEnvironment, viewfsPath));\n         assertFalse(isViewFileSystem(CONTEXT, hdfsEnvironment, nonViewfsPath));\n     }\n+\n+    @Test void testCreateTemporaryPathOnViewFS()\n+    {\n+        HdfsEnvironment hdfsEnvironment = createTestHdfsEnvironment(new HiveClientConfig(), new MetastoreClientConfig());\n+        Path viewfsPath = new Path(\"viewfs://ns-default/test-dir\");\n+\n+        // ViewFS check requires the mount point config\n+        hdfsEnvironment.getConfiguration(CONTEXT, viewfsPath).set(\"fs.viewfs.mounttable.ns-default.link./test-dir\", \"file://\" + Files.createTempDir());\n+\n+        Path temporaryPath = createTemporaryPath(SESSION, CONTEXT, hdfsEnvironment, viewfsPath);\n+\n+        assertEquals(temporaryPath.getParent().toString(), \"viewfs://ns-default/test-dir/.hive-staging\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4eae741c7a165d196b6bee3af285f6643b8209dc"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjcyNzIwMQ==", "bodyText": "test cases added", "url": "https://github.com/prestodb/presto/pull/14146#discussion_r476727201", "createdAt": "2020-08-25T20:47:07Z", "author": {"login": "beinan"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveWriteUtils.java", "diffHunk": "@@ -48,4 +55,39 @@ public void testIsViewFileSystem()\n         assertTrue(isViewFileSystem(CONTEXT, hdfsEnvironment, viewfsPath));\n         assertFalse(isViewFileSystem(CONTEXT, hdfsEnvironment, nonViewfsPath));\n     }\n+\n+    @Test void testCreateTemporaryPathOnViewFS()\n+    {\n+        HdfsEnvironment hdfsEnvironment = createTestHdfsEnvironment(new HiveClientConfig(), new MetastoreClientConfig());\n+        Path viewfsPath = new Path(\"viewfs://ns-default/test-dir\");\n+\n+        // ViewFS check requires the mount point config\n+        hdfsEnvironment.getConfiguration(CONTEXT, viewfsPath).set(\"fs.viewfs.mounttable.ns-default.link./test-dir\", \"file://\" + Files.createTempDir());\n+\n+        Path temporaryPath = createTemporaryPath(SESSION, CONTEXT, hdfsEnvironment, viewfsPath);\n+\n+        assertEquals(temporaryPath.getParent().toString(), \"viewfs://ns-default/test-dir/.hive-staging\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY3NjY1MA=="}, "originalCommit": {"oid": "4eae741c7a165d196b6bee3af285f6643b8209dc"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3084, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}