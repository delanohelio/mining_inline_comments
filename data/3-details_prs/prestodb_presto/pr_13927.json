{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5MjQzMzQ3", "number": 13927, "title": "Optimize NOT IN filter for strings", "bodyText": "== NO RELEASE NOTES ==", "createdAt": "2020-01-04T20:09:51Z", "url": "https://github.com/prestodb/presto/pull/13927", "merged": true, "mergeCommit": {"oid": "cc398f55f1b2f05ce84f0cdca20f549e134a4d3a"}, "closed": true, "closedAt": "2020-01-14T16:33:43Z", "author": {"login": "kewang1024"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb3LcCwgBqjI5MjIxMDQzNzM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb4x4l5gFqTM0MDg2MTI5NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "53d1e5fbbef19c36dc5fd83b60899188a9d4111a", "author": {"user": {"login": "kewang1024", "name": "Ke"}}, "url": "https://github.com/prestodb/presto/commit/53d1e5fbbef19c36dc5fd83b60899188a9d4111a", "committedDate": "2020-01-04T20:04:49Z", "message": "Optimize BytesValues in TupleDomainFilter for NOT IN"}, "afterCommit": {"oid": "566c49085d5b9b7df7c0b7e8ec2604bd379c1cdc", "author": {"user": {"login": "kewang1024", "name": "Ke"}}, "url": "https://github.com/prestodb/presto/commit/566c49085d5b9b7df7c0b7e8ec2604bd379c1cdc", "committedDate": "2020-01-04T23:19:44Z", "message": "Add benchmark for BytesValues"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM4Njg5NjA2", "url": "https://github.com/prestodb/presto/pull/13927#pullrequestreview-338689606", "createdAt": "2020-01-06T14:57:54Z", "commit": {"oid": "17061d8ce7f6058aa4d75cef95e1d23c7580df2d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxNDo1Nzo1NFrOFafyfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxNToyNDoyMVrOFagg6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzMyODEyNg==", "bodyText": "keep this private", "url": "https://github.com/prestodb/presto/pull/13927#discussion_r363328126", "createdAt": "2020-01-06T14:57:54Z", "author": {"login": "mbasmanova"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/TupleDomainFilter.java", "diffHunk": "@@ -983,7 +983,7 @@ public String toString()\n         private final boolean upperExclusive;\n         private final boolean singleValue;\n \n-        private BytesRange(byte[] lower, boolean lowerExclusive, byte[] upper, boolean upperExclusive, boolean nullAllowed)\n+        protected BytesRange(byte[] lower, boolean lowerExclusive, byte[] upper, boolean upperExclusive, boolean nullAllowed)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17061d8ce7f6058aa4d75cef95e1d23c7580df2d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzMyODIzMQ==", "bodyText": "unused method; remove", "url": "https://github.com/prestodb/presto/pull/13927#discussion_r363328231", "createdAt": "2020-01-06T14:58:10Z", "author": {"login": "mbasmanova"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/TupleDomainFilter.java", "diffHunk": "@@ -1045,11 +1045,21 @@ public boolean isSingleValue()\n             return singleValue;\n         }\n \n+        public boolean isCompleteExclusive()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17061d8ce7f6058aa4d75cef95e1d23c7580df2d"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzMyOTI5MA==", "bodyText": "check length first:\nif (!delegate.testLength(length)) {\n   return true;\n}", "url": "https://github.com/prestodb/presto/pull/13927#discussion_r363329290", "createdAt": "2020-01-06T15:00:30Z", "author": {"login": "mbasmanova"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/TupleDomainFilter.java", "diffHunk": "@@ -1209,6 +1219,66 @@ public String toString()\n         }\n     }\n \n+    class BytesValuesExclusive\n+            extends AbstractTupleDomainFilter\n+    {\n+        private final BytesValues delegate;\n+\n+        private BytesValuesExclusive(byte[][] values, boolean nullAllowed)\n+        {\n+            super(true, nullAllowed);\n+            delegate = new BytesValues(values, nullAllowed);\n+        }\n+\n+        public static BytesValuesExclusive of(byte[][] values, boolean nullAllowed)\n+        {\n+            return new BytesValuesExclusive(values, nullAllowed);\n+        }\n+\n+        @Override\n+        public boolean testBytes(byte[] value, int offset, int length)\n+        {\n+            return !delegate.testBytes(value, offset, length);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17061d8ce7f6058aa4d75cef95e1d23c7580df2d"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzMzMDE3Mw==", "bodyText": "use existing BytesRange::getLower method here and remove newly added getUpper", "url": "https://github.com/prestodb/presto/pull/13927#discussion_r363330173", "createdAt": "2020-01-06T15:02:39Z", "author": {"login": "mbasmanova"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/TupleDomainFilterUtils.java", "diffHunk": "@@ -129,9 +131,18 @@ public static TupleDomainFilter toFilter(Domain domain)\n                                 .toArray(byte[][]::new),\n                         nullAllowed);\n             }\n+\n+            if (isNotIn(ranges)) {\n+                return BytesValuesExclusive.of(\n+                        bytesRanges.stream()\n+                                .map(BytesRange::getUpper)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17061d8ce7f6058aa4d75cef95e1d23c7580df2d"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzMzMzE2NA==", "bodyText": "method comment needs to be updated and discussion of NaNs needs to be moved to the caller; I'd move changes to this method into a separate commit\n    /**\n     * Returns true is ranges represent != or NOT IN filter for double, float or string column.\n     *\n     * The logic is to return true if ranges are next to each other, but don't include the touch value.\n     */\n    private static boolean isNotIn(List<Range> ranges)\n\nand, in the caller:\n\n        if (firstRangeFilter instanceof DoubleRange || firstRangeFilter instanceof FloatRange) {\n            // != and NOT IN filters should return true when applied to NaN\n            // E.g. NaN != 1.0 as well as NaN NOT IN (1.0, 2.5, 3.6) should return true; otherwise false.\n            boolean nanAllowed = isNotIn(ranges);\n            return MultiRange.of(rangeFilters, nullAllowed, nanAllowed);\n        }\n\n        return MultiRange.of(rangeFilters, nullAllowed, false);", "url": "https://github.com/prestodb/presto/pull/13927#discussion_r363333164", "createdAt": "2020-01-06T15:09:31Z", "author": {"login": "mbasmanova"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/TupleDomainFilterUtils.java", "diffHunk": "@@ -142,7 +153,7 @@ public static TupleDomainFilter toFilter(Domain domain)\n      *\n      * The logic is to return true if ranges are next to each other, but don't include the touch value.\n      */\n-    private static boolean isNanAllowed(List<Range> ranges)\n+    private static boolean isNotIn(List<Range> ranges)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17061d8ce7f6058aa4d75cef95e1d23c7580df2d"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzMzNjc5Mg==", "bodyText": "message needs updating: checkArgument(values.length > 0, \"values must not be empty\");", "url": "https://github.com/prestodb/presto/pull/13927#discussion_r363336792", "createdAt": "2020-01-06T15:17:30Z", "author": {"login": "mbasmanova"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/TupleDomainFilter.java", "diffHunk": "@@ -1098,7 +1108,7 @@ private BytesValues(byte[][] values, boolean nullAllowed)\n             super(true, nullAllowed);\n \n             requireNonNull(values, \"values is null\");\n-            checkArgument(values.length > 1, \"values must contain at least 2 entries\");\n+            checkArgument(values.length > 0, \"values must contain at least 1 entries\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17061d8ce7f6058aa4d75cef95e1d23c7580df2d"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzM0MDAwOQ==", "bodyText": "I don't think this benchmark is valid. In general you are not supposed to perform same operation in a loop like this, rather let JMH do that. Re-writing the benchmark to remove the loop shows same performance for these two operations:\n    @Benchmark\n    public boolean lookupInExclusive(BenchmarkBytesValues.BenchmarkData data)\n    {\n        return data.exclusiveFilter.testBytes(word, 0, 3);\n    }\n\n    @Benchmark\n    public boolean lookupInMultiRange(BenchmarkBytesValues.BenchmarkData data)\n    {\n        return data.multiRangeFilter.testBytes(word, 0, 3);\n    }\n\n# Run complete. Total time: 00:01:23\n\nBenchmark                                Mode  Cnt   Score    Error  Units\nBenchmarkBytesValues.lookupInExclusive   avgt   20  \u2248 10\u207b\u2075           ms/op\nBenchmarkBytesValues.lookupInMultiRange  avgt   20  \u2248 10\u207b\u2075           ms/op\n\nWriting good benchmark is not a requirement for the PR. If you want to write it, I suggest to start by writing benchmark for the main use case, e.g. in list with multiple entries, then see when performance difference is for very large in lists (e.g. hundreds of values), then make sure that in-list with one entry or != filter doesn't regress. Here is where I would start:\n@OutputTimeUnit(NANOSECONDS)\n\n    // NOT IN (\"apple\", \"grape\", \"orange\")\n    // \"abc\", \"apple\", \"banana\", \"grape\", \"orange\", \"peach\"\n    private final byte[][] testWords = new byte[][] {\"abc\".getBytes(), \"apple\".getBytes(), \"banana\".getBytes(), \"grape\".getBytes(), \"orange\".getBytes(), \"peach\".getBytes()};\n\n    @Benchmark\n    public int lookupInExclusive(BenchmarkBytesValues.BenchmarkData data)\n    {\n        int hits = 0;\n        for (int i = 0; i < testWords.length; i++) {\n            if (data.exclusiveFilter.testBytes(testWords[i], 0, testWords[i].length)) {\n                hits++;\n            }\n        }\n\n        return hits;\n    }\n\n    @Benchmark\n    public int lookupInMultiRange(BenchmarkBytesValues.BenchmarkData data)\n    {\n        int hits = 0;\n        for (int i = 0; i < testWords.length; i++) {\n            if (data.multiRangeFilter.testBytes(testWords[i], 0, testWords[i].length)) {\n                hits++;\n            }\n        }\n\n        return hits;\n    }\n\n    @State(Scope.Thread)\n    public static class BenchmarkData\n    {\n        private TupleDomainFilter exclusiveFilter;\n        private TupleDomainFilter multiRangeFilter;\n\n        @Setup\n        public void setup()\n                throws Exception\n        {\n            exclusiveFilter = BytesValuesExclusive.of(new byte[][] {\"apple\".getBytes(), \"grape\".getBytes(), \"orange\".getBytes()}, false);\n            multiRangeFilter = TupleDomainFilter.MultiRange.of(\n                    ImmutableList.of(\n                            BytesRange.of(null, true, \"apple\".getBytes(), true, false),\n                            BytesRange.of(\"apple\".getBytes(), true, \"grape\".getBytes(), true, false),\n                            BytesRange.of(\"grape\".getBytes(), true, \"orange\".getBytes(), true, false),\n                            BytesRange.of(\"orange\".getBytes(), true, null, true, false)),\n                    false,\n                    false);\n        }\n    }\n\nBenchmark                                Mode  Cnt   Score   Error  Units\nBenchmarkBytesValues.lookupInExclusive   avgt   20  63.112 \u00b1 0.811  ns/op\nBenchmarkBytesValues.lookupInMultiRange  avgt   20  93.394 \u00b1 0.530  ns/op", "url": "https://github.com/prestodb/presto/pull/13927#discussion_r363340009", "createdAt": "2020-01-06T15:24:21Z", "author": {"login": "mbasmanova"}, "path": "presto-orc/src/test/java/com/facebook/presto/orc/BenchmarkBytesValues.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.orc;\n+\n+import com.google.common.collect.ImmutableList;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.runner.Runner;\n+import org.openjdk.jmh.runner.options.Options;\n+import org.openjdk.jmh.runner.options.OptionsBuilder;\n+import org.openjdk.jmh.runner.options.VerboseMode;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+@State(Scope.Thread)\n+@OutputTimeUnit(MILLISECONDS)\n+@Fork(2)\n+@Warmup(iterations = 10, time = 1000, timeUnit = MILLISECONDS)\n+@Measurement(iterations = 10, time = 1000, timeUnit = MILLISECONDS)\n+@BenchmarkMode(Mode.AverageTime)\n+public class BenchmarkBytesValues\n+{\n+    private final byte[] word = new byte[]{'h', 'h', 'h'};\n+\n+    @Benchmark\n+    public int lookupInExclusive(BenchmarkBytesValues.BenchmarkData data)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "566c49085d5b9b7df7c0b7e8ec2604bd379c1cdc"}, "originalPosition": 45}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "566c49085d5b9b7df7c0b7e8ec2604bd379c1cdc", "author": {"user": {"login": "kewang1024", "name": "Ke"}}, "url": "https://github.com/prestodb/presto/commit/566c49085d5b9b7df7c0b7e8ec2604bd379c1cdc", "committedDate": "2020-01-04T23:19:44Z", "message": "Add benchmark for BytesValues"}, "afterCommit": {"oid": "d38608f89394b4c67cf138a7becf39c0ae04ea00", "author": {"user": {"login": "kewang1024", "name": "Ke"}}, "url": "https://github.com/prestodb/presto/commit/d38608f89394b4c67cf138a7becf39c0ae04ea00", "committedDate": "2020-01-09T18:34:00Z", "message": "Add benchmark for BytesValues"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQwNzM4MjM2", "url": "https://github.com/prestodb/presto/pull/13927#pullrequestreview-340738236", "createdAt": "2020-01-09T18:47:30Z", "commit": {"oid": "e9f69dc02c67e7841788d752e39ca6eecf82171f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxODo0NzozMFrOFb_2nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxODo0NzozMFrOFb_2nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDkwMjA0NQ==", "bodyText": "@kewang1024 string columns are not yet supported here; either add support or update comment", "url": "https://github.com/prestodb/presto/pull/13927#discussion_r364902045", "createdAt": "2020-01-09T18:47:30Z", "author": {"login": "mbasmanova"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/TupleDomainFilterUtils.java", "diffHunk": "@@ -131,18 +131,22 @@ public static TupleDomainFilter toFilter(Domain domain)\n             }\n         }\n \n-        return MultiRange.of(rangeFilters, nullAllowed, isNanAllowed(ranges));\n+        if (firstRangeFilter instanceof DoubleRange || firstRangeFilter instanceof FloatRange) {\n+            // != and NOT IN filters should return true when applied to NaN\n+            // E.g. NaN != 1.0 as well as NaN NOT IN (1.0, 2.5, 3.6) should return true; otherwise false.\n+            boolean nanAllowed = isNotIn(ranges);\n+            return MultiRange.of(rangeFilters, nullAllowed, nanAllowed);\n+        }\n+\n+        return MultiRange.of(rangeFilters, nullAllowed, false);\n     }\n \n     /**\n-     * Returns true is ranges represent != or NOT IN filter. These types of filters should\n-     * return true when applied to NaN.\n-     *\n-     * E.g. NaN != 1.0 as well as NaN NOT IN (1.0, 2.5, 3.6) should return true; otherwise false.\n+     * Returns true is ranges represent != or NOT IN filter for double, float or string column.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9f69dc02c67e7841788d752e39ca6eecf82171f"}, "originalPosition": 20}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd40c365bc64d261a4bc5197b30b42d88fdc891f", "author": {"user": {"login": "kewang1024", "name": "Ke"}}, "url": "https://github.com/prestodb/presto/commit/bd40c365bc64d261a4bc5197b30b42d88fdc891f", "committedDate": "2020-01-09T19:08:14Z", "message": "Rename isNanAllowed function and update comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20bb195fdbbdc73bddfc683574fd9dce6ba2a5cc", "author": {"user": {"login": "kewang1024", "name": "Ke"}}, "url": "https://github.com/prestodb/presto/commit/20bb195fdbbdc73bddfc683574fd9dce6ba2a5cc", "committedDate": "2020-01-09T20:16:01Z", "message": "Optimize NOT IN filter for strings"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d38608f89394b4c67cf138a7becf39c0ae04ea00", "author": {"user": {"login": "kewang1024", "name": "Ke"}}, "url": "https://github.com/prestodb/presto/commit/d38608f89394b4c67cf138a7becf39c0ae04ea00", "committedDate": "2020-01-09T18:34:00Z", "message": "Add benchmark for BytesValues"}, "afterCommit": {"oid": "87c0888f196441a50c14ee637cae85479903b3c2", "author": {"user": {"login": "kewang1024", "name": "Ke"}}, "url": "https://github.com/prestodb/presto/commit/87c0888f196441a50c14ee637cae85479903b3c2", "committedDate": "2020-01-09T20:16:01Z", "message": "Add benchmark for BytesValues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f5b006ea784c3073641db79ae7bab6400174c6b", "author": {"user": {"login": "kewang1024", "name": "Ke"}}, "url": "https://github.com/prestodb/presto/commit/1f5b006ea784c3073641db79ae7bab6400174c6b", "committedDate": "2020-01-09T22:23:15Z", "message": "Add benchmark for BytesValues"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "87c0888f196441a50c14ee637cae85479903b3c2", "author": {"user": {"login": "kewang1024", "name": "Ke"}}, "url": "https://github.com/prestodb/presto/commit/87c0888f196441a50c14ee637cae85479903b3c2", "committedDate": "2020-01-09T20:16:01Z", "message": "Add benchmark for BytesValues"}, "afterCommit": {"oid": "1f5b006ea784c3073641db79ae7bab6400174c6b", "author": {"user": {"login": "kewang1024", "name": "Ke"}}, "url": "https://github.com/prestodb/presto/commit/1f5b006ea784c3073641db79ae7bab6400174c6b", "committedDate": "2020-01-09T22:23:15Z", "message": "Add benchmark for BytesValues"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQwODYxMjk0", "url": "https://github.com/prestodb/presto/pull/13927#pullrequestreview-340861294", "createdAt": "2020-01-09T22:41:51Z", "commit": {"oid": "1f5b006ea784c3073641db79ae7bab6400174c6b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4451, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}