{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4MTk5NDEy", "number": 14699, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwMDoxMToyOVrOEHxMmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwMDoxNjozN1rOEHxQMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NTgxNTMxOnYy", "diffSide": "RIGHT", "path": "presto-spark-base/src/test/java/com/facebook/presto/spark/PrestoSparkQueryRunner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwMDoxMToyOVrOGnU8eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNTowNTo0OVrOGnturw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg5MDgwOA==", "bodyText": "why no longer need processType ?", "url": "https://github.com/prestodb/presto/pull/14699#discussion_r443890808", "createdAt": "2020-06-23T00:11:29Z", "author": {"login": "wenleix"}, "path": "presto-spark-base/src/test/java/com/facebook/presto/spark/PrestoSparkQueryRunner.java", "diffHunk": "@@ -480,7 +479,7 @@ private TestingPrestoSparkTaskExecutorFactoryProvider(String instanceId)\n         }\n \n         @Override\n-        public IPrestoSparkTaskExecutorFactory get(SparkProcessType processType)\n+        public IPrestoSparkTaskExecutorFactory get()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bf93f001e562863b71550895b20abc342864229"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI5Njg3OQ==", "bodyText": "PrestoSparkTaskExecutorFactoryProvider is only used to create tasks on executor, so it is always EXECUTOR.", "url": "https://github.com/prestodb/presto/pull/14699#discussion_r444296879", "createdAt": "2020-06-23T15:05:49Z", "author": {"login": "arhimondr"}, "path": "presto-spark-base/src/test/java/com/facebook/presto/spark/PrestoSparkQueryRunner.java", "diffHunk": "@@ -480,7 +479,7 @@ private TestingPrestoSparkTaskExecutorFactoryProvider(String instanceId)\n         }\n \n         @Override\n-        public IPrestoSparkTaskExecutorFactory get(SparkProcessType processType)\n+        public IPrestoSparkTaskExecutorFactory get()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg5MDgwOA=="}, "originalCommit": {"oid": "5bf93f001e562863b71550895b20abc342864229"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NTgyNDQ5OnYy", "diffSide": "RIGHT", "path": "presto-spark-launcher/src/main/java/com/facebook/presto/spark/launcher/PrestoSparkRunner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwMDoxNjozN1rOGnVBvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNTowNjowN1rOGntvdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg5MjE1Ng==", "bodyText": "This class name is very wordy.. \ud83d\ude03", "url": "https://github.com/prestodb/presto/pull/14699#discussion_r443892156", "createdAt": "2020-06-23T00:16:37Z", "author": {"login": "wenleix"}, "path": "presto-spark-launcher/src/main/java/com/facebook/presto/spark/launcher/PrestoSparkRunner.java", "diffHunk": "@@ -122,48 +134,64 @@ private static IPrestoSparkServiceFactory createServiceFactory(File directory)\n         return serviceLoader.iterator().next();\n     }\n \n-    private static class CachingServiceFactory\n-            implements Serializable\n+    private static IPrestoSparkService createService(\n+            SparkProcessType sparkProcessType,\n+            PackageSupplier packageSupplier,\n+            Map<String, String> configProperties,\n+            Map<String, Map<String, String>> catalogProperties)\n     {\n-        private static IPrestoSparkService service;\n+        String packagePath = getPackagePath(packageSupplier);\n+        File pluginsDirectory = checkDirectory(new File(packagePath, \"plugin\"));\n+        PrestoSparkConfiguration configuration = new PrestoSparkConfiguration(configProperties, pluginsDirectory.getAbsolutePath(), catalogProperties);\n+        IPrestoSparkServiceFactory serviceFactory = createServiceFactory(checkDirectory(new File(packagePath, \"lib\")));\n+        return serviceFactory.createService(sparkProcessType, configuration);\n+    }\n \n-        private static String currentPackagePath;\n-        private static Map<String, String> currentConfigProperties;\n-        private static Map<String, Map<String, String>> currentCatalogProperties;\n-        private static SparkProcessType currentProcessEnvironment;\n+    private static String getPackagePath(PackageSupplier packageSupplier)\n+    {\n+        return checkDirectory(packageSupplier.getPrestoSparkPackageDirectory()).getAbsolutePath();\n+    }\n \n+    private static class DistributionBasedPrestoSparkTaskExecutorFactoryProvider", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bf93f001e562863b71550895b20abc342864229"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI5NzA3OQ==", "bodyText": "Yeah, unfortunately i didn't find a better name. We can think of a better name later.", "url": "https://github.com/prestodb/presto/pull/14699#discussion_r444297079", "createdAt": "2020-06-23T15:06:07Z", "author": {"login": "arhimondr"}, "path": "presto-spark-launcher/src/main/java/com/facebook/presto/spark/launcher/PrestoSparkRunner.java", "diffHunk": "@@ -122,48 +134,64 @@ private static IPrestoSparkServiceFactory createServiceFactory(File directory)\n         return serviceLoader.iterator().next();\n     }\n \n-    private static class CachingServiceFactory\n-            implements Serializable\n+    private static IPrestoSparkService createService(\n+            SparkProcessType sparkProcessType,\n+            PackageSupplier packageSupplier,\n+            Map<String, String> configProperties,\n+            Map<String, Map<String, String>> catalogProperties)\n     {\n-        private static IPrestoSparkService service;\n+        String packagePath = getPackagePath(packageSupplier);\n+        File pluginsDirectory = checkDirectory(new File(packagePath, \"plugin\"));\n+        PrestoSparkConfiguration configuration = new PrestoSparkConfiguration(configProperties, pluginsDirectory.getAbsolutePath(), catalogProperties);\n+        IPrestoSparkServiceFactory serviceFactory = createServiceFactory(checkDirectory(new File(packagePath, \"lib\")));\n+        return serviceFactory.createService(sparkProcessType, configuration);\n+    }\n \n-        private static String currentPackagePath;\n-        private static Map<String, String> currentConfigProperties;\n-        private static Map<String, Map<String, String>> currentCatalogProperties;\n-        private static SparkProcessType currentProcessEnvironment;\n+    private static String getPackagePath(PackageSupplier packageSupplier)\n+    {\n+        return checkDirectory(packageSupplier.getPrestoSparkPackageDirectory()).getAbsolutePath();\n+    }\n \n+    private static class DistributionBasedPrestoSparkTaskExecutorFactoryProvider", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg5MjE1Ng=="}, "originalCommit": {"oid": "5bf93f001e562863b71550895b20abc342864229"}, "originalPosition": 98}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2503, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}