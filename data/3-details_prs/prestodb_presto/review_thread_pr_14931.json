{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU5NDE1NTky", "number": 14931, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMDo0ODoxMlrOEUMNZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMjo1NDo0N1rOEX074w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NjA3MDE1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/InlineSqlFunctionsRewriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMDo0ODoxMlrOG6V2Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjo1OToyOVrOG7BTFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgyODUzOQ==", "bodyText": "No need to have else here.", "url": "https://github.com/prestodb/presto/pull/14931#discussion_r463828539", "createdAt": "2020-07-31T20:48:12Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/InlineSqlFunctionsRewriter.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.planner;\n+\n+import com.facebook.presto.Session;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.metadata.Metadata;\n+import com.facebook.presto.spi.function.FunctionHandle;\n+import com.facebook.presto.spi.function.FunctionImplementationType;\n+import com.facebook.presto.spi.function.FunctionMetadata;\n+import com.facebook.presto.spi.function.SqlInvokedScalarFunctionImplementation;\n+import com.facebook.presto.sql.relational.SqlFunctionUtils;\n+import com.facebook.presto.sql.tree.Expression;\n+import com.facebook.presto.sql.tree.ExpressionRewriter;\n+import com.facebook.presto.sql.tree.ExpressionTreeRewriter;\n+import com.facebook.presto.sql.tree.FunctionCall;\n+import com.facebook.presto.sql.tree.NodeRef;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.facebook.presto.SystemSessionProperties.isInlineSqlFunctions;\n+import static com.facebook.presto.metadata.FunctionManager.qualifyFunctionName;\n+import static com.facebook.presto.sql.analyzer.TypeSignatureProvider.fromTypes;\n+import static java.util.Objects.requireNonNull;\n+\n+public class InlineSqlFunctionsRewriter\n+{\n+    private InlineSqlFunctionsRewriter() {}\n+\n+    public static Expression rewrite(Expression expression, Session session, Metadata metadata, Map<NodeRef<Expression>, Type> expressionTypes)\n+    {\n+        if (isInlineSqlFunctions(session)) {\n+            return ExpressionTreeRewriter.rewriteWith(new Visitor(session, metadata, expressionTypes), expression);\n+        }\n+        else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5816ffb1b4d18bc4ee4dfce471cfc810e4aaead6"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU0MDQzOA==", "bodyText": "Done", "url": "https://github.com/prestodb/presto/pull/14931#discussion_r464540438", "createdAt": "2020-08-03T16:59:29Z", "author": {"login": "prithvip"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/InlineSqlFunctionsRewriter.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.planner;\n+\n+import com.facebook.presto.Session;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.metadata.Metadata;\n+import com.facebook.presto.spi.function.FunctionHandle;\n+import com.facebook.presto.spi.function.FunctionImplementationType;\n+import com.facebook.presto.spi.function.FunctionMetadata;\n+import com.facebook.presto.spi.function.SqlInvokedScalarFunctionImplementation;\n+import com.facebook.presto.sql.relational.SqlFunctionUtils;\n+import com.facebook.presto.sql.tree.Expression;\n+import com.facebook.presto.sql.tree.ExpressionRewriter;\n+import com.facebook.presto.sql.tree.ExpressionTreeRewriter;\n+import com.facebook.presto.sql.tree.FunctionCall;\n+import com.facebook.presto.sql.tree.NodeRef;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.facebook.presto.SystemSessionProperties.isInlineSqlFunctions;\n+import static com.facebook.presto.metadata.FunctionManager.qualifyFunctionName;\n+import static com.facebook.presto.sql.analyzer.TypeSignatureProvider.fromTypes;\n+import static java.util.Objects.requireNonNull;\n+\n+public class InlineSqlFunctionsRewriter\n+{\n+    private InlineSqlFunctionsRewriter() {}\n+\n+    public static Expression rewrite(Expression expression, Session session, Metadata metadata, Map<NodeRef<Expression>, Type> expressionTypes)\n+    {\n+        if (isInlineSqlFunctions(session)) {\n+            return ExpressionTreeRewriter.rewriteWith(new Visitor(session, metadata, expressionTypes), expression);\n+        }\n+        else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgyODUzOQ=="}, "originalCommit": {"oid": "5816ffb1b4d18bc4ee4dfce471cfc810e4aaead6"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NjA4NDY2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/InlineSqlFunctionsRewriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMDo1MDozN1rOG6V9VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjo1OTozNlrOG7BTXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgzMDM1Ng==", "bodyText": "I think we normally would just put the rewriter as a private class for the rule itself so you can move this to InlineSqlFunctions.java, unless you expect this to be used by other classes.", "url": "https://github.com/prestodb/presto/pull/14931#discussion_r463830356", "createdAt": "2020-07-31T20:50:37Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/InlineSqlFunctionsRewriter.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.planner;\n+\n+import com.facebook.presto.Session;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.metadata.Metadata;\n+import com.facebook.presto.spi.function.FunctionHandle;\n+import com.facebook.presto.spi.function.FunctionImplementationType;\n+import com.facebook.presto.spi.function.FunctionMetadata;\n+import com.facebook.presto.spi.function.SqlInvokedScalarFunctionImplementation;\n+import com.facebook.presto.sql.relational.SqlFunctionUtils;\n+import com.facebook.presto.sql.tree.Expression;\n+import com.facebook.presto.sql.tree.ExpressionRewriter;\n+import com.facebook.presto.sql.tree.ExpressionTreeRewriter;\n+import com.facebook.presto.sql.tree.FunctionCall;\n+import com.facebook.presto.sql.tree.NodeRef;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.facebook.presto.SystemSessionProperties.isInlineSqlFunctions;\n+import static com.facebook.presto.metadata.FunctionManager.qualifyFunctionName;\n+import static com.facebook.presto.sql.analyzer.TypeSignatureProvider.fromTypes;\n+import static java.util.Objects.requireNonNull;\n+\n+public class InlineSqlFunctionsRewriter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5816ffb1b4d18bc4ee4dfce471cfc810e4aaead6"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU0MDUwOQ==", "bodyText": "Done", "url": "https://github.com/prestodb/presto/pull/14931#discussion_r464540509", "createdAt": "2020-08-03T16:59:36Z", "author": {"login": "prithvip"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/InlineSqlFunctionsRewriter.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.planner;\n+\n+import com.facebook.presto.Session;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.metadata.Metadata;\n+import com.facebook.presto.spi.function.FunctionHandle;\n+import com.facebook.presto.spi.function.FunctionImplementationType;\n+import com.facebook.presto.spi.function.FunctionMetadata;\n+import com.facebook.presto.spi.function.SqlInvokedScalarFunctionImplementation;\n+import com.facebook.presto.sql.relational.SqlFunctionUtils;\n+import com.facebook.presto.sql.tree.Expression;\n+import com.facebook.presto.sql.tree.ExpressionRewriter;\n+import com.facebook.presto.sql.tree.ExpressionTreeRewriter;\n+import com.facebook.presto.sql.tree.FunctionCall;\n+import com.facebook.presto.sql.tree.NodeRef;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.facebook.presto.SystemSessionProperties.isInlineSqlFunctions;\n+import static com.facebook.presto.metadata.FunctionManager.qualifyFunctionName;\n+import static com.facebook.presto.sql.analyzer.TypeSignatureProvider.fromTypes;\n+import static java.util.Objects.requireNonNull;\n+\n+public class InlineSqlFunctionsRewriter", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgzMDM1Ng=="}, "originalCommit": {"oid": "5816ffb1b4d18bc4ee4dfce471cfc810e4aaead6"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NjA5NTQ0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/InlineSqlFunctionsRewriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMDo1MjozN1rOG6WDEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjo1OTo0MlrOG7BTog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgzMTgyNQ==", "bodyText": "No need for else.", "url": "https://github.com/prestodb/presto/pull/14931#discussion_r463831825", "createdAt": "2020-07-31T20:52:37Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/InlineSqlFunctionsRewriter.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.planner;\n+\n+import com.facebook.presto.Session;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.metadata.Metadata;\n+import com.facebook.presto.spi.function.FunctionHandle;\n+import com.facebook.presto.spi.function.FunctionImplementationType;\n+import com.facebook.presto.spi.function.FunctionMetadata;\n+import com.facebook.presto.spi.function.SqlInvokedScalarFunctionImplementation;\n+import com.facebook.presto.sql.relational.SqlFunctionUtils;\n+import com.facebook.presto.sql.tree.Expression;\n+import com.facebook.presto.sql.tree.ExpressionRewriter;\n+import com.facebook.presto.sql.tree.ExpressionTreeRewriter;\n+import com.facebook.presto.sql.tree.FunctionCall;\n+import com.facebook.presto.sql.tree.NodeRef;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.facebook.presto.SystemSessionProperties.isInlineSqlFunctions;\n+import static com.facebook.presto.metadata.FunctionManager.qualifyFunctionName;\n+import static com.facebook.presto.sql.analyzer.TypeSignatureProvider.fromTypes;\n+import static java.util.Objects.requireNonNull;\n+\n+public class InlineSqlFunctionsRewriter\n+{\n+    private InlineSqlFunctionsRewriter() {}\n+\n+    public static Expression rewrite(Expression expression, Session session, Metadata metadata, Map<NodeRef<Expression>, Type> expressionTypes)\n+    {\n+        if (isInlineSqlFunctions(session)) {\n+            return ExpressionTreeRewriter.rewriteWith(new Visitor(session, metadata, expressionTypes), expression);\n+        }\n+        else {\n+            return expression;\n+        }\n+    }\n+\n+    private static class Visitor\n+            extends ExpressionRewriter<Void>\n+    {\n+        private final Session session;\n+        private final Metadata metadata;\n+        private final Map<NodeRef<Expression>, Type> expressionTypes;\n+\n+        public Visitor(Session session, Metadata metadata, Map<NodeRef<Expression>, Type> expressionTypes)\n+        {\n+            this.session = requireNonNull(session, \"session is null\");\n+            this.metadata = requireNonNull(metadata, \"metadata is null\");\n+            this.expressionTypes = expressionTypes;\n+        }\n+\n+        @Override\n+        public Expression rewriteFunctionCall(FunctionCall node, Void context, ExpressionTreeRewriter<Void> treeRewriter)\n+        {\n+            List<Type> argumentTypes = new ArrayList<>();\n+            List<Expression> rewrittenArguments = new ArrayList<>();\n+            for (Expression argument : node.getArguments()) {\n+                argumentTypes.add(expressionTypes.get(NodeRef.of(argument)));\n+                rewrittenArguments.add(treeRewriter.rewrite(argument, context));\n+            }\n+\n+            FunctionHandle functionHandle = metadata.getFunctionManager().resolveFunction(\n+                    session.getTransactionId(),\n+                    qualifyFunctionName(node.getName()),\n+                    fromTypes(argumentTypes));\n+            FunctionMetadata functionMetadata = metadata.getFunctionManager().getFunctionMetadata(functionHandle);\n+\n+            if (functionMetadata.getImplementationType() != FunctionImplementationType.SQL) {\n+                return new FunctionCall(node.getName(), rewrittenArguments);\n+            }\n+            else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5816ffb1b4d18bc4ee4dfce471cfc810e4aaead6"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU0MDU3OA==", "bodyText": "Done", "url": "https://github.com/prestodb/presto/pull/14931#discussion_r464540578", "createdAt": "2020-08-03T16:59:42Z", "author": {"login": "prithvip"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/InlineSqlFunctionsRewriter.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.planner;\n+\n+import com.facebook.presto.Session;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.metadata.Metadata;\n+import com.facebook.presto.spi.function.FunctionHandle;\n+import com.facebook.presto.spi.function.FunctionImplementationType;\n+import com.facebook.presto.spi.function.FunctionMetadata;\n+import com.facebook.presto.spi.function.SqlInvokedScalarFunctionImplementation;\n+import com.facebook.presto.sql.relational.SqlFunctionUtils;\n+import com.facebook.presto.sql.tree.Expression;\n+import com.facebook.presto.sql.tree.ExpressionRewriter;\n+import com.facebook.presto.sql.tree.ExpressionTreeRewriter;\n+import com.facebook.presto.sql.tree.FunctionCall;\n+import com.facebook.presto.sql.tree.NodeRef;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.facebook.presto.SystemSessionProperties.isInlineSqlFunctions;\n+import static com.facebook.presto.metadata.FunctionManager.qualifyFunctionName;\n+import static com.facebook.presto.sql.analyzer.TypeSignatureProvider.fromTypes;\n+import static java.util.Objects.requireNonNull;\n+\n+public class InlineSqlFunctionsRewriter\n+{\n+    private InlineSqlFunctionsRewriter() {}\n+\n+    public static Expression rewrite(Expression expression, Session session, Metadata metadata, Map<NodeRef<Expression>, Type> expressionTypes)\n+    {\n+        if (isInlineSqlFunctions(session)) {\n+            return ExpressionTreeRewriter.rewriteWith(new Visitor(session, metadata, expressionTypes), expression);\n+        }\n+        else {\n+            return expression;\n+        }\n+    }\n+\n+    private static class Visitor\n+            extends ExpressionRewriter<Void>\n+    {\n+        private final Session session;\n+        private final Metadata metadata;\n+        private final Map<NodeRef<Expression>, Type> expressionTypes;\n+\n+        public Visitor(Session session, Metadata metadata, Map<NodeRef<Expression>, Type> expressionTypes)\n+        {\n+            this.session = requireNonNull(session, \"session is null\");\n+            this.metadata = requireNonNull(metadata, \"metadata is null\");\n+            this.expressionTypes = expressionTypes;\n+        }\n+\n+        @Override\n+        public Expression rewriteFunctionCall(FunctionCall node, Void context, ExpressionTreeRewriter<Void> treeRewriter)\n+        {\n+            List<Type> argumentTypes = new ArrayList<>();\n+            List<Expression> rewrittenArguments = new ArrayList<>();\n+            for (Expression argument : node.getArguments()) {\n+                argumentTypes.add(expressionTypes.get(NodeRef.of(argument)));\n+                rewrittenArguments.add(treeRewriter.rewrite(argument, context));\n+            }\n+\n+            FunctionHandle functionHandle = metadata.getFunctionManager().resolveFunction(\n+                    session.getTransactionId(),\n+                    qualifyFunctionName(node.getName()),\n+                    fromTypes(argumentTypes));\n+            FunctionMetadata functionMetadata = metadata.getFunctionManager().getFunctionMetadata(functionHandle);\n+\n+            if (functionMetadata.getImplementationType() != FunctionImplementationType.SQL) {\n+                return new FunctionCall(node.getName(), rewrittenArguments);\n+            }\n+            else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgzMTgyNQ=="}, "originalCommit": {"oid": "5816ffb1b4d18bc4ee4dfce471cfc810e4aaead6"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDkzMzY3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/com/facebook/presto/sql/planner/iterative/rule/TestInlineSqlFunctions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMzoxMToxNFrOG8dqdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNzozMjo1NFrOG89erw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA1Mzc1MQ==", "bodyText": "You don't have to call setSupportedFunctionLanguages here, the default (SQL only) should work. But if you want to add THRIFT function, might as well add a test to make sure that won't be inlined. \ud83d\ude02  You can also add tests to make sure builtin SQL functions like array_sum is also inlined correctly if you want.", "url": "https://github.com/prestodb/presto/pull/14931#discussion_r466053751", "createdAt": "2020-08-05T23:11:14Z", "author": {"login": "rongrong"}, "path": "presto-main/src/test/java/com/facebook/presto/sql/planner/iterative/rule/TestInlineSqlFunctions.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.planner.iterative.rule;\n+\n+import com.facebook.presto.Session;\n+import com.facebook.presto.common.CatalogSchemaName;\n+import com.facebook.presto.common.function.QualifiedFunctionName;\n+import com.facebook.presto.common.type.IntegerType;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.execution.warnings.WarningCollector;\n+import com.facebook.presto.functionNamespace.SqlInvokedFunctionNamespaceManagerConfig;\n+import com.facebook.presto.functionNamespace.testing.InMemoryFunctionNamespaceManager;\n+import com.facebook.presto.metadata.FunctionManager;\n+import com.facebook.presto.metadata.Metadata;\n+import com.facebook.presto.spi.function.Parameter;\n+import com.facebook.presto.spi.function.RoutineCharacteristics;\n+import com.facebook.presto.spi.function.SqlInvokedFunction;\n+import com.facebook.presto.spi.plan.AggregationNode;\n+import com.facebook.presto.sql.planner.iterative.rule.test.PlanBuilder;\n+import com.facebook.presto.sql.planner.iterative.rule.test.RuleTester;\n+import com.facebook.presto.sql.tree.Expression;\n+import com.facebook.presto.sql.tree.FunctionCall;\n+import com.facebook.presto.sql.tree.NodeRef;\n+import com.facebook.presto.sql.tree.QualifiedName;\n+import com.facebook.presto.sql.tree.SymbolReference;\n+import com.facebook.presto.testing.TestingSession;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.BeforeTest;\n+import org.testng.annotations.Test;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.common.type.StandardTypes.INTEGER;\n+import static com.facebook.presto.common.type.TypeSignature.parseTypeSignature;\n+import static com.facebook.presto.spi.function.RoutineCharacteristics.Determinism.DETERMINISTIC;\n+import static com.facebook.presto.spi.function.RoutineCharacteristics.NullCallClause.RETURNS_NULL_ON_NULL_INPUT;\n+import static com.facebook.presto.sql.analyzer.ExpressionAnalyzer.getExpressionTypes;\n+import static com.facebook.presto.sql.planner.TypeProvider.viewOf;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.aggregation;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.expression;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.functionCall;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.project;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.values;\n+import static com.facebook.presto.sql.planner.iterative.rule.test.PlanBuilder.assignment;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestInlineSqlFunctions\n+{\n+    private static final SqlInvokedFunction SQL_FUNCTION_SQUARE = new SqlInvokedFunction(\n+            QualifiedFunctionName.of(new CatalogSchemaName(\"unittest\", \"memory\"), \"square\"),\n+            ImmutableList.of(new Parameter(\"x\", parseTypeSignature(INTEGER))),\n+            parseTypeSignature(INTEGER),\n+            \"square\",\n+            RoutineCharacteristics.builder()\n+                    .setDeterminism(DETERMINISTIC)\n+                    .setNullCallClause(RETURNS_NULL_ON_NULL_INPUT)\n+                    .build(),\n+            \"RETURN x * x\",\n+            Optional.empty());\n+\n+    private RuleTester tester;\n+\n+    @BeforeTest\n+    public void setup()\n+    {\n+        RuleTester tester = new RuleTester();\n+        FunctionManager functionManager = tester.getMetadata().getFunctionManager();\n+        InMemoryFunctionNamespaceManager namespaceManager = new InMemoryFunctionNamespaceManager(\n+                \"unittest\",\n+                new SqlInvokedFunctionNamespaceManagerConfig().setSupportedFunctionLanguages(\"{\\\"sql\\\": \\\"SQL\\\",\\\"java\\\": \\\"THRIFT\\\"}\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f91c738ede0d2c46c0456b2742948e37e833ebf"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU3NTAyMw==", "bodyText": "Added tests for both cases", "url": "https://github.com/prestodb/presto/pull/14931#discussion_r466575023", "createdAt": "2020-08-06T17:32:54Z", "author": {"login": "prithvip"}, "path": "presto-main/src/test/java/com/facebook/presto/sql/planner/iterative/rule/TestInlineSqlFunctions.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.planner.iterative.rule;\n+\n+import com.facebook.presto.Session;\n+import com.facebook.presto.common.CatalogSchemaName;\n+import com.facebook.presto.common.function.QualifiedFunctionName;\n+import com.facebook.presto.common.type.IntegerType;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.execution.warnings.WarningCollector;\n+import com.facebook.presto.functionNamespace.SqlInvokedFunctionNamespaceManagerConfig;\n+import com.facebook.presto.functionNamespace.testing.InMemoryFunctionNamespaceManager;\n+import com.facebook.presto.metadata.FunctionManager;\n+import com.facebook.presto.metadata.Metadata;\n+import com.facebook.presto.spi.function.Parameter;\n+import com.facebook.presto.spi.function.RoutineCharacteristics;\n+import com.facebook.presto.spi.function.SqlInvokedFunction;\n+import com.facebook.presto.spi.plan.AggregationNode;\n+import com.facebook.presto.sql.planner.iterative.rule.test.PlanBuilder;\n+import com.facebook.presto.sql.planner.iterative.rule.test.RuleTester;\n+import com.facebook.presto.sql.tree.Expression;\n+import com.facebook.presto.sql.tree.FunctionCall;\n+import com.facebook.presto.sql.tree.NodeRef;\n+import com.facebook.presto.sql.tree.QualifiedName;\n+import com.facebook.presto.sql.tree.SymbolReference;\n+import com.facebook.presto.testing.TestingSession;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.BeforeTest;\n+import org.testng.annotations.Test;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.common.type.StandardTypes.INTEGER;\n+import static com.facebook.presto.common.type.TypeSignature.parseTypeSignature;\n+import static com.facebook.presto.spi.function.RoutineCharacteristics.Determinism.DETERMINISTIC;\n+import static com.facebook.presto.spi.function.RoutineCharacteristics.NullCallClause.RETURNS_NULL_ON_NULL_INPUT;\n+import static com.facebook.presto.sql.analyzer.ExpressionAnalyzer.getExpressionTypes;\n+import static com.facebook.presto.sql.planner.TypeProvider.viewOf;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.aggregation;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.expression;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.functionCall;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.project;\n+import static com.facebook.presto.sql.planner.assertions.PlanMatchPattern.values;\n+import static com.facebook.presto.sql.planner.iterative.rule.test.PlanBuilder.assignment;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestInlineSqlFunctions\n+{\n+    private static final SqlInvokedFunction SQL_FUNCTION_SQUARE = new SqlInvokedFunction(\n+            QualifiedFunctionName.of(new CatalogSchemaName(\"unittest\", \"memory\"), \"square\"),\n+            ImmutableList.of(new Parameter(\"x\", parseTypeSignature(INTEGER))),\n+            parseTypeSignature(INTEGER),\n+            \"square\",\n+            RoutineCharacteristics.builder()\n+                    .setDeterminism(DETERMINISTIC)\n+                    .setNullCallClause(RETURNS_NULL_ON_NULL_INPUT)\n+                    .build(),\n+            \"RETURN x * x\",\n+            Optional.empty());\n+\n+    private RuleTester tester;\n+\n+    @BeforeTest\n+    public void setup()\n+    {\n+        RuleTester tester = new RuleTester();\n+        FunctionManager functionManager = tester.getMetadata().getFunctionManager();\n+        InMemoryFunctionNamespaceManager namespaceManager = new InMemoryFunctionNamespaceManager(\n+                \"unittest\",\n+                new SqlInvokedFunctionNamespaceManagerConfig().setSupportedFunctionLanguages(\"{\\\"sql\\\": \\\"SQL\\\",\\\"java\\\": \\\"THRIFT\\\"}\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA1Mzc1MQ=="}, "originalCommit": {"oid": "1f91c738ede0d2c46c0456b2742948e37e833ebf"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTkyMDE0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/relational/SqlFunctionUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwMzowOTozNlrOG-m0Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMDo0OTowNFrOG_yUrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODMwMDg5MQ==", "bodyText": "Should we do this at CREATE FUNCTION execution time?", "url": "https://github.com/prestodb/presto/pull/14931#discussion_r468300891", "createdAt": "2020-08-11T03:09:36Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/relational/SqlFunctionUtils.java", "diffHunk": "@@ -61,11 +61,12 @@\n {\n     private SqlFunctionUtils() {}\n \n-    public static Expression getSqlFunctionExpression(FunctionMetadata functionMetadata, SqlInvokedScalarFunctionImplementation implementation, SqlFunctionProperties sqlFunctionProperties, List<Expression> arguments)\n+    public static Expression getSqlFunctionExpression(FunctionMetadata functionMetadata, SqlInvokedScalarFunctionImplementation implementation, Metadata metadata, SqlFunctionProperties sqlFunctionProperties, List<Expression> arguments)\n     {\n         checkArgument(functionMetadata.getImplementationType().equals(SQL), format(\"Expect SQL function, get %s\", functionMetadata.getImplementationType()));\n         checkArgument(functionMetadata.getArgumentNames().isPresent(), \"ArgumentNames is missing\");\n         Expression expression = normalizeParameters(functionMetadata.getArgumentNames().get(), parseSqlFunctionExpression(implementation, sqlFunctionProperties));\n+        expression = coerceIfNecessary(functionMetadata, expression, sqlFunctionProperties, metadata);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3e2aaf45e46f8e6c5dfa8f72cffa5a9976f94a9"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTUzNzk2Nw==", "bodyText": "Yes, that's a good idea, done.", "url": "https://github.com/prestodb/presto/pull/14931#discussion_r469537967", "createdAt": "2020-08-12T20:49:04Z", "author": {"login": "prithvip"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/relational/SqlFunctionUtils.java", "diffHunk": "@@ -61,11 +61,12 @@\n {\n     private SqlFunctionUtils() {}\n \n-    public static Expression getSqlFunctionExpression(FunctionMetadata functionMetadata, SqlInvokedScalarFunctionImplementation implementation, SqlFunctionProperties sqlFunctionProperties, List<Expression> arguments)\n+    public static Expression getSqlFunctionExpression(FunctionMetadata functionMetadata, SqlInvokedScalarFunctionImplementation implementation, Metadata metadata, SqlFunctionProperties sqlFunctionProperties, List<Expression> arguments)\n     {\n         checkArgument(functionMetadata.getImplementationType().equals(SQL), format(\"Expect SQL function, get %s\", functionMetadata.getImplementationType()));\n         checkArgument(functionMetadata.getArgumentNames().isPresent(), \"ArgumentNames is missing\");\n         Expression expression = normalizeParameters(functionMetadata.getArgumentNames().get(), parseSqlFunctionExpression(implementation, sqlFunctionProperties));\n+        expression = coerceIfNecessary(functionMetadata, expression, sqlFunctionProperties, metadata);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODMwMDg5MQ=="}, "originalCommit": {"oid": "e3e2aaf45e46f8e6c5dfa8f72cffa5a9976f94a9"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzg5MTg2OnYy", "diffSide": "LEFT", "path": "presto-main/src/main/java/com/facebook/presto/sql/relational/SqlFunctionUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMTowMDo1OFrOG_ytLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMjowODoyM1rOG_0iRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU0NDIzOQ==", "bodyText": "Let's keep this. We need to check all existing functions and update them before it's safe to remove these. So also add the coercion in getSqlFunctionExpression. We can think about introducing a warning for this and deprecate this in later releases.", "url": "https://github.com/prestodb/presto/pull/14931#discussion_r469544239", "createdAt": "2020-08-12T21:00:58Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/relational/SqlFunctionUtils.java", "diffHunk": "@@ -191,30 +187,6 @@ public Expression rewriteIdentifier(Identifier node, Map<Identifier, VariableRef\n         }, sqlFunction, variableMap);\n     }\n \n-    private static Expression coerceIfNecessary(FunctionMetadata functionMetadata, Expression sqlFunction, SqlFunctionProperties sqlFunctionProperties, Metadata metadata)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6075d233f85ac8414ada476d9730d7d945d52bd"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU3NDIxMw==", "bodyText": "Ok sure, done.", "url": "https://github.com/prestodb/presto/pull/14931#discussion_r469574213", "createdAt": "2020-08-12T22:08:23Z", "author": {"login": "prithvip"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/relational/SqlFunctionUtils.java", "diffHunk": "@@ -191,30 +187,6 @@ public Expression rewriteIdentifier(Identifier node, Map<Identifier, VariableRef\n         }, sqlFunction, variableMap);\n     }\n \n-    private static Expression coerceIfNecessary(FunctionMetadata functionMetadata, Expression sqlFunction, SqlFunctionProperties sqlFunctionProperties, Metadata metadata)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU0NDIzOQ=="}, "originalCommit": {"oid": "f6075d233f85ac8414ada476d9730d7d945d52bd"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNDIwMDAzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/CreateFunctionTask.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMjo1NDo0N1rOG_1mHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMzoxMjozN1rOG_19DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU5MTU4Mw==", "bodyText": "Nits: I found it more logical to have this before the return cast rather than after, but I don't have strong opinions.", "url": "https://github.com/prestodb/presto/pull/14931#discussion_r469591583", "createdAt": "2020-08-12T22:54:47Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/CreateFunctionTask.java", "diffHunk": "@@ -101,12 +103,32 @@ private SqlInvokedFunction createSqlInvokedFunction(CreateFunction statement, Me\n \n         if (statement.getBody() instanceof Return) {\n             Expression bodyExpression = ((Return) statement.getBody()).getExpression();\n-            Type bodyType = analysis.getType(bodyExpression);\n-\n-            if (!bodyType.equals(metadata.getType(returnType))) {\n-                // Casting is safe-here, since we have verified that the actual type of the body is coercible to declared return type.\n-                body = new Return(new Cast(bodyExpression, statement.getReturnType()));\n+            if (!analysis.getType(bodyExpression).equals(metadata.getType(returnType))) {\n+                // Casting is safe here, since we have verified at analysis time that the actual type of the body is coercible to declared return type.\n+                bodyExpression = new Cast(bodyExpression, statement.getReturnType());\n             }\n+\n+            // Coerce expressions in body if necessary\n+            bodyExpression = ExpressionTreeRewriter.rewriteWith(new ExpressionRewriter<Void>()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1efe37c7371d91a3c37d00adb8162f637fe5bb69"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU5NzQ1Mw==", "bodyText": "Ok, done.", "url": "https://github.com/prestodb/presto/pull/14931#discussion_r469597453", "createdAt": "2020-08-12T23:12:37Z", "author": {"login": "prithvip"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/CreateFunctionTask.java", "diffHunk": "@@ -101,12 +103,32 @@ private SqlInvokedFunction createSqlInvokedFunction(CreateFunction statement, Me\n \n         if (statement.getBody() instanceof Return) {\n             Expression bodyExpression = ((Return) statement.getBody()).getExpression();\n-            Type bodyType = analysis.getType(bodyExpression);\n-\n-            if (!bodyType.equals(metadata.getType(returnType))) {\n-                // Casting is safe-here, since we have verified that the actual type of the body is coercible to declared return type.\n-                body = new Return(new Cast(bodyExpression, statement.getReturnType()));\n+            if (!analysis.getType(bodyExpression).equals(metadata.getType(returnType))) {\n+                // Casting is safe here, since we have verified at analysis time that the actual type of the body is coercible to declared return type.\n+                bodyExpression = new Cast(bodyExpression, statement.getReturnType());\n             }\n+\n+            // Coerce expressions in body if necessary\n+            bodyExpression = ExpressionTreeRewriter.rewriteWith(new ExpressionRewriter<Void>()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU5MTU4Mw=="}, "originalCommit": {"oid": "1efe37c7371d91a3c37d00adb8162f637fe5bb69"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2214, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}