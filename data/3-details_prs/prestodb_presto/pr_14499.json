{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1MDQwODUx", "number": 14499, "title": "Add Alluxio based data caching", "bodyText": "This change enables Alluxio client-side local data cache on the worker.\nThis change also does a bit of refactoring of caching related pieces.\nTo enable Alluxio local cache, use following configuration\ncache.enabled=true\ncache.type=ALLUXIO\nCo-authored-by: Bin Fan fanbin103@gmail.com\nCo-authored-by: Bin Feng binfeng@alluxio.com\ndepended by facebookexternal/presto-facebook#984\n== RELEASE NOTES ==\n\nHive Changes\n* Add local data caching support with `Alluxio <https://www.alluxio.io/>`_ cache library. To enable it, set config `cache.enabled=true` and `cache.type=ALLUXIO`", "createdAt": "2020-05-08T04:37:48Z", "url": "https://github.com/prestodb/presto/pull/14499", "merged": true, "mergeCommit": {"oid": "472538a02722c5409649533f9a602b5b76d9dd2d"}, "closed": true, "closedAt": "2020-05-09T05:08:56Z", "author": {"login": "jainxrohit"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcfKUsHgBqjMzMTU1NDU1Nzk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcfb12BgBqjMzMTg4MzkwNjU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "03774723385f0cd304d5e79ab785a0910aa70fc3", "author": {"user": {"login": "jainxrohit", "name": "Rohit Jain"}}, "url": "https://github.com/prestodb/presto/commit/03774723385f0cd304d5e79ab785a0910aa70fc3", "committedDate": "2020-05-08T04:31:05Z", "message": "Add Alluxio based data caching\n\nThis change enables Alluxio client-side local data cache on the worker.\nThis change also does a bit of refactoring of caching related pieces.\nTo enable Alluxio local cache, use following configuration\ncache.enabled=true\ncache.type=ALLUXIO\nCollaborated with @haoyuan and @bf8086"}, "afterCommit": {"oid": "a7656c96ab27a238c50f8d73a6b973aee2e1c2d9", "author": {"user": {"login": "jainxrohit", "name": "Rohit Jain"}}, "url": "https://github.com/prestodb/presto/commit/a7656c96ab27a238c50f8d73a6b973aee2e1c2d9", "committedDate": "2020-05-08T04:39:17Z", "message": "Add Alluxio based data caching\n\nThis change enables Alluxio client-side local data cache on the worker.\nThis change also does a bit of refactoring of caching related pieces.\nTo enable Alluxio local cache, use following configuration\ncache.enabled=true\ncache.type=ALLUXIO\nCollaborated with @haoyuan and @bf8086"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4MDA3MDM2", "url": "https://github.com/prestodb/presto/pull/14499#pullrequestreview-408007036", "createdAt": "2020-05-08T05:37:17Z", "commit": {"oid": "a7656c96ab27a238c50f8d73a6b973aee2e1c2d9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNTozNzoxN1rOGSZsmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNTozNzoxN1rOGSZsmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk0ODU2OA==", "bodyText": ".setPath(status.getPath().toUri().getPath())\nFileInfo.path should be relative path without scheme", "url": "https://github.com/prestodb/presto/pull/14499#discussion_r421948568", "createdAt": "2020-05-08T05:37:17Z", "author": {"login": "apc999"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/alluxio/AlluxioCachingClientFileSystem.java", "diffHunk": "@@ -0,0 +1,254 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.cache.alluxio;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.client.file.FileInStream;\n+import alluxio.client.file.FileOutStream;\n+import alluxio.client.file.URIStatus;\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.grpc.CreateDirectoryPOptions;\n+import alluxio.grpc.CreateFilePOptions;\n+import alluxio.grpc.DeletePOptions;\n+import alluxio.grpc.ExistsPOptions;\n+import alluxio.grpc.FreePOptions;\n+import alluxio.grpc.GetStatusPOptions;\n+import alluxio.grpc.ListStatusPOptions;\n+import alluxio.grpc.MountPOptions;\n+import alluxio.grpc.OpenFilePOptions;\n+import alluxio.grpc.RenamePOptions;\n+import alluxio.grpc.ScheduleAsyncPersistencePOptions;\n+import alluxio.grpc.SetAclAction;\n+import alluxio.grpc.SetAclPOptions;\n+import alluxio.grpc.SetAttributePOptions;\n+import alluxio.grpc.UnmountPOptions;\n+import alluxio.security.authorization.AclEntry;\n+import alluxio.security.authorization.Mode;\n+import alluxio.wire.BlockLocationInfo;\n+import alluxio.wire.FileInfo;\n+import alluxio.wire.MountPointInfo;\n+import alluxio.wire.SyncPointInfo;\n+import com.facebook.presto.hive.HiveFileContext;\n+import com.facebook.presto.hive.filesystem.ExtendedFileSystem;\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.permission.FsPermission;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.hash.Hashing.md5;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+\n+public class AlluxioCachingClientFileSystem\n+        implements alluxio.client.file.FileSystem\n+{\n+    private final AlluxioConfiguration alluxioConfiguration;\n+    private final ExtendedFileSystem fileSystem;\n+\n+    public AlluxioCachingClientFileSystem(\n+            ExtendedFileSystem fileSystem,\n+            AlluxioConfiguration alluxioConfiguration)\n+    {\n+        this.fileSystem = requireNonNull(fileSystem, \"fileSystem is null\");\n+        this.alluxioConfiguration = requireNonNull(alluxioConfiguration, \"alluxioConfiguration is null\");\n+    }\n+\n+    @Override\n+    public void createDirectory(AlluxioURI alluxioURI, CreateDirectoryPOptions options)\n+            throws IOException\n+    {\n+        FsPermission permission = new FsPermission(Mode.fromProto(options.getMode()).toShort());\n+        fileSystem.mkdirs(toPath(alluxioURI), permission);\n+    }\n+\n+    @Override\n+    public FileInStream openFile(AlluxioURI alluxioURI, OpenFilePOptions options)\n+            throws IOException\n+    {\n+        return new AlluxioCachingInputStream(fileSystem.open(toPath(alluxioURI)));\n+    }\n+\n+    @Override\n+    public FileInStream openFile(URIStatus uriStatus, OpenFilePOptions options)\n+            throws IOException\n+    {\n+        checkState(uriStatus instanceof AlluxioURIStatus);\n+        HiveFileContext hiveFileContext = ((AlluxioURIStatus) uriStatus).getHiveFileContext();\n+        try {\n+            return new AlluxioCachingInputStream(fileSystem.openFile(new Path(uriStatus.getPath()), hiveFileContext));\n+        }\n+        catch (Exception e) {\n+            throw new IOException(\"Failed to open file\", e);\n+        }\n+    }\n+\n+    @Override\n+    public FileOutStream createFile(AlluxioURI alluxioURI, CreateFilePOptions options)\n+    {\n+        throw new UnsupportedOperationException(\"CreateFile operation is not supported\");\n+    }\n+\n+    @Override\n+    public void delete(AlluxioURI alluxioURI, DeletePOptions options)\n+    {\n+        throw new UnsupportedOperationException(\"Delete operation is not supported\");\n+    }\n+\n+    @Override\n+    public boolean exists(AlluxioURI alluxioURI, ExistsPOptions options)\n+    {\n+        throw new UnsupportedOperationException(\"Exists operation is not supported\");\n+    }\n+\n+    @Override\n+    public AlluxioConfiguration getConf()\n+    {\n+        return alluxioConfiguration;\n+    }\n+\n+    @Override\n+    public URIStatus getStatus(AlluxioURI alluxioURI, GetStatusPOptions options)\n+            throws IOException\n+    {\n+        return toUriStatus(fileSystem.getFileStatus(toPath(alluxioURI)));\n+    }\n+\n+    @Override\n+    public List<URIStatus> listStatus(AlluxioURI alluxioURI, ListStatusPOptions options)\n+            throws IOException\n+    {\n+        return Arrays.stream(fileSystem.listStatus(toPath(alluxioURI))).map(this::toUriStatus).collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    public boolean isClosed()\n+    {\n+        throw new UnsupportedOperationException(\"isClosed is not supported\");\n+    }\n+\n+    @Override\n+    public void free(AlluxioURI alluxioURI, FreePOptions options)\n+    {\n+        throw new UnsupportedOperationException(\"Free is not supported.\");\n+    }\n+\n+    @Override\n+    public List<BlockLocationInfo> getBlockLocations(AlluxioURI alluxioURI)\n+    {\n+        throw new UnsupportedOperationException(\"GetBlockLocations is not supported.\");\n+    }\n+\n+    @Override\n+    public void mount(AlluxioURI alluxioURI1, AlluxioURI alluxioURI2, MountPOptions options)\n+    {\n+        throw new UnsupportedOperationException(\"Mount is not supported.\");\n+    }\n+\n+    @Override\n+    public void updateMount(AlluxioURI alluxioURI, MountPOptions options)\n+    {\n+        throw new UnsupportedOperationException(\"UpdateMount is not supported.\");\n+    }\n+\n+    @Override\n+    public Map<String, MountPointInfo> getMountTable()\n+    {\n+        throw new UnsupportedOperationException(\"GetMountTable is not supported.\");\n+    }\n+\n+    @Override\n+    public List<SyncPointInfo> getSyncPathList()\n+    {\n+        throw new UnsupportedOperationException(\"GetSyncPathList is not supported.\");\n+    }\n+\n+    @Override\n+    public void persist(AlluxioURI alluxioURI, ScheduleAsyncPersistencePOptions options)\n+    {\n+        throw new UnsupportedOperationException(\"Persist is not supported.\");\n+    }\n+\n+    @Override\n+    public void rename(AlluxioURI source, AlluxioURI destination, RenamePOptions options)\n+    {\n+        throw new UnsupportedOperationException(\"ReverseResolve is not supported.\");\n+    }\n+\n+    @Override\n+    public AlluxioURI reverseResolve(AlluxioURI alluxioURI)\n+    {\n+        throw new UnsupportedOperationException(\"ReverseResolve is not supported.\");\n+    }\n+\n+    @Override\n+    public void setAcl(AlluxioURI alluxioURI, SetAclAction action, List<AclEntry> entries, SetAclPOptions options)\n+    {\n+        throw new UnsupportedOperationException(\"SetAcl is not supported.\");\n+    }\n+\n+    @Override\n+    public void startSync(AlluxioURI alluxioURI)\n+    {\n+        throw new UnsupportedOperationException(\"StartSync is not supported.\");\n+    }\n+\n+    @Override\n+    public void stopSync(AlluxioURI alluxioURI)\n+    {\n+        throw new UnsupportedOperationException(\"StopSync is not supported.\");\n+    }\n+\n+    @Override\n+    public void setAttribute(AlluxioURI alluxioURI, SetAttributePOptions options)\n+    {\n+        throw new UnsupportedOperationException(\"SetAttribute is not supported.\");\n+    }\n+\n+    @Override\n+    public void unmount(AlluxioURI alluxioURI, UnmountPOptions options)\n+    {\n+        throw new UnsupportedOperationException(\"unmount is not supported.\");\n+    }\n+\n+    @Override\n+    public void close()\n+            throws IOException\n+    {\n+        fileSystem.close();\n+    }\n+\n+    private Path toPath(AlluxioURI alluxioURI)\n+    {\n+        return new Path(alluxioURI.toString());\n+    }\n+\n+    private URIStatus toUriStatus(FileStatus status)\n+    {\n+        //FilePath is a unique identifier for a file, however it can be a long string\n+        //hence using md5 hash of the file path as the identifier in the cache.\n+        FileInfo info = new FileInfo();\n+        info.setFileIdentifier(md5().hashString(status.getPath().toString(), UTF_8).toString());\n+        info.setLength(status.getLen()).setPath(status.getPath().toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7656c96ab27a238c50f8d73a6b973aee2e1c2d9"}, "originalPosition": 248}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a7656c96ab27a238c50f8d73a6b973aee2e1c2d9", "author": {"user": {"login": "jainxrohit", "name": "Rohit Jain"}}, "url": "https://github.com/prestodb/presto/commit/a7656c96ab27a238c50f8d73a6b973aee2e1c2d9", "committedDate": "2020-05-08T04:39:17Z", "message": "Add Alluxio based data caching\n\nThis change enables Alluxio client-side local data cache on the worker.\nThis change also does a bit of refactoring of caching related pieces.\nTo enable Alluxio local cache, use following configuration\ncache.enabled=true\ncache.type=ALLUXIO\nCollaborated with @haoyuan and @bf8086"}, "afterCommit": {"oid": "520cc3853047a22759075e503732780daa66289a", "author": {"user": {"login": "jainxrohit", "name": "Rohit Jain"}}, "url": "https://github.com/prestodb/presto/commit/520cc3853047a22759075e503732780daa66289a", "committedDate": "2020-05-08T15:39:42Z", "message": "Add Alluxio based data caching\n\nThis change enables Alluxio client-side local data cache on the worker.\nThis change also does a bit of refactoring of caching related pieces.\nTo enable Alluxio local cache, use following configuration\ncache.enabled=true\ncache.type=ALLUXIO\nCollaborated with  apc999 and @bf8086"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4Mzk4MTQ0", "url": "https://github.com/prestodb/presto/pull/14499#pullrequestreview-408398144", "createdAt": "2020-05-08T17:29:33Z", "commit": {"oid": "520cc3853047a22759075e503732780daa66289a"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNzoyOTozM1rOGStZmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNzozNDo1OFrOGStj2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI3MTM4Ng==", "bodyText": "nit: how about using switch statement? We should handle different cacheType explicitly otherwise it would be error-prone when adding new cacheType.\nswitch (cacheType) {\n  case ALLUXIO:\n    ...\n  case FILE_MERGE:\n    ...\n  default:\n    throw\n}", "url": "https://github.com/prestodb/presto/pull/14499#discussion_r422271386", "createdAt": "2020-05-08T17:29:33Z", "author": {"login": "shixuan-fan"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/CacheFactory.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.cache;\n+\n+import com.facebook.presto.cache.alluxio.AlluxioCachingFileSystem;\n+import com.facebook.presto.cache.filemerge.FileMergeCachingFileSystem;\n+import com.facebook.presto.hive.filesystem.ExtendedFileSystem;\n+import org.apache.hadoop.conf.Configuration;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+\n+import static alluxio.shaded.client.com.google.common.base.Preconditions.checkState;\n+import static com.facebook.presto.cache.CacheType.ALLUXIO;\n+\n+public class CacheFactory\n+{\n+    public ExtendedFileSystem createCachingFileSystem(\n+            Configuration factoryConfig,\n+            URI factoryUri,\n+            ExtendedFileSystem fileSystem,\n+            CacheManager cacheManager,\n+            boolean cachingEnabled,\n+            CacheType cacheType,\n+            boolean validationEnabled)\n+            throws IOException\n+    {\n+        if (!cachingEnabled) {\n+            return fileSystem;\n+        }\n+\n+        checkState(cacheType != null);\n+\n+        if (cacheType == ALLUXIO) {\n+            ExtendedFileSystem cachingFileSystem = new AlluxioCachingFileSystem(fileSystem, factoryUri);\n+            cachingFileSystem.initialize(factoryUri, factoryConfig);\n+            return cachingFileSystem;\n+        }\n+        return new FileMergeCachingFileSystem(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "520cc3853047a22759075e503732780daa66289a"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI3NDAwOA==", "bodyText": "nit: maybe put them into one line? If the line is too long, we could put one argument per line.", "url": "https://github.com/prestodb/presto/pull/14499#discussion_r422274008", "createdAt": "2020-05-08T17:34:58Z", "author": {"login": "shixuan-fan"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/alluxio/AlluxioCachingHdfsFileInputStream.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.cache.alluxio;\n+\n+import alluxio.client.file.FileInStream;\n+import alluxio.exception.ExceptionMessage;\n+import org.apache.hadoop.fs.PositionedReadable;\n+import org.apache.hadoop.fs.Seekable;\n+\n+import java.io.EOFException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+public class AlluxioCachingHdfsFileInputStream\n+        extends InputStream\n+        implements Seekable, PositionedReadable\n+{\n+    private final FileInStream inputStream;\n+\n+    public AlluxioCachingHdfsFileInputStream(FileInStream inputStream)\n+    {\n+        this.inputStream = inputStream;\n+    }\n+\n+    @Override\n+    public int read()\n+            throws IOException\n+    {\n+        return inputStream.read();\n+    }\n+\n+    @Override\n+    public int read(long position, byte[] buffer, int offset, int length)\n+            throws IOException\n+    {\n+        return inputStream.positionedRead(position, buffer, offset, length);\n+    }\n+\n+    @Override\n+    public void readFully(long position, byte[] buffer, int offset, int length)\n+            throws IOException\n+    {\n+        int totalBytesRead = 0;\n+        while (totalBytesRead < length) {\n+            int bytesRead =\n+                    read(position + totalBytesRead, buffer, offset + totalBytesRead, length - totalBytesRead);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "520cc3853047a22759075e503732780daa66289a"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NDQwMDM0", "url": "https://github.com/prestodb/presto/pull/14499#pullrequestreview-408440034", "createdAt": "2020-05-08T18:36:15Z", "commit": {"oid": "520cc3853047a22759075e503732780daa66289a"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxODozNjoxNVrOGSvbQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxODo0NDoxMFrOGSvqSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMwNDU3Ng==", "bodyText": "+1", "url": "https://github.com/prestodb/presto/pull/14499#discussion_r422304576", "createdAt": "2020-05-08T18:36:15Z", "author": {"login": "highker"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/CacheFactory.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.cache;\n+\n+import com.facebook.presto.cache.alluxio.AlluxioCachingFileSystem;\n+import com.facebook.presto.cache.filemerge.FileMergeCachingFileSystem;\n+import com.facebook.presto.hive.filesystem.ExtendedFileSystem;\n+import org.apache.hadoop.conf.Configuration;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+\n+import static alluxio.shaded.client.com.google.common.base.Preconditions.checkState;\n+import static com.facebook.presto.cache.CacheType.ALLUXIO;\n+\n+public class CacheFactory\n+{\n+    public ExtendedFileSystem createCachingFileSystem(\n+            Configuration factoryConfig,\n+            URI factoryUri,\n+            ExtendedFileSystem fileSystem,\n+            CacheManager cacheManager,\n+            boolean cachingEnabled,\n+            CacheType cacheType,\n+            boolean validationEnabled)\n+            throws IOException\n+    {\n+        if (!cachingEnabled) {\n+            return fileSystem;\n+        }\n+\n+        checkState(cacheType != null);\n+\n+        if (cacheType == ALLUXIO) {\n+            ExtendedFileSystem cachingFileSystem = new AlluxioCachingFileSystem(fileSystem, factoryUri);\n+            cachingFileSystem.initialize(factoryUri, factoryConfig);\n+            return cachingFileSystem;\n+        }\n+        return new FileMergeCachingFileSystem(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI3MTM4Ng=="}, "originalCommit": {"oid": "520cc3853047a22759075e503732780daa66289a"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMwNjE2MQ==", "bodyText": "Yep, this is one of the most important lines in this PR. Let's make a comment on this. Something like\npiggyback hiveFileContext payload through uriStatus\nhiveFileContext is critical to openFile interface that cannot be ignored", "url": "https://github.com/prestodb/presto/pull/14499#discussion_r422306161", "createdAt": "2020-05-08T18:39:35Z", "author": {"login": "highker"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/alluxio/AlluxioCachingClientFileSystem.java", "diffHunk": "@@ -0,0 +1,254 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.cache.alluxio;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.client.file.FileInStream;\n+import alluxio.client.file.FileOutStream;\n+import alluxio.client.file.URIStatus;\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.grpc.CreateDirectoryPOptions;\n+import alluxio.grpc.CreateFilePOptions;\n+import alluxio.grpc.DeletePOptions;\n+import alluxio.grpc.ExistsPOptions;\n+import alluxio.grpc.FreePOptions;\n+import alluxio.grpc.GetStatusPOptions;\n+import alluxio.grpc.ListStatusPOptions;\n+import alluxio.grpc.MountPOptions;\n+import alluxio.grpc.OpenFilePOptions;\n+import alluxio.grpc.RenamePOptions;\n+import alluxio.grpc.ScheduleAsyncPersistencePOptions;\n+import alluxio.grpc.SetAclAction;\n+import alluxio.grpc.SetAclPOptions;\n+import alluxio.grpc.SetAttributePOptions;\n+import alluxio.grpc.UnmountPOptions;\n+import alluxio.security.authorization.AclEntry;\n+import alluxio.security.authorization.Mode;\n+import alluxio.wire.BlockLocationInfo;\n+import alluxio.wire.FileInfo;\n+import alluxio.wire.MountPointInfo;\n+import alluxio.wire.SyncPointInfo;\n+import com.facebook.presto.hive.HiveFileContext;\n+import com.facebook.presto.hive.filesystem.ExtendedFileSystem;\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.permission.FsPermission;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.hash.Hashing.md5;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+\n+public class AlluxioCachingClientFileSystem\n+        implements alluxio.client.file.FileSystem\n+{\n+    private final AlluxioConfiguration alluxioConfiguration;\n+    private final ExtendedFileSystem fileSystem;\n+\n+    public AlluxioCachingClientFileSystem(\n+            ExtendedFileSystem fileSystem,\n+            AlluxioConfiguration alluxioConfiguration)\n+    {\n+        this.fileSystem = requireNonNull(fileSystem, \"fileSystem is null\");\n+        this.alluxioConfiguration = requireNonNull(alluxioConfiguration, \"alluxioConfiguration is null\");\n+    }\n+\n+    @Override\n+    public void createDirectory(AlluxioURI alluxioURI, CreateDirectoryPOptions options)\n+            throws IOException\n+    {\n+        FsPermission permission = new FsPermission(Mode.fromProto(options.getMode()).toShort());\n+        fileSystem.mkdirs(toPath(alluxioURI), permission);\n+    }\n+\n+    @Override\n+    public FileInStream openFile(AlluxioURI alluxioURI, OpenFilePOptions options)\n+            throws IOException\n+    {\n+        return new AlluxioCachingInputStream(fileSystem.open(toPath(alluxioURI)));\n+    }\n+\n+    @Override\n+    public FileInStream openFile(URIStatus uriStatus, OpenFilePOptions options)\n+            throws IOException\n+    {\n+        checkState(uriStatus instanceof AlluxioURIStatus);\n+        HiveFileContext hiveFileContext = ((AlluxioURIStatus) uriStatus).getHiveFileContext();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "520cc3853047a22759075e503732780daa66289a"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMwNzYyOA==", "bodyText": "+1", "url": "https://github.com/prestodb/presto/pull/14499#discussion_r422307628", "createdAt": "2020-05-08T18:42:39Z", "author": {"login": "highker"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/alluxio/AlluxioCachingHdfsFileInputStream.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.cache.alluxio;\n+\n+import alluxio.client.file.FileInStream;\n+import alluxio.exception.ExceptionMessage;\n+import org.apache.hadoop.fs.PositionedReadable;\n+import org.apache.hadoop.fs.Seekable;\n+\n+import java.io.EOFException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+public class AlluxioCachingHdfsFileInputStream\n+        extends InputStream\n+        implements Seekable, PositionedReadable\n+{\n+    private final FileInStream inputStream;\n+\n+    public AlluxioCachingHdfsFileInputStream(FileInStream inputStream)\n+    {\n+        this.inputStream = inputStream;\n+    }\n+\n+    @Override\n+    public int read()\n+            throws IOException\n+    {\n+        return inputStream.read();\n+    }\n+\n+    @Override\n+    public int read(long position, byte[] buffer, int offset, int length)\n+            throws IOException\n+    {\n+        return inputStream.positionedRead(position, buffer, offset, length);\n+    }\n+\n+    @Override\n+    public void readFully(long position, byte[] buffer, int offset, int length)\n+            throws IOException\n+    {\n+        int totalBytesRead = 0;\n+        while (totalBytesRead < length) {\n+            int bytesRead =\n+                    read(position + totalBytesRead, buffer, offset + totalBytesRead, length - totalBytesRead);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI3NDAwOA=="}, "originalCommit": {"oid": "520cc3853047a22759075e503732780daa66289a"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMwODQyNQ==", "bodyText": "requireNonNull", "url": "https://github.com/prestodb/presto/pull/14499#discussion_r422308425", "createdAt": "2020-05-08T18:44:10Z", "author": {"login": "highker"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/alluxio/AlluxioURIStatus.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.cache.alluxio;\n+\n+import alluxio.client.file.URIStatus;\n+import alluxio.wire.FileInfo;\n+import com.facebook.presto.hive.HiveFileContext;\n+\n+public class AlluxioURIStatus\n+        extends URIStatus\n+{\n+    private final HiveFileContext hiveFileContext;\n+\n+    public AlluxioURIStatus(FileInfo fileInfo, HiveFileContext hiveFileContext)\n+    {\n+        super(fileInfo);\n+        this.hiveFileContext = hiveFileContext;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "520cc3853047a22759075e503732780daa66289a"}, "originalPosition": 28}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "520cc3853047a22759075e503732780daa66289a", "author": {"user": {"login": "jainxrohit", "name": "Rohit Jain"}}, "url": "https://github.com/prestodb/presto/commit/520cc3853047a22759075e503732780daa66289a", "committedDate": "2020-05-08T15:39:42Z", "message": "Add Alluxio based data caching\n\nThis change enables Alluxio client-side local data cache on the worker.\nThis change also does a bit of refactoring of caching related pieces.\nTo enable Alluxio local cache, use following configuration\ncache.enabled=true\ncache.type=ALLUXIO\nCollaborated with  apc999 and @bf8086"}, "afterCommit": {"oid": "899e8fa2e72c0973974e6d23eccaef7ed70b7fe1", "author": {"user": {"login": "jainxrohit", "name": "Rohit Jain"}}, "url": "https://github.com/prestodb/presto/commit/899e8fa2e72c0973974e6d23eccaef7ed70b7fe1", "committedDate": "2020-05-08T20:18:54Z", "message": "Add Alluxio based data caching\n\nThis change enables Alluxio client-side local data cache on the worker.\nThis change also does a bit of refactoring of caching related pieces.\nTo enable Alluxio local cache, use following configuration\ncache.enabled=true\ncache.type=ALLUXIO\nCollaborated with  apc999 and @bf8086"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NTQ1NDkx", "url": "https://github.com/prestodb/presto/pull/14499#pullrequestreview-408545491", "createdAt": "2020-05-08T21:44:18Z", "commit": {"oid": "899e8fa2e72c0973974e6d23eccaef7ed70b7fe1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "899e8fa2e72c0973974e6d23eccaef7ed70b7fe1", "author": {"user": {"login": "jainxrohit", "name": "Rohit Jain"}}, "url": "https://github.com/prestodb/presto/commit/899e8fa2e72c0973974e6d23eccaef7ed70b7fe1", "committedDate": "2020-05-08T20:18:54Z", "message": "Add Alluxio based data caching\n\nThis change enables Alluxio client-side local data cache on the worker.\nThis change also does a bit of refactoring of caching related pieces.\nTo enable Alluxio local cache, use following configuration\ncache.enabled=true\ncache.type=ALLUXIO\nCollaborated with  apc999 and @bf8086"}, "afterCommit": {"oid": "def6a607602f000c32d71fee0bd424aa963dd611", "author": {"user": {"login": "jainxrohit", "name": "Rohit Jain"}}, "url": "https://github.com/prestodb/presto/commit/def6a607602f000c32d71fee0bd424aa963dd611", "committedDate": "2020-05-08T23:32:30Z", "message": "Add Alluxio based data caching\n\nThis change enables Alluxio client-side local data cache on the worker.\nThis change also does a bit of refactoring of caching related pieces.\nTo enable Alluxio local cache, use following configuration\ncache.enabled=true\ncache.type=ALLUXIO\nCo-authored-by: Bin Fan <fanbin103@gmail.com>\nCo-authored-by: Bin Feng <binfeng@alluxio.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NTkyMjkx", "url": "https://github.com/prestodb/presto/pull/14499#pullrequestreview-408592291", "createdAt": "2020-05-09T00:38:15Z", "commit": {"oid": "def6a607602f000c32d71fee0bd424aa963dd611"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMDozODoxNlrOGS3LWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMDo0MzowNVrOGS3OmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQzMTU3OA==", "bodyText": "put a space after //", "url": "https://github.com/prestodb/presto/pull/14499#discussion_r422431578", "createdAt": "2020-05-09T00:38:16Z", "author": {"login": "highker"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/alluxio/AlluxioCachingFileSystem.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.cache.alluxio;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.client.file.FileInStream;\n+import alluxio.client.file.URIStatus;\n+import alluxio.client.file.cache.LocalCacheFileSystem;\n+import alluxio.conf.AlluxioProperties;\n+import alluxio.conf.InstancedConfiguration;\n+import alluxio.conf.PropertyKey;\n+import alluxio.conf.Source;\n+import alluxio.grpc.OpenFilePOptions;\n+import alluxio.hadoop.AbstractFileSystem;\n+import alluxio.hadoop.HadoopConfigurationUtils;\n+import alluxio.metrics.MetricsConfig;\n+import alluxio.metrics.MetricsSystem;\n+import alluxio.util.ConfigurationUtils;\n+import com.facebook.presto.cache.CachingFileSystem;\n+import com.facebook.presto.hive.HiveFileContext;\n+import com.facebook.presto.hive.filesystem.ExtendedFileSystem;\n+import com.google.common.collect.ImmutableMap;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FSDataInputStream;\n+import org.apache.hadoop.fs.Path;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class AlluxioCachingFileSystem\n+        extends CachingFileSystem\n+{\n+    private AlluxioCachingFileSystemInternal cachingFileSystem;\n+\n+    public AlluxioCachingFileSystem(ExtendedFileSystem dataTier, URI uri)\n+    {\n+        super(dataTier, uri);\n+    }\n+\n+    @Override\n+    public synchronized void initialize(URI uri, Configuration configuration)\n+            throws IOException\n+    {\n+        this.cachingFileSystem = new AlluxioCachingFileSystemInternal(uri, dataTier);\n+        cachingFileSystem.initialize(uri, configuration);\n+    }\n+\n+    @Override\n+    public FSDataInputStream openFile(Path path, HiveFileContext hiveFileContext)\n+            throws Exception\n+    {\n+        if (hiveFileContext.isCacheable()) {\n+            return cachingFileSystem.openFile(path, hiveFileContext);\n+        }\n+        return dataTier.openFile(path, hiveFileContext);\n+    }\n+\n+    private static class AlluxioCachingFileSystemInternal\n+            extends AbstractFileSystem\n+    {\n+        // The filesystem to query on cache miss\n+        private final URI uri;\n+        private final ExtendedFileSystem fileSystem;\n+\n+        AlluxioCachingFileSystemInternal(URI uri, ExtendedFileSystem fileSystem)\n+        {\n+            this.uri = requireNonNull(uri, \"uri is null\");\n+            this.fileSystem = requireNonNull(fileSystem, \"filesystem is null\");\n+        }\n+\n+        @Override\n+        public synchronized void initialize(URI uri, Configuration configuration)\n+                throws IOException\n+        {\n+            // Set statistics\n+            setConf(configuration);\n+            statistics = getStatistics(uri.getScheme(), getClass());\n+\n+            // Take the URI properties, hadoop configuration, and given Alluxio configuration and merge\n+            // all three into a single object.\n+            Map<String, Object> configurationFromUri = getConfigurationFromUri(uri);\n+            AlluxioProperties alluxioProperties = ConfigurationUtils.defaults();\n+            InstancedConfiguration newConfiguration = HadoopConfigurationUtils.mergeHadoopConfiguration(configuration, alluxioProperties);\n+            // Connection details in the URI has the highest priority\n+            newConfiguration.merge(configurationFromUri, Source.RUNTIME);\n+            mAlluxioConf = newConfiguration;\n+\n+            // Handle metrics\n+            Properties metricsProperties = new Properties();\n+            for (Map.Entry<String, String> entry : configuration) {\n+                metricsProperties.setProperty(entry.getKey(), entry.getValue());\n+            }\n+            MetricsSystem.startSinksFromConfig(new MetricsConfig(metricsProperties));\n+            mFileSystem = new LocalCacheFileSystem(new AlluxioCachingClientFileSystem(fileSystem, mAlluxioConf), mAlluxioConf);\n+            super.initialize(uri, configuration);\n+        }\n+\n+        public FSDataInputStream openFile(Path path, HiveFileContext hiveFileContext)\n+                throws Exception\n+        {\n+            //URIStatus is the mechanism to pass the hiveFileContext to the source filesystem", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def6a607602f000c32d71fee0bd424aa963dd611"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQzMjAzNg==", "bodyText": "looks like a redundant comment", "url": "https://github.com/prestodb/presto/pull/14499#discussion_r422432036", "createdAt": "2020-05-09T00:40:52Z", "author": {"login": "highker"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/filemerge/FileMergeCachingFileSystem.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.cache.filemerge;\n+\n+import com.facebook.presto.cache.CacheManager;\n+import com.facebook.presto.cache.CachingFileSystem;\n+import com.facebook.presto.hive.HiveFileContext;\n+import com.facebook.presto.hive.filesystem.ExtendedFileSystem;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FSDataInputStream;\n+import org.apache.hadoop.fs.Path;\n+\n+import java.net.URI;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public final class FileMergeCachingFileSystem\n+        extends CachingFileSystem\n+{\n+    private final CacheManager cacheManager;\n+    private final boolean cacheValidationEnabled;\n+\n+    public FileMergeCachingFileSystem(\n+            URI uri,\n+            Configuration configuration,\n+            CacheManager cacheManager,\n+            ExtendedFileSystem dataTier,\n+            boolean cacheValidationEnabled)\n+    {\n+        super(dataTier, uri);\n+        requireNonNull(configuration, \"configuration is null\");\n+        this.cacheManager = requireNonNull(cacheManager, \"cacheManager is null\");\n+        this.cacheValidationEnabled = cacheValidationEnabled;\n+\n+        setConf(configuration);\n+\n+        //noinspection AssignmentToSuperclassField", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def6a607602f000c32d71fee0bd424aa963dd611"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQzMjQwOA==", "bodyText": "Do we wanna make it abstract to force all impls to think about hiveFileContext.isCacheable?", "url": "https://github.com/prestodb/presto/pull/14499#discussion_r422432408", "createdAt": "2020-05-09T00:43:05Z", "author": {"login": "highker"}, "path": "presto-cache/src/main/java/com/facebook/presto/cache/CachingFileSystem.java", "diffHunk": "@@ -147,17 +137,13 @@ public void setVerifyChecksum(boolean verifyChecksum)\n     public FSDataInputStream open(Path path, int bufferSize)\n             throws IOException\n     {\n-        return new CachingInputStream(dataTier.open(path, bufferSize), cacheManager, path, cacheValidationEnabled);\n+        return dataTier.open(path, bufferSize);\n     }\n \n     @Override\n     public FSDataInputStream openFile(Path path, HiveFileContext hiveFileContext)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def6a607602f000c32d71fee0bd424aa963dd611"}, "originalPosition": 52}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "def6a607602f000c32d71fee0bd424aa963dd611", "author": {"user": {"login": "jainxrohit", "name": "Rohit Jain"}}, "url": "https://github.com/prestodb/presto/commit/def6a607602f000c32d71fee0bd424aa963dd611", "committedDate": "2020-05-08T23:32:30Z", "message": "Add Alluxio based data caching\n\nThis change enables Alluxio client-side local data cache on the worker.\nThis change also does a bit of refactoring of caching related pieces.\nTo enable Alluxio local cache, use following configuration\ncache.enabled=true\ncache.type=ALLUXIO\nCo-authored-by: Bin Fan <fanbin103@gmail.com>\nCo-authored-by: Bin Feng <binfeng@alluxio.com>"}, "afterCommit": {"oid": "f0c2fc34e1ea18ade4e2a287ebb31a5d96c2944d", "author": {"user": {"login": "jainxrohit", "name": "Rohit Jain"}}, "url": "https://github.com/prestodb/presto/commit/f0c2fc34e1ea18ade4e2a287ebb31a5d96c2944d", "committedDate": "2020-05-09T00:46:49Z", "message": "Add Alluxio based data caching\n\nThis change enables Alluxio client-side local data cache on the worker.\nThis change also does a bit of refactoring of caching related pieces.\nTo enable Alluxio local cache, use following configuration\ncache.enabled=true\ncache.type=ALLUXIO\n\nCo-authored-by: Bin Fan <fanbin103@gmail.com>\nCo-authored-by: Bin Feng <binfeng@alluxio.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2373d0ff9d68a96165ee43ff772495d5b0554dc", "author": {"user": {"login": "jainxrohit", "name": "Rohit Jain"}}, "url": "https://github.com/prestodb/presto/commit/f2373d0ff9d68a96165ee43ff772495d5b0554dc", "committedDate": "2020-05-09T01:03:53Z", "message": "Add Alluxio based data caching\n\nThis change enables Alluxio client-side local data cache on the worker.\nThis change also does a bit of refactoring of caching related pieces.\nTo enable Alluxio local cache, use following configuration\ncache.enabled=true\ncache.type=ALLUXIO\n\nCo-authored-by: Bin Fan <fanbin103@gmail.com>\nCo-authored-by: Bin Feng <binfeng@alluxio.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f0c2fc34e1ea18ade4e2a287ebb31a5d96c2944d", "author": {"user": {"login": "jainxrohit", "name": "Rohit Jain"}}, "url": "https://github.com/prestodb/presto/commit/f0c2fc34e1ea18ade4e2a287ebb31a5d96c2944d", "committedDate": "2020-05-09T00:46:49Z", "message": "Add Alluxio based data caching\n\nThis change enables Alluxio client-side local data cache on the worker.\nThis change also does a bit of refactoring of caching related pieces.\nTo enable Alluxio local cache, use following configuration\ncache.enabled=true\ncache.type=ALLUXIO\n\nCo-authored-by: Bin Fan <fanbin103@gmail.com>\nCo-authored-by: Bin Feng <binfeng@alluxio.com>"}, "afterCommit": {"oid": "f2373d0ff9d68a96165ee43ff772495d5b0554dc", "author": {"user": {"login": "jainxrohit", "name": "Rohit Jain"}}, "url": "https://github.com/prestodb/presto/commit/f2373d0ff9d68a96165ee43ff772495d5b0554dc", "committedDate": "2020-05-09T01:03:53Z", "message": "Add Alluxio based data caching\n\nThis change enables Alluxio client-side local data cache on the worker.\nThis change also does a bit of refactoring of caching related pieces.\nTo enable Alluxio local cache, use following configuration\ncache.enabled=true\ncache.type=ALLUXIO\n\nCo-authored-by: Bin Fan <fanbin103@gmail.com>\nCo-authored-by: Bin Feng <binfeng@alluxio.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1597, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}