{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwNzI0OTI2", "number": 15057, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNzozMjo1OVrOEaXjKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMjo1Mzo0MVrOEau5Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MDg0MjY2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/RemoveUnsupportedDynamicFilters.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNzozMjo1OVrOHDwKTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNzozNDozMVrOHDwSBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY5Njg0NQ==", "bodyText": "TRUE_CONSTANT. I assume this is cherry picked from prestosql? Do you have a reference?", "url": "https://github.com/prestodb/presto/pull/15057#discussion_r473696845", "createdAt": "2020-08-20T07:32:59Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/RemoveUnsupportedDynamicFilters.java", "diffHunk": "@@ -123,6 +125,9 @@ public PlanWithConsumedDynamicFilters visitJoin(JoinNode node, Set<String> allow\n         {\n             JoinDynamicFilterResult joinDynamicFilterResult = extractDynamicFilterFromJoin(node, allowedDynamicFilterIds);\n             if (!joinDynamicFilterResult.getProbe().equals(node.getLeft()) || !joinDynamicFilterResult.getBuild().equals(node.getRight()) || !joinDynamicFilterResult.getDynamicFilters().equals(node.getDynamicFilters())) {\n+                Optional<RowExpression> filter = node\n+                        .getFilter().map(this::removeAllDynamicFilters)  // dynamic filtering is not supported for LookupJoinOperators\n+                        .filter(expression -> !expression.equals(TRUE_LITERAL));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "134e29593a9acc781cfe7eb94c8f61a384cb1b40"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY5ODgyMg==", "bodyText": "trinodb/trino#2659", "url": "https://github.com/prestodb/presto/pull/15057#discussion_r473698822", "createdAt": "2020-08-20T07:34:31Z", "author": {"login": "kewang1024"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/RemoveUnsupportedDynamicFilters.java", "diffHunk": "@@ -123,6 +125,9 @@ public PlanWithConsumedDynamicFilters visitJoin(JoinNode node, Set<String> allow\n         {\n             JoinDynamicFilterResult joinDynamicFilterResult = extractDynamicFilterFromJoin(node, allowedDynamicFilterIds);\n             if (!joinDynamicFilterResult.getProbe().equals(node.getLeft()) || !joinDynamicFilterResult.getBuild().equals(node.getRight()) || !joinDynamicFilterResult.getDynamicFilters().equals(node.getDynamicFilters())) {\n+                Optional<RowExpression> filter = node\n+                        .getFilter().map(this::removeAllDynamicFilters)  // dynamic filtering is not supported for LookupJoinOperators\n+                        .filter(expression -> !expression.equals(TRUE_LITERAL));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY5Njg0NQ=="}, "originalCommit": {"oid": "134e29593a9acc781cfe7eb94c8f61a384cb1b40"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NDY2NzI3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/sanity/DynamicFiltersChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMjo1MzozNlrOHEV5Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMjo1MzozNlrOHEV5Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMxNTAzNA==", "bodyText": "same line or one param per line", "url": "https://github.com/prestodb/presto/pull/15057#discussion_r474315034", "createdAt": "2020-08-20T22:53:36Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/sanity/DynamicFiltersChecker.java", "diffHunk": "@@ -86,14 +94,14 @@ public void validate(PlanNode plan, Session session, Metadata metadata, SqlParse\n             {\n                 Set<String> currentJoinDynamicFilters = node.getDynamicFilters().keySet();\n                 Set<String> consumedProbeSide = node.getProbe().accept(this, context);\n-                verify(\n-                        difference(currentJoinDynamicFilters, consumedProbeSide).isEmpty(),\n-                        \"Dynamic filters present in join were not fully consumed by its probe side.\");\n+                Set<String> unconsumedByProbeSide = difference(currentJoinDynamicFilters, consumedProbeSide);\n+                verify(unconsumedByProbeSide.isEmpty(),\n+                        \"Dynamic filters %s present in join were not fully consumed by its probe side.\", unconsumedByProbeSide);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b1636e64f558be39421559620d24f1b6bd6bb2d"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NDY2NzQzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/sanity/DynamicFiltersChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMjo1Mzo0MVrOHEV5Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMjo1Mzo0MVrOHEV5Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMxNTA1OQ==", "bodyText": "same line or one param per line", "url": "https://github.com/prestodb/presto/pull/15057#discussion_r474315059", "createdAt": "2020-08-20T22:53:41Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/sanity/DynamicFiltersChecker.java", "diffHunk": "@@ -86,14 +94,14 @@ public void validate(PlanNode plan, Session session, Metadata metadata, SqlParse\n             {\n                 Set<String> currentJoinDynamicFilters = node.getDynamicFilters().keySet();\n                 Set<String> consumedProbeSide = node.getProbe().accept(this, context);\n-                verify(\n-                        difference(currentJoinDynamicFilters, consumedProbeSide).isEmpty(),\n-                        \"Dynamic filters present in join were not fully consumed by its probe side.\");\n+                Set<String> unconsumedByProbeSide = difference(currentJoinDynamicFilters, consumedProbeSide);\n+                verify(unconsumedByProbeSide.isEmpty(),\n+                        \"Dynamic filters %s present in join were not fully consumed by its probe side.\", unconsumedByProbeSide);\n \n                 Set<String> consumedBuildSide = node.getBuild().accept(this, context);\n-                verify(\n-                        intersection(currentJoinDynamicFilters, consumedBuildSide).isEmpty(),\n-                        \"Dynamic filters present in join were consumed by its build side.\");\n+                Set<String> unconsumedByBuildSide = intersection(currentJoinDynamicFilters, consumedBuildSide);\n+                verify(unconsumedByBuildSide.isEmpty(),\n+                        \"Dynamic filters %s present in join were consumed by its build side.\", unconsumedByBuildSide);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b1636e64f558be39421559620d24f1b6bd6bb2d"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3776, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}