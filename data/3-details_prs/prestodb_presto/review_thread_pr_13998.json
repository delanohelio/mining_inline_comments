{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2MDM4NDUx", "number": 13998, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDozNzozNVrODZ98PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxODo0MDowMVrODa-0yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTU1ODM3OnYy", "diffSide": "RIGHT", "path": "presto-verifier/src/test/java/com/facebook/presto/verifier/framework/TestVerificationManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDozNzozNVrOFgqLPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDozNzozNVrOFgqLPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc4OTc1OA==", "bodyText": "nit: let's do one parameter per line here.", "url": "https://github.com/prestodb/presto/pull/13998#discussion_r369789758", "createdAt": "2020-01-22T20:37:35Z", "author": {"login": "caithagoras"}, "path": "presto-verifier/src/test/java/com/facebook/presto/verifier/framework/TestVerificationManager.java", "diffHunk": "@@ -210,7 +211,7 @@ private VerificationManager getVerificationManager(List<SourceQuery> sourceQueri\n                         presto -> new QueryRewriter(SQL_PARSER, presto, ImmutableList.of(), ImmutableMap.of(CONTROL, TABLE_PREFIX, TEST, TABLE_PREFIX)),\n                         new FailureResolverManagerFactory(ImmutableList.of(), new FailureResolverConfig().setEnabled(false)),\n                         new MockNodeResourceClient(),\n-                        new ChecksumValidator(new SimpleColumnValidator(), new FloatingPointColumnValidator(verifierConfig), new ArrayColumnValidator()),\n+                        new ChecksumValidator(new SimpleColumnValidator(), new FloatingPointColumnValidator(verifierConfig), new ArrayColumnValidator(), new RowColumnValidator()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3cb2c86cdd0e657c1a7c55c5d98d4c042072b15"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTczNTIxOnYy", "diffSide": "RIGHT", "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/checksum/RowColumnValidator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMTozOTozN1rOFgr6CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMTozOTozN1rOFgr6CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgxODEyMA==", "bodyText": "ImmutableList -> List", "url": "https://github.com/prestodb/presto/pull/13998#discussion_r369818120", "createdAt": "2020-01-22T21:39:37Z", "author": {"login": "mbasmanova"}, "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/checksum/RowColumnValidator.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.verifier.checksum;\n+\n+import com.facebook.presto.spi.type.RowType;\n+import com.facebook.presto.sql.tree.DereferenceExpression;\n+import com.facebook.presto.sql.tree.Expression;\n+import com.facebook.presto.sql.tree.FunctionCall;\n+import com.facebook.presto.sql.tree.Identifier;\n+import com.facebook.presto.sql.tree.QualifiedName;\n+import com.facebook.presto.sql.tree.SingleColumn;\n+import com.facebook.presto.verifier.framework.Column;\n+import com.google.common.collect.ImmutableList;\n+\n+import javax.inject.Inject;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.verifier.framework.VerifierUtil.delimitedIdentifier;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.lang.String.format;\n+import static java.util.stream.Collectors.joining;\n+\n+public class RowColumnValidator\n+        implements ColumnValidator\n+{\n+    @Inject\n+    public RowColumnValidator()\n+    {\n+    }\n+\n+    @Override\n+    public List<SingleColumn> generateChecksumColumns(Column column)\n+    {\n+        checkColumnType(column);\n+\n+        Expression checksum = new FunctionCall(QualifiedName.of(\"checksum\"), ImmutableList.of(column.getIdentifier()));\n+\n+        ImmutableList.Builder<SingleColumn> columnsBuilder = ImmutableList.builder();\n+        columnsBuilder.add(new SingleColumn(checksum, Optional.of(delimitedIdentifier(getChecksumAlias(column)))));\n+\n+        for (RowType.Field field : getFields(column)) {\n+            Expression fieldChecksum = new FunctionCall(QualifiedName.of(\"checksum\"), ImmutableList.of(\n+                    new DereferenceExpression(column.getIdentifier(), new Identifier(field.getName().get()))));\n+            columnsBuilder.add(new SingleColumn(fieldChecksum, Optional.of(delimitedIdentifier(getChecksumAlias(column, field)))));\n+        }\n+\n+        return columnsBuilder.build();\n+    }\n+\n+    @Override\n+    public ColumnMatchResult validate(Column column, ChecksumResult controlResult, ChecksumResult testResult)\n+    {\n+        checkColumnType(column);\n+\n+        ImmutableList<String> aliases = ImmutableList.<String>builder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3cb2c86cdd0e657c1a7c55c5d98d4c042072b15"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTczODUxOnYy", "diffSide": "RIGHT", "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/checksum/RowColumnValidator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMTo0MDozNVrOFgr73w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMTo0MDozNVrOFgr73w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgxODU5MQ==", "bodyText": "ImmutableList -> List", "url": "https://github.com/prestodb/presto/pull/13998#discussion_r369818591", "createdAt": "2020-01-22T21:40:35Z", "author": {"login": "mbasmanova"}, "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/checksum/RowColumnValidator.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.verifier.checksum;\n+\n+import com.facebook.presto.spi.type.RowType;\n+import com.facebook.presto.sql.tree.DereferenceExpression;\n+import com.facebook.presto.sql.tree.Expression;\n+import com.facebook.presto.sql.tree.FunctionCall;\n+import com.facebook.presto.sql.tree.Identifier;\n+import com.facebook.presto.sql.tree.QualifiedName;\n+import com.facebook.presto.sql.tree.SingleColumn;\n+import com.facebook.presto.verifier.framework.Column;\n+import com.google.common.collect.ImmutableList;\n+\n+import javax.inject.Inject;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.verifier.framework.VerifierUtil.delimitedIdentifier;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.lang.String.format;\n+import static java.util.stream.Collectors.joining;\n+\n+public class RowColumnValidator\n+        implements ColumnValidator\n+{\n+    @Inject\n+    public RowColumnValidator()\n+    {\n+    }\n+\n+    @Override\n+    public List<SingleColumn> generateChecksumColumns(Column column)\n+    {\n+        checkColumnType(column);\n+\n+        Expression checksum = new FunctionCall(QualifiedName.of(\"checksum\"), ImmutableList.of(column.getIdentifier()));\n+\n+        ImmutableList.Builder<SingleColumn> columnsBuilder = ImmutableList.builder();\n+        columnsBuilder.add(new SingleColumn(checksum, Optional.of(delimitedIdentifier(getChecksumAlias(column)))));\n+\n+        for (RowType.Field field : getFields(column)) {\n+            Expression fieldChecksum = new FunctionCall(QualifiedName.of(\"checksum\"), ImmutableList.of(\n+                    new DereferenceExpression(column.getIdentifier(), new Identifier(field.getName().get()))));\n+            columnsBuilder.add(new SingleColumn(fieldChecksum, Optional.of(delimitedIdentifier(getChecksumAlias(column, field)))));\n+        }\n+\n+        return columnsBuilder.build();\n+    }\n+\n+    @Override\n+    public ColumnMatchResult validate(Column column, ChecksumResult controlResult, ChecksumResult testResult)\n+    {\n+        checkColumnType(column);\n+\n+        ImmutableList<String> aliases = ImmutableList.<String>builder()\n+                .add(getChecksumAlias(column))\n+                .addAll(getFields(column).stream()\n+                        .map(field -> getChecksumAlias(column, field))\n+                        .collect(Collectors.toList()))\n+                .build();\n+\n+        return new ColumnMatchResult(\n+                aliases.stream().allMatch(alias -> Objects.equals(controlResult.getChecksum(alias), testResult.getChecksum(alias))),\n+                prepareMatchMessage(aliases, controlResult, testResult));\n+    }\n+\n+    private static void checkColumnType(Column column)\n+    {\n+        checkArgument(column.getType() instanceof RowType, \"Expect RowType, found %s\", column.getType().getDisplayName());\n+    }\n+\n+    private static List<RowType.Field> getFields(Column column)\n+    {\n+        return ((RowType) column.getType()).getFields();\n+    }\n+\n+    private static String getChecksumAlias(Column column)\n+    {\n+        return column.getName() + \"_checksum\";\n+    }\n+\n+    private static String getChecksumAlias(Column column, RowType.Field field)\n+    {\n+        return column.getName() + \"_\" + field.getName().get() + \"_checksum\";\n+    }\n+\n+    private static String prepareMatchMessage(ImmutableList<String> aliases, ChecksumResult controlResult, ChecksumResult testResult)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3cb2c86cdd0e657c1a7c55c5d98d4c042072b15"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTgyNDY4OnYy", "diffSide": "RIGHT", "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/checksum/RowColumnValidator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMjoxMToyMVrOFgsxvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMTo0MjowNlrOFg7T2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgzMjM4MQ==", "bodyText": "Use a different delimiter to separate column and fields name for user-friendliness: i.e. column$field_checksum", "url": "https://github.com/prestodb/presto/pull/13998#discussion_r369832381", "createdAt": "2020-01-22T22:11:21Z", "author": {"login": "caithagoras"}, "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/checksum/RowColumnValidator.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.verifier.checksum;\n+\n+import com.facebook.presto.spi.type.RowType;\n+import com.facebook.presto.sql.tree.DereferenceExpression;\n+import com.facebook.presto.sql.tree.Expression;\n+import com.facebook.presto.sql.tree.FunctionCall;\n+import com.facebook.presto.sql.tree.Identifier;\n+import com.facebook.presto.sql.tree.QualifiedName;\n+import com.facebook.presto.sql.tree.SingleColumn;\n+import com.facebook.presto.verifier.framework.Column;\n+import com.google.common.collect.ImmutableList;\n+\n+import javax.inject.Inject;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.verifier.framework.VerifierUtil.delimitedIdentifier;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.lang.String.format;\n+import static java.util.stream.Collectors.joining;\n+\n+public class RowColumnValidator\n+        implements ColumnValidator\n+{\n+    @Inject\n+    public RowColumnValidator()\n+    {\n+    }\n+\n+    @Override\n+    public List<SingleColumn> generateChecksumColumns(Column column)\n+    {\n+        checkColumnType(column);\n+\n+        Expression checksum = new FunctionCall(QualifiedName.of(\"checksum\"), ImmutableList.of(column.getIdentifier()));\n+\n+        ImmutableList.Builder<SingleColumn> columnsBuilder = ImmutableList.builder();\n+        columnsBuilder.add(new SingleColumn(checksum, Optional.of(delimitedIdentifier(getChecksumAlias(column)))));\n+\n+        for (RowType.Field field : getFields(column)) {\n+            Expression fieldChecksum = new FunctionCall(QualifiedName.of(\"checksum\"), ImmutableList.of(\n+                    new DereferenceExpression(column.getIdentifier(), new Identifier(field.getName().get()))));\n+            columnsBuilder.add(new SingleColumn(fieldChecksum, Optional.of(delimitedIdentifier(getChecksumAlias(column, field)))));\n+        }\n+\n+        return columnsBuilder.build();\n+    }\n+\n+    @Override\n+    public ColumnMatchResult validate(Column column, ChecksumResult controlResult, ChecksumResult testResult)\n+    {\n+        checkColumnType(column);\n+\n+        ImmutableList<String> aliases = ImmutableList.<String>builder()\n+                .add(getChecksumAlias(column))\n+                .addAll(getFields(column).stream()\n+                        .map(field -> getChecksumAlias(column, field))\n+                        .collect(Collectors.toList()))\n+                .build();\n+\n+        return new ColumnMatchResult(\n+                aliases.stream().allMatch(alias -> Objects.equals(controlResult.getChecksum(alias), testResult.getChecksum(alias))),\n+                prepareMatchMessage(aliases, controlResult, testResult));\n+    }\n+\n+    private static void checkColumnType(Column column)\n+    {\n+        checkArgument(column.getType() instanceof RowType, \"Expect RowType, found %s\", column.getType().getDisplayName());\n+    }\n+\n+    private static List<RowType.Field> getFields(Column column)\n+    {\n+        return ((RowType) column.getType()).getFields();\n+    }\n+\n+    private static String getChecksumAlias(Column column)\n+    {\n+        return column.getName() + \"_checksum\";\n+    }\n+\n+    private static String getChecksumAlias(Column column, RowType.Field field)\n+    {\n+        return column.getName() + \"_\" + field.getName().get() + \"_checksum\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3cb2c86cdd0e657c1a7c55c5d98d4c042072b15"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgzNzgwOA==", "bodyText": "Called Optional.get() without checking Optional.present().\nit is possible that some fields in a RowType do not have name, we should somehow reorganize code so that an artificial name is given in case the name of the field is missing.\nFor example, for a row(a int, varchar, boolean, d double), we can give varchar a name of _col1 and boolean a name _col2.", "url": "https://github.com/prestodb/presto/pull/13998#discussion_r369837808", "createdAt": "2020-01-22T22:23:16Z", "author": {"login": "caithagoras"}, "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/checksum/RowColumnValidator.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.verifier.checksum;\n+\n+import com.facebook.presto.spi.type.RowType;\n+import com.facebook.presto.sql.tree.DereferenceExpression;\n+import com.facebook.presto.sql.tree.Expression;\n+import com.facebook.presto.sql.tree.FunctionCall;\n+import com.facebook.presto.sql.tree.Identifier;\n+import com.facebook.presto.sql.tree.QualifiedName;\n+import com.facebook.presto.sql.tree.SingleColumn;\n+import com.facebook.presto.verifier.framework.Column;\n+import com.google.common.collect.ImmutableList;\n+\n+import javax.inject.Inject;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.verifier.framework.VerifierUtil.delimitedIdentifier;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.lang.String.format;\n+import static java.util.stream.Collectors.joining;\n+\n+public class RowColumnValidator\n+        implements ColumnValidator\n+{\n+    @Inject\n+    public RowColumnValidator()\n+    {\n+    }\n+\n+    @Override\n+    public List<SingleColumn> generateChecksumColumns(Column column)\n+    {\n+        checkColumnType(column);\n+\n+        Expression checksum = new FunctionCall(QualifiedName.of(\"checksum\"), ImmutableList.of(column.getIdentifier()));\n+\n+        ImmutableList.Builder<SingleColumn> columnsBuilder = ImmutableList.builder();\n+        columnsBuilder.add(new SingleColumn(checksum, Optional.of(delimitedIdentifier(getChecksumAlias(column)))));\n+\n+        for (RowType.Field field : getFields(column)) {\n+            Expression fieldChecksum = new FunctionCall(QualifiedName.of(\"checksum\"), ImmutableList.of(\n+                    new DereferenceExpression(column.getIdentifier(), new Identifier(field.getName().get()))));\n+            columnsBuilder.add(new SingleColumn(fieldChecksum, Optional.of(delimitedIdentifier(getChecksumAlias(column, field)))));\n+        }\n+\n+        return columnsBuilder.build();\n+    }\n+\n+    @Override\n+    public ColumnMatchResult validate(Column column, ChecksumResult controlResult, ChecksumResult testResult)\n+    {\n+        checkColumnType(column);\n+\n+        ImmutableList<String> aliases = ImmutableList.<String>builder()\n+                .add(getChecksumAlias(column))\n+                .addAll(getFields(column).stream()\n+                        .map(field -> getChecksumAlias(column, field))\n+                        .collect(Collectors.toList()))\n+                .build();\n+\n+        return new ColumnMatchResult(\n+                aliases.stream().allMatch(alias -> Objects.equals(controlResult.getChecksum(alias), testResult.getChecksum(alias))),\n+                prepareMatchMessage(aliases, controlResult, testResult));\n+    }\n+\n+    private static void checkColumnType(Column column)\n+    {\n+        checkArgument(column.getType() instanceof RowType, \"Expect RowType, found %s\", column.getType().getDisplayName());\n+    }\n+\n+    private static List<RowType.Field> getFields(Column column)\n+    {\n+        return ((RowType) column.getType()).getFields();\n+    }\n+\n+    private static String getChecksumAlias(Column column)\n+    {\n+        return column.getName() + \"_checksum\";\n+    }\n+\n+    private static String getChecksumAlias(Column column, RowType.Field field)\n+    {\n+        return column.getName() + \"_\" + field.getName().get() + \"_checksum\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgzMjM4MQ=="}, "originalCommit": {"oid": "d3cb2c86cdd0e657c1a7c55c5d98d4c042072b15"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA3MDQ5MA==", "bodyText": "It looks like indexing for struct starts from 1. So it should be _col2 for varchar", "url": "https://github.com/prestodb/presto/pull/13998#discussion_r370070490", "createdAt": "2020-01-23T11:42:06Z", "author": {"login": "kvaturka"}, "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/checksum/RowColumnValidator.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.verifier.checksum;\n+\n+import com.facebook.presto.spi.type.RowType;\n+import com.facebook.presto.sql.tree.DereferenceExpression;\n+import com.facebook.presto.sql.tree.Expression;\n+import com.facebook.presto.sql.tree.FunctionCall;\n+import com.facebook.presto.sql.tree.Identifier;\n+import com.facebook.presto.sql.tree.QualifiedName;\n+import com.facebook.presto.sql.tree.SingleColumn;\n+import com.facebook.presto.verifier.framework.Column;\n+import com.google.common.collect.ImmutableList;\n+\n+import javax.inject.Inject;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.verifier.framework.VerifierUtil.delimitedIdentifier;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.lang.String.format;\n+import static java.util.stream.Collectors.joining;\n+\n+public class RowColumnValidator\n+        implements ColumnValidator\n+{\n+    @Inject\n+    public RowColumnValidator()\n+    {\n+    }\n+\n+    @Override\n+    public List<SingleColumn> generateChecksumColumns(Column column)\n+    {\n+        checkColumnType(column);\n+\n+        Expression checksum = new FunctionCall(QualifiedName.of(\"checksum\"), ImmutableList.of(column.getIdentifier()));\n+\n+        ImmutableList.Builder<SingleColumn> columnsBuilder = ImmutableList.builder();\n+        columnsBuilder.add(new SingleColumn(checksum, Optional.of(delimitedIdentifier(getChecksumAlias(column)))));\n+\n+        for (RowType.Field field : getFields(column)) {\n+            Expression fieldChecksum = new FunctionCall(QualifiedName.of(\"checksum\"), ImmutableList.of(\n+                    new DereferenceExpression(column.getIdentifier(), new Identifier(field.getName().get()))));\n+            columnsBuilder.add(new SingleColumn(fieldChecksum, Optional.of(delimitedIdentifier(getChecksumAlias(column, field)))));\n+        }\n+\n+        return columnsBuilder.build();\n+    }\n+\n+    @Override\n+    public ColumnMatchResult validate(Column column, ChecksumResult controlResult, ChecksumResult testResult)\n+    {\n+        checkColumnType(column);\n+\n+        ImmutableList<String> aliases = ImmutableList.<String>builder()\n+                .add(getChecksumAlias(column))\n+                .addAll(getFields(column).stream()\n+                        .map(field -> getChecksumAlias(column, field))\n+                        .collect(Collectors.toList()))\n+                .build();\n+\n+        return new ColumnMatchResult(\n+                aliases.stream().allMatch(alias -> Objects.equals(controlResult.getChecksum(alias), testResult.getChecksum(alias))),\n+                prepareMatchMessage(aliases, controlResult, testResult));\n+    }\n+\n+    private static void checkColumnType(Column column)\n+    {\n+        checkArgument(column.getType() instanceof RowType, \"Expect RowType, found %s\", column.getType().getDisplayName());\n+    }\n+\n+    private static List<RowType.Field> getFields(Column column)\n+    {\n+        return ((RowType) column.getType()).getFields();\n+    }\n+\n+    private static String getChecksumAlias(Column column)\n+    {\n+        return column.getName() + \"_checksum\";\n+    }\n+\n+    private static String getChecksumAlias(Column column, RowType.Field field)\n+    {\n+        return column.getName() + \"_\" + field.getName().get() + \"_checksum\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgzMjM4MQ=="}, "originalCommit": {"oid": "d3cb2c86cdd0e657c1a7c55c5d98d4c042072b15"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTgyNTkwOnYy", "diffSide": "RIGHT", "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/checksum/RowColumnValidator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMjoxMTo0NlrOFgsyZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMjoxMTo0NlrOFgsyZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgzMjU1MA==", "bodyText": "static import FowType.Field", "url": "https://github.com/prestodb/presto/pull/13998#discussion_r369832550", "createdAt": "2020-01-22T22:11:46Z", "author": {"login": "caithagoras"}, "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/checksum/RowColumnValidator.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.verifier.checksum;\n+\n+import com.facebook.presto.spi.type.RowType;\n+import com.facebook.presto.sql.tree.DereferenceExpression;\n+import com.facebook.presto.sql.tree.Expression;\n+import com.facebook.presto.sql.tree.FunctionCall;\n+import com.facebook.presto.sql.tree.Identifier;\n+import com.facebook.presto.sql.tree.QualifiedName;\n+import com.facebook.presto.sql.tree.SingleColumn;\n+import com.facebook.presto.verifier.framework.Column;\n+import com.google.common.collect.ImmutableList;\n+\n+import javax.inject.Inject;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.verifier.framework.VerifierUtil.delimitedIdentifier;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.lang.String.format;\n+import static java.util.stream.Collectors.joining;\n+\n+public class RowColumnValidator\n+        implements ColumnValidator\n+{\n+    @Inject\n+    public RowColumnValidator()\n+    {\n+    }\n+\n+    @Override\n+    public List<SingleColumn> generateChecksumColumns(Column column)\n+    {\n+        checkColumnType(column);\n+\n+        Expression checksum = new FunctionCall(QualifiedName.of(\"checksum\"), ImmutableList.of(column.getIdentifier()));\n+\n+        ImmutableList.Builder<SingleColumn> columnsBuilder = ImmutableList.builder();\n+        columnsBuilder.add(new SingleColumn(checksum, Optional.of(delimitedIdentifier(getChecksumAlias(column)))));\n+\n+        for (RowType.Field field : getFields(column)) {\n+            Expression fieldChecksum = new FunctionCall(QualifiedName.of(\"checksum\"), ImmutableList.of(\n+                    new DereferenceExpression(column.getIdentifier(), new Identifier(field.getName().get()))));\n+            columnsBuilder.add(new SingleColumn(fieldChecksum, Optional.of(delimitedIdentifier(getChecksumAlias(column, field)))));\n+        }\n+\n+        return columnsBuilder.build();\n+    }\n+\n+    @Override\n+    public ColumnMatchResult validate(Column column, ChecksumResult controlResult, ChecksumResult testResult)\n+    {\n+        checkColumnType(column);\n+\n+        ImmutableList<String> aliases = ImmutableList.<String>builder()\n+                .add(getChecksumAlias(column))\n+                .addAll(getFields(column).stream()\n+                        .map(field -> getChecksumAlias(column, field))\n+                        .collect(Collectors.toList()))\n+                .build();\n+\n+        return new ColumnMatchResult(\n+                aliases.stream().allMatch(alias -> Objects.equals(controlResult.getChecksum(alias), testResult.getChecksum(alias))),\n+                prepareMatchMessage(aliases, controlResult, testResult));\n+    }\n+\n+    private static void checkColumnType(Column column)\n+    {\n+        checkArgument(column.getType() instanceof RowType, \"Expect RowType, found %s\", column.getType().getDisplayName());\n+    }\n+\n+    private static List<RowType.Field> getFields(Column column)\n+    {\n+        return ((RowType) column.getType()).getFields();\n+    }\n+\n+    private static String getChecksumAlias(Column column)\n+    {\n+        return column.getName() + \"_checksum\";\n+    }\n+\n+    private static String getChecksumAlias(Column column, RowType.Field field)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3cb2c86cdd0e657c1a7c55c5d98d4c042072b15"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTg2MjA3OnYy", "diffSide": "RIGHT", "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/checksum/RowColumnValidator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMjoyMzo0NlrOFgtHxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMjoyMzo0NlrOFgtHxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgzODAyMA==", "bodyText": "In case the RowType is a large structure, this would be too verbose to read. Let's only print the checksum where there is a mismatch.", "url": "https://github.com/prestodb/presto/pull/13998#discussion_r369838020", "createdAt": "2020-01-22T22:23:46Z", "author": {"login": "caithagoras"}, "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/checksum/RowColumnValidator.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.verifier.checksum;\n+\n+import com.facebook.presto.spi.type.RowType;\n+import com.facebook.presto.sql.tree.DereferenceExpression;\n+import com.facebook.presto.sql.tree.Expression;\n+import com.facebook.presto.sql.tree.FunctionCall;\n+import com.facebook.presto.sql.tree.Identifier;\n+import com.facebook.presto.sql.tree.QualifiedName;\n+import com.facebook.presto.sql.tree.SingleColumn;\n+import com.facebook.presto.verifier.framework.Column;\n+import com.google.common.collect.ImmutableList;\n+\n+import javax.inject.Inject;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.verifier.framework.VerifierUtil.delimitedIdentifier;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.lang.String.format;\n+import static java.util.stream.Collectors.joining;\n+\n+public class RowColumnValidator\n+        implements ColumnValidator\n+{\n+    @Inject\n+    public RowColumnValidator()\n+    {\n+    }\n+\n+    @Override\n+    public List<SingleColumn> generateChecksumColumns(Column column)\n+    {\n+        checkColumnType(column);\n+\n+        Expression checksum = new FunctionCall(QualifiedName.of(\"checksum\"), ImmutableList.of(column.getIdentifier()));\n+\n+        ImmutableList.Builder<SingleColumn> columnsBuilder = ImmutableList.builder();\n+        columnsBuilder.add(new SingleColumn(checksum, Optional.of(delimitedIdentifier(getChecksumAlias(column)))));\n+\n+        for (RowType.Field field : getFields(column)) {\n+            Expression fieldChecksum = new FunctionCall(QualifiedName.of(\"checksum\"), ImmutableList.of(\n+                    new DereferenceExpression(column.getIdentifier(), new Identifier(field.getName().get()))));\n+            columnsBuilder.add(new SingleColumn(fieldChecksum, Optional.of(delimitedIdentifier(getChecksumAlias(column, field)))));\n+        }\n+\n+        return columnsBuilder.build();\n+    }\n+\n+    @Override\n+    public ColumnMatchResult validate(Column column, ChecksumResult controlResult, ChecksumResult testResult)\n+    {\n+        checkColumnType(column);\n+\n+        ImmutableList<String> aliases = ImmutableList.<String>builder()\n+                .add(getChecksumAlias(column))\n+                .addAll(getFields(column).stream()\n+                        .map(field -> getChecksumAlias(column, field))\n+                        .collect(Collectors.toList()))\n+                .build();\n+\n+        return new ColumnMatchResult(\n+                aliases.stream().allMatch(alias -> Objects.equals(controlResult.getChecksum(alias), testResult.getChecksum(alias))),\n+                prepareMatchMessage(aliases, controlResult, testResult));\n+    }\n+\n+    private static void checkColumnType(Column column)\n+    {\n+        checkArgument(column.getType() instanceof RowType, \"Expect RowType, found %s\", column.getType().getDisplayName());\n+    }\n+\n+    private static List<RowType.Field> getFields(Column column)\n+    {\n+        return ((RowType) column.getType()).getFields();\n+    }\n+\n+    private static String getChecksumAlias(Column column)\n+    {\n+        return column.getName() + \"_checksum\";\n+    }\n+\n+    private static String getChecksumAlias(Column column, RowType.Field field)\n+    {\n+        return column.getName() + \"_\" + field.getName().get() + \"_checksum\";\n+    }\n+\n+    private static String prepareMatchMessage(ImmutableList<String> aliases, ChecksumResult controlResult, ChecksumResult testResult)\n+    {\n+        String control = aliases.stream()\n+                .map(alias -> alias + \": \" + controlResult.getChecksum(alias))\n+                .collect(joining(\", \"));\n+\n+        String test = aliases.stream()\n+                .map(alias -> alias + \": \" + testResult.getChecksum(alias))\n+                .collect(joining(\", \"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3cb2c86cdd0e657c1a7c55c5d98d4c042072b15"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NjE4ODg4OnYy", "diffSide": "RIGHT", "path": "presto-verifier/src/test/java/com/facebook/presto/verifier/checksum/TestChecksumValidator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxODo0MDowMVrOFiNO9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxODo0MDowMVrOFiNO9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQxMjcyNg==", "bodyText": "Sorry about my previous suggestion for the column name but this just looks a bit confusing. Maybe we should do $col2 instead of _col2, so that this looks like row$$col3_checksum, and for the named field, it should still be row$a_checksum. The reason we add an extra special character before the field name is that this will be safe even if a column in the row was explicitly named as col1, col2, etc...", "url": "https://github.com/prestodb/presto/pull/13998#discussion_r371412726", "createdAt": "2020-01-27T18:40:01Z", "author": {"login": "caithagoras"}, "path": "presto-verifier/src/test/java/com/facebook/presto/verifier/checksum/TestChecksumValidator.java", "diffHunk": "@@ -328,4 +337,53 @@ public void testArray()\n                         .put(MAP_ARRAY_COLUMN, new ColumnMatchResult(false, \"control(checksum: 0b, cardinality_sum: 7) test(checksum: 1b, cardinality_sum: 5)\"))\n                         .build());\n     }\n+\n+    @Test\n+    public void testRow()\n+    {\n+        List<Column> columns = ImmutableList.of(ROW_COLUMN);\n+        ChecksumResult controlChecksum = new ChecksumResult(\n+                5,\n+                ImmutableMap.<String, Object>builder()\n+                        .put(\"row_checksum\", new SqlVarbinary(new byte[] {0xa}))\n+                        .put(\"row$a_checksum\", new SqlVarbinary(new byte[] {0xb}))\n+                        .put(\"row$_col2_checksum\", new SqlVarbinary(new byte[] {0xc}))\n+                        .put(\"row$_col3_checksum\", new SqlVarbinary(new byte[] {0xd}))\n+                        .put(\"row$b_checksum\", new SqlVarbinary(new byte[] {0xe}))\n+                        .build());\n+\n+        assertTrue(checksumValidator.getMismatchedColumns(columns, controlChecksum, controlChecksum).isEmpty());\n+\n+        // Mismatched different elements\n+        ChecksumResult testChecksum = new ChecksumResult(\n+                5,\n+                ImmutableMap.<String, Object>builder()\n+                        .put(\"row_checksum\", new SqlVarbinary(new byte[] {0x1a}))\n+                        .put(\"row$a_checksum\", new SqlVarbinary(new byte[] {0x1b}))\n+                        .put(\"row$_col2_checksum\", new SqlVarbinary(new byte[] {0x1c}))\n+                        .put(\"row$_col3_checksum\", new SqlVarbinary(new byte[] {0x1d}))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e24083c0a9ccf7daee7da1e7b72a8d2a15f6e9b1"}, "originalPosition": 76}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3178, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}