{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1NjczMjIw", "number": 15000, "title": "Add plan check for runtime optimization", "bodyText": "This PR implements the following:\n\nRefactor the add/remove local exchange logic in RuntimeReorderJoinSides rule to use the same checking logic as the planning time optimization rule AddLocalExchange. Namely, the StreamPropertyDerivations class.\nExtend the plan checker to be also invoked during runtime for each rewritten fragment.\n\n== NO RELEASE NOTE ==", "createdAt": "2020-08-10T18:57:19Z", "url": "https://github.com/prestodb/presto/pull/15000", "merged": true, "mergeCommit": {"oid": "4066bd3a1130db56e2b81b99bfe3de4e813a9235"}, "closed": true, "closedAt": "2020-08-20T15:48:52Z", "author": {"login": "pguofb"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc9-p-7AFqTQ2NTQ3MzQwNw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdAnxn0ABqjM2NzMzNzM0OTE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NDczNDA3", "url": "https://github.com/prestodb/presto/pull/15000#pullrequestreview-465473407", "createdAt": "2020-08-11T22:33:01Z", "commit": {"oid": "38db5e2ad4c8f684dd12effff496dac840df73da"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMjozMzowMVrOG_LfHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMjozNDo0NVrOG_LhsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkwMTY2Mg==", "bodyText": "We shouldn't have a seperate runtime planchecker, since the runtime plan has the same requirements as the \"final\" plan. Instead, we should be running the planchecker for the final stage after doing runtime optimization", "url": "https://github.com/prestodb/presto/pull/15000#discussion_r468901662", "createdAt": "2020-08-11T22:33:01Z", "author": {"login": "rschlussel"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/sanity/PlanChecker.java", "diffHunk": "@@ -74,6 +74,9 @@ public PlanChecker(FeaturesConfig featuresConfig, boolean forceSingleNode)\n                         new VerifyProjectionLocality(),\n                         new DynamicFiltersChecker(),\n                         new WarnOnScanWithoutPartitionPredicate(featuresConfig))\n+                .putAll(\n+                        Stage.RUNTIME,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38db5e2ad4c8f684dd12effff496dac840df73da"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkwMjMyMA==", "bodyText": "This plan checker is too specific to a particular optimizer rule.  PlanCheckers should be enforcing general requirements for a valid plan regardless of what optimizers ran.", "url": "https://github.com/prestodb/presto/pull/15000#discussion_r468902320", "createdAt": "2020-08-11T22:34:45Z", "author": {"login": "rschlussel"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/sanity/ValidateRuntimeSwappedJoins.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.planner.sanity;\n+\n+import com.facebook.presto.Session;\n+import com.facebook.presto.execution.warnings.WarningCollector;\n+import com.facebook.presto.metadata.Metadata;\n+import com.facebook.presto.spi.plan.PlanNode;\n+import com.facebook.presto.spi.relation.VariableReferenceExpression;\n+import com.facebook.presto.sql.parser.SqlParser;\n+import com.facebook.presto.sql.planner.TypeProvider;\n+import com.facebook.presto.sql.planner.optimizations.StreamPreferredProperties;\n+import com.facebook.presto.sql.planner.optimizations.StreamPropertyDerivations.StreamProperties;\n+import com.facebook.presto.sql.planner.plan.InternalPlanVisitor;\n+import com.facebook.presto.sql.planner.plan.JoinNode;\n+import com.facebook.presto.sql.planner.sanity.PlanChecker.Checker;\n+\n+import java.util.List;\n+\n+import static com.facebook.presto.SystemSessionProperties.getTaskConcurrency;\n+import static com.facebook.presto.SystemSessionProperties.isSpillEnabled;\n+import static com.facebook.presto.sql.planner.optimizations.StreamPreferredProperties.defaultParallelism;\n+import static com.facebook.presto.sql.planner.optimizations.StreamPreferredProperties.exactlyPartitionedOn;\n+import static com.facebook.presto.sql.planner.optimizations.StreamPreferredProperties.fixedParallelism;\n+import static com.facebook.presto.sql.planner.optimizations.StreamPreferredProperties.singleStream;\n+import static com.facebook.presto.sql.planner.optimizations.StreamPropertyDerivations.derivePropertiesRecursively;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+\n+public class ValidateRuntimeSwappedJoins", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38db5e2ad4c8f684dd12effff496dac840df73da"}, "originalPosition": 41}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "38db5e2ad4c8f684dd12effff496dac840df73da", "author": {"user": {"login": "pguofb", "name": "Peizhen Guo"}}, "url": "https://github.com/prestodb/presto/commit/38db5e2ad4c8f684dd12effff496dac840df73da", "committedDate": "2020-08-10T18:51:59Z", "message": "Invoke runtime plan checker in SqlQueryScheduler\n\n- Add a ValidateRuntimeSwappedJoin check rule to planChecker that\nspecifically investigate if the probe and build side of a join node\nsatisfies required distribution properties.\n- Add a new category (RUNTIME) in planChecker that will be invoked by\nSqlQueryScheduler after runtime optimizations on each stage."}, "afterCommit": {"oid": "22f9dcc3b7ac84b1c67ea96a073a4de5d4d2a0c3", "author": {"user": {"login": "pguofb", "name": "Peizhen Guo"}}, "url": "https://github.com/prestodb/presto/commit/22f9dcc3b7ac84b1c67ea96a073a4de5d4d2a0c3", "committedDate": "2020-08-13T17:22:45Z", "message": "Invoke runtime plan checker in SqlQueryScheduler\n\n- Add a ValidateRuntimeSwappedJoin check rule to planChecker that\nspecifically investigate if the probe and build side of a join node\nsatisfies required distribution properties.\n- Add a new category (RUNTIME) in planChecker that will be invoked by\nSqlQueryScheduler after runtime optimizations on each stage."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "22f9dcc3b7ac84b1c67ea96a073a4de5d4d2a0c3", "author": {"user": {"login": "pguofb", "name": "Peizhen Guo"}}, "url": "https://github.com/prestodb/presto/commit/22f9dcc3b7ac84b1c67ea96a073a4de5d4d2a0c3", "committedDate": "2020-08-13T17:22:45Z", "message": "Invoke runtime plan checker in SqlQueryScheduler\n\n- Add a ValidateRuntimeSwappedJoin check rule to planChecker that\nspecifically investigate if the probe and build side of a join node\nsatisfies required distribution properties.\n- Add a new category (RUNTIME) in planChecker that will be invoked by\nSqlQueryScheduler after runtime optimizations on each stage."}, "afterCommit": {"oid": "0e9c57e417e4761695cf488d1ef4ec91f25b0574", "author": {"user": {"login": "pguofb", "name": "Peizhen Guo"}}, "url": "https://github.com/prestodb/presto/commit/0e9c57e417e4761695cf488d1ef4ec91f25b0574", "committedDate": "2020-08-14T18:11:50Z", "message": "Invoke runtime plan checker in SqlQueryScheduler\n\n- Add a ValidateStreamingJoins check rule to planChecker that\nspecifically investigate if the probe and build side of a join node\nsatisfies required streaming properties.\n- Invoke planChecker to check each fragment that is runtime optimized."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0e9c57e417e4761695cf488d1ef4ec91f25b0574", "author": {"user": {"login": "pguofb", "name": "Peizhen Guo"}}, "url": "https://github.com/prestodb/presto/commit/0e9c57e417e4761695cf488d1ef4ec91f25b0574", "committedDate": "2020-08-14T18:11:50Z", "message": "Invoke runtime plan checker in SqlQueryScheduler\n\n- Add a ValidateStreamingJoins check rule to planChecker that\nspecifically investigate if the probe and build side of a join node\nsatisfies required streaming properties.\n- Invoke planChecker to check each fragment that is runtime optimized."}, "afterCommit": {"oid": "9b1711099780498160a198a6bebce9ca42db2852", "author": {"user": {"login": "pguofb", "name": "Peizhen Guo"}}, "url": "https://github.com/prestodb/presto/commit/9b1711099780498160a198a6bebce9ca42db2852", "committedDate": "2020-08-14T20:38:57Z", "message": "Bypass fragment sanityCheck for TestCostCalculator\n\nTestCostCalculator tests create a lot of mock plans that are all\nsingle-staged and without proper exchanges in it. This will break\nfragment sanity checks while building fragmentedPlans. Instead,\nextract the statsAndConsts generation logic here to bypass unnecessary\nfragment generation logic and sanity checks."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5ODAzNjk3", "url": "https://github.com/prestodb/presto/pull/15000#pullrequestreview-469803697", "createdAt": "2020-08-18T20:23:41Z", "commit": {"oid": "4c77723ef8d58b03eb59352067e29ba35cd7d1de"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMDoyMzo0MVrOHClDvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMDoyNzo0MVrOHClTAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ2NjM2NA==", "bodyText": "I worry about this because then we won't know if this feature breaks.  I think we should let it fail instead, or at least have a test mode that we let fail and turn on for all our tests (similar to ignore-stats-calculator-failures)", "url": "https://github.com/prestodb/presto/pull/15000#discussion_r472466364", "createdAt": "2020-08-18T20:23:41Z", "author": {"login": "rschlussel"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/LegacySqlQueryScheduler.java", "diffHunk": "@@ -538,7 +556,13 @@ private StreamingPlanSection tryCostBasedOptimize(StreamingPlanSection section)\n                 .forEach(currentSubPlan -> {\n                     Optional<PlanFragment> newPlanFragment = performRuntimeOptimizations(currentSubPlan);\n                     if (newPlanFragment.isPresent()) {\n-                        oldToNewFragment.put(currentSubPlan.getFragment(), newPlanFragment.get());\n+                        try {\n+                            planChecker.validatePlanFragment(newPlanFragment.get().getRoot(), session, metadata, sqlParser, variableAllocator.getTypes(), warningCollector);\n+                            oldToNewFragment.put(currentSubPlan.getFragment(), newPlanFragment.get());\n+                        }\n+                        catch (RuntimeException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c77723ef8d58b03eb59352067e29ba35cd7d1de"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ2NzM1MA==", "bodyText": "ditto", "url": "https://github.com/prestodb/presto/pull/15000#discussion_r472467350", "createdAt": "2020-08-18T20:24:44Z", "author": {"login": "rschlussel"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/scheduler/SqlQueryScheduler.java", "diffHunk": "@@ -428,7 +446,13 @@ private StreamingPlanSection tryCostBasedOptimize(StreamingPlanSection section)\n                 .forEach(currentSubPlan -> {\n                     Optional<PlanFragment> newPlanFragment = performRuntimeOptimizations(currentSubPlan);\n                     if (newPlanFragment.isPresent()) {\n-                        oldToNewFragment.put(currentSubPlan.getFragment(), newPlanFragment.get());\n+                        try {\n+                            planChecker.validatePlanFragment(newPlanFragment.get().getRoot(), session, metadata, sqlParser, variableAllocator.getTypes(), warningCollector);\n+                            oldToNewFragment.put(currentSubPlan.getFragment(), newPlanFragment.get());\n+                        }\n+                        catch (RuntimeException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c77723ef8d58b03eb59352067e29ba35cd7d1de"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ2OTgxMA==", "bodyText": "error message shouldn't mention runtime swapped join", "url": "https://github.com/prestodb/presto/pull/15000#discussion_r472469810", "createdAt": "2020-08-18T20:27:15Z", "author": {"login": "rschlussel"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/sanity/ValidateStreamingJoins.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.planner.sanity;\n+\n+import com.facebook.presto.Session;\n+import com.facebook.presto.execution.warnings.WarningCollector;\n+import com.facebook.presto.metadata.Metadata;\n+import com.facebook.presto.spi.plan.PlanNode;\n+import com.facebook.presto.spi.relation.VariableReferenceExpression;\n+import com.facebook.presto.sql.parser.SqlParser;\n+import com.facebook.presto.sql.planner.TypeProvider;\n+import com.facebook.presto.sql.planner.optimizations.StreamPreferredProperties;\n+import com.facebook.presto.sql.planner.optimizations.StreamPropertyDerivations.StreamProperties;\n+import com.facebook.presto.sql.planner.plan.InternalPlanVisitor;\n+import com.facebook.presto.sql.planner.plan.JoinNode;\n+import com.facebook.presto.sql.planner.plan.RemoteSourceNode;\n+import com.facebook.presto.sql.planner.sanity.PlanChecker.Checker;\n+\n+import java.util.List;\n+\n+import static com.facebook.presto.SystemSessionProperties.getTaskConcurrency;\n+import static com.facebook.presto.SystemSessionProperties.isSpillEnabled;\n+import static com.facebook.presto.sql.planner.optimizations.PlanNodeSearcher.searchFrom;\n+import static com.facebook.presto.sql.planner.optimizations.StreamPreferredProperties.defaultParallelism;\n+import static com.facebook.presto.sql.planner.optimizations.StreamPreferredProperties.exactlyPartitionedOn;\n+import static com.facebook.presto.sql.planner.optimizations.StreamPreferredProperties.fixedParallelism;\n+import static com.facebook.presto.sql.planner.optimizations.StreamPreferredProperties.singleStream;\n+import static com.facebook.presto.sql.planner.optimizations.StreamPropertyDerivations.derivePropertiesRecursively;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+\n+public class ValidateStreamingJoins\n+        implements Checker\n+{\n+    @Override\n+    public void validate(PlanNode planNode, Session session, Metadata metadata, SqlParser sqlParser, TypeProvider types, WarningCollector warningCollector)\n+    {\n+        planNode.accept(new Visitor(session, metadata, sqlParser, types, warningCollector), null);\n+    }\n+\n+    private static final class Visitor\n+            extends InternalPlanVisitor<Void, Void>\n+    {\n+        private final Session session;\n+        private final Metadata metadata;\n+        private final SqlParser sqlParser;\n+        private final TypeProvider types;\n+        private final WarningCollector warningCollector;\n+\n+        private Visitor(Session sesstion, Metadata metadata, SqlParser sqlParser, TypeProvider types, WarningCollector warningCollector)\n+        {\n+            this.session = sesstion;\n+            this.metadata = metadata;\n+            this.sqlParser = sqlParser;\n+            this.types = types;\n+            this.warningCollector = warningCollector;\n+        }\n+\n+        @Override\n+        public Void visitPlan(PlanNode node, Void context)\n+        {\n+            node.getSources().forEach(source -> source.accept(this, context));\n+            return null;\n+        }\n+\n+        @Override\n+        public Void visitJoin(JoinNode node, Void context)\n+        {\n+            // Validate the streaming property of the join node is satisfied when no RemoteSourceNode is involved.\n+            if (!searchFrom(node).where(RemoteSourceNode.class::isInstance).matches()) {\n+                List<VariableReferenceExpression> buildJoinVariables = node.getCriteria().stream()\n+                        .map(JoinNode.EquiJoinClause::getRight)\n+                        .collect(toImmutableList());\n+                StreamPreferredProperties requiredBuildProperty;\n+                if (getTaskConcurrency(session) > 1) {\n+                    requiredBuildProperty = exactlyPartitionedOn(buildJoinVariables);\n+                }\n+                else {\n+                    requiredBuildProperty = singleStream();\n+                }\n+                StreamProperties buildProperties = derivePropertiesRecursively(node.getRight(), metadata, session, types, sqlParser);\n+                checkArgument(requiredBuildProperty.isSatisfiedBy(buildProperties), \"Build side needs an additional local exchange for runtime swapped join: %s\", node.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c77723ef8d58b03eb59352067e29ba35cd7d1de"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ3MDI3Mg==", "bodyText": "error message shouldn't mention runtime swapped join", "url": "https://github.com/prestodb/presto/pull/15000#discussion_r472470272", "createdAt": "2020-08-18T20:27:41Z", "author": {"login": "rschlussel"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/sanity/ValidateStreamingJoins.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.planner.sanity;\n+\n+import com.facebook.presto.Session;\n+import com.facebook.presto.execution.warnings.WarningCollector;\n+import com.facebook.presto.metadata.Metadata;\n+import com.facebook.presto.spi.plan.PlanNode;\n+import com.facebook.presto.spi.relation.VariableReferenceExpression;\n+import com.facebook.presto.sql.parser.SqlParser;\n+import com.facebook.presto.sql.planner.TypeProvider;\n+import com.facebook.presto.sql.planner.optimizations.StreamPreferredProperties;\n+import com.facebook.presto.sql.planner.optimizations.StreamPropertyDerivations.StreamProperties;\n+import com.facebook.presto.sql.planner.plan.InternalPlanVisitor;\n+import com.facebook.presto.sql.planner.plan.JoinNode;\n+import com.facebook.presto.sql.planner.plan.RemoteSourceNode;\n+import com.facebook.presto.sql.planner.sanity.PlanChecker.Checker;\n+\n+import java.util.List;\n+\n+import static com.facebook.presto.SystemSessionProperties.getTaskConcurrency;\n+import static com.facebook.presto.SystemSessionProperties.isSpillEnabled;\n+import static com.facebook.presto.sql.planner.optimizations.PlanNodeSearcher.searchFrom;\n+import static com.facebook.presto.sql.planner.optimizations.StreamPreferredProperties.defaultParallelism;\n+import static com.facebook.presto.sql.planner.optimizations.StreamPreferredProperties.exactlyPartitionedOn;\n+import static com.facebook.presto.sql.planner.optimizations.StreamPreferredProperties.fixedParallelism;\n+import static com.facebook.presto.sql.planner.optimizations.StreamPreferredProperties.singleStream;\n+import static com.facebook.presto.sql.planner.optimizations.StreamPropertyDerivations.derivePropertiesRecursively;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+\n+public class ValidateStreamingJoins\n+        implements Checker\n+{\n+    @Override\n+    public void validate(PlanNode planNode, Session session, Metadata metadata, SqlParser sqlParser, TypeProvider types, WarningCollector warningCollector)\n+    {\n+        planNode.accept(new Visitor(session, metadata, sqlParser, types, warningCollector), null);\n+    }\n+\n+    private static final class Visitor\n+            extends InternalPlanVisitor<Void, Void>\n+    {\n+        private final Session session;\n+        private final Metadata metadata;\n+        private final SqlParser sqlParser;\n+        private final TypeProvider types;\n+        private final WarningCollector warningCollector;\n+\n+        private Visitor(Session sesstion, Metadata metadata, SqlParser sqlParser, TypeProvider types, WarningCollector warningCollector)\n+        {\n+            this.session = sesstion;\n+            this.metadata = metadata;\n+            this.sqlParser = sqlParser;\n+            this.types = types;\n+            this.warningCollector = warningCollector;\n+        }\n+\n+        @Override\n+        public Void visitPlan(PlanNode node, Void context)\n+        {\n+            node.getSources().forEach(source -> source.accept(this, context));\n+            return null;\n+        }\n+\n+        @Override\n+        public Void visitJoin(JoinNode node, Void context)\n+        {\n+            // Validate the streaming property of the join node is satisfied when no RemoteSourceNode is involved.\n+            if (!searchFrom(node).where(RemoteSourceNode.class::isInstance).matches()) {\n+                List<VariableReferenceExpression> buildJoinVariables = node.getCriteria().stream()\n+                        .map(JoinNode.EquiJoinClause::getRight)\n+                        .collect(toImmutableList());\n+                StreamPreferredProperties requiredBuildProperty;\n+                if (getTaskConcurrency(session) > 1) {\n+                    requiredBuildProperty = exactlyPartitionedOn(buildJoinVariables);\n+                }\n+                else {\n+                    requiredBuildProperty = singleStream();\n+                }\n+                StreamProperties buildProperties = derivePropertiesRecursively(node.getRight(), metadata, session, types, sqlParser);\n+                checkArgument(requiredBuildProperty.isSatisfiedBy(buildProperties), \"Build side needs an additional local exchange for runtime swapped join: %s\", node.getId());\n+\n+                StreamPreferredProperties requiredProbeProperty;\n+                if (isSpillEnabled(session)) {\n+                    requiredProbeProperty = fixedParallelism();\n+                }\n+                else {\n+                    requiredProbeProperty = defaultParallelism(session);\n+                }\n+                StreamProperties probeProperties = derivePropertiesRecursively(node.getLeft(), metadata, session, types, sqlParser);\n+                checkArgument(requiredProbeProperty.isSatisfiedBy(probeProperties), \"Probe side needs an additional local exchange for runtime swapped join: %s\", node.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c77723ef8d58b03eb59352067e29ba35cd7d1de"}, "originalPosition": 103}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9b1711099780498160a198a6bebce9ca42db2852", "author": {"user": {"login": "pguofb", "name": "Peizhen Guo"}}, "url": "https://github.com/prestodb/presto/commit/9b1711099780498160a198a6bebce9ca42db2852", "committedDate": "2020-08-14T20:38:57Z", "message": "Bypass fragment sanityCheck for TestCostCalculator\n\nTestCostCalculator tests create a lot of mock plans that are all\nsingle-staged and without proper exchanges in it. This will break\nfragment sanity checks while building fragmentedPlans. Instead,\nextract the statsAndConsts generation logic here to bypass unnecessary\nfragment generation logic and sanity checks."}, "afterCommit": {"oid": "8480a59d5d3da0029d2193549f661da4f426ef7b", "author": {"user": {"login": "pguofb", "name": "Peizhen Guo"}}, "url": "https://github.com/prestodb/presto/commit/8480a59d5d3da0029d2193549f661da4f426ef7b", "committedDate": "2020-08-18T20:57:49Z", "message": "Bypass fragment sanityCheck for TestCostCalculator\n\nTestCostCalculator tests create a lot of mock plans that are all\nsingle-staged and without proper exchanges in it. This will break\nfragment sanity checks while building fragmentedPlans. Instead,\nextract the statsAndConsts generation logic here to bypass unnecessary\nfragment generation logic and sanity checks."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8480a59d5d3da0029d2193549f661da4f426ef7b", "author": {"user": {"login": "pguofb", "name": "Peizhen Guo"}}, "url": "https://github.com/prestodb/presto/commit/8480a59d5d3da0029d2193549f661da4f426ef7b", "committedDate": "2020-08-18T20:57:49Z", "message": "Bypass fragment sanityCheck for TestCostCalculator\n\nTestCostCalculator tests create a lot of mock plans that are all\nsingle-staged and without proper exchanges in it. This will break\nfragment sanity checks while building fragmentedPlans. Instead,\nextract the statsAndConsts generation logic here to bypass unnecessary\nfragment generation logic and sanity checks."}, "afterCommit": {"oid": "322d99b40b550b4ecadb0ce08cb615e200c73005", "author": {"user": {"login": "pguofb", "name": "Peizhen Guo"}}, "url": "https://github.com/prestodb/presto/commit/322d99b40b550b4ecadb0ce08cb615e200c73005", "committedDate": "2020-08-19T16:46:08Z", "message": "Invoke runtime plan checker in SqlQueryScheduler\n\n- Add a ValidateStreamingJoins check rule to planChecker that\nspecifically investigate if the probe and build side of a join node\nsatisfies required streaming properties.\n- Invoke planChecker to check each fragment that is runtime optimized.\n- Bypass fragment sanityCheck for TestCostCalculator"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwNjUyMjI2", "url": "https://github.com/prestodb/presto/pull/15000#pullrequestreview-470652226", "createdAt": "2020-08-19T16:48:02Z", "commit": {"oid": "322d99b40b550b4ecadb0ce08cb615e200c73005"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "322d99b40b550b4ecadb0ce08cb615e200c73005", "author": {"user": {"login": "pguofb", "name": "Peizhen Guo"}}, "url": "https://github.com/prestodb/presto/commit/322d99b40b550b4ecadb0ce08cb615e200c73005", "committedDate": "2020-08-19T16:46:08Z", "message": "Invoke runtime plan checker in SqlQueryScheduler\n\n- Add a ValidateStreamingJoins check rule to planChecker that\nspecifically investigate if the probe and build side of a join node\nsatisfies required streaming properties.\n- Invoke planChecker to check each fragment that is runtime optimized.\n- Bypass fragment sanityCheck for TestCostCalculator"}, "afterCommit": {"oid": "95c281672b22ac033e282d506da3561b0f2ebdb7", "author": {"user": {"login": "pguofb", "name": "Peizhen Guo"}}, "url": "https://github.com/prestodb/presto/commit/95c281672b22ac033e282d506da3561b0f2ebdb7", "committedDate": "2020-08-19T19:31:02Z", "message": "Invoke runtime plan checker in SqlQueryScheduler\n\n- Add a ValidateStreamingJoins check rule to planChecker that\nspecifically investigate if the probe and build side of a join node\nsatisfies required streaming properties.\n- Invoke planChecker to check each fragment that is runtime optimized.\n- Bypass fragment sanityCheck for TestCostCalculator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24d85d85f9033c845f03ef5eed9ba7b920642550", "author": {"user": {"login": "pguofb", "name": "Peizhen Guo"}}, "url": "https://github.com/prestodb/presto/commit/24d85d85f9033c845f03ef5eed9ba7b920642550", "committedDate": "2020-08-20T03:37:29Z", "message": "Refactor RuntimeReorderJoin use PropertyDerivation\n\n- Refactor the add/skip local exchange logic in RuntimeReorderJoins\nto use the same checking as AddLocalExchange, namely the\nStreamPropertyDervations.\n- Check if the probe side is valid when removing unnecessary local\nexchange.\n- Check if the build side needs an additional local exchange."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e4b845ab361e7c5cdb180d708083076af8fbfa6", "author": {"user": {"login": "pguofb", "name": "Peizhen Guo"}}, "url": "https://github.com/prestodb/presto/commit/5e4b845ab361e7c5cdb180d708083076af8fbfa6", "committedDate": "2020-08-20T03:37:29Z", "message": "Invoke runtime plan checker in SqlQueryScheduler\n\n- Add a ValidateStreamingJoins check rule to planChecker that\nspecifically investigate if the probe and build side of a join node\nsatisfies required streaming properties.\n- Invoke planChecker to check each fragment that is runtime optimized.\n- Bypass fragment sanityCheck for TestCostCalculator"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "95c281672b22ac033e282d506da3561b0f2ebdb7", "author": {"user": {"login": "pguofb", "name": "Peizhen Guo"}}, "url": "https://github.com/prestodb/presto/commit/95c281672b22ac033e282d506da3561b0f2ebdb7", "committedDate": "2020-08-19T19:31:02Z", "message": "Invoke runtime plan checker in SqlQueryScheduler\n\n- Add a ValidateStreamingJoins check rule to planChecker that\nspecifically investigate if the probe and build side of a join node\nsatisfies required streaming properties.\n- Invoke planChecker to check each fragment that is runtime optimized.\n- Bypass fragment sanityCheck for TestCostCalculator"}, "afterCommit": {"oid": "5e4b845ab361e7c5cdb180d708083076af8fbfa6", "author": {"user": {"login": "pguofb", "name": "Peizhen Guo"}}, "url": "https://github.com/prestodb/presto/commit/5e4b845ab361e7c5cdb180d708083076af8fbfa6", "committedDate": "2020-08-20T03:37:29Z", "message": "Invoke runtime plan checker in SqlQueryScheduler\n\n- Add a ValidateStreamingJoins check rule to planChecker that\nspecifically investigate if the probe and build side of a join node\nsatisfies required streaming properties.\n- Invoke planChecker to check each fragment that is runtime optimized.\n- Bypass fragment sanityCheck for TestCostCalculator"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1140, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}