{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4Mzk3ODY0", "number": 14137, "title": "Enable spatial join for spherical geography ST_Distance", "bodyText": "Previously, we did not extract a spatial join for any spherical\ncalculations.  This enables joins for ST_Distance(geog1, geog2) < r\nfor spherical geographies geog1 and geog2 for inner joins.\nCurrently ST_Distance for geographies only takes points.  Later\nwork can extend to other geographic objects, to outer-type joins,\nor to other functions (like ST_Contains).\n== RELEASE NOTES ==\n\nGeneral Changes\n* Enable spatial joins for `ST_Distance(p1, p2) < r` for spherical geography points `p1` and `p2`.", "createdAt": "2020-02-21T17:46:15Z", "url": "https://github.com/prestodb/presto/pull/14137", "merged": true, "mergeCommit": {"oid": "7af7880282938066fe28eb0f29b31110948c0355"}, "closed": true, "closedAt": "2020-03-25T14:52:03Z", "author": {"login": "jagill"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcHnCLrAFqTM2MzczMDAwNg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcQ5BUbAFqTM3OTc5MzYzOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNzMwMDA2", "url": "https://github.com/prestodb/presto/pull/14137#pullrequestreview-363730006", "createdAt": "2020-02-24T21:56:08Z", "commit": {"oid": "c67890a60af93419ad04fe647a2000f36c0d4aab"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMTo1NjowOFrOFtxVaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMDozMjoxMVrOFt0zDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUzODUzNg==", "bodyText": "Store this enum set as a constant", "url": "https://github.com/prestodb/presto/pull/14137#discussion_r383538536", "createdAt": "2020-02-24T21:56:08Z", "author": {"login": "aweisberg"}, "path": "presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/SphericalGeographyUtils.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.geospatial;\n+\n+import com.esri.core.geometry.Point;\n+import com.esri.core.geometry.ogc.OGCGeometry;\n+import com.facebook.presto.spi.PrestoException;\n+import com.google.common.base.Joiner;\n+\n+import java.util.EnumSet;\n+import java.util.Set;\n+\n+import static com.facebook.presto.geospatial.GeometryType.POINT;\n+import static com.facebook.presto.spi.StandardErrorCode.INVALID_FUNCTION_ARGUMENT;\n+import static java.lang.Math.atan2;\n+import static java.lang.Math.cos;\n+import static java.lang.Math.sin;\n+import static java.lang.Math.sqrt;\n+import static java.lang.Math.toRadians;\n+import static java.lang.String.format;\n+\n+public class SphericalGeographyUtils\n+{\n+    public static final double EARTH_RADIUS_KM = 6371.01;\n+    public static final double EARTH_RADIUS_M = EARTH_RADIUS_KM * 1000.0;\n+    private static final float MIN_LATITUDE = -90;\n+    private static final float MAX_LATITUDE = 90;\n+    private static final float MIN_LONGITUDE = -180;\n+    private static final float MAX_LONGITUDE = 180;\n+    private static final Joiner OR_JOINER = Joiner.on(\" or \");\n+\n+    private SphericalGeographyUtils() {}\n+\n+    public static void checkLatitude(double latitude)\n+    {\n+        if (Double.isNaN(latitude) || Double.isInfinite(latitude) || latitude < MIN_LATITUDE || latitude > MAX_LATITUDE) {\n+            throw new PrestoException(INVALID_FUNCTION_ARGUMENT, \"Latitude must be between -90 and 90\");\n+        }\n+    }\n+\n+    public static void checkLongitude(double longitude)\n+    {\n+        if (Double.isNaN(longitude) || Double.isInfinite(longitude) || longitude < MIN_LONGITUDE || longitude > MAX_LONGITUDE) {\n+            throw new PrestoException(INVALID_FUNCTION_ARGUMENT, \"Longitude must be between -180 and 180\");\n+        }\n+    }\n+\n+    public static Double sphericalDistance(OGCGeometry leftGeometry, OGCGeometry rightGeometry)\n+    {\n+        if (leftGeometry.isEmpty() || rightGeometry.isEmpty()) {\n+            return null;\n+        }\n+\n+        // TODO: support more SphericalGeography types.\n+        validateSphericalType(\"ST_Distance\", leftGeometry, EnumSet.of(POINT));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c67890a60af93419ad04fe647a2000f36c0d4aab"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU0MDI2OQ==", "bodyText": "This is\n\nFrom wikipedia? The Vincenty formula? Worth commenting.", "url": "https://github.com/prestodb/presto/pull/14137#discussion_r383540269", "createdAt": "2020-02-24T21:59:56Z", "author": {"login": "aweisberg"}, "path": "presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/SphericalGeographyUtils.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.geospatial;\n+\n+import com.esri.core.geometry.Point;\n+import com.esri.core.geometry.ogc.OGCGeometry;\n+import com.facebook.presto.spi.PrestoException;\n+import com.google.common.base.Joiner;\n+\n+import java.util.EnumSet;\n+import java.util.Set;\n+\n+import static com.facebook.presto.geospatial.GeometryType.POINT;\n+import static com.facebook.presto.spi.StandardErrorCode.INVALID_FUNCTION_ARGUMENT;\n+import static java.lang.Math.atan2;\n+import static java.lang.Math.cos;\n+import static java.lang.Math.sin;\n+import static java.lang.Math.sqrt;\n+import static java.lang.Math.toRadians;\n+import static java.lang.String.format;\n+\n+public class SphericalGeographyUtils\n+{\n+    public static final double EARTH_RADIUS_KM = 6371.01;\n+    public static final double EARTH_RADIUS_M = EARTH_RADIUS_KM * 1000.0;\n+    private static final float MIN_LATITUDE = -90;\n+    private static final float MAX_LATITUDE = 90;\n+    private static final float MIN_LONGITUDE = -180;\n+    private static final float MAX_LONGITUDE = 180;\n+    private static final Joiner OR_JOINER = Joiner.on(\" or \");\n+\n+    private SphericalGeographyUtils() {}\n+\n+    public static void checkLatitude(double latitude)\n+    {\n+        if (Double.isNaN(latitude) || Double.isInfinite(latitude) || latitude < MIN_LATITUDE || latitude > MAX_LATITUDE) {\n+            throw new PrestoException(INVALID_FUNCTION_ARGUMENT, \"Latitude must be between -90 and 90\");\n+        }\n+    }\n+\n+    public static void checkLongitude(double longitude)\n+    {\n+        if (Double.isNaN(longitude) || Double.isInfinite(longitude) || longitude < MIN_LONGITUDE || longitude > MAX_LONGITUDE) {\n+            throw new PrestoException(INVALID_FUNCTION_ARGUMENT, \"Longitude must be between -180 and 180\");\n+        }\n+    }\n+\n+    public static Double sphericalDistance(OGCGeometry leftGeometry, OGCGeometry rightGeometry)\n+    {\n+        if (leftGeometry.isEmpty() || rightGeometry.isEmpty()) {\n+            return null;\n+        }\n+\n+        // TODO: support more SphericalGeography types.\n+        validateSphericalType(\"ST_Distance\", leftGeometry, EnumSet.of(POINT));\n+        validateSphericalType(\"ST_Distance\", rightGeometry, EnumSet.of(POINT));\n+        Point leftPoint = (Point) leftGeometry.getEsriGeometry();\n+        Point rightPoint = (Point) rightGeometry.getEsriGeometry();\n+\n+        // greatCircleDistance returns distance in KM.\n+        return greatCircleDistance(leftPoint.getY(), leftPoint.getX(), rightPoint.getY(), rightPoint.getX()) * 1000;\n+    }\n+\n+    public static double greatCircleDistance(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c67890a60af93419ad04fe647a2000f36c0d4aab"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU0MTAyOA==", "bodyText": "Oh this is pulled from elsewhere, well you can ignore me then if you really want to.", "url": "https://github.com/prestodb/presto/pull/14137#discussion_r383541028", "createdAt": "2020-02-24T22:01:27Z", "author": {"login": "aweisberg"}, "path": "presto-geospatial-toolkit/src/main/java/com/facebook/presto/geospatial/SphericalGeographyUtils.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.geospatial;\n+\n+import com.esri.core.geometry.Point;\n+import com.esri.core.geometry.ogc.OGCGeometry;\n+import com.facebook.presto.spi.PrestoException;\n+import com.google.common.base.Joiner;\n+\n+import java.util.EnumSet;\n+import java.util.Set;\n+\n+import static com.facebook.presto.geospatial.GeometryType.POINT;\n+import static com.facebook.presto.spi.StandardErrorCode.INVALID_FUNCTION_ARGUMENT;\n+import static java.lang.Math.atan2;\n+import static java.lang.Math.cos;\n+import static java.lang.Math.sin;\n+import static java.lang.Math.sqrt;\n+import static java.lang.Math.toRadians;\n+import static java.lang.String.format;\n+\n+public class SphericalGeographyUtils\n+{\n+    public static final double EARTH_RADIUS_KM = 6371.01;\n+    public static final double EARTH_RADIUS_M = EARTH_RADIUS_KM * 1000.0;\n+    private static final float MIN_LATITUDE = -90;\n+    private static final float MAX_LATITUDE = 90;\n+    private static final float MIN_LONGITUDE = -180;\n+    private static final float MAX_LONGITUDE = 180;\n+    private static final Joiner OR_JOINER = Joiner.on(\" or \");\n+\n+    private SphericalGeographyUtils() {}\n+\n+    public static void checkLatitude(double latitude)\n+    {\n+        if (Double.isNaN(latitude) || Double.isInfinite(latitude) || latitude < MIN_LATITUDE || latitude > MAX_LATITUDE) {\n+            throw new PrestoException(INVALID_FUNCTION_ARGUMENT, \"Latitude must be between -90 and 90\");\n+        }\n+    }\n+\n+    public static void checkLongitude(double longitude)\n+    {\n+        if (Double.isNaN(longitude) || Double.isInfinite(longitude) || longitude < MIN_LONGITUDE || longitude > MAX_LONGITUDE) {\n+            throw new PrestoException(INVALID_FUNCTION_ARGUMENT, \"Longitude must be between -180 and 180\");\n+        }\n+    }\n+\n+    public static Double sphericalDistance(OGCGeometry leftGeometry, OGCGeometry rightGeometry)\n+    {\n+        if (leftGeometry.isEmpty() || rightGeometry.isEmpty()) {\n+            return null;\n+        }\n+\n+        // TODO: support more SphericalGeography types.\n+        validateSphericalType(\"ST_Distance\", leftGeometry, EnumSet.of(POINT));\n+        validateSphericalType(\"ST_Distance\", rightGeometry, EnumSet.of(POINT));\n+        Point leftPoint = (Point) leftGeometry.getEsriGeometry();\n+        Point rightPoint = (Point) rightGeometry.getEsriGeometry();\n+\n+        // greatCircleDistance returns distance in KM.\n+        return greatCircleDistance(leftPoint.getY(), leftPoint.getX(), rightPoint.getY(), rightPoint.getX()) * 1000;\n+    }\n+\n+    public static double greatCircleDistance(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU0MDI2OQ=="}, "originalCommit": {"oid": "c67890a60af93419ad04fe647a2000f36c0d4aab"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU2MDE0NA==", "bodyText": "oops, also test", "url": "https://github.com/prestodb/presto/pull/14137#discussion_r383560144", "createdAt": "2020-02-24T22:46:41Z", "author": {"login": "aweisberg"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java", "diffHunk": "@@ -1772,6 +1784,22 @@ else if (comparisonOperator.get() == OperatorType.LESS_THAN_OR_EQUAL) {\n             throw new UnsupportedOperationException(\"Unsupported spatial function: \" + functionName);\n         }\n \n+        private SpatialPredicate sphericalSpatialTest(QualifiedFunctionName functionName, Optional<OperatorType> comparisonOperator)\n+        {\n+            if (functionName.equals(ST_DISTANCE)) {\n+                if (comparisonOperator.get() == OperatorType.LESS_THAN) {\n+                    return (buildGeometry, probeGeometry, radius) -> sphericalDistance(buildGeometry, probeGeometry) < radius.getAsDouble();\n+                }\n+                else if (comparisonOperator.get() == OperatorType.LESS_THAN_OR_EQUAL) {\n+                    return (buildGeometry, probeGeometry, radius) -> buildGeometry.distance(probeGeometry) <= radius.getAsDouble();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c67890a60af93419ad04fe647a2000f36c0d4aab"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU2MzI1OA==", "bodyText": "Where is the partitioned test?", "url": "https://github.com/prestodb/presto/pull/14137#discussion_r383563258", "createdAt": "2020-02-24T22:54:28Z", "author": {"login": "aweisberg"}, "path": "presto-geospatial/src/test/java/com/facebook/presto/plugin/geospatial/TestSpatialJoinPlanning.java", "diffHunk": "@@ -311,6 +311,19 @@ public void testDistanceQuery()\n                                                         anyTree(values(ImmutableMap.of(\"b_lng\", 0, \"b_lat\", 1))))))))));\n     }\n \n+    @Test\n+    public void testSphericalDistanceQuery()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c67890a60af93419ad04fe647a2000f36c0d4aab"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU5NDg1OQ==", "bodyText": "If everything that follows is euclidian instead of spherical then stuff those into a sub-function the same as you did for sphericalSpatialTest.\nAlso do we care to handle mixed signatures here (some spherical, some not?). What is the right behavior there?", "url": "https://github.com/prestodb/presto/pull/14137#discussion_r383594859", "createdAt": "2020-02-25T00:30:47Z", "author": {"login": "aweisberg"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java", "diffHunk": "@@ -1726,7 +1731,14 @@ else if (probeSymbols.contains(new SymbolReference(secondVariable.getName())) &&\n \n         private SpatialPredicate spatialTest(CallExpression functionCall, boolean probeFirst, Optional<OperatorType> comparisonOperator)\n         {\n-            QualifiedFunctionName functionName = metadata.getFunctionManager().getFunctionMetadata(functionCall.getFunctionHandle()).getName();\n+            FunctionMetadata functionMetadata = metadata.getFunctionManager().getFunctionMetadata(functionCall.getFunctionHandle());\n+            QualifiedFunctionName functionName = functionMetadata.getName();\n+\n+            if (functionMetadata.getArgumentTypes().stream().allMatch((typeSignature)\n+                    -> typeSignature.equals(SPHERICAL_GEOGRAPHY_TYPE_SIGNATURE))) {\n+                return sphericalSpatialTest(functionName, comparisonOperator);\n+            }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c67890a60af93419ad04fe647a2000f36c0d4aab"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU5NTI3OA==", "bodyText": "Instead of repeating .get() pull it onto the stack and rename the parameter so it doesn't conflict? Don't feel strongly about it, but it feels a hair nicer.", "url": "https://github.com/prestodb/presto/pull/14137#discussion_r383595278", "createdAt": "2020-02-25T00:32:11Z", "author": {"login": "aweisberg"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java", "diffHunk": "@@ -1772,6 +1784,22 @@ else if (comparisonOperator.get() == OperatorType.LESS_THAN_OR_EQUAL) {\n             throw new UnsupportedOperationException(\"Unsupported spatial function: \" + functionName);\n         }\n \n+        private SpatialPredicate sphericalSpatialTest(QualifiedFunctionName functionName, Optional<OperatorType> comparisonOperator)\n+        {\n+            if (functionName.equals(ST_DISTANCE)) {\n+                if (comparisonOperator.get() == OperatorType.LESS_THAN) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c67890a60af93419ad04fe647a2000f36c0d4aab"}, "originalPosition": 56}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c67890a60af93419ad04fe647a2000f36c0d4aab", "author": {"user": {"login": "jagill", "name": "James Gill"}}, "url": "https://github.com/prestodb/presto/commit/c67890a60af93419ad04fe647a2000f36c0d4aab", "committedDate": "2020-02-21T17:39:44Z", "message": "Enable spatial join for spherical geography ST_Distance\n\nPreviously, we did not extract a spatial join for any spherical\ncalculations.  This enables joins for `ST_Distance(geog1, geog2) < r`\nfor spherical geographies `geog1` and `geog2` for inner joins.\n\nCurrently `ST_Distance` for geographies only takes points.  Later\nwork can extend to other geographic objects, to outer-type joins,\nor to other functions (like `ST_Contains`)."}, "afterCommit": {"oid": "b68cf528c3537326c4782fdf7217c04a8f80e777", "author": {"user": {"login": "jagill", "name": "James Gill"}}, "url": "https://github.com/prestodb/presto/commit/b68cf528c3537326c4782fdf7217c04a8f80e777", "committedDate": "2020-02-26T16:57:18Z", "message": "Enable spatial join for spherical geography ST_Distance\n\nPreviously, we did not extract a spatial join for any spherical\ncalculations.  This enables joins for `ST_Distance(geog1, geog2) < r`\nfor spherical geographies `geog1` and `geog2` for inner joins.\n\nCurrently `ST_Distance` for geographies only takes points.  Later\nwork can extend to other geographic objects, to outer-type joins,\nor to other functions (like `ST_Contains`)."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b68cf528c3537326c4782fdf7217c04a8f80e777", "author": {"user": {"login": "jagill", "name": "James Gill"}}, "url": "https://github.com/prestodb/presto/commit/b68cf528c3537326c4782fdf7217c04a8f80e777", "committedDate": "2020-02-26T16:57:18Z", "message": "Enable spatial join for spherical geography ST_Distance\n\nPreviously, we did not extract a spatial join for any spherical\ncalculations.  This enables joins for `ST_Distance(geog1, geog2) < r`\nfor spherical geographies `geog1` and `geog2` for inner joins.\n\nCurrently `ST_Distance` for geographies only takes points.  Later\nwork can extend to other geographic objects, to outer-type joins,\nor to other functions (like `ST_Contains`)."}, "afterCommit": {"oid": "d7dca11c07e4241b6ba6bf6d671bc0667afb090f", "author": {"user": {"login": "jagill", "name": "James Gill"}}, "url": "https://github.com/prestodb/presto/commit/d7dca11c07e4241b6ba6bf6d671bc0667afb090f", "committedDate": "2020-03-03T00:51:34Z", "message": "Extract spherical geography functions to SphericalGeoFunctions\n\n1. This reduces the size of GeoFunctions, and keeps spherical functions\nin one place.\n2. SqlTypes Geometry and SphericalGeography have the same Java type\n(Slice).  This makes it impossible to put functions that overload\nbetween Geometry and SphericalGeography in one class.  With\nSphericalGeoFunctions, we can overload the SqlTypes in two different\nclasses."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd80362be73861eec44e1dbcb60ac510c8b7e025", "author": {"user": {"login": "jagill", "name": "James Gill"}}, "url": "https://github.com/prestodb/presto/commit/cd80362be73861eec44e1dbcb60ac510c8b7e025", "committedDate": "2020-03-10T19:05:24Z", "message": "Extract some spherical geometry functions to helper class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0789f169c5f143db51de9a071dafc33cd89a228", "author": {"user": {"login": "jagill", "name": "James Gill"}}, "url": "https://github.com/prestodb/presto/commit/e0789f169c5f143db51de9a071dafc33cd89a228", "committedDate": "2020-03-10T23:33:10Z", "message": "Enable spatial join for spherical geography ST_Distance\n\nPreviously, we did not extract a spatial join for any spherical\ncalculations.  This enables joins for `ST_Distance(geog1, geog2) < r`\nfor spherical geographies `geog1` and `geog2` for inner joins.\n\nCurrently `ST_Distance` for geographies only takes points.  Later\nwork can extend to other geographic objects, to outer-type joins,\nor to other functions (like `ST_Contains`)."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1588c6913f7ab024e33723828020db3411fe1103", "author": {"user": {"login": "jagill", "name": "James Gill"}}, "url": "https://github.com/prestodb/presto/commit/1588c6913f7ab024e33723828020db3411fe1103", "committedDate": "2020-03-10T23:33:11Z", "message": "Extract spherical geography functions to SphericalGeoFunctions\n\n1. This reduces the size of GeoFunctions, and keeps spherical functions\nin one place.\n2. SqlTypes Geometry and SphericalGeography have the same Java type\n(Slice).  This makes it impossible to put functions that overload\nbetween Geometry and SphericalGeography in one class.  With\nSphericalGeoFunctions, we can overload the SqlTypes in two different\nclasses."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b79965b94f0659eb5806806d2959a1ffe37730d7", "author": {"user": {"login": "jagill", "name": "James Gill"}}, "url": "https://github.com/prestodb/presto/commit/b79965b94f0659eb5806806d2959a1ffe37730d7", "committedDate": "2020-03-10T23:33:11Z", "message": "Add partitioned spherical spatial joins"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d7dca11c07e4241b6ba6bf6d671bc0667afb090f", "author": {"user": {"login": "jagill", "name": "James Gill"}}, "url": "https://github.com/prestodb/presto/commit/d7dca11c07e4241b6ba6bf6d671bc0667afb090f", "committedDate": "2020-03-03T00:51:34Z", "message": "Extract spherical geography functions to SphericalGeoFunctions\n\n1. This reduces the size of GeoFunctions, and keeps spherical functions\nin one place.\n2. SqlTypes Geometry and SphericalGeography have the same Java type\n(Slice).  This makes it impossible to put functions that overload\nbetween Geometry and SphericalGeography in one class.  With\nSphericalGeoFunctions, we can overload the SqlTypes in two different\nclasses."}, "afterCommit": {"oid": "b79965b94f0659eb5806806d2959a1ffe37730d7", "author": {"user": {"login": "jagill", "name": "James Gill"}}, "url": "https://github.com/prestodb/presto/commit/b79965b94f0659eb5806806d2959a1ffe37730d7", "committedDate": "2020-03-10T23:33:11Z", "message": "Add partitioned spherical spatial joins"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2NDQ4MjYx", "url": "https://github.com/prestodb/presto/pull/14137#pullrequestreview-376448261", "createdAt": "2020-03-17T22:27:33Z", "commit": {"oid": "b79965b94f0659eb5806806d2959a1ffe37730d7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5NzkzNjM5", "url": "https://github.com/prestodb/presto/pull/14137#pullrequestreview-379793639", "createdAt": "2020-03-23T20:23:45Z", "commit": {"oid": "cd80362be73861eec44e1dbcb60ac510c8b7e025"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMDoyMzo0NVrOF6WtzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMDoyMzo0NVrOF6WtzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjczMzkwMQ==", "bodyText": "just curious why this todo didn't move.", "url": "https://github.com/prestodb/presto/pull/14137#discussion_r396733901", "createdAt": "2020-03-23T20:23:45Z", "author": {"login": "rschlussel"}, "path": "presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/GeoFunctions.java", "diffHunk": "@@ -1390,28 +1352,7 @@ private static boolean envelopes(Slice left, Slice right, EnvelopesPredicate pre\n     @SqlType(DOUBLE)\n     public static Double stSphericalDistance(@SqlType(SPHERICAL_GEOGRAPHY_TYPE_NAME) Slice left, @SqlType(SPHERICAL_GEOGRAPHY_TYPE_NAME) Slice right)\n     {\n-        OGCGeometry leftGeometry = EsriGeometrySerde.deserialize(left);\n-        OGCGeometry rightGeometry = EsriGeometrySerde.deserialize(right);\n-        if (leftGeometry.isEmpty() || rightGeometry.isEmpty()) {\n-            return null;\n-        }\n-\n-        // TODO: support more SphericalGeography types.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd80362be73861eec44e1dbcb60ac510c8b7e025"}, "originalPosition": 104}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2285, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}