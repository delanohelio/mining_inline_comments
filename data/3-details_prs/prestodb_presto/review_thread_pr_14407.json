{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1NTU5NDM0", "number": 14407, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwNDoyODoyMVrODzUR4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMToxMTo1OVrOD0-YpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MTM2MjI3OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveClientConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwNDoyODoyMVrOGHx-GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwNDoyODoyMVrOGHx-GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDgxMTkyOQ==", "bodyText": "nit getOrcCompressionCodec", "url": "https://github.com/prestodb/presto/pull/14407#discussion_r410811929", "createdAt": "2020-04-19T04:28:21Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveClientConfig.java", "diffHunk": "@@ -510,6 +511,18 @@ public HiveClientConfig setCompressionCodec(HiveCompressionCodec compressionCode\n         return this;\n     }\n \n+    public HiveCompressionCodec getORCCompressionCodec()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86fdd77fd4adcd7cad2d0041001f61b7bd5af781"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MTM3MTgxOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwNDozNToyNVrOGHyBuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwNTo0NjoxMVrOGHysyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDgxMjg1OQ==", "bodyText": "What other storage format cannot have zstd?", "url": "https://github.com/prestodb/presto/pull/14407#discussion_r410812859", "createdAt": "2020-04-19T04:35:25Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -1545,6 +1554,17 @@ public HiveInsertTableHandle beginInsert(ConnectorSession session, ConnectorTabl\n         return result;\n     }\n \n+    private HiveCompressionCodec getHiveCompressionCodec(ConnectorSession session, boolean isTemporaryTable, HiveStorageFormat storageFormat)\n+    {\n+        if (isTemporaryTable) {\n+            return getTemporaryTableCompressionCodec(session);\n+        }\n+        if (storageFormat.equals(ORC) || storageFormat.equals(DWRF)) {\n+            return getORCCompressionCodec(session);\n+        }\n+        return getCompressionCodec(session);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86fdd77fd4adcd7cad2d0041001f61b7bd5af781"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDgyMzg4MA==", "bodyText": "Anything other than ORC and DWRF.", "url": "https://github.com/prestodb/presto/pull/14407#discussion_r410823880", "createdAt": "2020-04-19T05:46:11Z", "author": {"login": "jainxrohit"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -1545,6 +1554,17 @@ public HiveInsertTableHandle beginInsert(ConnectorSession session, ConnectorTabl\n         return result;\n     }\n \n+    private HiveCompressionCodec getHiveCompressionCodec(ConnectorSession session, boolean isTemporaryTable, HiveStorageFormat storageFormat)\n+    {\n+        if (isTemporaryTable) {\n+            return getTemporaryTableCompressionCodec(session);\n+        }\n+        if (storageFormat.equals(ORC) || storageFormat.equals(DWRF)) {\n+            return getORCCompressionCodec(session);\n+        }\n+        return getCompressionCodec(session);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDgxMjg1OQ=="}, "originalCommit": {"oid": "86fdd77fd4adcd7cad2d0041001f61b7bd5af781"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MjMxOTc5OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNzo1OTo0NlrOGJRQPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMTo1NzozOFrOGKNj8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM3MzA1NA==", "bodyText": "use \"==\"", "url": "https://github.com/prestodb/presto/pull/14407#discussion_r412373054", "createdAt": "2020-04-21T17:59:46Z", "author": {"login": "bhhari"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -1545,6 +1554,17 @@ public HiveInsertTableHandle beginInsert(ConnectorSession session, ConnectorTabl\n         return result;\n     }\n \n+    private HiveCompressionCodec getHiveCompressionCodec(ConnectorSession session, boolean isTemporaryTable, HiveStorageFormat storageFormat)\n+    {\n+        if (isTemporaryTable) {\n+            return getTemporaryTableCompressionCodec(session);\n+        }\n+        if (storageFormat.equals(ORC) || storageFormat.equals(DWRF)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eedcc3268d877e509e49faaf54a78fc524fcb91b"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzMzMjkwOA==", "bodyText": "@jainxrohit Would you address this comment?", "url": "https://github.com/prestodb/presto/pull/14407#discussion_r413332908", "createdAt": "2020-04-22T21:06:20Z", "author": {"login": "mbasmanova"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -1545,6 +1554,17 @@ public HiveInsertTableHandle beginInsert(ConnectorSession session, ConnectorTabl\n         return result;\n     }\n \n+    private HiveCompressionCodec getHiveCompressionCodec(ConnectorSession session, boolean isTemporaryTable, HiveStorageFormat storageFormat)\n+    {\n+        if (isTemporaryTable) {\n+            return getTemporaryTableCompressionCodec(session);\n+        }\n+        if (storageFormat.equals(ORC) || storageFormat.equals(DWRF)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM3MzA1NA=="}, "originalCommit": {"oid": "eedcc3268d877e509e49faaf54a78fc524fcb91b"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM0ODIzOQ==", "bodyText": "@bhhari I don't have a strong preference on equals vs == for enums, even though both do the same job. I find equals method less distracting as its the one gets used for other types. Let me know if you have strong preference.", "url": "https://github.com/prestodb/presto/pull/14407#discussion_r413348239", "createdAt": "2020-04-22T21:32:46Z", "author": {"login": "jainxrohit"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -1545,6 +1554,17 @@ public HiveInsertTableHandle beginInsert(ConnectorSession session, ConnectorTabl\n         return result;\n     }\n \n+    private HiveCompressionCodec getHiveCompressionCodec(ConnectorSession session, boolean isTemporaryTable, HiveStorageFormat storageFormat)\n+    {\n+        if (isTemporaryTable) {\n+            return getTemporaryTableCompressionCodec(session);\n+        }\n+        if (storageFormat.equals(ORC) || storageFormat.equals(DWRF)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM3MzA1NA=="}, "originalCommit": {"oid": "eedcc3268d877e509e49faaf54a78fc524fcb91b"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM1ODMyOQ==", "bodyText": "@jainxrohit I think this should use == as other places in that file use that.", "url": "https://github.com/prestodb/presto/pull/14407#discussion_r413358329", "createdAt": "2020-04-22T21:52:01Z", "author": {"login": "mbasmanova"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -1545,6 +1554,17 @@ public HiveInsertTableHandle beginInsert(ConnectorSession session, ConnectorTabl\n         return result;\n     }\n \n+    private HiveCompressionCodec getHiveCompressionCodec(ConnectorSession session, boolean isTemporaryTable, HiveStorageFormat storageFormat)\n+    {\n+        if (isTemporaryTable) {\n+            return getTemporaryTableCompressionCodec(session);\n+        }\n+        if (storageFormat.equals(ORC) || storageFormat.equals(DWRF)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM3MzA1NA=="}, "originalCommit": {"oid": "eedcc3268d877e509e49faaf54a78fc524fcb91b"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM2MTEzNg==", "bodyText": "Ah, make sense, I will change it.", "url": "https://github.com/prestodb/presto/pull/14407#discussion_r413361136", "createdAt": "2020-04-22T21:57:38Z", "author": {"login": "jainxrohit"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -1545,6 +1554,17 @@ public HiveInsertTableHandle beginInsert(ConnectorSession session, ConnectorTabl\n         return result;\n     }\n \n+    private HiveCompressionCodec getHiveCompressionCodec(ConnectorSession session, boolean isTemporaryTable, HiveStorageFormat storageFormat)\n+    {\n+        if (isTemporaryTable) {\n+            return getTemporaryTableCompressionCodec(session);\n+        }\n+        if (storageFormat.equals(ORC) || storageFormat.equals(DWRF)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM3MzA1NA=="}, "originalCommit": {"oid": "eedcc3268d877e509e49faaf54a78fc524fcb91b"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NDU2ODUwOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveClientConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjowNjowOVrOGJk41w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjoxMToyMlrOGJlBYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY5NDc0Mw==", "bodyText": "I'm curious, why do we still set the default codec to be gzip for orc? As I saw from the note, ZSTD is better than GZIP in both compression ratio and CPU.", "url": "https://github.com/prestodb/presto/pull/14407#discussion_r412694743", "createdAt": "2020-04-22T06:06:09Z", "author": {"login": "yingsu00"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveClientConfig.java", "diffHunk": "@@ -85,6 +85,7 @@\n \n     private HiveStorageFormat hiveStorageFormat = ORC;\n     private HiveCompressionCodec compressionCodec = HiveCompressionCodec.GZIP;\n+    private HiveCompressionCodec orcCompressionCodec = HiveCompressionCodec.GZIP;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eedcc3268d877e509e49faaf54a78fc524fcb91b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY5NjkzMQ==", "bodyText": "@yingsu00 The plan is to roll out this change cluster by cluster. Thats why a config has been added in this PR.", "url": "https://github.com/prestodb/presto/pull/14407#discussion_r412696931", "createdAt": "2020-04-22T06:11:22Z", "author": {"login": "jainxrohit"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveClientConfig.java", "diffHunk": "@@ -85,6 +85,7 @@\n \n     private HiveStorageFormat hiveStorageFormat = ORC;\n     private HiveCompressionCodec compressionCodec = HiveCompressionCodec.GZIP;\n+    private HiveCompressionCodec orcCompressionCodec = HiveCompressionCodec.GZIP;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY5NDc0Mw=="}, "originalCommit": {"oid": "eedcc3268d877e509e49faaf54a78fc524fcb91b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2ODcyODA4OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveWritableTableHandle.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMTowNzoxNlrOGKL3tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMTowNzoxNlrOGKL3tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzMzMzQzMQ==", "bodyText": "nit: drop @return actualStorageFormat - it doesn't add any information", "url": "https://github.com/prestodb/presto/pull/14407#discussion_r413333431", "createdAt": "2020-04-22T21:07:16Z", "author": {"login": "mbasmanova"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveWritableTableHandle.java", "diffHunk": "@@ -120,18 +121,33 @@ public LocationHandle getLocationHandle()\n         return preferredOrderingColumns;\n     }\n \n+    /* This field is deprecated and clients should switch to {@link #getActualStorageFormat()}*/\n+    @Deprecated\n     @JsonProperty\n     public HiveStorageFormat getTableStorageFormat()\n     {\n         return tableStorageFormat;\n     }\n \n+    /* This field is deprecated and clients should switch to {@link #getActualStorageFormat()}*/\n+    @Deprecated\n     @JsonProperty\n     public HiveStorageFormat getPartitionStorageFormat()\n     {\n         return partitionStorageFormat;\n     }\n \n+    /**\n+     * The actualStorageFormat is the real storage format that gets used later in the pipeline.\n+     * It could be either representing tableStorageFormat, or partitionStorageFormat.\n+     * @return actualStorageFormat", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2de6b26b1156ecada97d803eefd3c33f20f3fc4"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2ODczMjIwOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveWritableTableHandle.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMTowODoxOVrOGKL6QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMTowODoxOVrOGKL6QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzMzNDA4MQ==", "bodyText": "nit: perhaps,  shorten to Use  {@link #getActualStorageFormat()}; @deprecated annotation already says \"This field is deprecated\"", "url": "https://github.com/prestodb/presto/pull/14407#discussion_r413334081", "createdAt": "2020-04-22T21:08:19Z", "author": {"login": "mbasmanova"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveWritableTableHandle.java", "diffHunk": "@@ -120,18 +121,33 @@ public LocationHandle getLocationHandle()\n         return preferredOrderingColumns;\n     }\n \n+    /* This field is deprecated and clients should switch to {@link #getActualStorageFormat()}*/\n+    @Deprecated\n     @JsonProperty\n     public HiveStorageFormat getTableStorageFormat()\n     {\n         return tableStorageFormat;\n     }\n \n+    /* This field is deprecated and clients should switch to {@link #getActualStorageFormat()}*/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2de6b26b1156ecada97d803eefd3c33f20f3fc4"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2ODczMjQ4OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveWritableTableHandle.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMTowODoyNlrOGKL6fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMTowODoyNlrOGKL6fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzMzNDE0MA==", "bodyText": "nit: perhaps, shorten to Use {@link #getActualStorageFormat()}; @deprecated annotation already says \"This field is deprecated\"", "url": "https://github.com/prestodb/presto/pull/14407#discussion_r413334140", "createdAt": "2020-04-22T21:08:26Z", "author": {"login": "mbasmanova"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveWritableTableHandle.java", "diffHunk": "@@ -120,18 +121,33 @@ public LocationHandle getLocationHandle()\n         return preferredOrderingColumns;\n     }\n \n+    /* This field is deprecated and clients should switch to {@link #getActualStorageFormat()}*/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2de6b26b1156ecada97d803eefd3c33f20f3fc4"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2ODc0NjYxOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMToxMjowMFrOGKMCxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwMDowOToxM1rOGKQ8Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzMzNjI2MQ==", "bodyText": "For the purpose of checking compatibility between StorageFormat and HiveCompressionCodec, you can use HiveCompressionCodec::isSupportedStorageFormat\n\n\nFor the purpose of getting ORC specific compression method,  you can use HiveCompressionCodec::orcCompressionKind\n\n\nI didn't quite understand why existing hive.compression-codec is not good enough.", "url": "https://github.com/prestodb/presto/pull/14407#discussion_r413336261", "createdAt": "2020-04-22T21:12:00Z", "author": {"login": "viczhang861"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -1548,6 +1557,17 @@ public HiveInsertTableHandle beginInsert(ConnectorSession session, ConnectorTabl\n         return result;\n     }\n \n+    private HiveCompressionCodec getHiveCompressionCodec(ConnectorSession session, boolean isTemporaryTable, HiveStorageFormat storageFormat)\n+    {\n+        if (isTemporaryTable) {\n+            return getTemporaryTableCompressionCodec(session);\n+        }\n+        if (storageFormat.equals(ORC) || storageFormat.equals(DWRF)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2de6b26b1156ecada97d803eefd3c33f20f3fc4"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM0OTk4MA==", "bodyText": "@viczhang861 We are already using copressionKind and isSupportedStorageFormat.\nThe reason to add an extra configuration was the unavailability of uniform support of all compression codec across all storage formats. The ZSTD compression codec is only available for orc and dwrf storage format.\nWe wanted to roll out the ZSTD configuration for orc/dwrf storage formats. And without a dedicated compression codec for these storage formats, we would have enabled this compression for all storage format. Which would have failed the pipeline as ZSTD is not supported for other storage formats.", "url": "https://github.com/prestodb/presto/pull/14407#discussion_r413349980", "createdAt": "2020-04-22T21:35:53Z", "author": {"login": "jainxrohit"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -1548,6 +1557,17 @@ public HiveInsertTableHandle beginInsert(ConnectorSession session, ConnectorTabl\n         return result;\n     }\n \n+    private HiveCompressionCodec getHiveCompressionCodec(ConnectorSession session, boolean isTemporaryTable, HiveStorageFormat storageFormat)\n+    {\n+        if (isTemporaryTable) {\n+            return getTemporaryTableCompressionCodec(session);\n+        }\n+        if (storageFormat.equals(ORC) || storageFormat.equals(DWRF)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzMzNjI2MQ=="}, "originalCommit": {"oid": "c2de6b26b1156ecada97d803eefd3c33f20f3fc4"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM2NDIzNg==", "bodyText": "I see, another way to do this is to add a default compression codec into HiveStorageFomat, to avoid configuring all combinations between storage format and compression.\nJust curious,  what are other storage formats in production that rely on hive.compression-codec  ?", "url": "https://github.com/prestodb/presto/pull/14407#discussion_r413364236", "createdAt": "2020-04-22T22:04:06Z", "author": {"login": "viczhang861"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -1548,6 +1557,17 @@ public HiveInsertTableHandle beginInsert(ConnectorSession session, ConnectorTabl\n         return result;\n     }\n \n+    private HiveCompressionCodec getHiveCompressionCodec(ConnectorSession session, boolean isTemporaryTable, HiveStorageFormat storageFormat)\n+    {\n+        if (isTemporaryTable) {\n+            return getTemporaryTableCompressionCodec(session);\n+        }\n+        if (storageFormat.equals(ORC) || storageFormat.equals(DWRF)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzMzNjI2MQ=="}, "originalCommit": {"oid": "c2de6b26b1156ecada97d803eefd3c33f20f3fc4"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQxNjQ5MQ==", "bodyText": "hive.compression-codec is used to configure compression for all storage format. I am not sure how many clients are using this config.\nHardcoding default in the HiveStorageFormat would not be flexible. Using the configurations we can rollout the change as we need.", "url": "https://github.com/prestodb/presto/pull/14407#discussion_r413416491", "createdAt": "2020-04-23T00:09:13Z", "author": {"login": "jainxrohit"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -1548,6 +1557,17 @@ public HiveInsertTableHandle beginInsert(ConnectorSession session, ConnectorTabl\n         return result;\n     }\n \n+    private HiveCompressionCodec getHiveCompressionCodec(ConnectorSession session, boolean isTemporaryTable, HiveStorageFormat storageFormat)\n+    {\n+        if (isTemporaryTable) {\n+            return getTemporaryTableCompressionCodec(session);\n+        }\n+        if (storageFormat.equals(ORC) || storageFormat.equals(DWRF)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzMzNjI2MQ=="}, "originalCommit": {"oid": "c2de6b26b1156ecada97d803eefd3c33f20f3fc4"}, "originalPosition": 77}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2802, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}