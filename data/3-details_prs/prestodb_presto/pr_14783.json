{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0NTY4NTg4", "number": 14783, "title": "Fix #14693: support TRUNCATE function for DOUBLE and REAL", "bodyText": "== RELEASE NOTES ==\nGeneral Changes\n\nThe solution is to fix issue #14693 by adding an enhancement to TRUNCATE function for allowing DOUBLE and REAL types.\nFollowing examples show how user may use this feature:\ntruncate(DOUBLE '1234.56', 1) -> The outcome of the evaluation is 1234.5\ntruncate(REAL '-12.333', -1) -> The outcome of the evaluation is -10.0\n\nNOTE: Neither does this patch change any behaviors of current mathemtical functionalities, nor is the existing workload being impacted. In addition, there is zero impact to data/workload migration.", "createdAt": "2020-07-06T06:28:26Z", "url": "https://github.com/prestodb/presto/pull/14783", "merged": true, "mergeCommit": {"oid": "f2965f681745b4054d2c62134f828cb9ffaec609"}, "closed": true, "closedAt": "2020-10-13T19:00:52Z", "author": {"login": "fgwang7w"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABczYDbQgFqTQ0NjAzNDQ1NQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdSNWB5AFqTUwNzc0MjEzNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MDM0NDU1", "url": "https://github.com/prestodb/presto/pull/14783#pullrequestreview-446034455", "createdAt": "2020-07-09T23:33:45Z", "commit": {"oid": "7ea31d849cf1e9143ac21cbb108c357e98a07964"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMzozMzo0NVrOGvlKag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMzo1MDo0OVrOGvlexg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0NTEzMA==", "bodyText": "I would put this into a new test case, let's call it testTruncateWithPrecision", "url": "https://github.com/prestodb/presto/pull/14783#discussion_r452545130", "createdAt": "2020-07-09T23:33:45Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/test/java/com/facebook/presto/operator/scalar/TestMathFunctions.java", "diffHunk": "@@ -268,6 +268,27 @@ public void testTruncate()\n         assertFunction(\"truncate(DECIMAL '1234567890123456789012.999')\", createDecimalType(22, 0), SqlDecimal.of(\"1234567890123456789012\"));\n         assertFunction(\"truncate(DECIMAL '-1234567890123456789012.999')\", createDecimalType(22, 0), SqlDecimal.of(\"-1234567890123456789012\"));\n \n+        // TRUNCATE DOUBLE -> DOUBLE", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea31d849cf1e9143ac21cbb108c357e98a07964"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0NTUwOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return floatToRawIntBits(new BigDecimal(Float.toString(numBitsToFloats)).setScale((int) decimals, BigDecimal.ROUND_DOWN).floatValue());\n          \n          \n            \n                    return floatToRawIntBits(new BigDecimal(numBitsToFloats).setScale((int) decimals, BigDecimal.ROUND_DOWN).floatValue());\n          \n      \n    \n    \n  \n\nAny reason why this had to be converted to a string?  The test cases pass with the above.", "url": "https://github.com/prestodb/presto/pull/14783#discussion_r452545509", "createdAt": "2020-07-09T23:34:58Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/MathFunctions.java", "diffHunk": "@@ -327,6 +331,69 @@ public static long truncate(@SqlType(StandardTypes.REAL) long num)\n         return floatToRawIntBits((float) (Math.signum(numInFloat) * Math.floor(Math.abs(numInFloat))));\n     }\n \n+    @Description(\"truncate to double by dropping digits after decimal point\")\n+    @ScalarFunction\n+    @SqlType(StandardTypes.DOUBLE)\n+    public static double truncate(@SqlType(StandardTypes.DOUBLE) double num, @SqlType(StandardTypes.BIGINT) long decimals)\n+    {\n+        if (Double.isNaN(num) || Double.isInfinite(num)) {\n+            // compatible with truncate(DOUBLE)\n+            return num;\n+        }\n+        if (decimals == 0) {\n+            if (num >= 0) {\n+                return Math.floor(num);\n+            }\n+            else {\n+                return Math.ceil(num);\n+            }\n+        }\n+\n+        if (decimals < 0) {\n+            if (decimals < -NUMBER_LENGTH) {\n+                decimals = -NUMBER_LENGTH;\n+            }\n+        }\n+        else {\n+            if (decimals >= NUMBER_LENGTH) {\n+                decimals = NUMBER_LENGTH;\n+            }\n+        }\n+        return BigDecimal.valueOf(num).setScale((int) decimals, BigDecimal.ROUND_DOWN).doubleValue();\n+    }\n+\n+    @Description(\"truncate to float by dropping digits after decimal point\")\n+    @ScalarFunction\n+    @SqlType(StandardTypes.REAL)\n+    public static long truncate(@SqlType(StandardTypes.REAL) long num, @SqlType(StandardTypes.BIGINT) long decimals)\n+    {\n+        float numBitsToFloats = intBitsToFloat((int) num);\n+        if (Float.isNaN(numBitsToFloats) || Float.isInfinite(numBitsToFloats)) {\n+            // compatible with truncate(REAL)\n+            return num;\n+        }\n+        if (decimals == 0) {\n+            if (numBitsToFloats >= 0) {\n+                return floatToRawIntBits((float) Math.floor(numBitsToFloats));\n+            }\n+            else {\n+                return floatToRawIntBits((float) Math.ceil(numBitsToFloats));\n+            }\n+        }\n+\n+        if (decimals < 0) {\n+            if (decimals < -NUMBER_LENGTH) {\n+                decimals = -NUMBER_LENGTH;\n+            }\n+        }\n+        else {\n+            if (decimals >= NUMBER_LENGTH) {\n+                decimals = NUMBER_LENGTH;\n+            }\n+        }\n+        return floatToRawIntBits(new BigDecimal(Float.toString(numBitsToFloats)).setScale((int) decimals, BigDecimal.ROUND_DOWN).floatValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea31d849cf1e9143ac21cbb108c357e98a07964"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0NjY2MQ==", "bodyText": "How about MAX_DECIMAL_PLACES?", "url": "https://github.com/prestodb/presto/pull/14783#discussion_r452546661", "createdAt": "2020-07-09T23:38:25Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/MathFunctions.java", "diffHunk": "@@ -66,6 +67,9 @@\n {\n     public static final SqlScalarFunction DECIMAL_MOD_FUNCTION = decimalModFunction();\n \n+    // double's precision not exceed this limit\n+    private static final int NUMBER_LENGTH = 400;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea31d849cf1e9143ac21cbb108c357e98a07964"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0OTMyMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (decimals < 0) {\n          \n          \n            \n                        if (decimals < -NUMBER_LENGTH) {\n          \n          \n            \n                            decimals = -NUMBER_LENGTH;\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                    else {\n          \n          \n            \n                        if (decimals >= NUMBER_LENGTH) {\n          \n          \n            \n                            decimals = NUMBER_LENGTH;\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                    decimals = Math.max(Math.min(decimals, NUMBER_LENGTH), -NUMBER_LENGTH);", "url": "https://github.com/prestodb/presto/pull/14783#discussion_r452549322", "createdAt": "2020-07-09T23:47:25Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/MathFunctions.java", "diffHunk": "@@ -327,6 +331,69 @@ public static long truncate(@SqlType(StandardTypes.REAL) long num)\n         return floatToRawIntBits((float) (Math.signum(numInFloat) * Math.floor(Math.abs(numInFloat))));\n     }\n \n+    @Description(\"truncate to double by dropping digits after decimal point\")\n+    @ScalarFunction\n+    @SqlType(StandardTypes.DOUBLE)\n+    public static double truncate(@SqlType(StandardTypes.DOUBLE) double num, @SqlType(StandardTypes.BIGINT) long decimals)\n+    {\n+        if (Double.isNaN(num) || Double.isInfinite(num)) {\n+            // compatible with truncate(DOUBLE)\n+            return num;\n+        }\n+        if (decimals == 0) {\n+            if (num >= 0) {\n+                return Math.floor(num);\n+            }\n+            else {\n+                return Math.ceil(num);\n+            }\n+        }\n+\n+        if (decimals < 0) {\n+            if (decimals < -NUMBER_LENGTH) {\n+                decimals = -NUMBER_LENGTH;\n+            }\n+        }\n+        else {\n+            if (decimals >= NUMBER_LENGTH) {\n+                decimals = NUMBER_LENGTH;\n+            }\n+        }\n+        return BigDecimal.valueOf(num).setScale((int) decimals, BigDecimal.ROUND_DOWN).doubleValue();\n+    }\n+\n+    @Description(\"truncate to float by dropping digits after decimal point\")\n+    @ScalarFunction\n+    @SqlType(StandardTypes.REAL)\n+    public static long truncate(@SqlType(StandardTypes.REAL) long num, @SqlType(StandardTypes.BIGINT) long decimals)\n+    {\n+        float numBitsToFloats = intBitsToFloat((int) num);\n+        if (Float.isNaN(numBitsToFloats) || Float.isInfinite(numBitsToFloats)) {\n+            // compatible with truncate(REAL)\n+            return num;\n+        }\n+        if (decimals == 0) {\n+            if (numBitsToFloats >= 0) {\n+                return floatToRawIntBits((float) Math.floor(numBitsToFloats));\n+            }\n+            else {\n+                return floatToRawIntBits((float) Math.ceil(numBitsToFloats));\n+            }\n+        }\n+\n+        if (decimals < 0) {\n+            if (decimals < -NUMBER_LENGTH) {\n+                decimals = -NUMBER_LENGTH;\n+            }\n+        }\n+        else {\n+            if (decimals >= NUMBER_LENGTH) {\n+                decimals = NUMBER_LENGTH;\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea31d849cf1e9143ac21cbb108c357e98a07964"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0OTQ0Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (decimals < 0) {\n          \n          \n            \n                        if (decimals < -NUMBER_LENGTH) {\n          \n          \n            \n                            decimals = -NUMBER_LENGTH;\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                    else {\n          \n          \n            \n                        if (decimals >= NUMBER_LENGTH) {\n          \n          \n            \n                            decimals = NUMBER_LENGTH;\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                    decimals = Math.max(Math.min(decimals, NUMBER_LENGTH), -NUMBER_LENGTH);", "url": "https://github.com/prestodb/presto/pull/14783#discussion_r452549443", "createdAt": "2020-07-09T23:47:49Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/MathFunctions.java", "diffHunk": "@@ -327,6 +331,69 @@ public static long truncate(@SqlType(StandardTypes.REAL) long num)\n         return floatToRawIntBits((float) (Math.signum(numInFloat) * Math.floor(Math.abs(numInFloat))));\n     }\n \n+    @Description(\"truncate to double by dropping digits after decimal point\")\n+    @ScalarFunction\n+    @SqlType(StandardTypes.DOUBLE)\n+    public static double truncate(@SqlType(StandardTypes.DOUBLE) double num, @SqlType(StandardTypes.BIGINT) long decimals)\n+    {\n+        if (Double.isNaN(num) || Double.isInfinite(num)) {\n+            // compatible with truncate(DOUBLE)\n+            return num;\n+        }\n+        if (decimals == 0) {\n+            if (num >= 0) {\n+                return Math.floor(num);\n+            }\n+            else {\n+                return Math.ceil(num);\n+            }\n+        }\n+\n+        if (decimals < 0) {\n+            if (decimals < -NUMBER_LENGTH) {\n+                decimals = -NUMBER_LENGTH;\n+            }\n+        }\n+        else {\n+            if (decimals >= NUMBER_LENGTH) {\n+                decimals = NUMBER_LENGTH;\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea31d849cf1e9143ac21cbb108c357e98a07964"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0OTY4Ng==", "bodyText": "Let's add some test cases for infinity and NaN.", "url": "https://github.com/prestodb/presto/pull/14783#discussion_r452549686", "createdAt": "2020-07-09T23:48:43Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/test/java/com/facebook/presto/operator/scalar/TestMathFunctions.java", "diffHunk": "@@ -268,6 +268,27 @@ public void testTruncate()\n         assertFunction(\"truncate(DECIMAL '1234567890123456789012.999')\", createDecimalType(22, 0), SqlDecimal.of(\"1234567890123456789012\"));\n         assertFunction(\"truncate(DECIMAL '-1234567890123456789012.999')\", createDecimalType(22, 0), SqlDecimal.of(\"-1234567890123456789012\"));\n \n+        // TRUNCATE DOUBLE -> DOUBLE\n+        assertFunction(\"truncate(nan(),-1)\", DOUBLE, Double.NaN);\n+        assertFunction(\"truncate(DOUBLE '17.1', -1)\", DOUBLE, 10.0);\n+        assertFunction(\"truncate(DOUBLE '1234.56', 1)\", DOUBLE, 1234.5);\n+        assertFunction(\"truncate(DOUBLE '1234.56', 0)\", DOUBLE, 1234.0);\n+        assertFunction(\"truncate(DOUBLE '-1234.56', 0)\", DOUBLE, -1234.0);\n+        assertFunction(\"truncate(DOUBLE '-1234.56', -500)\", DOUBLE, 0.0);\n+        assertFunction(\"truncate(DOUBLE '1234.567', 2)\", DOUBLE, 1234.56);\n+        assertFunction(\"truncate(DOUBLE '1234.567', 2)\", DOUBLE, 1234.56);\n+        assertFunction(\"truncate(DOUBLE '\" + Double.MAX_VALUE + \"', -408)\", DOUBLE, 0.0);\n+        assertFunction(\"truncate(DOUBLE '\" + -Double.MAX_VALUE / 10 + \"', 408)\", DOUBLE, -Double.MAX_VALUE / 10);\n+        assertFunction(\"truncate(DOUBLE '\" + (double) Long.MAX_VALUE + \"', -15)\", DOUBLE, 9.223E18);\n+\n+        // TRUNCATE REAL -> REAL\n+        assertFunction(\"truncate(REAL '12.333', 0)\", REAL, 12.0f);\n+        assertFunction(\"truncate(REAL '-12.333', 0)\", REAL, -12.0f);\n+        assertFunction(\"truncate(REAL '12.333', -500)\", REAL, 0.0f);\n+        assertFunction(\"truncate(REAL '3.40287e37', -35)\", REAL, 3.4E37f);\n+        assertFunction(\"truncate(REAL '3.40287e37', -488)\", REAL, 0.0f);\n+        assertFunction(\"truncate(REAL '\" + (float) Long.MAX_VALUE + \"', -15)\", REAL, 9.223E18f);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea31d849cf1e9143ac21cbb108c357e98a07964"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU1MDM0Mg==", "bodyText": "We should probably change the type to be INTEGER since we're downcasting to int below.  Actually, why not make this TINYINT (max range is [-127, 128])?  If that's not sufficient precision, we could make it SMALLINT (range > 400) and safely downcast.", "url": "https://github.com/prestodb/presto/pull/14783#discussion_r452550342", "createdAt": "2020-07-09T23:50:49Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/MathFunctions.java", "diffHunk": "@@ -327,6 +331,69 @@ public static long truncate(@SqlType(StandardTypes.REAL) long num)\n         return floatToRawIntBits((float) (Math.signum(numInFloat) * Math.floor(Math.abs(numInFloat))));\n     }\n \n+    @Description(\"truncate to double by dropping digits after decimal point\")\n+    @ScalarFunction\n+    @SqlType(StandardTypes.DOUBLE)\n+    public static double truncate(@SqlType(StandardTypes.DOUBLE) double num, @SqlType(StandardTypes.BIGINT) long decimals)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea31d849cf1e9143ac21cbb108c357e98a07964"}, "originalPosition": 25}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7ea31d849cf1e9143ac21cbb108c357e98a07964", "author": {"user": {"login": "fgwang7w", "name": "countryman4687"}}, "url": "https://github.com/prestodb/presto/commit/7ea31d849cf1e9143ac21cbb108c357e98a07964", "committedDate": "2020-07-06T06:05:21Z", "message": "Fix #14693: support TRUNCATE function for DOUBLE and REAL"}, "afterCommit": {"oid": "70e0638a29d87c5560f2085435a808602bdec307", "author": {"user": {"login": "fgwang7w", "name": "countryman4687"}}, "url": "https://github.com/prestodb/presto/commit/70e0638a29d87c5560f2085435a808602bdec307", "committedDate": "2020-07-11T21:26:33Z", "message": "Fix #14693: support TRUNCATE function for DOUBLE and REAL"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "70e0638a29d87c5560f2085435a808602bdec307", "author": {"user": {"login": "fgwang7w", "name": "countryman4687"}}, "url": "https://github.com/prestodb/presto/commit/70e0638a29d87c5560f2085435a808602bdec307", "committedDate": "2020-07-11T21:26:33Z", "message": "Fix #14693: support TRUNCATE function for DOUBLE and REAL"}, "afterCommit": {"oid": "1219318254ff21811d507497a4d811085087f028", "author": {"user": {"login": "fgwang7w", "name": "countryman4687"}}, "url": "https://github.com/prestodb/presto/commit/1219318254ff21811d507497a4d811085087f028", "committedDate": "2020-07-12T01:45:50Z", "message": "Fix #14693: support TRUNCATE function for DOUBLE and REAL"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4MzIxOTkz", "url": "https://github.com/prestodb/presto/pull/14783#pullrequestreview-448321993", "createdAt": "2020-07-14T17:36:52Z", "commit": {"oid": "1219318254ff21811d507497a4d811085087f028"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1219318254ff21811d507497a4d811085087f028", "author": {"user": {"login": "fgwang7w", "name": "countryman4687"}}, "url": "https://github.com/prestodb/presto/commit/1219318254ff21811d507497a4d811085087f028", "committedDate": "2020-07-12T01:45:50Z", "message": "Fix #14693: support TRUNCATE function for DOUBLE and REAL"}, "afterCommit": {"oid": "d9d578c198d6b5cdefbd7a64661924e8b5ba031f", "author": {"user": {"login": "fgwang7w", "name": "countryman4687"}}, "url": "https://github.com/prestodb/presto/commit/d9d578c198d6b5cdefbd7a64661924e8b5ba031f", "committedDate": "2020-07-21T06:55:54Z", "message": "Add support for TRUNCATE function for DOUBLE and REAL"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzMzYwNTM4", "url": "https://github.com/prestodb/presto/pull/14783#pullrequestreview-453360538", "createdAt": "2020-07-22T14:15:21Z", "commit": {"oid": "d9d578c198d6b5cdefbd7a64661924e8b5ba031f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3OTA5ODM2", "url": "https://github.com/prestodb/presto/pull/14783#pullrequestreview-457909836", "createdAt": "2020-07-29T21:26:08Z", "commit": {"oid": "d9d578c198d6b5cdefbd7a64661924e8b5ba031f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMToyNjowOFrOG5KzYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMToyNjowOFrOG5KzYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU5OTAxMA==", "bodyText": "If there's a limit for decimal point, I think we should be explicit about it and mention in description and in documentation. We should probably also fail the query if an out-of-range number is given, rather than silently changing the behavior.", "url": "https://github.com/prestodb/presto/pull/14783#discussion_r462599010", "createdAt": "2020-07-29T21:26:08Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/MathFunctions.java", "diffHunk": "@@ -327,6 +331,51 @@ public static long truncate(@SqlType(StandardTypes.REAL) long num)\n         return floatToRawIntBits((float) (Math.signum(numInFloat) * Math.floor(Math.abs(numInFloat))));\n     }\n \n+    @Description(\"truncate to double by dropping digits after decimal point\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9d578c198d6b5cdefbd7a64661924e8b5ba031f"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3OTIzMTUx", "url": "https://github.com/prestodb/presto/pull/14783#pullrequestreview-457923151", "createdAt": "2020-07-29T21:49:56Z", "commit": {"oid": "d9d578c198d6b5cdefbd7a64661924e8b5ba031f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d9d578c198d6b5cdefbd7a64661924e8b5ba031f", "author": {"user": {"login": "fgwang7w", "name": "countryman4687"}}, "url": "https://github.com/prestodb/presto/commit/d9d578c198d6b5cdefbd7a64661924e8b5ba031f", "committedDate": "2020-07-21T06:55:54Z", "message": "Add support for TRUNCATE function for DOUBLE and REAL"}, "afterCommit": {"oid": "58587329ef56c524df3705e945b7e1243642ff7d", "author": {"user": {"login": "fgwang7w", "name": "countryman4687"}}, "url": "https://github.com/prestodb/presto/commit/58587329ef56c524df3705e945b7e1243642ff7d", "committedDate": "2020-08-20T02:21:00Z", "message": "Add support for TRUNCATE function for DOUBLE and REAL"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "58587329ef56c524df3705e945b7e1243642ff7d", "author": {"user": {"login": "fgwang7w", "name": "countryman4687"}}, "url": "https://github.com/prestodb/presto/commit/58587329ef56c524df3705e945b7e1243642ff7d", "committedDate": "2020-08-20T02:21:00Z", "message": "Add support for TRUNCATE function for DOUBLE and REAL"}, "afterCommit": {"oid": "4685a6cec5d9f260ace304cd197ecae347bf3a5e", "author": {"user": {"login": "fgwang7w", "name": "countryman4687"}}, "url": "https://github.com/prestodb/presto/commit/4685a6cec5d9f260ace304cd197ecae347bf3a5e", "committedDate": "2020-08-20T02:42:54Z", "message": "Add support for TRUNCATE function for DOUBLE and REAL"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4685a6cec5d9f260ace304cd197ecae347bf3a5e", "author": {"user": {"login": "fgwang7w", "name": "countryman4687"}}, "url": "https://github.com/prestodb/presto/commit/4685a6cec5d9f260ace304cd197ecae347bf3a5e", "committedDate": "2020-08-20T02:42:54Z", "message": "Add support for TRUNCATE function for DOUBLE and REAL"}, "afterCommit": {"oid": "900b1044c48650c9c9417b5ee35b68c85220dd53", "author": {"user": {"login": "fgwang7w", "name": "countryman4687"}}, "url": "https://github.com/prestodb/presto/commit/900b1044c48650c9c9417b5ee35b68c85220dd53", "committedDate": "2020-08-20T02:47:04Z", "message": "Add support for TRUNCATE function for DOUBLE and REAL"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae4dd656a1ba4ed3ab3dc9df314b9271b0fe2eab", "author": {"user": {"login": "fgwang7w", "name": "countryman4687"}}, "url": "https://github.com/prestodb/presto/commit/ae4dd656a1ba4ed3ab3dc9df314b9271b0fe2eab", "committedDate": "2020-08-20T02:56:53Z", "message": "Add support for TRUNCATE function for DOUBLE and REAL"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "900b1044c48650c9c9417b5ee35b68c85220dd53", "author": {"user": {"login": "fgwang7w", "name": "countryman4687"}}, "url": "https://github.com/prestodb/presto/commit/900b1044c48650c9c9417b5ee35b68c85220dd53", "committedDate": "2020-08-20T02:47:04Z", "message": "Add support for TRUNCATE function for DOUBLE and REAL"}, "afterCommit": {"oid": "ae4dd656a1ba4ed3ab3dc9df314b9271b0fe2eab", "author": {"user": {"login": "fgwang7w", "name": "countryman4687"}}, "url": "https://github.com/prestodb/presto/commit/ae4dd656a1ba4ed3ab3dc9df314b9271b0fe2eab", "committedDate": "2020-08-20T02:56:53Z", "message": "Add support for TRUNCATE function for DOUBLE and REAL"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3NzQyMTM2", "url": "https://github.com/prestodb/presto/pull/14783#pullrequestreview-507742136", "createdAt": "2020-10-13T19:00:42Z", "commit": {"oid": "ae4dd656a1ba4ed3ab3dc9df314b9271b0fe2eab"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1191, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}