{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYwNDk1MzMx", "number": 14941, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMDo0OToxMFrOEUMPig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQyMzoxMzo1MVrOEUU9Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NjA3NTYyOnYy", "diffSide": "RIGHT", "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/framework/VerificationContext.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMDo0OToxMFrOG6V4_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMzozMzowMVrOG6ZYuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgyOTI0NA==", "bodyText": "Just double check: is this the original query id? :)", "url": "https://github.com/prestodb/presto/pull/14941#discussion_r463829244", "createdAt": "2020-07-31T20:49:10Z", "author": {"login": "wenleix"}, "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/framework/VerificationContext.java", "diffHunk": "@@ -20,26 +20,50 @@\n import java.util.Set;\n \n import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.util.Objects.requireNonNull;\n \n public class VerificationContext\n {\n+    private final String sourceQueryName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29ce44911c19d0e281032b191d54bc4590ba7690"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg4NjUyMA==", "bodyText": "Theoretically this could be anything provided in the xdb, but yes it is the original query ID for FB use cases.", "url": "https://github.com/prestodb/presto/pull/14941#discussion_r463886520", "createdAt": "2020-07-31T23:33:01Z", "author": {"login": "caithagoras"}, "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/framework/VerificationContext.java", "diffHunk": "@@ -20,26 +20,50 @@\n import java.util.Set;\n \n import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.util.Objects.requireNonNull;\n \n public class VerificationContext\n {\n+    private final String sourceQueryName;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgyOTI0NA=="}, "originalCommit": {"oid": "29ce44911c19d0e281032b191d54bc4590ba7690"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NzUwMzU4OnYy", "diffSide": "RIGHT", "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/prestoaction/ClientInfo.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQyMzoxMzo1MVrOG6g5PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxODo0NzoyNFrOG7Ez2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAwOTUzMg==", "bodyText": "A common pattern in Presto code base is to have a private static final OBJECT_MAPPER in this class \ud83d\ude03  . But either way is fine :)", "url": "https://github.com/prestodb/presto/pull/14941#discussion_r464009532", "createdAt": "2020-08-01T23:13:51Z", "author": {"login": "wenleix"}, "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/prestoaction/ClientInfo.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.verifier.prestoaction;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class ClientInfo\n+{\n+    private static final String CLIENT_INFO_TYPE = \"VERIFIER\";\n+\n+    private final String testId;\n+    private final String sourceQueryName;\n+    private final String suite;\n+\n+    public ClientInfo(String testId, String sourceQueryName, String suite)\n+    {\n+        this.testId = requireNonNull(testId, \"testId is null\");\n+        this.sourceQueryName = requireNonNull(sourceQueryName, \"sourceQueryName is null\");\n+        this.suite = requireNonNull(suite, \"suite is null\");\n+    }\n+\n+    @JsonProperty\n+    public String getType()\n+    {\n+        return CLIENT_INFO_TYPE;\n+    }\n+\n+    @JsonProperty\n+    public String getTestId()\n+    {\n+        return testId;\n+    }\n+\n+    @JsonProperty\n+    public String getSourceQueryName()\n+    {\n+        return sourceQueryName;\n+    }\n+\n+    @JsonProperty\n+    public String getSuite()\n+    {\n+        return suite;\n+    }\n+\n+    public String serialize() {\n+        try {\n+            return new ObjectMapper().writeValueAsString(this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f77ea58fb927ccda4b455a3fe9db1e185b26bfe5"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU5Nzk3OA==", "bodyText": "Sorry, I missed this comment, will piggy-back into a future PR.", "url": "https://github.com/prestodb/presto/pull/14941#discussion_r464597978", "createdAt": "2020-08-03T18:47:24Z", "author": {"login": "caithagoras"}, "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/prestoaction/ClientInfo.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.verifier.prestoaction;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class ClientInfo\n+{\n+    private static final String CLIENT_INFO_TYPE = \"VERIFIER\";\n+\n+    private final String testId;\n+    private final String sourceQueryName;\n+    private final String suite;\n+\n+    public ClientInfo(String testId, String sourceQueryName, String suite)\n+    {\n+        this.testId = requireNonNull(testId, \"testId is null\");\n+        this.sourceQueryName = requireNonNull(sourceQueryName, \"sourceQueryName is null\");\n+        this.suite = requireNonNull(suite, \"suite is null\");\n+    }\n+\n+    @JsonProperty\n+    public String getType()\n+    {\n+        return CLIENT_INFO_TYPE;\n+    }\n+\n+    @JsonProperty\n+    public String getTestId()\n+    {\n+        return testId;\n+    }\n+\n+    @JsonProperty\n+    public String getSourceQueryName()\n+    {\n+        return sourceQueryName;\n+    }\n+\n+    @JsonProperty\n+    public String getSuite()\n+    {\n+        return suite;\n+    }\n+\n+    public String serialize() {\n+        try {\n+            return new ObjectMapper().writeValueAsString(this);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAwOTUzMg=="}, "originalCommit": {"oid": "f77ea58fb927ccda4b455a3fe9db1e185b26bfe5"}, "originalPosition": 63}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2225, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}