{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4MTY3MTkw", "number": 15031, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMDo0OToxNlrOEYnN2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMTo1NTo0MVrOEYoKRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MjQzODAwOnYy", "diffSide": "RIGHT", "path": "presto-spark-base/src/main/java/com/facebook/presto/spark/planner/PrestoSparkRddFactory.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMDo0OToxNlrOHBC6iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMDowMjoxNlrOHCj5aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg1ODM3OQ==", "bodyText": "Can we pass in the splitSource for the given table scan node and make sure it's closed before leave the method?", "url": "https://github.com/prestodb/presto/pull/15031#discussion_r470858379", "createdAt": "2020-08-14T20:49:16Z", "author": {"login": "wenleix"}, "path": "presto-spark-base/src/main/java/com/facebook/presto/spark/planner/PrestoSparkRddFactory.java", "diffHunk": "@@ -364,18 +376,19 @@ private PrestoSparkTaskSourceRdd createTaskSourcesRdd(\n         return new PrestoSparkTaskSourceRdd(sparkContext.sc(), taskSourcesByPartitionId);\n     }\n \n-    private List<ScheduledSplit> getSplits(Session session, TableScanNode tableScan)\n+    private List<ScheduledSplit> getSplits(TableScanNode tableScan, Map<PlanNodeId, SplitSource> splitSources)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdf6aee755a0e347bdd2c05aca19436bb1af9282"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ0MzM5Ng==", "bodyText": "Unfortunately the TableScanNode tableScan parameter cannot be removed from the signature as the new ScheduledSplit(sequenceId++, tableScan.getId(), split) requires the id of the TableScan node. It is possible to pass both, TableScanNode tableScan, SplitSource splitSource but then it is a little non intuitive to close something that is passed as a parameter, so the close logic must be handled outside. I would prefer to keep it as is. What do you think?", "url": "https://github.com/prestodb/presto/pull/15031#discussion_r472443396", "createdAt": "2020-08-18T19:54:51Z", "author": {"login": "arhimondr"}, "path": "presto-spark-base/src/main/java/com/facebook/presto/spark/planner/PrestoSparkRddFactory.java", "diffHunk": "@@ -364,18 +376,19 @@ private PrestoSparkTaskSourceRdd createTaskSourcesRdd(\n         return new PrestoSparkTaskSourceRdd(sparkContext.sc(), taskSourcesByPartitionId);\n     }\n \n-    private List<ScheduledSplit> getSplits(Session session, TableScanNode tableScan)\n+    private List<ScheduledSplit> getSplits(TableScanNode tableScan, Map<PlanNodeId, SplitSource> splitSources)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg1ODM3OQ=="}, "originalCommit": {"oid": "cdf6aee755a0e347bdd2c05aca19436bb1af9282"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ0NzMzNw==", "bodyText": "@arhimondr :\n\nbut then it is a little non intuitive to close something that is passed as a parameter\n\nWhat about getSplitsAndCloseSource ? \ud83d\ude03\nOtherwise, this method will pass in all the split sources (but just get split from one of them) , looks unusual in practice.", "url": "https://github.com/prestodb/presto/pull/15031#discussion_r472447337", "createdAt": "2020-08-18T20:02:16Z", "author": {"login": "wenleix"}, "path": "presto-spark-base/src/main/java/com/facebook/presto/spark/planner/PrestoSparkRddFactory.java", "diffHunk": "@@ -364,18 +376,19 @@ private PrestoSparkTaskSourceRdd createTaskSourcesRdd(\n         return new PrestoSparkTaskSourceRdd(sparkContext.sc(), taskSourcesByPartitionId);\n     }\n \n-    private List<ScheduledSplit> getSplits(Session session, TableScanNode tableScan)\n+    private List<ScheduledSplit> getSplits(TableScanNode tableScan, Map<PlanNodeId, SplitSource> splitSources)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg1ODM3OQ=="}, "originalCommit": {"oid": "cdf6aee755a0e347bdd2c05aca19436bb1af9282"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MjU5MjY4OnYy", "diffSide": "RIGHT", "path": "presto-spark-base/src/main/java/com/facebook/presto/spark/planner/PrestoSparkRddFactory.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMTo1NTo0MVrOHBEVMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMDoyMTozNlrOHCk8eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg4MTU4Ng==", "bodyText": "CloseableSplitSourceProvider will close all splitSource, this try statement is not needed.", "url": "https://github.com/prestodb/presto/pull/15031#discussion_r470881586", "createdAt": "2020-08-14T21:55:41Z", "author": {"login": "viczhang861"}, "path": "presto-spark-base/src/main/java/com/facebook/presto/spark/planner/PrestoSparkRddFactory.java", "diffHunk": "@@ -364,18 +376,19 @@ private PrestoSparkTaskSourceRdd createTaskSourcesRdd(\n         return new PrestoSparkTaskSourceRdd(sparkContext.sc(), taskSourcesByPartitionId);\n     }\n \n-    private List<ScheduledSplit> getSplits(Session session, TableScanNode tableScan)\n+    private List<ScheduledSplit> getSplits(TableScanNode tableScan, Map<PlanNodeId, SplitSource> splitSources)\n     {\n         List<ScheduledSplit> splits = new ArrayList<>();\n-        SplitSource splitSource = splitManager.getSplits(session, tableScan.getTable(), UNGROUPED_SCHEDULING);\n-        long sequenceId = 0;\n-        while (!splitSource.isFinished()) {\n-            List<Split> splitBatch = getFutureValue(splitSource.getNextBatch(NOT_PARTITIONED, Lifespan.taskWide(), 1000)).getSplits();\n-            for (Split split : splitBatch) {\n-                splits.add(new ScheduledSplit(sequenceId++, tableScan.getId(), split));\n+        try (SplitSource splitSource = requireNonNull(splitSources.get(tableScan.getId()), \"split source is missing for table scan node with id: \" + tableScan.getId())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdf6aee755a0e347bdd2c05aca19436bb1af9282"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ0MzgxNQ==", "bodyText": "Yeah, eventually everything is going to get closed by the CloseableSplitSourceProvider, but I thought it might be better to close the split sources as soon as possible to decrease memory pressure / etc.", "url": "https://github.com/prestodb/presto/pull/15031#discussion_r472443815", "createdAt": "2020-08-18T19:55:40Z", "author": {"login": "arhimondr"}, "path": "presto-spark-base/src/main/java/com/facebook/presto/spark/planner/PrestoSparkRddFactory.java", "diffHunk": "@@ -364,18 +376,19 @@ private PrestoSparkTaskSourceRdd createTaskSourcesRdd(\n         return new PrestoSparkTaskSourceRdd(sparkContext.sc(), taskSourcesByPartitionId);\n     }\n \n-    private List<ScheduledSplit> getSplits(Session session, TableScanNode tableScan)\n+    private List<ScheduledSplit> getSplits(TableScanNode tableScan, Map<PlanNodeId, SplitSource> splitSources)\n     {\n         List<ScheduledSplit> splits = new ArrayList<>();\n-        SplitSource splitSource = splitManager.getSplits(session, tableScan.getTable(), UNGROUPED_SCHEDULING);\n-        long sequenceId = 0;\n-        while (!splitSource.isFinished()) {\n-            List<Split> splitBatch = getFutureValue(splitSource.getNextBatch(NOT_PARTITIONED, Lifespan.taskWide(), 1000)).getSplits();\n-            for (Split split : splitBatch) {\n-                splits.add(new ScheduledSplit(sequenceId++, tableScan.getId(), split));\n+        try (SplitSource splitSource = requireNonNull(splitSources.get(tableScan.getId()), \"split source is missing for table scan node with id: \" + tableScan.getId())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg4MTU4Ng=="}, "originalCommit": {"oid": "cdf6aee755a0e347bdd2c05aca19436bb1af9282"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ2NDUwNg==", "bodyText": "Thanks for explanation.", "url": "https://github.com/prestodb/presto/pull/15031#discussion_r472464506", "createdAt": "2020-08-18T20:21:36Z", "author": {"login": "viczhang861"}, "path": "presto-spark-base/src/main/java/com/facebook/presto/spark/planner/PrestoSparkRddFactory.java", "diffHunk": "@@ -364,18 +376,19 @@ private PrestoSparkTaskSourceRdd createTaskSourcesRdd(\n         return new PrestoSparkTaskSourceRdd(sparkContext.sc(), taskSourcesByPartitionId);\n     }\n \n-    private List<ScheduledSplit> getSplits(Session session, TableScanNode tableScan)\n+    private List<ScheduledSplit> getSplits(TableScanNode tableScan, Map<PlanNodeId, SplitSource> splitSources)\n     {\n         List<ScheduledSplit> splits = new ArrayList<>();\n-        SplitSource splitSource = splitManager.getSplits(session, tableScan.getTable(), UNGROUPED_SCHEDULING);\n-        long sequenceId = 0;\n-        while (!splitSource.isFinished()) {\n-            List<Split> splitBatch = getFutureValue(splitSource.getNextBatch(NOT_PARTITIONED, Lifespan.taskWide(), 1000)).getSplits();\n-            for (Split split : splitBatch) {\n-                splits.add(new ScheduledSplit(sequenceId++, tableScan.getId(), split));\n+        try (SplitSource splitSource = requireNonNull(splitSources.get(tableScan.getId()), \"split source is missing for table scan node with id: \" + tableScan.getId())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg4MTU4Ng=="}, "originalCommit": {"oid": "cdf6aee755a0e347bdd2c05aca19436bb1af9282"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3743, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}