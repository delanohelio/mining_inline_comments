{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5ODMyMDg5", "number": 15193, "title": "Add docs for exchange materialization", "bodyText": "Test plan - build the doc locally\n\n\n\n\n\n== NO RELEASE NOTE ==", "createdAt": "2020-09-19T22:55:28Z", "url": "https://github.com/prestodb/presto/pull/15193", "merged": true, "mergeCommit": {"oid": "bb0d04ada5c72a24d99494630f54a11203340ab2"}, "closed": true, "closedAt": "2020-09-25T21:15:00Z", "author": {"login": "wenleix"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdKiU46ABqjM3ODU1ODI0Mzc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdMZSWoABqjM4MDg3MTY1NTg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9bdec4b4df03749267e5b514872f822c1b3753ba", "author": {"user": {"login": "wenleix", "name": "Wenlei Xie"}}, "url": "https://github.com/prestodb/presto/commit/9bdec4b4df03749267e5b514872f822c1b3753ba", "committedDate": "2020-09-19T22:52:40Z", "message": "Add docs for exchange materialization"}, "afterCommit": {"oid": "6985c87a48214edd7ce5b493d27ba44afd1cb05e", "author": {"user": {"login": "wenleix", "name": "Wenlei Xie"}}, "url": "https://github.com/prestodb/presto/commit/6985c87a48214edd7ce5b493d27ba44afd1cb05e", "committedDate": "2020-09-19T22:55:56Z", "message": "Add docs for exchange materialization"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6985c87a48214edd7ce5b493d27ba44afd1cb05e", "author": {"user": {"login": "wenleix", "name": "Wenlei Xie"}}, "url": "https://github.com/prestodb/presto/commit/6985c87a48214edd7ce5b493d27ba44afd1cb05e", "committedDate": "2020-09-19T22:55:56Z", "message": "Add docs for exchange materialization"}, "afterCommit": {"oid": "8339ece5cbd93f2dfe36ca2a17b3a03ccc698520", "author": {"user": {"login": "wenleix", "name": "Wenlei Xie"}}, "url": "https://github.com/prestodb/presto/commit/8339ece5cbd93f2dfe36ca2a17b3a03ccc698520", "committedDate": "2020-09-19T23:01:25Z", "message": "Add docs for exchange materialization"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzNjk4NDM0", "url": "https://github.com/prestodb/presto/pull/15193#pullrequestreview-493698434", "createdAt": "2020-09-22T17:38:06Z", "commit": {"oid": "8339ece5cbd93f2dfe36ca2a17b3a03ccc698520"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzNzM5ODk2", "url": "https://github.com/prestodb/presto/pull/15193#pullrequestreview-493739896", "createdAt": "2020-09-22T18:32:41Z", "commit": {"oid": "8339ece5cbd93f2dfe36ca2a17b3a03ccc698520"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxODozMjo0MVrOHWHR1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMDo1Njo0N1rOHXGFwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk0OTk3NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            also requires all the producers and receivers have to be executed concurrently until the\n          \n          \n            \n            also requires all the producers and consumers to be executed concurrently until the\n          \n      \n    \n    \n  \n\nProducer and consumer is the terminology normally associated with a one way queuing arrangement. Producer and receiver is not terminology I recognize.", "url": "https://github.com/prestodb/presto/pull/15193#discussion_r492949975", "createdAt": "2020-09-22T18:32:41Z", "author": {"login": "aweisberg"}, "path": "presto-docs/src/main/sphinx/admin/exchange-materialization.rst", "diffHunk": "@@ -0,0 +1,59 @@\n+========================\n+Exchange Materialization\n+========================\n+\n+Presto allows exchange materialization to support memory intensive queries.\n+This mechanism brings MapReduce-style execution to Presto's MPP architecture runtime,\n+and can be applied together with :doc:`/admin/spill`.\n+\n+Introduction\n+------------\n+\n+As with other MPP databases, Presto leverages RPC shuffle to achieve efficient and\n+low-latency query execution for join and aggregation. However, RPC shuffle\n+also requires all the producers and receivers have to be executed concurrently until the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8339ece5cbd93f2dfe36ca2a17b3a03ccc698520"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk1MDQ5MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            query finished.\n          \n          \n            \n            query is finished.", "url": "https://github.com/prestodb/presto/pull/15193#discussion_r492950491", "createdAt": "2020-09-22T18:33:36Z", "author": {"login": "aweisberg"}, "path": "presto-docs/src/main/sphinx/admin/exchange-materialization.rst", "diffHunk": "@@ -0,0 +1,59 @@\n+========================\n+Exchange Materialization\n+========================\n+\n+Presto allows exchange materialization to support memory intensive queries.\n+This mechanism brings MapReduce-style execution to Presto's MPP architecture runtime,\n+and can be applied together with :doc:`/admin/spill`.\n+\n+Introduction\n+------------\n+\n+As with other MPP databases, Presto leverages RPC shuffle to achieve efficient and\n+low-latency query execution for join and aggregation. However, RPC shuffle\n+also requires all the producers and receivers have to be executed concurrently until the\n+query finished.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8339ece5cbd93f2dfe36ca2a17b3a03ccc698520"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk1MTEwNQ==", "bodyText": "fault-tolerante -> fault tolerance\nCapitalize first letter of bullet points?", "url": "https://github.com/prestodb/presto/pull/15193#discussion_r492951105", "createdAt": "2020-09-22T18:34:29Z", "author": {"login": "aweisberg"}, "path": "presto-docs/src/main/sphinx/admin/exchange-materialization.rst", "diffHunk": "@@ -0,0 +1,59 @@\n+========================\n+Exchange Materialization\n+========================\n+\n+Presto allows exchange materialization to support memory intensive queries.\n+This mechanism brings MapReduce-style execution to Presto's MPP architecture runtime,\n+and can be applied together with :doc:`/admin/spill`.\n+\n+Introduction\n+------------\n+\n+As with other MPP databases, Presto leverages RPC shuffle to achieve efficient and\n+low-latency query execution for join and aggregation. However, RPC shuffle\n+also requires all the producers and receivers have to be executed concurrently until the\n+query finished.\n+\n+To illustrates this, consider the aggregation query:\n+\n+.. code-block:: sql\n+\n+    SELECT custkey, SUM(totalprice)\n+    FROM orders\n+    GROUP BY custkey\n+\n+\n+The following figure demonstrates how this query executes in Presto classic mode:\n+\n+.. figure:: ../images/rpc_shuffle_execution.png", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8339ece5cbd93f2dfe36ca2a17b3a03ccc698520"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk2NDMyNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            it is always a temporary Hive bucketed table). This opens opportunity for flexible scheduling policies\n          \n          \n            \n            it is always a temporary Hive bucketed table). This creates an opportunity for flexible scheduling policies", "url": "https://github.com/prestodb/presto/pull/15193#discussion_r493964326", "createdAt": "2020-09-24T00:02:38Z", "author": {"login": "aweisberg"}, "path": "presto-docs/src/main/sphinx/admin/exchange-materialization.rst", "diffHunk": "@@ -0,0 +1,59 @@\n+========================\n+Exchange Materialization\n+========================\n+\n+Presto allows exchange materialization to support memory intensive queries.\n+This mechanism brings MapReduce-style execution to Presto's MPP architecture runtime,\n+and can be applied together with :doc:`/admin/spill`.\n+\n+Introduction\n+------------\n+\n+As with other MPP databases, Presto leverages RPC shuffle to achieve efficient and\n+low-latency query execution for join and aggregation. However, RPC shuffle\n+also requires all the producers and receivers have to be executed concurrently until the\n+query finished.\n+\n+To illustrates this, consider the aggregation query:\n+\n+.. code-block:: sql\n+\n+    SELECT custkey, SUM(totalprice)\n+    FROM orders\n+    GROUP BY custkey\n+\n+\n+The following figure demonstrates how this query executes in Presto classic mode:\n+\n+.. figure:: ../images/rpc_shuffle_execution.png\n+   :align: center\n+\n+With exchange materialization, the intermediate shuffle data is written to disk (currently,\n+it is always a temporary Hive bucketed table). This opens opportunity for flexible scheduling policies", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8339ece5cbd93f2dfe36ca2a17b3a03ccc698520"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk3ODU0OA==", "bodyText": "Capitalize first letter of bullet points?\n\"Schedule fewer partitions concurrently to reduce memory requirements\"", "url": "https://github.com/prestodb/presto/pull/15193#discussion_r493978548", "createdAt": "2020-09-24T00:54:49Z", "author": {"login": "aweisberg"}, "path": "presto-docs/src/main/sphinx/admin/exchange-materialization.rst", "diffHunk": "@@ -0,0 +1,59 @@\n+========================\n+Exchange Materialization\n+========================\n+\n+Presto allows exchange materialization to support memory intensive queries.\n+This mechanism brings MapReduce-style execution to Presto's MPP architecture runtime,\n+and can be applied together with :doc:`/admin/spill`.\n+\n+Introduction\n+------------\n+\n+As with other MPP databases, Presto leverages RPC shuffle to achieve efficient and\n+low-latency query execution for join and aggregation. However, RPC shuffle\n+also requires all the producers and receivers have to be executed concurrently until the\n+query finished.\n+\n+To illustrates this, consider the aggregation query:\n+\n+.. code-block:: sql\n+\n+    SELECT custkey, SUM(totalprice)\n+    FROM orders\n+    GROUP BY custkey\n+\n+\n+The following figure demonstrates how this query executes in Presto classic mode:\n+\n+.. figure:: ../images/rpc_shuffle_execution.png\n+   :align: center\n+\n+With exchange materialization, the intermediate shuffle data is written to disk (currently,\n+it is always a temporary Hive bucketed table). This opens opportunity for flexible scheduling policies\n+on the aggregation side, as only a subset of aggregation data needs to be held in memory at the\n+same time -- this execution strategy is called \"grouped execution\" in Presto.\n+\n+.. figure:: ../images/materialized_shuffle_execution.png", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8339ece5cbd93f2dfe36ca2a17b3a03ccc698520"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk3ODg2MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                -- We recommend to set hash_partition_count to be at least 5X-10X about the number of cluster size\n          \n          \n            \n                -- We recommend setting hash_partition_count to be at least 5X-10X cluster size", "url": "https://github.com/prestodb/presto/pull/15193#discussion_r493978860", "createdAt": "2020-09-24T00:55:59Z", "author": {"login": "aweisberg"}, "path": "presto-docs/src/main/sphinx/admin/exchange-materialization.rst", "diffHunk": "@@ -0,0 +1,59 @@\n+========================\n+Exchange Materialization\n+========================\n+\n+Presto allows exchange materialization to support memory intensive queries.\n+This mechanism brings MapReduce-style execution to Presto's MPP architecture runtime,\n+and can be applied together with :doc:`/admin/spill`.\n+\n+Introduction\n+------------\n+\n+As with other MPP databases, Presto leverages RPC shuffle to achieve efficient and\n+low-latency query execution for join and aggregation. However, RPC shuffle\n+also requires all the producers and receivers have to be executed concurrently until the\n+query finished.\n+\n+To illustrates this, consider the aggregation query:\n+\n+.. code-block:: sql\n+\n+    SELECT custkey, SUM(totalprice)\n+    FROM orders\n+    GROUP BY custkey\n+\n+\n+The following figure demonstrates how this query executes in Presto classic mode:\n+\n+.. figure:: ../images/rpc_shuffle_execution.png\n+   :align: center\n+\n+With exchange materialization, the intermediate shuffle data is written to disk (currently,\n+it is always a temporary Hive bucketed table). This opens opportunity for flexible scheduling policies\n+on the aggregation side, as only a subset of aggregation data needs to be held in memory at the\n+same time -- this execution strategy is called \"grouped execution\" in Presto.\n+\n+.. figure:: ../images/materialized_shuffle_execution.png\n+   :align: center\n+\n+Using Exchange Materialization\n+------------------------------\n+\n+Exchange materialization can be enabled on per-query basis by setting the following 3 session properties:\n+``exchange_materialization_strategy``, ``partitioning_provider_catalog`` and ``hash_partition_count``:\n+\n+.. code-block:: sql\n+\n+    SET SESSION exchange_materialization_strategy='ALL';\n+\n+    -- Set partitioning_provider_catalog to the Hive connector catalog\n+    SET SESSION partitioning_provider_catalog='hive';\n+\n+    -- We recommend to set hash_partition_count to be at least 5X-10X about the number of cluster size", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8339ece5cbd93f2dfe36ca2a17b3a03ccc698520"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk3OTA3Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * All high memory ETL queries (tagged with 'high_mem_etl') re routed to subgroups under the ``global.pipeline`` group,\n          \n          \n            \n            * All high memory ETL queries (tagged with 'high_mem_etl') are routed to subgroups under the ``global.pipeline`` group,", "url": "https://github.com/prestodb/presto/pull/15193#discussion_r493979073", "createdAt": "2020-09-24T00:56:47Z", "author": {"login": "aweisberg"}, "path": "presto-docs/src/main/sphinx/admin/session-property-managers.rst", "diffHunk": "@@ -62,6 +62,9 @@ Consider the following set of requirements:\n * All ETL queries (tagged with 'etl') are routed to subgroups under the ``global.pipeline`` group, and must be\n   configured with certain properties to control writer behavior.\n \n+* All high memory ETL queries (tagged with 'high_mem_etl') re routed to subgroups under the ``global.pipeline`` group,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8339ece5cbd93f2dfe36ca2a17b3a03ccc698520"}, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8339ece5cbd93f2dfe36ca2a17b3a03ccc698520", "author": {"user": {"login": "wenleix", "name": "Wenlei Xie"}}, "url": "https://github.com/prestodb/presto/commit/8339ece5cbd93f2dfe36ca2a17b3a03ccc698520", "committedDate": "2020-09-19T23:01:25Z", "message": "Add docs for exchange materialization"}, "afterCommit": {"oid": "0506a66de6de0de49aeaef14da9bb7262a468802", "author": {"user": {"login": "wenleix", "name": "Wenlei Xie"}}, "url": "https://github.com/prestodb/presto/commit/0506a66de6de0de49aeaef14da9bb7262a468802", "committedDate": "2020-09-24T17:57:22Z", "message": "Add docs for exchange materialization"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1ODY2NTQ3", "url": "https://github.com/prestodb/presto/pull/15193#pullrequestreview-495866547", "createdAt": "2020-09-24T18:57:26Z", "commit": {"oid": "0506a66de6de0de49aeaef14da9bb7262a468802"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxODo1NzoyNlrOHXokKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxODo1NzoyNlrOHXokKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU0MzkxNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                -- We recommend setting hash_partition_count to be at least 5X-10X about the number of cluster size\n          \n          \n            \n                -- We recommend setting hash_partition_count to be at least 5X-10X the cluster size", "url": "https://github.com/prestodb/presto/pull/15193#discussion_r494543915", "createdAt": "2020-09-24T18:57:26Z", "author": {"login": "aweisberg"}, "path": "presto-docs/src/main/sphinx/admin/exchange-materialization.rst", "diffHunk": "@@ -0,0 +1,59 @@\n+========================\n+Exchange Materialization\n+========================\n+\n+Presto allows exchange materialization to support memory intensive queries.\n+This mechanism brings MapReduce-style execution to Presto's MPP architecture runtime,\n+and can be applied together with :doc:`/admin/spill`.\n+\n+Introduction\n+------------\n+\n+As with other MPP databases, Presto leverages RPC shuffle to achieve efficient and\n+low-latency query execution for join and aggregation. However, RPC shuffle\n+also requires all the producers and consumers to be executed concurrently until the\n+query is finished.\n+\n+To illustrates this, consider the aggregation query:\n+\n+.. code-block:: sql\n+\n+    SELECT custkey, SUM(totalprice)\n+    FROM orders\n+    GROUP BY custkey\n+\n+\n+The following figure demonstrates how this query executes in Presto classic mode:\n+\n+.. figure:: ../images/rpc_shuffle_execution.png\n+   :align: center\n+\n+With exchange materialization, the intermediate shuffle data is written to disk (currently,\n+it is always a temporary Hive bucketed table). This opens the opportunity for flexible scheduling policies\n+on the aggregation side, as only a subset of aggregation data needs to be held in memory at the\n+same time -- this execution strategy is called \"grouped execution\" in Presto.\n+\n+.. figure:: ../images/materialized_shuffle_execution.png\n+   :align: center\n+\n+Using Exchange Materialization\n+------------------------------\n+\n+Exchange materialization can be enabled on per-query basis by setting the following 3 session properties:\n+``exchange_materialization_strategy``, ``partitioning_provider_catalog`` and ``hash_partition_count``:\n+\n+.. code-block:: sql\n+\n+    SET SESSION exchange_materialization_strategy='ALL';\n+\n+    -- Set partitioning_provider_catalog to the Hive connector catalog\n+    SET SESSION partitioning_provider_catalog='hive';\n+\n+    -- We recommend setting hash_partition_count to be at least 5X-10X about the number of cluster size", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0506a66de6de0de49aeaef14da9bb7262a468802"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1ODY3Mjkx", "url": "https://github.com/prestodb/presto/pull/15193#pullrequestreview-495867291", "createdAt": "2020-09-24T18:58:23Z", "commit": {"oid": "0506a66de6de0de49aeaef14da9bb7262a468802"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b3c2cd4811fc8f4833d2af575f96418f0a7db93e", "author": {"user": {"login": "wenleix", "name": "Wenlei Xie"}}, "url": "https://github.com/prestodb/presto/commit/b3c2cd4811fc8f4833d2af575f96418f0a7db93e", "committedDate": "2020-09-25T17:31:44Z", "message": "Add docs for exchange materialization"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0506a66de6de0de49aeaef14da9bb7262a468802", "author": {"user": {"login": "wenleix", "name": "Wenlei Xie"}}, "url": "https://github.com/prestodb/presto/commit/0506a66de6de0de49aeaef14da9bb7262a468802", "committedDate": "2020-09-24T17:57:22Z", "message": "Add docs for exchange materialization"}, "afterCommit": {"oid": "b3c2cd4811fc8f4833d2af575f96418f0a7db93e", "author": {"user": {"login": "wenleix", "name": "Wenlei Xie"}}, "url": "https://github.com/prestodb/presto/commit/b3c2cd4811fc8f4833d2af575f96418f0a7db93e", "committedDate": "2020-09-25T17:31:44Z", "message": "Add docs for exchange materialization"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 160, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}