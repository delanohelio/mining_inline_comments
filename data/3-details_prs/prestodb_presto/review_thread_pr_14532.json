{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4MjQ2NTU5", "number": 14532, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMDoyODowNlrOD8sSpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxODoyNDo0OFrOD8-Qug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0OTY2ODIxOnYy", "diffSide": "RIGHT", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/thrift/ThriftMetastoreUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMDoyODowNlrOGVyi9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMDoyODowNlrOGVyi9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUwMTQzMQ==", "bodyText": "this can just be if, as we have a sure return in the top if condition", "url": "https://github.com/prestodb/presto/pull/14532#discussion_r425501431", "createdAt": "2020-05-15T00:28:06Z", "author": {"login": "bhhari"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/thrift/ThriftMetastoreUtil.java", "diffHunk": "@@ -691,32 +693,39 @@ private static StorageDescriptor makeStorageDescriptor(String tableName, List<Co\n     public static ColumnStatisticsObj createMetastoreColumnStatistics(String columnName, HiveType columnType, HiveColumnStatistics statistics, OptionalLong rowCount)\n     {\n         TypeInfo typeInfo = columnType.getTypeInfo();\n-        checkArgument(typeInfo.getCategory() == PRIMITIVE, \"unsupported type: %s\", columnType);\n-        switch (((PrimitiveTypeInfo) typeInfo).getPrimitiveCategory()) {\n-            case BOOLEAN:\n-                return createBooleanStatistics(columnName, columnType, statistics);\n-            case BYTE:\n-            case SHORT:\n-            case INT:\n-            case LONG:\n-                return createLongStatistics(columnName, columnType, statistics);\n-            case FLOAT:\n-            case DOUBLE:\n-                return createDoubleStatistics(columnName, columnType, statistics);\n-            case STRING:\n-            case VARCHAR:\n-            case CHAR:\n-                return createStringStatistics(columnName, columnType, statistics, rowCount);\n-            case DATE:\n-                return createDateStatistics(columnName, columnType, statistics);\n-            case TIMESTAMP:\n-                return createLongStatistics(columnName, columnType, statistics);\n-            case BINARY:\n-                return createBinaryStatistics(columnName, columnType, statistics, rowCount);\n-            case DECIMAL:\n-                return createDecimalStatistics(columnName, columnType, statistics);\n-            default:\n-                throw new IllegalArgumentException(format(\"unsupported type: %s\", columnType));\n+        if (typeInfo.getCategory() == PRIMITIVE) {\n+            switch (((PrimitiveTypeInfo) typeInfo).getPrimitiveCategory()) {\n+                case BOOLEAN:\n+                    return createBooleanStatistics(columnName, columnType, statistics);\n+                case BYTE:\n+                case SHORT:\n+                case INT:\n+                case LONG:\n+                    return createLongStatistics(columnName, columnType, statistics);\n+                case FLOAT:\n+                case DOUBLE:\n+                    return createDoubleStatistics(columnName, columnType, statistics);\n+                case STRING:\n+                case VARCHAR:\n+                case CHAR:\n+                    return createStringStatistics(columnName, columnType, statistics, rowCount);\n+                case DATE:\n+                    return createDateStatistics(columnName, columnType, statistics);\n+                case TIMESTAMP:\n+                    return createLongStatistics(columnName, columnType, statistics);\n+                case BINARY:\n+                    return createBinaryStatistics(columnName, columnType, statistics, rowCount);\n+                case DECIMAL:\n+                    return createDecimalStatistics(columnName, columnType, statistics);\n+                default:\n+                    throw new IllegalArgumentException(format(\"unsupported type: %s\", columnType));\n+            }\n+        }\n+        else if (typeInfo.getCategory() == STRUCT || typeInfo.getCategory() == MAP) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5996215ea4cfe09a21194ab26d1c18d23a6f7abb"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0OTY2ODYzOnYy", "diffSide": "RIGHT", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/thrift/ThriftMetastoreUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMDoyODoyNVrOGVyjNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMDoyODoyNVrOGVyjNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUwMTQ5NQ==", "bodyText": "no need of this else", "url": "https://github.com/prestodb/presto/pull/14532#discussion_r425501495", "createdAt": "2020-05-15T00:28:25Z", "author": {"login": "bhhari"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/thrift/ThriftMetastoreUtil.java", "diffHunk": "@@ -691,32 +693,39 @@ private static StorageDescriptor makeStorageDescriptor(String tableName, List<Co\n     public static ColumnStatisticsObj createMetastoreColumnStatistics(String columnName, HiveType columnType, HiveColumnStatistics statistics, OptionalLong rowCount)\n     {\n         TypeInfo typeInfo = columnType.getTypeInfo();\n-        checkArgument(typeInfo.getCategory() == PRIMITIVE, \"unsupported type: %s\", columnType);\n-        switch (((PrimitiveTypeInfo) typeInfo).getPrimitiveCategory()) {\n-            case BOOLEAN:\n-                return createBooleanStatistics(columnName, columnType, statistics);\n-            case BYTE:\n-            case SHORT:\n-            case INT:\n-            case LONG:\n-                return createLongStatistics(columnName, columnType, statistics);\n-            case FLOAT:\n-            case DOUBLE:\n-                return createDoubleStatistics(columnName, columnType, statistics);\n-            case STRING:\n-            case VARCHAR:\n-            case CHAR:\n-                return createStringStatistics(columnName, columnType, statistics, rowCount);\n-            case DATE:\n-                return createDateStatistics(columnName, columnType, statistics);\n-            case TIMESTAMP:\n-                return createLongStatistics(columnName, columnType, statistics);\n-            case BINARY:\n-                return createBinaryStatistics(columnName, columnType, statistics, rowCount);\n-            case DECIMAL:\n-                return createDecimalStatistics(columnName, columnType, statistics);\n-            default:\n-                throw new IllegalArgumentException(format(\"unsupported type: %s\", columnType));\n+        if (typeInfo.getCategory() == PRIMITIVE) {\n+            switch (((PrimitiveTypeInfo) typeInfo).getPrimitiveCategory()) {\n+                case BOOLEAN:\n+                    return createBooleanStatistics(columnName, columnType, statistics);\n+                case BYTE:\n+                case SHORT:\n+                case INT:\n+                case LONG:\n+                    return createLongStatistics(columnName, columnType, statistics);\n+                case FLOAT:\n+                case DOUBLE:\n+                    return createDoubleStatistics(columnName, columnType, statistics);\n+                case STRING:\n+                case VARCHAR:\n+                case CHAR:\n+                    return createStringStatistics(columnName, columnType, statistics, rowCount);\n+                case DATE:\n+                    return createDateStatistics(columnName, columnType, statistics);\n+                case TIMESTAMP:\n+                    return createLongStatistics(columnName, columnType, statistics);\n+                case BINARY:\n+                    return createBinaryStatistics(columnName, columnType, statistics, rowCount);\n+                case DECIMAL:\n+                    return createDecimalStatistics(columnName, columnType, statistics);\n+                default:\n+                    throw new IllegalArgumentException(format(\"unsupported type: %s\", columnType));\n+            }\n+        }\n+        else if (typeInfo.getCategory() == STRUCT || typeInfo.getCategory() == MAP) {\n+            return new ColumnStatisticsObj();\n+        }\n+        else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5996215ea4cfe09a21194ab26d1c18d23a6f7abb"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MDEwODg0OnYy", "diffSide": "RIGHT", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/thrift/ThriftMetastoreUtil.java", "isResolved": false, "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNToxMjoyMFrOGV2t0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNToxODozNVrOGXlmPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU2OTc0NA==", "bodyText": "It looks like we only return an empty stats object now. I'm curious if we will be filling up the actual stats for structs and maps? How does the analyze result look like now with this change? Does it just leave that part empty? Is it possible to attach a printout of the result of it here?", "url": "https://github.com/prestodb/presto/pull/14532#discussion_r425569744", "createdAt": "2020-05-15T05:12:20Z", "author": {"login": "yingsu00"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/thrift/ThriftMetastoreUtil.java", "diffHunk": "@@ -691,32 +693,39 @@ private static StorageDescriptor makeStorageDescriptor(String tableName, List<Co\n     public static ColumnStatisticsObj createMetastoreColumnStatistics(String columnName, HiveType columnType, HiveColumnStatistics statistics, OptionalLong rowCount)\n     {\n         TypeInfo typeInfo = columnType.getTypeInfo();\n-        checkArgument(typeInfo.getCategory() == PRIMITIVE, \"unsupported type: %s\", columnType);\n-        switch (((PrimitiveTypeInfo) typeInfo).getPrimitiveCategory()) {\n-            case BOOLEAN:\n-                return createBooleanStatistics(columnName, columnType, statistics);\n-            case BYTE:\n-            case SHORT:\n-            case INT:\n-            case LONG:\n-                return createLongStatistics(columnName, columnType, statistics);\n-            case FLOAT:\n-            case DOUBLE:\n-                return createDoubleStatistics(columnName, columnType, statistics);\n-            case STRING:\n-            case VARCHAR:\n-            case CHAR:\n-                return createStringStatistics(columnName, columnType, statistics, rowCount);\n-            case DATE:\n-                return createDateStatistics(columnName, columnType, statistics);\n-            case TIMESTAMP:\n-                return createLongStatistics(columnName, columnType, statistics);\n-            case BINARY:\n-                return createBinaryStatistics(columnName, columnType, statistics, rowCount);\n-            case DECIMAL:\n-                return createDecimalStatistics(columnName, columnType, statistics);\n-            default:\n-                throw new IllegalArgumentException(format(\"unsupported type: %s\", columnType));\n+        if (typeInfo.getCategory() == PRIMITIVE) {\n+            switch (((PrimitiveTypeInfo) typeInfo).getPrimitiveCategory()) {\n+                case BOOLEAN:\n+                    return createBooleanStatistics(columnName, columnType, statistics);\n+                case BYTE:\n+                case SHORT:\n+                case INT:\n+                case LONG:\n+                    return createLongStatistics(columnName, columnType, statistics);\n+                case FLOAT:\n+                case DOUBLE:\n+                    return createDoubleStatistics(columnName, columnType, statistics);\n+                case STRING:\n+                case VARCHAR:\n+                case CHAR:\n+                    return createStringStatistics(columnName, columnType, statistics, rowCount);\n+                case DATE:\n+                    return createDateStatistics(columnName, columnType, statistics);\n+                case TIMESTAMP:\n+                    return createLongStatistics(columnName, columnType, statistics);\n+                case BINARY:\n+                    return createBinaryStatistics(columnName, columnType, statistics, rowCount);\n+                case DECIMAL:\n+                    return createDecimalStatistics(columnName, columnType, statistics);\n+                default:\n+                    throw new IllegalArgumentException(format(\"unsupported type: %s\", columnType));\n+            }\n+        }\n+        else if (typeInfo.getCategory() == STRUCT || typeInfo.getCategory() == MAP) {\n+            return new ColumnStatisticsObj();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5996215ea4cfe09a21194ab26d1c18d23a6f7abb"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkyMDE1Ng==", "bodyText": "yes, that's correct we only return an empty stats right now since this is a fix for issue #14494. Here's a example of the output with and without this fix\npresto:sj_test> select * from test;\n     a      | b | c \n------------+---+---\n {b=1, c=2} | 3 | a \n(1 row)\n\nwithout this change:\npresto:sj_test> analyze test;\nANALYZE: 1 row\n\nQuery 20200515_162351_00021_y4gxt, FAILED, 2 nodes\nSplits: 11 total, 11 done (100.00%)\n0:00 [1 rows, 450B] [5 rows/s, 2.5KB/s]\n\nQuery 20200515_162351_00021_y4gxt failed: unsupported type: struct<b:int,c:int>\n\nwith this change:\npresto:sj_test> analyze test;\nANALYZE: 1 row\n\nQuery 20200515_161538_00024_84q6a, FINISHED, 3 nodes\nSplits: 11 total, 11 done (100.00%)\n0:00 [1 rows, 452B] [10 rows/s, 4.8KB/s]", "url": "https://github.com/prestodb/presto/pull/14532#discussion_r425920156", "createdAt": "2020-05-15T16:38:11Z", "author": {"login": "sujay-jain"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/thrift/ThriftMetastoreUtil.java", "diffHunk": "@@ -691,32 +693,39 @@ private static StorageDescriptor makeStorageDescriptor(String tableName, List<Co\n     public static ColumnStatisticsObj createMetastoreColumnStatistics(String columnName, HiveType columnType, HiveColumnStatistics statistics, OptionalLong rowCount)\n     {\n         TypeInfo typeInfo = columnType.getTypeInfo();\n-        checkArgument(typeInfo.getCategory() == PRIMITIVE, \"unsupported type: %s\", columnType);\n-        switch (((PrimitiveTypeInfo) typeInfo).getPrimitiveCategory()) {\n-            case BOOLEAN:\n-                return createBooleanStatistics(columnName, columnType, statistics);\n-            case BYTE:\n-            case SHORT:\n-            case INT:\n-            case LONG:\n-                return createLongStatistics(columnName, columnType, statistics);\n-            case FLOAT:\n-            case DOUBLE:\n-                return createDoubleStatistics(columnName, columnType, statistics);\n-            case STRING:\n-            case VARCHAR:\n-            case CHAR:\n-                return createStringStatistics(columnName, columnType, statistics, rowCount);\n-            case DATE:\n-                return createDateStatistics(columnName, columnType, statistics);\n-            case TIMESTAMP:\n-                return createLongStatistics(columnName, columnType, statistics);\n-            case BINARY:\n-                return createBinaryStatistics(columnName, columnType, statistics, rowCount);\n-            case DECIMAL:\n-                return createDecimalStatistics(columnName, columnType, statistics);\n-            default:\n-                throw new IllegalArgumentException(format(\"unsupported type: %s\", columnType));\n+        if (typeInfo.getCategory() == PRIMITIVE) {\n+            switch (((PrimitiveTypeInfo) typeInfo).getPrimitiveCategory()) {\n+                case BOOLEAN:\n+                    return createBooleanStatistics(columnName, columnType, statistics);\n+                case BYTE:\n+                case SHORT:\n+                case INT:\n+                case LONG:\n+                    return createLongStatistics(columnName, columnType, statistics);\n+                case FLOAT:\n+                case DOUBLE:\n+                    return createDoubleStatistics(columnName, columnType, statistics);\n+                case STRING:\n+                case VARCHAR:\n+                case CHAR:\n+                    return createStringStatistics(columnName, columnType, statistics, rowCount);\n+                case DATE:\n+                    return createDateStatistics(columnName, columnType, statistics);\n+                case TIMESTAMP:\n+                    return createLongStatistics(columnName, columnType, statistics);\n+                case BINARY:\n+                    return createBinaryStatistics(columnName, columnType, statistics, rowCount);\n+                case DECIMAL:\n+                    return createDecimalStatistics(columnName, columnType, statistics);\n+                default:\n+                    throw new IllegalArgumentException(format(\"unsupported type: %s\", columnType));\n+            }\n+        }\n+        else if (typeInfo.getCategory() == STRUCT || typeInfo.getCategory() == MAP) {\n+            return new ColumnStatisticsObj();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU2OTc0NA=="}, "originalCommit": {"oid": "5996215ea4cfe09a21194ab26d1c18d23a6f7abb"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk1Njk0MQ==", "bodyText": "I agree with @yingsu00  here. I can't tell if the hive metastore accepts column stats for struct types (for the non type specific fields), but if it does and we have the stats here, I think you should create a proper stats object here with those things set\nThen you can test what happened by running \"show stats\" after running \"analyze\"", "url": "https://github.com/prestodb/presto/pull/14532#discussion_r425956941", "createdAt": "2020-05-15T17:49:33Z", "author": {"login": "rschlussel"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/thrift/ThriftMetastoreUtil.java", "diffHunk": "@@ -691,32 +693,39 @@ private static StorageDescriptor makeStorageDescriptor(String tableName, List<Co\n     public static ColumnStatisticsObj createMetastoreColumnStatistics(String columnName, HiveType columnType, HiveColumnStatistics statistics, OptionalLong rowCount)\n     {\n         TypeInfo typeInfo = columnType.getTypeInfo();\n-        checkArgument(typeInfo.getCategory() == PRIMITIVE, \"unsupported type: %s\", columnType);\n-        switch (((PrimitiveTypeInfo) typeInfo).getPrimitiveCategory()) {\n-            case BOOLEAN:\n-                return createBooleanStatistics(columnName, columnType, statistics);\n-            case BYTE:\n-            case SHORT:\n-            case INT:\n-            case LONG:\n-                return createLongStatistics(columnName, columnType, statistics);\n-            case FLOAT:\n-            case DOUBLE:\n-                return createDoubleStatistics(columnName, columnType, statistics);\n-            case STRING:\n-            case VARCHAR:\n-            case CHAR:\n-                return createStringStatistics(columnName, columnType, statistics, rowCount);\n-            case DATE:\n-                return createDateStatistics(columnName, columnType, statistics);\n-            case TIMESTAMP:\n-                return createLongStatistics(columnName, columnType, statistics);\n-            case BINARY:\n-                return createBinaryStatistics(columnName, columnType, statistics, rowCount);\n-            case DECIMAL:\n-                return createDecimalStatistics(columnName, columnType, statistics);\n-            default:\n-                throw new IllegalArgumentException(format(\"unsupported type: %s\", columnType));\n+        if (typeInfo.getCategory() == PRIMITIVE) {\n+            switch (((PrimitiveTypeInfo) typeInfo).getPrimitiveCategory()) {\n+                case BOOLEAN:\n+                    return createBooleanStatistics(columnName, columnType, statistics);\n+                case BYTE:\n+                case SHORT:\n+                case INT:\n+                case LONG:\n+                    return createLongStatistics(columnName, columnType, statistics);\n+                case FLOAT:\n+                case DOUBLE:\n+                    return createDoubleStatistics(columnName, columnType, statistics);\n+                case STRING:\n+                case VARCHAR:\n+                case CHAR:\n+                    return createStringStatistics(columnName, columnType, statistics, rowCount);\n+                case DATE:\n+                    return createDateStatistics(columnName, columnType, statistics);\n+                case TIMESTAMP:\n+                    return createLongStatistics(columnName, columnType, statistics);\n+                case BINARY:\n+                    return createBinaryStatistics(columnName, columnType, statistics, rowCount);\n+                case DECIMAL:\n+                    return createDecimalStatistics(columnName, columnType, statistics);\n+                default:\n+                    throw new IllegalArgumentException(format(\"unsupported type: %s\", columnType));\n+            }\n+        }\n+        else if (typeInfo.getCategory() == STRUCT || typeInfo.getCategory() == MAP) {\n+            return new ColumnStatisticsObj();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU2OTc0NA=="}, "originalCommit": {"oid": "5996215ea4cfe09a21194ab26d1c18d23a6f7abb"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk3NTY2OQ==", "bodyText": "@sujay-jain @yingsu00 @rschlussel It seems like ANALYZE statement never collected statistics for complex types, hence, fixing ANALYZE to not fail and produce empty statistics is a reasonable change. We may want to create an issue to add support for collecting stats for complex types, but priority of this would not be high and this can be handled separately at some future time.", "url": "https://github.com/prestodb/presto/pull/14532#discussion_r425975669", "createdAt": "2020-05-15T18:27:23Z", "author": {"login": "mbasmanova"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/thrift/ThriftMetastoreUtil.java", "diffHunk": "@@ -691,32 +693,39 @@ private static StorageDescriptor makeStorageDescriptor(String tableName, List<Co\n     public static ColumnStatisticsObj createMetastoreColumnStatistics(String columnName, HiveType columnType, HiveColumnStatistics statistics, OptionalLong rowCount)\n     {\n         TypeInfo typeInfo = columnType.getTypeInfo();\n-        checkArgument(typeInfo.getCategory() == PRIMITIVE, \"unsupported type: %s\", columnType);\n-        switch (((PrimitiveTypeInfo) typeInfo).getPrimitiveCategory()) {\n-            case BOOLEAN:\n-                return createBooleanStatistics(columnName, columnType, statistics);\n-            case BYTE:\n-            case SHORT:\n-            case INT:\n-            case LONG:\n-                return createLongStatistics(columnName, columnType, statistics);\n-            case FLOAT:\n-            case DOUBLE:\n-                return createDoubleStatistics(columnName, columnType, statistics);\n-            case STRING:\n-            case VARCHAR:\n-            case CHAR:\n-                return createStringStatistics(columnName, columnType, statistics, rowCount);\n-            case DATE:\n-                return createDateStatistics(columnName, columnType, statistics);\n-            case TIMESTAMP:\n-                return createLongStatistics(columnName, columnType, statistics);\n-            case BINARY:\n-                return createBinaryStatistics(columnName, columnType, statistics, rowCount);\n-            case DECIMAL:\n-                return createDecimalStatistics(columnName, columnType, statistics);\n-            default:\n-                throw new IllegalArgumentException(format(\"unsupported type: %s\", columnType));\n+        if (typeInfo.getCategory() == PRIMITIVE) {\n+            switch (((PrimitiveTypeInfo) typeInfo).getPrimitiveCategory()) {\n+                case BOOLEAN:\n+                    return createBooleanStatistics(columnName, columnType, statistics);\n+                case BYTE:\n+                case SHORT:\n+                case INT:\n+                case LONG:\n+                    return createLongStatistics(columnName, columnType, statistics);\n+                case FLOAT:\n+                case DOUBLE:\n+                    return createDoubleStatistics(columnName, columnType, statistics);\n+                case STRING:\n+                case VARCHAR:\n+                case CHAR:\n+                    return createStringStatistics(columnName, columnType, statistics, rowCount);\n+                case DATE:\n+                    return createDateStatistics(columnName, columnType, statistics);\n+                case TIMESTAMP:\n+                    return createLongStatistics(columnName, columnType, statistics);\n+                case BINARY:\n+                    return createBinaryStatistics(columnName, columnType, statistics, rowCount);\n+                case DECIMAL:\n+                    return createDecimalStatistics(columnName, columnType, statistics);\n+                default:\n+                    throw new IllegalArgumentException(format(\"unsupported type: %s\", columnType));\n+            }\n+        }\n+        else if (typeInfo.getCategory() == STRUCT || typeInfo.getCategory() == MAP) {\n+            return new ColumnStatisticsObj();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU2OTc0NA=="}, "originalCommit": {"oid": "5996215ea4cfe09a21194ab26d1c18d23a6f7abb"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAyODE3Ng==", "bodyText": "Sure, but this just seems like such a quick thing to test out that I feel like it makes sense to try it now", "url": "https://github.com/prestodb/presto/pull/14532#discussion_r426028176", "createdAt": "2020-05-15T20:20:39Z", "author": {"login": "rschlussel"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/thrift/ThriftMetastoreUtil.java", "diffHunk": "@@ -691,32 +693,39 @@ private static StorageDescriptor makeStorageDescriptor(String tableName, List<Co\n     public static ColumnStatisticsObj createMetastoreColumnStatistics(String columnName, HiveType columnType, HiveColumnStatistics statistics, OptionalLong rowCount)\n     {\n         TypeInfo typeInfo = columnType.getTypeInfo();\n-        checkArgument(typeInfo.getCategory() == PRIMITIVE, \"unsupported type: %s\", columnType);\n-        switch (((PrimitiveTypeInfo) typeInfo).getPrimitiveCategory()) {\n-            case BOOLEAN:\n-                return createBooleanStatistics(columnName, columnType, statistics);\n-            case BYTE:\n-            case SHORT:\n-            case INT:\n-            case LONG:\n-                return createLongStatistics(columnName, columnType, statistics);\n-            case FLOAT:\n-            case DOUBLE:\n-                return createDoubleStatistics(columnName, columnType, statistics);\n-            case STRING:\n-            case VARCHAR:\n-            case CHAR:\n-                return createStringStatistics(columnName, columnType, statistics, rowCount);\n-            case DATE:\n-                return createDateStatistics(columnName, columnType, statistics);\n-            case TIMESTAMP:\n-                return createLongStatistics(columnName, columnType, statistics);\n-            case BINARY:\n-                return createBinaryStatistics(columnName, columnType, statistics, rowCount);\n-            case DECIMAL:\n-                return createDecimalStatistics(columnName, columnType, statistics);\n-            default:\n-                throw new IllegalArgumentException(format(\"unsupported type: %s\", columnType));\n+        if (typeInfo.getCategory() == PRIMITIVE) {\n+            switch (((PrimitiveTypeInfo) typeInfo).getPrimitiveCategory()) {\n+                case BOOLEAN:\n+                    return createBooleanStatistics(columnName, columnType, statistics);\n+                case BYTE:\n+                case SHORT:\n+                case INT:\n+                case LONG:\n+                    return createLongStatistics(columnName, columnType, statistics);\n+                case FLOAT:\n+                case DOUBLE:\n+                    return createDoubleStatistics(columnName, columnType, statistics);\n+                case STRING:\n+                case VARCHAR:\n+                case CHAR:\n+                    return createStringStatistics(columnName, columnType, statistics, rowCount);\n+                case DATE:\n+                    return createDateStatistics(columnName, columnType, statistics);\n+                case TIMESTAMP:\n+                    return createLongStatistics(columnName, columnType, statistics);\n+                case BINARY:\n+                    return createBinaryStatistics(columnName, columnType, statistics, rowCount);\n+                case DECIMAL:\n+                    return createDecimalStatistics(columnName, columnType, statistics);\n+                default:\n+                    throw new IllegalArgumentException(format(\"unsupported type: %s\", columnType));\n+            }\n+        }\n+        else if (typeInfo.getCategory() == STRUCT || typeInfo.getCategory() == MAP) {\n+            return new ColumnStatisticsObj();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU2OTc0NA=="}, "originalCommit": {"oid": "5996215ea4cfe09a21194ab26d1c18d23a6f7abb"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAyOTkzNA==", "bodyText": "Also @sujay-jain  can you show the show stats output for the current implementation.  Just to confirm the behavior is the same.", "url": "https://github.com/prestodb/presto/pull/14532#discussion_r426029934", "createdAt": "2020-05-15T20:24:50Z", "author": {"login": "rschlussel"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/thrift/ThriftMetastoreUtil.java", "diffHunk": "@@ -691,32 +693,39 @@ private static StorageDescriptor makeStorageDescriptor(String tableName, List<Co\n     public static ColumnStatisticsObj createMetastoreColumnStatistics(String columnName, HiveType columnType, HiveColumnStatistics statistics, OptionalLong rowCount)\n     {\n         TypeInfo typeInfo = columnType.getTypeInfo();\n-        checkArgument(typeInfo.getCategory() == PRIMITIVE, \"unsupported type: %s\", columnType);\n-        switch (((PrimitiveTypeInfo) typeInfo).getPrimitiveCategory()) {\n-            case BOOLEAN:\n-                return createBooleanStatistics(columnName, columnType, statistics);\n-            case BYTE:\n-            case SHORT:\n-            case INT:\n-            case LONG:\n-                return createLongStatistics(columnName, columnType, statistics);\n-            case FLOAT:\n-            case DOUBLE:\n-                return createDoubleStatistics(columnName, columnType, statistics);\n-            case STRING:\n-            case VARCHAR:\n-            case CHAR:\n-                return createStringStatistics(columnName, columnType, statistics, rowCount);\n-            case DATE:\n-                return createDateStatistics(columnName, columnType, statistics);\n-            case TIMESTAMP:\n-                return createLongStatistics(columnName, columnType, statistics);\n-            case BINARY:\n-                return createBinaryStatistics(columnName, columnType, statistics, rowCount);\n-            case DECIMAL:\n-                return createDecimalStatistics(columnName, columnType, statistics);\n-            default:\n-                throw new IllegalArgumentException(format(\"unsupported type: %s\", columnType));\n+        if (typeInfo.getCategory() == PRIMITIVE) {\n+            switch (((PrimitiveTypeInfo) typeInfo).getPrimitiveCategory()) {\n+                case BOOLEAN:\n+                    return createBooleanStatistics(columnName, columnType, statistics);\n+                case BYTE:\n+                case SHORT:\n+                case INT:\n+                case LONG:\n+                    return createLongStatistics(columnName, columnType, statistics);\n+                case FLOAT:\n+                case DOUBLE:\n+                    return createDoubleStatistics(columnName, columnType, statistics);\n+                case STRING:\n+                case VARCHAR:\n+                case CHAR:\n+                    return createStringStatistics(columnName, columnType, statistics, rowCount);\n+                case DATE:\n+                    return createDateStatistics(columnName, columnType, statistics);\n+                case TIMESTAMP:\n+                    return createLongStatistics(columnName, columnType, statistics);\n+                case BINARY:\n+                    return createBinaryStatistics(columnName, columnType, statistics, rowCount);\n+                case DECIMAL:\n+                    return createDecimalStatistics(columnName, columnType, statistics);\n+                default:\n+                    throw new IllegalArgumentException(format(\"unsupported type: %s\", columnType));\n+            }\n+        }\n+        else if (typeInfo.getCategory() == STRUCT || typeInfo.getCategory() == MAP) {\n+            return new ColumnStatisticsObj();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU2OTc0NA=="}, "originalCommit": {"oid": "5996215ea4cfe09a21194ab26d1c18d23a6f7abb"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc5MTM0NQ==", "bodyText": "Thanks @sujay-jain . I'm ok with collecting the actual stats in a separate task/issue.", "url": "https://github.com/prestodb/presto/pull/14532#discussion_r426791345", "createdAt": "2020-05-18T17:40:13Z", "author": {"login": "yingsu00"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/thrift/ThriftMetastoreUtil.java", "diffHunk": "@@ -691,32 +693,39 @@ private static StorageDescriptor makeStorageDescriptor(String tableName, List<Co\n     public static ColumnStatisticsObj createMetastoreColumnStatistics(String columnName, HiveType columnType, HiveColumnStatistics statistics, OptionalLong rowCount)\n     {\n         TypeInfo typeInfo = columnType.getTypeInfo();\n-        checkArgument(typeInfo.getCategory() == PRIMITIVE, \"unsupported type: %s\", columnType);\n-        switch (((PrimitiveTypeInfo) typeInfo).getPrimitiveCategory()) {\n-            case BOOLEAN:\n-                return createBooleanStatistics(columnName, columnType, statistics);\n-            case BYTE:\n-            case SHORT:\n-            case INT:\n-            case LONG:\n-                return createLongStatistics(columnName, columnType, statistics);\n-            case FLOAT:\n-            case DOUBLE:\n-                return createDoubleStatistics(columnName, columnType, statistics);\n-            case STRING:\n-            case VARCHAR:\n-            case CHAR:\n-                return createStringStatistics(columnName, columnType, statistics, rowCount);\n-            case DATE:\n-                return createDateStatistics(columnName, columnType, statistics);\n-            case TIMESTAMP:\n-                return createLongStatistics(columnName, columnType, statistics);\n-            case BINARY:\n-                return createBinaryStatistics(columnName, columnType, statistics, rowCount);\n-            case DECIMAL:\n-                return createDecimalStatistics(columnName, columnType, statistics);\n-            default:\n-                throw new IllegalArgumentException(format(\"unsupported type: %s\", columnType));\n+        if (typeInfo.getCategory() == PRIMITIVE) {\n+            switch (((PrimitiveTypeInfo) typeInfo).getPrimitiveCategory()) {\n+                case BOOLEAN:\n+                    return createBooleanStatistics(columnName, columnType, statistics);\n+                case BYTE:\n+                case SHORT:\n+                case INT:\n+                case LONG:\n+                    return createLongStatistics(columnName, columnType, statistics);\n+                case FLOAT:\n+                case DOUBLE:\n+                    return createDoubleStatistics(columnName, columnType, statistics);\n+                case STRING:\n+                case VARCHAR:\n+                case CHAR:\n+                    return createStringStatistics(columnName, columnType, statistics, rowCount);\n+                case DATE:\n+                    return createDateStatistics(columnName, columnType, statistics);\n+                case TIMESTAMP:\n+                    return createLongStatistics(columnName, columnType, statistics);\n+                case BINARY:\n+                    return createBinaryStatistics(columnName, columnType, statistics, rowCount);\n+                case DECIMAL:\n+                    return createDecimalStatistics(columnName, columnType, statistics);\n+                default:\n+                    throw new IllegalArgumentException(format(\"unsupported type: %s\", columnType));\n+            }\n+        }\n+        else if (typeInfo.getCategory() == STRUCT || typeInfo.getCategory() == MAP) {\n+            return new ColumnStatisticsObj();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU2OTc0NA=="}, "originalCommit": {"oid": "5996215ea4cfe09a21194ab26d1c18d23a6f7abb"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM3NDYxNg==", "bodyText": "I agree with @yingsu00 here. I can't tell if the hive metastore accepts column stats for struct types (for the non type specific fields), but if it does and we have the stats here, I think you should create a proper stats object here with those things set\n\nI don't see Struct or Map type ColumnStatsData in org.apache.hadoop.hive.metastore.api like there are ColumnStatsData types for primitives eg: BooleanColumnStatsData. As far as I can tell this is not supported by default - we may have to implement something on our own.\n@rschlussel  let me know your thoughts regarding this and we can create a task/issue for it.", "url": "https://github.com/prestodb/presto/pull/14532#discussion_r427374616", "createdAt": "2020-05-19T15:03:00Z", "author": {"login": "sujay-jain"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/thrift/ThriftMetastoreUtil.java", "diffHunk": "@@ -691,32 +693,39 @@ private static StorageDescriptor makeStorageDescriptor(String tableName, List<Co\n     public static ColumnStatisticsObj createMetastoreColumnStatistics(String columnName, HiveType columnType, HiveColumnStatistics statistics, OptionalLong rowCount)\n     {\n         TypeInfo typeInfo = columnType.getTypeInfo();\n-        checkArgument(typeInfo.getCategory() == PRIMITIVE, \"unsupported type: %s\", columnType);\n-        switch (((PrimitiveTypeInfo) typeInfo).getPrimitiveCategory()) {\n-            case BOOLEAN:\n-                return createBooleanStatistics(columnName, columnType, statistics);\n-            case BYTE:\n-            case SHORT:\n-            case INT:\n-            case LONG:\n-                return createLongStatistics(columnName, columnType, statistics);\n-            case FLOAT:\n-            case DOUBLE:\n-                return createDoubleStatistics(columnName, columnType, statistics);\n-            case STRING:\n-            case VARCHAR:\n-            case CHAR:\n-                return createStringStatistics(columnName, columnType, statistics, rowCount);\n-            case DATE:\n-                return createDateStatistics(columnName, columnType, statistics);\n-            case TIMESTAMP:\n-                return createLongStatistics(columnName, columnType, statistics);\n-            case BINARY:\n-                return createBinaryStatistics(columnName, columnType, statistics, rowCount);\n-            case DECIMAL:\n-                return createDecimalStatistics(columnName, columnType, statistics);\n-            default:\n-                throw new IllegalArgumentException(format(\"unsupported type: %s\", columnType));\n+        if (typeInfo.getCategory() == PRIMITIVE) {\n+            switch (((PrimitiveTypeInfo) typeInfo).getPrimitiveCategory()) {\n+                case BOOLEAN:\n+                    return createBooleanStatistics(columnName, columnType, statistics);\n+                case BYTE:\n+                case SHORT:\n+                case INT:\n+                case LONG:\n+                    return createLongStatistics(columnName, columnType, statistics);\n+                case FLOAT:\n+                case DOUBLE:\n+                    return createDoubleStatistics(columnName, columnType, statistics);\n+                case STRING:\n+                case VARCHAR:\n+                case CHAR:\n+                    return createStringStatistics(columnName, columnType, statistics, rowCount);\n+                case DATE:\n+                    return createDateStatistics(columnName, columnType, statistics);\n+                case TIMESTAMP:\n+                    return createLongStatistics(columnName, columnType, statistics);\n+                case BINARY:\n+                    return createBinaryStatistics(columnName, columnType, statistics, rowCount);\n+                case DECIMAL:\n+                    return createDecimalStatistics(columnName, columnType, statistics);\n+                default:\n+                    throw new IllegalArgumentException(format(\"unsupported type: %s\", columnType));\n+            }\n+        }\n+        else if (typeInfo.getCategory() == STRUCT || typeInfo.getCategory() == MAP) {\n+            return new ColumnStatisticsObj();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU2OTc0NA=="}, "originalCommit": {"oid": "5996215ea4cfe09a21194ab26d1c18d23a6f7abb"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM3NjEwOA==", "bodyText": "Here's an output for analyze and show stats with my current change\npresto:sj_test> select * from test;\n     a      | b | c \n------------+---+---\n {b=1, c=2} | 3 | a \n(1 row)\n\npresto:sj_test> analyze test;\nANALYZE: 1 row\n\nQuery 20200519_055255_00001_xtxwu, FINISHED, 1 node\nSplits: 35 total, 35 done (100.00%)\n0:01 [1 rows, 464B] [0 rows/s, 392B/s]\n\npresto:sj_test> show stats for test;\n column_name | data_size | distinct_values_count | nulls_fraction | row_count | low_value | high_value \n-------------+-----------+-----------------------+----------------+-----------+-----------+------------\n a           | NULL      | NULL                  | NULL           | NULL      | NULL      | NULL       \n b           | NULL      |                   1.0 |            0.0 | NULL      | 3         | 3          \n c           |       1.0 |                   1.0 |            0.0 | NULL      | NULL      | NULL       \n NULL        | NULL      | NULL                  | NULL           |       1.0 | NULL      | NULL       \n(4 rows)\n\nQuery 20200519_055302_00002_xtxwu, FINISHED, 1 node\nSplits: 1 total, 1 done (100.00%)\n0:00 [0 rows, 0B] [0 rows/s, 0B/s]", "url": "https://github.com/prestodb/presto/pull/14532#discussion_r427376108", "createdAt": "2020-05-19T15:04:56Z", "author": {"login": "sujay-jain"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/thrift/ThriftMetastoreUtil.java", "diffHunk": "@@ -691,32 +693,39 @@ private static StorageDescriptor makeStorageDescriptor(String tableName, List<Co\n     public static ColumnStatisticsObj createMetastoreColumnStatistics(String columnName, HiveType columnType, HiveColumnStatistics statistics, OptionalLong rowCount)\n     {\n         TypeInfo typeInfo = columnType.getTypeInfo();\n-        checkArgument(typeInfo.getCategory() == PRIMITIVE, \"unsupported type: %s\", columnType);\n-        switch (((PrimitiveTypeInfo) typeInfo).getPrimitiveCategory()) {\n-            case BOOLEAN:\n-                return createBooleanStatistics(columnName, columnType, statistics);\n-            case BYTE:\n-            case SHORT:\n-            case INT:\n-            case LONG:\n-                return createLongStatistics(columnName, columnType, statistics);\n-            case FLOAT:\n-            case DOUBLE:\n-                return createDoubleStatistics(columnName, columnType, statistics);\n-            case STRING:\n-            case VARCHAR:\n-            case CHAR:\n-                return createStringStatistics(columnName, columnType, statistics, rowCount);\n-            case DATE:\n-                return createDateStatistics(columnName, columnType, statistics);\n-            case TIMESTAMP:\n-                return createLongStatistics(columnName, columnType, statistics);\n-            case BINARY:\n-                return createBinaryStatistics(columnName, columnType, statistics, rowCount);\n-            case DECIMAL:\n-                return createDecimalStatistics(columnName, columnType, statistics);\n-            default:\n-                throw new IllegalArgumentException(format(\"unsupported type: %s\", columnType));\n+        if (typeInfo.getCategory() == PRIMITIVE) {\n+            switch (((PrimitiveTypeInfo) typeInfo).getPrimitiveCategory()) {\n+                case BOOLEAN:\n+                    return createBooleanStatistics(columnName, columnType, statistics);\n+                case BYTE:\n+                case SHORT:\n+                case INT:\n+                case LONG:\n+                    return createLongStatistics(columnName, columnType, statistics);\n+                case FLOAT:\n+                case DOUBLE:\n+                    return createDoubleStatistics(columnName, columnType, statistics);\n+                case STRING:\n+                case VARCHAR:\n+                case CHAR:\n+                    return createStringStatistics(columnName, columnType, statistics, rowCount);\n+                case DATE:\n+                    return createDateStatistics(columnName, columnType, statistics);\n+                case TIMESTAMP:\n+                    return createLongStatistics(columnName, columnType, statistics);\n+                case BINARY:\n+                    return createBinaryStatistics(columnName, columnType, statistics, rowCount);\n+                case DECIMAL:\n+                    return createDecimalStatistics(columnName, columnType, statistics);\n+                default:\n+                    throw new IllegalArgumentException(format(\"unsupported type: %s\", columnType));\n+            }\n+        }\n+        else if (typeInfo.getCategory() == STRUCT || typeInfo.getCategory() == MAP) {\n+            return new ColumnStatisticsObj();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU2OTc0NA=="}, "originalCommit": {"oid": "5996215ea4cfe09a21194ab26d1c18d23a6f7abb"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM4NjQyOQ==", "bodyText": "@sujay-jain nevermind then.  It was just an opportunisitic suggestion if it was easy.", "url": "https://github.com/prestodb/presto/pull/14532#discussion_r427386429", "createdAt": "2020-05-19T15:18:35Z", "author": {"login": "rschlussel"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/thrift/ThriftMetastoreUtil.java", "diffHunk": "@@ -691,32 +693,39 @@ private static StorageDescriptor makeStorageDescriptor(String tableName, List<Co\n     public static ColumnStatisticsObj createMetastoreColumnStatistics(String columnName, HiveType columnType, HiveColumnStatistics statistics, OptionalLong rowCount)\n     {\n         TypeInfo typeInfo = columnType.getTypeInfo();\n-        checkArgument(typeInfo.getCategory() == PRIMITIVE, \"unsupported type: %s\", columnType);\n-        switch (((PrimitiveTypeInfo) typeInfo).getPrimitiveCategory()) {\n-            case BOOLEAN:\n-                return createBooleanStatistics(columnName, columnType, statistics);\n-            case BYTE:\n-            case SHORT:\n-            case INT:\n-            case LONG:\n-                return createLongStatistics(columnName, columnType, statistics);\n-            case FLOAT:\n-            case DOUBLE:\n-                return createDoubleStatistics(columnName, columnType, statistics);\n-            case STRING:\n-            case VARCHAR:\n-            case CHAR:\n-                return createStringStatistics(columnName, columnType, statistics, rowCount);\n-            case DATE:\n-                return createDateStatistics(columnName, columnType, statistics);\n-            case TIMESTAMP:\n-                return createLongStatistics(columnName, columnType, statistics);\n-            case BINARY:\n-                return createBinaryStatistics(columnName, columnType, statistics, rowCount);\n-            case DECIMAL:\n-                return createDecimalStatistics(columnName, columnType, statistics);\n-            default:\n-                throw new IllegalArgumentException(format(\"unsupported type: %s\", columnType));\n+        if (typeInfo.getCategory() == PRIMITIVE) {\n+            switch (((PrimitiveTypeInfo) typeInfo).getPrimitiveCategory()) {\n+                case BOOLEAN:\n+                    return createBooleanStatistics(columnName, columnType, statistics);\n+                case BYTE:\n+                case SHORT:\n+                case INT:\n+                case LONG:\n+                    return createLongStatistics(columnName, columnType, statistics);\n+                case FLOAT:\n+                case DOUBLE:\n+                    return createDoubleStatistics(columnName, columnType, statistics);\n+                case STRING:\n+                case VARCHAR:\n+                case CHAR:\n+                    return createStringStatistics(columnName, columnType, statistics, rowCount);\n+                case DATE:\n+                    return createDateStatistics(columnName, columnType, statistics);\n+                case TIMESTAMP:\n+                    return createLongStatistics(columnName, columnType, statistics);\n+                case BINARY:\n+                    return createBinaryStatistics(columnName, columnType, statistics, rowCount);\n+                case DECIMAL:\n+                    return createDecimalStatistics(columnName, columnType, statistics);\n+                default:\n+                    throw new IllegalArgumentException(format(\"unsupported type: %s\", columnType));\n+            }\n+        }\n+        else if (typeInfo.getCategory() == STRUCT || typeInfo.getCategory() == MAP) {\n+            return new ColumnStatisticsObj();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU2OTc0NA=="}, "originalCommit": {"oid": "5996215ea4cfe09a21194ab26d1c18d23a6f7abb"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MjYwNzMzOnYy", "diffSide": "RIGHT", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/thrift/ThriftMetastoreUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxODoyMzowNFrOGWPXOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMDoyNjoxMVrOGWS1vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk3MzU2Mg==", "bodyText": "@sujay-jain LIST type needs to be handled as well, right? Otherwise ANALYZE will fail on tables with columns of array/list type.", "url": "https://github.com/prestodb/presto/pull/14532#discussion_r425973562", "createdAt": "2020-05-15T18:23:04Z", "author": {"login": "mbasmanova"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/thrift/ThriftMetastoreUtil.java", "diffHunk": "@@ -691,33 +693,40 @@ private static StorageDescriptor makeStorageDescriptor(String tableName, List<Co\n     public static ColumnStatisticsObj createMetastoreColumnStatistics(String columnName, HiveType columnType, HiveColumnStatistics statistics, OptionalLong rowCount)\n     {\n         TypeInfo typeInfo = columnType.getTypeInfo();\n-        checkArgument(typeInfo.getCategory() == PRIMITIVE, \"unsupported type: %s\", columnType);\n-        switch (((PrimitiveTypeInfo) typeInfo).getPrimitiveCategory()) {\n-            case BOOLEAN:\n-                return createBooleanStatistics(columnName, columnType, statistics);\n-            case BYTE:\n-            case SHORT:\n-            case INT:\n-            case LONG:\n-                return createLongStatistics(columnName, columnType, statistics);\n-            case FLOAT:\n-            case DOUBLE:\n-                return createDoubleStatistics(columnName, columnType, statistics);\n-            case STRING:\n-            case VARCHAR:\n-            case CHAR:\n-                return createStringStatistics(columnName, columnType, statistics, rowCount);\n-            case DATE:\n-                return createDateStatistics(columnName, columnType, statistics);\n-            case TIMESTAMP:\n-                return createLongStatistics(columnName, columnType, statistics);\n-            case BINARY:\n-                return createBinaryStatistics(columnName, columnType, statistics, rowCount);\n-            case DECIMAL:\n-                return createDecimalStatistics(columnName, columnType, statistics);\n-            default:\n-                throw new IllegalArgumentException(format(\"unsupported type: %s\", columnType));\n+        if (typeInfo.getCategory() == PRIMITIVE) {\n+            switch (((PrimitiveTypeInfo) typeInfo).getPrimitiveCategory()) {\n+                case BOOLEAN:\n+                    return createBooleanStatistics(columnName, columnType, statistics);\n+                case BYTE:\n+                case SHORT:\n+                case INT:\n+                case LONG:\n+                    return createLongStatistics(columnName, columnType, statistics);\n+                case FLOAT:\n+                case DOUBLE:\n+                    return createDoubleStatistics(columnName, columnType, statistics);\n+                case STRING:\n+                case VARCHAR:\n+                case CHAR:\n+                    return createStringStatistics(columnName, columnType, statistics, rowCount);\n+                case DATE:\n+                    return createDateStatistics(columnName, columnType, statistics);\n+                case TIMESTAMP:\n+                    return createLongStatistics(columnName, columnType, statistics);\n+                case BINARY:\n+                    return createBinaryStatistics(columnName, columnType, statistics, rowCount);\n+                case DECIMAL:\n+                    return createDecimalStatistics(columnName, columnType, statistics);\n+                default:\n+                    throw new IllegalArgumentException(format(\"unsupported type: %s\", columnType));\n+            }\n         }\n+\n+        if (typeInfo.getCategory() == STRUCT || typeInfo.getCategory() == MAP) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "384e8e6e8b5b45820ba0378c9c70a5c79dd4c8c8"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAzMDUyNw==", "bodyText": "maybe just make this an else to make sure we aren't missing anything else. I don't see a reason we need to throw an unsupported type exception for anything if we can return null stats.", "url": "https://github.com/prestodb/presto/pull/14532#discussion_r426030527", "createdAt": "2020-05-15T20:26:11Z", "author": {"login": "rschlussel"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/thrift/ThriftMetastoreUtil.java", "diffHunk": "@@ -691,33 +693,40 @@ private static StorageDescriptor makeStorageDescriptor(String tableName, List<Co\n     public static ColumnStatisticsObj createMetastoreColumnStatistics(String columnName, HiveType columnType, HiveColumnStatistics statistics, OptionalLong rowCount)\n     {\n         TypeInfo typeInfo = columnType.getTypeInfo();\n-        checkArgument(typeInfo.getCategory() == PRIMITIVE, \"unsupported type: %s\", columnType);\n-        switch (((PrimitiveTypeInfo) typeInfo).getPrimitiveCategory()) {\n-            case BOOLEAN:\n-                return createBooleanStatistics(columnName, columnType, statistics);\n-            case BYTE:\n-            case SHORT:\n-            case INT:\n-            case LONG:\n-                return createLongStatistics(columnName, columnType, statistics);\n-            case FLOAT:\n-            case DOUBLE:\n-                return createDoubleStatistics(columnName, columnType, statistics);\n-            case STRING:\n-            case VARCHAR:\n-            case CHAR:\n-                return createStringStatistics(columnName, columnType, statistics, rowCount);\n-            case DATE:\n-                return createDateStatistics(columnName, columnType, statistics);\n-            case TIMESTAMP:\n-                return createLongStatistics(columnName, columnType, statistics);\n-            case BINARY:\n-                return createBinaryStatistics(columnName, columnType, statistics, rowCount);\n-            case DECIMAL:\n-                return createDecimalStatistics(columnName, columnType, statistics);\n-            default:\n-                throw new IllegalArgumentException(format(\"unsupported type: %s\", columnType));\n+        if (typeInfo.getCategory() == PRIMITIVE) {\n+            switch (((PrimitiveTypeInfo) typeInfo).getPrimitiveCategory()) {\n+                case BOOLEAN:\n+                    return createBooleanStatistics(columnName, columnType, statistics);\n+                case BYTE:\n+                case SHORT:\n+                case INT:\n+                case LONG:\n+                    return createLongStatistics(columnName, columnType, statistics);\n+                case FLOAT:\n+                case DOUBLE:\n+                    return createDoubleStatistics(columnName, columnType, statistics);\n+                case STRING:\n+                case VARCHAR:\n+                case CHAR:\n+                    return createStringStatistics(columnName, columnType, statistics, rowCount);\n+                case DATE:\n+                    return createDateStatistics(columnName, columnType, statistics);\n+                case TIMESTAMP:\n+                    return createLongStatistics(columnName, columnType, statistics);\n+                case BINARY:\n+                    return createBinaryStatistics(columnName, columnType, statistics, rowCount);\n+                case DECIMAL:\n+                    return createDecimalStatistics(columnName, columnType, statistics);\n+                default:\n+                    throw new IllegalArgumentException(format(\"unsupported type: %s\", columnType));\n+            }\n         }\n+\n+        if (typeInfo.getCategory() == STRUCT || typeInfo.getCategory() == MAP) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk3MzU2Mg=="}, "originalCommit": {"oid": "384e8e6e8b5b45820ba0378c9c70a5c79dd4c8c8"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MjYxMjQyOnYy", "diffSide": "RIGHT", "path": "presto-hive-metastore/src/test/java/com/facebook/presto/hive/metastore/thrift/TestThriftHiveMetastoreUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxODoyNDo0OFrOGWPacA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxODoyNDo0OFrOGWPacA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk3NDM4NA==", "bodyText": "@sujay-jain Would you also add end-to-end test to TestHiveTableStatistics?", "url": "https://github.com/prestodb/presto/pull/14532#discussion_r425974384", "createdAt": "2020-05-15T18:24:48Z", "author": {"login": "mbasmanova"}, "path": "presto-hive-metastore/src/test/java/com/facebook/presto/hive/metastore/thrift/TestThriftHiveMetastoreUtil.java", "diffHunk": "@@ -371,6 +373,13 @@ public void testBasicStatisticsRoundTrip()\n         testBasicStatisticsRoundTrip(new HiveBasicStatistics(OptionalLong.of(1), OptionalLong.of(2), OptionalLong.of(3), OptionalLong.of(4)));\n     }\n \n+    @Test\n+    public void testCreateMetastoreColumnStatisticsComplexTypes()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "384e8e6e8b5b45820ba0378c9c70a5c79dd4c8c8"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2640, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}