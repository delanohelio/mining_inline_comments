{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEyODQyNDQ2", "number": 15377, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMjo0NjoxMVrOEz-2uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMjo0NjoxMVrOEz-2uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTQyNjUxOnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/com/facebook/presto/orc/OrcWriter.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMjo0NjoxMVrOHriV_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwMTozNjowOFrOHrj_Jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQxMzUwMg==", "bodyText": "There are two changes here.\n\nCall approximate logical size, which is faster then getLogicalSizeInBytes()\nCalculate whole page, which may be slower\n\nHave you considered to not calculating the whole page by adding a function page.getApproximateRegionLogicalSizeInBytes(position = 0, length = 100) ? I am not sure how faster it would be, however it guarantees there will be no regression due to calculating the whole page.", "url": "https://github.com/prestodb/presto/pull/15377#discussion_r515413502", "createdAt": "2020-10-30T22:46:11Z", "author": {"login": "viczhang861"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/OrcWriter.java", "diffHunk": "@@ -309,8 +309,7 @@ public void write(Page page)\n         }\n \n         // avoid chunk with huge logical size\n-        int averageLogicalSizePerRow = estimateAverageLogicalSizePerRow(page);\n-        int maxChunkRowCount = max(1, chunkMaxLogicalBytes / max(1, averageLogicalSizePerRow));\n+        int maxChunkRowCount = toIntExact(max(1, chunkMaxLogicalBytes / max(1, page.getApproximateLogicalSizeInBytes() / page.getPositionCount())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12173d1d8ddd88821d3fb6aea1c998ef0e76db44"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQyMzE4OA==", "bodyText": "@viczhang861 Thanks for reviewing the PR so quickly! getApproximateRegionLogicalSizeInBytes is the same fast calculating a region as calculating a whole page. It is over 20x faster than getLogicalSizeInBytes() and do not allocate memory for DictionaryBlock as shown in #15272\nLet's see the difference for the two functions in DictionaryBlock\n@Override\n    public long getRegionLogicalSizeInBytes(int positionOffset, int length)\n    {\n        if (positionOffset == 0 && length == getPositionCount() && logicalSizeInBytes >= 0) {\n            return logicalSizeInBytes;\n        }\n\n        long sizeInBytes = 0;\n        long[] seenSizes = new long[dictionary.getPositionCount()];\n        Arrays.fill(seenSizes, -1L);\n        for (int i = positionOffset; i < positionOffset + length; i++) {\n            int position = getId(i);\n            if (seenSizes[position] < 0) {\n                seenSizes[position] = dictionary.getRegionLogicalSizeInBytes(position, 1);\n            }\n            sizeInBytes += seenSizes[position];\n        }\n\n        if (positionOffset == 0 && length == getPositionCount()) {\n            logicalSizeInBytes = sizeInBytes;\n        }\n\n        return sizeInBytes;\n    }\n\n    @Override\n    public long getApproximateRegionLogicalSizeInBytes(int position, int length)\n    {\n        int dictionaryPositionCount = dictionary.getPositionCount();\n        return dictionaryPositionCount == 0 ? 0 : dictionary.getApproximateRegionLogicalSizeInBytes(0, dictionaryPositionCount) * length / dictionaryPositionCount;\n    }\n\nThe bad thing in getRegionLogicalSizeInBytes was the memory allocation long[] seenSizes = new long[dictionary.getPositionCount()];.  getApproximateRegionLogicalSizeInBytes avoids this problem and just has scalar arithmetic operations.\nWith this in mind, calculating the size for the whole page is more accurate and advantageous.", "url": "https://github.com/prestodb/presto/pull/15377#discussion_r515423188", "createdAt": "2020-10-30T23:31:14Z", "author": {"login": "yingsu00"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/OrcWriter.java", "diffHunk": "@@ -309,8 +309,7 @@ public void write(Page page)\n         }\n \n         // avoid chunk with huge logical size\n-        int averageLogicalSizePerRow = estimateAverageLogicalSizePerRow(page);\n-        int maxChunkRowCount = max(1, chunkMaxLogicalBytes / max(1, averageLogicalSizePerRow));\n+        int maxChunkRowCount = toIntExact(max(1, chunkMaxLogicalBytes / max(1, page.getApproximateLogicalSizeInBytes() / page.getPositionCount())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQxMzUwMg=="}, "originalCommit": {"oid": "12173d1d8ddd88821d3fb6aea1c998ef0e76db44"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ0MDQyMw==", "bodyText": "@yingsu00 Thanks for the explanation !", "url": "https://github.com/prestodb/presto/pull/15377#discussion_r515440423", "createdAt": "2020-10-31T01:36:08Z", "author": {"login": "viczhang861"}, "path": "presto-orc/src/main/java/com/facebook/presto/orc/OrcWriter.java", "diffHunk": "@@ -309,8 +309,7 @@ public void write(Page page)\n         }\n \n         // avoid chunk with huge logical size\n-        int averageLogicalSizePerRow = estimateAverageLogicalSizePerRow(page);\n-        int maxChunkRowCount = max(1, chunkMaxLogicalBytes / max(1, averageLogicalSizePerRow));\n+        int maxChunkRowCount = toIntExact(max(1, chunkMaxLogicalBytes / max(1, page.getApproximateLogicalSizeInBytes() / page.getPositionCount())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQxMzUwMg=="}, "originalCommit": {"oid": "12173d1d8ddd88821d3fb6aea1c998ef0e76db44"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3352, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}