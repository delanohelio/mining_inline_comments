{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3ODcwMDYy", "number": 14906, "title": "Add a fast path using totalSize to plan join swapping", "bodyText": "For simple plans (join on two tables directly without intermediate operations), directly leverage the totalSize statistics to plan the join swapping, which avoids either the per-column statistics collection cost or the inaccurate size estimations from CBO statsCalculator (especially for nested data structures e.g., map<varchar, array>).\n== NO RELEASE NOTE ==", "createdAt": "2020-07-28T15:02:14Z", "url": "https://github.com/prestodb/presto/pull/14906", "merged": true, "mergeCommit": {"oid": "fecb4a9c690ef29952b2f25d63e83cc2dc68acb0"}, "closed": true, "closedAt": "2020-08-05T15:15:26Z", "author": {"login": "pguofb"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc5XzyigBqjM1OTQ4MjQzMjE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc77ajcgBqjM2MjQ3MzA5NzY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "11d20a3bbd669a2526b94028951394c0fff326f9", "author": {"user": {"login": "pguofb", "name": "Peizhen Guo"}}, "url": "https://github.com/prestodb/presto/commit/11d20a3bbd669a2526b94028951394c0fff326f9", "committedDate": "2020-07-28T13:30:36Z", "message": "[WIP] add fastPath using totalsize for simple plan\n\n- Add a totalSize field in TableStatistics.\n- Enable totalSize to be filled from getTableStatistics: enable\nMetastoreHiveStatsProvider to feed totalSize field from\nPartitionStatistics and use the rowSize before and after\nConnectorFilterStatsCalcService to estimate filted totalSize.\n- Make RuntimeReorderJoinSides directly use tableSize for simple plan."}, "afterCommit": {"oid": "44a1258fb7653ac211a97130e2642d4fa6526059", "author": {"user": {"login": "pguofb", "name": "Peizhen Guo"}}, "url": "https://github.com/prestodb/presto/commit/44a1258fb7653ac211a97130e2642d4fa6526059", "committedDate": "2020-07-28T15:02:30Z", "message": "Use totalSize statistics for simple join plan\n\n- Add a totalSize field in TableStatistics.\n- Enable totalSize to be filled from getTableStatistics: enable\nMetastoreHiveStatsProvider to feed totalSize field from\nPartitionStatistics and use the rowSize before and after\nConnectorFilterStatsCalcService to estimate filted totalSize.\n- Make RuntimeReorderJoinSides directly use tableSize for simple plan."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "44a1258fb7653ac211a97130e2642d4fa6526059", "author": {"user": {"login": "pguofb", "name": "Peizhen Guo"}}, "url": "https://github.com/prestodb/presto/commit/44a1258fb7653ac211a97130e2642d4fa6526059", "committedDate": "2020-07-28T15:02:30Z", "message": "Use totalSize statistics for simple join plan\n\n- Add a totalSize field in TableStatistics.\n- Enable totalSize to be filled from getTableStatistics: enable\nMetastoreHiveStatsProvider to feed totalSize field from\nPartitionStatistics and use the rowSize before and after\nConnectorFilterStatsCalcService to estimate filted totalSize.\n- Make RuntimeReorderJoinSides directly use tableSize for simple plan."}, "afterCommit": {"oid": "4aa4bb1e21284f4d0cc814795bc7a88b52abe50d", "author": {"user": {"login": "pguofb", "name": "Peizhen Guo"}}, "url": "https://github.com/prestodb/presto/commit/4aa4bb1e21284f4d0cc814795bc7a88b52abe50d", "committedDate": "2020-07-28T16:10:30Z", "message": "Use totalSize statistics for simple join plan\n\n- Add a totalSize field in TableStatistics.\n- Enable totalSize to be filled from getTableStatistics: enable\nMetastoreHiveStatsProvider to feed totalSize field from\nPartitionStatistics and use the rowSize before and after\nConnectorFilterStatsCalcService to estimate filted totalSize.\n- Make RuntimeReorderJoinSides directly use tableSize for simple plan."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4aa4bb1e21284f4d0cc814795bc7a88b52abe50d", "author": {"user": {"login": "pguofb", "name": "Peizhen Guo"}}, "url": "https://github.com/prestodb/presto/commit/4aa4bb1e21284f4d0cc814795bc7a88b52abe50d", "committedDate": "2020-07-28T16:10:30Z", "message": "Use totalSize statistics for simple join plan\n\n- Add a totalSize field in TableStatistics.\n- Enable totalSize to be filled from getTableStatistics: enable\nMetastoreHiveStatsProvider to feed totalSize field from\nPartitionStatistics and use the rowSize before and after\nConnectorFilterStatsCalcService to estimate filted totalSize.\n- Make RuntimeReorderJoinSides directly use tableSize for simple plan."}, "afterCommit": {"oid": "028e1479681ac19acded752d6616845ea72fb94c", "author": {"user": {"login": "pguofb", "name": "Peizhen Guo"}}, "url": "https://github.com/prestodb/presto/commit/028e1479681ac19acded752d6616845ea72fb94c", "committedDate": "2020-07-28T19:58:39Z", "message": "Use totalSize statistics for simple join plan\n\n- Add a totalSize field in TableStatistics.\n- Enable totalSize to be filled from getTableStatistics: enable\nMetastoreHiveStatsProvider to feed totalSize field from\nPartitionStatistics and use the rowSize before and after\nConnectorFilterStatsCalcService to estimate filted totalSize.\n- Make RuntimeReorderJoinSides directly use tableSize for simple plan."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "028e1479681ac19acded752d6616845ea72fb94c", "author": {"user": {"login": "pguofb", "name": "Peizhen Guo"}}, "url": "https://github.com/prestodb/presto/commit/028e1479681ac19acded752d6616845ea72fb94c", "committedDate": "2020-07-28T19:58:39Z", "message": "Use totalSize statistics for simple join plan\n\n- Add a totalSize field in TableStatistics.\n- Enable totalSize to be filled from getTableStatistics: enable\nMetastoreHiveStatsProvider to feed totalSize field from\nPartitionStatistics and use the rowSize before and after\nConnectorFilterStatsCalcService to estimate filted totalSize.\n- Make RuntimeReorderJoinSides directly use tableSize for simple plan."}, "afterCommit": {"oid": "dc5b8128a7ef8f39512216ec45bc50f466e5881d", "author": {"user": {"login": "pguofb", "name": "Peizhen Guo"}}, "url": "https://github.com/prestodb/presto/commit/dc5b8128a7ef8f39512216ec45bc50f466e5881d", "committedDate": "2020-07-28T20:08:01Z", "message": "Use totalSize statistics for simple join plan\n\n- Add a totalSize field in TableStatistics.\n- Enable totalSize to be filled from getTableStatistics: enable\nMetastoreHiveStatsProvider to feed totalSize field from\nPartitionStatistics and use the rowSize before and after\nConnectorFilterStatsCalcService to estimate filted totalSize.\n- Make RuntimeReorderJoinSides directly use tableSize for simple plan."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3ODc4ODQz", "url": "https://github.com/prestodb/presto/pull/14906#pullrequestreview-457878843", "createdAt": "2020-07-29T20:38:40Z", "commit": {"oid": "dc5b8128a7ef8f39512216ec45bc50f466e5881d"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDozODo0MFrOG5JRkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDo0Mjo1MVrOG5JaTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU3Mzk2OQ==", "bodyText": "I would create a method isUnmodifiedTableScan(PlanNode node) (or some other name that makes sense) that traverses the tree with a visitor and returns true if the only nodes it encounters are exchange and TableScan node (and maybe project node that doesn't reduce the number of columns).  then change the condition to\nif(isUnmodifiedScan(left) && isUnmodifiedScan(right))\n{\nleftScan = getLeftScan(left)\nrightScan = getRightScan (right)\n}\nthat way we keep our conditions to what we need and don't rely on the plan looking a particular way (e.g. what if there was an extra local exchange or something).", "url": "https://github.com/prestodb/presto/pull/14906#discussion_r462573969", "createdAt": "2020-07-29T20:38:40Z", "author": {"login": "rschlussel"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/RuntimeReorderJoinSides.java", "diffHunk": "@@ -66,9 +76,35 @@ public Result apply(JoinNode joinNode, Captures captures, Context context)\n             return Result.empty();\n         }\n \n-        StatsProvider statsProvider = context.getStatsProvider();\n-        double leftOutputSizeInBytes = statsProvider.getStats(joinNode.getLeft()).getOutputSizeInBytes(joinNode.getLeft().getOutputVariables());\n-        double rightOutputSizeInBytes = statsProvider.getStats(joinNode.getRight()).getOutputSizeInBytes(joinNode.getRight().getOutputVariables());\n+        double leftOutputSizeInBytes = Double.NaN;\n+        double rightOutputSizeInBytes = Double.NaN;\n+        PlanNode actualLeft = context.getLookup().resolve(joinNode.getLeft());\n+        PlanNode actualRight = context.getLookup().resolve(joinNode.getRight());\n+        if (actualLeft instanceof TableScanNode && actualRight instanceof ExchangeNode && actualRight.getSources().size() == 1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc5b8128a7ef8f39512216ec45bc50f466e5881d"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU3NjIwNw==", "bodyText": "what if instead of having these two separate paths, we just use the regular stats calculator path, but added an Optional totalSize (or NaN for absent cases) to PlanNodeStatsEstimate.  then if we call getOutputsizeInBytes()with all of the input variables, then we return that number, and otherwise we calculate as usual per-column. We'd have to handle it correctly in the stats calculators to populate it correctly.  But it would also allow non-materialized queries to benefit from this change.\n@arhimondr what do you think?", "url": "https://github.com/prestodb/presto/pull/14906#discussion_r462576207", "createdAt": "2020-07-29T20:42:51Z", "author": {"login": "rschlussel"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/RuntimeReorderJoinSides.java", "diffHunk": "@@ -66,9 +76,35 @@ public Result apply(JoinNode joinNode, Captures captures, Context context)\n             return Result.empty();\n         }\n \n-        StatsProvider statsProvider = context.getStatsProvider();\n-        double leftOutputSizeInBytes = statsProvider.getStats(joinNode.getLeft()).getOutputSizeInBytes(joinNode.getLeft().getOutputVariables());\n-        double rightOutputSizeInBytes = statsProvider.getStats(joinNode.getRight()).getOutputSizeInBytes(joinNode.getRight().getOutputVariables());\n+        double leftOutputSizeInBytes = Double.NaN;\n+        double rightOutputSizeInBytes = Double.NaN;\n+        PlanNode actualLeft = context.getLookup().resolve(joinNode.getLeft());\n+        PlanNode actualRight = context.getLookup().resolve(joinNode.getRight());\n+        if (actualLeft instanceof TableScanNode && actualRight instanceof ExchangeNode && actualRight.getSources().size() == 1\n+                && context.getLookup().resolve(actualRight.getSources().get(0)) instanceof TableScanNode) {\n+            // Simple plan is characterized as Join[leftSrc: TableScan, rightSrc: Exchange[src: TableScan]].\n+            // For simple plans, directly fetch the overall table sizes as the size of the join sides to have\n+            // accurate input bytes statistics and meanwhile avoid non-negligible cost of collecting and processing\n+            // per-column statistics.\n+            TableScanNode leftScan = (TableScanNode) actualLeft;\n+            TableScanNode rightScan = (TableScanNode) context.getLookup().resolve(actualRight.getSources().get(0));\n+            leftOutputSizeInBytes = metadata.getTableStatistics(context.getSession(),\n+                    leftScan.getTable(),\n+                    ImmutableList.copyOf(leftScan.getAssignments().values()),\n+                    new Constraint<>(leftScan.getCurrentConstraint())).getTotalSize().getValue();\n+            rightOutputSizeInBytes = metadata.getTableStatistics(context.getSession(),\n+                    rightScan.getTable(),\n+                    ImmutableList.copyOf(rightScan.getAssignments().values()),\n+                    new Constraint<>(rightScan.getCurrentConstraint())).getTotalSize().getValue();\n+        }\n+\n+        // Fall back using statsProvider to estimate left and right output size.\n+        if (Double.isNaN(leftOutputSizeInBytes) || Double.isNaN(rightOutputSizeInBytes)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc5b8128a7ef8f39512216ec45bc50f466e5881d"}, "originalPosition": 60}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dc5b8128a7ef8f39512216ec45bc50f466e5881d", "author": {"user": {"login": "pguofb", "name": "Peizhen Guo"}}, "url": "https://github.com/prestodb/presto/commit/dc5b8128a7ef8f39512216ec45bc50f466e5881d", "committedDate": "2020-07-28T20:08:01Z", "message": "Use totalSize statistics for simple join plan\n\n- Add a totalSize field in TableStatistics.\n- Enable totalSize to be filled from getTableStatistics: enable\nMetastoreHiveStatsProvider to feed totalSize field from\nPartitionStatistics and use the rowSize before and after\nConnectorFilterStatsCalcService to estimate filted totalSize.\n- Make RuntimeReorderJoinSides directly use tableSize for simple plan."}, "afterCommit": {"oid": "baa51984a88f88096663cefdae3e9b4d6c8f311b", "author": {"user": {"login": "pguofb", "name": "Peizhen Guo"}}, "url": "https://github.com/prestodb/presto/commit/baa51984a88f88096663cefdae3e9b4d6c8f311b", "committedDate": "2020-07-31T18:11:37Z", "message": "Add totalSize in PlanNodeStatsEstimate\n\n- add totalSize field in PlanNodeStatsEstimate.\n- Fill in the field from tableScanStatsRule.\n- Propagate through exchangeStatsRule.\n- Refactor RuntimeReorderJoinSides, try using getOutputSizeInBytes()\nwithout parameters to make use of totalSize statistics first if available\nfor simple plans.\n- Refactor RuntimeReorderJoinSides to use planNodeSearcher functions to\ncapture simple plans, instead of manually checking."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "baa51984a88f88096663cefdae3e9b4d6c8f311b", "author": {"user": {"login": "pguofb", "name": "Peizhen Guo"}}, "url": "https://github.com/prestodb/presto/commit/baa51984a88f88096663cefdae3e9b4d6c8f311b", "committedDate": "2020-07-31T18:11:37Z", "message": "Add totalSize in PlanNodeStatsEstimate\n\n- add totalSize field in PlanNodeStatsEstimate.\n- Fill in the field from tableScanStatsRule.\n- Propagate through exchangeStatsRule.\n- Refactor RuntimeReorderJoinSides, try using getOutputSizeInBytes()\nwithout parameters to make use of totalSize statistics first if available\nfor simple plans.\n- Refactor RuntimeReorderJoinSides to use planNodeSearcher functions to\ncapture simple plans, instead of manually checking."}, "afterCommit": {"oid": "7e2d6eff89e9a748b76196096262bd3738a5c49e", "author": {"user": {"login": "pguofb", "name": "Peizhen Guo"}}, "url": "https://github.com/prestodb/presto/commit/7e2d6eff89e9a748b76196096262bd3738a5c49e", "committedDate": "2020-07-31T19:35:42Z", "message": "Add totalSize in PlanNodeStatsEstimate\n\n- add totalSize field in PlanNodeStatsEstimate.\n- Fill in the field from tableScanStatsRule.\n- Propagate totalSize through exchangeStatsRule.\n- Refactor RuntimeReorderJoinSides, try using getOutputSizeInBytes()\nwithout parameters to make use of totalSize statistics first if available\nfor simple plans.\n- Refactor RuntimeReorderJoinSides to use planNodeSearcher functions to\ncapture simple plans, instead of manually checking."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7e2d6eff89e9a748b76196096262bd3738a5c49e", "author": {"user": {"login": "pguofb", "name": "Peizhen Guo"}}, "url": "https://github.com/prestodb/presto/commit/7e2d6eff89e9a748b76196096262bd3738a5c49e", "committedDate": "2020-07-31T19:35:42Z", "message": "Add totalSize in PlanNodeStatsEstimate\n\n- add totalSize field in PlanNodeStatsEstimate.\n- Fill in the field from tableScanStatsRule.\n- Propagate totalSize through exchangeStatsRule.\n- Refactor RuntimeReorderJoinSides, try using getOutputSizeInBytes()\nwithout parameters to make use of totalSize statistics first if available\nfor simple plans.\n- Refactor RuntimeReorderJoinSides to use planNodeSearcher functions to\ncapture simple plans, instead of manually checking."}, "afterCommit": {"oid": "2e0d27f5a897105fd13eebbdefe481261b537ff6", "author": {"user": {"login": "pguofb", "name": "Peizhen Guo"}}, "url": "https://github.com/prestodb/presto/commit/2e0d27f5a897105fd13eebbdefe481261b537ff6", "committedDate": "2020-08-03T14:14:21Z", "message": "Add totalSize in PlanNodeStatsEstimate\n\n- add totalSize field in PlanNodeStatsEstimate.\n- Fill in the field from tableScanStatsRule.\n- Propagate totalSize through exchangeStatsRule.\n- Refactor RuntimeReorderJoinSides, try using getOutputSizeInBytes()\nwithout parameters to make use of totalSize statistics first if available\nfor simple plans.\n- Refactor RuntimeReorderJoinSides to use planNodeSearcher functions to\ncapture simple plans, instead of manually checking."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2e0d27f5a897105fd13eebbdefe481261b537ff6", "author": {"user": {"login": "pguofb", "name": "Peizhen Guo"}}, "url": "https://github.com/prestodb/presto/commit/2e0d27f5a897105fd13eebbdefe481261b537ff6", "committedDate": "2020-08-03T14:14:21Z", "message": "Add totalSize in PlanNodeStatsEstimate\n\n- add totalSize field in PlanNodeStatsEstimate.\n- Fill in the field from tableScanStatsRule.\n- Propagate totalSize through exchangeStatsRule.\n- Refactor RuntimeReorderJoinSides, try using getOutputSizeInBytes()\nwithout parameters to make use of totalSize statistics first if available\nfor simple plans.\n- Refactor RuntimeReorderJoinSides to use planNodeSearcher functions to\ncapture simple plans, instead of manually checking."}, "afterCommit": {"oid": "6e6e09222c9d3dcbf8503743fc3f97858ccff883", "author": {"user": {"login": "pguofb", "name": "Peizhen Guo"}}, "url": "https://github.com/prestodb/presto/commit/6e6e09222c9d3dcbf8503743fc3f97858ccff883", "committedDate": "2020-08-03T18:33:05Z", "message": "Add totalSize in PlanNodeStatsEstimate\n\n- add totalSize field in PlanNodeStatsEstimate.\n- Fill in the field from tableScanStatsRule.\n- Propagate totalSize through exchangeStatsRule.\n- Refactor RuntimeReorderJoinSides, try using getOutputSizeInBytes()\nwithout parameters to make use of totalSize statistics first if available\nfor simple plans.\n- Refactor RuntimeReorderJoinSides to use planNodeSearcher functions to\ncapture simple plans, instead of manually checking."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwMjM1OTYy", "url": "https://github.com/prestodb/presto/pull/14906#pullrequestreview-460235962", "createdAt": "2020-08-03T18:06:24Z", "commit": {"oid": "2e0d27f5a897105fd13eebbdefe481261b537ff6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxODowNjoyNVrOG7DlOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxODowNjoyNVrOG7DlOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU3Nzg0OA==", "bodyText": "buildFrom() should also set the total size", "url": "https://github.com/prestodb/presto/pull/14906#discussion_r464577848", "createdAt": "2020-08-03T18:06:25Z", "author": {"login": "rschlussel"}, "path": "presto-main/src/main/java/com/facebook/presto/cost/PlanNodeStatsEstimate.java", "diffHunk": "@@ -170,38 +189,42 @@ public boolean equals(Object o)\n         }\n         PlanNodeStatsEstimate that = (PlanNodeStatsEstimate) o;\n         return Double.compare(outputRowCount, that.outputRowCount) == 0 &&\n+                Double.compare(totalSize, that.totalSize) == 0 &&\n                 Objects.equals(variableStatistics, that.variableStatistics);\n     }\n \n     @Override\n     public int hashCode()\n     {\n-        return Objects.hash(outputRowCount, variableStatistics);\n+        return Objects.hash(outputRowCount, totalSize, variableStatistics);\n     }\n \n     public static Builder builder()\n     {\n         return new Builder();\n     }\n \n+    // Do not inherit totalSize statistics by default. Only explicitly set\n     public static Builder buildFrom(PlanNodeStatsEstimate other)\n     {\n-        return new Builder(other.getOutputRowCount(), other.variableStatistics);\n+        return new Builder(other.getOutputRowCount(), NaN, other.variableStatistics);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e0d27f5a897105fd13eebbdefe481261b537ff6"}, "originalPosition": 86}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxMDgzMDky", "url": "https://github.com/prestodb/presto/pull/14906#pullrequestreview-461083092", "createdAt": "2020-08-04T18:56:39Z", "commit": {"oid": "6e6e09222c9d3dcbf8503743fc3f97858ccff883"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxMTc3OTQy", "url": "https://github.com/prestodb/presto/pull/14906#pullrequestreview-461177942", "createdAt": "2020-08-04T21:11:29Z", "commit": {"oid": "6e6e09222c9d3dcbf8503743fc3f97858ccff883"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMToxMToyOVrOG7xqfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMTo1MTowN1rOG7ywBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMzMjg2Mw==", "bodyText": "count -> size", "url": "https://github.com/prestodb/presto/pull/14906#discussion_r465332863", "createdAt": "2020-08-04T21:11:29Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/statistics/MetastoreHiveStatisticsProvider.java", "diffHunk": "@@ -432,6 +442,18 @@ static OptionalDouble calculateAverageRowsPerPartition(Collection<PartitionStati\n                 .average();\n     }\n \n+    @VisibleForTesting\n+    static OptionalDouble calculateAverageSizePerPartition(Collection<PartitionStatistics> statistics)\n+    {\n+        return statistics.stream()\n+                .map(PartitionStatistics::getBasicStatistics)\n+                .map(HiveBasicStatistics::getInMemoryDataSizeInBytes)\n+                .filter(OptionalLong::isPresent)\n+                .mapToLong(OptionalLong::getAsLong)\n+                .peek(count -> verify(count >= 0, \"count must be greater than or equal to zero\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e6e09222c9d3dcbf8503743fc3f97858ccff883"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMzMzExMA==", "bodyText": "nit: include the actual value into the error message in case it ever fails\ne.g.: verify(averageSizePerPartition >= 0, \"averageSizePerPartition must be greater than or equal to zero: %s\", averageSizePerPartition)", "url": "https://github.com/prestodb/presto/pull/14906#discussion_r465333110", "createdAt": "2020-08-04T21:12:01Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/statistics/MetastoreHiveStatisticsProvider.java", "diffHunk": "@@ -404,6 +405,15 @@ private static TableStatistics getTableStatistics(\n \n         TableStatistics.Builder result = TableStatistics.builder();\n         result.setRowCount(Estimate.of(rowCount));\n+\n+        OptionalDouble optionalAverageSizePerPartition = calculateAverageSizePerPartition(statistics.values());\n+        if (optionalAverageSizePerPartition.isPresent()) {\n+            double averageSizePerPartition = optionalAverageSizePerPartition.getAsDouble();\n+            verify(averageSizePerPartition >= 0, \"averageSizePerPartition must be greater than or equal to zero\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e6e09222c9d3dcbf8503743fc3f97858ccff883"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM0MjE4Ng==", "bodyText": "What if totalSize is not set? Should we try to compute it based on the column statistics?", "url": "https://github.com/prestodb/presto/pull/14906#discussion_r465342186", "createdAt": "2020-08-04T21:31:45Z", "author": {"login": "arhimondr"}, "path": "presto-main/src/main/java/com/facebook/presto/cost/PlanNodeStatsEstimate.java", "diffHunk": "@@ -74,6 +77,21 @@ public double getOutputRowCount()\n         return outputRowCount;\n     }\n \n+    @JsonProperty\n+    public double getTotalSize()\n+    {\n+        return totalSize;\n+    }\n+\n+    /**\n+     * Only use when getting all columns and meanwhile do not want to\n+     * do per-column estimation.\n+     */\n+    public double getOutputSizeInBytes()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e6e09222c9d3dcbf8503743fc3f97858ccff883"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM0MjgyMA==", "bodyText": "Could you please include this explanation in the comment?", "url": "https://github.com/prestodb/presto/pull/14906#discussion_r465342820", "createdAt": "2020-08-04T21:33:08Z", "author": {"login": "arhimondr"}, "path": "presto-main/src/main/java/com/facebook/presto/cost/PlanNodeStatsEstimate.java", "diffHunk": "@@ -170,38 +189,42 @@ public boolean equals(Object o)\n         }\n         PlanNodeStatsEstimate that = (PlanNodeStatsEstimate) o;\n         return Double.compare(outputRowCount, that.outputRowCount) == 0 &&\n+                Double.compare(totalSize, that.totalSize) == 0 &&\n                 Objects.equals(variableStatistics, that.variableStatistics);\n     }\n \n     @Override\n     public int hashCode()\n     {\n-        return Objects.hash(outputRowCount, variableStatistics);\n+        return Objects.hash(outputRowCount, totalSize, variableStatistics);\n     }\n \n     public static Builder builder()\n     {\n         return new Builder();\n     }\n \n+    // Do not inherit totalSize statistics by default. Only explicitly set\n     public static Builder buildFrom(PlanNodeStatsEstimate other)\n     {\n-        return new Builder(other.getOutputRowCount(), other.variableStatistics);\n+        return new Builder(other.getOutputRowCount(), NaN, other.variableStatistics);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU3Nzg0OA=="}, "originalCommit": {"oid": "2e0d27f5a897105fd13eebbdefe481261b537ff6"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM0NDQyNA==", "bodyText": "nit: it can be safely simplified to totalSize += sourceStats.getOutputSizeInBytes() (anything + NaN is NaN)", "url": "https://github.com/prestodb/presto/pull/14906#discussion_r465344424", "createdAt": "2020-08-04T21:36:50Z", "author": {"login": "arhimondr"}, "path": "presto-main/src/main/java/com/facebook/presto/cost/ExchangeStatsRule.java", "diffHunk": "@@ -49,9 +52,11 @@ public ExchangeStatsRule(StatsNormalizer normalizer)\n     protected Optional<PlanNodeStatsEstimate> doCalculate(ExchangeNode node, StatsProvider statsProvider, Lookup lookup, Session session, TypeProvider types)\n     {\n         Optional<PlanNodeStatsEstimate> estimate = Optional.empty();\n+        double totalSize = 0;\n         for (int i = 0; i < node.getSources().size(); i++) {\n             PlanNode source = node.getSources().get(i);\n             PlanNodeStatsEstimate sourceStats = statsProvider.getStats(source);\n+            totalSize = (!isNaN(sourceStats.getOutputSizeInBytes()) && !isNaN(totalSize)) ? totalSize + sourceStats.getOutputSizeInBytes() : NaN;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e6e09222c9d3dcbf8503743fc3f97858ccff883"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM1MDY2Mw==", "bodyText": "It also feels to me that it should be the responsibility of the getOutputSizeInBytes method to return the size based on the column size information if the totalSize is not set. That will effectively merge these two paths and make the code a bit cleaner.\nI'm a little confused why do we think this approach is not preferred? Could you please elaborate a little bit more on that?", "url": "https://github.com/prestodb/presto/pull/14906#discussion_r465350663", "createdAt": "2020-08-04T21:51:07Z", "author": {"login": "arhimondr"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/RuntimeReorderJoinSides.java", "diffHunk": "@@ -66,9 +76,35 @@ public Result apply(JoinNode joinNode, Captures captures, Context context)\n             return Result.empty();\n         }\n \n-        StatsProvider statsProvider = context.getStatsProvider();\n-        double leftOutputSizeInBytes = statsProvider.getStats(joinNode.getLeft()).getOutputSizeInBytes(joinNode.getLeft().getOutputVariables());\n-        double rightOutputSizeInBytes = statsProvider.getStats(joinNode.getRight()).getOutputSizeInBytes(joinNode.getRight().getOutputVariables());\n+        double leftOutputSizeInBytes = Double.NaN;\n+        double rightOutputSizeInBytes = Double.NaN;\n+        PlanNode actualLeft = context.getLookup().resolve(joinNode.getLeft());\n+        PlanNode actualRight = context.getLookup().resolve(joinNode.getRight());\n+        if (actualLeft instanceof TableScanNode && actualRight instanceof ExchangeNode && actualRight.getSources().size() == 1\n+                && context.getLookup().resolve(actualRight.getSources().get(0)) instanceof TableScanNode) {\n+            // Simple plan is characterized as Join[leftSrc: TableScan, rightSrc: Exchange[src: TableScan]].\n+            // For simple plans, directly fetch the overall table sizes as the size of the join sides to have\n+            // accurate input bytes statistics and meanwhile avoid non-negligible cost of collecting and processing\n+            // per-column statistics.\n+            TableScanNode leftScan = (TableScanNode) actualLeft;\n+            TableScanNode rightScan = (TableScanNode) context.getLookup().resolve(actualRight.getSources().get(0));\n+            leftOutputSizeInBytes = metadata.getTableStatistics(context.getSession(),\n+                    leftScan.getTable(),\n+                    ImmutableList.copyOf(leftScan.getAssignments().values()),\n+                    new Constraint<>(leftScan.getCurrentConstraint())).getTotalSize().getValue();\n+            rightOutputSizeInBytes = metadata.getTableStatistics(context.getSession(),\n+                    rightScan.getTable(),\n+                    ImmutableList.copyOf(rightScan.getAssignments().values()),\n+                    new Constraint<>(rightScan.getCurrentConstraint())).getTotalSize().getValue();\n+        }\n+\n+        // Fall back using statsProvider to estimate left and right output size.\n+        if (Double.isNaN(leftOutputSizeInBytes) || Double.isNaN(rightOutputSizeInBytes)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU3NjIwNw=="}, "originalCommit": {"oid": "dc5b8128a7ef8f39512216ec45bc50f466e5881d"}, "originalPosition": 60}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6e6e09222c9d3dcbf8503743fc3f97858ccff883", "author": {"user": {"login": "pguofb", "name": "Peizhen Guo"}}, "url": "https://github.com/prestodb/presto/commit/6e6e09222c9d3dcbf8503743fc3f97858ccff883", "committedDate": "2020-08-03T18:33:05Z", "message": "Add totalSize in PlanNodeStatsEstimate\n\n- add totalSize field in PlanNodeStatsEstimate.\n- Fill in the field from tableScanStatsRule.\n- Propagate totalSize through exchangeStatsRule.\n- Refactor RuntimeReorderJoinSides, try using getOutputSizeInBytes()\nwithout parameters to make use of totalSize statistics first if available\nfor simple plans.\n- Refactor RuntimeReorderJoinSides to use planNodeSearcher functions to\ncapture simple plans, instead of manually checking."}, "afterCommit": {"oid": "a2f7e21a372e6210f78fe54130f45b023ae7d156", "author": {"user": {"login": "pguofb", "name": "Peizhen Guo"}}, "url": "https://github.com/prestodb/presto/commit/a2f7e21a372e6210f78fe54130f45b023ae7d156", "committedDate": "2020-08-04T22:34:11Z", "message": "Add totalSize in PlanNodeStatsEstimate\n\n- add totalSize field in PlanNodeStatsEstimate.\n- Fill in the field from tableScanStatsRule.\n- Propagate totalSize through exchangeStatsRule.\n- Refactor RuntimeReorderJoinSides, try using getOutputSizeInBytes()\nwithout parameters to make use of totalSize statistics first if available\nfor simple plans.\n- Refactor RuntimeReorderJoinSides to use planNodeSearcher functions to\ncapture simple plans, instead of manually checking."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a2f7e21a372e6210f78fe54130f45b023ae7d156", "author": {"user": {"login": "pguofb", "name": "Peizhen Guo"}}, "url": "https://github.com/prestodb/presto/commit/a2f7e21a372e6210f78fe54130f45b023ae7d156", "committedDate": "2020-08-04T22:34:11Z", "message": "Add totalSize in PlanNodeStatsEstimate\n\n- add totalSize field in PlanNodeStatsEstimate.\n- Fill in the field from tableScanStatsRule.\n- Propagate totalSize through exchangeStatsRule.\n- Refactor RuntimeReorderJoinSides, try using getOutputSizeInBytes()\nwithout parameters to make use of totalSize statistics first if available\nfor simple plans.\n- Refactor RuntimeReorderJoinSides to use planNodeSearcher functions to\ncapture simple plans, instead of manually checking."}, "afterCommit": {"oid": "9c1706fa0102a1a1bff774ff8375395827554c78", "author": {"user": {"login": "pguofb", "name": "Peizhen Guo"}}, "url": "https://github.com/prestodb/presto/commit/9c1706fa0102a1a1bff774ff8375395827554c78", "committedDate": "2020-08-04T22:53:37Z", "message": "Add totalSize in PlanNodeStatsEstimate\n\n- add totalSize field in PlanNodeStatsEstimate.\n- Fill in the field from tableScanStatsRule.\n- Propagate totalSize through exchangeStatsRule.\n- Refactor RuntimeReorderJoinSides, try using getOutputSizeInBytes()\nwithout parameters to make use of totalSize statistics first if available\nfor simple plans.\n- Refactor RuntimeReorderJoinSides to use planNodeSearcher functions to\ncapture simple plans, instead of manually checking."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxMzAxMzI5", "url": "https://github.com/prestodb/presto/pull/14906#pullrequestreview-461301329", "createdAt": "2020-08-05T02:42:20Z", "commit": {"oid": "9c1706fa0102a1a1bff774ff8375395827554c78"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f32cd86461aba17dffa6cedc406a1dbae3712bf7", "author": {"user": {"login": "pguofb", "name": "Peizhen Guo"}}, "url": "https://github.com/prestodb/presto/commit/f32cd86461aba17dffa6cedc406a1dbae3712bf7", "committedDate": "2020-08-05T13:38:23Z", "message": "Use totalSize statistics for simple join plan\n\n- Add a totalSize field in TableStatistics.\n- Enable totalSize to be filled from getTableStatistics: enable\nMetastoreHiveStatsProvider to feed totalSize field from\nPartitionStatistics and use the rowSize before and after\nConnectorFilterStatsCalcService to estimate filted totalSize.\n\n- add totalSize field in PlanNodeStatsEstimate.\n- Fill in the field from tableScanStatsRule.\n- Propagate totalSize through exchangeStatsRule.\n- Refactor RuntimeReorderJoinSides, try using getOutputSizeInBytes()\nwithout parameters to make use of totalSize statistics first if available\nfor simple plans."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9c1706fa0102a1a1bff774ff8375395827554c78", "author": {"user": {"login": "pguofb", "name": "Peizhen Guo"}}, "url": "https://github.com/prestodb/presto/commit/9c1706fa0102a1a1bff774ff8375395827554c78", "committedDate": "2020-08-04T22:53:37Z", "message": "Add totalSize in PlanNodeStatsEstimate\n\n- add totalSize field in PlanNodeStatsEstimate.\n- Fill in the field from tableScanStatsRule.\n- Propagate totalSize through exchangeStatsRule.\n- Refactor RuntimeReorderJoinSides, try using getOutputSizeInBytes()\nwithout parameters to make use of totalSize statistics first if available\nfor simple plans.\n- Refactor RuntimeReorderJoinSides to use planNodeSearcher functions to\ncapture simple plans, instead of manually checking."}, "afterCommit": {"oid": "f32cd86461aba17dffa6cedc406a1dbae3712bf7", "author": {"user": {"login": "pguofb", "name": "Peizhen Guo"}}, "url": "https://github.com/prestodb/presto/commit/f32cd86461aba17dffa6cedc406a1dbae3712bf7", "committedDate": "2020-08-05T13:38:23Z", "message": "Use totalSize statistics for simple join plan\n\n- Add a totalSize field in TableStatistics.\n- Enable totalSize to be filled from getTableStatistics: enable\nMetastoreHiveStatsProvider to feed totalSize field from\nPartitionStatistics and use the rowSize before and after\nConnectorFilterStatsCalcService to estimate filted totalSize.\n\n- add totalSize field in PlanNodeStatsEstimate.\n- Fill in the field from tableScanStatsRule.\n- Propagate totalSize through exchangeStatsRule.\n- Refactor RuntimeReorderJoinSides, try using getOutputSizeInBytes()\nwithout parameters to make use of totalSize statistics first if available\nfor simple plans."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 340, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}