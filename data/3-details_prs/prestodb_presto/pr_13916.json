{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU4NzgwMTk4", "number": 13916, "title": "Add sum of cardinality for array column verifier results", "bodyText": "For array column mismatch, this change adds additional information\nof the total number of elements across all rows for the same column.\nPart of #13809\n== RELEASE NOTES ==\n\nVerifier Changes\n* Add checks for the cardinalities sum when validating an array column.", "createdAt": "2020-01-02T20:14:43Z", "url": "https://github.com/prestodb/presto/pull/13916", "merged": true, "mergeCommit": {"oid": "176e8f8a4db4ce50e02c0fb11da28702e52aeb89"}, "closed": true, "closedAt": "2020-01-07T00:18:06Z", "author": {"login": "ShenYi"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb2k2STgFqTMzNzkzMjI2Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABb3xiMwABqjI5MjUzNDk4Nzk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM3OTMyMjYz", "url": "https://github.com/prestodb/presto/pull/13916#pullrequestreview-337932263", "createdAt": "2020-01-03T02:22:44Z", "commit": {"oid": "125e03c0cf426dc540348bfbae2a84fc1b19c2f5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM4MDUyMDM0", "url": "https://github.com/prestodb/presto/pull/13916#pullrequestreview-338052034", "createdAt": "2020-01-03T12:03:49Z", "commit": {"oid": "125e03c0cf426dc540348bfbae2a84fc1b19c2f5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxMjowMzo0OVrOFZ-xHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxMjowMzo0OVrOFZ-xHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc4NzEwMg==", "bodyText": "@ShenYi This cast may result in NullPointerException. When all arrays are null, sum(cardinality(a)) will be null and casting null into long will throw NPE. I'd drop this cast altogether.\nObject controlCardinalitySum = controlResult.getChecksum(cardinalityColumnAlias);\nObject testCardinalitySum = testResult.getChecksum(cardinalityColumnAlias);", "url": "https://github.com/prestodb/presto/pull/13916#discussion_r362787102", "createdAt": "2020-01-03T12:03:49Z", "author": {"login": "mbasmanova"}, "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/checksum/ArrayColumnValidator.java", "diffHunk": "@@ -49,33 +49,53 @@ public OrderableArrayColumnValidator()\n         checkArgument(column.getType() instanceof ArrayType, \"Expect ArrayType, found %s\", column.getType().getDisplayName());\n         Type elementType = ((ArrayType) column.getType()).getElementType();\n \n-        FunctionCall arraySort = new FunctionCall(QualifiedName.of(\"array_sort\"), ImmutableList.of(column.getIdentifier()));\n         Expression checksum;\n-        if (elementType instanceof ArrayType || elementType instanceof RowType) {\n-            checksum = new CoalesceExpression(\n-                    new FunctionCall(QualifiedName.of(\"checksum\"), ImmutableList.of(new TryExpression(arraySort))),\n-                    new FunctionCall(QualifiedName.of(\"checksum\"), ImmutableList.of(column.getIdentifier())));\n+        if (elementType.isOrderable()) {\n+            FunctionCall arraySort = new FunctionCall(QualifiedName.of(\"array_sort\"), ImmutableList.of(column.getIdentifier()));\n+            if (elementType instanceof ArrayType || elementType instanceof RowType) {\n+                checksum = new CoalesceExpression(\n+                        new FunctionCall(QualifiedName.of(\"checksum\"), ImmutableList.of(new TryExpression(arraySort))),\n+                        new FunctionCall(QualifiedName.of(\"checksum\"), ImmutableList.of(column.getIdentifier())));\n+            }\n+            else {\n+                checksum = new FunctionCall(QualifiedName.of(\"checksum\"), ImmutableList.of(arraySort));\n+            }\n         }\n         else {\n-            checksum = new FunctionCall(QualifiedName.of(\"checksum\"), ImmutableList.of(arraySort));\n+            checksum = new FunctionCall(QualifiedName.of(\"checksum\"), ImmutableList.of(column.getIdentifier()));\n         }\n \n-        return ImmutableList.of(new SingleColumn(checksum, Optional.of(delimitedIdentifier(getChecksumColumnAlias(column)))));\n+        FunctionCall arrayCardinality = new FunctionCall(QualifiedName.of(\"sum\"),\n+                ImmutableList.of(new FunctionCall(QualifiedName.of(\"cardinality\"), ImmutableList.of(column.getIdentifier()))));\n+\n+        return ImmutableList.of(new SingleColumn(checksum, Optional.of(delimitedIdentifier(getChecksumColumnAlias(column)))),\n+                new SingleColumn(arrayCardinality, Optional.of(delimitedIdentifier(getCardinalityColumnAlias(column)))));\n     }\n \n     @Override\n     public ColumnMatchResult validate(Column column, ChecksumResult controlResult, ChecksumResult testResult)\n     {\n-        String sortedChecksumColumnAlias = getChecksumColumnAlias(column);\n-        Object controlSortedChecksum = controlResult.getChecksum(sortedChecksumColumnAlias);\n-        Object testSortedChecksum = testResult.getChecksum(sortedChecksumColumnAlias);\n+        String checksumColumnAlias = getChecksumColumnAlias(column);\n+        Object controlChecksum = controlResult.getChecksum(checksumColumnAlias);\n+        Object testChecksum = testResult.getChecksum(checksumColumnAlias);\n+\n+        String cardinalityColumnAlias = getCardinalityColumnAlias(column);\n+        long controlCardinalitySum = (long) controlResult.getChecksum(cardinalityColumnAlias);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "125e03c0cf426dc540348bfbae2a84fc1b19c2f5"}, "originalPosition": 59}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "125e03c0cf426dc540348bfbae2a84fc1b19c2f5", "author": {"user": {"login": "ShenYi", "name": "shenyi"}}, "url": "https://github.com/prestodb/presto/commit/125e03c0cf426dc540348bfbae2a84fc1b19c2f5", "committedDate": "2020-01-02T20:03:45Z", "message": "Add sum of cardinality for array column verifier results\n\nFor array column mismatch, this change adds additional information\nof the total number of elements across all rows for the same column."}, "afterCommit": {"oid": "787a6319ff6fcd40a3665d57e4e399c554fba610", "author": {"user": {"login": "ShenYi", "name": "shenyi"}}, "url": "https://github.com/prestodb/presto/commit/787a6319ff6fcd40a3665d57e4e399c554fba610", "committedDate": "2020-01-03T19:07:51Z", "message": "Add sum of cardinality for array column verifier results\n\nFor array column mismatch, this change adds additional information\nof the total number of elements across all rows for the same column."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM4MjU2MDcz", "url": "https://github.com/prestodb/presto/pull/13916#pullrequestreview-338256073", "createdAt": "2020-01-03T20:16:12Z", "commit": {"oid": "787a6319ff6fcd40a3665d57e4e399c554fba610"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QyMDoxNjoxMlrOFaIgKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QyMDoyNDoyN1rOFaIrYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk0NjYwMQ==", "bodyText": "First parameter on a separate line", "url": "https://github.com/prestodb/presto/pull/13916#discussion_r362946601", "createdAt": "2020-01-03T20:16:12Z", "author": {"login": "caithagoras"}, "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/checksum/ArrayColumnValidator.java", "diffHunk": "@@ -49,33 +49,53 @@ public OrderableArrayColumnValidator()\n         checkArgument(column.getType() instanceof ArrayType, \"Expect ArrayType, found %s\", column.getType().getDisplayName());\n         Type elementType = ((ArrayType) column.getType()).getElementType();\n \n-        FunctionCall arraySort = new FunctionCall(QualifiedName.of(\"array_sort\"), ImmutableList.of(column.getIdentifier()));\n         Expression checksum;\n-        if (elementType instanceof ArrayType || elementType instanceof RowType) {\n-            checksum = new CoalesceExpression(\n-                    new FunctionCall(QualifiedName.of(\"checksum\"), ImmutableList.of(new TryExpression(arraySort))),\n-                    new FunctionCall(QualifiedName.of(\"checksum\"), ImmutableList.of(column.getIdentifier())));\n+        if (elementType.isOrderable()) {\n+            FunctionCall arraySort = new FunctionCall(QualifiedName.of(\"array_sort\"), ImmutableList.of(column.getIdentifier()));\n+            if (elementType instanceof ArrayType || elementType instanceof RowType) {\n+                checksum = new CoalesceExpression(\n+                        new FunctionCall(QualifiedName.of(\"checksum\"), ImmutableList.of(new TryExpression(arraySort))),\n+                        new FunctionCall(QualifiedName.of(\"checksum\"), ImmutableList.of(column.getIdentifier())));\n+            }\n+            else {\n+                checksum = new FunctionCall(QualifiedName.of(\"checksum\"), ImmutableList.of(arraySort));\n+            }\n         }\n         else {\n-            checksum = new FunctionCall(QualifiedName.of(\"checksum\"), ImmutableList.of(arraySort));\n+            checksum = new FunctionCall(QualifiedName.of(\"checksum\"), ImmutableList.of(column.getIdentifier()));\n         }\n \n-        return ImmutableList.of(new SingleColumn(checksum, Optional.of(delimitedIdentifier(getChecksumColumnAlias(column)))));\n+        FunctionCall arrayCardinality = new FunctionCall(QualifiedName.of(\"sum\"),\n+                ImmutableList.of(new FunctionCall(QualifiedName.of(\"cardinality\"), ImmutableList.of(column.getIdentifier()))));\n+\n+        return ImmutableList.of(new SingleColumn(checksum, Optional.of(delimitedIdentifier(getChecksumColumnAlias(column)))),\n+                new SingleColumn(arrayCardinality, Optional.of(delimitedIdentifier(getCardinalityColumnAlias(column)))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "787a6319ff6fcd40a3665d57e4e399c554fba610"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk0NjgxNQ==", "bodyText": "getCardinalitySumColumnAlias", "url": "https://github.com/prestodb/presto/pull/13916#discussion_r362946815", "createdAt": "2020-01-03T20:16:48Z", "author": {"login": "caithagoras"}, "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/checksum/ArrayColumnValidator.java", "diffHunk": "@@ -49,33 +49,53 @@ public OrderableArrayColumnValidator()\n         checkArgument(column.getType() instanceof ArrayType, \"Expect ArrayType, found %s\", column.getType().getDisplayName());\n         Type elementType = ((ArrayType) column.getType()).getElementType();\n \n-        FunctionCall arraySort = new FunctionCall(QualifiedName.of(\"array_sort\"), ImmutableList.of(column.getIdentifier()));\n         Expression checksum;\n-        if (elementType instanceof ArrayType || elementType instanceof RowType) {\n-            checksum = new CoalesceExpression(\n-                    new FunctionCall(QualifiedName.of(\"checksum\"), ImmutableList.of(new TryExpression(arraySort))),\n-                    new FunctionCall(QualifiedName.of(\"checksum\"), ImmutableList.of(column.getIdentifier())));\n+        if (elementType.isOrderable()) {\n+            FunctionCall arraySort = new FunctionCall(QualifiedName.of(\"array_sort\"), ImmutableList.of(column.getIdentifier()));\n+            if (elementType instanceof ArrayType || elementType instanceof RowType) {\n+                checksum = new CoalesceExpression(\n+                        new FunctionCall(QualifiedName.of(\"checksum\"), ImmutableList.of(new TryExpression(arraySort))),\n+                        new FunctionCall(QualifiedName.of(\"checksum\"), ImmutableList.of(column.getIdentifier())));\n+            }\n+            else {\n+                checksum = new FunctionCall(QualifiedName.of(\"checksum\"), ImmutableList.of(arraySort));\n+            }\n         }\n         else {\n-            checksum = new FunctionCall(QualifiedName.of(\"checksum\"), ImmutableList.of(arraySort));\n+            checksum = new FunctionCall(QualifiedName.of(\"checksum\"), ImmutableList.of(column.getIdentifier()));\n         }\n \n-        return ImmutableList.of(new SingleColumn(checksum, Optional.of(delimitedIdentifier(getChecksumColumnAlias(column)))));\n+        FunctionCall arrayCardinality = new FunctionCall(QualifiedName.of(\"sum\"),\n+                ImmutableList.of(new FunctionCall(QualifiedName.of(\"cardinality\"), ImmutableList.of(column.getIdentifier()))));\n+\n+        return ImmutableList.of(new SingleColumn(checksum, Optional.of(delimitedIdentifier(getChecksumColumnAlias(column)))),\n+                new SingleColumn(arrayCardinality, Optional.of(delimitedIdentifier(getCardinalityColumnAlias(column)))));\n     }\n \n     @Override\n     public ColumnMatchResult validate(Column column, ChecksumResult controlResult, ChecksumResult testResult)\n     {\n-        String sortedChecksumColumnAlias = getChecksumColumnAlias(column);\n-        Object controlSortedChecksum = controlResult.getChecksum(sortedChecksumColumnAlias);\n-        Object testSortedChecksum = testResult.getChecksum(sortedChecksumColumnAlias);\n+        String checksumColumnAlias = getChecksumColumnAlias(column);\n+        Object controlChecksum = controlResult.getChecksum(checksumColumnAlias);\n+        Object testChecksum = testResult.getChecksum(checksumColumnAlias);\n+\n+        String cardinalityColumnAlias = getCardinalityColumnAlias(column);\n+        Object controlCardinalitySum = controlResult.getChecksum(cardinalityColumnAlias);\n+        Object testCardinalitySum = testResult.getChecksum(cardinalityColumnAlias);\n+\n         return new ColumnMatchResult(\n-                Objects.equals(controlSortedChecksum, testSortedChecksum),\n-                format(\"control(checksum: %s) test(checksum: %s)\", controlSortedChecksum, testSortedChecksum));\n+                Objects.equals(controlChecksum, testChecksum) && Objects.equals(controlCardinalitySum, testCardinalitySum),\n+                format(\"control(checksum: %s, cardinality: %s) test(checksum: %s, cardinality: %s)\",\n+                        controlChecksum, controlCardinalitySum, testChecksum, testCardinalitySum));\n     }\n \n     private static String getChecksumColumnAlias(Column column)\n     {\n         return column.getName() + \"_checksum\";\n     }\n+\n+    private static String getCardinalityColumnAlias(Column column)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "787a6319ff6fcd40a3665d57e4e399c554fba610"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk0Njk4OQ==", "bodyText": "I would call this cardinalitySumColumnAlias", "url": "https://github.com/prestodb/presto/pull/13916#discussion_r362946989", "createdAt": "2020-01-03T20:17:15Z", "author": {"login": "caithagoras"}, "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/checksum/ArrayColumnValidator.java", "diffHunk": "@@ -49,33 +49,53 @@ public OrderableArrayColumnValidator()\n         checkArgument(column.getType() instanceof ArrayType, \"Expect ArrayType, found %s\", column.getType().getDisplayName());\n         Type elementType = ((ArrayType) column.getType()).getElementType();\n \n-        FunctionCall arraySort = new FunctionCall(QualifiedName.of(\"array_sort\"), ImmutableList.of(column.getIdentifier()));\n         Expression checksum;\n-        if (elementType instanceof ArrayType || elementType instanceof RowType) {\n-            checksum = new CoalesceExpression(\n-                    new FunctionCall(QualifiedName.of(\"checksum\"), ImmutableList.of(new TryExpression(arraySort))),\n-                    new FunctionCall(QualifiedName.of(\"checksum\"), ImmutableList.of(column.getIdentifier())));\n+        if (elementType.isOrderable()) {\n+            FunctionCall arraySort = new FunctionCall(QualifiedName.of(\"array_sort\"), ImmutableList.of(column.getIdentifier()));\n+            if (elementType instanceof ArrayType || elementType instanceof RowType) {\n+                checksum = new CoalesceExpression(\n+                        new FunctionCall(QualifiedName.of(\"checksum\"), ImmutableList.of(new TryExpression(arraySort))),\n+                        new FunctionCall(QualifiedName.of(\"checksum\"), ImmutableList.of(column.getIdentifier())));\n+            }\n+            else {\n+                checksum = new FunctionCall(QualifiedName.of(\"checksum\"), ImmutableList.of(arraySort));\n+            }\n         }\n         else {\n-            checksum = new FunctionCall(QualifiedName.of(\"checksum\"), ImmutableList.of(arraySort));\n+            checksum = new FunctionCall(QualifiedName.of(\"checksum\"), ImmutableList.of(column.getIdentifier()));\n         }\n \n-        return ImmutableList.of(new SingleColumn(checksum, Optional.of(delimitedIdentifier(getChecksumColumnAlias(column)))));\n+        FunctionCall arrayCardinality = new FunctionCall(QualifiedName.of(\"sum\"),\n+                ImmutableList.of(new FunctionCall(QualifiedName.of(\"cardinality\"), ImmutableList.of(column.getIdentifier()))));\n+\n+        return ImmutableList.of(new SingleColumn(checksum, Optional.of(delimitedIdentifier(getChecksumColumnAlias(column)))),\n+                new SingleColumn(arrayCardinality, Optional.of(delimitedIdentifier(getCardinalityColumnAlias(column)))));\n     }\n \n     @Override\n     public ColumnMatchResult validate(Column column, ChecksumResult controlResult, ChecksumResult testResult)\n     {\n-        String sortedChecksumColumnAlias = getChecksumColumnAlias(column);\n-        Object controlSortedChecksum = controlResult.getChecksum(sortedChecksumColumnAlias);\n-        Object testSortedChecksum = testResult.getChecksum(sortedChecksumColumnAlias);\n+        String checksumColumnAlias = getChecksumColumnAlias(column);\n+        Object controlChecksum = controlResult.getChecksum(checksumColumnAlias);\n+        Object testChecksum = testResult.getChecksum(checksumColumnAlias);\n+\n+        String cardinalityColumnAlias = getCardinalityColumnAlias(column);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "787a6319ff6fcd40a3665d57e4e399c554fba610"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk0NzA3Nw==", "bodyText": "_cardinality_sum", "url": "https://github.com/prestodb/presto/pull/13916#discussion_r362947077", "createdAt": "2020-01-03T20:17:32Z", "author": {"login": "caithagoras"}, "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/checksum/ArrayColumnValidator.java", "diffHunk": "@@ -49,33 +49,53 @@ public OrderableArrayColumnValidator()\n         checkArgument(column.getType() instanceof ArrayType, \"Expect ArrayType, found %s\", column.getType().getDisplayName());\n         Type elementType = ((ArrayType) column.getType()).getElementType();\n \n-        FunctionCall arraySort = new FunctionCall(QualifiedName.of(\"array_sort\"), ImmutableList.of(column.getIdentifier()));\n         Expression checksum;\n-        if (elementType instanceof ArrayType || elementType instanceof RowType) {\n-            checksum = new CoalesceExpression(\n-                    new FunctionCall(QualifiedName.of(\"checksum\"), ImmutableList.of(new TryExpression(arraySort))),\n-                    new FunctionCall(QualifiedName.of(\"checksum\"), ImmutableList.of(column.getIdentifier())));\n+        if (elementType.isOrderable()) {\n+            FunctionCall arraySort = new FunctionCall(QualifiedName.of(\"array_sort\"), ImmutableList.of(column.getIdentifier()));\n+            if (elementType instanceof ArrayType || elementType instanceof RowType) {\n+                checksum = new CoalesceExpression(\n+                        new FunctionCall(QualifiedName.of(\"checksum\"), ImmutableList.of(new TryExpression(arraySort))),\n+                        new FunctionCall(QualifiedName.of(\"checksum\"), ImmutableList.of(column.getIdentifier())));\n+            }\n+            else {\n+                checksum = new FunctionCall(QualifiedName.of(\"checksum\"), ImmutableList.of(arraySort));\n+            }\n         }\n         else {\n-            checksum = new FunctionCall(QualifiedName.of(\"checksum\"), ImmutableList.of(arraySort));\n+            checksum = new FunctionCall(QualifiedName.of(\"checksum\"), ImmutableList.of(column.getIdentifier()));\n         }\n \n-        return ImmutableList.of(new SingleColumn(checksum, Optional.of(delimitedIdentifier(getChecksumColumnAlias(column)))));\n+        FunctionCall arrayCardinality = new FunctionCall(QualifiedName.of(\"sum\"),\n+                ImmutableList.of(new FunctionCall(QualifiedName.of(\"cardinality\"), ImmutableList.of(column.getIdentifier()))));\n+\n+        return ImmutableList.of(new SingleColumn(checksum, Optional.of(delimitedIdentifier(getChecksumColumnAlias(column)))),\n+                new SingleColumn(arrayCardinality, Optional.of(delimitedIdentifier(getCardinalityColumnAlias(column)))));\n     }\n \n     @Override\n     public ColumnMatchResult validate(Column column, ChecksumResult controlResult, ChecksumResult testResult)\n     {\n-        String sortedChecksumColumnAlias = getChecksumColumnAlias(column);\n-        Object controlSortedChecksum = controlResult.getChecksum(sortedChecksumColumnAlias);\n-        Object testSortedChecksum = testResult.getChecksum(sortedChecksumColumnAlias);\n+        String checksumColumnAlias = getChecksumColumnAlias(column);\n+        Object controlChecksum = controlResult.getChecksum(checksumColumnAlias);\n+        Object testChecksum = testResult.getChecksum(checksumColumnAlias);\n+\n+        String cardinalityColumnAlias = getCardinalityColumnAlias(column);\n+        Object controlCardinalitySum = controlResult.getChecksum(cardinalityColumnAlias);\n+        Object testCardinalitySum = testResult.getChecksum(cardinalityColumnAlias);\n+\n         return new ColumnMatchResult(\n-                Objects.equals(controlSortedChecksum, testSortedChecksum),\n-                format(\"control(checksum: %s) test(checksum: %s)\", controlSortedChecksum, testSortedChecksum));\n+                Objects.equals(controlChecksum, testChecksum) && Objects.equals(controlCardinalitySum, testCardinalitySum),\n+                format(\"control(checksum: %s, cardinality: %s) test(checksum: %s, cardinality: %s)\",\n+                        controlChecksum, controlCardinalitySum, testChecksum, testCardinalitySum));\n     }\n \n     private static String getChecksumColumnAlias(Column column)\n     {\n         return column.getName() + \"_checksum\";\n     }\n+\n+    private static String getCardinalityColumnAlias(Column column)\n+    {\n+        return column.getName() + \"_cardinality\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "787a6319ff6fcd40a3665d57e4e399c554fba610"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk0NzMyNg==", "bodyText": "First parameter on a separate line", "url": "https://github.com/prestodb/presto/pull/13916#discussion_r362947326", "createdAt": "2020-01-03T20:18:15Z", "author": {"login": "caithagoras"}, "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/checksum/ArrayColumnValidator.java", "diffHunk": "@@ -49,33 +49,53 @@ public OrderableArrayColumnValidator()\n         checkArgument(column.getType() instanceof ArrayType, \"Expect ArrayType, found %s\", column.getType().getDisplayName());\n         Type elementType = ((ArrayType) column.getType()).getElementType();\n \n-        FunctionCall arraySort = new FunctionCall(QualifiedName.of(\"array_sort\"), ImmutableList.of(column.getIdentifier()));\n         Expression checksum;\n-        if (elementType instanceof ArrayType || elementType instanceof RowType) {\n-            checksum = new CoalesceExpression(\n-                    new FunctionCall(QualifiedName.of(\"checksum\"), ImmutableList.of(new TryExpression(arraySort))),\n-                    new FunctionCall(QualifiedName.of(\"checksum\"), ImmutableList.of(column.getIdentifier())));\n+        if (elementType.isOrderable()) {\n+            FunctionCall arraySort = new FunctionCall(QualifiedName.of(\"array_sort\"), ImmutableList.of(column.getIdentifier()));\n+            if (elementType instanceof ArrayType || elementType instanceof RowType) {\n+                checksum = new CoalesceExpression(\n+                        new FunctionCall(QualifiedName.of(\"checksum\"), ImmutableList.of(new TryExpression(arraySort))),\n+                        new FunctionCall(QualifiedName.of(\"checksum\"), ImmutableList.of(column.getIdentifier())));\n+            }\n+            else {\n+                checksum = new FunctionCall(QualifiedName.of(\"checksum\"), ImmutableList.of(arraySort));\n+            }\n         }\n         else {\n-            checksum = new FunctionCall(QualifiedName.of(\"checksum\"), ImmutableList.of(arraySort));\n+            checksum = new FunctionCall(QualifiedName.of(\"checksum\"), ImmutableList.of(column.getIdentifier()));\n         }\n \n-        return ImmutableList.of(new SingleColumn(checksum, Optional.of(delimitedIdentifier(getChecksumColumnAlias(column)))));\n+        FunctionCall arrayCardinality = new FunctionCall(QualifiedName.of(\"sum\"),\n+                ImmutableList.of(new FunctionCall(QualifiedName.of(\"cardinality\"), ImmutableList.of(column.getIdentifier()))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "787a6319ff6fcd40a3665d57e4e399c554fba610"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk0OTQ3Mg==", "bodyText": "If all rows of the array column are null, array(cardinality(a)) will be null, so let's wrap it with a coalesce.\ncoalesce(array(cardinality(a)), 0) a_cardinality_sum", "url": "https://github.com/prestodb/presto/pull/13916#discussion_r362949472", "createdAt": "2020-01-03T20:24:27Z", "author": {"login": "caithagoras"}, "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/checksum/ArrayColumnValidator.java", "diffHunk": "@@ -49,33 +49,53 @@ public OrderableArrayColumnValidator()\n         checkArgument(column.getType() instanceof ArrayType, \"Expect ArrayType, found %s\", column.getType().getDisplayName());\n         Type elementType = ((ArrayType) column.getType()).getElementType();\n \n-        FunctionCall arraySort = new FunctionCall(QualifiedName.of(\"array_sort\"), ImmutableList.of(column.getIdentifier()));\n         Expression checksum;\n-        if (elementType instanceof ArrayType || elementType instanceof RowType) {\n-            checksum = new CoalesceExpression(\n-                    new FunctionCall(QualifiedName.of(\"checksum\"), ImmutableList.of(new TryExpression(arraySort))),\n-                    new FunctionCall(QualifiedName.of(\"checksum\"), ImmutableList.of(column.getIdentifier())));\n+        if (elementType.isOrderable()) {\n+            FunctionCall arraySort = new FunctionCall(QualifiedName.of(\"array_sort\"), ImmutableList.of(column.getIdentifier()));\n+            if (elementType instanceof ArrayType || elementType instanceof RowType) {\n+                checksum = new CoalesceExpression(\n+                        new FunctionCall(QualifiedName.of(\"checksum\"), ImmutableList.of(new TryExpression(arraySort))),\n+                        new FunctionCall(QualifiedName.of(\"checksum\"), ImmutableList.of(column.getIdentifier())));\n+            }\n+            else {\n+                checksum = new FunctionCall(QualifiedName.of(\"checksum\"), ImmutableList.of(arraySort));\n+            }\n         }\n         else {\n-            checksum = new FunctionCall(QualifiedName.of(\"checksum\"), ImmutableList.of(arraySort));\n+            checksum = new FunctionCall(QualifiedName.of(\"checksum\"), ImmutableList.of(column.getIdentifier()));\n         }\n \n-        return ImmutableList.of(new SingleColumn(checksum, Optional.of(delimitedIdentifier(getChecksumColumnAlias(column)))));\n+        FunctionCall arrayCardinality = new FunctionCall(QualifiedName.of(\"sum\"),\n+                ImmutableList.of(new FunctionCall(QualifiedName.of(\"cardinality\"), ImmutableList.of(column.getIdentifier()))));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk0NzMyNg=="}, "originalCommit": {"oid": "787a6319ff6fcd40a3665d57e4e399c554fba610"}, "originalPosition": 42}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "787a6319ff6fcd40a3665d57e4e399c554fba610", "author": {"user": {"login": "ShenYi", "name": "shenyi"}}, "url": "https://github.com/prestodb/presto/commit/787a6319ff6fcd40a3665d57e4e399c554fba610", "committedDate": "2020-01-03T19:07:51Z", "message": "Add sum of cardinality for array column verifier results\n\nFor array column mismatch, this change adds additional information\nof the total number of elements across all rows for the same column."}, "afterCommit": {"oid": "ca896b76bc8c6c0b7a71b759c7df116f1b2536b8", "author": {"user": {"login": "ShenYi", "name": "shenyi"}}, "url": "https://github.com/prestodb/presto/commit/ca896b76bc8c6c0b7a71b759c7df116f1b2536b8", "committedDate": "2020-01-03T21:57:37Z", "message": "Add checks for the cardinalities sum when validating an array column\n\nFor array column mismatch, add additional information of the total\nnumber of elements across all rows."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM4Mjk4NTk2", "url": "https://github.com/prestodb/presto/pull/13916#pullrequestreview-338298596", "createdAt": "2020-01-03T22:17:16Z", "commit": {"oid": "ca896b76bc8c6c0b7a71b759c7df116f1b2536b8"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QyMjoxNzoxN1rOFaKhFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QyMjoyNDowMFrOFaKnnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk3OTYwNA==", "bodyText": "Those 2 changes should belong to the 1st commit.", "url": "https://github.com/prestodb/presto/pull/13916#discussion_r362979604", "createdAt": "2020-01-03T22:17:17Z", "author": {"login": "caithagoras"}, "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/checksum/ArrayColumnValidator.java", "diffHunk": "@@ -67,22 +68,41 @@ public ArrayColumnValidator()\n             checksum = new FunctionCall(QualifiedName.of(\"checksum\"), ImmutableList.of(column.getIdentifier()));\n         }\n \n-        return ImmutableList.of(new SingleColumn(checksum, Optional.of(delimitedIdentifier(getChecksumColumnAlias(column)))));\n+        Expression arrayCardinalitySum = new CoalesceExpression(\n+                new FunctionCall(\n+                        QualifiedName.of(\"sum\"),\n+                        ImmutableList.of(new FunctionCall(QualifiedName.of(\"cardinality\"), ImmutableList.of(column.getIdentifier())))),\n+                new LongLiteral(\"0\"));\n+\n+        return ImmutableList.of(\n+                new SingleColumn(checksum, Optional.of(delimitedIdentifier(getChecksumColumnAlias(column)))),\n+                new SingleColumn(arrayCardinalitySum, Optional.of(delimitedIdentifier(getCardinalitySumColumnAlias(column)))));\n     }\n \n     @Override\n     public ColumnMatchResult validate(Column column, ChecksumResult controlResult, ChecksumResult testResult)\n     {\n         String sortedChecksumColumnAlias = getChecksumColumnAlias(column);\n-        Object controlSortedChecksum = controlResult.getChecksum(sortedChecksumColumnAlias);\n-        Object testSortedChecksum = testResult.getChecksum(sortedChecksumColumnAlias);\n+        Object controlChecksum = controlResult.getChecksum(sortedChecksumColumnAlias);\n+        Object testChecksum = testResult.getChecksum(sortedChecksumColumnAlias);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca896b76bc8c6c0b7a71b759c7df116f1b2536b8"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk3OTkzNw==", "bodyText": "Merge line 95 and 96, or, one line per parameter:\nformat(\n    \"control(checksum: %s, cardinality_sum: %s) test(checksum: %s, cardinality_sum: %s)\",\n    controlChecksum,\n    controlCardinalitySum,\n    testChecksum,\n    testCardinalitySum));", "url": "https://github.com/prestodb/presto/pull/13916#discussion_r362979937", "createdAt": "2020-01-03T22:18:25Z", "author": {"login": "caithagoras"}, "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/checksum/ArrayColumnValidator.java", "diffHunk": "@@ -67,22 +68,41 @@ public ArrayColumnValidator()\n             checksum = new FunctionCall(QualifiedName.of(\"checksum\"), ImmutableList.of(column.getIdentifier()));\n         }\n \n-        return ImmutableList.of(new SingleColumn(checksum, Optional.of(delimitedIdentifier(getChecksumColumnAlias(column)))));\n+        Expression arrayCardinalitySum = new CoalesceExpression(\n+                new FunctionCall(\n+                        QualifiedName.of(\"sum\"),\n+                        ImmutableList.of(new FunctionCall(QualifiedName.of(\"cardinality\"), ImmutableList.of(column.getIdentifier())))),\n+                new LongLiteral(\"0\"));\n+\n+        return ImmutableList.of(\n+                new SingleColumn(checksum, Optional.of(delimitedIdentifier(getChecksumColumnAlias(column)))),\n+                new SingleColumn(arrayCardinalitySum, Optional.of(delimitedIdentifier(getCardinalitySumColumnAlias(column)))));\n     }\n \n     @Override\n     public ColumnMatchResult validate(Column column, ChecksumResult controlResult, ChecksumResult testResult)\n     {\n         String sortedChecksumColumnAlias = getChecksumColumnAlias(column);\n-        Object controlSortedChecksum = controlResult.getChecksum(sortedChecksumColumnAlias);\n-        Object testSortedChecksum = testResult.getChecksum(sortedChecksumColumnAlias);\n+        Object controlChecksum = controlResult.getChecksum(sortedChecksumColumnAlias);\n+        Object testChecksum = testResult.getChecksum(sortedChecksumColumnAlias);\n+\n+        String cardinalitySumColumnAlias = getCardinalitySumColumnAlias(column);\n+        Object controlCardinalitySum = controlResult.getChecksum(cardinalitySumColumnAlias);\n+        Object testCardinalitySum = testResult.getChecksum(cardinalitySumColumnAlias);\n+\n         return new ColumnMatchResult(\n-                Objects.equals(controlSortedChecksum, testSortedChecksum),\n-                format(\"control(checksum: %s) test(checksum: %s)\", controlSortedChecksum, testSortedChecksum));\n+                Objects.equals(controlChecksum, testChecksum) && Objects.equals(controlCardinalitySum, testCardinalitySum),\n+                format(\"control(checksum: %s, cardinality_sum: %s) test(checksum: %s, cardinality_sum: %s)\",\n+                        controlChecksum, controlCardinalitySum, testChecksum, testCardinalitySum));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca896b76bc8c6c0b7a71b759c7df116f1b2536b8"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk4MDYwNA==", "bodyText": "Line break is off:\n.put(\n    INT_ARRAY_COLUMN,\n    new ColumnMatchResult(false, \"control(checksum: 0a, cardinality_sum: 3) test(checksum: 1a, cardinality_sum: 2)\"))\n.put(\n    MAP_ARRAY_COLUMN,\n    new ColumnMatchResult(false, \"control(checksum: 0b, cardinality_sum: 7) test(checksum: 1b, cardinality_sum: 5)\"))", "url": "https://github.com/prestodb/presto/pull/13916#discussion_r362980604", "createdAt": "2020-01-03T22:21:16Z", "author": {"login": "caithagoras"}, "path": "presto-verifier/src/test/java/com/facebook/presto/verifier/checksum/TestChecksumValidator.java", "diffHunk": "@@ -285,24 +288,48 @@ public void testArray()\n                 5,\n                 ImmutableMap.<String, Object>builder()\n                         .put(\"int_array_checksum\", new SqlVarbinary(new byte[] {0xa}))\n+                        .put(\"int_array_cardinality_sum\", 3L)\n                         .put(\"map_array_checksum\", new SqlVarbinary(new byte[] {0xb}))\n+                        .put(\"map_array_cardinality_sum\", 7L)\n                         .build());\n \n         // Matched\n         assertTrue(checksumValidator.getMismatchedColumns(columns, controlChecksum, controlChecksum).isEmpty());\n \n-        // Mismatched\n+        // Mismatched different elements\n         ChecksumResult testChecksum = new ChecksumResult(\n                 5,\n                 ImmutableMap.<String, Object>builder()\n                         .put(\"int_array_checksum\", new SqlVarbinary(new byte[] {0x1a}))\n+                        .put(\"int_array_cardinality_sum\", 3L)\n+                        .put(\"map_array_checksum\", new SqlVarbinary(new byte[] {0x1b}))\n+                        .put(\"map_array_cardinality_sum\", 7L)\n+                        .build());\n+        assertEquals(\n+                checksumValidator.getMismatchedColumns(columns, controlChecksum, testChecksum),\n+                ImmutableMap.builder()\n+                        .put(INT_ARRAY_COLUMN, new ColumnMatchResult(false,\n+                                \"control(checksum: 0a, cardinality_sum: 3) test(checksum: 1a, cardinality_sum: 3)\"))\n+                        .put(MAP_ARRAY_COLUMN, new ColumnMatchResult(false,\n+                                \"control(checksum: 0b, cardinality_sum: 7) test(checksum: 1b, cardinality_sum: 7)\"))\n+                        .build());\n+\n+        // Mismatched different cardinality sum\n+        testChecksum = new ChecksumResult(\n+                5,\n+                ImmutableMap.<String, Object>builder()\n+                        .put(\"int_array_checksum\", new SqlVarbinary(new byte[] {0x1a}))\n+                        .put(\"int_array_cardinality_sum\", 2L)\n                         .put(\"map_array_checksum\", new SqlVarbinary(new byte[] {0x1b}))\n+                        .put(\"map_array_cardinality_sum\", 5L)\n                         .build());\n         assertEquals(\n                 checksumValidator.getMismatchedColumns(columns, controlChecksum, testChecksum),\n                 ImmutableMap.builder()\n-                        .put(INT_ARRAY_COLUMN, new ColumnMatchResult(false, \"control(checksum: 0a) test(checksum: 1a)\"))\n-                        .put(MAP_ARRAY_COLUMN, new ColumnMatchResult(false, \"control(checksum: 0b) test(checksum: 1b)\"))\n+                        .put(INT_ARRAY_COLUMN, new ColumnMatchResult(false,\n+                                \"control(checksum: 0a, cardinality_sum: 3) test(checksum: 1a, cardinality_sum: 2)\"))\n+                        .put(MAP_ARRAY_COLUMN, new ColumnMatchResult(false,\n+                                \"control(checksum: 0b, cardinality_sum: 7) test(checksum: 1b, cardinality_sum: 5)\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca896b76bc8c6c0b7a71b759c7df116f1b2536b8"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk4MTI3OQ==", "bodyText": "Also, rename this to checksumColumnAlias in the first commit.", "url": "https://github.com/prestodb/presto/pull/13916#discussion_r362981279", "createdAt": "2020-01-03T22:24:00Z", "author": {"login": "caithagoras"}, "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/checksum/ArrayColumnValidator.java", "diffHunk": "@@ -67,22 +68,41 @@ public ArrayColumnValidator()\n             checksum = new FunctionCall(QualifiedName.of(\"checksum\"), ImmutableList.of(column.getIdentifier()));\n         }\n \n-        return ImmutableList.of(new SingleColumn(checksum, Optional.of(delimitedIdentifier(getChecksumColumnAlias(column)))));\n+        Expression arrayCardinalitySum = new CoalesceExpression(\n+                new FunctionCall(\n+                        QualifiedName.of(\"sum\"),\n+                        ImmutableList.of(new FunctionCall(QualifiedName.of(\"cardinality\"), ImmutableList.of(column.getIdentifier())))),\n+                new LongLiteral(\"0\"));\n+\n+        return ImmutableList.of(\n+                new SingleColumn(checksum, Optional.of(delimitedIdentifier(getChecksumColumnAlias(column)))),\n+                new SingleColumn(arrayCardinalitySum, Optional.of(delimitedIdentifier(getCardinalitySumColumnAlias(column)))));\n     }\n \n     @Override\n     public ColumnMatchResult validate(Column column, ChecksumResult controlResult, ChecksumResult testResult)\n     {\n         String sortedChecksumColumnAlias = getChecksumColumnAlias(column);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca896b76bc8c6c0b7a71b759c7df116f1b2536b8"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM4MzAyOTQ1", "url": "https://github.com/prestodb/presto/pull/13916#pullrequestreview-338302945", "createdAt": "2020-01-03T22:33:43Z", "commit": {"oid": "ca896b76bc8c6c0b7a71b759c7df116f1b2536b8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ca896b76bc8c6c0b7a71b759c7df116f1b2536b8", "author": {"user": {"login": "ShenYi", "name": "shenyi"}}, "url": "https://github.com/prestodb/presto/commit/ca896b76bc8c6c0b7a71b759c7df116f1b2536b8", "committedDate": "2020-01-03T21:57:37Z", "message": "Add checks for the cardinalities sum when validating an array column\n\nFor array column mismatch, add additional information of the total\nnumber of elements across all rows."}, "afterCommit": {"oid": "8b1a99c4d20be543efcb5377ebae4c0af1426058", "author": {"user": {"login": "ShenYi", "name": "shenyi"}}, "url": "https://github.com/prestodb/presto/commit/8b1a99c4d20be543efcb5377ebae4c0af1426058", "committedDate": "2020-01-03T22:37:49Z", "message": "Add checks for the cardinalities sum when validating an array column\n\nFor array column mismatch, add additional information of the total\nnumber of elements across all rows."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1f01ce5b2227fd2e882052bc4048d0e36e66bd1", "author": {"user": {"login": "ShenYi", "name": "shenyi"}}, "url": "https://github.com/prestodb/presto/commit/f1f01ce5b2227fd2e882052bc4048d0e36e66bd1", "committedDate": "2020-01-06T19:43:10Z", "message": "Repurpose OrderableArrayColumnValidator to support all array types\n\nRefactor OrderableArrayColumnValidator into ArrayColumnValidator.\nAdd logic to also support non-orderable array types."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48746be82b55a041d6023b825c46b97e9a53e967", "author": {"user": {"login": "ShenYi", "name": "shenyi"}}, "url": "https://github.com/prestodb/presto/commit/48746be82b55a041d6023b825c46b97e9a53e967", "committedDate": "2020-01-06T19:43:10Z", "message": "Add checks for the cardinalities sum when validating an array column\n\nFor array column mismatch, add additional information of the total\nnumber of elements across all rows."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8b1a99c4d20be543efcb5377ebae4c0af1426058", "author": {"user": {"login": "ShenYi", "name": "shenyi"}}, "url": "https://github.com/prestodb/presto/commit/8b1a99c4d20be543efcb5377ebae4c0af1426058", "committedDate": "2020-01-03T22:37:49Z", "message": "Add checks for the cardinalities sum when validating an array column\n\nFor array column mismatch, add additional information of the total\nnumber of elements across all rows."}, "afterCommit": {"oid": "48746be82b55a041d6023b825c46b97e9a53e967", "author": {"user": {"login": "ShenYi", "name": "shenyi"}}, "url": "https://github.com/prestodb/presto/commit/48746be82b55a041d6023b825c46b97e9a53e967", "committedDate": "2020-01-06T19:43:10Z", "message": "Add checks for the cardinalities sum when validating an array column\n\nFor array column mismatch, add additional information of the total\nnumber of elements across all rows."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4440, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}