{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyMzc4ODg4", "number": 14950, "title": "Connect to Cassandra cluster using SSL", "bodyText": "Connect to Cassandra cluster with tls security\n== RELEASE NOTES ==\n\nCassandra Changes\n* Add TLS security support.", "createdAt": "2020-08-03T20:22:55Z", "url": "https://github.com/prestodb/presto/pull/14950", "merged": true, "mergeCommit": {"oid": "1d52c576eca07e9cb77fea89a5e8330409033f82"}, "closed": true, "closedAt": "2020-08-06T22:35:36Z", "author": {"login": "SandishKumarHN"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc8KJwrgFqTQ2MjIyOTM5Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc8TtcJAH2gAyNDYyMzc4ODg4OmVkNzg2NGY0NDU2ZWM5NGJkOGI3MDQ4OWJiZmIwNDYyMTYxNmIxYzI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMjI5Mzk2", "url": "https://github.com/prestodb/presto/pull/14950#pullrequestreview-462229396", "createdAt": "2020-08-06T06:47:51Z", "commit": {"oid": "21668d09f59d08ef37278641a5b31450295f78bc"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNjo0Nzo1MVrOG8lchA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNjo1MDoyNFrOG8lgng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE4MTI1Mg==", "bodyText": "static import loadKeyStore", "url": "https://github.com/prestodb/presto/pull/14950#discussion_r466181252", "createdAt": "2020-08-06T06:47:51Z", "author": {"login": "highker"}, "path": "presto-cassandra/src/main/java/com/facebook/presto/cassandra/util/SslContextProvider.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.cassandra.util;\n+\n+import com.facebook.airlift.security.pem.PemReader;\n+import com.facebook.presto.spi.PrestoException;\n+\n+import javax.net.ssl.KeyManager;\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.TrustManager;\n+import javax.net.ssl.TrustManagerFactory;\n+import javax.net.ssl.X509TrustManager;\n+import javax.security.auth.x500.X500Principal;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.security.GeneralSecurityException;\n+import java.security.KeyStore;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateExpiredException;\n+import java.security.cert.CertificateNotYetValidException;\n+import java.security.cert.X509Certificate;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.cassandra.CassandraErrorCode.CASSANDRA_SSL_INITIALIZATION_FAILURE;\n+import static java.util.Collections.list;\n+\n+public class SslContextProvider\n+{\n+    private final Optional<File> keystorePath;\n+    private final Optional<String> keystorePassword;\n+    private final Optional<File> truststorePath;\n+    private final Optional<String> truststorePassword;\n+\n+    public SslContextProvider(\n+            Optional<File> keystorePath,\n+            Optional<String> keystorePassword,\n+            Optional<File> truststorePath,\n+            Optional<String> truststorePassword)\n+    {\n+        this.keystorePath = keystorePath;\n+        this.keystorePassword = keystorePassword;\n+        this.truststorePath = truststorePath;\n+        this.truststorePassword = truststorePassword;\n+    }\n+\n+    public Optional<SSLContext> buildSslContext()\n+    {\n+        if (!keystorePath.isPresent() && !truststorePath.isPresent()) {\n+            return Optional.empty();\n+        }\n+        try {\n+            // load KeyStore if configured and get KeyManagers\n+            KeyStore keystore = null;\n+            KeyManager[] keyManagers = null;\n+            if (keystorePath.isPresent()) {\n+                char[] keyManagerPassword;\n+                try {\n+                    // attempt to read the key store as a PEM file\n+                    keystore = PemReader.loadKeyStore(keystorePath.get(), keystorePath.get(), keystorePassword);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21668d09f59d08ef37278641a5b31450295f78bc"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE4MTM4Mg==", "bodyText": "same", "url": "https://github.com/prestodb/presto/pull/14950#discussion_r466181382", "createdAt": "2020-08-06T06:48:14Z", "author": {"login": "highker"}, "path": "presto-cassandra/src/main/java/com/facebook/presto/cassandra/util/SslContextProvider.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.cassandra.util;\n+\n+import com.facebook.airlift.security.pem.PemReader;\n+import com.facebook.presto.spi.PrestoException;\n+\n+import javax.net.ssl.KeyManager;\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.TrustManager;\n+import javax.net.ssl.TrustManagerFactory;\n+import javax.net.ssl.X509TrustManager;\n+import javax.security.auth.x500.X500Principal;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.security.GeneralSecurityException;\n+import java.security.KeyStore;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateExpiredException;\n+import java.security.cert.CertificateNotYetValidException;\n+import java.security.cert.X509Certificate;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.cassandra.CassandraErrorCode.CASSANDRA_SSL_INITIALIZATION_FAILURE;\n+import static java.util.Collections.list;\n+\n+public class SslContextProvider\n+{\n+    private final Optional<File> keystorePath;\n+    private final Optional<String> keystorePassword;\n+    private final Optional<File> truststorePath;\n+    private final Optional<String> truststorePassword;\n+\n+    public SslContextProvider(\n+            Optional<File> keystorePath,\n+            Optional<String> keystorePassword,\n+            Optional<File> truststorePath,\n+            Optional<String> truststorePassword)\n+    {\n+        this.keystorePath = keystorePath;\n+        this.keystorePassword = keystorePassword;\n+        this.truststorePath = truststorePath;\n+        this.truststorePassword = truststorePassword;\n+    }\n+\n+    public Optional<SSLContext> buildSslContext()\n+    {\n+        if (!keystorePath.isPresent() && !truststorePath.isPresent()) {\n+            return Optional.empty();\n+        }\n+        try {\n+            // load KeyStore if configured and get KeyManagers\n+            KeyStore keystore = null;\n+            KeyManager[] keyManagers = null;\n+            if (keystorePath.isPresent()) {\n+                char[] keyManagerPassword;\n+                try {\n+                    // attempt to read the key store as a PEM file\n+                    keystore = PemReader.loadKeyStore(keystorePath.get(), keystorePath.get(), keystorePassword);\n+                    // for PEM encoded keys, the password is used to decrypt the specific key (and does not\n+                    // protect the keystore itself)\n+                    keyManagerPassword = new char[0];\n+                }\n+                catch (IOException | GeneralSecurityException ignored) {\n+                    keyManagerPassword = keystorePassword.map(String::toCharArray).orElse(null);\n+                    keystore = KeyStore.getInstance(KeyStore.getDefaultType());\n+                    try (InputStream in = new FileInputStream(keystorePath.get())) {\n+                        keystore.load(in, keyManagerPassword);\n+                    }\n+                }\n+                validateCertificates(keystore);\n+                KeyManagerFactory keyManagerFactory =\n+                        KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\n+                keyManagerFactory.init(keystore, keyManagerPassword);\n+                keyManagers = keyManagerFactory.getKeyManagers();\n+            }\n+            // load TrustStore if configured, otherwise use KeyStore\n+            KeyStore truststore = keystore;\n+            if (truststorePath.isPresent()) {\n+                truststore = loadTrustStore(truststorePath.get(), truststorePassword);\n+            }\n+\n+            // create TrustManagerFactory\n+            TrustManagerFactory trustManagerFactory =\n+                    TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n+            trustManagerFactory.init(truststore);\n+\n+            // get X509TrustManager\n+            TrustManager[] trustManagers = trustManagerFactory.getTrustManagers();\n+            if ((trustManagers.length != 1) || !(trustManagers[0] instanceof X509TrustManager)) {\n+                throw new RuntimeException(\"Unexpected default trust managers:\" + Arrays.toString(trustManagers));\n+            }\n+\n+            X509TrustManager trustManager = (X509TrustManager) trustManagers[0];\n+            // create SSLContext\n+            SSLContext result = SSLContext.getInstance(\"SSL\");\n+            result.init(keyManagers, new TrustManager[] {trustManager}, null);\n+            return Optional.of(result);\n+        }\n+        catch (GeneralSecurityException | IOException e) {\n+            throw new PrestoException(CASSANDRA_SSL_INITIALIZATION_FAILURE, e);\n+        }\n+    }\n+\n+    public KeyStore loadTrustStore(File trustStorePath, Optional<String> trustStorePassword)\n+            throws IOException, GeneralSecurityException\n+    {\n+        KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());\n+        try {\n+            // attempt to read the trust store as a PEM file\n+            List<X509Certificate> certificateChain = PemReader.readCertificateChain(trustStorePath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21668d09f59d08ef37278641a5b31450295f78bc"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE4MTkyNw==", "bodyText": "break a line between these two. Also, the indentation doesn't look right.", "url": "https://github.com/prestodb/presto/pull/14950#discussion_r466181927", "createdAt": "2020-08-06T06:49:34Z", "author": {"login": "highker"}, "path": "presto-cassandra/pom.xml", "diffHunk": "@@ -166,6 +166,10 @@\n             <artifactId>testing</artifactId>\n             <scope>test</scope>\n         </dependency>\n+      <dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21668d09f59d08ef37278641a5b31450295f78bc"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE4MjMwMg==", "bodyText": "one error code per line", "url": "https://github.com/prestodb/presto/pull/14950#discussion_r466182302", "createdAt": "2020-08-06T06:50:24Z", "author": {"login": "highker"}, "path": "presto-cassandra/src/main/java/com/facebook/presto/cassandra/CassandraErrorCode.java", "diffHunk": "@@ -22,7 +22,8 @@\n public enum CassandraErrorCode\n         implements ErrorCodeSupplier\n {\n-    CASSANDRA_METADATA_ERROR(0, EXTERNAL), CASSANDRA_VERSION_ERROR(1, EXTERNAL);\n+    CASSANDRA_METADATA_ERROR(0, EXTERNAL), CASSANDRA_VERSION_ERROR(1, EXTERNAL),\n+    CASSANDRA_SSL_INITIALIZATION_FAILURE(2, EXTERNAL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21668d09f59d08ef37278641a5b31450295f78bc"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyNjc1MzIw", "url": "https://github.com/prestodb/presto/pull/14950#pullrequestreview-462675320", "createdAt": "2020-08-06T16:21:56Z", "commit": {"oid": "d5bc04fc8a2ea48eee7ebb646dd4646efdd1cbe6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNjoyMTo1N1rOG862PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNjoyMTo1N1rOG862PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUzMTkwMA==", "bodyText": "import static com.facebook.airlift.security.pem.PemReader.readCertificateChain;", "url": "https://github.com/prestodb/presto/pull/14950#discussion_r466531900", "createdAt": "2020-08-06T16:21:57Z", "author": {"login": "highker"}, "path": "presto-cassandra/src/main/java/com/facebook/presto/cassandra/util/SslContextProvider.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.cassandra.util;\n+\n+import com.facebook.airlift.security.pem.PemReader;\n+import com.facebook.presto.spi.PrestoException;\n+\n+import javax.net.ssl.KeyManager;\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.TrustManager;\n+import javax.net.ssl.TrustManagerFactory;\n+import javax.net.ssl.X509TrustManager;\n+import javax.security.auth.x500.X500Principal;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.security.GeneralSecurityException;\n+import java.security.KeyStore;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateExpiredException;\n+import java.security.cert.CertificateNotYetValidException;\n+import java.security.cert.X509Certificate;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.cassandra.CassandraErrorCode.CASSANDRA_SSL_INITIALIZATION_FAILURE;\n+import static java.util.Collections.list;\n+\n+public class SslContextProvider\n+{\n+    private final Optional<File> keystorePath;\n+    private final Optional<String> keystorePassword;\n+    private final Optional<File> truststorePath;\n+    private final Optional<String> truststorePassword;\n+\n+    public SslContextProvider(\n+            Optional<File> keystorePath,\n+            Optional<String> keystorePassword,\n+            Optional<File> truststorePath,\n+            Optional<String> truststorePassword)\n+    {\n+        this.keystorePath = keystorePath;\n+        this.keystorePassword = keystorePassword;\n+        this.truststorePath = truststorePath;\n+        this.truststorePassword = truststorePassword;\n+    }\n+\n+    public Optional<SSLContext> buildSslContext()\n+    {\n+        if (!keystorePath.isPresent() && !truststorePath.isPresent()) {\n+            return Optional.empty();\n+        }\n+        try {\n+            // load KeyStore if configured and get KeyManagers\n+            KeyStore keystore = null;\n+            KeyManager[] keyManagers = null;\n+            if (keystorePath.isPresent()) {\n+                char[] keyManagerPassword;\n+                try {\n+                    // attempt to read the key store as a PEM file\n+                    keystore = PemReader.loadKeyStore(keystorePath.get(), keystorePath.get(), keystorePassword);\n+                    // for PEM encoded keys, the password is used to decrypt the specific key (and does not\n+                    // protect the keystore itself)\n+                    keyManagerPassword = new char[0];\n+                }\n+                catch (IOException | GeneralSecurityException ignored) {\n+                    keyManagerPassword = keystorePassword.map(String::toCharArray).orElse(null);\n+                    keystore = KeyStore.getInstance(KeyStore.getDefaultType());\n+                    try (InputStream in = new FileInputStream(keystorePath.get())) {\n+                        keystore.load(in, keyManagerPassword);\n+                    }\n+                }\n+                validateCertificates(keystore);\n+                KeyManagerFactory keyManagerFactory =\n+                        KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\n+                keyManagerFactory.init(keystore, keyManagerPassword);\n+                keyManagers = keyManagerFactory.getKeyManagers();\n+            }\n+            // load TrustStore if configured, otherwise use KeyStore\n+            KeyStore truststore = keystore;\n+            if (truststorePath.isPresent()) {\n+                truststore = loadTrustStore(truststorePath.get(), truststorePassword);\n+            }\n+\n+            // create TrustManagerFactory\n+            TrustManagerFactory trustManagerFactory =\n+                    TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n+            trustManagerFactory.init(truststore);\n+\n+            // get X509TrustManager\n+            TrustManager[] trustManagers = trustManagerFactory.getTrustManagers();\n+            if ((trustManagers.length != 1) || !(trustManagers[0] instanceof X509TrustManager)) {\n+                throw new RuntimeException(\"Unexpected default trust managers:\" + Arrays.toString(trustManagers));\n+            }\n+\n+            X509TrustManager trustManager = (X509TrustManager) trustManagers[0];\n+            // create SSLContext\n+            SSLContext result = SSLContext.getInstance(\"SSL\");\n+            result.init(keyManagers, new TrustManager[] {trustManager}, null);\n+            return Optional.of(result);\n+        }\n+        catch (GeneralSecurityException | IOException e) {\n+            throw new PrestoException(CASSANDRA_SSL_INITIALIZATION_FAILURE, e);\n+        }\n+    }\n+\n+    public KeyStore loadTrustStore(File trustStorePath, Optional<String> trustStorePassword)\n+            throws IOException, GeneralSecurityException\n+    {\n+        KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());\n+        try {\n+            // attempt to read the trust store as a PEM file\n+            List<X509Certificate> certificateChain = PemReader.readCertificateChain(trustStorePath);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE4MTM4Mg=="}, "originalCommit": {"oid": "21668d09f59d08ef37278641a5b31450295f78bc"}, "originalPosition": 128}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed7864f4456ec94bd8b70489bbfb04621616b1c2", "author": {"user": {"login": "SandishKumarHN", "name": "SandishKumarHN"}}, "url": "https://github.com/prestodb/presto/commit/ed7864f4456ec94bd8b70489bbfb04621616b1c2", "committedDate": "2020-08-06T17:59:22Z", "message": "prestodb connect to cassandra cluster with tls security"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 409, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}