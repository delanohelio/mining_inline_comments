{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA1MDg3NDM0", "number": 15322, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMToxMTo1M1rOEury_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNzo0MzoyM1rOFA6DXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3Mzg3NTE5OnYy", "diffSide": "RIGHT", "path": "presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMToxMTo1M1rOHjP7iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMToxMTo1M1rOHjP7iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjcyMzIwOQ==", "bodyText": "Also add a test for passing * - AllColumns I assume that you just added a visitor above.", "url": "https://github.com/prestodb/presto/pull/15322#discussion_r506723209", "createdAt": "2020-10-16T21:11:53Z", "author": {"login": "kaikalur"}, "path": "presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java", "diffHunk": "@@ -4760,6 +4773,44 @@ public void testExecuteWithParametersInGroupBy()\n         }\n     }\n \n+    @Test\n+    public void testExecuteUsingSubqueryFails()\n+    {\n+        try {\n+            String query = \"SELECT ?\";\n+            Session session = Session.builder(getSession())\n+                    .addPreparedStatement(\"my_query\", query)\n+                    .build();\n+            computeActual(session, \"EXECUTE my_query USING (SELECT 1 from nation)\");\n+            fail(\"nonLiteral parameters should fail\");\n+        }\n+        catch (SemanticException e) {\n+            assertEquals(e.getCode(), EXPRESSION_NOT_CONSTANT);\n+        }\n+        catch (RuntimeException e) {\n+            assertEquals(e.getMessage(), \"line 1:24: Constant expression cannot contain table references\");\n+        }\n+    }\n+\n+    @Test\n+    public void testExecuteUsingColumnReferenceFails()\n+    {\n+        try {\n+            String query = \"SELECT ? from nation\";\n+            Session session = Session.builder(getSession())\n+                    .addPreparedStatement(\"my_query\", query)\n+                    .build();\n+            computeActual(session, \"EXECUTE my_query USING \\\"nationkey\\\"\");\n+            fail(\"nonLiteral parameters should fail\");\n+        }\n+        catch (SemanticException e) {\n+            assertEquals(e.getCode(), EXPRESSION_NOT_CONSTANT);\n+        }\n+        catch (RuntimeException e) {\n+            assertEquals(e.getMessage(), \"line 1:24: Constant expression cannot contain column references\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "680a0b7371be5f84360c393d623c2093d27cb76c"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3Mzg3ODA1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/ConstantExpressionVerifier.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMToxMzoxNFrOHjP9Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMToxMzoxNFrOHjP9Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjcyMzY2Mg==", "bodyText": "How about things like UDFs? Maybe we should disallow those as well?", "url": "https://github.com/prestodb/presto/pull/15322#discussion_r506723662", "createdAt": "2020-10-16T21:13:14Z", "author": {"login": "kaikalur"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/ConstantExpressionVerifier.java", "diffHunk": "@@ -67,5 +69,17 @@ protected Void visitFieldReference(FieldReference node, Void context)\n         {\n             throw new SemanticException(EXPRESSION_NOT_CONSTANT, expression, \"Constant expression cannot contain column references\");\n         }\n+\n+        @Override\n+        protected Void visitAllColumns(AllColumns node, Void context)\n+        {\n+            throw new SemanticException(EXPRESSION_NOT_CONSTANT, expression, \"Constant expression cannot contain column references\");\n+        }\n+\n+        @Override\n+        protected Void visitTable(Table node, Void context)\n+        {\n+            throw new SemanticException(EXPRESSION_NOT_CONSTANT, expression, \"Constant expression cannot contain table references\");\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "680a0b7371be5f84360c393d623c2093d27cb76c"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDgyMjMzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/ParameterVerifier.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNzoxMDoyNFrOH_Z_vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNzoxMDoyNFrOH_Z_vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI0ODI1NA==", "bodyText": "I thought we want to do all these kinds of things on RowExpression? Note that Core SQL is imminent and we will have yet another AST - for better or worse - so it will be best if we don't do more things using the current Expression API.", "url": "https://github.com/prestodb/presto/pull/15322#discussion_r536248254", "createdAt": "2020-12-04T17:10:24Z", "author": {"login": "kaikalur"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/ParameterVerifier.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.analyzer;\n+\n+import com.facebook.presto.sql.tree.ArithmeticUnaryExpression;\n+import com.facebook.presto.sql.tree.ArrayConstructor;\n+import com.facebook.presto.sql.tree.AstVisitor;\n+import com.facebook.presto.sql.tree.AtTimeZone;\n+import com.facebook.presto.sql.tree.Cast;\n+import com.facebook.presto.sql.tree.CurrentTime;\n+import com.facebook.presto.sql.tree.CurrentUser;\n+import com.facebook.presto.sql.tree.Expression;\n+import com.facebook.presto.sql.tree.FunctionCall;\n+import com.facebook.presto.sql.tree.Literal;\n+import com.facebook.presto.sql.tree.QualifiedName;\n+import com.facebook.presto.sql.tree.Row;\n+\n+import static com.facebook.presto.operator.scalar.MapConstructor.MAP_CONSTRUCTOR;\n+import static com.facebook.presto.sql.analyzer.SemanticErrorCode.INVALID_PARAMETER_USAGE;\n+import static java.lang.String.format;\n+\n+public final class ParameterVerifier\n+{\n+    private ParameterVerifier() {}\n+\n+    public static void verifyParameterIsValid(Expression expression)\n+    {\n+        new ParameterVerifierVisitor().process(expression, null);\n+    }\n+\n+    private static class ParameterVerifierVisitor\n+            extends AstVisitor<Void, Void>\n+    {\n+        @Override\n+        protected Void visitExpression(Expression node, Void context)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5dab89f88ddbeba88e37dadd4a17c88562593603"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDk1NDUyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/ParameterVerifier.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNzo0MzoyM1rOH_bN7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNzo0MzoyM1rOH_bN7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI2ODI3MA==", "bodyText": "Also, I see another similar class:\npresto-main/src/main/java/com/facebook/presto/sql/analyzer/ConstantExpressionVerifier.java\nCan we use that?", "url": "https://github.com/prestodb/presto/pull/15322#discussion_r536268270", "createdAt": "2020-12-04T17:43:23Z", "author": {"login": "kaikalur"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/ParameterVerifier.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.analyzer;\n+\n+import com.facebook.presto.sql.tree.ArithmeticUnaryExpression;\n+import com.facebook.presto.sql.tree.ArrayConstructor;\n+import com.facebook.presto.sql.tree.AstVisitor;\n+import com.facebook.presto.sql.tree.AtTimeZone;\n+import com.facebook.presto.sql.tree.Cast;\n+import com.facebook.presto.sql.tree.CurrentTime;\n+import com.facebook.presto.sql.tree.CurrentUser;\n+import com.facebook.presto.sql.tree.Expression;\n+import com.facebook.presto.sql.tree.FunctionCall;\n+import com.facebook.presto.sql.tree.Literal;\n+import com.facebook.presto.sql.tree.QualifiedName;\n+import com.facebook.presto.sql.tree.Row;\n+\n+import static com.facebook.presto.operator.scalar.MapConstructor.MAP_CONSTRUCTOR;\n+import static com.facebook.presto.sql.analyzer.SemanticErrorCode.INVALID_PARAMETER_USAGE;\n+import static java.lang.String.format;\n+\n+public final class ParameterVerifier\n+{\n+    private ParameterVerifier() {}\n+\n+    public static void verifyParameterIsValid(Expression expression)\n+    {\n+        new ParameterVerifierVisitor().process(expression, null);\n+    }\n+\n+    private static class ParameterVerifierVisitor", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5dab89f88ddbeba88e37dadd4a17c88562593603"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3519, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}