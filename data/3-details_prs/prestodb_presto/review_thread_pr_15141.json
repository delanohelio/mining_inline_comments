{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgyMzcyODE0", "number": 15141, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNjozODoxOVrOEhwwuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODoxNTozNFrOEhzExw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODM3MzY5OnYy", "diffSide": "RIGHT", "path": "presto-tests/src/main/java/com/facebook/presto/tests/DistributedQueryRunner.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNjozODoxOVrOHPQbVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNjozODoxOVrOHPQbVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc1OTgyOQ==", "bodyText": "Should we call nativeWorker* => externalWorker*?", "url": "https://github.com/prestodb/presto/pull/15141#discussion_r485759829", "createdAt": "2020-09-09T16:38:19Z", "author": {"login": "tdcmeehan"}, "path": "presto-tests/src/main/java/com/facebook/presto/tests/DistributedQueryRunner.java", "diffHunk": "@@ -136,19 +139,42 @@ private DistributedQueryRunner(\n             discoveryServer = new TestingDiscoveryServer(environment);\n             closer.register(() -> closeUnchecked(discoveryServer));\n             log.info(\"Created TestingDiscoveryServer in %s\", nanosSince(start).convertToMostSuccinctTimeUnit());\n+            URI discoveryUrl = discoveryServer.getBaseUrl();\n+            log.info(\"Discovery URL %s\", discoveryUrl);\n+\n+            if (nativeWorkerLauncher.isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c959c386ddd015103d10b18789f4e343345734c8"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODQxNTc1OnYy", "diffSide": "RIGHT", "path": "presto-tests/src/main/java/com/facebook/presto/tests/DistributedQueryRunner.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNjo0NjowMlrOHPQ0lA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNjo0NjowMlrOHPQ0lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc2NjI5Mg==", "bodyText": "It feels like we can fairly easily squash these three checks on nativeWorkerLauncher into one?", "url": "https://github.com/prestodb/presto/pull/15141#discussion_r485766292", "createdAt": "2020-09-09T16:46:02Z", "author": {"login": "tdcmeehan"}, "path": "presto-tests/src/main/java/com/facebook/presto/tests/DistributedQueryRunner.java", "diffHunk": "@@ -136,19 +139,42 @@ private DistributedQueryRunner(\n             discoveryServer = new TestingDiscoveryServer(environment);\n             closer.register(() -> closeUnchecked(discoveryServer));\n             log.info(\"Created TestingDiscoveryServer in %s\", nanosSince(start).convertToMostSuccinctTimeUnit());\n+            URI discoveryUrl = discoveryServer.getBaseUrl();\n+            log.info(\"Discovery URL %s\", discoveryUrl);\n+\n+            if (nativeWorkerLauncher.isPresent()) {\n+                ImmutableList.Builder<Process> nativeWorkersBuilder = ImmutableList.builder();\n+                for (int i = 0; i < nodeCount; i++) {\n+                    nativeWorkersBuilder.add(nativeWorkerLauncher.get().apply(i, discoveryUrl));\n+                }\n+                nativeWorkers = nativeWorkersBuilder.build();\n+                closer.register(() -> {\n+                    for (Process nativeWorker : nativeWorkers) {\n+                        nativeWorker.destroyForcibly();\n+                    }\n+                });\n+            }\n+            else {\n+                nativeWorkers = ImmutableList.of();\n+            }\n \n             ImmutableList.Builder<TestingPrestoServer> servers = ImmutableList.builder();\n-\n-            for (int i = 1; i < nodeCount; i++) {\n-                TestingPrestoServer worker = closer.register(createTestingPrestoServer(discoveryServer.getBaseUrl(), false, extraProperties, parserOptions, environment, baseDataDir));\n-                servers.add(worker);\n+            if (!nativeWorkerLauncher.isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c959c386ddd015103d10b18789f4e343345734c8"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODQyODYwOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveNativeWorkersQueries.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNjo0ODoyNVrOHPQ7-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNjo0ODoyNVrOHPQ7-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc2ODE4Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                String.format(\"discovery.uri=%s\\n\", discoveryUrl).getBytes());\n          \n          \n            \n                                                format(\"discovery.uri=%s\\n\", discoveryUrl).getBytes());", "url": "https://github.com/prestodb/presto/pull/15141#discussion_r485768186", "createdAt": "2020-09-09T16:48:25Z", "author": {"login": "tdcmeehan"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveNativeWorkersQueries.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.testing.QueryRunner;\n+import com.facebook.presto.tests.AbstractTestQueryFramework;\n+import com.facebook.presto.tests.DistributedQueryRunner;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static io.airlift.tpch.TpchTable.NATION;\n+\n+public class TestHiveNativeWorkersQueries\n+        extends AbstractTestQueryFramework\n+{\n+    protected TestHiveNativeWorkersQueries()\n+    {\n+        super(TestHiveNativeWorkersQueries::createQueryRunner);\n+    }\n+\n+    private static QueryRunner createQueryRunner()\n+            throws Exception\n+    {\n+        String prestoServerPath = System.getenv(\"PRESTO_SERVER\");\n+        checkArgument(prestoServerPath != null,\n+                \"Path to native Presto server binary is missing. Specify it using PRESTO_SERVER environment variable.\");\n+\n+        String baseDataDir = System.getenv(\"DATA_DIR\");\n+        checkArgument(baseDataDir != null,\n+                \"Path to data files is missing. Specify it using DATA_DIR environment variable\");\n+\n+        // Make TPC-H tables in DWRF format using Java-based workers\n+        HiveQueryRunner.createQueryRunner(ImmutableList.of(NATION),\n+                ImmutableMap.of(),\n+                \"sql-standard\",\n+                ImmutableMap.of(\"hive.storage-format\", \"DWRF\"),\n+                Optional.of(Paths.get(baseDataDir))).close();\n+\n+        // Make query runner with native workers for tests\n+        DistributedQueryRunner queryRunner = HiveQueryRunner.createQueryRunner(ImmutableList.of(NATION),\n+                ImmutableMap.of(\"optimizer.optimize-hash-generation\", \"false\"),\n+                ImmutableMap.of(),\n+                \"sql-standard\",\n+                ImmutableMap.of(),\n+                Optional.of(1),\n+                Optional.of(Paths.get(baseDataDir)),\n+                Optional.of((workerIndex, discoveryUrl) -> {\n+                    try {\n+                        if (workerIndex == 0) {\n+                            // Write discovery URL to /tmp/config.properties\n+                            Files.write(Paths.get(\"/tmp/config.properties\"),\n+                                    String.format(\"discovery.uri=%s\\n\", discoveryUrl).getBytes());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c959c386ddd015103d10b18789f4e343345734c8"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODQyOTQ5OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveNativeWorkersQueries.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNjo0ODozNFrOHPQ8kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNjo0ODozNFrOHPQ8kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc2ODMzNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            Optional.of((workerIndex, discoveryUrl) -> {\n          \n          \n            \n                            Optional.of((workerIndex, discoveryUri) -> {", "url": "https://github.com/prestodb/presto/pull/15141#discussion_r485768337", "createdAt": "2020-09-09T16:48:34Z", "author": {"login": "tdcmeehan"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveNativeWorkersQueries.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.testing.QueryRunner;\n+import com.facebook.presto.tests.AbstractTestQueryFramework;\n+import com.facebook.presto.tests.DistributedQueryRunner;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static io.airlift.tpch.TpchTable.NATION;\n+\n+public class TestHiveNativeWorkersQueries\n+        extends AbstractTestQueryFramework\n+{\n+    protected TestHiveNativeWorkersQueries()\n+    {\n+        super(TestHiveNativeWorkersQueries::createQueryRunner);\n+    }\n+\n+    private static QueryRunner createQueryRunner()\n+            throws Exception\n+    {\n+        String prestoServerPath = System.getenv(\"PRESTO_SERVER\");\n+        checkArgument(prestoServerPath != null,\n+                \"Path to native Presto server binary is missing. Specify it using PRESTO_SERVER environment variable.\");\n+\n+        String baseDataDir = System.getenv(\"DATA_DIR\");\n+        checkArgument(baseDataDir != null,\n+                \"Path to data files is missing. Specify it using DATA_DIR environment variable\");\n+\n+        // Make TPC-H tables in DWRF format using Java-based workers\n+        HiveQueryRunner.createQueryRunner(ImmutableList.of(NATION),\n+                ImmutableMap.of(),\n+                \"sql-standard\",\n+                ImmutableMap.of(\"hive.storage-format\", \"DWRF\"),\n+                Optional.of(Paths.get(baseDataDir))).close();\n+\n+        // Make query runner with native workers for tests\n+        DistributedQueryRunner queryRunner = HiveQueryRunner.createQueryRunner(ImmutableList.of(NATION),\n+                ImmutableMap.of(\"optimizer.optimize-hash-generation\", \"false\"),\n+                ImmutableMap.of(),\n+                \"sql-standard\",\n+                ImmutableMap.of(),\n+                Optional.of(1),\n+                Optional.of(Paths.get(baseDataDir)),\n+                Optional.of((workerIndex, discoveryUrl) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c959c386ddd015103d10b18789f4e343345734c8"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODQzMzI2OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveNativeWorkersQueries.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNjo0OToxOVrOHPQ-yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODo0ODowMFrOHPVMnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc2ODkwNg==", "bodyText": "Any reason we can't do this just once outside of the lambda?", "url": "https://github.com/prestodb/presto/pull/15141#discussion_r485768906", "createdAt": "2020-09-09T16:49:19Z", "author": {"login": "tdcmeehan"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveNativeWorkersQueries.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.testing.QueryRunner;\n+import com.facebook.presto.tests.AbstractTestQueryFramework;\n+import com.facebook.presto.tests.DistributedQueryRunner;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static io.airlift.tpch.TpchTable.NATION;\n+\n+public class TestHiveNativeWorkersQueries\n+        extends AbstractTestQueryFramework\n+{\n+    protected TestHiveNativeWorkersQueries()\n+    {\n+        super(TestHiveNativeWorkersQueries::createQueryRunner);\n+    }\n+\n+    private static QueryRunner createQueryRunner()\n+            throws Exception\n+    {\n+        String prestoServerPath = System.getenv(\"PRESTO_SERVER\");\n+        checkArgument(prestoServerPath != null,\n+                \"Path to native Presto server binary is missing. Specify it using PRESTO_SERVER environment variable.\");\n+\n+        String baseDataDir = System.getenv(\"DATA_DIR\");\n+        checkArgument(baseDataDir != null,\n+                \"Path to data files is missing. Specify it using DATA_DIR environment variable\");\n+\n+        // Make TPC-H tables in DWRF format using Java-based workers\n+        HiveQueryRunner.createQueryRunner(ImmutableList.of(NATION),\n+                ImmutableMap.of(),\n+                \"sql-standard\",\n+                ImmutableMap.of(\"hive.storage-format\", \"DWRF\"),\n+                Optional.of(Paths.get(baseDataDir))).close();\n+\n+        // Make query runner with native workers for tests\n+        DistributedQueryRunner queryRunner = HiveQueryRunner.createQueryRunner(ImmutableList.of(NATION),\n+                ImmutableMap.of(\"optimizer.optimize-hash-generation\", \"false\"),\n+                ImmutableMap.of(),\n+                \"sql-standard\",\n+                ImmutableMap.of(),\n+                Optional.of(1),\n+                Optional.of(Paths.get(baseDataDir)),\n+                Optional.of((workerIndex, discoveryUrl) -> {\n+                    try {\n+                        if (workerIndex == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c959c386ddd015103d10b18789f4e343345734c8"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgzNzk4MQ==", "bodyText": "@tdcmeehan We need discoveryUri which is available only from within the callback.", "url": "https://github.com/prestodb/presto/pull/15141#discussion_r485837981", "createdAt": "2020-09-09T18:48:00Z", "author": {"login": "mbasmanova"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveNativeWorkersQueries.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.testing.QueryRunner;\n+import com.facebook.presto.tests.AbstractTestQueryFramework;\n+import com.facebook.presto.tests.DistributedQueryRunner;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static io.airlift.tpch.TpchTable.NATION;\n+\n+public class TestHiveNativeWorkersQueries\n+        extends AbstractTestQueryFramework\n+{\n+    protected TestHiveNativeWorkersQueries()\n+    {\n+        super(TestHiveNativeWorkersQueries::createQueryRunner);\n+    }\n+\n+    private static QueryRunner createQueryRunner()\n+            throws Exception\n+    {\n+        String prestoServerPath = System.getenv(\"PRESTO_SERVER\");\n+        checkArgument(prestoServerPath != null,\n+                \"Path to native Presto server binary is missing. Specify it using PRESTO_SERVER environment variable.\");\n+\n+        String baseDataDir = System.getenv(\"DATA_DIR\");\n+        checkArgument(baseDataDir != null,\n+                \"Path to data files is missing. Specify it using DATA_DIR environment variable\");\n+\n+        // Make TPC-H tables in DWRF format using Java-based workers\n+        HiveQueryRunner.createQueryRunner(ImmutableList.of(NATION),\n+                ImmutableMap.of(),\n+                \"sql-standard\",\n+                ImmutableMap.of(\"hive.storage-format\", \"DWRF\"),\n+                Optional.of(Paths.get(baseDataDir))).close();\n+\n+        // Make query runner with native workers for tests\n+        DistributedQueryRunner queryRunner = HiveQueryRunner.createQueryRunner(ImmutableList.of(NATION),\n+                ImmutableMap.of(\"optimizer.optimize-hash-generation\", \"false\"),\n+                ImmutableMap.of(),\n+                \"sql-standard\",\n+                ImmutableMap.of(),\n+                Optional.of(1),\n+                Optional.of(Paths.get(baseDataDir)),\n+                Optional.of((workerIndex, discoveryUrl) -> {\n+                    try {\n+                        if (workerIndex == 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc2ODkwNg=="}, "originalCommit": {"oid": "c959c386ddd015103d10b18789f4e343345734c8"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODQ0MDA2OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveNativeWorkersQueries.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNjo1MDozN1rOHPRC9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNjo1MDozN1rOHPRC9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc2OTk3Mg==", "bodyText": "Rather than presuming the existence of /tmp, can we just use Files.createTempDirectory(prefix);?  We could also tag the prefix with the test class name of this test (for discoverability, in case it accidentally creates too many local temp directories).", "url": "https://github.com/prestodb/presto/pull/15141#discussion_r485769972", "createdAt": "2020-09-09T16:50:37Z", "author": {"login": "tdcmeehan"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveNativeWorkersQueries.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.testing.QueryRunner;\n+import com.facebook.presto.tests.AbstractTestQueryFramework;\n+import com.facebook.presto.tests.DistributedQueryRunner;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static io.airlift.tpch.TpchTable.NATION;\n+\n+public class TestHiveNativeWorkersQueries\n+        extends AbstractTestQueryFramework\n+{\n+    protected TestHiveNativeWorkersQueries()\n+    {\n+        super(TestHiveNativeWorkersQueries::createQueryRunner);\n+    }\n+\n+    private static QueryRunner createQueryRunner()\n+            throws Exception\n+    {\n+        String prestoServerPath = System.getenv(\"PRESTO_SERVER\");\n+        checkArgument(prestoServerPath != null,\n+                \"Path to native Presto server binary is missing. Specify it using PRESTO_SERVER environment variable.\");\n+\n+        String baseDataDir = System.getenv(\"DATA_DIR\");\n+        checkArgument(baseDataDir != null,\n+                \"Path to data files is missing. Specify it using DATA_DIR environment variable\");\n+\n+        // Make TPC-H tables in DWRF format using Java-based workers\n+        HiveQueryRunner.createQueryRunner(ImmutableList.of(NATION),\n+                ImmutableMap.of(),\n+                \"sql-standard\",\n+                ImmutableMap.of(\"hive.storage-format\", \"DWRF\"),\n+                Optional.of(Paths.get(baseDataDir))).close();\n+\n+        // Make query runner with native workers for tests\n+        DistributedQueryRunner queryRunner = HiveQueryRunner.createQueryRunner(ImmutableList.of(NATION),\n+                ImmutableMap.of(\"optimizer.optimize-hash-generation\", \"false\"),\n+                ImmutableMap.of(),\n+                \"sql-standard\",\n+                ImmutableMap.of(),\n+                Optional.of(1),\n+                Optional.of(Paths.get(baseDataDir)),\n+                Optional.of((workerIndex, discoveryUrl) -> {\n+                    try {\n+                        if (workerIndex == 0) {\n+                            // Write discovery URL to /tmp/config.properties\n+                            Files.write(Paths.get(\"/tmp/config.properties\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c959c386ddd015103d10b18789f4e343345734c8"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODQ4MjU2OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveNativeWorkersQueries.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNjo1ODoxMFrOHPRdDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNjo1ODoxMFrOHPRdDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc3NjY1NQ==", "bodyText": "This is a small nit, but I think it would be preferable to make it clear these come from the environment, but having two methods, one which takes these as arguments, and an outer one which passes them in from the environment.", "url": "https://github.com/prestodb/presto/pull/15141#discussion_r485776655", "createdAt": "2020-09-09T16:58:10Z", "author": {"login": "tdcmeehan"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveNativeWorkersQueries.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.testing.QueryRunner;\n+import com.facebook.presto.tests.AbstractTestQueryFramework;\n+import com.facebook.presto.tests.DistributedQueryRunner;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static io.airlift.tpch.TpchTable.NATION;\n+\n+public class TestHiveNativeWorkersQueries\n+        extends AbstractTestQueryFramework\n+{\n+    protected TestHiveNativeWorkersQueries()\n+    {\n+        super(TestHiveNativeWorkersQueries::createQueryRunner);\n+    }\n+\n+    private static QueryRunner createQueryRunner()\n+            throws Exception\n+    {\n+        String prestoServerPath = System.getenv(\"PRESTO_SERVER\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c959c386ddd015103d10b18789f4e343345734c8"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODQ4NDYwOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveNativeWorkersQueries.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNjo1ODo0NFrOHPRebg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxOTowMzoxM1rOHPVsgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc3NzAwNg==", "bodyText": "Maybe annotate this as @Experimental so people who are unawares don't try to run it locally (I presume there's no well known way to get this to work right now?)", "url": "https://github.com/prestodb/presto/pull/15141#discussion_r485777006", "createdAt": "2020-09-09T16:58:44Z", "author": {"login": "tdcmeehan"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveNativeWorkersQueries.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.testing.QueryRunner;\n+import com.facebook.presto.tests.AbstractTestQueryFramework;\n+import com.facebook.presto.tests.DistributedQueryRunner;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static io.airlift.tpch.TpchTable.NATION;\n+\n+public class TestHiveNativeWorkersQueries", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c959c386ddd015103d10b18789f4e343345734c8"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0MDkyMQ==", "bodyText": "Would you like me to use com.facebook.presto.spi.api.Experimental or something else? Anyone can run it locally, but they would need to build native presto worker first.", "url": "https://github.com/prestodb/presto/pull/15141#discussion_r485840921", "createdAt": "2020-09-09T18:53:28Z", "author": {"login": "mbasmanova"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveNativeWorkersQueries.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.testing.QueryRunner;\n+import com.facebook.presto.tests.AbstractTestQueryFramework;\n+import com.facebook.presto.tests.DistributedQueryRunner;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static io.airlift.tpch.TpchTable.NATION;\n+\n+public class TestHiveNativeWorkersQueries", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc3NzAwNg=="}, "originalCommit": {"oid": "c959c386ddd015103d10b18789f4e343345734c8"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0NTI0OQ==", "bodyText": "When I look at a Testng test in our codebase, I have the expectation of simply being able to run it in IntelliJ.  Because the setup here is more complicated and, as I understand it, requires some external setup which isn't captured or documented in this test, I'm just trying to think of a way to make it clear to people that you can't just do that.\nIdeally, it would be really nice to develop some tools to run these locally, presuming you have Docker or some containerization software locally running on an Intel CPU.  But that sounds really complicated, so I just though that the Experimental annotation from SPI would do.  Open to other suggestions to make it clear (perhaps also detailed comments explaining how to run locally).", "url": "https://github.com/prestodb/presto/pull/15141#discussion_r485845249", "createdAt": "2020-09-09T19:01:26Z", "author": {"login": "tdcmeehan"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveNativeWorkersQueries.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.testing.QueryRunner;\n+import com.facebook.presto.tests.AbstractTestQueryFramework;\n+import com.facebook.presto.tests.DistributedQueryRunner;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static io.airlift.tpch.TpchTable.NATION;\n+\n+public class TestHiveNativeWorkersQueries", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc3NzAwNg=="}, "originalCommit": {"oid": "c959c386ddd015103d10b18789f4e343345734c8"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0NjE0NQ==", "bodyText": "I'll add @experimental from spi. I'd be happy to add instructions, but they require checking out private GitHub repo.", "url": "https://github.com/prestodb/presto/pull/15141#discussion_r485846145", "createdAt": "2020-09-09T19:03:13Z", "author": {"login": "mbasmanova"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveNativeWorkersQueries.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.testing.QueryRunner;\n+import com.facebook.presto.tests.AbstractTestQueryFramework;\n+import com.facebook.presto.tests.DistributedQueryRunner;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static io.airlift.tpch.TpchTable.NATION;\n+\n+public class TestHiveNativeWorkersQueries", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc3NzAwNg=="}, "originalCommit": {"oid": "c959c386ddd015103d10b18789f4e343345734c8"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODUwNTAyOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveNativeWorkersQueries.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNzowNDoxMFrOHPRrJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxOTo0MDo0NVrOHPXK2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc4MDI2Mw==", "bodyText": "It would be nice to have a default which just loads up Presto Java workers.  That would ensure this test actually works, and potentially spot and document discrepancies between Java vs. custom workers. (Also, it would allow us to include at least that version in our CI system.)", "url": "https://github.com/prestodb/presto/pull/15141#discussion_r485780263", "createdAt": "2020-09-09T17:04:10Z", "author": {"login": "tdcmeehan"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveNativeWorkersQueries.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.testing.QueryRunner;\n+import com.facebook.presto.tests.AbstractTestQueryFramework;\n+import com.facebook.presto.tests.DistributedQueryRunner;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static io.airlift.tpch.TpchTable.NATION;\n+\n+public class TestHiveNativeWorkersQueries", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c959c386ddd015103d10b18789f4e343345734c8"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0MTgwOA==", "bodyText": "I'm not sure I understand this suggestion. The queries are very simple and there is not much benefit in running them against Java workers. The verification is happening using H2 just like any other test, hence, there should not be any concern about the test's correctness. Am I missing something?", "url": "https://github.com/prestodb/presto/pull/15141#discussion_r485841808", "createdAt": "2020-09-09T18:55:07Z", "author": {"login": "mbasmanova"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveNativeWorkersQueries.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.testing.QueryRunner;\n+import com.facebook.presto.tests.AbstractTestQueryFramework;\n+import com.facebook.presto.tests.DistributedQueryRunner;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static io.airlift.tpch.TpchTable.NATION;\n+\n+public class TestHiveNativeWorkersQueries", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc4MDI2Mw=="}, "originalCommit": {"oid": "c959c386ddd015103d10b18789f4e343345734c8"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0NjE5OA==", "bodyText": "Hmm, I missed this, how is verification happening with H2?  My only point was, if we don't want to introduce a dependency from PrestoDB (Java source) to C++ native worker source which exists somewhere else, but still want to make sure that future tests are sane, it would be nice to have a default, and an easy way to accomplish that would have the default be a vanilla Java worker to serve as a baseline.  Not sure how H2 verification is happening in this test.  The default would test the native worker launcher only.", "url": "https://github.com/prestodb/presto/pull/15141#discussion_r485846198", "createdAt": "2020-09-09T19:03:19Z", "author": {"login": "tdcmeehan"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveNativeWorkersQueries.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.testing.QueryRunner;\n+import com.facebook.presto.tests.AbstractTestQueryFramework;\n+import com.facebook.presto.tests.DistributedQueryRunner;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static io.airlift.tpch.TpchTable.NATION;\n+\n+public class TestHiveNativeWorkersQueries", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc4MDI2Mw=="}, "originalCommit": {"oid": "c959c386ddd015103d10b18789f4e343345734c8"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg3MDI5Ng==", "bodyText": "assertQuery(\"SELECT * FROM nation\"); runs the query using queryRunner (native workers) and H2, then compares the results.", "url": "https://github.com/prestodb/presto/pull/15141#discussion_r485870296", "createdAt": "2020-09-09T19:40:45Z", "author": {"login": "mbasmanova"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveNativeWorkersQueries.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.testing.QueryRunner;\n+import com.facebook.presto.tests.AbstractTestQueryFramework;\n+import com.facebook.presto.tests.DistributedQueryRunner;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static io.airlift.tpch.TpchTable.NATION;\n+\n+public class TestHiveNativeWorkersQueries", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc4MDI2Mw=="}, "originalCommit": {"oid": "c959c386ddd015103d10b18789f4e343345734c8"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODczMTM5OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveNativeWorkersQueries.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODowOTowNFrOHPT60g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODowOTowNFrOHPT60g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgxNzA0Mg==", "bodyText": "Maybe use createTempDirectory. Some OS doesn't have /tmp dir.", "url": "https://github.com/prestodb/presto/pull/15141#discussion_r485817042", "createdAt": "2020-09-09T18:09:04Z", "author": {"login": "highker"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveNativeWorkersQueries.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.testing.QueryRunner;\n+import com.facebook.presto.tests.AbstractTestQueryFramework;\n+import com.facebook.presto.tests.DistributedQueryRunner;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static io.airlift.tpch.TpchTable.NATION;\n+\n+public class TestHiveNativeWorkersQueries\n+        extends AbstractTestQueryFramework\n+{\n+    protected TestHiveNativeWorkersQueries()\n+    {\n+        super(TestHiveNativeWorkersQueries::createQueryRunner);\n+    }\n+\n+    private static QueryRunner createQueryRunner()\n+            throws Exception\n+    {\n+        String prestoServerPath = System.getenv(\"PRESTO_SERVER\");\n+        checkArgument(prestoServerPath != null,\n+                \"Path to native Presto server binary is missing. Specify it using PRESTO_SERVER environment variable.\");\n+\n+        String baseDataDir = System.getenv(\"DATA_DIR\");\n+        checkArgument(baseDataDir != null,\n+                \"Path to data files is missing. Specify it using DATA_DIR environment variable\");\n+\n+        // Make TPC-H tables in DWRF format using Java-based workers\n+        HiveQueryRunner.createQueryRunner(ImmutableList.of(NATION),\n+                ImmutableMap.of(),\n+                \"sql-standard\",\n+                ImmutableMap.of(\"hive.storage-format\", \"DWRF\"),\n+                Optional.of(Paths.get(baseDataDir))).close();\n+\n+        // Make query runner with native workers for tests\n+        DistributedQueryRunner queryRunner = HiveQueryRunner.createQueryRunner(ImmutableList.of(NATION),\n+                ImmutableMap.of(\"optimizer.optimize-hash-generation\", \"false\"),\n+                ImmutableMap.of(),\n+                \"sql-standard\",\n+                ImmutableMap.of(),\n+                Optional.of(1),\n+                Optional.of(Paths.get(baseDataDir)),\n+                Optional.of((workerIndex, discoveryUrl) -> {\n+                    try {\n+                        if (workerIndex == 0) {\n+                            // Write discovery URL to /tmp/config.properties\n+                            Files.write(Paths.get(\"/tmp/config.properties\"),\n+                                    String.format(\"discovery.uri=%s\\n\", discoveryUrl).getBytes());\n+                        }\n+                        return new ProcessBuilder(prestoServerPath, \"--logtostderr=1\", \"--v=1\")\n+                                .directory(Paths.get(\"/tmp\").toFile())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c959c386ddd015103d10b18789f4e343345734c8"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODc0ODE2OnYy", "diffSide": "RIGHT", "path": "presto-tests/src/main/java/com/facebook/presto/tests/DistributedQueryRunner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODoxNDoxNFrOHPUFOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODo1NjoxM1rOHPVdxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgxOTcwNg==", "bodyText": "maybe just fail it hard and force the caller to set \"node-scheduler.include-coordinator\", \"false\"?", "url": "https://github.com/prestodb/presto/pull/15141#discussion_r485819706", "createdAt": "2020-09-09T18:14:14Z", "author": {"login": "highker"}, "path": "presto-tests/src/main/java/com/facebook/presto/tests/DistributedQueryRunner.java", "diffHunk": "@@ -136,19 +139,42 @@ private DistributedQueryRunner(\n             discoveryServer = new TestingDiscoveryServer(environment);\n             closer.register(() -> closeUnchecked(discoveryServer));\n             log.info(\"Created TestingDiscoveryServer in %s\", nanosSince(start).convertToMostSuccinctTimeUnit());\n+            URI discoveryUrl = discoveryServer.getBaseUrl();\n+            log.info(\"Discovery URL %s\", discoveryUrl);\n+\n+            if (nativeWorkerLauncher.isPresent()) {\n+                ImmutableList.Builder<Process> nativeWorkersBuilder = ImmutableList.builder();\n+                for (int i = 0; i < nodeCount; i++) {\n+                    nativeWorkersBuilder.add(nativeWorkerLauncher.get().apply(i, discoveryUrl));\n+                }\n+                nativeWorkers = nativeWorkersBuilder.build();\n+                closer.register(() -> {\n+                    for (Process nativeWorker : nativeWorkers) {\n+                        nativeWorker.destroyForcibly();\n+                    }\n+                });\n+            }\n+            else {\n+                nativeWorkers = ImmutableList.of();\n+            }\n \n             ImmutableList.Builder<TestingPrestoServer> servers = ImmutableList.builder();\n-\n-            for (int i = 1; i < nodeCount; i++) {\n-                TestingPrestoServer worker = closer.register(createTestingPrestoServer(discoveryServer.getBaseUrl(), false, extraProperties, parserOptions, environment, baseDataDir));\n-                servers.add(worker);\n+            if (!nativeWorkerLauncher.isPresent()) {\n+                for (int i = 1; i < nodeCount; i++) {\n+                    TestingPrestoServer worker = closer.register(createTestingPrestoServer(discoveryUrl, false, extraProperties, parserOptions, environment, baseDataDir));\n+                    servers.add(worker);\n+                }\n             }\n \n             Map<String, String> extraCoordinatorProperties = new HashMap<>();\n+            if (nativeWorkerLauncher.isPresent()) {\n+                // Don't use coordinator as worker\n+                extraCoordinatorProperties.put(\"node-scheduler.include-coordinator\", \"false\");\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c959c386ddd015103d10b18789f4e343345734c8"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0MjM3NA==", "bodyText": "@highker Not sure I understand the suggestion. Would you like me to assert that coordinatorProperties include \"node-scheduler.include-coordinator\" with the value of \"false\"?", "url": "https://github.com/prestodb/presto/pull/15141#discussion_r485842374", "createdAt": "2020-09-09T18:56:13Z", "author": {"login": "mbasmanova"}, "path": "presto-tests/src/main/java/com/facebook/presto/tests/DistributedQueryRunner.java", "diffHunk": "@@ -136,19 +139,42 @@ private DistributedQueryRunner(\n             discoveryServer = new TestingDiscoveryServer(environment);\n             closer.register(() -> closeUnchecked(discoveryServer));\n             log.info(\"Created TestingDiscoveryServer in %s\", nanosSince(start).convertToMostSuccinctTimeUnit());\n+            URI discoveryUrl = discoveryServer.getBaseUrl();\n+            log.info(\"Discovery URL %s\", discoveryUrl);\n+\n+            if (nativeWorkerLauncher.isPresent()) {\n+                ImmutableList.Builder<Process> nativeWorkersBuilder = ImmutableList.builder();\n+                for (int i = 0; i < nodeCount; i++) {\n+                    nativeWorkersBuilder.add(nativeWorkerLauncher.get().apply(i, discoveryUrl));\n+                }\n+                nativeWorkers = nativeWorkersBuilder.build();\n+                closer.register(() -> {\n+                    for (Process nativeWorker : nativeWorkers) {\n+                        nativeWorker.destroyForcibly();\n+                    }\n+                });\n+            }\n+            else {\n+                nativeWorkers = ImmutableList.of();\n+            }\n \n             ImmutableList.Builder<TestingPrestoServer> servers = ImmutableList.builder();\n-\n-            for (int i = 1; i < nodeCount; i++) {\n-                TestingPrestoServer worker = closer.register(createTestingPrestoServer(discoveryServer.getBaseUrl(), false, extraProperties, parserOptions, environment, baseDataDir));\n-                servers.add(worker);\n+            if (!nativeWorkerLauncher.isPresent()) {\n+                for (int i = 1; i < nodeCount; i++) {\n+                    TestingPrestoServer worker = closer.register(createTestingPrestoServer(discoveryUrl, false, extraProperties, parserOptions, environment, baseDataDir));\n+                    servers.add(worker);\n+                }\n             }\n \n             Map<String, String> extraCoordinatorProperties = new HashMap<>();\n+            if (nativeWorkerLauncher.isPresent()) {\n+                // Don't use coordinator as worker\n+                extraCoordinatorProperties.put(\"node-scheduler.include-coordinator\", \"false\");\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgxOTcwNg=="}, "originalCommit": {"oid": "c959c386ddd015103d10b18789f4e343345734c8"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODc1MjcxOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveNativeWorkersQueries.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODoxNTozNFrOHPUIEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODoxNTozNFrOHPUIEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgyMDQzMg==", "bodyText": "Move the first param to its own line", "url": "https://github.com/prestodb/presto/pull/15141#discussion_r485820432", "createdAt": "2020-09-09T18:15:34Z", "author": {"login": "highker"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveNativeWorkersQueries.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.testing.QueryRunner;\n+import com.facebook.presto.tests.AbstractTestQueryFramework;\n+import com.facebook.presto.tests.DistributedQueryRunner;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static io.airlift.tpch.TpchTable.NATION;\n+\n+public class TestHiveNativeWorkersQueries\n+        extends AbstractTestQueryFramework\n+{\n+    protected TestHiveNativeWorkersQueries()\n+    {\n+        super(TestHiveNativeWorkersQueries::createQueryRunner);\n+    }\n+\n+    private static QueryRunner createQueryRunner()\n+            throws Exception\n+    {\n+        String prestoServerPath = System.getenv(\"PRESTO_SERVER\");\n+        checkArgument(prestoServerPath != null,\n+                \"Path to native Presto server binary is missing. Specify it using PRESTO_SERVER environment variable.\");\n+\n+        String baseDataDir = System.getenv(\"DATA_DIR\");\n+        checkArgument(baseDataDir != null,\n+                \"Path to data files is missing. Specify it using DATA_DIR environment variable\");\n+\n+        // Make TPC-H tables in DWRF format using Java-based workers\n+        HiveQueryRunner.createQueryRunner(ImmutableList.of(NATION),\n+                ImmutableMap.of(),\n+                \"sql-standard\",\n+                ImmutableMap.of(\"hive.storage-format\", \"DWRF\"),\n+                Optional.of(Paths.get(baseDataDir))).close();\n+\n+        // Make query runner with native workers for tests\n+        DistributedQueryRunner queryRunner = HiveQueryRunner.createQueryRunner(ImmutableList.of(NATION),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c959c386ddd015103d10b18789f4e343345734c8"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3635, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}