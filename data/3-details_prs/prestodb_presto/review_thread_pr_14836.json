{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4NTM2NTMx", "number": 14836, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQwMjo0OTo0MFrOEPuDcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMjoyMTowOFrOERPUmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0OTE4NjQyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/SystemSessionProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQwMjo0OTo0MFrOGzlLDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQwMjo0OTo0MFrOGzlLDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjczOTU5OA==", "bodyText": "The entire commit \"Add feature toggle for ORDER BY spill\" doesn't seem to be necessary given the existing join spilling is buggy. So the legacy spilling doesn't work anyway. No need to use another guard.", "url": "https://github.com/prestodb/presto/pull/14836#discussion_r456739598", "createdAt": "2020-07-18T02:49:40Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/SystemSessionProperties.java", "diffHunk": "@@ -113,6 +113,7 @@\n     public static final String FAST_INEQUALITY_JOINS = \"fast_inequality_joins\";\n     public static final String QUERY_PRIORITY = \"query_priority\";\n     public static final String SPILL_ENABLED = \"spill_enabled\";\n+    public static final String SPILL_ORDER_BY = \"spill_order_by\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d0a5a40091558f28ccaf42304aeccf0cc88a342"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0OTE5NTgxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/com/facebook/presto/operator/TestOrderByOperator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQwMzowMzo1N1rOGzlPaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQwMzowMzo1N1rOGzlPaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc0MDcxMw==", "bodyText": "i++", "url": "https://github.com/prestodb/presto/pull/14836#discussion_r456740713", "createdAt": "2020-07-18T03:03:57Z", "author": {"login": "highker"}, "path": "presto-main/src/test/java/com/facebook/presto/operator/TestOrderByOperator.java", "diffHunk": "@@ -41,44 +43,91 @@\n import static com.facebook.presto.common.type.DoubleType.DOUBLE;\n import static com.facebook.presto.common.type.VarcharType.VARCHAR;\n import static com.facebook.presto.operator.OperatorAssertion.assertOperatorEquals;\n+import static com.facebook.presto.operator.OperatorAssertion.toMaterializedResult;\n import static com.facebook.presto.operator.OperatorAssertion.toPages;\n import static com.facebook.presto.testing.MaterializedResult.resultBuilder;\n import static com.facebook.presto.testing.TestingTaskContext.createTaskContext;\n+import static io.airlift.units.DataSize.succinctBytes;\n+import static java.lang.String.format;\n import static java.util.concurrent.Executors.newCachedThreadPool;\n import static java.util.concurrent.Executors.newScheduledThreadPool;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertTrue;\n \n @Test(singleThreaded = true)\n public class TestOrderByOperator\n {\n     private ExecutorService executor;\n     private ScheduledExecutorService scheduledExecutor;\n-    private DriverContext driverContext;\n+    private DummySpillerFactory spillerFactory;\n \n     @DataProvider\n     public static Object[][] spillEnabled()\n     {\n-        return new Object[][] {{false}, {true}};\n+        return new Object[][] {\n+                {false, false, 0},\n+                {true, false, 8},\n+                {true, true, 8},\n+                {true, false, 0},\n+                {true, true, 0}};\n     }\n \n     @BeforeMethod\n     public void setUp()\n     {\n         executor = newCachedThreadPool(daemonThreadsNamed(\"test-executor-%s\"));\n         scheduledExecutor = newScheduledThreadPool(2, daemonThreadsNamed(\"test-scheduledExecutor-%s\"));\n-        driverContext = createTaskContext(executor, scheduledExecutor, TEST_SESSION)\n-                .addPipelineContext(0, true, true, false)\n-                .addDriverContext();\n+        spillerFactory = new DummySpillerFactory();\n     }\n \n     @AfterMethod\n     public void tearDown()\n     {\n         executor.shutdownNow();\n         scheduledExecutor.shutdownNow();\n+        spillerFactory = null;\n     }\n \n     @Test(dataProvider = \"spillEnabled\")\n-    public void testSingleFieldKey(boolean spillEnabled)\n+    public void testMultipleOutputPages(boolean spillEnabled, boolean revokeMemoryWhenAddingPages, long memoryLimit)\n+    {\n+        // make operator produce multiple pages during finish phase\n+        int numberOfRows = 80_000;\n+        List<Page> input = rowPagesBuilder(BIGINT, DOUBLE)\n+                .addSequencePage(numberOfRows, 0, 0)\n+                .build();\n+\n+        OrderByOperatorFactory operatorFactory = new OrderByOperatorFactory(\n+                0,\n+                new PlanNodeId(\"test\"),\n+                ImmutableList.of(BIGINT, DOUBLE),\n+                ImmutableList.of(1),\n+                10,\n+                ImmutableList.of(0),\n+                ImmutableList.of(DESC_NULLS_LAST),\n+                new PagesIndex.TestingFactory(false),\n+                spillEnabled,\n+                Optional.of(spillerFactory),\n+                new OrderingCompiler());\n+\n+        DriverContext driverContext = createDriverContext(memoryLimit);\n+        MaterializedResult.Builder expectedBuilder = resultBuilder(driverContext.getSession(), DOUBLE);\n+        for (int i = 0; i < numberOfRows; ++i) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44e5153db0cb439a59bd483774022a418990fef8"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0OTE5NTg4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/com/facebook/presto/operator/TestOrderByOperator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQwMzowNDoyOFrOGzlPeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQwMzowNDoyOFrOGzlPeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc0MDcyOA==", "bodyText": "assertEquals", "url": "https://github.com/prestodb/presto/pull/14836#discussion_r456740728", "createdAt": "2020-07-18T03:04:28Z", "author": {"login": "highker"}, "path": "presto-main/src/test/java/com/facebook/presto/operator/TestOrderByOperator.java", "diffHunk": "@@ -41,44 +43,91 @@\n import static com.facebook.presto.common.type.DoubleType.DOUBLE;\n import static com.facebook.presto.common.type.VarcharType.VARCHAR;\n import static com.facebook.presto.operator.OperatorAssertion.assertOperatorEquals;\n+import static com.facebook.presto.operator.OperatorAssertion.toMaterializedResult;\n import static com.facebook.presto.operator.OperatorAssertion.toPages;\n import static com.facebook.presto.testing.MaterializedResult.resultBuilder;\n import static com.facebook.presto.testing.TestingTaskContext.createTaskContext;\n+import static io.airlift.units.DataSize.succinctBytes;\n+import static java.lang.String.format;\n import static java.util.concurrent.Executors.newCachedThreadPool;\n import static java.util.concurrent.Executors.newScheduledThreadPool;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertTrue;\n \n @Test(singleThreaded = true)\n public class TestOrderByOperator\n {\n     private ExecutorService executor;\n     private ScheduledExecutorService scheduledExecutor;\n-    private DriverContext driverContext;\n+    private DummySpillerFactory spillerFactory;\n \n     @DataProvider\n     public static Object[][] spillEnabled()\n     {\n-        return new Object[][] {{false}, {true}};\n+        return new Object[][] {\n+                {false, false, 0},\n+                {true, false, 8},\n+                {true, true, 8},\n+                {true, false, 0},\n+                {true, true, 0}};\n     }\n \n     @BeforeMethod\n     public void setUp()\n     {\n         executor = newCachedThreadPool(daemonThreadsNamed(\"test-executor-%s\"));\n         scheduledExecutor = newScheduledThreadPool(2, daemonThreadsNamed(\"test-scheduledExecutor-%s\"));\n-        driverContext = createTaskContext(executor, scheduledExecutor, TEST_SESSION)\n-                .addPipelineContext(0, true, true, false)\n-                .addDriverContext();\n+        spillerFactory = new DummySpillerFactory();\n     }\n \n     @AfterMethod\n     public void tearDown()\n     {\n         executor.shutdownNow();\n         scheduledExecutor.shutdownNow();\n+        spillerFactory = null;\n     }\n \n     @Test(dataProvider = \"spillEnabled\")\n-    public void testSingleFieldKey(boolean spillEnabled)\n+    public void testMultipleOutputPages(boolean spillEnabled, boolean revokeMemoryWhenAddingPages, long memoryLimit)\n+    {\n+        // make operator produce multiple pages during finish phase\n+        int numberOfRows = 80_000;\n+        List<Page> input = rowPagesBuilder(BIGINT, DOUBLE)\n+                .addSequencePage(numberOfRows, 0, 0)\n+                .build();\n+\n+        OrderByOperatorFactory operatorFactory = new OrderByOperatorFactory(\n+                0,\n+                new PlanNodeId(\"test\"),\n+                ImmutableList.of(BIGINT, DOUBLE),\n+                ImmutableList.of(1),\n+                10,\n+                ImmutableList.of(0),\n+                ImmutableList.of(DESC_NULLS_LAST),\n+                new PagesIndex.TestingFactory(false),\n+                spillEnabled,\n+                Optional.of(spillerFactory),\n+                new OrderingCompiler());\n+\n+        DriverContext driverContext = createDriverContext(memoryLimit);\n+        MaterializedResult.Builder expectedBuilder = resultBuilder(driverContext.getSession(), DOUBLE);\n+        for (int i = 0; i < numberOfRows; ++i) {\n+            expectedBuilder.row((double) numberOfRows - i - 1);\n+        }\n+        MaterializedResult expected = expectedBuilder.build();\n+\n+        List<Page> pages = toPages(operatorFactory, driverContext, input, revokeMemoryWhenAddingPages);\n+        assertGreaterThan(pages.size(), 1, \"Expected more than one output page\");\n+\n+        MaterializedResult actual = toMaterializedResult(driverContext.getSession(), expected.getTypes(), pages);\n+        assertEquals(actual.getMaterializedRows(), expected.getMaterializedRows());\n+\n+        assertTrue(spillEnabled == (spillerFactory.getSpillsCount() > 0), format(\"Spill state mismatch. Expected spill: %s, spill count: %s\", spillEnabled, spillerFactory.getSpillsCount()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44e5153db0cb439a59bd483774022a418990fef8"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTExMzgzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/com/facebook/presto/operator/TestOrderByOperator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMjoxODoxMlrOG12Lgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMjoxODoxMlrOG12Lgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTExNTM5NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertEquals(spillEnabled, spillerFactory.getSpillsCount() > 0, format(\"Spill state mismatch. Expected spill: %s, spill count: %s\", spillEnabled, spillerFactory.getSpillsCount()))\n          \n          \n            \n                    ;\n          \n          \n            \n                    assertEquals(spillEnabled, spillerFactory.getSpillsCount() > 0, format(\"Spill state mismatch. Expected spill: %s, spill count: %s\", spillEnabled, spillerFactory.getSpillsCount()));", "url": "https://github.com/prestodb/presto/pull/14836#discussion_r459115395", "createdAt": "2020-07-22T22:18:12Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/test/java/com/facebook/presto/operator/TestOrderByOperator.java", "diffHunk": "@@ -41,44 +43,91 @@\n import static com.facebook.presto.common.type.DoubleType.DOUBLE;\n import static com.facebook.presto.common.type.VarcharType.VARCHAR;\n import static com.facebook.presto.operator.OperatorAssertion.assertOperatorEquals;\n+import static com.facebook.presto.operator.OperatorAssertion.toMaterializedResult;\n import static com.facebook.presto.operator.OperatorAssertion.toPages;\n import static com.facebook.presto.testing.MaterializedResult.resultBuilder;\n import static com.facebook.presto.testing.TestingTaskContext.createTaskContext;\n+import static io.airlift.units.DataSize.succinctBytes;\n+import static java.lang.String.format;\n import static java.util.concurrent.Executors.newCachedThreadPool;\n import static java.util.concurrent.Executors.newScheduledThreadPool;\n+import static org.testng.Assert.assertEquals;\n \n @Test(singleThreaded = true)\n public class TestOrderByOperator\n {\n     private ExecutorService executor;\n     private ScheduledExecutorService scheduledExecutor;\n-    private DriverContext driverContext;\n+    private DummySpillerFactory spillerFactory;\n \n     @DataProvider\n     public static Object[][] spillEnabled()\n     {\n-        return new Object[][] {{false}, {true}};\n+        return new Object[][] {\n+                {false, false, 0},\n+                {true, false, 8},\n+                {true, true, 8},\n+                {true, false, 0},\n+                {true, true, 0}};\n     }\n \n     @BeforeMethod\n     public void setUp()\n     {\n         executor = newCachedThreadPool(daemonThreadsNamed(\"test-executor-%s\"));\n         scheduledExecutor = newScheduledThreadPool(2, daemonThreadsNamed(\"test-scheduledExecutor-%s\"));\n-        driverContext = createTaskContext(executor, scheduledExecutor, TEST_SESSION)\n-                .addPipelineContext(0, true, true, false)\n-                .addDriverContext();\n+        spillerFactory = new DummySpillerFactory();\n     }\n \n     @AfterMethod\n     public void tearDown()\n     {\n         executor.shutdownNow();\n         scheduledExecutor.shutdownNow();\n+        spillerFactory = null;\n     }\n \n     @Test(dataProvider = \"spillEnabled\")\n-    public void testSingleFieldKey(boolean spillEnabled)\n+    public void testMultipleOutputPages(boolean spillEnabled, boolean revokeMemoryWhenAddingPages, long memoryLimit)\n+    {\n+        // make operator produce multiple pages during finish phase\n+        int numberOfRows = 80_000;\n+        List<Page> input = rowPagesBuilder(BIGINT, DOUBLE)\n+                .addSequencePage(numberOfRows, 0, 0)\n+                .build();\n+\n+        OrderByOperatorFactory operatorFactory = new OrderByOperatorFactory(\n+                0,\n+                new PlanNodeId(\"test\"),\n+                ImmutableList.of(BIGINT, DOUBLE),\n+                ImmutableList.of(1),\n+                10,\n+                ImmutableList.of(0),\n+                ImmutableList.of(DESC_NULLS_LAST),\n+                new PagesIndex.TestingFactory(false),\n+                spillEnabled,\n+                Optional.of(spillerFactory),\n+                new OrderingCompiler());\n+\n+        DriverContext driverContext = createDriverContext(memoryLimit);\n+        MaterializedResult.Builder expectedBuilder = resultBuilder(driverContext.getSession(), DOUBLE);\n+        for (int i = 0; i < numberOfRows; i++) {\n+            expectedBuilder.row((double) numberOfRows - i - 1);\n+        }\n+        MaterializedResult expected = expectedBuilder.build();\n+\n+        List<Page> pages = toPages(operatorFactory, driverContext, input, revokeMemoryWhenAddingPages);\n+        assertGreaterThan(pages.size(), 1, \"Expected more than one output page\");\n+\n+        MaterializedResult actual = toMaterializedResult(driverContext.getSession(), expected.getTypes(), pages);\n+        assertEquals(actual.getMaterializedRows(), expected.getMaterializedRows());\n+\n+        assertEquals(spillEnabled, spillerFactory.getSpillsCount() > 0, format(\"Spill state mismatch. Expected spill: %s, spill count: %s\", spillEnabled, spillerFactory.getSpillsCount()))\n+        ;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "216455e336e1490d68346f58dc97dc0de8297acf"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTEyMjgxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/OrderByOperator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMjoyMTowOFrOG12Qhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNzo1MTo1MFrOG2VTWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTExNjY3OQ==", "bodyText": "Should this be squashed with Add Spill To Disk for ORDER BY?", "url": "https://github.com/prestodb/presto/pull/14836#discussion_r459116679", "createdAt": "2020-07-22T22:21:08Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/OrderByOperator.java", "diffHunk": "@@ -380,5 +380,6 @@ public void close()\n     {\n         pageIndex.clear();\n         sortedPages = null;\n+        spiller.ifPresent(Spiller::close);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fff9b1e02e40327099ca1d4e6882870993218a7"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYyNTMwNQ==", "bodyText": "I added this as a separate commit since it was a bug fixed in a later commit. However, that later commit also fixes the equivalent bug for window spilling. So, to make it explicit I just created a new commit. Can either squash this or leave it, no opinion on this.", "url": "https://github.com/prestodb/presto/pull/14836#discussion_r459625305", "createdAt": "2020-07-23T17:51:50Z", "author": {"login": "sachdevs"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/OrderByOperator.java", "diffHunk": "@@ -380,5 +380,6 @@ public void close()\n     {\n         pageIndex.clear();\n         sortedPages = null;\n+        spiller.ifPresent(Spiller::close);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTExNjY3OQ=="}, "originalCommit": {"oid": "3fff9b1e02e40327099ca1d4e6882870993218a7"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2365, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}