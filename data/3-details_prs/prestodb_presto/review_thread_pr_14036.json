{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5NTM1NzI4", "number": 14036, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMDozMTowOFrODdeONw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMjo0NToyOFrODd2yZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMjMwNDU1OnYy", "diffSide": "RIGHT", "path": "presto-verifier/src/test/java/com/facebook/presto/verifier/framework/TestVerificationManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMDozMTowOFrOFmGMPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMDozMTowOFrOFmGMPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ5MTY0Ng==", "bodyText": "Inline at the caller, only used once.", "url": "https://github.com/prestodb/presto/pull/14036#discussion_r375491646", "createdAt": "2020-02-05T20:31:08Z", "author": {"login": "caithagoras"}, "path": "presto-verifier/src/test/java/com/facebook/presto/verifier/framework/TestVerificationManager.java", "diffHunk": "@@ -226,4 +227,20 @@ private VerificationManager getVerificationManager(List<SourceQuery> sourceQueri\n                 new QueryConfigurationOverridesConfig(),\n                 verifierConfig);\n     }\n+\n+    private ChecksumValidator createChecksumValidator(VerifierConfig verifierConfig)\n+    {\n+        SimpleColumnValidator simpleColumnValidator = new SimpleColumnValidator();\n+        FloatingPointColumnValidator floatingPointColumnValidator = new FloatingPointColumnValidator(verifierConfig);\n+        ArrayColumnValidator arrayColumnValidator = new ArrayColumnValidator();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e155671daf5bcf3dd08f00a96136bb160a758254"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMjMwNDkwOnYy", "diffSide": "RIGHT", "path": "presto-verifier/src/test/java/com/facebook/presto/verifier/framework/TestVerificationManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMDozMToxN1rOFmGMfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMDozMToxN1rOFmGMfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ5MTcxMQ==", "bodyText": "static import Column.Category.", "url": "https://github.com/prestodb/presto/pull/14036#discussion_r375491711", "createdAt": "2020-02-05T20:31:17Z", "author": {"login": "caithagoras"}, "path": "presto-verifier/src/test/java/com/facebook/presto/verifier/framework/TestVerificationManager.java", "diffHunk": "@@ -226,4 +227,20 @@ private VerificationManager getVerificationManager(List<SourceQuery> sourceQueri\n                 new QueryConfigurationOverridesConfig(),\n                 verifierConfig);\n     }\n+\n+    private ChecksumValidator createChecksumValidator(VerifierConfig verifierConfig)\n+    {\n+        SimpleColumnValidator simpleColumnValidator = new SimpleColumnValidator();\n+        FloatingPointColumnValidator floatingPointColumnValidator = new FloatingPointColumnValidator(verifierConfig);\n+        ArrayColumnValidator arrayColumnValidator = new ArrayColumnValidator();\n+        Map<Column.Category, Provider<ColumnValidator>> lazyValidators = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e155671daf5bcf3dd08f00a96136bb160a758254"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMjMyNjU0OnYy", "diffSide": "RIGHT", "path": "presto-verifier/src/test/java/com/facebook/presto/verifier/checksum/TestChecksumValidator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMDozOToxMlrOFmGaRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMDozOToxMlrOFmGaRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ5NTIzOQ==", "bodyText": "Instead of having 3 columns, let's add the array field and the row field in to ROW_COLUMN.\nAlso, reduce the # of columns without field name so the test can be more readable.\nFor example: A suitable test could look like:\nparseTypeSignature(\"row(i int, varchar, d double, a array(int), r row(double, b bigint))\"", "url": "https://github.com/prestodb/presto/pull/14036#discussion_r375495239", "createdAt": "2020-02-05T20:39:12Z", "author": {"login": "caithagoras"}, "path": "presto-verifier/src/test/java/com/facebook/presto/verifier/checksum/TestChecksumValidator.java", "diffHunk": "@@ -67,7 +69,9 @@\n     private static final Column INT_ARRAY_COLUMN = new Column(\"int_array\", ARRAY, new ArrayType(INTEGER));\n     private static final Column ROW_ARRAY_COLUMN = new Column(\"row_array\", ARRAY, typeRegistry.getType(parseTypeSignature(\"array(row(a int,b varchar))\")));\n     private static final Column MAP_ARRAY_COLUMN = new Column(\"map_array\", ARRAY, typeRegistry.getType(parseTypeSignature(\"array(map(int,varchar))\")));\n-    private static final Column ROW_COLUMN = new Column(\"row\", ROW, typeRegistry.getType(parseTypeSignature(\"row(a int,double,array(row(a int,b varchar)),b varchar)\")));\n+    private static final Column ROW_COLUMN = new Column(\"row\", ROW, typeRegistry.getType(parseTypeSignature(\"row(a int,varchar,double)\")));\n+    private static final Column ROW_WITH_ARRAY_COLUMN = new Column(\"row_with_array\", ROW, typeRegistry.getType(parseTypeSignature(\"row(a array(int))\")));\n+    private static final Column ROW_WITH_ROW_COLUMN = new Column(\"row_with_row\", ROW, typeRegistry.getType(parseTypeSignature(\"row(row(double))\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e155671daf5bcf3dd08f00a96136bb160a758254"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMjMyODU2OnYy", "diffSide": "RIGHT", "path": "presto-verifier/src/test/java/com/facebook/presto/verifier/checksum/TestChecksumValidator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMDozOTo1NlrOFmGbgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMDozOTo1NlrOFmGbgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ5NTU1Mg==", "bodyText": "This is duplicated in 3 test files. Let's put it into a Test util.", "url": "https://github.com/prestodb/presto/pull/14036#discussion_r375495552", "createdAt": "2020-02-05T20:39:56Z", "author": {"login": "caithagoras"}, "path": "presto-verifier/src/test/java/com/facebook/presto/verifier/checksum/TestChecksumValidator.java", "diffHunk": "@@ -81,11 +85,23 @@\n             .build();\n     private static final SqlParser sqlParser = new SqlParser(new SqlParserOptions().allowIdentifierSymbol(COLON, AT_SIGN));\n \n-    private final ChecksumValidator checksumValidator = new ChecksumValidator(\n-            new SimpleColumnValidator(),\n-            new FloatingPointColumnValidator(new VerifierConfig().setRelativeErrorMargin(RELATIVE_ERROR_MARGIN).setAbsoluteErrorMargin(ABSOLUTE_ERROR_MARGIN)),\n-            new ArrayColumnValidator(),\n-            new RowColumnValidator());\n+    private final ChecksumValidator checksumValidator;\n+\n+    TestChecksumValidator()\n+    {\n+        SimpleColumnValidator simpleColumnValidator = new SimpleColumnValidator();\n+        FloatingPointColumnValidator floatingPointColumnValidator = new FloatingPointColumnValidator(new VerifierConfig().setRelativeErrorMargin(RELATIVE_ERROR_MARGIN).setAbsoluteErrorMargin(ABSOLUTE_ERROR_MARGIN));\n+        ArrayColumnValidator arrayColumnValidator = new ArrayColumnValidator();\n+        Map<Column.Category, Provider<ColumnValidator>> lazyValidators = new HashMap<>();\n+        RowColumnValidator rowColumnValidator = new RowColumnValidator(lazyValidators);\n+        Map<Column.Category, Provider<ColumnValidator>> validators = ImmutableMap.of(\n+                Column.Category.SIMPLE, () -> simpleColumnValidator,\n+                Column.Category.FLOATING_POINT, () -> floatingPointColumnValidator,\n+                Column.Category.ARRAY, () -> arrayColumnValidator,\n+                Column.Category.ROW, () -> rowColumnValidator);\n+        lazyValidators.putAll(validators);\n+        this.checksumValidator = new ChecksumValidator(validators);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e155671daf5bcf3dd08f00a96136bb160a758254"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMjM3ODA4OnYy", "diffSide": "RIGHT", "path": "presto-verifier/src/test/java/com/facebook/presto/verifier/checksum/TestChecksumValidator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMDo1Njo0N1rOFmG5bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMDo1Njo0N1rOFmG5bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUwMzIxMg==", "bodyText": "The readability of those columns are not that good especially when we have columns like row$a_neg_inf_count. It's more intuitive for someone to think of this as two parts, row and a_neg_inf_count.\nWhat about name them like this: row.a.b._field3$pos_inf_count.\nThis change does not affect the functionality of the PR. You may do it as a separate commit, a separate PR, or leave it to me.", "url": "https://github.com/prestodb/presto/pull/14036#discussion_r375503212", "createdAt": "2020-02-05T20:56:47Z", "author": {"login": "caithagoras"}, "path": "presto-verifier/src/test/java/com/facebook/presto/verifier/checksum/TestChecksumValidator.java", "diffHunk": "@@ -345,11 +370,12 @@ public void testRow()\n         ChecksumResult controlChecksum = new ChecksumResult(\n                 5,\n                 ImmutableMap.<String, Object>builder()\n-                        .put(\"row_checksum\", new SqlVarbinary(new byte[] {0xa}))\n                         .put(\"row$a_checksum\", new SqlVarbinary(new byte[] {0xb}))\n                         .put(\"row$$col2_checksum\", new SqlVarbinary(new byte[] {0xc}))\n-                        .put(\"row$$col3_checksum\", new SqlVarbinary(new byte[] {0xd}))\n-                        .put(\"row$b_checksum\", new SqlVarbinary(new byte[] {0xe}))\n+                        .put(\"row$$col3_nan_count\", 2L)\n+                        .put(\"row$$col3_pos_inf_count\", 3L)\n+                        .put(\"row$$col3_neg_inf_count\", 4L)\n+                        .put(\"row$$col3_sum\", 0.0)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e155671daf5bcf3dd08f00a96136bb160a758254"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMjQwNDA1OnYy", "diffSide": "RIGHT", "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/checksum/RowColumnValidator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMTowNTozOVrOFmHJMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMTowNTozOVrOFmHJMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUwNzI1MA==", "bodyText": "or more concisely:\nExpression fieldReference = field.getName().map(name -> new DereferenceExpression...)\n                .orElseGet(() -> new SubscriptExpression...)", "url": "https://github.com/prestodb/presto/pull/14036#discussion_r375507250", "createdAt": "2020-02-05T21:05:39Z", "author": {"login": "caithagoras"}, "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/checksum/RowColumnValidator.java", "diffHunk": "@@ -106,30 +97,21 @@ private static void checkColumnType(Column column)\n         return ((RowType) column.getType()).getFields();\n     }\n \n-    private static String getChecksumAlias(Column column)\n-    {\n-        return column.getName() + \"_checksum\";\n-    }\n-\n-    private static String getChecksumAlias(Column column, Field field, int fieldIndex)\n+    private static String getName(Column column, Field field, int fieldIndex)\n     {\n-        return column.getName() + \"$\" + field.getName().orElse(\"$col\" + (fieldIndex + 1)) + \"_checksum\";\n+        return column.getName() + \"$\" + field.getName().orElse(\"$col\" + (fieldIndex + 1));\n     }\n \n-    private static String prepareMatchMessage(List<String> aliases, ChecksumResult controlResult, ChecksumResult testResult)\n+    private static Column prepareFieldColumn(Column column, Field field, int fieldIndex)\n     {\n-        aliases = aliases.stream()\n-                .filter(alias -> !Objects.equals(controlResult.getChecksum(alias), testResult.getChecksum(alias)))\n-                .collect(Collectors.toList());\n-\n-        String control = aliases.stream()\n-                .map(alias -> alias + \": \" + controlResult.getChecksum(alias))\n-                .collect(joining(\", \"));\n-\n-        String test = aliases.stream()\n-                .map(alias -> alias + \": \" + testResult.getChecksum(alias))\n-                .collect(joining(\", \"));\n+        Expression fieldExpression;\n+        if (field.getName().isPresent()) {\n+            fieldExpression = new DereferenceExpression(column.getExpression(), new Identifier(field.getName().get()));\n+        }\n+        else {\n+            fieldExpression = new SubscriptExpression(column.getExpression(), new LongLiteral(String.valueOf(fieldIndex + 1)));\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e155671daf5bcf3dd08f00a96136bb160a758254"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMjQwNTE5OnYy", "diffSide": "RIGHT", "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/checksum/RowColumnValidator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMTowNTo1N1rOFmHJzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMTowNTo1N1rOFmHJzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUwNzQwNg==", "bodyText": "Inline this method.", "url": "https://github.com/prestodb/presto/pull/14036#discussion_r375507406", "createdAt": "2020-02-05T21:05:57Z", "author": {"login": "caithagoras"}, "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/checksum/RowColumnValidator.java", "diffHunk": "@@ -106,30 +97,21 @@ private static void checkColumnType(Column column)\n         return ((RowType) column.getType()).getFields();\n     }\n \n-    private static String getChecksumAlias(Column column)\n-    {\n-        return column.getName() + \"_checksum\";\n-    }\n-\n-    private static String getChecksumAlias(Column column, Field field, int fieldIndex)\n+    private static String getName(Column column, Field field, int fieldIndex)\n     {\n-        return column.getName() + \"$\" + field.getName().orElse(\"$col\" + (fieldIndex + 1)) + \"_checksum\";\n+        return column.getName() + \"$\" + field.getName().orElse(\"$col\" + (fieldIndex + 1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e155671daf5bcf3dd08f00a96136bb160a758254"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMjQwOTQxOnYy", "diffSide": "RIGHT", "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/checksum/RowColumnValidator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMTowNzoyMVrOFmHMUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMTowNzoyMVrOFmHMUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUwODA1MA==", "bodyText": "nit: what about getFieldAsColumn", "url": "https://github.com/prestodb/presto/pull/14036#discussion_r375508050", "createdAt": "2020-02-05T21:07:21Z", "author": {"login": "caithagoras"}, "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/checksum/RowColumnValidator.java", "diffHunk": "@@ -106,30 +97,21 @@ private static void checkColumnType(Column column)\n         return ((RowType) column.getType()).getFields();\n     }\n \n-    private static String getChecksumAlias(Column column)\n-    {\n-        return column.getName() + \"_checksum\";\n-    }\n-\n-    private static String getChecksumAlias(Column column, Field field, int fieldIndex)\n+    private static String getName(Column column, Field field, int fieldIndex)\n     {\n-        return column.getName() + \"$\" + field.getName().orElse(\"$col\" + (fieldIndex + 1)) + \"_checksum\";\n+        return column.getName() + \"$\" + field.getName().orElse(\"$col\" + (fieldIndex + 1));\n     }\n \n-    private static String prepareMatchMessage(List<String> aliases, ChecksumResult controlResult, ChecksumResult testResult)\n+    private static Column prepareFieldColumn(Column column, Field field, int fieldIndex)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e155671daf5bcf3dd08f00a96136bb160a758254"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMjQxMjUxOnYy", "diffSide": "RIGHT", "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/framework/Column.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMTowODozMVrOFmHOPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMTowODozMVrOFmHOPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUwODU0Mw==", "bodyText": "This should be private to force caller using the factory constructor create.", "url": "https://github.com/prestodb/presto/pull/14036#discussion_r375508543", "createdAt": "2020-02-05T21:08:31Z", "author": {"login": "caithagoras"}, "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/framework/Column.java", "diffHunk": "@@ -49,13 +49,21 @@\n     private static final Set<Type> FLOATING_POINT_TYPES = ImmutableSet.of(DOUBLE, REAL);\n \n     private final String name;\n+    private final Expression expression;\n     private final Category category;\n     private final Type type;\n \n     @VisibleForTesting\n     public Column(String name, Category category, Type type)\n+    {\n+        this(name, delimitedIdentifier(name), category, type);\n+    }\n+\n+    @VisibleForTesting\n+    public Column(String name, Expression expression, Category category, Type type)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e155671daf5bcf3dd08f00a96136bb160a758254"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMjQxMzc1OnYy", "diffSide": "RIGHT", "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/framework/Column.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMTowODo1OFrOFmHPBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMTowODo1OFrOFmHPBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUwODc0Mw==", "bodyText": "The constructor is no longer needed and should be deleted as callers may used the newly introduced factory constructor create.", "url": "https://github.com/prestodb/presto/pull/14036#discussion_r375508743", "createdAt": "2020-02-05T21:08:58Z", "author": {"login": "caithagoras"}, "path": "presto-verifier/src/main/java/com/facebook/presto/verifier/framework/Column.java", "diffHunk": "@@ -49,13 +49,21 @@\n     private static final Set<Type> FLOATING_POINT_TYPES = ImmutableSet.of(DOUBLE, REAL);\n \n     private final String name;\n+    private final Expression expression;\n     private final Category category;\n     private final Type type;\n \n     @VisibleForTesting\n     public Column(String name, Category category, Type type)\n+    {\n+        this(name, delimitedIdentifier(name), category, type);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e155671daf5bcf3dd08f00a96136bb160a758254"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjMyNjkzOnYy", "diffSide": "RIGHT", "path": "presto-verifier/src/test/java/com/facebook/presto/verifier/checksum/TestChecksumValidator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMjo0NDoyMFrOFmsyPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMjo0NDoyMFrOFmsyPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEyMzk2Ng==", "bodyText": "nit, for readability:\ncreateChecksumValidator(new VerifierConfig()\n   .setRelativeErrorMargin...\n   .setAbsoluteErrorMargin...);", "url": "https://github.com/prestodb/presto/pull/14036#discussion_r376123966", "createdAt": "2020-02-06T22:44:20Z", "author": {"login": "caithagoras"}, "path": "presto-verifier/src/test/java/com/facebook/presto/verifier/checksum/TestChecksumValidator.java", "diffHunk": "@@ -79,13 +80,24 @@\n             .put(\"real_pos_inf_count\", 3L)\n             .put(\"real_neg_inf_count\", 4L)\n             .build();\n+    private static final Map<String, Object> ROW_COLUMN_CHECKSUMS = ImmutableMap.<String, Object>builder()\n+            .put(\"row$i_checksum\", new SqlVarbinary(new byte[] {0xa}))\n+            .put(\"row$$col2_checksum\", new SqlVarbinary(new byte[] {0xb}))\n+            .put(\"row$d_nan_count\", 2L)\n+            .put(\"row$d_pos_inf_count\", 3L)\n+            .put(\"row$d_neg_inf_count\", 4L)\n+            .put(\"row$d_sum\", 0.0)\n+            .put(\"row$a_checksum\", new SqlVarbinary(new byte[] {0xc}))\n+            .put(\"row$a_cardinality_sum\", 2L)\n+            .put(\"row$r$$col1_nan_count\", 2L)\n+            .put(\"row$r$$col1_pos_inf_count\", 3L)\n+            .put(\"row$r$$col1_neg_inf_count\", 4L)\n+            .put(\"row$r$$col1_sum\", 0.0)\n+            .put(\"row$r$b_checksum\", new SqlVarbinary(new byte[] {0xd}))\n+            .build();\n     private static final SqlParser sqlParser = new SqlParser(new SqlParserOptions().allowIdentifierSymbol(COLON, AT_SIGN));\n \n-    private final ChecksumValidator checksumValidator = new ChecksumValidator(\n-            new SimpleColumnValidator(),\n-            new FloatingPointColumnValidator(new VerifierConfig().setRelativeErrorMargin(RELATIVE_ERROR_MARGIN).setAbsoluteErrorMargin(ABSOLUTE_ERROR_MARGIN)),\n-            new ArrayColumnValidator(),\n-            new RowColumnValidator());\n+    private final ChecksumValidator checksumValidator = createChecksumValidator(new VerifierConfig().setRelativeErrorMargin(RELATIVE_ERROR_MARGIN).setAbsoluteErrorMargin(ABSOLUTE_ERROR_MARGIN));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f753a1e76bab83d5ae0d68641bab2e8ebf600e09"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjMyOTMzOnYy", "diffSide": "RIGHT", "path": "presto-verifier/src/test/java/com/facebook/presto/verifier/checksum/TestChecksumValidator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMjo0NToyOFrOFmszxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMjo0NToyOFrOFmszxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEyNDM1Nw==", "bodyText": "create a private static helper method to simplify those lines.\nprivate static Column createColumn(String name, Type type);", "url": "https://github.com/prestodb/presto/pull/14036#discussion_r376124357", "createdAt": "2020-02-06T22:45:28Z", "author": {"login": "caithagoras"}, "path": "presto-verifier/src/test/java/com/facebook/presto/verifier/checksum/TestChecksumValidator.java", "diffHunk": "@@ -60,14 +61,14 @@\n         new FunctionManager(typeRegistry, new BlockEncodingManager(typeRegistry), new FeaturesConfig());\n     }\n \n-    private static final Column BIGINT_COLUMN = new Column(\"bigint\", SIMPLE, BIGINT);\n-    private static final Column VARCHAR_COLUMN = new Column(\"varchar\", SIMPLE, VARCHAR);\n-    private static final Column DOUBLE_COLUMN = new Column(\"double\", FLOATING_POINT, DOUBLE);\n-    private static final Column REAL_COLUMN = new Column(\"real\", FLOATING_POINT, REAL);\n-    private static final Column INT_ARRAY_COLUMN = new Column(\"int_array\", ARRAY, new ArrayType(INTEGER));\n-    private static final Column ROW_ARRAY_COLUMN = new Column(\"row_array\", ARRAY, typeRegistry.getType(parseTypeSignature(\"array(row(a int,b varchar))\")));\n-    private static final Column MAP_ARRAY_COLUMN = new Column(\"map_array\", ARRAY, typeRegistry.getType(parseTypeSignature(\"array(map(int,varchar))\")));\n-    private static final Column ROW_COLUMN = new Column(\"row\", ROW, typeRegistry.getType(parseTypeSignature(\"row(a int,double,array(row(a int,b varchar)),b varchar)\")));\n+    private static final Column BIGINT_COLUMN = Column.create(\"bigint\", delimitedIdentifier(\"bigint\"), BIGINT);\n+    private static final Column VARCHAR_COLUMN = Column.create(\"varchar\", delimitedIdentifier(\"varchar\"), VARCHAR);\n+    private static final Column DOUBLE_COLUMN = Column.create(\"double\", delimitedIdentifier(\"double\"), DOUBLE);\n+    private static final Column REAL_COLUMN = Column.create(\"real\", delimitedIdentifier(\"real\"), REAL);\n+    private static final Column INT_ARRAY_COLUMN = Column.create(\"int_array\", delimitedIdentifier(\"int_array\"), new ArrayType(INTEGER));\n+    private static final Column ROW_ARRAY_COLUMN = Column.create(\"row_array\", delimitedIdentifier(\"row_array\"), typeRegistry.getType(parseTypeSignature(\"array(row(a int,b varchar))\")));\n+    private static final Column MAP_ARRAY_COLUMN = Column.create(\"map_array\", delimitedIdentifier(\"map_array\"), typeRegistry.getType(parseTypeSignature(\"array(map(int,varchar))\")));\n+    private static final Column ROW_COLUMN = Column.create(\"row\", delimitedIdentifier(\"row\"), typeRegistry.getType(parseTypeSignature(\"row(i int, varchar, d double, a array(int), r row(double, b bigint))\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f753a1e76bab83d5ae0d68641bab2e8ebf600e09"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3211, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}