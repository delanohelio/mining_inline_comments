{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzMTk1NzY5", "number": 14475, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMzowMTo1OVrOD5Mi2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMjozOToyMlrOD6BWog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMzAwOTUyOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHivePushdownFilterQueries.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMzowMTo1OVrOGQVPSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMzowMTo1OVrOGQVPSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc3ODM3OQ==", "bodyText": "generate the ROW(1,%s)", "url": "https://github.com/prestodb/presto/pull/14475#discussion_r419778379", "createdAt": "2020-05-04T23:01:59Z", "author": {"login": "bhhari"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHivePushdownFilterQueries.java", "diffHunk": "@@ -337,6 +337,17 @@ public void testFloats()\n         assertFilterProject(\"reals[1] > 0.01\", \"count(*)\");\n     }\n \n+    @Test\n+    public void testInComplexTypes()\n+    {\n+          String query = \"select * from (values('a'), (null)) as t (name) where ROW('1', name) IN ( ROW('1','2'), ROW('1','3'), \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95aad6a8cb6eacb2e0eee6e5c7ff9292acd3ab89"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMTY2MTc4OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHivePushdownFilterQueries.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMjozOToyMlrOGRn6uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMjozOToyMlrOGRn6uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEzMjk4NQ==", "bodyText": "Please add this test case as well to make sure that correct answer (NULL) is returned.\n        StringBuilder query = new StringBuilder(\"select ROW(null_value) IN ( \");\n        for (int i = 0; i < 32; i++) {\n            query.append(String.format(\"ROW(%s), \", i));\n        }\n        query.append(\"ROW(32)) \");\n        query.append(\"FROM (values(null)) as t (null_value)\");\n        assertQuery(query.toString(), \"SELECT NULL\");\n\nThe ROW(NULL) IN (ROW(0), ...)  creates a collision required to get the equals path executed.\nAlso I would suggest moving this test to AbstractTestQueries, as there's nothing Hive specific about it.\nAlso please add a comment describing what kind of black magic are we doing here.", "url": "https://github.com/prestodb/presto/pull/14475#discussion_r421132985", "createdAt": "2020-05-06T22:39:22Z", "author": {"login": "arhimondr"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHivePushdownFilterQueries.java", "diffHunk": "@@ -337,6 +337,19 @@ public void testFloats()\n         assertFilterProject(\"reals[1] > 0.01\", \"count(*)\");\n     }\n \n+    @Test\n+    public void testInComplexTypes()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f72b87b3cbbeae1645ce553df3026d099ee42d5"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2573, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}