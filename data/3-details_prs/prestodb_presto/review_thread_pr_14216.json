{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0NDE3MDkz", "number": 14216, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNjowNzowNVrODmXIYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwNToxMjo0OFrODm8Nag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNTUxNDU4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/com/facebook/presto/sql/planner/optimizations/TestAddExchangesPlans.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNjowNzowNVrOFzvFZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNToyMToyOVrOF0T3vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc5MzEyNA==", "bodyText": "Curious why it's called PARTITIONING_PRECISION_STRATEGY? -- didn't see discussion in #13354 ?\nSince when I see \"precision\", I am thinking whether the \"partitioning\" is accurate or not. However, in this case it's about whether we want to use ALL the columns required by join/aggregation, while any partitioning with SUBSET* of the columns would work.", "url": "https://github.com/prestodb/presto/pull/14216#discussion_r389793124", "createdAt": "2020-03-09T16:07:05Z", "author": {"login": "wenleix"}, "path": "presto-main/src/test/java/com/facebook/presto/sql/planner/optimizations/TestAddExchangesPlans.java", "diffHunk": "@@ -422,9 +422,7 @@ void assertExactDistributedPlan(String sql, PlanMatchPattern pattern)\n                 TestingSession.testSessionBuilder()\n                         .setCatalog(\"local\")\n                         .setSchema(\"tiny\")\n-                        .setSystemProperty(\n-                                SystemSessionProperties.PARTITIONING_PRECISION_STRATEGY,\n-                                FeaturesConfig.PartitioningPrecisionStrategy.PREFER_EXACT_PARTITIONING.toString())\n+                        .setSystemProperty(PARTITIONING_PRECISION_STRATEGY, PREFER_EXACT_PARTITIONING.toString())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05ab259710959c12e465787a66378585ddd6b310"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM5NTgzOQ==", "bodyText": "We have a limited set of columns we can choose to partition on and the order matters. It must be partitioned on a prefix of the columns in the order used in the join/aggregation.\nSo we have different options for choosing whether to prefer precisely partitioning on all the columns (until the Presto learns to do a better job), or allowing Presto to choose (automatic).\nPrecision doesn't mean inaccurate especially in math and engineering. It just means accurate up to a point. The partitioning always needs to be accurate we just have a choice as to how big a prefix of columns to choose.\nI don't really care what it's called, but it made sense to me at the time.", "url": "https://github.com/prestodb/presto/pull/14216#discussion_r390395839", "createdAt": "2020-03-10T15:21:29Z", "author": {"login": "aweisberg"}, "path": "presto-main/src/test/java/com/facebook/presto/sql/planner/optimizations/TestAddExchangesPlans.java", "diffHunk": "@@ -422,9 +422,7 @@ void assertExactDistributedPlan(String sql, PlanMatchPattern pattern)\n                 TestingSession.testSessionBuilder()\n                         .setCatalog(\"local\")\n                         .setSchema(\"tiny\")\n-                        .setSystemProperty(\n-                                SystemSessionProperties.PARTITIONING_PRECISION_STRATEGY,\n-                                FeaturesConfig.PartitioningPrecisionStrategy.PREFER_EXACT_PARTITIONING.toString())\n+                        .setSystemProperty(PARTITIONING_PRECISION_STRATEGY, PREFER_EXACT_PARTITIONING.toString())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc5MzEyNA=="}, "originalCommit": {"oid": "05ab259710959c12e465787a66378585ddd6b310"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjAyMjcyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxODoxNDozOVrOFzz9QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNjoxNzo1OFrOF0-bqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg3Mjk2MA==", "bodyText": "nit: What about useStreamExchangeForMarkDistinct?", "url": "https://github.com/prestodb/presto/pull/14216#discussion_r389872960", "createdAt": "2020-03-09T18:14:39Z", "author": {"login": "wenleix"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java", "diffHunk": "@@ -44,6 +44,7 @@\n     private int hashPartitionCount = 100;\n     private String partitioningProviderCatalog = GlobalSystemConnector.NAME;\n     private ExchangeMaterializationStrategy exchangeMaterializationStrategy = ExchangeMaterializationStrategy.NONE;\n+    private boolean streamMarkDistinctWithMaterializedExchange;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76c3ea221a14b4f84e213bd8c89ff222af0a9fc5"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA5MzE2MQ==", "bodyText": "You are right technically that is what this does. I'll change to that.", "url": "https://github.com/prestodb/presto/pull/14216#discussion_r391093161", "createdAt": "2020-03-11T16:17:58Z", "author": {"login": "aweisberg"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java", "diffHunk": "@@ -44,6 +44,7 @@\n     private int hashPartitionCount = 100;\n     private String partitioningProviderCatalog = GlobalSystemConnector.NAME;\n     private ExchangeMaterializationStrategy exchangeMaterializationStrategy = ExchangeMaterializationStrategy.NONE;\n+    private boolean streamMarkDistinctWithMaterializedExchange;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg3Mjk2MA=="}, "originalCommit": {"oid": "76c3ea221a14b4f84e213bd8c89ff222af0a9fc5"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjAyNDQ1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxODoxNTowOFrOFzz-UQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxODoxNTowOFrOFzz-UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg3MzIzMw==", "bodyText": "ditto, query.use-stream-exchange-for-mark-distinct", "url": "https://github.com/prestodb/presto/pull/14216#discussion_r389873233", "createdAt": "2020-03-09T18:15:08Z", "author": {"login": "wenleix"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java", "diffHunk": "@@ -162,6 +163,20 @@ public ExchangeMaterializationStrategy getExchangeMaterializationStrategy()\n         return exchangeMaterializationStrategy;\n     }\n \n+    @Config(\"query.stream-mark-distinct-with-materialized-exchange\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76c3ea221a14b4f84e213bd8c89ff222af0a9fc5"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjAyODQ1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/AddExchanges.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxODoxNjoxMVrOFz0Atw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxODoxNjoxMVrOFz0Atw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg3Mzg0Nw==", "bodyText": "nit: useStreamExchangeForMarkDitinct as variable name ? :)", "url": "https://github.com/prestodb/presto/pull/14216#discussion_r389873847", "createdAt": "2020-03-09T18:16:11Z", "author": {"login": "wenleix"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/AddExchanges.java", "diffHunk": "@@ -1379,7 +1380,8 @@ private Partitioning createPartitioning(Collection<VariableReferenceExpression>\n         //   materialized exchange is supported for all nodes.\n         private Scope selectExchangeScopeForPartitionedRemoteExchange(PlanNode exchangeSource, boolean nullsAndAnyReplicated)\n         {\n-            if (nullsAndAnyReplicated || exchangeSource.getOutputVariables().isEmpty()) {\n+            boolean streamMarkDistinct = SystemSessionProperties.isStreamMarkDistinctWithMaterializedExchangeEnabled(session);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76c3ea221a14b4f84e213bd8c89ff222af0a9fc5"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjAzMjczOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/AddExchanges.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxODoxNzoxOVrOFz0DPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNTowMDo0NlrOF0S53Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg3NDQ5Mw==", "bodyText": "Will this make ALL exchange to be streaming when useStreamExchangeForMarkDistinct is set? -- I expect to see some condition based on plan node? :)", "url": "https://github.com/prestodb/presto/pull/14216#discussion_r389874493", "createdAt": "2020-03-09T18:17:19Z", "author": {"login": "wenleix"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/AddExchanges.java", "diffHunk": "@@ -1379,7 +1380,8 @@ private Partitioning createPartitioning(Collection<VariableReferenceExpression>\n         //   materialized exchange is supported for all nodes.\n         private Scope selectExchangeScopeForPartitionedRemoteExchange(PlanNode exchangeSource, boolean nullsAndAnyReplicated)\n         {\n-            if (nullsAndAnyReplicated || exchangeSource.getOutputVariables().isEmpty()) {\n+            boolean streamMarkDistinct = SystemSessionProperties.isStreamMarkDistinctWithMaterializedExchangeEnabled(session);\n+            if (nullsAndAnyReplicated || exchangeSource.getOutputVariables().isEmpty() || streamMarkDistinct) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76c3ea221a14b4f84e213bd8c89ff222af0a9fc5"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM3OTk5Nw==", "bodyText": "Yes, I completely forgot that it would be used from multiple places. Will fix it.", "url": "https://github.com/prestodb/presto/pull/14216#discussion_r390379997", "createdAt": "2020-03-10T15:00:46Z", "author": {"login": "aweisberg"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/AddExchanges.java", "diffHunk": "@@ -1379,7 +1380,8 @@ private Partitioning createPartitioning(Collection<VariableReferenceExpression>\n         //   materialized exchange is supported for all nodes.\n         private Scope selectExchangeScopeForPartitionedRemoteExchange(PlanNode exchangeSource, boolean nullsAndAnyReplicated)\n         {\n-            if (nullsAndAnyReplicated || exchangeSource.getOutputVariables().isEmpty()) {\n+            boolean streamMarkDistinct = SystemSessionProperties.isStreamMarkDistinctWithMaterializedExchangeEnabled(session);\n+            if (nullsAndAnyReplicated || exchangeSource.getOutputVariables().isEmpty() || streamMarkDistinct) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg3NDQ5Mw=="}, "originalCommit": {"oid": "76c3ea221a14b4f84e213bd8c89ff222af0a9fc5"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTU4OTU0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/AddExchanges.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwNToxMjo0OVrOF0pcrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwNToxNDoxM1rOF0pd_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc0OTM1OQ==", "bodyText": "nit: static import", "url": "https://github.com/prestodb/presto/pull/14216#discussion_r390749359", "createdAt": "2020-03-11T05:12:49Z", "author": {"login": "arhimondr"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/AddExchanges.java", "diffHunk": "@@ -318,10 +319,15 @@ public PlanWithProperties visitMarkDistinct(MarkDistinctNode node, PreferredProp\n \n             if (child.getProperties().isSingleNode() ||\n                     !isStreamPartitionedOn(child.getProperties(), node.getDistinctVariables())) {\n+                boolean useStreamingExchangeWithMarkDistinct =\n+                        SystemSessionProperties.isStreamMarkDistinctWithMaterializedExchangeEnabled(session);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58bf6d00fc9d9d7b21d3c8ecef8ed47e2a4f6cf9"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc0OTY5Mg==", "bodyText": "nit: It should be fine to inline it after the static import is applied", "url": "https://github.com/prestodb/presto/pull/14216#discussion_r390749692", "createdAt": "2020-03-11T05:14:13Z", "author": {"login": "arhimondr"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/AddExchanges.java", "diffHunk": "@@ -318,10 +319,15 @@ public PlanWithProperties visitMarkDistinct(MarkDistinctNode node, PreferredProp\n \n             if (child.getProperties().isSingleNode() ||\n                     !isStreamPartitionedOn(child.getProperties(), node.getDistinctVariables())) {\n+                boolean useStreamingExchangeWithMarkDistinct =\n+                        SystemSessionProperties.isStreamMarkDistinctWithMaterializedExchangeEnabled(session);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc0OTM1OQ=="}, "originalCommit": {"oid": "58bf6d00fc9d9d7b21d3c8ecef8ed47e2a4f6cf9"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2867, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}