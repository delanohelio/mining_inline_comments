{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzMTAxMzg2", "number": 14471, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMDoxNTo1MFrOD8okfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNTowNToxMlrOD8u6hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0OTA1ODU1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/RelationPlanner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMDoxNTo1MFrOGVsnEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMzo1MzozN1rOGVx9xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQwNDE3OQ==", "bodyText": "nit: static import ExpressionTreeUtils.isEqualComparisonExpression", "url": "https://github.com/prestodb/presto/pull/14471#discussion_r425404179", "createdAt": "2020-05-14T20:15:50Z", "author": {"login": "mbasmanova"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/RelationPlanner.java", "diffHunk": "@@ -267,7 +268,7 @@ protected RelationPlan visitJoin(Join node, Void context)\n             for (Expression conjunct : ExpressionUtils.extractConjuncts(criteria)) {\n                 conjunct = ExpressionUtils.normalize(conjunct);\n \n-                if (!isEqualComparisonExpression(conjunct) && node.getType() != INNER) {\n+                if (!ExpressionTreeUtils.isEqualComparisonExpression(conjunct) && node.getType() != INNER) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9375292036ca4c09b29e033cf40401cf2c036a2"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ5MTkwOQ==", "bodyText": "Done", "url": "https://github.com/prestodb/presto/pull/14471#discussion_r425491909", "createdAt": "2020-05-14T23:53:37Z", "author": {"login": "kaikalur"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/RelationPlanner.java", "diffHunk": "@@ -267,7 +268,7 @@ protected RelationPlan visitJoin(Join node, Void context)\n             for (Expression conjunct : ExpressionUtils.extractConjuncts(criteria)) {\n                 conjunct = ExpressionUtils.normalize(conjunct);\n \n-                if (!isEqualComparisonExpression(conjunct) && node.getType() != INNER) {\n+                if (!ExpressionTreeUtils.isEqualComparisonExpression(conjunct) && node.getType() != INNER) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQwNDE3OQ=="}, "originalCommit": {"oid": "b9375292036ca4c09b29e033cf40401cf2c036a2"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0OTA2MTA2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/relational/SqlToRowExpressionTranslator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMDoxNjo0MFrOGVsoww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMDowNzowM1rOGVyMIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQwNDYxMQ==", "bodyText": "typo in \"espeically\"", "url": "https://github.com/prestodb/presto/pull/14471#discussion_r425404611", "createdAt": "2020-05-14T20:16:40Z", "author": {"login": "mbasmanova"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/relational/SqlToRowExpressionTranslator.java", "diffHunk": "@@ -528,64 +528,77 @@ protected RowExpression visitCoalesceExpression(CoalesceExpression node, Void co\n         @Override\n         protected RowExpression visitSimpleCaseExpression(SimpleCaseExpression node, Void context)\n         {\n-            ImmutableList.Builder<RowExpression> arguments = ImmutableList.builder();\n-\n-            arguments.add(process(node.getOperand(), context));\n-\n-            for (WhenClause clause : node.getWhenClauses()) {\n-                arguments.add(specialForm(\n-                        WHEN,\n-                        getType(clause),\n-                        process(clause.getOperand(), context),\n-                        process(clause.getResult(), context)));\n-            }\n-\n-            Type returnType = getType(node);\n-\n-            arguments.add(node.getDefaultValue()\n-                    .map((value) -> process(value, context))\n-                    .orElse(constantNull(returnType)));\n-\n-            return specialForm(SWITCH, returnType, arguments.build());\n+            return buildSwitch(process(node.getOperand(), context), node.getWhenClauses(), node.getDefaultValue(), getType(node), context);\n         }\n \n         @Override\n         protected RowExpression visitSearchedCaseExpression(SearchedCaseExpression node, Void context)\n         {\n-            /*\n-                Translates an expression like:\n+            // Rewriter situations where it's CASE WHEN x = v1 THEN r1, WHEN x = v2 THEN r2 ... END to:\n+            // CASE x WHEN v1 THEN r1 WHEN v2 THEN r2 ...\n+            // So that better code is generated espeically in tableau", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9375292036ca4c09b29e033cf40401cf2c036a2"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ5NTU4Ng==", "bodyText": "done", "url": "https://github.com/prestodb/presto/pull/14471#discussion_r425495586", "createdAt": "2020-05-15T00:07:03Z", "author": {"login": "kaikalur"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/relational/SqlToRowExpressionTranslator.java", "diffHunk": "@@ -528,64 +528,77 @@ protected RowExpression visitCoalesceExpression(CoalesceExpression node, Void co\n         @Override\n         protected RowExpression visitSimpleCaseExpression(SimpleCaseExpression node, Void context)\n         {\n-            ImmutableList.Builder<RowExpression> arguments = ImmutableList.builder();\n-\n-            arguments.add(process(node.getOperand(), context));\n-\n-            for (WhenClause clause : node.getWhenClauses()) {\n-                arguments.add(specialForm(\n-                        WHEN,\n-                        getType(clause),\n-                        process(clause.getOperand(), context),\n-                        process(clause.getResult(), context)));\n-            }\n-\n-            Type returnType = getType(node);\n-\n-            arguments.add(node.getDefaultValue()\n-                    .map((value) -> process(value, context))\n-                    .orElse(constantNull(returnType)));\n-\n-            return specialForm(SWITCH, returnType, arguments.build());\n+            return buildSwitch(process(node.getOperand(), context), node.getWhenClauses(), node.getDefaultValue(), getType(node), context);\n         }\n \n         @Override\n         protected RowExpression visitSearchedCaseExpression(SearchedCaseExpression node, Void context)\n         {\n-            /*\n-                Translates an expression like:\n+            // Rewriter situations where it's CASE WHEN x = v1 THEN r1, WHEN x = v2 THEN r2 ... END to:\n+            // CASE x WHEN v1 THEN r1 WHEN v2 THEN r2 ...\n+            // So that better code is generated espeically in tableau", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQwNDYxMQ=="}, "originalCommit": {"oid": "b9375292036ca4c09b29e033cf40401cf2c036a2"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0OTA2MjQyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/relational/SqlToRowExpressionTranslator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMDoxNzowNlrOGVspnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMDowNzo1MVrOGVyNEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQwNDgyOA==", "bodyText": "static import", "url": "https://github.com/prestodb/presto/pull/14471#discussion_r425404828", "createdAt": "2020-05-14T20:17:06Z", "author": {"login": "mbasmanova"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/relational/SqlToRowExpressionTranslator.java", "diffHunk": "@@ -528,64 +528,77 @@ protected RowExpression visitCoalesceExpression(CoalesceExpression node, Void co\n         @Override\n         protected RowExpression visitSimpleCaseExpression(SimpleCaseExpression node, Void context)\n         {\n-            ImmutableList.Builder<RowExpression> arguments = ImmutableList.builder();\n-\n-            arguments.add(process(node.getOperand(), context));\n-\n-            for (WhenClause clause : node.getWhenClauses()) {\n-                arguments.add(specialForm(\n-                        WHEN,\n-                        getType(clause),\n-                        process(clause.getOperand(), context),\n-                        process(clause.getResult(), context)));\n-            }\n-\n-            Type returnType = getType(node);\n-\n-            arguments.add(node.getDefaultValue()\n-                    .map((value) -> process(value, context))\n-                    .orElse(constantNull(returnType)));\n-\n-            return specialForm(SWITCH, returnType, arguments.build());\n+            return buildSwitch(process(node.getOperand(), context), node.getWhenClauses(), node.getDefaultValue(), getType(node), context);\n         }\n \n         @Override\n         protected RowExpression visitSearchedCaseExpression(SearchedCaseExpression node, Void context)\n         {\n-            /*\n-                Translates an expression like:\n+            // Rewriter situations where it's CASE WHEN x = v1 THEN r1, WHEN x = v2 THEN r2 ... END to:\n+            // CASE x WHEN v1 THEN r1 WHEN v2 THEN r2 ...\n+            // So that better code is generated espeically in tableau\n+            RowExpression lhsArg = null;\n+            for (WhenClause whenClause : node.getWhenClauses()) {\n+                Expression predicate = whenClause.getOperand();\n+                if (ExpressionTreeUtils.isEqualComparisonExpression(predicate) ||", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9375292036ca4c09b29e033cf40401cf2c036a2"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ5NTgyNg==", "bodyText": "wrong line? Anyway fixed them all", "url": "https://github.com/prestodb/presto/pull/14471#discussion_r425495826", "createdAt": "2020-05-15T00:07:51Z", "author": {"login": "kaikalur"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/relational/SqlToRowExpressionTranslator.java", "diffHunk": "@@ -528,64 +528,77 @@ protected RowExpression visitCoalesceExpression(CoalesceExpression node, Void co\n         @Override\n         protected RowExpression visitSimpleCaseExpression(SimpleCaseExpression node, Void context)\n         {\n-            ImmutableList.Builder<RowExpression> arguments = ImmutableList.builder();\n-\n-            arguments.add(process(node.getOperand(), context));\n-\n-            for (WhenClause clause : node.getWhenClauses()) {\n-                arguments.add(specialForm(\n-                        WHEN,\n-                        getType(clause),\n-                        process(clause.getOperand(), context),\n-                        process(clause.getResult(), context)));\n-            }\n-\n-            Type returnType = getType(node);\n-\n-            arguments.add(node.getDefaultValue()\n-                    .map((value) -> process(value, context))\n-                    .orElse(constantNull(returnType)));\n-\n-            return specialForm(SWITCH, returnType, arguments.build());\n+            return buildSwitch(process(node.getOperand(), context), node.getWhenClauses(), node.getDefaultValue(), getType(node), context);\n         }\n \n         @Override\n         protected RowExpression visitSearchedCaseExpression(SearchedCaseExpression node, Void context)\n         {\n-            /*\n-                Translates an expression like:\n+            // Rewriter situations where it's CASE WHEN x = v1 THEN r1, WHEN x = v2 THEN r2 ... END to:\n+            // CASE x WHEN v1 THEN r1 WHEN v2 THEN r2 ...\n+            // So that better code is generated espeically in tableau\n+            RowExpression lhsArg = null;\n+            for (WhenClause whenClause : node.getWhenClauses()) {\n+                Expression predicate = whenClause.getOperand();\n+                if (ExpressionTreeUtils.isEqualComparisonExpression(predicate) ||", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQwNDgyOA=="}, "originalCommit": {"oid": "b9375292036ca4c09b29e033cf40401cf2c036a2"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0OTA2MjY1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/relational/SqlToRowExpressionTranslator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMDoxNzoxMFrOGVspwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMDowODowMlrOGVyNNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQwNDg2Ng==", "bodyText": "static import", "url": "https://github.com/prestodb/presto/pull/14471#discussion_r425404866", "createdAt": "2020-05-14T20:17:10Z", "author": {"login": "mbasmanova"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/relational/SqlToRowExpressionTranslator.java", "diffHunk": "@@ -528,64 +528,77 @@ protected RowExpression visitCoalesceExpression(CoalesceExpression node, Void co\n         @Override\n         protected RowExpression visitSimpleCaseExpression(SimpleCaseExpression node, Void context)\n         {\n-            ImmutableList.Builder<RowExpression> arguments = ImmutableList.builder();\n-\n-            arguments.add(process(node.getOperand(), context));\n-\n-            for (WhenClause clause : node.getWhenClauses()) {\n-                arguments.add(specialForm(\n-                        WHEN,\n-                        getType(clause),\n-                        process(clause.getOperand(), context),\n-                        process(clause.getResult(), context)));\n-            }\n-\n-            Type returnType = getType(node);\n-\n-            arguments.add(node.getDefaultValue()\n-                    .map((value) -> process(value, context))\n-                    .orElse(constantNull(returnType)));\n-\n-            return specialForm(SWITCH, returnType, arguments.build());\n+            return buildSwitch(process(node.getOperand(), context), node.getWhenClauses(), node.getDefaultValue(), getType(node), context);\n         }\n \n         @Override\n         protected RowExpression visitSearchedCaseExpression(SearchedCaseExpression node, Void context)\n         {\n-            /*\n-                Translates an expression like:\n+            // Rewriter situations where it's CASE WHEN x = v1 THEN r1, WHEN x = v2 THEN r2 ... END to:\n+            // CASE x WHEN v1 THEN r1 WHEN v2 THEN r2 ...\n+            // So that better code is generated espeically in tableau\n+            RowExpression lhsArg = null;\n+            for (WhenClause whenClause : node.getWhenClauses()) {\n+                Expression predicate = whenClause.getOperand();\n+                if (ExpressionTreeUtils.isEqualComparisonExpression(predicate) ||\n+                        ExpressionTreeUtils.isInValuesComparisonExpression(predicate)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9375292036ca4c09b29e033cf40401cf2c036a2"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ5NTg2MA==", "bodyText": "done", "url": "https://github.com/prestodb/presto/pull/14471#discussion_r425495860", "createdAt": "2020-05-15T00:08:02Z", "author": {"login": "kaikalur"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/relational/SqlToRowExpressionTranslator.java", "diffHunk": "@@ -528,64 +528,77 @@ protected RowExpression visitCoalesceExpression(CoalesceExpression node, Void co\n         @Override\n         protected RowExpression visitSimpleCaseExpression(SimpleCaseExpression node, Void context)\n         {\n-            ImmutableList.Builder<RowExpression> arguments = ImmutableList.builder();\n-\n-            arguments.add(process(node.getOperand(), context));\n-\n-            for (WhenClause clause : node.getWhenClauses()) {\n-                arguments.add(specialForm(\n-                        WHEN,\n-                        getType(clause),\n-                        process(clause.getOperand(), context),\n-                        process(clause.getResult(), context)));\n-            }\n-\n-            Type returnType = getType(node);\n-\n-            arguments.add(node.getDefaultValue()\n-                    .map((value) -> process(value, context))\n-                    .orElse(constantNull(returnType)));\n-\n-            return specialForm(SWITCH, returnType, arguments.build());\n+            return buildSwitch(process(node.getOperand(), context), node.getWhenClauses(), node.getDefaultValue(), getType(node), context);\n         }\n \n         @Override\n         protected RowExpression visitSearchedCaseExpression(SearchedCaseExpression node, Void context)\n         {\n-            /*\n-                Translates an expression like:\n+            // Rewriter situations where it's CASE WHEN x = v1 THEN r1, WHEN x = v2 THEN r2 ... END to:\n+            // CASE x WHEN v1 THEN r1 WHEN v2 THEN r2 ...\n+            // So that better code is generated espeically in tableau\n+            RowExpression lhsArg = null;\n+            for (WhenClause whenClause : node.getWhenClauses()) {\n+                Expression predicate = whenClause.getOperand();\n+                if (ExpressionTreeUtils.isEqualComparisonExpression(predicate) ||\n+                        ExpressionTreeUtils.isInValuesComparisonExpression(predicate)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQwNDg2Ng=="}, "originalCommit": {"oid": "b9375292036ca4c09b29e033cf40401cf2c036a2"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0OTA2NDMzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/relational/SqlToRowExpressionTranslator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMDoxNzo0M1rOGVsq1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMDoxMDoyNlrOGVyQPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQwNTE0MA==", "bodyText": "lhsArg -> leftArgument or something where you don't abbreviate", "url": "https://github.com/prestodb/presto/pull/14471#discussion_r425405140", "createdAt": "2020-05-14T20:17:43Z", "author": {"login": "mbasmanova"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/relational/SqlToRowExpressionTranslator.java", "diffHunk": "@@ -528,64 +528,77 @@ protected RowExpression visitCoalesceExpression(CoalesceExpression node, Void co\n         @Override\n         protected RowExpression visitSimpleCaseExpression(SimpleCaseExpression node, Void context)\n         {\n-            ImmutableList.Builder<RowExpression> arguments = ImmutableList.builder();\n-\n-            arguments.add(process(node.getOperand(), context));\n-\n-            for (WhenClause clause : node.getWhenClauses()) {\n-                arguments.add(specialForm(\n-                        WHEN,\n-                        getType(clause),\n-                        process(clause.getOperand(), context),\n-                        process(clause.getResult(), context)));\n-            }\n-\n-            Type returnType = getType(node);\n-\n-            arguments.add(node.getDefaultValue()\n-                    .map((value) -> process(value, context))\n-                    .orElse(constantNull(returnType)));\n-\n-            return specialForm(SWITCH, returnType, arguments.build());\n+            return buildSwitch(process(node.getOperand(), context), node.getWhenClauses(), node.getDefaultValue(), getType(node), context);\n         }\n \n         @Override\n         protected RowExpression visitSearchedCaseExpression(SearchedCaseExpression node, Void context)\n         {\n-            /*\n-                Translates an expression like:\n+            // Rewriter situations where it's CASE WHEN x = v1 THEN r1, WHEN x = v2 THEN r2 ... END to:\n+            // CASE x WHEN v1 THEN r1 WHEN v2 THEN r2 ...\n+            // So that better code is generated espeically in tableau\n+            RowExpression lhsArg = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9375292036ca4c09b29e033cf40401cf2c036a2"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ5NjYzNw==", "bodyText": "caseOperand", "url": "https://github.com/prestodb/presto/pull/14471#discussion_r425496637", "createdAt": "2020-05-15T00:10:26Z", "author": {"login": "kaikalur"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/relational/SqlToRowExpressionTranslator.java", "diffHunk": "@@ -528,64 +528,77 @@ protected RowExpression visitCoalesceExpression(CoalesceExpression node, Void co\n         @Override\n         protected RowExpression visitSimpleCaseExpression(SimpleCaseExpression node, Void context)\n         {\n-            ImmutableList.Builder<RowExpression> arguments = ImmutableList.builder();\n-\n-            arguments.add(process(node.getOperand(), context));\n-\n-            for (WhenClause clause : node.getWhenClauses()) {\n-                arguments.add(specialForm(\n-                        WHEN,\n-                        getType(clause),\n-                        process(clause.getOperand(), context),\n-                        process(clause.getResult(), context)));\n-            }\n-\n-            Type returnType = getType(node);\n-\n-            arguments.add(node.getDefaultValue()\n-                    .map((value) -> process(value, context))\n-                    .orElse(constantNull(returnType)));\n-\n-            return specialForm(SWITCH, returnType, arguments.build());\n+            return buildSwitch(process(node.getOperand(), context), node.getWhenClauses(), node.getDefaultValue(), getType(node), context);\n         }\n \n         @Override\n         protected RowExpression visitSearchedCaseExpression(SearchedCaseExpression node, Void context)\n         {\n-            /*\n-                Translates an expression like:\n+            // Rewriter situations where it's CASE WHEN x = v1 THEN r1, WHEN x = v2 THEN r2 ... END to:\n+            // CASE x WHEN v1 THEN r1 WHEN v2 THEN r2 ...\n+            // So that better code is generated espeically in tableau\n+            RowExpression lhsArg = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQwNTE0MA=="}, "originalCommit": {"oid": "b9375292036ca4c09b29e033cf40401cf2c036a2"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0OTA2NTM4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/relational/SqlToRowExpressionTranslator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMDoxODowMVrOGVsrfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMDoxMToxNVrOGVyRNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQwNTMwOA==", "bodyText": "static import", "url": "https://github.com/prestodb/presto/pull/14471#discussion_r425405308", "createdAt": "2020-05-14T20:18:01Z", "author": {"login": "mbasmanova"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/relational/SqlToRowExpressionTranslator.java", "diffHunk": "@@ -528,64 +528,77 @@ protected RowExpression visitCoalesceExpression(CoalesceExpression node, Void co\n         @Override\n         protected RowExpression visitSimpleCaseExpression(SimpleCaseExpression node, Void context)\n         {\n-            ImmutableList.Builder<RowExpression> arguments = ImmutableList.builder();\n-\n-            arguments.add(process(node.getOperand(), context));\n-\n-            for (WhenClause clause : node.getWhenClauses()) {\n-                arguments.add(specialForm(\n-                        WHEN,\n-                        getType(clause),\n-                        process(clause.getOperand(), context),\n-                        process(clause.getResult(), context)));\n-            }\n-\n-            Type returnType = getType(node);\n-\n-            arguments.add(node.getDefaultValue()\n-                    .map((value) -> process(value, context))\n-                    .orElse(constantNull(returnType)));\n-\n-            return specialForm(SWITCH, returnType, arguments.build());\n+            return buildSwitch(process(node.getOperand(), context), node.getWhenClauses(), node.getDefaultValue(), getType(node), context);\n         }\n \n         @Override\n         protected RowExpression visitSearchedCaseExpression(SearchedCaseExpression node, Void context)\n         {\n-            /*\n-                Translates an expression like:\n+            // Rewriter situations where it's CASE WHEN x = v1 THEN r1, WHEN x = v2 THEN r2 ... END to:\n+            // CASE x WHEN v1 THEN r1 WHEN v2 THEN r2 ...\n+            // So that better code is generated espeically in tableau\n+            RowExpression lhsArg = null;\n+            for (WhenClause whenClause : node.getWhenClauses()) {\n+                Expression predicate = whenClause.getOperand();\n+                if (ExpressionTreeUtils.isEqualComparisonExpression(predicate) ||\n+                        ExpressionTreeUtils.isInValuesComparisonExpression(predicate)) {\n+                    RowExpression operand = process(predicate.getChildren().get(0), context);\n+                    if (lhsArg != null && !operand.equals(lhsArg)) {\n+                        lhsArg = null;\n+                        break;\n+                    }\n+                    lhsArg = operand;\n+                }\n+                else {\n+                    lhsArg = null;\n+                    break;\n+                }\n+            }\n \n-                    case when cond1 then value1\n-                         when cond2 then value2\n-                         when cond3 then value3\n-                         else value4\n-                    end\n+            if (lhsArg != null) {\n+                // We found the pattern. So rebuild the When list to just include the rhs of the equals.\n+                ImmutableList.Builder<WhenClause> newWhenClauses = ImmutableList.builder();\n+                for (WhenClause whenClause : node.getWhenClauses()) {\n+                    if (ExpressionTreeUtils.isInValuesComparisonExpression(whenClause.getOperand())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9375292036ca4c09b29e033cf40401cf2c036a2"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ5Njg4NA==", "bodyText": "done. I think you mean isInValuesComparisonExpression", "url": "https://github.com/prestodb/presto/pull/14471#discussion_r425496884", "createdAt": "2020-05-15T00:11:15Z", "author": {"login": "kaikalur"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/relational/SqlToRowExpressionTranslator.java", "diffHunk": "@@ -528,64 +528,77 @@ protected RowExpression visitCoalesceExpression(CoalesceExpression node, Void co\n         @Override\n         protected RowExpression visitSimpleCaseExpression(SimpleCaseExpression node, Void context)\n         {\n-            ImmutableList.Builder<RowExpression> arguments = ImmutableList.builder();\n-\n-            arguments.add(process(node.getOperand(), context));\n-\n-            for (WhenClause clause : node.getWhenClauses()) {\n-                arguments.add(specialForm(\n-                        WHEN,\n-                        getType(clause),\n-                        process(clause.getOperand(), context),\n-                        process(clause.getResult(), context)));\n-            }\n-\n-            Type returnType = getType(node);\n-\n-            arguments.add(node.getDefaultValue()\n-                    .map((value) -> process(value, context))\n-                    .orElse(constantNull(returnType)));\n-\n-            return specialForm(SWITCH, returnType, arguments.build());\n+            return buildSwitch(process(node.getOperand(), context), node.getWhenClauses(), node.getDefaultValue(), getType(node), context);\n         }\n \n         @Override\n         protected RowExpression visitSearchedCaseExpression(SearchedCaseExpression node, Void context)\n         {\n-            /*\n-                Translates an expression like:\n+            // Rewriter situations where it's CASE WHEN x = v1 THEN r1, WHEN x = v2 THEN r2 ... END to:\n+            // CASE x WHEN v1 THEN r1 WHEN v2 THEN r2 ...\n+            // So that better code is generated espeically in tableau\n+            RowExpression lhsArg = null;\n+            for (WhenClause whenClause : node.getWhenClauses()) {\n+                Expression predicate = whenClause.getOperand();\n+                if (ExpressionTreeUtils.isEqualComparisonExpression(predicate) ||\n+                        ExpressionTreeUtils.isInValuesComparisonExpression(predicate)) {\n+                    RowExpression operand = process(predicate.getChildren().get(0), context);\n+                    if (lhsArg != null && !operand.equals(lhsArg)) {\n+                        lhsArg = null;\n+                        break;\n+                    }\n+                    lhsArg = operand;\n+                }\n+                else {\n+                    lhsArg = null;\n+                    break;\n+                }\n+            }\n \n-                    case when cond1 then value1\n-                         when cond2 then value2\n-                         when cond3 then value3\n-                         else value4\n-                    end\n+            if (lhsArg != null) {\n+                // We found the pattern. So rebuild the When list to just include the rhs of the equals.\n+                ImmutableList.Builder<WhenClause> newWhenClauses = ImmutableList.builder();\n+                for (WhenClause whenClause : node.getWhenClauses()) {\n+                    if (ExpressionTreeUtils.isInValuesComparisonExpression(whenClause.getOperand())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQwNTMwOA=="}, "originalCommit": {"oid": "b9375292036ca4c09b29e033cf40401cf2c036a2"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MDA3NTg5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/RowExpressionInterpreter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNDo1MToyMVrOGV2Z7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMzo1MTo1NFrOGWFwpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU2NDY1NA==", "bodyText": "Is this change necessary? I failed to spot logical difference between the two \ud83d\ude02", "url": "https://github.com/prestodb/presto/pull/14471#discussion_r425564654", "createdAt": "2020-05-15T04:51:21Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/RowExpressionInterpreter.java", "diffHunk": "@@ -323,21 +323,20 @@ public Object visitSpecialForm(SpecialFormExpression node, Object context)\n                 case IF: {\n                     checkArgument(node.getArguments().size() == 3);\n                     Object condition = processWithExceptionHandling(node.getArguments().get(0), context);\n-                    Object trueValue = processWithExceptionHandling(node.getArguments().get(1), context);\n-                    Object falseValue = processWithExceptionHandling(node.getArguments().get(2), context);\n \n                     if (condition instanceof RowExpression) {\n                         return new SpecialFormExpression(\n                                 IF,\n                                 node.getType(),\n                                 toRowExpression(condition, node.getArguments().get(0)),\n-                                toRowExpression(trueValue, node.getArguments().get(1)),\n-                                toRowExpression(falseValue, node.getArguments().get(2)));\n+                                toRowExpression(processWithExceptionHandling(node.getArguments().get(1), context), node.getArguments().get(1)),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e5a6d99a8d5cdcd2946419670e0abd564c9a968"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTgxNjIzMQ==", "bodyText": "First off, this whole class should not even exist. There should be one and only one way to execute stuff for correctness guarantees - we will eventually get there.\nThat said, if the condition constant folds, then you need to evaluate only one of the branches. Both correctness and minor perf in planning time.", "url": "https://github.com/prestodb/presto/pull/14471#discussion_r425816231", "createdAt": "2020-05-15T13:51:54Z", "author": {"login": "kaikalur"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/RowExpressionInterpreter.java", "diffHunk": "@@ -323,21 +323,20 @@ public Object visitSpecialForm(SpecialFormExpression node, Object context)\n                 case IF: {\n                     checkArgument(node.getArguments().size() == 3);\n                     Object condition = processWithExceptionHandling(node.getArguments().get(0), context);\n-                    Object trueValue = processWithExceptionHandling(node.getArguments().get(1), context);\n-                    Object falseValue = processWithExceptionHandling(node.getArguments().get(2), context);\n \n                     if (condition instanceof RowExpression) {\n                         return new SpecialFormExpression(\n                                 IF,\n                                 node.getType(),\n                                 toRowExpression(condition, node.getArguments().get(0)),\n-                                toRowExpression(trueValue, node.getArguments().get(1)),\n-                                toRowExpression(falseValue, node.getArguments().get(2)));\n+                                toRowExpression(processWithExceptionHandling(node.getArguments().get(1), context), node.getArguments().get(1)),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU2NDY1NA=="}, "originalCommit": {"oid": "6e5a6d99a8d5cdcd2946419670e0abd564c9a968"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MDA4NzE4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/relational/SqlToRowExpressionTranslator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNDo1OTowMVrOGV2g8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMzo1Mjo0N1rOGWFzRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU2NjQ0OQ==", "bodyText": "Remove \"So that better code is generated especially for tableau queries\", this is very specific to our workload and quite confusing for general community.", "url": "https://github.com/prestodb/presto/pull/14471#discussion_r425566449", "createdAt": "2020-05-15T04:59:01Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/relational/SqlToRowExpressionTranslator.java", "diffHunk": "@@ -528,64 +529,77 @@ protected RowExpression visitCoalesceExpression(CoalesceExpression node, Void co\n         @Override\n         protected RowExpression visitSimpleCaseExpression(SimpleCaseExpression node, Void context)\n         {\n-            ImmutableList.Builder<RowExpression> arguments = ImmutableList.builder();\n-\n-            arguments.add(process(node.getOperand(), context));\n-\n-            for (WhenClause clause : node.getWhenClauses()) {\n-                arguments.add(specialForm(\n-                        WHEN,\n-                        getType(clause),\n-                        process(clause.getOperand(), context),\n-                        process(clause.getResult(), context)));\n-            }\n-\n-            Type returnType = getType(node);\n-\n-            arguments.add(node.getDefaultValue()\n-                    .map((value) -> process(value, context))\n-                    .orElse(constantNull(returnType)));\n-\n-            return specialForm(SWITCH, returnType, arguments.build());\n+            return buildSwitch(process(node.getOperand(), context), node.getWhenClauses(), node.getDefaultValue(), getType(node), context);\n         }\n \n         @Override\n         protected RowExpression visitSearchedCaseExpression(SearchedCaseExpression node, Void context)\n         {\n-            /*\n-                Translates an expression like:\n+            // Rewrite situations where it's CASE WHEN x = v1 THEN r1, WHEN x = v2 THEN r2 ... END to:\n+            // CASE x WHEN v1 THEN r1 WHEN v2 THEN r2 ...\n+            // So that better code is generated especially for tableau queries", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e5a6d99a8d5cdcd2946419670e0abd564c9a968"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTgxNjkwMg==", "bodyText": "No. Tableau is a popular tool and the problem is general for any Presto user.", "url": "https://github.com/prestodb/presto/pull/14471#discussion_r425816902", "createdAt": "2020-05-15T13:52:47Z", "author": {"login": "kaikalur"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/relational/SqlToRowExpressionTranslator.java", "diffHunk": "@@ -528,64 +529,77 @@ protected RowExpression visitCoalesceExpression(CoalesceExpression node, Void co\n         @Override\n         protected RowExpression visitSimpleCaseExpression(SimpleCaseExpression node, Void context)\n         {\n-            ImmutableList.Builder<RowExpression> arguments = ImmutableList.builder();\n-\n-            arguments.add(process(node.getOperand(), context));\n-\n-            for (WhenClause clause : node.getWhenClauses()) {\n-                arguments.add(specialForm(\n-                        WHEN,\n-                        getType(clause),\n-                        process(clause.getOperand(), context),\n-                        process(clause.getResult(), context)));\n-            }\n-\n-            Type returnType = getType(node);\n-\n-            arguments.add(node.getDefaultValue()\n-                    .map((value) -> process(value, context))\n-                    .orElse(constantNull(returnType)));\n-\n-            return specialForm(SWITCH, returnType, arguments.build());\n+            return buildSwitch(process(node.getOperand(), context), node.getWhenClauses(), node.getDefaultValue(), getType(node), context);\n         }\n \n         @Override\n         protected RowExpression visitSearchedCaseExpression(SearchedCaseExpression node, Void context)\n         {\n-            /*\n-                Translates an expression like:\n+            // Rewrite situations where it's CASE WHEN x = v1 THEN r1, WHEN x = v2 THEN r2 ... END to:\n+            // CASE x WHEN v1 THEN r1 WHEN v2 THEN r2 ...\n+            // So that better code is generated especially for tableau queries", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU2NjQ0OQ=="}, "originalCommit": {"oid": "6e5a6d99a8d5cdcd2946419670e0abd564c9a968"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MDA5NzA4OnYy", "diffSide": "RIGHT", "path": "presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNTowNDozNlrOGV2mqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMzo1Mzo1N1rOGWF2FA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU2NzkxMw==", "bodyText": "Why do we need to change this? Would this not trigger bytecode too large anymore?", "url": "https://github.com/prestodb/presto/pull/14471#discussion_r425567913", "createdAt": "2020-05-15T05:04:36Z", "author": {"login": "rongrong"}, "path": "presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java", "diffHunk": "@@ -8301,7 +8301,7 @@ public void testLastValueIgnoreNulls()\n     @Test\n     public void testLargeBytecode()\n     {\n-        StringBuilder stringBuilder = new StringBuilder(\"SELECT x FROM (SELECT orderkey x, custkey y from orders limit 10) WHERE CASE\");\n+        StringBuilder stringBuilder = new StringBuilder(\"SELECT x FROM (SELECT orderkey x, custkey y from orders limit 10) WHERE CASE true \");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e5a6d99a8d5cdcd2946419670e0abd564c9a968"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTgxNzYyMA==", "bodyText": "So the code now stack overflows in the bytecode generator. So part2 of this change will also fix that.", "url": "https://github.com/prestodb/presto/pull/14471#discussion_r425817620", "createdAt": "2020-05-15T13:53:57Z", "author": {"login": "kaikalur"}, "path": "presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java", "diffHunk": "@@ -8301,7 +8301,7 @@ public void testLastValueIgnoreNulls()\n     @Test\n     public void testLargeBytecode()\n     {\n-        StringBuilder stringBuilder = new StringBuilder(\"SELECT x FROM (SELECT orderkey x, custkey y from orders limit 10) WHERE CASE\");\n+        StringBuilder stringBuilder = new StringBuilder(\"SELECT x FROM (SELECT orderkey x, custkey y from orders limit 10) WHERE CASE true \");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU2NzkxMw=="}, "originalCommit": {"oid": "6e5a6d99a8d5cdcd2946419670e0abd564c9a968"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MDA5Nzk5OnYy", "diffSide": "RIGHT", "path": "presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNTowNToxMlrOGV2nOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNDoxNjo1NlrOGWGwqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU2ODA1Nw==", "bodyText": "isn't it 500 cases?", "url": "https://github.com/prestodb/presto/pull/14471#discussion_r425568057", "createdAt": "2020-05-15T05:05:12Z", "author": {"login": "rongrong"}, "path": "presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java", "diffHunk": "@@ -8336,6 +8336,19 @@ public void testInComplexTypes()\n         assertQuery(query.toString(), \"SELECT NULL\");\n     }\n \n+    @Test\n+    public void testRowExpressionInterpreterStackOverflow()\n+    {\n+        StringBuilder stringBuilder = new StringBuilder(\"SELECT  CASE\");\n+        // Generate 100 cases.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e5a6d99a8d5cdcd2946419670e0abd564c9a968"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTgzMjYxNw==", "bodyText": "Removed the comment to follow the \"no comments\" style :)", "url": "https://github.com/prestodb/presto/pull/14471#discussion_r425832617", "createdAt": "2020-05-15T14:16:56Z", "author": {"login": "kaikalur"}, "path": "presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java", "diffHunk": "@@ -8336,6 +8336,19 @@ public void testInComplexTypes()\n         assertQuery(query.toString(), \"SELECT NULL\");\n     }\n \n+    @Test\n+    public void testRowExpressionInterpreterStackOverflow()\n+    {\n+        StringBuilder stringBuilder = new StringBuilder(\"SELECT  CASE\");\n+        // Generate 100 cases.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU2ODA1Nw=="}, "originalCommit": {"oid": "6e5a6d99a8d5cdcd2946419670e0abd564c9a968"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2570, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}