{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2NDE4MDU5", "number": 14597, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzo1Njo0MVrOECkwGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwOTo0NDowM1rOEEOLVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMTM0NzQ0OnYy", "diffSide": "RIGHT", "path": "presto-common/src/main/java/com/facebook/presto/common/block/SingleMapBlock.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzo1Njo0MVrOGfHP1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzo1Njo0MVrOGfHP1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI3Nzc4MA==", "bodyText": "nit: perhaps, inline this variable", "url": "https://github.com/prestodb/presto/pull/14597#discussion_r435277780", "createdAt": "2020-06-04T13:56:41Z", "author": {"login": "mbasmanova"}, "path": "presto-common/src/main/java/com/facebook/presto/common/block/SingleMapBlock.java", "diffHunk": "@@ -352,7 +352,8 @@ public int seekKeyExact(Slice nativeValue)\n             Boolean match;\n             try {\n                 // assuming maps with indeterminate keys are not supported\n-                match = (Boolean) mapBlock.keyBlockNativeEquals.invokeExact(mapBlock.getRawKeyBlock(), offset / 2 + keyPosition, nativeValue);\n+                Block keyBlock = mapBlock.getRawKeyBlock();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e318fb2fbf844de2bf552683200cfe723e05ad0f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNjg2NTYzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/com/facebook/presto/block/AbstractTestBlock.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMDo1Nzo0N1rOGhcKyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwOTo0MDo0MlrOGhtIAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcxNzcwNA==", "bodyText": "@yingsu00 Is this code commented out on purpose?", "url": "https://github.com/prestodb/presto/pull/14597#discussion_r437717704", "createdAt": "2020-06-09T20:57:47Z", "author": {"login": "mbasmanova"}, "path": "presto-main/src/test/java/com/facebook/presto/block/AbstractTestBlock.java", "diffHunk": "@@ -72,8 +72,8 @@\n \n     protected <T> void assertBlock(Block block, Supplier<BlockBuilder> newBlockBuilder, T[] expectedValues)\n     {\n-        assertBlockSize(block);\n-        assertRetainedSize(block);\n+//        assertBlockSize(block);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96f00aa6465e74b7bf937b128175b0bb0e31d382"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk5NTUyMA==", "bodyText": "@yingsu00 Is this code commented out on purpose?\n\n@mbasmanova  Thanks for catching this. I updated the PR and made sure there are no other commented out lines.", "url": "https://github.com/prestodb/presto/pull/14597#discussion_r437995520", "createdAt": "2020-06-10T09:40:42Z", "author": {"login": "yingsu00"}, "path": "presto-main/src/test/java/com/facebook/presto/block/AbstractTestBlock.java", "diffHunk": "@@ -72,8 +72,8 @@\n \n     protected <T> void assertBlock(Block block, Supplier<BlockBuilder> newBlockBuilder, T[] expectedValues)\n     {\n-        assertBlockSize(block);\n-        assertRetainedSize(block);\n+//        assertBlockSize(block);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcxNzcwNA=="}, "originalCommit": {"oid": "96f00aa6465e74b7bf937b128175b0bb0e31d382"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyODYyMDM4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/com/facebook/presto/block/TestInt128ArrayBlock.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwOTo0NDowM1rOGhtQNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwOTo0OTowMFrOGhtcpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk5NzYyMQ==", "bodyText": "@yingsu00 Can this method be implemented as assertSlicePosition(block, internalPosition - block.getOffsetBase(), expectedSliceValue)?", "url": "https://github.com/prestodb/presto/pull/14597#discussion_r437997621", "createdAt": "2020-06-10T09:44:03Z", "author": {"login": "mbasmanova"}, "path": "presto-main/src/test/java/com/facebook/presto/block/TestInt128ArrayBlock.java", "diffHunk": "@@ -165,6 +168,36 @@ protected boolean isAlignedLongAccessSupported()\n     @Override\n     protected boolean isSliceAccessSupported()\n     {\n-        return false;\n+        return true;\n+    }\n+\n+    @Override\n+    protected void assertSlicePosition(Block block, int position, Slice expectedSliceValue)\n+    {\n+        int num128Integers = Math.min(getNum128Integers(expectedSliceValue.length()), block.getPositionCount() - position);\n+        for (int offset = 0; offset < num128Integers; offset++) {\n+            assertEquals(expectedSliceValue.length(), SIZE_OF_LONG * 2);\n+\n+            assertEquals(block.getSlice(position, offset, SIZE_OF_LONG * 2), expectedSliceValue.slice(offset, SIZE_OF_LONG * 2));\n+            assertEquals(block.getSliceLength(position), SIZE_OF_LONG * 2);\n+\n+            assertTrue(block.bytesEqual(position, offset, expectedSliceValue, 0, SIZE_OF_LONG * 2));\n+            assertFalse(block.bytesEqual(position, offset, Slices.utf8Slice(\"XXXXXXXXXXXXXXXX\"), 0, SIZE_OF_LONG * 2));\n+        }\n+    }\n+\n+    @Override\n+    protected void assertSlicePositionUnchecked(Block block, int internalPosition, Slice expectedSliceValue)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c33e30b02cd0de31c7bdee208fb770d45f8a7904"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODAwMDgwNw==", "bodyText": "@mbasmanova Oh yes. I updated the PR with it. Thanks!", "url": "https://github.com/prestodb/presto/pull/14597#discussion_r438000807", "createdAt": "2020-06-10T09:49:00Z", "author": {"login": "yingsu00"}, "path": "presto-main/src/test/java/com/facebook/presto/block/TestInt128ArrayBlock.java", "diffHunk": "@@ -165,6 +168,36 @@ protected boolean isAlignedLongAccessSupported()\n     @Override\n     protected boolean isSliceAccessSupported()\n     {\n-        return false;\n+        return true;\n+    }\n+\n+    @Override\n+    protected void assertSlicePosition(Block block, int position, Slice expectedSliceValue)\n+    {\n+        int num128Integers = Math.min(getNum128Integers(expectedSliceValue.length()), block.getPositionCount() - position);\n+        for (int offset = 0; offset < num128Integers; offset++) {\n+            assertEquals(expectedSliceValue.length(), SIZE_OF_LONG * 2);\n+\n+            assertEquals(block.getSlice(position, offset, SIZE_OF_LONG * 2), expectedSliceValue.slice(offset, SIZE_OF_LONG * 2));\n+            assertEquals(block.getSliceLength(position), SIZE_OF_LONG * 2);\n+\n+            assertTrue(block.bytesEqual(position, offset, expectedSliceValue, 0, SIZE_OF_LONG * 2));\n+            assertFalse(block.bytesEqual(position, offset, Slices.utf8Slice(\"XXXXXXXXXXXXXXXX\"), 0, SIZE_OF_LONG * 2));\n+        }\n+    }\n+\n+    @Override\n+    protected void assertSlicePositionUnchecked(Block block, int internalPosition, Slice expectedSliceValue)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk5NzYyMQ=="}, "originalCommit": {"oid": "c33e30b02cd0de31c7bdee208fb770d45f8a7904"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2707, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}