{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI4ODM1MzI2", "number": 14618, "title": "Collect file stats", "bodyText": "Collect the Partition - file stats (file name, size) from the HiveWriter to be stored in a TBD location and then later use it during scheduling to avoid the directory Listing call.\nIn this PR we are collecting the stats, tracking the blob size and then throwing it away.\ndepended by facebookexternal/presto-facebook#1084", "createdAt": "2020-06-05T23:08:56Z", "url": "https://github.com/prestodb/presto/pull/14618", "merged": true, "mergeCommit": {"oid": "8045dbe36d7d2fb48ce83303a00c4de7ee2f8478"}, "closed": true, "closedAt": "2020-07-24T05:37:05Z", "author": {"login": "NikhilCollooru"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcoycDigFqTQyNTc4MTY0Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc35y8agBqjM1ODIyNzA1OTk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NzgxNjQz", "url": "https://github.com/prestodb/presto/pull/14618#pullrequestreview-425781643", "createdAt": "2020-06-07T02:15:18Z", "commit": {"oid": "2ef45cb47aaf32a56ef01927d0ad5d83011e01fd"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QwMjoxNToxOVrOGgGswQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QwMjoyODo0NFrOGgGu_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMxNzM3Nw==", "bodyText": "We can't have string for serialization. Reusing page/block should be the right call.", "url": "https://github.com/prestodb/presto/pull/14618#discussion_r436317377", "createdAt": "2020-06-07T02:15:19Z", "author": {"login": "highker"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/FileColumnStatistics.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore;\n+\n+public class FileColumnStatistics\n+{\n+    private final int ordinal;\n+    private final String min;\n+    private final String max;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ef45cb47aaf32a56ef01927d0ad5d83011e01fd"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMxNzM4Nw==", "bodyText": "Not sure this class is actually necessary. Check my comment below.", "url": "https://github.com/prestodb/presto/pull/14618#discussion_r436317387", "createdAt": "2020-06-07T02:15:37Z", "author": {"login": "highker"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/FileColumnStatistics.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore;\n+\n+public class FileColumnStatistics", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ef45cb47aaf32a56ef01927d0ad5d83011e01fd"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMxNzQwOA==", "bodyText": "We also need to record the file size written.", "url": "https://github.com/prestodb/presto/pull/14618#discussion_r436317408", "createdAt": "2020-06-07T02:15:57Z", "author": {"login": "highker"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/FileColumnStatistics.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore;\n+\n+public class FileColumnStatistics\n+{\n+    private final int ordinal;\n+    private final String min;\n+    private final String max;\n+    private final Long rows;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ef45cb47aaf32a56ef01927d0ad5d83011e01fd"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMxNzQ1Nw==", "bodyText": "Is this used anywhere?", "url": "https://github.com/prestodb/presto/pull/14618#discussion_r436317457", "createdAt": "2020-06-07T02:16:40Z", "author": {"login": "highker"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/FileStatistics.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore;\n+\n+import java.util.List;\n+\n+public class FileStatistics", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ef45cb47aaf32a56ef01927d0ad5d83011e01fd"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMxNzk0OA==", "bodyText": "The return format should be a page (or maybe a list of pages). Or if you wanna wrap it, it is also ok. But Page is the essential part for it. That allows the coordinator to write pages into manifests in ORC format.\nHere is an example:\n\n\n\nfile_prefix\nfile_name\nfile_suffix\nrows\nbytes\ncol1_min\ncol1_max\ncol1_non_null_rows\ncol2_min\ncol2_max\ncol2_non_null_rows\n\n\n\n\nws://ws.atn5/abc/\n1\n.orc\n1000\n100030\nab\nzzzd\n900\n0\n15\n1000\n\n\nws://ws.atn5/abc/\n2\n.orc\n1200\n110040\nac\nzzf\n1100\n5\n22\n1200\n\n\nws://ws.atn5/abc/\n3\n.orc\n1100\n120050\nbf\nxwf\n1000\n19\n42\n1100\n\n\n\nEach column types should be known beforehand. Or if not, types are serializable anyway, so they can be saved as List<TypeSignature>. For example, the above stats should come with column types: {varchar, varchar, varchar, bigint, bigint, varchar, varchar, bigint, bigint, integer, integer}.\nTypes and Blocks are the core data structure for Presto. So let's try to reuse them as much as possible.", "url": "https://github.com/prestodb/presto/pull/14618#discussion_r436317948", "createdAt": "2020-06-07T02:28:44Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveFileWriter.java", "diffHunk": "@@ -25,7 +28,7 @@\n \n     void appendRows(Page dataPage);\n \n-    void commit();\n+    List<FileColumnStatistics> commit();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ef45cb47aaf32a56ef01927d0ad5d83011e01fd"}, "originalPosition": 16}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2ef45cb47aaf32a56ef01927d0ad5d83011e01fd", "author": {"user": {"login": "NikhilCollooru", "name": "Nikhil Collooru"}}, "url": "https://github.com/prestodb/presto/commit/2ef45cb47aaf32a56ef01927d0ad5d83011e01fd", "committedDate": "2020-06-05T23:02:27Z", "message": "Return FileColumnStatistics after commit"}, "afterCommit": {"oid": "c0f1d21f227ae45b73b5bb4938ab6623fdeeb35e", "author": {"user": {"login": "NikhilCollooru", "name": "Nikhil Collooru"}}, "url": "https://github.com/prestodb/presto/commit/c0f1d21f227ae45b73b5bb4938ab6623fdeeb35e", "committedDate": "2020-07-09T02:50:32Z", "message": "Collect statistics of files committed by OrcFileWriter"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MTQ2MzQx", "url": "https://github.com/prestodb/presto/pull/14618#pullrequestreview-446146341", "createdAt": "2020-07-10T06:18:24Z", "commit": {"oid": "c0f1d21f227ae45b73b5bb4938ab6623fdeeb35e"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNjoxODoyNFrOGvrJ-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNjoyNDoyOVrOGvrRiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY0MzMyMg==", "bodyText": "We need to build the types based on the types of the table columns.", "url": "https://github.com/prestodb/presto/pull/14618#discussion_r452643322", "createdAt": "2020-07-10T06:18:24Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/OrcFileWriter.java", "diffHunk": "@@ -180,6 +202,64 @@ public void commit()\n                 throw new PrestoException(HIVE_WRITE_VALIDATION_FAILED, e);\n             }\n         }\n+\n+        List<ColumnStatistics> columnStatistics = new ArrayList<>();\n+        for (ColumnStatistics columnStats : orcWriter.getFileStats()) {\n+            if (columnStats.getMin() == null) {\n+                continue;\n+            }\n+            columnStatistics.add(columnStats);\n+        }\n+\n+        List<Type> types = new ArrayList<>(Arrays.asList(VARCHAR, VARCHAR, VARCHAR, BIGINT, BIGINT));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0f1d21f227ae45b73b5bb4938ab6623fdeeb35e"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY0NDUxNA==", "bodyText": "This could be a good helper function somewhere in presto-hive-metastore", "url": "https://github.com/prestodb/presto/pull/14618#discussion_r452644514", "createdAt": "2020-07-10T06:22:17Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/OrcFileWriter.java", "diffHunk": "@@ -180,6 +202,64 @@ public void commit()\n                 throw new PrestoException(HIVE_WRITE_VALIDATION_FAILED, e);\n             }\n         }\n+\n+        List<ColumnStatistics> columnStatistics = new ArrayList<>();\n+        for (ColumnStatistics columnStats : orcWriter.getFileStats()) {\n+            if (columnStats.getMin() == null) {\n+                continue;\n+            }\n+            columnStatistics.add(columnStats);\n+        }\n+\n+        List<Type> types = new ArrayList<>(Arrays.asList(VARCHAR, VARCHAR, VARCHAR, BIGINT, BIGINT));\n+        types.addAll(columnStatistics.stream().map(ColumnStatistics::getType).flatMap(type -> ImmutableList.of(type, type, BIGINT).stream()).collect(Collectors.toList()));\n+\n+        PageBuilder statsPageBuilder = new PageBuilder(types);\n+        statsPageBuilder.declarePosition();\n+        int column = 0;\n+        VARCHAR.writeSlice(statsPageBuilder.getBlockBuilder(column++), Slices.utf8Slice(path.getParent().toString()));\n+        VARCHAR.writeSlice(statsPageBuilder.getBlockBuilder(column++), Slices.utf8Slice(path.getName()));\n+        VARCHAR.writeSlice(statsPageBuilder.getBlockBuilder(column++), Slices.utf8Slice(\".orc\"));\n+        BIGINT.writeLong(statsPageBuilder.getBlockBuilder(column++), ((Number) rowCount).longValue());\n+        BIGINT.writeLong(statsPageBuilder.getBlockBuilder(column++), ((Number) getWrittenBytes()).longValue());\n+\n+        for (ColumnStatistics statistic : columnStatistics) {\n+            Type type = types.get(column);\n+            if (BOOLEAN.equals(type)) {\n+                type.writeBoolean(statsPageBuilder.getBlockBuilder(column++), (Boolean) statistic.getMin());\n+                type.writeBoolean(statsPageBuilder.getBlockBuilder(column++), (Boolean) statistic.getMax());\n+                BIGINT.writeLong(statsPageBuilder.getBlockBuilder(column++), ((Number) statistic.getNumberOfValues()).longValue());\n+            }\n+            else if (INTEGER.equals(type)) {\n+                type.writeLong(statsPageBuilder.getBlockBuilder(column++), ((Number) statistic.getMin()).intValue());\n+                type.writeLong(statsPageBuilder.getBlockBuilder(column++), ((Number) statistic.getMax()).intValue());\n+                BIGINT.writeLong(statsPageBuilder.getBlockBuilder(column++), ((Number) statistic.getNumberOfValues()).longValue());\n+            }\n+            else if (DOUBLE.equals(type)) {\n+                type.writeDouble(statsPageBuilder.getBlockBuilder(column++), ((Number) statistic.getMin()).doubleValue());\n+                type.writeDouble(statsPageBuilder.getBlockBuilder(column++), ((Number) statistic.getMax()).doubleValue());\n+                BIGINT.writeLong(statsPageBuilder.getBlockBuilder(column++), ((Number) statistic.getNumberOfValues()).longValue());\n+            }\n+            else if (type instanceof VarcharType) {\n+                type.writeSlice(statsPageBuilder.getBlockBuilder(column++), Slices.utf8Slice((String) statistic.getMin()));\n+                type.writeSlice(statsPageBuilder.getBlockBuilder(column++), Slices.utf8Slice((String) statistic.getMax()));\n+                BIGINT.writeLong(statsPageBuilder.getBlockBuilder(column++), ((Number) statistic.getNumberOfValues()).longValue());\n+            }\n+            else if (DATE.equals(type)) {\n+                type.writeLong(statsPageBuilder.getBlockBuilder(column++), ((SqlDate) statistic.getMin()).getDays());\n+                type.writeLong(statsPageBuilder.getBlockBuilder(column++), ((SqlDate) statistic.getMax()).getDays());\n+                BIGINT.writeLong(statsPageBuilder.getBlockBuilder(column++), ((Number) statistic.getNumberOfValues()).longValue());\n+            }\n+            else if (REAL.equals(type)) {\n+                type.writeLong(statsPageBuilder.getBlockBuilder(column++), (long) floatToRawIntBits(((Number) statistic.getMin()).floatValue()));\n+                type.writeLong(statsPageBuilder.getBlockBuilder(column++), (long) floatToRawIntBits(((Number) statistic.getMax()).floatValue()));\n+                BIGINT.writeLong(statsPageBuilder.getBlockBuilder(column++), ((Number) statistic.getNumberOfValues()).longValue());\n+            }\n+            else {\n+                throw new IllegalArgumentException(\"Unsupported type \" + type);\n+            }\n+        }\n+        return Optional.of(statsPageBuilder.build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0f1d21f227ae45b73b5bb4938ab6623fdeeb35e"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY0NTI1Nw==", "bodyText": "IIRC, each commit or each HiveWriter can only create one file right? @wenleix, is that the case?", "url": "https://github.com/prestodb/presto/pull/14618#discussion_r452645257", "createdAt": "2020-07-10T06:24:29Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveWriter.java", "diffHunk": "@@ -82,10 +82,11 @@ public void append(Page dataPage)\n         inputSizeInBytes += dataPage.getSizeInBytes();\n     }\n \n-    public void commit()\n+    public Optional<Page> commit()\n     {\n-        fileWriter.commit();\n+        Optional<Page> fileStatistics = fileWriter.commit();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0f1d21f227ae45b73b5bb4938ab6623fdeeb35e"}, "originalPosition": 8}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c0f1d21f227ae45b73b5bb4938ab6623fdeeb35e", "author": {"user": {"login": "NikhilCollooru", "name": "Nikhil Collooru"}}, "url": "https://github.com/prestodb/presto/commit/c0f1d21f227ae45b73b5bb4938ab6623fdeeb35e", "committedDate": "2020-07-09T02:50:32Z", "message": "Collect statistics of files committed by OrcFileWriter"}, "afterCommit": {"oid": "06c07e8299f4f29c6c8753955350f5d508e08f67", "author": {"user": {"login": "NikhilCollooru", "name": "Nikhil Collooru"}}, "url": "https://github.com/prestodb/presto/commit/06c07e8299f4f29c6c8753955350f5d508e08f67", "committedDate": "2020-07-14T17:23:39Z", "message": "Collect statistics of files committed by OrcFileWriter"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "06c07e8299f4f29c6c8753955350f5d508e08f67", "author": {"user": {"login": "NikhilCollooru", "name": "Nikhil Collooru"}}, "url": "https://github.com/prestodb/presto/commit/06c07e8299f4f29c6c8753955350f5d508e08f67", "committedDate": "2020-07-14T17:23:39Z", "message": "Collect statistics of files committed by OrcFileWriter"}, "afterCommit": {"oid": "baa383b3fcda7cebff38926075bd71928ef3cc34", "author": {"user": {"login": "NikhilCollooru", "name": "Nikhil Collooru"}}, "url": "https://github.com/prestodb/presto/commit/baa383b3fcda7cebff38926075bd71928ef3cc34", "committedDate": "2020-07-16T04:36:32Z", "message": "Collect statistics of files committed by OrcFileWriter"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "baa383b3fcda7cebff38926075bd71928ef3cc34", "author": {"user": {"login": "NikhilCollooru", "name": "Nikhil Collooru"}}, "url": "https://github.com/prestodb/presto/commit/baa383b3fcda7cebff38926075bd71928ef3cc34", "committedDate": "2020-07-16T04:36:32Z", "message": "Collect statistics of files committed by OrcFileWriter"}, "afterCommit": {"oid": "3a5a6f81de57b422437be17750ac5b96c403b810", "author": {"user": {"login": "NikhilCollooru", "name": "Nikhil Collooru"}}, "url": "https://github.com/prestodb/presto/commit/3a5a6f81de57b422437be17750ac5b96c403b810", "committedDate": "2020-07-16T04:49:07Z", "message": "Collect statistics of files committed by OrcFileWriter"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxMDIyNDU5", "url": "https://github.com/prestodb/presto/pull/14618#pullrequestreview-451022459", "createdAt": "2020-07-18T02:02:03Z", "commit": {"oid": "3a5a6f81de57b422437be17750ac5b96c403b810"}, "state": "COMMENTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQwMjowMjowM1rOGzk7OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQwNTo0Mjo1M1rOGzmAFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjczNTU0NQ==", "bodyText": "need to export to jmx as well", "url": "https://github.com/prestodb/presto/pull/14618#discussion_r456735545", "createdAt": "2020-07-18T02:02:03Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveClientModule.java", "diffHunk": "@@ -128,6 +128,7 @@ public void configure(Binder binder)\n         binder.bind(HivePartitionManager.class).in(Scopes.SINGLETON);\n         binder.bind(LocationService.class).to(HiveLocationService.class).in(Scopes.SINGLETON);\n         binder.bind(TableParameterCodec.class).in(Scopes.SINGLETON);\n+        binder.bind(HivePartitionStats.class).in(Scopes.SINGLETON);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a5a6f81de57b422437be17750ac5b96c403b810"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc1MTYwOQ==", "bodyText": "Make this into a util class outside of this class", "url": "https://github.com/prestodb/presto/pull/14618#discussion_r456751609", "createdAt": "2020-07-18T05:22:23Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/OrcFileWriter.java", "diffHunk": "@@ -211,4 +218,18 @@ public String toString()\n                 .add(\"writer\", orcWriter)\n                 .toString();\n     }\n+\n+    private Page getOrcFileStatistics()\n+    {\n+        // OrcFileStatistics page layout:\n+        //\n+        // fileSize   rowCount\n+        //  X             X\n+        PageBuilder statsPageBuilder = new PageBuilder(Arrays.asList(BIGINT, BIGINT));\n+        statsPageBuilder.declarePosition();\n+        BIGINT.writeLong(statsPageBuilder.getBlockBuilder(0), ((Number) getWrittenBytes()).longValue());\n+        BIGINT.writeLong(statsPageBuilder.getBlockBuilder(1), ((Number) rowCount).longValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a5a6f81de57b422437be17750ac5b96c403b810"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc1MTY5Mw==", "bodyText": "use Immutablelist", "url": "https://github.com/prestodb/presto/pull/14618#discussion_r456751693", "createdAt": "2020-07-18T05:23:45Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/OrcFileWriter.java", "diffHunk": "@@ -211,4 +218,18 @@ public String toString()\n                 .add(\"writer\", orcWriter)\n                 .toString();\n     }\n+\n+    private Page getOrcFileStatistics()\n+    {\n+        // OrcFileStatistics page layout:\n+        //\n+        // fileSize   rowCount\n+        //  X             X\n+        PageBuilder statsPageBuilder = new PageBuilder(Arrays.asList(BIGINT, BIGINT));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a5a6f81de57b422437be17750ac5b96c403b810"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc1MTgzOA==", "bodyText": "no need to cast to Number then use longValue(). The return type of getWrittenBytes() is already long. Same for the one below.", "url": "https://github.com/prestodb/presto/pull/14618#discussion_r456751838", "createdAt": "2020-07-18T05:25:27Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/OrcFileWriter.java", "diffHunk": "@@ -211,4 +218,18 @@ public String toString()\n                 .add(\"writer\", orcWriter)\n                 .toString();\n     }\n+\n+    private Page getOrcFileStatistics()\n+    {\n+        // OrcFileStatistics page layout:\n+        //\n+        // fileSize   rowCount\n+        //  X             X\n+        PageBuilder statsPageBuilder = new PageBuilder(Arrays.asList(BIGINT, BIGINT));\n+        statsPageBuilder.declarePosition();\n+        BIGINT.writeLong(statsPageBuilder.getBlockBuilder(0), ((Number) getWrittenBytes()).longValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a5a6f81de57b422437be17750ac5b96c403b810"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc1MTk4NQ==", "bodyText": "need initialization = Optional.empty()", "url": "https://github.com/prestodb/presto/pull/14618#discussion_r456751985", "createdAt": "2020-07-18T05:27:54Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveWriter.java", "diffHunk": "@@ -37,6 +39,7 @@\n \n     private long rowCount;\n     private long inputSizeInBytes;\n+    private Optional<Page> fileStatistics;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a5a6f81de57b422437be17750ac5b96c403b810"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc1MjAxMg==", "bodyText": "remove", "url": "https://github.com/prestodb/presto/pull/14618#discussion_r456752012", "createdAt": "2020-07-18T05:28:19Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveWriter.java", "diffHunk": "@@ -84,8 +87,9 @@ public void append(Page dataPage)\n \n     public void commit()\n     {\n-        fileWriter.commit();\n+        fileStatistics = fileWriter.commit();\n         onCommit.accept(this);\n+        return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a5a6f81de57b422437be17750ac5b96c403b810"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc1MjA3Ng==", "bodyText": "Move this to the same util class. We need a central place to encode and decode states info from/to pages", "url": "https://github.com/prestodb/presto/pull/14618#discussion_r456752076", "createdAt": "2020-07-18T05:29:12Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveWriter.java", "diffHunk": "@@ -110,12 +114,27 @@ public PartitionUpdate getPartitionUpdate()\n                 updateMode,\n                 writePath,\n                 targetPath,\n-                ImmutableList.of(fileWriteInfo),\n+                ImmutableList.of(new FileWriteInfo(fileWriteInfo.getWriteFileName(), fileWriteInfo.getTargetFileName(), getFileSize())),\n                 rowCount,\n                 inputSizeInBytes,\n                 fileWriter.getWrittenBytes());\n     }\n \n+    private Optional<Long> getFileSize()\n+    {\n+        if (fileStatistics.isPresent()) {\n+            // FileStatistics page layout:\n+            //\n+            // fileSize   rowCount\n+            //  X             X\n+\n+            Block fileSizeBlock = fileStatistics.get().getBlock(0);\n+            return Optional.of(BIGINT.getLong(fileSizeBlock, 0));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a5a6f81de57b422437be17750ac5b96c403b810"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc1MjE4OA==", "bodyText": "assert fileStatistics has exact two columns and one row", "url": "https://github.com/prestodb/presto/pull/14618#discussion_r456752188", "createdAt": "2020-07-18T05:30:12Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveWriter.java", "diffHunk": "@@ -110,12 +114,27 @@ public PartitionUpdate getPartitionUpdate()\n                 updateMode,\n                 writePath,\n                 targetPath,\n-                ImmutableList.of(fileWriteInfo),\n+                ImmutableList.of(new FileWriteInfo(fileWriteInfo.getWriteFileName(), fileWriteInfo.getTargetFileName(), getFileSize())),\n                 rowCount,\n                 inputSizeInBytes,\n                 fileWriter.getWrittenBytes());\n     }\n \n+    private Optional<Long> getFileSize()\n+    {\n+        if (fileStatistics.isPresent()) {\n+            // FileStatistics page layout:\n+            //\n+            // fileSize   rowCount\n+            //  X             X\n+\n+            Block fileSizeBlock = fileStatistics.get().getBlock(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a5a6f81de57b422437be17750ac5b96c403b810"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc1Mjc0OA==", "bodyText": "Can we have unittests to make sure the stats match the actual file written? A good place is AbstractTestHiveFileFormats.createTestFile. Just commit the file, get stats, and assert the file size is the same as the one recorded.", "url": "https://github.com/prestodb/presto/pull/14618#discussion_r456752748", "createdAt": "2020-07-18T05:37:24Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/OrcFileWriter.java", "diffHunk": "@@ -146,14 +150,15 @@ public void appendRows(Page dataPage)\n         Page page = new Page(dataPage.getPositionCount(), blocks);\n         try {\n             orcWriter.write(page);\n+            rowCount += page.getPositionCount();\n         }\n         catch (IOException | UncheckedIOException e) {\n             throw new PrestoException(HIVE_WRITER_DATA_ERROR, e);\n         }\n     }\n \n     @Override\n-    public void commit()\n+    public Optional<Page> commit()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a5a6f81de57b422437be17750ac5b96c403b810"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc1MjgwNA==", "bodyText": "Put into the same util class", "url": "https://github.com/prestodb/presto/pull/14618#discussion_r456752804", "createdAt": "2020-07-18T05:38:16Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -1869,6 +1882,30 @@ else if (partitionUpdate.getUpdateMode() == NEW || partitionUpdate.getUpdateMode\n                         .collect(Collectors.toList())));\n     }\n \n+    private Optional<Page> getPartitionManifest(PartitionUpdate partitionUpdate)\n+    {\n+        // Manifest Page layout:\n+        //   fileName    fileSize\n+        //      X           X\n+        //      X           X\n+        //      X           X\n+        // ....\n+        PageBuilder manifestBuilder = new PageBuilder(Arrays.asList(VARBINARY, BIGINT));\n+        BlockBuilder fileNameBuilder = manifestBuilder.getBlockBuilder(0);\n+        BlockBuilder fileSizeBuilder = manifestBuilder.getBlockBuilder(1);\n+        for (FileWriteInfo fileWriteInfo : partitionUpdate.getFileWriteInfos()) {\n+            if (fileWriteInfo.getFileSize().isPresent()) {\n+                manifestBuilder.declarePosition();\n+                VARBINARY.writeSlice(fileNameBuilder, utf8Slice(fileWriteInfo.getWriteFileName()));\n+                BIGINT.writeLong(fileSizeBuilder, fileWriteInfo.getFileSize().get());\n+            }\n+            else {\n+                return Optional.empty();\n+            }\n+        }\n+        return Optional.of(manifestBuilder.build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a5a6f81de57b422437be17750ac5b96c403b810"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc1Mjg2NQ==", "bodyText": "this should be VARCHAR", "url": "https://github.com/prestodb/presto/pull/14618#discussion_r456752865", "createdAt": "2020-07-18T05:39:10Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -1869,6 +1882,30 @@ else if (partitionUpdate.getUpdateMode() == NEW || partitionUpdate.getUpdateMode\n                         .collect(Collectors.toList())));\n     }\n \n+    private Optional<Page> getPartitionManifest(PartitionUpdate partitionUpdate)\n+    {\n+        // Manifest Page layout:\n+        //   fileName    fileSize\n+        //      X           X\n+        //      X           X\n+        //      X           X\n+        // ....\n+        PageBuilder manifestBuilder = new PageBuilder(Arrays.asList(VARBINARY, BIGINT));\n+        BlockBuilder fileNameBuilder = manifestBuilder.getBlockBuilder(0);\n+        BlockBuilder fileSizeBuilder = manifestBuilder.getBlockBuilder(1);\n+        for (FileWriteInfo fileWriteInfo : partitionUpdate.getFileWriteInfos()) {\n+            if (fileWriteInfo.getFileSize().isPresent()) {\n+                manifestBuilder.declarePosition();\n+                VARBINARY.writeSlice(fileNameBuilder, utf8Slice(fileWriteInfo.getWriteFileName()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a5a6f81de57b422437be17750ac5b96c403b810"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc1MzE3NA==", "bodyText": "Add a TODO. We need to put the blob into partition parameters.", "url": "https://github.com/prestodb/presto/pull/14618#discussion_r456753174", "createdAt": "2020-07-18T05:42:53Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -1832,6 +1840,11 @@ else if (partitionUpdate.getUpdateMode() == NEW || partitionUpdate.getUpdateMode\n                 Map<String, String> extraPartitionMetadata = handle.getEncryptionInformation()\n                         .map(encryptionInfo -> encryptionInfo.getDwrfEncryptionMetadata().map(DwrfEncryptionMetadata::getExtraMetadata).orElseGet(ImmutableMap::of))\n                         .orElseGet(ImmutableMap::of);\n+\n+                // Track the manifest blob size\n+                Optional<Page> manifestBlob = getPartitionManifest(partitionUpdate);\n+                manifestBlob.ifPresent(manifest -> hivePartitionStats.addManifestSizeInBytes(manifest.getSizeInBytes()));\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a5a6f81de57b422437be17750ac5b96c403b810"}, "originalPosition": 80}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3a5a6f81de57b422437be17750ac5b96c403b810", "author": {"user": {"login": "NikhilCollooru", "name": "Nikhil Collooru"}}, "url": "https://github.com/prestodb/presto/commit/3a5a6f81de57b422437be17750ac5b96c403b810", "committedDate": "2020-07-16T04:49:07Z", "message": "Collect statistics of files committed by OrcFileWriter"}, "afterCommit": {"oid": "7807e501d376af4ced2a03a39a49062a072d0f34", "author": {"user": {"login": "NikhilCollooru", "name": "Nikhil Collooru"}}, "url": "https://github.com/prestodb/presto/commit/7807e501d376af4ced2a03a39a49062a072d0f34", "committedDate": "2020-07-19T23:47:23Z", "message": "Collect statistics of files committed by OrcFileWriter"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7807e501d376af4ced2a03a39a49062a072d0f34", "author": {"user": {"login": "NikhilCollooru", "name": "Nikhil Collooru"}}, "url": "https://github.com/prestodb/presto/commit/7807e501d376af4ced2a03a39a49062a072d0f34", "committedDate": "2020-07-19T23:47:23Z", "message": "Collect statistics of files committed by OrcFileWriter"}, "afterCommit": {"oid": "69feafde9512c7977487ca76855c4bd28459e90c", "author": {"user": {"login": "NikhilCollooru", "name": "Nikhil Collooru"}}, "url": "https://github.com/prestodb/presto/commit/69feafde9512c7977487ca76855c4bd28459e90c", "committedDate": "2020-07-21T19:23:07Z", "message": "Collect statistics of files committed by OrcFileWriter"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzNjU5Njgz", "url": "https://github.com/prestodb/presto/pull/14618#pullrequestreview-453659683", "createdAt": "2020-07-22T20:28:06Z", "commit": {"oid": "69feafde9512c7977487ca76855c4bd28459e90c"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMDoyODowNlrOG1y_pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMDozNjoxMlrOG1zQMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA2MzIwNA==", "bodyText": "Remove this class. Just create a new entry in HiveErrorCode", "url": "https://github.com/prestodb/presto/pull/14618#discussion_r459063204", "createdAt": "2020-07-22T20:28:06Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveInvalidFileStatisticsException.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import static java.lang.String.format;\n+\n+public class HiveInvalidFileStatisticsException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69feafde9512c7977487ca76855c4bd28459e90c"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA2NTE1Mw==", "bodyText": "The input doesn't have to be optional. If the user use optional, then it is expected to have empty return.\nUse getFileSize(Page statisticsPage, int position). Check our Page interface. position is very important as users can pass a large page (with many rows) and just get the one wanted.", "url": "https://github.com/prestodb/presto/pull/14618#discussion_r459065153", "createdAt": "2020-07-22T20:31:49Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveManifestUtils.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.common.PageBuilder;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.Optional;\n+\n+import static com.facebook.presto.common.type.BigintType.BIGINT;\n+import static com.facebook.presto.common.type.VarcharType.VARCHAR;\n+import static com.facebook.presto.hive.PartitionUpdate.FileWriteInfo;\n+import static io.airlift.slice.Slices.utf8Slice;\n+\n+public class HiveManifestUtils\n+{\n+    private HiveManifestUtils()\n+    {\n+    }\n+\n+    public static Page createFileStatisticsPage(long fileSize, long rowCount)\n+    {\n+        // FileStatistics page layout:\n+        //\n+        // fileSize   rowCount\n+        //  X             X\n+        PageBuilder statsPageBuilder = new PageBuilder(ImmutableList.of(BIGINT, BIGINT));\n+        statsPageBuilder.declarePosition();\n+        BIGINT.writeLong(statsPageBuilder.getBlockBuilder(0), fileSize);\n+        BIGINT.writeLong(statsPageBuilder.getBlockBuilder(1), rowCount);\n+\n+        return statsPageBuilder.build();\n+    }\n+\n+    public static Optional<Long> getFileSize(Optional<Page> statisticsPage)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69feafde9512c7977487ca76855c4bd28459e90c"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA2NTY1OQ==", "bodyText": "nit:\nif (!fileWriteInfo.getFileSize().isPresent()) {\n    return Optional.empty();\n}\n\n...", "url": "https://github.com/prestodb/presto/pull/14618#discussion_r459065659", "createdAt": "2020-07-22T20:32:47Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveManifestUtils.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.common.PageBuilder;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.Optional;\n+\n+import static com.facebook.presto.common.type.BigintType.BIGINT;\n+import static com.facebook.presto.common.type.VarcharType.VARCHAR;\n+import static com.facebook.presto.hive.PartitionUpdate.FileWriteInfo;\n+import static io.airlift.slice.Slices.utf8Slice;\n+\n+public class HiveManifestUtils\n+{\n+    private HiveManifestUtils()\n+    {\n+    }\n+\n+    public static Page createFileStatisticsPage(long fileSize, long rowCount)\n+    {\n+        // FileStatistics page layout:\n+        //\n+        // fileSize   rowCount\n+        //  X             X\n+        PageBuilder statsPageBuilder = new PageBuilder(ImmutableList.of(BIGINT, BIGINT));\n+        statsPageBuilder.declarePosition();\n+        BIGINT.writeLong(statsPageBuilder.getBlockBuilder(0), fileSize);\n+        BIGINT.writeLong(statsPageBuilder.getBlockBuilder(1), rowCount);\n+\n+        return statsPageBuilder.build();\n+    }\n+\n+    public static Optional<Long> getFileSize(Optional<Page> statisticsPage)\n+    {\n+        if (statisticsPage.isPresent()) {\n+            // FileStatistics page layout:\n+            //\n+            // fileSize   rowCount\n+            //  X             X\n+\n+            Page fileStatistics = statisticsPage.get();\n+            if (fileStatistics.getPositionCount() != 1 || fileStatistics.getChannelCount() != 2) {\n+                throw new HiveInvalidFileStatisticsException(fileStatistics.getPositionCount(), fileStatistics.getChannelCount());\n+            }\n+            return Optional.of(BIGINT.getLong(fileStatistics.getBlock(0), 0));\n+        }\n+\n+        return Optional.empty();\n+    }\n+\n+    public static Optional<Page> createPartitionManifest(PartitionUpdate partitionUpdate)\n+    {\n+        // Manifest Page layout:\n+        //   fileName    fileSize\n+        //      X           X\n+        //      X           X\n+        //      X           X\n+        // ....\n+        PageBuilder manifestBuilder = new PageBuilder(ImmutableList.of(VARCHAR, BIGINT));\n+        BlockBuilder fileNameBuilder = manifestBuilder.getBlockBuilder(0);\n+        BlockBuilder fileSizeBuilder = manifestBuilder.getBlockBuilder(1);\n+        for (FileWriteInfo fileWriteInfo : partitionUpdate.getFileWriteInfos()) {\n+            if (fileWriteInfo.getFileSize().isPresent()) {\n+                manifestBuilder.declarePosition();\n+                VARCHAR.writeSlice(fileNameBuilder, utf8Slice(fileWriteInfo.getWriteFileName()));\n+                BIGINT.writeLong(fileSizeBuilder, fileWriteInfo.getFileSize().get());\n+            }\n+            else {\n+                return Optional.empty();\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69feafde9512c7977487ca76855c4bd28459e90c"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA2NjQ2OA==", "bodyText": "Just throw", "url": "https://github.com/prestodb/presto/pull/14618#discussion_r459066468", "createdAt": "2020-07-22T20:34:29Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveWriter.java", "diffHunk": "@@ -105,12 +110,21 @@ public void rollback()\n \n     public PartitionUpdate getPartitionUpdate()\n     {\n+        Optional<Long> fileSize;\n+        try {\n+            fileSize = getFileSize(fileStatistics);\n+        }\n+        catch (HiveInvalidFileStatisticsException e) {\n+            fileSize = Optional.empty();\n+            log.error(e);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69feafde9512c7977487ca76855c4bd28459e90c"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA2NjUwNw==", "bodyText": "remove", "url": "https://github.com/prestodb/presto/pull/14618#discussion_r459066507", "createdAt": "2020-07-22T20:34:33Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveWriter.java", "diffHunk": "@@ -21,11 +22,14 @@\n import java.util.Optional;\n import java.util.function.Consumer;\n \n+import static com.facebook.presto.hive.HiveManifestUtils.getFileSize;\n import static com.google.common.base.MoreObjects.toStringHelper;\n import static java.util.Objects.requireNonNull;\n \n public class HiveWriter\n {\n+    private static final Logger log = Logger.get(HiveWriter.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69feafde9512c7977487ca76855c4bd28459e90c"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA2NzEwNw==", "bodyText": "It should alway present if it's an ORC file", "url": "https://github.com/prestodb/presto/pull/14618#discussion_r459067107", "createdAt": "2020-07-22T20:35:38Z", "author": {"login": "highker"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveFileFormats.java", "diffHunk": "@@ -543,11 +544,23 @@ public static FileSplit createTestFile(\n \n         HiveFileWriter hiveFileWriter = fileWriter.orElseThrow(() -> new IllegalArgumentException(\"fileWriterFactory\"));\n         hiveFileWriter.appendRows(page);\n-        hiveFileWriter.commit();\n+        Optional<Page> fileStatistics = hiveFileWriter.commit();\n+\n+        assertFileStatistics(fileStatistics, hiveFileWriter.getWrittenBytes());\n \n         return new FileSplit(new Path(filePath), 0, new File(filePath).length(), new String[0]);\n     }\n \n+    private static void assertFileStatistics(Optional<Page> fileStatistics, long writtenBytes)\n+    {\n+        if (fileStatistics.isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69feafde9512c7977487ca76855c4bd28459e90c"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA2NzQ0MQ==", "bodyText": "make them final\ncapitalize all letters with underscores.", "url": "https://github.com/prestodb/presto/pull/14618#discussion_r459067441", "createdAt": "2020-07-22T20:36:12Z", "author": {"login": "highker"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveManifestUtils.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.common.PageBuilder;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.StandardTypes;\n+import com.facebook.presto.common.type.Type;\n+import com.google.common.collect.ImmutableList;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.common.type.BigintType.BIGINT;\n+import static com.facebook.presto.common.type.StandardTypes.BOOLEAN;\n+import static com.facebook.presto.common.type.StandardTypes.DOUBLE;\n+import static com.facebook.presto.common.type.StandardTypes.VARCHAR;\n+import static com.facebook.presto.hive.HiveManifestUtils.createFileStatisticsPage;\n+import static com.facebook.presto.hive.HiveManifestUtils.createPartitionManifest;\n+import static com.facebook.presto.hive.HiveManifestUtils.getFileSize;\n+import static com.facebook.presto.hive.PartitionUpdate.FileWriteInfo;\n+import static com.facebook.presto.hive.PartitionUpdate.UpdateMode.NEW;\n+import static io.airlift.slice.Slices.utf8Slice;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertTrue;\n+\n+public class TestHiveManifestUtils\n+{\n+    private static long fileSize = 1024;\n+    private static long rowCount = 100;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69feafde9512c7977487ca76855c4bd28459e90c"}, "originalPosition": 43}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "69feafde9512c7977487ca76855c4bd28459e90c", "author": {"user": {"login": "NikhilCollooru", "name": "Nikhil Collooru"}}, "url": "https://github.com/prestodb/presto/commit/69feafde9512c7977487ca76855c4bd28459e90c", "committedDate": "2020-07-21T19:23:07Z", "message": "Collect statistics of files committed by OrcFileWriter"}, "afterCommit": {"oid": "9622bb945dd606ff933b00e3a48a2b01151d3a2b", "author": {"user": {"login": "NikhilCollooru", "name": "Nikhil Collooru"}}, "url": "https://github.com/prestodb/presto/commit/9622bb945dd606ff933b00e3a48a2b01151d3a2b", "committedDate": "2020-07-22T22:33:26Z", "message": "Collect statistics of files committed by OrcFileWriter"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9622bb945dd606ff933b00e3a48a2b01151d3a2b", "author": {"user": {"login": "NikhilCollooru", "name": "Nikhil Collooru"}}, "url": "https://github.com/prestodb/presto/commit/9622bb945dd606ff933b00e3a48a2b01151d3a2b", "committedDate": "2020-07-22T22:33:26Z", "message": "Collect statistics of files committed by OrcFileWriter"}, "afterCommit": {"oid": "05df5ce5c24d1bbb573519c6098884351ebb9241", "author": {"user": {"login": "NikhilCollooru", "name": "Nikhil Collooru"}}, "url": "https://github.com/prestodb/presto/commit/05df5ce5c24d1bbb573519c6098884351ebb9241", "committedDate": "2020-07-22T23:12:47Z", "message": "Collect statistics of files committed by OrcFileWriter"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NTg0MTAy", "url": "https://github.com/prestodb/presto/pull/14618#pullrequestreview-454584102", "createdAt": "2020-07-24T00:51:46Z", "commit": {"oid": "05df5ce5c24d1bbb573519c6098884351ebb9241"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwMDo1MTo0NlrOG2gOog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwMTowNjowN1rOG2gbcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgwNDMyMg==", "bodyText": "MALFORMED_HIVE_FILE_STATISTICS", "url": "https://github.com/prestodb/presto/pull/14618#discussion_r459804322", "createdAt": "2020-07-24T00:51:46Z", "author": {"login": "highker"}, "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/HiveErrorCode.java", "diffHunk": "@@ -69,6 +69,7 @@\n     // To be used for metadata inconsistencies and not for incorrect input from users\n     HIVE_INVALID_ENCRYPTION_METADATA(42, EXTERNAL),\n     HIVE_UNSUPPORTED_ENCRYPTION_OPERATION(43, USER_ERROR),\n+    HIVE_INVALID_FILE_STATISTICS_POSITION(44, INTERNAL_ERROR),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05df5ce5c24d1bbb573519c6098884351ebb9241"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgwNzAyMw==", "bodyText": "Make 0 and 1 two constants: FILE_SIZE_CHANNEL and ROW_COUNT_CHANNEL", "url": "https://github.com/prestodb/presto/pull/14618#discussion_r459807023", "createdAt": "2020-07-24T01:03:43Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveManifestUtils.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.common.PageBuilder;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.spi.PrestoException;\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.Optional;\n+\n+import static com.facebook.presto.common.type.BigintType.BIGINT;\n+import static com.facebook.presto.common.type.VarcharType.VARCHAR;\n+import static com.facebook.presto.hive.HiveErrorCode.HIVE_INVALID_FILE_STATISTICS_POSITION;\n+import static com.facebook.presto.hive.PartitionUpdate.FileWriteInfo;\n+import static io.airlift.slice.Slices.utf8Slice;\n+import static java.lang.String.format;\n+\n+public class HiveManifestUtils\n+{\n+    private HiveManifestUtils()\n+    {\n+    }\n+\n+    public static Page createFileStatisticsPage(long fileSize, long rowCount)\n+    {\n+        // FileStatistics page layout:\n+        //\n+        // fileSize   rowCount\n+        //  X             X\n+        PageBuilder statsPageBuilder = new PageBuilder(ImmutableList.of(BIGINT, BIGINT));\n+        statsPageBuilder.declarePosition();\n+        BIGINT.writeLong(statsPageBuilder.getBlockBuilder(0), fileSize);\n+        BIGINT.writeLong(statsPageBuilder.getBlockBuilder(1), rowCount);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05df5ce5c24d1bbb573519c6098884351ebb9241"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgwNzE0NQ==", "bodyText": "getRetainedSizeInBytes", "url": "https://github.com/prestodb/presto/pull/14618#discussion_r459807145", "createdAt": "2020-07-24T01:04:15Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -1836,6 +1841,12 @@ else if (partitionUpdate.getUpdateMode() == NEW || partitionUpdate.getUpdateMode\n                 Map<String, String> extraPartitionMetadata = handle.getEncryptionInformation()\n                         .map(encryptionInfo -> encryptionInfo.getDwrfEncryptionMetadata().map(DwrfEncryptionMetadata::getExtraMetadata).orElseGet(ImmutableMap::of))\n                         .orElseGet(ImmutableMap::of);\n+\n+                // TODO: Put the manifest blob in partition parameters\n+                // Track the manifest blob size\n+                Optional<Page> manifestBlob = createPartitionManifest(partitionUpdate);\n+                manifestBlob.ifPresent(manifest -> hivePartitionStats.addManifestSizeInBytes(manifest.getSizeInBytes()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05df5ce5c24d1bbb573519c6098884351ebb9241"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgwNzYwMA==", "bodyText": "and DWRF", "url": "https://github.com/prestodb/presto/pull/14618#discussion_r459807600", "createdAt": "2020-07-24T01:06:07Z", "author": {"login": "highker"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveFileFormats.java", "diffHunk": "@@ -543,11 +545,23 @@ public static FileSplit createTestFile(\n \n         HiveFileWriter hiveFileWriter = fileWriter.orElseThrow(() -> new IllegalArgumentException(\"fileWriterFactory\"));\n         hiveFileWriter.appendRows(page);\n-        hiveFileWriter.commit();\n+        Optional<Page> fileStatistics = hiveFileWriter.commit();\n+\n+        assertFileStatistics(fileStatistics, hiveFileWriter.getWrittenBytes(), storageFormat);\n \n         return new FileSplit(new Path(filePath), 0, new File(filePath).length(), new String[0]);\n     }\n \n+    private static void assertFileStatistics(Optional<Page> fileStatistics, long writtenBytes, HiveStorageFormat storageFormat)\n+    {\n+        if (storageFormat == ORC) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05df5ce5c24d1bbb573519c6098884351ebb9241"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d82211163485ddfc66b90da8f8857a9474ff534b", "author": {"user": {"login": "NikhilCollooru", "name": "Nikhil Collooru"}}, "url": "https://github.com/prestodb/presto/commit/d82211163485ddfc66b90da8f8857a9474ff534b", "committedDate": "2020-07-24T01:23:13Z", "message": "Collect statistics of files committed by OrcFileWriter"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "05df5ce5c24d1bbb573519c6098884351ebb9241", "author": {"user": {"login": "NikhilCollooru", "name": "Nikhil Collooru"}}, "url": "https://github.com/prestodb/presto/commit/05df5ce5c24d1bbb573519c6098884351ebb9241", "committedDate": "2020-07-22T23:12:47Z", "message": "Collect statistics of files committed by OrcFileWriter"}, "afterCommit": {"oid": "d82211163485ddfc66b90da8f8857a9474ff534b", "author": {"user": {"login": "NikhilCollooru", "name": "Nikhil Collooru"}}, "url": "https://github.com/prestodb/presto/commit/d82211163485ddfc66b90da8f8857a9474ff534b", "committedDate": "2020-07-24T01:23:13Z", "message": "Collect statistics of files committed by OrcFileWriter"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1307, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}