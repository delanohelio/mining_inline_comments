{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc4MjU1MjYy", "number": 15114, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNTo1MzoyOVrOEh9gbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNjozMTo0NlrOEjOKEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MDQ2MTg4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/ClusterSizeMonitor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNTo1MzoyOVrOHPkFhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxOTo1ODowNFrOHQDozA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA4MTkyNg==", "bodyText": "requireNonNull for queryManager, any reason not doing it here?", "url": "https://github.com/prestodb/presto/pull/15114#discussion_r486081926", "createdAt": "2020-09-10T05:53:29Z", "author": {"login": "swapsmagic"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/ClusterSizeMonitor.java", "diffHunk": "@@ -66,20 +73,27 @@ public ClusterSizeMonitor(InternalNodeManager nodeManager, NodeSchedulerConfig n\n                 nodeManager,\n                 requireNonNull(nodeSchedulerConfig, \"nodeSchedulerConfig is null\").isIncludeCoordinator(),\n                 requireNonNull(queryManagerConfig, \"queryManagerConfig is null\").getRequiredWorkers(),\n-                queryManagerConfig.getRequiredWorkersMaxWait());\n+                queryManagerConfig.getRequiredWorkersMaxWait(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a980859f6a49d2add84ca9427e3d59e60c8a8178"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU5ODg2MA==", "bodyText": "We do it above.  Can remove the check below.", "url": "https://github.com/prestodb/presto/pull/15114#discussion_r486598860", "createdAt": "2020-09-10T19:58:04Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/ClusterSizeMonitor.java", "diffHunk": "@@ -66,20 +73,27 @@ public ClusterSizeMonitor(InternalNodeManager nodeManager, NodeSchedulerConfig n\n                 nodeManager,\n                 requireNonNull(nodeSchedulerConfig, \"nodeSchedulerConfig is null\").isIncludeCoordinator(),\n                 requireNonNull(queryManagerConfig, \"queryManagerConfig is null\").getRequiredWorkers(),\n-                queryManagerConfig.getRequiredWorkersMaxWait());\n+                queryManagerConfig.getRequiredWorkersMaxWait(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA4MTkyNg=="}, "originalCommit": {"oid": "a980859f6a49d2add84ca9427e3d59e60c8a8178"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MDQ2Mjk3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/ClusterSizeMonitor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNTo1NDowNVrOHPkGLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNTo1NDowNVrOHPkGLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA4MjA5Mw==", "bodyText": "ditto", "url": "https://github.com/prestodb/presto/pull/15114#discussion_r486082093", "createdAt": "2020-09-10T05:54:05Z", "author": {"login": "swapsmagic"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/ClusterSizeMonitor.java", "diffHunk": "@@ -66,20 +73,27 @@ public ClusterSizeMonitor(InternalNodeManager nodeManager, NodeSchedulerConfig n\n                 nodeManager,\n                 requireNonNull(nodeSchedulerConfig, \"nodeSchedulerConfig is null\").isIncludeCoordinator(),\n                 requireNonNull(queryManagerConfig, \"queryManagerConfig is null\").getRequiredWorkers(),\n-                queryManagerConfig.getRequiredWorkersMaxWait());\n+                queryManagerConfig.getRequiredWorkersMaxWait(),\n+                requireNonNull(queryManagerConfig, \"queryManagerConfig is null\").getRequiredCoordinators(),\n+                queryManagerConfig.getRequiredCoordinatorsMaxWait());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a980859f6a49d2add84ca9427e3d59e60c8a8178"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MDQ2NzIyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/ClusterSizeMonitor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNTo1NjowNVrOHPkIyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMzo1Nzo1OVrOHQJmxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA4Mjc2MQ==", "bodyText": "coordinatorMaxWait seems a reasonable name here and also aligns with other arguments.", "url": "https://github.com/prestodb/presto/pull/15114#discussion_r486082761", "createdAt": "2020-09-10T05:56:05Z", "author": {"login": "swapsmagic"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/ClusterSizeMonitor.java", "diffHunk": "@@ -66,20 +73,27 @@ public ClusterSizeMonitor(InternalNodeManager nodeManager, NodeSchedulerConfig n\n                 nodeManager,\n                 requireNonNull(nodeSchedulerConfig, \"nodeSchedulerConfig is null\").isIncludeCoordinator(),\n                 requireNonNull(queryManagerConfig, \"queryManagerConfig is null\").getRequiredWorkers(),\n-                queryManagerConfig.getRequiredWorkersMaxWait());\n+                queryManagerConfig.getRequiredWorkersMaxWait(),\n+                requireNonNull(queryManagerConfig, \"queryManagerConfig is null\").getRequiredCoordinators(),\n+                queryManagerConfig.getRequiredCoordinatorsMaxWait());\n     }\n \n     public ClusterSizeMonitor(\n             InternalNodeManager nodeManager,\n             boolean includeCoordinator,\n             int executionMinCount,\n-            Duration executionMaxWait)\n+            Duration executionMaxWait,\n+            int minCoordinatorCount,\n+            Duration maxCoordinatorWait)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a980859f6a49d2add84ca9427e3d59e60c8a8178"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY5NjY0NA==", "bodyText": "The inverted wording of the original annoyed me, but I can make them consistent.", "url": "https://github.com/prestodb/presto/pull/15114#discussion_r486696644", "createdAt": "2020-09-10T23:57:59Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/ClusterSizeMonitor.java", "diffHunk": "@@ -66,20 +73,27 @@ public ClusterSizeMonitor(InternalNodeManager nodeManager, NodeSchedulerConfig n\n                 nodeManager,\n                 requireNonNull(nodeSchedulerConfig, \"nodeSchedulerConfig is null\").isIncludeCoordinator(),\n                 requireNonNull(queryManagerConfig, \"queryManagerConfig is null\").getRequiredWorkers(),\n-                queryManagerConfig.getRequiredWorkersMaxWait());\n+                queryManagerConfig.getRequiredWorkersMaxWait(),\n+                requireNonNull(queryManagerConfig, \"queryManagerConfig is null\").getRequiredCoordinators(),\n+                queryManagerConfig.getRequiredCoordinatorsMaxWait());\n     }\n \n     public ClusterSizeMonitor(\n             InternalNodeManager nodeManager,\n             boolean includeCoordinator,\n             int executionMinCount,\n-            Duration executionMaxWait)\n+            Duration executionMaxWait,\n+            int minCoordinatorCount,\n+            Duration maxCoordinatorWait)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA4Mjc2MQ=="}, "originalCommit": {"oid": "a980859f6a49d2add84ca9427e3d59e60c8a8178"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MDQ3MjcyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/ClusterSizeMonitor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNTo1ODozMlrOHPkL7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMzo1NToxNFrOHQJj1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA4MzU2NA==", "bodyText": "looks like we need two method one for removing workerSizeFutures and one for removing coordinatorSizeFutures.", "url": "https://github.com/prestodb/presto/pull/15114#discussion_r486083564", "createdAt": "2020-09-10T05:58:32Z", "author": {"login": "swapsmagic"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/ClusterSizeMonitor.java", "diffHunk": "@@ -131,22 +145,62 @@ public void stop()\n         return future;\n     }\n \n+    public synchronized ListenableFuture<?> waitForMinimumCoordinators()\n+    {\n+        if (currentCoordinatorCount >= minCoordinatorCount) {\n+            return immediateFuture(null);\n+        }\n+\n+        SettableFuture<?> future = SettableFuture.create();\n+        coordinatorSizeFutures.add(future);\n+\n+        // if future does not finish in wait period, complete with an exception\n+        ScheduledFuture<?> timeoutTask = executor.schedule(\n+                () -> {\n+                    synchronized (this) {\n+                        future.setException(new PrestoException(\n+                                GENERIC_INSUFFICIENT_RESOURCES,\n+                                format(\"Insufficient active coordinator nodes. Waited %s for at least %s coordinators, but only %s coordinators are active\", executionMaxWait, 2, currentCoordinatorCount)));\n+                    }\n+                },\n+                maxCoordinatorWait.toMillis(),\n+                MILLISECONDS);\n+\n+        // remove future if finished (e.g., canceled, timed out)\n+        future.addListener(() -> {\n+            timeoutTask.cancel(true);\n+            removeFuture(future);\n+        }, executor);\n+\n+        return future;\n+    }\n+\n     private synchronized void removeFuture(SettableFuture<?> future)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a980859f6a49d2add84ca9427e3d59e60c8a8178"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY5NTg5Mw==", "bodyText": "Good catch, thanks.", "url": "https://github.com/prestodb/presto/pull/15114#discussion_r486695893", "createdAt": "2020-09-10T23:55:14Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/ClusterSizeMonitor.java", "diffHunk": "@@ -131,22 +145,62 @@ public void stop()\n         return future;\n     }\n \n+    public synchronized ListenableFuture<?> waitForMinimumCoordinators()\n+    {\n+        if (currentCoordinatorCount >= minCoordinatorCount) {\n+            return immediateFuture(null);\n+        }\n+\n+        SettableFuture<?> future = SettableFuture.create();\n+        coordinatorSizeFutures.add(future);\n+\n+        // if future does not finish in wait period, complete with an exception\n+        ScheduledFuture<?> timeoutTask = executor.schedule(\n+                () -> {\n+                    synchronized (this) {\n+                        future.setException(new PrestoException(\n+                                GENERIC_INSUFFICIENT_RESOURCES,\n+                                format(\"Insufficient active coordinator nodes. Waited %s for at least %s coordinators, but only %s coordinators are active\", executionMaxWait, 2, currentCoordinatorCount)));\n+                    }\n+                },\n+                maxCoordinatorWait.toMillis(),\n+                MILLISECONDS);\n+\n+        // remove future if finished (e.g., canceled, timed out)\n+        future.addListener(() -> {\n+            timeoutTask.cancel(true);\n+            removeFuture(future);\n+        }, executor);\n+\n+        return future;\n+    }\n+\n     private synchronized void removeFuture(SettableFuture<?> future)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA4MzU2NA=="}, "originalCommit": {"oid": "a980859f6a49d2add84ca9427e3d59e60c8a8178"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MDQ3MzM2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/ClusterSizeMonitor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNTo1ODo0OVrOHPkMRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNTo1ODo0OVrOHPkMRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA4MzY1Mw==", "bodyText": "this will remove this future from workerSizeFutures where it's not present.", "url": "https://github.com/prestodb/presto/pull/15114#discussion_r486083653", "createdAt": "2020-09-10T05:58:49Z", "author": {"login": "swapsmagic"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/ClusterSizeMonitor.java", "diffHunk": "@@ -131,22 +145,62 @@ public void stop()\n         return future;\n     }\n \n+    public synchronized ListenableFuture<?> waitForMinimumCoordinators()\n+    {\n+        if (currentCoordinatorCount >= minCoordinatorCount) {\n+            return immediateFuture(null);\n+        }\n+\n+        SettableFuture<?> future = SettableFuture.create();\n+        coordinatorSizeFutures.add(future);\n+\n+        // if future does not finish in wait period, complete with an exception\n+        ScheduledFuture<?> timeoutTask = executor.schedule(\n+                () -> {\n+                    synchronized (this) {\n+                        future.setException(new PrestoException(\n+                                GENERIC_INSUFFICIENT_RESOURCES,\n+                                format(\"Insufficient active coordinator nodes. Waited %s for at least %s coordinators, but only %s coordinators are active\", executionMaxWait, 2, currentCoordinatorCount)));\n+                    }\n+                },\n+                maxCoordinatorWait.toMillis(),\n+                MILLISECONDS);\n+\n+        // remove future if finished (e.g., canceled, timed out)\n+        future.addListener(() -> {\n+            timeoutTask.cancel(true);\n+            removeFuture(future);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a980859f6a49d2add84ca9427e3d59e60c8a8178"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MDQ4NDg3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/ClusterSizeMonitor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNjowNDoyMFrOHPkTWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMzo1Mzo1NVrOHQJiRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA4NTQ2Ng==", "bodyText": "Any specific reason to not use the getActiveNodes and getActiveCoordinator methods here instead and again calculating it?", "url": "https://github.com/prestodb/presto/pull/15114#discussion_r486085466", "createdAt": "2020-09-10T06:04:20Z", "author": {"login": "swapsmagic"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/ClusterSizeMonitor.java", "diffHunk": "@@ -131,22 +145,62 @@ public void stop()\n         return future;\n     }\n \n+    public synchronized ListenableFuture<?> waitForMinimumCoordinators()\n+    {\n+        if (currentCoordinatorCount >= minCoordinatorCount) {\n+            return immediateFuture(null);\n+        }\n+\n+        SettableFuture<?> future = SettableFuture.create();\n+        coordinatorSizeFutures.add(future);\n+\n+        // if future does not finish in wait period, complete with an exception\n+        ScheduledFuture<?> timeoutTask = executor.schedule(\n+                () -> {\n+                    synchronized (this) {\n+                        future.setException(new PrestoException(\n+                                GENERIC_INSUFFICIENT_RESOURCES,\n+                                format(\"Insufficient active coordinator nodes. Waited %s for at least %s coordinators, but only %s coordinators are active\", executionMaxWait, 2, currentCoordinatorCount)));\n+                    }\n+                },\n+                maxCoordinatorWait.toMillis(),\n+                MILLISECONDS);\n+\n+        // remove future if finished (e.g., canceled, timed out)\n+        future.addListener(() -> {\n+            timeoutTask.cancel(true);\n+            removeFuture(future);\n+        }, executor);\n+\n+        return future;\n+    }\n+\n     private synchronized void removeFuture(SettableFuture<?> future)\n     {\n-        futures.remove(future);\n+        workerSizeFutures.remove(future);\n     }\n \n     private synchronized void updateAllNodes(AllNodes allNodes)\n     {\n-        if (includeCoordinator) {\n-            currentCount = allNodes.getActiveNodes().size();\n-        }\n-        else {\n-            currentCount = Sets.difference(allNodes.getActiveNodes(), allNodes.getActiveCoordinators()).size();\n-        }\n+        currentCount = 0;\n+        currentCoordinatorCount = 0;\n+        allNodes.getActiveNodes().forEach(node -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a980859f6a49d2add84ca9427e3d59e60c8a8178"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY5NTQ5NQ==", "bodyText": "That's a good point, thanks.", "url": "https://github.com/prestodb/presto/pull/15114#discussion_r486695495", "createdAt": "2020-09-10T23:53:55Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/ClusterSizeMonitor.java", "diffHunk": "@@ -131,22 +145,62 @@ public void stop()\n         return future;\n     }\n \n+    public synchronized ListenableFuture<?> waitForMinimumCoordinators()\n+    {\n+        if (currentCoordinatorCount >= minCoordinatorCount) {\n+            return immediateFuture(null);\n+        }\n+\n+        SettableFuture<?> future = SettableFuture.create();\n+        coordinatorSizeFutures.add(future);\n+\n+        // if future does not finish in wait period, complete with an exception\n+        ScheduledFuture<?> timeoutTask = executor.schedule(\n+                () -> {\n+                    synchronized (this) {\n+                        future.setException(new PrestoException(\n+                                GENERIC_INSUFFICIENT_RESOURCES,\n+                                format(\"Insufficient active coordinator nodes. Waited %s for at least %s coordinators, but only %s coordinators are active\", executionMaxWait, 2, currentCoordinatorCount)));\n+                    }\n+                },\n+                maxCoordinatorWait.toMillis(),\n+                MILLISECONDS);\n+\n+        // remove future if finished (e.g., canceled, timed out)\n+        future.addListener(() -> {\n+            timeoutTask.cancel(true);\n+            removeFuture(future);\n+        }, executor);\n+\n+        return future;\n+    }\n+\n     private synchronized void removeFuture(SettableFuture<?> future)\n     {\n-        futures.remove(future);\n+        workerSizeFutures.remove(future);\n     }\n \n     private synchronized void updateAllNodes(AllNodes allNodes)\n     {\n-        if (includeCoordinator) {\n-            currentCount = allNodes.getActiveNodes().size();\n-        }\n-        else {\n-            currentCount = Sets.difference(allNodes.getActiveNodes(), allNodes.getActiveCoordinators()).size();\n-        }\n+        currentCount = 0;\n+        currentCoordinatorCount = 0;\n+        allNodes.getActiveNodes().forEach(node -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA4NTQ2Ng=="}, "originalCommit": {"oid": "a980859f6a49d2add84ca9427e3d59e60c8a8178"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MDQ5Mzg1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/ClusterSizeMonitor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNjowODoxOFrOHPkYpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMzo1NjoyOFrOHQJlNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA4NjgyMg==", "bodyText": "Not sure how important it is, but if the cluster doesn't have enough coordinator and workers, we should always return not enough coordinator error. With current implementation if could be either one (not enough coordinator/not enough worker) of the error that we return and the behavior is not consistent.\nIf we can guarantee that somehow, that would be great.", "url": "https://github.com/prestodb/presto/pull/15114#discussion_r486086822", "createdAt": "2020-09-10T06:08:18Z", "author": {"login": "swapsmagic"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/ClusterSizeMonitor.java", "diffHunk": "@@ -131,22 +145,62 @@ public void stop()\n         return future;\n     }\n \n+    public synchronized ListenableFuture<?> waitForMinimumCoordinators()\n+    {\n+        if (currentCoordinatorCount >= minCoordinatorCount) {\n+            return immediateFuture(null);\n+        }\n+\n+        SettableFuture<?> future = SettableFuture.create();\n+        coordinatorSizeFutures.add(future);\n+\n+        // if future does not finish in wait period, complete with an exception\n+        ScheduledFuture<?> timeoutTask = executor.schedule(\n+                () -> {\n+                    synchronized (this) {\n+                        future.setException(new PrestoException(\n+                                GENERIC_INSUFFICIENT_RESOURCES,\n+                                format(\"Insufficient active coordinator nodes. Waited %s for at least %s coordinators, but only %s coordinators are active\", executionMaxWait, 2, currentCoordinatorCount)));\n+                    }\n+                },\n+                maxCoordinatorWait.toMillis(),\n+                MILLISECONDS);\n+\n+        // remove future if finished (e.g., canceled, timed out)\n+        future.addListener(() -> {\n+            timeoutTask.cancel(true);\n+            removeFuture(future);\n+        }, executor);\n+\n+        return future;\n+    }\n+\n     private synchronized void removeFuture(SettableFuture<?> future)\n     {\n-        futures.remove(future);\n+        workerSizeFutures.remove(future);\n     }\n \n     private synchronized void updateAllNodes(AllNodes allNodes)\n     {\n-        if (includeCoordinator) {\n-            currentCount = allNodes.getActiveNodes().size();\n-        }\n-        else {\n-            currentCount = Sets.difference(allNodes.getActiveNodes(), allNodes.getActiveCoordinators()).size();\n-        }\n+        currentCount = 0;\n+        currentCoordinatorCount = 0;\n+        allNodes.getActiveNodes().forEach(node -> {\n+            if (node.isCoordinator()) {\n+                currentCoordinatorCount += 1;\n+                if (!includeCoordinator) {\n+                    return;\n+                }\n+            }\n+            currentCount += 1;\n+        });\n         if (currentCount >= executionMinCount) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a980859f6a49d2add84ca9427e3d59e60c8a8178"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY5NjI0Nw==", "bodyText": "We already have this behavior, because one will wait for one or the other via the waitForMinimumWorkers or waitForMinimumCoordinators methods.", "url": "https://github.com/prestodb/presto/pull/15114#discussion_r486696247", "createdAt": "2020-09-10T23:56:28Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/ClusterSizeMonitor.java", "diffHunk": "@@ -131,22 +145,62 @@ public void stop()\n         return future;\n     }\n \n+    public synchronized ListenableFuture<?> waitForMinimumCoordinators()\n+    {\n+        if (currentCoordinatorCount >= minCoordinatorCount) {\n+            return immediateFuture(null);\n+        }\n+\n+        SettableFuture<?> future = SettableFuture.create();\n+        coordinatorSizeFutures.add(future);\n+\n+        // if future does not finish in wait period, complete with an exception\n+        ScheduledFuture<?> timeoutTask = executor.schedule(\n+                () -> {\n+                    synchronized (this) {\n+                        future.setException(new PrestoException(\n+                                GENERIC_INSUFFICIENT_RESOURCES,\n+                                format(\"Insufficient active coordinator nodes. Waited %s for at least %s coordinators, but only %s coordinators are active\", executionMaxWait, 2, currentCoordinatorCount)));\n+                    }\n+                },\n+                maxCoordinatorWait.toMillis(),\n+                MILLISECONDS);\n+\n+        // remove future if finished (e.g., canceled, timed out)\n+        future.addListener(() -> {\n+            timeoutTask.cancel(true);\n+            removeFuture(future);\n+        }, executor);\n+\n+        return future;\n+    }\n+\n     private synchronized void removeFuture(SettableFuture<?> future)\n     {\n-        futures.remove(future);\n+        workerSizeFutures.remove(future);\n     }\n \n     private synchronized void updateAllNodes(AllNodes allNodes)\n     {\n-        if (includeCoordinator) {\n-            currentCount = allNodes.getActiveNodes().size();\n-        }\n-        else {\n-            currentCount = Sets.difference(allNodes.getActiveNodes(), allNodes.getActiveCoordinators()).size();\n-        }\n+        currentCount = 0;\n+        currentCoordinatorCount = 0;\n+        allNodes.getActiveNodes().forEach(node -> {\n+            if (node.isCoordinator()) {\n+                currentCoordinatorCount += 1;\n+                if (!includeCoordinator) {\n+                    return;\n+                }\n+            }\n+            currentCount += 1;\n+        });\n         if (currentCount >= executionMinCount) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA4NjgyMg=="}, "originalCommit": {"oid": "a980859f6a49d2add84ca9427e3d59e60c8a8178"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0Nzk1NDc5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/ClusterSizeMonitor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMDowNDoyNVrOHQsQAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMDo0Mzo1MlrOHQtUKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI2NDI1OQ==", "bodyText": "should we rename this to currentWorkerCount to make it clearer?", "url": "https://github.com/prestodb/presto/pull/15114#discussion_r487264259", "createdAt": "2020-09-11T20:04:25Z", "author": {"login": "mayankgarg1990"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/ClusterSizeMonitor.java", "diffHunk": "@@ -57,7 +59,13 @@\n     private int currentCount;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13f939e5bd5af139c04a5befbadb7378b693d702"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI4MTcwNg==", "bodyText": "Sure.", "url": "https://github.com/prestodb/presto/pull/15114#discussion_r487281706", "createdAt": "2020-09-11T20:43:52Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/ClusterSizeMonitor.java", "diffHunk": "@@ -57,7 +59,13 @@\n     private int currentCount;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI2NDI1OQ=="}, "originalCommit": {"oid": "13f939e5bd5af139c04a5befbadb7378b693d702"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0Nzk5MzY5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/ClusterSizeMonitor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMDoxODo0MlrOHQsn2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMDo0Mzo0MFrOHQtTyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI3MDM2MA==", "bodyText": "instead of having 2 different functions - do you feel we should have a single function waitForMinimumNodes() (or some better name) which takes into account both workers and coordinators? Also, this PR does not use this function yet, will this be followed up in a separate PR? If yes, I am curious why?", "url": "https://github.com/prestodb/presto/pull/15114#discussion_r487270360", "createdAt": "2020-09-11T20:18:42Z", "author": {"login": "mayankgarg1990"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/ClusterSizeMonitor.java", "diffHunk": "@@ -125,15 +140,50 @@ public void stop()\n         // remove future if finished (e.g., canceled, timed out)\n         future.addListener(() -> {\n             timeoutTask.cancel(true);\n-            removeFuture(future);\n+            removeWorkerFuture(future);\n         }, executor);\n \n         return future;\n     }\n \n-    private synchronized void removeFuture(SettableFuture<?> future)\n+    public synchronized ListenableFuture<?> waitForMinimumCoordinators()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13f939e5bd5af139c04a5befbadb7378b693d702"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI4MTYwOQ==", "bodyText": "I would prefer to wait for them separately so we could have an accurate message indicating the resource problem (insufficient coordinators/insufficient workers).\nYou can see how it fits together in the Extract from reference in the PR description.  I'm putting these out as small PRs to make it easy to review thoroughly.", "url": "https://github.com/prestodb/presto/pull/15114#discussion_r487281609", "createdAt": "2020-09-11T20:43:40Z", "author": {"login": "tdcmeehan"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/ClusterSizeMonitor.java", "diffHunk": "@@ -125,15 +140,50 @@ public void stop()\n         // remove future if finished (e.g., canceled, timed out)\n         future.addListener(() -> {\n             timeoutTask.cancel(true);\n-            removeFuture(future);\n+            removeWorkerFuture(future);\n         }, executor);\n \n         return future;\n     }\n \n-    private synchronized void removeFuture(SettableFuture<?> future)\n+    public synchronized ListenableFuture<?> waitForMinimumCoordinators()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI3MDM2MA=="}, "originalCommit": {"oid": "13f939e5bd5af139c04a5befbadb7378b693d702"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MzY3NTY5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/ClusterSizeMonitor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNjozMTo0NlrOHRdRUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNjozMTo0NlrOHRdRUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA2NzQxMQ==", "bodyText": "List<SettableFuture<?>>", "url": "https://github.com/prestodb/presto/pull/15114#discussion_r488067411", "createdAt": "2020-09-14T16:31:46Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/ClusterSizeMonitor.java", "diffHunk": "@@ -125,28 +140,69 @@ public void stop()\n         // remove future if finished (e.g., canceled, timed out)\n         future.addListener(() -> {\n             timeoutTask.cancel(true);\n-            removeFuture(future);\n+            removeWorkerFuture(future);\n         }, executor);\n \n         return future;\n     }\n \n-    private synchronized void removeFuture(SettableFuture<?> future)\n+    public synchronized ListenableFuture<?> waitForMinimumCoordinators()\n     {\n-        futures.remove(future);\n+        if (currentCoordinatorCount >= coordinatorMinCount) {\n+            return immediateFuture(null);\n+        }\n+\n+        SettableFuture<?> future = SettableFuture.create();\n+        coordinatorSizeFutures.add(future);\n+\n+        // if future does not finish in wait period, complete with an exception\n+        ScheduledFuture<?> timeoutTask = executor.schedule(\n+                () -> {\n+                    synchronized (this) {\n+                        future.setException(new PrestoException(\n+                                GENERIC_INSUFFICIENT_RESOURCES,\n+                                format(\"Insufficient active coordinator nodes. Waited %s for at least %s coordinators, but only %s coordinators are active\", executionMaxWait, 2, currentCoordinatorCount)));\n+                    }\n+                },\n+                coordinatorMaxWait.toMillis(),\n+                MILLISECONDS);\n+\n+        // remove future if finished (e.g., canceled, timed out)\n+        future.addListener(() -> {\n+            timeoutTask.cancel(true);\n+            removeCoordinatorFuture(future);\n+        }, executor);\n+\n+        return future;\n+    }\n+\n+    private synchronized void removeWorkerFuture(SettableFuture<?> future)\n+    {\n+        workerSizeFutures.remove(future);\n+    }\n+\n+    private synchronized void removeCoordinatorFuture(SettableFuture<?> future)\n+    {\n+        coordinatorSizeFutures.remove(future);\n     }\n \n     private synchronized void updateAllNodes(AllNodes allNodes)\n     {\n         if (includeCoordinator) {\n-            currentCount = allNodes.getActiveNodes().size();\n+            currentWorkerCount = allNodes.getActiveNodes().size();\n         }\n         else {\n-            currentCount = Sets.difference(allNodes.getActiveNodes(), allNodes.getActiveCoordinators()).size();\n+            currentWorkerCount = Sets.difference(allNodes.getActiveNodes(), allNodes.getActiveCoordinators()).size();\n+        }\n+        currentCoordinatorCount = allNodes.getActiveCoordinators().size();\n+        if (currentWorkerCount >= workerMinCount) {\n+            ImmutableList<SettableFuture<?>> listeners = ImmutableList.copyOf(workerSizeFutures);\n+            workerSizeFutures.clear();\n+            executor.submit(() -> listeners.forEach(listener -> listener.set(null)));\n         }\n-        if (currentCount >= executionMinCount) {\n-            ImmutableList<SettableFuture<?>> listeners = ImmutableList.copyOf(futures);\n-            futures.clear();\n+        if (currentCoordinatorCount >= coordinatorMinCount) {\n+            ImmutableList<SettableFuture<?>> listeners = ImmutableList.copyOf(coordinatorSizeFutures);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d62c34afb588ba58b30e948e6bf6f5fea70ac765"}, "originalPosition": 159}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3615, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}