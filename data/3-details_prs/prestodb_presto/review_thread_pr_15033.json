{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4MjE4NTY3", "number": 15033, "reviewThreads": {"totalCount": 44, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQwMDo0Mzo1MFrOEiujEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQyMzo1ODoyOVrOFRI0vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0ODQ5NjgwOnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/language/reserved.rst", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQwMDo0Mzo1MFrOHQxLsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMDoxNTowOFrOHUamaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM0NTA3NA==", "bodyText": "It's a reserved keyword in 92 but not 16? BTW adding new reserved keyword might cause pipelines to fail. So if we want to add it we probably first need to add warnings so people are aware.", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r487345074", "createdAt": "2020-09-12T00:43:50Z", "author": {"login": "rongrong"}, "path": "presto-docs/src/main/sphinx/language/reserved.rst", "diffHunk": "@@ -68,6 +68,7 @@ Keyword                        SQL:2016      SQL-92\n ``ROLLUP``                     reserved\n ``SELECT``                     reserved      reserved\n ``TABLE``                      reserved      reserved\n+``TEMPORARY``                                reserved", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7037d770a633998f607e9e787af6e7c473468b1f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE2OTM4Nw==", "bodyText": "Changed to non-reserved keyword", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r491169387", "createdAt": "2020-09-18T20:15:08Z", "author": {"login": "prithvip"}, "path": "presto-docs/src/main/sphinx/language/reserved.rst", "diffHunk": "@@ -68,6 +68,7 @@ Keyword                        SQL:2016      SQL-92\n ``ROLLUP``                     reserved\n ``SELECT``                     reserved      reserved\n ``TABLE``                      reserved      reserved\n+``TEMPORARY``                                reserved", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM0NTA3NA=="}, "originalCommit": {"oid": "7037d770a633998f607e9e787af6e7c473468b1f"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0ODQ5OTY3OnYy", "diffSide": "RIGHT", "path": "presto-parser/src/test/java/com/facebook/presto/sql/parser/TestSqlParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQwMDo0NjoxNlrOHQxNIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMDoxNzowNVrOHUaptg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM0NTQ0Mg==", "bodyText": "Hmm, this makes me think. Can user create temporary function in any catalog.schema or only the default?", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r487345442", "createdAt": "2020-09-12T00:46:16Z", "author": {"login": "rongrong"}, "path": "presto-parser/src/test/java/com/facebook/presto/sql/parser/TestSqlParser.java", "diffHunk": "@@ -1530,6 +1532,21 @@ public void testCreateFunction()\n                         \"RETURN rand()\",\n                 createFunctionRand);\n \n+        CreateFunction createTemporaryFunctionFoo = new CreateFunction(\n+                QualifiedName.of(\"dev\", \"testing\", \"foo\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7037d770a633998f607e9e787af6e7c473468b1f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE3MDIzMA==", "bodyText": "User can only create unqualified temporary functions, to avoid resolution issues", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r491170230", "createdAt": "2020-09-18T20:17:05Z", "author": {"login": "prithvip"}, "path": "presto-parser/src/test/java/com/facebook/presto/sql/parser/TestSqlParser.java", "diffHunk": "@@ -1530,6 +1532,21 @@ public void testCreateFunction()\n                         \"RETURN rand()\",\n                 createFunctionRand);\n \n+        CreateFunction createTemporaryFunctionFoo = new CreateFunction(\n+                QualifiedName.of(\"dev\", \"testing\", \"foo\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM0NTQ0Mg=="}, "originalCommit": {"oid": "7037d770a633998f607e9e787af6e7c473468b1f"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0ODUwNTI5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/relational/SqlToRowExpressionTranslator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQwMDo1MToyNlrOHQxQCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwMDoyODo0NVrOHUfJog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM0NjE4Ng==", "bodyText": "This class is used to convert an Expression to RowExpression, not just for SQL function.", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r487346186", "createdAt": "2020-09-12T00:51:26Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/relational/SqlToRowExpressionTranslator.java", "diffHunk": "@@ -407,7 +407,14 @@ protected RowExpression visitFunctionCall(FunctionCall node, Void context)\n                     .map(TypeSignatureProvider::new)\n                     .collect(toImmutableList());\n \n-            return call(node.getName().toString(), functionManager.resolveFunction(transactionId, qualifyFunctionName(node.getName()), argumentTypes), getType(node), arguments);\n+            return call(node.getName().toString(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "513f486d7c0fccaf4d531681d840cdca6b96d9e8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI0MzkzOA==", "bodyText": "Yes, thanks for catching this. Fixed.", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r491243938", "createdAt": "2020-09-19T00:28:45Z", "author": {"login": "prithvip"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/relational/SqlToRowExpressionTranslator.java", "diffHunk": "@@ -407,7 +407,14 @@ protected RowExpression visitFunctionCall(FunctionCall node, Void context)\n                     .map(TypeSignatureProvider::new)\n                     .collect(toImmutableList());\n \n-            return call(node.getName().toString(), functionManager.resolveFunction(transactionId, qualifyFunctionName(node.getName()), argumentTypes), getType(node), arguments);\n+            return call(node.getName().toString(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM0NjE4Ng=="}, "originalCommit": {"oid": "513f486d7c0fccaf4d531681d840cdca6b96d9e8"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0ODUwNzgwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/com/facebook/presto/sql/planner/iterative/rule/test/PlanBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQwMDo1Mzo0OFrOHQxRQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQwMDo1Mzo0OFrOHQxRQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM0NjQ5Ng==", "bodyText": "PlanBuilder has Session as parameter so why not extract the session functions and support it in tests?", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r487346496", "createdAt": "2020-09-12T00:53:48Z", "author": {"login": "rongrong"}, "path": "presto-main/src/test/java/com/facebook/presto/sql/planner/iterative/rule/test/PlanBuilder.java", "diffHunk": "@@ -340,6 +340,7 @@ private AggregationBuilder addAggregation(VariableReferenceExpression output, Ex\n             checkArgument(expression instanceof FunctionCall);\n             FunctionCall call = (FunctionCall) expression;\n             FunctionHandle functionHandle = metadata.getFunctionManager().resolveFunction(\n+                    Optional.empty(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "513f486d7c0fccaf4d531681d840cdca6b96d9e8"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0ODUxMTA5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/SessionInformationFunctions.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQwMDo1NzoyNFrOHQxS5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwMDozMjowNlrOHUfLqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM0NjkxNw==", "bodyText": "I'm not sure there's confusion though. These functions are also session-scoped. The only difference is whether they are builtin or user-defined. Unless you want to repurpose the class name I think it's fine to leave it as SessionFunctions.", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r487346917", "createdAt": "2020-09-12T00:57:24Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/SessionInformationFunctions.java", "diffHunk": "@@ -23,9 +23,9 @@\n import static com.facebook.presto.spi.function.SqlFunctionVisibility.HIDDEN;\n import static io.airlift.slice.Slices.utf8Slice;\n \n-public final class SessionFunctions\n+public final class SessionInformationFunctions", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc4149ae7eebe6af0d52a6ebae1b2957685e7ee9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE3MTMxMQ==", "bodyText": "I think it is clearer to call it SessionInformationFunction because it is not a function defined in a session. The function definition is the same no matter what session, and it retrieves a specific property of a session.", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r491171311", "createdAt": "2020-09-18T20:19:51Z", "author": {"login": "prithvip"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/SessionInformationFunctions.java", "diffHunk": "@@ -23,9 +23,9 @@\n import static com.facebook.presto.spi.function.SqlFunctionVisibility.HIDDEN;\n import static io.airlift.slice.Slices.utf8Slice;\n \n-public final class SessionFunctions\n+public final class SessionInformationFunctions", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM0NjkxNw=="}, "originalCommit": {"oid": "fc4149ae7eebe6af0d52a6ebae1b2957685e7ee9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIzNjM1OA==", "bodyText": "Ya, but functions defined in a session will never end up in the source code. So there should be no confusion that these functions are not defined in the session?", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r491236358", "createdAt": "2020-09-18T23:40:17Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/SessionInformationFunctions.java", "diffHunk": "@@ -23,9 +23,9 @@\n import static com.facebook.presto.spi.function.SqlFunctionVisibility.HIDDEN;\n import static io.airlift.slice.Slices.utf8Slice;\n \n-public final class SessionFunctions\n+public final class SessionInformationFunctions", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM0NjkxNw=="}, "originalCommit": {"oid": "fc4149ae7eebe6af0d52a6ebae1b2957685e7ee9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI0NDQ1Nw==", "bodyText": "Ok, I've changed it back to SessionFunctions.", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r491244457", "createdAt": "2020-09-19T00:32:06Z", "author": {"login": "prithvip"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/scalar/SessionInformationFunctions.java", "diffHunk": "@@ -23,9 +23,9 @@\n import static com.facebook.presto.spi.function.SqlFunctionVisibility.HIDDEN;\n import static io.airlift.slice.Slices.utf8Slice;\n \n-public final class SessionFunctions\n+public final class SessionInformationFunctions", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM0NjkxNw=="}, "originalCommit": {"oid": "fc4149ae7eebe6af0d52a6ebae1b2957685e7ee9"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0ODUxNTMzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/metadata/FunctionManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQwMTowMjoyOFrOHQxVNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMDoyMDowM1rOHUauVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM0NzUxMQ==", "bodyText": "You are by passing function resolution here, which is probably why you need to handle coercion separately. All function resolution should go through the same logic, which is wrapped in resolveFunctionInternal. Function namespaces are only providing candidates with getFunction(transactionID, functionName).", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r487347511", "createdAt": "2020-09-12T01:02:28Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/metadata/FunctionManager.java", "diffHunk": "@@ -271,6 +273,10 @@ public static QualifiedFunctionName qualifyFunctionName(QualifiedName name)\n      */\n     public FunctionHandle resolveFunction(Optional<Map<String, String>> sessionFunctions, Optional<TransactionId> transactionId, QualifiedFunctionName functionName, List<TypeSignatureProvider> parameterTypes)\n     {\n+        Optional<FunctionHandle> sessionFunctionHandle = sessionFunctionManager.getFunctionHandle(functionName, sessionFunctions);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82b53cf5b10e7cc431584f91ba1ae2ff054a9f04"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE3MTQxMg==", "bodyText": "Outdated", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r491171412", "createdAt": "2020-09-18T20:20:03Z", "author": {"login": "prithvip"}, "path": "presto-main/src/main/java/com/facebook/presto/metadata/FunctionManager.java", "diffHunk": "@@ -271,6 +273,10 @@ public static QualifiedFunctionName qualifyFunctionName(QualifiedName name)\n      */\n     public FunctionHandle resolveFunction(Optional<Map<String, String>> sessionFunctions, Optional<TransactionId> transactionId, QualifiedFunctionName functionName, List<TypeSignatureProvider> parameterTypes)\n     {\n+        Optional<FunctionHandle> sessionFunctionHandle = sessionFunctionManager.getFunctionHandle(functionName, sessionFunctions);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM0NzUxMQ=="}, "originalCommit": {"oid": "82b53cf5b10e7cc431584f91ba1ae2ff054a9f04"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNjk0MjYyOnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/sql/create-function.rst", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDowMzoxNVrOHZTxcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODo0NDoyMFrOHer1Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwMDQwMg==", "bodyText": "What about\nEach permanent function is uniquely identified by ...\n\nEach temporary function is uniquely identified by the function name. It cannot be qualified, nor collides with existing built-in functions.", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r496300402", "createdAt": "2020-09-29T00:03:15Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/sql/create-function.rst", "diffHunk": "@@ -25,11 +25,15 @@ Description\n \n Create a new function with the specified definition.\n \n+When ``TEMPORARY`` is specified, the created function is valid and visible\n+within the current session, but no persistent entry is made.\n+\n Each function is uniquely identified by its qualified function name\n and its parameter type list. ``qualified_function_name`` needs to be in\n-the format of ``catalog.schema.function_name``.\n+the format of ``catalog.schema.function_name``. Temporary functions do not\n+need to be qualified.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68a157dd21a361f735358a66ebb2e1f9c90ad642"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkzNzQ0Mw==", "bodyText": "Done", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r501937443", "createdAt": "2020-10-08T18:44:20Z", "author": {"login": "prithvip"}, "path": "presto-docs/src/main/sphinx/sql/create-function.rst", "diffHunk": "@@ -25,11 +25,15 @@ Description\n \n Create a new function with the specified definition.\n \n+When ``TEMPORARY`` is specified, the created function is valid and visible\n+within the current session, but no persistent entry is made.\n+\n Each function is uniquely identified by its qualified function name\n and its parameter type list. ``qualified_function_name`` needs to be in\n-the format of ``catalog.schema.function_name``.\n+the format of ``catalog.schema.function_name``. Temporary functions do not\n+need to be qualified.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwMDQwMg=="}, "originalCommit": {"oid": "68a157dd21a361f735358a66ebb2e1f9c90ad642"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNjk0NTI4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDowNDo0OFrOHZTy-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDowNDo0OFrOHZTy-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwMDc5Mg==", "bodyText": "I think we should be able to support that and it could be useful, but sure, it could be a follow-up PR.", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r496300792", "createdAt": "2020-09-29T00:04:48Z", "author": {"login": "caithagoras"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -567,7 +567,12 @@ protected Scope visitCreateFunction(CreateFunction node, Optional<Scope> scope)\n             analysis.setUpdateType(\"CREATE FUNCTION\");\n \n             // Check function name\n-            checkFunctionName(node, node.getFunctionName());\n+            checkFunctionName(node, node.getFunctionName(), node.isTemporary());\n+\n+            // Check no replace with temporary functions\n+            if (node.isTemporary() && node.isReplace()) {\n+                throw new SemanticException(NOT_SUPPORTED, node, \"REPLACE is not supported for temporary functions\");\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68a157dd21a361f735358a66ebb2e1f9c90ad642"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNjk1MjI1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDowODoxN1rOHZT27A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODo0NDoyOVrOHer1eA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwMTgwNA==", "bodyText": "What about functionName.getParts().size() != 1, which is identical but more explicit.", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r496301804", "createdAt": "2020-09-29T00:08:17Z", "author": {"login": "caithagoras"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1608,9 +1613,15 @@ else if (column.getExpression() instanceof Identifier) {\n             return assignments.build();\n         }\n \n-        private void checkFunctionName(Statement node, QualifiedName functionName)\n+        private void checkFunctionName(Statement node, QualifiedName functionName, boolean isTemporary)\n         {\n-            if (functionName.getParts().size() != 3) {\n+            if (isTemporary && !functionName.getPrefix().equals(Optional.empty())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68a157dd21a361f735358a66ebb2e1f9c90ad642"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkzNzUyOA==", "bodyText": "Done", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r501937528", "createdAt": "2020-10-08T18:44:29Z", "author": {"login": "prithvip"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1608,9 +1613,15 @@ else if (column.getExpression() instanceof Identifier) {\n             return assignments.build();\n         }\n \n-        private void checkFunctionName(Statement node, QualifiedName functionName)\n+        private void checkFunctionName(Statement node, QualifiedName functionName, boolean isTemporary)\n         {\n-            if (functionName.getParts().size() != 3) {\n+            if (isTemporary && !functionName.getPrefix().equals(Optional.empty())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwMTgwNA=="}, "originalCommit": {"oid": "68a157dd21a361f735358a66ebb2e1f9c90ad642"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNjk1NDE4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDowOToyN1rOHZT4IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODo0NDozOFrOHer13w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwMjExMw==", "bodyText": "What about\nif (isTemporary) {\n   if ...\n   if ...\n} else {\n   if ...\n}", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r496302113", "createdAt": "2020-09-29T00:09:27Z", "author": {"login": "caithagoras"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1608,9 +1613,15 @@ else if (column.getExpression() instanceof Identifier) {\n             return assignments.build();\n         }\n \n-        private void checkFunctionName(Statement node, QualifiedName functionName)\n+        private void checkFunctionName(Statement node, QualifiedName functionName, boolean isTemporary)\n         {\n-            if (functionName.getParts().size() != 3) {\n+            if (isTemporary && !functionName.getPrefix().equals(Optional.empty())) {\n+                throw new SemanticException(INVALID_FUNCTION_NAME, node, \"Temporary functions cannot be qualified.\");\n+            }\n+            if (isTemporary && metadata.getFunctionManager().listBuiltinFunctionNames().contains(functionName.toString())) {\n+                throw new SemanticException(INVALID_FUNCTION_NAME, node, format(\"Function %s is already registered as a built-in function.\", functionName));\n+            }\n+            if (!isTemporary && functionName.getParts().size() != 3) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68a157dd21a361f735358a66ebb2e1f9c90ad642"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkzNzYzMQ==", "bodyText": "Done", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r501937631", "createdAt": "2020-10-08T18:44:38Z", "author": {"login": "prithvip"}, "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1608,9 +1613,15 @@ else if (column.getExpression() instanceof Identifier) {\n             return assignments.build();\n         }\n \n-        private void checkFunctionName(Statement node, QualifiedName functionName)\n+        private void checkFunctionName(Statement node, QualifiedName functionName, boolean isTemporary)\n         {\n-            if (functionName.getParts().size() != 3) {\n+            if (isTemporary && !functionName.getPrefix().equals(Optional.empty())) {\n+                throw new SemanticException(INVALID_FUNCTION_NAME, node, \"Temporary functions cannot be qualified.\");\n+            }\n+            if (isTemporary && metadata.getFunctionManager().listBuiltinFunctionNames().contains(functionName.toString())) {\n+                throw new SemanticException(INVALID_FUNCTION_NAME, node, format(\"Function %s is already registered as a built-in function.\", functionName));\n+            }\n+            if (!isTemporary && functionName.getParts().size() != 3) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwMjExMw=="}, "originalCommit": {"oid": "68a157dd21a361f735358a66ebb2e1f9c90ad642"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNjk2NjgyOnYy", "diffSide": "RIGHT", "path": "presto-client/src/main/java/com/facebook/presto/client/StatementClientV1.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDoxNTo0N1rOHZT_TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODo0NDo0N1rOHer2RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwMzk0OQ==", "bodyText": "nit: static import", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r496303949", "createdAt": "2020-09-29T00:15:47Z", "author": {"login": "caithagoras"}, "path": "presto-client/src/main/java/com/facebook/presto/client/StatementClientV1.java", "diffHunk": "@@ -107,6 +110,8 @@\n     private final TimeZoneKey timeZone;\n     private final Duration requestTimeoutNanos;\n     private final String user;\n+    private final Map<String, String> addedSessionFunctions = new ConcurrentHashMap<>();\n+    private final Set<String> removedSessionFunctions = Sets.newConcurrentHashSet();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1378e00bf51984ee2463e0e8f62b169e89cf650e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkzNzczMw==", "bodyText": "Done", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r501937733", "createdAt": "2020-10-08T18:44:47Z", "author": {"login": "prithvip"}, "path": "presto-client/src/main/java/com/facebook/presto/client/StatementClientV1.java", "diffHunk": "@@ -107,6 +110,8 @@\n     private final TimeZoneKey timeZone;\n     private final Duration requestTimeoutNanos;\n     private final String user;\n+    private final Map<String, String> addedSessionFunctions = new ConcurrentHashMap<>();\n+    private final Set<String> removedSessionFunctions = Sets.newConcurrentHashSet();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwMzk0OQ=="}, "originalCommit": {"oid": "1378e00bf51984ee2463e0e8f62b169e89cf650e"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNjk4NTQwOnYy", "diffSide": "RIGHT", "path": "presto-cli/src/test/java/com/facebook/presto/cli/AbstractCliTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDoyNjozOVrOHZUKNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODo0NDo1NlrOHer2lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwNjc0MA==", "bodyText": "nit: Seems to me the old name createQueryRunner was just good enough.", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r496306740", "createdAt": "2020-09-29T00:26:39Z", "author": {"login": "caithagoras"}, "path": "presto-cli/src/test/java/com/facebook/presto/cli/AbstractCliTest.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.cli;\n+\n+import com.facebook.airlift.json.JsonCodec;\n+import com.facebook.presto.client.ClientSession;\n+import com.facebook.presto.client.Column;\n+import com.facebook.presto.client.QueryResults;\n+import com.facebook.presto.client.StatementStats;\n+import com.facebook.presto.common.type.BigintType;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import io.airlift.units.Duration;\n+import okhttp3.Headers;\n+import okhttp3.mockwebserver.MockResponse;\n+import okhttp3.mockwebserver.MockWebServer;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import static com.facebook.airlift.json.JsonCodec.jsonCodec;\n+import static com.facebook.presto.cli.ClientOptions.OutputFormat.CSV;\n+import static com.google.common.net.HttpHeaders.CONTENT_TYPE;\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static org.testng.Assert.assertEquals;\n+\n+public abstract class AbstractCliTest\n+{\n+    protected static final JsonCodec<QueryResults> QUERY_RESULTS_JSON_CODEC = jsonCodec(QueryResults.class);\n+\n+    protected MockWebServer server;\n+\n+    @BeforeMethod\n+    public void setup()\n+            throws IOException\n+    {\n+        server = new MockWebServer();\n+        server.start();\n+    }\n+\n+    @AfterMethod\n+    public void teardown()\n+            throws IOException\n+    {\n+        server.close();\n+    }\n+\n+    protected ClientSession createMockClientSession()\n+    {\n+        return new ClientSession(\n+                server.url(\"/\").uri(),\n+                \"user\",\n+                \"source\",\n+                Optional.empty(),\n+                ImmutableSet.of(),\n+                \"clientInfo\",\n+                \"catalog\",\n+                \"schema\",\n+                \"America/Los_Angeles\",\n+                Locale.ENGLISH,\n+                ImmutableMap.of(),\n+                ImmutableMap.of(),\n+                ImmutableMap.of(),\n+                ImmutableMap.of(),\n+                ImmutableMap.of(),\n+                null,\n+                new Duration(2, MINUTES),\n+                ImmutableMap.of());\n+    }\n+\n+    protected QueryResults createMockQueryResults()\n+    {\n+        return new QueryResults(\n+                \"20160128_214710_00012_rk68b\",\n+                server.url(\"/query.html?20160128_214710_00012_rk68b\").uri(),\n+                null,\n+                null,\n+                ImmutableList.of(new Column(\"_col0\", BigintType.BIGINT)),\n+                ImmutableList.of(ImmutableList.of(123)),\n+                StatementStats.builder().setState(\"FINISHED\").build(),\n+                null,\n+                ImmutableList.of(),\n+                null,\n+                null);\n+    }\n+\n+    protected MockResponse createMockResponse()\n+    {\n+        return new MockResponse()\n+                .addHeader(CONTENT_TYPE, \"application/json\")\n+                .setBody(QUERY_RESULTS_JSON_CODEC.toJson(createMockQueryResults()));\n+    }\n+\n+    protected void executeQueries(List<String> queries)\n+    {\n+        Console console = new Console();\n+        QueryRunner queryRunner = createQueryRunnerWithClientSession(createMockClientSession());\n+        for (String query : queries) {\n+            console.executeCommand(queryRunner, query, CSV, false);\n+        }\n+    }\n+\n+    protected static QueryRunner createQueryRunnerWithClientSession(ClientSession clientSession)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27b0576b0e6bb15513cbc514f9c6ff19f0d7808e"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkzNzgxNA==", "bodyText": "Done", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r501937814", "createdAt": "2020-10-08T18:44:56Z", "author": {"login": "prithvip"}, "path": "presto-cli/src/test/java/com/facebook/presto/cli/AbstractCliTest.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.cli;\n+\n+import com.facebook.airlift.json.JsonCodec;\n+import com.facebook.presto.client.ClientSession;\n+import com.facebook.presto.client.Column;\n+import com.facebook.presto.client.QueryResults;\n+import com.facebook.presto.client.StatementStats;\n+import com.facebook.presto.common.type.BigintType;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import io.airlift.units.Duration;\n+import okhttp3.Headers;\n+import okhttp3.mockwebserver.MockResponse;\n+import okhttp3.mockwebserver.MockWebServer;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import static com.facebook.airlift.json.JsonCodec.jsonCodec;\n+import static com.facebook.presto.cli.ClientOptions.OutputFormat.CSV;\n+import static com.google.common.net.HttpHeaders.CONTENT_TYPE;\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static org.testng.Assert.assertEquals;\n+\n+public abstract class AbstractCliTest\n+{\n+    protected static final JsonCodec<QueryResults> QUERY_RESULTS_JSON_CODEC = jsonCodec(QueryResults.class);\n+\n+    protected MockWebServer server;\n+\n+    @BeforeMethod\n+    public void setup()\n+            throws IOException\n+    {\n+        server = new MockWebServer();\n+        server.start();\n+    }\n+\n+    @AfterMethod\n+    public void teardown()\n+            throws IOException\n+    {\n+        server.close();\n+    }\n+\n+    protected ClientSession createMockClientSession()\n+    {\n+        return new ClientSession(\n+                server.url(\"/\").uri(),\n+                \"user\",\n+                \"source\",\n+                Optional.empty(),\n+                ImmutableSet.of(),\n+                \"clientInfo\",\n+                \"catalog\",\n+                \"schema\",\n+                \"America/Los_Angeles\",\n+                Locale.ENGLISH,\n+                ImmutableMap.of(),\n+                ImmutableMap.of(),\n+                ImmutableMap.of(),\n+                ImmutableMap.of(),\n+                ImmutableMap.of(),\n+                null,\n+                new Duration(2, MINUTES),\n+                ImmutableMap.of());\n+    }\n+\n+    protected QueryResults createMockQueryResults()\n+    {\n+        return new QueryResults(\n+                \"20160128_214710_00012_rk68b\",\n+                server.url(\"/query.html?20160128_214710_00012_rk68b\").uri(),\n+                null,\n+                null,\n+                ImmutableList.of(new Column(\"_col0\", BigintType.BIGINT)),\n+                ImmutableList.of(ImmutableList.of(123)),\n+                StatementStats.builder().setState(\"FINISHED\").build(),\n+                null,\n+                ImmutableList.of(),\n+                null,\n+                null);\n+    }\n+\n+    protected MockResponse createMockResponse()\n+    {\n+        return new MockResponse()\n+                .addHeader(CONTENT_TYPE, \"application/json\")\n+                .setBody(QUERY_RESULTS_JSON_CODEC.toJson(createMockQueryResults()));\n+    }\n+\n+    protected void executeQueries(List<String> queries)\n+    {\n+        Console console = new Console();\n+        QueryRunner queryRunner = createQueryRunnerWithClientSession(createMockClientSession());\n+        for (String query : queries) {\n+            console.executeCommand(queryRunner, query, CSV, false);\n+        }\n+    }\n+\n+    protected static QueryRunner createQueryRunnerWithClientSession(ClientSession clientSession)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwNjc0MA=="}, "originalCommit": {"oid": "27b0576b0e6bb15513cbc514f9c6ff19f0d7808e"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNjk5OTc0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/FullConnectorSession.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDozNDo1MVrOHZUSWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODo0NTo0MlrOHer4Ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwODgyNQ==", "bodyText": "ImmutableMap.copyOf", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r496308825", "createdAt": "2020-09-29T00:34:51Z", "author": {"login": "caithagoras"}, "path": "presto-main/src/main/java/com/facebook/presto/FullConnectorSession.java", "diffHunk": "@@ -50,6 +51,7 @@ public FullConnectorSession(Session session, ConnectorIdentity identity)\n         this.catalog = null;\n         this.sessionPropertyManager = null;\n         this.sqlFunctionProperties = session.getSqlFunctionProperties();\n+        this.sessionFunctions = session.getSessionFunctions();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "731a2269b1050d946b62cc420c25b12914bfec6b"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkzODI2Nw==", "bodyText": "Done", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r501938267", "createdAt": "2020-10-08T18:45:42Z", "author": {"login": "prithvip"}, "path": "presto-main/src/main/java/com/facebook/presto/FullConnectorSession.java", "diffHunk": "@@ -50,6 +51,7 @@ public FullConnectorSession(Session session, ConnectorIdentity identity)\n         this.catalog = null;\n         this.sessionPropertyManager = null;\n         this.sqlFunctionProperties = session.getSqlFunctionProperties();\n+        this.sessionFunctions = session.getSessionFunctions();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwODgyNQ=="}, "originalCommit": {"oid": "731a2269b1050d946b62cc420c25b12914bfec6b"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNjk5OTg5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/FullConnectorSession.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDozNDo1OFrOHZUSbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODo0NTo1MFrOHer4iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwODg0NQ==", "bodyText": "ImmutableMap.copyOf", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r496308845", "createdAt": "2020-09-29T00:34:58Z", "author": {"login": "caithagoras"}, "path": "presto-main/src/main/java/com/facebook/presto/FullConnectorSession.java", "diffHunk": "@@ -67,6 +69,7 @@ public FullConnectorSession(\n         this.catalog = requireNonNull(catalog, \"catalog is null\");\n         this.sessionPropertyManager = requireNonNull(sessionPropertyManager, \"sessionPropertyManager is null\");\n         this.sqlFunctionProperties = session.getSqlFunctionProperties();\n+        this.sessionFunctions = session.getSessionFunctions();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "731a2269b1050d946b62cc420c25b12914bfec6b"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkzODMxMg==", "bodyText": "Done", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r501938312", "createdAt": "2020-10-08T18:45:50Z", "author": {"login": "prithvip"}, "path": "presto-main/src/main/java/com/facebook/presto/FullConnectorSession.java", "diffHunk": "@@ -67,6 +69,7 @@ public FullConnectorSession(\n         this.catalog = requireNonNull(catalog, \"catalog is null\");\n         this.sessionPropertyManager = requireNonNull(sessionPropertyManager, \"sessionPropertyManager is null\");\n         this.sqlFunctionProperties = session.getSqlFunctionProperties();\n+        this.sessionFunctions = session.getSessionFunctions();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwODg0NQ=="}, "originalCommit": {"oid": "731a2269b1050d946b62cc420c25b12914bfec6b"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzAxNjI3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/DropFunctionTask.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDo0NDo0N1rOHZUcOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODo0NjowMVrOHer45w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxMTM1NA==", "bodyText": "\"TEMPORARY \" instead of \"TEMPORARY\".", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r496311354", "createdAt": "2020-09-29T00:44:47Z", "author": {"login": "caithagoras"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/DropFunctionTask.java", "diffHunk": "@@ -53,19 +58,29 @@ public String getName()\n     @Override\n     public String explain(DropFunction statement, List<Expression> parameters)\n     {\n-        return \"DROP FUNCTION \" + statement.getFunctionName();\n+        return format(\"DROP %sFUNCTION %s\", statement.isTemporary() ? \"TEMPORARY\" : \"\", statement.getFunctionName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "731a2269b1050d946b62cc420c25b12914bfec6b"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkzODQwNw==", "bodyText": "Done", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r501938407", "createdAt": "2020-10-08T18:46:01Z", "author": {"login": "prithvip"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/DropFunctionTask.java", "diffHunk": "@@ -53,19 +58,29 @@ public String getName()\n     @Override\n     public String explain(DropFunction statement, List<Expression> parameters)\n     {\n-        return \"DROP FUNCTION \" + statement.getFunctionName();\n+        return format(\"DROP %sFUNCTION %s\", statement.isTemporary() ? \"TEMPORARY\" : \"\", statement.getFunctionName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxMTM1NA=="}, "originalCommit": {"oid": "731a2269b1050d946b62cc420c25b12914bfec6b"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzAzMDA3OnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/com/facebook/presto/spi/function/BasicSignature.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDo1Mjo1NFrOHZUkQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODo0NjoxMFrOHer5Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxMzQwOQ==", "bodyText": "inline and defensive copy\nthis.name = requireNonNull(...);\nthis.parameterType = ImmutableList.copyOf(..)", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r496313409", "createdAt": "2020-09-29T00:52:54Z", "author": {"login": "caithagoras"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/function/BasicSignature.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.spi.function;\n+\n+import com.facebook.presto.common.function.QualifiedFunctionName;\n+import com.facebook.presto.common.type.TypeSignature;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static java.util.Objects.requireNonNull;\n+import static java.util.stream.Collectors.toList;\n+\n+@JsonPropertyOrder(alphabetic = true)\n+public class BasicSignature\n+{\n+    private final QualifiedFunctionName name;\n+    private final List<TypeSignature> parameterTypes;\n+\n+    @JsonCreator\n+    public BasicSignature(\n+            @JsonProperty(\"name\") QualifiedFunctionName name,\n+            @JsonProperty(\"parameterTypes\") List<TypeSignature> parameterTypes)\n+    {\n+        requireNonNull(name, \"name is null\");\n+        requireNonNull(parameterTypes, \"parameterTypes is null\");\n+\n+        this.name = name;\n+        this.parameterTypes = parameterTypes;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "731a2269b1050d946b62cc420c25b12914bfec6b"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkzODUwMg==", "bodyText": "Done", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r501938502", "createdAt": "2020-10-08T18:46:10Z", "author": {"login": "prithvip"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/function/BasicSignature.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.spi.function;\n+\n+import com.facebook.presto.common.function.QualifiedFunctionName;\n+import com.facebook.presto.common.type.TypeSignature;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static java.util.Objects.requireNonNull;\n+import static java.util.stream.Collectors.toList;\n+\n+@JsonPropertyOrder(alphabetic = true)\n+public class BasicSignature\n+{\n+    private final QualifiedFunctionName name;\n+    private final List<TypeSignature> parameterTypes;\n+\n+    @JsonCreator\n+    public BasicSignature(\n+            @JsonProperty(\"name\") QualifiedFunctionName name,\n+            @JsonProperty(\"parameterTypes\") List<TypeSignature> parameterTypes)\n+    {\n+        requireNonNull(name, \"name is null\");\n+        requireNonNull(parameterTypes, \"parameterTypes is null\");\n+\n+        this.name = name;\n+        this.parameterTypes = parameterTypes;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxMzQwOQ=="}, "originalCommit": {"oid": "731a2269b1050d946b62cc420c25b12914bfec6b"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzAzMDUzOnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/com/facebook/presto/spi/function/BasicSignature.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDo1MzoxMlrOHZUkgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODo0NjoxOVrOHer5oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxMzQ3NQ==", "bodyText": "Avoid string concat. Use String.format instead.", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r496313475", "createdAt": "2020-09-29T00:53:12Z", "author": {"login": "caithagoras"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/function/BasicSignature.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.spi.function;\n+\n+import com.facebook.presto.common.function.QualifiedFunctionName;\n+import com.facebook.presto.common.type.TypeSignature;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static java.util.Objects.requireNonNull;\n+import static java.util.stream.Collectors.toList;\n+\n+@JsonPropertyOrder(alphabetic = true)\n+public class BasicSignature\n+{\n+    private final QualifiedFunctionName name;\n+    private final List<TypeSignature> parameterTypes;\n+\n+    @JsonCreator\n+    public BasicSignature(\n+            @JsonProperty(\"name\") QualifiedFunctionName name,\n+            @JsonProperty(\"parameterTypes\") List<TypeSignature> parameterTypes)\n+    {\n+        requireNonNull(name, \"name is null\");\n+        requireNonNull(parameterTypes, \"parameterTypes is null\");\n+\n+        this.name = name;\n+        this.parameterTypes = parameterTypes;\n+    }\n+\n+    public BasicSignature(Signature signature)\n+    {\n+        this(signature.getName(), signature.getArgumentTypes());\n+    }\n+\n+    @JsonProperty\n+    public QualifiedFunctionName getName()\n+    {\n+        return name;\n+    }\n+\n+    @JsonProperty\n+    public List<TypeSignature> getParameterTypes()\n+    {\n+        return parameterTypes;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o)\n+    {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        BasicSignature that = (BasicSignature) o;\n+        return Objects.equals(name, that.name) &&\n+                Objects.equals(parameterTypes, that.parameterTypes);\n+    }\n+\n+    @Override\n+    public int hashCode()\n+    {\n+        return Objects.hash(name, parameterTypes);\n+    }\n+\n+    @Override\n+    public String toString()\n+    {\n+        return name + \"(\" + String.join(\",\", parameterTypes.stream().map(TypeSignature::toString).collect(toList())) + \")\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "731a2269b1050d946b62cc420c25b12914bfec6b"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkzODU5Mw==", "bodyText": "Done", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r501938593", "createdAt": "2020-10-08T18:46:19Z", "author": {"login": "prithvip"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/function/BasicSignature.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.spi.function;\n+\n+import com.facebook.presto.common.function.QualifiedFunctionName;\n+import com.facebook.presto.common.type.TypeSignature;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static java.util.Objects.requireNonNull;\n+import static java.util.stream.Collectors.toList;\n+\n+@JsonPropertyOrder(alphabetic = true)\n+public class BasicSignature\n+{\n+    private final QualifiedFunctionName name;\n+    private final List<TypeSignature> parameterTypes;\n+\n+    @JsonCreator\n+    public BasicSignature(\n+            @JsonProperty(\"name\") QualifiedFunctionName name,\n+            @JsonProperty(\"parameterTypes\") List<TypeSignature> parameterTypes)\n+    {\n+        requireNonNull(name, \"name is null\");\n+        requireNonNull(parameterTypes, \"parameterTypes is null\");\n+\n+        this.name = name;\n+        this.parameterTypes = parameterTypes;\n+    }\n+\n+    public BasicSignature(Signature signature)\n+    {\n+        this(signature.getName(), signature.getArgumentTypes());\n+    }\n+\n+    @JsonProperty\n+    public QualifiedFunctionName getName()\n+    {\n+        return name;\n+    }\n+\n+    @JsonProperty\n+    public List<TypeSignature> getParameterTypes()\n+    {\n+        return parameterTypes;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o)\n+    {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        BasicSignature that = (BasicSignature) o;\n+        return Objects.equals(name, that.name) &&\n+                Objects.equals(parameterTypes, that.parameterTypes);\n+    }\n+\n+    @Override\n+    public int hashCode()\n+    {\n+        return Objects.hash(name, parameterTypes);\n+    }\n+\n+    @Override\n+    public String toString()\n+    {\n+        return name + \"(\" + String.join(\",\", parameterTypes.stream().map(TypeSignature::toString).collect(toList())) + \")\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxMzQ3NQ=="}, "originalCommit": {"oid": "731a2269b1050d946b62cc420c25b12914bfec6b"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzA0NDQ2OnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/com/facebook/presto/spi/function/BasicSignature.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMTowMTowMFrOHZUsdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODo0Njo0OFrOHer6vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxNTUxMA==", "bodyText": "Is this required?", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r496315510", "createdAt": "2020-09-29T01:01:00Z", "author": {"login": "caithagoras"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/function/BasicSignature.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.spi.function;\n+\n+import com.facebook.presto.common.function.QualifiedFunctionName;\n+import com.facebook.presto.common.type.TypeSignature;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static java.util.Objects.requireNonNull;\n+import static java.util.stream.Collectors.toList;\n+\n+@JsonPropertyOrder(alphabetic = true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "731a2269b1050d946b62cc420c25b12914bfec6b"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkzODg3OQ==", "bodyText": "Yes, I want to make sure the key is always serialized the same way, since we are using the JSON representation of BasicSignature as the string key", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r501938879", "createdAt": "2020-10-08T18:46:48Z", "author": {"login": "prithvip"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/function/BasicSignature.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.spi.function;\n+\n+import com.facebook.presto.common.function.QualifiedFunctionName;\n+import com.facebook.presto.common.type.TypeSignature;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static java.util.Objects.requireNonNull;\n+import static java.util.stream.Collectors.toList;\n+\n+@JsonPropertyOrder(alphabetic = true)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxNTUxMA=="}, "originalCommit": {"oid": "731a2269b1050d946b62cc420c25b12914bfec6b"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzA5MTQ2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryStateMachine.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMToyNzoxNFrOHZVHeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODo0Nzo1M1rOHer9AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyMjQyNQ==", "bodyText": "What you can do is to return a boolean to indicate success / failure. Throw on the caller side if needed.", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r496322425", "createdAt": "2020-09-29T01:27:14Z", "author": {"login": "caithagoras"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryStateMachine.java", "diffHunk": "@@ -549,6 +569,34 @@ public void removePreparedStatement(String key)\n         deallocatedPreparedStatements.add(key);\n     }\n \n+    public void addSessionFunction(BasicSignature signature, SqlInvokedFunction function)\n+    {\n+        requireNonNull(signature, \"signature is null\");\n+        requireNonNull(function, \"function is null\");\n+\n+        String serializedSignature = BasicSignatureSerDe.serialize(signature);\n+        String serializedFunction = SqlInvokedFunctionSerDe.serialize(function);\n+\n+        if (session.getSessionFunctions().containsKey(serializedSignature) || addedSessionFunctions.putIfAbsent(serializedSignature, serializedFunction) != null) {\n+            throw new PrestoException(ALREADY_EXISTS, String.format(\"Session function %s has already been defined\", signature));\n+        }\n+    }\n+\n+    public void removeSessionFunction(BasicSignature signature, boolean suppressNotFoundException)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "731a2269b1050d946b62cc420c25b12914bfec6b"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkzOTQ1Nw==", "bodyText": "I think it is a cleaner API to have QueryStateMachine throw, and this way is consistent with how prepared statements are handled in this class.", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r501939457", "createdAt": "2020-10-08T18:47:53Z", "author": {"login": "prithvip"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryStateMachine.java", "diffHunk": "@@ -549,6 +569,34 @@ public void removePreparedStatement(String key)\n         deallocatedPreparedStatements.add(key);\n     }\n \n+    public void addSessionFunction(BasicSignature signature, SqlInvokedFunction function)\n+    {\n+        requireNonNull(signature, \"signature is null\");\n+        requireNonNull(function, \"function is null\");\n+\n+        String serializedSignature = BasicSignatureSerDe.serialize(signature);\n+        String serializedFunction = SqlInvokedFunctionSerDe.serialize(function);\n+\n+        if (session.getSessionFunctions().containsKey(serializedSignature) || addedSessionFunctions.putIfAbsent(serializedSignature, serializedFunction) != null) {\n+            throw new PrestoException(ALREADY_EXISTS, String.format(\"Session function %s has already been defined\", signature));\n+        }\n+    }\n+\n+    public void removeSessionFunction(BasicSignature signature, boolean suppressNotFoundException)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyMjQyNQ=="}, "originalCommit": {"oid": "731a2269b1050d946b62cc420c25b12914bfec6b"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzA5MTgzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryStateMachine.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMToyNzozMVrOHZVHuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODo0ODowNFrOHer9dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyMjQ5MQ==", "bodyText": "static import String.format", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r496322491", "createdAt": "2020-09-29T01:27:31Z", "author": {"login": "caithagoras"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryStateMachine.java", "diffHunk": "@@ -549,6 +569,34 @@ public void removePreparedStatement(String key)\n         deallocatedPreparedStatements.add(key);\n     }\n \n+    public void addSessionFunction(BasicSignature signature, SqlInvokedFunction function)\n+    {\n+        requireNonNull(signature, \"signature is null\");\n+        requireNonNull(function, \"function is null\");\n+\n+        String serializedSignature = BasicSignatureSerDe.serialize(signature);\n+        String serializedFunction = SqlInvokedFunctionSerDe.serialize(function);\n+\n+        if (session.getSessionFunctions().containsKey(serializedSignature) || addedSessionFunctions.putIfAbsent(serializedSignature, serializedFunction) != null) {\n+            throw new PrestoException(ALREADY_EXISTS, String.format(\"Session function %s has already been defined\", signature));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "731a2269b1050d946b62cc420c25b12914bfec6b"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkzOTU3Mg==", "bodyText": "Done", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r501939572", "createdAt": "2020-10-08T18:48:04Z", "author": {"login": "prithvip"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryStateMachine.java", "diffHunk": "@@ -549,6 +569,34 @@ public void removePreparedStatement(String key)\n         deallocatedPreparedStatements.add(key);\n     }\n \n+    public void addSessionFunction(BasicSignature signature, SqlInvokedFunction function)\n+    {\n+        requireNonNull(signature, \"signature is null\");\n+        requireNonNull(function, \"function is null\");\n+\n+        String serializedSignature = BasicSignatureSerDe.serialize(signature);\n+        String serializedFunction = SqlInvokedFunctionSerDe.serialize(function);\n+\n+        if (session.getSessionFunctions().containsKey(serializedSignature) || addedSessionFunctions.putIfAbsent(serializedSignature, serializedFunction) != null) {\n+            throw new PrestoException(ALREADY_EXISTS, String.format(\"Session function %s has already been defined\", signature));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyMjQ5MQ=="}, "originalCommit": {"oid": "731a2269b1050d946b62cc420c25b12914bfec6b"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzA5MzMyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryStateMachine.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMToyODoyNlrOHZVIpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODo0ODo0M1rOHer-tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyMjcyNg==", "bodyText": "Unnecessary. If null, line 577 will throw.", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r496322726", "createdAt": "2020-09-29T01:28:26Z", "author": {"login": "caithagoras"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryStateMachine.java", "diffHunk": "@@ -549,6 +569,34 @@ public void removePreparedStatement(String key)\n         deallocatedPreparedStatements.add(key);\n     }\n \n+    public void addSessionFunction(BasicSignature signature, SqlInvokedFunction function)\n+    {\n+        requireNonNull(signature, \"signature is null\");\n+        requireNonNull(function, \"function is null\");\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "731a2269b1050d946b62cc420c25b12914bfec6b"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkzOTg5Mw==", "bodyText": "I don't think it would necessarily throw here? This is defensive to make sure we never put nulls as keys or values in our map.", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r501939893", "createdAt": "2020-10-08T18:48:43Z", "author": {"login": "prithvip"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryStateMachine.java", "diffHunk": "@@ -549,6 +569,34 @@ public void removePreparedStatement(String key)\n         deallocatedPreparedStatements.add(key);\n     }\n \n+    public void addSessionFunction(BasicSignature signature, SqlInvokedFunction function)\n+    {\n+        requireNonNull(signature, \"signature is null\");\n+        requireNonNull(function, \"function is null\");\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyMjcyNg=="}, "originalCommit": {"oid": "731a2269b1050d946b62cc420c25b12914bfec6b"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzEwNDg2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryStateMachine.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMTozNDo1OFrOHZVPPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODo0OToxMFrOHer_mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyNDQxNQ==", "bodyText": "I don't like that they're still Strings in QueryStateMachine - they should have already been deserialized by now.", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r496324415", "createdAt": "2020-09-29T01:34:58Z", "author": {"login": "caithagoras"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryStateMachine.java", "diffHunk": "@@ -141,6 +146,9 @@\n     private final AtomicReference<Optional<Output>> output = new AtomicReference<>(Optional.empty());\n     private final StateMachine<Optional<QueryInfo>> finalQueryInfo;\n \n+    private final Map<String, String> addedSessionFunctions = new ConcurrentHashMap<>();\n+    private final Set<String> removedSessionFunctions = Sets.newConcurrentHashSet();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "731a2269b1050d946b62cc420c25b12914bfec6b"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk0MDEyMw==", "bodyText": "I've changed everything on the server-side to Map<BasicSignature, SqlInvokedFunction>", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r501940123", "createdAt": "2020-10-08T18:49:10Z", "author": {"login": "prithvip"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryStateMachine.java", "diffHunk": "@@ -141,6 +146,9 @@\n     private final AtomicReference<Optional<Output>> output = new AtomicReference<>(Optional.empty());\n     private final StateMachine<Optional<QueryInfo>> finalQueryInfo;\n \n+    private final Map<String, String> addedSessionFunctions = new ConcurrentHashMap<>();\n+    private final Set<String> removedSessionFunctions = Sets.newConcurrentHashSet();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyNDQxNQ=="}, "originalCommit": {"oid": "731a2269b1050d946b62cc420c25b12914bfec6b"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzEwNjM3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/metadata/SessionFunctionRegistry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMTozNTo0MFrOHZVQCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODo0OToxOVrOHer_0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyNDYxOQ==", "bodyText": "Map instead of ImmutableMap", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r496324619", "createdAt": "2020-09-29T01:35:40Z", "author": {"login": "caithagoras"}, "path": "presto-main/src/main/java/com/facebook/presto/metadata/SessionFunctionRegistry.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.metadata;\n+\n+import com.facebook.presto.common.CatalogSchemaName;\n+import com.facebook.presto.common.function.QualifiedFunctionName;\n+import com.facebook.presto.spi.function.BasicSignature;\n+import com.facebook.presto.spi.function.FunctionHandle;\n+import com.facebook.presto.spi.function.FunctionImplementationType;\n+import com.facebook.presto.spi.function.FunctionMetadata;\n+import com.facebook.presto.spi.function.FunctionNamespaceTransactionHandle;\n+import com.facebook.presto.spi.function.FunctionRegistry;\n+import com.facebook.presto.spi.function.Parameter;\n+import com.facebook.presto.spi.function.ScalarFunctionImplementation;\n+import com.facebook.presto.spi.function.Signature;\n+import com.facebook.presto.spi.function.SqlFunction;\n+import com.facebook.presto.spi.function.SqlInvokedFunction;\n+import com.facebook.presto.spi.function.SqlInvokedScalarFunctionImplementation;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.collect.ImmutableMap;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.server.SerializationUtils.BasicSignatureSerDe;\n+import static com.facebook.presto.server.SerializationUtils.SqlInvokedFunctionSerDe;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.util.stream.Collectors.collectingAndThen;\n+import static java.util.stream.Collectors.toMap;\n+\n+public class SessionFunctionRegistry\n+        implements FunctionRegistry<SqlFunction>\n+{\n+    public static final CatalogSchemaName SESSION_NAMESPACE = new CatalogSchemaName(\"presto\", \"session\");\n+\n+    private final ImmutableMap<BasicSignature, SqlInvokedFunction> sessionFunctions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "731a2269b1050d946b62cc420c25b12914bfec6b"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk0MDE3OQ==", "bodyText": "Done", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r501940179", "createdAt": "2020-10-08T18:49:19Z", "author": {"login": "prithvip"}, "path": "presto-main/src/main/java/com/facebook/presto/metadata/SessionFunctionRegistry.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.metadata;\n+\n+import com.facebook.presto.common.CatalogSchemaName;\n+import com.facebook.presto.common.function.QualifiedFunctionName;\n+import com.facebook.presto.spi.function.BasicSignature;\n+import com.facebook.presto.spi.function.FunctionHandle;\n+import com.facebook.presto.spi.function.FunctionImplementationType;\n+import com.facebook.presto.spi.function.FunctionMetadata;\n+import com.facebook.presto.spi.function.FunctionNamespaceTransactionHandle;\n+import com.facebook.presto.spi.function.FunctionRegistry;\n+import com.facebook.presto.spi.function.Parameter;\n+import com.facebook.presto.spi.function.ScalarFunctionImplementation;\n+import com.facebook.presto.spi.function.Signature;\n+import com.facebook.presto.spi.function.SqlFunction;\n+import com.facebook.presto.spi.function.SqlInvokedFunction;\n+import com.facebook.presto.spi.function.SqlInvokedScalarFunctionImplementation;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.collect.ImmutableMap;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.server.SerializationUtils.BasicSignatureSerDe;\n+import static com.facebook.presto.server.SerializationUtils.SqlInvokedFunctionSerDe;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.util.stream.Collectors.collectingAndThen;\n+import static java.util.stream.Collectors.toMap;\n+\n+public class SessionFunctionRegistry\n+        implements FunctionRegistry<SqlFunction>\n+{\n+    public static final CatalogSchemaName SESSION_NAMESPACE = new CatalogSchemaName(\"presto\", \"session\");\n+\n+    private final ImmutableMap<BasicSignature, SqlInvokedFunction> sessionFunctions;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyNDYxOQ=="}, "originalCommit": {"oid": "731a2269b1050d946b62cc420c25b12914bfec6b"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzEwNzcyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/metadata/SessionFunctionRegistry.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMTozNjoxM1rOHZVQsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODo0OTo1OFrOHesBTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyNDc4Ng==", "bodyText": "Does it has to be array list, since sessionFunctions.values() is already a Collection?", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r496324786", "createdAt": "2020-09-29T01:36:13Z", "author": {"login": "caithagoras"}, "path": "presto-main/src/main/java/com/facebook/presto/metadata/SessionFunctionRegistry.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.metadata;\n+\n+import com.facebook.presto.common.CatalogSchemaName;\n+import com.facebook.presto.common.function.QualifiedFunctionName;\n+import com.facebook.presto.spi.function.BasicSignature;\n+import com.facebook.presto.spi.function.FunctionHandle;\n+import com.facebook.presto.spi.function.FunctionImplementationType;\n+import com.facebook.presto.spi.function.FunctionMetadata;\n+import com.facebook.presto.spi.function.FunctionNamespaceTransactionHandle;\n+import com.facebook.presto.spi.function.FunctionRegistry;\n+import com.facebook.presto.spi.function.Parameter;\n+import com.facebook.presto.spi.function.ScalarFunctionImplementation;\n+import com.facebook.presto.spi.function.Signature;\n+import com.facebook.presto.spi.function.SqlFunction;\n+import com.facebook.presto.spi.function.SqlInvokedFunction;\n+import com.facebook.presto.spi.function.SqlInvokedScalarFunctionImplementation;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.collect.ImmutableMap;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.server.SerializationUtils.BasicSignatureSerDe;\n+import static com.facebook.presto.server.SerializationUtils.SqlInvokedFunctionSerDe;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.util.stream.Collectors.collectingAndThen;\n+import static java.util.stream.Collectors.toMap;\n+\n+public class SessionFunctionRegistry\n+        implements FunctionRegistry<SqlFunction>\n+{\n+    public static final CatalogSchemaName SESSION_NAMESPACE = new CatalogSchemaName(\"presto\", \"session\");\n+\n+    private final ImmutableMap<BasicSignature, SqlInvokedFunction> sessionFunctions;\n+\n+    public SessionFunctionRegistry(Map<String, String> sessionFunctions)\n+    {\n+        this.sessionFunctions = sessionFunctions.entrySet().stream().collect(collectingAndThen(toMap(\n+                e -> BasicSignatureSerDe.deserialize(e.getKey()),\n+                e -> SqlInvokedFunctionSerDe.deserialize(e.getValue())), ImmutableMap::copyOf));\n+    }\n+\n+    @Override\n+    public Collection<SqlFunction> listFunctions()\n+    {\n+        return new ArrayList<>(sessionFunctions.values());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "731a2269b1050d946b62cc420c25b12914bfec6b"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk0MDU1OA==", "bodyText": "Yes, we need to create a new List because sessionFunctions.values() is Collection of SqlInvokedFunction and we need Collection of SqlFunction", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r501940558", "createdAt": "2020-10-08T18:49:58Z", "author": {"login": "prithvip"}, "path": "presto-main/src/main/java/com/facebook/presto/metadata/SessionFunctionRegistry.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.metadata;\n+\n+import com.facebook.presto.common.CatalogSchemaName;\n+import com.facebook.presto.common.function.QualifiedFunctionName;\n+import com.facebook.presto.spi.function.BasicSignature;\n+import com.facebook.presto.spi.function.FunctionHandle;\n+import com.facebook.presto.spi.function.FunctionImplementationType;\n+import com.facebook.presto.spi.function.FunctionMetadata;\n+import com.facebook.presto.spi.function.FunctionNamespaceTransactionHandle;\n+import com.facebook.presto.spi.function.FunctionRegistry;\n+import com.facebook.presto.spi.function.Parameter;\n+import com.facebook.presto.spi.function.ScalarFunctionImplementation;\n+import com.facebook.presto.spi.function.Signature;\n+import com.facebook.presto.spi.function.SqlFunction;\n+import com.facebook.presto.spi.function.SqlInvokedFunction;\n+import com.facebook.presto.spi.function.SqlInvokedScalarFunctionImplementation;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.collect.ImmutableMap;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.server.SerializationUtils.BasicSignatureSerDe;\n+import static com.facebook.presto.server.SerializationUtils.SqlInvokedFunctionSerDe;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.util.stream.Collectors.collectingAndThen;\n+import static java.util.stream.Collectors.toMap;\n+\n+public class SessionFunctionRegistry\n+        implements FunctionRegistry<SqlFunction>\n+{\n+    public static final CatalogSchemaName SESSION_NAMESPACE = new CatalogSchemaName(\"presto\", \"session\");\n+\n+    private final ImmutableMap<BasicSignature, SqlInvokedFunction> sessionFunctions;\n+\n+    public SessionFunctionRegistry(Map<String, String> sessionFunctions)\n+    {\n+        this.sessionFunctions = sessionFunctions.entrySet().stream().collect(collectingAndThen(toMap(\n+                e -> BasicSignatureSerDe.deserialize(e.getKey()),\n+                e -> SqlInvokedFunctionSerDe.deserialize(e.getValue())), ImmutableMap::copyOf));\n+    }\n+\n+    @Override\n+    public Collection<SqlFunction> listFunctions()\n+    {\n+        return new ArrayList<>(sessionFunctions.values());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyNDc4Ng=="}, "originalCommit": {"oid": "731a2269b1050d946b62cc420c25b12914bfec6b"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzExMDA0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/metadata/SessionFunctionRegistry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMTozNzozNFrOHZVSGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODo1MDoyN1rOHesCfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyNTE0NA==", "bodyText": "nit: just call this sqlFunction", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r496325144", "createdAt": "2020-09-29T01:37:34Z", "author": {"login": "caithagoras"}, "path": "presto-main/src/main/java/com/facebook/presto/metadata/SessionFunctionRegistry.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.metadata;\n+\n+import com.facebook.presto.common.CatalogSchemaName;\n+import com.facebook.presto.common.function.QualifiedFunctionName;\n+import com.facebook.presto.spi.function.BasicSignature;\n+import com.facebook.presto.spi.function.FunctionHandle;\n+import com.facebook.presto.spi.function.FunctionImplementationType;\n+import com.facebook.presto.spi.function.FunctionMetadata;\n+import com.facebook.presto.spi.function.FunctionNamespaceTransactionHandle;\n+import com.facebook.presto.spi.function.FunctionRegistry;\n+import com.facebook.presto.spi.function.Parameter;\n+import com.facebook.presto.spi.function.ScalarFunctionImplementation;\n+import com.facebook.presto.spi.function.Signature;\n+import com.facebook.presto.spi.function.SqlFunction;\n+import com.facebook.presto.spi.function.SqlInvokedFunction;\n+import com.facebook.presto.spi.function.SqlInvokedScalarFunctionImplementation;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.collect.ImmutableMap;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.server.SerializationUtils.BasicSignatureSerDe;\n+import static com.facebook.presto.server.SerializationUtils.SqlInvokedFunctionSerDe;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.util.stream.Collectors.collectingAndThen;\n+import static java.util.stream.Collectors.toMap;\n+\n+public class SessionFunctionRegistry\n+        implements FunctionRegistry<SqlFunction>\n+{\n+    public static final CatalogSchemaName SESSION_NAMESPACE = new CatalogSchemaName(\"presto\", \"session\");\n+\n+    private final ImmutableMap<BasicSignature, SqlInvokedFunction> sessionFunctions;\n+\n+    public SessionFunctionRegistry(Map<String, String> sessionFunctions)\n+    {\n+        this.sessionFunctions = sessionFunctions.entrySet().stream().collect(collectingAndThen(toMap(\n+                e -> BasicSignatureSerDe.deserialize(e.getKey()),\n+                e -> SqlInvokedFunctionSerDe.deserialize(e.getValue())), ImmutableMap::copyOf));\n+    }\n+\n+    @Override\n+    public Collection<SqlFunction> listFunctions()\n+    {\n+        return new ArrayList<>(sessionFunctions.values());\n+    }\n+\n+    @Override\n+    public Collection<SqlFunction> getFunctions(Optional<? extends FunctionNamespaceTransactionHandle> transactionHandle, QualifiedFunctionName functionName)\n+    {\n+        return sessionFunctions.entrySet().stream()\n+                .filter(e -> e.getKey().getName().getFunctionName().equals(functionName.getFunctionName()))\n+                .map(Map.Entry::getValue)\n+                .collect(toImmutableList());\n+    }\n+\n+    @Override\n+    public FunctionHandle getFunctionHandle(Optional<? extends FunctionNamespaceTransactionHandle> transactionHandle, Signature signature)\n+    {\n+        return new SessionFunctionHandle(sessionFunctions.get(new BasicSignature(signature)));\n+    }\n+\n+    @Override\n+    public FunctionMetadata getFunctionMetadata(FunctionHandle functionHandle)\n+    {\n+        checkArgument(functionHandle instanceof SessionFunctionHandle, \"Expected SessionFunctionHandle, got %s\", functionHandle.getClass());\n+        return ((SessionFunctionHandle) functionHandle).getFunctionMetadata();\n+    }\n+\n+    @Override\n+    public ScalarFunctionImplementation getScalarFunctionImplementation(FunctionHandle functionHandle)\n+    {\n+        checkArgument(functionHandle instanceof SessionFunctionHandle, \"Expected SessionFunctionHandle, got %s\", functionHandle.getClass());\n+        return ((SessionFunctionHandle) functionHandle).getScalarFunctionImplementation();\n+    }\n+\n+    public static class SessionFunctionHandle\n+            implements FunctionHandle\n+    {\n+        public final SqlInvokedFunction sqlFunction;\n+\n+        @JsonCreator\n+        public SessionFunctionHandle(@JsonProperty(\"sqlFunction\") SqlInvokedFunction sqlInvokedFunction)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "731a2269b1050d946b62cc420c25b12914bfec6b"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk0MDg2Mw==", "bodyText": "Done", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r501940863", "createdAt": "2020-10-08T18:50:27Z", "author": {"login": "prithvip"}, "path": "presto-main/src/main/java/com/facebook/presto/metadata/SessionFunctionRegistry.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.metadata;\n+\n+import com.facebook.presto.common.CatalogSchemaName;\n+import com.facebook.presto.common.function.QualifiedFunctionName;\n+import com.facebook.presto.spi.function.BasicSignature;\n+import com.facebook.presto.spi.function.FunctionHandle;\n+import com.facebook.presto.spi.function.FunctionImplementationType;\n+import com.facebook.presto.spi.function.FunctionMetadata;\n+import com.facebook.presto.spi.function.FunctionNamespaceTransactionHandle;\n+import com.facebook.presto.spi.function.FunctionRegistry;\n+import com.facebook.presto.spi.function.Parameter;\n+import com.facebook.presto.spi.function.ScalarFunctionImplementation;\n+import com.facebook.presto.spi.function.Signature;\n+import com.facebook.presto.spi.function.SqlFunction;\n+import com.facebook.presto.spi.function.SqlInvokedFunction;\n+import com.facebook.presto.spi.function.SqlInvokedScalarFunctionImplementation;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.collect.ImmutableMap;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.server.SerializationUtils.BasicSignatureSerDe;\n+import static com.facebook.presto.server.SerializationUtils.SqlInvokedFunctionSerDe;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.util.stream.Collectors.collectingAndThen;\n+import static java.util.stream.Collectors.toMap;\n+\n+public class SessionFunctionRegistry\n+        implements FunctionRegistry<SqlFunction>\n+{\n+    public static final CatalogSchemaName SESSION_NAMESPACE = new CatalogSchemaName(\"presto\", \"session\");\n+\n+    private final ImmutableMap<BasicSignature, SqlInvokedFunction> sessionFunctions;\n+\n+    public SessionFunctionRegistry(Map<String, String> sessionFunctions)\n+    {\n+        this.sessionFunctions = sessionFunctions.entrySet().stream().collect(collectingAndThen(toMap(\n+                e -> BasicSignatureSerDe.deserialize(e.getKey()),\n+                e -> SqlInvokedFunctionSerDe.deserialize(e.getValue())), ImmutableMap::copyOf));\n+    }\n+\n+    @Override\n+    public Collection<SqlFunction> listFunctions()\n+    {\n+        return new ArrayList<>(sessionFunctions.values());\n+    }\n+\n+    @Override\n+    public Collection<SqlFunction> getFunctions(Optional<? extends FunctionNamespaceTransactionHandle> transactionHandle, QualifiedFunctionName functionName)\n+    {\n+        return sessionFunctions.entrySet().stream()\n+                .filter(e -> e.getKey().getName().getFunctionName().equals(functionName.getFunctionName()))\n+                .map(Map.Entry::getValue)\n+                .collect(toImmutableList());\n+    }\n+\n+    @Override\n+    public FunctionHandle getFunctionHandle(Optional<? extends FunctionNamespaceTransactionHandle> transactionHandle, Signature signature)\n+    {\n+        return new SessionFunctionHandle(sessionFunctions.get(new BasicSignature(signature)));\n+    }\n+\n+    @Override\n+    public FunctionMetadata getFunctionMetadata(FunctionHandle functionHandle)\n+    {\n+        checkArgument(functionHandle instanceof SessionFunctionHandle, \"Expected SessionFunctionHandle, got %s\", functionHandle.getClass());\n+        return ((SessionFunctionHandle) functionHandle).getFunctionMetadata();\n+    }\n+\n+    @Override\n+    public ScalarFunctionImplementation getScalarFunctionImplementation(FunctionHandle functionHandle)\n+    {\n+        checkArgument(functionHandle instanceof SessionFunctionHandle, \"Expected SessionFunctionHandle, got %s\", functionHandle.getClass());\n+        return ((SessionFunctionHandle) functionHandle).getScalarFunctionImplementation();\n+    }\n+\n+    public static class SessionFunctionHandle\n+            implements FunctionHandle\n+    {\n+        public final SqlInvokedFunction sqlFunction;\n+\n+        @JsonCreator\n+        public SessionFunctionHandle(@JsonProperty(\"sqlFunction\") SqlInvokedFunction sqlInvokedFunction)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyNTE0NA=="}, "originalCommit": {"oid": "731a2269b1050d946b62cc420c25b12914bfec6b"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzExMDE1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/metadata/SessionFunctionRegistry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMTozNzo0MFrOHZVSKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODo1MDozNlrOHesCxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyNTE2Mg==", "bodyText": "nit: requireNonNull", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r496325162", "createdAt": "2020-09-29T01:37:40Z", "author": {"login": "caithagoras"}, "path": "presto-main/src/main/java/com/facebook/presto/metadata/SessionFunctionRegistry.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.metadata;\n+\n+import com.facebook.presto.common.CatalogSchemaName;\n+import com.facebook.presto.common.function.QualifiedFunctionName;\n+import com.facebook.presto.spi.function.BasicSignature;\n+import com.facebook.presto.spi.function.FunctionHandle;\n+import com.facebook.presto.spi.function.FunctionImplementationType;\n+import com.facebook.presto.spi.function.FunctionMetadata;\n+import com.facebook.presto.spi.function.FunctionNamespaceTransactionHandle;\n+import com.facebook.presto.spi.function.FunctionRegistry;\n+import com.facebook.presto.spi.function.Parameter;\n+import com.facebook.presto.spi.function.ScalarFunctionImplementation;\n+import com.facebook.presto.spi.function.Signature;\n+import com.facebook.presto.spi.function.SqlFunction;\n+import com.facebook.presto.spi.function.SqlInvokedFunction;\n+import com.facebook.presto.spi.function.SqlInvokedScalarFunctionImplementation;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.collect.ImmutableMap;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.server.SerializationUtils.BasicSignatureSerDe;\n+import static com.facebook.presto.server.SerializationUtils.SqlInvokedFunctionSerDe;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.util.stream.Collectors.collectingAndThen;\n+import static java.util.stream.Collectors.toMap;\n+\n+public class SessionFunctionRegistry\n+        implements FunctionRegistry<SqlFunction>\n+{\n+    public static final CatalogSchemaName SESSION_NAMESPACE = new CatalogSchemaName(\"presto\", \"session\");\n+\n+    private final ImmutableMap<BasicSignature, SqlInvokedFunction> sessionFunctions;\n+\n+    public SessionFunctionRegistry(Map<String, String> sessionFunctions)\n+    {\n+        this.sessionFunctions = sessionFunctions.entrySet().stream().collect(collectingAndThen(toMap(\n+                e -> BasicSignatureSerDe.deserialize(e.getKey()),\n+                e -> SqlInvokedFunctionSerDe.deserialize(e.getValue())), ImmutableMap::copyOf));\n+    }\n+\n+    @Override\n+    public Collection<SqlFunction> listFunctions()\n+    {\n+        return new ArrayList<>(sessionFunctions.values());\n+    }\n+\n+    @Override\n+    public Collection<SqlFunction> getFunctions(Optional<? extends FunctionNamespaceTransactionHandle> transactionHandle, QualifiedFunctionName functionName)\n+    {\n+        return sessionFunctions.entrySet().stream()\n+                .filter(e -> e.getKey().getName().getFunctionName().equals(functionName.getFunctionName()))\n+                .map(Map.Entry::getValue)\n+                .collect(toImmutableList());\n+    }\n+\n+    @Override\n+    public FunctionHandle getFunctionHandle(Optional<? extends FunctionNamespaceTransactionHandle> transactionHandle, Signature signature)\n+    {\n+        return new SessionFunctionHandle(sessionFunctions.get(new BasicSignature(signature)));\n+    }\n+\n+    @Override\n+    public FunctionMetadata getFunctionMetadata(FunctionHandle functionHandle)\n+    {\n+        checkArgument(functionHandle instanceof SessionFunctionHandle, \"Expected SessionFunctionHandle, got %s\", functionHandle.getClass());\n+        return ((SessionFunctionHandle) functionHandle).getFunctionMetadata();\n+    }\n+\n+    @Override\n+    public ScalarFunctionImplementation getScalarFunctionImplementation(FunctionHandle functionHandle)\n+    {\n+        checkArgument(functionHandle instanceof SessionFunctionHandle, \"Expected SessionFunctionHandle, got %s\", functionHandle.getClass());\n+        return ((SessionFunctionHandle) functionHandle).getScalarFunctionImplementation();\n+    }\n+\n+    public static class SessionFunctionHandle\n+            implements FunctionHandle\n+    {\n+        public final SqlInvokedFunction sqlFunction;\n+\n+        @JsonCreator\n+        public SessionFunctionHandle(@JsonProperty(\"sqlFunction\") SqlInvokedFunction sqlInvokedFunction)\n+        {\n+            this.sqlFunction = sqlInvokedFunction;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "731a2269b1050d946b62cc420c25b12914bfec6b"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk0MDkzMw==", "bodyText": "Done", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r501940933", "createdAt": "2020-10-08T18:50:36Z", "author": {"login": "prithvip"}, "path": "presto-main/src/main/java/com/facebook/presto/metadata/SessionFunctionRegistry.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.metadata;\n+\n+import com.facebook.presto.common.CatalogSchemaName;\n+import com.facebook.presto.common.function.QualifiedFunctionName;\n+import com.facebook.presto.spi.function.BasicSignature;\n+import com.facebook.presto.spi.function.FunctionHandle;\n+import com.facebook.presto.spi.function.FunctionImplementationType;\n+import com.facebook.presto.spi.function.FunctionMetadata;\n+import com.facebook.presto.spi.function.FunctionNamespaceTransactionHandle;\n+import com.facebook.presto.spi.function.FunctionRegistry;\n+import com.facebook.presto.spi.function.Parameter;\n+import com.facebook.presto.spi.function.ScalarFunctionImplementation;\n+import com.facebook.presto.spi.function.Signature;\n+import com.facebook.presto.spi.function.SqlFunction;\n+import com.facebook.presto.spi.function.SqlInvokedFunction;\n+import com.facebook.presto.spi.function.SqlInvokedScalarFunctionImplementation;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.collect.ImmutableMap;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.server.SerializationUtils.BasicSignatureSerDe;\n+import static com.facebook.presto.server.SerializationUtils.SqlInvokedFunctionSerDe;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.util.stream.Collectors.collectingAndThen;\n+import static java.util.stream.Collectors.toMap;\n+\n+public class SessionFunctionRegistry\n+        implements FunctionRegistry<SqlFunction>\n+{\n+    public static final CatalogSchemaName SESSION_NAMESPACE = new CatalogSchemaName(\"presto\", \"session\");\n+\n+    private final ImmutableMap<BasicSignature, SqlInvokedFunction> sessionFunctions;\n+\n+    public SessionFunctionRegistry(Map<String, String> sessionFunctions)\n+    {\n+        this.sessionFunctions = sessionFunctions.entrySet().stream().collect(collectingAndThen(toMap(\n+                e -> BasicSignatureSerDe.deserialize(e.getKey()),\n+                e -> SqlInvokedFunctionSerDe.deserialize(e.getValue())), ImmutableMap::copyOf));\n+    }\n+\n+    @Override\n+    public Collection<SqlFunction> listFunctions()\n+    {\n+        return new ArrayList<>(sessionFunctions.values());\n+    }\n+\n+    @Override\n+    public Collection<SqlFunction> getFunctions(Optional<? extends FunctionNamespaceTransactionHandle> transactionHandle, QualifiedFunctionName functionName)\n+    {\n+        return sessionFunctions.entrySet().stream()\n+                .filter(e -> e.getKey().getName().getFunctionName().equals(functionName.getFunctionName()))\n+                .map(Map.Entry::getValue)\n+                .collect(toImmutableList());\n+    }\n+\n+    @Override\n+    public FunctionHandle getFunctionHandle(Optional<? extends FunctionNamespaceTransactionHandle> transactionHandle, Signature signature)\n+    {\n+        return new SessionFunctionHandle(sessionFunctions.get(new BasicSignature(signature)));\n+    }\n+\n+    @Override\n+    public FunctionMetadata getFunctionMetadata(FunctionHandle functionHandle)\n+    {\n+        checkArgument(functionHandle instanceof SessionFunctionHandle, \"Expected SessionFunctionHandle, got %s\", functionHandle.getClass());\n+        return ((SessionFunctionHandle) functionHandle).getFunctionMetadata();\n+    }\n+\n+    @Override\n+    public ScalarFunctionImplementation getScalarFunctionImplementation(FunctionHandle functionHandle)\n+    {\n+        checkArgument(functionHandle instanceof SessionFunctionHandle, \"Expected SessionFunctionHandle, got %s\", functionHandle.getClass());\n+        return ((SessionFunctionHandle) functionHandle).getScalarFunctionImplementation();\n+    }\n+\n+    public static class SessionFunctionHandle\n+            implements FunctionHandle\n+    {\n+        public final SqlInvokedFunction sqlFunction;\n+\n+        @JsonCreator\n+        public SessionFunctionHandle(@JsonProperty(\"sqlFunction\") SqlInvokedFunction sqlInvokedFunction)\n+        {\n+            this.sqlFunction = sqlInvokedFunction;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyNTE2Mg=="}, "originalCommit": {"oid": "731a2269b1050d946b62cc420c25b12914bfec6b"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzExMDI4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/metadata/SessionFunctionRegistry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMTozNzo0NFrOHZVSPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODo1MDo0N1rOHesDOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyNTE4Mg==", "bodyText": "private?", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r496325182", "createdAt": "2020-09-29T01:37:44Z", "author": {"login": "caithagoras"}, "path": "presto-main/src/main/java/com/facebook/presto/metadata/SessionFunctionRegistry.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.metadata;\n+\n+import com.facebook.presto.common.CatalogSchemaName;\n+import com.facebook.presto.common.function.QualifiedFunctionName;\n+import com.facebook.presto.spi.function.BasicSignature;\n+import com.facebook.presto.spi.function.FunctionHandle;\n+import com.facebook.presto.spi.function.FunctionImplementationType;\n+import com.facebook.presto.spi.function.FunctionMetadata;\n+import com.facebook.presto.spi.function.FunctionNamespaceTransactionHandle;\n+import com.facebook.presto.spi.function.FunctionRegistry;\n+import com.facebook.presto.spi.function.Parameter;\n+import com.facebook.presto.spi.function.ScalarFunctionImplementation;\n+import com.facebook.presto.spi.function.Signature;\n+import com.facebook.presto.spi.function.SqlFunction;\n+import com.facebook.presto.spi.function.SqlInvokedFunction;\n+import com.facebook.presto.spi.function.SqlInvokedScalarFunctionImplementation;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.collect.ImmutableMap;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.server.SerializationUtils.BasicSignatureSerDe;\n+import static com.facebook.presto.server.SerializationUtils.SqlInvokedFunctionSerDe;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.util.stream.Collectors.collectingAndThen;\n+import static java.util.stream.Collectors.toMap;\n+\n+public class SessionFunctionRegistry\n+        implements FunctionRegistry<SqlFunction>\n+{\n+    public static final CatalogSchemaName SESSION_NAMESPACE = new CatalogSchemaName(\"presto\", \"session\");\n+\n+    private final ImmutableMap<BasicSignature, SqlInvokedFunction> sessionFunctions;\n+\n+    public SessionFunctionRegistry(Map<String, String> sessionFunctions)\n+    {\n+        this.sessionFunctions = sessionFunctions.entrySet().stream().collect(collectingAndThen(toMap(\n+                e -> BasicSignatureSerDe.deserialize(e.getKey()),\n+                e -> SqlInvokedFunctionSerDe.deserialize(e.getValue())), ImmutableMap::copyOf));\n+    }\n+\n+    @Override\n+    public Collection<SqlFunction> listFunctions()\n+    {\n+        return new ArrayList<>(sessionFunctions.values());\n+    }\n+\n+    @Override\n+    public Collection<SqlFunction> getFunctions(Optional<? extends FunctionNamespaceTransactionHandle> transactionHandle, QualifiedFunctionName functionName)\n+    {\n+        return sessionFunctions.entrySet().stream()\n+                .filter(e -> e.getKey().getName().getFunctionName().equals(functionName.getFunctionName()))\n+                .map(Map.Entry::getValue)\n+                .collect(toImmutableList());\n+    }\n+\n+    @Override\n+    public FunctionHandle getFunctionHandle(Optional<? extends FunctionNamespaceTransactionHandle> transactionHandle, Signature signature)\n+    {\n+        return new SessionFunctionHandle(sessionFunctions.get(new BasicSignature(signature)));\n+    }\n+\n+    @Override\n+    public FunctionMetadata getFunctionMetadata(FunctionHandle functionHandle)\n+    {\n+        checkArgument(functionHandle instanceof SessionFunctionHandle, \"Expected SessionFunctionHandle, got %s\", functionHandle.getClass());\n+        return ((SessionFunctionHandle) functionHandle).getFunctionMetadata();\n+    }\n+\n+    @Override\n+    public ScalarFunctionImplementation getScalarFunctionImplementation(FunctionHandle functionHandle)\n+    {\n+        checkArgument(functionHandle instanceof SessionFunctionHandle, \"Expected SessionFunctionHandle, got %s\", functionHandle.getClass());\n+        return ((SessionFunctionHandle) functionHandle).getScalarFunctionImplementation();\n+    }\n+\n+    public static class SessionFunctionHandle\n+            implements FunctionHandle\n+    {\n+        public final SqlInvokedFunction sqlFunction;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "731a2269b1050d946b62cc420c25b12914bfec6b"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk0MTA0OA==", "bodyText": "Done", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r501941048", "createdAt": "2020-10-08T18:50:47Z", "author": {"login": "prithvip"}, "path": "presto-main/src/main/java/com/facebook/presto/metadata/SessionFunctionRegistry.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.metadata;\n+\n+import com.facebook.presto.common.CatalogSchemaName;\n+import com.facebook.presto.common.function.QualifiedFunctionName;\n+import com.facebook.presto.spi.function.BasicSignature;\n+import com.facebook.presto.spi.function.FunctionHandle;\n+import com.facebook.presto.spi.function.FunctionImplementationType;\n+import com.facebook.presto.spi.function.FunctionMetadata;\n+import com.facebook.presto.spi.function.FunctionNamespaceTransactionHandle;\n+import com.facebook.presto.spi.function.FunctionRegistry;\n+import com.facebook.presto.spi.function.Parameter;\n+import com.facebook.presto.spi.function.ScalarFunctionImplementation;\n+import com.facebook.presto.spi.function.Signature;\n+import com.facebook.presto.spi.function.SqlFunction;\n+import com.facebook.presto.spi.function.SqlInvokedFunction;\n+import com.facebook.presto.spi.function.SqlInvokedScalarFunctionImplementation;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.collect.ImmutableMap;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.server.SerializationUtils.BasicSignatureSerDe;\n+import static com.facebook.presto.server.SerializationUtils.SqlInvokedFunctionSerDe;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.util.stream.Collectors.collectingAndThen;\n+import static java.util.stream.Collectors.toMap;\n+\n+public class SessionFunctionRegistry\n+        implements FunctionRegistry<SqlFunction>\n+{\n+    public static final CatalogSchemaName SESSION_NAMESPACE = new CatalogSchemaName(\"presto\", \"session\");\n+\n+    private final ImmutableMap<BasicSignature, SqlInvokedFunction> sessionFunctions;\n+\n+    public SessionFunctionRegistry(Map<String, String> sessionFunctions)\n+    {\n+        this.sessionFunctions = sessionFunctions.entrySet().stream().collect(collectingAndThen(toMap(\n+                e -> BasicSignatureSerDe.deserialize(e.getKey()),\n+                e -> SqlInvokedFunctionSerDe.deserialize(e.getValue())), ImmutableMap::copyOf));\n+    }\n+\n+    @Override\n+    public Collection<SqlFunction> listFunctions()\n+    {\n+        return new ArrayList<>(sessionFunctions.values());\n+    }\n+\n+    @Override\n+    public Collection<SqlFunction> getFunctions(Optional<? extends FunctionNamespaceTransactionHandle> transactionHandle, QualifiedFunctionName functionName)\n+    {\n+        return sessionFunctions.entrySet().stream()\n+                .filter(e -> e.getKey().getName().getFunctionName().equals(functionName.getFunctionName()))\n+                .map(Map.Entry::getValue)\n+                .collect(toImmutableList());\n+    }\n+\n+    @Override\n+    public FunctionHandle getFunctionHandle(Optional<? extends FunctionNamespaceTransactionHandle> transactionHandle, Signature signature)\n+    {\n+        return new SessionFunctionHandle(sessionFunctions.get(new BasicSignature(signature)));\n+    }\n+\n+    @Override\n+    public FunctionMetadata getFunctionMetadata(FunctionHandle functionHandle)\n+    {\n+        checkArgument(functionHandle instanceof SessionFunctionHandle, \"Expected SessionFunctionHandle, got %s\", functionHandle.getClass());\n+        return ((SessionFunctionHandle) functionHandle).getFunctionMetadata();\n+    }\n+\n+    @Override\n+    public ScalarFunctionImplementation getScalarFunctionImplementation(FunctionHandle functionHandle)\n+    {\n+        checkArgument(functionHandle instanceof SessionFunctionHandle, \"Expected SessionFunctionHandle, got %s\", functionHandle.getClass());\n+        return ((SessionFunctionHandle) functionHandle).getScalarFunctionImplementation();\n+    }\n+\n+    public static class SessionFunctionHandle\n+            implements FunctionHandle\n+    {\n+        public final SqlInvokedFunction sqlFunction;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyNTE4Mg=="}, "originalCommit": {"oid": "731a2269b1050d946b62cc420c25b12914bfec6b"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzExNjE3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/server/HttpRequestSessionContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMTo0MTowNlrOHZVVtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODo1MDo1NlrOHesDng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyNjA2OA==", "bodyText": "Once maps are deserialized from the http request. I don't think we have a reason to keep them as Map<String, String>. We should just make it return Map<BasicSignature, SqlInvokedFunction> here.", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r496326068", "createdAt": "2020-09-29T01:41:06Z", "author": {"login": "caithagoras"}, "path": "presto-main/src/main/java/com/facebook/presto/server/HttpRequestSessionContext.java", "diffHunk": "@@ -268,6 +272,27 @@ private static void assertRequest(boolean expression, String format, Object... a\n         }\n     }\n \n+    private static Map<String, String> parseSessionFunctionHeader(HttpServletRequest req)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "731a2269b1050d946b62cc420c25b12914bfec6b"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk0MTE1MA==", "bodyText": "Agreed, done", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r501941150", "createdAt": "2020-10-08T18:50:56Z", "author": {"login": "prithvip"}, "path": "presto-main/src/main/java/com/facebook/presto/server/HttpRequestSessionContext.java", "diffHunk": "@@ -268,6 +272,27 @@ private static void assertRequest(boolean expression, String format, Object... a\n         }\n     }\n \n+    private static Map<String, String> parseSessionFunctionHeader(HttpServletRequest req)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyNjA2OA=="}, "originalCommit": {"oid": "731a2269b1050d946b62cc420c25b12914bfec6b"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzEyNTM0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/server/SerializationUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMTo0NjoxN1rOHZVa9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODo1MToxMFrOHesELw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyNzQxNQ==", "bodyText": "Since we're doing any customized json serde here, we should just use the higher level API JsonCodec instead. This class won't be necessary.\npublic static JsonCodec<BasicSignature> JSON_CODEC = jsonCodec(BasicSignature.class);", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r496327415", "createdAt": "2020-09-29T01:46:17Z", "author": {"login": "caithagoras"}, "path": "presto-main/src/main/java/com/facebook/presto/server/SerializationUtils.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.server;\n+\n+import com.facebook.airlift.json.ObjectMapperProvider;\n+import com.facebook.presto.spi.function.BasicSignature;\n+import com.facebook.presto.spi.function.SqlInvokedFunction;\n+\n+import java.io.IOException;\n+\n+public final class SerializationUtils", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "731a2269b1050d946b62cc420c25b12914bfec6b"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk0MTI5NQ==", "bodyText": "Removed the class", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r501941295", "createdAt": "2020-10-08T18:51:10Z", "author": {"login": "prithvip"}, "path": "presto-main/src/main/java/com/facebook/presto/server/SerializationUtils.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.server;\n+\n+import com.facebook.airlift.json.ObjectMapperProvider;\n+import com.facebook.presto.spi.function.BasicSignature;\n+import com.facebook.presto.spi.function.SqlInvokedFunction;\n+\n+import java.io.IOException;\n+\n+public final class SerializationUtils", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyNzQxNQ=="}, "originalCommit": {"oid": "731a2269b1050d946b62cc420c25b12914bfec6b"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzE4MTE0OnYy", "diffSide": "RIGHT", "path": "presto-cli/src/main/java/com/facebook/presto/cli/Console.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxOToxOTo1OVrOHetEQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQwNDoxODowNlrOITOrEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk1NzY5Nw==", "bodyText": "This might be masking ACL issues? Or is past that?", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r501957697", "createdAt": "2020-10-08T19:19:59Z", "author": {"login": "kaikalur"}, "path": "presto-cli/src/main/java/com/facebook/presto/cli/Console.java", "diffHunk": "@@ -356,6 +357,14 @@ private static boolean process(QueryRunner queryRunner, String sql, OutputFormat\n                 builder = builder.withPreparedStatements(preparedStatements);\n             }\n \n+            // update session functions if present\n+            if (!query.getAddedSessionFunctions().isEmpty() || !query.getRemovedSessionFunctions().isEmpty()) {\n+                Map<String, String> sessionFunctions = new HashMap<>(session.getSessionFunctions());\n+                sessionFunctions.putAll(query.getAddedSessionFunctions());\n+                sessionFunctions.keySet().removeAll(query.getRemovedSessionFunctions());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed3fecb66911fee8035d728deebf9875bd4a4d73"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDIwMDkyNw==", "bodyText": "This is just a parsed representation of the SQL function (no analysis at this point), but when a query containing this function is submitted for execution, the ACLs will be checked at analysis time.", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r550200927", "createdAt": "2020-12-30T13:48:39Z", "author": {"login": "prithvip"}, "path": "presto-cli/src/main/java/com/facebook/presto/cli/Console.java", "diffHunk": "@@ -356,6 +357,14 @@ private static boolean process(QueryRunner queryRunner, String sql, OutputFormat\n                 builder = builder.withPreparedStatements(preparedStatements);\n             }\n \n+            // update session functions if present\n+            if (!query.getAddedSessionFunctions().isEmpty() || !query.getRemovedSessionFunctions().isEmpty()) {\n+                Map<String, String> sessionFunctions = new HashMap<>(session.getSessionFunctions());\n+                sessionFunctions.putAll(query.getAddedSessionFunctions());\n+                sessionFunctions.keySet().removeAll(query.getRemovedSessionFunctions());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk1NzY5Nw=="}, "originalCommit": {"oid": "ed3fecb66911fee8035d728deebf9875bd4a4d73"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU3NjA2MQ==", "bodyText": "What would happen if I create foo, drop foo then create foo again? Why do we need to track removed functions rather than just removing them?", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r551576061", "createdAt": "2021-01-04T21:22:15Z", "author": {"login": "rongrong"}, "path": "presto-cli/src/main/java/com/facebook/presto/cli/Console.java", "diffHunk": "@@ -356,6 +357,14 @@ private static boolean process(QueryRunner queryRunner, String sql, OutputFormat\n                 builder = builder.withPreparedStatements(preparedStatements);\n             }\n \n+            // update session functions if present\n+            if (!query.getAddedSessionFunctions().isEmpty() || !query.getRemovedSessionFunctions().isEmpty()) {\n+                Map<String, String> sessionFunctions = new HashMap<>(session.getSessionFunctions());\n+                sessionFunctions.putAll(query.getAddedSessionFunctions());\n+                sessionFunctions.keySet().removeAll(query.getRemovedSessionFunctions());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk1NzY5Nw=="}, "originalCommit": {"oid": "ed3fecb66911fee8035d728deebf9875bd4a4d73"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzAzNDI1Ng==", "bodyText": "CREATE FOO\nclient sends query and session state\nserver sends back diff to session state, adding function foo\nclient applies diff to client state\nDROP FOO\nclient sends query and session state (which includes function foo)\nserver sends back diff to session state, dropping function foo\nclient applies diff to client state, foo is now gone\nCREATE FOO\nclient sends query and session state (no function foo)\nserver sends back diff to session state, adding function foo\nclient applies diff to client state, foo is now present\n\nThe design of console is such that the server always sends back diffs to the client state rather than the full client state. For example, session properties and prepared statements also work this way.", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r557034256", "createdAt": "2021-01-14T04:18:06Z", "author": {"login": "prithvip"}, "path": "presto-cli/src/main/java/com/facebook/presto/cli/Console.java", "diffHunk": "@@ -356,6 +357,14 @@ private static boolean process(QueryRunner queryRunner, String sql, OutputFormat\n                 builder = builder.withPreparedStatements(preparedStatements);\n             }\n \n+            // update session functions if present\n+            if (!query.getAddedSessionFunctions().isEmpty() || !query.getRemovedSessionFunctions().isEmpty()) {\n+                Map<String, String> sessionFunctions = new HashMap<>(session.getSessionFunctions());\n+                sessionFunctions.putAll(query.getAddedSessionFunctions());\n+                sessionFunctions.keySet().removeAll(query.getRemovedSessionFunctions());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk1NzY5Nw=="}, "originalCommit": {"oid": "ed3fecb66911fee8035d728deebf9875bd4a4d73"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzIwMjg5OnYy", "diffSide": "RIGHT", "path": "presto-cli/src/test/java/com/facebook/presto/cli/TestTemporaryFunctions.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxOToyNjozMVrOHetRhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMzo1MjoyM1rOIMtqUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk2MTA5Mg==", "bodyText": "How about error cases? Also, can they overwrite an existing function temporarily? If so, we want a test case for that as well.", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r501961092", "createdAt": "2020-10-08T19:26:31Z", "author": {"login": "kaikalur"}, "path": "presto-cli/src/test/java/com/facebook/presto/cli/TestTemporaryFunctions.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.cli;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import org.testng.annotations.Test;\n+\n+import static com.facebook.presto.client.PrestoHeaders.PRESTO_ADDED_SESSION_FUNCTION;\n+import static com.facebook.presto.client.PrestoHeaders.PRESTO_REMOVED_SESSION_FUNCTION;\n+import static com.facebook.presto.client.PrestoHeaders.PRESTO_SESSION_FUNCTION;\n+\n+@Test\n+public class TestTemporaryFunctions\n+        extends AbstractCliTest\n+{\n+    @Test\n+    public void testAddAndDropTempFunctions()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed3fecb66911fee8035d728deebf9875bd4a4d73"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDIwMTkzNg==", "bodyText": "Overwriting an existing function is not allowed. These are the CLI side tests, there are more tests on the server-side.", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r550201936", "createdAt": "2020-12-30T13:52:23Z", "author": {"login": "prithvip"}, "path": "presto-cli/src/test/java/com/facebook/presto/cli/TestTemporaryFunctions.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.cli;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import org.testng.annotations.Test;\n+\n+import static com.facebook.presto.client.PrestoHeaders.PRESTO_ADDED_SESSION_FUNCTION;\n+import static com.facebook.presto.client.PrestoHeaders.PRESTO_REMOVED_SESSION_FUNCTION;\n+import static com.facebook.presto.client.PrestoHeaders.PRESTO_SESSION_FUNCTION;\n+\n+@Test\n+public class TestTemporaryFunctions\n+        extends AbstractCliTest\n+{\n+    @Test\n+    public void testAddAndDropTempFunctions()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk2MTA5Mg=="}, "originalCommit": {"oid": "ed3fecb66911fee8035d728deebf9875bd4a4d73"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzIzODE4OnYy", "diffSide": "RIGHT", "path": "presto-cli/src/test/java/com/facebook/presto/cli/TestTemporaryFunctions.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxOTozNjoxOFrOHetmqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMzo1MzozNlrOIMtrzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk2NjUwNA==", "bodyText": "Also test CREATE OR REPLACE", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r501966504", "createdAt": "2020-10-08T19:36:18Z", "author": {"login": "kaikalur"}, "path": "presto-cli/src/test/java/com/facebook/presto/cli/TestTemporaryFunctions.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.cli;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import org.testng.annotations.Test;\n+\n+import static com.facebook.presto.client.PrestoHeaders.PRESTO_ADDED_SESSION_FUNCTION;\n+import static com.facebook.presto.client.PrestoHeaders.PRESTO_REMOVED_SESSION_FUNCTION;\n+import static com.facebook.presto.client.PrestoHeaders.PRESTO_SESSION_FUNCTION;\n+\n+@Test\n+public class TestTemporaryFunctions\n+        extends AbstractCliTest\n+{\n+    @Test\n+    public void testAddAndDropTempFunctions()\n+            throws InterruptedException\n+    {\n+        server.enqueue(createMockResponse().addHeader(PRESTO_ADDED_SESSION_FUNCTION, \"foo=foofunction\"));\n+        server.enqueue(createMockResponse().addHeader(PRESTO_ADDED_SESSION_FUNCTION, \"bar=barfunction\"));\n+        server.enqueue(createMockResponse());\n+        server.enqueue(createMockResponse().addHeader(PRESTO_REMOVED_SESSION_FUNCTION, \"foo\"));\n+        server.enqueue(createMockResponse());\n+        server.enqueue(createMockResponse().addHeader(PRESTO_REMOVED_SESSION_FUNCTION, \"bar\"));\n+        server.enqueue(createMockResponse());\n+\n+        executeQueries(ImmutableList.of(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed3fecb66911fee8035d728deebf9875bd4a4d73"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDIwMjMxOA==", "bodyText": "We are not supporting REPLACE syntax yet", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r550202318", "createdAt": "2020-12-30T13:53:36Z", "author": {"login": "prithvip"}, "path": "presto-cli/src/test/java/com/facebook/presto/cli/TestTemporaryFunctions.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.cli;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import org.testng.annotations.Test;\n+\n+import static com.facebook.presto.client.PrestoHeaders.PRESTO_ADDED_SESSION_FUNCTION;\n+import static com.facebook.presto.client.PrestoHeaders.PRESTO_REMOVED_SESSION_FUNCTION;\n+import static com.facebook.presto.client.PrestoHeaders.PRESTO_SESSION_FUNCTION;\n+\n+@Test\n+public class TestTemporaryFunctions\n+        extends AbstractCliTest\n+{\n+    @Test\n+    public void testAddAndDropTempFunctions()\n+            throws InterruptedException\n+    {\n+        server.enqueue(createMockResponse().addHeader(PRESTO_ADDED_SESSION_FUNCTION, \"foo=foofunction\"));\n+        server.enqueue(createMockResponse().addHeader(PRESTO_ADDED_SESSION_FUNCTION, \"bar=barfunction\"));\n+        server.enqueue(createMockResponse());\n+        server.enqueue(createMockResponse().addHeader(PRESTO_REMOVED_SESSION_FUNCTION, \"foo\"));\n+        server.enqueue(createMockResponse());\n+        server.enqueue(createMockResponse().addHeader(PRESTO_REMOVED_SESSION_FUNCTION, \"bar\"));\n+        server.enqueue(createMockResponse());\n+\n+        executeQueries(ImmutableList.of(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk2NjUwNA=="}, "originalCommit": {"oid": "ed3fecb66911fee8035d728deebf9875bd4a4d73"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzIzODQ5OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/sql/create-function.rst", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxOTozNjoyNFrOHetm3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMzo1NDozNlrOIMts7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk2NjU1Nw==", "bodyText": "From the logic, it's not clear if we are supporting replace.", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r501966557", "createdAt": "2020-10-08T19:36:24Z", "author": {"login": "kaikalur"}, "path": "presto-docs/src/main/sphinx/sql/create-function.rst", "diffHunk": "@@ -7,7 +7,7 @@ Synopsis\n \n .. code-block:: none\n \n-    CREATE [ OR REPLACE ] FUNCTION\n+    CREATE [ OR REPLACE ] [TEMPORARY] FUNCTION", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed3fecb66911fee8035d728deebf9875bd4a4d73"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDIwMjYwNw==", "bodyText": "The analyzer will throw if REPLACE is used with TEMPORARY, and there is a test for it in TestAnalyzer.", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r550202607", "createdAt": "2020-12-30T13:54:36Z", "author": {"login": "prithvip"}, "path": "presto-docs/src/main/sphinx/sql/create-function.rst", "diffHunk": "@@ -7,7 +7,7 @@ Synopsis\n \n .. code-block:: none\n \n-    CREATE [ OR REPLACE ] FUNCTION\n+    CREATE [ OR REPLACE ] [TEMPORARY] FUNCTION", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk2NjU1Nw=="}, "originalCommit": {"oid": "ed3fecb66911fee8035d728deebf9875bd4a4d73"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzI0MDc1OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/sql/create-function.rst", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxOTozNzowNlrOHetoUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMzo1NToxN1rOIMttrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk2NjkyOQ==", "bodyText": "Do we have a link to what \"current session\" is? Also, is there a TTL?", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r501966929", "createdAt": "2020-10-08T19:37:06Z", "author": {"login": "kaikalur"}, "path": "presto-docs/src/main/sphinx/sql/create-function.rst", "diffHunk": "@@ -25,11 +25,18 @@ Description\n \n Create a new function with the specified definition.\n \n-Each function is uniquely identified by its qualified function name\n+When ``TEMPORARY`` is specified, the created function is valid and visible\n+within the current session, but no persistent entry is made.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed3fecb66911fee8035d728deebf9875bd4a4d73"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDIwMjc5Ng==", "bodyText": "\"Session\" mostly makes sense in the context of the CLI. There is no TTL, the scope of the function is the lifespan of the session.", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r550202796", "createdAt": "2020-12-30T13:55:17Z", "author": {"login": "prithvip"}, "path": "presto-docs/src/main/sphinx/sql/create-function.rst", "diffHunk": "@@ -25,11 +25,18 @@ Description\n \n Create a new function with the specified definition.\n \n-Each function is uniquely identified by its qualified function name\n+When ``TEMPORARY`` is specified, the created function is valid and visible\n+within the current session, but no persistent entry is made.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk2NjkyOQ=="}, "originalCommit": {"oid": "ed3fecb66911fee8035d728deebf9875bd4a4d73"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzI0NDQ2OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/sql/drop-function.rst", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxOTozODoxM1rOHetqpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQwNDowOToyMVrOITOiww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk2NzUyNw==", "bodyText": "I think it should be descriptive, not prescriprive. Say:\nWhen temporary is specified, a temporary function with the given signature is dropped.", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r501967527", "createdAt": "2020-10-08T19:38:13Z", "author": {"login": "kaikalur"}, "path": "presto-docs/src/main/sphinx/sql/drop-function.rst", "diffHunk": "@@ -7,14 +7,16 @@ Synopsis\n \n .. code-block:: none\n \n-    DROP FUNCTION [ IF EXISTS ] qualified_function_name [ ( parameter_type[, ...] ) ]\n+    DROP [TEMPORARY] FUNCTION [ IF EXISTS ] qualified_function_name [ ( parameter_type[, ...] ) ]\n \n \n Description\n -----------\n \n Drop an existing function.\n \n+The ``TEMPORARY`` modifier must be used to drop a temporary function.\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed3fecb66911fee8035d728deebf9875bd4a4d73"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQxODIyMg==", "bodyText": "done", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r550418222", "createdAt": "2020-12-31T07:33:29Z", "author": {"login": "prithvip"}, "path": "presto-docs/src/main/sphinx/sql/drop-function.rst", "diffHunk": "@@ -7,14 +7,16 @@ Synopsis\n \n .. code-block:: none\n \n-    DROP FUNCTION [ IF EXISTS ] qualified_function_name [ ( parameter_type[, ...] ) ]\n+    DROP [TEMPORARY] FUNCTION [ IF EXISTS ] qualified_function_name [ ( parameter_type[, ...] ) ]\n \n \n Description\n -----------\n \n Drop an existing function.\n \n+The ``TEMPORARY`` modifier must be used to drop a temporary function.\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk2NzUyNw=="}, "originalCommit": {"oid": "ed3fecb66911fee8035d728deebf9875bd4a4d73"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU3NzYxNA==", "bodyText": "Should this change go into the first commit?", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r551577614", "createdAt": "2021-01-04T21:25:30Z", "author": {"login": "rongrong"}, "path": "presto-docs/src/main/sphinx/sql/drop-function.rst", "diffHunk": "@@ -7,14 +7,16 @@ Synopsis\n \n .. code-block:: none\n \n-    DROP FUNCTION [ IF EXISTS ] qualified_function_name [ ( parameter_type[, ...] ) ]\n+    DROP [TEMPORARY] FUNCTION [ IF EXISTS ] qualified_function_name [ ( parameter_type[, ...] ) ]\n \n \n Description\n -----------\n \n Drop an existing function.\n \n+The ``TEMPORARY`` modifier must be used to drop a temporary function.\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk2NzUyNw=="}, "originalCommit": {"oid": "ed3fecb66911fee8035d728deebf9875bd4a4d73"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzAzMjEzMQ==", "bodyText": "done", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r557032131", "createdAt": "2021-01-14T04:09:21Z", "author": {"login": "prithvip"}, "path": "presto-docs/src/main/sphinx/sql/drop-function.rst", "diffHunk": "@@ -7,14 +7,16 @@ Synopsis\n \n .. code-block:: none\n \n-    DROP FUNCTION [ IF EXISTS ] qualified_function_name [ ( parameter_type[, ...] ) ]\n+    DROP [TEMPORARY] FUNCTION [ IF EXISTS ] qualified_function_name [ ( parameter_type[, ...] ) ]\n \n \n Description\n -----------\n \n Drop an existing function.\n \n+The ``TEMPORARY`` modifier must be used to drop a temporary function.\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk2NzUyNw=="}, "originalCommit": {"oid": "ed3fecb66911fee8035d728deebf9875bd4a4d73"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzI0ODEwOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/com/facebook/presto/hive/orc/OrcSelectivePageSourceFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxOTozOToyNVrOHets4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxNDoxNTo0M1rOIMuF3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk2ODA5OQ==", "bodyText": "Can we make it a single api to get all visible functions instead of adding the second param through out?", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r501968099", "createdAt": "2020-10-08T19:39:25Z", "author": {"login": "kaikalur"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/orc/OrcSelectivePageSourceFactory.java", "diffHunk": "@@ -640,13 +640,13 @@ private static OrcPredicate toOrcPredicate(TupleDomain<Subfield> domainPredicate\n         filter = and(extractDynamicFilterResult.getStaticConjuncts());\n \n         if (!isAdaptiveFilterReorderingEnabled(session)) {\n-            filterFunctions.add(new FilterFunction(session.getSqlFunctionProperties(), determinismEvaluator.isDeterministic(filter), predicateCompiler.compilePredicate(session.getSqlFunctionProperties(), filter).get()));\n+            filterFunctions.add(new FilterFunction(session.getSqlFunctionProperties(), determinismEvaluator.isDeterministic(filter), predicateCompiler.compilePredicate(session.getSqlFunctionProperties(), session.getSessionFunctions(), filter).get()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed3fecb66911fee8035d728deebf9875bd4a4d73"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDIwODk4OA==", "bodyText": "I did some refactoring and reduced the \"blast radius\" of adding this second param and reduced the size of this PR by about 50 files. There's no easier solution here, because most of the compilers are singletons, connectors can access the compilers, the connectors don't have session, they have connector session, and so it all has to get threaded through.", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r550208988", "createdAt": "2020-12-30T14:15:43Z", "author": {"login": "prithvip"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/orc/OrcSelectivePageSourceFactory.java", "diffHunk": "@@ -640,13 +640,13 @@ private static OrcPredicate toOrcPredicate(TupleDomain<Subfield> domainPredicate\n         filter = and(extractDynamicFilterResult.getStaticConjuncts());\n \n         if (!isAdaptiveFilterReorderingEnabled(session)) {\n-            filterFunctions.add(new FilterFunction(session.getSqlFunctionProperties(), determinismEvaluator.isDeterministic(filter), predicateCompiler.compilePredicate(session.getSqlFunctionProperties(), filter).get()));\n+            filterFunctions.add(new FilterFunction(session.getSqlFunctionProperties(), determinismEvaluator.isDeterministic(filter), predicateCompiler.compilePredicate(session.getSqlFunctionProperties(), session.getSessionFunctions(), filter).get()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk2ODA5OQ=="}, "originalCommit": {"oid": "ed3fecb66911fee8035d728deebf9875bd4a4d73"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzI4NDE5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/CreateFunctionTask.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxOTo1MDozNFrOHeuDEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMzo1NzozMVrOIMtwqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk3Mzc3Ng==", "bodyText": "isReplace check here?", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r501973776", "createdAt": "2020-10-08T19:50:34Z", "author": {"login": "kaikalur"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/CreateFunctionTask.java", "diffHunk": "@@ -82,13 +85,21 @@ public String explain(CreateFunction statement, List<Expression> parameters)\n             throw new PrestoException(NOT_SUPPORTED, \"Invoking a dynamically registered function in SQL function body is not supported\");\n         }\n \n-        metadata.getFunctionManager().createFunction(createSqlInvokedFunction(statement, metadata, analysis), statement.isReplace());\n+        SqlInvokedFunction function = createSqlInvokedFunction(statement, metadata, analysis);\n+        if (statement.isTemporary()) {\n+            stateMachine.addSessionFunction(new BasicSignature(function.getSignature()), function);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed3fecb66911fee8035d728deebf9875bd4a4d73"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDIwMzU2Mw==", "bodyText": "Analyzer will check for REPLACE, and throw if it is used with TEMPORARY.", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r550203563", "createdAt": "2020-12-30T13:57:31Z", "author": {"login": "prithvip"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/CreateFunctionTask.java", "diffHunk": "@@ -82,13 +85,21 @@ public String explain(CreateFunction statement, List<Expression> parameters)\n             throw new PrestoException(NOT_SUPPORTED, \"Invoking a dynamically registered function in SQL function body is not supported\");\n         }\n \n-        metadata.getFunctionManager().createFunction(createSqlInvokedFunction(statement, metadata, analysis), statement.isReplace());\n+        SqlInvokedFunction function = createSqlInvokedFunction(statement, metadata, analysis);\n+        if (statement.isTemporary()) {\n+            stateMachine.addSessionFunction(new BasicSignature(function.getSignature()), function);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk3Mzc3Ng=="}, "originalCommit": {"oid": "ed3fecb66911fee8035d728deebf9875bd4a4d73"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzI4Njk1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/DropFunctionTask.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxOTo1MTozMFrOHeuEuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMzo1OToyMlrOIMtzCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk3NDIwMw==", "bodyText": "Where is the error if the function doesn't exist?", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r501974203", "createdAt": "2020-10-08T19:51:30Z", "author": {"login": "kaikalur"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/DropFunctionTask.java", "diffHunk": "@@ -53,19 +58,29 @@ public String getName()\n     @Override\n     public String explain(DropFunction statement, List<Expression> parameters)\n     {\n-        return \"DROP FUNCTION \" + statement.getFunctionName();\n+        return format(\"DROP %sFUNCTION %s\", statement.isTemporary() ? \"TEMPORARY \" : \"\", statement.getFunctionName());\n     }\n \n     @Override\n     public ListenableFuture<?> execute(DropFunction statement, TransactionManager transactionManager, Metadata metadata, AccessControl accessControl, QueryStateMachine stateMachine, List<Expression> parameters)\n     {\n         Analyzer analyzer = new Analyzer(stateMachine.getSession(), metadata, sqlParser, accessControl, Optional.empty(), parameters, stateMachine.getWarningCollector());\n         analyzer.analyze(statement);\n+        Optional<List<TypeSignature>> parameterTypes = statement.getParameterTypes().map(types -> types.stream().map(TypeSignature::parseTypeSignature).collect(toImmutableList()));\n \n-        metadata.getFunctionManager().dropFunction(\n-                qualifyFunctionName(statement.getFunctionName()),\n-                statement.getParameterTypes().map(types -> types.stream().map(TypeSignature::parseTypeSignature).collect(toImmutableList())),\n-                statement.isExists());\n+        if (statement.isTemporary()) {\n+            stateMachine.removeSessionFunction(\n+                    new BasicSignature(\n+                            QualifiedFunctionName.of(SESSION_NAMESPACE, statement.getFunctionName().getSuffix()),\n+                            parameterTypes.orElse(emptyList())),\n+                    statement.isExists());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed3fecb66911fee8035d728deebf9875bd4a4d73"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDIwNDE2OA==", "bodyText": "QueryStateMachine will throw an exception if the function doesn't exist, in method \"removeSessionFunction\"", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r550204168", "createdAt": "2020-12-30T13:59:22Z", "author": {"login": "prithvip"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/DropFunctionTask.java", "diffHunk": "@@ -53,19 +58,29 @@ public String getName()\n     @Override\n     public String explain(DropFunction statement, List<Expression> parameters)\n     {\n-        return \"DROP FUNCTION \" + statement.getFunctionName();\n+        return format(\"DROP %sFUNCTION %s\", statement.isTemporary() ? \"TEMPORARY \" : \"\", statement.getFunctionName());\n     }\n \n     @Override\n     public ListenableFuture<?> execute(DropFunction statement, TransactionManager transactionManager, Metadata metadata, AccessControl accessControl, QueryStateMachine stateMachine, List<Expression> parameters)\n     {\n         Analyzer analyzer = new Analyzer(stateMachine.getSession(), metadata, sqlParser, accessControl, Optional.empty(), parameters, stateMachine.getWarningCollector());\n         analyzer.analyze(statement);\n+        Optional<List<TypeSignature>> parameterTypes = statement.getParameterTypes().map(types -> types.stream().map(TypeSignature::parseTypeSignature).collect(toImmutableList()));\n \n-        metadata.getFunctionManager().dropFunction(\n-                qualifyFunctionName(statement.getFunctionName()),\n-                statement.getParameterTypes().map(types -> types.stream().map(TypeSignature::parseTypeSignature).collect(toImmutableList())),\n-                statement.isExists());\n+        if (statement.isTemporary()) {\n+            stateMachine.removeSessionFunction(\n+                    new BasicSignature(\n+                            QualifiedFunctionName.of(SESSION_NAMESPACE, statement.getFunctionName().getSuffix()),\n+                            parameterTypes.orElse(emptyList())),\n+                    statement.isExists());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk3NDIwMw=="}, "originalCommit": {"oid": "ed3fecb66911fee8035d728deebf9875bd4a4d73"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzMwMTYwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/metadata/FunctionSignatureResolver.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxOTo1NjowNFrOHeuNvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxOTo1NjowNFrOHeuNvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk3NjUxMQ==", "bodyText": "Is it just a refactor? Or did you have more changes too? If it's just a simple refactor, may be move it out.", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r501976511", "createdAt": "2020-10-08T19:56:04Z", "author": {"login": "kaikalur"}, "path": "presto-main/src/main/java/com/facebook/presto/metadata/FunctionSignatureResolver.java", "diffHunk": "@@ -0,0 +1,325 @@\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed3fecb66911fee8035d728deebf9875bd4a4d73"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NDA0MDAzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryInfo.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMTo1NjozNlrOHgOiLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxNDowMDoxOVrOIMtz-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU1NDYwNQ==", "bodyText": "ImmutableMap.copyOf\nImmutableSet.copyOf", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r503554605", "createdAt": "2020-10-12T21:56:36Z", "author": {"login": "caithagoras"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryInfo.java", "diffHunk": "@@ -170,6 +178,8 @@ public QueryInfo(\n         this.queryType = queryType;\n         this.failedTasks = failedTasks;\n         this.runtimeOptimizedStages = runtimeOptimizedStages;\n+        this.addedSessionFunctions = addedSessionFunctions;\n+        this.removedSessionFunctions = removedSessionFunctions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d708def2c3bdab58b07b1c038fab5ac7c3ea2a42"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDIwNDQxMA==", "bodyText": "done", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r550204410", "createdAt": "2020-12-30T14:00:19Z", "author": {"login": "prithvip"}, "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryInfo.java", "diffHunk": "@@ -170,6 +178,8 @@ public QueryInfo(\n         this.queryType = queryType;\n         this.failedTasks = failedTasks;\n         this.runtimeOptimizedStages = runtimeOptimizedStages;\n+        this.addedSessionFunctions = addedSessionFunctions;\n+        this.removedSessionFunctions = removedSessionFunctions;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU1NDYwNQ=="}, "originalCommit": {"oid": "d708def2c3bdab58b07b1c038fab5ac7c3ea2a42"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MTM0MDk3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/metadata/FunctionAndTypeManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQyMToxODo0MVrOIOBbZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQwNDowODo0MlrOITOiBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU3NDM3Mw==", "bodyText": "Related: if you are introducing this, maybe worth rewrite listFunctions to use this as well. But this doesn't need to be in this diff / PR.", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r551574373", "createdAt": "2021-01-04T21:18:41Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/metadata/FunctionAndTypeManager.java", "diffHunk": "@@ -253,6 +253,11 @@ public void registerBuiltInFunctions(List<? extends SqlFunction> functions)\n                 .collect(toImmutableList());\n     }\n \n+    public Collection<SqlFunction> listBuiltInFunctions()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af235588b4449825fb46f3e92726ef9c60e92efa"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzAzMTk0MA==", "bodyText": "done", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r557031940", "createdAt": "2021-01-14T04:08:42Z", "author": {"login": "prithvip"}, "path": "presto-main/src/main/java/com/facebook/presto/metadata/FunctionAndTypeManager.java", "diffHunk": "@@ -253,6 +253,11 @@ public void registerBuiltInFunctions(List<? extends SqlFunction> functions)\n                 .collect(toImmutableList());\n     }\n \n+    public Collection<SqlFunction> listBuiltInFunctions()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU3NDM3Mw=="}, "originalCommit": {"oid": "af235588b4449825fb46f3e92726ef9c60e92efa"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MTM2OTA3OnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/com/facebook/presto/spi/function/BasicSignature.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQyMToyNzo1MVrOIOBskw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQwNDoyMTowM1rOITOuDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU3ODc3MQ==", "bodyText": "What about calling this FunctionSignature? I don't really get what BasicSignature is supposed to mean.", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r551578771", "createdAt": "2021-01-04T21:27:51Z", "author": {"login": "rongrong"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/function/BasicSignature.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.spi.function;\n+\n+import com.facebook.presto.common.QualifiedObjectName;\n+import com.facebook.presto.common.type.TypeSignature;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonValue;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.stream.Collectors.joining;\n+\n+public class BasicSignature", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68f075180070d8ab3602b77d03fe232fdd10bb47"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU3OTQzNw==", "bodyText": "Also, this class looks the same as the SqlFunctionId so maybe you want to just use that.", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r551579437", "createdAt": "2021-01-04T21:29:11Z", "author": {"login": "rongrong"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/function/BasicSignature.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.spi.function;\n+\n+import com.facebook.presto.common.QualifiedObjectName;\n+import com.facebook.presto.common.type.TypeSignature;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonValue;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.stream.Collectors.joining;\n+\n+public class BasicSignature", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU3ODc3MQ=="}, "originalCommit": {"oid": "68f075180070d8ab3602b77d03fe232fdd10bb47"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzAzNTAyMg==", "bodyText": "Removed BasicSignature and replaced it with SqlFunctionId.", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r557035022", "createdAt": "2021-01-14T04:21:03Z", "author": {"login": "prithvip"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/function/BasicSignature.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.spi.function;\n+\n+import com.facebook.presto.common.QualifiedObjectName;\n+import com.facebook.presto.common.type.TypeSignature;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonValue;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.stream.Collectors.joining;\n+\n+public class BasicSignature", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU3ODc3MQ=="}, "originalCommit": {"oid": "68f075180070d8ab3602b77d03fe232fdd10bb47"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzNDk3NzAyOnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/com/facebook/presto/spi/function/SqlFunctionId.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQyMzoxODozN1rOIXXZbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yN1QyMDoyNjoxNVrOIbaIBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTM3MTUwMA==", "bodyText": "I kinda prefer this to be function_name(type,type,type...). Looks more like a function signature.", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r561371500", "createdAt": "2021-01-20T23:18:37Z", "author": {"login": "rongrong"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/function/SqlFunctionId.java", "diffHunk": "@@ -86,4 +84,29 @@ public String toString()\n                 .collect(joining(\", \"));\n         return format(\"%s(%s)\", functionName, arguments);\n     }\n+\n+    @JsonValue\n+    public String toJsonString()\n+    {\n+        return format(\"%s;%s\", functionName.toString(), argumentTypes.stream().map(TypeSignature::toString).collect(joining(\";\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3360755b32a875ddb10423cb45ef039f2dc886c"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDkyNjAzMQ==", "bodyText": "The toString() does look like that, so that is what you would see when debugging. This is purely to serialize/deserialize, so I wanted to go with the simplest foolproof solution.", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r564926031", "createdAt": "2021-01-27T00:11:54Z", "author": {"login": "prithvip"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/function/SqlFunctionId.java", "diffHunk": "@@ -86,4 +84,29 @@ public String toString()\n                 .collect(joining(\", \"));\n         return format(\"%s(%s)\", functionName, arguments);\n     }\n+\n+    @JsonValue\n+    public String toJsonString()\n+    {\n+        return format(\"%s;%s\", functionName.toString(), argumentTypes.stream().map(TypeSignature::toString).collect(joining(\";\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTM3MTUwMA=="}, "originalCommit": {"oid": "d3360755b32a875ddb10423cb45ef039f2dc886c"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDkzNTk5Ng==", "bodyText": "We're using SqlFunctionId.getValue, which is essentially calling toString() when storing it into MySQL. We should consolidate the two. Actually, the logic shouldn't even be here since it is due to a restriction unrelated / unaware to open source. The caller code, which is not in open-source, should be responsible for encoding / decoding SqlFunctionId in this special way.", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r564935996", "createdAt": "2021-01-27T00:37:41Z", "author": {"login": "caithagoras"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/function/SqlFunctionId.java", "diffHunk": "@@ -86,4 +84,29 @@ public String toString()\n                 .collect(joining(\", \"));\n         return format(\"%s(%s)\", functionName, arguments);\n     }\n+\n+    @JsonValue\n+    public String toJsonString()\n+    {\n+        return format(\"%s;%s\", functionName.toString(), argumentTypes.stream().map(TypeSignature::toString).collect(joining(\";\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTM3MTUwMA=="}, "originalCommit": {"oid": "d3360755b32a875ddb10423cb45ef039f2dc886c"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTYxMDUwMQ==", "bodyText": "Do you want me to replace all the instances of getId() with toJsonString()?", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r565610501", "createdAt": "2021-01-27T20:26:15Z", "author": {"login": "prithvip"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/function/SqlFunctionId.java", "diffHunk": "@@ -86,4 +84,29 @@ public String toString()\n                 .collect(joining(\", \"));\n         return format(\"%s(%s)\", functionName, arguments);\n     }\n+\n+    @JsonValue\n+    public String toJsonString()\n+    {\n+        return format(\"%s;%s\", functionName.toString(), argumentTypes.stream().map(TypeSignature::toString).collect(joining(\";\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTM3MTUwMA=="}, "originalCommit": {"oid": "d3360755b32a875ddb10423cb45ef039f2dc886c"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzNTE0Njg1OnYy", "diffSide": "RIGHT", "path": "presto-tests/src/test/java/com/facebook/presto/tests/TestSqlFunctions.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQyMzo1ODoyOVrOIXZKsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yN1QwMDozMzo1OVrOIaw38A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTQwMDQ5OQ==", "bodyText": "The result of the SHOW CREATE foo should be a CREATE TEMPORARY FUNCTION statement. The result SQL by itself is not semantically valid, as it is attempting to create a permanent function foo without specifying catalog and schema.", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r561400499", "createdAt": "2021-01-20T23:58:29Z", "author": {"login": "caithagoras"}, "path": "presto-tests/src/test/java/com/facebook/presto/tests/TestSqlFunctions.java", "diffHunk": "@@ -251,6 +251,31 @@ public void testTemporarySqlFunctions()\n         assertQuery(createSessionWithTempFunctionFoo(), \"SELECT foo(foo(2))\", \"SELECT 8\");\n     }\n \n+    @Test\n+    public void testShowTemporaryFunctions()\n+    {\n+        MaterializedResult result = computeActual(createSessionWithTempFunctionFoo(), \"SHOW FUNCTIONS\");\n+        MaterializedRow row = result.getMaterializedRows().get(result.getMaterializedRows().size() - 1);\n+        assertEquals(row.getField(0), \"foo\");\n+    }\n+\n+    @Test\n+    public void testShowCreateTemporaryFunction()\n+    {\n+        MaterializedRow result = computeActual(createSessionWithTempFunctionFoo(), \"SHOW CREATE FUNCTION foo(bigint)\").getMaterializedRows().get(0);\n+        String createFunctionFooFormatted = \"CREATE FUNCTION foo (\\n\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3360755b32a875ddb10423cb45ef039f2dc886c"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDkzNDY0MA==", "bodyText": "done", "url": "https://github.com/prestodb/presto/pull/15033#discussion_r564934640", "createdAt": "2021-01-27T00:33:59Z", "author": {"login": "prithvip"}, "path": "presto-tests/src/test/java/com/facebook/presto/tests/TestSqlFunctions.java", "diffHunk": "@@ -251,6 +251,31 @@ public void testTemporarySqlFunctions()\n         assertQuery(createSessionWithTempFunctionFoo(), \"SELECT foo(foo(2))\", \"SELECT 8\");\n     }\n \n+    @Test\n+    public void testShowTemporaryFunctions()\n+    {\n+        MaterializedResult result = computeActual(createSessionWithTempFunctionFoo(), \"SHOW FUNCTIONS\");\n+        MaterializedRow row = result.getMaterializedRows().get(result.getMaterializedRows().size() - 1);\n+        assertEquals(row.getField(0), \"foo\");\n+    }\n+\n+    @Test\n+    public void testShowCreateTemporaryFunction()\n+    {\n+        MaterializedRow result = computeActual(createSessionWithTempFunctionFoo(), \"SHOW CREATE FUNCTION foo(bigint)\").getMaterializedRows().get(0);\n+        String createFunctionFooFormatted = \"CREATE FUNCTION foo (\\n\" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTQwMDQ5OQ=="}, "originalCommit": {"oid": "d3360755b32a875ddb10423cb45ef039f2dc886c"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3753, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}