{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzNDI0MTY2", "number": 13972, "reviewThreads": {"totalCount": 66, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxODoyMToyOFrODZ7gpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMzoxNjoyM1rODeLaHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTE2MDA3OnYy", "diffSide": "RIGHT", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/FunctionNamespaceDao.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxODoyMToyOVrOFgmN2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxODoyMToyOVrOFgmN2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcyNDg5MA==", "bodyText": "Maybe name it <function_namespaces_table_name> to make the query clearer to read.", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r369724890", "createdAt": "2020-01-22T18:21:29Z", "author": {"login": "rongrong"}, "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/FunctionNamespaceDao.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.functionNamespace.db;\n+\n+import com.facebook.presto.spi.function.RoutineCharacteristics.Language;\n+import com.facebook.presto.spi.function.SqlFunctionId;\n+import com.facebook.presto.spi.function.SqlInvokedFunction;\n+import com.facebook.presto.spi.function.SqlParameter;\n+import com.facebook.presto.spi.type.TypeSignature;\n+import org.jdbi.v3.sqlobject.config.RegisterArgumentFactories;\n+import org.jdbi.v3.sqlobject.config.RegisterArgumentFactory;\n+import org.jdbi.v3.sqlobject.config.RegisterRowMapper;\n+import org.jdbi.v3.sqlobject.config.RegisterRowMappers;\n+import org.jdbi.v3.sqlobject.customizer.Bind;\n+import org.jdbi.v3.sqlobject.customizer.Define;\n+import org.jdbi.v3.sqlobject.statement.SqlQuery;\n+import org.jdbi.v3.sqlobject.statement.SqlUpdate;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+@RegisterRowMappers({\n+        @RegisterRowMapper(SqlInvokedFunctionRowMapper.class),\n+        @RegisterRowMapper(SqlInvokedFunctionRecordRowMapper.class)\n+})\n+@RegisterArgumentFactories({\n+        @RegisterArgumentFactory(SqlFunctionIdArgumentFactory.class),\n+        @RegisterArgumentFactory(SqlParametersArgumentFactory.class),\n+        @RegisterArgumentFactory(TypeSignatureArgumentFactory.class),\n+})\n+public interface FunctionNamespaceDao\n+{\n+    @SqlUpdate(\"CREATE TABLE IF NOT EXISTS <table_name> (\\n\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "810b00af4b1ac1155ec14ece1b64a7b5a9c2b9c4"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTE2MTUwOnYy", "diffSide": "RIGHT", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/FunctionNamespaceDao.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxODoyMjowMVrOFgmO0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxODoyMjowMVrOFgmO0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcyNTEzOQ==", "bodyText": "Maybe name this <sql_invoked_functions_table_name>.", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r369725139", "createdAt": "2020-01-22T18:22:01Z", "author": {"login": "rongrong"}, "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/FunctionNamespaceDao.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.functionNamespace.db;\n+\n+import com.facebook.presto.spi.function.RoutineCharacteristics.Language;\n+import com.facebook.presto.spi.function.SqlFunctionId;\n+import com.facebook.presto.spi.function.SqlInvokedFunction;\n+import com.facebook.presto.spi.function.SqlParameter;\n+import com.facebook.presto.spi.type.TypeSignature;\n+import org.jdbi.v3.sqlobject.config.RegisterArgumentFactories;\n+import org.jdbi.v3.sqlobject.config.RegisterArgumentFactory;\n+import org.jdbi.v3.sqlobject.config.RegisterRowMapper;\n+import org.jdbi.v3.sqlobject.config.RegisterRowMappers;\n+import org.jdbi.v3.sqlobject.customizer.Bind;\n+import org.jdbi.v3.sqlobject.customizer.Define;\n+import org.jdbi.v3.sqlobject.statement.SqlQuery;\n+import org.jdbi.v3.sqlobject.statement.SqlUpdate;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+@RegisterRowMappers({\n+        @RegisterRowMapper(SqlInvokedFunctionRowMapper.class),\n+        @RegisterRowMapper(SqlInvokedFunctionRecordRowMapper.class)\n+})\n+@RegisterArgumentFactories({\n+        @RegisterArgumentFactory(SqlFunctionIdArgumentFactory.class),\n+        @RegisterArgumentFactory(SqlParametersArgumentFactory.class),\n+        @RegisterArgumentFactory(TypeSignatureArgumentFactory.class),\n+})\n+public interface FunctionNamespaceDao\n+{\n+    @SqlUpdate(\"CREATE TABLE IF NOT EXISTS <table_name> (\\n\" +\n+            \"   catalog_name varchar(128) NOT NULL,\\n\" +\n+            \"   schema_name varchar(128) NOT NULL,\\n\" +\n+            \" PRIMARY KEY (catalog_name, schema_name)\\n\" +\n+            \")\")\n+    void createFunctionNamespacesTableIfNotExists(@Define(\"table_name\") String tableName);\n+\n+    @SqlUpdate(\"CREATE TABLE IF NOT EXISTS <table_name> (\\n\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "810b00af4b1ac1155ec14ece1b64a7b5a9c2b9c4"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTE2NjcxOnYy", "diffSide": "RIGHT", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/FunctionNamespaceDao.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxODoyMzo1MVrOFgmSKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMTo1Nzo0MlrOFhritQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcyNTk5NQ==", "bodyText": "Does this still need to be text? Due to function_id this has an upper bound in length as well right?", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r369725995", "createdAt": "2020-01-22T18:23:51Z", "author": {"login": "rongrong"}, "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/FunctionNamespaceDao.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.functionNamespace.db;\n+\n+import com.facebook.presto.spi.function.RoutineCharacteristics.Language;\n+import com.facebook.presto.spi.function.SqlFunctionId;\n+import com.facebook.presto.spi.function.SqlInvokedFunction;\n+import com.facebook.presto.spi.function.SqlParameter;\n+import com.facebook.presto.spi.type.TypeSignature;\n+import org.jdbi.v3.sqlobject.config.RegisterArgumentFactories;\n+import org.jdbi.v3.sqlobject.config.RegisterArgumentFactory;\n+import org.jdbi.v3.sqlobject.config.RegisterRowMapper;\n+import org.jdbi.v3.sqlobject.config.RegisterRowMappers;\n+import org.jdbi.v3.sqlobject.customizer.Bind;\n+import org.jdbi.v3.sqlobject.customizer.Define;\n+import org.jdbi.v3.sqlobject.statement.SqlQuery;\n+import org.jdbi.v3.sqlobject.statement.SqlUpdate;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+@RegisterRowMappers({\n+        @RegisterRowMapper(SqlInvokedFunctionRowMapper.class),\n+        @RegisterRowMapper(SqlInvokedFunctionRecordRowMapper.class)\n+})\n+@RegisterArgumentFactories({\n+        @RegisterArgumentFactory(SqlFunctionIdArgumentFactory.class),\n+        @RegisterArgumentFactory(SqlParametersArgumentFactory.class),\n+        @RegisterArgumentFactory(TypeSignatureArgumentFactory.class),\n+})\n+public interface FunctionNamespaceDao\n+{\n+    @SqlUpdate(\"CREATE TABLE IF NOT EXISTS <table_name> (\\n\" +\n+            \"   catalog_name varchar(128) NOT NULL,\\n\" +\n+            \"   schema_name varchar(128) NOT NULL,\\n\" +\n+            \" PRIMARY KEY (catalog_name, schema_name)\\n\" +\n+            \")\")\n+    void createFunctionNamespacesTableIfNotExists(@Define(\"table_name\") String tableName);\n+\n+    @SqlUpdate(\"CREATE TABLE IF NOT EXISTS <table_name> (\\n\" +\n+            \"  id bigint(20) NOT NULL AUTO_INCREMENT,\\n\" +\n+            \"  function_id varchar(700) NOT NULL,\\n\" +\n+            \"  version bigint(20) unsigned NOT NULL,\\n\" +\n+            \"  catalog_name varchar(128) NOT NULL,\\n\" +\n+            \"  schema_name varchar(128) NOT NULL,\\n\" +\n+            \"  function_name varchar(256) NOT NULL,\\n\" +\n+            \"  parameters text NOT NULL,\\n\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "810b00af4b1ac1155ec14ece1b64a7b5a9c2b9c4"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMyNDU2MQ==", "bodyText": "The disadvantage with text as compared to varchar is that it cannot be used as index, and since this is a json field, it shouldn't be used as index. Hence, in this case, I don't consider text as \"2nd option\" placing after varchar - they're just about the same, as if I'm defining parameters as varchar(65535) in a more readable way.\nAbout the upper about in function_id: parameter name can still be long, and also there are extra length overhead due to json serialization so why not give it some forgiveness and flexibility.", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r370324561", "createdAt": "2020-01-23T19:56:58Z", "author": {"login": "caithagoras"}, "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/FunctionNamespaceDao.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.functionNamespace.db;\n+\n+import com.facebook.presto.spi.function.RoutineCharacteristics.Language;\n+import com.facebook.presto.spi.function.SqlFunctionId;\n+import com.facebook.presto.spi.function.SqlInvokedFunction;\n+import com.facebook.presto.spi.function.SqlParameter;\n+import com.facebook.presto.spi.type.TypeSignature;\n+import org.jdbi.v3.sqlobject.config.RegisterArgumentFactories;\n+import org.jdbi.v3.sqlobject.config.RegisterArgumentFactory;\n+import org.jdbi.v3.sqlobject.config.RegisterRowMapper;\n+import org.jdbi.v3.sqlobject.config.RegisterRowMappers;\n+import org.jdbi.v3.sqlobject.customizer.Bind;\n+import org.jdbi.v3.sqlobject.customizer.Define;\n+import org.jdbi.v3.sqlobject.statement.SqlQuery;\n+import org.jdbi.v3.sqlobject.statement.SqlUpdate;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+@RegisterRowMappers({\n+        @RegisterRowMapper(SqlInvokedFunctionRowMapper.class),\n+        @RegisterRowMapper(SqlInvokedFunctionRecordRowMapper.class)\n+})\n+@RegisterArgumentFactories({\n+        @RegisterArgumentFactory(SqlFunctionIdArgumentFactory.class),\n+        @RegisterArgumentFactory(SqlParametersArgumentFactory.class),\n+        @RegisterArgumentFactory(TypeSignatureArgumentFactory.class),\n+})\n+public interface FunctionNamespaceDao\n+{\n+    @SqlUpdate(\"CREATE TABLE IF NOT EXISTS <table_name> (\\n\" +\n+            \"   catalog_name varchar(128) NOT NULL,\\n\" +\n+            \"   schema_name varchar(128) NOT NULL,\\n\" +\n+            \" PRIMARY KEY (catalog_name, schema_name)\\n\" +\n+            \")\")\n+    void createFunctionNamespacesTableIfNotExists(@Define(\"table_name\") String tableName);\n+\n+    @SqlUpdate(\"CREATE TABLE IF NOT EXISTS <table_name> (\\n\" +\n+            \"  id bigint(20) NOT NULL AUTO_INCREMENT,\\n\" +\n+            \"  function_id varchar(700) NOT NULL,\\n\" +\n+            \"  version bigint(20) unsigned NOT NULL,\\n\" +\n+            \"  catalog_name varchar(128) NOT NULL,\\n\" +\n+            \"  schema_name varchar(128) NOT NULL,\\n\" +\n+            \"  function_name varchar(256) NOT NULL,\\n\" +\n+            \"  parameters text NOT NULL,\\n\" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcyNTk5NQ=="}, "originalCommit": {"oid": "810b00af4b1ac1155ec14ece1b64a7b5a9c2b9c4"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg2MDcyNQ==", "bodyText": "MySQL's implementation on varchar is more efficient than text. text != varchar(65535) https://stackoverflow.com/questions/7755629/varchar255-vs-tinytext-tinyblob-and-varchar65535-vs-blob-text", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r370860725", "createdAt": "2020-01-24T21:57:42Z", "author": {"login": "rongrong"}, "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/FunctionNamespaceDao.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.functionNamespace.db;\n+\n+import com.facebook.presto.spi.function.RoutineCharacteristics.Language;\n+import com.facebook.presto.spi.function.SqlFunctionId;\n+import com.facebook.presto.spi.function.SqlInvokedFunction;\n+import com.facebook.presto.spi.function.SqlParameter;\n+import com.facebook.presto.spi.type.TypeSignature;\n+import org.jdbi.v3.sqlobject.config.RegisterArgumentFactories;\n+import org.jdbi.v3.sqlobject.config.RegisterArgumentFactory;\n+import org.jdbi.v3.sqlobject.config.RegisterRowMapper;\n+import org.jdbi.v3.sqlobject.config.RegisterRowMappers;\n+import org.jdbi.v3.sqlobject.customizer.Bind;\n+import org.jdbi.v3.sqlobject.customizer.Define;\n+import org.jdbi.v3.sqlobject.statement.SqlQuery;\n+import org.jdbi.v3.sqlobject.statement.SqlUpdate;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+@RegisterRowMappers({\n+        @RegisterRowMapper(SqlInvokedFunctionRowMapper.class),\n+        @RegisterRowMapper(SqlInvokedFunctionRecordRowMapper.class)\n+})\n+@RegisterArgumentFactories({\n+        @RegisterArgumentFactory(SqlFunctionIdArgumentFactory.class),\n+        @RegisterArgumentFactory(SqlParametersArgumentFactory.class),\n+        @RegisterArgumentFactory(TypeSignatureArgumentFactory.class),\n+})\n+public interface FunctionNamespaceDao\n+{\n+    @SqlUpdate(\"CREATE TABLE IF NOT EXISTS <table_name> (\\n\" +\n+            \"   catalog_name varchar(128) NOT NULL,\\n\" +\n+            \"   schema_name varchar(128) NOT NULL,\\n\" +\n+            \" PRIMARY KEY (catalog_name, schema_name)\\n\" +\n+            \")\")\n+    void createFunctionNamespacesTableIfNotExists(@Define(\"table_name\") String tableName);\n+\n+    @SqlUpdate(\"CREATE TABLE IF NOT EXISTS <table_name> (\\n\" +\n+            \"  id bigint(20) NOT NULL AUTO_INCREMENT,\\n\" +\n+            \"  function_id varchar(700) NOT NULL,\\n\" +\n+            \"  version bigint(20) unsigned NOT NULL,\\n\" +\n+            \"  catalog_name varchar(128) NOT NULL,\\n\" +\n+            \"  schema_name varchar(128) NOT NULL,\\n\" +\n+            \"  function_name varchar(256) NOT NULL,\\n\" +\n+            \"  parameters text NOT NULL,\\n\" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcyNTk5NQ=="}, "originalCommit": {"oid": "810b00af4b1ac1155ec14ece1b64a7b5a9c2b9c4"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTE3MTM5OnYy", "diffSide": "RIGHT", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/FunctionNamespaceDao.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxODoyNToyOVrOFgmVLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxODoyNToyOVrOFgmVLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcyNjc2Nw==", "bodyText": "I think it's more descriptive to use boolean rather than tinyint(1). Tinyint(1) is how MySQL implements boolean but that's its implementation detail.", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r369726767", "createdAt": "2020-01-22T18:25:29Z", "author": {"login": "rongrong"}, "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/FunctionNamespaceDao.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.functionNamespace.db;\n+\n+import com.facebook.presto.spi.function.RoutineCharacteristics.Language;\n+import com.facebook.presto.spi.function.SqlFunctionId;\n+import com.facebook.presto.spi.function.SqlInvokedFunction;\n+import com.facebook.presto.spi.function.SqlParameter;\n+import com.facebook.presto.spi.type.TypeSignature;\n+import org.jdbi.v3.sqlobject.config.RegisterArgumentFactories;\n+import org.jdbi.v3.sqlobject.config.RegisterArgumentFactory;\n+import org.jdbi.v3.sqlobject.config.RegisterRowMapper;\n+import org.jdbi.v3.sqlobject.config.RegisterRowMappers;\n+import org.jdbi.v3.sqlobject.customizer.Bind;\n+import org.jdbi.v3.sqlobject.customizer.Define;\n+import org.jdbi.v3.sqlobject.statement.SqlQuery;\n+import org.jdbi.v3.sqlobject.statement.SqlUpdate;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+@RegisterRowMappers({\n+        @RegisterRowMapper(SqlInvokedFunctionRowMapper.class),\n+        @RegisterRowMapper(SqlInvokedFunctionRecordRowMapper.class)\n+})\n+@RegisterArgumentFactories({\n+        @RegisterArgumentFactory(SqlFunctionIdArgumentFactory.class),\n+        @RegisterArgumentFactory(SqlParametersArgumentFactory.class),\n+        @RegisterArgumentFactory(TypeSignatureArgumentFactory.class),\n+})\n+public interface FunctionNamespaceDao\n+{\n+    @SqlUpdate(\"CREATE TABLE IF NOT EXISTS <table_name> (\\n\" +\n+            \"   catalog_name varchar(128) NOT NULL,\\n\" +\n+            \"   schema_name varchar(128) NOT NULL,\\n\" +\n+            \" PRIMARY KEY (catalog_name, schema_name)\\n\" +\n+            \")\")\n+    void createFunctionNamespacesTableIfNotExists(@Define(\"table_name\") String tableName);\n+\n+    @SqlUpdate(\"CREATE TABLE IF NOT EXISTS <table_name> (\\n\" +\n+            \"  id bigint(20) NOT NULL AUTO_INCREMENT,\\n\" +\n+            \"  function_id varchar(700) NOT NULL,\\n\" +\n+            \"  version bigint(20) unsigned NOT NULL,\\n\" +\n+            \"  catalog_name varchar(128) NOT NULL,\\n\" +\n+            \"  schema_name varchar(128) NOT NULL,\\n\" +\n+            \"  function_name varchar(256) NOT NULL,\\n\" +\n+            \"  parameters text NOT NULL,\\n\" +\n+            \"  return_type varchar(256) NOT NULL,\\n\" +\n+            \"  language varchar(64) NOT NULL,\\n\" +\n+            \"  `deterministic` tinyint(1) NOT NULL,\\n\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "810b00af4b1ac1155ec14ece1b64a7b5a9c2b9c4"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTE3NDY0OnYy", "diffSide": "RIGHT", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/FunctionNamespaceDao.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxODoyNjozMFrOFgmXQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxODoyNjozMFrOFgmXQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcyNzI5Ng==", "bodyText": "space between column names.", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r369727296", "createdAt": "2020-01-22T18:26:30Z", "author": {"login": "rongrong"}, "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/FunctionNamespaceDao.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.functionNamespace.db;\n+\n+import com.facebook.presto.spi.function.RoutineCharacteristics.Language;\n+import com.facebook.presto.spi.function.SqlFunctionId;\n+import com.facebook.presto.spi.function.SqlInvokedFunction;\n+import com.facebook.presto.spi.function.SqlParameter;\n+import com.facebook.presto.spi.type.TypeSignature;\n+import org.jdbi.v3.sqlobject.config.RegisterArgumentFactories;\n+import org.jdbi.v3.sqlobject.config.RegisterArgumentFactory;\n+import org.jdbi.v3.sqlobject.config.RegisterRowMapper;\n+import org.jdbi.v3.sqlobject.config.RegisterRowMappers;\n+import org.jdbi.v3.sqlobject.customizer.Bind;\n+import org.jdbi.v3.sqlobject.customizer.Define;\n+import org.jdbi.v3.sqlobject.statement.SqlQuery;\n+import org.jdbi.v3.sqlobject.statement.SqlUpdate;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+@RegisterRowMappers({\n+        @RegisterRowMapper(SqlInvokedFunctionRowMapper.class),\n+        @RegisterRowMapper(SqlInvokedFunctionRecordRowMapper.class)\n+})\n+@RegisterArgumentFactories({\n+        @RegisterArgumentFactory(SqlFunctionIdArgumentFactory.class),\n+        @RegisterArgumentFactory(SqlParametersArgumentFactory.class),\n+        @RegisterArgumentFactory(TypeSignatureArgumentFactory.class),\n+})\n+public interface FunctionNamespaceDao\n+{\n+    @SqlUpdate(\"CREATE TABLE IF NOT EXISTS <table_name> (\\n\" +\n+            \"   catalog_name varchar(128) NOT NULL,\\n\" +\n+            \"   schema_name varchar(128) NOT NULL,\\n\" +\n+            \" PRIMARY KEY (catalog_name, schema_name)\\n\" +\n+            \")\")\n+    void createFunctionNamespacesTableIfNotExists(@Define(\"table_name\") String tableName);\n+\n+    @SqlUpdate(\"CREATE TABLE IF NOT EXISTS <table_name> (\\n\" +\n+            \"  id bigint(20) NOT NULL AUTO_INCREMENT,\\n\" +\n+            \"  function_id varchar(700) NOT NULL,\\n\" +\n+            \"  version bigint(20) unsigned NOT NULL,\\n\" +\n+            \"  catalog_name varchar(128) NOT NULL,\\n\" +\n+            \"  schema_name varchar(128) NOT NULL,\\n\" +\n+            \"  function_name varchar(256) NOT NULL,\\n\" +\n+            \"  parameters text NOT NULL,\\n\" +\n+            \"  return_type varchar(256) NOT NULL,\\n\" +\n+            \"  language varchar(64) NOT NULL,\\n\" +\n+            \"  `deterministic` tinyint(1) NOT NULL,\\n\" +\n+            \"  called_on_null_input tinyint(1) NOT NULL,\\n\" +\n+            \"  body mediumtext,\\n\" +\n+            \"  description text,\\n\" +\n+            \"  deleted tinyint(1) NOT NULL DEFAULT false,\\n\" +\n+            \"  delete_time TIMESTAMP NULL DEFAULT NULL,\\n\" +\n+            \"  create_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\\n\" +\n+            \"  update_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\\n\" +\n+            \"  PRIMARY KEY (id),\\n\" +\n+            \"  UNIQUE KEY function_id_version (function_id,version),\\n\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "810b00af4b1ac1155ec14ece1b64a7b5a9c2b9c4"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTE3NDk4OnYy", "diffSide": "RIGHT", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/FunctionNamespaceDao.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxODoyNjozNlrOFgmXeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxODoyNjozNlrOFgmXeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcyNzM1Mw==", "bodyText": "same here.", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r369727353", "createdAt": "2020-01-22T18:26:36Z", "author": {"login": "rongrong"}, "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/FunctionNamespaceDao.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.functionNamespace.db;\n+\n+import com.facebook.presto.spi.function.RoutineCharacteristics.Language;\n+import com.facebook.presto.spi.function.SqlFunctionId;\n+import com.facebook.presto.spi.function.SqlInvokedFunction;\n+import com.facebook.presto.spi.function.SqlParameter;\n+import com.facebook.presto.spi.type.TypeSignature;\n+import org.jdbi.v3.sqlobject.config.RegisterArgumentFactories;\n+import org.jdbi.v3.sqlobject.config.RegisterArgumentFactory;\n+import org.jdbi.v3.sqlobject.config.RegisterRowMapper;\n+import org.jdbi.v3.sqlobject.config.RegisterRowMappers;\n+import org.jdbi.v3.sqlobject.customizer.Bind;\n+import org.jdbi.v3.sqlobject.customizer.Define;\n+import org.jdbi.v3.sqlobject.statement.SqlQuery;\n+import org.jdbi.v3.sqlobject.statement.SqlUpdate;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+@RegisterRowMappers({\n+        @RegisterRowMapper(SqlInvokedFunctionRowMapper.class),\n+        @RegisterRowMapper(SqlInvokedFunctionRecordRowMapper.class)\n+})\n+@RegisterArgumentFactories({\n+        @RegisterArgumentFactory(SqlFunctionIdArgumentFactory.class),\n+        @RegisterArgumentFactory(SqlParametersArgumentFactory.class),\n+        @RegisterArgumentFactory(TypeSignatureArgumentFactory.class),\n+})\n+public interface FunctionNamespaceDao\n+{\n+    @SqlUpdate(\"CREATE TABLE IF NOT EXISTS <table_name> (\\n\" +\n+            \"   catalog_name varchar(128) NOT NULL,\\n\" +\n+            \"   schema_name varchar(128) NOT NULL,\\n\" +\n+            \" PRIMARY KEY (catalog_name, schema_name)\\n\" +\n+            \")\")\n+    void createFunctionNamespacesTableIfNotExists(@Define(\"table_name\") String tableName);\n+\n+    @SqlUpdate(\"CREATE TABLE IF NOT EXISTS <table_name> (\\n\" +\n+            \"  id bigint(20) NOT NULL AUTO_INCREMENT,\\n\" +\n+            \"  function_id varchar(700) NOT NULL,\\n\" +\n+            \"  version bigint(20) unsigned NOT NULL,\\n\" +\n+            \"  catalog_name varchar(128) NOT NULL,\\n\" +\n+            \"  schema_name varchar(128) NOT NULL,\\n\" +\n+            \"  function_name varchar(256) NOT NULL,\\n\" +\n+            \"  parameters text NOT NULL,\\n\" +\n+            \"  return_type varchar(256) NOT NULL,\\n\" +\n+            \"  language varchar(64) NOT NULL,\\n\" +\n+            \"  `deterministic` tinyint(1) NOT NULL,\\n\" +\n+            \"  called_on_null_input tinyint(1) NOT NULL,\\n\" +\n+            \"  body mediumtext,\\n\" +\n+            \"  description text,\\n\" +\n+            \"  deleted tinyint(1) NOT NULL DEFAULT false,\\n\" +\n+            \"  delete_time TIMESTAMP NULL DEFAULT NULL,\\n\" +\n+            \"  create_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\\n\" +\n+            \"  update_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\\n\" +\n+            \"  PRIMARY KEY (id),\\n\" +\n+            \"  UNIQUE KEY function_id_version (function_id,version),\\n\" +\n+            \"  KEY qualified_function_name (catalog_name,schema_name,function_name)\\n\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "810b00af4b1ac1155ec14ece1b64a7b5a9c2b9c4"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTE3NjY4OnYy", "diffSide": "RIGHT", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/FunctionNamespaceDao.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxODoyNzowMlrOFgmYcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxODoyNzowMlrOFgmYcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcyNzYwMw==", "bodyText": "Maybe change to more meaningful table name.", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r369727603", "createdAt": "2020-01-22T18:27:02Z", "author": {"login": "rongrong"}, "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/FunctionNamespaceDao.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.functionNamespace.db;\n+\n+import com.facebook.presto.spi.function.RoutineCharacteristics.Language;\n+import com.facebook.presto.spi.function.SqlFunctionId;\n+import com.facebook.presto.spi.function.SqlInvokedFunction;\n+import com.facebook.presto.spi.function.SqlParameter;\n+import com.facebook.presto.spi.type.TypeSignature;\n+import org.jdbi.v3.sqlobject.config.RegisterArgumentFactories;\n+import org.jdbi.v3.sqlobject.config.RegisterArgumentFactory;\n+import org.jdbi.v3.sqlobject.config.RegisterRowMapper;\n+import org.jdbi.v3.sqlobject.config.RegisterRowMappers;\n+import org.jdbi.v3.sqlobject.customizer.Bind;\n+import org.jdbi.v3.sqlobject.customizer.Define;\n+import org.jdbi.v3.sqlobject.statement.SqlQuery;\n+import org.jdbi.v3.sqlobject.statement.SqlUpdate;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+@RegisterRowMappers({\n+        @RegisterRowMapper(SqlInvokedFunctionRowMapper.class),\n+        @RegisterRowMapper(SqlInvokedFunctionRecordRowMapper.class)\n+})\n+@RegisterArgumentFactories({\n+        @RegisterArgumentFactory(SqlFunctionIdArgumentFactory.class),\n+        @RegisterArgumentFactory(SqlParametersArgumentFactory.class),\n+        @RegisterArgumentFactory(TypeSignatureArgumentFactory.class),\n+})\n+public interface FunctionNamespaceDao\n+{\n+    @SqlUpdate(\"CREATE TABLE IF NOT EXISTS <table_name> (\\n\" +\n+            \"   catalog_name varchar(128) NOT NULL,\\n\" +\n+            \"   schema_name varchar(128) NOT NULL,\\n\" +\n+            \" PRIMARY KEY (catalog_name, schema_name)\\n\" +\n+            \")\")\n+    void createFunctionNamespacesTableIfNotExists(@Define(\"table_name\") String tableName);\n+\n+    @SqlUpdate(\"CREATE TABLE IF NOT EXISTS <table_name> (\\n\" +\n+            \"  id bigint(20) NOT NULL AUTO_INCREMENT,\\n\" +\n+            \"  function_id varchar(700) NOT NULL,\\n\" +\n+            \"  version bigint(20) unsigned NOT NULL,\\n\" +\n+            \"  catalog_name varchar(128) NOT NULL,\\n\" +\n+            \"  schema_name varchar(128) NOT NULL,\\n\" +\n+            \"  function_name varchar(256) NOT NULL,\\n\" +\n+            \"  parameters text NOT NULL,\\n\" +\n+            \"  return_type varchar(256) NOT NULL,\\n\" +\n+            \"  language varchar(64) NOT NULL,\\n\" +\n+            \"  `deterministic` tinyint(1) NOT NULL,\\n\" +\n+            \"  called_on_null_input tinyint(1) NOT NULL,\\n\" +\n+            \"  body mediumtext,\\n\" +\n+            \"  description text,\\n\" +\n+            \"  deleted tinyint(1) NOT NULL DEFAULT false,\\n\" +\n+            \"  delete_time TIMESTAMP NULL DEFAULT NULL,\\n\" +\n+            \"  create_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\\n\" +\n+            \"  update_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\\n\" +\n+            \"  PRIMARY KEY (id),\\n\" +\n+            \"  UNIQUE KEY function_id_version (function_id,version),\\n\" +\n+            \"  KEY qualified_function_name (catalog_name,schema_name,function_name)\\n\" +\n+            \")\")\n+    void createSqlInvokedFunctionsTableIfNotExists(@Define(\"table_name\") String tableName);\n+\n+    @SqlQuery(\"SELECT\\n\" +\n+            \"   count(1) > 0\\n\" +\n+            \"FROM <table_name>\\n\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "810b00af4b1ac1155ec14ece1b64a7b5a9c2b9c4"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTE5MDIxOnYy", "diffSide": "RIGHT", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/FunctionNamespaceDao.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxODozMToxMFrOFgmg0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMDowMTozNlrOFhK8fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcyOTc0NQ==", "bodyText": "maybe rename this column so it's not a keyword? This is a little annoying. \ud83d\ude02Don't know what to name it though...", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r369729745", "createdAt": "2020-01-22T18:31:10Z", "author": {"login": "rongrong"}, "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/FunctionNamespaceDao.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.functionNamespace.db;\n+\n+import com.facebook.presto.spi.function.RoutineCharacteristics.Language;\n+import com.facebook.presto.spi.function.SqlFunctionId;\n+import com.facebook.presto.spi.function.SqlInvokedFunction;\n+import com.facebook.presto.spi.function.SqlParameter;\n+import com.facebook.presto.spi.type.TypeSignature;\n+import org.jdbi.v3.sqlobject.config.RegisterArgumentFactories;\n+import org.jdbi.v3.sqlobject.config.RegisterArgumentFactory;\n+import org.jdbi.v3.sqlobject.config.RegisterRowMapper;\n+import org.jdbi.v3.sqlobject.config.RegisterRowMappers;\n+import org.jdbi.v3.sqlobject.customizer.Bind;\n+import org.jdbi.v3.sqlobject.customizer.Define;\n+import org.jdbi.v3.sqlobject.statement.SqlQuery;\n+import org.jdbi.v3.sqlobject.statement.SqlUpdate;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+@RegisterRowMappers({\n+        @RegisterRowMapper(SqlInvokedFunctionRowMapper.class),\n+        @RegisterRowMapper(SqlInvokedFunctionRecordRowMapper.class)\n+})\n+@RegisterArgumentFactories({\n+        @RegisterArgumentFactory(SqlFunctionIdArgumentFactory.class),\n+        @RegisterArgumentFactory(SqlParametersArgumentFactory.class),\n+        @RegisterArgumentFactory(TypeSignatureArgumentFactory.class),\n+})\n+public interface FunctionNamespaceDao\n+{\n+    @SqlUpdate(\"CREATE TABLE IF NOT EXISTS <table_name> (\\n\" +\n+            \"   catalog_name varchar(128) NOT NULL,\\n\" +\n+            \"   schema_name varchar(128) NOT NULL,\\n\" +\n+            \" PRIMARY KEY (catalog_name, schema_name)\\n\" +\n+            \")\")\n+    void createFunctionNamespacesTableIfNotExists(@Define(\"table_name\") String tableName);\n+\n+    @SqlUpdate(\"CREATE TABLE IF NOT EXISTS <table_name> (\\n\" +\n+            \"  id bigint(20) NOT NULL AUTO_INCREMENT,\\n\" +\n+            \"  function_id varchar(700) NOT NULL,\\n\" +\n+            \"  version bigint(20) unsigned NOT NULL,\\n\" +\n+            \"  catalog_name varchar(128) NOT NULL,\\n\" +\n+            \"  schema_name varchar(128) NOT NULL,\\n\" +\n+            \"  function_name varchar(256) NOT NULL,\\n\" +\n+            \"  parameters text NOT NULL,\\n\" +\n+            \"  return_type varchar(256) NOT NULL,\\n\" +\n+            \"  language varchar(64) NOT NULL,\\n\" +\n+            \"  `deterministic` tinyint(1) NOT NULL,\\n\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "810b00af4b1ac1155ec14ece1b64a7b5a9c2b9c4"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMyNjY1Mg==", "bodyText": "I renamed it to is_deterministic. Sounds good?", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r370326652", "createdAt": "2020-01-23T20:01:36Z", "author": {"login": "caithagoras"}, "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/FunctionNamespaceDao.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.functionNamespace.db;\n+\n+import com.facebook.presto.spi.function.RoutineCharacteristics.Language;\n+import com.facebook.presto.spi.function.SqlFunctionId;\n+import com.facebook.presto.spi.function.SqlInvokedFunction;\n+import com.facebook.presto.spi.function.SqlParameter;\n+import com.facebook.presto.spi.type.TypeSignature;\n+import org.jdbi.v3.sqlobject.config.RegisterArgumentFactories;\n+import org.jdbi.v3.sqlobject.config.RegisterArgumentFactory;\n+import org.jdbi.v3.sqlobject.config.RegisterRowMapper;\n+import org.jdbi.v3.sqlobject.config.RegisterRowMappers;\n+import org.jdbi.v3.sqlobject.customizer.Bind;\n+import org.jdbi.v3.sqlobject.customizer.Define;\n+import org.jdbi.v3.sqlobject.statement.SqlQuery;\n+import org.jdbi.v3.sqlobject.statement.SqlUpdate;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+@RegisterRowMappers({\n+        @RegisterRowMapper(SqlInvokedFunctionRowMapper.class),\n+        @RegisterRowMapper(SqlInvokedFunctionRecordRowMapper.class)\n+})\n+@RegisterArgumentFactories({\n+        @RegisterArgumentFactory(SqlFunctionIdArgumentFactory.class),\n+        @RegisterArgumentFactory(SqlParametersArgumentFactory.class),\n+        @RegisterArgumentFactory(TypeSignatureArgumentFactory.class),\n+})\n+public interface FunctionNamespaceDao\n+{\n+    @SqlUpdate(\"CREATE TABLE IF NOT EXISTS <table_name> (\\n\" +\n+            \"   catalog_name varchar(128) NOT NULL,\\n\" +\n+            \"   schema_name varchar(128) NOT NULL,\\n\" +\n+            \" PRIMARY KEY (catalog_name, schema_name)\\n\" +\n+            \")\")\n+    void createFunctionNamespacesTableIfNotExists(@Define(\"table_name\") String tableName);\n+\n+    @SqlUpdate(\"CREATE TABLE IF NOT EXISTS <table_name> (\\n\" +\n+            \"  id bigint(20) NOT NULL AUTO_INCREMENT,\\n\" +\n+            \"  function_id varchar(700) NOT NULL,\\n\" +\n+            \"  version bigint(20) unsigned NOT NULL,\\n\" +\n+            \"  catalog_name varchar(128) NOT NULL,\\n\" +\n+            \"  schema_name varchar(128) NOT NULL,\\n\" +\n+            \"  function_name varchar(256) NOT NULL,\\n\" +\n+            \"  parameters text NOT NULL,\\n\" +\n+            \"  return_type varchar(256) NOT NULL,\\n\" +\n+            \"  language varchar(64) NOT NULL,\\n\" +\n+            \"  `deterministic` tinyint(1) NOT NULL,\\n\" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcyOTc0NQ=="}, "originalCommit": {"oid": "810b00af4b1ac1155ec14ece1b64a7b5a9c2b9c4"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTE5OTM0OnYy", "diffSide": "RIGHT", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/FunctionNamespaceDao.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxODozNDowOVrOFgmmqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxODozNDowOVrOFgmmqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTczMTI0MA==", "bodyText": "Name it getLatestRecordForUpdate? People not reading the implementation would not be aware of the side effect otherwise.", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r369731240", "createdAt": "2020-01-22T18:34:09Z", "author": {"login": "rongrong"}, "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/FunctionNamespaceDao.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.functionNamespace.db;\n+\n+import com.facebook.presto.spi.function.RoutineCharacteristics.Language;\n+import com.facebook.presto.spi.function.SqlFunctionId;\n+import com.facebook.presto.spi.function.SqlInvokedFunction;\n+import com.facebook.presto.spi.function.SqlParameter;\n+import com.facebook.presto.spi.type.TypeSignature;\n+import org.jdbi.v3.sqlobject.config.RegisterArgumentFactories;\n+import org.jdbi.v3.sqlobject.config.RegisterArgumentFactory;\n+import org.jdbi.v3.sqlobject.config.RegisterRowMapper;\n+import org.jdbi.v3.sqlobject.config.RegisterRowMappers;\n+import org.jdbi.v3.sqlobject.customizer.Bind;\n+import org.jdbi.v3.sqlobject.customizer.Define;\n+import org.jdbi.v3.sqlobject.statement.SqlQuery;\n+import org.jdbi.v3.sqlobject.statement.SqlUpdate;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+@RegisterRowMappers({\n+        @RegisterRowMapper(SqlInvokedFunctionRowMapper.class),\n+        @RegisterRowMapper(SqlInvokedFunctionRecordRowMapper.class)\n+})\n+@RegisterArgumentFactories({\n+        @RegisterArgumentFactory(SqlFunctionIdArgumentFactory.class),\n+        @RegisterArgumentFactory(SqlParametersArgumentFactory.class),\n+        @RegisterArgumentFactory(TypeSignatureArgumentFactory.class),\n+})\n+public interface FunctionNamespaceDao\n+{\n+    @SqlUpdate(\"CREATE TABLE IF NOT EXISTS <table_name> (\\n\" +\n+            \"   catalog_name varchar(128) NOT NULL,\\n\" +\n+            \"   schema_name varchar(128) NOT NULL,\\n\" +\n+            \" PRIMARY KEY (catalog_name, schema_name)\\n\" +\n+            \")\")\n+    void createFunctionNamespacesTableIfNotExists(@Define(\"table_name\") String tableName);\n+\n+    @SqlUpdate(\"CREATE TABLE IF NOT EXISTS <table_name> (\\n\" +\n+            \"  id bigint(20) NOT NULL AUTO_INCREMENT,\\n\" +\n+            \"  function_id varchar(700) NOT NULL,\\n\" +\n+            \"  version bigint(20) unsigned NOT NULL,\\n\" +\n+            \"  catalog_name varchar(128) NOT NULL,\\n\" +\n+            \"  schema_name varchar(128) NOT NULL,\\n\" +\n+            \"  function_name varchar(256) NOT NULL,\\n\" +\n+            \"  parameters text NOT NULL,\\n\" +\n+            \"  return_type varchar(256) NOT NULL,\\n\" +\n+            \"  language varchar(64) NOT NULL,\\n\" +\n+            \"  `deterministic` tinyint(1) NOT NULL,\\n\" +\n+            \"  called_on_null_input tinyint(1) NOT NULL,\\n\" +\n+            \"  body mediumtext,\\n\" +\n+            \"  description text,\\n\" +\n+            \"  deleted tinyint(1) NOT NULL DEFAULT false,\\n\" +\n+            \"  delete_time TIMESTAMP NULL DEFAULT NULL,\\n\" +\n+            \"  create_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\\n\" +\n+            \"  update_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\\n\" +\n+            \"  PRIMARY KEY (id),\\n\" +\n+            \"  UNIQUE KEY function_id_version (function_id,version),\\n\" +\n+            \"  KEY qualified_function_name (catalog_name,schema_name,function_name)\\n\" +\n+            \")\")\n+    void createSqlInvokedFunctionsTableIfNotExists(@Define(\"table_name\") String tableName);\n+\n+    @SqlQuery(\"SELECT\\n\" +\n+            \"   count(1) > 0\\n\" +\n+            \"FROM <table_name>\\n\" +\n+            \"WHERE catalog_name = :catalog_name AND schema_name = :schema_name\")\n+    boolean servesFunctionNamespace(\n+            @Define(\"table_name\") String tableName,\n+            @Bind(\"catalog_name\") String catalogName,\n+            @Bind(\"schema_name\") String schemaName);\n+\n+    @SqlQuery(\"SELECT\\n\" +\n+            \"    t.catalog_name,\\n\" +\n+            \"    t.schema_name,\\n\" +\n+            \"    t.function_name,\\n\" +\n+            \"    t.parameters,\\n\" +\n+            \"    t.return_type,\\n\" +\n+            \"    t.description,\\n\" +\n+            \"    t.language,\\n\" +\n+            \"    t.`deterministic`,\\n\" +\n+            \"    t.called_on_null_input,\\n\" +\n+            \"    t.body,\\n\" +\n+            \"    t.version\\n\" +\n+            \"FROM <table_name> t\\n\" +\n+            \"JOIN (\\n\" +\n+            \"    SELECT\\n\" +\n+            \"        function_id,\\n\" +\n+            \"        MAX(version) version\\n\" +\n+            \"    FROM <table_name>\\n\" +\n+            \"    WHERE catalog_name = :catalog_name\\n\" +\n+            \"      AND schema_name = :schema_name\\n\" +\n+            \"      AND function_name = :function_name\\n\" +\n+            \"    GROUP BY\\n\" +\n+            \"        function_id\\n\" +\n+            \") v\\n\" +\n+            \"    ON t.function_id = v.function_id\\n \" +\n+            \"    AND t.version = v.version\\n\" +\n+            \"WHERE\\n\" +\n+            \"    NOT t.deleted\")\n+    List<SqlInvokedFunction> getFunctions(\n+            @Define(\"table_name\") String tableName,\n+            @Bind(\"catalog_name\") String catalogName,\n+            @Bind(\"schema_name\") String schemaName,\n+            @Bind(\"function_name\") String functionName);\n+\n+    @SqlQuery(\"SELECT\\n\" +\n+            \"    catalog_name,\\n\" +\n+            \"    schema_name,\\n\" +\n+            \"    function_name,\\n\" +\n+            \"    parameters,\\n\" +\n+            \"    return_type,\\n\" +\n+            \"    description,\\n\" +\n+            \"    language,\\n\" +\n+            \"    `deterministic`,\\n\" +\n+            \"    called_on_null_input,\\n\" +\n+            \"    body,\\n\" +\n+            \"    version\\n\" +\n+            \"FROM <table_name>\\n\" +\n+            \"WHERE\\n\" +\n+            \"    function_id = :function_id\\n\" +\n+            \"    AND version = :version\")\n+    Optional<SqlInvokedFunction> getFunction(\n+            @Define(\"table_name\") String tableName,\n+            @Bind(\"function_id\") SqlFunctionId functionId,\n+            @Bind(\"version\") long version);\n+\n+    @SqlQuery(\"SELECT\\n\" +\n+            \"    t.catalog_name,\\n\" +\n+            \"    t.schema_name,\\n\" +\n+            \"    t.function_name,\\n\" +\n+            \"    t.parameters,\\n\" +\n+            \"    t.return_type,\\n\" +\n+            \"    t.description,\\n\" +\n+            \"    t.language,\\n\" +\n+            \"    t.`deterministic`,\\n\" +\n+            \"    t.called_on_null_input,\\n\" +\n+            \"    t.body,\\n\" +\n+            \"    t.version,\\n\" +\n+            \"    t.deleted\\n\" +\n+            \"FROM <table_name> t\\n\" +\n+            \"JOIN (\\n\" +\n+            \"    SELECT\\n\" +\n+            \"        MAX(version) version\\n\" +\n+            \"    FROM <table_name>\\n\" +\n+            \"    WHERE\\n\" +\n+            \"        function_id = :function_id\\n\" +\n+            \") v\\n\" +\n+            \"ON\\n\" +\n+            \"    t.version = v.version\\n\" +\n+            \"WHERE\\n\" +\n+            \"    t.function_id = :function_id\\n\" +\n+            \"FOR UPDATE\")\n+    Optional<SqlInvokedFunctionRecord> getLatestRecord(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "810b00af4b1ac1155ec14ece1b64a7b5a9c2b9c4"}, "originalPosition": 165}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTIwNzk4OnYy", "diffSide": "RIGHT", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/SqlInvokedFunctionRowMapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxODozNjo1NFrOFgmsIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxODozNjo1NFrOFgmsIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTczMjY0MQ==", "bodyText": "Maybe name it SQL_PARAMETERS_CODEC?", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r369732641", "createdAt": "2020-01-22T18:36:54Z", "author": {"login": "rongrong"}, "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/SqlInvokedFunctionRowMapper.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.functionNamespace.db;\n+\n+import com.facebook.airlift.json.JsonCodec;\n+import com.facebook.presto.spi.CatalogSchemaName;\n+import com.facebook.presto.spi.function.QualifiedFunctionName;\n+import com.facebook.presto.spi.function.RoutineCharacteristics;\n+import com.facebook.presto.spi.function.RoutineCharacteristics.Language;\n+import com.facebook.presto.spi.function.SqlInvokedFunction;\n+import com.facebook.presto.spi.function.SqlParameter;\n+import org.jdbi.v3.core.mapper.RowMapper;\n+import org.jdbi.v3.core.statement.StatementContext;\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.spi.function.RoutineCharacteristics.Determinism.DETERMINISTIC;\n+import static com.facebook.presto.spi.function.RoutineCharacteristics.Determinism.NOT_DETERMINISTIC;\n+import static com.facebook.presto.spi.function.RoutineCharacteristics.NullCallClause.CALLED_ON_NULL_INPUT;\n+import static com.facebook.presto.spi.function.RoutineCharacteristics.NullCallClause.RETURNS_NULL_ON_NULL_INPUT;\n+import static com.facebook.presto.spi.type.TypeSignature.parseTypeSignature;\n+\n+public class SqlInvokedFunctionRowMapper\n+        implements RowMapper<SqlInvokedFunction>\n+{\n+    private static final JsonCodec<List<SqlParameter>> CODEC = JsonCodec.listJsonCodec(SqlParameter.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "810b00af4b1ac1155ec14ece1b64a7b5a9c2b9c4"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTIxMzI2OnYy", "diffSide": "RIGHT", "path": "presto-function-namespace-managers/src/test/java/com/facebook/presto/functionNamespace/db/TestDbFunctionNamespaceManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxODozODo0MlrOFgmvjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxODozODo0MlrOFgmvjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTczMzUxNw==", "bodyText": "Do they need to be public? Maybe use \"test_xxx\"?", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r369733517", "createdAt": "2020-01-22T18:38:42Z", "author": {"login": "rongrong"}, "path": "presto-function-namespace-managers/src/test/java/com/facebook/presto/functionNamespace/db/TestDbFunctionNamespaceManager.java", "diffHunk": "@@ -0,0 +1,292 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.functionNamespace.db;\n+\n+import com.facebook.presto.functionNamespace.SqlInvokedFunctionNamespaceManagerConfig;\n+import com.facebook.presto.spi.CatalogSchemaName;\n+import com.facebook.presto.spi.ErrorCodeSupplier;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.function.FunctionHandle;\n+import com.facebook.presto.spi.function.FunctionMetadata;\n+import com.facebook.presto.spi.function.FunctionNamespaceTransactionHandle;\n+import com.facebook.presto.spi.function.QualifiedFunctionName;\n+import com.facebook.presto.spi.function.RoutineCharacteristics;\n+import com.facebook.presto.spi.function.SqlFunctionHandle;\n+import com.facebook.presto.spi.function.SqlFunctionId;\n+import com.facebook.presto.spi.function.SqlInvokedFunction;\n+import com.facebook.presto.spi.function.SqlParameter;\n+import com.facebook.presto.spi.type.TypeSignature;\n+import com.facebook.presto.testing.mysql.TestingMySqlServer;\n+import com.google.common.base.Joiner;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.util.concurrent.UncheckedExecutionException;\n+import io.airlift.units.Duration;\n+import org.jdbi.v3.core.Handle;\n+import org.jdbi.v3.core.Jdbi;\n+import org.jdbi.v3.sqlobject.SqlObjectPlugin;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.sql.DriverManager;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.facebook.airlift.testing.Closeables.closeQuietly;\n+import static com.facebook.presto.functionNamespace.testing.SqlInvokedFunctionTestUtils.FUNCTION_POWER_TOWER_DOUBLE;\n+import static com.facebook.presto.functionNamespace.testing.SqlInvokedFunctionTestUtils.FUNCTION_POWER_TOWER_DOUBLE_UPDATED;\n+import static com.facebook.presto.functionNamespace.testing.SqlInvokedFunctionTestUtils.FUNCTION_POWER_TOWER_INT;\n+import static com.facebook.presto.functionNamespace.testing.SqlInvokedFunctionTestUtils.POWER_TOWER;\n+import static com.facebook.presto.spi.StandardErrorCode.ALREADY_EXISTS;\n+import static com.facebook.presto.spi.function.FunctionKind.SCALAR;\n+import static com.facebook.presto.spi.function.RoutineCharacteristics.Determinism.DETERMINISTIC;\n+import static com.facebook.presto.spi.function.RoutineCharacteristics.NullCallClause.RETURNS_NULL_ON_NULL_INPUT;\n+import static com.facebook.presto.spi.type.StandardTypes.DOUBLE;\n+import static com.facebook.presto.spi.type.TypeSignature.parseTypeSignature;\n+import static java.lang.String.format;\n+import static java.util.Collections.nCopies;\n+import static java.util.Comparator.comparing;\n+import static java.util.concurrent.TimeUnit.NANOSECONDS;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertTrue;\n+import static org.testng.Assert.fail;\n+\n+@Test(singleThreaded = true)\n+public class TestDbFunctionNamespaceManager\n+{\n+    private static final QualifiedFunctionName TANGENT = QualifiedFunctionName.of(new CatalogSchemaName(\"unittest\", \"memory\"), \"tangent\");\n+    private static final ImmutableList<SqlParameter> TANGENT_PARAMETERS = ImmutableList.of(new SqlParameter(\"x\", parseTypeSignature(DOUBLE)));\n+    private static final TypeSignature TANGENT_RETURN_TYPE = parseTypeSignature(DOUBLE);\n+    private static final String TANGENT_DESCRIPTION = \"power tower\";\n+    private static final RoutineCharacteristics TANGENT_CHARACTERISTICS = RoutineCharacteristics.builder()\n+            .setDeterminism(DETERMINISTIC)\n+            .setNullCallClause(RETURNS_NULL_ON_NULL_INPUT)\n+            .build();\n+    private static final String TANGENT_BODY = \"sin(x) / cos(x)\";\n+    private static final SqlInvokedFunction FUNCTION_TANGENT = new SqlInvokedFunction(\n+            TANGENT,\n+            TANGENT_PARAMETERS,\n+            TANGENT_RETURN_TYPE,\n+            TANGENT_DESCRIPTION,\n+            TANGENT_CHARACTERISTICS,\n+            TANGENT_BODY,\n+            Optional.empty());\n+\n+    private static final String DB = \"presto\";\n+\n+    private TestingMySqlServer mySqlServer;\n+    private Jdbi jdbi;\n+    private DbFunctionNamespaceManager functionNamespaceManager;\n+\n+    public static String getFunctionNamespacesTableName()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "810b00af4b1ac1155ec14ece1b64a7b5a9c2b9c4"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTIyNjQzOnYy", "diffSide": "RIGHT", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/DbFunctionNamespaceManagerConfig.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxODo0MzowN1rOFgm4Nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMjowMjo1N1rOFhrpdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTczNTczNQ==", "bodyText": "You are not using these when creating the database tables. And as long as you are using CREATE TABLE IF NOT EXISTS you cannot really change the upper bound of this. So either restrict the allowed value, or this doesn't really need to be configurable.", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r369735735", "createdAt": "2020-01-22T18:43:07Z", "author": {"login": "rongrong"}, "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/DbFunctionNamespaceManagerConfig.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.functionNamespace.db;\n+\n+import com.facebook.airlift.configuration.Config;\n+import com.facebook.presto.spi.CatalogSchemaName;\n+import com.google.common.base.Joiner;\n+import com.google.common.base.Splitter;\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.units.Duration;\n+\n+import javax.validation.constraints.Min;\n+import javax.validation.constraints.NotNull;\n+\n+import java.util.List;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.lang.String.format;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+\n+public class DbFunctionNamespaceManagerConfig\n+{\n+    private static final Splitter NAMESPACE_SPLITTER = Splitter.on(',').trimResults().omitEmptyStrings();\n+    private static final Splitter CATALOG_SCHEMA_SPLITTER = Splitter.on('.');\n+\n+    private String functionNamespacesTableName = \"sql_invoked_function_namespaces\";\n+    private String functionsTableName = \"sql_invoked_functions\";\n+    private List<CatalogSchemaName> defaultFunctionNamespaces = ImmutableList.of();\n+    private Duration queryTimeout = new Duration(20, SECONDS);\n+\n+    private int maxCatalogNameLength = 128;\n+    private int maxSchemaNameLength = 128;\n+    private int maxFunctionNameLength = 256;\n+    private int maxParameterTypesLength = 500;\n+    private int maxReturnTypeLength = 256;\n+\n+    @NotNull\n+    public String getFunctionNamespacesTableName()\n+    {\n+        return functionNamespacesTableName;\n+    }\n+\n+    @Config(\"function-namespace-table-name\")\n+    public DbFunctionNamespaceManagerConfig setFunctionNamespacesTableName(String functionNamespacesTableName)\n+    {\n+        this.functionNamespacesTableName = functionNamespacesTableName;\n+        return this;\n+    }\n+\n+    @NotNull\n+    public List<CatalogSchemaName> getDefaultFunctionNamespaces()\n+    {\n+        return defaultFunctionNamespaces;\n+    }\n+\n+    @Config(\"default-function-namespaces\")\n+    public DbFunctionNamespaceManagerConfig setDefaultFunctionNamespaces(String defaultFunctionNamespaces)\n+    {\n+        this.defaultFunctionNamespaces = NAMESPACE_SPLITTER.splitToList(defaultFunctionNamespaces).stream()\n+                .map(s -> CATALOG_SCHEMA_SPLITTER.splitToList(s))\n+                .map(parts -> {\n+                    checkArgument(parts.size() == 2, format(\"Expect catalog.schema, get %s\", Joiner.on(',').join(parts)));\n+                    return new CatalogSchemaName(parts.get(0), parts.get(1));\n+                })\n+                .collect(toImmutableList());\n+        return this;\n+    }\n+\n+    @NotNull\n+    public String getFunctionsTableName()\n+    {\n+        return functionsTableName;\n+    }\n+\n+    @Config(\"function-table-name\")\n+    public DbFunctionNamespaceManagerConfig setFunctionsTableName(String functionsTableName)\n+    {\n+        this.functionsTableName = functionsTableName;\n+        return this;\n+    }\n+\n+    @NotNull\n+    public Duration getQueryTimeout()\n+    {\n+        return queryTimeout;\n+    }\n+\n+    @Config(\"query-timeout\")\n+    public DbFunctionNamespaceManagerConfig setQueryTimeout(Duration queryTimeout)\n+    {\n+        this.queryTimeout = queryTimeout;\n+        return this;\n+    }\n+\n+    @Min(1)\n+    public int getMaxCatalogNameLength()\n+    {\n+        return maxCatalogNameLength;\n+    }\n+\n+    @Config(\"max-catalog-name-length\")\n+    public DbFunctionNamespaceManagerConfig setMaxCatalogNameLength(int maxCatalogNameLength)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "810b00af4b1ac1155ec14ece1b64a7b5a9c2b9c4"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMxOTcxMQ==", "bodyText": "Open source users can choose to create their own table as long as the it has columns that are expected in this function namespace manager, and they might have different lengths upper bound from the one defined in the Dao object.\nThis is a DbFunctionNamespaceManager, it support any databases as long as it has jdbc. Open source user may choose to connect to most db of their choice including PostgreSQL, Azure, or their proprietary DBMS, which might allow longer primary key length.\nThe @Max and @Min annotation should only be used to define the range of the value in which the property has definition, not by how the value will be used in a business logic. i.e. String can't have negative length, duration can't be negative, port is an unsigned 16 bit so it must be in [0, 65535].\nConfiguration properties allow flexibility, and user may choose not to supply a value and use the default one.", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r370319711", "createdAt": "2020-01-23T19:46:22Z", "author": {"login": "caithagoras"}, "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/DbFunctionNamespaceManagerConfig.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.functionNamespace.db;\n+\n+import com.facebook.airlift.configuration.Config;\n+import com.facebook.presto.spi.CatalogSchemaName;\n+import com.google.common.base.Joiner;\n+import com.google.common.base.Splitter;\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.units.Duration;\n+\n+import javax.validation.constraints.Min;\n+import javax.validation.constraints.NotNull;\n+\n+import java.util.List;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.lang.String.format;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+\n+public class DbFunctionNamespaceManagerConfig\n+{\n+    private static final Splitter NAMESPACE_SPLITTER = Splitter.on(',').trimResults().omitEmptyStrings();\n+    private static final Splitter CATALOG_SCHEMA_SPLITTER = Splitter.on('.');\n+\n+    private String functionNamespacesTableName = \"sql_invoked_function_namespaces\";\n+    private String functionsTableName = \"sql_invoked_functions\";\n+    private List<CatalogSchemaName> defaultFunctionNamespaces = ImmutableList.of();\n+    private Duration queryTimeout = new Duration(20, SECONDS);\n+\n+    private int maxCatalogNameLength = 128;\n+    private int maxSchemaNameLength = 128;\n+    private int maxFunctionNameLength = 256;\n+    private int maxParameterTypesLength = 500;\n+    private int maxReturnTypeLength = 256;\n+\n+    @NotNull\n+    public String getFunctionNamespacesTableName()\n+    {\n+        return functionNamespacesTableName;\n+    }\n+\n+    @Config(\"function-namespace-table-name\")\n+    public DbFunctionNamespaceManagerConfig setFunctionNamespacesTableName(String functionNamespacesTableName)\n+    {\n+        this.functionNamespacesTableName = functionNamespacesTableName;\n+        return this;\n+    }\n+\n+    @NotNull\n+    public List<CatalogSchemaName> getDefaultFunctionNamespaces()\n+    {\n+        return defaultFunctionNamespaces;\n+    }\n+\n+    @Config(\"default-function-namespaces\")\n+    public DbFunctionNamespaceManagerConfig setDefaultFunctionNamespaces(String defaultFunctionNamespaces)\n+    {\n+        this.defaultFunctionNamespaces = NAMESPACE_SPLITTER.splitToList(defaultFunctionNamespaces).stream()\n+                .map(s -> CATALOG_SCHEMA_SPLITTER.splitToList(s))\n+                .map(parts -> {\n+                    checkArgument(parts.size() == 2, format(\"Expect catalog.schema, get %s\", Joiner.on(',').join(parts)));\n+                    return new CatalogSchemaName(parts.get(0), parts.get(1));\n+                })\n+                .collect(toImmutableList());\n+        return this;\n+    }\n+\n+    @NotNull\n+    public String getFunctionsTableName()\n+    {\n+        return functionsTableName;\n+    }\n+\n+    @Config(\"function-table-name\")\n+    public DbFunctionNamespaceManagerConfig setFunctionsTableName(String functionsTableName)\n+    {\n+        this.functionsTableName = functionsTableName;\n+        return this;\n+    }\n+\n+    @NotNull\n+    public Duration getQueryTimeout()\n+    {\n+        return queryTimeout;\n+    }\n+\n+    @Config(\"query-timeout\")\n+    public DbFunctionNamespaceManagerConfig setQueryTimeout(Duration queryTimeout)\n+    {\n+        this.queryTimeout = queryTimeout;\n+        return this;\n+    }\n+\n+    @Min(1)\n+    public int getMaxCatalogNameLength()\n+    {\n+        return maxCatalogNameLength;\n+    }\n+\n+    @Config(\"max-catalog-name-length\")\n+    public DbFunctionNamespaceManagerConfig setMaxCatalogNameLength(int maxCatalogNameLength)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTczNTczNQ=="}, "originalCommit": {"oid": "810b00af4b1ac1155ec14ece1b64a7b5a9c2b9c4"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg2MjQ1Mg==", "bodyText": "The Dao is very much MySQL syntax so the argument that people might keep that while using a different database backend is not very convincing to me. In general it's better to only provide flexibility when absolutely needed otherwise you might end up just creating dead code that hard to reason about later. I'd remove these until it's proven necessary. After all this is not hard to add when it's needed. Currently from this PR I don't see any use for this.", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r370862452", "createdAt": "2020-01-24T22:02:57Z", "author": {"login": "rongrong"}, "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/DbFunctionNamespaceManagerConfig.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.functionNamespace.db;\n+\n+import com.facebook.airlift.configuration.Config;\n+import com.facebook.presto.spi.CatalogSchemaName;\n+import com.google.common.base.Joiner;\n+import com.google.common.base.Splitter;\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.units.Duration;\n+\n+import javax.validation.constraints.Min;\n+import javax.validation.constraints.NotNull;\n+\n+import java.util.List;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.lang.String.format;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+\n+public class DbFunctionNamespaceManagerConfig\n+{\n+    private static final Splitter NAMESPACE_SPLITTER = Splitter.on(',').trimResults().omitEmptyStrings();\n+    private static final Splitter CATALOG_SCHEMA_SPLITTER = Splitter.on('.');\n+\n+    private String functionNamespacesTableName = \"sql_invoked_function_namespaces\";\n+    private String functionsTableName = \"sql_invoked_functions\";\n+    private List<CatalogSchemaName> defaultFunctionNamespaces = ImmutableList.of();\n+    private Duration queryTimeout = new Duration(20, SECONDS);\n+\n+    private int maxCatalogNameLength = 128;\n+    private int maxSchemaNameLength = 128;\n+    private int maxFunctionNameLength = 256;\n+    private int maxParameterTypesLength = 500;\n+    private int maxReturnTypeLength = 256;\n+\n+    @NotNull\n+    public String getFunctionNamespacesTableName()\n+    {\n+        return functionNamespacesTableName;\n+    }\n+\n+    @Config(\"function-namespace-table-name\")\n+    public DbFunctionNamespaceManagerConfig setFunctionNamespacesTableName(String functionNamespacesTableName)\n+    {\n+        this.functionNamespacesTableName = functionNamespacesTableName;\n+        return this;\n+    }\n+\n+    @NotNull\n+    public List<CatalogSchemaName> getDefaultFunctionNamespaces()\n+    {\n+        return defaultFunctionNamespaces;\n+    }\n+\n+    @Config(\"default-function-namespaces\")\n+    public DbFunctionNamespaceManagerConfig setDefaultFunctionNamespaces(String defaultFunctionNamespaces)\n+    {\n+        this.defaultFunctionNamespaces = NAMESPACE_SPLITTER.splitToList(defaultFunctionNamespaces).stream()\n+                .map(s -> CATALOG_SCHEMA_SPLITTER.splitToList(s))\n+                .map(parts -> {\n+                    checkArgument(parts.size() == 2, format(\"Expect catalog.schema, get %s\", Joiner.on(',').join(parts)));\n+                    return new CatalogSchemaName(parts.get(0), parts.get(1));\n+                })\n+                .collect(toImmutableList());\n+        return this;\n+    }\n+\n+    @NotNull\n+    public String getFunctionsTableName()\n+    {\n+        return functionsTableName;\n+    }\n+\n+    @Config(\"function-table-name\")\n+    public DbFunctionNamespaceManagerConfig setFunctionsTableName(String functionsTableName)\n+    {\n+        this.functionsTableName = functionsTableName;\n+        return this;\n+    }\n+\n+    @NotNull\n+    public Duration getQueryTimeout()\n+    {\n+        return queryTimeout;\n+    }\n+\n+    @Config(\"query-timeout\")\n+    public DbFunctionNamespaceManagerConfig setQueryTimeout(Duration queryTimeout)\n+    {\n+        this.queryTimeout = queryTimeout;\n+        return this;\n+    }\n+\n+    @Min(1)\n+    public int getMaxCatalogNameLength()\n+    {\n+        return maxCatalogNameLength;\n+    }\n+\n+    @Config(\"max-catalog-name-length\")\n+    public DbFunctionNamespaceManagerConfig setMaxCatalogNameLength(int maxCatalogNameLength)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTczNTczNQ=="}, "originalCommit": {"oid": "810b00af4b1ac1155ec14ece1b64a7b5a9c2b9c4"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MjQ1MTQwOnYy", "diffSide": "RIGHT", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/DbFunctionNamespaceManagerConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMjoxMjo1MlrOFhr2BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMjoxMjo1MlrOFhr2BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg2NTY2OA==", "bodyText": "If you decide to do this, make sure you handle release deployment correctly.", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r370865668", "createdAt": "2020-01-24T22:12:52Z", "author": {"login": "rongrong"}, "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/DbFunctionNamespaceManagerConfig.java", "diffHunk": "@@ -52,7 +52,7 @@ public String getFunctionNamespacesTableName()\n         return functionNamespacesTableName;\n     }\n \n-    @Config(\"function-namespace-table-name\")\n+    @Config(\"function-namespaces-table-name\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28cee1cc2d44b87a375736ebc0fa115ab19ddb88"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MjQ3MzI4OnYy", "diffSide": "RIGHT", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/FunctionNamespaceDao.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMjoyNDoyNVrOFhsD2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMjoyNDoyNVrOFhsD2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg2OTIxMQ==", "bodyText": "Missed this one?", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r370869211", "createdAt": "2020-01-24T22:24:25Z", "author": {"login": "rongrong"}, "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/FunctionNamespaceDao.java", "diffHunk": "@@ -160,6 +160,41 @@ boolean servesFunctionNamespace(\n             \"FOR UPDATE\")\n     Optional<SqlInvokedFunctionRecord> getLatestRecordForUpdate(@Bind(\"function_id\") SqlFunctionId functionId);\n \n+    @SqlQuery(\"SELECT\\n\" +\n+            \"    t.catalog_name,\\n\" +\n+            \"    t.schema_name,\\n\" +\n+            \"    t.function_name,\\n\" +\n+            \"    t.parameters,\\n\" +\n+            \"    t.return_type,\\n\" +\n+            \"    t.description,\\n\" +\n+            \"    t.language,\\n\" +\n+            \"    t.is_deterministic,\\n\" +\n+            \"    t.called_on_null_input,\\n\" +\n+            \"    t.body,\\n\" +\n+            \"    t.version,\\n\" +\n+            \"    t.deleted\\n\" +\n+            \"FROM <table_name> t\\n\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f10bcdf5c66b72291fa52b0c5f8812e8a91f787a"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MjQ4NDE2OnYy", "diffSide": "RIGHT", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/AbstractSqlInvokedFunctionNamespaceManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMjozMDo0MFrOFhsKww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMjozMDo0MFrOFhsKww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg3MDk3OQ==", "bodyText": "The serving function namespaces should come from the table rather than the config. The config provides initial values. Database has the source of truth. Also, the initial values is supposed to be a stop-gap for proper grant support.", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r370870979", "createdAt": "2020-01-24T22:30:40Z", "author": {"login": "rongrong"}, "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/AbstractSqlInvokedFunctionNamespaceManager.java", "diffHunk": "@@ -43,19 +46,24 @@\n import static com.google.common.base.Preconditions.checkArgument;\n import static com.google.common.collect.ImmutableList.toImmutableList;\n import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static com.google.common.collect.ImmutableSet.toImmutableSet;\n import static java.util.concurrent.TimeUnit.MILLISECONDS;\n \n public abstract class AbstractSqlInvokedFunctionNamespaceManager\n         implements FunctionNamespaceManager<SqlInvokedFunction>\n {\n     private final ConcurrentMap<FunctionNamespaceTransactionHandle, FunctionCollection> transactions = new ConcurrentHashMap<>();\n \n+    private final Set<CatalogSchemaPrefix> servingNamespaces;\n     private final LoadingCache<QualifiedFunctionName, Collection<SqlInvokedFunction>> functions;\n     private final LoadingCache<SqlFunctionHandle, FunctionMetadata> metadataByHandle;\n     private final LoadingCache<SqlFunctionHandle, ScalarFunctionImplementation> implementationByHandle;\n \n     public AbstractSqlInvokedFunctionNamespaceManager(SqlInvokedFunctionNamespaceManagerConfig config)\n     {\n+        this.servingNamespaces = config.getServingNamespaces().stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd8fd9a7ed37e3b8698a07ef797deab50f5e0816"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MjUwNTE2OnYy", "diffSide": "RIGHT", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/SqlInvokedFunctionNamespaceManagerConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMjo0MjozM1rOFhsXxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMjo0MjozM1rOFhsXxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg3NDMwOQ==", "bodyText": "Instead of duplicating the config in two places, maybe change the listFunctions api to listFunctions(prefix) and collect that from FunctionManager directly.", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r370874309", "createdAt": "2020-01-24T22:42:33Z", "author": {"login": "rongrong"}, "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/SqlInvokedFunctionNamespaceManagerConfig.java", "diffHunk": "@@ -14,17 +14,39 @@\n package com.facebook.presto.functionNamespace;\n \n import com.facebook.airlift.configuration.Config;\n+import com.google.common.base.Splitter;\n+import com.google.common.collect.ImmutableList;\n import io.airlift.units.Duration;\n import io.airlift.units.MinDuration;\n \n+import javax.validation.constraints.NotNull;\n+\n+import java.util.List;\n+\n import static java.util.concurrent.TimeUnit.HOURS;\n import static java.util.concurrent.TimeUnit.MINUTES;\n \n public class SqlInvokedFunctionNamespaceManagerConfig\n {\n+    private List<String> servingNamespaces;\n     private Duration functionCacheExpiration = new Duration(5, MINUTES);\n     private Duration functionInstanceCacheExpiration = new Duration(8, HOURS);\n \n+    @NotNull\n+    public List<String> getServingNamespaces()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd8fd9a7ed37e3b8698a07ef797deab50f5e0816"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzk2OTM5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/metadata/FunctionManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwMDozNzozN1rOFj-avw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwMDozNzozN1rOFj-avw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI2NzEzNQ==", "bodyText": "Hmm, do we need to through error if the function namespace manager has some old functions from a namespace that's no longer used? Personally I prefer the function namespace manager to support a listFunction(prefix) API. This way we simply ignore anything that's in the function namespace manager but not configured to be managed by this instance. (Think, the same backend database hosting function namespaces a.b, x.y, but for one cluster you are only configuring it to manage a.b, while on another cluster it's configured to manage x.y). I don't see why this needs to be an internal error. It seems to be reasonable. Essentially, the config is constructing a view of the underlying database to be exposed to a certain cluster configuration.", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r373267135", "createdAt": "2020-01-31T00:37:37Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/metadata/FunctionManager.java", "diffHunk": "@@ -198,15 +205,32 @@ public void registerBuiltInFunctions(List<? extends BuiltInFunction> functions)\n \n     public List<SqlFunction> listFunctions(Session session)\n     {\n-        Collection<FunctionNamespaceManager<?>> managers = isListBuiltInFunctionsOnly(session) ?\n-                ImmutableSet.of(builtInFunctionNamespaceManager) :\n-                functionNamespaceManagers.values();\n+        Set<String> managerIds = isListBuiltInFunctionsOnly(session) ?\n+                ImmutableSet.of(BuiltInFunctionNamespaceManager.ID) :\n+                functionNamespaceManagers.keySet();\n \n-        return managers.stream()\n-                .flatMap(manager -> manager.listFunctions().stream())\n-                .filter(function -> function.getVisibility() == PUBLIC ||\n-                        (function.getVisibility() == EXPERIMENTAL && SystemSessionProperties.isExperimentalFunctionsEnabled(session)))\n-                .collect(toImmutableList());\n+        ImmutableList.Builder<SqlFunction> functions = ImmutableList.builder();\n+        for (String managerId : managerIds) {\n+            FunctionNamespaceManager<? extends SqlFunction> manager = functionNamespaceManagers.get(managerId);\n+            Set<CatalogSchemaPrefix> servingNamespaces = this.servingNamespaces.get().get(managerId);\n+\n+            for (SqlFunction function : manager.listFunctions()) {\n+                CatalogSchemaName functionNamespace = function.getSignature().getName().getFunctionNamespace();\n+\n+                if (!servingNamespaces.contains(functionNamespace.asCatalogSchemaPrefix())\n+                        && !servingNamespaces.contains(new CatalogSchemaPrefix(functionNamespace.getCatalogName(), Optional.empty()))) {\n+                    throw new PrestoException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77bc9049a033800075ab1994a88d48ab3bb481d0"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzk3NDU5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/com/facebook/presto/metadata/StaticFunctionNamespaceStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwMDo0MTowNFrOFj-eGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwMDo0MTowNFrOFj-eGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI2Nzk5NQ==", "bodyText": "Is this still necessary? Where is this used other than here?", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r373267995", "createdAt": "2020-01-31T00:41:04Z", "author": {"login": "rongrong"}, "path": "presto-main/src/main/java/com/facebook/presto/metadata/StaticFunctionNamespaceStore.java", "diffHunk": "@@ -70,7 +70,7 @@ private void loadFunctionNamespaceManager(File file)\n         String functionNamespaceManagerName = properties.remove(\"function-namespace-manager.name\");\n         checkState(functionNamespaceManagerName != null, \"Function namespace configuration %s does not contain function-namespace-manager.name\", file.getAbsoluteFile());\n \n-        String functionNamespaces = properties.remove(\"serving-namespaces\");\n+        String functionNamespaces = properties.get(\"serving-namespaces\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fe485fb56dbf00782c4fb3c23448cf61f42ac59"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMzA5MzY4OnYy", "diffSide": "LEFT", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/DbFunctionNamespaceManagerConfig.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMjo0MDoyMVrOFmNuVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxODo1NDozM1rOFmmZ4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYxNTA2Mg==", "bodyText": "So we will not provide a convenient initialization from config files anymore? People have to manually insert values to the db?", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r375615062", "createdAt": "2020-02-06T02:40:21Z", "author": {"login": "rongrong"}, "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/DbFunctionNamespaceManagerConfig.java", "diffHunk": "@@ -52,25 +39,6 @@ public DbFunctionNamespaceManagerConfig setFunctionNamespacesTableName(String fu\n         return this;\n     }\n \n-    @NotNull\n-    public List<CatalogSchemaName> getDefaultFunctionNamespaces()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e15bb39f9c3071b7d938b03b98b6648eea9a79fd"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY1NjEyNA==", "bodyText": "I don't think this configuration property is that necessary since admin can just insert values into their DBs. It is also not an exactly a good design since it would be better to create function namespaces (whether the initial ones or not) at system level so it goes through proper code paths and checks, instead of in each \"connector's\" configuration. What just described will be supported by the CREATE SCHEMA statement.", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r375656124", "createdAt": "2020-02-06T06:13:22Z", "author": {"login": "caithagoras"}, "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/DbFunctionNamespaceManagerConfig.java", "diffHunk": "@@ -52,25 +39,6 @@ public DbFunctionNamespaceManagerConfig setFunctionNamespacesTableName(String fu\n         return this;\n     }\n \n-    @NotNull\n-    public List<CatalogSchemaName> getDefaultFunctionNamespaces()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYxNTA2Mg=="}, "originalCommit": {"oid": "e15bb39f9c3071b7d938b03b98b6648eea9a79fd"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAxOTQyNQ==", "bodyText": "Make sure how to add function namespaces is documented then.", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376019425", "createdAt": "2020-02-06T18:54:33Z", "author": {"login": "rongrong"}, "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/DbFunctionNamespaceManagerConfig.java", "diffHunk": "@@ -52,25 +39,6 @@ public DbFunctionNamespaceManagerConfig setFunctionNamespacesTableName(String fu\n         return this;\n     }\n \n-    @NotNull\n-    public List<CatalogSchemaName> getDefaultFunctionNamespaces()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYxNTA2Mg=="}, "originalCommit": {"oid": "e15bb39f9c3071b7d938b03b98b6648eea9a79fd"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMzA5NjgxOnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMjo0MjoyOFrOFmNwLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMjo0MjoyOFrOFmNwLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYxNTUzMw==", "bodyText": "Presto provides a MySQL-based ...  I don't think it's enabled \"by default\". You need to configure it to use it.", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r375615533", "createdAt": "2020-02-06T02:42:28Z", "author": {"login": "rongrong"}, "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "diffHunk": "@@ -0,0 +1,34 @@\n+===========================\n+Function Namespace Managers\n+===========================\n+\n+.. warning::\n+\n+    This is an experimental feature being actively developed. The way\n+    Function Namespace Managers are configured might be changed.\n+\n+Function namespace managers support storing and retrieving user-defined\n+functions with a persistent storage, allowing users to create, alter,\n+and delete functions, as well as to reference them within queries.\n+\n+Presto by default supports a MySQL-based function namespace manager.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bf748e23ee8f3763e68a917f004cc7927157c44"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMzA5ODE3OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMjo0MzoyMFrOFmNw-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMjo0MzoyMFrOFmNw-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYxNTczNg==", "bodyText": "Let's use maybe \"test\" or \"example\" rather than the word \"prod\". Maybe double check what other examples are using.", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r375615736", "createdAt": "2020-02-06T02:43:20Z", "author": {"login": "rongrong"}, "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "diffHunk": "@@ -0,0 +1,34 @@\n+===========================\n+Function Namespace Managers\n+===========================\n+\n+.. warning::\n+\n+    This is an experimental feature being actively developed. The way\n+    Function Namespace Managers are configured might be changed.\n+\n+Function namespace managers support storing and retrieving user-defined\n+functions with a persistent storage, allowing users to create, alter,\n+and delete functions, as well as to reference them within queries.\n+\n+Presto by default supports a MySQL-based function namespace manager.\n+It is pluggable and can be configured by an administrator.\n+\n+To instantiate a MySQL-based function namespace manager with id\n+``prod``, add a file ``etc/function-namespace/prod.properties``", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bf748e23ee8f3763e68a917f004cc7927157c44"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMzA5ODU4OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMjo0MzozOVrOFmNxPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMjo0MzozOVrOFmNxPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYxNTgwNg==", "bodyText": "xdb?", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r375615806", "createdAt": "2020-02-06T02:43:39Z", "author": {"login": "rongrong"}, "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "diffHunk": "@@ -0,0 +1,34 @@\n+===========================\n+Function Namespace Managers\n+===========================\n+\n+.. warning::\n+\n+    This is an experimental feature being actively developed. The way\n+    Function Namespace Managers are configured might be changed.\n+\n+Function namespace managers support storing and retrieving user-defined\n+functions with a persistent storage, allowing users to create, alter,\n+and delete functions, as well as to reference them within queries.\n+\n+Presto by default supports a MySQL-based function namespace manager.\n+It is pluggable and can be configured by an administrator.\n+\n+To instantiate a MySQL-based function namespace manager with id\n+``prod``, add a file ``etc/function-namespace/prod.properties``\n+with the following contents::\n+\n+    function-namespace-manager.name=xdb", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bf748e23ee8f3763e68a917f004cc7927157c44"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMzEwMjAxOnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMjo0NjozMVrOFmNzcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwNzozMTo1OVrOFmRbdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYxNjM3MQ==", "bodyText": "I thought this is only configuring catalog, how does it work with catalog1.schema1?", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r375616371", "createdAt": "2020-02-06T02:46:31Z", "author": {"login": "rongrong"}, "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "diffHunk": "@@ -0,0 +1,34 @@\n+===========================\n+Function Namespace Managers\n+===========================\n+\n+.. warning::\n+\n+    This is an experimental feature being actively developed. The way\n+    Function Namespace Managers are configured might be changed.\n+\n+Function namespace managers support storing and retrieving user-defined\n+functions with a persistent storage, allowing users to create, alter,\n+and delete functions, as well as to reference them within queries.\n+\n+Presto by default supports a MySQL-based function namespace manager.\n+It is pluggable and can be configured by an administrator.\n+\n+To instantiate a MySQL-based function namespace manager with id\n+``prod``, add a file ``etc/function-namespace/prod.properties``\n+with the following contents::\n+\n+    function-namespace-manager.name=xdb\n+    serving-catalogs=catalog1.schema1,catalog2", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bf748e23ee8f3763e68a917f004cc7927157c44"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYxNjc0Ng==", "bodyText": "If you are planning to go with each function namespace manager will manage full catalog, just use the same model as connectors where the name of the file is the catalog name, and each config will manage a single catalog. Otherwise the naming is really confusing. Does the name of the config file mean anything?", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r375616746", "createdAt": "2020-02-06T02:48:30Z", "author": {"login": "rongrong"}, "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "diffHunk": "@@ -0,0 +1,34 @@\n+===========================\n+Function Namespace Managers\n+===========================\n+\n+.. warning::\n+\n+    This is an experimental feature being actively developed. The way\n+    Function Namespace Managers are configured might be changed.\n+\n+Function namespace managers support storing and retrieving user-defined\n+functions with a persistent storage, allowing users to create, alter,\n+and delete functions, as well as to reference them within queries.\n+\n+Presto by default supports a MySQL-based function namespace manager.\n+It is pluggable and can be configured by an administrator.\n+\n+To instantiate a MySQL-based function namespace manager with id\n+``prod``, add a file ``etc/function-namespace/prod.properties``\n+with the following contents::\n+\n+    function-namespace-manager.name=xdb\n+    serving-catalogs=catalog1.schema1,catalog2", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYxNjM3MQ=="}, "originalCommit": {"oid": "8bf748e23ee8f3763e68a917f004cc7927157c44"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY3NTc2NQ==", "bodyText": "Moving to 1 catalog per FNM model, with the file name being the catalog name.", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r375675765", "createdAt": "2020-02-06T07:31:59Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "diffHunk": "@@ -0,0 +1,34 @@\n+===========================\n+Function Namespace Managers\n+===========================\n+\n+.. warning::\n+\n+    This is an experimental feature being actively developed. The way\n+    Function Namespace Managers are configured might be changed.\n+\n+Function namespace managers support storing and retrieving user-defined\n+functions with a persistent storage, allowing users to create, alter,\n+and delete functions, as well as to reference them within queries.\n+\n+Presto by default supports a MySQL-based function namespace manager.\n+It is pluggable and can be configured by an administrator.\n+\n+To instantiate a MySQL-based function namespace manager with id\n+``prod``, add a file ``etc/function-namespace/prod.properties``\n+with the following contents::\n+\n+    function-namespace-manager.name=xdb\n+    serving-catalogs=catalog1.schema1,catalog2", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYxNjM3MQ=="}, "originalCommit": {"oid": "8bf748e23ee8f3763e68a917f004cc7927157c44"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMzEwNDgwOnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMjo0ODo1MlrOFmN1KA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMjo0ODo1MlrOFmN1KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYxNjgwOA==", "bodyText": "I think you want to use db or mysql", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r375616808", "createdAt": "2020-02-06T02:48:52Z", "author": {"login": "rongrong"}, "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "diffHunk": "@@ -0,0 +1,34 @@\n+===========================\n+Function Namespace Managers\n+===========================\n+\n+.. warning::\n+\n+    This is an experimental feature being actively developed. The way\n+    Function Namespace Managers are configured might be changed.\n+\n+Function namespace managers support storing and retrieving user-defined\n+functions with a persistent storage, allowing users to create, alter,\n+and delete functions, as well as to reference them within queries.\n+\n+Presto by default supports a MySQL-based function namespace manager.\n+It is pluggable and can be configured by an administrator.\n+\n+To instantiate a MySQL-based function namespace manager with id\n+``prod``, add a file ``etc/function-namespace/prod.properties``\n+with the following contents::\n+\n+    function-namespace-manager.name=xdb\n+    serving-catalogs=catalog1.schema1,catalog2\n+\n+\n+Configuration Reference\n+-----------------------\n+=========================================== ================================================================================================\n+Name                                        Description\n+=========================================== ================================================================================================\n+``function-namespace-manager.name``         The type of the function namespace manager to instantiate. Currently, only ``xdb`` is supported.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bf748e23ee8f3763e68a917f004cc7927157c44"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNTg0MDg1OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxOTo0OToxMVrOFmoDbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxOTo0OToxMVrOFmoDbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA0NjQ0Ng==", "bodyText": "two MySQL tables will be created?", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376046446", "createdAt": "2020-02-06T19:49:11Z", "author": {"login": "rongrong"}, "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "diffHunk": "@@ -0,0 +1,50 @@\n+===========================\n+Function Namespace Managers\n+===========================\n+\n+.. warning::\n+\n+    This is an experimental feature being actively developed. The way\n+    Function Namespace Managers are configured might be changed.\n+\n+Function namespace managers support storing and retrieving user-defined\n+functions with a persistent storage, allowing users to create, alter,\n+and delete functions, as well as to reference them within queries.\n+\n+Presto provides a MySQL-based function namespace manager. It is\n+pluggable and can be configured by an administrator.\n+\n+To instantiate a MySQL-based function namespace manager that manages\n+catalog ``example``, administrator needs to first have a running MySQL\n+server. Suppose the MySQL server can be reached at ``localhost:1080``,\n+add a file ``etc/function-namespace/example.properties`` with the\n+following contents::\n+\n+    function-namespace-manager.name=mysql\n+    database_url=localhost:1080\n+\n+When Presto first starts with the above MySQL function namespace\n+manager configuration, two MySQL tables are created.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa0943879d0be3801b6dca8a8df28ca4e450cc90"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNTg0NDQ5OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxOTo1MDozNFrOFmoF4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxOTo1MDozNFrOFmoF4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA0NzA3NQ==", "bodyText": "I think it's clearer to add the function namespace and functions table here in the config. That way later you can describe what tables are created better.", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376047075", "createdAt": "2020-02-06T19:50:34Z", "author": {"login": "rongrong"}, "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "diffHunk": "@@ -0,0 +1,50 @@\n+===========================\n+Function Namespace Managers\n+===========================\n+\n+.. warning::\n+\n+    This is an experimental feature being actively developed. The way\n+    Function Namespace Managers are configured might be changed.\n+\n+Function namespace managers support storing and retrieving user-defined\n+functions with a persistent storage, allowing users to create, alter,\n+and delete functions, as well as to reference them within queries.\n+\n+Presto provides a MySQL-based function namespace manager. It is\n+pluggable and can be configured by an administrator.\n+\n+To instantiate a MySQL-based function namespace manager that manages\n+catalog ``example``, administrator needs to first have a running MySQL\n+server. Suppose the MySQL server can be reached at ``localhost:1080``,\n+add a file ``etc/function-namespace/example.properties`` with the\n+following contents::\n+\n+    function-namespace-manager.name=mysql", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa0943879d0be3801b6dca8a8df28ca4e450cc90"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNTg0Njc1OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxOTo1MToyNVrOFmoHWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxOTo1MToyNVrOFmoHWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA0NzQ1MQ==", "bodyText": "Use the configured table name from the example config instead.\nThe concept of \"function namespace\" was never officially introduced and defined. Please give a better explanation. What does \"all function namespaces\" mean? Maybe \"allowed function namespaces\"?", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376047451", "createdAt": "2020-02-06T19:51:25Z", "author": {"login": "rongrong"}, "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "diffHunk": "@@ -0,0 +1,50 @@\n+===========================\n+Function Namespace Managers\n+===========================\n+\n+.. warning::\n+\n+    This is an experimental feature being actively developed. The way\n+    Function Namespace Managers are configured might be changed.\n+\n+Function namespace managers support storing and retrieving user-defined\n+functions with a persistent storage, allowing users to create, alter,\n+and delete functions, as well as to reference them within queries.\n+\n+Presto provides a MySQL-based function namespace manager. It is\n+pluggable and can be configured by an administrator.\n+\n+To instantiate a MySQL-based function namespace manager that manages\n+catalog ``example``, administrator needs to first have a running MySQL\n+server. Suppose the MySQL server can be reached at ``localhost:1080``,\n+add a file ``etc/function-namespace/example.properties`` with the\n+following contents::\n+\n+    function-namespace-manager.name=mysql\n+    database_url=localhost:1080\n+\n+When Presto first starts with the above MySQL function namespace\n+manager configuration, two MySQL tables are created.\n+\n+- ``function_namespaces``: Stores all function namespaces.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa0943879d0be3801b6dca8a8df28ca4e450cc90"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNTg1Nzk5OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/sql/alter-function.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxOTo1NToyNFrOFmoOrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxOTo1NToyNFrOFmoOrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA0OTMyNw==", "bodyText": "@kaikalur Can you take a look at the documentation for create / alter / drop function? Thanks!", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376049327", "createdAt": "2020-02-06T19:55:24Z", "author": {"login": "rongrong"}, "path": "presto-docs/src/main/sphinx/sql/alter-function.rst", "diffHunk": "@@ -0,0 +1,47 @@\n+==============", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6241b0e9c280e7e95ac4ba5c4015017b0018a82a"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNTg2NTYwOnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/sql/alter-function.rst", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxOTo1ODowMFrOFmoTkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMzo0MDoxNlrOFmt_Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA1MDU3OQ==", "bodyText": "So we support overloading?!", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376050579", "createdAt": "2020-02-06T19:58:00Z", "author": {"login": "kaikalur"}, "path": "presto-docs/src/main/sphinx/sql/alter-function.rst", "diffHunk": "@@ -0,0 +1,47 @@\n+==============\n+ALTER FUNCTION\n+==============\n+\n+Synopsis\n+--------\n+\n+.. code-block:: none\n+\n+    ALTER FUNCTION qualified_function_name [ ( parameter_type[, ...] ) ]\n+    RETURNS NULL ON NULL INPUT | CALLED ON NULL INPUT\n+\n+\n+Description\n+-----------\n+\n+Alter the definition of an existing function.\n+\n+Each ``ALTER FUNCTION`` statement can only modify one function\n+at a time. If multiple functions are matched by not specifying\n+the parameter type list, the query would fail.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6241b0e9c280e7e95ac4ba5c4015017b0018a82a"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE0MzYzMQ==", "bodyText": "We don't. Here is my re-words.\nParameter type list must be specified if there are multiple\nsignatures for the specified function name. Otherwise, the query\nwould fail.\n\nIf exactly one signature exists for the specified function name,\nparameter type list might be omitted.", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376143631", "createdAt": "2020-02-06T23:40:16Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/sql/alter-function.rst", "diffHunk": "@@ -0,0 +1,47 @@\n+==============\n+ALTER FUNCTION\n+==============\n+\n+Synopsis\n+--------\n+\n+.. code-block:: none\n+\n+    ALTER FUNCTION qualified_function_name [ ( parameter_type[, ...] ) ]\n+    RETURNS NULL ON NULL INPUT | CALLED ON NULL INPUT\n+\n+\n+Description\n+-----------\n+\n+Alter the definition of an existing function.\n+\n+Each ``ALTER FUNCTION`` statement can only modify one function\n+at a time. If multiple functions are matched by not specifying\n+the parameter type list, the query would fail.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA1MDU3OQ=="}, "originalCommit": {"oid": "6241b0e9c280e7e95ac4ba5c4015017b0018a82a"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNTg3ODMyOnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/sql/create-function.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMDowMjowOVrOFmobbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMDowMjowOVrOFmobbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA1MjU5MQ==", "bodyText": "I will simply say something like - 'if a function with identical signature exists, this will quietly replace that'. It's not just the error message.", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376052591", "createdAt": "2020-02-06T20:02:09Z", "author": {"login": "kaikalur"}, "path": "presto-docs/src/main/sphinx/sql/create-function.rst", "diffHunk": "@@ -0,0 +1,83 @@\n+===============\n+CREATE FUNCTION\n+===============\n+\n+Synopsis\n+--------\n+\n+.. code-block:: none\n+\n+    CREATE [ OR REPLACE ] FUNCTION\n+    qualified_function_name (\n+      parameter_name parameter_type\n+      [, ...]\n+    )\n+    RETURNS return_type\n+    [ COMMENT function_description ]\n+    [ LANGUAGE language ]\n+    [ DETERMINISTIC | NOT DETERMINISTIC ]\n+    [ RETURNS NULL ON NULL INPUT | CALLED ON NULL INPUT ]\n+    [ RETURN expression ]\n+\n+\n+Description\n+-----------\n+\n+Create a new function with the specified definition.\n+\n+Each function is uniquely identified by its qualified function name\n+and its parameter type list. ``qualified_function_name`` needs to be in\n+the format of ``catalog.schema.function_name``.\n+\n+To create a function, the function namespace as identified by\n+``catalog.schema`` needs to managed by a\n+:doc:`/admin/function-namespace-managers`.\n+\n+The optional ``OR REPLACE`` clause causes the ``ALREADY_EXISTS`` error\n+to be suppressed if the function already exists.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6241b0e9c280e7e95ac4ba5c4015017b0018a82a"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNTg4MDM5OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/sql/create-function.rst", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMDowMjo0OFrOFmocwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMTowNTozOFrOFmqMLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA1MjkyOQ==", "bodyText": "Match or assignment-compatible? For example, I can return 0 for a double returning function?", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376052929", "createdAt": "2020-02-06T20:02:48Z", "author": {"login": "kaikalur"}, "path": "presto-docs/src/main/sphinx/sql/create-function.rst", "diffHunk": "@@ -0,0 +1,83 @@\n+===============\n+CREATE FUNCTION\n+===============\n+\n+Synopsis\n+--------\n+\n+.. code-block:: none\n+\n+    CREATE [ OR REPLACE ] FUNCTION\n+    qualified_function_name (\n+      parameter_name parameter_type\n+      [, ...]\n+    )\n+    RETURNS return_type\n+    [ COMMENT function_description ]\n+    [ LANGUAGE language ]\n+    [ DETERMINISTIC | NOT DETERMINISTIC ]\n+    [ RETURNS NULL ON NULL INPUT | CALLED ON NULL INPUT ]\n+    [ RETURN expression ]\n+\n+\n+Description\n+-----------\n+\n+Create a new function with the specified definition.\n+\n+Each function is uniquely identified by its qualified function name\n+and its parameter type list. ``qualified_function_name`` needs to be in\n+the format of ``catalog.schema.function_name``.\n+\n+To create a function, the function namespace as identified by\n+``catalog.schema`` needs to managed by a\n+:doc:`/admin/function-namespace-managers`.\n+\n+The optional ``OR REPLACE`` clause causes the ``ALREADY_EXISTS`` error\n+to be suppressed if the function already exists.\n+\n+The ``return_type`` needs to match the actual type of the routine body\n+``expression``, without performing type coercion.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6241b0e9c280e7e95ac4ba5c4015017b0018a82a"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA4MTQ1Mg==", "bodyText": "This is not supported currently, but we're looking to support it in the future.", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376081452", "createdAt": "2020-02-06T21:05:38Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/sql/create-function.rst", "diffHunk": "@@ -0,0 +1,83 @@\n+===============\n+CREATE FUNCTION\n+===============\n+\n+Synopsis\n+--------\n+\n+.. code-block:: none\n+\n+    CREATE [ OR REPLACE ] FUNCTION\n+    qualified_function_name (\n+      parameter_name parameter_type\n+      [, ...]\n+    )\n+    RETURNS return_type\n+    [ COMMENT function_description ]\n+    [ LANGUAGE language ]\n+    [ DETERMINISTIC | NOT DETERMINISTIC ]\n+    [ RETURNS NULL ON NULL INPUT | CALLED ON NULL INPUT ]\n+    [ RETURN expression ]\n+\n+\n+Description\n+-----------\n+\n+Create a new function with the specified definition.\n+\n+Each function is uniquely identified by its qualified function name\n+and its parameter type list. ``qualified_function_name`` needs to be in\n+the format of ``catalog.schema.function_name``.\n+\n+To create a function, the function namespace as identified by\n+``catalog.schema`` needs to managed by a\n+:doc:`/admin/function-namespace-managers`.\n+\n+The optional ``OR REPLACE`` clause causes the ``ALREADY_EXISTS`` error\n+to be suppressed if the function already exists.\n+\n+The ``return_type`` needs to match the actual type of the routine body\n+``expression``, without performing type coercion.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA1MjkyOQ=="}, "originalCommit": {"oid": "6241b0e9c280e7e95ac4ba5c4015017b0018a82a"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNTg4ODkwOnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/sql/create-function.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMDowNToyOFrOFmoh5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMDowNToyOFrOFmoh5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA1NDI0Ng==", "bodyText": "modify -> specify", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376054246", "createdAt": "2020-02-06T20:05:28Z", "author": {"login": "kaikalur"}, "path": "presto-docs/src/main/sphinx/sql/create-function.rst", "diffHunk": "@@ -0,0 +1,83 @@\n+===============\n+CREATE FUNCTION\n+===============\n+\n+Synopsis\n+--------\n+\n+.. code-block:: none\n+\n+    CREATE [ OR REPLACE ] FUNCTION\n+    qualified_function_name (\n+      parameter_name parameter_type\n+      [, ...]\n+    )\n+    RETURNS return_type\n+    [ COMMENT function_description ]\n+    [ LANGUAGE language ]\n+    [ DETERMINISTIC | NOT DETERMINISTIC ]\n+    [ RETURNS NULL ON NULL INPUT | CALLED ON NULL INPUT ]\n+    [ RETURN expression ]\n+\n+\n+Description\n+-----------\n+\n+Create a new function with the specified definition.\n+\n+Each function is uniquely identified by its qualified function name\n+and its parameter type list. ``qualified_function_name`` needs to be in\n+the format of ``catalog.schema.function_name``.\n+\n+To create a function, the function namespace as identified by\n+``catalog.schema`` needs to managed by a\n+:doc:`/admin/function-namespace-managers`.\n+\n+The optional ``OR REPLACE`` clause causes the ``ALREADY_EXISTS`` error\n+to be suppressed if the function already exists.\n+\n+The ``return_type`` needs to match the actual type of the routine body\n+``expression``, without performing type coercion.\n+\n+A set of routine characteristics can be specified to decorate the\n+function and modify its behavior. Each kind of routine", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6241b0e9c280e7e95ac4ba5c4015017b0018a82a"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNTg5MzMxOnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/sql/create-function.rst", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMDowNzowMlrOFmokog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMzozNToxOVrOFmt5Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA1NDk0Ng==", "bodyText": "Be more explicit - specifies that the function is not deterministic. Also, if there is a default, mention it.", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376054946", "createdAt": "2020-02-06T20:07:02Z", "author": {"login": "kaikalur"}, "path": "presto-docs/src/main/sphinx/sql/create-function.rst", "diffHunk": "@@ -0,0 +1,83 @@\n+===============\n+CREATE FUNCTION\n+===============\n+\n+Synopsis\n+--------\n+\n+.. code-block:: none\n+\n+    CREATE [ OR REPLACE ] FUNCTION\n+    qualified_function_name (\n+      parameter_name parameter_type\n+      [, ...]\n+    )\n+    RETURNS return_type\n+    [ COMMENT function_description ]\n+    [ LANGUAGE language ]\n+    [ DETERMINISTIC | NOT DETERMINISTIC ]\n+    [ RETURNS NULL ON NULL INPUT | CALLED ON NULL INPUT ]\n+    [ RETURN expression ]\n+\n+\n+Description\n+-----------\n+\n+Create a new function with the specified definition.\n+\n+Each function is uniquely identified by its qualified function name\n+and its parameter type list. ``qualified_function_name`` needs to be in\n+the format of ``catalog.schema.function_name``.\n+\n+To create a function, the function namespace as identified by\n+``catalog.schema`` needs to managed by a\n+:doc:`/admin/function-namespace-managers`.\n+\n+The optional ``OR REPLACE`` clause causes the ``ALREADY_EXISTS`` error\n+to be suppressed if the function already exists.\n+\n+The ``return_type`` needs to match the actual type of the routine body\n+``expression``, without performing type coercion.\n+\n+A set of routine characteristics can be specified to decorate the\n+function and modify its behavior. Each kind of routine\n+characteristic can be specified at most once.\n+\n+============================ ======================== ================================================================\n+Routine Characteristic       Default Value            Description\n+============================ ======================== ================================================================\n+Language clause              SQL                      The language in which the function is defined.\n+Deterministic characteristic NOT DETERMINISTIC        Whether the function is deterministic. ``NOT DETERMINISTIC``\n+                                                      means that the function is possibly non-deterministic.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6241b0e9c280e7e95ac4ba5c4015017b0018a82a"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE0MjE1MQ==", "bodyText": "Also, according to SQL Spec, DETERMINISTIC means the function is guaranteed deterministic, while NOT DETERMINISTIC means the functions is \"possibly non-deterministic\", that is, non-deterministic for certain inputs/usages. possibly non-deterministic sounds a more rigorous expression.\nThe second column shows the default value.", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376142151", "createdAt": "2020-02-06T23:35:19Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/sql/create-function.rst", "diffHunk": "@@ -0,0 +1,83 @@\n+===============\n+CREATE FUNCTION\n+===============\n+\n+Synopsis\n+--------\n+\n+.. code-block:: none\n+\n+    CREATE [ OR REPLACE ] FUNCTION\n+    qualified_function_name (\n+      parameter_name parameter_type\n+      [, ...]\n+    )\n+    RETURNS return_type\n+    [ COMMENT function_description ]\n+    [ LANGUAGE language ]\n+    [ DETERMINISTIC | NOT DETERMINISTIC ]\n+    [ RETURNS NULL ON NULL INPUT | CALLED ON NULL INPUT ]\n+    [ RETURN expression ]\n+\n+\n+Description\n+-----------\n+\n+Create a new function with the specified definition.\n+\n+Each function is uniquely identified by its qualified function name\n+and its parameter type list. ``qualified_function_name`` needs to be in\n+the format of ``catalog.schema.function_name``.\n+\n+To create a function, the function namespace as identified by\n+``catalog.schema`` needs to managed by a\n+:doc:`/admin/function-namespace-managers`.\n+\n+The optional ``OR REPLACE`` clause causes the ``ALREADY_EXISTS`` error\n+to be suppressed if the function already exists.\n+\n+The ``return_type`` needs to match the actual type of the routine body\n+``expression``, without performing type coercion.\n+\n+A set of routine characteristics can be specified to decorate the\n+function and modify its behavior. Each kind of routine\n+characteristic can be specified at most once.\n+\n+============================ ======================== ================================================================\n+Routine Characteristic       Default Value            Description\n+============================ ======================== ================================================================\n+Language clause              SQL                      The language in which the function is defined.\n+Deterministic characteristic NOT DETERMINISTIC        Whether the function is deterministic. ``NOT DETERMINISTIC``\n+                                                      means that the function is possibly non-deterministic.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA1NDk0Ng=="}, "originalCommit": {"oid": "6241b0e9c280e7e95ac4ba5c4015017b0018a82a"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNTg5NDQxOnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/sql/create-function.rst", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMDowNzoyMlrOFmolTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMzozMzozNFrOFmt2ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA1NTExOQ==", "bodyText": "Similarly here - please specify default", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376055119", "createdAt": "2020-02-06T20:07:22Z", "author": {"login": "kaikalur"}, "path": "presto-docs/src/main/sphinx/sql/create-function.rst", "diffHunk": "@@ -0,0 +1,83 @@\n+===============\n+CREATE FUNCTION\n+===============\n+\n+Synopsis\n+--------\n+\n+.. code-block:: none\n+\n+    CREATE [ OR REPLACE ] FUNCTION\n+    qualified_function_name (\n+      parameter_name parameter_type\n+      [, ...]\n+    )\n+    RETURNS return_type\n+    [ COMMENT function_description ]\n+    [ LANGUAGE language ]\n+    [ DETERMINISTIC | NOT DETERMINISTIC ]\n+    [ RETURNS NULL ON NULL INPUT | CALLED ON NULL INPUT ]\n+    [ RETURN expression ]\n+\n+\n+Description\n+-----------\n+\n+Create a new function with the specified definition.\n+\n+Each function is uniquely identified by its qualified function name\n+and its parameter type list. ``qualified_function_name`` needs to be in\n+the format of ``catalog.schema.function_name``.\n+\n+To create a function, the function namespace as identified by\n+``catalog.schema`` needs to managed by a\n+:doc:`/admin/function-namespace-managers`.\n+\n+The optional ``OR REPLACE`` clause causes the ``ALREADY_EXISTS`` error\n+to be suppressed if the function already exists.\n+\n+The ``return_type`` needs to match the actual type of the routine body\n+``expression``, without performing type coercion.\n+\n+A set of routine characteristics can be specified to decorate the\n+function and modify its behavior. Each kind of routine\n+characteristic can be specified at most once.\n+\n+============================ ======================== ================================================================\n+Routine Characteristic       Default Value            Description\n+============================ ======================== ================================================================\n+Language clause              SQL                      The language in which the function is defined.\n+Deterministic characteristic NOT DETERMINISTIC        Whether the function is deterministic. ``NOT DETERMINISTIC``\n+                                                      means that the function is possibly non-deterministic.\n+Null-call clause             CALLED ON NULL INPUT     The behavior of the function in which ``null`` is supplied as\n+                                                      the value of at least one argument.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6241b0e9c280e7e95ac4ba5c4015017b0018a82a"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE0MTQ3MA==", "bodyText": "The second column shows the default value.", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376141470", "createdAt": "2020-02-06T23:33:34Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/sql/create-function.rst", "diffHunk": "@@ -0,0 +1,83 @@\n+===============\n+CREATE FUNCTION\n+===============\n+\n+Synopsis\n+--------\n+\n+.. code-block:: none\n+\n+    CREATE [ OR REPLACE ] FUNCTION\n+    qualified_function_name (\n+      parameter_name parameter_type\n+      [, ...]\n+    )\n+    RETURNS return_type\n+    [ COMMENT function_description ]\n+    [ LANGUAGE language ]\n+    [ DETERMINISTIC | NOT DETERMINISTIC ]\n+    [ RETURNS NULL ON NULL INPUT | CALLED ON NULL INPUT ]\n+    [ RETURN expression ]\n+\n+\n+Description\n+-----------\n+\n+Create a new function with the specified definition.\n+\n+Each function is uniquely identified by its qualified function name\n+and its parameter type list. ``qualified_function_name`` needs to be in\n+the format of ``catalog.schema.function_name``.\n+\n+To create a function, the function namespace as identified by\n+``catalog.schema`` needs to managed by a\n+:doc:`/admin/function-namespace-managers`.\n+\n+The optional ``OR REPLACE`` clause causes the ``ALREADY_EXISTS`` error\n+to be suppressed if the function already exists.\n+\n+The ``return_type`` needs to match the actual type of the routine body\n+``expression``, without performing type coercion.\n+\n+A set of routine characteristics can be specified to decorate the\n+function and modify its behavior. Each kind of routine\n+characteristic can be specified at most once.\n+\n+============================ ======================== ================================================================\n+Routine Characteristic       Default Value            Description\n+============================ ======================== ================================================================\n+Language clause              SQL                      The language in which the function is defined.\n+Deterministic characteristic NOT DETERMINISTIC        Whether the function is deterministic. ``NOT DETERMINISTIC``\n+                                                      means that the function is possibly non-deterministic.\n+Null-call clause             CALLED ON NULL INPUT     The behavior of the function in which ``null`` is supplied as\n+                                                      the value of at least one argument.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA1NTExOQ=="}, "originalCommit": {"oid": "6241b0e9c280e7e95ac4ba5c4015017b0018a82a"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjI4NzQ5OnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/com/facebook/presto/spi/function/FunctionNamespaceManagerFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMjoyODoyN1rOFmsaIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMjoyODoyN1rOFmsaIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjExNzc5NA==", "bodyText": "catalogName as well?", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376117794", "createdAt": "2020-02-06T22:28:27Z", "author": {"login": "rongrong"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/function/FunctionNamespaceManagerFactory.java", "diffHunk": "@@ -21,5 +21,5 @@\n \n     FunctionHandleResolver getHandleResolver();\n \n-    FunctionNamespaceManager<?> create(Map<String, String> config);\n+    FunctionNamespaceManager<?> create(String catalog, Map<String, String> config);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "235958c444891ec9cc23451cb901424400b727fd"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjMxMjQxOnYy", "diffSide": "RIGHT", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/AbstractSqlInvokedFunctionNamespaceManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMjozODozMlrOFmspkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMjozODozMlrOFmspkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEyMTc0Ng==", "bodyText": "This seems to be more related to the catalog config commit. But it's fine to keep it here as well.", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376121746", "createdAt": "2020-02-06T22:38:32Z", "author": {"login": "rongrong"}, "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/AbstractSqlInvokedFunctionNamespaceManager.java", "diffHunk": "@@ -43,19 +45,22 @@\n import static com.google.common.base.Preconditions.checkArgument;\n import static com.google.common.collect.ImmutableList.toImmutableList;\n import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static java.util.Objects.requireNonNull;\n import static java.util.concurrent.TimeUnit.MILLISECONDS;\n \n public abstract class AbstractSqlInvokedFunctionNamespaceManager\n         implements FunctionNamespaceManager<SqlInvokedFunction>\n {\n     private final ConcurrentMap<FunctionNamespaceTransactionHandle, FunctionCollection> transactions = new ConcurrentHashMap<>();\n \n+    private final String catalogName;\n     private final LoadingCache<QualifiedFunctionName, Collection<SqlInvokedFunction>> functions;\n     private final LoadingCache<SqlFunctionHandle, FunctionMetadata> metadataByHandle;\n     private final LoadingCache<SqlFunctionHandle, ScalarFunctionImplementation> implementationByHandle;\n \n-    public AbstractSqlInvokedFunctionNamespaceManager(SqlInvokedFunctionNamespaceManagerConfig config)\n+    public AbstractSqlInvokedFunctionNamespaceManager(String catalogName, SqlInvokedFunctionNamespaceManagerConfig config)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6f2e8e547ff7e0c8a92ff35f7be76367c443973"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjMxMzk1OnYy", "diffSide": "RIGHT", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/DbFunctionNamespaceManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMjozOToxMlrOFmsqhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMDo0Mjo1OFrOFmvDAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEyMTk5MA==", "bodyText": "Do you want to add an optional message as well?", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376121990", "createdAt": "2020-02-06T22:39:12Z", "author": {"login": "rongrong"}, "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/DbFunctionNamespaceManager.java", "diffHunk": "@@ -0,0 +1,285 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.functionNamespace.db;\n+\n+import com.facebook.presto.functionNamespace.AbstractSqlInvokedFunctionNamespaceManager;\n+import com.facebook.presto.functionNamespace.InvalidFunctionHandleException;\n+import com.facebook.presto.functionNamespace.ServingCatalog;\n+import com.facebook.presto.functionNamespace.SqlInvokedFunctionNamespaceManagerConfig;\n+import com.facebook.presto.spi.CatalogSchemaName;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.function.AlterRoutineCharacteristics;\n+import com.facebook.presto.spi.function.FunctionMetadata;\n+import com.facebook.presto.spi.function.QualifiedFunctionName;\n+import com.facebook.presto.spi.function.RoutineCharacteristics;\n+import com.facebook.presto.spi.function.ScalarFunctionImplementation;\n+import com.facebook.presto.spi.function.Signature;\n+import com.facebook.presto.spi.function.SqlFunction;\n+import com.facebook.presto.spi.function.SqlFunctionHandle;\n+import com.facebook.presto.spi.function.SqlFunctionId;\n+import com.facebook.presto.spi.function.SqlInvokedFunction;\n+import com.facebook.presto.spi.type.TypeSignature;\n+import org.jdbi.v3.core.Jdbi;\n+import org.jdbi.v3.core.statement.SqlStatements;\n+\n+import javax.annotation.PostConstruct;\n+import javax.inject.Inject;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.spi.StandardErrorCode.ALREADY_EXISTS;\n+import static com.facebook.presto.spi.StandardErrorCode.AMBIGUOUS_FUNCTION_CALL;\n+import static com.facebook.presto.spi.StandardErrorCode.GENERIC_USER_ERROR;\n+import static com.facebook.presto.spi.StandardErrorCode.NOT_FOUND;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.lang.Math.toIntExact;\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static java.util.stream.Collectors.joining;\n+\n+public class DbFunctionNamespaceManager\n+        extends AbstractSqlInvokedFunctionNamespaceManager\n+{\n+    private static final int MAX_CATALOG_NAME_LENGTH = 128;\n+    private static final int MAX_SCHEMA_NAME_LENGTH = 128;\n+    private static final int MAX_FUNCTION_NAME_LENGTH = 256;\n+    private static final int MAX_PARAMETER_TYPES_LENGTH = 500;\n+    private static final int MAX_RETURN_TYPE_LENGTH = 256;\n+\n+    private final Jdbi jdbi;\n+    private final FunctionNamespaceDao functionNamespaceDao;\n+\n+    @Inject\n+    public DbFunctionNamespaceManager(\n+            Jdbi jdbi,\n+            FunctionNamespaceDao functionNamespaceDao,\n+            SqlInvokedFunctionNamespaceManagerConfig managerConfig,\n+            DbFunctionNamespaceManagerConfig dbManagerConfig,\n+            @ServingCatalog String catalogName)\n+    {\n+        super(catalogName, managerConfig);\n+        this.jdbi = requireNonNull(jdbi, \"jdbi is null\");\n+        this.functionNamespaceDao = requireNonNull(functionNamespaceDao, \"functionNamespaceDao is null\");\n+\n+        jdbi.getConfig(SqlStatements.class)\n+                .setQueryTimeout(toIntExact(dbManagerConfig.getQueryTimeout().roundTo(SECONDS)));\n+        jdbi.getConfig(FunctionNamespacesTableCustomizerFactory.Config.class)\n+                .setTableName(dbManagerConfig.getFunctionNamespacesTableName());\n+        jdbi.getConfig(SqlFunctionsTableCustomizerFactory.Config.class)\n+                .setTableName(dbManagerConfig.getFunctionsTableName());\n+    }\n+\n+    @PostConstruct\n+    public void initialize()\n+    {\n+        functionNamespaceDao.createFunctionNamespacesTableIfNotExists();\n+        functionNamespaceDao.createSqlFunctionsTableIfNotExists();\n+    }\n+\n+    @Override\n+    public Collection<SqlInvokedFunction> listFunctions()\n+    {\n+        return functionNamespaceDao.listFunctions(getCatalog());\n+    }\n+\n+    @Override\n+    protected Collection<SqlInvokedFunction> fetchFunctionsDirect(QualifiedFunctionName functionName)\n+    {\n+        checkCatalog(functionName);\n+        return functionNamespaceDao.getFunctions(\n+                functionName.getFunctionNamespace().getCatalogName(),\n+                functionName.getFunctionNamespace().getSchemaName(),\n+                functionName.getFunctionName());\n+    }\n+\n+    @Override\n+    protected FunctionMetadata fetchFunctionMetadataDirect(SqlFunctionHandle functionHandle)\n+    {\n+        checkCatalog(functionHandle);\n+        Optional<SqlInvokedFunction> function = functionNamespaceDao.getFunction(functionHandle.getFunctionId(), functionHandle.getVersion());\n+        if (!function.isPresent()) {\n+            throw new InvalidFunctionHandleException(functionHandle);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6f2e8e547ff7e0c8a92ff35f7be76367c443973"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE2MTAyNg==", "bodyText": "See InvalidFunctionHandleException.java. It adds an error message itself.", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376161026", "createdAt": "2020-02-07T00:42:58Z", "author": {"login": "caithagoras"}, "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/DbFunctionNamespaceManager.java", "diffHunk": "@@ -0,0 +1,285 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.functionNamespace.db;\n+\n+import com.facebook.presto.functionNamespace.AbstractSqlInvokedFunctionNamespaceManager;\n+import com.facebook.presto.functionNamespace.InvalidFunctionHandleException;\n+import com.facebook.presto.functionNamespace.ServingCatalog;\n+import com.facebook.presto.functionNamespace.SqlInvokedFunctionNamespaceManagerConfig;\n+import com.facebook.presto.spi.CatalogSchemaName;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.function.AlterRoutineCharacteristics;\n+import com.facebook.presto.spi.function.FunctionMetadata;\n+import com.facebook.presto.spi.function.QualifiedFunctionName;\n+import com.facebook.presto.spi.function.RoutineCharacteristics;\n+import com.facebook.presto.spi.function.ScalarFunctionImplementation;\n+import com.facebook.presto.spi.function.Signature;\n+import com.facebook.presto.spi.function.SqlFunction;\n+import com.facebook.presto.spi.function.SqlFunctionHandle;\n+import com.facebook.presto.spi.function.SqlFunctionId;\n+import com.facebook.presto.spi.function.SqlInvokedFunction;\n+import com.facebook.presto.spi.type.TypeSignature;\n+import org.jdbi.v3.core.Jdbi;\n+import org.jdbi.v3.core.statement.SqlStatements;\n+\n+import javax.annotation.PostConstruct;\n+import javax.inject.Inject;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.spi.StandardErrorCode.ALREADY_EXISTS;\n+import static com.facebook.presto.spi.StandardErrorCode.AMBIGUOUS_FUNCTION_CALL;\n+import static com.facebook.presto.spi.StandardErrorCode.GENERIC_USER_ERROR;\n+import static com.facebook.presto.spi.StandardErrorCode.NOT_FOUND;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.lang.Math.toIntExact;\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static java.util.stream.Collectors.joining;\n+\n+public class DbFunctionNamespaceManager\n+        extends AbstractSqlInvokedFunctionNamespaceManager\n+{\n+    private static final int MAX_CATALOG_NAME_LENGTH = 128;\n+    private static final int MAX_SCHEMA_NAME_LENGTH = 128;\n+    private static final int MAX_FUNCTION_NAME_LENGTH = 256;\n+    private static final int MAX_PARAMETER_TYPES_LENGTH = 500;\n+    private static final int MAX_RETURN_TYPE_LENGTH = 256;\n+\n+    private final Jdbi jdbi;\n+    private final FunctionNamespaceDao functionNamespaceDao;\n+\n+    @Inject\n+    public DbFunctionNamespaceManager(\n+            Jdbi jdbi,\n+            FunctionNamespaceDao functionNamespaceDao,\n+            SqlInvokedFunctionNamespaceManagerConfig managerConfig,\n+            DbFunctionNamespaceManagerConfig dbManagerConfig,\n+            @ServingCatalog String catalogName)\n+    {\n+        super(catalogName, managerConfig);\n+        this.jdbi = requireNonNull(jdbi, \"jdbi is null\");\n+        this.functionNamespaceDao = requireNonNull(functionNamespaceDao, \"functionNamespaceDao is null\");\n+\n+        jdbi.getConfig(SqlStatements.class)\n+                .setQueryTimeout(toIntExact(dbManagerConfig.getQueryTimeout().roundTo(SECONDS)));\n+        jdbi.getConfig(FunctionNamespacesTableCustomizerFactory.Config.class)\n+                .setTableName(dbManagerConfig.getFunctionNamespacesTableName());\n+        jdbi.getConfig(SqlFunctionsTableCustomizerFactory.Config.class)\n+                .setTableName(dbManagerConfig.getFunctionsTableName());\n+    }\n+\n+    @PostConstruct\n+    public void initialize()\n+    {\n+        functionNamespaceDao.createFunctionNamespacesTableIfNotExists();\n+        functionNamespaceDao.createSqlFunctionsTableIfNotExists();\n+    }\n+\n+    @Override\n+    public Collection<SqlInvokedFunction> listFunctions()\n+    {\n+        return functionNamespaceDao.listFunctions(getCatalog());\n+    }\n+\n+    @Override\n+    protected Collection<SqlInvokedFunction> fetchFunctionsDirect(QualifiedFunctionName functionName)\n+    {\n+        checkCatalog(functionName);\n+        return functionNamespaceDao.getFunctions(\n+                functionName.getFunctionNamespace().getCatalogName(),\n+                functionName.getFunctionNamespace().getSchemaName(),\n+                functionName.getFunctionName());\n+    }\n+\n+    @Override\n+    protected FunctionMetadata fetchFunctionMetadataDirect(SqlFunctionHandle functionHandle)\n+    {\n+        checkCatalog(functionHandle);\n+        Optional<SqlInvokedFunction> function = functionNamespaceDao.getFunction(functionHandle.getFunctionId(), functionHandle.getVersion());\n+        if (!function.isPresent()) {\n+            throw new InvalidFunctionHandleException(functionHandle);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEyMTk5MA=="}, "originalCommit": {"oid": "b6f2e8e547ff7e0c8a92ff35f7be76367c443973"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjMyNDcwOnYy", "diffSide": "RIGHT", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/testing/SqlInvokedFunctionTestUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMjo0MzozNFrOFmsw5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMjo0MzozNFrOFmsw5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEyMzYyMw==", "bodyText": "Why not using \"unittest\" to keep it consistent?", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376123623", "createdAt": "2020-02-06T22:43:34Z", "author": {"login": "rongrong"}, "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/testing/SqlInvokedFunctionTestUtils.java", "diffHunk": "@@ -34,7 +34,11 @@ private SqlInvokedFunctionTestUtils()\n     {\n     }\n \n-    public static final QualifiedFunctionName POWER_TOWER = QualifiedFunctionName.of(new CatalogSchemaName(\"unittest\", \"memory\"), \"power_tower\");\n+    public static final String TEST_CATALOG = \"test\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6f2e8e547ff7e0c8a92ff35f7be76367c443973"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjQ0NDAyOnYy", "diffSide": "RIGHT", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/AbstractSqlInvokedFunctionNamespaceManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMzozNToxOVrOFmt5RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMzozNToxOVrOFmt5RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE0MjE0OA==", "bodyText": "getCatalogName?", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376142148", "createdAt": "2020-02-06T23:35:19Z", "author": {"login": "rongrong"}, "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/AbstractSqlInvokedFunctionNamespaceManager.java", "diffHunk": "@@ -141,17 +148,48 @@ public final FunctionHandle getFunctionHandle(Optional<? extends FunctionNamespa\n     @Override\n     public final FunctionMetadata getFunctionMetadata(FunctionHandle functionHandle)\n     {\n+        checkCatalog(functionHandle);\n         checkArgument(functionHandle instanceof SqlFunctionHandle, \"Unsupported FunctionHandle type '%s'\", functionHandle.getClass().getSimpleName());\n         return metadataByHandle.getUnchecked((SqlFunctionHandle) functionHandle);\n     }\n \n     @Override\n     public final ScalarFunctionImplementation getScalarFunctionImplementation(FunctionHandle functionHandle)\n     {\n+        checkCatalog(functionHandle);\n         checkArgument(functionHandle instanceof SqlFunctionHandle, \"Unsupported FunctionHandle type '%s'\", functionHandle.getClass().getSimpleName());\n         return implementationByHandle.getUnchecked((SqlFunctionHandle) functionHandle);\n     }\n \n+    protected String getCatalog()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a547ef89e181b49823c655fd5fe751ffd052bafa"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjQ0OTg5OnYy", "diffSide": "RIGHT", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/DbFunctionNamespaceManagerConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMzozODoyMVrOFmt8vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMjoxOToxMlrOFnL7gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE0MzAzOQ==", "bodyText": "Any reasoning behind this default value? It's a bit extreme is it? I can't imagine most MySQL queries to take longer than 2 seconds. Why do we want to expose this as a configuration to begin with? Why not just leave it to default?", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376143039", "createdAt": "2020-02-06T23:38:21Z", "author": {"login": "rongrong"}, "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/DbFunctionNamespaceManagerConfig.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.functionNamespace.db;\n+\n+import com.facebook.airlift.configuration.Config;\n+import io.airlift.units.Duration;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+\n+public class DbFunctionNamespaceManagerConfig\n+{\n+    private String functionNamespacesTableName = \"function_namespaces\";\n+    private String functionsTableName = \"sql_functions\";\n+    private Duration queryTimeout = new Duration(20, SECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a547ef89e181b49823c655fd5fe751ffd052bafa"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYzNDI0Mw==", "bodyText": "I believe the default is no timeout at all if not specified explicitly.", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376634243", "createdAt": "2020-02-07T22:19:12Z", "author": {"login": "caithagoras"}, "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/DbFunctionNamespaceManagerConfig.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.functionNamespace.db;\n+\n+import com.facebook.airlift.configuration.Config;\n+import io.airlift.units.Duration;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+\n+public class DbFunctionNamespaceManagerConfig\n+{\n+    private String functionNamespacesTableName = \"function_namespaces\";\n+    private String functionsTableName = \"sql_functions\";\n+    private Duration queryTimeout = new Duration(20, SECONDS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE0MzAzOQ=="}, "originalCommit": {"oid": "a547ef89e181b49823c655fd5fe751ffd052bafa"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjQ2MDYyOnYy", "diffSide": "RIGHT", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/SqlFunctionsTableCustomizerFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMzo0MzozNFrOFmuDMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMzo0MzozNFrOFmuDMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE0NDY4OA==", "bodyText": "Can we define this (and the function_namespaces_table) as constant?", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376144688", "createdAt": "2020-02-06T23:43:34Z", "author": {"login": "rongrong"}, "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/db/SqlFunctionsTableCustomizerFactory.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.functionNamespace.db;\n+\n+import org.jdbi.v3.core.config.JdbiConfig;\n+import org.jdbi.v3.sqlobject.customizer.SqlStatementCustomizer;\n+import org.jdbi.v3.sqlobject.customizer.SqlStatementCustomizerFactory;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Method;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class SqlFunctionsTableCustomizerFactory\n+        implements SqlStatementCustomizerFactory\n+{\n+    @Override\n+    public SqlStatementCustomizer createForType(Annotation annotation, Class<?> sqlObjectType)\n+    {\n+        return statement -> statement.define(\"sql_functions_table\", statement.getConfig(Config.class).getTableName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a547ef89e181b49823c655fd5fe751ffd052bafa"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjQ2NTMxOnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/com/facebook/presto/spi/function/RoutineCharacteristics.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMzo0NjoxMFrOFmuGMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMzo0NjoxMFrOFmuGMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE0NTQ1OA==", "bodyText": "I think we normally use \"nullCallClause\"", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376145458", "createdAt": "2020-02-06T23:46:10Z", "author": {"login": "rongrong"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/function/RoutineCharacteristics.java", "diffHunk": "@@ -45,26 +49,30 @@\n     private final Determinism determinism;\n     private final NullCallClause nullCallClause;\n \n-    private RoutineCharacteristics(\n-            Language language,\n-            Determinism determinism,\n-            NullCallClause nullCallClause)\n+    @JsonCreator\n+    public RoutineCharacteristics(\n+            @JsonProperty(\"language\") Optional<Language> language,\n+            @JsonProperty(\"determinism\") Optional<Determinism> determinism,\n+            @JsonProperty(\"null_call_clause\") Optional<NullCallClause> nullCallClause)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a547ef89e181b49823c655fd5fe751ffd052bafa"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjc5NzI2OnYy", "diffSide": "RIGHT", "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/testing/SqlInvokedFunctionTestUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMzoxMjo1NFrOFmxLPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMzoxMjo1NFrOFmxLPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE5NTkwMA==", "bodyText": "This would cause compatibility issue when roll out to production. Make sure that's handled during deployment.", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376195900", "createdAt": "2020-02-07T03:12:54Z", "author": {"login": "rongrong"}, "path": "presto-function-namespace-managers/src/main/java/com/facebook/presto/functionNamespace/testing/SqlInvokedFunctionTestUtils.java", "diffHunk": "@@ -44,7 +44,7 @@ private SqlInvokedFunctionTestUtils()\n             parseTypeSignature(DOUBLE),\n             \"power tower\",\n             RoutineCharacteristics.builder().setDeterminism(DETERMINISTIC).build(),\n-            \"pow(x, x)\",\n+            \"RETURN pow(x, x)\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f55bdc7866ba8afc6cf56f2414911994843d0a02"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjgxNjQ3OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMzoyNjozMlrOFmxWYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMzoyNjozMlrOFmxWYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE5ODc1NQ==", "bodyText": "signature includes return type and other information as well. So just say \"can be uniquely identified by its name and parameter type list\".", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376198755", "createdAt": "2020-02-07T03:26:32Z", "author": {"login": "rongrong"}, "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "diffHunk": "@@ -0,0 +1,76 @@\n+===========================\n+Function Namespace Managers\n+===========================\n+\n+.. warning::\n+\n+    This is an experimental feature being actively developed. The way\n+    Function Namespace Managers are configured might be changed.\n+\n+Function namespace managers support storing and retrieving user-defined\n+functions with a persistent storage, allowing users to create, alter,\n+and delete functions, as well as to reference them within queries.\n+\n+Function Namespace\n+------------------\n+\n+A function namespace is a catalog-schema name (i.e. ``example.test``)\n+in which each function can be uniquely identified by its signature,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55c94f60b1a186ac569c5df68736f9defdc85034"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjgxODc0OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMzoyODoyMFrOFmxX0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMjoxMDozMFrOFnLvlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE5OTEyMA==", "bodyText": "\"A function namespace\"? What's the behavior if I use a real catalog as function catalog? I think it will still work right? So potentially \"example.text\" can be a real catalog.schema as well.", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376199120", "createdAt": "2020-02-07T03:28:20Z", "author": {"login": "rongrong"}, "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "diffHunk": "@@ -0,0 +1,76 @@\n+===========================\n+Function Namespace Managers\n+===========================\n+\n+.. warning::\n+\n+    This is an experimental feature being actively developed. The way\n+    Function Namespace Managers are configured might be changed.\n+\n+Function namespace managers support storing and retrieving user-defined\n+functions with a persistent storage, allowing users to create, alter,\n+and delete functions, as well as to reference them within queries.\n+\n+Function Namespace\n+------------------\n+\n+A function namespace is a catalog-schema name (i.e. ``example.test``)\n+in which each function can be uniquely identified by its signature,\n+that is, its name and parameter type list.\n+\n+The function namespace, such as ``example.test``, is not a full-fledged", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55c94f60b1a186ac569c5df68736f9defdc85034"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUwMDE3Ng==", "bodyText": "I think we should disallow registering function namespace with a catalog that has already been registered with a connector. This will cause lots of confusion as the sets of schema will be different from the sets of function namespaces within that catalog, and makes support CREATE SCHEMA, DROP SCHEMA, and SHOW SCHEMA on function namespace managed catalogs problematic or even infeasible.", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376500176", "createdAt": "2020-02-07T16:58:54Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "diffHunk": "@@ -0,0 +1,76 @@\n+===========================\n+Function Namespace Managers\n+===========================\n+\n+.. warning::\n+\n+    This is an experimental feature being actively developed. The way\n+    Function Namespace Managers are configured might be changed.\n+\n+Function namespace managers support storing and retrieving user-defined\n+functions with a persistent storage, allowing users to create, alter,\n+and delete functions, as well as to reference them within queries.\n+\n+Function Namespace\n+------------------\n+\n+A function namespace is a catalog-schema name (i.e. ``example.test``)\n+in which each function can be uniquely identified by its signature,\n+that is, its name and parameter type list.\n+\n+The function namespace, such as ``example.test``, is not a full-fledged", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE5OTEyMA=="}, "originalCommit": {"oid": "55c94f60b1a186ac569c5df68736f9defdc85034"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUwMDQ1MQ==", "bodyText": "If we have connector functions one day, we can reverse that restriction and properly support that use case.", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376500451", "createdAt": "2020-02-07T16:59:28Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "diffHunk": "@@ -0,0 +1,76 @@\n+===========================\n+Function Namespace Managers\n+===========================\n+\n+.. warning::\n+\n+    This is an experimental feature being actively developed. The way\n+    Function Namespace Managers are configured might be changed.\n+\n+Function namespace managers support storing and retrieving user-defined\n+functions with a persistent storage, allowing users to create, alter,\n+and delete functions, as well as to reference them within queries.\n+\n+Function Namespace\n+------------------\n+\n+A function namespace is a catalog-schema name (i.e. ``example.test``)\n+in which each function can be uniquely identified by its signature,\n+that is, its name and parameter type list.\n+\n+The function namespace, such as ``example.test``, is not a full-fledged", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE5OTEyMA=="}, "originalCommit": {"oid": "55c94f60b1a186ac569c5df68736f9defdc85034"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYyOTE1Mg==", "bodyText": "But we actually don't disallow it in code right? So call this out specifically. Something like using existing connector catalog is not supported and the behavior is not defined or tested.", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376629152", "createdAt": "2020-02-07T22:04:23Z", "author": {"login": "rongrong"}, "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "diffHunk": "@@ -0,0 +1,76 @@\n+===========================\n+Function Namespace Managers\n+===========================\n+\n+.. warning::\n+\n+    This is an experimental feature being actively developed. The way\n+    Function Namespace Managers are configured might be changed.\n+\n+Function namespace managers support storing and retrieving user-defined\n+functions with a persistent storage, allowing users to create, alter,\n+and delete functions, as well as to reference them within queries.\n+\n+Function Namespace\n+------------------\n+\n+A function namespace is a catalog-schema name (i.e. ``example.test``)\n+in which each function can be uniquely identified by its signature,\n+that is, its name and parameter type list.\n+\n+The function namespace, such as ``example.test``, is not a full-fledged", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE5OTEyMA=="}, "originalCommit": {"oid": "55c94f60b1a186ac569c5df68736f9defdc85034"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYzMTE4OQ==", "bodyText": "Each instance of function namespace manager binds to a catalog name\nand manages all functions within that catalog. Using the catalog\nname of an existing connector is discouraged, as the behavior is not\ndefined nor tested, and will be disallowed in the future.\n\nCurrently, those catalog names do not correspond to real catalogs.\nThey cannot be specified as the catalog in a session, nor do they\nsupport :doc:`CREATE SCHEMA`, :doc:`ALTER SCHEMA`, :doc:`DROP SCHEMA`,\nor :doc:`SHOW SCHEMAS`. Instead, namespaces can be added using the\nmethods described below.", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376631189", "createdAt": "2020-02-07T22:10:30Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "diffHunk": "@@ -0,0 +1,76 @@\n+===========================\n+Function Namespace Managers\n+===========================\n+\n+.. warning::\n+\n+    This is an experimental feature being actively developed. The way\n+    Function Namespace Managers are configured might be changed.\n+\n+Function namespace managers support storing and retrieving user-defined\n+functions with a persistent storage, allowing users to create, alter,\n+and delete functions, as well as to reference them within queries.\n+\n+Function Namespace\n+------------------\n+\n+A function namespace is a catalog-schema name (i.e. ``example.test``)\n+in which each function can be uniquely identified by its signature,\n+that is, its name and parameter type list.\n+\n+The function namespace, such as ``example.test``, is not a full-fledged", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE5OTEyMA=="}, "originalCommit": {"oid": "55c94f60b1a186ac569c5df68736f9defdc85034"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjgxOTU4OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMzoyODo1OVrOFmxYRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMToxNjoxN1rOFnKhzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE5OTIzOQ==", "bodyText": "What is a \"function namespace manager\"? Define it first.", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376199239", "createdAt": "2020-02-07T03:28:59Z", "author": {"login": "rongrong"}, "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "diffHunk": "@@ -0,0 +1,76 @@\n+===========================\n+Function Namespace Managers\n+===========================\n+\n+.. warning::\n+\n+    This is an experimental feature being actively developed. The way\n+    Function Namespace Managers are configured might be changed.\n+\n+Function namespace managers support storing and retrieving user-defined\n+functions with a persistent storage, allowing users to create, alter,\n+and delete functions, as well as to reference them within queries.\n+\n+Function Namespace\n+------------------\n+\n+A function namespace is a catalog-schema name (i.e. ``example.test``)\n+in which each function can be uniquely identified by its signature,\n+that is, its name and parameter type list.\n+\n+The function namespace, such as ``example.test``, is not a full-fledged\n+schema as it does not support storing tables and views, but only\n+functions.\n+\n+Each instance of function namespace manager manages a catalog. Creating", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55c94f60b1a186ac569c5df68736f9defdc85034"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYxMTI3Ng==", "bodyText": "Its purpose and functionality is already defined in the first paragraph. Here, I'm expanding the description.", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376611276", "createdAt": "2020-02-07T21:16:17Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "diffHunk": "@@ -0,0 +1,76 @@\n+===========================\n+Function Namespace Managers\n+===========================\n+\n+.. warning::\n+\n+    This is an experimental feature being actively developed. The way\n+    Function Namespace Managers are configured might be changed.\n+\n+Function namespace managers support storing and retrieving user-defined\n+functions with a persistent storage, allowing users to create, alter,\n+and delete functions, as well as to reference them within queries.\n+\n+Function Namespace\n+------------------\n+\n+A function namespace is a catalog-schema name (i.e. ``example.test``)\n+in which each function can be uniquely identified by its signature,\n+that is, its name and parameter type list.\n+\n+The function namespace, such as ``example.test``, is not a full-fledged\n+schema as it does not support storing tables and views, but only\n+functions.\n+\n+Each instance of function namespace manager manages a catalog. Creating", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE5OTIzOQ=="}, "originalCommit": {"oid": "55c94f60b1a186ac569c5df68736f9defdc85034"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjgyMDQ3OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMzoyOTo1MVrOFmxY2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMzoyOTo1MVrOFmxY2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE5OTM4NQ==", "bodyText": "Maybe \"Presto provides a MySQL-based function namespace manager implementation\".", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376199385", "createdAt": "2020-02-07T03:29:51Z", "author": {"login": "rongrong"}, "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "diffHunk": "@@ -0,0 +1,76 @@\n+===========================\n+Function Namespace Managers\n+===========================\n+\n+.. warning::\n+\n+    This is an experimental feature being actively developed. The way\n+    Function Namespace Managers are configured might be changed.\n+\n+Function namespace managers support storing and retrieving user-defined\n+functions with a persistent storage, allowing users to create, alter,\n+and delete functions, as well as to reference them within queries.\n+\n+Function Namespace\n+------------------\n+\n+A function namespace is a catalog-schema name (i.e. ``example.test``)\n+in which each function can be uniquely identified by its signature,\n+that is, its name and parameter type list.\n+\n+The function namespace, such as ``example.test``, is not a full-fledged\n+schema as it does not support storing tables and views, but only\n+functions.\n+\n+Each instance of function namespace manager manages a catalog. Creating\n+and managing schema in those catalogs are not supported.\n+\n+Configuration\n+-------------\n+\n+Presto provides a MySQL-based function namespace manager. It is", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55c94f60b1a186ac569c5df68736f9defdc85034"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjgyMjM0OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMzozMToxMlrOFmxZ-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMzozMToxMlrOFmxZ-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE5OTY3Mw==", "bodyText": "I think you mean example_function_namespaces table here.", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376199673", "createdAt": "2020-02-07T03:31:12Z", "author": {"login": "rongrong"}, "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "diffHunk": "@@ -0,0 +1,76 @@\n+===========================\n+Function Namespace Managers\n+===========================\n+\n+.. warning::\n+\n+    This is an experimental feature being actively developed. The way\n+    Function Namespace Managers are configured might be changed.\n+\n+Function namespace managers support storing and retrieving user-defined\n+functions with a persistent storage, allowing users to create, alter,\n+and delete functions, as well as to reference them within queries.\n+\n+Function Namespace\n+------------------\n+\n+A function namespace is a catalog-schema name (i.e. ``example.test``)\n+in which each function can be uniquely identified by its signature,\n+that is, its name and parameter type list.\n+\n+The function namespace, such as ``example.test``, is not a full-fledged\n+schema as it does not support storing tables and views, but only\n+functions.\n+\n+Each instance of function namespace manager manages a catalog. Creating\n+and managing schema in those catalogs are not supported.\n+\n+Configuration\n+-------------\n+\n+Presto provides a MySQL-based function namespace manager. It is\n+pluggable and can be configured by an administrator.\n+\n+To instantiate a MySQL-based function namespace manager that manages\n+catalog ``example``, administrator needs to first have a running MySQL\n+server. Suppose the MySQL server can be reached at ``localhost:1080``,\n+add a file ``etc/function-namespace/example.properties`` with the\n+following contents::\n+\n+    function-namespace-manager.name=mysql\n+    database-url=localhost:1080\n+    function-namespaces-table-name=example_function_namespaces\n+    functions-table-name=example_sql_functions\n+\n+When Presto first starts with the above MySQL function namespace\n+manager configuration, two MySQL tables will be created if they do\n+not exist.\n+\n+- ``example_function_namespaces`` stores function namespaces of\n+  the catalog ``example``.\n+- ``example_sql_functions`` stores SQL-invoked functions of the\n+  catalog ``example``.\n+\n+If multiple function namespace managers are instantiated, they may use\n+the same set of tables, or different tables / MySQL databases.\n+\n+To create a new function namespace, insert into the\n+``function_namespaces`` table::", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55c94f60b1a186ac569c5df68736f9defdc85034"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODQyNjQ2OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNToyMTowOVrOFnAhcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNToyMTowOVrOFnAhcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ0NzM0Nw==", "bodyText": "What does pluggable mean here? Also, how else would it be configured if not by an administrator?", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376447347", "createdAt": "2020-02-07T15:21:09Z", "author": {"login": "rschlussel"}, "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "diffHunk": "@@ -0,0 +1,76 @@\n+===========================\n+Function Namespace Managers\n+===========================\n+\n+.. warning::\n+\n+    This is an experimental feature being actively developed. The way\n+    Function Namespace Managers are configured might be changed.\n+\n+Function namespace managers support storing and retrieving user-defined\n+functions with a persistent storage, allowing users to create, alter,\n+and delete functions, as well as to reference them within queries.\n+\n+Function Namespace\n+------------------\n+\n+A function namespace is a catalog-schema name (i.e. ``example.test``)\n+in which each function can be uniquely identified by its signature,\n+that is, its name and parameter type list.\n+\n+The function namespace, such as ``example.test``, is not a full-fledged\n+schema as it does not support storing tables and views, but only\n+functions.\n+\n+Each instance of function namespace manager manages a catalog. Creating\n+and managing schema in those catalogs are not supported.\n+\n+Configuration\n+-------------\n+\n+Presto provides a MySQL-based function namespace manager. It is\n+pluggable and can be configured by an administrator.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55c94f60b1a186ac569c5df68736f9defdc85034"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODQzODMxOnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNToyNDoyNFrOFnAosQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNToyNDoyNFrOFnAosQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ0OTIwMQ==", "bodyText": "should this table be example_function_namespaces?  We haven't mentioned the function_namespaces table yet", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376449201", "createdAt": "2020-02-07T15:24:24Z", "author": {"login": "rschlussel"}, "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "diffHunk": "@@ -0,0 +1,76 @@\n+===========================\n+Function Namespace Managers\n+===========================\n+\n+.. warning::\n+\n+    This is an experimental feature being actively developed. The way\n+    Function Namespace Managers are configured might be changed.\n+\n+Function namespace managers support storing and retrieving user-defined\n+functions with a persistent storage, allowing users to create, alter,\n+and delete functions, as well as to reference them within queries.\n+\n+Function Namespace\n+------------------\n+\n+A function namespace is a catalog-schema name (i.e. ``example.test``)\n+in which each function can be uniquely identified by its signature,\n+that is, its name and parameter type list.\n+\n+The function namespace, such as ``example.test``, is not a full-fledged\n+schema as it does not support storing tables and views, but only\n+functions.\n+\n+Each instance of function namespace manager manages a catalog. Creating\n+and managing schema in those catalogs are not supported.\n+\n+Configuration\n+-------------\n+\n+Presto provides a MySQL-based function namespace manager. It is\n+pluggable and can be configured by an administrator.\n+\n+To instantiate a MySQL-based function namespace manager that manages\n+catalog ``example``, administrator needs to first have a running MySQL\n+server. Suppose the MySQL server can be reached at ``localhost:1080``,\n+add a file ``etc/function-namespace/example.properties`` with the\n+following contents::\n+\n+    function-namespace-manager.name=mysql\n+    database-url=localhost:1080\n+    function-namespaces-table-name=example_function_namespaces\n+    functions-table-name=example_sql_functions\n+\n+When Presto first starts with the above MySQL function namespace\n+manager configuration, two MySQL tables will be created if they do\n+not exist.\n+\n+- ``example_function_namespaces`` stores function namespaces of\n+  the catalog ``example``.\n+- ``example_sql_functions`` stores SQL-invoked functions of the\n+  catalog ``example``.\n+\n+If multiple function namespace managers are instantiated, they may use\n+the same set of tables, or different tables / MySQL databases.\n+\n+To create a new function namespace, insert into the\n+``function_namespaces`` table::\n+\n+    INSERT INTO function_namespaces (catalog_name, schema_name)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55c94f60b1a186ac569c5df68736f9defdc85034"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODQ0NzEwOnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNToyNjo1N1rOFnAuHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzoyMToxNVrOFnEXWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ1MDU5MQ==", "bodyText": "what do you mean that Creating and managing schema in those catalogs are not supported?  Don't you describe below how to do that?", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376450591", "createdAt": "2020-02-07T15:26:57Z", "author": {"login": "rschlussel"}, "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "diffHunk": "@@ -0,0 +1,76 @@\n+===========================\n+Function Namespace Managers\n+===========================\n+\n+.. warning::\n+\n+    This is an experimental feature being actively developed. The way\n+    Function Namespace Managers are configured might be changed.\n+\n+Function namespace managers support storing and retrieving user-defined\n+functions with a persistent storage, allowing users to create, alter,\n+and delete functions, as well as to reference them within queries.\n+\n+Function Namespace\n+------------------\n+\n+A function namespace is a catalog-schema name (i.e. ``example.test``)\n+in which each function can be uniquely identified by its signature,\n+that is, its name and parameter type list.\n+\n+The function namespace, such as ``example.test``, is not a full-fledged\n+schema as it does not support storing tables and views, but only\n+functions.\n+\n+Each instance of function namespace manager manages a catalog. Creating", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55c94f60b1a186ac569c5df68736f9defdc85034"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ5Nzg4MQ==", "bodyText": "I meant you cannot use CREATE SCHEMA, DROP SCHEMA, SHOW SCHEMAS on a catalog managed by a function namespace manager, although we're looking to support that.", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376497881", "createdAt": "2020-02-07T16:54:18Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "diffHunk": "@@ -0,0 +1,76 @@\n+===========================\n+Function Namespace Managers\n+===========================\n+\n+.. warning::\n+\n+    This is an experimental feature being actively developed. The way\n+    Function Namespace Managers are configured might be changed.\n+\n+Function namespace managers support storing and retrieving user-defined\n+functions with a persistent storage, allowing users to create, alter,\n+and delete functions, as well as to reference them within queries.\n+\n+Function Namespace\n+------------------\n+\n+A function namespace is a catalog-schema name (i.e. ``example.test``)\n+in which each function can be uniquely identified by its signature,\n+that is, its name and parameter type list.\n+\n+The function namespace, such as ``example.test``, is not a full-fledged\n+schema as it does not support storing tables and views, but only\n+functions.\n+\n+Each instance of function namespace manager manages a catalog. Creating", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ1MDU5MQ=="}, "originalCommit": {"oid": "55c94f60b1a186ac569c5df68736f9defdc85034"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUwOTUwNw==", "bodyText": "Let's be explicit about that since that was not obvious to me as well.", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376509507", "createdAt": "2020-02-07T17:19:27Z", "author": {"login": "sachdevs"}, "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "diffHunk": "@@ -0,0 +1,76 @@\n+===========================\n+Function Namespace Managers\n+===========================\n+\n+.. warning::\n+\n+    This is an experimental feature being actively developed. The way\n+    Function Namespace Managers are configured might be changed.\n+\n+Function namespace managers support storing and retrieving user-defined\n+functions with a persistent storage, allowing users to create, alter,\n+and delete functions, as well as to reference them within queries.\n+\n+Function Namespace\n+------------------\n+\n+A function namespace is a catalog-schema name (i.e. ``example.test``)\n+in which each function can be uniquely identified by its signature,\n+that is, its name and parameter type list.\n+\n+The function namespace, such as ``example.test``, is not a full-fledged\n+schema as it does not support storing tables and views, but only\n+functions.\n+\n+Each instance of function namespace manager manages a catalog. Creating", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ1MDU5MQ=="}, "originalCommit": {"oid": "55c94f60b1a186ac569c5df68736f9defdc85034"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUxMDI5OQ==", "bodyText": "Got it.  Maybe say it more directly then.  Something like:\nCREATE SCHEAM, DROP SCHEMA, and SHOW SCHEMAS is not currently supported on catalogs managed by the function namespace manager.  Instead, namespaces can be added using the syntax described below.", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376510299", "createdAt": "2020-02-07T17:21:15Z", "author": {"login": "rschlussel"}, "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "diffHunk": "@@ -0,0 +1,76 @@\n+===========================\n+Function Namespace Managers\n+===========================\n+\n+.. warning::\n+\n+    This is an experimental feature being actively developed. The way\n+    Function Namespace Managers are configured might be changed.\n+\n+Function namespace managers support storing and retrieving user-defined\n+functions with a persistent storage, allowing users to create, alter,\n+and delete functions, as well as to reference them within queries.\n+\n+Function Namespace\n+------------------\n+\n+A function namespace is a catalog-schema name (i.e. ``example.test``)\n+in which each function can be uniquely identified by its signature,\n+that is, its name and parameter type list.\n+\n+The function namespace, such as ``example.test``, is not a full-fledged\n+schema as it does not support storing tables and views, but only\n+functions.\n+\n+Each instance of function namespace manager manages a catalog. Creating", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ1MDU5MQ=="}, "originalCommit": {"oid": "55c94f60b1a186ac569c5df68736f9defdc85034"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODQ1MjI5OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNToyODozM1rOFnAxkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMTowNDoxMlrOFnKPuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ1MTQ3NA==", "bodyText": "I'm a bit confused about this.\n\nIf each function namespace manager only manages a single catalog, then why does the function_namespaces catalog take in both a catalog and schema name.\nAbove you said you can't add schemas", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376451474", "createdAt": "2020-02-07T15:28:33Z", "author": {"login": "rschlussel"}, "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "diffHunk": "@@ -0,0 +1,76 @@\n+===========================\n+Function Namespace Managers\n+===========================\n+\n+.. warning::\n+\n+    This is an experimental feature being actively developed. The way\n+    Function Namespace Managers are configured might be changed.\n+\n+Function namespace managers support storing and retrieving user-defined\n+functions with a persistent storage, allowing users to create, alter,\n+and delete functions, as well as to reference them within queries.\n+\n+Function Namespace\n+------------------\n+\n+A function namespace is a catalog-schema name (i.e. ``example.test``)\n+in which each function can be uniquely identified by its signature,\n+that is, its name and parameter type list.\n+\n+The function namespace, such as ``example.test``, is not a full-fledged\n+schema as it does not support storing tables and views, but only\n+functions.\n+\n+Each instance of function namespace manager manages a catalog. Creating\n+and managing schema in those catalogs are not supported.\n+\n+Configuration\n+-------------\n+\n+Presto provides a MySQL-based function namespace manager. It is\n+pluggable and can be configured by an administrator.\n+\n+To instantiate a MySQL-based function namespace manager that manages\n+catalog ``example``, administrator needs to first have a running MySQL\n+server. Suppose the MySQL server can be reached at ``localhost:1080``,\n+add a file ``etc/function-namespace/example.properties`` with the\n+following contents::\n+\n+    function-namespace-manager.name=mysql\n+    database-url=localhost:1080\n+    function-namespaces-table-name=example_function_namespaces\n+    functions-table-name=example_sql_functions\n+\n+When Presto first starts with the above MySQL function namespace\n+manager configuration, two MySQL tables will be created if they do\n+not exist.\n+\n+- ``example_function_namespaces`` stores function namespaces of\n+  the catalog ``example``.\n+- ``example_sql_functions`` stores SQL-invoked functions of the\n+  catalog ``example``.\n+\n+If multiple function namespace managers are instantiated, they may use\n+the same set of tables, or different tables / MySQL databases.\n+\n+To create a new function namespace, insert into the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55c94f60b1a186ac569c5df68736f9defdc85034"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ5NzAxMA==", "bodyText": "For 1: Different function namespace managers may use the same function_namespaces, and hence the table may contain function namespaces not managed by a single function namespace manager.\nFor 2:\na. You cannot create a function namespace with CREATE SCHEMA.\nb. A function namespace is not exactly the same as a schema, i.e., you cannot create tables and views in it.\nAlthough I agree it might just be ok to call it a schema when we support (a).", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376497010", "createdAt": "2020-02-07T16:52:39Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "diffHunk": "@@ -0,0 +1,76 @@\n+===========================\n+Function Namespace Managers\n+===========================\n+\n+.. warning::\n+\n+    This is an experimental feature being actively developed. The way\n+    Function Namespace Managers are configured might be changed.\n+\n+Function namespace managers support storing and retrieving user-defined\n+functions with a persistent storage, allowing users to create, alter,\n+and delete functions, as well as to reference them within queries.\n+\n+Function Namespace\n+------------------\n+\n+A function namespace is a catalog-schema name (i.e. ``example.test``)\n+in which each function can be uniquely identified by its signature,\n+that is, its name and parameter type list.\n+\n+The function namespace, such as ``example.test``, is not a full-fledged\n+schema as it does not support storing tables and views, but only\n+functions.\n+\n+Each instance of function namespace manager manages a catalog. Creating\n+and managing schema in those catalogs are not supported.\n+\n+Configuration\n+-------------\n+\n+Presto provides a MySQL-based function namespace manager. It is\n+pluggable and can be configured by an administrator.\n+\n+To instantiate a MySQL-based function namespace manager that manages\n+catalog ``example``, administrator needs to first have a running MySQL\n+server. Suppose the MySQL server can be reached at ``localhost:1080``,\n+add a file ``etc/function-namespace/example.properties`` with the\n+following contents::\n+\n+    function-namespace-manager.name=mysql\n+    database-url=localhost:1080\n+    function-namespaces-table-name=example_function_namespaces\n+    functions-table-name=example_sql_functions\n+\n+When Presto first starts with the above MySQL function namespace\n+manager configuration, two MySQL tables will be created if they do\n+not exist.\n+\n+- ``example_function_namespaces`` stores function namespaces of\n+  the catalog ``example``.\n+- ``example_sql_functions`` stores SQL-invoked functions of the\n+  catalog ``example``.\n+\n+If multiple function namespace managers are instantiated, they may use\n+the same set of tables, or different tables / MySQL databases.\n+\n+To create a new function namespace, insert into the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ1MTQ3NA=="}, "originalCommit": {"oid": "55c94f60b1a186ac569c5df68736f9defdc85034"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUxMjQxMw==", "bodyText": "2 makes sense.\nFor 1 are you saying that different function namespace managers may use the same table to keep track of their namespaces?  It would be helpful to state that explicitly somewhere.   Also, do you need to have separate configuration files for each catalog, or is it enough to stick new info in the function_namespaces table?", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376512413", "createdAt": "2020-02-07T17:26:13Z", "author": {"login": "rschlussel"}, "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "diffHunk": "@@ -0,0 +1,76 @@\n+===========================\n+Function Namespace Managers\n+===========================\n+\n+.. warning::\n+\n+    This is an experimental feature being actively developed. The way\n+    Function Namespace Managers are configured might be changed.\n+\n+Function namespace managers support storing and retrieving user-defined\n+functions with a persistent storage, allowing users to create, alter,\n+and delete functions, as well as to reference them within queries.\n+\n+Function Namespace\n+------------------\n+\n+A function namespace is a catalog-schema name (i.e. ``example.test``)\n+in which each function can be uniquely identified by its signature,\n+that is, its name and parameter type list.\n+\n+The function namespace, such as ``example.test``, is not a full-fledged\n+schema as it does not support storing tables and views, but only\n+functions.\n+\n+Each instance of function namespace manager manages a catalog. Creating\n+and managing schema in those catalogs are not supported.\n+\n+Configuration\n+-------------\n+\n+Presto provides a MySQL-based function namespace manager. It is\n+pluggable and can be configured by an administrator.\n+\n+To instantiate a MySQL-based function namespace manager that manages\n+catalog ``example``, administrator needs to first have a running MySQL\n+server. Suppose the MySQL server can be reached at ``localhost:1080``,\n+add a file ``etc/function-namespace/example.properties`` with the\n+following contents::\n+\n+    function-namespace-manager.name=mysql\n+    database-url=localhost:1080\n+    function-namespaces-table-name=example_function_namespaces\n+    functions-table-name=example_sql_functions\n+\n+When Presto first starts with the above MySQL function namespace\n+manager configuration, two MySQL tables will be created if they do\n+not exist.\n+\n+- ``example_function_namespaces`` stores function namespaces of\n+  the catalog ``example``.\n+- ``example_sql_functions`` stores SQL-invoked functions of the\n+  catalog ``example``.\n+\n+If multiple function namespace managers are instantiated, they may use\n+the same set of tables, or different tables / MySQL databases.\n+\n+To create a new function namespace, insert into the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ1MTQ3NA=="}, "originalCommit": {"oid": "55c94f60b1a186ac569c5df68736f9defdc85034"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYwMzg5MQ==", "bodyText": "The section above states it:\nIf multiple function namespace managers are instantiated, they may use\nthe same set of tables, or different tables / MySQL databases.", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376603891", "createdAt": "2020-02-07T20:57:22Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "diffHunk": "@@ -0,0 +1,76 @@\n+===========================\n+Function Namespace Managers\n+===========================\n+\n+.. warning::\n+\n+    This is an experimental feature being actively developed. The way\n+    Function Namespace Managers are configured might be changed.\n+\n+Function namespace managers support storing and retrieving user-defined\n+functions with a persistent storage, allowing users to create, alter,\n+and delete functions, as well as to reference them within queries.\n+\n+Function Namespace\n+------------------\n+\n+A function namespace is a catalog-schema name (i.e. ``example.test``)\n+in which each function can be uniquely identified by its signature,\n+that is, its name and parameter type list.\n+\n+The function namespace, such as ``example.test``, is not a full-fledged\n+schema as it does not support storing tables and views, but only\n+functions.\n+\n+Each instance of function namespace manager manages a catalog. Creating\n+and managing schema in those catalogs are not supported.\n+\n+Configuration\n+-------------\n+\n+Presto provides a MySQL-based function namespace manager. It is\n+pluggable and can be configured by an administrator.\n+\n+To instantiate a MySQL-based function namespace manager that manages\n+catalog ``example``, administrator needs to first have a running MySQL\n+server. Suppose the MySQL server can be reached at ``localhost:1080``,\n+add a file ``etc/function-namespace/example.properties`` with the\n+following contents::\n+\n+    function-namespace-manager.name=mysql\n+    database-url=localhost:1080\n+    function-namespaces-table-name=example_function_namespaces\n+    functions-table-name=example_sql_functions\n+\n+When Presto first starts with the above MySQL function namespace\n+manager configuration, two MySQL tables will be created if they do\n+not exist.\n+\n+- ``example_function_namespaces`` stores function namespaces of\n+  the catalog ``example``.\n+- ``example_sql_functions`` stores SQL-invoked functions of the\n+  catalog ``example``.\n+\n+If multiple function namespace managers are instantiated, they may use\n+the same set of tables, or different tables / MySQL databases.\n+\n+To create a new function namespace, insert into the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ1MTQ3NA=="}, "originalCommit": {"oid": "55c94f60b1a186ac569c5df68736f9defdc85034"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYwNjY0OA==", "bodyText": "Multiple function namespace managers can be instantiated by placing\nmultiple properties files under ``etc/function-namespace``. They\nmay use the same MySQL tables, or different tables / databases. If the\nsame MySQL table are used by multiple function namespace managers,\neach manager will only create and interact with entries of the catalog\nto which it binds.", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376606648", "createdAt": "2020-02-07T21:04:12Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "diffHunk": "@@ -0,0 +1,76 @@\n+===========================\n+Function Namespace Managers\n+===========================\n+\n+.. warning::\n+\n+    This is an experimental feature being actively developed. The way\n+    Function Namespace Managers are configured might be changed.\n+\n+Function namespace managers support storing and retrieving user-defined\n+functions with a persistent storage, allowing users to create, alter,\n+and delete functions, as well as to reference them within queries.\n+\n+Function Namespace\n+------------------\n+\n+A function namespace is a catalog-schema name (i.e. ``example.test``)\n+in which each function can be uniquely identified by its signature,\n+that is, its name and parameter type list.\n+\n+The function namespace, such as ``example.test``, is not a full-fledged\n+schema as it does not support storing tables and views, but only\n+functions.\n+\n+Each instance of function namespace manager manages a catalog. Creating\n+and managing schema in those catalogs are not supported.\n+\n+Configuration\n+-------------\n+\n+Presto provides a MySQL-based function namespace manager. It is\n+pluggable and can be configured by an administrator.\n+\n+To instantiate a MySQL-based function namespace manager that manages\n+catalog ``example``, administrator needs to first have a running MySQL\n+server. Suppose the MySQL server can be reached at ``localhost:1080``,\n+add a file ``etc/function-namespace/example.properties`` with the\n+following contents::\n+\n+    function-namespace-manager.name=mysql\n+    database-url=localhost:1080\n+    function-namespaces-table-name=example_function_namespaces\n+    functions-table-name=example_sql_functions\n+\n+When Presto first starts with the above MySQL function namespace\n+manager configuration, two MySQL tables will be created if they do\n+not exist.\n+\n+- ``example_function_namespaces`` stores function namespaces of\n+  the catalog ``example``.\n+- ``example_sql_functions`` stores SQL-invoked functions of the\n+  catalog ``example``.\n+\n+If multiple function namespace managers are instantiated, they may use\n+the same set of tables, or different tables / MySQL databases.\n+\n+To create a new function namespace, insert into the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ1MTQ3NA=="}, "originalCommit": {"oid": "55c94f60b1a186ac569c5df68736f9defdc85034"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODQ1OTMxOnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/sql/alter-function.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNTozMDoyOFrOFnA13Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNTozMDoyOFrOFnA13Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ1MjU3Mw==", "bodyText": "nit: might -> can", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376452573", "createdAt": "2020-02-07T15:30:28Z", "author": {"login": "rschlussel"}, "path": "presto-docs/src/main/sphinx/sql/alter-function.rst", "diffHunk": "@@ -0,0 +1,49 @@\n+==============\n+ALTER FUNCTION\n+==============\n+\n+Synopsis\n+--------\n+\n+.. code-block:: none\n+\n+    ALTER FUNCTION qualified_function_name [ ( parameter_type[, ...] ) ]\n+    RETURNS NULL ON NULL INPUT | CALLED ON NULL INPUT\n+\n+\n+Description\n+-----------\n+\n+Alter the definition of an existing function.\n+\n+Parameter type list must be specified if multiple signatures exist\n+for the specified function name. Otherwise, the query would fail.\n+\n+If exactly one signature exists for the specified function name,\n+parameter type list might be omitted.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55c94f60b1a186ac569c5df68736f9defdc85034"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODQ2MDQwOnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/sql/alter-function.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNTozMDo0NlrOFnA2kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNTozMDo0NlrOFnA2kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ1Mjc1Mg==", "bodyText": "nit: remove Otherwise the query would fail", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376452752", "createdAt": "2020-02-07T15:30:46Z", "author": {"login": "rschlussel"}, "path": "presto-docs/src/main/sphinx/sql/alter-function.rst", "diffHunk": "@@ -0,0 +1,49 @@\n+==============\n+ALTER FUNCTION\n+==============\n+\n+Synopsis\n+--------\n+\n+.. code-block:: none\n+\n+    ALTER FUNCTION qualified_function_name [ ( parameter_type[, ...] ) ]\n+    RETURNS NULL ON NULL INPUT | CALLED ON NULL INPUT\n+\n+\n+Description\n+-----------\n+\n+Alter the definition of an existing function.\n+\n+Parameter type list must be specified if multiple signatures exist\n+for the specified function name. Otherwise, the query would fail.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55c94f60b1a186ac569c5df68736f9defdc85034"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODQ2Njc1OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/sql/alter-function.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNTozMjozMVrOFnA6cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNTozMjozMVrOFnA6cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ1Mzc0NA==", "bodyText": "Maybe say that right now only modifying the null-call clause is supported.  Otherwise it's pretty surprising as a user to get to the end of this documentation and discover that mostly you can't modify the function.", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376453744", "createdAt": "2020-02-07T15:32:31Z", "author": {"login": "rschlussel"}, "path": "presto-docs/src/main/sphinx/sql/alter-function.rst", "diffHunk": "@@ -0,0 +1,49 @@\n+==============\n+ALTER FUNCTION\n+==============\n+\n+Synopsis\n+--------\n+\n+.. code-block:: none\n+\n+    ALTER FUNCTION qualified_function_name [ ( parameter_type[, ...] ) ]\n+    RETURNS NULL ON NULL INPUT | CALLED ON NULL INPUT\n+\n+\n+Description\n+-----------\n+\n+Alter the definition of an existing function.\n+\n+Parameter type list must be specified if multiple signatures exist\n+for the specified function name. Otherwise, the query would fail.\n+\n+If exactly one signature exists for the specified function name,\n+parameter type list might be omitted.\n+\n+A subset of routine characteristics, as defined in", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55c94f60b1a186ac569c5df68736f9defdc85034"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODQ3NzgzOnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/sql/create-function.rst", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNTozNTozNVrOFnBBUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMTo0NTo0N1rOFnLNiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ1NTUwNA==", "bodyText": "For all of these, what other (non-default) options are supported", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376455504", "createdAt": "2020-02-07T15:35:35Z", "author": {"login": "rschlussel"}, "path": "presto-docs/src/main/sphinx/sql/create-function.rst", "diffHunk": "@@ -0,0 +1,84 @@\n+===============\n+CREATE FUNCTION\n+===============\n+\n+Synopsis\n+--------\n+\n+.. code-block:: none\n+\n+    CREATE [ OR REPLACE ] FUNCTION\n+    qualified_function_name (\n+      parameter_name parameter_type\n+      [, ...]\n+    )\n+    RETURNS return_type\n+    [ COMMENT function_description ]\n+    [ LANGUAGE language ]\n+    [ DETERMINISTIC | NOT DETERMINISTIC ]\n+    [ RETURNS NULL ON NULL INPUT | CALLED ON NULL INPUT ]\n+    [ RETURN expression ]\n+\n+\n+Description\n+-----------\n+\n+Create a new function with the specified definition.\n+\n+Each function is uniquely identified by its qualified function name\n+and its parameter type list. ``qualified_function_name`` needs to be in\n+the format of ``catalog.schema.function_name``.\n+\n+To create a function, the function namespace as identified by\n+``catalog.schema`` needs to managed by a\n+:doc:`/admin/function-namespace-managers`.\n+\n+The optional ``OR REPLACE`` clause causes the query to quietly replace\n+the existing function if a function with the identical signature (function\n+name with parameter type list) exists.\n+\n+The ``return_type`` needs to match the actual type of the routine body\n+``expression``, without performing type coercion.\n+\n+A set of routine characteristics can be specified to decorate the\n+function and specify its behavior. Each kind of routine\n+characteristic can be specified at most once.\n+\n+============================ ======================== ================================================================\n+Routine Characteristic       Default Value            Description", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55c94f60b1a186ac569c5df68736f9defdc85034"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYyMjQ3NQ==", "bodyText": "The other values are available in the Synopsis section. Placing them in the table may jeopardize readability.", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376622475", "createdAt": "2020-02-07T21:45:47Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/sql/create-function.rst", "diffHunk": "@@ -0,0 +1,84 @@\n+===============\n+CREATE FUNCTION\n+===============\n+\n+Synopsis\n+--------\n+\n+.. code-block:: none\n+\n+    CREATE [ OR REPLACE ] FUNCTION\n+    qualified_function_name (\n+      parameter_name parameter_type\n+      [, ...]\n+    )\n+    RETURNS return_type\n+    [ COMMENT function_description ]\n+    [ LANGUAGE language ]\n+    [ DETERMINISTIC | NOT DETERMINISTIC ]\n+    [ RETURNS NULL ON NULL INPUT | CALLED ON NULL INPUT ]\n+    [ RETURN expression ]\n+\n+\n+Description\n+-----------\n+\n+Create a new function with the specified definition.\n+\n+Each function is uniquely identified by its qualified function name\n+and its parameter type list. ``qualified_function_name`` needs to be in\n+the format of ``catalog.schema.function_name``.\n+\n+To create a function, the function namespace as identified by\n+``catalog.schema`` needs to managed by a\n+:doc:`/admin/function-namespace-managers`.\n+\n+The optional ``OR REPLACE`` clause causes the query to quietly replace\n+the existing function if a function with the identical signature (function\n+name with parameter type list) exists.\n+\n+The ``return_type`` needs to match the actual type of the routine body\n+``expression``, without performing type coercion.\n+\n+A set of routine characteristics can be specified to decorate the\n+function and specify its behavior. Each kind of routine\n+characteristic can be specified at most once.\n+\n+============================ ======================== ================================================================\n+Routine Characteristic       Default Value            Description", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ1NTUwNA=="}, "originalCommit": {"oid": "55c94f60b1a186ac569c5df68736f9defdc85034"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODQ3OTk5OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/sql/drop-function.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNTozNjowOFrOFnBClg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNTozNjowOFrOFnBClg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ1NTgzMA==", "bodyText": "i think you mean IF EXISTS clause", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376455830", "createdAt": "2020-02-07T15:36:08Z", "author": {"login": "rschlussel"}, "path": "presto-docs/src/main/sphinx/sql/drop-function.rst", "diffHunk": "@@ -0,0 +1,43 @@\n+=============\n+DROP FUNCTION\n+=============\n+\n+Synopsis\n+--------\n+\n+.. code-block:: none\n+\n+    DROP FUNCTION [ IF EXISTS ] qualified_function_name [ ( parameter_type[, ...] ) ]\n+\n+\n+Description\n+-----------\n+\n+Drop an existing function.\n+\n+The optional ``OR REPLACE`` clause causes the ``NOT_FOUND`` error", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55c94f60b1a186ac569c5df68736f9defdc85034"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODgzNDkyOnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzoyNjo1OVrOFnEg9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzozOTo1M1rOFnE2aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUxMjc1OA==", "bodyText": "Nit: I think you mean e.g. and not I.e.", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376512758", "createdAt": "2020-02-07T17:26:59Z", "author": {"login": "sachdevs"}, "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "diffHunk": "@@ -0,0 +1,78 @@\n+===========================\n+Function Namespace Managers\n+===========================\n+\n+.. warning::\n+\n+    This is an experimental feature being actively developed. The way\n+    Function Namespace Managers are configured might be changed.\n+\n+Function namespace managers support storing and retrieving user-defined\n+functions with a persistent storage, allowing users to create, alter,\n+and delete functions, as well as to reference them within queries.\n+\n+Function Namespace\n+------------------\n+\n+A function namespace is a catalog-schema name (i.e. ``example.test``)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a45ced30c4226fb438371ae3222f9694e7f3baf5"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUxODI1MQ==", "bodyText": "Instead of saying catalog-schema it may make more sense to use the same syntax as your example to be explicit like catalog.schema", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376518251", "createdAt": "2020-02-07T17:39:53Z", "author": {"login": "sachdevs"}, "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "diffHunk": "@@ -0,0 +1,78 @@\n+===========================\n+Function Namespace Managers\n+===========================\n+\n+.. warning::\n+\n+    This is an experimental feature being actively developed. The way\n+    Function Namespace Managers are configured might be changed.\n+\n+Function namespace managers support storing and retrieving user-defined\n+functions with a persistent storage, allowing users to create, alter,\n+and delete functions, as well as to reference them within queries.\n+\n+Function Namespace\n+------------------\n+\n+A function namespace is a catalog-schema name (i.e. ``example.test``)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUxMjc1OA=="}, "originalCommit": {"oid": "a45ced30c4226fb438371ae3222f9694e7f3baf5"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODg0NzQ5OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzozMTozM1rOFnEo3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzozMTozM1rOFnEo3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUxNDc4Mw==", "bodyText": "I had to read this a couple times to clarify. Maybe say that: a function namespace can be thought of as a schema for storing functions. However, it is not a full fledged schema as it does not support....", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376514783", "createdAt": "2020-02-07T17:31:33Z", "author": {"login": "sachdevs"}, "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "diffHunk": "@@ -0,0 +1,78 @@\n+===========================\n+Function Namespace Managers\n+===========================\n+\n+.. warning::\n+\n+    This is an experimental feature being actively developed. The way\n+    Function Namespace Managers are configured might be changed.\n+\n+Function namespace managers support storing and retrieving user-defined\n+functions with a persistent storage, allowing users to create, alter,\n+and delete functions, as well as to reference them within queries.\n+\n+Function Namespace\n+------------------\n+\n+A function namespace is a catalog-schema name (i.e. ``example.test``)\n+in which each function can be uniquely identified by its name and\n+parameter type list.\n+\n+A function namespace, such as ``example.test``, is not a full-fledged", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a45ced30c4226fb438371ae3222f9694e7f3baf5"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODg1Nzk0OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzozNToyNVrOFnEvSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMTo0MDowM1rOFnLFAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUxNjQyNw==", "bodyText": "This was unclear to me. Does this simply mean that multiple function namespace managers can be configured to use the same tables?", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376516427", "createdAt": "2020-02-07T17:35:25Z", "author": {"login": "sachdevs"}, "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "diffHunk": "@@ -0,0 +1,78 @@\n+===========================\n+Function Namespace Managers\n+===========================\n+\n+.. warning::\n+\n+    This is an experimental feature being actively developed. The way\n+    Function Namespace Managers are configured might be changed.\n+\n+Function namespace managers support storing and retrieving user-defined\n+functions with a persistent storage, allowing users to create, alter,\n+and delete functions, as well as to reference them within queries.\n+\n+Function Namespace\n+------------------\n+\n+A function namespace is a catalog-schema name (i.e. ``example.test``)\n+in which each function can be uniquely identified by its name and\n+parameter type list.\n+\n+A function namespace, such as ``example.test``, is not a full-fledged\n+schema as it does not support storing tables and views, but only\n+functions.\n+\n+Each instance of function namespace manager manages a catalog. Creating\n+and managing schema in those catalogs are not supported.\n+\n+\n+Configuration\n+-------------\n+\n+Presto provides a MySQL-based function namespace manager\n+implementation.\n+\n+To instantiate a MySQL-based function namespace manager that manages\n+catalog ``example``, administrator needs to first have a running MySQL\n+server. Suppose the MySQL server can be reached at ``localhost:1080``,\n+add a file ``etc/function-namespace/example.properties`` with the\n+following contents::\n+\n+    function-namespace-manager.name=mysql\n+    database-url=localhost:1080\n+    function-namespaces-table-name=example_function_namespaces\n+    functions-table-name=example_sql_functions\n+\n+When Presto first starts with the above MySQL function namespace\n+manager configuration, two MySQL tables will be created if they do\n+not exist.\n+\n+- ``example_function_namespaces`` stores function namespaces of\n+  the catalog ``example``.\n+- ``example_sql_functions`` stores SQL-invoked functions of the\n+  catalog ``example``.\n+\n+If multiple function namespace managers are instantiated, they may use", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a45ced30c4226fb438371ae3222f9694e7f3baf5"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYyMDI4OQ==", "bodyText": "Yes. Rewrote into\nMultiple function namespace managers can be instantiated by placing\nmultiple properties files under ``etc/function-namespace``. They\nmay be configured to use the same tables. If so, each manager will\nonly create and interact with entries of the catalog to which it binds.", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376620289", "createdAt": "2020-02-07T21:40:03Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "diffHunk": "@@ -0,0 +1,78 @@\n+===========================\n+Function Namespace Managers\n+===========================\n+\n+.. warning::\n+\n+    This is an experimental feature being actively developed. The way\n+    Function Namespace Managers are configured might be changed.\n+\n+Function namespace managers support storing and retrieving user-defined\n+functions with a persistent storage, allowing users to create, alter,\n+and delete functions, as well as to reference them within queries.\n+\n+Function Namespace\n+------------------\n+\n+A function namespace is a catalog-schema name (i.e. ``example.test``)\n+in which each function can be uniquely identified by its name and\n+parameter type list.\n+\n+A function namespace, such as ``example.test``, is not a full-fledged\n+schema as it does not support storing tables and views, but only\n+functions.\n+\n+Each instance of function namespace manager manages a catalog. Creating\n+and managing schema in those catalogs are not supported.\n+\n+\n+Configuration\n+-------------\n+\n+Presto provides a MySQL-based function namespace manager\n+implementation.\n+\n+To instantiate a MySQL-based function namespace manager that manages\n+catalog ``example``, administrator needs to first have a running MySQL\n+server. Suppose the MySQL server can be reached at ``localhost:1080``,\n+add a file ``etc/function-namespace/example.properties`` with the\n+following contents::\n+\n+    function-namespace-manager.name=mysql\n+    database-url=localhost:1080\n+    function-namespaces-table-name=example_function_namespaces\n+    functions-table-name=example_sql_functions\n+\n+When Presto first starts with the above MySQL function namespace\n+manager configuration, two MySQL tables will be created if they do\n+not exist.\n+\n+- ``example_function_namespaces`` stores function namespaces of\n+  the catalog ``example``.\n+- ``example_sql_functions`` stores SQL-invoked functions of the\n+  catalog ``example``.\n+\n+If multiple function namespace managers are instantiated, they may use", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUxNjQyNw=="}, "originalCommit": {"oid": "a45ced30c4226fb438371ae3222f9694e7f3baf5"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyOTU2MzI4OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMjowNjoxNlrOFnLp6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMzowMzowNFrOFnMw2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYyOTczNg==", "bodyText": "\"executing functions\" is not new and it's not something \"allowed\" by function namespace managers.", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376629736", "createdAt": "2020-02-07T22:06:16Z", "author": {"login": "rongrong"}, "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "diffHunk": "@@ -0,0 +1,88 @@\n+===========================\n+Function Namespace Managers\n+===========================\n+\n+.. warning::\n+\n+    This is an experimental feature being actively developed. The way\n+    Function Namespace Managers are configured might be changed.\n+\n+Function namespace managers support storing and retrieving SQL\n+functions, allowing Presto engine to perform actions such as creating,\n+altering, deleting, and executing functions.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ff467cb52349f268d8cd1b96689a7af0b9c04b7"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY0MjI1OA==", "bodyText": "I intend to say \"resolving functions\"", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376642258", "createdAt": "2020-02-07T22:44:46Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "diffHunk": "@@ -0,0 +1,88 @@\n+===========================\n+Function Namespace Managers\n+===========================\n+\n+.. warning::\n+\n+    This is an experimental feature being actively developed. The way\n+    Function Namespace Managers are configured might be changed.\n+\n+Function namespace managers support storing and retrieving SQL\n+functions, allowing Presto engine to perform actions such as creating,\n+altering, deleting, and executing functions.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYyOTczNg=="}, "originalCommit": {"oid": "1ff467cb52349f268d8cd1b96689a7af0b9c04b7"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY0Nzg5Nw==", "bodyText": "resolving function is also not introduced by function namespace manager though.", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376647897", "createdAt": "2020-02-07T23:03:04Z", "author": {"login": "rongrong"}, "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "diffHunk": "@@ -0,0 +1,88 @@\n+===========================\n+Function Namespace Managers\n+===========================\n+\n+.. warning::\n+\n+    This is an experimental feature being actively developed. The way\n+    Function Namespace Managers are configured might be changed.\n+\n+Function namespace managers support storing and retrieving SQL\n+functions, allowing Presto engine to perform actions such as creating,\n+altering, deleting, and executing functions.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYyOTczNg=="}, "originalCommit": {"oid": "1ff467cb52349f268d8cd1b96689a7af0b9c04b7"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyOTU2ODAzOnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMjowODoyMlrOFnLsog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMjo0OTozOFrOFnMgmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYzMDQzNA==", "bodyText": "Introduce the concept of \"qualified function name first\". A qualified function name is a .... Each Presto function, whether ......", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376630434", "createdAt": "2020-02-07T22:08:22Z", "author": {"login": "rongrong"}, "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "diffHunk": "@@ -0,0 +1,88 @@\n+===========================\n+Function Namespace Managers\n+===========================\n+\n+.. warning::\n+\n+    This is an experimental feature being actively developed. The way\n+    Function Namespace Managers are configured might be changed.\n+\n+Function namespace managers support storing and retrieving SQL\n+functions, allowing Presto engine to perform actions such as creating,\n+altering, deleting, and executing functions.\n+\n+A function namespace is in the format of ``catalog.schema`` (e.g.\n+``example.test``). It can be thought of as a schema for storing\n+functions. However, it is not a full fledged schema as it does not\n+support storing tables and views, but only functions.\n+\n+Each Presto function, whether built-in or user-defined, resides in", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ff467cb52349f268d8cd1b96689a7af0b9c04b7"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYzNTYyOQ==", "bodyText": "Should we Italy the concepts like function namespace manager, function namespace, qualified function name? What's the convention?", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376635629", "createdAt": "2020-02-07T22:22:48Z", "author": {"login": "rongrong"}, "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "diffHunk": "@@ -0,0 +1,88 @@\n+===========================\n+Function Namespace Managers\n+===========================\n+\n+.. warning::\n+\n+    This is an experimental feature being actively developed. The way\n+    Function Namespace Managers are configured might be changed.\n+\n+Function namespace managers support storing and retrieving SQL\n+functions, allowing Presto engine to perform actions such as creating,\n+altering, deleting, and executing functions.\n+\n+A function namespace is in the format of ``catalog.schema`` (e.g.\n+``example.test``). It can be thought of as a schema for storing\n+functions. However, it is not a full fledged schema as it does not\n+support storing tables and views, but only functions.\n+\n+Each Presto function, whether built-in or user-defined, resides in", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYzMDQzNA=="}, "originalCommit": {"oid": "1ff467cb52349f268d8cd1b96689a7af0b9c04b7"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY0MzczOQ==", "bodyText": "I don't see those kinds of formatting be used in presto-docs.", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376643739", "createdAt": "2020-02-07T22:49:38Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "diffHunk": "@@ -0,0 +1,88 @@\n+===========================\n+Function Namespace Managers\n+===========================\n+\n+.. warning::\n+\n+    This is an experimental feature being actively developed. The way\n+    Function Namespace Managers are configured might be changed.\n+\n+Function namespace managers support storing and retrieving SQL\n+functions, allowing Presto engine to perform actions such as creating,\n+altering, deleting, and executing functions.\n+\n+A function namespace is in the format of ``catalog.schema`` (e.g.\n+``example.test``). It can be thought of as a schema for storing\n+functions. However, it is not a full fledged schema as it does not\n+support storing tables and views, but only functions.\n+\n+Each Presto function, whether built-in or user-defined, resides in", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYzMDQzNA=="}, "originalCommit": {"oid": "1ff467cb52349f268d8cd1b96689a7af0b9c04b7"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyOTY3NDY2OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMjo1ODo0OFrOFnMruw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMjo1ODo0OFrOFnMruw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY0NjU4Nw==", "bodyText": "the Presto engine", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376646587", "createdAt": "2020-02-07T22:58:48Z", "author": {"login": "sachdevs"}, "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "diffHunk": "@@ -0,0 +1,92 @@\n+===========================\n+Function Namespace Managers\n+===========================\n+\n+.. warning::\n+\n+    This is an experimental feature being actively developed. The way\n+    Function Namespace Managers are configured might be changed.\n+\n+Function namespace managers support storing and retrieving SQL\n+functions, allowing Presto engine to perform actions such as creating,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "975a5c92408102b9f397af790cabb9d5448e052b"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyOTY4NTA3OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMzowMzo0MFrOFnMxog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMzoyNzozNFrOFnNJwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY0ODA5OA==", "bodyText": "of a function namespace manager", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376648098", "createdAt": "2020-02-07T23:03:40Z", "author": {"login": "sachdevs"}, "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "diffHunk": "@@ -0,0 +1,93 @@\n+===========================\n+Function Namespace Managers\n+===========================\n+\n+.. warning::\n+\n+    This is an experimental feature being actively developed. The way\n+    Function Namespace Managers are configured might be changed.\n+\n+Function namespace managers support storing and retrieving SQL\n+functions, allowing Presto engine to perform actions such as creating,\n+altering, deleting, and resolving functions.\n+\n+A function namespace is in the format of ``catalog.schema`` (e.g.\n+``example.test``). It can be thought of as a schema for storing\n+functions. However, it is not a full fledged schema as it does not\n+support storing tables and views, but only functions.\n+\n+Each Presto function, whether built-in or user-defined, resides in\n+a function namespace. All built-in functions reside in the\n+``presto.default`` function namespace. The qualified function name of\n+a function is the function namespace in which it reside followed by\n+its function name (e.g. ``example.test.func``). Built-in functions can\n+be referenced in queries with their function namespaces omitted, while\n+user-defined functions needs to be referenced by its qualified function\n+name. A function is uniquely identified by its qualified function name\n+and parameter type list.\n+\n+Each instance of function namespace manager binds to a catalog name", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "177bd36f94822b6267307a9b29f1654048c610a2"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY1NDI3Mw==", "bodyText": "When we're saying a function namespace manager, we're referencing an instance, not a type of function namespace manager. So, maybe, I should just say each Each function namespace manager....", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376654273", "createdAt": "2020-02-07T23:27:34Z", "author": {"login": "caithagoras"}, "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "diffHunk": "@@ -0,0 +1,93 @@\n+===========================\n+Function Namespace Managers\n+===========================\n+\n+.. warning::\n+\n+    This is an experimental feature being actively developed. The way\n+    Function Namespace Managers are configured might be changed.\n+\n+Function namespace managers support storing and retrieving SQL\n+functions, allowing Presto engine to perform actions such as creating,\n+altering, deleting, and resolving functions.\n+\n+A function namespace is in the format of ``catalog.schema`` (e.g.\n+``example.test``). It can be thought of as a schema for storing\n+functions. However, it is not a full fledged schema as it does not\n+support storing tables and views, but only functions.\n+\n+Each Presto function, whether built-in or user-defined, resides in\n+a function namespace. All built-in functions reside in the\n+``presto.default`` function namespace. The qualified function name of\n+a function is the function namespace in which it reside followed by\n+its function name (e.g. ``example.test.func``). Built-in functions can\n+be referenced in queries with their function namespaces omitted, while\n+user-defined functions needs to be referenced by its qualified function\n+name. A function is uniquely identified by its qualified function name\n+and parameter type list.\n+\n+Each instance of function namespace manager binds to a catalog name", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY0ODA5OA=="}, "originalCommit": {"oid": "177bd36f94822b6267307a9b29f1654048c610a2"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyOTY5NTA4OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMzowODozN1rOFnM3hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMzowODozN1rOFnM3hQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY0OTYwNQ==", "bodyText": "I originally did not understand what MySQL-based implementation meant at first (until I read the release note). Maybe reword this to Presto currently stores all function namespace manager related information in MySQL.", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376649605", "createdAt": "2020-02-07T23:08:37Z", "author": {"login": "sachdevs"}, "path": "presto-docs/src/main/sphinx/admin/function-namespace-managers.rst", "diffHunk": "@@ -0,0 +1,93 @@\n+===========================\n+Function Namespace Managers\n+===========================\n+\n+.. warning::\n+\n+    This is an experimental feature being actively developed. The way\n+    Function Namespace Managers are configured might be changed.\n+\n+Function namespace managers support storing and retrieving SQL\n+functions, allowing Presto engine to perform actions such as creating,\n+altering, deleting, and resolving functions.\n+\n+A function namespace is in the format of ``catalog.schema`` (e.g.\n+``example.test``). It can be thought of as a schema for storing\n+functions. However, it is not a full fledged schema as it does not\n+support storing tables and views, but only functions.\n+\n+Each Presto function, whether built-in or user-defined, resides in\n+a function namespace. All built-in functions reside in the\n+``presto.default`` function namespace. The qualified function name of\n+a function is the function namespace in which it reside followed by\n+its function name (e.g. ``example.test.func``). Built-in functions can\n+be referenced in queries with their function namespaces omitted, while\n+user-defined functions needs to be referenced by its qualified function\n+name. A function is uniquely identified by its qualified function name\n+and parameter type list.\n+\n+Each instance of function namespace manager binds to a catalog name\n+and manages all functions within that catalog. Using the catalog\n+name of an existing connector is discouraged, as the behavior is not\n+defined nor tested, and will be disallowed in the future.\n+\n+Currently, those catalog names do not correspond to real catalogs.\n+They cannot be specified as the catalog in a session, nor do they\n+support :doc:`/sql/create-schema`, :doc:`/sql/alter-schema`,\n+:doc:`/sql/drop-schema`, or :doc:`/sql/show-schemas`. Instead,\n+namespaces can be added using the methods described below.\n+\n+\n+Configuration\n+-------------\n+\n+Presto provides a MySQL-based function namespace manager", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "177bd36f94822b6267307a9b29f1654048c610a2"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyOTcwNzgyOnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/sql/create-function.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMzoxNjoyM1rOFnM_ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMzoxNjoyM1rOFnM_ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY1MTYyMQ==", "bodyText": "In order to create a function, the corresponding function namespace (in the format catalog.schema) must first be managed by a function namespace manager", "url": "https://github.com/prestodb/presto/pull/13972#discussion_r376651621", "createdAt": "2020-02-07T23:16:23Z", "author": {"login": "sachdevs"}, "path": "presto-docs/src/main/sphinx/sql/create-function.rst", "diffHunk": "@@ -0,0 +1,84 @@\n+===============\n+CREATE FUNCTION\n+===============\n+\n+Synopsis\n+--------\n+\n+.. code-block:: none\n+\n+    CREATE [ OR REPLACE ] FUNCTION\n+    qualified_function_name (\n+      parameter_name parameter_type\n+      [, ...]\n+    )\n+    RETURNS return_type\n+    [ COMMENT function_description ]\n+    [ LANGUAGE SQL ]\n+    [ DETERMINISTIC | NOT DETERMINISTIC ]\n+    [ RETURNS NULL ON NULL INPUT | CALLED ON NULL INPUT ]\n+    [ RETURN expression ]\n+\n+\n+Description\n+-----------\n+\n+Create a new function with the specified definition.\n+\n+Each function is uniquely identified by its qualified function name\n+and its parameter type list. ``qualified_function_name`` needs to be in\n+the format of ``catalog.schema.function_name``.\n+\n+To create a function, the function namespace as identified by", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "177bd36f94822b6267307a9b29f1654048c610a2"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3149, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}