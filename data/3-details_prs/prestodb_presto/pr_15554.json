{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ0NDQ2NjM1", "number": 15554, "title": "Add hive partition stats based optimization", "bodyText": "Test plan - Added unit test for HiveSplitManager. Will also run verifier against internal queries.\n== RELEASE NOTES ==\n\nSPI Changes\n* Change `ConnectorTableLayoutHandle#getIdentifier` to accept a new field `Optional<ConnectorSplit> split`\n\nHive Changes\n* Support partition stats based optimization, including partition pruning and column domain stripping for fragment result caching.", "createdAt": "2020-12-23T01:02:43Z", "url": "https://github.com/prestodb/presto/pull/15554", "merged": true, "mergeCommit": {"oid": "8974bf2508711d7683cd1ad21d76e76319edfd89"}, "closed": true, "closedAt": "2021-01-28T05:01:30Z", "author": {"login": "shixuan-fan"}, "timelineItems": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdpGpV3gBqjQxNDU2NTc3NDA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABd0aPN5gBqjQyNTg3MDYyOTU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "147865a61d9cb14968920fff8a4cdbc84231a2ca", "author": {"user": {"login": "shixuan-fan", "name": "Shixuan Fan"}}, "url": "https://github.com/prestodb/presto/commit/147865a61d9cb14968920fff8a4cdbc84231a2ca", "committedDate": "2020-12-23T01:00:23Z", "message": "Support partition pruning based on partition stats"}, "afterCommit": {"oid": "9adcf0773c4c0f05b85f21b9ed2088490cc947b0", "author": {"user": {"login": "shixuan-fan", "name": "Shixuan Fan"}}, "url": "https://github.com/prestodb/presto/commit/9adcf0773c4c0f05b85f21b9ed2088490cc947b0", "committedDate": "2020-12-23T22:12:32Z", "message": "Support partition pruning based on partition stats"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9adcf0773c4c0f05b85f21b9ed2088490cc947b0", "author": {"user": {"login": "shixuan-fan", "name": "Shixuan Fan"}}, "url": "https://github.com/prestodb/presto/commit/9adcf0773c4c0f05b85f21b9ed2088490cc947b0", "committedDate": "2020-12-23T22:12:32Z", "message": "Support partition pruning based on partition stats"}, "afterCommit": {"oid": "48981a7170994002640e8ae8c82b251341e44cd8", "author": {"user": {"login": "shixuan-fan", "name": "Shixuan Fan"}}, "url": "https://github.com/prestodb/presto/commit/48981a7170994002640e8ae8c82b251341e44cd8", "committedDate": "2021-01-06T22:52:19Z", "message": "Support column domain stripping based on partition stats"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "48981a7170994002640e8ae8c82b251341e44cd8", "author": {"user": {"login": "shixuan-fan", "name": "Shixuan Fan"}}, "url": "https://github.com/prestodb/presto/commit/48981a7170994002640e8ae8c82b251341e44cd8", "committedDate": "2021-01-06T22:52:19Z", "message": "Support column domain stripping based on partition stats"}, "afterCommit": {"oid": "e410abd8d420b268e338424278080339f381ada1", "author": {"user": {"login": "shixuan-fan", "name": "Shixuan Fan"}}, "url": "https://github.com/prestodb/presto/commit/e410abd8d420b268e338424278080339f381ada1", "committedDate": "2021-01-06T23:18:06Z", "message": "Support column domain stripping based on partition stats"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e410abd8d420b268e338424278080339f381ada1", "author": {"user": {"login": "shixuan-fan", "name": "Shixuan Fan"}}, "url": "https://github.com/prestodb/presto/commit/e410abd8d420b268e338424278080339f381ada1", "committedDate": "2021-01-06T23:18:06Z", "message": "Support column domain stripping based on partition stats"}, "afterCommit": {"oid": "0bb0a0f2225dbf7db1fd3eee1d2f4a06dd8e5872", "author": {"user": {"login": "shixuan-fan", "name": "Shixuan Fan"}}, "url": "https://github.com/prestodb/presto/commit/0bb0a0f2225dbf7db1fd3eee1d2f4a06dd8e5872", "committedDate": "2021-01-07T18:27:53Z", "message": "Support column domain stripping based on partition stats"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY1MDYxODQ0", "url": "https://github.com/prestodb/presto/pull/15554#pullrequestreview-565061844", "createdAt": "2021-01-11T04:08:49Z", "commit": {"oid": "7102927a4c9b62e168a2fa29241a43e70c15a952"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQwNDowODo0OVrOIQ_lVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQwNTo0NjoxNFrOIRDvjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDY4OTg3OQ==", "bodyText": "nit\npartitionNames.stream().map(name -> hivePartitionName(databaseName, tableName, name)).collect(toImmutableList());", "url": "https://github.com/prestodb/presto/pull/15554#discussion_r554689879", "createdAt": "2021-01-11T04:08:49Z", "author": {"login": "highker"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/CachingHiveMetastore.java", "diffHunk": "@@ -680,6 +702,57 @@ private void invalidateStalePartition(PartitionNameWithVersion partitionNameWith\n         return partitions.build();\n     }\n \n+    @Override\n+    public Map<String, Optional<PartitionWithStatistics>> getPartitionsWithStatisticsByNames(String databaseName, String tableName, List<String> partitionNames)\n+    {\n+        Iterable<HivePartitionName> names = transform(partitionNames, name -> HivePartitionName.hivePartitionName(databaseName, tableName, name));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7102927a4c9b62e168a2fa29241a43e70c15a952"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDcxNzE4Mw==", "bodyText": "This will lead to another RPC call. But I do see the existing getPartitionStatistics also has this, so I guess there is some light-weighted caching?", "url": "https://github.com/prestodb/presto/pull/15554#discussion_r554717183", "createdAt": "2021-01-11T04:48:19Z", "author": {"login": "highker"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/thrift/ThriftHiveMetastore.java", "diffHunk": "@@ -1163,6 +1164,45 @@ private void dropExtraColumnStatisticsAfterAlterPartition(\n         }\n     }\n \n+    @Override\n+    public List<MetastoreApiPartitionWithStatistics> getPartitionsWithStatisticsByNames(String databaseName, String tableName, List<String> partitionNames)\n+    {\n+        Table table = getTable(databaseName, tableName)\n+                .orElseThrow(() -> new TableNotFoundException(new SchemaTableName(databaseName, tableName)));\n+        List<String> dataColumns = table.getSd().getCols().stream()\n+                .map(FieldSchema::getName)\n+                .collect(toImmutableList());\n+        List<String> partitionColumns = table.getPartitionKeys().stream()\n+                .map(FieldSchema::getName)\n+                .collect(toImmutableList());\n+\n+        List<Partition> partitions = getPartitionsByNames(databaseName, tableName, partitionNames);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7102927a4c9b62e168a2fa29241a43e70c15a952"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDczNDk5Ng==", "bodyText": "Do we really need this class? This is what I'm thinking: highker@ba2800f", "url": "https://github.com/prestodb/presto/pull/15554#discussion_r554734996", "createdAt": "2021-01-11T05:14:24Z", "author": {"login": "highker"}, "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/MetastoreApiPartitionWithStatistics.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive.metastore;\n+\n+import static com.facebook.presto.hive.metastore.MetastoreUtil.toPartitionValues;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+public class MetastoreApiPartitionWithStatistics", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7102927a4c9b62e168a2fa29241a43e70c15a952"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDc1ODAzMQ==", "bodyText": "We can reuse our existing infra? highker@1a64f5b", "url": "https://github.com/prestodb/presto/pull/15554#discussion_r554758031", "createdAt": "2021-01-11T05:46:14Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitManager.java", "diffHunk": "@@ -496,6 +506,141 @@ public CounterStat getHighMemorySplitSource()\n         return concat(partitionBatches);\n     }\n \n+    private static PartitionBatchInfo getPartitionBatchInfo(\n+            ConnectorSession session,\n+            SemiTransactionalHiveMetastore metastore,\n+            SchemaTableName tableName,\n+            List<HivePartition> partitionBatch,\n+            Map<String, HiveColumnHandle> predicateColumns,\n+            Optional<Map<Subfield, Domain>> domains)\n+    {\n+        if (isPartitionStatsBasedOptimizationEnabled(session) && domains.isPresent()) {\n+            Map<String, Optional<PartitionWithStatistics>> batch = metastore.getPartitionsWithStatisticsByNames(\n+                    tableName.getSchemaName(),\n+                    tableName.getTableName(),\n+                    Lists.transform(partitionBatch, HivePartition::getPartitionId));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93a38a26942f0d7cd79154b64c808cad6b56eee3"}, "originalPosition": 128}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0bb0a0f2225dbf7db1fd3eee1d2f4a06dd8e5872", "author": {"user": {"login": "shixuan-fan", "name": "Shixuan Fan"}}, "url": "https://github.com/prestodb/presto/commit/0bb0a0f2225dbf7db1fd3eee1d2f4a06dd8e5872", "committedDate": "2021-01-07T18:27:53Z", "message": "Support column domain stripping based on partition stats"}, "afterCommit": {"oid": "fa5d86168597b24bab07a18ade623c43128fedcc", "author": {"user": {"login": "shixuan-fan", "name": "Shixuan Fan"}}, "url": "https://github.com/prestodb/presto/commit/fa5d86168597b24bab07a18ade623c43128fedcc", "committedDate": "2021-01-15T01:16:20Z", "message": "Support column domain stripping based on partition stats"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fa5d86168597b24bab07a18ade623c43128fedcc", "author": {"user": {"login": "shixuan-fan", "name": "Shixuan Fan"}}, "url": "https://github.com/prestodb/presto/commit/fa5d86168597b24bab07a18ade623c43128fedcc", "committedDate": "2021-01-15T01:16:20Z", "message": "Support column domain stripping based on partition stats"}, "afterCommit": {"oid": "be70bf53830c066f08d2da2b14020ac9e53b10a2", "author": {"user": {"login": "shixuan-fan", "name": "Shixuan Fan"}}, "url": "https://github.com/prestodb/presto/commit/be70bf53830c066f08d2da2b14020ac9e53b10a2", "committedDate": "2021-01-15T23:09:41Z", "message": "Support column domain stripping based on partition stats"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcyNjcyOTU4", "url": "https://github.com/prestodb/presto/pull/15554#pullrequestreview-572672958", "createdAt": "2021-01-20T21:40:35Z", "commit": {"oid": "d87f72ee709a3a5632103852acafa6fe5c91c1f1"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQyMTo0MDozNlrOIXUjLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwMDo1NjoyOFrOIXb0Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTMyNDg0NA==", "bodyText": "partitionStatisticsBasedPruningEnabled", "url": "https://github.com/prestodb/presto/pull/15554#discussion_r561324844", "createdAt": "2021-01-20T21:40:36Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveClientConfig.java", "diffHunk": "@@ -150,6 +150,7 @@\n     private int partitionStatisticsSampleSize = 100;\n     private boolean ignoreCorruptedStatistics;\n     private boolean collectColumnStatisticsOnWrite;\n+    private boolean partitionStatsBasedOptimizationEnabled;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d87f72ee709a3a5632103852acafa6fe5c91c1f1"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTM2NzkxMw==", "bodyText": "nit: columnStatistics", "url": "https://github.com/prestodb/presto/pull/15554#discussion_r561367913", "createdAt": "2021-01-20T23:09:56Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitManager.java", "diffHunk": "@@ -496,6 +506,149 @@ public CounterStat getHighMemorySplitSource()\n         return concat(partitionBatches);\n     }\n \n+    private static PartitionBatchInfo getPartitionBatchInfo(\n+            ConnectorSession session,\n+            SemiTransactionalHiveMetastore metastore,\n+            SchemaTableName tableName,\n+            List<HivePartition> partitionBatch,\n+            Map<String, HiveColumnHandle> predicateColumns,\n+            Optional<Map<Subfield, Domain>> domains)\n+    {\n+        if (isPartitionStatsBasedOptimizationEnabled(session) && domains.isPresent()) {\n+            Map<String, Optional<Partition>> partitions = metastore.getPartitionsByNames(\n+                    tableName.getSchemaName(),\n+                    tableName.getTableName(),\n+                    Lists.transform(partitionBatch, HivePartition::getPartitionId));\n+            Map<String, PartitionStatistics> partitionStatistics = metastore.getPartitionStatistics(\n+                    tableName.getSchemaName(),\n+                    tableName.getTableName(),\n+                    partitionBatch.stream()\n+                            .map(HivePartition::getPartitionId)\n+                            .collect(toImmutableSet()));\n+            ImmutableSet.Builder<String> prunedPartitionNamesBuilder = ImmutableSet.builder();\n+            ImmutableMap.Builder<String, Partition> partitionBuilder = ImmutableMap.builder();\n+            for (Map.Entry<String, Optional<Partition>> entry : partitions.entrySet()) {\n+                if (!entry.getValue().isPresent()) {\n+                    throw new PrestoException(HIVE_PARTITION_DROPPED_DURING_QUERY, \"Partition no longer exists: \" + entry.getKey());\n+                }\n+                boolean pruned = false;\n+                if (partitionStatistics.containsKey(entry.getKey())) {\n+                    Map<String, HiveColumnStatistics> columnStatsMap = partitionStatistics.get(entry.getKey()).getColumnStatistics();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d87f72ee709a3a5632103852acafa6fe5c91c1f1"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTQ0MzcxMg==", "bodyText": "Let's reuse MetastoreHiveStatisticsProvider's isRangeSupported and createRange helpers to make it very generic. We can also return DoubleRange instead of ValueSet of simplicity. Likely we can ignore or add TODO for non-numeric types.", "url": "https://github.com/prestodb/presto/pull/15554#discussion_r561443712", "createdAt": "2021-01-21T00:55:55Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitManager.java", "diffHunk": "@@ -496,6 +506,149 @@ public CounterStat getHighMemorySplitSource()\n         return concat(partitionBatches);\n     }\n \n+    private static PartitionBatchInfo getPartitionBatchInfo(\n+            ConnectorSession session,\n+            SemiTransactionalHiveMetastore metastore,\n+            SchemaTableName tableName,\n+            List<HivePartition> partitionBatch,\n+            Map<String, HiveColumnHandle> predicateColumns,\n+            Optional<Map<Subfield, Domain>> domains)\n+    {\n+        if (isPartitionStatsBasedOptimizationEnabled(session) && domains.isPresent()) {\n+            Map<String, Optional<Partition>> partitions = metastore.getPartitionsByNames(\n+                    tableName.getSchemaName(),\n+                    tableName.getTableName(),\n+                    Lists.transform(partitionBatch, HivePartition::getPartitionId));\n+            Map<String, PartitionStatistics> partitionStatistics = metastore.getPartitionStatistics(\n+                    tableName.getSchemaName(),\n+                    tableName.getTableName(),\n+                    partitionBatch.stream()\n+                            .map(HivePartition::getPartitionId)\n+                            .collect(toImmutableSet()));\n+            ImmutableSet.Builder<String> prunedPartitionNamesBuilder = ImmutableSet.builder();\n+            ImmutableMap.Builder<String, Partition> partitionBuilder = ImmutableMap.builder();\n+            for (Map.Entry<String, Optional<Partition>> entry : partitions.entrySet()) {\n+                if (!entry.getValue().isPresent()) {\n+                    throw new PrestoException(HIVE_PARTITION_DROPPED_DURING_QUERY, \"Partition no longer exists: \" + entry.getKey());\n+                }\n+                boolean pruned = false;\n+                if (partitionStatistics.containsKey(entry.getKey())) {\n+                    Map<String, HiveColumnStatistics> columnStatsMap = partitionStatistics.get(entry.getKey()).getColumnStatistics();\n+                    for (Map.Entry<String, HiveColumnHandle> predicateColumnEntry : predicateColumns.entrySet()) {\n+                        if (columnStatsMap.containsKey(predicateColumnEntry.getKey())) {\n+                            Optional<ValueSet> columnsStatsValueSet = getColumnStatsValueSet(columnStatsMap.get(predicateColumnEntry.getKey()), predicateColumnEntry.getValue().getHiveType());\n+                            if (columnsStatsValueSet.isPresent()) {\n+                                ValueSet columnPredicateValueSet = domains.get().get(new Subfield(predicateColumnEntry.getKey())).getValues();\n+                                if (!columnPredicateValueSet.overlaps(columnsStatsValueSet.get())) {\n+                                    pruned = true;\n+                                    break;\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+\n+                if (pruned) {\n+                    prunedPartitionNamesBuilder.add(entry.getKey());\n+                }\n+                else {\n+                    partitionBuilder.put(entry.getKey(), entry.getValue().get());\n+                }\n+            }\n+            return new PartitionBatchInfo(partitionBuilder.build(), prunedPartitionNamesBuilder.build());\n+        }\n+\n+        Map<String, Optional<Partition>> batch = metastore.getPartitionsByNames(\n+                tableName.getSchemaName(),\n+                tableName.getTableName(),\n+                Lists.transform(partitionBatch, HivePartition::getPartitionId));\n+        ImmutableMap.Builder<String, Partition> partitionBuilder = ImmutableMap.builder();\n+        for (Map.Entry<String, Optional<Partition>> entry : batch.entrySet()) {\n+            if (!entry.getValue().isPresent()) {\n+                throw new PrestoException(HIVE_PARTITION_DROPPED_DURING_QUERY, \"Partition no longer exists: \" + entry.getKey());\n+            }\n+            partitionBuilder.put(entry.getKey(), entry.getValue().get());\n+        }\n+        return new PartitionBatchInfo(partitionBuilder.build());\n+    }\n+\n+    private static Optional<ValueSet> getColumnStatsValueSet(HiveColumnStatistics statistics, HiveType hiveType)\n+    {\n+        // TODO: Support more types\n+        if (hiveType.equals(HIVE_BYTE) || hiveType.equals(HIVE_SHORT) || hiveType.equals(HIVE_INT) || hiveType.equals(HIVE_LONG)) {\n+            return getIntegerColumnStatsValueSet(statistics, hiveType);\n+        }\n+        else {\n+            return Optional.empty();\n+        }\n+    }\n+\n+    private static Optional<ValueSet> getIntegerColumnStatsValueSet(HiveColumnStatistics statistics, HiveType hiveType)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d87f72ee709a3a5632103852acafa6fe5c91c1f1"}, "originalPosition": 193}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTQ0MzkxNQ==", "bodyText": "Let's add simple translation to HiveTypeTranslator and add a round-trip test to it.", "url": "https://github.com/prestodb/presto/pull/15554#discussion_r561443915", "createdAt": "2021-01-21T00:56:28Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitManager.java", "diffHunk": "@@ -496,6 +506,149 @@ public CounterStat getHighMemorySplitSource()\n         return concat(partitionBatches);\n     }\n \n+    private static PartitionBatchInfo getPartitionBatchInfo(\n+            ConnectorSession session,\n+            SemiTransactionalHiveMetastore metastore,\n+            SchemaTableName tableName,\n+            List<HivePartition> partitionBatch,\n+            Map<String, HiveColumnHandle> predicateColumns,\n+            Optional<Map<Subfield, Domain>> domains)\n+    {\n+        if (isPartitionStatsBasedOptimizationEnabled(session) && domains.isPresent()) {\n+            Map<String, Optional<Partition>> partitions = metastore.getPartitionsByNames(\n+                    tableName.getSchemaName(),\n+                    tableName.getTableName(),\n+                    Lists.transform(partitionBatch, HivePartition::getPartitionId));\n+            Map<String, PartitionStatistics> partitionStatistics = metastore.getPartitionStatistics(\n+                    tableName.getSchemaName(),\n+                    tableName.getTableName(),\n+                    partitionBatch.stream()\n+                            .map(HivePartition::getPartitionId)\n+                            .collect(toImmutableSet()));\n+            ImmutableSet.Builder<String> prunedPartitionNamesBuilder = ImmutableSet.builder();\n+            ImmutableMap.Builder<String, Partition> partitionBuilder = ImmutableMap.builder();\n+            for (Map.Entry<String, Optional<Partition>> entry : partitions.entrySet()) {\n+                if (!entry.getValue().isPresent()) {\n+                    throw new PrestoException(HIVE_PARTITION_DROPPED_DURING_QUERY, \"Partition no longer exists: \" + entry.getKey());\n+                }\n+                boolean pruned = false;\n+                if (partitionStatistics.containsKey(entry.getKey())) {\n+                    Map<String, HiveColumnStatistics> columnStatsMap = partitionStatistics.get(entry.getKey()).getColumnStatistics();\n+                    for (Map.Entry<String, HiveColumnHandle> predicateColumnEntry : predicateColumns.entrySet()) {\n+                        if (columnStatsMap.containsKey(predicateColumnEntry.getKey())) {\n+                            Optional<ValueSet> columnsStatsValueSet = getColumnStatsValueSet(columnStatsMap.get(predicateColumnEntry.getKey()), predicateColumnEntry.getValue().getHiveType());\n+                            if (columnsStatsValueSet.isPresent()) {\n+                                ValueSet columnPredicateValueSet = domains.get().get(new Subfield(predicateColumnEntry.getKey())).getValues();\n+                                if (!columnPredicateValueSet.overlaps(columnsStatsValueSet.get())) {\n+                                    pruned = true;\n+                                    break;\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+\n+                if (pruned) {\n+                    prunedPartitionNamesBuilder.add(entry.getKey());\n+                }\n+                else {\n+                    partitionBuilder.put(entry.getKey(), entry.getValue().get());\n+                }\n+            }\n+            return new PartitionBatchInfo(partitionBuilder.build(), prunedPartitionNamesBuilder.build());\n+        }\n+\n+        Map<String, Optional<Partition>> batch = metastore.getPartitionsByNames(\n+                tableName.getSchemaName(),\n+                tableName.getTableName(),\n+                Lists.transform(partitionBatch, HivePartition::getPartitionId));\n+        ImmutableMap.Builder<String, Partition> partitionBuilder = ImmutableMap.builder();\n+        for (Map.Entry<String, Optional<Partition>> entry : batch.entrySet()) {\n+            if (!entry.getValue().isPresent()) {\n+                throw new PrestoException(HIVE_PARTITION_DROPPED_DURING_QUERY, \"Partition no longer exists: \" + entry.getKey());\n+            }\n+            partitionBuilder.put(entry.getKey(), entry.getValue().get());\n+        }\n+        return new PartitionBatchInfo(partitionBuilder.build());\n+    }\n+\n+    private static Optional<ValueSet> getColumnStatsValueSet(HiveColumnStatistics statistics, HiveType hiveType)\n+    {\n+        // TODO: Support more types\n+        if (hiveType.equals(HIVE_BYTE) || hiveType.equals(HIVE_SHORT) || hiveType.equals(HIVE_INT) || hiveType.equals(HIVE_LONG)) {\n+            return getIntegerColumnStatsValueSet(statistics, hiveType);\n+        }\n+        else {\n+            return Optional.empty();\n+        }\n+    }\n+\n+    private static Optional<ValueSet> getIntegerColumnStatsValueSet(HiveColumnStatistics statistics, HiveType hiveType)\n+    {\n+        if (!statistics.getIntegerStatistics().isPresent()) {\n+            return Optional.empty();\n+        }\n+\n+        IntegerStatistics hiveColumnStatistics = statistics.getIntegerStatistics().get();\n+        Type integerType;\n+        if (hiveType.equals(HIVE_BYTE)) {\n+            integerType = TINYINT;\n+        }\n+        else if (hiveType.equals(HIVE_SHORT)) {\n+            integerType = SMALLINT;\n+        }\n+        else if (hiveType.equals(HIVE_INT)) {\n+            integerType = INTEGER;\n+        }\n+        else if (hiveType.equals(HIVE_LONG)) {\n+            integerType = BIGINT;\n+        }\n+        else {\n+            throw new IllegalArgumentException(format(\"Expect integer hive type, but found: %s\", hiveType));\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d87f72ee709a3a5632103852acafa6fe5c91c1f1"}, "originalPosition": 215}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcyODU3MzEx", "url": "https://github.com/prestodb/presto/pull/15554#pullrequestreview-572857311", "createdAt": "2021-01-21T01:21:44Z", "commit": {"oid": "be70bf53830c066f08d2da2b14020ac9e53b10a2"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwMToyMTo0NVrOIXcVsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwMjoyNTozNFrOIXexfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTQ1MjQ2Ng==", "bodyText": "Let's add a comment to this field.", "url": "https://github.com/prestodb/presto/pull/15554#discussion_r561452466", "createdAt": "2021-01-21T01:21:45Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HivePartitionMetadata.java", "diffHunk": "@@ -27,17 +29,20 @@\n     private final HivePartition hivePartition;\n     private final Map<Integer, Column> partitionSchemaDifference;\n     private final Optional<EncryptionInformation> encryptionInformation;\n+    private final Set<ColumnHandle> redundantColumnDomains;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be70bf53830c066f08d2da2b14020ac9e53b10a2"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTQ1OTk3MA==", "bodyText": "If we use DoubleRange, we might need some transformation from Domain to it.", "url": "https://github.com/prestodb/presto/pull/15554#discussion_r561459970", "createdAt": "2021-01-21T01:44:34Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitManager.java", "diffHunk": "@@ -543,6 +555,9 @@ private static PartitionBatchInfo getPartitionBatchInfo(\n                                     pruned = true;\n                                     break;\n                                 }\n+                                if (columnPredicateValueSet.contains(columnsStatsValueSet.get())) {\n+                                    redundantSubfieldDomainsBuilder.add(predicateColumnEntry.getValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be70bf53830c066f08d2da2b14020ac9e53b10a2"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTQ5MjM1MQ==", "bodyText": "I think we can remove the if condition here. if we have isPartitionStatsBasedOptimizationEnabled(session), then we can create an empty map for partitionStatistics. Otherwise call getPartitionStatistics", "url": "https://github.com/prestodb/presto/pull/15554#discussion_r561492351", "createdAt": "2021-01-21T02:25:34Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitManager.java", "diffHunk": "@@ -496,6 +506,149 @@ public CounterStat getHighMemorySplitSource()\n         return concat(partitionBatches);\n     }\n \n+    private static PartitionBatchInfo getPartitionBatchInfo(\n+            ConnectorSession session,\n+            SemiTransactionalHiveMetastore metastore,\n+            SchemaTableName tableName,\n+            List<HivePartition> partitionBatch,\n+            Map<String, HiveColumnHandle> predicateColumns,\n+            Optional<Map<Subfield, Domain>> domains)\n+    {\n+        if (isPartitionStatsBasedOptimizationEnabled(session) && domains.isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d87f72ee709a3a5632103852acafa6fe5c91c1f1"}, "originalPosition": 124}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcyOTUxMDEx", "url": "https://github.com/prestodb/presto/pull/15554#pullrequestreview-572951011", "createdAt": "2021-01-21T03:10:08Z", "commit": {"oid": "be70bf53830c066f08d2da2b14020ac9e53b10a2"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwMzoxMDowOFrOIXhibA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwMzo0NToxOFrOIXjulw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTUzNzY0NA==", "bodyText": "While reviewing the 2nd commit, maybe it's better to model these objects asMap<String, PartitionSplitInfo>, where PartitionSplitInfo (or whatever a better name) is an encapsulation. It will have Partition, boolean-typed pruned flag, and a set of redundantColumnDomains.", "url": "https://github.com/prestodb/presto/pull/15554#discussion_r561537644", "createdAt": "2021-01-21T03:10:08Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitManager.java", "diffHunk": "@@ -621,16 +637,21 @@ else if (hiveType.equals(HIVE_LONG)) {\n     {\n         private final Map<String, Partition> partitions;\n         private final Set<String> prunedPartitionNames;\n+        private final Map<String, Set<ColumnHandle>> redundantColumnDomains;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be70bf53830c066f08d2da2b14020ac9e53b10a2"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTU2OTgxOQ==", "bodyText": "The only concern I have is the SPI change. Let's chat offline", "url": "https://github.com/prestodb/presto/pull/15554#discussion_r561569819", "createdAt": "2021-01-21T03:41:36Z", "author": {"login": "highker"}, "path": "presto-spi/src/main/java/com/facebook/presto/spi/ConnectorSplit.java", "diffHunk": "@@ -48,4 +50,12 @@ default OptionalLong getSplitSizeInBytes()\n     {\n         return OptionalLong.empty();\n     }\n+\n+    /**\n+     * Provide a set of columns whose domains could be ignored.\n+     */\n+    default Set<ColumnHandle> getRedundantColumnDomains()\n+    {\n+        return new HashSet<>();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be70bf53830c066f08d2da2b14020ac9e53b10a2"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTU3MzUyNw==", "bodyText": "Is this correct? What if we have a running driver, the first split removes a column domain and this code will persist the change in the context, then the second split doesn't want to remove the column domain and it will get the one without column domain?", "url": "https://github.com/prestodb/presto/pull/15554#discussion_r561573527", "createdAt": "2021-01-21T03:45:18Z", "author": {"login": "highker"}, "path": "presto-main/src/main/java/com/facebook/presto/operator/Driver.java", "diffHunk": "@@ -258,9 +258,10 @@ private void processNewSources()\n         for (ScheduledSplit newSplit : newSplits) {\n             Split split = newSplit.getSplit();\n \n-            if (fragmentResultCacheContext.isPresent() && !(split.getConnectorSplit() instanceof RemoteSplit)) {\n+            if (fragmentResultCacheContext.get().isPresent() && !(split.getConnectorSplit() instanceof RemoteSplit)) {\n                 checkState(!this.cachedResult.get().isPresent());\n-                this.cachedResult.set(fragmentResultCacheContext.get().getFragmentResultCacheManager().get(fragmentResultCacheContext.get().getHashedCanonicalPlanFragment(), split));\n+                this.fragmentResultCacheContext.set(this.fragmentResultCacheContext.get().map(context -> context.removeRedundantSubfieldDomains(split.getConnectorSplit().getRedundantColumnDomains())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be70bf53830c066f08d2da2b14020ac9e53b10a2"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcyOTc4MjU0", "url": "https://github.com/prestodb/presto/pull/15554#pullrequestreview-572978254", "createdAt": "2021-01-21T04:39:47Z", "commit": {"oid": "d87f72ee709a3a5632103852acafa6fe5c91c1f1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwNDozOTo0N1rOIXlN7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwNDozOTo0N1rOIXlN7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTU5NzkzMg==", "bodyText": "May be can early exit if predicates do not exist or do not have non partition columns.", "url": "https://github.com/prestodb/presto/pull/15554#discussion_r561597932", "createdAt": "2021-01-21T04:39:47Z", "author": {"login": "jainxrohit"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitManager.java", "diffHunk": "@@ -496,6 +506,149 @@ public CounterStat getHighMemorySplitSource()\n         return concat(partitionBatches);\n     }\n \n+    private static PartitionBatchInfo getPartitionBatchInfo(\n+            ConnectorSession session,\n+            SemiTransactionalHiveMetastore metastore,\n+            SchemaTableName tableName,\n+            List<HivePartition> partitionBatch,\n+            Map<String, HiveColumnHandle> predicateColumns,\n+            Optional<Map<Subfield, Domain>> domains)\n+    {\n+        if (isPartitionStatsBasedOptimizationEnabled(session) && domains.isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d87f72ee709a3a5632103852acafa6fe5c91c1f1"}, "originalPosition": 124}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "be70bf53830c066f08d2da2b14020ac9e53b10a2", "author": {"user": {"login": "shixuan-fan", "name": "Shixuan Fan"}}, "url": "https://github.com/prestodb/presto/commit/be70bf53830c066f08d2da2b14020ac9e53b10a2", "committedDate": "2021-01-15T23:09:41Z", "message": "Support column domain stripping based on partition stats"}, "afterCommit": {"oid": "93e78bbad05d1a59de52526a978ebb1cca0b0172", "author": {"user": {"login": "shixuan-fan", "name": "Shixuan Fan"}}, "url": "https://github.com/prestodb/presto/commit/93e78bbad05d1a59de52526a978ebb1cca0b0172", "committedDate": "2021-01-23T01:30:00Z", "message": "Support column domain stripping based on partition stats"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "93e78bbad05d1a59de52526a978ebb1cca0b0172", "author": {"user": {"login": "shixuan-fan", "name": "Shixuan Fan"}}, "url": "https://github.com/prestodb/presto/commit/93e78bbad05d1a59de52526a978ebb1cca0b0172", "committedDate": "2021-01-23T01:30:00Z", "message": "Support column domain stripping based on partition stats"}, "afterCommit": {"oid": "8f6ed9f98f2a3a7d29c50edbf7d55f5a6a189b70", "author": {"user": {"login": "shixuan-fan", "name": "Shixuan Fan"}}, "url": "https://github.com/prestodb/presto/commit/8f6ed9f98f2a3a7d29c50edbf7d55f5a6a189b70", "committedDate": "2021-01-25T22:14:32Z", "message": "Support column domain stripping based on partition statistics"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8f6ed9f98f2a3a7d29c50edbf7d55f5a6a189b70", "author": {"user": {"login": "shixuan-fan", "name": "Shixuan Fan"}}, "url": "https://github.com/prestodb/presto/commit/8f6ed9f98f2a3a7d29c50edbf7d55f5a6a189b70", "committedDate": "2021-01-25T22:14:32Z", "message": "Support column domain stripping based on partition statistics"}, "afterCommit": {"oid": "07fc165242790489ca45179b7b8a663df4458d38", "author": {"user": {"login": "shixuan-fan", "name": "Shixuan Fan"}}, "url": "https://github.com/prestodb/presto/commit/07fc165242790489ca45179b7b8a663df4458d38", "committedDate": "2021-01-25T22:28:27Z", "message": "Support column domain stripping based on partition statistics"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "07fc165242790489ca45179b7b8a663df4458d38", "author": {"user": {"login": "shixuan-fan", "name": "Shixuan Fan"}}, "url": "https://github.com/prestodb/presto/commit/07fc165242790489ca45179b7b8a663df4458d38", "committedDate": "2021-01-25T22:28:27Z", "message": "Support column domain stripping based on partition statistics"}, "afterCommit": {"oid": "aedd0d591b2fe71b568dc05d8aebe2b5c83a76c7", "author": {"user": {"login": "shixuan-fan", "name": "Shixuan Fan"}}, "url": "https://github.com/prestodb/presto/commit/aedd0d591b2fe71b568dc05d8aebe2b5c83a76c7", "committedDate": "2021-01-26T01:16:06Z", "message": "Support column domain stripping based on partition statistics"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "aedd0d591b2fe71b568dc05d8aebe2b5c83a76c7", "author": {"user": {"login": "shixuan-fan", "name": "Shixuan Fan"}}, "url": "https://github.com/prestodb/presto/commit/aedd0d591b2fe71b568dc05d8aebe2b5c83a76c7", "committedDate": "2021-01-26T01:16:06Z", "message": "Support column domain stripping based on partition statistics"}, "afterCommit": {"oid": "fa318fa89ea73baef074767f7a3d1870cf36b1d2", "author": {"user": {"login": "shixuan-fan", "name": "Shixuan Fan"}}, "url": "https://github.com/prestodb/presto/commit/fa318fa89ea73baef074767f7a3d1870cf36b1d2", "committedDate": "2021-01-26T22:40:43Z", "message": "Support column domain stripping based on partition statistics"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fa318fa89ea73baef074767f7a3d1870cf36b1d2", "author": {"user": {"login": "shixuan-fan", "name": "Shixuan Fan"}}, "url": "https://github.com/prestodb/presto/commit/fa318fa89ea73baef074767f7a3d1870cf36b1d2", "committedDate": "2021-01-26T22:40:43Z", "message": "Support column domain stripping based on partition statistics"}, "afterCommit": {"oid": "43006f6863a7ef31295c4d63166f4ebe475c34dd", "author": {"user": {"login": "shixuan-fan", "name": "Shixuan Fan"}}, "url": "https://github.com/prestodb/presto/commit/43006f6863a7ef31295c4d63166f4ebe475c34dd", "committedDate": "2021-01-26T22:47:26Z", "message": "Support column domain stripping based on partition statistics"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "43006f6863a7ef31295c4d63166f4ebe475c34dd", "author": {"user": {"login": "shixuan-fan", "name": "Shixuan Fan"}}, "url": "https://github.com/prestodb/presto/commit/43006f6863a7ef31295c4d63166f4ebe475c34dd", "committedDate": "2021-01-26T22:47:26Z", "message": "Support column domain stripping based on partition statistics"}, "afterCommit": {"oid": "75bc9c34762a3770a88ae168b31606e805ed01e9", "author": {"user": {"login": "shixuan-fan", "name": "Shixuan Fan"}}, "url": "https://github.com/prestodb/presto/commit/75bc9c34762a3770a88ae168b31606e805ed01e9", "committedDate": "2021-01-27T00:59:12Z", "message": "Support column domain stripping based on partition statistics"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc2OTI5Mzc0", "url": "https://github.com/prestodb/presto/pull/15554#pullrequestreview-576929374", "createdAt": "2021-01-27T02:24:31Z", "commit": {"oid": "f1851ccbcee9f8c68d8d71d4f0f36c61ad4f57e2"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yN1QwMjoyNDozMVrOIazmvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yN1QwMjozODowOFrOIaz4Ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDk3OTM5MA==", "bodyText": "nit: break a line after this", "url": "https://github.com/prestodb/presto/pull/15554#discussion_r564979390", "createdAt": "2021-01-27T02:24:31Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitManager.java", "diffHunk": "@@ -386,6 +398,9 @@ public CounterStat getHighMemorySplitSource()\n             int unreadablePartitionsSkipped = 0;\n             for (HivePartition hivePartition : partitionBatch) {\n                 Partition partition = partitions.get(hivePartition.getPartitionId());\n+                if (partitionSplitInfo.get(hivePartition.getPartitionId()).isPruned()) {\n+                    continue;\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1851ccbcee9f8c68d8d71d4f0f36c61ad4f57e2"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDk4MDgyNg==", "bodyText": "Maybe add a javadoc or todo to indicate varchar/varbinary could be added as well", "url": "https://github.com/prestodb/presto/pull/15554#discussion_r564980826", "createdAt": "2021-01-27T02:28:45Z", "author": {"login": "highker"}, "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitManager.java", "diffHunk": "@@ -496,6 +516,207 @@ public CounterStat getHighMemorySplitSource()\n         return concat(partitionBatches);\n     }\n \n+    private Map<String, PartitionSplitInfo> getPartitionSplitInfo(\n+            ConnectorSession session,\n+            SemiTransactionalHiveMetastore metastore,\n+            SchemaTableName tableName,\n+            List<HivePartition> partitionBatch,\n+            Map<String, HiveColumnHandle> predicateColumns,\n+            Optional<Map<Subfield, Domain>> domains)\n+    {\n+        Map<String, Optional<Partition>> partitions = metastore.getPartitionsByNames(\n+                tableName.getSchemaName(),\n+                tableName.getTableName(),\n+                Lists.transform(partitionBatch, HivePartition::getPartitionId));\n+        Map<String, PartitionStatistics> partitionStatistics = ImmutableMap.of();\n+        if (domains.isPresent() && isPartitionStatisticsBasedOptimizationEnabled(session)) {\n+            partitionStatistics = metastore.getPartitionStatistics(\n+                    tableName.getSchemaName(),\n+                    tableName.getTableName(),\n+                    partitionBatch.stream()\n+                            .map(HivePartition::getPartitionId)\n+                            .collect(toImmutableSet()));\n+        }\n+\n+        ImmutableMap.Builder<String, PartitionSplitInfo> partitionSplitInfoBuilder = ImmutableMap.builder();\n+        for (Map.Entry<String, Optional<Partition>> entry : partitions.entrySet()) {\n+            ImmutableSet.Builder<ColumnHandle> redundantColumnDomainsBuilder = ImmutableSet.builder();\n+            if (!entry.getValue().isPresent()) {\n+                throw new PrestoException(HIVE_PARTITION_DROPPED_DURING_QUERY, \"Partition no longer exists: \" + entry.getKey());\n+            }\n+            boolean pruned = false;\n+            if (partitionStatistics.containsKey(entry.getKey())) {\n+                Map<String, HiveColumnStatistics> columnStatistics = partitionStatistics.get(entry.getKey()).getColumnStatistics();\n+                for (Map.Entry<String, HiveColumnHandle> predicateColumnEntry : predicateColumns.entrySet()) {\n+                    if (columnStatistics.containsKey(predicateColumnEntry.getKey())) {\n+                        Optional<ValueSet> columnsStatisticsValueSet = getColumnStatisticsValueSet(columnStatistics.get(predicateColumnEntry.getKey()), predicateColumnEntry.getValue().getHiveType());\n+                        if (columnsStatisticsValueSet.isPresent()) {\n+                            ValueSet columnPredicateValueSet = domains.get().get(new Subfield(predicateColumnEntry.getKey())).getValues();\n+                            if (!columnPredicateValueSet.overlaps(columnsStatisticsValueSet.get())) {\n+                                pruned = true;\n+                                break;\n+                            }\n+                            if (columnPredicateValueSet.contains(columnsStatisticsValueSet.get())) {\n+                                redundantColumnDomainsBuilder.add(predicateColumnEntry.getValue());\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+\n+            partitionSplitInfoBuilder.put(entry.getKey(), new PartitionSplitInfo(entry.getValue().get(), pruned, redundantColumnDomainsBuilder.build()));\n+        }\n+        return partitionSplitInfoBuilder.build();\n+    }\n+\n+    private Optional<ValueSet> getColumnStatisticsValueSet(HiveColumnStatistics statistics, HiveType hiveType)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1851ccbcee9f8c68d8d71d4f0f36c61ad4f57e2"}, "originalPosition": 206}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDk4Mzg5OQ==", "bodyText": "static import BIGINT", "url": "https://github.com/prestodb/presto/pull/15554#discussion_r564983899", "createdAt": "2021-01-27T02:38:08Z", "author": {"login": "highker"}, "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveSplit.java", "diffHunk": "@@ -91,7 +103,7 @@ public void testJsonRoundTrip()\n                 Optional.of(new HiveSplit.BucketConversion(\n                         32,\n                         16,\n-                        ImmutableList.of(new HiveColumnHandle(\"col\", HIVE_LONG, BIGINT.getTypeSignature(), 5, ColumnType.REGULAR, Optional.of(\"comment\"), Optional.empty())))),\n+                        ImmutableList.of(new HiveColumnHandle(\"col\", HIVE_LONG, BigintType.BIGINT.getTypeSignature(), 5, REGULAR, Optional.of(\"comment\"), Optional.empty())))),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75bc9c34762a3770a88ae168b31606e805ed01e9"}, "originalPosition": 60}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "75bc9c34762a3770a88ae168b31606e805ed01e9", "author": {"user": {"login": "shixuan-fan", "name": "Shixuan Fan"}}, "url": "https://github.com/prestodb/presto/commit/75bc9c34762a3770a88ae168b31606e805ed01e9", "committedDate": "2021-01-27T00:59:12Z", "message": "Support column domain stripping based on partition statistics"}, "afterCommit": {"oid": "dfbf1aa50115f14e59fc3f609784a322f919dec7", "author": {"user": {"login": "shixuan-fan", "name": "Shixuan Fan"}}, "url": "https://github.com/prestodb/presto/commit/dfbf1aa50115f14e59fc3f609784a322f919dec7", "committedDate": "2021-01-27T21:46:23Z", "message": "Support column domain stripping based on partition statistics"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dfbf1aa50115f14e59fc3f609784a322f919dec7", "author": {"user": {"login": "shixuan-fan", "name": "Shixuan Fan"}}, "url": "https://github.com/prestodb/presto/commit/dfbf1aa50115f14e59fc3f609784a322f919dec7", "committedDate": "2021-01-27T21:46:23Z", "message": "Support column domain stripping based on partition statistics"}, "afterCommit": {"oid": "0fd0a77dd1a37b2545794fb43daeb3ed923554c1", "author": {"user": {"login": "shixuan-fan", "name": "Shixuan Fan"}}, "url": "https://github.com/prestodb/presto/commit/0fd0a77dd1a37b2545794fb43daeb3ed923554c1", "committedDate": "2021-01-27T23:05:15Z", "message": "Support column domain stripping based on partition statistics"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0fd0a77dd1a37b2545794fb43daeb3ed923554c1", "author": {"user": {"login": "shixuan-fan", "name": "Shixuan Fan"}}, "url": "https://github.com/prestodb/presto/commit/0fd0a77dd1a37b2545794fb43daeb3ed923554c1", "committedDate": "2021-01-27T23:05:15Z", "message": "Support column domain stripping based on partition statistics"}, "afterCommit": {"oid": "89e4c3d06927d14bf9b6d28b93b5f9a2d6baa5a1", "author": {"user": {"login": "shixuan-fan", "name": "Shixuan Fan"}}, "url": "https://github.com/prestodb/presto/commit/89e4c3d06927d14bf9b6d28b93b5f9a2d6baa5a1", "committedDate": "2021-01-28T00:29:05Z", "message": "Support column domain stripping based on partition statistics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d6358f0c427816eae7edd0b76f2cf846ca1c4b2a", "author": {"user": {"login": "shixuan-fan", "name": "Shixuan Fan"}}, "url": "https://github.com/prestodb/presto/commit/d6358f0c427816eae7edd0b76f2cf846ca1c4b2a", "committedDate": "2021-01-28T01:15:00Z", "message": "Support partition pruning based on partition statistics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b82dba0cb07dc32ec095a427be030f70d54d8570", "author": {"user": {"login": "shixuan-fan", "name": "Shixuan Fan"}}, "url": "https://github.com/prestodb/presto/commit/b82dba0cb07dc32ec095a427be030f70d54d8570", "committedDate": "2021-01-28T01:15:00Z", "message": "Support column domain stripping based on partition statistics"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "89e4c3d06927d14bf9b6d28b93b5f9a2d6baa5a1", "author": {"user": {"login": "shixuan-fan", "name": "Shixuan Fan"}}, "url": "https://github.com/prestodb/presto/commit/89e4c3d06927d14bf9b6d28b93b5f9a2d6baa5a1", "committedDate": "2021-01-28T00:29:05Z", "message": "Support column domain stripping based on partition statistics"}, "afterCommit": {"oid": "b82dba0cb07dc32ec095a427be030f70d54d8570", "author": {"user": {"login": "shixuan-fan", "name": "Shixuan Fan"}}, "url": "https://github.com/prestodb/presto/commit/b82dba0cb07dc32ec095a427be030f70d54d8570", "committedDate": "2021-01-28T01:15:00Z", "message": "Support column domain stripping based on partition statistics"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4595, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}